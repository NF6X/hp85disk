
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001618  00800100  0001dd10  0001dda4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001dd10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d3  00801718  00801718  0001f3bc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f3bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f3d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001720  00000000  00000000  0001f410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027b9a  00000000  00000000  00020b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005eea  00000000  00000000  000486ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011c56  00000000  00000000  0004e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000060e8  00000000  00000000  0006020c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004685  00000000  00000000  000662f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000269a1  00000000  00000000  0006a979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016b8  00000000  00000000  0009131a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801718 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d2 l     O .text	0000001e __c.3672
000002f0 l     O .text	0000001d __c.3667
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800106 l     O .data	00000001 _displayControl
00800105 l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006ab2 l     F .text	0000002a IS_Leap
00800250 l     O .data	00000018 __days
00801768 l     O .bss	00000016 t.3726
0080177e l     O .bss	00000002 p.3727
0080174a l     O .bss	00000008 ts.3805
00801752 l     O .bss	00000016 t.3738
00800268 l     O .data	0000001a __days_sum
0000076c l     O .text	00000012 __c.3845
0000075b l     O .text	00000011 __c.3847
0000074a l     O .text	00000011 __c.3849
00000738 l     O .text	00000012 __c.3851
00000727 l     O .text	00000011 __c.3853
00000710 l     O .text	00000017 __c.3855
0000077e l     O .text	00000021 __c.3824
0000079f l     O .text	0000001d __c.3699
008017c0 l     O .bss	00000020 buf.3704
008017a0 l     O .bss	00000020 buf.3712
00801780 l     O .bss	00000020 buf.3716
000006f7 l     O .text	00000019 __c.3884
000006de l     O .text	00000019 __c.3886
000006c5 l     O .text	00000019 __c.3890
000006ac l     O .text	00000019 __c.3892
0000069a l     O .text	00000012 __c.3901
00000685 l     O .text	00000015 __c.3903
0000066e l     O .text	00000017 __c.3905
00000654 l     O .text	0000001a __c.3907
00000630 l     O .text	00000024 __c.3909
0000061e l     O .text	00000012 __c.3916
0000060d l     O .text	00000011 __c.3918
000005fc l     O .text	00000011 __c.3920
000005ea l     O .text	00000012 __c.3922
000005d9 l     O .text	00000011 __c.3924
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000da72 l     F .text	00000004 xchg_spi
0000da76 l     F .text	0000000c deselect
0000da82 l     F .text	0000004e rcvr_datablock
0000daf4 l     F .text	0000003a select
000007bc l     O .text	00000010 __c.3667
0000db2e l     F .text	00000086 send_cmd
0000dbb4 l     F .text	00000054 xmit_datablock
008017e4 l     O .bss	00000001 CardType
008017e6 l     O .bss	00000001 Timer1
008017e5 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008006f1 l     O .data	00000014 CSWTCH.97
00000c78 l     O .text	00000018 __c.3644
00000c60 l     O .text	00000018 __c.3651
0000f270 l     F .text	0000001a _fprintf_putc
00000c47 l     O .text	0000000d __c.3843
00000c3e l     O .text	00000009 __c.3845
00000c39 l     O .text	00000005 __c.3847
00000c33 l     O .text	00000006 __c.3849
00000c2a l     O .text	00000009 __c.3851
00000c1d l     O .text	0000000d __c.3853
00000c10 l     O .text	0000000d __c.3855
00000c03 l     O .text	0000000d __c.3857
00000bf7 l     O .text	0000000c __c.3859
00000beb l     O .text	0000000c __c.3861
00000bdf l     O .text	0000000c __c.3863
008018f0 l     O .bss	0000002e _dp
008017f1 l     O .bss	000000ff _de
00000bd7 l     O .text	00000008 __c.3967
00000bd3 l     O .text	00000004 __c.3969
00000bb4 l     O .text	0000001f __c.3996
00000c54 l     O .text	0000000c __c.3722
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f8f l     O .text	0000000c __c.3668
00000e58 l     O .text	00000137 __c.3670
00000e2b l     O .text	0000000c __c.3730
00000e1b l     O .text	00000010 __c.3732
00000e0e l     O .text	0000000d __c.3734
00000dfe l     O .text	00000010 __c.3736
00000df1 l     O .text	0000000d __c.3738
00000dd5 l     O .text	0000000f __c.3743
00000de4 l     O .text	0000000d __c.3740
00000dc2 l     O .text	00000013 __c.3747
0080017c l     O .data	00000002 _pagesize
00000d91 l     O .text	00000007 __c.3796
00000d8f l     O .text	00000002 __c.3798
00000e44 l     O .text	00000010 __c.3712
00000e42 l     O .text	00000002 __c.3717
00000e37 l     O .text	0000000b __c.3719
00000daa l     O .text	00000009 __c.3761
00000da4 l     O .text	00000006 __c.3763
00000da0 l     O .text	00000004 __c.3768
00000d9c l     O .text	00000004 __c.3773
00000d9a l     O .text	00000002 __c.3781
00000db3 l     O .text	0000000f __c.3759
00000d98 l     O .text	00000002 __c.3786
00000d7d l     O .text	00000012 __c.3810
00000d79 l     O .text	00000004 __c.3812
00000d5f l     O .text	0000001a __c.3817
00000d3e l     O .text	00000021 __c.3830
00000d30 l     O .text	0000000e __c.3832
00000d1a l     O .text	00000016 __c.3834
00000ce7 l     O .text	00000023 __c.3842
00000d0a l     O .text	00000010 __c.3839
00000cdc l     O .text	0000000b __c.3846
00000ccc l     O .text	00000010 __c.3854
00000cbf l     O .text	0000000d __c.3856
00000cb0 l     O .text	0000000f __c.3866
00000c9f l     O .text	00000011 __c.3874
00000c90 l     O .text	0000000f __c.3884
00000e54 l     O .text	00000004 __c.3701
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000129e l     O .text	00000011 __c.4171
0000128b l     O .text	00000013 __c.4176
00001265 l     O .text	00000026 __c.4181
0000124a l     O .text	0000001b __c.4183
00001223 l     O .text	00000027 __c.4188
00001208 l     O .text	0000001b __c.4190
000011e5 l     O .text	00000023 __c.4196
000011d9 l     O .text	0000000c __c.4204
000011ce l     O .text	0000000b __c.4209
000011c4 l     O .text	0000000a __c.4211
00001196 l     O .text	0000002e __c.4216
00001104 l     O .text	0000001a __c.4249
0000111e l     O .text	0000001b __c.4245
00001139 l     O .text	0000001b __c.4242
00001154 l     O .text	00000028 __c.4237
0000117c l     O .text	0000001a __c.4233
000010f1 l     O .text	00000013 __c.4253
000010e8 l     O .text	00000009 __c.4295
000010e2 l     O .text	00000006 __c.4297
000010d7 l     O .text	0000000b __c.4301
000010cc l     O .text	0000000b __c.4303
000010c1 l     O .text	0000000b __c.4305
000010a8 l     O .text	00000019 __c.4321
0000107b l     O .text	0000002d __c.4324
00001054 l     O .text	00000027 __c.4328
0000103a l     O .text	0000001a __c.4338
00001012 l     O .text	00000028 __c.4343
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001550 l     O .text	00000012 __c.4155
00001537 l     O .text	00000019 __c.4157
0000151d l     O .text	0000001a __c.4203
000014f2 l     O .text	0000002b __c.4205
000014db l     O .text	00000017 __c.4207
000014cf l     O .text	0000000c __c.4209
000014c9 l     O .text	00000006 __c.4213
000014b7 l     O .text	00000012 __c.4215
000014b0 l     O .text	00000007 __c.4220
000014a5 l     O .text	0000000b __c.4222
0000149e l     O .text	00000007 __c.4224
00001491 l     O .text	0000000d __c.4226
00001480 l     O .text	00000011 __c.4228
0000145f l     O .text	00000021 __c.4255
00001445 l     O .text	0000001a __c.4257
00001432 l     O .text	00000013 __c.4262
0000141f l     O .text	00000013 __c.4264
00001418 l     O .text	00000007 __c.4266
00001411 l     O .text	00000007 __c.4268
0000140a l     O .text	00000007 __c.4270
000013fe l     O .text	0000000c __c.4272
000013f1 l     O .text	0000000d __c.4274
000013ea l     O .text	00000007 __c.4276
000013ce l     O .text	0000001c __c.4278
0000137b l     O .text	00000007 __c.4298
0000136a l     O .text	00000011 __c.4300
00001358 l     O .text	00000012 __c.4302
00001344 l     O .text	00000014 __c.4304
00001334 l     O .text	00000010 __c.4306
00001328 l     O .text	0000000c __c.4308
00001317 l     O .text	00000011 __c.4313
00001305 l     O .text	00000012 __c.4315
000012df l     O .text	00000026 __c.4317
000012ce l     O .text	00000011 __c.4322
000013c7 l     O .text	00000007 __c.4283
000013c5 l     O .text	00000002 __c.4285
000013b3 l     O .text	00000012 __c.4287
000013a2 l     O .text	00000011 __c.4289
0000138e l     O .text	00000014 __c.4291
00001382 l     O .text	0000000c __c.4293
000012c2 l     O .text	0000000c __c.4333
000012c0 l     O .text	00000002 __c.4335
000012ba l     O .text	00000006 __c.4337
000012b6 l     O .text	00000004 __c.4342
000012b1 l     O .text	00000002 __c.4346
000012b3 l     O .text	00000003 __c.4344
000012af l     O .text	00000002 __c.4354
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002044 l     O .text	0000000d __c.4147
00002032 l     O .text	00000012 __c.4149
00801942 l     O .bss	00000005 B.4160
0080192f l     O .bss	00000013 B.4164
00801922 l     O .bss	0000000d B.4168
00001e71 l     O .text	00000005 __c.4271
00001e66 l     O .text	0000000b __c.4273
00001e52 l     O .text	00000014 __c.4283
00001e37 l     O .text	0000001b __c.4285
00001e26 l     O .text	00000011 __c.4293
00001e03 l     O .text	00000023 __c.4295
00001de6 l     O .text	0000001d __c.4297
00001dc7 l     O .text	0000001f __c.4299
00001daf l     O .text	00000018 __c.4304
00001d95 l     O .text	0000001a __c.4309
00001d6f l     O .text	00000026 __c.4318
00001d56 l     O .text	00000019 __c.4320
00001c5a l     O .text	00000025 __c.4342
00001c7f l     O .text	0000001a __c.4340
00001c99 l     O .text	00000016 __c.4338
00001caf l     O .text	0000000e __c.4336
00001cbd l     O .text	0000001c __c.4334
00001cd9 l     O .text	0000001d __c.4332
00001d27 l     O .text	00000019 __c.4325
00001d40 l     O .text	00000016 __c.4322
00001d0f l     O .text	00000018 __c.4327
00001cf6 l     O .text	00000019 __c.4330
00001c39 l     O .text	00000021 __c.4344
00001c23 l     O .text	00000016 __c.4346
00001c06 l     O .text	0000001d __c.4348
00001bea l     O .text	0000001c __c.4350
00001bd9 l     O .text	00000011 __c.4352
00001bbb l     O .text	0000001e __c.4354
00001b9c l     O .text	0000001f __c.4356
00001b81 l     O .text	0000001b __c.4358
00001b68 l     O .text	00000019 __c.4360
00001b51 l     O .text	00000017 __c.4362
00001b30 l     O .text	00000021 __c.4364
00001b10 l     O .text	00000020 __c.4366
00001ad8 l     O .text	00000038 __c.4369
00001995 l     O .text	00000020 __c.4402
00001981 l     O .text	00000014 __c.4404
00001f16 l     O .text	00000029 __c.4232
00001ec9 l     O .text	00000026 __c.4240
00001eef l     O .text	00000014 __c.4238
00001f03 l     O .text	00000013 __c.4234
00001ea1 l     O .text	00000028 __c.4244
00001e76 l     O .text	0000002b __c.4246
00001967 l     O .text	0000001a __c.4411
00001954 l     O .text	00000013 __c.4413
0000201f l     O .text	00000013 __c.4174
00001948 l     O .text	0000000c __c.4427
00001935 l     O .text	00000013 __c.4434
00001926 l     O .text	0000000f __c.4436
00001ac5 l     O .text	00000013 __c.4378
00001aac l     O .text	00000019 __c.4380
00001a87 l     O .text	00000025 __c.4383
00001a6a l     O .text	0000001d __c.4386
00001a4c l     O .text	0000001e __c.4388
00001a25 l     O .text	00000027 __c.4390
00001a11 l     O .text	00000014 __c.4392
000019f1 l     O .text	00000020 __c.4394
000019b5 l     O .text	0000003c __c.4397
0000190a l     O .text	0000001c __c.4443
000018e7 l     O .text	00000023 __c.4450
00001fdb l     O .text	00000028 __c.4207
00001fbd l     O .text	0000001e __c.4209
00001f8c l     O .text	00000019 __c.4213
00001fa5 l     O .text	00000018 __c.4211
00001f67 l     O .text	00000025 __c.4218
00001f3f l     O .text	00000028 __c.4220
00002003 l     O .text	0000001c __c.4190
000018d1 l     O .text	00000016 __c.4455
000018bb l     O .text	00000016 __c.4457
000018a6 l     O .text	00000015 __c.4459
00001897 l     O .text	0000000f __c.4461
00001883 l     O .text	00000014 __c.4463
0000184f l     O .text	00000034 __c.4465
0000181b l     O .text	00000034 __c.4467
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008bba l     F .text	0000002a ld_dword
00008be4 l     F .text	0000000c st_dword
00008bf0 l     F .text	00000012 mem_set
00008c02 l     F .text	00000050 clust2sect
00008c52 l     F .text	00000078 clmt_clust
00008cca l     F .text	0000001e sum_sfn
008002bb l     O .data	00000080 ExCvt
00008ce8 l     F .text	00000040 get_ldnumber
00008d28 l     F .text	0000005a validate
00008d82 l     F .text	00000016 mem_cpy.part.0
00008d98 l     F .text	0000002a ld_clust.isra.1
00008dc2 l     F .text	0000001a st_clust.isra.2
00008ddc l     F .text	000000a2 sync_window.part.3
00008e7e l     F .text	00000012 sync_window
00008e90 l     F .text	000000d8 sync_fs
00008f68 l     F .text	00000082 move_window
00008fea l     F .text	0000007e check_fs
00009068 l     F .text	00000552 find_volume
008017e2 l     O .bss	00000002 FatFs
008017e0 l     O .bss	00000002 Fsid
000095ba l     F .text	000001fa put_fat
000097b4 l     F .text	00000166 get_fat.isra.7
0000991a l     F .text	00000180 dir_sdi
00009a9a l     F .text	000001a2 create_chain
00009c3c l     F .text	00000122 remove_chain
00009d5e l     F .text	000001b0 get_fileinfo
00009f0e l     F .text	00000250 dir_next
0000a15e l     F .text	00000074 dir_alloc
0000a1d2 l     F .text	0000019c dir_read
008002ae l     O .data	0000000d LfnOfs
0000a36e l     F .text	00000090 dir_remove
0000a3fe l     F .text	0000022e dir_find
0000a62c l     F .text	00000348 dir_register
0000a974 l     F .text	00000442 follow_path
0080029e l     O .data	00000010 badchr.4336
00800290 l     O .data	0000000e cst32.4377
00800282 l     O .data	0000000e cst.4376
00000000 l    df *ABS*	00000000 unicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008005e9 l     O .data	00000100 Tbl
0080033b l     O .data	000000bc cvt2.1794
008003f7 l     O .data	000001f2 cvt1.1793
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a57 l     O .text	00000007 __c.3646
008006e9 l     O .data	00000008 CSWTCH.27
00000a46 l     O .text	00000011 __c.3682
00000a28 l     O .text	0000001e __c.3684
00000a09 l     O .text	0000001f __c.3686
000009eb l     O .text	0000001e __c.3688
000009cd l     O .text	0000001e __c.3690
000009ae l     O .text	0000001f __c.3692
0000098f l     O .text	0000001f __c.3694
00000970 l     O .text	0000001f __c.3696
00000951 l     O .text	0000001f __c.3698
00000932 l     O .text	0000001f __c.3700
00000914 l     O .text	0000001e __c.3702
000008ef l     O .text	00000025 __c.3704
000008a2 l     O .text	0000004d __c.3706
00000887 l     O .text	0000001b __c.3712
00000865 l     O .text	00000022 __c.3714
00000863 l     O .text	00000002 __c.3716
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004fe l     O .text	00000020 __c.3636
000004d8 l     O .text	00000026 __c.3802
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007a12 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000e3cc l     F .text	0000003c mmc_task
00000847 l     O .text	0000001c __c.3644
0000083a l     O .text	0000000d __c.3672
0000082a l     O .text	00000010 __c.3685
008017ef l     O .bss	00000002 mmc_init_flag
0000081e l     O .text	0000000c __c.3687
0000080d l     O .text	00000011 __c.3689
000007ef l     O .text	0000001e __c.3692
000007da l     O .text	00000015 __c.3694
000007cc l     O .text	0000000e __c.3696
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ba8 l     O .text	0000000c __c.3637
00000b2c l     O .text	0000007c __c.3639
00000a9c l     O .text	0000000e __c.3678
00000a73 l     O .text	00000029 __c.3682
00000a5e l     O .text	00000015 __c.3684
00000afc l     O .text	00000020 __c.3657
00000aec l     O .text	00000010 __c.3659
00000ad8 l     O .text	00000014 __c.3661
00000aca l     O .text	0000000e __c.3663
00000aaa l     O .text	00000020 __c.3665
00000b1c l     O .text	00000010 __c.3649
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001810 l     O .text	0000000b __c.4364
0000168f l     O .text	00000181 __c.4366
00001682 l     O .text	0000000d __c.4374
0000166a l     O .text	00000018 __c.4377
00001652 l     O .text	00000018 __c.4379
0000163a l     O .text	00000018 __c.4381
00001622 l     O .text	00000018 __c.4383
00001609 l     O .text	00000019 __c.4385
000015f0 l     O .text	00000019 __c.4387
000015d7 l     O .text	00000019 __c.4389
000015be l     O .text	00000019 __c.4391
000015a7 l     O .text	00000017 __c.4393
00001590 l     O .text	00000017 __c.4395
00001579 l     O .text	00000017 __c.4397
00001562 l     O .text	00000017 __c.4399
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00014efa l     F .text	000000a0 amigo_overflow_check
000027f2 l     O .text	00000019 __c.4120
00014f9a l     F .text	000000de amigo_chs_to_logical
0000279f l     O .text	0000002b __c.4113
00002872 l     O .text	00000018 __c.4090
00002854 l     O .text	0000001e __c.4096
0000283a l     O .text	0000001a __c.4098
00002825 l     O .text	00000015 __c.4104
0000280b l     O .text	0000001a __c.4106
000027ca l     O .text	00000028 __c.4143
0000278f l     O .text	00000010 __c.4154
0000277a l     O .text	00000015 __c.4158
00002760 l     O .text	0000001a __c.4165
00002741 l     O .text	0000001f __c.4172
00002727 l     O .text	0000001a __c.4179
0000271a l     O .text	0000000d __c.4181
0000270a l     O .text	00000010 __c.4188
000026f0 l     O .text	0000001a __c.4190
000026e1 l     O .text	0000000f __c.4194
0000267a l     O .text	00000067 __c.4201
00002613 l     O .text	00000067 __c.4203
000025ac l     O .text	00000067 __c.4205
00002547 l     O .text	00000065 __c.4207
000024f7 l     O .text	00000050 __c.4212
000024a7 l     O .text	00000050 __c.4214
00002457 l     O .text	00000050 __c.4216
00002406 l     O .text	00000051 __c.4218
000023d4 l     O .text	00000032 __c.4230
000023b2 l     O .text	00000022 __c.4232
00002391 l     O .text	00000021 __c.4234
00002370 l     O .text	00000021 __c.4236
00002341 l     O .text	0000002f __c.4238
00002321 l     O .text	00000020 __c.4241
0000230d l     O .text	00000014 __c.4244
000022f9 l     O .text	00000014 __c.4247
000022d0 l     O .text	00000029 __c.4249
000022af l     O .text	00000021 __c.4251
0000229f l     O .text	00000010 __c.4254
0000227d l     O .text	00000022 __c.4256
00002261 l     O .text	0000001c __c.4258
00002238 l     O .text	00000029 __c.4260
00002218 l     O .text	00000020 __c.4262
000021ed l     O .text	0000002b __c.4264
000021ce l     O .text	0000001f __c.4266
000021be l     O .text	00000010 __c.4269
0000218c l     O .text	00000032 __c.4274
0000216c l     O .text	00000020 __c.4278
0000214b l     O .text	00000021 __c.4281
0000212c l     O .text	0000001f __c.4284
0000210a l     O .text	00000022 __c.4287
000020ee l     O .text	0000001c __c.4290
000020ce l     O .text	00000020 __c.4293
000020a5 l     O .text	00000029 __c.4298
0000207a l     O .text	0000002b __c.4301
00002051 l     O .text	00000029 __c.4304
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002915 l     O .text	00000021 __c.4081
00002944 l     O .text	00000015 __c.4073
00002936 l     O .text	0000000e __c.4075
0000297b l     O .text	00000022 __c.4063
00002965 l     O .text	00000016 __c.4065
00002959 l     O .text	0000000c __c.4067
0000290e l     O .text	00000007 __c.4087
000028f2 l     O .text	0000001c __c.4092
000028d8 l     O .text	0000001a __c.4094
000028c3 l     O .text	00000015 __c.4103
000028b1 l     O .text	00000012 __c.4108
0000289f l     O .text	00000012 __c.4110
0000288a l     O .text	00000015 __c.4112
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003207 l     O .text	00000025 __c.4419
000031ce l     O .text	00000039 __c.4421
00003199 l     O .text	00000035 __c.4423
00003164 l     O .text	00000035 __c.4425
0000312c l     O .text	00000038 __c.4427
00003101 l     O .text	0000002b __c.4429
000030dd l     O .text	00000024 __c.4436
000030bb l     O .text	00000022 __c.4443
0080196a l     O .bss	00000002 stack_ind
00801960 l     O .bss	0000000a stack_p
000030a3 l     O .text	00000018 __c.4466
00003084 l     O .text	0000001f __c.4468
00003065 l     O .text	0000001f __c.4470
00003058 l     O .text	0000000d __c.4491
00002d91 l     O .text	00000022 __c.4541
00002db3 l     O .text	00000030 __c.4538
00002de3 l     O .text	0000002f __c.4535
00002e12 l     O .text	00000030 __c.4532
00002e42 l     O .text	00000019 __c.4530
00002e5b l     O .text	0000002e __c.4527
0000303a l     O .text	0000001e __c.4493
00003021 l     O .text	00000019 __c.4497
00002ff9 l     O .text	00000028 __c.4499
00002fcf l     O .text	0000002a __c.4503
00002f9e l     O .text	00000031 __c.4506
00002f71 l     O .text	0000002d __c.4509
00002f43 l     O .text	0000002e __c.4512
00002f15 l     O .text	0000002e __c.4515
00002ee3 l     O .text	00000032 __c.4518
00002eb7 l     O .text	0000002c __c.4521
00002e89 l     O .text	0000002e __c.4524
00002d6f l     O .text	00000022 __c.4545
00002d52 l     O .text	0000001d __c.4547
00002d2b l     O .text	00000027 __c.4549
00002d12 l     O .text	00000019 __c.4560
00002d00 l     O .text	00000012 __c.4571
00002cde l     O .text	00000022 __c.4577
00002c3d l     O .text	00000017 __c.4592
00002c26 l     O .text	00000017 __c.4594
00002c0f l     O .text	00000017 __c.4596
00002c82 l     O .text	00000017 __c.4586
00002c6b l     O .text	00000017 __c.4588
00002c54 l     O .text	00000017 __c.4590
00002cc7 l     O .text	00000017 __c.4580
00002cb0 l     O .text	00000017 __c.4582
00002c99 l     O .text	00000017 __c.4584
00002c0d l     O .text	00000002 __c.4601
00002bed l     O .text	00000020 __c.4609
000029fc l     O .text	00000002 __c.4702
00002a10 l     O .text	00000009 __c.4696
00002a06 l     O .text	0000000a __c.4698
000029fe l     O .text	00000008 __c.4700
00002a80 l     O .text	00000007 __c.4672
00002a76 l     O .text	0000000a __c.4674
00002a6e l     O .text	00000008 __c.4676
00002be7 l     O .text	00000006 __c.4612
00002bdd l     O .text	0000000a __c.4614
00002bd5 l     O .text	00000008 __c.4616
00002bd1 l     O .text	00000004 __c.4618
00002bcc l     O .text	00000005 __c.4620
00002bc2 l     O .text	0000000a __c.4622
00002bbf l     O .text	00000003 __c.4624
00002bb1 l     O .text	0000000e __c.4626
00002ba1 l     O .text	00000010 __c.4628
00002b93 l     O .text	0000000e __c.4630
00002b8e l     O .text	00000005 __c.4632
00002b86 l     O .text	00000008 __c.4634
00002b7c l     O .text	0000000a __c.4636
00002b6e l     O .text	0000000e __c.4638
00002b5e l     O .text	00000010 __c.4640
00002b4e l     O .text	00000010 __c.4642
00002b43 l     O .text	0000000b __c.4644
00002b38 l     O .text	0000000b __c.4646
00002b20 l     O .text	00000018 __c.4648
00002b0d l     O .text	00000013 __c.4650
00002b01 l     O .text	0000000c __c.4652
00002aee l     O .text	00000013 __c.4654
00002ae0 l     O .text	0000000e __c.4656
00002ace l     O .text	00000012 __c.4658
00002ac4 l     O .text	0000000a __c.4660
00002ab7 l     O .text	0000000d __c.4662
00002aae l     O .text	00000009 __c.4664
00002aa3 l     O .text	0000000b __c.4666
00002a92 l     O .text	00000011 __c.4668
00002a87 l     O .text	0000000b __c.4670
00002a6a l     O .text	00000004 __c.4678
00002a65 l     O .text	00000005 __c.4680
00002a5b l     O .text	0000000a __c.4682
00002a58 l     O .text	00000003 __c.4684
00002a4c l     O .text	0000000c __c.4686
00002a3b l     O .text	00000011 __c.4688
00002a29 l     O .text	00000012 __c.4690
00002a23 l     O .text	00000006 __c.4692
00002a19 l     O .text	0000000a __c.4694
000029f7 l     O .text	00000005 __c.4707
000029f5 l     O .text	00000002 __c.4709
000029f3 l     O .text	00000002 __c.4711
0000299f l     O .text	00000008 __c.4730
000029a7 l     O .text	00000022 __c.4728
000029c9 l     O .text	00000008 __c.4726
000029d1 l     O .text	00000022 __c.4724
0000299d l     O .text	00000002 __c.4735
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000457e l     O .text	0000000a __c.4028
000043d9 l     O .text	000001a5 __c.4030
000043b0 l     O .text	00000029 __c.4042
00004398 l     O .text	00000018 __c.4047
00004373 l     O .text	00000025 __c.4059
0000435a l     O .text	00000019 __c.4065
00004339 l     O .text	00000021 __c.4072
000042fd l     O .text	0000003c __c.4081
000042c0 l     O .text	0000003d __c.4090
0080198c l     O .bss	00000020 _lif_ctime_buf.4193
0080196c l     O .bss	00000020 _timestr.4198
000042bb l     O .text	00000005 __c.4213
000042a1 l     O .text	0000001a __c.4215
00004284 l     O .text	0000001d __c.4217
00004267 l     O .text	0000001d __c.4219
0000424a l     O .text	0000001d __c.4221
0000422d l     O .text	0000001d __c.4223
00004210 l     O .text	0000001d __c.4225
000041f3 l     O .text	0000001d __c.4227
000041d6 l     O .text	0000001d __c.4229
000041b9 l     O .text	0000001d __c.4231
0000419f l     O .text	0000001a __c.4233
00004183 l     O .text	0000001c __c.4235
00004166 l     O .text	0000001d __c.4237
00004149 l     O .text	0000001d __c.4239
0000412d l     O .text	0000001c __c.4241
00004111 l     O .text	0000001c __c.4243
000040f7 l     O .text	0000001a __c.4245
000040dd l     O .text	0000001a __c.4247
000040c1 l     O .text	0000001c __c.4249
000040a5 l     O .text	0000001c __c.4251
00004088 l     O .text	0000001d __c.4253
0000406b l     O .text	0000001d __c.4255
0000404e l     O .text	0000001d __c.4257
00004032 l     O .text	0000001c __c.4259
00004018 l     O .text	0000001a __c.4261
00004016 l     O .text	00000002 __c.4263
00003ff7 l     O .text	0000001f __c.4270
00003fbe l     O .text	00000039 __c.4272
00003fa6 l     O .text	00000018 __c.4274
00003f6d l     O .text	00000039 __c.4276
00003f34 l     O .text	00000039 __c.4278
00003f0f l     O .text	00000025 __c.4280
00003ee0 l     O .text	0000002f __c.4282
00003eb4 l     O .text	0000002c __c.4284
00003e93 l     O .text	00000021 __c.4290
00003e4f l     O .text	00000044 __c.4292
00003e0e l     O .text	00000041 __c.4294
00003de0 l     O .text	0000002e __c.4296
00003d95 l     O .text	0000004b __c.4298
00003d4a l     O .text	0000004b __c.4300
00003d1f l     O .text	0000002b __c.4302
00003cf3 l     O .text	0000002c __c.4304
00003c89 l     O .text	0000003a __c.4357
00003c69 l     O .text	00000020 __c.4366
00003c1c l     O .text	0000004d __c.4391
00003ce7 l     O .text	0000000c __c.4320
00003cdb l     O .text	0000000c __c.4328
00003ccf l     O .text	0000000c __c.4333
00003cc3 l     O .text	0000000c __c.4338
00003be4 l     O .text	00000038 __c.4403
00003bbb l     O .text	00000029 __c.4405
00003b6a l     O .text	00000051 __c.4408
00003b2b l     O .text	0000003f __c.4421
00003af5 l     O .text	00000036 __c.4423
00003ac2 l     O .text	00000033 __c.4425
00003a8f l     O .text	00000033 __c.4427
00003a78 l     O .text	00000017 __c.4437
00003a38 l     O .text	00000040 __c.4439
000039ec l     O .text	0000004c __c.4442
000039bc l     O .text	00000030 __c.4444
000039ba l     O .text	00000002 __c.4447
000039ae l     O .text	0000000c __c.4449
000039a1 l     O .text	0000000d __c.4451
0000398e l     O .text	00000013 __c.4453
0000397b l     O .text	00000013 __c.4455
00003954 l     O .text	00000027 __c.4462
0000392f l     O .text	00000025 __c.4464
000038f6 l     O .text	00000039 __c.4478
000038d2 l     O .text	00000024 __c.4495
000038c5 l     O .text	0000000d __c.4512
000038b8 l     O .text	0000000d __c.4517
000038ab l     O .text	0000000d __c.4519
00003878 l     O .text	00000033 __c.4533
0000384a l     O .text	0000002e __c.4535
0000381b l     O .text	0000002f __c.4537
000037eb l     O .text	00000030 __c.4539
000037bc l     O .text	0000002f __c.4541
0000378c l     O .text	00000030 __c.4543
00003765 l     O .text	00000027 __c.4545
0000374e l     O .text	00000017 __c.4547
00003737 l     O .text	00000017 __c.4549
0000371e l     O .text	00000019 __c.4551
00003705 l     O .text	00000019 __c.4553
000036f8 l     O .text	0000000d __c.4555
000036e0 l     O .text	00000018 __c.4579
000036c9 l     O .text	00000017 __c.4581
00003691 l     O .text	00000038 __c.4583
00003681 l     O .text	00000010 __c.4585
000035c1 l     O .text	0000000d __c.4596
000035ce l     O .text	00000028 __c.4594
0000364c l     O .text	00000035 __c.4589
000035f6 l     O .text	00000056 __c.4591
00003599 l     O .text	00000028 __c.4604
0000358c l     O .text	0000000d __c.4607
00003574 l     O .text	00000018 __c.4624
00003561 l     O .text	00000013 __c.4626
00003554 l     O .text	0000000d __c.4628
00003547 l     O .text	0000000d __c.4633
00003527 l     O .text	00000020 __c.4650
0000350c l     O .text	0000001b __c.4652
000034f0 l     O .text	0000001c __c.4654
000034c1 l     O .text	0000002f __c.4656
000034ae l     O .text	00000013 __c.4658
0000347e l     O .text	00000030 __c.4660
00003471 l     O .text	0000000d __c.4662
00003464 l     O .text	0000000d __c.4667
0000343f l     O .text	00000025 __c.4675
0000341f l     O .text	00000020 __c.4677
00003400 l     O .text	0000001f __c.4679
000033d8 l     O .text	00000028 __c.4681
000033c9 l     O .text	0000000f __c.4683
000033a1 l     O .text	00000028 __c.4692
0000337a l     O .text	00000027 __c.4694
00003353 l     O .text	00000027 __c.4696
0000331d l     O .text	00000036 __c.4698
000032f4 l     O .text	00000029 __c.4700
000032dd l     O .text	00000017 __c.4702
000032b4 l     O .text	00000029 __c.4715
0000328f l     O .text	00000025 __c.4717
0000326c l     O .text	00000023 __c.4719
0000324c l     O .text	00000020 __c.4721
0000322c l     O .text	00000020 __c.4723
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000485e l     O .text	00000030 __c.4394
0000483f l     O .text	0000001f __c.4396
00004822 l     O .text	0000001d __c.4398
00004812 l     O .text	00000010 __c.4400
000047eb l     O .text	00000027 __c.4402
000047d1 l     O .text	0000001a __c.4404
000047b7 l     O .text	0000001a __c.4406
000047b5 l     O .text	00000002 __c.4408
000047a6 l     O .text	0000000f __c.4412
0000479b l     O .text	0000000b __c.4414
0000477c l     O .text	0000001f __c.4418
00004779 l     O .text	00000003 __c.4428
0000476d l     O .text	0000000c __c.4430
00004766 l     O .text	00000007 __c.4438
00004755 l     O .text	00000011 __c.4440
0000472e l     O .text	00000027 __c.4442
0000470f l     O .text	0000001f __c.4444
000046f2 l     O .text	0000001d __c.4446
000046e2 l     O .text	00000010 __c.4448
000046bb l     O .text	00000027 __c.4450
000046a1 l     O .text	0000001a __c.4452
00004687 l     O .text	0000001a __c.4454
00004671 l     O .text	00000016 __c.4456
0000465b l     O .text	00000016 __c.4458
0000464c l     O .text	0000000f __c.4460
0000462f l     O .text	0000001d __c.4462
00004618 l     O .text	00000017 __c.4464
00004605 l     O .text	00000013 __c.4466
000045f3 l     O .text	00000012 __c.4468
000045dd l     O .text	00000016 __c.4470
000045c8 l     O .text	00000015 __c.4472
000045b2 l     O .text	00000016 __c.4474
0000459c l     O .text	00000016 __c.4476
00004588 l     O .text	00000014 __c.4478
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d0 l     O .text	00000004 __c.2334
000001d4 l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000417 l     O .text	0000000d __c.3654
00000404 l     O .text	00000013 __c.3656
000003f1 l     O .text	00000013 __c.3658
000003d3 l     O .text	0000001e __c.3660
000003b5 l     O .text	0000001e __c.3662
00000397 l     O .text	0000001e __c.3664
00000379 l     O .text	0000001e __c.3666
00000365 l     O .text	00000014 __c.3668
0000034a l     O .text	0000001b __c.3683
00000332 l     O .text	00000018 __c.3689
0000030d l     O .text	00000025 __c.3698
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080171a l     O .bss	00000004 SPI0_Speed_value
00000424 l     O .text	0000001d __c.3652
00801718 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004c2 l     O .text	00000016 __c.3644
000004ae l     O .text	00000014 __c.3652
00000497 l     O .text	00000017 __c.3654
00000451 l     O .text	00000011 __c.3677
00000462 l     O .text	0000001c __c.3667
0000047e l     O .text	00000019 __c.3665
00000441 l     O .text	00000010 __c.3684
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000066e8 l     F .text	0000007c clock_settime.part.2
000005bc l     O .text	0000001d __c.3649
000005b2 l     O .text	0000000a __c.3669
00801726 l     O .bss	00000020 _ts_to_str
000005a3 l     O .text	0000000f __c.3674
0080171e l     O .bss	00000008 __clock_elapsed
00000595 l     O .text	0000000e __c.3683
0000058a l     O .text	0000000b __c.3685
00801746 l     O .bss	00000002 timers_configured
00801748 l     O .bss	00000002 timers_enabled
00000576 l     O .text	00000014 __c.3705
00000563 l     O .text	00000013 __c.3707
00000557 l     O .text	0000000c __c.3709
0000053f l     O .text	00000018 __c.3711
0000052e l     O .text	00000011 __c.3713
0000051e l     O .text	00000010 __c.3715
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ff5 l     O .text	0000001d __c.3796
0080191e l     O .bss	00000001 _ppr_reg
00000fe2 l     O .text	00000013 __c.3814
00000fd1 l     O .text	00000011 __c.3828
00000fc4 l     O .text	0000000d __c.3837
00000fb6 l     O .text	0000000e __c.3846
00000fa9 l     O .text	0000000d __c.3853
00000f9b l     O .text	0000000e __c.3859
00000000 l    df *ABS*	00000000 _clear_bss.o
000048be l       .text	00000000 .do_clear_bss_start
000048bc l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 syscall.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 controller.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001d144 l       .text	00000000 __udivmodqi4_ep
0001d13c l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001d164 l       .text	00000000 __udivmodhi4_ep
0001d156 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001d18c l       .text	00000000 __divmodhi4_neg1
0001d194 l       .text	00000000 __divmodhi4_neg2
0001d19a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001d1c2 l       .text	00000000 __udivmodsi4_ep
0001d1a8 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001d1f8 l       .text	00000000 __divmodsi4_neg2
0001d206 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001dd0e l       .text	00000000 __stop_program
00014630 g     F .text	00000040 SS80_Selected_Device_Clear
0001d22a g       .text	00000002 .hidden __usmulhisi3
0000f296 g     F .text	0000000c putchar
0001250c g     F .text	00000022 SS80_is_MTA
00006584 g     F .text	000000ea clock_gettime
00005df2 g     F .text	000000e6 rtc_init
00012838 g     F .text	000000a8 GPIB_COMMANDS
000048cc  w      .text	00000000 __vector_22
000119fa g     F .text	0000004a gpib_unread
0001382e g     F .text	00000034 SS80_test_extended_status
000060fc  w    F .text	00000016 strcpy
000077f4 g     F .text	00000008 asctime
00006adc g     F .text	00000020 tm_mon_to_ascii
00801a3b g     O .bss	00000235 Fatfs
0000f3ca g     F .text	0000004a mctime
000048cc  w      .text	00000000 __vector_28
0000e47c g     F .text	0000001a mmc_fast
00005d3c g     F .text	000000b6 rtc_write
00014718 g     F .text	00000224 SS80_Transparent_State
0080191f g     O .bss	00000001 gpib_unread_f
000050ca g     F .text	00000004 spi_RX_buffer
00012f2a g     F .text	00000038 gpib_help
00014496 g     F .text	0000009c SS80_Report
00018d56 g     F .text	00000086 controller_read_trace
0001010a g     F .text	0000006a free_file_descriptor
0000f09e g     F .text	00000096 fatfs_putc
0001d30a g       .text	0000001e .hidden __umulhisi3
008001b4 g     O .data	0000000c cfgfile
000048cc  w      .text	00000000 __vector_1
00012974 g     F .text	0000016e GPIB
0000ec4c g     F .text	00000038 fatfs_help
000067d0 g     F .text	00000016 delete_all_timers
00005966 g     F .text	0000000c SPI0_TXRX_Byte
0001d7d8 g       .text	00000000 __fp_mpack_finite
00015634 g     F .text	00000188 amigo_buffered_read
0000fc52 g     F .text	00000086 utime
00801a05 g     O .bss	00000008 __clock
00016bc2 g     F .text	00000054 find_device
0001829a g     F .text	0000008e print_str_P
00007628 g     F .text	00000128 set_dst
0000f8a4 g     F .text	00000096 fdevopen
0001252e g     F .text	00000022 SS80_is_MSA
00005082 g     F .text	00000044 spi_end
0001951c g     F .text	000000e2 lif_dir2str
0001d75e g     F .text	00000040 round
00016e2c g     F .text	00000120 alloc_device
0000538e g     F .text	00000054 safefree
000181f8 g     F .text	000000a2 print_var_P
00012ae2 g     F .text	0000012a GPIB_TALK
000048cc  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001d3fa g     F .text	00000004 __divsf3
0001d2ae g       .text	00000036 .hidden __epilogue_restores__
00005722 g     F .text	00000018 uart_rx_count
00801c9a g     O .bss	00000009 gpib_timer
00012c0c g     F .text	000000fa GPIB_SECONDARY_ADDRESS
000198b6 g     F .text	0000000e lif_vol_clear
0000666e g     F .text	0000007a clock_task
00011dfc g     F .text	0000028e gpib_trace_display
0001c756 g     F .text	0000010c lif_rename_file
00016b60 g     F .text	00000028 find_type
0001d61c g     F .text	00000022 __fp_round
00006afc g     F .text	00000042 Days_Per_Month
000069aa g     F .text	00000028 execute_timers
00010a3c g     F .text	0000017a ls_info
000048cc  w      .text	00000000 __vector_34
0000e436 g     F .text	0000001a mmc_spi_begin
0001d4ca g     F .text	0000000a __fixsfsi
000068bc g     F .text	0000000c clock_elapsed_begin
00006164  w    F .text	00000032 reverse
0000dd42 g     F .text	00000006 mmc_disk_status
0001d63e g     F .text	00000044 __fp_split3
00011800 g     F .text	00000014 gpib_timeout_set
0001d14e g       .text	00000028 .hidden __udivmodhi4
0000507e g     F .text	00000004 chip_select_init
00006868 g     F .text	00000054 ts_to_str
00008bae g     F .text	0000000c atol
00007b9e g     F .text	000000aa p_ntoa
00016968 g     F .text	00000128 plot_echo
0000e64c g     F .text	000000d8 tm_to_fat
000051f6 g     F .text	00000106 PrintFree
0001592c g     F .text	000000c4 amigo_cmd_dsj
0000dad0 g     F .text	00000024 wait_ready
000001d0 g       .text	00000000 __trampolines_start
0001d5a6 g     F .text	00000048 __fp_cmp
0001239a g     F .text	000000f2 gpib_write_str
00801c78 g     O .bss	00000002 errno
000146f6 g     F .text	00000022 SS80_Cancel
0001dd10 g       .text	00000000 _etext
00005a52 g     F .text	00000008 TWI_StopTransmission
0000de9e g     F .text	00000510 mmc_disk_ioctl
000062b2 g     F .text	00000028 MATCH
00800121 g     O .data	00000010 __WDay
0001a2da g     F .text	000000b8 lif_writedirindex
0000582c g     F .text	000000ce SPI0_Speed
000068c8 g     F .text	00000084 clock_elapsed_end
00010814 g     F .text	00000228 hexdump
00800234 g     O .data	00000016 TD
0000d95e g     F .text	000000a8 ff_wtoupper
0001d328 g     F .text	0000000a __subsf3
0001c2f6 g     F .text	00000330 lif_add_lif_file
00801ca3 g     O .bss	00000002 lastcmd
000048cc  w      .text	00000000 __vector_24
00017112 g     F .text	00000002 set_Config_Defaults
000061cc g     F .text	00000014 skipspaces
0000b9d6 g     F .text	00000268 f_getcwd
000048cc  w      .text	00000000 __vector_12
0001147a g     F .text	00000028 gpib_timer_init
000114d2 g     F .text	00000022 ppr_init
0000f2a2 g     F .text	00000068 fgets
0001dc50 g     F .text	000000bc __ultoa_invert
0000573a g     F .text	0000004c uart_get_tail
0000534c g     F .text	00000042 safemalloc
0001c626 g     F .text	00000130 lif_del_file
000079e0 g     F .text	00000032 _putc_buffer_fn
0001b494 g     F .text	00000172 lif_ascii_string_to_e010
0000e640 g     F .text	00000006 mmc_ins_status
0001984c g     F .text	0000004e lif_lifbcd2timestr
00801ca5 g     O .bss	00000200 gpib_iobuff
00016a90 g     F .text	00000028 V2B_MSB
000196ec g     F .text	00000084 lif_time2lifbcd
00016bba g     F .text	00000008 find_free
00019da0 g     F .text	00000366 lif_check_dir
000048cc g       .text	00000000 __bad_interrupt
0000543c g     F .text	00000090 delayms
000145fc g     F .text	00000018 SS80_Channel_Independent_Clear
0001073a g     F .text	000000da cat
00008a12 g     F .text	00000028 snprintf_P
00015a36 g     F .text	00000152 amigo_todo_op
00014670 g     F .text	00000086 SS80_Amigo_Clear
0000f82e g     F .text	00000076 perror
0001f328 g       *ABS*	00000000 __data_load_end
0000da12 g     F .text	0000000c disk_initialize
00801947 g     O .bss	0000000d plot
000117ae g     F .text	00000006 gpib_timer_elapsed_end
00018e6c g     F .text	00000020 lif_free
0000f33a g     F .text	0000002e puts
00010514 g     F .text	000001c0 copy
00006aa2 g     F .text	00000010 clock_settime
00018e8c g     F .text	0000003e lif_stralloc
000060b2  w    F .text	00000016 islower
000051c8 g     F .text	0000002e freeRam
00015102 g     F .text	0000001c amigo_request_logical_address
000060c8  w    F .text	0000001a tolower
0000c9ce g     F .text	0000021e f_rename
000048cc  w      .text	00000000 __vector_6
00011790 g     F .text	0000001e gpib_timer_reset
0001a5d2 g     F .text	000005b2 lif_create_volume
0001d824 g     F .text	00000130 malloc
000050ee g     F .text	00000040 spi_init
000104dc g     F .text	00000038 posix_help
000048cc  w      .text	00000000 __vector_31
0001152a g     F .text	00000044 dbf_open
0001cba6 g     F .text	00000092 copyright
00010e8e g     F .text	000000a0 sum
0000b920 g     F .text	000000b6 f_chdir
0001d3f2 g       .text	00000000 __lesf2
0000504e g     F .text	00000030 chip_deselect
0001690a g     F .text	0000005e PRINTER_COMMANDS
0000694c g     F .text	00000036 clock_clear
0000781e g     F .text	000000ee initialize_clock
0000e63e g     F .text	00000002 mmc_power_off
0000e646 g     F .text	00000006 mmc_wp_status
0000ef98 g     F .text	00000106 fatfs_getc
00801ea5 g     O .bss	00000001 listening_last
0000da06 g     F .text	0000000c disk_status
0080024c g     O .data	00000002 __malloc_heap_start
00005fb0 g     F .text	00000012 i2c_Start
000001d0 g       .text	00000000 __trampolines_end
00006a82 g     F .text	00000020 clock_getres
0001b606 g     F .text	0000021a lif_add_ascii_file_as_e010_wrapper
000119be g     F .text	0000003c gpib_assert_ifc
000196d6 g     F .text	00000016 lif_BCD2BIN
00005b1a g     F .text	00000028 TWI_SendByte
00018eca g     F .text	00000050 lif_open
0000790c g     F .text	000000d4 display_clock
000114f4 g     F .text	0000001a ppr_bit_set
000048cc  w      .text	00000000 __vector_3
000114ca g     F .text	00000008 ppr_reg
00010dee g     F .text	000000a0 logfile
00012236 g     F .text	00000008 gpib_decode
0000f73c g     F .text	00000004 rmdir
00006764 g     F .text	0000006c set_timers
00801a29 g     O .bss	0000000c dst
0000f7b2 g     F .text	0000007c readdir
0001d682 g     F .text	0000000e __fp_zero
0000c2de g     F .text	0000002a f_closedir
0000da5e g     F .text	00000014 disk_ioctl
0001c95a g     F .text	0000024c lif_tests
0000810e g     F .text	00000084 _puts_pad
000050ce g     F .text	00000020 spi_TX
000198c4 g     F .text	00000326 lif_dump_vol
00012d06 g     F .text	00000044 listen_cleanup
00019770 g     F .text	000000a0 lif_lifbcd2time
000195fe g     F .text	000000ca lif_str2dir
000059e4 g     F .text	0000002c SPI0_TXRX
00005fd0 g     F .text	00000030 LCD_init
0001d3f2 g       .text	00000000 __nesf2
00005c5c g     F .text	0000000e BINtoBCD
0000fd38 g     F .text	000000ce lseek
000048cc  w      .text	00000000 __vector_23
0001dd10 g       *ABS*	00000000 __data_load_start
008017e9 g     O .bss	00000004 _mmc_clock
0000488e g       .text	00000000 __dtors_end
000125fa g     F .text	00000010 gpib_init_devices
00006262  w    F .text	00000050 strncasecmp
00801eeb g       .bss	00000000 __bss_end
00019124 g     F .text	00000056 lif_chars
0001d236 g       .text	00000014 .hidden __muluhisi3
000048cc  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000189d2 g     F .text	00000272 format_drives
000048cc  w      .text	00000000 __vector_25
00801ee7 g     O .bss	00000002 __brkval
00006cfa g     F .text	0000002a gmtime_r
0000f5c8 g     F .text	00000052 chmod
000069d2 g     F .text	000000b0 init_timers
00012594 g     F .text	00000022 AMIGO_is_MSA
0001a152 g     F .text	000000b6 lif_checkdirindex
0000c5ee g     F .text	00000152 f_unlink
00011a50 g     F .text	00000020 gpib_control_pin_read
0001162e g     F .text	000000ae dbf_open_read
00008ad8 g     F .text	000000bc strtol
0001178a g     F .text	00000006 gpib_timer_elapsed_begin
0001dc3a g     F .text	00000016 strnlen
000054cc g     F .text	00000134 uart_ubr
0001b3e0 g     F .text	000000b4 lif_e010_pad_sector
00018ddc g     F .text	00000038 lif_help
00006394 g     F .text	000000b8 split_args
0000f6c0 g     F .text	0000003e rename
000115fe g     F .text	00000030 dbf_close
00016596 g     F .text	000000b2 receive_plot_flush
0001d414 g     F .text	000000d4 __divsf3x
000048cc  w      .text	00000000 __vector_11
00801ea6 g     O .bss	00000001 spoll
0000f56e g     F .text	0000001c basename
00013862 g     F .text	000000ae SS80_display_extended_status
0001644a g     F .text	00000130 AMIGO_COMMANDS
0001da66 g     F .text	000001b0 __ftoa_engine
00019262 g     F .text	0000007a lif_fixname
0000ddd4 g     F .text	000000ca mmc_disk_write
0000488e  w      .text	00000000 __init
0001d7f0 g     F .text	00000034 calloc
0001c06a g     F .text	0000028c lif_extract_lif_as_lif
00006510 g     F .text	00000026 install_timers_isr
00016fd4 g     F .text	0000013e assign_value
000114a2 g     F .text	00000014 reverse_8bits
00013a12 g     F .text	000000e0 SS80_describe
000057be g     F .text	0000002c uart_getchar
00007c48 g     F .text	0000020e p_ftoa
0000fff6 g     F .text	000000dc write
0001917a g     F .text	00000074 lif_B2S
0001d690 g       .text	00000000 __gtsf2
0001049c g     F .text	00000040 fprintf
00011d58 g     F .text	000000a4 gpib_decode_header
0001208a g     F .text	000001ac gpib_read_byte
00014614 g     F .text	0000001c SS80_Universal_Device_Clear
0001b820 g     F .text	00000272 lif_add_ascii_file_as_e010
00006536 g     F .text	0000004e __vector_13
0000613e  w    F .text	00000026 strcat
008019ae g     O .bss	00000057 uarts
0001d6b4 g       .text	00000000 __mulsf3_pse
000048cc  w      .text	00000000 __vector_17
000051a6 g     F .text	00000022 spi_TXRX
0001d5fa g     F .text	00000006 __fp_nan
00016c16 g     F .text	00000216 set_active_device
000048cc  w      .text	00000000 __vector_19
000064a4 g     F .text	00000068 get_value
000059bc g     F .text	00000028 SPI0_TX
000191ee g     F .text	0000003a lif_checkname
0000f58a g     F .text	0000003e chdir
000048cc  w      .text	00000000 __vector_7
0000e4f4 g     F .text	0000014a mmc_init
0000ec84 g     F .text	0000019a fatfs_ls
0001d5ee g     F .text	0000000c __fp_inf
00008a3a g     F .text	00000028 sprintf_P
0001d2f2 g       .text	00000018 .hidden __cmpdi2_s8
0000fa22 g     F .text	00000088 fat_time_to_unix
0000fe06 g     F .text	0000004e fseek
0000f414 g     F .text	0000015a dump_stat
00801c70 g     O .bss	00000004 AccSize
0001989a g     F .text	0000000c lif_image_clear
0000e4a8 g     F .text	0000000e mmc_set_ms_timeout
0000650c g     F .text	00000004 enable_system_task
0000e49c g     F .text	00000006 mmc_spi_RX_buffer
00006e1c g     F .text	00000058 is_dst
00005600 g     F .text	0000008e uart_init
00013554 g     F .text	00000078 SS80ControllerPack
00801eaf g     O .bss	00000038 Devices
000048b4 g       .text	00000010 .hidden __do_clear_bss
0001dc16 g     F .text	00000016 strnlen_P
00801a35 g     O .bss	00000006 _pch
000058fa g     F .text	0000006c SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001ae4e g     F .text	000001f0 lif_open_volume
000106d4 g     F .text	00000066 testpage
00016824 g     F .text	000000e6 printer_buffer
00005c00 g     F .text	0000005c TWI_WritePacket
0000b8ee g     F .text	00000032 f_close
0001d6b0 g     F .text	000000ca __mulsf3x
0001657a g     F .text	0000001c printer_init
0000e458 g     F .text	0000001a mmc_slow
00006086 g     F .text	00000016 sep
0080024a g     O .data	00000002 __malloc_heap_end
000114b6 g     F .text	00000014 ppr_set
00015510 g     F .text	00000124 amigo_format
0000fe54 g     F .text	000000da read
0001a392 g     F .text	00000030 lif_writedirEOF
0000e450 g     F .text	00000008 mmc_spi_end
0001d530 g       .text	00000000 __floatsisf
000159f0 g     F .text	00000046 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
0001a3c2 g     F .text	00000210 lif_updatefree
00005a10 g     F .text	0000002a SPI0_RX
0000b22a g     F .text	00000296 f_read
008019ac g     O .bss	00000002 rtc_ok
000124ea g     F .text	00000022 SS80_is_MLA
0000609c  w    F .text	00000016 isupper
000061fa  w    F .text	0000002a strncmp
0000568e g     F .text	00000040 uart_rx_interrupt
000057ea g     F .text	00000006 uart0_getchar
000048cc  w      .text	00000000 __vector_27
0001195c g     F .text	00000062 gpib_disable_PPR
0000e768 g     F .text	000000e0 fatfs_scan_files
0000501c g     F .text	00000032 chip_select
00801718 g       .data	00000000 __data_end
000115ce g     F .text	00000030 dbf_lseek
00014d2c g     F .text	000001ce SS80_COMMANDS
0000c308 g     F .text	0000008c f_readdir
00801ea7 g     O .bss	00000002 current
00013b36 g     F .text	00000040 SS80_Check_Volume
0000e408 g     F .text	0000002e mmc_install_timer
00007b56 g     F .text	00000048 pch
00008a9c g     F .text	0000003c atodigit
0001d118 g       .text	0000001e .hidden __mulsi3
00006112  w    F .text	0000002c strncpy
0000f6fe g     F .text	0000003e unlink
0000ffcc g     F .text	0000002a sync
00014570 g     F .text	0000008c SS80_init
0001d3f2 g       .text	00000000 __eqsf2
000101e6 g     F .text	0000008a new_file_descriptor
00006224  w    F .text	0000003e strcasecmp
0001d256 g       .text	00000020 .hidden __negdi2
00016b20 g     F .text	00000040 B2V_LSB
0000eb3e g     F .text	0000010e fatfs_filinfo_list
0000cbec g     F .text	0000009a f_chmod
00008b94 g     F .text	0000000c atoh
00801a0d g     O .bss	00000018 timer_irq
00016b88 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001d176 g       .text	00000026 .hidden __divmodhi4
000135cc g     F .text	00000198 SS80UnitPack
000116dc g     F .text	000000ae dbf_open_write
000048cc  w      .text	00000000 __vector_5
0000e3ae g     F .text	0000001e mmc_disk_timerproc
0000751c g     F .text	0000010c find_dst
0080017e g     O .data	00000034 gpib_tokens
000048cc  w      .text	00000000 __vector_33
0001223e g     F .text	0000015c gpib_read_str
0001b03e g     F .text	000002da lif_dir
000157bc g     F .text	00000170 amigo_buffered_write
0001cd36 g     F .text	00000164 task
00010f2e g     F .text	000000cc upload
0000603c g     F .text	00000014 LCD_puts
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00013910 g     F .text	00000102 SS80_send_status
0001d218 g       .text	00000012 .hidden __tablejump2__
0001260a g     F .text	0000011a gpib_trace_task
00800131 g     O .data	00000001 Stat
0000fbc2 g     F .text	00000090 unix_time_to_fat
0000488e g       .text	00000000 __ctors_start
00006050 g     F .text	00000036 LCD_setFastBacklightRGB
00006000 g     F .text	0000003c LCD_write
0000dc08 g     F .text	0000013a mmc_disk_initialize
00801a25 g     O .bss	00000004 __tzone
0000e724 g     F .text	00000026 get_fattime
0000ff2e g     F .text	00000038 fread
000198a6 g     F .text	00000010 lif_dir_clear
00015346 g     F .text	00000052 amigo_increment
00012d4a g     F .text	0000011c GPIB_LISTEN
008001b2 g     O .data	00000002 debuglevel
008017ed g     O .bss	00000002 _mmc_timeout
0000489a g       .text	0000001a .hidden __do_copy_data
008001c0 g     O .data	00000074 faults
000103ae g     F .text	000000d4 posix_fopen_modes_to_open
00016ae2 g     F .text	0000003e B2V_MSB
000196c8 g     F .text	0000000e lif_BIN2BCD
0001d79e g     F .text	00000036 __fp_mintl
0001d3f2 g     F .text	00000008 __cmpsf2
0001d2e4 g       .text	0000000e .hidden __xload_1
00006d7e g     F .text	0000005c gettimeofday
0001d60e g     F .text	0000000e __fp_pscB
0001d64e g       .text	00000000 __fp_splitA
00019810 g     F .text	0000003c lif_ctime_gmt
00018fd6 g     F .text	000000b2 lif_read
00010482 g     F .text	0000001a fopen
00801718 g       .bss	00000000 __bss_start
00007750 g     F .text	000000a4 asctime_r
00006f0c g     F .text	00000008 localtime
0001dc2c g     F .text	0000000e memset
00016f74 g     F .text	00000032 push_state
00015b88 g     F .text	00000120 amigo_todo
000074da g     F .text	00000042 setdate
0001ce9a g     F .text	0000027e main
00005a3a g     F .text	00000018 TWI_Init
00012f28 g     F .text	00000002 talk_cleanup
00005c7c g     F .text	000000c0 rtc_run
0000fd02 g     F .text	00000036 ftell
00801ea9 g     O .bss	00000001 talking
0000b7ee g     F .text	00000100 f_sync
00801956 g     O .bss	00000002 AMIGOs
0001d3f2 g       .text	00000000 __ltsf2
00005828 g     F .text	00000004 uart_keyhit
00016f4c g     F .text	00000028 init_Devices
000048cc  w      .text	00000000 __vector_4
0001a106 g     F .text	0000004c lif_close_volume
0000e472 g     F .text	0000000a mmc_spi_init
0001a208 g     F .text	000000d2 lif_readdirindex
00005a5a g     F .text	000000c0 TWI_StartTransmission
00015cd0 g     F .text	000005cc Amigo_Command
000101d6 g     F .text	00000010 fclose
0000f28a g     F .text	0000000c getchar
0001528a g     F .text	000000bc amigo_send_status
00015078 g     F .text	0000008a amigo_init
00800132 g     O .data	0000004a sys_errlist
00006dda g     F .text	00000042 time
00017114 g     F .text	000010e4 POSIX_Read_Config
0000f776 g     F .text	0000003c opendir
0000ce2c g     F .text	00000ad8 f_mkfs
0001d7d4 g     F .text	0000001c __fp_mpack
00006d5c g     F .text	00000022 settimezone
0000adb6 g     F .text	0000007c f_mount
0000e866 g     F .text	000002d8 fatfs_status
00007b3c g     F .text	0000001a pch_init
00012572 g     F .text	00000022 AMIGO_is_MTA
0001d208 g       .text	00000010 .hidden __negsi2
0000c1f8 g     F .text	000000e6 f_opendir
00014532 g     F .text	0000003e Clear_Common
0001ccfe g     F .text	00000038 help
000118fa g     F .text	00000062 gpib_enable_PPR
000153ee g     F .text	00000122 amigo_verify
0001d698 g     F .text	00000004 __mulsf3
0001511e g     F .text	000000b0 amigo_request_status
00018328 g     F .text	000001f6 display_Addresses
0000fcd8 g     F .text	0000002a fileno_to_fatfs
000061e0  w    F .text	0000001a strcmp
000118aa g     F .text	00000050 gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
000117b4 g     F .text	0000004c gpib_timer_task
0000f93a g     F .text	000000e8 mkfs
000053e2 g     F .text	0000005a delayus
00016fa6 g     F .text	0000002e pop_state
000048cc  w      .text	00000000 __vector_9
0000f61a g     F .text	0000004a getcwd
000048cc  w      .text	00000000 __vector_2
00006338 g     F .text	00000028 MATCHI
00015ca8 g     F .text	00000028 amigo_check_unit
0001d34c g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000bc3e g     F .text	000005ba f_lseek
0000f134 g     F .text	000000a2 fgetc
00801eaa g     O .bss	00000001 secondary
00018cca g     F .text	0000008c controller_read_str
000089c6 g     F .text	0000004c vsnprintf_P
000077fc g     F .text	00000022 ctime_gm
0001d690 g     F .text	00000008 __gesf2
000151ce g     F .text	000000bc amigo_send_logical_address
00013af2 g     F .text	00000044 SS80_Check_Unit
0001248c g     F .text	0000005e gpib_file_init
00800104 g     O .data	00000001 _cs_pin
00801920 g     O .bss	00000002 gpib_log_fp
000048cc  w      .text	00000000 __vector_21
000048cc  w      .text	00000000 __vector_15
00007e56 g     F .text	000002b8 p_etoa
000149b0 g     F .text	000002d0 SS80_locate_and_read
00012f62 g     F .text	000005f2 gpib_tests
00801c74 g     O .bss	00000002 AccDirs
0000d90a g     F .text	00000006 ff_memfree
0080195e g     O .bss	00000002 PRINTERp
0001d600 g     F .text	0000000e __fp_pscA
0001d136 g       .text	00000018 .hidden __udivmodqi4
00801eab g     O .bss	00000001 listening
00012724 g     F .text	00000114 gpib_error_test
0080195a g     O .bss	00000002 SS80s
0000c394 g     F .text	00000080 f_stat
0001185a g     F .text	00000050 gpib_bus_init
0000f1d6 g     F .text	0000009a fputc
000048cc  w      .text	00000000 __vector_29
00005814 g     F .text	00000014 uart0_putchar
00008a62 g     F .text	0000003a printf_P
0001d24e g       .text	00000006 .hidden __mulohisi3
00014c80 g     F .text	000000ac SS80_Execute_State
000072a4 g     F .text	00000008 timegm
00013b76 g     F .text	000004f0 SS80_Command_State
00006d3a g     F .text	00000022 gettimezone
00801eeb g       .comment	00000000 __heap_start
000061b0 g     F .text	0000001c trim_tail
00011a88 g     F .text	000002d0 gpib_write_byte
00016648 g     F .text	0000009a printer_close
00019bea g     F .text	000001b6 lif_check_volume
00006e74 g     F .text	00000098 localtime_r
00801c76 g     O .bss	00000002 AccFiles
00005ed8 g     F .text	000000d8 rtc_read
0000488e g       .text	00000000 __dtors_start
00011814 g     F .text	00000046 gpib_bus_read_init
0000488e g       .text	00000000 __ctors_end
0001d1e0 g       .text	00000028 .hidden __divmodsi4
00011a44 g     F .text	0000000c gpib_bus_read
0000faaa g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0000ff66 g     F .text	00000066 syncfs
00018e14 g     F .text	00000058 lif_calloc
000100d2 g     F .text	00000038 fwrite
000128e0 g     F .text	00000094 Send_Identify
008017e7 g     O .bss	00000002 _mmc_pre
0000e4a2 g     F .text	00000006 mmc_spi_TXRX
00801718 g       .data	00000000 _edata
00005b7e g     F .text	00000082 TWI_ReadPacket
0000cc86 g     F .text	000000b2 f_utime
0001851e g     F .text	000004b4 display_Config
0001d22c g       .text	00000008 .hidden __usmulhisi3_tail
00801eeb g       .comment	00000000 _end
00005b42 g     F .text	0000003c TWI_ReceiveByte
00018f62 g     F .text	00000074 lif_seek_msg
0000512e g     F .text	00000078 spi_begin
000166e2 g     F .text	00000142 printer_open
0000b4c0 g     F .text	0000032e f_write
000048cc  w      .text	00000000 __vector_8
0001b318 g     F .text	000000c8 lif_find_file
000048cc  w      .text	00000000 __vector_26
00007a2a g     F .text	00000112 bin2num
0001d418 g       .text	00000000 __divsf3_pse
0001cc38 g     F .text	000000c6 delay_tests
00800100 g     O .data	00000004 _spi_clock
00801958 g     O .bss	00000002 AMIGOp
0000e496 g     F .text	00000006 mmc_spi_TX_buffer
0000ae32 g     F .text	000003f8 f_open
000192dc g     F .text	00000130 lif_vol2str
0000da3e g     F .text	00000020 disk_write
00010bb6 g     F .text	00000238 ls
0001dd0c  w      .text	00000000 .hidden exit
00012e66 g     F .text	000000c2 gpib_task
0001d52c g     F .text	0000007a __floatunsisf
000067e6 g     F .text	00000082 subtract_timespec
0001d176 g       .text	00000000 .hidden _div
0001629c g     F .text	000001ae Amigo_Execute
00006196  w    F .text	0000001a strupper
00801ee9 g     O .bss	00000002 __flp
0001d19c g       .text	00000044 .hidden __udivmodsi4
000125d8 g     F .text	00000022 PRINTER_is_MTA
0001ab84 g     F .text	000002ca lif_newdir
000125b6 g     F .text	00000022 PRINTER_is_MLA
00008ba0 g     F .text	0000000e atoi
00006b3e g     F .text	000001bc time_to_tm
0000e74a g     F .text	0000001e put_rc
0000f368 g     F .text	00000038 fileno
00800107 g     O .data	0000001a __Month
00005972 g     F .text	0000004a SPI0_Init
0000c740 g     F .text	0000028e f_mkdir
0001d4d4 g     F .text	00000058 __fixunssfsi
000072ac g     F .text	0000022e setdate_r
000062da g     F .text	0000005e MATCHARGS
000050c6 g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001dd0c g       .text	00000000 .hidden _exit
00019088 g     F .text	0000009c lif_write
00019228 g     F .text	0000003a lif_S2B
00801eac g     O .bss	00000001 talking_last
0001156e g     F .text	00000030 dbf_read
00005c6a g     F .text	00000012 BCDtoBIN
00006f14 g     F .text	00000390 normalize
00006d24 g     F .text	00000016 gmtime
000048cc  w      .text	00000000 __vector_14
0000ee82 g     F .text	00000116 fatfs_tests
0001c862 g     F .text	000000f8 lif_create_image
00005fc2 g     F .text	0000000e i2c_End
0000da1e g     F .text	00000020 disk_read
00010270 g     F .text	0000013e open
0000644c g     F .text	00000058 token
000060e2  w    F .text	0000001a toupper
00014168 g     F .text	0000032e SS80_locate_and_write
00008192 g     F .text	00000834 _printf_fn
000048cc  w      .text	00000000 __vector_10
0001150e g     F .text	0000001c ppr_bit_clr
00801c7a g     O .bss	00000020 __iob
0000cd38 g     F .text	000000f4 f_getlabel
0001940c g     F .text	00000110 lif_str2vol
0000c414 g     F .text	000001da f_getfree
0000d910 g     F .text	0000004e ff_convert
0000f30a g     F .text	00000030 fputs
000048cc  w      .text	00000000 __vector_16
00006360 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
000052fc g     F .text	00000050 safecalloc
0000f3a0 g     F .text	0000002a fileno_to_stream
00014066 g     F .text	00000102 SS80_cmd_seek
0000f740 g     F .text	00000036 closedir
000048cc  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00013764 g     F .text	000000ca SS80VolumePack
0000dd48 g     F .text	0000008c mmc_disk_read
0000ee1e g     F .text	00000064 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00018f1a g     F .text	00000048 lif_stat
00005786 g     F .text	00000006 uart_rx_byte
0001493c g     F .text	00000074 SS80_error_return
0080024e g     O .data	00000002 __malloc_margin
000056ce g     F .text	00000054 __vector_20
00018c44 g     F .text	00000086 controller_send_str
0000f664 g     F .text	0000005c mkdir
000057f0 g     F .text	00000024 uart_putchar
00010ffa g     F .text	00000480 posix_tests
00801ead g     O .bss	00000002 gpib_unread_data
00010174 g     F .text	00000062 close
0001d32a g       .text	00000000 __addsf3
0001d276 g       .text	00000038 .hidden __prologue_saves__
00012550 g     F .text	00000022 AMIGO_is_MLA
0000e4b6 g     F .text	0000003e mmc_test_timeout
0001ba92 g     F .text	000005d8 lif_extract_e010_as_ascii
000048d0 g     F .text	0000074c vfprintf
00015398 g     F .text	00000056 amigo_seek
00011a70 g     F .text	00000018 gpib_handshake_pin_read
00006982 g     F .text	00000028 enable_timers
0000e848 g     F .text	0000001e fatfs_fstype
00016ab8 g     F .text	0000002a V2B_LSB
0001159e g     F .text	00000030 dbf_write
0080195c g     O .bss	00000002 SS80p
00801954 g     O .bss	00000002 lines
0000d904 g     F .text	00000006 ff_memalloc
0001d954 g     F .text	00000112 free
0001d684 g       .text	00000000 __fp_szero
0000578c g     F .text	00000032 uart_tx_byte
0001d24a g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 24 	jmp	0x488e	; 0x488e <__ctors_end>
       4:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
       8:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
       c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      10:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      14:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      18:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      1c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      20:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      24:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      28:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      2c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      30:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      34:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__vector_13>
      38:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      3c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      40:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      44:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      48:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      4c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      50:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_20>
      54:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      58:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      5c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      60:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      64:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      68:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      6c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      70:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      74:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      78:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      7c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      80:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      84:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      88:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      8c:	42 42       	sbci	r20, 0x22	; 34
      8e:	9d 43       	sbci	r25, 0x3D	; 61
      90:	72 42       	sbci	r23, 0x22	; 34
      92:	76 43       	sbci	r23, 0x36	; 54
      94:	76 43       	sbci	r23, 0x36	; 54
      96:	9d 43       	sbci	r25, 0x3D	; 61
      98:	9d 43       	sbci	r25, 0x3D	; 61
      9a:	9d 43       	sbci	r25, 0x3D	; 61
      9c:	9d 43       	sbci	r25, 0x3D	; 61
      9e:	9d 43       	sbci	r25, 0x3D	; 61
      a0:	9d 43       	sbci	r25, 0x3D	; 61
      a2:	9d 43       	sbci	r25, 0x3D	; 61
      a4:	9d 43       	sbci	r25, 0x3D	; 61
      a6:	42 42       	sbci	r20, 0x22	; 34
      a8:	3c 42       	sbci	r19, 0x2C	; 44
      aa:	9d 43       	sbci	r25, 0x3D	; 61
      ac:	9d 43       	sbci	r25, 0x3D	; 61
      ae:	9d 43       	sbci	r25, 0x3D	; 61
      b0:	9d 43       	sbci	r25, 0x3D	; 61
      b2:	6c 42       	sbci	r22, 0x2C	; 44
      b4:	9d 43       	sbci	r25, 0x3D	; 61
      b6:	9d 43       	sbci	r25, 0x3D	; 61
      b8:	42 42       	sbci	r20, 0x22	; 34
      ba:	9d 43       	sbci	r25, 0x3D	; 61
      bc:	9d 43       	sbci	r25, 0x3D	; 61
      be:	9d 43       	sbci	r25, 0x3D	; 61
      c0:	9d 43       	sbci	r25, 0x3D	; 61
      c2:	9d 43       	sbci	r25, 0x3D	; 61
      c4:	9d 43       	sbci	r25, 0x3D	; 61
      c6:	9d 43       	sbci	r25, 0x3D	; 61
      c8:	9d 43       	sbci	r25, 0x3D	; 61
      ca:	9d 43       	sbci	r25, 0x3D	; 61
      cc:	42 42       	sbci	r20, 0x22	; 34
      ce:	98 43       	sbci	r25, 0x38	; 56
      d0:	72 42       	sbci	r23, 0x22	; 34
      d2:	76 43       	sbci	r23, 0x36	; 54
      d4:	76 43       	sbci	r23, 0x36	; 54
      d6:	9d 43       	sbci	r25, 0x3D	; 61
      d8:	9d 43       	sbci	r25, 0x3D	; 61
      da:	9d 43       	sbci	r25, 0x3D	; 61
      dc:	9d 43       	sbci	r25, 0x3D	; 61
      de:	9d 43       	sbci	r25, 0x3D	; 61
      e0:	9d 43       	sbci	r25, 0x3D	; 61
      e2:	9d 43       	sbci	r25, 0x3D	; 61
      e4:	9d 43       	sbci	r25, 0x3D	; 61
      e6:	42 42       	sbci	r20, 0x22	; 34
      e8:	3c 42       	sbci	r19, 0x2C	; 44
      ea:	9d 43       	sbci	r25, 0x3D	; 61
      ec:	9d 43       	sbci	r25, 0x3D	; 61
      ee:	93 43       	sbci	r25, 0x33	; 51
      f0:	9d 43       	sbci	r25, 0x3D	; 61
      f2:	6c 42       	sbci	r22, 0x2C	; 44
      f4:	9d 43       	sbci	r25, 0x3D	; 61
      f6:	9d 43       	sbci	r25, 0x3D	; 61
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	bf 43       	sbci	r27, 0x3F	; 63
      fc:	a6 44       	sbci	r26, 0x46	; 70
      fe:	b5 43       	sbci	r27, 0x35	; 53
     100:	13 44       	sbci	r17, 0x43	; 67
     102:	fa 43       	sbci	r31, 0x3A	; 58
     104:	a6 44       	sbci	r26, 0x46	; 70
     106:	a6 44       	sbci	r26, 0x46	; 70
     108:	a6 44       	sbci	r26, 0x46	; 70
     10a:	a6 44       	sbci	r26, 0x46	; 70
     10c:	a6 44       	sbci	r26, 0x46	; 70
     10e:	a6 44       	sbci	r26, 0x46	; 70
     110:	a6 44       	sbci	r26, 0x46	; 70
     112:	a6 44       	sbci	r26, 0x46	; 70
     114:	c9 43       	sbci	r28, 0x39	; 57
     116:	dd 43       	sbci	r29, 0x3D	; 61
     118:	a6 44       	sbci	r26, 0x46	; 70
     11a:	a6 44       	sbci	r26, 0x46	; 70
     11c:	a6 44       	sbci	r26, 0x46	; 70
     11e:	a6 44       	sbci	r26, 0x46	; 70
     120:	b1 43       	sbci	r27, 0x31	; 49
     122:	a6 44       	sbci	r26, 0x46	; 70
     124:	a6 44       	sbci	r26, 0x46	; 70
     126:	dd 43       	sbci	r29, 0x3D	; 61
     128:	a6 44       	sbci	r26, 0x46	; 70
     12a:	a6 44       	sbci	r26, 0x46	; 70
     12c:	a6 44       	sbci	r26, 0x46	; 70
     12e:	a6 44       	sbci	r26, 0x46	; 70
     130:	a6 44       	sbci	r26, 0x46	; 70
     132:	a6 44       	sbci	r26, 0x46	; 70
     134:	a6 44       	sbci	r26, 0x46	; 70
     136:	a6 44       	sbci	r26, 0x46	; 70
     138:	a6 44       	sbci	r26, 0x46	; 70
     13a:	bf 43       	sbci	r27, 0x3F	; 63
     13c:	41 44       	sbci	r20, 0x41	; 65
     13e:	b5 43       	sbci	r27, 0x35	; 53
     140:	13 44       	sbci	r17, 0x43	; 67
     142:	fa 43       	sbci	r31, 0x3A	; 58
     144:	a6 44       	sbci	r26, 0x46	; 70
     146:	a6 44       	sbci	r26, 0x46	; 70
     148:	a6 44       	sbci	r26, 0x46	; 70
     14a:	a6 44       	sbci	r26, 0x46	; 70
     14c:	a6 44       	sbci	r26, 0x46	; 70
     14e:	a6 44       	sbci	r26, 0x46	; 70
     150:	a6 44       	sbci	r26, 0x46	; 70
     152:	a6 44       	sbci	r26, 0x46	; 70
     154:	c9 43       	sbci	r28, 0x39	; 57
     156:	dd 43       	sbci	r29, 0x3D	; 61
     158:	a6 44       	sbci	r26, 0x46	; 70
     15a:	a6 44       	sbci	r26, 0x46	; 70
     15c:	41 44       	sbci	r20, 0x41	; 65
     15e:	a6 44       	sbci	r26, 0x46	; 70
     160:	b1 43       	sbci	r27, 0x31	; 49
     162:	a6 44       	sbci	r26, 0x46	; 70
     164:	a6 44       	sbci	r26, 0x46	; 70
     166:	dd 43       	sbci	r29, 0x3D	; 61
     168:	d8 6c       	ori	r29, 0xC8	; 200
     16a:	e2 6c       	ori	r30, 0xC2	; 194
     16c:	ea 6c       	ori	r30, 0xCA	; 202
     16e:	ec 6c       	ori	r30, 0xCC	; 204
     170:	ee 6c       	ori	r30, 0xCE	; 206
     172:	f0 6c       	ori	r31, 0xC0	; 192
     174:	f2 6c       	ori	r31, 0xC2	; 194
     176:	f4 6c       	ori	r31, 0xC4	; 196
     178:	f7 6c       	ori	r31, 0xC7	; 199
     17a:	94 8d       	ldd	r25, Z+28	; 0x1c
     17c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     17e:	e1 8d       	ldd	r30, Z+25	; 0x19
     180:	fb 8d       	ldd	r31, Y+27	; 0x1b
     182:	04 8e       	std	Z+28, r0	; 0x1c
     184:	24 8e       	std	Z+28, r2	; 0x1c
     186:	3d 8e       	std	Y+29, r3	; 0x1d
     188:	4c 8e       	std	Y+28, r4	; 0x1c
     18a:	97 8e       	std	Z+31, r9	; 0x1f
     18c:	69 8e       	std	Y+25, r6	; 0x19
     18e:	85 90       	lpm	r8, Z+
     190:	8d 90       	ld	r8, X+
     192:	92 90       	ld	r9, -Z
     194:	b6 90       	elpm	r11, Z
     196:	c0 90 0a 91 	lds	r12, 0x910A	; 0x80910a <__bss_end+0x721f>
     19a:	d5 90       	lpm	r13, Z+
     19c:	d5 90       	lpm	r13, Z+
     19e:	cd 90       	ld	r12, X+
     1a0:	20 b2       	in	r2, 0x10	; 16
     1a2:	df b1       	in	r29, 0x0f	; 15
     1a4:	df b1       	in	r29, 0x0f	; 15
     1a6:	df b1       	in	r29, 0x0f	; 15
     1a8:	df b1       	in	r29, 0x0f	; 15
     1aa:	a3 b1       	in	r26, 0x03	; 3
     1ac:	aa b1       	in	r26, 0x0a	; 10
     1ae:	b1 b1       	in	r27, 0x01	; 1
     1b0:	c1 b1       	in	r28, 0x01	; 1
     1b2:	cf b1       	in	r28, 0x0f	; 15
     1b4:	c8 b1       	in	r28, 0x08	; 8
     1b6:	5d b9       	out	0x0d, r21	; 13
     1b8:	67 ba       	out	0x17, r6	; 23
     1ba:	bb ba       	out	0x1b, r11	; 27
     1bc:	3f bb       	out	0x1f, r19	; 31
     1be:	72 bb       	out	0x12, r23	; 18
     1c0:	ee bb       	out	0x1e, r30	; 30
     1c2:	c8 bd       	out	0x28, r28	; 40
     1c4:	9e be       	out	0x3e, r9	; 62
     1c6:	dd be       	out	0x3d, r13	; 61
     1c8:	8d bf       	out	0x3d, r24	; 61
     1ca:	ce bf       	out	0x3e, r28	; 62
     1cc:	02 ba       	out	0x12, r0	; 18
     1ce:	1e ba       	out	0x1e, r1	; 30

000001d0 <__trampolines_end>:
     1d0:	6e 61       	ori	r22, 0x1E	; 30
     1d2:	6e 00       	.word	0x006e	; ????

000001d4 <__c.2332>:
     1d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     204:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     214:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     224:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     234:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     244:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     254:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     264:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     274:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     284:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     294:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d2 <__c.3672>:
     2d2:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e2:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f0 <__c.3667>:
     2f0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     300:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

0000030d <__c.3698>:
     30d:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     31d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     32d:	25 75 29 0a 00                                      %u)..

00000332 <__c.3689>:
     332:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     342:	61 69 6c 65 64 21 0a 00                             ailed!..

0000034a <__c.3683>:
     34a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     35a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000365 <__c.3668>:
     365:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     375:	35 75 0a 00                                         5u..

00000379 <__c.3666>:
     379:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     389:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000397 <__c.3664>:
     397:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3a7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003b5 <__c.3662>:
     3b5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3c5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d3 <__c.3660>:
     3d3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f1 <__c.3658>:
     3f1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     401:	75 0a 00                                            u..

00000404 <__c.3656>:
     404:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     414:	75 0a 00                                            u..

00000417 <__c.3654>:
     417:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000424 <__c.3652>:
     424:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     434:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000441 <__c.3684>:
     441:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000451 <__c.3677>:
     451:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000462 <__c.3667>:
     462:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     472:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

0000047e <__c.3665>:
     47e:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     48e:	20 66 61 69 6c 65 64 0a 00                           failed..

00000497 <__c.3654>:
     497:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4a7:	65 72 72 6f 72 0a 00                                error..

000004ae <__c.3652>:
     4ae:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4be:	6f 72 0a 00                                         or..

000004c2 <__c.3644>:
     4c2:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d2:	72 72 6f 72 0a 00                                   rror..

000004d8 <__c.3802>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3636>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3715>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3713>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3711>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3709>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3707>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3705>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3685>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3683>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3674>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3669>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3649>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3924>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3922>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3920>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3918>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3916>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3909>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3907>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3905>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3903>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3901>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3892>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3890>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3886>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3884>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3855>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3853>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3851>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3849>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3847>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3845>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3824>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3699>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3667>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3696>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3694>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3692>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3689>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3687>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3685>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3672>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3644>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3716>:
     863:	0a 00                                               ..

00000865 <__c.3714>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3712>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3706>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3704>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3702>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3700>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3698>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3696>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3694>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3692>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3690>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3688>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3686>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3684>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3682>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3646>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3684>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3682>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3678>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3665>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3663>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3661>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3659>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3657>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3649>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3639>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3637>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.3996>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.3969>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.3967>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3863>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3861>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3859>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3857>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3855>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3853>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3851>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3849>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3847>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3845>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3843>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3722>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3651>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3644>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3884>:
     c90:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000c9f <__c.3874>:
     c9f:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb0 <__c.3866>:
     cb0:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cbf <__c.3856>:
     cbf:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ccc <__c.3854>:
     ccc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cdc <__c.3846>:
     cdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ce7 <__c.3842>:
     ce7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d07:	68 0a 00                                            h..

00000d0a <__c.3839>:
     d0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d1a <__c.3834>:
     d1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d2a:	5b 25 73 5d 0a 00                                   [%s]..

00000d30 <__c.3832>:
     d30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d3e <__c.3830>:
     d3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d5f <__c.3817>:
     d5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d79 <__c.3812>:
     d79:	25 73 0a 00                                         %s..

00000d7d <__c.3810>:
     d7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d8d:	0a 00                                               ..

00000d8f <__c.3798>:
     d8f:	0d 00                                               ..

00000d91 <__c.3796>:
     d91:	4d 6f 72 65 2e 2e 00                                More...

00000d98 <__c.3786>:
     d98:	0a 00                                               ..

00000d9a <__c.3781>:
     d9a:	0a 00                                               ..

00000d9c <__c.3773>:
     d9c:	20 3a 20 00                                          : .

00000da0 <__c.3768>:
     da0:	20 20 20 00                                            .

00000da4 <__c.3763>:
     da4:	25 30 32 78 20 00                                   %02x .

00000daa <__c.3761>:
     daa:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db3 <__c.3759>:
     db3:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc2 <__c.3747>:
     dc2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd2:	2e 0a 00                                            ...

00000dd5 <__c.3743>:
     dd5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000de4 <__c.3740>:
     de4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df1 <__c.3738>:
     df1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dfe <__c.3736>:
     dfe:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e0e <__c.3734>:
     e0e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e1b <__c.3732>:
     e1b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e2b <__c.3730>:
     e2b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e37 <__c.3719>:
     e37:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e42 <__c.3717>:
     e42:	0a 00                                               ..

00000e44 <__c.3712>:
     e44:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e54 <__c.3701>:
     e54:	25 73 0a 00                                         %s..

00000e58 <__c.3670>:
     e58:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e68:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e78:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e88:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e98:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     ea8:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     eb8:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ec8:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ed8:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     ee8:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     ef8:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f08:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f18:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f28:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f38:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f48:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f58:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f68:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f78:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f88:	66 69 6c 65 0a 0a 00                                file...

00000f8f <__c.3668>:
     f8f:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f9b <__c.3859>:
     f9b:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000fa9 <__c.3853>:
     fa9:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fb6 <__c.3846>:
     fb6:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fc4 <__c.3837>:
     fc4:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd1 <__c.3828>:
     fd1:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe2 <__c.3814>:
     fe2:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff2:	5d 0a 00                                            ]..

00000ff5 <__c.3796>:
     ff5:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    1005:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001012 <__c.4343>:
    1012:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1022:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1032:	64 28 25 64 29 5d 0a 00                             d(%d)]..

0000103a <__c.4338>:
    103a:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    104a:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001054 <__c.4328>:
    1054:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1064:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1074:	28 25 64 29 5d 0a 00                                (%d)]..

0000107b <__c.4324>:
    107b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    108b:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    109b:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010a8 <__c.4321>:
    10a8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10b8:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c1 <__c.4305>:
    10c1:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010cc <__c.4303>:
    10cc:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010d7 <__c.4301>:
    10d7:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e2 <__c.4297>:
    10e2:	20 20 20 20 20 00                                        .

000010e8 <__c.4295>:
    10e8:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f1 <__c.4253>:
    10f1:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1101:	3e 0a 00                                            >..

00001104 <__c.4249>:
    1104:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1114:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000111e <__c.4245>:
    111e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    112e:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001139 <__c.4242>:
    1139:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1149:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001154 <__c.4237>:
    1154:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1164:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1174:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000117c <__c.4233>:
    117c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    118c:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001196 <__c.4216>:
    1196:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11a6:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11b6:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011c4 <__c.4211>:
    11c4:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011ce <__c.4209>:
    11ce:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011d9 <__c.4204>:
    11d9:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011e5 <__c.4196>:
    11e5:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11f5:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1205:	5d 0a 00                                            ]..

00001208 <__c.4190>:
    1208:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1218:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001223 <__c.4188>:
    1223:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1233:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1243:	72 61 6e 67 65 0a 00                                range..

0000124a <__c.4183>:
    124a:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    125a:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001265 <__c.4181>:
    1265:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1275:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1285:	61 6e 67 65 0a 00                                   ange..

0000128b <__c.4176>:
    128b:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    129b:	5d 0a 00                                            ]..

0000129e <__c.4171>:
    129e:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012af <__c.4354>:
    12af:	0a 00                                               ..

000012b1 <__c.4346>:
    12b1:	2e 00                                               ..

000012b3 <__c.4344>:
    12b3:	25 63 00                                            %c.

000012b6 <__c.4342>:
    12b6:	20 7c 20 00                                          | .

000012ba <__c.4337>:
    12ba:	20 25 30 32 58 00                                    %02X.

000012c0 <__c.4335>:
    12c0:	0a 00                                               ..

000012c2 <__c.4333>:
    12c2:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012ce <__c.4322>:
    12ce:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012df <__c.4317>:
    12df:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12ef:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12ff:	32 58 48 5d 0a 00                                   2XH]..

00001305 <__c.4315>:
    1305:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1315:	0a 00                                               ..

00001317 <__c.4313>:
    1317:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001328 <__c.4308>:
    1328:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001334 <__c.4306>:
    1334:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001344 <__c.4304>:
    1344:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1354:	52 5d 0a 00                                         R]..

00001358 <__c.4302>:
    1358:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1368:	0a 00                                               ..

0000136a <__c.4300>:
    136a:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000137b <__c.4298>:
    137b:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001382 <__c.4293>:
    1382:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000138e <__c.4291>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    139e:	52 5d 0a 00                                         R]..

000013a2 <__c.4289>:
    13a2:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b3 <__c.4287>:
    13b3:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c3:	0a 00                                               ..

000013c5 <__c.4285>:
    13c5:	0a 00                                               ..

000013c7 <__c.4283>:
    13c7:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ce <__c.4278>:
    13ce:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13de:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013ea <__c.4276>:
    13ea:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f1 <__c.4274>:
    13f1:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013fe <__c.4272>:
    13fe:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000140a <__c.4270>:
    140a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001411 <__c.4268>:
    1411:	5b 53 50 44 5d 0a 00                                [SPD]..

00001418 <__c.4266>:
    1418:	5b 53 50 45 5d 0a 00                                [SPE]..

0000141f <__c.4264>:
    141f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    142f:	5d 0a 00                                            ]..

00001432 <__c.4262>:
    1432:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1442:	5d 0a 00                                            ]..

00001445 <__c.4257>:
    1445:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1455:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145f <__c.4255>:
    145f:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146f:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001480 <__c.4228>:
    1480:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001491 <__c.4226>:
    1491:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000149e <__c.4224>:
    149e:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a5 <__c.4222>:
    14a5:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b0 <__c.4220>:
    14b0:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b7 <__c.4215>:
    14b7:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c7:	0a 00                                               ..

000014c9 <__c.4213>:
    14c9:	44 6f 6e 65 0a 00                                   Done..

000014cf <__c.4209>:
    14cf:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014db <__c.4207>:
    14db:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14eb:	20 65 78 69 74 0a 00                                 exit..

000014f2 <__c.4205>:
    14f2:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1502:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1512:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000151d <__c.4203>:
    151d:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    152d:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001537 <__c.4157>:
    1537:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1547:	6f 74 65 63 74 65 64 0a 00                          otected..

00001550 <__c.4155>:
    1550:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1560:	0a 00                                               ..

00001562 <__c.4399>:
    1562:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1572:	30 32 58 48 5d 0a 00                                02XH]..

00001579 <__c.4397>:
    1579:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4395>:
    1590:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4393>:
    15a7:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4391>:
    15be:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15ce:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015d7 <__c.4389>:
    15d7:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15e7:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015f0 <__c.4387>:
    15f0:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1600:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001609 <__c.4385>:
    1609:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1619:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001622 <__c.4383>:
    1622:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1632:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000163a <__c.4381>:
    163a:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    164a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001652 <__c.4379>:
    1652:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1662:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000166a <__c.4377>:
    166a:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    167a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001682 <__c.4374>:
    1682:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000168f <__c.4366>:
    168f:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    169f:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16af:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16bf:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16cf:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16df:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    16ef:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    16ff:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    170f:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    171f:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    172f:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    173f:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    174f:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    175f:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    176f:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    177f:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    178f:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    179f:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17af:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17bf:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17cf:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17df:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    17ef:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    17ff:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001810 <__c.4364>:
    1810:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000181b <__c.4467>:
    181b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    182b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    183b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    184b:	48 5d 0a 00                                         H]..

0000184f <__c.4465>:
    184f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    185f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    186f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    187f:	48 5d 0a 00                                         H]..

00001883 <__c.4463>:
    1883:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1893:	74 5d 0a 00                                         t]..

00001897 <__c.4461>:
    1897:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018a6 <__c.4459>:
    18a6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18b6:	74 65 5d 0a 00                                      te]..

000018bb <__c.4457>:
    18bb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18cb:	61 74 65 5d 0a 00                                   ate]..

000018d1 <__c.4455>:
    18d1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18e1:	61 74 65 5d 0a 00                                   ate]..

000018e7 <__c.4450>:
    18e7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    18f7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1907:	5d 0a 00                                            ]..

0000190a <__c.4443>:
    190a:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    191a:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00001926 <__c.4436>:
    1926:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001935 <__c.4434>:
    1935:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1945:	5d 0a 00                                            ]..

00001948 <__c.4427>:
    1948:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001954 <__c.4413>:
    1954:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1964:	5d 0a 00                                            ]..

00001967 <__c.4411>:
    1967:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1977:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001981 <__c.4404>:
    1981:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1991:	48 5d 0a 00                                         H]..

00001995 <__c.4402>:
    1995:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19a5:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019b5 <__c.4397>:
    19b5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19c5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19d5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19e5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000019f1 <__c.4394>:
    19f1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a01:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a11 <__c.4392>:
    1a11:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a21:	29 5d 0a 00                                         )]..

00001a25 <__c.4390>:
    1a25:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a35:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a45:	28 25 64 29 5d 0a 00                                (%d)]..

00001a4c <__c.4388>:
    1a4c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a5c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a6a <__c.4386>:
    1a6a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a7a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a87 <__c.4383>:
    1a87:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1a97:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1aa7:	44 4f 5d 0a 00                                      DO]..

00001aac <__c.4380>:
    1aac:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1abc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001ac5 <__c.4378>:
    1ac5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ad5:	5d 0a 00                                            ]..

00001ad8 <__c.4369>:
    1ad8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ae8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1af8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b08:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b10 <__c.4366>:
    1b10:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b20:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b30 <__c.4364>:
    1b30:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b40:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b51 <__c.4362>:
    1b51:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b61:	61 74 75 73 5d 0a 00                                atus]..

00001b68 <__c.4360>:
    1b68:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b78:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b81 <__c.4358>:
    1b81:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1b91:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001b9c <__c.4356>:
    1b9c:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bac:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bbb <__c.4354>:
    1bbb:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1bcb:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bd9 <__c.4352>:
    1bd9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001bea <__c.4350>:
    1bea:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1bfa:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c06 <__c.4348>:
    1c06:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c16:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c23 <__c.4346>:
    1c23:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c33:	2d 4f 50 5d 0a 00                                   -OP]..

00001c39 <__c.4344>:
    1c39:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c49:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c5a <__c.4342>:
    1c5a:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c6a:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c7a:	44 4f 5d 0a 00                                      DO]..

00001c7f <__c.4340>:
    1c7f:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1c8f:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001c99 <__c.4338>:
    1c99:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1ca9:	2d 4f 50 5d 0a 00                                   -OP]..

00001caf <__c.4336>:
    1caf:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cbd <__c.4334>:
    1cbd:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ccd:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cd9 <__c.4332>:
    1cd9:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1ce9:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001cf6 <__c.4330>:
    1cf6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d06:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d0f <__c.4327>:
    1d0f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1f:	20 52 65 61 64 5d 0a 00                              Read]..

00001d27 <__c.4325>:
    1d27:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d37:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d40 <__c.4322>:
    1d40:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d50:	25 64 29 5d 0a 00                                   %d)]..

00001d56 <__c.4320>:
    1d56:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d66:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d6f <__c.4318>:
    1d6f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d7f:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1d8f:	52 4f 52 5d 0a 00                                   ROR]..

00001d95 <__c.4309>:
    1d95:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1da5:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001daf <__c.4304>:
    1daf:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dbf:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dc7 <__c.4299>:
    1dc7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dd7:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001de6 <__c.4297>:
    1de6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1df6:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e03 <__c.4295>:
    1e03:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e13:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e23:	5d 0a 00                                            ]..

00001e26 <__c.4293>:
    1e26:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e37 <__c.4285>:
    1e37:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e47:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e52 <__c.4283>:
    1e52:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e62:	73 5d 0a 00                                         s]..

00001e66 <__c.4273>:
    1e66:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e71 <__c.4271>:
    1e71:	25 73 3a 0a 00                                      %s:..

00001e76 <__c.4246>:
    1e76:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e86:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1e96:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001ea1 <__c.4244>:
    1ea1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1eb1:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ec1:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ec9 <__c.4240>:
    1ec9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ed9:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1ee9:	58 48 29 5d 0a 00                                   XH)]..

00001eef <__c.4238>:
    1eef:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1eff:	72 5d 0a 00                                         r]..

00001f03 <__c.4234>:
    1f03:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4232>:
    1f16:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f26:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f36:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f3f <__c.4220>:
    1f3f:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f4f:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f5f:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f67 <__c.4218>:
    1f67:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f77:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f87:	53 48 5d 0a 00                                      SH]..

00001f8c <__c.4213>:
    1f8c:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1f9c:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fa5 <__c.4211>:
    1fa5:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fb5:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fbd <__c.4209>:
    1fbd:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcd:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001fdb <__c.4207>:
    1fdb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1feb:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    1ffb:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002003 <__c.4190>:
    2003:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2013:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000201f <__c.4174>:
    201f:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    202f:	5d 0a 00                                            ]..

00002032 <__c.4149>:
    2032:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2042:	0a 00                                               ..

00002044 <__c.4147>:
    2044:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002051 <__c.4304>:
    2051:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2061:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2071:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000207a <__c.4301>:
    207a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    208a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    209a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020a5 <__c.4298>:
    20a5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20b5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20c5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020ce <__c.4293>:
    20ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20de:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000020ee <__c.4290>:
    20ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    20fe:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000210a <__c.4287>:
    210a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    211a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    212a:	0a 00                                               ..

0000212c <__c.4284>:
    212c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    213c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000214b <__c.4281>:
    214b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    215b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000216c <__c.4278>:
    216c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    217c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000218c <__c.4274>:
    218c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    219c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21ac:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21bc:	0a 00                                               ..

000021be <__c.4269>:
    21be:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021ce <__c.4266>:
    21ce:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21de:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000021ed <__c.4264>:
    21ed:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    21fd:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    220d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002218 <__c.4262>:
    2218:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2228:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002238 <__c.4260>:
    2238:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2248:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2258:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002261 <__c.4258>:
    2261:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2271:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000227d <__c.4256>:
    227d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    228d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    229d:	0a 00                                               ..

0000229f <__c.4254>:
    229f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022af <__c.4251>:
    22af:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22bf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022d0 <__c.4249>:
    22d0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22e0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    22f0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000022f9 <__c.4247>:
    22f9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2309:	36 5d 0a 00                                         6]..

0000230d <__c.4244>:
    230d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    231d:	35 5d 0a 00                                         5]..

00002321 <__c.4241>:
    2321:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2331:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002341 <__c.4238>:
    2341:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2351:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2361:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002370 <__c.4236>:
    2370:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2380:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002391 <__c.4234>:
    2391:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23a1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023b2 <__c.4232>:
    23b2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23c2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23d2:	0a 00                                               ..

000023d4 <__c.4230>:
    23d4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23e4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    23f4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2404:	0a 00                                               ..

00002406 <__c.4218>:
    2406:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2416:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2426:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2436:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2446:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002457 <__c.4216>:
    2457:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2467:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2477:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2487:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2497:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024a7 <__c.4214>:
    24a7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24b7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24c7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24d7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24e7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024f7 <__c.4212>:
    24f7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2507:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2517:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2527:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2537:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002547 <__c.4207>:
    2547:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2557:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2567:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2577:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2587:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2597:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25a7:	58 48 5d 0a 00                                      XH]..

000025ac <__c.4205>:
    25ac:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25bc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25cc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25dc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    25ec:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    25fc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    260c:	30 32 58 48 5d 0a 00                                02XH]..

00002613 <__c.4203>:
    2613:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2623:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2633:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2643:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2653:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2663:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2673:	30 32 58 48 5d 0a 00                                02XH]..

0000267a <__c.4201>:
    267a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    268a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    269a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26aa:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26ba:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26ca:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26da:	30 32 58 48 5d 0a 00                                02XH]..

000026e1 <__c.4194>:
    26e1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

000026f0 <__c.4190>:
    26f0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2700:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000270a <__c.4188>:
    270a:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

0000271a <__c.4181>:
    271a:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002727 <__c.4179>:
    2727:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2737:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002741 <__c.4172>:
    2741:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2751:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002760 <__c.4165>:
    2760:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2770:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000277a <__c.4158>:
    277a:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    278a:	6e 65 5d 0a 00                                      ne]..

0000278f <__c.4154>:
    278f:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000279f <__c.4113>:
    279f:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27af:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27bf:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027ca <__c.4143>:
    27ca:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27da:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    27ea:	25 30 34 58 48 5d 0a 00                             %04XH]..

000027f2 <__c.4120>:
    27f2:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2802:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000280b <__c.4106>:
    280b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    281b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002825 <__c.4104>:
    2825:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2835:	75 73 5d 0a 00                                      us]..

0000283a <__c.4098>:
    283a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    284a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002854 <__c.4096>:
    2854:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2864:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002872 <__c.4090>:
    2872:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2882:	74 61 74 75 73 5d 0a 00                             tatus]..

0000288a <__c.4112>:
    288a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    289a:	74 65 73 0a 00                                      tes..

0000289f <__c.4110>:
    289f:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28af:	0a 00                                               ..

000028b1 <__c.4108>:
    28b1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c1:	0a 00                                               ..

000028c3 <__c.4103>:
    28c3:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28d3:	6e 65 64 0a 00                                      ned..

000028d8 <__c.4094>:
    28d8:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28e8:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000028f2 <__c.4092>:
    28f2:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2902:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000290e <__c.4087>:
    290e:	25 30 38 6c 64 0d 00                                %08ld..

00002915 <__c.4081>:
    2915:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2925:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002936 <__c.4075>:
    2936:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002944 <__c.4073>:
    2944:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2954:	69 74 65 0a 00                                      ite..

00002959 <__c.4067>:
    2959:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002965 <__c.4065>:
    2965:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2975:	6f 3a 25 73 0a 00                                   o:%s..

0000297b <__c.4063>:
    297b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    298b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    299b:	74 00                                               t.

0000299d <__c.4735>:
    299d:	0a 00                                               ..

0000299f <__c.4730>:
    299f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029a7 <__c.4728>:
    29a7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29b7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29c7:	0a 00                                               ..

000029c9 <__c.4726>:
    29c9:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029d1 <__c.4724>:
    29d1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29e1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29f1:	0a 00                                               ..

000029f3 <__c.4711>:
    29f3:	0a 00                                               ..

000029f5 <__c.4709>:
    29f5:	0a 00                                               ..

000029f7 <__c.4707>:
    29f7:	45 4e 44 0a 00                                      END..

000029fc <__c.4702>:
    29fc:	0a 00                                               ..

000029fe <__c.4700>:
    29fe:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a06 <__c.4698>:
    2a06:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a10 <__c.4696>:
    2a10:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a19 <__c.4694>:
    2a19:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a23 <__c.4692>:
    2a23:	48 45 41 44 53 00                                   HEADS.

00002a29 <__c.4690>:
    2a29:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a39:	4b 00                                               K.

00002a3b <__c.4688>:
    2a3b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a4c <__c.4686>:
    2a4c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a58 <__c.4684>:
    2a58:	49 44 00                                            ID.

00002a5b <__c.4682>:
    2a5b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a65 <__c.4680>:
    2a65:	46 49 4c 45 00                                      FILE.

00002a6a <__c.4678>:
    2a6a:	50 50 52 00                                         PPR.

00002a6e <__c.4676>:
    2a6e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a76 <__c.4674>:
    2a76:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002a80 <__c.4672>:
    2a80:	41 4d 49 47 4f 0a 00                                AMIGO..

00002a87 <__c.4670>:
    2a87:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002a92 <__c.4668>:
    2a92:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aa3 <__c.4666>:
    2aa3:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002aae <__c.4664>:
    2aae:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002ab7 <__c.4662>:
    2ab7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002ac4 <__c.4660>:
    2ac4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002ace <__c.4658>:
    2ace:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2ade:	53 00                                               S.

00002ae0 <__c.4656>:
    2ae0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002aee <__c.4654>:
    2aee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2afe:	56 45 00                                            VE.

00002b01 <__c.4652>:
    2b01:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b0d <__c.4650>:
    2b0d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b1d:	4d 45 00                                            ME.

00002b20 <__c.4648>:
    2b20:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b30:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b38 <__c.4646>:
    2b38:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b43 <__c.4644>:
    2b43:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b4e <__c.4642>:
    2b4e:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002b5e <__c.4640>:
    2b5e:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002b6e <__c.4638>:
    2b6e:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002b7c <__c.4636>:
    2b7c:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002b86 <__c.4634>:
    2b86:	20 20 55 4e 49 54 0a 00                               UNIT..

00002b8e <__c.4632>:
    2b8e:	54 59 50 45 00                                      TYPE.

00002b93 <__c.4630>:
    2b93:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002ba1 <__c.4628>:
    2ba1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bb1 <__c.4626>:
    2bb1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002bbf <__c.4624>:
    2bbf:	49 44 00                                            ID.

00002bc2 <__c.4622>:
    2bc2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002bcc <__c.4620>:
    2bcc:	46 49 4c 45 00                                      FILE.

00002bd1 <__c.4618>:
    2bd1:	50 50 52 00                                         PPR.

00002bd5 <__c.4616>:
    2bd5:	41 44 44 52 45 53 53 00                             ADDRESS.

00002bdd <__c.4614>:
    2bdd:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002be7 <__c.4612>:
    2be7:	53 53 38 30 0a 00                                   SS80..

00002bed <__c.4609>:
    2bed:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2bfd:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c0d <__c.4601>:
    2c0d:	0a 00                                               ..

00002c0f <__c.4596>:
    2c0f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c1f:	25 30 32 58 48 0a 00                                %02XH..

00002c26 <__c.4594>:
    2c26:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c36:	25 30 32 58 48 0a 00                                %02XH..

00002c3d <__c.4592>:
    2c3d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2c4d:	25 30 32 58 48 0a 00                                %02XH..

00002c54 <__c.4590>:
    2c54:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2c64:	25 30 32 58 48 0a 00                                %02XH..

00002c6b <__c.4588>:
    2c6b:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2c7b:	25 30 32 58 48 0a 00                                %02XH..

00002c82 <__c.4586>:
    2c82:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2c92:	25 30 32 58 48 0a 00                                %02XH..

00002c99 <__c.4584>:
    2c99:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2ca9:	25 30 32 58 48 0a 00                                %02XH..

00002cb0 <__c.4582>:
    2cb0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2cc0:	25 30 32 58 48 0a 00                                %02XH..

00002cc7 <__c.4580>:
    2cc7:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2cd7:	25 30 32 58 48 0a 00                                %02XH..

00002cde <__c.4577>:
    2cde:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2cee:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2cfe:	0a 00                                               ..

00002d00 <__c.4571>:
    2d00:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d10:	0a 00                                               ..

00002d12 <__c.4560>:
    2d12:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d22:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d2b <__c.4549>:
    2d2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2d3b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2d4b:	2a 2a 2a 2a 2a 0a 00                                *****..

00002d52 <__c.4547>:
    2d52:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2d62:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002d6f <__c.4545>:
    2d6f:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2d7f:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2d8f:	0a 00                                               ..

00002d91 <__c.4541>:
    2d91:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2da1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2db1:	0a 00                                               ..

00002db3 <__c.4538>:
    2db3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2dc3:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2dd3:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002de3 <__c.4535>:
    2de3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2df3:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e03:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e12 <__c.4532>:
    2e12:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e22:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e32:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e42 <__c.4530>:
    2e42:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2e52:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002e5b <__c.4527>:
    2e5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e6b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2e7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002e89 <__c.4524>:
    2e89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2e99:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2ea9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002eb7 <__c.4521>:
    2eb7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ec7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2ed7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002ee3 <__c.4518>:
    2ee3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ef3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f03:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f13:	0a 00                                               ..

00002f15 <__c.4515>:
    2f15:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f25:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f35:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f43 <__c.4512>:
    2f43:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f53:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f71 <__c.4509>:
    2f71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f81:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2f91:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002f9e <__c.4506>:
    2f9e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fae:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2fbe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002fcf <__c.4503>:
    2fcf:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fdf:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2fef:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002ff9 <__c.4499>:
    2ff9:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3009:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3019:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003021 <__c.4497>:
    3021:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3031:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

0000303a <__c.4493>:
    303a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    304a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00003058 <__c.4491>:
    3058:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00003065 <__c.4470>:
    3065:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    3075:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00003084 <__c.4468>:
    3084:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    3094:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

000030a3 <__c.4466>:
    30a3:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    30b3:	20 76 61 6c 75 65 0a 00                              value..

000030bb <__c.4443>:
    30bb:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    30cb:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    30db:	0a 00                                               ..

000030dd <__c.4436>:
    30dd:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    30ed:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    30fd:	6c 6c 0a 00                                         ll..

00003101 <__c.4429>:
    3101:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3111:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    3121:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000312c <__c.4427>:
    312c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    313c:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    314c:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    315c:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00003164 <__c.4425>:
    3164:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3174:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    3184:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    3194:	3a 25 73 0a 00                                      :%s..

00003199 <__c.4423>:
    3199:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    31b9:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    31c9:	55 4c 4c 0a 00                                      ULL..

000031ce <__c.4421>:
    31ce:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31de:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    31ee:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    31fe:	66 20 72 61 6e 67 65 0a 00                          f range..

00003207 <__c.4419>:
    3207:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3217:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    3227:	6e 67 65 0a 00                                      nge..

0000322c <__c.4723>:
    322c:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    323c:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

0000324c <__c.4721>:
    324c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    325c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000326c <__c.4719>:
    326c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    327c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    328c:	30 0a 00                                            0..

0000328f <__c.4717>:
    328f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    329f:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32af:	70 74 79 0a 00                                      pty..

000032b4 <__c.4715>:
    32b4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32d4:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032dd <__c.4702>:
    32dd:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32ed:	20 25 31 30 73 0a 00                                 %10s..

000032f4 <__c.4700>:
    32f4:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3304:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3314:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000331d <__c.4698>:
    331d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    332d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    333d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    334d:	74 65 72 73 0a 00                                   ters..

00003353 <__c.4696>:
    3353:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3363:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3373:	65 6d 70 74 79 0a 00                                empty..

0000337a <__c.4694>:
    337a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    339a:	65 6d 70 74 79 0a 00                                empty..

000033a1 <__c.4692>:
    33a1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33b1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33c1:	20 65 6d 70 74 79 0a 00                              empty..

000033c9 <__c.4683>:
    33c9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033d8 <__c.4681>:
    33d8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33e8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33f8:	20 66 6f 75 6e 64 0a 00                              found..

00003400 <__c.4679>:
    3400:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3410:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000341f <__c.4677>:
    341f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    342f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000343f <__c.4675>:
    343f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    344f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    345f:	70 74 79 0a 00                                      pty..

00003464 <__c.4667>:
    3464:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003471 <__c.4662>:
    3471:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000347e <__c.4660>:
    347e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034ae <__c.4658>:
    34ae:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34be:	73 0a 00                                            s..

000034c1 <__c.4656>:
    34c1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34d1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34e1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034f0 <__c.4654>:
    34f0:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3500:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000350c <__c.4652>:
    350c:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    351c:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003527 <__c.4650>:
    3527:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3537:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003547 <__c.4633>:
    3547:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003554 <__c.4628>:
    3554:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003561 <__c.4626>:
    3561:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3571:	73 0a 00                                            s..

00003574 <__c.4624>:
    3574:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3584:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000358c <__c.4607>:
    358c:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003599 <__c.4604>:
    3599:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a9:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b9:	20 65 72 72 6f 72 0a 00                              error..

000035c1 <__c.4596>:
    35c1:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035ce <__c.4594>:
    35ce:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35de:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35ee:	20 65 72 72 6f 72 0a 00                              error..

000035f6 <__c.4591>:
    35f6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3606:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3616:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3626:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3636:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3646:	30 32 58 48 0a 00                                   02XH..

0000364c <__c.4589>:
    364c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    366c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    367c:	20 25 64 0a 00                                       %d..

00003681 <__c.4585>:
    3681:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003691 <__c.4583>:
    3691:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36a1:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36b1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36c1:	30 78 45 30 31 33 0a 00                             0xE013..

000036c9 <__c.4581>:
    36c9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36d9:	6e 64 3a 25 73 0a 00                                nd:%s..

000036e0 <__c.4579>:
    36e0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36f0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036f8 <__c.4555>:
    36f8:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003705 <__c.4553>:
    3705:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3715:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000371e <__c.4551>:
    371e:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    372e:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003737 <__c.4549>:
    3737:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3747:	20 20 25 34 64 0a 00                                  %4d..

0000374e <__c.4547>:
    374e:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    375e:	20 20 20 25 73 0a 00                                   %s..

00003765 <__c.4545>:
    3765:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3775:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3785:	77 72 69 74 65 0a 00                                write..

0000378c <__c.4543>:
    378c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    379c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37ac:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037bc <__c.4541>:
    37bc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37cc:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37dc:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037eb <__c.4539>:
    37eb:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37fb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    380b:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000381b <__c.4537>:
    381b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    382b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    383b:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000384a <__c.4535>:
    384a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    386a:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003878 <__c.4533>:
    3878:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3888:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3898:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38a8:	79 0a 00                                            y..

000038ab <__c.4519>:
    38ab:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038b8 <__c.4517>:
    38b8:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038c5 <__c.4512>:
    38c5:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038d2 <__c.4495>:
    38d2:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38e2:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38f2:	25 64 0a 00                                         %d..

000038f6 <__c.4478>:
    38f6:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3906:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3916:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3926:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000392f <__c.4464>:
    392f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    393f:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    394f:	62 69 67 0a 00                                      big..

00003954 <__c.4462>:
    3954:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3964:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3974:	63 74 65 72 73 0a 00                                cters..

0000397b <__c.4455>:
    397b:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    398b:	73 0a 00                                            s..

0000398e <__c.4453>:
    398e:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    399e:	73 0a 00                                            s..

000039a1 <__c.4451>:
    39a1:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039ae <__c.4449>:
    39ae:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039ba <__c.4447>:
    39ba:	0a 00                                               ..

000039bc <__c.4444>:
    39bc:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39cc:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    39dc:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000039ec <__c.4442>:
    39ec:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39fc:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a0c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a1c:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a2c:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a38 <__c.4439>:
    3a38:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a48:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a58:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a68:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a78 <__c.4437>:
    3a78:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a88:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a8f <__c.4427>:
    3a8f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a9f:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3aaf:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3abf:	64 0a 00                                            d..

00003ac2 <__c.4425>:
    3ac2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ad2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ae2:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3af2:	64 0a 00                                            d..

00003af5 <__c.4423>:
    3af5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b15:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b25:	69 6c 65 64 0a 00                                   iled..

00003b2b <__c.4421>:
    3b2b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b3b:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b4b:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b5b:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b6a <__c.4408>:
    3b6a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b7a:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b8a:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b9a:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3baa:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003bbb <__c.4405>:
    3bbb:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bcb:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bdb:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003be4 <__c.4403>:
    3be4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c04:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c14:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c1c <__c.4391>:
    3c1c:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c2c:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c3c:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c4c:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c5c:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c69 <__c.4366>:
    3c69:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c79:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c89 <__c.4357>:
    3c89:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c99:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3ca9:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3cb9:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003cc3 <__c.4338>:
    3cc3:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003ccf <__c.4333>:
    3ccf:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cdb <__c.4328>:
    3cdb:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003ce7 <__c.4320>:
    3ce7:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cf3 <__c.4304>:
    3cf3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d03:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d13:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d1f <__c.4302>:
    3d1f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d2f:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d3f:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d4a <__c.4300>:
    3d4a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d5a:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3d6a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d7a:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3d8a:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d95 <__c.4298>:
    3d95:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3da5:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3db5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dc5:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3dd5:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003de0 <__c.4296>:
    3de0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3df0:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e00:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e0e <__c.4294>:
    3e0e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e1e:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e2e:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e3e:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e4f <__c.4292>:
    3e4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e5f:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3e6f:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3e7f:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3e8f:	58 68 0a 00                                         Xh..

00003e93 <__c.4290>:
    3e93:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ea3:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003eb4 <__c.4284>:
    3eb4:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ec4:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3ed4:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003ee0 <__c.4282>:
    3ee0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ef0:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f00:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f0f <__c.4280>:
    3f0f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f1f:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f2f:	25 6c 64 0a 00                                      %ld..

00003f34 <__c.4278>:
    3f34:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f44:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f54:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3f64:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f6d <__c.4276>:
    3f6d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f7d:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f8d:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3f9d:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fa6 <__c.4274>:
    3fa6:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3fb6:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003fbe <__c.4272>:
    3fbe:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fce:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3fde:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3fee:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003ff7 <__c.4270>:
    3ff7:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4007:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004016 <__c.4263>:
    4016:	0a 00                                               ..

00004018 <__c.4261>:
    4018:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4028:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004032 <__c.4259>:
    4032:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4042:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000404e <__c.4257>:
    404e:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    405e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000406b <__c.4255>:
    406b:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    407b:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004088 <__c.4253>:
    4088:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4098:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040a5 <__c.4251>:
    40a5:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    40b5:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000040c1 <__c.4249>:
    40c1:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    40d1:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040dd <__c.4247>:
    40dd:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    40ed:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040f7 <__c.4245>:
    40f7:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4107:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004111 <__c.4243>:
    4111:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4121:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000412d <__c.4241>:
    412d:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    413d:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004149 <__c.4239>:
    4149:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4159:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004166 <__c.4237>:
    4166:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4176:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004183 <__c.4235>:
    4183:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4193:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000419f <__c.4233>:
    419f:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    41af:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041b9 <__c.4231>:
    41b9:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    41c9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d6 <__c.4229>:
    41d6:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    41e6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041f3 <__c.4227>:
    41f3:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4203:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004210 <__c.4225>:
    4210:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4220:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000422d <__c.4223>:
    422d:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    423d:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000424a <__c.4221>:
    424a:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    425a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004267 <__c.4219>:
    4267:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4277:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004284 <__c.4217>:
    4284:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4294:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042a1 <__c.4215>:
    42a1:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    42b1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042bb <__c.4213>:
    42bb:	0a 25 73 0a 00                                      .%s..

000042c0 <__c.4090>:
    42c0:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    42d0:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    42e0:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    42f0:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000042fd <__c.4081>:
    42fd:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    430d:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    431d:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    432d:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004339 <__c.4072>:
    4339:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4349:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000435a <__c.4065>:
    435a:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    436a:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004373 <__c.4059>:
    4373:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4383:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4393:	25 73 5d 0a 00                                      %s]..

00004398 <__c.4047>:
    4398:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43a8:	6f 69 6e 74 65 72 0a 00                             ointer..

000043b0 <__c.4042>:
    43b0:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    43c0:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    43d0:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000043d9 <__c.4030>:
    43d9:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    43e9:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    43f9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4409:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4419:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4429:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4439:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4449:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4459:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    4469:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    4479:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4489:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4499:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    44a9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    44b9:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    44c9:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    44d9:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    44e9:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    44f9:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    4509:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    4519:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    4529:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    4539:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    4549:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    4559:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    4569:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    4579:	6e 67 0a 0a 00                                      ng...

0000457e <__c.4028>:
    457e:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004588 <__c.4478>:
    4588:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4598:	53 4b 0a 00                                         SK..

0000459c <__c.4476>:
    459c:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    45ac:	30 34 78 48 0a 00                                   04xH..

000045b2 <__c.4474>:
    45b2:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    45c2:	64 6f 6e 65 0a 00                                   done..

000045c8 <__c.4472>:
    45c8:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    45d8:	6f 6e 65 0a 00                                      one..

000045dd <__c.4470>:
    45dd:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 20     GPIB Timer init 
    45ed:	64 6f 6e 65 0a 00                                   done..

000045f3 <__c.4468>:
    45f3:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4603:	0a 00                                               ..

00004605 <__c.4466>:
    4605:	50 72 69 6e 74 65 72 20 49 6e 69 74 20 64 6f 6e     Printer Init don
    4615:	65 0a 00                                            e..

00004618 <__c.4464>:
    4618:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 47 50 49     initializing GPI
    4628:	42 20 62 75 73 0a 00                                B bus..

0000462f <__c.4462>:
    462f:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    463f:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000464c <__c.4460>:
    464c:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000465b <__c.4458>:
    465b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    466b:	20 62 75 73 0a 00                                    bus..

00004671 <__c.4456>:
    4671:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4681:	20 62 75 73 0a 00                                    bus..

00004687 <__c.4454>:
    4687:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4697:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046a1 <__c.4452>:
    46a1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46b1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046bb <__c.4450>:
    46bb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46cb:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46db:	35 64 69 73 6b 0a 00                                5disk..

000046e2 <__c.4448>:
    46e2:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046f2 <__c.4446>:
    46f2:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4702:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000470f <__c.4444>:
    470f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    471f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000472e <__c.4442>:
    472e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    473e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    474e:	3a 20 25 6c 64 0a 00                                : %ld..

00004755 <__c.4440>:
    4755:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004766 <__c.4438>:
    4766:	53 74 61 72 74 0a 00                                Start..

0000476d <__c.4430>:
    476d:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004779 <__c.4428>:
    4779:	0a 3e 00                                            .>.

0000477c <__c.4418>:
    477c:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    478c:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

0000479b <__c.4414>:
    479b:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047a6 <__c.4412>:
    47a6:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047b5 <__c.4408>:
    47b5:	0a 00                                               ..

000047b7 <__c.4406>:
    47b7:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47c7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047d1 <__c.4404>:
    47d1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47e1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047eb <__c.4402>:
    47eb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47fb:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    480b:	35 64 69 73 6b 0a 00                                5disk..

00004812 <__c.4400>:
    4812:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004822 <__c.4398>:
    4822:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4832:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000483f <__c.4396>:
    483f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    484f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000485e <__c.4394>:
    485e:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    486e:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    487e:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

0000488e <__ctors_end>:
    488e:	11 24       	eor	r1, r1
    4890:	1f be       	out	0x3f, r1	; 63
    4892:	cf ef       	ldi	r28, 0xFF	; 255
    4894:	d0 e4       	ldi	r29, 0x40	; 64
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	cd bf       	out	0x3d, r28	; 61

0000489a <__do_copy_data>:
    489a:	17 e1       	ldi	r17, 0x17	; 23
    489c:	a0 e0       	ldi	r26, 0x00	; 0
    489e:	b1 e0       	ldi	r27, 0x01	; 1
    48a0:	e0 e1       	ldi	r30, 0x10	; 16
    48a2:	fd ed       	ldi	r31, 0xDD	; 221
    48a4:	01 e0       	ldi	r16, 0x01	; 1
    48a6:	0b bf       	out	0x3b, r16	; 59
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <__do_copy_data+0x14>
    48aa:	07 90       	elpm	r0, Z+
    48ac:	0d 92       	st	X+, r0
    48ae:	a8 31       	cpi	r26, 0x18	; 24
    48b0:	b1 07       	cpc	r27, r17
    48b2:	d9 f7       	brne	.-10     	; 0x48aa <__do_copy_data+0x10>

000048b4 <__do_clear_bss>:
    48b4:	2e e1       	ldi	r18, 0x1E	; 30
    48b6:	a8 e1       	ldi	r26, 0x18	; 24
    48b8:	b7 e1       	ldi	r27, 0x17	; 23
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <.do_clear_bss_start>

000048bc <.do_clear_bss_loop>:
    48bc:	1d 92       	st	X+, r1

000048be <.do_clear_bss_start>:
    48be:	ab 3e       	cpi	r26, 0xEB	; 235
    48c0:	b2 07       	cpc	r27, r18
    48c2:	e1 f7       	brne	.-8      	; 0x48bc <.do_clear_bss_loop>
    48c4:	0e 94 4d e7 	call	0x1ce9a	; 0x1ce9a <main>
    48c8:	0c 94 86 ee 	jmp	0x1dd0c	; 0x1dd0c <_exit>

000048cc <__bad_interrupt>:
    48cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048d0 <vfprintf>:
    48d0:	2f 92       	push	r2
    48d2:	3f 92       	push	r3
    48d4:	4f 92       	push	r4
    48d6:	5f 92       	push	r5
    48d8:	6f 92       	push	r6
    48da:	7f 92       	push	r7
    48dc:	8f 92       	push	r8
    48de:	9f 92       	push	r9
    48e0:	af 92       	push	r10
    48e2:	bf 92       	push	r11
    48e4:	cf 92       	push	r12
    48e6:	df 92       	push	r13
    48e8:	ef 92       	push	r14
    48ea:	ff 92       	push	r15
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
    48f8:	60 97       	sbiw	r28, 0x10	; 16
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	7c 01       	movw	r14, r24
    4906:	1b 01       	movw	r2, r22
    4908:	6a 01       	movw	r12, r20
    490a:	fc 01       	movw	r30, r24
    490c:	17 82       	std	Z+7, r1	; 0x07
    490e:	16 82       	std	Z+6, r1	; 0x06
    4910:	83 81       	ldd	r24, Z+3	; 0x03
    4912:	81 ff       	sbrs	r24, 1
    4914:	44 c3       	rjmp	.+1672   	; 0x4f9e <vfprintf+0x6ce>
    4916:	9e 01       	movw	r18, r28
    4918:	2f 5f       	subi	r18, 0xFF	; 255
    491a:	3f 4f       	sbci	r19, 0xFF	; 255
    491c:	39 01       	movw	r6, r18
    491e:	f7 01       	movw	r30, r14
    4920:	93 81       	ldd	r25, Z+3	; 0x03
    4922:	f1 01       	movw	r30, r2
    4924:	93 fd       	sbrc	r25, 3
    4926:	85 91       	lpm	r24, Z+
    4928:	93 ff       	sbrs	r25, 3
    492a:	81 91       	ld	r24, Z+
    492c:	1f 01       	movw	r2, r30
    492e:	88 23       	and	r24, r24
    4930:	09 f4       	brne	.+2      	; 0x4934 <vfprintf+0x64>
    4932:	31 c3       	rjmp	.+1634   	; 0x4f96 <vfprintf+0x6c6>
    4934:	85 32       	cpi	r24, 0x25	; 37
    4936:	39 f4       	brne	.+14     	; 0x4946 <vfprintf+0x76>
    4938:	93 fd       	sbrc	r25, 3
    493a:	85 91       	lpm	r24, Z+
    493c:	93 ff       	sbrs	r25, 3
    493e:	81 91       	ld	r24, Z+
    4940:	1f 01       	movw	r2, r30
    4942:	85 32       	cpi	r24, 0x25	; 37
    4944:	39 f4       	brne	.+14     	; 0x4954 <vfprintf+0x84>
    4946:	b7 01       	movw	r22, r14
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    494e:	56 01       	movw	r10, r12
    4950:	65 01       	movw	r12, r10
    4952:	e5 cf       	rjmp	.-54     	; 0x491e <vfprintf+0x4e>
    4954:	10 e0       	ldi	r17, 0x00	; 0
    4956:	51 2c       	mov	r5, r1
    4958:	91 2c       	mov	r9, r1
    495a:	ff e1       	ldi	r31, 0x1F	; 31
    495c:	f9 15       	cp	r31, r9
    495e:	d8 f0       	brcs	.+54     	; 0x4996 <vfprintf+0xc6>
    4960:	8b 32       	cpi	r24, 0x2B	; 43
    4962:	79 f0       	breq	.+30     	; 0x4982 <vfprintf+0xb2>
    4964:	38 f4       	brcc	.+14     	; 0x4974 <vfprintf+0xa4>
    4966:	80 32       	cpi	r24, 0x20	; 32
    4968:	79 f0       	breq	.+30     	; 0x4988 <vfprintf+0xb8>
    496a:	83 32       	cpi	r24, 0x23	; 35
    496c:	a1 f4       	brne	.+40     	; 0x4996 <vfprintf+0xc6>
    496e:	f9 2d       	mov	r31, r9
    4970:	f0 61       	ori	r31, 0x10	; 16
    4972:	2e c0       	rjmp	.+92     	; 0x49d0 <vfprintf+0x100>
    4974:	8d 32       	cpi	r24, 0x2D	; 45
    4976:	61 f0       	breq	.+24     	; 0x4990 <vfprintf+0xc0>
    4978:	80 33       	cpi	r24, 0x30	; 48
    497a:	69 f4       	brne	.+26     	; 0x4996 <vfprintf+0xc6>
    497c:	29 2d       	mov	r18, r9
    497e:	21 60       	ori	r18, 0x01	; 1
    4980:	2d c0       	rjmp	.+90     	; 0x49dc <vfprintf+0x10c>
    4982:	39 2d       	mov	r19, r9
    4984:	32 60       	ori	r19, 0x02	; 2
    4986:	93 2e       	mov	r9, r19
    4988:	89 2d       	mov	r24, r9
    498a:	84 60       	ori	r24, 0x04	; 4
    498c:	98 2e       	mov	r9, r24
    498e:	2a c0       	rjmp	.+84     	; 0x49e4 <vfprintf+0x114>
    4990:	e9 2d       	mov	r30, r9
    4992:	e8 60       	ori	r30, 0x08	; 8
    4994:	15 c0       	rjmp	.+42     	; 0x49c0 <vfprintf+0xf0>
    4996:	97 fc       	sbrc	r9, 7
    4998:	2d c0       	rjmp	.+90     	; 0x49f4 <vfprintf+0x124>
    499a:	20 ed       	ldi	r18, 0xD0	; 208
    499c:	28 0f       	add	r18, r24
    499e:	2a 30       	cpi	r18, 0x0A	; 10
    49a0:	88 f4       	brcc	.+34     	; 0x49c4 <vfprintf+0xf4>
    49a2:	96 fe       	sbrs	r9, 6
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <vfprintf+0xe2>
    49a6:	3a e0       	ldi	r19, 0x0A	; 10
    49a8:	13 9f       	mul	r17, r19
    49aa:	20 0d       	add	r18, r0
    49ac:	11 24       	eor	r1, r1
    49ae:	12 2f       	mov	r17, r18
    49b0:	19 c0       	rjmp	.+50     	; 0x49e4 <vfprintf+0x114>
    49b2:	8a e0       	ldi	r24, 0x0A	; 10
    49b4:	58 9e       	mul	r5, r24
    49b6:	20 0d       	add	r18, r0
    49b8:	11 24       	eor	r1, r1
    49ba:	52 2e       	mov	r5, r18
    49bc:	e9 2d       	mov	r30, r9
    49be:	e0 62       	ori	r30, 0x20	; 32
    49c0:	9e 2e       	mov	r9, r30
    49c2:	10 c0       	rjmp	.+32     	; 0x49e4 <vfprintf+0x114>
    49c4:	8e 32       	cpi	r24, 0x2E	; 46
    49c6:	31 f4       	brne	.+12     	; 0x49d4 <vfprintf+0x104>
    49c8:	96 fc       	sbrc	r9, 6
    49ca:	e5 c2       	rjmp	.+1482   	; 0x4f96 <vfprintf+0x6c6>
    49cc:	f9 2d       	mov	r31, r9
    49ce:	f0 64       	ori	r31, 0x40	; 64
    49d0:	9f 2e       	mov	r9, r31
    49d2:	08 c0       	rjmp	.+16     	; 0x49e4 <vfprintf+0x114>
    49d4:	8c 36       	cpi	r24, 0x6C	; 108
    49d6:	21 f4       	brne	.+8      	; 0x49e0 <vfprintf+0x110>
    49d8:	29 2d       	mov	r18, r9
    49da:	20 68       	ori	r18, 0x80	; 128
    49dc:	92 2e       	mov	r9, r18
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <vfprintf+0x114>
    49e0:	88 36       	cpi	r24, 0x68	; 104
    49e2:	41 f4       	brne	.+16     	; 0x49f4 <vfprintf+0x124>
    49e4:	f1 01       	movw	r30, r2
    49e6:	93 fd       	sbrc	r25, 3
    49e8:	85 91       	lpm	r24, Z+
    49ea:	93 ff       	sbrs	r25, 3
    49ec:	81 91       	ld	r24, Z+
    49ee:	1f 01       	movw	r2, r30
    49f0:	81 11       	cpse	r24, r1
    49f2:	b3 cf       	rjmp	.-154    	; 0x495a <vfprintf+0x8a>
    49f4:	9b eb       	ldi	r25, 0xBB	; 187
    49f6:	98 0f       	add	r25, r24
    49f8:	93 30       	cpi	r25, 0x03	; 3
    49fa:	20 f4       	brcc	.+8      	; 0x4a04 <vfprintf+0x134>
    49fc:	99 2d       	mov	r25, r9
    49fe:	90 61       	ori	r25, 0x10	; 16
    4a00:	80 5e       	subi	r24, 0xE0	; 224
    4a02:	07 c0       	rjmp	.+14     	; 0x4a12 <vfprintf+0x142>
    4a04:	9b e9       	ldi	r25, 0x9B	; 155
    4a06:	98 0f       	add	r25, r24
    4a08:	93 30       	cpi	r25, 0x03	; 3
    4a0a:	08 f0       	brcs	.+2      	; 0x4a0e <vfprintf+0x13e>
    4a0c:	66 c1       	rjmp	.+716    	; 0x4cda <vfprintf+0x40a>
    4a0e:	99 2d       	mov	r25, r9
    4a10:	9f 7e       	andi	r25, 0xEF	; 239
    4a12:	96 ff       	sbrs	r25, 6
    4a14:	16 e0       	ldi	r17, 0x06	; 6
    4a16:	9f 73       	andi	r25, 0x3F	; 63
    4a18:	99 2e       	mov	r9, r25
    4a1a:	85 36       	cpi	r24, 0x65	; 101
    4a1c:	19 f4       	brne	.+6      	; 0x4a24 <vfprintf+0x154>
    4a1e:	90 64       	ori	r25, 0x40	; 64
    4a20:	99 2e       	mov	r9, r25
    4a22:	08 c0       	rjmp	.+16     	; 0x4a34 <vfprintf+0x164>
    4a24:	86 36       	cpi	r24, 0x66	; 102
    4a26:	21 f4       	brne	.+8      	; 0x4a30 <vfprintf+0x160>
    4a28:	39 2f       	mov	r19, r25
    4a2a:	30 68       	ori	r19, 0x80	; 128
    4a2c:	93 2e       	mov	r9, r19
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <vfprintf+0x164>
    4a30:	11 11       	cpse	r17, r1
    4a32:	11 50       	subi	r17, 0x01	; 1
    4a34:	97 fe       	sbrs	r9, 7
    4a36:	07 c0       	rjmp	.+14     	; 0x4a46 <vfprintf+0x176>
    4a38:	1c 33       	cpi	r17, 0x3C	; 60
    4a3a:	50 f4       	brcc	.+20     	; 0x4a50 <vfprintf+0x180>
    4a3c:	44 24       	eor	r4, r4
    4a3e:	43 94       	inc	r4
    4a40:	41 0e       	add	r4, r17
    4a42:	27 e0       	ldi	r18, 0x07	; 7
    4a44:	0b c0       	rjmp	.+22     	; 0x4a5c <vfprintf+0x18c>
    4a46:	18 30       	cpi	r17, 0x08	; 8
    4a48:	38 f0       	brcs	.+14     	; 0x4a58 <vfprintf+0x188>
    4a4a:	27 e0       	ldi	r18, 0x07	; 7
    4a4c:	17 e0       	ldi	r17, 0x07	; 7
    4a4e:	05 c0       	rjmp	.+10     	; 0x4a5a <vfprintf+0x18a>
    4a50:	27 e0       	ldi	r18, 0x07	; 7
    4a52:	9c e3       	ldi	r25, 0x3C	; 60
    4a54:	49 2e       	mov	r4, r25
    4a56:	02 c0       	rjmp	.+4      	; 0x4a5c <vfprintf+0x18c>
    4a58:	21 2f       	mov	r18, r17
    4a5a:	41 2c       	mov	r4, r1
    4a5c:	56 01       	movw	r10, r12
    4a5e:	84 e0       	ldi	r24, 0x04	; 4
    4a60:	a8 0e       	add	r10, r24
    4a62:	b1 1c       	adc	r11, r1
    4a64:	f6 01       	movw	r30, r12
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	04 2d       	mov	r16, r4
    4a70:	a3 01       	movw	r20, r6
    4a72:	0e 94 33 ed 	call	0x1da66	; 0x1da66 <__ftoa_engine>
    4a76:	6c 01       	movw	r12, r24
    4a78:	f9 81       	ldd	r31, Y+1	; 0x01
    4a7a:	fc 87       	std	Y+12, r31	; 0x0c
    4a7c:	f0 ff       	sbrs	r31, 0
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <vfprintf+0x1b4>
    4a80:	f3 ff       	sbrs	r31, 3
    4a82:	06 c0       	rjmp	.+12     	; 0x4a90 <vfprintf+0x1c0>
    4a84:	91 fc       	sbrc	r9, 1
    4a86:	06 c0       	rjmp	.+12     	; 0x4a94 <vfprintf+0x1c4>
    4a88:	92 fe       	sbrs	r9, 2
    4a8a:	06 c0       	rjmp	.+12     	; 0x4a98 <vfprintf+0x1c8>
    4a8c:	00 e2       	ldi	r16, 0x20	; 32
    4a8e:	05 c0       	rjmp	.+10     	; 0x4a9a <vfprintf+0x1ca>
    4a90:	0d e2       	ldi	r16, 0x2D	; 45
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x1ca>
    4a94:	0b e2       	ldi	r16, 0x2B	; 43
    4a96:	01 c0       	rjmp	.+2      	; 0x4a9a <vfprintf+0x1ca>
    4a98:	00 e0       	ldi	r16, 0x00	; 0
    4a9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a9c:	8c 70       	andi	r24, 0x0C	; 12
    4a9e:	19 f0       	breq	.+6      	; 0x4aa6 <vfprintf+0x1d6>
    4aa0:	01 11       	cpse	r16, r1
    4aa2:	5a c2       	rjmp	.+1204   	; 0x4f58 <vfprintf+0x688>
    4aa4:	9b c2       	rjmp	.+1334   	; 0x4fdc <vfprintf+0x70c>
    4aa6:	97 fe       	sbrs	r9, 7
    4aa8:	10 c0       	rjmp	.+32     	; 0x4aca <vfprintf+0x1fa>
    4aaa:	4c 0c       	add	r4, r12
    4aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    4aae:	f4 ff       	sbrs	r31, 4
    4ab0:	04 c0       	rjmp	.+8      	; 0x4aba <vfprintf+0x1ea>
    4ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab4:	81 33       	cpi	r24, 0x31	; 49
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <vfprintf+0x1ea>
    4ab8:	4a 94       	dec	r4
    4aba:	14 14       	cp	r1, r4
    4abc:	74 f5       	brge	.+92     	; 0x4b1a <vfprintf+0x24a>
    4abe:	28 e0       	ldi	r18, 0x08	; 8
    4ac0:	24 15       	cp	r18, r4
    4ac2:	78 f5       	brcc	.+94     	; 0x4b22 <vfprintf+0x252>
    4ac4:	88 e0       	ldi	r24, 0x08	; 8
    4ac6:	48 2e       	mov	r4, r24
    4ac8:	2c c0       	rjmp	.+88     	; 0x4b22 <vfprintf+0x252>
    4aca:	96 fc       	sbrc	r9, 6
    4acc:	2a c0       	rjmp	.+84     	; 0x4b22 <vfprintf+0x252>
    4ace:	81 2f       	mov	r24, r17
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	8c 15       	cp	r24, r12
    4ad4:	9d 05       	cpc	r25, r13
    4ad6:	9c f0       	brlt	.+38     	; 0x4afe <vfprintf+0x22e>
    4ad8:	3c ef       	ldi	r19, 0xFC	; 252
    4ada:	c3 16       	cp	r12, r19
    4adc:	3f ef       	ldi	r19, 0xFF	; 255
    4ade:	d3 06       	cpc	r13, r19
    4ae0:	74 f0       	brlt	.+28     	; 0x4afe <vfprintf+0x22e>
    4ae2:	89 2d       	mov	r24, r9
    4ae4:	80 68       	ori	r24, 0x80	; 128
    4ae6:	98 2e       	mov	r9, r24
    4ae8:	0a c0       	rjmp	.+20     	; 0x4afe <vfprintf+0x22e>
    4aea:	e2 e0       	ldi	r30, 0x02	; 2
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	ec 0f       	add	r30, r28
    4af0:	fd 1f       	adc	r31, r29
    4af2:	e1 0f       	add	r30, r17
    4af4:	f1 1d       	adc	r31, r1
    4af6:	80 81       	ld	r24, Z
    4af8:	80 33       	cpi	r24, 0x30	; 48
    4afa:	19 f4       	brne	.+6      	; 0x4b02 <vfprintf+0x232>
    4afc:	11 50       	subi	r17, 0x01	; 1
    4afe:	11 11       	cpse	r17, r1
    4b00:	f4 cf       	rjmp	.-24     	; 0x4aea <vfprintf+0x21a>
    4b02:	97 fe       	sbrs	r9, 7
    4b04:	0e c0       	rjmp	.+28     	; 0x4b22 <vfprintf+0x252>
    4b06:	44 24       	eor	r4, r4
    4b08:	43 94       	inc	r4
    4b0a:	41 0e       	add	r4, r17
    4b0c:	81 2f       	mov	r24, r17
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	c8 16       	cp	r12, r24
    4b12:	d9 06       	cpc	r13, r25
    4b14:	2c f4       	brge	.+10     	; 0x4b20 <vfprintf+0x250>
    4b16:	1c 19       	sub	r17, r12
    4b18:	04 c0       	rjmp	.+8      	; 0x4b22 <vfprintf+0x252>
    4b1a:	44 24       	eor	r4, r4
    4b1c:	43 94       	inc	r4
    4b1e:	01 c0       	rjmp	.+2      	; 0x4b22 <vfprintf+0x252>
    4b20:	10 e0       	ldi	r17, 0x00	; 0
    4b22:	97 fe       	sbrs	r9, 7
    4b24:	06 c0       	rjmp	.+12     	; 0x4b32 <vfprintf+0x262>
    4b26:	1c 14       	cp	r1, r12
    4b28:	1d 04       	cpc	r1, r13
    4b2a:	34 f4       	brge	.+12     	; 0x4b38 <vfprintf+0x268>
    4b2c:	c6 01       	movw	r24, r12
    4b2e:	01 96       	adiw	r24, 0x01	; 1
    4b30:	05 c0       	rjmp	.+10     	; 0x4b3c <vfprintf+0x26c>
    4b32:	85 e0       	ldi	r24, 0x05	; 5
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <vfprintf+0x26c>
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	01 11       	cpse	r16, r1
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	11 23       	and	r17, r17
    4b42:	31 f0       	breq	.+12     	; 0x4b50 <vfprintf+0x280>
    4b44:	21 2f       	mov	r18, r17
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	2f 5f       	subi	r18, 0xFF	; 255
    4b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4c:	82 0f       	add	r24, r18
    4b4e:	93 1f       	adc	r25, r19
    4b50:	25 2d       	mov	r18, r5
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	82 17       	cp	r24, r18
    4b56:	93 07       	cpc	r25, r19
    4b58:	14 f4       	brge	.+4      	; 0x4b5e <vfprintf+0x28e>
    4b5a:	58 1a       	sub	r5, r24
    4b5c:	01 c0       	rjmp	.+2      	; 0x4b60 <vfprintf+0x290>
    4b5e:	51 2c       	mov	r5, r1
    4b60:	89 2d       	mov	r24, r9
    4b62:	89 70       	andi	r24, 0x09	; 9
    4b64:	49 f4       	brne	.+18     	; 0x4b78 <vfprintf+0x2a8>
    4b66:	55 20       	and	r5, r5
    4b68:	39 f0       	breq	.+14     	; 0x4b78 <vfprintf+0x2a8>
    4b6a:	b7 01       	movw	r22, r14
    4b6c:	80 e2       	ldi	r24, 0x20	; 32
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4b74:	5a 94       	dec	r5
    4b76:	f7 cf       	rjmp	.-18     	; 0x4b66 <vfprintf+0x296>
    4b78:	00 23       	and	r16, r16
    4b7a:	29 f0       	breq	.+10     	; 0x4b86 <vfprintf+0x2b6>
    4b7c:	b7 01       	movw	r22, r14
    4b7e:	80 2f       	mov	r24, r16
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4b86:	93 fc       	sbrc	r9, 3
    4b88:	09 c0       	rjmp	.+18     	; 0x4b9c <vfprintf+0x2cc>
    4b8a:	55 20       	and	r5, r5
    4b8c:	39 f0       	breq	.+14     	; 0x4b9c <vfprintf+0x2cc>
    4b8e:	b7 01       	movw	r22, r14
    4b90:	80 e3       	ldi	r24, 0x30	; 48
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4b98:	5a 94       	dec	r5
    4b9a:	f7 cf       	rjmp	.-18     	; 0x4b8a <vfprintf+0x2ba>
    4b9c:	97 fe       	sbrs	r9, 7
    4b9e:	4c c0       	rjmp	.+152    	; 0x4c38 <vfprintf+0x368>
    4ba0:	46 01       	movw	r8, r12
    4ba2:	d7 fe       	sbrs	r13, 7
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <vfprintf+0x2da>
    4ba6:	81 2c       	mov	r8, r1
    4ba8:	91 2c       	mov	r9, r1
    4baa:	c6 01       	movw	r24, r12
    4bac:	88 19       	sub	r24, r8
    4bae:	99 09       	sbc	r25, r9
    4bb0:	f3 01       	movw	r30, r6
    4bb2:	e8 0f       	add	r30, r24
    4bb4:	f9 1f       	adc	r31, r25
    4bb6:	fe 87       	std	Y+14, r31	; 0x0e
    4bb8:	ed 87       	std	Y+13, r30	; 0x0d
    4bba:	96 01       	movw	r18, r12
    4bbc:	24 19       	sub	r18, r4
    4bbe:	31 09       	sbc	r19, r1
    4bc0:	38 8b       	std	Y+16, r19	; 0x10
    4bc2:	2f 87       	std	Y+15, r18	; 0x0f
    4bc4:	01 2f       	mov	r16, r17
    4bc6:	10 e0       	ldi	r17, 0x00	; 0
    4bc8:	11 95       	neg	r17
    4bca:	01 95       	neg	r16
    4bcc:	11 09       	sbc	r17, r1
    4bce:	3f ef       	ldi	r19, 0xFF	; 255
    4bd0:	83 16       	cp	r8, r19
    4bd2:	93 06       	cpc	r9, r19
    4bd4:	29 f4       	brne	.+10     	; 0x4be0 <vfprintf+0x310>
    4bd6:	b7 01       	movw	r22, r14
    4bd8:	8e e2       	ldi	r24, 0x2E	; 46
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4be0:	c8 14       	cp	r12, r8
    4be2:	d9 04       	cpc	r13, r9
    4be4:	4c f0       	brlt	.+18     	; 0x4bf8 <vfprintf+0x328>
    4be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4be8:	98 89       	ldd	r25, Y+16	; 0x10
    4bea:	88 15       	cp	r24, r8
    4bec:	99 05       	cpc	r25, r9
    4bee:	24 f4       	brge	.+8      	; 0x4bf8 <vfprintf+0x328>
    4bf0:	ed 85       	ldd	r30, Y+13	; 0x0d
    4bf2:	fe 85       	ldd	r31, Y+14	; 0x0e
    4bf4:	81 81       	ldd	r24, Z+1	; 0x01
    4bf6:	01 c0       	rjmp	.+2      	; 0x4bfa <vfprintf+0x32a>
    4bf8:	80 e3       	ldi	r24, 0x30	; 48
    4bfa:	f1 e0       	ldi	r31, 0x01	; 1
    4bfc:	8f 1a       	sub	r8, r31
    4bfe:	91 08       	sbc	r9, r1
    4c00:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c02:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c04:	2f 5f       	subi	r18, 0xFF	; 255
    4c06:	3f 4f       	sbci	r19, 0xFF	; 255
    4c08:	3e 87       	std	Y+14, r19	; 0x0e
    4c0a:	2d 87       	std	Y+13, r18	; 0x0d
    4c0c:	80 16       	cp	r8, r16
    4c0e:	91 06       	cpc	r9, r17
    4c10:	2c f0       	brlt	.+10     	; 0x4c1c <vfprintf+0x34c>
    4c12:	b7 01       	movw	r22, r14
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4c1a:	d9 cf       	rjmp	.-78     	; 0x4bce <vfprintf+0x2fe>
    4c1c:	c8 14       	cp	r12, r8
    4c1e:	d9 04       	cpc	r13, r9
    4c20:	41 f4       	brne	.+16     	; 0x4c32 <vfprintf+0x362>
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	96 33       	cpi	r25, 0x36	; 54
    4c26:	20 f4       	brcc	.+8      	; 0x4c30 <vfprintf+0x360>
    4c28:	95 33       	cpi	r25, 0x35	; 53
    4c2a:	19 f4       	brne	.+6      	; 0x4c32 <vfprintf+0x362>
    4c2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c2e:	34 ff       	sbrs	r19, 4
    4c30:	81 e3       	ldi	r24, 0x31	; 49
    4c32:	b7 01       	movw	r22, r14
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	4e c0       	rjmp	.+156    	; 0x4cd4 <vfprintf+0x404>
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	81 33       	cpi	r24, 0x31	; 49
    4c3c:	19 f0       	breq	.+6      	; 0x4c44 <vfprintf+0x374>
    4c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c40:	9f 7e       	andi	r25, 0xEF	; 239
    4c42:	9c 87       	std	Y+12, r25	; 0x0c
    4c44:	b7 01       	movw	r22, r14
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4c4c:	11 11       	cpse	r17, r1
    4c4e:	05 c0       	rjmp	.+10     	; 0x4c5a <vfprintf+0x38a>
    4c50:	94 fc       	sbrc	r9, 4
    4c52:	18 c0       	rjmp	.+48     	; 0x4c84 <vfprintf+0x3b4>
    4c54:	85 e6       	ldi	r24, 0x65	; 101
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	17 c0       	rjmp	.+46     	; 0x4c88 <vfprintf+0x3b8>
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	8e e2       	ldi	r24, 0x2E	; 46
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4c64:	1e 5f       	subi	r17, 0xFE	; 254
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	01 e0       	ldi	r16, 0x01	; 1
    4c6a:	08 0f       	add	r16, r24
    4c6c:	f3 01       	movw	r30, r6
    4c6e:	e8 0f       	add	r30, r24
    4c70:	f1 1d       	adc	r31, r1
    4c72:	80 81       	ld	r24, Z
    4c74:	b7 01       	movw	r22, r14
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4c7c:	80 2f       	mov	r24, r16
    4c7e:	01 13       	cpse	r16, r17
    4c80:	f3 cf       	rjmp	.-26     	; 0x4c68 <vfprintf+0x398>
    4c82:	e6 cf       	rjmp	.-52     	; 0x4c50 <vfprintf+0x380>
    4c84:	85 e4       	ldi	r24, 0x45	; 69
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	b7 01       	movw	r22, r14
    4c8a:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4c8e:	d7 fc       	sbrc	r13, 7
    4c90:	06 c0       	rjmp	.+12     	; 0x4c9e <vfprintf+0x3ce>
    4c92:	c1 14       	cp	r12, r1
    4c94:	d1 04       	cpc	r13, r1
    4c96:	41 f4       	brne	.+16     	; 0x4ca8 <vfprintf+0x3d8>
    4c98:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c9a:	e4 ff       	sbrs	r30, 4
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <vfprintf+0x3d8>
    4c9e:	d1 94       	neg	r13
    4ca0:	c1 94       	neg	r12
    4ca2:	d1 08       	sbc	r13, r1
    4ca4:	8d e2       	ldi	r24, 0x2D	; 45
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <vfprintf+0x3da>
    4ca8:	8b e2       	ldi	r24, 0x2B	; 43
    4caa:	b7 01       	movw	r22, r14
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4cb2:	80 e3       	ldi	r24, 0x30	; 48
    4cb4:	2a e0       	ldi	r18, 0x0A	; 10
    4cb6:	c2 16       	cp	r12, r18
    4cb8:	d1 04       	cpc	r13, r1
    4cba:	2c f0       	brlt	.+10     	; 0x4cc6 <vfprintf+0x3f6>
    4cbc:	8f 5f       	subi	r24, 0xFF	; 255
    4cbe:	fa e0       	ldi	r31, 0x0A	; 10
    4cc0:	cf 1a       	sub	r12, r31
    4cc2:	d1 08       	sbc	r13, r1
    4cc4:	f7 cf       	rjmp	.-18     	; 0x4cb4 <vfprintf+0x3e4>
    4cc6:	b7 01       	movw	r22, r14
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4cce:	b7 01       	movw	r22, r14
    4cd0:	c6 01       	movw	r24, r12
    4cd2:	c0 96       	adiw	r24, 0x30	; 48
    4cd4:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4cd8:	54 c1       	rjmp	.+680    	; 0x4f82 <vfprintf+0x6b2>
    4cda:	83 36       	cpi	r24, 0x63	; 99
    4cdc:	31 f0       	breq	.+12     	; 0x4cea <vfprintf+0x41a>
    4cde:	83 37       	cpi	r24, 0x73	; 115
    4ce0:	79 f0       	breq	.+30     	; 0x4d00 <vfprintf+0x430>
    4ce2:	83 35       	cpi	r24, 0x53	; 83
    4ce4:	09 f0       	breq	.+2      	; 0x4ce8 <vfprintf+0x418>
    4ce6:	56 c0       	rjmp	.+172    	; 0x4d94 <vfprintf+0x4c4>
    4ce8:	20 c0       	rjmp	.+64     	; 0x4d2a <vfprintf+0x45a>
    4cea:	56 01       	movw	r10, r12
    4cec:	32 e0       	ldi	r19, 0x02	; 2
    4cee:	a3 0e       	add	r10, r19
    4cf0:	b1 1c       	adc	r11, r1
    4cf2:	f6 01       	movw	r30, r12
    4cf4:	80 81       	ld	r24, Z
    4cf6:	89 83       	std	Y+1, r24	; 0x01
    4cf8:	01 e0       	ldi	r16, 0x01	; 1
    4cfa:	10 e0       	ldi	r17, 0x00	; 0
    4cfc:	63 01       	movw	r12, r6
    4cfe:	12 c0       	rjmp	.+36     	; 0x4d24 <vfprintf+0x454>
    4d00:	56 01       	movw	r10, r12
    4d02:	f2 e0       	ldi	r31, 0x02	; 2
    4d04:	af 0e       	add	r10, r31
    4d06:	b1 1c       	adc	r11, r1
    4d08:	f6 01       	movw	r30, r12
    4d0a:	c0 80       	ld	r12, Z
    4d0c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d0e:	96 fe       	sbrs	r9, 6
    4d10:	03 c0       	rjmp	.+6      	; 0x4d18 <vfprintf+0x448>
    4d12:	61 2f       	mov	r22, r17
    4d14:	70 e0       	ldi	r23, 0x00	; 0
    4d16:	02 c0       	rjmp	.+4      	; 0x4d1c <vfprintf+0x44c>
    4d18:	6f ef       	ldi	r22, 0xFF	; 255
    4d1a:	7f ef       	ldi	r23, 0xFF	; 255
    4d1c:	c6 01       	movw	r24, r12
    4d1e:	0e 94 1d ee 	call	0x1dc3a	; 0x1dc3a <strnlen>
    4d22:	8c 01       	movw	r16, r24
    4d24:	f9 2d       	mov	r31, r9
    4d26:	ff 77       	andi	r31, 0x7F	; 127
    4d28:	14 c0       	rjmp	.+40     	; 0x4d52 <vfprintf+0x482>
    4d2a:	56 01       	movw	r10, r12
    4d2c:	22 e0       	ldi	r18, 0x02	; 2
    4d2e:	a2 0e       	add	r10, r18
    4d30:	b1 1c       	adc	r11, r1
    4d32:	f6 01       	movw	r30, r12
    4d34:	c0 80       	ld	r12, Z
    4d36:	d1 80       	ldd	r13, Z+1	; 0x01
    4d38:	96 fe       	sbrs	r9, 6
    4d3a:	03 c0       	rjmp	.+6      	; 0x4d42 <vfprintf+0x472>
    4d3c:	61 2f       	mov	r22, r17
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <vfprintf+0x476>
    4d42:	6f ef       	ldi	r22, 0xFF	; 255
    4d44:	7f ef       	ldi	r23, 0xFF	; 255
    4d46:	c6 01       	movw	r24, r12
    4d48:	0e 94 0b ee 	call	0x1dc16	; 0x1dc16 <strnlen_P>
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	f9 2d       	mov	r31, r9
    4d50:	f0 68       	ori	r31, 0x80	; 128
    4d52:	9f 2e       	mov	r9, r31
    4d54:	f3 fd       	sbrc	r31, 3
    4d56:	1a c0       	rjmp	.+52     	; 0x4d8c <vfprintf+0x4bc>
    4d58:	85 2d       	mov	r24, r5
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	08 17       	cp	r16, r24
    4d5e:	19 07       	cpc	r17, r25
    4d60:	a8 f4       	brcc	.+42     	; 0x4d8c <vfprintf+0x4bc>
    4d62:	b7 01       	movw	r22, r14
    4d64:	80 e2       	ldi	r24, 0x20	; 32
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4d6c:	5a 94       	dec	r5
    4d6e:	f4 cf       	rjmp	.-24     	; 0x4d58 <vfprintf+0x488>
    4d70:	f6 01       	movw	r30, r12
    4d72:	97 fc       	sbrc	r9, 7
    4d74:	85 91       	lpm	r24, Z+
    4d76:	97 fe       	sbrs	r9, 7
    4d78:	81 91       	ld	r24, Z+
    4d7a:	6f 01       	movw	r12, r30
    4d7c:	b7 01       	movw	r22, r14
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4d84:	51 10       	cpse	r5, r1
    4d86:	5a 94       	dec	r5
    4d88:	01 50       	subi	r16, 0x01	; 1
    4d8a:	11 09       	sbc	r17, r1
    4d8c:	01 15       	cp	r16, r1
    4d8e:	11 05       	cpc	r17, r1
    4d90:	79 f7       	brne	.-34     	; 0x4d70 <vfprintf+0x4a0>
    4d92:	f7 c0       	rjmp	.+494    	; 0x4f82 <vfprintf+0x6b2>
    4d94:	84 36       	cpi	r24, 0x64	; 100
    4d96:	11 f0       	breq	.+4      	; 0x4d9c <vfprintf+0x4cc>
    4d98:	89 36       	cpi	r24, 0x69	; 105
    4d9a:	61 f5       	brne	.+88     	; 0x4df4 <vfprintf+0x524>
    4d9c:	56 01       	movw	r10, r12
    4d9e:	97 fe       	sbrs	r9, 7
    4da0:	09 c0       	rjmp	.+18     	; 0x4db4 <vfprintf+0x4e4>
    4da2:	24 e0       	ldi	r18, 0x04	; 4
    4da4:	a2 0e       	add	r10, r18
    4da6:	b1 1c       	adc	r11, r1
    4da8:	f6 01       	movw	r30, r12
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	82 81       	ldd	r24, Z+2	; 0x02
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	0a c0       	rjmp	.+20     	; 0x4dc8 <vfprintf+0x4f8>
    4db4:	f2 e0       	ldi	r31, 0x02	; 2
    4db6:	af 0e       	add	r10, r31
    4db8:	b1 1c       	adc	r11, r1
    4dba:	f6 01       	movw	r30, r12
    4dbc:	60 81       	ld	r22, Z
    4dbe:	71 81       	ldd	r23, Z+1	; 0x01
    4dc0:	07 2e       	mov	r0, r23
    4dc2:	00 0c       	add	r0, r0
    4dc4:	88 0b       	sbc	r24, r24
    4dc6:	99 0b       	sbc	r25, r25
    4dc8:	f9 2d       	mov	r31, r9
    4dca:	ff 76       	andi	r31, 0x6F	; 111
    4dcc:	9f 2e       	mov	r9, r31
    4dce:	97 ff       	sbrs	r25, 7
    4dd0:	09 c0       	rjmp	.+18     	; 0x4de4 <vfprintf+0x514>
    4dd2:	90 95       	com	r25
    4dd4:	80 95       	com	r24
    4dd6:	70 95       	com	r23
    4dd8:	61 95       	neg	r22
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255
    4ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    4dde:	9f 4f       	sbci	r25, 0xFF	; 255
    4de0:	f0 68       	ori	r31, 0x80	; 128
    4de2:	9f 2e       	mov	r9, r31
    4de4:	2a e0       	ldi	r18, 0x0A	; 10
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	a3 01       	movw	r20, r6
    4dea:	0e 94 28 ee 	call	0x1dc50	; 0x1dc50 <__ultoa_invert>
    4dee:	c8 2e       	mov	r12, r24
    4df0:	c6 18       	sub	r12, r6
    4df2:	3f c0       	rjmp	.+126    	; 0x4e72 <vfprintf+0x5a2>
    4df4:	09 2d       	mov	r16, r9
    4df6:	85 37       	cpi	r24, 0x75	; 117
    4df8:	21 f4       	brne	.+8      	; 0x4e02 <vfprintf+0x532>
    4dfa:	0f 7e       	andi	r16, 0xEF	; 239
    4dfc:	2a e0       	ldi	r18, 0x0A	; 10
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	1d c0       	rjmp	.+58     	; 0x4e3c <vfprintf+0x56c>
    4e02:	09 7f       	andi	r16, 0xF9	; 249
    4e04:	8f 36       	cpi	r24, 0x6F	; 111
    4e06:	91 f0       	breq	.+36     	; 0x4e2c <vfprintf+0x55c>
    4e08:	18 f4       	brcc	.+6      	; 0x4e10 <vfprintf+0x540>
    4e0a:	88 35       	cpi	r24, 0x58	; 88
    4e0c:	59 f0       	breq	.+22     	; 0x4e24 <vfprintf+0x554>
    4e0e:	c3 c0       	rjmp	.+390    	; 0x4f96 <vfprintf+0x6c6>
    4e10:	80 37       	cpi	r24, 0x70	; 112
    4e12:	19 f0       	breq	.+6      	; 0x4e1a <vfprintf+0x54a>
    4e14:	88 37       	cpi	r24, 0x78	; 120
    4e16:	11 f0       	breq	.+4      	; 0x4e1c <vfprintf+0x54c>
    4e18:	be c0       	rjmp	.+380    	; 0x4f96 <vfprintf+0x6c6>
    4e1a:	00 61       	ori	r16, 0x10	; 16
    4e1c:	04 ff       	sbrs	r16, 4
    4e1e:	09 c0       	rjmp	.+18     	; 0x4e32 <vfprintf+0x562>
    4e20:	04 60       	ori	r16, 0x04	; 4
    4e22:	07 c0       	rjmp	.+14     	; 0x4e32 <vfprintf+0x562>
    4e24:	94 fe       	sbrs	r9, 4
    4e26:	08 c0       	rjmp	.+16     	; 0x4e38 <vfprintf+0x568>
    4e28:	06 60       	ori	r16, 0x06	; 6
    4e2a:	06 c0       	rjmp	.+12     	; 0x4e38 <vfprintf+0x568>
    4e2c:	28 e0       	ldi	r18, 0x08	; 8
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	05 c0       	rjmp	.+10     	; 0x4e3c <vfprintf+0x56c>
    4e32:	20 e1       	ldi	r18, 0x10	; 16
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <vfprintf+0x56c>
    4e38:	20 e1       	ldi	r18, 0x10	; 16
    4e3a:	32 e0       	ldi	r19, 0x02	; 2
    4e3c:	56 01       	movw	r10, r12
    4e3e:	07 ff       	sbrs	r16, 7
    4e40:	09 c0       	rjmp	.+18     	; 0x4e54 <vfprintf+0x584>
    4e42:	84 e0       	ldi	r24, 0x04	; 4
    4e44:	a8 0e       	add	r10, r24
    4e46:	b1 1c       	adc	r11, r1
    4e48:	f6 01       	movw	r30, r12
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	08 c0       	rjmp	.+16     	; 0x4e64 <vfprintf+0x594>
    4e54:	f2 e0       	ldi	r31, 0x02	; 2
    4e56:	af 0e       	add	r10, r31
    4e58:	b1 1c       	adc	r11, r1
    4e5a:	f6 01       	movw	r30, r12
    4e5c:	60 81       	ld	r22, Z
    4e5e:	71 81       	ldd	r23, Z+1	; 0x01
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	a3 01       	movw	r20, r6
    4e66:	0e 94 28 ee 	call	0x1dc50	; 0x1dc50 <__ultoa_invert>
    4e6a:	c8 2e       	mov	r12, r24
    4e6c:	c6 18       	sub	r12, r6
    4e6e:	0f 77       	andi	r16, 0x7F	; 127
    4e70:	90 2e       	mov	r9, r16
    4e72:	96 fe       	sbrs	r9, 6
    4e74:	0b c0       	rjmp	.+22     	; 0x4e8c <vfprintf+0x5bc>
    4e76:	09 2d       	mov	r16, r9
    4e78:	0e 7f       	andi	r16, 0xFE	; 254
    4e7a:	c1 16       	cp	r12, r17
    4e7c:	50 f4       	brcc	.+20     	; 0x4e92 <vfprintf+0x5c2>
    4e7e:	94 fe       	sbrs	r9, 4
    4e80:	0a c0       	rjmp	.+20     	; 0x4e96 <vfprintf+0x5c6>
    4e82:	92 fc       	sbrc	r9, 2
    4e84:	08 c0       	rjmp	.+16     	; 0x4e96 <vfprintf+0x5c6>
    4e86:	09 2d       	mov	r16, r9
    4e88:	0e 7e       	andi	r16, 0xEE	; 238
    4e8a:	05 c0       	rjmp	.+10     	; 0x4e96 <vfprintf+0x5c6>
    4e8c:	dc 2c       	mov	r13, r12
    4e8e:	09 2d       	mov	r16, r9
    4e90:	03 c0       	rjmp	.+6      	; 0x4e98 <vfprintf+0x5c8>
    4e92:	dc 2c       	mov	r13, r12
    4e94:	01 c0       	rjmp	.+2      	; 0x4e98 <vfprintf+0x5c8>
    4e96:	d1 2e       	mov	r13, r17
    4e98:	04 ff       	sbrs	r16, 4
    4e9a:	0d c0       	rjmp	.+26     	; 0x4eb6 <vfprintf+0x5e6>
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	ec 0d       	add	r30, r12
    4ea0:	f1 1d       	adc	r31, r1
    4ea2:	80 81       	ld	r24, Z
    4ea4:	80 33       	cpi	r24, 0x30	; 48
    4ea6:	11 f4       	brne	.+4      	; 0x4eac <vfprintf+0x5dc>
    4ea8:	09 7e       	andi	r16, 0xE9	; 233
    4eaa:	09 c0       	rjmp	.+18     	; 0x4ebe <vfprintf+0x5ee>
    4eac:	02 ff       	sbrs	r16, 2
    4eae:	06 c0       	rjmp	.+12     	; 0x4ebc <vfprintf+0x5ec>
    4eb0:	d3 94       	inc	r13
    4eb2:	d3 94       	inc	r13
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <vfprintf+0x5ee>
    4eb6:	80 2f       	mov	r24, r16
    4eb8:	86 78       	andi	r24, 0x86	; 134
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <vfprintf+0x5ee>
    4ebc:	d3 94       	inc	r13
    4ebe:	03 fd       	sbrc	r16, 3
    4ec0:	11 c0       	rjmp	.+34     	; 0x4ee4 <vfprintf+0x614>
    4ec2:	00 ff       	sbrs	r16, 0
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <vfprintf+0x602>
    4ec6:	1c 2d       	mov	r17, r12
    4ec8:	d5 14       	cp	r13, r5
    4eca:	80 f4       	brcc	.+32     	; 0x4eec <vfprintf+0x61c>
    4ecc:	15 0d       	add	r17, r5
    4ece:	1d 19       	sub	r17, r13
    4ed0:	0d c0       	rjmp	.+26     	; 0x4eec <vfprintf+0x61c>
    4ed2:	d5 14       	cp	r13, r5
    4ed4:	58 f4       	brcc	.+22     	; 0x4eec <vfprintf+0x61c>
    4ed6:	b7 01       	movw	r22, r14
    4ed8:	80 e2       	ldi	r24, 0x20	; 32
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4ee0:	d3 94       	inc	r13
    4ee2:	f7 cf       	rjmp	.-18     	; 0x4ed2 <vfprintf+0x602>
    4ee4:	d5 14       	cp	r13, r5
    4ee6:	10 f4       	brcc	.+4      	; 0x4eec <vfprintf+0x61c>
    4ee8:	5d 18       	sub	r5, r13
    4eea:	01 c0       	rjmp	.+2      	; 0x4eee <vfprintf+0x61e>
    4eec:	51 2c       	mov	r5, r1
    4eee:	04 ff       	sbrs	r16, 4
    4ef0:	10 c0       	rjmp	.+32     	; 0x4f12 <vfprintf+0x642>
    4ef2:	b7 01       	movw	r22, r14
    4ef4:	80 e3       	ldi	r24, 0x30	; 48
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4efc:	02 ff       	sbrs	r16, 2
    4efe:	17 c0       	rjmp	.+46     	; 0x4f2e <vfprintf+0x65e>
    4f00:	01 fd       	sbrc	r16, 1
    4f02:	03 c0       	rjmp	.+6      	; 0x4f0a <vfprintf+0x63a>
    4f04:	88 e7       	ldi	r24, 0x78	; 120
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <vfprintf+0x63e>
    4f0a:	88 e5       	ldi	r24, 0x58	; 88
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	b7 01       	movw	r22, r14
    4f10:	0c c0       	rjmp	.+24     	; 0x4f2a <vfprintf+0x65a>
    4f12:	80 2f       	mov	r24, r16
    4f14:	86 78       	andi	r24, 0x86	; 134
    4f16:	59 f0       	breq	.+22     	; 0x4f2e <vfprintf+0x65e>
    4f18:	01 ff       	sbrs	r16, 1
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <vfprintf+0x650>
    4f1c:	8b e2       	ldi	r24, 0x2B	; 43
    4f1e:	01 c0       	rjmp	.+2      	; 0x4f22 <vfprintf+0x652>
    4f20:	80 e2       	ldi	r24, 0x20	; 32
    4f22:	07 fd       	sbrc	r16, 7
    4f24:	8d e2       	ldi	r24, 0x2D	; 45
    4f26:	b7 01       	movw	r22, r14
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4f2e:	c1 16       	cp	r12, r17
    4f30:	38 f4       	brcc	.+14     	; 0x4f40 <vfprintf+0x670>
    4f32:	b7 01       	movw	r22, r14
    4f34:	80 e3       	ldi	r24, 0x30	; 48
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4f3c:	11 50       	subi	r17, 0x01	; 1
    4f3e:	f7 cf       	rjmp	.-18     	; 0x4f2e <vfprintf+0x65e>
    4f40:	ca 94       	dec	r12
    4f42:	f3 01       	movw	r30, r6
    4f44:	ec 0d       	add	r30, r12
    4f46:	f1 1d       	adc	r31, r1
    4f48:	80 81       	ld	r24, Z
    4f4a:	b7 01       	movw	r22, r14
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4f52:	c1 10       	cpse	r12, r1
    4f54:	f5 cf       	rjmp	.-22     	; 0x4f40 <vfprintf+0x670>
    4f56:	15 c0       	rjmp	.+42     	; 0x4f82 <vfprintf+0x6b2>
    4f58:	f4 e0       	ldi	r31, 0x04	; 4
    4f5a:	f5 15       	cp	r31, r5
    4f5c:	60 f5       	brcc	.+88     	; 0x4fb6 <vfprintf+0x6e6>
    4f5e:	84 e0       	ldi	r24, 0x04	; 4
    4f60:	58 1a       	sub	r5, r24
    4f62:	93 fe       	sbrs	r9, 3
    4f64:	1f c0       	rjmp	.+62     	; 0x4fa4 <vfprintf+0x6d4>
    4f66:	01 11       	cpse	r16, r1
    4f68:	27 c0       	rjmp	.+78     	; 0x4fb8 <vfprintf+0x6e8>
    4f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f6c:	23 ff       	sbrs	r18, 3
    4f6e:	2a c0       	rjmp	.+84     	; 0x4fc4 <vfprintf+0x6f4>
    4f70:	00 ed       	ldi	r16, 0xD0	; 208
    4f72:	11 e0       	ldi	r17, 0x01	; 1
    4f74:	39 2d       	mov	r19, r9
    4f76:	30 71       	andi	r19, 0x10	; 16
    4f78:	93 2e       	mov	r9, r19
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	84 91       	lpm	r24, Z
    4f7e:	81 11       	cpse	r24, r1
    4f80:	24 c0       	rjmp	.+72     	; 0x4fca <vfprintf+0x6fa>
    4f82:	55 20       	and	r5, r5
    4f84:	09 f4       	brne	.+2      	; 0x4f88 <vfprintf+0x6b8>
    4f86:	e4 cc       	rjmp	.-1592   	; 0x4950 <vfprintf+0x80>
    4f88:	b7 01       	movw	r22, r14
    4f8a:	80 e2       	ldi	r24, 0x20	; 32
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4f92:	5a 94       	dec	r5
    4f94:	f6 cf       	rjmp	.-20     	; 0x4f82 <vfprintf+0x6b2>
    4f96:	f7 01       	movw	r30, r14
    4f98:	86 81       	ldd	r24, Z+6	; 0x06
    4f9a:	97 81       	ldd	r25, Z+7	; 0x07
    4f9c:	26 c0       	rjmp	.+76     	; 0x4fea <vfprintf+0x71a>
    4f9e:	8f ef       	ldi	r24, 0xFF	; 255
    4fa0:	9f ef       	ldi	r25, 0xFF	; 255
    4fa2:	23 c0       	rjmp	.+70     	; 0x4fea <vfprintf+0x71a>
    4fa4:	b7 01       	movw	r22, r14
    4fa6:	80 e2       	ldi	r24, 0x20	; 32
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4fae:	5a 94       	dec	r5
    4fb0:	51 10       	cpse	r5, r1
    4fb2:	f8 cf       	rjmp	.-16     	; 0x4fa4 <vfprintf+0x6d4>
    4fb4:	d8 cf       	rjmp	.-80     	; 0x4f66 <vfprintf+0x696>
    4fb6:	51 2c       	mov	r5, r1
    4fb8:	b7 01       	movw	r22, r14
    4fba:	80 2f       	mov	r24, r16
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4fc2:	d3 cf       	rjmp	.-90     	; 0x4f6a <vfprintf+0x69a>
    4fc4:	04 ed       	ldi	r16, 0xD4	; 212
    4fc6:	11 e0       	ldi	r17, 0x01	; 1
    4fc8:	d5 cf       	rjmp	.-86     	; 0x4f74 <vfprintf+0x6a4>
    4fca:	91 10       	cpse	r9, r1
    4fcc:	80 52       	subi	r24, 0x20	; 32
    4fce:	b7 01       	movw	r22, r14
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <fputc>
    4fd6:	0f 5f       	subi	r16, 0xFF	; 255
    4fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fda:	cf cf       	rjmp	.-98     	; 0x4f7a <vfprintf+0x6aa>
    4fdc:	23 e0       	ldi	r18, 0x03	; 3
    4fde:	25 15       	cp	r18, r5
    4fe0:	10 f4       	brcc	.+4      	; 0x4fe6 <vfprintf+0x716>
    4fe2:	83 e0       	ldi	r24, 0x03	; 3
    4fe4:	bd cf       	rjmp	.-134    	; 0x4f60 <vfprintf+0x690>
    4fe6:	51 2c       	mov	r5, r1
    4fe8:	c0 cf       	rjmp	.-128    	; 0x4f6a <vfprintf+0x69a>
    4fea:	60 96       	adiw	r28, 0x10	; 16
    4fec:	0f b6       	in	r0, 0x3f	; 63
    4fee:	f8 94       	cli
    4ff0:	de bf       	out	0x3e, r29	; 62
    4ff2:	0f be       	out	0x3f, r0	; 63
    4ff4:	cd bf       	out	0x3d, r28	; 61
    4ff6:	df 91       	pop	r29
    4ff8:	cf 91       	pop	r28
    4ffa:	1f 91       	pop	r17
    4ffc:	0f 91       	pop	r16
    4ffe:	ff 90       	pop	r15
    5000:	ef 90       	pop	r14
    5002:	df 90       	pop	r13
    5004:	cf 90       	pop	r12
    5006:	bf 90       	pop	r11
    5008:	af 90       	pop	r10
    500a:	9f 90       	pop	r9
    500c:	8f 90       	pop	r8
    500e:	7f 90       	pop	r7
    5010:	6f 90       	pop	r6
    5012:	5f 90       	pop	r5
    5014:	4f 90       	pop	r4
    5016:	3f 90       	pop	r3
    5018:	2f 90       	pop	r2
    501a:	08 95       	ret

0000501c <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    501c:	e8 2f       	mov	r30, r24
    501e:	e6 95       	lsr	r30
    5020:	e6 95       	lsr	r30
    5022:	e6 95       	lsr	r30
    5024:	93 e0       	ldi	r25, 0x03	; 3
    5026:	e9 9f       	mul	r30, r25
    5028:	f0 01       	movw	r30, r0
    502a:	11 24       	eor	r1, r1
    502c:	32 a1       	ldd	r19, Z+34	; 0x22
    502e:	28 2f       	mov	r18, r24
    5030:	27 70       	andi	r18, 0x07	; 7
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	01 c0       	rjmp	.+2      	; 0x503a <chip_select+0x1e>
    5038:	88 0f       	add	r24, r24
    503a:	2a 95       	dec	r18
    503c:	ea f7       	brpl	.-6      	; 0x5038 <chip_select+0x1c>
    503e:	98 2f       	mov	r25, r24
    5040:	90 95       	com	r25
    5042:	93 23       	and	r25, r19
    5044:	92 a3       	std	Z+34, r25	; 0x22
    5046:	91 a1       	ldd	r25, Z+33	; 0x21
    5048:	89 2b       	or	r24, r25
    504a:	81 a3       	std	Z+33, r24	; 0x21
    504c:	08 95       	ret

0000504e <chip_deselect>:
    504e:	e8 2f       	mov	r30, r24
    5050:	e6 95       	lsr	r30
    5052:	e6 95       	lsr	r30
    5054:	e6 95       	lsr	r30
    5056:	93 e0       	ldi	r25, 0x03	; 3
    5058:	e9 9f       	mul	r30, r25
    505a:	f0 01       	movw	r30, r0
    505c:	11 24       	eor	r1, r1
    505e:	32 a1       	ldd	r19, Z+34	; 0x22
    5060:	28 2f       	mov	r18, r24
    5062:	27 70       	andi	r18, 0x07	; 7
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	01 c0       	rjmp	.+2      	; 0x506c <chip_deselect+0x1e>
    506a:	88 0f       	add	r24, r24
    506c:	2a 95       	dec	r18
    506e:	ea f7       	brpl	.-6      	; 0x506a <chip_deselect+0x1c>
    5070:	93 2f       	mov	r25, r19
    5072:	98 2b       	or	r25, r24
    5074:	92 a3       	std	Z+34, r25	; 0x22
    5076:	91 a1       	ldd	r25, Z+33	; 0x21
    5078:	89 2b       	or	r24, r25
    507a:	81 a3       	std	Z+33, r24	; 0x21
    507c:	08 95       	ret

0000507e <chip_select_init>:
    507e:	e7 cf       	rjmp	.-50     	; 0x504e <chip_deselect>
    5080:	08 95       	ret

00005082 <spi_end>:
    5082:	cf 93       	push	r28
    5084:	c8 2f       	mov	r28, r24
    5086:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    508a:	8c 17       	cp	r24, r28
    508c:	a9 f0       	breq	.+42     	; 0x50b8 <spi_end+0x36>
    508e:	8f 3f       	cpi	r24, 0xFF	; 255
    5090:	99 f0       	breq	.+38     	; 0x50b8 <spi_end+0x36>
    5092:	1f 92       	push	r1
    5094:	cf 93       	push	r28
    5096:	1f 92       	push	r1
    5098:	8f 93       	push	r24
    509a:	82 ed       	ldi	r24, 0xD2	; 210
    509c:	92 e0       	ldi	r25, 0x02	; 2
    509e:	1f 92       	push	r1
    50a0:	9f 93       	push	r25
    50a2:	8f 93       	push	r24
    50a4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    50a8:	8d b7       	in	r24, 0x3d	; 61
    50aa:	9e b7       	in	r25, 0x3e	; 62
    50ac:	07 96       	adiw	r24, 0x07	; 7
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	9e bf       	out	0x3e, r25	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	8d bf       	out	0x3d, r24	; 61
    50b8:	8c 2f       	mov	r24, r28
    50ba:	c9 df       	rcall	.-110    	; 0x504e <chip_deselect>
    50bc:	8f ef       	ldi	r24, 0xFF	; 255
    50be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50c6:	7a c4       	rjmp	.+2292   	; 0x59bc <SPI0_TX>
    50c8:	08 95       	ret

000050ca <spi_RX_buffer>:
    50ca:	a2 c4       	rjmp	.+2372   	; 0x5a10 <SPI0_RX>
    50cc:	08 95       	ret

000050ce <spi_TX>:
    50ce:	a1 e0       	ldi	r26, 0x01	; 1
    50d0:	b0 e0       	ldi	r27, 0x00	; 0
    50d2:	ed e6       	ldi	r30, 0x6D	; 109
    50d4:	f8 e2       	ldi	r31, 0x28	; 40
    50d6:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	61 e0       	ldi	r22, 0x01	; 1
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	ce 01       	movw	r24, r28
    50e2:	01 96       	adiw	r24, 0x01	; 1
    50e4:	6b d4       	rcall	.+2262   	; 0x59bc <SPI0_TX>
    50e6:	21 96       	adiw	r28, 0x01	; 1
    50e8:	e2 e0       	ldi	r30, 0x02	; 2
    50ea:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000050ee <spi_init>:
    50ee:	cf 92       	push	r12
    50f0:	df 92       	push	r13
    50f2:	ef 92       	push	r14
    50f4:	ff 92       	push	r15
    50f6:	6b 01       	movw	r12, r22
    50f8:	7c 01       	movw	r14, r24
    50fa:	84 2f       	mov	r24, r20
    50fc:	a8 df       	rcall	.-176    	; 0x504e <chip_deselect>
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5104:	c7 01       	movw	r24, r14
    5106:	b6 01       	movw	r22, r12
    5108:	34 d4       	rcall	.+2152   	; 0x5972 <SPI0_Init>
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	f5 d3       	rcall	.+2026   	; 0x58fa <SPI0_Mode>
    5110:	8f ef       	ldi	r24, 0xFF	; 255
    5112:	dd df       	rcall	.-70     	; 0x50ce <spi_TX>
    5114:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    5118:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    511c:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5120:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    5124:	ff 90       	pop	r15
    5126:	ef 90       	pop	r14
    5128:	df 90       	pop	r13
    512a:	cf 90       	pop	r12
    512c:	08 95       	ret

0000512e <spi_begin>:
    512e:	cf 92       	push	r12
    5130:	df 92       	push	r13
    5132:	ef 92       	push	r14
    5134:	ff 92       	push	r15
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	6b 01       	movw	r12, r22
    513c:	7c 01       	movw	r14, r24
    513e:	ea 01       	movw	r28, r20
    5140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5144:	8f 3f       	cpi	r24, 0xFF	; 255
    5146:	99 f0       	breq	.+38     	; 0x516e <spi_begin+0x40>
    5148:	df 93       	push	r29
    514a:	4f 93       	push	r20
    514c:	1f 92       	push	r1
    514e:	8f 93       	push	r24
    5150:	80 ef       	ldi	r24, 0xF0	; 240
    5152:	92 e0       	ldi	r25, 0x02	; 2
    5154:	1f 92       	push	r1
    5156:	9f 93       	push	r25
    5158:	8f 93       	push	r24
    515a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    515e:	8d b7       	in	r24, 0x3d	; 61
    5160:	9e b7       	in	r25, 0x3e	; 62
    5162:	07 96       	adiw	r24, 0x07	; 7
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	9e bf       	out	0x3e, r25	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	8d bf       	out	0x3d, r24	; 61
    516e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5176:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    517a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    517e:	8c 15       	cp	r24, r12
    5180:	9d 05       	cpc	r25, r13
    5182:	ae 05       	cpc	r26, r14
    5184:	bf 05       	cpc	r27, r15
    5186:	21 f0       	breq	.+8      	; 0x5190 <spi_begin+0x62>
    5188:	ae 01       	movw	r20, r28
    518a:	c7 01       	movw	r24, r14
    518c:	b6 01       	movw	r22, r12
    518e:	af df       	rcall	.-162    	; 0x50ee <spi_init>
    5190:	8c 2f       	mov	r24, r28
    5192:	44 df       	rcall	.-376    	; 0x501c <chip_select>
    5194:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	ff 90       	pop	r15
    519e:	ef 90       	pop	r14
    51a0:	df 90       	pop	r13
    51a2:	cf 90       	pop	r12
    51a4:	08 95       	ret

000051a6 <spi_TXRX>:
    51a6:	a1 e0       	ldi	r26, 0x01	; 1
    51a8:	b0 e0       	ldi	r27, 0x00	; 0
    51aa:	e9 ed       	ldi	r30, 0xD9	; 217
    51ac:	f8 e2       	ldi	r31, 0x28	; 40
    51ae:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	61 e0       	ldi	r22, 0x01	; 1
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	ce 01       	movw	r24, r28
    51ba:	01 96       	adiw	r24, 0x01	; 1
    51bc:	13 d4       	rcall	.+2086   	; 0x59e4 <SPI0_TXRX>
    51be:	89 81       	ldd	r24, Y+1	; 0x01
    51c0:	21 96       	adiw	r28, 0x01	; 1
    51c2:	e2 e0       	ldi	r30, 0x02	; 2
    51c4:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000051c8 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51c8:	a2 e0       	ldi	r26, 0x02	; 2
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	ea ee       	ldi	r30, 0xEA	; 234
    51ce:	f8 e2       	ldi	r31, 0x28	; 40
    51d0:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51d4:	20 91 e7 1e 	lds	r18, 0x1EE7	; 0x801ee7 <__brkval>
    51d8:	30 91 e8 1e 	lds	r19, 0x1EE8	; 0x801ee8 <__brkval+0x1>
    51dc:	21 15       	cp	r18, r1
    51de:	31 05       	cpc	r19, r1
    51e0:	11 f4       	brne	.+4      	; 0x51e6 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51e2:	2b ee       	ldi	r18, 0xEB	; 235
    51e4:	3e e1       	ldi	r19, 0x1E	; 30

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51e6:	ce 01       	movw	r24, r28
    51e8:	01 96       	adiw	r24, 0x01	; 1
    51ea:	82 1b       	sub	r24, r18
    51ec:	93 0b       	sbc	r25, r19
    51ee:	22 96       	adiw	r28, 0x02	; 2
    51f0:	e2 e0       	ldi	r30, 0x02	; 2
    51f2:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000051f6 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    51f6:	a2 e0       	ldi	r26, 0x02	; 2
    51f8:	b0 e0       	ldi	r27, 0x00	; 0
    51fa:	e1 e0       	ldi	r30, 0x01	; 1
    51fc:	f9 e2       	ldi	r31, 0x29	; 41
    51fe:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5202:	e2 df       	rcall	.-60     	; 0x51c8 <freeRam>
    5204:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    5206:	9a 83       	std	Y+2, r25	; 0x02
    5208:	9f 93       	push	r25
    520a:	8f 93       	push	r24
    520c:	87 e1       	ldi	r24, 0x17	; 23
    520e:	94 e0       	ldi	r25, 0x04	; 4
    5210:	1f 92       	push	r1
    5212:	9f 93       	push	r25
    5214:	8f 93       	push	r24
    5216:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	90 e4       	ldi	r25, 0x40	; 64
    521e:	9f 93       	push	r25
    5220:	8f 93       	push	r24
    5222:	84 e0       	ldi	r24, 0x04	; 4
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	1f 92       	push	r1
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5230:	ce 01       	movw	r24, r28
    5232:	01 96       	adiw	r24, 0x01	; 1
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	81 ef       	ldi	r24, 0xF1	; 241
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5246:	8b ee       	ldi	r24, 0xEB	; 235
    5248:	9e e1       	ldi	r25, 0x1E	; 30
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	88 e1       	ldi	r24, 0x18	; 24
    5250:	97 e1       	ldi	r25, 0x17	; 23
    5252:	9f 93       	push	r25
    5254:	8f 93       	push	r24
    5256:	83 ed       	ldi	r24, 0xD3	; 211
    5258:	93 e0       	ldi	r25, 0x03	; 3
    525a:	1f 92       	push	r1
    525c:	9f 93       	push	r25
    525e:	8f 93       	push	r24
    5260:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    5264:	88 e1       	ldi	r24, 0x18	; 24
    5266:	97 e1       	ldi	r25, 0x17	; 23
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	91 e0       	ldi	r25, 0x01	; 1
    5270:	9f 93       	push	r25
    5272:	8f 93       	push	r24
    5274:	85 eb       	ldi	r24, 0xB5	; 181
    5276:	93 e0       	ldi	r25, 0x03	; 3
    5278:	1f 92       	push	r1
    527a:	9f 93       	push	r25
    527c:	8f 93       	push	r24
    527e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	8b ee       	ldi	r24, 0xEB	; 235
    528c:	9e e1       	ldi	r25, 0x1E	; 30
    528e:	9f 93       	push	r25
    5290:	8f 93       	push	r24
    5292:	87 e9       	ldi	r24, 0x97	; 151
    5294:	93 e0       	ldi	r25, 0x03	; 3
    5296:	1f 92       	push	r1
    5298:	9f 93       	push	r25
    529a:	8f 93       	push	r24
    529c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52a0:	0f b6       	in	r0, 0x3f	; 63
    52a2:	f8 94       	cli
    52a4:	de bf       	out	0x3e, r29	; 62
    52a6:	0f be       	out	0x3f, r0	; 63
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <__malloc_heap_end+0x1>
    52ae:	8f 93       	push	r24
    52b0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__malloc_heap_end>
    52b4:	8f 93       	push	r24
    52b6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <__malloc_heap_start+0x1>
    52ba:	8f 93       	push	r24
    52bc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__malloc_heap_start>
    52c0:	8f 93       	push	r24
    52c2:	89 e7       	ldi	r24, 0x79	; 121
    52c4:	93 e0       	ldi	r25, 0x03	; 3
    52c6:	1f 92       	push	r1
    52c8:	9f 93       	push	r25
    52ca:	8f 93       	push	r24
    52cc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52d0:	80 91 e8 1e 	lds	r24, 0x1EE8	; 0x801ee8 <__brkval+0x1>
    52d4:	8f 93       	push	r24
    52d6:	80 91 e7 1e 	lds	r24, 0x1EE7	; 0x801ee7 <__brkval>
    52da:	8f 93       	push	r24
    52dc:	85 e6       	ldi	r24, 0x65	; 101
    52de:	93 e0       	ldi	r25, 0x03	; 3
    52e0:	1f 92       	push	r1
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

}
    52ea:	0f b6       	in	r0, 0x3f	; 63
    52ec:	f8 94       	cli
    52ee:	de bf       	out	0x3e, r29	; 62
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	cd bf       	out	0x3d, r28	; 61
    52f4:	22 96       	adiw	r28, 0x02	; 2
    52f6:	e2 e0       	ldi	r30, 0x02	; 2
    52f8:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000052fc <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    52fc:	ef 92       	push	r14
    52fe:	ff 92       	push	r15
    5300:	0f 93       	push	r16
    5302:	1f 93       	push	r17
    5304:	cf 93       	push	r28
    5306:	df 93       	push	r29
    5308:	18 2f       	mov	r17, r24
    530a:	09 2f       	mov	r16, r25
    530c:	f6 2e       	mov	r15, r22
    530e:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5310:	0e 94 f8 eb 	call	0x1d7f0	; 0x1d7f0 <calloc>
    5314:	ec 01       	movw	r28, r24
	if(!p)
    5316:	89 2b       	or	r24, r25
    5318:	99 f4       	brne	.+38     	; 0x5340 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    531a:	ef 92       	push	r14
    531c:	ff 92       	push	r15
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	8a e4       	ldi	r24, 0x4A	; 74
    5324:	93 e0       	ldi	r25, 0x03	; 3
    5326:	1f 92       	push	r1
    5328:	9f 93       	push	r25
    532a:	8f 93       	push	r24
    532c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    5330:	8d b7       	in	r24, 0x3d	; 61
    5332:	9e b7       	in	r25, 0x3e	; 62
    5334:	07 96       	adiw	r24, 0x07	; 7
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	f8 94       	cli
    533a:	9e bf       	out	0x3e, r25	; 62
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5340:	ce 01       	movw	r24, r28
    5342:	cd b7       	in	r28, 0x3d	; 61
    5344:	de b7       	in	r29, 0x3e	; 62
    5346:	e6 e0       	ldi	r30, 0x06	; 6
    5348:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000534c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    534c:	0f 93       	push	r16
    534e:	1f 93       	push	r17
    5350:	cf 93       	push	r28
    5352:	df 93       	push	r29
    5354:	18 2f       	mov	r17, r24
    5356:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	70 e0       	ldi	r23, 0x00	; 0
    535c:	0e 94 f8 eb 	call	0x1d7f0	; 0x1d7f0 <calloc>
    5360:	ec 01       	movw	r28, r24
    if(!p)
    5362:	89 2b       	or	r24, r25
    5364:	71 f4       	brne	.+28     	; 0x5382 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	82 e3       	ldi	r24, 0x32	; 50
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	1f 92       	push	r1
    5370:	9f 93       	push	r25
    5372:	8f 93       	push	r24
    5374:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	0f 90       	pop	r0
    }
    return(p);
}
    5382:	ce 01       	movw	r24, r28
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	1f 91       	pop	r17
    538a:	0f 91       	pop	r16
    538c:	08 95       	ret

0000538e <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    538e:	00 97       	sbiw	r24, 0x00	; 0
    5390:	39 f1       	breq	.+78     	; 0x53e0 <safefree+0x52>
        return;

    if(__brkval)
    5392:	20 91 e7 1e 	lds	r18, 0x1EE7	; 0x801ee7 <__brkval>
    5396:	30 91 e8 1e 	lds	r19, 0x1EE8	; 0x801ee8 <__brkval+0x1>
    539a:	21 15       	cp	r18, r1
    539c:	31 05       	cpc	r19, r1
    539e:	11 f4       	brne	.+4      	; 0x53a4 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53a0:	2b ee       	ldi	r18, 0xEB	; 235
    53a2:	3e e1       	ldi	r19, 0x1E	; 30

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53a4:	4e e1       	ldi	r20, 0x1E	; 30
    53a6:	8b 3e       	cpi	r24, 0xEB	; 235
    53a8:	94 07       	cpc	r25, r20
    53aa:	30 f0       	brcs	.+12     	; 0x53b8 <safefree+0x2a>
    53ac:	28 17       	cp	r18, r24
    53ae:	39 07       	cpc	r19, r25
    53b0:	18 f0       	brcs	.+6      	; 0x53b8 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53b2:	0c 94 aa ec 	jmp	0x1d954	; 0x1d954 <free>
        return;
    53b6:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53b8:	3f 93       	push	r19
    53ba:	2f 93       	push	r18
    53bc:	9f 93       	push	r25
    53be:	8f 93       	push	r24
    53c0:	8d e0       	ldi	r24, 0x0D	; 13
    53c2:	93 e0       	ldi	r25, 0x03	; 3
    53c4:	1f 92       	push	r1
    53c6:	9f 93       	push	r25
    53c8:	8f 93       	push	r24
    53ca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    PrintFree();
    53ce:	13 df       	rcall	.-474    	; 0x51f6 <PrintFree>
    53d0:	8d b7       	in	r24, 0x3d	; 61
    53d2:	9e b7       	in	r25, 0x3e	; 62
    53d4:	07 96       	adiw	r24, 0x07	; 7
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	9e bf       	out	0x3e, r25	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	8d bf       	out	0x3d, r24	; 61
    53e0:	08 95       	ret

000053e2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53e2:	64 36       	cpi	r22, 0x64	; 100
    53e4:	71 05       	cpc	r23, r1
    53e6:	81 05       	cpc	r24, r1
    53e8:	91 05       	cpc	r25, r1
    53ea:	58 f0       	brcs	.+22     	; 0x5402 <delayus+0x20>
    {
        us -= 100U;
    53ec:	64 56       	subi	r22, 0x64	; 100
    53ee:	71 09       	sbc	r23, r1
    53f0:	81 09       	sbc	r24, r1
    53f2:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    53f4:	e3 ef       	ldi	r30, 0xF3	; 243
    53f6:	f1 e0       	ldi	r31, 0x01	; 1
    53f8:	31 97       	sbiw	r30, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <delayus+0x16>
    53fc:	00 c0       	rjmp	.+0      	; 0x53fe <delayus+0x1c>
    53fe:	00 00       	nop
    5400:	f0 cf       	rjmp	.-32     	; 0x53e2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5402:	6a 30       	cpi	r22, 0x0A	; 10
    5404:	71 05       	cpc	r23, r1
    5406:	81 05       	cpc	r24, r1
    5408:	91 05       	cpc	r25, r1
    540a:	48 f0       	brcs	.+18     	; 0x541e <delayus+0x3c>
    {
        us -= 10U;
    540c:	6a 50       	subi	r22, 0x0A	; 10
    540e:	71 09       	sbc	r23, r1
    5410:	81 09       	sbc	r24, r1
    5412:	91 09       	sbc	r25, r1
    5414:	f2 e4       	ldi	r31, 0x42	; 66
    5416:	fa 95       	dec	r31
    5418:	f1 f7       	brne	.-4      	; 0x5416 <delayus+0x34>
    541a:	00 c0       	rjmp	.+0      	; 0x541c <delayus+0x3a>
    541c:	f2 cf       	rjmp	.-28     	; 0x5402 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    541e:	61 15       	cp	r22, r1
    5420:	71 05       	cpc	r23, r1
    5422:	81 05       	cpc	r24, r1
    5424:	91 05       	cpc	r25, r1
    5426:	49 f0       	breq	.+18     	; 0x543a <delayus+0x58>
    {
        --us;
    5428:	61 50       	subi	r22, 0x01	; 1
    542a:	71 09       	sbc	r23, r1
    542c:	81 09       	sbc	r24, r1
    542e:	91 09       	sbc	r25, r1
    5430:	26 e0       	ldi	r18, 0x06	; 6
    5432:	2a 95       	dec	r18
    5434:	f1 f7       	brne	.-4      	; 0x5432 <delayus+0x50>
    5436:	00 c0       	rjmp	.+0      	; 0x5438 <delayus+0x56>
    5438:	f2 cf       	rjmp	.-28     	; 0x541e <delayus+0x3c>
        _delay_us(1);
    }
}
    543a:	08 95       	ret

0000543c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    543c:	61 15       	cp	r22, r1
    543e:	71 05       	cpc	r23, r1
    5440:	81 05       	cpc	r24, r1
    5442:	91 05       	cpc	r25, r1
    5444:	09 f4       	brne	.+2      	; 0x5448 <delayms+0xc>
    5446:	41 c0       	rjmp	.+130    	; 0x54ca <delayms+0x8e>
    5448:	e3 ef       	ldi	r30, 0xF3	; 243
    544a:	f1 e0       	ldi	r31, 0x01	; 1
    544c:	31 97       	sbiw	r30, 0x01	; 1
    544e:	f1 f7       	brne	.-4      	; 0x544c <delayms+0x10>
    5450:	00 c0       	rjmp	.+0      	; 0x5452 <delayms+0x16>
    5452:	00 00       	nop
    5454:	e3 ef       	ldi	r30, 0xF3	; 243
    5456:	f1 e0       	ldi	r31, 0x01	; 1
    5458:	31 97       	sbiw	r30, 0x01	; 1
    545a:	f1 f7       	brne	.-4      	; 0x5458 <delayms+0x1c>
    545c:	00 c0       	rjmp	.+0      	; 0x545e <delayms+0x22>
    545e:	00 00       	nop
    5460:	e3 ef       	ldi	r30, 0xF3	; 243
    5462:	f1 e0       	ldi	r31, 0x01	; 1
    5464:	31 97       	sbiw	r30, 0x01	; 1
    5466:	f1 f7       	brne	.-4      	; 0x5464 <delayms+0x28>
    5468:	00 c0       	rjmp	.+0      	; 0x546a <delayms+0x2e>
    546a:	00 00       	nop
    546c:	e3 ef       	ldi	r30, 0xF3	; 243
    546e:	f1 e0       	ldi	r31, 0x01	; 1
    5470:	31 97       	sbiw	r30, 0x01	; 1
    5472:	f1 f7       	brne	.-4      	; 0x5470 <delayms+0x34>
    5474:	00 c0       	rjmp	.+0      	; 0x5476 <delayms+0x3a>
    5476:	00 00       	nop
    5478:	e3 ef       	ldi	r30, 0xF3	; 243
    547a:	f1 e0       	ldi	r31, 0x01	; 1
    547c:	31 97       	sbiw	r30, 0x01	; 1
    547e:	f1 f7       	brne	.-4      	; 0x547c <delayms+0x40>
    5480:	00 c0       	rjmp	.+0      	; 0x5482 <delayms+0x46>
    5482:	00 00       	nop
    5484:	e3 ef       	ldi	r30, 0xF3	; 243
    5486:	f1 e0       	ldi	r31, 0x01	; 1
    5488:	31 97       	sbiw	r30, 0x01	; 1
    548a:	f1 f7       	brne	.-4      	; 0x5488 <delayms+0x4c>
    548c:	00 c0       	rjmp	.+0      	; 0x548e <delayms+0x52>
    548e:	00 00       	nop
    5490:	e3 ef       	ldi	r30, 0xF3	; 243
    5492:	f1 e0       	ldi	r31, 0x01	; 1
    5494:	31 97       	sbiw	r30, 0x01	; 1
    5496:	f1 f7       	brne	.-4      	; 0x5494 <delayms+0x58>
    5498:	00 c0       	rjmp	.+0      	; 0x549a <delayms+0x5e>
    549a:	00 00       	nop
    549c:	e3 ef       	ldi	r30, 0xF3	; 243
    549e:	f1 e0       	ldi	r31, 0x01	; 1
    54a0:	31 97       	sbiw	r30, 0x01	; 1
    54a2:	f1 f7       	brne	.-4      	; 0x54a0 <delayms+0x64>
    54a4:	00 c0       	rjmp	.+0      	; 0x54a6 <delayms+0x6a>
    54a6:	00 00       	nop
    54a8:	e3 ef       	ldi	r30, 0xF3	; 243
    54aa:	f1 e0       	ldi	r31, 0x01	; 1
    54ac:	31 97       	sbiw	r30, 0x01	; 1
    54ae:	f1 f7       	brne	.-4      	; 0x54ac <delayms+0x70>
    54b0:	00 c0       	rjmp	.+0      	; 0x54b2 <delayms+0x76>
    54b2:	00 00       	nop
    54b4:	e3 ef       	ldi	r30, 0xF3	; 243
    54b6:	f1 e0       	ldi	r31, 0x01	; 1
    54b8:	31 97       	sbiw	r30, 0x01	; 1
    54ba:	f1 f7       	brne	.-4      	; 0x54b8 <delayms+0x7c>
    54bc:	00 c0       	rjmp	.+0      	; 0x54be <delayms+0x82>
    54be:	00 00       	nop
    54c0:	61 50       	subi	r22, 0x01	; 1
    54c2:	71 09       	sbc	r23, r1
    54c4:	81 09       	sbc	r24, r1
    54c6:	91 09       	sbc	r25, r1
    54c8:	b9 cf       	rjmp	.-142    	; 0x543c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54ca:	08 95       	ret

000054cc <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54cc:	4f 92       	push	r4
    54ce:	5f 92       	push	r5
    54d0:	6f 92       	push	r6
    54d2:	7f 92       	push	r7
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	cf 92       	push	r12
    54de:	df 92       	push	r13
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	cf 93       	push	r28
    54e6:	df 93       	push	r29
    54e8:	5a 01       	movw	r10, r20
    54ea:	e9 01       	movw	r28, r18
    54ec:	0e 94 96 ea 	call	0x1d52c	; 0x1d52c <__floatunsisf>
    54f0:	2b 01       	movw	r4, r22
    54f2:	3c 01       	movw	r6, r24
    54f4:	20 e0       	ldi	r18, 0x00	; 0
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	40 e0       	ldi	r20, 0x00	; 0
    54fa:	51 e4       	ldi	r21, 0x41	; 65
    54fc:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    5500:	9b 01       	movw	r18, r22
    5502:	ac 01       	movw	r20, r24
    5504:	60 e8       	ldi	r22, 0x80	; 128
    5506:	76 e9       	ldi	r23, 0x96	; 150
    5508:	88 e9       	ldi	r24, 0x98	; 152
    550a:	9b e4       	ldi	r25, 0x4B	; 75
    550c:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	40 e8       	ldi	r20, 0x80	; 128
    5516:	5f e3       	ldi	r21, 0x3F	; 63
    5518:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    551c:	0e 94 af eb 	call	0x1d75e	; 0x1d75e <round>
    5520:	0e 94 6a ea 	call	0x1d4d4	; 0x1d4d4 <__fixunssfsi>
    5524:	6b 01       	movw	r12, r22
    5526:	7c 01       	movw	r14, r24
    5528:	c1 14       	cp	r12, r1
    552a:	80 e1       	ldi	r24, 0x10	; 16
    552c:	d8 06       	cpc	r13, r24
    552e:	e1 04       	cpc	r14, r1
    5530:	f1 04       	cpc	r15, r1
    5532:	58 f4       	brcc	.+22     	; 0x554a <uart_ubr+0x7e>
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	f5 01       	movw	r30, r10
    553a:	91 83       	std	Z+1, r25	; 0x01
    553c:	80 83       	st	Z, r24
    553e:	81 2c       	mov	r8, r1
    5540:	91 2c       	mov	r9, r1
    5542:	a1 2c       	mov	r10, r1
    5544:	21 e4       	ldi	r18, 0x41	; 65
    5546:	b2 2e       	mov	r11, r18
    5548:	31 c0       	rjmp	.+98     	; 0x55ac <uart_ubr+0xe0>
    554a:	f5 01       	movw	r30, r10
    554c:	11 82       	std	Z+1, r1	; 0x01
    554e:	10 82       	st	Z, r1
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e8       	ldi	r20, 0x80	; 128
    5556:	51 e4       	ldi	r21, 0x41	; 65
    5558:	c3 01       	movw	r24, r6
    555a:	b2 01       	movw	r22, r4
    555c:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    5560:	9b 01       	movw	r18, r22
    5562:	ac 01       	movw	r20, r24
    5564:	60 e8       	ldi	r22, 0x80	; 128
    5566:	76 e9       	ldi	r23, 0x96	; 150
    5568:	88 e9       	ldi	r24, 0x98	; 152
    556a:	9b e4       	ldi	r25, 0x4B	; 75
    556c:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	40 e8       	ldi	r20, 0x80	; 128
    5576:	5f e3       	ldi	r21, 0x3F	; 63
    5578:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    557c:	0e 94 af eb 	call	0x1d75e	; 0x1d75e <round>
    5580:	0e 94 6a ea 	call	0x1d4d4	; 0x1d4d4 <__fixunssfsi>
    5584:	6b 01       	movw	r12, r22
    5586:	7c 01       	movw	r14, r24
    5588:	81 2c       	mov	r8, r1
    558a:	91 2c       	mov	r9, r1
    558c:	90 e8       	ldi	r25, 0x80	; 128
    558e:	a9 2e       	mov	r10, r25
    5590:	91 e4       	ldi	r25, 0x41	; 65
    5592:	b9 2e       	mov	r11, r25
    5594:	c1 14       	cp	r12, r1
    5596:	f0 e1       	ldi	r31, 0x10	; 16
    5598:	df 06       	cpc	r13, r31
    559a:	e1 04       	cpc	r14, r1
    559c:	f1 04       	cpc	r15, r1
    559e:	30 f0       	brcs	.+12     	; 0x55ac <uart_ubr+0xe0>
    55a0:	cc 24       	eor	r12, r12
    55a2:	ca 94       	dec	r12
    55a4:	8f e0       	ldi	r24, 0x0F	; 15
    55a6:	d8 2e       	mov	r13, r24
    55a8:	e1 2c       	mov	r14, r1
    55aa:	f1 2c       	mov	r15, r1
    55ac:	c7 01       	movw	r24, r14
    55ae:	b6 01       	movw	r22, r12
    55b0:	6f 5f       	subi	r22, 0xFF	; 255
    55b2:	7f 4f       	sbci	r23, 0xFF	; 255
    55b4:	8f 4f       	sbci	r24, 0xFF	; 255
    55b6:	9f 4f       	sbci	r25, 0xFF	; 255
    55b8:	0e 94 96 ea 	call	0x1d52c	; 0x1d52c <__floatunsisf>
    55bc:	a5 01       	movw	r20, r10
    55be:	94 01       	movw	r18, r8
    55c0:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    55c4:	9b 01       	movw	r18, r22
    55c6:	ac 01       	movw	r20, r24
    55c8:	60 e8       	ldi	r22, 0x80	; 128
    55ca:	76 e9       	ldi	r23, 0x96	; 150
    55cc:	88 e9       	ldi	r24, 0x98	; 152
    55ce:	9b e4       	ldi	r25, 0x4B	; 75
    55d0:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    55d4:	0e 94 6a ea 	call	0x1d4d4	; 0x1d4d4 <__fixunssfsi>
    55d8:	68 83       	st	Y, r22
    55da:	79 83       	std	Y+1, r23	; 0x01
    55dc:	8a 83       	std	Y+2, r24	; 0x02
    55de:	9b 83       	std	Y+3, r25	; 0x03
    55e0:	c6 01       	movw	r24, r12
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	ff 90       	pop	r15
    55e8:	ef 90       	pop	r14
    55ea:	df 90       	pop	r13
    55ec:	cf 90       	pop	r12
    55ee:	bf 90       	pop	r11
    55f0:	af 90       	pop	r10
    55f2:	9f 90       	pop	r9
    55f4:	8f 90       	pop	r8
    55f6:	7f 90       	pop	r7
    55f8:	6f 90       	pop	r6
    55fa:	5f 90       	pop	r5
    55fc:	4f 90       	pop	r4
    55fe:	08 95       	ret

00005600 <uart_init>:
    5600:	a6 e0       	ldi	r26, 0x06	; 6
    5602:	b0 e0       	ldi	r27, 0x00	; 0
    5604:	e6 e0       	ldi	r30, 0x06	; 6
    5606:	fb e2       	ldi	r31, 0x2B	; 43
    5608:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    560c:	1e 82       	std	Y+6, r1	; 0x06
    560e:	1d 82       	std	Y+5, r1	; 0x05
    5610:	81 11       	cpse	r24, r1
    5612:	36 c0       	rjmp	.+108    	; 0x5680 <uart_init+0x80>
    5614:	cb 01       	movw	r24, r22
    5616:	ba 01       	movw	r22, r20
    5618:	9e 01       	movw	r18, r28
    561a:	2f 5f       	subi	r18, 0xFF	; 255
    561c:	3f 4f       	sbci	r19, 0xFF	; 255
    561e:	ae 01       	movw	r20, r28
    5620:	4b 5f       	subi	r20, 0xFB	; 251
    5622:	5f 4f       	sbci	r21, 0xFF	; 255
    5624:	53 df       	rcall	.-346    	; 0x54cc <uart_ubr>
    5626:	f8 94       	cli
    5628:	10 92 b2 19 	sts	0x19B2, r1	; 0x8019b2 <uarts+0x4>
    562c:	10 92 b1 19 	sts	0x19B1, r1	; 0x8019b1 <uarts+0x3>
    5630:	10 92 ae 19 	sts	0x19AE, r1	; 0x8019ae <uarts>
    5634:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <uarts+0x1>
    5638:	10 92 b0 19 	sts	0x19B0, r1	; 0x8019b0 <uarts+0x2>
    563c:	10 92 b3 19 	sts	0x19B3, r1	; 0x8019b3 <uarts+0x5>
    5640:	78 94       	sei
    5642:	f8 94       	cli
    5644:	58 9a       	sbi	0x0b, 0	; 11
    5646:	59 9a       	sbi	0x0b, 1	; 11
    5648:	50 98       	cbi	0x0a, 0	; 10
    564a:	51 9a       	sbi	0x0a, 1	; 10
    564c:	28 e9       	ldi	r18, 0x98	; 152
    564e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5652:	2d 81       	ldd	r18, Y+5	; 0x05
    5654:	3e 81       	ldd	r19, Y+6	; 0x06
    5656:	23 2b       	or	r18, r19
    5658:	19 f0       	breq	.+6      	; 0x5660 <uart_init+0x60>
    565a:	22 e0       	ldi	r18, 0x02	; 2
    565c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5660:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5664:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5668:	78 94       	sei
    566a:	65 ef       	ldi	r22, 0xF5	; 245
    566c:	7b e2       	ldi	r23, 0x2B	; 43
    566e:	8a e0       	ldi	r24, 0x0A	; 10
    5670:	9c e2       	ldi	r25, 0x2C	; 44
    5672:	0e 94 52 7c 	call	0xf8a4	; 0xf8a4 <fdevopen>
    5676:	69 81       	ldd	r22, Y+1	; 0x01
    5678:	7a 81       	ldd	r23, Y+2	; 0x02
    567a:	8b 81       	ldd	r24, Y+3	; 0x03
    567c:	9c 81       	ldd	r25, Y+4	; 0x04
    567e:	03 c0       	rjmp	.+6      	; 0x5686 <uart_init+0x86>
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	70 e0       	ldi	r23, 0x00	; 0
    5684:	cb 01       	movw	r24, r22
    5686:	26 96       	adiw	r28, 0x06	; 6
    5688:	e2 e0       	ldi	r30, 0x02	; 2
    568a:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000568e <uart_rx_interrupt>:
    568e:	27 e5       	ldi	r18, 0x57	; 87
    5690:	82 9f       	mul	r24, r18
    5692:	c0 01       	movw	r24, r0
    5694:	11 24       	eor	r1, r1
    5696:	fc 01       	movw	r30, r24
    5698:	e2 55       	subi	r30, 0x52	; 82
    569a:	f6 4e       	sbci	r31, 0xE6	; 230
    569c:	83 81       	ldd	r24, Z+3	; 0x03
    569e:	94 81       	ldd	r25, Z+4	; 0x04
    56a0:	80 35       	cpi	r24, 0x50	; 80
    56a2:	91 05       	cpc	r25, r1
    56a4:	84 f4       	brge	.+32     	; 0x56c6 <uart_rx_interrupt+0x38>
    56a6:	30 81       	ld	r19, Z
    56a8:	21 e0       	ldi	r18, 0x01	; 1
    56aa:	23 0f       	add	r18, r19
    56ac:	20 83       	st	Z, r18
    56ae:	df 01       	movw	r26, r30
    56b0:	a3 0f       	add	r26, r19
    56b2:	b1 1d       	adc	r27, r1
    56b4:	16 96       	adiw	r26, 0x06	; 6
    56b6:	6c 93       	st	X, r22
    56b8:	01 96       	adiw	r24, 0x01	; 1
    56ba:	94 83       	std	Z+4, r25	; 0x04
    56bc:	83 83       	std	Z+3, r24	; 0x03
    56be:	20 35       	cpi	r18, 0x50	; 80
    56c0:	28 f0       	brcs	.+10     	; 0x56cc <uart_rx_interrupt+0x3e>
    56c2:	10 82       	st	Z, r1
    56c4:	08 95       	ret
    56c6:	85 81       	ldd	r24, Z+5	; 0x05
    56c8:	81 60       	ori	r24, 0x01	; 1
    56ca:	85 83       	std	Z+5, r24	; 0x05
    56cc:	08 95       	ret

000056ce <__vector_20>:
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	0f 92       	push	r0
    56d6:	11 24       	eor	r1, r1
    56d8:	0b b6       	in	r0, 0x3b	; 59
    56da:	0f 92       	push	r0
    56dc:	2f 93       	push	r18
    56de:	3f 93       	push	r19
    56e0:	4f 93       	push	r20
    56e2:	5f 93       	push	r21
    56e4:	6f 93       	push	r22
    56e6:	7f 93       	push	r23
    56e8:	8f 93       	push	r24
    56ea:	9f 93       	push	r25
    56ec:	af 93       	push	r26
    56ee:	bf 93       	push	r27
    56f0:	ef 93       	push	r30
    56f2:	ff 93       	push	r31
    56f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	c9 df       	rcall	.-110    	; 0x568e <uart_rx_interrupt>
    56fc:	ff 91       	pop	r31
    56fe:	ef 91       	pop	r30
    5700:	bf 91       	pop	r27
    5702:	af 91       	pop	r26
    5704:	9f 91       	pop	r25
    5706:	8f 91       	pop	r24
    5708:	7f 91       	pop	r23
    570a:	6f 91       	pop	r22
    570c:	5f 91       	pop	r21
    570e:	4f 91       	pop	r20
    5710:	3f 91       	pop	r19
    5712:	2f 91       	pop	r18
    5714:	0f 90       	pop	r0
    5716:	0b be       	out	0x3b, r0	; 59
    5718:	0f 90       	pop	r0
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	0f 90       	pop	r0
    571e:	1f 90       	pop	r1
    5720:	18 95       	reti

00005722 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5722:	81 11       	cpse	r24, r1
    5724:	07 c0       	rjmp	.+14     	; 0x5734 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5726:	f8 94       	cli

    count = uarts[uart].rx_count;
    5728:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <uarts+0x3>
    572c:	90 91 b2 19 	lds	r25, 0x19B2	; 0x8019b2 <uarts+0x4>

    sei();
    5730:	78 94       	sei

    return (count );
    5732:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5734:	8f ef       	ldi	r24, 0xFF	; 255
    5736:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5738:	08 95       	ret

0000573a <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    573a:	81 11       	cpse	r24, r1
    573c:	21 c0       	rjmp	.+66     	; 0x5780 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	f0 df       	rcall	.-32     	; 0x5722 <uart_rx_count>
    5742:	18 16       	cp	r1, r24
    5744:	19 06       	cpc	r1, r25
    5746:	dc f7       	brge	.-10     	; 0x573e <uart_get_tail+0x4>
		;

    cli();
    5748:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    574a:	e0 91 af 19 	lds	r30, 0x19AF	; 0x8019af <uarts+0x1>
    574e:	91 e0       	ldi	r25, 0x01	; 1
    5750:	9e 0f       	add	r25, r30
    5752:	90 93 af 19 	sts	0x19AF, r25	; 0x8019af <uarts+0x1>
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	e2 55       	subi	r30, 0x52	; 82
    575a:	f6 4e       	sbci	r31, 0xE6	; 230
    575c:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    575e:	90 35       	cpi	r25, 0x50	; 80
    5760:	10 f0       	brcs	.+4      	; 0x5766 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5762:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <uarts+0x1>
    uarts[uart].rx_count--;
    5766:	20 91 b1 19 	lds	r18, 0x19B1	; 0x8019b1 <uarts+0x3>
    576a:	30 91 b2 19 	lds	r19, 0x19B2	; 0x8019b2 <uarts+0x4>
    576e:	21 50       	subi	r18, 0x01	; 1
    5770:	31 09       	sbc	r19, r1
    5772:	30 93 b2 19 	sts	0x19B2, r19	; 0x8019b2 <uarts+0x4>
    5776:	20 93 b1 19 	sts	0x19B1, r18	; 0x8019b1 <uarts+0x3>
    sei();
    577a:	78 94       	sei

    return (c & 0xff);
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5784:	08 95       	ret

00005786 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5786:	d9 df       	rcall	.-78     	; 0x573a <uart_get_tail>
    5788:	99 27       	eor	r25, r25
    578a:	08 95       	ret

0000578c <uart_tx_byte>:
    578c:	61 11       	cpse	r22, r1
    578e:	09 c0       	rjmp	.+18     	; 0x57a2 <uart_tx_byte+0x16>
    5790:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5794:	25 ff       	sbrs	r18, 5
    5796:	fc cf       	rjmp	.-8      	; 0x5790 <uart_tx_byte+0x4>
    5798:	28 2f       	mov	r18, r24
    579a:	2f 77       	andi	r18, 0x7F	; 127
    579c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57a0:	08 95       	ret
    57a2:	61 30       	cpi	r22, 0x01	; 1
    57a4:	49 f4       	brne	.+18     	; 0x57b8 <uart_tx_byte+0x2c>
    57a6:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57aa:	25 ff       	sbrs	r18, 5
    57ac:	fc cf       	rjmp	.-8      	; 0x57a6 <uart_tx_byte+0x1a>
    57ae:	28 2f       	mov	r18, r24
    57b0:	2f 77       	andi	r18, 0x7F	; 127
    57b2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57b6:	08 95       	ret
    57b8:	8f ef       	ldi	r24, 0xFF	; 255
    57ba:	9f ef       	ldi	r25, 0xFF	; 255
    57bc:	08 95       	ret

000057be <uart_getchar>:
    57be:	cf 93       	push	r28
    57c0:	81 11       	cpse	r24, r1
    57c2:	0f c0       	rjmp	.+30     	; 0x57e2 <uart_getchar+0x24>
    57c4:	e0 df       	rcall	.-64     	; 0x5786 <uart_rx_byte>
    57c6:	c8 2f       	mov	r28, r24
    57c8:	60 e0       	ldi	r22, 0x00	; 0
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	df df       	rcall	.-66     	; 0x578c <uart_tx_byte>
    57ce:	cd 30       	cpi	r28, 0x0D	; 13
    57d0:	29 f4       	brne	.+10     	; 0x57dc <uart_getchar+0x1e>
    57d2:	60 e0       	ldi	r22, 0x00	; 0
    57d4:	8a e0       	ldi	r24, 0x0A	; 10
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	d9 df       	rcall	.-78     	; 0x578c <uart_tx_byte>
    57da:	ca e0       	ldi	r28, 0x0A	; 10
    57dc:	8c 2f       	mov	r24, r28
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	02 c0       	rjmp	.+4      	; 0x57e6 <uart_getchar+0x28>
    57e2:	8f ef       	ldi	r24, 0xFF	; 255
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	cf 91       	pop	r28
    57e8:	08 95       	ret

000057ea <uart0_getchar>:
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	e8 cf       	rjmp	.-48     	; 0x57be <uart_getchar>
    57ee:	08 95       	ret

000057f0 <uart_putchar>:
    57f0:	1f 93       	push	r17
    57f2:	cf 93       	push	r28
    57f4:	df 93       	push	r29
    57f6:	ec 01       	movw	r28, r24
    57f8:	16 2f       	mov	r17, r22
    57fa:	c8 df       	rcall	.-112    	; 0x578c <uart_tx_byte>
    57fc:	ca 30       	cpi	r28, 0x0A	; 10
    57fe:	d1 05       	cpc	r29, r1
    5800:	21 f4       	brne	.+8      	; 0x580a <uart_putchar+0x1a>
    5802:	61 2f       	mov	r22, r17
    5804:	8d e0       	ldi	r24, 0x0D	; 13
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	c1 df       	rcall	.-126    	; 0x578c <uart_tx_byte>
    580a:	ce 01       	movw	r24, r28
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	08 95       	ret

00005814 <uart0_putchar>:
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
    5818:	ec 01       	movw	r28, r24
    581a:	60 e0       	ldi	r22, 0x00	; 0
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	e8 df       	rcall	.-48     	; 0x57f0 <uart_putchar>
    5820:	ce 01       	movw	r24, r28
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	08 95       	ret

00005828 <uart_keyhit>:
    5828:	7c cf       	rjmp	.-264    	; 0x5722 <uart_rx_count>
    582a:	08 95       	ret

0000582c <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    582c:	cf 92       	push	r12
    582e:	df 92       	push	r13
    5830:	ef 92       	push	r14
    5832:	ff 92       	push	r15
    5834:	6b 01       	movw	r12, r22
    5836:	7c 01       	movw	r14, r24
    5838:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <SPI0_Speed_value>
    583c:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <SPI0_Speed_value+0x1>
    5840:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <SPI0_Speed_value+0x2>
    5844:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <SPI0_Speed_value+0x3>
    5848:	8c 15       	cp	r24, r12
    584a:	9d 05       	cpc	r25, r13
    584c:	ae 05       	cpc	r26, r14
    584e:	bf 05       	cpc	r27, r15
    5850:	09 f4       	brne	.+2      	; 0x5854 <SPI0_Speed+0x28>
    5852:	4e c0       	rjmp	.+156    	; 0x58f0 <SPI0_Speed+0xc4>
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	7d e2       	ldi	r23, 0x2D	; 45
    5858:	81 e3       	ldi	r24, 0x31	; 49
    585a:	91 e0       	ldi	r25, 0x01	; 1
    585c:	a7 01       	movw	r20, r14
    585e:	96 01       	movw	r18, r12
    5860:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    5864:	20 38       	cpi	r18, 0x80	; 128
    5866:	31 05       	cpc	r19, r1
    5868:	41 05       	cpc	r20, r1
    586a:	51 05       	cpc	r21, r1
    586c:	28 f4       	brcc	.+10     	; 0x5878 <SPI0_Speed+0x4c>
    586e:	20 34       	cpi	r18, 0x40	; 64
    5870:	31 05       	cpc	r19, r1
    5872:	41 05       	cpc	r20, r1
    5874:	51 05       	cpc	r21, r1
    5876:	30 f0       	brcs	.+12     	; 0x5884 <SPI0_Speed+0x58>
    5878:	8d b5       	in	r24, 0x2d	; 45
    587a:	8e 7f       	andi	r24, 0xFE	; 254
    587c:	8d bd       	out	0x2d, r24	; 45
    587e:	8c b5       	in	r24, 0x2c	; 44
    5880:	82 60       	ori	r24, 0x02	; 2
    5882:	1b c0       	rjmp	.+54     	; 0x58ba <SPI0_Speed+0x8e>
    5884:	8d b5       	in	r24, 0x2d	; 45
    5886:	20 32       	cpi	r18, 0x20	; 32
    5888:	31 05       	cpc	r19, r1
    588a:	41 05       	cpc	r20, r1
    588c:	51 05       	cpc	r21, r1
    588e:	28 f0       	brcs	.+10     	; 0x589a <SPI0_Speed+0x6e>
    5890:	81 60       	ori	r24, 0x01	; 1
    5892:	8d bd       	out	0x2d, r24	; 45
    5894:	8c b5       	in	r24, 0x2c	; 44
    5896:	82 60       	ori	r24, 0x02	; 2
    5898:	1f c0       	rjmp	.+62     	; 0x58d8 <SPI0_Speed+0xac>
    589a:	20 31       	cpi	r18, 0x10	; 16
    589c:	31 05       	cpc	r19, r1
    589e:	41 05       	cpc	r20, r1
    58a0:	51 05       	cpc	r21, r1
    58a2:	10 f0       	brcs	.+4      	; 0x58a8 <SPI0_Speed+0x7c>
    58a4:	8e 7f       	andi	r24, 0xFE	; 254
    58a6:	06 c0       	rjmp	.+12     	; 0x58b4 <SPI0_Speed+0x88>
    58a8:	28 30       	cpi	r18, 0x08	; 8
    58aa:	31 05       	cpc	r19, r1
    58ac:	41 05       	cpc	r20, r1
    58ae:	51 05       	cpc	r21, r1
    58b0:	40 f0       	brcs	.+16     	; 0x58c2 <SPI0_Speed+0x96>
    58b2:	81 60       	ori	r24, 0x01	; 1
    58b4:	8d bd       	out	0x2d, r24	; 45
    58b6:	8c b5       	in	r24, 0x2c	; 44
    58b8:	8d 7f       	andi	r24, 0xFD	; 253
    58ba:	8c bd       	out	0x2c, r24	; 44
    58bc:	8c b5       	in	r24, 0x2c	; 44
    58be:	81 60       	ori	r24, 0x01	; 1
    58c0:	0e c0       	rjmp	.+28     	; 0x58de <SPI0_Speed+0xb2>
    58c2:	24 30       	cpi	r18, 0x04	; 4
    58c4:	31 05       	cpc	r19, r1
    58c6:	41 05       	cpc	r20, r1
    58c8:	51 05       	cpc	r21, r1
    58ca:	10 f0       	brcs	.+4      	; 0x58d0 <SPI0_Speed+0xa4>
    58cc:	8e 7f       	andi	r24, 0xFE	; 254
    58ce:	01 c0       	rjmp	.+2      	; 0x58d2 <SPI0_Speed+0xa6>
    58d0:	81 60       	ori	r24, 0x01	; 1
    58d2:	8d bd       	out	0x2d, r24	; 45
    58d4:	8c b5       	in	r24, 0x2c	; 44
    58d6:	8d 7f       	andi	r24, 0xFD	; 253
    58d8:	8c bd       	out	0x2c, r24	; 44
    58da:	8c b5       	in	r24, 0x2c	; 44
    58dc:	8e 7f       	andi	r24, 0xFE	; 254
    58de:	8c bd       	out	0x2c, r24	; 44
    58e0:	c0 92 1a 17 	sts	0x171A, r12	; 0x80171a <SPI0_Speed_value>
    58e4:	d0 92 1b 17 	sts	0x171B, r13	; 0x80171b <SPI0_Speed_value+0x1>
    58e8:	e0 92 1c 17 	sts	0x171C, r14	; 0x80171c <SPI0_Speed_value+0x2>
    58ec:	f0 92 1d 17 	sts	0x171D, r15	; 0x80171d <SPI0_Speed_value+0x3>
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	df 90       	pop	r13
    58f6:	cf 90       	pop	r12
    58f8:	08 95       	ret

000058fa <SPI0_Mode>:
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	ec 01       	movw	r28, r24
    5900:	81 30       	cpi	r24, 0x01	; 1
    5902:	91 05       	cpc	r25, r1
    5904:	71 f0       	breq	.+28     	; 0x5922 <SPI0_Mode+0x28>
    5906:	2c f4       	brge	.+10     	; 0x5912 <SPI0_Mode+0x18>
    5908:	89 2b       	or	r24, r25
    590a:	c1 f4       	brne	.+48     	; 0x593c <SPI0_Mode+0x42>
    590c:	8c b5       	in	r24, 0x2c	; 44
    590e:	87 7f       	andi	r24, 0xF7	; 247
    5910:	11 c0       	rjmp	.+34     	; 0x5934 <SPI0_Mode+0x3a>
    5912:	82 30       	cpi	r24, 0x02	; 2
    5914:	91 05       	cpc	r25, r1
    5916:	61 f0       	breq	.+24     	; 0x5930 <SPI0_Mode+0x36>
    5918:	03 97       	sbiw	r24, 0x03	; 3
    591a:	81 f4       	brne	.+32     	; 0x593c <SPI0_Mode+0x42>
    591c:	8c b5       	in	r24, 0x2c	; 44
    591e:	88 60       	ori	r24, 0x08	; 8
    5920:	02 c0       	rjmp	.+4      	; 0x5926 <SPI0_Mode+0x2c>
    5922:	8c b5       	in	r24, 0x2c	; 44
    5924:	87 7f       	andi	r24, 0xF7	; 247
    5926:	8c bd       	out	0x2c, r24	; 44
    5928:	8c b5       	in	r24, 0x2c	; 44
    592a:	84 60       	ori	r24, 0x04	; 4
    592c:	8c bd       	out	0x2c, r24	; 44
    592e:	14 c0       	rjmp	.+40     	; 0x5958 <SPI0_Mode+0x5e>
    5930:	8c b5       	in	r24, 0x2c	; 44
    5932:	88 60       	ori	r24, 0x08	; 8
    5934:	8c bd       	out	0x2c, r24	; 44
    5936:	8c b5       	in	r24, 0x2c	; 44
    5938:	8b 7f       	andi	r24, 0xFB	; 251
    593a:	f8 cf       	rjmp	.-16     	; 0x592c <SPI0_Mode+0x32>
    593c:	df 93       	push	r29
    593e:	cf 93       	push	r28
    5940:	84 e2       	ldi	r24, 0x24	; 36
    5942:	94 e0       	ldi	r25, 0x04	; 4
    5944:	1f 92       	push	r1
    5946:	9f 93       	push	r25
    5948:	8f 93       	push	r24
    594a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    594e:	0f 90       	pop	r0
    5950:	0f 90       	pop	r0
    5952:	0f 90       	pop	r0
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	d0 93 19 17 	sts	0x1719, r29	; 0x801719 <__data_end+0x1>
    595c:	c0 93 18 17 	sts	0x1718, r28	; 0x801718 <__data_end>
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	08 95       	ret

00005966 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5966:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5968:	0d b4       	in	r0, 0x2d	; 45
    596a:	07 fe       	sbrs	r0, 7
    596c:	fd cf       	rjmp	.-6      	; 0x5968 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    596e:	8e b5       	in	r24, 0x2e	; 46
}
    5970:	08 95       	ret

00005972 <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5972:	cf 92       	push	r12
    5974:	df 92       	push	r13
    5976:	ef 92       	push	r14
    5978:	ff 92       	push	r15
    597a:	6b 01       	movw	r12, r22
    597c:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    597e:	2c 9a       	sbi	0x05, 4	; 5
    5980:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5982:	6a e0       	ldi	r22, 0x0A	; 10
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	2b dd       	rcall	.-1450   	; 0x53e2 <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    598c:	2f 9a       	sbi	0x05, 7	; 5
    598e:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5990:	2d 9a       	sbi	0x05, 5	; 5
    5992:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5994:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5996:	8c b5       	in	r24, 0x2c	; 44
    5998:	80 64       	ori	r24, 0x40	; 64
    599a:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    599c:	8c b5       	in	r24, 0x2c	; 44
    599e:	80 61       	ori	r24, 0x10	; 16
    59a0:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    59a2:	80 e0       	ldi	r24, 0x00	; 0
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    59a6:	a9 df       	rcall	.-174    	; 0x58fa <SPI0_Mode>
    59a8:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    59aa:	b6 01       	movw	r22, r12
    59ac:	3f df       	rcall	.-386    	; 0x582c <SPI0_Speed>
    59ae:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    59b0:	da df       	rcall	.-76     	; 0x5966 <SPI0_TXRX_Byte>
    59b2:	ff 90       	pop	r15
    59b4:	ef 90       	pop	r14
    59b6:	df 90       	pop	r13
    59b8:	cf 90       	pop	r12
    59ba:	08 95       	ret

000059bc <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59bc:	0f 93       	push	r16
    59be:	1f 93       	push	r17
    59c0:	cf 93       	push	r28
    59c2:	df 93       	push	r29
    59c4:	8c 01       	movw	r16, r24
    59c6:	eb 01       	movw	r28, r22

    while(count > 0)
    59c8:	1c 16       	cp	r1, r28
    59ca:	1d 06       	cpc	r1, r29
    59cc:	34 f4       	brge	.+12     	; 0x59da <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59ce:	f8 01       	movw	r30, r16
    59d0:	81 91       	ld	r24, Z+
    59d2:	8f 01       	movw	r16, r30
    59d4:	c8 df       	rcall	.-112    	; 0x5966 <SPI0_TXRX_Byte>
		++data;
		--count;
    59d6:	21 97       	sbiw	r28, 0x01	; 1
    59d8:	f7 cf       	rjmp	.-18     	; 0x59c8 <SPI0_TX+0xc>
	}
}
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	1f 91       	pop	r17
    59e0:	0f 91       	pop	r16
    59e2:	08 95       	ret

000059e4 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    59e4:	0f 93       	push	r16
    59e6:	1f 93       	push	r17
    59e8:	cf 93       	push	r28
    59ea:	df 93       	push	r29
    59ec:	8c 01       	movw	r16, r24
    59ee:	eb 01       	movw	r28, r22

    while(count > 0)
    59f0:	1c 16       	cp	r1, r28
    59f2:	1d 06       	cpc	r1, r29
    59f4:	44 f4       	brge	.+16     	; 0x5a06 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    59f6:	f8 01       	movw	r30, r16
    59f8:	80 81       	ld	r24, Z
    59fa:	b5 df       	rcall	.-150    	; 0x5966 <SPI0_TXRX_Byte>
    59fc:	f8 01       	movw	r30, r16
    59fe:	81 93       	st	Z+, r24
    5a00:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a02:	21 97       	sbiw	r28, 0x01	; 1
    5a04:	f5 cf       	rjmp	.-22     	; 0x59f0 <SPI0_TXRX+0xc>
	}
}
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	1f 91       	pop	r17
    5a0c:	0f 91       	pop	r16
    5a0e:	08 95       	ret

00005a10 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a10:	0f 93       	push	r16
    5a12:	1f 93       	push	r17
    5a14:	cf 93       	push	r28
    5a16:	df 93       	push	r29
    5a18:	8c 01       	movw	r16, r24
    5a1a:	eb 01       	movw	r28, r22

    while(count > 0)
    5a1c:	1c 16       	cp	r1, r28
    5a1e:	1d 06       	cpc	r1, r29
    5a20:	3c f4       	brge	.+14     	; 0x5a30 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a22:	8f ef       	ldi	r24, 0xFF	; 255
    5a24:	a0 df       	rcall	.-192    	; 0x5966 <SPI0_TXRX_Byte>
    5a26:	f8 01       	movw	r30, r16
    5a28:	81 93       	st	Z+, r24
    5a2a:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a2c:	21 97       	sbiw	r28, 0x01	; 1
    5a2e:	f6 cf       	rjmp	.-20     	; 0x5a1c <SPI0_RX+0xc>
	}
}
    5a30:	df 91       	pop	r29
    5a32:	cf 91       	pop	r28
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	08 95       	ret

00005a3a <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a3a:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a3c:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a3e:	ec eb       	ldi	r30, 0xBC	; 188
    5a40:	f0 e0       	ldi	r31, 0x00	; 0
    5a42:	90 81       	ld	r25, Z
    5a44:	94 60       	ori	r25, 0x04	; 4
    5a46:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a48:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a4c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a50:	08 95       	ret

00005a52 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a52:	84 e9       	ldi	r24, 0x94	; 148
    5a54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a58:	08 95       	ret

00005a5a <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a5a:	94 ea       	ldi	r25, 0xA4	; 164
    5a5c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a60:	24 e6       	ldi	r18, 0x64	; 100
    5a62:	62 9f       	mul	r22, r18
    5a64:	b0 01       	movw	r22, r0
    5a66:	11 24       	eor	r1, r1
    5a68:	61 50       	subi	r22, 0x01	; 1
    5a6a:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a6c:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a6e:	40 e0       	ldi	r20, 0x00	; 0
    5a70:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a72:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a74:	2f 3f       	cpi	r18, 0xFF	; 255
    5a76:	9f ef       	ldi	r25, 0xFF	; 255
    5a78:	39 07       	cpc	r19, r25
    5a7a:	41 f1       	breq	.+80     	; 0x5acc <TWI_StartTransmission+0x72>
    5a7c:	41 15       	cp	r20, r1
    5a7e:	51 05       	cpc	r21, r1
    5a80:	f1 f4       	brne	.+60     	; 0x5abe <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5a82:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a86:	97 ff       	sbrs	r25, 7
    5a88:	13 c0       	rjmp	.+38     	; 0x5ab0 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5a8a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a8e:	98 7f       	andi	r25, 0xF8	; 248
    5a90:	90 31       	cpi	r25, 0x10	; 16
    5a92:	61 f0       	breq	.+24     	; 0x5aac <TWI_StartTransmission+0x52>
    5a94:	98 33       	cpi	r25, 0x38	; 56
    5a96:	39 f0       	breq	.+14     	; 0x5aa6 <TWI_StartTransmission+0x4c>
    5a98:	98 30       	cpi	r25, 0x08	; 8
    5a9a:	41 f0       	breq	.+16     	; 0x5aac <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5a9c:	84 e0       	ldi	r24, 0x04	; 4
    5a9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5aa2:	81 e0       	ldi	r24, 0x01	; 1
    5aa4:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5aa6:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5aaa:	06 c0       	rjmp	.+12     	; 0x5ab8 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5aac:	41 e0       	ldi	r20, 0x01	; 1
    5aae:	50 e0       	ldi	r21, 0x00	; 0
    5ab0:	92 e4       	ldi	r25, 0x42	; 66
    5ab2:	9a 95       	dec	r25
    5ab4:	f1 f7       	brne	.-4      	; 0x5ab2 <TWI_StartTransmission+0x58>
    5ab6:	00 c0       	rjmp	.+0      	; 0x5ab8 <TWI_StartTransmission+0x5e>
    5ab8:	21 50       	subi	r18, 0x01	; 1
    5aba:	31 09       	sbc	r19, r1
    5abc:	db cf       	rjmp	.-74     	; 0x5a74 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5abe:	23 2b       	or	r18, r19
    5ac0:	29 f4       	brne	.+10     	; 0x5acc <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5ac2:	84 e0       	ldi	r24, 0x04	; 4
    5ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5ac8:	82 e0       	ldi	r24, 0x02	; 2
    5aca:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5acc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5ad0:	84 e8       	ldi	r24, 0x84	; 132
    5ad2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5ad6:	6f 3f       	cpi	r22, 0xFF	; 255
    5ad8:	8f ef       	ldi	r24, 0xFF	; 255
    5ada:	78 07       	cpc	r23, r24
    5adc:	71 f0       	breq	.+28     	; 0x5afa <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5ade:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	01 97       	sbiw	r24, 0x01	; 1
    5ae6:	27 fd       	sbrc	r18, 7
    5ae8:	06 c0       	rjmp	.+12     	; 0x5af6 <TWI_StartTransmission+0x9c>
    5aea:	22 e4       	ldi	r18, 0x42	; 66
    5aec:	2a 95       	dec	r18
    5aee:	f1 f7       	brne	.-4      	; 0x5aec <TWI_StartTransmission+0x92>
    5af0:	00 c0       	rjmp	.+0      	; 0x5af2 <TWI_StartTransmission+0x98>
    5af2:	bc 01       	movw	r22, r24
    5af4:	f0 cf       	rjmp	.-32     	; 0x5ad6 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5af6:	67 2b       	or	r22, r23
    5af8:	61 f0       	breq	.+24     	; 0x5b12 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5afa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5afe:	88 7f       	andi	r24, 0xF8	; 248
    5b00:	88 31       	cpi	r24, 0x18	; 24
    5b02:	49 f0       	breq	.+18     	; 0x5b16 <TWI_StartTransmission+0xbc>
    5b04:	80 34       	cpi	r24, 0x40	; 64
    5b06:	39 f0       	breq	.+14     	; 0x5b16 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b08:	84 e9       	ldi	r24, 0x94	; 148
    5b0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b0e:	84 e0       	ldi	r24, 0x04	; 4
    5b10:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b12:	83 e0       	ldi	r24, 0x03	; 3
    5b14:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b16:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b18:	08 95       	ret

00005b1a <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b1e:	84 e8       	ldi	r24, 0x84	; 132
    5b20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b28:	87 ff       	sbrs	r24, 7
    5b2a:	fc cf       	rjmp	.-8      	; 0x5b24 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b2c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b30:	98 7f       	andi	r25, 0xF8	; 248
    5b32:	21 e0       	ldi	r18, 0x01	; 1
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	98 32       	cpi	r25, 0x28	; 40
    5b38:	11 f0       	breq	.+4      	; 0x5b3e <TWI_SendByte+0x24>
    5b3a:	20 e0       	ldi	r18, 0x00	; 0
    5b3c:	30 e0       	ldi	r19, 0x00	; 0
}
    5b3e:	c9 01       	movw	r24, r18
    5b40:	08 95       	ret

00005b42 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b42:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b44:	61 15       	cp	r22, r1
    5b46:	71 05       	cpc	r23, r1
    5b48:	11 f4       	brne	.+4      	; 0x5b4e <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b4a:	94 ec       	ldi	r25, 0xC4	; 196
    5b4c:	01 c0       	rjmp	.+2      	; 0x5b50 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b4e:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b50:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b54:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b58:	87 ff       	sbrs	r24, 7
    5b5a:	fc cf       	rjmp	.-8      	; 0x5b54 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b5c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b60:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b62:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b66:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b68:	81 e0       	ldi	r24, 0x01	; 1
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	67 2b       	or	r22, r23
    5b6e:	19 f0       	breq	.+6      	; 0x5b76 <TWI_ReceiveByte+0x34>
    5b70:	28 35       	cpi	r18, 0x58	; 88
    5b72:	19 f4       	brne	.+6      	; 0x5b7a <TWI_ReceiveByte+0x38>
    5b74:	03 c0       	rjmp	.+6      	; 0x5b7c <TWI_ReceiveByte+0x3a>
    5b76:	20 35       	cpi	r18, 0x50	; 80
    5b78:	09 f0       	breq	.+2      	; 0x5b7c <TWI_ReceiveByte+0x3a>
    5b7a:	80 e0       	ldi	r24, 0x00	; 0
}
    5b7c:	08 95       	ret

00005b7e <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5b7e:	a0 e0       	ldi	r26, 0x00	; 0
    5b80:	b0 e0       	ldi	r27, 0x00	; 0
    5b82:	e5 ec       	ldi	r30, 0xC5	; 197
    5b84:	fd e2       	ldi	r31, 0x2D	; 45
    5b86:	0c 94 42 e9 	jmp	0x1d284	; 0x1d284 <__prologue_saves__+0xe>
    5b8a:	f8 2e       	mov	r15, r24
    5b8c:	b6 2e       	mov	r11, r22
    5b8e:	94 2e       	mov	r9, r20
    5b90:	a5 2e       	mov	r10, r21
    5b92:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5b94:	8e 7f       	andi	r24, 0xFE	; 254
    5b96:	61 df       	rcall	.-318    	; 0x5a5a <TWI_StartTransmission>
    5b98:	d8 2f       	mov	r29, r24
    5b9a:	81 11       	cpse	r24, r1
    5b9c:	2b c0       	rjmp	.+86     	; 0x5bf4 <TWI_ReadPacket+0x76>
    5b9e:	c9 2c       	mov	r12, r9
    5ba0:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5ba2:	cc 23       	and	r28, r28
    5ba4:	39 f0       	breq	.+14     	; 0x5bb4 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5ba6:	f6 01       	movw	r30, r12
    5ba8:	81 91       	ld	r24, Z+
    5baa:	6f 01       	movw	r12, r30
    5bac:	b6 df       	rcall	.-148    	; 0x5b1a <TWI_SendByte>
    5bae:	c1 50       	subi	r28, 0x01	; 1
    5bb0:	89 2b       	or	r24, r25
    5bb2:	b9 f7       	brne	.-18     	; 0x5ba2 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bb4:	6b 2d       	mov	r22, r11
    5bb6:	8f 2d       	mov	r24, r15
    5bb8:	81 60       	ori	r24, 0x01	; 1
    5bba:	4f df       	rcall	.-354    	; 0x5a5a <TWI_StartTransmission>
    5bbc:	d8 2f       	mov	r29, r24
    5bbe:	81 11       	cpse	r24, r1
    5bc0:	19 c0       	rjmp	.+50     	; 0x5bf4 <TWI_ReadPacket+0x76>
    5bc2:	cf ef       	ldi	r28, 0xFF	; 255
    5bc4:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bc6:	cf 3f       	cpi	r28, 0xFF	; 255
    5bc8:	91 f0       	breq	.+36     	; 0x5bee <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bca:	78 01       	movw	r14, r16
    5bcc:	ff ef       	ldi	r31, 0xFF	; 255
    5bce:	ef 1a       	sub	r14, r31
    5bd0:	ff 0a       	sbc	r15, r31
    5bd2:	61 e0       	ldi	r22, 0x01	; 1
    5bd4:	70 e0       	ldi	r23, 0x00	; 0
    5bd6:	cc 23       	and	r28, r28
    5bd8:	11 f0       	breq	.+4      	; 0x5bde <TWI_ReadPacket+0x60>
    5bda:	60 e0       	ldi	r22, 0x00	; 0
    5bdc:	70 e0       	ldi	r23, 0x00	; 0
    5bde:	c8 01       	movw	r24, r16
    5be0:	b0 df       	rcall	.-160    	; 0x5b42 <TWI_ReceiveByte>
    5be2:	c1 50       	subi	r28, 0x01	; 1
    5be4:	89 2b       	or	r24, r25
    5be6:	11 f0       	breq	.+4      	; 0x5bec <TWI_ReadPacket+0x6e>
    5be8:	87 01       	movw	r16, r14
    5bea:	ed cf       	rjmp	.-38     	; 0x5bc6 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5bec:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5bee:	84 e9       	ldi	r24, 0x94	; 148
    5bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5bf4:	8d 2f       	mov	r24, r29
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
    5bfa:	eb e0       	ldi	r30, 0x0B	; 11
    5bfc:	0c 94 5e e9 	jmp	0x1d2bc	; 0x1d2bc <__epilogue_restores__+0xe>

00005c00 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c00:	a0 e0       	ldi	r26, 0x00	; 0
    5c02:	b0 e0       	ldi	r27, 0x00	; 0
    5c04:	e6 e0       	ldi	r30, 0x06	; 6
    5c06:	fe e2       	ldi	r31, 0x2E	; 46
    5c08:	0c 94 44 e9 	jmp	0x1d288	; 0x1d288 <__prologue_saves__+0x12>
    5c0c:	b4 2e       	mov	r11, r20
    5c0e:	f5 2e       	mov	r15, r21
    5c10:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c12:	8e 7f       	andi	r24, 0xFE	; 254
    5c14:	22 df       	rcall	.-444    	; 0x5a5a <TWI_StartTransmission>
    5c16:	d8 2f       	mov	r29, r24
    5c18:	81 11       	cpse	r24, r1
    5c1a:	1a c0       	rjmp	.+52     	; 0x5c50 <TWI_WritePacket+0x50>
    5c1c:	cb 2c       	mov	r12, r11
    5c1e:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c20:	cc 23       	and	r28, r28
    5c22:	41 f0       	breq	.+16     	; 0x5c34 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c24:	f6 01       	movw	r30, r12
    5c26:	81 91       	ld	r24, Z+
    5c28:	6f 01       	movw	r12, r30
    5c2a:	77 df       	rcall	.-274    	; 0x5b1a <TWI_SendByte>
    5c2c:	c1 50       	subi	r28, 0x01	; 1
    5c2e:	89 2b       	or	r24, r25
    5c30:	b9 f7       	brne	.-18     	; 0x5c20 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c32:	d5 e0       	ldi	r29, 0x05	; 5
    5c34:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c36:	ee 20       	and	r14, r14
    5c38:	41 f0       	breq	.+16     	; 0x5c4a <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c3a:	f6 01       	movw	r30, r12
    5c3c:	81 91       	ld	r24, Z+
    5c3e:	6f 01       	movw	r12, r30
    5c40:	6c df       	rcall	.-296    	; 0x5b1a <TWI_SendByte>
    5c42:	ea 94       	dec	r14
    5c44:	89 2b       	or	r24, r25
    5c46:	b9 f7       	brne	.-18     	; 0x5c36 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c48:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c4a:	84 e9       	ldi	r24, 0x94	; 148
    5c4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c50:	8d 2f       	mov	r24, r29
    5c52:	cd b7       	in	r28, 0x3d	; 61
    5c54:	de b7       	in	r29, 0x3e	; 62
    5c56:	e9 e0       	ldi	r30, 0x09	; 9
    5c58:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__epilogue_restores__+0x12>

00005c5c <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5c5c:	6a e0       	ldi	r22, 0x0A	; 10
    5c5e:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__udivmodqi4>
    5c62:	82 95       	swap	r24
    5c64:	80 7f       	andi	r24, 0xF0	; 240
    5c66:	89 2b       	or	r24, r25
    5c68:	08 95       	ret

00005c6a <BCDtoBIN>:
    5c6a:	98 2f       	mov	r25, r24
    5c6c:	92 95       	swap	r25
    5c6e:	9f 70       	andi	r25, 0x0F	; 15
    5c70:	8f 70       	andi	r24, 0x0F	; 15
    5c72:	2a e0       	ldi	r18, 0x0A	; 10
    5c74:	92 9f       	mul	r25, r18
    5c76:	80 0d       	add	r24, r0
    5c78:	11 24       	eor	r1, r1
    5c7a:	08 95       	ret

00005c7c <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5c7c:	cf 92       	push	r12
    5c7e:	df 92       	push	r13
    5c80:	ef 92       	push	r14
    5c82:	0f 93       	push	r16
    5c84:	1f 93       	push	r17
    5c86:	cf 93       	push	r28
    5c88:	df 93       	push	r29
    5c8a:	00 d0       	rcall	.+0      	; 0x5c8c <rtc_run+0x10>
    5c8c:	1f 92       	push	r1
    5c8e:	cd b7       	in	r28, 0x3d	; 61
    5c90:	de b7       	in	r29, 0x3e	; 62
    5c92:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5c94:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5c96:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5c98:	ee 24       	eor	r14, r14
    5c9a:	e3 94       	inc	r14
    5c9c:	8e 01       	movw	r16, r28
    5c9e:	0f 5f       	subi	r16, 0xFF	; 255
    5ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca2:	21 e0       	ldi	r18, 0x01	; 1
    5ca4:	ae 01       	movw	r20, r28
    5ca6:	4e 5f       	subi	r20, 0xFE	; 254
    5ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    5caa:	64 e1       	ldi	r22, 0x14	; 20
    5cac:	81 ed       	ldi	r24, 0xD1	; 209
    5cae:	67 df       	rcall	.-306    	; 0x5b7e <TWI_ReadPacket>
    5cb0:	88 23       	and	r24, r24
    5cb2:	19 f0       	breq	.+6      	; 0x5cba <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5cb4:	8e ea       	ldi	r24, 0xAE	; 174
    5cb6:	94 e0       	ldi	r25, 0x04	; 4
    5cb8:	2a c0       	rjmp	.+84     	; 0x5d0e <rtc_run+0x92>
    5cba:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5cbc:	9f ef       	ldi	r25, 0xFF	; 255
    5cbe:	c9 16       	cp	r12, r25
    5cc0:	d9 06       	cpc	r13, r25
    5cc2:	59 f4       	brne	.+22     	; 0x5cda <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5cc4:	08 2e       	mov	r0, r24
    5cc6:	00 0c       	add	r0, r0
    5cc8:	99 0b       	sbc	r25, r25
    5cca:	80 95       	com	r24
    5ccc:	90 95       	com	r25
    5cce:	89 2f       	mov	r24, r25
    5cd0:	88 1f       	adc	r24, r24
    5cd2:	88 27       	eor	r24, r24
    5cd4:	88 1f       	adc	r24, r24
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	26 c0       	rjmp	.+76     	; 0x5d26 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5cda:	8f 77       	andi	r24, 0x7F	; 127
    5cdc:	c1 14       	cp	r12, r1
    5cde:	d1 04       	cpc	r13, r1
    5ce0:	11 f4       	brne	.+4      	; 0x5ce6 <rtc_run+0x6a>
    5ce2:	90 e8       	ldi	r25, 0x80	; 128
    5ce4:	01 c0       	rjmp	.+2      	; 0x5ce8 <rtc_run+0x6c>
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	89 2b       	or	r24, r25
    5cea:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5cec:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5cee:	ee 24       	eor	r14, r14
    5cf0:	e3 94       	inc	r14
    5cf2:	8e 01       	movw	r16, r28
    5cf4:	0f 5f       	subi	r16, 0xFF	; 255
    5cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf8:	21 e0       	ldi	r18, 0x01	; 1
    5cfa:	ae 01       	movw	r20, r28
    5cfc:	4d 5f       	subi	r20, 0xFD	; 253
    5cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5d00:	64 e1       	ldi	r22, 0x14	; 20
    5d02:	80 ed       	ldi	r24, 0xD0	; 208
    5d04:	7d df       	rcall	.-262    	; 0x5c00 <TWI_WritePacket>
    5d06:	88 23       	and	r24, r24
    5d08:	69 f0       	breq	.+26     	; 0x5d24 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d0a:	87 e9       	ldi	r24, 0x97	; 151
    5d0c:	94 e0       	ldi	r25, 0x04	; 4
    5d0e:	1f 92       	push	r1
    5d10:	9f 93       	push	r25
    5d12:	8f 93       	push	r24
    5d14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
    5d18:	0f 90       	pop	r0
    5d1a:	0f 90       	pop	r0
    5d1c:	0f 90       	pop	r0
    5d1e:	8f ef       	ldi	r24, 0xFF	; 255
    5d20:	9f ef       	ldi	r25, 0xFF	; 255
    5d22:	01 c0       	rjmp	.+2      	; 0x5d26 <rtc_run+0xaa>
    5d24:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5d26:	0f 90       	pop	r0
    5d28:	0f 90       	pop	r0
    5d2a:	0f 90       	pop	r0
    5d2c:	df 91       	pop	r29
    5d2e:	cf 91       	pop	r28
    5d30:	1f 91       	pop	r17
    5d32:	0f 91       	pop	r16
    5d34:	ef 90       	pop	r14
    5d36:	df 90       	pop	r13
    5d38:	cf 90       	pop	r12
    5d3a:	08 95       	ret

00005d3c <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5d3c:	ef 92       	push	r14
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	cd b7       	in	r28, 0x3d	; 61
    5d48:	de b7       	in	r29, 0x3e	; 62
    5d4a:	29 97       	sbiw	r28, 0x09	; 9
    5d4c:	0f b6       	in	r0, 0x3f	; 63
    5d4e:	f8 94       	cli
    5d50:	de bf       	out	0x3e, r29	; 62
    5d52:	0f be       	out	0x3f, r0	; 63
    5d54:	cd bf       	out	0x3d, r28	; 61
    5d56:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5d58:	fc 01       	movw	r30, r24
    5d5a:	80 81       	ld	r24, Z
    5d5c:	7f df       	rcall	.-258    	; 0x5c5c <BINtoBCD>
    5d5e:	8f 77       	andi	r24, 0x7F	; 127
    5d60:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5d62:	f8 01       	movw	r30, r16
    5d64:	82 81       	ldd	r24, Z+2	; 0x02
    5d66:	7a df       	rcall	.-268    	; 0x5c5c <BINtoBCD>
    5d68:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5d6a:	8a 83       	std	Y+2, r24	; 0x02
    5d6c:	f8 01       	movw	r30, r16
    5d6e:	84 81       	ldd	r24, Z+4	; 0x04
    5d70:	75 df       	rcall	.-278    	; 0x5c5c <BINtoBCD>
    5d72:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5d74:	8b 83       	std	Y+3, r24	; 0x03
    5d76:	f8 01       	movw	r30, r16
    5d78:	84 85       	ldd	r24, Z+12	; 0x0c
    5d7a:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5d7c:	8f 5f       	subi	r24, 0xFF	; 255
    5d7e:	8c 83       	std	Y+4, r24	; 0x04
    5d80:	86 81       	ldd	r24, Z+6	; 0x06
    5d82:	6c df       	rcall	.-296    	; 0x5c5c <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5d84:	8f 73       	andi	r24, 0x3F	; 63
    5d86:	8d 83       	std	Y+5, r24	; 0x05
    5d88:	f8 01       	movw	r30, r16
    5d8a:	80 85       	ldd	r24, Z+8	; 0x08
    5d8c:	8f 5f       	subi	r24, 0xFF	; 255
    5d8e:	66 df       	rcall	.-308    	; 0x5c5c <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5d90:	8f 71       	andi	r24, 0x1F	; 31
    5d92:	8e 83       	std	Y+6, r24	; 0x06
    5d94:	f8 01       	movw	r30, r16
    5d96:	82 85       	ldd	r24, Z+10	; 0x0a
    5d98:	84 56       	subi	r24, 0x64	; 100
    5d9a:	60 df       	rcall	.-320    	; 0x5c5c <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5d9c:	8f 83       	std	Y+7, r24	; 0x07
    5d9e:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5da0:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5da2:	19 86       	std	Y+9, r1	; 0x09
    5da4:	88 e0       	ldi	r24, 0x08	; 8
    5da6:	e8 2e       	mov	r14, r24
    5da8:	8e 01       	movw	r16, r28
    5daa:	0f 5f       	subi	r16, 0xFF	; 255
    5dac:	1f 4f       	sbci	r17, 0xFF	; 255
    5dae:	21 e0       	ldi	r18, 0x01	; 1
    5db0:	ae 01       	movw	r20, r28
    5db2:	47 5f       	subi	r20, 0xF7	; 247
    5db4:	5f 4f       	sbci	r21, 0xFF	; 255
    5db6:	64 e1       	ldi	r22, 0x14	; 20
    5db8:	80 ed       	ldi	r24, 0xD0	; 208
    5dba:	22 df       	rcall	.-444    	; 0x5c00 <TWI_WritePacket>
    5dbc:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5dbe:	61 f0       	breq	.+24     	; 0x5dd8 <rtc_write+0x9c>
    5dc0:	81 e5       	ldi	r24, 0x51	; 81
    5dc2:	94 e0       	ldi	r25, 0x04	; 4
    5dc4:	1f 92       	push	r1
    5dc6:	9f 93       	push	r25
    5dc8:	8f 93       	push	r24
    5dca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5dd6:	01 c0       	rjmp	.+2      	; 0x5dda <rtc_write+0x9e>
}
    5dd8:	81 e0       	ldi	r24, 0x01	; 1
    5dda:	29 96       	adiw	r28, 0x09	; 9
    5ddc:	0f b6       	in	r0, 0x3f	; 63
    5dde:	f8 94       	cli
    5de0:	de bf       	out	0x3e, r29	; 62
    5de2:	0f be       	out	0x3f, r0	; 63
    5de4:	cd bf       	out	0x3d, r28	; 61
    5de6:	df 91       	pop	r29
    5de8:	cf 91       	pop	r28
    5dea:	1f 91       	pop	r17
    5dec:	0f 91       	pop	r16
    5dee:	ef 90       	pop	r14
    5df0:	08 95       	ret

00005df2 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5df2:	ad e0       	ldi	r26, 0x0D	; 13
    5df4:	b0 e0       	ldi	r27, 0x00	; 0
    5df6:	ef ef       	ldi	r30, 0xFF	; 255
    5df8:	fe e2       	ldi	r31, 0x2E	; 46
    5dfa:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    5dfe:	6c 01       	movw	r12, r24
    5e00:	4a 87       	std	Y+10, r20	; 0x0a
    5e02:	5b 87       	std	Y+11, r21	; 0x0b
    5e04:	6c 87       	std	Y+12, r22	; 0x0c
    5e06:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e08:	6a e2       	ldi	r22, 0x2A	; 42
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	16 de       	rcall	.-980    	; 0x5a3a <TWI_Init>

    if(!force)
    5e0e:	c1 14       	cp	r12, r1
    5e10:	d1 04       	cpc	r13, r1
    5e12:	09 f0       	breq	.+2      	; 0x5e16 <rtc_init+0x24>
    5e14:	42 c0       	rjmp	.+132    	; 0x5e9a <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5e16:	8f ef       	ldi	r24, 0xFF	; 255
    5e18:	9f ef       	ldi	r25, 0xFF	; 255
    5e1a:	30 df       	rcall	.-416    	; 0x5c7c <rtc_run>
        if(state < 0)
    5e1c:	87 ff       	sbrs	r24, 7
    5e1e:	05 c0       	rjmp	.+10     	; 0x5e2a <rtc_init+0x38>
        {
            rtc_ok = 0;
    5e20:	10 92 ad 19 	sts	0x19AD, r1	; 0x8019ad <rtc_ok+0x1>
    5e24:	10 92 ac 19 	sts	0x19AC, r1	; 0x8019ac <rtc_ok>
    5e28:	24 c0       	rjmp	.+72     	; 0x5e72 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5e2a:	88 23       	and	r24, r24
    5e2c:	b1 f1       	breq	.+108    	; 0x5e9a <rtc_init+0xa8>
    5e2e:	2d c0       	rjmp	.+90     	; 0x5e8a <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5e30:	ce 01       	movw	r24, r28
    5e32:	01 96       	adiw	r24, 0x01	; 1
    5e34:	6c 01       	movw	r12, r24
    5e36:	88 e0       	ldi	r24, 0x08	; 8
    5e38:	f6 01       	movw	r30, r12
    5e3a:	11 92       	st	Z+, r1
    5e3c:	8a 95       	dec	r24
    5e3e:	e9 f7       	brne	.-6      	; 0x5e3a <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5e40:	98 e0       	ldi	r25, 0x08	; 8
    5e42:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5e44:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e46:	88 e0       	ldi	r24, 0x08	; 8
    5e48:	e8 2e       	mov	r14, r24
    5e4a:	86 01       	movw	r16, r12
    5e4c:	21 e0       	ldi	r18, 0x01	; 1
    5e4e:	ae 01       	movw	r20, r28
    5e50:	47 5f       	subi	r20, 0xF7	; 247
    5e52:	5f 4f       	sbci	r21, 0xFF	; 255
    5e54:	64 e1       	ldi	r22, 0x14	; 20
    5e56:	80 ed       	ldi	r24, 0xD0	; 208
    5e58:	d3 de       	rcall	.-602    	; 0x5c00 <TWI_WritePacket>
    5e5a:	88 23       	and	r24, r24
    5e5c:	61 f0       	breq	.+24     	; 0x5e76 <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5e5e:	82 e6       	ldi	r24, 0x62	; 98
    5e60:	94 e0       	ldi	r25, 0x04	; 4
    5e62:	1f 92       	push	r1
    5e64:	9f 93       	push	r25
    5e66:	8f 93       	push	r24
    5e68:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                return(0);
    5e6c:	0f 90       	pop	r0
    5e6e:	0f 90       	pop	r0
    5e70:	0f 90       	pop	r0
    5e72:	10 e0       	ldi	r17, 0x00	; 0
    5e74:	2c c0       	rjmp	.+88     	; 0x5ece <rtc_init+0xdc>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5e76:	f8 e0       	ldi	r31, 0x08	; 8
    5e78:	ff 0e       	add	r15, r31
    5e7a:	80 e4       	ldi	r24, 0x40	; 64
    5e7c:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e7e:	e2 cf       	rjmp	.-60     	; 0x5e44 <rtc_init+0x52>
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	fb de       	rcall	.-522    	; 0x5c7c <rtc_run>
    5e86:	97 fd       	sbrc	r25, 7
    5e88:	cb cf       	rjmp	.-106    	; 0x5e20 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	90 93 ad 19 	sts	0x19AD, r25	; 0x8019ad <rtc_ok+0x1>
    5e92:	80 93 ac 19 	sts	0x19AC, r24	; 0x8019ac <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e96:	11 e0       	ldi	r17, 0x01	; 1
    5e98:	1a c0       	rjmp	.+52     	; 0x5ece <rtc_init+0xdc>
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5e9e:	ee de       	rcall	.-548    	; 0x5c7c <rtc_run>
    5ea0:	97 fd       	sbrc	r25, 7
    5ea2:	be cf       	rjmp	.-132    	; 0x5e20 <rtc_init+0x2e>
    5ea4:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    5ea6:	0a 96       	adiw	r24, 0x0a	; 10
    5ea8:	3d d7       	rcall	.+3706   	; 0x6d24 <gmtime>
    5eaa:	48 df       	rcall	.-368    	; 0x5d3c <rtc_write>
    5eac:	18 2f       	mov	r17, r24
    5eae:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5eb0:	bf cf       	rjmp	.-130    	; 0x5e30 <rtc_init+0x3e>
    5eb2:	8e e7       	ldi	r24, 0x7E	; 126
    5eb4:	94 e0       	ldi	r25, 0x04	; 4
    5eb6:	1f 92       	push	r1
    5eb8:	9f 93       	push	r25
    5eba:	8f 93       	push	r24
    5ebc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            rtc_ok = 0;
    5ec0:	10 92 ad 19 	sts	0x19AD, r1	; 0x8019ad <rtc_ok+0x1>
    5ec4:	10 92 ac 19 	sts	0x19AC, r1	; 0x8019ac <rtc_ok>
            return 0;
    5ec8:	0f 90       	pop	r0
    5eca:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5ecc:	0f 90       	pop	r0
    5ece:	81 2f       	mov	r24, r17
    5ed0:	2d 96       	adiw	r28, 0x0d	; 13
    5ed2:	e8 e0       	ldi	r30, 0x08	; 8
    5ed4:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

00005ed8 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5ed8:	cf 92       	push	r12
    5eda:	df 92       	push	r13
    5edc:	ef 92       	push	r14
    5ede:	0f 93       	push	r16
    5ee0:	1f 93       	push	r17
    5ee2:	cf 93       	push	r28
    5ee4:	df 93       	push	r29
    5ee6:	cd b7       	in	r28, 0x3d	; 61
    5ee8:	de b7       	in	r29, 0x3e	; 62
    5eea:	29 97       	sbiw	r28, 0x09	; 9
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	f8 94       	cli
    5ef0:	de bf       	out	0x3e, r29	; 62
    5ef2:	0f be       	out	0x3f, r0	; 63
    5ef4:	cd bf       	out	0x3d, r28	; 61
    5ef6:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5ef8:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5efa:	88 e0       	ldi	r24, 0x08	; 8
    5efc:	e8 2e       	mov	r14, r24
    5efe:	8e 01       	movw	r16, r28
    5f00:	0f 5f       	subi	r16, 0xFF	; 255
    5f02:	1f 4f       	sbci	r17, 0xFF	; 255
    5f04:	21 e0       	ldi	r18, 0x01	; 1
    5f06:	ae 01       	movw	r20, r28
    5f08:	47 5f       	subi	r20, 0xF7	; 247
    5f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f0c:	64 e1       	ldi	r22, 0x14	; 20
    5f0e:	81 ed       	ldi	r24, 0xD1	; 209
    5f10:	36 de       	rcall	.-916    	; 0x5b7e <TWI_ReadPacket>
    5f12:	88 23       	and	r24, r24
    5f14:	61 f0       	breq	.+24     	; 0x5f2e <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5f16:	81 e4       	ldi	r24, 0x41	; 65
    5f18:	94 e0       	ldi	r25, 0x04	; 4
    5f1a:	1f 92       	push	r1
    5f1c:	9f 93       	push	r25
    5f1e:	8f 93       	push	r24
    5f20:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return 0;
    5f24:	0f 90       	pop	r0
    5f26:	0f 90       	pop	r0
    5f28:	0f 90       	pop	r0
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	33 c0       	rjmp	.+102    	; 0x5f94 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5f2e:	89 81       	ldd	r24, Y+1	; 0x01
    5f30:	8f 77       	andi	r24, 0x7F	; 127
    5f32:	9b de       	rcall	.-714    	; 0x5c6a <BCDtoBIN>
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	f6 01       	movw	r30, r12
    5f38:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5f3a:	80 83       	st	Z, r24
    5f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f3e:	8f 77       	andi	r24, 0x7F	; 127
    5f40:	94 de       	rcall	.-728    	; 0x5c6a <BCDtoBIN>
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5f46:	93 83       	std	Z+3, r25	; 0x03
    5f48:	82 83       	std	Z+2, r24	; 0x02
    5f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f4c:	8f 73       	andi	r24, 0x3F	; 63
    5f4e:	8d de       	rcall	.-742    	; 0x5c6a <BCDtoBIN>
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	f6 01       	movw	r30, r12
    5f54:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5f56:	84 83       	std	Z+4, r24	; 0x04
    5f58:	8c 81       	ldd	r24, Y+4	; 0x04
    5f5a:	87 70       	andi	r24, 0x07	; 7
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5f60:	95 87       	std	Z+13, r25	; 0x0d
    5f62:	84 87       	std	Z+12, r24	; 0x0c
    5f64:	8d 81       	ldd	r24, Y+5	; 0x05
    5f66:	8f 73       	andi	r24, 0x3F	; 63
    5f68:	80 de       	rcall	.-768    	; 0x5c6a <BCDtoBIN>
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5f6e:	97 83       	std	Z+7, r25	; 0x07
    5f70:	86 83       	std	Z+6, r24	; 0x06
    5f72:	8e 81       	ldd	r24, Y+6	; 0x06
    5f74:	8f 71       	andi	r24, 0x1F	; 31
    5f76:	79 de       	rcall	.-782    	; 0x5c6a <BCDtoBIN>
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	01 97       	sbiw	r24, 0x01	; 1
    5f7c:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5f7e:	91 87       	std	Z+9, r25	; 0x09
    5f80:	80 87       	std	Z+8, r24	; 0x08
    5f82:	8f 81       	ldd	r24, Y+7	; 0x07
    5f84:	72 de       	rcall	.-796    	; 0x5c6a <BCDtoBIN>
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	8c 59       	subi	r24, 0x9C	; 156
    5f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f8c:	f6 01       	movw	r30, r12
    5f8e:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5f90:	82 87       	std	Z+10, r24	; 0x0a
}
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	29 96       	adiw	r28, 0x09	; 9
    5f96:	0f b6       	in	r0, 0x3f	; 63
    5f98:	f8 94       	cli
    5f9a:	de bf       	out	0x3e, r29	; 62
    5f9c:	0f be       	out	0x3f, r0	; 63
    5f9e:	cd bf       	out	0x3d, r28	; 61
    5fa0:	df 91       	pop	r29
    5fa2:	cf 91       	pop	r28
    5fa4:	1f 91       	pop	r17
    5fa6:	0f 91       	pop	r16
    5fa8:	ef 90       	pop	r14
    5faa:	df 90       	pop	r13
    5fac:	cf 90       	pop	r12
    5fae:	08 95       	ret

00005fb0 <i2c_Start>:
    5fb0:	64 e1       	ldi	r22, 0x14	; 20
    5fb2:	84 ee       	ldi	r24, 0xE4	; 228
    5fb4:	52 dd       	rcall	.-1372   	; 0x5a5a <TWI_StartTransmission>
    5fb6:	6a e0       	ldi	r22, 0x0A	; 10
    5fb8:	70 e0       	ldi	r23, 0x00	; 0
    5fba:	80 e0       	ldi	r24, 0x00	; 0
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	3e ca       	rjmp	.-2948   	; 0x543c <delayms>
    5fc0:	08 95       	ret

00005fc2 <i2c_End>:
    5fc2:	47 dd       	rcall	.-1394   	; 0x5a52 <TWI_StopTransmission>
    5fc4:	6a e0       	ldi	r22, 0x0A	; 10
    5fc6:	70 e0       	ldi	r23, 0x00	; 0
    5fc8:	80 e0       	ldi	r24, 0x00	; 0
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	37 ca       	rjmp	.-2962   	; 0x543c <delayms>
    5fce:	08 95       	ret

00005fd0 <LCD_init>:
    5fd0:	ef df       	rcall	.-34     	; 0x5fb0 <i2c_Start>
    5fd2:	8e ef       	ldi	r24, 0xFE	; 254
    5fd4:	a2 dd       	rcall	.-1212   	; 0x5b1a <TWI_SendByte>
    5fd6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_displayControl>
    5fda:	88 60       	ori	r24, 0x08	; 8
    5fdc:	9e dd       	rcall	.-1220   	; 0x5b1a <TWI_SendByte>
    5fde:	8e ef       	ldi	r24, 0xFE	; 254
    5fe0:	9c dd       	rcall	.-1224   	; 0x5b1a <TWI_SendByte>
    5fe2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_displayMode>
    5fe6:	84 60       	ori	r24, 0x04	; 4
    5fe8:	98 dd       	rcall	.-1232   	; 0x5b1a <TWI_SendByte>
    5fea:	8c e7       	ldi	r24, 0x7C	; 124
    5fec:	96 dd       	rcall	.-1236   	; 0x5b1a <TWI_SendByte>
    5fee:	8d e2       	ldi	r24, 0x2D	; 45
    5ff0:	94 dd       	rcall	.-1240   	; 0x5b1a <TWI_SendByte>
    5ff2:	e7 df       	rcall	.-50     	; 0x5fc2 <i2c_End>
    5ff4:	62 e3       	ldi	r22, 0x32	; 50
    5ff6:	70 e0       	ldi	r23, 0x00	; 0
    5ff8:	80 e0       	ldi	r24, 0x00	; 0
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	1f ca       	rjmp	.-3010   	; 0x543c <delayms>
    5ffe:	08 95       	ret

00006000 <LCD_write>:
    6000:	ef 92       	push	r14
    6002:	ff 92       	push	r15
    6004:	0f 93       	push	r16
    6006:	1f 93       	push	r17
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
    600c:	7c 01       	movw	r14, r24
    600e:	8b 01       	movw	r16, r22
    6010:	cf df       	rcall	.-98     	; 0x5fb0 <i2c_Start>
    6012:	e7 01       	movw	r28, r14
    6014:	e0 0e       	add	r14, r16
    6016:	f1 1e       	adc	r15, r17
    6018:	ce 15       	cp	r28, r14
    601a:	df 05       	cpc	r29, r15
    601c:	19 f0       	breq	.+6      	; 0x6024 <LCD_write+0x24>
    601e:	89 91       	ld	r24, Y+
    6020:	7c dd       	rcall	.-1288   	; 0x5b1a <TWI_SendByte>
    6022:	fa cf       	rjmp	.-12     	; 0x6018 <LCD_write+0x18>
    6024:	ce df       	rcall	.-100    	; 0x5fc2 <i2c_End>
    6026:	6a e0       	ldi	r22, 0x0A	; 10
    6028:	70 e0       	ldi	r23, 0x00	; 0
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	06 da       	rcall	.-3060   	; 0x543c <delayms>
    6030:	c8 01       	movw	r24, r16
    6032:	cd b7       	in	r28, 0x3d	; 61
    6034:	de b7       	in	r29, 0x3e	; 62
    6036:	e6 e0       	ldi	r30, 0x06	; 6
    6038:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000603c <LCD_puts>:
    603c:	fc 01       	movw	r30, r24
    603e:	01 90       	ld	r0, Z+
    6040:	00 20       	and	r0, r0
    6042:	e9 f7       	brne	.-6      	; 0x603e <LCD_puts+0x2>
    6044:	31 97       	sbiw	r30, 0x01	; 1
    6046:	bf 01       	movw	r22, r30
    6048:	68 1b       	sub	r22, r24
    604a:	79 0b       	sbc	r23, r25
    604c:	d9 cf       	rjmp	.-78     	; 0x6000 <LCD_write>
    604e:	08 95       	ret

00006050 <LCD_setFastBacklightRGB>:
    6050:	1f 93       	push	r17
    6052:	cf 93       	push	r28
    6054:	df 93       	push	r29
    6056:	18 2f       	mov	r17, r24
    6058:	d6 2f       	mov	r29, r22
    605a:	c4 2f       	mov	r28, r20
    605c:	a9 df       	rcall	.-174    	; 0x5fb0 <i2c_Start>
    605e:	8c e7       	ldi	r24, 0x7C	; 124
    6060:	5c dd       	rcall	.-1352   	; 0x5b1a <TWI_SendByte>
    6062:	8b e2       	ldi	r24, 0x2B	; 43
    6064:	5a dd       	rcall	.-1356   	; 0x5b1a <TWI_SendByte>
    6066:	81 2f       	mov	r24, r17
    6068:	58 dd       	rcall	.-1360   	; 0x5b1a <TWI_SendByte>
    606a:	8d 2f       	mov	r24, r29
    606c:	56 dd       	rcall	.-1364   	; 0x5b1a <TWI_SendByte>
    606e:	8c 2f       	mov	r24, r28
    6070:	54 dd       	rcall	.-1368   	; 0x5b1a <TWI_SendByte>
    6072:	a7 df       	rcall	.-178    	; 0x5fc2 <i2c_End>
    6074:	6a e0       	ldi	r22, 0x0A	; 10
    6076:	70 e0       	ldi	r23, 0x00	; 0
    6078:	80 e0       	ldi	r24, 0x00	; 0
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	df d9       	rcall	.-3138   	; 0x543c <delayms>
    607e:	df 91       	pop	r29
    6080:	cf 91       	pop	r28
    6082:	1f 91       	pop	r17
    6084:	08 95       	ret

00006086 <sep>:
    *token = 0;
    // str points past the token
    if(!len)
        return(NULL);
    return(str);
}
    6086:	8e ef       	ldi	r24, 0xFE	; 254
    6088:	94 e0       	ldi	r25, 0x04	; 4
    608a:	1f 92       	push	r1
    608c:	9f 93       	push	r25
    608e:	8f 93       	push	r24
    6090:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6094:	0f 90       	pop	r0
    6096:	0f 90       	pop	r0
    6098:	0f 90       	pop	r0
    609a:	08 95       	ret

0000609c <isupper>:
    609c:	9c 01       	movw	r18, r24
    609e:	21 54       	subi	r18, 0x41	; 65
    60a0:	31 09       	sbc	r19, r1
    60a2:	81 e0       	ldi	r24, 0x01	; 1
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	2a 31       	cpi	r18, 0x1A	; 26
    60a8:	31 05       	cpc	r19, r1
    60aa:	10 f0       	brcs	.+4      	; 0x60b0 <isupper+0x14>
    60ac:	80 e0       	ldi	r24, 0x00	; 0
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	08 95       	ret

000060b2 <islower>:
    60b2:	9c 01       	movw	r18, r24
    60b4:	21 56       	subi	r18, 0x61	; 97
    60b6:	31 09       	sbc	r19, r1
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	2a 31       	cpi	r18, 0x1A	; 26
    60be:	31 05       	cpc	r19, r1
    60c0:	10 f0       	brcs	.+4      	; 0x60c6 <islower+0x14>
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	08 95       	ret

000060c8 <tolower>:
    60c8:	cf 93       	push	r28
    60ca:	df 93       	push	r29
    60cc:	ec 01       	movw	r28, r24
    60ce:	e6 df       	rcall	.-52     	; 0x609c <isupper>
    60d0:	89 2b       	or	r24, r25
    60d2:	19 f0       	breq	.+6      	; 0x60da <tolower+0x12>
    60d4:	ce 01       	movw	r24, r28
    60d6:	80 96       	adiw	r24, 0x20	; 32
    60d8:	01 c0       	rjmp	.+2      	; 0x60dc <tolower+0x14>
    60da:	ce 01       	movw	r24, r28
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	08 95       	ret

000060e2 <toupper>:
    60e2:	cf 93       	push	r28
    60e4:	df 93       	push	r29
    60e6:	ec 01       	movw	r28, r24
    60e8:	e4 df       	rcall	.-56     	; 0x60b2 <islower>
    60ea:	89 2b       	or	r24, r25
    60ec:	19 f0       	breq	.+6      	; 0x60f4 <toupper+0x12>
    60ee:	ce 01       	movw	r24, r28
    60f0:	80 97       	sbiw	r24, 0x20	; 32
    60f2:	01 c0       	rjmp	.+2      	; 0x60f6 <toupper+0x14>
    60f4:	ce 01       	movw	r24, r28
    60f6:	df 91       	pop	r29
    60f8:	cf 91       	pop	r28
    60fa:	08 95       	ret

000060fc <strcpy>:
    60fc:	fc 01       	movw	r30, r24
    60fe:	db 01       	movw	r26, r22
    6100:	2d 91       	ld	r18, X+
    6102:	bd 01       	movw	r22, r26
    6104:	01 96       	adiw	r24, 0x01	; 1
    6106:	22 23       	and	r18, r18
    6108:	11 f0       	breq	.+4      	; 0x610e <strcpy+0x12>
    610a:	20 83       	st	Z, r18
    610c:	f7 cf       	rjmp	.-18     	; 0x60fc <strcpy>
    610e:	10 82       	st	Z, r1
    6110:	08 95       	ret

00006112 <strncpy>:
    6112:	db 01       	movw	r26, r22
    6114:	fc 01       	movw	r30, r24
    6116:	2d 91       	ld	r18, X+
    6118:	21 11       	cpse	r18, r1
    611a:	03 c0       	rjmp	.+6      	; 0x6122 <strncpy+0x10>
    611c:	4e 0f       	add	r20, r30
    611e:	5f 1f       	adc	r21, r31
    6120:	08 c0       	rjmp	.+16     	; 0x6132 <strncpy+0x20>
    6122:	41 15       	cp	r20, r1
    6124:	51 05       	cpc	r21, r1
    6126:	21 f0       	breq	.+8      	; 0x6130 <strncpy+0x1e>
    6128:	21 93       	st	Z+, r18
    612a:	41 50       	subi	r20, 0x01	; 1
    612c:	51 09       	sbc	r21, r1
    612e:	f3 cf       	rjmp	.-26     	; 0x6116 <strncpy+0x4>
    6130:	08 95       	ret
    6132:	4e 17       	cp	r20, r30
    6134:	5f 07       	cpc	r21, r31
    6136:	11 f0       	breq	.+4      	; 0x613c <strncpy+0x2a>
    6138:	11 92       	st	Z+, r1
    613a:	fb cf       	rjmp	.-10     	; 0x6132 <strncpy+0x20>
    613c:	08 95       	ret

0000613e <strcat>:
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
    6142:	d8 2f       	mov	r29, r24
    6144:	c9 2f       	mov	r28, r25
    6146:	28 2f       	mov	r18, r24
    6148:	39 2f       	mov	r19, r25
    614a:	c9 01       	movw	r24, r18
    614c:	2f 5f       	subi	r18, 0xFF	; 255
    614e:	3f 4f       	sbci	r19, 0xFF	; 255
    6150:	fc 01       	movw	r30, r24
    6152:	40 81       	ld	r20, Z
    6154:	41 11       	cpse	r20, r1
    6156:	f9 cf       	rjmp	.-14     	; 0x614a <strcat+0xc>
    6158:	d1 df       	rcall	.-94     	; 0x60fc <strcpy>
    615a:	8d 2f       	mov	r24, r29
    615c:	9c 2f       	mov	r25, r28
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	08 95       	ret

00006164 <reverse>:
    6164:	fc 01       	movw	r30, r24
    6166:	01 90       	ld	r0, Z+
    6168:	00 20       	and	r0, r0
    616a:	e9 f7       	brne	.-6      	; 0x6166 <reverse+0x2>
    616c:	31 97       	sbiw	r30, 0x01	; 1
    616e:	e8 1b       	sub	r30, r24
    6170:	f9 0b       	sbc	r31, r25
    6172:	af 01       	movw	r20, r30
    6174:	55 95       	asr	r21
    6176:	47 95       	ror	r20
    6178:	e8 0f       	add	r30, r24
    617a:	f9 1f       	adc	r31, r25
    617c:	dc 01       	movw	r26, r24
    617e:	9d 01       	movw	r18, r26
    6180:	28 1b       	sub	r18, r24
    6182:	39 0b       	sbc	r19, r25
    6184:	24 17       	cp	r18, r20
    6186:	35 07       	cpc	r19, r21
    6188:	2c f4       	brge	.+10     	; 0x6194 <reverse+0x30>
    618a:	22 91       	ld	r18, -Z
    618c:	3c 91       	ld	r19, X
    618e:	30 83       	st	Z, r19
    6190:	2d 93       	st	X+, r18
    6192:	f5 cf       	rjmp	.-22     	; 0x617e <reverse+0x1a>
    6194:	08 95       	ret

00006196 <strupper>:
    6196:	cf 93       	push	r28
    6198:	df 93       	push	r29
    619a:	ec 01       	movw	r28, r24
    619c:	88 81       	ld	r24, Y
    619e:	88 23       	and	r24, r24
    61a0:	21 f0       	breq	.+8      	; 0x61aa <strupper+0x14>
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	9e df       	rcall	.-196    	; 0x60e2 <toupper>
    61a6:	89 93       	st	Y+, r24
    61a8:	f9 cf       	rjmp	.-14     	; 0x619c <strupper+0x6>
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	08 95       	ret

000061b0 <trim_tail>:
    61b0:	fc 01       	movw	r30, r24
    61b2:	01 90       	ld	r0, Z+
    61b4:	00 20       	and	r0, r0
    61b6:	e9 f7       	brne	.-6      	; 0x61b2 <trim_tail+0x2>
    61b8:	31 97       	sbiw	r30, 0x01	; 1
    61ba:	e8 17       	cp	r30, r24
    61bc:	f9 07       	cpc	r31, r25
    61be:	29 f0       	breq	.+10     	; 0x61ca <trim_tail+0x1a>
    61c0:	22 91       	ld	r18, -Z
    61c2:	21 32       	cpi	r18, 0x21	; 33
    61c4:	10 f4       	brcc	.+4      	; 0x61ca <trim_tail+0x1a>
    61c6:	10 82       	st	Z, r1
    61c8:	f8 cf       	rjmp	.-16     	; 0x61ba <trim_tail+0xa>
    61ca:	08 95       	ret

000061cc <skipspaces>:
    61cc:	00 97       	sbiw	r24, 0x00	; 0
    61ce:	39 f0       	breq	.+14     	; 0x61de <skipspaces+0x12>
    61d0:	fc 01       	movw	r30, r24
    61d2:	cf 01       	movw	r24, r30
    61d4:	21 91       	ld	r18, Z+
    61d6:	20 32       	cpi	r18, 0x20	; 32
    61d8:	e1 f3       	breq	.-8      	; 0x61d2 <skipspaces+0x6>
    61da:	29 30       	cpi	r18, 0x09	; 9
    61dc:	d1 f3       	breq	.-12     	; 0x61d2 <skipspaces+0x6>
    61de:	08 95       	ret

000061e0 <strcmp>:
    61e0:	dc 01       	movw	r26, r24
    61e2:	fb 01       	movw	r30, r22
    61e4:	2d 91       	ld	r18, X+
    61e6:	41 91       	ld	r20, Z+
    61e8:	50 e0       	ldi	r21, 0x00	; 0
    61ea:	30 e0       	ldi	r19, 0x00	; 0
    61ec:	c9 01       	movw	r24, r18
    61ee:	84 1b       	sub	r24, r20
    61f0:	95 0b       	sbc	r25, r21
    61f2:	11 f4       	brne	.+4      	; 0x61f8 <strcmp+0x18>
    61f4:	45 2b       	or	r20, r21
    61f6:	b1 f7       	brne	.-20     	; 0x61e4 <strcmp+0x4>
    61f8:	08 95       	ret

000061fa <strncmp>:
    61fa:	fc 01       	movw	r30, r24
    61fc:	db 01       	movw	r26, r22
    61fe:	48 0f       	add	r20, r24
    6200:	59 1f       	adc	r21, r25
    6202:	e4 17       	cp	r30, r20
    6204:	f5 07       	cpc	r31, r21
    6206:	59 f0       	breq	.+22     	; 0x621e <strncmp+0x24>
    6208:	21 91       	ld	r18, Z+
    620a:	6d 91       	ld	r22, X+
    620c:	70 e0       	ldi	r23, 0x00	; 0
    620e:	30 e0       	ldi	r19, 0x00	; 0
    6210:	c9 01       	movw	r24, r18
    6212:	86 1b       	sub	r24, r22
    6214:	97 0b       	sbc	r25, r23
    6216:	29 f4       	brne	.+10     	; 0x6222 <strncmp+0x28>
    6218:	67 2b       	or	r22, r23
    621a:	99 f7       	brne	.-26     	; 0x6202 <strncmp+0x8>
    621c:	02 c0       	rjmp	.+4      	; 0x6222 <strncmp+0x28>
    621e:	80 e0       	ldi	r24, 0x00	; 0
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	08 95       	ret

00006224 <strcasecmp>:
    6224:	ef 92       	push	r14
    6226:	ff 92       	push	r15
    6228:	0f 93       	push	r16
    622a:	1f 93       	push	r17
    622c:	cf 93       	push	r28
    622e:	df 93       	push	r29
    6230:	7c 01       	movw	r14, r24
    6232:	8b 01       	movw	r16, r22
    6234:	f7 01       	movw	r30, r14
    6236:	81 91       	ld	r24, Z+
    6238:	7f 01       	movw	r14, r30
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	52 df       	rcall	.-348    	; 0x60e2 <toupper>
    623e:	ec 01       	movw	r28, r24
    6240:	f8 01       	movw	r30, r16
    6242:	81 91       	ld	r24, Z+
    6244:	8f 01       	movw	r16, r30
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	4c df       	rcall	.-360    	; 0x60e2 <toupper>
    624a:	9c 01       	movw	r18, r24
    624c:	ce 01       	movw	r24, r28
    624e:	82 1b       	sub	r24, r18
    6250:	93 0b       	sbc	r25, r19
    6252:	11 f4       	brne	.+4      	; 0x6258 <strcasecmp+0x34>
    6254:	23 2b       	or	r18, r19
    6256:	71 f7       	brne	.-36     	; 0x6234 <strcasecmp+0x10>
    6258:	cd b7       	in	r28, 0x3d	; 61
    625a:	de b7       	in	r29, 0x3e	; 62
    625c:	e6 e0       	ldi	r30, 0x06	; 6
    625e:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00006262 <strncasecmp>:
    6262:	a0 e0       	ldi	r26, 0x00	; 0
    6264:	b0 e0       	ldi	r27, 0x00	; 0
    6266:	e7 e3       	ldi	r30, 0x37	; 55
    6268:	f1 e3       	ldi	r31, 0x31	; 49
    626a:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    626e:	8c 01       	movw	r16, r24
    6270:	7b 01       	movw	r14, r22
    6272:	6c 01       	movw	r12, r24
    6274:	c4 0e       	add	r12, r20
    6276:	d5 1e       	adc	r13, r21
    6278:	0c 15       	cp	r16, r12
    627a:	1d 05       	cpc	r17, r13
    627c:	99 f0       	breq	.+38     	; 0x62a4 <strncasecmp+0x42>
    627e:	f8 01       	movw	r30, r16
    6280:	81 91       	ld	r24, Z+
    6282:	8f 01       	movw	r16, r30
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	2d df       	rcall	.-422    	; 0x60e2 <toupper>
    6288:	ec 01       	movw	r28, r24
    628a:	f7 01       	movw	r30, r14
    628c:	81 91       	ld	r24, Z+
    628e:	7f 01       	movw	r14, r30
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	27 df       	rcall	.-434    	; 0x60e2 <toupper>
    6294:	9c 01       	movw	r18, r24
    6296:	ce 01       	movw	r24, r28
    6298:	82 1b       	sub	r24, r18
    629a:	93 0b       	sbc	r25, r19
    629c:	29 f4       	brne	.+10     	; 0x62a8 <strncasecmp+0x46>
    629e:	23 2b       	or	r18, r19
    62a0:	59 f7       	brne	.-42     	; 0x6278 <strncasecmp+0x16>
    62a2:	02 c0       	rjmp	.+4      	; 0x62a8 <strncasecmp+0x46>
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	cd b7       	in	r28, 0x3d	; 61
    62aa:	de b7       	in	r29, 0x3e	; 62
    62ac:	e8 e0       	ldi	r30, 0x08	; 8
    62ae:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

000062b2 <MATCH>:
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	fb 01       	movw	r30, r22
    62b8:	01 90       	ld	r0, Z+
    62ba:	00 20       	and	r0, r0
    62bc:	e9 f7       	brne	.-6      	; 0x62b8 <MATCH+0x6>
    62be:	31 97       	sbiw	r30, 0x01	; 1
    62c0:	ef 01       	movw	r28, r30
    62c2:	c6 1b       	sub	r28, r22
    62c4:	d7 0b       	sbc	r29, r23
    62c6:	8c df       	rcall	.-232    	; 0x61e0 <strcmp>
    62c8:	89 2b       	or	r24, r25
    62ca:	11 f4       	brne	.+4      	; 0x62d0 <MATCH+0x1e>
    62cc:	ce 01       	movw	r24, r28
    62ce:	02 c0       	rjmp	.+4      	; 0x62d4 <MATCH+0x22>
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	df 91       	pop	r29
    62d6:	cf 91       	pop	r28
    62d8:	08 95       	ret

000062da <MATCHARGS>:
    62da:	ef 92       	push	r14
    62dc:	ff 92       	push	r15
    62de:	0f 93       	push	r16
    62e0:	1f 93       	push	r17
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	f6 2e       	mov	r15, r22
    62e8:	e7 2e       	mov	r14, r23
    62ea:	ea 01       	movw	r28, r20
    62ec:	89 01       	movw	r16, r18
    62ee:	e1 df       	rcall	.-62     	; 0x62b2 <MATCH>
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	e9 f0       	breq	.+58     	; 0x632e <MATCHARGS+0x54>
    62f4:	0c 17       	cp	r16, r28
    62f6:	1d 07       	cpc	r17, r29
    62f8:	c4 f4       	brge	.+48     	; 0x632a <MATCHARGS+0x50>
    62fa:	1f 93       	push	r17
    62fc:	0f 93       	push	r16
    62fe:	df 93       	push	r29
    6300:	cf 93       	push	r28
    6302:	ef 92       	push	r14
    6304:	ff 92       	push	r15
    6306:	88 ed       	ldi	r24, 0xD8	; 216
    6308:	94 e0       	ldi	r25, 0x04	; 4
    630a:	1f 92       	push	r1
    630c:	9f 93       	push	r25
    630e:	8f 93       	push	r24
    6310:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6314:	8d b7       	in	r24, 0x3d	; 61
    6316:	9e b7       	in	r25, 0x3e	; 62
    6318:	09 96       	adiw	r24, 0x09	; 9
    631a:	0f b6       	in	r0, 0x3f	; 63
    631c:	f8 94       	cli
    631e:	9e bf       	out	0x3e, r25	; 62
    6320:	0f be       	out	0x3f, r0	; 63
    6322:	8d bf       	out	0x3d, r24	; 61
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	02 c0       	rjmp	.+4      	; 0x632e <MATCHARGS+0x54>
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	cd b7       	in	r28, 0x3d	; 61
    6330:	de b7       	in	r29, 0x3e	; 62
    6332:	e6 e0       	ldi	r30, 0x06	; 6
    6334:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00006338 <MATCHI>:
    6338:	cf 93       	push	r28
    633a:	df 93       	push	r29
    633c:	fb 01       	movw	r30, r22
    633e:	01 90       	ld	r0, Z+
    6340:	00 20       	and	r0, r0
    6342:	e9 f7       	brne	.-6      	; 0x633e <MATCHI+0x6>
    6344:	31 97       	sbiw	r30, 0x01	; 1
    6346:	ef 01       	movw	r28, r30
    6348:	c6 1b       	sub	r28, r22
    634a:	d7 0b       	sbc	r29, r23
    634c:	6b df       	rcall	.-298    	; 0x6224 <strcasecmp>
    634e:	89 2b       	or	r24, r25
    6350:	11 f4       	brne	.+4      	; 0x6356 <MATCHI+0x1e>
    6352:	ce 01       	movw	r24, r28
    6354:	02 c0       	rjmp	.+4      	; 0x635a <MATCHI+0x22>
    6356:	80 e0       	ldi	r24, 0x00	; 0
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	08 95       	ret

00006360 <MATCHI_LEN>:
    6360:	cf 93       	push	r28
    6362:	df 93       	push	r29
    6364:	00 97       	sbiw	r24, 0x00	; 0
    6366:	89 f0       	breq	.+34     	; 0x638a <MATCHI_LEN+0x2a>
    6368:	61 15       	cp	r22, r1
    636a:	71 05       	cpc	r23, r1
    636c:	71 f0       	breq	.+28     	; 0x638a <MATCHI_LEN+0x2a>
    636e:	eb 01       	movw	r28, r22
    6370:	09 90       	ld	r0, Y+
    6372:	00 20       	and	r0, r0
    6374:	e9 f7       	brne	.-6      	; 0x6370 <MATCHI_LEN+0x10>
    6376:	21 97       	sbiw	r28, 0x01	; 1
    6378:	c6 1b       	sub	r28, r22
    637a:	d7 0b       	sbc	r29, r23
    637c:	31 f0       	breq	.+12     	; 0x638a <MATCHI_LEN+0x2a>
    637e:	ae 01       	movw	r20, r28
    6380:	70 df       	rcall	.-288    	; 0x6262 <strncasecmp>
    6382:	89 2b       	or	r24, r25
    6384:	11 f4       	brne	.+4      	; 0x638a <MATCHI_LEN+0x2a>
    6386:	ce 01       	movw	r24, r28
    6388:	02 c0       	rjmp	.+4      	; 0x638e <MATCHI_LEN+0x2e>
    638a:	80 e0       	ldi	r24, 0x00	; 0
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	08 95       	ret

00006394 <split_args>:
    6394:	a0 e0       	ldi	r26, 0x00	; 0
    6396:	b0 e0       	ldi	r27, 0x00	; 0
    6398:	e0 ed       	ldi	r30, 0xD0	; 208
    639a:	f1 e3       	ldi	r31, 0x31	; 49
    639c:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    63a0:	dc 01       	movw	r26, r24
    63a2:	6a 01       	movw	r12, r20
    63a4:	8b 01       	movw	r16, r22
    63a6:	fb 01       	movw	r30, r22
    63a8:	80 e0       	ldi	r24, 0x00	; 0
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	8c 15       	cp	r24, r12
    63ae:	9d 05       	cpc	r25, r13
    63b0:	24 f4       	brge	.+8      	; 0x63ba <split_args+0x26>
    63b2:	11 92       	st	Z+, r1
    63b4:	11 92       	st	Z+, r1
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	f9 cf       	rjmp	.-14     	; 0x63ac <split_args+0x18>
    63ba:	c1 14       	cp	r12, r1
    63bc:	d1 04       	cpc	r13, r1
    63be:	d9 f1       	breq	.+118    	; 0x6436 <split_args+0xa2>
    63c0:	10 97       	sbiw	r26, 0x00	; 0
    63c2:	c9 f1       	breq	.+114    	; 0x6436 <split_args+0xa2>
    63c4:	ee 24       	eor	r14, r14
    63c6:	e3 94       	inc	r14
    63c8:	f1 2c       	mov	r15, r1
    63ca:	c0 e0       	ldi	r28, 0x00	; 0
    63cc:	d0 e0       	ldi	r29, 0x00	; 0
    63ce:	8c 91       	ld	r24, X
    63d0:	88 23       	and	r24, r24
    63d2:	b1 f1       	breq	.+108    	; 0x6440 <split_args+0xac>
    63d4:	cc 15       	cp	r28, r12
    63d6:	dd 05       	cpc	r29, r13
    63d8:	9c f5       	brge	.+102    	; 0x6440 <split_args+0xac>
    63da:	cd 01       	movw	r24, r26
    63dc:	f7 de       	rcall	.-530    	; 0x61cc <skipspaces>
    63de:	dc 01       	movw	r26, r24
    63e0:	2c 91       	ld	r18, X
    63e2:	22 23       	and	r18, r18
    63e4:	69 f1       	breq	.+90     	; 0x6440 <split_args+0xac>
    63e6:	22 32       	cpi	r18, 0x22	; 34
    63e8:	79 f4       	brne	.+30     	; 0x6408 <split_args+0x74>
    63ea:	fc 01       	movw	r30, r24
    63ec:	31 96       	adiw	r30, 0x01	; 1
    63ee:	d8 01       	movw	r26, r16
    63f0:	ed 93       	st	X+, r30
    63f2:	fc 93       	st	X, r31
    63f4:	df 01       	movw	r26, r30
    63f6:	80 81       	ld	r24, Z
    63f8:	31 96       	adiw	r30, 0x01	; 1
    63fa:	88 23       	and	r24, r24
    63fc:	a9 f0       	breq	.+42     	; 0x6428 <split_args+0x94>
    63fe:	82 32       	cpi	r24, 0x22	; 34
    6400:	c9 f7       	brne	.-14     	; 0x63f4 <split_args+0x60>
    6402:	1c 92       	st	X, r1
    6404:	df 01       	movw	r26, r30
    6406:	10 c0       	rjmp	.+32     	; 0x6428 <split_args+0x94>
    6408:	f8 01       	movw	r30, r16
    640a:	91 83       	std	Z+1, r25	; 0x01
    640c:	80 83       	st	Z, r24
    640e:	fc 01       	movw	r30, r24
    6410:	2e 2f       	mov	r18, r30
    6412:	9f 2f       	mov	r25, r31
    6414:	81 91       	ld	r24, Z+
    6416:	3f ed       	ldi	r19, 0xDF	; 223
    6418:	38 0f       	add	r19, r24
    641a:	3e 35       	cpi	r19, 0x5E	; 94
    641c:	c8 f3       	brcs	.-14     	; 0x6410 <split_args+0x7c>
    641e:	88 23       	and	r24, r24
    6420:	69 f0       	breq	.+26     	; 0x643c <split_args+0xa8>
    6422:	a2 2f       	mov	r26, r18
    6424:	b9 2f       	mov	r27, r25
    6426:	1d 92       	st	X+, r1
    6428:	21 96       	adiw	r28, 0x01	; 1
    642a:	ff ef       	ldi	r31, 0xFF	; 255
    642c:	ef 1a       	sub	r14, r31
    642e:	ff 0a       	sbc	r15, r31
    6430:	0e 5f       	subi	r16, 0xFE	; 254
    6432:	1f 4f       	sbci	r17, 0xFF	; 255
    6434:	cc cf       	rjmp	.-104    	; 0x63ce <split_args+0x3a>
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	03 c0       	rjmp	.+6      	; 0x6442 <split_args+0xae>
    643c:	c7 01       	movw	r24, r14
    643e:	01 c0       	rjmp	.+2      	; 0x6442 <split_args+0xae>
    6440:	ce 01       	movw	r24, r28
    6442:	cd b7       	in	r28, 0x3d	; 61
    6444:	de b7       	in	r29, 0x3e	; 62
    6446:	e8 e0       	ldi	r30, 0x08	; 8
    6448:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000644c <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    644c:	ef 92       	push	r14
    644e:	ff 92       	push	r15
    6450:	0f 93       	push	r16
    6452:	1f 93       	push	r17
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    645a:	8b 01       	movw	r16, r22
    645c:	b7 de       	rcall	.-658    	; 0x61cc <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    645e:	9c 01       	movw	r18, r24
    6460:	fc 01       	movw	r30, r24
    6462:	ef 01       	movw	r28, r30
    6464:	c2 1b       	sub	r28, r18
    6466:	d3 0b       	sbc	r29, r19
    6468:	91 91       	ld	r25, Z+
    646a:	91 52       	subi	r25, 0x21	; 33
    646c:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    646e:	c8 f3       	brcs	.-14     	; 0x6462 <token+0x16>
    6470:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    6472:	91 f0       	breq	.+36     	; 0x6498 <token+0x4c>
    6474:	f8 01       	movw	r30, r16
    6476:	01 90       	ld	r0, Z+
    6478:	00 20       	and	r0, r0
    647a:	e9 f7       	brne	.-6      	; 0x6476 <token+0x2a>
    647c:	31 97       	sbiw	r30, 0x01	; 1
    647e:	e0 1b       	sub	r30, r16

    if(len != patlen)
    6480:	f1 0b       	sbc	r31, r17
    6482:	ec 17       	cp	r30, r28
    6484:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    6486:	31 f4       	brne	.+12     	; 0x6494 <token+0x48>
    6488:	ae 01       	movw	r20, r28
    648a:	b8 01       	movw	r22, r16
    648c:	c7 01       	movw	r24, r14
    648e:	b5 de       	rcall	.-662    	; 0x61fa <strncmp>
    6490:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    6492:	11 f0       	breq	.+4      	; 0x6498 <token+0x4c>
    6494:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6496:	d0 e0       	ldi	r29, 0x00	; 0
    6498:	ce 01       	movw	r24, r28
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
    649e:	e6 e0       	ldi	r30, 0x06	; 6
    64a0:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

000064a4 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    64a4:	a2 e0       	ldi	r26, 0x02	; 2
    64a6:	b0 e0       	ldi	r27, 0x00	; 0
    64a8:	e8 e5       	ldi	r30, 0x58	; 88
    64aa:	f2 e3       	ldi	r31, 0x32	; 50
    64ac:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    64b0:	8d de       	rcall	.-742    	; 0x61cc <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    64b2:	8c 01       	movw	r16, r24
    64b4:	65 e0       	ldi	r22, 0x05	; 5
    64b6:	77 e0       	ldi	r23, 0x07	; 7
    64b8:	53 df       	rcall	.-346    	; 0x6360 <MATCHI_LEN>
    64ba:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    64bc:	29 f0       	breq	.+10     	; 0x64c8 <get_value+0x24>
    64be:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    64c0:	19 1f       	adc	r17, r25
    64c2:	40 e1       	ldi	r20, 0x10	; 16
    64c4:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    64c6:	18 c0       	rjmp	.+48     	; 0x64f8 <get_value+0x54>
    64c8:	68 e0       	ldi	r22, 0x08	; 8
    64ca:	77 e0       	ldi	r23, 0x07	; 7
    64cc:	c8 01       	movw	r24, r16
    64ce:	48 df       	rcall	.-368    	; 0x6360 <MATCHI_LEN>
    64d0:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    64d2:	29 f0       	breq	.+10     	; 0x64de <get_value+0x3a>
    64d4:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    64d6:	19 1f       	adc	r17, r25
    64d8:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    64da:	50 e0       	ldi	r21, 0x00	; 0
    64dc:	0d c0       	rjmp	.+26     	; 0x64f8 <get_value+0x54>
    64de:	6b e0       	ldi	r22, 0x0B	; 11
    64e0:	77 e0       	ldi	r23, 0x07	; 7
    64e2:	c8 01       	movw	r24, r16
    64e4:	3d df       	rcall	.-390    	; 0x6360 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    64e6:	00 97       	sbiw	r24, 0x00	; 0
    64e8:	29 f0       	breq	.+10     	; 0x64f4 <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    64ea:	08 0f       	add	r16, r24
    64ec:	19 1f       	adc	r17, r25
    64ee:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    64f0:	50 e0       	ldi	r21, 0x00	; 0
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    64f4:	4a e0       	ldi	r20, 0x0A	; 10
    64f6:	50 e0       	ldi	r21, 0x00	; 0
    64f8:	be 01       	movw	r22, r28
    64fa:	6f 5f       	subi	r22, 0xFF	; 255
    64fc:	7f 4f       	sbci	r23, 0xFF	; 255
    64fe:	c8 01       	movw	r24, r16
}
    6500:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    6504:	22 96       	adiw	r28, 0x02	; 2
    6506:	e4 e0       	ldi	r30, 0x04	; 4
    6508:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000650c <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    650c:	78 94       	sei
    650e:	08 95       	ret

00006510 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6510:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6512:	89 e0       	ldi	r24, 0x09	; 9
    6514:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6518:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    651c:	8f e1       	ldi	r24, 0x1F	; 31
    651e:	9e e4       	ldi	r25, 0x4E	; 78
    6520:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6524:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6528:	ef e6       	ldi	r30, 0x6F	; 111
    652a:	f0 e0       	ldi	r31, 0x00	; 0
    652c:	80 81       	ld	r24, Z
    652e:	82 60       	ori	r24, 0x02	; 2
    6530:	80 83       	st	Z, r24
    sei();
    6532:	78 94       	sei
    6534:	08 95       	ret

00006536 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6536:	1f 92       	push	r1
    6538:	0f 92       	push	r0
    653a:	0f b6       	in	r0, 0x3f	; 63
    653c:	0f 92       	push	r0
    653e:	11 24       	eor	r1, r1
    6540:	0b b6       	in	r0, 0x3b	; 59
    6542:	0f 92       	push	r0
    6544:	2f 93       	push	r18
    6546:	3f 93       	push	r19
    6548:	4f 93       	push	r20
    654a:	5f 93       	push	r21
    654c:	6f 93       	push	r22
    654e:	7f 93       	push	r23
    6550:	8f 93       	push	r24
    6552:	9f 93       	push	r25
    6554:	af 93       	push	r26
    6556:	bf 93       	push	r27
    6558:	ef 93       	push	r30
    execute_timers();
    655a:	ff 93       	push	r31
}
    655c:	26 d2       	rcall	.+1100   	; 0x69aa <execute_timers>
    655e:	ff 91       	pop	r31
    6560:	ef 91       	pop	r30
    6562:	bf 91       	pop	r27
    6564:	af 91       	pop	r26
    6566:	9f 91       	pop	r25
    6568:	8f 91       	pop	r24
    656a:	7f 91       	pop	r23
    656c:	6f 91       	pop	r22
    656e:	5f 91       	pop	r21
    6570:	4f 91       	pop	r20
    6572:	3f 91       	pop	r19
    6574:	2f 91       	pop	r18
    6576:	0f 90       	pop	r0
    6578:	0b be       	out	0x3b, r0	; 59
    657a:	0f 90       	pop	r0
    657c:	0f be       	out	0x3f, r0	; 63
    657e:	0f 90       	pop	r0
    6580:	1f 90       	pop	r1
    6582:	18 95       	reti

00006584 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6584:	0f 93       	push	r16
    6586:	1f 93       	push	r17
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    658e:	f8 94       	cli

    count1 = TCNT1;
    6590:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6594:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6598:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <__clock>
    659c:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <__clock+0x1>
    65a0:	a0 91 07 1a 	lds	r26, 0x1A07	; 0x801a07 <__clock+0x2>
    65a4:	b0 91 08 1a 	lds	r27, 0x1A08	; 0x801a08 <__clock+0x3>
    65a8:	80 83       	st	Z, r24
    65aa:	91 83       	std	Z+1, r25	; 0x01
    65ac:	a2 83       	std	Z+2, r26	; 0x02
    65ae:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    65b0:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <__clock+0x4>
    65b4:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <__clock+0x5>
    65b8:	a0 91 0b 1a 	lds	r26, 0x1A0B	; 0x801a0b <__clock+0x6>
    65bc:	b0 91 0c 1a 	lds	r27, 0x1A0C	; 0x801a0c <__clock+0x7>
    65c0:	84 83       	std	Z+4, r24	; 0x04
    65c2:	95 83       	std	Z+5, r25	; 0x05
    65c4:	a6 83       	std	Z+6, r26	; 0x06
    65c6:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    65c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    65cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    65d0:	b1 9b       	sbis	0x16, 1	; 22
    65d2:	03 c0       	rjmp	.+6      	; 0x65da <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    65d4:	c0 e0       	ldi	r28, 0x00	; 0
    65d6:	d0 e0       	ldi	r29, 0x00	; 0
    65d8:	3f c0       	rjmp	.+126    	; 0x6658 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    65da:	82 17       	cp	r24, r18
    65dc:	93 07       	cpc	r25, r19
    65de:	d0 f1       	brcs	.+116    	; 0x6654 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    65e0:	c0 e0       	ldi	r28, 0x00	; 0
    65e2:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    65e4:	40 e0       	ldi	r20, 0x00	; 0
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    65ea:	9a 01       	movw	r18, r20
    65ec:	ab 01       	movw	r20, r22
    65ee:	28 0f       	add	r18, r24
    65f0:	39 1f       	adc	r19, r25
    65f2:	41 1d       	adc	r20, r1
    65f4:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    65f6:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    65f8:	a2 e3       	ldi	r26, 0x32	; 50
    65fa:	b0 e0       	ldi	r27, 0x00	; 0
    65fc:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    6600:	04 81       	ldd	r16, Z+4	; 0x04
    6602:	15 81       	ldd	r17, Z+5	; 0x05
    6604:	26 81       	ldd	r18, Z+6	; 0x06
    6606:	37 81       	ldd	r19, Z+7	; 0x07
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	80 0f       	add	r24, r16
    660e:	91 1f       	adc	r25, r17
    6610:	a2 1f       	adc	r26, r18
    6612:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6614:	81 15       	cp	r24, r1
    6616:	2a ec       	ldi	r18, 0xCA	; 202
    6618:	92 07       	cpc	r25, r18
    661a:	2a e9       	ldi	r18, 0x9A	; 154
    661c:	a2 07       	cpc	r26, r18
    661e:	2b e3       	ldi	r18, 0x3B	; 59
    6620:	b2 07       	cpc	r27, r18
    6622:	2c f4       	brge	.+10     	; 0x662e <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6624:	84 83       	std	Z+4, r24	; 0x04
    6626:	95 83       	std	Z+5, r25	; 0x05
    6628:	a6 83       	std	Z+6, r26	; 0x06
    662a:	b7 83       	std	Z+7, r27	; 0x07
    662c:	1a c0       	rjmp	.+52     	; 0x6662 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    662e:	9a 5c       	subi	r25, 0xCA	; 202
    6630:	aa 49       	sbci	r26, 0x9A	; 154
    6632:	bb 43       	sbci	r27, 0x3B	; 59
    6634:	84 83       	std	Z+4, r24	; 0x04
    6636:	95 83       	std	Z+5, r25	; 0x05
    6638:	a6 83       	std	Z+6, r26	; 0x06
    663a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    663c:	80 81       	ld	r24, Z
    663e:	91 81       	ldd	r25, Z+1	; 0x01
    6640:	a2 81       	ldd	r26, Z+2	; 0x02
    6642:	b3 81       	ldd	r27, Z+3	; 0x03
    6644:	01 96       	adiw	r24, 0x01	; 1
    6646:	a1 1d       	adc	r26, r1
    6648:	b1 1d       	adc	r27, r1
    664a:	80 83       	st	Z, r24
    664c:	91 83       	std	Z+1, r25	; 0x01
    664e:	a2 83       	std	Z+2, r26	; 0x02
    6650:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6652:	07 c0       	rjmp	.+14     	; 0x6662 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6654:	cf ef       	ldi	r28, 0xFF	; 255
    6656:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6658:	40 e2       	ldi	r20, 0x20	; 32
    665a:	5e e4       	ldi	r21, 0x4E	; 78
    665c:	60 e0       	ldi	r22, 0x00	; 0
    665e:	70 e0       	ldi	r23, 0x00	; 0
    6660:	c4 cf       	rjmp	.-120    	; 0x65ea <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6662:	ce 01       	movw	r24, r28
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	08 95       	ret

0000666e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    666e:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <__clock+0x4>
    6672:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <__clock+0x5>
    6676:	a0 91 0b 1a 	lds	r26, 0x1A0B	; 0x801a0b <__clock+0x6>
    667a:	b0 91 0c 1a 	lds	r27, 0x1A0C	; 0x801a0c <__clock+0x7>
    667e:	80 5c       	subi	r24, 0xC0	; 192
    6680:	9d 4b       	sbci	r25, 0xBD	; 189
    6682:	a0 4f       	sbci	r26, 0xF0	; 240
    6684:	bf 4f       	sbci	r27, 0xFF	; 255
    6686:	80 93 09 1a 	sts	0x1A09, r24	; 0x801a09 <__clock+0x4>
    668a:	90 93 0a 1a 	sts	0x1A0A, r25	; 0x801a0a <__clock+0x5>
    668e:	a0 93 0b 1a 	sts	0x1A0B, r26	; 0x801a0b <__clock+0x6>
    6692:	b0 93 0c 1a 	sts	0x1A0C, r27	; 0x801a0c <__clock+0x7>
    6696:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <__clock+0x4>
    669a:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <__clock+0x5>
    669e:	a0 91 0b 1a 	lds	r26, 0x1A0B	; 0x801a0b <__clock+0x6>
    66a2:	b0 91 0c 1a 	lds	r27, 0x1A0C	; 0x801a0c <__clock+0x7>
    66a6:	81 15       	cp	r24, r1
    66a8:	9a 4c       	sbci	r25, 0xCA	; 202
    66aa:	aa 49       	sbci	r26, 0x9A	; 154
    66ac:	bb 43       	sbci	r27, 0x3B	; 59
    66ae:	dc f0       	brlt	.+54     	; 0x66e6 <clock_task+0x78>
    66b0:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <__clock>
    66b4:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <__clock+0x1>
    66b8:	a0 91 07 1a 	lds	r26, 0x1A07	; 0x801a07 <__clock+0x2>
    66bc:	b0 91 08 1a 	lds	r27, 0x1A08	; 0x801a08 <__clock+0x3>
    66c0:	01 96       	adiw	r24, 0x01	; 1
    66c2:	a1 1d       	adc	r26, r1
    66c4:	b1 1d       	adc	r27, r1
    66c6:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <__clock>
    66ca:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <__clock+0x1>
    66ce:	a0 93 07 1a 	sts	0x1A07, r26	; 0x801a07 <__clock+0x2>
    66d2:	b0 93 08 1a 	sts	0x1A08, r27	; 0x801a08 <__clock+0x3>
    66d6:	10 92 09 1a 	sts	0x1A09, r1	; 0x801a09 <__clock+0x4>
    66da:	10 92 0a 1a 	sts	0x1A0A, r1	; 0x801a0a <__clock+0x5>
    66de:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <__clock+0x6>
    66e2:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <__clock+0x7>
    66e6:	08 95       	ret

000066e8 <clock_settime.part.2>:
    66e8:	fc 01       	movw	r30, r24
    66ea:	84 81       	ldd	r24, Z+4	; 0x04
    66ec:	95 81       	ldd	r25, Z+5	; 0x05
    66ee:	a6 81       	ldd	r26, Z+6	; 0x06
    66f0:	b7 81       	ldd	r27, Z+7	; 0x07
    66f2:	80 93 09 1a 	sts	0x1A09, r24	; 0x801a09 <__clock+0x4>
    66f6:	90 93 0a 1a 	sts	0x1A0A, r25	; 0x801a0a <__clock+0x5>
    66fa:	a0 93 0b 1a 	sts	0x1A0B, r26	; 0x801a0b <__clock+0x6>
    66fe:	b0 93 0c 1a 	sts	0x1A0C, r27	; 0x801a0c <__clock+0x7>
    6702:	80 81       	ld	r24, Z
    6704:	91 81       	ldd	r25, Z+1	; 0x01
    6706:	a2 81       	ldd	r26, Z+2	; 0x02
    6708:	b3 81       	ldd	r27, Z+3	; 0x03
    670a:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <__clock>
    670e:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <__clock+0x1>
    6712:	a0 93 07 1a 	sts	0x1A07, r26	; 0x801a07 <__clock+0x2>
    6716:	b0 93 08 1a 	sts	0x1A08, r27	; 0x801a08 <__clock+0x3>
    671a:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <__clock+0x4>
    671e:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <__clock+0x5>
    6722:	a0 91 0b 1a 	lds	r26, 0x1A0B	; 0x801a0b <__clock+0x6>
    6726:	b0 91 0c 1a 	lds	r27, 0x1A0C	; 0x801a0c <__clock+0x7>
    672a:	44 81       	ldd	r20, Z+4	; 0x04
    672c:	55 81       	ldd	r21, Z+5	; 0x05
    672e:	66 81       	ldd	r22, Z+6	; 0x06
    6730:	77 81       	ldd	r23, Z+7	; 0x07
    6732:	48 17       	cp	r20, r24
    6734:	59 07       	cpc	r21, r25
    6736:	6a 07       	cpc	r22, r26
    6738:	7b 07       	cpc	r23, r27
    673a:	b9 f6       	brne	.-82     	; 0x66ea <clock_settime.part.2+0x2>
    673c:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <__clock>
    6740:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <__clock+0x1>
    6744:	a0 91 07 1a 	lds	r26, 0x1A07	; 0x801a07 <__clock+0x2>
    6748:	b0 91 08 1a 	lds	r27, 0x1A08	; 0x801a08 <__clock+0x3>
    674c:	40 81       	ld	r20, Z
    674e:	51 81       	ldd	r21, Z+1	; 0x01
    6750:	62 81       	ldd	r22, Z+2	; 0x02
    6752:	73 81       	ldd	r23, Z+3	; 0x03
    6754:	48 17       	cp	r20, r24
    6756:	59 07       	cpc	r21, r25
    6758:	6a 07       	cpc	r22, r26
    675a:	7b 07       	cpc	r23, r27
    675c:	31 f6       	brne	.-116    	; 0x66ea <clock_settime.part.2+0x2>
    675e:	80 e0       	ldi	r24, 0x00	; 0
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	08 95       	ret

00006764 <set_timers>:
    6764:	00 97       	sbiw	r24, 0x00	; 0
    6766:	79 f1       	breq	.+94     	; 0x67c6 <set_timers+0x62>
    6768:	ed e0       	ldi	r30, 0x0D	; 13
    676a:	fa e1       	ldi	r31, 0x1A	; 26
    676c:	4f ef       	ldi	r20, 0xFF	; 255
    676e:	5f ef       	ldi	r21, 0xFF	; 255
    6770:	20 e0       	ldi	r18, 0x00	; 0
    6772:	30 e0       	ldi	r19, 0x00	; 0
    6774:	60 81       	ld	r22, Z
    6776:	71 81       	ldd	r23, Z+1	; 0x01
    6778:	86 17       	cp	r24, r22
    677a:	97 07       	cpc	r25, r23
    677c:	79 f0       	breq	.+30     	; 0x679c <set_timers+0x38>
    677e:	67 2b       	or	r22, r23
    6780:	71 f4       	brne	.+28     	; 0x679e <set_timers+0x3a>
    6782:	f9 01       	movw	r30, r18
    6784:	ee 0f       	add	r30, r30
    6786:	ff 1f       	adc	r31, r31
    6788:	e2 0f       	add	r30, r18
    678a:	f3 1f       	adc	r31, r19
    678c:	e3 5f       	subi	r30, 0xF3	; 243
    678e:	f5 4e       	sbci	r31, 0xE5	; 229
    6790:	91 83       	std	Z+1, r25	; 0x01
    6792:	80 83       	st	Z, r24
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	82 83       	std	Z+2, r24	; 0x02
    6798:	c9 01       	movw	r24, r18
    679a:	08 95       	ret
    679c:	a9 01       	movw	r20, r18
    679e:	2f 5f       	subi	r18, 0xFF	; 255
    67a0:	3f 4f       	sbci	r19, 0xFF	; 255
    67a2:	33 96       	adiw	r30, 0x03	; 3
    67a4:	28 30       	cpi	r18, 0x08	; 8
    67a6:	31 05       	cpc	r19, r1
    67a8:	29 f7       	brne	.-54     	; 0x6774 <set_timers+0x10>
    67aa:	4f 3f       	cpi	r20, 0xFF	; 255
    67ac:	8f ef       	ldi	r24, 0xFF	; 255
    67ae:	58 07       	cpc	r21, r24
    67b0:	69 f4       	brne	.+26     	; 0x67cc <set_timers+0x68>
    67b2:	8c eb       	ldi	r24, 0xBC	; 188
    67b4:	95 e0       	ldi	r25, 0x05	; 5
    67b6:	1f 92       	push	r1
    67b8:	9f 93       	push	r25
    67ba:	8f 93       	push	r24
    67bc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    67c0:	0f 90       	pop	r0
    67c2:	0f 90       	pop	r0
    67c4:	0f 90       	pop	r0
    67c6:	8f ef       	ldi	r24, 0xFF	; 255
    67c8:	9f ef       	ldi	r25, 0xFF	; 255
    67ca:	08 95       	ret
    67cc:	ca 01       	movw	r24, r20
    67ce:	08 95       	ret

000067d0 <delete_all_timers>:
    67d0:	ed e0       	ldi	r30, 0x0D	; 13
    67d2:	fa e1       	ldi	r31, 0x1A	; 26
    67d4:	12 82       	std	Z+2, r1	; 0x02
    67d6:	11 82       	std	Z+1, r1	; 0x01
    67d8:	10 82       	st	Z, r1
    67da:	33 96       	adiw	r30, 0x03	; 3
    67dc:	8a e1       	ldi	r24, 0x1A	; 26
    67de:	e5 32       	cpi	r30, 0x25	; 37
    67e0:	f8 07       	cpc	r31, r24
    67e2:	c1 f7       	brne	.-16     	; 0x67d4 <delete_all_timers+0x4>
    67e4:	08 95       	ret

000067e6 <subtract_timespec>:
    67e6:	0f 93       	push	r16
    67e8:	1f 93       	push	r17
    67ea:	cf 93       	push	r28
    67ec:	df 93       	push	r29
    67ee:	fc 01       	movw	r30, r24
    67f0:	84 81       	ldd	r24, Z+4	; 0x04
    67f2:	95 81       	ldd	r25, Z+5	; 0x05
    67f4:	a6 81       	ldd	r26, Z+6	; 0x06
    67f6:	b7 81       	ldd	r27, Z+7	; 0x07
    67f8:	eb 01       	movw	r28, r22
    67fa:	0c 81       	ldd	r16, Y+4	; 0x04
    67fc:	1d 81       	ldd	r17, Y+5	; 0x05
    67fe:	2e 81       	ldd	r18, Y+6	; 0x06
    6800:	3f 81       	ldd	r19, Y+7	; 0x07
    6802:	80 1b       	sub	r24, r16
    6804:	91 0b       	sbc	r25, r17
    6806:	a2 0b       	sbc	r26, r18
    6808:	b3 0b       	sbc	r27, r19
    680a:	b7 fd       	sbrc	r27, 7
    680c:	05 c0       	rjmp	.+10     	; 0x6818 <subtract_timespec+0x32>
    680e:	84 83       	std	Z+4, r24	; 0x04
    6810:	95 83       	std	Z+5, r25	; 0x05
    6812:	a6 83       	std	Z+6, r26	; 0x06
    6814:	b7 83       	std	Z+7, r27	; 0x07
    6816:	12 c0       	rjmp	.+36     	; 0x683c <subtract_timespec+0x56>
    6818:	96 53       	subi	r25, 0x36	; 54
    681a:	a5 46       	sbci	r26, 0x65	; 101
    681c:	b4 4c       	sbci	r27, 0xC4	; 196
    681e:	84 83       	std	Z+4, r24	; 0x04
    6820:	95 83       	std	Z+5, r25	; 0x05
    6822:	a6 83       	std	Z+6, r26	; 0x06
    6824:	b7 83       	std	Z+7, r27	; 0x07
    6826:	80 81       	ld	r24, Z
    6828:	91 81       	ldd	r25, Z+1	; 0x01
    682a:	a2 81       	ldd	r26, Z+2	; 0x02
    682c:	b3 81       	ldd	r27, Z+3	; 0x03
    682e:	01 97       	sbiw	r24, 0x01	; 1
    6830:	a1 09       	sbc	r26, r1
    6832:	b1 09       	sbc	r27, r1
    6834:	80 83       	st	Z, r24
    6836:	91 83       	std	Z+1, r25	; 0x01
    6838:	a2 83       	std	Z+2, r26	; 0x02
    683a:	b3 83       	std	Z+3, r27	; 0x03
    683c:	80 81       	ld	r24, Z
    683e:	91 81       	ldd	r25, Z+1	; 0x01
    6840:	a2 81       	ldd	r26, Z+2	; 0x02
    6842:	b3 81       	ldd	r27, Z+3	; 0x03
    6844:	eb 01       	movw	r28, r22
    6846:	48 81       	ld	r20, Y
    6848:	59 81       	ldd	r21, Y+1	; 0x01
    684a:	6a 81       	ldd	r22, Y+2	; 0x02
    684c:	7b 81       	ldd	r23, Y+3	; 0x03
    684e:	84 1b       	sub	r24, r20
    6850:	95 0b       	sbc	r25, r21
    6852:	a6 0b       	sbc	r26, r22
    6854:	b7 0b       	sbc	r27, r23
    6856:	80 83       	st	Z, r24
    6858:	91 83       	std	Z+1, r25	; 0x01
    685a:	a2 83       	std	Z+2, r26	; 0x02
    685c:	b3 83       	std	Z+3, r27	; 0x03
    685e:	df 91       	pop	r29
    6860:	cf 91       	pop	r28
    6862:	1f 91       	pop	r17
    6864:	0f 91       	pop	r16
    6866:	08 95       	ret

00006868 <ts_to_str>:
    6868:	fc 01       	movw	r30, r24
    686a:	87 81       	ldd	r24, Z+7	; 0x07
    686c:	8f 93       	push	r24
    686e:	86 81       	ldd	r24, Z+6	; 0x06
    6870:	8f 93       	push	r24
    6872:	85 81       	ldd	r24, Z+5	; 0x05
    6874:	8f 93       	push	r24
    6876:	84 81       	ldd	r24, Z+4	; 0x04
    6878:	8f 93       	push	r24
    687a:	83 81       	ldd	r24, Z+3	; 0x03
    687c:	8f 93       	push	r24
    687e:	82 81       	ldd	r24, Z+2	; 0x02
    6880:	8f 93       	push	r24
    6882:	81 81       	ldd	r24, Z+1	; 0x01
    6884:	8f 93       	push	r24
    6886:	80 81       	ld	r24, Z
    6888:	8f 93       	push	r24
    688a:	82 eb       	ldi	r24, 0xB2	; 178
    688c:	95 e0       	ldi	r25, 0x05	; 5
    688e:	1f 92       	push	r1
    6890:	9f 93       	push	r25
    6892:	8f 93       	push	r24
    6894:	1f 92       	push	r1
    6896:	8f e1       	ldi	r24, 0x1F	; 31
    6898:	8f 93       	push	r24
    689a:	86 e2       	ldi	r24, 0x26	; 38
    689c:	97 e1       	ldi	r25, 0x17	; 23
    689e:	9f 93       	push	r25
    68a0:	8f 93       	push	r24
    68a2:	0e 94 09 45 	call	0x8a12	; 0x8a12 <snprintf_P>
    68a6:	8d b7       	in	r24, 0x3d	; 61
    68a8:	9e b7       	in	r25, 0x3e	; 62
    68aa:	0f 96       	adiw	r24, 0x0f	; 15
    68ac:	0f b6       	in	r0, 0x3f	; 63
    68ae:	f8 94       	cli
    68b0:	9e bf       	out	0x3e, r25	; 62
    68b2:	0f be       	out	0x3f, r0	; 63
    68b4:	8d bf       	out	0x3d, r24	; 61
    68b6:	86 e2       	ldi	r24, 0x26	; 38
    68b8:	97 e1       	ldi	r25, 0x17	; 23
    68ba:	08 95       	ret

000068bc <clock_elapsed_begin>:
    68bc:	6e e1       	ldi	r22, 0x1E	; 30
    68be:	77 e1       	ldi	r23, 0x17	; 23
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	5f ce       	rjmp	.-834    	; 0x6584 <clock_gettime>
    68c6:	08 95       	ret

000068c8 <clock_elapsed_end>:
    68c8:	a8 e0       	ldi	r26, 0x08	; 8
    68ca:	b0 e0       	ldi	r27, 0x00	; 0
    68cc:	ea e6       	ldi	r30, 0x6A	; 106
    68ce:	f4 e3       	ldi	r31, 0x34	; 52
    68d0:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    68d4:	8c 01       	movw	r16, r24
    68d6:	be 01       	movw	r22, r28
    68d8:	6f 5f       	subi	r22, 0xFF	; 255
    68da:	7f 4f       	sbci	r23, 0xFF	; 255
    68dc:	80 e0       	ldi	r24, 0x00	; 0
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	51 de       	rcall	.-862    	; 0x6584 <clock_gettime>
    68e2:	6e e1       	ldi	r22, 0x1E	; 30
    68e4:	77 e1       	ldi	r23, 0x17	; 23
    68e6:	ce 01       	movw	r24, r28
    68e8:	01 96       	adiw	r24, 0x01	; 1
    68ea:	7d df       	rcall	.-262    	; 0x67e6 <subtract_timespec>
    68ec:	01 15       	cp	r16, r1
    68ee:	11 05       	cpc	r17, r1
    68f0:	c1 f0       	breq	.+48     	; 0x6922 <clock_elapsed_end+0x5a>
    68f2:	f8 01       	movw	r30, r16
    68f4:	80 81       	ld	r24, Z
    68f6:	88 23       	and	r24, r24
    68f8:	a1 f0       	breq	.+40     	; 0x6922 <clock_elapsed_end+0x5a>
    68fa:	ce 01       	movw	r24, r28
    68fc:	01 96       	adiw	r24, 0x01	; 1
    68fe:	b4 df       	rcall	.-152    	; 0x6868 <ts_to_str>
    6900:	9f 93       	push	r25
    6902:	8f 93       	push	r24
    6904:	1f 93       	push	r17
    6906:	0f 93       	push	r16
    6908:	85 e9       	ldi	r24, 0x95	; 149
    690a:	95 e0       	ldi	r25, 0x05	; 5
    690c:	1f 92       	push	r1
    690e:	9f 93       	push	r25
    6910:	8f 93       	push	r24
    6912:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	f8 94       	cli
    691a:	de bf       	out	0x3e, r29	; 62
    691c:	0f be       	out	0x3f, r0	; 63
    691e:	cd bf       	out	0x3d, r28	; 61
    6920:	11 c0       	rjmp	.+34     	; 0x6944 <clock_elapsed_end+0x7c>
    6922:	ce 01       	movw	r24, r28
    6924:	01 96       	adiw	r24, 0x01	; 1
    6926:	a0 df       	rcall	.-192    	; 0x6868 <ts_to_str>
    6928:	9f 93       	push	r25
    692a:	8f 93       	push	r24
    692c:	8a e8       	ldi	r24, 0x8A	; 138
    692e:	95 e0       	ldi	r25, 0x05	; 5
    6930:	1f 92       	push	r1
    6932:	9f 93       	push	r25
    6934:	8f 93       	push	r24
    6936:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    693a:	0f 90       	pop	r0
    693c:	0f 90       	pop	r0
    693e:	0f 90       	pop	r0
    6940:	0f 90       	pop	r0
    6942:	0f 90       	pop	r0
    6944:	28 96       	adiw	r28, 0x08	; 8
    6946:	e4 e0       	ldi	r30, 0x04	; 4
    6948:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000694c <clock_clear>:
    694c:	a8 e0       	ldi	r26, 0x08	; 8
    694e:	b0 e0       	ldi	r27, 0x00	; 0
    6950:	ec ea       	ldi	r30, 0xAC	; 172
    6952:	f4 e3       	ldi	r31, 0x34	; 52
    6954:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    6958:	1d 82       	std	Y+5, r1	; 0x05
    695a:	1e 82       	std	Y+6, r1	; 0x06
    695c:	1f 82       	std	Y+7, r1	; 0x07
    695e:	18 86       	std	Y+8, r1	; 0x08
    6960:	19 82       	std	Y+1, r1	; 0x01
    6962:	1a 82       	std	Y+2, r1	; 0x02
    6964:	1b 82       	std	Y+3, r1	; 0x03
    6966:	1c 82       	std	Y+4, r1	; 0x04
    6968:	ce 01       	movw	r24, r28
    696a:	01 96       	adiw	r24, 0x01	; 1
    696c:	bd de       	rcall	.-646    	; 0x66e8 <clock_settime.part.2>
    696e:	e5 e2       	ldi	r30, 0x25	; 37
    6970:	fa e1       	ldi	r31, 0x1A	; 26
    6972:	11 82       	std	Z+1, r1	; 0x01
    6974:	10 82       	st	Z, r1
    6976:	13 82       	std	Z+3, r1	; 0x03
    6978:	12 82       	std	Z+2, r1	; 0x02
    697a:	28 96       	adiw	r28, 0x08	; 8
    697c:	e2 e0       	ldi	r30, 0x02	; 2
    697e:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00006982 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6982:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <timers_configured>
    6986:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <timers_configured+0x1>
    698a:	89 2b       	or	r24, r25
    698c:	69 f0       	breq	.+26     	; 0x69a8 <enable_timers+0x26>
    698e:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <timers_enabled>
    6992:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <timers_enabled+0x1>
    6996:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6998:	39 f4       	brne	.+14     	; 0x69a8 <enable_timers+0x26>
        timers_enabled = 1;
    699a:	b8 dd       	rcall	.-1168   	; 0x650c <enable_system_task>
    699c:	81 e0       	ldi	r24, 0x01	; 1
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	90 93 49 17 	sts	0x1749, r25	; 0x801749 <timers_enabled+0x1>
    69a4:	80 93 48 17 	sts	0x1748, r24	; 0x801748 <timers_enabled>
    69a8:	08 95       	ret

000069aa <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    69aa:	cf 93       	push	r28
    69ac:	df 93       	push	r29
    69ae:	cd e0       	ldi	r28, 0x0D	; 13
    69b0:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	88 23       	and	r24, r24
    69b6:	29 f0       	breq	.+10     	; 0x69c2 <execute_timers+0x18>
    69b8:	e8 81       	ld	r30, Y
    69ba:	f9 81       	ldd	r31, Y+1	; 0x01
    69bc:	30 97       	sbiw	r30, 0x00	; 0
    69be:	09 f0       	breq	.+2      	; 0x69c2 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    69c0:	09 95       	icall
    69c2:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    69c4:	8a e1       	ldi	r24, 0x1A	; 26
    69c6:	c5 32       	cpi	r28, 0x25	; 37
    69c8:	d8 07       	cpc	r29, r24
    69ca:	99 f7       	brne	.-26     	; 0x69b2 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	08 95       	ret

000069d2 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    69d2:	86 e7       	ldi	r24, 0x76	; 118
    69d4:	95 e0       	ldi	r25, 0x05	; 5
    69d6:	1f 92       	push	r1
    69d8:	9f 93       	push	r25
    69da:	8f 93       	push	r24
    69dc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    if(!timers_configured)
    69e0:	0f 90       	pop	r0
    69e2:	0f 90       	pop	r0
    69e4:	0f 90       	pop	r0
    69e6:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <timers_configured>
    69ea:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <timers_configured+0x1>
    69ee:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    69f0:	a9 f4       	brne	.+42     	; 0x6a1c <init_timers+0x4a>
        timers_configured = 1;
    69f2:	8e dd       	rcall	.-1252   	; 0x6510 <install_timers_isr>
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	90 e0       	ldi	r25, 0x00	; 0
    69f8:	90 93 47 17 	sts	0x1747, r25	; 0x801747 <timers_configured+0x1>
    69fc:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <timers_configured>
        timers_enabled = 0;
    6a00:	10 92 49 17 	sts	0x1749, r1	; 0x801749 <timers_enabled+0x1>
    6a04:	10 92 48 17 	sts	0x1748, r1	; 0x801748 <timers_enabled>
        printf("Timers configured\n");
    6a08:	83 e6       	ldi	r24, 0x63	; 99
    6a0a:	95 e0       	ldi	r25, 0x05	; 5
    6a0c:	1f 92       	push	r1
    6a0e:	9f 93       	push	r25
    6a10:	8f 93       	push	r24
    6a12:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    }

    delete_all_timers();
    6a16:	0f 90       	pop	r0

    clock_clear();
    6a18:	0f 90       	pop	r0
    6a1a:	0f 90       	pop	r0
    printf("Clock Init\n");
    6a1c:	d9 de       	rcall	.-590    	; 0x67d0 <delete_all_timers>
    6a1e:	96 df       	rcall	.-212    	; 0x694c <clock_clear>
    6a20:	87 e5       	ldi	r24, 0x57	; 87
    6a22:	95 e0       	ldi	r25, 0x05	; 5
    6a24:	1f 92       	push	r1
    6a26:	9f 93       	push	r25
    6a28:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6a2a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6a2e:	61 e0       	ldi	r22, 0x01	; 1
    6a30:	70 e0       	ldi	r23, 0x00	; 0
    6a32:	87 e3       	ldi	r24, 0x37	; 55
    6a34:	93 e3       	ldi	r25, 0x33	; 51
    6a36:	96 de       	rcall	.-724    	; 0x6764 <set_timers>
    6a38:	0f 90       	pop	r0
    6a3a:	0f 90       	pop	r0
    6a3c:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6a3e:	01 96       	adiw	r24, 0x01	; 1
    6a40:	51 f4       	brne	.+20     	; 0x6a56 <init_timers+0x84>
    6a42:	8f e3       	ldi	r24, 0x3F	; 63
    6a44:	95 e0       	ldi	r25, 0x05	; 5
    6a46:	1f 92       	push	r1
    6a48:	9f 93       	push	r25
    6a4a:	8f 93       	push	r24
    6a4c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6a50:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6a52:	0f 90       	pop	r0
    6a54:	0f 90       	pop	r0
    6a56:	8e e2       	ldi	r24, 0x2E	; 46
    6a58:	95 e0       	ldi	r25, 0x05	; 5
    6a5a:	1f 92       	push	r1
    6a5c:	9f 93       	push	r25

    enable_timers();
    6a5e:	8f 93       	push	r24
    6a60:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    printf("Timers enabled\n");
    6a64:	8e df       	rcall	.-228    	; 0x6982 <enable_timers>
    6a66:	8e e1       	ldi	r24, 0x1E	; 30
    6a68:	95 e0       	ldi	r25, 0x05	; 5
    6a6a:	1f 92       	push	r1
    6a6c:	9f 93       	push	r25
    6a6e:	8f 93       	push	r24
}
    6a70:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    6a74:	0f 90       	pop	r0
    6a76:	0f 90       	pop	r0
    6a78:	0f 90       	pop	r0
    6a7a:	0f 90       	pop	r0
    6a7c:	0f 90       	pop	r0
    6a7e:	0f 90       	pop	r0
    6a80:	08 95       	ret

00006a82 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6a82:	fb 01       	movw	r30, r22
    6a84:	10 82       	st	Z, r1
    6a86:	11 82       	std	Z+1, r1	; 0x01
    6a88:	12 82       	std	Z+2, r1	; 0x02
    6a8a:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6a8c:	80 e4       	ldi	r24, 0x40	; 64
    6a8e:	92 e4       	ldi	r25, 0x42	; 66
    6a90:	af e0       	ldi	r26, 0x0F	; 15
    6a92:	b0 e0       	ldi	r27, 0x00	; 0
    6a94:	84 83       	std	Z+4, r24	; 0x04
    6a96:	95 83       	std	Z+5, r25	; 0x05
    6a98:	a6 83       	std	Z+6, r26	; 0x06
    6a9a:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	08 95       	ret

00006aa2 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6aa2:	89 2b       	or	r24, r25
    6aa4:	19 f4       	brne	.+6      	; 0x6aac <clock_settime+0xa>
    6aa6:	cb 01       	movw	r24, r22
    6aa8:	1f ce       	rjmp	.-962    	; 0x66e8 <clock_settime.part.2>
    6aaa:	08 95       	ret
        return(-1);
    6aac:	8f ef       	ldi	r24, 0xFF	; 255
    6aae:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6ab0:	08 95       	ret

00006ab2 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6ab2:	9c 01       	movw	r18, r24
    6ab4:	83 70       	andi	r24, 0x03	; 3
    6ab6:	99 27       	eor	r25, r25
    6ab8:	00 97       	sbiw	r24, 0x00	; 0
    6aba:	69 f4       	brne	.+26     	; 0x6ad6 <IS_Leap+0x24>
    6abc:	2c 36       	cpi	r18, 0x6C	; 108
    6abe:	47 e0       	ldi	r20, 0x07	; 7
    6ac0:	34 07       	cpc	r19, r20
    6ac2:	59 f0       	breq	.+22     	; 0x6ada <IS_Leap+0x28>
    6ac4:	51 e0       	ldi	r21, 0x01	; 1
    6ac6:	40 e0       	ldi	r20, 0x00	; 0
    6ac8:	24 33       	cpi	r18, 0x34	; 52
    6aca:	38 40       	sbci	r19, 0x08	; 8
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <IS_Leap+0x1e>
    6ace:	50 e0       	ldi	r21, 0x00	; 0
    6ad0:	85 2f       	mov	r24, r21
    6ad2:	94 2f       	mov	r25, r20
    6ad4:	08 95       	ret
    6ad6:	80 e0       	ldi	r24, 0x00	; 0
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	08 95       	ret

00006adc <tm_mon_to_ascii>:
    6adc:	8c 30       	cpi	r24, 0x0C	; 12
    6ade:	91 05       	cpc	r25, r1
    6ae0:	40 f4       	brcc	.+16     	; 0x6af2 <tm_mon_to_ascii+0x16>
    6ae2:	88 0f       	add	r24, r24
    6ae4:	99 1f       	adc	r25, r25
    6ae6:	fc 01       	movw	r30, r24
    6ae8:	e9 5f       	subi	r30, 0xF9	; 249
    6aea:	fe 4f       	sbci	r31, 0xFE	; 254
    6aec:	80 81       	ld	r24, Z
    6aee:	91 81       	ldd	r25, Z+1	; 0x01
    6af0:	08 95       	ret
    6af2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <__Month+0x18>
    6af6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__Month+0x19>
    6afa:	08 95       	ret

00006afc <Days_Per_Month>:
    6afc:	cf 93       	push	r28
    6afe:	df 93       	push	r29
    6b00:	8c 30       	cpi	r24, 0x0C	; 12
    6b02:	91 05       	cpc	r25, r1
    6b04:	24 f0       	brlt	.+8      	; 0x6b0e <Days_Per_Month+0x12>
    6b06:	6f 5f       	subi	r22, 0xFF	; 255
    6b08:	7f 4f       	sbci	r23, 0xFF	; 255
    6b0a:	0c 97       	sbiw	r24, 0x0c	; 12
    6b0c:	f9 cf       	rjmp	.-14     	; 0x6b00 <Days_Per_Month+0x4>
    6b0e:	97 ff       	sbrs	r25, 7
    6b10:	04 c0       	rjmp	.+8      	; 0x6b1a <Days_Per_Month+0x1e>
    6b12:	61 50       	subi	r22, 0x01	; 1
    6b14:	71 09       	sbc	r23, r1
    6b16:	0c 96       	adiw	r24, 0x0c	; 12
    6b18:	fa cf       	rjmp	.-12     	; 0x6b0e <Days_Per_Month+0x12>
    6b1a:	fc 01       	movw	r30, r24
    6b1c:	ee 0f       	add	r30, r30
    6b1e:	ff 1f       	adc	r31, r31
    6b20:	e0 5b       	subi	r30, 0xB0	; 176
    6b22:	fd 4f       	sbci	r31, 0xFD	; 253
    6b24:	c0 81       	ld	r28, Z
    6b26:	d1 81       	ldd	r29, Z+1	; 0x01
    6b28:	01 97       	sbiw	r24, 0x01	; 1
    6b2a:	29 f4       	brne	.+10     	; 0x6b36 <Days_Per_Month+0x3a>
    6b2c:	cb 01       	movw	r24, r22
    6b2e:	c1 df       	rcall	.-126    	; 0x6ab2 <IS_Leap>
    6b30:	89 2b       	or	r24, r25
    6b32:	09 f0       	breq	.+2      	; 0x6b36 <Days_Per_Month+0x3a>
    6b34:	21 96       	adiw	r28, 0x01	; 1
    6b36:	ce 01       	movw	r24, r28
    6b38:	df 91       	pop	r29
    6b3a:	cf 91       	pop	r28
    6b3c:	08 95       	ret

00006b3e <time_to_tm>:
    6b3e:	a0 e0       	ldi	r26, 0x00	; 0
    6b40:	b0 e0       	ldi	r27, 0x00	; 0
    6b42:	e5 ea       	ldi	r30, 0xA5	; 165
    6b44:	f5 e3       	ldi	r31, 0x35	; 53
    6b46:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
    6b4a:	e8 01       	movw	r28, r16
    6b4c:	e6 e1       	ldi	r30, 0x16	; 22
    6b4e:	d8 01       	movw	r26, r16
    6b50:	1d 92       	st	X+, r1
    6b52:	ea 95       	dec	r30
    6b54:	e9 f7       	brne	.-6      	; 0x6b50 <time_to_tm+0x12>
    6b56:	61 15       	cp	r22, r1
    6b58:	bd e5       	ldi	r27, 0x5D	; 93
    6b5a:	7b 07       	cpc	r23, r27
    6b5c:	bd ef       	ldi	r27, 0xFD	; 253
    6b5e:	8b 07       	cpc	r24, r27
    6b60:	bf ef       	ldi	r27, 0xFF	; 255
    6b62:	9b 07       	cpc	r25, r27
    6b64:	08 f0       	brcs	.+2      	; 0x6b68 <time_to_tm+0x2a>
    6b66:	c0 c0       	rjmp	.+384    	; 0x6ce8 <time_to_tm+0x1aa>
    6b68:	6b 01       	movw	r12, r22
    6b6a:	7c 01       	movw	r14, r24
    6b6c:	c2 1a       	sub	r12, r18
    6b6e:	d3 0a       	sbc	r13, r19
    6b70:	e4 0a       	sbc	r14, r20
    6b72:	f5 0a       	sbc	r15, r21
    6b74:	46 01       	movw	r8, r12
    6b76:	57 01       	movw	r10, r14
    6b78:	e0 e8       	ldi	r30, 0x80	; 128
    6b7a:	ce 16       	cp	r12, r30
    6b7c:	ee ea       	ldi	r30, 0xAE	; 174
    6b7e:	de 06       	cpc	r13, r30
    6b80:	ee ef       	ldi	r30, 0xFE	; 254
    6b82:	ee 06       	cpc	r14, r30
    6b84:	ef ef       	ldi	r30, 0xFF	; 255
    6b86:	fe 06       	cpc	r15, r30
    6b88:	50 f0       	brcs	.+20     	; 0x6b9e <time_to_tm+0x60>
    6b8a:	80 e8       	ldi	r24, 0x80	; 128
    6b8c:	88 0e       	add	r8, r24
    6b8e:	81 e5       	ldi	r24, 0x51	; 81
    6b90:	98 1e       	adc	r9, r24
    6b92:	81 e0       	ldi	r24, 0x01	; 1
    6b94:	a8 1e       	adc	r10, r24
    6b96:	b1 1c       	adc	r11, r1
    6b98:	01 e0       	ldi	r16, 0x01	; 1
    6b9a:	10 e0       	ldi	r17, 0x00	; 0
    6b9c:	02 c0       	rjmp	.+4      	; 0x6ba2 <time_to_tm+0x64>
    6b9e:	00 e0       	ldi	r16, 0x00	; 0
    6ba0:	10 e0       	ldi	r17, 0x00	; 0
    6ba2:	8c e3       	ldi	r24, 0x3C	; 60
    6ba4:	48 2e       	mov	r4, r24
    6ba6:	51 2c       	mov	r5, r1
    6ba8:	61 2c       	mov	r6, r1
    6baa:	71 2c       	mov	r7, r1
    6bac:	c5 01       	movw	r24, r10
    6bae:	b4 01       	movw	r22, r8
    6bb0:	a3 01       	movw	r20, r6
    6bb2:	92 01       	movw	r18, r4
    6bb4:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    6bb8:	79 83       	std	Y+1, r23	; 0x01
    6bba:	68 83       	st	Y, r22
    6bbc:	ca 01       	movw	r24, r20
    6bbe:	b9 01       	movw	r22, r18
    6bc0:	a3 01       	movw	r20, r6
    6bc2:	92 01       	movw	r18, r4
    6bc4:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    6bc8:	7b 83       	std	Y+3, r23	; 0x03
    6bca:	6a 83       	std	Y+2, r22	; 0x02
    6bcc:	c5 01       	movw	r24, r10
    6bce:	b4 01       	movw	r22, r8
    6bd0:	20 e1       	ldi	r18, 0x10	; 16
    6bd2:	3e e0       	ldi	r19, 0x0E	; 14
    6bd4:	40 e0       	ldi	r20, 0x00	; 0
    6bd6:	50 e0       	ldi	r21, 0x00	; 0
    6bd8:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    6bdc:	ca 01       	movw	r24, r20
    6bde:	b9 01       	movw	r22, r18
    6be0:	28 e1       	ldi	r18, 0x18	; 24
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	40 e0       	ldi	r20, 0x00	; 0
    6be6:	50 e0       	ldi	r21, 0x00	; 0
    6be8:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    6bec:	7d 83       	std	Y+5, r23	; 0x05
    6bee:	6c 83       	std	Y+4, r22	; 0x04
    6bf0:	01 15       	cp	r16, r1
    6bf2:	11 05       	cpc	r17, r1
    6bf4:	89 f0       	breq	.+34     	; 0x6c18 <time_to_tm+0xda>
    6bf6:	85 e4       	ldi	r24, 0x45	; 69
    6bf8:	90 e0       	ldi	r25, 0x00	; 0
    6bfa:	9b 87       	std	Y+11, r25	; 0x0b
    6bfc:	8a 87       	std	Y+10, r24	; 0x0a
    6bfe:	8b e0       	ldi	r24, 0x0B	; 11
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	99 87       	std	Y+9, r25	; 0x09
    6c04:	88 87       	std	Y+8, r24	; 0x08
    6c06:	8f e1       	ldi	r24, 0x1F	; 31
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	9f 83       	std	Y+7, r25	; 0x07
    6c0c:	8e 83       	std	Y+6, r24	; 0x06
    6c0e:	83 e0       	ldi	r24, 0x03	; 3
    6c10:	90 e0       	ldi	r25, 0x00	; 0
    6c12:	9d 87       	std	Y+13, r25	; 0x0d
    6c14:	8c 87       	std	Y+12, r24	; 0x0c
    6c16:	65 c0       	rjmp	.+202    	; 0x6ce2 <time_to_tm+0x1a4>
    6c18:	c5 01       	movw	r24, r10
    6c1a:	b4 01       	movw	r22, r8
    6c1c:	20 e8       	ldi	r18, 0x80	; 128
    6c1e:	31 e5       	ldi	r19, 0x51	; 81
    6c20:	41 e0       	ldi	r20, 0x01	; 1
    6c22:	50 e0       	ldi	r21, 0x00	; 0
    6c24:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    6c28:	49 01       	movw	r8, r18
    6c2a:	5a 01       	movw	r10, r20
    6c2c:	ca 01       	movw	r24, r20
    6c2e:	b9 01       	movw	r22, r18
    6c30:	6c 5f       	subi	r22, 0xFC	; 252
    6c32:	7f 4f       	sbci	r23, 0xFF	; 255
    6c34:	8f 4f       	sbci	r24, 0xFF	; 255
    6c36:	9f 4f       	sbci	r25, 0xFF	; 255
    6c38:	27 e0       	ldi	r18, 0x07	; 7
    6c3a:	30 e0       	ldi	r19, 0x00	; 0
    6c3c:	40 e0       	ldi	r20, 0x00	; 0
    6c3e:	50 e0       	ldi	r21, 0x00	; 0
    6c40:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    6c44:	7d 87       	std	Y+13, r23	; 0x0d
    6c46:	6c 87       	std	Y+12, r22	; 0x0c
    6c48:	02 eb       	ldi	r16, 0xB2	; 178
    6c4a:	17 e0       	ldi	r17, 0x07	; 7
    6c4c:	c8 01       	movw	r24, r16
    6c4e:	31 df       	rcall	.-414    	; 0x6ab2 <IS_Leap>
    6c50:	00 97       	sbiw	r24, 0x00	; 0
    6c52:	19 f4       	brne	.+6      	; 0x6c5a <time_to_tm+0x11c>
    6c54:	4d e6       	ldi	r20, 0x6D	; 109
    6c56:	51 e0       	ldi	r21, 0x01	; 1
    6c58:	02 c0       	rjmp	.+4      	; 0x6c5e <time_to_tm+0x120>
    6c5a:	4e e6       	ldi	r20, 0x6E	; 110
    6c5c:	51 e0       	ldi	r21, 0x01	; 1
    6c5e:	05 2e       	mov	r0, r21
    6c60:	00 0c       	add	r0, r0
    6c62:	66 0b       	sbc	r22, r22
    6c64:	77 0b       	sbc	r23, r23
    6c66:	84 16       	cp	r8, r20
    6c68:	95 06       	cpc	r9, r21
    6c6a:	a6 06       	cpc	r10, r22
    6c6c:	b7 06       	cpc	r11, r23
    6c6e:	3c f0       	brlt	.+14     	; 0x6c7e <time_to_tm+0x140>
    6c70:	0f 5f       	subi	r16, 0xFF	; 255
    6c72:	1f 4f       	sbci	r17, 0xFF	; 255
    6c74:	84 1a       	sub	r8, r20
    6c76:	95 0a       	sbc	r9, r21
    6c78:	a6 0a       	sbc	r10, r22
    6c7a:	b7 0a       	sbc	r11, r23
    6c7c:	e7 cf       	rjmp	.-50     	; 0x6c4c <time_to_tm+0x10e>
    6c7e:	0c 56       	subi	r16, 0x6C	; 108
    6c80:	17 40       	sbci	r17, 0x07	; 7
    6c82:	1b 87       	std	Y+11, r17	; 0x0b
    6c84:	0a 87       	std	Y+10, r16	; 0x0a
    6c86:	9f 86       	std	Y+15, r9	; 0x0f
    6c88:	8e 86       	std	Y+14, r8	; 0x0e
    6c8a:	e0 e5       	ldi	r30, 0x50	; 80
    6c8c:	f2 e0       	ldi	r31, 0x02	; 2
    6c8e:	20 e0       	ldi	r18, 0x00	; 0
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	18 14       	cp	r1, r8
    6c94:	19 04       	cpc	r1, r9
    6c96:	1a 04       	cpc	r1, r10
    6c98:	1b 04       	cpc	r1, r11
    6c9a:	e4 f4       	brge	.+56     	; 0x6cd4 <time_to_tm+0x196>
    6c9c:	2c 30       	cpi	r18, 0x0C	; 12
    6c9e:	31 05       	cpc	r19, r1
    6ca0:	c9 f0       	breq	.+50     	; 0x6cd4 <time_to_tm+0x196>
    6ca2:	41 91       	ld	r20, Z+
    6ca4:	51 91       	ld	r21, Z+
    6ca6:	21 30       	cpi	r18, 0x01	; 1
    6ca8:	31 05       	cpc	r19, r1
    6caa:	21 f4       	brne	.+8      	; 0x6cb4 <time_to_tm+0x176>
    6cac:	00 97       	sbiw	r24, 0x00	; 0
    6cae:	11 f0       	breq	.+4      	; 0x6cb4 <time_to_tm+0x176>
    6cb0:	4f 5f       	subi	r20, 0xFF	; 255
    6cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    6cb4:	05 2e       	mov	r0, r21
    6cb6:	00 0c       	add	r0, r0
    6cb8:	66 0b       	sbc	r22, r22
    6cba:	77 0b       	sbc	r23, r23
    6cbc:	84 16       	cp	r8, r20
    6cbe:	95 06       	cpc	r9, r21
    6cc0:	a6 06       	cpc	r10, r22
    6cc2:	b7 06       	cpc	r11, r23
    6cc4:	3c f0       	brlt	.+14     	; 0x6cd4 <time_to_tm+0x196>
    6cc6:	84 1a       	sub	r8, r20
    6cc8:	95 0a       	sbc	r9, r21
    6cca:	a6 0a       	sbc	r10, r22
    6ccc:	b7 0a       	sbc	r11, r23
    6cce:	2f 5f       	subi	r18, 0xFF	; 255
    6cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd2:	df cf       	rjmp	.-66     	; 0x6c92 <time_to_tm+0x154>
    6cd4:	39 87       	std	Y+9, r19	; 0x09
    6cd6:	28 87       	std	Y+8, r18	; 0x08
    6cd8:	af ef       	ldi	r26, 0xFF	; 255
    6cda:	8a 1a       	sub	r8, r26
    6cdc:	9a 0a       	sbc	r9, r26
    6cde:	9f 82       	std	Y+7, r9	; 0x07
    6ce0:	8e 82       	std	Y+6, r8	; 0x06
    6ce2:	b6 01       	movw	r22, r12
    6ce4:	c7 01       	movw	r24, r14
    6ce6:	04 c0       	rjmp	.+8      	; 0x6cf0 <time_to_tm+0x1b2>
    6ce8:	6f ef       	ldi	r22, 0xFF	; 255
    6cea:	7f ef       	ldi	r23, 0xFF	; 255
    6cec:	8f ef       	ldi	r24, 0xFF	; 255
    6cee:	9f ef       	ldi	r25, 0xFF	; 255
    6cf0:	cd b7       	in	r28, 0x3d	; 61
    6cf2:	de b7       	in	r29, 0x3e	; 62
    6cf4:	e0 e1       	ldi	r30, 0x10	; 16
    6cf6:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

00006cfa <gmtime_r>:
    6cfa:	0f 93       	push	r16
    6cfc:	1f 93       	push	r17
    6cfe:	cf 93       	push	r28
    6d00:	df 93       	push	r29
    6d02:	eb 01       	movw	r28, r22
    6d04:	fc 01       	movw	r30, r24
    6d06:	60 81       	ld	r22, Z
    6d08:	71 81       	ldd	r23, Z+1	; 0x01
    6d0a:	82 81       	ldd	r24, Z+2	; 0x02
    6d0c:	93 81       	ldd	r25, Z+3	; 0x03
    6d0e:	8e 01       	movw	r16, r28
    6d10:	20 e0       	ldi	r18, 0x00	; 0
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	a9 01       	movw	r20, r18
    6d16:	13 df       	rcall	.-474    	; 0x6b3e <time_to_tm>
    6d18:	ce 01       	movw	r24, r28
    6d1a:	df 91       	pop	r29
    6d1c:	cf 91       	pop	r28
    6d1e:	1f 91       	pop	r17
    6d20:	0f 91       	pop	r16
    6d22:	08 95       	ret

00006d24 <gmtime>:
    6d24:	28 e6       	ldi	r18, 0x68	; 104
    6d26:	37 e1       	ldi	r19, 0x17	; 23
    6d28:	30 93 7f 17 	sts	0x177F, r19	; 0x80177f <p.3727+0x1>
    6d2c:	20 93 7e 17 	sts	0x177E, r18	; 0x80177e <p.3727>
    6d30:	b9 01       	movw	r22, r18
    6d32:	e3 df       	rcall	.-58     	; 0x6cfa <gmtime_r>
    6d34:	88 e6       	ldi	r24, 0x68	; 104
    6d36:	97 e1       	ldi	r25, 0x17	; 23
    6d38:	08 95       	ret

00006d3a <gettimezone>:
    6d3a:	e5 e2       	ldi	r30, 0x25	; 37
    6d3c:	fa e1       	ldi	r31, 0x1A	; 26
    6d3e:	20 81       	ld	r18, Z
    6d40:	31 81       	ldd	r19, Z+1	; 0x01
    6d42:	dc 01       	movw	r26, r24
    6d44:	11 96       	adiw	r26, 0x01	; 1
    6d46:	3c 93       	st	X, r19
    6d48:	2e 93       	st	-X, r18
    6d4a:	22 81       	ldd	r18, Z+2	; 0x02
    6d4c:	33 81       	ldd	r19, Z+3	; 0x03
    6d4e:	13 96       	adiw	r26, 0x03	; 3
    6d50:	3c 93       	st	X, r19
    6d52:	2e 93       	st	-X, r18
    6d54:	12 97       	sbiw	r26, 0x02	; 2
    6d56:	80 e0       	ldi	r24, 0x00	; 0
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	08 95       	ret

00006d5c <settimezone>:
    6d5c:	dc 01       	movw	r26, r24
    6d5e:	2d 91       	ld	r18, X+
    6d60:	3c 91       	ld	r19, X
    6d62:	11 97       	sbiw	r26, 0x01	; 1
    6d64:	e5 e2       	ldi	r30, 0x25	; 37
    6d66:	fa e1       	ldi	r31, 0x1A	; 26
    6d68:	31 83       	std	Z+1, r19	; 0x01
    6d6a:	20 83       	st	Z, r18
    6d6c:	12 96       	adiw	r26, 0x02	; 2
    6d6e:	8d 91       	ld	r24, X+
    6d70:	9c 91       	ld	r25, X
    6d72:	13 97       	sbiw	r26, 0x03	; 3
    6d74:	93 83       	std	Z+3, r25	; 0x03
    6d76:	82 83       	std	Z+2, r24	; 0x02
    6d78:	80 e0       	ldi	r24, 0x00	; 0
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	08 95       	ret

00006d7e <gettimeofday>:
    6d7e:	a8 e0       	ldi	r26, 0x08	; 8
    6d80:	b0 e0       	ldi	r27, 0x00	; 0
    6d82:	e5 ec       	ldi	r30, 0xC5	; 197
    6d84:	f6 e3       	ldi	r31, 0x36	; 54
    6d86:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
    6d8a:	8c 01       	movw	r16, r24
    6d8c:	7b 01       	movw	r14, r22
    6d8e:	be 01       	movw	r22, r28
    6d90:	6f 5f       	subi	r22, 0xFF	; 255
    6d92:	7f 4f       	sbci	r23, 0xFF	; 255
    6d94:	80 e0       	ldi	r24, 0x00	; 0
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	f5 db       	rcall	.-2070   	; 0x6584 <clock_gettime>
    6d9a:	89 81       	ldd	r24, Y+1	; 0x01
    6d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    6da0:	bc 81       	ldd	r27, Y+4	; 0x04
    6da2:	f8 01       	movw	r30, r16
    6da4:	80 83       	st	Z, r24
    6da6:	91 83       	std	Z+1, r25	; 0x01
    6da8:	a2 83       	std	Z+2, r26	; 0x02
    6daa:	b3 83       	std	Z+3, r27	; 0x03
    6dac:	6d 81       	ldd	r22, Y+5	; 0x05
    6dae:	7e 81       	ldd	r23, Y+6	; 0x06
    6db0:	8f 81       	ldd	r24, Y+7	; 0x07
    6db2:	98 85       	ldd	r25, Y+8	; 0x08
    6db4:	28 ee       	ldi	r18, 0xE8	; 232
    6db6:	33 e0       	ldi	r19, 0x03	; 3
    6db8:	40 e0       	ldi	r20, 0x00	; 0
    6dba:	50 e0       	ldi	r21, 0x00	; 0
    6dbc:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    6dc0:	f8 01       	movw	r30, r16
    6dc2:	24 83       	std	Z+4, r18	; 0x04
    6dc4:	35 83       	std	Z+5, r19	; 0x05
    6dc6:	46 83       	std	Z+6, r20	; 0x06
    6dc8:	57 83       	std	Z+7, r21	; 0x07
    6dca:	c7 01       	movw	r24, r14
    6dcc:	b6 df       	rcall	.-148    	; 0x6d3a <gettimezone>
    6dce:	80 e0       	ldi	r24, 0x00	; 0
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	28 96       	adiw	r28, 0x08	; 8
    6dd4:	e6 e0       	ldi	r30, 0x06	; 6
    6dd6:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00006dda <time>:
    6dda:	cf 93       	push	r28
    6ddc:	df 93       	push	r29
    6dde:	ec 01       	movw	r28, r24
    6de0:	6a e4       	ldi	r22, 0x4A	; 74
    6de2:	77 e1       	ldi	r23, 0x17	; 23
    6de4:	80 e0       	ldi	r24, 0x00	; 0
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	cd db       	rcall	.-2150   	; 0x6584 <clock_gettime>
    6dea:	20 97       	sbiw	r28, 0x00	; 0
    6dec:	61 f0       	breq	.+24     	; 0x6e06 <time+0x2c>
    6dee:	80 91 4a 17 	lds	r24, 0x174A	; 0x80174a <ts.3805>
    6df2:	90 91 4b 17 	lds	r25, 0x174B	; 0x80174b <ts.3805+0x1>
    6df6:	a0 91 4c 17 	lds	r26, 0x174C	; 0x80174c <ts.3805+0x2>
    6dfa:	b0 91 4d 17 	lds	r27, 0x174D	; 0x80174d <ts.3805+0x3>
    6dfe:	88 83       	st	Y, r24
    6e00:	99 83       	std	Y+1, r25	; 0x01
    6e02:	aa 83       	std	Y+2, r26	; 0x02
    6e04:	bb 83       	std	Y+3, r27	; 0x03
    6e06:	60 91 4a 17 	lds	r22, 0x174A	; 0x80174a <ts.3805>
    6e0a:	70 91 4b 17 	lds	r23, 0x174B	; 0x80174b <ts.3805+0x1>
    6e0e:	80 91 4c 17 	lds	r24, 0x174C	; 0x80174c <ts.3805+0x2>
    6e12:	90 91 4d 17 	lds	r25, 0x174D	; 0x80174d <ts.3805+0x3>
    6e16:	df 91       	pop	r29
    6e18:	cf 91       	pop	r28
    6e1a:	08 95       	ret

00006e1c <is_dst>:
    6e1c:	cf 92       	push	r12
    6e1e:	df 92       	push	r13
    6e20:	ef 92       	push	r14
    6e22:	ff 92       	push	r15
    6e24:	6b 01       	movw	r12, r22
    6e26:	7c 01       	movw	r14, r24
    6e28:	ff d3       	rcall	.+2046   	; 0x7628 <set_dst>
    6e2a:	80 91 29 1a 	lds	r24, 0x1A29	; 0x801a29 <dst>
    6e2e:	90 91 2a 1a 	lds	r25, 0x1A2A	; 0x801a2a <dst+0x1>
    6e32:	a0 91 2b 1a 	lds	r26, 0x1A2B	; 0x801a2b <dst+0x2>
    6e36:	b0 91 2c 1a 	lds	r27, 0x1A2C	; 0x801a2c <dst+0x3>
    6e3a:	c8 16       	cp	r12, r24
    6e3c:	d9 06       	cpc	r13, r25
    6e3e:	ea 06       	cpc	r14, r26
    6e40:	fb 06       	cpc	r15, r27
    6e42:	88 f0       	brcs	.+34     	; 0x6e66 <is_dst+0x4a>
    6e44:	81 e0       	ldi	r24, 0x01	; 1
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	40 91 2d 1a 	lds	r20, 0x1A2D	; 0x801a2d <dst+0x4>
    6e4c:	50 91 2e 1a 	lds	r21, 0x1A2E	; 0x801a2e <dst+0x5>
    6e50:	60 91 2f 1a 	lds	r22, 0x1A2F	; 0x801a2f <dst+0x6>
    6e54:	70 91 30 1a 	lds	r23, 0x1A30	; 0x801a30 <dst+0x7>
    6e58:	4c 15       	cp	r20, r12
    6e5a:	5d 05       	cpc	r21, r13
    6e5c:	6e 05       	cpc	r22, r14
    6e5e:	7f 05       	cpc	r23, r15
    6e60:	20 f4       	brcc	.+8      	; 0x6e6a <is_dst+0x4e>
    6e62:	80 e0       	ldi	r24, 0x00	; 0
    6e64:	02 c0       	rjmp	.+4      	; 0x6e6a <is_dst+0x4e>
    6e66:	80 e0       	ldi	r24, 0x00	; 0
    6e68:	90 e0       	ldi	r25, 0x00	; 0
    6e6a:	ff 90       	pop	r15
    6e6c:	ef 90       	pop	r14
    6e6e:	df 90       	pop	r13
    6e70:	cf 90       	pop	r12
    6e72:	08 95       	ret

00006e74 <localtime_r>:
    6e74:	4f 92       	push	r4
    6e76:	5f 92       	push	r5
    6e78:	6f 92       	push	r6
    6e7a:	7f 92       	push	r7
    6e7c:	af 92       	push	r10
    6e7e:	bf 92       	push	r11
    6e80:	cf 92       	push	r12
    6e82:	df 92       	push	r13
    6e84:	ef 92       	push	r14
    6e86:	ff 92       	push	r15
    6e88:	0f 93       	push	r16
    6e8a:	1f 93       	push	r17
    6e8c:	cf 93       	push	r28
    6e8e:	df 93       	push	r29
    6e90:	00 d0       	rcall	.+0      	; 0x6e92 <localtime_r+0x1e>
    6e92:	00 d0       	rcall	.+0      	; 0x6e94 <localtime_r+0x20>
    6e94:	cd b7       	in	r28, 0x3d	; 61
    6e96:	de b7       	in	r29, 0x3e	; 62
    6e98:	5b 01       	movw	r10, r22
    6e9a:	fc 01       	movw	r30, r24
    6e9c:	40 80       	ld	r4, Z
    6e9e:	51 80       	ldd	r5, Z+1	; 0x01
    6ea0:	62 80       	ldd	r6, Z+2	; 0x02
    6ea2:	73 80       	ldd	r7, Z+3	; 0x03
    6ea4:	ce 01       	movw	r24, r28
    6ea6:	01 96       	adiw	r24, 0x01	; 1
    6ea8:	48 df       	rcall	.-368    	; 0x6d3a <gettimezone>
    6eaa:	a9 81       	ldd	r26, Y+1	; 0x01
    6eac:	ba 81       	ldd	r27, Y+2	; 0x02
    6eae:	2c e3       	ldi	r18, 0x3C	; 60
    6eb0:	30 e0       	ldi	r19, 0x00	; 0
    6eb2:	0e 94 15 e9 	call	0x1d22a	; 0x1d22a <__usmulhisi3>
    6eb6:	6b 01       	movw	r12, r22
    6eb8:	7c 01       	movw	r14, r24
    6eba:	c3 01       	movw	r24, r6
    6ebc:	b2 01       	movw	r22, r4
    6ebe:	6c 19       	sub	r22, r12
    6ec0:	7d 09       	sbc	r23, r13
    6ec2:	8e 09       	sbc	r24, r14
    6ec4:	9f 09       	sbc	r25, r15
    6ec6:	aa df       	rcall	.-172    	; 0x6e1c <is_dst>
    6ec8:	89 2b       	or	r24, r25
    6eca:	31 f0       	breq	.+12     	; 0x6ed8 <localtime_r+0x64>
    6ecc:	f0 e1       	ldi	r31, 0x10	; 16
    6ece:	cf 1a       	sub	r12, r31
    6ed0:	fe e0       	ldi	r31, 0x0E	; 14
    6ed2:	df 0a       	sbc	r13, r31
    6ed4:	e1 08       	sbc	r14, r1
    6ed6:	f1 08       	sbc	r15, r1
    6ed8:	85 01       	movw	r16, r10
    6eda:	a7 01       	movw	r20, r14
    6edc:	96 01       	movw	r18, r12
    6ede:	c3 01       	movw	r24, r6
    6ee0:	b2 01       	movw	r22, r4
    6ee2:	2d de       	rcall	.-934    	; 0x6b3e <time_to_tm>
    6ee4:	c5 01       	movw	r24, r10
    6ee6:	0f 90       	pop	r0
    6ee8:	0f 90       	pop	r0
    6eea:	0f 90       	pop	r0
    6eec:	0f 90       	pop	r0
    6eee:	df 91       	pop	r29
    6ef0:	cf 91       	pop	r28
    6ef2:	1f 91       	pop	r17
    6ef4:	0f 91       	pop	r16
    6ef6:	ff 90       	pop	r15
    6ef8:	ef 90       	pop	r14
    6efa:	df 90       	pop	r13
    6efc:	cf 90       	pop	r12
    6efe:	bf 90       	pop	r11
    6f00:	af 90       	pop	r10
    6f02:	7f 90       	pop	r7
    6f04:	6f 90       	pop	r6
    6f06:	5f 90       	pop	r5
    6f08:	4f 90       	pop	r4
    6f0a:	08 95       	ret

00006f0c <localtime>:
    6f0c:	62 e5       	ldi	r22, 0x52	; 82
    6f0e:	77 e1       	ldi	r23, 0x17	; 23
    6f10:	b1 cf       	rjmp	.-158    	; 0x6e74 <localtime_r>
    6f12:	08 95       	ret

00006f14 <normalize>:
    6f14:	aa e0       	ldi	r26, 0x0A	; 10
    6f16:	b0 e0       	ldi	r27, 0x00	; 0
    6f18:	e0 e9       	ldi	r30, 0x90	; 144
    6f1a:	f7 e3       	ldi	r31, 0x37	; 55
    6f1c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    6f20:	7c 01       	movw	r14, r24
    6f22:	7a 87       	std	Y+10, r23	; 0x0a
    6f24:	69 87       	std	Y+9, r22	; 0x09
    6f26:	f7 01       	movw	r30, r14
    6f28:	80 81       	ld	r24, Z
    6f2a:	91 81       	ldd	r25, Z+1	; 0x01
    6f2c:	8c 33       	cpi	r24, 0x3C	; 60
    6f2e:	91 05       	cpc	r25, r1
    6f30:	5c f0       	brlt	.+22     	; 0x6f48 <normalize+0x34>
    6f32:	f7 01       	movw	r30, r14
    6f34:	22 81       	ldd	r18, Z+2	; 0x02
    6f36:	33 81       	ldd	r19, Z+3	; 0x03
    6f38:	2f 5f       	subi	r18, 0xFF	; 255
    6f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f3c:	33 83       	std	Z+3, r19	; 0x03
    6f3e:	22 83       	std	Z+2, r18	; 0x02
    6f40:	cc 97       	sbiw	r24, 0x3c	; 60
    6f42:	91 83       	std	Z+1, r25	; 0x01
    6f44:	80 83       	st	Z, r24
    6f46:	ef cf       	rjmp	.-34     	; 0x6f26 <normalize+0x12>
    6f48:	f7 01       	movw	r30, r14
    6f4a:	01 90       	ld	r0, Z+
    6f4c:	f0 81       	ld	r31, Z
    6f4e:	e0 2d       	mov	r30, r0
    6f50:	fe 83       	std	Y+6, r31	; 0x06
    6f52:	ed 83       	std	Y+5, r30	; 0x05
    6f54:	f7 ff       	sbrs	r31, 7
    6f56:	0d c0       	rjmp	.+26     	; 0x6f72 <normalize+0x5e>
    6f58:	f7 01       	movw	r30, r14
    6f5a:	82 81       	ldd	r24, Z+2	; 0x02
    6f5c:	93 81       	ldd	r25, Z+3	; 0x03
    6f5e:	01 97       	sbiw	r24, 0x01	; 1
    6f60:	93 83       	std	Z+3, r25	; 0x03
    6f62:	82 83       	std	Z+2, r24	; 0x02
    6f64:	6d 81       	ldd	r22, Y+5	; 0x05
    6f66:	7e 81       	ldd	r23, Y+6	; 0x06
    6f68:	64 5c       	subi	r22, 0xC4	; 196
    6f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6c:	71 83       	std	Z+1, r23	; 0x01
    6f6e:	60 83       	st	Z, r22
    6f70:	eb cf       	rjmp	.-42     	; 0x6f48 <normalize+0x34>
    6f72:	f7 01       	movw	r30, r14
    6f74:	82 81       	ldd	r24, Z+2	; 0x02
    6f76:	93 81       	ldd	r25, Z+3	; 0x03
    6f78:	8c 33       	cpi	r24, 0x3C	; 60
    6f7a:	91 05       	cpc	r25, r1
    6f7c:	5c f0       	brlt	.+22     	; 0x6f94 <normalize+0x80>
    6f7e:	f7 01       	movw	r30, r14
    6f80:	24 81       	ldd	r18, Z+4	; 0x04
    6f82:	35 81       	ldd	r19, Z+5	; 0x05
    6f84:	2f 5f       	subi	r18, 0xFF	; 255
    6f86:	3f 4f       	sbci	r19, 0xFF	; 255
    6f88:	35 83       	std	Z+5, r19	; 0x05
    6f8a:	24 83       	std	Z+4, r18	; 0x04
    6f8c:	cc 97       	sbiw	r24, 0x3c	; 60
    6f8e:	93 83       	std	Z+3, r25	; 0x03
    6f90:	82 83       	std	Z+2, r24	; 0x02
    6f92:	ef cf       	rjmp	.-34     	; 0x6f72 <normalize+0x5e>
    6f94:	f7 01       	movw	r30, r14
    6f96:	22 80       	ldd	r2, Z+2	; 0x02
    6f98:	33 80       	ldd	r3, Z+3	; 0x03
    6f9a:	37 fe       	sbrs	r3, 7
    6f9c:	0d c0       	rjmp	.+26     	; 0x6fb8 <normalize+0xa4>
    6f9e:	f7 01       	movw	r30, r14
    6fa0:	84 81       	ldd	r24, Z+4	; 0x04
    6fa2:	95 81       	ldd	r25, Z+5	; 0x05
    6fa4:	01 97       	sbiw	r24, 0x01	; 1
    6fa6:	95 83       	std	Z+5, r25	; 0x05
    6fa8:	84 83       	std	Z+4, r24	; 0x04
    6faa:	fc e3       	ldi	r31, 0x3C	; 60
    6fac:	2f 0e       	add	r2, r31
    6fae:	31 1c       	adc	r3, r1
    6fb0:	f7 01       	movw	r30, r14
    6fb2:	33 82       	std	Z+3, r3	; 0x03
    6fb4:	22 82       	std	Z+2, r2	; 0x02
    6fb6:	ee cf       	rjmp	.-36     	; 0x6f94 <normalize+0x80>
    6fb8:	f7 01       	movw	r30, r14
    6fba:	84 81       	ldd	r24, Z+4	; 0x04
    6fbc:	95 81       	ldd	r25, Z+5	; 0x05
    6fbe:	88 31       	cpi	r24, 0x18	; 24
    6fc0:	91 05       	cpc	r25, r1
    6fc2:	5c f0       	brlt	.+22     	; 0x6fda <normalize+0xc6>
    6fc4:	f7 01       	movw	r30, r14
    6fc6:	26 81       	ldd	r18, Z+6	; 0x06
    6fc8:	37 81       	ldd	r19, Z+7	; 0x07
    6fca:	2f 5f       	subi	r18, 0xFF	; 255
    6fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    6fce:	37 83       	std	Z+7, r19	; 0x07
    6fd0:	26 83       	std	Z+6, r18	; 0x06
    6fd2:	48 97       	sbiw	r24, 0x18	; 24
    6fd4:	95 83       	std	Z+5, r25	; 0x05
    6fd6:	84 83       	std	Z+4, r24	; 0x04
    6fd8:	ef cf       	rjmp	.-34     	; 0x6fb8 <normalize+0xa4>
    6fda:	f7 01       	movw	r30, r14
    6fdc:	04 81       	ldd	r16, Z+4	; 0x04
    6fde:	15 81       	ldd	r17, Z+5	; 0x05
    6fe0:	17 ff       	sbrs	r17, 7
    6fe2:	0b c0       	rjmp	.+22     	; 0x6ffa <normalize+0xe6>
    6fe4:	f7 01       	movw	r30, r14
    6fe6:	86 81       	ldd	r24, Z+6	; 0x06
    6fe8:	97 81       	ldd	r25, Z+7	; 0x07
    6fea:	01 97       	sbiw	r24, 0x01	; 1
    6fec:	97 83       	std	Z+7, r25	; 0x07
    6fee:	86 83       	std	Z+6, r24	; 0x06
    6ff0:	08 5e       	subi	r16, 0xE8	; 232
    6ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ff4:	15 83       	std	Z+5, r17	; 0x05
    6ff6:	04 83       	std	Z+4, r16	; 0x04
    6ff8:	f0 cf       	rjmp	.-32     	; 0x6fda <normalize+0xc6>
    6ffa:	f7 01       	movw	r30, r14
    6ffc:	80 85       	ldd	r24, Z+8	; 0x08
    6ffe:	91 85       	ldd	r25, Z+9	; 0x09
    7000:	8c 30       	cpi	r24, 0x0C	; 12
    7002:	91 05       	cpc	r25, r1
    7004:	5c f0       	brlt	.+22     	; 0x701c <normalize+0x108>
    7006:	f7 01       	movw	r30, r14
    7008:	22 85       	ldd	r18, Z+10	; 0x0a
    700a:	33 85       	ldd	r19, Z+11	; 0x0b
    700c:	2f 5f       	subi	r18, 0xFF	; 255
    700e:	3f 4f       	sbci	r19, 0xFF	; 255
    7010:	33 87       	std	Z+11, r19	; 0x0b
    7012:	22 87       	std	Z+10, r18	; 0x0a
    7014:	0c 97       	sbiw	r24, 0x0c	; 12
    7016:	91 87       	std	Z+9, r25	; 0x09
    7018:	80 87       	std	Z+8, r24	; 0x08
    701a:	ef cf       	rjmp	.-34     	; 0x6ffa <normalize+0xe6>
    701c:	f7 01       	movw	r30, r14
    701e:	80 85       	ldd	r24, Z+8	; 0x08
    7020:	91 85       	ldd	r25, Z+9	; 0x09
    7022:	97 ff       	sbrs	r25, 7
    7024:	2d c0       	rjmp	.+90     	; 0x7080 <normalize+0x16c>
    7026:	f7 01       	movw	r30, r14
    7028:	22 85       	ldd	r18, Z+10	; 0x0a
    702a:	33 85       	ldd	r19, Z+11	; 0x0b
    702c:	21 50       	subi	r18, 0x01	; 1
    702e:	31 09       	sbc	r19, r1
    7030:	33 87       	std	Z+11, r19	; 0x0b
    7032:	22 87       	std	Z+10, r18	; 0x0a
    7034:	0c 96       	adiw	r24, 0x0c	; 12
    7036:	91 87       	std	Z+9, r25	; 0x09
    7038:	80 87       	std	Z+8, r24	; 0x08
    703a:	f0 cf       	rjmp	.-32     	; 0x701c <normalize+0x108>
    703c:	f7 01       	movw	r30, r14
    703e:	c6 80       	ldd	r12, Z+6	; 0x06
    7040:	d7 80       	ldd	r13, Z+7	; 0x07
    7042:	a0 84       	ldd	r10, Z+8	; 0x08
    7044:	b1 84       	ldd	r11, Z+9	; 0x09
    7046:	b4 01       	movw	r22, r8
    7048:	c5 01       	movw	r24, r10
    704a:	58 dd       	rcall	.-1360   	; 0x6afc <Days_Per_Month>
    704c:	8c 15       	cp	r24, r12
    704e:	9d 05       	cpc	r25, r13
    7050:	84 f5       	brge	.+96     	; 0x70b2 <normalize+0x19e>
    7052:	c8 1a       	sub	r12, r24
    7054:	d9 0a       	sbc	r13, r25
    7056:	f7 01       	movw	r30, r14
    7058:	d7 82       	std	Z+7, r13	; 0x07
    705a:	c6 82       	std	Z+6, r12	; 0x06
    705c:	c5 01       	movw	r24, r10
    705e:	01 96       	adiw	r24, 0x01	; 1
    7060:	91 87       	std	Z+9, r25	; 0x09
    7062:	80 87       	std	Z+8, r24	; 0x08
    7064:	0c 97       	sbiw	r24, 0x0c	; 12
    7066:	54 f3       	brlt	.-44     	; 0x703c <normalize+0x128>
    7068:	fb e0       	ldi	r31, 0x0B	; 11
    706a:	af 1a       	sub	r10, r31
    706c:	b1 08       	sbc	r11, r1
    706e:	f7 01       	movw	r30, r14
    7070:	b1 86       	std	Z+9, r11	; 0x09
    7072:	a0 86       	std	Z+8, r10	; 0x08
    7074:	ff ef       	ldi	r31, 0xFF	; 255
    7076:	8f 1a       	sub	r8, r31
    7078:	9f 0a       	sbc	r9, r31
    707a:	f7 01       	movw	r30, r14
    707c:	93 86       	std	Z+11, r9	; 0x0b
    707e:	82 86       	std	Z+10, r8	; 0x0a
    7080:	f7 01       	movw	r30, r14
    7082:	82 84       	ldd	r8, Z+10	; 0x0a
    7084:	93 84       	ldd	r9, Z+11	; 0x0b
    7086:	da cf       	rjmp	.-76     	; 0x703c <normalize+0x128>
    7088:	f7 01       	movw	r30, r14
    708a:	80 85       	ldd	r24, Z+8	; 0x08
    708c:	91 85       	ldd	r25, Z+9	; 0x09
    708e:	9c 01       	movw	r18, r24
    7090:	21 50       	subi	r18, 0x01	; 1
    7092:	31 09       	sbc	r19, r1
    7094:	37 fd       	sbrc	r19, 7
    7096:	16 c0       	rjmp	.+44     	; 0x70c4 <normalize+0x1b0>
    7098:	31 87       	std	Z+9, r19	; 0x09
    709a:	20 87       	std	Z+8, r18	; 0x08
    709c:	f7 01       	movw	r30, r14
    709e:	62 85       	ldd	r22, Z+10	; 0x0a
    70a0:	73 85       	ldd	r23, Z+11	; 0x0b
    70a2:	80 85       	ldd	r24, Z+8	; 0x08
    70a4:	91 85       	ldd	r25, Z+9	; 0x09
    70a6:	2a dd       	rcall	.-1452   	; 0x6afc <Days_Per_Month>
    70a8:	88 0d       	add	r24, r8
    70aa:	99 1d       	adc	r25, r9
    70ac:	f7 01       	movw	r30, r14
    70ae:	97 83       	std	Z+7, r25	; 0x07
    70b0:	86 83       	std	Z+6, r24	; 0x06
    70b2:	f7 01       	movw	r30, r14
    70b4:	86 80       	ldd	r8, Z+6	; 0x06
    70b6:	97 80       	ldd	r9, Z+7	; 0x07
    70b8:	a2 84       	ldd	r10, Z+10	; 0x0a
    70ba:	b3 84       	ldd	r11, Z+11	; 0x0b
    70bc:	18 14       	cp	r1, r8
    70be:	19 04       	cpc	r1, r9
    70c0:	1c f7       	brge	.-58     	; 0x7088 <normalize+0x174>
    70c2:	0b c0       	rjmp	.+22     	; 0x70da <normalize+0x1c6>
    70c4:	0b 96       	adiw	r24, 0x0b	; 11
    70c6:	f7 01       	movw	r30, r14
    70c8:	91 87       	std	Z+9, r25	; 0x09
    70ca:	80 87       	std	Z+8, r24	; 0x08
    70cc:	f1 e0       	ldi	r31, 0x01	; 1
    70ce:	af 1a       	sub	r10, r31
    70d0:	b1 08       	sbc	r11, r1
    70d2:	f7 01       	movw	r30, r14
    70d4:	b3 86       	std	Z+11, r11	; 0x0b
    70d6:	a2 86       	std	Z+10, r10	; 0x0a
    70d8:	e1 cf       	rjmp	.-62     	; 0x709c <normalize+0x188>
    70da:	a5 01       	movw	r20, r10
    70dc:	44 59       	subi	r20, 0x94	; 148
    70de:	58 4f       	sbci	r21, 0xF8	; 248
    70e0:	58 87       	std	Y+8, r21	; 0x08
    70e2:	4f 83       	std	Y+7, r20	; 0x07
    70e4:	35 01       	movw	r6, r10
    70e6:	56 e4       	ldi	r21, 0x46	; 70
    70e8:	65 1a       	sub	r6, r21
    70ea:	71 08       	sbc	r7, r1
    70ec:	89 e8       	ldi	r24, 0x89	; 137
    70ee:	68 16       	cp	r6, r24
    70f0:	71 04       	cpc	r7, r1
    70f2:	08 f0       	brcs	.+2      	; 0x70f6 <normalize+0x1e2>
    70f4:	9b c0       	rjmp	.+310    	; 0x722c <normalize+0x318>
    70f6:	c0 84       	ldd	r12, Z+8	; 0x08
    70f8:	d1 84       	ldd	r13, Z+9	; 0x09
    70fa:	9c e0       	ldi	r25, 0x0C	; 12
    70fc:	c9 16       	cp	r12, r25
    70fe:	d1 04       	cpc	r13, r1
    7100:	08 f0       	brcs	.+2      	; 0x7104 <normalize+0x1f0>
    7102:	94 c0       	rjmp	.+296    	; 0x722c <normalize+0x318>
    7104:	24 01       	movw	r4, r8
    7106:	e1 e0       	ldi	r30, 0x01	; 1
    7108:	4e 1a       	sub	r4, r30
    710a:	51 08       	sbc	r5, r1
    710c:	6f 81       	ldd	r22, Y+7	; 0x07
    710e:	78 85       	ldd	r23, Y+8	; 0x08
    7110:	c6 01       	movw	r24, r12
    7112:	f4 dc       	rcall	.-1560   	; 0x6afc <Days_Per_Month>
    7114:	48 16       	cp	r4, r24
    7116:	59 06       	cpc	r5, r25
    7118:	0c f0       	brlt	.+2      	; 0x711c <normalize+0x208>
    711a:	88 c0       	rjmp	.+272    	; 0x722c <normalize+0x318>
    711c:	08 31       	cpi	r16, 0x18	; 24
    711e:	11 05       	cpc	r17, r1
    7120:	0c f0       	brlt	.+2      	; 0x7124 <normalize+0x210>
    7122:	84 c0       	rjmp	.+264    	; 0x722c <normalize+0x318>
    7124:	fc e3       	ldi	r31, 0x3C	; 60
    7126:	2f 16       	cp	r2, r31
    7128:	31 04       	cpc	r3, r1
    712a:	0c f0       	brlt	.+2      	; 0x712e <normalize+0x21a>
    712c:	7f c0       	rjmp	.+254    	; 0x722c <normalize+0x318>
    712e:	4d 81       	ldd	r20, Y+5	; 0x05
    7130:	5e 81       	ldd	r21, Y+6	; 0x06
    7132:	4c 33       	cpi	r20, 0x3C	; 60
    7134:	51 05       	cpc	r21, r1
    7136:	0c f0       	brlt	.+2      	; 0x713a <normalize+0x226>
    7138:	79 c0       	rjmp	.+242    	; 0x722c <normalize+0x318>
    713a:	2d e6       	ldi	r18, 0x6D	; 109
    713c:	31 e0       	ldi	r19, 0x01	; 1
    713e:	d3 01       	movw	r26, r6
    7140:	0e 94 15 e9 	call	0x1d22a	; 0x1d22a <__usmulhisi3>
    7144:	f6 01       	movw	r30, r12
    7146:	ee 0f       	add	r30, r30
    7148:	ff 1f       	adc	r31, r31
    714a:	e8 59       	subi	r30, 0x98	; 152
    714c:	fd 4f       	sbci	r31, 0xFD	; 253
    714e:	20 81       	ld	r18, Z
    7150:	31 81       	ldd	r19, Z+1	; 0x01
    7152:	dc 01       	movw	r26, r24
    7154:	cb 01       	movw	r24, r22
    7156:	82 0f       	add	r24, r18
    7158:	93 1f       	adc	r25, r19
    715a:	a1 1d       	adc	r26, r1
    715c:	b1 1d       	adc	r27, r1
    715e:	05 2c       	mov	r0, r5
    7160:	00 0c       	add	r0, r0
    7162:	66 08       	sbc	r6, r6
    7164:	77 08       	sbc	r7, r7
    7166:	48 0e       	add	r4, r24
    7168:	59 1e       	adc	r5, r25
    716a:	6a 1e       	adc	r6, r26
    716c:	7b 1e       	adc	r7, r27
    716e:	1a 14       	cp	r1, r10
    7170:	1b 04       	cpc	r1, r11
    7172:	1c f4       	brge	.+6      	; 0x717a <normalize+0x266>
    7174:	51 e0       	ldi	r21, 0x01	; 1
    7176:	a5 1a       	sub	r10, r21
    7178:	b1 08       	sbc	r11, r1
    717a:	45 01       	movw	r8, r10
    717c:	95 94       	asr	r9
    717e:	87 94       	ror	r8
    7180:	95 94       	asr	r9
    7182:	87 94       	ror	r8
    7184:	88 ec       	ldi	r24, 0xC8	; 200
    7186:	a8 16       	cp	r10, r24
    7188:	b1 04       	cpc	r11, r1
    718a:	1c f0       	brlt	.+6      	; 0x7192 <normalize+0x27e>
    718c:	91 e0       	ldi	r25, 0x01	; 1
    718e:	89 1a       	sub	r8, r25
    7190:	91 08       	sbc	r9, r1
    7192:	09 2c       	mov	r0, r9
    7194:	00 0c       	add	r0, r0
    7196:	aa 08       	sbc	r10, r10
    7198:	bb 08       	sbc	r11, r11
    719a:	84 0c       	add	r8, r4
    719c:	95 1c       	adc	r9, r5
    719e:	a6 1c       	adc	r10, r6
    71a0:	b7 1c       	adc	r11, r7
    71a2:	24 01       	movw	r4, r8
    71a4:	35 01       	movw	r6, r10
    71a6:	e1 e1       	ldi	r30, 0x11	; 17
    71a8:	4e 1a       	sub	r4, r30
    71aa:	51 08       	sbc	r5, r1
    71ac:	61 08       	sbc	r6, r1
    71ae:	71 08       	sbc	r7, r1
    71b0:	f2 e0       	ldi	r31, 0x02	; 2
    71b2:	cf 16       	cp	r12, r31
    71b4:	d1 04       	cpc	r13, r1
    71b6:	64 f0       	brlt	.+24     	; 0x71d0 <normalize+0x2bc>
    71b8:	8f 81       	ldd	r24, Y+7	; 0x07
    71ba:	98 85       	ldd	r25, Y+8	; 0x08
    71bc:	7a dc       	rcall	.-1804   	; 0x6ab2 <IS_Leap>
    71be:	89 2b       	or	r24, r25
    71c0:	39 f0       	breq	.+14     	; 0x71d0 <normalize+0x2bc>
    71c2:	24 01       	movw	r4, r8
    71c4:	35 01       	movw	r6, r10
    71c6:	40 e1       	ldi	r20, 0x10	; 16
    71c8:	44 1a       	sub	r4, r20
    71ca:	51 08       	sbc	r5, r1
    71cc:	61 08       	sbc	r6, r1
    71ce:	71 08       	sbc	r7, r1
    71d0:	a8 e1       	ldi	r26, 0x18	; 24
    71d2:	b0 e0       	ldi	r27, 0x00	; 0
    71d4:	a3 01       	movw	r20, r6
    71d6:	92 01       	movw	r18, r4
    71d8:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    71dc:	01 2e       	mov	r0, r17
    71de:	00 0c       	add	r0, r0
    71e0:	22 0b       	sbc	r18, r18
    71e2:	33 0b       	sbc	r19, r19
    71e4:	a9 01       	movw	r20, r18
    71e6:	98 01       	movw	r18, r16
    71e8:	26 0f       	add	r18, r22
    71ea:	37 1f       	adc	r19, r23
    71ec:	48 1f       	adc	r20, r24
    71ee:	59 1f       	adc	r21, r25
    71f0:	ac e3       	ldi	r26, 0x3C	; 60
    71f2:	b0 e0       	ldi	r27, 0x00	; 0
    71f4:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    71f8:	81 01       	movw	r16, r2
    71fa:	03 2c       	mov	r0, r3
    71fc:	00 0c       	add	r0, r0
    71fe:	22 0b       	sbc	r18, r18
    7200:	33 0b       	sbc	r19, r19
    7202:	a9 01       	movw	r20, r18
    7204:	98 01       	movw	r18, r16
    7206:	26 0f       	add	r18, r22
    7208:	37 1f       	adc	r19, r23
    720a:	48 1f       	adc	r20, r24
    720c:	59 1f       	adc	r21, r25
    720e:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    7212:	ed 81       	ldd	r30, Y+5	; 0x05
    7214:	fe 81       	ldd	r31, Y+6	; 0x06
    7216:	8f 01       	movw	r16, r30
    7218:	ff 0f       	add	r31, r31
    721a:	22 0b       	sbc	r18, r18
    721c:	33 0b       	sbc	r19, r19
    721e:	48 01       	movw	r8, r16
    7220:	59 01       	movw	r10, r18
    7222:	86 0e       	add	r8, r22
    7224:	97 1e       	adc	r9, r23
    7226:	a8 1e       	adc	r10, r24
    7228:	b9 1e       	adc	r11, r25
    722a:	04 c0       	rjmp	.+8      	; 0x7234 <normalize+0x320>
    722c:	88 24       	eor	r8, r8
    722e:	8a 94       	dec	r8
    7230:	98 2c       	mov	r9, r8
    7232:	54 01       	movw	r10, r8
    7234:	49 85       	ldd	r20, Y+9	; 0x09
    7236:	5a 85       	ldd	r21, Y+10	; 0x0a
    7238:	45 2b       	or	r20, r21
    723a:	e9 f0       	breq	.+58     	; 0x7276 <normalize+0x362>
    723c:	ce 01       	movw	r24, r28
    723e:	01 96       	adiw	r24, 0x01	; 1
    7240:	7c dd       	rcall	.-1288   	; 0x6d3a <gettimezone>
    7242:	a9 81       	ldd	r26, Y+1	; 0x01
    7244:	ba 81       	ldd	r27, Y+2	; 0x02
    7246:	2c e3       	ldi	r18, 0x3C	; 60
    7248:	30 e0       	ldi	r19, 0x00	; 0
    724a:	0e 94 15 e9 	call	0x1d22a	; 0x1d22a <__usmulhisi3>
    724e:	2b 01       	movw	r4, r22
    7250:	3c 01       	movw	r6, r24
    7252:	c5 01       	movw	r24, r10
    7254:	b4 01       	movw	r22, r8
    7256:	e2 dd       	rcall	.-1084   	; 0x6e1c <is_dst>
    7258:	89 2b       	or	r24, r25
    725a:	51 f0       	breq	.+20     	; 0x7270 <normalize+0x35c>
    725c:	50 e1       	ldi	r21, 0x10	; 16
    725e:	45 1a       	sub	r4, r21
    7260:	5e e0       	ldi	r21, 0x0E	; 14
    7262:	55 0a       	sbc	r5, r21
    7264:	61 08       	sbc	r6, r1
    7266:	71 08       	sbc	r7, r1
    7268:	cc 24       	eor	r12, r12
    726a:	c3 94       	inc	r12
    726c:	d1 2c       	mov	r13, r1
    726e:	08 c0       	rjmp	.+16     	; 0x7280 <normalize+0x36c>
    7270:	c1 2c       	mov	r12, r1
    7272:	d1 2c       	mov	r13, r1
    7274:	05 c0       	rjmp	.+10     	; 0x7280 <normalize+0x36c>
    7276:	c1 2c       	mov	r12, r1
    7278:	d1 2c       	mov	r13, r1
    727a:	41 2c       	mov	r4, r1
    727c:	51 2c       	mov	r5, r1
    727e:	32 01       	movw	r6, r4
    7280:	87 01       	movw	r16, r14
    7282:	a3 01       	movw	r20, r6
    7284:	92 01       	movw	r18, r4
    7286:	c5 01       	movw	r24, r10
    7288:	b4 01       	movw	r22, r8
    728a:	59 dc       	rcall	.-1870   	; 0x6b3e <time_to_tm>
    728c:	c1 14       	cp	r12, r1
    728e:	d1 04       	cpc	r13, r1
    7290:	29 f0       	breq	.+10     	; 0x729c <normalize+0x388>
    7292:	21 e0       	ldi	r18, 0x01	; 1
    7294:	30 e0       	ldi	r19, 0x00	; 0
    7296:	f7 01       	movw	r30, r14
    7298:	31 8b       	std	Z+17, r19	; 0x11
    729a:	20 8b       	std	Z+16, r18	; 0x10
    729c:	2a 96       	adiw	r28, 0x0a	; 10
    729e:	e2 e1       	ldi	r30, 0x12	; 18
    72a0:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

000072a4 <timegm>:
    72a4:	60 e0       	ldi	r22, 0x00	; 0
    72a6:	70 e0       	ldi	r23, 0x00	; 0
    72a8:	35 ce       	rjmp	.-918    	; 0x6f14 <normalize>
    72aa:	08 95       	ret

000072ac <setdate_r>:
    72ac:	cf 92       	push	r12
    72ae:	df 92       	push	r13
    72b0:	ef 92       	push	r14
    72b2:	ff 92       	push	r15
    72b4:	cf 93       	push	r28
    72b6:	df 93       	push	r29
    72b8:	cd b7       	in	r28, 0x3d	; 61
    72ba:	de b7       	in	r29, 0x3e	; 62
    72bc:	a0 97       	sbiw	r28, 0x20	; 32
    72be:	0f b6       	in	r0, 0x3f	; 63
    72c0:	f8 94       	cli
    72c2:	de bf       	out	0x3e, r29	; 62
    72c4:	0f be       	out	0x3f, r0	; 63
    72c6:	cd bf       	out	0x3d, r28	; 61
    72c8:	98 a3       	std	Y+32, r25	; 0x20
    72ca:	8f 8f       	std	Y+31, r24	; 0x1f
    72cc:	1a 82       	std	Y+2, r1	; 0x02
    72ce:	19 82       	std	Y+1, r1	; 0x01
    72d0:	1c 82       	std	Y+4, r1	; 0x04
    72d2:	1b 82       	std	Y+3, r1	; 0x03
    72d4:	1e 82       	std	Y+6, r1	; 0x06
    72d6:	1d 82       	std	Y+5, r1	; 0x05
    72d8:	18 86       	std	Y+8, r1	; 0x08
    72da:	1f 82       	std	Y+7, r1	; 0x07
    72dc:	1a 86       	std	Y+10, r1	; 0x0a
    72de:	19 86       	std	Y+9, r1	; 0x09
    72e0:	1c 86       	std	Y+12, r1	; 0x0c
    72e2:	1b 86       	std	Y+11, r1	; 0x0b
    72e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72e6:	98 a1       	ldd	r25, Y+32	; 0x20
    72e8:	fc 01       	movw	r30, r24
    72ea:	20 81       	ld	r18, Z
    72ec:	20 32       	cpi	r18, 0x20	; 32
    72ee:	21 f4       	brne	.+8      	; 0x72f8 <setdate_r+0x4c>
    72f0:	01 96       	adiw	r24, 0x01	; 1
    72f2:	98 a3       	std	Y+32, r25	; 0x20
    72f4:	8f 8f       	std	Y+31, r24	; 0x1f
    72f6:	f6 cf       	rjmp	.-20     	; 0x72e4 <setdate_r+0x38>
    72f8:	4a e0       	ldi	r20, 0x0A	; 10
    72fa:	50 e0       	ldi	r21, 0x00	; 0
    72fc:	be 01       	movw	r22, r28
    72fe:	61 5e       	subi	r22, 0xE1	; 225
    7300:	7f 4f       	sbci	r23, 0xFF	; 255
    7302:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    7306:	7c 87       	std	Y+12, r23	; 0x0c
    7308:	6b 87       	std	Y+11, r22	; 0x0b
    730a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    730c:	98 a1       	ldd	r25, Y+32	; 0x20
    730e:	fc 01       	movw	r30, r24
    7310:	20 81       	ld	r18, Z
    7312:	20 32       	cpi	r18, 0x20	; 32
    7314:	21 f4       	brne	.+8      	; 0x731e <setdate_r+0x72>
    7316:	01 96       	adiw	r24, 0x01	; 1
    7318:	98 a3       	std	Y+32, r25	; 0x20
    731a:	8f 8f       	std	Y+31, r24	; 0x1f
    731c:	f6 cf       	rjmp	.-20     	; 0x730a <setdate_r+0x5e>
    731e:	4a e0       	ldi	r20, 0x0A	; 10
    7320:	50 e0       	ldi	r21, 0x00	; 0
    7322:	be 01       	movw	r22, r28
    7324:	61 5e       	subi	r22, 0xE1	; 225
    7326:	7f 4f       	sbci	r23, 0xFF	; 255
    7328:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    732c:	7a 87       	std	Y+10, r23	; 0x0a
    732e:	69 87       	std	Y+9, r22	; 0x09
    7330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7332:	98 a1       	ldd	r25, Y+32	; 0x20
    7334:	fc 01       	movw	r30, r24
    7336:	20 81       	ld	r18, Z
    7338:	20 32       	cpi	r18, 0x20	; 32
    733a:	21 f4       	brne	.+8      	; 0x7344 <setdate_r+0x98>
    733c:	01 96       	adiw	r24, 0x01	; 1
    733e:	98 a3       	std	Y+32, r25	; 0x20
    7340:	8f 8f       	std	Y+31, r24	; 0x1f
    7342:	f6 cf       	rjmp	.-20     	; 0x7330 <setdate_r+0x84>
    7344:	4a e0       	ldi	r20, 0x0A	; 10
    7346:	50 e0       	ldi	r21, 0x00	; 0
    7348:	be 01       	movw	r22, r28
    734a:	61 5e       	subi	r22, 0xE1	; 225
    734c:	7f 4f       	sbci	r23, 0xFF	; 255
    734e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    7352:	78 87       	std	Y+8, r23	; 0x08
    7354:	6f 83       	std	Y+7, r22	; 0x07
    7356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7358:	98 a1       	ldd	r25, Y+32	; 0x20
    735a:	fc 01       	movw	r30, r24
    735c:	20 81       	ld	r18, Z
    735e:	20 32       	cpi	r18, 0x20	; 32
    7360:	21 f4       	brne	.+8      	; 0x736a <setdate_r+0xbe>
    7362:	01 96       	adiw	r24, 0x01	; 1
    7364:	98 a3       	std	Y+32, r25	; 0x20
    7366:	8f 8f       	std	Y+31, r24	; 0x1f
    7368:	f6 cf       	rjmp	.-20     	; 0x7356 <setdate_r+0xaa>
    736a:	4a e0       	ldi	r20, 0x0A	; 10
    736c:	50 e0       	ldi	r21, 0x00	; 0
    736e:	be 01       	movw	r22, r28
    7370:	61 5e       	subi	r22, 0xE1	; 225
    7372:	7f 4f       	sbci	r23, 0xFF	; 255
    7374:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    7378:	7e 83       	std	Y+6, r23	; 0x06
    737a:	6d 83       	std	Y+5, r22	; 0x05
    737c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    737e:	f8 a1       	ldd	r31, Y+32	; 0x20
    7380:	80 81       	ld	r24, Z
    7382:	88 23       	and	r24, r24
    7384:	39 f0       	breq	.+14     	; 0x7394 <setdate_r+0xe8>
    7386:	80 32       	cpi	r24, 0x20	; 32
    7388:	11 f0       	breq	.+4      	; 0x738e <setdate_r+0xe2>
    738a:	8a 33       	cpi	r24, 0x3A	; 58
    738c:	19 f4       	brne	.+6      	; 0x7394 <setdate_r+0xe8>
    738e:	31 96       	adiw	r30, 0x01	; 1
    7390:	f8 a3       	std	Y+32, r31	; 0x20
    7392:	ef 8f       	std	Y+31, r30	; 0x1f
    7394:	4a e0       	ldi	r20, 0x0A	; 10
    7396:	50 e0       	ldi	r21, 0x00	; 0
    7398:	be 01       	movw	r22, r28
    739a:	61 5e       	subi	r22, 0xE1	; 225
    739c:	7f 4f       	sbci	r23, 0xFF	; 255
    739e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    73a0:	98 a1       	ldd	r25, Y+32	; 0x20
    73a2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    73a6:	7c 83       	std	Y+4, r23	; 0x04
    73a8:	6b 83       	std	Y+3, r22	; 0x03
    73aa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    73ac:	f8 a1       	ldd	r31, Y+32	; 0x20
    73ae:	80 81       	ld	r24, Z
    73b0:	88 23       	and	r24, r24
    73b2:	39 f0       	breq	.+14     	; 0x73c2 <setdate_r+0x116>
    73b4:	80 32       	cpi	r24, 0x20	; 32
    73b6:	11 f0       	breq	.+4      	; 0x73bc <setdate_r+0x110>
    73b8:	8a 33       	cpi	r24, 0x3A	; 58
    73ba:	19 f4       	brne	.+6      	; 0x73c2 <setdate_r+0x116>
    73bc:	31 96       	adiw	r30, 0x01	; 1
    73be:	f8 a3       	std	Y+32, r31	; 0x20
    73c0:	ef 8f       	std	Y+31, r30	; 0x1f
    73c2:	4a e0       	ldi	r20, 0x0A	; 10
    73c4:	50 e0       	ldi	r21, 0x00	; 0
    73c6:	be 01       	movw	r22, r28
    73c8:	61 5e       	subi	r22, 0xE1	; 225
    73ca:	7f 4f       	sbci	r23, 0xFF	; 255
    73cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    73ce:	98 a1       	ldd	r25, Y+32	; 0x20
    73d0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
    73d4:	7a 83       	std	Y+2, r23	; 0x02
    73d6:	69 83       	std	Y+1, r22	; 0x01
    73d8:	29 85       	ldd	r18, Y+9	; 0x09
    73da:	3a 85       	ldd	r19, Y+10	; 0x0a
    73dc:	21 50       	subi	r18, 0x01	; 1
    73de:	31 09       	sbc	r19, r1
    73e0:	3a 87       	std	Y+10, r19	; 0x0a
    73e2:	29 87       	std	Y+9, r18	; 0x09
    73e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    73e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    73e8:	ac 01       	movw	r20, r24
    73ea:	42 5b       	subi	r20, 0xB2	; 178
    73ec:	57 40       	sbci	r21, 0x07	; 7
    73ee:	45 34       	cpi	r20, 0x45	; 69
    73f0:	51 05       	cpc	r21, r1
    73f2:	28 f0       	brcs	.+10     	; 0x73fe <setdate_r+0x152>
    73f4:	9f 93       	push	r25
    73f6:	8f 93       	push	r24
    73f8:	8c e6       	ldi	r24, 0x6C	; 108
    73fa:	97 e0       	ldi	r25, 0x07	; 7
    73fc:	2c c0       	rjmp	.+88     	; 0x7456 <setdate_r+0x1aa>
    73fe:	8c 56       	subi	r24, 0x6C	; 108
    7400:	97 40       	sbci	r25, 0x07	; 7
    7402:	9c 87       	std	Y+12, r25	; 0x0c
    7404:	8b 87       	std	Y+11, r24	; 0x0b
    7406:	2c 30       	cpi	r18, 0x0C	; 12
    7408:	31 05       	cpc	r19, r1
    740a:	28 f0       	brcs	.+10     	; 0x7416 <setdate_r+0x16a>
    740c:	9f 93       	push	r25
    740e:	8f 93       	push	r24
    7410:	8b e5       	ldi	r24, 0x5B	; 91
    7412:	97 e0       	ldi	r25, 0x07	; 7
    7414:	20 c0       	rjmp	.+64     	; 0x7456 <setdate_r+0x1aa>
    7416:	8f 81       	ldd	r24, Y+7	; 0x07
    7418:	98 85       	ldd	r25, Y+8	; 0x08
    741a:	9c 01       	movw	r18, r24
    741c:	21 50       	subi	r18, 0x01	; 1
    741e:	31 09       	sbc	r19, r1
    7420:	2f 31       	cpi	r18, 0x1F	; 31
    7422:	31 05       	cpc	r19, r1
    7424:	28 f0       	brcs	.+10     	; 0x7430 <setdate_r+0x184>
    7426:	9f 93       	push	r25
    7428:	8f 93       	push	r24
    742a:	8a e4       	ldi	r24, 0x4A	; 74
    742c:	97 e0       	ldi	r25, 0x07	; 7
    742e:	13 c0       	rjmp	.+38     	; 0x7456 <setdate_r+0x1aa>
    7430:	8d 81       	ldd	r24, Y+5	; 0x05
    7432:	9e 81       	ldd	r25, Y+6	; 0x06
    7434:	88 31       	cpi	r24, 0x18	; 24
    7436:	91 05       	cpc	r25, r1
    7438:	28 f0       	brcs	.+10     	; 0x7444 <setdate_r+0x198>
    743a:	9f 93       	push	r25
    743c:	8f 93       	push	r24
    743e:	88 e3       	ldi	r24, 0x38	; 56
    7440:	97 e0       	ldi	r25, 0x07	; 7
    7442:	09 c0       	rjmp	.+18     	; 0x7456 <setdate_r+0x1aa>
    7444:	8b 81       	ldd	r24, Y+3	; 0x03
    7446:	9c 81       	ldd	r25, Y+4	; 0x04
    7448:	8c 33       	cpi	r24, 0x3C	; 60
    744a:	91 05       	cpc	r25, r1
    744c:	78 f0       	brcs	.+30     	; 0x746c <setdate_r+0x1c0>
    744e:	9f 93       	push	r25
    7450:	8f 93       	push	r24
    7452:	87 e2       	ldi	r24, 0x27	; 39
    7454:	97 e0       	ldi	r25, 0x07	; 7
    7456:	1f 92       	push	r1
    7458:	9f 93       	push	r25
    745a:	8f 93       	push	r24
    745c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    7460:	0f 90       	pop	r0
    7462:	0f 90       	pop	r0
    7464:	0f 90       	pop	r0
    7466:	0f 90       	pop	r0
    7468:	0f 90       	pop	r0
    746a:	25 c0       	rjmp	.+74     	; 0x74b6 <setdate_r+0x20a>
    746c:	ce 01       	movw	r24, r28
    746e:	01 96       	adiw	r24, 0x01	; 1
    7470:	19 df       	rcall	.-462    	; 0x72a4 <timegm>
    7472:	6b 01       	movw	r12, r22
    7474:	7c 01       	movw	r14, r24
    7476:	6f 8b       	std	Y+23, r22	; 0x17
    7478:	78 8f       	std	Y+24, r23	; 0x18
    747a:	89 8f       	std	Y+25, r24	; 0x19
    747c:	9a 8f       	std	Y+26, r25	; 0x1a
    747e:	1b 8e       	std	Y+27, r1	; 0x1b
    7480:	1c 8e       	std	Y+28, r1	; 0x1c
    7482:	1d 8e       	std	Y+29, r1	; 0x1d
    7484:	1e 8e       	std	Y+30, r1	; 0x1e
    7486:	be 01       	movw	r22, r28
    7488:	69 5e       	subi	r22, 0xE9	; 233
    748a:	7f 4f       	sbci	r23, 0xFF	; 255
    748c:	80 e0       	ldi	r24, 0x00	; 0
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	08 db       	rcall	.-2544   	; 0x6aa2 <clock_settime>
    7492:	b7 01       	movw	r22, r14
    7494:	a6 01       	movw	r20, r12
    7496:	81 e0       	ldi	r24, 0x01	; 1
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <rtc_init>
    749e:	81 11       	cpse	r24, r1
    74a0:	0d c0       	rjmp	.+26     	; 0x74bc <setdate_r+0x210>
    74a2:	80 e1       	ldi	r24, 0x10	; 16
    74a4:	97 e0       	ldi	r25, 0x07	; 7
    74a6:	1f 92       	push	r1
    74a8:	9f 93       	push	r25
    74aa:	8f 93       	push	r24
    74ac:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    74b0:	0f 90       	pop	r0
    74b2:	0f 90       	pop	r0
    74b4:	0f 90       	pop	r0
    74b6:	8f ef       	ldi	r24, 0xFF	; 255
    74b8:	9f ef       	ldi	r25, 0xFF	; 255
    74ba:	02 c0       	rjmp	.+4      	; 0x74c0 <setdate_r+0x214>
    74bc:	80 e0       	ldi	r24, 0x00	; 0
    74be:	90 e0       	ldi	r25, 0x00	; 0
    74c0:	a0 96       	adiw	r28, 0x20	; 32
    74c2:	0f b6       	in	r0, 0x3f	; 63
    74c4:	f8 94       	cli
    74c6:	de bf       	out	0x3e, r29	; 62
    74c8:	0f be       	out	0x3f, r0	; 63
    74ca:	cd bf       	out	0x3d, r28	; 61
    74cc:	df 91       	pop	r29
    74ce:	cf 91       	pop	r28
    74d0:	ff 90       	pop	r15
    74d2:	ef 90       	pop	r14
    74d4:	df 90       	pop	r13
    74d6:	cf 90       	pop	r12
    74d8:	08 95       	ret

000074da <setdate>:
    74da:	a8 e2       	ldi	r26, 0x28	; 40
    74dc:	b0 e0       	ldi	r27, 0x00	; 0
    74de:	e3 e7       	ldi	r30, 0x73	; 115
    74e0:	fa e3       	ldi	r31, 0x3A	; 58
    74e2:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    74e6:	8e e7       	ldi	r24, 0x7E	; 126
    74e8:	97 e0       	ldi	r25, 0x07	; 7
    74ea:	1f 92       	push	r1
    74ec:	9f 93       	push	r25
    74ee:	8f 93       	push	r24
    74f0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    74f4:	40 91 7a 1c 	lds	r20, 0x1C7A	; 0x801c7a <__iob>
    74f8:	50 91 7b 1c 	lds	r21, 0x1C7B	; 0x801c7b <__iob+0x1>
    74fc:	67 e2       	ldi	r22, 0x27	; 39
    74fe:	70 e0       	ldi	r23, 0x00	; 0
    7500:	ce 01       	movw	r24, r28
    7502:	01 96       	adiw	r24, 0x01	; 1
    7504:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
    7508:	ce 01       	movw	r24, r28
    750a:	01 96       	adiw	r24, 0x01	; 1
    750c:	cf de       	rcall	.-610    	; 0x72ac <setdate_r>
    750e:	0f 90       	pop	r0
    7510:	0f 90       	pop	r0
    7512:	0f 90       	pop	r0
    7514:	a8 96       	adiw	r28, 0x28	; 40
    7516:	e2 e0       	ldi	r30, 0x02	; 2
    7518:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000751c <find_dst>:
    751c:	a8 e2       	ldi	r26, 0x28	; 40
    751e:	b0 e0       	ldi	r27, 0x00	; 0
    7520:	e4 e9       	ldi	r30, 0x94	; 148
    7522:	fa e3       	ldi	r31, 0x3A	; 58
    7524:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    7528:	3c 01       	movw	r6, r24
    752a:	1a 01       	movw	r2, r20
    752c:	2b 01       	movw	r4, r22
    752e:	49 01       	movw	r8, r18
    7530:	1c a3       	std	Y+36, r17	; 0x24
    7532:	0b a3       	std	Y+35, r16	; 0x23
    7534:	de a2       	std	Y+38, r13	; 0x26
    7536:	cd a2       	std	Y+37, r12	; 0x25
    7538:	b8 a6       	std	Y+40, r11	; 0x28
    753a:	af a2       	std	Y+39, r10	; 0x27
    753c:	be 01       	movw	r22, r28
    753e:	61 5e       	subi	r22, 0xE1	; 225
    7540:	7f 4f       	sbci	r23, 0xFF	; 255
    7542:	ce 01       	movw	r24, r28
    7544:	47 96       	adiw	r24, 0x17	; 23
    7546:	1b dc       	rcall	.-1994   	; 0x6d7e <gettimeofday>
    7548:	af 8d       	ldd	r26, Y+31	; 0x1f
    754a:	b8 a1       	ldd	r27, Y+32	; 0x20
    754c:	2c e3       	ldi	r18, 0x3C	; 60
    754e:	30 e0       	ldi	r19, 0x00	; 0
    7550:	0e 94 15 e9 	call	0x1d22a	; 0x1d22a <__usmulhisi3>
    7554:	5b 01       	movw	r10, r22
    7556:	6c 01       	movw	r12, r24
    7558:	61 14       	cp	r6, r1
    755a:	71 04       	cpc	r7, r1
    755c:	31 f0       	breq	.+12     	; 0x756a <find_dst+0x4e>
    755e:	20 e1       	ldi	r18, 0x10	; 16
    7560:	a2 1a       	sub	r10, r18
    7562:	2e e0       	ldi	r18, 0x0E	; 14
    7564:	b2 0a       	sbc	r11, r18
    7566:	c1 08       	sbc	r12, r1
    7568:	d1 08       	sbc	r13, r1
    756a:	81 14       	cp	r8, r1
    756c:	91 04       	cpc	r9, r1
    756e:	39 f0       	breq	.+14     	; 0x757e <find_dst+0x62>
    7570:	4c e6       	ldi	r20, 0x6C	; 108
    7572:	84 1a       	sub	r8, r20
    7574:	47 e0       	ldi	r20, 0x07	; 7
    7576:	94 0a       	sbc	r9, r20
    7578:	9c 86       	std	Y+12, r9	; 0x0c
    757a:	8b 86       	std	Y+11, r8	; 0x0b
    757c:	11 c0       	rjmp	.+34     	; 0x75a0 <find_dst+0x84>
    757e:	21 14       	cp	r2, r1
    7580:	31 04       	cpc	r3, r1
    7582:	41 04       	cpc	r4, r1
    7584:	51 04       	cpc	r5, r1
    7586:	21 f4       	brne	.+8      	; 0x7590 <find_dst+0x74>
    7588:	2f 88       	ldd	r2, Y+23	; 0x17
    758a:	38 8c       	ldd	r3, Y+24	; 0x18
    758c:	49 8c       	ldd	r4, Y+25	; 0x19
    758e:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7590:	8e 01       	movw	r16, r28
    7592:	0f 5f       	subi	r16, 0xFF	; 255
    7594:	1f 4f       	sbci	r17, 0xFF	; 255
    7596:	a6 01       	movw	r20, r12
    7598:	95 01       	movw	r18, r10
    759a:	c2 01       	movw	r24, r4
    759c:	b1 01       	movw	r22, r2
    759e:	cf da       	rcall	.-2658   	; 0x6b3e <time_to_tm>
    75a0:	8b a1       	ldd	r24, Y+35	; 0x23
    75a2:	9c a1       	ldd	r25, Y+36	; 0x24
    75a4:	01 97       	sbiw	r24, 0x01	; 1
    75a6:	9a 87       	std	Y+10, r25	; 0x0a
    75a8:	89 87       	std	Y+9, r24	; 0x09
    75aa:	81 e0       	ldi	r24, 0x01	; 1
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	98 87       	std	Y+8, r25	; 0x08
    75b0:	8f 83       	std	Y+7, r24	; 0x07
    75b2:	8f a1       	ldd	r24, Y+39	; 0x27
    75b4:	98 a5       	ldd	r25, Y+40	; 0x28
    75b6:	9e 83       	std	Y+6, r25	; 0x06
    75b8:	8d 83       	std	Y+5, r24	; 0x05
    75ba:	1c 82       	std	Y+4, r1	; 0x04
    75bc:	1b 82       	std	Y+3, r1	; 0x03
    75be:	1a 82       	std	Y+2, r1	; 0x02
    75c0:	19 82       	std	Y+1, r1	; 0x01
    75c2:	ce 01       	movw	r24, r28
    75c4:	01 96       	adiw	r24, 0x01	; 1
    75c6:	6e de       	rcall	.-804    	; 0x72a4 <timegm>
    75c8:	45 01       	movw	r8, r10
    75ca:	56 01       	movw	r10, r12
    75cc:	86 0e       	add	r8, r22
    75ce:	97 1e       	adc	r9, r23
    75d0:	a8 1e       	adc	r10, r24
    75d2:	b9 1e       	adc	r11, r25
    75d4:	8e 01       	movw	r16, r28
    75d6:	0f 5f       	subi	r16, 0xFF	; 255
    75d8:	1f 4f       	sbci	r17, 0xFF	; 255
    75da:	20 e0       	ldi	r18, 0x00	; 0
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	a9 01       	movw	r20, r18
    75e0:	c5 01       	movw	r24, r10
    75e2:	b4 01       	movw	r22, r8
    75e4:	ac da       	rcall	.-2728   	; 0x6b3e <time_to_tm>
    75e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    75e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    75ea:	e7 e0       	ldi	r30, 0x07	; 7
    75ec:	f0 e0       	ldi	r31, 0x00	; 0
    75ee:	c9 01       	movw	r24, r18
    75f0:	bf 01       	movw	r22, r30
    75f2:	0e 94 bb e8 	call	0x1d176	; 0x1d176 <__divmodhi4>
    75f6:	4d a1       	ldd	r20, Y+37	; 0x25
    75f8:	5e a1       	ldd	r21, Y+38	; 0x26
    75fa:	48 17       	cp	r20, r24
    75fc:	59 07       	cpc	r21, r25
    75fe:	21 f4       	brne	.+8      	; 0x7608 <find_dst+0xec>
    7600:	51 e0       	ldi	r21, 0x01	; 1
    7602:	e5 1a       	sub	r14, r21
    7604:	f1 08       	sbc	r15, r1
    7606:	51 f0       	breq	.+20     	; 0x761c <find_dst+0x100>
    7608:	80 e8       	ldi	r24, 0x80	; 128
    760a:	88 0e       	add	r8, r24
    760c:	81 e5       	ldi	r24, 0x51	; 81
    760e:	98 1e       	adc	r9, r24
    7610:	81 e0       	ldi	r24, 0x01	; 1
    7612:	a8 1e       	adc	r10, r24
    7614:	b1 1c       	adc	r11, r1
    7616:	2f 5f       	subi	r18, 0xFF	; 255
    7618:	3f 4f       	sbci	r19, 0xFF	; 255
    761a:	e9 cf       	rjmp	.-46     	; 0x75ee <find_dst+0xd2>
    761c:	c5 01       	movw	r24, r10
    761e:	b4 01       	movw	r22, r8
    7620:	a8 96       	adiw	r28, 0x28	; 40
    7622:	e2 e1       	ldi	r30, 0x12	; 18
    7624:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

00007628 <set_dst>:
    7628:	4f 92       	push	r4
    762a:	5f 92       	push	r5
    762c:	6f 92       	push	r6
    762e:	7f 92       	push	r7
    7630:	af 92       	push	r10
    7632:	bf 92       	push	r11
    7634:	cf 92       	push	r12
    7636:	df 92       	push	r13
    7638:	ef 92       	push	r14
    763a:	ff 92       	push	r15
    763c:	0f 93       	push	r16
    763e:	1f 93       	push	r17
    7640:	cf 93       	push	r28
    7642:	df 93       	push	r29
    7644:	cd b7       	in	r28, 0x3d	; 61
    7646:	de b7       	in	r29, 0x3e	; 62
    7648:	2c 97       	sbiw	r28, 0x0c	; 12
    764a:	0f b6       	in	r0, 0x3f	; 63
    764c:	f8 94       	cli
    764e:	de bf       	out	0x3e, r29	; 62
    7650:	0f be       	out	0x3f, r0	; 63
    7652:	cd bf       	out	0x3d, r28	; 61
    7654:	2b 01       	movw	r4, r22
    7656:	3c 01       	movw	r6, r24
    7658:	67 2b       	or	r22, r23
    765a:	68 2b       	or	r22, r24
    765c:	69 2b       	or	r22, r25
    765e:	51 f4       	brne	.+20     	; 0x7674 <set_dst+0x4c>
    7660:	be 01       	movw	r22, r28
    7662:	67 5f       	subi	r22, 0xF7	; 247
    7664:	7f 4f       	sbci	r23, 0xFF	; 255
    7666:	ce 01       	movw	r24, r28
    7668:	01 96       	adiw	r24, 0x01	; 1
    766a:	89 db       	rcall	.-2286   	; 0x6d7e <gettimeofday>
    766c:	49 80       	ldd	r4, Y+1	; 0x01
    766e:	5a 80       	ldd	r5, Y+2	; 0x02
    7670:	6b 80       	ldd	r6, Y+3	; 0x03
    7672:	7c 80       	ldd	r7, Y+4	; 0x04
    7674:	80 91 31 1a 	lds	r24, 0x1A31	; 0x801a31 <dst+0x8>
    7678:	90 91 32 1a 	lds	r25, 0x1A32	; 0x801a32 <dst+0x9>
    767c:	a0 91 33 1a 	lds	r26, 0x1A33	; 0x801a33 <dst+0xa>
    7680:	b0 91 34 1a 	lds	r27, 0x1A34	; 0x801a34 <dst+0xb>
    7684:	84 15       	cp	r24, r4
    7686:	95 05       	cpc	r25, r5
    7688:	a6 05       	cpc	r26, r6
    768a:	b7 05       	cpc	r27, r7
    768c:	50 f0       	brcs	.+20     	; 0x76a2 <set_dst+0x7a>
    768e:	84 19       	sub	r24, r4
    7690:	95 09       	sbc	r25, r5
    7692:	a6 09       	sbc	r26, r6
    7694:	b7 09       	sbc	r27, r7
    7696:	80 38       	cpi	r24, 0x80	; 128
    7698:	91 45       	sbci	r25, 0x51	; 81
    769a:	a1 40       	sbci	r26, 0x01	; 1
    769c:	b1 05       	cpc	r27, r1
    769e:	70 f4       	brcc	.+28     	; 0x76bc <set_dst+0x94>
    76a0:	42 c0       	rjmp	.+132    	; 0x7726 <set_dst+0xfe>
    76a2:	a3 01       	movw	r20, r6
    76a4:	92 01       	movw	r18, r4
    76a6:	28 1b       	sub	r18, r24
    76a8:	39 0b       	sbc	r19, r25
    76aa:	4a 0b       	sbc	r20, r26
    76ac:	5b 0b       	sbc	r21, r27
    76ae:	da 01       	movw	r26, r20
    76b0:	c9 01       	movw	r24, r18
    76b2:	80 38       	cpi	r24, 0x80	; 128
    76b4:	91 45       	sbci	r25, 0x51	; 81
    76b6:	a1 40       	sbci	r26, 0x01	; 1
    76b8:	b1 05       	cpc	r27, r1
    76ba:	a8 f1       	brcs	.+106    	; 0x7726 <set_dst+0xfe>
    76bc:	40 92 31 1a 	sts	0x1A31, r4	; 0x801a31 <dst+0x8>
    76c0:	50 92 32 1a 	sts	0x1A32, r5	; 0x801a32 <dst+0x9>
    76c4:	60 92 33 1a 	sts	0x1A33, r6	; 0x801a33 <dst+0xa>
    76c8:	70 92 34 1a 	sts	0x1A34, r7	; 0x801a34 <dst+0xb>
    76cc:	82 e0       	ldi	r24, 0x02	; 2
    76ce:	a8 2e       	mov	r10, r24
    76d0:	b1 2c       	mov	r11, r1
    76d2:	c1 2c       	mov	r12, r1
    76d4:	d1 2c       	mov	r13, r1
    76d6:	92 e0       	ldi	r25, 0x02	; 2
    76d8:	e9 2e       	mov	r14, r25
    76da:	f1 2c       	mov	r15, r1
    76dc:	03 e0       	ldi	r16, 0x03	; 3
    76de:	10 e0       	ldi	r17, 0x00	; 0
    76e0:	20 e0       	ldi	r18, 0x00	; 0
    76e2:	30 e0       	ldi	r19, 0x00	; 0
    76e4:	b3 01       	movw	r22, r6
    76e6:	a2 01       	movw	r20, r4
    76e8:	80 e0       	ldi	r24, 0x00	; 0
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	17 df       	rcall	.-466    	; 0x751c <find_dst>
    76ee:	60 93 29 1a 	sts	0x1A29, r22	; 0x801a29 <dst>
    76f2:	70 93 2a 1a 	sts	0x1A2A, r23	; 0x801a2a <dst+0x1>
    76f6:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <dst+0x2>
    76fa:	90 93 2c 1a 	sts	0x1A2C, r25	; 0x801a2c <dst+0x3>
    76fe:	ee 24       	eor	r14, r14
    7700:	e3 94       	inc	r14
    7702:	f1 2c       	mov	r15, r1
    7704:	0b e0       	ldi	r16, 0x0B	; 11
    7706:	10 e0       	ldi	r17, 0x00	; 0
    7708:	20 e0       	ldi	r18, 0x00	; 0
    770a:	30 e0       	ldi	r19, 0x00	; 0
    770c:	b3 01       	movw	r22, r6
    770e:	a2 01       	movw	r20, r4
    7710:	81 e0       	ldi	r24, 0x01	; 1
    7712:	90 e0       	ldi	r25, 0x00	; 0
    7714:	03 df       	rcall	.-506    	; 0x751c <find_dst>
    7716:	60 93 2d 1a 	sts	0x1A2D, r22	; 0x801a2d <dst+0x4>
    771a:	70 93 2e 1a 	sts	0x1A2E, r23	; 0x801a2e <dst+0x5>
    771e:	80 93 2f 1a 	sts	0x1A2F, r24	; 0x801a2f <dst+0x6>
    7722:	90 93 30 1a 	sts	0x1A30, r25	; 0x801a30 <dst+0x7>
    7726:	2c 96       	adiw	r28, 0x0c	; 12
    7728:	0f b6       	in	r0, 0x3f	; 63
    772a:	f8 94       	cli
    772c:	de bf       	out	0x3e, r29	; 62
    772e:	0f be       	out	0x3f, r0	; 63
    7730:	cd bf       	out	0x3d, r28	; 61
    7732:	df 91       	pop	r29
    7734:	cf 91       	pop	r28
    7736:	1f 91       	pop	r17
    7738:	0f 91       	pop	r16
    773a:	ff 90       	pop	r15
    773c:	ef 90       	pop	r14
    773e:	df 90       	pop	r13
    7740:	cf 90       	pop	r12
    7742:	bf 90       	pop	r11
    7744:	af 90       	pop	r10
    7746:	7f 90       	pop	r7
    7748:	6f 90       	pop	r6
    774a:	5f 90       	pop	r5
    774c:	4f 90       	pop	r4
    774e:	08 95       	ret

00007750 <asctime_r>:
    7750:	0f 93       	push	r16
    7752:	1f 93       	push	r17
    7754:	cf 93       	push	r28
    7756:	df 93       	push	r29
    7758:	ec 01       	movw	r28, r24
    775a:	8b 01       	movw	r16, r22
    775c:	60 e0       	ldi	r22, 0x00	; 0
    775e:	70 e0       	ldi	r23, 0x00	; 0
    7760:	d9 db       	rcall	.-2126   	; 0x6f14 <normalize>
    7762:	20 e2       	ldi	r18, 0x20	; 32
    7764:	d8 01       	movw	r26, r16
    7766:	82 2f       	mov	r24, r18
    7768:	1d 92       	st	X+, r1
    776a:	8a 95       	dec	r24
    776c:	e9 f7       	brne	.-6      	; 0x7768 <asctime_r+0x18>
    776e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7770:	9b 85       	ldd	r25, Y+11	; 0x0b
    7772:	84 59       	subi	r24, 0x94	; 148
    7774:	98 4f       	sbci	r25, 0xF8	; 248
    7776:	9f 93       	push	r25
    7778:	8f 93       	push	r24
    777a:	89 81       	ldd	r24, Y+1	; 0x01
    777c:	8f 93       	push	r24
    777e:	88 81       	ld	r24, Y
    7780:	8f 93       	push	r24
    7782:	8b 81       	ldd	r24, Y+3	; 0x03
    7784:	8f 93       	push	r24
    7786:	8a 81       	ldd	r24, Y+2	; 0x02
    7788:	8f 93       	push	r24
    778a:	8d 81       	ldd	r24, Y+5	; 0x05
    778c:	8f 93       	push	r24
    778e:	8c 81       	ldd	r24, Y+4	; 0x04
    7790:	8f 93       	push	r24
    7792:	8f 81       	ldd	r24, Y+7	; 0x07
    7794:	8f 93       	push	r24
    7796:	8e 81       	ldd	r24, Y+6	; 0x06
    7798:	8f 93       	push	r24
    779a:	e8 85       	ldd	r30, Y+8	; 0x08
    779c:	f9 85       	ldd	r31, Y+9	; 0x09
    779e:	ee 0f       	add	r30, r30
    77a0:	ff 1f       	adc	r31, r31
    77a2:	e9 5f       	subi	r30, 0xF9	; 249
    77a4:	fe 4f       	sbci	r31, 0xFE	; 254
    77a6:	81 81       	ldd	r24, Z+1	; 0x01
    77a8:	8f 93       	push	r24
    77aa:	80 81       	ld	r24, Z
    77ac:	8f 93       	push	r24
    77ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    77b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    77b2:	ee 0f       	add	r30, r30
    77b4:	ff 1f       	adc	r31, r31
    77b6:	ef 5d       	subi	r30, 0xDF	; 223
    77b8:	fe 4f       	sbci	r31, 0xFE	; 254
    77ba:	81 81       	ldd	r24, Z+1	; 0x01
    77bc:	8f 93       	push	r24
    77be:	80 81       	ld	r24, Z
    77c0:	8f 93       	push	r24
    77c2:	8f e9       	ldi	r24, 0x9F	; 159
    77c4:	97 e0       	ldi	r25, 0x07	; 7
    77c6:	1f 92       	push	r1
    77c8:	9f 93       	push	r25
    77ca:	8f 93       	push	r24
    77cc:	1f 92       	push	r1
    77ce:	2f 93       	push	r18
    77d0:	1f 93       	push	r17
    77d2:	0f 93       	push	r16
    77d4:	0e 94 09 45 	call	0x8a12	; 0x8a12 <snprintf_P>
    77d8:	ad b7       	in	r26, 0x3d	; 61
    77da:	be b7       	in	r27, 0x3e	; 62
    77dc:	55 96       	adiw	r26, 0x15	; 21
    77de:	0f b6       	in	r0, 0x3f	; 63
    77e0:	f8 94       	cli
    77e2:	be bf       	out	0x3e, r27	; 62
    77e4:	0f be       	out	0x3f, r0	; 63
    77e6:	ad bf       	out	0x3d, r26	; 61
    77e8:	c8 01       	movw	r24, r16
    77ea:	df 91       	pop	r29
    77ec:	cf 91       	pop	r28
    77ee:	1f 91       	pop	r17
    77f0:	0f 91       	pop	r16
    77f2:	08 95       	ret

000077f4 <asctime>:
    77f4:	60 ec       	ldi	r22, 0xC0	; 192
    77f6:	77 e1       	ldi	r23, 0x17	; 23
    77f8:	ab cf       	rjmp	.-170    	; 0x7750 <asctime_r>
    77fa:	08 95       	ret

000077fc <ctime_gm>:
    77fc:	a6 e1       	ldi	r26, 0x16	; 22
    77fe:	b0 e0       	ldi	r27, 0x00	; 0
    7800:	e4 e0       	ldi	r30, 0x04	; 4
    7802:	fc e3       	ldi	r31, 0x3C	; 60
    7804:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    7808:	be 01       	movw	r22, r28
    780a:	6f 5f       	subi	r22, 0xFF	; 255
    780c:	7f 4f       	sbci	r23, 0xFF	; 255
    780e:	75 da       	rcall	.-2838   	; 0x6cfa <gmtime_r>
    7810:	60 e8       	ldi	r22, 0x80	; 128
    7812:	77 e1       	ldi	r23, 0x17	; 23
    7814:	9d df       	rcall	.-198    	; 0x7750 <asctime_r>
    7816:	66 96       	adiw	r28, 0x16	; 22
    7818:	e2 e0       	ldi	r30, 0x02	; 2
    781a:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000781e <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    781e:	a2 e2       	ldi	r26, 0x22	; 34
    7820:	b0 e0       	ldi	r27, 0x00	; 0
    7822:	e5 e1       	ldi	r30, 0x15	; 21
    7824:	fc e3       	ldi	r31, 0x3C	; 60
    7826:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    782a:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    782c:	40 e0       	ldi	r20, 0x00	; 0
    782e:	50 e0       	ldi	r21, 0x00	; 0
    7830:	ba 01       	movw	r22, r20
    7832:	80 e0       	ldi	r24, 0x00	; 0
    7834:	90 e0       	ldi	r25, 0x00	; 0
    7836:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <rtc_init>
    783a:	81 11       	cpse	r24, r1
    783c:	27 c0       	rjmp	.+78     	; 0x788c <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    783e:	8a e9       	ldi	r24, 0x9A	; 154
    7840:	96 e0       	ldi	r25, 0x06	; 6
    7842:	1f 92       	push	r1
    7844:	9f 93       	push	r25
    7846:	8f 93       	push	r24
    7848:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("attempting rtc init\n");
    784c:	85 e8       	ldi	r24, 0x85	; 133
    784e:	96 e0       	ldi	r25, 0x06	; 6
    7850:	1f 92       	push	r1
    7852:	9f 93       	push	r25
    7854:	8f 93       	push	r24
    7856:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    785a:	40 e0       	ldi	r20, 0x00	; 0
    785c:	50 e0       	ldi	r21, 0x00	; 0
    785e:	ba 01       	movw	r22, r20
    7860:	81 e0       	ldi	r24, 0x01	; 1
    7862:	90 e0       	ldi	r25, 0x00	; 0
    7864:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <rtc_init>
    7868:	0f 90       	pop	r0
    786a:	0f 90       	pop	r0
    786c:	0f 90       	pop	r0
    786e:	0f 90       	pop	r0
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
    7874:	81 11       	cpse	r24, r1
    7876:	0a c0       	rjmp	.+20     	; 0x788c <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7878:	8e e6       	ldi	r24, 0x6E	; 110
    787a:	96 e0       	ldi	r25, 0x06	; 6
    787c:	1f 92       	push	r1
    787e:	9f 93       	push	r25
    7880:	8f 93       	push	r24
    7882:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    7886:	0f 90       	pop	r0
    7888:	0f 90       	pop	r0
    788a:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    788c:	ce 01       	movw	r24, r28
    788e:	01 96       	adiw	r24, 0x01	; 1
    7890:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <rtc_read>
    7894:	88 23       	and	r24, r24
    7896:	51 f0       	breq	.+20     	; 0x78ac <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7898:	ce 01       	movw	r24, r28
    789a:	01 96       	adiw	r24, 0x01	; 1
    789c:	03 dd       	rcall	.-1530   	; 0x72a4 <timegm>
    789e:	6b 01       	movw	r12, r22
    78a0:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    78a2:	67 2b       	or	r22, r23
    78a4:	68 2b       	or	r22, r24
    78a6:	69 2b       	or	r22, r25
    78a8:	c1 f4       	brne	.+48     	; 0x78da <initialize_clock+0xbc>
    78aa:	0a c0       	rjmp	.+20     	; 0x78c0 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    78ac:	84 e5       	ldi	r24, 0x54	; 84
    78ae:	96 e0       	ldi	r25, 0x06	; 6
    78b0:	1f 92       	push	r1
    78b2:	9f 93       	push	r25
    78b4:	8f 93       	push	r24
    78b6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    78ba:	0f 90       	pop	r0
    78bc:	0f 90       	pop	r0
    78be:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    78c0:	80 e3       	ldi	r24, 0x30	; 48
    78c2:	96 e0       	ldi	r25, 0x06	; 6
    78c4:	1f 92       	push	r1
    78c6:	9f 93       	push	r25
    78c8:	8f 93       	push	r24
    78ca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    78ce:	0f 90       	pop	r0
    78d0:	0f 90       	pop	r0
    78d2:	0f 90       	pop	r0
    78d4:	c1 2c       	mov	r12, r1
    78d6:	d1 2c       	mov	r13, r1
    78d8:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    78da:	18 a3       	std	Y+32, r17	; 0x20
    78dc:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    78de:	1a a2       	std	Y+34, r1	; 0x22
    78e0:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    78e2:	ce 01       	movw	r24, r28
    78e4:	4f 96       	adiw	r24, 0x1f	; 31
    78e6:	3a da       	rcall	.-2956   	; 0x6d5c <settimezone>

    ts.tv_sec = seconds;
    78e8:	cf 8a       	std	Y+23, r12	; 0x17
    78ea:	d8 8e       	std	Y+24, r13	; 0x18
    78ec:	e9 8e       	std	Y+25, r14	; 0x19
    78ee:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    78f0:	1b 8e       	std	Y+27, r1	; 0x1b
    78f2:	1c 8e       	std	Y+28, r1	; 0x1c
    78f4:	1d 8e       	std	Y+29, r1	; 0x1d
    78f6:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    78f8:	be 01       	movw	r22, r28
    78fa:	69 5e       	subi	r22, 0xE9	; 233
    78fc:	7f 4f       	sbci	r23, 0xFF	; 255
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	90 e0       	ldi	r25, 0x00	; 0
    7902:	cf d8       	rcall	.-3682   	; 0x6aa2 <clock_settime>
}
    7904:	a2 96       	adiw	r28, 0x22	; 34
    7906:	e8 e0       	ldi	r30, 0x08	; 8
    7908:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000790c <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    790c:	a2 e2       	ldi	r26, 0x22	; 34
    790e:	b0 e0       	ldi	r27, 0x00	; 0
    7910:	ec e8       	ldi	r30, 0x8C	; 140
    7912:	fc e3       	ldi	r31, 0x3C	; 60
    7914:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7918:	ce 01       	movw	r24, r28
    791a:	01 96       	adiw	r24, 0x01	; 1
    791c:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <rtc_read>
    7920:	88 23       	and	r24, r24
    7922:	21 f1       	breq	.+72     	; 0x796c <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7924:	ce 01       	movw	r24, r28
    7926:	01 96       	adiw	r24, 0x01	; 1
    7928:	bd dc       	rcall	.-1670   	; 0x72a4 <timegm>
    792a:	6f 8f       	std	Y+31, r22	; 0x1f
    792c:	78 a3       	std	Y+32, r23	; 0x20
    792e:	89 a3       	std	Y+33, r24	; 0x21
    7930:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7932:	9f 93       	push	r25
    7934:	8f 93       	push	r24
    7936:	7f 93       	push	r23
    7938:	6f 93       	push	r22
    793a:	8e e1       	ldi	r24, 0x1E	; 30
    793c:	96 e0       	ldi	r25, 0x06	; 6
    793e:	1f 92       	push	r1
    7940:	9f 93       	push	r25
    7942:	8f 93       	push	r24
    7944:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7948:	ce 01       	movw	r24, r28
    794a:	01 96       	adiw	r24, 0x01	; 1
    794c:	53 df       	rcall	.-346    	; 0x77f4 <asctime>
    794e:	9f 93       	push	r25
    7950:	8f 93       	push	r24
    7952:	8d e0       	ldi	r24, 0x0D	; 13
    7954:	96 e0       	ldi	r25, 0x06	; 6
    7956:	1f 92       	push	r1
    7958:	9f 93       	push	r25
    795a:	8f 93       	push	r24
    795c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    7960:	0f b6       	in	r0, 0x3f	; 63
    7962:	f8 94       	cli
    7964:	de bf       	out	0x3e, r29	; 62
    7966:	0f be       	out	0x3f, r0	; 63
    7968:	cd bf       	out	0x3d, r28	; 61
    796a:	0a c0       	rjmp	.+20     	; 0x7980 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    796c:	8c ef       	ldi	r24, 0xFC	; 252
    796e:	95 e0       	ldi	r25, 0x05	; 5
    7970:	1f 92       	push	r1
    7972:	9f 93       	push	r25
    7974:	8f 93       	push	r24
    7976:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    797a:	0f 90       	pop	r0
    797c:	0f 90       	pop	r0
    797e:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7980:	be 01       	movw	r22, r28
    7982:	69 5e       	subi	r22, 0xE9	; 233
    7984:	7f 4f       	sbci	r23, 0xFF	; 255
    7986:	80 e0       	ldi	r24, 0x00	; 0
    7988:	90 e0       	ldi	r25, 0x00	; 0
    798a:	0e 94 c2 32 	call	0x6584	; 0x6584 <clock_gettime>
    seconds = ts.tv_sec;
    798e:	8f 89       	ldd	r24, Y+23	; 0x17
    7990:	98 8d       	ldd	r25, Y+24	; 0x18
    7992:	29 8d       	ldd	r18, Y+25	; 0x19
    7994:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7996:	8f 8f       	std	Y+31, r24	; 0x1f
    7998:	98 a3       	std	Y+32, r25	; 0x20
    799a:	29 a3       	std	Y+33, r18	; 0x21
    799c:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    799e:	3f 93       	push	r19
    79a0:	2f 93       	push	r18
    79a2:	9f 93       	push	r25
    79a4:	8f 93       	push	r24
    79a6:	8a ee       	ldi	r24, 0xEA	; 234
    79a8:	95 e0       	ldi	r25, 0x05	; 5
    79aa:	1f 92       	push	r1
    79ac:	9f 93       	push	r25
    79ae:	8f 93       	push	r24
    79b0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    79b4:	ce 01       	movw	r24, r28
    79b6:	4f 96       	adiw	r24, 0x1f	; 31
    79b8:	b5 d9       	rcall	.-3222   	; 0x6d24 <gmtime>
    79ba:	1c df       	rcall	.-456    	; 0x77f4 <asctime>
    79bc:	9f 93       	push	r25
    79be:	8f 93       	push	r24
    79c0:	89 ed       	ldi	r24, 0xD9	; 217
    79c2:	95 e0       	ldi	r25, 0x05	; 5
    79c4:	1f 92       	push	r1
    79c6:	9f 93       	push	r25
    79c8:	8f 93       	push	r24
    79ca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
    79ce:	0f b6       	in	r0, 0x3f	; 63
    79d0:	f8 94       	cli
    79d2:	de bf       	out	0x3e, r29	; 62
    79d4:	0f be       	out	0x3f, r0	; 63
    79d6:	cd bf       	out	0x3d, r28	; 61
    79d8:	a2 96       	adiw	r28, 0x22	; 34
    79da:	e2 e0       	ldi	r30, 0x02	; 2
    79dc:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000079e0 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    79e0:	fc 01       	movw	r30, r24
    79e2:	84 81       	ldd	r24, Z+4	; 0x04
    79e4:	95 81       	ldd	r25, Z+5	; 0x05
    79e6:	00 97       	sbiw	r24, 0x00	; 0
    79e8:	79 f0       	breq	.+30     	; 0x7a08 <_putc_buffer_fn+0x28>
    79ea:	66 23       	and	r22, r22
    79ec:	69 f0       	breq	.+26     	; 0x7a08 <_putc_buffer_fn+0x28>
    79ee:	01 97       	sbiw	r24, 0x01	; 1
    79f0:	95 83       	std	Z+5, r25	; 0x05
    79f2:	84 83       	std	Z+4, r24	; 0x04
    79f4:	86 81       	ldd	r24, Z+6	; 0x06
    79f6:	97 81       	ldd	r25, Z+7	; 0x07
    79f8:	01 96       	adiw	r24, 0x01	; 1
    79fa:	97 83       	std	Z+7, r25	; 0x07
    79fc:	86 83       	std	Z+6, r24	; 0x06
    79fe:	a2 81       	ldd	r26, Z+2	; 0x02
    7a00:	b3 81       	ldd	r27, Z+3	; 0x03
    7a02:	6d 93       	st	X+, r22
    7a04:	b3 83       	std	Z+3, r27	; 0x03
    7a06:	a2 83       	std	Z+2, r26	; 0x02
    7a08:	02 80       	ldd	r0, Z+2	; 0x02
    7a0a:	f3 81       	ldd	r31, Z+3	; 0x03
    7a0c:	e0 2d       	mov	r30, r0
    7a0e:	10 82       	st	Z, r1
    7a10:	08 95       	ret

00007a12 <_putc_fn>:
    7a12:	fc 01       	movw	r30, r24
    7a14:	26 81       	ldd	r18, Z+6	; 0x06
    7a16:	37 81       	ldd	r19, Z+7	; 0x07
    7a18:	2f 5f       	subi	r18, 0xFF	; 255
    7a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a1c:	37 83       	std	Z+7, r19	; 0x07
    7a1e:	26 83       	std	Z+6, r18	; 0x06
    7a20:	86 2f       	mov	r24, r22
    7a22:	90 e0       	ldi	r25, 0x00	; 0
    7a24:	0c 94 4b 79 	jmp	0xf296	; 0xf296 <putchar>
    7a28:	08 95       	ret

00007a2a <bin2num>:
    7a2a:	a0 e0       	ldi	r26, 0x00	; 0
    7a2c:	b0 e0       	ldi	r27, 0x00	; 0
    7a2e:	eb e1       	ldi	r30, 0x1B	; 27
    7a30:	fd e3       	ldi	r31, 0x3D	; 61
    7a32:	0c 94 42 e9 	jmp	0x1d284	; 0x1d284 <__prologue_saves__+0xe>
    7a36:	ea 01       	movw	r28, r20
    7a38:	53 e0       	ldi	r21, 0x03	; 3
    7a3a:	ee 0c       	add	r14, r14
    7a3c:	ff 1c       	adc	r15, r15
    7a3e:	5a 95       	dec	r21
    7a40:	e1 f7       	brne	.-8      	; 0x7a3a <bin2num+0x10>
    7a42:	fc 01       	movw	r30, r24
    7a44:	af 01       	movw	r20, r30
    7a46:	48 1b       	sub	r20, r24
    7a48:	59 0b       	sbc	r21, r25
    7a4a:	c4 17       	cp	r28, r20
    7a4c:	d5 07       	cpc	r29, r21
    7a4e:	14 f0       	brlt	.+4      	; 0x7a54 <bin2num+0x2a>
    7a50:	11 92       	st	Z+, r1
    7a52:	f8 cf       	rjmp	.-16     	; 0x7a44 <bin2num+0x1a>
    7a54:	41 e0       	ldi	r20, 0x01	; 1
    7a56:	e4 1a       	sub	r14, r20
    7a58:	f1 08       	sbc	r15, r1
    7a5a:	5b 01       	movw	r10, r22
    7a5c:	42 e0       	ldi	r20, 0x02	; 2
    7a5e:	a4 1a       	sub	r10, r20
    7a60:	b1 08       	sbc	r11, r1
    7a62:	f7 fc       	sbrc	r15, 7
    7a64:	3b c0       	rjmp	.+118    	; 0x7adc <bin2num+0xb2>
    7a66:	f7 01       	movw	r30, r14
    7a68:	43 e0       	ldi	r20, 0x03	; 3
    7a6a:	f5 95       	asr	r31
    7a6c:	e7 95       	ror	r30
    7a6e:	4a 95       	dec	r20
    7a70:	e1 f7       	brne	.-8      	; 0x7a6a <bin2num+0x40>
    7a72:	e0 0f       	add	r30, r16
    7a74:	f1 1f       	adc	r31, r17
    7a76:	40 81       	ld	r20, Z
    7a78:	50 e0       	ldi	r21, 0x00	; 0
    7a7a:	f7 01       	movw	r30, r14
    7a7c:	e7 70       	andi	r30, 0x07	; 7
    7a7e:	ff 27       	eor	r31, r31
    7a80:	02 c0       	rjmp	.+4      	; 0x7a86 <bin2num+0x5c>
    7a82:	55 95       	asr	r21
    7a84:	47 95       	ror	r20
    7a86:	ea 95       	dec	r30
    7a88:	e2 f7       	brpl	.-8      	; 0x7a82 <bin2num+0x58>
    7a8a:	41 70       	andi	r20, 0x01	; 1
    7a8c:	55 27       	eor	r21, r21
    7a8e:	dc 01       	movw	r26, r24
    7a90:	e0 e0       	ldi	r30, 0x00	; 0
    7a92:	f0 e0       	ldi	r31, 0x00	; 0
    7a94:	ec 17       	cp	r30, r28
    7a96:	fd 07       	cpc	r31, r29
    7a98:	ec f4       	brge	.+58     	; 0x7ad4 <bin2num+0xaa>
    7a9a:	ea 15       	cp	r30, r10
    7a9c:	fb 05       	cpc	r31, r11
    7a9e:	4c f0       	brlt	.+18     	; 0x7ab2 <bin2num+0x88>
    7aa0:	dc 01       	movw	r26, r24
    7aa2:	ae 0f       	add	r26, r30
    7aa4:	bf 1f       	adc	r27, r31
    7aa6:	1c 92       	st	X, r1
    7aa8:	41 e0       	ldi	r20, 0x01	; 1
    7aaa:	e4 1a       	sub	r14, r20
    7aac:	f1 08       	sbc	r15, r1
    7aae:	ef 01       	movw	r28, r30
    7ab0:	d8 cf       	rjmp	.-80     	; 0x7a62 <bin2num+0x38>
    7ab2:	9c 90       	ld	r9, X
    7ab4:	99 0c       	add	r9, r9
    7ab6:	94 2a       	or	r9, r20
    7ab8:	49 2d       	mov	r20, r9
    7aba:	50 e0       	ldi	r21, 0x00	; 0
    7abc:	42 17       	cp	r20, r18
    7abe:	53 07       	cpc	r21, r19
    7ac0:	24 f0       	brlt	.+8      	; 0x7aca <bin2num+0xa0>
    7ac2:	92 1a       	sub	r9, r18
    7ac4:	41 e0       	ldi	r20, 0x01	; 1
    7ac6:	50 e0       	ldi	r21, 0x00	; 0
    7ac8:	02 c0       	rjmp	.+4      	; 0x7ace <bin2num+0xa4>
    7aca:	40 e0       	ldi	r20, 0x00	; 0
    7acc:	50 e0       	ldi	r21, 0x00	; 0
    7ace:	9d 92       	st	X+, r9
    7ad0:	31 96       	adiw	r30, 0x01	; 1
    7ad2:	e0 cf       	rjmp	.-64     	; 0x7a94 <bin2num+0x6a>
    7ad4:	41 15       	cp	r20, r1
    7ad6:	51 05       	cpc	r21, r1
    7ad8:	01 f7       	brne	.-64     	; 0x7a9a <bin2num+0x70>
    7ada:	e2 cf       	rjmp	.-60     	; 0x7aa0 <bin2num+0x76>
    7adc:	fc 01       	movw	r30, r24
    7ade:	9f 01       	movw	r18, r30
    7ae0:	28 1b       	sub	r18, r24
    7ae2:	39 0b       	sbc	r19, r25
    7ae4:	2c 17       	cp	r18, r28
    7ae6:	3d 07       	cpc	r19, r29
    7ae8:	4c f4       	brge	.+18     	; 0x7afc <bin2num+0xd2>
    7aea:	20 81       	ld	r18, Z
    7aec:	2a 30       	cpi	r18, 0x0A	; 10
    7aee:	10 f4       	brcc	.+4      	; 0x7af4 <bin2num+0xca>
    7af0:	20 5d       	subi	r18, 0xD0	; 208
    7af2:	01 c0       	rjmp	.+2      	; 0x7af6 <bin2num+0xcc>
    7af4:	29 5a       	subi	r18, 0xA9	; 169
    7af6:	20 83       	st	Z, r18
    7af8:	31 96       	adiw	r30, 0x01	; 1
    7afa:	f1 cf       	rjmp	.-30     	; 0x7ade <bin2num+0xb4>
    7afc:	9e 01       	movw	r18, r28
    7afe:	d7 ff       	sbrs	r29, 7
    7b00:	02 c0       	rjmp	.+4      	; 0x7b06 <bin2num+0xdc>
    7b02:	20 e0       	ldi	r18, 0x00	; 0
    7b04:	30 e0       	ldi	r19, 0x00	; 0
    7b06:	c1 14       	cp	r12, r1
    7b08:	d1 04       	cpc	r13, r1
    7b0a:	61 f0       	breq	.+24     	; 0x7b24 <bin2num+0xfa>
    7b0c:	61 50       	subi	r22, 0x01	; 1
    7b0e:	71 09       	sbc	r23, r1
    7b10:	26 17       	cp	r18, r22
    7b12:	37 07       	cpc	r19, r23
    7b14:	3c f4       	brge	.+14     	; 0x7b24 <bin2num+0xfa>
    7b16:	fc 01       	movw	r30, r24
    7b18:	e2 0f       	add	r30, r18
    7b1a:	f3 1f       	adc	r31, r19
    7b1c:	c0 82       	st	Z, r12
    7b1e:	21 96       	adiw	r28, 0x01	; 1
    7b20:	2f 5f       	subi	r18, 0xFF	; 255
    7b22:	3f 4f       	sbci	r19, 0xFF	; 255
    7b24:	fc 01       	movw	r30, r24
    7b26:	e2 0f       	add	r30, r18
    7b28:	f3 1f       	adc	r31, r19
    7b2a:	10 82       	st	Z, r1
    7b2c:	0e 94 b2 30 	call	0x6164	; 0x6164 <reverse>
    7b30:	ce 01       	movw	r24, r28
    7b32:	cd b7       	in	r28, 0x3d	; 61
    7b34:	de b7       	in	r29, 0x3e	; 62
    7b36:	eb e0       	ldi	r30, 0x0B	; 11
    7b38:	0c 94 5e e9 	jmp	0x1d2bc	; 0x1d2bc <__epilogue_restores__+0xe>

00007b3c <pch_init>:
    7b3c:	e5 e3       	ldi	r30, 0x35	; 53
    7b3e:	fa e1       	ldi	r31, 0x1A	; 26
    7b40:	91 83       	std	Z+1, r25	; 0x01
    7b42:	80 83       	st	Z, r24
    7b44:	13 82       	std	Z+3, r1	; 0x03
    7b46:	12 82       	std	Z+2, r1	; 0x02
    7b48:	61 50       	subi	r22, 0x01	; 1
    7b4a:	71 09       	sbc	r23, r1
    7b4c:	75 83       	std	Z+5, r23	; 0x05
    7b4e:	64 83       	std	Z+4, r22	; 0x04
    7b50:	fc 01       	movw	r30, r24
    7b52:	10 82       	st	Z, r1
    7b54:	08 95       	ret

00007b56 <pch>:
    7b56:	20 91 37 1a 	lds	r18, 0x1A37	; 0x801a37 <_pch+0x2>
    7b5a:	30 91 38 1a 	lds	r19, 0x1A38	; 0x801a38 <_pch+0x3>
    7b5e:	60 91 39 1a 	lds	r22, 0x1A39	; 0x801a39 <_pch+0x4>
    7b62:	70 91 3a 1a 	lds	r23, 0x1A3A	; 0x801a3a <_pch+0x5>
    7b66:	40 91 35 1a 	lds	r20, 0x1A35	; 0x801a35 <_pch>
    7b6a:	50 91 36 1a 	lds	r21, 0x1A36	; 0x801a36 <_pch+0x1>
    7b6e:	26 17       	cp	r18, r22
    7b70:	37 07       	cpc	r19, r23
    7b72:	64 f4       	brge	.+24     	; 0x7b8c <pch+0x36>
    7b74:	b9 01       	movw	r22, r18
    7b76:	6f 5f       	subi	r22, 0xFF	; 255
    7b78:	7f 4f       	sbci	r23, 0xFF	; 255
    7b7a:	70 93 38 1a 	sts	0x1A38, r23	; 0x801a38 <_pch+0x3>
    7b7e:	60 93 37 1a 	sts	0x1A37, r22	; 0x801a37 <_pch+0x2>
    7b82:	fa 01       	movw	r30, r20
    7b84:	e2 0f       	add	r30, r18
    7b86:	f3 1f       	adc	r31, r19
    7b88:	80 83       	st	Z, r24
    7b8a:	04 c0       	rjmp	.+8      	; 0x7b94 <pch+0x3e>
    7b8c:	fa 01       	movw	r30, r20
    7b8e:	e2 0f       	add	r30, r18
    7b90:	f3 1f       	adc	r31, r19
    7b92:	10 82       	st	Z, r1
    7b94:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_pch+0x2>
    7b98:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_pch+0x3>
    7b9c:	08 95       	ret

00007b9e <p_ntoa>:
    7b9e:	af 92       	push	r10
    7ba0:	cf 92       	push	r12
    7ba2:	df 92       	push	r13
    7ba4:	ef 92       	push	r14
    7ba6:	ff 92       	push	r15
    7ba8:	0f 93       	push	r16
    7baa:	1f 93       	push	r17
    7bac:	cf 93       	push	r28
    7bae:	df 93       	push	r29
    7bb0:	dc 01       	movw	r26, r24
    7bb2:	eb 01       	movw	r28, r22
    7bb4:	fa 01       	movw	r30, r20
    7bb6:	b9 01       	movw	r22, r18
    7bb8:	98 01       	movw	r18, r16
    7bba:	a6 01       	movw	r20, r12
    7bbc:	9a 2d       	mov	r25, r10
    7bbe:	a5 fa       	bst	r10, 5
    7bc0:	cc 24       	eor	r12, r12
    7bc2:	c0 f8       	bld	r12, 0
    7bc4:	a6 fc       	sbrc	r10, 6
    7bc6:	07 c0       	rjmp	.+14     	; 0x7bd6 <p_ntoa+0x38>
    7bc8:	a2 fc       	sbrc	r10, 2
    7bca:	08 c0       	rjmp	.+16     	; 0x7bdc <p_ntoa+0x3e>
    7bcc:	a4 fe       	sbrs	r10, 4
    7bce:	09 c0       	rjmp	.+18     	; 0x7be2 <p_ntoa+0x44>
    7bd0:	00 e2       	ldi	r16, 0x20	; 32
    7bd2:	10 e0       	ldi	r17, 0x00	; 0
    7bd4:	08 c0       	rjmp	.+16     	; 0x7be6 <p_ntoa+0x48>
    7bd6:	0d e2       	ldi	r16, 0x2D	; 45
    7bd8:	10 e0       	ldi	r17, 0x00	; 0
    7bda:	05 c0       	rjmp	.+10     	; 0x7be6 <p_ntoa+0x48>
    7bdc:	0b e2       	ldi	r16, 0x2B	; 43
    7bde:	10 e0       	ldi	r17, 0x00	; 0
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <p_ntoa+0x48>
    7be2:	00 e0       	ldi	r16, 0x00	; 0
    7be4:	10 e0       	ldi	r17, 0x00	; 0
    7be6:	95 ff       	sbrs	r25, 5
    7be8:	04 c0       	rjmp	.+8      	; 0x7bf2 <p_ntoa+0x54>
    7bea:	89 2f       	mov	r24, r25
    7bec:	8a 70       	andi	r24, 0x0A	; 10
    7bee:	09 f0       	breq	.+2      	; 0x7bf2 <p_ntoa+0x54>
    7bf0:	c1 2c       	mov	r12, r1
    7bf2:	c0 fa       	bst	r12, 0
    7bf4:	95 f9       	bld	r25, 5
    7bf6:	89 2f       	mov	r24, r25
    7bf8:	82 70       	andi	r24, 0x02	; 2
    7bfa:	c8 2e       	mov	r12, r24
    7bfc:	91 fd       	sbrc	r25, 1
    7bfe:	02 c0       	rjmp	.+4      	; 0x7c04 <p_ntoa+0x66>
    7c00:	40 e0       	ldi	r20, 0x00	; 0
    7c02:	50 e0       	ldi	r21, 0x00	; 0
    7c04:	89 2f       	mov	r24, r25
    7c06:	83 70       	andi	r24, 0x03	; 3
    7c08:	11 f4       	brne	.+4      	; 0x7c0e <p_ntoa+0x70>
    7c0a:	41 e0       	ldi	r20, 0x01	; 1
    7c0c:	50 e0       	ldi	r21, 0x00	; 0
    7c0e:	90 ff       	sbrs	r25, 0
    7c10:	0c c0       	rjmp	.+24     	; 0x7c2a <p_ntoa+0x8c>
    7c12:	95 fd       	sbrc	r25, 5
    7c14:	05 c0       	rjmp	.+10     	; 0x7c20 <p_ntoa+0x82>
    7c16:	c1 10       	cpse	r12, r1
    7c18:	08 c0       	rjmp	.+16     	; 0x7c2a <p_ntoa+0x8c>
    7c1a:	41 e0       	ldi	r20, 0x01	; 1
    7c1c:	50 e0       	ldi	r21, 0x00	; 0
    7c1e:	05 c0       	rjmp	.+10     	; 0x7c2a <p_ntoa+0x8c>
    7c20:	94 75       	andi	r25, 0x54	; 84
    7c22:	a7 01       	movw	r20, r14
    7c24:	11 f0       	breq	.+4      	; 0x7c2a <p_ntoa+0x8c>
    7c26:	41 50       	subi	r20, 0x01	; 1
    7c28:	51 09       	sbc	r21, r1
    7c2a:	68 01       	movw	r12, r16
    7c2c:	7e 01       	movw	r14, r28
    7c2e:	8d 01       	movw	r16, r26
    7c30:	cf 01       	movw	r24, r30
    7c32:	fb de       	rcall	.-522    	; 0x7a2a <bin2num>
    7c34:	df 91       	pop	r29
    7c36:	cf 91       	pop	r28
    7c38:	1f 91       	pop	r17
    7c3a:	0f 91       	pop	r16
    7c3c:	ff 90       	pop	r15
    7c3e:	ef 90       	pop	r14
    7c40:	df 90       	pop	r13
    7c42:	cf 90       	pop	r12
    7c44:	af 90       	pop	r10
    7c46:	08 95       	ret

00007c48 <p_ftoa>:
    7c48:	2f 92       	push	r2
    7c4a:	3f 92       	push	r3
    7c4c:	4f 92       	push	r4
    7c4e:	5f 92       	push	r5
    7c50:	6f 92       	push	r6
    7c52:	7f 92       	push	r7
    7c54:	8f 92       	push	r8
    7c56:	9f 92       	push	r9
    7c58:	af 92       	push	r10
    7c5a:	bf 92       	push	r11
    7c5c:	cf 92       	push	r12
    7c5e:	ef 92       	push	r14
    7c60:	ff 92       	push	r15
    7c62:	0f 93       	push	r16
    7c64:	1f 93       	push	r17
    7c66:	cf 93       	push	r28
    7c68:	df 93       	push	r29
    7c6a:	4b 01       	movw	r8, r22
    7c6c:	5c 01       	movw	r10, r24
    7c6e:	1a 01       	movw	r2, r20
    7c70:	38 01       	movw	r6, r16
    7c72:	c6 fa       	bst	r12, 6
    7c74:	cc 27       	eor	r28, r28
    7c76:	c0 f9       	bld	r28, 0
    7c78:	b9 01       	movw	r22, r18
    7c7a:	ca 01       	movw	r24, r20
    7c7c:	5f df       	rcall	.-322    	; 0x7b3c <pch_init>
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	a9 01       	movw	r20, r18
    7c84:	c5 01       	movw	r24, r10
    7c86:	b4 01       	movw	r22, r8
    7c88:	0e 94 f9 e9 	call	0x1d3f2	; 0x1d3f2 <__cmpsf2>
    7c8c:	87 ff       	sbrs	r24, 7
    7c8e:	05 c0       	rjmp	.+10     	; 0x7c9a <p_ftoa+0x52>
    7c90:	b7 fa       	bst	r11, 7
    7c92:	b0 94       	com	r11
    7c94:	b7 f8       	bld	r11, 7
    7c96:	b0 94       	com	r11
    7c98:	c1 e0       	ldi	r28, 0x01	; 1
    7c9a:	c0 fb       	bst	r28, 0
    7c9c:	c6 f8       	bld	r12, 6
    7c9e:	c6 fe       	sbrs	r12, 6
    7ca0:	02 c0       	rjmp	.+4      	; 0x7ca6 <p_ftoa+0x5e>
    7ca2:	8d e2       	ldi	r24, 0x2D	; 45
    7ca4:	07 c0       	rjmp	.+14     	; 0x7cb4 <p_ftoa+0x6c>
    7ca6:	c2 fe       	sbrs	r12, 2
    7ca8:	02 c0       	rjmp	.+4      	; 0x7cae <p_ftoa+0x66>
    7caa:	8b e2       	ldi	r24, 0x2B	; 43
    7cac:	03 c0       	rjmp	.+6      	; 0x7cb4 <p_ftoa+0x6c>
    7cae:	c4 fe       	sbrs	r12, 4
    7cb0:	02 c0       	rjmp	.+4      	; 0x7cb6 <p_ftoa+0x6e>
    7cb2:	80 e2       	ldi	r24, 0x20	; 32
    7cb4:	50 df       	rcall	.-352    	; 0x7b56 <pch>
    7cb6:	e7 01       	movw	r28, r14
    7cb8:	f7 fe       	sbrs	r15, 7
    7cba:	02 c0       	rjmp	.+4      	; 0x7cc0 <p_ftoa+0x78>
    7cbc:	c0 e0       	ldi	r28, 0x00	; 0
    7cbe:	d0 e0       	ldi	r29, 0x00	; 0
    7cc0:	20 e0       	ldi	r18, 0x00	; 0
    7cc2:	30 e0       	ldi	r19, 0x00	; 0
    7cc4:	a9 01       	movw	r20, r18
    7cc6:	c5 01       	movw	r24, r10
    7cc8:	b4 01       	movw	r22, r8
    7cca:	0e 94 f9 e9 	call	0x1d3f2	; 0x1d3f2 <__cmpsf2>
    7cce:	88 23       	and	r24, r24
    7cd0:	d1 f1       	breq	.+116    	; 0x7d46 <p_ftoa+0xfe>
    7cd2:	c1 fe       	sbrs	r12, 1
    7cd4:	11 c0       	rjmp	.+34     	; 0x7cf8 <p_ftoa+0xb0>
    7cd6:	8e 01       	movw	r16, r28
    7cd8:	60 e0       	ldi	r22, 0x00	; 0
    7cda:	70 e0       	ldi	r23, 0x00	; 0
    7cdc:	80 e0       	ldi	r24, 0x00	; 0
    7cde:	9f e3       	ldi	r25, 0x3F	; 63
    7ce0:	01 15       	cp	r16, r1
    7ce2:	11 05       	cpc	r17, r1
    7ce4:	69 f0       	breq	.+26     	; 0x7d00 <p_ftoa+0xb8>
    7ce6:	20 e0       	ldi	r18, 0x00	; 0
    7ce8:	30 e0       	ldi	r19, 0x00	; 0
    7cea:	40 e2       	ldi	r20, 0x20	; 32
    7cec:	51 e4       	ldi	r21, 0x41	; 65
    7cee:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    7cf2:	01 50       	subi	r16, 0x01	; 1
    7cf4:	11 09       	sbc	r17, r1
    7cf6:	f4 cf       	rjmp	.-24     	; 0x7ce0 <p_ftoa+0x98>
    7cf8:	60 e0       	ldi	r22, 0x00	; 0
    7cfa:	70 e0       	ldi	r23, 0x00	; 0
    7cfc:	80 e0       	ldi	r24, 0x00	; 0
    7cfe:	9f e3       	ldi	r25, 0x3F	; 63
    7d00:	9b 01       	movw	r18, r22
    7d02:	ac 01       	movw	r20, r24
    7d04:	c5 01       	movw	r24, r10
    7d06:	b4 01       	movw	r22, r8
    7d08:	0e 94 95 e9 	call	0x1d32a	; 0x1d32a <__addsf3>
    7d0c:	4b 01       	movw	r8, r22
    7d0e:	5c 01       	movw	r10, r24
    7d10:	ee 24       	eor	r14, r14
    7d12:	e3 94       	inc	r14
    7d14:	f1 2c       	mov	r15, r1
    7d16:	20 e0       	ldi	r18, 0x00	; 0
    7d18:	30 e0       	ldi	r19, 0x00	; 0
    7d1a:	40 e2       	ldi	r20, 0x20	; 32
    7d1c:	51 e4       	ldi	r21, 0x41	; 65
    7d1e:	c5 01       	movw	r24, r10
    7d20:	b4 01       	movw	r22, r8
    7d22:	0e 94 48 eb 	call	0x1d690	; 0x1d690 <__gesf2>
    7d26:	87 fd       	sbrc	r24, 7
    7d28:	11 c0       	rjmp	.+34     	; 0x7d4c <p_ftoa+0x104>
    7d2a:	2f ef       	ldi	r18, 0xFF	; 255
    7d2c:	e2 1a       	sub	r14, r18
    7d2e:	f2 0a       	sbc	r15, r18
    7d30:	20 e0       	ldi	r18, 0x00	; 0
    7d32:	30 e0       	ldi	r19, 0x00	; 0
    7d34:	40 e2       	ldi	r20, 0x20	; 32
    7d36:	51 e4       	ldi	r21, 0x41	; 65
    7d38:	c5 01       	movw	r24, r10
    7d3a:	b4 01       	movw	r22, r8
    7d3c:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    7d40:	4b 01       	movw	r8, r22
    7d42:	5c 01       	movw	r10, r24
    7d44:	e8 cf       	rjmp	.-48     	; 0x7d16 <p_ftoa+0xce>
    7d46:	ee 24       	eor	r14, r14
    7d48:	e3 94       	inc	r14
    7d4a:	f1 2c       	mov	r15, r1
    7d4c:	8c 2d       	mov	r24, r12
    7d4e:	88 72       	andi	r24, 0x28	; 40
    7d50:	80 32       	cpi	r24, 0x20	; 32
    7d52:	b9 f4       	brne	.+46     	; 0x7d82 <p_ftoa+0x13a>
    7d54:	83 01       	movw	r16, r6
    7d56:	0e 19       	sub	r16, r14
    7d58:	1f 09       	sbc	r17, r15
    7d5a:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_pch+0x2>
    7d5e:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_pch+0x3>
    7d62:	08 1b       	sub	r16, r24
    7d64:	19 0b       	sbc	r17, r25
    7d66:	c1 fe       	sbrs	r12, 1
    7d68:	06 c0       	rjmp	.+12     	; 0x7d76 <p_ftoa+0x12e>
    7d6a:	20 97       	sbiw	r28, 0x00	; 0
    7d6c:	21 f0       	breq	.+8      	; 0x7d76 <p_ftoa+0x12e>
    7d6e:	0c 1b       	sub	r16, r28
    7d70:	1d 0b       	sbc	r17, r29
    7d72:	01 50       	subi	r16, 0x01	; 1
    7d74:	11 09       	sbc	r17, r1
    7d76:	10 16       	cp	r1, r16
    7d78:	11 06       	cpc	r1, r17
    7d7a:	1c f4       	brge	.+6      	; 0x7d82 <p_ftoa+0x13a>
    7d7c:	80 e3       	ldi	r24, 0x30	; 48
    7d7e:	eb de       	rcall	.-554    	; 0x7b56 <pch>
    7d80:	f8 cf       	rjmp	.-16     	; 0x7d72 <p_ftoa+0x12a>
    7d82:	c5 01       	movw	r24, r10
    7d84:	b4 01       	movw	r22, r8
    7d86:	0e 94 65 ea 	call	0x1d4ca	; 0x1d4ca <__fixsfsi>
    7d8a:	2b 01       	movw	r4, r22
    7d8c:	3c 01       	movw	r6, r24
    7d8e:	80 e3       	ldi	r24, 0x30	; 48
    7d90:	84 0d       	add	r24, r4
    7d92:	e1 de       	rcall	.-574    	; 0x7b56 <pch>
    7d94:	b2 01       	movw	r22, r4
    7d96:	55 0c       	add	r5, r5
    7d98:	88 0b       	sbc	r24, r24
    7d9a:	99 0b       	sbc	r25, r25
    7d9c:	0e 94 98 ea 	call	0x1d530	; 0x1d530 <__floatsisf>
    7da0:	9b 01       	movw	r18, r22
    7da2:	ac 01       	movw	r20, r24
    7da4:	c5 01       	movw	r24, r10
    7da6:	b4 01       	movw	r22, r8
    7da8:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    7dac:	21 e0       	ldi	r18, 0x01	; 1
    7dae:	e2 1a       	sub	r14, r18
    7db0:	f1 08       	sbc	r15, r1
    7db2:	20 e0       	ldi	r18, 0x00	; 0
    7db4:	30 e0       	ldi	r19, 0x00	; 0
    7db6:	40 e2       	ldi	r20, 0x20	; 32
    7db8:	51 e4       	ldi	r21, 0x41	; 65
    7dba:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    7dbe:	4b 01       	movw	r8, r22
    7dc0:	5c 01       	movw	r10, r24
    7dc2:	e1 14       	cp	r14, r1
    7dc4:	f1 04       	cpc	r15, r1
    7dc6:	e9 f6       	brne	.-70     	; 0x7d82 <p_ftoa+0x13a>
    7dc8:	c1 fc       	sbrc	r12, 1
    7dca:	1c c0       	rjmp	.+56     	; 0x7e04 <p_ftoa+0x1bc>
    7dcc:	80 e0       	ldi	r24, 0x00	; 0
    7dce:	c3 de       	rcall	.-634    	; 0x7b56 <pch>
    7dd0:	f1 01       	movw	r30, r2
    7dd2:	01 90       	ld	r0, Z+
    7dd4:	00 20       	and	r0, r0
    7dd6:	e9 f7       	brne	.-6      	; 0x7dd2 <p_ftoa+0x18a>
    7dd8:	31 97       	sbiw	r30, 0x01	; 1
    7dda:	cf 01       	movw	r24, r30
    7ddc:	82 19       	sub	r24, r2
    7dde:	93 09       	sbc	r25, r3
    7de0:	df 91       	pop	r29
    7de2:	cf 91       	pop	r28
    7de4:	1f 91       	pop	r17
    7de6:	0f 91       	pop	r16
    7de8:	ff 90       	pop	r15
    7dea:	ef 90       	pop	r14
    7dec:	cf 90       	pop	r12
    7dee:	bf 90       	pop	r11
    7df0:	af 90       	pop	r10
    7df2:	9f 90       	pop	r9
    7df4:	8f 90       	pop	r8
    7df6:	7f 90       	pop	r7
    7df8:	6f 90       	pop	r6
    7dfa:	5f 90       	pop	r5
    7dfc:	4f 90       	pop	r4
    7dfe:	3f 90       	pop	r3
    7e00:	2f 90       	pop	r2
    7e02:	08 95       	ret
    7e04:	20 97       	sbiw	r28, 0x00	; 0
    7e06:	11 f3       	breq	.-60     	; 0x7dcc <p_ftoa+0x184>
    7e08:	8e e2       	ldi	r24, 0x2E	; 46
    7e0a:	a5 de       	rcall	.-694    	; 0x7b56 <pch>
    7e0c:	c5 01       	movw	r24, r10
    7e0e:	b4 01       	movw	r22, r8
    7e10:	0e 94 65 ea 	call	0x1d4ca	; 0x1d4ca <__fixsfsi>
    7e14:	2b 01       	movw	r4, r22
    7e16:	3c 01       	movw	r6, r24
    7e18:	07 2e       	mov	r0, r23
    7e1a:	00 0c       	add	r0, r0
    7e1c:	88 0b       	sbc	r24, r24
    7e1e:	99 0b       	sbc	r25, r25
    7e20:	0e 94 98 ea 	call	0x1d530	; 0x1d530 <__floatsisf>
    7e24:	9b 01       	movw	r18, r22
    7e26:	ac 01       	movw	r20, r24
    7e28:	c5 01       	movw	r24, r10
    7e2a:	b4 01       	movw	r22, r8
    7e2c:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    7e30:	4b 01       	movw	r8, r22
    7e32:	5c 01       	movw	r10, r24
    7e34:	80 e3       	ldi	r24, 0x30	; 48
    7e36:	84 0d       	add	r24, r4
    7e38:	8e de       	rcall	.-740    	; 0x7b56 <pch>
    7e3a:	21 97       	sbiw	r28, 0x01	; 1
    7e3c:	20 e0       	ldi	r18, 0x00	; 0
    7e3e:	30 e0       	ldi	r19, 0x00	; 0
    7e40:	40 e2       	ldi	r20, 0x20	; 32
    7e42:	51 e4       	ldi	r21, 0x41	; 65
    7e44:	c5 01       	movw	r24, r10
    7e46:	b4 01       	movw	r22, r8
    7e48:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    7e4c:	4b 01       	movw	r8, r22
    7e4e:	5c 01       	movw	r10, r24
    7e50:	20 97       	sbiw	r28, 0x00	; 0
    7e52:	e1 f6       	brne	.-72     	; 0x7e0c <p_ftoa+0x1c4>
    7e54:	bb cf       	rjmp	.-138    	; 0x7dcc <p_ftoa+0x184>

00007e56 <p_etoa>:
    7e56:	ad e0       	ldi	r26, 0x0D	; 13
    7e58:	b0 e0       	ldi	r27, 0x00	; 0
    7e5a:	e1 e3       	ldi	r30, 0x31	; 49
    7e5c:	ff e3       	ldi	r31, 0x3F	; 63
    7e5e:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    7e62:	4b 01       	movw	r8, r22
    7e64:	5c 01       	movw	r10, r24
    7e66:	5b 87       	std	Y+11, r21	; 0x0b
    7e68:	4a 87       	std	Y+10, r20	; 0x0a
    7e6a:	1d 87       	std	Y+13, r17	; 0x0d
    7e6c:	0c 87       	std	Y+12, r16	; 0x0c
    7e6e:	3c 2c       	mov	r3, r12
    7e70:	c6 fa       	bst	r12, 6
    7e72:	11 27       	eor	r17, r17
    7e74:	10 f9       	bld	r17, 0
    7e76:	b9 01       	movw	r22, r18
    7e78:	ca 01       	movw	r24, r20
    7e7a:	60 de       	rcall	.-832    	; 0x7b3c <pch_init>
    7e7c:	20 e0       	ldi	r18, 0x00	; 0
    7e7e:	30 e0       	ldi	r19, 0x00	; 0
    7e80:	a9 01       	movw	r20, r18
    7e82:	c5 01       	movw	r24, r10
    7e84:	b4 01       	movw	r22, r8
    7e86:	0e 94 f9 e9 	call	0x1d3f2	; 0x1d3f2 <__cmpsf2>
    7e8a:	87 ff       	sbrs	r24, 7
    7e8c:	05 c0       	rjmp	.+10     	; 0x7e98 <p_etoa+0x42>
    7e8e:	b7 fa       	bst	r11, 7
    7e90:	b0 94       	com	r11
    7e92:	b7 f8       	bld	r11, 7
    7e94:	b0 94       	com	r11
    7e96:	11 e0       	ldi	r17, 0x01	; 1
    7e98:	10 fb       	bst	r17, 0
    7e9a:	36 f8       	bld	r3, 6
    7e9c:	36 fe       	sbrs	r3, 6
    7e9e:	02 c0       	rjmp	.+4      	; 0x7ea4 <p_etoa+0x4e>
    7ea0:	8d e2       	ldi	r24, 0x2D	; 45
    7ea2:	07 c0       	rjmp	.+14     	; 0x7eb2 <p_etoa+0x5c>
    7ea4:	32 fe       	sbrs	r3, 2
    7ea6:	02 c0       	rjmp	.+4      	; 0x7eac <p_etoa+0x56>
    7ea8:	8b e2       	ldi	r24, 0x2B	; 43
    7eaa:	03 c0       	rjmp	.+6      	; 0x7eb2 <p_etoa+0x5c>
    7eac:	34 fe       	sbrs	r3, 4
    7eae:	02 c0       	rjmp	.+4      	; 0x7eb4 <p_etoa+0x5e>
    7eb0:	80 e2       	ldi	r24, 0x20	; 32
    7eb2:	51 de       	rcall	.-862    	; 0x7b56 <pch>
    7eb4:	37 01       	movw	r6, r14
    7eb6:	f7 fe       	sbrs	r15, 7
    7eb8:	02 c0       	rjmp	.+4      	; 0x7ebe <p_etoa+0x68>
    7eba:	61 2c       	mov	r6, r1
    7ebc:	71 2c       	mov	r7, r1
    7ebe:	19 86       	std	Y+9, r1	; 0x09
    7ec0:	18 86       	std	Y+8, r1	; 0x08
    7ec2:	20 e0       	ldi	r18, 0x00	; 0
    7ec4:	30 e0       	ldi	r19, 0x00	; 0
    7ec6:	a9 01       	movw	r20, r18
    7ec8:	c5 01       	movw	r24, r10
    7eca:	b4 01       	movw	r22, r8
    7ecc:	0e 94 f9 e9 	call	0x1d3f2	; 0x1d3f2 <__cmpsf2>
    7ed0:	23 2d       	mov	r18, r3
    7ed2:	22 70       	andi	r18, 0x02	; 2
    7ed4:	22 2e       	mov	r2, r18
    7ed6:	88 23       	and	r24, r24
    7ed8:	09 f4       	brne	.+2      	; 0x7edc <p_etoa+0x86>
    7eda:	70 c0       	rjmp	.+224    	; 0x7fbc <p_etoa+0x166>
    7edc:	22 23       	and	r18, r18
    7ede:	b1 f0       	breq	.+44     	; 0x7f0c <p_etoa+0xb6>
    7ee0:	83 01       	movw	r16, r6
    7ee2:	c1 2c       	mov	r12, r1
    7ee4:	d1 2c       	mov	r13, r1
    7ee6:	e1 2c       	mov	r14, r1
    7ee8:	2f e3       	ldi	r18, 0x3F	; 63
    7eea:	f2 2e       	mov	r15, r18
    7eec:	01 15       	cp	r16, r1
    7eee:	11 05       	cpc	r17, r1
    7ef0:	91 f0       	breq	.+36     	; 0x7f16 <p_etoa+0xc0>
    7ef2:	20 e0       	ldi	r18, 0x00	; 0
    7ef4:	30 e0       	ldi	r19, 0x00	; 0
    7ef6:	40 e2       	ldi	r20, 0x20	; 32
    7ef8:	51 e4       	ldi	r21, 0x41	; 65
    7efa:	c7 01       	movw	r24, r14
    7efc:	b6 01       	movw	r22, r12
    7efe:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    7f02:	6b 01       	movw	r12, r22
    7f04:	7c 01       	movw	r14, r24
    7f06:	01 50       	subi	r16, 0x01	; 1
    7f08:	11 09       	sbc	r17, r1
    7f0a:	f0 cf       	rjmp	.-32     	; 0x7eec <p_etoa+0x96>
    7f0c:	c1 2c       	mov	r12, r1
    7f0e:	d1 2c       	mov	r13, r1
    7f10:	e1 2c       	mov	r14, r1
    7f12:	9f e3       	ldi	r25, 0x3F	; 63
    7f14:	f9 2e       	mov	r15, r25
    7f16:	41 2c       	mov	r4, r1
    7f18:	51 2c       	mov	r5, r1
    7f1a:	82 01       	movw	r16, r4
    7f1c:	01 50       	subi	r16, 0x01	; 1
    7f1e:	11 09       	sbc	r17, r1
    7f20:	20 e0       	ldi	r18, 0x00	; 0
    7f22:	30 e0       	ldi	r19, 0x00	; 0
    7f24:	40 e8       	ldi	r20, 0x80	; 128
    7f26:	5f e3       	ldi	r21, 0x3F	; 63
    7f28:	c5 01       	movw	r24, r10
    7f2a:	b4 01       	movw	r22, r8
    7f2c:	0e 94 f9 e9 	call	0x1d3f2	; 0x1d3f2 <__cmpsf2>
    7f30:	87 ff       	sbrs	r24, 7
    7f32:	0c c0       	rjmp	.+24     	; 0x7f4c <p_etoa+0xf6>
    7f34:	20 e0       	ldi	r18, 0x00	; 0
    7f36:	30 e0       	ldi	r19, 0x00	; 0
    7f38:	40 e2       	ldi	r20, 0x20	; 32
    7f3a:	51 e4       	ldi	r21, 0x41	; 65
    7f3c:	c5 01       	movw	r24, r10
    7f3e:	b4 01       	movw	r22, r8
    7f40:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    7f44:	4b 01       	movw	r8, r22
    7f46:	5c 01       	movw	r10, r24
    7f48:	28 01       	movw	r4, r16
    7f4a:	e7 cf       	rjmp	.-50     	; 0x7f1a <p_etoa+0xc4>
    7f4c:	82 01       	movw	r16, r4
    7f4e:	0f 5f       	subi	r16, 0xFF	; 255
    7f50:	1f 4f       	sbci	r17, 0xFF	; 255
    7f52:	20 e0       	ldi	r18, 0x00	; 0
    7f54:	30 e0       	ldi	r19, 0x00	; 0
    7f56:	40 e2       	ldi	r20, 0x20	; 32
    7f58:	51 e4       	ldi	r21, 0x41	; 65
    7f5a:	c5 01       	movw	r24, r10
    7f5c:	b4 01       	movw	r22, r8
    7f5e:	0e 94 48 eb 	call	0x1d690	; 0x1d690 <__gesf2>
    7f62:	87 fd       	sbrc	r24, 7
    7f64:	0c c0       	rjmp	.+24     	; 0x7f7e <p_etoa+0x128>
    7f66:	20 e0       	ldi	r18, 0x00	; 0
    7f68:	30 e0       	ldi	r19, 0x00	; 0
    7f6a:	40 e2       	ldi	r20, 0x20	; 32
    7f6c:	51 e4       	ldi	r21, 0x41	; 65
    7f6e:	c5 01       	movw	r24, r10
    7f70:	b4 01       	movw	r22, r8
    7f72:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    7f76:	4b 01       	movw	r8, r22
    7f78:	5c 01       	movw	r10, r24
    7f7a:	28 01       	movw	r4, r16
    7f7c:	e7 cf       	rjmp	.-50     	; 0x7f4c <p_etoa+0xf6>
    7f7e:	a7 01       	movw	r20, r14
    7f80:	96 01       	movw	r18, r12
    7f82:	c5 01       	movw	r24, r10
    7f84:	b4 01       	movw	r22, r8
    7f86:	0e 94 95 e9 	call	0x1d32a	; 0x1d32a <__addsf3>
    7f8a:	4b 01       	movw	r8, r22
    7f8c:	5c 01       	movw	r10, r24
    7f8e:	82 01       	movw	r16, r4
    7f90:	3f ef       	ldi	r19, 0xFF	; 255
    7f92:	43 1a       	sub	r4, r19
    7f94:	53 0a       	sbc	r5, r19
    7f96:	20 e0       	ldi	r18, 0x00	; 0
    7f98:	30 e0       	ldi	r19, 0x00	; 0
    7f9a:	40 e2       	ldi	r20, 0x20	; 32
    7f9c:	51 e4       	ldi	r21, 0x41	; 65
    7f9e:	0e 94 48 eb 	call	0x1d690	; 0x1d690 <__gesf2>
    7fa2:	87 fd       	sbrc	r24, 7
    7fa4:	09 c0       	rjmp	.+18     	; 0x7fb8 <p_etoa+0x162>
    7fa6:	20 e0       	ldi	r18, 0x00	; 0
    7fa8:	30 e0       	ldi	r19, 0x00	; 0
    7faa:	40 e2       	ldi	r20, 0x20	; 32
    7fac:	51 e4       	ldi	r21, 0x41	; 65
    7fae:	c5 01       	movw	r24, r10
    7fb0:	b4 01       	movw	r22, r8
    7fb2:	0e 94 fd e9 	call	0x1d3fa	; 0x1d3fa <__divsf3>
    7fb6:	e9 cf       	rjmp	.-46     	; 0x7f8a <p_etoa+0x134>
    7fb8:	08 87       	std	Y+8, r16	; 0x08
    7fba:	19 87       	std	Y+9, r17	; 0x09
    7fbc:	85 e6       	ldi	r24, 0x65	; 101
    7fbe:	89 83       	std	Y+1, r24	; 0x01
    7fc0:	88 85       	ldd	r24, Y+8	; 0x08
    7fc2:	99 85       	ldd	r25, Y+9	; 0x09
    7fc4:	97 ff       	sbrs	r25, 7
    7fc6:	08 c0       	rjmp	.+16     	; 0x7fd8 <p_etoa+0x182>
    7fc8:	91 95       	neg	r25
    7fca:	81 95       	neg	r24
    7fcc:	91 09       	sbc	r25, r1
    7fce:	99 87       	std	Y+9, r25	; 0x09
    7fd0:	88 87       	std	Y+8, r24	; 0x08
    7fd2:	8d e2       	ldi	r24, 0x2D	; 45
    7fd4:	90 e0       	ldi	r25, 0x00	; 0
    7fd6:	02 c0       	rjmp	.+4      	; 0x7fdc <p_etoa+0x186>
    7fd8:	8b e2       	ldi	r24, 0x2B	; 43
    7fda:	90 e0       	ldi	r25, 0x00	; 0
    7fdc:	6c 01       	movw	r12, r24
    7fde:	82 e0       	ldi	r24, 0x02	; 2
    7fe0:	e8 2e       	mov	r14, r24
    7fe2:	f1 2c       	mov	r15, r1
    7fe4:	8e 01       	movw	r16, r28
    7fe6:	08 5f       	subi	r16, 0xF8	; 248
    7fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    7fea:	2a e0       	ldi	r18, 0x0A	; 10
    7fec:	30 e0       	ldi	r19, 0x00	; 0
    7fee:	42 e0       	ldi	r20, 0x02	; 2
    7ff0:	50 e0       	ldi	r21, 0x00	; 0
    7ff2:	65 e0       	ldi	r22, 0x05	; 5
    7ff4:	70 e0       	ldi	r23, 0x00	; 0
    7ff6:	ce 01       	movw	r24, r28
    7ff8:	02 96       	adiw	r24, 0x02	; 2
    7ffa:	17 dd       	rcall	.-1490   	; 0x7a2a <bin2num>
    7ffc:	9c 01       	movw	r18, r24
    7ffe:	93 2d       	mov	r25, r3
    8000:	98 72       	andi	r25, 0x28	; 40
    8002:	90 32       	cpi	r25, 0x20	; 32
    8004:	61 f0       	breq	.+24     	; 0x801e <p_etoa+0x1c8>
    8006:	c5 01       	movw	r24, r10
    8008:	b4 01       	movw	r22, r8
    800a:	0e 94 65 ea 	call	0x1d4ca	; 0x1d4ca <__fixsfsi>
    800e:	6b 01       	movw	r12, r22
    8010:	7c 01       	movw	r14, r24
    8012:	80 e3       	ldi	r24, 0x30	; 48
    8014:	8c 0d       	add	r24, r12
    8016:	9f dd       	rcall	.-1218   	; 0x7b56 <pch>
    8018:	21 10       	cpse	r2, r1
    801a:	20 c0       	rjmp	.+64     	; 0x805c <p_etoa+0x206>
    801c:	5e c0       	rjmp	.+188    	; 0x80da <p_etoa+0x284>
    801e:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_pch+0x2>
    8022:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_pch+0x3>
    8026:	0c 85       	ldd	r16, Y+12	; 0x0c
    8028:	1d 85       	ldd	r17, Y+13	; 0x0d
    802a:	08 1b       	sub	r16, r24
    802c:	19 0b       	sbc	r17, r25
    802e:	22 20       	and	r2, r2
    8030:	41 f0       	breq	.+16     	; 0x8042 <p_etoa+0x1ec>
    8032:	61 14       	cp	r6, r1
    8034:	71 04       	cpc	r7, r1
    8036:	29 f0       	breq	.+10     	; 0x8042 <p_etoa+0x1ec>
    8038:	06 19       	sub	r16, r6
    803a:	17 09       	sbc	r17, r7
    803c:	06 50       	subi	r16, 0x06	; 6
    803e:	11 09       	sbc	r17, r1
    8040:	02 c0       	rjmp	.+4      	; 0x8046 <p_etoa+0x1f0>
    8042:	05 50       	subi	r16, 0x05	; 5
    8044:	11 09       	sbc	r17, r1
    8046:	24 30       	cpi	r18, 0x04	; 4
    8048:	31 05       	cpc	r19, r1
    804a:	14 f0       	brlt	.+4      	; 0x8050 <p_etoa+0x1fa>
    804c:	01 50       	subi	r16, 0x01	; 1
    804e:	11 09       	sbc	r17, r1
    8050:	10 16       	cp	r1, r16
    8052:	11 06       	cpc	r1, r17
    8054:	c4 f6       	brge	.-80     	; 0x8006 <p_etoa+0x1b0>
    8056:	80 e3       	ldi	r24, 0x30	; 48
    8058:	7e dd       	rcall	.-1284   	; 0x7b56 <pch>
    805a:	f8 cf       	rjmp	.-16     	; 0x804c <p_etoa+0x1f6>
    805c:	61 14       	cp	r6, r1
    805e:	71 04       	cpc	r7, r1
    8060:	09 f4       	brne	.+2      	; 0x8064 <p_etoa+0x20e>
    8062:	3b c0       	rjmp	.+118    	; 0x80da <p_etoa+0x284>
    8064:	b6 01       	movw	r22, r12
    8066:	dd 0c       	add	r13, r13
    8068:	88 0b       	sbc	r24, r24
    806a:	99 0b       	sbc	r25, r25
    806c:	0e 94 98 ea 	call	0x1d530	; 0x1d530 <__floatsisf>
    8070:	9b 01       	movw	r18, r22
    8072:	ac 01       	movw	r20, r24
    8074:	c5 01       	movw	r24, r10
    8076:	b4 01       	movw	r22, r8
    8078:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    807c:	20 e0       	ldi	r18, 0x00	; 0
    807e:	30 e0       	ldi	r19, 0x00	; 0
    8080:	40 e2       	ldi	r20, 0x20	; 32
    8082:	51 e4       	ldi	r21, 0x41	; 65
    8084:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    8088:	6b 01       	movw	r12, r22
    808a:	7c 01       	movw	r14, r24
    808c:	8e e2       	ldi	r24, 0x2E	; 46
    808e:	63 dd       	rcall	.-1338   	; 0x7b56 <pch>
    8090:	c7 01       	movw	r24, r14
    8092:	b6 01       	movw	r22, r12
    8094:	0e 94 65 ea 	call	0x1d4ca	; 0x1d4ca <__fixsfsi>
    8098:	4b 01       	movw	r8, r22
    809a:	5c 01       	movw	r10, r24
    809c:	07 2e       	mov	r0, r23
    809e:	00 0c       	add	r0, r0
    80a0:	88 0b       	sbc	r24, r24
    80a2:	99 0b       	sbc	r25, r25
    80a4:	0e 94 98 ea 	call	0x1d530	; 0x1d530 <__floatsisf>
    80a8:	9b 01       	movw	r18, r22
    80aa:	ac 01       	movw	r20, r24
    80ac:	c7 01       	movw	r24, r14
    80ae:	b6 01       	movw	r22, r12
    80b0:	0e 94 94 e9 	call	0x1d328	; 0x1d328 <__subsf3>
    80b4:	6b 01       	movw	r12, r22
    80b6:	7c 01       	movw	r14, r24
    80b8:	80 e3       	ldi	r24, 0x30	; 48
    80ba:	88 0d       	add	r24, r8
    80bc:	4c dd       	rcall	.-1384   	; 0x7b56 <pch>
    80be:	20 e0       	ldi	r18, 0x00	; 0
    80c0:	30 e0       	ldi	r19, 0x00	; 0
    80c2:	40 e2       	ldi	r20, 0x20	; 32
    80c4:	51 e4       	ldi	r21, 0x41	; 65
    80c6:	c7 01       	movw	r24, r14
    80c8:	b6 01       	movw	r22, r12
    80ca:	0e 94 4c eb 	call	0x1d698	; 0x1d698 <__mulsf3>
    80ce:	6b 01       	movw	r12, r22
    80d0:	7c 01       	movw	r14, r24
    80d2:	81 e0       	ldi	r24, 0x01	; 1
    80d4:	68 1a       	sub	r6, r24
    80d6:	71 08       	sbc	r7, r1
    80d8:	d9 f6       	brne	.-74     	; 0x8090 <p_etoa+0x23a>
    80da:	8e 01       	movw	r16, r28
    80dc:	0f 5f       	subi	r16, 0xFF	; 255
    80de:	1f 4f       	sbci	r17, 0xFF	; 255
    80e0:	f8 01       	movw	r30, r16
    80e2:	81 91       	ld	r24, Z+
    80e4:	8f 01       	movw	r16, r30
    80e6:	88 23       	and	r24, r24
    80e8:	11 f0       	breq	.+4      	; 0x80ee <p_etoa+0x298>
    80ea:	35 dd       	rcall	.-1430   	; 0x7b56 <pch>
    80ec:	f9 cf       	rjmp	.-14     	; 0x80e0 <p_etoa+0x28a>
    80ee:	33 dd       	rcall	.-1434   	; 0x7b56 <pch>
    80f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    80f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    80f4:	01 90       	ld	r0, Z+
    80f6:	00 20       	and	r0, r0
    80f8:	e9 f7       	brne	.-6      	; 0x80f4 <p_etoa+0x29e>
    80fa:	cf 01       	movw	r24, r30
    80fc:	01 97       	sbiw	r24, 0x01	; 1
    80fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    8100:	3b 85       	ldd	r19, Y+11	; 0x0b
    8102:	82 1b       	sub	r24, r18
    8104:	93 0b       	sbc	r25, r19
    8106:	2d 96       	adiw	r28, 0x0d	; 13
    8108:	e2 e1       	ldi	r30, 0x12	; 18
    810a:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000810e <_puts_pad>:
    810e:	a0 e0       	ldi	r26, 0x00	; 0
    8110:	b0 e0       	ldi	r27, 0x00	; 0
    8112:	ed e8       	ldi	r30, 0x8D	; 141
    8114:	f0 e4       	ldi	r31, 0x40	; 64
    8116:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
    811a:	6c 01       	movw	r12, r24
    811c:	4b 01       	movw	r8, r22
    811e:	79 01       	movw	r14, r18
    8120:	24 17       	cp	r18, r20
    8122:	35 07       	cpc	r19, r21
    8124:	24 f4       	brge	.+8      	; 0x812e <_puts_pad+0x20>
    8126:	ea 01       	movw	r28, r20
    8128:	c2 1b       	sub	r28, r18
    812a:	d3 0b       	sbc	r29, r19
    812c:	02 c0       	rjmp	.+4      	; 0x8132 <_puts_pad+0x24>
    812e:	c0 e0       	ldi	r28, 0x00	; 0
    8130:	d0 e0       	ldi	r29, 0x00	; 0
    8132:	01 15       	cp	r16, r1
    8134:	11 05       	cpc	r17, r1
    8136:	49 f4       	brne	.+18     	; 0x814a <_puts_pad+0x3c>
    8138:	21 97       	sbiw	r28, 0x01	; 1
    813a:	38 f0       	brcs	.+14     	; 0x814a <_puts_pad+0x3c>
    813c:	d6 01       	movw	r26, r12
    813e:	ed 91       	ld	r30, X+
    8140:	fc 91       	ld	r31, X
    8142:	60 e2       	ldi	r22, 0x20	; 32
    8144:	c6 01       	movw	r24, r12
    8146:	09 95       	icall
    8148:	f7 cf       	rjmp	.-18     	; 0x8138 <_puts_pad+0x2a>
    814a:	54 01       	movw	r10, r8
    814c:	f5 01       	movw	r30, r10
    814e:	61 91       	ld	r22, Z+
    8150:	5f 01       	movw	r10, r30
    8152:	66 23       	and	r22, r22
    8154:	61 f0       	breq	.+24     	; 0x816e <_puts_pad+0x60>
    8156:	e1 14       	cp	r14, r1
    8158:	f1 04       	cpc	r15, r1
    815a:	49 f0       	breq	.+18     	; 0x816e <_puts_pad+0x60>
    815c:	d6 01       	movw	r26, r12
    815e:	ed 91       	ld	r30, X+
    8160:	fc 91       	ld	r31, X
    8162:	c6 01       	movw	r24, r12
    8164:	09 95       	icall
    8166:	b1 e0       	ldi	r27, 0x01	; 1
    8168:	eb 1a       	sub	r14, r27
    816a:	f1 08       	sbc	r15, r1
    816c:	ef cf       	rjmp	.-34     	; 0x814c <_puts_pad+0x3e>
    816e:	01 15       	cp	r16, r1
    8170:	11 05       	cpc	r17, r1
    8172:	51 f0       	breq	.+20     	; 0x8188 <_puts_pad+0x7a>
    8174:	20 97       	sbiw	r28, 0x00	; 0
    8176:	41 f0       	breq	.+16     	; 0x8188 <_puts_pad+0x7a>
    8178:	d6 01       	movw	r26, r12
    817a:	ed 91       	ld	r30, X+
    817c:	fc 91       	ld	r31, X
    817e:	60 e2       	ldi	r22, 0x20	; 32
    8180:	c6 01       	movw	r24, r12
    8182:	09 95       	icall
    8184:	21 97       	sbiw	r28, 0x01	; 1
    8186:	f6 cf       	rjmp	.-20     	; 0x8174 <_puts_pad+0x66>
    8188:	cd b7       	in	r28, 0x3d	; 61
    818a:	de b7       	in	r29, 0x3e	; 62
    818c:	ec e0       	ldi	r30, 0x0C	; 12
    818e:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00008192 <_printf_fn>:
    8192:	ab e6       	ldi	r26, 0x6B	; 107
    8194:	b0 e0       	ldi	r27, 0x00	; 0
    8196:	ef ec       	ldi	r30, 0xCF	; 207
    8198:	f0 e4       	ldi	r31, 0x40	; 64
    819a:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    819e:	a5 96       	adiw	r28, 0x25	; 37
    81a0:	9f af       	std	Y+63, r25	; 0x3f
    81a2:	8e af       	std	Y+62, r24	; 0x3e
    81a4:	a5 97       	sbiw	r28, 0x25	; 37
    81a6:	6a 01       	movw	r12, r20
    81a8:	e6 2e       	mov	r14, r22
    81aa:	19 01       	movw	r2, r18
    81ac:	a9 96       	adiw	r28, 0x29	; 41
    81ae:	1c ae       	std	Y+60, r1	; 0x3c
    81b0:	1d ae       	std	Y+61, r1	; 0x3d
    81b2:	1e ae       	std	Y+62, r1	; 0x3e
    81b4:	1f ae       	std	Y+63, r1	; 0x3f
    81b6:	a9 97       	sbiw	r28, 0x29	; 41
    81b8:	9e 01       	movw	r18, r28
    81ba:	2f 5a       	subi	r18, 0xAF	; 175
    81bc:	3f 4f       	sbci	r19, 0xFF	; 255
    81be:	67 96       	adiw	r28, 0x17	; 23
    81c0:	3f af       	std	Y+63, r19	; 0x3f
    81c2:	2e af       	std	Y+62, r18	; 0x3e
    81c4:	67 97       	sbiw	r28, 0x17	; 23
    81c6:	ae 01       	movw	r20, r28
    81c8:	4d 5b       	subi	r20, 0xBD	; 189
    81ca:	5f 4f       	sbci	r21, 0xFF	; 255
    81cc:	69 96       	adiw	r28, 0x19	; 25
    81ce:	5f af       	std	Y+63, r21	; 0x3f
    81d0:	4e af       	std	Y+62, r20	; 0x3e
    81d2:	69 97       	sbiw	r28, 0x19	; 25
    81d4:	ce 01       	movw	r24, r28
    81d6:	85 5b       	subi	r24, 0xB5	; 181
    81d8:	9f 4f       	sbci	r25, 0xFF	; 255
    81da:	6b 96       	adiw	r28, 0x1b	; 27
    81dc:	9f af       	std	Y+63, r25	; 0x3f
    81de:	8e af       	std	Y+62, r24	; 0x3e
    81e0:	6b 97       	sbiw	r28, 0x1b	; 27
    81e2:	de 01       	movw	r26, r28
    81e4:	ad 5a       	subi	r26, 0xAD	; 173
    81e6:	bf 4f       	sbci	r27, 0xFF	; 255
    81e8:	6d 96       	adiw	r28, 0x1d	; 29
    81ea:	bf af       	std	Y+63, r27	; 0x3f
    81ec:	ae af       	std	Y+62, r26	; 0x3e
    81ee:	6d 97       	sbiw	r28, 0x1d	; 29
    81f0:	f6 01       	movw	r30, r12
    81f2:	5e 2d       	mov	r21, r14
    81f4:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    81f8:	66 23       	and	r22, r22
    81fa:	09 f4       	brne	.+2      	; 0x81fe <_printf_fn+0x6c>
    81fc:	df c3       	rjmp	.+1982   	; 0x89bc <_printf_fn+0x82a>
    81fe:	ae 2d       	mov	r26, r14
    8200:	c6 01       	movw	r24, r12
    8202:	01 96       	adiw	r24, 0x01	; 1
    8204:	a1 1d       	adc	r26, r1
    8206:	3c 01       	movw	r6, r24
    8208:	8a 2e       	mov	r8, r26
    820a:	65 32       	cpi	r22, 0x25	; 37
    820c:	51 f0       	breq	.+20     	; 0x8222 <_printf_fn+0x90>
    820e:	a5 96       	adiw	r28, 0x25	; 37
    8210:	ae ad       	ldd	r26, Y+62	; 0x3e
    8212:	bf ad       	ldd	r27, Y+63	; 0x3f
    8214:	a5 97       	sbiw	r28, 0x25	; 37
    8216:	ed 91       	ld	r30, X+
    8218:	fc 91       	ld	r31, X
    821a:	11 97       	sbiw	r26, 0x01	; 1
    821c:	cd 01       	movw	r24, r26
    821e:	09 95       	icall
    8220:	99 c3       	rjmp	.+1842   	; 0x8954 <_printf_fn+0x7c2>
    8222:	91 2c       	mov	r9, r1
    8224:	f3 01       	movw	r30, r6
    8226:	58 2d       	mov	r21, r8
    8228:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    822c:	63 32       	cpi	r22, 0x23	; 35
    822e:	19 f4       	brne	.+6      	; 0x8236 <_printf_fn+0xa4>
    8230:	68 94       	set
    8232:	97 f8       	bld	r9, 7
    8234:	04 c0       	rjmp	.+8      	; 0x823e <_printf_fn+0xac>
    8236:	6b 32       	cpi	r22, 0x2B	; 43
    8238:	39 f4       	brne	.+14     	; 0x8248 <_printf_fn+0xb6>
    823a:	68 94       	set
    823c:	92 f8       	bld	r9, 2
    823e:	bf ef       	ldi	r27, 0xFF	; 255
    8240:	6b 1a       	sub	r6, r27
    8242:	7b 0a       	sbc	r7, r27
    8244:	8b 0a       	sbc	r8, r27
    8246:	ee cf       	rjmp	.-36     	; 0x8224 <_printf_fn+0x92>
    8248:	6d 32       	cpi	r22, 0x2D	; 45
    824a:	a9 f4       	brne	.+42     	; 0x8276 <_printf_fn+0xe4>
    824c:	93 fc       	sbrc	r9, 3
    824e:	05 c0       	rjmp	.+10     	; 0x825a <_printf_fn+0xc8>
    8250:	6d 32       	cpi	r22, 0x2D	; 45
    8252:	19 f4       	brne	.+6      	; 0x825a <_printf_fn+0xc8>
    8254:	68 94       	set
    8256:	93 f8       	bld	r9, 3
    8258:	f2 cf       	rjmp	.-28     	; 0x823e <_printf_fn+0xac>
    825a:	94 fc       	sbrc	r9, 4
    825c:	05 c0       	rjmp	.+10     	; 0x8268 <_printf_fn+0xd6>
    825e:	60 32       	cpi	r22, 0x20	; 32
    8260:	19 f4       	brne	.+6      	; 0x8268 <_printf_fn+0xd6>
    8262:	68 94       	set
    8264:	94 f8       	bld	r9, 4
    8266:	eb cf       	rjmp	.-42     	; 0x823e <_printf_fn+0xac>
    8268:	95 fc       	sbrc	r9, 5
    826a:	e9 cf       	rjmp	.-46     	; 0x823e <_printf_fn+0xac>
    826c:	60 33       	cpi	r22, 0x30	; 48
    826e:	39 f7       	brne	.-50     	; 0x823e <_printf_fn+0xac>
    8270:	68 94       	set
    8272:	95 f8       	bld	r9, 5
    8274:	e4 cf       	rjmp	.-56     	; 0x823e <_printf_fn+0xac>
    8276:	86 2f       	mov	r24, r22
    8278:	8f 7e       	andi	r24, 0xEF	; 239
    827a:	80 32       	cpi	r24, 0x20	; 32
    827c:	39 f3       	breq	.-50     	; 0x824c <_printf_fn+0xba>
    827e:	70 e0       	ldi	r23, 0x00	; 0
    8280:	60 53       	subi	r22, 0x30	; 48
    8282:	71 09       	sbc	r23, r1
    8284:	41 2c       	mov	r4, r1
    8286:	51 2c       	mov	r5, r1
    8288:	6a 30       	cpi	r22, 0x0A	; 10
    828a:	71 05       	cpc	r23, r1
    828c:	e0 f4       	brcc	.+56     	; 0x82c6 <_printf_fn+0x134>
    828e:	2a e0       	ldi	r18, 0x0A	; 10
    8290:	f3 01       	movw	r30, r6
    8292:	58 2d       	mov	r21, r8
    8294:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    8298:	70 e0       	ldi	r23, 0x00	; 0
    829a:	cb 01       	movw	r24, r22
    829c:	c0 97       	sbiw	r24, 0x30	; 48
    829e:	0a 97       	sbiw	r24, 0x0a	; 10
    82a0:	80 f4       	brcc	.+32     	; 0x82c2 <_printf_fn+0x130>
    82a2:	ef ef       	ldi	r30, 0xFF	; 255
    82a4:	6e 1a       	sub	r6, r30
    82a6:	7e 0a       	sbc	r7, r30
    82a8:	8e 0a       	sbc	r8, r30
    82aa:	24 9d       	mul	r18, r4
    82ac:	c0 01       	movw	r24, r0
    82ae:	25 9d       	mul	r18, r5
    82b0:	90 0d       	add	r25, r0
    82b2:	11 24       	eor	r1, r1
    82b4:	68 0f       	add	r22, r24
    82b6:	79 1f       	adc	r23, r25
    82b8:	2b 01       	movw	r4, r22
    82ba:	f0 e3       	ldi	r31, 0x30	; 48
    82bc:	4f 1a       	sub	r4, r31
    82be:	51 08       	sbc	r5, r1
    82c0:	e7 cf       	rjmp	.-50     	; 0x8290 <_printf_fn+0xfe>
    82c2:	68 94       	set
    82c4:	90 f8       	bld	r9, 0
    82c6:	f3 01       	movw	r30, r6
    82c8:	58 2d       	mov	r21, r8
    82ca:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    82ce:	6e 32       	cpi	r22, 0x2E	; 46
    82d0:	59 f5       	brne	.+86     	; 0x8328 <_printf_fn+0x196>
    82d2:	2f ef       	ldi	r18, 0xFF	; 255
    82d4:	62 1a       	sub	r6, r18
    82d6:	72 0a       	sbc	r7, r18
    82d8:	82 0a       	sbc	r8, r18
    82da:	a1 96       	adiw	r28, 0x21	; 33
    82dc:	1f ae       	std	Y+63, r1	; 0x3f
    82de:	1e ae       	std	Y+62, r1	; 0x3e
    82e0:	a1 97       	sbiw	r28, 0x21	; 33
    82e2:	2a e0       	ldi	r18, 0x0A	; 10
    82e4:	f3 01       	movw	r30, r6
    82e6:	58 2d       	mov	r21, r8
    82e8:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    82ec:	70 e0       	ldi	r23, 0x00	; 0
    82ee:	cb 01       	movw	r24, r22
    82f0:	c0 97       	sbiw	r24, 0x30	; 48
    82f2:	0a 97       	sbiw	r24, 0x0a	; 10
    82f4:	b0 f4       	brcc	.+44     	; 0x8322 <_printf_fn+0x190>
    82f6:	3f ef       	ldi	r19, 0xFF	; 255
    82f8:	63 1a       	sub	r6, r19
    82fa:	73 0a       	sbc	r7, r19
    82fc:	83 0a       	sbc	r8, r19
    82fe:	a1 96       	adiw	r28, 0x21	; 33
    8300:	4e ad       	ldd	r20, Y+62	; 0x3e
    8302:	5f ad       	ldd	r21, Y+63	; 0x3f
    8304:	a1 97       	sbiw	r28, 0x21	; 33
    8306:	24 9f       	mul	r18, r20
    8308:	c0 01       	movw	r24, r0
    830a:	25 9f       	mul	r18, r21
    830c:	90 0d       	add	r25, r0
    830e:	11 24       	eor	r1, r1
    8310:	68 0f       	add	r22, r24
    8312:	79 1f       	adc	r23, r25
    8314:	cb 01       	movw	r24, r22
    8316:	c0 97       	sbiw	r24, 0x30	; 48
    8318:	a1 96       	adiw	r28, 0x21	; 33
    831a:	9f af       	std	Y+63, r25	; 0x3f
    831c:	8e af       	std	Y+62, r24	; 0x3e
    831e:	a1 97       	sbiw	r28, 0x21	; 33
    8320:	e1 cf       	rjmp	.-62     	; 0x82e4 <_printf_fn+0x152>
    8322:	68 94       	set
    8324:	91 f8       	bld	r9, 1
    8326:	04 c0       	rjmp	.+8      	; 0x8330 <_printf_fn+0x19e>
    8328:	a1 96       	adiw	r28, 0x21	; 33
    832a:	1f ae       	std	Y+63, r1	; 0x3f
    832c:	1e ae       	std	Y+62, r1	; 0x3e
    832e:	a1 97       	sbiw	r28, 0x21	; 33
    8330:	f3 01       	movw	r30, r6
    8332:	58 2d       	mov	r21, r8
    8334:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    8338:	69 34       	cpi	r22, 0x49	; 73
    833a:	09 f0       	breq	.+2      	; 0x833e <_printf_fn+0x1ac>
    833c:	45 c0       	rjmp	.+138    	; 0x83c8 <_printf_fn+0x236>
    833e:	9f ef       	ldi	r25, 0xFF	; 255
    8340:	69 1a       	sub	r6, r25
    8342:	79 0a       	sbc	r7, r25
    8344:	89 0a       	sbc	r8, r25
    8346:	6f 96       	adiw	r28, 0x1f	; 31
    8348:	1f ae       	std	Y+63, r1	; 0x3f
    834a:	1e ae       	std	Y+62, r1	; 0x3e
    834c:	6f 97       	sbiw	r28, 0x1f	; 31
    834e:	2a e0       	ldi	r18, 0x0A	; 10
    8350:	f3 01       	movw	r30, r6
    8352:	58 2d       	mov	r21, r8
    8354:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    8358:	70 e0       	ldi	r23, 0x00	; 0
    835a:	cb 01       	movw	r24, r22
    835c:	c0 97       	sbiw	r24, 0x30	; 48
    835e:	0a 97       	sbiw	r24, 0x0a	; 10
    8360:	b8 f4       	brcc	.+46     	; 0x8390 <_printf_fn+0x1fe>
    8362:	af ef       	ldi	r26, 0xFF	; 255
    8364:	6a 1a       	sub	r6, r26
    8366:	7a 0a       	sbc	r7, r26
    8368:	8a 0a       	sbc	r8, r26
    836a:	6f 96       	adiw	r28, 0x1f	; 31
    836c:	ee ad       	ldd	r30, Y+62	; 0x3e
    836e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8370:	6f 97       	sbiw	r28, 0x1f	; 31
    8372:	2e 9f       	mul	r18, r30
    8374:	c0 01       	movw	r24, r0
    8376:	2f 9f       	mul	r18, r31
    8378:	90 0d       	add	r25, r0
    837a:	11 24       	eor	r1, r1
    837c:	68 0f       	add	r22, r24
    837e:	79 1f       	adc	r23, r25
    8380:	ab 01       	movw	r20, r22
    8382:	40 53       	subi	r20, 0x30	; 48
    8384:	51 09       	sbc	r21, r1
    8386:	6f 96       	adiw	r28, 0x1f	; 31
    8388:	5f af       	std	Y+63, r21	; 0x3f
    838a:	4e af       	std	Y+62, r20	; 0x3e
    838c:	6f 97       	sbiw	r28, 0x1f	; 31
    838e:	e0 cf       	rjmp	.-64     	; 0x8350 <_printf_fn+0x1be>
    8390:	6f 96       	adiw	r28, 0x1f	; 31
    8392:	8e ad       	ldd	r24, Y+62	; 0x3e
    8394:	9f ad       	ldd	r25, Y+63	; 0x3f
    8396:	6f 97       	sbiw	r28, 0x1f	; 31
    8398:	00 97       	sbiw	r24, 0x00	; 0
    839a:	09 f4       	brne	.+2      	; 0x839e <_printf_fn+0x20c>
    839c:	4f c0       	rjmp	.+158    	; 0x843c <_printf_fn+0x2aa>
    839e:	87 70       	andi	r24, 0x07	; 7
    83a0:	99 27       	eor	r25, r25
    83a2:	89 2b       	or	r24, r25
    83a4:	09 f0       	breq	.+2      	; 0x83a8 <_printf_fn+0x216>
    83a6:	46 c0       	rjmp	.+140    	; 0x8434 <_printf_fn+0x2a2>
    83a8:	6f 96       	adiw	r28, 0x1f	; 31
    83aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    83ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    83ae:	6f 97       	sbiw	r28, 0x1f	; 31
    83b0:	83 e0       	ldi	r24, 0x03	; 3
    83b2:	b5 95       	asr	r27
    83b4:	a7 95       	ror	r26
    83b6:	8a 95       	dec	r24
    83b8:	e1 f7       	brne	.-8      	; 0x83b2 <_printf_fn+0x220>
    83ba:	6f 96       	adiw	r28, 0x1f	; 31
    83bc:	bf af       	std	Y+63, r27	; 0x3f
    83be:	ae af       	std	Y+62, r26	; 0x3e
    83c0:	6f 97       	sbiw	r28, 0x1f	; 31
    83c2:	ab 2b       	or	r26, r27
    83c4:	d9 f1       	breq	.+118    	; 0x843c <_printf_fn+0x2aa>
    83c6:	27 c0       	rjmp	.+78     	; 0x8416 <_printf_fn+0x284>
    83c8:	68 36       	cpi	r22, 0x68	; 104
    83ca:	29 f4       	brne	.+10     	; 0x83d6 <_printf_fn+0x244>
    83cc:	bf ef       	ldi	r27, 0xFF	; 255
    83ce:	6b 1a       	sub	r6, r27
    83d0:	7b 0a       	sbc	r7, r27
    83d2:	8b 0a       	sbc	r8, r27
    83d4:	c2 c2       	rjmp	.+1412   	; 0x895a <_printf_fn+0x7c8>
    83d6:	6c 36       	cpi	r22, 0x6C	; 108
    83d8:	09 f0       	breq	.+2      	; 0x83dc <_printf_fn+0x24a>
    83da:	bf c2       	rjmp	.+1406   	; 0x895a <_printf_fn+0x7c8>
    83dc:	a8 2d       	mov	r26, r8
    83de:	c3 01       	movw	r24, r6
    83e0:	01 96       	adiw	r24, 0x01	; 1
    83e2:	a1 1d       	adc	r26, r1
    83e4:	fc 01       	movw	r30, r24
    83e6:	5a 2f       	mov	r21, r26
    83e8:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    83ec:	6c 36       	cpi	r22, 0x6C	; 108
    83ee:	49 f0       	breq	.+18     	; 0x8402 <_printf_fn+0x270>
    83f0:	3c 01       	movw	r6, r24
    83f2:	8a 2e       	mov	r8, r26
    83f4:	24 e0       	ldi	r18, 0x04	; 4
    83f6:	30 e0       	ldi	r19, 0x00	; 0
    83f8:	6f 96       	adiw	r28, 0x1f	; 31
    83fa:	3f af       	std	Y+63, r19	; 0x3f
    83fc:	2e af       	std	Y+62, r18	; 0x3e
    83fe:	6f 97       	sbiw	r28, 0x1f	; 31
    8400:	0a c0       	rjmp	.+20     	; 0x8416 <_printf_fn+0x284>
    8402:	32 e0       	ldi	r19, 0x02	; 2
    8404:	63 0e       	add	r6, r19
    8406:	71 1c       	adc	r7, r1
    8408:	81 1c       	adc	r8, r1
    840a:	48 e0       	ldi	r20, 0x08	; 8
    840c:	50 e0       	ldi	r21, 0x00	; 0
    840e:	6f 96       	adiw	r28, 0x1f	; 31
    8410:	5f af       	std	Y+63, r21	; 0x3f
    8412:	4e af       	std	Y+62, r20	; 0x3e
    8414:	6f 97       	sbiw	r28, 0x1f	; 31
    8416:	f3 01       	movw	r30, r6
    8418:	58 2d       	mov	r21, r8
    841a:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    841e:	86 2f       	mov	r24, r22
    8420:	90 e0       	ldi	r25, 0x00	; 0
    8422:	a3 96       	adiw	r28, 0x23	; 35
    8424:	9f af       	std	Y+63, r25	; 0x3f
    8426:	8e af       	std	Y+62, r24	; 0x3e
    8428:	a3 97       	sbiw	r28, 0x23	; 35
    842a:	84 36       	cpi	r24, 0x64	; 100
    842c:	91 05       	cpc	r25, r1
    842e:	09 f4       	brne	.+2      	; 0x8432 <_printf_fn+0x2a0>
    8430:	9b c2       	rjmp	.+1334   	; 0x8968 <_printf_fn+0x7d6>
    8432:	08 c0       	rjmp	.+16     	; 0x8444 <_printf_fn+0x2b2>
    8434:	6f 96       	adiw	r28, 0x1f	; 31
    8436:	1f ae       	std	Y+63, r1	; 0x3f
    8438:	1e ae       	std	Y+62, r1	; 0x3e
    843a:	6f 97       	sbiw	r28, 0x1f	; 31
    843c:	a3 96       	adiw	r28, 0x23	; 35
    843e:	1f ae       	std	Y+63, r1	; 0x3f
    8440:	1e ae       	std	Y+62, r1	; 0x3e
    8442:	a3 97       	sbiw	r28, 0x23	; 35
    8444:	31 e0       	ldi	r19, 0x01	; 1
    8446:	20 e0       	ldi	r18, 0x00	; 0
    8448:	a3 96       	adiw	r28, 0x23	; 35
    844a:	ae ad       	ldd	r26, Y+62	; 0x3e
    844c:	bf ad       	ldd	r27, Y+63	; 0x3f
    844e:	a3 97       	sbiw	r28, 0x23	; 35
    8450:	a4 34       	cpi	r26, 0x44	; 68
    8452:	b1 05       	cpc	r27, r1
    8454:	09 f0       	breq	.+2      	; 0x8458 <_printf_fn+0x2c6>
    8456:	30 e0       	ldi	r19, 0x00	; 0
    8458:	83 2f       	mov	r24, r19
    845a:	92 2f       	mov	r25, r18
    845c:	a3 96       	adiw	r28, 0x23	; 35
    845e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8460:	ff ad       	ldd	r31, Y+63	; 0x3f
    8462:	a3 97       	sbiw	r28, 0x23	; 35
    8464:	e2 54       	subi	r30, 0x42	; 66
    8466:	f1 09       	sbc	r31, r1
    8468:	e7 33       	cpi	r30, 0x37	; 55
    846a:	f1 05       	cpc	r31, r1
    846c:	08 f0       	brcs	.+2      	; 0x8470 <_printf_fn+0x2de>
    846e:	65 c1       	rjmp	.+714    	; 0x873a <_printf_fn+0x5a8>
    8470:	ea 5b       	subi	r30, 0xBA	; 186
    8472:	ff 4f       	sbci	r31, 0xFF	; 255
    8474:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
    8478:	e2 e0       	ldi	r30, 0x02	; 2
    847a:	f0 e0       	ldi	r31, 0x00	; 0
    847c:	6f 96       	adiw	r28, 0x1f	; 31
    847e:	ff af       	std	Y+63, r31	; 0x3f
    8480:	ee af       	std	Y+62, r30	; 0x3e
    8482:	6f 97       	sbiw	r28, 0x1f	; 31
    8484:	29 2d       	mov	r18, r9
    8486:	28 72       	andi	r18, 0x28	; 40
    8488:	28 32       	cpi	r18, 0x28	; 40
    848a:	11 f4       	brne	.+4      	; 0x8490 <_printf_fn+0x2fe>
    848c:	e8 94       	clt
    848e:	95 f8       	bld	r9, 5
    8490:	29 2d       	mov	r18, r9
    8492:	22 72       	andi	r18, 0x22	; 34
    8494:	22 32       	cpi	r18, 0x22	; 34
    8496:	11 f4       	brne	.+4      	; 0x849c <_printf_fn+0x30a>
    8498:	e8 94       	clt
    849a:	95 f8       	bld	r9, 5
    849c:	29 2d       	mov	r18, r9
    849e:	21 72       	andi	r18, 0x21	; 33
    84a0:	21 32       	cpi	r18, 0x21	; 33
    84a2:	59 f4       	brne	.+22     	; 0x84ba <_printf_fn+0x328>
    84a4:	a1 96       	adiw	r28, 0x21	; 33
    84a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    84a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    84aa:	a1 97       	sbiw	r28, 0x21	; 33
    84ac:	24 15       	cp	r18, r4
    84ae:	35 05       	cpc	r19, r5
    84b0:	24 f4       	brge	.+8      	; 0x84ba <_printf_fn+0x328>
    84b2:	a1 96       	adiw	r28, 0x21	; 33
    84b4:	5f ae       	std	Y+63, r5	; 0x3f
    84b6:	4e ae       	std	Y+62, r4	; 0x3e
    84b8:	a1 97       	sbiw	r28, 0x21	; 33
    84ba:	29 2d       	mov	r18, r9
    84bc:	23 72       	andi	r18, 0x23	; 35
    84be:	23 32       	cpi	r18, 0x23	; 35
    84c0:	59 f4       	brne	.+22     	; 0x84d8 <_printf_fn+0x346>
    84c2:	a1 96       	adiw	r28, 0x21	; 33
    84c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    84c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    84c8:	a1 97       	sbiw	r28, 0x21	; 33
    84ca:	44 15       	cp	r20, r4
    84cc:	55 05       	cpc	r21, r5
    84ce:	24 f4       	brge	.+8      	; 0x84d8 <_printf_fn+0x346>
    84d0:	a1 96       	adiw	r28, 0x21	; 33
    84d2:	5f ae       	std	Y+63, r5	; 0x3f
    84d4:	4e ae       	std	Y+62, r4	; 0x3e
    84d6:	a1 97       	sbiw	r28, 0x21	; 33
    84d8:	e8 94       	clt
    84da:	94 f8       	bld	r9, 4
    84dc:	e8 94       	clt
    84de:	92 f8       	bld	r9, 2
    84e0:	e8 94       	clt
    84e2:	96 f8       	bld	r9, 6
    84e4:	6f 96       	adiw	r28, 0x1f	; 31
    84e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    84e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    84ea:	6f 97       	sbiw	r28, 0x1f	; 31
    84ec:	12 97       	sbiw	r26, 0x02	; 2
    84ee:	29 f5       	brne	.+74     	; 0x853a <_printf_fn+0x3a8>
    84f0:	51 01       	movw	r10, r2
    84f2:	b2 e0       	ldi	r27, 0x02	; 2
    84f4:	ab 0e       	add	r10, r27
    84f6:	b1 1c       	adc	r11, r1
    84f8:	f1 01       	movw	r30, r2
    84fa:	80 81       	ld	r24, Z
    84fc:	91 81       	ldd	r25, Z+1	; 0x01
    84fe:	65 96       	adiw	r28, 0x15	; 21
    8500:	9f af       	std	Y+63, r25	; 0x3f
    8502:	8e af       	std	Y+62, r24	; 0x3e
    8504:	65 97       	sbiw	r28, 0x15	; 21
    8506:	a3 96       	adiw	r28, 0x23	; 35
    8508:	2e ad       	ldd	r18, Y+62	; 0x3e
    850a:	3f ad       	ldd	r19, Y+63	; 0x3f
    850c:	a3 97       	sbiw	r28, 0x23	; 35
    850e:	24 34       	cpi	r18, 0x44	; 68
    8510:	31 05       	cpc	r19, r1
    8512:	09 f0       	breq	.+2      	; 0x8516 <_printf_fn+0x384>
    8514:	c0 c0       	rjmp	.+384    	; 0x8696 <_printf_fn+0x504>
    8516:	97 ff       	sbrs	r25, 7
    8518:	b8 c0       	rjmp	.+368    	; 0x868a <_printf_fn+0x4f8>
    851a:	68 94       	set
    851c:	96 f8       	bld	r9, 6
    851e:	91 95       	neg	r25
    8520:	81 95       	neg	r24
    8522:	91 09       	sbc	r25, r1
    8524:	65 96       	adiw	r28, 0x15	; 21
    8526:	9f af       	std	Y+63, r25	; 0x3f
    8528:	8e af       	std	Y+62, r24	; 0x3e
    852a:	65 97       	sbiw	r28, 0x15	; 21
    852c:	42 e0       	ldi	r20, 0x02	; 2
    852e:	50 e0       	ldi	r21, 0x00	; 0
    8530:	6f 96       	adiw	r28, 0x1f	; 31
    8532:	5f af       	std	Y+63, r21	; 0x3f
    8534:	4e af       	std	Y+62, r20	; 0x3e
    8536:	6f 97       	sbiw	r28, 0x1f	; 31
    8538:	ae c0       	rjmp	.+348    	; 0x8696 <_printf_fn+0x504>
    853a:	6f 96       	adiw	r28, 0x1f	; 31
    853c:	ae ad       	ldd	r26, Y+62	; 0x3e
    853e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8540:	6f 97       	sbiw	r28, 0x1f	; 31
    8542:	14 97       	sbiw	r26, 0x04	; 4
    8544:	59 f5       	brne	.+86     	; 0x859c <_printf_fn+0x40a>
    8546:	51 01       	movw	r10, r2
    8548:	b4 e0       	ldi	r27, 0x04	; 4
    854a:	ab 0e       	add	r10, r27
    854c:	b1 1c       	adc	r11, r1
    854e:	f1 01       	movw	r30, r2
    8550:	80 81       	ld	r24, Z
    8552:	91 81       	ldd	r25, Z+1	; 0x01
    8554:	a2 81       	ldd	r26, Z+2	; 0x02
    8556:	b3 81       	ldd	r27, Z+3	; 0x03
    8558:	2f 96       	adiw	r28, 0x0f	; 15
    855a:	8c af       	std	Y+60, r24	; 0x3c
    855c:	9d af       	std	Y+61, r25	; 0x3d
    855e:	ae af       	std	Y+62, r26	; 0x3e
    8560:	bf af       	std	Y+63, r27	; 0x3f
    8562:	2f 97       	sbiw	r28, 0x0f	; 15
    8564:	a3 96       	adiw	r28, 0x23	; 35
    8566:	2e ad       	ldd	r18, Y+62	; 0x3e
    8568:	3f ad       	ldd	r19, Y+63	; 0x3f
    856a:	a3 97       	sbiw	r28, 0x23	; 35
    856c:	24 34       	cpi	r18, 0x44	; 68
    856e:	31 05       	cpc	r19, r1
    8570:	09 f0       	breq	.+2      	; 0x8574 <_printf_fn+0x3e2>
    8572:	9e c0       	rjmp	.+316    	; 0x86b0 <_printf_fn+0x51e>
    8574:	b7 ff       	sbrs	r27, 7
    8576:	96 c0       	rjmp	.+300    	; 0x86a4 <_printf_fn+0x512>
    8578:	68 94       	set
    857a:	96 f8       	bld	r9, 6
    857c:	b0 95       	com	r27
    857e:	a0 95       	com	r26
    8580:	90 95       	com	r25
    8582:	81 95       	neg	r24
    8584:	9f 4f       	sbci	r25, 0xFF	; 255
    8586:	af 4f       	sbci	r26, 0xFF	; 255
    8588:	bf 4f       	sbci	r27, 0xFF	; 255
    858a:	2f 96       	adiw	r28, 0x0f	; 15
    858c:	8c af       	std	Y+60, r24	; 0x3c
    858e:	9d af       	std	Y+61, r25	; 0x3d
    8590:	ae af       	std	Y+62, r26	; 0x3e
    8592:	bf af       	std	Y+63, r27	; 0x3f
    8594:	2f 97       	sbiw	r28, 0x0f	; 15
    8596:	86 c0       	rjmp	.+268    	; 0x86a4 <_printf_fn+0x512>
    8598:	81 e0       	ldi	r24, 0x01	; 1
    859a:	90 e0       	ldi	r25, 0x00	; 0
    859c:	6f 96       	adiw	r28, 0x1f	; 31
    859e:	ae ad       	ldd	r26, Y+62	; 0x3e
    85a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    85a2:	6f 97       	sbiw	r28, 0x1f	; 31
    85a4:	51 01       	movw	r10, r2
    85a6:	18 97       	sbiw	r26, 0x08	; 8
    85a8:	09 f0       	breq	.+2      	; 0x85ac <_printf_fn+0x41a>
    85aa:	89 c0       	rjmp	.+274    	; 0x86be <_printf_fn+0x52c>
    85ac:	b8 e0       	ldi	r27, 0x08	; 8
    85ae:	ab 0e       	add	r10, r27
    85b0:	b1 1c       	adc	r11, r1
    85b2:	f1 01       	movw	r30, r2
    85b4:	f0 81       	ld	r31, Z
    85b6:	aa 96       	adiw	r28, 0x2a	; 42
    85b8:	ff af       	std	Y+63, r31	; 0x3f
    85ba:	aa 97       	sbiw	r28, 0x2a	; 42
    85bc:	d1 01       	movw	r26, r2
    85be:	11 96       	adiw	r26, 0x01	; 1
    85c0:	fc 90       	ld	r15, X
    85c2:	11 97       	sbiw	r26, 0x01	; 1
    85c4:	12 96       	adiw	r26, 0x02	; 2
    85c6:	0c 91       	ld	r16, X
    85c8:	12 97       	sbiw	r26, 0x02	; 2
    85ca:	13 96       	adiw	r26, 0x03	; 3
    85cc:	1c 91       	ld	r17, X
    85ce:	13 97       	sbiw	r26, 0x03	; 3
    85d0:	14 96       	adiw	r26, 0x04	; 4
    85d2:	bc 91       	ld	r27, X
    85d4:	f1 01       	movw	r30, r2
    85d6:	f5 81       	ldd	r31, Z+5	; 0x05
    85d8:	ab 96       	adiw	r28, 0x2b	; 43
    85da:	ff af       	std	Y+63, r31	; 0x3f
    85dc:	ab 97       	sbiw	r28, 0x2b	; 43
    85de:	f1 01       	movw	r30, r2
    85e0:	f6 81       	ldd	r31, Z+6	; 0x06
    85e2:	ac 96       	adiw	r28, 0x2c	; 44
    85e4:	ff af       	std	Y+63, r31	; 0x3f
    85e6:	ac 97       	sbiw	r28, 0x2c	; 44
    85e8:	f1 01       	movw	r30, r2
    85ea:	37 80       	ldd	r3, Z+7	; 0x07
    85ec:	aa 96       	adiw	r28, 0x2a	; 42
    85ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    85f0:	aa 97       	sbiw	r28, 0x2a	; 42
    85f2:	24 96       	adiw	r28, 0x04	; 4
    85f4:	ff af       	std	Y+63, r31	; 0x3f
    85f6:	24 97       	sbiw	r28, 0x04	; 4
    85f8:	25 96       	adiw	r28, 0x05	; 5
    85fa:	ff ae       	std	Y+63, r15	; 0x3f
    85fc:	25 97       	sbiw	r28, 0x05	; 5
    85fe:	26 96       	adiw	r28, 0x06	; 6
    8600:	0f af       	std	Y+63, r16	; 0x3f
    8602:	26 97       	sbiw	r28, 0x06	; 6
    8604:	27 96       	adiw	r28, 0x07	; 7
    8606:	1f af       	std	Y+63, r17	; 0x3f
    8608:	27 97       	sbiw	r28, 0x07	; 7
    860a:	28 96       	adiw	r28, 0x08	; 8
    860c:	bf af       	std	Y+63, r27	; 0x3f
    860e:	28 97       	sbiw	r28, 0x08	; 8
    8610:	ab 96       	adiw	r28, 0x2b	; 43
    8612:	ef ad       	ldd	r30, Y+63	; 0x3f
    8614:	ab 97       	sbiw	r28, 0x2b	; 43
    8616:	29 96       	adiw	r28, 0x09	; 9
    8618:	ef af       	std	Y+63, r30	; 0x3f
    861a:	29 97       	sbiw	r28, 0x09	; 9
    861c:	ac 96       	adiw	r28, 0x2c	; 44
    861e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8620:	ac 97       	sbiw	r28, 0x2c	; 44
    8622:	2a 96       	adiw	r28, 0x0a	; 10
    8624:	ff af       	std	Y+63, r31	; 0x3f
    8626:	2a 97       	sbiw	r28, 0x0a	; 10
    8628:	2b 96       	adiw	r28, 0x0b	; 11
    862a:	3f ae       	std	Y+63, r3	; 0x3f
    862c:	2b 97       	sbiw	r28, 0x0b	; 11
    862e:	89 2b       	or	r24, r25
    8630:	09 f4       	brne	.+2      	; 0x8634 <_printf_fn+0x4a2>
    8632:	50 c0       	rjmp	.+160    	; 0x86d4 <_printf_fn+0x542>
    8634:	aa 96       	adiw	r28, 0x2a	; 42
    8636:	2f ad       	ldd	r18, Y+63	; 0x3f
    8638:	aa 97       	sbiw	r28, 0x2a	; 42
    863a:	3f 2d       	mov	r19, r15
    863c:	a8 01       	movw	r20, r16
    863e:	6b 2f       	mov	r22, r27
    8640:	7e 2f       	mov	r23, r30
    8642:	8f 2f       	mov	r24, r31
    8644:	93 2d       	mov	r25, r3
    8646:	a0 e0       	ldi	r26, 0x00	; 0
    8648:	0e 94 79 e9 	call	0x1d2f2	; 0x1d2f2 <__cmpdi2_s8>
    864c:	0c f0       	brlt	.+2      	; 0x8650 <_printf_fn+0x4be>
    864e:	42 c0       	rjmp	.+132    	; 0x86d4 <_printf_fn+0x542>
    8650:	68 94       	set
    8652:	96 f8       	bld	r9, 6
    8654:	0e 94 2b e9 	call	0x1d256	; 0x1d256 <__negdi2>
    8658:	24 96       	adiw	r28, 0x04	; 4
    865a:	2f af       	std	Y+63, r18	; 0x3f
    865c:	24 97       	sbiw	r28, 0x04	; 4
    865e:	25 96       	adiw	r28, 0x05	; 5
    8660:	3f af       	std	Y+63, r19	; 0x3f
    8662:	25 97       	sbiw	r28, 0x05	; 5
    8664:	26 96       	adiw	r28, 0x06	; 6
    8666:	4f af       	std	Y+63, r20	; 0x3f
    8668:	26 97       	sbiw	r28, 0x06	; 6
    866a:	27 96       	adiw	r28, 0x07	; 7
    866c:	5f af       	std	Y+63, r21	; 0x3f
    866e:	27 97       	sbiw	r28, 0x07	; 7
    8670:	28 96       	adiw	r28, 0x08	; 8
    8672:	6f af       	std	Y+63, r22	; 0x3f
    8674:	28 97       	sbiw	r28, 0x08	; 8
    8676:	29 96       	adiw	r28, 0x09	; 9
    8678:	7f af       	std	Y+63, r23	; 0x3f
    867a:	29 97       	sbiw	r28, 0x09	; 9
    867c:	2a 96       	adiw	r28, 0x0a	; 10
    867e:	8f af       	std	Y+63, r24	; 0x3f
    8680:	2a 97       	sbiw	r28, 0x0a	; 10
    8682:	2b 96       	adiw	r28, 0x0b	; 11
    8684:	9f af       	std	Y+63, r25	; 0x3f
    8686:	2b 97       	sbiw	r28, 0x0b	; 11
    8688:	25 c0       	rjmp	.+74     	; 0x86d4 <_printf_fn+0x542>
    868a:	22 e0       	ldi	r18, 0x02	; 2
    868c:	30 e0       	ldi	r19, 0x00	; 0
    868e:	6f 96       	adiw	r28, 0x1f	; 31
    8690:	3f af       	std	Y+63, r19	; 0x3f
    8692:	2e af       	std	Y+62, r18	; 0x3e
    8694:	6f 97       	sbiw	r28, 0x1f	; 31
    8696:	6c 96       	adiw	r28, 0x1c	; 28
    8698:	8f ad       	ldd	r24, Y+63	; 0x3f
    869a:	6c 97       	sbiw	r28, 0x1c	; 28
    869c:	6d 96       	adiw	r28, 0x1d	; 29
    869e:	9f ad       	ldd	r25, Y+63	; 0x3f
    86a0:	6d 97       	sbiw	r28, 0x1d	; 29
    86a2:	1e c0       	rjmp	.+60     	; 0x86e0 <_printf_fn+0x54e>
    86a4:	44 e0       	ldi	r20, 0x04	; 4
    86a6:	50 e0       	ldi	r21, 0x00	; 0
    86a8:	6f 96       	adiw	r28, 0x1f	; 31
    86aa:	5f af       	std	Y+63, r21	; 0x3f
    86ac:	4e af       	std	Y+62, r20	; 0x3e
    86ae:	6f 97       	sbiw	r28, 0x1f	; 31
    86b0:	6a 96       	adiw	r28, 0x1a	; 26
    86b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    86b4:	6a 97       	sbiw	r28, 0x1a	; 26
    86b6:	6b 96       	adiw	r28, 0x1b	; 27
    86b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ba:	6b 97       	sbiw	r28, 0x1b	; 27
    86bc:	11 c0       	rjmp	.+34     	; 0x86e0 <_printf_fn+0x54e>
    86be:	66 96       	adiw	r28, 0x16	; 22
    86c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    86c2:	66 97       	sbiw	r28, 0x16	; 22
    86c4:	67 96       	adiw	r28, 0x17	; 23
    86c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    86c8:	67 97       	sbiw	r28, 0x17	; 23
    86ca:	a3 96       	adiw	r28, 0x23	; 35
    86cc:	1f ae       	std	Y+63, r1	; 0x3f
    86ce:	1e ae       	std	Y+62, r1	; 0x3e
    86d0:	a3 97       	sbiw	r28, 0x23	; 35
    86d2:	06 c0       	rjmp	.+12     	; 0x86e0 <_printf_fn+0x54e>
    86d4:	68 96       	adiw	r28, 0x18	; 24
    86d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    86d8:	68 97       	sbiw	r28, 0x18	; 24
    86da:	69 96       	adiw	r28, 0x19	; 25
    86dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    86de:	69 97       	sbiw	r28, 0x19	; 25
    86e0:	5f ef       	ldi	r21, 0xFF	; 255
    86e2:	65 1a       	sub	r6, r21
    86e4:	75 0a       	sbc	r7, r21
    86e6:	85 0a       	sbc	r8, r21
    86e8:	15 01       	movw	r2, r10
    86ea:	2d c0       	rjmp	.+90     	; 0x8746 <_printf_fn+0x5b4>
    86ec:	91 fc       	sbrc	r9, 1
    86ee:	08 c0       	rjmp	.+16     	; 0x8700 <_printf_fn+0x56e>
    86f0:	68 94       	set
    86f2:	91 f8       	bld	r9, 1
    86f4:	86 e0       	ldi	r24, 0x06	; 6
    86f6:	90 e0       	ldi	r25, 0x00	; 0
    86f8:	a1 96       	adiw	r28, 0x21	; 33
    86fa:	9f af       	std	Y+63, r25	; 0x3f
    86fc:	8e af       	std	Y+62, r24	; 0x3e
    86fe:	a1 97       	sbiw	r28, 0x21	; 33
    8700:	d1 01       	movw	r26, r2
    8702:	2d 91       	ld	r18, X+
    8704:	3d 91       	ld	r19, X+
    8706:	4d 91       	ld	r20, X+
    8708:	5c 91       	ld	r21, X
    870a:	a9 96       	adiw	r28, 0x29	; 41
    870c:	2c af       	std	Y+60, r18	; 0x3c
    870e:	3d af       	std	Y+61, r19	; 0x3d
    8710:	4e af       	std	Y+62, r20	; 0x3e
    8712:	5f af       	std	Y+63, r21	; 0x3f
    8714:	a9 97       	sbiw	r28, 0x29	; 41
    8716:	bf ef       	ldi	r27, 0xFF	; 255
    8718:	6b 1a       	sub	r6, r27
    871a:	7b 0a       	sbc	r7, r27
    871c:	8b 0a       	sbc	r8, r27
    871e:	f1 01       	movw	r30, r2
    8720:	34 96       	adiw	r30, 0x04	; 4
    8722:	1f 01       	movw	r2, r30
    8724:	0a c0       	rjmp	.+20     	; 0x873a <_printf_fn+0x5a8>
    8726:	ff ef       	ldi	r31, 0xFF	; 255
    8728:	6f 1a       	sub	r6, r31
    872a:	7f 0a       	sbc	r7, r31
    872c:	8f 0a       	sbc	r8, r31
    872e:	b0 c0       	rjmp	.+352    	; 0x8890 <_printf_fn+0x6fe>
    8730:	2f ef       	ldi	r18, 0xFF	; 255
    8732:	62 1a       	sub	r6, r18
    8734:	72 0a       	sbc	r7, r18
    8736:	82 0a       	sbc	r8, r18
    8738:	b8 c0       	rjmp	.+368    	; 0x88aa <_printf_fn+0x718>
    873a:	66 96       	adiw	r28, 0x16	; 22
    873c:	8f ad       	ldd	r24, Y+63	; 0x3f
    873e:	66 97       	sbiw	r28, 0x16	; 22
    8740:	67 96       	adiw	r28, 0x17	; 23
    8742:	9f ad       	ldd	r25, Y+63	; 0x3f
    8744:	67 97       	sbiw	r28, 0x17	; 23
    8746:	a3 96       	adiw	r28, 0x23	; 35
    8748:	ee ad       	ldd	r30, Y+62	; 0x3e
    874a:	ff ad       	ldd	r31, Y+63	; 0x3f
    874c:	a3 97       	sbiw	r28, 0x23	; 35
    874e:	e2 54       	subi	r30, 0x42	; 66
    8750:	f1 09       	sbc	r31, r1
    8752:	e7 33       	cpi	r30, 0x37	; 55
    8754:	f1 05       	cpc	r31, r1
    8756:	08 f0       	brcs	.+2      	; 0x875a <_printf_fn+0x5c8>
    8758:	f9 c0       	rjmp	.+498    	; 0x894c <_printf_fn+0x7ba>
    875a:	e3 58       	subi	r30, 0x83	; 131
    875c:	ff 4f       	sbci	r31, 0xFF	; 255
    875e:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
    8762:	e8 94       	clt
    8764:	94 f8       	bld	r9, 4
    8766:	e8 94       	clt
    8768:	92 f8       	bld	r9, 2
    876a:	a9 2c       	mov	r10, r9
    876c:	b1 2c       	mov	r11, r1
    876e:	a1 96       	adiw	r28, 0x21	; 33
    8770:	ce ac       	ldd	r12, Y+62	; 0x3e
    8772:	df ac       	ldd	r13, Y+63	; 0x3f
    8774:	a1 97       	sbiw	r28, 0x21	; 33
    8776:	72 01       	movw	r14, r4
    8778:	0a e0       	ldi	r16, 0x0A	; 10
    877a:	10 e0       	ldi	r17, 0x00	; 0
    877c:	13 c0       	rjmp	.+38     	; 0x87a4 <_printf_fn+0x612>
    877e:	a9 2c       	mov	r10, r9
    8780:	b1 2c       	mov	r11, r1
    8782:	a1 96       	adiw	r28, 0x21	; 33
    8784:	ce ac       	ldd	r12, Y+62	; 0x3e
    8786:	df ac       	ldd	r13, Y+63	; 0x3f
    8788:	a1 97       	sbiw	r28, 0x21	; 33
    878a:	72 01       	movw	r14, r4
    878c:	02 e0       	ldi	r16, 0x02	; 2
    878e:	10 e0       	ldi	r17, 0x00	; 0
    8790:	09 c0       	rjmp	.+18     	; 0x87a4 <_printf_fn+0x612>
    8792:	a9 2c       	mov	r10, r9
    8794:	b1 2c       	mov	r11, r1
    8796:	a1 96       	adiw	r28, 0x21	; 33
    8798:	ce ac       	ldd	r12, Y+62	; 0x3e
    879a:	df ac       	ldd	r13, Y+63	; 0x3f
    879c:	a1 97       	sbiw	r28, 0x21	; 33
    879e:	72 01       	movw	r14, r4
    87a0:	08 e0       	ldi	r16, 0x08	; 8
    87a2:	10 e0       	ldi	r17, 0x00	; 0
    87a4:	22 e4       	ldi	r18, 0x42	; 66
    87a6:	30 e0       	ldi	r19, 0x00	; 0
    87a8:	ae 01       	movw	r20, r28
    87aa:	4f 5f       	subi	r20, 0xFF	; 255
    87ac:	5f 4f       	sbci	r21, 0xFF	; 255
    87ae:	6f 96       	adiw	r28, 0x1f	; 31
    87b0:	6e ad       	ldd	r22, Y+62	; 0x3e
    87b2:	7f ad       	ldd	r23, Y+63	; 0x3f
    87b4:	6f 97       	sbiw	r28, 0x1f	; 31
    87b6:	f3 d9       	rcall	.-3098   	; 0x7b9e <p_ntoa>
    87b8:	30 c0       	rjmp	.+96     	; 0x881a <_printf_fn+0x688>
    87ba:	a9 2c       	mov	r10, r9
    87bc:	b1 2c       	mov	r11, r1
    87be:	a1 96       	adiw	r28, 0x21	; 33
    87c0:	ce ac       	ldd	r12, Y+62	; 0x3e
    87c2:	df ac       	ldd	r13, Y+63	; 0x3f
    87c4:	a1 97       	sbiw	r28, 0x21	; 33
    87c6:	72 01       	movw	r14, r4
    87c8:	00 e1       	ldi	r16, 0x10	; 16
    87ca:	10 e0       	ldi	r17, 0x00	; 0
    87cc:	22 e4       	ldi	r18, 0x42	; 66
    87ce:	30 e0       	ldi	r19, 0x00	; 0
    87d0:	ae 01       	movw	r20, r28
    87d2:	4f 5f       	subi	r20, 0xFF	; 255
    87d4:	5f 4f       	sbci	r21, 0xFF	; 255
    87d6:	6f 96       	adiw	r28, 0x1f	; 31
    87d8:	6e ad       	ldd	r22, Y+62	; 0x3e
    87da:	7f ad       	ldd	r23, Y+63	; 0x3f
    87dc:	6f 97       	sbiw	r28, 0x1f	; 31
    87de:	df d9       	rcall	.-3138   	; 0x7b9e <p_ntoa>
    87e0:	7c 01       	movw	r14, r24
    87e2:	a3 96       	adiw	r28, 0x23	; 35
    87e4:	6e ad       	ldd	r22, Y+62	; 0x3e
    87e6:	7f ad       	ldd	r23, Y+63	; 0x3f
    87e8:	a3 97       	sbiw	r28, 0x23	; 35
    87ea:	67 7f       	andi	r22, 0xF7	; 247
    87ec:	60 35       	cpi	r22, 0x50	; 80
    87ee:	71 05       	cpc	r23, r1
    87f0:	c9 f5       	brne	.+114    	; 0x8864 <_printf_fn+0x6d2>
    87f2:	34 c0       	rjmp	.+104    	; 0x885c <_printf_fn+0x6ca>
    87f4:	c9 2c       	mov	r12, r9
    87f6:	d1 2c       	mov	r13, r1
    87f8:	a1 96       	adiw	r28, 0x21	; 33
    87fa:	ee ac       	ldd	r14, Y+62	; 0x3e
    87fc:	ff ac       	ldd	r15, Y+63	; 0x3f
    87fe:	a1 97       	sbiw	r28, 0x21	; 33
    8800:	82 01       	movw	r16, r4
    8802:	22 e4       	ldi	r18, 0x42	; 66
    8804:	30 e0       	ldi	r19, 0x00	; 0
    8806:	ae 01       	movw	r20, r28
    8808:	4f 5f       	subi	r20, 0xFF	; 255
    880a:	5f 4f       	sbci	r21, 0xFF	; 255
    880c:	a9 96       	adiw	r28, 0x29	; 41
    880e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8810:	7d ad       	ldd	r23, Y+61	; 0x3d
    8812:	8e ad       	ldd	r24, Y+62	; 0x3e
    8814:	9f ad       	ldd	r25, Y+63	; 0x3f
    8816:	a9 97       	sbiw	r28, 0x29	; 41
    8818:	17 da       	rcall	.-3026   	; 0x7c48 <p_ftoa>
    881a:	93 fa       	bst	r9, 3
    881c:	00 27       	eor	r16, r16
    881e:	00 f9       	bld	r16, 0
    8820:	10 e0       	ldi	r17, 0x00	; 0
    8822:	9c 01       	movw	r18, r24
    8824:	24 c0       	rjmp	.+72     	; 0x886e <_printf_fn+0x6dc>
    8826:	c9 2c       	mov	r12, r9
    8828:	d1 2c       	mov	r13, r1
    882a:	a1 96       	adiw	r28, 0x21	; 33
    882c:	ee ac       	ldd	r14, Y+62	; 0x3e
    882e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8830:	a1 97       	sbiw	r28, 0x21	; 33
    8832:	82 01       	movw	r16, r4
    8834:	22 e4       	ldi	r18, 0x42	; 66
    8836:	30 e0       	ldi	r19, 0x00	; 0
    8838:	ae 01       	movw	r20, r28
    883a:	4f 5f       	subi	r20, 0xFF	; 255
    883c:	5f 4f       	sbci	r21, 0xFF	; 255
    883e:	a9 96       	adiw	r28, 0x29	; 41
    8840:	6c ad       	ldd	r22, Y+60	; 0x3c
    8842:	7d ad       	ldd	r23, Y+61	; 0x3d
    8844:	8e ad       	ldd	r24, Y+62	; 0x3e
    8846:	9f ad       	ldd	r25, Y+63	; 0x3f
    8848:	a9 97       	sbiw	r28, 0x29	; 41
    884a:	05 db       	rcall	.-2550   	; 0x7e56 <p_etoa>
    884c:	7c 01       	movw	r14, r24
    884e:	a3 96       	adiw	r28, 0x23	; 35
    8850:	4e ad       	ldd	r20, Y+62	; 0x3e
    8852:	5f ad       	ldd	r21, Y+63	; 0x3f
    8854:	a3 97       	sbiw	r28, 0x23	; 35
    8856:	45 34       	cpi	r20, 0x45	; 69
    8858:	51 05       	cpc	r21, r1
    885a:	21 f4       	brne	.+8      	; 0x8864 <_printf_fn+0x6d2>
    885c:	ce 01       	movw	r24, r28
    885e:	01 96       	adiw	r24, 0x01	; 1
    8860:	0e 94 cb 30 	call	0x6196	; 0x6196 <strupper>
    8864:	93 fa       	bst	r9, 3
    8866:	00 27       	eor	r16, r16
    8868:	00 f9       	bld	r16, 0
    886a:	10 e0       	ldi	r17, 0x00	; 0
    886c:	97 01       	movw	r18, r14
    886e:	a2 01       	movw	r20, r4
    8870:	be 01       	movw	r22, r28
    8872:	6f 5f       	subi	r22, 0xFF	; 255
    8874:	7f 4f       	sbci	r23, 0xFF	; 255
    8876:	a5 96       	adiw	r28, 0x25	; 37
    8878:	8e ad       	ldd	r24, Y+62	; 0x3e
    887a:	9f ad       	ldd	r25, Y+63	; 0x3f
    887c:	a5 97       	sbiw	r28, 0x25	; 37
    887e:	47 dc       	rcall	.-1906   	; 0x810e <_puts_pad>
    8880:	69 c0       	rjmp	.+210    	; 0x8954 <_printf_fn+0x7c2>
    8882:	a3 96       	adiw	r28, 0x23	; 35
    8884:	8e ad       	ldd	r24, Y+62	; 0x3e
    8886:	9f ad       	ldd	r25, Y+63	; 0x3f
    8888:	a3 97       	sbiw	r28, 0x23	; 35
    888a:	83 37       	cpi	r24, 0x73	; 115
    888c:	91 05       	cpc	r25, r1
    888e:	69 f4       	brne	.+26     	; 0x88aa <_printf_fn+0x718>
    8890:	71 01       	movw	r14, r2
    8892:	92 e0       	ldi	r25, 0x02	; 2
    8894:	e9 0e       	add	r14, r25
    8896:	f1 1c       	adc	r15, r1
    8898:	d1 01       	movw	r26, r2
    889a:	6d 91       	ld	r22, X+
    889c:	7c 91       	ld	r23, X
    889e:	61 15       	cp	r22, r1
    88a0:	71 05       	cpc	r23, r1
    88a2:	91 f4       	brne	.+36     	; 0x88c8 <_printf_fn+0x736>
    88a4:	6e eb       	ldi	r22, 0xBE	; 190
    88a6:	77 e0       	ldi	r23, 0x07	; 7
    88a8:	0f c0       	rjmp	.+30     	; 0x88c8 <_printf_fn+0x736>
    88aa:	71 01       	movw	r14, r2
    88ac:	b2 e0       	ldi	r27, 0x02	; 2
    88ae:	eb 0e       	add	r14, r27
    88b0:	f1 1c       	adc	r15, r1
    88b2:	f1 01       	movw	r30, r2
    88b4:	80 81       	ld	r24, Z
    88b6:	60 96       	adiw	r28, 0x10	; 16
    88b8:	8f af       	std	Y+63, r24	; 0x3f
    88ba:	60 97       	sbiw	r28, 0x10	; 16
    88bc:	61 96       	adiw	r28, 0x11	; 17
    88be:	1f ae       	std	Y+63, r1	; 0x3f
    88c0:	61 97       	sbiw	r28, 0x11	; 17
    88c2:	be 01       	movw	r22, r28
    88c4:	61 5b       	subi	r22, 0xB1	; 177
    88c6:	7f 4f       	sbci	r23, 0xFF	; 255
    88c8:	fb 01       	movw	r30, r22
    88ca:	01 90       	ld	r0, Z+
    88cc:	00 20       	and	r0, r0
    88ce:	e9 f7       	brne	.-6      	; 0x88ca <_printf_fn+0x738>
    88d0:	31 97       	sbiw	r30, 0x01	; 1
    88d2:	e6 1b       	sub	r30, r22
    88d4:	f7 0b       	sbc	r31, r23
    88d6:	a1 96       	adiw	r28, 0x21	; 33
    88d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88da:	3f ad       	ldd	r19, Y+63	; 0x3f
    88dc:	a1 97       	sbiw	r28, 0x21	; 33
    88de:	23 2b       	or	r18, r19
    88e0:	21 f4       	brne	.+8      	; 0x88ea <_printf_fn+0x758>
    88e2:	a1 96       	adiw	r28, 0x21	; 33
    88e4:	ff af       	std	Y+63, r31	; 0x3f
    88e6:	ee af       	std	Y+62, r30	; 0x3e
    88e8:	a1 97       	sbiw	r28, 0x21	; 33
    88ea:	a1 96       	adiw	r28, 0x21	; 33
    88ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    88ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    88f0:	a1 97       	sbiw	r28, 0x21	; 33
    88f2:	44 16       	cp	r4, r20
    88f4:	55 06       	cpc	r5, r21
    88f6:	3c f4       	brge	.+14     	; 0x8906 <_printf_fn+0x774>
    88f8:	41 14       	cp	r4, r1
    88fa:	51 04       	cpc	r5, r1
    88fc:	21 f0       	breq	.+8      	; 0x8906 <_printf_fn+0x774>
    88fe:	a1 96       	adiw	r28, 0x21	; 33
    8900:	5f ae       	std	Y+63, r5	; 0x3f
    8902:	4e ae       	std	Y+62, r4	; 0x3e
    8904:	a1 97       	sbiw	r28, 0x21	; 33
    8906:	93 fa       	bst	r9, 3
    8908:	00 27       	eor	r16, r16
    890a:	00 f9       	bld	r16, 0
    890c:	10 e0       	ldi	r17, 0x00	; 0
    890e:	a1 96       	adiw	r28, 0x21	; 33
    8910:	2e ad       	ldd	r18, Y+62	; 0x3e
    8912:	3f ad       	ldd	r19, Y+63	; 0x3f
    8914:	a1 97       	sbiw	r28, 0x21	; 33
    8916:	a2 01       	movw	r20, r4
    8918:	a5 96       	adiw	r28, 0x25	; 37
    891a:	8e ad       	ldd	r24, Y+62	; 0x3e
    891c:	9f ad       	ldd	r25, Y+63	; 0x3f
    891e:	a5 97       	sbiw	r28, 0x25	; 37
    8920:	f6 db       	rcall	.-2068   	; 0x810e <_puts_pad>
    8922:	17 01       	movw	r2, r14
    8924:	17 c0       	rjmp	.+46     	; 0x8954 <_printf_fn+0x7c2>
    8926:	f6 01       	movw	r30, r12
    8928:	5e 2d       	mov	r21, r14
    892a:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
    892e:	66 23       	and	r22, r22
    8930:	89 f0       	breq	.+34     	; 0x8954 <_printf_fn+0x7c2>
    8932:	5f ef       	ldi	r21, 0xFF	; 255
    8934:	c5 1a       	sub	r12, r21
    8936:	d5 0a       	sbc	r13, r21
    8938:	e5 0a       	sbc	r14, r21
    893a:	a5 96       	adiw	r28, 0x25	; 37
    893c:	ae ad       	ldd	r26, Y+62	; 0x3e
    893e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8940:	a5 97       	sbiw	r28, 0x25	; 37
    8942:	ed 91       	ld	r30, X+
    8944:	fc 91       	ld	r31, X
    8946:	11 97       	sbiw	r26, 0x01	; 1
    8948:	cd 01       	movw	r24, r26
    894a:	09 95       	icall
    894c:	6c 14       	cp	r6, r12
    894e:	7d 04       	cpc	r7, r13
    8950:	8e 04       	cpc	r8, r14
    8952:	48 f7       	brcc	.-46     	; 0x8926 <_printf_fn+0x794>
    8954:	e8 2c       	mov	r14, r8
    8956:	63 01       	movw	r12, r6
    8958:	4b cc       	rjmp	.-1898   	; 0x81f0 <_printf_fn+0x5e>
    895a:	e2 e0       	ldi	r30, 0x02	; 2
    895c:	f0 e0       	ldi	r31, 0x00	; 0
    895e:	6f 96       	adiw	r28, 0x1f	; 31
    8960:	ff af       	std	Y+63, r31	; 0x3f
    8962:	ee af       	std	Y+62, r30	; 0x3e
    8964:	6f 97       	sbiw	r28, 0x1f	; 31
    8966:	57 cd       	rjmp	.-1362   	; 0x8416 <_printf_fn+0x284>
    8968:	6f 96       	adiw	r28, 0x1f	; 31
    896a:	ee ad       	ldd	r30, Y+62	; 0x3e
    896c:	ff ad       	ldd	r31, Y+63	; 0x3f
    896e:	6f 97       	sbiw	r28, 0x1f	; 31
    8970:	32 97       	sbiw	r30, 0x02	; 2
    8972:	61 f4       	brne	.+24     	; 0x898c <_printf_fn+0x7fa>
    8974:	51 01       	movw	r10, r2
    8976:	f2 e0       	ldi	r31, 0x02	; 2
    8978:	af 0e       	add	r10, r31
    897a:	b1 1c       	adc	r11, r1
    897c:	d1 01       	movw	r26, r2
    897e:	8d 91       	ld	r24, X+
    8980:	9c 91       	ld	r25, X
    8982:	65 96       	adiw	r28, 0x15	; 21
    8984:	9f af       	std	Y+63, r25	; 0x3f
    8986:	8e af       	std	Y+62, r24	; 0x3e
    8988:	65 97       	sbiw	r28, 0x15	; 21
    898a:	c5 cd       	rjmp	.-1142   	; 0x8516 <_printf_fn+0x384>
    898c:	6f 96       	adiw	r28, 0x1f	; 31
    898e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8990:	3f ad       	ldd	r19, Y+63	; 0x3f
    8992:	6f 97       	sbiw	r28, 0x1f	; 31
    8994:	24 30       	cpi	r18, 0x04	; 4
    8996:	31 05       	cpc	r19, r1
    8998:	09 f0       	breq	.+2      	; 0x899c <_printf_fn+0x80a>
    899a:	fe cd       	rjmp	.-1028   	; 0x8598 <_printf_fn+0x406>
    899c:	51 01       	movw	r10, r2
    899e:	f4 e0       	ldi	r31, 0x04	; 4
    89a0:	af 0e       	add	r10, r31
    89a2:	b1 1c       	adc	r11, r1
    89a4:	f1 01       	movw	r30, r2
    89a6:	80 81       	ld	r24, Z
    89a8:	91 81       	ldd	r25, Z+1	; 0x01
    89aa:	a2 81       	ldd	r26, Z+2	; 0x02
    89ac:	b3 81       	ldd	r27, Z+3	; 0x03
    89ae:	2f 96       	adiw	r28, 0x0f	; 15
    89b0:	8c af       	std	Y+60, r24	; 0x3c
    89b2:	9d af       	std	Y+61, r25	; 0x3d
    89b4:	ae af       	std	Y+62, r26	; 0x3e
    89b6:	bf af       	std	Y+63, r27	; 0x3f
    89b8:	2f 97       	sbiw	r28, 0x0f	; 15
    89ba:	dc cd       	rjmp	.-1096   	; 0x8574 <_printf_fn+0x3e2>
    89bc:	c5 59       	subi	r28, 0x95	; 149
    89be:	df 4f       	sbci	r29, 0xFF	; 255
    89c0:	e2 e1       	ldi	r30, 0x12	; 18
    89c2:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

000089c6 <vsnprintf_P>:
    89c6:	a8 e0       	ldi	r26, 0x08	; 8
    89c8:	b0 e0       	ldi	r27, 0x00	; 0
    89ca:	e9 ee       	ldi	r30, 0xE9	; 233
    89cc:	f4 e4       	ldi	r31, 0x44	; 68
    89ce:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
    89d2:	7c 01       	movw	r14, r24
    89d4:	cb 01       	movw	r24, r22
    89d6:	64 2f       	mov	r22, r20
    89d8:	a9 01       	movw	r20, r18
    89da:	98 01       	movw	r18, r16
    89dc:	f7 01       	movw	r30, r14
    89de:	10 82       	st	Z, r1
    89e0:	e0 ef       	ldi	r30, 0xF0	; 240
    89e2:	fc e3       	ldi	r31, 0x3C	; 60
    89e4:	fa 83       	std	Y+2, r31	; 0x02
    89e6:	e9 83       	std	Y+1, r30	; 0x01
    89e8:	9e 83       	std	Y+6, r25	; 0x06
    89ea:	8d 83       	std	Y+5, r24	; 0x05
    89ec:	18 86       	std	Y+8, r1	; 0x08
    89ee:	1f 82       	std	Y+7, r1	; 0x07
    89f0:	fc 82       	std	Y+4, r15	; 0x04
    89f2:	eb 82       	std	Y+3, r14	; 0x03
    89f4:	ce 01       	movw	r24, r28
    89f6:	01 96       	adiw	r24, 0x01	; 1
    89f8:	cc db       	rcall	.-2152   	; 0x8192 <_printf_fn>
    89fa:	f7 01       	movw	r30, r14
    89fc:	01 90       	ld	r0, Z+
    89fe:	00 20       	and	r0, r0
    8a00:	e9 f7       	brne	.-6      	; 0x89fc <vsnprintf_P+0x36>
    8a02:	cf 01       	movw	r24, r30
    8a04:	01 97       	sbiw	r24, 0x01	; 1
    8a06:	8e 19       	sub	r24, r14
    8a08:	9f 09       	sbc	r25, r15
    8a0a:	28 96       	adiw	r28, 0x08	; 8
    8a0c:	e6 e0       	ldi	r30, 0x06	; 6
    8a0e:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00008a12 <snprintf_P>:
    8a12:	a0 e0       	ldi	r26, 0x00	; 0
    8a14:	b0 e0       	ldi	r27, 0x00	; 0
    8a16:	ef e0       	ldi	r30, 0x0F	; 15
    8a18:	f5 e4       	ldi	r31, 0x45	; 69
    8a1a:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    8a1e:	8e 01       	movw	r16, r28
    8a20:	02 5f       	subi	r16, 0xF2	; 242
    8a22:	1f 4f       	sbci	r17, 0xFF	; 255
    8a24:	2b 85       	ldd	r18, Y+11	; 0x0b
    8a26:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a28:	4d 85       	ldd	r20, Y+13	; 0x0d
    8a2a:	69 85       	ldd	r22, Y+9	; 0x09
    8a2c:	7a 85       	ldd	r23, Y+10	; 0x0a
    8a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    8a30:	98 85       	ldd	r25, Y+8	; 0x08
    8a32:	c9 df       	rcall	.-110    	; 0x89c6 <vsnprintf_P>
    8a34:	e4 e0       	ldi	r30, 0x04	; 4
    8a36:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

00008a3a <sprintf_P>:
    8a3a:	a0 e0       	ldi	r26, 0x00	; 0
    8a3c:	b0 e0       	ldi	r27, 0x00	; 0
    8a3e:	e3 e2       	ldi	r30, 0x23	; 35
    8a40:	f5 e4       	ldi	r31, 0x45	; 69
    8a42:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    8a46:	8e 01       	movw	r16, r28
    8a48:	04 5f       	subi	r16, 0xF4	; 244
    8a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a4c:	29 85       	ldd	r18, Y+9	; 0x09
    8a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a50:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a52:	60 e0       	ldi	r22, 0x00	; 0
    8a54:	74 e0       	ldi	r23, 0x04	; 4
    8a56:	8f 81       	ldd	r24, Y+7	; 0x07
    8a58:	98 85       	ldd	r25, Y+8	; 0x08
    8a5a:	b5 df       	rcall	.-150    	; 0x89c6 <vsnprintf_P>
    8a5c:	e4 e0       	ldi	r30, 0x04	; 4
    8a5e:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

00008a62 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8a62:	a8 e0       	ldi	r26, 0x08	; 8
    8a64:	b0 e0       	ldi	r27, 0x00	; 0
    8a66:	e7 e3       	ldi	r30, 0x37	; 55
    8a68:	f5 e4       	ldi	r31, 0x45	; 69
    8a6a:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    8a6e:	9e 01       	movw	r18, r28
    8a70:	23 5f       	subi	r18, 0xF3	; 243
    8a72:	3f 4f       	sbci	r19, 0xFF	; 255
    8a74:	f9 01       	movw	r30, r18
    8a76:	41 91       	ld	r20, Z+
    8a78:	51 91       	ld	r21, Z+
    8a7a:	61 91       	ld	r22, Z+
    8a7c:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a7e:	89 e0       	ldi	r24, 0x09	; 9
    8a80:	9d e3       	ldi	r25, 0x3D	; 61
    8a82:	9a 83       	std	Y+2, r25	; 0x02
    8a84:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a86:	18 86       	std	Y+8, r1	; 0x08
    8a88:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a8a:	ce 01       	movw	r24, r28
    8a8c:	01 96       	adiw	r24, 0x01	; 1
    8a8e:	81 db       	rcall	.-2302   	; 0x8192 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a90:	8f 81       	ldd	r24, Y+7	; 0x07
    8a92:	98 85       	ldd	r25, Y+8	; 0x08
    8a94:	28 96       	adiw	r28, 0x08	; 8
    8a96:	e2 e0       	ldi	r30, 0x02	; 2
    8a98:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00008a9c <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a9c:	9c 01       	movw	r18, r24
    8a9e:	20 53       	subi	r18, 0x30	; 48
    8aa0:	31 09       	sbc	r19, r1
    8aa2:	2a 30       	cpi	r18, 0x0A	; 10
    8aa4:	31 05       	cpc	r19, r1
    8aa6:	10 f4       	brcc	.+4      	; 0x8aac <atodigit+0x10>
    8aa8:	c9 01       	movw	r24, r18
    8aaa:	10 c0       	rjmp	.+32     	; 0x8acc <atodigit+0x30>
    8aac:	9c 01       	movw	r18, r24
    8aae:	21 54       	subi	r18, 0x41	; 65
    8ab0:	31 09       	sbc	r19, r1
    8ab2:	26 30       	cpi	r18, 0x06	; 6
    8ab4:	31 05       	cpc	r19, r1
    8ab6:	10 f4       	brcc	.+4      	; 0x8abc <atodigit+0x20>
    8ab8:	c7 97       	sbiw	r24, 0x37	; 55
    8aba:	08 c0       	rjmp	.+16     	; 0x8acc <atodigit+0x30>
    8abc:	9c 01       	movw	r18, r24
    8abe:	21 56       	subi	r18, 0x61	; 97
    8ac0:	31 09       	sbc	r19, r1
    8ac2:	26 30       	cpi	r18, 0x06	; 6
    8ac4:	31 05       	cpc	r19, r1
    8ac6:	28 f4       	brcc	.+10     	; 0x8ad2 <atodigit+0x36>
    8ac8:	87 55       	subi	r24, 0x57	; 87
    8aca:	91 09       	sbc	r25, r1
    8acc:	86 17       	cp	r24, r22
    8ace:	97 07       	cpc	r25, r23
    8ad0:	14 f0       	brlt	.+4      	; 0x8ad6 <atodigit+0x3a>
    8ad2:	8f ef       	ldi	r24, 0xFF	; 255
    8ad4:	9f ef       	ldi	r25, 0xFF	; 255
    8ad6:	08 95       	ret

00008ad8 <strtol>:
    8ad8:	a0 e0       	ldi	r26, 0x00	; 0
    8ada:	b0 e0       	ldi	r27, 0x00	; 0
    8adc:	e2 e7       	ldi	r30, 0x72	; 114
    8ade:	f5 e4       	ldi	r31, 0x45	; 69
    8ae0:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    8ae4:	2b 01       	movw	r4, r22
    8ae6:	8a 01       	movw	r16, r20
    8ae8:	ec 01       	movw	r28, r24
    8aea:	28 81       	ld	r18, Y
    8aec:	01 96       	adiw	r24, 0x01	; 1
    8aee:	20 32       	cpi	r18, 0x20	; 32
    8af0:	d9 f3       	breq	.-10     	; 0x8ae8 <strtol+0x10>
    8af2:	29 30       	cpi	r18, 0x09	; 9
    8af4:	c9 f3       	breq	.-14     	; 0x8ae8 <strtol+0x10>
    8af6:	2d 32       	cpi	r18, 0x2D	; 45
    8af8:	29 f4       	brne	.+10     	; 0x8b04 <strtol+0x2c>
    8afa:	ec 01       	movw	r28, r24
    8afc:	66 24       	eor	r6, r6
    8afe:	63 94       	inc	r6
    8b00:	71 2c       	mov	r7, r1
    8b02:	05 c0       	rjmp	.+10     	; 0x8b0e <strtol+0x36>
    8b04:	2b 32       	cpi	r18, 0x2B	; 43
    8b06:	09 f4       	brne	.+2      	; 0x8b0a <strtol+0x32>
    8b08:	ec 01       	movw	r28, r24
    8b0a:	61 2c       	mov	r6, r1
    8b0c:	71 2c       	mov	r7, r1
    8b0e:	9e 01       	movw	r18, r28
    8b10:	2f 5f       	subi	r18, 0xFF	; 255
    8b12:	3f 4f       	sbci	r19, 0xFF	; 255
    8b14:	88 81       	ld	r24, Y
    8b16:	80 33       	cpi	r24, 0x30	; 48
    8b18:	11 f4       	brne	.+4      	; 0x8b1e <strtol+0x46>
    8b1a:	e9 01       	movw	r28, r18
    8b1c:	f8 cf       	rjmp	.-16     	; 0x8b0e <strtol+0x36>
    8b1e:	c1 2c       	mov	r12, r1
    8b20:	d1 2c       	mov	r13, r1
    8b22:	76 01       	movw	r14, r12
    8b24:	48 01       	movw	r8, r16
    8b26:	01 2e       	mov	r0, r17
    8b28:	00 0c       	add	r0, r0
    8b2a:	aa 08       	sbc	r10, r10
    8b2c:	bb 08       	sbc	r11, r11
    8b2e:	3c 2e       	mov	r3, r28
    8b30:	2d 2e       	mov	r2, r29
    8b32:	89 91       	ld	r24, Y+
    8b34:	88 23       	and	r24, r24
    8b36:	31 f0       	breq	.+12     	; 0x8b44 <strtol+0x6c>
    8b38:	b8 01       	movw	r22, r16
    8b3a:	90 e0       	ldi	r25, 0x00	; 0
    8b3c:	af df       	rcall	.-162    	; 0x8a9c <atodigit>
    8b3e:	fc 01       	movw	r30, r24
    8b40:	97 ff       	sbrs	r25, 7
    8b42:	0c c0       	rjmp	.+24     	; 0x8b5c <strtol+0x84>
    8b44:	61 14       	cp	r6, r1
    8b46:	71 04       	cpc	r7, r1
    8b48:	c1 f0       	breq	.+48     	; 0x8b7a <strtol+0xa2>
    8b4a:	f0 94       	com	r15
    8b4c:	e0 94       	com	r14
    8b4e:	d0 94       	com	r13
    8b50:	c0 94       	com	r12
    8b52:	c1 1c       	adc	r12, r1
    8b54:	d1 1c       	adc	r13, r1
    8b56:	e1 1c       	adc	r14, r1
    8b58:	f1 1c       	adc	r15, r1
    8b5a:	0f c0       	rjmp	.+30     	; 0x8b7a <strtol+0xa2>
    8b5c:	a5 01       	movw	r20, r10
    8b5e:	94 01       	movw	r18, r8
    8b60:	c7 01       	movw	r24, r14
    8b62:	b6 01       	movw	r22, r12
    8b64:	0e 94 8c e8 	call	0x1d118	; 0x1d118 <__mulsi3>
    8b68:	6f 01       	movw	r12, r30
    8b6a:	ff 0f       	add	r31, r31
    8b6c:	ee 08       	sbc	r14, r14
    8b6e:	ff 08       	sbc	r15, r15
    8b70:	c6 0e       	add	r12, r22
    8b72:	d7 1e       	adc	r13, r23
    8b74:	e8 1e       	adc	r14, r24
    8b76:	f9 1e       	adc	r15, r25
    8b78:	da cf       	rjmp	.-76     	; 0x8b2e <strtol+0x56>
    8b7a:	41 14       	cp	r4, r1
    8b7c:	51 04       	cpc	r5, r1
    8b7e:	19 f0       	breq	.+6      	; 0x8b86 <strtol+0xae>
    8b80:	f2 01       	movw	r30, r4
    8b82:	30 82       	st	Z, r3
    8b84:	21 82       	std	Z+1, r2	; 0x01
    8b86:	c7 01       	movw	r24, r14
    8b88:	b6 01       	movw	r22, r12
    8b8a:	cd b7       	in	r28, 0x3d	; 61
    8b8c:	de b7       	in	r29, 0x3e	; 62
    8b8e:	e2 e1       	ldi	r30, 0x12	; 18
    8b90:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

00008b94 <atoh>:
    8b94:	40 e1       	ldi	r20, 0x10	; 16
    8b96:	50 e0       	ldi	r21, 0x00	; 0
    8b98:	60 e0       	ldi	r22, 0x00	; 0
    8b9a:	70 e0       	ldi	r23, 0x00	; 0
    8b9c:	9d cf       	rjmp	.-198    	; 0x8ad8 <strtol>
    8b9e:	08 95       	ret

00008ba0 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ba0:	4a e0       	ldi	r20, 0x0A	; 10
    8ba2:	50 e0       	ldi	r21, 0x00	; 0
    8ba4:	60 e0       	ldi	r22, 0x00	; 0
    8ba6:	70 e0       	ldi	r23, 0x00	; 0
    8ba8:	97 df       	rcall	.-210    	; 0x8ad8 <strtol>
    return((int)num);
}
    8baa:	cb 01       	movw	r24, r22
    8bac:	08 95       	ret

00008bae <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8bae:	4a e0       	ldi	r20, 0x0A	; 10
    8bb0:	50 e0       	ldi	r21, 0x00	; 0
    8bb2:	60 e0       	ldi	r22, 0x00	; 0
    8bb4:	70 e0       	ldi	r23, 0x00	; 0
    8bb6:	90 cf       	rjmp	.-224    	; 0x8ad8 <strtol>
    return(num);
}
    8bb8:	08 95       	ret

00008bba <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8bba:	fc 01       	movw	r30, r24
    8bbc:	62 81       	ldd	r22, Z+2	; 0x02
    8bbe:	73 81       	ldd	r23, Z+3	; 0x03
    8bc0:	cb 01       	movw	r24, r22
    8bc2:	a0 e0       	ldi	r26, 0x00	; 0
    8bc4:	b0 e0       	ldi	r27, 0x00	; 0
    8bc6:	ba 2f       	mov	r27, r26
    8bc8:	a9 2f       	mov	r26, r25
    8bca:	98 2f       	mov	r25, r24
    8bcc:	88 27       	eor	r24, r24
    8bce:	21 81       	ldd	r18, Z+1	; 0x01
    8bd0:	82 2b       	or	r24, r18
    8bd2:	ba 2f       	mov	r27, r26
    8bd4:	a9 2f       	mov	r26, r25
    8bd6:	98 2f       	mov	r25, r24
    8bd8:	88 27       	eor	r24, r24
    8bda:	20 81       	ld	r18, Z
    8bdc:	bc 01       	movw	r22, r24
    8bde:	cd 01       	movw	r24, r26
    8be0:	62 2b       	or	r22, r18
    8be2:	08 95       	ret

00008be4 <st_dword>:
    8be4:	fc 01       	movw	r30, r24
    8be6:	40 83       	st	Z, r20
    8be8:	51 83       	std	Z+1, r21	; 0x01
    8bea:	62 83       	std	Z+2, r22	; 0x02
    8bec:	73 83       	std	Z+3, r23	; 0x03
    8bee:	08 95       	ret

00008bf0 <mem_set>:
    8bf0:	48 0f       	add	r20, r24
    8bf2:	59 1f       	adc	r21, r25
    8bf4:	fc 01       	movw	r30, r24
    8bf6:	61 93       	st	Z+, r22
    8bf8:	cf 01       	movw	r24, r30
    8bfa:	e4 17       	cp	r30, r20
    8bfc:	f5 07       	cpc	r31, r21
    8bfe:	d1 f7       	brne	.-12     	; 0x8bf4 <mem_set+0x4>
    8c00:	08 95       	ret

00008c02 <clust2sect>:
    8c02:	0f 93       	push	r16
    8c04:	1f 93       	push	r17
    8c06:	fc 01       	movw	r30, r24
    8c08:	9a 01       	movw	r18, r20
    8c0a:	ab 01       	movw	r20, r22
    8c0c:	22 50       	subi	r18, 0x02	; 2
    8c0e:	31 09       	sbc	r19, r1
    8c10:	41 09       	sbc	r20, r1
    8c12:	51 09       	sbc	r21, r1
    8c14:	81 8d       	ldd	r24, Z+25	; 0x19
    8c16:	92 8d       	ldd	r25, Z+26	; 0x1a
    8c18:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8c1a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8c1c:	02 97       	sbiw	r24, 0x02	; 2
    8c1e:	a1 09       	sbc	r26, r1
    8c20:	b1 09       	sbc	r27, r1
    8c22:	28 17       	cp	r18, r24
    8c24:	39 07       	cpc	r19, r25
    8c26:	4a 07       	cpc	r20, r26
    8c28:	5b 07       	cpc	r21, r27
    8c2a:	68 f4       	brcc	.+26     	; 0x8c46 <clust2sect+0x44>
    8c2c:	a1 85       	ldd	r26, Z+9	; 0x09
    8c2e:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c30:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    8c34:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c36:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c38:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c3a:	30 a9       	ldd	r19, Z+48	; 0x30
    8c3c:	60 0f       	add	r22, r16
    8c3e:	71 1f       	adc	r23, r17
    8c40:	82 1f       	adc	r24, r18
    8c42:	93 1f       	adc	r25, r19
    8c44:	03 c0       	rjmp	.+6      	; 0x8c4c <clust2sect+0x4a>
    8c46:	60 e0       	ldi	r22, 0x00	; 0
    8c48:	70 e0       	ldi	r23, 0x00	; 0
    8c4a:	cb 01       	movw	r24, r22
    8c4c:	1f 91       	pop	r17
    8c4e:	0f 91       	pop	r16
    8c50:	08 95       	ret

00008c52 <clmt_clust>:
    8c52:	cf 93       	push	r28
    8c54:	df 93       	push	r29
    8c56:	fc 01       	movw	r30, r24
    8c58:	c2 a1       	ldd	r28, Z+34	; 0x22
    8c5a:	d3 a1       	ldd	r29, Z+35	; 0x23
    8c5c:	24 96       	adiw	r28, 0x04	; 4
    8c5e:	cb 01       	movw	r24, r22
    8c60:	ba 01       	movw	r22, r20
    8c62:	29 e0       	ldi	r18, 0x09	; 9
    8c64:	96 95       	lsr	r25
    8c66:	87 95       	ror	r24
    8c68:	77 95       	ror	r23
    8c6a:	67 95       	ror	r22
    8c6c:	2a 95       	dec	r18
    8c6e:	d1 f7       	brne	.-12     	; 0x8c64 <clmt_clust+0x12>
    8c70:	01 90       	ld	r0, Z+
    8c72:	f0 81       	ld	r31, Z
    8c74:	e0 2d       	mov	r30, r0
    8c76:	21 85       	ldd	r18, Z+9	; 0x09
    8c78:	32 85       	ldd	r19, Z+10	; 0x0a
    8c7a:	40 e0       	ldi	r20, 0x00	; 0
    8c7c:	50 e0       	ldi	r21, 0x00	; 0
    8c7e:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    8c82:	88 81       	ld	r24, Y
    8c84:	99 81       	ldd	r25, Y+1	; 0x01
    8c86:	aa 81       	ldd	r26, Y+2	; 0x02
    8c88:	bb 81       	ldd	r27, Y+3	; 0x03
    8c8a:	00 97       	sbiw	r24, 0x00	; 0
    8c8c:	a1 05       	cpc	r26, r1
    8c8e:	b1 05       	cpc	r27, r1
    8c90:	b1 f0       	breq	.+44     	; 0x8cbe <clmt_clust+0x6c>
    8c92:	28 17       	cp	r18, r24
    8c94:	39 07       	cpc	r19, r25
    8c96:	4a 07       	cpc	r20, r26
    8c98:	5b 07       	cpc	r21, r27
    8c9a:	30 f0       	brcs	.+12     	; 0x8ca8 <clmt_clust+0x56>
    8c9c:	28 1b       	sub	r18, r24
    8c9e:	39 0b       	sbc	r19, r25
    8ca0:	4a 0b       	sbc	r20, r26
    8ca2:	5b 0b       	sbc	r21, r27
    8ca4:	28 96       	adiw	r28, 0x08	; 8
    8ca6:	ed cf       	rjmp	.-38     	; 0x8c82 <clmt_clust+0x30>
    8ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    8caa:	9d 81       	ldd	r25, Y+5	; 0x05
    8cac:	ae 81       	ldd	r26, Y+6	; 0x06
    8cae:	bf 81       	ldd	r27, Y+7	; 0x07
    8cb0:	bc 01       	movw	r22, r24
    8cb2:	cd 01       	movw	r24, r26
    8cb4:	62 0f       	add	r22, r18
    8cb6:	73 1f       	adc	r23, r19
    8cb8:	84 1f       	adc	r24, r20
    8cba:	95 1f       	adc	r25, r21
    8cbc:	03 c0       	rjmp	.+6      	; 0x8cc4 <clmt_clust+0x72>
    8cbe:	60 e0       	ldi	r22, 0x00	; 0
    8cc0:	70 e0       	ldi	r23, 0x00	; 0
    8cc2:	cb 01       	movw	r24, r22
    8cc4:	df 91       	pop	r29
    8cc6:	cf 91       	pop	r28
    8cc8:	08 95       	ret

00008cca <sum_sfn>:
    8cca:	fc 01       	movw	r30, r24
    8ccc:	9c 01       	movw	r18, r24
    8cce:	25 5f       	subi	r18, 0xF5	; 245
    8cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    8cd2:	80 e0       	ldi	r24, 0x00	; 0
    8cd4:	98 2f       	mov	r25, r24
    8cd6:	90 fb       	bst	r25, 0
    8cd8:	97 95       	ror	r25
    8cda:	97 f9       	bld	r25, 7
    8cdc:	81 91       	ld	r24, Z+
    8cde:	89 0f       	add	r24, r25
    8ce0:	e2 17       	cp	r30, r18
    8ce2:	f3 07       	cpc	r31, r19
    8ce4:	b9 f7       	brne	.-18     	; 0x8cd4 <sum_sfn+0xa>
    8ce6:	08 95       	ret

00008ce8 <get_ldnumber>:
    8ce8:	dc 01       	movw	r26, r24
    8cea:	ed 91       	ld	r30, X+
    8cec:	fc 91       	ld	r31, X
    8cee:	30 97       	sbiw	r30, 0x00	; 0
    8cf0:	c1 f0       	breq	.+48     	; 0x8d22 <get_ldnumber+0x3a>
    8cf2:	df 01       	movw	r26, r30
    8cf4:	9d 01       	movw	r18, r26
    8cf6:	4d 91       	ld	r20, X+
    8cf8:	40 32       	cpi	r20, 0x20	; 32
    8cfa:	80 f0       	brcs	.+32     	; 0x8d1c <get_ldnumber+0x34>
    8cfc:	4a 33       	cpi	r20, 0x3A	; 58
    8cfe:	d1 f7       	brne	.-12     	; 0x8cf4 <get_ldnumber+0xc>
    8d00:	af 01       	movw	r20, r30
    8d02:	4f 5f       	subi	r20, 0xFF	; 255
    8d04:	5f 4f       	sbci	r21, 0xFF	; 255
    8d06:	24 17       	cp	r18, r20
    8d08:	35 07       	cpc	r19, r21
    8d0a:	59 f4       	brne	.+22     	; 0x8d22 <get_ldnumber+0x3a>
    8d0c:	40 81       	ld	r20, Z
    8d0e:	40 33       	cpi	r20, 0x30	; 48
    8d10:	41 f4       	brne	.+16     	; 0x8d22 <get_ldnumber+0x3a>
    8d12:	2f 5f       	subi	r18, 0xFF	; 255
    8d14:	3f 4f       	sbci	r19, 0xFF	; 255
    8d16:	fc 01       	movw	r30, r24
    8d18:	31 83       	std	Z+1, r19	; 0x01
    8d1a:	20 83       	st	Z, r18
    8d1c:	80 e0       	ldi	r24, 0x00	; 0
    8d1e:	90 e0       	ldi	r25, 0x00	; 0
    8d20:	08 95       	ret
    8d22:	8f ef       	ldi	r24, 0xFF	; 255
    8d24:	9f ef       	ldi	r25, 0xFF	; 255
    8d26:	08 95       	ret

00008d28 <validate>:
    8d28:	0f 93       	push	r16
    8d2a:	1f 93       	push	r17
    8d2c:	cf 93       	push	r28
    8d2e:	df 93       	push	r29
    8d30:	ec 01       	movw	r28, r24
    8d32:	8b 01       	movw	r16, r22
    8d34:	89 2b       	or	r24, r25
    8d36:	31 f4       	brne	.+12     	; 0x8d44 <validate+0x1c>
    8d38:	f8 01       	movw	r30, r16
    8d3a:	11 82       	std	Z+1, r1	; 0x01
    8d3c:	10 82       	st	Z, r1
    8d3e:	89 e0       	ldi	r24, 0x09	; 9
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	1a c0       	rjmp	.+52     	; 0x8d78 <validate+0x50>
    8d44:	e8 81       	ld	r30, Y
    8d46:	f9 81       	ldd	r31, Y+1	; 0x01
    8d48:	30 97       	sbiw	r30, 0x00	; 0
    8d4a:	b1 f3       	breq	.-20     	; 0x8d38 <validate+0x10>
    8d4c:	80 81       	ld	r24, Z
    8d4e:	88 23       	and	r24, r24
    8d50:	99 f3       	breq	.-26     	; 0x8d38 <validate+0x10>
    8d52:	25 81       	ldd	r18, Z+5	; 0x05
    8d54:	36 81       	ldd	r19, Z+6	; 0x06
    8d56:	8a 81       	ldd	r24, Y+2	; 0x02
    8d58:	9b 81       	ldd	r25, Y+3	; 0x03
    8d5a:	28 17       	cp	r18, r24
    8d5c:	39 07       	cpc	r19, r25
    8d5e:	61 f7       	brne	.-40     	; 0x8d38 <validate+0x10>
    8d60:	81 81       	ldd	r24, Z+1	; 0x01
    8d62:	0e 94 03 6d 	call	0xda06	; 0xda06 <disk_status>
    8d66:	80 fd       	sbrc	r24, 0
    8d68:	e7 cf       	rjmp	.-50     	; 0x8d38 <validate+0x10>
    8d6a:	88 81       	ld	r24, Y
    8d6c:	99 81       	ldd	r25, Y+1	; 0x01
    8d6e:	f8 01       	movw	r30, r16
    8d70:	91 83       	std	Z+1, r25	; 0x01
    8d72:	80 83       	st	Z, r24
    8d74:	80 e0       	ldi	r24, 0x00	; 0
    8d76:	90 e0       	ldi	r25, 0x00	; 0
    8d78:	df 91       	pop	r29
    8d7a:	cf 91       	pop	r28
    8d7c:	1f 91       	pop	r17
    8d7e:	0f 91       	pop	r16
    8d80:	08 95       	ret

00008d82 <mem_cpy.part.0>:
    8d82:	fb 01       	movw	r30, r22
    8d84:	48 0f       	add	r20, r24
    8d86:	59 1f       	adc	r21, r25
    8d88:	21 91       	ld	r18, Z+
    8d8a:	dc 01       	movw	r26, r24
    8d8c:	2d 93       	st	X+, r18
    8d8e:	cd 01       	movw	r24, r26
    8d90:	a4 17       	cp	r26, r20
    8d92:	b5 07       	cpc	r27, r21
    8d94:	c9 f7       	brne	.-14     	; 0x8d88 <mem_cpy.part.0+0x6>
    8d96:	08 95       	ret

00008d98 <ld_clust.isra.1>:
    8d98:	fb 01       	movw	r30, r22
    8d9a:	42 8d       	ldd	r20, Z+26	; 0x1a
    8d9c:	53 8d       	ldd	r21, Z+27	; 0x1b
    8d9e:	60 e0       	ldi	r22, 0x00	; 0
    8da0:	70 e0       	ldi	r23, 0x00	; 0
    8da2:	83 30       	cpi	r24, 0x03	; 3
    8da4:	59 f4       	brne	.+22     	; 0x8dbc <ld_clust.isra.1+0x24>
    8da6:	84 89       	ldd	r24, Z+20	; 0x14
    8da8:	95 89       	ldd	r25, Z+21	; 0x15
    8daa:	a0 e0       	ldi	r26, 0x00	; 0
    8dac:	b0 e0       	ldi	r27, 0x00	; 0
    8dae:	dc 01       	movw	r26, r24
    8db0:	99 27       	eor	r25, r25
    8db2:	88 27       	eor	r24, r24
    8db4:	48 2b       	or	r20, r24
    8db6:	59 2b       	or	r21, r25
    8db8:	6a 2b       	or	r22, r26
    8dba:	7b 2b       	or	r23, r27
    8dbc:	cb 01       	movw	r24, r22
    8dbe:	ba 01       	movw	r22, r20
    8dc0:	08 95       	ret

00008dc2 <st_clust.isra.2>:
    8dc2:	fb 01       	movw	r30, r22
    8dc4:	22 8f       	std	Z+26, r18	; 0x1a
    8dc6:	33 8f       	std	Z+27, r19	; 0x1b
    8dc8:	dc 01       	movw	r26, r24
    8dca:	8c 91       	ld	r24, X
    8dcc:	83 30       	cpi	r24, 0x03	; 3
    8dce:	29 f4       	brne	.+10     	; 0x8dda <st_clust.isra.2+0x18>
    8dd0:	ca 01       	movw	r24, r20
    8dd2:	aa 27       	eor	r26, r26
    8dd4:	bb 27       	eor	r27, r27
    8dd6:	84 8b       	std	Z+20, r24	; 0x14
    8dd8:	95 8b       	std	Z+21, r25	; 0x15
    8dda:	08 95       	ret

00008ddc <sync_window.part.3>:
    8ddc:	a0 e0       	ldi	r26, 0x00	; 0
    8dde:	b0 e0       	ldi	r27, 0x00	; 0
    8de0:	e4 ef       	ldi	r30, 0xF4	; 244
    8de2:	f6 e4       	ldi	r31, 0x46	; 70
    8de4:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
    8de8:	ec 01       	movw	r28, r24
    8dea:	89 a8       	ldd	r8, Y+49	; 0x31
    8dec:	9a a8       	ldd	r9, Y+50	; 0x32
    8dee:	ab a8       	ldd	r10, Y+51	; 0x33
    8df0:	bc a8       	ldd	r11, Y+52	; 0x34
    8df2:	6c 01       	movw	r12, r24
    8df4:	85 e3       	ldi	r24, 0x35	; 53
    8df6:	c8 0e       	add	r12, r24
    8df8:	d1 1c       	adc	r13, r1
    8dfa:	01 e0       	ldi	r16, 0x01	; 1
    8dfc:	10 e0       	ldi	r17, 0x00	; 0
    8dfe:	a5 01       	movw	r20, r10
    8e00:	94 01       	movw	r18, r8
    8e02:	b6 01       	movw	r22, r12
    8e04:	89 81       	ldd	r24, Y+1	; 0x01
    8e06:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    8e0a:	89 2b       	or	r24, r25
    8e0c:	89 f5       	brne	.+98     	; 0x8e70 <sync_window.part.3+0x94>
    8e0e:	1b 82       	std	Y+3, r1	; 0x03
    8e10:	8d a1       	ldd	r24, Y+37	; 0x25
    8e12:	9e a1       	ldd	r25, Y+38	; 0x26
    8e14:	af a1       	ldd	r26, Y+39	; 0x27
    8e16:	b8 a5       	ldd	r27, Y+40	; 0x28
    8e18:	b5 01       	movw	r22, r10
    8e1a:	a4 01       	movw	r20, r8
    8e1c:	48 1b       	sub	r20, r24
    8e1e:	59 0b       	sbc	r21, r25
    8e20:	6a 0b       	sbc	r22, r26
    8e22:	7b 0b       	sbc	r23, r27
    8e24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8e26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8e28:	af 8d       	ldd	r26, Y+31	; 0x1f
    8e2a:	b8 a1       	ldd	r27, Y+32	; 0x20
    8e2c:	48 17       	cp	r20, r24
    8e2e:	59 07       	cpc	r21, r25
    8e30:	6a 07       	cpc	r22, r26
    8e32:	7b 07       	cpc	r23, r27
    8e34:	18 f0       	brcs	.+6      	; 0x8e3c <sync_window.part.3+0x60>
    8e36:	80 e0       	ldi	r24, 0x00	; 0
    8e38:	90 e0       	ldi	r25, 0x00	; 0
    8e3a:	1c c0       	rjmp	.+56     	; 0x8e74 <sync_window.part.3+0x98>
    8e3c:	ea 80       	ldd	r14, Y+2	; 0x02
    8e3e:	f1 2c       	mov	r15, r1
    8e40:	82 e0       	ldi	r24, 0x02	; 2
    8e42:	e8 16       	cp	r14, r24
    8e44:	f1 04       	cpc	r15, r1
    8e46:	b8 f3       	brcs	.-18     	; 0x8e36 <sync_window.part.3+0x5a>
    8e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8e4c:	af 8d       	ldd	r26, Y+31	; 0x1f
    8e4e:	b8 a1       	ldd	r27, Y+32	; 0x20
    8e50:	88 0e       	add	r8, r24
    8e52:	99 1e       	adc	r9, r25
    8e54:	aa 1e       	adc	r10, r26
    8e56:	bb 1e       	adc	r11, r27
    8e58:	01 e0       	ldi	r16, 0x01	; 1
    8e5a:	10 e0       	ldi	r17, 0x00	; 0
    8e5c:	a5 01       	movw	r20, r10
    8e5e:	94 01       	movw	r18, r8
    8e60:	b6 01       	movw	r22, r12
    8e62:	89 81       	ldd	r24, Y+1	; 0x01
    8e64:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    8e68:	81 e0       	ldi	r24, 0x01	; 1
    8e6a:	e8 1a       	sub	r14, r24
    8e6c:	f1 08       	sbc	r15, r1
    8e6e:	e8 cf       	rjmp	.-48     	; 0x8e40 <sync_window.part.3+0x64>
    8e70:	81 e0       	ldi	r24, 0x01	; 1
    8e72:	90 e0       	ldi	r25, 0x00	; 0
    8e74:	cd b7       	in	r28, 0x3d	; 61
    8e76:	de b7       	in	r29, 0x3e	; 62
    8e78:	ec e0       	ldi	r30, 0x0C	; 12
    8e7a:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00008e7e <sync_window>:
    8e7e:	fc 01       	movw	r30, r24
    8e80:	23 81       	ldd	r18, Z+3	; 0x03
    8e82:	22 23       	and	r18, r18
    8e84:	11 f0       	breq	.+4      	; 0x8e8a <sync_window+0xc>
    8e86:	aa cf       	rjmp	.-172    	; 0x8ddc <sync_window.part.3>
    8e88:	08 95       	ret
    8e8a:	80 e0       	ldi	r24, 0x00	; 0
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	08 95       	ret

00008e90 <sync_fs>:
    8e90:	ef 92       	push	r14
    8e92:	ff 92       	push	r15
    8e94:	0f 93       	push	r16
    8e96:	1f 93       	push	r17
    8e98:	cf 93       	push	r28
    8e9a:	df 93       	push	r29
    8e9c:	ec 01       	movw	r28, r24
    8e9e:	ef df       	rcall	.-34     	; 0x8e7e <sync_window>
    8ea0:	00 97       	sbiw	r24, 0x00	; 0
    8ea2:	09 f0       	breq	.+2      	; 0x8ea6 <sync_fs+0x16>
    8ea4:	5c c0       	rjmp	.+184    	; 0x8f5e <sync_fs+0xce>
    8ea6:	88 81       	ld	r24, Y
    8ea8:	83 30       	cpi	r24, 0x03	; 3
    8eaa:	09 f0       	breq	.+2      	; 0x8eae <sync_fs+0x1e>
    8eac:	4b c0       	rjmp	.+150    	; 0x8f44 <sync_fs+0xb4>
    8eae:	8c 81       	ldd	r24, Y+4	; 0x04
    8eb0:	81 30       	cpi	r24, 0x01	; 1
    8eb2:	09 f0       	breq	.+2      	; 0x8eb6 <sync_fs+0x26>
    8eb4:	47 c0       	rjmp	.+142    	; 0x8f44 <sync_fs+0xb4>
    8eb6:	40 e0       	ldi	r20, 0x00	; 0
    8eb8:	52 e0       	ldi	r21, 0x02	; 2
    8eba:	60 e0       	ldi	r22, 0x00	; 0
    8ebc:	70 e0       	ldi	r23, 0x00	; 0
    8ebe:	7e 01       	movw	r14, r28
    8ec0:	85 e3       	ldi	r24, 0x35	; 53
    8ec2:	e8 0e       	add	r14, r24
    8ec4:	f1 1c       	adc	r15, r1
    8ec6:	c7 01       	movw	r24, r14
    8ec8:	93 de       	rcall	.-730    	; 0x8bf0 <mem_set>
    8eca:	85 e5       	ldi	r24, 0x55	; 85
    8ecc:	fe 01       	movw	r30, r28
    8ece:	ed 5c       	subi	r30, 0xCD	; 205
    8ed0:	fd 4f       	sbci	r31, 0xFD	; 253
    8ed2:	80 83       	st	Z, r24
    8ed4:	8a ea       	ldi	r24, 0xAA	; 170
    8ed6:	31 96       	adiw	r30, 0x01	; 1
    8ed8:	80 83       	st	Z, r24
    8eda:	82 e5       	ldi	r24, 0x52	; 82
    8edc:	8d ab       	std	Y+53, r24	; 0x35
    8ede:	8e ab       	std	Y+54, r24	; 0x36
    8ee0:	81 e6       	ldi	r24, 0x61	; 97
    8ee2:	8f ab       	std	Y+55, r24	; 0x37
    8ee4:	91 e4       	ldi	r25, 0x41	; 65
    8ee6:	98 af       	std	Y+56, r25	; 0x38
    8ee8:	22 e7       	ldi	r18, 0x72	; 114
    8eea:	7b 97       	sbiw	r30, 0x1b	; 27
    8eec:	20 83       	st	Z, r18
    8eee:	31 96       	adiw	r30, 0x01	; 1
    8ef0:	20 83       	st	Z, r18
    8ef2:	31 96       	adiw	r30, 0x01	; 1
    8ef4:	90 83       	st	Z, r25
    8ef6:	31 96       	adiw	r30, 0x01	; 1
    8ef8:	80 83       	st	Z, r24
    8efa:	49 89       	ldd	r20, Y+17	; 0x11
    8efc:	5a 89       	ldd	r21, Y+18	; 0x12
    8efe:	6b 89       	ldd	r22, Y+19	; 0x13
    8f00:	7c 89       	ldd	r23, Y+20	; 0x14
    8f02:	ce 01       	movw	r24, r28
    8f04:	83 5e       	subi	r24, 0xE3	; 227
    8f06:	9d 4f       	sbci	r25, 0xFD	; 253
    8f08:	6d de       	rcall	.-806    	; 0x8be4 <st_dword>
    8f0a:	4d 85       	ldd	r20, Y+13	; 0x0d
    8f0c:	5e 85       	ldd	r21, Y+14	; 0x0e
    8f0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    8f10:	78 89       	ldd	r23, Y+16	; 0x10
    8f12:	ce 01       	movw	r24, r28
    8f14:	8f 5d       	subi	r24, 0xDF	; 223
    8f16:	9d 4f       	sbci	r25, 0xFD	; 253
    8f18:	65 de       	rcall	.-822    	; 0x8be4 <st_dword>
    8f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    8f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    8f1e:	ab a1       	ldd	r26, Y+35	; 0x23
    8f20:	bc a1       	ldd	r27, Y+36	; 0x24
    8f22:	9c 01       	movw	r18, r24
    8f24:	ad 01       	movw	r20, r26
    8f26:	2f 5f       	subi	r18, 0xFF	; 255
    8f28:	3f 4f       	sbci	r19, 0xFF	; 255
    8f2a:	4f 4f       	sbci	r20, 0xFF	; 255
    8f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    8f2e:	29 ab       	std	Y+49, r18	; 0x31
    8f30:	3a ab       	std	Y+50, r19	; 0x32
    8f32:	4b ab       	std	Y+51, r20	; 0x33
    8f34:	5c ab       	std	Y+52, r21	; 0x34
    8f36:	01 e0       	ldi	r16, 0x01	; 1
    8f38:	10 e0       	ldi	r17, 0x00	; 0
    8f3a:	b7 01       	movw	r22, r14
    8f3c:	89 81       	ldd	r24, Y+1	; 0x01
    8f3e:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    8f42:	1c 82       	std	Y+4, r1	; 0x04
    8f44:	40 e0       	ldi	r20, 0x00	; 0
    8f46:	50 e0       	ldi	r21, 0x00	; 0
    8f48:	60 e0       	ldi	r22, 0x00	; 0
    8f4a:	89 81       	ldd	r24, Y+1	; 0x01
    8f4c:	0e 94 2f 6d 	call	0xda5e	; 0xda5e <disk_ioctl>
    8f50:	31 e0       	ldi	r19, 0x01	; 1
    8f52:	20 e0       	ldi	r18, 0x00	; 0
    8f54:	89 2b       	or	r24, r25
    8f56:	09 f4       	brne	.+2      	; 0x8f5a <sync_fs+0xca>
    8f58:	30 e0       	ldi	r19, 0x00	; 0
    8f5a:	83 2f       	mov	r24, r19
    8f5c:	92 2f       	mov	r25, r18
    8f5e:	cd b7       	in	r28, 0x3d	; 61
    8f60:	de b7       	in	r29, 0x3e	; 62
    8f62:	e6 e0       	ldi	r30, 0x06	; 6
    8f64:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00008f68 <move_window>:
    8f68:	8f 92       	push	r8
    8f6a:	9f 92       	push	r9
    8f6c:	af 92       	push	r10
    8f6e:	bf 92       	push	r11
    8f70:	ef 92       	push	r14
    8f72:	ff 92       	push	r15
    8f74:	0f 93       	push	r16
    8f76:	1f 93       	push	r17
    8f78:	cf 93       	push	r28
    8f7a:	df 93       	push	r29
    8f7c:	ec 01       	movw	r28, r24
    8f7e:	4a 01       	movw	r8, r20
    8f80:	5b 01       	movw	r10, r22
    8f82:	89 a9       	ldd	r24, Y+49	; 0x31
    8f84:	9a a9       	ldd	r25, Y+50	; 0x32
    8f86:	ab a9       	ldd	r26, Y+51	; 0x33
    8f88:	bc a9       	ldd	r27, Y+52	; 0x34
    8f8a:	84 17       	cp	r24, r20
    8f8c:	95 07       	cpc	r25, r21
    8f8e:	a6 07       	cpc	r26, r22
    8f90:	b7 07       	cpc	r27, r23
    8f92:	e9 f0       	breq	.+58     	; 0x8fce <move_window+0x66>
    8f94:	ce 01       	movw	r24, r28
    8f96:	73 df       	rcall	.-282    	; 0x8e7e <sync_window>
    8f98:	7c 01       	movw	r14, r24
    8f9a:	89 2b       	or	r24, r25
    8f9c:	d1 f4       	brne	.+52     	; 0x8fd2 <move_window+0x6a>
    8f9e:	01 e0       	ldi	r16, 0x01	; 1
    8fa0:	10 e0       	ldi	r17, 0x00	; 0
    8fa2:	a5 01       	movw	r20, r10
    8fa4:	94 01       	movw	r18, r8
    8fa6:	be 01       	movw	r22, r28
    8fa8:	6b 5c       	subi	r22, 0xCB	; 203
    8faa:	7f 4f       	sbci	r23, 0xFF	; 255
    8fac:	89 81       	ldd	r24, Y+1	; 0x01
    8fae:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    8fb2:	89 2b       	or	r24, r25
    8fb4:	39 f0       	breq	.+14     	; 0x8fc4 <move_window+0x5c>
    8fb6:	ee 24       	eor	r14, r14
    8fb8:	e3 94       	inc	r14
    8fba:	f1 2c       	mov	r15, r1
    8fbc:	88 24       	eor	r8, r8
    8fbe:	8a 94       	dec	r8
    8fc0:	98 2c       	mov	r9, r8
    8fc2:	54 01       	movw	r10, r8
    8fc4:	89 aa       	std	Y+49, r8	; 0x31
    8fc6:	9a aa       	std	Y+50, r9	; 0x32
    8fc8:	ab aa       	std	Y+51, r10	; 0x33
    8fca:	bc aa       	std	Y+52, r11	; 0x34
    8fcc:	02 c0       	rjmp	.+4      	; 0x8fd2 <move_window+0x6a>
    8fce:	e1 2c       	mov	r14, r1
    8fd0:	f1 2c       	mov	r15, r1
    8fd2:	c7 01       	movw	r24, r14
    8fd4:	df 91       	pop	r29
    8fd6:	cf 91       	pop	r28
    8fd8:	1f 91       	pop	r17
    8fda:	0f 91       	pop	r16
    8fdc:	ff 90       	pop	r15
    8fde:	ef 90       	pop	r14
    8fe0:	bf 90       	pop	r11
    8fe2:	af 90       	pop	r10
    8fe4:	9f 90       	pop	r9
    8fe6:	8f 90       	pop	r8
    8fe8:	08 95       	ret

00008fea <check_fs>:
    8fea:	cf 93       	push	r28
    8fec:	df 93       	push	r29
    8fee:	ec 01       	movw	r28, r24
    8ff0:	1b 82       	std	Y+3, r1	; 0x03
    8ff2:	8f ef       	ldi	r24, 0xFF	; 255
    8ff4:	9f ef       	ldi	r25, 0xFF	; 255
    8ff6:	dc 01       	movw	r26, r24
    8ff8:	89 ab       	std	Y+49, r24	; 0x31
    8ffa:	9a ab       	std	Y+50, r25	; 0x32
    8ffc:	ab ab       	std	Y+51, r26	; 0x33
    8ffe:	bc ab       	std	Y+52, r27	; 0x34
    9000:	ce 01       	movw	r24, r28
    9002:	b2 df       	rcall	.-156    	; 0x8f68 <move_window>
    9004:	89 2b       	or	r24, r25
    9006:	31 f5       	brne	.+76     	; 0x9054 <check_fs+0x6a>
    9008:	fe 01       	movw	r30, r28
    900a:	ed 5c       	subi	r30, 0xCD	; 205
    900c:	fd 4f       	sbci	r31, 0xFD	; 253
    900e:	80 81       	ld	r24, Z
    9010:	91 81       	ldd	r25, Z+1	; 0x01
    9012:	85 35       	cpi	r24, 0x55	; 85
    9014:	9a 4a       	sbci	r25, 0xAA	; 170
    9016:	01 f5       	brne	.+64     	; 0x9058 <check_fs+0x6e>
    9018:	8d a9       	ldd	r24, Y+53	; 0x35
    901a:	89 3e       	cpi	r24, 0xE9	; 233
    901c:	29 f0       	breq	.+10     	; 0x9028 <check_fs+0x3e>
    901e:	8b 3e       	cpi	r24, 0xEB	; 235
    9020:	f9 f4       	brne	.+62     	; 0x9060 <check_fs+0x76>
    9022:	8f a9       	ldd	r24, Y+55	; 0x37
    9024:	80 39       	cpi	r24, 0x90	; 144
    9026:	e1 f4       	brne	.+56     	; 0x9060 <check_fs+0x76>
    9028:	ce 01       	movw	r24, r28
    902a:	85 59       	subi	r24, 0x95	; 149
    902c:	9f 4f       	sbci	r25, 0xFF	; 255
    902e:	c5 dd       	rcall	.-1142   	; 0x8bba <ld_dword>
    9030:	dc 01       	movw	r26, r24
    9032:	cb 01       	movw	r24, r22
    9034:	bb 27       	eor	r27, r27
    9036:	86 34       	cpi	r24, 0x46	; 70
    9038:	91 44       	sbci	r25, 0x41	; 65
    903a:	a4 45       	sbci	r26, 0x54	; 84
    903c:	b1 05       	cpc	r27, r1
    903e:	71 f0       	breq	.+28     	; 0x905c <check_fs+0x72>
    9040:	ce 01       	movw	r24, r28
    9042:	89 57       	subi	r24, 0x79	; 121
    9044:	9f 4f       	sbci	r25, 0xFF	; 255
    9046:	b9 dd       	rcall	.-1166   	; 0x8bba <ld_dword>
    9048:	66 34       	cpi	r22, 0x46	; 70
    904a:	71 44       	sbci	r23, 0x41	; 65
    904c:	84 45       	sbci	r24, 0x54	; 84
    904e:	93 43       	sbci	r25, 0x33	; 51
    9050:	39 f4       	brne	.+14     	; 0x9060 <check_fs+0x76>
    9052:	04 c0       	rjmp	.+8      	; 0x905c <check_fs+0x72>
    9054:	84 e0       	ldi	r24, 0x04	; 4
    9056:	05 c0       	rjmp	.+10     	; 0x9062 <check_fs+0x78>
    9058:	83 e0       	ldi	r24, 0x03	; 3
    905a:	03 c0       	rjmp	.+6      	; 0x9062 <check_fs+0x78>
    905c:	80 e0       	ldi	r24, 0x00	; 0
    905e:	01 c0       	rjmp	.+2      	; 0x9062 <check_fs+0x78>
    9060:	82 e0       	ldi	r24, 0x02	; 2
    9062:	df 91       	pop	r29
    9064:	cf 91       	pop	r28
    9066:	08 95       	ret

00009068 <find_volume>:
    9068:	ad e1       	ldi	r26, 0x1D	; 29
    906a:	b0 e0       	ldi	r27, 0x00	; 0
    906c:	ea e3       	ldi	r30, 0x3A	; 58
    906e:	f8 e4       	ldi	r31, 0x48	; 72
    9070:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    9074:	5b 01       	movw	r10, r22
    9076:	f4 2e       	mov	r15, r20
    9078:	db 01       	movw	r26, r22
    907a:	1d 92       	st	X+, r1
    907c:	1c 92       	st	X, r1
    907e:	34 de       	rcall	.-920    	; 0x8ce8 <get_ldnumber>
    9080:	6c 01       	movw	r12, r24
    9082:	97 fd       	sbrc	r25, 7
    9084:	1b c2       	rjmp	.+1078   	; 0x94bc <find_volume+0x454>
    9086:	fc 01       	movw	r30, r24
    9088:	ee 0f       	add	r30, r30
    908a:	ff 1f       	adc	r31, r31
    908c:	ee 51       	subi	r30, 0x1E	; 30
    908e:	f8 4e       	sbci	r31, 0xE8	; 232
    9090:	00 81       	ld	r16, Z
    9092:	11 81       	ldd	r17, Z+1	; 0x01
    9094:	01 15       	cp	r16, r1
    9096:	11 05       	cpc	r17, r1
    9098:	09 f4       	brne	.+2      	; 0x909c <find_volume+0x34>
    909a:	13 c2       	rjmp	.+1062   	; 0x94c2 <find_volume+0x45a>
    909c:	f5 01       	movw	r30, r10
    909e:	11 83       	std	Z+1, r17	; 0x01
    90a0:	00 83       	st	Z, r16
    90a2:	ff 2d       	mov	r31, r15
    90a4:	fe 7f       	andi	r31, 0xFE	; 254
    90a6:	ff 2e       	mov	r15, r31
    90a8:	d8 01       	movw	r26, r16
    90aa:	8c 91       	ld	r24, X
    90ac:	88 23       	and	r24, r24
    90ae:	71 f0       	breq	.+28     	; 0x90cc <find_volume+0x64>
    90b0:	11 96       	adiw	r26, 0x01	; 1
    90b2:	8c 91       	ld	r24, X
    90b4:	0e 94 03 6d 	call	0xda06	; 0xda06 <disk_status>
    90b8:	80 fd       	sbrc	r24, 0
    90ba:	08 c0       	rjmp	.+16     	; 0x90cc <find_volume+0x64>
    90bc:	ff 20       	and	r15, r15
    90be:	09 f4       	brne	.+2      	; 0x90c2 <find_volume+0x5a>
    90c0:	03 c2       	rjmp	.+1030   	; 0x94c8 <find_volume+0x460>
    90c2:	82 ff       	sbrs	r24, 2
    90c4:	01 c2       	rjmp	.+1026   	; 0x94c8 <find_volume+0x460>
    90c6:	8a e0       	ldi	r24, 0x0A	; 10
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	73 c2       	rjmp	.+1254   	; 0x95b2 <find_volume+0x54a>
    90cc:	f8 01       	movw	r30, r16
    90ce:	10 82       	st	Z, r1
    90d0:	c1 82       	std	Z+1, r12	; 0x01
    90d2:	8c 2d       	mov	r24, r12
    90d4:	0e 94 09 6d 	call	0xda12	; 0xda12 <disk_initialize>
    90d8:	80 fd       	sbrc	r24, 0
    90da:	f9 c1       	rjmp	.+1010   	; 0x94ce <find_volume+0x466>
    90dc:	ff 20       	and	r15, r15
    90de:	11 f0       	breq	.+4      	; 0x90e4 <find_volume+0x7c>
    90e0:	82 fd       	sbrc	r24, 2
    90e2:	f1 cf       	rjmp	.-30     	; 0x90c6 <find_volume+0x5e>
    90e4:	40 e0       	ldi	r20, 0x00	; 0
    90e6:	50 e0       	ldi	r21, 0x00	; 0
    90e8:	ba 01       	movw	r22, r20
    90ea:	c8 01       	movw	r24, r16
    90ec:	7e df       	rcall	.-260    	; 0x8fea <check_fs>
    90ee:	82 30       	cpi	r24, 0x02	; 2
    90f0:	09 f0       	breq	.+2      	; 0x90f4 <find_volume+0x8c>
    90f2:	41 c0       	rjmp	.+130    	; 0x9176 <find_volume+0x10e>
    90f4:	9e 01       	movw	r18, r28
    90f6:	2f 5f       	subi	r18, 0xFF	; 255
    90f8:	3f 4f       	sbci	r19, 0xFF	; 255
    90fa:	79 01       	movw	r14, r18
    90fc:	68 01       	movw	r12, r16
    90fe:	35 e0       	ldi	r19, 0x05	; 5
    9100:	c3 1a       	sub	r12, r19
    9102:	3e ef       	ldi	r19, 0xFE	; 254
    9104:	d3 0a       	sbc	r13, r19
    9106:	48 01       	movw	r8, r16
    9108:	45 ec       	ldi	r20, 0xC5	; 197
    910a:	84 1a       	sub	r8, r20
    910c:	4d ef       	ldi	r20, 0xFD	; 253
    910e:	94 0a       	sbc	r9, r20
    9110:	57 01       	movw	r10, r14
    9112:	f6 01       	movw	r30, r12
    9114:	34 97       	sbiw	r30, 0x04	; 4
    9116:	80 81       	ld	r24, Z
    9118:	88 23       	and	r24, r24
    911a:	19 f0       	breq	.+6      	; 0x9122 <find_volume+0xba>
    911c:	c6 01       	movw	r24, r12
    911e:	4d dd       	rcall	.-1382   	; 0x8bba <ld_dword>
    9120:	03 c0       	rjmp	.+6      	; 0x9128 <find_volume+0xc0>
    9122:	60 e0       	ldi	r22, 0x00	; 0
    9124:	70 e0       	ldi	r23, 0x00	; 0
    9126:	cb 01       	movw	r24, r22
    9128:	d5 01       	movw	r26, r10
    912a:	6d 93       	st	X+, r22
    912c:	7d 93       	st	X+, r23
    912e:	8d 93       	st	X+, r24
    9130:	9d 93       	st	X+, r25
    9132:	5d 01       	movw	r10, r26
    9134:	b0 e1       	ldi	r27, 0x10	; 16
    9136:	cb 0e       	add	r12, r27
    9138:	d1 1c       	adc	r13, r1
    913a:	c8 14       	cp	r12, r8
    913c:	d9 04       	cpc	r13, r9
    913e:	49 f7       	brne	.-46     	; 0x9112 <find_volume+0xaa>
    9140:	6e 01       	movw	r12, r28
    9142:	e1 e1       	ldi	r30, 0x11	; 17
    9144:	ce 0e       	add	r12, r30
    9146:	d1 1c       	adc	r13, r1
    9148:	d7 01       	movw	r26, r14
    914a:	8d 90       	ld	r8, X+
    914c:	9d 90       	ld	r9, X+
    914e:	ad 90       	ld	r10, X+
    9150:	bd 90       	ld	r11, X+
    9152:	7d 01       	movw	r14, r26
    9154:	81 14       	cp	r8, r1
    9156:	91 04       	cpc	r9, r1
    9158:	a1 04       	cpc	r10, r1
    915a:	b1 04       	cpc	r11, r1
    915c:	39 f0       	breq	.+14     	; 0x916c <find_volume+0x104>
    915e:	b5 01       	movw	r22, r10
    9160:	a4 01       	movw	r20, r8
    9162:	c8 01       	movw	r24, r16
    9164:	42 df       	rcall	.-380    	; 0x8fea <check_fs>
    9166:	82 30       	cpi	r24, 0x02	; 2
    9168:	10 f4       	brcc	.+4      	; 0x916e <find_volume+0x106>
    916a:	10 c0       	rjmp	.+32     	; 0x918c <find_volume+0x124>
    916c:	83 e0       	ldi	r24, 0x03	; 3
    916e:	ce 14       	cp	r12, r14
    9170:	df 04       	cpc	r13, r15
    9172:	51 f7       	brne	.-44     	; 0x9148 <find_volume+0xe0>
    9174:	af c1       	rjmp	.+862    	; 0x94d4 <find_volume+0x46c>
    9176:	84 30       	cpi	r24, 0x04	; 4
    9178:	09 f4       	brne	.+2      	; 0x917c <find_volume+0x114>
    917a:	af c1       	rjmp	.+862    	; 0x94da <find_volume+0x472>
    917c:	82 30       	cpi	r24, 0x02	; 2
    917e:	18 f0       	brcs	.+6      	; 0x9186 <find_volume+0x11e>
    9180:	8d e0       	ldi	r24, 0x0D	; 13
    9182:	90 e0       	ldi	r25, 0x00	; 0
    9184:	16 c2       	rjmp	.+1068   	; 0x95b2 <find_volume+0x54a>
    9186:	81 2c       	mov	r8, r1
    9188:	91 2c       	mov	r9, r1
    918a:	54 01       	movw	r10, r8
    918c:	f8 01       	movw	r30, r16
    918e:	e0 5c       	subi	r30, 0xC0	; 192
    9190:	ff 4f       	sbci	r31, 0xFF	; 255
    9192:	80 81       	ld	r24, Z
    9194:	91 81       	ldd	r25, Z+1	; 0x01
    9196:	81 15       	cp	r24, r1
    9198:	92 40       	sbci	r25, 0x02	; 2
    919a:	91 f7       	brne	.-28     	; 0x9180 <find_volume+0x118>
    919c:	3b 96       	adiw	r30, 0x0b	; 11
    919e:	80 81       	ld	r24, Z
    91a0:	91 81       	ldd	r25, Z+1	; 0x01
    91a2:	00 97       	sbiw	r24, 0x00	; 0
    91a4:	41 f0       	breq	.+16     	; 0x91b6 <find_volume+0x14e>
    91a6:	9c 01       	movw	r18, r24
    91a8:	40 e0       	ldi	r20, 0x00	; 0
    91aa:	50 e0       	ldi	r21, 0x00	; 0
    91ac:	2d 8b       	std	Y+21, r18	; 0x15
    91ae:	3e 8b       	std	Y+22, r19	; 0x16
    91b0:	4f 8b       	std	Y+23, r20	; 0x17
    91b2:	58 8f       	std	Y+24, r21	; 0x18
    91b4:	08 c0       	rjmp	.+16     	; 0x91c6 <find_volume+0x15e>
    91b6:	c8 01       	movw	r24, r16
    91b8:	87 5a       	subi	r24, 0xA7	; 167
    91ba:	9f 4f       	sbci	r25, 0xFF	; 255
    91bc:	fe dc       	rcall	.-1540   	; 0x8bba <ld_dword>
    91be:	6d 8b       	std	Y+21, r22	; 0x15
    91c0:	7e 8b       	std	Y+22, r23	; 0x16
    91c2:	8f 8b       	std	Y+23, r24	; 0x17
    91c4:	98 8f       	std	Y+24, r25	; 0x18
    91c6:	8d 89       	ldd	r24, Y+21	; 0x15
    91c8:	9e 89       	ldd	r25, Y+22	; 0x16
    91ca:	af 89       	ldd	r26, Y+23	; 0x17
    91cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    91ce:	f8 01       	movw	r30, r16
    91d0:	85 8f       	std	Z+29, r24	; 0x1d
    91d2:	96 8f       	std	Z+30, r25	; 0x1e
    91d4:	a7 8f       	std	Z+31, r26	; 0x1f
    91d6:	b0 a3       	std	Z+32, r27	; 0x20
    91d8:	eb 5b       	subi	r30, 0xBB	; 187
    91da:	ff 4f       	sbci	r31, 0xFF	; 255
    91dc:	70 80       	ld	r7, Z
    91de:	d8 01       	movw	r26, r16
    91e0:	12 96       	adiw	r26, 0x02	; 2
    91e2:	7c 92       	st	X, r7
    91e4:	8f ef       	ldi	r24, 0xFF	; 255
    91e6:	87 0d       	add	r24, r7
    91e8:	82 30       	cpi	r24, 0x02	; 2
    91ea:	50 f6       	brcc	.-108    	; 0x9180 <find_volume+0x118>
    91ec:	33 97       	sbiw	r30, 0x03	; 3
    91ee:	b0 81       	ld	r27, Z
    91f0:	b9 8f       	std	Y+25, r27	; 0x19
    91f2:	8b 2f       	mov	r24, r27
    91f4:	90 e0       	ldi	r25, 0x00	; 0
    91f6:	f8 01       	movw	r30, r16
    91f8:	92 87       	std	Z+10, r25	; 0x0a
    91fa:	81 87       	std	Z+9, r24	; 0x09
    91fc:	00 97       	sbiw	r24, 0x00	; 0
    91fe:	09 f4       	brne	.+2      	; 0x9202 <find_volume+0x19a>
    9200:	bf cf       	rjmp	.-130    	; 0x9180 <find_volume+0x118>
    9202:	9c 01       	movw	r18, r24
    9204:	21 50       	subi	r18, 0x01	; 1
    9206:	31 09       	sbc	r19, r1
    9208:	82 23       	and	r24, r18
    920a:	93 23       	and	r25, r19
    920c:	89 2b       	or	r24, r25
    920e:	09 f0       	breq	.+2      	; 0x9212 <find_volume+0x1aa>
    9210:	b7 cf       	rjmp	.-146    	; 0x9180 <find_volume+0x118>
    9212:	ea 5b       	subi	r30, 0xBA	; 186
    9214:	ff 4f       	sbci	r31, 0xFF	; 255
    9216:	20 80       	ld	r2, Z
    9218:	31 80       	ldd	r3, Z+1	; 0x01
    921a:	d8 01       	movw	r26, r16
    921c:	18 96       	adiw	r26, 0x08	; 8
    921e:	3c 92       	st	X, r3
    9220:	2e 92       	st	-X, r2
    9222:	17 97       	sbiw	r26, 0x07	; 7
    9224:	c1 01       	movw	r24, r2
    9226:	8f 70       	andi	r24, 0x0F	; 15
    9228:	99 27       	eor	r25, r25
    922a:	89 2b       	or	r24, r25
    922c:	09 f0       	breq	.+2      	; 0x9230 <find_volume+0x1c8>
    922e:	a8 cf       	rjmp	.-176    	; 0x9180 <find_volume+0x118>
    9230:	32 96       	adiw	r30, 0x02	; 2
    9232:	80 81       	ld	r24, Z
    9234:	91 81       	ldd	r25, Z+1	; 0x01
    9236:	6c 01       	movw	r12, r24
    9238:	e1 2c       	mov	r14, r1
    923a:	f1 2c       	mov	r15, r1
    923c:	89 2b       	or	r24, r25
    923e:	31 f4       	brne	.+12     	; 0x924c <find_volume+0x1e4>
    9240:	c8 01       	movw	r24, r16
    9242:	8b 5a       	subi	r24, 0xAB	; 171
    9244:	9f 4f       	sbci	r25, 0xFF	; 255
    9246:	b9 dc       	rcall	.-1678   	; 0x8bba <ld_dword>
    9248:	6b 01       	movw	r12, r22
    924a:	7c 01       	movw	r14, r24
    924c:	f8 01       	movw	r30, r16
    924e:	ed 5b       	subi	r30, 0xBD	; 189
    9250:	ff 4f       	sbci	r31, 0xFF	; 255
    9252:	01 90       	ld	r0, Z+
    9254:	f0 81       	ld	r31, Z
    9256:	e0 2d       	mov	r30, r0
    9258:	30 97       	sbiw	r30, 0x00	; 0
    925a:	09 f4       	brne	.+2      	; 0x925e <find_volume+0x1f6>
    925c:	91 cf       	rjmp	.-222    	; 0x9180 <find_volume+0x118>
    925e:	a7 2d       	mov	r26, r7
    9260:	b0 e0       	ldi	r27, 0x00	; 0
    9262:	2d 89       	ldd	r18, Y+21	; 0x15
    9264:	3e 89       	ldd	r19, Y+22	; 0x16
    9266:	4f 89       	ldd	r20, Y+23	; 0x17
    9268:	58 8d       	ldd	r21, Y+24	; 0x18
    926a:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    926e:	2b 01       	movw	r4, r22
    9270:	3c 01       	movw	r6, r24
    9272:	9f 01       	movw	r18, r30
    9274:	40 e0       	ldi	r20, 0x00	; 0
    9276:	50 e0       	ldi	r21, 0x00	; 0
    9278:	2a 8f       	std	Y+26, r18	; 0x1a
    927a:	3b 8f       	std	Y+27, r19	; 0x1b
    927c:	4c 8f       	std	Y+28, r20	; 0x1c
    927e:	5d 8f       	std	Y+29, r21	; 0x1d
    9280:	c1 01       	movw	r24, r2
    9282:	e4 e0       	ldi	r30, 0x04	; 4
    9284:	96 95       	lsr	r25
    9286:	87 95       	ror	r24
    9288:	ea 95       	dec	r30
    928a:	e1 f7       	brne	.-8      	; 0x9284 <find_volume+0x21c>
    928c:	ba 01       	movw	r22, r20
    928e:	a9 01       	movw	r20, r18
    9290:	48 0f       	add	r20, r24
    9292:	59 1f       	adc	r21, r25
    9294:	61 1d       	adc	r22, r1
    9296:	71 1d       	adc	r23, r1
    9298:	db 01       	movw	r26, r22
    929a:	ca 01       	movw	r24, r20
    929c:	84 0d       	add	r24, r4
    929e:	95 1d       	adc	r25, r5
    92a0:	a6 1d       	adc	r26, r6
    92a2:	b7 1d       	adc	r27, r7
    92a4:	89 8b       	std	Y+17, r24	; 0x11
    92a6:	9a 8b       	std	Y+18, r25	; 0x12
    92a8:	ab 8b       	std	Y+19, r26	; 0x13
    92aa:	bc 8b       	std	Y+20, r27	; 0x14
    92ac:	c8 16       	cp	r12, r24
    92ae:	d9 06       	cpc	r13, r25
    92b0:	ea 06       	cpc	r14, r26
    92b2:	fb 06       	cpc	r15, r27
    92b4:	08 f4       	brcc	.+2      	; 0x92b8 <find_volume+0x250>
    92b6:	64 cf       	rjmp	.-312    	; 0x9180 <find_volume+0x118>
    92b8:	c7 01       	movw	r24, r14
    92ba:	b6 01       	movw	r22, r12
    92bc:	29 89       	ldd	r18, Y+17	; 0x11
    92be:	3a 89       	ldd	r19, Y+18	; 0x12
    92c0:	4b 89       	ldd	r20, Y+19	; 0x13
    92c2:	5c 89       	ldd	r21, Y+20	; 0x14
    92c4:	62 1b       	sub	r22, r18
    92c6:	73 0b       	sbc	r23, r19
    92c8:	84 0b       	sbc	r24, r20
    92ca:	95 0b       	sbc	r25, r21
    92cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    92ce:	2a 2f       	mov	r18, r26
    92d0:	30 e0       	ldi	r19, 0x00	; 0
    92d2:	40 e0       	ldi	r20, 0x00	; 0
    92d4:	50 e0       	ldi	r21, 0x00	; 0
    92d6:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    92da:	21 15       	cp	r18, r1
    92dc:	31 05       	cpc	r19, r1
    92de:	41 05       	cpc	r20, r1
    92e0:	51 05       	cpc	r21, r1
    92e2:	09 f4       	brne	.+2      	; 0x92e6 <find_volume+0x27e>
    92e4:	4d cf       	rjmp	.-358    	; 0x9180 <find_volume+0x118>
    92e6:	69 01       	movw	r12, r18
    92e8:	7a 01       	movw	r14, r20
    92ea:	b2 e0       	ldi	r27, 0x02	; 2
    92ec:	cb 0e       	add	r12, r27
    92ee:	d1 1c       	adc	r13, r1
    92f0:	e1 1c       	adc	r14, r1
    92f2:	f1 1c       	adc	r15, r1
    92f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    92f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    92f8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    92fa:	bd 8d       	ldd	r27, Y+29	; 0x1d
    92fc:	88 0d       	add	r24, r8
    92fe:	99 1d       	adc	r25, r9
    9300:	aa 1d       	adc	r26, r10
    9302:	bb 1d       	adc	r27, r11
    9304:	8a 8f       	std	Y+26, r24	; 0x1a
    9306:	9b 8f       	std	Y+27, r25	; 0x1b
    9308:	ac 8f       	std	Y+28, r26	; 0x1c
    930a:	bd 8f       	std	Y+29, r27	; 0x1d
    930c:	89 89       	ldd	r24, Y+17	; 0x11
    930e:	9a 89       	ldd	r25, Y+18	; 0x12
    9310:	ab 89       	ldd	r26, Y+19	; 0x13
    9312:	bc 89       	ldd	r27, Y+20	; 0x14
    9314:	88 0d       	add	r24, r8
    9316:	99 1d       	adc	r25, r9
    9318:	aa 1d       	adc	r26, r10
    931a:	bb 1d       	adc	r27, r11
    931c:	89 8b       	std	Y+17, r24	; 0x11
    931e:	9a 8b       	std	Y+18, r25	; 0x12
    9320:	ab 8b       	std	Y+19, r26	; 0x13
    9322:	bc 8b       	std	Y+20, r27	; 0x14
    9324:	26 3f       	cpi	r18, 0xF6	; 246
    9326:	9f ef       	ldi	r25, 0xFF	; 255
    9328:	39 07       	cpc	r19, r25
    932a:	41 05       	cpc	r20, r1
    932c:	51 05       	cpc	r21, r1
    932e:	08 f0       	brcs	.+2      	; 0x9332 <find_volume+0x2ca>
    9330:	d7 c0       	rjmp	.+430    	; 0x94e0 <find_volume+0x478>
    9332:	f8 01       	movw	r30, r16
    9334:	c1 8e       	std	Z+25, r12	; 0x19
    9336:	d2 8e       	std	Z+26, r13	; 0x1a
    9338:	e3 8e       	std	Z+27, r14	; 0x1b
    933a:	f4 8e       	std	Z+28, r15	; 0x1c
    933c:	26 3f       	cpi	r18, 0xF6	; 246
    933e:	3f 40       	sbci	r19, 0x0F	; 15
    9340:	41 05       	cpc	r20, r1
    9342:	51 05       	cpc	r21, r1
    9344:	08 f0       	brcs	.+2      	; 0x9348 <find_volume+0x2e0>
    9346:	0a c1       	rjmp	.+532    	; 0x955c <find_volume+0x4f4>
    9348:	81 a2       	std	Z+33, r8	; 0x21
    934a:	92 a2       	std	Z+34, r9	; 0x22
    934c:	a3 a2       	std	Z+35, r10	; 0x23
    934e:	b4 a2       	std	Z+36, r11	; 0x24
    9350:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9352:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9354:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9356:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9358:	25 a3       	std	Z+37, r18	; 0x25
    935a:	36 a3       	std	Z+38, r19	; 0x26
    935c:	47 a3       	std	Z+39, r20	; 0x27
    935e:	50 a7       	std	Z+40, r21	; 0x28
    9360:	29 89       	ldd	r18, Y+17	; 0x11
    9362:	3a 89       	ldd	r19, Y+18	; 0x12
    9364:	4b 89       	ldd	r20, Y+19	; 0x13
    9366:	5c 89       	ldd	r21, Y+20	; 0x14
    9368:	25 a7       	std	Z+45, r18	; 0x2d
    936a:	36 a7       	std	Z+46, r19	; 0x2e
    936c:	47 a7       	std	Z+47, r20	; 0x2f
    936e:	50 ab       	std	Z+48, r21	; 0x30
    9370:	21 14       	cp	r2, r1
    9372:	31 04       	cpc	r3, r1
    9374:	09 f4       	brne	.+2      	; 0x9378 <find_volume+0x310>
    9376:	04 cf       	rjmp	.-504    	; 0x9180 <find_volume+0x118>
    9378:	2a 8d       	ldd	r18, Y+26	; 0x1a
    937a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    937c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    937e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9380:	42 0e       	add	r4, r18
    9382:	53 1e       	adc	r5, r19
    9384:	64 1e       	adc	r6, r20
    9386:	75 1e       	adc	r7, r21
    9388:	41 a6       	std	Z+41, r4	; 0x29
    938a:	52 a6       	std	Z+42, r5	; 0x2a
    938c:	63 a6       	std	Z+43, r6	; 0x2b
    938e:	74 a6       	std	Z+44, r7	; 0x2c
    9390:	a3 e0       	ldi	r26, 0x03	; 3
    9392:	b0 e0       	ldi	r27, 0x00	; 0
    9394:	a7 01       	movw	r20, r14
    9396:	96 01       	movw	r18, r12
    9398:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    939c:	dc 01       	movw	r26, r24
    939e:	cb 01       	movw	r24, r22
    93a0:	b6 95       	lsr	r27
    93a2:	a7 95       	ror	r26
    93a4:	97 95       	ror	r25
    93a6:	87 95       	ror	r24
    93a8:	e1 e0       	ldi	r30, 0x01	; 1
    93aa:	ce 22       	and	r12, r30
    93ac:	dd 24       	eor	r13, r13
    93ae:	ee 24       	eor	r14, r14
    93b0:	ff 24       	eor	r15, r15
    93b2:	c8 0e       	add	r12, r24
    93b4:	d9 1e       	adc	r13, r25
    93b6:	ea 1e       	adc	r14, r26
    93b8:	fb 1e       	adc	r15, r27
    93ba:	77 24       	eor	r7, r7
    93bc:	73 94       	inc	r7
    93be:	ff ef       	ldi	r31, 0xFF	; 255
    93c0:	cf 0e       	add	r12, r31
    93c2:	f1 e0       	ldi	r31, 0x01	; 1
    93c4:	df 1e       	adc	r13, r31
    93c6:	e1 1c       	adc	r14, r1
    93c8:	f1 1c       	adc	r15, r1
    93ca:	59 e0       	ldi	r21, 0x09	; 9
    93cc:	f6 94       	lsr	r15
    93ce:	e7 94       	ror	r14
    93d0:	d7 94       	ror	r13
    93d2:	c7 94       	ror	r12
    93d4:	5a 95       	dec	r21
    93d6:	d1 f7       	brne	.-12     	; 0x93cc <find_volume+0x364>
    93d8:	2d 89       	ldd	r18, Y+21	; 0x15
    93da:	3e 89       	ldd	r19, Y+22	; 0x16
    93dc:	4f 89       	ldd	r20, Y+23	; 0x17
    93de:	58 8d       	ldd	r21, Y+24	; 0x18
    93e0:	2c 15       	cp	r18, r12
    93e2:	3d 05       	cpc	r19, r13
    93e4:	4e 05       	cpc	r20, r14
    93e6:	5f 05       	cpc	r21, r15
    93e8:	08 f4       	brcc	.+2      	; 0x93ec <find_volume+0x384>
    93ea:	ca ce       	rjmp	.-620    	; 0x9180 <find_volume+0x118>
    93ec:	8f ef       	ldi	r24, 0xFF	; 255
    93ee:	9f ef       	ldi	r25, 0xFF	; 255
    93f0:	dc 01       	movw	r26, r24
    93f2:	f8 01       	movw	r30, r16
    93f4:	81 8b       	std	Z+17, r24	; 0x11
    93f6:	92 8b       	std	Z+18, r25	; 0x12
    93f8:	a3 8b       	std	Z+19, r26	; 0x13
    93fa:	b4 8b       	std	Z+20, r27	; 0x14
    93fc:	85 87       	std	Z+13, r24	; 0x0d
    93fe:	96 87       	std	Z+14, r25	; 0x0e
    9400:	a7 87       	std	Z+15, r26	; 0x0f
    9402:	b0 8b       	std	Z+16, r27	; 0x10
    9404:	80 e8       	ldi	r24, 0x80	; 128
    9406:	84 83       	std	Z+4, r24	; 0x04
    9408:	f3 e0       	ldi	r31, 0x03	; 3
    940a:	7f 12       	cpse	r7, r31
    940c:	42 c0       	rjmp	.+132    	; 0x9492 <find_volume+0x42a>
    940e:	f8 01       	movw	r30, r16
    9410:	eb 59       	subi	r30, 0x9B	; 155
    9412:	ff 4f       	sbci	r31, 0xFF	; 255
    9414:	80 81       	ld	r24, Z
    9416:	91 81       	ldd	r25, Z+1	; 0x01
    9418:	01 97       	sbiw	r24, 0x01	; 1
    941a:	09 f0       	breq	.+2      	; 0x941e <find_volume+0x3b6>
    941c:	3a c0       	rjmp	.+116    	; 0x9492 <find_volume+0x42a>
    941e:	b5 01       	movw	r22, r10
    9420:	a4 01       	movw	r20, r8
    9422:	4f 5f       	subi	r20, 0xFF	; 255
    9424:	5f 4f       	sbci	r21, 0xFF	; 255
    9426:	6f 4f       	sbci	r22, 0xFF	; 255
    9428:	7f 4f       	sbci	r23, 0xFF	; 255
    942a:	c8 01       	movw	r24, r16
    942c:	9d dd       	rcall	.-1222   	; 0x8f68 <move_window>
    942e:	89 2b       	or	r24, r25
    9430:	81 f5       	brne	.+96     	; 0x9492 <find_volume+0x42a>
    9432:	d8 01       	movw	r26, r16
    9434:	14 96       	adiw	r26, 0x04	; 4
    9436:	1c 92       	st	X, r1
    9438:	f8 01       	movw	r30, r16
    943a:	ed 5c       	subi	r30, 0xCD	; 205
    943c:	fd 4f       	sbci	r31, 0xFD	; 253
    943e:	80 81       	ld	r24, Z
    9440:	91 81       	ldd	r25, Z+1	; 0x01
    9442:	85 35       	cpi	r24, 0x55	; 85
    9444:	9a 4a       	sbci	r25, 0xAA	; 170
    9446:	29 f5       	brne	.+74     	; 0x9492 <find_volume+0x42a>
    9448:	c8 01       	movw	r24, r16
    944a:	c5 96       	adiw	r24, 0x35	; 53
    944c:	b6 db       	rcall	.-2196   	; 0x8bba <ld_dword>
    944e:	62 35       	cpi	r22, 0x52	; 82
    9450:	72 45       	sbci	r23, 0x52	; 82
    9452:	81 46       	sbci	r24, 0x61	; 97
    9454:	91 44       	sbci	r25, 0x41	; 65
    9456:	e9 f4       	brne	.+58     	; 0x9492 <find_volume+0x42a>
    9458:	c8 01       	movw	r24, r16
    945a:	87 5e       	subi	r24, 0xE7	; 231
    945c:	9d 4f       	sbci	r25, 0xFD	; 253
    945e:	ad db       	rcall	.-2214   	; 0x8bba <ld_dword>
    9460:	62 37       	cpi	r22, 0x72	; 114
    9462:	72 47       	sbci	r23, 0x72	; 114
    9464:	81 44       	sbci	r24, 0x41	; 65
    9466:	91 46       	sbci	r25, 0x61	; 97
    9468:	a1 f4       	brne	.+40     	; 0x9492 <find_volume+0x42a>
    946a:	c8 01       	movw	r24, r16
    946c:	83 5e       	subi	r24, 0xE3	; 227
    946e:	9d 4f       	sbci	r25, 0xFD	; 253
    9470:	a4 db       	rcall	.-2232   	; 0x8bba <ld_dword>
    9472:	d8 01       	movw	r26, r16
    9474:	51 96       	adiw	r26, 0x11	; 17
    9476:	6d 93       	st	X+, r22
    9478:	7d 93       	st	X+, r23
    947a:	8d 93       	st	X+, r24
    947c:	9c 93       	st	X, r25
    947e:	54 97       	sbiw	r26, 0x14	; 20
    9480:	c8 01       	movw	r24, r16
    9482:	8f 5d       	subi	r24, 0xDF	; 223
    9484:	9d 4f       	sbci	r25, 0xFD	; 253
    9486:	99 db       	rcall	.-2254   	; 0x8bba <ld_dword>
    9488:	f8 01       	movw	r30, r16
    948a:	65 87       	std	Z+13, r22	; 0x0d
    948c:	76 87       	std	Z+14, r23	; 0x0e
    948e:	87 87       	std	Z+15, r24	; 0x0f
    9490:	90 8b       	std	Z+16, r25	; 0x10
    9492:	d8 01       	movw	r26, r16
    9494:	7c 92       	st	X, r7
    9496:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <Fsid>
    949a:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <Fsid+0x1>
    949e:	01 96       	adiw	r24, 0x01	; 1
    94a0:	90 93 e1 17 	sts	0x17E1, r25	; 0x8017e1 <Fsid+0x1>
    94a4:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <Fsid>
    94a8:	16 96       	adiw	r26, 0x06	; 6
    94aa:	9c 93       	st	X, r25
    94ac:	8e 93       	st	-X, r24
    94ae:	15 97       	sbiw	r26, 0x05	; 5
    94b0:	f8 01       	movw	r30, r16
    94b2:	15 8a       	std	Z+21, r1	; 0x15
    94b4:	16 8a       	std	Z+22, r1	; 0x16
    94b6:	17 8a       	std	Z+23, r1	; 0x17
    94b8:	10 8e       	std	Z+24, r1	; 0x18
    94ba:	06 c0       	rjmp	.+12     	; 0x94c8 <find_volume+0x460>
    94bc:	8b e0       	ldi	r24, 0x0B	; 11
    94be:	90 e0       	ldi	r25, 0x00	; 0
    94c0:	78 c0       	rjmp	.+240    	; 0x95b2 <find_volume+0x54a>
    94c2:	8c e0       	ldi	r24, 0x0C	; 12
    94c4:	90 e0       	ldi	r25, 0x00	; 0
    94c6:	75 c0       	rjmp	.+234    	; 0x95b2 <find_volume+0x54a>
    94c8:	80 e0       	ldi	r24, 0x00	; 0
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	72 c0       	rjmp	.+228    	; 0x95b2 <find_volume+0x54a>
    94ce:	83 e0       	ldi	r24, 0x03	; 3
    94d0:	90 e0       	ldi	r25, 0x00	; 0
    94d2:	6f c0       	rjmp	.+222    	; 0x95b2 <find_volume+0x54a>
    94d4:	84 30       	cpi	r24, 0x04	; 4
    94d6:	09 f0       	breq	.+2      	; 0x94da <find_volume+0x472>
    94d8:	53 ce       	rjmp	.-858    	; 0x9180 <find_volume+0x118>
    94da:	81 e0       	ldi	r24, 0x01	; 1
    94dc:	90 e0       	ldi	r25, 0x00	; 0
    94de:	69 c0       	rjmp	.+210    	; 0x95b2 <find_volume+0x54a>
    94e0:	d8 01       	movw	r26, r16
    94e2:	59 96       	adiw	r26, 0x19	; 25
    94e4:	cd 92       	st	X+, r12
    94e6:	dd 92       	st	X+, r13
    94e8:	ed 92       	st	X+, r14
    94ea:	fc 92       	st	X, r15
    94ec:	5c 97       	sbiw	r26, 0x1c	; 28
    94ee:	f8 01       	movw	r30, r16
    94f0:	81 a2       	std	Z+33, r8	; 0x21
    94f2:	92 a2       	std	Z+34, r9	; 0x22
    94f4:	a3 a2       	std	Z+35, r10	; 0x23
    94f6:	b4 a2       	std	Z+36, r11	; 0x24
    94f8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    94fa:	3b 8d       	ldd	r19, Y+27	; 0x1b
    94fc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    94fe:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9500:	95 96       	adiw	r26, 0x25	; 37
    9502:	2d 93       	st	X+, r18
    9504:	3d 93       	st	X+, r19
    9506:	4d 93       	st	X+, r20
    9508:	5c 93       	st	X, r21
    950a:	98 97       	sbiw	r26, 0x28	; 40
    950c:	29 89       	ldd	r18, Y+17	; 0x11
    950e:	3a 89       	ldd	r19, Y+18	; 0x12
    9510:	4b 89       	ldd	r20, Y+19	; 0x13
    9512:	5c 89       	ldd	r21, Y+20	; 0x14
    9514:	9d 96       	adiw	r26, 0x2d	; 45
    9516:	2d 93       	st	X+, r18
    9518:	3d 93       	st	X+, r19
    951a:	4d 93       	st	X+, r20
    951c:	5c 93       	st	X, r21
    951e:	d0 97       	sbiw	r26, 0x30	; 48
    9520:	e1 5a       	subi	r30, 0xA1	; 161
    9522:	ff 4f       	sbci	r31, 0xFF	; 255
    9524:	80 81       	ld	r24, Z
    9526:	91 81       	ldd	r25, Z+1	; 0x01
    9528:	89 2b       	or	r24, r25
    952a:	09 f0       	breq	.+2      	; 0x952e <find_volume+0x4c6>
    952c:	29 ce       	rjmp	.-942    	; 0x9180 <find_volume+0x118>
    952e:	21 14       	cp	r2, r1
    9530:	31 04       	cpc	r3, r1
    9532:	09 f0       	breq	.+2      	; 0x9536 <find_volume+0x4ce>
    9534:	25 ce       	rjmp	.-950    	; 0x9180 <find_volume+0x118>
    9536:	c8 01       	movw	r24, r16
    9538:	8f 59       	subi	r24, 0x9F	; 159
    953a:	9f 4f       	sbci	r25, 0xFF	; 255
    953c:	3e db       	rcall	.-2436   	; 0x8bba <ld_dword>
    953e:	f8 01       	movw	r30, r16
    9540:	61 a7       	std	Z+41, r22	; 0x29
    9542:	72 a7       	std	Z+42, r23	; 0x2a
    9544:	83 a7       	std	Z+43, r24	; 0x2b
    9546:	94 a7       	std	Z+44, r25	; 0x2c
    9548:	62 e0       	ldi	r22, 0x02	; 2
    954a:	cc 0c       	add	r12, r12
    954c:	dd 1c       	adc	r13, r13
    954e:	ee 1c       	adc	r14, r14
    9550:	ff 1c       	adc	r15, r15
    9552:	6a 95       	dec	r22
    9554:	d1 f7       	brne	.-12     	; 0x954a <find_volume+0x4e2>
    9556:	73 e0       	ldi	r23, 0x03	; 3
    9558:	77 2e       	mov	r7, r23
    955a:	31 cf       	rjmp	.-414    	; 0x93be <find_volume+0x356>
    955c:	81 a2       	std	Z+33, r8	; 0x21
    955e:	92 a2       	std	Z+34, r9	; 0x22
    9560:	a3 a2       	std	Z+35, r10	; 0x23
    9562:	b4 a2       	std	Z+36, r11	; 0x24
    9564:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9566:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9568:	4c 8d       	ldd	r20, Y+28	; 0x1c
    956a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    956c:	25 a3       	std	Z+37, r18	; 0x25
    956e:	36 a3       	std	Z+38, r19	; 0x26
    9570:	47 a3       	std	Z+39, r20	; 0x27
    9572:	50 a7       	std	Z+40, r21	; 0x28
    9574:	29 89       	ldd	r18, Y+17	; 0x11
    9576:	3a 89       	ldd	r19, Y+18	; 0x12
    9578:	4b 89       	ldd	r20, Y+19	; 0x13
    957a:	5c 89       	ldd	r21, Y+20	; 0x14
    957c:	25 a7       	std	Z+45, r18	; 0x2d
    957e:	36 a7       	std	Z+46, r19	; 0x2e
    9580:	47 a7       	std	Z+47, r20	; 0x2f
    9582:	50 ab       	std	Z+48, r21	; 0x30
    9584:	21 14       	cp	r2, r1
    9586:	31 04       	cpc	r3, r1
    9588:	09 f4       	brne	.+2      	; 0x958c <find_volume+0x524>
    958a:	fa cd       	rjmp	.-1036   	; 0x9180 <find_volume+0x118>
    958c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    958e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9590:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9592:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9594:	42 0e       	add	r4, r18
    9596:	53 1e       	adc	r5, r19
    9598:	64 1e       	adc	r6, r20
    959a:	75 1e       	adc	r7, r21
    959c:	41 a6       	std	Z+41, r4	; 0x29
    959e:	52 a6       	std	Z+42, r5	; 0x2a
    95a0:	63 a6       	std	Z+43, r6	; 0x2b
    95a2:	74 a6       	std	Z+44, r7	; 0x2c
    95a4:	cc 0c       	add	r12, r12
    95a6:	dd 1c       	adc	r13, r13
    95a8:	ee 1c       	adc	r14, r14
    95aa:	ff 1c       	adc	r15, r15
    95ac:	42 e0       	ldi	r20, 0x02	; 2
    95ae:	74 2e       	mov	r7, r20
    95b0:	06 cf       	rjmp	.-500    	; 0x93be <find_volume+0x356>
    95b2:	6d 96       	adiw	r28, 0x1d	; 29
    95b4:	e2 e1       	ldi	r30, 0x12	; 18
    95b6:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

000095ba <put_fat>:
    95ba:	a6 e0       	ldi	r26, 0x06	; 6
    95bc:	b0 e0       	ldi	r27, 0x00	; 0
    95be:	e3 ee       	ldi	r30, 0xE3	; 227
    95c0:	fa e4       	ldi	r31, 0x4A	; 74
    95c2:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    95c6:	42 30       	cpi	r20, 0x02	; 2
    95c8:	51 05       	cpc	r21, r1
    95ca:	61 05       	cpc	r22, r1
    95cc:	71 05       	cpc	r23, r1
    95ce:	08 f4       	brcc	.+2      	; 0x95d2 <put_fat+0x18>
    95d0:	e9 c0       	rjmp	.+466    	; 0x97a4 <put_fat+0x1ea>
    95d2:	dc 01       	movw	r26, r24
    95d4:	59 96       	adiw	r26, 0x19	; 25
    95d6:	cd 90       	ld	r12, X+
    95d8:	dd 90       	ld	r13, X+
    95da:	ed 90       	ld	r14, X+
    95dc:	fc 90       	ld	r15, X
    95de:	5c 97       	sbiw	r26, 0x1c	; 28
    95e0:	4c 15       	cp	r20, r12
    95e2:	5d 05       	cpc	r21, r13
    95e4:	6e 05       	cpc	r22, r14
    95e6:	7f 05       	cpc	r23, r15
    95e8:	08 f0       	brcs	.+2      	; 0x95ec <put_fat+0x32>
    95ea:	dc c0       	rjmp	.+440    	; 0x97a4 <put_fat+0x1ea>
    95ec:	28 01       	movw	r4, r16
    95ee:	39 01       	movw	r6, r18
    95f0:	6a 01       	movw	r12, r20
    95f2:	7b 01       	movw	r14, r22
    95f4:	9e 83       	std	Y+6, r25	; 0x06
    95f6:	8d 83       	std	Y+5, r24	; 0x05
    95f8:	fc 01       	movw	r30, r24
    95fa:	80 81       	ld	r24, Z
    95fc:	82 30       	cpi	r24, 0x02	; 2
    95fe:	09 f4       	brne	.+2      	; 0x9602 <put_fat+0x48>
    9600:	73 c0       	rjmp	.+230    	; 0x96e8 <put_fat+0x12e>
    9602:	83 30       	cpi	r24, 0x03	; 3
    9604:	09 f4       	brne	.+2      	; 0x9608 <put_fat+0x4e>
    9606:	92 c0       	rjmp	.+292    	; 0x972c <put_fat+0x172>
    9608:	81 30       	cpi	r24, 0x01	; 1
    960a:	09 f0       	breq	.+2      	; 0x960e <put_fat+0x54>
    960c:	cb c0       	rjmp	.+406    	; 0x97a4 <put_fat+0x1ea>
    960e:	4a 01       	movw	r8, r20
    9610:	96 94       	lsr	r9
    9612:	87 94       	ror	r8
    9614:	84 0e       	add	r8, r20
    9616:	95 1e       	adc	r9, r21
    9618:	c4 01       	movw	r24, r8
    961a:	89 2f       	mov	r24, r25
    961c:	99 27       	eor	r25, r25
    961e:	86 95       	lsr	r24
    9620:	45 a1       	ldd	r20, Z+37	; 0x25
    9622:	56 a1       	ldd	r21, Z+38	; 0x26
    9624:	67 a1       	ldd	r22, Z+39	; 0x27
    9626:	70 a5       	ldd	r23, Z+40	; 0x28
    9628:	48 0f       	add	r20, r24
    962a:	59 1f       	adc	r21, r25
    962c:	61 1d       	adc	r22, r1
    962e:	71 1d       	adc	r23, r1
    9630:	cf 01       	movw	r24, r30
    9632:	9a dc       	rcall	.-1740   	; 0x8f68 <move_window>
    9634:	5c 01       	movw	r10, r24
    9636:	89 2b       	or	r24, r25
    9638:	09 f0       	breq	.+2      	; 0x963c <put_fat+0x82>
    963a:	b7 c0       	rjmp	.+366    	; 0x97aa <put_fat+0x1f0>
    963c:	2d 80       	ldd	r2, Y+5	; 0x05
    963e:	3e 80       	ldd	r3, Y+6	; 0x06
    9640:	f5 e3       	ldi	r31, 0x35	; 53
    9642:	2f 0e       	add	r2, r31
    9644:	31 1c       	adc	r3, r1
    9646:	84 01       	movw	r16, r8
    9648:	0f 5f       	subi	r16, 0xFF	; 255
    964a:	1f 4f       	sbci	r17, 0xFF	; 255
    964c:	21 e0       	ldi	r18, 0x01	; 1
    964e:	92 22       	and	r9, r18
    9650:	f1 01       	movw	r30, r2
    9652:	e8 0d       	add	r30, r8
    9654:	f9 1d       	adc	r31, r9
    9656:	d7 01       	movw	r26, r14
    9658:	c6 01       	movw	r24, r12
    965a:	81 70       	andi	r24, 0x01	; 1
    965c:	99 27       	eor	r25, r25
    965e:	aa 27       	eor	r26, r26
    9660:	bb 27       	eor	r27, r27
    9662:	89 83       	std	Y+1, r24	; 0x01
    9664:	9a 83       	std	Y+2, r25	; 0x02
    9666:	ab 83       	std	Y+3, r26	; 0x03
    9668:	bc 83       	std	Y+4, r27	; 0x04
    966a:	c0 fe       	sbrs	r12, 0
    966c:	09 c0       	rjmp	.+18     	; 0x9680 <put_fat+0xc6>
    966e:	80 81       	ld	r24, Z
    9670:	28 2f       	mov	r18, r24
    9672:	2f 70       	andi	r18, 0x0F	; 15
    9674:	a0 e1       	ldi	r26, 0x10	; 16
    9676:	4a 9e       	mul	r4, r26
    9678:	c0 01       	movw	r24, r0
    967a:	11 24       	eor	r1, r1
    967c:	82 2b       	or	r24, r18
    967e:	01 c0       	rjmp	.+2      	; 0x9682 <put_fat+0xc8>
    9680:	84 2d       	mov	r24, r4
    9682:	80 83       	st	Z, r24
    9684:	81 e0       	ldi	r24, 0x01	; 1
    9686:	ed 81       	ldd	r30, Y+5	; 0x05
    9688:	fe 81       	ldd	r31, Y+6	; 0x06
    968a:	83 83       	std	Z+3, r24	; 0x03
    968c:	45 a1       	ldd	r20, Z+37	; 0x25
    968e:	56 a1       	ldd	r21, Z+38	; 0x26
    9690:	67 a1       	ldd	r22, Z+39	; 0x27
    9692:	70 a5       	ldd	r23, Z+40	; 0x28
    9694:	c8 01       	movw	r24, r16
    9696:	89 2f       	mov	r24, r25
    9698:	99 27       	eor	r25, r25
    969a:	86 95       	lsr	r24
    969c:	48 0f       	add	r20, r24
    969e:	59 1f       	adc	r21, r25
    96a0:	61 1d       	adc	r22, r1
    96a2:	71 1d       	adc	r23, r1
    96a4:	cf 01       	movw	r24, r30
    96a6:	60 dc       	rcall	.-1856   	; 0x8f68 <move_window>
    96a8:	5c 01       	movw	r10, r24
    96aa:	89 2b       	or	r24, r25
    96ac:	09 f0       	breq	.+2      	; 0x96b0 <put_fat+0xf6>
    96ae:	7d c0       	rjmp	.+250    	; 0x97aa <put_fat+0x1f0>
    96b0:	11 70       	andi	r17, 0x01	; 1
    96b2:	f1 01       	movw	r30, r2
    96b4:	e0 0f       	add	r30, r16
    96b6:	f1 1f       	adc	r31, r17
    96b8:	89 81       	ldd	r24, Y+1	; 0x01
    96ba:	9a 81       	ldd	r25, Y+2	; 0x02
    96bc:	ab 81       	ldd	r26, Y+3	; 0x03
    96be:	bc 81       	ldd	r27, Y+4	; 0x04
    96c0:	89 2b       	or	r24, r25
    96c2:	8a 2b       	or	r24, r26
    96c4:	8b 2b       	or	r24, r27
    96c6:	41 f0       	breq	.+16     	; 0x96d8 <put_fat+0x11e>
    96c8:	54 e0       	ldi	r21, 0x04	; 4
    96ca:	76 94       	lsr	r7
    96cc:	67 94       	ror	r6
    96ce:	57 94       	ror	r5
    96d0:	47 94       	ror	r4
    96d2:	5a 95       	dec	r21
    96d4:	d1 f7       	brne	.-12     	; 0x96ca <put_fat+0x110>
    96d6:	06 c0       	rjmp	.+12     	; 0x96e4 <put_fat+0x12a>
    96d8:	00 81       	ld	r16, Z
    96da:	00 7f       	andi	r16, 0xF0	; 240
    96dc:	85 2d       	mov	r24, r5
    96de:	8f 70       	andi	r24, 0x0F	; 15
    96e0:	40 2e       	mov	r4, r16
    96e2:	48 2a       	or	r4, r24
    96e4:	40 82       	st	Z, r4
    96e6:	58 c0       	rjmp	.+176    	; 0x9798 <put_fat+0x1de>
    96e8:	77 27       	eor	r23, r23
    96ea:	6f 2d       	mov	r22, r15
    96ec:	5e 2d       	mov	r21, r14
    96ee:	4d 2d       	mov	r20, r13
    96f0:	ed 81       	ldd	r30, Y+5	; 0x05
    96f2:	fe 81       	ldd	r31, Y+6	; 0x06
    96f4:	85 a1       	ldd	r24, Z+37	; 0x25
    96f6:	96 a1       	ldd	r25, Z+38	; 0x26
    96f8:	a7 a1       	ldd	r26, Z+39	; 0x27
    96fa:	b0 a5       	ldd	r27, Z+40	; 0x28
    96fc:	48 0f       	add	r20, r24
    96fe:	59 1f       	adc	r21, r25
    9700:	6a 1f       	adc	r22, r26
    9702:	7b 1f       	adc	r23, r27
    9704:	cf 01       	movw	r24, r30
    9706:	30 dc       	rcall	.-1952   	; 0x8f68 <move_window>
    9708:	5c 01       	movw	r10, r24
    970a:	89 2b       	or	r24, r25
    970c:	09 f0       	breq	.+2      	; 0x9710 <put_fat+0x156>
    970e:	4d c0       	rjmp	.+154    	; 0x97aa <put_fat+0x1f0>
    9710:	ed 81       	ldd	r30, Y+5	; 0x05
    9712:	fe 81       	ldd	r31, Y+6	; 0x06
    9714:	f5 96       	adiw	r30, 0x35	; 53
    9716:	cc 0c       	add	r12, r12
    9718:	dd 1c       	adc	r13, r13
    971a:	e8 94       	clt
    971c:	c0 f8       	bld	r12, 0
    971e:	21 e0       	ldi	r18, 0x01	; 1
    9720:	d2 22       	and	r13, r18
    9722:	ec 0d       	add	r30, r12
    9724:	fd 1d       	adc	r31, r13
    9726:	40 82       	st	Z, r4
    9728:	51 82       	std	Z+1, r5	; 0x01
    972a:	36 c0       	rjmp	.+108    	; 0x9798 <put_fat+0x1de>
    972c:	ed 81       	ldd	r30, Y+5	; 0x05
    972e:	fe 81       	ldd	r31, Y+6	; 0x06
    9730:	85 a1       	ldd	r24, Z+37	; 0x25
    9732:	96 a1       	ldd	r25, Z+38	; 0x26
    9734:	a7 a1       	ldd	r26, Z+39	; 0x27
    9736:	b0 a5       	ldd	r27, Z+40	; 0x28
    9738:	27 e0       	ldi	r18, 0x07	; 7
    973a:	76 95       	lsr	r23
    973c:	67 95       	ror	r22
    973e:	57 95       	ror	r21
    9740:	47 95       	ror	r20
    9742:	2a 95       	dec	r18
    9744:	d1 f7       	brne	.-12     	; 0x973a <put_fat+0x180>
    9746:	48 0f       	add	r20, r24
    9748:	59 1f       	adc	r21, r25
    974a:	6a 1f       	adc	r22, r26
    974c:	7b 1f       	adc	r23, r27
    974e:	cf 01       	movw	r24, r30
    9750:	0b dc       	rcall	.-2026   	; 0x8f68 <move_window>
    9752:	5c 01       	movw	r10, r24
    9754:	89 2b       	or	r24, r25
    9756:	49 f5       	brne	.+82     	; 0x97aa <put_fat+0x1f0>
    9758:	4d 81       	ldd	r20, Y+5	; 0x05
    975a:	5e 81       	ldd	r21, Y+6	; 0x06
    975c:	4b 5c       	subi	r20, 0xCB	; 203
    975e:	5f 4f       	sbci	r21, 0xFF	; 255
    9760:	cc 0c       	add	r12, r12
    9762:	dd 1c       	adc	r13, r13
    9764:	cc 0c       	add	r12, r12
    9766:	dd 1c       	adc	r13, r13
    9768:	fc ef       	ldi	r31, 0xFC	; 252
    976a:	cf 22       	and	r12, r31
    976c:	f1 e0       	ldi	r31, 0x01	; 1
    976e:	df 22       	and	r13, r31
    9770:	c4 0e       	add	r12, r20
    9772:	d5 1e       	adc	r13, r21
    9774:	c6 01       	movw	r24, r12
    9776:	21 da       	rcall	.-3006   	; 0x8bba <ld_dword>
    9778:	2f e0       	ldi	r18, 0x0F	; 15
    977a:	72 22       	and	r7, r18
    977c:	dc 01       	movw	r26, r24
    977e:	cb 01       	movw	r24, r22
    9780:	88 27       	eor	r24, r24
    9782:	99 27       	eor	r25, r25
    9784:	aa 27       	eor	r26, r26
    9786:	b0 7f       	andi	r27, 0xF0	; 240
    9788:	b3 01       	movw	r22, r6
    978a:	a2 01       	movw	r20, r4
    978c:	48 2b       	or	r20, r24
    978e:	59 2b       	or	r21, r25
    9790:	6a 2b       	or	r22, r26
    9792:	7b 2b       	or	r23, r27
    9794:	c6 01       	movw	r24, r12
    9796:	26 da       	rcall	.-2996   	; 0x8be4 <st_dword>
    9798:	81 e0       	ldi	r24, 0x01	; 1
    979a:	ad 81       	ldd	r26, Y+5	; 0x05
    979c:	be 81       	ldd	r27, Y+6	; 0x06
    979e:	13 96       	adiw	r26, 0x03	; 3
    97a0:	8c 93       	st	X, r24
    97a2:	03 c0       	rjmp	.+6      	; 0x97aa <put_fat+0x1f0>
    97a4:	82 e0       	ldi	r24, 0x02	; 2
    97a6:	a8 2e       	mov	r10, r24
    97a8:	b1 2c       	mov	r11, r1
    97aa:	c5 01       	movw	r24, r10
    97ac:	26 96       	adiw	r28, 0x06	; 6
    97ae:	e2 e1       	ldi	r30, 0x12	; 18
    97b0:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

000097b4 <get_fat.isra.7>:
    97b4:	a0 e0       	ldi	r26, 0x00	; 0
    97b6:	b0 e0       	ldi	r27, 0x00	; 0
    97b8:	e0 ee       	ldi	r30, 0xE0	; 224
    97ba:	fb e4       	ldi	r31, 0x4B	; 75
    97bc:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    97c0:	42 30       	cpi	r20, 0x02	; 2
    97c2:	51 05       	cpc	r21, r1
    97c4:	61 05       	cpc	r22, r1
    97c6:	71 05       	cpc	r23, r1
    97c8:	08 f4       	brcc	.+2      	; 0x97cc <get_fat.isra.7+0x18>
    97ca:	9e c0       	rjmp	.+316    	; 0x9908 <get_fat.isra.7+0x154>
    97cc:	fc 01       	movw	r30, r24
    97ce:	01 8d       	ldd	r16, Z+25	; 0x19
    97d0:	12 8d       	ldd	r17, Z+26	; 0x1a
    97d2:	23 8d       	ldd	r18, Z+27	; 0x1b
    97d4:	34 8d       	ldd	r19, Z+28	; 0x1c
    97d6:	40 17       	cp	r20, r16
    97d8:	51 07       	cpc	r21, r17
    97da:	62 07       	cpc	r22, r18
    97dc:	73 07       	cpc	r23, r19
    97de:	08 f0       	brcs	.+2      	; 0x97e2 <get_fat.isra.7+0x2e>
    97e0:	93 c0       	rjmp	.+294    	; 0x9908 <get_fat.isra.7+0x154>
    97e2:	6a 01       	movw	r12, r20
    97e4:	7b 01       	movw	r14, r22
    97e6:	8c 01       	movw	r16, r24
    97e8:	80 81       	ld	r24, Z
    97ea:	82 30       	cpi	r24, 0x02	; 2
    97ec:	09 f4       	brne	.+2      	; 0x97f0 <get_fat.isra.7+0x3c>
    97ee:	4b c0       	rjmp	.+150    	; 0x9886 <get_fat.isra.7+0xd2>
    97f0:	83 30       	cpi	r24, 0x03	; 3
    97f2:	09 f4       	brne	.+2      	; 0x97f6 <get_fat.isra.7+0x42>
    97f4:	67 c0       	rjmp	.+206    	; 0x98c4 <get_fat.isra.7+0x110>
    97f6:	81 30       	cpi	r24, 0x01	; 1
    97f8:	09 f0       	breq	.+2      	; 0x97fc <get_fat.isra.7+0x48>
    97fa:	86 c0       	rjmp	.+268    	; 0x9908 <get_fat.isra.7+0x154>
    97fc:	ea 01       	movw	r28, r20
    97fe:	d6 95       	lsr	r29
    9800:	c7 95       	ror	r28
    9802:	cc 0d       	add	r28, r12
    9804:	dd 1d       	adc	r29, r13
    9806:	ce 01       	movw	r24, r28
    9808:	89 2f       	mov	r24, r25
    980a:	99 27       	eor	r25, r25
    980c:	86 95       	lsr	r24
    980e:	45 a1       	ldd	r20, Z+37	; 0x25
    9810:	56 a1       	ldd	r21, Z+38	; 0x26
    9812:	67 a1       	ldd	r22, Z+39	; 0x27
    9814:	70 a5       	ldd	r23, Z+40	; 0x28
    9816:	48 0f       	add	r20, r24
    9818:	59 1f       	adc	r21, r25
    981a:	61 1d       	adc	r22, r1
    981c:	71 1d       	adc	r23, r1
    981e:	cf 01       	movw	r24, r30
    9820:	a3 db       	rcall	.-2234   	; 0x8f68 <move_window>
    9822:	89 2b       	or	r24, r25
    9824:	21 f0       	breq	.+8      	; 0x982e <get_fat.isra.7+0x7a>
    9826:	6f ef       	ldi	r22, 0xFF	; 255
    9828:	7f ef       	ldi	r23, 0xFF	; 255
    982a:	cb 01       	movw	r24, r22
    982c:	71 c0       	rjmp	.+226    	; 0x9910 <get_fat.isra.7+0x15c>
    982e:	5e 01       	movw	r10, r28
    9830:	ff ef       	ldi	r31, 0xFF	; 255
    9832:	af 1a       	sub	r10, r31
    9834:	bf 0a       	sbc	r11, r31
    9836:	d1 70       	andi	r29, 0x01	; 1
    9838:	c0 0f       	add	r28, r16
    983a:	d1 1f       	adc	r29, r17
    983c:	cd a9       	ldd	r28, Y+53	; 0x35
    983e:	c5 01       	movw	r24, r10
    9840:	89 2f       	mov	r24, r25
    9842:	99 27       	eor	r25, r25
    9844:	86 95       	lsr	r24
    9846:	f8 01       	movw	r30, r16
    9848:	45 a1       	ldd	r20, Z+37	; 0x25
    984a:	56 a1       	ldd	r21, Z+38	; 0x26
    984c:	67 a1       	ldd	r22, Z+39	; 0x27
    984e:	70 a5       	ldd	r23, Z+40	; 0x28
    9850:	48 0f       	add	r20, r24
    9852:	59 1f       	adc	r21, r25
    9854:	61 1d       	adc	r22, r1
    9856:	71 1d       	adc	r23, r1
    9858:	c8 01       	movw	r24, r16
    985a:	86 db       	rcall	.-2292   	; 0x8f68 <move_window>
    985c:	89 2b       	or	r24, r25
    985e:	19 f7       	brne	.-58     	; 0x9826 <get_fat.isra.7+0x72>
    9860:	f1 e0       	ldi	r31, 0x01	; 1
    9862:	bf 22       	and	r11, r31
    9864:	f8 01       	movw	r30, r16
    9866:	ea 0d       	add	r30, r10
    9868:	fb 1d       	adc	r31, r11
    986a:	85 a9       	ldd	r24, Z+53	; 0x35
    986c:	6c 2f       	mov	r22, r28
    986e:	70 e0       	ldi	r23, 0x00	; 0
    9870:	78 2b       	or	r23, r24
    9872:	c0 fe       	sbrs	r12, 0
    9874:	06 c0       	rjmp	.+12     	; 0x9882 <get_fat.isra.7+0xce>
    9876:	54 e0       	ldi	r21, 0x04	; 4
    9878:	76 95       	lsr	r23
    987a:	67 95       	ror	r22
    987c:	5a 95       	dec	r21
    987e:	e1 f7       	brne	.-8      	; 0x9878 <get_fat.isra.7+0xc4>
    9880:	1e c0       	rjmp	.+60     	; 0x98be <get_fat.isra.7+0x10a>
    9882:	7f 70       	andi	r23, 0x0F	; 15
    9884:	1c c0       	rjmp	.+56     	; 0x98be <get_fat.isra.7+0x10a>
    9886:	77 27       	eor	r23, r23
    9888:	6f 2d       	mov	r22, r15
    988a:	5e 2d       	mov	r21, r14
    988c:	4d 2d       	mov	r20, r13
    988e:	85 a1       	ldd	r24, Z+37	; 0x25
    9890:	96 a1       	ldd	r25, Z+38	; 0x26
    9892:	a7 a1       	ldd	r26, Z+39	; 0x27
    9894:	b0 a5       	ldd	r27, Z+40	; 0x28
    9896:	48 0f       	add	r20, r24
    9898:	59 1f       	adc	r21, r25
    989a:	6a 1f       	adc	r22, r26
    989c:	7b 1f       	adc	r23, r27
    989e:	cf 01       	movw	r24, r30
    98a0:	63 db       	rcall	.-2362   	; 0x8f68 <move_window>
    98a2:	89 2b       	or	r24, r25
    98a4:	09 f0       	breq	.+2      	; 0x98a8 <get_fat.isra.7+0xf4>
    98a6:	bf cf       	rjmp	.-130    	; 0x9826 <get_fat.isra.7+0x72>
    98a8:	cc 0c       	add	r12, r12
    98aa:	dd 1c       	adc	r13, r13
    98ac:	e8 94       	clt
    98ae:	c0 f8       	bld	r12, 0
    98b0:	f1 e0       	ldi	r31, 0x01	; 1
    98b2:	df 22       	and	r13, r31
    98b4:	f8 01       	movw	r30, r16
    98b6:	ec 0d       	add	r30, r12
    98b8:	fd 1d       	adc	r31, r13
    98ba:	65 a9       	ldd	r22, Z+53	; 0x35
    98bc:	76 a9       	ldd	r23, Z+54	; 0x36
    98be:	80 e0       	ldi	r24, 0x00	; 0
    98c0:	90 e0       	ldi	r25, 0x00	; 0
    98c2:	26 c0       	rjmp	.+76     	; 0x9910 <get_fat.isra.7+0x15c>
    98c4:	85 a1       	ldd	r24, Z+37	; 0x25
    98c6:	96 a1       	ldd	r25, Z+38	; 0x26
    98c8:	a7 a1       	ldd	r26, Z+39	; 0x27
    98ca:	b0 a5       	ldd	r27, Z+40	; 0x28
    98cc:	27 e0       	ldi	r18, 0x07	; 7
    98ce:	76 95       	lsr	r23
    98d0:	67 95       	ror	r22
    98d2:	57 95       	ror	r21
    98d4:	47 95       	ror	r20
    98d6:	2a 95       	dec	r18
    98d8:	d1 f7       	brne	.-12     	; 0x98ce <get_fat.isra.7+0x11a>
    98da:	48 0f       	add	r20, r24
    98dc:	59 1f       	adc	r21, r25
    98de:	6a 1f       	adc	r22, r26
    98e0:	7b 1f       	adc	r23, r27
    98e2:	cf 01       	movw	r24, r30
    98e4:	41 db       	rcall	.-2430   	; 0x8f68 <move_window>
    98e6:	89 2b       	or	r24, r25
    98e8:	09 f0       	breq	.+2      	; 0x98ec <get_fat.isra.7+0x138>
    98ea:	9d cf       	rjmp	.-198    	; 0x9826 <get_fat.isra.7+0x72>
    98ec:	0b 5c       	subi	r16, 0xCB	; 203
    98ee:	1f 4f       	sbci	r17, 0xFF	; 255
    98f0:	cc 0c       	add	r12, r12
    98f2:	dd 1c       	adc	r13, r13
    98f4:	cc 0c       	add	r12, r12
    98f6:	dd 1c       	adc	r13, r13
    98f8:	c6 01       	movw	r24, r12
    98fa:	8c 7f       	andi	r24, 0xFC	; 252
    98fc:	91 70       	andi	r25, 0x01	; 1
    98fe:	80 0f       	add	r24, r16
    9900:	91 1f       	adc	r25, r17
    9902:	5b d9       	rcall	.-3402   	; 0x8bba <ld_dword>
    9904:	9f 70       	andi	r25, 0x0F	; 15
    9906:	04 c0       	rjmp	.+8      	; 0x9910 <get_fat.isra.7+0x15c>
    9908:	61 e0       	ldi	r22, 0x01	; 1
    990a:	70 e0       	ldi	r23, 0x00	; 0
    990c:	80 e0       	ldi	r24, 0x00	; 0
    990e:	90 e0       	ldi	r25, 0x00	; 0
    9910:	cd b7       	in	r28, 0x3d	; 61
    9912:	de b7       	in	r29, 0x3e	; 62
    9914:	ea e0       	ldi	r30, 0x0A	; 10
    9916:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0000991a <dir_sdi>:
    991a:	a0 e0       	ldi	r26, 0x00	; 0
    991c:	b0 e0       	ldi	r27, 0x00	; 0
    991e:	e3 e9       	ldi	r30, 0x93	; 147
    9920:	fc e4       	ldi	r31, 0x4C	; 76
    9922:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
    9926:	ec 01       	movw	r28, r24
    9928:	6a 01       	movw	r12, r20
    992a:	7b 01       	movw	r14, r22
    992c:	41 15       	cp	r20, r1
    992e:	51 05       	cpc	r21, r1
    9930:	80 e2       	ldi	r24, 0x20	; 32
    9932:	68 07       	cpc	r22, r24
    9934:	71 05       	cpc	r23, r1
    9936:	18 f0       	brcs	.+6      	; 0x993e <dir_sdi+0x24>
    9938:	82 e0       	ldi	r24, 0x02	; 2
    993a:	90 e0       	ldi	r25, 0x00	; 0
    993c:	a9 c0       	rjmp	.+338    	; 0x9a90 <dir_sdi+0x176>
    993e:	db 01       	movw	r26, r22
    9940:	ca 01       	movw	r24, r20
    9942:	8f 71       	andi	r24, 0x1F	; 31
    9944:	99 27       	eor	r25, r25
    9946:	aa 27       	eor	r26, r26
    9948:	bb 27       	eor	r27, r27
    994a:	89 2b       	or	r24, r25
    994c:	8a 2b       	or	r24, r26
    994e:	8b 2b       	or	r24, r27
    9950:	99 f7       	brne	.-26     	; 0x9938 <dir_sdi+0x1e>
    9952:	08 81       	ld	r16, Y
    9954:	19 81       	ldd	r17, Y+1	; 0x01
    9956:	4e 87       	std	Y+14, r20	; 0x0e
    9958:	5f 87       	std	Y+15, r21	; 0x0f
    995a:	68 8b       	std	Y+16, r22	; 0x10
    995c:	79 8b       	std	Y+17, r23	; 0x11
    995e:	8e 80       	ldd	r8, Y+6	; 0x06
    9960:	9f 80       	ldd	r9, Y+7	; 0x07
    9962:	a8 84       	ldd	r10, Y+8	; 0x08
    9964:	b9 84       	ldd	r11, Y+9	; 0x09
    9966:	81 14       	cp	r8, r1
    9968:	91 04       	cpc	r9, r1
    996a:	a1 04       	cpc	r10, r1
    996c:	b1 04       	cpc	r11, r1
    996e:	51 f5       	brne	.+84     	; 0x99c4 <dir_sdi+0xaa>
    9970:	f8 01       	movw	r30, r16
    9972:	80 81       	ld	r24, Z
    9974:	83 30       	cpi	r24, 0x03	; 3
    9976:	40 f0       	brcs	.+16     	; 0x9988 <dir_sdi+0x6e>
    9978:	81 a5       	ldd	r24, Z+41	; 0x29
    997a:	92 a5       	ldd	r25, Z+42	; 0x2a
    997c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    997e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9980:	00 97       	sbiw	r24, 0x00	; 0
    9982:	a1 05       	cpc	r26, r1
    9984:	b1 05       	cpc	r27, r1
    9986:	e1 f4       	brne	.+56     	; 0x99c0 <dir_sdi+0xa6>
    9988:	f8 01       	movw	r30, r16
    998a:	87 81       	ldd	r24, Z+7	; 0x07
    998c:	90 85       	ldd	r25, Z+8	; 0x08
    998e:	a0 e0       	ldi	r26, 0x00	; 0
    9990:	b0 e0       	ldi	r27, 0x00	; 0
    9992:	b7 01       	movw	r22, r14
    9994:	a6 01       	movw	r20, r12
    9996:	25 e0       	ldi	r18, 0x05	; 5
    9998:	76 95       	lsr	r23
    999a:	67 95       	ror	r22
    999c:	57 95       	ror	r21
    999e:	47 95       	ror	r20
    99a0:	2a 95       	dec	r18
    99a2:	d1 f7       	brne	.-12     	; 0x9998 <dir_sdi+0x7e>
    99a4:	48 17       	cp	r20, r24
    99a6:	59 07       	cpc	r21, r25
    99a8:	6a 07       	cpc	r22, r26
    99aa:	7b 07       	cpc	r23, r27
    99ac:	28 f6       	brcc	.-118    	; 0x9938 <dir_sdi+0x1e>
    99ae:	81 a5       	ldd	r24, Z+41	; 0x29
    99b0:	92 a5       	ldd	r25, Z+42	; 0x2a
    99b2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    99b4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    99b6:	8e 8b       	std	Y+22, r24	; 0x16
    99b8:	9f 8b       	std	Y+23, r25	; 0x17
    99ba:	a8 8f       	std	Y+24, r26	; 0x18
    99bc:	b9 8f       	std	Y+25, r27	; 0x19
    99be:	3d c0       	rjmp	.+122    	; 0x9a3a <dir_sdi+0x120>
    99c0:	4c 01       	movw	r8, r24
    99c2:	5d 01       	movw	r10, r26
    99c4:	f8 01       	movw	r30, r16
    99c6:	41 84       	ldd	r4, Z+9	; 0x09
    99c8:	52 84       	ldd	r5, Z+10	; 0x0a
    99ca:	61 2c       	mov	r6, r1
    99cc:	71 2c       	mov	r7, r1
    99ce:	39 e0       	ldi	r19, 0x09	; 9
    99d0:	44 0c       	add	r4, r4
    99d2:	55 1c       	adc	r5, r5
    99d4:	66 1c       	adc	r6, r6
    99d6:	77 1c       	adc	r7, r7
    99d8:	3a 95       	dec	r19
    99da:	d1 f7       	brne	.-12     	; 0x99d0 <dir_sdi+0xb6>
    99dc:	b5 01       	movw	r22, r10
    99de:	a4 01       	movw	r20, r8
    99e0:	c4 14       	cp	r12, r4
    99e2:	d5 04       	cpc	r13, r5
    99e4:	e6 04       	cpc	r14, r6
    99e6:	f7 04       	cpc	r15, r7
    99e8:	10 f1       	brcs	.+68     	; 0x9a2e <dir_sdi+0x114>
    99ea:	88 81       	ld	r24, Y
    99ec:	99 81       	ldd	r25, Y+1	; 0x01
    99ee:	e2 de       	rcall	.-572    	; 0x97b4 <get_fat.isra.7>
    99f0:	4b 01       	movw	r8, r22
    99f2:	5c 01       	movw	r10, r24
    99f4:	6f 3f       	cpi	r22, 0xFF	; 255
    99f6:	7f 4f       	sbci	r23, 0xFF	; 255
    99f8:	8f 4f       	sbci	r24, 0xFF	; 255
    99fa:	9f 4f       	sbci	r25, 0xFF	; 255
    99fc:	09 f4       	brne	.+2      	; 0x9a00 <dir_sdi+0xe6>
    99fe:	46 c0       	rjmp	.+140    	; 0x9a8c <dir_sdi+0x172>
    9a00:	82 e0       	ldi	r24, 0x02	; 2
    9a02:	88 16       	cp	r8, r24
    9a04:	91 04       	cpc	r9, r1
    9a06:	a1 04       	cpc	r10, r1
    9a08:	b1 04       	cpc	r11, r1
    9a0a:	08 f4       	brcc	.+2      	; 0x9a0e <dir_sdi+0xf4>
    9a0c:	95 cf       	rjmp	.-214    	; 0x9938 <dir_sdi+0x1e>
    9a0e:	f8 01       	movw	r30, r16
    9a10:	81 8d       	ldd	r24, Z+25	; 0x19
    9a12:	92 8d       	ldd	r25, Z+26	; 0x1a
    9a14:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9a16:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9a18:	88 16       	cp	r8, r24
    9a1a:	99 06       	cpc	r9, r25
    9a1c:	aa 06       	cpc	r10, r26
    9a1e:	bb 06       	cpc	r11, r27
    9a20:	08 f0       	brcs	.+2      	; 0x9a24 <dir_sdi+0x10a>
    9a22:	8a cf       	rjmp	.-236    	; 0x9938 <dir_sdi+0x1e>
    9a24:	c4 18       	sub	r12, r4
    9a26:	d5 08       	sbc	r13, r5
    9a28:	e6 08       	sbc	r14, r6
    9a2a:	f7 08       	sbc	r15, r7
    9a2c:	d7 cf       	rjmp	.-82     	; 0x99dc <dir_sdi+0xc2>
    9a2e:	c8 01       	movw	r24, r16
    9a30:	e8 d8       	rcall	.-3632   	; 0x8c02 <clust2sect>
    9a32:	6e 8b       	std	Y+22, r22	; 0x16
    9a34:	7f 8b       	std	Y+23, r23	; 0x17
    9a36:	88 8f       	std	Y+24, r24	; 0x18
    9a38:	99 8f       	std	Y+25, r25	; 0x19
    9a3a:	8a 8a       	std	Y+18, r8	; 0x12
    9a3c:	9b 8a       	std	Y+19, r9	; 0x13
    9a3e:	ac 8a       	std	Y+20, r10	; 0x14
    9a40:	bd 8a       	std	Y+21, r11	; 0x15
    9a42:	8e 89       	ldd	r24, Y+22	; 0x16
    9a44:	9f 89       	ldd	r25, Y+23	; 0x17
    9a46:	a8 8d       	ldd	r26, Y+24	; 0x18
    9a48:	b9 8d       	ldd	r27, Y+25	; 0x19
    9a4a:	00 97       	sbiw	r24, 0x00	; 0
    9a4c:	a1 05       	cpc	r26, r1
    9a4e:	b1 05       	cpc	r27, r1
    9a50:	09 f4       	brne	.+2      	; 0x9a54 <dir_sdi+0x13a>
    9a52:	72 cf       	rjmp	.-284    	; 0x9938 <dir_sdi+0x1e>
    9a54:	b7 01       	movw	r22, r14
    9a56:	a6 01       	movw	r20, r12
    9a58:	29 e0       	ldi	r18, 0x09	; 9
    9a5a:	76 95       	lsr	r23
    9a5c:	67 95       	ror	r22
    9a5e:	57 95       	ror	r21
    9a60:	47 95       	ror	r20
    9a62:	2a 95       	dec	r18
    9a64:	d1 f7       	brne	.-12     	; 0x9a5a <dir_sdi+0x140>
    9a66:	84 0f       	add	r24, r20
    9a68:	95 1f       	adc	r25, r21
    9a6a:	a6 1f       	adc	r26, r22
    9a6c:	b7 1f       	adc	r27, r23
    9a6e:	8e 8b       	std	Y+22, r24	; 0x16
    9a70:	9f 8b       	std	Y+23, r25	; 0x17
    9a72:	a8 8f       	std	Y+24, r26	; 0x18
    9a74:	b9 8f       	std	Y+25, r27	; 0x19
    9a76:	0b 5c       	subi	r16, 0xCB	; 203
    9a78:	1f 4f       	sbci	r17, 0xFF	; 255
    9a7a:	f1 e0       	ldi	r31, 0x01	; 1
    9a7c:	df 22       	and	r13, r31
    9a7e:	c0 0e       	add	r12, r16
    9a80:	d1 1e       	adc	r13, r17
    9a82:	db 8e       	std	Y+27, r13	; 0x1b
    9a84:	ca 8e       	std	Y+26, r12	; 0x1a
    9a86:	80 e0       	ldi	r24, 0x00	; 0
    9a88:	90 e0       	ldi	r25, 0x00	; 0
    9a8a:	02 c0       	rjmp	.+4      	; 0x9a90 <dir_sdi+0x176>
    9a8c:	81 e0       	ldi	r24, 0x01	; 1
    9a8e:	90 e0       	ldi	r25, 0x00	; 0
    9a90:	cd b7       	in	r28, 0x3d	; 61
    9a92:	de b7       	in	r29, 0x3e	; 62
    9a94:	e0 e1       	ldi	r30, 0x10	; 16
    9a96:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

00009a9a <create_chain>:
    9a9a:	a0 e0       	ldi	r26, 0x00	; 0
    9a9c:	b0 e0       	ldi	r27, 0x00	; 0
    9a9e:	e3 e5       	ldi	r30, 0x53	; 83
    9aa0:	fd e4       	ldi	r31, 0x4D	; 77
    9aa2:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
    9aa6:	8c 01       	movw	r16, r24
    9aa8:	2a 01       	movw	r4, r20
    9aaa:	3b 01       	movw	r6, r22
    9aac:	fc 01       	movw	r30, r24
    9aae:	c0 81       	ld	r28, Z
    9ab0:	d1 81       	ldd	r29, Z+1	; 0x01
    9ab2:	41 15       	cp	r20, r1
    9ab4:	51 05       	cpc	r21, r1
    9ab6:	61 05       	cpc	r22, r1
    9ab8:	71 05       	cpc	r23, r1
    9aba:	99 f4       	brne	.+38     	; 0x9ae2 <create_chain+0x48>
    9abc:	8d 84       	ldd	r8, Y+13	; 0x0d
    9abe:	9e 84       	ldd	r9, Y+14	; 0x0e
    9ac0:	af 84       	ldd	r10, Y+15	; 0x0f
    9ac2:	b8 88       	ldd	r11, Y+16	; 0x10
    9ac4:	81 14       	cp	r8, r1
    9ac6:	91 04       	cpc	r9, r1
    9ac8:	a1 04       	cpc	r10, r1
    9aca:	b1 04       	cpc	r11, r1
    9acc:	51 f1       	breq	.+84     	; 0x9b22 <create_chain+0x88>
    9ace:	89 8d       	ldd	r24, Y+25	; 0x19
    9ad0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ad2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ad4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ad6:	88 16       	cp	r8, r24
    9ad8:	99 06       	cpc	r9, r25
    9ada:	aa 06       	cpc	r10, r26
    9adc:	bb 06       	cpc	r11, r27
    9ade:	28 f1       	brcs	.+74     	; 0x9b2a <create_chain+0x90>
    9ae0:	20 c0       	rjmp	.+64     	; 0x9b22 <create_chain+0x88>
    9ae2:	ce 01       	movw	r24, r28
    9ae4:	67 de       	rcall	.-818    	; 0x97b4 <get_fat.isra.7>
    9ae6:	62 30       	cpi	r22, 0x02	; 2
    9ae8:	71 05       	cpc	r23, r1
    9aea:	81 05       	cpc	r24, r1
    9aec:	91 05       	cpc	r25, r1
    9aee:	08 f4       	brcc	.+2      	; 0x9af2 <create_chain+0x58>
    9af0:	95 c0       	rjmp	.+298    	; 0x9c1c <create_chain+0x182>
    9af2:	6f 3f       	cpi	r22, 0xFF	; 255
    9af4:	ff ef       	ldi	r31, 0xFF	; 255
    9af6:	7f 07       	cpc	r23, r31
    9af8:	8f 07       	cpc	r24, r31
    9afa:	9f 07       	cpc	r25, r31
    9afc:	29 f4       	brne	.+10     	; 0x9b08 <create_chain+0x6e>
    9afe:	4f ef       	ldi	r20, 0xFF	; 255
    9b00:	3f ef       	ldi	r19, 0xFF	; 255
    9b02:	2f ef       	ldi	r18, 0xFF	; 255
    9b04:	9f ef       	ldi	r25, 0xFF	; 255
    9b06:	92 c0       	rjmp	.+292    	; 0x9c2c <create_chain+0x192>
    9b08:	c9 8c       	ldd	r12, Y+25	; 0x19
    9b0a:	da 8c       	ldd	r13, Y+26	; 0x1a
    9b0c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9b0e:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9b10:	6c 15       	cp	r22, r12
    9b12:	7d 05       	cpc	r23, r13
    9b14:	8e 05       	cpc	r24, r14
    9b16:	9f 05       	cpc	r25, r15
    9b18:	08 f4       	brcc	.+2      	; 0x9b1c <create_chain+0x82>
    9b1a:	85 c0       	rjmp	.+266    	; 0x9c26 <create_chain+0x18c>
    9b1c:	53 01       	movw	r10, r6
    9b1e:	42 01       	movw	r8, r4
    9b20:	04 c0       	rjmp	.+8      	; 0x9b2a <create_chain+0x90>
    9b22:	81 2c       	mov	r8, r1
    9b24:	91 2c       	mov	r9, r1
    9b26:	54 01       	movw	r10, r8
    9b28:	83 94       	inc	r8
    9b2a:	75 01       	movw	r14, r10
    9b2c:	64 01       	movw	r12, r8
    9b2e:	2f ef       	ldi	r18, 0xFF	; 255
    9b30:	c2 1a       	sub	r12, r18
    9b32:	d2 0a       	sbc	r13, r18
    9b34:	e2 0a       	sbc	r14, r18
    9b36:	f2 0a       	sbc	r15, r18
    9b38:	89 8d       	ldd	r24, Y+25	; 0x19
    9b3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9b3c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9b3e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9b40:	c8 16       	cp	r12, r24
    9b42:	d9 06       	cpc	r13, r25
    9b44:	ea 06       	cpc	r14, r26
    9b46:	fb 06       	cpc	r15, r27
    9b48:	68 f0       	brcs	.+26     	; 0x9b64 <create_chain+0xca>
    9b4a:	82 e0       	ldi	r24, 0x02	; 2
    9b4c:	88 16       	cp	r8, r24
    9b4e:	91 04       	cpc	r9, r1
    9b50:	a1 04       	cpc	r10, r1
    9b52:	b1 04       	cpc	r11, r1
    9b54:	10 f4       	brcc	.+4      	; 0x9b5a <create_chain+0xc0>
    9b56:	40 e0       	ldi	r20, 0x00	; 0
    9b58:	62 c0       	rjmp	.+196    	; 0x9c1e <create_chain+0x184>
    9b5a:	82 e0       	ldi	r24, 0x02	; 2
    9b5c:	c8 2e       	mov	r12, r24
    9b5e:	d1 2c       	mov	r13, r1
    9b60:	e1 2c       	mov	r14, r1
    9b62:	f1 2c       	mov	r15, r1
    9b64:	b7 01       	movw	r22, r14
    9b66:	a6 01       	movw	r20, r12
    9b68:	f8 01       	movw	r30, r16
    9b6a:	80 81       	ld	r24, Z
    9b6c:	91 81       	ldd	r25, Z+1	; 0x01
    9b6e:	22 de       	rcall	.-956    	; 0x97b4 <get_fat.isra.7>
    9b70:	61 15       	cp	r22, r1
    9b72:	71 05       	cpc	r23, r1
    9b74:	81 05       	cpc	r24, r1
    9b76:	91 05       	cpc	r25, r1
    9b78:	91 f0       	breq	.+36     	; 0x9b9e <create_chain+0x104>
    9b7a:	61 30       	cpi	r22, 0x01	; 1
    9b7c:	71 05       	cpc	r23, r1
    9b7e:	81 05       	cpc	r24, r1
    9b80:	91 05       	cpc	r25, r1
    9b82:	09 f4       	brne	.+2      	; 0x9b86 <create_chain+0xec>
    9b84:	4b c0       	rjmp	.+150    	; 0x9c1c <create_chain+0x182>
    9b86:	6f 3f       	cpi	r22, 0xFF	; 255
    9b88:	7f 4f       	sbci	r23, 0xFF	; 255
    9b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    9b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b8e:	09 f4       	brne	.+2      	; 0x9b92 <create_chain+0xf8>
    9b90:	b6 cf       	rjmp	.-148    	; 0x9afe <create_chain+0x64>
    9b92:	c8 14       	cp	r12, r8
    9b94:	d9 04       	cpc	r13, r9
    9b96:	ea 04       	cpc	r14, r10
    9b98:	fb 04       	cpc	r15, r11
    9b9a:	49 f6       	brne	.-110    	; 0x9b2e <create_chain+0x94>
    9b9c:	dc cf       	rjmp	.-72     	; 0x9b56 <create_chain+0xbc>
    9b9e:	0f ef       	ldi	r16, 0xFF	; 255
    9ba0:	1f ef       	ldi	r17, 0xFF	; 255
    9ba2:	98 01       	movw	r18, r16
    9ba4:	b7 01       	movw	r22, r14
    9ba6:	a6 01       	movw	r20, r12
    9ba8:	ce 01       	movw	r24, r28
    9baa:	07 dd       	rcall	.-1522   	; 0x95ba <put_fat>
    9bac:	00 97       	sbiw	r24, 0x00	; 0
    9bae:	99 f5       	brne	.+102    	; 0x9c16 <create_chain+0x17c>
    9bb0:	41 14       	cp	r4, r1
    9bb2:	51 04       	cpc	r5, r1
    9bb4:	61 04       	cpc	r6, r1
    9bb6:	71 04       	cpc	r7, r1
    9bb8:	e9 f4       	brne	.+58     	; 0x9bf4 <create_chain+0x15a>
    9bba:	cd 86       	std	Y+13, r12	; 0x0d
    9bbc:	de 86       	std	Y+14, r13	; 0x0e
    9bbe:	ef 86       	std	Y+15, r14	; 0x0f
    9bc0:	f8 8a       	std	Y+16, r15	; 0x10
    9bc2:	89 89       	ldd	r24, Y+17	; 0x11
    9bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    9bc6:	ab 89       	ldd	r26, Y+19	; 0x13
    9bc8:	bc 89       	ldd	r27, Y+20	; 0x14
    9bca:	49 8d       	ldd	r20, Y+25	; 0x19
    9bcc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9bce:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9bd0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9bd2:	42 50       	subi	r20, 0x02	; 2
    9bd4:	51 09       	sbc	r21, r1
    9bd6:	61 09       	sbc	r22, r1
    9bd8:	71 09       	sbc	r23, r1
    9bda:	84 17       	cp	r24, r20
    9bdc:	95 07       	cpc	r25, r21
    9bde:	a6 07       	cpc	r26, r22
    9be0:	b7 07       	cpc	r27, r23
    9be2:	88 f4       	brcc	.+34     	; 0x9c06 <create_chain+0x16c>
    9be4:	01 97       	sbiw	r24, 0x01	; 1
    9be6:	a1 09       	sbc	r26, r1
    9be8:	b1 09       	sbc	r27, r1
    9bea:	89 8b       	std	Y+17, r24	; 0x11
    9bec:	9a 8b       	std	Y+18, r25	; 0x12
    9bee:	ab 8b       	std	Y+19, r26	; 0x13
    9bf0:	bc 8b       	std	Y+20, r27	; 0x14
    9bf2:	09 c0       	rjmp	.+18     	; 0x9c06 <create_chain+0x16c>
    9bf4:	97 01       	movw	r18, r14
    9bf6:	86 01       	movw	r16, r12
    9bf8:	b3 01       	movw	r22, r6
    9bfa:	a2 01       	movw	r20, r4
    9bfc:	ce 01       	movw	r24, r28
    9bfe:	dd dc       	rcall	.-1606   	; 0x95ba <put_fat>
    9c00:	00 97       	sbiw	r24, 0x00	; 0
    9c02:	d9 f2       	breq	.-74     	; 0x9bba <create_chain+0x120>
    9c04:	08 c0       	rjmp	.+16     	; 0x9c16 <create_chain+0x17c>
    9c06:	8c 81       	ldd	r24, Y+4	; 0x04
    9c08:	81 60       	ori	r24, 0x01	; 1
    9c0a:	8c 83       	std	Y+4, r24	; 0x04
    9c0c:	4c 2d       	mov	r20, r12
    9c0e:	3d 2d       	mov	r19, r13
    9c10:	2e 2d       	mov	r18, r14
    9c12:	9f 2d       	mov	r25, r15
    9c14:	0b c0       	rjmp	.+22     	; 0x9c2c <create_chain+0x192>
    9c16:	01 97       	sbiw	r24, 0x01	; 1
    9c18:	09 f4       	brne	.+2      	; 0x9c1c <create_chain+0x182>
    9c1a:	71 cf       	rjmp	.-286    	; 0x9afe <create_chain+0x64>
    9c1c:	41 e0       	ldi	r20, 0x01	; 1
    9c1e:	30 e0       	ldi	r19, 0x00	; 0
    9c20:	20 e0       	ldi	r18, 0x00	; 0
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	03 c0       	rjmp	.+6      	; 0x9c2c <create_chain+0x192>
    9c26:	46 2f       	mov	r20, r22
    9c28:	37 2f       	mov	r19, r23
    9c2a:	28 2f       	mov	r18, r24
    9c2c:	64 2f       	mov	r22, r20
    9c2e:	73 2f       	mov	r23, r19
    9c30:	82 2f       	mov	r24, r18
    9c32:	cd b7       	in	r28, 0x3d	; 61
    9c34:	de b7       	in	r29, 0x3e	; 62
    9c36:	e0 e1       	ldi	r30, 0x10	; 16
    9c38:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

00009c3c <remove_chain>:
    9c3c:	4f 92       	push	r4
    9c3e:	5f 92       	push	r5
    9c40:	6f 92       	push	r6
    9c42:	7f 92       	push	r7
    9c44:	af 92       	push	r10
    9c46:	bf 92       	push	r11
    9c48:	cf 92       	push	r12
    9c4a:	df 92       	push	r13
    9c4c:	ef 92       	push	r14
    9c4e:	ff 92       	push	r15
    9c50:	0f 93       	push	r16
    9c52:	1f 93       	push	r17
    9c54:	cf 93       	push	r28
    9c56:	df 93       	push	r29
    9c58:	5c 01       	movw	r10, r24
    9c5a:	6a 01       	movw	r12, r20
    9c5c:	7b 01       	movw	r14, r22
    9c5e:	b9 01       	movw	r22, r18
    9c60:	a8 01       	movw	r20, r16
    9c62:	22 e0       	ldi	r18, 0x02	; 2
    9c64:	c2 16       	cp	r12, r18
    9c66:	d1 04       	cpc	r13, r1
    9c68:	e1 04       	cpc	r14, r1
    9c6a:	f1 04       	cpc	r15, r1
    9c6c:	10 f4       	brcc	.+4      	; 0x9c72 <remove_chain+0x36>
    9c6e:	22 e0       	ldi	r18, 0x02	; 2
    9c70:	27 c0       	rjmp	.+78     	; 0x9cc0 <remove_chain+0x84>
    9c72:	fc 01       	movw	r30, r24
    9c74:	c0 81       	ld	r28, Z
    9c76:	d1 81       	ldd	r29, Z+1	; 0x01
    9c78:	89 8d       	ldd	r24, Y+25	; 0x19
    9c7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9c7c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9c7e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9c80:	c8 16       	cp	r12, r24
    9c82:	d9 06       	cpc	r13, r25
    9c84:	ea 06       	cpc	r14, r26
    9c86:	fb 06       	cpc	r15, r27
    9c88:	90 f7       	brcc	.-28     	; 0x9c6e <remove_chain+0x32>
    9c8a:	41 15       	cp	r20, r1
    9c8c:	51 05       	cpc	r21, r1
    9c8e:	61 05       	cpc	r22, r1
    9c90:	71 05       	cpc	r23, r1
    9c92:	41 f0       	breq	.+16     	; 0x9ca4 <remove_chain+0x68>
    9c94:	0f ef       	ldi	r16, 0xFF	; 255
    9c96:	1f ef       	ldi	r17, 0xFF	; 255
    9c98:	98 01       	movw	r18, r16
    9c9a:	ce 01       	movw	r24, r28
    9c9c:	8e dc       	rcall	.-1764   	; 0x95ba <put_fat>
    9c9e:	00 97       	sbiw	r24, 0x00	; 0
    9ca0:	09 f0       	breq	.+2      	; 0x9ca4 <remove_chain+0x68>
    9ca2:	4c c0       	rjmp	.+152    	; 0x9d3c <remove_chain+0x100>
    9ca4:	b7 01       	movw	r22, r14
    9ca6:	a6 01       	movw	r20, r12
    9ca8:	f5 01       	movw	r30, r10
    9caa:	80 81       	ld	r24, Z
    9cac:	91 81       	ldd	r25, Z+1	; 0x01
    9cae:	82 dd       	rcall	.-1276   	; 0x97b4 <get_fat.isra.7>
    9cb0:	2b 01       	movw	r4, r22
    9cb2:	3c 01       	movw	r6, r24
    9cb4:	61 15       	cp	r22, r1
    9cb6:	71 05       	cpc	r23, r1
    9cb8:	81 05       	cpc	r24, r1
    9cba:	91 05       	cpc	r25, r1
    9cbc:	19 f4       	brne	.+6      	; 0x9cc4 <remove_chain+0x88>
    9cbe:	20 e0       	ldi	r18, 0x00	; 0
    9cc0:	90 e0       	ldi	r25, 0x00	; 0
    9cc2:	3d c0       	rjmp	.+122    	; 0x9d3e <remove_chain+0x102>
    9cc4:	61 30       	cpi	r22, 0x01	; 1
    9cc6:	71 05       	cpc	r23, r1
    9cc8:	81 05       	cpc	r24, r1
    9cca:	91 05       	cpc	r25, r1
    9ccc:	81 f2       	breq	.-96     	; 0x9c6e <remove_chain+0x32>
    9cce:	6f 3f       	cpi	r22, 0xFF	; 255
    9cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    9cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    9cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    9cd6:	81 f1       	breq	.+96     	; 0x9d38 <remove_chain+0xfc>
    9cd8:	00 e0       	ldi	r16, 0x00	; 0
    9cda:	10 e0       	ldi	r17, 0x00	; 0
    9cdc:	98 01       	movw	r18, r16
    9cde:	b7 01       	movw	r22, r14
    9ce0:	a6 01       	movw	r20, r12
    9ce2:	ce 01       	movw	r24, r28
    9ce4:	6a dc       	rcall	.-1836   	; 0x95ba <put_fat>
    9ce6:	00 97       	sbiw	r24, 0x00	; 0
    9ce8:	49 f5       	brne	.+82     	; 0x9d3c <remove_chain+0x100>
    9cea:	89 89       	ldd	r24, Y+17	; 0x11
    9cec:	9a 89       	ldd	r25, Y+18	; 0x12
    9cee:	ab 89       	ldd	r26, Y+19	; 0x13
    9cf0:	bc 89       	ldd	r27, Y+20	; 0x14
    9cf2:	49 8d       	ldd	r20, Y+25	; 0x19
    9cf4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9cf6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9cf8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9cfa:	6a 01       	movw	r12, r20
    9cfc:	7b 01       	movw	r14, r22
    9cfe:	e2 e0       	ldi	r30, 0x02	; 2
    9d00:	ce 1a       	sub	r12, r30
    9d02:	d1 08       	sbc	r13, r1
    9d04:	e1 08       	sbc	r14, r1
    9d06:	f1 08       	sbc	r15, r1
    9d08:	8c 15       	cp	r24, r12
    9d0a:	9d 05       	cpc	r25, r13
    9d0c:	ae 05       	cpc	r26, r14
    9d0e:	bf 05       	cpc	r27, r15
    9d10:	50 f4       	brcc	.+20     	; 0x9d26 <remove_chain+0xea>
    9d12:	01 96       	adiw	r24, 0x01	; 1
    9d14:	a1 1d       	adc	r26, r1
    9d16:	b1 1d       	adc	r27, r1
    9d18:	89 8b       	std	Y+17, r24	; 0x11
    9d1a:	9a 8b       	std	Y+18, r25	; 0x12
    9d1c:	ab 8b       	std	Y+19, r26	; 0x13
    9d1e:	bc 8b       	std	Y+20, r27	; 0x14
    9d20:	8c 81       	ldd	r24, Y+4	; 0x04
    9d22:	81 60       	ori	r24, 0x01	; 1
    9d24:	8c 83       	std	Y+4, r24	; 0x04
    9d26:	73 01       	movw	r14, r6
    9d28:	62 01       	movw	r12, r4
    9d2a:	44 16       	cp	r4, r20
    9d2c:	55 06       	cpc	r5, r21
    9d2e:	66 06       	cpc	r6, r22
    9d30:	77 06       	cpc	r7, r23
    9d32:	08 f4       	brcc	.+2      	; 0x9d36 <remove_chain+0xfa>
    9d34:	b7 cf       	rjmp	.-146    	; 0x9ca4 <remove_chain+0x68>
    9d36:	c3 cf       	rjmp	.-122    	; 0x9cbe <remove_chain+0x82>
    9d38:	21 e0       	ldi	r18, 0x01	; 1
    9d3a:	c2 cf       	rjmp	.-124    	; 0x9cc0 <remove_chain+0x84>
    9d3c:	28 2f       	mov	r18, r24
    9d3e:	82 2f       	mov	r24, r18
    9d40:	df 91       	pop	r29
    9d42:	cf 91       	pop	r28
    9d44:	1f 91       	pop	r17
    9d46:	0f 91       	pop	r16
    9d48:	ff 90       	pop	r15
    9d4a:	ef 90       	pop	r14
    9d4c:	df 90       	pop	r13
    9d4e:	cf 90       	pop	r12
    9d50:	bf 90       	pop	r11
    9d52:	af 90       	pop	r10
    9d54:	7f 90       	pop	r7
    9d56:	6f 90       	pop	r6
    9d58:	5f 90       	pop	r5
    9d5a:	4f 90       	pop	r4
    9d5c:	08 95       	ret

00009d5e <get_fileinfo>:
    9d5e:	a0 e0       	ldi	r26, 0x00	; 0
    9d60:	b0 e0       	ldi	r27, 0x00	; 0
    9d62:	e5 eb       	ldi	r30, 0xB5	; 181
    9d64:	fe e4       	ldi	r31, 0x4E	; 78
    9d66:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    9d6a:	dc 01       	movw	r26, r24
    9d6c:	cd 90       	ld	r12, X+
    9d6e:	dc 90       	ld	r13, X
    9d70:	11 97       	sbiw	r26, 0x01	; 1
    9d72:	fb 01       	movw	r30, r22
    9d74:	16 8a       	std	Z+22, r1	; 0x16
    9d76:	56 96       	adiw	r26, 0x16	; 22
    9d78:	0d 91       	ld	r16, X+
    9d7a:	1d 91       	ld	r17, X+
    9d7c:	2d 91       	ld	r18, X+
    9d7e:	3c 91       	ld	r19, X
    9d80:	59 97       	sbiw	r26, 0x19	; 25
    9d82:	01 15       	cp	r16, r1
    9d84:	11 05       	cpc	r17, r1
    9d86:	21 05       	cpc	r18, r1
    9d88:	31 05       	cpc	r19, r1
    9d8a:	09 f4       	brne	.+2      	; 0x9d8e <get_fileinfo+0x30>
    9d8c:	bb c0       	rjmp	.+374    	; 0x9f04 <get_fileinfo+0x1a6>
    9d8e:	eb 01       	movw	r28, r22
    9d90:	8c 01       	movw	r16, r24
    9d92:	fc 01       	movw	r30, r24
    9d94:	80 a5       	ldd	r24, Z+40	; 0x28
    9d96:	91 a5       	ldd	r25, Z+41	; 0x29
    9d98:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9d9a:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    9d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    9da0:	af 4f       	sbci	r26, 0xFF	; 255
    9da2:	bf 4f       	sbci	r27, 0xFF	; 255
    9da4:	59 f1       	breq	.+86     	; 0x9dfc <get_fileinfo+0x9e>
    9da6:	5b 01       	movw	r10, r22
    9da8:	26 e1       	ldi	r18, 0x16	; 22
    9daa:	a2 0e       	add	r10, r18
    9dac:	b1 1c       	adc	r11, r1
    9dae:	e1 2c       	mov	r14, r1
    9db0:	f1 2c       	mov	r15, r1
    9db2:	d6 01       	movw	r26, r12
    9db4:	1b 96       	adiw	r26, 0x0b	; 11
    9db6:	ed 91       	ld	r30, X+
    9db8:	fc 91       	ld	r31, X
    9dba:	1c 97       	sbiw	r26, 0x0c	; 12
    9dbc:	c7 01       	movw	r24, r14
    9dbe:	88 0f       	add	r24, r24
    9dc0:	99 1f       	adc	r25, r25
    9dc2:	e8 0f       	add	r30, r24
    9dc4:	f9 1f       	adc	r31, r25
    9dc6:	80 81       	ld	r24, Z
    9dc8:	91 81       	ldd	r25, Z+1	; 0x01
    9dca:	00 97       	sbiw	r24, 0x00	; 0
    9dcc:	99 f0       	breq	.+38     	; 0x9df4 <get_fileinfo+0x96>
    9dce:	60 e0       	ldi	r22, 0x00	; 0
    9dd0:	70 e0       	ldi	r23, 0x00	; 0
    9dd2:	0e 94 88 6c 	call	0xd910	; 0xd910 <ff_convert>
    9dd6:	00 97       	sbiw	r24, 0x00	; 0
    9dd8:	59 f0       	breq	.+22     	; 0x9df0 <get_fileinfo+0x92>
    9dda:	af ef       	ldi	r26, 0xFF	; 255
    9ddc:	ea 16       	cp	r14, r26
    9dde:	f1 04       	cpc	r15, r1
    9de0:	39 f0       	breq	.+14     	; 0x9df0 <get_fileinfo+0x92>
    9de2:	bf ef       	ldi	r27, 0xFF	; 255
    9de4:	eb 1a       	sub	r14, r27
    9de6:	fb 0a       	sbc	r15, r27
    9de8:	f5 01       	movw	r30, r10
    9dea:	81 93       	st	Z+, r24
    9dec:	5f 01       	movw	r10, r30
    9dee:	e1 cf       	rjmp	.-62     	; 0x9db2 <get_fileinfo+0x54>
    9df0:	e1 2c       	mov	r14, r1
    9df2:	f1 2c       	mov	r15, r1
    9df4:	fe 01       	movw	r30, r28
    9df6:	ee 0d       	add	r30, r14
    9df8:	ff 1d       	adc	r31, r15
    9dfa:	16 8a       	std	Z+22, r1	; 0x16
    9dfc:	4e 89       	ldd	r20, Y+22	; 0x16
    9dfe:	50 e0       	ldi	r21, 0x00	; 0
    9e00:	20 e0       	ldi	r18, 0x00	; 0
    9e02:	30 e0       	ldi	r19, 0x00	; 0
    9e04:	80 e0       	ldi	r24, 0x00	; 0
    9e06:	90 e0       	ldi	r25, 0x00	; 0
    9e08:	6e e2       	ldi	r22, 0x2E	; 46
    9e0a:	d6 2e       	mov	r13, r22
    9e0c:	fc 01       	movw	r30, r24
    9e0e:	31 96       	adiw	r30, 0x01	; 1
    9e10:	d8 01       	movw	r26, r16
    9e12:	5a 96       	adiw	r26, 0x1a	; 26
    9e14:	6d 91       	ld	r22, X+
    9e16:	7c 91       	ld	r23, X
    9e18:	5b 97       	sbiw	r26, 0x1b	; 27
    9e1a:	db 01       	movw	r26, r22
    9e1c:	a8 0f       	add	r26, r24
    9e1e:	b9 1f       	adc	r27, r25
    9e20:	8c 91       	ld	r24, X
    9e22:	80 32       	cpi	r24, 0x20	; 32
    9e24:	e1 f1       	breq	.+120    	; 0x9e9e <get_fileinfo+0x140>
    9e26:	85 30       	cpi	r24, 0x05	; 5
    9e28:	09 f4       	brne	.+2      	; 0x9e2c <get_fileinfo+0xce>
    9e2a:	85 ee       	ldi	r24, 0xE5	; 229
    9e2c:	e9 30       	cpi	r30, 0x09	; 9
    9e2e:	f1 05       	cpc	r31, r1
    9e30:	69 f4       	brne	.+26     	; 0x9e4c <get_fileinfo+0xee>
    9e32:	de 01       	movw	r26, r28
    9e34:	a2 0f       	add	r26, r18
    9e36:	b3 1f       	adc	r27, r19
    9e38:	41 15       	cp	r20, r1
    9e3a:	51 05       	cpc	r21, r1
    9e3c:	19 f4       	brne	.+6      	; 0x9e44 <get_fileinfo+0xe6>
    9e3e:	56 96       	adiw	r26, 0x16	; 22
    9e40:	dc 92       	st	X, r13
    9e42:	56 97       	sbiw	r26, 0x16	; 22
    9e44:	19 96       	adiw	r26, 0x09	; 9
    9e46:	dc 92       	st	X, r13
    9e48:	2f 5f       	subi	r18, 0xFF	; 255
    9e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    9e4c:	7e 01       	movw	r14, r28
    9e4e:	e2 0e       	add	r14, r18
    9e50:	f3 1e       	adc	r15, r19
    9e52:	d7 01       	movw	r26, r14
    9e54:	19 96       	adiw	r26, 0x09	; 9
    9e56:	8c 93       	st	X, r24
    9e58:	41 15       	cp	r20, r1
    9e5a:	51 05       	cpc	r21, r1
    9e5c:	f1 f4       	brne	.+60     	; 0x9e9a <get_fileinfo+0x13c>
    9e5e:	9f eb       	ldi	r25, 0xBF	; 191
    9e60:	98 0f       	add	r25, r24
    9e62:	9a 31       	cpi	r25, 0x1A	; 26
    9e64:	b8 f4       	brcc	.+46     	; 0x9e94 <get_fileinfo+0x136>
    9e66:	d8 01       	movw	r26, r16
    9e68:	5a 96       	adiw	r26, 0x1a	; 26
    9e6a:	6d 91       	ld	r22, X+
    9e6c:	7c 91       	ld	r23, X
    9e6e:	5b 97       	sbiw	r26, 0x1b	; 27
    9e70:	db 01       	movw	r26, r22
    9e72:	1c 96       	adiw	r26, 0x0c	; 12
    9e74:	6c 91       	ld	r22, X
    9e76:	a6 2f       	mov	r26, r22
    9e78:	b0 e0       	ldi	r27, 0x00	; 0
    9e7a:	e9 30       	cpi	r30, 0x09	; 9
    9e7c:	f1 05       	cpc	r31, r1
    9e7e:	18 f4       	brcc	.+6      	; 0x9e86 <get_fileinfo+0x128>
    9e80:	68 e0       	ldi	r22, 0x08	; 8
    9e82:	70 e0       	ldi	r23, 0x00	; 0
    9e84:	02 c0       	rjmp	.+4      	; 0x9e8a <get_fileinfo+0x12c>
    9e86:	60 e1       	ldi	r22, 0x10	; 16
    9e88:	70 e0       	ldi	r23, 0x00	; 0
    9e8a:	6a 23       	and	r22, r26
    9e8c:	7b 23       	and	r23, r27
    9e8e:	67 2b       	or	r22, r23
    9e90:	09 f0       	breq	.+2      	; 0x9e94 <get_fileinfo+0x136>
    9e92:	80 5e       	subi	r24, 0xE0	; 224
    9e94:	d7 01       	movw	r26, r14
    9e96:	56 96       	adiw	r26, 0x16	; 22
    9e98:	8c 93       	st	X, r24
    9e9a:	2f 5f       	subi	r18, 0xFF	; 255
    9e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    9e9e:	cf 01       	movw	r24, r30
    9ea0:	3b 97       	sbiw	r30, 0x0b	; 11
    9ea2:	09 f0       	breq	.+2      	; 0x9ea6 <get_fileinfo+0x148>
    9ea4:	b3 cf       	rjmp	.-154    	; 0x9e0c <get_fileinfo+0xae>
    9ea6:	45 2b       	or	r20, r21
    9ea8:	71 f4       	brne	.+28     	; 0x9ec6 <get_fileinfo+0x168>
    9eaa:	fe 01       	movw	r30, r28
    9eac:	e2 0f       	add	r30, r18
    9eae:	f3 1f       	adc	r31, r19
    9eb0:	16 8a       	std	Z+22, r1	; 0x16
    9eb2:	d8 01       	movw	r26, r16
    9eb4:	5a 96       	adiw	r26, 0x1a	; 26
    9eb6:	ed 91       	ld	r30, X+
    9eb8:	fc 91       	ld	r31, X
    9eba:	5b 97       	sbiw	r26, 0x1b	; 27
    9ebc:	84 85       	ldd	r24, Z+12	; 0x0c
    9ebe:	81 11       	cpse	r24, r1
    9ec0:	02 c0       	rjmp	.+4      	; 0x9ec6 <get_fileinfo+0x168>
    9ec2:	20 e0       	ldi	r18, 0x00	; 0
    9ec4:	30 e0       	ldi	r19, 0x00	; 0
    9ec6:	fe 01       	movw	r30, r28
    9ec8:	e2 0f       	add	r30, r18
    9eca:	f3 1f       	adc	r31, r19
    9ecc:	11 86       	std	Z+9, r1	; 0x09
    9ece:	d8 01       	movw	r26, r16
    9ed0:	5a 96       	adiw	r26, 0x1a	; 26
    9ed2:	ed 91       	ld	r30, X+
    9ed4:	fc 91       	ld	r31, X
    9ed6:	5b 97       	sbiw	r26, 0x1b	; 27
    9ed8:	83 85       	ldd	r24, Z+11	; 0x0b
    9eda:	88 87       	std	Y+8, r24	; 0x08
    9edc:	5a 96       	adiw	r26, 0x1a	; 26
    9ede:	0d 91       	ld	r16, X+
    9ee0:	1c 91       	ld	r17, X
    9ee2:	5b 97       	sbiw	r26, 0x1b	; 27
    9ee4:	c8 01       	movw	r24, r16
    9ee6:	4c 96       	adiw	r24, 0x1c	; 28
    9ee8:	0e 94 dd 45 	call	0x8bba	; 0x8bba <ld_dword>
    9eec:	68 83       	st	Y, r22
    9eee:	79 83       	std	Y+1, r23	; 0x01
    9ef0:	8a 83       	std	Y+2, r24	; 0x02
    9ef2:	9b 83       	std	Y+3, r25	; 0x03
    9ef4:	c8 01       	movw	r24, r16
    9ef6:	46 96       	adiw	r24, 0x16	; 22
    9ef8:	0e 94 dd 45 	call	0x8bba	; 0x8bba <ld_dword>
    9efc:	7f 83       	std	Y+7, r23	; 0x07
    9efe:	6e 83       	std	Y+6, r22	; 0x06
    9f00:	9d 83       	std	Y+5, r25	; 0x05
    9f02:	8c 83       	std	Y+4, r24	; 0x04
    9f04:	cd b7       	in	r28, 0x3d	; 61
    9f06:	de b7       	in	r29, 0x3e	; 62
    9f08:	ea e0       	ldi	r30, 0x0A	; 10
    9f0a:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

00009f0e <dir_next>:
    9f0e:	4f 92       	push	r4
    9f10:	5f 92       	push	r5
    9f12:	6f 92       	push	r6
    9f14:	7f 92       	push	r7
    9f16:	9f 92       	push	r9
    9f18:	af 92       	push	r10
    9f1a:	bf 92       	push	r11
    9f1c:	cf 92       	push	r12
    9f1e:	df 92       	push	r13
    9f20:	ef 92       	push	r14
    9f22:	ff 92       	push	r15
    9f24:	0f 93       	push	r16
    9f26:	1f 93       	push	r17
    9f28:	cf 93       	push	r28
    9f2a:	df 93       	push	r29
    9f2c:	5b 01       	movw	r10, r22
    9f2e:	fc 01       	movw	r30, r24
    9f30:	46 89       	ldd	r20, Z+22	; 0x16
    9f32:	57 89       	ldd	r21, Z+23	; 0x17
    9f34:	60 8d       	ldd	r22, Z+24	; 0x18
    9f36:	71 8d       	ldd	r23, Z+25	; 0x19
    9f38:	41 15       	cp	r20, r1
    9f3a:	51 05       	cpc	r21, r1
    9f3c:	61 05       	cpc	r22, r1
    9f3e:	71 05       	cpc	r23, r1
    9f40:	09 f4       	brne	.+2      	; 0x9f44 <dir_next+0x36>
    9f42:	f8 c0       	rjmp	.+496    	; 0xa134 <dir_next+0x226>
    9f44:	c6 84       	ldd	r12, Z+14	; 0x0e
    9f46:	d7 84       	ldd	r13, Z+15	; 0x0f
    9f48:	e0 88       	ldd	r14, Z+16	; 0x10
    9f4a:	f1 88       	ldd	r15, Z+17	; 0x11
    9f4c:	f0 e2       	ldi	r31, 0x20	; 32
    9f4e:	cf 0e       	add	r12, r31
    9f50:	d1 1c       	adc	r13, r1
    9f52:	e1 1c       	adc	r14, r1
    9f54:	f1 1c       	adc	r15, r1
    9f56:	c1 14       	cp	r12, r1
    9f58:	d1 04       	cpc	r13, r1
    9f5a:	20 e2       	ldi	r18, 0x20	; 32
    9f5c:	e2 06       	cpc	r14, r18
    9f5e:	f1 04       	cpc	r15, r1
    9f60:	08 f0       	brcs	.+2      	; 0x9f64 <dir_next+0x56>
    9f62:	e8 c0       	rjmp	.+464    	; 0xa134 <dir_next+0x226>
    9f64:	8c 01       	movw	r16, r24
    9f66:	fc 01       	movw	r30, r24
    9f68:	c0 81       	ld	r28, Z
    9f6a:	d1 81       	ldd	r29, Z+1	; 0x01
    9f6c:	d7 01       	movw	r26, r14
    9f6e:	c6 01       	movw	r24, r12
    9f70:	91 70       	andi	r25, 0x01	; 1
    9f72:	aa 27       	eor	r26, r26
    9f74:	bb 27       	eor	r27, r27
    9f76:	89 2b       	or	r24, r25
    9f78:	8a 2b       	or	r24, r26
    9f7a:	8b 2b       	or	r24, r27
    9f7c:	09 f0       	breq	.+2      	; 0x9f80 <dir_next+0x72>
    9f7e:	ca c0       	rjmp	.+404    	; 0xa114 <dir_next+0x206>
    9f80:	4f 5f       	subi	r20, 0xFF	; 255
    9f82:	5f 4f       	sbci	r21, 0xFF	; 255
    9f84:	6f 4f       	sbci	r22, 0xFF	; 255
    9f86:	7f 4f       	sbci	r23, 0xFF	; 255
    9f88:	46 8b       	std	Z+22, r20	; 0x16
    9f8a:	57 8b       	std	Z+23, r21	; 0x17
    9f8c:	60 8f       	std	Z+24, r22	; 0x18
    9f8e:	71 8f       	std	Z+25, r23	; 0x19
    9f90:	42 89       	ldd	r20, Z+18	; 0x12
    9f92:	53 89       	ldd	r21, Z+19	; 0x13
    9f94:	64 89       	ldd	r22, Z+20	; 0x14
    9f96:	75 89       	ldd	r23, Z+21	; 0x15
    9f98:	41 15       	cp	r20, r1
    9f9a:	51 05       	cpc	r21, r1
    9f9c:	61 05       	cpc	r22, r1
    9f9e:	71 05       	cpc	r23, r1
    9fa0:	c9 f4       	brne	.+50     	; 0x9fd4 <dir_next+0xc6>
    9fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    9fa4:	98 85       	ldd	r25, Y+8	; 0x08
    9fa6:	a0 e0       	ldi	r26, 0x00	; 0
    9fa8:	b0 e0       	ldi	r27, 0x00	; 0
    9faa:	b7 01       	movw	r22, r14
    9fac:	a6 01       	movw	r20, r12
    9fae:	35 e0       	ldi	r19, 0x05	; 5
    9fb0:	76 95       	lsr	r23
    9fb2:	67 95       	ror	r22
    9fb4:	57 95       	ror	r21
    9fb6:	47 95       	ror	r20
    9fb8:	3a 95       	dec	r19
    9fba:	d1 f7       	brne	.-12     	; 0x9fb0 <dir_next+0xa2>
    9fbc:	48 17       	cp	r20, r24
    9fbe:	59 07       	cpc	r21, r25
    9fc0:	6a 07       	cpc	r22, r26
    9fc2:	7b 07       	cpc	r23, r27
    9fc4:	08 f4       	brcc	.+2      	; 0x9fc8 <dir_next+0xba>
    9fc6:	a6 c0       	rjmp	.+332    	; 0xa114 <dir_next+0x206>
    9fc8:	f8 01       	movw	r30, r16
    9fca:	16 8a       	std	Z+22, r1	; 0x16
    9fcc:	17 8a       	std	Z+23, r1	; 0x17
    9fce:	10 8e       	std	Z+24, r1	; 0x18
    9fd0:	11 8e       	std	Z+25, r1	; 0x19
    9fd2:	b0 c0       	rjmp	.+352    	; 0xa134 <dir_next+0x226>
    9fd4:	89 85       	ldd	r24, Y+9	; 0x09
    9fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9fd8:	01 97       	sbiw	r24, 0x01	; 1
    9fda:	a0 e0       	ldi	r26, 0x00	; 0
    9fdc:	b0 e0       	ldi	r27, 0x00	; 0
    9fde:	26 01       	movw	r4, r12
    9fe0:	37 01       	movw	r6, r14
    9fe2:	29 e0       	ldi	r18, 0x09	; 9
    9fe4:	76 94       	lsr	r7
    9fe6:	67 94       	ror	r6
    9fe8:	57 94       	ror	r5
    9fea:	47 94       	ror	r4
    9fec:	2a 95       	dec	r18
    9fee:	d1 f7       	brne	.-12     	; 0x9fe4 <dir_next+0xd6>
    9ff0:	84 21       	and	r24, r4
    9ff2:	95 21       	and	r25, r5
    9ff4:	a6 21       	and	r26, r6
    9ff6:	b7 21       	and	r27, r7
    9ff8:	89 2b       	or	r24, r25
    9ffa:	8a 2b       	or	r24, r26
    9ffc:	8b 2b       	or	r24, r27
    9ffe:	09 f0       	breq	.+2      	; 0xa002 <dir_next+0xf4>
    a000:	89 c0       	rjmp	.+274    	; 0xa114 <dir_next+0x206>
    a002:	ce 01       	movw	r24, r28
    a004:	d7 db       	rcall	.-2130   	; 0x97b4 <get_fat.isra.7>
    a006:	2b 01       	movw	r4, r22
    a008:	3c 01       	movw	r6, r24
    a00a:	62 30       	cpi	r22, 0x02	; 2
    a00c:	71 05       	cpc	r23, r1
    a00e:	81 05       	cpc	r24, r1
    a010:	91 05       	cpc	r25, r1
    a012:	18 f4       	brcc	.+6      	; 0xa01a <dir_next+0x10c>
    a014:	82 e0       	ldi	r24, 0x02	; 2
    a016:	90 e0       	ldi	r25, 0x00	; 0
    a018:	92 c0       	rjmp	.+292    	; 0xa13e <dir_next+0x230>
    a01a:	6f 3f       	cpi	r22, 0xFF	; 255
    a01c:	7f 4f       	sbci	r23, 0xFF	; 255
    a01e:	8f 4f       	sbci	r24, 0xFF	; 255
    a020:	9f 4f       	sbci	r25, 0xFF	; 255
    a022:	19 f4       	brne	.+6      	; 0xa02a <dir_next+0x11c>
    a024:	81 e0       	ldi	r24, 0x01	; 1
    a026:	90 e0       	ldi	r25, 0x00	; 0
    a028:	8a c0       	rjmp	.+276    	; 0xa13e <dir_next+0x230>
    a02a:	89 8d       	ldd	r24, Y+25	; 0x19
    a02c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a02e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a030:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a032:	48 16       	cp	r4, r24
    a034:	59 06       	cpc	r5, r25
    a036:	6a 06       	cpc	r6, r26
    a038:	7b 06       	cpc	r7, r27
    a03a:	08 f4       	brcc	.+2      	; 0xa03e <dir_next+0x130>
    a03c:	5c c0       	rjmp	.+184    	; 0xa0f6 <dir_next+0x1e8>
    a03e:	ab 28       	or	r10, r11
    a040:	19 f2       	breq	.-122    	; 0x9fc8 <dir_next+0xba>
    a042:	f8 01       	movw	r30, r16
    a044:	42 89       	ldd	r20, Z+18	; 0x12
    a046:	53 89       	ldd	r21, Z+19	; 0x13
    a048:	64 89       	ldd	r22, Z+20	; 0x14
    a04a:	75 89       	ldd	r23, Z+21	; 0x15
    a04c:	c8 01       	movw	r24, r16
    a04e:	25 dd       	rcall	.-1462   	; 0x9a9a <create_chain>
    a050:	2b 01       	movw	r4, r22
    a052:	3c 01       	movw	r6, r24
    a054:	61 15       	cp	r22, r1
    a056:	71 05       	cpc	r23, r1
    a058:	81 05       	cpc	r24, r1
    a05a:	91 05       	cpc	r25, r1
    a05c:	09 f4       	brne	.+2      	; 0xa060 <dir_next+0x152>
    a05e:	6d c0       	rjmp	.+218    	; 0xa13a <dir_next+0x22c>
    a060:	61 30       	cpi	r22, 0x01	; 1
    a062:	71 05       	cpc	r23, r1
    a064:	81 05       	cpc	r24, r1
    a066:	91 05       	cpc	r25, r1
    a068:	a9 f2       	breq	.-86     	; 0xa014 <dir_next+0x106>
    a06a:	6f 3f       	cpi	r22, 0xFF	; 255
    a06c:	7f 4f       	sbci	r23, 0xFF	; 255
    a06e:	8f 4f       	sbci	r24, 0xFF	; 255
    a070:	9f 4f       	sbci	r25, 0xFF	; 255
    a072:	c1 f2       	breq	.-80     	; 0xa024 <dir_next+0x116>
    a074:	ce 01       	movw	r24, r28
    a076:	0e 94 3f 47 	call	0x8e7e	; 0x8e7e <sync_window>
    a07a:	89 2b       	or	r24, r25
    a07c:	99 f6       	brne	.-90     	; 0xa024 <dir_next+0x116>
    a07e:	40 e0       	ldi	r20, 0x00	; 0
    a080:	52 e0       	ldi	r21, 0x02	; 2
    a082:	60 e0       	ldi	r22, 0x00	; 0
    a084:	70 e0       	ldi	r23, 0x00	; 0
    a086:	ce 01       	movw	r24, r28
    a088:	c5 96       	adiw	r24, 0x35	; 53
    a08a:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    a08e:	b3 01       	movw	r22, r6
    a090:	a2 01       	movw	r20, r4
    a092:	ce 01       	movw	r24, r28
    a094:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    a098:	69 ab       	std	Y+49, r22	; 0x31
    a09a:	7a ab       	std	Y+50, r23	; 0x32
    a09c:	8b ab       	std	Y+51, r24	; 0x33
    a09e:	9c ab       	std	Y+52, r25	; 0x34
    a0a0:	a1 2c       	mov	r10, r1
    a0a2:	b1 2c       	mov	r11, r1
    a0a4:	99 24       	eor	r9, r9
    a0a6:	93 94       	inc	r9
    a0a8:	89 85       	ldd	r24, Y+9	; 0x09
    a0aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0ac:	a8 16       	cp	r10, r24
    a0ae:	b9 06       	cpc	r11, r25
    a0b0:	b0 f4       	brcc	.+44     	; 0xa0de <dir_next+0x1d0>
    a0b2:	9b 82       	std	Y+3, r9	; 0x03
    a0b4:	ce 01       	movw	r24, r28
    a0b6:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <sync_window.part.3>
    a0ba:	89 2b       	or	r24, r25
    a0bc:	09 f0       	breq	.+2      	; 0xa0c0 <dir_next+0x1b2>
    a0be:	b2 cf       	rjmp	.-156    	; 0xa024 <dir_next+0x116>
    a0c0:	8f ef       	ldi	r24, 0xFF	; 255
    a0c2:	a8 1a       	sub	r10, r24
    a0c4:	b8 0a       	sbc	r11, r24
    a0c6:	89 a9       	ldd	r24, Y+49	; 0x31
    a0c8:	9a a9       	ldd	r25, Y+50	; 0x32
    a0ca:	ab a9       	ldd	r26, Y+51	; 0x33
    a0cc:	bc a9       	ldd	r27, Y+52	; 0x34
    a0ce:	01 96       	adiw	r24, 0x01	; 1
    a0d0:	a1 1d       	adc	r26, r1
    a0d2:	b1 1d       	adc	r27, r1
    a0d4:	89 ab       	std	Y+49, r24	; 0x31
    a0d6:	9a ab       	std	Y+50, r25	; 0x32
    a0d8:	ab ab       	std	Y+51, r26	; 0x33
    a0da:	bc ab       	std	Y+52, r27	; 0x34
    a0dc:	e5 cf       	rjmp	.-54     	; 0xa0a8 <dir_next+0x19a>
    a0de:	89 a9       	ldd	r24, Y+49	; 0x31
    a0e0:	9a a9       	ldd	r25, Y+50	; 0x32
    a0e2:	ab a9       	ldd	r26, Y+51	; 0x33
    a0e4:	bc a9       	ldd	r27, Y+52	; 0x34
    a0e6:	8a 19       	sub	r24, r10
    a0e8:	9b 09       	sbc	r25, r11
    a0ea:	a1 09       	sbc	r26, r1
    a0ec:	b1 09       	sbc	r27, r1
    a0ee:	89 ab       	std	Y+49, r24	; 0x31
    a0f0:	9a ab       	std	Y+50, r25	; 0x32
    a0f2:	ab ab       	std	Y+51, r26	; 0x33
    a0f4:	bc ab       	std	Y+52, r27	; 0x34
    a0f6:	f8 01       	movw	r30, r16
    a0f8:	42 8a       	std	Z+18, r4	; 0x12
    a0fa:	53 8a       	std	Z+19, r5	; 0x13
    a0fc:	64 8a       	std	Z+20, r6	; 0x14
    a0fe:	75 8a       	std	Z+21, r7	; 0x15
    a100:	b3 01       	movw	r22, r6
    a102:	a2 01       	movw	r20, r4
    a104:	ce 01       	movw	r24, r28
    a106:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    a10a:	f8 01       	movw	r30, r16
    a10c:	66 8b       	std	Z+22, r22	; 0x16
    a10e:	77 8b       	std	Z+23, r23	; 0x17
    a110:	80 8f       	std	Z+24, r24	; 0x18
    a112:	91 8f       	std	Z+25, r25	; 0x19
    a114:	f8 01       	movw	r30, r16
    a116:	c6 86       	std	Z+14, r12	; 0x0e
    a118:	d7 86       	std	Z+15, r13	; 0x0f
    a11a:	e0 8a       	std	Z+16, r14	; 0x10
    a11c:	f1 8a       	std	Z+17, r15	; 0x11
    a11e:	ce 01       	movw	r24, r28
    a120:	c5 96       	adiw	r24, 0x35	; 53
    a122:	e6 01       	movw	r28, r12
    a124:	d1 70       	andi	r29, 0x01	; 1
    a126:	c8 0f       	add	r28, r24
    a128:	d9 1f       	adc	r29, r25
    a12a:	d3 8f       	std	Z+27, r29	; 0x1b
    a12c:	c2 8f       	std	Z+26, r28	; 0x1a
    a12e:	80 e0       	ldi	r24, 0x00	; 0
    a130:	90 e0       	ldi	r25, 0x00	; 0
    a132:	05 c0       	rjmp	.+10     	; 0xa13e <dir_next+0x230>
    a134:	84 e0       	ldi	r24, 0x04	; 4
    a136:	90 e0       	ldi	r25, 0x00	; 0
    a138:	02 c0       	rjmp	.+4      	; 0xa13e <dir_next+0x230>
    a13a:	87 e0       	ldi	r24, 0x07	; 7
    a13c:	90 e0       	ldi	r25, 0x00	; 0
    a13e:	df 91       	pop	r29
    a140:	cf 91       	pop	r28
    a142:	1f 91       	pop	r17
    a144:	0f 91       	pop	r16
    a146:	ff 90       	pop	r15
    a148:	ef 90       	pop	r14
    a14a:	df 90       	pop	r13
    a14c:	cf 90       	pop	r12
    a14e:	bf 90       	pop	r11
    a150:	af 90       	pop	r10
    a152:	9f 90       	pop	r9
    a154:	7f 90       	pop	r7
    a156:	6f 90       	pop	r6
    a158:	5f 90       	pop	r5
    a15a:	4f 90       	pop	r4
    a15c:	08 95       	ret

0000a15e <dir_alloc>:
    a15e:	a0 e0       	ldi	r26, 0x00	; 0
    a160:	b0 e0       	ldi	r27, 0x00	; 0
    a162:	e5 eb       	ldi	r30, 0xB5	; 181
    a164:	f0 e5       	ldi	r31, 0x50	; 80
    a166:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    a16a:	ec 01       	movw	r28, r24
    a16c:	6b 01       	movw	r12, r22
    a16e:	e8 80       	ld	r14, Y
    a170:	f9 80       	ldd	r15, Y+1	; 0x01
    a172:	40 e0       	ldi	r20, 0x00	; 0
    a174:	50 e0       	ldi	r21, 0x00	; 0
    a176:	ba 01       	movw	r22, r20
    a178:	d0 db       	rcall	.-2144   	; 0x991a <dir_sdi>
    a17a:	00 97       	sbiw	r24, 0x00	; 0
    a17c:	01 f5       	brne	.+64     	; 0xa1be <dir_alloc+0x60>
    a17e:	00 e0       	ldi	r16, 0x00	; 0
    a180:	10 e0       	ldi	r17, 0x00	; 0
    a182:	4e 89       	ldd	r20, Y+22	; 0x16
    a184:	5f 89       	ldd	r21, Y+23	; 0x17
    a186:	68 8d       	ldd	r22, Y+24	; 0x18
    a188:	79 8d       	ldd	r23, Y+25	; 0x19
    a18a:	c7 01       	movw	r24, r14
    a18c:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a190:	00 97       	sbiw	r24, 0x00	; 0
    a192:	a9 f4       	brne	.+42     	; 0xa1be <dir_alloc+0x60>
    a194:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a196:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a198:	20 81       	ld	r18, Z
    a19a:	25 3e       	cpi	r18, 0xE5	; 229
    a19c:	11 f0       	breq	.+4      	; 0xa1a2 <dir_alloc+0x44>
    a19e:	21 11       	cpse	r18, r1
    a1a0:	06 c0       	rjmp	.+12     	; 0xa1ae <dir_alloc+0x50>
    a1a2:	0f 5f       	subi	r16, 0xFF	; 255
    a1a4:	1f 4f       	sbci	r17, 0xFF	; 255
    a1a6:	0c 15       	cp	r16, r12
    a1a8:	1d 05       	cpc	r17, r13
    a1aa:	19 f4       	brne	.+6      	; 0xa1b2 <dir_alloc+0x54>
    a1ac:	0d c0       	rjmp	.+26     	; 0xa1c8 <dir_alloc+0x6a>
    a1ae:	00 e0       	ldi	r16, 0x00	; 0
    a1b0:	10 e0       	ldi	r17, 0x00	; 0
    a1b2:	61 e0       	ldi	r22, 0x01	; 1
    a1b4:	70 e0       	ldi	r23, 0x00	; 0
    a1b6:	ce 01       	movw	r24, r28
    a1b8:	aa de       	rcall	.-684    	; 0x9f0e <dir_next>
    a1ba:	00 97       	sbiw	r24, 0x00	; 0
    a1bc:	11 f3       	breq	.-60     	; 0xa182 <dir_alloc+0x24>
    a1be:	84 30       	cpi	r24, 0x04	; 4
    a1c0:	91 05       	cpc	r25, r1
    a1c2:	11 f4       	brne	.+4      	; 0xa1c8 <dir_alloc+0x6a>
    a1c4:	87 e0       	ldi	r24, 0x07	; 7
    a1c6:	90 e0       	ldi	r25, 0x00	; 0
    a1c8:	cd b7       	in	r28, 0x3d	; 61
    a1ca:	de b7       	in	r29, 0x3e	; 62
    a1cc:	e8 e0       	ldi	r30, 0x08	; 8
    a1ce:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000a1d2 <dir_read>:
    a1d2:	a0 e0       	ldi	r26, 0x00	; 0
    a1d4:	b0 e0       	ldi	r27, 0x00	; 0
    a1d6:	ef ee       	ldi	r30, 0xEF	; 239
    a1d8:	f0 e5       	ldi	r31, 0x50	; 80
    a1da:	0c 94 3f e9 	jmp	0x1d27e	; 0x1d27e <__prologue_saves__+0x8>
    a1de:	ec 01       	movw	r28, r24
    a1e0:	7b 01       	movw	r14, r22
    a1e2:	a8 80       	ld	r10, Y
    a1e4:	b9 80       	ldd	r11, Y+1	; 0x01
    a1e6:	dd 24       	eor	r13, r13
    a1e8:	da 94       	dec	r13
    a1ea:	1f ef       	ldi	r17, 0xFF	; 255
    a1ec:	84 e0       	ldi	r24, 0x04	; 4
    a1ee:	90 e0       	ldi	r25, 0x00	; 0
    a1f0:	ad e0       	ldi	r26, 0x0D	; 13
    a1f2:	ca 2e       	mov	r12, r26
    a1f4:	4e 89       	ldd	r20, Y+22	; 0x16
    a1f6:	5f 89       	ldd	r21, Y+23	; 0x17
    a1f8:	68 8d       	ldd	r22, Y+24	; 0x18
    a1fa:	79 8d       	ldd	r23, Y+25	; 0x19
    a1fc:	41 15       	cp	r20, r1
    a1fe:	51 05       	cpc	r21, r1
    a200:	61 05       	cpc	r22, r1
    a202:	71 05       	cpc	r23, r1
    a204:	09 f4       	brne	.+2      	; 0xa208 <dir_read+0x36>
    a206:	9f c0       	rjmp	.+318    	; 0xa346 <dir_read+0x174>
    a208:	c5 01       	movw	r24, r10
    a20a:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a20e:	00 97       	sbiw	r24, 0x00	; 0
    a210:	09 f0       	breq	.+2      	; 0xa214 <dir_read+0x42>
    a212:	9b c0       	rjmp	.+310    	; 0xa34a <dir_read+0x178>
    a214:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a216:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a218:	0c 91       	ld	r16, X
    a21a:	00 23       	and	r16, r16
    a21c:	09 f4       	brne	.+2      	; 0xa220 <dir_read+0x4e>
    a21e:	9d c0       	rjmp	.+314    	; 0xa35a <dir_read+0x188>
    a220:	1b 96       	adiw	r26, 0x0b	; 11
    a222:	8c 91       	ld	r24, X
    a224:	1b 97       	sbiw	r26, 0x0b	; 11
    a226:	8f 73       	andi	r24, 0x3F	; 63
    a228:	8c 83       	std	Y+4, r24	; 0x04
    a22a:	05 3e       	cpi	r16, 0xE5	; 229
    a22c:	09 f4       	brne	.+2      	; 0xa230 <dir_read+0x5e>
    a22e:	82 c0       	rjmp	.+260    	; 0xa334 <dir_read+0x162>
    a230:	0e 32       	cpi	r16, 0x2E	; 46
    a232:	09 f4       	brne	.+2      	; 0xa236 <dir_read+0x64>
    a234:	7f c0       	rjmp	.+254    	; 0xa334 <dir_read+0x162>
    a236:	21 e0       	ldi	r18, 0x01	; 1
    a238:	30 e0       	ldi	r19, 0x00	; 0
    a23a:	98 2f       	mov	r25, r24
    a23c:	9f 71       	andi	r25, 0x1F	; 31
    a23e:	98 30       	cpi	r25, 0x08	; 8
    a240:	11 f0       	breq	.+4      	; 0xa246 <dir_read+0x74>
    a242:	20 e0       	ldi	r18, 0x00	; 0
    a244:	30 e0       	ldi	r19, 0x00	; 0
    a246:	2e 15       	cp	r18, r14
    a248:	3f 05       	cpc	r19, r15
    a24a:	09 f0       	breq	.+2      	; 0xa24e <dir_read+0x7c>
    a24c:	73 c0       	rjmp	.+230    	; 0xa334 <dir_read+0x162>
    a24e:	8f 30       	cpi	r24, 0x0F	; 15
    a250:	09 f0       	breq	.+2      	; 0xa254 <dir_read+0x82>
    a252:	60 c0       	rjmp	.+192    	; 0xa314 <dir_read+0x142>
    a254:	06 ff       	sbrs	r16, 6
    a256:	0d c0       	rjmp	.+26     	; 0xa272 <dir_read+0xa0>
    a258:	1d 96       	adiw	r26, 0x0d	; 13
    a25a:	8c 91       	ld	r24, X
    a25c:	1d 97       	sbiw	r26, 0x0d	; 13
    a25e:	0f 7b       	andi	r16, 0xBF	; 191
    a260:	4e 85       	ldd	r20, Y+14	; 0x0e
    a262:	5f 85       	ldd	r21, Y+15	; 0x0f
    a264:	68 89       	ldd	r22, Y+16	; 0x10
    a266:	79 89       	ldd	r23, Y+17	; 0x11
    a268:	48 a7       	std	Y+40, r20	; 0x28
    a26a:	59 a7       	std	Y+41, r21	; 0x29
    a26c:	6a a7       	std	Y+42, r22	; 0x2a
    a26e:	7b a7       	std	Y+43, r23	; 0x2b
    a270:	03 c0       	rjmp	.+6      	; 0xa278 <dir_read+0xa6>
    a272:	10 13       	cpse	r17, r16
    a274:	5f c0       	rjmp	.+190    	; 0xa334 <dir_read+0x162>
    a276:	8d 2d       	mov	r24, r13
    a278:	1d 96       	adiw	r26, 0x0d	; 13
    a27a:	dc 90       	ld	r13, X
    a27c:	1d 97       	sbiw	r26, 0x0d	; 13
    a27e:	d8 12       	cpse	r13, r24
    a280:	58 c0       	rjmp	.+176    	; 0xa332 <dir_read+0x160>
    a282:	5a 96       	adiw	r26, 0x1a	; 26
    a284:	8d 91       	ld	r24, X+
    a286:	9c 91       	ld	r25, X
    a288:	5b 97       	sbiw	r26, 0x1b	; 27
    a28a:	89 2b       	or	r24, r25
    a28c:	09 f0       	breq	.+2      	; 0xa290 <dir_read+0xbe>
    a28e:	52 c0       	rjmp	.+164    	; 0xa334 <dir_read+0x162>
    a290:	f5 01       	movw	r30, r10
    a292:	63 85       	ldd	r22, Z+11	; 0x0b
    a294:	74 85       	ldd	r23, Z+12	; 0x0c
    a296:	8c 91       	ld	r24, X
    a298:	8f 73       	andi	r24, 0x3F	; 63
    a29a:	90 e0       	ldi	r25, 0x00	; 0
    a29c:	01 97       	sbiw	r24, 0x01	; 1
    a29e:	c8 9e       	mul	r12, r24
    a2a0:	90 01       	movw	r18, r0
    a2a2:	c9 9e       	mul	r12, r25
    a2a4:	30 0d       	add	r19, r0
    a2a6:	11 24       	eor	r1, r1
    a2a8:	fe ea       	ldi	r31, 0xAE	; 174
    a2aa:	6f 2e       	mov	r6, r31
    a2ac:	f2 e0       	ldi	r31, 0x02	; 2
    a2ae:	7f 2e       	mov	r7, r31
    a2b0:	41 e0       	ldi	r20, 0x01	; 1
    a2b2:	50 e0       	ldi	r21, 0x00	; 0
    a2b4:	f3 01       	movw	r30, r6
    a2b6:	81 91       	ld	r24, Z+
    a2b8:	3f 01       	movw	r6, r30
    a2ba:	4d 01       	movw	r8, r26
    a2bc:	88 0e       	add	r8, r24
    a2be:	91 1c       	adc	r9, r1
    a2c0:	f4 01       	movw	r30, r8
    a2c2:	80 81       	ld	r24, Z
    a2c4:	91 81       	ldd	r25, Z+1	; 0x01
    a2c6:	41 15       	cp	r20, r1
    a2c8:	51 05       	cpc	r21, r1
    a2ca:	79 f0       	breq	.+30     	; 0xa2ea <dir_read+0x118>
    a2cc:	2f 3f       	cpi	r18, 0xFF	; 255
    a2ce:	31 05       	cpc	r19, r1
    a2d0:	88 f5       	brcc	.+98     	; 0xa334 <dir_read+0x162>
    a2d2:	a9 01       	movw	r20, r18
    a2d4:	44 0f       	add	r20, r20
    a2d6:	55 1f       	adc	r21, r21
    a2d8:	46 0f       	add	r20, r22
    a2da:	57 1f       	adc	r21, r23
    a2dc:	fa 01       	movw	r30, r20
    a2de:	91 83       	std	Z+1, r25	; 0x01
    a2e0:	80 83       	st	Z, r24
    a2e2:	ac 01       	movw	r20, r24
    a2e4:	2f 5f       	subi	r18, 0xFF	; 255
    a2e6:	3f 4f       	sbci	r19, 0xFF	; 255
    a2e8:	02 c0       	rjmp	.+4      	; 0xa2ee <dir_read+0x11c>
    a2ea:	01 96       	adiw	r24, 0x01	; 1
    a2ec:	19 f5       	brne	.+70     	; 0xa334 <dir_read+0x162>
    a2ee:	8b eb       	ldi	r24, 0xBB	; 187
    a2f0:	68 16       	cp	r6, r24
    a2f2:	82 e0       	ldi	r24, 0x02	; 2
    a2f4:	78 06       	cpc	r7, r24
    a2f6:	f1 f6       	brne	.-68     	; 0xa2b4 <dir_read+0xe2>
    a2f8:	8c 91       	ld	r24, X
    a2fa:	86 ff       	sbrs	r24, 6
    a2fc:	2b c0       	rjmp	.+86     	; 0xa354 <dir_read+0x182>
    a2fe:	2f 3f       	cpi	r18, 0xFF	; 255
    a300:	31 05       	cpc	r19, r1
    a302:	c0 f4       	brcc	.+48     	; 0xa334 <dir_read+0x162>
    a304:	22 0f       	add	r18, r18
    a306:	33 1f       	adc	r19, r19
    a308:	fb 01       	movw	r30, r22
    a30a:	e2 0f       	add	r30, r18
    a30c:	f3 1f       	adc	r31, r19
    a30e:	11 82       	std	Z+1, r1	; 0x01
    a310:	10 82       	st	Z, r1
    a312:	20 c0       	rjmp	.+64     	; 0xa354 <dir_read+0x182>
    a314:	11 11       	cpse	r17, r1
    a316:	05 c0       	rjmp	.+10     	; 0xa322 <dir_read+0x150>
    a318:	cd 01       	movw	r24, r26
    a31a:	0e 94 65 46 	call	0x8cca	; 0x8cca <sum_sfn>
    a31e:	d8 16       	cp	r13, r24
    a320:	f9 f0       	breq	.+62     	; 0xa360 <dir_read+0x18e>
    a322:	8f ef       	ldi	r24, 0xFF	; 255
    a324:	9f ef       	ldi	r25, 0xFF	; 255
    a326:	dc 01       	movw	r26, r24
    a328:	88 a7       	std	Y+40, r24	; 0x28
    a32a:	99 a7       	std	Y+41, r25	; 0x29
    a32c:	aa a7       	std	Y+42, r26	; 0x2a
    a32e:	bb a7       	std	Y+43, r27	; 0x2b
    a330:	17 c0       	rjmp	.+46     	; 0xa360 <dir_read+0x18e>
    a332:	d8 2e       	mov	r13, r24
    a334:	1f ef       	ldi	r17, 0xFF	; 255
    a336:	60 e0       	ldi	r22, 0x00	; 0
    a338:	70 e0       	ldi	r23, 0x00	; 0
    a33a:	ce 01       	movw	r24, r28
    a33c:	e8 dd       	rcall	.-1072   	; 0x9f0e <dir_next>
    a33e:	00 97       	sbiw	r24, 0x00	; 0
    a340:	09 f4       	brne	.+2      	; 0xa344 <dir_read+0x172>
    a342:	58 cf       	rjmp	.-336    	; 0xa1f4 <dir_read+0x22>
    a344:	02 c0       	rjmp	.+4      	; 0xa34a <dir_read+0x178>
    a346:	00 97       	sbiw	r24, 0x00	; 0
    a348:	59 f0       	breq	.+22     	; 0xa360 <dir_read+0x18e>
    a34a:	1e 8a       	std	Y+22, r1	; 0x16
    a34c:	1f 8a       	std	Y+23, r1	; 0x17
    a34e:	18 8e       	std	Y+24, r1	; 0x18
    a350:	19 8e       	std	Y+25, r1	; 0x19
    a352:	08 c0       	rjmp	.+16     	; 0xa364 <dir_read+0x192>
    a354:	1f ef       	ldi	r17, 0xFF	; 255
    a356:	10 0f       	add	r17, r16
    a358:	ee cf       	rjmp	.-36     	; 0xa336 <dir_read+0x164>
    a35a:	84 e0       	ldi	r24, 0x04	; 4
    a35c:	90 e0       	ldi	r25, 0x00	; 0
    a35e:	f5 cf       	rjmp	.-22     	; 0xa34a <dir_read+0x178>
    a360:	80 e0       	ldi	r24, 0x00	; 0
    a362:	90 e0       	ldi	r25, 0x00	; 0
    a364:	cd b7       	in	r28, 0x3d	; 61
    a366:	de b7       	in	r29, 0x3e	; 62
    a368:	ee e0       	ldi	r30, 0x0E	; 14
    a36a:	0c 94 5b e9 	jmp	0x1d2b6	; 0x1d2b6 <__epilogue_restores__+0x8>

0000a36e <dir_remove>:
    a36e:	a0 e0       	ldi	r26, 0x00	; 0
    a370:	b0 e0       	ldi	r27, 0x00	; 0
    a372:	ed eb       	ldi	r30, 0xBD	; 189
    a374:	f1 e5       	ldi	r31, 0x51	; 81
    a376:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    a37a:	ec 01       	movw	r28, r24
    a37c:	08 81       	ld	r16, Y
    a37e:	19 81       	ldd	r17, Y+1	; 0x01
    a380:	ce 84       	ldd	r12, Y+14	; 0x0e
    a382:	df 84       	ldd	r13, Y+15	; 0x0f
    a384:	e8 88       	ldd	r14, Y+16	; 0x10
    a386:	f9 88       	ldd	r15, Y+17	; 0x11
    a388:	48 a5       	ldd	r20, Y+40	; 0x28
    a38a:	59 a5       	ldd	r21, Y+41	; 0x29
    a38c:	6a a5       	ldd	r22, Y+42	; 0x2a
    a38e:	7b a5       	ldd	r23, Y+43	; 0x2b
    a390:	4f 3f       	cpi	r20, 0xFF	; 255
    a392:	8f ef       	ldi	r24, 0xFF	; 255
    a394:	58 07       	cpc	r21, r24
    a396:	68 07       	cpc	r22, r24
    a398:	78 07       	cpc	r23, r24
    a39a:	29 f4       	brne	.+10     	; 0xa3a6 <dir_remove+0x38>
    a39c:	85 ee       	ldi	r24, 0xE5	; 229
    a39e:	b8 2e       	mov	r11, r24
    a3a0:	aa 24       	eor	r10, r10
    a3a2:	a3 94       	inc	r10
    a3a4:	19 c0       	rjmp	.+50     	; 0xa3d8 <dir_remove+0x6a>
    a3a6:	ce 01       	movw	r24, r28
    a3a8:	b8 da       	rcall	.-2704   	; 0x991a <dir_sdi>
    a3aa:	00 97       	sbiw	r24, 0x00	; 0
    a3ac:	19 f5       	brne	.+70     	; 0xa3f4 <dir_remove+0x86>
    a3ae:	f6 cf       	rjmp	.-20     	; 0xa39c <dir_remove+0x2e>
    a3b0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a3b2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a3b4:	b0 82       	st	Z, r11
    a3b6:	f8 01       	movw	r30, r16
    a3b8:	a3 82       	std	Z+3, r10	; 0x03
    a3ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    a3bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    a3be:	68 89       	ldd	r22, Y+16	; 0x10
    a3c0:	79 89       	ldd	r23, Y+17	; 0x11
    a3c2:	4c 15       	cp	r20, r12
    a3c4:	5d 05       	cpc	r21, r13
    a3c6:	6e 05       	cpc	r22, r14
    a3c8:	7f 05       	cpc	r23, r15
    a3ca:	a0 f4       	brcc	.+40     	; 0xa3f4 <dir_remove+0x86>
    a3cc:	60 e0       	ldi	r22, 0x00	; 0
    a3ce:	70 e0       	ldi	r23, 0x00	; 0
    a3d0:	ce 01       	movw	r24, r28
    a3d2:	9d dd       	rcall	.-1222   	; 0x9f0e <dir_next>
    a3d4:	00 97       	sbiw	r24, 0x00	; 0
    a3d6:	49 f4       	brne	.+18     	; 0xa3ea <dir_remove+0x7c>
    a3d8:	4e 89       	ldd	r20, Y+22	; 0x16
    a3da:	5f 89       	ldd	r21, Y+23	; 0x17
    a3dc:	68 8d       	ldd	r22, Y+24	; 0x18
    a3de:	79 8d       	ldd	r23, Y+25	; 0x19
    a3e0:	c8 01       	movw	r24, r16
    a3e2:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a3e6:	00 97       	sbiw	r24, 0x00	; 0
    a3e8:	19 f3       	breq	.-58     	; 0xa3b0 <dir_remove+0x42>
    a3ea:	84 30       	cpi	r24, 0x04	; 4
    a3ec:	91 05       	cpc	r25, r1
    a3ee:	11 f4       	brne	.+4      	; 0xa3f4 <dir_remove+0x86>
    a3f0:	82 e0       	ldi	r24, 0x02	; 2
    a3f2:	90 e0       	ldi	r25, 0x00	; 0
    a3f4:	cd b7       	in	r28, 0x3d	; 61
    a3f6:	de b7       	in	r29, 0x3e	; 62
    a3f8:	ea e0       	ldi	r30, 0x0A	; 10
    a3fa:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0000a3fe <dir_find>:
    a3fe:	a8 e0       	ldi	r26, 0x08	; 8
    a400:	b0 e0       	ldi	r27, 0x00	; 0
    a402:	e5 e0       	ldi	r30, 0x05	; 5
    a404:	f2 e5       	ldi	r31, 0x52	; 82
    a406:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    a40a:	8c 01       	movw	r16, r24
    a40c:	dc 01       	movw	r26, r24
    a40e:	8d 90       	ld	r8, X+
    a410:	9c 90       	ld	r9, X
    a412:	40 e0       	ldi	r20, 0x00	; 0
    a414:	50 e0       	ldi	r21, 0x00	; 0
    a416:	ba 01       	movw	r22, r20
    a418:	80 da       	rcall	.-2816   	; 0x991a <dir_sdi>
    a41a:	00 97       	sbiw	r24, 0x00	; 0
    a41c:	09 f0       	breq	.+2      	; 0xa420 <dir_find+0x22>
    a41e:	f3 c0       	rjmp	.+486    	; 0xa606 <dir_find+0x208>
    a420:	8f ef       	ldi	r24, 0xFF	; 255
    a422:	9f ef       	ldi	r25, 0xFF	; 255
    a424:	dc 01       	movw	r26, r24
    a426:	f8 01       	movw	r30, r16
    a428:	80 a7       	std	Z+40, r24	; 0x28
    a42a:	91 a7       	std	Z+41, r25	; 0x29
    a42c:	a2 a7       	std	Z+42, r26	; 0x2a
    a42e:	b3 a7       	std	Z+43, r27	; 0x2b
    a430:	ee 24       	eor	r14, r14
    a432:	ea 94       	dec	r14
    a434:	ff 24       	eor	r15, r15
    a436:	fa 94       	dec	r15
    a438:	44 24       	eor	r4, r4
    a43a:	4a 94       	dec	r4
    a43c:	54 2c       	mov	r5, r4
    a43e:	32 01       	movw	r6, r4
    a440:	d8 01       	movw	r26, r16
    a442:	56 96       	adiw	r26, 0x16	; 22
    a444:	4d 91       	ld	r20, X+
    a446:	5d 91       	ld	r21, X+
    a448:	6d 91       	ld	r22, X+
    a44a:	7c 91       	ld	r23, X
    a44c:	59 97       	sbiw	r26, 0x19	; 25
    a44e:	c4 01       	movw	r24, r8
    a450:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a454:	00 97       	sbiw	r24, 0x00	; 0
    a456:	09 f0       	breq	.+2      	; 0xa45a <dir_find+0x5c>
    a458:	d6 c0       	rjmp	.+428    	; 0xa606 <dir_find+0x208>
    a45a:	f8 01       	movw	r30, r16
    a45c:	02 8c       	ldd	r0, Z+26	; 0x1a
    a45e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a460:	e0 2d       	mov	r30, r0
    a462:	f8 87       	std	Y+8, r31	; 0x08
    a464:	ef 83       	std	Y+7, r30	; 0x07
    a466:	30 80       	ld	r3, Z
    a468:	33 20       	and	r3, r3
    a46a:	09 f4       	brne	.+2      	; 0xa46e <dir_find+0x70>
    a46c:	ce c0       	rjmp	.+412    	; 0xa60a <dir_find+0x20c>
    a46e:	93 85       	ldd	r25, Z+11	; 0x0b
    a470:	89 2f       	mov	r24, r25
    a472:	8f 73       	andi	r24, 0x3F	; 63
    a474:	d8 01       	movw	r26, r16
    a476:	14 96       	adiw	r26, 0x04	; 4
    a478:	8c 93       	st	X, r24
    a47a:	b5 ee       	ldi	r27, 0xE5	; 229
    a47c:	3b 16       	cp	r3, r27
    a47e:	09 f4       	brne	.+2      	; 0xa482 <dir_find+0x84>
    a480:	b4 c0       	rjmp	.+360    	; 0xa5ea <dir_find+0x1ec>
    a482:	93 ff       	sbrs	r25, 3
    a484:	04 c0       	rjmp	.+8      	; 0xa48e <dir_find+0x90>
    a486:	8f 30       	cpi	r24, 0x0F	; 15
    a488:	09 f0       	breq	.+2      	; 0xa48c <dir_find+0x8e>
    a48a:	af c0       	rjmp	.+350    	; 0xa5ea <dir_find+0x1ec>
    a48c:	03 c0       	rjmp	.+6      	; 0xa494 <dir_find+0x96>
    a48e:	8f 30       	cpi	r24, 0x0F	; 15
    a490:	09 f0       	breq	.+2      	; 0xa494 <dir_find+0x96>
    a492:	87 c0       	rjmp	.+270    	; 0xa5a2 <dir_find+0x1a4>
    a494:	d8 01       	movw	r26, r16
    a496:	97 96       	adiw	r26, 0x27	; 39
    a498:	8c 91       	ld	r24, X
    a49a:	97 97       	sbiw	r26, 0x27	; 39
    a49c:	86 fd       	sbrc	r24, 6
    a49e:	ac c0       	rjmp	.+344    	; 0xa5f8 <dir_find+0x1fa>
    a4a0:	36 fe       	sbrs	r3, 6
    a4a2:	12 c0       	rjmp	.+36     	; 0xa4c8 <dir_find+0xca>
    a4a4:	ef 81       	ldd	r30, Y+7	; 0x07
    a4a6:	f8 85       	ldd	r31, Y+8	; 0x08
    a4a8:	e5 84       	ldd	r14, Z+13	; 0x0d
    a4aa:	f3 2d       	mov	r31, r3
    a4ac:	ff 7b       	andi	r31, 0xBF	; 191
    a4ae:	3f 2e       	mov	r3, r31
    a4b0:	1e 96       	adiw	r26, 0x0e	; 14
    a4b2:	8d 91       	ld	r24, X+
    a4b4:	9d 91       	ld	r25, X+
    a4b6:	0d 90       	ld	r0, X+
    a4b8:	bc 91       	ld	r27, X
    a4ba:	a0 2d       	mov	r26, r0
    a4bc:	f8 01       	movw	r30, r16
    a4be:	80 a7       	std	Z+40, r24	; 0x28
    a4c0:	91 a7       	std	Z+41, r25	; 0x29
    a4c2:	a2 a7       	std	Z+42, r26	; 0x2a
    a4c4:	b3 a7       	std	Z+43, r27	; 0x2b
    a4c6:	02 c0       	rjmp	.+4      	; 0xa4cc <dir_find+0xce>
    a4c8:	f3 10       	cpse	r15, r3
    a4ca:	94 c0       	rjmp	.+296    	; 0xa5f4 <dir_find+0x1f6>
    a4cc:	af 81       	ldd	r26, Y+7	; 0x07
    a4ce:	b8 85       	ldd	r27, Y+8	; 0x08
    a4d0:	1d 96       	adiw	r26, 0x0d	; 13
    a4d2:	2c 90       	ld	r2, X
    a4d4:	1d 97       	sbiw	r26, 0x0d	; 13
    a4d6:	2e 10       	cpse	r2, r14
    a4d8:	8d c0       	rjmp	.+282    	; 0xa5f4 <dir_find+0x1f6>
    a4da:	5a 96       	adiw	r26, 0x1a	; 26
    a4dc:	8d 91       	ld	r24, X+
    a4de:	9c 91       	ld	r25, X
    a4e0:	5b 97       	sbiw	r26, 0x1b	; 27
    a4e2:	89 2b       	or	r24, r25
    a4e4:	09 f0       	breq	.+2      	; 0xa4e8 <dir_find+0xea>
    a4e6:	9b c0       	rjmp	.+310    	; 0xa61e <dir_find+0x220>
    a4e8:	f4 01       	movw	r30, r8
    a4ea:	c3 84       	ldd	r12, Z+11	; 0x0b
    a4ec:	d4 84       	ldd	r13, Z+12	; 0x0c
    a4ee:	8c 91       	ld	r24, X
    a4f0:	8f 73       	andi	r24, 0x3F	; 63
    a4f2:	90 e0       	ldi	r25, 0x00	; 0
    a4f4:	01 97       	sbiw	r24, 0x01	; 1
    a4f6:	fd e0       	ldi	r31, 0x0D	; 13
    a4f8:	f8 9f       	mul	r31, r24
    a4fa:	70 01       	movw	r14, r0
    a4fc:	f9 9f       	mul	r31, r25
    a4fe:	f0 0c       	add	r15, r0
    a500:	11 24       	eor	r1, r1
    a502:	2e ea       	ldi	r18, 0xAE	; 174
    a504:	32 e0       	ldi	r19, 0x02	; 2
    a506:	3a 83       	std	Y+2, r19	; 0x02
    a508:	29 83       	std	Y+1, r18	; 0x01
    a50a:	81 e0       	ldi	r24, 0x01	; 1
    a50c:	90 e0       	ldi	r25, 0x00	; 0
    a50e:	a9 81       	ldd	r26, Y+1	; 0x01
    a510:	ba 81       	ldd	r27, Y+2	; 0x02
    a512:	2d 91       	ld	r18, X+
    a514:	ba 83       	std	Y+2, r27	; 0x02
    a516:	a9 83       	std	Y+1, r26	; 0x01
    a518:	ef 81       	ldd	r30, Y+7	; 0x07
    a51a:	f8 85       	ldd	r31, Y+8	; 0x08
    a51c:	e2 0f       	add	r30, r18
    a51e:	f1 1d       	adc	r31, r1
    a520:	a0 80       	ld	r10, Z
    a522:	b1 80       	ldd	r11, Z+1	; 0x01
    a524:	00 97       	sbiw	r24, 0x00	; 0
    a526:	09 f1       	breq	.+66     	; 0xa56a <dir_find+0x16c>
    a528:	bf ef       	ldi	r27, 0xFF	; 255
    a52a:	eb 16       	cp	r14, r27
    a52c:	f1 04       	cpc	r15, r1
    a52e:	08 f0       	brcs	.+2      	; 0xa532 <dir_find+0x134>
    a530:	76 c0       	rjmp	.+236    	; 0xa61e <dir_find+0x220>
    a532:	c5 01       	movw	r24, r10
    a534:	0e 94 af 6c 	call	0xd95e	; 0xd95e <ff_wtoupper>
    a538:	9c 83       	std	Y+4, r25	; 0x04
    a53a:	8b 83       	std	Y+3, r24	; 0x03
    a53c:	f7 01       	movw	r30, r14
    a53e:	31 96       	adiw	r30, 0x01	; 1
    a540:	fe 83       	std	Y+6, r31	; 0x06
    a542:	ed 83       	std	Y+5, r30	; 0x05
    a544:	ee 0c       	add	r14, r14
    a546:	ff 1c       	adc	r15, r15
    a548:	f6 01       	movw	r30, r12
    a54a:	ee 0d       	add	r30, r14
    a54c:	ff 1d       	adc	r31, r15
    a54e:	80 81       	ld	r24, Z
    a550:	91 81       	ldd	r25, Z+1	; 0x01
    a552:	0e 94 af 6c 	call	0xd95e	; 0xd95e <ff_wtoupper>
    a556:	2b 81       	ldd	r18, Y+3	; 0x03
    a558:	3c 81       	ldd	r19, Y+4	; 0x04
    a55a:	28 17       	cp	r18, r24
    a55c:	39 07       	cpc	r19, r25
    a55e:	09 f0       	breq	.+2      	; 0xa562 <dir_find+0x164>
    a560:	5e c0       	rjmp	.+188    	; 0xa61e <dir_find+0x220>
    a562:	c5 01       	movw	r24, r10
    a564:	ed 80       	ldd	r14, Y+5	; 0x05
    a566:	fe 80       	ldd	r15, Y+6	; 0x06
    a568:	05 c0       	rjmp	.+10     	; 0xa574 <dir_find+0x176>
    a56a:	3f ef       	ldi	r19, 0xFF	; 255
    a56c:	a3 16       	cp	r10, r19
    a56e:	b3 06       	cpc	r11, r19
    a570:	09 f0       	breq	.+2      	; 0xa574 <dir_find+0x176>
    a572:	55 c0       	rjmp	.+170    	; 0xa61e <dir_find+0x220>
    a574:	49 81       	ldd	r20, Y+1	; 0x01
    a576:	5a 81       	ldd	r21, Y+2	; 0x02
    a578:	4b 5b       	subi	r20, 0xBB	; 187
    a57a:	52 40       	sbci	r21, 0x02	; 2
    a57c:	41 f6       	brne	.-112    	; 0xa50e <dir_find+0x110>
    a57e:	ef 81       	ldd	r30, Y+7	; 0x07
    a580:	f8 85       	ldd	r31, Y+8	; 0x08
    a582:	20 81       	ld	r18, Z
    a584:	26 ff       	sbrs	r18, 6
    a586:	46 c0       	rjmp	.+140    	; 0xa614 <dir_find+0x216>
    a588:	89 2b       	or	r24, r25
    a58a:	09 f4       	brne	.+2      	; 0xa58e <dir_find+0x190>
    a58c:	43 c0       	rjmp	.+134    	; 0xa614 <dir_find+0x216>
    a58e:	ee 0c       	add	r14, r14
    a590:	ff 1c       	adc	r15, r15
    a592:	f6 01       	movw	r30, r12
    a594:	ee 0d       	add	r30, r14
    a596:	ff 1d       	adc	r31, r15
    a598:	80 81       	ld	r24, Z
    a59a:	91 81       	ldd	r25, Z+1	; 0x01
    a59c:	89 2b       	or	r24, r25
    a59e:	d1 f1       	breq	.+116    	; 0xa614 <dir_find+0x216>
    a5a0:	3e c0       	rjmp	.+124    	; 0xa61e <dir_find+0x220>
    a5a2:	f1 10       	cpse	r15, r1
    a5a4:	06 c0       	rjmp	.+12     	; 0xa5b2 <dir_find+0x1b4>
    a5a6:	8f 81       	ldd	r24, Y+7	; 0x07
    a5a8:	98 85       	ldd	r25, Y+8	; 0x08
    a5aa:	0e 94 65 46 	call	0x8cca	; 0x8cca <sum_sfn>
    a5ae:	e8 16       	cp	r14, r24
    a5b0:	71 f1       	breq	.+92     	; 0xa60e <dir_find+0x210>
    a5b2:	d8 01       	movw	r26, r16
    a5b4:	97 96       	adiw	r26, 0x27	; 39
    a5b6:	8c 91       	ld	r24, X
    a5b8:	80 fd       	sbrc	r24, 0
    a5ba:	17 c0       	rjmp	.+46     	; 0xa5ea <dir_find+0x1ec>
    a5bc:	f8 01       	movw	r30, r16
    a5be:	7c 96       	adiw	r30, 0x1c	; 28
    a5c0:	2f 81       	ldd	r18, Y+7	; 0x07
    a5c2:	38 85       	ldd	r19, Y+8	; 0x08
    a5c4:	25 5f       	subi	r18, 0xF5	; 245
    a5c6:	3f 4f       	sbci	r19, 0xFF	; 255
    a5c8:	af 81       	ldd	r26, Y+7	; 0x07
    a5ca:	b8 85       	ldd	r27, Y+8	; 0x08
    a5cc:	8d 91       	ld	r24, X+
    a5ce:	b8 87       	std	Y+8, r27	; 0x08
    a5d0:	af 83       	std	Y+7, r26	; 0x07
    a5d2:	41 91       	ld	r20, Z+
    a5d4:	90 e0       	ldi	r25, 0x00	; 0
    a5d6:	84 1b       	sub	r24, r20
    a5d8:	91 09       	sbc	r25, r1
    a5da:	2a 17       	cp	r18, r26
    a5dc:	3b 07       	cpc	r19, r27
    a5de:	19 f0       	breq	.+6      	; 0xa5e6 <dir_find+0x1e8>
    a5e0:	89 2b       	or	r24, r25
    a5e2:	91 f3       	breq	.-28     	; 0xa5c8 <dir_find+0x1ca>
    a5e4:	02 c0       	rjmp	.+4      	; 0xa5ea <dir_find+0x1ec>
    a5e6:	89 2b       	or	r24, r25
    a5e8:	91 f0       	breq	.+36     	; 0xa60e <dir_find+0x210>
    a5ea:	f8 01       	movw	r30, r16
    a5ec:	40 a6       	std	Z+40, r4	; 0x28
    a5ee:	51 a6       	std	Z+41, r5	; 0x29
    a5f0:	62 a6       	std	Z+42, r6	; 0x2a
    a5f2:	73 a6       	std	Z+43, r7	; 0x2b
    a5f4:	ff 24       	eor	r15, r15
    a5f6:	fa 94       	dec	r15
    a5f8:	60 e0       	ldi	r22, 0x00	; 0
    a5fa:	70 e0       	ldi	r23, 0x00	; 0
    a5fc:	c8 01       	movw	r24, r16
    a5fe:	87 dc       	rcall	.-1778   	; 0x9f0e <dir_next>
    a600:	00 97       	sbiw	r24, 0x00	; 0
    a602:	09 f4       	brne	.+2      	; 0xa606 <dir_find+0x208>
    a604:	1d cf       	rjmp	.-454    	; 0xa440 <dir_find+0x42>
    a606:	28 2f       	mov	r18, r24
    a608:	0c c0       	rjmp	.+24     	; 0xa622 <dir_find+0x224>
    a60a:	24 e0       	ldi	r18, 0x04	; 4
    a60c:	01 c0       	rjmp	.+2      	; 0xa610 <dir_find+0x212>
    a60e:	20 e0       	ldi	r18, 0x00	; 0
    a610:	90 e0       	ldi	r25, 0x00	; 0
    a612:	07 c0       	rjmp	.+14     	; 0xa622 <dir_find+0x224>
    a614:	ff 24       	eor	r15, r15
    a616:	fa 94       	dec	r15
    a618:	f3 0c       	add	r15, r3
    a61a:	e2 2c       	mov	r14, r2
    a61c:	ed cf       	rjmp	.-38     	; 0xa5f8 <dir_find+0x1fa>
    a61e:	e2 2c       	mov	r14, r2
    a620:	e9 cf       	rjmp	.-46     	; 0xa5f4 <dir_find+0x1f6>
    a622:	82 2f       	mov	r24, r18
    a624:	28 96       	adiw	r28, 0x08	; 8
    a626:	e2 e1       	ldi	r30, 0x12	; 18
    a628:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000a62c <dir_register>:
    a62c:	a6 e1       	ldi	r26, 0x16	; 22
    a62e:	b0 e0       	ldi	r27, 0x00	; 0
    a630:	ec e1       	ldi	r30, 0x1C	; 28
    a632:	f3 e5       	ldi	r31, 0x53	; 83
    a634:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    a638:	dc 01       	movw	r26, r24
    a63a:	97 96       	adiw	r26, 0x27	; 39
    a63c:	2c 91       	ld	r18, X
    a63e:	97 97       	sbiw	r26, 0x27	; 39
    a640:	20 7a       	andi	r18, 0xA0	; 160
    a642:	09 f0       	breq	.+2      	; 0xa646 <dir_register+0x1a>
    a644:	61 c1       	rjmp	.+706    	; 0xa908 <dir_register+0x2dc>
    a646:	cd 90       	ld	r12, X+
    a648:	dc 90       	ld	r13, X
    a64a:	d6 01       	movw	r26, r12
    a64c:	1b 96       	adiw	r26, 0x0b	; 11
    a64e:	ed 91       	ld	r30, X+
    a650:	fc 91       	ld	r31, X
    a652:	1c 97       	sbiw	r26, 0x0c	; 12
    a654:	81 2c       	mov	r8, r1
    a656:	91 2c       	mov	r9, r1
    a658:	21 91       	ld	r18, Z+
    a65a:	31 91       	ld	r19, Z+
    a65c:	23 2b       	or	r18, r19
    a65e:	21 f0       	breq	.+8      	; 0xa668 <dir_register+0x3c>
    a660:	bf ef       	ldi	r27, 0xFF	; 255
    a662:	8b 1a       	sub	r8, r27
    a664:	9b 0a       	sbc	r9, r27
    a666:	f8 cf       	rjmp	.-16     	; 0xa658 <dir_register+0x2c>
    a668:	8c 01       	movw	r16, r24
    a66a:	5c 01       	movw	r10, r24
    a66c:	ec e1       	ldi	r30, 0x1C	; 28
    a66e:	ae 0e       	add	r10, r30
    a670:	b1 1c       	adc	r11, r1
    a672:	4c e0       	ldi	r20, 0x0C	; 12
    a674:	50 e0       	ldi	r21, 0x00	; 0
    a676:	b5 01       	movw	r22, r10
    a678:	ce 01       	movw	r24, r28
    a67a:	01 96       	adiw	r24, 0x01	; 1
    a67c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    a680:	8c 85       	ldd	r24, Y+12	; 0x0c
    a682:	80 ff       	sbrs	r24, 0
    a684:	96 c0       	rjmp	.+300    	; 0xa7b2 <dir_register+0x186>
    a686:	80 e4       	ldi	r24, 0x40	; 64
    a688:	d8 01       	movw	r26, r16
    a68a:	97 96       	adiw	r26, 0x27	; 39
    a68c:	8c 93       	st	X, r24
    a68e:	41 2c       	mov	r4, r1
    a690:	51 2c       	mov	r5, r1
    a692:	32 01       	movw	r6, r4
    a694:	43 94       	inc	r4
    a696:	72 01       	movw	r14, r4
    a698:	f6 01       	movw	r30, r12
    a69a:	23 84       	ldd	r2, Z+11	; 0x0b
    a69c:	34 84       	ldd	r3, Z+12	; 0x0c
    a69e:	4b e0       	ldi	r20, 0x0B	; 11
    a6a0:	50 e0       	ldi	r21, 0x00	; 0
    a6a2:	be 01       	movw	r22, r28
    a6a4:	6f 5f       	subi	r22, 0xFF	; 255
    a6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a8:	c5 01       	movw	r24, r10
    a6aa:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    a6ae:	f6 e0       	ldi	r31, 0x06	; 6
    a6b0:	4f 16       	cp	r4, r31
    a6b2:	51 04       	cpc	r5, r1
    a6b4:	18 f1       	brcs	.+70     	; 0xa6fc <dir_register+0xd0>
    a6b6:	f1 01       	movw	r30, r2
    a6b8:	b3 01       	movw	r22, r6
    a6ba:	a2 01       	movw	r20, r4
    a6bc:	81 91       	ld	r24, Z+
    a6be:	91 91       	ld	r25, Z+
    a6c0:	00 97       	sbiw	r24, 0x00	; 0
    a6c2:	d9 f0       	breq	.+54     	; 0xa6fa <dir_register+0xce>
    a6c4:	20 e1       	ldi	r18, 0x10	; 16
    a6c6:	30 e0       	ldi	r19, 0x00	; 0
    a6c8:	44 0f       	add	r20, r20
    a6ca:	55 1f       	adc	r21, r21
    a6cc:	66 1f       	adc	r22, r22
    a6ce:	77 1f       	adc	r23, r23
    a6d0:	dc 01       	movw	r26, r24
    a6d2:	a1 70       	andi	r26, 0x01	; 1
    a6d4:	bb 27       	eor	r27, r27
    a6d6:	4a 0f       	add	r20, r26
    a6d8:	5b 1f       	adc	r21, r27
    a6da:	61 1d       	adc	r22, r1
    a6dc:	71 1d       	adc	r23, r1
    a6de:	96 95       	lsr	r25
    a6e0:	87 95       	ror	r24
    a6e2:	60 ff       	sbrs	r22, 0
    a6e4:	06 c0       	rjmp	.+12     	; 0xa6f2 <dir_register+0xc6>
    a6e6:	a1 e2       	ldi	r26, 0x21	; 33
    a6e8:	4a 27       	eor	r20, r26
    a6ea:	a0 e1       	ldi	r26, 0x10	; 16
    a6ec:	5a 27       	eor	r21, r26
    a6ee:	a1 e0       	ldi	r26, 0x01	; 1
    a6f0:	6a 27       	eor	r22, r26
    a6f2:	21 50       	subi	r18, 0x01	; 1
    a6f4:	31 09       	sbc	r19, r1
    a6f6:	41 f7       	brne	.-48     	; 0xa6c8 <dir_register+0x9c>
    a6f8:	e1 cf       	rjmp	.-62     	; 0xa6bc <dir_register+0x90>
    a6fa:	7a 01       	movw	r14, r20
    a6fc:	fe 01       	movw	r30, r28
    a6fe:	75 96       	adiw	r30, 0x15	; 21
    a700:	27 e0       	ldi	r18, 0x07	; 7
    a702:	30 e0       	ldi	r19, 0x00	; 0
    a704:	9e 2d       	mov	r25, r14
    a706:	9f 70       	andi	r25, 0x0F	; 15
    a708:	80 e3       	ldi	r24, 0x30	; 48
    a70a:	89 0f       	add	r24, r25
    a70c:	8a 33       	cpi	r24, 0x3A	; 58
    a70e:	10 f0       	brcs	.+4      	; 0xa714 <dir_register+0xe8>
    a710:	87 e3       	ldi	r24, 0x37	; 55
    a712:	89 0f       	add	r24, r25
    a714:	21 50       	subi	r18, 0x01	; 1
    a716:	31 09       	sbc	r19, r1
    a718:	82 93       	st	-Z, r24
    a71a:	a4 e0       	ldi	r26, 0x04	; 4
    a71c:	f6 94       	lsr	r15
    a71e:	e7 94       	ror	r14
    a720:	aa 95       	dec	r26
    a722:	e1 f7       	brne	.-8      	; 0xa71c <dir_register+0xf0>
    a724:	e1 14       	cp	r14, r1
    a726:	f1 04       	cpc	r15, r1
    a728:	69 f7       	brne	.-38     	; 0xa704 <dir_register+0xd8>
    a72a:	ed e0       	ldi	r30, 0x0D	; 13
    a72c:	f0 e0       	ldi	r31, 0x00	; 0
    a72e:	ec 0f       	add	r30, r28
    a730:	fd 1f       	adc	r31, r29
    a732:	e2 0f       	add	r30, r18
    a734:	f3 1f       	adc	r31, r19
    a736:	be e7       	ldi	r27, 0x7E	; 126
    a738:	b0 83       	st	Z, r27
    a73a:	f5 01       	movw	r30, r10
    a73c:	80 e0       	ldi	r24, 0x00	; 0
    a73e:	90 e0       	ldi	r25, 0x00	; 0
    a740:	28 17       	cp	r18, r24
    a742:	39 07       	cpc	r19, r25
    a744:	29 f0       	breq	.+10     	; 0xa750 <dir_register+0x124>
    a746:	41 91       	ld	r20, Z+
    a748:	40 32       	cpi	r20, 0x20	; 32
    a74a:	11 f0       	breq	.+4      	; 0xa750 <dir_register+0x124>
    a74c:	01 96       	adiw	r24, 0x01	; 1
    a74e:	f8 cf       	rjmp	.-16     	; 0xa740 <dir_register+0x114>
    a750:	f5 01       	movw	r30, r10
    a752:	e8 0f       	add	r30, r24
    a754:	f9 1f       	adc	r31, r25
    a756:	28 30       	cpi	r18, 0x08	; 8
    a758:	31 05       	cpc	r19, r1
    a75a:	50 f4       	brcc	.+20     	; 0xa770 <dir_register+0x144>
    a75c:	ad e0       	ldi	r26, 0x0D	; 13
    a75e:	b0 e0       	ldi	r27, 0x00	; 0
    a760:	ac 0f       	add	r26, r28
    a762:	bd 1f       	adc	r27, r29
    a764:	a2 0f       	add	r26, r18
    a766:	b3 1f       	adc	r27, r19
    a768:	8c 91       	ld	r24, X
    a76a:	2f 5f       	subi	r18, 0xFF	; 255
    a76c:	3f 4f       	sbci	r19, 0xFF	; 255
    a76e:	01 c0       	rjmp	.+2      	; 0xa772 <dir_register+0x146>
    a770:	80 e2       	ldi	r24, 0x20	; 32
    a772:	81 93       	st	Z+, r24
    a774:	cf 01       	movw	r24, r30
    a776:	8a 19       	sub	r24, r10
    a778:	9b 09       	sbc	r25, r11
    a77a:	08 97       	sbiw	r24, 0x08	; 8
    a77c:	60 f3       	brcs	.-40     	; 0xa756 <dir_register+0x12a>
    a77e:	c8 01       	movw	r24, r16
    a780:	3e de       	rcall	.-900    	; 0xa3fe <dir_find>
    a782:	00 97       	sbiw	r24, 0x00	; 0
    a784:	71 f4       	brne	.+28     	; 0xa7a2 <dir_register+0x176>
    a786:	ef ef       	ldi	r30, 0xFF	; 255
    a788:	4e 1a       	sub	r4, r30
    a78a:	5e 0a       	sbc	r5, r30
    a78c:	6e 0a       	sbc	r6, r30
    a78e:	7e 0a       	sbc	r7, r30
    a790:	f4 e6       	ldi	r31, 0x64	; 100
    a792:	4f 16       	cp	r4, r31
    a794:	51 04       	cpc	r5, r1
    a796:	61 04       	cpc	r6, r1
    a798:	71 04       	cpc	r7, r1
    a79a:	09 f0       	breq	.+2      	; 0xa79e <dir_register+0x172>
    a79c:	7c cf       	rjmp	.-264    	; 0xa696 <dir_register+0x6a>
    a79e:	27 e0       	ldi	r18, 0x07	; 7
    a7a0:	b4 c0       	rjmp	.+360    	; 0xa90a <dir_register+0x2de>
    a7a2:	84 30       	cpi	r24, 0x04	; 4
    a7a4:	91 05       	cpc	r25, r1
    a7a6:	09 f0       	breq	.+2      	; 0xa7aa <dir_register+0x17e>
    a7a8:	df c0       	rjmp	.+446    	; 0xa968 <dir_register+0x33c>
    a7aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    a7ac:	d8 01       	movw	r26, r16
    a7ae:	97 96       	adiw	r26, 0x27	; 39
    a7b0:	8c 93       	st	X, r24
    a7b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    a7b4:	81 ff       	sbrs	r24, 1
    a7b6:	0b c0       	rjmp	.+22     	; 0xa7ce <dir_register+0x1a2>
    a7b8:	c4 01       	movw	r24, r8
    a7ba:	0c 96       	adiw	r24, 0x0c	; 12
    a7bc:	6d e0       	ldi	r22, 0x0D	; 13
    a7be:	70 e0       	ldi	r23, 0x00	; 0
    a7c0:	0e 94 a7 e8 	call	0x1d14e	; 0x1d14e <__udivmodhi4>
    a7c4:	7b 01       	movw	r14, r22
    a7c6:	bf ef       	ldi	r27, 0xFF	; 255
    a7c8:	eb 1a       	sub	r14, r27
    a7ca:	fb 0a       	sbc	r15, r27
    a7cc:	03 c0       	rjmp	.+6      	; 0xa7d4 <dir_register+0x1a8>
    a7ce:	ee 24       	eor	r14, r14
    a7d0:	e3 94       	inc	r14
    a7d2:	f1 2c       	mov	r15, r1
    a7d4:	b7 01       	movw	r22, r14
    a7d6:	c8 01       	movw	r24, r16
    a7d8:	c2 dc       	rcall	.-1660   	; 0xa15e <dir_alloc>
    a7da:	00 97       	sbiw	r24, 0x00	; 0
    a7dc:	09 f0       	breq	.+2      	; 0xa7e0 <dir_register+0x1b4>
    a7de:	c4 c0       	rjmp	.+392    	; 0xa968 <dir_register+0x33c>
    a7e0:	e1 e0       	ldi	r30, 0x01	; 1
    a7e2:	ee 1a       	sub	r14, r30
    a7e4:	f1 08       	sbc	r15, r1
    a7e6:	09 f4       	brne	.+2      	; 0xa7ea <dir_register+0x1be>
    a7e8:	92 c0       	rjmp	.+292    	; 0xa90e <dir_register+0x2e2>
    a7ea:	d8 01       	movw	r26, r16
    a7ec:	1e 96       	adiw	r26, 0x0e	; 14
    a7ee:	4d 91       	ld	r20, X+
    a7f0:	5d 91       	ld	r21, X+
    a7f2:	6d 91       	ld	r22, X+
    a7f4:	7c 91       	ld	r23, X
    a7f6:	51 97       	sbiw	r26, 0x11	; 17
    a7f8:	c7 01       	movw	r24, r14
    a7fa:	e5 e0       	ldi	r30, 0x05	; 5
    a7fc:	88 0f       	add	r24, r24
    a7fe:	99 1f       	adc	r25, r25
    a800:	ea 95       	dec	r30
    a802:	e1 f7       	brne	.-8      	; 0xa7fc <dir_register+0x1d0>
    a804:	48 1b       	sub	r20, r24
    a806:	59 0b       	sbc	r21, r25
    a808:	61 09       	sbc	r22, r1
    a80a:	71 09       	sbc	r23, r1
    a80c:	c8 01       	movw	r24, r16
    a80e:	85 d8       	rcall	.-3830   	; 0x991a <dir_sdi>
    a810:	00 97       	sbiw	r24, 0x00	; 0
    a812:	09 f0       	breq	.+2      	; 0xa816 <dir_register+0x1ea>
    a814:	a9 c0       	rjmp	.+338    	; 0xa968 <dir_register+0x33c>
    a816:	c5 01       	movw	r24, r10
    a818:	0e 94 65 46 	call	0x8cca	; 0x8cca <sum_sfn>
    a81c:	68 2e       	mov	r6, r24
    a81e:	5f e0       	ldi	r21, 0x0F	; 15
    a820:	35 2e       	mov	r3, r21
    a822:	6d e0       	ldi	r22, 0x0D	; 13
    a824:	46 2e       	mov	r4, r22
    a826:	7b eb       	ldi	r23, 0xBB	; 187
    a828:	87 2e       	mov	r8, r23
    a82a:	72 e0       	ldi	r23, 0x02	; 2
    a82c:	97 2e       	mov	r9, r23
    a82e:	55 24       	eor	r5, r5
    a830:	53 94       	inc	r5
    a832:	f8 01       	movw	r30, r16
    a834:	46 89       	ldd	r20, Z+22	; 0x16
    a836:	57 89       	ldd	r21, Z+23	; 0x17
    a838:	60 8d       	ldd	r22, Z+24	; 0x18
    a83a:	71 8d       	ldd	r23, Z+25	; 0x19
    a83c:	c6 01       	movw	r24, r12
    a83e:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a842:	00 97       	sbiw	r24, 0x00	; 0
    a844:	09 f0       	breq	.+2      	; 0xa848 <dir_register+0x21c>
    a846:	90 c0       	rjmp	.+288    	; 0xa968 <dir_register+0x33c>
    a848:	7e 2c       	mov	r7, r14
    a84a:	d8 01       	movw	r26, r16
    a84c:	5a 96       	adiw	r26, 0x1a	; 26
    a84e:	ed 91       	ld	r30, X+
    a850:	fc 91       	ld	r31, X
    a852:	5b 97       	sbiw	r26, 0x1b	; 27
    a854:	d6 01       	movw	r26, r12
    a856:	1b 96       	adiw	r26, 0x0b	; 11
    a858:	6d 91       	ld	r22, X+
    a85a:	7c 91       	ld	r23, X
    a85c:	1c 97       	sbiw	r26, 0x0c	; 12
    a85e:	65 86       	std	Z+13, r6	; 0x0d
    a860:	33 86       	std	Z+11, r3	; 0x0b
    a862:	14 86       	std	Z+12, r1	; 0x0c
    a864:	12 8e       	std	Z+26, r1	; 0x1a
    a866:	13 8e       	std	Z+27, r1	; 0x1b
    a868:	97 01       	movw	r18, r14
    a86a:	33 27       	eor	r19, r19
    a86c:	21 50       	subi	r18, 0x01	; 1
    a86e:	31 09       	sbc	r19, r1
    a870:	42 9e       	mul	r4, r18
    a872:	c0 01       	movw	r24, r0
    a874:	43 9e       	mul	r4, r19
    a876:	90 0d       	add	r25, r0
    a878:	11 24       	eor	r1, r1
    a87a:	2e ea       	ldi	r18, 0xAE	; 174
    a87c:	32 e0       	ldi	r19, 0x02	; 2
    a87e:	3e 8b       	std	Y+22, r19	; 0x16
    a880:	2d 8b       	std	Y+21, r18	; 0x15
    a882:	20 e0       	ldi	r18, 0x00	; 0
    a884:	30 e0       	ldi	r19, 0x00	; 0
    a886:	2f 3f       	cpi	r18, 0xFF	; 255
    a888:	4f ef       	ldi	r20, 0xFF	; 255
    a88a:	34 07       	cpc	r19, r20
    a88c:	49 f0       	breq	.+18     	; 0xa8a0 <dir_register+0x274>
    a88e:	9c 01       	movw	r18, r24
    a890:	22 0f       	add	r18, r18
    a892:	33 1f       	adc	r19, r19
    a894:	26 0f       	add	r18, r22
    a896:	37 1f       	adc	r19, r23
    a898:	d9 01       	movw	r26, r18
    a89a:	2d 91       	ld	r18, X+
    a89c:	3c 91       	ld	r19, X
    a89e:	01 96       	adiw	r24, 0x01	; 1
    a8a0:	ad 89       	ldd	r26, Y+21	; 0x15
    a8a2:	be 89       	ldd	r27, Y+22	; 0x16
    a8a4:	4d 91       	ld	r20, X+
    a8a6:	be 8b       	std	Y+22, r27	; 0x16
    a8a8:	ad 8b       	std	Y+21, r26	; 0x15
    a8aa:	df 01       	movw	r26, r30
    a8ac:	a4 0f       	add	r26, r20
    a8ae:	b1 1d       	adc	r27, r1
    a8b0:	2c 93       	st	X, r18
    a8b2:	11 96       	adiw	r26, 0x01	; 1
    a8b4:	3c 93       	st	X, r19
    a8b6:	21 15       	cp	r18, r1
    a8b8:	31 05       	cpc	r19, r1
    a8ba:	11 f4       	brne	.+4      	; 0xa8c0 <dir_register+0x294>
    a8bc:	2f ef       	ldi	r18, 0xFF	; 255
    a8be:	3f ef       	ldi	r19, 0xFF	; 255
    a8c0:	4d 89       	ldd	r20, Y+21	; 0x15
    a8c2:	5e 89       	ldd	r21, Y+22	; 0x16
    a8c4:	84 16       	cp	r8, r20
    a8c6:	95 06       	cpc	r9, r21
    a8c8:	f1 f6       	brne	.-68     	; 0xa886 <dir_register+0x25a>
    a8ca:	2f 3f       	cpi	r18, 0xFF	; 255
    a8cc:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ce:	49 f0       	breq	.+18     	; 0xa8e2 <dir_register+0x2b6>
    a8d0:	88 0f       	add	r24, r24
    a8d2:	99 1f       	adc	r25, r25
    a8d4:	db 01       	movw	r26, r22
    a8d6:	a8 0f       	add	r26, r24
    a8d8:	b9 1f       	adc	r27, r25
    a8da:	8d 91       	ld	r24, X+
    a8dc:	9c 91       	ld	r25, X
    a8de:	89 2b       	or	r24, r25
    a8e0:	19 f4       	brne	.+6      	; 0xa8e8 <dir_register+0x2bc>
    a8e2:	87 2d       	mov	r24, r7
    a8e4:	80 64       	ori	r24, 0x40	; 64
    a8e6:	78 2e       	mov	r7, r24
    a8e8:	70 82       	st	Z, r7
    a8ea:	d6 01       	movw	r26, r12
    a8ec:	13 96       	adiw	r26, 0x03	; 3
    a8ee:	5c 92       	st	X, r5
    a8f0:	60 e0       	ldi	r22, 0x00	; 0
    a8f2:	70 e0       	ldi	r23, 0x00	; 0
    a8f4:	c8 01       	movw	r24, r16
    a8f6:	0b db       	rcall	.-2538   	; 0x9f0e <dir_next>
    a8f8:	00 97       	sbiw	r24, 0x00	; 0
    a8fa:	b1 f5       	brne	.+108    	; 0xa968 <dir_register+0x33c>
    a8fc:	b1 e0       	ldi	r27, 0x01	; 1
    a8fe:	eb 1a       	sub	r14, r27
    a900:	f1 08       	sbc	r15, r1
    a902:	09 f0       	breq	.+2      	; 0xa906 <dir_register+0x2da>
    a904:	96 cf       	rjmp	.-212    	; 0xa832 <dir_register+0x206>
    a906:	03 c0       	rjmp	.+6      	; 0xa90e <dir_register+0x2e2>
    a908:	26 e0       	ldi	r18, 0x06	; 6
    a90a:	90 e0       	ldi	r25, 0x00	; 0
    a90c:	2e c0       	rjmp	.+92     	; 0xa96a <dir_register+0x33e>
    a90e:	d8 01       	movw	r26, r16
    a910:	56 96       	adiw	r26, 0x16	; 22
    a912:	4d 91       	ld	r20, X+
    a914:	5d 91       	ld	r21, X+
    a916:	6d 91       	ld	r22, X+
    a918:	7c 91       	ld	r23, X
    a91a:	59 97       	sbiw	r26, 0x19	; 25
    a91c:	c6 01       	movw	r24, r12
    a91e:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    a922:	00 97       	sbiw	r24, 0x00	; 0
    a924:	09 f5       	brne	.+66     	; 0xa968 <dir_register+0x33c>
    a926:	40 e2       	ldi	r20, 0x20	; 32
    a928:	50 e0       	ldi	r21, 0x00	; 0
    a92a:	60 e0       	ldi	r22, 0x00	; 0
    a92c:	70 e0       	ldi	r23, 0x00	; 0
    a92e:	f8 01       	movw	r30, r16
    a930:	82 8d       	ldd	r24, Z+26	; 0x1a
    a932:	93 8d       	ldd	r25, Z+27	; 0x1b
    a934:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    a938:	4b e0       	ldi	r20, 0x0B	; 11
    a93a:	50 e0       	ldi	r21, 0x00	; 0
    a93c:	b5 01       	movw	r22, r10
    a93e:	d8 01       	movw	r26, r16
    a940:	5a 96       	adiw	r26, 0x1a	; 26
    a942:	8d 91       	ld	r24, X+
    a944:	9c 91       	ld	r25, X
    a946:	5b 97       	sbiw	r26, 0x1b	; 27
    a948:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    a94c:	d8 01       	movw	r26, r16
    a94e:	5a 96       	adiw	r26, 0x1a	; 26
    a950:	ed 91       	ld	r30, X+
    a952:	fc 91       	ld	r31, X
    a954:	5b 97       	sbiw	r26, 0x1b	; 27
    a956:	97 96       	adiw	r26, 0x27	; 39
    a958:	8c 91       	ld	r24, X
    a95a:	88 71       	andi	r24, 0x18	; 24
    a95c:	84 87       	std	Z+12, r24	; 0x0c
    a95e:	81 e0       	ldi	r24, 0x01	; 1
    a960:	f6 01       	movw	r30, r12
    a962:	83 83       	std	Z+3, r24	; 0x03
    a964:	20 e0       	ldi	r18, 0x00	; 0
    a966:	d1 cf       	rjmp	.-94     	; 0xa90a <dir_register+0x2de>
    a968:	28 2f       	mov	r18, r24
    a96a:	82 2f       	mov	r24, r18
    a96c:	66 96       	adiw	r28, 0x16	; 22
    a96e:	e2 e1       	ldi	r30, 0x12	; 18
    a970:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000a974 <follow_path>:
    a974:	a7 e0       	ldi	r26, 0x07	; 7
    a976:	b0 e0       	ldi	r27, 0x00	; 0
    a978:	e0 ec       	ldi	r30, 0xC0	; 192
    a97a:	f4 e5       	ldi	r31, 0x54	; 84
    a97c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    a980:	8c 01       	movw	r16, r24
    a982:	7b 01       	movw	r14, r22
    a984:	dc 01       	movw	r26, r24
    a986:	2d 90       	ld	r2, X+
    a988:	3c 90       	ld	r3, X
    a98a:	fb 01       	movw	r30, r22
    a98c:	80 81       	ld	r24, Z
    a98e:	8f 32       	cpi	r24, 0x2F	; 47
    a990:	11 f0       	breq	.+4      	; 0xa996 <follow_path+0x22>
    a992:	8c 35       	cpi	r24, 0x5C	; 92
    a994:	11 f4       	brne	.+4      	; 0xa99a <follow_path+0x26>
    a996:	97 01       	movw	r18, r14
    a998:	0b c0       	rjmp	.+22     	; 0xa9b0 <follow_path+0x3c>
    a99a:	f1 01       	movw	r30, r2
    a99c:	85 89       	ldd	r24, Z+21	; 0x15
    a99e:	96 89       	ldd	r25, Z+22	; 0x16
    a9a0:	a7 89       	ldd	r26, Z+23	; 0x17
    a9a2:	b0 8d       	ldd	r27, Z+24	; 0x18
    a9a4:	f8 01       	movw	r30, r16
    a9a6:	86 83       	std	Z+6, r24	; 0x06
    a9a8:	97 83       	std	Z+7, r25	; 0x07
    a9aa:	a0 87       	std	Z+8, r26	; 0x08
    a9ac:	b1 87       	std	Z+9, r27	; 0x09
    a9ae:	0e c0       	rjmp	.+28     	; 0xa9cc <follow_path+0x58>
    a9b0:	79 01       	movw	r14, r18
    a9b2:	d9 01       	movw	r26, r18
    a9b4:	8c 91       	ld	r24, X
    a9b6:	2f 5f       	subi	r18, 0xFF	; 255
    a9b8:	3f 4f       	sbci	r19, 0xFF	; 255
    a9ba:	8f 32       	cpi	r24, 0x2F	; 47
    a9bc:	c9 f3       	breq	.-14     	; 0xa9b0 <follow_path+0x3c>
    a9be:	8c 35       	cpi	r24, 0x5C	; 92
    a9c0:	b9 f3       	breq	.-18     	; 0xa9b0 <follow_path+0x3c>
    a9c2:	f8 01       	movw	r30, r16
    a9c4:	16 82       	std	Z+6, r1	; 0x06
    a9c6:	17 82       	std	Z+7, r1	; 0x07
    a9c8:	10 86       	std	Z+8, r1	; 0x08
    a9ca:	11 86       	std	Z+9, r1	; 0x09
    a9cc:	d7 01       	movw	r26, r14
    a9ce:	8c 91       	ld	r24, X
    a9d0:	80 32       	cpi	r24, 0x20	; 32
    a9d2:	50 f0       	brcs	.+20     	; 0xa9e8 <follow_path+0x74>
    a9d4:	f8 01       	movw	r30, r16
    a9d6:	7c 96       	adiw	r30, 0x1c	; 28
    a9d8:	fb 83       	std	Y+3, r31	; 0x03
    a9da:	ea 83       	std	Y+2, r30	; 0x02
    a9dc:	91 01       	movw	r18, r2
    a9de:	2b 5c       	subi	r18, 0xCB	; 203
    a9e0:	3f 4f       	sbci	r19, 0xFF	; 255
    a9e2:	3d 83       	std	Y+5, r19	; 0x05
    a9e4:	2c 83       	std	Y+4, r18	; 0x04
    a9e6:	87 c0       	rjmp	.+270    	; 0xaaf6 <follow_path+0x182>
    a9e8:	80 e8       	ldi	r24, 0x80	; 128
    a9ea:	d8 01       	movw	r26, r16
    a9ec:	97 96       	adiw	r26, 0x27	; 39
    a9ee:	8c 93       	st	X, r24
    a9f0:	40 e0       	ldi	r20, 0x00	; 0
    a9f2:	50 e0       	ldi	r21, 0x00	; 0
    a9f4:	ba 01       	movw	r22, r20
    a9f6:	c8 01       	movw	r24, r16
    a9f8:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    a9fc:	d8 c1       	rjmp	.+944    	; 0xadae <follow_path+0x43a>
    a9fe:	8f 32       	cpi	r24, 0x2F	; 47
    aa00:	91 05       	cpc	r25, r1
    aa02:	09 f4       	brne	.+2      	; 0xaa06 <follow_path+0x92>
    aa04:	83 c0       	rjmp	.+262    	; 0xab0c <follow_path+0x198>
    aa06:	8c 35       	cpi	r24, 0x5C	; 92
    aa08:	91 05       	cpc	r25, r1
    aa0a:	09 f4       	brne	.+2      	; 0xaa0e <follow_path+0x9a>
    aa0c:	7f c0       	rjmp	.+254    	; 0xab0c <follow_path+0x198>
    aa0e:	a1 14       	cp	r10, r1
    aa10:	f1 e0       	ldi	r31, 0x01	; 1
    aa12:	bf 06       	cpc	r11, r31
    aa14:	09 f4       	brne	.+2      	; 0xaa18 <follow_path+0xa4>
    aa16:	ac c1       	rjmp	.+856    	; 0xad70 <follow_path+0x3fc>
    aa18:	61 e0       	ldi	r22, 0x01	; 1
    aa1a:	70 e0       	ldi	r23, 0x00	; 0
    aa1c:	0e 94 88 6c 	call	0xd910	; 0xd910 <ff_convert>
    aa20:	00 97       	sbiw	r24, 0x00	; 0
    aa22:	09 f4       	brne	.+2      	; 0xaa26 <follow_path+0xb2>
    aa24:	a5 c1       	rjmp	.+842    	; 0xad70 <follow_path+0x3fc>
    aa26:	80 38       	cpi	r24, 0x80	; 128
    aa28:	91 05       	cpc	r25, r1
    aa2a:	28 f4       	brcc	.+10     	; 0xaa36 <follow_path+0xc2>
    aa2c:	e5 ec       	ldi	r30, 0xC5	; 197
    aa2e:	f7 e0       	ldi	r31, 0x07	; 7
    aa30:	21 91       	ld	r18, Z+
    aa32:	21 11       	cpse	r18, r1
    aa34:	79 c0       	rjmp	.+242    	; 0xab28 <follow_path+0x1b4>
    aa36:	d3 01       	movw	r26, r6
    aa38:	8d 93       	st	X+, r24
    aa3a:	9d 93       	st	X+, r25
    aa3c:	3d 01       	movw	r6, r26
    aa3e:	bf 82       	std	Y+7, r11	; 0x07
    aa40:	ae 82       	std	Y+6, r10	; 0x06
    aa42:	ae 80       	ldd	r10, Y+6	; 0x06
    aa44:	bf 80       	ldd	r11, Y+7	; 0x07
    aa46:	bf ef       	ldi	r27, 0xFF	; 255
    aa48:	ab 1a       	sub	r10, r27
    aa4a:	bb 0a       	sbc	r11, r27
    aa4c:	f4 01       	movw	r30, r8
    aa4e:	81 91       	ld	r24, Z+
    aa50:	4f 01       	movw	r8, r30
    aa52:	90 e0       	ldi	r25, 0x00	; 0
    aa54:	80 32       	cpi	r24, 0x20	; 32
    aa56:	91 05       	cpc	r25, r1
    aa58:	90 f6       	brcc	.-92     	; 0xa9fe <follow_path+0x8a>
    aa5a:	ea 0c       	add	r14, r10
    aa5c:	fb 1c       	adc	r15, r11
    aa5e:	80 97       	sbiw	r24, 0x20	; 32
    aa60:	08 f0       	brcs	.+2      	; 0xaa64 <follow_path+0xf0>
    aa62:	68 c0       	rjmp	.+208    	; 0xab34 <follow_path+0x1c0>
    aa64:	b4 e0       	ldi	r27, 0x04	; 4
    aa66:	b9 83       	std	Y+1, r27	; 0x01
    aa68:	ee 81       	ldd	r30, Y+6	; 0x06
    aa6a:	ff 81       	ldd	r31, Y+7	; 0x07
    aa6c:	ee 0f       	add	r30, r30
    aa6e:	ff 1f       	adc	r31, r31
    aa70:	2e 81       	ldd	r18, Y+6	; 0x06
    aa72:	3f 81       	ldd	r19, Y+7	; 0x07
    aa74:	21 30       	cpi	r18, 0x01	; 1
    aa76:	31 05       	cpc	r19, r1
    aa78:	09 f0       	breq	.+2      	; 0xaa7c <follow_path+0x108>
    aa7a:	5e c0       	rjmp	.+188    	; 0xab38 <follow_path+0x1c4>
    aa7c:	d6 01       	movw	r26, r12
    aa7e:	8d 91       	ld	r24, X+
    aa80:	9c 91       	ld	r25, X
    aa82:	8e 97       	sbiw	r24, 0x2e	; 46
    aa84:	09 f0       	breq	.+2      	; 0xaa88 <follow_path+0x114>
    aa86:	65 c0       	rjmp	.+202    	; 0xab52 <follow_path+0x1de>
    aa88:	ec 0d       	add	r30, r12
    aa8a:	fd 1d       	adc	r31, r13
    aa8c:	11 82       	std	Z+1, r1	; 0x01
    aa8e:	10 82       	st	Z, r1
    aa90:	f8 01       	movw	r30, r16
    aa92:	7c 96       	adiw	r30, 0x1c	; 28
    aa94:	80 e0       	ldi	r24, 0x00	; 0
    aa96:	90 e0       	ldi	r25, 0x00	; 0
    aa98:	2e 81       	ldd	r18, Y+6	; 0x06
    aa9a:	3f 81       	ldd	r19, Y+7	; 0x07
    aa9c:	82 17       	cp	r24, r18
    aa9e:	93 07       	cpc	r25, r19
    aaa0:	08 f0       	brcs	.+2      	; 0xaaa4 <follow_path+0x130>
    aaa2:	5a c0       	rjmp	.+180    	; 0xab58 <follow_path+0x1e4>
    aaa4:	2e e2       	ldi	r18, 0x2E	; 46
    aaa6:	21 93       	st	Z+, r18
    aaa8:	01 96       	adiw	r24, 0x01	; 1
    aaaa:	8b 30       	cpi	r24, 0x0B	; 11
    aaac:	91 05       	cpc	r25, r1
    aaae:	a1 f7       	brne	.-24     	; 0xaa98 <follow_path+0x124>
    aab0:	89 81       	ldd	r24, Y+1	; 0x01
    aab2:	80 62       	ori	r24, 0x20	; 32
    aab4:	d8 01       	movw	r26, r16
    aab6:	97 96       	adiw	r26, 0x27	; 39
    aab8:	8c 93       	st	X, r24
    aaba:	c8 01       	movw	r24, r16
    aabc:	a0 dc       	rcall	.-1728   	; 0xa3fe <dir_find>
    aabe:	d8 01       	movw	r26, r16
    aac0:	97 96       	adiw	r26, 0x27	; 39
    aac2:	2c 91       	ld	r18, X
    aac4:	00 97       	sbiw	r24, 0x00	; 0
    aac6:	09 f0       	breq	.+2      	; 0xaaca <follow_path+0x156>
    aac8:	56 c1       	rjmp	.+684    	; 0xad76 <follow_path+0x402>
    aaca:	22 fd       	sbrc	r18, 2
    aacc:	70 c1       	rjmp	.+736    	; 0xadae <follow_path+0x43a>
    aace:	f8 01       	movw	r30, r16
    aad0:	84 81       	ldd	r24, Z+4	; 0x04
    aad2:	84 ff       	sbrs	r24, 4
    aad4:	63 c1       	rjmp	.+710    	; 0xad9c <follow_path+0x428>
    aad6:	66 85       	ldd	r22, Z+14	; 0x0e
    aad8:	77 85       	ldd	r23, Z+15	; 0x0f
    aada:	71 70       	andi	r23, 0x01	; 1
    aadc:	2c 81       	ldd	r18, Y+4	; 0x04
    aade:	3d 81       	ldd	r19, Y+5	; 0x05
    aae0:	62 0f       	add	r22, r18
    aae2:	73 1f       	adc	r23, r19
    aae4:	d1 01       	movw	r26, r2
    aae6:	8c 91       	ld	r24, X
    aae8:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    aaec:	f8 01       	movw	r30, r16
    aaee:	66 83       	std	Z+6, r22	; 0x06
    aaf0:	77 83       	std	Z+7, r23	; 0x07
    aaf2:	80 87       	std	Z+8, r24	; 0x08
    aaf4:	91 87       	std	Z+9, r25	; 0x09
    aaf6:	d8 01       	movw	r26, r16
    aaf8:	ed 91       	ld	r30, X+
    aafa:	fc 91       	ld	r31, X
    aafc:	c3 84       	ldd	r12, Z+11	; 0x0b
    aafe:	d4 84       	ldd	r13, Z+12	; 0x0c
    ab00:	26 01       	movw	r4, r12
    ab02:	36 01       	movw	r6, r12
    ab04:	47 01       	movw	r8, r14
    ab06:	1f 82       	std	Y+7, r1	; 0x07
    ab08:	1e 82       	std	Y+6, r1	; 0x06
    ab0a:	9b cf       	rjmp	.-202    	; 0xaa42 <follow_path+0xce>
    ab0c:	f7 01       	movw	r30, r14
    ab0e:	ea 0d       	add	r30, r10
    ab10:	fb 1d       	adc	r31, r11
    ab12:	03 c0       	rjmp	.+6      	; 0xab1a <follow_path+0x1a6>
    ab14:	2c 35       	cpi	r18, 0x5C	; 92
    ab16:	09 f0       	breq	.+2      	; 0xab1a <follow_path+0x1a6>
    ab18:	a0 cf       	rjmp	.-192    	; 0xaa5a <follow_path+0xe6>
    ab1a:	5f 01       	movw	r10, r30
    ab1c:	ae 18       	sub	r10, r14
    ab1e:	bf 08       	sbc	r11, r15
    ab20:	21 91       	ld	r18, Z+
    ab22:	2f 32       	cpi	r18, 0x2F	; 47
    ab24:	b9 f7       	brne	.-18     	; 0xab14 <follow_path+0x1a0>
    ab26:	f9 cf       	rjmp	.-14     	; 0xab1a <follow_path+0x1a6>
    ab28:	30 e0       	ldi	r19, 0x00	; 0
    ab2a:	82 17       	cp	r24, r18
    ab2c:	93 07       	cpc	r25, r19
    ab2e:	09 f0       	breq	.+2      	; 0xab32 <follow_path+0x1be>
    ab30:	7f cf       	rjmp	.-258    	; 0xaa30 <follow_path+0xbc>
    ab32:	1e c1       	rjmp	.+572    	; 0xad70 <follow_path+0x3fc>
    ab34:	19 82       	std	Y+1, r1	; 0x01
    ab36:	98 cf       	rjmp	.-208    	; 0xaa68 <follow_path+0xf4>
    ab38:	2e 81       	ldd	r18, Y+6	; 0x06
    ab3a:	3f 81       	ldd	r19, Y+7	; 0x07
    ab3c:	22 30       	cpi	r18, 0x02	; 2
    ab3e:	31 05       	cpc	r19, r1
    ab40:	41 f4       	brne	.+16     	; 0xab52 <follow_path+0x1de>
    ab42:	d6 01       	movw	r26, r12
    ab44:	12 96       	adiw	r26, 0x02	; 2
    ab46:	8d 91       	ld	r24, X+
    ab48:	9c 91       	ld	r25, X
    ab4a:	13 97       	sbiw	r26, 0x03	; 3
    ab4c:	8e 97       	sbiw	r24, 0x2e	; 46
    ab4e:	09 f4       	brne	.+2      	; 0xab52 <follow_path+0x1de>
    ab50:	96 cf       	rjmp	.-212    	; 0xaa7e <follow_path+0x10a>
    ab52:	ec 0d       	add	r30, r12
    ab54:	fd 1d       	adc	r31, r13
    ab56:	0d c0       	rjmp	.+26     	; 0xab72 <follow_path+0x1fe>
    ab58:	20 e2       	ldi	r18, 0x20	; 32
    ab5a:	a5 cf       	rjmp	.-182    	; 0xaaa6 <follow_path+0x132>
    ab5c:	92 91       	ld	r25, -Z
    ab5e:	82 91       	ld	r24, -Z
    ab60:	80 32       	cpi	r24, 0x20	; 32
    ab62:	91 05       	cpc	r25, r1
    ab64:	59 f4       	brne	.+22     	; 0xab7c <follow_path+0x208>
    ab66:	2e 81       	ldd	r18, Y+6	; 0x06
    ab68:	3f 81       	ldd	r19, Y+7	; 0x07
    ab6a:	21 50       	subi	r18, 0x01	; 1
    ab6c:	31 09       	sbc	r19, r1
    ab6e:	3f 83       	std	Y+7, r19	; 0x07
    ab70:	2e 83       	std	Y+6, r18	; 0x06
    ab72:	8e 81       	ldd	r24, Y+6	; 0x06
    ab74:	9f 81       	ldd	r25, Y+7	; 0x07
    ab76:	89 2b       	or	r24, r25
    ab78:	89 f7       	brne	.-30     	; 0xab5c <follow_path+0x1e8>
    ab7a:	02 c0       	rjmp	.+4      	; 0xab80 <follow_path+0x20c>
    ab7c:	8e 97       	sbiw	r24, 0x2e	; 46
    ab7e:	99 f3       	breq	.-26     	; 0xab66 <follow_path+0x1f2>
    ab80:	ae 80       	ldd	r10, Y+6	; 0x06
    ab82:	bf 80       	ldd	r11, Y+7	; 0x07
    ab84:	aa 0c       	add	r10, r10
    ab86:	bb 1c       	adc	r11, r11
    ab88:	ac 0c       	add	r10, r12
    ab8a:	bd 1c       	adc	r11, r13
    ab8c:	d5 01       	movw	r26, r10
    ab8e:	1d 92       	st	X+, r1
    ab90:	1c 92       	st	X, r1
    ab92:	ee 81       	ldd	r30, Y+6	; 0x06
    ab94:	ff 81       	ldd	r31, Y+7	; 0x07
    ab96:	ef 2b       	or	r30, r31
    ab98:	09 f4       	brne	.+2      	; 0xab9c <follow_path+0x228>
    ab9a:	ea c0       	rjmp	.+468    	; 0xad70 <follow_path+0x3fc>
    ab9c:	4b e0       	ldi	r20, 0x0B	; 11
    ab9e:	50 e0       	ldi	r21, 0x00	; 0
    aba0:	60 e2       	ldi	r22, 0x20	; 32
    aba2:	70 e0       	ldi	r23, 0x00	; 0
    aba4:	8a 81       	ldd	r24, Y+2	; 0x02
    aba6:	9b 81       	ldd	r25, Y+3	; 0x03
    aba8:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    abac:	80 e0       	ldi	r24, 0x00	; 0
    abae:	90 e0       	ldi	r25, 0x00	; 0
    abb0:	d2 01       	movw	r26, r4
    abb2:	2d 91       	ld	r18, X+
    abb4:	3d 91       	ld	r19, X+
    abb6:	2d 01       	movw	r4, r26
    abb8:	20 32       	cpi	r18, 0x20	; 32
    abba:	31 05       	cpc	r19, r1
    abbc:	11 f4       	brne	.+4      	; 0xabc2 <follow_path+0x24e>
    abbe:	01 96       	adiw	r24, 0x01	; 1
    abc0:	f7 cf       	rjmp	.-18     	; 0xabb0 <follow_path+0x23c>
    abc2:	2e 32       	cpi	r18, 0x2E	; 46
    abc4:	31 05       	cpc	r19, r1
    abc6:	d9 f3       	breq	.-10     	; 0xabbe <follow_path+0x24a>
    abc8:	00 97       	sbiw	r24, 0x00	; 0
    abca:	19 f0       	breq	.+6      	; 0xabd2 <follow_path+0x25e>
    abcc:	b9 81       	ldd	r27, Y+1	; 0x01
    abce:	b3 60       	ori	r27, 0x03	; 3
    abd0:	b9 83       	std	Y+1, r27	; 0x01
    abd2:	f5 01       	movw	r30, r10
    abd4:	32 91       	ld	r19, -Z
    abd6:	22 91       	ld	r18, -Z
    abd8:	2e 32       	cpi	r18, 0x2E	; 46
    abda:	31 05       	cpc	r19, r1
    abdc:	41 f0       	breq	.+16     	; 0xabee <follow_path+0x27a>
    abde:	2e 81       	ldd	r18, Y+6	; 0x06
    abe0:	3f 81       	ldd	r19, Y+7	; 0x07
    abe2:	21 50       	subi	r18, 0x01	; 1
    abe4:	31 09       	sbc	r19, r1
    abe6:	3f 83       	std	Y+7, r19	; 0x07
    abe8:	2e 83       	std	Y+6, r18	; 0x06
    abea:	23 2b       	or	r18, r19
    abec:	99 f7       	brne	.-26     	; 0xabd4 <follow_path+0x260>
    abee:	48 e0       	ldi	r20, 0x08	; 8
    abf0:	a4 2e       	mov	r10, r20
    abf2:	b1 2c       	mov	r11, r1
    abf4:	81 2c       	mov	r8, r1
    abf6:	91 2c       	mov	r9, r1
    abf8:	41 2c       	mov	r4, r1
    abfa:	3c 01       	movw	r6, r24
    abfc:	3f ef       	ldi	r19, 0xFF	; 255
    abfe:	63 1a       	sub	r6, r19
    ac00:	73 0a       	sbc	r7, r19
    ac02:	88 0f       	add	r24, r24
    ac04:	99 1f       	adc	r25, r25
    ac06:	f6 01       	movw	r30, r12
    ac08:	e8 0f       	add	r30, r24
    ac0a:	f9 1f       	adc	r31, r25
    ac0c:	80 81       	ld	r24, Z
    ac0e:	91 81       	ldd	r25, Z+1	; 0x01
    ac10:	00 97       	sbiw	r24, 0x00	; 0
    ac12:	09 f4       	brne	.+2      	; 0xac16 <follow_path+0x2a2>
    ac14:	75 c0       	rjmp	.+234    	; 0xad00 <follow_path+0x38c>
    ac16:	80 32       	cpi	r24, 0x20	; 32
    ac18:	91 05       	cpc	r25, r1
    ac1a:	41 f0       	breq	.+16     	; 0xac2c <follow_path+0x2b8>
    ac1c:	8e 32       	cpi	r24, 0x2E	; 46
    ac1e:	91 05       	cpc	r25, r1
    ac20:	51 f4       	brne	.+20     	; 0xac36 <follow_path+0x2c2>
    ac22:	8e 81       	ldd	r24, Y+6	; 0x06
    ac24:	9f 81       	ldd	r25, Y+7	; 0x07
    ac26:	68 16       	cp	r6, r24
    ac28:	79 06       	cpc	r7, r25
    ac2a:	71 f0       	breq	.+28     	; 0xac48 <follow_path+0x2d4>
    ac2c:	99 81       	ldd	r25, Y+1	; 0x01
    ac2e:	93 60       	ori	r25, 0x03	; 3
    ac30:	99 83       	std	Y+1, r25	; 0x01
    ac32:	c3 01       	movw	r24, r6
    ac34:	e2 cf       	rjmp	.-60     	; 0xabfa <follow_path+0x286>
    ac36:	8a 14       	cp	r8, r10
    ac38:	9b 04       	cpc	r9, r11
    ac3a:	50 f4       	brcc	.+20     	; 0xac50 <follow_path+0x2dc>
    ac3c:	ae 81       	ldd	r26, Y+6	; 0x06
    ac3e:	bf 81       	ldd	r27, Y+7	; 0x07
    ac40:	6a 16       	cp	r6, r26
    ac42:	7b 06       	cpc	r7, r27
    ac44:	49 f5       	brne	.+82     	; 0xac98 <follow_path+0x324>
    ac46:	ad c0       	rjmp	.+346    	; 0xada2 <follow_path+0x42e>
    ac48:	8a 14       	cp	r8, r10
    ac4a:	9b 04       	cpc	r9, r11
    ac4c:	08 f4       	brcc	.+2      	; 0xac50 <follow_path+0x2dc>
    ac4e:	a9 c0       	rjmp	.+338    	; 0xada2 <follow_path+0x42e>
    ac50:	bb e0       	ldi	r27, 0x0B	; 11
    ac52:	ab 16       	cp	r10, r27
    ac54:	b1 04       	cpc	r11, r1
    ac56:	39 f4       	brne	.+14     	; 0xac66 <follow_path+0x2f2>
    ac58:	e9 81       	ldd	r30, Y+1	; 0x01
    ac5a:	e3 60       	ori	r30, 0x03	; 3
    ac5c:	e9 83       	std	Y+1, r30	; 0x01
    ac5e:	2b e0       	ldi	r18, 0x0B	; 11
    ac60:	a2 2e       	mov	r10, r18
    ac62:	b1 2c       	mov	r11, r1
    ac64:	4d c0       	rjmp	.+154    	; 0xad00 <follow_path+0x38c>
    ac66:	2e 81       	ldd	r18, Y+6	; 0x06
    ac68:	3f 81       	ldd	r19, Y+7	; 0x07
    ac6a:	62 16       	cp	r6, r18
    ac6c:	73 06       	cpc	r7, r19
    ac6e:	49 f0       	breq	.+18     	; 0xac82 <follow_path+0x30e>
    ac70:	39 81       	ldd	r19, Y+1	; 0x01
    ac72:	33 60       	ori	r19, 0x03	; 3
    ac74:	39 83       	std	Y+1, r19	; 0x01
    ac76:	8e 81       	ldd	r24, Y+6	; 0x06
    ac78:	9f 81       	ldd	r25, Y+7	; 0x07
    ac7a:	86 15       	cp	r24, r6
    ac7c:	97 05       	cpc	r25, r7
    ac7e:	08 f4       	brcc	.+2      	; 0xac82 <follow_path+0x30e>
    ac80:	3f c0       	rjmp	.+126    	; 0xad00 <follow_path+0x38c>
    ac82:	44 0c       	add	r4, r4
    ac84:	44 0c       	add	r4, r4
    ac86:	6e 80       	ldd	r6, Y+6	; 0x06
    ac88:	7f 80       	ldd	r7, Y+7	; 0x07
    ac8a:	8b e0       	ldi	r24, 0x0B	; 11
    ac8c:	a8 2e       	mov	r10, r24
    ac8e:	b1 2c       	mov	r11, r1
    ac90:	98 e0       	ldi	r25, 0x08	; 8
    ac92:	89 2e       	mov	r8, r25
    ac94:	91 2c       	mov	r9, r1
    ac96:	cd cf       	rjmp	.-102    	; 0xac32 <follow_path+0x2be>
    ac98:	80 38       	cpi	r24, 0x80	; 128
    ac9a:	91 05       	cpc	r25, r1
    ac9c:	80 f0       	brcs	.+32     	; 0xacbe <follow_path+0x34a>
    ac9e:	60 e0       	ldi	r22, 0x00	; 0
    aca0:	70 e0       	ldi	r23, 0x00	; 0
    aca2:	0e 94 88 6c 	call	0xd910	; 0xd910 <ff_convert>
    aca6:	00 97       	sbiw	r24, 0x00	; 0
    aca8:	29 f0       	breq	.+10     	; 0xacb4 <follow_path+0x340>
    acaa:	fc 01       	movw	r30, r24
    acac:	e5 5c       	subi	r30, 0xC5	; 197
    acae:	fd 4f       	sbci	r31, 0xFD	; 253
    acb0:	80 81       	ld	r24, Z
    acb2:	90 e0       	ldi	r25, 0x00	; 0
    acb4:	a9 81       	ldd	r26, Y+1	; 0x01
    acb6:	a2 60       	ori	r26, 0x02	; 2
    acb8:	a9 83       	std	Y+1, r26	; 0x01
    acba:	00 97       	sbiw	r24, 0x00	; 0
    acbc:	49 f0       	breq	.+18     	; 0xacd0 <follow_path+0x35c>
    acbe:	ee ec       	ldi	r30, 0xCE	; 206
    acc0:	f7 e0       	ldi	r31, 0x07	; 7
    acc2:	21 91       	ld	r18, Z+
    acc4:	22 23       	and	r18, r18
    acc6:	51 f0       	breq	.+20     	; 0xacdc <follow_path+0x368>
    acc8:	30 e0       	ldi	r19, 0x00	; 0
    acca:	82 17       	cp	r24, r18
    accc:	93 07       	cpc	r25, r19
    acce:	c9 f7       	brne	.-14     	; 0xacc2 <follow_path+0x34e>
    acd0:	b9 81       	ldd	r27, Y+1	; 0x01
    acd2:	b3 60       	ori	r27, 0x03	; 3
    acd4:	b9 83       	std	Y+1, r27	; 0x01
    acd6:	8f e5       	ldi	r24, 0x5F	; 95
    acd8:	90 e0       	ldi	r25, 0x00	; 0
    acda:	09 c0       	rjmp	.+18     	; 0xacee <follow_path+0x37a>
    acdc:	9c 01       	movw	r18, r24
    acde:	21 54       	subi	r18, 0x41	; 65
    ace0:	31 09       	sbc	r19, r1
    ace2:	2a 31       	cpi	r18, 0x1A	; 26
    ace4:	31 05       	cpc	r19, r1
    ace6:	c8 f5       	brcc	.+114    	; 0xad5a <follow_path+0x3e6>
    ace8:	e4 2d       	mov	r30, r4
    acea:	e2 60       	ori	r30, 0x02	; 2
    acec:	4e 2e       	mov	r4, r30
    acee:	f8 01       	movw	r30, r16
    acf0:	e8 0d       	add	r30, r8
    acf2:	f9 1d       	adc	r31, r9
    acf4:	84 8f       	std	Z+28, r24	; 0x1c
    acf6:	94 01       	movw	r18, r8
    acf8:	2f 5f       	subi	r18, 0xFF	; 255
    acfa:	3f 4f       	sbci	r19, 0xFF	; 255
    acfc:	49 01       	movw	r8, r18
    acfe:	99 cf       	rjmp	.-206    	; 0xac32 <follow_path+0x2be>
    ad00:	d8 01       	movw	r26, r16
    ad02:	5c 96       	adiw	r26, 0x1c	; 28
    ad04:	8c 91       	ld	r24, X
    ad06:	5c 97       	sbiw	r26, 0x1c	; 28
    ad08:	85 3e       	cpi	r24, 0xE5	; 229
    ad0a:	19 f4       	brne	.+6      	; 0xad12 <follow_path+0x39e>
    ad0c:	e5 e0       	ldi	r30, 0x05	; 5
    ad0e:	5c 96       	adiw	r26, 0x1c	; 28
    ad10:	ec 93       	st	X, r30
    ad12:	f8 e0       	ldi	r31, 0x08	; 8
    ad14:	af 16       	cp	r10, r31
    ad16:	b1 04       	cpc	r11, r1
    ad18:	11 f4       	brne	.+4      	; 0xad1e <follow_path+0x3aa>
    ad1a:	44 0c       	add	r4, r4
    ad1c:	44 0c       	add	r4, r4
    ad1e:	84 2d       	mov	r24, r4
    ad20:	8c 70       	andi	r24, 0x0C	; 12
    ad22:	8c 30       	cpi	r24, 0x0C	; 12
    ad24:	21 f0       	breq	.+8      	; 0xad2e <follow_path+0x3ba>
    ad26:	94 2d       	mov	r25, r4
    ad28:	93 70       	andi	r25, 0x03	; 3
    ad2a:	93 30       	cpi	r25, 0x03	; 3
    ad2c:	19 f4       	brne	.+6      	; 0xad34 <follow_path+0x3c0>
    ad2e:	29 81       	ldd	r18, Y+1	; 0x01
    ad30:	22 60       	ori	r18, 0x02	; 2
    ad32:	29 83       	std	Y+1, r18	; 0x01
    ad34:	39 81       	ldd	r19, Y+1	; 0x01
    ad36:	31 fd       	sbrc	r19, 1
    ad38:	0b c0       	rjmp	.+22     	; 0xad50 <follow_path+0x3dc>
    ad3a:	94 2d       	mov	r25, r4
    ad3c:	93 70       	andi	r25, 0x03	; 3
    ad3e:	91 30       	cpi	r25, 0x01	; 1
    ad40:	11 f4       	brne	.+4      	; 0xad46 <follow_path+0x3d2>
    ad42:	30 61       	ori	r19, 0x10	; 16
    ad44:	39 83       	std	Y+1, r19	; 0x01
    ad46:	84 30       	cpi	r24, 0x04	; 4
    ad48:	19 f4       	brne	.+6      	; 0xad50 <follow_path+0x3dc>
    ad4a:	89 81       	ldd	r24, Y+1	; 0x01
    ad4c:	88 60       	ori	r24, 0x08	; 8
    ad4e:	89 83       	std	Y+1, r24	; 0x01
    ad50:	e9 81       	ldd	r30, Y+1	; 0x01
    ad52:	d8 01       	movw	r26, r16
    ad54:	97 96       	adiw	r26, 0x27	; 39
    ad56:	ec 93       	st	X, r30
    ad58:	b0 ce       	rjmp	.-672    	; 0xaaba <follow_path+0x146>
    ad5a:	9c 01       	movw	r18, r24
    ad5c:	21 56       	subi	r18, 0x61	; 97
    ad5e:	31 09       	sbc	r19, r1
    ad60:	2a 31       	cpi	r18, 0x1A	; 26
    ad62:	31 05       	cpc	r19, r1
    ad64:	20 f6       	brcc	.-120    	; 0xacee <follow_path+0x37a>
    ad66:	f4 2d       	mov	r31, r4
    ad68:	f1 60       	ori	r31, 0x01	; 1
    ad6a:	4f 2e       	mov	r4, r31
    ad6c:	80 97       	sbiw	r24, 0x20	; 32
    ad6e:	bf cf       	rjmp	.-130    	; 0xacee <follow_path+0x37a>
    ad70:	86 e0       	ldi	r24, 0x06	; 6
    ad72:	90 e0       	ldi	r25, 0x00	; 0
    ad74:	1c c0       	rjmp	.+56     	; 0xadae <follow_path+0x43a>
    ad76:	84 30       	cpi	r24, 0x04	; 4
    ad78:	91 05       	cpc	r25, r1
    ad7a:	c9 f4       	brne	.+50     	; 0xadae <follow_path+0x43a>
    ad7c:	32 2f       	mov	r19, r18
    ad7e:	34 70       	andi	r19, 0x04	; 4
    ad80:	25 ff       	sbrs	r18, 5
    ad82:	0a c0       	rjmp	.+20     	; 0xad98 <follow_path+0x424>
    ad84:	33 23       	and	r19, r19
    ad86:	09 f4       	brne	.+2      	; 0xad8a <follow_path+0x416>
    ad88:	b6 ce       	rjmp	.-660    	; 0xaaf6 <follow_path+0x182>
    ad8a:	80 e8       	ldi	r24, 0x80	; 128
    ad8c:	d8 01       	movw	r26, r16
    ad8e:	97 96       	adiw	r26, 0x27	; 39
    ad90:	8c 93       	st	X, r24
    ad92:	80 e0       	ldi	r24, 0x00	; 0
    ad94:	90 e0       	ldi	r25, 0x00	; 0
    ad96:	0b c0       	rjmp	.+22     	; 0xadae <follow_path+0x43a>
    ad98:	31 11       	cpse	r19, r1
    ad9a:	09 c0       	rjmp	.+18     	; 0xadae <follow_path+0x43a>
    ad9c:	85 e0       	ldi	r24, 0x05	; 5
    ad9e:	90 e0       	ldi	r25, 0x00	; 0
    ada0:	06 c0       	rjmp	.+12     	; 0xadae <follow_path+0x43a>
    ada2:	bb e0       	ldi	r27, 0x0B	; 11
    ada4:	ab 16       	cp	r10, r27
    ada6:	b1 04       	cpc	r11, r1
    ada8:	09 f0       	breq	.+2      	; 0xadac <follow_path+0x438>
    adaa:	6b cf       	rjmp	.-298    	; 0xac82 <follow_path+0x30e>
    adac:	55 cf       	rjmp	.-342    	; 0xac58 <follow_path+0x2e4>
    adae:	27 96       	adiw	r28, 0x07	; 7
    adb0:	e2 e1       	ldi	r30, 0x12	; 18
    adb2:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000adb6 <f_mount>:
    adb6:	a6 e0       	ldi	r26, 0x06	; 6
    adb8:	b0 e0       	ldi	r27, 0x00	; 0
    adba:	e1 ee       	ldi	r30, 0xE1	; 225
    adbc:	f6 e5       	ldi	r31, 0x56	; 86
    adbe:	0c 94 4a e9 	jmp	0x1d294	; 0x1d294 <__prologue_saves__+0x1e>
    adc2:	9c 83       	std	Y+4, r25	; 0x04
    adc4:	8b 83       	std	Y+3, r24	; 0x03
    adc6:	7e 83       	std	Y+6, r23	; 0x06
    adc8:	6d 83       	std	Y+5, r22	; 0x05
    adca:	14 2f       	mov	r17, r20
    adcc:	7a 83       	std	Y+2, r23	; 0x02
    adce:	69 83       	std	Y+1, r22	; 0x01
    add0:	ce 01       	movw	r24, r28
    add2:	01 96       	adiw	r24, 0x01	; 1
    add4:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <get_ldnumber>
    add8:	97 fd       	sbrc	r25, 7
    adda:	22 c0       	rjmp	.+68     	; 0xae20 <f_mount+0x6a>
    addc:	88 0f       	add	r24, r24
    adde:	99 1f       	adc	r25, r25
    ade0:	fc 01       	movw	r30, r24
    ade2:	ee 51       	subi	r30, 0x1E	; 30
    ade4:	f8 4e       	sbci	r31, 0xE8	; 232
    ade6:	01 90       	ld	r0, Z+
    ade8:	f0 81       	ld	r31, Z
    adea:	e0 2d       	mov	r30, r0
    adec:	30 97       	sbiw	r30, 0x00	; 0
    adee:	09 f0       	breq	.+2      	; 0xadf2 <f_mount+0x3c>
    adf0:	10 82       	st	Z, r1
    adf2:	eb 81       	ldd	r30, Y+3	; 0x03
    adf4:	fc 81       	ldd	r31, Y+4	; 0x04
    adf6:	30 97       	sbiw	r30, 0x00	; 0
    adf8:	09 f0       	breq	.+2      	; 0xadfc <f_mount+0x46>
    adfa:	10 82       	st	Z, r1
    adfc:	dc 01       	movw	r26, r24
    adfe:	ae 51       	subi	r26, 0x1E	; 30
    ae00:	b8 4e       	sbci	r27, 0xE8	; 232
    ae02:	ed 93       	st	X+, r30
    ae04:	fc 93       	st	X, r31
    ae06:	ef 2b       	or	r30, r31
    ae08:	71 f0       	breq	.+28     	; 0xae26 <f_mount+0x70>
    ae0a:	11 30       	cpi	r17, 0x01	; 1
    ae0c:	61 f4       	brne	.+24     	; 0xae26 <f_mount+0x70>
    ae0e:	40 e0       	ldi	r20, 0x00	; 0
    ae10:	be 01       	movw	r22, r28
    ae12:	6d 5f       	subi	r22, 0xFD	; 253
    ae14:	7f 4f       	sbci	r23, 0xFF	; 255
    ae16:	ce 01       	movw	r24, r28
    ae18:	05 96       	adiw	r24, 0x05	; 5
    ae1a:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    ae1e:	05 c0       	rjmp	.+10     	; 0xae2a <f_mount+0x74>
    ae20:	8b e0       	ldi	r24, 0x0B	; 11
    ae22:	90 e0       	ldi	r25, 0x00	; 0
    ae24:	02 c0       	rjmp	.+4      	; 0xae2a <f_mount+0x74>
    ae26:	80 e0       	ldi	r24, 0x00	; 0
    ae28:	90 e0       	ldi	r25, 0x00	; 0
    ae2a:	26 96       	adiw	r28, 0x06	; 6
    ae2c:	e3 e0       	ldi	r30, 0x03	; 3
    ae2e:	0c 94 66 e9 	jmp	0x1d2cc	; 0x1d2cc <__epilogue_restores__+0x1e>

0000ae32 <f_open>:
    ae32:	2f 92       	push	r2
    ae34:	3f 92       	push	r3
    ae36:	4f 92       	push	r4
    ae38:	5f 92       	push	r5
    ae3a:	6f 92       	push	r6
    ae3c:	7f 92       	push	r7
    ae3e:	8f 92       	push	r8
    ae40:	9f 92       	push	r9
    ae42:	af 92       	push	r10
    ae44:	bf 92       	push	r11
    ae46:	df 92       	push	r13
    ae48:	ef 92       	push	r14
    ae4a:	ff 92       	push	r15
    ae4c:	0f 93       	push	r16
    ae4e:	1f 93       	push	r17
    ae50:	cf 93       	push	r28
    ae52:	df 93       	push	r29
    ae54:	cd b7       	in	r28, 0x3d	; 61
    ae56:	de b7       	in	r29, 0x3e	; 62
    ae58:	e6 97       	sbiw	r28, 0x36	; 54
    ae5a:	0f b6       	in	r0, 0x3f	; 63
    ae5c:	f8 94       	cli
    ae5e:	de bf       	out	0x3e, r29	; 62
    ae60:	0f be       	out	0x3f, r0	; 63
    ae62:	cd bf       	out	0x3d, r28	; 61
    ae64:	7a ab       	std	Y+50, r23	; 0x32
    ae66:	69 ab       	std	Y+49, r22	; 0x31
    ae68:	00 97       	sbiw	r24, 0x00	; 0
    ae6a:	09 f4       	brne	.+2      	; 0xae6e <f_open+0x3c>
    ae6c:	b0 c1       	rjmp	.+864    	; 0xb1ce <f_open+0x39c>
    ae6e:	94 2e       	mov	r9, r20
    ae70:	7c 01       	movw	r14, r24
    ae72:	24 2f       	mov	r18, r20
    ae74:	2f 73       	andi	r18, 0x3F	; 63
    ae76:	d2 2e       	mov	r13, r18
    ae78:	42 2f       	mov	r20, r18
    ae7a:	be 01       	movw	r22, r28
    ae7c:	61 5d       	subi	r22, 0xD1	; 209
    ae7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ae80:	ce 01       	movw	r24, r28
    ae82:	c1 96       	adiw	r24, 0x31	; 49
    ae84:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    ae88:	00 97       	sbiw	r24, 0x00	; 0
    ae8a:	09 f0       	breq	.+2      	; 0xae8e <f_open+0x5c>
    ae8c:	9a c1       	rjmp	.+820    	; 0xb1c2 <f_open+0x390>
    ae8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    ae90:	98 a9       	ldd	r25, Y+48	; 0x30
    ae92:	9a 83       	std	Y+2, r25	; 0x02
    ae94:	89 83       	std	Y+1, r24	; 0x01
    ae96:	80 e0       	ldi	r24, 0x00	; 0
    ae98:	92 e0       	ldi	r25, 0x02	; 2
    ae9a:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    ae9e:	5c 01       	movw	r10, r24
    aea0:	00 97       	sbiw	r24, 0x00	; 0
    aea2:	09 f4       	brne	.+2      	; 0xaea6 <f_open+0x74>
    aea4:	96 c1       	rjmp	.+812    	; 0xb1d2 <f_open+0x3a0>
    aea6:	ef a5       	ldd	r30, Y+47	; 0x2f
    aea8:	f8 a9       	ldd	r31, Y+48	; 0x30
    aeaa:	94 87       	std	Z+12, r25	; 0x0c
    aeac:	83 87       	std	Z+11, r24	; 0x0b
    aeae:	69 a9       	ldd	r22, Y+49	; 0x31
    aeb0:	7a a9       	ldd	r23, Y+50	; 0x32
    aeb2:	ce 01       	movw	r24, r28
    aeb4:	01 96       	adiw	r24, 0x01	; 1
    aeb6:	5e dd       	rcall	.-1348   	; 0xa974 <follow_path>
    aeb8:	8c 01       	movw	r16, r24
    aeba:	89 2b       	or	r24, r25
    aebc:	29 f4       	brne	.+10     	; 0xaec8 <f_open+0x96>
    aebe:	88 a5       	ldd	r24, Y+40	; 0x28
    aec0:	87 ff       	sbrs	r24, 7
    aec2:	02 c0       	rjmp	.+4      	; 0xaec8 <f_open+0x96>
    aec4:	06 e0       	ldi	r16, 0x06	; 6
    aec6:	10 e0       	ldi	r17, 0x00	; 0
    aec8:	89 2d       	mov	r24, r9
    aeca:	8c 71       	andi	r24, 0x1C	; 28
    aecc:	09 f4       	brne	.+2      	; 0xaed0 <f_open+0x9e>
    aece:	7e c0       	rjmp	.+252    	; 0xafcc <f_open+0x19a>
    aed0:	01 15       	cp	r16, r1
    aed2:	11 05       	cpc	r17, r1
    aed4:	79 f0       	breq	.+30     	; 0xaef4 <f_open+0xc2>
    aed6:	04 30       	cpi	r16, 0x04	; 4
    aed8:	11 05       	cpc	r17, r1
    aeda:	09 f0       	breq	.+2      	; 0xaede <f_open+0xac>
    aedc:	8a c1       	rjmp	.+788    	; 0xb1f2 <f_open+0x3c0>
    aede:	ce 01       	movw	r24, r28
    aee0:	01 96       	adiw	r24, 0x01	; 1
    aee2:	a4 db       	rcall	.-2232   	; 0xa62c <dir_register>
    aee4:	8c 01       	movw	r16, r24
    aee6:	89 2b       	or	r24, r25
    aee8:	09 f0       	breq	.+2      	; 0xaeec <f_open+0xba>
    aeea:	83 c1       	rjmp	.+774    	; 0xb1f2 <f_open+0x3c0>
    aeec:	8d 2d       	mov	r24, r13
    aeee:	88 60       	ori	r24, 0x08	; 8
    aef0:	d8 2e       	mov	r13, r24
    aef2:	06 c0       	rjmp	.+12     	; 0xaf00 <f_open+0xce>
    aef4:	8d 81       	ldd	r24, Y+5	; 0x05
    aef6:	81 71       	andi	r24, 0x11	; 17
    aef8:	09 f0       	breq	.+2      	; 0xaefc <f_open+0xca>
    aefa:	79 c1       	rjmp	.+754    	; 0xb1ee <f_open+0x3bc>
    aefc:	92 fc       	sbrc	r9, 2
    aefe:	6e c1       	rjmp	.+732    	; 0xb1dc <f_open+0x3aa>
    af00:	d3 fe       	sbrs	r13, 3
    af02:	74 c0       	rjmp	.+232    	; 0xafec <f_open+0x1ba>
    af04:	0e 94 92 73 	call	0xe724	; 0xe724 <get_fattime>
    af08:	2b 01       	movw	r4, r22
    af0a:	3c 01       	movw	r6, r24
    af0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    af0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    af10:	b3 01       	movw	r22, r6
    af12:	a2 01       	movw	r20, r4
    af14:	0e 96       	adiw	r24, 0x0e	; 14
    af16:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    af1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    af1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    af1e:	b3 01       	movw	r22, r6
    af20:	a2 01       	movw	r20, r4
    af22:	46 96       	adiw	r24, 0x16	; 22
    af24:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    af28:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af2a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af2c:	80 e2       	ldi	r24, 0x20	; 32
    af2e:	83 87       	std	Z+11, r24	; 0x0b
    af30:	0b 8d       	ldd	r16, Y+27	; 0x1b
    af32:	1c 8d       	ldd	r17, Y+28	; 0x1c
    af34:	8f a4       	ldd	r8, Y+47	; 0x2f
    af36:	98 a8       	ldd	r9, Y+48	; 0x30
    af38:	b8 01       	movw	r22, r16
    af3a:	d4 01       	movw	r26, r8
    af3c:	8c 91       	ld	r24, X
    af3e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    af42:	2b 01       	movw	r4, r22
    af44:	3c 01       	movw	r6, r24
    af46:	f8 01       	movw	r30, r16
    af48:	12 8e       	std	Z+26, r1	; 0x1a
    af4a:	13 8e       	std	Z+27, r1	; 0x1b
    af4c:	d4 01       	movw	r26, r8
    af4e:	8c 91       	ld	r24, X
    af50:	83 30       	cpi	r24, 0x03	; 3
    af52:	11 f4       	brne	.+4      	; 0xaf58 <f_open+0x126>
    af54:	14 8a       	std	Z+20, r1	; 0x14
    af56:	15 8a       	std	Z+21, r1	; 0x15
    af58:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af5a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af5c:	14 8e       	std	Z+28, r1	; 0x1c
    af5e:	15 8e       	std	Z+29, r1	; 0x1d
    af60:	16 8e       	std	Z+30, r1	; 0x1e
    af62:	17 8e       	std	Z+31, r1	; 0x1f
    af64:	81 e0       	ldi	r24, 0x01	; 1
    af66:	f4 01       	movw	r30, r8
    af68:	83 83       	std	Z+3, r24	; 0x03
    af6a:	41 14       	cp	r4, r1
    af6c:	51 04       	cpc	r5, r1
    af6e:	61 04       	cpc	r6, r1
    af70:	71 04       	cpc	r7, r1
    af72:	c9 f1       	breq	.+114    	; 0xafe6 <f_open+0x1b4>
    af74:	81 a9       	ldd	r24, Z+49	; 0x31
    af76:	92 a9       	ldd	r25, Z+50	; 0x32
    af78:	a3 a9       	ldd	r26, Z+51	; 0x33
    af7a:	b4 a9       	ldd	r27, Z+52	; 0x34
    af7c:	8b ab       	std	Y+51, r24	; 0x33
    af7e:	9c ab       	std	Y+52, r25	; 0x34
    af80:	ad ab       	std	Y+53, r26	; 0x35
    af82:	be ab       	std	Y+54, r27	; 0x36
    af84:	00 e0       	ldi	r16, 0x00	; 0
    af86:	10 e0       	ldi	r17, 0x00	; 0
    af88:	98 01       	movw	r18, r16
    af8a:	b3 01       	movw	r22, r6
    af8c:	a2 01       	movw	r20, r4
    af8e:	ce 01       	movw	r24, r28
    af90:	01 96       	adiw	r24, 0x01	; 1
    af92:	0e 94 1e 4e 	call	0x9c3c	; 0x9c3c <remove_chain>
    af96:	8c 01       	movw	r16, r24
    af98:	89 2b       	or	r24, r25
    af9a:	09 f0       	breq	.+2      	; 0xaf9e <f_open+0x16c>
    af9c:	2a c1       	rjmp	.+596    	; 0xb1f2 <f_open+0x3c0>
    af9e:	4b a9       	ldd	r20, Y+51	; 0x33
    afa0:	5c a9       	ldd	r21, Y+52	; 0x34
    afa2:	6d a9       	ldd	r22, Y+53	; 0x35
    afa4:	7e a9       	ldd	r23, Y+54	; 0x36
    afa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    afa8:	98 a9       	ldd	r25, Y+48	; 0x30
    afaa:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    afae:	8c 01       	movw	r16, r24
    afb0:	ef a5       	ldd	r30, Y+47	; 0x2f
    afb2:	f8 a9       	ldd	r31, Y+48	; 0x30
    afb4:	b1 e0       	ldi	r27, 0x01	; 1
    afb6:	4b 1a       	sub	r4, r27
    afb8:	51 08       	sbc	r5, r1
    afba:	61 08       	sbc	r6, r1
    afbc:	71 08       	sbc	r7, r1
    afbe:	45 86       	std	Z+13, r4	; 0x0d
    afc0:	56 86       	std	Z+14, r5	; 0x0e
    afc2:	67 86       	std	Z+15, r6	; 0x0f
    afc4:	70 8a       	std	Z+16, r7	; 0x10
    afc6:	89 2b       	or	r24, r25
    afc8:	61 f0       	breq	.+24     	; 0xafe2 <f_open+0x1b0>
    afca:	13 c1       	rjmp	.+550    	; 0xb1f2 <f_open+0x3c0>
    afcc:	01 15       	cp	r16, r1
    afce:	11 05       	cpc	r17, r1
    afd0:	09 f0       	breq	.+2      	; 0xafd4 <f_open+0x1a2>
    afd2:	0f c1       	rjmp	.+542    	; 0xb1f2 <f_open+0x3c0>
    afd4:	8d 81       	ldd	r24, Y+5	; 0x05
    afd6:	84 fd       	sbrc	r24, 4
    afd8:	07 c1       	rjmp	.+526    	; 0xb1e8 <f_open+0x3b6>
    afda:	91 fe       	sbrs	r9, 1
    afdc:	02 c0       	rjmp	.+4      	; 0xafe2 <f_open+0x1b0>
    afde:	80 fd       	sbrc	r24, 0
    afe0:	06 c1       	rjmp	.+524    	; 0xb1ee <f_open+0x3bc>
    afe2:	d3 fe       	sbrs	r13, 3
    afe4:	03 c0       	rjmp	.+6      	; 0xafec <f_open+0x1ba>
    afe6:	ed 2d       	mov	r30, r13
    afe8:	e0 64       	ori	r30, 0x40	; 64
    afea:	de 2e       	mov	r13, r30
    afec:	0f a5       	ldd	r16, Y+47	; 0x2f
    afee:	18 a9       	ldd	r17, Y+48	; 0x30
    aff0:	f8 01       	movw	r30, r16
    aff2:	81 a9       	ldd	r24, Z+49	; 0x31
    aff4:	92 a9       	ldd	r25, Z+50	; 0x32
    aff6:	a3 a9       	ldd	r26, Z+51	; 0x33
    aff8:	b4 a9       	ldd	r27, Z+52	; 0x34
    affa:	f7 01       	movw	r30, r14
    affc:	84 8f       	std	Z+28, r24	; 0x1c
    affe:	95 8f       	std	Z+29, r25	; 0x1d
    b000:	a6 8f       	std	Z+30, r26	; 0x1e
    b002:	b7 8f       	std	Z+31, r27	; 0x1f
    b004:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b006:	9c 8c       	ldd	r9, Y+28	; 0x1c
    b008:	91 a2       	std	Z+33, r9	; 0x21
    b00a:	80 a2       	std	Z+32, r8	; 0x20
    b00c:	b4 01       	movw	r22, r8
    b00e:	d8 01       	movw	r26, r16
    b010:	8c 91       	ld	r24, X
    b012:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    b016:	f7 01       	movw	r30, r14
    b018:	66 83       	std	Z+6, r22	; 0x06
    b01a:	77 83       	std	Z+7, r23	; 0x07
    b01c:	80 87       	std	Z+8, r24	; 0x08
    b01e:	91 87       	std	Z+9, r25	; 0x09
    b020:	c4 01       	movw	r24, r8
    b022:	4c 96       	adiw	r24, 0x1c	; 28
    b024:	0e 94 dd 45 	call	0x8bba	; 0x8bba <ld_dword>
    b028:	d7 01       	movw	r26, r14
    b02a:	1a 96       	adiw	r26, 0x0a	; 10
    b02c:	6d 93       	st	X+, r22
    b02e:	7d 93       	st	X+, r23
    b030:	8d 93       	st	X+, r24
    b032:	9c 93       	st	X, r25
    b034:	1d 97       	sbiw	r26, 0x0d	; 13
    b036:	93 96       	adiw	r26, 0x23	; 35
    b038:	1c 92       	st	X, r1
    b03a:	1e 92       	st	-X, r1
    b03c:	92 97       	sbiw	r26, 0x22	; 34
    b03e:	11 96       	adiw	r26, 0x01	; 1
    b040:	1c 93       	st	X, r17
    b042:	0e 93       	st	-X, r16
    b044:	f8 01       	movw	r30, r16
    b046:	85 81       	ldd	r24, Z+5	; 0x05
    b048:	96 81       	ldd	r25, Z+6	; 0x06
    b04a:	13 96       	adiw	r26, 0x03	; 3
    b04c:	9c 93       	st	X, r25
    b04e:	8e 93       	st	-X, r24
    b050:	12 97       	sbiw	r26, 0x02	; 2
    b052:	1e 96       	adiw	r26, 0x0e	; 14
    b054:	dc 92       	st	X, r13
    b056:	1e 97       	sbiw	r26, 0x0e	; 14
    b058:	1f 96       	adiw	r26, 0x0f	; 15
    b05a:	1c 92       	st	X, r1
    b05c:	1f 97       	sbiw	r26, 0x0f	; 15
    b05e:	58 96       	adiw	r26, 0x18	; 24
    b060:	1d 92       	st	X+, r1
    b062:	1d 92       	st	X+, r1
    b064:	1d 92       	st	X+, r1
    b066:	1c 92       	st	X, r1
    b068:	5b 97       	sbiw	r26, 0x1b	; 27
    b06a:	f7 01       	movw	r30, r14
    b06c:	10 8a       	std	Z+16, r1	; 0x10
    b06e:	11 8a       	std	Z+17, r1	; 0x11
    b070:	12 8a       	std	Z+18, r1	; 0x12
    b072:	13 8a       	std	Z+19, r1	; 0x13
    b074:	c7 01       	movw	r24, r14
    b076:	84 96       	adiw	r24, 0x24	; 36
    b078:	9c ab       	std	Y+52, r25	; 0x34
    b07a:	8b ab       	std	Y+51, r24	; 0x33
    b07c:	40 e0       	ldi	r20, 0x00	; 0
    b07e:	52 e0       	ldi	r21, 0x02	; 2
    b080:	60 e0       	ldi	r22, 0x00	; 0
    b082:	70 e0       	ldi	r23, 0x00	; 0
    b084:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    b088:	d5 fc       	sbrc	r13, 5
    b08a:	03 c0       	rjmp	.+6      	; 0xb092 <f_open+0x260>
    b08c:	00 e0       	ldi	r16, 0x00	; 0
    b08e:	10 e0       	ldi	r17, 0x00	; 0
    b090:	91 c0       	rjmp	.+290    	; 0xb1b4 <f_open+0x382>
    b092:	d7 01       	movw	r26, r14
    b094:	1a 96       	adiw	r26, 0x0a	; 10
    b096:	2d 90       	ld	r2, X+
    b098:	3d 90       	ld	r3, X+
    b09a:	4d 90       	ld	r4, X+
    b09c:	5c 90       	ld	r5, X
    b09e:	1d 97       	sbiw	r26, 0x0d	; 13
    b0a0:	21 14       	cp	r2, r1
    b0a2:	31 04       	cpc	r3, r1
    b0a4:	41 04       	cpc	r4, r1
    b0a6:	51 04       	cpc	r5, r1
    b0a8:	89 f3       	breq	.-30     	; 0xb08c <f_open+0x25a>
    b0aa:	f7 01       	movw	r30, r14
    b0ac:	20 8a       	std	Z+16, r2	; 0x10
    b0ae:	31 8a       	std	Z+17, r3	; 0x11
    b0b0:	42 8a       	std	Z+18, r4	; 0x12
    b0b2:	53 8a       	std	Z+19, r5	; 0x13
    b0b4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0b6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0b8:	81 85       	ldd	r24, Z+9	; 0x09
    b0ba:	92 85       	ldd	r25, Z+10	; 0x0a
    b0bc:	a0 e0       	ldi	r26, 0x00	; 0
    b0be:	b0 e0       	ldi	r27, 0x00	; 0
    b0c0:	3c 01       	movw	r6, r24
    b0c2:	4d 01       	movw	r8, r26
    b0c4:	59 e0       	ldi	r21, 0x09	; 9
    b0c6:	66 0c       	add	r6, r6
    b0c8:	77 1c       	adc	r7, r7
    b0ca:	88 1c       	adc	r8, r8
    b0cc:	99 1c       	adc	r9, r9
    b0ce:	5a 95       	dec	r21
    b0d0:	d1 f7       	brne	.-12     	; 0xb0c6 <f_open+0x294>
    b0d2:	d7 01       	movw	r26, r14
    b0d4:	16 96       	adiw	r26, 0x06	; 6
    b0d6:	4d 91       	ld	r20, X+
    b0d8:	5d 91       	ld	r21, X+
    b0da:	6d 91       	ld	r22, X+
    b0dc:	7c 91       	ld	r23, X
    b0de:	19 97       	sbiw	r26, 0x09	; 9
    b0e0:	62 14       	cp	r6, r2
    b0e2:	73 04       	cpc	r7, r3
    b0e4:	84 04       	cpc	r8, r4
    b0e6:	95 04       	cpc	r9, r5
    b0e8:	f0 f4       	brcc	.+60     	; 0xb126 <f_open+0x2f4>
    b0ea:	f7 01       	movw	r30, r14
    b0ec:	80 81       	ld	r24, Z
    b0ee:	91 81       	ldd	r25, Z+1	; 0x01
    b0f0:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <get_fat.isra.7>
    b0f4:	ab 01       	movw	r20, r22
    b0f6:	bc 01       	movw	r22, r24
    b0f8:	d2 01       	movw	r26, r4
    b0fa:	c1 01       	movw	r24, r2
    b0fc:	86 19       	sub	r24, r6
    b0fe:	97 09       	sbc	r25, r7
    b100:	a8 09       	sbc	r26, r8
    b102:	b9 09       	sbc	r27, r9
    b104:	1c 01       	movw	r2, r24
    b106:	2d 01       	movw	r4, r26
    b108:	42 30       	cpi	r20, 0x02	; 2
    b10a:	51 05       	cpc	r21, r1
    b10c:	61 05       	cpc	r22, r1
    b10e:	71 05       	cpc	r23, r1
    b110:	08 f4       	brcc	.+2      	; 0xb114 <f_open+0x2e2>
    b112:	67 c0       	rjmp	.+206    	; 0xb1e2 <f_open+0x3b0>
    b114:	4f 3f       	cpi	r20, 0xFF	; 255
    b116:	ff ef       	ldi	r31, 0xFF	; 255
    b118:	5f 07       	cpc	r21, r31
    b11a:	6f 07       	cpc	r22, r31
    b11c:	7f 07       	cpc	r23, r31
    b11e:	01 f7       	brne	.-64     	; 0xb0e0 <f_open+0x2ae>
    b120:	01 e0       	ldi	r16, 0x01	; 1
    b122:	10 e0       	ldi	r17, 0x00	; 0
    b124:	02 c0       	rjmp	.+4      	; 0xb12a <f_open+0x2f8>
    b126:	00 e0       	ldi	r16, 0x00	; 0
    b128:	10 e0       	ldi	r17, 0x00	; 0
    b12a:	d7 01       	movw	r26, r14
    b12c:	54 96       	adiw	r26, 0x14	; 20
    b12e:	4d 93       	st	X+, r20
    b130:	5d 93       	st	X+, r21
    b132:	6d 93       	st	X+, r22
    b134:	7c 93       	st	X, r23
    b136:	57 97       	sbiw	r26, 0x17	; 23
    b138:	01 15       	cp	r16, r1
    b13a:	11 05       	cpc	r17, r1
    b13c:	d9 f5       	brne	.+118    	; 0xb1b4 <f_open+0x382>
    b13e:	d2 01       	movw	r26, r4
    b140:	c1 01       	movw	r24, r2
    b142:	91 70       	andi	r25, 0x01	; 1
    b144:	aa 27       	eor	r26, r26
    b146:	bb 27       	eor	r27, r27
    b148:	89 2b       	or	r24, r25
    b14a:	8a 2b       	or	r24, r26
    b14c:	8b 2b       	or	r24, r27
    b14e:	09 f4       	brne	.+2      	; 0xb152 <f_open+0x320>
    b150:	9d cf       	rjmp	.-198    	; 0xb08c <f_open+0x25a>
    b152:	6f a4       	ldd	r6, Y+47	; 0x2f
    b154:	78 a8       	ldd	r7, Y+48	; 0x30
    b156:	c3 01       	movw	r24, r6
    b158:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    b15c:	61 15       	cp	r22, r1
    b15e:	71 05       	cpc	r23, r1
    b160:	81 05       	cpc	r24, r1
    b162:	91 05       	cpc	r25, r1
    b164:	29 f1       	breq	.+74     	; 0xb1b0 <f_open+0x37e>
    b166:	92 01       	movw	r18, r4
    b168:	81 01       	movw	r16, r2
    b16a:	49 e0       	ldi	r20, 0x09	; 9
    b16c:	36 95       	lsr	r19
    b16e:	27 95       	ror	r18
    b170:	17 95       	ror	r17
    b172:	07 95       	ror	r16
    b174:	4a 95       	dec	r20
    b176:	d1 f7       	brne	.-12     	; 0xb16c <f_open+0x33a>
    b178:	a9 01       	movw	r20, r18
    b17a:	98 01       	movw	r18, r16
    b17c:	26 0f       	add	r18, r22
    b17e:	37 1f       	adc	r19, r23
    b180:	48 1f       	adc	r20, r24
    b182:	59 1f       	adc	r21, r25
    b184:	f7 01       	movw	r30, r14
    b186:	20 8f       	std	Z+24, r18	; 0x18
    b188:	31 8f       	std	Z+25, r19	; 0x19
    b18a:	42 8f       	std	Z+26, r20	; 0x1a
    b18c:	53 8f       	std	Z+27, r21	; 0x1b
    b18e:	01 e0       	ldi	r16, 0x01	; 1
    b190:	10 e0       	ldi	r17, 0x00	; 0
    b192:	6b a9       	ldd	r22, Y+51	; 0x33
    b194:	7c a9       	ldd	r23, Y+52	; 0x34
    b196:	d3 01       	movw	r26, r6
    b198:	11 96       	adiw	r26, 0x01	; 1
    b19a:	8c 91       	ld	r24, X
    b19c:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    b1a0:	31 e0       	ldi	r19, 0x01	; 1
    b1a2:	20 e0       	ldi	r18, 0x00	; 0
    b1a4:	89 2b       	or	r24, r25
    b1a6:	09 f4       	brne	.+2      	; 0xb1aa <f_open+0x378>
    b1a8:	30 e0       	ldi	r19, 0x00	; 0
    b1aa:	03 2f       	mov	r16, r19
    b1ac:	12 2f       	mov	r17, r18
    b1ae:	02 c0       	rjmp	.+4      	; 0xb1b4 <f_open+0x382>
    b1b0:	02 e0       	ldi	r16, 0x02	; 2
    b1b2:	10 e0       	ldi	r17, 0x00	; 0
    b1b4:	c5 01       	movw	r24, r10
    b1b6:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    b1ba:	01 15       	cp	r16, r1
    b1bc:	11 05       	cpc	r17, r1
    b1be:	59 f0       	breq	.+22     	; 0xb1d6 <f_open+0x3a4>
    b1c0:	01 c0       	rjmp	.+2      	; 0xb1c4 <f_open+0x392>
    b1c2:	8c 01       	movw	r16, r24
    b1c4:	f7 01       	movw	r30, r14
    b1c6:	11 82       	std	Z+1, r1	; 0x01
    b1c8:	10 82       	st	Z, r1
    b1ca:	c8 01       	movw	r24, r16
    b1cc:	16 c0       	rjmp	.+44     	; 0xb1fa <f_open+0x3c8>
    b1ce:	89 e0       	ldi	r24, 0x09	; 9
    b1d0:	03 c0       	rjmp	.+6      	; 0xb1d8 <f_open+0x3a6>
    b1d2:	81 e1       	ldi	r24, 0x11	; 17
    b1d4:	01 c0       	rjmp	.+2      	; 0xb1d8 <f_open+0x3a6>
    b1d6:	80 e0       	ldi	r24, 0x00	; 0
    b1d8:	90 e0       	ldi	r25, 0x00	; 0
    b1da:	0f c0       	rjmp	.+30     	; 0xb1fa <f_open+0x3c8>
    b1dc:	08 e0       	ldi	r16, 0x08	; 8
    b1de:	10 e0       	ldi	r17, 0x00	; 0
    b1e0:	08 c0       	rjmp	.+16     	; 0xb1f2 <f_open+0x3c0>
    b1e2:	02 e0       	ldi	r16, 0x02	; 2
    b1e4:	10 e0       	ldi	r17, 0x00	; 0
    b1e6:	a1 cf       	rjmp	.-190    	; 0xb12a <f_open+0x2f8>
    b1e8:	04 e0       	ldi	r16, 0x04	; 4
    b1ea:	10 e0       	ldi	r17, 0x00	; 0
    b1ec:	02 c0       	rjmp	.+4      	; 0xb1f2 <f_open+0x3c0>
    b1ee:	07 e0       	ldi	r16, 0x07	; 7
    b1f0:	10 e0       	ldi	r17, 0x00	; 0
    b1f2:	c5 01       	movw	r24, r10
    b1f4:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    b1f8:	e5 cf       	rjmp	.-54     	; 0xb1c4 <f_open+0x392>
    b1fa:	e6 96       	adiw	r28, 0x36	; 54
    b1fc:	0f b6       	in	r0, 0x3f	; 63
    b1fe:	f8 94       	cli
    b200:	de bf       	out	0x3e, r29	; 62
    b202:	0f be       	out	0x3f, r0	; 63
    b204:	cd bf       	out	0x3d, r28	; 61
    b206:	df 91       	pop	r29
    b208:	cf 91       	pop	r28
    b20a:	1f 91       	pop	r17
    b20c:	0f 91       	pop	r16
    b20e:	ff 90       	pop	r15
    b210:	ef 90       	pop	r14
    b212:	df 90       	pop	r13
    b214:	bf 90       	pop	r11
    b216:	af 90       	pop	r10
    b218:	9f 90       	pop	r9
    b21a:	8f 90       	pop	r8
    b21c:	7f 90       	pop	r7
    b21e:	6f 90       	pop	r6
    b220:	5f 90       	pop	r5
    b222:	4f 90       	pop	r4
    b224:	3f 90       	pop	r3
    b226:	2f 90       	pop	r2
    b228:	08 95       	ret

0000b22a <f_read>:
    b22a:	a6 e0       	ldi	r26, 0x06	; 6
    b22c:	b0 e0       	ldi	r27, 0x00	; 0
    b22e:	eb e1       	ldi	r30, 0x1B	; 27
    b230:	f9 e5       	ldi	r31, 0x59	; 89
    b232:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    b236:	7c 01       	movw	r14, r24
    b238:	4b 01       	movw	r8, r22
    b23a:	5a 01       	movw	r10, r20
    b23c:	3e 83       	std	Y+6, r19	; 0x06
    b23e:	2d 83       	std	Y+5, r18	; 0x05
    b240:	f9 01       	movw	r30, r18
    b242:	11 82       	std	Z+1, r1	; 0x01
    b244:	10 82       	st	Z, r1
    b246:	be 01       	movw	r22, r28
    b248:	6f 5f       	subi	r22, 0xFF	; 255
    b24a:	7f 4f       	sbci	r23, 0xFF	; 255
    b24c:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    b250:	00 97       	sbiw	r24, 0x00	; 0
    b252:	09 f0       	breq	.+2      	; 0xb256 <f_read+0x2c>
    b254:	31 c1       	rjmp	.+610    	; 0xb4b8 <f_read+0x28e>
    b256:	f7 01       	movw	r30, r14
    b258:	87 85       	ldd	r24, Z+15	; 0x0f
    b25a:	90 e0       	ldi	r25, 0x00	; 0
    b25c:	00 97       	sbiw	r24, 0x00	; 0
    b25e:	09 f0       	breq	.+2      	; 0xb262 <f_read+0x38>
    b260:	2b c1       	rjmp	.+598    	; 0xb4b8 <f_read+0x28e>
    b262:	86 85       	ldd	r24, Z+14	; 0x0e
    b264:	80 ff       	sbrs	r24, 0
    b266:	26 c1       	rjmp	.+588    	; 0xb4b4 <f_read+0x28a>
    b268:	82 85       	ldd	r24, Z+10	; 0x0a
    b26a:	93 85       	ldd	r25, Z+11	; 0x0b
    b26c:	a4 85       	ldd	r26, Z+12	; 0x0c
    b26e:	b5 85       	ldd	r27, Z+13	; 0x0d
    b270:	40 89       	ldd	r20, Z+16	; 0x10
    b272:	51 89       	ldd	r21, Z+17	; 0x11
    b274:	62 89       	ldd	r22, Z+18	; 0x12
    b276:	73 89       	ldd	r23, Z+19	; 0x13
    b278:	84 1b       	sub	r24, r20
    b27a:	95 0b       	sbc	r25, r21
    b27c:	a6 0b       	sbc	r26, r22
    b27e:	b7 0b       	sbc	r27, r23
    b280:	a5 01       	movw	r20, r10
    b282:	60 e0       	ldi	r22, 0x00	; 0
    b284:	70 e0       	ldi	r23, 0x00	; 0
    b286:	84 17       	cp	r24, r20
    b288:	95 07       	cpc	r25, r21
    b28a:	a6 07       	cpc	r26, r22
    b28c:	b7 07       	cpc	r27, r23
    b28e:	08 f4       	brcc	.+2      	; 0xb292 <f_read+0x68>
    b290:	5c 01       	movw	r10, r24
    b292:	17 01       	movw	r2, r14
    b294:	f4 e2       	ldi	r31, 0x24	; 36
    b296:	2f 0e       	add	r2, r31
    b298:	31 1c       	adc	r3, r1
    b29a:	a1 14       	cp	r10, r1
    b29c:	b1 04       	cpc	r11, r1
    b29e:	09 f4       	brne	.+2      	; 0xb2a2 <f_read+0x78>
    b2a0:	07 c1       	rjmp	.+526    	; 0xb4b0 <f_read+0x286>
    b2a2:	f7 01       	movw	r30, r14
    b2a4:	40 89       	ldd	r20, Z+16	; 0x10
    b2a6:	51 89       	ldd	r21, Z+17	; 0x11
    b2a8:	62 89       	ldd	r22, Z+18	; 0x12
    b2aa:	73 89       	ldd	r23, Z+19	; 0x13
    b2ac:	db 01       	movw	r26, r22
    b2ae:	ca 01       	movw	r24, r20
    b2b0:	91 70       	andi	r25, 0x01	; 1
    b2b2:	aa 27       	eor	r26, r26
    b2b4:	bb 27       	eor	r27, r27
    b2b6:	89 2b       	or	r24, r25
    b2b8:	8a 2b       	or	r24, r26
    b2ba:	8b 2b       	or	r24, r27
    b2bc:	09 f0       	breq	.+2      	; 0xb2c0 <f_read+0x96>
    b2be:	cb c0       	rjmp	.+406    	; 0xb456 <f_read+0x22c>
    b2c0:	e9 81       	ldd	r30, Y+1	; 0x01
    b2c2:	fa 81       	ldd	r31, Y+2	; 0x02
    b2c4:	01 85       	ldd	r16, Z+9	; 0x09
    b2c6:	12 85       	ldd	r17, Z+10	; 0x0a
    b2c8:	01 50       	subi	r16, 0x01	; 1
    b2ca:	11 09       	sbc	r17, r1
    b2cc:	db 01       	movw	r26, r22
    b2ce:	ca 01       	movw	r24, r20
    b2d0:	e9 e0       	ldi	r30, 0x09	; 9
    b2d2:	b6 95       	lsr	r27
    b2d4:	a7 95       	ror	r26
    b2d6:	97 95       	ror	r25
    b2d8:	87 95       	ror	r24
    b2da:	ea 95       	dec	r30
    b2dc:	d1 f7       	brne	.-12     	; 0xb2d2 <f_read+0xa8>
    b2de:	08 23       	and	r16, r24
    b2e0:	19 23       	and	r17, r25
    b2e2:	01 15       	cp	r16, r1
    b2e4:	11 05       	cpc	r17, r1
    b2e6:	91 f5       	brne	.+100    	; 0xb34c <f_read+0x122>
    b2e8:	f7 01       	movw	r30, r14
    b2ea:	41 15       	cp	r20, r1
    b2ec:	51 05       	cpc	r21, r1
    b2ee:	61 05       	cpc	r22, r1
    b2f0:	71 05       	cpc	r23, r1
    b2f2:	29 f4       	brne	.+10     	; 0xb2fe <f_read+0xd4>
    b2f4:	66 81       	ldd	r22, Z+6	; 0x06
    b2f6:	77 81       	ldd	r23, Z+7	; 0x07
    b2f8:	80 85       	ldd	r24, Z+8	; 0x08
    b2fa:	91 85       	ldd	r25, Z+9	; 0x09
    b2fc:	11 c0       	rjmp	.+34     	; 0xb320 <f_read+0xf6>
    b2fe:	82 a1       	ldd	r24, Z+34	; 0x22
    b300:	93 a1       	ldd	r25, Z+35	; 0x23
    b302:	89 2b       	or	r24, r25
    b304:	21 f0       	breq	.+8      	; 0xb30e <f_read+0xe4>
    b306:	c7 01       	movw	r24, r14
    b308:	0e 94 29 46 	call	0x8c52	; 0x8c52 <clmt_clust>
    b30c:	09 c0       	rjmp	.+18     	; 0xb320 <f_read+0xf6>
    b30e:	f7 01       	movw	r30, r14
    b310:	44 89       	ldd	r20, Z+20	; 0x14
    b312:	55 89       	ldd	r21, Z+21	; 0x15
    b314:	66 89       	ldd	r22, Z+22	; 0x16
    b316:	77 89       	ldd	r23, Z+23	; 0x17
    b318:	80 81       	ld	r24, Z
    b31a:	91 81       	ldd	r25, Z+1	; 0x01
    b31c:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <get_fat.isra.7>
    b320:	62 30       	cpi	r22, 0x02	; 2
    b322:	71 05       	cpc	r23, r1
    b324:	81 05       	cpc	r24, r1
    b326:	91 05       	cpc	r25, r1
    b328:	10 f4       	brcc	.+4      	; 0xb32e <f_read+0x104>
    b32a:	82 e0       	ldi	r24, 0x02	; 2
    b32c:	07 c0       	rjmp	.+14     	; 0xb33c <f_read+0x112>
    b32e:	6f 3f       	cpi	r22, 0xFF	; 255
    b330:	ff ef       	ldi	r31, 0xFF	; 255
    b332:	7f 07       	cpc	r23, r31
    b334:	8f 07       	cpc	r24, r31
    b336:	9f 07       	cpc	r25, r31
    b338:	21 f4       	brne	.+8      	; 0xb342 <f_read+0x118>
    b33a:	81 e0       	ldi	r24, 0x01	; 1
    b33c:	f7 01       	movw	r30, r14
    b33e:	87 87       	std	Z+15, r24	; 0x0f
    b340:	ba c0       	rjmp	.+372    	; 0xb4b6 <f_read+0x28c>
    b342:	f7 01       	movw	r30, r14
    b344:	64 8b       	std	Z+20, r22	; 0x14
    b346:	75 8b       	std	Z+21, r23	; 0x15
    b348:	86 8b       	std	Z+22, r24	; 0x16
    b34a:	97 8b       	std	Z+23, r25	; 0x17
    b34c:	89 81       	ldd	r24, Y+1	; 0x01
    b34e:	9a 81       	ldd	r25, Y+2	; 0x02
    b350:	9c 83       	std	Y+4, r25	; 0x04
    b352:	8b 83       	std	Y+3, r24	; 0x03
    b354:	f7 01       	movw	r30, r14
    b356:	44 89       	ldd	r20, Z+20	; 0x14
    b358:	55 89       	ldd	r21, Z+21	; 0x15
    b35a:	66 89       	ldd	r22, Z+22	; 0x16
    b35c:	77 89       	ldd	r23, Z+23	; 0x17
    b35e:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    b362:	61 15       	cp	r22, r1
    b364:	71 05       	cpc	r23, r1
    b366:	81 05       	cpc	r24, r1
    b368:	91 05       	cpc	r25, r1
    b36a:	f9 f2       	breq	.-66     	; 0xb32a <f_read+0x100>
    b36c:	2b 01       	movw	r4, r22
    b36e:	3c 01       	movw	r6, r24
    b370:	40 0e       	add	r4, r16
    b372:	51 1e       	adc	r5, r17
    b374:	61 1c       	adc	r6, r1
    b376:	71 1c       	adc	r7, r1
    b378:	65 01       	movw	r12, r10
    b37a:	cd 2c       	mov	r12, r13
    b37c:	dd 24       	eor	r13, r13
    b37e:	c6 94       	lsr	r12
    b380:	c1 14       	cp	r12, r1
    b382:	d1 04       	cpc	r13, r1
    b384:	d1 f1       	breq	.+116    	; 0xb3fa <f_read+0x1d0>
    b386:	eb 81       	ldd	r30, Y+3	; 0x03
    b388:	fc 81       	ldd	r31, Y+4	; 0x04
    b38a:	81 85       	ldd	r24, Z+9	; 0x09
    b38c:	92 85       	ldd	r25, Z+10	; 0x0a
    b38e:	98 01       	movw	r18, r16
    b390:	2c 0d       	add	r18, r12
    b392:	3d 1d       	adc	r19, r13
    b394:	82 17       	cp	r24, r18
    b396:	93 07       	cpc	r25, r19
    b398:	18 f4       	brcc	.+6      	; 0xb3a0 <f_read+0x176>
    b39a:	6c 01       	movw	r12, r24
    b39c:	c0 1a       	sub	r12, r16
    b39e:	d1 0a       	sbc	r13, r17
    b3a0:	86 01       	movw	r16, r12
    b3a2:	a3 01       	movw	r20, r6
    b3a4:	92 01       	movw	r18, r4
    b3a6:	b4 01       	movw	r22, r8
    b3a8:	eb 81       	ldd	r30, Y+3	; 0x03
    b3aa:	fc 81       	ldd	r31, Y+4	; 0x04
    b3ac:	81 81       	ldd	r24, Z+1	; 0x01
    b3ae:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    b3b2:	89 2b       	or	r24, r25
    b3b4:	11 f6       	brne	.-124    	; 0xb33a <f_read+0x110>
    b3b6:	f7 01       	movw	r30, r14
    b3b8:	86 85       	ldd	r24, Z+14	; 0x0e
    b3ba:	87 ff       	sbrs	r24, 7
    b3bc:	1a c0       	rjmp	.+52     	; 0xb3f2 <f_read+0x1c8>
    b3be:	80 8d       	ldd	r24, Z+24	; 0x18
    b3c0:	91 8d       	ldd	r25, Z+25	; 0x19
    b3c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b3c4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b3c6:	84 19       	sub	r24, r4
    b3c8:	95 09       	sbc	r25, r5
    b3ca:	a6 09       	sbc	r26, r6
    b3cc:	b7 09       	sbc	r27, r7
    b3ce:	a6 01       	movw	r20, r12
    b3d0:	60 e0       	ldi	r22, 0x00	; 0
    b3d2:	70 e0       	ldi	r23, 0x00	; 0
    b3d4:	84 17       	cp	r24, r20
    b3d6:	95 07       	cpc	r25, r21
    b3d8:	a6 07       	cpc	r26, r22
    b3da:	b7 07       	cpc	r27, r23
    b3dc:	50 f4       	brcc	.+20     	; 0xb3f2 <f_read+0x1c8>
    b3de:	98 2f       	mov	r25, r24
    b3e0:	88 27       	eor	r24, r24
    b3e2:	99 0f       	add	r25, r25
    b3e4:	40 e0       	ldi	r20, 0x00	; 0
    b3e6:	52 e0       	ldi	r21, 0x02	; 2
    b3e8:	b1 01       	movw	r22, r2
    b3ea:	88 0d       	add	r24, r8
    b3ec:	99 1d       	adc	r25, r9
    b3ee:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    b3f2:	dc 2c       	mov	r13, r12
    b3f4:	cc 24       	eor	r12, r12
    b3f6:	dd 0c       	add	r13, r13
    b3f8:	41 c0       	rjmp	.+130    	; 0xb47c <f_read+0x252>
    b3fa:	f7 01       	movw	r30, r14
    b3fc:	20 8d       	ldd	r18, Z+24	; 0x18
    b3fe:	31 8d       	ldd	r19, Z+25	; 0x19
    b400:	42 8d       	ldd	r20, Z+26	; 0x1a
    b402:	53 8d       	ldd	r21, Z+27	; 0x1b
    b404:	42 16       	cp	r4, r18
    b406:	53 06       	cpc	r5, r19
    b408:	64 06       	cpc	r6, r20
    b40a:	75 06       	cpc	r7, r21
    b40c:	f9 f0       	breq	.+62     	; 0xb44c <f_read+0x222>
    b40e:	86 85       	ldd	r24, Z+14	; 0x0e
    b410:	87 ff       	sbrs	r24, 7
    b412:	0f c0       	rjmp	.+30     	; 0xb432 <f_read+0x208>
    b414:	01 e0       	ldi	r16, 0x01	; 1
    b416:	10 e0       	ldi	r17, 0x00	; 0
    b418:	b1 01       	movw	r22, r2
    b41a:	eb 81       	ldd	r30, Y+3	; 0x03
    b41c:	fc 81       	ldd	r31, Y+4	; 0x04
    b41e:	81 81       	ldd	r24, Z+1	; 0x01
    b420:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    b424:	89 2b       	or	r24, r25
    b426:	09 f0       	breq	.+2      	; 0xb42a <f_read+0x200>
    b428:	88 cf       	rjmp	.-240    	; 0xb33a <f_read+0x110>
    b42a:	f7 01       	movw	r30, r14
    b42c:	86 85       	ldd	r24, Z+14	; 0x0e
    b42e:	8f 77       	andi	r24, 0x7F	; 127
    b430:	86 87       	std	Z+14, r24	; 0x0e
    b432:	e9 81       	ldd	r30, Y+1	; 0x01
    b434:	fa 81       	ldd	r31, Y+2	; 0x02
    b436:	01 e0       	ldi	r16, 0x01	; 1
    b438:	10 e0       	ldi	r17, 0x00	; 0
    b43a:	a3 01       	movw	r20, r6
    b43c:	92 01       	movw	r18, r4
    b43e:	b1 01       	movw	r22, r2
    b440:	81 81       	ldd	r24, Z+1	; 0x01
    b442:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    b446:	89 2b       	or	r24, r25
    b448:	09 f0       	breq	.+2      	; 0xb44c <f_read+0x222>
    b44a:	77 cf       	rjmp	.-274    	; 0xb33a <f_read+0x110>
    b44c:	f7 01       	movw	r30, r14
    b44e:	40 8e       	std	Z+24, r4	; 0x18
    b450:	51 8e       	std	Z+25, r5	; 0x19
    b452:	62 8e       	std	Z+26, r6	; 0x1a
    b454:	73 8e       	std	Z+27, r7	; 0x1b
    b456:	f7 01       	movw	r30, r14
    b458:	60 89       	ldd	r22, Z+16	; 0x10
    b45a:	71 89       	ldd	r23, Z+17	; 0x11
    b45c:	71 70       	andi	r23, 0x01	; 1
    b45e:	80 e0       	ldi	r24, 0x00	; 0
    b460:	92 e0       	ldi	r25, 0x02	; 2
    b462:	86 1b       	sub	r24, r22
    b464:	97 0b       	sbc	r25, r23
    b466:	65 01       	movw	r12, r10
    b468:	8a 15       	cp	r24, r10
    b46a:	9b 05       	cpc	r25, r11
    b46c:	08 f4       	brcc	.+2      	; 0xb470 <f_read+0x246>
    b46e:	6c 01       	movw	r12, r24
    b470:	62 0d       	add	r22, r2
    b472:	73 1d       	adc	r23, r3
    b474:	a6 01       	movw	r20, r12
    b476:	c4 01       	movw	r24, r8
    b478:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    b47c:	8c 0c       	add	r8, r12
    b47e:	9d 1c       	adc	r9, r13
    b480:	f7 01       	movw	r30, r14
    b482:	80 89       	ldd	r24, Z+16	; 0x10
    b484:	91 89       	ldd	r25, Z+17	; 0x11
    b486:	a2 89       	ldd	r26, Z+18	; 0x12
    b488:	b3 89       	ldd	r27, Z+19	; 0x13
    b48a:	8c 0d       	add	r24, r12
    b48c:	9d 1d       	adc	r25, r13
    b48e:	a1 1d       	adc	r26, r1
    b490:	b1 1d       	adc	r27, r1
    b492:	80 8b       	std	Z+16, r24	; 0x10
    b494:	91 8b       	std	Z+17, r25	; 0x11
    b496:	a2 8b       	std	Z+18, r26	; 0x12
    b498:	b3 8b       	std	Z+19, r27	; 0x13
    b49a:	ed 81       	ldd	r30, Y+5	; 0x05
    b49c:	fe 81       	ldd	r31, Y+6	; 0x06
    b49e:	80 81       	ld	r24, Z
    b4a0:	91 81       	ldd	r25, Z+1	; 0x01
    b4a2:	8c 0d       	add	r24, r12
    b4a4:	9d 1d       	adc	r25, r13
    b4a6:	91 83       	std	Z+1, r25	; 0x01
    b4a8:	80 83       	st	Z, r24
    b4aa:	ac 18       	sub	r10, r12
    b4ac:	bd 08       	sbc	r11, r13
    b4ae:	f5 ce       	rjmp	.-534    	; 0xb29a <f_read+0x70>
    b4b0:	80 e0       	ldi	r24, 0x00	; 0
    b4b2:	01 c0       	rjmp	.+2      	; 0xb4b6 <f_read+0x28c>
    b4b4:	87 e0       	ldi	r24, 0x07	; 7
    b4b6:	90 e0       	ldi	r25, 0x00	; 0
    b4b8:	26 96       	adiw	r28, 0x06	; 6
    b4ba:	e2 e1       	ldi	r30, 0x12	; 18
    b4bc:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000b4c0 <f_write>:
    b4c0:	a8 e0       	ldi	r26, 0x08	; 8
    b4c2:	b0 e0       	ldi	r27, 0x00	; 0
    b4c4:	e6 e6       	ldi	r30, 0x66	; 102
    b4c6:	fa e5       	ldi	r31, 0x5A	; 90
    b4c8:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    b4cc:	7c 01       	movw	r14, r24
    b4ce:	3b 01       	movw	r6, r22
    b4d0:	5a 01       	movw	r10, r20
    b4d2:	38 87       	std	Y+8, r19	; 0x08
    b4d4:	2f 83       	std	Y+7, r18	; 0x07
    b4d6:	f9 01       	movw	r30, r18
    b4d8:	11 82       	std	Z+1, r1	; 0x01
    b4da:	10 82       	st	Z, r1
    b4dc:	be 01       	movw	r22, r28
    b4de:	6f 5f       	subi	r22, 0xFF	; 255
    b4e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b4e2:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    b4e6:	00 97       	sbiw	r24, 0x00	; 0
    b4e8:	09 f0       	breq	.+2      	; 0xb4ec <f_write+0x2c>
    b4ea:	7d c1       	rjmp	.+762    	; 0xb7e6 <f_write+0x326>
    b4ec:	f7 01       	movw	r30, r14
    b4ee:	87 85       	ldd	r24, Z+15	; 0x0f
    b4f0:	90 e0       	ldi	r25, 0x00	; 0
    b4f2:	00 97       	sbiw	r24, 0x00	; 0
    b4f4:	09 f0       	breq	.+2      	; 0xb4f8 <f_write+0x38>
    b4f6:	77 c1       	rjmp	.+750    	; 0xb7e6 <f_write+0x326>
    b4f8:	86 85       	ldd	r24, Z+14	; 0x0e
    b4fa:	81 ff       	sbrs	r24, 1
    b4fc:	72 c1       	rjmp	.+740    	; 0xb7e2 <f_write+0x322>
    b4fe:	80 89       	ldd	r24, Z+16	; 0x10
    b500:	91 89       	ldd	r25, Z+17	; 0x11
    b502:	a2 89       	ldd	r26, Z+18	; 0x12
    b504:	b3 89       	ldd	r27, Z+19	; 0x13
    b506:	ac 01       	movw	r20, r24
    b508:	bd 01       	movw	r22, r26
    b50a:	4a 0d       	add	r20, r10
    b50c:	5b 1d       	adc	r21, r11
    b50e:	61 1d       	adc	r22, r1
    b510:	71 1d       	adc	r23, r1
    b512:	48 17       	cp	r20, r24
    b514:	59 07       	cpc	r21, r25
    b516:	6a 07       	cpc	r22, r26
    b518:	7b 07       	cpc	r23, r27
    b51a:	18 f4       	brcc	.+6      	; 0xb522 <f_write+0x62>
    b51c:	5c 01       	movw	r10, r24
    b51e:	a0 94       	com	r10
    b520:	b0 94       	com	r11
    b522:	97 01       	movw	r18, r14
    b524:	2c 5d       	subi	r18, 0xDC	; 220
    b526:	3f 4f       	sbci	r19, 0xFF	; 255
    b528:	3e 83       	std	Y+6, r19	; 0x06
    b52a:	2d 83       	std	Y+5, r18	; 0x05
    b52c:	a1 14       	cp	r10, r1
    b52e:	b1 04       	cpc	r11, r1
    b530:	09 f4       	brne	.+2      	; 0xb534 <f_write+0x74>
    b532:	4d c0       	rjmp	.+154    	; 0xb5ce <f_write+0x10e>
    b534:	f7 01       	movw	r30, r14
    b536:	40 89       	ldd	r20, Z+16	; 0x10
    b538:	51 89       	ldd	r21, Z+17	; 0x11
    b53a:	62 89       	ldd	r22, Z+18	; 0x12
    b53c:	73 89       	ldd	r23, Z+19	; 0x13
    b53e:	db 01       	movw	r26, r22
    b540:	ca 01       	movw	r24, r20
    b542:	91 70       	andi	r25, 0x01	; 1
    b544:	aa 27       	eor	r26, r26
    b546:	bb 27       	eor	r27, r27
    b548:	89 2b       	or	r24, r25
    b54a:	8a 2b       	or	r24, r26
    b54c:	8b 2b       	or	r24, r27
    b54e:	09 f0       	breq	.+2      	; 0xb552 <f_write+0x92>
    b550:	05 c1       	rjmp	.+522    	; 0xb75c <f_write+0x29c>
    b552:	e9 81       	ldd	r30, Y+1	; 0x01
    b554:	fa 81       	ldd	r31, Y+2	; 0x02
    b556:	81 84       	ldd	r8, Z+9	; 0x09
    b558:	92 84       	ldd	r9, Z+10	; 0x0a
    b55a:	f1 e0       	ldi	r31, 0x01	; 1
    b55c:	8f 1a       	sub	r8, r31
    b55e:	91 08       	sbc	r9, r1
    b560:	db 01       	movw	r26, r22
    b562:	ca 01       	movw	r24, r20
    b564:	e9 e0       	ldi	r30, 0x09	; 9
    b566:	b6 95       	lsr	r27
    b568:	a7 95       	ror	r26
    b56a:	97 95       	ror	r25
    b56c:	87 95       	ror	r24
    b56e:	ea 95       	dec	r30
    b570:	d1 f7       	brne	.-12     	; 0xb566 <f_write+0xa6>
    b572:	88 22       	and	r8, r24
    b574:	99 22       	and	r9, r25
    b576:	81 14       	cp	r8, r1
    b578:	91 04       	cpc	r9, r1
    b57a:	09 f0       	breq	.+2      	; 0xb57e <f_write+0xbe>
    b57c:	51 c0       	rjmp	.+162    	; 0xb620 <f_write+0x160>
    b57e:	f7 01       	movw	r30, r14
    b580:	41 15       	cp	r20, r1
    b582:	51 05       	cpc	r21, r1
    b584:	61 05       	cpc	r22, r1
    b586:	71 05       	cpc	r23, r1
    b588:	69 f4       	brne	.+26     	; 0xb5a4 <f_write+0xe4>
    b58a:	66 81       	ldd	r22, Z+6	; 0x06
    b58c:	77 81       	ldd	r23, Z+7	; 0x07
    b58e:	80 85       	ldd	r24, Z+8	; 0x08
    b590:	91 85       	ldd	r25, Z+9	; 0x09
    b592:	61 15       	cp	r22, r1
    b594:	71 05       	cpc	r23, r1
    b596:	81 05       	cpc	r24, r1
    b598:	91 05       	cpc	r25, r1
    b59a:	f9 f4       	brne	.+62     	; 0xb5da <f_write+0x11a>
    b59c:	40 e0       	ldi	r20, 0x00	; 0
    b59e:	50 e0       	ldi	r21, 0x00	; 0
    b5a0:	ba 01       	movw	r22, r20
    b5a2:	0d c0       	rjmp	.+26     	; 0xb5be <f_write+0xfe>
    b5a4:	82 a1       	ldd	r24, Z+34	; 0x22
    b5a6:	93 a1       	ldd	r25, Z+35	; 0x23
    b5a8:	89 2b       	or	r24, r25
    b5aa:	21 f0       	breq	.+8      	; 0xb5b4 <f_write+0xf4>
    b5ac:	c7 01       	movw	r24, r14
    b5ae:	0e 94 29 46 	call	0x8c52	; 0x8c52 <clmt_clust>
    b5b2:	08 c0       	rjmp	.+16     	; 0xb5c4 <f_write+0x104>
    b5b4:	f7 01       	movw	r30, r14
    b5b6:	44 89       	ldd	r20, Z+20	; 0x14
    b5b8:	55 89       	ldd	r21, Z+21	; 0x15
    b5ba:	66 89       	ldd	r22, Z+22	; 0x16
    b5bc:	77 89       	ldd	r23, Z+23	; 0x17
    b5be:	c7 01       	movw	r24, r14
    b5c0:	0e 94 4d 4d 	call	0x9a9a	; 0x9a9a <create_chain>
    b5c4:	61 15       	cp	r22, r1
    b5c6:	71 05       	cpc	r23, r1
    b5c8:	81 05       	cpc	r24, r1
    b5ca:	91 05       	cpc	r25, r1
    b5cc:	31 f4       	brne	.+12     	; 0xb5da <f_write+0x11a>
    b5ce:	f7 01       	movw	r30, r14
    b5d0:	86 85       	ldd	r24, Z+14	; 0x0e
    b5d2:	80 64       	ori	r24, 0x40	; 64
    b5d4:	86 87       	std	Z+14, r24	; 0x0e
    b5d6:	80 e0       	ldi	r24, 0x00	; 0
    b5d8:	05 c1       	rjmp	.+522    	; 0xb7e4 <f_write+0x324>
    b5da:	61 30       	cpi	r22, 0x01	; 1
    b5dc:	71 05       	cpc	r23, r1
    b5de:	81 05       	cpc	r24, r1
    b5e0:	91 05       	cpc	r25, r1
    b5e2:	11 f4       	brne	.+4      	; 0xb5e8 <f_write+0x128>
    b5e4:	82 e0       	ldi	r24, 0x02	; 2
    b5e6:	07 c0       	rjmp	.+14     	; 0xb5f6 <f_write+0x136>
    b5e8:	6f 3f       	cpi	r22, 0xFF	; 255
    b5ea:	ff ef       	ldi	r31, 0xFF	; 255
    b5ec:	7f 07       	cpc	r23, r31
    b5ee:	8f 07       	cpc	r24, r31
    b5f0:	9f 07       	cpc	r25, r31
    b5f2:	21 f4       	brne	.+8      	; 0xb5fc <f_write+0x13c>
    b5f4:	81 e0       	ldi	r24, 0x01	; 1
    b5f6:	f7 01       	movw	r30, r14
    b5f8:	87 87       	std	Z+15, r24	; 0x0f
    b5fa:	f4 c0       	rjmp	.+488    	; 0xb7e4 <f_write+0x324>
    b5fc:	f7 01       	movw	r30, r14
    b5fe:	64 8b       	std	Z+20, r22	; 0x14
    b600:	75 8b       	std	Z+21, r23	; 0x15
    b602:	86 8b       	std	Z+22, r24	; 0x16
    b604:	97 8b       	std	Z+23, r25	; 0x17
    b606:	06 81       	ldd	r16, Z+6	; 0x06
    b608:	17 81       	ldd	r17, Z+7	; 0x07
    b60a:	20 85       	ldd	r18, Z+8	; 0x08
    b60c:	31 85       	ldd	r19, Z+9	; 0x09
    b60e:	01 15       	cp	r16, r1
    b610:	11 05       	cpc	r17, r1
    b612:	21 05       	cpc	r18, r1
    b614:	31 05       	cpc	r19, r1
    b616:	21 f4       	brne	.+8      	; 0xb620 <f_write+0x160>
    b618:	66 83       	std	Z+6, r22	; 0x06
    b61a:	77 83       	std	Z+7, r23	; 0x07
    b61c:	80 87       	std	Z+8, r24	; 0x08
    b61e:	91 87       	std	Z+9, r25	; 0x09
    b620:	f7 01       	movw	r30, r14
    b622:	86 85       	ldd	r24, Z+14	; 0x0e
    b624:	87 ff       	sbrs	r24, 7
    b626:	13 c0       	rjmp	.+38     	; 0xb64e <f_write+0x18e>
    b628:	20 8d       	ldd	r18, Z+24	; 0x18
    b62a:	31 8d       	ldd	r19, Z+25	; 0x19
    b62c:	42 8d       	ldd	r20, Z+26	; 0x1a
    b62e:	53 8d       	ldd	r21, Z+27	; 0x1b
    b630:	e9 81       	ldd	r30, Y+1	; 0x01
    b632:	fa 81       	ldd	r31, Y+2	; 0x02
    b634:	01 e0       	ldi	r16, 0x01	; 1
    b636:	10 e0       	ldi	r17, 0x00	; 0
    b638:	6d 81       	ldd	r22, Y+5	; 0x05
    b63a:	7e 81       	ldd	r23, Y+6	; 0x06
    b63c:	81 81       	ldd	r24, Z+1	; 0x01
    b63e:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    b642:	89 2b       	or	r24, r25
    b644:	b9 f6       	brne	.-82     	; 0xb5f4 <f_write+0x134>
    b646:	f7 01       	movw	r30, r14
    b648:	86 85       	ldd	r24, Z+14	; 0x0e
    b64a:	8f 77       	andi	r24, 0x7F	; 127
    b64c:	86 87       	std	Z+14, r24	; 0x0e
    b64e:	29 81       	ldd	r18, Y+1	; 0x01
    b650:	3a 81       	ldd	r19, Y+2	; 0x02
    b652:	3c 83       	std	Y+4, r19	; 0x04
    b654:	2b 83       	std	Y+3, r18	; 0x03
    b656:	f7 01       	movw	r30, r14
    b658:	44 89       	ldd	r20, Z+20	; 0x14
    b65a:	55 89       	ldd	r21, Z+21	; 0x15
    b65c:	66 89       	ldd	r22, Z+22	; 0x16
    b65e:	77 89       	ldd	r23, Z+23	; 0x17
    b660:	c9 01       	movw	r24, r18
    b662:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    b666:	61 15       	cp	r22, r1
    b668:	71 05       	cpc	r23, r1
    b66a:	81 05       	cpc	r24, r1
    b66c:	91 05       	cpc	r25, r1
    b66e:	09 f4       	brne	.+2      	; 0xb672 <f_write+0x1b2>
    b670:	b9 cf       	rjmp	.-142    	; 0xb5e4 <f_write+0x124>
    b672:	1b 01       	movw	r2, r22
    b674:	2c 01       	movw	r4, r24
    b676:	28 0c       	add	r2, r8
    b678:	39 1c       	adc	r3, r9
    b67a:	41 1c       	adc	r4, r1
    b67c:	51 1c       	adc	r5, r1
    b67e:	65 01       	movw	r12, r10
    b680:	cd 2c       	mov	r12, r13
    b682:	dd 24       	eor	r13, r13
    b684:	c6 94       	lsr	r12
    b686:	c1 14       	cp	r12, r1
    b688:	d1 04       	cpc	r13, r1
    b68a:	f1 f1       	breq	.+124    	; 0xb708 <f_write+0x248>
    b68c:	eb 81       	ldd	r30, Y+3	; 0x03
    b68e:	fc 81       	ldd	r31, Y+4	; 0x04
    b690:	81 85       	ldd	r24, Z+9	; 0x09
    b692:	92 85       	ldd	r25, Z+10	; 0x0a
    b694:	94 01       	movw	r18, r8
    b696:	2c 0d       	add	r18, r12
    b698:	3d 1d       	adc	r19, r13
    b69a:	82 17       	cp	r24, r18
    b69c:	93 07       	cpc	r25, r19
    b69e:	18 f4       	brcc	.+6      	; 0xb6a6 <f_write+0x1e6>
    b6a0:	6c 01       	movw	r12, r24
    b6a2:	c8 18       	sub	r12, r8
    b6a4:	d9 08       	sbc	r13, r9
    b6a6:	86 01       	movw	r16, r12
    b6a8:	a2 01       	movw	r20, r4
    b6aa:	91 01       	movw	r18, r2
    b6ac:	b3 01       	movw	r22, r6
    b6ae:	eb 81       	ldd	r30, Y+3	; 0x03
    b6b0:	fc 81       	ldd	r31, Y+4	; 0x04
    b6b2:	81 81       	ldd	r24, Z+1	; 0x01
    b6b4:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    b6b8:	89 2b       	or	r24, r25
    b6ba:	09 f0       	breq	.+2      	; 0xb6be <f_write+0x1fe>
    b6bc:	9b cf       	rjmp	.-202    	; 0xb5f4 <f_write+0x134>
    b6be:	f7 01       	movw	r30, r14
    b6c0:	80 8d       	ldd	r24, Z+24	; 0x18
    b6c2:	91 8d       	ldd	r25, Z+25	; 0x19
    b6c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6c6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6c8:	82 19       	sub	r24, r2
    b6ca:	93 09       	sbc	r25, r3
    b6cc:	a4 09       	sbc	r26, r4
    b6ce:	b5 09       	sbc	r27, r5
    b6d0:	a6 01       	movw	r20, r12
    b6d2:	60 e0       	ldi	r22, 0x00	; 0
    b6d4:	70 e0       	ldi	r23, 0x00	; 0
    b6d6:	84 17       	cp	r24, r20
    b6d8:	95 07       	cpc	r25, r21
    b6da:	a6 07       	cpc	r26, r22
    b6dc:	b7 07       	cpc	r27, r23
    b6de:	80 f4       	brcc	.+32     	; 0xb700 <f_write+0x240>
    b6e0:	98 2f       	mov	r25, r24
    b6e2:	88 27       	eor	r24, r24
    b6e4:	99 0f       	add	r25, r25
    b6e6:	b3 01       	movw	r22, r6
    b6e8:	68 0f       	add	r22, r24
    b6ea:	79 1f       	adc	r23, r25
    b6ec:	40 e0       	ldi	r20, 0x00	; 0
    b6ee:	52 e0       	ldi	r21, 0x02	; 2
    b6f0:	8d 81       	ldd	r24, Y+5	; 0x05
    b6f2:	9e 81       	ldd	r25, Y+6	; 0x06
    b6f4:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    b6f8:	f7 01       	movw	r30, r14
    b6fa:	86 85       	ldd	r24, Z+14	; 0x0e
    b6fc:	8f 77       	andi	r24, 0x7F	; 127
    b6fe:	86 87       	std	Z+14, r24	; 0x0e
    b700:	dc 2c       	mov	r13, r12
    b702:	cc 24       	eor	r12, r12
    b704:	dd 0c       	add	r13, r13
    b706:	43 c0       	rjmp	.+134    	; 0xb78e <f_write+0x2ce>
    b708:	f7 01       	movw	r30, r14
    b70a:	80 8d       	ldd	r24, Z+24	; 0x18
    b70c:	91 8d       	ldd	r25, Z+25	; 0x19
    b70e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b710:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b712:	28 16       	cp	r2, r24
    b714:	39 06       	cpc	r3, r25
    b716:	4a 06       	cpc	r4, r26
    b718:	5b 06       	cpc	r5, r27
    b71a:	d9 f0       	breq	.+54     	; 0xb752 <f_write+0x292>
    b71c:	40 89       	ldd	r20, Z+16	; 0x10
    b71e:	51 89       	ldd	r21, Z+17	; 0x11
    b720:	62 89       	ldd	r22, Z+18	; 0x12
    b722:	73 89       	ldd	r23, Z+19	; 0x13
    b724:	82 85       	ldd	r24, Z+10	; 0x0a
    b726:	93 85       	ldd	r25, Z+11	; 0x0b
    b728:	a4 85       	ldd	r26, Z+12	; 0x0c
    b72a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b72c:	48 17       	cp	r20, r24
    b72e:	59 07       	cpc	r21, r25
    b730:	6a 07       	cpc	r22, r26
    b732:	7b 07       	cpc	r23, r27
    b734:	70 f4       	brcc	.+28     	; 0xb752 <f_write+0x292>
    b736:	01 e0       	ldi	r16, 0x01	; 1
    b738:	10 e0       	ldi	r17, 0x00	; 0
    b73a:	a2 01       	movw	r20, r4
    b73c:	91 01       	movw	r18, r2
    b73e:	6d 81       	ldd	r22, Y+5	; 0x05
    b740:	7e 81       	ldd	r23, Y+6	; 0x06
    b742:	eb 81       	ldd	r30, Y+3	; 0x03
    b744:	fc 81       	ldd	r31, Y+4	; 0x04
    b746:	81 81       	ldd	r24, Z+1	; 0x01
    b748:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    b74c:	89 2b       	or	r24, r25
    b74e:	09 f0       	breq	.+2      	; 0xb752 <f_write+0x292>
    b750:	51 cf       	rjmp	.-350    	; 0xb5f4 <f_write+0x134>
    b752:	f7 01       	movw	r30, r14
    b754:	20 8e       	std	Z+24, r2	; 0x18
    b756:	31 8e       	std	Z+25, r3	; 0x19
    b758:	42 8e       	std	Z+26, r4	; 0x1a
    b75a:	53 8e       	std	Z+27, r5	; 0x1b
    b75c:	f7 01       	movw	r30, r14
    b75e:	80 89       	ldd	r24, Z+16	; 0x10
    b760:	91 89       	ldd	r25, Z+17	; 0x11
    b762:	91 70       	andi	r25, 0x01	; 1
    b764:	20 e0       	ldi	r18, 0x00	; 0
    b766:	32 e0       	ldi	r19, 0x02	; 2
    b768:	28 1b       	sub	r18, r24
    b76a:	39 0b       	sbc	r19, r25
    b76c:	65 01       	movw	r12, r10
    b76e:	2a 15       	cp	r18, r10
    b770:	3b 05       	cpc	r19, r11
    b772:	08 f4       	brcc	.+2      	; 0xb776 <f_write+0x2b6>
    b774:	69 01       	movw	r12, r18
    b776:	a6 01       	movw	r20, r12
    b778:	b3 01       	movw	r22, r6
    b77a:	2d 81       	ldd	r18, Y+5	; 0x05
    b77c:	3e 81       	ldd	r19, Y+6	; 0x06
    b77e:	82 0f       	add	r24, r18
    b780:	93 1f       	adc	r25, r19
    b782:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    b786:	f7 01       	movw	r30, r14
    b788:	86 85       	ldd	r24, Z+14	; 0x0e
    b78a:	80 68       	ori	r24, 0x80	; 128
    b78c:	86 87       	std	Z+14, r24	; 0x0e
    b78e:	6c 0c       	add	r6, r12
    b790:	7d 1c       	adc	r7, r13
    b792:	f7 01       	movw	r30, r14
    b794:	80 89       	ldd	r24, Z+16	; 0x10
    b796:	91 89       	ldd	r25, Z+17	; 0x11
    b798:	a2 89       	ldd	r26, Z+18	; 0x12
    b79a:	b3 89       	ldd	r27, Z+19	; 0x13
    b79c:	8c 0d       	add	r24, r12
    b79e:	9d 1d       	adc	r25, r13
    b7a0:	a1 1d       	adc	r26, r1
    b7a2:	b1 1d       	adc	r27, r1
    b7a4:	80 8b       	std	Z+16, r24	; 0x10
    b7a6:	91 8b       	std	Z+17, r25	; 0x11
    b7a8:	a2 8b       	std	Z+18, r26	; 0x12
    b7aa:	b3 8b       	std	Z+19, r27	; 0x13
    b7ac:	42 85       	ldd	r20, Z+10	; 0x0a
    b7ae:	53 85       	ldd	r21, Z+11	; 0x0b
    b7b0:	64 85       	ldd	r22, Z+12	; 0x0c
    b7b2:	75 85       	ldd	r23, Z+13	; 0x0d
    b7b4:	48 17       	cp	r20, r24
    b7b6:	59 07       	cpc	r21, r25
    b7b8:	6a 07       	cpc	r22, r26
    b7ba:	7b 07       	cpc	r23, r27
    b7bc:	10 f4       	brcc	.+4      	; 0xb7c2 <f_write+0x302>
    b7be:	ac 01       	movw	r20, r24
    b7c0:	bd 01       	movw	r22, r26
    b7c2:	f7 01       	movw	r30, r14
    b7c4:	42 87       	std	Z+10, r20	; 0x0a
    b7c6:	53 87       	std	Z+11, r21	; 0x0b
    b7c8:	64 87       	std	Z+12, r22	; 0x0c
    b7ca:	75 87       	std	Z+13, r23	; 0x0d
    b7cc:	ef 81       	ldd	r30, Y+7	; 0x07
    b7ce:	f8 85       	ldd	r31, Y+8	; 0x08
    b7d0:	80 81       	ld	r24, Z
    b7d2:	91 81       	ldd	r25, Z+1	; 0x01
    b7d4:	8c 0d       	add	r24, r12
    b7d6:	9d 1d       	adc	r25, r13
    b7d8:	91 83       	std	Z+1, r25	; 0x01
    b7da:	80 83       	st	Z, r24
    b7dc:	ac 18       	sub	r10, r12
    b7de:	bd 08       	sbc	r11, r13
    b7e0:	a5 ce       	rjmp	.-694    	; 0xb52c <f_write+0x6c>
    b7e2:	87 e0       	ldi	r24, 0x07	; 7
    b7e4:	90 e0       	ldi	r25, 0x00	; 0
    b7e6:	28 96       	adiw	r28, 0x08	; 8
    b7e8:	e2 e1       	ldi	r30, 0x12	; 18
    b7ea:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000b7ee <f_sync>:
    b7ee:	8f 92       	push	r8
    b7f0:	9f 92       	push	r9
    b7f2:	af 92       	push	r10
    b7f4:	bf 92       	push	r11
    b7f6:	ef 92       	push	r14
    b7f8:	ff 92       	push	r15
    b7fa:	0f 93       	push	r16
    b7fc:	1f 93       	push	r17
    b7fe:	cf 93       	push	r28
    b800:	df 93       	push	r29
    b802:	00 d0       	rcall	.+0      	; 0xb804 <f_sync+0x16>
    b804:	cd b7       	in	r28, 0x3d	; 61
    b806:	de b7       	in	r29, 0x3e	; 62
    b808:	7c 01       	movw	r14, r24
    b80a:	be 01       	movw	r22, r28
    b80c:	6f 5f       	subi	r22, 0xFF	; 255
    b80e:	7f 4f       	sbci	r23, 0xFF	; 255
    b810:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    b814:	00 97       	sbiw	r24, 0x00	; 0
    b816:	09 f0       	breq	.+2      	; 0xb81a <f_sync+0x2c>
    b818:	5d c0       	rjmp	.+186    	; 0xb8d4 <f_sync+0xe6>
    b81a:	f7 01       	movw	r30, r14
    b81c:	86 85       	ldd	r24, Z+14	; 0x0e
    b81e:	86 ff       	sbrs	r24, 6
    b820:	55 c0       	rjmp	.+170    	; 0xb8cc <f_sync+0xde>
    b822:	87 ff       	sbrs	r24, 7
    b824:	15 c0       	rjmp	.+42     	; 0xb850 <f_sync+0x62>
    b826:	20 8d       	ldd	r18, Z+24	; 0x18
    b828:	31 8d       	ldd	r19, Z+25	; 0x19
    b82a:	42 8d       	ldd	r20, Z+26	; 0x1a
    b82c:	53 8d       	ldd	r21, Z+27	; 0x1b
    b82e:	e9 81       	ldd	r30, Y+1	; 0x01
    b830:	fa 81       	ldd	r31, Y+2	; 0x02
    b832:	01 e0       	ldi	r16, 0x01	; 1
    b834:	10 e0       	ldi	r17, 0x00	; 0
    b836:	b7 01       	movw	r22, r14
    b838:	6c 5d       	subi	r22, 0xDC	; 220
    b83a:	7f 4f       	sbci	r23, 0xFF	; 255
    b83c:	81 81       	ldd	r24, Z+1	; 0x01
    b83e:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    b842:	89 2b       	or	r24, r25
    b844:	09 f0       	breq	.+2      	; 0xb848 <f_sync+0x5a>
    b846:	44 c0       	rjmp	.+136    	; 0xb8d0 <f_sync+0xe2>
    b848:	f7 01       	movw	r30, r14
    b84a:	86 85       	ldd	r24, Z+14	; 0x0e
    b84c:	8f 77       	andi	r24, 0x7F	; 127
    b84e:	86 87       	std	Z+14, r24	; 0x0e
    b850:	0e 94 92 73 	call	0xe724	; 0xe724 <get_fattime>
    b854:	4b 01       	movw	r8, r22
    b856:	5c 01       	movw	r10, r24
    b858:	f7 01       	movw	r30, r14
    b85a:	44 8d       	ldd	r20, Z+28	; 0x1c
    b85c:	55 8d       	ldd	r21, Z+29	; 0x1d
    b85e:	66 8d       	ldd	r22, Z+30	; 0x1e
    b860:	77 8d       	ldd	r23, Z+31	; 0x1f
    b862:	89 81       	ldd	r24, Y+1	; 0x01
    b864:	9a 81       	ldd	r25, Y+2	; 0x02
    b866:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    b86a:	00 97       	sbiw	r24, 0x00	; 0
    b86c:	99 f5       	brne	.+102    	; 0xb8d4 <f_sync+0xe6>
    b86e:	f7 01       	movw	r30, r14
    b870:	00 a1       	ldd	r16, Z+32	; 0x20
    b872:	11 a1       	ldd	r17, Z+33	; 0x21
    b874:	f8 01       	movw	r30, r16
    b876:	83 85       	ldd	r24, Z+11	; 0x0b
    b878:	80 62       	ori	r24, 0x20	; 32
    b87a:	83 87       	std	Z+11, r24	; 0x0b
    b87c:	f7 01       	movw	r30, r14
    b87e:	26 81       	ldd	r18, Z+6	; 0x06
    b880:	37 81       	ldd	r19, Z+7	; 0x07
    b882:	40 85       	ldd	r20, Z+8	; 0x08
    b884:	51 85       	ldd	r21, Z+9	; 0x09
    b886:	b8 01       	movw	r22, r16
    b888:	80 81       	ld	r24, Z
    b88a:	91 81       	ldd	r25, Z+1	; 0x01
    b88c:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <st_clust.isra.2>
    b890:	f7 01       	movw	r30, r14
    b892:	42 85       	ldd	r20, Z+10	; 0x0a
    b894:	53 85       	ldd	r21, Z+11	; 0x0b
    b896:	64 85       	ldd	r22, Z+12	; 0x0c
    b898:	75 85       	ldd	r23, Z+13	; 0x0d
    b89a:	c8 01       	movw	r24, r16
    b89c:	4c 96       	adiw	r24, 0x1c	; 28
    b89e:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    b8a2:	b5 01       	movw	r22, r10
    b8a4:	a4 01       	movw	r20, r8
    b8a6:	c8 01       	movw	r24, r16
    b8a8:	46 96       	adiw	r24, 0x16	; 22
    b8aa:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    b8ae:	f8 01       	movw	r30, r16
    b8b0:	12 8a       	std	Z+18, r1	; 0x12
    b8b2:	13 8a       	std	Z+19, r1	; 0x13
    b8b4:	89 81       	ldd	r24, Y+1	; 0x01
    b8b6:	9a 81       	ldd	r25, Y+2	; 0x02
    b8b8:	21 e0       	ldi	r18, 0x01	; 1
    b8ba:	fc 01       	movw	r30, r24
    b8bc:	23 83       	std	Z+3, r18	; 0x03
    b8be:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    b8c2:	f7 01       	movw	r30, r14
    b8c4:	26 85       	ldd	r18, Z+14	; 0x0e
    b8c6:	2f 7b       	andi	r18, 0xBF	; 191
    b8c8:	26 87       	std	Z+14, r18	; 0x0e
    b8ca:	04 c0       	rjmp	.+8      	; 0xb8d4 <f_sync+0xe6>
    b8cc:	80 e0       	ldi	r24, 0x00	; 0
    b8ce:	01 c0       	rjmp	.+2      	; 0xb8d2 <f_sync+0xe4>
    b8d0:	81 e0       	ldi	r24, 0x01	; 1
    b8d2:	90 e0       	ldi	r25, 0x00	; 0
    b8d4:	0f 90       	pop	r0
    b8d6:	0f 90       	pop	r0
    b8d8:	df 91       	pop	r29
    b8da:	cf 91       	pop	r28
    b8dc:	1f 91       	pop	r17
    b8de:	0f 91       	pop	r16
    b8e0:	ff 90       	pop	r15
    b8e2:	ef 90       	pop	r14
    b8e4:	bf 90       	pop	r11
    b8e6:	af 90       	pop	r10
    b8e8:	9f 90       	pop	r9
    b8ea:	8f 90       	pop	r8
    b8ec:	08 95       	ret

0000b8ee <f_close>:
    b8ee:	a2 e0       	ldi	r26, 0x02	; 2
    b8f0:	b0 e0       	ldi	r27, 0x00	; 0
    b8f2:	ed e7       	ldi	r30, 0x7D	; 125
    b8f4:	fc e5       	ldi	r31, 0x5C	; 92
    b8f6:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    b8fa:	8c 01       	movw	r16, r24
    b8fc:	78 df       	rcall	.-272    	; 0xb7ee <f_sync>
    b8fe:	00 97       	sbiw	r24, 0x00	; 0
    b900:	59 f4       	brne	.+22     	; 0xb918 <f_close+0x2a>
    b902:	be 01       	movw	r22, r28
    b904:	6f 5f       	subi	r22, 0xFF	; 255
    b906:	7f 4f       	sbci	r23, 0xFF	; 255
    b908:	c8 01       	movw	r24, r16
    b90a:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    b90e:	00 97       	sbiw	r24, 0x00	; 0
    b910:	19 f4       	brne	.+6      	; 0xb918 <f_close+0x2a>
    b912:	f8 01       	movw	r30, r16
    b914:	11 82       	std	Z+1, r1	; 0x01
    b916:	10 82       	st	Z, r1
    b918:	22 96       	adiw	r28, 0x02	; 2
    b91a:	e4 e0       	ldi	r30, 0x04	; 4
    b91c:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000b920 <f_chdir>:
    b920:	a2 e3       	ldi	r26, 0x32	; 50
    b922:	b0 e0       	ldi	r27, 0x00	; 0
    b924:	e6 e9       	ldi	r30, 0x96	; 150
    b926:	fc e5       	ldi	r31, 0x5C	; 92
    b928:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    b92c:	9a ab       	std	Y+50, r25	; 0x32
    b92e:	89 ab       	std	Y+49, r24	; 0x31
    b930:	40 e0       	ldi	r20, 0x00	; 0
    b932:	be 01       	movw	r22, r28
    b934:	61 5d       	subi	r22, 0xD1	; 209
    b936:	7f 4f       	sbci	r23, 0xFF	; 255
    b938:	ce 01       	movw	r24, r28
    b93a:	c1 96       	adiw	r24, 0x31	; 49
    b93c:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    b940:	00 97       	sbiw	r24, 0x00	; 0
    b942:	09 f0       	breq	.+2      	; 0xb946 <f_chdir+0x26>
    b944:	44 c0       	rjmp	.+136    	; 0xb9ce <f_chdir+0xae>
    b946:	8f a5       	ldd	r24, Y+47	; 0x2f
    b948:	98 a9       	ldd	r25, Y+48	; 0x30
    b94a:	9a 83       	std	Y+2, r25	; 0x02
    b94c:	89 83       	std	Y+1, r24	; 0x01
    b94e:	80 e0       	ldi	r24, 0x00	; 0
    b950:	92 e0       	ldi	r25, 0x02	; 2
    b952:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    b956:	7c 01       	movw	r14, r24
    b958:	00 97       	sbiw	r24, 0x00	; 0
    b95a:	a9 f1       	breq	.+106    	; 0xb9c6 <f_chdir+0xa6>
    b95c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b95e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b960:	94 87       	std	Z+12, r25	; 0x0c
    b962:	83 87       	std	Z+11, r24	; 0x0b
    b964:	69 a9       	ldd	r22, Y+49	; 0x31
    b966:	7a a9       	ldd	r23, Y+50	; 0x32
    b968:	ce 01       	movw	r24, r28
    b96a:	01 96       	adiw	r24, 0x01	; 1
    b96c:	03 d8       	rcall	.-4090   	; 0xa974 <follow_path>
    b96e:	8c 01       	movw	r16, r24
    b970:	89 2b       	or	r24, r25
    b972:	09 f5       	brne	.+66     	; 0xb9b6 <f_chdir+0x96>
    b974:	88 a5       	ldd	r24, Y+40	; 0x28
    b976:	87 ff       	sbrs	r24, 7
    b978:	0b c0       	rjmp	.+22     	; 0xb990 <f_chdir+0x70>
    b97a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b97c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b97e:	8f 81       	ldd	r24, Y+7	; 0x07
    b980:	98 85       	ldd	r25, Y+8	; 0x08
    b982:	a9 85       	ldd	r26, Y+9	; 0x09
    b984:	ba 85       	ldd	r27, Y+10	; 0x0a
    b986:	85 8b       	std	Z+21, r24	; 0x15
    b988:	96 8b       	std	Z+22, r25	; 0x16
    b98a:	a7 8b       	std	Z+23, r26	; 0x17
    b98c:	b0 8f       	std	Z+24, r27	; 0x18
    b98e:	13 c0       	rjmp	.+38     	; 0xb9b6 <f_chdir+0x96>
    b990:	8d 81       	ldd	r24, Y+5	; 0x05
    b992:	84 ff       	sbrs	r24, 4
    b994:	0e c0       	rjmp	.+28     	; 0xb9b2 <f_chdir+0x92>
    b996:	cf a4       	ldd	r12, Y+47	; 0x2f
    b998:	d8 a8       	ldd	r13, Y+48	; 0x30
    b99a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b99c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b99e:	f6 01       	movw	r30, r12
    b9a0:	80 81       	ld	r24, Z
    b9a2:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    b9a6:	f6 01       	movw	r30, r12
    b9a8:	65 8b       	std	Z+21, r22	; 0x15
    b9aa:	76 8b       	std	Z+22, r23	; 0x16
    b9ac:	87 8b       	std	Z+23, r24	; 0x17
    b9ae:	90 8f       	std	Z+24, r25	; 0x18
    b9b0:	02 c0       	rjmp	.+4      	; 0xb9b6 <f_chdir+0x96>
    b9b2:	05 e0       	ldi	r16, 0x05	; 5
    b9b4:	10 e0       	ldi	r17, 0x00	; 0
    b9b6:	c7 01       	movw	r24, r14
    b9b8:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    b9bc:	04 30       	cpi	r16, 0x04	; 4
    b9be:	11 05       	cpc	r17, r1
    b9c0:	29 f4       	brne	.+10     	; 0xb9cc <f_chdir+0xac>
    b9c2:	85 e0       	ldi	r24, 0x05	; 5
    b9c4:	01 c0       	rjmp	.+2      	; 0xb9c8 <f_chdir+0xa8>
    b9c6:	81 e1       	ldi	r24, 0x11	; 17
    b9c8:	90 e0       	ldi	r25, 0x00	; 0
    b9ca:	01 c0       	rjmp	.+2      	; 0xb9ce <f_chdir+0xae>
    b9cc:	c8 01       	movw	r24, r16
    b9ce:	e2 96       	adiw	r28, 0x32	; 50
    b9d0:	e8 e0       	ldi	r30, 0x08	; 8
    b9d2:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000b9d6 <f_getcwd>:
    b9d6:	a8 e4       	ldi	r26, 0x48	; 72
    b9d8:	b1 e0       	ldi	r27, 0x01	; 1
    b9da:	e1 ef       	ldi	r30, 0xF1	; 241
    b9dc:	fc e5       	ldi	r31, 0x5C	; 92
    b9de:	0c 94 3c e9 	jmp	0x1d278	; 0x1d278 <__prologue_saves__+0x2>
    b9e2:	c9 5b       	subi	r28, 0xB9	; 185
    b9e4:	de 4f       	sbci	r29, 0xFE	; 254
    b9e6:	99 83       	std	Y+1, r25	; 0x01
    b9e8:	88 83       	st	Y, r24
    b9ea:	c7 54       	subi	r28, 0x47	; 71
    b9ec:	d1 40       	sbci	r29, 0x01	; 1
    b9ee:	5b 01       	movw	r10, r22
    b9f0:	fc 01       	movw	r30, r24
    b9f2:	10 82       	st	Z, r1
    b9f4:	40 e0       	ldi	r20, 0x00	; 0
    b9f6:	be 01       	movw	r22, r28
    b9f8:	6b 5b       	subi	r22, 0xBB	; 187
    b9fa:	7e 4f       	sbci	r23, 0xFE	; 254
    b9fc:	ce 01       	movw	r24, r28
    b9fe:	89 5b       	subi	r24, 0xB9	; 185
    ba00:	9e 4f       	sbci	r25, 0xFE	; 254
    ba02:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    ba06:	8c 01       	movw	r16, r24
    ba08:	89 2b       	or	r24, r25
    ba0a:	09 f0       	breq	.+2      	; 0xba0e <f_getcwd+0x38>
    ba0c:	08 c1       	rjmp	.+528    	; 0xbc1e <f_getcwd+0x248>
    ba0e:	cb 5b       	subi	r28, 0xBB	; 187
    ba10:	de 4f       	sbci	r29, 0xFE	; 254
    ba12:	88 81       	ld	r24, Y
    ba14:	99 81       	ldd	r25, Y+1	; 0x01
    ba16:	c5 54       	subi	r28, 0x45	; 69
    ba18:	d1 40       	sbci	r29, 0x01	; 1
    ba1a:	c9 5e       	subi	r28, 0xE9	; 233
    ba1c:	de 4f       	sbci	r29, 0xFE	; 254
    ba1e:	99 83       	std	Y+1, r25	; 0x01
    ba20:	88 83       	st	Y, r24
    ba22:	c7 51       	subi	r28, 0x17	; 23
    ba24:	d1 40       	sbci	r29, 0x01	; 1
    ba26:	80 e0       	ldi	r24, 0x00	; 0
    ba28:	92 e0       	ldi	r25, 0x02	; 2
    ba2a:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    ba2e:	6c 01       	movw	r12, r24
    ba30:	00 97       	sbiw	r24, 0x00	; 0
    ba32:	09 f4       	brne	.+2      	; 0xba36 <f_getcwd+0x60>
    ba34:	f6 c0       	rjmp	.+492    	; 0xbc22 <f_getcwd+0x24c>
    ba36:	cb 5b       	subi	r28, 0xBB	; 187
    ba38:	de 4f       	sbci	r29, 0xFE	; 254
    ba3a:	e8 81       	ld	r30, Y
    ba3c:	f9 81       	ldd	r31, Y+1	; 0x01
    ba3e:	c5 54       	subi	r28, 0x45	; 69
    ba40:	d1 40       	sbci	r29, 0x01	; 1
    ba42:	94 87       	std	Z+12, r25	; 0x0c
    ba44:	83 87       	std	Z+11, r24	; 0x0b
    ba46:	85 89       	ldd	r24, Z+21	; 0x15
    ba48:	96 89       	ldd	r25, Z+22	; 0x16
    ba4a:	a7 89       	ldd	r26, Z+23	; 0x17
    ba4c:	b0 8d       	ldd	r27, Z+24	; 0x18
    ba4e:	c3 5e       	subi	r28, 0xE3	; 227
    ba50:	de 4f       	sbci	r29, 0xFE	; 254
    ba52:	88 83       	st	Y, r24
    ba54:	99 83       	std	Y+1, r25	; 0x01
    ba56:	aa 83       	std	Y+2, r26	; 0x02
    ba58:	bb 83       	std	Y+3, r27	; 0x03
    ba5a:	cd 51       	subi	r28, 0x1D	; 29
    ba5c:	d1 40       	sbci	r29, 0x01	; 1
    ba5e:	75 01       	movw	r14, r10
    ba60:	ce 01       	movw	r24, r28
    ba62:	01 96       	adiw	r24, 0x01	; 1
    ba64:	4c 01       	movw	r8, r24
    ba66:	8f e2       	ldi	r24, 0x2F	; 47
    ba68:	38 2e       	mov	r3, r24
    ba6a:	c3 5e       	subi	r28, 0xE3	; 227
    ba6c:	de 4f       	sbci	r29, 0xFE	; 254
    ba6e:	48 80       	ld	r4, Y
    ba70:	59 80       	ldd	r5, Y+1	; 0x01
    ba72:	6a 80       	ldd	r6, Y+2	; 0x02
    ba74:	7b 80       	ldd	r7, Y+3	; 0x03
    ba76:	cd 51       	subi	r28, 0x1D	; 29
    ba78:	d1 40       	sbci	r29, 0x01	; 1
    ba7a:	41 14       	cp	r4, r1
    ba7c:	51 04       	cpc	r5, r1
    ba7e:	61 04       	cpc	r6, r1
    ba80:	71 04       	cpc	r7, r1
    ba82:	09 f4       	brne	.+2      	; 0xba86 <f_getcwd+0xb0>
    ba84:	a5 c0       	rjmp	.+330    	; 0xbbd0 <f_getcwd+0x1fa>
    ba86:	40 e2       	ldi	r20, 0x20	; 32
    ba88:	50 e0       	ldi	r21, 0x00	; 0
    ba8a:	60 e0       	ldi	r22, 0x00	; 0
    ba8c:	70 e0       	ldi	r23, 0x00	; 0
    ba8e:	ce 01       	movw	r24, r28
    ba90:	89 5e       	subi	r24, 0xE9	; 233
    ba92:	9e 4f       	sbci	r25, 0xFE	; 254
    ba94:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    ba98:	00 97       	sbiw	r24, 0x00	; 0
    ba9a:	09 f0       	breq	.+2      	; 0xba9e <f_getcwd+0xc8>
    ba9c:	95 c0       	rjmp	.+298    	; 0xbbc8 <f_getcwd+0x1f2>
    ba9e:	c3 5d       	subi	r28, 0xD3	; 211
    baa0:	de 4f       	sbci	r29, 0xFE	; 254
    baa2:	48 81       	ld	r20, Y
    baa4:	59 81       	ldd	r21, Y+1	; 0x01
    baa6:	6a 81       	ldd	r22, Y+2	; 0x02
    baa8:	7b 81       	ldd	r23, Y+3	; 0x03
    baaa:	cd 52       	subi	r28, 0x2D	; 45
    baac:	d1 40       	sbci	r29, 0x01	; 1
    baae:	cb 5b       	subi	r28, 0xBB	; 187
    bab0:	de 4f       	sbci	r29, 0xFE	; 254
    bab2:	88 81       	ld	r24, Y
    bab4:	99 81       	ldd	r25, Y+1	; 0x01
    bab6:	c5 54       	subi	r28, 0x45	; 69
    bab8:	d1 40       	sbci	r29, 0x01	; 1
    baba:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    babe:	00 97       	sbiw	r24, 0x00	; 0
    bac0:	09 f0       	breq	.+2      	; 0xbac4 <f_getcwd+0xee>
    bac2:	82 c0       	rjmp	.+260    	; 0xbbc8 <f_getcwd+0x1f2>
    bac4:	cf 5c       	subi	r28, 0xCF	; 207
    bac6:	de 4f       	sbci	r29, 0xFE	; 254
    bac8:	68 81       	ld	r22, Y
    baca:	79 81       	ldd	r23, Y+1	; 0x01
    bacc:	c1 53       	subi	r28, 0x31	; 49
    bace:	d1 40       	sbci	r29, 0x01	; 1
    bad0:	cb 5b       	subi	r28, 0xBB	; 187
    bad2:	de 4f       	sbci	r29, 0xFE	; 254
    bad4:	e8 81       	ld	r30, Y
    bad6:	f9 81       	ldd	r31, Y+1	; 0x01
    bad8:	c5 54       	subi	r28, 0x45	; 69
    bada:	d1 40       	sbci	r29, 0x01	; 1
    badc:	80 81       	ld	r24, Z
    bade:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    bae2:	c3 5e       	subi	r28, 0xE3	; 227
    bae4:	de 4f       	sbci	r29, 0xFE	; 254
    bae6:	68 83       	st	Y, r22
    bae8:	79 83       	std	Y+1, r23	; 0x01
    baea:	8a 83       	std	Y+2, r24	; 0x02
    baec:	9b 83       	std	Y+3, r25	; 0x03
    baee:	cd 51       	subi	r28, 0x1D	; 29
    baf0:	d1 40       	sbci	r29, 0x01	; 1
    baf2:	40 e0       	ldi	r20, 0x00	; 0
    baf4:	50 e0       	ldi	r21, 0x00	; 0
    baf6:	ba 01       	movw	r22, r20
    baf8:	ce 01       	movw	r24, r28
    bafa:	89 5e       	subi	r24, 0xE9	; 233
    bafc:	9e 4f       	sbci	r25, 0xFE	; 254
    bafe:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    bb02:	00 97       	sbiw	r24, 0x00	; 0
    bb04:	09 f0       	breq	.+2      	; 0xbb08 <f_getcwd+0x132>
    bb06:	60 c0       	rjmp	.+192    	; 0xbbc8 <f_getcwd+0x1f2>
    bb08:	60 e0       	ldi	r22, 0x00	; 0
    bb0a:	70 e0       	ldi	r23, 0x00	; 0
    bb0c:	ce 01       	movw	r24, r28
    bb0e:	89 5e       	subi	r24, 0xE9	; 233
    bb10:	9e 4f       	sbci	r25, 0xFE	; 254
    bb12:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <dir_read>
    bb16:	00 97       	sbiw	r24, 0x00	; 0
    bb18:	09 f0       	breq	.+2      	; 0xbb1c <f_getcwd+0x146>
    bb1a:	86 c0       	rjmp	.+268    	; 0xbc28 <f_getcwd+0x252>
    bb1c:	cf 5c       	subi	r28, 0xCF	; 207
    bb1e:	de 4f       	sbci	r29, 0xFE	; 254
    bb20:	68 81       	ld	r22, Y
    bb22:	79 81       	ldd	r23, Y+1	; 0x01
    bb24:	c1 53       	subi	r28, 0x31	; 49
    bb26:	d1 40       	sbci	r29, 0x01	; 1
    bb28:	cb 5b       	subi	r28, 0xBB	; 187
    bb2a:	de 4f       	sbci	r29, 0xFE	; 254
    bb2c:	e8 81       	ld	r30, Y
    bb2e:	f9 81       	ldd	r31, Y+1	; 0x01
    bb30:	c5 54       	subi	r28, 0x45	; 69
    bb32:	d1 40       	sbci	r29, 0x01	; 1
    bb34:	80 81       	ld	r24, Z
    bb36:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    bb3a:	46 16       	cp	r4, r22
    bb3c:	57 06       	cpc	r5, r23
    bb3e:	68 06       	cpc	r6, r24
    bb40:	79 06       	cpc	r7, r25
    bb42:	41 f4       	brne	.+16     	; 0xbb54 <f_getcwd+0x17e>
    bb44:	b4 01       	movw	r22, r8
    bb46:	ce 01       	movw	r24, r28
    bb48:	89 5e       	subi	r24, 0xE9	; 233
    bb4a:	9e 4f       	sbci	r25, 0xFE	; 254
    bb4c:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <get_fileinfo>
    bb50:	f4 01       	movw	r30, r8
    bb52:	0a c0       	rjmp	.+20     	; 0xbb68 <f_getcwd+0x192>
    bb54:	60 e0       	ldi	r22, 0x00	; 0
    bb56:	70 e0       	ldi	r23, 0x00	; 0
    bb58:	ce 01       	movw	r24, r28
    bb5a:	89 5e       	subi	r24, 0xE9	; 233
    bb5c:	9e 4f       	sbci	r25, 0xFE	; 254
    bb5e:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <dir_next>
    bb62:	00 97       	sbiw	r24, 0x00	; 0
    bb64:	89 f2       	breq	.-94     	; 0xbb08 <f_getcwd+0x132>
    bb66:	60 c0       	rjmp	.+192    	; 0xbc28 <f_getcwd+0x252>
    bb68:	cf 01       	movw	r24, r30
    bb6a:	88 19       	sub	r24, r8
    bb6c:	99 09       	sbc	r25, r9
    bb6e:	31 96       	adiw	r30, 0x01	; 1
    bb70:	25 89       	ldd	r18, Z+21	; 0x15
    bb72:	21 11       	cpse	r18, r1
    bb74:	f9 cf       	rjmp	.-14     	; 0xbb68 <f_getcwd+0x192>
    bb76:	9c 01       	movw	r18, r24
    bb78:	2d 5f       	subi	r18, 0xFD	; 253
    bb7a:	3f 4f       	sbci	r19, 0xFF	; 255
    bb7c:	e2 16       	cp	r14, r18
    bb7e:	f3 06       	cpc	r15, r19
    bb80:	28 f1       	brcs	.+74     	; 0xbbcc <f_getcwd+0x1f6>
    bb82:	f4 01       	movw	r30, r8
    bb84:	e8 0f       	add	r30, r24
    bb86:	f9 1f       	adc	r31, r25
    bb88:	97 01       	movw	r18, r14
    bb8a:	e8 15       	cp	r30, r8
    bb8c:	f9 05       	cpc	r31, r9
    bb8e:	71 f0       	breq	.+28     	; 0xbbac <f_getcwd+0x1d6>
    bb90:	21 50       	subi	r18, 0x01	; 1
    bb92:	31 09       	sbc	r19, r1
    bb94:	45 89       	ldd	r20, Z+21	; 0x15
    bb96:	c9 5b       	subi	r28, 0xB9	; 185
    bb98:	de 4f       	sbci	r29, 0xFE	; 254
    bb9a:	a8 81       	ld	r26, Y
    bb9c:	b9 81       	ldd	r27, Y+1	; 0x01
    bb9e:	c7 54       	subi	r28, 0x47	; 71
    bba0:	d1 40       	sbci	r29, 0x01	; 1
    bba2:	a2 0f       	add	r26, r18
    bba4:	b3 1f       	adc	r27, r19
    bba6:	4c 93       	st	X, r20
    bba8:	31 97       	sbiw	r30, 0x01	; 1
    bbaa:	ef cf       	rjmp	.-34     	; 0xbb8a <f_getcwd+0x1b4>
    bbac:	80 95       	com	r24
    bbae:	90 95       	com	r25
    bbb0:	e8 0e       	add	r14, r24
    bbb2:	f9 1e       	adc	r15, r25
    bbb4:	c9 5b       	subi	r28, 0xB9	; 185
    bbb6:	de 4f       	sbci	r29, 0xFE	; 254
    bbb8:	e8 81       	ld	r30, Y
    bbba:	f9 81       	ldd	r31, Y+1	; 0x01
    bbbc:	c7 54       	subi	r28, 0x47	; 71
    bbbe:	d1 40       	sbci	r29, 0x01	; 1
    bbc0:	ee 0d       	add	r30, r14
    bbc2:	ff 1d       	adc	r31, r15
    bbc4:	30 82       	st	Z, r3
    bbc6:	51 cf       	rjmp	.-350    	; 0xba6a <f_getcwd+0x94>
    bbc8:	8c 01       	movw	r16, r24
    bbca:	02 c0       	rjmp	.+4      	; 0xbbd0 <f_getcwd+0x1fa>
    bbcc:	01 e1       	ldi	r16, 0x11	; 17
    bbce:	10 e0       	ldi	r17, 0x00	; 0
    bbd0:	c9 5b       	subi	r28, 0xB9	; 185
    bbd2:	de 4f       	sbci	r29, 0xFE	; 254
    bbd4:	e8 81       	ld	r30, Y
    bbd6:	f9 81       	ldd	r31, Y+1	; 0x01
    bbd8:	c7 54       	subi	r28, 0x47	; 71
    bbda:	d1 40       	sbci	r29, 0x01	; 1
    bbdc:	01 15       	cp	r16, r1
    bbde:	11 05       	cpc	r17, r1
    bbe0:	d1 f4       	brne	.+52     	; 0xbc16 <f_getcwd+0x240>
    bbe2:	ea 14       	cp	r14, r10
    bbe4:	fb 04       	cpc	r15, r11
    bbe6:	21 f4       	brne	.+8      	; 0xbbf0 <f_getcwd+0x21a>
    bbe8:	8f e2       	ldi	r24, 0x2F	; 47
    bbea:	80 83       	st	Z, r24
    bbec:	31 96       	adiw	r30, 0x01	; 1
    bbee:	13 c0       	rjmp	.+38     	; 0xbc16 <f_getcwd+0x240>
    bbf0:	31 96       	adiw	r30, 0x01	; 1
    bbf2:	c9 5b       	subi	r28, 0xB9	; 185
    bbf4:	de 4f       	sbci	r29, 0xFE	; 254
    bbf6:	a8 81       	ld	r26, Y
    bbf8:	b9 81       	ldd	r27, Y+1	; 0x01
    bbfa:	c7 54       	subi	r28, 0x47	; 71
    bbfc:	d1 40       	sbci	r29, 0x01	; 1
    bbfe:	ae 0d       	add	r26, r14
    bc00:	bf 1d       	adc	r27, r15
    bc02:	8c 91       	ld	r24, X
    bc04:	df 01       	movw	r26, r30
    bc06:	11 97       	sbiw	r26, 0x01	; 1
    bc08:	8c 93       	st	X, r24
    bc0a:	c7 01       	movw	r24, r14
    bc0c:	01 96       	adiw	r24, 0x01	; 1
    bc0e:	7c 01       	movw	r14, r24
    bc10:	8a 15       	cp	r24, r10
    bc12:	9b 05       	cpc	r25, r11
    bc14:	68 f3       	brcs	.-38     	; 0xbbf0 <f_getcwd+0x21a>
    bc16:	10 82       	st	Z, r1
    bc18:	c6 01       	movw	r24, r12
    bc1a:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    bc1e:	c8 01       	movw	r24, r16
    bc20:	09 c0       	rjmp	.+18     	; 0xbc34 <f_getcwd+0x25e>
    bc22:	81 e1       	ldi	r24, 0x11	; 17
    bc24:	90 e0       	ldi	r25, 0x00	; 0
    bc26:	06 c0       	rjmp	.+12     	; 0xbc34 <f_getcwd+0x25e>
    bc28:	8c 01       	movw	r16, r24
    bc2a:	04 97       	sbiw	r24, 0x04	; 4
    bc2c:	89 f6       	brne	.-94     	; 0xbbd0 <f_getcwd+0x1fa>
    bc2e:	02 e0       	ldi	r16, 0x02	; 2
    bc30:	10 e0       	ldi	r17, 0x00	; 0
    bc32:	ce cf       	rjmp	.-100    	; 0xbbd0 <f_getcwd+0x1fa>
    bc34:	c8 5b       	subi	r28, 0xB8	; 184
    bc36:	de 4f       	sbci	r29, 0xFE	; 254
    bc38:	e1 e1       	ldi	r30, 0x11	; 17
    bc3a:	0c 94 58 e9 	jmp	0x1d2b0	; 0x1d2b0 <__epilogue_restores__+0x2>

0000bc3e <f_lseek>:
    bc3e:	aa e0       	ldi	r26, 0x0A	; 10
    bc40:	b0 e0       	ldi	r27, 0x00	; 0
    bc42:	e5 e2       	ldi	r30, 0x25	; 37
    bc44:	fe e5       	ldi	r31, 0x5E	; 94
    bc46:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    bc4a:	1c 01       	movw	r2, r24
    bc4c:	6a 01       	movw	r12, r20
    bc4e:	7b 01       	movw	r14, r22
    bc50:	be 01       	movw	r22, r28
    bc52:	6f 5f       	subi	r22, 0xFF	; 255
    bc54:	7f 4f       	sbci	r23, 0xFF	; 255
    bc56:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    bc5a:	00 97       	sbiw	r24, 0x00	; 0
    bc5c:	09 f0       	breq	.+2      	; 0xbc60 <f_lseek+0x22>
    bc5e:	c8 c2       	rjmp	.+1424   	; 0xc1f0 <f_lseek+0x5b2>
    bc60:	d1 01       	movw	r26, r2
    bc62:	1f 96       	adiw	r26, 0x0f	; 15
    bc64:	8c 91       	ld	r24, X
    bc66:	1f 97       	sbiw	r26, 0x0f	; 15
    bc68:	90 e0       	ldi	r25, 0x00	; 0
    bc6a:	00 97       	sbiw	r24, 0x00	; 0
    bc6c:	09 f0       	breq	.+2      	; 0xbc70 <f_lseek+0x32>
    bc6e:	c0 c2       	rjmp	.+1408   	; 0xc1f0 <f_lseek+0x5b2>
    bc70:	92 96       	adiw	r26, 0x22	; 34
    bc72:	ed 91       	ld	r30, X+
    bc74:	fc 91       	ld	r31, X
    bc76:	93 97       	sbiw	r26, 0x23	; 35
    bc78:	30 97       	sbiw	r30, 0x00	; 0
    bc7a:	09 f4       	brne	.+2      	; 0xbc7e <f_lseek+0x40>
    bc7c:	3a c1       	rjmp	.+628    	; 0xbef2 <f_lseek+0x2b4>
    bc7e:	bf ef       	ldi	r27, 0xFF	; 255
    bc80:	cb 16       	cp	r12, r27
    bc82:	db 06       	cpc	r13, r27
    bc84:	eb 06       	cpc	r14, r27
    bc86:	fb 06       	cpc	r15, r27
    bc88:	09 f0       	breq	.+2      	; 0xbc8c <f_lseek+0x4e>
    bc8a:	9f c0       	rjmp	.+318    	; 0xbdca <f_lseek+0x18c>
    bc8c:	8f 01       	movw	r16, r30
    bc8e:	0c 5f       	subi	r16, 0xFC	; 252
    bc90:	1f 4f       	sbci	r17, 0xFF	; 255
    bc92:	20 81       	ld	r18, Z
    bc94:	31 81       	ldd	r19, Z+1	; 0x01
    bc96:	42 81       	ldd	r20, Z+2	; 0x02
    bc98:	53 81       	ldd	r21, Z+3	; 0x03
    bc9a:	2f 83       	std	Y+7, r18	; 0x07
    bc9c:	38 87       	std	Y+8, r19	; 0x08
    bc9e:	49 87       	std	Y+9, r20	; 0x09
    bca0:	5a 87       	std	Y+10, r21	; 0x0a
    bca2:	d1 01       	movw	r26, r2
    bca4:	16 96       	adiw	r26, 0x06	; 6
    bca6:	8d 90       	ld	r8, X+
    bca8:	9d 90       	ld	r9, X+
    bcaa:	ad 90       	ld	r10, X+
    bcac:	bc 90       	ld	r11, X
    bcae:	19 97       	sbiw	r26, 0x09	; 9
    bcb0:	52 e0       	ldi	r21, 0x02	; 2
    bcb2:	c5 2e       	mov	r12, r21
    bcb4:	d1 2c       	mov	r13, r1
    bcb6:	e1 2c       	mov	r14, r1
    bcb8:	f1 2c       	mov	r15, r1
    bcba:	81 14       	cp	r8, r1
    bcbc:	91 04       	cpc	r9, r1
    bcbe:	a1 04       	cpc	r10, r1
    bcc0:	b1 04       	cpc	r11, r1
    bcc2:	09 f4       	brne	.+2      	; 0xbcc6 <f_lseek+0x88>
    bcc4:	68 c0       	rjmp	.+208    	; 0xbd96 <f_lseek+0x158>
    bcc6:	24 01       	movw	r4, r8
    bcc8:	35 01       	movw	r6, r10
    bcca:	1b 82       	std	Y+3, r1	; 0x03
    bccc:	1c 82       	std	Y+4, r1	; 0x04
    bcce:	1d 82       	std	Y+5, r1	; 0x05
    bcd0:	1e 82       	std	Y+6, r1	; 0x06
    bcd2:	2b 81       	ldd	r18, Y+3	; 0x03
    bcd4:	3c 81       	ldd	r19, Y+4	; 0x04
    bcd6:	4d 81       	ldd	r20, Y+5	; 0x05
    bcd8:	5e 81       	ldd	r21, Y+6	; 0x06
    bcda:	2f 5f       	subi	r18, 0xFF	; 255
    bcdc:	3f 4f       	sbci	r19, 0xFF	; 255
    bcde:	4f 4f       	sbci	r20, 0xFF	; 255
    bce0:	5f 4f       	sbci	r21, 0xFF	; 255
    bce2:	2b 83       	std	Y+3, r18	; 0x03
    bce4:	3c 83       	std	Y+4, r19	; 0x04
    bce6:	4d 83       	std	Y+5, r20	; 0x05
    bce8:	5e 83       	std	Y+6, r21	; 0x06
    bcea:	b3 01       	movw	r22, r6
    bcec:	a2 01       	movw	r20, r4
    bcee:	d1 01       	movw	r26, r2
    bcf0:	8d 91       	ld	r24, X+
    bcf2:	9c 91       	ld	r25, X
    bcf4:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <get_fat.isra.7>
    bcf8:	62 30       	cpi	r22, 0x02	; 2
    bcfa:	71 05       	cpc	r23, r1
    bcfc:	81 05       	cpc	r24, r1
    bcfe:	91 05       	cpc	r25, r1
    bd00:	20 f4       	brcc	.+8      	; 0xbd0a <f_lseek+0xcc>
    bd02:	82 e0       	ldi	r24, 0x02	; 2
    bd04:	f1 01       	movw	r30, r2
    bd06:	87 87       	std	Z+15, r24	; 0x0f
    bd08:	0a c0       	rjmp	.+20     	; 0xbd1e <f_lseek+0xe0>
    bd0a:	6f 3f       	cpi	r22, 0xFF	; 255
    bd0c:	ff ef       	ldi	r31, 0xFF	; 255
    bd0e:	7f 07       	cpc	r23, r31
    bd10:	8f 07       	cpc	r24, r31
    bd12:	9f 07       	cpc	r25, r31
    bd14:	31 f4       	brne	.+12     	; 0xbd22 <f_lseek+0xe4>
    bd16:	81 e0       	ldi	r24, 0x01	; 1
    bd18:	d1 01       	movw	r26, r2
    bd1a:	1f 96       	adiw	r26, 0x0f	; 15
    bd1c:	8c 93       	st	X, r24
    bd1e:	90 e0       	ldi	r25, 0x00	; 0
    bd20:	67 c2       	rjmp	.+1230   	; 0xc1f0 <f_lseek+0x5b2>
    bd22:	a3 01       	movw	r20, r6
    bd24:	92 01       	movw	r18, r4
    bd26:	2f 5f       	subi	r18, 0xFF	; 255
    bd28:	3f 4f       	sbci	r19, 0xFF	; 255
    bd2a:	4f 4f       	sbci	r20, 0xFF	; 255
    bd2c:	5f 4f       	sbci	r21, 0xFF	; 255
    bd2e:	2b 01       	movw	r4, r22
    bd30:	3c 01       	movw	r6, r24
    bd32:	62 17       	cp	r22, r18
    bd34:	73 07       	cpc	r23, r19
    bd36:	84 07       	cpc	r24, r20
    bd38:	95 07       	cpc	r25, r21
    bd3a:	59 f2       	breq	.-106    	; 0xbcd2 <f_lseek+0x94>
    bd3c:	b2 e0       	ldi	r27, 0x02	; 2
    bd3e:	cb 0e       	add	r12, r27
    bd40:	d1 1c       	adc	r13, r1
    bd42:	e1 1c       	adc	r14, r1
    bd44:	f1 1c       	adc	r15, r1
    bd46:	2f 81       	ldd	r18, Y+7	; 0x07
    bd48:	38 85       	ldd	r19, Y+8	; 0x08
    bd4a:	49 85       	ldd	r20, Y+9	; 0x09
    bd4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    bd4e:	2c 15       	cp	r18, r12
    bd50:	3d 05       	cpc	r19, r13
    bd52:	4e 05       	cpc	r20, r14
    bd54:	5f 05       	cpc	r21, r15
    bd56:	88 f0       	brcs	.+34     	; 0xbd7a <f_lseek+0x13c>
    bd58:	2b 81       	ldd	r18, Y+3	; 0x03
    bd5a:	3c 81       	ldd	r19, Y+4	; 0x04
    bd5c:	4d 81       	ldd	r20, Y+5	; 0x05
    bd5e:	5e 81       	ldd	r21, Y+6	; 0x06
    bd60:	d8 01       	movw	r26, r16
    bd62:	2d 93       	st	X+, r18
    bd64:	3d 93       	st	X+, r19
    bd66:	4d 93       	st	X+, r20
    bd68:	5c 93       	st	X, r21
    bd6a:	13 97       	sbiw	r26, 0x03	; 3
    bd6c:	f8 01       	movw	r30, r16
    bd6e:	84 82       	std	Z+4, r8	; 0x04
    bd70:	95 82       	std	Z+5, r9	; 0x05
    bd72:	a6 82       	std	Z+6, r10	; 0x06
    bd74:	b7 82       	std	Z+7, r11	; 0x07
    bd76:	08 5f       	subi	r16, 0xF8	; 248
    bd78:	1f 4f       	sbci	r17, 0xFF	; 255
    bd7a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd7c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd7e:	81 8c       	ldd	r8, Z+25	; 0x19
    bd80:	92 8c       	ldd	r9, Z+26	; 0x1a
    bd82:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bd84:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bd86:	68 15       	cp	r22, r8
    bd88:	79 05       	cpc	r23, r9
    bd8a:	8a 05       	cpc	r24, r10
    bd8c:	9b 05       	cpc	r25, r11
    bd8e:	18 f4       	brcc	.+6      	; 0xbd96 <f_lseek+0x158>
    bd90:	4b 01       	movw	r8, r22
    bd92:	5c 01       	movw	r10, r24
    bd94:	98 cf       	rjmp	.-208    	; 0xbcc6 <f_lseek+0x88>
    bd96:	d1 01       	movw	r26, r2
    bd98:	92 96       	adiw	r26, 0x22	; 34
    bd9a:	ed 91       	ld	r30, X+
    bd9c:	fc 91       	ld	r31, X
    bd9e:	93 97       	sbiw	r26, 0x23	; 35
    bda0:	c0 82       	st	Z, r12
    bda2:	d1 82       	std	Z+1, r13	; 0x01
    bda4:	e2 82       	std	Z+2, r14	; 0x02
    bda6:	f3 82       	std	Z+3, r15	; 0x03
    bda8:	2f 81       	ldd	r18, Y+7	; 0x07
    bdaa:	38 85       	ldd	r19, Y+8	; 0x08
    bdac:	49 85       	ldd	r20, Y+9	; 0x09
    bdae:	5a 85       	ldd	r21, Y+10	; 0x0a
    bdb0:	2c 15       	cp	r18, r12
    bdb2:	3d 05       	cpc	r19, r13
    bdb4:	4e 05       	cpc	r20, r14
    bdb6:	5f 05       	cpc	r21, r15
    bdb8:	08 f4       	brcc	.+2      	; 0xbdbc <f_lseek+0x17e>
    bdba:	11 c2       	rjmp	.+1058   	; 0xc1de <f_lseek+0x5a0>
    bdbc:	d8 01       	movw	r26, r16
    bdbe:	1d 92       	st	X+, r1
    bdc0:	1d 92       	st	X+, r1
    bdc2:	1d 92       	st	X+, r1
    bdc4:	1c 92       	st	X, r1
    bdc6:	13 97       	sbiw	r26, 0x03	; 3
    bdc8:	08 c2       	rjmp	.+1040   	; 0xc1da <f_lseek+0x59c>
    bdca:	f1 01       	movw	r30, r2
    bdcc:	82 85       	ldd	r24, Z+10	; 0x0a
    bdce:	93 85       	ldd	r25, Z+11	; 0x0b
    bdd0:	a4 85       	ldd	r26, Z+12	; 0x0c
    bdd2:	b5 85       	ldd	r27, Z+13	; 0x0d
    bdd4:	46 01       	movw	r8, r12
    bdd6:	57 01       	movw	r10, r14
    bdd8:	8c 15       	cp	r24, r12
    bdda:	9d 05       	cpc	r25, r13
    bddc:	ae 05       	cpc	r26, r14
    bdde:	bf 05       	cpc	r27, r15
    bde0:	10 f4       	brcc	.+4      	; 0xbde6 <f_lseek+0x1a8>
    bde2:	4c 01       	movw	r8, r24
    bde4:	5d 01       	movw	r10, r26
    bde6:	d1 01       	movw	r26, r2
    bde8:	50 96       	adiw	r26, 0x10	; 16
    bdea:	8d 92       	st	X+, r8
    bdec:	9d 92       	st	X+, r9
    bdee:	ad 92       	st	X+, r10
    bdf0:	bc 92       	st	X, r11
    bdf2:	53 97       	sbiw	r26, 0x13	; 19
    bdf4:	81 14       	cp	r8, r1
    bdf6:	91 04       	cpc	r9, r1
    bdf8:	a1 04       	cpc	r10, r1
    bdfa:	b1 04       	cpc	r11, r1
    bdfc:	09 f4       	brne	.+2      	; 0xbe00 <f_lseek+0x1c2>
    bdfe:	ed c1       	rjmp	.+986    	; 0xc1da <f_lseek+0x59c>
    be00:	24 01       	movw	r4, r8
    be02:	35 01       	movw	r6, r10
    be04:	b1 e0       	ldi	r27, 0x01	; 1
    be06:	4b 1a       	sub	r4, r27
    be08:	51 08       	sbc	r5, r1
    be0a:	61 08       	sbc	r6, r1
    be0c:	71 08       	sbc	r7, r1
    be0e:	b3 01       	movw	r22, r6
    be10:	a2 01       	movw	r20, r4
    be12:	c1 01       	movw	r24, r2
    be14:	0e 94 29 46 	call	0x8c52	; 0x8c52 <clmt_clust>
    be18:	ab 01       	movw	r20, r22
    be1a:	bc 01       	movw	r22, r24
    be1c:	f1 01       	movw	r30, r2
    be1e:	44 8b       	std	Z+20, r20	; 0x14
    be20:	55 8b       	std	Z+21, r21	; 0x15
    be22:	66 8b       	std	Z+22, r22	; 0x16
    be24:	77 8b       	std	Z+23, r23	; 0x17
    be26:	e9 80       	ldd	r14, Y+1	; 0x01
    be28:	fa 80       	ldd	r15, Y+2	; 0x02
    be2a:	c7 01       	movw	r24, r14
    be2c:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    be30:	61 15       	cp	r22, r1
    be32:	71 05       	cpc	r23, r1
    be34:	81 05       	cpc	r24, r1
    be36:	91 05       	cpc	r25, r1
    be38:	09 f4       	brne	.+2      	; 0xbe3c <f_lseek+0x1fe>
    be3a:	63 cf       	rjmp	.-314    	; 0xbd02 <f_lseek+0xc4>
    be3c:	95 01       	movw	r18, r10
    be3e:	84 01       	movw	r16, r8
    be40:	11 70       	andi	r17, 0x01	; 1
    be42:	22 27       	eor	r18, r18
    be44:	33 27       	eor	r19, r19
    be46:	01 15       	cp	r16, r1
    be48:	11 05       	cpc	r17, r1
    be4a:	21 05       	cpc	r18, r1
    be4c:	31 05       	cpc	r19, r1
    be4e:	09 f4       	brne	.+2      	; 0xbe52 <f_lseek+0x214>
    be50:	c4 c1       	rjmp	.+904    	; 0xc1da <f_lseek+0x59c>
    be52:	d7 01       	movw	r26, r14
    be54:	19 96       	adiw	r26, 0x09	; 9
    be56:	8d 90       	ld	r8, X+
    be58:	9c 90       	ld	r9, X
    be5a:	1a 97       	sbiw	r26, 0x0a	; 10
    be5c:	b1 e0       	ldi	r27, 0x01	; 1
    be5e:	8b 1a       	sub	r8, r27
    be60:	91 08       	sbc	r9, r1
    be62:	a1 2c       	mov	r10, r1
    be64:	b1 2c       	mov	r11, r1
    be66:	49 e0       	ldi	r20, 0x09	; 9
    be68:	76 94       	lsr	r7
    be6a:	67 94       	ror	r6
    be6c:	57 94       	ror	r5
    be6e:	47 94       	ror	r4
    be70:	4a 95       	dec	r20
    be72:	d1 f7       	brne	.-12     	; 0xbe68 <f_lseek+0x22a>
    be74:	48 20       	and	r4, r8
    be76:	59 20       	and	r5, r9
    be78:	6a 20       	and	r6, r10
    be7a:	7b 20       	and	r7, r11
    be7c:	53 01       	movw	r10, r6
    be7e:	42 01       	movw	r8, r4
    be80:	86 0e       	add	r8, r22
    be82:	97 1e       	adc	r9, r23
    be84:	a8 1e       	adc	r10, r24
    be86:	b9 1e       	adc	r11, r25
    be88:	f1 01       	movw	r30, r2
    be8a:	20 8d       	ldd	r18, Z+24	; 0x18
    be8c:	31 8d       	ldd	r19, Z+25	; 0x19
    be8e:	42 8d       	ldd	r20, Z+26	; 0x1a
    be90:	53 8d       	ldd	r21, Z+27	; 0x1b
    be92:	82 16       	cp	r8, r18
    be94:	93 06       	cpc	r9, r19
    be96:	a4 06       	cpc	r10, r20
    be98:	b5 06       	cpc	r11, r21
    be9a:	09 f4       	brne	.+2      	; 0xbe9e <f_lseek+0x260>
    be9c:	9e c1       	rjmp	.+828    	; 0xc1da <f_lseek+0x59c>
    be9e:	86 85       	ldd	r24, Z+14	; 0x0e
    bea0:	b1 01       	movw	r22, r2
    bea2:	6c 5d       	subi	r22, 0xDC	; 220
    bea4:	7f 4f       	sbci	r23, 0xFF	; 255
    bea6:	6b 01       	movw	r12, r22
    bea8:	87 ff       	sbrs	r24, 7
    beaa:	0e c0       	rjmp	.+28     	; 0xbec8 <f_lseek+0x28a>
    beac:	01 e0       	ldi	r16, 0x01	; 1
    beae:	10 e0       	ldi	r17, 0x00	; 0
    beb0:	d7 01       	movw	r26, r14
    beb2:	11 96       	adiw	r26, 0x01	; 1
    beb4:	8c 91       	ld	r24, X
    beb6:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    beba:	89 2b       	or	r24, r25
    bebc:	09 f0       	breq	.+2      	; 0xbec0 <f_lseek+0x282>
    bebe:	2b cf       	rjmp	.-426    	; 0xbd16 <f_lseek+0xd8>
    bec0:	f1 01       	movw	r30, r2
    bec2:	86 85       	ldd	r24, Z+14	; 0x0e
    bec4:	8f 77       	andi	r24, 0x7F	; 127
    bec6:	86 87       	std	Z+14, r24	; 0x0e
    bec8:	e9 81       	ldd	r30, Y+1	; 0x01
    beca:	fa 81       	ldd	r31, Y+2	; 0x02
    becc:	01 e0       	ldi	r16, 0x01	; 1
    bece:	10 e0       	ldi	r17, 0x00	; 0
    bed0:	a5 01       	movw	r20, r10
    bed2:	94 01       	movw	r18, r8
    bed4:	b6 01       	movw	r22, r12
    bed6:	81 81       	ldd	r24, Z+1	; 0x01
    bed8:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    bedc:	89 2b       	or	r24, r25
    bede:	09 f0       	breq	.+2      	; 0xbee2 <f_lseek+0x2a4>
    bee0:	1a cf       	rjmp	.-460    	; 0xbd16 <f_lseek+0xd8>
    bee2:	d1 01       	movw	r26, r2
    bee4:	58 96       	adiw	r26, 0x18	; 24
    bee6:	8d 92       	st	X+, r8
    bee8:	9d 92       	st	X+, r9
    beea:	ad 92       	st	X+, r10
    beec:	bc 92       	st	X, r11
    beee:	5b 97       	sbiw	r26, 0x1b	; 27
    bef0:	74 c1       	rjmp	.+744    	; 0xc1da <f_lseek+0x59c>
    bef2:	f1 01       	movw	r30, r2
    bef4:	82 85       	ldd	r24, Z+10	; 0x0a
    bef6:	93 85       	ldd	r25, Z+11	; 0x0b
    bef8:	a4 85       	ldd	r26, Z+12	; 0x0c
    befa:	b5 85       	ldd	r27, Z+13	; 0x0d
    befc:	8c 15       	cp	r24, r12
    befe:	9d 05       	cpc	r25, r13
    bf00:	ae 05       	cpc	r26, r14
    bf02:	bf 05       	cpc	r27, r15
    bf04:	28 f4       	brcc	.+10     	; 0xbf10 <f_lseek+0x2d2>
    bf06:	26 85       	ldd	r18, Z+14	; 0x0e
    bf08:	21 fd       	sbrc	r18, 1
    bf0a:	02 c0       	rjmp	.+4      	; 0xbf10 <f_lseek+0x2d2>
    bf0c:	6c 01       	movw	r12, r24
    bf0e:	7d 01       	movw	r14, r26
    bf10:	d1 01       	movw	r26, r2
    bf12:	50 96       	adiw	r26, 0x10	; 16
    bf14:	4d 90       	ld	r4, X+
    bf16:	5d 90       	ld	r5, X+
    bf18:	6d 90       	ld	r6, X+
    bf1a:	7c 90       	ld	r7, X
    bf1c:	53 97       	sbiw	r26, 0x13	; 19
    bf1e:	f1 01       	movw	r30, r2
    bf20:	10 8a       	std	Z+16, r1	; 0x10
    bf22:	11 8a       	std	Z+17, r1	; 0x11
    bf24:	12 8a       	std	Z+18, r1	; 0x12
    bf26:	13 8a       	std	Z+19, r1	; 0x13
    bf28:	c1 14       	cp	r12, r1
    bf2a:	d1 04       	cpc	r13, r1
    bf2c:	e1 04       	cpc	r14, r1
    bf2e:	f1 04       	cpc	r15, r1
    bf30:	09 f4       	brne	.+2      	; 0xbf34 <f_lseek+0x2f6>
    bf32:	57 c1       	rjmp	.+686    	; 0xc1e2 <f_lseek+0x5a4>
    bf34:	e9 81       	ldd	r30, Y+1	; 0x01
    bf36:	fa 81       	ldd	r31, Y+2	; 0x02
    bf38:	81 84       	ldd	r8, Z+9	; 0x09
    bf3a:	92 84       	ldd	r9, Z+10	; 0x0a
    bf3c:	a1 2c       	mov	r10, r1
    bf3e:	b1 2c       	mov	r11, r1
    bf40:	39 e0       	ldi	r19, 0x09	; 9
    bf42:	88 0c       	add	r8, r8
    bf44:	99 1c       	adc	r9, r9
    bf46:	aa 1c       	adc	r10, r10
    bf48:	bb 1c       	adc	r11, r11
    bf4a:	3a 95       	dec	r19
    bf4c:	d1 f7       	brne	.-12     	; 0xbf42 <f_lseek+0x304>
    bf4e:	41 14       	cp	r4, r1
    bf50:	51 04       	cpc	r5, r1
    bf52:	61 04       	cpc	r6, r1
    bf54:	71 04       	cpc	r7, r1
    bf56:	09 f4       	brne	.+2      	; 0xbf5a <f_lseek+0x31c>
    bf58:	3f c0       	rjmp	.+126    	; 0xbfd8 <f_lseek+0x39a>
    bf5a:	f1 e0       	ldi	r31, 0x01	; 1
    bf5c:	4f 1a       	sub	r4, r31
    bf5e:	51 08       	sbc	r5, r1
    bf60:	61 08       	sbc	r6, r1
    bf62:	71 08       	sbc	r7, r1
    bf64:	c7 01       	movw	r24, r14
    bf66:	b6 01       	movw	r22, r12
    bf68:	61 50       	subi	r22, 0x01	; 1
    bf6a:	71 09       	sbc	r23, r1
    bf6c:	81 09       	sbc	r24, r1
    bf6e:	91 09       	sbc	r25, r1
    bf70:	a5 01       	movw	r20, r10
    bf72:	94 01       	movw	r18, r8
    bf74:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    bf78:	2b 83       	std	Y+3, r18	; 0x03
    bf7a:	3c 83       	std	Y+4, r19	; 0x04
    bf7c:	4d 83       	std	Y+5, r20	; 0x05
    bf7e:	5e 83       	std	Y+6, r21	; 0x06
    bf80:	c3 01       	movw	r24, r6
    bf82:	b2 01       	movw	r22, r4
    bf84:	a5 01       	movw	r20, r10
    bf86:	94 01       	movw	r18, r8
    bf88:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    bf8c:	6b 81       	ldd	r22, Y+3	; 0x03
    bf8e:	7c 81       	ldd	r23, Y+4	; 0x04
    bf90:	8d 81       	ldd	r24, Y+5	; 0x05
    bf92:	9e 81       	ldd	r25, Y+6	; 0x06
    bf94:	62 17       	cp	r22, r18
    bf96:	73 07       	cpc	r23, r19
    bf98:	84 07       	cpc	r24, r20
    bf9a:	95 07       	cpc	r25, r21
    bf9c:	e8 f0       	brcs	.+58     	; 0xbfd8 <f_lseek+0x39a>
    bf9e:	88 27       	eor	r24, r24
    bfa0:	99 27       	eor	r25, r25
    bfa2:	dc 01       	movw	r26, r24
    bfa4:	88 19       	sub	r24, r8
    bfa6:	99 09       	sbc	r25, r9
    bfa8:	aa 09       	sbc	r26, r10
    bfaa:	bb 09       	sbc	r27, r11
    bfac:	48 22       	and	r4, r24
    bfae:	59 22       	and	r5, r25
    bfb0:	6a 22       	and	r6, r26
    bfb2:	7b 22       	and	r7, r27
    bfb4:	d1 01       	movw	r26, r2
    bfb6:	50 96       	adiw	r26, 0x10	; 16
    bfb8:	4d 92       	st	X+, r4
    bfba:	5d 92       	st	X+, r5
    bfbc:	6d 92       	st	X+, r6
    bfbe:	7c 92       	st	X, r7
    bfc0:	53 97       	sbiw	r26, 0x13	; 19
    bfc2:	c4 18       	sub	r12, r4
    bfc4:	d5 08       	sbc	r13, r5
    bfc6:	e6 08       	sbc	r14, r6
    bfc8:	f7 08       	sbc	r15, r7
    bfca:	54 96       	adiw	r26, 0x14	; 20
    bfcc:	4d 91       	ld	r20, X+
    bfce:	5d 91       	ld	r21, X+
    bfd0:	6d 91       	ld	r22, X+
    bfd2:	7c 91       	ld	r23, X
    bfd4:	57 97       	sbiw	r26, 0x17	; 23
    bfd6:	2b c0       	rjmp	.+86     	; 0xc02e <f_lseek+0x3f0>
    bfd8:	f1 01       	movw	r30, r2
    bfda:	46 81       	ldd	r20, Z+6	; 0x06
    bfdc:	57 81       	ldd	r21, Z+7	; 0x07
    bfde:	60 85       	ldd	r22, Z+8	; 0x08
    bfe0:	71 85       	ldd	r23, Z+9	; 0x09
    bfe2:	41 15       	cp	r20, r1
    bfe4:	51 05       	cpc	r21, r1
    bfe6:	61 05       	cpc	r22, r1
    bfe8:	71 05       	cpc	r23, r1
    bfea:	e1 f4       	brne	.+56     	; 0xc024 <f_lseek+0x3e6>
    bfec:	40 e0       	ldi	r20, 0x00	; 0
    bfee:	50 e0       	ldi	r21, 0x00	; 0
    bff0:	ba 01       	movw	r22, r20
    bff2:	c1 01       	movw	r24, r2
    bff4:	0e 94 4d 4d 	call	0x9a9a	; 0x9a9a <create_chain>
    bff8:	ab 01       	movw	r20, r22
    bffa:	bc 01       	movw	r22, r24
    bffc:	41 30       	cpi	r20, 0x01	; 1
    bffe:	51 05       	cpc	r21, r1
    c000:	61 05       	cpc	r22, r1
    c002:	71 05       	cpc	r23, r1
    c004:	09 f4       	brne	.+2      	; 0xc008 <f_lseek+0x3ca>
    c006:	7d ce       	rjmp	.-774    	; 0xbd02 <f_lseek+0xc4>
    c008:	4f 3f       	cpi	r20, 0xFF	; 255
    c00a:	ff ef       	ldi	r31, 0xFF	; 255
    c00c:	5f 07       	cpc	r21, r31
    c00e:	6f 07       	cpc	r22, r31
    c010:	7f 07       	cpc	r23, r31
    c012:	09 f4       	brne	.+2      	; 0xc016 <f_lseek+0x3d8>
    c014:	80 ce       	rjmp	.-768    	; 0xbd16 <f_lseek+0xd8>
    c016:	d1 01       	movw	r26, r2
    c018:	16 96       	adiw	r26, 0x06	; 6
    c01a:	4d 93       	st	X+, r20
    c01c:	5d 93       	st	X+, r21
    c01e:	6d 93       	st	X+, r22
    c020:	7c 93       	st	X, r23
    c022:	19 97       	sbiw	r26, 0x09	; 9
    c024:	f1 01       	movw	r30, r2
    c026:	44 8b       	std	Z+20, r20	; 0x14
    c028:	55 8b       	std	Z+21, r21	; 0x15
    c02a:	66 8b       	std	Z+22, r22	; 0x16
    c02c:	77 8b       	std	Z+23, r23	; 0x17
    c02e:	41 15       	cp	r20, r1
    c030:	51 05       	cpc	r21, r1
    c032:	61 05       	cpc	r22, r1
    c034:	71 05       	cpc	r23, r1
    c036:	09 f0       	breq	.+2      	; 0xc03a <f_lseek+0x3fc>
    c038:	40 c0       	rjmp	.+128    	; 0xc0ba <f_lseek+0x47c>
    c03a:	c1 2c       	mov	r12, r1
    c03c:	d1 2c       	mov	r13, r1
    c03e:	76 01       	movw	r14, r12
    c040:	79 c0       	rjmp	.+242    	; 0xc134 <f_lseek+0x4f6>
    c042:	c8 18       	sub	r12, r8
    c044:	d9 08       	sbc	r13, r9
    c046:	ea 08       	sbc	r14, r10
    c048:	fb 08       	sbc	r15, r11
    c04a:	f1 01       	movw	r30, r2
    c04c:	80 89       	ldd	r24, Z+16	; 0x10
    c04e:	91 89       	ldd	r25, Z+17	; 0x11
    c050:	a2 89       	ldd	r26, Z+18	; 0x12
    c052:	b3 89       	ldd	r27, Z+19	; 0x13
    c054:	88 0d       	add	r24, r8
    c056:	99 1d       	adc	r25, r9
    c058:	aa 1d       	adc	r26, r10
    c05a:	bb 1d       	adc	r27, r11
    c05c:	80 8b       	std	Z+16, r24	; 0x10
    c05e:	91 8b       	std	Z+17, r25	; 0x11
    c060:	a2 8b       	std	Z+18, r26	; 0x12
    c062:	b3 8b       	std	Z+19, r27	; 0x13
    c064:	86 85       	ldd	r24, Z+14	; 0x0e
    c066:	81 ff       	sbrs	r24, 1
    c068:	2f c0       	rjmp	.+94     	; 0xc0c8 <f_lseek+0x48a>
    c06a:	c1 01       	movw	r24, r2
    c06c:	0e 94 4d 4d 	call	0x9a9a	; 0x9a9a <create_chain>
    c070:	ab 01       	movw	r20, r22
    c072:	bc 01       	movw	r22, r24
    c074:	41 15       	cp	r20, r1
    c076:	51 05       	cpc	r21, r1
    c078:	61 05       	cpc	r22, r1
    c07a:	71 05       	cpc	r23, r1
    c07c:	61 f1       	breq	.+88     	; 0xc0d6 <f_lseek+0x498>
    c07e:	4f 3f       	cpi	r20, 0xFF	; 255
    c080:	bf ef       	ldi	r27, 0xFF	; 255
    c082:	5b 07       	cpc	r21, r27
    c084:	6b 07       	cpc	r22, r27
    c086:	7b 07       	cpc	r23, r27
    c088:	09 f4       	brne	.+2      	; 0xc08c <f_lseek+0x44e>
    c08a:	45 ce       	rjmp	.-886    	; 0xbd16 <f_lseek+0xd8>
    c08c:	42 30       	cpi	r20, 0x02	; 2
    c08e:	51 05       	cpc	r21, r1
    c090:	61 05       	cpc	r22, r1
    c092:	71 05       	cpc	r23, r1
    c094:	08 f4       	brcc	.+2      	; 0xc098 <f_lseek+0x45a>
    c096:	35 ce       	rjmp	.-918    	; 0xbd02 <f_lseek+0xc4>
    c098:	e9 81       	ldd	r30, Y+1	; 0x01
    c09a:	fa 81       	ldd	r31, Y+2	; 0x02
    c09c:	81 8d       	ldd	r24, Z+25	; 0x19
    c09e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c0a0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c0a2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c0a4:	48 17       	cp	r20, r24
    c0a6:	59 07       	cpc	r21, r25
    c0a8:	6a 07       	cpc	r22, r26
    c0aa:	7b 07       	cpc	r23, r27
    c0ac:	08 f0       	brcs	.+2      	; 0xc0b0 <f_lseek+0x472>
    c0ae:	29 ce       	rjmp	.-942    	; 0xbd02 <f_lseek+0xc4>
    c0b0:	f1 01       	movw	r30, r2
    c0b2:	44 8b       	std	Z+20, r20	; 0x14
    c0b4:	55 8b       	std	Z+21, r21	; 0x15
    c0b6:	66 8b       	std	Z+22, r22	; 0x16
    c0b8:	77 8b       	std	Z+23, r23	; 0x17
    c0ba:	8c 14       	cp	r8, r12
    c0bc:	9d 04       	cpc	r9, r13
    c0be:	ae 04       	cpc	r10, r14
    c0c0:	bf 04       	cpc	r11, r15
    c0c2:	08 f4       	brcc	.+2      	; 0xc0c6 <f_lseek+0x488>
    c0c4:	be cf       	rjmp	.-132    	; 0xc042 <f_lseek+0x404>
    c0c6:	0a c0       	rjmp	.+20     	; 0xc0dc <f_lseek+0x49e>
    c0c8:	80 81       	ld	r24, Z
    c0ca:	91 81       	ldd	r25, Z+1	; 0x01
    c0cc:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <get_fat.isra.7>
    c0d0:	ab 01       	movw	r20, r22
    c0d2:	bc 01       	movw	r22, r24
    c0d4:	d4 cf       	rjmp	.-88     	; 0xc07e <f_lseek+0x440>
    c0d6:	c1 2c       	mov	r12, r1
    c0d8:	d1 2c       	mov	r13, r1
    c0da:	76 01       	movw	r14, r12
    c0dc:	f1 01       	movw	r30, r2
    c0de:	80 89       	ldd	r24, Z+16	; 0x10
    c0e0:	91 89       	ldd	r25, Z+17	; 0x11
    c0e2:	a2 89       	ldd	r26, Z+18	; 0x12
    c0e4:	b3 89       	ldd	r27, Z+19	; 0x13
    c0e6:	8c 0d       	add	r24, r12
    c0e8:	9d 1d       	adc	r25, r13
    c0ea:	ae 1d       	adc	r26, r14
    c0ec:	bf 1d       	adc	r27, r15
    c0ee:	80 8b       	std	Z+16, r24	; 0x10
    c0f0:	91 8b       	std	Z+17, r25	; 0x11
    c0f2:	a2 8b       	std	Z+18, r26	; 0x12
    c0f4:	b3 8b       	std	Z+19, r27	; 0x13
    c0f6:	d7 01       	movw	r26, r14
    c0f8:	c6 01       	movw	r24, r12
    c0fa:	91 70       	andi	r25, 0x01	; 1
    c0fc:	aa 27       	eor	r26, r26
    c0fe:	bb 27       	eor	r27, r27
    c100:	89 2b       	or	r24, r25
    c102:	8a 2b       	or	r24, r26
    c104:	8b 2b       	or	r24, r27
    c106:	09 f4       	brne	.+2      	; 0xc10a <f_lseek+0x4cc>
    c108:	98 cf       	rjmp	.-208    	; 0xc03a <f_lseek+0x3fc>
    c10a:	89 81       	ldd	r24, Y+1	; 0x01
    c10c:	9a 81       	ldd	r25, Y+2	; 0x02
    c10e:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    c112:	61 15       	cp	r22, r1
    c114:	71 05       	cpc	r23, r1
    c116:	81 05       	cpc	r24, r1
    c118:	91 05       	cpc	r25, r1
    c11a:	09 f4       	brne	.+2      	; 0xc11e <f_lseek+0x4e0>
    c11c:	f2 cd       	rjmp	.-1052   	; 0xbd02 <f_lseek+0xc4>
    c11e:	29 e0       	ldi	r18, 0x09	; 9
    c120:	f6 94       	lsr	r15
    c122:	e7 94       	ror	r14
    c124:	d7 94       	ror	r13
    c126:	c7 94       	ror	r12
    c128:	2a 95       	dec	r18
    c12a:	d1 f7       	brne	.-12     	; 0xc120 <f_lseek+0x4e2>
    c12c:	c6 0e       	add	r12, r22
    c12e:	d7 1e       	adc	r13, r23
    c130:	e8 1e       	adc	r14, r24
    c132:	f9 1e       	adc	r15, r25
    c134:	f1 01       	movw	r30, r2
    c136:	80 89       	ldd	r24, Z+16	; 0x10
    c138:	91 89       	ldd	r25, Z+17	; 0x11
    c13a:	a2 89       	ldd	r26, Z+18	; 0x12
    c13c:	b3 89       	ldd	r27, Z+19	; 0x13
    c13e:	42 85       	ldd	r20, Z+10	; 0x0a
    c140:	53 85       	ldd	r21, Z+11	; 0x0b
    c142:	64 85       	ldd	r22, Z+12	; 0x0c
    c144:	75 85       	ldd	r23, Z+13	; 0x0d
    c146:	48 17       	cp	r20, r24
    c148:	59 07       	cpc	r21, r25
    c14a:	6a 07       	cpc	r22, r26
    c14c:	7b 07       	cpc	r23, r27
    c14e:	38 f4       	brcc	.+14     	; 0xc15e <f_lseek+0x520>
    c150:	82 87       	std	Z+10, r24	; 0x0a
    c152:	93 87       	std	Z+11, r25	; 0x0b
    c154:	a4 87       	std	Z+12, r26	; 0x0c
    c156:	b5 87       	std	Z+13, r27	; 0x0d
    c158:	26 85       	ldd	r18, Z+14	; 0x0e
    c15a:	20 64       	ori	r18, 0x40	; 64
    c15c:	26 87       	std	Z+14, r18	; 0x0e
    c15e:	91 70       	andi	r25, 0x01	; 1
    c160:	aa 27       	eor	r26, r26
    c162:	bb 27       	eor	r27, r27
    c164:	89 2b       	or	r24, r25
    c166:	8a 2b       	or	r24, r26
    c168:	8b 2b       	or	r24, r27
    c16a:	b9 f1       	breq	.+110    	; 0xc1da <f_lseek+0x59c>
    c16c:	d1 01       	movw	r26, r2
    c16e:	58 96       	adiw	r26, 0x18	; 24
    c170:	2d 91       	ld	r18, X+
    c172:	3d 91       	ld	r19, X+
    c174:	4d 91       	ld	r20, X+
    c176:	5c 91       	ld	r21, X
    c178:	5b 97       	sbiw	r26, 0x1b	; 27
    c17a:	2c 15       	cp	r18, r12
    c17c:	3d 05       	cpc	r19, r13
    c17e:	4e 05       	cpc	r20, r14
    c180:	5f 05       	cpc	r21, r15
    c182:	59 f1       	breq	.+86     	; 0xc1da <f_lseek+0x59c>
    c184:	1e 96       	adiw	r26, 0x0e	; 14
    c186:	8c 91       	ld	r24, X
    c188:	f1 01       	movw	r30, r2
    c18a:	b4 96       	adiw	r30, 0x24	; 36
    c18c:	5f 01       	movw	r10, r30
    c18e:	87 ff       	sbrs	r24, 7
    c190:	12 c0       	rjmp	.+36     	; 0xc1b6 <f_lseek+0x578>
    c192:	e9 81       	ldd	r30, Y+1	; 0x01
    c194:	fa 81       	ldd	r31, Y+2	; 0x02
    c196:	01 e0       	ldi	r16, 0x01	; 1
    c198:	10 e0       	ldi	r17, 0x00	; 0
    c19a:	b5 01       	movw	r22, r10
    c19c:	81 81       	ldd	r24, Z+1	; 0x01
    c19e:	0e 94 1f 6d 	call	0xda3e	; 0xda3e <disk_write>
    c1a2:	89 2b       	or	r24, r25
    c1a4:	09 f0       	breq	.+2      	; 0xc1a8 <f_lseek+0x56a>
    c1a6:	b7 cd       	rjmp	.-1170   	; 0xbd16 <f_lseek+0xd8>
    c1a8:	d1 01       	movw	r26, r2
    c1aa:	1e 96       	adiw	r26, 0x0e	; 14
    c1ac:	8c 91       	ld	r24, X
    c1ae:	1e 97       	sbiw	r26, 0x0e	; 14
    c1b0:	8f 77       	andi	r24, 0x7F	; 127
    c1b2:	1e 96       	adiw	r26, 0x0e	; 14
    c1b4:	8c 93       	st	X, r24
    c1b6:	e9 81       	ldd	r30, Y+1	; 0x01
    c1b8:	fa 81       	ldd	r31, Y+2	; 0x02
    c1ba:	01 e0       	ldi	r16, 0x01	; 1
    c1bc:	10 e0       	ldi	r17, 0x00	; 0
    c1be:	a7 01       	movw	r20, r14
    c1c0:	96 01       	movw	r18, r12
    c1c2:	b5 01       	movw	r22, r10
    c1c4:	81 81       	ldd	r24, Z+1	; 0x01
    c1c6:	0e 94 0f 6d 	call	0xda1e	; 0xda1e <disk_read>
    c1ca:	89 2b       	or	r24, r25
    c1cc:	09 f0       	breq	.+2      	; 0xc1d0 <f_lseek+0x592>
    c1ce:	a3 cd       	rjmp	.-1210   	; 0xbd16 <f_lseek+0xd8>
    c1d0:	f1 01       	movw	r30, r2
    c1d2:	c0 8e       	std	Z+24, r12	; 0x18
    c1d4:	d1 8e       	std	Z+25, r13	; 0x19
    c1d6:	e2 8e       	std	Z+26, r14	; 0x1a
    c1d8:	f3 8e       	std	Z+27, r15	; 0x1b
    c1da:	80 e0       	ldi	r24, 0x00	; 0
    c1dc:	a0 cd       	rjmp	.-1216   	; 0xbd1e <f_lseek+0xe0>
    c1de:	81 e1       	ldi	r24, 0x11	; 17
    c1e0:	9e cd       	rjmp	.-1220   	; 0xbd1e <f_lseek+0xe0>
    c1e2:	80 e0       	ldi	r24, 0x00	; 0
    c1e4:	90 e0       	ldi	r25, 0x00	; 0
    c1e6:	dc 01       	movw	r26, r24
    c1e8:	c1 2c       	mov	r12, r1
    c1ea:	d1 2c       	mov	r13, r1
    c1ec:	76 01       	movw	r14, r12
    c1ee:	b7 cf       	rjmp	.-146    	; 0xc15e <f_lseek+0x520>
    c1f0:	2a 96       	adiw	r28, 0x0a	; 10
    c1f2:	e2 e1       	ldi	r30, 0x12	; 18
    c1f4:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000c1f8 <f_opendir>:
    c1f8:	a4 e0       	ldi	r26, 0x04	; 4
    c1fa:	b0 e0       	ldi	r27, 0x00	; 0
    c1fc:	e2 e0       	ldi	r30, 0x02	; 2
    c1fe:	f1 e6       	ldi	r31, 0x61	; 97
    c200:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    c204:	7c 83       	std	Y+4, r23	; 0x04
    c206:	6b 83       	std	Y+3, r22	; 0x03
    c208:	00 97       	sbiw	r24, 0x00	; 0
    c20a:	09 f4       	brne	.+2      	; 0xc20e <f_opendir+0x16>
    c20c:	4a c0       	rjmp	.+148    	; 0xc2a2 <f_opendir+0xaa>
    c20e:	8c 01       	movw	r16, r24
    c210:	40 e0       	ldi	r20, 0x00	; 0
    c212:	be 01       	movw	r22, r28
    c214:	6f 5f       	subi	r22, 0xFF	; 255
    c216:	7f 4f       	sbci	r23, 0xFF	; 255
    c218:	ce 01       	movw	r24, r28
    c21a:	03 96       	adiw	r24, 0x03	; 3
    c21c:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    c220:	7c 01       	movw	r14, r24
    c222:	89 2b       	or	r24, r25
    c224:	c9 f5       	brne	.+114    	; 0xc298 <f_opendir+0xa0>
    c226:	89 81       	ldd	r24, Y+1	; 0x01
    c228:	9a 81       	ldd	r25, Y+2	; 0x02
    c22a:	f8 01       	movw	r30, r16
    c22c:	91 83       	std	Z+1, r25	; 0x01
    c22e:	80 83       	st	Z, r24
    c230:	80 e0       	ldi	r24, 0x00	; 0
    c232:	92 e0       	ldi	r25, 0x02	; 2
    c234:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    c238:	6c 01       	movw	r12, r24
    c23a:	00 97       	sbiw	r24, 0x00	; 0
    c23c:	a1 f1       	breq	.+104    	; 0xc2a6 <f_opendir+0xae>
    c23e:	e9 81       	ldd	r30, Y+1	; 0x01
    c240:	fa 81       	ldd	r31, Y+2	; 0x02
    c242:	94 87       	std	Z+12, r25	; 0x0c
    c244:	83 87       	std	Z+11, r24	; 0x0b
    c246:	6b 81       	ldd	r22, Y+3	; 0x03
    c248:	7c 81       	ldd	r23, Y+4	; 0x04
    c24a:	c8 01       	movw	r24, r16
    c24c:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    c250:	7c 01       	movw	r14, r24
    c252:	89 2b       	or	r24, r25
    c254:	b9 f4       	brne	.+46     	; 0xc284 <f_opendir+0x8c>
    c256:	f8 01       	movw	r30, r16
    c258:	87 a1       	ldd	r24, Z+39	; 0x27
    c25a:	87 fd       	sbrc	r24, 7
    c25c:	29 c0       	rjmp	.+82     	; 0xc2b0 <f_opendir+0xb8>
    c25e:	84 81       	ldd	r24, Z+4	; 0x04
    c260:	84 ff       	sbrs	r24, 4
    c262:	0d c0       	rjmp	.+26     	; 0xc27e <f_opendir+0x86>
    c264:	62 8d       	ldd	r22, Z+26	; 0x1a
    c266:	73 8d       	ldd	r23, Z+27	; 0x1b
    c268:	e9 81       	ldd	r30, Y+1	; 0x01
    c26a:	fa 81       	ldd	r31, Y+2	; 0x02
    c26c:	80 81       	ld	r24, Z
    c26e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    c272:	f8 01       	movw	r30, r16
    c274:	66 83       	std	Z+6, r22	; 0x06
    c276:	77 83       	std	Z+7, r23	; 0x07
    c278:	80 87       	std	Z+8, r24	; 0x08
    c27a:	91 87       	std	Z+9, r25	; 0x09
    c27c:	19 c0       	rjmp	.+50     	; 0xc2b0 <f_opendir+0xb8>
    c27e:	95 e0       	ldi	r25, 0x05	; 5
    c280:	e9 2e       	mov	r14, r25
    c282:	f1 2c       	mov	r15, r1
    c284:	c6 01       	movw	r24, r12
    c286:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    c28a:	f4 e0       	ldi	r31, 0x04	; 4
    c28c:	ef 16       	cp	r14, r31
    c28e:	f1 04       	cpc	r15, r1
    c290:	f1 f0       	breq	.+60     	; 0xc2ce <f_opendir+0xd6>
    c292:	e1 14       	cp	r14, r1
    c294:	f1 04       	cpc	r15, r1
    c296:	49 f0       	breq	.+18     	; 0xc2aa <f_opendir+0xb2>
    c298:	f8 01       	movw	r30, r16
    c29a:	11 82       	std	Z+1, r1	; 0x01
    c29c:	10 82       	st	Z, r1
    c29e:	c7 01       	movw	r24, r14
    c2a0:	1a c0       	rjmp	.+52     	; 0xc2d6 <f_opendir+0xde>
    c2a2:	89 e0       	ldi	r24, 0x09	; 9
    c2a4:	03 c0       	rjmp	.+6      	; 0xc2ac <f_opendir+0xb4>
    c2a6:	81 e1       	ldi	r24, 0x11	; 17
    c2a8:	01 c0       	rjmp	.+2      	; 0xc2ac <f_opendir+0xb4>
    c2aa:	80 e0       	ldi	r24, 0x00	; 0
    c2ac:	90 e0       	ldi	r25, 0x00	; 0
    c2ae:	13 c0       	rjmp	.+38     	; 0xc2d6 <f_opendir+0xde>
    c2b0:	e9 81       	ldd	r30, Y+1	; 0x01
    c2b2:	fa 81       	ldd	r31, Y+2	; 0x02
    c2b4:	85 81       	ldd	r24, Z+5	; 0x05
    c2b6:	96 81       	ldd	r25, Z+6	; 0x06
    c2b8:	f8 01       	movw	r30, r16
    c2ba:	93 83       	std	Z+3, r25	; 0x03
    c2bc:	82 83       	std	Z+2, r24	; 0x02
    c2be:	40 e0       	ldi	r20, 0x00	; 0
    c2c0:	50 e0       	ldi	r21, 0x00	; 0
    c2c2:	ba 01       	movw	r22, r20
    c2c4:	c8 01       	movw	r24, r16
    c2c6:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    c2ca:	7c 01       	movw	r14, r24
    c2cc:	db cf       	rjmp	.-74     	; 0xc284 <f_opendir+0x8c>
    c2ce:	85 e0       	ldi	r24, 0x05	; 5
    c2d0:	e8 2e       	mov	r14, r24
    c2d2:	f1 2c       	mov	r15, r1
    c2d4:	e1 cf       	rjmp	.-62     	; 0xc298 <f_opendir+0xa0>
    c2d6:	24 96       	adiw	r28, 0x04	; 4
    c2d8:	e8 e0       	ldi	r30, 0x08	; 8
    c2da:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000c2de <f_closedir>:
    c2de:	a2 e0       	ldi	r26, 0x02	; 2
    c2e0:	b0 e0       	ldi	r27, 0x00	; 0
    c2e2:	e5 e7       	ldi	r30, 0x75	; 117
    c2e4:	f1 e6       	ldi	r31, 0x61	; 97
    c2e6:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    c2ea:	8c 01       	movw	r16, r24
    c2ec:	be 01       	movw	r22, r28
    c2ee:	6f 5f       	subi	r22, 0xFF	; 255
    c2f0:	7f 4f       	sbci	r23, 0xFF	; 255
    c2f2:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    c2f6:	00 97       	sbiw	r24, 0x00	; 0
    c2f8:	19 f4       	brne	.+6      	; 0xc300 <f_closedir+0x22>
    c2fa:	f8 01       	movw	r30, r16
    c2fc:	11 82       	std	Z+1, r1	; 0x01
    c2fe:	10 82       	st	Z, r1
    c300:	22 96       	adiw	r28, 0x02	; 2
    c302:	e4 e0       	ldi	r30, 0x04	; 4
    c304:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000c308 <f_readdir>:
    c308:	a2 e0       	ldi	r26, 0x02	; 2
    c30a:	b0 e0       	ldi	r27, 0x00	; 0
    c30c:	ea e8       	ldi	r30, 0x8A	; 138
    c30e:	f1 e6       	ldi	r31, 0x61	; 97
    c310:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    c314:	7c 01       	movw	r14, r24
    c316:	5b 01       	movw	r10, r22
    c318:	be 01       	movw	r22, r28
    c31a:	6f 5f       	subi	r22, 0xFF	; 255
    c31c:	7f 4f       	sbci	r23, 0xFF	; 255
    c31e:	0e 94 94 46 	call	0x8d28	; 0x8d28 <validate>
    c322:	00 97       	sbiw	r24, 0x00	; 0
    c324:	99 f5       	brne	.+102    	; 0xc38c <f_readdir+0x84>
    c326:	a1 14       	cp	r10, r1
    c328:	b1 04       	cpc	r11, r1
    c32a:	39 f4       	brne	.+14     	; 0xc33a <f_readdir+0x32>
    c32c:	40 e0       	ldi	r20, 0x00	; 0
    c32e:	50 e0       	ldi	r21, 0x00	; 0
    c330:	ba 01       	movw	r22, r20
    c332:	c7 01       	movw	r24, r14
    c334:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    c338:	29 c0       	rjmp	.+82     	; 0xc38c <f_readdir+0x84>
    c33a:	80 e0       	ldi	r24, 0x00	; 0
    c33c:	92 e0       	ldi	r25, 0x02	; 2
    c33e:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    c342:	6c 01       	movw	r12, r24
    c344:	00 97       	sbiw	r24, 0x00	; 0
    c346:	01 f1       	breq	.+64     	; 0xc388 <f_readdir+0x80>
    c348:	e9 81       	ldd	r30, Y+1	; 0x01
    c34a:	fa 81       	ldd	r31, Y+2	; 0x02
    c34c:	94 87       	std	Z+12, r25	; 0x0c
    c34e:	83 87       	std	Z+11, r24	; 0x0b
    c350:	60 e0       	ldi	r22, 0x00	; 0
    c352:	70 e0       	ldi	r23, 0x00	; 0
    c354:	c7 01       	movw	r24, r14
    c356:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <dir_read>
    c35a:	8c 01       	movw	r16, r24
    c35c:	8b 7f       	andi	r24, 0xFB	; 251
    c35e:	89 2b       	or	r24, r25
    c360:	71 f4       	brne	.+28     	; 0xc37e <f_readdir+0x76>
    c362:	b5 01       	movw	r22, r10
    c364:	c7 01       	movw	r24, r14
    c366:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <get_fileinfo>
    c36a:	60 e0       	ldi	r22, 0x00	; 0
    c36c:	70 e0       	ldi	r23, 0x00	; 0
    c36e:	c7 01       	movw	r24, r14
    c370:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <dir_next>
    c374:	8c 01       	movw	r16, r24
    c376:	04 97       	sbiw	r24, 0x04	; 4
    c378:	11 f4       	brne	.+4      	; 0xc37e <f_readdir+0x76>
    c37a:	00 e0       	ldi	r16, 0x00	; 0
    c37c:	10 e0       	ldi	r17, 0x00	; 0
    c37e:	c6 01       	movw	r24, r12
    c380:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    c384:	c8 01       	movw	r24, r16
    c386:	02 c0       	rjmp	.+4      	; 0xc38c <f_readdir+0x84>
    c388:	81 e1       	ldi	r24, 0x11	; 17
    c38a:	90 e0       	ldi	r25, 0x00	; 0
    c38c:	22 96       	adiw	r28, 0x02	; 2
    c38e:	ea e0       	ldi	r30, 0x0A	; 10
    c390:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0000c394 <f_stat>:
    c394:	a0 e3       	ldi	r26, 0x30	; 48
    c396:	b0 e0       	ldi	r27, 0x00	; 0
    c398:	e0 ed       	ldi	r30, 0xD0	; 208
    c39a:	f1 e6       	ldi	r31, 0x61	; 97
    c39c:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    c3a0:	98 ab       	std	Y+48, r25	; 0x30
    c3a2:	8f a7       	std	Y+47, r24	; 0x2f
    c3a4:	6b 01       	movw	r12, r22
    c3a6:	40 e0       	ldi	r20, 0x00	; 0
    c3a8:	be 01       	movw	r22, r28
    c3aa:	6f 5f       	subi	r22, 0xFF	; 255
    c3ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ae:	ce 01       	movw	r24, r28
    c3b0:	8f 96       	adiw	r24, 0x2f	; 47
    c3b2:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    c3b6:	00 97       	sbiw	r24, 0x00	; 0
    c3b8:	49 f5       	brne	.+82     	; 0xc40c <f_stat+0x78>
    c3ba:	80 e0       	ldi	r24, 0x00	; 0
    c3bc:	92 e0       	ldi	r25, 0x02	; 2
    c3be:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    c3c2:	7c 01       	movw	r14, r24
    c3c4:	00 97       	sbiw	r24, 0x00	; 0
    c3c6:	01 f1       	breq	.+64     	; 0xc408 <f_stat+0x74>
    c3c8:	e9 81       	ldd	r30, Y+1	; 0x01
    c3ca:	fa 81       	ldd	r31, Y+2	; 0x02
    c3cc:	94 87       	std	Z+12, r25	; 0x0c
    c3ce:	83 87       	std	Z+11, r24	; 0x0b
    c3d0:	6f a5       	ldd	r22, Y+47	; 0x2f
    c3d2:	78 a9       	ldd	r23, Y+48	; 0x30
    c3d4:	ce 01       	movw	r24, r28
    c3d6:	01 96       	adiw	r24, 0x01	; 1
    c3d8:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    c3dc:	8c 01       	movw	r16, r24
    c3de:	89 2b       	or	r24, r25
    c3e0:	71 f4       	brne	.+28     	; 0xc3fe <f_stat+0x6a>
    c3e2:	88 a5       	ldd	r24, Y+40	; 0x28
    c3e4:	87 fd       	sbrc	r24, 7
    c3e6:	09 c0       	rjmp	.+18     	; 0xc3fa <f_stat+0x66>
    c3e8:	c1 14       	cp	r12, r1
    c3ea:	d1 04       	cpc	r13, r1
    c3ec:	41 f0       	breq	.+16     	; 0xc3fe <f_stat+0x6a>
    c3ee:	b6 01       	movw	r22, r12
    c3f0:	ce 01       	movw	r24, r28
    c3f2:	01 96       	adiw	r24, 0x01	; 1
    c3f4:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <get_fileinfo>
    c3f8:	02 c0       	rjmp	.+4      	; 0xc3fe <f_stat+0x6a>
    c3fa:	06 e0       	ldi	r16, 0x06	; 6
    c3fc:	10 e0       	ldi	r17, 0x00	; 0
    c3fe:	c7 01       	movw	r24, r14
    c400:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    c404:	c8 01       	movw	r24, r16
    c406:	02 c0       	rjmp	.+4      	; 0xc40c <f_stat+0x78>
    c408:	81 e1       	ldi	r24, 0x11	; 17
    c40a:	90 e0       	ldi	r25, 0x00	; 0
    c40c:	e0 96       	adiw	r28, 0x30	; 48
    c40e:	e8 e0       	ldi	r30, 0x08	; 8
    c410:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000c414 <f_getfree>:
    c414:	ac e0       	ldi	r26, 0x0C	; 12
    c416:	b0 e0       	ldi	r27, 0x00	; 0
    c418:	e0 e1       	ldi	r30, 0x10	; 16
    c41a:	f2 e6       	ldi	r31, 0x62	; 98
    c41c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    c420:	9c 83       	std	Y+4, r25	; 0x04
    c422:	8b 83       	std	Y+3, r24	; 0x03
    c424:	78 87       	std	Y+8, r23	; 0x08
    c426:	6f 83       	std	Y+7, r22	; 0x07
    c428:	7a 01       	movw	r14, r20
    c42a:	40 e0       	ldi	r20, 0x00	; 0
    c42c:	be 01       	movw	r22, r28
    c42e:	6f 5f       	subi	r22, 0xFF	; 255
    c430:	7f 4f       	sbci	r23, 0xFF	; 255
    c432:	ce 01       	movw	r24, r28
    c434:	03 96       	adiw	r24, 0x03	; 3
    c436:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    c43a:	9e 83       	std	Y+6, r25	; 0x06
    c43c:	8d 83       	std	Y+5, r24	; 0x05
    c43e:	89 2b       	or	r24, r25
    c440:	09 f0       	breq	.+2      	; 0xc444 <f_getfree+0x30>
    c442:	cf c0       	rjmp	.+414    	; 0xc5e2 <f_getfree+0x1ce>
    c444:	69 80       	ldd	r6, Y+1	; 0x01
    c446:	7a 80       	ldd	r7, Y+2	; 0x02
    c448:	d7 01       	movw	r26, r14
    c44a:	6d 92       	st	X+, r6
    c44c:	7c 92       	st	X, r7
    c44e:	f3 01       	movw	r30, r6
    c450:	81 89       	ldd	r24, Z+17	; 0x11
    c452:	92 89       	ldd	r25, Z+18	; 0x12
    c454:	a3 89       	ldd	r26, Z+19	; 0x13
    c456:	b4 89       	ldd	r27, Z+20	; 0x14
    c458:	81 8c       	ldd	r8, Z+25	; 0x19
    c45a:	92 8c       	ldd	r9, Z+26	; 0x1a
    c45c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c45e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c460:	b5 01       	movw	r22, r10
    c462:	a4 01       	movw	r20, r8
    c464:	42 50       	subi	r20, 0x02	; 2
    c466:	51 09       	sbc	r21, r1
    c468:	61 09       	sbc	r22, r1
    c46a:	71 09       	sbc	r23, r1
    c46c:	48 17       	cp	r20, r24
    c46e:	59 07       	cpc	r21, r25
    c470:	6a 07       	cpc	r22, r26
    c472:	7b 07       	cpc	r23, r27
    c474:	38 f0       	brcs	.+14     	; 0xc484 <f_getfree+0x70>
    c476:	ef 81       	ldd	r30, Y+7	; 0x07
    c478:	f8 85       	ldd	r31, Y+8	; 0x08
    c47a:	80 83       	st	Z, r24
    c47c:	91 83       	std	Z+1, r25	; 0x01
    c47e:	a2 83       	std	Z+2, r26	; 0x02
    c480:	b3 83       	std	Z+3, r27	; 0x03
    c482:	af c0       	rjmp	.+350    	; 0xc5e2 <f_getfree+0x1ce>
    c484:	80 81       	ld	r24, Z
    c486:	81 30       	cpi	r24, 0x01	; 1
    c488:	a1 f5       	brne	.+104    	; 0xc4f2 <f_getfree+0xde>
    c48a:	82 e0       	ldi	r24, 0x02	; 2
    c48c:	88 2e       	mov	r8, r24
    c48e:	91 2c       	mov	r9, r1
    c490:	a1 2c       	mov	r10, r1
    c492:	b1 2c       	mov	r11, r1
    c494:	c1 2c       	mov	r12, r1
    c496:	d1 2c       	mov	r13, r1
    c498:	76 01       	movw	r14, r12
    c49a:	b5 01       	movw	r22, r10
    c49c:	a4 01       	movw	r20, r8
    c49e:	c3 01       	movw	r24, r6
    c4a0:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <get_fat.isra.7>
    c4a4:	6f 3f       	cpi	r22, 0xFF	; 255
    c4a6:	bf ef       	ldi	r27, 0xFF	; 255
    c4a8:	7b 07       	cpc	r23, r27
    c4aa:	8b 07       	cpc	r24, r27
    c4ac:	9b 07       	cpc	r25, r27
    c4ae:	09 f4       	brne	.+2      	; 0xc4b2 <f_getfree+0x9e>
    c4b0:	7c c0       	rjmp	.+248    	; 0xc5aa <f_getfree+0x196>
    c4b2:	61 30       	cpi	r22, 0x01	; 1
    c4b4:	71 05       	cpc	r23, r1
    c4b6:	81 05       	cpc	r24, r1
    c4b8:	91 05       	cpc	r25, r1
    c4ba:	09 f4       	brne	.+2      	; 0xc4be <f_getfree+0xaa>
    c4bc:	7b c0       	rjmp	.+246    	; 0xc5b4 <f_getfree+0x1a0>
    c4be:	67 2b       	or	r22, r23
    c4c0:	68 2b       	or	r22, r24
    c4c2:	69 2b       	or	r22, r25
    c4c4:	29 f4       	brne	.+10     	; 0xc4d0 <f_getfree+0xbc>
    c4c6:	ef ef       	ldi	r30, 0xFF	; 255
    c4c8:	ce 1a       	sub	r12, r30
    c4ca:	de 0a       	sbc	r13, r30
    c4cc:	ee 0a       	sbc	r14, r30
    c4ce:	fe 0a       	sbc	r15, r30
    c4d0:	ff ef       	ldi	r31, 0xFF	; 255
    c4d2:	8f 1a       	sub	r8, r31
    c4d4:	9f 0a       	sbc	r9, r31
    c4d6:	af 0a       	sbc	r10, r31
    c4d8:	bf 0a       	sbc	r11, r31
    c4da:	e9 81       	ldd	r30, Y+1	; 0x01
    c4dc:	fa 81       	ldd	r31, Y+2	; 0x02
    c4de:	81 8d       	ldd	r24, Z+25	; 0x19
    c4e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    c4e2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c4e4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c4e6:	88 16       	cp	r8, r24
    c4e8:	99 06       	cpc	r9, r25
    c4ea:	aa 06       	cpc	r10, r26
    c4ec:	bb 06       	cpc	r11, r27
    c4ee:	a8 f2       	brcs	.-86     	; 0xc49a <f_getfree+0x86>
    c4f0:	68 c0       	rjmp	.+208    	; 0xc5c2 <f_getfree+0x1ae>
    c4f2:	45 a0       	ldd	r4, Z+37	; 0x25
    c4f4:	56 a0       	ldd	r5, Z+38	; 0x26
    c4f6:	67 a0       	ldd	r6, Z+39	; 0x27
    c4f8:	70 a4       	ldd	r7, Z+40	; 0x28
    c4fa:	21 2c       	mov	r2, r1
    c4fc:	31 2c       	mov	r3, r1
    c4fe:	00 e0       	ldi	r16, 0x00	; 0
    c500:	10 e0       	ldi	r17, 0x00	; 0
    c502:	c1 2c       	mov	r12, r1
    c504:	d1 2c       	mov	r13, r1
    c506:	76 01       	movw	r14, r12
    c508:	01 15       	cp	r16, r1
    c50a:	11 05       	cpc	r17, r1
    c50c:	e9 f4       	brne	.+58     	; 0xc548 <f_getfree+0x134>
    c50e:	d3 01       	movw	r26, r6
    c510:	c2 01       	movw	r24, r4
    c512:	01 96       	adiw	r24, 0x01	; 1
    c514:	a1 1d       	adc	r26, r1
    c516:	b1 1d       	adc	r27, r1
    c518:	89 87       	std	Y+9, r24	; 0x09
    c51a:	9a 87       	std	Y+10, r25	; 0x0a
    c51c:	ab 87       	std	Y+11, r26	; 0x0b
    c51e:	bc 87       	std	Y+12, r27	; 0x0c
    c520:	b3 01       	movw	r22, r6
    c522:	a2 01       	movw	r20, r4
    c524:	89 81       	ldd	r24, Y+1	; 0x01
    c526:	9a 81       	ldd	r25, Y+2	; 0x02
    c528:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    c52c:	00 97       	sbiw	r24, 0x00	; 0
    c52e:	09 f0       	breq	.+2      	; 0xc532 <f_getfree+0x11e>
    c530:	46 c0       	rjmp	.+140    	; 0xc5be <f_getfree+0x1aa>
    c532:	29 80       	ldd	r2, Y+1	; 0x01
    c534:	3a 80       	ldd	r3, Y+2	; 0x02
    c536:	95 e3       	ldi	r25, 0x35	; 53
    c538:	29 0e       	add	r2, r25
    c53a:	31 1c       	adc	r3, r1
    c53c:	49 84       	ldd	r4, Y+9	; 0x09
    c53e:	5a 84       	ldd	r5, Y+10	; 0x0a
    c540:	6b 84       	ldd	r6, Y+11	; 0x0b
    c542:	7c 84       	ldd	r7, Y+12	; 0x0c
    c544:	00 e0       	ldi	r16, 0x00	; 0
    c546:	12 e0       	ldi	r17, 0x02	; 2
    c548:	e9 81       	ldd	r30, Y+1	; 0x01
    c54a:	fa 81       	ldd	r31, Y+2	; 0x02
    c54c:	80 81       	ld	r24, Z
    c54e:	82 30       	cpi	r24, 0x02	; 2
    c550:	81 f4       	brne	.+32     	; 0xc572 <f_getfree+0x15e>
    c552:	d1 01       	movw	r26, r2
    c554:	8d 91       	ld	r24, X+
    c556:	9c 91       	ld	r25, X
    c558:	89 2b       	or	r24, r25
    c55a:	29 f4       	brne	.+10     	; 0xc566 <f_getfree+0x152>
    c55c:	bf ef       	ldi	r27, 0xFF	; 255
    c55e:	cb 1a       	sub	r12, r27
    c560:	db 0a       	sbc	r13, r27
    c562:	eb 0a       	sbc	r14, r27
    c564:	fb 0a       	sbc	r15, r27
    c566:	e2 e0       	ldi	r30, 0x02	; 2
    c568:	2e 0e       	add	r2, r30
    c56a:	31 1c       	adc	r3, r1
    c56c:	02 50       	subi	r16, 0x02	; 2
    c56e:	11 09       	sbc	r17, r1
    c570:	14 c0       	rjmp	.+40     	; 0xc59a <f_getfree+0x186>
    c572:	c1 01       	movw	r24, r2
    c574:	0e 94 dd 45 	call	0x8bba	; 0x8bba <ld_dword>
    c578:	dc 01       	movw	r26, r24
    c57a:	cb 01       	movw	r24, r22
    c57c:	bf 70       	andi	r27, 0x0F	; 15
    c57e:	89 2b       	or	r24, r25
    c580:	8a 2b       	or	r24, r26
    c582:	8b 2b       	or	r24, r27
    c584:	29 f4       	brne	.+10     	; 0xc590 <f_getfree+0x17c>
    c586:	ff ef       	ldi	r31, 0xFF	; 255
    c588:	cf 1a       	sub	r12, r31
    c58a:	df 0a       	sbc	r13, r31
    c58c:	ef 0a       	sbc	r14, r31
    c58e:	ff 0a       	sbc	r15, r31
    c590:	24 e0       	ldi	r18, 0x04	; 4
    c592:	22 0e       	add	r2, r18
    c594:	31 1c       	adc	r3, r1
    c596:	04 50       	subi	r16, 0x04	; 4
    c598:	11 09       	sbc	r17, r1
    c59a:	81 e0       	ldi	r24, 0x01	; 1
    c59c:	88 1a       	sub	r8, r24
    c59e:	91 08       	sbc	r9, r1
    c5a0:	a1 08       	sbc	r10, r1
    c5a2:	b1 08       	sbc	r11, r1
    c5a4:	09 f0       	breq	.+2      	; 0xc5a8 <f_getfree+0x194>
    c5a6:	b0 cf       	rjmp	.-160    	; 0xc508 <f_getfree+0xf4>
    c5a8:	0c c0       	rjmp	.+24     	; 0xc5c2 <f_getfree+0x1ae>
    c5aa:	a1 e0       	ldi	r26, 0x01	; 1
    c5ac:	b0 e0       	ldi	r27, 0x00	; 0
    c5ae:	be 83       	std	Y+6, r27	; 0x06
    c5b0:	ad 83       	std	Y+5, r26	; 0x05
    c5b2:	07 c0       	rjmp	.+14     	; 0xc5c2 <f_getfree+0x1ae>
    c5b4:	e2 e0       	ldi	r30, 0x02	; 2
    c5b6:	f0 e0       	ldi	r31, 0x00	; 0
    c5b8:	fe 83       	std	Y+6, r31	; 0x06
    c5ba:	ed 83       	std	Y+5, r30	; 0x05
    c5bc:	02 c0       	rjmp	.+4      	; 0xc5c2 <f_getfree+0x1ae>
    c5be:	9e 83       	std	Y+6, r25	; 0x06
    c5c0:	8d 83       	std	Y+5, r24	; 0x05
    c5c2:	af 81       	ldd	r26, Y+7	; 0x07
    c5c4:	b8 85       	ldd	r27, Y+8	; 0x08
    c5c6:	cd 92       	st	X+, r12
    c5c8:	dd 92       	st	X+, r13
    c5ca:	ed 92       	st	X+, r14
    c5cc:	fc 92       	st	X, r15
    c5ce:	13 97       	sbiw	r26, 0x03	; 3
    c5d0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5d2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5d4:	c1 8a       	std	Z+17, r12	; 0x11
    c5d6:	d2 8a       	std	Z+18, r13	; 0x12
    c5d8:	e3 8a       	std	Z+19, r14	; 0x13
    c5da:	f4 8a       	std	Z+20, r15	; 0x14
    c5dc:	84 81       	ldd	r24, Z+4	; 0x04
    c5de:	81 60       	ori	r24, 0x01	; 1
    c5e0:	84 83       	std	Z+4, r24	; 0x04
    c5e2:	8d 81       	ldd	r24, Y+5	; 0x05
    c5e4:	9e 81       	ldd	r25, Y+6	; 0x06
    c5e6:	2c 96       	adiw	r28, 0x0c	; 12
    c5e8:	e2 e1       	ldi	r30, 0x12	; 18
    c5ea:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000c5ee <f_unlink>:
    c5ee:	a0 e6       	ldi	r26, 0x60	; 96
    c5f0:	b0 e0       	ldi	r27, 0x00	; 0
    c5f2:	ed ef       	ldi	r30, 0xFD	; 253
    c5f4:	f2 e6       	ldi	r31, 0x62	; 98
    c5f6:	0c 94 42 e9 	jmp	0x1d284	; 0x1d284 <__prologue_saves__+0xe>
    c5fa:	a1 96       	adiw	r28, 0x21	; 33
    c5fc:	9f af       	std	Y+63, r25	; 0x3f
    c5fe:	8e af       	std	Y+62, r24	; 0x3e
    c600:	a1 97       	sbiw	r28, 0x21	; 33
    c602:	42 e0       	ldi	r20, 0x02	; 2
    c604:	be 01       	movw	r22, r28
    c606:	63 5a       	subi	r22, 0xA3	; 163
    c608:	7f 4f       	sbci	r23, 0xFF	; 255
    c60a:	ce 01       	movw	r24, r28
    c60c:	81 5a       	subi	r24, 0xA1	; 161
    c60e:	9f 4f       	sbci	r25, 0xFF	; 255
    c610:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    c614:	6f 96       	adiw	r28, 0x1f	; 31
    c616:	2e ad       	ldd	r18, Y+62	; 0x3e
    c618:	3f ad       	ldd	r19, Y+63	; 0x3f
    c61a:	6f 97       	sbiw	r28, 0x1f	; 31
    c61c:	38 ab       	std	Y+48, r19	; 0x30
    c61e:	2f a7       	std	Y+47, r18	; 0x2f
    c620:	00 97       	sbiw	r24, 0x00	; 0
    c622:	09 f0       	breq	.+2      	; 0xc626 <f_unlink+0x38>
    c624:	88 c0       	rjmp	.+272    	; 0xc736 <f_unlink+0x148>
    c626:	80 e0       	ldi	r24, 0x00	; 0
    c628:	92 e0       	ldi	r25, 0x02	; 2
    c62a:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    c62e:	5c 01       	movw	r10, r24
    c630:	00 97       	sbiw	r24, 0x00	; 0
    c632:	09 f4       	brne	.+2      	; 0xc636 <f_unlink+0x48>
    c634:	4a c0       	rjmp	.+148    	; 0xc6ca <f_unlink+0xdc>
    c636:	6f 96       	adiw	r28, 0x1f	; 31
    c638:	ee ad       	ldd	r30, Y+62	; 0x3e
    c63a:	ff ad       	ldd	r31, Y+63	; 0x3f
    c63c:	6f 97       	sbiw	r28, 0x1f	; 31
    c63e:	94 87       	std	Z+12, r25	; 0x0c
    c640:	83 87       	std	Z+11, r24	; 0x0b
    c642:	a1 96       	adiw	r28, 0x21	; 33
    c644:	6e ad       	ldd	r22, Y+62	; 0x3e
    c646:	7f ad       	ldd	r23, Y+63	; 0x3f
    c648:	a1 97       	sbiw	r28, 0x21	; 33
    c64a:	ce 01       	movw	r24, r28
    c64c:	8f 96       	adiw	r24, 0x2f	; 47
    c64e:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    c652:	8c 01       	movw	r16, r24
    c654:	89 2b       	or	r24, r25
    c656:	a1 f5       	brne	.+104    	; 0xc6c0 <f_unlink+0xd2>
    c658:	67 96       	adiw	r28, 0x17	; 23
    c65a:	8f ad       	ldd	r24, Y+63	; 0x3f
    c65c:	67 97       	sbiw	r28, 0x17	; 23
    c65e:	85 fd       	sbrc	r24, 5
    c660:	37 c0       	rjmp	.+110    	; 0xc6d0 <f_unlink+0xe2>
    c662:	87 fd       	sbrc	r24, 7
    c664:	35 c0       	rjmp	.+106    	; 0xc6d0 <f_unlink+0xe2>
    c666:	9b a8       	ldd	r9, Y+51	; 0x33
    c668:	90 fc       	sbrc	r9, 0
    c66a:	41 c0       	rjmp	.+130    	; 0xc6ee <f_unlink+0x100>
    c66c:	6f 96       	adiw	r28, 0x1f	; 31
    c66e:	0e ad       	ldd	r16, Y+62	; 0x3e
    c670:	1f ad       	ldd	r17, Y+63	; 0x3f
    c672:	6f 97       	sbiw	r28, 0x1f	; 31
    c674:	2b 96       	adiw	r28, 0x0b	; 11
    c676:	6e ad       	ldd	r22, Y+62	; 0x3e
    c678:	7f ad       	ldd	r23, Y+63	; 0x3f
    c67a:	2b 97       	sbiw	r28, 0x0b	; 11
    c67c:	f8 01       	movw	r30, r16
    c67e:	80 81       	ld	r24, Z
    c680:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    c684:	6b 01       	movw	r12, r22
    c686:	7c 01       	movw	r14, r24
    c688:	94 fe       	sbrs	r9, 4
    c68a:	34 c0       	rjmp	.+104    	; 0xc6f4 <f_unlink+0x106>
    c68c:	f8 01       	movw	r30, r16
    c68e:	85 89       	ldd	r24, Z+21	; 0x15
    c690:	96 89       	ldd	r25, Z+22	; 0x16
    c692:	a7 89       	ldd	r26, Z+23	; 0x17
    c694:	b0 8d       	ldd	r27, Z+24	; 0x18
    c696:	c8 16       	cp	r12, r24
    c698:	d9 06       	cpc	r13, r25
    c69a:	ea 06       	cpc	r14, r26
    c69c:	fb 06       	cpc	r15, r27
    c69e:	39 f1       	breq	.+78     	; 0xc6ee <f_unlink+0x100>
    c6a0:	1a 83       	std	Y+2, r17	; 0x02
    c6a2:	09 83       	std	Y+1, r16	; 0x01
    c6a4:	cf 82       	std	Y+7, r12	; 0x07
    c6a6:	d8 86       	std	Y+8, r13	; 0x08
    c6a8:	e9 86       	std	Y+9, r14	; 0x09
    c6aa:	fa 86       	std	Y+10, r15	; 0x0a
    c6ac:	40 e0       	ldi	r20, 0x00	; 0
    c6ae:	50 e0       	ldi	r21, 0x00	; 0
    c6b0:	ba 01       	movw	r22, r20
    c6b2:	ce 01       	movw	r24, r28
    c6b4:	01 96       	adiw	r24, 0x01	; 1
    c6b6:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    c6ba:	8c 01       	movw	r16, r24
    c6bc:	89 2b       	or	r24, r25
    c6be:	59 f0       	breq	.+22     	; 0xc6d6 <f_unlink+0xe8>
    c6c0:	c5 01       	movw	r24, r10
    c6c2:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    c6c6:	c8 01       	movw	r24, r16
    c6c8:	36 c0       	rjmp	.+108    	; 0xc736 <f_unlink+0x148>
    c6ca:	81 e1       	ldi	r24, 0x11	; 17
    c6cc:	90 e0       	ldi	r25, 0x00	; 0
    c6ce:	33 c0       	rjmp	.+102    	; 0xc736 <f_unlink+0x148>
    c6d0:	06 e0       	ldi	r16, 0x06	; 6
    c6d2:	10 e0       	ldi	r17, 0x00	; 0
    c6d4:	f5 cf       	rjmp	.-22     	; 0xc6c0 <f_unlink+0xd2>
    c6d6:	60 e0       	ldi	r22, 0x00	; 0
    c6d8:	70 e0       	ldi	r23, 0x00	; 0
    c6da:	ce 01       	movw	r24, r28
    c6dc:	01 96       	adiw	r24, 0x01	; 1
    c6de:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <dir_read>
    c6e2:	8c 01       	movw	r16, r24
    c6e4:	00 97       	sbiw	r24, 0x00	; 0
    c6e6:	19 f0       	breq	.+6      	; 0xc6ee <f_unlink+0x100>
    c6e8:	04 97       	sbiw	r24, 0x04	; 4
    c6ea:	21 f0       	breq	.+8      	; 0xc6f4 <f_unlink+0x106>
    c6ec:	e9 cf       	rjmp	.-46     	; 0xc6c0 <f_unlink+0xd2>
    c6ee:	07 e0       	ldi	r16, 0x07	; 7
    c6f0:	10 e0       	ldi	r17, 0x00	; 0
    c6f2:	e6 cf       	rjmp	.-52     	; 0xc6c0 <f_unlink+0xd2>
    c6f4:	ce 01       	movw	r24, r28
    c6f6:	8f 96       	adiw	r24, 0x2f	; 47
    c6f8:	0e 94 b7 51 	call	0xa36e	; 0xa36e <dir_remove>
    c6fc:	8c 01       	movw	r16, r24
    c6fe:	89 2b       	or	r24, r25
    c700:	f9 f6       	brne	.-66     	; 0xc6c0 <f_unlink+0xd2>
    c702:	c1 14       	cp	r12, r1
    c704:	d1 04       	cpc	r13, r1
    c706:	e1 04       	cpc	r14, r1
    c708:	f1 04       	cpc	r15, r1
    c70a:	41 f4       	brne	.+16     	; 0xc71c <f_unlink+0x12e>
    c70c:	6f 96       	adiw	r28, 0x1f	; 31
    c70e:	8e ad       	ldd	r24, Y+62	; 0x3e
    c710:	9f ad       	ldd	r25, Y+63	; 0x3f
    c712:	6f 97       	sbiw	r28, 0x1f	; 31
    c714:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    c718:	8c 01       	movw	r16, r24
    c71a:	d2 cf       	rjmp	.-92     	; 0xc6c0 <f_unlink+0xd2>
    c71c:	00 e0       	ldi	r16, 0x00	; 0
    c71e:	10 e0       	ldi	r17, 0x00	; 0
    c720:	98 01       	movw	r18, r16
    c722:	b7 01       	movw	r22, r14
    c724:	a6 01       	movw	r20, r12
    c726:	ce 01       	movw	r24, r28
    c728:	8f 96       	adiw	r24, 0x2f	; 47
    c72a:	0e 94 1e 4e 	call	0x9c3c	; 0x9c3c <remove_chain>
    c72e:	8c 01       	movw	r16, r24
    c730:	89 2b       	or	r24, r25
    c732:	31 f6       	brne	.-116    	; 0xc6c0 <f_unlink+0xd2>
    c734:	eb cf       	rjmp	.-42     	; 0xc70c <f_unlink+0x11e>
    c736:	c0 5a       	subi	r28, 0xA0	; 160
    c738:	df 4f       	sbci	r29, 0xFF	; 255
    c73a:	eb e0       	ldi	r30, 0x0B	; 11
    c73c:	0c 94 5e e9 	jmp	0x1d2bc	; 0x1d2bc <__epilogue_restores__+0xe>

0000c740 <f_mkdir>:
    c740:	ac e3       	ldi	r26, 0x3C	; 60
    c742:	b0 e0       	ldi	r27, 0x00	; 0
    c744:	e6 ea       	ldi	r30, 0xA6	; 166
    c746:	f3 e6       	ldi	r31, 0x63	; 99
    c748:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    c74c:	9a ab       	std	Y+50, r25	; 0x32
    c74e:	89 ab       	std	Y+49, r24	; 0x31
    c750:	42 e0       	ldi	r20, 0x02	; 2
    c752:	be 01       	movw	r22, r28
    c754:	61 5d       	subi	r22, 0xD1	; 209
    c756:	7f 4f       	sbci	r23, 0xFF	; 255
    c758:	ce 01       	movw	r24, r28
    c75a:	c1 96       	adiw	r24, 0x31	; 49
    c75c:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    c760:	2f a5       	ldd	r18, Y+47	; 0x2f
    c762:	38 a9       	ldd	r19, Y+48	; 0x30
    c764:	3a 83       	std	Y+2, r19	; 0x02
    c766:	29 83       	std	Y+1, r18	; 0x01
    c768:	00 97       	sbiw	r24, 0x00	; 0
    c76a:	09 f0       	breq	.+2      	; 0xc76e <f_mkdir+0x2e>
    c76c:	2c c1       	rjmp	.+600    	; 0xc9c6 <f_mkdir+0x286>
    c76e:	80 e0       	ldi	r24, 0x00	; 0
    c770:	92 e0       	ldi	r25, 0x02	; 2
    c772:	0e 94 82 6c 	call	0xd904	; 0xd904 <ff_memalloc>
    c776:	98 af       	std	Y+56, r25	; 0x38
    c778:	8f ab       	std	Y+55, r24	; 0x37
    c77a:	00 97       	sbiw	r24, 0x00	; 0
    c77c:	d9 f0       	breq	.+54     	; 0xc7b4 <f_mkdir+0x74>
    c77e:	ef a5       	ldd	r30, Y+47	; 0x2f
    c780:	f8 a9       	ldd	r31, Y+48	; 0x30
    c782:	94 87       	std	Z+12, r25	; 0x0c
    c784:	83 87       	std	Z+11, r24	; 0x0b
    c786:	69 a9       	ldd	r22, Y+49	; 0x31
    c788:	7a a9       	ldd	r23, Y+50	; 0x32
    c78a:	ce 01       	movw	r24, r28
    c78c:	01 96       	adiw	r24, 0x01	; 1
    c78e:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    c792:	7c 01       	movw	r14, r24
    c794:	00 97       	sbiw	r24, 0x00	; 0
    c796:	89 f0       	breq	.+34     	; 0xc7ba <f_mkdir+0x7a>
    c798:	04 97       	sbiw	r24, 0x04	; 4
    c79a:	31 f4       	brne	.+12     	; 0xc7a8 <f_mkdir+0x68>
    c79c:	88 a5       	ldd	r24, Y+40	; 0x28
    c79e:	85 ff       	sbrs	r24, 5
    c7a0:	10 c0       	rjmp	.+32     	; 0xc7c2 <f_mkdir+0x82>
    c7a2:	36 e0       	ldi	r19, 0x06	; 6
    c7a4:	e3 2e       	mov	r14, r19
    c7a6:	f1 2c       	mov	r15, r1
    c7a8:	8f a9       	ldd	r24, Y+55	; 0x37
    c7aa:	98 ad       	ldd	r25, Y+56	; 0x38
    c7ac:	0e 94 85 6c 	call	0xd90a	; 0xd90a <ff_memfree>
    c7b0:	c7 01       	movw	r24, r14
    c7b2:	09 c1       	rjmp	.+530    	; 0xc9c6 <f_mkdir+0x286>
    c7b4:	81 e1       	ldi	r24, 0x11	; 17
    c7b6:	90 e0       	ldi	r25, 0x00	; 0
    c7b8:	06 c1       	rjmp	.+524    	; 0xc9c6 <f_mkdir+0x286>
    c7ba:	48 e0       	ldi	r20, 0x08	; 8
    c7bc:	e4 2e       	mov	r14, r20
    c7be:	f1 2c       	mov	r15, r1
    c7c0:	f3 cf       	rjmp	.-26     	; 0xc7a8 <f_mkdir+0x68>
    c7c2:	40 e0       	ldi	r20, 0x00	; 0
    c7c4:	50 e0       	ldi	r21, 0x00	; 0
    c7c6:	ba 01       	movw	r22, r20
    c7c8:	ce 01       	movw	r24, r28
    c7ca:	01 96       	adiw	r24, 0x01	; 1
    c7cc:	0e 94 4d 4d 	call	0x9a9a	; 0x9a9a <create_chain>
    c7d0:	4b 01       	movw	r8, r22
    c7d2:	5c 01       	movw	r10, r24
    c7d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    c7d6:	98 a9       	ldd	r25, Y+48	; 0x30
    c7d8:	dc 01       	movw	r26, r24
    c7da:	19 96       	adiw	r26, 0x09	; 9
    c7dc:	4d 91       	ld	r20, X+
    c7de:	5c 91       	ld	r21, X
    c7e0:	1a 97       	sbiw	r26, 0x0a	; 10
    c7e2:	60 e0       	ldi	r22, 0x00	; 0
    c7e4:	70 e0       	ldi	r23, 0x00	; 0
    c7e6:	29 e0       	ldi	r18, 0x09	; 9
    c7e8:	44 0f       	add	r20, r20
    c7ea:	55 1f       	adc	r21, r21
    c7ec:	66 1f       	adc	r22, r22
    c7ee:	77 1f       	adc	r23, r23
    c7f0:	2a 95       	dec	r18
    c7f2:	d1 f7       	brne	.-12     	; 0xc7e8 <f_mkdir+0xa8>
    c7f4:	4b 87       	std	Y+11, r20	; 0x0b
    c7f6:	5c 87       	std	Y+12, r21	; 0x0c
    c7f8:	6d 87       	std	Y+13, r22	; 0x0d
    c7fa:	7e 87       	std	Y+14, r23	; 0x0e
    c7fc:	81 14       	cp	r8, r1
    c7fe:	91 04       	cpc	r9, r1
    c800:	a1 04       	cpc	r10, r1
    c802:	b1 04       	cpc	r11, r1
    c804:	a9 f0       	breq	.+42     	; 0xc830 <f_mkdir+0xf0>
    c806:	31 e0       	ldi	r19, 0x01	; 1
    c808:	83 16       	cp	r8, r19
    c80a:	91 04       	cpc	r9, r1
    c80c:	a1 04       	cpc	r10, r1
    c80e:	b1 04       	cpc	r11, r1
    c810:	59 f0       	breq	.+22     	; 0xc828 <f_mkdir+0xe8>
    c812:	4f ef       	ldi	r20, 0xFF	; 255
    c814:	84 16       	cp	r8, r20
    c816:	94 06       	cpc	r9, r20
    c818:	a4 06       	cpc	r10, r20
    c81a:	b4 06       	cpc	r11, r20
    c81c:	09 f0       	breq	.+2      	; 0xc820 <f_mkdir+0xe0>
    c81e:	cf c0       	rjmp	.+414    	; 0xc9be <f_mkdir+0x27e>
    c820:	ee 24       	eor	r14, r14
    c822:	e3 94       	inc	r14
    c824:	f1 2c       	mov	r15, r1
    c826:	07 c0       	rjmp	.+14     	; 0xc836 <f_mkdir+0xf6>
    c828:	62 e0       	ldi	r22, 0x02	; 2
    c82a:	e6 2e       	mov	r14, r22
    c82c:	f1 2c       	mov	r15, r1
    c82e:	03 c0       	rjmp	.+6      	; 0xc836 <f_mkdir+0xf6>
    c830:	57 e0       	ldi	r21, 0x07	; 7
    c832:	e5 2e       	mov	r14, r21
    c834:	f1 2c       	mov	r15, r1
    c836:	0e 94 92 73 	call	0xe724	; 0xe724 <get_fattime>
    c83a:	2b 01       	movw	r4, r22
    c83c:	3c 01       	movw	r6, r24
    c83e:	e1 14       	cp	r14, r1
    c840:	f1 04       	cpc	r15, r1
    c842:	09 f0       	breq	.+2      	; 0xc846 <f_mkdir+0x106>
    c844:	8f c0       	rjmp	.+286    	; 0xc964 <f_mkdir+0x224>
    c846:	0f a5       	ldd	r16, Y+47	; 0x2f
    c848:	18 a9       	ldd	r17, Y+48	; 0x30
    c84a:	b5 01       	movw	r22, r10
    c84c:	a4 01       	movw	r20, r8
    c84e:	c8 01       	movw	r24, r16
    c850:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    c854:	6b 01       	movw	r12, r22
    c856:	7c 01       	movw	r14, r24
    c858:	18 01       	movw	r2, r16
    c85a:	55 e3       	ldi	r21, 0x35	; 53
    c85c:	25 0e       	add	r2, r21
    c85e:	31 1c       	adc	r3, r1
    c860:	40 e0       	ldi	r20, 0x00	; 0
    c862:	52 e0       	ldi	r21, 0x02	; 2
    c864:	60 e0       	ldi	r22, 0x00	; 0
    c866:	70 e0       	ldi	r23, 0x00	; 0
    c868:	c1 01       	movw	r24, r2
    c86a:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    c86e:	4b e0       	ldi	r20, 0x0B	; 11
    c870:	50 e0       	ldi	r21, 0x00	; 0
    c872:	60 e2       	ldi	r22, 0x20	; 32
    c874:	70 e0       	ldi	r23, 0x00	; 0
    c876:	c1 01       	movw	r24, r2
    c878:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    c87c:	ee e2       	ldi	r30, 0x2E	; 46
    c87e:	d8 01       	movw	r26, r16
    c880:	d5 96       	adiw	r26, 0x35	; 53
    c882:	ec 93       	st	X, r30
    c884:	f8 01       	movw	r30, r16
    c886:	e0 5c       	subi	r30, 0xC0	; 192
    c888:	ff 4f       	sbci	r31, 0xFF	; 255
    c88a:	80 e1       	ldi	r24, 0x10	; 16
    c88c:	80 83       	st	Z, r24
    c88e:	b3 01       	movw	r22, r6
    c890:	a2 01       	movw	r20, r4
    c892:	c8 01       	movw	r24, r16
    c894:	85 5b       	subi	r24, 0xB5	; 181
    c896:	9f 4f       	sbci	r25, 0xFF	; 255
    c898:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    c89c:	a5 01       	movw	r20, r10
    c89e:	94 01       	movw	r18, r8
    c8a0:	b1 01       	movw	r22, r2
    c8a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    c8a4:	98 a9       	ldd	r25, Y+48	; 0x30
    c8a6:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <st_clust.isra.2>
    c8aa:	98 01       	movw	r18, r16
    c8ac:	2b 5a       	subi	r18, 0xAB	; 171
    c8ae:	3f 4f       	sbci	r19, 0xFF	; 255
    c8b0:	3c ab       	std	Y+52, r19	; 0x34
    c8b2:	2b ab       	std	Y+51, r18	; 0x33
    c8b4:	40 e2       	ldi	r20, 0x20	; 32
    c8b6:	50 e0       	ldi	r21, 0x00	; 0
    c8b8:	b1 01       	movw	r22, r2
    c8ba:	c9 01       	movw	r24, r18
    c8bc:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    c8c0:	f8 01       	movw	r30, r16
    c8c2:	ea 5a       	subi	r30, 0xAA	; 170
    c8c4:	ff 4f       	sbci	r31, 0xFF	; 255
    c8c6:	3e e2       	ldi	r19, 0x2E	; 46
    c8c8:	30 83       	st	Z, r19
    c8ca:	2f 81       	ldd	r18, Y+7	; 0x07
    c8cc:	38 85       	ldd	r19, Y+8	; 0x08
    c8ce:	49 85       	ldd	r20, Y+9	; 0x09
    c8d0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c8d2:	0f a5       	ldd	r16, Y+47	; 0x2f
    c8d4:	18 a9       	ldd	r17, Y+48	; 0x30
    c8d6:	d8 01       	movw	r26, r16
    c8d8:	6c 91       	ld	r22, X
    c8da:	63 30       	cpi	r22, 0x03	; 3
    c8dc:	71 f4       	brne	.+28     	; 0xc8fa <f_mkdir+0x1ba>
    c8de:	99 96       	adiw	r26, 0x29	; 41
    c8e0:	8d 91       	ld	r24, X+
    c8e2:	9d 91       	ld	r25, X+
    c8e4:	0d 90       	ld	r0, X+
    c8e6:	bc 91       	ld	r27, X
    c8e8:	a0 2d       	mov	r26, r0
    c8ea:	28 17       	cp	r18, r24
    c8ec:	39 07       	cpc	r19, r25
    c8ee:	4a 07       	cpc	r20, r26
    c8f0:	5b 07       	cpc	r21, r27
    c8f2:	19 f4       	brne	.+6      	; 0xc8fa <f_mkdir+0x1ba>
    c8f4:	20 e0       	ldi	r18, 0x00	; 0
    c8f6:	30 e0       	ldi	r19, 0x00	; 0
    c8f8:	a9 01       	movw	r20, r18
    c8fa:	6b a9       	ldd	r22, Y+51	; 0x33
    c8fc:	7c a9       	ldd	r23, Y+52	; 0x34
    c8fe:	c8 01       	movw	r24, r16
    c900:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <st_clust.isra.2>
    c904:	ef a5       	ldd	r30, Y+47	; 0x2f
    c906:	f8 a9       	ldd	r31, Y+48	; 0x30
    c908:	01 85       	ldd	r16, Z+9	; 0x09
    c90a:	12 85       	ldd	r17, Z+10	; 0x0a
    c90c:	01 15       	cp	r16, r1
    c90e:	11 05       	cpc	r17, r1
    c910:	99 f1       	breq	.+102    	; 0xc978 <f_mkdir+0x238>
    c912:	8f a5       	ldd	r24, Y+47	; 0x2f
    c914:	98 a9       	ldd	r25, Y+48	; 0x30
    c916:	a7 01       	movw	r20, r14
    c918:	96 01       	movw	r18, r12
    c91a:	2f 5f       	subi	r18, 0xFF	; 255
    c91c:	3f 4f       	sbci	r19, 0xFF	; 255
    c91e:	4f 4f       	sbci	r20, 0xFF	; 255
    c920:	5f 4f       	sbci	r21, 0xFF	; 255
    c922:	2b ab       	std	Y+51, r18	; 0x33
    c924:	3c ab       	std	Y+52, r19	; 0x34
    c926:	4d ab       	std	Y+53, r20	; 0x35
    c928:	5e ab       	std	Y+54, r21	; 0x36
    c92a:	dc 01       	movw	r26, r24
    c92c:	d1 96       	adiw	r26, 0x31	; 49
    c92e:	cd 92       	st	X+, r12
    c930:	dd 92       	st	X+, r13
    c932:	ed 92       	st	X+, r14
    c934:	fc 92       	st	X, r15
    c936:	d4 97       	sbiw	r26, 0x34	; 52
    c938:	e1 e0       	ldi	r30, 0x01	; 1
    c93a:	13 96       	adiw	r26, 0x03	; 3
    c93c:	ec 93       	st	X, r30
    c93e:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <sync_window.part.3>
    c942:	7c 01       	movw	r14, r24
    c944:	89 2b       	or	r24, r25
    c946:	71 f4       	brne	.+28     	; 0xc964 <f_mkdir+0x224>
    c948:	40 e0       	ldi	r20, 0x00	; 0
    c94a:	52 e0       	ldi	r21, 0x02	; 2
    c94c:	60 e0       	ldi	r22, 0x00	; 0
    c94e:	70 e0       	ldi	r23, 0x00	; 0
    c950:	c1 01       	movw	r24, r2
    c952:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    c956:	01 50       	subi	r16, 0x01	; 1
    c958:	11 09       	sbc	r17, r1
    c95a:	cb a8       	ldd	r12, Y+51	; 0x33
    c95c:	dc a8       	ldd	r13, Y+52	; 0x34
    c95e:	ed a8       	ldd	r14, Y+53	; 0x35
    c960:	fe a8       	ldd	r15, Y+54	; 0x36
    c962:	d4 cf       	rjmp	.-88     	; 0xc90c <f_mkdir+0x1cc>
    c964:	00 e0       	ldi	r16, 0x00	; 0
    c966:	10 e0       	ldi	r17, 0x00	; 0
    c968:	98 01       	movw	r18, r16
    c96a:	b5 01       	movw	r22, r10
    c96c:	a4 01       	movw	r20, r8
    c96e:	ce 01       	movw	r24, r28
    c970:	01 96       	adiw	r24, 0x01	; 1
    c972:	0e 94 1e 4e 	call	0x9c3c	; 0x9c3c <remove_chain>
    c976:	18 cf       	rjmp	.-464    	; 0xc7a8 <f_mkdir+0x68>
    c978:	ce 01       	movw	r24, r28
    c97a:	01 96       	adiw	r24, 0x01	; 1
    c97c:	0e 94 16 53 	call	0xa62c	; 0xa62c <dir_register>
    c980:	7c 01       	movw	r14, r24
    c982:	89 2b       	or	r24, r25
    c984:	79 f7       	brne	.-34     	; 0xc964 <f_mkdir+0x224>
    c986:	0b 8d       	ldd	r16, Y+27	; 0x1b
    c988:	1c 8d       	ldd	r17, Y+28	; 0x1c
    c98a:	b3 01       	movw	r22, r6
    c98c:	a2 01       	movw	r20, r4
    c98e:	c8 01       	movw	r24, r16
    c990:	46 96       	adiw	r24, 0x16	; 22
    c992:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    c996:	a5 01       	movw	r20, r10
    c998:	94 01       	movw	r18, r8
    c99a:	b8 01       	movw	r22, r16
    c99c:	8f a5       	ldd	r24, Y+47	; 0x2f
    c99e:	98 a9       	ldd	r25, Y+48	; 0x30
    c9a0:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <st_clust.isra.2>
    c9a4:	80 e1       	ldi	r24, 0x10	; 16
    c9a6:	f8 01       	movw	r30, r16
    c9a8:	83 87       	std	Z+11, r24	; 0x0b
    c9aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    c9ac:	98 a9       	ldd	r25, Y+48	; 0x30
    c9ae:	21 e0       	ldi	r18, 0x01	; 1
    c9b0:	dc 01       	movw	r26, r24
    c9b2:	13 96       	adiw	r26, 0x03	; 3
    c9b4:	2c 93       	st	X, r18
    c9b6:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    c9ba:	7c 01       	movw	r14, r24
    c9bc:	f5 ce       	rjmp	.-534    	; 0xc7a8 <f_mkdir+0x68>
    c9be:	0e 94 3f 47 	call	0x8e7e	; 0x8e7e <sync_window>
    c9c2:	7c 01       	movw	r14, r24
    c9c4:	38 cf       	rjmp	.-400    	; 0xc836 <f_mkdir+0xf6>
    c9c6:	ec 96       	adiw	r28, 0x3c	; 60
    c9c8:	e2 e1       	ldi	r30, 0x12	; 18
    c9ca:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000c9ce <f_rename>:
    c9ce:	aa e7       	ldi	r26, 0x7A	; 122
    c9d0:	b0 e0       	ldi	r27, 0x00	; 0
    c9d2:	ed ee       	ldi	r30, 0xED	; 237
    c9d4:	f4 e6       	ldi	r31, 0x64	; 100
    c9d6:	0c 94 44 e9 	jmp	0x1d288	; 0x1d288 <__prologue_saves__+0x12>
    c9da:	e9 96       	adiw	r28, 0x39	; 57
    c9dc:	9f af       	std	Y+63, r25	; 0x3f
    c9de:	8e af       	std	Y+62, r24	; 0x3e
    c9e0:	e9 97       	sbiw	r28, 0x39	; 57
    c9e2:	eb 96       	adiw	r28, 0x3b	; 59
    c9e4:	7f af       	std	Y+63, r23	; 0x3f
    c9e6:	6e af       	std	Y+62, r22	; 0x3e
    c9e8:	eb 97       	sbiw	r28, 0x3b	; 59
    c9ea:	ce 01       	movw	r24, r28
    c9ec:	87 58       	subi	r24, 0x87	; 135
    c9ee:	9f 4f       	sbci	r25, 0xFF	; 255
    c9f0:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <get_ldnumber>
    c9f4:	42 e0       	ldi	r20, 0x02	; 2
    c9f6:	be 01       	movw	r22, r28
    c9f8:	6b 58       	subi	r22, 0x8B	; 139
    c9fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c9fc:	ce 01       	movw	r24, r28
    c9fe:	89 58       	subi	r24, 0x89	; 137
    ca00:	9f 4f       	sbci	r25, 0xFF	; 255
    ca02:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    ca06:	00 97       	sbiw	r24, 0x00	; 0
    ca08:	09 f0       	breq	.+2      	; 0xca0c <f_rename+0x3e>
    ca0a:	eb c0       	rjmp	.+470    	; 0xcbe2 <f_rename+0x214>
    ca0c:	e7 96       	adiw	r28, 0x37	; 55
    ca0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca10:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca12:	e7 97       	sbiw	r28, 0x37	; 55
    ca14:	98 ab       	std	Y+48, r25	; 0x30
    ca16:	8f a7       	std	Y+47, r24	; 0x2f
    ca18:	80 e0       	ldi	r24, 0x00	; 0
    ca1a:	92 e0       	ldi	r25, 0x02	; 2
    ca1c:	73 d7       	rcall	.+3814   	; 0xd904 <ff_memalloc>
    ca1e:	6c 01       	movw	r12, r24
    ca20:	00 97       	sbiw	r24, 0x00	; 0
    ca22:	09 f4       	brne	.+2      	; 0xca26 <f_rename+0x58>
    ca24:	3f c0       	rjmp	.+126    	; 0xcaa4 <f_rename+0xd6>
    ca26:	e7 96       	adiw	r28, 0x37	; 55
    ca28:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca2c:	e7 97       	sbiw	r28, 0x37	; 55
    ca2e:	94 87       	std	Z+12, r25	; 0x0c
    ca30:	83 87       	std	Z+11, r24	; 0x0b
    ca32:	e9 96       	adiw	r28, 0x39	; 57
    ca34:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca36:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca38:	e9 97       	sbiw	r28, 0x39	; 57
    ca3a:	ce 01       	movw	r24, r28
    ca3c:	8f 96       	adiw	r24, 0x2f	; 47
    ca3e:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    ca42:	8c 01       	movw	r16, r24
    ca44:	89 2b       	or	r24, r25
    ca46:	51 f5       	brne	.+84     	; 0xca9c <f_rename+0xce>
    ca48:	67 96       	adiw	r28, 0x17	; 23
    ca4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca4c:	67 97       	sbiw	r28, 0x17	; 23
    ca4e:	80 7a       	andi	r24, 0xA0	; 160
    ca50:	09 f0       	breq	.+2      	; 0xca54 <f_rename+0x86>
    ca52:	ae c0       	rjmp	.+348    	; 0xcbb0 <f_rename+0x1e2>
    ca54:	2b 96       	adiw	r28, 0x0b	; 11
    ca56:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca58:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca5a:	2b 97       	sbiw	r28, 0x0b	; 11
    ca5c:	65 5f       	subi	r22, 0xF5	; 245
    ca5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca60:	45 e1       	ldi	r20, 0x15	; 21
    ca62:	50 e0       	ldi	r21, 0x00	; 0
    ca64:	ce 01       	movw	r24, r28
    ca66:	83 5a       	subi	r24, 0xA3	; 163
    ca68:	9f 4f       	sbci	r25, 0xFF	; 255
    ca6a:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    ca6e:	4e e2       	ldi	r20, 0x2E	; 46
    ca70:	50 e0       	ldi	r21, 0x00	; 0
    ca72:	be 01       	movw	r22, r28
    ca74:	61 5d       	subi	r22, 0xD1	; 209
    ca76:	7f 4f       	sbci	r23, 0xFF	; 255
    ca78:	ce 01       	movw	r24, r28
    ca7a:	01 96       	adiw	r24, 0x01	; 1
    ca7c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    ca80:	eb 96       	adiw	r28, 0x3b	; 59
    ca82:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca84:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca86:	eb 97       	sbiw	r28, 0x3b	; 59
    ca88:	ce 01       	movw	r24, r28
    ca8a:	01 96       	adiw	r24, 0x01	; 1
    ca8c:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    ca90:	8c 01       	movw	r16, r24
    ca92:	89 2b       	or	r24, r25
    ca94:	51 f0       	breq	.+20     	; 0xcaaa <f_rename+0xdc>
    ca96:	04 30       	cpi	r16, 0x04	; 4
    ca98:	11 05       	cpc	r17, r1
    ca9a:	29 f1       	breq	.+74     	; 0xcae6 <f_rename+0x118>
    ca9c:	c6 01       	movw	r24, r12
    ca9e:	35 d7       	rcall	.+3690   	; 0xd90a <ff_memfree>
    caa0:	c8 01       	movw	r24, r16
    caa2:	9f c0       	rjmp	.+318    	; 0xcbe2 <f_rename+0x214>
    caa4:	81 e1       	ldi	r24, 0x11	; 17
    caa6:	90 e0       	ldi	r25, 0x00	; 0
    caa8:	9c c0       	rjmp	.+312    	; 0xcbe2 <f_rename+0x214>
    caaa:	4f 81       	ldd	r20, Y+7	; 0x07
    caac:	58 85       	ldd	r21, Y+8	; 0x08
    caae:	69 85       	ldd	r22, Y+9	; 0x09
    cab0:	7a 85       	ldd	r23, Y+10	; 0x0a
    cab2:	8d a9       	ldd	r24, Y+53	; 0x35
    cab4:	9e a9       	ldd	r25, Y+54	; 0x36
    cab6:	af a9       	ldd	r26, Y+55	; 0x37
    cab8:	b8 ad       	ldd	r27, Y+56	; 0x38
    caba:	48 17       	cp	r20, r24
    cabc:	59 07       	cpc	r21, r25
    cabe:	6a 07       	cpc	r22, r26
    cac0:	7b 07       	cpc	r23, r27
    cac2:	09 f0       	breq	.+2      	; 0xcac6 <f_rename+0xf8>
    cac4:	88 c0       	rjmp	.+272    	; 0xcbd6 <f_rename+0x208>
    cac6:	4f 85       	ldd	r20, Y+15	; 0x0f
    cac8:	58 89       	ldd	r21, Y+16	; 0x10
    caca:	69 89       	ldd	r22, Y+17	; 0x11
    cacc:	7a 89       	ldd	r23, Y+18	; 0x12
    cace:	21 96       	adiw	r28, 0x01	; 1
    cad0:	8c ad       	ldd	r24, Y+60	; 0x3c
    cad2:	9d ad       	ldd	r25, Y+61	; 0x3d
    cad4:	ae ad       	ldd	r26, Y+62	; 0x3e
    cad6:	bf ad       	ldd	r27, Y+63	; 0x3f
    cad8:	21 97       	sbiw	r28, 0x01	; 1
    cada:	48 17       	cp	r20, r24
    cadc:	59 07       	cpc	r21, r25
    cade:	6a 07       	cpc	r22, r26
    cae0:	7b 07       	cpc	r23, r27
    cae2:	09 f0       	breq	.+2      	; 0xcae6 <f_rename+0x118>
    cae4:	78 c0       	rjmp	.+240    	; 0xcbd6 <f_rename+0x208>
    cae6:	ce 01       	movw	r24, r28
    cae8:	01 96       	adiw	r24, 0x01	; 1
    caea:	0e 94 16 53 	call	0xa62c	; 0xa62c <dir_register>
    caee:	8c 01       	movw	r16, r24
    caf0:	89 2b       	or	r24, r25
    caf2:	a1 f6       	brne	.-88     	; 0xca9c <f_rename+0xce>
    caf4:	eb 8c       	ldd	r14, Y+27	; 0x1b
    caf6:	fc 8c       	ldd	r15, Y+28	; 0x1c
    caf8:	6d e5       	ldi	r22, 0x5D	; 93
    cafa:	70 e0       	ldi	r23, 0x00	; 0
    cafc:	6c 0f       	add	r22, r28
    cafe:	7d 1f       	adc	r23, r29
    cb00:	6e 5f       	subi	r22, 0xFE	; 254
    cb02:	7f 4f       	sbci	r23, 0xFF	; 255
    cb04:	43 e1       	ldi	r20, 0x13	; 19
    cb06:	50 e0       	ldi	r21, 0x00	; 0
    cb08:	c7 01       	movw	r24, r14
    cb0a:	0d 96       	adiw	r24, 0x0d	; 13
    cb0c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>
    cb10:	6e 96       	adiw	r28, 0x1e	; 30
    cb12:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb14:	6e 97       	sbiw	r28, 0x1e	; 30
    cb16:	80 62       	ori	r24, 0x20	; 32
    cb18:	f7 01       	movw	r30, r14
    cb1a:	83 87       	std	Z+11, r24	; 0x0b
    cb1c:	e7 96       	adiw	r28, 0x37	; 55
    cb1e:	0e ad       	ldd	r16, Y+62	; 0x3e
    cb20:	1f ad       	ldd	r17, Y+63	; 0x3f
    cb22:	e7 97       	sbiw	r28, 0x37	; 55
    cb24:	bb 24       	eor	r11, r11
    cb26:	b3 94       	inc	r11
    cb28:	f8 01       	movw	r30, r16
    cb2a:	b3 82       	std	Z+3, r11	; 0x03
    cb2c:	f7 01       	movw	r30, r14
    cb2e:	83 85       	ldd	r24, Z+11	; 0x0b
    cb30:	84 ff       	sbrs	r24, 4
    cb32:	41 c0       	rjmp	.+130    	; 0xcbb6 <f_rename+0x1e8>
    cb34:	4d a9       	ldd	r20, Y+53	; 0x35
    cb36:	5e a9       	ldd	r21, Y+54	; 0x36
    cb38:	6f a9       	ldd	r22, Y+55	; 0x37
    cb3a:	78 ad       	ldd	r23, Y+56	; 0x38
    cb3c:	8f 81       	ldd	r24, Y+7	; 0x07
    cb3e:	98 85       	ldd	r25, Y+8	; 0x08
    cb40:	a9 85       	ldd	r26, Y+9	; 0x09
    cb42:	ba 85       	ldd	r27, Y+10	; 0x0a
    cb44:	48 17       	cp	r20, r24
    cb46:	59 07       	cpc	r21, r25
    cb48:	6a 07       	cpc	r22, r26
    cb4a:	7b 07       	cpc	r23, r27
    cb4c:	a1 f1       	breq	.+104    	; 0xcbb6 <f_rename+0x1e8>
    cb4e:	b7 01       	movw	r22, r14
    cb50:	f8 01       	movw	r30, r16
    cb52:	80 81       	ld	r24, Z
    cb54:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <ld_clust.isra.1>
    cb58:	ab 01       	movw	r20, r22
    cb5a:	bc 01       	movw	r22, r24
    cb5c:	c8 01       	movw	r24, r16
    cb5e:	0e 94 01 46 	call	0x8c02	; 0x8c02 <clust2sect>
    cb62:	ab 01       	movw	r20, r22
    cb64:	bc 01       	movw	r22, r24
    cb66:	41 15       	cp	r20, r1
    cb68:	51 05       	cpc	r21, r1
    cb6a:	61 05       	cpc	r22, r1
    cb6c:	71 05       	cpc	r23, r1
    cb6e:	b1 f1       	breq	.+108    	; 0xcbdc <f_rename+0x20e>
    cb70:	c8 01       	movw	r24, r16
    cb72:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    cb76:	8c 01       	movw	r16, r24
    cb78:	89 2b       	or	r24, r25
    cb7a:	09 f0       	breq	.+2      	; 0xcb7e <f_rename+0x1b0>
    cb7c:	8f cf       	rjmp	.-226    	; 0xca9c <f_rename+0xce>
    cb7e:	e7 96       	adiw	r28, 0x37	; 55
    cb80:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb82:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb84:	e7 97       	sbiw	r28, 0x37	; 55
    cb86:	fc 01       	movw	r30, r24
    cb88:	ea 5a       	subi	r30, 0xAA	; 170
    cb8a:	ff 4f       	sbci	r31, 0xFF	; 255
    cb8c:	20 81       	ld	r18, Z
    cb8e:	2e 32       	cpi	r18, 0x2E	; 46
    cb90:	91 f4       	brne	.+36     	; 0xcbb6 <f_rename+0x1e8>
    cb92:	2f 81       	ldd	r18, Y+7	; 0x07
    cb94:	38 85       	ldd	r19, Y+8	; 0x08
    cb96:	49 85       	ldd	r20, Y+9	; 0x09
    cb98:	5a 85       	ldd	r21, Y+10	; 0x0a
    cb9a:	bc 01       	movw	r22, r24
    cb9c:	6b 5a       	subi	r22, 0xAB	; 171
    cb9e:	7f 4f       	sbci	r23, 0xFF	; 255
    cba0:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <st_clust.isra.2>
    cba4:	e7 96       	adiw	r28, 0x37	; 55
    cba6:	ee ad       	ldd	r30, Y+62	; 0x3e
    cba8:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbaa:	e7 97       	sbiw	r28, 0x37	; 55
    cbac:	b3 82       	std	Z+3, r11	; 0x03
    cbae:	03 c0       	rjmp	.+6      	; 0xcbb6 <f_rename+0x1e8>
    cbb0:	06 e0       	ldi	r16, 0x06	; 6
    cbb2:	10 e0       	ldi	r17, 0x00	; 0
    cbb4:	73 cf       	rjmp	.-282    	; 0xca9c <f_rename+0xce>
    cbb6:	ce 01       	movw	r24, r28
    cbb8:	8f 96       	adiw	r24, 0x2f	; 47
    cbba:	0e 94 b7 51 	call	0xa36e	; 0xa36e <dir_remove>
    cbbe:	8c 01       	movw	r16, r24
    cbc0:	89 2b       	or	r24, r25
    cbc2:	09 f0       	breq	.+2      	; 0xcbc6 <f_rename+0x1f8>
    cbc4:	6b cf       	rjmp	.-298    	; 0xca9c <f_rename+0xce>
    cbc6:	e7 96       	adiw	r28, 0x37	; 55
    cbc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbca:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbcc:	e7 97       	sbiw	r28, 0x37	; 55
    cbce:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    cbd2:	8c 01       	movw	r16, r24
    cbd4:	63 cf       	rjmp	.-314    	; 0xca9c <f_rename+0xce>
    cbd6:	08 e0       	ldi	r16, 0x08	; 8
    cbd8:	10 e0       	ldi	r17, 0x00	; 0
    cbda:	60 cf       	rjmp	.-320    	; 0xca9c <f_rename+0xce>
    cbdc:	02 e0       	ldi	r16, 0x02	; 2
    cbde:	10 e0       	ldi	r17, 0x00	; 0
    cbe0:	5d cf       	rjmp	.-326    	; 0xca9c <f_rename+0xce>
    cbe2:	c6 58       	subi	r28, 0x86	; 134
    cbe4:	df 4f       	sbci	r29, 0xFF	; 255
    cbe6:	e9 e0       	ldi	r30, 0x09	; 9
    cbe8:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__epilogue_restores__+0x12>

0000cbec <f_chmod>:
    cbec:	a2 e3       	ldi	r26, 0x32	; 50
    cbee:	b0 e0       	ldi	r27, 0x00	; 0
    cbf0:	ec ef       	ldi	r30, 0xFC	; 252
    cbf2:	f5 e6       	ldi	r31, 0x65	; 101
    cbf4:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    cbf8:	9a ab       	std	Y+50, r25	; 0x32
    cbfa:	89 ab       	std	Y+49, r24	; 0x31
    cbfc:	e6 2e       	mov	r14, r22
    cbfe:	f4 2e       	mov	r15, r20
    cc00:	42 e0       	ldi	r20, 0x02	; 2
    cc02:	be 01       	movw	r22, r28
    cc04:	61 5d       	subi	r22, 0xD1	; 209
    cc06:	7f 4f       	sbci	r23, 0xFF	; 255
    cc08:	ce 01       	movw	r24, r28
    cc0a:	c1 96       	adiw	r24, 0x31	; 49
    cc0c:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    cc10:	2f a5       	ldd	r18, Y+47	; 0x2f
    cc12:	38 a9       	ldd	r19, Y+48	; 0x30
    cc14:	3a 83       	std	Y+2, r19	; 0x02
    cc16:	29 83       	std	Y+1, r18	; 0x01
    cc18:	00 97       	sbiw	r24, 0x00	; 0
    cc1a:	89 f5       	brne	.+98     	; 0xcc7e <f_chmod+0x92>
    cc1c:	80 e0       	ldi	r24, 0x00	; 0
    cc1e:	92 e0       	ldi	r25, 0x02	; 2
    cc20:	71 d6       	rcall	.+3298   	; 0xd904 <ff_memalloc>
    cc22:	6c 01       	movw	r12, r24
    cc24:	00 97       	sbiw	r24, 0x00	; 0
    cc26:	b1 f0       	breq	.+44     	; 0xcc54 <f_chmod+0x68>
    cc28:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc2a:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc2c:	94 87       	std	Z+12, r25	; 0x0c
    cc2e:	83 87       	std	Z+11, r24	; 0x0b
    cc30:	69 a9       	ldd	r22, Y+49	; 0x31
    cc32:	7a a9       	ldd	r23, Y+50	; 0x32
    cc34:	ce 01       	movw	r24, r28
    cc36:	01 96       	adiw	r24, 0x01	; 1
    cc38:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    cc3c:	8c 01       	movw	r16, r24
    cc3e:	89 2b       	or	r24, r25
    cc40:	29 f4       	brne	.+10     	; 0xcc4c <f_chmod+0x60>
    cc42:	88 a5       	ldd	r24, Y+40	; 0x28
    cc44:	80 7a       	andi	r24, 0xA0	; 160
    cc46:	49 f0       	breq	.+18     	; 0xcc5a <f_chmod+0x6e>
    cc48:	06 e0       	ldi	r16, 0x06	; 6
    cc4a:	10 e0       	ldi	r17, 0x00	; 0
    cc4c:	c6 01       	movw	r24, r12
    cc4e:	5d d6       	rcall	.+3258   	; 0xd90a <ff_memfree>
    cc50:	c8 01       	movw	r24, r16
    cc52:	15 c0       	rjmp	.+42     	; 0xcc7e <f_chmod+0x92>
    cc54:	81 e1       	ldi	r24, 0x11	; 17
    cc56:	90 e0       	ldi	r25, 0x00	; 0
    cc58:	12 c0       	rjmp	.+36     	; 0xcc7e <f_chmod+0x92>
    cc5a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc5c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc5e:	83 85       	ldd	r24, Z+11	; 0x0b
    cc60:	6e 2d       	mov	r22, r14
    cc62:	68 27       	eor	r22, r24
    cc64:	6f 21       	and	r22, r15
    cc66:	67 72       	andi	r22, 0x27	; 39
    cc68:	68 27       	eor	r22, r24
    cc6a:	63 87       	std	Z+11, r22	; 0x0b
    cc6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc6e:	98 a9       	ldd	r25, Y+48	; 0x30
    cc70:	21 e0       	ldi	r18, 0x01	; 1
    cc72:	fc 01       	movw	r30, r24
    cc74:	23 83       	std	Z+3, r18	; 0x03
    cc76:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    cc7a:	8c 01       	movw	r16, r24
    cc7c:	e7 cf       	rjmp	.-50     	; 0xcc4c <f_chmod+0x60>
    cc7e:	e2 96       	adiw	r28, 0x32	; 50
    cc80:	e8 e0       	ldi	r30, 0x08	; 8
    cc82:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000cc86 <f_utime>:
    cc86:	a2 e3       	ldi	r26, 0x32	; 50
    cc88:	b0 e0       	ldi	r27, 0x00	; 0
    cc8a:	e9 e4       	ldi	r30, 0x49	; 73
    cc8c:	f6 e6       	ldi	r31, 0x66	; 102
    cc8e:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    cc92:	9a ab       	std	Y+50, r25	; 0x32
    cc94:	89 ab       	std	Y+49, r24	; 0x31
    cc96:	6b 01       	movw	r12, r22
    cc98:	42 e0       	ldi	r20, 0x02	; 2
    cc9a:	be 01       	movw	r22, r28
    cc9c:	61 5d       	subi	r22, 0xD1	; 209
    cc9e:	7f 4f       	sbci	r23, 0xFF	; 255
    cca0:	ce 01       	movw	r24, r28
    cca2:	c1 96       	adiw	r24, 0x31	; 49
    cca4:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    cca8:	2f a5       	ldd	r18, Y+47	; 0x2f
    ccaa:	38 a9       	ldd	r19, Y+48	; 0x30
    ccac:	3a 83       	std	Y+2, r19	; 0x02
    ccae:	29 83       	std	Y+1, r18	; 0x01
    ccb0:	00 97       	sbiw	r24, 0x00	; 0
    ccb2:	09 f0       	breq	.+2      	; 0xccb6 <f_utime+0x30>
    ccb4:	3d c0       	rjmp	.+122    	; 0xcd30 <f_utime+0xaa>
    ccb6:	80 e0       	ldi	r24, 0x00	; 0
    ccb8:	92 e0       	ldi	r25, 0x02	; 2
    ccba:	24 d6       	rcall	.+3144   	; 0xd904 <ff_memalloc>
    ccbc:	7c 01       	movw	r14, r24
    ccbe:	00 97       	sbiw	r24, 0x00	; 0
    ccc0:	b1 f0       	breq	.+44     	; 0xccee <f_utime+0x68>
    ccc2:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccc4:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccc6:	94 87       	std	Z+12, r25	; 0x0c
    ccc8:	83 87       	std	Z+11, r24	; 0x0b
    ccca:	69 a9       	ldd	r22, Y+49	; 0x31
    cccc:	7a a9       	ldd	r23, Y+50	; 0x32
    ccce:	ce 01       	movw	r24, r28
    ccd0:	01 96       	adiw	r24, 0x01	; 1
    ccd2:	0e 94 ba 54 	call	0xa974	; 0xa974 <follow_path>
    ccd6:	8c 01       	movw	r16, r24
    ccd8:	89 2b       	or	r24, r25
    ccda:	29 f4       	brne	.+10     	; 0xcce6 <f_utime+0x60>
    ccdc:	88 a5       	ldd	r24, Y+40	; 0x28
    ccde:	80 7a       	andi	r24, 0xA0	; 160
    cce0:	49 f0       	breq	.+18     	; 0xccf4 <f_utime+0x6e>
    cce2:	06 e0       	ldi	r16, 0x06	; 6
    cce4:	10 e0       	ldi	r17, 0x00	; 0
    cce6:	c7 01       	movw	r24, r14
    cce8:	10 d6       	rcall	.+3104   	; 0xd90a <ff_memfree>
    ccea:	c8 01       	movw	r24, r16
    ccec:	21 c0       	rjmp	.+66     	; 0xcd30 <f_utime+0xaa>
    ccee:	81 e1       	ldi	r24, 0x11	; 17
    ccf0:	90 e0       	ldi	r25, 0x00	; 0
    ccf2:	1e c0       	rjmp	.+60     	; 0xcd30 <f_utime+0xaa>
    ccf4:	f6 01       	movw	r30, r12
    ccf6:	44 81       	ldd	r20, Z+4	; 0x04
    ccf8:	55 81       	ldd	r21, Z+5	; 0x05
    ccfa:	60 e0       	ldi	r22, 0x00	; 0
    ccfc:	70 e0       	ldi	r23, 0x00	; 0
    ccfe:	ba 01       	movw	r22, r20
    cd00:	55 27       	eor	r21, r21
    cd02:	44 27       	eor	r20, r20
    cd04:	86 81       	ldd	r24, Z+6	; 0x06
    cd06:	97 81       	ldd	r25, Z+7	; 0x07
    cd08:	a0 e0       	ldi	r26, 0x00	; 0
    cd0a:	b0 e0       	ldi	r27, 0x00	; 0
    cd0c:	48 2b       	or	r20, r24
    cd0e:	59 2b       	or	r21, r25
    cd10:	6a 2b       	or	r22, r26
    cd12:	7b 2b       	or	r23, r27
    cd14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd18:	46 96       	adiw	r24, 0x16	; 22
    cd1a:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    cd1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd20:	98 a9       	ldd	r25, Y+48	; 0x30
    cd22:	21 e0       	ldi	r18, 0x01	; 1
    cd24:	fc 01       	movw	r30, r24
    cd26:	23 83       	std	Z+3, r18	; 0x03
    cd28:	0e 94 48 47 	call	0x8e90	; 0x8e90 <sync_fs>
    cd2c:	8c 01       	movw	r16, r24
    cd2e:	db cf       	rjmp	.-74     	; 0xcce6 <f_utime+0x60>
    cd30:	e2 96       	adiw	r28, 0x32	; 50
    cd32:	e8 e0       	ldi	r30, 0x08	; 8
    cd34:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000cd38 <f_getlabel>:
    cd38:	a2 e3       	ldi	r26, 0x32	; 50
    cd3a:	b0 e0       	ldi	r27, 0x00	; 0
    cd3c:	e2 ea       	ldi	r30, 0xA2	; 162
    cd3e:	f6 e6       	ldi	r31, 0x66	; 102
    cd40:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    cd44:	9a ab       	std	Y+50, r25	; 0x32
    cd46:	89 ab       	std	Y+49, r24	; 0x31
    cd48:	7b 01       	movw	r14, r22
    cd4a:	6a 01       	movw	r12, r20
    cd4c:	40 e0       	ldi	r20, 0x00	; 0
    cd4e:	be 01       	movw	r22, r28
    cd50:	61 5d       	subi	r22, 0xD1	; 209
    cd52:	7f 4f       	sbci	r23, 0xFF	; 255
    cd54:	ce 01       	movw	r24, r28
    cd56:	c1 96       	adiw	r24, 0x31	; 49
    cd58:	0e 94 34 48 	call	0x9068	; 0x9068 <find_volume>
    cd5c:	8c 01       	movw	r16, r24
    cd5e:	89 2b       	or	r24, r25
    cd60:	09 f0       	breq	.+2      	; 0xcd64 <f_getlabel+0x2c>
    cd62:	5f c0       	rjmp	.+190    	; 0xce22 <f_getlabel+0xea>
    cd64:	e1 14       	cp	r14, r1
    cd66:	f1 04       	cpc	r15, r1
    cd68:	91 f1       	breq	.+100    	; 0xcdce <f_getlabel+0x96>
    cd6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd6c:	98 a9       	ldd	r25, Y+48	; 0x30
    cd6e:	9a 83       	std	Y+2, r25	; 0x02
    cd70:	89 83       	std	Y+1, r24	; 0x01
    cd72:	1f 82       	std	Y+7, r1	; 0x07
    cd74:	18 86       	std	Y+8, r1	; 0x08
    cd76:	19 86       	std	Y+9, r1	; 0x09
    cd78:	1a 86       	std	Y+10, r1	; 0x0a
    cd7a:	40 e0       	ldi	r20, 0x00	; 0
    cd7c:	50 e0       	ldi	r21, 0x00	; 0
    cd7e:	ba 01       	movw	r22, r20
    cd80:	ce 01       	movw	r24, r28
    cd82:	01 96       	adiw	r24, 0x01	; 1
    cd84:	0e 94 8d 4c 	call	0x991a	; 0x991a <dir_sdi>
    cd88:	00 97       	sbiw	r24, 0x00	; 0
    cd8a:	e1 f4       	brne	.+56     	; 0xcdc4 <f_getlabel+0x8c>
    cd8c:	61 e0       	ldi	r22, 0x01	; 1
    cd8e:	70 e0       	ldi	r23, 0x00	; 0
    cd90:	ce 01       	movw	r24, r28
    cd92:	01 96       	adiw	r24, 0x01	; 1
    cd94:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <dir_read>
    cd98:	00 97       	sbiw	r24, 0x00	; 0
    cd9a:	a1 f4       	brne	.+40     	; 0xcdc4 <f_getlabel+0x8c>
    cd9c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd9e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cda0:	cf 01       	movw	r24, r30
    cda2:	0b 96       	adiw	r24, 0x0b	; 11
    cda4:	d7 01       	movw	r26, r14
    cda6:	21 91       	ld	r18, Z+
    cda8:	2d 93       	st	X+, r18
    cdaa:	e8 17       	cp	r30, r24
    cdac:	f9 07       	cpc	r31, r25
    cdae:	d9 f7       	brne	.-10     	; 0xcda6 <f_getlabel+0x6e>
    cdb0:	f7 01       	movw	r30, r14
    cdb2:	3b 96       	adiw	r30, 0x0b	; 11
    cdb4:	10 82       	st	Z, r1
    cdb6:	ee 16       	cp	r14, r30
    cdb8:	ff 06       	cpc	r15, r31
    cdba:	49 f0       	breq	.+18     	; 0xcdce <f_getlabel+0x96>
    cdbc:	82 91       	ld	r24, -Z
    cdbe:	80 32       	cpi	r24, 0x20	; 32
    cdc0:	c9 f3       	breq	.-14     	; 0xcdb4 <f_getlabel+0x7c>
    cdc2:	05 c0       	rjmp	.+10     	; 0xcdce <f_getlabel+0x96>
    cdc4:	84 30       	cpi	r24, 0x04	; 4
    cdc6:	91 05       	cpc	r25, r1
    cdc8:	59 f5       	brne	.+86     	; 0xce20 <f_getlabel+0xe8>
    cdca:	f7 01       	movw	r30, r14
    cdcc:	10 82       	st	Z, r1
    cdce:	c1 14       	cp	r12, r1
    cdd0:	d1 04       	cpc	r13, r1
    cdd2:	39 f1       	breq	.+78     	; 0xce22 <f_getlabel+0xea>
    cdd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdd6:	98 a9       	ldd	r25, Y+48	; 0x30
    cdd8:	fc 01       	movw	r30, r24
    cdda:	41 a1       	ldd	r20, Z+33	; 0x21
    cddc:	52 a1       	ldd	r21, Z+34	; 0x22
    cdde:	63 a1       	ldd	r22, Z+35	; 0x23
    cde0:	74 a1       	ldd	r23, Z+36	; 0x24
    cde2:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <move_window>
    cde6:	8c 01       	movw	r16, r24
    cde8:	89 2b       	or	r24, r25
    cdea:	d9 f4       	brne	.+54     	; 0xce22 <f_getlabel+0xea>
    cdec:	ef a5       	ldd	r30, Y+47	; 0x2f
    cdee:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdf0:	80 81       	ld	r24, Z
    cdf2:	83 30       	cpi	r24, 0x03	; 3
    cdf4:	29 f0       	breq	.+10     	; 0xce00 <f_getlabel+0xc8>
    cdf6:	84 30       	cpi	r24, 0x04	; 4
    cdf8:	31 f0       	breq	.+12     	; 0xce06 <f_getlabel+0xce>
    cdfa:	87 e2       	ldi	r24, 0x27	; 39
    cdfc:	90 e0       	ldi	r25, 0x00	; 0
    cdfe:	05 c0       	rjmp	.+10     	; 0xce0a <f_getlabel+0xd2>
    ce00:	83 e4       	ldi	r24, 0x43	; 67
    ce02:	90 e0       	ldi	r25, 0x00	; 0
    ce04:	02 c0       	rjmp	.+4      	; 0xce0a <f_getlabel+0xd2>
    ce06:	84 e6       	ldi	r24, 0x64	; 100
    ce08:	90 e0       	ldi	r25, 0x00	; 0
    ce0a:	f5 96       	adiw	r30, 0x35	; 53
    ce0c:	8e 0f       	add	r24, r30
    ce0e:	9f 1f       	adc	r25, r31
    ce10:	0e 94 dd 45 	call	0x8bba	; 0x8bba <ld_dword>
    ce14:	f6 01       	movw	r30, r12
    ce16:	60 83       	st	Z, r22
    ce18:	71 83       	std	Z+1, r23	; 0x01
    ce1a:	82 83       	std	Z+2, r24	; 0x02
    ce1c:	93 83       	std	Z+3, r25	; 0x03
    ce1e:	01 c0       	rjmp	.+2      	; 0xce22 <f_getlabel+0xea>
    ce20:	8c 01       	movw	r16, r24
    ce22:	c8 01       	movw	r24, r16
    ce24:	e2 96       	adiw	r28, 0x32	; 50
    ce26:	e8 e0       	ldi	r30, 0x08	; 8
    ce28:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000ce2c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    ce2c:	a2 e4       	ldi	r26, 0x42	; 66
    ce2e:	b0 e0       	ldi	r27, 0x00	; 0
    ce30:	ec e1       	ldi	r30, 0x1C	; 28
    ce32:	f7 e6       	ldi	r31, 0x67	; 103
    ce34:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    ce38:	9a 87       	std	Y+10, r25	; 0x0a
    ce3a:	89 87       	std	Y+9, r24	; 0x09
    ce3c:	e6 2e       	mov	r14, r22
    ce3e:	49 01       	movw	r8, r18
    ce40:	5a 01       	movw	r10, r20
    ce42:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    ce44:	ce 01       	movw	r24, r28
    ce46:	09 96       	adiw	r24, 0x09	; 9
    ce48:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <get_ldnumber>
    ce4c:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    ce4e:	97 fd       	sbrc	r25, 7
    ce50:	39 c5       	rjmp	.+2674   	; 0xd8c4 <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    ce52:	fc 01       	movw	r30, r24
    ce54:	ee 0f       	add	r30, r30
    ce56:	ff 1f       	adc	r31, r31
    ce58:	ee 51       	subi	r30, 0x1E	; 30
    ce5a:	f8 4e       	sbci	r31, 0xE8	; 232
    ce5c:	01 90       	ld	r0, Z+
    ce5e:	f0 81       	ld	r31, Z
    ce60:	e0 2d       	mov	r30, r0
    ce62:	30 97       	sbiw	r30, 0x00	; 0
    ce64:	09 f0       	breq	.+2      	; 0xce68 <f_mkfs+0x3c>
    ce66:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    ce68:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    ce6a:	82 2d       	mov	r24, r2
    ce6c:	d2 d5       	rcall	.+2980   	; 0xda12 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    ce6e:	80 fd       	sbrc	r24, 0
    ce70:	2b c5       	rjmp	.+2646   	; 0xd8c8 <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    ce72:	82 fd       	sbrc	r24, 2
    ce74:	2b c5       	rjmp	.+2646   	; 0xd8cc <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    ce76:	ae 01       	movw	r20, r28
    ce78:	4b 5f       	subi	r20, 0xFB	; 251
    ce7a:	5f 4f       	sbci	r21, 0xFF	; 255
    ce7c:	63 e0       	ldi	r22, 0x03	; 3
    ce7e:	82 2d       	mov	r24, r2
    ce80:	ee d5       	rcall	.+3036   	; 0xda5e <disk_ioctl>
    ce82:	89 2b       	or	r24, r25
    ce84:	b9 f4       	brne	.+46     	; 0xceb4 <f_mkfs+0x88>
    ce86:	4d 81       	ldd	r20, Y+5	; 0x05
    ce88:	5e 81       	ldd	r21, Y+6	; 0x06
    ce8a:	6f 81       	ldd	r22, Y+7	; 0x07
    ce8c:	78 85       	ldd	r23, Y+8	; 0x08
    ce8e:	db 01       	movw	r26, r22
    ce90:	ca 01       	movw	r24, r20
    ce92:	01 97       	sbiw	r24, 0x01	; 1
    ce94:	a1 09       	sbc	r26, r1
    ce96:	b1 09       	sbc	r27, r1
    ce98:	81 15       	cp	r24, r1
    ce9a:	00 e8       	ldi	r16, 0x80	; 128
    ce9c:	90 07       	cpc	r25, r16
    ce9e:	a1 05       	cpc	r26, r1
    cea0:	b1 05       	cpc	r27, r1
    cea2:	40 f4       	brcc	.+16     	; 0xceb4 <f_mkfs+0x88>
    cea4:	84 23       	and	r24, r20
    cea6:	95 23       	and	r25, r21
    cea8:	a6 23       	and	r26, r22
    ceaa:	b7 23       	and	r27, r23
    ceac:	89 2b       	or	r24, r25
    ceae:	8a 2b       	or	r24, r26
    ceb0:	8b 2b       	or	r24, r27
    ceb2:	41 f0       	breq	.+16     	; 0xcec4 <f_mkfs+0x98>
    ceb4:	81 e0       	ldi	r24, 0x01	; 1
    ceb6:	90 e0       	ldi	r25, 0x00	; 0
    ceb8:	a0 e0       	ldi	r26, 0x00	; 0
    ceba:	b0 e0       	ldi	r27, 0x00	; 0
    cebc:	8d 83       	std	Y+5, r24	; 0x05
    cebe:	9e 83       	std	Y+6, r25	; 0x06
    cec0:	af 83       	std	Y+7, r26	; 0x07
    cec2:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    cec4:	81 14       	cp	r8, r1
    cec6:	91 04       	cpc	r9, r1
    cec8:	a1 04       	cpc	r10, r1
    ceca:	b1 04       	cpc	r11, r1
    cecc:	61 f0       	breq	.+24     	; 0xcee6 <f_mkfs+0xba>
    cece:	d5 01       	movw	r26, r10
    ced0:	c4 01       	movw	r24, r8
    ced2:	92 50       	subi	r25, 0x02	; 2
    ced4:	a1 09       	sbc	r26, r1
    ced6:	b1 09       	sbc	r27, r1
    ced8:	81 30       	cpi	r24, 0x01	; 1
    ceda:	9e 4f       	sbci	r25, 0xFE	; 254
    cedc:	af 4f       	sbci	r26, 0xFF	; 255
    cede:	b1 05       	cpc	r27, r1
    cee0:	10 f0       	brcs	.+4      	; 0xcee6 <f_mkfs+0xba>
    cee2:	83 e1       	ldi	r24, 0x13	; 19
    cee4:	f6 c4       	rjmp	.+2540   	; 0xd8d2 <f_mkfs+0xaa6>
    cee6:	d5 01       	movw	r26, r10
    cee8:	c4 01       	movw	r24, r8
    ceea:	01 97       	sbiw	r24, 0x01	; 1
    ceec:	a1 09       	sbc	r26, r1
    ceee:	b1 09       	sbc	r27, r1
    cef0:	88 21       	and	r24, r8
    cef2:	99 21       	and	r25, r9
    cef4:	aa 21       	and	r26, r10
    cef6:	bb 21       	and	r27, r11
    cef8:	89 2b       	or	r24, r25
    cefa:	8a 2b       	or	r24, r26
    cefc:	8b 2b       	or	r24, r27
    cefe:	89 f7       	brne	.-30     	; 0xcee2 <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    cf00:	8f 2d       	mov	r24, r15
    cf02:	86 95       	lsr	r24
    cf04:	90 e0       	ldi	r25, 0x00	; 0
    cf06:	9c 01       	movw	r18, r24
    cf08:	40 e0       	ldi	r20, 0x00	; 0
    cf0a:	50 e0       	ldi	r21, 0x00	; 0
    cf0c:	2c a3       	std	Y+36, r18	; 0x24
    cf0e:	3d a3       	std	Y+37, r19	; 0x25
    cf10:	4e a3       	std	Y+38, r20	; 0x26
    cf12:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    cf14:	69 e0       	ldi	r22, 0x09	; 9
    cf16:	22 0f       	add	r18, r18
    cf18:	33 1f       	adc	r19, r19
    cf1a:	44 1f       	adc	r20, r20
    cf1c:	55 1f       	adc	r21, r21
    cf1e:	6a 95       	dec	r22
    cf20:	d1 f7       	brne	.-12     	; 0xcf16 <f_mkfs+0xea>
    cf22:	2d a7       	std	Y+45, r18	; 0x2d
    cf24:	3e a7       	std	Y+46, r19	; 0x2e
    cf26:	4f a7       	std	Y+47, r20	; 0x2f
    cf28:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    cf2a:	23 2b       	or	r18, r19
    cf2c:	24 2b       	or	r18, r20
    cf2e:	25 2b       	or	r18, r21
    cf30:	11 f4       	brne	.+4      	; 0xcf36 <f_mkfs+0x10a>
    cf32:	8e e0       	ldi	r24, 0x0E	; 14
    cf34:	ce c4       	rjmp	.+2460   	; 0xd8d2 <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    cf36:	ae 01       	movw	r20, r28
    cf38:	4f 5f       	subi	r20, 0xFF	; 255
    cf3a:	5f 4f       	sbci	r21, 0xFF	; 255
    cf3c:	61 e0       	ldi	r22, 0x01	; 1
    cf3e:	82 2d       	mov	r24, r2
    cf40:	8e d5       	rcall	.+2844   	; 0xda5e <disk_ioctl>
    cf42:	89 2b       	or	r24, r25
    cf44:	09 f0       	breq	.+2      	; 0xcf48 <f_mkfs+0x11c>
    cf46:	c4 c4       	rjmp	.+2440   	; 0xd8d0 <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    cf48:	3e 2d       	mov	r19, r14
    cf4a:	38 70       	andi	r19, 0x08	; 8
    cf4c:	3a ab       	std	Y+50, r19	; 0x32
    cf4e:	e3 fe       	sbrs	r14, 3
    cf50:	05 c0       	rjmp	.+10     	; 0xcf5c <f_mkfs+0x130>
    cf52:	1c 8a       	std	Y+20, r1	; 0x14
    cf54:	1d 8a       	std	Y+21, r1	; 0x15
    cf56:	1e 8a       	std	Y+22, r1	; 0x16
    cf58:	1f 8a       	std	Y+23, r1	; 0x17
    cf5a:	08 c0       	rjmp	.+16     	; 0xcf6c <f_mkfs+0x140>
    cf5c:	8f e3       	ldi	r24, 0x3F	; 63
    cf5e:	90 e0       	ldi	r25, 0x00	; 0
    cf60:	a0 e0       	ldi	r26, 0x00	; 0
    cf62:	b0 e0       	ldi	r27, 0x00	; 0
    cf64:	8c 8b       	std	Y+20, r24	; 0x14
    cf66:	9d 8b       	std	Y+21, r25	; 0x15
    cf68:	ae 8b       	std	Y+22, r26	; 0x16
    cf6a:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    cf6c:	49 80       	ldd	r4, Y+1	; 0x01
    cf6e:	5a 80       	ldd	r5, Y+2	; 0x02
    cf70:	6b 80       	ldd	r6, Y+3	; 0x03
    cf72:	7c 80       	ldd	r7, Y+4	; 0x04
    cf74:	0c 89       	ldd	r16, Y+20	; 0x14
    cf76:	1d 89       	ldd	r17, Y+21	; 0x15
    cf78:	2e 89       	ldd	r18, Y+22	; 0x16
    cf7a:	3f 89       	ldd	r19, Y+23	; 0x17
    cf7c:	40 16       	cp	r4, r16
    cf7e:	51 06       	cpc	r5, r17
    cf80:	62 06       	cpc	r6, r18
    cf82:	73 06       	cpc	r7, r19
    cf84:	b0 f2       	brcs	.-84     	; 0xcf32 <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    cf86:	d3 01       	movw	r26, r6
    cf88:	c2 01       	movw	r24, r4
    cf8a:	80 1b       	sub	r24, r16
    cf8c:	91 0b       	sbc	r25, r17
    cf8e:	a2 0b       	sbc	r26, r18
    cf90:	b3 0b       	sbc	r27, r19
    cf92:	8b 87       	std	Y+11, r24	; 0x0b
    cf94:	9c 87       	std	Y+12, r25	; 0x0c
    cf96:	ad 87       	std	Y+13, r26	; 0x0d
    cf98:	be 87       	std	Y+14, r27	; 0x0e
    cf9a:	89 83       	std	Y+1, r24	; 0x01
    cf9c:	9a 83       	std	Y+2, r25	; 0x02
    cf9e:	ab 83       	std	Y+3, r26	; 0x03
    cfa0:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    cfa2:	80 38       	cpi	r24, 0x80	; 128
    cfa4:	91 05       	cpc	r25, r1
    cfa6:	a1 05       	cpc	r26, r1
    cfa8:	b1 05       	cpc	r27, r1
    cfaa:	18 f2       	brcs	.-122    	; 0xcf32 <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    cfac:	29 e0       	ldi	r18, 0x09	; 9
    cfae:	b6 94       	lsr	r11
    cfb0:	a7 94       	ror	r10
    cfb2:	97 94       	ror	r9
    cfb4:	87 94       	ror	r8
    cfb6:	2a 95       	dec	r18
    cfb8:	d1 f7       	brne	.-12     	; 0xcfae <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    cfba:	91 e8       	ldi	r25, 0x81	; 129
    cfbc:	89 16       	cp	r8, r25
    cfbe:	91 04       	cpc	r9, r1
    cfc0:	a1 04       	cpc	r10, r1
    cfc2:	b1 04       	cpc	r11, r1
    cfc4:	08 f0       	brcs	.+2      	; 0xcfc8 <f_mkfs+0x19c>
    cfc6:	8d cf       	rjmp	.-230    	; 0xcee2 <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    cfc8:	ae 2d       	mov	r26, r14
    cfca:	a2 70       	andi	r26, 0x02	; 2
    cfcc:	fa 2e       	mov	r15, r26
    cfce:	e1 fe       	sbrs	r14, 1
    cfd0:	06 c0       	rjmp	.+12     	; 0xcfde <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    cfd2:	8e 2d       	mov	r24, r14
    cfd4:	87 70       	andi	r24, 0x07	; 7
    cfd6:	82 30       	cpi	r24, 0x02	; 2
    cfd8:	39 f0       	breq	.+14     	; 0xcfe8 <f_mkfs+0x1bc>
    cfda:	e0 fe       	sbrs	r14, 0
    cfdc:	08 c0       	rjmp	.+16     	; 0xcfee <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    cfde:	e0 fe       	sbrs	r14, 0
    cfe0:	80 cf       	rjmp	.-256    	; 0xcee2 <f_mkfs+0xb6>
		fmt = FS_FAT16;
    cfe2:	b2 e0       	ldi	r27, 0x02	; 2
    cfe4:	bf 87       	std	Y+15, r27	; 0x0f
    cfe6:	05 c0       	rjmp	.+10     	; 0xcff2 <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    cfe8:	e3 e0       	ldi	r30, 0x03	; 3
    cfea:	ef 87       	std	Y+15, r30	; 0x0f
    cfec:	02 c0       	rjmp	.+4      	; 0xcff2 <f_mkfs+0x1c6>
    cfee:	f3 e0       	ldi	r31, 0x03	; 3
    cff0:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    cff2:	0b 85       	ldd	r16, Y+11	; 0x0b
    cff4:	1c 85       	ldd	r17, Y+12	; 0x0c
    cff6:	2d 85       	ldd	r18, Y+13	; 0x0d
    cff8:	3e 85       	ldd	r19, Y+14	; 0x0e
    cffa:	81 e1       	ldi	r24, 0x11	; 17
    cffc:	36 95       	lsr	r19
    cffe:	27 95       	ror	r18
    d000:	17 95       	ror	r17
    d002:	07 95       	ror	r16
    d004:	8a 95       	dec	r24
    d006:	d1 f7       	brne	.-12     	; 0xcffc <f_mkfs+0x1d0>
    d008:	23 96       	adiw	r28, 0x03	; 3
    d00a:	0c af       	std	Y+60, r16	; 0x3c
    d00c:	1d af       	std	Y+61, r17	; 0x3d
    d00e:	2e af       	std	Y+62, r18	; 0x3e
    d010:	3f af       	std	Y+63, r19	; 0x3f
    d012:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    d014:	0b 85       	ldd	r16, Y+11	; 0x0b
    d016:	1c 85       	ldd	r17, Y+12	; 0x0c
    d018:	2d 85       	ldd	r18, Y+13	; 0x0d
    d01a:	3e 85       	ldd	r19, Y+14	; 0x0e
    d01c:	9c e0       	ldi	r25, 0x0C	; 12
    d01e:	36 95       	lsr	r19
    d020:	27 95       	ror	r18
    d022:	17 95       	ror	r17
    d024:	07 95       	ror	r16
    d026:	9a 95       	dec	r25
    d028:	d1 f7       	brne	.-12     	; 0xd01e <f_mkfs+0x1f2>
    d02a:	0b ab       	std	Y+51, r16	; 0x33
    d02c:	1c ab       	std	Y+52, r17	; 0x34
    d02e:	2d ab       	std	Y+53, r18	; 0x35
    d030:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d032:	8d 81       	ldd	r24, Y+5	; 0x05
    d034:	9e 81       	ldd	r25, Y+6	; 0x06
    d036:	af 81       	ldd	r26, Y+7	; 0x07
    d038:	b8 85       	ldd	r27, Y+8	; 0x08
    d03a:	8c 01       	movw	r16, r24
    d03c:	9d 01       	movw	r18, r26
    d03e:	01 50       	subi	r16, 0x01	; 1
    d040:	11 09       	sbc	r17, r1
    d042:	21 09       	sbc	r18, r1
    d044:	31 09       	sbc	r19, r1
    d046:	0b af       	std	Y+59, r16	; 0x3b
    d048:	1c af       	std	Y+60, r17	; 0x3c
    d04a:	2d af       	std	Y+61, r18	; 0x3d
    d04c:	3e af       	std	Y+62, r19	; 0x3e
    d04e:	00 27       	eor	r16, r16
    d050:	11 27       	eor	r17, r17
    d052:	98 01       	movw	r18, r16
    d054:	08 1b       	sub	r16, r24
    d056:	19 0b       	sbc	r17, r25
    d058:	2a 0b       	sbc	r18, r26
    d05a:	3b 0b       	sbc	r19, r27
    d05c:	0f ab       	std	Y+55, r16	; 0x37
    d05e:	18 af       	std	Y+56, r17	; 0x38
    d060:	29 af       	std	Y+57, r18	; 0x39
    d062:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    d064:	1f 85       	ldd	r17, Y+15	; 0x0f
    d066:	13 30       	cpi	r17, 0x03	; 3
    d068:	09 f0       	breq	.+2      	; 0xd06c <f_mkfs+0x240>
    d06a:	67 c1       	rjmp	.+718    	; 0xd33a <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    d06c:	81 14       	cp	r8, r1
    d06e:	91 04       	cpc	r9, r1
    d070:	a1 04       	cpc	r10, r1
    d072:	b1 04       	cpc	r11, r1
    d074:	e1 f4       	brne	.+56     	; 0xd0ae <f_mkfs+0x282>
    d076:	e0 e9       	ldi	r30, 0x90	; 144
    d078:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d07a:	41 2c       	mov	r4, r1
    d07c:	51 2c       	mov	r5, r1
    d07e:	32 01       	movw	r6, r4
    d080:	43 94       	inc	r4
    d082:	81 91       	ld	r24, Z+
    d084:	91 91       	ld	r25, Z+
    d086:	00 97       	sbiw	r24, 0x00	; 0
    d088:	a1 f0       	breq	.+40     	; 0xd0b2 <f_mkfs+0x286>
    d08a:	a0 e0       	ldi	r26, 0x00	; 0
    d08c:	b0 e0       	ldi	r27, 0x00	; 0
    d08e:	23 96       	adiw	r28, 0x03	; 3
    d090:	0c ad       	ldd	r16, Y+60	; 0x3c
    d092:	1d ad       	ldd	r17, Y+61	; 0x3d
    d094:	2e ad       	ldd	r18, Y+62	; 0x3e
    d096:	3f ad       	ldd	r19, Y+63	; 0x3f
    d098:	23 97       	sbiw	r28, 0x03	; 3
    d09a:	08 17       	cp	r16, r24
    d09c:	19 07       	cpc	r17, r25
    d09e:	2a 07       	cpc	r18, r26
    d0a0:	3b 07       	cpc	r19, r27
    d0a2:	38 f0       	brcs	.+14     	; 0xd0b2 <f_mkfs+0x286>
    d0a4:	44 0c       	add	r4, r4
    d0a6:	55 1c       	adc	r5, r5
    d0a8:	66 1c       	adc	r6, r6
    d0aa:	77 1c       	adc	r7, r7
    d0ac:	ea cf       	rjmp	.-44     	; 0xd082 <f_mkfs+0x256>
    d0ae:	24 01       	movw	r4, r8
    d0b0:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    d0b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    d0b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    d0b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    d0ba:	a3 01       	movw	r20, r6
    d0bc:	92 01       	movw	r18, r4
    d0be:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    d0c2:	da 01       	movw	r26, r20
    d0c4:	c9 01       	movw	r24, r18
    d0c6:	62 e0       	ldi	r22, 0x02	; 2
    d0c8:	88 0f       	add	r24, r24
    d0ca:	99 1f       	adc	r25, r25
    d0cc:	aa 1f       	adc	r26, r26
    d0ce:	bb 1f       	adc	r27, r27
    d0d0:	6a 95       	dec	r22
    d0d2:	d1 f7       	brne	.-12     	; 0xd0c8 <f_mkfs+0x29c>
    d0d4:	89 5f       	subi	r24, 0xF9	; 249
    d0d6:	9d 4f       	sbci	r25, 0xFD	; 253
    d0d8:	af 4f       	sbci	r26, 0xFF	; 255
    d0da:	bf 4f       	sbci	r27, 0xFF	; 255
    d0dc:	79 e0       	ldi	r23, 0x09	; 9
    d0de:	b6 95       	lsr	r27
    d0e0:	a7 95       	ror	r26
    d0e2:	97 95       	ror	r25
    d0e4:	87 95       	ror	r24
    d0e6:	7a 95       	dec	r23
    d0e8:	d1 f7       	brne	.-12     	; 0xd0de <f_mkfs+0x2b2>
    d0ea:	88 8b       	std	Y+16, r24	; 0x10
    d0ec:	99 8b       	std	Y+17, r25	; 0x11
    d0ee:	aa 8b       	std	Y+18, r26	; 0x12
    d0f0:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d0f2:	da 01       	movw	r26, r20
    d0f4:	c9 01       	movw	r24, r18
    d0f6:	86 5f       	subi	r24, 0xF6	; 246
    d0f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d0fa:	a1 09       	sbc	r26, r1
    d0fc:	b1 09       	sbc	r27, r1
    d0fe:	00 97       	sbiw	r24, 0x00	; 0
    d100:	af 4f       	sbci	r26, 0xFF	; 255
    d102:	bf 40       	sbci	r27, 0x0F	; 15
    d104:	08 f0       	brcs	.+2      	; 0xd108 <f_mkfs+0x2dc>
    d106:	15 cf       	rjmp	.-470    	; 0xcf32 <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d108:	1c 8e       	std	Y+28, r1	; 0x1c
    d10a:	1d 8e       	std	Y+29, r1	; 0x1d
    d10c:	1e 8e       	std	Y+30, r1	; 0x1e
    d10e:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d110:	00 e2       	ldi	r16, 0x20	; 32
    d112:	10 e0       	ldi	r17, 0x00	; 0
    d114:	20 e0       	ldi	r18, 0x00	; 0
    d116:	30 e0       	ldi	r19, 0x00	; 0
    d118:	08 a3       	std	Y+32, r16	; 0x20
    d11a:	19 a3       	std	Y+33, r17	; 0x21
    d11c:	2a a3       	std	Y+34, r18	; 0x22
    d11e:	3b a3       	std	Y+35, r19	; 0x23
    d120:	4e c0       	rjmp	.+156    	; 0xd1be <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d122:	a0 e0       	ldi	r26, 0x00	; 0
    d124:	b0 e0       	ldi	r27, 0x00	; 0
    d126:	0b a9       	ldd	r16, Y+51	; 0x33
    d128:	1c a9       	ldd	r17, Y+52	; 0x34
    d12a:	2d a9       	ldd	r18, Y+53	; 0x35
    d12c:	3e a9       	ldd	r19, Y+54	; 0x36
    d12e:	08 17       	cp	r16, r24
    d130:	19 07       	cpc	r17, r25
    d132:	2a 07       	cpc	r18, r26
    d134:	3b 07       	cpc	r19, r27
    d136:	40 f0       	brcs	.+16     	; 0xd148 <f_mkfs+0x31c>
    d138:	44 0c       	add	r4, r4
    d13a:	55 1c       	adc	r5, r5
    d13c:	66 1c       	adc	r6, r6
    d13e:	77 1c       	adc	r7, r7
    d140:	81 91       	ld	r24, Z+
    d142:	91 91       	ld	r25, Z+
    d144:	00 97       	sbiw	r24, 0x00	; 0
    d146:	69 f7       	brne	.-38     	; 0xd122 <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d148:	6b 85       	ldd	r22, Y+11	; 0x0b
    d14a:	7c 85       	ldd	r23, Y+12	; 0x0c
    d14c:	8d 85       	ldd	r24, Y+13	; 0x0d
    d14e:	9e 85       	ldd	r25, Y+14	; 0x0e
    d150:	a3 01       	movw	r20, r6
    d152:	92 01       	movw	r18, r4
    d154:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d158:	26 3f       	cpi	r18, 0xF6	; 246
    d15a:	1f e0       	ldi	r17, 0x0F	; 15
    d15c:	31 07       	cpc	r19, r17
    d15e:	41 05       	cpc	r20, r1
    d160:	51 05       	cpc	r21, r1
    d162:	08 f4       	brcc	.+2      	; 0xd166 <f_mkfs+0x33a>
    d164:	f9 c0       	rjmp	.+498    	; 0xd358 <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d166:	da 01       	movw	r26, r20
    d168:	c9 01       	movw	r24, r18
    d16a:	02 96       	adiw	r24, 0x02	; 2
    d16c:	a1 1d       	adc	r26, r1
    d16e:	b1 1d       	adc	r27, r1
    d170:	88 0f       	add	r24, r24
    d172:	99 1f       	adc	r25, r25
    d174:	aa 1f       	adc	r26, r26
    d176:	bb 1f       	adc	r27, r27
    d178:	22 e0       	ldi	r18, 0x02	; 2
    d17a:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d17c:	81 50       	subi	r24, 0x01	; 1
    d17e:	9e 4f       	sbci	r25, 0xFE	; 254
    d180:	af 4f       	sbci	r26, 0xFF	; 255
    d182:	bf 4f       	sbci	r27, 0xFF	; 255
    d184:	8c 01       	movw	r16, r24
    d186:	9d 01       	movw	r18, r26
    d188:	a9 e0       	ldi	r26, 0x09	; 9
    d18a:	36 95       	lsr	r19
    d18c:	27 95       	ror	r18
    d18e:	17 95       	ror	r17
    d190:	07 95       	ror	r16
    d192:	aa 95       	dec	r26
    d194:	d1 f7       	brne	.-12     	; 0xd18a <f_mkfs+0x35e>
    d196:	08 8b       	std	Y+16, r16	; 0x10
    d198:	19 8b       	std	Y+17, r17	; 0x11
    d19a:	2a 8b       	std	Y+18, r18	; 0x12
    d19c:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d19e:	20 e2       	ldi	r18, 0x20	; 32
    d1a0:	30 e0       	ldi	r19, 0x00	; 0
    d1a2:	40 e0       	ldi	r20, 0x00	; 0
    d1a4:	50 e0       	ldi	r21, 0x00	; 0
    d1a6:	2c 8f       	std	Y+28, r18	; 0x1c
    d1a8:	3d 8f       	std	Y+29, r19	; 0x1d
    d1aa:	4e 8f       	std	Y+30, r20	; 0x1e
    d1ac:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d1ae:	81 e0       	ldi	r24, 0x01	; 1
    d1b0:	90 e0       	ldi	r25, 0x00	; 0
    d1b2:	a0 e0       	ldi	r26, 0x00	; 0
    d1b4:	b0 e0       	ldi	r27, 0x00	; 0
    d1b6:	88 a3       	std	Y+32, r24	; 0x20
    d1b8:	99 a3       	std	Y+33, r25	; 0x21
    d1ba:	aa a3       	std	Y+34, r26	; 0x22
    d1bc:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d1be:	08 a1       	ldd	r16, Y+32	; 0x20
    d1c0:	19 a1       	ldd	r17, Y+33	; 0x21
    d1c2:	2a a1       	ldd	r18, Y+34	; 0x22
    d1c4:	3b a1       	ldd	r19, Y+35	; 0x23
    d1c6:	8c 89       	ldd	r24, Y+20	; 0x14
    d1c8:	9d 89       	ldd	r25, Y+21	; 0x15
    d1ca:	ae 89       	ldd	r26, Y+22	; 0x16
    d1cc:	bf 89       	ldd	r27, Y+23	; 0x17
    d1ce:	08 0f       	add	r16, r24
    d1d0:	19 1f       	adc	r17, r25
    d1d2:	2a 1f       	adc	r18, r26
    d1d4:	3b 1f       	adc	r19, r27
    d1d6:	08 8f       	std	Y+24, r16	; 0x18
    d1d8:	19 8f       	std	Y+25, r17	; 0x19
    d1da:	2a 8f       	std	Y+26, r18	; 0x1a
    d1dc:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d1de:	88 89       	ldd	r24, Y+16	; 0x10
    d1e0:	99 89       	ldd	r25, Y+17	; 0x11
    d1e2:	aa 89       	ldd	r26, Y+18	; 0x12
    d1e4:	bb 89       	ldd	r27, Y+19	; 0x13
    d1e6:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d1e8:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d1ea:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d1ec:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d1ee:	80 0f       	add	r24, r16
    d1f0:	91 1f       	adc	r25, r17
    d1f2:	a2 1f       	adc	r26, r18
    d1f4:	b3 1f       	adc	r27, r19
    d1f6:	28 8d       	ldd	r18, Y+24	; 0x18
    d1f8:	39 8d       	ldd	r19, Y+25	; 0x19
    d1fa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d1fc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d1fe:	82 0f       	add	r24, r18
    d200:	93 1f       	adc	r25, r19
    d202:	a4 1f       	adc	r26, r20
    d204:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d206:	4b ad       	ldd	r20, Y+59	; 0x3b
    d208:	5c ad       	ldd	r21, Y+60	; 0x3c
    d20a:	6d ad       	ldd	r22, Y+61	; 0x3d
    d20c:	7e ad       	ldd	r23, Y+62	; 0x3e
    d20e:	48 0f       	add	r20, r24
    d210:	59 1f       	adc	r21, r25
    d212:	6a 1f       	adc	r22, r26
    d214:	7b 1f       	adc	r23, r27
    d216:	0f a9       	ldd	r16, Y+55	; 0x37
    d218:	18 ad       	ldd	r17, Y+56	; 0x38
    d21a:	29 ad       	ldd	r18, Y+57	; 0x39
    d21c:	3a ad       	ldd	r19, Y+58	; 0x3a
    d21e:	40 23       	and	r20, r16
    d220:	51 23       	and	r21, r17
    d222:	62 23       	and	r22, r18
    d224:	73 23       	and	r23, r19
    d226:	48 1b       	sub	r20, r24
    d228:	59 0b       	sbc	r21, r25
    d22a:	6a 0b       	sbc	r22, r26
    d22c:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d22e:	1f 85       	ldd	r17, Y+15	; 0x0f
    d230:	13 30       	cpi	r17, 0x03	; 3
    d232:	09 f0       	breq	.+2      	; 0xd236 <f_mkfs+0x40a>
    d234:	a4 c0       	rjmp	.+328    	; 0xd37e <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d236:	08 a1       	ldd	r16, Y+32	; 0x20
    d238:	19 a1       	ldd	r17, Y+33	; 0x21
    d23a:	2a a1       	ldd	r18, Y+34	; 0x22
    d23c:	3b a1       	ldd	r19, Y+35	; 0x23
    d23e:	04 0f       	add	r16, r20
    d240:	15 1f       	adc	r17, r21
    d242:	26 1f       	adc	r18, r22
    d244:	37 1f       	adc	r19, r23
    d246:	08 a3       	std	Y+32, r16	; 0x20
    d248:	19 a3       	std	Y+33, r17	; 0x21
    d24a:	2a a3       	std	Y+34, r18	; 0x22
    d24c:	3b a3       	std	Y+35, r19	; 0x23
    d24e:	08 8d       	ldd	r16, Y+24	; 0x18
    d250:	19 8d       	ldd	r17, Y+25	; 0x19
    d252:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d254:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d256:	04 0f       	add	r16, r20
    d258:	15 1f       	adc	r17, r21
    d25a:	26 1f       	adc	r18, r22
    d25c:	37 1f       	adc	r19, r23
    d25e:	08 8f       	std	Y+24, r16	; 0x18
    d260:	19 8f       	std	Y+25, r17	; 0x19
    d262:	2a 8f       	std	Y+26, r18	; 0x1a
    d264:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d266:	b3 01       	movw	r22, r6
    d268:	a2 01       	movw	r20, r4
    d26a:	f4 e0       	ldi	r31, 0x04	; 4
    d26c:	44 0f       	add	r20, r20
    d26e:	55 1f       	adc	r21, r21
    d270:	66 1f       	adc	r22, r22
    d272:	77 1f       	adc	r23, r23
    d274:	fa 95       	dec	r31
    d276:	d1 f7       	brne	.-12     	; 0xd26c <f_mkfs+0x440>
    d278:	0c 89       	ldd	r16, Y+20	; 0x14
    d27a:	1d 89       	ldd	r17, Y+21	; 0x15
    d27c:	2e 89       	ldd	r18, Y+22	; 0x16
    d27e:	3f 89       	ldd	r19, Y+23	; 0x17
    d280:	40 1b       	sub	r20, r16
    d282:	51 0b       	sbc	r21, r17
    d284:	62 0b       	sbc	r22, r18
    d286:	73 0b       	sbc	r23, r19
    d288:	84 0f       	add	r24, r20
    d28a:	95 1f       	adc	r25, r21
    d28c:	a6 1f       	adc	r26, r22
    d28e:	b7 1f       	adc	r27, r23
    d290:	0b 85       	ldd	r16, Y+11	; 0x0b
    d292:	1c 85       	ldd	r17, Y+12	; 0x0c
    d294:	2d 85       	ldd	r18, Y+13	; 0x0d
    d296:	3e 85       	ldd	r19, Y+14	; 0x0e
    d298:	08 17       	cp	r16, r24
    d29a:	19 07       	cpc	r17, r25
    d29c:	2a 07       	cpc	r18, r26
    d29e:	3b 07       	cpc	r19, r27
    d2a0:	08 f4       	brcc	.+2      	; 0xd2a4 <f_mkfs+0x478>
    d2a2:	47 ce       	rjmp	.-882    	; 0xcf32 <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d2a4:	d9 01       	movw	r26, r18
    d2a6:	c8 01       	movw	r24, r16
    d2a8:	28 a1       	ldd	r18, Y+32	; 0x20
    d2aa:	39 a1       	ldd	r19, Y+33	; 0x21
    d2ac:	4a a1       	ldd	r20, Y+34	; 0x22
    d2ae:	5b a1       	ldd	r21, Y+35	; 0x23
    d2b0:	82 1b       	sub	r24, r18
    d2b2:	93 0b       	sbc	r25, r19
    d2b4:	a4 0b       	sbc	r26, r20
    d2b6:	b5 0b       	sbc	r27, r21
    d2b8:	08 89       	ldd	r16, Y+16	; 0x10
    d2ba:	19 89       	ldd	r17, Y+17	; 0x11
    d2bc:	2a 89       	ldd	r18, Y+18	; 0x12
    d2be:	3b 89       	ldd	r19, Y+19	; 0x13
    d2c0:	80 1b       	sub	r24, r16
    d2c2:	91 0b       	sbc	r25, r17
    d2c4:	a2 0b       	sbc	r26, r18
    d2c6:	b3 0b       	sbc	r27, r19
    d2c8:	bc 01       	movw	r22, r24
    d2ca:	cd 01       	movw	r24, r26
    d2cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d2ce:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d2d0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d2d2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d2d4:	62 1b       	sub	r22, r18
    d2d6:	73 0b       	sbc	r23, r19
    d2d8:	84 0b       	sbc	r24, r20
    d2da:	95 0b       	sbc	r25, r21
    d2dc:	a3 01       	movw	r20, r6
    d2de:	92 01       	movw	r18, r4
    d2e0:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
    d2e4:	28 a7       	std	Y+40, r18	; 0x28
    d2e6:	39 a7       	std	Y+41, r19	; 0x29
    d2e8:	4a a7       	std	Y+42, r20	; 0x2a
    d2ea:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d2ec:	3f 85       	ldd	r19, Y+15	; 0x0f
    d2ee:	33 30       	cpi	r19, 0x03	; 3
    d2f0:	09 f4       	brne	.+2      	; 0xd2f4 <f_mkfs+0x4c8>
    d2f2:	52 c0       	rjmp	.+164    	; 0xd398 <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d2f4:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d2f6:	08 a5       	ldd	r16, Y+40	; 0x28
    d2f8:	19 a5       	ldd	r17, Y+41	; 0x29
    d2fa:	2a a5       	ldd	r18, Y+42	; 0x2a
    d2fc:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d2fe:	f2 30       	cpi	r31, 0x02	; 2
    d300:	09 f0       	breq	.+2      	; 0xd304 <f_mkfs+0x4d8>
    d302:	83 c0       	rjmp	.+262    	; 0xd40a <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d304:	06 3f       	cpi	r16, 0xF6	; 246
    d306:	4f ef       	ldi	r20, 0xFF	; 255
    d308:	14 07       	cpc	r17, r20
    d30a:	21 05       	cpc	r18, r1
    d30c:	31 05       	cpc	r19, r1
    d30e:	08 f4       	brcc	.+2      	; 0xd312 <f_mkfs+0x4e6>
    d310:	5f c0       	rjmp	.+190    	; 0xd3d0 <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d312:	81 14       	cp	r8, r1
    d314:	91 04       	cpc	r9, r1
    d316:	a1 04       	cpc	r10, r1
    d318:	b1 04       	cpc	r11, r1
    d31a:	09 f0       	breq	.+2      	; 0xd31e <f_mkfs+0x4f2>
    d31c:	e8 c2       	rjmp	.+1488   	; 0xd8ee <f_mkfs+0xac2>
    d31e:	d3 01       	movw	r26, r6
    d320:	c2 01       	movw	r24, r4
    d322:	88 0f       	add	r24, r24
    d324:	99 1f       	adc	r25, r25
    d326:	aa 1f       	adc	r26, r26
    d328:	bb 1f       	adc	r27, r27
    d32a:	81 34       	cpi	r24, 0x41	; 65
    d32c:	91 05       	cpc	r25, r1
    d32e:	a1 05       	cpc	r26, r1
    d330:	b1 05       	cpc	r27, r1
    d332:	08 f0       	brcs	.+2      	; 0xd336 <f_mkfs+0x50a>
    d334:	d0 c2       	rjmp	.+1440   	; 0xd8d6 <f_mkfs+0xaaa>
    d336:	4c 01       	movw	r8, r24
    d338:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d33a:	81 14       	cp	r8, r1
    d33c:	91 04       	cpc	r9, r1
    d33e:	a1 04       	cpc	r10, r1
    d340:	b1 04       	cpc	r11, r1
    d342:	39 f4       	brne	.+14     	; 0xd352 <f_mkfs+0x526>
    d344:	e2 e8       	ldi	r30, 0x82	; 130
    d346:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d348:	41 2c       	mov	r4, r1
    d34a:	51 2c       	mov	r5, r1
    d34c:	32 01       	movw	r6, r4
    d34e:	43 94       	inc	r4
    d350:	f7 ce       	rjmp	.-530    	; 0xd140 <f_mkfs+0x314>
    d352:	24 01       	movw	r4, r8
    d354:	35 01       	movw	r6, r10
    d356:	f8 ce       	rjmp	.-528    	; 0xd148 <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d358:	a3 e0       	ldi	r26, 0x03	; 3
    d35a:	b0 e0       	ldi	r27, 0x00	; 0
    d35c:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    d360:	dc 01       	movw	r26, r24
    d362:	cb 01       	movw	r24, r22
    d364:	01 96       	adiw	r24, 0x01	; 1
    d366:	a1 1d       	adc	r26, r1
    d368:	b1 1d       	adc	r27, r1
    d36a:	b6 95       	lsr	r27
    d36c:	a7 95       	ror	r26
    d36e:	97 95       	ror	r25
    d370:	87 95       	ror	r24
    d372:	03 96       	adiw	r24, 0x03	; 3
    d374:	a1 1d       	adc	r26, r1
    d376:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d378:	31 e0       	ldi	r19, 0x01	; 1
    d37a:	3f 87       	std	Y+15, r19	; 0x0f
    d37c:	ff ce       	rjmp	.-514    	; 0xd17c <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d37e:	08 89       	ldd	r16, Y+16	; 0x10
    d380:	19 89       	ldd	r17, Y+17	; 0x11
    d382:	2a 89       	ldd	r18, Y+18	; 0x12
    d384:	3b 89       	ldd	r19, Y+19	; 0x13
    d386:	04 0f       	add	r16, r20
    d388:	15 1f       	adc	r17, r21
    d38a:	26 1f       	adc	r18, r22
    d38c:	37 1f       	adc	r19, r23
    d38e:	08 8b       	std	Y+16, r16	; 0x10
    d390:	19 8b       	std	Y+17, r17	; 0x11
    d392:	2a 8b       	std	Y+18, r18	; 0x12
    d394:	3b 8b       	std	Y+19, r19	; 0x13
    d396:	67 cf       	rjmp	.-306    	; 0xd266 <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d398:	88 a5       	ldd	r24, Y+40	; 0x28
    d39a:	99 a5       	ldd	r25, Y+41	; 0x29
    d39c:	aa a5       	ldd	r26, Y+42	; 0x2a
    d39e:	bb a5       	ldd	r27, Y+43	; 0x2b
    d3a0:	86 3f       	cpi	r24, 0xF6	; 246
    d3a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d3a4:	a1 05       	cpc	r26, r1
    d3a6:	b1 05       	cpc	r27, r1
    d3a8:	c8 f5       	brcc	.+114    	; 0xd41c <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d3aa:	81 14       	cp	r8, r1
    d3ac:	91 04       	cpc	r9, r1
    d3ae:	a1 04       	cpc	r10, r1
    d3b0:	b1 04       	cpc	r11, r1
    d3b2:	09 f0       	breq	.+2      	; 0xd3b6 <f_mkfs+0x58a>
    d3b4:	be cd       	rjmp	.-1156   	; 0xcf32 <f_mkfs+0x106>
    d3b6:	53 01       	movw	r10, r6
    d3b8:	42 01       	movw	r8, r4
    d3ba:	b6 94       	lsr	r11
    d3bc:	a7 94       	ror	r10
    d3be:	97 94       	ror	r9
    d3c0:	87 94       	ror	r8
    d3c2:	81 14       	cp	r8, r1
    d3c4:	91 04       	cpc	r9, r1
    d3c6:	a1 04       	cpc	r10, r1
    d3c8:	b1 04       	cpc	r11, r1
    d3ca:	09 f4       	brne	.+2      	; 0xd3ce <f_mkfs+0x5a2>
    d3cc:	b2 cd       	rjmp	.-1180   	; 0xcf32 <f_mkfs+0x106>
    d3ce:	4e ce       	rjmp	.-868    	; 0xd06c <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d3d0:	88 a5       	ldd	r24, Y+40	; 0x28
    d3d2:	99 a5       	ldd	r25, Y+41	; 0x29
    d3d4:	aa a5       	ldd	r26, Y+42	; 0x2a
    d3d6:	bb a5       	ldd	r27, Y+43	; 0x2b
    d3d8:	86 3f       	cpi	r24, 0xF6	; 246
    d3da:	9f 40       	sbci	r25, 0x0F	; 15
    d3dc:	a1 05       	cpc	r26, r1
    d3de:	b1 05       	cpc	r27, r1
    d3e0:	e8 f4       	brcc	.+58     	; 0xd41c <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d3e2:	81 14       	cp	r8, r1
    d3e4:	91 04       	cpc	r9, r1
    d3e6:	a1 04       	cpc	r10, r1
    d3e8:	b1 04       	cpc	r11, r1
    d3ea:	09 f0       	breq	.+2      	; 0xd3ee <f_mkfs+0x5c2>
    d3ec:	a2 cd       	rjmp	.-1212   	; 0xcf32 <f_mkfs+0x106>
    d3ee:	53 01       	movw	r10, r6
    d3f0:	42 01       	movw	r8, r4
    d3f2:	88 0c       	add	r8, r8
    d3f4:	99 1c       	adc	r9, r9
    d3f6:	aa 1c       	adc	r10, r10
    d3f8:	bb 1c       	adc	r11, r11
    d3fa:	f1 e8       	ldi	r31, 0x81	; 129
    d3fc:	8f 16       	cp	r8, r31
    d3fe:	91 04       	cpc	r9, r1
    d400:	a1 04       	cpc	r10, r1
    d402:	b1 04       	cpc	r11, r1
    d404:	08 f0       	brcs	.+2      	; 0xd408 <f_mkfs+0x5dc>
    d406:	95 cd       	rjmp	.-1238   	; 0xcf32 <f_mkfs+0x106>
    d408:	98 cf       	rjmp	.-208    	; 0xd33a <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d40a:	06 3f       	cpi	r16, 0xF6	; 246
    d40c:	4f e0       	ldi	r20, 0x0F	; 15
    d40e:	14 07       	cpc	r17, r20
    d410:	21 05       	cpc	r18, r1
    d412:	31 05       	cpc	r19, r1
    d414:	08 f0       	brcs	.+2      	; 0xd418 <f_mkfs+0x5ec>
    d416:	8d cd       	rjmp	.-1254   	; 0xcf32 <f_mkfs+0x106>
    d418:	51 e0       	ldi	r21, 0x01	; 1
    d41a:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d41c:	40 e0       	ldi	r20, 0x00	; 0
    d41e:	52 e0       	ldi	r21, 0x02	; 2
    d420:	60 e0       	ldi	r22, 0x00	; 0
    d422:	70 e0       	ldi	r23, 0x00	; 0
    d424:	c6 01       	movw	r24, r12
    d426:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
    d42a:	4b e0       	ldi	r20, 0x0B	; 11
    d42c:	50 e0       	ldi	r21, 0x00	; 0
    d42e:	65 ed       	ldi	r22, 0xD5	; 213
    d430:	77 e0       	ldi	r23, 0x07	; 7
    d432:	c6 01       	movw	r24, r12
    d434:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d438:	d6 01       	movw	r26, r12
    d43a:	1b 96       	adiw	r26, 0x0b	; 11
    d43c:	1c 92       	st	X, r1
    d43e:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d440:	82 e0       	ldi	r24, 0x02	; 2
    d442:	1c 96       	adiw	r26, 0x0c	; 12
    d444:	8c 93       	st	X, r24
    d446:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d448:	1d 96       	adiw	r26, 0x0d	; 13
    d44a:	4c 92       	st	X, r4
    d44c:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d44e:	e8 a1       	ldd	r30, Y+32	; 0x20
    d450:	1e 96       	adiw	r26, 0x0e	; 14
    d452:	ec 93       	st	X, r30
    d454:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d456:	f9 a1       	ldd	r31, Y+33	; 0x21
    d458:	1f 96       	adiw	r26, 0x0f	; 15
    d45a:	fc 93       	st	X, r31
    d45c:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d45e:	81 e0       	ldi	r24, 0x01	; 1
    d460:	50 96       	adiw	r26, 0x10	; 16
    d462:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d464:	0f 85       	ldd	r16, Y+15	; 0x0f
    d466:	03 30       	cpi	r16, 0x03	; 3
    d468:	11 f0       	breq	.+4      	; 0xd46e <f_mkfs+0x642>
    d46a:	82 e0       	ldi	r24, 0x02	; 2
    d46c:	01 c0       	rjmp	.+2      	; 0xd470 <f_mkfs+0x644>
    d46e:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d470:	d6 01       	movw	r26, r12
    d472:	51 96       	adiw	r26, 0x11	; 17
    d474:	1c 92       	st	X, r1
    d476:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d478:	52 96       	adiw	r26, 0x12	; 18
    d47a:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d47c:	49 81       	ldd	r20, Y+1	; 0x01
    d47e:	5a 81       	ldd	r21, Y+2	; 0x02
    d480:	6b 81       	ldd	r22, Y+3	; 0x03
    d482:	7c 81       	ldd	r23, Y+4	; 0x04
    d484:	41 15       	cp	r20, r1
    d486:	51 05       	cpc	r21, r1
    d488:	b1 e0       	ldi	r27, 0x01	; 1
    d48a:	6b 07       	cpc	r22, r27
    d48c:	71 05       	cpc	r23, r1
    d48e:	20 f4       	brcc	.+8      	; 0xd498 <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d490:	f6 01       	movw	r30, r12
    d492:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d494:	54 8b       	std	Z+20, r21	; 0x14
    d496:	04 c0       	rjmp	.+8      	; 0xd4a0 <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d498:	c6 01       	movw	r24, r12
    d49a:	80 96       	adiw	r24, 0x20	; 32
    d49c:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d4a0:	88 ef       	ldi	r24, 0xF8	; 248
    d4a2:	d6 01       	movw	r26, r12
    d4a4:	55 96       	adiw	r26, 0x15	; 21
    d4a6:	8c 93       	st	X, r24
    d4a8:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4aa:	8f e3       	ldi	r24, 0x3F	; 63
    d4ac:	58 96       	adiw	r26, 0x18	; 24
    d4ae:	8c 93       	st	X, r24
    d4b0:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d4b2:	59 96       	adiw	r26, 0x19	; 25
    d4b4:	1c 92       	st	X, r1
    d4b6:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4b8:	8f ef       	ldi	r24, 0xFF	; 255
    d4ba:	5a 96       	adiw	r26, 0x1a	; 26
    d4bc:	8c 93       	st	X, r24
    d4be:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d4c0:	5b 96       	adiw	r26, 0x1b	; 27
    d4c2:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d4c4:	4c 89       	ldd	r20, Y+20	; 0x14
    d4c6:	5d 89       	ldd	r21, Y+21	; 0x15
    d4c8:	6e 89       	ldd	r22, Y+22	; 0x16
    d4ca:	7f 89       	ldd	r23, Y+23	; 0x17
    d4cc:	c6 01       	movw	r24, r12
    d4ce:	4c 96       	adiw	r24, 0x1c	; 28
    d4d0:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
		if (fmt == FS_FAT32) {
    d4d4:	bf 85       	ldd	r27, Y+15	; 0x0f
    d4d6:	b3 30       	cpi	r27, 0x03	; 3
    d4d8:	61 f5       	brne	.+88     	; 0xd532 <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d4da:	0e 94 92 73 	call	0xe724	; 0xe724 <get_fattime>
    d4de:	ab 01       	movw	r20, r22
    d4e0:	bc 01       	movw	r22, r24
    d4e2:	c6 01       	movw	r24, r12
    d4e4:	8d 5b       	subi	r24, 0xBD	; 189
    d4e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d4e8:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d4ec:	48 89       	ldd	r20, Y+16	; 0x10
    d4ee:	59 89       	ldd	r21, Y+17	; 0x11
    d4f0:	6a 89       	ldd	r22, Y+18	; 0x12
    d4f2:	7b 89       	ldd	r23, Y+19	; 0x13
    d4f4:	c6 01       	movw	r24, r12
    d4f6:	84 96       	adiw	r24, 0x24	; 36
    d4f8:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4fc:	82 e0       	ldi	r24, 0x02	; 2
    d4fe:	f6 01       	movw	r30, r12
    d500:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d502:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d504:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d506:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d508:	81 e0       	ldi	r24, 0x01	; 1
    d50a:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d50c:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d50e:	86 e0       	ldi	r24, 0x06	; 6
    d510:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d512:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d514:	80 e8       	ldi	r24, 0x80	; 128
    d516:	e0 5c       	subi	r30, 0xC0	; 192
    d518:	ff 4f       	sbci	r31, 0xFF	; 255
    d51a:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d51c:	89 e2       	ldi	r24, 0x29	; 41
    d51e:	32 96       	adiw	r30, 0x02	; 2
    d520:	80 83       	st	Z, r24
    d522:	43 e1       	ldi	r20, 0x13	; 19
    d524:	50 e0       	ldi	r21, 0x00	; 0
    d526:	61 ee       	ldi	r22, 0xE1	; 225
    d528:	77 e0       	ldi	r23, 0x07	; 7
    d52a:	c6 01       	movw	r24, r12
    d52c:	89 5b       	subi	r24, 0xB9	; 185
    d52e:	9f 4f       	sbci	r25, 0xFF	; 255
    d530:	1e c0       	rjmp	.+60     	; 0xd56e <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d532:	0e 94 92 73 	call	0xe724	; 0xe724 <get_fattime>
    d536:	ab 01       	movw	r20, r22
    d538:	bc 01       	movw	r22, r24
    d53a:	c6 01       	movw	r24, r12
    d53c:	87 96       	adiw	r24, 0x27	; 39
    d53e:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d542:	e8 89       	ldd	r30, Y+16	; 0x10
    d544:	d6 01       	movw	r26, r12
    d546:	56 96       	adiw	r26, 0x16	; 22
    d548:	ec 93       	st	X, r30
    d54a:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d54c:	f9 89       	ldd	r31, Y+17	; 0x11
    d54e:	57 96       	adiw	r26, 0x17	; 23
    d550:	fc 93       	st	X, r31
    d552:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d554:	80 e8       	ldi	r24, 0x80	; 128
    d556:	94 96       	adiw	r26, 0x24	; 36
    d558:	8c 93       	st	X, r24
    d55a:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d55c:	89 e2       	ldi	r24, 0x29	; 41
    d55e:	96 96       	adiw	r26, 0x26	; 38
    d560:	8c 93       	st	X, r24
    d562:	43 e1       	ldi	r20, 0x13	; 19
    d564:	50 e0       	ldi	r21, 0x00	; 0
    d566:	65 ef       	ldi	r22, 0xF5	; 245
    d568:	77 e0       	ldi	r23, 0x07	; 7
    d56a:	c6 01       	movw	r24, r12
    d56c:	8b 96       	adiw	r24, 0x2b	; 43
    d56e:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d572:	46 01       	movw	r8, r12
    d574:	02 e0       	ldi	r16, 0x02	; 2
    d576:	80 1a       	sub	r8, r16
    d578:	0e ef       	ldi	r16, 0xFE	; 254
    d57a:	90 0a       	sbc	r9, r16
    d57c:	45 e5       	ldi	r20, 0x55	; 85
    d57e:	b4 2e       	mov	r11, r20
    d580:	d4 01       	movw	r26, r8
    d582:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d584:	76 01       	movw	r14, r12
    d586:	b1 e0       	ldi	r27, 0x01	; 1
    d588:	eb 1a       	sub	r14, r27
    d58a:	be ef       	ldi	r27, 0xFE	; 254
    d58c:	fb 0a       	sbc	r15, r27
    d58e:	5a ea       	ldi	r21, 0xAA	; 170
    d590:	a5 2e       	mov	r10, r21
    d592:	f7 01       	movw	r30, r14
    d594:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d596:	01 e0       	ldi	r16, 0x01	; 1
    d598:	10 e0       	ldi	r17, 0x00	; 0
    d59a:	2c 89       	ldd	r18, Y+20	; 0x14
    d59c:	3d 89       	ldd	r19, Y+21	; 0x15
    d59e:	4e 89       	ldd	r20, Y+22	; 0x16
    d5a0:	5f 89       	ldd	r21, Y+23	; 0x17
    d5a2:	b6 01       	movw	r22, r12
    d5a4:	82 2d       	mov	r24, r2
    d5a6:	4b d2       	rcall	.+1174   	; 0xda3e <disk_write>
    d5a8:	89 2b       	or	r24, r25
    d5aa:	09 f0       	breq	.+2      	; 0xd5ae <f_mkfs+0x782>
    d5ac:	91 c1       	rjmp	.+802    	; 0xd8d0 <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d5ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    d5b0:	f3 30       	cpi	r31, 0x03	; 3
    d5b2:	09 f0       	breq	.+2      	; 0xd5b6 <f_mkfs+0x78a>
    d5b4:	5e c0       	rjmp	.+188    	; 0xd672 <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d5b6:	01 e0       	ldi	r16, 0x01	; 1
    d5b8:	10 e0       	ldi	r17, 0x00	; 0
    d5ba:	2c 89       	ldd	r18, Y+20	; 0x14
    d5bc:	3d 89       	ldd	r19, Y+21	; 0x15
    d5be:	4e 89       	ldd	r20, Y+22	; 0x16
    d5c0:	5f 89       	ldd	r21, Y+23	; 0x17
    d5c2:	2a 5f       	subi	r18, 0xFA	; 250
    d5c4:	3f 4f       	sbci	r19, 0xFF	; 255
    d5c6:	4f 4f       	sbci	r20, 0xFF	; 255
    d5c8:	5f 4f       	sbci	r21, 0xFF	; 255
    d5ca:	b6 01       	movw	r22, r12
    d5cc:	82 2d       	mov	r24, r2
    d5ce:	37 d2       	rcall	.+1134   	; 0xda3e <disk_write>
			mem_set(buf, 0, ss);
    d5d0:	40 e0       	ldi	r20, 0x00	; 0
    d5d2:	52 e0       	ldi	r21, 0x02	; 2
    d5d4:	60 e0       	ldi	r22, 0x00	; 0
    d5d6:	70 e0       	ldi	r23, 0x00	; 0
    d5d8:	c6 01       	movw	r24, r12
    d5da:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5de:	82 e5       	ldi	r24, 0x52	; 82
    d5e0:	d6 01       	movw	r26, r12
    d5e2:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d5e4:	11 96       	adiw	r26, 0x01	; 1
    d5e6:	8c 93       	st	X, r24
    d5e8:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d5ea:	81 e6       	ldi	r24, 0x61	; 97
    d5ec:	12 96       	adiw	r26, 0x02	; 2
    d5ee:	8c 93       	st	X, r24
    d5f0:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d5f2:	91 e4       	ldi	r25, 0x41	; 65
    d5f4:	13 96       	adiw	r26, 0x03	; 3
    d5f6:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5f8:	22 e7       	ldi	r18, 0x72	; 114
    d5fa:	f6 01       	movw	r30, r12
    d5fc:	ec 51       	subi	r30, 0x1C	; 28
    d5fe:	fe 4f       	sbci	r31, 0xFE	; 254
    d600:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d602:	31 96       	adiw	r30, 0x01	; 1
    d604:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d606:	31 96       	adiw	r30, 0x01	; 1
    d608:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d60a:	31 96       	adiw	r30, 0x01	; 1
    d60c:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d60e:	48 a5       	ldd	r20, Y+40	; 0x28
    d610:	59 a5       	ldd	r21, Y+41	; 0x29
    d612:	6a a5       	ldd	r22, Y+42	; 0x2a
    d614:	7b a5       	ldd	r23, Y+43	; 0x2b
    d616:	41 50       	subi	r20, 0x01	; 1
    d618:	51 09       	sbc	r21, r1
    d61a:	61 09       	sbc	r22, r1
    d61c:	71 09       	sbc	r23, r1
    d61e:	c6 01       	movw	r24, r12
    d620:	88 51       	subi	r24, 0x18	; 24
    d622:	9e 4f       	sbci	r25, 0xFE	; 254
    d624:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d628:	82 e0       	ldi	r24, 0x02	; 2
    d62a:	f6 01       	movw	r30, r12
    d62c:	e4 51       	subi	r30, 0x14	; 20
    d62e:	fe 4f       	sbci	r31, 0xFE	; 254
    d630:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d632:	31 96       	adiw	r30, 0x01	; 1
    d634:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d636:	31 96       	adiw	r30, 0x01	; 1
    d638:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d63a:	31 96       	adiw	r30, 0x01	; 1
    d63c:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d63e:	f4 01       	movw	r30, r8
    d640:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d642:	d7 01       	movw	r26, r14
    d644:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d646:	2c 89       	ldd	r18, Y+20	; 0x14
    d648:	3d 89       	ldd	r19, Y+21	; 0x15
    d64a:	4e 89       	ldd	r20, Y+22	; 0x16
    d64c:	5f 89       	ldd	r21, Y+23	; 0x17
    d64e:	29 5f       	subi	r18, 0xF9	; 249
    d650:	3f 4f       	sbci	r19, 0xFF	; 255
    d652:	4f 4f       	sbci	r20, 0xFF	; 255
    d654:	5f 4f       	sbci	r21, 0xFF	; 255
    d656:	b6 01       	movw	r22, r12
    d658:	82 2d       	mov	r24, r2
    d65a:	f1 d1       	rcall	.+994    	; 0xda3e <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d65c:	2c 89       	ldd	r18, Y+20	; 0x14
    d65e:	3d 89       	ldd	r19, Y+21	; 0x15
    d660:	4e 89       	ldd	r20, Y+22	; 0x16
    d662:	5f 89       	ldd	r21, Y+23	; 0x17
    d664:	2f 5f       	subi	r18, 0xFF	; 255
    d666:	3f 4f       	sbci	r19, 0xFF	; 255
    d668:	4f 4f       	sbci	r20, 0xFF	; 255
    d66a:	5f 4f       	sbci	r21, 0xFF	; 255
    d66c:	b6 01       	movw	r22, r12
    d66e:	82 2d       	mov	r24, r2
    d670:	e6 d1       	rcall	.+972    	; 0xda3e <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    d672:	4d a5       	ldd	r20, Y+45	; 0x2d
    d674:	5e a5       	ldd	r21, Y+46	; 0x2e
    d676:	60 e0       	ldi	r22, 0x00	; 0
    d678:	70 e0       	ldi	r23, 0x00	; 0
    d67a:	c6 01       	movw	r24, r12
    d67c:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    d680:	bf 85       	ldd	r27, Y+15	; 0x0f
    d682:	b3 30       	cpi	r27, 0x03	; 3
    d684:	89 f4       	brne	.+34     	; 0xd6a8 <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d686:	88 ef       	ldi	r24, 0xF8	; 248
    d688:	f6 01       	movw	r30, r12
    d68a:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d68c:	8f ef       	ldi	r24, 0xFF	; 255
    d68e:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    d690:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    d692:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d694:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    d696:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    d698:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    d69a:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d69c:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    d69e:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    d6a0:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    d6a2:	8f e0       	ldi	r24, 0x0F	; 15
    d6a4:	83 87       	std	Z+11, r24	; 0x0b
    d6a6:	0f c0       	rjmp	.+30     	; 0xd6c6 <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    d6a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    d6aa:	f1 30       	cpi	r31, 0x01	; 1
    d6ac:	29 f0       	breq	.+10     	; 0xd6b8 <f_mkfs+0x88c>
    d6ae:	48 ef       	ldi	r20, 0xF8	; 248
    d6b0:	5f ef       	ldi	r21, 0xFF	; 255
    d6b2:	6f ef       	ldi	r22, 0xFF	; 255
    d6b4:	7f ef       	ldi	r23, 0xFF	; 255
    d6b6:	04 c0       	rjmp	.+8      	; 0xd6c0 <f_mkfs+0x894>
    d6b8:	48 ef       	ldi	r20, 0xF8	; 248
    d6ba:	5f ef       	ldi	r21, 0xFF	; 255
    d6bc:	6f ef       	ldi	r22, 0xFF	; 255
    d6be:	70 e0       	ldi	r23, 0x00	; 0
    d6c0:	c6 01       	movw	r24, r12
    d6c2:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    d6c6:	88 88       	ldd	r8, Y+16	; 0x10
    d6c8:	99 88       	ldd	r9, Y+17	; 0x11
    d6ca:	aa 88       	ldd	r10, Y+18	; 0x12
    d6cc:	bb 88       	ldd	r11, Y+19	; 0x13
    d6ce:	0c a1       	ldd	r16, Y+36	; 0x24
    d6d0:	1d a1       	ldd	r17, Y+37	; 0x25
    d6d2:	2e a1       	ldd	r18, Y+38	; 0x26
    d6d4:	3f a1       	ldd	r19, Y+39	; 0x27
    d6d6:	08 15       	cp	r16, r8
    d6d8:	19 05       	cpc	r17, r9
    d6da:	2a 05       	cpc	r18, r10
    d6dc:	3b 05       	cpc	r19, r11
    d6de:	10 f4       	brcc	.+4      	; 0xd6e4 <f_mkfs+0x8b8>
    d6e0:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d6e2:	59 01       	movw	r10, r18
    d6e4:	84 01       	movw	r16, r8
    d6e6:	28 8d       	ldd	r18, Y+24	; 0x18
    d6e8:	39 8d       	ldd	r19, Y+25	; 0x19
    d6ea:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d6ec:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d6ee:	b6 01       	movw	r22, r12
    d6f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    d6f2:	a5 d1       	rcall	.+842    	; 0xda3e <disk_write>
    d6f4:	89 2b       	or	r24, r25
    d6f6:	09 f0       	breq	.+2      	; 0xd6fa <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    d6f8:	eb c0       	rjmp	.+470    	; 0xd8d0 <f_mkfs+0xaa4>
    d6fa:	40 e0       	ldi	r20, 0x00	; 0
    d6fc:	52 e0       	ldi	r21, 0x02	; 2
    d6fe:	60 e0       	ldi	r22, 0x00	; 0
    d700:	70 e0       	ldi	r23, 0x00	; 0
    d702:	c6 01       	movw	r24, r12
    d704:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>
				sect += n; nsect -= n;
    d708:	28 8d       	ldd	r18, Y+24	; 0x18
    d70a:	39 8d       	ldd	r19, Y+25	; 0x19
    d70c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d70e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d710:	28 0d       	add	r18, r8
    d712:	39 1d       	adc	r19, r9
    d714:	4a 1d       	adc	r20, r10
    d716:	5b 1d       	adc	r21, r11
    d718:	28 8f       	std	Y+24, r18	; 0x18
    d71a:	39 8f       	std	Y+25, r19	; 0x19
    d71c:	4a 8f       	std	Y+26, r20	; 0x1a
    d71e:	5b 8f       	std	Y+27, r21	; 0x1b
    d720:	88 89       	ldd	r24, Y+16	; 0x10
    d722:	99 89       	ldd	r25, Y+17	; 0x11
    d724:	aa 89       	ldd	r26, Y+18	; 0x12
    d726:	bb 89       	ldd	r27, Y+19	; 0x13
    d728:	88 19       	sub	r24, r8
    d72a:	99 09       	sbc	r25, r9
    d72c:	aa 09       	sbc	r26, r10
    d72e:	bb 09       	sbc	r27, r11
    d730:	88 8b       	std	Y+16, r24	; 0x10
    d732:	99 8b       	std	Y+17, r25	; 0x11
    d734:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    d736:	bb 8b       	std	Y+19, r27	; 0x13
    d738:	89 2b       	or	r24, r25
    d73a:	8a 2b       	or	r24, r26
    d73c:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    d73e:	19 f6       	brne	.-122    	; 0xd6c6 <f_mkfs+0x89a>
    d740:	9f 85       	ldd	r25, Y+15	; 0x0f
    d742:	93 30       	cpi	r25, 0x03	; 3
    d744:	21 f4       	brne	.+8      	; 0xd74e <f_mkfs+0x922>
    d746:	4c 8e       	std	Y+28, r4	; 0x1c
    d748:	5d 8e       	std	Y+29, r5	; 0x1d
    d74a:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    d74c:	7f 8e       	std	Y+31, r7	; 0x1f
    d74e:	8c 8c       	ldd	r8, Y+28	; 0x1c
    d750:	9d 8c       	ldd	r9, Y+29	; 0x1d
    d752:	ae 8c       	ldd	r10, Y+30	; 0x1e
    d754:	bf 8c       	ldd	r11, Y+31	; 0x1f
    d756:	0c a1       	ldd	r16, Y+36	; 0x24
    d758:	1d a1       	ldd	r17, Y+37	; 0x25
    d75a:	2e a1       	ldd	r18, Y+38	; 0x26
    d75c:	3f a1       	ldd	r19, Y+39	; 0x27
    d75e:	08 15       	cp	r16, r8
    d760:	19 05       	cpc	r17, r9
    d762:	2a 05       	cpc	r18, r10
    d764:	3b 05       	cpc	r19, r11
    d766:	10 f4       	brcc	.+4      	; 0xd76c <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d768:	48 01       	movw	r8, r16
    d76a:	59 01       	movw	r10, r18
    d76c:	84 01       	movw	r16, r8
    d76e:	28 8d       	ldd	r18, Y+24	; 0x18
    d770:	39 8d       	ldd	r19, Y+25	; 0x19
    d772:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d774:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d776:	b6 01       	movw	r22, r12
    d778:	8c a5       	ldd	r24, Y+44	; 0x2c
    d77a:	61 d1       	rcall	.+706    	; 0xda3e <disk_write>
    d77c:	89 2b       	or	r24, r25
    d77e:	09 f0       	breq	.+2      	; 0xd782 <f_mkfs+0x956>
			sect += n; nsect -= n;
    d780:	a7 c0       	rjmp	.+334    	; 0xd8d0 <f_mkfs+0xaa4>
    d782:	28 8d       	ldd	r18, Y+24	; 0x18
    d784:	39 8d       	ldd	r19, Y+25	; 0x19
    d786:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d788:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d78a:	28 0d       	add	r18, r8
    d78c:	39 1d       	adc	r19, r9
    d78e:	4a 1d       	adc	r20, r10
    d790:	5b 1d       	adc	r21, r11
    d792:	28 8f       	std	Y+24, r18	; 0x18
    d794:	39 8f       	std	Y+25, r19	; 0x19
    d796:	4a 8f       	std	Y+26, r20	; 0x1a
    d798:	5b 8f       	std	Y+27, r21	; 0x1b
    d79a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    d79c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d79e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    d7a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    d7a2:	88 19       	sub	r24, r8
    d7a4:	99 09       	sbc	r25, r9
    d7a6:	aa 09       	sbc	r26, r10
    d7a8:	bb 09       	sbc	r27, r11
    d7aa:	8c 8f       	std	Y+28, r24	; 0x1c
    d7ac:	9d 8f       	std	Y+29, r25	; 0x1d
    d7ae:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    d7b0:	bf 8f       	std	Y+31, r27	; 0x1f
    d7b2:	89 2b       	or	r24, r25
    d7b4:	8a 2b       	or	r24, r26
    d7b6:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    d7b8:	51 f6       	brne	.-108    	; 0xd74e <f_mkfs+0x922>
    d7ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    d7bc:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    d7be:	69 f0       	breq	.+26     	; 0xd7da <f_mkfs+0x9ae>
    d7c0:	89 81       	ldd	r24, Y+1	; 0x01
    d7c2:	9a 81       	ldd	r25, Y+2	; 0x02
    d7c4:	ab 81       	ldd	r26, Y+3	; 0x03
    d7c6:	bc 81       	ldd	r27, Y+4	; 0x04
    d7c8:	00 97       	sbiw	r24, 0x00	; 0
    d7ca:	a1 40       	sbci	r26, 0x01	; 1
    d7cc:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d7ce:	38 f4       	brcc	.+14     	; 0xd7de <f_mkfs+0x9b2>
    d7d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    d7d2:	f2 30       	cpi	r31, 0x02	; 2
    d7d4:	31 f4       	brne	.+12     	; 0xd7e2 <f_mkfs+0x9b6>
    d7d6:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    d7d8:	05 c0       	rjmp	.+10     	; 0xd7e4 <f_mkfs+0x9b8>
    d7da:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    d7dc:	03 c0       	rjmp	.+6      	; 0xd7e4 <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d7de:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    d7e0:	01 c0       	rjmp	.+2      	; 0xd7e4 <f_mkfs+0x9b8>
    d7e2:	11 e0       	ldi	r17, 0x01	; 1
    d7e4:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    d7e6:	00 23       	and	r16, r16
    d7e8:	69 f0       	breq	.+26     	; 0xd804 <f_mkfs+0x9d8>
    d7ea:	40 e0       	ldi	r20, 0x00	; 0
    d7ec:	50 e0       	ldi	r21, 0x00	; 0
    d7ee:	60 e0       	ldi	r22, 0x00	; 0
    d7f0:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d7f2:	35 d1       	rcall	.+618    	; 0xda5e <disk_ioctl>
    d7f4:	31 e0       	ldi	r19, 0x01	; 1
    d7f6:	20 e0       	ldi	r18, 0x00	; 0
    d7f8:	89 2b       	or	r24, r25
    d7fa:	09 f4       	brne	.+2      	; 0xd7fe <f_mkfs+0x9d2>
    d7fc:	30 e0       	ldi	r19, 0x00	; 0
    d7fe:	83 2f       	mov	r24, r19
    d800:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    d802:	7b c0       	rjmp	.+246    	; 0xd8fa <f_mkfs+0xace>
    d804:	40 e0       	ldi	r20, 0x00	; 0
    d806:	52 e0       	ldi	r21, 0x02	; 2
    d808:	60 e0       	ldi	r22, 0x00	; 0
    d80a:	70 e0       	ldi	r23, 0x00	; 0
    d80c:	c6 01       	movw	r24, r12
    d80e:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d812:	f6 01       	movw	r30, r12
    d814:	e2 50       	subi	r30, 0x02	; 2
    d816:	fe 4f       	sbci	r31, 0xFE	; 254
    d818:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    d81a:	80 83       	st	Z, r24
    d81c:	31 96       	adiw	r30, 0x01	; 1
    d81e:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    d820:	80 83       	st	Z, r24
    d822:	e1 54       	subi	r30, 0x41	; 65
    d824:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    d826:	10 82       	st	Z, r1
    d828:	31 96       	adiw	r30, 0x01	; 1
    d82a:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    d82c:	80 83       	st	Z, r24
    d82e:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    d830:	80 83       	st	Z, r24
    d832:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    d834:	10 82       	st	Z, r1
    d836:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    d838:	10 83       	st	Z, r17
    d83a:	89 81       	ldd	r24, Y+1	; 0x01
    d83c:	9a 81       	ldd	r25, Y+2	; 0x02
    d83e:	ab 81       	ldd	r26, Y+3	; 0x03
    d840:	bc 81       	ldd	r27, Y+4	; 0x04
    d842:	2c 89       	ldd	r18, Y+20	; 0x14
    d844:	3d 89       	ldd	r19, Y+21	; 0x15
    d846:	4e 89       	ldd	r20, Y+22	; 0x16
    d848:	5f 89       	ldd	r21, Y+23	; 0x17
    d84a:	28 0f       	add	r18, r24
    d84c:	39 1f       	adc	r19, r25
    d84e:	4a 1f       	adc	r20, r26
    d850:	5b 1f       	adc	r21, r27
    d852:	ca 01       	movw	r24, r20
    d854:	b9 01       	movw	r22, r18
    d856:	21 ec       	ldi	r18, 0xC1	; 193
    d858:	3e e3       	ldi	r19, 0x3E	; 62
    d85a:	40 e0       	ldi	r20, 0x00	; 0
    d85c:	50 e0       	ldi	r21, 0x00	; 0
    d85e:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    d862:	f6 01       	movw	r30, r12
    d864:	ed 53       	subi	r30, 0x3D	; 61
    d866:	fe 4f       	sbci	r31, 0xFE	; 254
    d868:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    d86a:	80 83       	st	Z, r24
    d86c:	31 96       	adiw	r30, 0x01	; 1
    d86e:	da 01       	movw	r26, r20
    d870:	c9 01       	movw	r24, r18
    d872:	32 e0       	ldi	r19, 0x02	; 2
    d874:	b6 95       	lsr	r27
    d876:	a7 95       	ror	r26
    d878:	97 95       	ror	r25
    d87a:	87 95       	ror	r24
    d87c:	3a 95       	dec	r19
    d87e:	d1 f7       	brne	.-12     	; 0xd874 <f_mkfs+0xa48>
    d880:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    d882:	80 83       	st	Z, r24
    d884:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    d886:	20 83       	st	Z, r18
    d888:	4c 89       	ldd	r20, Y+20	; 0x14
    d88a:	5d 89       	ldd	r21, Y+21	; 0x15
    d88c:	6e 89       	ldd	r22, Y+22	; 0x16
    d88e:	7f 89       	ldd	r23, Y+23	; 0x17
    d890:	c6 01       	movw	r24, r12
    d892:	8a 53       	subi	r24, 0x3A	; 58
    d894:	9e 4f       	sbci	r25, 0xFE	; 254
    d896:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    d89a:	49 81       	ldd	r20, Y+1	; 0x01
    d89c:	5a 81       	ldd	r21, Y+2	; 0x02
    d89e:	6b 81       	ldd	r22, Y+3	; 0x03
    d8a0:	7c 81       	ldd	r23, Y+4	; 0x04
    d8a2:	c6 01       	movw	r24, r12
    d8a4:	86 53       	subi	r24, 0x36	; 54
    d8a6:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    d8a8:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <st_dword>
    d8ac:	01 e0       	ldi	r16, 0x01	; 1
    d8ae:	10 e0       	ldi	r17, 0x00	; 0
    d8b0:	20 e0       	ldi	r18, 0x00	; 0
    d8b2:	30 e0       	ldi	r19, 0x00	; 0
    d8b4:	a9 01       	movw	r20, r18
    d8b6:	b6 01       	movw	r22, r12
    d8b8:	82 2d       	mov	r24, r2
    d8ba:	c1 d0       	rcall	.+386    	; 0xda3e <disk_write>
    d8bc:	89 2b       	or	r24, r25
    d8be:	09 f4       	brne	.+2      	; 0xd8c2 <f_mkfs+0xa96>
    d8c0:	94 cf       	rjmp	.-216    	; 0xd7ea <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d8c2:	06 c0       	rjmp	.+12     	; 0xd8d0 <f_mkfs+0xaa4>
    d8c4:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d8c6:	05 c0       	rjmp	.+10     	; 0xd8d2 <f_mkfs+0xaa6>
    d8c8:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d8ca:	03 c0       	rjmp	.+6      	; 0xd8d2 <f_mkfs+0xaa6>
    d8cc:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d8ce:	01 c0       	rjmp	.+2      	; 0xd8d2 <f_mkfs+0xaa6>
    d8d0:	81 e0       	ldi	r24, 0x01	; 1
    d8d2:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d8d4:	12 c0       	rjmp	.+36     	; 0xd8fa <f_mkfs+0xace>
    d8d6:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d8d8:	19 f0       	breq	.+6      	; 0xd8e0 <f_mkfs+0xab4>
    d8da:	23 e0       	ldi	r18, 0x03	; 3
    d8dc:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d8de:	c6 cb       	rjmp	.-2164   	; 0xd06c <f_mkfs+0x240>
    d8e0:	81 38       	cpi	r24, 0x81	; 129
    d8e2:	91 05       	cpc	r25, r1
    d8e4:	a1 05       	cpc	r26, r1
    d8e6:	b1 05       	cpc	r27, r1
    d8e8:	08 f0       	brcs	.+2      	; 0xd8ec <f_mkfs+0xac0>
    d8ea:	23 cb       	rjmp	.-2490   	; 0xcf32 <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d8ec:	24 cd       	rjmp	.-1464   	; 0xd336 <f_mkfs+0x50a>
    d8ee:	ff 20       	and	r15, r15
    d8f0:	09 f4       	brne	.+2      	; 0xd8f4 <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d8f2:	1f cb       	rjmp	.-2498   	; 0xcf32 <f_mkfs+0x106>
    d8f4:	33 e0       	ldi	r19, 0x03	; 3
    d8f6:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    d8f8:	b9 cb       	rjmp	.-2190   	; 0xd06c <f_mkfs+0x240>
    d8fa:	ce 5b       	subi	r28, 0xBE	; 190
    d8fc:	df 4f       	sbci	r29, 0xFF	; 255
    d8fe:	e2 e1       	ldi	r30, 0x12	; 18
    d900:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0000d904 <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d904:	0c 94 a6 29 	jmp	0x534c	; 0x534c <safemalloc>
}
    d908:	08 95       	ret

0000d90a <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    d90a:	0c 94 c7 29 	jmp	0x538e	; 0x538e <safefree>
    d90e:	08 95       	ret

0000d910 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    d910:	80 38       	cpi	r24, 0x80	; 128
    d912:	91 05       	cpc	r25, r1
    d914:	18 f1       	brcs	.+70     	; 0xd95c <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d916:	67 2b       	or	r22, r23
    d918:	61 f0       	breq	.+24     	; 0xd932 <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d91a:	8f 3f       	cpi	r24, 0xFF	; 255
    d91c:	91 05       	cpc	r25, r1
    d91e:	09 f0       	breq	.+2      	; 0xd922 <ff_convert+0x12>
    d920:	d8 f4       	brcc	.+54     	; 0xd958 <ff_convert+0x48>
    d922:	88 0f       	add	r24, r24
    d924:	99 1f       	adc	r25, r25
    d926:	fc 01       	movw	r30, r24
    d928:	e7 51       	subi	r30, 0x17	; 23
    d92a:	fb 4f       	sbci	r31, 0xFB	; 251
    d92c:	80 81       	ld	r24, Z
    d92e:	91 81       	ldd	r25, Z+1	; 0x01
    d930:	08 95       	ret
    d932:	e9 ee       	ldi	r30, 0xE9	; 233
    d934:	f5 e0       	ldi	r31, 0x05	; 5

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d936:	20 e0       	ldi	r18, 0x00	; 0
    d938:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    d93a:	41 91       	ld	r20, Z+
    d93c:	51 91       	ld	r21, Z+
    d93e:	84 17       	cp	r24, r20
    d940:	95 07       	cpc	r25, r21
    d942:	29 f0       	breq	.+10     	; 0xd94e <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    d944:	2f 5f       	subi	r18, 0xFF	; 255
    d946:	3f 4f       	sbci	r19, 0xFF	; 255
    d948:	20 38       	cpi	r18, 0x80	; 128
    d94a:	31 05       	cpc	r19, r1
    d94c:	b1 f7       	brne	.-20     	; 0xd93a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    d94e:	c9 01       	movw	r24, r18
    d950:	80 58       	subi	r24, 0x80	; 128
    d952:	9f 4f       	sbci	r25, 0xFF	; 255
    d954:	99 27       	eor	r25, r25
    d956:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d958:	80 e0       	ldi	r24, 0x00	; 0
    d95a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d95c:	08 95       	ret

0000d95e <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    d95e:	81 15       	cp	r24, r1
    d960:	20 e1       	ldi	r18, 0x10	; 16
    d962:	92 07       	cpc	r25, r18
    d964:	18 f0       	brcs	.+6      	; 0xd96c <ff_wtoupper+0xe>
    d966:	ab e3       	ldi	r26, 0x3B	; 59
    d968:	b3 e0       	ldi	r27, 0x03	; 3
    d96a:	02 c0       	rjmp	.+4      	; 0xd970 <ff_wtoupper+0x12>
    d96c:	a7 ef       	ldi	r26, 0xF7	; 247
    d96e:	b3 e0       	ldi	r27, 0x03	; 3
	for (;;) {
		bc = *p++;								/* Get block base */
    d970:	4d 91       	ld	r20, X+
    d972:	5c 91       	ld	r21, X
    d974:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    d976:	41 15       	cp	r20, r1
    d978:	51 05       	cpc	r21, r1
    d97a:	09 f4       	brne	.+2      	; 0xd97e <ff_wtoupper+0x20>
    d97c:	43 c0       	rjmp	.+134    	; 0xda04 <ff_wtoupper+0xa6>
    d97e:	84 17       	cp	r24, r20
    d980:	95 07       	cpc	r25, r21
    d982:	08 f4       	brcc	.+2      	; 0xd986 <ff_wtoupper+0x28>
    d984:	3f c0       	rjmp	.+126    	; 0xda04 <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d986:	14 96       	adiw	r26, 0x04	; 4
    d988:	fd 01       	movw	r30, r26
    d98a:	32 97       	sbiw	r30, 0x02	; 2
    d98c:	20 81       	ld	r18, Z
    d98e:	31 81       	ldd	r19, Z+1	; 0x01
    d990:	e3 2f       	mov	r30, r19
    d992:	ff 27       	eor	r31, r31
    d994:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    d996:	ba 01       	movw	r22, r20
    d998:	62 0f       	add	r22, r18
    d99a:	73 1f       	adc	r23, r19
    d99c:	86 17       	cp	r24, r22
    d99e:	97 07       	cpc	r25, r23
    d9a0:	48 f5       	brcc	.+82     	; 0xd9f4 <ff_wtoupper+0x96>
			switch (cmd) {
    d9a2:	e9 30       	cpi	r30, 0x09	; 9
    d9a4:	f1 05       	cpc	r31, r1
    d9a6:	70 f5       	brcc	.+92     	; 0xda04 <ff_wtoupper+0xa6>
    d9a8:	ec 54       	subi	r30, 0x4C	; 76
    d9aa:	ff 4f       	sbci	r31, 0xFF	; 255
    d9ac:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    d9b0:	fc 01       	movw	r30, r24
    d9b2:	e4 1b       	sub	r30, r20
    d9b4:	f5 0b       	sbc	r31, r21
    d9b6:	ee 0f       	add	r30, r30
    d9b8:	ff 1f       	adc	r31, r31
    d9ba:	ea 0f       	add	r30, r26
    d9bc:	fb 1f       	adc	r31, r27
    d9be:	80 81       	ld	r24, Z
    d9c0:	91 81       	ldd	r25, Z+1	; 0x01
    d9c2:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    d9c4:	9c 01       	movw	r18, r24
    d9c6:	24 1b       	sub	r18, r20
    d9c8:	35 0b       	sbc	r19, r21
    d9ca:	21 70       	andi	r18, 0x01	; 1
    d9cc:	33 27       	eor	r19, r19
    d9ce:	82 1b       	sub	r24, r18
    d9d0:	93 0b       	sbc	r25, r19
    d9d2:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    d9d4:	40 97       	sbiw	r24, 0x10	; 16
    d9d6:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    d9d8:	80 97       	sbiw	r24, 0x20	; 32
    d9da:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    d9dc:	c0 97       	sbiw	r24, 0x30	; 48
    d9de:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    d9e0:	4a 97       	sbiw	r24, 0x1a	; 26
    d9e2:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    d9e4:	08 96       	adiw	r24, 0x08	; 8
    d9e6:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    d9e8:	80 55       	subi	r24, 0x50	; 80
    d9ea:	91 09       	sbc	r25, r1
    d9ec:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    d9ee:	80 56       	subi	r24, 0x60	; 96
    d9f0:	9c 41       	sbci	r25, 0x1C	; 28
    d9f2:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    d9f4:	ef 2b       	or	r30, r31
    d9f6:	09 f0       	breq	.+2      	; 0xd9fa <ff_wtoupper+0x9c>
    d9f8:	bb cf       	rjmp	.-138    	; 0xd970 <ff_wtoupper+0x12>
    d9fa:	22 0f       	add	r18, r18
    d9fc:	33 1f       	adc	r19, r19
    d9fe:	a2 0f       	add	r26, r18
    da00:	b3 1f       	adc	r27, r19
    da02:	b6 cf       	rjmp	.-148    	; 0xd970 <ff_wtoupper+0x12>
	}

	return chr;
}
    da04:	08 95       	ret

0000da06 <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    da06:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    da08:	02 c0       	rjmp	.+4      	; 0xda0e <disk_status+0x8>
    da0a:	9b c1       	rjmp	.+822    	; 0xdd42 <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    da0c:	08 95       	ret
}
    da0e:	81 e0       	ldi	r24, 0x01	; 1
    da10:	08 95       	ret

0000da12 <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    da12:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    da14:	02 c0       	rjmp	.+4      	; 0xda1a <disk_initialize+0x8>
    da16:	f8 c0       	rjmp	.+496    	; 0xdc08 <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    da18:	08 95       	ret
}
    da1a:	81 e0       	ldi	r24, 0x01	; 1
    da1c:	08 95       	ret

0000da1e <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    da1e:	0f 93       	push	r16
    da20:	1f 93       	push	r17
    da22:	fb 01       	movw	r30, r22
    switch (pdrv) {
    da24:	81 11       	cpse	r24, r1
    da26:	06 c0       	rjmp	.+12     	; 0xda34 <disk_read+0x16>
    da28:	ba 01       	movw	r22, r20
    da2a:	a9 01       	movw	r20, r18
    da2c:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    da2e:	98 01       	movw	r18, r16
    da30:	8b d1       	rcall	.+790    	; 0xdd48 <mmc_disk_read>
    da32:	02 c0       	rjmp	.+4      	; 0xda38 <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    da34:	84 e0       	ldi	r24, 0x04	; 4
    da36:	90 e0       	ldi	r25, 0x00	; 0
}
    da38:	1f 91       	pop	r17
    da3a:	0f 91       	pop	r16
    da3c:	08 95       	ret

0000da3e <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    da3e:	0f 93       	push	r16
    da40:	1f 93       	push	r17
    da42:	fb 01       	movw	r30, r22
    switch (pdrv) {
    da44:	81 11       	cpse	r24, r1
    da46:	06 c0       	rjmp	.+12     	; 0xda54 <disk_write+0x16>
    da48:	ba 01       	movw	r22, r20
    da4a:	a9 01       	movw	r20, r18
    da4c:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    da4e:	98 01       	movw	r18, r16
    da50:	c1 d1       	rcall	.+898    	; 0xddd4 <mmc_disk_write>
    da52:	02 c0       	rjmp	.+4      	; 0xda58 <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    da54:	84 e0       	ldi	r24, 0x04	; 4
    da56:	90 e0       	ldi	r25, 0x00	; 0
}
    da58:	1f 91       	pop	r17
    da5a:	0f 91       	pop	r16
    da5c:	08 95       	ret

0000da5e <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    da5e:	96 2f       	mov	r25, r22
    switch (pdrv) {
    da60:	81 11       	cpse	r24, r1
    da62:	04 c0       	rjmp	.+8      	; 0xda6c <disk_ioctl+0xe>
    da64:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    da66:	89 2f       	mov	r24, r25
    da68:	1a c2       	rjmp	.+1076   	; 0xde9e <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    da6a:	08 95       	ret
    da6c:	84 e0       	ldi	r24, 0x04	; 4
}
    da6e:	90 e0       	ldi	r25, 0x00	; 0
    da70:	08 95       	ret

0000da72 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    da72:	17 c5       	rjmp	.+2606   	; 0xe4a2 <mmc_spi_TXRX>
    da74:	08 95       	ret

0000da76 <deselect>:
    da76:	ec d4       	rcall	.+2520   	; 0xe450 <mmc_spi_end>
    da78:	8f ef       	ldi	r24, 0xFF	; 255
    da7a:	fb df       	rcall	.-10     	; 0xda72 <xchg_spi>
    da7c:	8f ef       	ldi	r24, 0xFF	; 255
    da7e:	f9 cf       	rjmp	.-14     	; 0xda72 <xchg_spi>
    da80:	08 95       	ret

0000da82 <rcvr_datablock>:
    da82:	0f 93       	push	r16
    da84:	1f 93       	push	r17
    da86:	cf 93       	push	r28
    da88:	df 93       	push	r29
    da8a:	ec 01       	movw	r28, r24
    da8c:	8b 01       	movw	r16, r22
    da8e:	46 9a       	sbi	0x08, 6	; 8
    da90:	3e 9a       	sbi	0x07, 6	; 7
    da92:	88 ee       	ldi	r24, 0xE8	; 232
    da94:	93 e0       	ldi	r25, 0x03	; 3
    da96:	08 d5       	rcall	.+2576   	; 0xe4a8 <mmc_set_ms_timeout>
    da98:	8f ef       	ldi	r24, 0xFF	; 255
    da9a:	03 d5       	rcall	.+2566   	; 0xe4a2 <mmc_spi_TXRX>
    da9c:	8f 3f       	cpi	r24, 0xFF	; 255
    da9e:	31 f4       	brne	.+12     	; 0xdaac <rcvr_datablock+0x2a>
    daa0:	0a d5       	rcall	.+2580   	; 0xe4b6 <mmc_test_timeout>
    daa2:	89 2b       	or	r24, r25
    daa4:	c9 f3       	breq	.-14     	; 0xda98 <rcvr_datablock+0x16>
    daa6:	80 e0       	ldi	r24, 0x00	; 0
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	0d c0       	rjmp	.+26     	; 0xdac6 <rcvr_datablock+0x44>
    daac:	8e 3f       	cpi	r24, 0xFE	; 254
    daae:	d9 f7       	brne	.-10     	; 0xdaa6 <rcvr_datablock+0x24>
    dab0:	b8 01       	movw	r22, r16
    dab2:	ce 01       	movw	r24, r28
    dab4:	f3 d4       	rcall	.+2534   	; 0xe49c <mmc_spi_RX_buffer>
    dab6:	8f ef       	ldi	r24, 0xFF	; 255
    dab8:	dc df       	rcall	.-72     	; 0xda72 <xchg_spi>
    daba:	8f ef       	ldi	r24, 0xFF	; 255
    dabc:	da df       	rcall	.-76     	; 0xda72 <xchg_spi>
    dabe:	46 98       	cbi	0x08, 6	; 8
    dac0:	3e 9a       	sbi	0x07, 6	; 7
    dac2:	81 e0       	ldi	r24, 0x01	; 1
    dac4:	90 e0       	ldi	r25, 0x00	; 0
    dac6:	df 91       	pop	r29
    dac8:	cf 91       	pop	r28
    daca:	1f 91       	pop	r17
    dacc:	0f 91       	pop	r16
    dace:	08 95       	ret

0000dad0 <wait_ready>:
    dad0:	cf 93       	push	r28
    dad2:	ea d4       	rcall	.+2516   	; 0xe4a8 <mmc_set_ms_timeout>
    dad4:	8f ef       	ldi	r24, 0xFF	; 255
    dad6:	e5 d4       	rcall	.+2506   	; 0xe4a2 <mmc_spi_TXRX>
    dad8:	c8 2f       	mov	r28, r24
    dada:	8f 3f       	cpi	r24, 0xFF	; 255
    dadc:	19 f0       	breq	.+6      	; 0xdae4 <wait_ready+0x14>
    dade:	eb d4       	rcall	.+2518   	; 0xe4b6 <mmc_test_timeout>
    dae0:	89 2b       	or	r24, r25
    dae2:	c1 f3       	breq	.-16     	; 0xdad4 <wait_ready+0x4>
    dae4:	81 e0       	ldi	r24, 0x01	; 1
    dae6:	90 e0       	ldi	r25, 0x00	; 0
    dae8:	cf 3f       	cpi	r28, 0xFF	; 255
    daea:	11 f0       	breq	.+4      	; 0xdaf0 <wait_ready+0x20>
    daec:	80 e0       	ldi	r24, 0x00	; 0
    daee:	90 e0       	ldi	r25, 0x00	; 0
    daf0:	cf 91       	pop	r28
    daf2:	08 95       	ret

0000daf4 <select>:
    daf4:	cf 93       	push	r28
    daf6:	df 93       	push	r29
    daf8:	9e d4       	rcall	.+2364   	; 0xe436 <mmc_spi_begin>
    dafa:	8f ef       	ldi	r24, 0xFF	; 255
    dafc:	ba df       	rcall	.-140    	; 0xda72 <xchg_spi>
    dafe:	88 ee       	ldi	r24, 0xE8	; 232
    db00:	93 e0       	ldi	r25, 0x03	; 3
    db02:	e6 df       	rcall	.-52     	; 0xdad0 <wait_ready>
    db04:	ec 01       	movw	r28, r24
    db06:	89 2b       	or	r24, r25
    db08:	61 f4       	brne	.+24     	; 0xdb22 <select+0x2e>
    db0a:	8c eb       	ldi	r24, 0xBC	; 188
    db0c:	97 e0       	ldi	r25, 0x07	; 7
    db0e:	1f 92       	push	r1
    db10:	9f 93       	push	r25
    db12:	8f 93       	push	r24
    db14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    db18:	ae df       	rcall	.-164    	; 0xda76 <deselect>
    db1a:	0f 90       	pop	r0
    db1c:	0f 90       	pop	r0
    db1e:	0f 90       	pop	r0
    db20:	02 c0       	rjmp	.+4      	; 0xdb26 <select+0x32>
    db22:	c1 e0       	ldi	r28, 0x01	; 1
    db24:	d0 e0       	ldi	r29, 0x00	; 0
    db26:	ce 01       	movw	r24, r28
    db28:	df 91       	pop	r29
    db2a:	cf 91       	pop	r28
    db2c:	08 95       	ret

0000db2e <send_cmd>:
    db2e:	ff 92       	push	r15
    db30:	0f 93       	push	r16
    db32:	1f 93       	push	r17
    db34:	cf 93       	push	r28
    db36:	df 93       	push	r29
    db38:	c8 2f       	mov	r28, r24
    db3a:	d4 2f       	mov	r29, r20
    db3c:	15 2f       	mov	r17, r21
    db3e:	06 2f       	mov	r16, r22
    db40:	f7 2e       	mov	r15, r23
    db42:	87 ff       	sbrs	r24, 7
    db44:	08 c0       	rjmp	.+16     	; 0xdb56 <send_cmd+0x28>
    db46:	40 e0       	ldi	r20, 0x00	; 0
    db48:	50 e0       	ldi	r21, 0x00	; 0
    db4a:	ba 01       	movw	r22, r20
    db4c:	87 e3       	ldi	r24, 0x37	; 55
    db4e:	ef df       	rcall	.-34     	; 0xdb2e <send_cmd>
    db50:	82 30       	cpi	r24, 0x02	; 2
    db52:	58 f5       	brcc	.+86     	; 0xdbaa <send_cmd+0x7c>
    db54:	cf 77       	andi	r28, 0x7F	; 127
    db56:	cc 30       	cpi	r28, 0x0C	; 12
    db58:	71 f4       	brne	.+28     	; 0xdb76 <send_cmd+0x48>
    db5a:	8c 2f       	mov	r24, r28
    db5c:	80 64       	ori	r24, 0x40	; 64
    db5e:	89 df       	rcall	.-238    	; 0xda72 <xchg_spi>
    db60:	8f 2d       	mov	r24, r15
    db62:	87 df       	rcall	.-242    	; 0xda72 <xchg_spi>
    db64:	80 2f       	mov	r24, r16
    db66:	85 df       	rcall	.-246    	; 0xda72 <xchg_spi>
    db68:	81 2f       	mov	r24, r17
    db6a:	83 df       	rcall	.-250    	; 0xda72 <xchg_spi>
    db6c:	8d 2f       	mov	r24, r29
    db6e:	81 df       	rcall	.-254    	; 0xda72 <xchg_spi>
    db70:	cc 23       	and	r28, r28
    db72:	c9 f0       	breq	.+50     	; 0xdba6 <send_cmd+0x78>
    db74:	06 c0       	rjmp	.+12     	; 0xdb82 <send_cmd+0x54>
    db76:	7f df       	rcall	.-258    	; 0xda76 <deselect>
    db78:	bd df       	rcall	.-134    	; 0xdaf4 <select>
    db7a:	89 2b       	or	r24, r25
    db7c:	71 f7       	brne	.-36     	; 0xdb5a <send_cmd+0x2c>
    db7e:	8f ef       	ldi	r24, 0xFF	; 255
    db80:	14 c0       	rjmp	.+40     	; 0xdbaa <send_cmd+0x7c>
    db82:	c8 30       	cpi	r28, 0x08	; 8
    db84:	11 f4       	brne	.+4      	; 0xdb8a <send_cmd+0x5c>
    db86:	87 e8       	ldi	r24, 0x87	; 135
    db88:	01 c0       	rjmp	.+2      	; 0xdb8c <send_cmd+0x5e>
    db8a:	81 e0       	ldi	r24, 0x01	; 1
    db8c:	72 df       	rcall	.-284    	; 0xda72 <xchg_spi>
    db8e:	cc 30       	cpi	r28, 0x0C	; 12
    db90:	11 f4       	brne	.+4      	; 0xdb96 <send_cmd+0x68>
    db92:	8f ef       	ldi	r24, 0xFF	; 255
    db94:	6e df       	rcall	.-292    	; 0xda72 <xchg_spi>
    db96:	ca e0       	ldi	r28, 0x0A	; 10
    db98:	8f ef       	ldi	r24, 0xFF	; 255
    db9a:	83 d4       	rcall	.+2310   	; 0xe4a2 <mmc_spi_TXRX>
    db9c:	87 ff       	sbrs	r24, 7
    db9e:	05 c0       	rjmp	.+10     	; 0xdbaa <send_cmd+0x7c>
    dba0:	c1 50       	subi	r28, 0x01	; 1
    dba2:	d1 f7       	brne	.-12     	; 0xdb98 <send_cmd+0x6a>
    dba4:	02 c0       	rjmp	.+4      	; 0xdbaa <send_cmd+0x7c>
    dba6:	85 e9       	ldi	r24, 0x95	; 149
    dba8:	f5 cf       	rjmp	.-22     	; 0xdb94 <send_cmd+0x66>
    dbaa:	cd b7       	in	r28, 0x3d	; 61
    dbac:	de b7       	in	r29, 0x3e	; 62
    dbae:	e5 e0       	ldi	r30, 0x05	; 5
    dbb0:	0c 94 64 e9 	jmp	0x1d2c8	; 0x1d2c8 <__epilogue_restores__+0x1a>

0000dbb4 <xmit_datablock>:
    dbb4:	0f 93       	push	r16
    dbb6:	1f 93       	push	r17
    dbb8:	cf 93       	push	r28
    dbba:	8c 01       	movw	r16, r24
    dbbc:	c6 2f       	mov	r28, r22
    dbbe:	47 9a       	sbi	0x08, 7	; 8
    dbc0:	3f 9a       	sbi	0x07, 7	; 7
    dbc2:	88 ee       	ldi	r24, 0xE8	; 232
    dbc4:	93 e0       	ldi	r25, 0x03	; 3
    dbc6:	84 df       	rcall	.-248    	; 0xdad0 <wait_ready>
    dbc8:	89 2b       	or	r24, r25
    dbca:	19 f4       	brne	.+6      	; 0xdbd2 <xmit_datablock+0x1e>
    dbcc:	80 e0       	ldi	r24, 0x00	; 0
    dbce:	90 e0       	ldi	r25, 0x00	; 0
    dbd0:	17 c0       	rjmp	.+46     	; 0xdc00 <xmit_datablock+0x4c>
    dbd2:	8c 2f       	mov	r24, r28
    dbd4:	4e df       	rcall	.-356    	; 0xda72 <xchg_spi>
    dbd6:	cd 3f       	cpi	r28, 0xFD	; 253
    dbd8:	29 f4       	brne	.+10     	; 0xdbe4 <xmit_datablock+0x30>
    dbda:	46 98       	cbi	0x08, 6	; 8
    dbdc:	3e 9a       	sbi	0x07, 6	; 7
    dbde:	81 e0       	ldi	r24, 0x01	; 1
    dbe0:	90 e0       	ldi	r25, 0x00	; 0
    dbe2:	0e c0       	rjmp	.+28     	; 0xdc00 <xmit_datablock+0x4c>
    dbe4:	60 e0       	ldi	r22, 0x00	; 0
    dbe6:	72 e0       	ldi	r23, 0x02	; 2
    dbe8:	c8 01       	movw	r24, r16
    dbea:	55 d4       	rcall	.+2218   	; 0xe496 <mmc_spi_TX_buffer>
    dbec:	8f ef       	ldi	r24, 0xFF	; 255
    dbee:	41 df       	rcall	.-382    	; 0xda72 <xchg_spi>
    dbf0:	8f ef       	ldi	r24, 0xFF	; 255
    dbf2:	3f df       	rcall	.-386    	; 0xda72 <xchg_spi>
    dbf4:	8f ef       	ldi	r24, 0xFF	; 255
    dbf6:	55 d4       	rcall	.+2218   	; 0xe4a2 <mmc_spi_TXRX>
    dbf8:	8f 71       	andi	r24, 0x1F	; 31
    dbfa:	85 30       	cpi	r24, 0x05	; 5
    dbfc:	39 f7       	brne	.-50     	; 0xdbcc <xmit_datablock+0x18>
    dbfe:	ed cf       	rjmp	.-38     	; 0xdbda <xmit_datablock+0x26>
    dc00:	cf 91       	pop	r28
    dc02:	1f 91       	pop	r17
    dc04:	0f 91       	pop	r16
    dc06:	08 95       	ret

0000dc08 <mmc_disk_initialize>:
    dc08:	a4 e0       	ldi	r26, 0x04	; 4
    dc0a:	b0 e0       	ldi	r27, 0x00	; 0
    dc0c:	ea e0       	ldi	r30, 0x0A	; 10
    dc0e:	fe e6       	ldi	r31, 0x6E	; 110
    dc10:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    dc14:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    dc18:	81 fd       	sbrc	r24, 1
    dc1a:	8d c0       	rjmp	.+282    	; 0xdd36 <mmc_disk_initialize+0x12e>
    dc1c:	1d d4       	rcall	.+2106   	; 0xe458 <mmc_slow>
    dc1e:	1a e0       	ldi	r17, 0x0A	; 10
    dc20:	8f ef       	ldi	r24, 0xFF	; 255
    dc22:	27 df       	rcall	.-434    	; 0xda72 <xchg_spi>
    dc24:	11 50       	subi	r17, 0x01	; 1
    dc26:	e1 f7       	brne	.-8      	; 0xdc20 <mmc_disk_initialize+0x18>
    dc28:	40 e0       	ldi	r20, 0x00	; 0
    dc2a:	50 e0       	ldi	r21, 0x00	; 0
    dc2c:	ba 01       	movw	r22, r20
    dc2e:	80 e0       	ldi	r24, 0x00	; 0
    dc30:	7e df       	rcall	.-260    	; 0xdb2e <send_cmd>
    dc32:	81 30       	cpi	r24, 0x01	; 1
    dc34:	09 f0       	breq	.+2      	; 0xdc38 <mmc_disk_initialize+0x30>
    dc36:	6f c0       	rjmp	.+222    	; 0xdd16 <mmc_disk_initialize+0x10e>
    dc38:	80 ed       	ldi	r24, 0xD0	; 208
    dc3a:	97 e0       	ldi	r25, 0x07	; 7
    dc3c:	35 d4       	rcall	.+2154   	; 0xe4a8 <mmc_set_ms_timeout>
    dc3e:	4a ea       	ldi	r20, 0xAA	; 170
    dc40:	51 e0       	ldi	r21, 0x01	; 1
    dc42:	60 e0       	ldi	r22, 0x00	; 0
    dc44:	70 e0       	ldi	r23, 0x00	; 0
    dc46:	88 e0       	ldi	r24, 0x08	; 8
    dc48:	72 df       	rcall	.-284    	; 0xdb2e <send_cmd>
    dc4a:	81 30       	cpi	r24, 0x01	; 1
    dc4c:	09 f0       	breq	.+2      	; 0xdc50 <mmc_disk_initialize+0x48>
    dc4e:	3d c0       	rjmp	.+122    	; 0xdcca <mmc_disk_initialize+0xc2>
    dc50:	8e 01       	movw	r16, r28
    dc52:	0f 5f       	subi	r16, 0xFF	; 255
    dc54:	1f 4f       	sbci	r17, 0xFF	; 255
    dc56:	6e 01       	movw	r12, r28
    dc58:	85 e0       	ldi	r24, 0x05	; 5
    dc5a:	c8 0e       	add	r12, r24
    dc5c:	d1 1c       	adc	r13, r1
    dc5e:	78 01       	movw	r14, r16
    dc60:	8f ef       	ldi	r24, 0xFF	; 255
    dc62:	1f d4       	rcall	.+2110   	; 0xe4a2 <mmc_spi_TXRX>
    dc64:	f7 01       	movw	r30, r14
    dc66:	81 93       	st	Z+, r24
    dc68:	7f 01       	movw	r14, r30
    dc6a:	ce 16       	cp	r12, r30
    dc6c:	df 06       	cpc	r13, r31
    dc6e:	c1 f7       	brne	.-16     	; 0xdc60 <mmc_disk_initialize+0x58>
    dc70:	8b 81       	ldd	r24, Y+3	; 0x03
    dc72:	81 30       	cpi	r24, 0x01	; 1
    dc74:	09 f0       	breq	.+2      	; 0xdc78 <mmc_disk_initialize+0x70>
    dc76:	4f c0       	rjmp	.+158    	; 0xdd16 <mmc_disk_initialize+0x10e>
    dc78:	8c 81       	ldd	r24, Y+4	; 0x04
    dc7a:	8a 3a       	cpi	r24, 0xAA	; 170
    dc7c:	09 f0       	breq	.+2      	; 0xdc80 <mmc_disk_initialize+0x78>
    dc7e:	4b c0       	rjmp	.+150    	; 0xdd16 <mmc_disk_initialize+0x10e>
    dc80:	1a d4       	rcall	.+2100   	; 0xe4b6 <mmc_test_timeout>
    dc82:	89 2b       	or	r24, r25
    dc84:	29 f0       	breq	.+10     	; 0xdc90 <mmc_disk_initialize+0x88>
    dc86:	17 d4       	rcall	.+2094   	; 0xe4b6 <mmc_test_timeout>
    dc88:	89 2b       	or	r24, r25
    dc8a:	09 f0       	breq	.+2      	; 0xdc8e <mmc_disk_initialize+0x86>
    dc8c:	44 c0       	rjmp	.+136    	; 0xdd16 <mmc_disk_initialize+0x10e>
    dc8e:	09 c0       	rjmp	.+18     	; 0xdca2 <mmc_disk_initialize+0x9a>
    dc90:	40 e0       	ldi	r20, 0x00	; 0
    dc92:	50 e0       	ldi	r21, 0x00	; 0
    dc94:	60 e0       	ldi	r22, 0x00	; 0
    dc96:	70 e4       	ldi	r23, 0x40	; 64
    dc98:	89 ea       	ldi	r24, 0xA9	; 169
    dc9a:	49 df       	rcall	.-366    	; 0xdb2e <send_cmd>
    dc9c:	81 11       	cpse	r24, r1
    dc9e:	f0 cf       	rjmp	.-32     	; 0xdc80 <mmc_disk_initialize+0x78>
    dca0:	f2 cf       	rjmp	.-28     	; 0xdc86 <mmc_disk_initialize+0x7e>
    dca2:	40 e0       	ldi	r20, 0x00	; 0
    dca4:	50 e0       	ldi	r21, 0x00	; 0
    dca6:	ba 01       	movw	r22, r20
    dca8:	8a e3       	ldi	r24, 0x3A	; 58
    dcaa:	41 df       	rcall	.-382    	; 0xdb2e <send_cmd>
    dcac:	81 11       	cpse	r24, r1
    dcae:	33 c0       	rjmp	.+102    	; 0xdd16 <mmc_disk_initialize+0x10e>
    dcb0:	8f ef       	ldi	r24, 0xFF	; 255
    dcb2:	f7 d3       	rcall	.+2030   	; 0xe4a2 <mmc_spi_TXRX>
    dcb4:	f8 01       	movw	r30, r16
    dcb6:	81 93       	st	Z+, r24
    dcb8:	8f 01       	movw	r16, r30
    dcba:	ce 16       	cp	r12, r30
    dcbc:	df 06       	cpc	r13, r31
    dcbe:	c1 f7       	brne	.-16     	; 0xdcb0 <mmc_disk_initialize+0xa8>
    dcc0:	89 81       	ldd	r24, Y+1	; 0x01
    dcc2:	86 fd       	sbrc	r24, 6
    dcc4:	2a c0       	rjmp	.+84     	; 0xdd1a <mmc_disk_initialize+0x112>
    dcc6:	14 e0       	ldi	r17, 0x04	; 4
    dcc8:	29 c0       	rjmp	.+82     	; 0xdd1c <mmc_disk_initialize+0x114>
    dcca:	80 ed       	ldi	r24, 0xD0	; 208
    dccc:	97 e0       	ldi	r25, 0x07	; 7
    dcce:	ec d3       	rcall	.+2008   	; 0xe4a8 <mmc_set_ms_timeout>
    dcd0:	40 e0       	ldi	r20, 0x00	; 0
    dcd2:	50 e0       	ldi	r21, 0x00	; 0
    dcd4:	ba 01       	movw	r22, r20
    dcd6:	89 ea       	ldi	r24, 0xA9	; 169
    dcd8:	2a df       	rcall	.-428    	; 0xdb2e <send_cmd>
    dcda:	82 30       	cpi	r24, 0x02	; 2
    dcdc:	18 f0       	brcs	.+6      	; 0xdce4 <mmc_disk_initialize+0xdc>
    dcde:	11 e0       	ldi	r17, 0x01	; 1
    dce0:	01 e0       	ldi	r16, 0x01	; 1
    dce2:	02 c0       	rjmp	.+4      	; 0xdce8 <mmc_disk_initialize+0xe0>
    dce4:	12 e0       	ldi	r17, 0x02	; 2
    dce6:	09 ea       	ldi	r16, 0xA9	; 169
    dce8:	e6 d3       	rcall	.+1996   	; 0xe4b6 <mmc_test_timeout>
    dcea:	89 2b       	or	r24, r25
    dcec:	21 f0       	breq	.+8      	; 0xdcf6 <mmc_disk_initialize+0xee>
    dcee:	e3 d3       	rcall	.+1990   	; 0xe4b6 <mmc_test_timeout>
    dcf0:	89 2b       	or	r24, r25
    dcf2:	89 f4       	brne	.+34     	; 0xdd16 <mmc_disk_initialize+0x10e>
    dcf4:	08 c0       	rjmp	.+16     	; 0xdd06 <mmc_disk_initialize+0xfe>
    dcf6:	40 e0       	ldi	r20, 0x00	; 0
    dcf8:	50 e0       	ldi	r21, 0x00	; 0
    dcfa:	ba 01       	movw	r22, r20
    dcfc:	80 2f       	mov	r24, r16
    dcfe:	17 df       	rcall	.-466    	; 0xdb2e <send_cmd>
    dd00:	81 11       	cpse	r24, r1
    dd02:	f2 cf       	rjmp	.-28     	; 0xdce8 <mmc_disk_initialize+0xe0>
    dd04:	f4 cf       	rjmp	.-24     	; 0xdcee <mmc_disk_initialize+0xe6>
    dd06:	40 e0       	ldi	r20, 0x00	; 0
    dd08:	52 e0       	ldi	r21, 0x02	; 2
    dd0a:	60 e0       	ldi	r22, 0x00	; 0
    dd0c:	70 e0       	ldi	r23, 0x00	; 0
    dd0e:	80 e1       	ldi	r24, 0x10	; 16
    dd10:	0e df       	rcall	.-484    	; 0xdb2e <send_cmd>
    dd12:	88 23       	and	r24, r24
    dd14:	19 f0       	breq	.+6      	; 0xdd1c <mmc_disk_initialize+0x114>
    dd16:	10 e0       	ldi	r17, 0x00	; 0
    dd18:	01 c0       	rjmp	.+2      	; 0xdd1c <mmc_disk_initialize+0x114>
    dd1a:	1c e0       	ldi	r17, 0x0C	; 12
    dd1c:	10 93 e4 17 	sts	0x17E4, r17	; 0x8017e4 <CardType>
    dd20:	aa de       	rcall	.-684    	; 0xda76 <deselect>
    dd22:	11 23       	and	r17, r17
    dd24:	39 f0       	breq	.+14     	; 0xdd34 <mmc_disk_initialize+0x12c>
    dd26:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    dd2a:	8e 7f       	andi	r24, 0xFE	; 254
    dd2c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Stat>
    dd30:	a5 d3       	rcall	.+1866   	; 0xe47c <mmc_fast>
    dd32:	01 c0       	rjmp	.+2      	; 0xdd36 <mmc_disk_initialize+0x12e>
    dd34:	84 d4       	rcall	.+2312   	; 0xe63e <mmc_power_off>
    dd36:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    dd3a:	24 96       	adiw	r28, 0x04	; 4
    dd3c:	e8 e0       	ldi	r30, 0x08	; 8
    dd3e:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000dd42 <mmc_disk_status>:
    dd42:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    dd46:	08 95       	ret

0000dd48 <mmc_disk_read>:
    dd48:	ef 92       	push	r14
    dd4a:	ff 92       	push	r15
    dd4c:	1f 93       	push	r17
    dd4e:	cf 93       	push	r28
    dd50:	df 93       	push	r29
    dd52:	7c 01       	movw	r14, r24
    dd54:	e9 01       	movw	r28, r18
    dd56:	20 97       	sbiw	r28, 0x00	; 0
    dd58:	19 f4       	brne	.+6      	; 0xdd60 <mmc_disk_read+0x18>
    dd5a:	8d de       	rcall	.-742    	; 0xda76 <deselect>
    dd5c:	84 e0       	ldi	r24, 0x04	; 4
    dd5e:	06 c0       	rjmp	.+12     	; 0xdd6c <mmc_disk_read+0x24>
    dd60:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    dd64:	80 ff       	sbrs	r24, 0
    dd66:	04 c0       	rjmp	.+8      	; 0xdd70 <mmc_disk_read+0x28>
    dd68:	86 de       	rcall	.-756    	; 0xda76 <deselect>
    dd6a:	83 e0       	ldi	r24, 0x03	; 3
    dd6c:	90 e0       	ldi	r25, 0x00	; 0
    dd6e:	2c c0       	rjmp	.+88     	; 0xddc8 <mmc_disk_read+0x80>
    dd70:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    dd74:	83 fd       	sbrc	r24, 3
    dd76:	07 c0       	rjmp	.+14     	; 0xdd86 <mmc_disk_read+0x3e>
    dd78:	89 e0       	ldi	r24, 0x09	; 9
    dd7a:	44 0f       	add	r20, r20
    dd7c:	55 1f       	adc	r21, r21
    dd7e:	66 1f       	adc	r22, r22
    dd80:	77 1f       	adc	r23, r23
    dd82:	8a 95       	dec	r24
    dd84:	d1 f7       	brne	.-12     	; 0xdd7a <mmc_disk_read+0x32>
    dd86:	c2 30       	cpi	r28, 0x02	; 2
    dd88:	d1 05       	cpc	r29, r1
    dd8a:	10 f4       	brcc	.+4      	; 0xdd90 <mmc_disk_read+0x48>
    dd8c:	11 e1       	ldi	r17, 0x11	; 17
    dd8e:	01 c0       	rjmp	.+2      	; 0xdd92 <mmc_disk_read+0x4a>
    dd90:	12 e1       	ldi	r17, 0x12	; 18
    dd92:	81 2f       	mov	r24, r17
    dd94:	cc de       	rcall	.-616    	; 0xdb2e <send_cmd>
    dd96:	81 11       	cpse	r24, r1
    dd98:	11 c0       	rjmp	.+34     	; 0xddbc <mmc_disk_read+0x74>
    dd9a:	60 e0       	ldi	r22, 0x00	; 0
    dd9c:	72 e0       	ldi	r23, 0x02	; 2
    dd9e:	c7 01       	movw	r24, r14
    dda0:	70 de       	rcall	.-800    	; 0xda82 <rcvr_datablock>
    dda2:	89 2b       	or	r24, r25
    dda4:	21 f0       	breq	.+8      	; 0xddae <mmc_disk_read+0x66>
    dda6:	8e ef       	ldi	r24, 0xFE	; 254
    dda8:	f8 1a       	sub	r15, r24
    ddaa:	21 97       	sbiw	r28, 0x01	; 1
    ddac:	b1 f7       	brne	.-20     	; 0xdd9a <mmc_disk_read+0x52>
    ddae:	12 31       	cpi	r17, 0x12	; 18
    ddb0:	29 f4       	brne	.+10     	; 0xddbc <mmc_disk_read+0x74>
    ddb2:	40 e0       	ldi	r20, 0x00	; 0
    ddb4:	50 e0       	ldi	r21, 0x00	; 0
    ddb6:	ba 01       	movw	r22, r20
    ddb8:	8c e0       	ldi	r24, 0x0C	; 12
    ddba:	b9 de       	rcall	.-654    	; 0xdb2e <send_cmd>
    ddbc:	5c de       	rcall	.-840    	; 0xda76 <deselect>
    ddbe:	81 e0       	ldi	r24, 0x01	; 1
    ddc0:	90 e0       	ldi	r25, 0x00	; 0
    ddc2:	cd 2b       	or	r28, r29
    ddc4:	09 f4       	brne	.+2      	; 0xddc8 <mmc_disk_read+0x80>
    ddc6:	80 e0       	ldi	r24, 0x00	; 0
    ddc8:	df 91       	pop	r29
    ddca:	cf 91       	pop	r28
    ddcc:	1f 91       	pop	r17
    ddce:	ff 90       	pop	r15
    ddd0:	ef 90       	pop	r14
    ddd2:	08 95       	ret

0000ddd4 <mmc_disk_write>:
    ddd4:	a0 e0       	ldi	r26, 0x00	; 0
    ddd6:	b0 e0       	ldi	r27, 0x00	; 0
    ddd8:	e0 ef       	ldi	r30, 0xF0	; 240
    ddda:	fe e6       	ldi	r31, 0x6E	; 110
    dddc:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    dde0:	8c 01       	movw	r16, r24
    dde2:	6a 01       	movw	r12, r20
    dde4:	7b 01       	movw	r14, r22
    dde6:	e9 01       	movw	r28, r18
    dde8:	20 97       	sbiw	r28, 0x00	; 0
    ddea:	19 f4       	brne	.+6      	; 0xddf2 <mmc_disk_write+0x1e>
    ddec:	44 de       	rcall	.-888    	; 0xda76 <deselect>
    ddee:	84 e0       	ldi	r24, 0x04	; 4
    ddf0:	06 c0       	rjmp	.+12     	; 0xddfe <mmc_disk_write+0x2a>
    ddf2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    ddf6:	80 ff       	sbrs	r24, 0
    ddf8:	04 c0       	rjmp	.+8      	; 0xde02 <mmc_disk_write+0x2e>
    ddfa:	3d de       	rcall	.-902    	; 0xda76 <deselect>
    ddfc:	83 e0       	ldi	r24, 0x03	; 3
    ddfe:	90 e0       	ldi	r25, 0x00	; 0
    de00:	49 c0       	rjmp	.+146    	; 0xde94 <mmc_disk_write+0xc0>
    de02:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    de06:	82 ff       	sbrs	r24, 2
    de08:	03 c0       	rjmp	.+6      	; 0xde10 <mmc_disk_write+0x3c>
    de0a:	35 de       	rcall	.-918    	; 0xda76 <deselect>
    de0c:	82 e0       	ldi	r24, 0x02	; 2
    de0e:	f7 cf       	rjmp	.-18     	; 0xddfe <mmc_disk_write+0x2a>
    de10:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    de14:	83 fd       	sbrc	r24, 3
    de16:	07 c0       	rjmp	.+14     	; 0xde26 <mmc_disk_write+0x52>
    de18:	99 e0       	ldi	r25, 0x09	; 9
    de1a:	cc 0c       	add	r12, r12
    de1c:	dd 1c       	adc	r13, r13
    de1e:	ee 1c       	adc	r14, r14
    de20:	ff 1c       	adc	r15, r15
    de22:	9a 95       	dec	r25
    de24:	d1 f7       	brne	.-12     	; 0xde1a <mmc_disk_write+0x46>
    de26:	c1 30       	cpi	r28, 0x01	; 1
    de28:	d1 05       	cpc	r29, r1
    de2a:	89 f4       	brne	.+34     	; 0xde4e <mmc_disk_write+0x7a>
    de2c:	b7 01       	movw	r22, r14
    de2e:	a6 01       	movw	r20, r12
    de30:	88 e1       	ldi	r24, 0x18	; 24
    de32:	7d de       	rcall	.-774    	; 0xdb2e <send_cmd>
    de34:	81 11       	cpse	r24, r1
    de36:	26 c0       	rjmp	.+76     	; 0xde84 <mmc_disk_write+0xb0>
    de38:	6e ef       	ldi	r22, 0xFE	; 254
    de3a:	c8 01       	movw	r24, r16
    de3c:	bb de       	rcall	.-650    	; 0xdbb4 <xmit_datablock>
    de3e:	31 e0       	ldi	r19, 0x01	; 1
    de40:	20 e0       	ldi	r18, 0x00	; 0
    de42:	89 2b       	or	r24, r25
    de44:	09 f0       	breq	.+2      	; 0xde48 <mmc_disk_write+0x74>
    de46:	30 e0       	ldi	r19, 0x00	; 0
    de48:	c3 2f       	mov	r28, r19
    de4a:	d2 2f       	mov	r29, r18
    de4c:	1d c0       	rjmp	.+58     	; 0xde88 <mmc_disk_write+0xb4>
    de4e:	86 70       	andi	r24, 0x06	; 6
    de50:	29 f0       	breq	.+10     	; 0xde5c <mmc_disk_write+0x88>
    de52:	ae 01       	movw	r20, r28
    de54:	60 e0       	ldi	r22, 0x00	; 0
    de56:	70 e0       	ldi	r23, 0x00	; 0
    de58:	87 e9       	ldi	r24, 0x97	; 151
    de5a:	69 de       	rcall	.-814    	; 0xdb2e <send_cmd>
    de5c:	b7 01       	movw	r22, r14
    de5e:	a6 01       	movw	r20, r12
    de60:	89 e1       	ldi	r24, 0x19	; 25
    de62:	65 de       	rcall	.-822    	; 0xdb2e <send_cmd>
    de64:	81 11       	cpse	r24, r1
    de66:	10 c0       	rjmp	.+32     	; 0xde88 <mmc_disk_write+0xb4>
    de68:	6c ef       	ldi	r22, 0xFC	; 252
    de6a:	c8 01       	movw	r24, r16
    de6c:	a3 de       	rcall	.-698    	; 0xdbb4 <xmit_datablock>
    de6e:	89 2b       	or	r24, r25
    de70:	19 f0       	breq	.+6      	; 0xde78 <mmc_disk_write+0xa4>
    de72:	1e 5f       	subi	r17, 0xFE	; 254
    de74:	21 97       	sbiw	r28, 0x01	; 1
    de76:	c1 f7       	brne	.-16     	; 0xde68 <mmc_disk_write+0x94>
    de78:	6d ef       	ldi	r22, 0xFD	; 253
    de7a:	80 e0       	ldi	r24, 0x00	; 0
    de7c:	90 e0       	ldi	r25, 0x00	; 0
    de7e:	9a de       	rcall	.-716    	; 0xdbb4 <xmit_datablock>
    de80:	89 2b       	or	r24, r25
    de82:	11 f4       	brne	.+4      	; 0xde88 <mmc_disk_write+0xb4>
    de84:	c1 e0       	ldi	r28, 0x01	; 1
    de86:	d0 e0       	ldi	r29, 0x00	; 0
    de88:	f6 dd       	rcall	.-1044   	; 0xda76 <deselect>
    de8a:	81 e0       	ldi	r24, 0x01	; 1
    de8c:	90 e0       	ldi	r25, 0x00	; 0
    de8e:	cd 2b       	or	r28, r29
    de90:	09 f4       	brne	.+2      	; 0xde94 <mmc_disk_write+0xc0>
    de92:	80 e0       	ldi	r24, 0x00	; 0
    de94:	cd b7       	in	r28, 0x3d	; 61
    de96:	de b7       	in	r29, 0x3e	; 62
    de98:	e8 e0       	ldi	r30, 0x08	; 8
    de9a:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000de9e <mmc_disk_ioctl>:
    de9e:	a0 e1       	ldi	r26, 0x10	; 16
    dea0:	b0 e0       	ldi	r27, 0x00	; 0
    dea2:	e5 e5       	ldi	r30, 0x55	; 85
    dea4:	ff e6       	ldi	r31, 0x6F	; 111
    dea6:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    deaa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Stat>
    deae:	90 fd       	sbrc	r25, 0
    deb0:	75 c2       	rjmp	.+1258   	; 0xe39c <mmc_disk_ioctl+0x4fe>
    deb2:	8b 01       	movw	r16, r22
    deb4:	83 33       	cpi	r24, 0x33	; 51
    deb6:	09 f4       	brne	.+2      	; 0xdeba <mmc_disk_ioctl+0x1c>
    deb8:	4b c1       	rjmp	.+662    	; 0xe150 <mmc_disk_ioctl+0x2b2>
    deba:	98 f4       	brcc	.+38     	; 0xdee2 <mmc_disk_ioctl+0x44>
    debc:	83 30       	cpi	r24, 0x03	; 3
    debe:	09 f4       	brne	.+2      	; 0xdec2 <mmc_disk_ioctl+0x24>
    dec0:	84 c0       	rjmp	.+264    	; 0xdfca <mmc_disk_ioctl+0x12c>
    dec2:	28 f4       	brcc	.+10     	; 0xdece <mmc_disk_ioctl+0x30>
    dec4:	88 23       	and	r24, r24
    dec6:	09 f1       	breq	.+66     	; 0xdf0a <mmc_disk_ioctl+0x6c>
    dec8:	81 30       	cpi	r24, 0x01	; 1
    deca:	09 f1       	breq	.+66     	; 0xdf0e <mmc_disk_ioctl+0x70>
    decc:	69 c2       	rjmp	.+1234   	; 0xe3a0 <mmc_disk_ioctl+0x502>
    dece:	87 30       	cpi	r24, 0x07	; 7
    ded0:	09 f4       	brne	.+2      	; 0xded4 <mmc_disk_ioctl+0x36>
    ded2:	74 c1       	rjmp	.+744    	; 0xe1bc <mmc_disk_ioctl+0x31e>
    ded4:	82 33       	cpi	r24, 0x32	; 50
    ded6:	09 f4       	brne	.+2      	; 0xdeda <mmc_disk_ioctl+0x3c>
    ded8:	36 c1       	rjmp	.+620    	; 0xe146 <mmc_disk_ioctl+0x2a8>
    deda:	84 30       	cpi	r24, 0x04	; 4
    dedc:	09 f0       	breq	.+2      	; 0xdee0 <mmc_disk_ioctl+0x42>
    dede:	60 c2       	rjmp	.+1216   	; 0xe3a0 <mmc_disk_ioctl+0x502>
    dee0:	ec c0       	rjmp	.+472    	; 0xe0ba <mmc_disk_ioctl+0x21c>
    dee2:	86 33       	cpi	r24, 0x36	; 54
    dee4:	09 f4       	brne	.+2      	; 0xdee8 <mmc_disk_ioctl+0x4a>
    dee6:	57 c1       	rjmp	.+686    	; 0xe196 <mmc_disk_ioctl+0x2f8>
    dee8:	38 f4       	brcc	.+14     	; 0xdef8 <mmc_disk_ioctl+0x5a>
    deea:	84 33       	cpi	r24, 0x34	; 52
    deec:	09 f4       	brne	.+2      	; 0xdef0 <mmc_disk_ioctl+0x52>
    deee:	35 c1       	rjmp	.+618    	; 0xe15a <mmc_disk_ioctl+0x2bc>
    def0:	85 33       	cpi	r24, 0x35	; 53
    def2:	09 f4       	brne	.+2      	; 0xdef6 <mmc_disk_ioctl+0x58>
    def4:	3c c1       	rjmp	.+632    	; 0xe16e <mmc_disk_ioctl+0x2d0>
    def6:	54 c2       	rjmp	.+1192   	; 0xe3a0 <mmc_disk_ioctl+0x502>
    def8:	88 33       	cpi	r24, 0x38	; 56
    defa:	09 f4       	brne	.+2      	; 0xdefe <mmc_disk_ioctl+0x60>
    defc:	bf c1       	rjmp	.+894    	; 0xe27c <mmc_disk_ioctl+0x3de>
    defe:	08 f4       	brcc	.+2      	; 0xdf02 <mmc_disk_ioctl+0x64>
    df00:	65 c1       	rjmp	.+714    	; 0xe1cc <mmc_disk_ioctl+0x32e>
    df02:	89 33       	cpi	r24, 0x39	; 57
    df04:	09 f4       	brne	.+2      	; 0xdf08 <mmc_disk_ioctl+0x6a>
    df06:	07 c2       	rjmp	.+1038   	; 0xe316 <mmc_disk_ioctl+0x478>
    df08:	4b c2       	rjmp	.+1174   	; 0xe3a0 <mmc_disk_ioctl+0x502>
    df0a:	f4 dd       	rcall	.-1048   	; 0xdaf4 <select>
    df0c:	51 c1       	rjmp	.+674    	; 0xe1b0 <mmc_disk_ioctl+0x312>
    df0e:	40 e0       	ldi	r20, 0x00	; 0
    df10:	50 e0       	ldi	r21, 0x00	; 0
    df12:	ba 01       	movw	r22, r20
    df14:	89 e0       	ldi	r24, 0x09	; 9
    df16:	0b de       	rcall	.-1002   	; 0xdb2e <send_cmd>
    df18:	81 11       	cpse	r24, r1
    df1a:	3c c2       	rjmp	.+1144   	; 0xe394 <mmc_disk_ioctl+0x4f6>
    df1c:	60 e1       	ldi	r22, 0x10	; 16
    df1e:	70 e0       	ldi	r23, 0x00	; 0
    df20:	ce 01       	movw	r24, r28
    df22:	01 96       	adiw	r24, 0x01	; 1
    df24:	ae dd       	rcall	.-1188   	; 0xda82 <rcvr_datablock>
    df26:	89 2b       	or	r24, r25
    df28:	09 f4       	brne	.+2      	; 0xdf2c <mmc_disk_ioctl+0x8e>
    df2a:	34 c2       	rjmp	.+1128   	; 0xe394 <mmc_disk_ioctl+0x4f6>
    df2c:	99 81       	ldd	r25, Y+1	; 0x01
    df2e:	92 95       	swap	r25
    df30:	96 95       	lsr	r25
    df32:	96 95       	lsr	r25
    df34:	93 70       	andi	r25, 0x03	; 3
    df36:	29 85       	ldd	r18, Y+9	; 0x09
    df38:	4a 85       	ldd	r20, Y+10	; 0x0a
    df3a:	88 85       	ldd	r24, Y+8	; 0x08
    df3c:	91 30       	cpi	r25, 0x01	; 1
    df3e:	d9 f4       	brne	.+54     	; 0xdf76 <mmc_disk_ioctl+0xd8>
    df40:	30 e0       	ldi	r19, 0x00	; 0
    df42:	32 2f       	mov	r19, r18
    df44:	22 27       	eor	r18, r18
    df46:	24 0f       	add	r18, r20
    df48:	31 1d       	adc	r19, r1
    df4a:	8f 73       	andi	r24, 0x3F	; 63
    df4c:	90 e0       	ldi	r25, 0x00	; 0
    df4e:	a0 e0       	ldi	r26, 0x00	; 0
    df50:	b0 e0       	ldi	r27, 0x00	; 0
    df52:	dc 01       	movw	r26, r24
    df54:	99 27       	eor	r25, r25
    df56:	88 27       	eor	r24, r24
    df58:	01 96       	adiw	r24, 0x01	; 1
    df5a:	a1 1d       	adc	r26, r1
    df5c:	b1 1d       	adc	r27, r1
    df5e:	82 0f       	add	r24, r18
    df60:	93 1f       	adc	r25, r19
    df62:	a1 1d       	adc	r26, r1
    df64:	b1 1d       	adc	r27, r1
    df66:	5a e0       	ldi	r21, 0x0A	; 10
    df68:	88 0f       	add	r24, r24
    df6a:	99 1f       	adc	r25, r25
    df6c:	aa 1f       	adc	r26, r26
    df6e:	bb 1f       	adc	r27, r27
    df70:	5a 95       	dec	r21
    df72:	d1 f7       	brne	.-12     	; 0xdf68 <mmc_disk_ioctl+0xca>
    df74:	9b c0       	rjmp	.+310    	; 0xe0ac <mmc_disk_ioctl+0x20e>
    df76:	22 95       	swap	r18
    df78:	26 95       	lsr	r18
    df7a:	26 95       	lsr	r18
    df7c:	23 70       	andi	r18, 0x03	; 3
    df7e:	f4 e0       	ldi	r31, 0x04	; 4
    df80:	8f 9f       	mul	r24, r31
    df82:	c0 01       	movw	r24, r0
    df84:	11 24       	eor	r1, r1
    df86:	82 0f       	add	r24, r18
    df88:	91 1d       	adc	r25, r1
    df8a:	01 96       	adiw	r24, 0x01	; 1
    df8c:	2f 81       	ldd	r18, Y+7	; 0x07
    df8e:	23 70       	andi	r18, 0x03	; 3
    df90:	30 e0       	ldi	r19, 0x00	; 0
    df92:	32 2f       	mov	r19, r18
    df94:	22 27       	eor	r18, r18
    df96:	33 0f       	add	r19, r19
    df98:	33 0f       	add	r19, r19
    df9a:	82 0f       	add	r24, r18
    df9c:	93 1f       	adc	r25, r19
    df9e:	a0 e0       	ldi	r26, 0x00	; 0
    dfa0:	b0 e0       	ldi	r27, 0x00	; 0
    dfa2:	2e 81       	ldd	r18, Y+6	; 0x06
    dfa4:	32 2f       	mov	r19, r18
    dfa6:	3f 70       	andi	r19, 0x0F	; 15
    dfa8:	2b 85       	ldd	r18, Y+11	; 0x0b
    dfaa:	22 1f       	adc	r18, r18
    dfac:	22 27       	eor	r18, r18
    dfae:	22 1f       	adc	r18, r18
    dfb0:	23 0f       	add	r18, r19
    dfb2:	43 70       	andi	r20, 0x03	; 3
    dfb4:	44 0f       	add	r20, r20
    dfb6:	42 0f       	add	r20, r18
    dfb8:	47 50       	subi	r20, 0x07	; 7
    dfba:	04 c0       	rjmp	.+8      	; 0xdfc4 <mmc_disk_ioctl+0x126>
    dfbc:	88 0f       	add	r24, r24
    dfbe:	99 1f       	adc	r25, r25
    dfc0:	aa 1f       	adc	r26, r26
    dfc2:	bb 1f       	adc	r27, r27
    dfc4:	4a 95       	dec	r20
    dfc6:	d2 f7       	brpl	.-12     	; 0xdfbc <mmc_disk_ioctl+0x11e>
    dfc8:	71 c0       	rjmp	.+226    	; 0xe0ac <mmc_disk_ioctl+0x20e>
    dfca:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    dfce:	40 e0       	ldi	r20, 0x00	; 0
    dfd0:	50 e0       	ldi	r21, 0x00	; 0
    dfd2:	ba 01       	movw	r22, r20
    dfd4:	82 ff       	sbrs	r24, 2
    dfd6:	24 c0       	rjmp	.+72     	; 0xe020 <mmc_disk_ioctl+0x182>
    dfd8:	8d e8       	ldi	r24, 0x8D	; 141
    dfda:	a9 dd       	rcall	.-1198   	; 0xdb2e <send_cmd>
    dfdc:	81 11       	cpse	r24, r1
    dfde:	da c1       	rjmp	.+948    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    dfe0:	8f ef       	ldi	r24, 0xFF	; 255
    dfe2:	47 dd       	rcall	.-1394   	; 0xda72 <xchg_spi>
    dfe4:	60 e1       	ldi	r22, 0x10	; 16
    dfe6:	70 e0       	ldi	r23, 0x00	; 0
    dfe8:	ce 01       	movw	r24, r28
    dfea:	01 96       	adiw	r24, 0x01	; 1
    dfec:	4a dd       	rcall	.-1388   	; 0xda82 <rcvr_datablock>
    dfee:	89 2b       	or	r24, r25
    dff0:	09 f4       	brne	.+2      	; 0xdff4 <mmc_disk_ioctl+0x156>
    dff2:	d0 c1       	rjmp	.+928    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    dff4:	a0 e3       	ldi	r26, 0x30	; 48
    dff6:	fa 2e       	mov	r15, r26
    dff8:	8f ef       	ldi	r24, 0xFF	; 255
    dffa:	3b dd       	rcall	.-1418   	; 0xda72 <xchg_spi>
    dffc:	fa 94       	dec	r15
    dffe:	f1 10       	cpse	r15, r1
    e000:	fb cf       	rjmp	.-10     	; 0xdff8 <mmc_disk_ioctl+0x15a>
    e002:	2b 85       	ldd	r18, Y+11	; 0x0b
    e004:	22 95       	swap	r18
    e006:	2f 70       	andi	r18, 0x0F	; 15
    e008:	80 e1       	ldi	r24, 0x10	; 16
    e00a:	90 e0       	ldi	r25, 0x00	; 0
    e00c:	a0 e0       	ldi	r26, 0x00	; 0
    e00e:	b0 e0       	ldi	r27, 0x00	; 0
    e010:	04 c0       	rjmp	.+8      	; 0xe01a <mmc_disk_ioctl+0x17c>
    e012:	88 0f       	add	r24, r24
    e014:	99 1f       	adc	r25, r25
    e016:	aa 1f       	adc	r26, r26
    e018:	bb 1f       	adc	r27, r27
    e01a:	2a 95       	dec	r18
    e01c:	d2 f7       	brpl	.-12     	; 0xe012 <mmc_disk_ioctl+0x174>
    e01e:	46 c0       	rjmp	.+140    	; 0xe0ac <mmc_disk_ioctl+0x20e>
    e020:	89 e0       	ldi	r24, 0x09	; 9
    e022:	85 dd       	rcall	.-1270   	; 0xdb2e <send_cmd>
    e024:	81 11       	cpse	r24, r1
    e026:	b6 c1       	rjmp	.+876    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e028:	60 e1       	ldi	r22, 0x10	; 16
    e02a:	70 e0       	ldi	r23, 0x00	; 0
    e02c:	ce 01       	movw	r24, r28
    e02e:	01 96       	adiw	r24, 0x01	; 1
    e030:	28 dd       	rcall	.-1456   	; 0xda82 <rcvr_datablock>
    e032:	89 2b       	or	r24, r25
    e034:	09 f4       	brne	.+2      	; 0xe038 <mmc_disk_ioctl+0x19a>
    e036:	ae c1       	rjmp	.+860    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e038:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <CardType>
    e03c:	2b 85       	ldd	r18, Y+11	; 0x0b
    e03e:	8c 85       	ldd	r24, Y+12	; 0x0c
    e040:	91 ff       	sbrs	r25, 1
    e042:	16 c0       	rjmp	.+44     	; 0xe070 <mmc_disk_ioctl+0x1d2>
    e044:	2f 73       	andi	r18, 0x3F	; 63
    e046:	88 1f       	adc	r24, r24
    e048:	88 27       	eor	r24, r24
    e04a:	88 1f       	adc	r24, r24
    e04c:	90 e0       	ldi	r25, 0x00	; 0
    e04e:	01 96       	adiw	r24, 0x01	; 1
    e050:	82 0f       	add	r24, r18
    e052:	91 1d       	adc	r25, r1
    e054:	82 0f       	add	r24, r18
    e056:	91 1d       	adc	r25, r1
    e058:	2e 85       	ldd	r18, Y+14	; 0x0e
    e05a:	22 95       	swap	r18
    e05c:	26 95       	lsr	r18
    e05e:	26 95       	lsr	r18
    e060:	23 70       	andi	r18, 0x03	; 3
    e062:	21 50       	subi	r18, 0x01	; 1
    e064:	02 c0       	rjmp	.+4      	; 0xe06a <mmc_disk_ioctl+0x1cc>
    e066:	88 0f       	add	r24, r24
    e068:	99 1f       	adc	r25, r25
    e06a:	2a 95       	dec	r18
    e06c:	e2 f7       	brpl	.-8      	; 0xe066 <mmc_disk_ioctl+0x1c8>
    e06e:	1c c0       	rjmp	.+56     	; 0xe0a8 <mmc_disk_ioctl+0x20a>
    e070:	38 2f       	mov	r19, r24
    e072:	33 70       	andi	r19, 0x03	; 3
    e074:	82 95       	swap	r24
    e076:	86 95       	lsr	r24
    e078:	87 70       	andi	r24, 0x07	; 7
    e07a:	90 e0       	ldi	r25, 0x00	; 0
    e07c:	f8 e0       	ldi	r31, 0x08	; 8
    e07e:	3f 9f       	mul	r19, r31
    e080:	80 0d       	add	r24, r0
    e082:	91 1d       	adc	r25, r1
    e084:	11 24       	eor	r1, r1
    e086:	01 96       	adiw	r24, 0x01	; 1
    e088:	2c 77       	andi	r18, 0x7C	; 124
    e08a:	30 e0       	ldi	r19, 0x00	; 0
    e08c:	35 95       	asr	r19
    e08e:	27 95       	ror	r18
    e090:	35 95       	asr	r19
    e092:	27 95       	ror	r18
    e094:	2f 5f       	subi	r18, 0xFF	; 255
    e096:	3f 4f       	sbci	r19, 0xFF	; 255
    e098:	82 9f       	mul	r24, r18
    e09a:	a0 01       	movw	r20, r0
    e09c:	83 9f       	mul	r24, r19
    e09e:	50 0d       	add	r21, r0
    e0a0:	92 9f       	mul	r25, r18
    e0a2:	50 0d       	add	r21, r0
    e0a4:	11 24       	eor	r1, r1
    e0a6:	ca 01       	movw	r24, r20
    e0a8:	a0 e0       	ldi	r26, 0x00	; 0
    e0aa:	b0 e0       	ldi	r27, 0x00	; 0
    e0ac:	f8 01       	movw	r30, r16
    e0ae:	80 83       	st	Z, r24
    e0b0:	91 83       	std	Z+1, r25	; 0x01
    e0b2:	a2 83       	std	Z+2, r26	; 0x02
    e0b4:	b3 83       	std	Z+3, r27	; 0x03
    e0b6:	00 e0       	ldi	r16, 0x00	; 0
    e0b8:	6e c1       	rjmp	.+732    	; 0xe396 <mmc_disk_ioctl+0x4f8>
    e0ba:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    e0be:	86 70       	andi	r24, 0x06	; 6
    e0c0:	11 f4       	brne	.+4      	; 0xe0c6 <mmc_disk_ioctl+0x228>
    e0c2:	01 e0       	ldi	r16, 0x01	; 1
    e0c4:	6e c1       	rjmp	.+732    	; 0xe3a2 <mmc_disk_ioctl+0x504>
    e0c6:	be 01       	movw	r22, r28
    e0c8:	6f 5f       	subi	r22, 0xFF	; 255
    e0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    e0cc:	83 e3       	ldi	r24, 0x33	; 51
    e0ce:	e7 de       	rcall	.-562    	; 0xde9e <mmc_disk_ioctl>
    e0d0:	89 2b       	or	r24, r25
    e0d2:	b9 f7       	brne	.-18     	; 0xe0c2 <mmc_disk_ioctl+0x224>
    e0d4:	89 81       	ldd	r24, Y+1	; 0x01
    e0d6:	82 95       	swap	r24
    e0d8:	86 95       	lsr	r24
    e0da:	86 95       	lsr	r24
    e0dc:	83 70       	andi	r24, 0x03	; 3
    e0de:	19 f4       	brne	.+6      	; 0xe0e6 <mmc_disk_ioctl+0x248>
    e0e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    e0e2:	86 ff       	sbrs	r24, 6
    e0e4:	ee cf       	rjmp	.-36     	; 0xe0c2 <mmc_disk_ioctl+0x224>
    e0e6:	f8 01       	movw	r30, r16
    e0e8:	40 81       	ld	r20, Z
    e0ea:	51 81       	ldd	r21, Z+1	; 0x01
    e0ec:	62 81       	ldd	r22, Z+2	; 0x02
    e0ee:	73 81       	ldd	r23, Z+3	; 0x03
    e0f0:	c4 80       	ldd	r12, Z+4	; 0x04
    e0f2:	d5 80       	ldd	r13, Z+5	; 0x05
    e0f4:	e6 80       	ldd	r14, Z+6	; 0x06
    e0f6:	f7 80       	ldd	r15, Z+7	; 0x07
    e0f8:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    e0fc:	83 fd       	sbrc	r24, 3
    e0fe:	0e c0       	rjmp	.+28     	; 0xe11c <mmc_disk_ioctl+0x27e>
    e100:	39 e0       	ldi	r19, 0x09	; 9
    e102:	44 0f       	add	r20, r20
    e104:	55 1f       	adc	r21, r21
    e106:	66 1f       	adc	r22, r22
    e108:	77 1f       	adc	r23, r23
    e10a:	3a 95       	dec	r19
    e10c:	d1 f7       	brne	.-12     	; 0xe102 <mmc_disk_ioctl+0x264>
    e10e:	e9 e0       	ldi	r30, 0x09	; 9
    e110:	cc 0c       	add	r12, r12
    e112:	dd 1c       	adc	r13, r13
    e114:	ee 1c       	adc	r14, r14
    e116:	ff 1c       	adc	r15, r15
    e118:	ea 95       	dec	r30
    e11a:	d1 f7       	brne	.-12     	; 0xe110 <mmc_disk_ioctl+0x272>
    e11c:	80 e2       	ldi	r24, 0x20	; 32
    e11e:	07 dd       	rcall	.-1522   	; 0xdb2e <send_cmd>
    e120:	81 11       	cpse	r24, r1
    e122:	38 c1       	rjmp	.+624    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e124:	b7 01       	movw	r22, r14
    e126:	a6 01       	movw	r20, r12
    e128:	81 e2       	ldi	r24, 0x21	; 33
    e12a:	01 dd       	rcall	.-1534   	; 0xdb2e <send_cmd>
    e12c:	81 11       	cpse	r24, r1
    e12e:	32 c1       	rjmp	.+612    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e130:	40 e0       	ldi	r20, 0x00	; 0
    e132:	50 e0       	ldi	r21, 0x00	; 0
    e134:	ba 01       	movw	r22, r20
    e136:	86 e2       	ldi	r24, 0x26	; 38
    e138:	fa dc       	rcall	.-1548   	; 0xdb2e <send_cmd>
    e13a:	81 11       	cpse	r24, r1
    e13c:	2b c1       	rjmp	.+598    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e13e:	80 e3       	ldi	r24, 0x30	; 48
    e140:	95 e7       	ldi	r25, 0x75	; 117
    e142:	c6 dc       	rcall	.-1652   	; 0xdad0 <wait_ready>
    e144:	35 c0       	rjmp	.+106    	; 0xe1b0 <mmc_disk_ioctl+0x312>
    e146:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <CardType>
    e14a:	fb 01       	movw	r30, r22
    e14c:	80 83       	st	Z, r24
    e14e:	3c c0       	rjmp	.+120    	; 0xe1c8 <mmc_disk_ioctl+0x32a>
    e150:	40 e0       	ldi	r20, 0x00	; 0
    e152:	50 e0       	ldi	r21, 0x00	; 0
    e154:	ba 01       	movw	r22, r20
    e156:	89 e0       	ldi	r24, 0x09	; 9
    e158:	04 c0       	rjmp	.+8      	; 0xe162 <mmc_disk_ioctl+0x2c4>
    e15a:	40 e0       	ldi	r20, 0x00	; 0
    e15c:	50 e0       	ldi	r21, 0x00	; 0
    e15e:	ba 01       	movw	r22, r20
    e160:	8a e0       	ldi	r24, 0x0A	; 10
    e162:	e5 dc       	rcall	.-1590   	; 0xdb2e <send_cmd>
    e164:	81 11       	cpse	r24, r1
    e166:	16 c1       	rjmp	.+556    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e168:	60 e1       	ldi	r22, 0x10	; 16
    e16a:	70 e0       	ldi	r23, 0x00	; 0
    e16c:	1f c0       	rjmp	.+62     	; 0xe1ac <mmc_disk_ioctl+0x30e>
    e16e:	40 e0       	ldi	r20, 0x00	; 0
    e170:	50 e0       	ldi	r21, 0x00	; 0
    e172:	ba 01       	movw	r22, r20
    e174:	8a e3       	ldi	r24, 0x3A	; 58
    e176:	db dc       	rcall	.-1610   	; 0xdb2e <send_cmd>
    e178:	81 11       	cpse	r24, r1
    e17a:	0c c1       	rjmp	.+536    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e17c:	78 01       	movw	r14, r16
    e17e:	f4 e0       	ldi	r31, 0x04	; 4
    e180:	ef 0e       	add	r14, r31
    e182:	f1 1c       	adc	r15, r1
    e184:	8f ef       	ldi	r24, 0xFF	; 255
    e186:	8d d1       	rcall	.+794    	; 0xe4a2 <mmc_spi_TXRX>
    e188:	f8 01       	movw	r30, r16
    e18a:	81 93       	st	Z+, r24
    e18c:	8f 01       	movw	r16, r30
    e18e:	ee 15       	cp	r30, r14
    e190:	ff 05       	cpc	r31, r15
    e192:	c1 f7       	brne	.-16     	; 0xe184 <mmc_disk_ioctl+0x2e6>
    e194:	90 cf       	rjmp	.-224    	; 0xe0b6 <mmc_disk_ioctl+0x218>
    e196:	40 e0       	ldi	r20, 0x00	; 0
    e198:	50 e0       	ldi	r21, 0x00	; 0
    e19a:	ba 01       	movw	r22, r20
    e19c:	8d e8       	ldi	r24, 0x8D	; 141
    e19e:	c7 dc       	rcall	.-1650   	; 0xdb2e <send_cmd>
    e1a0:	81 11       	cpse	r24, r1
    e1a2:	f8 c0       	rjmp	.+496    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e1a4:	8f ef       	ldi	r24, 0xFF	; 255
    e1a6:	65 dc       	rcall	.-1846   	; 0xda72 <xchg_spi>
    e1a8:	60 e4       	ldi	r22, 0x40	; 64
    e1aa:	70 e0       	ldi	r23, 0x00	; 0
    e1ac:	c8 01       	movw	r24, r16
    e1ae:	69 dc       	rcall	.-1838   	; 0xda82 <rcvr_datablock>
    e1b0:	01 e0       	ldi	r16, 0x01	; 1
    e1b2:	10 e0       	ldi	r17, 0x00	; 0
    e1b4:	89 2b       	or	r24, r25
    e1b6:	09 f4       	brne	.+2      	; 0xe1ba <mmc_disk_ioctl+0x31c>
    e1b8:	ef c0       	rjmp	.+478    	; 0xe398 <mmc_disk_ioctl+0x4fa>
    e1ba:	ea c0       	rjmp	.+468    	; 0xe390 <mmc_disk_ioctl+0x4f2>
    e1bc:	40 d2       	rcall	.+1152   	; 0xe63e <mmc_power_off>
    e1be:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    e1c2:	81 60       	ori	r24, 0x01	; 1
    e1c4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Stat>
    e1c8:	00 e0       	ldi	r16, 0x00	; 0
    e1ca:	eb c0       	rjmp	.+470    	; 0xe3a2 <mmc_disk_ioctl+0x504>
    e1cc:	fb 01       	movw	r30, r22
    e1ce:	43 81       	ldd	r20, Z+3	; 0x03
    e1d0:	54 81       	ldd	r21, Z+4	; 0x04
    e1d2:	65 81       	ldd	r22, Z+5	; 0x05
    e1d4:	76 81       	ldd	r23, Z+6	; 0x06
    e1d6:	39 e0       	ldi	r19, 0x09	; 9
    e1d8:	44 0f       	add	r20, r20
    e1da:	55 1f       	adc	r21, r21
    e1dc:	66 1f       	adc	r22, r22
    e1de:	77 1f       	adc	r23, r23
    e1e0:	3a 95       	dec	r19
    e1e2:	d1 f7       	brne	.-12     	; 0xe1d8 <mmc_disk_ioctl+0x33a>
    e1e4:	70 68       	ori	r23, 0x80	; 128
    e1e6:	80 81       	ld	r24, Z
    e1e8:	90 e0       	ldi	r25, 0x00	; 0
    e1ea:	a0 e0       	ldi	r26, 0x00	; 0
    e1ec:	b0 e0       	ldi	r27, 0x00	; 0
    e1ee:	2c e1       	ldi	r18, 0x1C	; 28
    e1f0:	88 0f       	add	r24, r24
    e1f2:	99 1f       	adc	r25, r25
    e1f4:	aa 1f       	adc	r26, r26
    e1f6:	bb 1f       	adc	r27, r27
    e1f8:	2a 95       	dec	r18
    e1fa:	d1 f7       	brne	.-12     	; 0xe1f0 <mmc_disk_ioctl+0x352>
    e1fc:	48 2b       	or	r20, r24
    e1fe:	59 2b       	or	r21, r25
    e200:	6a 2b       	or	r22, r26
    e202:	7b 2b       	or	r23, r27
    e204:	81 81       	ldd	r24, Z+1	; 0x01
    e206:	92 81       	ldd	r25, Z+2	; 0x02
    e208:	01 97       	sbiw	r24, 0x01	; 1
    e20a:	91 70       	andi	r25, 0x01	; 1
    e20c:	a0 e0       	ldi	r26, 0x00	; 0
    e20e:	b0 e0       	ldi	r27, 0x00	; 0
    e210:	48 2b       	or	r20, r24
    e212:	59 2b       	or	r21, r25
    e214:	6a 2b       	or	r22, r26
    e216:	7b 2b       	or	r23, r27
    e218:	80 e3       	ldi	r24, 0x30	; 48
    e21a:	89 dc       	rcall	.-1774   	; 0xdb2e <send_cmd>
    e21c:	81 11       	cpse	r24, r1
    e21e:	ba c0       	rjmp	.+372    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e220:	88 ee       	ldi	r24, 0xE8	; 232
    e222:	93 e0       	ldi	r25, 0x03	; 3
    e224:	41 d1       	rcall	.+642    	; 0xe4a8 <mmc_set_ms_timeout>
    e226:	8f ef       	ldi	r24, 0xFF	; 255
    e228:	3c d1       	rcall	.+632    	; 0xe4a2 <mmc_spi_TXRX>
    e22a:	8f 3f       	cpi	r24, 0xFF	; 255
    e22c:	21 f4       	brne	.+8      	; 0xe236 <mmc_disk_ioctl+0x398>
    e22e:	43 d1       	rcall	.+646    	; 0xe4b6 <mmc_test_timeout>
    e230:	89 2b       	or	r24, r25
    e232:	c9 f3       	breq	.-14     	; 0xe226 <mmc_disk_ioctl+0x388>
    e234:	af c0       	rjmp	.+350    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e236:	8e 3f       	cpi	r24, 0xFE	; 254
    e238:	09 f0       	breq	.+2      	; 0xe23c <mmc_disk_ioctl+0x39e>
    e23a:	ac c0       	rjmp	.+344    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e23c:	f8 01       	movw	r30, r16
    e23e:	e7 80       	ldd	r14, Z+7	; 0x07
    e240:	f0 84       	ldd	r15, Z+8	; 0x08
    e242:	c1 80       	ldd	r12, Z+1	; 0x01
    e244:	d2 80       	ldd	r13, Z+2	; 0x02
    e246:	ce 0c       	add	r12, r14
    e248:	df 1c       	adc	r13, r15
    e24a:	ce 14       	cp	r12, r14
    e24c:	df 04       	cpc	r13, r15
    e24e:	31 f0       	breq	.+12     	; 0xe25c <mmc_disk_ioctl+0x3be>
    e250:	8f ef       	ldi	r24, 0xFF	; 255
    e252:	27 d1       	rcall	.+590    	; 0xe4a2 <mmc_spi_TXRX>
    e254:	f7 01       	movw	r30, r14
    e256:	81 93       	st	Z+, r24
    e258:	7f 01       	movw	r14, r30
    e25a:	f7 cf       	rjmp	.-18     	; 0xe24a <mmc_disk_ioctl+0x3ac>
    e25c:	f8 01       	movw	r30, r16
    e25e:	81 81       	ldd	r24, Z+1	; 0x01
    e260:	92 81       	ldd	r25, Z+2	; 0x02
    e262:	02 e0       	ldi	r16, 0x02	; 2
    e264:	12 e0       	ldi	r17, 0x02	; 2
    e266:	08 1b       	sub	r16, r24
    e268:	19 0b       	sbc	r17, r25
    e26a:	01 15       	cp	r16, r1
    e26c:	11 05       	cpc	r17, r1
    e26e:	09 f4       	brne	.+2      	; 0xe272 <mmc_disk_ioctl+0x3d4>
    e270:	22 cf       	rjmp	.-444    	; 0xe0b6 <mmc_disk_ioctl+0x218>
    e272:	8f ef       	ldi	r24, 0xFF	; 255
    e274:	fe db       	rcall	.-2052   	; 0xda72 <xchg_spi>
    e276:	01 50       	subi	r16, 0x01	; 1
    e278:	11 09       	sbc	r17, r1
    e27a:	f7 cf       	rjmp	.-18     	; 0xe26a <mmc_disk_ioctl+0x3cc>
    e27c:	fb 01       	movw	r30, r22
    e27e:	43 81       	ldd	r20, Z+3	; 0x03
    e280:	54 81       	ldd	r21, Z+4	; 0x04
    e282:	65 81       	ldd	r22, Z+5	; 0x05
    e284:	76 81       	ldd	r23, Z+6	; 0x06
    e286:	39 e0       	ldi	r19, 0x09	; 9
    e288:	44 0f       	add	r20, r20
    e28a:	55 1f       	adc	r21, r21
    e28c:	66 1f       	adc	r22, r22
    e28e:	77 1f       	adc	r23, r23
    e290:	3a 95       	dec	r19
    e292:	d1 f7       	brne	.-12     	; 0xe288 <mmc_disk_ioctl+0x3ea>
    e294:	70 68       	ori	r23, 0x80	; 128
    e296:	80 81       	ld	r24, Z
    e298:	90 e0       	ldi	r25, 0x00	; 0
    e29a:	a0 e0       	ldi	r26, 0x00	; 0
    e29c:	b0 e0       	ldi	r27, 0x00	; 0
    e29e:	2c e1       	ldi	r18, 0x1C	; 28
    e2a0:	88 0f       	add	r24, r24
    e2a2:	99 1f       	adc	r25, r25
    e2a4:	aa 1f       	adc	r26, r26
    e2a6:	bb 1f       	adc	r27, r27
    e2a8:	2a 95       	dec	r18
    e2aa:	d1 f7       	brne	.-12     	; 0xe2a0 <mmc_disk_ioctl+0x402>
    e2ac:	48 2b       	or	r20, r24
    e2ae:	59 2b       	or	r21, r25
    e2b0:	6a 2b       	or	r22, r26
    e2b2:	7b 2b       	or	r23, r27
    e2b4:	81 81       	ldd	r24, Z+1	; 0x01
    e2b6:	92 81       	ldd	r25, Z+2	; 0x02
    e2b8:	01 97       	sbiw	r24, 0x01	; 1
    e2ba:	91 70       	andi	r25, 0x01	; 1
    e2bc:	a0 e0       	ldi	r26, 0x00	; 0
    e2be:	b0 e0       	ldi	r27, 0x00	; 0
    e2c0:	48 2b       	or	r20, r24
    e2c2:	59 2b       	or	r21, r25
    e2c4:	6a 2b       	or	r22, r26
    e2c6:	7b 2b       	or	r23, r27
    e2c8:	81 e3       	ldi	r24, 0x31	; 49
    e2ca:	31 dc       	rcall	.-1950   	; 0xdb2e <send_cmd>
    e2cc:	81 11       	cpse	r24, r1
    e2ce:	62 c0       	rjmp	.+196    	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e2d0:	8f ef       	ldi	r24, 0xFF	; 255
    e2d2:	cf db       	rcall	.-2146   	; 0xda72 <xchg_spi>
    e2d4:	8e ef       	ldi	r24, 0xFE	; 254
    e2d6:	cd db       	rcall	.-2150   	; 0xda72 <xchg_spi>
    e2d8:	f8 01       	movw	r30, r16
    e2da:	e7 80       	ldd	r14, Z+7	; 0x07
    e2dc:	f0 84       	ldd	r15, Z+8	; 0x08
    e2de:	c1 80       	ldd	r12, Z+1	; 0x01
    e2e0:	d2 80       	ldd	r13, Z+2	; 0x02
    e2e2:	ce 0c       	add	r12, r14
    e2e4:	df 1c       	adc	r13, r15
    e2e6:	ec 14       	cp	r14, r12
    e2e8:	fd 04       	cpc	r15, r13
    e2ea:	29 f0       	breq	.+10     	; 0xe2f6 <mmc_disk_ioctl+0x458>
    e2ec:	f7 01       	movw	r30, r14
    e2ee:	81 91       	ld	r24, Z+
    e2f0:	7f 01       	movw	r14, r30
    e2f2:	bf db       	rcall	.-2178   	; 0xda72 <xchg_spi>
    e2f4:	f8 cf       	rjmp	.-16     	; 0xe2e6 <mmc_disk_ioctl+0x448>
    e2f6:	f8 01       	movw	r30, r16
    e2f8:	81 81       	ldd	r24, Z+1	; 0x01
    e2fa:	92 81       	ldd	r25, Z+2	; 0x02
    e2fc:	02 e0       	ldi	r16, 0x02	; 2
    e2fe:	12 e0       	ldi	r17, 0x02	; 2
    e300:	08 1b       	sub	r16, r24
    e302:	19 0b       	sbc	r17, r25
    e304:	8f ef       	ldi	r24, 0xFF	; 255
    e306:	01 15       	cp	r16, r1
    e308:	11 05       	cpc	r17, r1
    e30a:	09 f4       	brne	.+2      	; 0xe30e <mmc_disk_ioctl+0x470>
    e30c:	3b c0       	rjmp	.+118    	; 0xe384 <mmc_disk_ioctl+0x4e6>
    e30e:	b1 db       	rcall	.-2206   	; 0xda72 <xchg_spi>
    e310:	01 50       	subi	r16, 0x01	; 1
    e312:	11 09       	sbc	r17, r1
    e314:	f7 cf       	rjmp	.-18     	; 0xe304 <mmc_disk_ioctl+0x466>
    e316:	fb 01       	movw	r30, r22
    e318:	43 81       	ldd	r20, Z+3	; 0x03
    e31a:	54 81       	ldd	r21, Z+4	; 0x04
    e31c:	65 81       	ldd	r22, Z+5	; 0x05
    e31e:	76 81       	ldd	r23, Z+6	; 0x06
    e320:	89 e0       	ldi	r24, 0x09	; 9
    e322:	44 0f       	add	r20, r20
    e324:	55 1f       	adc	r21, r21
    e326:	66 1f       	adc	r22, r22
    e328:	77 1f       	adc	r23, r23
    e32a:	8a 95       	dec	r24
    e32c:	d1 f7       	brne	.-12     	; 0xe322 <mmc_disk_ioctl+0x484>
    e32e:	74 68       	ori	r23, 0x84	; 132
    e330:	80 81       	ld	r24, Z
    e332:	90 e0       	ldi	r25, 0x00	; 0
    e334:	a0 e0       	ldi	r26, 0x00	; 0
    e336:	b0 e0       	ldi	r27, 0x00	; 0
    e338:	2c e1       	ldi	r18, 0x1C	; 28
    e33a:	88 0f       	add	r24, r24
    e33c:	99 1f       	adc	r25, r25
    e33e:	aa 1f       	adc	r26, r26
    e340:	bb 1f       	adc	r27, r27
    e342:	2a 95       	dec	r18
    e344:	d1 f7       	brne	.-12     	; 0xe33a <mmc_disk_ioctl+0x49c>
    e346:	48 2b       	or	r20, r24
    e348:	59 2b       	or	r21, r25
    e34a:	6a 2b       	or	r22, r26
    e34c:	7b 2b       	or	r23, r27
    e34e:	82 81       	ldd	r24, Z+2	; 0x02
    e350:	90 e0       	ldi	r25, 0x00	; 0
    e352:	a0 e0       	ldi	r26, 0x00	; 0
    e354:	b0 e0       	ldi	r27, 0x00	; 0
    e356:	48 2b       	or	r20, r24
    e358:	59 2b       	or	r21, r25
    e35a:	6a 2b       	or	r22, r26
    e35c:	7b 2b       	or	r23, r27
    e35e:	81 e3       	ldi	r24, 0x31	; 49
    e360:	e6 db       	rcall	.-2100   	; 0xdb2e <send_cmd>
    e362:	81 11       	cpse	r24, r1
    e364:	17 c0       	rjmp	.+46     	; 0xe394 <mmc_disk_ioctl+0x4f6>
    e366:	8f ef       	ldi	r24, 0xFF	; 255
    e368:	84 db       	rcall	.-2296   	; 0xda72 <xchg_spi>
    e36a:	8e ef       	ldi	r24, 0xFE	; 254
    e36c:	82 db       	rcall	.-2300   	; 0xda72 <xchg_spi>
    e36e:	f8 01       	movw	r30, r16
    e370:	81 81       	ldd	r24, Z+1	; 0x01
    e372:	7f db       	rcall	.-2306   	; 0xda72 <xchg_spi>
    e374:	01 e0       	ldi	r16, 0x01	; 1
    e376:	12 e0       	ldi	r17, 0x02	; 2
    e378:	8f ef       	ldi	r24, 0xFF	; 255
    e37a:	7b db       	rcall	.-2314   	; 0xda72 <xchg_spi>
    e37c:	01 50       	subi	r16, 0x01	; 1
    e37e:	11 09       	sbc	r17, r1
    e380:	d9 f7       	brne	.-10     	; 0xe378 <mmc_disk_ioctl+0x4da>
    e382:	8f ef       	ldi	r24, 0xFF	; 255
    e384:	8e d0       	rcall	.+284    	; 0xe4a2 <mmc_spi_TXRX>
    e386:	8f 71       	andi	r24, 0x1F	; 31
    e388:	01 e0       	ldi	r16, 0x01	; 1
    e38a:	10 e0       	ldi	r17, 0x00	; 0
    e38c:	85 30       	cpi	r24, 0x05	; 5
    e38e:	21 f4       	brne	.+8      	; 0xe398 <mmc_disk_ioctl+0x4fa>
    e390:	00 e0       	ldi	r16, 0x00	; 0
    e392:	02 c0       	rjmp	.+4      	; 0xe398 <mmc_disk_ioctl+0x4fa>
    e394:	01 e0       	ldi	r16, 0x01	; 1
    e396:	10 e0       	ldi	r17, 0x00	; 0
    e398:	6e db       	rcall	.-2340   	; 0xda76 <deselect>
    e39a:	04 c0       	rjmp	.+8      	; 0xe3a4 <mmc_disk_ioctl+0x506>
    e39c:	03 e0       	ldi	r16, 0x03	; 3
    e39e:	01 c0       	rjmp	.+2      	; 0xe3a2 <mmc_disk_ioctl+0x504>
    e3a0:	04 e0       	ldi	r16, 0x04	; 4
    e3a2:	10 e0       	ldi	r17, 0x00	; 0
    e3a4:	c8 01       	movw	r24, r16
    e3a6:	60 96       	adiw	r28, 0x10	; 16
    e3a8:	e8 e0       	ldi	r30, 0x08	; 8
    e3aa:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000e3ae <mmc_disk_timerproc>:
    e3ae:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <Timer1>
    e3b2:	88 23       	and	r24, r24
    e3b4:	19 f0       	breq	.+6      	; 0xe3bc <mmc_disk_timerproc+0xe>
    e3b6:	81 50       	subi	r24, 0x01	; 1
    e3b8:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <Timer1>
    e3bc:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <Timer2>
    e3c0:	88 23       	and	r24, r24
    e3c2:	19 f0       	breq	.+6      	; 0xe3ca <mmc_disk_timerproc+0x1c>
    e3c4:	81 50       	subi	r24, 0x01	; 1
    e3c6:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <Timer2>
    e3ca:	08 95       	ret

0000e3cc <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e3cc:	80 91 ed 17 	lds	r24, 0x17ED	; 0x8017ed <_mmc_timeout>
    e3d0:	90 91 ee 17 	lds	r25, 0x17EE	; 0x8017ee <_mmc_timeout+0x1>
    e3d4:	00 97       	sbiw	r24, 0x00	; 0
    e3d6:	29 f0       	breq	.+10     	; 0xe3e2 <mmc_task+0x16>
    e3d8:	01 97       	sbiw	r24, 0x01	; 1
    e3da:	90 93 ee 17 	sts	0x17EE, r25	; 0x8017ee <_mmc_timeout+0x1>
    e3de:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <_mmc_timeout>
    e3e2:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <_mmc_pre>
    e3e6:	90 91 e8 17 	lds	r25, 0x17E8	; 0x8017e8 <_mmc_pre+0x1>
    e3ea:	8a 30       	cpi	r24, 0x0A	; 10
    e3ec:	91 05       	cpc	r25, r1
    e3ee:	30 f4       	brcc	.+12     	; 0xe3fc <mmc_task+0x30>
    e3f0:	01 96       	adiw	r24, 0x01	; 1
    e3f2:	90 93 e8 17 	sts	0x17E8, r25	; 0x8017e8 <_mmc_pre+0x1>
    e3f6:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <_mmc_pre>
    e3fa:	08 95       	ret
    e3fc:	10 92 e8 17 	sts	0x17E8, r1	; 0x8017e8 <_mmc_pre+0x1>
    e400:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <_mmc_pre>
    e404:	d4 cf       	rjmp	.-88     	; 0xe3ae <mmc_disk_timerproc>
    e406:	08 95       	ret

0000e408 <mmc_install_timer>:
    e408:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <_mmc_timeout+0x1>
    e40c:	10 92 ed 17 	sts	0x17ED, r1	; 0x8017ed <_mmc_timeout>
    e410:	61 e0       	ldi	r22, 0x01	; 1
    e412:	70 e0       	ldi	r23, 0x00	; 0
    e414:	86 ee       	ldi	r24, 0xE6	; 230
    e416:	91 e7       	ldi	r25, 0x71	; 113
    e418:	0e 94 b2 33 	call	0x6764	; 0x6764 <set_timers>
    e41c:	01 96       	adiw	r24, 0x01	; 1
    e41e:	51 f4       	brne	.+20     	; 0xe434 <mmc_install_timer+0x2c>
    e420:	87 e4       	ldi	r24, 0x47	; 71
    e422:	98 e0       	ldi	r25, 0x08	; 8
    e424:	1f 92       	push	r1
    e426:	9f 93       	push	r25
    e428:	8f 93       	push	r24
    e42a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e42e:	0f 90       	pop	r0
    e430:	0f 90       	pop	r0
    e432:	0f 90       	pop	r0
    e434:	08 95       	ret

0000e436 <mmc_spi_begin>:
    e436:	60 91 e9 17 	lds	r22, 0x17E9	; 0x8017e9 <_mmc_clock>
    e43a:	70 91 ea 17 	lds	r23, 0x17EA	; 0x8017ea <_mmc_clock+0x1>
    e43e:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <_mmc_clock+0x2>
    e442:	90 91 ec 17 	lds	r25, 0x17EC	; 0x8017ec <_mmc_clock+0x3>
    e446:	4b e0       	ldi	r20, 0x0B	; 11
    e448:	50 e0       	ldi	r21, 0x00	; 0
    e44a:	0c 94 97 28 	jmp	0x512e	; 0x512e <spi_begin>
    e44e:	08 95       	ret

0000e450 <mmc_spi_end>:
    e450:	8b e0       	ldi	r24, 0x0B	; 11
    e452:	0c 94 41 28 	jmp	0x5082	; 0x5082 <spi_end>
    e456:	08 95       	ret

0000e458 <mmc_slow>:
    e458:	80 e2       	ldi	r24, 0x20	; 32
    e45a:	91 ea       	ldi	r25, 0xA1	; 161
    e45c:	a7 e0       	ldi	r26, 0x07	; 7
    e45e:	b0 e0       	ldi	r27, 0x00	; 0
    e460:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_mmc_clock>
    e464:	90 93 ea 17 	sts	0x17EA, r25	; 0x8017ea <_mmc_clock+0x1>
    e468:	a0 93 eb 17 	sts	0x17EB, r26	; 0x8017eb <_mmc_clock+0x2>
    e46c:	b0 93 ec 17 	sts	0x17EC, r27	; 0x8017ec <_mmc_clock+0x3>
    e470:	08 95       	ret

0000e472 <mmc_spi_init>:
    e472:	8b e0       	ldi	r24, 0x0B	; 11
    e474:	0e 94 3f 28 	call	0x507e	; 0x507e <chip_select_init>
    e478:	ef cf       	rjmp	.-34     	; 0xe458 <mmc_slow>
    e47a:	08 95       	ret

0000e47c <mmc_fast>:
    e47c:	80 ea       	ldi	r24, 0xA0	; 160
    e47e:	95 e2       	ldi	r25, 0x25	; 37
    e480:	a6 e2       	ldi	r26, 0x26	; 38
    e482:	b0 e0       	ldi	r27, 0x00	; 0
    e484:	80 93 e9 17 	sts	0x17E9, r24	; 0x8017e9 <_mmc_clock>
    e488:	90 93 ea 17 	sts	0x17EA, r25	; 0x8017ea <_mmc_clock+0x1>
    e48c:	a0 93 eb 17 	sts	0x17EB, r26	; 0x8017eb <_mmc_clock+0x2>
    e490:	b0 93 ec 17 	sts	0x17EC, r27	; 0x8017ec <_mmc_clock+0x3>
    e494:	08 95       	ret

0000e496 <mmc_spi_TX_buffer>:
    e496:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <spi_TX_buffer>
    e49a:	08 95       	ret

0000e49c <mmc_spi_RX_buffer>:
    e49c:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <spi_RX_buffer>
    e4a0:	08 95       	ret

0000e4a2 <mmc_spi_TXRX>:
    e4a2:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <spi_TXRX>
    e4a6:	08 95       	ret

0000e4a8 <mmc_set_ms_timeout>:
    e4a8:	f8 94       	cli
    e4aa:	90 93 ee 17 	sts	0x17EE, r25	; 0x8017ee <_mmc_timeout+0x1>
    e4ae:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <_mmc_timeout>
    e4b2:	78 94       	sei
    e4b4:	08 95       	ret

0000e4b6 <mmc_test_timeout>:
    e4b6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    e4ba:	81 fd       	sbrc	r24, 1
    e4bc:	15 c0       	rjmp	.+42     	; 0xe4e8 <mmc_test_timeout+0x32>
    e4be:	80 91 ed 17 	lds	r24, 0x17ED	; 0x8017ed <_mmc_timeout>
    e4c2:	90 91 ee 17 	lds	r25, 0x17EE	; 0x8017ee <_mmc_timeout+0x1>
    e4c6:	89 2b       	or	r24, r25
    e4c8:	91 f4       	brne	.+36     	; 0xe4ee <mmc_test_timeout+0x38>
    e4ca:	8a e3       	ldi	r24, 0x3A	; 58
    e4cc:	98 e0       	ldi	r25, 0x08	; 8
    e4ce:	1f 92       	push	r1
    e4d0:	9f 93       	push	r25
    e4d2:	8f 93       	push	r24
    e4d4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e4d8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Stat>
    e4dc:	83 60       	ori	r24, 0x03	; 3
    e4de:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Stat>
    e4e2:	0f 90       	pop	r0
    e4e4:	0f 90       	pop	r0
    e4e6:	0f 90       	pop	r0
    e4e8:	81 e0       	ldi	r24, 0x01	; 1
    e4ea:	90 e0       	ldi	r25, 0x00	; 0
    e4ec:	08 95       	ret
    e4ee:	80 e0       	ldi	r24, 0x00	; 0
    e4f0:	90 e0       	ldi	r25, 0x00	; 0
    e4f2:	08 95       	ret

0000e4f4 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e4f4:	a4 e0       	ldi	r26, 0x04	; 4
    e4f6:	b0 e0       	ldi	r27, 0x00	; 0
    e4f8:	e0 e8       	ldi	r30, 0x80	; 128
    e4fa:	f2 e7       	ldi	r31, 0x72	; 114
    e4fc:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
    e500:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e502:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Stat>

    mmc_spi_init();

    if( verbose)
    e506:	b5 df       	rcall	.-150    	; 0xe472 <mmc_spi_init>
    e508:	e1 14       	cp	r14, r1
    e50a:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e50c:	51 f0       	breq	.+20     	; 0xe522 <mmc_init+0x2e>
    e50e:	8a e2       	ldi	r24, 0x2A	; 42
    e510:	98 e0       	ldi	r25, 0x08	; 8
    e512:	1f 92       	push	r1
    e514:	9f 93       	push	r25
    e516:	8f 93       	push	r24
    e518:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e51c:	0f 90       	pop	r0
    e51e:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e520:	0f 90       	pop	r0
    e522:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <mmc_init_flag>
    e526:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <mmc_init_flag+0x1>
        mmc_install_timer();
    e52a:	89 2b       	or	r24, r25
    e52c:	09 f4       	brne	.+2      	; 0xe530 <mmc_init+0x3c>

    if( verbose)
    e52e:	6c df       	rcall	.-296    	; 0xe408 <mmc_install_timer>
    e530:	e1 14       	cp	r14, r1
    e532:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e534:	b9 f0       	breq	.+46     	; 0xe564 <mmc_init+0x70>
    e536:	8e e1       	ldi	r24, 0x1E	; 30
    e538:	98 e0       	ldi	r25, 0x08	; 8
    e53a:	1f 92       	push	r1
    e53c:	9f 93       	push	r25
    e53e:	8f 93       	push	r24
    e540:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e544:	81 e0       	ldi	r24, 0x01	; 1
    e546:	8f 93       	push	r24
    e548:	85 eb       	ldi	r24, 0xB5	; 181
    e54a:	8f 93       	push	r24
    e54c:	8d e0       	ldi	r24, 0x0D	; 13
    e54e:	98 e0       	ldi	r25, 0x08	; 8
    e550:	1f 92       	push	r1
    e552:	9f 93       	push	r25
    e554:	8f 93       	push	r24
    e556:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e55a:	0f b6       	in	r0, 0x3f	; 63
    e55c:	f8 94       	cli
    e55e:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e560:	0f be       	out	0x3f, r0	; 63
    e562:	cd bf       	out	0x3d, r28	; 61
    e564:	80 e0       	ldi	r24, 0x00	; 0
    e566:	55 da       	rcall	.-2902   	; 0xda12 <disk_initialize>
    e568:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e56a:	10 e0       	ldi	r17, 0x00	; 0
    e56c:	01 15       	cp	r16, r1
    e56e:	11 05       	cpc	r17, r1
    e570:	71 f4       	brne	.+28     	; 0xe58e <mmc_init+0x9a>
    e572:	e1 14       	cp	r14, r1
    e574:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e576:	59 f4       	brne	.+22     	; 0xe58e <mmc_init+0x9a>
    e578:	40 e0       	ldi	r20, 0x00	; 0
    e57a:	69 e0       	ldi	r22, 0x09	; 9
    e57c:	78 e0       	ldi	r23, 0x08	; 8
    e57e:	8b e3       	ldi	r24, 0x3B	; 59
    e580:	9a e1       	ldi	r25, 0x1A	; 26
    e582:	0e 94 db 56 	call	0xadb6	; 0xadb6 <f_mount>
    }

    if( rc != RES_OK || verbose)
    e586:	8c 01       	movw	r16, r24
    e588:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e58a:	39 f0       	breq	.+14     	; 0xe59a <mmc_init+0xa6>
    e58c:	0a c0       	rjmp	.+20     	; 0xe5a2 <mmc_init+0xae>
    e58e:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e590:	dc d0       	rcall	.+440    	; 0xe74a <put_rc>
    e592:	01 15       	cp	r16, r1
    e594:	11 05       	cpc	r17, r1
    e596:	29 f4       	brne	.+10     	; 0xe5a2 <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e598:	ef cf       	rjmp	.-34     	; 0xe578 <mmc_init+0x84>
    e59a:	e1 14       	cp	r14, r1
    e59c:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e59e:	09 f4       	brne	.+2      	; 0xe5a2 <mmc_init+0xae>
    e5a0:	43 c0       	rjmp	.+134    	; 0xe628 <mmc_init+0x134>
    e5a2:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e5a4:	d2 d0       	rcall	.+420    	; 0xe74a <put_rc>
    e5a6:	e1 14       	cp	r14, r1
    e5a8:	f1 04       	cpc	r15, r1
    e5aa:	09 f4       	brne	.+2      	; 0xe5ae <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e5ac:	3d c0       	rjmp	.+122    	; 0xe628 <mmc_init+0x134>
    e5ae:	19 82       	std	Y+1, r1	; 0x01
    e5b0:	1a 82       	std	Y+2, r1	; 0x02
    e5b2:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e5b4:	1c 82       	std	Y+4, r1	; 0x04
    e5b6:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e5b8:	11 05       	cpc	r17, r1
    e5ba:	61 f5       	brne	.+88     	; 0xe614 <mmc_init+0x120>
    e5bc:	ae 01       	movw	r20, r28
    e5be:	4f 5f       	subi	r20, 0xFF	; 255
    e5c0:	5f 4f       	sbci	r21, 0xFF	; 255
    e5c2:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e5c4:	80 e0       	ldi	r24, 0x00	; 0
    e5c6:	4b da       	rcall	.-2922   	; 0xda5e <disk_ioctl>
            {
                put_rc( rc );
    e5c8:	8c 01       	movw	r16, r24
    e5ca:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e5cc:	61 f0       	breq	.+24     	; 0xe5e6 <mmc_init+0xf2>
    e5ce:	bd d0       	rcall	.+378    	; 0xe74a <put_rc>
    e5d0:	8f ee       	ldi	r24, 0xEF	; 239
    e5d2:	97 e0       	ldi	r25, 0x07	; 7
    e5d4:	1f 92       	push	r1
    e5d6:	9f 93       	push	r25
    e5d8:	8f 93       	push	r24
    e5da:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e5de:	0f 90       	pop	r0
    e5e0:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e5e2:	0f 90       	pop	r0
    e5e4:	17 c0       	rjmp	.+46     	; 0xe614 <mmc_init+0x120>
    e5e6:	8c 81       	ldd	r24, Y+4	; 0x04
    e5e8:	8f 93       	push	r24
    e5ea:	8b 81       	ldd	r24, Y+3	; 0x03
    e5ec:	8f 93       	push	r24
    e5ee:	8a 81       	ldd	r24, Y+2	; 0x02
    e5f0:	8f 93       	push	r24
    e5f2:	89 81       	ldd	r24, Y+1	; 0x01
    e5f4:	8f 93       	push	r24
    e5f6:	8a ed       	ldi	r24, 0xDA	; 218
    e5f8:	97 e0       	ldi	r25, 0x07	; 7
    e5fa:	1f 92       	push	r1
    e5fc:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e5fe:	8f 93       	push	r24
    e600:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e604:	89 e0       	ldi	r24, 0x09	; 9
    e606:	98 e0       	ldi	r25, 0x08	; 8
    e608:	2e d1       	rcall	.+604    	; 0xe866 <fatfs_status>
    e60a:	0f b6       	in	r0, 0x3f	; 63
    e60c:	f8 94       	cli
    e60e:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e610:	0f be       	out	0x3f, r0	; 63
    e612:	cd bf       	out	0x3d, r28	; 61
    e614:	8c ec       	ldi	r24, 0xCC	; 204
    e616:	97 e0       	ldi	r25, 0x07	; 7
    e618:	1f 92       	push	r1
    e61a:	9f 93       	push	r25
    e61c:	8f 93       	push	r24
    e61e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    e622:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e624:	0f 90       	pop	r0
    e626:	0f 90       	pop	r0
    e628:	81 e0       	ldi	r24, 0x01	; 1
    e62a:	90 e0       	ldi	r25, 0x00	; 0
    e62c:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e630:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <mmc_init_flag>
    e634:	c8 01       	movw	r24, r16
    e636:	24 96       	adiw	r28, 0x04	; 4
    e638:	e6 e0       	ldi	r30, 0x06	; 6
    e63a:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000e63e <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e63e:	08 95       	ret

0000e640 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e640:	81 e0       	ldi	r24, 0x01	; 1
    e642:	90 e0       	ldi	r25, 0x00	; 0
    e644:	08 95       	ret

0000e646 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e646:	80 e0       	ldi	r24, 0x00	; 0
    e648:	90 e0       	ldi	r25, 0x00	; 0
    e64a:	08 95       	ret

0000e64c <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e64c:	0f 93       	push	r16
    e64e:	1f 93       	push	r17
    e650:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e652:	46 81       	ldd	r20, Z+6	; 0x06
    e654:	57 81       	ldd	r21, Z+7	; 0x07
    e656:	05 2e       	mov	r0, r21
    e658:	00 0c       	add	r0, r0
    e65a:	66 0b       	sbc	r22, r22
    e65c:	77 0b       	sbc	r23, r23
    e65e:	ba 01       	movw	r22, r20
    e660:	55 27       	eor	r21, r21
    e662:	44 27       	eor	r20, r20
    e664:	84 81       	ldd	r24, Z+4	; 0x04
    e666:	95 81       	ldd	r25, Z+5	; 0x05
    e668:	09 2e       	mov	r0, r25
    e66a:	00 0c       	add	r0, r0
    e66c:	aa 0b       	sbc	r26, r26
    e66e:	bb 0b       	sbc	r27, r27
    e670:	2b e0       	ldi	r18, 0x0B	; 11
    e672:	88 0f       	add	r24, r24
    e674:	99 1f       	adc	r25, r25
    e676:	aa 1f       	adc	r26, r26
    e678:	bb 1f       	adc	r27, r27
    e67a:	2a 95       	dec	r18
    e67c:	d1 f7       	brne	.-12     	; 0xe672 <tm_to_fat+0x26>
    e67e:	48 2b       	or	r20, r24
    e680:	59 2b       	or	r21, r25
    e682:	6a 2b       	or	r22, r26
    e684:	7b 2b       	or	r23, r27
    e686:	82 81       	ldd	r24, Z+2	; 0x02
    e688:	93 81       	ldd	r25, Z+3	; 0x03
    e68a:	09 2e       	mov	r0, r25
    e68c:	00 0c       	add	r0, r0
    e68e:	aa 0b       	sbc	r26, r26
    e690:	bb 0b       	sbc	r27, r27
    e692:	35 e0       	ldi	r19, 0x05	; 5
    e694:	88 0f       	add	r24, r24
    e696:	99 1f       	adc	r25, r25
    e698:	aa 1f       	adc	r26, r26
    e69a:	bb 1f       	adc	r27, r27
    e69c:	3a 95       	dec	r19
    e69e:	d1 f7       	brne	.-12     	; 0xe694 <tm_to_fat+0x48>
    e6a0:	48 2b       	or	r20, r24
    e6a2:	59 2b       	or	r21, r25
    e6a4:	6a 2b       	or	r22, r26
    e6a6:	7b 2b       	or	r23, r27
    e6a8:	80 81       	ld	r24, Z
    e6aa:	91 81       	ldd	r25, Z+1	; 0x01
    e6ac:	09 2e       	mov	r0, r25
    e6ae:	00 0c       	add	r0, r0
    e6b0:	aa 0b       	sbc	r26, r26
    e6b2:	bb 0b       	sbc	r27, r27
    e6b4:	b6 95       	lsr	r27
    e6b6:	a7 95       	ror	r26
    e6b8:	97 95       	ror	r25
    e6ba:	87 95       	ror	r24
    e6bc:	84 2b       	or	r24, r20
    e6be:	95 2b       	or	r25, r21
    e6c0:	a6 2b       	or	r26, r22
    e6c2:	b7 2b       	or	r27, r23
    e6c4:	02 85       	ldd	r16, Z+10	; 0x0a
    e6c6:	13 85       	ldd	r17, Z+11	; 0x0b
    e6c8:	00 55       	subi	r16, 0x50	; 80
    e6ca:	11 09       	sbc	r17, r1
    e6cc:	01 2e       	mov	r0, r17
    e6ce:	00 0c       	add	r0, r0
    e6d0:	22 0b       	sbc	r18, r18
    e6d2:	33 0b       	sbc	r19, r19
    e6d4:	49 e1       	ldi	r20, 0x19	; 25
    e6d6:	00 0f       	add	r16, r16
    e6d8:	11 1f       	adc	r17, r17
    e6da:	22 1f       	adc	r18, r18
    e6dc:	33 1f       	adc	r19, r19
    e6de:	4a 95       	dec	r20
    e6e0:	d1 f7       	brne	.-12     	; 0xe6d6 <tm_to_fat+0x8a>
    e6e2:	ac 01       	movw	r20, r24
    e6e4:	bd 01       	movw	r22, r26
    e6e6:	40 2b       	or	r20, r16
    e6e8:	51 2b       	or	r21, r17
    e6ea:	62 2b       	or	r22, r18
    e6ec:	73 2b       	or	r23, r19
    e6ee:	80 85       	ldd	r24, Z+8	; 0x08
    e6f0:	91 85       	ldd	r25, Z+9	; 0x09
    e6f2:	09 2e       	mov	r0, r25
    e6f4:	00 0c       	add	r0, r0
    e6f6:	aa 0b       	sbc	r26, r26
    e6f8:	bb 0b       	sbc	r27, r27
    e6fa:	01 96       	adiw	r24, 0x01	; 1
    e6fc:	a1 1d       	adc	r26, r1
    e6fe:	b1 1d       	adc	r27, r1
    e700:	e5 e1       	ldi	r30, 0x15	; 21
    e702:	88 0f       	add	r24, r24
    e704:	99 1f       	adc	r25, r25
    e706:	aa 1f       	adc	r26, r26
    e708:	bb 1f       	adc	r27, r27
    e70a:	ea 95       	dec	r30
    e70c:	d1 f7       	brne	.-12     	; 0xe702 <tm_to_fat+0xb6>
    e70e:	8a 01       	movw	r16, r20
    e710:	9b 01       	movw	r18, r22
    e712:	08 2b       	or	r16, r24
    e714:	19 2b       	or	r17, r25
    e716:	2a 2b       	or	r18, r26
    e718:	3b 2b       	or	r19, r27
    e71a:	c9 01       	movw	r24, r18
    e71c:	b8 01       	movw	r22, r16
}
    e71e:	1f 91       	pop	r17
    e720:	0f 91       	pop	r16
    e722:	08 95       	ret

0000e724 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e724:	a4 e0       	ldi	r26, 0x04	; 4
    e726:	b0 e0       	ldi	r27, 0x00	; 0
    e728:	e8 e9       	ldi	r30, 0x98	; 152
    e72a:	f3 e7       	ldi	r31, 0x73	; 115
    e72c:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e730:	ce 01       	movw	r24, r28
    e732:	01 96       	adiw	r24, 0x01	; 1
    e734:	0e 94 ed 36 	call	0x6dda	; 0x6dda <time>
    return( tm_to_fat(localtime(&t)));
    e738:	ce 01       	movw	r24, r28
    e73a:	01 96       	adiw	r24, 0x01	; 1
    e73c:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <localtime>
    e740:	85 df       	rcall	.-246    	; 0xe64c <tm_to_fat>
}
    e742:	24 96       	adiw	r28, 0x04	; 4
    e744:	e2 e0       	ldi	r30, 0x02	; 2
    e746:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000e74a <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e74a:	9f 93       	push	r25
    e74c:	8f 93       	push	r24
    e74e:	87 e5       	ldi	r24, 0x57	; 87
    e750:	9a e0       	ldi	r25, 0x0A	; 10
    e752:	1f 92       	push	r1
    e754:	9f 93       	push	r25
    e756:	8f 93       	push	r24
    e758:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
}
    e75c:	0f 90       	pop	r0
    e75e:	0f 90       	pop	r0
    e760:	0f 90       	pop	r0
    e762:	0f 90       	pop	r0
    e764:	0f 90       	pop	r0
    e766:	08 95       	ret

0000e768 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e768:	a4 e4       	ldi	r26, 0x44	; 68
    e76a:	b1 e0       	ldi	r27, 0x01	; 1
    e76c:	ea eb       	ldi	r30, 0xBA	; 186
    e76e:	f3 e7       	ldi	r31, 0x73	; 115
    e770:	0c 94 46 e9 	jmp	0x1d28c	; 0x1d28c <__prologue_saves__+0x16>
    e774:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e776:	bc 01       	movw	r22, r24
    e778:	ce 01       	movw	r24, r28
    e77a:	89 5e       	subi	r24, 0xE9	; 233
    e77c:	9e 4f       	sbci	r25, 0xFE	; 254
    e77e:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <f_opendir>
    if (fr == FR_OK) {
    e782:	00 97       	sbiw	r24, 0x00	; 0
    e784:	09 f0       	breq	.+2      	; 0xe788 <fatfs_scan_files+0x20>
    e786:	5b c0       	rjmp	.+182    	; 0xe83e <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e788:	8f e2       	ldi	r24, 0x2F	; 47
    e78a:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e78c:	be 01       	movw	r22, r28
    e78e:	6f 5f       	subi	r22, 0xFF	; 255
    e790:	7f 4f       	sbci	r23, 0xFF	; 255
    e792:	ce 01       	movw	r24, r28
    e794:	89 5e       	subi	r24, 0xE9	; 233
    e796:	9e 4f       	sbci	r25, 0xFE	; 254
    e798:	0e 94 84 61 	call	0xc308	; 0xc308 <f_readdir>
    e79c:	00 97       	sbiw	r24, 0x00	; 0
    e79e:	09 f0       	breq	.+2      	; 0xe7a2 <fatfs_scan_files+0x3a>
    e7a0:	4e c0       	rjmp	.+156    	; 0xe83e <fatfs_scan_files+0xd6>
    e7a2:	2f 89       	ldd	r18, Y+23	; 0x17
    e7a4:	22 23       	and	r18, r18
    e7a6:	09 f4       	brne	.+2      	; 0xe7aa <fatfs_scan_files+0x42>
    e7a8:	4a c0       	rjmp	.+148    	; 0xe83e <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e7aa:	89 85       	ldd	r24, Y+9	; 0x09
    e7ac:	84 ff       	sbrs	r24, 4
    e7ae:	25 c0       	rjmp	.+74     	; 0xe7fa <fatfs_scan_files+0x92>
                AccDirs++;
    e7b0:	80 91 74 1c 	lds	r24, 0x1C74	; 0x801c74 <AccDirs>
    e7b4:	90 91 75 1c 	lds	r25, 0x1C75	; 0x801c75 <AccDirs+0x1>
    e7b8:	01 96       	adiw	r24, 0x01	; 1
    e7ba:	90 93 75 1c 	sts	0x1C75, r25	; 0x801c75 <AccDirs+0x1>
    e7be:	80 93 74 1c 	sts	0x1C74, r24	; 0x801c74 <AccDirs>
                i = strlen(path);
    e7c2:	f8 01       	movw	r30, r16
    e7c4:	01 90       	ld	r0, Z+
    e7c6:	00 20       	and	r0, r0
    e7c8:	e9 f7       	brne	.-6      	; 0xe7c4 <fatfs_scan_files+0x5c>
    e7ca:	31 97       	sbiw	r30, 0x01	; 1
    e7cc:	e0 1b       	sub	r30, r16
    e7ce:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e7d0:	78 01       	movw	r14, r16
    e7d2:	ee 0e       	add	r14, r30
    e7d4:	ff 1e       	adc	r15, r31
    e7d6:	d7 01       	movw	r26, r14
    e7d8:	dc 92       	st	X, r13
    e7da:	cf 01       	movw	r24, r30
    e7dc:	01 96       	adiw	r24, 0x01	; 1
    e7de:	be 01       	movw	r22, r28
    e7e0:	69 5e       	subi	r22, 0xE9	; 233
    e7e2:	7f 4f       	sbci	r23, 0xFF	; 255
    e7e4:	80 0f       	add	r24, r16
    e7e6:	91 1f       	adc	r25, r17
    e7e8:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strcpy>
                fr = fatfs_scan_files(path);
    e7ec:	c8 01       	movw	r24, r16
    e7ee:	bc df       	rcall	.-136    	; 0xe768 <fatfs_scan_files>
                path[i] = 0;
    e7f0:	f7 01       	movw	r30, r14
    e7f2:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e7f4:	00 97       	sbiw	r24, 0x00	; 0
    e7f6:	51 f2       	breq	.-108    	; 0xe78c <fatfs_scan_files+0x24>
    e7f8:	22 c0       	rjmp	.+68     	; 0xe83e <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e7fa:	80 91 76 1c 	lds	r24, 0x1C76	; 0x801c76 <AccFiles>
    e7fe:	90 91 77 1c 	lds	r25, 0x1C77	; 0x801c77 <AccFiles+0x1>
    e802:	01 96       	adiw	r24, 0x01	; 1
    e804:	90 93 77 1c 	sts	0x1C77, r25	; 0x801c77 <AccFiles+0x1>
    e808:	80 93 76 1c 	sts	0x1C76, r24	; 0x801c76 <AccFiles>
                AccSize += info.fsize;
    e80c:	40 91 70 1c 	lds	r20, 0x1C70	; 0x801c70 <AccSize>
    e810:	50 91 71 1c 	lds	r21, 0x1C71	; 0x801c71 <AccSize+0x1>
    e814:	60 91 72 1c 	lds	r22, 0x1C72	; 0x801c72 <AccSize+0x2>
    e818:	70 91 73 1c 	lds	r23, 0x1C73	; 0x801c73 <AccSize+0x3>
    e81c:	89 81       	ldd	r24, Y+1	; 0x01
    e81e:	9a 81       	ldd	r25, Y+2	; 0x02
    e820:	ab 81       	ldd	r26, Y+3	; 0x03
    e822:	bc 81       	ldd	r27, Y+4	; 0x04
    e824:	84 0f       	add	r24, r20
    e826:	95 1f       	adc	r25, r21
    e828:	a6 1f       	adc	r26, r22
    e82a:	b7 1f       	adc	r27, r23
    e82c:	80 93 70 1c 	sts	0x1C70, r24	; 0x801c70 <AccSize>
    e830:	90 93 71 1c 	sts	0x1C71, r25	; 0x801c71 <AccSize+0x1>
    e834:	a0 93 72 1c 	sts	0x1C72, r26	; 0x801c72 <AccSize+0x2>
    e838:	b0 93 73 1c 	sts	0x1C73, r27	; 0x801c73 <AccSize+0x3>
    e83c:	a7 cf       	rjmp	.-178    	; 0xe78c <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e83e:	cc 5b       	subi	r28, 0xBC	; 188
    e840:	de 4f       	sbci	r29, 0xFE	; 254
    e842:	e7 e0       	ldi	r30, 0x07	; 7
    e844:	0c 94 62 e9 	jmp	0x1d2c4	; 0x1d2c4 <__epilogue_restores__+0x16>

0000e848 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e848:	01 97       	sbiw	r24, 0x01	; 1
    e84a:	84 30       	cpi	r24, 0x04	; 4
    e84c:	91 05       	cpc	r25, r1
    e84e:	40 f4       	brcc	.+16     	; 0xe860 <fatfs_fstype+0x18>
    e850:	88 0f       	add	r24, r24
    e852:	99 1f       	adc	r25, r25
    e854:	fc 01       	movw	r30, r24
    e856:	e7 51       	subi	r30, 0x17	; 23
    e858:	f9 4f       	sbci	r31, 0xF9	; 249
    e85a:	80 81       	ld	r24, Z
    e85c:	91 81       	ldd	r25, Z+1	; 0x01
    e85e:	08 95       	ret
    char *ptr;
    switch(type)
    e860:	8b e0       	ldi	r24, 0x0B	; 11
    e862:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e864:	08 95       	ret

0000e866 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e866:	a4 e2       	ldi	r26, 0x24	; 36
    e868:	b0 e0       	ldi	r27, 0x00	; 0
    e86a:	e9 e3       	ldi	r30, 0x39	; 57
    e86c:	f4 e7       	ldi	r31, 0x74	; 116
    e86e:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    e872:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e874:	fc 01       	movw	r30, r24
    e876:	21 91       	ld	r18, Z+
    e878:	cf 01       	movw	r24, r30
    e87a:	20 32       	cpi	r18, 0x20	; 32
    e87c:	d1 f3       	breq	.-12     	; 0xe872 <fatfs_status+0xc>
    e87e:	29 30       	cpi	r18, 0x09	; 9
    e880:	c1 f3       	breq	.-16     	; 0xe872 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e882:	1f 93       	push	r17
    e884:	0f 93       	push	r16
    e886:	86 e4       	ldi	r24, 0x46	; 70
    e888:	9a e0       	ldi	r25, 0x0A	; 10
    e88a:	1f 92       	push	r1
    e88c:	9f 93       	push	r25
    e88e:	8f 93       	push	r24
    e890:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e894:	ae 01       	movw	r20, r28
    e896:	4d 5d       	subi	r20, 0xDD	; 221
    e898:	5f 4f       	sbci	r21, 0xFF	; 255
    e89a:	be 01       	movw	r22, r28
    e89c:	61 5e       	subi	r22, 0xE1	; 225
    e89e:	7f 4f       	sbci	r23, 0xFF	; 255
    e8a0:	c8 01       	movw	r24, r16
    e8a2:	0e 94 0a 62 	call	0xc414	; 0xc414 <f_getfree>
    if (res)
    e8a6:	0f 90       	pop	r0
    e8a8:	0f 90       	pop	r0
    e8aa:	0f 90       	pop	r0
    e8ac:	0f 90       	pop	r0
    e8ae:	0f 90       	pop	r0
    e8b0:	00 97       	sbiw	r24, 0x00	; 0
    e8b2:	09 f0       	breq	.+2      	; 0xe8b6 <fatfs_status+0x50>
    e8b4:	e8 c0       	rjmp	.+464    	; 0xea86 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e8b6:	eb a1       	ldd	r30, Y+35	; 0x23
    e8b8:	fc a1       	ldd	r31, Y+36	; 0x24
    e8ba:	80 81       	ld	r24, Z
    e8bc:	90 e0       	ldi	r25, 0x00	; 0
    e8be:	c4 df       	rcall	.-120    	; 0xe848 <fatfs_fstype>
    e8c0:	9f 93       	push	r25
    e8c2:	8f 93       	push	r24
    e8c4:	88 e2       	ldi	r24, 0x28	; 40
    e8c6:	9a e0       	ldi	r25, 0x0A	; 10
    e8c8:	1f 92       	push	r1
    e8ca:	9f 93       	push	r25
    e8cc:	8f 93       	push	r24
    e8ce:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e8d2:	eb a1       	ldd	r30, Y+35	; 0x23
    e8d4:	fc a1       	ldd	r31, Y+36	; 0x24
    e8d6:	81 85       	ldd	r24, Z+9	; 0x09
    e8d8:	92 85       	ldd	r25, Z+10	; 0x0a
    e8da:	a0 e0       	ldi	r26, 0x00	; 0
    e8dc:	b0 e0       	ldi	r27, 0x00	; 0
    e8de:	49 e0       	ldi	r20, 0x09	; 9
    e8e0:	88 0f       	add	r24, r24
    e8e2:	99 1f       	adc	r25, r25
    e8e4:	aa 1f       	adc	r26, r26
    e8e6:	bb 1f       	adc	r27, r27
    e8e8:	4a 95       	dec	r20
    e8ea:	d1 f7       	brne	.-12     	; 0xe8e0 <fatfs_status+0x7a>
    e8ec:	bf 93       	push	r27
    e8ee:	af 93       	push	r26
    e8f0:	9f 93       	push	r25
    e8f2:	8f 93       	push	r24
    e8f4:	89 e0       	ldi	r24, 0x09	; 9
    e8f6:	9a e0       	ldi	r25, 0x0A	; 10
    e8f8:	1f 92       	push	r1
    e8fa:	9f 93       	push	r25
    e8fc:	8f 93       	push	r24
    e8fe:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e902:	eb a1       	ldd	r30, Y+35	; 0x23
    e904:	fc a1       	ldd	r31, Y+36	; 0x24
    e906:	82 81       	ldd	r24, Z+2	; 0x02
    e908:	1f 92       	push	r1
    e90a:	8f 93       	push	r24
    e90c:	8b ee       	ldi	r24, 0xEB	; 235
    e90e:	99 e0       	ldi	r25, 0x09	; 9
    e910:	1f 92       	push	r1
    e912:	9f 93       	push	r25
    e914:	8f 93       	push	r24
    e916:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e91a:	eb a1       	ldd	r30, Y+35	; 0x23
    e91c:	fc a1       	ldd	r31, Y+36	; 0x24
    e91e:	80 85       	ldd	r24, Z+8	; 0x08
    e920:	8f 93       	push	r24
    e922:	87 81       	ldd	r24, Z+7	; 0x07
    e924:	8f 93       	push	r24
    e926:	8d ec       	ldi	r24, 0xCD	; 205
    e928:	99 e0       	ldi	r25, 0x09	; 9
    e92a:	1f 92       	push	r1
    e92c:	9f 93       	push	r25
    e92e:	8f 93       	push	r24
    e930:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e934:	eb a1       	ldd	r30, Y+35	; 0x23
    e936:	fc a1       	ldd	r31, Y+36	; 0x24
    e938:	80 a1       	ldd	r24, Z+32	; 0x20
    e93a:	8f 93       	push	r24
    e93c:	87 8d       	ldd	r24, Z+31	; 0x1f
    e93e:	8f 93       	push	r24
    e940:	86 8d       	ldd	r24, Z+30	; 0x1e
    e942:	8f 93       	push	r24
    e944:	85 8d       	ldd	r24, Z+29	; 0x1d
    e946:	8f 93       	push	r24
    e948:	8e ea       	ldi	r24, 0xAE	; 174
    e94a:	99 e0       	ldi	r25, 0x09	; 9
    e94c:	1f 92       	push	r1
    e94e:	9f 93       	push	r25
    e950:	8f 93       	push	r24
    e952:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e956:	eb a1       	ldd	r30, Y+35	; 0x23
    e958:	fc a1       	ldd	r31, Y+36	; 0x24
    e95a:	81 8d       	ldd	r24, Z+25	; 0x19
    e95c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e95e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e960:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e962:	02 97       	sbiw	r24, 0x02	; 2
    e964:	a1 09       	sbc	r26, r1
    e966:	b1 09       	sbc	r27, r1
    e968:	bf 93       	push	r27
    e96a:	af 93       	push	r26
    e96c:	9f 93       	push	r25
    e96e:	8f 93       	push	r24
    e970:	8f e8       	ldi	r24, 0x8F	; 143
    e972:	99 e0       	ldi	r25, 0x09	; 9
    e974:	1f 92       	push	r1
    e976:	9f 93       	push	r25
    e978:	8f 93       	push	r24
    e97a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e97e:	0f b6       	in	r0, 0x3f	; 63
    e980:	f8 94       	cli
    e982:	de bf       	out	0x3e, r29	; 62
    e984:	0f be       	out	0x3f, r0	; 63
    e986:	cd bf       	out	0x3d, r28	; 61
    e988:	eb a1       	ldd	r30, Y+35	; 0x23
    e98a:	fc a1       	ldd	r31, Y+36	; 0x24
    e98c:	80 a5       	ldd	r24, Z+40	; 0x28
    e98e:	8f 93       	push	r24
    e990:	87 a1       	ldd	r24, Z+39	; 0x27
    e992:	8f 93       	push	r24
    e994:	86 a1       	ldd	r24, Z+38	; 0x26
    e996:	8f 93       	push	r24
    e998:	85 a1       	ldd	r24, Z+37	; 0x25
    e99a:	8f 93       	push	r24
    e99c:	80 e7       	ldi	r24, 0x70	; 112
    e99e:	99 e0       	ldi	r25, 0x09	; 9
    e9a0:	1f 92       	push	r1
    e9a2:	9f 93       	push	r25
    e9a4:	8f 93       	push	r24
    e9a6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e9aa:	eb a1       	ldd	r30, Y+35	; 0x23
    e9ac:	fc a1       	ldd	r31, Y+36	; 0x24
    e9ae:	84 a5       	ldd	r24, Z+44	; 0x2c
    e9b0:	8f 93       	push	r24
    e9b2:	83 a5       	ldd	r24, Z+43	; 0x2b
    e9b4:	8f 93       	push	r24
    e9b6:	82 a5       	ldd	r24, Z+42	; 0x2a
    e9b8:	8f 93       	push	r24
    e9ba:	81 a5       	ldd	r24, Z+41	; 0x29
    e9bc:	8f 93       	push	r24
    e9be:	81 e5       	ldi	r24, 0x51	; 81
    e9c0:	99 e0       	ldi	r25, 0x09	; 9
    e9c2:	1f 92       	push	r1
    e9c4:	9f 93       	push	r25
    e9c6:	8f 93       	push	r24
    e9c8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e9cc:	eb a1       	ldd	r30, Y+35	; 0x23
    e9ce:	fc a1       	ldd	r31, Y+36	; 0x24
    e9d0:	80 a9       	ldd	r24, Z+48	; 0x30
    e9d2:	8f 93       	push	r24
    e9d4:	87 a5       	ldd	r24, Z+47	; 0x2f
    e9d6:	8f 93       	push	r24
    e9d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    e9da:	8f 93       	push	r24
    e9dc:	85 a5       	ldd	r24, Z+45	; 0x2d
    e9de:	8f 93       	push	r24
    e9e0:	82 e3       	ldi	r24, 0x32	; 50
    e9e2:	99 e0       	ldi	r25, 0x09	; 9
    e9e4:	1f 92       	push	r1
    e9e6:	9f 93       	push	r25
    e9e8:	8f 93       	push	r24
    e9ea:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e9ee:	ae 01       	movw	r20, r28
    e9f0:	45 5e       	subi	r20, 0xE5	; 229
    e9f2:	5f 4f       	sbci	r21, 0xFF	; 255
    e9f4:	be 01       	movw	r22, r28
    e9f6:	6f 5f       	subi	r22, 0xFF	; 255
    e9f8:	7f 4f       	sbci	r23, 0xFF	; 255
    e9fa:	c8 01       	movw	r24, r16
    e9fc:	0e 94 9c 66 	call	0xcd38	; 0xcd38 <f_getlabel>
    if (res)
    ea00:	0f b6       	in	r0, 0x3f	; 63
    ea02:	f8 94       	cli
    ea04:	de bf       	out	0x3e, r29	; 62
    ea06:	0f be       	out	0x3f, r0	; 63
    ea08:	cd bf       	out	0x3d, r28	; 61
    ea0a:	00 97       	sbiw	r24, 0x00	; 0
    ea0c:	e1 f5       	brne	.+120    	; 0xea86 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    ea0e:	89 81       	ldd	r24, Y+1	; 0x01
    ea10:	81 11       	cpse	r24, r1
    ea12:	03 c0       	rjmp	.+6      	; 0xea1a <fatfs_status+0x1b4>
    ea14:	83 e1       	ldi	r24, 0x13	; 19
    ea16:	98 e0       	ldi	r25, 0x08	; 8
    ea18:	02 c0       	rjmp	.+4      	; 0xea1e <fatfs_status+0x1b8>
    ea1a:	ce 01       	movw	r24, r28
    ea1c:	01 96       	adiw	r24, 0x01	; 1
    ea1e:	9f 93       	push	r25
    ea20:	8f 93       	push	r24
    ea22:	84 e1       	ldi	r24, 0x14	; 20
    ea24:	99 e0       	ldi	r25, 0x09	; 9
    ea26:	1f 92       	push	r1
    ea28:	9f 93       	push	r25
    ea2a:	8f 93       	push	r24
    ea2c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    ea30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ea32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ea34:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ea36:	be 8d       	ldd	r27, Y+30	; 0x1e
    ea38:	9f 93       	push	r25
    ea3a:	8f 93       	push	r24
    ea3c:	cd 01       	movw	r24, r26
    ea3e:	aa 27       	eor	r26, r26
    ea40:	bb 27       	eor	r27, r27
    ea42:	9f 93       	push	r25
    ea44:	8f 93       	push	r24
    ea46:	8f ee       	ldi	r24, 0xEF	; 239
    ea48:	98 e0       	ldi	r25, 0x08	; 8
    ea4a:	1f 92       	push	r1
    ea4c:	9f 93       	push	r25
    ea4e:	8f 93       	push	r24
    ea50:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    ea54:	10 92 75 1c 	sts	0x1C75, r1	; 0x801c75 <AccDirs+0x1>
    ea58:	10 92 74 1c 	sts	0x1C74, r1	; 0x801c74 <AccDirs>
    ea5c:	10 92 77 1c 	sts	0x1C77, r1	; 0x801c77 <AccFiles+0x1>
    ea60:	10 92 76 1c 	sts	0x1C76, r1	; 0x801c76 <AccFiles>
    ea64:	10 92 70 1c 	sts	0x1C70, r1	; 0x801c70 <AccSize>
    ea68:	10 92 71 1c 	sts	0x1C71, r1	; 0x801c71 <AccSize+0x1>
    ea6c:	10 92 72 1c 	sts	0x1C72, r1	; 0x801c72 <AccSize+0x2>
    ea70:	10 92 73 1c 	sts	0x1C73, r1	; 0x801c73 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    ea74:	c8 01       	movw	r24, r16
    if (res)
    ea76:	78 de       	rcall	.-784    	; 0xe768 <fatfs_scan_files>
    ea78:	0f b6       	in	r0, 0x3f	; 63
    ea7a:	f8 94       	cli
    ea7c:	de bf       	out	0x3e, r29	; 62
    ea7e:	0f be       	out	0x3f, r0	; 63
    ea80:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    ea82:	00 97       	sbiw	r24, 0x00	; 0
    ea84:	11 f0       	breq	.+4      	; 0xea8a <fatfs_status+0x224>
        return;
    ea86:	61 de       	rcall	.-830    	; 0xe74a <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    ea88:	56 c0       	rjmp	.+172    	; 0xeb36 <fatfs_status+0x2d0>
    ea8a:	0b a1       	ldd	r16, Y+35	; 0x23
    ea8c:	1c a1       	ldd	r17, Y+36	; 0x24
    ea8e:	f8 01       	movw	r30, r16
    ea90:	c1 84       	ldd	r12, Z+9	; 0x09
    ea92:	d2 84       	ldd	r13, Z+10	; 0x0a
    ea94:	e1 2c       	mov	r14, r1
    ea96:	f1 2c       	mov	r15, r1
    ea98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    ea9a:	78 a1       	ldd	r23, Y+32	; 0x20
    ea9c:	89 a1       	ldd	r24, Y+33	; 0x21
    ea9e:	9a a1       	ldd	r25, Y+34	; 0x22
    eaa0:	a7 01       	movw	r20, r14
    eaa2:	96 01       	movw	r18, r12
    eaa4:	0e 94 8c e8 	call	0x1d118	; 0x1d118 <__mulsi3>
    eaa8:	22 e0       	ldi	r18, 0x02	; 2
    eaaa:	30 e0       	ldi	r19, 0x00	; 0
    eaac:	40 e0       	ldi	r20, 0x00	; 0
    eaae:	50 e0       	ldi	r21, 0x00	; 0
    eab0:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    eab4:	5f 93       	push	r21
    eab6:	4f 93       	push	r20
    eab8:	3f 93       	push	r19
    eaba:	2f 93       	push	r18
    eabc:	f8 01       	movw	r30, r16
    eabe:	81 8d       	ldd	r24, Z+25	; 0x19
    eac0:	92 8d       	ldd	r25, Z+26	; 0x1a
    eac2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    eac4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    eac6:	9c 01       	movw	r18, r24
    eac8:	ad 01       	movw	r20, r26
    eaca:	22 50       	subi	r18, 0x02	; 2
    eacc:	31 09       	sbc	r19, r1
    eace:	41 09       	sbc	r20, r1
    ead0:	51 09       	sbc	r21, r1
    ead2:	c7 01       	movw	r24, r14
    ead4:	b6 01       	movw	r22, r12
    ead6:	0e 94 8c e8 	call	0x1d118	; 0x1d118 <__mulsi3>
    eada:	dc 01       	movw	r26, r24
    eadc:	cb 01       	movw	r24, r22
    eade:	b6 95       	lsr	r27
    eae0:	a7 95       	ror	r26
    eae2:	97 95       	ror	r25
    eae4:	87 95       	ror	r24
    eae6:	bf 93       	push	r27
    eae8:	af 93       	push	r26
    eaea:	9f 93       	push	r25
    eaec:	8f 93       	push	r24
    eaee:	80 91 75 1c 	lds	r24, 0x1C75	; 0x801c75 <AccDirs+0x1>
    eaf2:	8f 93       	push	r24
    eaf4:	80 91 74 1c 	lds	r24, 0x1C74	; 0x801c74 <AccDirs>
    eaf8:	8f 93       	push	r24
    eafa:	80 91 73 1c 	lds	r24, 0x1C73	; 0x801c73 <AccSize+0x3>
    eafe:	8f 93       	push	r24
    eb00:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <AccSize+0x2>
    eb04:	8f 93       	push	r24
    eb06:	80 91 71 1c 	lds	r24, 0x1C71	; 0x801c71 <AccSize+0x1>
    eb0a:	8f 93       	push	r24
    eb0c:	80 91 70 1c 	lds	r24, 0x1C70	; 0x801c70 <AccSize>
    eb10:	8f 93       	push	r24
    eb12:	80 91 77 1c 	lds	r24, 0x1C77	; 0x801c77 <AccFiles+0x1>
    eb16:	8f 93       	push	r24
    eb18:	80 91 76 1c 	lds	r24, 0x1C76	; 0x801c76 <AccFiles>
    eb1c:	8f 93       	push	r24
    eb1e:	82 ea       	ldi	r24, 0xA2	; 162
    eb20:	98 e0       	ldi	r25, 0x08	; 8
    eb22:	1f 92       	push	r1
    eb24:	9f 93       	push	r25
    eb26:	8f 93       	push	r24
    eb28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    eb2c:	0f b6       	in	r0, 0x3f	; 63
    eb2e:	f8 94       	cli
    eb30:	de bf       	out	0x3e, r29	; 62
    eb32:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    eb34:	cd bf       	out	0x3d, r28	; 61
    eb36:	a4 96       	adiw	r28, 0x24	; 36
    eb38:	e8 e0       	ldi	r30, 0x08	; 8
    eb3a:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000eb3e <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    eb3e:	a6 e0       	ldi	r26, 0x06	; 6
    eb40:	b0 e0       	ldi	r27, 0x00	; 0
    eb42:	e5 ea       	ldi	r30, 0xA5	; 165
    eb44:	f5 e7       	ldi	r31, 0x75	; 117
    eb46:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    eb4a:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    eb4c:	86 89       	ldd	r24, Z+22	; 0x16
    eb4e:	81 11       	cpse	r24, r1
    eb50:	0b c0       	rjmp	.+22     	; 0xeb68 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    eb52:	87 e8       	ldi	r24, 0x87	; 135
    eb54:	98 e0       	ldi	r25, 0x08	; 8
    eb56:	1f 92       	push	r1
    eb58:	9f 93       	push	r25
    eb5a:	8f 93       	push	r24
    eb5c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return;
    eb60:	0f 90       	pop	r0
    eb62:	0f 90       	pop	r0
    eb64:	0f 90       	pop	r0
    eb66:	6e c0       	rjmp	.+220    	; 0xec44 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    eb68:	80 85       	ldd	r24, Z+8	; 0x08
    eb6a:	84 fd       	sbrc	r24, 4
    eb6c:	02 c0       	rjmp	.+4      	; 0xeb72 <fatfs_filinfo_list+0x34>
    eb6e:	9d e2       	ldi	r25, 0x2D	; 45
    eb70:	01 c0       	rjmp	.+2      	; 0xeb74 <fatfs_filinfo_list+0x36>
    eb72:	94 e4       	ldi	r25, 0x44	; 68
    eb74:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    eb76:	80 fd       	sbrc	r24, 0
    eb78:	02 c0       	rjmp	.+4      	; 0xeb7e <fatfs_filinfo_list+0x40>
    eb7a:	9d e2       	ldi	r25, 0x2D	; 45
    eb7c:	01 c0       	rjmp	.+2      	; 0xeb80 <fatfs_filinfo_list+0x42>
    eb7e:	92 e5       	ldi	r25, 0x52	; 82
    eb80:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    eb82:	81 fd       	sbrc	r24, 1
    eb84:	02 c0       	rjmp	.+4      	; 0xeb8a <fatfs_filinfo_list+0x4c>
    eb86:	9d e2       	ldi	r25, 0x2D	; 45
    eb88:	01 c0       	rjmp	.+2      	; 0xeb8c <fatfs_filinfo_list+0x4e>
    eb8a:	98 e4       	ldi	r25, 0x48	; 72
    eb8c:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    eb8e:	82 fd       	sbrc	r24, 2
    eb90:	02 c0       	rjmp	.+4      	; 0xeb96 <fatfs_filinfo_list+0x58>
    eb92:	9d e2       	ldi	r25, 0x2D	; 45
    eb94:	01 c0       	rjmp	.+2      	; 0xeb98 <fatfs_filinfo_list+0x5a>
    eb96:	93 e5       	ldi	r25, 0x53	; 83
    eb98:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    eb9a:	85 fd       	sbrc	r24, 5
    eb9c:	02 c0       	rjmp	.+4      	; 0xeba2 <fatfs_filinfo_list+0x64>
    eb9e:	8d e2       	ldi	r24, 0x2D	; 45
    eba0:	01 c0       	rjmp	.+2      	; 0xeba4 <fatfs_filinfo_list+0x66>
    eba2:	81 e4       	ldi	r24, 0x41	; 65
    eba4:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    eba6:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    eba8:	46 81       	ldd	r20, Z+6	; 0x06
    ebaa:	57 81       	ldd	r21, Z+7	; 0x07
    ebac:	84 81       	ldd	r24, Z+4	; 0x04
    ebae:	95 81       	ldd	r25, Z+5	; 0x05
    ebb0:	9f 01       	movw	r18, r30
    ebb2:	2a 5e       	subi	r18, 0xEA	; 234
    ebb4:	3f 4f       	sbci	r19, 0xFF	; 255
    ebb6:	3f 93       	push	r19
    ebb8:	2f 93       	push	r18
    ebba:	23 81       	ldd	r18, Z+3	; 0x03
    ebbc:	2f 93       	push	r18
    ebbe:	22 81       	ldd	r18, Z+2	; 0x02
    ebc0:	2f 93       	push	r18
    ebc2:	21 81       	ldd	r18, Z+1	; 0x01
    ebc4:	2f 93       	push	r18
    ebc6:	20 81       	ld	r18, Z
    ebc8:	2f 93       	push	r18
    ebca:	9a 01       	movw	r18, r20
    ebcc:	45 e0       	ldi	r20, 0x05	; 5
    ebce:	36 95       	lsr	r19
    ebd0:	27 95       	ror	r18
    ebd2:	4a 95       	dec	r20
    ebd4:	e1 f7       	brne	.-8      	; 0xebce <fatfs_filinfo_list+0x90>
    ebd6:	2f 73       	andi	r18, 0x3F	; 63
    ebd8:	33 27       	eor	r19, r19
    ebda:	3f 93       	push	r19
    ebdc:	2f 93       	push	r18
    ebde:	25 2f       	mov	r18, r21
    ebe0:	26 95       	lsr	r18
    ebe2:	26 95       	lsr	r18
    ebe4:	26 95       	lsr	r18
    ebe6:	1f 92       	push	r1
    ebe8:	2f 93       	push	r18
    ebea:	9c 01       	movw	r18, r24
    ebec:	2f 71       	andi	r18, 0x1F	; 31
    ebee:	33 27       	eor	r19, r19
    ebf0:	3f 93       	push	r19
    ebf2:	2f 93       	push	r18
    ebf4:	9c 01       	movw	r18, r24
    ebf6:	55 e0       	ldi	r21, 0x05	; 5
    ebf8:	36 95       	lsr	r19
    ebfa:	27 95       	ror	r18
    ebfc:	5a 95       	dec	r21
    ebfe:	e1 f7       	brne	.-8      	; 0xebf8 <fatfs_filinfo_list+0xba>
    ec00:	2f 70       	andi	r18, 0x0F	; 15
    ec02:	33 27       	eor	r19, r19
    ec04:	3f 93       	push	r19
    ec06:	2f 93       	push	r18
    ec08:	89 2f       	mov	r24, r25
    ec0a:	99 27       	eor	r25, r25
    ec0c:	86 95       	lsr	r24
    ec0e:	84 54       	subi	r24, 0x44	; 68
    ec10:	98 4f       	sbci	r25, 0xF8	; 248
    ec12:	9f 93       	push	r25
    ec14:	8f 93       	push	r24
    ec16:	ce 01       	movw	r24, r28
    ec18:	01 96       	adiw	r24, 0x01	; 1
    ec1a:	9f 93       	push	r25
    ec1c:	8f 93       	push	r24
    ec1e:	85 e6       	ldi	r24, 0x65	; 101
    ec20:	98 e0       	ldi	r25, 0x08	; 8
    ec22:	1f 92       	push	r1
    ec24:	9f 93       	push	r25
    ec26:	8f 93       	push	r24
    ec28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    ec2c:	83 e6       	ldi	r24, 0x63	; 99
    ec2e:	98 e0       	ldi	r25, 0x08	; 8
    ec30:	1f 92       	push	r1
    ec32:	9f 93       	push	r25
    ec34:	8f 93       	push	r24
    ec36:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    ec3a:	0f b6       	in	r0, 0x3f	; 63
    ec3c:	f8 94       	cli
    ec3e:	de bf       	out	0x3e, r29	; 62
    ec40:	0f be       	out	0x3f, r0	; 63
    ec42:	cd bf       	out	0x3d, r28	; 61
}
    ec44:	26 96       	adiw	r28, 0x06	; 6
    ec46:	e2 e0       	ldi	r30, 0x02	; 2
    ec48:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000ec4c <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    ec4c:	cf 93       	push	r28
    ec4e:	df 93       	push	r29
    ec50:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    ec52:	88 ea       	ldi	r24, 0xA8	; 168
    ec54:	9b e0       	ldi	r25, 0x0B	; 11
    ec56:	1f 92       	push	r1
    ec58:	9f 93       	push	r25
    ec5a:	8f 93       	push	r24
    ec5c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    
    if(full)
    ec60:	0f 90       	pop	r0
    ec62:	0f 90       	pop	r0
    ec64:	0f 90       	pop	r0
    ec66:	cd 2b       	or	r28, r29
    ec68:	51 f0       	breq	.+20     	; 0xec7e <fatfs_help+0x32>
    {
        printf(
    ec6a:	8c e2       	ldi	r24, 0x2C	; 44
    ec6c:	9b e0       	ldi	r25, 0x0B	; 11
    ec6e:	1f 92       	push	r1
    ec70:	9f 93       	push	r25
    ec72:	8f 93       	push	r24
    ec74:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    ec78:	0f 90       	pop	r0
    ec7a:	0f 90       	pop	r0
    ec7c:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    ec7e:	df 91       	pop	r29
    ec80:	cf 91       	pop	r28
    ec82:	08 95       	ret

0000ec84 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    ec84:	aa e4       	ldi	r26, 0x4A	; 74
    ec86:	b2 e0       	ldi	r27, 0x02	; 2
    ec88:	e8 e4       	ldi	r30, 0x48	; 72
    ec8a:	f6 e7       	ldi	r31, 0x76	; 118
    ec8c:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    ec90:	8e 01       	movw	r16, r28
    ec92:	09 5e       	subi	r16, 0xE9	; 233
    ec94:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    ec96:	00 97       	sbiw	r24, 0x00	; 0
    ec98:	21 f0       	breq	.+8      	; 0xeca2 <fatfs_ls+0x1e>
    ec9a:	fc 01       	movw	r30, r24
    ec9c:	20 81       	ld	r18, Z
    ec9e:	21 11       	cpse	r18, r1
    eca0:	03 c0       	rjmp	.+6      	; 0xeca8 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    eca2:	68 e4       	ldi	r22, 0x48	; 72
    eca4:	70 e1       	ldi	r23, 0x10	; 16
    eca6:	01 c0       	rjmp	.+2      	; 0xecaa <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    eca8:	bc 01       	movw	r22, r24
    ecaa:	c8 01       	movw	r24, r16
    ecac:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    ecb0:	1f 93       	push	r17
    ecb2:	0f 93       	push	r16
    ecb4:	8c e9       	ldi	r24, 0x9C	; 156
    ecb6:	9a e0       	ldi	r25, 0x0A	; 10
    ecb8:	1f 92       	push	r1
    ecba:	9f 93       	push	r25
    ecbc:	8f 93       	push	r24
    ecbe:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    res = f_opendir(&dirs, buff);
    ecc2:	b8 01       	movw	r22, r16
    ecc4:	ce 01       	movw	r24, r28
    ecc6:	89 5e       	subi	r24, 0xE9	; 233
    ecc8:	9d 4f       	sbci	r25, 0xFD	; 253
    ecca:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <f_opendir>
    if (res) { put_rc(res); return; }
    ecce:	0f 90       	pop	r0
    ecd0:	0f 90       	pop	r0
    ecd2:	0f 90       	pop	r0
    ecd4:	0f 90       	pop	r0
    ecd6:	0f 90       	pop	r0
    ecd8:	00 97       	sbiw	r24, 0x00	; 0
    ecda:	11 f0       	breq	.+4      	; 0xece0 <fatfs_ls+0x5c>
    ecdc:	36 dd       	rcall	.-1428   	; 0xe74a <put_rc>
    p1 = s1 = s2 = 0;
    ecde:	9a c0       	rjmp	.+308    	; 0xee14 <fatfs_ls+0x190>
    ece0:	cb 5b       	subi	r28, 0xBB	; 187
    ece2:	dd 4f       	sbci	r29, 0xFD	; 253
    ece4:	18 82       	st	Y, r1
    ece6:	19 82       	std	Y+1, r1	; 0x01
    ece8:	1a 82       	std	Y+2, r1	; 0x02
    ecea:	1b 82       	std	Y+3, r1	; 0x03
    ecec:	c5 54       	subi	r28, 0x45	; 69
    ecee:	d2 40       	sbci	r29, 0x02	; 2
    ecf0:	c1 2c       	mov	r12, r1
    ecf2:	d1 2c       	mov	r13, r1
    ecf4:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    ecf6:	f1 2c       	mov	r15, r1
    ecf8:	be 01       	movw	r22, r28
    ecfa:	6f 5f       	subi	r22, 0xFF	; 255
    ecfc:	7f 4f       	sbci	r23, 0xFF	; 255
    ecfe:	ce 01       	movw	r24, r28
    ed00:	89 5e       	subi	r24, 0xE9	; 233
    ed02:	9d 4f       	sbci	r25, 0xFD	; 253
    ed04:	0e 94 84 61 	call	0xc308	; 0xc308 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    ed08:	89 2b       	or	r24, r25
    ed0a:	49 f5       	brne	.+82     	; 0xed5e <fatfs_ls+0xda>
    ed0c:	8f 89       	ldd	r24, Y+23	; 0x17
    ed0e:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    ed10:	31 f1       	breq	.+76     	; 0xed5e <fatfs_ls+0xda>
    ed12:	89 85       	ldd	r24, Y+9	; 0x09
    ed14:	84 ff       	sbrs	r24, 4
        {
            s2++;
    ed16:	04 c0       	rjmp	.+8      	; 0xed20 <fatfs_ls+0x9c>
    ed18:	ff ef       	ldi	r31, 0xFF	; 255
    ed1a:	cf 1a       	sub	r12, r31
    ed1c:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    ed1e:	1b c0       	rjmp	.+54     	; 0xed56 <fatfs_ls+0xd2>
    ed20:	2f ef       	ldi	r18, 0xFF	; 255
    ed22:	e2 1a       	sub	r14, r18
    ed24:	f2 0a       	sbc	r15, r18
    ed26:	49 81       	ldd	r20, Y+1	; 0x01
    ed28:	5a 81       	ldd	r21, Y+2	; 0x02
    ed2a:	6b 81       	ldd	r22, Y+3	; 0x03
    ed2c:	7c 81       	ldd	r23, Y+4	; 0x04
    ed2e:	cb 5b       	subi	r28, 0xBB	; 187
    ed30:	dd 4f       	sbci	r29, 0xFD	; 253
    ed32:	88 81       	ld	r24, Y
    ed34:	99 81       	ldd	r25, Y+1	; 0x01
    ed36:	aa 81       	ldd	r26, Y+2	; 0x02
    ed38:	bb 81       	ldd	r27, Y+3	; 0x03
    ed3a:	c5 54       	subi	r28, 0x45	; 69
    ed3c:	d2 40       	sbci	r29, 0x02	; 2
    ed3e:	84 0f       	add	r24, r20
    ed40:	95 1f       	adc	r25, r21
    ed42:	a6 1f       	adc	r26, r22
    ed44:	b7 1f       	adc	r27, r23
    ed46:	cb 5b       	subi	r28, 0xBB	; 187
    ed48:	dd 4f       	sbci	r29, 0xFD	; 253
    ed4a:	88 83       	st	Y, r24
    ed4c:	99 83       	std	Y+1, r25	; 0x01
    ed4e:	aa 83       	std	Y+2, r26	; 0x02
    ed50:	bb 83       	std	Y+3, r27	; 0x03
    ed52:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    ed54:	d2 40       	sbci	r29, 0x02	; 2
    ed56:	ce 01       	movw	r24, r28
    ed58:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ed5a:	f1 de       	rcall	.-542    	; 0xeb3e <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ed5c:	cd cf       	rjmp	.-102    	; 0xecf8 <fatfs_ls+0x74>
    ed5e:	df 92       	push	r13
    ed60:	cf 92       	push	r12
    ed62:	c8 5b       	subi	r28, 0xB8	; 184
    ed64:	dd 4f       	sbci	r29, 0xFD	; 253
    ed66:	88 81       	ld	r24, Y
    ed68:	c8 54       	subi	r28, 0x48	; 72
    ed6a:	d2 40       	sbci	r29, 0x02	; 2
    ed6c:	8f 93       	push	r24
    ed6e:	c9 5b       	subi	r28, 0xB9	; 185
    ed70:	dd 4f       	sbci	r29, 0xFD	; 253
    ed72:	88 81       	ld	r24, Y
    ed74:	c7 54       	subi	r28, 0x47	; 71
    ed76:	d2 40       	sbci	r29, 0x02	; 2
    ed78:	8f 93       	push	r24
    ed7a:	ca 5b       	subi	r28, 0xBA	; 186
    ed7c:	dd 4f       	sbci	r29, 0xFD	; 253
    ed7e:	88 81       	ld	r24, Y
    ed80:	c6 54       	subi	r28, 0x46	; 70
    ed82:	d2 40       	sbci	r29, 0x02	; 2
    ed84:	8f 93       	push	r24
    ed86:	cb 5b       	subi	r28, 0xBB	; 187
    ed88:	dd 4f       	sbci	r29, 0xFD	; 253
    ed8a:	88 81       	ld	r24, Y
    ed8c:	c5 54       	subi	r28, 0x45	; 69
    ed8e:	d2 40       	sbci	r29, 0x02	; 2
    ed90:	8f 93       	push	r24
    ed92:	ff 92       	push	r15
    ed94:	ef 92       	push	r14
    ed96:	83 e7       	ldi	r24, 0x73	; 115
    ed98:	9a e0       	ldi	r25, 0x0A	; 10
    ed9a:	1f 92       	push	r1
    ed9c:	9f 93       	push	r25
    ed9e:	8f 93       	push	r24
    eda0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    eda4:	ae 01       	movw	r20, r28
    eda6:	47 5b       	subi	r20, 0xB7	; 183
    eda8:	5d 4f       	sbci	r21, 0xFD	; 253
    edaa:	be 01       	movw	r22, r28
    edac:	6b 5b       	subi	r22, 0xBB	; 187
    edae:	7d 4f       	sbci	r23, 0xFD	; 253
    edb0:	c8 01       	movw	r24, r16
    edb2:	0e 94 0a 62 	call	0xc414	; 0xc414 <f_getfree>
    edb6:	0f b6       	in	r0, 0x3f	; 63
    edb8:	f8 94       	cli
    edba:	de bf       	out	0x3e, r29	; 62
    edbc:	0f be       	out	0x3f, r0	; 63
    edbe:	cd bf       	out	0x3d, r28	; 61
    edc0:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    edc2:	41 f5       	brne	.+80     	; 0xee14 <fatfs_ls+0x190>
    edc4:	c7 5b       	subi	r28, 0xB7	; 183
    edc6:	dd 4f       	sbci	r29, 0xFD	; 253
    edc8:	e8 81       	ld	r30, Y
    edca:	f9 81       	ldd	r31, Y+1	; 0x01
    edcc:	c9 54       	subi	r28, 0x49	; 73
    edce:	d2 40       	sbci	r29, 0x02	; 2
    edd0:	a1 85       	ldd	r26, Z+9	; 0x09
    edd2:	b2 85       	ldd	r27, Z+10	; 0x0a
    edd4:	cb 5b       	subi	r28, 0xBB	; 187
    edd6:	dd 4f       	sbci	r29, 0xFD	; 253
    edd8:	28 81       	ld	r18, Y
    edda:	39 81       	ldd	r19, Y+1	; 0x01
    eddc:	4a 81       	ldd	r20, Y+2	; 0x02
    edde:	5b 81       	ldd	r21, Y+3	; 0x03
    ede0:	c5 54       	subi	r28, 0x45	; 69
    ede2:	d2 40       	sbci	r29, 0x02	; 2
    ede4:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
    ede8:	22 e0       	ldi	r18, 0x02	; 2
    edea:	30 e0       	ldi	r19, 0x00	; 0
    edec:	40 e0       	ldi	r20, 0x00	; 0
    edee:	50 e0       	ldi	r21, 0x00	; 0
    edf0:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    edf4:	5f 93       	push	r21
    edf6:	4f 93       	push	r20
    edf8:	3f 93       	push	r19
    edfa:	2f 93       	push	r18
    edfc:	8e e5       	ldi	r24, 0x5E	; 94
    edfe:	9a e0       	ldi	r25, 0x0A	; 10
    ee00:	1f 92       	push	r1
    ee02:	9f 93       	push	r25
    ee04:	8f 93       	push	r24
    ee06:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    ee0a:	0f b6       	in	r0, 0x3f	; 63
    ee0c:	f8 94       	cli
    ee0e:	de bf       	out	0x3e, r29	; 62
    ee10:	0f be       	out	0x3f, r0	; 63
}
    ee12:	cd bf       	out	0x3d, r28	; 61
    ee14:	c6 5b       	subi	r28, 0xB6	; 182
    ee16:	dd 4f       	sbci	r29, 0xFD	; 253
    ee18:	e8 e0       	ldi	r30, 0x08	; 8
    ee1a:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000ee1e <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    ee1e:	8c ef       	ldi	r24, 0xFC	; 252
    ee20:	9a e0       	ldi	r25, 0x0A	; 10
    ee22:	1f 92       	push	r1
    ee24:	9f 93       	push	r25
    ee26:	8f 93       	push	r24
    ee28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("START MMC TEST\n");
    ee2c:	8c ee       	ldi	r24, 0xEC	; 236
    ee2e:	9a e0       	ldi	r25, 0x0A	; 10
    ee30:	1f 92       	push	r1
    ee32:	9f 93       	push	r25
    ee34:	8f 93       	push	r24
    ee36:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    fatfs_status("/");
    ee3a:	89 e0       	ldi	r24, 0x09	; 9
    ee3c:	98 e0       	ldi	r25, 0x08	; 8
    ee3e:	13 dd       	rcall	.-1498   	; 0xe866 <fatfs_status>
    printf("MMC Directory List\n");
    ee40:	88 ed       	ldi	r24, 0xD8	; 216
    ee42:	9a e0       	ldi	r25, 0x0A	; 10
    ee44:	1f 92       	push	r1
    ee46:	9f 93       	push	r25
    ee48:	8f 93       	push	r24
    ee4a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    fatfs_ls("/");
    ee4e:	89 e0       	ldi	r24, 0x09	; 9
    ee50:	98 e0       	ldi	r25, 0x08	; 8
    ee52:	18 df       	rcall	.-464    	; 0xec84 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ee54:	8a ec       	ldi	r24, 0xCA	; 202
    ee56:	9a e0       	ldi	r25, 0x0A	; 10
    ee58:	1f 92       	push	r1
    ee5a:	9f 93       	push	r25
    ee5c:	8f 93       	push	r24
    ee5e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("==============================\n");
    ee62:	8a ea       	ldi	r24, 0xAA	; 170
    ee64:	9a e0       	ldi	r25, 0x0A	; 10
    ee66:	1f 92       	push	r1
    ee68:	9f 93       	push	r25
    ee6a:	8f 93       	push	r24
    ee6c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
    ee70:	8d b7       	in	r24, 0x3d	; 61
    ee72:	9e b7       	in	r25, 0x3e	; 62
    ee74:	0f 96       	adiw	r24, 0x0f	; 15
    ee76:	0f b6       	in	r0, 0x3f	; 63
    ee78:	f8 94       	cli
    ee7a:	9e bf       	out	0x3e, r25	; 62
    ee7c:	0f be       	out	0x3f, r0	; 63
    ee7e:	8d bf       	out	0x3d, r24	; 61
    ee80:	08 95       	ret

0000ee82 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ee82:	ef 92       	push	r14
    ee84:	ff 92       	push	r15
    ee86:	0f 93       	push	r16
    ee88:	1f 93       	push	r17
    ee8a:	cf 93       	push	r28
    ee8c:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ee8e:	fb 01       	movw	r30, r22
    ee90:	20 81       	ld	r18, Z
    ee92:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ee94:	21 15       	cp	r18, r1
    ee96:	31 05       	cpc	r19, r1
    ee98:	19 f4       	brne	.+6      	; 0xeea0 <fatfs_tests+0x1e>
        return(0);
    ee9a:	80 e0       	ldi	r24, 0x00	; 0
    ee9c:	90 e0       	ldi	r25, 0x00	; 0
    ee9e:	77 c0       	rjmp	.+238    	; 0xef8e <fatfs_tests+0x10c>
    eea0:	eb 01       	movw	r28, r22
    eea2:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    eea4:	63 e3       	ldi	r22, 0x33	; 51
    eea6:	78 e0       	ldi	r23, 0x08	; 8
    eea8:	c9 01       	movw	r24, r18
    eeaa:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
    eeae:	89 2b       	or	r24, r25
    eeb0:	a1 f3       	breq	.-24     	; 0xee9a <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    eeb2:	ea 80       	ldd	r14, Y+2	; 0x02
    eeb4:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    eeb6:	e1 14       	cp	r14, r1
    eeb8:	f1 04       	cpc	r15, r1
    eeba:	21 f4       	brne	.+8      	; 0xeec4 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    eebc:	81 e0       	ldi	r24, 0x01	; 1
    eebe:	90 e0       	ldi	r25, 0x00	; 0
    eec0:	c5 de       	rcall	.-630    	; 0xec4c <fatfs_help>
    eec2:	63 c0       	rjmp	.+198    	; 0xef8a <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    eec4:	6b e0       	ldi	r22, 0x0B	; 11
    eec6:	76 e1       	ldi	r23, 0x16	; 22
    eec8:	c7 01       	movw	r24, r14
    eeca:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
    eece:	89 2b       	or	r24, r25
    eed0:	a9 f7       	brne	.-22     	; 0xeebc <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    eed2:	98 01       	movw	r18, r16
    eed4:	42 e0       	ldi	r20, 0x02	; 2
    eed6:	50 e0       	ldi	r21, 0x00	; 0
    eed8:	69 e3       	ldi	r22, 0x39	; 57
    eeda:	78 e0       	ldi	r23, 0x08	; 8
    eedc:	c7 01       	movw	r24, r14
    eede:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
    eee2:	89 2b       	or	r24, r25
    eee4:	51 f1       	breq	.+84     	; 0xef3a <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    eee6:	1f 93       	push	r17
    eee8:	0f 93       	push	r16
    eeea:	1f 92       	push	r1
    eeec:	82 e0       	ldi	r24, 0x02	; 2
    eeee:	8f 93       	push	r24
    eef0:	8c e1       	ldi	r24, 0x1C	; 28
    eef2:	9b e0       	ldi	r25, 0x0B	; 11
    eef4:	1f 92       	push	r1
    eef6:	9f 93       	push	r25
    eef8:	8f 93       	push	r24
    eefa:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    eefe:	7e 01       	movw	r14, r28
    ef00:	f4 e0       	ldi	r31, 0x04	; 4
    ef02:	ef 0e       	add	r14, r31
    ef04:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ef06:	8d b7       	in	r24, 0x3d	; 61
    ef08:	9e b7       	in	r25, 0x3e	; 62
    ef0a:	07 96       	adiw	r24, 0x07	; 7
    ef0c:	0f b6       	in	r0, 0x3f	; 63
    ef0e:	f8 94       	cli
    ef10:	9e bf       	out	0x3e, r25	; 62
    ef12:	0f be       	out	0x3f, r0	; 63
    ef14:	8d bf       	out	0x3d, r24	; 61
    ef16:	c2 e0       	ldi	r28, 0x02	; 2
    ef18:	d0 e0       	ldi	r29, 0x00	; 0
    ef1a:	c0 17       	cp	r28, r16
    ef1c:	d1 07       	cpc	r29, r17
    ef1e:	3c f4       	brge	.+14     	; 0xef2e <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ef20:	f7 01       	movw	r30, r14
    ef22:	81 91       	ld	r24, Z+
    ef24:	91 91       	ld	r25, Z+
    ef26:	7f 01       	movw	r14, r30
    ef28:	ad de       	rcall	.-678    	; 0xec84 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ef2a:	21 96       	adiw	r28, 0x01	; 1
    ef2c:	f6 cf       	rjmp	.-20     	; 0xef1a <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ef2e:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ef30:	61 f5       	brne	.+88     	; 0xef8a <fatfs_tests+0x108>
    ef32:	8f e9       	ldi	r24, 0x9F	; 159
    ef34:	9b e0       	ldi	r25, 0x0B	; 11
    ef36:	a6 de       	rcall	.-692    	; 0xec84 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ef38:	28 c0       	rjmp	.+80     	; 0xef8a <fatfs_tests+0x108>
    ef3a:	98 01       	movw	r18, r16
    ef3c:	42 e0       	ldi	r20, 0x02	; 2
    ef3e:	50 e0       	ldi	r21, 0x00	; 0
    ef40:	6c e3       	ldi	r22, 0x3C	; 60
    ef42:	78 e0       	ldi	r23, 0x08	; 8
    ef44:	c7 01       	movw	r24, r14
    ef46:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
    {
        mmc_test();
    ef4a:	89 2b       	or	r24, r25
    ef4c:	11 f0       	breq	.+4      	; 0xef52 <fatfs_tests+0xd0>
    ef4e:	67 df       	rcall	.-306    	; 0xee1e <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ef50:	1c c0       	rjmp	.+56     	; 0xef8a <fatfs_tests+0x108>
    ef52:	98 01       	movw	r18, r16
    ef54:	42 e0       	ldi	r20, 0x02	; 2
    ef56:	50 e0       	ldi	r21, 0x00	; 0
    ef58:	65 e4       	ldi	r22, 0x45	; 69
    ef5a:	78 e0       	ldi	r23, 0x08	; 8
    ef5c:	c7 01       	movw	r24, r14
    ef5e:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
    {
        mmc_init(1);
    ef62:	89 2b       	or	r24, r25
    ef64:	21 f0       	breq	.+8      	; 0xef6e <fatfs_tests+0xec>
    ef66:	81 e0       	ldi	r24, 0x01	; 1
    ef68:	90 e0       	ldi	r25, 0x00	; 0
    ef6a:	c4 da       	rcall	.-2680   	; 0xe4f4 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ef6c:	0e c0       	rjmp	.+28     	; 0xef8a <fatfs_tests+0x108>
    ef6e:	98 01       	movw	r18, r16
    ef70:	43 e0       	ldi	r20, 0x03	; 3
    ef72:	50 e0       	ldi	r21, 0x00	; 0
    ef74:	6e e4       	ldi	r22, 0x4E	; 78
    ef76:	78 e0       	ldi	r23, 0x08	; 8
    ef78:	c7 01       	movw	r24, r14
    ef7a:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
    ef7e:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ef80:	09 f4       	brne	.+2      	; 0xef84 <fatfs_tests+0x102>
    ef82:	8b cf       	rjmp	.-234    	; 0xee9a <fatfs_tests+0x18>
    ef84:	8c 81       	ldd	r24, Y+4	; 0x04
    ef86:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ef88:	6e dc       	rcall	.-1828   	; 0xe866 <fatfs_status>
    ef8a:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ef8c:	90 e0       	ldi	r25, 0x00	; 0
    ef8e:	cd b7       	in	r28, 0x3d	; 61
    ef90:	de b7       	in	r29, 0x3e	; 62
    ef92:	e6 e0       	ldi	r30, 0x06	; 6
    ef94:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000ef98 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ef98:	8f 92       	push	r8
    ef9a:	9f 92       	push	r9
    ef9c:	af 92       	push	r10
    ef9e:	bf 92       	push	r11
    efa0:	ef 92       	push	r14
    efa2:	ff 92       	push	r15
    efa4:	0f 93       	push	r16
    efa6:	1f 93       	push	r17
    efa8:	cf 93       	push	r28
    efaa:	df 93       	push	r29
    efac:	00 d0       	rcall	.+0      	; 0xefae <fatfs_getc+0x16>
    efae:	1f 92       	push	r1
    efb0:	cd b7       	in	r28, 0x3d	; 61
    efb2:	de b7       	in	r29, 0x3e	; 62
    efb4:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    efb8:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    efbc:	00 97       	sbiw	r24, 0x00	; 0
    efbe:	39 f4       	brne	.+14     	; 0xefce <fatfs_getc+0x36>
    efc0:	89 e0       	ldi	r24, 0x09	; 9
    efc2:	90 e0       	ldi	r25, 0x00	; 0
    efc4:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    efc8:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    efcc:	2f c0       	rjmp	.+94     	; 0xf02c <fatfs_getc+0x94>
    efce:	fc 01       	movw	r30, r24
    efd0:	e4 84       	ldd	r14, Z+12	; 0x0c
    efd2:	f5 84       	ldd	r15, Z+13	; 0x0d
    efd4:	e1 14       	cp	r14, r1
    efd6:	f1 04       	cpc	r15, r1
    efd8:	99 f3       	breq	.-26     	; 0xefc0 <fatfs_getc+0x28>
    efda:	8c 01       	movw	r16, r24
    efdc:	9e 01       	movw	r18, r28
    efde:	2f 5f       	subi	r18, 0xFF	; 255
    efe0:	3f 4f       	sbci	r19, 0xFF	; 255
    efe2:	41 e0       	ldi	r20, 0x01	; 1
    efe4:	50 e0       	ldi	r21, 0x00	; 0
    efe6:	be 01       	movw	r22, r28
    efe8:	6d 5f       	subi	r22, 0xFD	; 253
    efea:	7f 4f       	sbci	r23, 0xFF	; 255
    efec:	c7 01       	movw	r24, r14
    efee:	0e 94 15 59 	call	0xb22a	; 0xb22a <f_read>
    eff2:	00 97       	sbiw	r24, 0x00	; 0
    eff4:	31 f4       	brne	.+12     	; 0xf002 <fatfs_getc+0x6a>
    eff6:	29 81       	ldd	r18, Y+1	; 0x01
    eff8:	3a 81       	ldd	r19, Y+2	; 0x02
    effa:	21 30       	cpi	r18, 0x01	; 1
    effc:	31 05       	cpc	r19, r1
    effe:	c9 f0       	breq	.+50     	; 0xf032 <fatfs_getc+0x9a>
    f000:	03 c0       	rjmp	.+6      	; 0xf008 <fatfs_getc+0x70>
    f002:	84 31       	cpi	r24, 0x14	; 20
    f004:	91 05       	cpc	r25, r1
    f006:	40 f4       	brcc	.+16     	; 0xf018 <fatfs_getc+0x80>
    f008:	fc 01       	movw	r30, r24
    f00a:	ef 50       	subi	r30, 0x0F	; 15
    f00c:	f9 4f       	sbci	r31, 0xF9	; 249
    f00e:	80 81       	ld	r24, Z
    f010:	08 2e       	mov	r0, r24
    f012:	00 0c       	add	r0, r0
    f014:	99 0b       	sbc	r25, r25
    f016:	02 c0       	rjmp	.+4      	; 0xf01c <fatfs_getc+0x84>
    f018:	83 e2       	ldi	r24, 0x23	; 35
    f01a:	90 e0       	ldi	r25, 0x00	; 0
    f01c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f020:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f024:	f8 01       	movw	r30, r16
    f026:	83 81       	ldd	r24, Z+3	; 0x03
    f028:	80 62       	ori	r24, 0x20	; 32
    f02a:	83 83       	std	Z+3, r24	; 0x03
    f02c:	8f ef       	ldi	r24, 0xFF	; 255
    f02e:	9f ef       	ldi	r25, 0xFF	; 255
    f030:	28 c0       	rjmp	.+80     	; 0xf082 <fatfs_getc+0xea>
    f032:	8b 81       	ldd	r24, Y+3	; 0x03
    f034:	8d 30       	cpi	r24, 0x0D	; 13
    f036:	01 f5       	brne	.+64     	; 0xf078 <fatfs_getc+0xe0>
    f038:	f7 01       	movw	r30, r14
    f03a:	80 88       	ldd	r8, Z+16	; 0x10
    f03c:	91 88       	ldd	r9, Z+17	; 0x11
    f03e:	a2 88       	ldd	r10, Z+18	; 0x12
    f040:	b3 88       	ldd	r11, Z+19	; 0x13
    f042:	9e 01       	movw	r18, r28
    f044:	2f 5f       	subi	r18, 0xFF	; 255
    f046:	3f 4f       	sbci	r19, 0xFF	; 255
    f048:	41 e0       	ldi	r20, 0x01	; 1
    f04a:	50 e0       	ldi	r21, 0x00	; 0
    f04c:	be 01       	movw	r22, r28
    f04e:	6d 5f       	subi	r22, 0xFD	; 253
    f050:	7f 4f       	sbci	r23, 0xFF	; 255
    f052:	c7 01       	movw	r24, r14
    f054:	0e 94 15 59 	call	0xb22a	; 0xb22a <f_read>
    f058:	89 2b       	or	r24, r25
    f05a:	89 f4       	brne	.+34     	; 0xf07e <fatfs_getc+0xe6>
    f05c:	89 81       	ldd	r24, Y+1	; 0x01
    f05e:	9a 81       	ldd	r25, Y+2	; 0x02
    f060:	01 97       	sbiw	r24, 0x01	; 1
    f062:	69 f4       	brne	.+26     	; 0xf07e <fatfs_getc+0xe6>
    f064:	8b 81       	ldd	r24, Y+3	; 0x03
    f066:	8a 30       	cpi	r24, 0x0A	; 10
    f068:	31 f0       	breq	.+12     	; 0xf076 <fatfs_getc+0xde>
    f06a:	b5 01       	movw	r22, r10
    f06c:	a4 01       	movw	r20, r8
    f06e:	c7 01       	movw	r24, r14
    f070:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_lseek>
    f074:	04 c0       	rjmp	.+8      	; 0xf07e <fatfs_getc+0xe6>
    f076:	8b 83       	std	Y+3, r24	; 0x03
    f078:	8b 81       	ldd	r24, Y+3	; 0x03
    f07a:	90 e0       	ldi	r25, 0x00	; 0
    f07c:	02 c0       	rjmp	.+4      	; 0xf082 <fatfs_getc+0xea>
    f07e:	8a e0       	ldi	r24, 0x0A	; 10
    f080:	90 e0       	ldi	r25, 0x00	; 0
    f082:	0f 90       	pop	r0
    f084:	0f 90       	pop	r0
    f086:	0f 90       	pop	r0
    f088:	df 91       	pop	r29
    f08a:	cf 91       	pop	r28
    f08c:	1f 91       	pop	r17
    f08e:	0f 91       	pop	r16
    f090:	ff 90       	pop	r15
    f092:	ef 90       	pop	r14
    f094:	bf 90       	pop	r11
    f096:	af 90       	pop	r10
    f098:	9f 90       	pop	r9
    f09a:	8f 90       	pop	r8
    f09c:	08 95       	ret

0000f09e <fatfs_putc>:
    f09e:	a3 e0       	ldi	r26, 0x03	; 3
    f0a0:	b0 e0       	ldi	r27, 0x00	; 0
    f0a2:	e5 e5       	ldi	r30, 0x55	; 85
    f0a4:	f8 e7       	ldi	r31, 0x78	; 120
    f0a6:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    f0aa:	8b 83       	std	Y+3, r24	; 0x03
    f0ac:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f0b0:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f0b4:	61 15       	cp	r22, r1
    f0b6:	71 05       	cpc	r23, r1
    f0b8:	39 f4       	brne	.+14     	; 0xf0c8 <fatfs_putc+0x2a>
    f0ba:	89 e0       	ldi	r24, 0x09	; 9
    f0bc:	90 e0       	ldi	r25, 0x00	; 0
    f0be:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f0c2:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f0c6:	2d c0       	rjmp	.+90     	; 0xf122 <fatfs_putc+0x84>
    f0c8:	fb 01       	movw	r30, r22
    f0ca:	84 85       	ldd	r24, Z+12	; 0x0c
    f0cc:	95 85       	ldd	r25, Z+13	; 0x0d
    f0ce:	00 97       	sbiw	r24, 0x00	; 0
    f0d0:	a1 f3       	breq	.-24     	; 0xf0ba <fatfs_putc+0x1c>
    f0d2:	8b 01       	movw	r16, r22
    f0d4:	9e 01       	movw	r18, r28
    f0d6:	2f 5f       	subi	r18, 0xFF	; 255
    f0d8:	3f 4f       	sbci	r19, 0xFF	; 255
    f0da:	41 e0       	ldi	r20, 0x01	; 1
    f0dc:	50 e0       	ldi	r21, 0x00	; 0
    f0de:	be 01       	movw	r22, r28
    f0e0:	6d 5f       	subi	r22, 0xFD	; 253
    f0e2:	7f 4f       	sbci	r23, 0xFF	; 255
    f0e4:	0e 94 60 5a 	call	0xb4c0	; 0xb4c0 <f_write>
    f0e8:	00 97       	sbiw	r24, 0x00	; 0
    f0ea:	31 f4       	brne	.+12     	; 0xf0f8 <fatfs_putc+0x5a>
    f0ec:	29 81       	ldd	r18, Y+1	; 0x01
    f0ee:	3a 81       	ldd	r19, Y+2	; 0x02
    f0f0:	21 30       	cpi	r18, 0x01	; 1
    f0f2:	31 05       	cpc	r19, r1
    f0f4:	c9 f0       	breq	.+50     	; 0xf128 <fatfs_putc+0x8a>
    f0f6:	03 c0       	rjmp	.+6      	; 0xf0fe <fatfs_putc+0x60>
    f0f8:	84 31       	cpi	r24, 0x14	; 20
    f0fa:	91 05       	cpc	r25, r1
    f0fc:	40 f4       	brcc	.+16     	; 0xf10e <fatfs_putc+0x70>
    f0fe:	fc 01       	movw	r30, r24
    f100:	ef 50       	subi	r30, 0x0F	; 15
    f102:	f9 4f       	sbci	r31, 0xF9	; 249
    f104:	80 81       	ld	r24, Z
    f106:	08 2e       	mov	r0, r24
    f108:	00 0c       	add	r0, r0
    f10a:	99 0b       	sbc	r25, r25
    f10c:	02 c0       	rjmp	.+4      	; 0xf112 <fatfs_putc+0x74>
    f10e:	83 e2       	ldi	r24, 0x23	; 35
    f110:	90 e0       	ldi	r25, 0x00	; 0
    f112:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f116:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f11a:	f8 01       	movw	r30, r16
    f11c:	83 81       	ldd	r24, Z+3	; 0x03
    f11e:	80 62       	ori	r24, 0x20	; 32
    f120:	83 83       	std	Z+3, r24	; 0x03
    f122:	8f ef       	ldi	r24, 0xFF	; 255
    f124:	9f ef       	ldi	r25, 0xFF	; 255
    f126:	02 c0       	rjmp	.+4      	; 0xf12c <fatfs_putc+0x8e>
    f128:	8b 81       	ldd	r24, Y+3	; 0x03
    f12a:	90 e0       	ldi	r25, 0x00	; 0
    f12c:	23 96       	adiw	r28, 0x03	; 3
    f12e:	e4 e0       	ldi	r30, 0x04	; 4
    f130:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000f134 <fgetc>:
    f134:	cf 93       	push	r28
    f136:	df 93       	push	r29
    f138:	ec 01       	movw	r28, r24
    f13a:	00 97       	sbiw	r24, 0x00	; 0
    f13c:	39 f4       	brne	.+14     	; 0xf14c <fgetc+0x18>
    f13e:	89 e0       	ldi	r24, 0x09	; 9
    f140:	90 e0       	ldi	r25, 0x00	; 0
    f142:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f146:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f14a:	40 c0       	rjmp	.+128    	; 0xf1cc <fgetc+0x98>
    f14c:	2b 81       	ldd	r18, Y+3	; 0x03
    f14e:	20 ff       	sbrs	r18, 0
    f150:	3d c0       	rjmp	.+122    	; 0xf1cc <fgetc+0x98>
    f152:	26 ff       	sbrs	r18, 6
    f154:	0a c0       	rjmp	.+20     	; 0xf16a <fgetc+0x36>
    f156:	2f 7b       	andi	r18, 0xBF	; 191
    f158:	2b 83       	std	Y+3, r18	; 0x03
    f15a:	8e 81       	ldd	r24, Y+6	; 0x06
    f15c:	9f 81       	ldd	r25, Y+7	; 0x07
    f15e:	01 96       	adiw	r24, 0x01	; 1
    f160:	9f 83       	std	Y+7, r25	; 0x07
    f162:	8e 83       	std	Y+6, r24	; 0x06
    f164:	8a 81       	ldd	r24, Y+2	; 0x02
    f166:	90 e0       	ldi	r25, 0x00	; 0
    f168:	33 c0       	rjmp	.+102    	; 0xf1d0 <fgetc+0x9c>
    f16a:	22 ff       	sbrs	r18, 2
    f16c:	0d c0       	rjmp	.+26     	; 0xf188 <fgetc+0x54>
    f16e:	e8 81       	ld	r30, Y
    f170:	f9 81       	ldd	r31, Y+1	; 0x01
    f172:	80 81       	ld	r24, Z
    f174:	90 e0       	ldi	r25, 0x00	; 0
    f176:	00 97       	sbiw	r24, 0x00	; 0
    f178:	19 f4       	brne	.+6      	; 0xf180 <fgetc+0x4c>
    f17a:	20 62       	ori	r18, 0x20	; 32
    f17c:	2b 83       	std	Y+3, r18	; 0x03
    f17e:	26 c0       	rjmp	.+76     	; 0xf1cc <fgetc+0x98>
    f180:	31 96       	adiw	r30, 0x01	; 1
    f182:	f9 83       	std	Y+1, r31	; 0x01
    f184:	e8 83       	st	Y, r30
    f186:	1b c0       	rjmp	.+54     	; 0xf1be <fgetc+0x8a>
    f188:	ea 85       	ldd	r30, Y+10	; 0x0a
    f18a:	fb 85       	ldd	r31, Y+11	; 0x0b
    f18c:	30 97       	sbiw	r30, 0x00	; 0
    f18e:	59 f4       	brne	.+22     	; 0xf1a6 <fgetc+0x72>
    f190:	88 e7       	ldi	r24, 0x78	; 120
    f192:	9c e0       	ldi	r25, 0x0C	; 12
    f194:	1f 92       	push	r1
    f196:	9f 93       	push	r25
    f198:	8f 93       	push	r24
    f19a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f19e:	0f 90       	pop	r0
    f1a0:	0f 90       	pop	r0
    f1a2:	0f 90       	pop	r0
    f1a4:	13 c0       	rjmp	.+38     	; 0xf1cc <fgetc+0x98>
    f1a6:	09 95       	icall
    f1a8:	97 ff       	sbrs	r25, 7
    f1aa:	09 c0       	rjmp	.+18     	; 0xf1be <fgetc+0x8a>
    f1ac:	2b 81       	ldd	r18, Y+3	; 0x03
    f1ae:	02 96       	adiw	r24, 0x02	; 2
    f1b0:	11 f0       	breq	.+4      	; 0xf1b6 <fgetc+0x82>
    f1b2:	80 e2       	ldi	r24, 0x20	; 32
    f1b4:	01 c0       	rjmp	.+2      	; 0xf1b8 <fgetc+0x84>
    f1b6:	80 e1       	ldi	r24, 0x10	; 16
    f1b8:	82 2b       	or	r24, r18
    f1ba:	8b 83       	std	Y+3, r24	; 0x03
    f1bc:	07 c0       	rjmp	.+14     	; 0xf1cc <fgetc+0x98>
    f1be:	2e 81       	ldd	r18, Y+6	; 0x06
    f1c0:	3f 81       	ldd	r19, Y+7	; 0x07
    f1c2:	2f 5f       	subi	r18, 0xFF	; 255
    f1c4:	3f 4f       	sbci	r19, 0xFF	; 255
    f1c6:	3f 83       	std	Y+7, r19	; 0x07
    f1c8:	2e 83       	std	Y+6, r18	; 0x06
    f1ca:	02 c0       	rjmp	.+4      	; 0xf1d0 <fgetc+0x9c>
    f1cc:	8f ef       	ldi	r24, 0xFF	; 255
    f1ce:	9f ef       	ldi	r25, 0xFF	; 255
    f1d0:	df 91       	pop	r29
    f1d2:	cf 91       	pop	r28
    f1d4:	08 95       	ret

0000f1d6 <fputc>:
    f1d6:	cf 93       	push	r28
    f1d8:	df 93       	push	r29
    f1da:	eb 01       	movw	r28, r22
    f1dc:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f1e0:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f1e4:	20 91 7c 1c 	lds	r18, 0x1C7C	; 0x801c7c <__iob+0x2>
    f1e8:	30 91 7d 1c 	lds	r19, 0x1C7D	; 0x801c7d <__iob+0x3>
    f1ec:	62 17       	cp	r22, r18
    f1ee:	73 07       	cpc	r23, r19
    f1f0:	49 f0       	breq	.+18     	; 0xf204 <fputc+0x2e>
    f1f2:	20 91 7e 1c 	lds	r18, 0x1C7E	; 0x801c7e <__iob+0x4>
    f1f6:	30 91 7f 1c 	lds	r19, 0x1C7F	; 0x801c7f <__iob+0x5>
    f1fa:	62 17       	cp	r22, r18
    f1fc:	73 07       	cpc	r23, r19
    f1fe:	11 f0       	breq	.+4      	; 0xf204 <fputc+0x2e>
    f200:	4e df       	rcall	.-356    	; 0xf09e <fatfs_putc>
    f202:	33 c0       	rjmp	.+102    	; 0xf26a <fputc+0x94>
    f204:	2b 81       	ldd	r18, Y+3	; 0x03
    f206:	21 ff       	sbrs	r18, 1
    f208:	2e c0       	rjmp	.+92     	; 0xf266 <fputc+0x90>
    f20a:	22 ff       	sbrs	r18, 2
    f20c:	10 c0       	rjmp	.+32     	; 0xf22e <fputc+0x58>
    f20e:	4e 81       	ldd	r20, Y+6	; 0x06
    f210:	5f 81       	ldd	r21, Y+7	; 0x07
    f212:	2c 81       	ldd	r18, Y+4	; 0x04
    f214:	3d 81       	ldd	r19, Y+5	; 0x05
    f216:	42 17       	cp	r20, r18
    f218:	53 07       	cpc	r21, r19
    f21a:	f4 f4       	brge	.+60     	; 0xf258 <fputc+0x82>
    f21c:	e8 81       	ld	r30, Y
    f21e:	f9 81       	ldd	r31, Y+1	; 0x01
    f220:	9f 01       	movw	r18, r30
    f222:	2f 5f       	subi	r18, 0xFF	; 255
    f224:	3f 4f       	sbci	r19, 0xFF	; 255
    f226:	39 83       	std	Y+1, r19	; 0x01
    f228:	28 83       	st	Y, r18
    f22a:	80 83       	st	Z, r24
    f22c:	15 c0       	rjmp	.+42     	; 0xf258 <fputc+0x82>
    f22e:	e8 85       	ldd	r30, Y+8	; 0x08
    f230:	f9 85       	ldd	r31, Y+9	; 0x09
    f232:	30 97       	sbiw	r30, 0x00	; 0
    f234:	59 f4       	brne	.+22     	; 0xf24c <fputc+0x76>
    f236:	80 e6       	ldi	r24, 0x60	; 96
    f238:	9c e0       	ldi	r25, 0x0C	; 12
    f23a:	1f 92       	push	r1
    f23c:	9f 93       	push	r25
    f23e:	8f 93       	push	r24
    f240:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f244:	0f 90       	pop	r0
    f246:	0f 90       	pop	r0
    f248:	0f 90       	pop	r0
    f24a:	0d c0       	rjmp	.+26     	; 0xf266 <fputc+0x90>
    f24c:	be 01       	movw	r22, r28
    f24e:	09 95       	icall
    f250:	8f 3f       	cpi	r24, 0xFF	; 255
    f252:	2f ef       	ldi	r18, 0xFF	; 255
    f254:	92 07       	cpc	r25, r18
    f256:	39 f0       	breq	.+14     	; 0xf266 <fputc+0x90>
    f258:	2e 81       	ldd	r18, Y+6	; 0x06
    f25a:	3f 81       	ldd	r19, Y+7	; 0x07
    f25c:	2f 5f       	subi	r18, 0xFF	; 255
    f25e:	3f 4f       	sbci	r19, 0xFF	; 255
    f260:	3f 83       	std	Y+7, r19	; 0x07
    f262:	2e 83       	std	Y+6, r18	; 0x06
    f264:	02 c0       	rjmp	.+4      	; 0xf26a <fputc+0x94>
    f266:	8f ef       	ldi	r24, 0xFF	; 255
    f268:	9f ef       	ldi	r25, 0xFF	; 255
    f26a:	df 91       	pop	r29
    f26c:	cf 91       	pop	r28
    f26e:	08 95       	ret

0000f270 <_fprintf_putc>:
    f270:	fc 01       	movw	r30, r24
    f272:	86 2f       	mov	r24, r22
    f274:	26 81       	ldd	r18, Z+6	; 0x06
    f276:	37 81       	ldd	r19, Z+7	; 0x07
    f278:	2f 5f       	subi	r18, 0xFF	; 255
    f27a:	3f 4f       	sbci	r19, 0xFF	; 255
    f27c:	37 83       	std	Z+7, r19	; 0x07
    f27e:	26 83       	std	Z+6, r18	; 0x06
    f280:	62 81       	ldd	r22, Z+2	; 0x02
    f282:	73 81       	ldd	r23, Z+3	; 0x03
    f284:	90 e0       	ldi	r25, 0x00	; 0
    f286:	a7 cf       	rjmp	.-178    	; 0xf1d6 <fputc>
    f288:	08 95       	ret

0000f28a <getchar>:
    f28a:	80 91 7a 1c 	lds	r24, 0x1C7A	; 0x801c7a <__iob>
    f28e:	90 91 7b 1c 	lds	r25, 0x1C7B	; 0x801c7b <__iob+0x1>
    f292:	50 cf       	rjmp	.-352    	; 0xf134 <fgetc>
    f294:	08 95       	ret

0000f296 <putchar>:
    f296:	60 91 7c 1c 	lds	r22, 0x1C7C	; 0x801c7c <__iob+0x2>
    f29a:	70 91 7d 1c 	lds	r23, 0x1C7D	; 0x801c7d <__iob+0x3>
    f29e:	9b cf       	rjmp	.-202    	; 0xf1d6 <fputc>
    f2a0:	08 95       	ret

0000f2a2 <fgets>:
    f2a2:	a0 e0       	ldi	r26, 0x00	; 0
    f2a4:	b0 e0       	ldi	r27, 0x00	; 0
    f2a6:	e7 e5       	ldi	r30, 0x57	; 87
    f2a8:	f9 e7       	ldi	r31, 0x79	; 121
    f2aa:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    f2ae:	7c 01       	movw	r14, r24
    f2b0:	6a 01       	movw	r12, r20
    f2b2:	8b 01       	movw	r16, r22
    f2b4:	c0 e0       	ldi	r28, 0x00	; 0
    f2b6:	d0 e0       	ldi	r29, 0x00	; 0
    f2b8:	01 15       	cp	r16, r1
    f2ba:	11 05       	cpc	r17, r1
    f2bc:	41 f0       	breq	.+16     	; 0xf2ce <fgets+0x2c>
    f2be:	c6 01       	movw	r24, r12
    f2c0:	39 df       	rcall	.-398    	; 0xf134 <fgetc>
    f2c2:	8f 3f       	cpi	r24, 0xFF	; 255
    f2c4:	2f ef       	ldi	r18, 0xFF	; 255
    f2c6:	92 07       	cpc	r25, r18
    f2c8:	39 f4       	brne	.+14     	; 0xf2d8 <fgets+0x36>
    f2ca:	20 97       	sbiw	r28, 0x00	; 0
    f2cc:	b9 f0       	breq	.+46     	; 0xf2fc <fgets+0x5a>
    f2ce:	ce 0d       	add	r28, r14
    f2d0:	df 1d       	adc	r29, r15
    f2d2:	18 82       	st	Y, r1
    f2d4:	c7 01       	movw	r24, r14
    f2d6:	14 c0       	rjmp	.+40     	; 0xf300 <fgets+0x5e>
    f2d8:	8a 30       	cpi	r24, 0x0A	; 10
    f2da:	91 05       	cpc	r25, r1
    f2dc:	c1 f3       	breq	.-16     	; 0xf2ce <fgets+0x2c>
    f2de:	88 30       	cpi	r24, 0x08	; 8
    f2e0:	91 05       	cpc	r25, r1
    f2e2:	21 f4       	brne	.+8      	; 0xf2ec <fgets+0x4a>
    f2e4:	20 97       	sbiw	r28, 0x00	; 0
    f2e6:	39 f0       	breq	.+14     	; 0xf2f6 <fgets+0x54>
    f2e8:	21 97       	sbiw	r28, 0x01	; 1
    f2ea:	05 c0       	rjmp	.+10     	; 0xf2f6 <fgets+0x54>
    f2ec:	f7 01       	movw	r30, r14
    f2ee:	ec 0f       	add	r30, r28
    f2f0:	fd 1f       	adc	r31, r29
    f2f2:	80 83       	st	Z, r24
    f2f4:	21 96       	adiw	r28, 0x01	; 1
    f2f6:	01 50       	subi	r16, 0x01	; 1
    f2f8:	11 09       	sbc	r17, r1
    f2fa:	de cf       	rjmp	.-68     	; 0xf2b8 <fgets+0x16>
    f2fc:	80 e0       	ldi	r24, 0x00	; 0
    f2fe:	90 e0       	ldi	r25, 0x00	; 0
    f300:	cd b7       	in	r28, 0x3d	; 61
    f302:	de b7       	in	r29, 0x3e	; 62
    f304:	e8 e0       	ldi	r30, 0x08	; 8
    f306:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000f30a <fputs>:
    f30a:	0f 93       	push	r16
    f30c:	1f 93       	push	r17
    f30e:	cf 93       	push	r28
    f310:	df 93       	push	r29
    f312:	8b 01       	movw	r16, r22
    f314:	ec 01       	movw	r28, r24
    f316:	89 91       	ld	r24, Y+
    f318:	88 23       	and	r24, r24
    f31a:	41 f0       	breq	.+16     	; 0xf32c <fputs+0x22>
    f31c:	b8 01       	movw	r22, r16
    f31e:	90 e0       	ldi	r25, 0x00	; 0
    f320:	5a df       	rcall	.-332    	; 0xf1d6 <fputc>
    f322:	8f 3f       	cpi	r24, 0xFF	; 255
    f324:	2f ef       	ldi	r18, 0xFF	; 255
    f326:	92 07       	cpc	r25, r18
    f328:	b1 f7       	brne	.-20     	; 0xf316 <fputs+0xc>
    f32a:	02 c0       	rjmp	.+4      	; 0xf330 <fputs+0x26>
    f32c:	80 e0       	ldi	r24, 0x00	; 0
    f32e:	90 e0       	ldi	r25, 0x00	; 0
    f330:	df 91       	pop	r29
    f332:	cf 91       	pop	r28
    f334:	1f 91       	pop	r17
    f336:	0f 91       	pop	r16
    f338:	08 95       	ret

0000f33a <puts>:
    f33a:	cf 93       	push	r28
    f33c:	df 93       	push	r29
    f33e:	ec 01       	movw	r28, r24
    f340:	89 91       	ld	r24, Y+
    f342:	60 91 7c 1c 	lds	r22, 0x1C7C	; 0x801c7c <__iob+0x2>
    f346:	70 91 7d 1c 	lds	r23, 0x1C7D	; 0x801c7d <__iob+0x3>
    f34a:	88 23       	and	r24, r24
    f34c:	39 f0       	breq	.+14     	; 0xf35c <puts+0x22>
    f34e:	90 e0       	ldi	r25, 0x00	; 0
    f350:	42 df       	rcall	.-380    	; 0xf1d6 <fputc>
    f352:	8f 3f       	cpi	r24, 0xFF	; 255
    f354:	2f ef       	ldi	r18, 0xFF	; 255
    f356:	92 07       	cpc	r25, r18
    f358:	99 f7       	brne	.-26     	; 0xf340 <puts+0x6>
    f35a:	03 c0       	rjmp	.+6      	; 0xf362 <puts+0x28>
    f35c:	8a e0       	ldi	r24, 0x0A	; 10
    f35e:	90 e0       	ldi	r25, 0x00	; 0
    f360:	3a df       	rcall	.-396    	; 0xf1d6 <fputc>
    f362:	df 91       	pop	r29
    f364:	cf 91       	pop	r28
    f366:	08 95       	ret

0000f368 <fileno>:
    f368:	00 97       	sbiw	r24, 0x00	; 0
    f36a:	39 f4       	brne	.+14     	; 0xf37a <fileno+0x12>
    f36c:	89 e0       	ldi	r24, 0x09	; 9
    f36e:	90 e0       	ldi	r25, 0x00	; 0
    f370:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f374:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f378:	0e c0       	rjmp	.+28     	; 0xf396 <fileno+0x2e>
    f37a:	ea e7       	ldi	r30, 0x7A	; 122
    f37c:	fc e1       	ldi	r31, 0x1C	; 28
    f37e:	20 e0       	ldi	r18, 0x00	; 0
    f380:	30 e0       	ldi	r19, 0x00	; 0
    f382:	41 91       	ld	r20, Z+
    f384:	51 91       	ld	r21, Z+
    f386:	84 17       	cp	r24, r20
    f388:	95 07       	cpc	r25, r21
    f38a:	41 f0       	breq	.+16     	; 0xf39c <fileno+0x34>
    f38c:	2f 5f       	subi	r18, 0xFF	; 255
    f38e:	3f 4f       	sbci	r19, 0xFF	; 255
    f390:	20 31       	cpi	r18, 0x10	; 16
    f392:	31 05       	cpc	r19, r1
    f394:	b1 f7       	brne	.-20     	; 0xf382 <fileno+0x1a>
    f396:	8f ef       	ldi	r24, 0xFF	; 255
    f398:	9f ef       	ldi	r25, 0xFF	; 255
    f39a:	08 95       	ret
    f39c:	c9 01       	movw	r24, r18
    f39e:	08 95       	ret

0000f3a0 <fileno_to_stream>:
    f3a0:	80 31       	cpi	r24, 0x10	; 16
    f3a2:	91 05       	cpc	r25, r1
    f3a4:	48 f4       	brcc	.+18     	; 0xf3b8 <fileno_to_stream+0x18>
    f3a6:	88 0f       	add	r24, r24
    f3a8:	99 1f       	adc	r25, r25
    f3aa:	fc 01       	movw	r30, r24
    f3ac:	e6 58       	subi	r30, 0x86	; 134
    f3ae:	f3 4e       	sbci	r31, 0xE3	; 227
    f3b0:	80 81       	ld	r24, Z
    f3b2:	91 81       	ldd	r25, Z+1	; 0x01
    f3b4:	00 97       	sbiw	r24, 0x00	; 0
    f3b6:	41 f4       	brne	.+16     	; 0xf3c8 <fileno_to_stream+0x28>
    f3b8:	89 e0       	ldi	r24, 0x09	; 9
    f3ba:	90 e0       	ldi	r25, 0x00	; 0
    f3bc:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f3c0:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f3c4:	80 e0       	ldi	r24, 0x00	; 0
    f3c6:	90 e0       	ldi	r25, 0x00	; 0
    f3c8:	08 95       	ret

0000f3ca <mctime>:
    f3ca:	a4 e0       	ldi	r26, 0x04	; 4
    f3cc:	b0 e0       	ldi	r27, 0x00	; 0
    f3ce:	eb ee       	ldi	r30, 0xEB	; 235
    f3d0:	f9 e7       	ldi	r31, 0x79	; 121
    f3d2:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    f3d6:	69 83       	std	Y+1, r22	; 0x01
    f3d8:	7a 83       	std	Y+2, r23	; 0x02
    f3da:	8b 83       	std	Y+3, r24	; 0x03
    f3dc:	9c 83       	std	Y+4, r25	; 0x04
    f3de:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f3e2:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f3e6:	ce 01       	movw	r24, r28
    f3e8:	01 96       	adiw	r24, 0x01	; 1
    f3ea:	0e 94 fe 3b 	call	0x77fc	; 0x77fc <ctime_gm>
    f3ee:	fc 01       	movw	r30, r24
    f3f0:	01 90       	ld	r0, Z+
    f3f2:	00 20       	and	r0, r0
    f3f4:	e9 f7       	brne	.-6      	; 0xf3f0 <mctime+0x26>
    f3f6:	31 97       	sbiw	r30, 0x01	; 1
    f3f8:	e8 1b       	sub	r30, r24
    f3fa:	f9 0b       	sbc	r31, r25
    f3fc:	39 f0       	breq	.+14     	; 0xf40c <mctime+0x42>
    f3fe:	31 97       	sbiw	r30, 0x01	; 1
    f400:	e8 0f       	add	r30, r24
    f402:	f9 1f       	adc	r31, r25
    f404:	20 81       	ld	r18, Z
    f406:	2a 30       	cpi	r18, 0x0A	; 10
    f408:	09 f4       	brne	.+2      	; 0xf40c <mctime+0x42>
    f40a:	10 82       	st	Z, r1
    f40c:	24 96       	adiw	r28, 0x04	; 4
    f40e:	e2 e0       	ldi	r30, 0x02	; 2
    f410:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000f414 <dump_stat>:
    f414:	cf 92       	push	r12
    f416:	df 92       	push	r13
    f418:	ef 92       	push	r14
    f41a:	ff 92       	push	r15
    f41c:	cf 93       	push	r28
    f41e:	df 93       	push	r29
    f420:	ec 01       	movw	r28, r24
    f422:	c8 84       	ldd	r12, Y+8	; 0x08
    f424:	d9 84       	ldd	r13, Y+9	; 0x09
    f426:	ea 84       	ldd	r14, Y+10	; 0x0a
    f428:	fb 84       	ldd	r15, Y+11	; 0x0b
    f42a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f42c:	8f 93       	push	r24
    f42e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f430:	8f 93       	push	r24
    f432:	89 8d       	ldd	r24, Y+25	; 0x19
    f434:	8f 93       	push	r24
    f436:	88 8d       	ldd	r24, Y+24	; 0x18
    f438:	8f 93       	push	r24
    f43a:	87 e4       	ldi	r24, 0x47	; 71
    f43c:	9c e0       	ldi	r25, 0x0C	; 12
    f43e:	1f 92       	push	r1
    f440:	9f 93       	push	r25
    f442:	8f 93       	push	r24
    f444:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f448:	8e e3       	ldi	r24, 0x3E	; 62
    f44a:	9c e0       	ldi	r25, 0x0C	; 12
    f44c:	1f 92       	push	r1
    f44e:	9f 93       	push	r25
    f450:	8f 93       	push	r24
    f452:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f456:	d7 01       	movw	r26, r14
    f458:	c6 01       	movw	r24, r12
    f45a:	88 27       	eor	r24, r24
    f45c:	90 7f       	andi	r25, 0xF0	; 240
    f45e:	aa 27       	eor	r26, r26
    f460:	bb 27       	eor	r27, r27
    f462:	2d b7       	in	r18, 0x3d	; 61
    f464:	3e b7       	in	r19, 0x3e	; 62
    f466:	26 5f       	subi	r18, 0xF6	; 246
    f468:	3f 4f       	sbci	r19, 0xFF	; 255
    f46a:	0f b6       	in	r0, 0x3f	; 63
    f46c:	f8 94       	cli
    f46e:	3e bf       	out	0x3e, r19	; 62
    f470:	0f be       	out	0x3f, r0	; 63
    f472:	2d bf       	out	0x3d, r18	; 61
    f474:	81 15       	cp	r24, r1
    f476:	30 e4       	ldi	r19, 0x40	; 64
    f478:	93 07       	cpc	r25, r19
    f47a:	a1 05       	cpc	r26, r1
    f47c:	b1 05       	cpc	r27, r1
    f47e:	19 f4       	brne	.+6      	; 0xf486 <dump_stat+0x72>
    f480:	89 e3       	ldi	r24, 0x39	; 57
    f482:	9c e0       	ldi	r25, 0x0C	; 12
    f484:	0a c0       	rjmp	.+20     	; 0xf49a <dump_stat+0x86>
    f486:	81 15       	cp	r24, r1
    f488:	90 48       	sbci	r25, 0x80	; 128
    f48a:	a1 05       	cpc	r26, r1
    f48c:	b1 05       	cpc	r27, r1
    f48e:	19 f4       	brne	.+6      	; 0xf496 <dump_stat+0x82>
    f490:	83 e3       	ldi	r24, 0x33	; 51
    f492:	9c e0       	ldi	r25, 0x0C	; 12
    f494:	02 c0       	rjmp	.+4      	; 0xf49a <dump_stat+0x86>
    f496:	8a e2       	ldi	r24, 0x2A	; 42
    f498:	9c e0       	ldi	r25, 0x0C	; 12
    f49a:	1f 92       	push	r1
    f49c:	9f 93       	push	r25
    f49e:	8f 93       	push	r24
    f4a0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f4a4:	0f 90       	pop	r0
    f4a6:	0f 90       	pop	r0
    f4a8:	0f 90       	pop	r0
    f4aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    f4ac:	8f 93       	push	r24
    f4ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    f4b0:	8f 93       	push	r24
    f4b2:	89 85       	ldd	r24, Y+9	; 0x09
    f4b4:	8f 93       	push	r24
    f4b6:	88 85       	ldd	r24, Y+8	; 0x08
    f4b8:	8f 93       	push	r24
    f4ba:	8d e1       	ldi	r24, 0x1D	; 29
    f4bc:	9c e0       	ldi	r25, 0x0C	; 12
    f4be:	1f 92       	push	r1
    f4c0:	9f 93       	push	r25
    f4c2:	8f 93       	push	r24
    f4c4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f4c8:	88 89       	ldd	r24, Y+16	; 0x10
    f4ca:	99 89       	ldd	r25, Y+17	; 0x11
    f4cc:	1f 92       	push	r1
    f4ce:	1f 92       	push	r1
    f4d0:	9f 93       	push	r25
    f4d2:	8f 93       	push	r24
    f4d4:	80 e1       	ldi	r24, 0x10	; 16
    f4d6:	9c e0       	ldi	r25, 0x0C	; 12
    f4d8:	1f 92       	push	r1
    f4da:	9f 93       	push	r25
    f4dc:	8f 93       	push	r24
    f4de:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f4e2:	8a 89       	ldd	r24, Y+18	; 0x12
    f4e4:	9b 89       	ldd	r25, Y+19	; 0x13
    f4e6:	1f 92       	push	r1
    f4e8:	1f 92       	push	r1
    f4ea:	9f 93       	push	r25
    f4ec:	8f 93       	push	r24
    f4ee:	83 e0       	ldi	r24, 0x03	; 3
    f4f0:	9c e0       	ldi	r25, 0x0C	; 12
    f4f2:	1f 92       	push	r1
    f4f4:	9f 93       	push	r25
    f4f6:	8f 93       	push	r24
    f4f8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f4fc:	6c a1       	ldd	r22, Y+36	; 0x24
    f4fe:	7d a1       	ldd	r23, Y+37	; 0x25
    f500:	8e a1       	ldd	r24, Y+38	; 0x26
    f502:	9f a1       	ldd	r25, Y+39	; 0x27
    f504:	62 df       	rcall	.-316    	; 0xf3ca <mctime>
    f506:	9f 93       	push	r25
    f508:	8f 93       	push	r24
    f50a:	87 ef       	ldi	r24, 0xF7	; 247
    f50c:	9b e0       	ldi	r25, 0x0B	; 11
    f50e:	1f 92       	push	r1
    f510:	9f 93       	push	r25
    f512:	8f 93       	push	r24
    f514:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f518:	68 a5       	ldd	r22, Y+40	; 0x28
    f51a:	79 a5       	ldd	r23, Y+41	; 0x29
    f51c:	8a a5       	ldd	r24, Y+42	; 0x2a
    f51e:	9b a5       	ldd	r25, Y+43	; 0x2b
    f520:	54 df       	rcall	.-344    	; 0xf3ca <mctime>
    f522:	9f 93       	push	r25
    f524:	8f 93       	push	r24
    f526:	8b ee       	ldi	r24, 0xEB	; 235
    f528:	9b e0       	ldi	r25, 0x0B	; 11
    f52a:	1f 92       	push	r1
    f52c:	9f 93       	push	r25
    f52e:	8f 93       	push	r24
    f530:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f534:	6c a5       	ldd	r22, Y+44	; 0x2c
    f536:	7d a5       	ldd	r23, Y+45	; 0x2d
    f538:	8e a5       	ldd	r24, Y+46	; 0x2e
    f53a:	9f a5       	ldd	r25, Y+47	; 0x2f
    f53c:	46 df       	rcall	.-372    	; 0xf3ca <mctime>
    f53e:	9f 93       	push	r25
    f540:	8f 93       	push	r24
    f542:	8f ed       	ldi	r24, 0xDF	; 223
    f544:	9b e0       	ldi	r25, 0x0B	; 11
    f546:	1f 92       	push	r1
    f548:	9f 93       	push	r25
    f54a:	8f 93       	push	r24
    f54c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f550:	8d b7       	in	r24, 0x3d	; 61
    f552:	9e b7       	in	r25, 0x3e	; 62
    f554:	84 96       	adiw	r24, 0x24	; 36
    f556:	0f b6       	in	r0, 0x3f	; 63
    f558:	f8 94       	cli
    f55a:	9e bf       	out	0x3e, r25	; 62
    f55c:	0f be       	out	0x3f, r0	; 63
    f55e:	8d bf       	out	0x3d, r24	; 61
    f560:	df 91       	pop	r29
    f562:	cf 91       	pop	r28
    f564:	ff 90       	pop	r15
    f566:	ef 90       	pop	r14
    f568:	df 90       	pop	r13
    f56a:	cf 90       	pop	r12
    f56c:	08 95       	ret

0000f56e <basename>:
    f56e:	00 97       	sbiw	r24, 0x00	; 0
    f570:	49 f0       	breq	.+18     	; 0xf584 <basename+0x16>
    f572:	fc 01       	movw	r30, r24
    f574:	21 91       	ld	r18, Z+
    f576:	22 23       	and	r18, r18
    f578:	21 f0       	breq	.+8      	; 0xf582 <basename+0x14>
    f57a:	2f 32       	cpi	r18, 0x2F	; 47
    f57c:	d9 f7       	brne	.-10     	; 0xf574 <basename+0x6>
    f57e:	cf 01       	movw	r24, r30
    f580:	f9 cf       	rjmp	.-14     	; 0xf574 <basename+0x6>
    f582:	08 95       	ret
    f584:	8f e9       	ldi	r24, 0x9F	; 159
    f586:	9b e0       	ldi	r25, 0x0B	; 11
    f588:	08 95       	ret

0000f58a <chdir>:
    f58a:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f58e:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f592:	0e 94 90 5c 	call	0xb920	; 0xb920 <f_chdir>
    f596:	00 97       	sbiw	r24, 0x00	; 0
    f598:	a1 f0       	breq	.+40     	; 0xf5c2 <chdir+0x38>
    f59a:	84 31       	cpi	r24, 0x14	; 20
    f59c:	91 05       	cpc	r25, r1
    f59e:	40 f4       	brcc	.+16     	; 0xf5b0 <chdir+0x26>
    f5a0:	fc 01       	movw	r30, r24
    f5a2:	ef 50       	subi	r30, 0x0F	; 15
    f5a4:	f9 4f       	sbci	r31, 0xF9	; 249
    f5a6:	80 81       	ld	r24, Z
    f5a8:	08 2e       	mov	r0, r24
    f5aa:	00 0c       	add	r0, r0
    f5ac:	99 0b       	sbc	r25, r25
    f5ae:	02 c0       	rjmp	.+4      	; 0xf5b4 <chdir+0x2a>
    f5b0:	83 e2       	ldi	r24, 0x23	; 35
    f5b2:	90 e0       	ldi	r25, 0x00	; 0
    f5b4:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f5b8:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f5bc:	8f ef       	ldi	r24, 0xFF	; 255
    f5be:	9f ef       	ldi	r25, 0xFF	; 255
    f5c0:	08 95       	ret
    f5c2:	80 e0       	ldi	r24, 0x00	; 0
    f5c4:	90 e0       	ldi	r25, 0x00	; 0
    f5c6:	08 95       	ret

0000f5c8 <chmod>:
    f5c8:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f5cc:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f5d0:	42 79       	andi	r20, 0x92	; 146
    f5d2:	55 27       	eor	r21, r21
    f5d4:	66 27       	eor	r22, r22
    f5d6:	77 27       	eor	r23, r23
    f5d8:	45 2b       	or	r20, r21
    f5da:	46 2b       	or	r20, r22
    f5dc:	47 2b       	or	r20, r23
    f5de:	19 f0       	breq	.+6      	; 0xf5e6 <chmod+0x1e>
    f5e0:	80 e0       	ldi	r24, 0x00	; 0
    f5e2:	90 e0       	ldi	r25, 0x00	; 0
    f5e4:	08 95       	ret
    f5e6:	41 e0       	ldi	r20, 0x01	; 1
    f5e8:	61 e0       	ldi	r22, 0x01	; 1
    f5ea:	0e 94 f6 65 	call	0xcbec	; 0xcbec <f_chmod>
    f5ee:	00 97       	sbiw	r24, 0x00	; 0
    f5f0:	b9 f3       	breq	.-18     	; 0xf5e0 <chmod+0x18>
    f5f2:	84 31       	cpi	r24, 0x14	; 20
    f5f4:	91 05       	cpc	r25, r1
    f5f6:	40 f4       	brcc	.+16     	; 0xf608 <chmod+0x40>
    f5f8:	fc 01       	movw	r30, r24
    f5fa:	ef 50       	subi	r30, 0x0F	; 15
    f5fc:	f9 4f       	sbci	r31, 0xF9	; 249
    f5fe:	80 81       	ld	r24, Z
    f600:	08 2e       	mov	r0, r24
    f602:	00 0c       	add	r0, r0
    f604:	99 0b       	sbc	r25, r25
    f606:	02 c0       	rjmp	.+4      	; 0xf60c <chmod+0x44>
    f608:	83 e2       	ldi	r24, 0x23	; 35
    f60a:	90 e0       	ldi	r25, 0x00	; 0
    f60c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f610:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f614:	8f ef       	ldi	r24, 0xFF	; 255
    f616:	9f ef       	ldi	r25, 0xFF	; 255
    f618:	08 95       	ret

0000f61a <getcwd>:
    f61a:	cf 93       	push	r28
    f61c:	df 93       	push	r29
    f61e:	d8 2f       	mov	r29, r24
    f620:	c9 2f       	mov	r28, r25
    f622:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f626:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f62a:	0e 94 eb 5c 	call	0xb9d6	; 0xb9d6 <f_getcwd>
    f62e:	00 97       	sbiw	r24, 0x00	; 0
    f630:	a1 f0       	breq	.+40     	; 0xf65a <getcwd+0x40>
    f632:	84 31       	cpi	r24, 0x14	; 20
    f634:	91 05       	cpc	r25, r1
    f636:	40 f4       	brcc	.+16     	; 0xf648 <getcwd+0x2e>
    f638:	fc 01       	movw	r30, r24
    f63a:	ef 50       	subi	r30, 0x0F	; 15
    f63c:	f9 4f       	sbci	r31, 0xF9	; 249
    f63e:	80 81       	ld	r24, Z
    f640:	08 2e       	mov	r0, r24
    f642:	00 0c       	add	r0, r0
    f644:	99 0b       	sbc	r25, r25
    f646:	02 c0       	rjmp	.+4      	; 0xf64c <getcwd+0x32>
    f648:	83 e2       	ldi	r24, 0x23	; 35
    f64a:	90 e0       	ldi	r25, 0x00	; 0
    f64c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f650:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f654:	80 e0       	ldi	r24, 0x00	; 0
    f656:	90 e0       	ldi	r25, 0x00	; 0
    f658:	02 c0       	rjmp	.+4      	; 0xf65e <getcwd+0x44>
    f65a:	8d 2f       	mov	r24, r29
    f65c:	9c 2f       	mov	r25, r28
    f65e:	df 91       	pop	r29
    f660:	cf 91       	pop	r28
    f662:	08 95       	ret

0000f664 <mkdir>:
    f664:	cf 93       	push	r28
    f666:	df 93       	push	r29
    f668:	ec 01       	movw	r28, r24
    f66a:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f66e:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f672:	41 15       	cp	r20, r1
    f674:	51 05       	cpc	r21, r1
    f676:	61 05       	cpc	r22, r1
    f678:	71 05       	cpc	r23, r1
    f67a:	41 f4       	brne	.+16     	; 0xf68c <mkdir+0x28>
    f67c:	ce 01       	movw	r24, r28
    f67e:	0e 94 a0 63 	call	0xc740	; 0xc740 <f_mkdir>
    f682:	00 97       	sbiw	r24, 0x00	; 0
    f684:	39 f4       	brne	.+14     	; 0xf694 <mkdir+0x30>
    f686:	80 e0       	ldi	r24, 0x00	; 0
    f688:	90 e0       	ldi	r25, 0x00	; 0
    f68a:	17 c0       	rjmp	.+46     	; 0xf6ba <mkdir+0x56>
    f68c:	9d df       	rcall	.-198    	; 0xf5c8 <chmod>
    f68e:	89 2b       	or	r24, r25
    f690:	a9 f3       	breq	.-22     	; 0xf67c <mkdir+0x18>
    f692:	11 c0       	rjmp	.+34     	; 0xf6b6 <mkdir+0x52>
    f694:	84 31       	cpi	r24, 0x14	; 20
    f696:	91 05       	cpc	r25, r1
    f698:	40 f4       	brcc	.+16     	; 0xf6aa <mkdir+0x46>
    f69a:	fc 01       	movw	r30, r24
    f69c:	ef 50       	subi	r30, 0x0F	; 15
    f69e:	f9 4f       	sbci	r31, 0xF9	; 249
    f6a0:	80 81       	ld	r24, Z
    f6a2:	08 2e       	mov	r0, r24
    f6a4:	00 0c       	add	r0, r0
    f6a6:	99 0b       	sbc	r25, r25
    f6a8:	02 c0       	rjmp	.+4      	; 0xf6ae <mkdir+0x4a>
    f6aa:	83 e2       	ldi	r24, 0x23	; 35
    f6ac:	90 e0       	ldi	r25, 0x00	; 0
    f6ae:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f6b2:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f6b6:	8f ef       	ldi	r24, 0xFF	; 255
    f6b8:	9f ef       	ldi	r25, 0xFF	; 255
    f6ba:	df 91       	pop	r29
    f6bc:	cf 91       	pop	r28
    f6be:	08 95       	ret

0000f6c0 <rename>:
    f6c0:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f6c4:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f6c8:	0e 94 e7 64 	call	0xc9ce	; 0xc9ce <f_rename>
    f6cc:	00 97       	sbiw	r24, 0x00	; 0
    f6ce:	a1 f0       	breq	.+40     	; 0xf6f8 <rename+0x38>
    f6d0:	84 31       	cpi	r24, 0x14	; 20
    f6d2:	91 05       	cpc	r25, r1
    f6d4:	40 f4       	brcc	.+16     	; 0xf6e6 <rename+0x26>
    f6d6:	fc 01       	movw	r30, r24
    f6d8:	ef 50       	subi	r30, 0x0F	; 15
    f6da:	f9 4f       	sbci	r31, 0xF9	; 249
    f6dc:	80 81       	ld	r24, Z
    f6de:	08 2e       	mov	r0, r24
    f6e0:	00 0c       	add	r0, r0
    f6e2:	99 0b       	sbc	r25, r25
    f6e4:	02 c0       	rjmp	.+4      	; 0xf6ea <rename+0x2a>
    f6e6:	83 e2       	ldi	r24, 0x23	; 35
    f6e8:	90 e0       	ldi	r25, 0x00	; 0
    f6ea:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f6ee:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f6f2:	8f ef       	ldi	r24, 0xFF	; 255
    f6f4:	9f ef       	ldi	r25, 0xFF	; 255
    f6f6:	08 95       	ret
    f6f8:	80 e0       	ldi	r24, 0x00	; 0
    f6fa:	90 e0       	ldi	r25, 0x00	; 0
    f6fc:	08 95       	ret

0000f6fe <unlink>:
    f6fe:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    f702:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    f706:	0e 94 f7 62 	call	0xc5ee	; 0xc5ee <f_unlink>
    f70a:	00 97       	sbiw	r24, 0x00	; 0
    f70c:	a1 f0       	breq	.+40     	; 0xf736 <unlink+0x38>
    f70e:	84 31       	cpi	r24, 0x14	; 20
    f710:	91 05       	cpc	r25, r1
    f712:	40 f4       	brcc	.+16     	; 0xf724 <unlink+0x26>
    f714:	fc 01       	movw	r30, r24
    f716:	ef 50       	subi	r30, 0x0F	; 15
    f718:	f9 4f       	sbci	r31, 0xF9	; 249
    f71a:	80 81       	ld	r24, Z
    f71c:	08 2e       	mov	r0, r24
    f71e:	00 0c       	add	r0, r0
    f720:	99 0b       	sbc	r25, r25
    f722:	02 c0       	rjmp	.+4      	; 0xf728 <unlink+0x2a>
    f724:	83 e2       	ldi	r24, 0x23	; 35
    f726:	90 e0       	ldi	r25, 0x00	; 0
    f728:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f72c:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f730:	8f ef       	ldi	r24, 0xFF	; 255
    f732:	9f ef       	ldi	r25, 0xFF	; 255
    f734:	08 95       	ret
    f736:	80 e0       	ldi	r24, 0x00	; 0
    f738:	90 e0       	ldi	r25, 0x00	; 0
    f73a:	08 95       	ret

0000f73c <rmdir>:
    f73c:	e0 cf       	rjmp	.-64     	; 0xf6fe <unlink>
    f73e:	08 95       	ret

0000f740 <closedir>:
    f740:	0e 94 6f 61 	call	0xc2de	; 0xc2de <f_closedir>
    f744:	00 97       	sbiw	r24, 0x00	; 0
    f746:	a1 f0       	breq	.+40     	; 0xf770 <closedir+0x30>
    f748:	84 31       	cpi	r24, 0x14	; 20
    f74a:	91 05       	cpc	r25, r1
    f74c:	40 f4       	brcc	.+16     	; 0xf75e <closedir+0x1e>
    f74e:	fc 01       	movw	r30, r24
    f750:	ef 50       	subi	r30, 0x0F	; 15
    f752:	f9 4f       	sbci	r31, 0xF9	; 249
    f754:	80 81       	ld	r24, Z
    f756:	08 2e       	mov	r0, r24
    f758:	00 0c       	add	r0, r0
    f75a:	99 0b       	sbc	r25, r25
    f75c:	02 c0       	rjmp	.+4      	; 0xf762 <closedir+0x22>
    f75e:	83 e2       	ldi	r24, 0x23	; 35
    f760:	90 e0       	ldi	r25, 0x00	; 0
    f762:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f766:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f76a:	8f ef       	ldi	r24, 0xFF	; 255
    f76c:	9f ef       	ldi	r25, 0xFF	; 255
    f76e:	08 95       	ret
    f770:	80 e0       	ldi	r24, 0x00	; 0
    f772:	90 e0       	ldi	r25, 0x00	; 0
    f774:	08 95       	ret

0000f776 <opendir>:
    f776:	bc 01       	movw	r22, r24
    f778:	80 ef       	ldi	r24, 0xF0	; 240
    f77a:	98 e1       	ldi	r25, 0x18	; 24
    f77c:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <f_opendir>
    f780:	00 97       	sbiw	r24, 0x00	; 0
    f782:	a1 f0       	breq	.+40     	; 0xf7ac <opendir+0x36>
    f784:	84 31       	cpi	r24, 0x14	; 20
    f786:	91 05       	cpc	r25, r1
    f788:	40 f4       	brcc	.+16     	; 0xf79a <opendir+0x24>
    f78a:	fc 01       	movw	r30, r24
    f78c:	ef 50       	subi	r30, 0x0F	; 15
    f78e:	f9 4f       	sbci	r31, 0xF9	; 249
    f790:	80 81       	ld	r24, Z
    f792:	08 2e       	mov	r0, r24
    f794:	00 0c       	add	r0, r0
    f796:	99 0b       	sbc	r25, r25
    f798:	02 c0       	rjmp	.+4      	; 0xf79e <opendir+0x28>
    f79a:	83 e2       	ldi	r24, 0x23	; 35
    f79c:	90 e0       	ldi	r25, 0x00	; 0
    f79e:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f7a2:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f7a6:	80 e0       	ldi	r24, 0x00	; 0
    f7a8:	90 e0       	ldi	r25, 0x00	; 0
    f7aa:	08 95       	ret
    f7ac:	80 ef       	ldi	r24, 0xF0	; 240
    f7ae:	98 e1       	ldi	r25, 0x18	; 24
    f7b0:	08 95       	ret

0000f7b2 <readdir>:
    f7b2:	a6 e1       	ldi	r26, 0x16	; 22
    f7b4:	b1 e0       	ldi	r27, 0x01	; 1
    f7b6:	ef ed       	ldi	r30, 0xDF	; 223
    f7b8:	fb e7       	ldi	r31, 0x7B	; 123
    f7ba:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    f7be:	10 92 f1 17 	sts	0x17F1, r1	; 0x8017f1 <_de>
    f7c2:	be 01       	movw	r22, r28
    f7c4:	6f 5f       	subi	r22, 0xFF	; 255
    f7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    f7c8:	0e 94 84 61 	call	0xc308	; 0xc308 <f_readdir>
    f7cc:	00 97       	sbiw	r24, 0x00	; 0
    f7ce:	a1 f0       	breq	.+40     	; 0xf7f8 <readdir+0x46>
    f7d0:	84 31       	cpi	r24, 0x14	; 20
    f7d2:	91 05       	cpc	r25, r1
    f7d4:	40 f4       	brcc	.+16     	; 0xf7e6 <readdir+0x34>
    f7d6:	fc 01       	movw	r30, r24
    f7d8:	ef 50       	subi	r30, 0x0F	; 15
    f7da:	f9 4f       	sbci	r31, 0xF9	; 249
    f7dc:	80 81       	ld	r24, Z
    f7de:	08 2e       	mov	r0, r24
    f7e0:	00 0c       	add	r0, r0
    f7e2:	99 0b       	sbc	r25, r25
    f7e4:	02 c0       	rjmp	.+4      	; 0xf7ea <readdir+0x38>
    f7e6:	83 e2       	ldi	r24, 0x23	; 35
    f7e8:	90 e0       	ldi	r25, 0x00	; 0
    f7ea:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    f7ee:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    f7f2:	80 e0       	ldi	r24, 0x00	; 0
    f7f4:	90 e0       	ldi	r25, 0x00	; 0
    f7f6:	16 c0       	rjmp	.+44     	; 0xf824 <readdir+0x72>
    f7f8:	be 01       	movw	r22, r28
    f7fa:	69 5e       	subi	r22, 0xE9	; 233
    f7fc:	7f 4f       	sbci	r23, 0xFF	; 255
    f7fe:	fb 01       	movw	r30, r22
    f800:	01 90       	ld	r0, Z+
    f802:	00 20       	and	r0, r0
    f804:	e9 f7       	brne	.-6      	; 0xf800 <readdir+0x4e>
    f806:	31 97       	sbiw	r30, 0x01	; 1
    f808:	8f 01       	movw	r16, r30
    f80a:	06 1b       	sub	r16, r22
    f80c:	17 0b       	sbc	r17, r23
    f80e:	a8 01       	movw	r20, r16
    f810:	81 ef       	ldi	r24, 0xF1	; 241
    f812:	97 e1       	ldi	r25, 0x17	; 23
    f814:	0e 94 89 30 	call	0x6112	; 0x6112 <strncpy>
    f818:	f8 01       	movw	r30, r16
    f81a:	ef 50       	subi	r30, 0x0F	; 15
    f81c:	f8 4e       	sbci	r31, 0xE8	; 232
    f81e:	10 82       	st	Z, r1
    f820:	81 ef       	ldi	r24, 0xF1	; 241
    f822:	97 e1       	ldi	r25, 0x17	; 23
    f824:	ca 5e       	subi	r28, 0xEA	; 234
    f826:	de 4f       	sbci	r29, 0xFE	; 254
    f828:	e4 e0       	ldi	r30, 0x04	; 4
    f82a:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000f82e <perror>:
    f82e:	e0 91 78 1c 	lds	r30, 0x1C78	; 0x801c78 <errno>
    f832:	f0 91 79 1c 	lds	r31, 0x1C79	; 0x801c79 <errno+0x1>
    f836:	e3 32       	cpi	r30, 0x23	; 35
    f838:	f1 05       	cpc	r31, r1
    f83a:	38 f4       	brcc	.+14     	; 0xf84a <perror+0x1c>
    f83c:	ee 0f       	add	r30, r30
    f83e:	ff 1f       	adc	r31, r31
    f840:	ee 5c       	subi	r30, 0xCE	; 206
    f842:	fe 4f       	sbci	r31, 0xFE	; 254
    f844:	20 81       	ld	r18, Z
    f846:	31 81       	ldd	r19, Z+1	; 0x01
    f848:	04 c0       	rjmp	.+8      	; 0xf852 <perror+0x24>
    f84a:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <sys_errlist+0x46>
    f84e:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <sys_errlist+0x47>
    f852:	00 97       	sbiw	r24, 0x00	; 0
    f854:	c1 f0       	breq	.+48     	; 0xf886 <perror+0x58>
    f856:	fc 01       	movw	r30, r24
    f858:	40 81       	ld	r20, Z
    f85a:	44 23       	and	r20, r20
    f85c:	a1 f0       	breq	.+40     	; 0xf886 <perror+0x58>
    f85e:	3f 93       	push	r19
    f860:	2f 93       	push	r18
    f862:	9f 93       	push	r25
    f864:	8f 93       	push	r24
    f866:	87 ed       	ldi	r24, 0xD7	; 215
    f868:	9b e0       	ldi	r25, 0x0B	; 11
    f86a:	1f 92       	push	r1
    f86c:	9f 93       	push	r25
    f86e:	8f 93       	push	r24
    f870:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f874:	8d b7       	in	r24, 0x3d	; 61
    f876:	9e b7       	in	r25, 0x3e	; 62
    f878:	07 96       	adiw	r24, 0x07	; 7
    f87a:	0f b6       	in	r0, 0x3f	; 63
    f87c:	f8 94       	cli
    f87e:	9e bf       	out	0x3e, r25	; 62
    f880:	0f be       	out	0x3f, r0	; 63
    f882:	8d bf       	out	0x3d, r24	; 61
    f884:	08 95       	ret
    f886:	3f 93       	push	r19
    f888:	2f 93       	push	r18
    f88a:	83 ed       	ldi	r24, 0xD3	; 211
    f88c:	9b e0       	ldi	r25, 0x0B	; 11
    f88e:	1f 92       	push	r1
    f890:	9f 93       	push	r25
    f892:	8f 93       	push	r24
    f894:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f898:	0f 90       	pop	r0
    f89a:	0f 90       	pop	r0
    f89c:	0f 90       	pop	r0
    f89e:	0f 90       	pop	r0
    f8a0:	0f 90       	pop	r0
    f8a2:	08 95       	ret

0000f8a4 <fdevopen>:
    f8a4:	0f 93       	push	r16
    f8a6:	1f 93       	push	r17
    f8a8:	cf 93       	push	r28
    f8aa:	df 93       	push	r29
    f8ac:	00 97       	sbiw	r24, 0x00	; 0
    f8ae:	31 f4       	brne	.+12     	; 0xf8bc <fdevopen+0x18>
    f8b0:	61 15       	cp	r22, r1
    f8b2:	71 05       	cpc	r23, r1
    f8b4:	19 f4       	brne	.+6      	; 0xf8bc <fdevopen+0x18>
    f8b6:	80 e0       	ldi	r24, 0x00	; 0
    f8b8:	90 e0       	ldi	r25, 0x00	; 0
    f8ba:	3a c0       	rjmp	.+116    	; 0xf930 <fdevopen+0x8c>
    f8bc:	8b 01       	movw	r16, r22
    f8be:	ec 01       	movw	r28, r24
    f8c0:	6e e0       	ldi	r22, 0x0E	; 14
    f8c2:	70 e0       	ldi	r23, 0x00	; 0
    f8c4:	81 e0       	ldi	r24, 0x01	; 1
    f8c6:	90 e0       	ldi	r25, 0x00	; 0
    f8c8:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
    f8cc:	fc 01       	movw	r30, r24
    f8ce:	89 2b       	or	r24, r25
    f8d0:	91 f3       	breq	.-28     	; 0xf8b6 <fdevopen+0x12>
    f8d2:	80 e8       	ldi	r24, 0x80	; 128
    f8d4:	83 83       	std	Z+3, r24	; 0x03
    f8d6:	01 15       	cp	r16, r1
    f8d8:	11 05       	cpc	r17, r1
    f8da:	71 f0       	breq	.+28     	; 0xf8f8 <fdevopen+0x54>
    f8dc:	13 87       	std	Z+11, r17	; 0x0b
    f8de:	02 87       	std	Z+10, r16	; 0x0a
    f8e0:	81 e8       	ldi	r24, 0x81	; 129
    f8e2:	83 83       	std	Z+3, r24	; 0x03
    f8e4:	80 91 7a 1c 	lds	r24, 0x1C7A	; 0x801c7a <__iob>
    f8e8:	90 91 7b 1c 	lds	r25, 0x1C7B	; 0x801c7b <__iob+0x1>
    f8ec:	89 2b       	or	r24, r25
    f8ee:	21 f4       	brne	.+8      	; 0xf8f8 <fdevopen+0x54>
    f8f0:	f0 93 7b 1c 	sts	0x1C7B, r31	; 0x801c7b <__iob+0x1>
    f8f4:	e0 93 7a 1c 	sts	0x1C7A, r30	; 0x801c7a <__iob>
    f8f8:	20 97       	sbiw	r28, 0x00	; 0
    f8fa:	c9 f0       	breq	.+50     	; 0xf92e <fdevopen+0x8a>
    f8fc:	d1 87       	std	Z+9, r29	; 0x09
    f8fe:	c0 87       	std	Z+8, r28	; 0x08
    f900:	83 81       	ldd	r24, Z+3	; 0x03
    f902:	82 60       	ori	r24, 0x02	; 2
    f904:	83 83       	std	Z+3, r24	; 0x03
    f906:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
    f90a:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
    f90e:	89 2b       	or	r24, r25
    f910:	21 f4       	brne	.+8      	; 0xf91a <fdevopen+0x76>
    f912:	f0 93 7d 1c 	sts	0x1C7D, r31	; 0x801c7d <__iob+0x3>
    f916:	e0 93 7c 1c 	sts	0x1C7C, r30	; 0x801c7c <__iob+0x2>
    f91a:	80 91 7e 1c 	lds	r24, 0x1C7E	; 0x801c7e <__iob+0x4>
    f91e:	90 91 7f 1c 	lds	r25, 0x1C7F	; 0x801c7f <__iob+0x5>
    f922:	89 2b       	or	r24, r25
    f924:	21 f4       	brne	.+8      	; 0xf92e <fdevopen+0x8a>
    f926:	f0 93 7f 1c 	sts	0x1C7F, r31	; 0x801c7f <__iob+0x5>
    f92a:	e0 93 7e 1c 	sts	0x1C7E, r30	; 0x801c7e <__iob+0x4>
    f92e:	cf 01       	movw	r24, r30
    f930:	df 91       	pop	r29
    f932:	cf 91       	pop	r28
    f934:	1f 91       	pop	r17
    f936:	0f 91       	pop	r16
    f938:	08 95       	ret

0000f93a <mkfs>:
    f93a:	a9 e3       	ldi	r26, 0x39	; 57
    f93c:	b2 e0       	ldi	r27, 0x02	; 2
    f93e:	e3 ea       	ldi	r30, 0xA3	; 163
    f940:	fc e7       	ldi	r31, 0x7C	; 124
    f942:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
    f946:	6c 01       	movw	r12, r24
    f948:	65 e5       	ldi	r22, 0x55	; 85
    f94a:	78 e0       	ldi	r23, 0x08	; 8
    f94c:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
    f950:	00 97       	sbiw	r24, 0x00	; 0
    f952:	59 f4       	brne	.+22     	; 0xf96a <mkfs+0x30>
    f954:	84 eb       	ldi	r24, 0xB4	; 180
    f956:	9b e0       	ldi	r25, 0x0B	; 11
    f958:	1f 92       	push	r1
    f95a:	9f 93       	push	r25
    f95c:	8f 93       	push	r24
    f95e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    f962:	0f 90       	pop	r0
    f964:	0f 90       	pop	r0
    f966:	0f 90       	pop	r0
    f968:	55 c0       	rjmp	.+170    	; 0xfa14 <mkfs+0xda>
    f96a:	2a e3       	ldi	r18, 0x3A	; 58
    f96c:	c9 5c       	subi	r28, 0xC9	; 201
    f96e:	dd 4f       	sbci	r29, 0xFD	; 253
    f970:	28 83       	st	Y, r18
    f972:	c7 53       	subi	r28, 0x37	; 55
    f974:	d2 40       	sbci	r29, 0x02	; 2
    f976:	c8 5c       	subi	r28, 0xC8	; 200
    f978:	dd 4f       	sbci	r29, 0xFD	; 253
    f97a:	18 82       	st	Y, r1
    f97c:	c8 53       	subi	r28, 0x38	; 56
    f97e:	d2 40       	sbci	r29, 0x02	; 2
    f980:	8c 0d       	add	r24, r12
    f982:	9d 1d       	adc	r25, r13
    f984:	fc 01       	movw	r30, r24
    f986:	31 97       	sbiw	r30, 0x01	; 1
    f988:	80 81       	ld	r24, Z
    f98a:	90 e0       	ldi	r25, 0x00	; 0
    f98c:	0e 94 64 30 	call	0x60c8	; 0x60c8 <tolower>
    f990:	9c 01       	movw	r18, r24
    f992:	21 56       	subi	r18, 0x61	; 97
    f994:	31 09       	sbc	r19, r1
    f996:	2a 30       	cpi	r18, 0x0A	; 10
    f998:	31 05       	cpc	r19, r1
    f99a:	30 f4       	brcc	.+12     	; 0xf9a8 <mkfs+0x6e>
    f99c:	81 56       	subi	r24, 0x61	; 97
    f99e:	ca 5c       	subi	r28, 0xCA	; 202
    f9a0:	dd 4f       	sbci	r29, 0xFD	; 253
    f9a2:	88 83       	st	Y, r24
    f9a4:	c6 53       	subi	r28, 0x36	; 54
    f9a6:	d2 40       	sbci	r29, 0x02	; 2
    f9a8:	c7 5c       	subi	r28, 0xC7	; 199
    f9aa:	dd 4f       	sbci	r29, 0xFD	; 253
    f9ac:	18 82       	st	Y, r1
    f9ae:	c9 53       	subi	r28, 0x39	; 57
    f9b0:	d2 40       	sbci	r29, 0x02	; 2
    f9b2:	40 e0       	ldi	r20, 0x00	; 0
    f9b4:	be 01       	movw	r22, r28
    f9b6:	6a 5c       	subi	r22, 0xCA	; 202
    f9b8:	7d 4f       	sbci	r23, 0xFD	; 253
    f9ba:	ce 01       	movw	r24, r28
    f9bc:	01 96       	adiw	r24, 0x01	; 1
    f9be:	0e 94 db 56 	call	0xadb6	; 0xadb6 <f_mount>
    f9c2:	89 2b       	or	r24, r25
    f9c4:	29 f4       	brne	.+10     	; 0xf9d0 <mkfs+0x96>
    f9c6:	80 e0       	ldi	r24, 0x00	; 0
    f9c8:	90 e0       	ldi	r25, 0x00	; 0
    f9ca:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
    f9ce:	22 c0       	rjmp	.+68     	; 0xfa14 <mkfs+0xda>
    f9d0:	80 e0       	ldi	r24, 0x00	; 0
    f9d2:	94 e0       	ldi	r25, 0x04	; 4
    f9d4:	0e 94 a6 29 	call	0x534c	; 0x534c <safemalloc>
    f9d8:	6c 01       	movw	r12, r24
    f9da:	89 2b       	or	r24, r25
    f9dc:	d9 f0       	breq	.+54     	; 0xfa14 <mkfs+0xda>
    f9de:	e1 2c       	mov	r14, r1
    f9e0:	84 e0       	ldi	r24, 0x04	; 4
    f9e2:	f8 2e       	mov	r15, r24
    f9e4:	86 01       	movw	r16, r12
    f9e6:	20 e0       	ldi	r18, 0x00	; 0
    f9e8:	30 e0       	ldi	r19, 0x00	; 0
    f9ea:	a9 01       	movw	r20, r18
    f9ec:	62 e0       	ldi	r22, 0x02	; 2
    f9ee:	ce 01       	movw	r24, r28
    f9f0:	8a 5c       	subi	r24, 0xCA	; 202
    f9f2:	9d 4f       	sbci	r25, 0xFD	; 253
    f9f4:	0e 94 16 67 	call	0xce2c	; 0xce2c <f_mkfs>
    f9f8:	00 97       	sbiw	r24, 0x00	; 0
    f9fa:	31 f0       	breq	.+12     	; 0xfa08 <mkfs+0xce>
    f9fc:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
    fa00:	c6 01       	movw	r24, r12
    fa02:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    fa06:	06 c0       	rjmp	.+12     	; 0xfa14 <mkfs+0xda>
    fa08:	c6 01       	movw	r24, r12
    fa0a:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    fa0e:	81 e0       	ldi	r24, 0x01	; 1
    fa10:	90 e0       	ldi	r25, 0x00	; 0
    fa12:	02 c0       	rjmp	.+4      	; 0xfa18 <mkfs+0xde>
    fa14:	80 e0       	ldi	r24, 0x00	; 0
    fa16:	90 e0       	ldi	r25, 0x00	; 0
    fa18:	c7 5c       	subi	r28, 0xC7	; 199
    fa1a:	dd 4f       	sbci	r29, 0xFD	; 253
    fa1c:	e8 e0       	ldi	r30, 0x08	; 8
    fa1e:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0000fa22 <fat_time_to_unix>:
    fa22:	a6 e1       	ldi	r26, 0x16	; 22
    fa24:	b0 e0       	ldi	r27, 0x00	; 0
    fa26:	e7 e1       	ldi	r30, 0x17	; 23
    fa28:	fd e7       	ldi	r31, 0x7D	; 125
    fa2a:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
    fa2e:	fe 01       	movw	r30, r28
    fa30:	31 96       	adiw	r30, 0x01	; 1
    fa32:	26 e1       	ldi	r18, 0x16	; 22
    fa34:	df 01       	movw	r26, r30
    fa36:	1d 92       	st	X+, r1
    fa38:	2a 95       	dec	r18
    fa3a:	e9 f7       	brne	.-6      	; 0xfa36 <fat_time_to_unix+0x14>
    fa3c:	9b 01       	movw	r18, r22
    fa3e:	22 0f       	add	r18, r18
    fa40:	33 1f       	adc	r19, r19
    fa42:	2e 73       	andi	r18, 0x3E	; 62
    fa44:	33 27       	eor	r19, r19
    fa46:	3a 83       	std	Y+2, r19	; 0x02
    fa48:	29 83       	std	Y+1, r18	; 0x01
    fa4a:	9b 01       	movw	r18, r22
    fa4c:	55 e0       	ldi	r21, 0x05	; 5
    fa4e:	36 95       	lsr	r19
    fa50:	27 95       	ror	r18
    fa52:	5a 95       	dec	r21
    fa54:	e1 f7       	brne	.-8      	; 0xfa4e <fat_time_to_unix+0x2c>
    fa56:	2f 73       	andi	r18, 0x3F	; 63
    fa58:	33 27       	eor	r19, r19
    fa5a:	3c 83       	std	Y+4, r19	; 0x04
    fa5c:	2b 83       	std	Y+3, r18	; 0x03
    fa5e:	27 2f       	mov	r18, r23
    fa60:	26 95       	lsr	r18
    fa62:	26 95       	lsr	r18
    fa64:	26 95       	lsr	r18
    fa66:	2d 83       	std	Y+5, r18	; 0x05
    fa68:	1e 82       	std	Y+6, r1	; 0x06
    fa6a:	9c 01       	movw	r18, r24
    fa6c:	2f 71       	andi	r18, 0x1F	; 31
    fa6e:	33 27       	eor	r19, r19
    fa70:	38 87       	std	Y+8, r19	; 0x08
    fa72:	2f 83       	std	Y+7, r18	; 0x07
    fa74:	9c 01       	movw	r18, r24
    fa76:	65 e0       	ldi	r22, 0x05	; 5
    fa78:	36 95       	lsr	r19
    fa7a:	27 95       	ror	r18
    fa7c:	6a 95       	dec	r22
    fa7e:	e1 f7       	brne	.-8      	; 0xfa78 <fat_time_to_unix+0x56>
    fa80:	2f 70       	andi	r18, 0x0F	; 15
    fa82:	33 27       	eor	r19, r19
    fa84:	21 50       	subi	r18, 0x01	; 1
    fa86:	31 09       	sbc	r19, r1
    fa88:	3a 87       	std	Y+10, r19	; 0x0a
    fa8a:	29 87       	std	Y+9, r18	; 0x09
    fa8c:	9c 01       	movw	r18, r24
    fa8e:	23 2f       	mov	r18, r19
    fa90:	33 27       	eor	r19, r19
    fa92:	26 95       	lsr	r18
    fa94:	20 5b       	subi	r18, 0xB0	; 176
    fa96:	3f 4f       	sbci	r19, 0xFF	; 255
    fa98:	3c 87       	std	Y+12, r19	; 0x0c
    fa9a:	2b 87       	std	Y+11, r18	; 0x0b
    fa9c:	cf 01       	movw	r24, r30
    fa9e:	0e 94 52 39 	call	0x72a4	; 0x72a4 <timegm>
    faa2:	66 96       	adiw	r28, 0x16	; 22
    faa4:	e2 e0       	ldi	r30, 0x02	; 2
    faa6:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0000faaa <stat>:
    faaa:	a6 e1       	ldi	r26, 0x16	; 22
    faac:	b1 e0       	ldi	r27, 0x01	; 1
    faae:	eb e5       	ldi	r30, 0x5B	; 91
    fab0:	fd e7       	ldi	r31, 0x7D	; 125
    fab2:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
    fab6:	7c 01       	movw	r14, r24
    fab8:	8b 01       	movw	r16, r22
    faba:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    fabe:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    fac2:	69 e0       	ldi	r22, 0x09	; 9
    fac4:	78 e0       	ldi	r23, 0x08	; 8
    fac6:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
    faca:	89 2b       	or	r24, r25
    facc:	39 f0       	breq	.+14     	; 0xfadc <stat+0x32>
    face:	68 e4       	ldi	r22, 0x48	; 72
    fad0:	70 e1       	ldi	r23, 0x10	; 16
    fad2:	c7 01       	movw	r24, r14
    fad4:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
    fad8:	89 2b       	or	r24, r25
    fada:	d1 f4       	brne	.+52     	; 0xfb10 <stat+0x66>
    fadc:	f8 01       	movw	r30, r16
    fade:	14 a2       	std	Z+36, r1	; 0x24
    fae0:	15 a2       	std	Z+37, r1	; 0x25
    fae2:	16 a2       	std	Z+38, r1	; 0x26
    fae4:	17 a2       	std	Z+39, r1	; 0x27
    fae6:	10 a6       	std	Z+40, r1	; 0x28
    fae8:	11 a6       	std	Z+41, r1	; 0x29
    faea:	12 a6       	std	Z+42, r1	; 0x2a
    faec:	13 a6       	std	Z+43, r1	; 0x2b
    faee:	14 a6       	std	Z+44, r1	; 0x2c
    faf0:	15 a6       	std	Z+45, r1	; 0x2d
    faf2:	16 a6       	std	Z+46, r1	; 0x2e
    faf4:	17 a6       	std	Z+47, r1	; 0x2f
    faf6:	11 8a       	std	Z+17, r1	; 0x11
    faf8:	10 8a       	std	Z+16, r1	; 0x10
    fafa:	13 8a       	std	Z+19, r1	; 0x13
    fafc:	12 8a       	std	Z+18, r1	; 0x12
    fafe:	10 8e       	std	Z+24, r1	; 0x18
    fb00:	11 8e       	std	Z+25, r1	; 0x19
    fb02:	12 8e       	std	Z+26, r1	; 0x1a
    fb04:	13 8e       	std	Z+27, r1	; 0x1b
    fb06:	80 e0       	ldi	r24, 0x00	; 0
    fb08:	90 e4       	ldi	r25, 0x40	; 64
    fb0a:	a0 e0       	ldi	r26, 0x00	; 0
    fb0c:	b0 e0       	ldi	r27, 0x00	; 0
    fb0e:	4e c0       	rjmp	.+156    	; 0xfbac <stat+0x102>
    fb10:	be 01       	movw	r22, r28
    fb12:	6f 5f       	subi	r22, 0xFF	; 255
    fb14:	7f 4f       	sbci	r23, 0xFF	; 255
    fb16:	c7 01       	movw	r24, r14
    fb18:	0e 94 ca 61 	call	0xc394	; 0xc394 <f_stat>
    fb1c:	00 97       	sbiw	r24, 0x00	; 0
    fb1e:	a1 f0       	breq	.+40     	; 0xfb48 <stat+0x9e>
    fb20:	84 31       	cpi	r24, 0x14	; 20
    fb22:	91 05       	cpc	r25, r1
    fb24:	40 f4       	brcc	.+16     	; 0xfb36 <stat+0x8c>
    fb26:	fc 01       	movw	r30, r24
    fb28:	ef 50       	subi	r30, 0x0F	; 15
    fb2a:	f9 4f       	sbci	r31, 0xF9	; 249
    fb2c:	80 81       	ld	r24, Z
    fb2e:	08 2e       	mov	r0, r24
    fb30:	00 0c       	add	r0, r0
    fb32:	99 0b       	sbc	r25, r25
    fb34:	02 c0       	rjmp	.+4      	; 0xfb3a <stat+0x90>
    fb36:	83 e2       	ldi	r24, 0x23	; 35
    fb38:	90 e0       	ldi	r25, 0x00	; 0
    fb3a:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    fb3e:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    fb42:	8f ef       	ldi	r24, 0xFF	; 255
    fb44:	9f ef       	ldi	r25, 0xFF	; 255
    fb46:	38 c0       	rjmp	.+112    	; 0xfbb8 <stat+0x10e>
    fb48:	89 81       	ldd	r24, Y+1	; 0x01
    fb4a:	9a 81       	ldd	r25, Y+2	; 0x02
    fb4c:	ab 81       	ldd	r26, Y+3	; 0x03
    fb4e:	bc 81       	ldd	r27, Y+4	; 0x04
    fb50:	f8 01       	movw	r30, r16
    fb52:	80 8f       	std	Z+24, r24	; 0x18
    fb54:	91 8f       	std	Z+25, r25	; 0x19
    fb56:	a2 8f       	std	Z+26, r26	; 0x1a
    fb58:	b3 8f       	std	Z+27, r27	; 0x1b
    fb5a:	6f 81       	ldd	r22, Y+7	; 0x07
    fb5c:	78 85       	ldd	r23, Y+8	; 0x08
    fb5e:	8d 81       	ldd	r24, Y+5	; 0x05
    fb60:	9e 81       	ldd	r25, Y+6	; 0x06
    fb62:	5f df       	rcall	.-322    	; 0xfa22 <fat_time_to_unix>
    fb64:	f8 01       	movw	r30, r16
    fb66:	64 a3       	std	Z+36, r22	; 0x24
    fb68:	75 a3       	std	Z+37, r23	; 0x25
    fb6a:	86 a3       	std	Z+38, r24	; 0x26
    fb6c:	97 a3       	std	Z+39, r25	; 0x27
    fb6e:	60 a7       	std	Z+40, r22	; 0x28
    fb70:	71 a7       	std	Z+41, r23	; 0x29
    fb72:	82 a7       	std	Z+42, r24	; 0x2a
    fb74:	93 a7       	std	Z+43, r25	; 0x2b
    fb76:	64 a7       	std	Z+44, r22	; 0x2c
    fb78:	75 a7       	std	Z+45, r23	; 0x2d
    fb7a:	86 a7       	std	Z+46, r24	; 0x2e
    fb7c:	97 a7       	std	Z+47, r25	; 0x2f
    fb7e:	29 85       	ldd	r18, Y+9	; 0x09
    fb80:	20 fd       	sbrc	r18, 0
    fb82:	03 c0       	rjmp	.+6      	; 0xfb8a <stat+0xe0>
    fb84:	8f ef       	ldi	r24, 0xFF	; 255
    fb86:	91 e0       	ldi	r25, 0x01	; 1
    fb88:	02 c0       	rjmp	.+4      	; 0xfb8e <stat+0xe4>
    fb8a:	8d e6       	ldi	r24, 0x6D	; 109
    fb8c:	91 e0       	ldi	r25, 0x01	; 1
    fb8e:	48 ee       	ldi	r20, 0xE8	; 232
    fb90:	53 e0       	ldi	r21, 0x03	; 3
    fb92:	f8 01       	movw	r30, r16
    fb94:	51 8b       	std	Z+17, r21	; 0x11
    fb96:	40 8b       	std	Z+16, r20	; 0x10
    fb98:	53 8b       	std	Z+19, r21	; 0x13
    fb9a:	42 8b       	std	Z+18, r20	; 0x12
    fb9c:	24 ff       	sbrs	r18, 4
    fb9e:	02 c0       	rjmp	.+4      	; 0xfba4 <stat+0xfa>
    fba0:	90 64       	ori	r25, 0x40	; 64
    fba2:	01 c0       	rjmp	.+2      	; 0xfba6 <stat+0xfc>
    fba4:	90 68       	ori	r25, 0x80	; 128
    fba6:	a0 e0       	ldi	r26, 0x00	; 0
    fba8:	b0 e0       	ldi	r27, 0x00	; 0
    fbaa:	f8 01       	movw	r30, r16
    fbac:	80 87       	std	Z+8, r24	; 0x08
    fbae:	91 87       	std	Z+9, r25	; 0x09
    fbb0:	a2 87       	std	Z+10, r26	; 0x0a
    fbb2:	b3 87       	std	Z+11, r27	; 0x0b
    fbb4:	80 e0       	ldi	r24, 0x00	; 0
    fbb6:	90 e0       	ldi	r25, 0x00	; 0
    fbb8:	ca 5e       	subi	r28, 0xEA	; 234
    fbba:	de 4f       	sbci	r29, 0xFE	; 254
    fbbc:	e6 e0       	ldi	r30, 0x06	; 6
    fbbe:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000fbc2 <unix_time_to_fat>:
    fbc2:	a4 e0       	ldi	r26, 0x04	; 4
    fbc4:	b0 e0       	ldi	r27, 0x00	; 0
    fbc6:	e7 ee       	ldi	r30, 0xE7	; 231
    fbc8:	fd e7       	ldi	r31, 0x7D	; 125
    fbca:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
    fbce:	69 83       	std	Y+1, r22	; 0x01
    fbd0:	7a 83       	std	Y+2, r23	; 0x02
    fbd2:	8b 83       	std	Y+3, r24	; 0x03
    fbd4:	9c 83       	std	Y+4, r25	; 0x04
    fbd6:	7a 01       	movw	r14, r20
    fbd8:	89 01       	movw	r16, r18
    fbda:	ce 01       	movw	r24, r28
    fbdc:	01 96       	adiw	r24, 0x01	; 1
    fbde:	0e 94 92 36 	call	0x6d24	; 0x6d24 <gmtime>
    fbe2:	fc 01       	movw	r30, r24
    fbe4:	22 85       	ldd	r18, Z+10	; 0x0a
    fbe6:	33 85       	ldd	r19, Z+11	; 0x0b
    fbe8:	20 55       	subi	r18, 0x50	; 80
    fbea:	31 09       	sbc	r19, r1
    fbec:	c9 01       	movw	r24, r18
    fbee:	98 2f       	mov	r25, r24
    fbf0:	88 27       	eor	r24, r24
    fbf2:	99 0f       	add	r25, r25
    fbf4:	20 85       	ldd	r18, Z+8	; 0x08
    fbf6:	31 85       	ldd	r19, Z+9	; 0x09
    fbf8:	2f 5f       	subi	r18, 0xFF	; 255
    fbfa:	3f 4f       	sbci	r19, 0xFF	; 255
    fbfc:	45 e0       	ldi	r20, 0x05	; 5
    fbfe:	22 0f       	add	r18, r18
    fc00:	33 1f       	adc	r19, r19
    fc02:	4a 95       	dec	r20
    fc04:	e1 f7       	brne	.-8      	; 0xfbfe <unix_time_to_fat+0x3c>
    fc06:	28 2b       	or	r18, r24
    fc08:	39 2b       	or	r19, r25
    fc0a:	86 81       	ldd	r24, Z+6	; 0x06
    fc0c:	97 81       	ldd	r25, Z+7	; 0x07
    fc0e:	28 2b       	or	r18, r24
    fc10:	39 2b       	or	r19, r25
    fc12:	d7 01       	movw	r26, r14
    fc14:	2d 93       	st	X+, r18
    fc16:	3c 93       	st	X, r19
    fc18:	84 81       	ldd	r24, Z+4	; 0x04
    fc1a:	20 e0       	ldi	r18, 0x00	; 0
    fc1c:	30 e0       	ldi	r19, 0x00	; 0
    fc1e:	38 2f       	mov	r19, r24
    fc20:	33 0f       	add	r19, r19
    fc22:	33 0f       	add	r19, r19
    fc24:	33 0f       	add	r19, r19
    fc26:	82 81       	ldd	r24, Z+2	; 0x02
    fc28:	93 81       	ldd	r25, Z+3	; 0x03
    fc2a:	55 e0       	ldi	r21, 0x05	; 5
    fc2c:	88 0f       	add	r24, r24
    fc2e:	99 1f       	adc	r25, r25
    fc30:	5a 95       	dec	r21
    fc32:	e1 f7       	brne	.-8      	; 0xfc2c <unix_time_to_fat+0x6a>
    fc34:	82 2b       	or	r24, r18
    fc36:	93 2b       	or	r25, r19
    fc38:	20 81       	ld	r18, Z
    fc3a:	31 81       	ldd	r19, Z+1	; 0x01
    fc3c:	36 95       	lsr	r19
    fc3e:	27 95       	ror	r18
    fc40:	82 2b       	or	r24, r18
    fc42:	93 2b       	or	r25, r19
    fc44:	f8 01       	movw	r30, r16
    fc46:	91 83       	std	Z+1, r25	; 0x01
    fc48:	80 83       	st	Z, r24
    fc4a:	24 96       	adiw	r28, 0x04	; 4
    fc4c:	e6 e0       	ldi	r30, 0x06	; 6
    fc4e:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0000fc52 <utime>:
    fc52:	aa e1       	ldi	r26, 0x1A	; 26
    fc54:	b1 e0       	ldi	r27, 0x01	; 1
    fc56:	ef e2       	ldi	r30, 0x2F	; 47
    fc58:	fe e7       	ldi	r31, 0x7E	; 126
    fc5a:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
    fc5e:	8c 01       	movw	r16, r24
    fc60:	61 15       	cp	r22, r1
    fc62:	71 05       	cpc	r23, r1
    fc64:	31 f0       	breq	.+12     	; 0xfc72 <utime+0x20>
    fc66:	fb 01       	movw	r30, r22
    fc68:	64 81       	ldd	r22, Z+4	; 0x04
    fc6a:	75 81       	ldd	r23, Z+5	; 0x05
    fc6c:	86 81       	ldd	r24, Z+6	; 0x06
    fc6e:	97 81       	ldd	r25, Z+7	; 0x07
    fc70:	04 c0       	rjmp	.+8      	; 0xfc7a <utime+0x28>
    fc72:	80 e0       	ldi	r24, 0x00	; 0
    fc74:	90 e0       	ldi	r25, 0x00	; 0
    fc76:	0e 94 ed 36 	call	0x6dda	; 0x6dda <time>
    fc7a:	9e 01       	movw	r18, r28
    fc7c:	29 5e       	subi	r18, 0xE9	; 233
    fc7e:	3e 4f       	sbci	r19, 0xFE	; 254
    fc80:	ae 01       	movw	r20, r28
    fc82:	47 5e       	subi	r20, 0xE7	; 231
    fc84:	5e 4f       	sbci	r21, 0xFE	; 254
    fc86:	9d df       	rcall	.-198    	; 0xfbc2 <unix_time_to_fat>
    fc88:	c7 5e       	subi	r28, 0xE7	; 231
    fc8a:	de 4f       	sbci	r29, 0xFE	; 254
    fc8c:	88 81       	ld	r24, Y
    fc8e:	99 81       	ldd	r25, Y+1	; 0x01
    fc90:	c9 51       	subi	r28, 0x19	; 25
    fc92:	d1 40       	sbci	r29, 0x01	; 1
    fc94:	9e 83       	std	Y+6, r25	; 0x06
    fc96:	8d 83       	std	Y+5, r24	; 0x05
    fc98:	c9 5e       	subi	r28, 0xE9	; 233
    fc9a:	de 4f       	sbci	r29, 0xFE	; 254
    fc9c:	88 81       	ld	r24, Y
    fc9e:	99 81       	ldd	r25, Y+1	; 0x01
    fca0:	c7 51       	subi	r28, 0x17	; 23
    fca2:	d1 40       	sbci	r29, 0x01	; 1
    fca4:	98 87       	std	Y+8, r25	; 0x08
    fca6:	8f 83       	std	Y+7, r24	; 0x07
    fca8:	be 01       	movw	r22, r28
    fcaa:	6f 5f       	subi	r22, 0xFF	; 255
    fcac:	7f 4f       	sbci	r23, 0xFF	; 255
    fcae:	c8 01       	movw	r24, r16
    fcb0:	0e 94 43 66 	call	0xcc86	; 0xcc86 <f_utime>
    fcb4:	84 31       	cpi	r24, 0x14	; 20
    fcb6:	91 05       	cpc	r25, r1
    fcb8:	40 f4       	brcc	.+16     	; 0xfcca <utime+0x78>
    fcba:	fc 01       	movw	r30, r24
    fcbc:	ef 50       	subi	r30, 0x0F	; 15
    fcbe:	f9 4f       	sbci	r31, 0xF9	; 249
    fcc0:	80 81       	ld	r24, Z
    fcc2:	08 2e       	mov	r0, r24
    fcc4:	00 0c       	add	r0, r0
    fcc6:	99 0b       	sbc	r25, r25
    fcc8:	02 c0       	rjmp	.+4      	; 0xfcce <utime+0x7c>
    fcca:	83 e2       	ldi	r24, 0x23	; 35
    fccc:	90 e0       	ldi	r25, 0x00	; 0
    fcce:	c6 5e       	subi	r28, 0xE6	; 230
    fcd0:	de 4f       	sbci	r29, 0xFE	; 254
    fcd2:	e4 e0       	ldi	r30, 0x04	; 4
    fcd4:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0000fcd8 <fileno_to_fatfs>:
    fcd8:	83 30       	cpi	r24, 0x03	; 3
    fcda:	91 05       	cpc	r25, r1
    fcdc:	48 f4       	brcc	.+18     	; 0xfcf0 <fileno_to_fatfs+0x18>
    fcde:	89 e0       	ldi	r24, 0x09	; 9
    fce0:	90 e0       	ldi	r25, 0x00	; 0
    fce2:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    fce6:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    fcea:	80 e0       	ldi	r24, 0x00	; 0
    fcec:	90 e0       	ldi	r25, 0x00	; 0
    fcee:	08 95       	ret
    fcf0:	57 db       	rcall	.-2386   	; 0xf3a0 <fileno_to_stream>
    fcf2:	00 97       	sbiw	r24, 0x00	; 0
    fcf4:	d1 f3       	breq	.-12     	; 0xfcea <fileno_to_fatfs+0x12>
    fcf6:	fc 01       	movw	r30, r24
    fcf8:	84 85       	ldd	r24, Z+12	; 0x0c
    fcfa:	95 85       	ldd	r25, Z+13	; 0x0d
    fcfc:	00 97       	sbiw	r24, 0x00	; 0
    fcfe:	79 f3       	breq	.-34     	; 0xfcde <fileno_to_fatfs+0x6>
    fd00:	08 95       	ret

0000fd02 <ftell>:
    fd02:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    fd06:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    fd0a:	2e db       	rcall	.-2468   	; 0xf368 <fileno>
    fd0c:	83 30       	cpi	r24, 0x03	; 3
    fd0e:	91 05       	cpc	r25, r1
    fd10:	48 f0       	brcs	.+18     	; 0xfd24 <ftell+0x22>
    fd12:	e2 df       	rcall	.-60     	; 0xfcd8 <fileno_to_fatfs>
    fd14:	00 97       	sbiw	r24, 0x00	; 0
    fd16:	51 f4       	brne	.+20     	; 0xfd2c <ftell+0x2a>
    fd18:	89 e0       	ldi	r24, 0x09	; 9
    fd1a:	90 e0       	ldi	r25, 0x00	; 0
    fd1c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    fd20:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    fd24:	6f ef       	ldi	r22, 0xFF	; 255
    fd26:	7f ef       	ldi	r23, 0xFF	; 255
    fd28:	cb 01       	movw	r24, r22
    fd2a:	08 95       	ret
    fd2c:	fc 01       	movw	r30, r24
    fd2e:	60 89       	ldd	r22, Z+16	; 0x10
    fd30:	71 89       	ldd	r23, Z+17	; 0x11
    fd32:	82 89       	ldd	r24, Z+18	; 0x12
    fd34:	93 89       	ldd	r25, Z+19	; 0x13
    fd36:	08 95       	ret

0000fd38 <lseek>:
    fd38:	a0 e0       	ldi	r26, 0x00	; 0
    fd3a:	b0 e0       	ldi	r27, 0x00	; 0
    fd3c:	e2 ea       	ldi	r30, 0xA2	; 162
    fd3e:	fe e7       	ldi	r31, 0x7E	; 126
    fd40:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    fd44:	5c 01       	movw	r10, r24
    fd46:	6a 01       	movw	r12, r20
    fd48:	7b 01       	movw	r14, r22
    fd4a:	89 01       	movw	r16, r18
    fd4c:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    fd50:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
    fd54:	c1 df       	rcall	.-126    	; 0xfcd8 <fileno_to_fatfs>
    fd56:	ec 01       	movw	r28, r24
    fd58:	89 2b       	or	r24, r25
    fd5a:	19 f4       	brne	.+6      	; 0xfd62 <lseek+0x2a>
    fd5c:	88 e1       	ldi	r24, 0x18	; 24
    fd5e:	90 e0       	ldi	r25, 0x00	; 0
    fd60:	26 c0       	rjmp	.+76     	; 0xfdae <lseek+0x76>
    fd62:	83 e0       	ldi	r24, 0x03	; 3
    fd64:	a8 16       	cp	r10, r24
    fd66:	b1 04       	cpc	r11, r1
    fd68:	d0 f1       	brcs	.+116    	; 0xfdde <lseek+0xa6>
    fd6a:	c5 01       	movw	r24, r10
    fd6c:	19 db       	rcall	.-2510   	; 0xf3a0 <fileno_to_stream>
    fd6e:	fc 01       	movw	r30, r24
    fd70:	93 81       	ldd	r25, Z+3	; 0x03
    fd72:	90 64       	ori	r25, 0x40	; 64
    fd74:	93 83       	std	Z+3, r25	; 0x03
    fd76:	02 30       	cpi	r16, 0x02	; 2
    fd78:	11 05       	cpc	r17, r1
    fd7a:	a9 f5       	brne	.+106    	; 0xfde6 <lseek+0xae>
    fd7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    fd7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    fd80:	ac 85       	ldd	r26, Y+12	; 0x0c
    fd82:	bd 85       	ldd	r27, Y+13	; 0x0d
    fd84:	c8 0e       	add	r12, r24
    fd86:	d9 1e       	adc	r13, r25
    fd88:	ea 1e       	adc	r14, r26
    fd8a:	fb 1e       	adc	r15, r27
    fd8c:	b7 01       	movw	r22, r14
    fd8e:	a6 01       	movw	r20, r12
    fd90:	ce 01       	movw	r24, r28
    fd92:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_lseek>
    fd96:	00 97       	sbiw	r24, 0x00	; 0
    fd98:	79 f0       	breq	.+30     	; 0xfdb8 <lseek+0x80>
    fd9a:	84 31       	cpi	r24, 0x14	; 20
    fd9c:	91 05       	cpc	r25, r1
    fd9e:	58 f5       	brcc	.+86     	; 0xfdf6 <lseek+0xbe>
    fda0:	fc 01       	movw	r30, r24
    fda2:	ef 50       	subi	r30, 0x0F	; 15
    fda4:	f9 4f       	sbci	r31, 0xF9	; 249
    fda6:	80 81       	ld	r24, Z
    fda8:	08 2e       	mov	r0, r24
    fdaa:	00 0c       	add	r0, r0
    fdac:	99 0b       	sbc	r25, r25
    fdae:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
    fdb2:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    fdb6:	13 c0       	rjmp	.+38     	; 0xfdde <lseek+0xa6>
    fdb8:	68 89       	ldd	r22, Y+16	; 0x10
    fdba:	79 89       	ldd	r23, Y+17	; 0x11
    fdbc:	8a 89       	ldd	r24, Y+18	; 0x12
    fdbe:	9b 89       	ldd	r25, Y+19	; 0x13
    fdc0:	c6 16       	cp	r12, r22
    fdc2:	d7 06       	cpc	r13, r23
    fdc4:	e8 06       	cpc	r14, r24
    fdc6:	f9 06       	cpc	r15, r25
    fdc8:	c9 f0       	breq	.+50     	; 0xfdfc <lseek+0xc4>
    fdca:	84 e5       	ldi	r24, 0x54	; 84
    fdcc:	9c e0       	ldi	r25, 0x0C	; 12
    fdce:	1f 92       	push	r1
    fdd0:	9f 93       	push	r25
    fdd2:	8f 93       	push	r24
    fdd4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    fdd8:	0f 90       	pop	r0
    fdda:	0f 90       	pop	r0
    fddc:	0f 90       	pop	r0
    fdde:	6f ef       	ldi	r22, 0xFF	; 255
    fde0:	7f ef       	ldi	r23, 0xFF	; 255
    fde2:	cb 01       	movw	r24, r22
    fde4:	0b c0       	rjmp	.+22     	; 0xfdfc <lseek+0xc4>
    fde6:	01 30       	cpi	r16, 0x01	; 1
    fde8:	11 05       	cpc	r17, r1
    fdea:	81 f6       	brne	.-96     	; 0xfd8c <lseek+0x54>
    fdec:	88 89       	ldd	r24, Y+16	; 0x10
    fdee:	99 89       	ldd	r25, Y+17	; 0x11
    fdf0:	aa 89       	ldd	r26, Y+18	; 0x12
    fdf2:	bb 89       	ldd	r27, Y+19	; 0x13
    fdf4:	c7 cf       	rjmp	.-114    	; 0xfd84 <lseek+0x4c>
    fdf6:	83 e2       	ldi	r24, 0x23	; 35
    fdf8:	90 e0       	ldi	r25, 0x00	; 0
    fdfa:	d9 cf       	rjmp	.-78     	; 0xfdae <lseek+0x76>
    fdfc:	cd b7       	in	r28, 0x3d	; 61
    fdfe:	de b7       	in	r29, 0x3e	; 62
    fe00:	ea e0       	ldi	r30, 0x0A	; 10
    fe02:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0000fe06 <fseek>:
    fe06:	cf 92       	push	r12
    fe08:	df 92       	push	r13
    fe0a:	ef 92       	push	r14
    fe0c:	ff 92       	push	r15
    fe0e:	cf 93       	push	r28
    fe10:	df 93       	push	r29
    fe12:	6a 01       	movw	r12, r20
    fe14:	7b 01       	movw	r14, r22
    fe16:	e9 01       	movw	r28, r18
    fe18:	a7 da       	rcall	.-2738   	; 0xf368 <fileno>
    fe1a:	97 fd       	sbrc	r25, 7
    fe1c:	12 c0       	rjmp	.+36     	; 0xfe42 <fseek+0x3c>
    fe1e:	9e 01       	movw	r18, r28
    fe20:	b7 01       	movw	r22, r14
    fe22:	a6 01       	movw	r20, r12
    fe24:	89 df       	rcall	.-238    	; 0xfd38 <lseek>
    fe26:	21 e0       	ldi	r18, 0x01	; 1
    fe28:	30 e0       	ldi	r19, 0x00	; 0
    fe2a:	6f 3f       	cpi	r22, 0xFF	; 255
    fe2c:	7f 4f       	sbci	r23, 0xFF	; 255
    fe2e:	8f 4f       	sbci	r24, 0xFF	; 255
    fe30:	9f 4f       	sbci	r25, 0xFF	; 255
    fe32:	11 f0       	breq	.+4      	; 0xfe38 <fseek+0x32>
    fe34:	20 e0       	ldi	r18, 0x00	; 0
    fe36:	30 e0       	ldi	r19, 0x00	; 0
    fe38:	88 27       	eor	r24, r24
    fe3a:	99 27       	eor	r25, r25
    fe3c:	82 1b       	sub	r24, r18
    fe3e:	93 0b       	sbc	r25, r19
    fe40:	02 c0       	rjmp	.+4      	; 0xfe46 <fseek+0x40>
    fe42:	8f ef       	ldi	r24, 0xFF	; 255
    fe44:	9f ef       	ldi	r25, 0xFF	; 255
    fe46:	df 91       	pop	r29
    fe48:	cf 91       	pop	r28
    fe4a:	ff 90       	pop	r15
    fe4c:	ef 90       	pop	r14
    fe4e:	df 90       	pop	r13
    fe50:	cf 90       	pop	r12
    fe52:	08 95       	ret

0000fe54 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    fe54:	a2 e0       	ldi	r26, 0x02	; 2
    fe56:	b0 e0       	ldi	r27, 0x00	; 0
    fe58:	e0 e3       	ldi	r30, 0x30	; 48
    fe5a:	ff e7       	ldi	r31, 0x7F	; 127
    fe5c:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
    fe60:	5c 01       	movw	r10, r24
    fe62:	8b 01       	movw	r16, r22
    fe64:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    fe66:	fb 01       	movw	r30, r22
    fe68:	10 82       	st	Z, r1

    errno = 0;
    fe6a:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    fe6e:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    fe72:	96 da       	rcall	.-2772   	; 0xf3a0 <fileno_to_stream>
    if(stream == stdin)
    fe74:	7c 01       	movw	r14, r24
    fe76:	80 91 7a 1c 	lds	r24, 0x1C7A	; 0x801c7a <__iob>
    fe7a:	90 91 7b 1c 	lds	r25, 0x1C7B	; 0x801c7b <__iob+0x1>
    fe7e:	e8 16       	cp	r14, r24
    fe80:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    fe82:	c9 f4       	brne	.+50     	; 0xfeb6 <read+0x62>
    fe84:	f7 01       	movw	r30, r14
    fe86:	83 81       	ldd	r24, Z+3	; 0x03
    fe88:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    fe8a:	83 83       	std	Z+3, r24	; 0x03
    fe8c:	1a 82       	std	Y+2, r1	; 0x02
    fe8e:	19 82       	std	Y+1, r1	; 0x01
    fe90:	c0 0e       	add	r12, r16
        while(count--)
    fe92:	d1 1e       	adc	r13, r17
    fe94:	0c 15       	cp	r16, r12
    fe96:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    fe98:	09 f4       	brne	.+2      	; 0xfe9c <read+0x48>
    fe9a:	3d c0       	rjmp	.+122    	; 0xff16 <__DATA_REGION_LENGTH__+0x16>
            if(ret < 0)
    fe9c:	c7 01       	movw	r24, r14
    fe9e:	4a d9       	rcall	.-3436   	; 0xf134 <fgetc>
                break;
            
            *ptr++ = ret;
    fea0:	97 fd       	sbrc	r25, 7
    fea2:	39 c0       	rjmp	.+114    	; 0xff16 <__DATA_REGION_LENGTH__+0x16>
    fea4:	f8 01       	movw	r30, r16
            ++size;
    fea6:	81 93       	st	Z+, r24
    fea8:	8f 01       	movw	r16, r30
    feaa:	89 81       	ldd	r24, Y+1	; 0x01
    feac:	9a 81       	ldd	r25, Y+2	; 0x02
    feae:	01 96       	adiw	r24, 0x01	; 1
    feb0:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    feb2:	89 83       	std	Y+1, r24	; 0x01
    feb4:	ef cf       	rjmp	.-34     	; 0xfe94 <read+0x40>
    feb6:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
    feba:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
    febe:	e8 16       	cp	r14, r24
    fec0:	f9 06       	cpc	r15, r25
    fec2:	71 f1       	breq	.+92     	; 0xff20 <__DATA_REGION_LENGTH__+0x20>
    fec4:	80 91 7e 1c 	lds	r24, 0x1C7E	; 0x801c7e <__iob+0x4>
    fec8:	90 91 7f 1c 	lds	r25, 0x1C7F	; 0x801c7f <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fecc:	e8 16       	cp	r14, r24
    fece:	f9 06       	cpc	r15, r25
    if ( fh == NULL )
    fed0:	39 f1       	breq	.+78     	; 0xff20 <__DATA_REGION_LENGTH__+0x20>
    fed2:	c5 01       	movw	r24, r10
    {
        errno = EBADF;
    fed4:	01 df       	rcall	.-510    	; 0xfcd8 <fileno_to_fatfs>
    fed6:	00 97       	sbiw	r24, 0x00	; 0
    fed8:	19 f4       	brne	.+6      	; 0xfee0 <read+0x8c>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    feda:	89 e0       	ldi	r24, 0x09	; 9
    fedc:	90 e0       	ldi	r25, 0x00	; 0
    fede:	16 c0       	rjmp	.+44     	; 0xff0c <__DATA_REGION_LENGTH__+0xc>
    fee0:	9e 01       	movw	r18, r28
    fee2:	2f 5f       	subi	r18, 0xFF	; 255
    fee4:	3f 4f       	sbci	r19, 0xFF	; 255
    fee6:	a6 01       	movw	r20, r12
    if(res != FR_OK)
    fee8:	b8 01       	movw	r22, r16
    feea:	0e 94 15 59 	call	0xb22a	; 0xb22a <f_read>
    feee:	00 97       	sbiw	r24, 0x00	; 0
    fef0:	91 f0       	breq	.+36     	; 0xff16 <__DATA_REGION_LENGTH__+0x16>
    fef2:	84 31       	cpi	r24, 0x14	; 20
    fef4:	91 05       	cpc	r25, r1
    fef6:	40 f4       	brcc	.+16     	; 0xff08 <__DATA_REGION_LENGTH__+0x8>
    fef8:	fc 01       	movw	r30, r24
    fefa:	ef 50       	subi	r30, 0x0F	; 15
    fefc:	f9 4f       	sbci	r31, 0xF9	; 249
    fefe:	80 81       	ld	r24, Z
    ff00:	08 2e       	mov	r0, r24
    ff02:	00 0c       	add	r0, r0
    ff04:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    ff06:	02 c0       	rjmp	.+4      	; 0xff0c <__DATA_REGION_LENGTH__+0xc>
    ff08:	83 e2       	ldi	r24, 0x23	; 35
    ff0a:	90 e0       	ldi	r25, 0x00	; 0
    ff0c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
        return(-1);
    }
    return ((ssize_t) size);
    ff10:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    ff14:	05 c0       	rjmp	.+10     	; 0xff20 <__DATA_REGION_LENGTH__+0x20>
    ff16:	69 81       	ldd	r22, Y+1	; 0x01
    ff18:	7a 81       	ldd	r23, Y+2	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    ff1a:	80 e0       	ldi	r24, 0x00	; 0
    ff1c:	90 e0       	ldi	r25, 0x00	; 0
    ff1e:	03 c0       	rjmp	.+6      	; 0xff26 <__DATA_REGION_LENGTH__+0x26>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    ff20:	6f ef       	ldi	r22, 0xFF	; 255
    ff22:	7f ef       	ldi	r23, 0xFF	; 255
    ff24:	cb 01       	movw	r24, r22
    ff26:	22 96       	adiw	r28, 0x02	; 2
    ff28:	ea e0       	ldi	r30, 0x0A	; 10
    ff2a:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0000ff2e <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    ff2e:	0f 93       	push	r16
    ff30:	1f 93       	push	r17
    ff32:	cf 93       	push	r28
    ff34:	df 93       	push	r29
    ff36:	ec 01       	movw	r28, r24
    ff38:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    ff3a:	64 9f       	mul	r22, r20
    ff3c:	80 01       	movw	r16, r0
    ff3e:	65 9f       	mul	r22, r21
    ff40:	10 0d       	add	r17, r0
    ff42:	74 9f       	mul	r23, r20
    ff44:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    ff46:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    ff48:	0f da       	rcall	.-3042   	; 0xf368 <fileno>
    ff4a:	a8 01       	movw	r20, r16
    ff4c:	be 01       	movw	r22, r28
    if(ret < 0)
    ff4e:	82 df       	rcall	.-252    	; 0xfe54 <read>
    ff50:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    ff52:	02 c0       	rjmp	.+4      	; 0xff58 <fread+0x2a>
    ff54:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    ff56:	02 c0       	rjmp	.+4      	; 0xff5c <fread+0x2e>
    ff58:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    ff5a:	90 e0       	ldi	r25, 0x00	; 0
    ff5c:	df 91       	pop	r29
    ff5e:	cf 91       	pop	r28
    ff60:	1f 91       	pop	r17
    ff62:	0f 91       	pop	r16
    ff64:	08 95       	ret

0000ff66 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    ff66:	cf 93       	push	r28
    ff68:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    ff6a:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
    ff6e:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    ff72:	83 30       	cpi	r24, 0x03	; 3
    ff74:	91 05       	cpc	r25, r1
    ff76:	18 f4       	brcc	.+6      	; 0xff7e <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    ff78:	89 e0       	ldi	r24, 0x09	; 9
    ff7a:	90 e0       	ldi	r25, 0x00	; 0
    ff7c:	18 c0       	rjmp	.+48     	; 0xffae <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    ff7e:	ec 01       	movw	r28, r24
    ff80:	0f da       	rcall	.-3042   	; 0xf3a0 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    ff82:	fc 01       	movw	r30, r24
    ff84:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    ff86:	90 64       	ori	r25, 0x40	; 64
    ff88:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    ff8a:	ce 01       	movw	r24, r28
    ff8c:	a5 de       	rcall	.-694    	; 0xfcd8 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    ff8e:	00 97       	sbiw	r24, 0x00	; 0
    ff90:	99 f3       	breq	.-26     	; 0xff78 <syncfs+0x12>
    if (res != FR_OK)
    ff92:	0e 94 f7 5b 	call	0xb7ee	; 0xb7ee <f_sync>
    ff96:	00 97       	sbiw	r24, 0x00	; 0
    ff98:	a1 f0       	breq	.+40     	; 0xffc2 <syncfs+0x5c>
    ff9a:	84 31       	cpi	r24, 0x14	; 20
    ff9c:	91 05       	cpc	r25, r1
    ff9e:	70 f4       	brcc	.+28     	; 0xffbc <syncfs+0x56>
    ffa0:	fc 01       	movw	r30, r24
    ffa2:	ef 50       	subi	r30, 0x0F	; 15
    ffa4:	f9 4f       	sbci	r31, 0xF9	; 249
    ffa6:	80 81       	ld	r24, Z
    ffa8:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    ffaa:	00 0c       	add	r0, r0
    ffac:	99 0b       	sbc	r25, r25
    ffae:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
        return(-1);
    ffb2:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
    ffb6:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    ffb8:	9f ef       	ldi	r25, 0xFF	; 255
    ffba:	05 c0       	rjmp	.+10     	; 0xffc6 <syncfs+0x60>
    ffbc:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    ffbe:	90 e0       	ldi	r25, 0x00	; 0
    ffc0:	f6 cf       	rjmp	.-20     	; 0xffae <syncfs+0x48>
}
    ffc2:	80 e0       	ldi	r24, 0x00	; 0
    ffc4:	90 e0       	ldi	r25, 0x00	; 0
    ffc6:	df 91       	pop	r29
    ffc8:	cf 91       	pop	r28
    ffca:	08 95       	ret

0000ffcc <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    ffcc:	cf 93       	push	r28
    ffce:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    ffd0:	c0 e0       	ldi	r28, 0x00	; 0
    ffd2:	d0 e0       	ldi	r29, 0x00	; 0
    ffd4:	21 96       	adiw	r28, 0x01	; 1
    ffd6:	c0 31       	cpi	r28, 0x10	; 16
    ffd8:	d1 05       	cpc	r29, r1
    ffda:	51 f0       	breq	.+20     	; 0xfff0 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    ffdc:	c3 30       	cpi	r28, 0x03	; 3
    ffde:	d1 05       	cpc	r29, r1
    ffe0:	cc f3       	brlt	.-14     	; 0xffd4 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    ffe2:	ce 01       	movw	r24, r28
    ffe4:	79 de       	rcall	.-782    	; 0xfcd8 <fileno_to_fatfs>
        if(fh == NULL)
    ffe6:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    ffe8:	a9 f3       	breq	.-22     	; 0xffd4 <sync+0x8>
    ffea:	ce 01       	movw	r24, r28
    ffec:	bc df       	rcall	.-136    	; 0xff66 <syncfs>
    }
}
    ffee:	f2 cf       	rjmp	.-28     	; 0xffd4 <sync+0x8>
    fff0:	df 91       	pop	r29
    fff2:	cf 91       	pop	r28
    fff4:	08 95       	ret

0000fff6 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    fff6:	a2 e0       	ldi	r26, 0x02	; 2
    fff8:	b0 e0       	ldi	r27, 0x00	; 0
    fffa:	e1 e0       	ldi	r30, 0x01	; 1
    fffc:	f0 e8       	ldi	r31, 0x80	; 128
    fffe:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   10002:	8c 01       	movw	r16, r24
   10004:	b6 2e       	mov	r11, r22
   10006:	f7 2e       	mov	r15, r23
   10008:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
   1000a:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
   1000e:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
   10012:	c6 d9       	rcall	.-3188   	; 0xf3a0 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
   10014:	6c 01       	movw	r12, r24
   10016:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
   1001a:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
   1001e:	c8 16       	cp	r12, r24
   10020:	d9 06       	cpc	r13, r25
   10022:	39 f0       	breq	.+14     	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
   10024:	80 91 7e 1c 	lds	r24, 0x1C7E	; 0x801c7e <__iob+0x4>
   10028:	90 91 7f 1c 	lds	r25, 0x1C7F	; 0x801c7f <__iob+0x5>
   1002c:	c8 16       	cp	r12, r24
   1002e:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
   10030:	d1 f4       	brne	.+52     	; 0x10066 <__EEPROM_REGION_LENGTH__+0x66>
   10032:	1a 82       	std	Y+2, r1	; 0x02
   10034:	19 82       	std	Y+1, r1	; 0x01
   10036:	0b 2d       	mov	r16, r11
   10038:	1f 2d       	mov	r17, r15
   1003a:	78 01       	movw	r14, r16
   1003c:	e8 0c       	add	r14, r8
        while(count--)
   1003e:	f9 1c       	adc	r15, r9
   10040:	0e 15       	cp	r16, r14
   10042:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
   10044:	d1 f1       	breq	.+116    	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   10046:	f8 01       	movw	r30, r16
   10048:	a1 90       	ld	r10, Z+
   1004a:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
   1004c:	b1 2c       	mov	r11, r1
   1004e:	b6 01       	movw	r22, r12
   10050:	c5 01       	movw	r24, r10
            if(c != ret)
   10052:	c1 d8       	rcall	.-3710   	; 0xf1d6 <fputc>
   10054:	a8 16       	cp	r10, r24
   10056:	b9 06       	cpc	r11, r25
                break;

            ++size;
   10058:	81 f5       	brne	.+96     	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   1005a:	89 81       	ldd	r24, Y+1	; 0x01
   1005c:	9a 81       	ldd	r25, Y+2	; 0x02
   1005e:	01 96       	adiw	r24, 0x01	; 1
   10060:	9a 83       	std	Y+2, r25	; 0x02
   10062:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
   10064:	ed cf       	rjmp	.-38     	; 0x10040 <__EEPROM_REGION_LENGTH__+0x40>
   10066:	80 91 7a 1c 	lds	r24, 0x1C7A	; 0x801c7a <__iob>
   1006a:	90 91 7b 1c 	lds	r25, 0x1C7B	; 0x801c7b <__iob+0x1>
   1006e:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   10070:	d9 06       	cpc	r13, r25
   10072:	41 f1       	breq	.+80     	; 0x100c4 <__EEPROM_REGION_LENGTH__+0xc4>
    if ( fh == NULL )
   10074:	c8 01       	movw	r24, r16
   10076:	30 de       	rcall	.-928    	; 0xfcd8 <fileno_to_fatfs>
    {
        errno = EBADF;
   10078:	00 97       	sbiw	r24, 0x00	; 0
   1007a:	19 f4       	brne	.+6      	; 0x10082 <__EEPROM_REGION_LENGTH__+0x82>
   1007c:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
   1007e:	90 e0       	ldi	r25, 0x00	; 0
   10080:	17 c0       	rjmp	.+46     	; 0x100b0 <__EEPROM_REGION_LENGTH__+0xb0>
   10082:	9e 01       	movw	r18, r28
   10084:	2f 5f       	subi	r18, 0xFF	; 255
   10086:	3f 4f       	sbci	r19, 0xFF	; 255
   10088:	a4 01       	movw	r20, r8
   1008a:	6b 2d       	mov	r22, r11
   1008c:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
   1008e:	0e 94 60 5a 	call	0xb4c0	; 0xb4c0 <f_write>
   10092:	00 97       	sbiw	r24, 0x00	; 0
   10094:	91 f0       	breq	.+36     	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   10096:	84 31       	cpi	r24, 0x14	; 20
   10098:	91 05       	cpc	r25, r1
   1009a:	40 f4       	brcc	.+16     	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
   1009c:	fc 01       	movw	r30, r24
   1009e:	ef 50       	subi	r30, 0x0F	; 15
   100a0:	f9 4f       	sbci	r31, 0xF9	; 249
   100a2:	80 81       	ld	r24, Z
   100a4:	08 2e       	mov	r0, r24
   100a6:	00 0c       	add	r0, r0
   100a8:	99 0b       	sbc	r25, r25
   100aa:	02 c0       	rjmp	.+4      	; 0x100b0 <__EEPROM_REGION_LENGTH__+0xb0>
    {
        errno = fatfs_to_errno(res);
   100ac:	83 e2       	ldi	r24, 0x23	; 35
   100ae:	90 e0       	ldi	r25, 0x00	; 0
   100b0:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   100b4:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
        return(-1);
    }
    return ((ssize_t) size);
   100b8:	05 c0       	rjmp	.+10     	; 0x100c4 <__EEPROM_REGION_LENGTH__+0xc4>
   100ba:	69 81       	ldd	r22, Y+1	; 0x01
   100bc:	7a 81       	ldd	r23, Y+2	; 0x02
   100be:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
   100c0:	90 e0       	ldi	r25, 0x00	; 0
   100c2:	03 c0       	rjmp	.+6      	; 0x100ca <__EEPROM_REGION_LENGTH__+0xca>
   100c4:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
   100c6:	7f ef       	ldi	r23, 0xFF	; 255
   100c8:	cb 01       	movw	r24, r22
   100ca:	22 96       	adiw	r28, 0x02	; 2
   100cc:	ec e0       	ldi	r30, 0x0C	; 12
   100ce:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

000100d2 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   100d2:	0f 93       	push	r16
   100d4:	1f 93       	push	r17
   100d6:	cf 93       	push	r28
   100d8:	df 93       	push	r29
   100da:	ec 01       	movw	r28, r24
   100dc:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   100de:	64 9f       	mul	r22, r20
   100e0:	80 01       	movw	r16, r0
   100e2:	65 9f       	mul	r22, r21
   100e4:	10 0d       	add	r17, r0
   100e6:	74 9f       	mul	r23, r20
   100e8:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   100ea:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   100ec:	3d d9       	rcall	.-3462   	; 0xf368 <fileno>
   100ee:	a8 01       	movw	r20, r16
   100f0:	be 01       	movw	r22, r28

    if(ret < 0)
   100f2:	81 df       	rcall	.-254    	; 0xfff6 <write>
   100f4:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   100f6:	02 c0       	rjmp	.+4      	; 0x100fc <fwrite+0x2a>
   100f8:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   100fa:	02 c0       	rjmp	.+4      	; 0x10100 <fwrite+0x2e>
   100fc:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   100fe:	90 e0       	ldi	r25, 0x00	; 0
   10100:	df 91       	pop	r29
   10102:	cf 91       	pop	r28
   10104:	1f 91       	pop	r17
   10106:	0f 91       	pop	r16
   10108:	08 95       	ret

0001010a <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   1010a:	0f 93       	push	r16
   1010c:	1f 93       	push	r17
   1010e:	cf 93       	push	r28
   10110:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   10112:	83 30       	cpi	r24, 0x03	; 3
   10114:	91 05       	cpc	r25, r1
   10116:	48 f4       	brcc	.+18     	; 0x1012a <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   10118:	89 e0       	ldi	r24, 0x09	; 9
   1011a:	90 e0       	ldi	r25, 0x00	; 0
   1011c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   10120:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
        return(-1);
   10124:	8f ef       	ldi	r24, 0xFF	; 255
   10126:	9f ef       	ldi	r25, 0xFF	; 255
   10128:	20 c0       	rjmp	.+64     	; 0x1016a <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   1012a:	ec 01       	movw	r28, r24
   1012c:	39 d9       	rcall	.-3470   	; 0xf3a0 <fileno_to_stream>
    if(stream == NULL)
   1012e:	8c 01       	movw	r16, r24
   10130:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   10132:	c1 f3       	breq	.-16     	; 0x10124 <free_file_descriptor+0x1a>
   10134:	f8 01       	movw	r30, r16
   10136:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   10138:	95 85       	ldd	r25, Z+13	; 0x0d
   1013a:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   1013c:	11 f0       	breq	.+4      	; 0x10142 <free_file_descriptor+0x38>
   1013e:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   10142:	f8 01       	movw	r30, r16
   10144:	80 81       	ld	r24, Z
   10146:	91 81       	ldd	r25, Z+1	; 0x01
   10148:	00 97       	sbiw	r24, 0x00	; 0
   1014a:	21 f0       	breq	.+8      	; 0x10154 <free_file_descriptor+0x4a>
   1014c:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   1014e:	27 fd       	sbrc	r18, 7
   10150:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    }

    __iob[fileno]  = NULL;
   10154:	fe 01       	movw	r30, r28
   10156:	ee 0f       	add	r30, r30
   10158:	ff 1f       	adc	r31, r31
   1015a:	e6 58       	subi	r30, 0x86	; 134
   1015c:	f3 4e       	sbci	r31, 0xE3	; 227
   1015e:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   10160:	10 82       	st	Z, r1
   10162:	c8 01       	movw	r24, r16
   10164:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    return(fileno);
}
   10168:	ce 01       	movw	r24, r28
   1016a:	df 91       	pop	r29
   1016c:	cf 91       	pop	r28
   1016e:	1f 91       	pop	r17
   10170:	0f 91       	pop	r16
   10172:	08 95       	ret

00010174 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   10174:	0f 93       	push	r16
   10176:	1f 93       	push	r17
   10178:	cf 93       	push	r28
   1017a:	df 93       	push	r29
   1017c:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   1017e:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
   10182:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   10186:	0c d9       	rcall	.-3560   	; 0xf3a0 <fileno_to_stream>
   10188:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   1018a:	d9 f0       	breq	.+54     	; 0x101c2 <close+0x4e>
   1018c:	c8 01       	movw	r24, r16
    if(fh == NULL)
   1018e:	a4 dd       	rcall	.-1208   	; 0xfcd8 <fileno_to_fatfs>
   10190:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   10192:	b9 f0       	breq	.+46     	; 0x101c2 <close+0x4e>
   10194:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <f_close>
    free_file_descriptor(fileno);
   10198:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   1019a:	c8 01       	movw	r24, r16
   1019c:	b6 df       	rcall	.-148    	; 0x1010a <free_file_descriptor>
   1019e:	20 97       	sbiw	r28, 0x00	; 0
   101a0:	99 f0       	breq	.+38     	; 0x101c8 <close+0x54>
   101a2:	c4 31       	cpi	r28, 0x14	; 20
   101a4:	d1 05       	cpc	r29, r1
   101a6:	38 f4       	brcc	.+14     	; 0x101b6 <close+0x42>
   101a8:	cf 50       	subi	r28, 0x0F	; 15
   101aa:	d9 4f       	sbci	r29, 0xF9	; 249
   101ac:	88 81       	ld	r24, Y
   101ae:	08 2e       	mov	r0, r24
   101b0:	00 0c       	add	r0, r0
   101b2:	99 0b       	sbc	r25, r25
   101b4:	02 c0       	rjmp	.+4      	; 0x101ba <close+0x46>
    {
        errno = fatfs_to_errno(res);
   101b6:	83 e2       	ldi	r24, 0x23	; 35
   101b8:	90 e0       	ldi	r25, 0x00	; 0
   101ba:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
        return(-1);
   101be:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
   101c2:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   101c4:	9f ef       	ldi	r25, 0xFF	; 255
   101c6:	02 c0       	rjmp	.+4      	; 0x101cc <close+0x58>
}
   101c8:	80 e0       	ldi	r24, 0x00	; 0
   101ca:	90 e0       	ldi	r25, 0x00	; 0
   101cc:	df 91       	pop	r29
   101ce:	cf 91       	pop	r28
   101d0:	1f 91       	pop	r17
   101d2:	0f 91       	pop	r16
   101d4:	08 95       	ret

000101d6 <fclose>:
   101d6:	c8 d8       	rcall	.-3696   	; 0xf368 <fileno>
   101d8:	97 fd       	sbrc	r25, 7
   101da:	02 c0       	rjmp	.+4      	; 0x101e0 <fclose+0xa>
   101dc:	cb cf       	rjmp	.-106    	; 0x10174 <close>
   101de:	08 95       	ret
   101e0:	8f ef       	ldi	r24, 0xFF	; 255
   101e2:	9f ef       	ldi	r25, 0xFF	; 255
   101e4:	08 95       	ret

000101e6 <new_file_descriptor>:
   101e6:	0f 93       	push	r16
   101e8:	1f 93       	push	r17
   101ea:	cf 93       	push	r28
   101ec:	df 93       	push	r29
   101ee:	ea e7       	ldi	r30, 0x7A	; 122
   101f0:	fc e1       	ldi	r31, 0x1C	; 28
   101f2:	c0 e0       	ldi	r28, 0x00	; 0
   101f4:	d0 e0       	ldi	r29, 0x00	; 0
   101f6:	21 96       	adiw	r28, 0x01	; 1
   101f8:	c0 31       	cpi	r28, 0x10	; 16
   101fa:	d1 05       	cpc	r29, r1
   101fc:	49 f0       	breq	.+18     	; 0x10210 <new_file_descriptor+0x2a>
   101fe:	c3 30       	cpi	r28, 0x03	; 3
   10200:	d1 05       	cpc	r29, r1
   10202:	24 f0       	brlt	.+8      	; 0x1020c <new_file_descriptor+0x26>
   10204:	82 81       	ldd	r24, Z+2	; 0x02
   10206:	93 81       	ldd	r25, Z+3	; 0x03
   10208:	89 2b       	or	r24, r25
   1020a:	59 f0       	breq	.+22     	; 0x10222 <new_file_descriptor+0x3c>
   1020c:	32 96       	adiw	r30, 0x02	; 2
   1020e:	f3 cf       	rjmp	.-26     	; 0x101f6 <new_file_descriptor+0x10>
   10210:	87 e1       	ldi	r24, 0x17	; 23
   10212:	90 e0       	ldi	r25, 0x00	; 0
   10214:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   10218:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
   1021c:	8f ef       	ldi	r24, 0xFF	; 255
   1021e:	9f ef       	ldi	r25, 0xFF	; 255
   10220:	22 c0       	rjmp	.+68     	; 0x10266 <new_file_descriptor+0x80>
   10222:	61 e0       	ldi	r22, 0x01	; 1
   10224:	70 e0       	ldi	r23, 0x00	; 0
   10226:	8e e0       	ldi	r24, 0x0E	; 14
   10228:	90 e0       	ldi	r25, 0x00	; 0
   1022a:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   1022e:	8c 01       	movw	r16, r24
   10230:	89 2b       	or	r24, r25
   10232:	59 f0       	breq	.+22     	; 0x1024a <new_file_descriptor+0x64>
   10234:	61 e0       	ldi	r22, 0x01	; 1
   10236:	70 e0       	ldi	r23, 0x00	; 0
   10238:	84 e2       	ldi	r24, 0x24	; 36
   1023a:	92 e0       	ldi	r25, 0x02	; 2
   1023c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   10240:	00 97       	sbiw	r24, 0x00	; 0
   10242:	31 f4       	brne	.+12     	; 0x10250 <new_file_descriptor+0x6a>
   10244:	c8 01       	movw	r24, r16
   10246:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   1024a:	8c e0       	ldi	r24, 0x0C	; 12
   1024c:	90 e0       	ldi	r25, 0x00	; 0
   1024e:	e2 cf       	rjmp	.-60     	; 0x10214 <new_file_descriptor+0x2e>
   10250:	fe 01       	movw	r30, r28
   10252:	ee 0f       	add	r30, r30
   10254:	ff 1f       	adc	r31, r31
   10256:	e6 58       	subi	r30, 0x86	; 134
   10258:	f3 4e       	sbci	r31, 0xE3	; 227
   1025a:	11 83       	std	Z+1, r17	; 0x01
   1025c:	00 83       	st	Z, r16
   1025e:	f8 01       	movw	r30, r16
   10260:	95 87       	std	Z+13, r25	; 0x0d
   10262:	84 87       	std	Z+12, r24	; 0x0c
   10264:	ce 01       	movw	r24, r28
   10266:	df 91       	pop	r29
   10268:	cf 91       	pop	r28
   1026a:	1f 91       	pop	r17
   1026c:	0f 91       	pop	r16
   1026e:	08 95       	ret

00010270 <open>:
   10270:	a0 e0       	ldi	r26, 0x00	; 0
   10272:	b0 e0       	ldi	r27, 0x00	; 0
   10274:	ee e3       	ldi	r30, 0x3E	; 62
   10276:	f1 e8       	ldi	r31, 0x81	; 129
   10278:	0c 94 3f e9 	jmp	0x1d27e	; 0x1d27e <__prologue_saves__+0x8>
   1027c:	5c 01       	movw	r10, r24
   1027e:	6b 01       	movw	r12, r22
   10280:	10 92 79 1c 	sts	0x1C79, r1	; 0x801c79 <errno+0x1>
   10284:	10 92 78 1c 	sts	0x1C78, r1	; 0x801c78 <errno>
   10288:	7b 01       	movw	r14, r22
   1028a:	83 e0       	ldi	r24, 0x03	; 3
   1028c:	e8 22       	and	r14, r24
   1028e:	ff 24       	eor	r15, r15
   10290:	e2 e0       	ldi	r30, 0x02	; 2
   10292:	ee 16       	cp	r14, r30
   10294:	f1 04       	cpc	r15, r1
   10296:	31 f0       	breq	.+12     	; 0x102a4 <open+0x34>
   10298:	e1 14       	cp	r14, r1
   1029a:	f1 04       	cpc	r15, r1
   1029c:	31 f0       	breq	.+12     	; 0x102aa <open+0x3a>
   1029e:	02 e0       	ldi	r16, 0x02	; 2
   102a0:	10 e0       	ldi	r17, 0x00	; 0
   102a2:	05 c0       	rjmp	.+10     	; 0x102ae <open+0x3e>
   102a4:	03 e0       	ldi	r16, 0x03	; 3
   102a6:	10 e0       	ldi	r17, 0x00	; 0
   102a8:	02 c0       	rjmp	.+4      	; 0x102ae <open+0x3e>
   102aa:	01 e0       	ldi	r16, 0x01	; 1
   102ac:	10 e0       	ldi	r17, 0x00	; 0
   102ae:	c6 fe       	sbrs	r12, 6
   102b0:	05 c0       	rjmp	.+10     	; 0x102bc <open+0x4c>
   102b2:	d1 fe       	sbrs	r13, 1
   102b4:	02 c0       	rjmp	.+4      	; 0x102ba <open+0x4a>
   102b6:	08 60       	ori	r16, 0x08	; 8
   102b8:	01 c0       	rjmp	.+2      	; 0x102bc <open+0x4c>
   102ba:	00 61       	ori	r16, 0x10	; 16
   102bc:	94 df       	rcall	.-216    	; 0x101e6 <new_file_descriptor>
   102be:	3c 01       	movw	r6, r24
   102c0:	6f d8       	rcall	.-3874   	; 0xf3a0 <fileno_to_stream>
   102c2:	ec 01       	movw	r28, r24
   102c4:	c3 01       	movw	r24, r6
   102c6:	20 97       	sbiw	r28, 0x00	; 0
   102c8:	09 f4       	brne	.+2      	; 0x102cc <open+0x5c>
   102ca:	48 c0       	rjmp	.+144    	; 0x1035c <open+0xec>
   102cc:	05 dd       	rcall	.-1526   	; 0xfcd8 <fileno_to_fatfs>
   102ce:	4c 01       	movw	r8, r24
   102d0:	00 97       	sbiw	r24, 0x00	; 0
   102d2:	59 f4       	brne	.+22     	; 0x102ea <open+0x7a>
   102d4:	c3 01       	movw	r24, r6
   102d6:	19 df       	rcall	.-462    	; 0x1010a <free_file_descriptor>
   102d8:	89 e0       	ldi	r24, 0x09	; 9
   102da:	90 e0       	ldi	r25, 0x00	; 0
   102dc:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   102e0:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
   102e4:	8f ef       	ldi	r24, 0xFF	; 255
   102e6:	9f ef       	ldi	r25, 0xFF	; 255
   102e8:	5d c0       	rjmp	.+186    	; 0x103a4 <open+0x134>
   102ea:	40 2f       	mov	r20, r16
   102ec:	b5 01       	movw	r22, r10
   102ee:	0e 94 19 57 	call	0xae32	; 0xae32 <f_open>
   102f2:	00 97       	sbiw	r24, 0x00	; 0
   102f4:	91 f0       	breq	.+36     	; 0x1031a <open+0xaa>
   102f6:	84 31       	cpi	r24, 0x14	; 20
   102f8:	91 05       	cpc	r25, r1
   102fa:	40 f4       	brcc	.+16     	; 0x1030c <open+0x9c>
   102fc:	fc 01       	movw	r30, r24
   102fe:	ef 50       	subi	r30, 0x0F	; 15
   10300:	f9 4f       	sbci	r31, 0xF9	; 249
   10302:	80 81       	ld	r24, Z
   10304:	08 2e       	mov	r0, r24
   10306:	00 0c       	add	r0, r0
   10308:	99 0b       	sbc	r25, r25
   1030a:	02 c0       	rjmp	.+4      	; 0x10310 <open+0xa0>
   1030c:	83 e2       	ldi	r24, 0x23	; 35
   1030e:	90 e0       	ldi	r25, 0x00	; 0
   10310:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   10314:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
   10318:	20 c0       	rjmp	.+64     	; 0x1035a <open+0xea>
   1031a:	d2 fe       	sbrs	r13, 2
   1031c:	21 c0       	rjmp	.+66     	; 0x10360 <open+0xf0>
   1031e:	f4 01       	movw	r30, r8
   10320:	42 85       	ldd	r20, Z+10	; 0x0a
   10322:	53 85       	ldd	r21, Z+11	; 0x0b
   10324:	64 85       	ldd	r22, Z+12	; 0x0c
   10326:	75 85       	ldd	r23, Z+13	; 0x0d
   10328:	c4 01       	movw	r24, r8
   1032a:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_lseek>
   1032e:	00 97       	sbiw	r24, 0x00	; 0
   10330:	b9 f0       	breq	.+46     	; 0x10360 <open+0xf0>
   10332:	84 31       	cpi	r24, 0x14	; 20
   10334:	91 05       	cpc	r25, r1
   10336:	40 f4       	brcc	.+16     	; 0x10348 <open+0xd8>
   10338:	fc 01       	movw	r30, r24
   1033a:	ef 50       	subi	r30, 0x0F	; 15
   1033c:	f9 4f       	sbci	r31, 0xF9	; 249
   1033e:	80 81       	ld	r24, Z
   10340:	08 2e       	mov	r0, r24
   10342:	00 0c       	add	r0, r0
   10344:	99 0b       	sbc	r25, r25
   10346:	02 c0       	rjmp	.+4      	; 0x1034c <open+0xdc>
   10348:	83 e2       	ldi	r24, 0x23	; 35
   1034a:	90 e0       	ldi	r25, 0x00	; 0
   1034c:	90 93 79 1c 	sts	0x1C79, r25	; 0x801c79 <errno+0x1>
   10350:	80 93 78 1c 	sts	0x1C78, r24	; 0x801c78 <errno>
   10354:	c4 01       	movw	r24, r8
   10356:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <f_close>
   1035a:	c3 01       	movw	r24, r6
   1035c:	d6 de       	rcall	.-596    	; 0x1010a <free_file_descriptor>
   1035e:	c2 cf       	rjmp	.-124    	; 0x102e4 <open+0x74>
   10360:	f2 e0       	ldi	r31, 0x02	; 2
   10362:	ef 16       	cp	r14, r31
   10364:	f1 04       	cpc	r15, r1
   10366:	51 f4       	brne	.+20     	; 0x1037c <open+0x10c>
   10368:	8f e4       	ldi	r24, 0x4F	; 79
   1036a:	98 e7       	ldi	r25, 0x78	; 120
   1036c:	99 87       	std	Y+9, r25	; 0x09
   1036e:	88 87       	std	Y+8, r24	; 0x08
   10370:	8c ec       	ldi	r24, 0xCC	; 204
   10372:	97 e7       	ldi	r25, 0x77	; 119
   10374:	9b 87       	std	Y+11, r25	; 0x0b
   10376:	8a 87       	std	Y+10, r24	; 0x0a
   10378:	83 e0       	ldi	r24, 0x03	; 3
   1037a:	12 c0       	rjmp	.+36     	; 0x103a0 <open+0x130>
   1037c:	e1 14       	cp	r14, r1
   1037e:	f1 04       	cpc	r15, r1
   10380:	41 f4       	brne	.+16     	; 0x10392 <open+0x122>
   10382:	19 86       	std	Y+9, r1	; 0x09
   10384:	18 86       	std	Y+8, r1	; 0x08
   10386:	8c ec       	ldi	r24, 0xCC	; 204
   10388:	97 e7       	ldi	r25, 0x77	; 119
   1038a:	9b 87       	std	Y+11, r25	; 0x0b
   1038c:	8a 87       	std	Y+10, r24	; 0x0a
   1038e:	81 e0       	ldi	r24, 0x01	; 1
   10390:	07 c0       	rjmp	.+14     	; 0x103a0 <open+0x130>
   10392:	8f e4       	ldi	r24, 0x4F	; 79
   10394:	98 e7       	ldi	r25, 0x78	; 120
   10396:	99 87       	std	Y+9, r25	; 0x09
   10398:	88 87       	std	Y+8, r24	; 0x08
   1039a:	1b 86       	std	Y+11, r1	; 0x0b
   1039c:	1a 86       	std	Y+10, r1	; 0x0a
   1039e:	82 e0       	ldi	r24, 0x02	; 2
   103a0:	8b 83       	std	Y+3, r24	; 0x03
   103a2:	c3 01       	movw	r24, r6
   103a4:	cd b7       	in	r28, 0x3d	; 61
   103a6:	de b7       	in	r29, 0x3e	; 62
   103a8:	ee e0       	ldi	r30, 0x0E	; 14
   103aa:	0c 94 5b e9 	jmp	0x1d2b6	; 0x1d2b6 <__epilogue_restores__+0x8>

000103ae <posix_fopen_modes_to_open>:
   103ae:	cf 93       	push	r28
   103b0:	df 93       	push	r29
   103b2:	ec 01       	movw	r28, r24
   103b4:	68 e1       	ldi	r22, 0x18	; 24
   103b6:	77 e0       	ldi	r23, 0x07	; 7
   103b8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   103bc:	00 97       	sbiw	r24, 0x00	; 0
   103be:	09 f4       	brne	.+2      	; 0x103c2 <posix_fopen_modes_to_open+0x14>
   103c0:	5d c0       	rjmp	.+186    	; 0x1047c <posix_fopen_modes_to_open+0xce>
   103c2:	6d e5       	ldi	r22, 0x5D	; 93
   103c4:	78 e0       	ldi	r23, 0x08	; 8
   103c6:	ce 01       	movw	r24, r28
   103c8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   103cc:	00 97       	sbiw	r24, 0x00	; 0
   103ce:	09 f4       	brne	.+2      	; 0x103d2 <posix_fopen_modes_to_open+0x24>
   103d0:	55 c0       	rjmp	.+170    	; 0x1047c <posix_fopen_modes_to_open+0xce>
   103d2:	60 e6       	ldi	r22, 0x60	; 96
   103d4:	78 e0       	ldi	r23, 0x08	; 8
   103d6:	ce 01       	movw	r24, r28
   103d8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   103dc:	89 2b       	or	r24, r25
   103de:	09 f4       	brne	.+2      	; 0x103e2 <posix_fopen_modes_to_open+0x34>
   103e0:	42 c0       	rjmp	.+132    	; 0x10466 <posix_fopen_modes_to_open+0xb8>
   103e2:	63 e6       	ldi	r22, 0x63	; 99
   103e4:	78 e0       	ldi	r23, 0x08	; 8
   103e6:	ce 01       	movw	r24, r28
   103e8:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   103ec:	89 2b       	or	r24, r25
   103ee:	d9 f1       	breq	.+118    	; 0x10466 <posix_fopen_modes_to_open+0xb8>
   103f0:	67 e6       	ldi	r22, 0x67	; 103
   103f2:	78 e0       	ldi	r23, 0x08	; 8
   103f4:	ce 01       	movw	r24, r28
   103f6:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   103fa:	89 2b       	or	r24, r25
   103fc:	a1 f1       	breq	.+104    	; 0x10466 <posix_fopen_modes_to_open+0xb8>
   103fe:	6c e1       	ldi	r22, 0x1C	; 28
   10400:	7a e0       	ldi	r23, 0x0A	; 10
   10402:	ce 01       	movw	r24, r28
   10404:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   10408:	89 2b       	or	r24, r25
   1040a:	81 f1       	breq	.+96     	; 0x1046c <posix_fopen_modes_to_open+0xbe>
   1040c:	6b e6       	ldi	r22, 0x6B	; 107
   1040e:	78 e0       	ldi	r23, 0x08	; 8
   10410:	ce 01       	movw	r24, r28
   10412:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   10416:	89 2b       	or	r24, r25
   10418:	49 f1       	breq	.+82     	; 0x1046c <posix_fopen_modes_to_open+0xbe>
   1041a:	6e e6       	ldi	r22, 0x6E	; 110
   1041c:	78 e0       	ldi	r23, 0x08	; 8
   1041e:	ce 01       	movw	r24, r28
   10420:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   10424:	89 2b       	or	r24, r25
   10426:	29 f1       	breq	.+74     	; 0x10472 <posix_fopen_modes_to_open+0xc4>
   10428:	61 e7       	ldi	r22, 0x71	; 113
   1042a:	78 e0       	ldi	r23, 0x08	; 8
   1042c:	ce 01       	movw	r24, r28
   1042e:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   10432:	89 2b       	or	r24, r25
   10434:	f1 f0       	breq	.+60     	; 0x10472 <posix_fopen_modes_to_open+0xc4>
   10436:	65 e7       	ldi	r22, 0x75	; 117
   10438:	78 e0       	ldi	r23, 0x08	; 8
   1043a:	ce 01       	movw	r24, r28
   1043c:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   10440:	89 2b       	or	r24, r25
   10442:	b9 f0       	breq	.+46     	; 0x10472 <posix_fopen_modes_to_open+0xc4>
   10444:	69 e7       	ldi	r22, 0x79	; 121
   10446:	70 e1       	ldi	r23, 0x10	; 16
   10448:	ce 01       	movw	r24, r28
   1044a:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   1044e:	89 2b       	or	r24, r25
   10450:	99 f0       	breq	.+38     	; 0x10478 <posix_fopen_modes_to_open+0xca>
   10452:	69 e7       	ldi	r22, 0x79	; 121
   10454:	78 e0       	ldi	r23, 0x08	; 8
   10456:	ce 01       	movw	r24, r28
   10458:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strcmp>
   1045c:	89 2b       	or	r24, r25
   1045e:	61 f0       	breq	.+24     	; 0x10478 <posix_fopen_modes_to_open+0xca>
   10460:	8f ef       	ldi	r24, 0xFF	; 255
   10462:	9f ef       	ldi	r25, 0xFF	; 255
   10464:	0b c0       	rjmp	.+22     	; 0x1047c <posix_fopen_modes_to_open+0xce>
   10466:	82 e0       	ldi	r24, 0x02	; 2
   10468:	92 e0       	ldi	r25, 0x02	; 2
   1046a:	08 c0       	rjmp	.+16     	; 0x1047c <posix_fopen_modes_to_open+0xce>
   1046c:	81 e4       	ldi	r24, 0x41	; 65
   1046e:	92 e0       	ldi	r25, 0x02	; 2
   10470:	05 c0       	rjmp	.+10     	; 0x1047c <posix_fopen_modes_to_open+0xce>
   10472:	82 e4       	ldi	r24, 0x42	; 66
   10474:	92 e0       	ldi	r25, 0x02	; 2
   10476:	02 c0       	rjmp	.+4      	; 0x1047c <posix_fopen_modes_to_open+0xce>
   10478:	81 e4       	ldi	r24, 0x41	; 65
   1047a:	94 e0       	ldi	r25, 0x04	; 4
   1047c:	df 91       	pop	r29
   1047e:	cf 91       	pop	r28
   10480:	08 95       	ret

00010482 <fopen>:
   10482:	cf 93       	push	r28
   10484:	df 93       	push	r29
   10486:	ec 01       	movw	r28, r24
   10488:	cb 01       	movw	r24, r22
   1048a:	91 df       	rcall	.-222    	; 0x103ae <posix_fopen_modes_to_open>
   1048c:	bc 01       	movw	r22, r24
   1048e:	ce 01       	movw	r24, r28
   10490:	ef de       	rcall	.-546    	; 0x10270 <open>
   10492:	0e 94 d0 79 	call	0xf3a0	; 0xf3a0 <fileno_to_stream>
   10496:	df 91       	pop	r29
   10498:	cf 91       	pop	r28
   1049a:	08 95       	ret

0001049c <fprintf>:
   1049c:	a8 e0       	ldi	r26, 0x08	; 8
   1049e:	b0 e0       	ldi	r27, 0x00	; 0
   104a0:	e4 e5       	ldi	r30, 0x54	; 84
   104a2:	f2 e8       	ldi	r31, 0x82	; 130
   104a4:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   104a8:	88 e3       	ldi	r24, 0x38	; 56
   104aa:	99 e7       	ldi	r25, 0x79	; 121
   104ac:	9a 83       	std	Y+2, r25	; 0x02
   104ae:	89 83       	std	Y+1, r24	; 0x01
   104b0:	18 86       	std	Y+8, r1	; 0x08
   104b2:	1f 82       	std	Y+7, r1	; 0x07
   104b4:	8d 85       	ldd	r24, Y+13	; 0x0d
   104b6:	9e 85       	ldd	r25, Y+14	; 0x0e
   104b8:	9c 83       	std	Y+4, r25	; 0x04
   104ba:	8b 83       	std	Y+3, r24	; 0x03
   104bc:	4f 85       	ldd	r20, Y+15	; 0x0f
   104be:	58 89       	ldd	r21, Y+16	; 0x10
   104c0:	60 e8       	ldi	r22, 0x80	; 128
   104c2:	9e 01       	movw	r18, r28
   104c4:	2f 5e       	subi	r18, 0xEF	; 239
   104c6:	3f 4f       	sbci	r19, 0xFF	; 255
   104c8:	ce 01       	movw	r24, r28
   104ca:	01 96       	adiw	r24, 0x01	; 1
   104cc:	0e 94 c9 40 	call	0x8192	; 0x8192 <_printf_fn>
   104d0:	8f 81       	ldd	r24, Y+7	; 0x07
   104d2:	98 85       	ldd	r25, Y+8	; 0x08
   104d4:	28 96       	adiw	r28, 0x08	; 8
   104d6:	e2 e0       	ldi	r30, 0x02	; 2
   104d8:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000104dc <posix_help>:
   104dc:	cf 93       	push	r28
   104de:	df 93       	push	r29
   104e0:	ec 01       	movw	r28, r24
   104e2:	8f e8       	ldi	r24, 0x8F	; 143
   104e4:	9f e0       	ldi	r25, 0x0F	; 15
   104e6:	1f 92       	push	r1
   104e8:	9f 93       	push	r25
   104ea:	8f 93       	push	r24
   104ec:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   104f0:	0f 90       	pop	r0
   104f2:	0f 90       	pop	r0
   104f4:	0f 90       	pop	r0
   104f6:	cd 2b       	or	r28, r29
   104f8:	51 f0       	breq	.+20     	; 0x1050e <posix_help+0x32>
   104fa:	88 e5       	ldi	r24, 0x58	; 88
   104fc:	9e e0       	ldi	r25, 0x0E	; 14
   104fe:	1f 92       	push	r1
   10500:	9f 93       	push	r25
   10502:	8f 93       	push	r24
   10504:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10508:	0f 90       	pop	r0
   1050a:	0f 90       	pop	r0
   1050c:	0f 90       	pop	r0
   1050e:	df 91       	pop	r29
   10510:	cf 91       	pop	r28
   10512:	08 95       	ret

00010514 <copy>:
   10514:	4f 92       	push	r4
   10516:	5f 92       	push	r5
   10518:	6f 92       	push	r6
   1051a:	8f 92       	push	r8
   1051c:	9f 92       	push	r9
   1051e:	af 92       	push	r10
   10520:	bf 92       	push	r11
   10522:	cf 92       	push	r12
   10524:	df 92       	push	r13
   10526:	ef 92       	push	r14
   10528:	ff 92       	push	r15
   1052a:	0f 93       	push	r16
   1052c:	1f 93       	push	r17
   1052e:	cf 93       	push	r28
   10530:	df 93       	push	r29
   10532:	18 2f       	mov	r17, r24
   10534:	09 2f       	mov	r16, r25
   10536:	eb 01       	movw	r28, r22
   10538:	9f 93       	push	r25
   1053a:	8f 93       	push	r24
   1053c:	8b e2       	ldi	r24, 0x2B	; 43
   1053e:	9e e0       	ldi	r25, 0x0E	; 14
   10540:	1f 92       	push	r1
   10542:	9f 93       	push	r25
   10544:	8f 93       	push	r24
   10546:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1054a:	6d e5       	ldi	r22, 0x5D	; 93
   1054c:	78 e0       	ldi	r23, 0x08	; 8
   1054e:	81 2f       	mov	r24, r17
   10550:	90 2f       	mov	r25, r16
   10552:	97 df       	rcall	.-210    	; 0x10482 <fopen>
   10554:	7c 01       	movw	r14, r24
   10556:	0f 90       	pop	r0
   10558:	0f 90       	pop	r0
   1055a:	0f 90       	pop	r0
   1055c:	0f 90       	pop	r0
   1055e:	0f 90       	pop	r0
   10560:	89 2b       	or	r24, r25
   10562:	51 f4       	brne	.+20     	; 0x10578 <copy+0x64>
   10564:	0f 93       	push	r16
   10566:	1f 93       	push	r17
   10568:	8b e1       	ldi	r24, 0x1B	; 27
   1056a:	9e e0       	ldi	r25, 0x0E	; 14
   1056c:	1f 92       	push	r1
   1056e:	9f 93       	push	r25
   10570:	8f 93       	push	r24
   10572:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10576:	21 c0       	rjmp	.+66     	; 0x105ba <copy+0xa6>
   10578:	df 93       	push	r29
   1057a:	cf 93       	push	r28
   1057c:	8e e0       	ldi	r24, 0x0E	; 14
   1057e:	9e e0       	ldi	r25, 0x0E	; 14
   10580:	1f 92       	push	r1
   10582:	9f 93       	push	r25
   10584:	8f 93       	push	r24
   10586:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1058a:	6b e6       	ldi	r22, 0x6B	; 107
   1058c:	78 e0       	ldi	r23, 0x08	; 8
   1058e:	ce 01       	movw	r24, r28
   10590:	78 df       	rcall	.-272    	; 0x10482 <fopen>
   10592:	8c 01       	movw	r16, r24
   10594:	0f 90       	pop	r0
   10596:	0f 90       	pop	r0
   10598:	0f 90       	pop	r0
   1059a:	0f 90       	pop	r0
   1059c:	0f 90       	pop	r0
   1059e:	89 2b       	or	r24, r25
   105a0:	b1 f4       	brne	.+44     	; 0x105ce <copy+0xba>
   105a2:	df 93       	push	r29
   105a4:	cf 93       	push	r28
   105a6:	8e ef       	ldi	r24, 0xFE	; 254
   105a8:	9d e0       	ldi	r25, 0x0D	; 13
   105aa:	1f 92       	push	r1
   105ac:	9f 93       	push	r25
   105ae:	8f 93       	push	r24
   105b0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   105b4:	80 e0       	ldi	r24, 0x00	; 0
   105b6:	90 e0       	ldi	r25, 0x00	; 0
   105b8:	0e de       	rcall	.-996    	; 0x101d6 <fclose>
   105ba:	0f 90       	pop	r0
   105bc:	0f 90       	pop	r0
   105be:	0f 90       	pop	r0
   105c0:	0f 90       	pop	r0
   105c2:	0f 90       	pop	r0
   105c4:	60 e0       	ldi	r22, 0x00	; 0
   105c6:	70 e0       	ldi	r23, 0x00	; 0
   105c8:	80 e0       	ldi	r24, 0x00	; 0
   105ca:	90 e0       	ldi	r25, 0x00	; 0
   105cc:	73 c0       	rjmp	.+230    	; 0x106b4 <copy+0x1a0>
   105ce:	61 e0       	ldi	r22, 0x01	; 1
   105d0:	70 e0       	ldi	r23, 0x00	; 0
   105d2:	80 e0       	ldi	r24, 0x00	; 0
   105d4:	92 e0       	ldi	r25, 0x02	; 2
   105d6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   105da:	6c 01       	movw	r12, r24
   105dc:	89 2b       	or	r24, r25
   105de:	29 f4       	brne	.+10     	; 0x105ea <copy+0xd6>
   105e0:	c7 01       	movw	r24, r14
   105e2:	f9 dd       	rcall	.-1038   	; 0x101d6 <fclose>
   105e4:	c8 01       	movw	r24, r16
   105e6:	f7 dd       	rcall	.-1042   	; 0x101d6 <fclose>
   105e8:	ed cf       	rjmp	.-38     	; 0x105c4 <copy+0xb0>
   105ea:	81 ef       	ldi	r24, 0xF1	; 241
   105ec:	9d e0       	ldi	r25, 0x0D	; 13
   105ee:	1f 92       	push	r1
   105f0:	9f 93       	push	r25
   105f2:	8f 93       	push	r24
   105f4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   105f8:	0f 90       	pop	r0
   105fa:	0f 90       	pop	r0
   105fc:	0f 90       	pop	r0
   105fe:	81 2c       	mov	r8, r1
   10600:	91 2c       	mov	r9, r1
   10602:	54 01       	movw	r10, r8
   10604:	85 ed       	ldi	r24, 0xD5	; 213
   10606:	9d e0       	ldi	r25, 0x0D	; 13
   10608:	2c 01       	movw	r4, r24
   1060a:	97 01       	movw	r18, r14
   1060c:	40 e0       	ldi	r20, 0x00	; 0
   1060e:	52 e0       	ldi	r21, 0x02	; 2
   10610:	61 e0       	ldi	r22, 0x01	; 1
   10612:	70 e0       	ldi	r23, 0x00	; 0
   10614:	c6 01       	movw	r24, r12
   10616:	8b dc       	rcall	.-1770   	; 0xff2e <fread>
   10618:	ec 01       	movw	r28, r24
   1061a:	18 16       	cp	r1, r24
   1061c:	19 06       	cpc	r1, r25
   1061e:	74 f5       	brge	.+92     	; 0x1067c <copy+0x168>
   10620:	98 01       	movw	r18, r16
   10622:	ae 01       	movw	r20, r28
   10624:	61 e0       	ldi	r22, 0x01	; 1
   10626:	70 e0       	ldi	r23, 0x00	; 0
   10628:	c6 01       	movw	r24, r12
   1062a:	53 dd       	rcall	.-1370   	; 0x100d2 <fwrite>
   1062c:	8c 17       	cp	r24, r28
   1062e:	9d 07       	cpc	r25, r29
   10630:	5c f4       	brge	.+22     	; 0x10648 <copy+0x134>
   10632:	84 ee       	ldi	r24, 0xE4	; 228
   10634:	9d e0       	ldi	r25, 0x0D	; 13
   10636:	1f 92       	push	r1
   10638:	9f 93       	push	r25
   1063a:	8f 93       	push	r24
   1063c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10640:	0f 90       	pop	r0
   10642:	0f 90       	pop	r0
   10644:	0f 90       	pop	r0
   10646:	1a c0       	rjmp	.+52     	; 0x1067c <copy+0x168>
   10648:	ce 01       	movw	r24, r28
   1064a:	dd 0f       	add	r29, r29
   1064c:	aa 0b       	sbc	r26, r26
   1064e:	bb 0b       	sbc	r27, r27
   10650:	88 0e       	add	r8, r24
   10652:	99 1e       	adc	r9, r25
   10654:	aa 1e       	adc	r10, r26
   10656:	bb 1e       	adc	r11, r27
   10658:	bf 92       	push	r11
   1065a:	af 92       	push	r10
   1065c:	9f 92       	push	r9
   1065e:	8f 92       	push	r8
   10660:	1f 92       	push	r1
   10662:	5f 92       	push	r5
   10664:	4f 92       	push	r4
   10666:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1066a:	8d b7       	in	r24, 0x3d	; 61
   1066c:	9e b7       	in	r25, 0x3e	; 62
   1066e:	07 96       	adiw	r24, 0x07	; 7
   10670:	0f b6       	in	r0, 0x3f	; 63
   10672:	f8 94       	cli
   10674:	9e bf       	out	0x3e, r25	; 62
   10676:	0f be       	out	0x3f, r0	; 63
   10678:	8d bf       	out	0x3d, r24	; 61
   1067a:	c7 cf       	rjmp	.-114    	; 0x1060a <copy+0xf6>
   1067c:	bf 92       	push	r11
   1067e:	af 92       	push	r10
   10680:	9f 92       	push	r9
   10682:	8f 92       	push	r8
   10684:	82 ec       	ldi	r24, 0xC2	; 194
   10686:	9d e0       	ldi	r25, 0x0D	; 13
   10688:	1f 92       	push	r1
   1068a:	9f 93       	push	r25
   1068c:	8f 93       	push	r24
   1068e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10692:	c6 01       	movw	r24, r12
   10694:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   10698:	c7 01       	movw	r24, r14
   1069a:	9d dd       	rcall	.-1222   	; 0x101d6 <fclose>
   1069c:	c8 01       	movw	r24, r16
   1069e:	9b dd       	rcall	.-1226   	; 0x101d6 <fclose>
   106a0:	8d b7       	in	r24, 0x3d	; 61
   106a2:	9e b7       	in	r25, 0x3e	; 62
   106a4:	07 96       	adiw	r24, 0x07	; 7
   106a6:	0f b6       	in	r0, 0x3f	; 63
   106a8:	f8 94       	cli
   106aa:	9e bf       	out	0x3e, r25	; 62
   106ac:	0f be       	out	0x3f, r0	; 63
   106ae:	8d bf       	out	0x3d, r24	; 61
   106b0:	b4 01       	movw	r22, r8
   106b2:	c5 01       	movw	r24, r10
   106b4:	df 91       	pop	r29
   106b6:	cf 91       	pop	r28
   106b8:	1f 91       	pop	r17
   106ba:	0f 91       	pop	r16
   106bc:	ff 90       	pop	r15
   106be:	ef 90       	pop	r14
   106c0:	df 90       	pop	r13
   106c2:	cf 90       	pop	r12
   106c4:	bf 90       	pop	r11
   106c6:	af 90       	pop	r10
   106c8:	9f 90       	pop	r9
   106ca:	8f 90       	pop	r8
   106cc:	6f 90       	pop	r6
   106ce:	5f 90       	pop	r5
   106d0:	4f 90       	pop	r4
   106d2:	08 95       	ret

000106d4 <testpage>:
   106d4:	cf 93       	push	r28
   106d6:	df 93       	push	r29
   106d8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <_pagesize>
   106dc:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <_pagesize+0x1>
   106e0:	82 17       	cp	r24, r18
   106e2:	93 07       	cpc	r25, r19
   106e4:	3c f1       	brlt	.+78     	; 0x10734 <testpage+0x60>
   106e6:	81 e9       	ldi	r24, 0x91	; 145
   106e8:	9d e0       	ldi	r25, 0x0D	; 13
   106ea:	1f 92       	push	r1
   106ec:	9f 93       	push	r25
   106ee:	8f 93       	push	r24
   106f0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   106f4:	0e 94 45 79 	call	0xf28a	; 0xf28a <getchar>
   106f8:	ec 01       	movw	r28, r24
   106fa:	8f e8       	ldi	r24, 0x8F	; 143
   106fc:	9d e0       	ldi	r25, 0x0D	; 13
   106fe:	1f 92       	push	r1
   10700:	9f 93       	push	r25
   10702:	8f 93       	push	r24
   10704:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10708:	0f 90       	pop	r0
   1070a:	0f 90       	pop	r0
   1070c:	0f 90       	pop	r0
   1070e:	0f 90       	pop	r0
   10710:	0f 90       	pop	r0
   10712:	0f 90       	pop	r0
   10714:	c1 37       	cpi	r28, 0x71	; 113
   10716:	d1 05       	cpc	r29, r1
   10718:	41 f0       	breq	.+16     	; 0x1072a <testpage+0x56>
   1071a:	2a 97       	sbiw	r28, 0x0a	; 10
   1071c:	49 f4       	brne	.+18     	; 0x10730 <testpage+0x5c>
   1071e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <_pagesize>
   10722:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <_pagesize+0x1>
   10726:	01 97       	sbiw	r24, 0x01	; 1
   10728:	05 c0       	rjmp	.+10     	; 0x10734 <testpage+0x60>
   1072a:	8f ef       	ldi	r24, 0xFF	; 255
   1072c:	9f ef       	ldi	r25, 0xFF	; 255
   1072e:	02 c0       	rjmp	.+4      	; 0x10734 <testpage+0x60>
   10730:	80 e0       	ldi	r24, 0x00	; 0
   10732:	90 e0       	ldi	r25, 0x00	; 0
   10734:	df 91       	pop	r29
   10736:	cf 91       	pop	r28
   10738:	08 95       	ret

0001073a <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   1073a:	a0 e0       	ldi	r26, 0x00	; 0
   1073c:	b1 e0       	ldi	r27, 0x01	; 1
   1073e:	e3 ea       	ldi	r30, 0xA3	; 163
   10740:	f3 e8       	ldi	r31, 0x83	; 131
   10742:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   10746:	18 2f       	mov	r17, r24
   10748:	09 2f       	mov	r16, r25
   1074a:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1074c:	6d e5       	ldi	r22, 0x5D	; 93
   1074e:	78 e0       	ldi	r23, 0x08	; 8
   10750:	98 de       	rcall	.-720    	; 0x10482 <fopen>
   10752:	7c 01       	movw	r14, r24
    if (!fp)
   10754:	89 2b       	or	r24, r25
   10756:	41 f0       	breq	.+16     	; 0x10768 <cat+0x2e>
   10758:	c1 2c       	mov	r12, r1
   1075a:	d1 2c       	mov	r13, r1
   1075c:	a1 2c       	mov	r10, r1
   1075e:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10760:	8e 01       	movw	r16, r28
   10762:	0f 5f       	subi	r16, 0xFF	; 255
   10764:	1f 4f       	sbci	r17, 0xFF	; 255
   10766:	24 c0       	rjmp	.+72     	; 0x107b0 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10768:	0f 93       	push	r16
   1076a:	1f 93       	push	r17
   1076c:	84 e4       	ldi	r24, 0x44	; 68
   1076e:	9e e0       	ldi	r25, 0x0E	; 14
   10770:	1f 92       	push	r1
   10772:	9f 93       	push	r25
   10774:	8f 93       	push	r24
   10776:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   1077a:	0f 90       	pop	r0
   1077c:	0f 90       	pop	r0
   1077e:	0f 90       	pop	r0
   10780:	0f 90       	pop	r0
   10782:	0f 90       	pop	r0
   10784:	c1 2c       	mov	r12, r1
   10786:	d1 2c       	mov	r13, r1
   10788:	76 01       	movw	r14, r12
   1078a:	3e c0       	rjmp	.+124    	; 0x10808 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   1078c:	c8 01       	movw	r24, r16
   1078e:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <trim_tail>
        size += strlen(line);
   10792:	f8 01       	movw	r30, r16
   10794:	01 90       	ld	r0, Z+
   10796:	00 20       	and	r0, r0
   10798:	e9 f7       	brne	.-6      	; 0x10794 <cat+0x5a>
   1079a:	31 97       	sbiw	r30, 0x01	; 1
   1079c:	e0 1b       	sub	r30, r16
   1079e:	f1 0b       	sbc	r31, r17
   107a0:	ce 0e       	add	r12, r30
   107a2:	df 1e       	adc	r13, r31
        puts(line);
   107a4:	c8 01       	movw	r24, r16
   107a6:	0e 94 9d 79 	call	0xf33a	; 0xf33a <puts>
        if(dopage)
   107aa:	81 14       	cp	r8, r1
   107ac:	91 04       	cpc	r9, r1
   107ae:	49 f4       	brne	.+18     	; 0x107c2 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   107b0:	a7 01       	movw	r20, r14
   107b2:	6e ef       	ldi	r22, 0xFE	; 254
   107b4:	70 e0       	ldi	r23, 0x00	; 0
   107b6:	c8 01       	movw	r24, r16
   107b8:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
   107bc:	89 2b       	or	r24, r25
   107be:	31 f7       	brne	.-52     	; 0x1078c <cat+0x52>
   107c0:	06 c0       	rjmp	.+12     	; 0x107ce <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   107c2:	c5 01       	movw	r24, r10
   107c4:	01 96       	adiw	r24, 0x01	; 1
   107c6:	86 df       	rcall	.-244    	; 0x106d4 <testpage>
   107c8:	5c 01       	movw	r10, r24
            if(count < 0)
   107ca:	97 ff       	sbrs	r25, 7
   107cc:	f1 cf       	rjmp	.-30     	; 0x107b0 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   107ce:	82 e4       	ldi	r24, 0x42	; 66
   107d0:	9e e0       	ldi	r25, 0x0E	; 14
   107d2:	1f 92       	push	r1
   107d4:	9f 93       	push	r25
   107d6:	8f 93       	push	r24
   107d8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    fclose(fp);
   107dc:	c7 01       	movw	r24, r14
   107de:	fb dc       	rcall	.-1546   	; 0x101d6 <fclose>
    printf("%ld bytes\n", (long)size);
   107e0:	0d 2c       	mov	r0, r13
   107e2:	00 0c       	add	r0, r0
   107e4:	ee 08       	sbc	r14, r14
   107e6:	ff 08       	sbc	r15, r15
   107e8:	ff 92       	push	r15
   107ea:	ef 92       	push	r14
   107ec:	df 92       	push	r13
   107ee:	cf 92       	push	r12
   107f0:	87 e3       	ldi	r24, 0x37	; 55
   107f2:	9e e0       	ldi	r25, 0x0E	; 14
   107f4:	1f 92       	push	r1
   107f6:	9f 93       	push	r25
   107f8:	8f 93       	push	r24
   107fa:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(size);
   107fe:	0f b6       	in	r0, 0x3f	; 63
   10800:	f8 94       	cli
   10802:	de bf       	out	0x3e, r29	; 62
   10804:	0f be       	out	0x3f, r0	; 63
   10806:	cd bf       	out	0x3d, r28	; 61
}
   10808:	c7 01       	movw	r24, r14
   1080a:	b6 01       	movw	r22, r12
   1080c:	d3 95       	inc	r29
   1080e:	ec e0       	ldi	r30, 0x0C	; 12
   10810:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00010814 <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   10814:	2f 92       	push	r2
   10816:	3f 92       	push	r3
   10818:	4f 92       	push	r4
   1081a:	5f 92       	push	r5
   1081c:	6f 92       	push	r6
   1081e:	7f 92       	push	r7
   10820:	8f 92       	push	r8
   10822:	af 92       	push	r10
   10824:	bf 92       	push	r11
   10826:	cf 92       	push	r12
   10828:	df 92       	push	r13
   1082a:	ef 92       	push	r14
   1082c:	ff 92       	push	r15
   1082e:	0f 93       	push	r16
   10830:	1f 93       	push	r17
   10832:	cf 93       	push	r28
   10834:	df 93       	push	r29
   10836:	cd b7       	in	r28, 0x3d	; 61
   10838:	de b7       	in	r29, 0x3e	; 62
   1083a:	e0 97       	sbiw	r28, 0x30	; 48
   1083c:	0f b6       	in	r0, 0x3f	; 63
   1083e:	f8 94       	cli
   10840:	de bf       	out	0x3e, r29	; 62
   10842:	0f be       	out	0x3f, r0	; 63
   10844:	cd bf       	out	0x3d, r28	; 61
   10846:	18 2f       	mov	r17, r24
   10848:	09 2f       	mov	r16, r25
   1084a:	78 ab       	std	Y+48, r23	; 0x30
   1084c:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   1084e:	6d e5       	ldi	r22, 0x5D	; 93
   10850:	78 e0       	ldi	r23, 0x08	; 8
   10852:	17 de       	rcall	.-978    	; 0x10482 <fopen>
   10854:	9a a3       	std	Y+34, r25	; 0x22
   10856:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   10858:	89 2b       	or	r24, r25
   1085a:	49 f1       	breq	.+82     	; 0x108ae <hexdump+0x9a>
   1085c:	21 2c       	mov	r2, r1
   1085e:	31 2c       	mov	r3, r1
   10860:	c1 2c       	mov	r12, r1
   10862:	d1 2c       	mov	r13, r1
   10864:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10866:	9e 01       	movw	r18, r28
   10868:	2f 5f       	subi	r18, 0xFF	; 255
   1086a:	3f 4f       	sbci	r19, 0xFF	; 255
   1086c:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   1086e:	8a ea       	ldi	r24, 0xAA	; 170
   10870:	9d e0       	ldi	r25, 0x0D	; 13
   10872:	9c 01       	movw	r18, r24
   10874:	40 e0       	ldi	r20, 0x00	; 0
   10876:	2b a3       	std	Y+35, r18	; 0x23
   10878:	3c a3       	std	Y+36, r19	; 0x24
   1087a:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   1087c:	84 ea       	ldi	r24, 0xA4	; 164
   1087e:	9d e0       	ldi	r25, 0x0D	; 13
   10880:	9c 01       	movw	r18, r24
   10882:	40 e0       	ldi	r20, 0x00	; 0
   10884:	2e a3       	std	Y+38, r18	; 0x26
   10886:	3f a3       	std	Y+39, r19	; 0x27
   10888:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   1088a:	80 ea       	ldi	r24, 0xA0	; 160
   1088c:	9d e0       	ldi	r25, 0x0D	; 13
   1088e:	9c 01       	movw	r18, r24
   10890:	40 e0       	ldi	r20, 0x00	; 0
   10892:	29 a7       	std	Y+41, r18	; 0x29
   10894:	3a a7       	std	Y+42, r19	; 0x2a
   10896:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   10898:	8c e9       	ldi	r24, 0x9C	; 156
   1089a:	9d e0       	ldi	r25, 0x0D	; 13
   1089c:	9c 01       	movw	r18, r24
   1089e:	40 e0       	ldi	r20, 0x00	; 0
   108a0:	2c a7       	std	Y+44, r18	; 0x2c
   108a2:	3d a7       	std	Y+45, r19	; 0x2d
   108a4:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   108a6:	8a e9       	ldi	r24, 0x9A	; 154
   108a8:	9d e0       	ldi	r25, 0x0D	; 13
   108aa:	3c 01       	movw	r6, r24
   108ac:	26 c0       	rjmp	.+76     	; 0x108fa <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   108ae:	0f 93       	push	r16
   108b0:	1f 93       	push	r17
   108b2:	83 eb       	ldi	r24, 0xB3	; 179
   108b4:	9d e0       	ldi	r25, 0x0D	; 13
   108b6:	1f 92       	push	r1
   108b8:	9f 93       	push	r25
   108ba:	8f 93       	push	r24
   108bc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   108c0:	0f 90       	pop	r0
   108c2:	0f 90       	pop	r0
   108c4:	0f 90       	pop	r0
   108c6:	0f 90       	pop	r0
   108c8:	0f 90       	pop	r0
   108ca:	80 e0       	ldi	r24, 0x00	; 0
   108cc:	90 e0       	ldi	r25, 0x00	; 0
   108ce:	9e c0       	rjmp	.+316    	; 0x10a0c <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   108d0:	1f 92       	push	r1
   108d2:	7f 92       	push	r7
   108d4:	6f 92       	push	r6
   108d6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        addr += len;
   108da:	01 2e       	mov	r0, r17
   108dc:	00 0c       	add	r0, r0
   108de:	22 0b       	sbc	r18, r18
   108e0:	33 0b       	sbc	r19, r19
   108e2:	c0 0e       	add	r12, r16
   108e4:	d1 1e       	adc	r13, r17
   108e6:	e2 1e       	adc	r14, r18
   108e8:	f3 1e       	adc	r15, r19
        if(dopage)
   108ea:	0f 90       	pop	r0
   108ec:	0f 90       	pop	r0
   108ee:	0f 90       	pop	r0
   108f0:	8f a5       	ldd	r24, Y+47	; 0x2f
   108f2:	98 a9       	ldd	r25, Y+48	; 0x30
   108f4:	89 2b       	or	r24, r25
   108f6:	09 f0       	breq	.+2      	; 0x108fa <hexdump+0xe6>
   108f8:	74 c0       	rjmp	.+232    	; 0x109e2 <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   108fa:	29 a1       	ldd	r18, Y+33	; 0x21
   108fc:	3a a1       	ldd	r19, Y+34	; 0x22
   108fe:	40 e1       	ldi	r20, 0x10	; 16
   10900:	50 e0       	ldi	r21, 0x00	; 0
   10902:	61 e0       	ldi	r22, 0x01	; 1
   10904:	70 e0       	ldi	r23, 0x00	; 0
   10906:	c2 01       	movw	r24, r4
   10908:	12 db       	rcall	.-2524   	; 0xff2e <fread>
   1090a:	8c 01       	movw	r16, r24
   1090c:	18 16       	cp	r1, r24
   1090e:	19 06       	cpc	r1, r25
   10910:	0c f0       	brlt	.+2      	; 0x10914 <hexdump+0x100>
   10912:	6d c0       	rjmp	.+218    	; 0x109ee <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   10914:	ff 92       	push	r15
   10916:	ef 92       	push	r14
   10918:	df 92       	push	r13
   1091a:	cf 92       	push	r12
   1091c:	1f 92       	push	r1
   1091e:	3c a1       	ldd	r19, Y+36	; 0x24
   10920:	3f 93       	push	r19
   10922:	4b a1       	ldd	r20, Y+35	; 0x23
   10924:	4f 93       	push	r20
   10926:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1092a:	0f b6       	in	r0, 0x3f	; 63
   1092c:	f8 94       	cli
   1092e:	de bf       	out	0x3e, r29	; 62
   10930:	0f be       	out	0x3f, r0	; 63
   10932:	cd bf       	out	0x3d, r28	; 61
   10934:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10936:	f5 01       	movw	r30, r10
   10938:	81 91       	ld	r24, Z+
   1093a:	5f 01       	movw	r10, r30
   1093c:	1f 92       	push	r1
   1093e:	8f 93       	push	r24
   10940:	1f 92       	push	r1
   10942:	ff a1       	ldd	r31, Y+39	; 0x27
   10944:	ff 93       	push	r31
   10946:	2e a1       	ldd	r18, Y+38	; 0x26
   10948:	2f 93       	push	r18
   1094a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   1094e:	c5 01       	movw	r24, r10
   10950:	84 19       	sub	r24, r4
   10952:	95 09       	sbc	r25, r5
   10954:	0f 90       	pop	r0
   10956:	0f 90       	pop	r0
   10958:	0f 90       	pop	r0
   1095a:	0f 90       	pop	r0
   1095c:	0f 90       	pop	r0
   1095e:	80 17       	cp	r24, r16
   10960:	91 07       	cpc	r25, r17
   10962:	4c f3       	brlt	.-46     	; 0x10936 <hexdump+0x122>
   10964:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10966:	90 e1       	ldi	r25, 0x10	; 16
   10968:	a9 16       	cp	r10, r25
   1096a:	b1 04       	cpc	r11, r1
   1096c:	74 f4       	brge	.+28     	; 0x1098a <hexdump+0x176>
            printf("   ");
   1096e:	1f 92       	push	r1
   10970:	3a a5       	ldd	r19, Y+42	; 0x2a
   10972:	3f 93       	push	r19
   10974:	49 a5       	ldd	r20, Y+41	; 0x29
   10976:	4f 93       	push	r20
   10978:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   1097c:	8f ef       	ldi	r24, 0xFF	; 255
   1097e:	a8 1a       	sub	r10, r24
   10980:	b8 0a       	sbc	r11, r24
   10982:	0f 90       	pop	r0
   10984:	0f 90       	pop	r0
   10986:	0f 90       	pop	r0
   10988:	ee cf       	rjmp	.-36     	; 0x10966 <hexdump+0x152>
            printf("   ");

        printf(" : ");
   1098a:	1f 92       	push	r1
   1098c:	ed a5       	ldd	r30, Y+45	; 0x2d
   1098e:	ef 93       	push	r30
   10990:	fc a5       	ldd	r31, Y+44	; 0x2c
   10992:	ff 93       	push	r31
   10994:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10998:	0f 90       	pop	r0
   1099a:	0f 90       	pop	r0
   1099c:	0f 90       	pop	r0
   1099e:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   109a0:	f5 01       	movw	r30, r10
   109a2:	81 91       	ld	r24, Z+
   109a4:	5f 01       	movw	r10, r30
   109a6:	90 ee       	ldi	r25, 0xE0	; 224
   109a8:	98 0f       	add	r25, r24
   109aa:	9f 35       	cpi	r25, 0x5F	; 95
   109ac:	10 f4       	brcc	.+4      	; 0x109b2 <hexdump+0x19e>
                putchar(buf[i]);
   109ae:	90 e0       	ldi	r25, 0x00	; 0
   109b0:	02 c0       	rjmp	.+4      	; 0x109b6 <hexdump+0x1a2>
            else
                putchar('.');
   109b2:	8e e2       	ldi	r24, 0x2E	; 46
   109b4:	90 e0       	ldi	r25, 0x00	; 0
   109b6:	0e 94 4b 79 	call	0xf296	; 0xf296 <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   109ba:	c5 01       	movw	r24, r10
   109bc:	84 19       	sub	r24, r4
   109be:	95 09       	sbc	r25, r5
   109c0:	80 17       	cp	r24, r16
   109c2:	91 07       	cpc	r25, r17
   109c4:	6c f3       	brlt	.-38     	; 0x109a0 <hexdump+0x18c>
   109c6:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   109c8:	20 e1       	ldi	r18, 0x10	; 16
   109ca:	a2 16       	cp	r10, r18
   109cc:	b1 04       	cpc	r11, r1
   109ce:	0c f0       	brlt	.+2      	; 0x109d2 <hexdump+0x1be>
   109d0:	7f cf       	rjmp	.-258    	; 0x108d0 <hexdump+0xbc>
            putchar('.');
   109d2:	8e e2       	ldi	r24, 0x2E	; 46
   109d4:	90 e0       	ldi	r25, 0x00	; 0
   109d6:	0e 94 4b 79 	call	0xf296	; 0xf296 <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   109da:	ff ef       	ldi	r31, 0xFF	; 255
   109dc:	af 1a       	sub	r10, r31
   109de:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   109e0:	f3 cf       	rjmp	.-26     	; 0x109c8 <hexdump+0x1b4>
   109e2:	c1 01       	movw	r24, r2
   109e4:	01 96       	adiw	r24, 0x01	; 1
   109e6:	76 de       	rcall	.-788    	; 0x106d4 <testpage>
            if(count < 0)
   109e8:	1c 01       	movw	r2, r24
   109ea:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   109ec:	86 cf       	rjmp	.-244    	; 0x108fa <hexdump+0xe6>
   109ee:	88 e9       	ldi	r24, 0x98	; 152
   109f0:	9d e0       	ldi	r25, 0x0D	; 13
   109f2:	1f 92       	push	r1
   109f4:	9f 93       	push	r25
   109f6:	8f 93       	push	r24
    fclose(fi);
   109f8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   109fc:	89 a1       	ldd	r24, Y+33	; 0x21
   109fe:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   10a00:	ea db       	rcall	.-2092   	; 0x101d6 <fclose>
   10a02:	0f 90       	pop	r0
   10a04:	0f 90       	pop	r0
   10a06:	0f 90       	pop	r0
   10a08:	81 e0       	ldi	r24, 0x01	; 1
}
   10a0a:	90 e0       	ldi	r25, 0x00	; 0
   10a0c:	e0 96       	adiw	r28, 0x30	; 48
   10a0e:	0f b6       	in	r0, 0x3f	; 63
   10a10:	f8 94       	cli
   10a12:	de bf       	out	0x3e, r29	; 62
   10a14:	0f be       	out	0x3f, r0	; 63
   10a16:	cd bf       	out	0x3d, r28	; 61
   10a18:	df 91       	pop	r29
   10a1a:	cf 91       	pop	r28
   10a1c:	1f 91       	pop	r17
   10a1e:	0f 91       	pop	r16
   10a20:	ff 90       	pop	r15
   10a22:	ef 90       	pop	r14
   10a24:	df 90       	pop	r13
   10a26:	cf 90       	pop	r12
   10a28:	bf 90       	pop	r11
   10a2a:	af 90       	pop	r10
   10a2c:	8f 90       	pop	r8
   10a2e:	7f 90       	pop	r7
   10a30:	6f 90       	pop	r6
   10a32:	5f 90       	pop	r5
   10a34:	4f 90       	pop	r4
   10a36:	3f 90       	pop	r3
   10a38:	2f 90       	pop	r2
   10a3a:	08 95       	ret

00010a3c <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10a3c:	4f 92       	push	r4
   10a3e:	5f 92       	push	r5
   10a40:	6f 92       	push	r6
   10a42:	7f 92       	push	r7
   10a44:	af 92       	push	r10
   10a46:	bf 92       	push	r11
   10a48:	cf 92       	push	r12
   10a4a:	df 92       	push	r13
   10a4c:	ef 92       	push	r14
   10a4e:	ff 92       	push	r15
   10a50:	0f 93       	push	r16
   10a52:	1f 93       	push	r17
   10a54:	cf 93       	push	r28
   10a56:	df 93       	push	r29
   10a58:	cd b7       	in	r28, 0x3d	; 61
   10a5a:	de b7       	in	r29, 0x3e	; 62
   10a5c:	ec 97       	sbiw	r28, 0x3c	; 60
   10a5e:	0f b6       	in	r0, 0x3f	; 63
   10a60:	f8 94       	cli
   10a62:	de bf       	out	0x3e, r29	; 62
   10a64:	0f be       	out	0x3f, r0	; 63
   10a66:	cd bf       	out	0x3d, r28	; 61
   10a68:	8c 01       	movw	r16, r24
   10a6a:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10a6c:	be 01       	movw	r22, r28
   10a6e:	6f 5f       	subi	r22, 0xFF	; 255
   10a70:	7f 4f       	sbci	r23, 0xFF	; 255
   10a72:	1b d8       	rcall	.-4042   	; 0xfaaa <stat>
   10a74:	01 96       	adiw	r24, 0x01	; 1
   10a76:	89 f4       	brne	.+34     	; 0x10a9a <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10a78:	1f 93       	push	r17
   10a7a:	0f 93       	push	r16
   10a7c:	8d e7       	ldi	r24, 0x7D	; 125
   10a7e:	9d e0       	ldi	r25, 0x0D	; 13
   10a80:	1f 92       	push	r1
   10a82:	9f 93       	push	r25
   10a84:	8f 93       	push	r24
   10a86:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   10a8a:	0f 90       	pop	r0
   10a8c:	0f 90       	pop	r0
   10a8e:	0f 90       	pop	r0
   10a90:	0f 90       	pop	r0
   10a92:	0f 90       	pop	r0
   10a94:	80 e0       	ldi	r24, 0x00	; 0
   10a96:	90 e0       	ldi	r25, 0x00	; 0
   10a98:	79 c0       	rjmp	.+242    	; 0x10b8c <ls_info+0x150>
    }

    if(!verbose)
   10a9a:	ef 28       	or	r14, r15
   10a9c:	91 f4       	brne	.+36     	; 0x10ac2 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10a9e:	c8 01       	movw	r24, r16
   10aa0:	0e 94 b7 7a 	call	0xf56e	; 0xf56e <basename>
   10aa4:	9f 93       	push	r25
   10aa6:	8f 93       	push	r24
   10aa8:	89 e7       	ldi	r24, 0x79	; 121
   10aaa:	9d e0       	ldi	r25, 0x0D	; 13
   10aac:	1f 92       	push	r1
   10aae:	9f 93       	push	r25
   10ab0:	8f 93       	push	r24
   10ab2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(1);
   10ab6:	0f 90       	pop	r0
   10ab8:	0f 90       	pop	r0
   10aba:	0f 90       	pop	r0
   10abc:	0f 90       	pop	r0
   10abe:	0f 90       	pop	r0
   10ac0:	63 c0       	rjmp	.+198    	; 0x10b88 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10ac2:	49 84       	ldd	r4, Y+9	; 0x09
   10ac4:	5a 84       	ldd	r5, Y+10	; 0x0a
   10ac6:	6b 84       	ldd	r6, Y+11	; 0x0b
   10ac8:	7c 84       	ldd	r7, Y+12	; 0x0c
   10aca:	d3 01       	movw	r26, r6
   10acc:	c2 01       	movw	r24, r4
   10ace:	88 27       	eor	r24, r24
   10ad0:	90 7f       	andi	r25, 0xF0	; 240
   10ad2:	aa 27       	eor	r26, r26
   10ad4:	bb 27       	eor	r27, r27
   10ad6:	81 15       	cp	r24, r1
   10ad8:	90 44       	sbci	r25, 0x40	; 64
   10ada:	a1 05       	cpc	r26, r1
   10adc:	b1 05       	cpc	r27, r1
   10ade:	11 f4       	brne	.+4      	; 0x10ae4 <ls_info+0xa8>
        *p++ = 'd';
   10ae0:	84 e6       	ldi	r24, 0x64	; 100
   10ae2:	01 c0       	rjmp	.+2      	; 0x10ae6 <ls_info+0xaa>
    else
        *p++ = '-';
   10ae4:	8d e2       	ldi	r24, 0x2D	; 45
   10ae6:	89 ab       	std	Y+49, r24	; 0x31
   10ae8:	fe 01       	movw	r30, r28
   10aea:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10aec:	e1 2c       	mov	r14, r1
   10aee:	ff 24       	eor	r15, r15
   10af0:	f3 94       	inc	r15
   10af2:	20 e0       	ldi	r18, 0x00	; 0
   10af4:	30 e0       	ldi	r19, 0x00	; 0
   10af6:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10af8:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10afa:	53 e0       	ldi	r21, 0x03	; 3
   10afc:	c5 2e       	mov	r12, r21
   10afe:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10b00:	c7 01       	movw	r24, r14
   10b02:	a0 e0       	ldi	r26, 0x00	; 0
   10b04:	b0 e0       	ldi	r27, 0x00	; 0
   10b06:	84 21       	and	r24, r4
   10b08:	95 21       	and	r25, r5
   10b0a:	a6 21       	and	r26, r6
   10b0c:	b7 21       	and	r27, r7
   10b0e:	89 2b       	or	r24, r25
   10b10:	8a 2b       	or	r24, r26
   10b12:	8b 2b       	or	r24, r27
   10b14:	51 f0       	breq	.+20     	; 0x10b2a <ls_info+0xee>
            *p++ = cm[ i % 3];
   10b16:	c9 01       	movw	r24, r18
   10b18:	b6 01       	movw	r22, r12
   10b1a:	0e 94 bb e8 	call	0x1d176	; 0x1d176 <__divmodhi4>
   10b1e:	dc 01       	movw	r26, r24
   10b20:	ab 5f       	subi	r26, 0xFB	; 251
   10b22:	b4 4f       	sbci	r27, 0xF4	; 244
   10b24:	8c 91       	ld	r24, X
   10b26:	81 83       	std	Z+1, r24	; 0x01
   10b28:	01 c0       	rjmp	.+2      	; 0x10b2c <ls_info+0xf0>
        else
            *p++ = '-';
   10b2a:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10b2c:	f6 94       	lsr	r15
   10b2e:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10b30:	2f 5f       	subi	r18, 0xFF	; 255
   10b32:	3f 4f       	sbci	r19, 0xFF	; 255
   10b34:	31 96       	adiw	r30, 0x01	; 1
   10b36:	29 30       	cpi	r18, 0x09	; 9
   10b38:	31 05       	cpc	r19, r1
   10b3a:	11 f7       	brne	.-60     	; 0x10b00 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10b3c:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10b3e:	c8 01       	movw	r24, r16
   10b40:	0e 94 b7 7a 	call	0xf56e	; 0xf56e <basename>
   10b44:	18 2f       	mov	r17, r24
   10b46:	09 2f       	mov	r16, r25
   10b48:	69 a5       	ldd	r22, Y+41	; 0x29
   10b4a:	7a a5       	ldd	r23, Y+42	; 0x2a
   10b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
   10b4e:	9c a5       	ldd	r25, Y+44	; 0x2c
   10b50:	0e 94 e5 79 	call	0xf3ca	; 0xf3ca <mctime>
   10b54:	0f 93       	push	r16
   10b56:	1f 93       	push	r17
   10b58:	9f 93       	push	r25
   10b5a:	8f 93       	push	r24
   10b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10b5e:	8f 93       	push	r24
   10b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10b62:	8f 93       	push	r24
   10b64:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10b66:	8f 93       	push	r24
   10b68:	89 8d       	ldd	r24, Y+25	; 0x19
   10b6a:	8f 93       	push	r24
   10b6c:	bf 92       	push	r11
   10b6e:	af 92       	push	r10
   10b70:	8f e5       	ldi	r24, 0x5F	; 95
   10b72:	9d e0       	ldi	r25, 0x0D	; 13
   10b74:	1f 92       	push	r1
   10b76:	9f 93       	push	r25
   10b78:	8f 93       	push	r24
   10b7a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10b7e:	0f b6       	in	r0, 0x3f	; 63
   10b80:	f8 94       	cli
   10b82:	de bf       	out	0x3e, r29	; 62
   10b84:	0f be       	out	0x3f, r0	; 63
   10b86:	cd bf       	out	0x3d, r28	; 61
   10b88:	81 e0       	ldi	r24, 0x01	; 1
   10b8a:	90 e0       	ldi	r25, 0x00	; 0
}
   10b8c:	ec 96       	adiw	r28, 0x3c	; 60
   10b8e:	0f b6       	in	r0, 0x3f	; 63
   10b90:	f8 94       	cli
   10b92:	de bf       	out	0x3e, r29	; 62
   10b94:	0f be       	out	0x3f, r0	; 63
   10b96:	cd bf       	out	0x3d, r28	; 61
   10b98:	df 91       	pop	r29
   10b9a:	cf 91       	pop	r28
   10b9c:	1f 91       	pop	r17
   10b9e:	0f 91       	pop	r16
   10ba0:	ff 90       	pop	r15
   10ba2:	ef 90       	pop	r14
   10ba4:	df 90       	pop	r13
   10ba6:	cf 90       	pop	r12
   10ba8:	bf 90       	pop	r11
   10baa:	af 90       	pop	r10
   10bac:	7f 90       	pop	r7
   10bae:	6f 90       	pop	r6
   10bb0:	5f 90       	pop	r5
   10bb2:	4f 90       	pop	r4
   10bb4:	08 95       	ret

00010bb6 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10bb6:	2f 92       	push	r2
   10bb8:	3f 92       	push	r3
   10bba:	4f 92       	push	r4
   10bbc:	5f 92       	push	r5
   10bbe:	6f 92       	push	r6
   10bc0:	8f 92       	push	r8
   10bc2:	9f 92       	push	r9
   10bc4:	af 92       	push	r10
   10bc6:	bf 92       	push	r11
   10bc8:	cf 92       	push	r12
   10bca:	df 92       	push	r13
   10bcc:	ef 92       	push	r14
   10bce:	ff 92       	push	r15
   10bd0:	0f 93       	push	r16
   10bd2:	1f 93       	push	r17
   10bd4:	cf 93       	push	r28
   10bd6:	df 93       	push	r29
   10bd8:	cd b7       	in	r28, 0x3d	; 61
   10bda:	de b7       	in	r29, 0x3e	; 62
   10bdc:	c2 53       	subi	r28, 0x32	; 50
   10bde:	d1 40       	sbci	r29, 0x01	; 1
   10be0:	0f b6       	in	r0, 0x3f	; 63
   10be2:	f8 94       	cli
   10be4:	de bf       	out	0x3e, r29	; 62
   10be6:	0f be       	out	0x3f, r0	; 63
   10be8:	cd bf       	out	0x3d, r28	; 61
   10bea:	7c 01       	movw	r14, r24
   10bec:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10bee:	19 82       	std	Y+1, r1	; 0x01
   10bf0:	8e 01       	movw	r16, r28
   10bf2:	0f 5f       	subi	r16, 0xFF	; 255
   10bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10bf6:	00 97       	sbiw	r24, 0x00	; 0
   10bf8:	91 f4       	brne	.+36     	; 0x10c1e <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10bfa:	6e ef       	ldi	r22, 0xFE	; 254
   10bfc:	70 e0       	ldi	r23, 0x00	; 0
   10bfe:	c8 01       	movw	r24, r16
   10c00:	0e 94 0d 7b 	call	0xf61a	; 0xf61a <getcwd>
   10c04:	89 2b       	or	r24, r25
   10c06:	d1 f4       	brne	.+52     	; 0x10c3c <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10c08:	8e e3       	ldi	r24, 0x3E	; 62
   10c0a:	9d e0       	ldi	r25, 0x0D	; 13
   10c0c:	1f 92       	push	r1
   10c0e:	9f 93       	push	r25
   10c10:	8f 93       	push	r24
   10c12:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            return(0); 
   10c16:	0f 90       	pop	r0
   10c18:	0f 90       	pop	r0
   10c1a:	0f 90       	pop	r0
   10c1c:	3c c0       	rjmp	.+120    	; 0x10c96 <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10c1e:	fc 01       	movw	r30, r24
   10c20:	80 81       	ld	r24, Z
   10c22:	88 23       	and	r24, r24
   10c24:	51 f3       	breq	.-44     	; 0x10bfa <ls+0x44>
   10c26:	68 e4       	ldi	r22, 0x48	; 72
   10c28:	70 e1       	ldi	r23, 0x10	; 16
   10c2a:	c7 01       	movw	r24, r14
   10c2c:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   10c30:	89 2b       	or	r24, r25
   10c32:	19 f7       	brne	.-58     	; 0x10bfa <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10c34:	b7 01       	movw	r22, r14
   10c36:	c8 01       	movw	r24, r16
   10c38:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strcpy>
    }
    len = strlen(fullpath);
   10c3c:	f8 01       	movw	r30, r16
   10c3e:	01 90       	ld	r0, Z+
   10c40:	00 20       	and	r0, r0
   10c42:	e9 f7       	brne	.-6      	; 0x10c3e <ls+0x88>
   10c44:	31 97       	sbiw	r30, 0x01	; 1
   10c46:	1f 01       	movw	r2, r30
   10c48:	20 1a       	sub	r2, r16
   10c4a:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10c4c:	1f 93       	push	r17
   10c4e:	0f 93       	push	r16
   10c50:	80 e3       	ldi	r24, 0x30	; 48
   10c52:	9d e0       	ldi	r25, 0x0D	; 13
   10c54:	1f 92       	push	r1
   10c56:	9f 93       	push	r25
   10c58:	8f 93       	push	r24
   10c5a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    if (stat(fullpath, &st)) 
   10c5e:	be 01       	movw	r22, r28
   10c60:	6f 5f       	subi	r22, 0xFF	; 255
   10c62:	7e 4f       	sbci	r23, 0xFE	; 254
   10c64:	c8 01       	movw	r24, r16
   10c66:	0e 94 55 7d 	call	0xfaaa	; 0xfaaa <stat>
   10c6a:	7c 01       	movw	r14, r24
   10c6c:	0f 90       	pop	r0
   10c6e:	0f 90       	pop	r0
   10c70:	0f 90       	pop	r0
   10c72:	0f 90       	pop	r0
   10c74:	0f 90       	pop	r0
   10c76:	89 2b       	or	r24, r25
   10c78:	89 f0       	breq	.+34     	; 0x10c9c <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10c7a:	1f 93       	push	r17
   10c7c:	0f 93       	push	r16
   10c7e:	8a e1       	ldi	r24, 0x1A	; 26
   10c80:	9d e0       	ldi	r25, 0x0D	; 13
   10c82:	1f 92       	push	r1
   10c84:	9f 93       	push	r25
   10c86:	8f 93       	push	r24
   10c88:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0); 
   10c8c:	0f 90       	pop	r0
   10c8e:	0f 90       	pop	r0
   10c90:	0f 90       	pop	r0
   10c92:	0f 90       	pop	r0
   10c94:	0f 90       	pop	r0
   10c96:	e1 2c       	mov	r14, r1
   10c98:	f1 2c       	mov	r15, r1
   10c9a:	8f c0       	rjmp	.+286    	; 0x10dba <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   10c9c:	c7 5f       	subi	r28, 0xF7	; 247
   10c9e:	de 4f       	sbci	r29, 0xFE	; 254
   10ca0:	88 81       	ld	r24, Y
   10ca2:	99 81       	ldd	r25, Y+1	; 0x01
   10ca4:	aa 81       	ldd	r26, Y+2	; 0x02
   10ca6:	bb 81       	ldd	r27, Y+3	; 0x03
   10ca8:	c9 50       	subi	r28, 0x09	; 9
   10caa:	d1 40       	sbci	r29, 0x01	; 1
   10cac:	88 27       	eor	r24, r24
   10cae:	90 7f       	andi	r25, 0xF0	; 240
   10cb0:	aa 27       	eor	r26, r26
   10cb2:	bb 27       	eor	r27, r27
   10cb4:	81 15       	cp	r24, r1
   10cb6:	f0 e4       	ldi	r31, 0x40	; 64
   10cb8:	9f 07       	cpc	r25, r31
   10cba:	a1 05       	cpc	r26, r1
   10cbc:	b1 05       	cpc	r27, r1
   10cbe:	51 f0       	breq	.+20     	; 0x10cd4 <ls+0x11e>
   10cc0:	81 15       	cp	r24, r1
   10cc2:	90 48       	sbci	r25, 0x80	; 128
   10cc4:	a1 05       	cpc	r26, r1
   10cc6:	b1 05       	cpc	r27, r1
   10cc8:	09 f0       	breq	.+2      	; 0x10ccc <ls+0x116>
   10cca:	67 c0       	rjmp	.+206    	; 0x10d9a <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10ccc:	b4 01       	movw	r22, r8
   10cce:	c8 01       	movw	r24, r16
   10cd0:	b5 de       	rcall	.-662    	; 0x10a3c <ls_info>
   10cd2:	63 c0       	rjmp	.+198    	; 0x10d9a <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10cd4:	c8 01       	movw	r24, r16
   10cd6:	0e 94 bb 7b 	call	0xf776	; 0xf776 <opendir>
   10cda:	5c 01       	movw	r10, r24
        if(!dirp)
   10cdc:	89 2b       	or	r24, r25
   10cde:	79 f0       	breq	.+30     	; 0x10cfe <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10ce0:	e1 2c       	mov	r14, r1
   10ce2:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10ce4:	c8 01       	movw	r24, r16
   10ce6:	82 0d       	add	r24, r2
   10ce8:	93 1d       	adc	r25, r3
   10cea:	cf 5c       	subi	r28, 0xCF	; 207
   10cec:	de 4f       	sbci	r29, 0xFE	; 254
   10cee:	99 83       	std	Y+1, r25	; 0x01
   10cf0:	88 83       	st	Y, r24
   10cf2:	c1 53       	subi	r28, 0x31	; 49
   10cf4:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10cf6:	87 ee       	ldi	r24, 0xE7	; 231
   10cf8:	9c e0       	ldi	r25, 0x0C	; 12
   10cfa:	2c 01       	movw	r4, r24
   10cfc:	27 c0       	rjmp	.+78     	; 0x10d4c <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10cfe:	8a e0       	ldi	r24, 0x0A	; 10
   10d00:	9d e0       	ldi	r25, 0x0D	; 13
   10d02:	1f 92       	push	r1
   10d04:	9f 93       	push	r25
   10d06:	8f 93       	push	r24
   10d08:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            return(0);
   10d0c:	0f 90       	pop	r0
   10d0e:	0f 90       	pop	r0
   10d10:	0f 90       	pop	r0
   10d12:	53 c0       	rjmp	.+166    	; 0x10dba <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10d14:	f6 01       	movw	r30, r12
   10d16:	80 81       	ld	r24, Z
   10d18:	88 23       	and	r24, r24
   10d1a:	f1 f0       	breq	.+60     	; 0x10d58 <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   10d1c:	f6 01       	movw	r30, r12
   10d1e:	01 90       	ld	r0, Z+
   10d20:	00 20       	and	r0, r0
   10d22:	e9 f7       	brne	.-6      	; 0x10d1e <ls+0x168>
   10d24:	31 97       	sbiw	r30, 0x01	; 1
   10d26:	ec 19       	sub	r30, r12
   10d28:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   10d2a:	e2 0d       	add	r30, r2
   10d2c:	f3 1d       	adc	r31, r3
   10d2e:	ef 3f       	cpi	r30, 0xFF	; 255
   10d30:	f1 05       	cpc	r31, r1
   10d32:	b4 f0       	brlt	.+44     	; 0x10d60 <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10d34:	df 92       	push	r13
   10d36:	cf 92       	push	r12
   10d38:	1f 92       	push	r1
   10d3a:	5f 92       	push	r5
   10d3c:	4f 92       	push	r4
   10d3e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                continue;
   10d42:	0f 90       	pop	r0
   10d44:	0f 90       	pop	r0
   10d46:	0f 90       	pop	r0
   10d48:	0f 90       	pop	r0
   10d4a:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10d4c:	c5 01       	movw	r24, r10
   10d4e:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <readdir>
   10d52:	6c 01       	movw	r12, r24
   10d54:	89 2b       	or	r24, r25
   10d56:	f1 f6       	brne	.-68     	; 0x10d14 <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10d58:	c5 01       	movw	r24, r10
   10d5a:	0e 94 a0 7b 	call	0xf740	; 0xf740 <closedir>
        break;
   10d5e:	1f c0       	rjmp	.+62     	; 0x10d9e <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   10d60:	69 e0       	ldi	r22, 0x09	; 9
   10d62:	78 e0       	ldi	r23, 0x08	; 8
   10d64:	c8 01       	movw	r24, r16
   10d66:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   10d6a:	89 2b       	or	r24, r25
   10d6c:	29 f4       	brne	.+10     	; 0x10d78 <ls+0x1c2>
            {
                strcat(fullpath,"/");
   10d6e:	69 e0       	ldi	r22, 0x09	; 9
   10d70:	78 e0       	ldi	r23, 0x08	; 8
   10d72:	c8 01       	movw	r24, r16
   10d74:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
            }
            strcat(fullpath,de->d_name);
   10d78:	b6 01       	movw	r22, r12
   10d7a:	c8 01       	movw	r24, r16
   10d7c:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
            files +=ls_info(fullpath,verbose);
   10d80:	b4 01       	movw	r22, r8
   10d82:	c8 01       	movw	r24, r16
   10d84:	5b de       	rcall	.-842    	; 0x10a3c <ls_info>
   10d86:	e8 0e       	add	r14, r24
   10d88:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10d8a:	cf 5c       	subi	r28, 0xCF	; 207
   10d8c:	de 4f       	sbci	r29, 0xFE	; 254
   10d8e:	e8 81       	ld	r30, Y
   10d90:	f9 81       	ldd	r31, Y+1	; 0x01
   10d92:	c1 53       	subi	r28, 0x31	; 49
   10d94:	d1 40       	sbci	r29, 0x01	; 1
   10d96:	10 82       	st	Z, r1
   10d98:	d9 cf       	rjmp	.-78     	; 0x10d4c <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10d9a:	e1 2c       	mov	r14, r1
   10d9c:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10d9e:	ff 92       	push	r15
   10da0:	ef 92       	push	r14
   10da2:	8c ed       	ldi	r24, 0xDC	; 220
   10da4:	9c e0       	ldi	r25, 0x0C	; 12
   10da6:	1f 92       	push	r1
   10da8:	9f 93       	push	r25
   10daa:	8f 93       	push	r24
   10dac:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(files);
   10db0:	0f 90       	pop	r0
   10db2:	0f 90       	pop	r0
   10db4:	0f 90       	pop	r0
   10db6:	0f 90       	pop	r0
   10db8:	0f 90       	pop	r0
}
   10dba:	c7 01       	movw	r24, r14
   10dbc:	ce 5c       	subi	r28, 0xCE	; 206
   10dbe:	de 4f       	sbci	r29, 0xFE	; 254
   10dc0:	0f b6       	in	r0, 0x3f	; 63
   10dc2:	f8 94       	cli
   10dc4:	de bf       	out	0x3e, r29	; 62
   10dc6:	0f be       	out	0x3f, r0	; 63
   10dc8:	cd bf       	out	0x3d, r28	; 61
   10dca:	df 91       	pop	r29
   10dcc:	cf 91       	pop	r28
   10dce:	1f 91       	pop	r17
   10dd0:	0f 91       	pop	r16
   10dd2:	ff 90       	pop	r15
   10dd4:	ef 90       	pop	r14
   10dd6:	df 90       	pop	r13
   10dd8:	cf 90       	pop	r12
   10dda:	bf 90       	pop	r11
   10ddc:	af 90       	pop	r10
   10dde:	9f 90       	pop	r9
   10de0:	8f 90       	pop	r8
   10de2:	6f 90       	pop	r6
   10de4:	5f 90       	pop	r5
   10de6:	4f 90       	pop	r4
   10de8:	3f 90       	pop	r3
   10dea:	2f 90       	pop	r2
   10dec:	08 95       	ret

00010dee <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   10dee:	cf 92       	push	r12
   10df0:	df 92       	push	r13
   10df2:	ef 92       	push	r14
   10df4:	ff 92       	push	r15
   10df6:	cf 93       	push	r28
   10df8:	df 93       	push	r29
   10dfa:	f8 2e       	mov	r15, r24
   10dfc:	e9 2e       	mov	r14, r25
   10dfe:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   10e00:	69 e7       	ldi	r22, 0x79	; 121
   10e02:	78 e0       	ldi	r23, 0x08	; 8
   10e04:	3e db       	rcall	.-2436   	; 0x10482 <fopen>
    if (fo)
   10e06:	89 2b       	or	r24, r25
   10e08:	79 f0       	breq	.+30     	; 0x10e28 <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   10e0a:	ef 92       	push	r14
   10e0c:	ff 92       	push	r15
   10e0e:	8c ec       	ldi	r24, 0xCC	; 204
   10e10:	9c e0       	ldi	r25, 0x0C	; 12
   10e12:	1f 92       	push	r1
   10e14:	9f 93       	push	r25
   10e16:	8f 93       	push	r24
   10e18:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   10e1c:	0f 90       	pop	r0
   10e1e:	0f 90       	pop	r0
   10e20:	0f 90       	pop	r0
   10e22:	0f 90       	pop	r0
   10e24:	0f 90       	pop	r0
   10e26:	22 c0       	rjmp	.+68     	; 0x10e6c <logfile+0x7e>
    }

    size = strlen(str);
   10e28:	fe 01       	movw	r30, r28
   10e2a:	01 90       	ld	r0, Z+
   10e2c:	00 20       	and	r0, r0
   10e2e:	e9 f7       	brne	.-6      	; 0x10e2a <logfile+0x3c>
   10e30:	31 97       	sbiw	r30, 0x01	; 1
   10e32:	af 01       	movw	r20, r30
   10e34:	4c 1b       	sub	r20, r28
   10e36:	5d 0b       	sbc	r21, r29
   10e38:	6a 01       	movw	r12, r20
   10e3a:	e1 2c       	mov	r14, r1
   10e3c:	f1 2c       	mov	r15, r1
    if( fwrite(str, 1, size, fo) < size)
   10e3e:	20 e0       	ldi	r18, 0x00	; 0
   10e40:	30 e0       	ldi	r19, 0x00	; 0
   10e42:	61 e0       	ldi	r22, 0x01	; 1
   10e44:	70 e0       	ldi	r23, 0x00	; 0
   10e46:	ce 01       	movw	r24, r28
   10e48:	44 d9       	rcall	.-3448   	; 0x100d2 <fwrite>
   10e4a:	a0 e0       	ldi	r26, 0x00	; 0
   10e4c:	b0 e0       	ldi	r27, 0x00	; 0
   10e4e:	8c 15       	cp	r24, r12
   10e50:	9d 05       	cpc	r25, r13
   10e52:	ae 05       	cpc	r26, r14
   10e54:	bf 05       	cpc	r27, r15
   10e56:	7c f4       	brge	.+30     	; 0x10e76 <logfile+0x88>
    {
        printf("Write error\n");
   10e58:	8f eb       	ldi	r24, 0xBF	; 191
   10e5a:	9c e0       	ldi	r25, 0x0C	; 12
   10e5c:	1f 92       	push	r1
   10e5e:	9f 93       	push	r25
   10e60:	8f 93       	push	r24
   10e62:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10e66:	0f 90       	pop	r0
   10e68:	0f 90       	pop	r0
   10e6a:	0f 90       	pop	r0
   10e6c:	60 e0       	ldi	r22, 0x00	; 0
   10e6e:	70 e0       	ldi	r23, 0x00	; 0
   10e70:	80 e0       	ldi	r24, 0x00	; 0
   10e72:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   10e74:	05 c0       	rjmp	.+10     	; 0x10e80 <logfile+0x92>
   10e76:	80 e0       	ldi	r24, 0x00	; 0
   10e78:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   10e7a:	ad d9       	rcall	.-3238   	; 0x101d6 <fclose>
   10e7c:	b6 01       	movw	r22, r12
}
   10e7e:	c7 01       	movw	r24, r14
   10e80:	df 91       	pop	r29
   10e82:	cf 91       	pop	r28
   10e84:	ff 90       	pop	r15
   10e86:	ef 90       	pop	r14
   10e88:	df 90       	pop	r13
   10e8a:	cf 90       	pop	r12
   10e8c:	08 95       	ret

00010e8e <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   10e8e:	a0 e0       	ldi	r26, 0x00	; 0
   10e90:	b1 e0       	ldi	r27, 0x01	; 1
   10e92:	ed e4       	ldi	r30, 0x4D	; 77
   10e94:	f7 e8       	ldi	r31, 0x87	; 135
   10e96:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   10e9a:	18 2f       	mov	r17, r24
   10e9c:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   10e9e:	6d e5       	ldi	r22, 0x5D	; 93
   10ea0:	78 e0       	ldi	r23, 0x08	; 8
   10ea2:	ef da       	rcall	.-2594   	; 0x10482 <fopen>
   10ea4:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   10ea6:	89 2b       	or	r24, r25
   10ea8:	89 f4       	brne	.+34     	; 0x10ecc <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   10eaa:	0f 93       	push	r16
   10eac:	1f 93       	push	r17
   10eae:	80 eb       	ldi	r24, 0xB0	; 176
   10eb0:	9c e0       	ldi	r25, 0x0C	; 12
   10eb2:	1f 92       	push	r1
   10eb4:	9f 93       	push	r25
   10eb6:	8f 93       	push	r24
   10eb8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   10ebc:	0f 90       	pop	r0
   10ebe:	0f 90       	pop	r0
   10ec0:	0f 90       	pop	r0
   10ec2:	0f 90       	pop	r0
   10ec4:	0f 90       	pop	r0
   10ec6:	80 e0       	ldi	r24, 0x00	; 0
   10ec8:	90 e0       	ldi	r25, 0x00	; 0
   10eca:	2d c0       	rjmp	.+90     	; 0x10f26 <sum+0x98>
   10ecc:	00 e0       	ldi	r16, 0x00	; 0
   10ece:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   10ed0:	ce 01       	movw	r24, r28
   10ed2:	01 96       	adiw	r24, 0x01	; 1
   10ed4:	6c 01       	movw	r12, r24
   10ed6:	97 01       	movw	r18, r14
   10ed8:	40 e0       	ldi	r20, 0x00	; 0
   10eda:	51 e0       	ldi	r21, 0x01	; 1
   10edc:	61 e0       	ldi	r22, 0x01	; 1
   10ede:	70 e0       	ldi	r23, 0x00	; 0
   10ee0:	c6 01       	movw	r24, r12
   10ee2:	25 d8       	rcall	.-4022   	; 0xff2e <fread>
   10ee4:	18 16       	cp	r1, r24
   10ee6:	19 06       	cpc	r1, r25
   10ee8:	5c f4       	brge	.+22     	; 0x10f00 <sum+0x72>
   10eea:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   10eec:	21 91       	ld	r18, Z+
   10eee:	02 0f       	add	r16, r18
   10ef0:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   10ef2:	9f 01       	movw	r18, r30
   10ef4:	2c 19       	sub	r18, r12
   10ef6:	3d 09       	sbc	r19, r13
   10ef8:	28 17       	cp	r18, r24
   10efa:	39 07       	cpc	r19, r25
   10efc:	bc f3       	brlt	.-18     	; 0x10eec <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   10efe:	eb cf       	rjmp	.-42     	; 0x10ed6 <sum+0x48>
   10f00:	c7 01       	movw	r24, r14
   10f02:	69 d9       	rcall	.-3374   	; 0x101d6 <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   10f04:	1f 93       	push	r17
   10f06:	0f 93       	push	r16
   10f08:	1f 93       	push	r17
   10f0a:	0f 93       	push	r16
   10f0c:	8f e9       	ldi	r24, 0x9F	; 159
   10f0e:	9c e0       	ldi	r25, 0x0C	; 12
   10f10:	1f 92       	push	r1
   10f12:	9f 93       	push	r25
   10f14:	8f 93       	push	r24
   10f16:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(sum);
   10f1a:	0f b6       	in	r0, 0x3f	; 63
   10f1c:	f8 94       	cli
   10f1e:	de bf       	out	0x3e, r29	; 62
   10f20:	0f be       	out	0x3f, r0	; 63
   10f22:	cd bf       	out	0x3d, r28	; 61
   10f24:	c8 01       	movw	r24, r16
}
   10f26:	d3 95       	inc	r29
   10f28:	e8 e0       	ldi	r30, 0x08	; 8
   10f2a:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

00010f2e <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   10f2e:	a0 e0       	ldi	r26, 0x00	; 0
   10f30:	b1 e0       	ldi	r27, 0x01	; 1
   10f32:	ed e9       	ldi	r30, 0x9D	; 157
   10f34:	f7 e8       	ldi	r31, 0x87	; 135
   10f36:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   10f3a:	18 2f       	mov	r17, r24
   10f3c:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   10f3e:	6b e6       	ldi	r22, 0x6B	; 107
   10f40:	78 e0       	ldi	r23, 0x08	; 8
   10f42:	9f da       	rcall	.-2754   	; 0x10482 <fopen>
   10f44:	6c 01       	movw	r12, r24
    if( fp == NULL)
   10f46:	89 2b       	or	r24, r25
   10f48:	39 f0       	breq	.+14     	; 0x10f58 <upload+0x2a>
   10f4a:	81 2c       	mov	r8, r1
   10f4c:	91 2c       	mov	r9, r1
   10f4e:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10f50:	ce 01       	movw	r24, r28
   10f52:	01 96       	adiw	r24, 0x01	; 1
   10f54:	7c 01       	movw	r14, r24
   10f56:	3c c0       	rjmp	.+120    	; 0x10fd0 <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   10f58:	0f 93       	push	r16
   10f5a:	1f 93       	push	r17
   10f5c:	80 e9       	ldi	r24, 0x90	; 144
   10f5e:	9c e0       	ldi	r25, 0x0C	; 12
   10f60:	1f 92       	push	r1
   10f62:	9f 93       	push	r25
   10f64:	8f 93       	push	r24
   10f66:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   10f6a:	0f 90       	pop	r0
   10f6c:	0f 90       	pop	r0
   10f6e:	0f 90       	pop	r0
   10f70:	0f 90       	pop	r0
   10f72:	0f 90       	pop	r0
   10f74:	60 e0       	ldi	r22, 0x00	; 0
   10f76:	70 e0       	ldi	r23, 0x00	; 0
   10f78:	80 e0       	ldi	r24, 0x00	; 0
   10f7a:	90 e0       	ldi	r25, 0x00	; 0
   10f7c:	3a c0       	rjmp	.+116    	; 0x10ff2 <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   10f7e:	f7 01       	movw	r30, r14
   10f80:	01 90       	ld	r0, Z+
   10f82:	00 20       	and	r0, r0
   10f84:	e9 f7       	brne	.-6      	; 0x10f80 <upload+0x52>
   10f86:	31 97       	sbiw	r30, 0x01	; 1
   10f88:	ee 19       	sub	r30, r14
   10f8a:	ff 09       	sbc	r31, r15
        if(len < 1)
   10f8c:	1e 16       	cp	r1, r30
   10f8e:	1f 06       	cpc	r1, r31
   10f90:	54 f5       	brge	.+84     	; 0x10fe6 <upload+0xb8>
            break;
        strcat(buffer,"\n");
   10f92:	6e e9       	ldi	r22, 0x9E	; 158
   10f94:	7b e0       	ldi	r23, 0x0B	; 11
   10f96:	c7 01       	movw	r24, r14
   10f98:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
        len = strlen(buffer);
   10f9c:	f7 01       	movw	r30, r14
   10f9e:	01 90       	ld	r0, Z+
   10fa0:	00 20       	and	r0, r0
   10fa2:	e9 f7       	brne	.-6      	; 0x10f9e <upload+0x70>
   10fa4:	31 97       	sbiw	r30, 0x01	; 1
   10fa6:	8f 01       	movw	r16, r30
   10fa8:	0e 19       	sub	r16, r14
   10faa:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   10fac:	96 01       	movw	r18, r12
   10fae:	a8 01       	movw	r20, r16
   10fb0:	61 e0       	ldi	r22, 0x01	; 1
   10fb2:	70 e0       	ldi	r23, 0x00	; 0
   10fb4:	c7 01       	movw	r24, r14
   10fb6:	8d d8       	rcall	.-3814   	; 0x100d2 <fwrite>
        if(len != len2)
   10fb8:	08 17       	cp	r16, r24
   10fba:	19 07       	cpc	r17, r25
   10fbc:	a1 f4       	brne	.+40     	; 0x10fe6 <upload+0xb8>
            break;
        size += len;
   10fbe:	a8 01       	movw	r20, r16
   10fc0:	01 2e       	mov	r0, r17
   10fc2:	00 0c       	add	r0, r0
   10fc4:	66 0b       	sbc	r22, r22
   10fc6:	77 0b       	sbc	r23, r23
   10fc8:	84 0e       	add	r8, r20
   10fca:	95 1e       	adc	r9, r21
   10fcc:	a6 1e       	adc	r10, r22
   10fce:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10fd0:	40 91 7a 1c 	lds	r20, 0x1C7A	; 0x801c7a <__iob>
   10fd4:	50 91 7b 1c 	lds	r21, 0x1C7B	; 0x801c7b <__iob+0x1>
   10fd8:	6e ef       	ldi	r22, 0xFE	; 254
   10fda:	70 e0       	ldi	r23, 0x00	; 0
   10fdc:	c7 01       	movw	r24, r14
   10fde:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
   10fe2:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   10fe4:	61 f6       	brne	.-104    	; 0x10f7e <upload+0x50>
   10fe6:	c6 01       	movw	r24, r12
   10fe8:	f6 d8       	rcall	.-3604   	; 0x101d6 <fclose>
    sync();
   10fea:	0e 94 e6 7f 	call	0xffcc	; 0xffcc <sync>
    return(size);
   10fee:	b4 01       	movw	r22, r8
   10ff0:	c5 01       	movw	r24, r10
}
   10ff2:	d3 95       	inc	r29
   10ff4:	ec e0       	ldi	r30, 0x0C	; 12
   10ff6:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00010ffa <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10ffa:	a0 e0       	ldi	r26, 0x00	; 0
   10ffc:	b1 e0       	ldi	r27, 0x01	; 1
   10ffe:	e3 e0       	ldi	r30, 0x03	; 3
   11000:	f8 e8       	ldi	r31, 0x88	; 136
   11002:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   11006:	fb 01       	movw	r30, r22
   11008:	c0 80       	ld	r12, Z
   1100a:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1100c:	c1 14       	cp	r12, r1
   1100e:	d1 04       	cpc	r13, r1
   11010:	19 f4       	brne	.+6      	; 0x11018 <posix_tests+0x1e>
        return(0);
   11012:	80 e0       	ldi	r24, 0x00	; 0
   11014:	90 e0       	ldi	r25, 0x00	; 0
   11016:	2d c2       	rjmp	.+1114   	; 0x11472 <posix_tests+0x478>
   11018:	4b 01       	movw	r8, r22
   1101a:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1101c:	69 e0       	ldi	r22, 0x09	; 9
   1101e:	7b e0       	ldi	r23, 0x0B	; 11
   11020:	c6 01       	movw	r24, r12
   11022:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   11026:	89 2b       	or	r24, r25
   11028:	a9 f0       	breq	.+42     	; 0x11054 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1102a:	f4 01       	movw	r30, r8
   1102c:	c2 80       	ldd	r12, Z+2	; 0x02
   1102e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   11030:	c1 14       	cp	r12, r1
   11032:	d1 04       	cpc	r13, r1
   11034:	21 f4       	brne	.+8      	; 0x1103e <posix_tests+0x44>
        {
            posix_help(1);
   11036:	81 e0       	ldi	r24, 0x01	; 1
   11038:	90 e0       	ldi	r25, 0x00	; 0
   1103a:	50 da       	rcall	.-2912   	; 0x104dc <posix_help>
   1103c:	18 c2       	rjmp	.+1072   	; 0x1146e <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1103e:	6b e0       	ldi	r22, 0x0B	; 11
   11040:	76 e1       	ldi	r23, 0x16	; 22
   11042:	c6 01       	movw	r24, r12
   11044:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   11048:	89 2b       	or	r24, r25
   1104a:	a9 f7       	brne	.-22     	; 0x11036 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1104c:	f2 e0       	ldi	r31, 0x02	; 2
   1104e:	6f 2e       	mov	r6, r31
   11050:	71 2c       	mov	r7, r1
   11052:	03 c0       	rjmp	.+6      	; 0x1105a <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   11054:	66 24       	eor	r6, r6
   11056:	63 94       	inc	r6
   11058:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1105a:	73 01       	movw	r14, r6
   1105c:	ff ef       	ldi	r31, 0xFF	; 255
   1105e:	ef 1a       	sub	r14, r31
   11060:	ff 0a       	sbc	r15, r31
   11062:	98 01       	movw	r18, r16
   11064:	a7 01       	movw	r20, r14
   11066:	6f e0       	ldi	r22, 0x0F	; 15
   11068:	7b e0       	ldi	r23, 0x0B	; 11
   1106a:	c6 01       	movw	r24, r12
   1106c:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11070:	89 2b       	or	r24, r25
   11072:	a1 f1       	breq	.+104    	; 0x110dc <posix_tests+0xe2>
   11074:	73 01       	movw	r14, r6
   11076:	ee 0c       	add	r14, r14
   11078:	ff 1c       	adc	r15, r15
   1107a:	e8 0c       	add	r14, r8
   1107c:	f9 1c       	adc	r15, r9
   1107e:	57 01       	movw	r10, r14
   11080:	47 01       	movw	r8, r14
   11082:	63 01       	movw	r12, r6
   11084:	41 2c       	mov	r4, r1
   11086:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11088:	c0 16       	cp	r12, r16
   1108a:	d1 06       	cpc	r13, r17
   1108c:	1c f5       	brge	.+70     	; 0x110d4 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   1108e:	63 e1       	ldi	r22, 0x13	; 19
   11090:	7b e0       	ldi	r23, 0x0B	; 11
   11092:	f4 01       	movw	r30, r8
   11094:	81 91       	ld	r24, Z+
   11096:	91 91       	ld	r25, Z+
   11098:	4f 01       	movw	r8, r30
   1109a:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   1109e:	89 2b       	or	r24, r25
   110a0:	19 f0       	breq	.+6      	; 0x110a8 <posix_tests+0xae>
                page = 1;
   110a2:	44 24       	eor	r4, r4
   110a4:	43 94       	inc	r4
   110a6:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   110a8:	ff ef       	ldi	r31, 0xFF	; 255
   110aa:	cf 1a       	sub	r12, r31
   110ac:	df 0a       	sbc	r13, r31
   110ae:	ec cf       	rjmp	.-40     	; 0x11088 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   110b0:	63 e1       	ldi	r22, 0x13	; 19
   110b2:	7b e0       	ldi	r23, 0x0B	; 11
   110b4:	f5 01       	movw	r30, r10
   110b6:	81 91       	ld	r24, Z+
   110b8:	91 91       	ld	r25, Z+
   110ba:	5f 01       	movw	r10, r30
   110bc:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   110c0:	89 2b       	or	r24, r25
   110c2:	29 f4       	brne	.+10     	; 0x110ce <posix_tests+0xd4>
                cat(argv[ind], page);
   110c4:	b2 01       	movw	r22, r4
   110c6:	f7 01       	movw	r30, r14
   110c8:	80 81       	ld	r24, Z
   110ca:	91 81       	ldd	r25, Z+1	; 0x01
   110cc:	36 db       	rcall	.-2452   	; 0x1073a <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   110ce:	ff ef       	ldi	r31, 0xFF	; 255
   110d0:	6f 1a       	sub	r6, r31
   110d2:	7f 0a       	sbc	r7, r31
   110d4:	60 16       	cp	r6, r16
   110d6:	71 06       	cpc	r7, r17
   110d8:	5c f3       	brlt	.-42     	; 0x110b0 <posix_tests+0xb6>
   110da:	c9 c1       	rjmp	.+914    	; 0x1146e <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   110dc:	53 01       	movw	r10, r6
   110de:	82 e0       	ldi	r24, 0x02	; 2
   110e0:	a8 0e       	add	r10, r24
   110e2:	b1 1c       	adc	r11, r1
   110e4:	98 01       	movw	r18, r16
   110e6:	a5 01       	movw	r20, r10
   110e8:	66 e1       	ldi	r22, 0x16	; 22
   110ea:	7b e0       	ldi	r23, 0x0B	; 11
   110ec:	c6 01       	movw	r24, r12
   110ee:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   110f2:	89 2b       	or	r24, r25
   110f4:	b1 f0       	breq	.+44     	; 0x11122 <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   110f6:	ee 0c       	add	r14, r14
   110f8:	ff 1c       	adc	r15, r15
   110fa:	e8 0c       	add	r14, r8
   110fc:	f9 1c       	adc	r15, r9
   110fe:	48 e0       	ldi	r20, 0x08	; 8
   11100:	50 e0       	ldi	r21, 0x00	; 0
   11102:	60 e0       	ldi	r22, 0x00	; 0
   11104:	70 e0       	ldi	r23, 0x00	; 0
   11106:	f7 01       	movw	r30, r14
   11108:	80 81       	ld	r24, Z
   1110a:	91 81       	ldd	r25, Z+1	; 0x01
   1110c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
   11110:	ab 01       	movw	r20, r22
   11112:	bc 01       	movw	r22, r24
   11114:	f7 01       	movw	r30, r14
   11116:	32 97       	sbiw	r30, 0x02	; 2
   11118:	80 81       	ld	r24, Z
   1111a:	91 81       	ldd	r25, Z+1	; 0x01
   1111c:	0e 94 e4 7a 	call	0xf5c8	; 0xf5c8 <chmod>
   11120:	a6 c1       	rjmp	.+844    	; 0x1146e <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   11122:	98 01       	movw	r18, r16
   11124:	a5 01       	movw	r20, r10
   11126:	6c e1       	ldi	r22, 0x1C	; 28
   11128:	7b e0       	ldi	r23, 0x0B	; 11
   1112a:	c6 01       	movw	r24, r12
   1112c:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11130:	89 2b       	or	r24, r25
   11132:	61 f0       	breq	.+24     	; 0x1114c <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   11134:	ee 0c       	add	r14, r14
   11136:	ff 1c       	adc	r15, r15
   11138:	f4 01       	movw	r30, r8
   1113a:	ee 0d       	add	r30, r14
   1113c:	ff 1d       	adc	r31, r15
   1113e:	60 81       	ld	r22, Z
   11140:	71 81       	ldd	r23, Z+1	; 0x01
   11142:	32 97       	sbiw	r30, 0x02	; 2
   11144:	80 81       	ld	r24, Z
   11146:	91 81       	ldd	r25, Z+1	; 0x01
   11148:	e5 d9       	rcall	.-3126   	; 0x10514 <copy>
   1114a:	91 c1       	rjmp	.+802    	; 0x1146e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1114c:	98 01       	movw	r18, r16
   1114e:	a7 01       	movw	r20, r14
   11150:	61 e2       	ldi	r22, 0x21	; 33
   11152:	7b e0       	ldi	r23, 0x0B	; 11
   11154:	c6 01       	movw	r24, r12
   11156:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1115a:	89 2b       	or	r24, r25
   1115c:	59 f0       	breq	.+22     	; 0x11174 <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   1115e:	73 01       	movw	r14, r6
   11160:	ee 0c       	add	r14, r14
   11162:	ff 1c       	adc	r15, r15
   11164:	f4 01       	movw	r30, r8
   11166:	ee 0d       	add	r30, r14
   11168:	ff 1d       	adc	r31, r15
   1116a:	80 81       	ld	r24, Z
   1116c:	91 81       	ldd	r25, Z+1	; 0x01
   1116e:	0e 94 c5 7a 	call	0xf58a	; 0xf58a <chdir>
   11172:	7d c1       	rjmp	.+762    	; 0x1146e <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   11174:	98 01       	movw	r18, r16
   11176:	a7 01       	movw	r20, r14
   11178:	64 e2       	ldi	r22, 0x24	; 36
   1117a:	7b e0       	ldi	r23, 0x0B	; 11
   1117c:	c6 01       	movw	r24, r12
   1117e:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11182:	89 2b       	or	r24, r25
   11184:	a1 f1       	breq	.+104    	; 0x111ee <posix_tests+0x1f4>
   11186:	73 01       	movw	r14, r6
   11188:	ee 0c       	add	r14, r14
   1118a:	ff 1c       	adc	r15, r15
   1118c:	e8 0c       	add	r14, r8
   1118e:	f9 1c       	adc	r15, r9
   11190:	57 01       	movw	r10, r14
   11192:	47 01       	movw	r8, r14
   11194:	63 01       	movw	r12, r6
   11196:	41 2c       	mov	r4, r1
   11198:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1119a:	c0 16       	cp	r12, r16
   1119c:	d1 06       	cpc	r13, r17
   1119e:	1c f5       	brge	.+70     	; 0x111e6 <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   111a0:	63 e1       	ldi	r22, 0x13	; 19
   111a2:	7b e0       	ldi	r23, 0x0B	; 11
   111a4:	f4 01       	movw	r30, r8
   111a6:	81 91       	ld	r24, Z+
   111a8:	91 91       	ld	r25, Z+
   111aa:	4f 01       	movw	r8, r30
   111ac:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   111b0:	89 2b       	or	r24, r25
   111b2:	19 f0       	breq	.+6      	; 0x111ba <posix_tests+0x1c0>
                page = 1;
   111b4:	44 24       	eor	r4, r4
   111b6:	43 94       	inc	r4
   111b8:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   111ba:	ff ef       	ldi	r31, 0xFF	; 255
   111bc:	cf 1a       	sub	r12, r31
   111be:	df 0a       	sbc	r13, r31
   111c0:	ec cf       	rjmp	.-40     	; 0x1119a <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   111c2:	63 e1       	ldi	r22, 0x13	; 19
   111c4:	7b e0       	ldi	r23, 0x0B	; 11
   111c6:	f5 01       	movw	r30, r10
   111c8:	81 91       	ld	r24, Z+
   111ca:	91 91       	ld	r25, Z+
   111cc:	5f 01       	movw	r10, r30
   111ce:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   111d2:	89 2b       	or	r24, r25
   111d4:	29 f4       	brne	.+10     	; 0x111e0 <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   111d6:	b2 01       	movw	r22, r4
   111d8:	f7 01       	movw	r30, r14
   111da:	80 81       	ld	r24, Z
   111dc:	91 81       	ldd	r25, Z+1	; 0x01
   111de:	1a db       	rcall	.-2508   	; 0x10814 <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   111e0:	ff ef       	ldi	r31, 0xFF	; 255
   111e2:	6f 1a       	sub	r6, r31
   111e4:	7f 0a       	sbc	r7, r31
   111e6:	60 16       	cp	r6, r16
   111e8:	71 06       	cpc	r7, r17
   111ea:	5c f3       	brlt	.-42     	; 0x111c2 <posix_tests+0x1c8>
   111ec:	40 c1       	rjmp	.+640    	; 0x1146e <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   111ee:	98 01       	movw	r18, r16
   111f0:	a5 01       	movw	r20, r10
   111f2:	6c e2       	ldi	r22, 0x2C	; 44
   111f4:	7b e0       	ldi	r23, 0x0B	; 11
   111f6:	c6 01       	movw	r24, r12
   111f8:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   111fc:	89 2b       	or	r24, r25
   111fe:	61 f0       	breq	.+24     	; 0x11218 <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   11200:	ee 0c       	add	r14, r14
   11202:	ff 1c       	adc	r15, r15
   11204:	f4 01       	movw	r30, r8
   11206:	ee 0d       	add	r30, r14
   11208:	ff 1d       	adc	r31, r15
   1120a:	60 81       	ld	r22, Z
   1120c:	71 81       	ldd	r23, Z+1	; 0x01
   1120e:	32 97       	sbiw	r30, 0x02	; 2
   11210:	80 81       	ld	r24, Z
   11212:	91 81       	ldd	r25, Z+1	; 0x01
   11214:	ec dd       	rcall	.-1064   	; 0x10dee <logfile>
   11216:	2b c1       	rjmp	.+598    	; 0x1146e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   11218:	98 01       	movw	r18, r16
   1121a:	a3 01       	movw	r20, r6
   1121c:	69 e3       	ldi	r22, 0x39	; 57
   1121e:	78 e0       	ldi	r23, 0x08	; 8
   11220:	c6 01       	movw	r24, r12
   11222:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11226:	89 2b       	or	r24, r25
   11228:	69 f1       	breq	.+90     	; 0x11284 <posix_tests+0x28a>
   1122a:	73 01       	movw	r14, r6
   1122c:	ee 0c       	add	r14, r14
   1122e:	ff 1c       	adc	r15, r15
   11230:	e8 0c       	add	r14, r8
   11232:	f9 1c       	adc	r15, r9
   11234:	c1 2c       	mov	r12, r1
   11236:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   11238:	c6 01       	movw	r24, r12
   1123a:	86 0d       	add	r24, r6
   1123c:	97 1d       	adc	r25, r7
   1123e:	80 17       	cp	r24, r16
   11240:	91 07       	cpc	r25, r17
   11242:	b4 f4       	brge	.+44     	; 0x11270 <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   11244:	60 e3       	ldi	r22, 0x30	; 48
   11246:	7b e0       	ldi	r23, 0x0B	; 11
   11248:	f7 01       	movw	r30, r14
   1124a:	80 81       	ld	r24, Z
   1124c:	91 81       	ldd	r25, Z+1	; 0x01
   1124e:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   11252:	89 2b       	or	r24, r25
                ls(argv[i],1);
   11254:	31 f4       	brne	.+12     	; 0x11262 <posix_tests+0x268>
   11256:	61 e0       	ldi	r22, 0x01	; 1
   11258:	70 e0       	ldi	r23, 0x00	; 0
   1125a:	f7 01       	movw	r30, r14
   1125c:	80 81       	ld	r24, Z
   1125e:	91 81       	ldd	r25, Z+1	; 0x01
            ++args;
   11260:	aa dc       	rcall	.-1708   	; 0x10bb6 <ls>
   11262:	ff ef       	ldi	r31, 0xFF	; 255
   11264:	cf 1a       	sub	r12, r31
   11266:	df 0a       	sbc	r13, r31
   11268:	82 e0       	ldi	r24, 0x02	; 2
   1126a:	e8 0e       	add	r14, r24
   1126c:	f1 1c       	adc	r15, r1
        }
        if(!args)
   1126e:	e4 cf       	rjmp	.-56     	; 0x11238 <posix_tests+0x23e>
   11270:	c1 14       	cp	r12, r1
   11272:	d1 04       	cpc	r13, r1
        {
            ls("",1);
   11274:	09 f0       	breq	.+2      	; 0x11278 <posix_tests+0x27e>
   11276:	fb c0       	rjmp	.+502    	; 0x1146e <posix_tests+0x474>
   11278:	61 e0       	ldi	r22, 0x01	; 1
   1127a:	70 e0       	ldi	r23, 0x00	; 0
   1127c:	8f e9       	ldi	r24, 0x9F	; 159
   1127e:	9b e0       	ldi	r25, 0x0B	; 11
   11280:	9a dc       	rcall	.-1740   	; 0x10bb6 <ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   11282:	f5 c0       	rjmp	.+490    	; 0x1146e <posix_tests+0x474>
   11284:	98 01       	movw	r18, r16
   11286:	a7 01       	movw	r20, r14
   11288:	63 e3       	ldi	r22, 0x33	; 51
   1128a:	7b e0       	ldi	r23, 0x0B	; 11
   1128c:	c6 01       	movw	r24, r12
   1128e:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11292:	89 2b       	or	r24, r25
    {

        mkfs(argv[ind++]);
   11294:	59 f0       	breq	.+22     	; 0x112ac <posix_tests+0x2b2>
   11296:	73 01       	movw	r14, r6
   11298:	ee 0c       	add	r14, r14
   1129a:	ff 1c       	adc	r15, r15
   1129c:	f4 01       	movw	r30, r8
   1129e:	ee 0d       	add	r30, r14
   112a0:	ff 1d       	adc	r31, r15
   112a2:	80 81       	ld	r24, Z
   112a4:	91 81       	ldd	r25, Z+1	; 0x01
   112a6:	0e 94 9d 7c 	call	0xf93a	; 0xf93a <mkfs>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   112aa:	e1 c0       	rjmp	.+450    	; 0x1146e <posix_tests+0x474>
   112ac:	98 01       	movw	r18, r16
   112ae:	a7 01       	movw	r20, r14
   112b0:	68 e3       	ldi	r22, 0x38	; 56
   112b2:	7b e0       	ldi	r23, 0x0B	; 11
   112b4:	c6 01       	movw	r24, r12
   112b6:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   112ba:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   112bc:	19 f1       	breq	.+70     	; 0x11304 <posix_tests+0x30a>
   112be:	e0 16       	cp	r14, r16
   112c0:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   112c2:	7c f4       	brge	.+30     	; 0x112e2 <posix_tests+0x2e8>
   112c4:	ee 0c       	add	r14, r14
   112c6:	ff 1c       	adc	r15, r15
   112c8:	f4 01       	movw	r30, r8
   112ca:	ee 0d       	add	r30, r14
   112cc:	ff 1d       	adc	r31, r15
   112ce:	48 e0       	ldi	r20, 0x08	; 8
   112d0:	50 e0       	ldi	r21, 0x00	; 0
   112d2:	60 e0       	ldi	r22, 0x00	; 0
   112d4:	70 e0       	ldi	r23, 0x00	; 0
   112d6:	80 81       	ld	r24, Z
   112d8:	91 81       	ldd	r25, Z+1	; 0x01
   112da:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <strtol>
   112de:	ab 01       	movw	r20, r22
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   112e0:	02 c0       	rjmp	.+4      	; 0x112e6 <posix_tests+0x2ec>
   112e2:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   112e4:	51 e0       	ldi	r21, 0x01	; 1
   112e6:	05 2e       	mov	r0, r21
   112e8:	00 0c       	add	r0, r0
   112ea:	66 0b       	sbc	r22, r22
   112ec:	77 0b       	sbc	r23, r23
   112ee:	73 01       	movw	r14, r6
   112f0:	ee 0c       	add	r14, r14
   112f2:	ff 1c       	adc	r15, r15
   112f4:	f4 01       	movw	r30, r8
   112f6:	ee 0d       	add	r30, r14
   112f8:	ff 1d       	adc	r31, r15
   112fa:	80 81       	ld	r24, Z
   112fc:	91 81       	ldd	r25, Z+1	; 0x01
   112fe:	0e 94 32 7b 	call	0xf664	; 0xf664 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   11302:	b5 c0       	rjmp	.+362    	; 0x1146e <posix_tests+0x474>
   11304:	98 01       	movw	r18, r16
   11306:	a7 01       	movw	r20, r14
   11308:	6e e3       	ldi	r22, 0x3E	; 62
   1130a:	7b e0       	ldi	r23, 0x0B	; 11
   1130c:	c6 01       	movw	r24, r12
   1130e:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11312:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   11314:	79 f0       	breq	.+30     	; 0x11334 <posix_tests+0x33a>
   11316:	73 01       	movw	r14, r6
   11318:	ee 0c       	add	r14, r14
   1131a:	ff 1c       	adc	r15, r15
   1131c:	f4 01       	movw	r30, r8
   1131e:	ee 0d       	add	r30, r14
   11320:	ff 1d       	adc	r31, r15
   11322:	80 81       	ld	r24, Z
   11324:	91 81       	ldd	r25, Z+1	; 0x01
   11326:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1132a:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_pagesize+0x1>
   1132e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   11332:	9d c0       	rjmp	.+314    	; 0x1146e <posix_tests+0x474>
   11334:	98 01       	movw	r18, r16
   11336:	a3 01       	movw	r20, r6
   11338:	63 e4       	ldi	r22, 0x43	; 67
   1133a:	7b e0       	ldi	r23, 0x0B	; 11
   1133c:	c6 01       	movw	r24, r12
   1133e:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11342:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   11344:	a9 f0       	breq	.+42     	; 0x11370 <posix_tests+0x376>
   11346:	6e ef       	ldi	r22, 0xFE	; 254
   11348:	70 e0       	ldi	r23, 0x00	; 0
   1134a:	ce 01       	movw	r24, r28
   1134c:	01 96       	adiw	r24, 0x01	; 1
   1134e:	0e 94 0d 7b 	call	0xf61a	; 0xf61a <getcwd>
   11352:	9f 93       	push	r25
   11354:	8f 93       	push	r24
   11356:	84 e5       	ldi	r24, 0x54	; 84
   11358:	9e e0       	ldi	r25, 0x0E	; 14
   1135a:	1f 92       	push	r1
   1135c:	9f 93       	push	r25
   1135e:	8f 93       	push	r24
   11360:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11364:	0f 90       	pop	r0
   11366:	0f 90       	pop	r0
   11368:	0f 90       	pop	r0
   1136a:	0f 90       	pop	r0
   1136c:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1136e:	7f c0       	rjmp	.+254    	; 0x1146e <posix_tests+0x474>
   11370:	98 01       	movw	r18, r16
   11372:	a5 01       	movw	r20, r10
   11374:	67 e4       	ldi	r22, 0x47	; 71
   11376:	7b e0       	ldi	r23, 0x0B	; 11
   11378:	c6 01       	movw	r24, r12
   1137a:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1137e:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   11380:	69 f0       	breq	.+26     	; 0x1139c <posix_tests+0x3a2>
   11382:	ee 0c       	add	r14, r14
   11384:	ff 1c       	adc	r15, r15
   11386:	f4 01       	movw	r30, r8
   11388:	ee 0d       	add	r30, r14
   1138a:	ff 1d       	adc	r31, r15
   1138c:	60 81       	ld	r22, Z
   1138e:	71 81       	ldd	r23, Z+1	; 0x01
   11390:	32 97       	sbiw	r30, 0x02	; 2
   11392:	80 81       	ld	r24, Z
   11394:	91 81       	ldd	r25, Z+1	; 0x01
   11396:	0e 94 60 7b 	call	0xf6c0	; 0xf6c0 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1139a:	69 c0       	rjmp	.+210    	; 0x1146e <posix_tests+0x474>
   1139c:	98 01       	movw	r18, r16
   1139e:	a7 01       	movw	r20, r14
   113a0:	6e e4       	ldi	r22, 0x4E	; 78
   113a2:	7b e0       	ldi	r23, 0x0B	; 11
   113a4:	c6 01       	movw	r24, r12
   113a6:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   113aa:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   113ac:	59 f0       	breq	.+22     	; 0x113c4 <posix_tests+0x3ca>
   113ae:	73 01       	movw	r14, r6
   113b0:	ee 0c       	add	r14, r14
   113b2:	ff 1c       	adc	r15, r15
   113b4:	f4 01       	movw	r30, r8
   113b6:	ee 0d       	add	r30, r14
   113b8:	ff 1d       	adc	r31, r15
   113ba:	80 81       	ld	r24, Z
   113bc:	91 81       	ldd	r25, Z+1	; 0x01
   113be:	0e 94 7f 7b 	call	0xf6fe	; 0xf6fe <unlink>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   113c2:	55 c0       	rjmp	.+170    	; 0x1146e <posix_tests+0x474>
   113c4:	98 01       	movw	r18, r16
   113c6:	a7 01       	movw	r20, r14
   113c8:	61 e5       	ldi	r22, 0x51	; 81
   113ca:	7b e0       	ldi	r23, 0x0B	; 11
   113cc:	c6 01       	movw	r24, r12
   113ce:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   113d2:	89 2b       	or	r24, r25
    {
        sum(argv[ind]);
   113d4:	51 f0       	breq	.+20     	; 0x113ea <posix_tests+0x3f0>
   113d6:	73 01       	movw	r14, r6
   113d8:	ee 0c       	add	r14, r14
   113da:	ff 1c       	adc	r15, r15
   113dc:	f4 01       	movw	r30, r8
   113de:	ee 0d       	add	r30, r14
   113e0:	ff 1d       	adc	r31, r15
   113e2:	80 81       	ld	r24, Z
   113e4:	91 81       	ldd	r25, Z+1	; 0x01
   113e6:	53 dd       	rcall	.-1370   	; 0x10e8e <sum>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   113e8:	42 c0       	rjmp	.+132    	; 0x1146e <posix_tests+0x474>
   113ea:	98 01       	movw	r18, r16
   113ec:	a7 01       	movw	r20, r14
   113ee:	65 e5       	ldi	r22, 0x55	; 85
   113f0:	7b e0       	ldi	r23, 0x0B	; 11
   113f2:	c6 01       	movw	r24, r12
   113f4:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   113f8:	89 2b       	or	r24, r25
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   113fa:	91 f0       	breq	.+36     	; 0x11420 <posix_tests+0x426>
   113fc:	73 01       	movw	r14, r6
   113fe:	ee 0c       	add	r14, r14
   11400:	ff 1c       	adc	r15, r15
   11402:	f4 01       	movw	r30, r8
   11404:	ee 0d       	add	r30, r14
   11406:	ff 1d       	adc	r31, r15
   11408:	be 01       	movw	r22, r28
   1140a:	6f 5f       	subi	r22, 0xFF	; 255
   1140c:	7f 4f       	sbci	r23, 0xFF	; 255
   1140e:	80 81       	ld	r24, Z
   11410:	91 81       	ldd	r25, Z+1	; 0x01
   11412:	0e 94 55 7d 	call	0xfaaa	; 0xfaaa <stat>
        dump_stat(&p);
   11416:	ce 01       	movw	r24, r28
   11418:	01 96       	adiw	r24, 0x01	; 1
   1141a:	0e 94 0a 7a 	call	0xf414	; 0xf414 <dump_stat>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1141e:	27 c0       	rjmp	.+78     	; 0x1146e <posix_tests+0x474>
   11420:	98 01       	movw	r18, r16
   11422:	a7 01       	movw	r20, r14
   11424:	6a e5       	ldi	r22, 0x5A	; 90
   11426:	7b e0       	ldi	r23, 0x0B	; 11
   11428:	c6 01       	movw	r24, r12
   1142a:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1142e:	89 2b       	or	r24, r25
    {
        rmdir(argv[ind]);
   11430:	59 f0       	breq	.+22     	; 0x11448 <posix_tests+0x44e>
   11432:	73 01       	movw	r14, r6
   11434:	ee 0c       	add	r14, r14
   11436:	ff 1c       	adc	r15, r15
   11438:	f4 01       	movw	r30, r8
   1143a:	ee 0d       	add	r30, r14
   1143c:	ff 1d       	adc	r31, r15
   1143e:	80 81       	ld	r24, Z
   11440:	91 81       	ldd	r25, Z+1	; 0x01
   11442:	0e 94 9e 7b 	call	0xf73c	; 0xf73c <rmdir>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   11446:	13 c0       	rjmp	.+38     	; 0x1146e <posix_tests+0x474>
   11448:	98 01       	movw	r18, r16
   1144a:	a7 01       	movw	r20, r14
   1144c:	60 e6       	ldi	r22, 0x60	; 96
   1144e:	7b e0       	ldi	r23, 0x0B	; 11
   11450:	c6 01       	movw	r24, r12
   11452:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   11456:	89 2b       	or	r24, r25
    {
        upload(argv[ind]);
   11458:	09 f4       	brne	.+2      	; 0x1145c <posix_tests+0x462>
   1145a:	db cd       	rjmp	.-1098   	; 0x11012 <posix_tests+0x18>
   1145c:	73 01       	movw	r14, r6
   1145e:	ee 0c       	add	r14, r14
   11460:	ff 1c       	adc	r15, r15
   11462:	f4 01       	movw	r30, r8
   11464:	ee 0d       	add	r30, r14
   11466:	ff 1d       	adc	r31, r15
   11468:	80 81       	ld	r24, Z
        return(1);
   1146a:	91 81       	ldd	r25, Z+1	; 0x01
   1146c:	60 dd       	rcall	.-1344   	; 0x10f2e <upload>
    }

    return(0);
}
   1146e:	81 e0       	ldi	r24, 0x01	; 1
   11470:	90 e0       	ldi	r25, 0x00	; 0
   11472:	d3 95       	inc	r29
   11474:	e0 e1       	ldi	r30, 0x10	; 16
   11476:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

0001147a <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1147a:	61 e0       	ldi	r22, 0x01	; 1
   1147c:	70 e0       	ldi	r23, 0x00	; 0
   1147e:	8a ed       	ldi	r24, 0xDA	; 218
   11480:	9b e8       	ldi	r25, 0x8B	; 139
   11482:	0e 94 b2 33 	call	0x6764	; 0x6764 <set_timers>
   11486:	01 96       	adiw	r24, 0x01	; 1
   11488:	51 f4       	brne	.+20     	; 0x1149e <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   1148a:	85 ef       	ldi	r24, 0xF5	; 245
   1148c:	9f e0       	ldi	r25, 0x0F	; 15
   1148e:	1f 92       	push	r1
   11490:	9f 93       	push	r25
   11492:	8f 93       	push	r24
   11494:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11498:	0f 90       	pop	r0
   1149a:	0f 90       	pop	r0

    gpib_timer_reset();
   1149c:	0f 90       	pop	r0
   1149e:	78 c1       	rjmp	.+752    	; 0x11790 <gpib_timer_reset>
   114a0:	08 95       	ret

000114a2 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   114a2:	28 2f       	mov	r18, r24
   114a4:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   114a6:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   114a8:	88 0f       	add	r24, r24
        if(mask & 1)
   114aa:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   114ac:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   114ae:	26 95       	lsr	r18
   114b0:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   114b2:	d1 f7       	brne	.-12     	; 0x114a8 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   114b4:	08 95       	ret

000114b6 <ppr_set>:
   114b6:	f5 df       	rcall	.-22     	; 0x114a2 <reverse_8bits>
   114b8:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_ppr_reg>
   114bc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <SPI0_TXRX_Byte>
   114c0:	2a 9a       	sbi	0x05, 2	; 5
   114c2:	22 9a       	sbi	0x04, 2	; 4
   114c4:	2a 98       	cbi	0x05, 2	; 5
   114c6:	22 9a       	sbi	0x04, 2	; 4
   114c8:	08 95       	ret

000114ca <ppr_reg>:
   114ca:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_ppr_reg>
   114ce:	e9 cf       	rjmp	.-46     	; 0x114a2 <reverse_8bits>
   114d0:	08 95       	ret

000114d2 <ppr_init>:
   114d2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   114d6:	81 ff       	sbrs	r24, 1
   114d8:	0a c0       	rjmp	.+20     	; 0x114ee <ppr_init+0x1c>
   114da:	82 ee       	ldi	r24, 0xE2	; 226
   114dc:	9f e0       	ldi	r25, 0x0F	; 15
   114de:	1f 92       	push	r1
   114e0:	9f 93       	push	r25
   114e2:	8f 93       	push	r24
   114e4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   114e8:	0f 90       	pop	r0
   114ea:	0f 90       	pop	r0
   114ec:	0f 90       	pop	r0
   114ee:	80 e0       	ldi	r24, 0x00	; 0
   114f0:	e2 cf       	rjmp	.-60     	; 0x114b6 <ppr_set>
   114f2:	08 95       	ret

000114f4 <ppr_bit_set>:
   114f4:	21 e0       	ldi	r18, 0x01	; 1
   114f6:	30 e0       	ldi	r19, 0x00	; 0
   114f8:	01 c0       	rjmp	.+2      	; 0x114fc <ppr_bit_set+0x8>
   114fa:	22 0f       	add	r18, r18
   114fc:	8a 95       	dec	r24
   114fe:	ea f7       	brpl	.-6      	; 0x114fa <ppr_bit_set+0x6>
   11500:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_ppr_reg>
   11504:	82 2b       	or	r24, r18
   11506:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_ppr_reg>
   1150a:	d5 cf       	rjmp	.-86     	; 0x114b6 <ppr_set>
   1150c:	08 95       	ret

0001150e <ppr_bit_clr>:
   1150e:	21 e0       	ldi	r18, 0x01	; 1
   11510:	30 e0       	ldi	r19, 0x00	; 0
   11512:	01 c0       	rjmp	.+2      	; 0x11516 <ppr_bit_clr+0x8>
   11514:	22 0f       	add	r18, r18
   11516:	8a 95       	dec	r24
   11518:	ea f7       	brpl	.-6      	; 0x11514 <ppr_bit_clr+0x6>
   1151a:	20 95       	com	r18
   1151c:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_ppr_reg>
   11520:	82 23       	and	r24, r18
   11522:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_ppr_reg>
   11526:	c7 cf       	rjmp	.-114    	; 0x114b6 <ppr_set>
   11528:	08 95       	ret

0001152a <dbf_open>:
   1152a:	0f 93       	push	r16
   1152c:	1f 93       	push	r17
   1152e:	cf 93       	push	r28
   11530:	df 93       	push	r29
   11532:	16 2f       	mov	r17, r22
   11534:	07 2f       	mov	r16, r23
   11536:	0e 94 19 57 	call	0xae32	; 0xae32 <f_open>
   1153a:	ec 01       	movw	r28, r24
   1153c:	89 2b       	or	r24, r25
   1153e:	89 f0       	breq	.+34     	; 0x11562 <dbf_open+0x38>
   11540:	0f 93       	push	r16
   11542:	1f 93       	push	r17
   11544:	81 ed       	ldi	r24, 0xD1	; 209
   11546:	9f e0       	ldi	r25, 0x0F	; 15
   11548:	1f 92       	push	r1
   1154a:	9f 93       	push	r25
   1154c:	8f 93       	push	r24
   1154e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11552:	ce 01       	movw	r24, r28
   11554:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
   11558:	0f 90       	pop	r0
   1155a:	0f 90       	pop	r0
   1155c:	0f 90       	pop	r0
   1155e:	0f 90       	pop	r0
   11560:	0f 90       	pop	r0
   11562:	ce 01       	movw	r24, r28
   11564:	df 91       	pop	r29
   11566:	cf 91       	pop	r28
   11568:	1f 91       	pop	r17
   1156a:	0f 91       	pop	r16
   1156c:	08 95       	ret

0001156e <dbf_read>:
   1156e:	cf 93       	push	r28
   11570:	df 93       	push	r29
   11572:	0e 94 15 59 	call	0xb22a	; 0xb22a <f_read>
   11576:	ec 01       	movw	r28, r24
   11578:	89 2b       	or	r24, r25
   1157a:	69 f0       	breq	.+26     	; 0x11596 <dbf_read+0x28>
   1157c:	84 ec       	ldi	r24, 0xC4	; 196
   1157e:	9f e0       	ldi	r25, 0x0F	; 15
   11580:	1f 92       	push	r1
   11582:	9f 93       	push	r25
   11584:	8f 93       	push	r24
   11586:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1158a:	ce 01       	movw	r24, r28
   1158c:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
   11590:	0f 90       	pop	r0
   11592:	0f 90       	pop	r0
   11594:	0f 90       	pop	r0
   11596:	ce 01       	movw	r24, r28
   11598:	df 91       	pop	r29
   1159a:	cf 91       	pop	r28
   1159c:	08 95       	ret

0001159e <dbf_write>:
   1159e:	cf 93       	push	r28
   115a0:	df 93       	push	r29
   115a2:	0e 94 60 5a 	call	0xb4c0	; 0xb4c0 <f_write>
   115a6:	ec 01       	movw	r28, r24
   115a8:	89 2b       	or	r24, r25
   115aa:	69 f0       	breq	.+26     	; 0x115c6 <dbf_write+0x28>
   115ac:	86 eb       	ldi	r24, 0xB6	; 182
   115ae:	9f e0       	ldi	r25, 0x0F	; 15
   115b0:	1f 92       	push	r1
   115b2:	9f 93       	push	r25
   115b4:	8f 93       	push	r24
   115b6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   115ba:	ce 01       	movw	r24, r28
   115bc:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
   115c0:	0f 90       	pop	r0
   115c2:	0f 90       	pop	r0
   115c4:	0f 90       	pop	r0
   115c6:	ce 01       	movw	r24, r28
   115c8:	df 91       	pop	r29
   115ca:	cf 91       	pop	r28
   115cc:	08 95       	ret

000115ce <dbf_lseek>:
   115ce:	cf 93       	push	r28
   115d0:	df 93       	push	r29
   115d2:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_lseek>
   115d6:	ec 01       	movw	r28, r24
   115d8:	89 2b       	or	r24, r25
   115da:	69 f0       	breq	.+26     	; 0x115f6 <dbf_lseek+0x28>
   115dc:	89 ea       	ldi	r24, 0xA9	; 169
   115de:	9f e0       	ldi	r25, 0x0F	; 15
   115e0:	1f 92       	push	r1
   115e2:	9f 93       	push	r25
   115e4:	8f 93       	push	r24
   115e6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   115ea:	ce 01       	movw	r24, r28
   115ec:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
   115f0:	0f 90       	pop	r0
   115f2:	0f 90       	pop	r0
   115f4:	0f 90       	pop	r0
   115f6:	ce 01       	movw	r24, r28
   115f8:	df 91       	pop	r29
   115fa:	cf 91       	pop	r28
   115fc:	08 95       	ret

000115fe <dbf_close>:
   115fe:	cf 93       	push	r28
   11600:	df 93       	push	r29
   11602:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <f_close>
   11606:	ec 01       	movw	r28, r24
   11608:	89 2b       	or	r24, r25
   1160a:	69 f0       	breq	.+26     	; 0x11626 <dbf_close+0x28>
   1160c:	8b e9       	ldi	r24, 0x9B	; 155
   1160e:	9f e0       	ldi	r25, 0x0F	; 15
   11610:	1f 92       	push	r1
   11612:	9f 93       	push	r25
   11614:	8f 93       	push	r24
   11616:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1161a:	ce 01       	movw	r24, r28
   1161c:	0e 94 a5 73 	call	0xe74a	; 0xe74a <put_rc>
   11620:	0f 90       	pop	r0
   11622:	0f 90       	pop	r0
   11624:	0f 90       	pop	r0
   11626:	ce 01       	movw	r24, r28
   11628:	df 91       	pop	r29
   1162a:	cf 91       	pop	r28
   1162c:	08 95       	ret

0001162e <dbf_open_read>:
   1162e:	a6 e2       	ldi	r26, 0x26	; 38
   11630:	b2 e0       	ldi	r27, 0x02	; 2
   11632:	ed e1       	ldi	r30, 0x1D	; 29
   11634:	fb e8       	ldi	r31, 0x8B	; 139
   11636:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   1163a:	4a 01       	movw	r8, r20
   1163c:	5b 01       	movw	r10, r22
   1163e:	69 01       	movw	r12, r18
   11640:	cb 5d       	subi	r28, 0xDB	; 219
   11642:	dd 4f       	sbci	r29, 0xFD	; 253
   11644:	19 82       	std	Y+1, r1	; 0x01
   11646:	18 82       	st	Y, r1
   11648:	c5 52       	subi	r28, 0x25	; 37
   1164a:	d2 40       	sbci	r29, 0x02	; 2
   1164c:	43 e0       	ldi	r20, 0x03	; 3
   1164e:	bc 01       	movw	r22, r24
   11650:	ce 01       	movw	r24, r28
   11652:	01 96       	adiw	r24, 0x01	; 1
   11654:	6a df       	rcall	.-300    	; 0x1152a <dbf_open>
   11656:	89 2b       	or	r24, r25
   11658:	19 f0       	breq	.+6      	; 0x11660 <dbf_open_read+0x32>
   1165a:	81 e1       	ldi	r24, 0x11	; 17
   1165c:	90 e0       	ldi	r25, 0x00	; 0
   1165e:	2f c0       	rjmp	.+94     	; 0x116be <dbf_open_read+0x90>
   11660:	b5 01       	movw	r22, r10
   11662:	a4 01       	movw	r20, r8
   11664:	ce 01       	movw	r24, r28
   11666:	01 96       	adiw	r24, 0x01	; 1
   11668:	b2 df       	rcall	.-156    	; 0x115ce <dbf_lseek>
   1166a:	89 2b       	or	r24, r25
   1166c:	59 f0       	breq	.+22     	; 0x11684 <dbf_open_read+0x56>
   1166e:	85 e0       	ldi	r24, 0x05	; 5
   11670:	90 e0       	ldi	r25, 0x00	; 0
   11672:	f7 01       	movw	r30, r14
   11674:	91 83       	std	Z+1, r25	; 0x01
   11676:	80 83       	st	Z, r24
   11678:	ce 01       	movw	r24, r28
   1167a:	01 96       	adiw	r24, 0x01	; 1
   1167c:	c0 df       	rcall	.-128    	; 0x115fe <dbf_close>
   1167e:	8f ef       	ldi	r24, 0xFF	; 255
   11680:	9f ef       	ldi	r25, 0xFF	; 255
   11682:	27 c0       	rjmp	.+78     	; 0x116d2 <dbf_open_read+0xa4>
   11684:	9e 01       	movw	r18, r28
   11686:	2b 5d       	subi	r18, 0xDB	; 219
   11688:	3d 4f       	sbci	r19, 0xFD	; 253
   1168a:	a8 01       	movw	r20, r16
   1168c:	b6 01       	movw	r22, r12
   1168e:	ce 01       	movw	r24, r28
   11690:	01 96       	adiw	r24, 0x01	; 1
   11692:	6d df       	rcall	.-294    	; 0x1156e <dbf_read>
   11694:	89 2b       	or	r24, r25
   11696:	49 f4       	brne	.+18     	; 0x116aa <dbf_open_read+0x7c>
   11698:	cb 5d       	subi	r28, 0xDB	; 219
   1169a:	dd 4f       	sbci	r29, 0xFD	; 253
   1169c:	88 81       	ld	r24, Y
   1169e:	99 81       	ldd	r25, Y+1	; 0x01
   116a0:	c5 52       	subi	r28, 0x25	; 37
   116a2:	d2 40       	sbci	r29, 0x02	; 2
   116a4:	08 17       	cp	r16, r24
   116a6:	19 07       	cpc	r17, r25
   116a8:	19 f0       	breq	.+6      	; 0x116b0 <dbf_open_read+0x82>
   116aa:	81 e0       	ldi	r24, 0x01	; 1
   116ac:	90 e0       	ldi	r25, 0x00	; 0
   116ae:	e1 cf       	rjmp	.-62     	; 0x11672 <dbf_open_read+0x44>
   116b0:	ce 01       	movw	r24, r28
   116b2:	01 96       	adiw	r24, 0x01	; 1
   116b4:	a4 df       	rcall	.-184    	; 0x115fe <dbf_close>
   116b6:	89 2b       	or	r24, r25
   116b8:	31 f0       	breq	.+12     	; 0x116c6 <dbf_open_read+0x98>
   116ba:	80 e1       	ldi	r24, 0x10	; 16
   116bc:	90 e0       	ldi	r25, 0x00	; 0
   116be:	f7 01       	movw	r30, r14
   116c0:	91 83       	std	Z+1, r25	; 0x01
   116c2:	80 83       	st	Z, r24
   116c4:	dc cf       	rjmp	.-72     	; 0x1167e <dbf_open_read+0x50>
   116c6:	cb 5d       	subi	r28, 0xDB	; 219
   116c8:	dd 4f       	sbci	r29, 0xFD	; 253
   116ca:	88 81       	ld	r24, Y
   116cc:	99 81       	ldd	r25, Y+1	; 0x01
   116ce:	c5 52       	subi	r28, 0x25	; 37
   116d0:	d2 40       	sbci	r29, 0x02	; 2
   116d2:	ca 5d       	subi	r28, 0xDA	; 218
   116d4:	dd 4f       	sbci	r29, 0xFD	; 253
   116d6:	ec e0       	ldi	r30, 0x0C	; 12
   116d8:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

000116dc <dbf_open_write>:
   116dc:	a6 e2       	ldi	r26, 0x26	; 38
   116de:	b2 e0       	ldi	r27, 0x02	; 2
   116e0:	e4 e7       	ldi	r30, 0x74	; 116
   116e2:	fb e8       	ldi	r31, 0x8B	; 139
   116e4:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   116e8:	4a 01       	movw	r8, r20
   116ea:	5b 01       	movw	r10, r22
   116ec:	69 01       	movw	r12, r18
   116ee:	cb 5d       	subi	r28, 0xDB	; 219
   116f0:	dd 4f       	sbci	r29, 0xFD	; 253
   116f2:	19 82       	std	Y+1, r1	; 0x01
   116f4:	18 82       	st	Y, r1
   116f6:	c5 52       	subi	r28, 0x25	; 37
   116f8:	d2 40       	sbci	r29, 0x02	; 2
   116fa:	43 e0       	ldi	r20, 0x03	; 3
   116fc:	bc 01       	movw	r22, r24
   116fe:	ce 01       	movw	r24, r28
   11700:	01 96       	adiw	r24, 0x01	; 1
   11702:	13 df       	rcall	.-474    	; 0x1152a <dbf_open>
   11704:	89 2b       	or	r24, r25
   11706:	19 f0       	breq	.+6      	; 0x1170e <dbf_open_write+0x32>
   11708:	81 e1       	ldi	r24, 0x11	; 17
   1170a:	90 e0       	ldi	r25, 0x00	; 0
   1170c:	2f c0       	rjmp	.+94     	; 0x1176c <dbf_open_write+0x90>
   1170e:	b5 01       	movw	r22, r10
   11710:	a4 01       	movw	r20, r8
   11712:	ce 01       	movw	r24, r28
   11714:	01 96       	adiw	r24, 0x01	; 1
   11716:	5b df       	rcall	.-330    	; 0x115ce <dbf_lseek>
   11718:	89 2b       	or	r24, r25
   1171a:	59 f0       	breq	.+22     	; 0x11732 <dbf_open_write+0x56>
   1171c:	85 e0       	ldi	r24, 0x05	; 5
   1171e:	90 e0       	ldi	r25, 0x00	; 0
   11720:	f7 01       	movw	r30, r14
   11722:	91 83       	std	Z+1, r25	; 0x01
   11724:	80 83       	st	Z, r24
   11726:	ce 01       	movw	r24, r28
   11728:	01 96       	adiw	r24, 0x01	; 1
   1172a:	69 df       	rcall	.-302    	; 0x115fe <dbf_close>
   1172c:	8f ef       	ldi	r24, 0xFF	; 255
   1172e:	9f ef       	ldi	r25, 0xFF	; 255
   11730:	27 c0       	rjmp	.+78     	; 0x11780 <dbf_open_write+0xa4>
   11732:	9e 01       	movw	r18, r28
   11734:	2b 5d       	subi	r18, 0xDB	; 219
   11736:	3d 4f       	sbci	r19, 0xFD	; 253
   11738:	a8 01       	movw	r20, r16
   1173a:	b6 01       	movw	r22, r12
   1173c:	ce 01       	movw	r24, r28
   1173e:	01 96       	adiw	r24, 0x01	; 1
   11740:	2e df       	rcall	.-420    	; 0x1159e <dbf_write>
   11742:	89 2b       	or	r24, r25
   11744:	49 f4       	brne	.+18     	; 0x11758 <dbf_open_write+0x7c>
   11746:	cb 5d       	subi	r28, 0xDB	; 219
   11748:	dd 4f       	sbci	r29, 0xFD	; 253
   1174a:	88 81       	ld	r24, Y
   1174c:	99 81       	ldd	r25, Y+1	; 0x01
   1174e:	c5 52       	subi	r28, 0x25	; 37
   11750:	d2 40       	sbci	r29, 0x02	; 2
   11752:	08 17       	cp	r16, r24
   11754:	19 07       	cpc	r17, r25
   11756:	19 f0       	breq	.+6      	; 0x1175e <dbf_open_write+0x82>
   11758:	81 e0       	ldi	r24, 0x01	; 1
   1175a:	90 e0       	ldi	r25, 0x00	; 0
   1175c:	e1 cf       	rjmp	.-62     	; 0x11720 <dbf_open_write+0x44>
   1175e:	ce 01       	movw	r24, r28
   11760:	01 96       	adiw	r24, 0x01	; 1
   11762:	4d df       	rcall	.-358    	; 0x115fe <dbf_close>
   11764:	89 2b       	or	r24, r25
   11766:	31 f0       	breq	.+12     	; 0x11774 <dbf_open_write+0x98>
   11768:	80 e1       	ldi	r24, 0x10	; 16
   1176a:	90 e0       	ldi	r25, 0x00	; 0
   1176c:	f7 01       	movw	r30, r14
   1176e:	91 83       	std	Z+1, r25	; 0x01
   11770:	80 83       	st	Z, r24
   11772:	dc cf       	rjmp	.-72     	; 0x1172c <dbf_open_write+0x50>
   11774:	cb 5d       	subi	r28, 0xDB	; 219
   11776:	dd 4f       	sbci	r29, 0xFD	; 253
   11778:	88 81       	ld	r24, Y
   1177a:	99 81       	ldd	r25, Y+1	; 0x01
   1177c:	c5 52       	subi	r28, 0x25	; 37
   1177e:	d2 40       	sbci	r29, 0x02	; 2
   11780:	ca 5d       	subi	r28, 0xDA	; 218
   11782:	dd 4f       	sbci	r29, 0xFD	; 253
   11784:	ec e0       	ldi	r30, 0x0C	; 12
   11786:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

0001178a <gpib_timer_elapsed_begin>:
   1178a:	0c 94 5e 34 	jmp	0x68bc	; 0x68bc <clock_elapsed_begin>
   1178e:	08 95       	ret

00011790 <gpib_timer_reset>:
   11790:	f8 94       	cli
   11792:	ea e9       	ldi	r30, 0x9A	; 154
   11794:	fc e1       	ldi	r31, 0x1C	; 28
   11796:	10 82       	st	Z, r1
   11798:	11 82       	std	Z+1, r1	; 0x01
   1179a:	12 82       	std	Z+2, r1	; 0x02
   1179c:	13 82       	std	Z+3, r1	; 0x03
   1179e:	14 82       	std	Z+4, r1	; 0x04
   117a0:	15 82       	std	Z+5, r1	; 0x05
   117a2:	16 82       	std	Z+6, r1	; 0x06
   117a4:	17 82       	std	Z+7, r1	; 0x07
   117a6:	81 e0       	ldi	r24, 0x01	; 1
   117a8:	80 87       	std	Z+8, r24	; 0x08
   117aa:	78 94       	sei
   117ac:	08 95       	ret

000117ae <gpib_timer_elapsed_end>:
   117ae:	0c 94 64 34 	jmp	0x68c8	; 0x68c8 <clock_elapsed_end>
   117b2:	08 95       	ret

000117b4 <gpib_timer_task>:
   117b4:	f8 94       	cli
   117b6:	80 91 9e 1c 	lds	r24, 0x1C9E	; 0x801c9e <gpib_timer+0x4>
   117ba:	90 91 9f 1c 	lds	r25, 0x1C9F	; 0x801c9f <gpib_timer+0x5>
   117be:	a0 91 a0 1c 	lds	r26, 0x1CA0	; 0x801ca0 <gpib_timer+0x6>
   117c2:	b0 91 a1 1c 	lds	r27, 0x1CA1	; 0x801ca1 <gpib_timer+0x7>
   117c6:	89 2b       	or	r24, r25
   117c8:	8a 2b       	or	r24, r26
   117ca:	8b 2b       	or	r24, r27
   117cc:	a1 f0       	breq	.+40     	; 0x117f6 <gpib_timer_task+0x42>
   117ce:	80 91 9e 1c 	lds	r24, 0x1C9E	; 0x801c9e <gpib_timer+0x4>
   117d2:	90 91 9f 1c 	lds	r25, 0x1C9F	; 0x801c9f <gpib_timer+0x5>
   117d6:	a0 91 a0 1c 	lds	r26, 0x1CA0	; 0x801ca0 <gpib_timer+0x6>
   117da:	b0 91 a1 1c 	lds	r27, 0x1CA1	; 0x801ca1 <gpib_timer+0x7>
   117de:	01 97       	sbiw	r24, 0x01	; 1
   117e0:	a1 09       	sbc	r26, r1
   117e2:	b1 09       	sbc	r27, r1
   117e4:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <gpib_timer+0x4>
   117e8:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <gpib_timer+0x5>
   117ec:	a0 93 a0 1c 	sts	0x1CA0, r26	; 0x801ca0 <gpib_timer+0x6>
   117f0:	b0 93 a1 1c 	sts	0x1CA1, r27	; 0x801ca1 <gpib_timer+0x7>
   117f4:	03 c0       	rjmp	.+6      	; 0x117fc <gpib_timer_task+0x48>
   117f6:	81 e0       	ldi	r24, 0x01	; 1
   117f8:	80 93 a2 1c 	sts	0x1CA2, r24	; 0x801ca2 <gpib_timer+0x8>
   117fc:	78 94       	sei
   117fe:	08 95       	ret

00011800 <gpib_timeout_set>:
   11800:	f8 94       	cli
   11802:	ea e9       	ldi	r30, 0x9A	; 154
   11804:	fc e1       	ldi	r31, 0x1C	; 28
   11806:	64 83       	std	Z+4, r22	; 0x04
   11808:	75 83       	std	Z+5, r23	; 0x05
   1180a:	86 83       	std	Z+6, r24	; 0x06
   1180c:	97 83       	std	Z+7, r25	; 0x07
   1180e:	10 86       	std	Z+8, r1	; 0x08
   11810:	78 94       	sei
   11812:	08 95       	ret

00011814 <gpib_bus_read_init>:
   11814:	54 98       	cbi	0x0a, 4	; 10
   11816:	57 98       	cbi	0x0a, 7	; 10
   11818:	45 98       	cbi	0x08, 5	; 8
   1181a:	3d 9a       	sbi	0x07, 5	; 7
   1181c:	11 b8       	out	0x01, r1	; 1
   1181e:	2f ef       	ldi	r18, 0xFF	; 255
   11820:	22 b9       	out	0x02, r18	; 2
   11822:	43 98       	cbi	0x08, 3	; 8
   11824:	3b 9a       	sbi	0x07, 3	; 7
   11826:	21 98       	cbi	0x04, 1	; 4
   11828:	56 98       	cbi	0x0a, 6	; 10
   1182a:	20 98       	cbi	0x04, 0	; 4
   1182c:	55 98       	cbi	0x0a, 5	; 10
   1182e:	89 2b       	or	r24, r25
   11830:	39 f4       	brne	.+14     	; 0x11840 <gpib_bus_read_init+0x2c>
   11832:	52 98       	cbi	0x0a, 2	; 10
   11834:	53 98       	cbi	0x0a, 3	; 10
   11836:	8d e0       	ldi	r24, 0x0D	; 13
   11838:	8a 95       	dec	r24
   1183a:	f1 f7       	brne	.-4      	; 0x11838 <gpib_bus_read_init+0x24>
   1183c:	00 00       	nop
   1183e:	04 c0       	rjmp	.+8      	; 0x11848 <gpib_bus_read_init+0x34>
   11840:	5b 98       	cbi	0x0b, 3	; 11
   11842:	53 9a       	sbi	0x0a, 3	; 10
   11844:	5a 98       	cbi	0x0b, 2	; 11
   11846:	52 9a       	sbi	0x0a, 2	; 10
   11848:	42 98       	cbi	0x08, 2	; 8
   1184a:	3a 9a       	sbi	0x07, 2	; 7
   1184c:	44 9a       	sbi	0x08, 4	; 8
   1184e:	3c 9a       	sbi	0x07, 4	; 7
   11850:	8d e0       	ldi	r24, 0x0D	; 13
   11852:	8a 95       	dec	r24
   11854:	f1 f7       	brne	.-4      	; 0x11852 <gpib_bus_read_init+0x3e>
   11856:	00 00       	nop
   11858:	08 95       	ret

0001185a <gpib_bus_init>:
   1185a:	10 92 1f 19 	sts	0x191F, r1	; 0x80191f <gpib_unread_f>
   1185e:	11 b8       	out	0x01, r1	; 1
   11860:	8f ef       	ldi	r24, 0xFF	; 255
   11862:	82 b9       	out	0x02, r24	; 2
   11864:	21 98       	cbi	0x04, 1	; 4
   11866:	52 98       	cbi	0x0a, 2	; 10
   11868:	53 98       	cbi	0x0a, 3	; 10
   1186a:	54 98       	cbi	0x0a, 4	; 10
   1186c:	57 98       	cbi	0x0a, 7	; 10
   1186e:	56 98       	cbi	0x0a, 6	; 10
   11870:	20 98       	cbi	0x04, 0	; 4
   11872:	55 98       	cbi	0x0a, 5	; 10
   11874:	45 98       	cbi	0x08, 5	; 8
   11876:	3d 9a       	sbi	0x07, 5	; 7
   11878:	43 98       	cbi	0x08, 3	; 8
   1187a:	3b 9a       	sbi	0x07, 3	; 7
   1187c:	42 98       	cbi	0x08, 2	; 8
   1187e:	3a 9a       	sbi	0x07, 2	; 7
   11880:	44 9a       	sbi	0x08, 4	; 8
   11882:	3c 9a       	sbi	0x07, 4	; 7
   11884:	8d e0       	ldi	r24, 0x0D	; 13
   11886:	8a 95       	dec	r24
   11888:	f1 f7       	brne	.-4      	; 0x11886 <gpib_bus_init+0x2c>
   1188a:	00 00       	nop
   1188c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11890:	82 ff       	sbrs	r24, 2
   11892:	0a c0       	rjmp	.+20     	; 0x118a8 <gpib_bus_init+0x4e>
   11894:	8e e9       	ldi	r24, 0x9E	; 158
   11896:	92 e1       	ldi	r25, 0x12	; 18
   11898:	1f 92       	push	r1
   1189a:	9f 93       	push	r25
   1189c:	8f 93       	push	r24
   1189e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   118a2:	0f 90       	pop	r0
   118a4:	0f 90       	pop	r0
   118a6:	0f 90       	pop	r0
   118a8:	08 95       	ret

000118aa <gpib_state_init>:
   118aa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   118ae:	82 ff       	sbrs	r24, 2
   118b0:	0a c0       	rjmp	.+20     	; 0x118c6 <gpib_state_init+0x1c>
   118b2:	8b e8       	ldi	r24, 0x8B	; 139
   118b4:	92 e1       	ldi	r25, 0x12	; 18
   118b6:	1f 92       	push	r1
   118b8:	9f 93       	push	r25
   118ba:	8f 93       	push	r24
   118bc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   118c0:	0f 90       	pop	r0
   118c2:	0f 90       	pop	r0
   118c4:	0f 90       	pop	r0
   118c6:	05 de       	rcall	.-1014   	; 0x114d2 <ppr_init>
   118c8:	0e 94 83 96 	call	0x12d06	; 0x12d06 <listen_cleanup>
   118cc:	0e 94 94 97 	call	0x12f28	; 0x12f28 <talk_cleanup>
   118d0:	10 92 a6 1e 	sts	0x1EA6, r1	; 0x801ea6 <spoll>
   118d4:	10 92 a9 1e 	sts	0x1EA9, r1	; 0x801ea9 <talking>
   118d8:	10 92 ac 1e 	sts	0x1EAC, r1	; 0x801eac <talking_last>
   118dc:	10 92 ab 1e 	sts	0x1EAB, r1	; 0x801eab <listening>
   118e0:	10 92 a5 1e 	sts	0x1EA5, r1	; 0x801ea5 <listening_last>
   118e4:	10 92 a4 1c 	sts	0x1CA4, r1	; 0x801ca4 <lastcmd+0x1>
   118e8:	10 92 a3 1c 	sts	0x1CA3, r1	; 0x801ca3 <lastcmd>
   118ec:	10 92 a8 1e 	sts	0x1EA8, r1	; 0x801ea8 <current+0x1>
   118f0:	10 92 a7 1e 	sts	0x1EA7, r1	; 0x801ea7 <current>
   118f4:	10 92 aa 1e 	sts	0x1EAA, r1	; 0x801eaa <secondary>
   118f8:	08 95       	ret

000118fa <gpib_enable_PPR>:
   118fa:	cf 93       	push	r28
   118fc:	df 93       	push	r29
   118fe:	ec 01       	movw	r28, r24
   11900:	88 30       	cpi	r24, 0x08	; 8
   11902:	91 05       	cpc	r25, r1
   11904:	78 f0       	brcs	.+30     	; 0x11924 <gpib_enable_PPR+0x2a>
   11906:	df 93       	push	r29
   11908:	cf 93       	push	r28
   1190a:	85 e6       	ldi	r24, 0x65	; 101
   1190c:	92 e1       	ldi	r25, 0x12	; 18
   1190e:	1f 92       	push	r1
   11910:	9f 93       	push	r25
   11912:	8f 93       	push	r24
   11914:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11918:	0f 90       	pop	r0
   1191a:	0f 90       	pop	r0
   1191c:	0f 90       	pop	r0
   1191e:	0f 90       	pop	r0
   11920:	0f 90       	pop	r0
   11922:	19 c0       	rjmp	.+50     	; 0x11956 <gpib_enable_PPR+0x5c>
   11924:	e7 dd       	rcall	.-1074   	; 0x114f4 <ppr_bit_set>
   11926:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1192a:	81 ff       	sbrs	r24, 1
   1192c:	14 c0       	rjmp	.+40     	; 0x11956 <gpib_enable_PPR+0x5c>
   1192e:	cd dd       	rcall	.-1126   	; 0x114ca <ppr_reg>
   11930:	1f 92       	push	r1
   11932:	8f 93       	push	r24
   11934:	df 93       	push	r29
   11936:	cf 93       	push	r28
   11938:	8a e4       	ldi	r24, 0x4A	; 74
   1193a:	92 e1       	ldi	r25, 0x12	; 18
   1193c:	1f 92       	push	r1
   1193e:	9f 93       	push	r25
   11940:	8f 93       	push	r24
   11942:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11946:	8d b7       	in	r24, 0x3d	; 61
   11948:	9e b7       	in	r25, 0x3e	; 62
   1194a:	07 96       	adiw	r24, 0x07	; 7
   1194c:	0f b6       	in	r0, 0x3f	; 63
   1194e:	f8 94       	cli
   11950:	9e bf       	out	0x3e, r25	; 62
   11952:	0f be       	out	0x3f, r0	; 63
   11954:	8d bf       	out	0x3d, r24	; 61
   11956:	df 91       	pop	r29
   11958:	cf 91       	pop	r28
   1195a:	08 95       	ret

0001195c <gpib_disable_PPR>:
   1195c:	cf 93       	push	r28
   1195e:	df 93       	push	r29
   11960:	ec 01       	movw	r28, r24
   11962:	88 30       	cpi	r24, 0x08	; 8
   11964:	91 05       	cpc	r25, r1
   11966:	78 f0       	brcs	.+30     	; 0x11986 <gpib_disable_PPR+0x2a>
   11968:	df 93       	push	r29
   1196a:	cf 93       	push	r28
   1196c:	83 e2       	ldi	r24, 0x23	; 35
   1196e:	92 e1       	ldi	r25, 0x12	; 18
   11970:	1f 92       	push	r1
   11972:	9f 93       	push	r25
   11974:	8f 93       	push	r24
   11976:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1197a:	0f 90       	pop	r0
   1197c:	0f 90       	pop	r0
   1197e:	0f 90       	pop	r0
   11980:	0f 90       	pop	r0
   11982:	0f 90       	pop	r0
   11984:	19 c0       	rjmp	.+50     	; 0x119b8 <gpib_disable_PPR+0x5c>
   11986:	c3 dd       	rcall	.-1146   	; 0x1150e <ppr_bit_clr>
   11988:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1198c:	81 ff       	sbrs	r24, 1
   1198e:	14 c0       	rjmp	.+40     	; 0x119b8 <gpib_disable_PPR+0x5c>
   11990:	9c dd       	rcall	.-1224   	; 0x114ca <ppr_reg>
   11992:	1f 92       	push	r1
   11994:	8f 93       	push	r24
   11996:	df 93       	push	r29
   11998:	cf 93       	push	r28
   1199a:	88 e0       	ldi	r24, 0x08	; 8
   1199c:	92 e1       	ldi	r25, 0x12	; 18
   1199e:	1f 92       	push	r1
   119a0:	9f 93       	push	r25
   119a2:	8f 93       	push	r24
   119a4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   119a8:	8d b7       	in	r24, 0x3d	; 61
   119aa:	9e b7       	in	r25, 0x3e	; 62
   119ac:	07 96       	adiw	r24, 0x07	; 7
   119ae:	0f b6       	in	r0, 0x3f	; 63
   119b0:	f8 94       	cli
   119b2:	9e bf       	out	0x3e, r25	; 62
   119b4:	0f be       	out	0x3f, r0	; 63
   119b6:	8d bf       	out	0x3d, r24	; 61
   119b8:	df 91       	pop	r29
   119ba:	cf 91       	pop	r28
   119bc:	08 95       	ret

000119be <gpib_assert_ifc>:
   119be:	5c 98       	cbi	0x0b, 4	; 11
   119c0:	54 9a       	sbi	0x0a, 4	; 10
   119c2:	6a ef       	ldi	r22, 0xFA	; 250
   119c4:	70 e0       	ldi	r23, 0x00	; 0
   119c6:	80 e0       	ldi	r24, 0x00	; 0
   119c8:	90 e0       	ldi	r25, 0x00	; 0
   119ca:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
   119ce:	54 98       	cbi	0x0a, 4	; 10
   119d0:	6a ef       	ldi	r22, 0xFA	; 250
   119d2:	70 e0       	ldi	r23, 0x00	; 0
   119d4:	80 e0       	ldi	r24, 0x00	; 0
   119d6:	90 e0       	ldi	r25, 0x00	; 0
   119d8:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
   119dc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   119e0:	82 ff       	sbrs	r24, 2
   119e2:	0a c0       	rjmp	.+20     	; 0x119f8 <gpib_assert_ifc+0x3a>
   119e4:	89 ed       	ldi	r24, 0xD9	; 217
   119e6:	91 e1       	ldi	r25, 0x11	; 17
   119e8:	1f 92       	push	r1
   119ea:	9f 93       	push	r25
   119ec:	8f 93       	push	r24
   119ee:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   119f2:	0f 90       	pop	r0
   119f4:	0f 90       	pop	r0
   119f6:	0f 90       	pop	r0
   119f8:	08 95       	ret

000119fa <gpib_unread>:
   119fa:	cf 93       	push	r28
   119fc:	df 93       	push	r29
   119fe:	ec 01       	movw	r28, r24
   11a00:	80 91 1f 19 	lds	r24, 0x191F	; 0x80191f <gpib_unread_f>
   11a04:	81 11       	cpse	r24, r1
   11a06:	08 c0       	rjmp	.+16     	; 0x11a18 <gpib_unread+0x1e>
   11a08:	d0 93 ae 1e 	sts	0x1EAE, r29	; 0x801eae <gpib_unread_data+0x1>
   11a0c:	c0 93 ad 1e 	sts	0x1EAD, r28	; 0x801ead <gpib_unread_data>
   11a10:	81 e0       	ldi	r24, 0x01	; 1
   11a12:	80 93 1f 19 	sts	0x191F, r24	; 0x80191f <gpib_unread_f>
   11a16:	12 c0       	rjmp	.+36     	; 0x11a3c <gpib_unread+0x42>
   11a18:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11a1c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11a20:	85 70       	andi	r24, 0x05	; 5
   11a22:	99 27       	eor	r25, r25
   11a24:	89 2b       	or	r24, r25
   11a26:	51 f0       	breq	.+20     	; 0x11a3c <gpib_unread+0x42>
   11a28:	86 e9       	ldi	r24, 0x96	; 150
   11a2a:	91 e1       	ldi	r25, 0x11	; 17
   11a2c:	1f 92       	push	r1
   11a2e:	9f 93       	push	r25
   11a30:	8f 93       	push	r24
   11a32:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11a36:	0f 90       	pop	r0
   11a38:	0f 90       	pop	r0
   11a3a:	0f 90       	pop	r0
   11a3c:	ce 01       	movw	r24, r28
   11a3e:	df 91       	pop	r29
   11a40:	cf 91       	pop	r28
   11a42:	08 95       	ret

00011a44 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11a44:	11 b8       	out	0x01, r1	; 1
   11a46:	80 b1       	in	r24, 0x00	; 0
   11a48:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   11a4a:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   11a4c:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11a4e:	08 95       	ret

00011a50 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11a50:	4e 99       	sbic	0x09, 6	; 9
   11a52:	03 c0       	rjmp	.+6      	; 0x11a5a <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11a54:	80 e0       	ldi	r24, 0x00	; 0
   11a56:	94 e0       	ldi	r25, 0x04	; 4
   11a58:	02 c0       	rjmp	.+4      	; 0x11a5e <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   11a5a:	80 e0       	ldi	r24, 0x00	; 0
   11a5c:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11a5e:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11a60:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11a62:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11a64:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11a66:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11a68:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   11a6a:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11a6c:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11a6e:	08 95       	ret

00011a70 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11a70:	19 99       	sbic	0x03, 1	; 3
   11a72:	03 c0       	rjmp	.+6      	; 0x11a7a <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11a74:	80 e0       	ldi	r24, 0x00	; 0
   11a76:	90 e2       	ldi	r25, 0x20	; 32
   11a78:	02 c0       	rjmp	.+4      	; 0x11a7e <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   11a7a:	80 e0       	ldi	r24, 0x00	; 0
   11a7c:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11a7e:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11a80:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11a82:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11a84:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11a86:	08 95       	ret

00011a88 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11a88:	2f 92       	push	r2
   11a8a:	3f 92       	push	r3
   11a8c:	4f 92       	push	r4
   11a8e:	6f 92       	push	r6
   11a90:	7f 92       	push	r7
   11a92:	8f 92       	push	r8
   11a94:	cf 92       	push	r12
   11a96:	df 92       	push	r13
   11a98:	ef 92       	push	r14
   11a9a:	1f 93       	push	r17
   11a9c:	cf 93       	push	r28
   11a9e:	df 93       	push	r29
   11aa0:	cd b7       	in	r28, 0x3d	; 61
   11aa2:	de b7       	in	r29, 0x3e	; 62
   11aa4:	28 97       	sbiw	r28, 0x08	; 8
   11aa6:	0f b6       	in	r0, 0x3f	; 63
   11aa8:	f8 94       	cli
   11aaa:	de bf       	out	0x3e, r29	; 62
   11aac:	0f be       	out	0x3f, r0	; 63
   11aae:	cd bf       	out	0x3d, r28	; 61
   11ab0:	98 87       	std	Y+8, r25	; 0x08
   11ab2:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11ab4:	80 e0       	ldi	r24, 0x00	; 0
   11ab6:	90 e0       	ldi	r25, 0x00	; 0
   11ab8:	ad de       	rcall	.-678    	; 0x11814 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11aba:	64 ef       	ldi	r22, 0xF4	; 244
   11abc:	71 e0       	ldi	r23, 0x01	; 1
   11abe:	80 e0       	ldi	r24, 0x00	; 0
   11ac0:	90 e0       	ldi	r25, 0x00	; 0
   11ac2:	9e de       	rcall	.-708    	; 0x11800 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11ac4:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11ac6:	84 e0       	ldi	r24, 0x04	; 4
   11ac8:	91 e1       	ldi	r25, 0x11	; 17
   11aca:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11acc:	8e e1       	ldi	r24, 0x1E	; 30
   11ace:	91 e1       	ldi	r25, 0x11	; 17
   11ad0:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11ad2:	89 e3       	ldi	r24, 0x39	; 57
   11ad4:	91 e1       	ldi	r25, 0x11	; 17
   11ad6:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11ad8:	84 e5       	ldi	r24, 0x54	; 84
   11ada:	91 e1       	ldi	r25, 0x11	; 17
   11adc:	9c 01       	movw	r18, r24
   11ade:	40 e0       	ldi	r20, 0x00	; 0
   11ae0:	29 83       	std	Y+1, r18	; 0x01
   11ae2:	3a 83       	std	Y+2, r19	; 0x02
   11ae4:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11ae6:	8c e7       	ldi	r24, 0x7C	; 124
   11ae8:	91 e1       	ldi	r25, 0x11	; 17
   11aea:	9c 01       	movw	r18, r24
   11aec:	40 e0       	ldi	r20, 0x00	; 0
   11aee:	2c 83       	std	Y+4, r18	; 0x04
   11af0:	3d 83       	std	Y+5, r19	; 0x05
   11af2:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11af4:	80 e0       	ldi	r24, 0x00	; 0
   11af6:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   11afa:	89 2b       	or	r24, r25
   11afc:	09 f0       	breq	.+2      	; 0x11b00 <gpib_write_byte+0x78>
   11afe:	17 c1       	rjmp	.+558    	; 0x11d2e <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11b00:	4c 99       	sbic	0x09, 4	; 9
   11b02:	07 c0       	rjmp	.+14     	; 0x11b12 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11b04:	8f 81       	ldd	r24, Y+7	; 0x07
   11b06:	98 85       	ldd	r25, Y+8	; 0x08
   11b08:	90 61       	ori	r25, 0x10	; 16
   11b0a:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11b0c:	8f 83       	std	Y+7, r24	; 0x07
   11b0e:	a5 de       	rcall	.-694    	; 0x1185a <gpib_bus_init>
            break;
   11b10:	0e c1       	rjmp	.+540    	; 0x11d2e <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11b12:	81 2f       	mov	r24, r17
   11b14:	90 e0       	ldi	r25, 0x00	; 0
   11b16:	8a 30       	cpi	r24, 0x0A	; 10
   11b18:	91 05       	cpc	r25, r1
   11b1a:	08 f0       	brcs	.+2      	; 0x11b1e <gpib_write_byte+0x96>
   11b1c:	fe c0       	rjmp	.+508    	; 0x11d1a <gpib_write_byte+0x292>
   11b1e:	fc 01       	movw	r30, r24
   11b20:	e3 54       	subi	r30, 0x43	; 67
   11b22:	ff 4f       	sbci	r31, 0xFF	; 255
   11b24:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11b28:	19 9b       	sbis	0x03, 1	; 3
   11b2a:	12 c0       	rjmp	.+36     	; 0x11b50 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11b2c:	42 9a       	sbi	0x08, 2	; 8
   11b2e:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11b30:	44 98       	cbi	0x08, 4	; 8
   11b32:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11b34:	2f 81       	ldd	r18, Y+7	; 0x07
   11b36:	38 85       	ldd	r19, Y+8	; 0x08
   11b38:	32 ff       	sbrs	r19, 2
   11b3a:	03 c0       	rjmp	.+6      	; 0x11b42 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11b3c:	5e 98       	cbi	0x0b, 6	; 11
   11b3e:	56 9a       	sbi	0x0a, 6	; 10
   11b40:	01 c0       	rjmp	.+2      	; 0x11b44 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11b42:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11b44:	64 ef       	ldi	r22, 0xF4	; 244
   11b46:	71 e0       	ldi	r23, 0x01	; 1
   11b48:	80 e0       	ldi	r24, 0x00	; 0
   11b4a:	90 e0       	ldi	r25, 0x00	; 0
   11b4c:	59 de       	rcall	.-846    	; 0x11800 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11b4e:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11b50:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11b54:	88 23       	and	r24, r24
   11b56:	71 f2       	breq	.-100    	; 0x11af4 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11b58:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11b5c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11b60:	85 70       	andi	r24, 0x05	; 5
   11b62:	99 27       	eor	r25, r25
   11b64:	89 2b       	or	r24, r25
   11b66:	39 f1       	breq	.+78     	; 0x11bb6 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11b68:	1f 92       	push	r1
   11b6a:	3d 81       	ldd	r19, Y+5	; 0x05
   11b6c:	3f 93       	push	r19
   11b6e:	4c 81       	ldd	r20, Y+4	; 0x04
   11b70:	4f 93       	push	r20
   11b72:	1c c0       	rjmp	.+56     	; 0x11bac <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11b74:	4a 9b       	sbis	0x09, 2	; 9
   11b76:	08 c0       	rjmp	.+16     	; 0x11b88 <gpib_write_byte+0x100>
   11b78:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11b7a:	06 c0       	rjmp	.+12     	; 0x11b88 <gpib_write_byte+0x100>
   11b7c:	64 ef       	ldi	r22, 0xF4	; 244
   11b7e:	71 e0       	ldi	r23, 0x01	; 1
   11b80:	80 e0       	ldi	r24, 0x00	; 0
   11b82:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11b84:	3d de       	rcall	.-902    	; 0x11800 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11b86:	12 e0       	ldi	r17, 0x02	; 2
   11b88:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11b8c:	88 23       	and	r24, r24
   11b8e:	09 f4       	brne	.+2      	; 0x11b92 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11b90:	b1 cf       	rjmp	.-158    	; 0x11af4 <gpib_write_byte+0x6c>
   11b92:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11b96:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11b9a:	85 70       	andi	r24, 0x05	; 5
   11b9c:	99 27       	eor	r25, r25
   11b9e:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11ba0:	51 f0       	breq	.+20     	; 0x11bb6 <gpib_write_byte+0x12e>
   11ba2:	1f 92       	push	r1
   11ba4:	9a 81       	ldd	r25, Y+2	; 0x02
   11ba6:	9f 93       	push	r25
   11ba8:	29 81       	ldd	r18, Y+1	; 0x01
   11baa:	2f 93       	push	r18
   11bac:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11bb0:	0f 90       	pop	r0
   11bb2:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11bb4:	0f 90       	pop	r0
   11bb6:	8f 81       	ldd	r24, Y+7	; 0x07
   11bb8:	98 85       	ldd	r25, Y+8	; 0x08
   11bba:	90 64       	ori	r25, 0x40	; 64
   11bbc:	98 87       	std	Y+8, r25	; 0x08
   11bbe:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11bc0:	b4 c0       	rjmp	.+360    	; 0x11d2a <gpib_write_byte+0x2a2>
   11bc2:	2f 81       	ldd	r18, Y+7	; 0x07
   11bc4:	38 85       	ldd	r19, Y+8	; 0x08
   11bc6:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11bc8:	03 c0       	rjmp	.+6      	; 0x11bd0 <gpib_write_byte+0x148>
   11bca:	28 98       	cbi	0x05, 0	; 5
   11bcc:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11bce:	01 c0       	rjmp	.+2      	; 0x11bd2 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11bd0:	20 98       	cbi	0x04, 0	; 4
   11bd2:	8f ef       	ldi	r24, 0xFF	; 255
   11bd4:	81 b9       	out	0x01, r24	; 1
   11bd6:	8f 81       	ldd	r24, Y+7	; 0x07
   11bd8:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11bda:	82 b9       	out	0x02, r24	; 2
   11bdc:	43 9a       	sbi	0x08, 3	; 8
   11bde:	3b 9a       	sbi	0x07, 3	; 7
   11be0:	3d e0       	ldi	r19, 0x0D	; 13
   11be2:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11be4:	f1 f7       	brne	.-4      	; 0x11be2 <gpib_write_byte+0x15a>
   11be6:	00 00       	nop
   11be8:	64 ef       	ldi	r22, 0xF4	; 244
   11bea:	71 e0       	ldi	r23, 0x01	; 1
   11bec:	80 e0       	ldi	r24, 0x00	; 0
   11bee:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11bf0:	07 de       	rcall	.-1010   	; 0x11800 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11bf2:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11bf4:	7f cf       	rjmp	.-258    	; 0x11af4 <gpib_write_byte+0x6c>
   11bf6:	29 98       	cbi	0x05, 1	; 5
   11bf8:	21 9a       	sbi	0x04, 1	; 4
   11bfa:	64 ef       	ldi	r22, 0xF4	; 244
   11bfc:	71 e0       	ldi	r23, 0x01	; 1
   11bfe:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11c00:	90 e0       	ldi	r25, 0x00	; 0
   11c02:	fe dd       	rcall	.-1028   	; 0x11800 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11c04:	14 e0       	ldi	r17, 0x04	; 4
   11c06:	76 cf       	rjmp	.-276    	; 0x11af4 <gpib_write_byte+0x6c>
   11c08:	4a 99       	sbic	0x09, 2	; 9
   11c0a:	07 c0       	rjmp	.+14     	; 0x11c1a <gpib_write_byte+0x192>
   11c0c:	64 ef       	ldi	r22, 0xF4	; 244
   11c0e:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11c10:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11c12:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11c14:	f5 dd       	rcall	.-1046   	; 0x11800 <gpib_timeout_set>
   11c16:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11c18:	6d cf       	rjmp	.-294    	; 0x11af4 <gpib_write_byte+0x6c>
   11c1a:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11c1e:	88 23       	and	r24, r24
   11c20:	09 f4       	brne	.+2      	; 0x11c24 <gpib_write_byte+0x19c>
   11c22:	68 cf       	rjmp	.-304    	; 0x11af4 <gpib_write_byte+0x6c>
   11c24:	8f 81       	ldd	r24, Y+7	; 0x07
   11c26:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11c28:	90 64       	ori	r25, 0x40	; 64
   11c2a:	98 87       	std	Y+8, r25	; 0x08
   11c2c:	8f 83       	std	Y+7, r24	; 0x07
   11c2e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11c32:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11c36:	85 70       	andi	r24, 0x05	; 5
   11c38:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11c3a:	89 2b       	or	r24, r25
   11c3c:	09 f4       	brne	.+2      	; 0x11c40 <gpib_write_byte+0x1b8>
   11c3e:	75 c0       	rjmp	.+234    	; 0x11d2a <gpib_write_byte+0x2a2>
   11c40:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11c42:	3f 92       	push	r3
   11c44:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11c46:	3f c0       	rjmp	.+126    	; 0x11cc6 <gpib_write_byte+0x23e>
   11c48:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11c4a:	6b c0       	rjmp	.+214    	; 0x11d22 <gpib_write_byte+0x29a>
   11c4c:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11c50:	88 23       	and	r24, r24
   11c52:	09 f4       	brne	.+2      	; 0x11c56 <gpib_write_byte+0x1ce>
   11c54:	4f cf       	rjmp	.-354    	; 0x11af4 <gpib_write_byte+0x6c>
   11c56:	2f 81       	ldd	r18, Y+7	; 0x07
   11c58:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11c5a:	30 64       	ori	r19, 0x40	; 64
   11c5c:	38 87       	std	Y+8, r19	; 0x08
   11c5e:	2f 83       	std	Y+7, r18	; 0x07
   11c60:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11c64:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11c68:	85 70       	andi	r24, 0x05	; 5
   11c6a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11c6c:	89 2b       	or	r24, r25
   11c6e:	09 f4       	brne	.+2      	; 0x11c72 <gpib_write_byte+0x1ea>
   11c70:	5c c0       	rjmp	.+184    	; 0x11d2a <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11c72:	1f 92       	push	r1
   11c74:	7f 92       	push	r7
   11c76:	6f 92       	push	r6
   11c78:	26 c0       	rjmp	.+76     	; 0x11cc6 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   11c7a:	21 98       	cbi	0x04, 1	; 4
   11c7c:	3d e0       	ldi	r19, 0x0D	; 13
   11c7e:	3a 95       	dec	r19
   11c80:	f1 f7       	brne	.-4      	; 0x11c7e <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11c82:	00 00       	nop
   11c84:	80 e0       	ldi	r24, 0x00	; 0
   11c86:	90 e0       	ldi	r25, 0x00	; 0
   11c88:	c5 dd       	rcall	.-1142   	; 0x11814 <gpib_bus_read_init>
   11c8a:	64 ef       	ldi	r22, 0xF4	; 244
   11c8c:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11c8e:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11c90:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11c92:	b6 dd       	rcall	.-1172   	; 0x11800 <gpib_timeout_set>
   11c94:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11c96:	2e cf       	rjmp	.-420    	; 0x11af4 <gpib_write_byte+0x6c>
   11c98:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11c9a:	45 c0       	rjmp	.+138    	; 0x11d26 <gpib_write_byte+0x29e>
   11c9c:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11ca0:	88 23       	and	r24, r24
   11ca2:	09 f4       	brne	.+2      	; 0x11ca6 <gpib_write_byte+0x21e>
   11ca4:	27 cf       	rjmp	.-434    	; 0x11af4 <gpib_write_byte+0x6c>
   11ca6:	8f 81       	ldd	r24, Y+7	; 0x07
   11ca8:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11caa:	90 64       	ori	r25, 0x40	; 64
   11cac:	98 87       	std	Y+8, r25	; 0x08
   11cae:	8f 83       	std	Y+7, r24	; 0x07
   11cb0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11cb4:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11cb8:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11cba:	99 27       	eor	r25, r25
   11cbc:	89 2b       	or	r24, r25
   11cbe:	a9 f1       	breq	.+106    	; 0x11d2a <gpib_write_byte+0x2a2>
   11cc0:	1f 92       	push	r1
   11cc2:	df 92       	push	r13
   11cc4:	cf 92       	push	r12
   11cc6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11cca:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11ccc:	0f 90       	pop	r0
   11cce:	0f 90       	pop	r0
   11cd0:	2c c0       	rjmp	.+88     	; 0x11d2a <gpib_write_byte+0x2a2>
   11cd2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   11cd6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   11cda:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11cdc:	99 27       	eor	r25, r25
   11cde:	89 2b       	or	r24, r25
   11ce0:	c1 f0       	breq	.+48     	; 0x11d12 <gpib_write_byte+0x28a>
   11ce2:	99 b1       	in	r25, 0x09	; 9
   11ce4:	89 b1       	in	r24, 0x09	; 9
   11ce6:	93 fb       	bst	r25, 3
   11ce8:	99 27       	eor	r25, r25
   11cea:	90 f9       	bld	r25, 0
   11cec:	1f 92       	push	r1
   11cee:	9f 93       	push	r25
   11cf0:	82 fb       	bst	r24, 2
   11cf2:	88 27       	eor	r24, r24
   11cf4:	80 f9       	bld	r24, 0
   11cf6:	1f 92       	push	r1
   11cf8:	8f 93       	push	r24
   11cfa:	81 ef       	ldi	r24, 0xF1	; 241
   11cfc:	90 e1       	ldi	r25, 0x10	; 16
   11cfe:	1f 92       	push	r1
   11d00:	9f 93       	push	r25
   11d02:	8f 93       	push	r24
   11d04:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   11d08:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11d0a:	f8 94       	cli
   11d0c:	de bf       	out	0x3e, r29	; 62
   11d0e:	0f be       	out	0x3f, r0	; 63
   11d10:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   11d12:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11d14:	90 e0       	ldi	r25, 0x00	; 0
   11d16:	7e dd       	rcall	.-1284   	; 0x11814 <gpib_bus_read_init>
   11d18:	0a c0       	rjmp	.+20     	; 0x11d2e <gpib_write_byte+0x2a6>
   11d1a:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11d1c:	09 f0       	breq	.+2      	; 0x11d20 <gpib_write_byte+0x298>
   11d1e:	ea ce       	rjmp	.-556    	; 0x11af4 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11d20:	06 c0       	rjmp	.+12     	; 0x11d2e <gpib_write_byte+0x2a6>
   11d22:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11d24:	e7 ce       	rjmp	.-562    	; 0x11af4 <gpib_write_byte+0x6c>
   11d26:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11d28:	e5 ce       	rjmp	.-566    	; 0x11af4 <gpib_write_byte+0x6c>
   11d2a:	19 e0       	ldi	r17, 0x09	; 9
   11d2c:	e3 ce       	rjmp	.-570    	; 0x11af4 <gpib_write_byte+0x6c>
   11d2e:	8f 81       	ldd	r24, Y+7	; 0x07
   11d30:	98 85       	ldd	r25, Y+8	; 0x08
   11d32:	28 96       	adiw	r28, 0x08	; 8
   11d34:	0f b6       	in	r0, 0x3f	; 63
   11d36:	f8 94       	cli
   11d38:	de bf       	out	0x3e, r29	; 62
   11d3a:	0f be       	out	0x3f, r0	; 63
   11d3c:	cd bf       	out	0x3d, r28	; 61
   11d3e:	df 91       	pop	r29
   11d40:	cf 91       	pop	r28
   11d42:	1f 91       	pop	r17
   11d44:	ef 90       	pop	r14
   11d46:	df 90       	pop	r13
   11d48:	cf 90       	pop	r12
   11d4a:	8f 90       	pop	r8
   11d4c:	7f 90       	pop	r7
   11d4e:	6f 90       	pop	r6
   11d50:	4f 90       	pop	r4
   11d52:	3f 90       	pop	r3
   11d54:	2f 90       	pop	r2
   11d56:	08 95       	ret

00011d58 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11d58:	cf 93       	push	r28
   11d5a:	df 93       	push	r29
   11d5c:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11d5e:	89 2b       	or	r24, r25
   11d60:	21 f4       	brne	.+8      	; 0x11d6a <gpib_decode_header+0x12>
        fo = stdout;
   11d62:	c0 91 7c 1c 	lds	r28, 0x1C7C	; 0x801c7c <__iob+0x2>
   11d66:	d0 91 7d 1c 	lds	r29, 0x1C7D	; 0x801c7d <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11d6a:	be 01       	movw	r22, r28
   11d6c:	83 e7       	ldi	r24, 0x73	; 115
   11d6e:	9b e0       	ldi	r25, 0x0B	; 11
   11d70:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"GPIB bus state\n");
   11d74:	be 01       	movw	r22, r28
   11d76:	80 ea       	ldi	r24, 0xA0	; 160
   11d78:	9b e0       	ldi	r25, 0x0B	; 11
   11d7a:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11d7e:	be 01       	movw	r22, r28
   11d80:	80 eb       	ldi	r24, 0xB0	; 176
   11d82:	9b e0       	ldi	r25, 0x0B	; 11
   11d84:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11d88:	be 01       	movw	r22, r28
   11d8a:	84 ec       	ldi	r24, 0xC4	; 196
   11d8c:	9b e0       	ldi	r25, 0x0B	; 11
   11d8e:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11d92:	be 01       	movw	r22, r28
   11d94:	87 ee       	ldi	r24, 0xE7	; 231
   11d96:	9b e0       	ldi	r25, 0x0B	; 11
   11d98:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"     A = ATN\n");
   11d9c:	be 01       	movw	r22, r28
   11d9e:	81 e1       	ldi	r24, 0x11	; 17
   11da0:	9c e0       	ldi	r25, 0x0C	; 12
   11da2:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"      E = EOI\n");
   11da6:	be 01       	movw	r22, r28
   11da8:	8f e1       	ldi	r24, 0x1F	; 31
   11daa:	9c e0       	ldi	r25, 0x0C	; 12
   11dac:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"       S = SRQ\n");
   11db0:	be 01       	movw	r22, r28
   11db2:	8e e2       	ldi	r24, 0x2E	; 46
   11db4:	9c e0       	ldi	r25, 0x0C	; 12
   11db6:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"        R = REN\n");
   11dba:	be 01       	movw	r22, r28
   11dbc:	8e e3       	ldi	r24, 0x3E	; 62
   11dbe:	9c e0       	ldi	r25, 0x0C	; 12
   11dc0:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"         I = IFC\n");
   11dc4:	be 01       	movw	r22, r28
   11dc6:	8f e4       	ldi	r24, 0x4F	; 79
   11dc8:	9c e0       	ldi	r25, 0x0C	; 12
   11dca:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11dce:	be 01       	movw	r22, r28
   11dd0:	81 e6       	ldi	r24, 0x61	; 97
   11dd2:	9c e0       	ldi	r25, 0x0C	; 12
   11dd4:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11dd8:	be 01       	movw	r22, r28
   11dda:	83 e8       	ldi	r24, 0x83	; 131
   11ddc:	9c e0       	ldi	r25, 0x0C	; 12
   11dde:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11de2:	be 01       	movw	r22, r28
   11de4:	8b e9       	ldi	r24, 0x9B	; 155
   11de6:	9c e0       	ldi	r25, 0x0C	; 12
   11de8:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
    fprintf(fo,"              GPIB commands\n");
   11dec:	be 01       	movw	r22, r28
   11dee:	86 eb       	ldi	r24, 0xB6	; 182
   11df0:	9c e0       	ldi	r25, 0x0C	; 12
   11df2:	0e 94 85 79 	call	0xf30a	; 0xf30a <fputs>
}
   11df6:	df 91       	pop	r29
   11df8:	cf 91       	pop	r28
   11dfa:	08 95       	ret

00011dfc <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11dfc:	a0 e8       	ldi	r26, 0x80	; 128
   11dfe:	b0 e0       	ldi	r27, 0x00	; 0
   11e00:	e4 e0       	ldi	r30, 0x04	; 4
   11e02:	ff e8       	ldi	r31, 0x8F	; 143
   11e04:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   11e08:	8c 01       	movw	r16, r24
   11e0a:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11e0c:	19 82       	std	Y+1, r1	; 0x01
   11e0e:	4c 01       	movw	r8, r24
   11e10:	88 24       	eor	r8, r8
   11e12:	44 e0       	ldi	r20, 0x04	; 4
   11e14:	94 22       	and	r9, r20
   11e16:	ce 01       	movw	r24, r28
   11e18:	01 96       	adiw	r24, 0x01	; 1
   11e1a:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11e1c:	62 30       	cpi	r22, 0x02	; 2
   11e1e:	71 05       	cpc	r23, r1
   11e20:	f0 f4       	brcc	.+60     	; 0x11e5e <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11e22:	81 14       	cp	r8, r1
   11e24:	91 04       	cpc	r9, r1
   11e26:	29 f4       	brne	.+10     	; 0x11e32 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11e28:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11e2a:	90 ee       	ldi	r25, 0xE0	; 224
   11e2c:	90 0f       	add	r25, r16
   11e2e:	9f 35       	cpi	r25, 0x5F	; 95
   11e30:	08 f0       	brcs	.+2      	; 0x11e34 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   11e32:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11e34:	1f 92       	push	r1
   11e36:	8f 93       	push	r24
   11e38:	c8 01       	movw	r24, r16
   11e3a:	99 27       	eor	r25, r25
   11e3c:	9f 93       	push	r25
   11e3e:	8f 93       	push	r24
   11e40:	88 ee       	ldi	r24, 0xE8	; 232
   11e42:	90 e1       	ldi	r25, 0x10	; 16
   11e44:	1f 92       	push	r1
   11e46:	9f 93       	push	r25
   11e48:	8f 93       	push	r24
   11e4a:	df 92       	push	r13
   11e4c:	cf 92       	push	r12
   11e4e:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
   11e52:	0f b6       	in	r0, 0x3f	; 63
   11e54:	f8 94       	cli
   11e56:	de bf       	out	0x3e, r29	; 62
   11e58:	0f be       	out	0x3f, r0	; 63
   11e5a:	cd bf       	out	0x3d, r28	; 61
   11e5c:	0e c0       	rjmp	.+28     	; 0x11e7a <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11e5e:	82 ee       	ldi	r24, 0xE2	; 226
   11e60:	90 e1       	ldi	r25, 0x10	; 16
   11e62:	1f 92       	push	r1
   11e64:	9f 93       	push	r25
   11e66:	8f 93       	push	r24
   11e68:	df 92       	push	r13
   11e6a:	cf 92       	push	r12
   11e6c:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
   11e70:	0f 90       	pop	r0
   11e72:	0f 90       	pop	r0
   11e74:	0f 90       	pop	r0
   11e76:	0f 90       	pop	r0
   11e78:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   11e7a:	f6 01       	movw	r30, r12
   11e7c:	01 90       	ld	r0, Z+
   11e7e:	00 20       	and	r0, r0
   11e80:	e9 f7       	brne	.-6      	; 0x11e7c <gpib_trace_display+0x80>
   11e82:	31 97       	sbiw	r30, 0x01	; 1
   11e84:	cf 01       	movw	r24, r30
   11e86:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11e88:	81 14       	cp	r8, r1
   11e8a:	91 04       	cpc	r9, r1
   11e8c:	11 f0       	breq	.+4      	; 0x11e92 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11e8e:	21 e4       	ldi	r18, 0x41	; 65
   11e90:	01 c0       	rjmp	.+2      	; 0x11e94 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11e92:	2d e2       	ldi	r18, 0x2D	; 45
   11e94:	20 83       	st	Z, r18
   11e96:	dc 01       	movw	r26, r24
   11e98:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11e9a:	10 ff       	sbrs	r17, 0
   11e9c:	02 c0       	rjmp	.+4      	; 0x11ea2 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11e9e:	25 e4       	ldi	r18, 0x45	; 69
   11ea0:	01 c0       	rjmp	.+2      	; 0x11ea4 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11ea2:	2d e2       	ldi	r18, 0x2D	; 45
   11ea4:	fc 01       	movw	r30, r24
   11ea6:	20 83       	st	Z, r18
   11ea8:	fd 01       	movw	r30, r26
   11eaa:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11eac:	11 ff       	sbrs	r17, 1
   11eae:	02 c0       	rjmp	.+4      	; 0x11eb4 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11eb0:	83 e5       	ldi	r24, 0x53	; 83
   11eb2:	01 c0       	rjmp	.+2      	; 0x11eb6 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11eb4:	8d e2       	ldi	r24, 0x2D	; 45
   11eb6:	8c 93       	st	X, r24
   11eb8:	df 01       	movw	r26, r30
   11eba:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11ebc:	13 ff       	sbrs	r17, 3
   11ebe:	02 c0       	rjmp	.+4      	; 0x11ec4 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11ec0:	82 e5       	ldi	r24, 0x52	; 82
   11ec2:	01 c0       	rjmp	.+2      	; 0x11ec6 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11ec4:	8d e2       	ldi	r24, 0x2D	; 45
   11ec6:	80 83       	st	Z, r24
   11ec8:	fd 01       	movw	r30, r26
   11eca:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11ecc:	14 ff       	sbrs	r17, 4
   11ece:	02 c0       	rjmp	.+4      	; 0x11ed4 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   11ed0:	89 e4       	ldi	r24, 0x49	; 73
   11ed2:	01 c0       	rjmp	.+2      	; 0x11ed6 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11ed4:	8d e2       	ldi	r24, 0x2D	; 45
   11ed6:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11ed8:	a1 14       	cp	r10, r1
   11eda:	b1 04       	cpc	r11, r1
   11edc:	d1 f4       	brne	.+52     	; 0x11f12 <gpib_trace_display+0x116>
   11ede:	df 01       	movw	r26, r30
   11ee0:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11ee2:	15 ff       	sbrs	r17, 5
   11ee4:	02 c0       	rjmp	.+4      	; 0x11eea <gpib_trace_display+0xee>
            *tmp++ = 'P';
   11ee6:	80 e5       	ldi	r24, 0x50	; 80
   11ee8:	01 c0       	rjmp	.+2      	; 0x11eec <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   11eea:	8d e2       	ldi	r24, 0x2D	; 45
   11eec:	80 83       	st	Z, r24
   11eee:	fd 01       	movw	r30, r26
   11ef0:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11ef2:	16 ff       	sbrs	r17, 6
   11ef4:	02 c0       	rjmp	.+4      	; 0x11efa <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   11ef6:	84 e5       	ldi	r24, 0x54	; 84
   11ef8:	01 c0       	rjmp	.+2      	; 0x11efc <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   11efa:	8d e2       	ldi	r24, 0x2D	; 45
   11efc:	8c 93       	st	X, r24
   11efe:	cf 01       	movw	r24, r30
   11f00:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11f02:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11f04:	17 ff       	sbrs	r17, 7
   11f06:	02 c0       	rjmp	.+4      	; 0x11f0c <gpib_trace_display+0x110>
            *tmp++ = 'B';
   11f08:	82 e4       	ldi	r24, 0x42	; 66
   11f0a:	01 c0       	rjmp	.+2      	; 0x11f0e <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   11f0c:	8d e2       	ldi	r24, 0x2D	; 45
   11f0e:	80 83       	st	Z, r24
   11f10:	08 c0       	rjmp	.+16     	; 0x11f22 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11f12:	8d e2       	ldi	r24, 0x2D	; 45
   11f14:	80 83       	st	Z, r24
        *tmp++ = '-';
   11f16:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11f18:	7f 01       	movw	r14, r30
   11f1a:	43 e0       	ldi	r20, 0x03	; 3
   11f1c:	e4 0e       	add	r14, r20
   11f1e:	f1 1c       	adc	r15, r1
   11f20:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11f22:	f7 01       	movw	r30, r14
   11f24:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11f26:	f1 e0       	ldi	r31, 0x01	; 1
   11f28:	af 1a       	sub	r10, r31
   11f2a:	b1 08       	sbc	r11, r1
   11f2c:	42 e0       	ldi	r20, 0x02	; 2
   11f2e:	a4 16       	cp	r10, r20
   11f30:	b1 04       	cpc	r11, r1
   11f32:	f0 f4       	brcc	.+60     	; 0x11f70 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   11f34:	15 ff       	sbrs	r17, 5
   11f36:	03 c0       	rjmp	.+6      	; 0x11f3e <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   11f38:	63 ed       	ldi	r22, 0xD3	; 211
   11f3a:	7c e0       	ldi	r23, 0x0C	; 12
   11f3c:	02 c0       	rjmp	.+4      	; 0x11f42 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11f3e:	63 e0       	ldi	r22, 0x03	; 3
   11f40:	78 e0       	ldi	r23, 0x08	; 8
   11f42:	c6 01       	movw	r24, r12
   11f44:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
        if(status & NRFD_FLAG)
   11f48:	16 ff       	sbrs	r17, 6
   11f4a:	03 c0       	rjmp	.+6      	; 0x11f52 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11f4c:	69 ed       	ldi	r22, 0xD9	; 217
   11f4e:	7c e0       	ldi	r23, 0x0C	; 12
   11f50:	02 c0       	rjmp	.+4      	; 0x11f56 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11f52:	63 e0       	ldi	r22, 0x03	; 3
   11f54:	78 e0       	ldi	r23, 0x08	; 8
   11f56:	c6 01       	movw	r24, r12
   11f58:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
        if(status & NDAC_FLAG)
   11f5c:	17 ff       	sbrs	r17, 7
   11f5e:	03 c0       	rjmp	.+6      	; 0x11f66 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11f60:	6f ed       	ldi	r22, 0xDF	; 223
   11f62:	7c e0       	ldi	r23, 0x0C	; 12
   11f64:	02 c0       	rjmp	.+4      	; 0x11f6a <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   11f66:	63 e0       	ldi	r22, 0x03	; 3
   11f68:	78 e0       	ldi	r23, 0x08	; 8
   11f6a:	c6 01       	movw	r24, r12
   11f6c:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
    }

    if( (status & ATN_FLAG) )
   11f70:	81 14       	cp	r8, r1
   11f72:	91 04       	cpc	r9, r1
   11f74:	09 f4       	brne	.+2      	; 0x11f78 <gpib_trace_display+0x17c>
   11f76:	58 c0       	rjmp	.+176    	; 0x12028 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   11f78:	c8 01       	movw	r24, r16
   11f7a:	8f 77       	andi	r24, 0x7F	; 127
   11f7c:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11f7e:	9c 01       	movw	r18, r24
   11f80:	20 52       	subi	r18, 0x20	; 32
   11f82:	31 09       	sbc	r19, r1
   11f84:	2f 31       	cpi	r18, 0x1F	; 31
   11f86:	31 05       	cpc	r19, r1
   11f88:	38 f4       	brcc	.+14     	; 0x11f98 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11f8a:	0f 71       	andi	r16, 0x1F	; 31
   11f8c:	11 27       	eor	r17, r17
   11f8e:	1f 93       	push	r17
   11f90:	0f 93       	push	r16
   11f92:	87 ed       	ldi	r24, 0xD7	; 215
   11f94:	90 e1       	ldi	r25, 0x10	; 16
   11f96:	0c c0       	rjmp	.+24     	; 0x11fb0 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11f98:	9c 01       	movw	r18, r24
   11f9a:	20 54       	subi	r18, 0x40	; 64
   11f9c:	31 09       	sbc	r19, r1
   11f9e:	2f 30       	cpi	r18, 0x0F	; 15
   11fa0:	31 05       	cpc	r19, r1
   11fa2:	98 f4       	brcc	.+38     	; 0x11fca <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11fa4:	0f 71       	andi	r16, 0x1F	; 31
   11fa6:	11 27       	eor	r17, r17
   11fa8:	1f 93       	push	r17
   11faa:	0f 93       	push	r16
   11fac:	8c ec       	ldi	r24, 0xCC	; 204
   11fae:	90 e1       	ldi	r25, 0x10	; 16
   11fb0:	1f 92       	push	r1
   11fb2:	9f 93       	push	r25
   11fb4:	8f 93       	push	r24
   11fb6:	ff 92       	push	r15
   11fb8:	ef 92       	push	r14
   11fba:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
   11fbe:	0f b6       	in	r0, 0x3f	; 63
   11fc0:	f8 94       	cli
   11fc2:	de bf       	out	0x3e, r29	; 62
   11fc4:	0f be       	out	0x3f, r0	; 63
   11fc6:	cd bf       	out	0x3d, r28	; 61
   11fc8:	2f c0       	rjmp	.+94     	; 0x12028 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11fca:	9c 01       	movw	r18, r24
   11fcc:	20 56       	subi	r18, 0x60	; 96
   11fce:	31 09       	sbc	r19, r1
   11fd0:	20 31       	cpi	r18, 0x10	; 16
   11fd2:	31 05       	cpc	r19, r1
   11fd4:	28 f0       	brcs	.+10     	; 0x11fe0 <gpib_trace_display+0x1e4>
   11fd6:	ee e7       	ldi	r30, 0x7E	; 126
   11fd8:	f1 e0       	ldi	r31, 0x01	; 1
   11fda:	00 e0       	ldi	r16, 0x00	; 0
   11fdc:	10 e0       	ldi	r17, 0x00	; 0
   11fde:	09 c0       	rjmp	.+18     	; 0x11ff2 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11fe0:	0f 71       	andi	r16, 0x1F	; 31
   11fe2:	11 27       	eor	r17, r17
   11fe4:	1f 93       	push	r17
   11fe6:	0f 93       	push	r16
   11fe8:	81 ec       	ldi	r24, 0xC1	; 193
   11fea:	90 e1       	ldi	r25, 0x10	; 16
   11fec:	e1 cf       	rjmp	.-62     	; 0x11fb0 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11fee:	0f 5f       	subi	r16, 0xFF	; 255
   11ff0:	1f 4f       	sbci	r17, 0xFF	; 255
   11ff2:	20 81       	ld	r18, Z
   11ff4:	31 81       	ldd	r19, Z+1	; 0x01
   11ff6:	2f 3f       	cpi	r18, 0xFF	; 255
   11ff8:	4f ef       	ldi	r20, 0xFF	; 255
   11ffa:	34 07       	cpc	r19, r20
   11ffc:	a9 f0       	breq	.+42     	; 0x12028 <gpib_trace_display+0x22c>
   11ffe:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   12000:	82 17       	cp	r24, r18
   12002:	93 07       	cpc	r25, r19
   12004:	a1 f7       	brne	.-24     	; 0x11fee <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   12006:	67 e0       	ldi	r22, 0x07	; 7
   12008:	78 e0       	ldi	r23, 0x08	; 8
   1200a:	c7 01       	movw	r24, r14
   1200c:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   12010:	00 0f       	add	r16, r16
   12012:	11 1f       	adc	r17, r17
   12014:	00 0f       	add	r16, r16
   12016:	11 1f       	adc	r17, r17
   12018:	f8 01       	movw	r30, r16
   1201a:	e2 58       	subi	r30, 0x82	; 130
   1201c:	fe 4f       	sbci	r31, 0xFE	; 254
   1201e:	62 81       	ldd	r22, Z+2	; 0x02
   12020:	73 81       	ldd	r23, Z+3	; 0x03
   12022:	c7 01       	movw	r24, r14
   12024:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   12028:	20 91 20 19 	lds	r18, 0x1920	; 0x801920 <gpib_log_fp>
   1202c:	30 91 21 19 	lds	r19, 0x1921	; 0x801921 <gpib_log_fp+0x1>
   12030:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
   12034:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
   12038:	23 2b       	or	r18, r19
   1203a:	21 f4       	brne	.+8      	; 0x12044 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   1203c:	90 93 21 19 	sts	0x1921, r25	; 0x801921 <gpib_log_fp+0x1>
   12040:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   12044:	20 91 20 19 	lds	r18, 0x1920	; 0x801920 <gpib_log_fp>
   12048:	30 91 21 19 	lds	r19, 0x1921	; 0x801921 <gpib_log_fp+0x1>
   1204c:	82 17       	cp	r24, r18
   1204e:	93 07       	cpc	r25, r19
   12050:	19 f0       	breq	.+6      	; 0x12058 <gpib_trace_display+0x25c>
        puts(str);
   12052:	c6 01       	movw	r24, r12
   12054:	0e 94 9d 79 	call	0xf33a	; 0xf33a <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   12058:	df 92       	push	r13
   1205a:	cf 92       	push	r12
   1205c:	85 ee       	ldi	r24, 0xE5	; 229
   1205e:	9c e0       	ldi	r25, 0x0C	; 12
   12060:	9f 93       	push	r25
   12062:	8f 93       	push	r24
   12064:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <gpib_log_fp+0x1>
   12068:	8f 93       	push	r24
   1206a:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <gpib_log_fp>
   1206e:	8f 93       	push	r24
   12070:	0e 94 4e 82 	call	0x1049c	; 0x1049c <fprintf>
}
   12074:	0f 90       	pop	r0
   12076:	0f 90       	pop	r0
   12078:	0f 90       	pop	r0
   1207a:	0f 90       	pop	r0
   1207c:	0f 90       	pop	r0
   1207e:	0f 90       	pop	r0
   12080:	c0 58       	subi	r28, 0x80	; 128
   12082:	df 4f       	sbci	r29, 0xFF	; 255
   12084:	ec e0       	ldi	r30, 0x0C	; 12
   12086:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

0001208a <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1208a:	af 92       	push	r10
   1208c:	bf 92       	push	r11
   1208e:	cf 92       	push	r12
   12090:	df 92       	push	r13
   12092:	ff 92       	push	r15
   12094:	0f 93       	push	r16
   12096:	1f 93       	push	r17
   12098:	cf 93       	push	r28
   1209a:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1209c:	20 91 1f 19 	lds	r18, 0x191F	; 0x80191f <gpib_unread_f>
   120a0:	22 23       	and	r18, r18
   120a2:	39 f0       	breq	.+14     	; 0x120b2 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   120a4:	10 92 1f 19 	sts	0x191F, r1	; 0x80191f <gpib_unread_f>
        return(gpib_unread_data);
   120a8:	80 91 ad 1e 	lds	r24, 0x1EAD	; 0x801ead <gpib_unread_data>
   120ac:	90 91 ae 1e 	lds	r25, 0x1EAE	; 0x801eae <gpib_unread_data+0x1>
   120b0:	b8 c0       	rjmp	.+368    	; 0x12222 <gpib_read_byte+0x198>
   120b2:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   120b4:	81 e0       	ldi	r24, 0x01	; 1
   120b6:	90 e0       	ldi	r25, 0x00	; 0
   120b8:	ad db       	rcall	.-2214   	; 0x11814 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   120ba:	c1 14       	cp	r12, r1
   120bc:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   120be:	51 f0       	breq	.+20     	; 0x120d4 <gpib_read_byte+0x4a>
   120c0:	c7 dc       	rcall	.-1650   	; 0x11a50 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   120c2:	8c 01       	movw	r16, r24
   120c4:	d5 dc       	rcall	.-1622   	; 0x11a70 <gpib_handshake_pin_read>
   120c6:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   120c8:	19 2b       	or	r17, r25
   120ca:	62 e0       	ldi	r22, 0x02	; 2
   120cc:	70 e0       	ldi	r23, 0x00	; 0
   120ce:	c8 01       	movw	r24, r16
   120d0:	95 de       	rcall	.-726    	; 0x11dfc <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   120d2:	02 c0       	rjmp	.+4      	; 0x120d8 <gpib_read_byte+0x4e>
   120d4:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   120d6:	10 e0       	ldi	r17, 0x00	; 0
   120d8:	f1 2c       	mov	r15, r1
   120da:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   120dc:	d0 e0       	ldi	r29, 0x00	; 0
   120de:	80 e0       	ldi	r24, 0x00	; 0
   120e0:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   120e4:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   120e6:	09 f0       	breq	.+2      	; 0x120ea <gpib_read_byte+0x60>
   120e8:	78 c0       	rjmp	.+240    	; 0x121da <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   120ea:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   120ec:	03 c0       	rjmp	.+6      	; 0x120f4 <gpib_read_byte+0x6a>
   120ee:	d0 61       	ori	r29, 0x10	; 16
   120f0:	b4 db       	rcall	.-2200   	; 0x1185a <gpib_bus_init>
            break;
        }


        switch(rx_state)
   120f2:	73 c0       	rjmp	.+230    	; 0x121da <gpib_read_byte+0x150>
   120f4:	8f 2d       	mov	r24, r15
   120f6:	90 e0       	ldi	r25, 0x00	; 0
   120f8:	89 30       	cpi	r24, 0x09	; 9
   120fa:	91 05       	cpc	r25, r1
   120fc:	08 f0       	brcs	.+2      	; 0x12100 <gpib_read_byte+0x76>
   120fe:	51 c0       	rjmp	.+162    	; 0x121a2 <gpib_read_byte+0x118>
   12100:	fc 01       	movw	r30, r24
   12102:	e9 53       	subi	r30, 0x39	; 57
   12104:	ff 4f       	sbci	r31, 0xFF	; 255
   12106:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
   1210a:	52 98       	cbi	0x0a, 2	; 10
   1210c:	8d e0       	ldi	r24, 0x0D	; 13
   1210e:	8a 95       	dec	r24
   12110:	f1 f7       	brne	.-4      	; 0x1210e <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   12112:	00 00       	nop
   12114:	ff 24       	eor	r15, r15
   12116:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   12118:	7f c0       	rjmp	.+254    	; 0x12218 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1211a:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1211c:	7d c0       	rjmp	.+250    	; 0x12218 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   1211e:	62 e0       	ldi	r22, 0x02	; 2
   12120:	f6 2e       	mov	r15, r22
   12122:	7a c0       	rjmp	.+244    	; 0x12218 <gpib_read_byte+0x18e>
   12124:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   12126:	52 9a       	sbi	0x0a, 2	; 10
   12128:	8d dc       	rcall	.-1766   	; 0x11a44 <gpib_bus_read>
   1212a:	a8 2e       	mov	r10, r24
   1212c:	b1 2c       	mov	r11, r1
                ch |= control_last;
   1212e:	90 dc       	rcall	.-1760   	; 0x11a50 <gpib_control_pin_read>
   12130:	8c 01       	movw	r16, r24

                if(trace)
   12132:	c8 2b       	or	r28, r24
   12134:	d9 2b       	or	r29, r25
   12136:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   12138:	db 29       	or	r29, r11
   1213a:	c1 14       	cp	r12, r1
   1213c:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1213e:	49 f0       	breq	.+18     	; 0x12152 <gpib_read_byte+0xc8>
   12140:	97 dc       	rcall	.-1746   	; 0x11a70 <gpib_handshake_pin_read>
   12142:	08 2b       	or	r16, r24
   12144:	19 2b       	or	r17, r25
   12146:	61 e0       	ldi	r22, 0x01	; 1
   12148:	70 e0       	ldi	r23, 0x00	; 0
   1214a:	c5 01       	movw	r24, r10
   1214c:	80 2b       	or	r24, r16
   1214e:	91 2b       	or	r25, r17
   12150:	55 de       	rcall	.-854    	; 0x11dfc <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   12152:	53 98       	cbi	0x0a, 3	; 10
   12154:	8d e0       	ldi	r24, 0x0D	; 13
   12156:	8a 95       	dec	r24
   12158:	f1 f7       	brne	.-4      	; 0x12156 <gpib_read_byte+0xcc>
   1215a:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1215c:	64 ef       	ldi	r22, 0xF4	; 244
   1215e:	71 e0       	ldi	r23, 0x01	; 1
   12160:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   12162:	90 e0       	ldi	r25, 0x00	; 0
   12164:	4d db       	rcall	.-2406   	; 0x11800 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   12166:	54 e0       	ldi	r21, 0x04	; 4
   12168:	f5 2e       	mov	r15, r21
   1216a:	56 c0       	rjmp	.+172    	; 0x12218 <gpib_read_byte+0x18e>
   1216c:	4b 9b       	sbis	0x09, 3	; 9
   1216e:	0c c0       	rjmp	.+24     	; 0x12188 <gpib_read_byte+0xfe>
   12170:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12172:	71 e0       	ldi	r23, 0x01	; 1
   12174:	80 e0       	ldi	r24, 0x00	; 0
   12176:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   12178:	43 db       	rcall	.-2426   	; 0x11800 <gpib_timeout_set>
   1217a:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1217c:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1217e:	04 c0       	rjmp	.+8      	; 0x12188 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   12180:	19 9b       	sbis	0x03, 1	; 3
   12182:	02 c0       	rjmp	.+4      	; 0x12188 <gpib_read_byte+0xfe>
   12184:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   12186:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   12188:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <gpib_timer+0x8>
   1218c:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   1218e:	09 f4       	brne	.+2      	; 0x12192 <gpib_read_byte+0x108>
   12190:	43 c0       	rjmp	.+134    	; 0x12218 <gpib_read_byte+0x18e>
   12192:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   12194:	27 e0       	ldi	r18, 0x07	; 7
   12196:	f2 2e       	mov	r15, r18
   12198:	3f c0       	rjmp	.+126    	; 0x12218 <gpib_read_byte+0x18e>
   1219a:	81 e0       	ldi	r24, 0x01	; 1
   1219c:	90 e0       	ldi	r25, 0x00	; 0
   1219e:	3a db       	rcall	.-2444   	; 0x11814 <gpib_bus_read_init>
   121a0:	04 c0       	rjmp	.+8      	; 0x121aa <gpib_read_byte+0x120>
   121a2:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   121a4:	d1 04       	cpc	r13, r1
   121a6:	99 f0       	breq	.+38     	; 0x121ce <gpib_read_byte+0x144>
   121a8:	05 c0       	rjmp	.+10     	; 0x121b4 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   121aa:	c1 14       	cp	r12, r1
   121ac:	d1 04       	cpc	r13, r1
   121ae:	a9 f0       	breq	.+42     	; 0x121da <gpib_read_byte+0x150>
   121b0:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   121b2:	f9 2e       	mov	r15, r25
   121b4:	4d dc       	rcall	.-1894   	; 0x11a50 <gpib_control_pin_read>
   121b6:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   121b8:	5b dc       	rcall	.-1866   	; 0x11a70 <gpib_handshake_pin_read>
   121ba:	a8 2a       	or	r10, r24
   121bc:	b9 2a       	or	r11, r25
   121be:	a0 16       	cp	r10, r16
   121c0:	b1 06       	cpc	r11, r17
   121c2:	31 f0       	breq	.+12     	; 0x121d0 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   121c4:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   121c6:	70 e0       	ldi	r23, 0x00	; 0
   121c8:	c5 01       	movw	r24, r10
   121ca:	18 de       	rcall	.-976    	; 0x11dfc <gpib_trace_display>
   121cc:	01 c0       	rjmp	.+2      	; 0x121d0 <gpib_read_byte+0x146>
   121ce:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   121d0:	88 e0       	ldi	r24, 0x08	; 8
   121d2:	f8 16       	cp	r15, r24
   121d4:	11 f0       	breq	.+4      	; 0x121da <gpib_read_byte+0x150>
   121d6:	85 01       	movw	r16, r10
   121d8:	82 cf       	rjmp	.-252    	; 0x120de <gpib_read_byte+0x54>
   121da:	80 91 a7 1e 	lds	r24, 0x1EA7	; 0x801ea7 <current>
   121de:	90 91 a8 1e 	lds	r25, 0x1EA8	; 0x801ea8 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   121e2:	90 93 a4 1c 	sts	0x1CA4, r25	; 0x801ca4 <lastcmd+0x1>
   121e6:	80 93 a3 1c 	sts	0x1CA3, r24	; 0x801ca3 <lastcmd>
   121ea:	ce 01       	movw	r24, r28
   121ec:	88 27       	eor	r24, r24
        current = 0;
   121ee:	90 7d       	andi	r25, 0xD0	; 208
   121f0:	89 2b       	or	r24, r25
   121f2:	11 f4       	brne	.+4      	; 0x121f8 <gpib_read_byte+0x16e>
   121f4:	d2 fd       	sbrc	r29, 2
   121f6:	05 c0       	rjmp	.+10     	; 0x12202 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   121f8:	10 92 a8 1e 	sts	0x1EA8, r1	; 0x801ea8 <current+0x1>
   121fc:	10 92 a7 1e 	sts	0x1EA7, r1	; 0x801ea7 <current>
   12200:	07 c0       	rjmp	.+14     	; 0x12210 <gpib_read_byte+0x186>
   12202:	ce 01       	movw	r24, r28
   12204:	8f 77       	andi	r24, 0x7F	; 127
   12206:	99 27       	eor	r25, r25
   12208:	90 93 a8 1e 	sts	0x1EA8, r25	; 0x801ea8 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1220c:	80 93 a7 1e 	sts	0x1EA7, r24	; 0x801ea7 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   12210:	ce 01       	movw	r24, r28
   12212:	07 c0       	rjmp	.+14     	; 0x12222 <gpib_read_byte+0x198>
   12214:	86 e0       	ldi	r24, 0x06	; 6
   12216:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   12218:	c1 14       	cp	r12, r1
   1221a:	d1 04       	cpc	r13, r1
   1221c:	09 f4       	brne	.+2      	; 0x12220 <gpib_read_byte+0x196>
   1221e:	5f cf       	rjmp	.-322    	; 0x120de <gpib_read_byte+0x54>
   12220:	c9 cf       	rjmp	.-110    	; 0x121b4 <gpib_read_byte+0x12a>
   12222:	df 91       	pop	r29
   12224:	cf 91       	pop	r28
   12226:	1f 91       	pop	r17
   12228:	0f 91       	pop	r16
   1222a:	ff 90       	pop	r15
   1222c:	df 90       	pop	r13
   1222e:	cf 90       	pop	r12
   12230:	bf 90       	pop	r11
   12232:	af 90       	pop	r10
   12234:	08 95       	ret

00012236 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   12236:	60 e0       	ldi	r22, 0x00	; 0
   12238:	70 e0       	ldi	r23, 0x00	; 0
   1223a:	e0 cd       	rjmp	.-1088   	; 0x11dfc <gpib_trace_display>
   1223c:	08 95       	ret

0001223e <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   1223e:	a0 e0       	ldi	r26, 0x00	; 0
   12240:	b0 e0       	ldi	r27, 0x00	; 0
   12242:	e5 e2       	ldi	r30, 0x25	; 37
   12244:	f1 e9       	ldi	r31, 0x91	; 145
   12246:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   1224a:	5b 01       	movw	r10, r22
   1224c:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1224e:	fa 01       	movw	r30, r20
   12250:	20 81       	ld	r18, Z
   12252:	31 81       	ldd	r19, Z+1	; 0x01
   12254:	22 27       	eor	r18, r18
   12256:	31 83       	std	Z+1, r19	; 0x01
   12258:	20 83       	st	Z, r18

    if(!size)
   1225a:	67 2b       	or	r22, r23
   1225c:	21 f0       	breq	.+8      	; 0x12266 <gpib_read_str+0x28>
   1225e:	7c 01       	movw	r14, r24
   12260:	c0 e0       	ldi	r28, 0x00	; 0
   12262:	d0 e0       	ldi	r29, 0x00	; 0
   12264:	28 c0       	rjmp	.+80     	; 0x122b6 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   12266:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1226a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1226e:	85 70       	andi	r24, 0x05	; 5
   12270:	99 27       	eor	r25, r25
   12272:	89 2b       	or	r24, r25
   12274:	09 f4       	brne	.+2      	; 0x12278 <gpib_read_str+0x3a>
   12276:	89 c0       	rjmp	.+274    	; 0x1238a <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   12278:	88 ea       	ldi	r24, 0xA8	; 168
   1227a:	90 e1       	ldi	r25, 0x10	; 16
   1227c:	1f 92       	push	r1
   1227e:	9f 93       	push	r25
   12280:	8f 93       	push	r24
   12282:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12286:	0f 90       	pop	r0
   12288:	0f 90       	pop	r0
   1228a:	0f 90       	pop	r0
   1228c:	7e c0       	rjmp	.+252    	; 0x1238a <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1228e:	80 27       	eor	r24, r16
   12290:	91 27       	eor	r25, r17
   12292:	92 fd       	sbrc	r25, 2
   12294:	2e c0       	rjmp	.+92     	; 0x122f2 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   12296:	c8 01       	movw	r24, r16
   12298:	88 27       	eor	r24, r24
   1229a:	94 70       	andi	r25, 0x04	; 4
   1229c:	12 ff       	sbrs	r17, 2
   1229e:	49 c0       	rjmp	.+146    	; 0x12332 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   122a0:	20 2f       	mov	r18, r16
   122a2:	2f 77       	andi	r18, 0x7F	; 127
   122a4:	f7 01       	movw	r30, r14
   122a6:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   122a8:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   122aa:	89 2b       	or	r24, r25
   122ac:	09 f4       	brne	.+2      	; 0x122b0 <gpib_read_str+0x72>
   122ae:	44 c0       	rjmp	.+136    	; 0x12338 <gpib_read_str+0xfa>
   122b0:	ff ef       	ldi	r31, 0xFF	; 255
   122b2:	ef 1a       	sub	r14, r31
   122b4:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   122b6:	ca 15       	cp	r28, r10
   122b8:	db 05       	cpc	r29, r11
   122ba:	0c f0       	brlt	.+2      	; 0x122be <gpib_read_str+0x80>
   122bc:	47 c0       	rjmp	.+142    	; 0x1234c <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   122be:	80 e0       	ldi	r24, 0x00	; 0
   122c0:	90 e0       	ldi	r25, 0x00	; 0
   122c2:	e3 de       	rcall	.-570    	; 0x1208a <gpib_read_byte>
   122c4:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   122c6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   122ca:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   122ce:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   122d0:	02 c0       	rjmp	.+4      	; 0x122d6 <gpib_read_str+0x98>
   122d2:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   122d4:	b0 df       	rcall	.-160    	; 0x12236 <gpib_decode>
   122d6:	98 01       	movw	r18, r16
   122d8:	22 27       	eor	r18, r18
   122da:	30 7d       	andi	r19, 0xD0	; 208
   122dc:	f6 01       	movw	r30, r12
   122de:	80 81       	ld	r24, Z
   122e0:	91 81       	ldd	r25, Z+1	; 0x01
   122e2:	21 15       	cp	r18, r1
   122e4:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   122e6:	99 f2       	breq	.-90     	; 0x1228e <gpib_read_str+0x50>
   122e8:	82 2b       	or	r24, r18
   122ea:	93 2b       	or	r25, r19
   122ec:	91 83       	std	Z+1, r25	; 0x01
            break;
   122ee:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   122f0:	30 c0       	rjmp	.+96     	; 0x12352 <gpib_read_str+0x114>
   122f2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   122f6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   122fa:	85 70       	andi	r24, 0x05	; 5
   122fc:	99 27       	eor	r25, r25
   122fe:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   12300:	a9 f0       	breq	.+42     	; 0x1232c <gpib_read_str+0xee>
   12302:	c8 01       	movw	r24, r16
   12304:	99 27       	eor	r25, r25
   12306:	9f 93       	push	r25
   12308:	8f 93       	push	r24
   1230a:	df 93       	push	r29
   1230c:	cf 93       	push	r28
   1230e:	8b e7       	ldi	r24, 0x7B	; 123
   12310:	90 e1       	ldi	r25, 0x10	; 16
   12312:	1f 92       	push	r1
   12314:	9f 93       	push	r25
   12316:	8f 93       	push	r24
   12318:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1231c:	ed b7       	in	r30, 0x3d	; 61
   1231e:	fe b7       	in	r31, 0x3e	; 62
   12320:	37 96       	adiw	r30, 0x07	; 7
   12322:	0f b6       	in	r0, 0x3f	; 63
   12324:	f8 94       	cli
   12326:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   12328:	0f be       	out	0x3f, r0	; 63
   1232a:	ed bf       	out	0x3d, r30	; 61
   1232c:	c8 01       	movw	r24, r16
            break;
   1232e:	65 db       	rcall	.-2358   	; 0x119fa <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   12330:	10 c0       	rjmp	.+32     	; 0x12352 <gpib_read_str+0x114>
   12332:	f7 01       	movw	r30, r14
   12334:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   12336:	b8 cf       	rjmp	.-144    	; 0x122a8 <gpib_read_str+0x6a>
   12338:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   1233a:	ba cf       	rjmp	.-140    	; 0x122b0 <gpib_read_str+0x72>
   1233c:	f6 01       	movw	r30, r12
   1233e:	80 81       	ld	r24, Z
   12340:	91 81       	ldd	r25, Z+1	; 0x01
   12342:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   12344:	24 c0       	rjmp	.+72     	; 0x1238e <gpib_read_str+0x150>
   12346:	91 60       	ori	r25, 0x01	; 1
   12348:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1234a:	80 83       	st	Z, r24
   1234c:	ca 15       	cp	r28, r10
   1234e:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   12350:	f1 f0       	breq	.+60     	; 0x1238e <gpib_read_str+0x150>
   12352:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12356:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1235a:	85 70       	andi	r24, 0x05	; 5
   1235c:	99 27       	eor	r25, r25
   1235e:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   12360:	b1 f0       	breq	.+44     	; 0x1238e <gpib_read_str+0x150>
   12362:	bf 92       	push	r11
   12364:	af 92       	push	r10
   12366:	df 93       	push	r29
   12368:	cf 93       	push	r28
   1236a:	84 e5       	ldi	r24, 0x54	; 84
   1236c:	90 e1       	ldi	r25, 0x10	; 16
   1236e:	1f 92       	push	r1
   12370:	9f 93       	push	r25
   12372:	8f 93       	push	r24
   12374:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12378:	ed b7       	in	r30, 0x3d	; 61
   1237a:	fe b7       	in	r31, 0x3e	; 62
   1237c:	37 96       	adiw	r30, 0x07	; 7
   1237e:	0f b6       	in	r0, 0x3f	; 63
   12380:	f8 94       	cli
   12382:	fe bf       	out	0x3e, r31	; 62
   12384:	0f be       	out	0x3f, r0	; 63
   12386:	ed bf       	out	0x3d, r30	; 61
   12388:	02 c0       	rjmp	.+4      	; 0x1238e <gpib_read_str+0x150>
   1238a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   1238c:	d0 e0       	ldi	r29, 0x00	; 0
   1238e:	ce 01       	movw	r24, r28
   12390:	cd b7       	in	r28, 0x3d	; 61
   12392:	de b7       	in	r29, 0x3e	; 62
   12394:	ea e0       	ldi	r30, 0x0A	; 10
   12396:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001239a <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1239a:	a0 e0       	ldi	r26, 0x00	; 0
   1239c:	b0 e0       	ldi	r27, 0x00	; 0
   1239e:	e3 ed       	ldi	r30, 0xD3	; 211
   123a0:	f1 e9       	ldi	r31, 0x91	; 145
   123a2:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   123a6:	8b 01       	movw	r16, r22
   123a8:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   123aa:	fa 01       	movw	r30, r20
   123ac:	20 81       	ld	r18, Z
   123ae:	31 81       	ldd	r19, Z+1	; 0x01
   123b0:	22 27       	eor	r18, r18
   123b2:	31 83       	std	Z+1, r19	; 0x01
   123b4:	20 83       	st	Z, r18

    if(!size)
   123b6:	67 2b       	or	r22, r23
   123b8:	21 f0       	breq	.+8      	; 0x123c2 <gpib_write_str+0x28>
   123ba:	6c 01       	movw	r12, r24
   123bc:	c0 e0       	ldi	r28, 0x00	; 0
   123be:	d0 e0       	ldi	r29, 0x00	; 0
   123c0:	35 c0       	rjmp	.+106    	; 0x1242c <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   123c2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   123c6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   123ca:	85 70       	andi	r24, 0x05	; 5
   123cc:	99 27       	eor	r25, r25
   123ce:	89 2b       	or	r24, r25
   123d0:	09 f4       	brne	.+2      	; 0x123d4 <gpib_write_str+0x3a>
   123d2:	54 c0       	rjmp	.+168    	; 0x1247c <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   123d4:	8a e3       	ldi	r24, 0x3A	; 58
   123d6:	90 e1       	ldi	r25, 0x10	; 16
   123d8:	1f 92       	push	r1
   123da:	9f 93       	push	r25
   123dc:	8f 93       	push	r24
   123de:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   123e2:	0f 90       	pop	r0
   123e4:	0f 90       	pop	r0
   123e6:	0f 90       	pop	r0
   123e8:	49 c0       	rjmp	.+146    	; 0x1247c <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   123ea:	21 96       	adiw	r28, 0x01	; 1
   123ec:	f6 01       	movw	r30, r12
   123ee:	81 91       	ld	r24, Z+
   123f0:	6f 01       	movw	r12, r30
   123f2:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   123f4:	f7 01       	movw	r30, r14
   123f6:	20 81       	ld	r18, Z
   123f8:	31 81       	ldd	r19, Z+1	; 0x01
   123fa:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   123fc:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   123fe:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   12400:	19 c0       	rjmp	.+50     	; 0x12434 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   12402:	42 db       	rcall	.-2428   	; 0x11a88 <gpib_write_byte>
   12404:	5c 01       	movw	r10, r24
   12406:	aa 24       	eor	r10, r10
   12408:	f0 ed       	ldi	r31, 0xD0	; 208
   1240a:	bf 22       	and	r11, r31
   1240c:	f7 01       	movw	r30, r14
   1240e:	20 81       	ld	r18, Z
   12410:	31 81       	ldd	r19, Z+1	; 0x01
   12412:	2a 29       	or	r18, r10
   12414:	3b 29       	or	r19, r11
   12416:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   12418:	20 83       	st	Z, r18
   1241a:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1241e:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
            gpib_decode(val);
   12422:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   12424:	08 df       	rcall	.-496    	; 0x12236 <gpib_decode>
   12426:	a1 14       	cp	r10, r1
   12428:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   1242a:	49 f4       	brne	.+18     	; 0x1243e <gpib_write_str+0xa4>
   1242c:	c0 17       	cp	r28, r16
   1242e:	d1 07       	cpc	r29, r17
   12430:	e4 f2       	brlt	.-72     	; 0x123ea <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   12432:	05 c0       	rjmp	.+10     	; 0x1243e <gpib_write_str+0xa4>
   12434:	0c 17       	cp	r16, r28
   12436:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   12438:	21 f7       	brne	.-56     	; 0x12402 <gpib_write_str+0x68>
   1243a:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1243c:	e2 cf       	rjmp	.-60     	; 0x12402 <gpib_write_str+0x68>
   1243e:	c0 17       	cp	r28, r16
   12440:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   12442:	f1 f0       	breq	.+60     	; 0x12480 <gpib_write_str+0xe6>
   12444:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12448:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1244c:	85 70       	andi	r24, 0x05	; 5
   1244e:	99 27       	eor	r25, r25
   12450:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   12452:	b1 f0       	breq	.+44     	; 0x12480 <gpib_write_str+0xe6>
   12454:	1f 93       	push	r17
   12456:	0f 93       	push	r16
   12458:	df 93       	push	r29
   1245a:	cf 93       	push	r28
   1245c:	82 e1       	ldi	r24, 0x12	; 18
   1245e:	90 e1       	ldi	r25, 0x10	; 16
   12460:	1f 92       	push	r1
   12462:	9f 93       	push	r25
   12464:	8f 93       	push	r24
   12466:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1246a:	8d b7       	in	r24, 0x3d	; 61
   1246c:	9e b7       	in	r25, 0x3e	; 62
   1246e:	07 96       	adiw	r24, 0x07	; 7
   12470:	0f b6       	in	r0, 0x3f	; 63
   12472:	f8 94       	cli
   12474:	9e bf       	out	0x3e, r25	; 62
   12476:	0f be       	out	0x3f, r0	; 63
   12478:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1247a:	02 c0       	rjmp	.+4      	; 0x12480 <gpib_write_str+0xe6>
   1247c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1247e:	d0 e0       	ldi	r29, 0x00	; 0
   12480:	ce 01       	movw	r24, r28
   12482:	cd b7       	in	r28, 0x3d	; 61
   12484:	de b7       	in	r29, 0x3e	; 62
   12486:	ea e0       	ldi	r30, 0x0A	; 10
   12488:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001248c <gpib_file_init>:
   1248c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <debuglevel+0x1>
   12490:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <debuglevel>
   12494:	84 eb       	ldi	r24, 0xB4	; 180
   12496:	91 e0       	ldi	r25, 0x01	; 1
   12498:	0e 94 8a b8 	call	0x17114	; 0x17114 <POSIX_Read_Config>
   1249c:	9f 93       	push	r25
   1249e:	8f 93       	push	r24
   124a0:	84 eb       	ldi	r24, 0xB4	; 180
   124a2:	91 e0       	ldi	r25, 0x01	; 1
   124a4:	9f 93       	push	r25
   124a6:	8f 93       	push	r24
   124a8:	80 e5       	ldi	r24, 0x50	; 80
   124aa:	95 e1       	ldi	r25, 0x15	; 21
   124ac:	1f 92       	push	r1
   124ae:	9f 93       	push	r25
   124b0:	8f 93       	push	r24
   124b2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   124b6:	0e 94 89 b8 	call	0x17112	; 0x17112 <set_Config_Defaults>
   124ba:	0e 94 23 73 	call	0xe646	; 0xe646 <mmc_wp_status>
   124be:	2d b7       	in	r18, 0x3d	; 61
   124c0:	3e b7       	in	r19, 0x3e	; 62
   124c2:	29 5f       	subi	r18, 0xF9	; 249
   124c4:	3f 4f       	sbci	r19, 0xFF	; 255
   124c6:	0f b6       	in	r0, 0x3f	; 63
   124c8:	f8 94       	cli
   124ca:	3e bf       	out	0x3e, r19	; 62
   124cc:	0f be       	out	0x3f, r0	; 63
   124ce:	2d bf       	out	0x3d, r18	; 61
   124d0:	89 2b       	or	r24, r25
   124d2:	51 f0       	breq	.+20     	; 0x124e8 <gpib_file_init+0x5c>
   124d4:	87 e3       	ldi	r24, 0x37	; 55
   124d6:	95 e1       	ldi	r25, 0x15	; 21
   124d8:	1f 92       	push	r1
   124da:	9f 93       	push	r25
   124dc:	8f 93       	push	r24
   124de:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   124e2:	0f 90       	pop	r0
   124e4:	0f 90       	pop	r0
   124e6:	0f 90       	pop	r0
   124e8:	08 95       	ret

000124ea <SS80_is_MLA>:
   124ea:	40 e2       	ldi	r20, 0x20	; 32
   124ec:	50 e0       	ldi	r21, 0x00	; 0
   124ee:	bc 01       	movw	r22, r24
   124f0:	82 e0       	ldi	r24, 0x02	; 2
   124f2:	90 e0       	ldi	r25, 0x00	; 0
   124f4:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   124f8:	8f 3f       	cpi	r24, 0xFF	; 255
   124fa:	2f ef       	ldi	r18, 0xFF	; 255
   124fc:	92 07       	cpc	r25, r18
   124fe:	19 f0       	breq	.+6      	; 0x12506 <SS80_is_MLA+0x1c>
   12500:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   12504:	08 95       	ret
   12506:	80 e0       	ldi	r24, 0x00	; 0
   12508:	90 e0       	ldi	r25, 0x00	; 0
   1250a:	08 95       	ret

0001250c <SS80_is_MTA>:
   1250c:	40 e4       	ldi	r20, 0x40	; 64
   1250e:	50 e0       	ldi	r21, 0x00	; 0
   12510:	bc 01       	movw	r22, r24
   12512:	82 e0       	ldi	r24, 0x02	; 2
   12514:	90 e0       	ldi	r25, 0x00	; 0
   12516:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   1251a:	8f 3f       	cpi	r24, 0xFF	; 255
   1251c:	2f ef       	ldi	r18, 0xFF	; 255
   1251e:	92 07       	cpc	r25, r18
   12520:	19 f0       	breq	.+6      	; 0x12528 <SS80_is_MTA+0x1c>
   12522:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   12526:	08 95       	ret
   12528:	80 e0       	ldi	r24, 0x00	; 0
   1252a:	90 e0       	ldi	r25, 0x00	; 0
   1252c:	08 95       	ret

0001252e <SS80_is_MSA>:
   1252e:	40 e6       	ldi	r20, 0x60	; 96
   12530:	50 e0       	ldi	r21, 0x00	; 0
   12532:	bc 01       	movw	r22, r24
   12534:	82 e0       	ldi	r24, 0x02	; 2
   12536:	90 e0       	ldi	r25, 0x00	; 0
   12538:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   1253c:	8f 3f       	cpi	r24, 0xFF	; 255
   1253e:	2f ef       	ldi	r18, 0xFF	; 255
   12540:	92 07       	cpc	r25, r18
   12542:	19 f0       	breq	.+6      	; 0x1254a <SS80_is_MSA+0x1c>
   12544:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   12548:	08 95       	ret
   1254a:	80 e0       	ldi	r24, 0x00	; 0
   1254c:	90 e0       	ldi	r25, 0x00	; 0
   1254e:	08 95       	ret

00012550 <AMIGO_is_MLA>:
   12550:	40 e2       	ldi	r20, 0x20	; 32
   12552:	50 e0       	ldi	r21, 0x00	; 0
   12554:	bc 01       	movw	r22, r24
   12556:	81 e0       	ldi	r24, 0x01	; 1
   12558:	90 e0       	ldi	r25, 0x00	; 0
   1255a:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   1255e:	8f 3f       	cpi	r24, 0xFF	; 255
   12560:	2f ef       	ldi	r18, 0xFF	; 255
   12562:	92 07       	cpc	r25, r18
   12564:	19 f0       	breq	.+6      	; 0x1256c <AMIGO_is_MLA+0x1c>
   12566:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   1256a:	08 95       	ret
   1256c:	80 e0       	ldi	r24, 0x00	; 0
   1256e:	90 e0       	ldi	r25, 0x00	; 0
   12570:	08 95       	ret

00012572 <AMIGO_is_MTA>:
   12572:	40 e4       	ldi	r20, 0x40	; 64
   12574:	50 e0       	ldi	r21, 0x00	; 0
   12576:	bc 01       	movw	r22, r24
   12578:	81 e0       	ldi	r24, 0x01	; 1
   1257a:	90 e0       	ldi	r25, 0x00	; 0
   1257c:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   12580:	8f 3f       	cpi	r24, 0xFF	; 255
   12582:	2f ef       	ldi	r18, 0xFF	; 255
   12584:	92 07       	cpc	r25, r18
   12586:	19 f0       	breq	.+6      	; 0x1258e <AMIGO_is_MTA+0x1c>
   12588:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   1258c:	08 95       	ret
   1258e:	80 e0       	ldi	r24, 0x00	; 0
   12590:	90 e0       	ldi	r25, 0x00	; 0
   12592:	08 95       	ret

00012594 <AMIGO_is_MSA>:
   12594:	40 e6       	ldi	r20, 0x60	; 96
   12596:	50 e0       	ldi	r21, 0x00	; 0
   12598:	bc 01       	movw	r22, r24
   1259a:	81 e0       	ldi	r24, 0x01	; 1
   1259c:	90 e0       	ldi	r25, 0x00	; 0
   1259e:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   125a2:	8f 3f       	cpi	r24, 0xFF	; 255
   125a4:	2f ef       	ldi	r18, 0xFF	; 255
   125a6:	92 07       	cpc	r25, r18
   125a8:	19 f0       	breq	.+6      	; 0x125b0 <AMIGO_is_MSA+0x1c>
   125aa:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   125ae:	08 95       	ret
   125b0:	80 e0       	ldi	r24, 0x00	; 0
   125b2:	90 e0       	ldi	r25, 0x00	; 0
   125b4:	08 95       	ret

000125b6 <PRINTER_is_MLA>:
   125b6:	40 e2       	ldi	r20, 0x20	; 32
   125b8:	50 e0       	ldi	r21, 0x00	; 0
   125ba:	bc 01       	movw	r22, r24
   125bc:	83 e0       	ldi	r24, 0x03	; 3
   125be:	90 e0       	ldi	r25, 0x00	; 0
   125c0:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   125c4:	8f 3f       	cpi	r24, 0xFF	; 255
   125c6:	2f ef       	ldi	r18, 0xFF	; 255
   125c8:	92 07       	cpc	r25, r18
   125ca:	19 f0       	breq	.+6      	; 0x125d2 <PRINTER_is_MLA+0x1c>
   125cc:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   125d0:	08 95       	ret
   125d2:	80 e0       	ldi	r24, 0x00	; 0
   125d4:	90 e0       	ldi	r25, 0x00	; 0
   125d6:	08 95       	ret

000125d8 <PRINTER_is_MTA>:
   125d8:	40 e4       	ldi	r20, 0x40	; 64
   125da:	50 e0       	ldi	r21, 0x00	; 0
   125dc:	bc 01       	movw	r22, r24
   125de:	83 e0       	ldi	r24, 0x03	; 3
   125e0:	90 e0       	ldi	r25, 0x00	; 0
   125e2:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   125e6:	8f 3f       	cpi	r24, 0xFF	; 255
   125e8:	2f ef       	ldi	r18, 0xFF	; 255
   125ea:	92 07       	cpc	r25, r18
   125ec:	19 f0       	breq	.+6      	; 0x125f4 <PRINTER_is_MTA+0x1c>
   125ee:	0c 94 0b b6 	jmp	0x16c16	; 0x16c16 <set_active_device>
   125f2:	08 95       	ret
   125f4:	80 e0       	ldi	r24, 0x00	; 0
   125f6:	90 e0       	ldi	r25, 0x00	; 0
   125f8:	08 95       	ret

000125fa <gpib_init_devices>:
   125fa:	2f d9       	rcall	.-3490   	; 0x1185a <gpib_bus_init>
   125fc:	0e 94 b8 a2 	call	0x14570	; 0x14570 <SS80_init>
   12600:	0e 94 3c a8 	call	0x15078	; 0x15078 <amigo_init>
   12604:	0c 94 24 b3 	jmp	0x16648	; 0x16648 <printer_close>
   12608:	08 95       	ret

0001260a <gpib_trace_task>:
   1260a:	0f 93       	push	r16
   1260c:	1f 93       	push	r17
   1260e:	cf 93       	push	r28
   12610:	df 93       	push	r29
   12612:	eb 01       	movw	r28, r22
   12614:	00 97       	sbiw	r24, 0x00	; 0
   12616:	09 f4       	brne	.+2      	; 0x1261a <gpib_trace_task+0x10>
   12618:	42 c0       	rjmp	.+132    	; 0x1269e <gpib_trace_task+0x94>
   1261a:	fc 01       	movw	r30, r24
   1261c:	20 81       	ld	r18, Z
   1261e:	22 23       	and	r18, r18
   12620:	f1 f1       	breq	.+124    	; 0x1269e <gpib_trace_task+0x94>
   12622:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
   12626:	8c 01       	movw	r16, r24
   12628:	1f 93       	push	r17
   1262a:	8f 93       	push	r24
   1262c:	8d e1       	ldi	r24, 0x1D	; 29
   1262e:	95 e1       	ldi	r25, 0x15	; 21
   12630:	1f 92       	push	r1
   12632:	9f 93       	push	r25
   12634:	8f 93       	push	r24
   12636:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1263a:	0f 90       	pop	r0
   1263c:	0f 90       	pop	r0
   1263e:	0f 90       	pop	r0
   12640:	0f 90       	pop	r0
   12642:	0f 90       	pop	r0
   12644:	20 97       	sbiw	r28, 0x00	; 0
   12646:	51 f0       	breq	.+20     	; 0x1265c <gpib_trace_task+0x52>
   12648:	82 ef       	ldi	r24, 0xF2	; 242
   1264a:	94 e1       	ldi	r25, 0x14	; 20
   1264c:	1f 92       	push	r1
   1264e:	9f 93       	push	r25
   12650:	8f 93       	push	r24
   12652:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12656:	0f 90       	pop	r0
   12658:	0f 90       	pop	r0
   1265a:	0f 90       	pop	r0
   1265c:	8b ed       	ldi	r24, 0xDB	; 219
   1265e:	94 e1       	ldi	r25, 0x14	; 20
   12660:	1f 92       	push	r1
   12662:	9f 93       	push	r25
   12664:	8f 93       	push	r24
   12666:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1266a:	6b e6       	ldi	r22, 0x6B	; 107
   1266c:	78 e0       	ldi	r23, 0x08	; 8
   1266e:	c8 01       	movw	r24, r16
   12670:	0e 94 41 82 	call	0x10482	; 0x10482 <fopen>
   12674:	90 93 21 19 	sts	0x1921, r25	; 0x801921 <gpib_log_fp+0x1>
   12678:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <gpib_log_fp>
   1267c:	0f 90       	pop	r0
   1267e:	0f 90       	pop	r0
   12680:	0f 90       	pop	r0
   12682:	89 2b       	or	r24, r25
   12684:	a1 f4       	brne	.+40     	; 0x126ae <gpib_trace_task+0xa4>
   12686:	89 e1       	ldi	r24, 0x19	; 25
   12688:	9d e0       	ldi	r25, 0x0D	; 13
   1268a:	0e 94 17 7c 	call	0xf82e	; 0xf82e <perror>
   1268e:	8f ec       	ldi	r24, 0xCF	; 207
   12690:	94 e1       	ldi	r25, 0x14	; 20
   12692:	1f 92       	push	r1
   12694:	9f 93       	push	r25
   12696:	8f 93       	push	r24
   12698:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1269c:	3b c0       	rjmp	.+118    	; 0x12714 <gpib_trace_task+0x10a>
   1269e:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
   126a2:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
   126a6:	90 93 21 19 	sts	0x1921, r25	; 0x801921 <gpib_log_fp+0x1>
   126aa:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <gpib_log_fp>
   126ae:	fd d8       	rcall	.-3590   	; 0x118aa <gpib_state_init>
   126b0:	a4 df       	rcall	.-184    	; 0x125fa <gpib_init_devices>
   126b2:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <gpib_log_fp>
   126b6:	90 91 21 19 	lds	r25, 0x1921	; 0x801921 <gpib_log_fp+0x1>
   126ba:	4e db       	rcall	.-2404   	; 0x11d58 <gpib_decode_header>
   126bc:	80 e0       	ldi	r24, 0x00	; 0
   126be:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   126c2:	89 2b       	or	r24, r25
   126c4:	31 f4       	brne	.+12     	; 0x126d2 <gpib_trace_task+0xc8>
   126c6:	ce 01       	movw	r24, r28
   126c8:	e0 dc       	rcall	.-1600   	; 0x1208a <gpib_read_byte>
   126ca:	20 97       	sbiw	r28, 0x00	; 0
   126cc:	b9 f7       	brne	.-18     	; 0x126bc <gpib_trace_task+0xb2>
   126ce:	b3 dd       	rcall	.-1178   	; 0x12236 <gpib_decode>
   126d0:	f5 cf       	rjmp	.-22     	; 0x126bc <gpib_trace_task+0xb2>
   126d2:	89 ec       	ldi	r24, 0xC9	; 201
   126d4:	94 e1       	ldi	r25, 0x14	; 20
   126d6:	1f 92       	push	r1
   126d8:	9f 93       	push	r25
   126da:	8f 93       	push	r24
   126dc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   126e0:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <gpib_log_fp>
   126e4:	90 91 21 19 	lds	r25, 0x1921	; 0x801921 <gpib_log_fp+0x1>
   126e8:	0f 90       	pop	r0
   126ea:	0f 90       	pop	r0
   126ec:	0f 90       	pop	r0
   126ee:	00 97       	sbiw	r24, 0x00	; 0
   126f0:	a1 f0       	breq	.+40     	; 0x1271a <gpib_trace_task+0x110>
   126f2:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
   126f6:	87 eb       	ldi	r24, 0xB7	; 183
   126f8:	94 e1       	ldi	r25, 0x14	; 20
   126fa:	1f 92       	push	r1
   126fc:	9f 93       	push	r25
   126fe:	8f 93       	push	r24
   12700:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12704:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
   12708:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
   1270c:	90 93 21 19 	sts	0x1921, r25	; 0x801921 <gpib_log_fp+0x1>
   12710:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <gpib_log_fp>
   12714:	0f 90       	pop	r0
   12716:	0f 90       	pop	r0
   12718:	0f 90       	pop	r0
   1271a:	df 91       	pop	r29
   1271c:	cf 91       	pop	r28
   1271e:	1f 91       	pop	r17
   12720:	0f 91       	pop	r16
   12722:	08 95       	ret

00012724 <gpib_error_test>:
   12724:	ef 92       	push	r14
   12726:	ff 92       	push	r15
   12728:	0f 93       	push	r16
   1272a:	1f 93       	push	r17
   1272c:	cf 93       	push	r28
   1272e:	df 93       	push	r29
   12730:	7c 01       	movw	r14, r24
   12732:	ec 01       	movw	r28, r24
   12734:	cc 27       	eor	r28, r28
   12736:	d0 7d       	andi	r29, 0xD0	; 208
   12738:	20 97       	sbiw	r28, 0x00	; 0
   1273a:	61 f0       	breq	.+24     	; 0x12754 <gpib_error_test+0x30>
   1273c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12740:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12744:	8e 72       	andi	r24, 0x2E	; 46
   12746:	99 27       	eor	r25, r25
   12748:	87 01       	movw	r16, r14
   1274a:	00 27       	eor	r16, r16
   1274c:	10 71       	andi	r17, 0x10	; 16
   1274e:	89 2b       	or	r24, r25
   12750:	59 f4       	brne	.+22     	; 0x12768 <gpib_error_test+0x44>
   12752:	17 c0       	rjmp	.+46     	; 0x12782 <gpib_error_test+0x5e>
   12754:	80 e0       	ldi	r24, 0x00	; 0
   12756:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   1275a:	89 2b       	or	r24, r25
   1275c:	79 f7       	brne	.-34     	; 0x1273c <gpib_error_test+0x18>
   1275e:	0e 94 20 73 	call	0xe640	; 0xe640 <mmc_ins_status>
   12762:	01 97       	sbiw	r24, 0x01	; 1
   12764:	59 f7       	brne	.-42     	; 0x1273c <gpib_error_test+0x18>
   12766:	62 c0       	rjmp	.+196    	; 0x1282c <gpib_error_test+0x108>
   12768:	01 15       	cp	r16, r1
   1276a:	11 05       	cpc	r17, r1
   1276c:	51 f0       	breq	.+20     	; 0x12782 <gpib_error_test+0x5e>
   1276e:	80 eb       	ldi	r24, 0xB0	; 176
   12770:	94 e1       	ldi	r25, 0x14	; 20
   12772:	1f 92       	push	r1
   12774:	9f 93       	push	r25
   12776:	8f 93       	push	r24
   12778:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1277c:	0f 90       	pop	r0
   1277e:	0f 90       	pop	r0
   12780:	0f 90       	pop	r0
   12782:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12786:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1278a:	85 70       	andi	r24, 0x05	; 5
   1278c:	99 27       	eor	r25, r25
   1278e:	89 2b       	or	r24, r25
   12790:	c1 f0       	breq	.+48     	; 0x127c2 <gpib_error_test+0x9e>
   12792:	f6 fe       	sbrs	r15, 6
   12794:	0a c0       	rjmp	.+20     	; 0x127aa <gpib_error_test+0x86>
   12796:	85 ea       	ldi	r24, 0xA5	; 165
   12798:	94 e1       	ldi	r25, 0x14	; 20
   1279a:	1f 92       	push	r1
   1279c:	9f 93       	push	r25
   1279e:	8f 93       	push	r24
   127a0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   127a4:	0f 90       	pop	r0
   127a6:	0f 90       	pop	r0
   127a8:	0f 90       	pop	r0
   127aa:	d7 ff       	sbrs	r29, 7
   127ac:	0a c0       	rjmp	.+20     	; 0x127c2 <gpib_error_test+0x9e>
   127ae:	8e e9       	ldi	r24, 0x9E	; 158
   127b0:	94 e1       	ldi	r25, 0x14	; 20
   127b2:	1f 92       	push	r1
   127b4:	9f 93       	push	r25
   127b6:	8f 93       	push	r24
   127b8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   127bc:	0f 90       	pop	r0
   127be:	0f 90       	pop	r0
   127c0:	0f 90       	pop	r0
   127c2:	80 e0       	ldi	r24, 0x00	; 0
   127c4:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   127c8:	89 2b       	or	r24, r25
   127ca:	51 f0       	breq	.+20     	; 0x127e0 <gpib_error_test+0xbc>
   127cc:	81 e9       	ldi	r24, 0x91	; 145
   127ce:	94 e1       	ldi	r25, 0x14	; 20
   127d0:	1f 92       	push	r1
   127d2:	9f 93       	push	r25
   127d4:	8f 93       	push	r24
   127d6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   127da:	0f 90       	pop	r0
   127dc:	0f 90       	pop	r0
   127de:	0f 90       	pop	r0
   127e0:	0e 94 20 73 	call	0xe640	; 0xe640 <mmc_ins_status>
   127e4:	01 97       	sbiw	r24, 0x01	; 1
   127e6:	51 f0       	breq	.+20     	; 0x127fc <gpib_error_test+0xd8>
   127e8:	80 e8       	ldi	r24, 0x80	; 128
   127ea:	94 e1       	ldi	r25, 0x14	; 20
   127ec:	1f 92       	push	r1
   127ee:	9f 93       	push	r25
   127f0:	8f 93       	push	r24
   127f2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   127f6:	0f 90       	pop	r0
   127f8:	0f 90       	pop	r0
   127fa:	0f 90       	pop	r0
   127fc:	01 15       	cp	r16, r1
   127fe:	11 05       	cpc	r17, r1
   12800:	09 f0       	breq	.+2      	; 0x12804 <gpib_error_test+0xe0>
   12802:	fb de       	rcall	.-522    	; 0x125fa <gpib_init_devices>
   12804:	80 e0       	ldi	r24, 0x00	; 0
   12806:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   1280a:	89 2b       	or	r24, r25
   1280c:	11 f0       	breq	.+4      	; 0x12812 <gpib_error_test+0xee>
   1280e:	f5 de       	rcall	.-534    	; 0x125fa <gpib_init_devices>
   12810:	0b c0       	rjmp	.+22     	; 0x12828 <gpib_error_test+0x104>
   12812:	0e 94 20 73 	call	0xe640	; 0xe640 <mmc_ins_status>
   12816:	01 97       	sbiw	r24, 0x01	; 1
   12818:	39 f4       	brne	.+14     	; 0x12828 <gpib_error_test+0x104>
   1281a:	01 15       	cp	r16, r1
   1281c:	11 05       	cpc	r17, r1
   1281e:	31 f0       	breq	.+12     	; 0x1282c <gpib_error_test+0x108>
   12820:	54 98       	cbi	0x0a, 4	; 10
   12822:	4c 9b       	sbis	0x09, 4	; 9
   12824:	fd cf       	rjmp	.-6      	; 0x12820 <gpib_error_test+0xfc>
   12826:	02 c0       	rjmp	.+4      	; 0x1282c <gpib_error_test+0x108>
   12828:	c1 e0       	ldi	r28, 0x01	; 1
   1282a:	d0 e0       	ldi	r29, 0x00	; 0
   1282c:	ce 01       	movw	r24, r28
   1282e:	cd b7       	in	r28, 0x3d	; 61
   12830:	de b7       	in	r29, 0x3e	; 62
   12832:	e6 e0       	ldi	r30, 0x06	; 6
   12834:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00012838 <GPIB_COMMANDS>:
   12838:	1f 93       	push	r17
   1283a:	cf 93       	push	r28
   1283c:	df 93       	push	r29
   1283e:	ec 01       	movw	r28, r24
   12840:	16 2f       	mov	r17, r22
   12842:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   12846:	8f 35       	cpi	r24, 0x5F	; 95
   12848:	91 f0       	breq	.+36     	; 0x1286e <GPIB_COMMANDS+0x36>
   1284a:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   1284e:	90 e0       	ldi	r25, 0x00	; 0
   12850:	7f de       	rcall	.-770    	; 0x12550 <AMIGO_is_MLA>
   12852:	89 2b       	or	r24, r25
   12854:	c9 f4       	brne	.+50     	; 0x12888 <GPIB_COMMANDS+0x50>
   12856:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   1285a:	90 e0       	ldi	r25, 0x00	; 0
   1285c:	46 de       	rcall	.-884    	; 0x124ea <SS80_is_MLA>
   1285e:	89 2b       	or	r24, r25
   12860:	11 f5       	brne	.+68     	; 0x128a6 <GPIB_COMMANDS+0x6e>
   12862:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12866:	90 e0       	ldi	r25, 0x00	; 0
   12868:	a6 de       	rcall	.-692    	; 0x125b6 <PRINTER_is_MLA>
   1286a:	89 2b       	or	r24, r25
   1286c:	59 f5       	brne	.+86     	; 0x128c4 <GPIB_COMMANDS+0x8c>
   1286e:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12872:	8f 33       	cpi	r24, 0x3F	; 63
   12874:	19 f4       	brne	.+6      	; 0x1287c <GPIB_COMMANDS+0x44>
   12876:	80 e0       	ldi	r24, 0x00	; 0
   12878:	90 e0       	ldi	r25, 0x00	; 0
   1287a:	2e c0       	rjmp	.+92     	; 0x128d8 <GPIB_COMMANDS+0xa0>
   1287c:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   12880:	90 e0       	ldi	r25, 0x00	; 0
   12882:	77 de       	rcall	.-786    	; 0x12572 <AMIGO_is_MTA>
   12884:	89 2b       	or	r24, r25
   12886:	49 f0       	breq	.+18     	; 0x1289a <GPIB_COMMANDS+0x62>
   12888:	11 23       	and	r17, r17
   1288a:	11 f0       	breq	.+4      	; 0x12890 <GPIB_COMMANDS+0x58>
   1288c:	ce 01       	movw	r24, r28
   1288e:	b5 d8       	rcall	.-3734   	; 0x119fa <gpib_unread>
   12890:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <secondary>
   12894:	0e 94 25 b2 	call	0x1644a	; 0x1644a <AMIGO_COMMANDS>
   12898:	1d c0       	rjmp	.+58     	; 0x128d4 <GPIB_COMMANDS+0x9c>
   1289a:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   1289e:	90 e0       	ldi	r25, 0x00	; 0
   128a0:	35 de       	rcall	.-918    	; 0x1250c <SS80_is_MTA>
   128a2:	89 2b       	or	r24, r25
   128a4:	49 f0       	breq	.+18     	; 0x128b8 <GPIB_COMMANDS+0x80>
   128a6:	11 23       	and	r17, r17
   128a8:	11 f0       	breq	.+4      	; 0x128ae <GPIB_COMMANDS+0x76>
   128aa:	ce 01       	movw	r24, r28
   128ac:	a6 d8       	rcall	.-3764   	; 0x119fa <gpib_unread>
   128ae:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <secondary>
   128b2:	0e 94 96 a6 	call	0x14d2c	; 0x14d2c <SS80_COMMANDS>
   128b6:	0e c0       	rjmp	.+28     	; 0x128d4 <GPIB_COMMANDS+0x9c>
   128b8:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   128bc:	90 e0       	ldi	r25, 0x00	; 0
   128be:	8c de       	rcall	.-744    	; 0x125d8 <PRINTER_is_MTA>
   128c0:	89 2b       	or	r24, r25
   128c2:	c9 f2       	breq	.-78     	; 0x12876 <GPIB_COMMANDS+0x3e>
   128c4:	11 23       	and	r17, r17
   128c6:	11 f0       	breq	.+4      	; 0x128cc <GPIB_COMMANDS+0x94>
   128c8:	ce 01       	movw	r24, r28
   128ca:	97 d8       	rcall	.-3794   	; 0x119fa <gpib_unread>
   128cc:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <secondary>
   128d0:	0e 94 85 b4 	call	0x1690a	; 0x1690a <PRINTER_COMMANDS>
   128d4:	10 92 aa 1e 	sts	0x1EAA, r1	; 0x801eaa <secondary>
   128d8:	df 91       	pop	r29
   128da:	cf 91       	pop	r28
   128dc:	1f 91       	pop	r17
   128de:	08 95       	ret

000128e0 <Send_Identify>:
   128e0:	a4 e0       	ldi	r26, 0x04	; 4
   128e2:	b0 e0       	ldi	r27, 0x00	; 0
   128e4:	e6 e7       	ldi	r30, 0x76	; 118
   128e6:	f4 e9       	ldi	r31, 0x94	; 148
   128e8:	0c 94 46 e9 	jmp	0x1d28c	; 0x1d28c <__prologue_saves__+0x16>
   128ec:	d8 2e       	mov	r13, r24
   128ee:	7b 01       	movw	r14, r22
   128f0:	80 e0       	ldi	r24, 0x00	; 0
   128f2:	91 e0       	ldi	r25, 0x01	; 1
   128f4:	9c 83       	std	Y+4, r25	; 0x04
   128f6:	8b 83       	std	Y+3, r24	; 0x03
   128f8:	8b 01       	movw	r16, r22
   128fa:	20 e0       	ldi	r18, 0x00	; 0
   128fc:	30 e0       	ldi	r19, 0x00	; 0
   128fe:	42 e0       	ldi	r20, 0x02	; 2
   12900:	50 e0       	ldi	r21, 0x00	; 0
   12902:	60 e0       	ldi	r22, 0x00	; 0
   12904:	70 e0       	ldi	r23, 0x00	; 0
   12906:	ce 01       	movw	r24, r28
   12908:	01 96       	adiw	r24, 0x01	; 1
   1290a:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1290e:	ae 01       	movw	r20, r28
   12910:	4d 5f       	subi	r20, 0xFD	; 253
   12912:	5f 4f       	sbci	r21, 0xFF	; 255
   12914:	62 e0       	ldi	r22, 0x02	; 2
   12916:	70 e0       	ldi	r23, 0x00	; 0
   12918:	ce 01       	movw	r24, r28
   1291a:	01 96       	adiw	r24, 0x01	; 1
   1291c:	3e dd       	rcall	.-1412   	; 0x1239a <gpib_write_str>
   1291e:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   12922:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12926:	02 97       	sbiw	r24, 0x02	; 2
   12928:	59 f0       	breq	.+22     	; 0x12940 <Send_Identify+0x60>
   1292a:	25 70       	andi	r18, 0x05	; 5
   1292c:	33 27       	eor	r19, r19
   1292e:	23 2b       	or	r18, r19
   12930:	c9 f0       	breq	.+50     	; 0x12964 <Send_Identify+0x84>
   12932:	ff 92       	push	r15
   12934:	ef 92       	push	r14
   12936:	1f 92       	push	r1
   12938:	df 92       	push	r13
   1293a:	8f e5       	ldi	r24, 0x5F	; 95
   1293c:	94 e1       	ldi	r25, 0x14	; 20
   1293e:	08 c0       	rjmp	.+16     	; 0x12950 <Send_Identify+0x70>
   12940:	22 ff       	sbrs	r18, 2
   12942:	10 c0       	rjmp	.+32     	; 0x12964 <Send_Identify+0x84>
   12944:	ff 92       	push	r15
   12946:	ef 92       	push	r14
   12948:	1f 92       	push	r1
   1294a:	df 92       	push	r13
   1294c:	85 e4       	ldi	r24, 0x45	; 69
   1294e:	94 e1       	ldi	r25, 0x14	; 20
   12950:	1f 92       	push	r1
   12952:	9f 93       	push	r25
   12954:	8f 93       	push	r24
   12956:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1295a:	0f b6       	in	r0, 0x3f	; 63
   1295c:	f8 94       	cli
   1295e:	de bf       	out	0x3e, r29	; 62
   12960:	0f be       	out	0x3f, r0	; 63
   12962:	cd bf       	out	0x3d, r28	; 61
   12964:	8b 81       	ldd	r24, Y+3	; 0x03
   12966:	9c 81       	ldd	r25, Y+4	; 0x04
   12968:	88 27       	eor	r24, r24
   1296a:	90 7d       	andi	r25, 0xD0	; 208
   1296c:	24 96       	adiw	r28, 0x04	; 4
   1296e:	e7 e0       	ldi	r30, 0x07	; 7
   12970:	0c 94 62 e9 	jmp	0x1d2c4	; 0x1d2c4 <__epilogue_restores__+0x16>

00012974 <GPIB>:
   12974:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   12978:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1297c:	85 30       	cpi	r24, 0x05	; 5
   1297e:	89 f4       	brne	.+34     	; 0x129a2 <GPIB+0x2e>
   12980:	24 71       	andi	r18, 0x14	; 20
   12982:	33 27       	eor	r19, r19
   12984:	23 2b       	or	r18, r19
   12986:	51 f0       	breq	.+20     	; 0x1299c <GPIB+0x28>
   12988:	82 e3       	ldi	r24, 0x32	; 50
   1298a:	94 e1       	ldi	r25, 0x14	; 20
   1298c:	1f 92       	push	r1
   1298e:	9f 93       	push	r25
   12990:	8f 93       	push	r24
   12992:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12996:	0f 90       	pop	r0
   12998:	0f 90       	pop	r0
   1299a:	0f 90       	pop	r0
   1299c:	10 92 a6 1e 	sts	0x1EA6, r1	; 0x801ea6 <spoll>
   129a0:	9d c0       	rjmp	.+314    	; 0x12adc <GPIB+0x168>
   129a2:	85 31       	cpi	r24, 0x15	; 21
   129a4:	39 f4       	brne	.+14     	; 0x129b4 <GPIB+0x40>
   129a6:	24 71       	andi	r18, 0x14	; 20
   129a8:	33 27       	eor	r19, r19
   129aa:	23 2b       	or	r18, r19
   129ac:	b9 f3       	breq	.-18     	; 0x1299c <GPIB+0x28>
   129ae:	8f e1       	ldi	r24, 0x1F	; 31
   129b0:	94 e1       	ldi	r25, 0x14	; 20
   129b2:	ec cf       	rjmp	.-40     	; 0x1298c <GPIB+0x18>
   129b4:	88 31       	cpi	r24, 0x18	; 24
   129b6:	c9 f4       	brne	.+50     	; 0x129ea <GPIB+0x76>
   129b8:	22 ff       	sbrs	r18, 2
   129ba:	0a c0       	rjmp	.+20     	; 0x129d0 <GPIB+0x5c>
   129bc:	88 e1       	ldi	r24, 0x18	; 24
   129be:	94 e1       	ldi	r25, 0x14	; 20
   129c0:	1f 92       	push	r1
   129c2:	9f 93       	push	r25
   129c4:	8f 93       	push	r24
   129c6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   129ca:	0f 90       	pop	r0
   129cc:	0f 90       	pop	r0
   129ce:	0f 90       	pop	r0
   129d0:	81 e0       	ldi	r24, 0x01	; 1
   129d2:	80 93 a6 1e 	sts	0x1EA6, r24	; 0x801ea6 <spoll>
   129d6:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   129da:	90 e0       	ldi	r25, 0x00	; 0
   129dc:	97 dd       	rcall	.-1234   	; 0x1250c <SS80_is_MTA>
   129de:	89 2b       	or	r24, r25
   129e0:	09 f4       	brne	.+2      	; 0x129e4 <GPIB+0x70>
   129e2:	7c c0       	rjmp	.+248    	; 0x12adc <GPIB+0x168>
   129e4:	0c 94 4b a2 	jmp	0x14496	; 0x14496 <SS80_Report>
   129e8:	08 95       	ret
   129ea:	89 31       	cpi	r24, 0x19	; 25
   129ec:	29 f4       	brne	.+10     	; 0x129f8 <GPIB+0x84>
   129ee:	22 ff       	sbrs	r18, 2
   129f0:	d5 cf       	rjmp	.-86     	; 0x1299c <GPIB+0x28>
   129f2:	81 e1       	ldi	r24, 0x11	; 17
   129f4:	94 e1       	ldi	r25, 0x14	; 20
   129f6:	ca cf       	rjmp	.-108    	; 0x1298c <GPIB+0x18>
   129f8:	84 30       	cpi	r24, 0x04	; 4
   129fa:	09 f0       	breq	.+2      	; 0x129fe <GPIB+0x8a>
   129fc:	48 c0       	rjmp	.+144    	; 0x12a8e <GPIB+0x11a>
   129fe:	22 ff       	sbrs	r18, 2
   12a00:	0a c0       	rjmp	.+20     	; 0x12a16 <GPIB+0xa2>
   12a02:	8a e0       	ldi	r24, 0x0A	; 10
   12a04:	94 e1       	ldi	r25, 0x14	; 20
   12a06:	1f 92       	push	r1
   12a08:	9f 93       	push	r25
   12a0a:	8f 93       	push	r24
   12a0c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12a10:	0f 90       	pop	r0
   12a12:	0f 90       	pop	r0
   12a14:	0f 90       	pop	r0
   12a16:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12a1a:	90 e0       	ldi	r25, 0x00	; 0
   12a1c:	66 dd       	rcall	.-1332   	; 0x124ea <SS80_is_MLA>
   12a1e:	89 2b       	or	r24, r25
   12a20:	d9 f0       	breq	.+54     	; 0x12a58 <GPIB+0xe4>
   12a22:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12a26:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12a2a:	84 72       	andi	r24, 0x24	; 36
   12a2c:	99 27       	eor	r25, r25
   12a2e:	89 2b       	or	r24, r25
   12a30:	51 f0       	breq	.+20     	; 0x12a46 <GPIB+0xd2>
   12a32:	8e ef       	ldi	r24, 0xFE	; 254
   12a34:	93 e1       	ldi	r25, 0x13	; 19
   12a36:	1f 92       	push	r1
   12a38:	9f 93       	push	r25
   12a3a:	8f 93       	push	r24
   12a3c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12a40:	0f 90       	pop	r0
   12a42:	0f 90       	pop	r0
   12a44:	0f 90       	pop	r0
   12a46:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   12a4a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   12a4e:	85 81       	ldd	r24, Z+5	; 0x05
   12a50:	90 e0       	ldi	r25, 0x00	; 0
   12a52:	0c 94 18 a3 	jmp	0x14630	; 0x14630 <SS80_Selected_Device_Clear>
   12a56:	08 95       	ret
   12a58:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12a5c:	90 e0       	ldi	r25, 0x00	; 0
   12a5e:	78 dd       	rcall	.-1296   	; 0x12550 <AMIGO_is_MLA>
   12a60:	89 2b       	or	r24, r25
   12a62:	e1 f1       	breq	.+120    	; 0x12adc <GPIB+0x168>
   12a64:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12a68:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12a6c:	84 72       	andi	r24, 0x24	; 36
   12a6e:	99 27       	eor	r25, r25
   12a70:	89 2b       	or	r24, r25
   12a72:	51 f0       	breq	.+20     	; 0x12a88 <GPIB+0x114>
   12a74:	81 ef       	ldi	r24, 0xF1	; 241
   12a76:	93 e1       	ldi	r25, 0x13	; 19
   12a78:	1f 92       	push	r1
   12a7a:	9f 93       	push	r25
   12a7c:	8f 93       	push	r24
   12a7e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12a82:	0f 90       	pop	r0
   12a84:	0f 90       	pop	r0
   12a86:	0f 90       	pop	r0
   12a88:	0c 94 f8 ac 	jmp	0x159f0	; 0x159f0 <amigo_cmd_clear>
   12a8c:	08 95       	ret
   12a8e:	84 31       	cpi	r24, 0x14	; 20
   12a90:	99 f4       	brne	.+38     	; 0x12ab8 <GPIB+0x144>
   12a92:	22 ff       	sbrs	r18, 2
   12a94:	0a c0       	rjmp	.+20     	; 0x12aaa <GPIB+0x136>
   12a96:	8a ee       	ldi	r24, 0xEA	; 234
   12a98:	93 e1       	ldi	r25, 0x13	; 19
   12a9a:	1f 92       	push	r1
   12a9c:	9f 93       	push	r25
   12a9e:	8f 93       	push	r24
   12aa0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12aa4:	0f 90       	pop	r0
   12aa6:	0f 90       	pop	r0
   12aa8:	0f 90       	pop	r0
   12aaa:	0e 94 0a a3 	call	0x14614	; 0x14614 <SS80_Universal_Device_Clear>
   12aae:	0e 94 f8 ac 	call	0x159f0	; 0x159f0 <amigo_cmd_clear>
   12ab2:	0e 94 24 b3 	call	0x16648	; 0x16648 <printer_close>
   12ab6:	12 c0       	rjmp	.+36     	; 0x12adc <GPIB+0x168>
   12ab8:	25 71       	andi	r18, 0x15	; 21
   12aba:	33 27       	eor	r19, r19
   12abc:	23 2b       	or	r18, r19
   12abe:	71 f0       	breq	.+28     	; 0x12adc <GPIB+0x168>
   12ac0:	1f 92       	push	r1
   12ac2:	8f 93       	push	r24
   12ac4:	8e ec       	ldi	r24, 0xCE	; 206
   12ac6:	93 e1       	ldi	r25, 0x13	; 19
   12ac8:	1f 92       	push	r1
   12aca:	9f 93       	push	r25
   12acc:	8f 93       	push	r24
   12ace:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12ad2:	0f 90       	pop	r0
   12ad4:	0f 90       	pop	r0
   12ad6:	0f 90       	pop	r0
   12ad8:	0f 90       	pop	r0
   12ada:	0f 90       	pop	r0
   12adc:	80 e0       	ldi	r24, 0x00	; 0
   12ade:	90 e0       	ldi	r25, 0x00	; 0
   12ae0:	08 95       	ret

00012ae2 <GPIB_TALK>:
   12ae2:	0f 93       	push	r16
   12ae4:	1f 93       	push	r17
   12ae6:	cf 93       	push	r28
   12ae8:	c8 2f       	mov	r28, r24
   12aea:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   12aee:	80 93 ac 1e 	sts	0x1EAC, r24	; 0x801eac <talking_last>
   12af2:	c0 93 a9 1e 	sts	0x1EA9, r28	; 0x801ea9 <talking>
   12af6:	cf 35       	cpi	r28, 0x5F	; 95
   12af8:	79 f4       	brne	.+30     	; 0x12b18 <GPIB_TALK+0x36>
   12afa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12afe:	82 ff       	sbrs	r24, 2
   12b00:	7f c0       	rjmp	.+254    	; 0x12c00 <GPIB_TALK+0x11e>
   12b02:	8b e7       	ldi	r24, 0x7B	; 123
   12b04:	93 e1       	ldi	r25, 0x13	; 19
   12b06:	1f 92       	push	r1
   12b08:	9f 93       	push	r25
   12b0a:	8f 93       	push	r24
   12b0c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12b10:	0f 90       	pop	r0
   12b12:	0f 90       	pop	r0
   12b14:	0f 90       	pop	r0
   12b16:	74 c0       	rjmp	.+232    	; 0x12c00 <GPIB_TALK+0x11e>
   12b18:	0c 2f       	mov	r16, r28
   12b1a:	10 e0       	ldi	r17, 0x00	; 0
   12b1c:	c8 01       	movw	r24, r16
   12b1e:	f6 dc       	rcall	.-1556   	; 0x1250c <SS80_is_MTA>
   12b20:	89 2b       	or	r24, r25
   12b22:	f1 f0       	breq	.+60     	; 0x12b60 <GPIB_TALK+0x7e>
   12b24:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12b28:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12b2c:	84 72       	andi	r24, 0x24	; 36
   12b2e:	99 27       	eor	r25, r25
   12b30:	89 2b       	or	r24, r25
   12b32:	71 f0       	breq	.+28     	; 0x12b50 <GPIB_TALK+0x6e>
   12b34:	1f 92       	push	r1
   12b36:	cf 93       	push	r28
   12b38:	8a e6       	ldi	r24, 0x6A	; 106
   12b3a:	93 e1       	ldi	r25, 0x13	; 19
   12b3c:	1f 92       	push	r1
   12b3e:	9f 93       	push	r25
   12b40:	8f 93       	push	r24
   12b42:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12b46:	0f 90       	pop	r0
   12b48:	0f 90       	pop	r0
   12b4a:	0f 90       	pop	r0
   12b4c:	0f 90       	pop	r0
   12b4e:	0f 90       	pop	r0
   12b50:	80 91 a6 1e 	lds	r24, 0x1EA6	; 0x801ea6 <spoll>
   12b54:	88 23       	and	r24, r24
   12b56:	09 f4       	brne	.+2      	; 0x12b5a <GPIB_TALK+0x78>
   12b58:	53 c0       	rjmp	.+166    	; 0x12c00 <GPIB_TALK+0x11e>
   12b5a:	0e 94 4b a2 	call	0x14496	; 0x14496 <SS80_Report>
   12b5e:	50 c0       	rjmp	.+160    	; 0x12c00 <GPIB_TALK+0x11e>
   12b60:	c8 01       	movw	r24, r16
   12b62:	07 dd       	rcall	.-1522   	; 0x12572 <AMIGO_is_MTA>
   12b64:	89 2b       	or	r24, r25
   12b66:	71 f0       	breq	.+28     	; 0x12b84 <GPIB_TALK+0xa2>
   12b68:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12b6c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12b70:	84 72       	andi	r24, 0x24	; 36
   12b72:	99 27       	eor	r25, r25
   12b74:	89 2b       	or	r24, r25
   12b76:	09 f4       	brne	.+2      	; 0x12b7a <GPIB_TALK+0x98>
   12b78:	43 c0       	rjmp	.+134    	; 0x12c00 <GPIB_TALK+0x11e>
   12b7a:	1f 92       	push	r1
   12b7c:	cf 93       	push	r28
   12b7e:	88 e5       	ldi	r24, 0x58	; 88
   12b80:	93 e1       	ldi	r25, 0x13	; 19
   12b82:	34 c0       	rjmp	.+104    	; 0x12bec <GPIB_TALK+0x10a>
   12b84:	c8 01       	movw	r24, r16
   12b86:	28 dd       	rcall	.-1456   	; 0x125d8 <PRINTER_is_MTA>
   12b88:	89 2b       	or	r24, r25
   12b8a:	69 f0       	breq	.+26     	; 0x12ba6 <GPIB_TALK+0xc4>
   12b8c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12b90:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12b94:	84 72       	andi	r24, 0x24	; 36
   12b96:	99 27       	eor	r25, r25
   12b98:	89 2b       	or	r24, r25
   12b9a:	91 f1       	breq	.+100    	; 0x12c00 <GPIB_TALK+0x11e>
   12b9c:	1f 92       	push	r1
   12b9e:	cf 93       	push	r28
   12ba0:	84 e4       	ldi	r24, 0x44	; 68
   12ba2:	93 e1       	ldi	r25, 0x13	; 19
   12ba4:	23 c0       	rjmp	.+70     	; 0x12bec <GPIB_TALK+0x10a>
   12ba6:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12baa:	90 e0       	ldi	r25, 0x00	; 0
   12bac:	04 dd       	rcall	.-1528   	; 0x125b6 <PRINTER_is_MLA>
   12bae:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   12bb2:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12bb6:	89 2b       	or	r24, r25
   12bb8:	99 f0       	breq	.+38     	; 0x12be0 <GPIB_TALK+0xfe>
   12bba:	24 72       	andi	r18, 0x24	; 36
   12bbc:	33 27       	eor	r19, r19
   12bbe:	23 2b       	or	r18, r19
   12bc0:	51 f0       	breq	.+20     	; 0x12bd6 <GPIB_TALK+0xf4>
   12bc2:	84 e3       	ldi	r24, 0x34	; 52
   12bc4:	93 e1       	ldi	r25, 0x13	; 19
   12bc6:	1f 92       	push	r1
   12bc8:	9f 93       	push	r25
   12bca:	8f 93       	push	r24
   12bcc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12bd0:	0f 90       	pop	r0
   12bd2:	0f 90       	pop	r0
   12bd4:	0f 90       	pop	r0
   12bd6:	80 e0       	ldi	r24, 0x00	; 0
   12bd8:	90 e0       	ldi	r25, 0x00	; 0
   12bda:	0e 94 71 b3 	call	0x166e2	; 0x166e2 <printer_open>
   12bde:	10 c0       	rjmp	.+32     	; 0x12c00 <GPIB_TALK+0x11e>
   12be0:	22 ff       	sbrs	r18, 2
   12be2:	0e c0       	rjmp	.+28     	; 0x12c00 <GPIB_TALK+0x11e>
   12be4:	1f 92       	push	r1
   12be6:	cf 93       	push	r28
   12be8:	88 e2       	ldi	r24, 0x28	; 40
   12bea:	93 e1       	ldi	r25, 0x13	; 19
   12bec:	1f 92       	push	r1
   12bee:	9f 93       	push	r25
   12bf0:	8f 93       	push	r24
   12bf2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12bf6:	0f 90       	pop	r0
   12bf8:	0f 90       	pop	r0
   12bfa:	0f 90       	pop	r0
   12bfc:	0f 90       	pop	r0
   12bfe:	0f 90       	pop	r0
   12c00:	80 e0       	ldi	r24, 0x00	; 0
   12c02:	90 e0       	ldi	r25, 0x00	; 0
   12c04:	cf 91       	pop	r28
   12c06:	1f 91       	pop	r17
   12c08:	0f 91       	pop	r16
   12c0a:	08 95       	ret

00012c0c <GPIB_SECONDARY_ADDRESS>:
   12c0c:	0f 93       	push	r16
   12c0e:	1f 93       	push	r17
   12c10:	cf 93       	push	r28
   12c12:	c8 2f       	mov	r28, r24
   12c14:	08 2f       	mov	r16, r24
   12c16:	10 e0       	ldi	r17, 0x00	; 0
   12c18:	c8 01       	movw	r24, r16
   12c1a:	89 dc       	rcall	.-1774   	; 0x1252e <SS80_is_MSA>
   12c1c:	89 2b       	or	r24, r25
   12c1e:	19 f1       	breq	.+70     	; 0x12c66 <GPIB_SECONDARY_ADDRESS+0x5a>
   12c20:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12c24:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12c28:	84 72       	andi	r24, 0x24	; 36
   12c2a:	99 27       	eor	r25, r25
   12c2c:	89 2b       	or	r24, r25
   12c2e:	71 f0       	breq	.+28     	; 0x12c4c <GPIB_SECONDARY_ADDRESS+0x40>
   12c30:	1f 92       	push	r1
   12c32:	cf 93       	push	r28
   12c34:	87 e1       	ldi	r24, 0x17	; 23
   12c36:	93 e1       	ldi	r25, 0x13	; 19
   12c38:	1f 92       	push	r1
   12c3a:	9f 93       	push	r25
   12c3c:	8f 93       	push	r24
   12c3e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12c42:	0f 90       	pop	r0
   12c44:	0f 90       	pop	r0
   12c46:	0f 90       	pop	r0
   12c48:	0f 90       	pop	r0
   12c4a:	0f 90       	pop	r0
   12c4c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   12c50:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   12c54:	81 81       	ldd	r24, Z+1	; 0x01
   12c56:	90 e0       	ldi	r25, 0x00	; 0
   12c58:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   12c5c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   12c60:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   12c64:	27 c0       	rjmp	.+78     	; 0x12cb4 <GPIB_SECONDARY_ADDRESS+0xa8>
   12c66:	c8 01       	movw	r24, r16
   12c68:	95 dc       	rcall	.-1750   	; 0x12594 <AMIGO_is_MSA>
   12c6a:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   12c6e:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12c72:	89 2b       	or	r24, r25
   12c74:	21 f1       	breq	.+72     	; 0x12cbe <GPIB_SECONDARY_ADDRESS+0xb2>
   12c76:	c9 01       	movw	r24, r18
   12c78:	84 72       	andi	r24, 0x24	; 36
   12c7a:	99 27       	eor	r25, r25
   12c7c:	89 2b       	or	r24, r25
   12c7e:	71 f0       	breq	.+28     	; 0x12c9c <GPIB_SECONDARY_ADDRESS+0x90>
   12c80:	1f 92       	push	r1
   12c82:	cf 93       	push	r28
   12c84:	85 e0       	ldi	r24, 0x05	; 5
   12c86:	93 e1       	ldi	r25, 0x13	; 19
   12c88:	1f 92       	push	r1
   12c8a:	9f 93       	push	r25
   12c8c:	8f 93       	push	r24
   12c8e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12c92:	0f 90       	pop	r0
   12c94:	0f 90       	pop	r0
   12c96:	0f 90       	pop	r0
   12c98:	0f 90       	pop	r0
   12c9a:	0f 90       	pop	r0
   12c9c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   12ca0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   12ca4:	81 81       	ldd	r24, Z+1	; 0x01
   12ca6:	90 e0       	ldi	r25, 0x00	; 0
   12ca8:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   12cac:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   12cb0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   12cb4:	63 a1       	ldd	r22, Z+35	; 0x23
   12cb6:	74 a1       	ldd	r23, Z+36	; 0x24
   12cb8:	8c 2f       	mov	r24, r28
   12cba:	12 de       	rcall	.-988    	; 0x128e0 <Send_Identify>
   12cbc:	20 c0       	rjmp	.+64     	; 0x12cfe <GPIB_SECONDARY_ADDRESS+0xf2>
   12cbe:	c9 01       	movw	r24, r18
   12cc0:	84 72       	andi	r24, 0x24	; 36
   12cc2:	99 27       	eor	r25, r25
   12cc4:	00 97       	sbiw	r24, 0x00	; 0
   12cc6:	d9 f0       	breq	.+54     	; 0x12cfe <GPIB_SECONDARY_ADDRESS+0xf2>
   12cc8:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   12ccc:	1f 92       	push	r1
   12cce:	8f 93       	push	r24
   12cd0:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12cd4:	1f 92       	push	r1
   12cd6:	8f 93       	push	r24
   12cd8:	1f 92       	push	r1
   12cda:	cf 93       	push	r28
   12cdc:	8f ed       	ldi	r24, 0xDF	; 223
   12cde:	92 e1       	ldi	r25, 0x12	; 18
   12ce0:	1f 92       	push	r1
   12ce2:	9f 93       	push	r25
   12ce4:	8f 93       	push	r24
   12ce6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12cea:	8d b7       	in	r24, 0x3d	; 61
   12cec:	9e b7       	in	r25, 0x3e	; 62
   12cee:	09 96       	adiw	r24, 0x09	; 9
   12cf0:	0f b6       	in	r0, 0x3f	; 63
   12cf2:	f8 94       	cli
   12cf4:	9e bf       	out	0x3e, r25	; 62
   12cf6:	0f be       	out	0x3f, r0	; 63
   12cf8:	8d bf       	out	0x3d, r24	; 61
   12cfa:	80 e0       	ldi	r24, 0x00	; 0
   12cfc:	90 e0       	ldi	r25, 0x00	; 0
   12cfe:	cf 91       	pop	r28
   12d00:	1f 91       	pop	r17
   12d02:	0f 91       	pop	r16
   12d04:	08 95       	ret

00012d06 <listen_cleanup>:
   12d06:	60 91 a5 1e 	lds	r22, 0x1EA5	; 0x801ea5 <listening_last>
   12d0a:	66 23       	and	r22, r22
   12d0c:	e9 f0       	breq	.+58     	; 0x12d48 <listen_cleanup+0x42>
   12d0e:	70 e0       	ldi	r23, 0x00	; 0
   12d10:	40 e2       	ldi	r20, 0x20	; 32
   12d12:	50 e0       	ldi	r21, 0x00	; 0
   12d14:	83 e0       	ldi	r24, 0x03	; 3
   12d16:	90 e0       	ldi	r25, 0x00	; 0
   12d18:	0e 94 e1 b5 	call	0x16bc2	; 0x16bc2 <find_device>
   12d1c:	01 96       	adiw	r24, 0x01	; 1
   12d1e:	a1 f0       	breq	.+40     	; 0x12d48 <listen_cleanup+0x42>
   12d20:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12d24:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12d28:	84 72       	andi	r24, 0x24	; 36
   12d2a:	99 27       	eor	r25, r25
   12d2c:	89 2b       	or	r24, r25
   12d2e:	51 f0       	breq	.+20     	; 0x12d44 <listen_cleanup+0x3e>
   12d30:	8e ec       	ldi	r24, 0xCE	; 206
   12d32:	92 e1       	ldi	r25, 0x12	; 18
   12d34:	1f 92       	push	r1
   12d36:	9f 93       	push	r25
   12d38:	8f 93       	push	r24
   12d3a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12d3e:	0f 90       	pop	r0
   12d40:	0f 90       	pop	r0
   12d42:	0f 90       	pop	r0
   12d44:	0c 94 24 b3 	jmp	0x16648	; 0x16648 <printer_close>
   12d48:	08 95       	ret

00012d4a <GPIB_LISTEN>:
   12d4a:	0f 93       	push	r16
   12d4c:	1f 93       	push	r17
   12d4e:	cf 93       	push	r28
   12d50:	c8 2f       	mov	r28, r24
   12d52:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12d56:	80 93 a5 1e 	sts	0x1EA5, r24	; 0x801ea5 <listening_last>
   12d5a:	c0 93 ab 1e 	sts	0x1EAB, r28	; 0x801eab <listening>
   12d5e:	d3 df       	rcall	.-90     	; 0x12d06 <listen_cleanup>
   12d60:	cf 33       	cpi	r28, 0x3F	; 63
   12d62:	19 f5       	brne	.+70     	; 0x12daa <GPIB_LISTEN+0x60>
   12d64:	10 92 ab 1e 	sts	0x1EAB, r1	; 0x801eab <listening>
   12d68:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12d6c:	82 ff       	sbrs	r24, 2
   12d6e:	75 c0       	rjmp	.+234    	; 0x12e5a <GPIB_LISTEN+0x110>
   12d70:	87 ec       	ldi	r24, 0xC7	; 199
   12d72:	93 e1       	ldi	r25, 0x13	; 19
   12d74:	1f 92       	push	r1
   12d76:	9f 93       	push	r25
   12d78:	8f 93       	push	r24
   12d7a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12d7e:	0f 90       	pop	r0
   12d80:	0f 90       	pop	r0
   12d82:	0f 90       	pop	r0
   12d84:	80 91 a3 1c 	lds	r24, 0x1CA3	; 0x801ca3 <lastcmd>
   12d88:	90 91 a4 1c 	lds	r25, 0x1CA4	; 0x801ca4 <lastcmd+0x1>
   12d8c:	8f 35       	cpi	r24, 0x5F	; 95
   12d8e:	91 05       	cpc	r25, r1
   12d90:	09 f0       	breq	.+2      	; 0x12d94 <GPIB_LISTEN+0x4a>
   12d92:	63 c0       	rjmp	.+198    	; 0x12e5a <GPIB_LISTEN+0x110>
   12d94:	85 ec       	ldi	r24, 0xC5	; 197
   12d96:	93 e1       	ldi	r25, 0x13	; 19
   12d98:	1f 92       	push	r1
   12d9a:	9f 93       	push	r25
   12d9c:	8f 93       	push	r24
   12d9e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12da2:	0f 90       	pop	r0
   12da4:	0f 90       	pop	r0
   12da6:	0f 90       	pop	r0
   12da8:	58 c0       	rjmp	.+176    	; 0x12e5a <GPIB_LISTEN+0x110>
   12daa:	0c 2f       	mov	r16, r28
   12dac:	10 e0       	ldi	r17, 0x00	; 0
   12dae:	c8 01       	movw	r24, r16
   12db0:	cf db       	rcall	.-2146   	; 0x12550 <AMIGO_is_MLA>
   12db2:	89 2b       	or	r24, r25
   12db4:	71 f0       	breq	.+28     	; 0x12dd2 <GPIB_LISTEN+0x88>
   12db6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12dba:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12dbe:	84 72       	andi	r24, 0x24	; 36
   12dc0:	99 27       	eor	r25, r25
   12dc2:	89 2b       	or	r24, r25
   12dc4:	09 f4       	brne	.+2      	; 0x12dc8 <GPIB_LISTEN+0x7e>
   12dc6:	49 c0       	rjmp	.+146    	; 0x12e5a <GPIB_LISTEN+0x110>
   12dc8:	1f 92       	push	r1
   12dca:	cf 93       	push	r28
   12dcc:	83 eb       	ldi	r24, 0xB3	; 179
   12dce:	93 e1       	ldi	r25, 0x13	; 19
   12dd0:	3a c0       	rjmp	.+116    	; 0x12e46 <GPIB_LISTEN+0xfc>
   12dd2:	c8 01       	movw	r24, r16
   12dd4:	8a db       	rcall	.-2284   	; 0x124ea <SS80_is_MLA>
   12dd6:	89 2b       	or	r24, r25
   12dd8:	69 f0       	breq	.+26     	; 0x12df4 <GPIB_LISTEN+0xaa>
   12dda:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12dde:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12de2:	84 72       	andi	r24, 0x24	; 36
   12de4:	99 27       	eor	r25, r25
   12de6:	89 2b       	or	r24, r25
   12de8:	c1 f1       	breq	.+112    	; 0x12e5a <GPIB_LISTEN+0x110>
   12dea:	1f 92       	push	r1
   12dec:	cf 93       	push	r28
   12dee:	82 ea       	ldi	r24, 0xA2	; 162
   12df0:	93 e1       	ldi	r25, 0x13	; 19
   12df2:	29 c0       	rjmp	.+82     	; 0x12e46 <GPIB_LISTEN+0xfc>
   12df4:	c8 01       	movw	r24, r16
   12df6:	df db       	rcall	.-2114   	; 0x125b6 <PRINTER_is_MLA>
   12df8:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   12dfc:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   12e00:	89 2b       	or	r24, r25
   12e02:	d9 f0       	breq	.+54     	; 0x12e3a <GPIB_LISTEN+0xf0>
   12e04:	24 72       	andi	r18, 0x24	; 36
   12e06:	33 27       	eor	r19, r19
   12e08:	23 2b       	or	r18, r19
   12e0a:	71 f0       	breq	.+28     	; 0x12e28 <GPIB_LISTEN+0xde>
   12e0c:	1f 92       	push	r1
   12e0e:	cf 93       	push	r28
   12e10:	8e e8       	ldi	r24, 0x8E	; 142
   12e12:	93 e1       	ldi	r25, 0x13	; 19
   12e14:	1f 92       	push	r1
   12e16:	9f 93       	push	r25
   12e18:	8f 93       	push	r24
   12e1a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12e1e:	0f 90       	pop	r0
   12e20:	0f 90       	pop	r0
   12e22:	0f 90       	pop	r0
   12e24:	0f 90       	pop	r0
   12e26:	0f 90       	pop	r0
   12e28:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   12e2c:	8f 35       	cpi	r24, 0x5F	; 95
   12e2e:	a9 f0       	breq	.+42     	; 0x12e5a <GPIB_LISTEN+0x110>
   12e30:	80 e0       	ldi	r24, 0x00	; 0
   12e32:	90 e0       	ldi	r25, 0x00	; 0
   12e34:	0e 94 71 b3 	call	0x166e2	; 0x166e2 <printer_open>
   12e38:	10 c0       	rjmp	.+32     	; 0x12e5a <GPIB_LISTEN+0x110>
   12e3a:	22 ff       	sbrs	r18, 2
   12e3c:	0e c0       	rjmp	.+28     	; 0x12e5a <GPIB_LISTEN+0x110>
   12e3e:	1f 92       	push	r1
   12e40:	cf 93       	push	r28
   12e42:	82 e8       	ldi	r24, 0x82	; 130
   12e44:	93 e1       	ldi	r25, 0x13	; 19
   12e46:	1f 92       	push	r1
   12e48:	9f 93       	push	r25
   12e4a:	8f 93       	push	r24
   12e4c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12e50:	0f 90       	pop	r0
   12e52:	0f 90       	pop	r0
   12e54:	0f 90       	pop	r0
   12e56:	0f 90       	pop	r0
   12e58:	0f 90       	pop	r0
   12e5a:	80 e0       	ldi	r24, 0x00	; 0
   12e5c:	90 e0       	ldi	r25, 0x00	; 0
   12e5e:	cf 91       	pop	r28
   12e60:	1f 91       	pop	r17
   12e62:	0f 91       	pop	r16
   12e64:	08 95       	ret

00012e66 <gpib_task>:
   12e66:	cf 93       	push	r28
   12e68:	df 93       	push	r29
   12e6a:	0e 94 55 8c 	call	0x118aa	; 0x118aa <gpib_state_init>
   12e6e:	c5 db       	rcall	.-2166   	; 0x125fa <gpib_init_devices>
   12e70:	10 92 21 19 	sts	0x1921, r1	; 0x801921 <gpib_log_fp+0x1>
   12e74:	10 92 20 19 	sts	0x1920, r1	; 0x801920 <gpib_log_fp>
   12e78:	80 e0       	ldi	r24, 0x00	; 0
   12e7a:	90 e0       	ldi	r25, 0x00	; 0
   12e7c:	06 d9       	rcall	.-3572   	; 0x1208a <gpib_read_byte>
   12e7e:	ec 01       	movw	r28, r24
   12e80:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   12e84:	83 ff       	sbrs	r24, 3
   12e86:	02 c0       	rjmp	.+4      	; 0x12e8c <gpib_task+0x26>
   12e88:	ce 01       	movw	r24, r28
   12e8a:	d5 d9       	rcall	.-3158   	; 0x12236 <gpib_decode>
   12e8c:	ce 01       	movw	r24, r28
   12e8e:	4a dc       	rcall	.-1900   	; 0x12724 <gpib_error_test>
   12e90:	9c 01       	movw	r18, r24
   12e92:	23 70       	andi	r18, 0x03	; 3
   12e94:	33 27       	eor	r19, r19
   12e96:	23 2b       	or	r18, r19
   12e98:	09 f0       	breq	.+2      	; 0x12e9c <gpib_task+0x36>
   12e9a:	43 c0       	rjmp	.+134    	; 0x12f22 <gpib_task+0xbc>
   12e9c:	89 2b       	or	r24, r25
   12e9e:	61 f7       	brne	.-40     	; 0x12e78 <gpib_task+0x12>
   12ea0:	d2 ff       	sbrs	r29, 2
   12ea2:	26 c0       	rjmp	.+76     	; 0x12ef0 <gpib_task+0x8a>
   12ea4:	8c 2f       	mov	r24, r28
   12ea6:	8f 77       	andi	r24, 0x7F	; 127
   12ea8:	80 32       	cpi	r24, 0x20	; 32
   12eaa:	10 f4       	brcc	.+4      	; 0x12eb0 <gpib_task+0x4a>
   12eac:	63 dd       	rcall	.-1338   	; 0x12974 <GPIB>
   12eae:	e4 cf       	rjmp	.-56     	; 0x12e78 <gpib_task+0x12>
   12eb0:	90 ee       	ldi	r25, 0xE0	; 224
   12eb2:	98 0f       	add	r25, r24
   12eb4:	90 32       	cpi	r25, 0x20	; 32
   12eb6:	10 f4       	brcc	.+4      	; 0x12ebc <gpib_task+0x56>
   12eb8:	48 df       	rcall	.-368    	; 0x12d4a <GPIB_LISTEN>
   12eba:	de cf       	rjmp	.-68     	; 0x12e78 <gpib_task+0x12>
   12ebc:	90 ec       	ldi	r25, 0xC0	; 192
   12ebe:	98 0f       	add	r25, r24
   12ec0:	90 32       	cpi	r25, 0x20	; 32
   12ec2:	10 f4       	brcc	.+4      	; 0x12ec8 <gpib_task+0x62>
   12ec4:	0e de       	rcall	.-996    	; 0x12ae2 <GPIB_TALK>
   12ec6:	d8 cf       	rjmp	.-80     	; 0x12e78 <gpib_task+0x12>
   12ec8:	90 91 ab 1e 	lds	r25, 0x1EAB	; 0x801eab <listening>
   12ecc:	99 23       	and	r25, r25
   12ece:	59 f0       	breq	.+22     	; 0x12ee6 <gpib_task+0x80>
   12ed0:	20 91 a3 1c 	lds	r18, 0x1CA3	; 0x801ca3 <lastcmd>
   12ed4:	30 91 a4 1c 	lds	r19, 0x1CA4	; 0x801ca4 <lastcmd+0x1>
   12ed8:	2f 35       	cpi	r18, 0x5F	; 95
   12eda:	31 05       	cpc	r19, r1
   12edc:	21 f4       	brne	.+8      	; 0x12ee6 <gpib_task+0x80>
   12ede:	10 92 aa 1e 	sts	0x1EAA, r1	; 0x801eaa <secondary>
   12ee2:	94 de       	rcall	.-728    	; 0x12c0c <GPIB_SECONDARY_ADDRESS>
   12ee4:	c9 cf       	rjmp	.-110    	; 0x12e78 <gpib_task+0x12>
   12ee6:	80 93 aa 1e 	sts	0x1EAA, r24	; 0x801eaa <secondary>
   12eea:	60 e0       	ldi	r22, 0x00	; 0
   12eec:	90 e0       	ldi	r25, 0x00	; 0
   12eee:	12 c0       	rjmp	.+36     	; 0x12f14 <gpib_task+0xae>
   12ef0:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   12ef4:	90 e0       	ldi	r25, 0x00	; 0
   12ef6:	5f db       	rcall	.-2370   	; 0x125b6 <PRINTER_is_MLA>
   12ef8:	89 2b       	or	r24, r25
   12efa:	29 f0       	breq	.+10     	; 0x12f06 <gpib_task+0xa0>
   12efc:	ce 01       	movw	r24, r28
   12efe:	99 27       	eor	r25, r25
   12f00:	0e 94 12 b4 	call	0x16824	; 0x16824 <printer_buffer>
   12f04:	b9 cf       	rjmp	.-142    	; 0x12e78 <gpib_task+0x12>
   12f06:	80 91 aa 1e 	lds	r24, 0x1EAA	; 0x801eaa <secondary>
   12f0a:	88 23       	and	r24, r24
   12f0c:	09 f4       	brne	.+2      	; 0x12f10 <gpib_task+0xaa>
   12f0e:	b4 cf       	rjmp	.-152    	; 0x12e78 <gpib_task+0x12>
   12f10:	61 e0       	ldi	r22, 0x01	; 1
   12f12:	ce 01       	movw	r24, r28
   12f14:	91 dc       	rcall	.-1758   	; 0x12838 <GPIB_COMMANDS>
   12f16:	06 dc       	rcall	.-2036   	; 0x12724 <gpib_error_test>
   12f18:	83 70       	andi	r24, 0x03	; 3
   12f1a:	99 27       	eor	r25, r25
   12f1c:	89 2b       	or	r24, r25
   12f1e:	09 f4       	brne	.+2      	; 0x12f22 <gpib_task+0xbc>
   12f20:	ab cf       	rjmp	.-170    	; 0x12e78 <gpib_task+0x12>
   12f22:	df 91       	pop	r29
   12f24:	cf 91       	pop	r28
   12f26:	08 95       	ret

00012f28 <talk_cleanup>:
   12f28:	08 95       	ret

00012f2a <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12f2a:	cf 93       	push	r28
   12f2c:	df 93       	push	r29
   12f2e:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12f30:	80 e1       	ldi	r24, 0x10	; 16
   12f32:	98 e1       	ldi	r25, 0x18	; 24
   12f34:	1f 92       	push	r1
   12f36:	9f 93       	push	r25
   12f38:	8f 93       	push	r24
   12f3a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    if(full)
   12f3e:	0f 90       	pop	r0
   12f40:	0f 90       	pop	r0
   12f42:	0f 90       	pop	r0
   12f44:	cd 2b       	or	r28, r29
   12f46:	51 f0       	breq	.+20     	; 0x12f5c <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12f48:	8f e8       	ldi	r24, 0x8F	; 143
   12f4a:	96 e1       	ldi	r25, 0x16	; 22
   12f4c:	1f 92       	push	r1
   12f4e:	9f 93       	push	r25
   12f50:	8f 93       	push	r24
   12f52:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   12f56:	0f 90       	pop	r0
   12f58:	0f 90       	pop	r0
   12f5a:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   12f5c:	df 91       	pop	r29
   12f5e:	cf 91       	pop	r28
   12f60:	08 95       	ret

00012f62 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12f62:	ef 92       	push	r14
   12f64:	ff 92       	push	r15
   12f66:	0f 93       	push	r16
   12f68:	1f 93       	push	r17
   12f6a:	cf 93       	push	r28
   12f6c:	df 93       	push	r29
   12f6e:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12f70:	fb 01       	movw	r30, r22
   12f72:	80 81       	ld	r24, Z
   12f74:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12f76:	00 97       	sbiw	r24, 0x00	; 0
   12f78:	19 f4       	brne	.+6      	; 0x12f80 <gpib_tests+0x1e>
        return(0);
   12f7a:	80 e0       	ldi	r24, 0x00	; 0
   12f7c:	90 e0       	ldi	r25, 0x00	; 0
   12f7e:	e5 c2       	rjmp	.+1482   	; 0x1354a <gpib_tests+0x5e8>
   12f80:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12f82:	65 e2       	ldi	r22, 0x25	; 37
   12f84:	7d e0       	ldi	r23, 0x0D	; 13
   12f86:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   12f8a:	89 2b       	or	r24, r25
   12f8c:	b1 f3       	breq	.-20     	; 0x12f7a <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12f8e:	0a 81       	ldd	r16, Y+2	; 0x02
   12f90:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   12f92:	01 15       	cp	r16, r1
   12f94:	11 05       	cpc	r17, r1
   12f96:	21 f4       	brne	.+8      	; 0x12fa0 <gpib_tests+0x3e>
    {
        gpib_help(1);
   12f98:	81 e0       	ldi	r24, 0x01	; 1
   12f9a:	90 e0       	ldi	r25, 0x00	; 0
   12f9c:	c6 df       	rcall	.-116    	; 0x12f2a <gpib_help>
   12f9e:	d3 c2       	rjmp	.+1446   	; 0x13546 <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   12fa0:	6b e0       	ldi	r22, 0x0B	; 11
   12fa2:	76 e1       	ldi	r23, 0x16	; 22
   12fa4:	c8 01       	movw	r24, r16
   12fa6:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   12faa:	89 2b       	or	r24, r25
   12fac:	a9 f7       	brne	.-22     	; 0x12f98 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12fae:	97 01       	movw	r18, r14
   12fb0:	42 e0       	ldi	r20, 0x02	; 2
   12fb2:	50 e0       	ldi	r21, 0x00	; 0
   12fb4:	6a e2       	ldi	r22, 0x2A	; 42
   12fb6:	7d e0       	ldi	r23, 0x0D	; 13
   12fb8:	c8 01       	movw	r24, r16
   12fba:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   12fbe:	89 2b       	or	r24, r25
   12fc0:	19 f0       	breq	.+6      	; 0x12fc8 <gpib_tests+0x66>
    {
        display_Addresses();
   12fc2:	0e 94 94 c1 	call	0x18328	; 0x18328 <display_Addresses>
   12fc6:	bf c2       	rjmp	.+1406   	; 0x13546 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12fc8:	97 01       	movw	r18, r14
   12fca:	42 e0       	ldi	r20, 0x02	; 2
   12fcc:	50 e0       	ldi	r21, 0x00	; 0
   12fce:	64 e3       	ldi	r22, 0x34	; 52
   12fd0:	7d e0       	ldi	r23, 0x0D	; 13
   12fd2:	c8 01       	movw	r24, r16
   12fd4:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   12fd8:	89 2b       	or	r24, r25
   12fda:	19 f0       	breq	.+6      	; 0x12fe2 <gpib_tests+0x80>
    {
        display_Config();
   12fdc:	0e 94 8f c2 	call	0x1851e	; 0x1851e <display_Config>
   12fe0:	b2 c2       	rjmp	.+1380   	; 0x13546 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   12fe2:	97 01       	movw	r18, r14
   12fe4:	43 e0       	ldi	r20, 0x03	; 3
   12fe6:	50 e0       	ldi	r21, 0x00	; 0
   12fe8:	6b e3       	ldi	r22, 0x3B	; 59
   12fea:	7d e0       	ldi	r23, 0x0D	; 13
   12fec:	c8 01       	movw	r24, r16
   12fee:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   12ff2:	89 2b       	or	r24, r25
   12ff4:	69 f0       	breq	.+26     	; 0x13010 <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   12ff6:	8c 81       	ldd	r24, Y+4	; 0x04
   12ff8:	9d 81       	ldd	r25, Y+5	; 0x05
   12ffa:	0e 94 52 32 	call	0x64a4	; 0x64a4 <get_value>
   12ffe:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <debuglevel>
   13002:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   13006:	7f 93       	push	r23
   13008:	6f 93       	push	r22
   1300a:	82 e8       	ldi	r24, 0x82	; 130
   1300c:	96 e1       	ldi	r25, 0x16	; 22
   1300e:	b9 c1       	rjmp	.+882    	; 0x13382 <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   13010:	97 01       	movw	r18, r14
   13012:	42 e0       	ldi	r20, 0x02	; 2
   13014:	50 e0       	ldi	r21, 0x00	; 0
   13016:	61 e4       	ldi	r22, 0x41	; 65
   13018:	7d e0       	ldi	r23, 0x0D	; 13
   1301a:	c8 01       	movw	r24, r16
   1301c:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   13020:	89 2b       	or	r24, r25
   13022:	19 f0       	breq	.+6      	; 0x1302a <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   13024:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   13028:	8e c2       	rjmp	.+1308   	; 0x13546 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1302a:	97 01       	movw	r18, r14
   1302c:	42 e0       	ldi	r20, 0x02	; 2
   1302e:	50 e0       	ldi	r21, 0x00	; 0
   13030:	6f e4       	ldi	r22, 0x4F	; 79
   13032:	7d e0       	ldi	r23, 0x0D	; 13
   13034:	c8 01       	movw	r24, r16
   13036:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1303a:	89 2b       	or	r24, r25
   1303c:	29 f0       	breq	.+10     	; 0x13048 <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1303e:	87 e5       	ldi	r24, 0x57	; 87
   13040:	9d e0       	ldi	r25, 0x0D	; 13
   13042:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   13046:	7f c2       	rjmp	.+1278   	; 0x13546 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   13048:	97 01       	movw	r18, r14
   1304a:	42 e0       	ldi	r20, 0x02	; 2
   1304c:	50 e0       	ldi	r21, 0x00	; 0
   1304e:	65 e6       	ldi	r22, 0x65	; 101
   13050:	7d e0       	ldi	r23, 0x0D	; 13
   13052:	c8 01       	movw	r24, r16
   13054:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   13058:	89 2b       	or	r24, r25
    {
        gpib_task();
   1305a:	11 f0       	breq	.+4      	; 0x13060 <gpib_tests+0xfe>
   1305c:	04 df       	rcall	.-504    	; 0x12e66 <gpib_task>
   1305e:	73 c2       	rjmp	.+1254   	; 0x13546 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   13060:	97 01       	movw	r18, r14
   13062:	43 e0       	ldi	r20, 0x03	; 3
   13064:	50 e0       	ldi	r21, 0x00	; 0
   13066:	6a e6       	ldi	r22, 0x6A	; 106
   13068:	7d e0       	ldi	r23, 0x0D	; 13
   1306a:	c8 01       	movw	r24, r16
   1306c:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   13070:	89 2b       	or	r24, r25
   13072:	a1 f0       	breq	.+40     	; 0x1309c <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   13074:	8e 81       	ldd	r24, Y+6	; 0x06
   13076:	9f 81       	ldd	r25, Y+7	; 0x07
   13078:	00 97       	sbiw	r24, 0x00	; 0
   1307a:	51 f0       	breq	.+20     	; 0x13090 <gpib_tests+0x12e>
   1307c:	60 e7       	ldi	r22, 0x70	; 112
   1307e:	7d e0       	ldi	r23, 0x0D	; 13
   13080:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   13084:	61 e0       	ldi	r22, 0x01	; 1
   13086:	70 e0       	ldi	r23, 0x00	; 0
   13088:	89 2b       	or	r24, r25
   1308a:	21 f4       	brne	.+8      	; 0x13094 <gpib_tests+0x132>
   1308c:	60 e0       	ldi	r22, 0x00	; 0
   1308e:	02 c0       	rjmp	.+4      	; 0x13094 <gpib_tests+0x132>
   13090:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   13092:	70 e0       	ldi	r23, 0x00	; 0
   13094:	8c 81       	ldd	r24, Y+4	; 0x04
   13096:	9d 81       	ldd	r25, Y+5	; 0x05
   13098:	b8 da       	rcall	.-2704   	; 0x1260a <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   1309a:	55 c2       	rjmp	.+1194   	; 0x13546 <gpib_tests+0x5e4>
   1309c:	97 01       	movw	r18, r14
   1309e:	42 e0       	ldi	r20, 0x02	; 2
   130a0:	50 e0       	ldi	r21, 0x00	; 0
   130a2:	64 e7       	ldi	r22, 0x74	; 116
   130a4:	7d e0       	ldi	r23, 0x0D	; 13
   130a6:	c8 01       	movw	r24, r16
   130a8:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   130ac:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   130ae:	19 f0       	breq	.+6      	; 0x130b6 <gpib_tests+0x154>
   130b0:	0e 94 df 8c 	call	0x119be	; 0x119be <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   130b4:	48 c2       	rjmp	.+1168   	; 0x13546 <gpib_tests+0x5e4>
   130b6:	97 01       	movw	r18, r14
   130b8:	43 e0       	ldi	r20, 0x03	; 3
   130ba:	50 e0       	ldi	r21, 0x00	; 0
   130bc:	68 e7       	ldi	r22, 0x78	; 120
   130be:	7d e0       	ldi	r23, 0x0D	; 13
   130c0:	c8 01       	movw	r24, r16
   130c2:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   130c6:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   130c8:	39 f0       	breq	.+14     	; 0x130d8 <gpib_tests+0x176>
   130ca:	8c 81       	ldd	r24, Y+4	; 0x04
   130cc:	9d 81       	ldd	r25, Y+5	; 0x05
   130ce:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <atoi>
   130d2:	0e 94 b4 b4 	call	0x16968	; 0x16968 <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   130d6:	37 c2       	rjmp	.+1134   	; 0x13546 <gpib_tests+0x5e4>
   130d8:	97 01       	movw	r18, r14
   130da:	43 e0       	ldi	r20, 0x03	; 3
   130dc:	50 e0       	ldi	r21, 0x00	; 0
   130de:	62 e8       	ldi	r22, 0x82	; 130
   130e0:	7d e0       	ldi	r23, 0x0D	; 13
   130e2:	c8 01       	movw	r24, r16
   130e4:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   130e8:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   130ea:	41 f0       	breq	.+16     	; 0x130fc <gpib_tests+0x19a>
   130ec:	8c 81       	ldd	r24, Y+4	; 0x04
   130ee:	9d 81       	ldd	r25, Y+5	; 0x05
   130f0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <atoh>
   130f4:	86 2f       	mov	r24, r22
   130f6:	0e 94 87 8a 	call	0x1150e	; 0x1150e <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   130fa:	25 c2       	rjmp	.+1098   	; 0x13546 <gpib_tests+0x5e4>
   130fc:	97 01       	movw	r18, r14
   130fe:	43 e0       	ldi	r20, 0x03	; 3
   13100:	50 e0       	ldi	r21, 0x00	; 0
   13102:	6e e8       	ldi	r22, 0x8E	; 142
   13104:	7d e0       	ldi	r23, 0x0D	; 13
   13106:	c8 01       	movw	r24, r16
   13108:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1310c:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   1310e:	41 f0       	breq	.+16     	; 0x13120 <gpib_tests+0x1be>
   13110:	8c 81       	ldd	r24, Y+4	; 0x04
   13112:	9d 81       	ldd	r25, Y+5	; 0x05
   13114:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <atoh>
   13118:	86 2f       	mov	r24, r22
   1311a:	0e 94 7a 8a 	call	0x114f4	; 0x114f4 <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   1311e:	13 c2       	rjmp	.+1062   	; 0x13546 <gpib_tests+0x5e4>
   13120:	97 01       	movw	r18, r14
   13122:	43 e0       	ldi	r20, 0x03	; 3
   13124:	50 e0       	ldi	r21, 0x00	; 0
   13126:	6a e9       	ldi	r22, 0x9A	; 154
   13128:	7d e0       	ldi	r23, 0x0D	; 13
   1312a:	c8 01       	movw	r24, r16
   1312c:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   13130:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   13132:	41 f0       	breq	.+16     	; 0x13144 <gpib_tests+0x1e2>
   13134:	8c 81       	ldd	r24, Y+4	; 0x04
   13136:	9d 81       	ldd	r25, Y+5	; 0x05
   13138:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <atoh>
   1313c:	86 2f       	mov	r24, r22
   1313e:	0e 94 5b 8a 	call	0x114b6	; 0x114b6 <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   13142:	01 c2       	rjmp	.+1026   	; 0x13546 <gpib_tests+0x5e4>
   13144:	97 01       	movw	r18, r14
   13146:	42 e0       	ldi	r20, 0x02	; 2
   13148:	50 e0       	ldi	r21, 0x00	; 0
   1314a:	62 ea       	ldi	r22, 0xA2	; 162
   1314c:	7d e0       	ldi	r23, 0x0D	; 13
   1314e:	c8 01       	movw	r24, r16
   13150:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   13154:	89 2b       	or	r24, r25
    {
        ppr_init();
   13156:	19 f0       	breq	.+6      	; 0x1315e <gpib_tests+0x1fc>
   13158:	0e 94 69 8a 	call	0x114d2	; 0x114d2 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   1315c:	f4 c1       	rjmp	.+1000   	; 0x13546 <gpib_tests+0x5e4>
   1315e:	97 01       	movw	r18, r14
   13160:	45 e0       	ldi	r20, 0x05	; 5
   13162:	50 e0       	ldi	r21, 0x00	; 0
   13164:	6b ea       	ldi	r22, 0xAB	; 171
   13166:	7d e0       	ldi	r23, 0x0D	; 13
   13168:	c8 01       	movw	r24, r16
   1316a:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1316e:	89 2b       	or	r24, r25
   13170:	09 f4       	brne	.+2      	; 0x13174 <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   13172:	12 c1       	rjmp	.+548    	; 0x13398 <gpib_tests+0x436>
   13174:	60 eb       	ldi	r22, 0xB0	; 176
   13176:	7d e0       	ldi	r23, 0x0D	; 13
   13178:	8c 81       	ldd	r24, Y+4	; 0x04
   1317a:	9d 81       	ldd	r25, Y+5	; 0x05
   1317c:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13180:	89 2b       	or	r24, r25
   13182:	09 f4       	brne	.+2      	; 0x13186 <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   13184:	09 c1       	rjmp	.+530    	; 0x13398 <gpib_tests+0x436>
   13186:	65 eb       	ldi	r22, 0xB5	; 181
   13188:	7d e0       	ldi	r23, 0x0D	; 13
   1318a:	8e 81       	ldd	r24, Y+6	; 0x06
   1318c:	9f 81       	ldd	r25, Y+7	; 0x07
   1318e:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13192:	89 2b       	or	r24, r25
   13194:	09 f4       	brne	.+2      	; 0x13198 <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   13196:	4c c0       	rjmp	.+152    	; 0x13230 <gpib_tests+0x2ce>
   13198:	6d ea       	ldi	r22, 0xAD	; 173
   1319a:	73 e1       	ldi	r23, 0x13	; 19
   1319c:	88 85       	ldd	r24, Y+8	; 0x08
   1319e:	99 85       	ldd	r25, Y+9	; 0x09
   131a0:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   131a4:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   131a6:	59 f0       	breq	.+22     	; 0x131be <gpib_tests+0x25c>
   131a8:	e2 b1       	in	r30, 0x02	; 2
   131aa:	83 e0       	ldi	r24, 0x03	; 3
   131ac:	e8 9f       	mul	r30, r24
   131ae:	f0 01       	movw	r30, r0
   131b0:	11 24       	eor	r1, r1
   131b2:	80 a1       	ldd	r24, Z+32	; 0x20
   131b4:	1f 92       	push	r1
   131b6:	8f 93       	push	r24
   131b8:	8a e6       	ldi	r24, 0x6A	; 106
   131ba:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   131bc:	e2 c0       	rjmp	.+452    	; 0x13382 <gpib_tests+0x420>
   131be:	6a eb       	ldi	r22, 0xBA	; 186
   131c0:	7d e0       	ldi	r23, 0x0D	; 13
   131c2:	88 85       	ldd	r24, Y+8	; 0x08
   131c4:	99 85       	ldd	r25, Y+9	; 0x09
   131c6:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   131ca:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   131cc:	59 f0       	breq	.+22     	; 0x131e4 <gpib_tests+0x282>
   131ce:	e5 b1       	in	r30, 0x05	; 5
   131d0:	83 e0       	ldi	r24, 0x03	; 3
   131d2:	e8 9f       	mul	r30, r24
   131d4:	f0 01       	movw	r30, r0
   131d6:	11 24       	eor	r1, r1
   131d8:	80 a1       	ldd	r24, Z+32	; 0x20
   131da:	1f 92       	push	r1
   131dc:	8f 93       	push	r24
   131de:	82 e5       	ldi	r24, 0x52	; 82
   131e0:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   131e2:	cf c0       	rjmp	.+414    	; 0x13382 <gpib_tests+0x420>
   131e4:	63 ee       	ldi	r22, 0xE3	; 227
   131e6:	7c e0       	ldi	r23, 0x0C	; 12
   131e8:	88 85       	ldd	r24, Y+8	; 0x08
   131ea:	99 85       	ldd	r25, Y+9	; 0x09
   131ec:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   131f0:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   131f2:	59 f0       	breq	.+22     	; 0x1320a <gpib_tests+0x2a8>
   131f4:	e8 b1       	in	r30, 0x08	; 8
   131f6:	83 e0       	ldi	r24, 0x03	; 3
   131f8:	e8 9f       	mul	r30, r24
   131fa:	f0 01       	movw	r30, r0
   131fc:	11 24       	eor	r1, r1
   131fe:	80 a1       	ldd	r24, Z+32	; 0x20
   13200:	1f 92       	push	r1
   13202:	8f 93       	push	r24
   13204:	8a e3       	ldi	r24, 0x3A	; 58
   13206:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13208:	bc c0       	rjmp	.+376    	; 0x13382 <gpib_tests+0x420>
   1320a:	60 e4       	ldi	r22, 0x40	; 64
   1320c:	77 e0       	ldi	r23, 0x07	; 7
   1320e:	88 85       	ldd	r24, Y+8	; 0x08
   13210:	99 85       	ldd	r25, Y+9	; 0x09
   13212:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13216:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   13218:	59 f0       	breq	.+22     	; 0x13230 <gpib_tests+0x2ce>
   1321a:	eb b1       	in	r30, 0x0b	; 11
   1321c:	83 e0       	ldi	r24, 0x03	; 3
   1321e:	e8 9f       	mul	r30, r24
   13220:	f0 01       	movw	r30, r0
   13222:	11 24       	eor	r1, r1
   13224:	80 a1       	ldd	r24, Z+32	; 0x20
   13226:	1f 92       	push	r1
   13228:	8f 93       	push	r24
   1322a:	82 e2       	ldi	r24, 0x22	; 34
   1322c:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   1322e:	a9 c0       	rjmp	.+338    	; 0x13382 <gpib_tests+0x420>
   13230:	6c eb       	ldi	r22, 0xBC	; 188
   13232:	7d e0       	ldi	r23, 0x0D	; 13
   13234:	8e 81       	ldd	r24, Y+6	; 0x06
   13236:	9f 81       	ldd	r25, Y+7	; 0x07
   13238:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1323c:	89 2b       	or	r24, r25
   1323e:	09 f4       	brne	.+2      	; 0x13242 <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13240:	4c c0       	rjmp	.+152    	; 0x132da <gpib_tests+0x378>
   13242:	6d ea       	ldi	r22, 0xAD	; 173
   13244:	73 e1       	ldi	r23, 0x13	; 19
   13246:	88 85       	ldd	r24, Y+8	; 0x08
   13248:	99 85       	ldd	r25, Y+9	; 0x09
   1324a:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1324e:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   13250:	59 f0       	breq	.+22     	; 0x13268 <gpib_tests+0x306>
   13252:	e2 b1       	in	r30, 0x02	; 2
   13254:	83 e0       	ldi	r24, 0x03	; 3
   13256:	e8 9f       	mul	r30, r24
   13258:	f0 01       	movw	r30, r0
   1325a:	11 24       	eor	r1, r1
   1325c:	82 a1       	ldd	r24, Z+34	; 0x22
   1325e:	1f 92       	push	r1
   13260:	8f 93       	push	r24
   13262:	89 e0       	ldi	r24, 0x09	; 9
   13264:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13266:	8d c0       	rjmp	.+282    	; 0x13382 <gpib_tests+0x420>
   13268:	6a eb       	ldi	r22, 0xBA	; 186
   1326a:	7d e0       	ldi	r23, 0x0D	; 13
   1326c:	88 85       	ldd	r24, Y+8	; 0x08
   1326e:	99 85       	ldd	r25, Y+9	; 0x09
   13270:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13274:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   13276:	59 f0       	breq	.+22     	; 0x1328e <gpib_tests+0x32c>
   13278:	e5 b1       	in	r30, 0x05	; 5
   1327a:	83 e0       	ldi	r24, 0x03	; 3
   1327c:	e8 9f       	mul	r30, r24
   1327e:	f0 01       	movw	r30, r0
   13280:	11 24       	eor	r1, r1
   13282:	82 a1       	ldd	r24, Z+34	; 0x22
   13284:	1f 92       	push	r1
   13286:	8f 93       	push	r24
   13288:	80 ef       	ldi	r24, 0xF0	; 240
   1328a:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1328c:	7a c0       	rjmp	.+244    	; 0x13382 <gpib_tests+0x420>
   1328e:	63 ee       	ldi	r22, 0xE3	; 227
   13290:	7c e0       	ldi	r23, 0x0C	; 12
   13292:	88 85       	ldd	r24, Y+8	; 0x08
   13294:	99 85       	ldd	r25, Y+9	; 0x09
   13296:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1329a:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   1329c:	59 f0       	breq	.+22     	; 0x132b4 <gpib_tests+0x352>
   1329e:	e8 b1       	in	r30, 0x08	; 8
   132a0:	83 e0       	ldi	r24, 0x03	; 3
   132a2:	e8 9f       	mul	r30, r24
   132a4:	f0 01       	movw	r30, r0
   132a6:	11 24       	eor	r1, r1
   132a8:	82 a1       	ldd	r24, Z+34	; 0x22
   132aa:	1f 92       	push	r1
   132ac:	8f 93       	push	r24
   132ae:	87 ed       	ldi	r24, 0xD7	; 215
   132b0:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   132b2:	67 c0       	rjmp	.+206    	; 0x13382 <gpib_tests+0x420>
   132b4:	60 e4       	ldi	r22, 0x40	; 64
   132b6:	77 e0       	ldi	r23, 0x07	; 7
   132b8:	88 85       	ldd	r24, Y+8	; 0x08
   132ba:	99 85       	ldd	r25, Y+9	; 0x09
   132bc:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   132c0:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   132c2:	59 f0       	breq	.+22     	; 0x132da <gpib_tests+0x378>
   132c4:	eb b1       	in	r30, 0x0b	; 11
   132c6:	83 e0       	ldi	r24, 0x03	; 3
   132c8:	e8 9f       	mul	r30, r24
   132ca:	f0 01       	movw	r30, r0
   132cc:	11 24       	eor	r1, r1
   132ce:	82 a1       	ldd	r24, Z+34	; 0x22
   132d0:	1f 92       	push	r1
   132d2:	8f 93       	push	r24
   132d4:	8e eb       	ldi	r24, 0xBE	; 190
   132d6:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   132d8:	54 c0       	rjmp	.+168    	; 0x13382 <gpib_tests+0x420>
   132da:	62 ec       	ldi	r22, 0xC2	; 194
   132dc:	7d e0       	ldi	r23, 0x0D	; 13
   132de:	8e 81       	ldd	r24, Y+6	; 0x06
   132e0:	9f 81       	ldd	r25, Y+7	; 0x07
   132e2:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   132e6:	89 2b       	or	r24, r25
   132e8:	09 f4       	brne	.+2      	; 0x132ec <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   132ea:	56 c0       	rjmp	.+172    	; 0x13398 <gpib_tests+0x436>
   132ec:	6d ea       	ldi	r22, 0xAD	; 173
   132ee:	73 e1       	ldi	r23, 0x13	; 19
   132f0:	88 85       	ldd	r24, Y+8	; 0x08
   132f2:	99 85       	ldd	r25, Y+9	; 0x09
   132f4:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   132f8:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   132fa:	59 f0       	breq	.+22     	; 0x13312 <gpib_tests+0x3b0>
   132fc:	e2 b1       	in	r30, 0x02	; 2
   132fe:	83 e0       	ldi	r24, 0x03	; 3
   13300:	e8 9f       	mul	r30, r24
   13302:	f0 01       	movw	r30, r0
   13304:	11 24       	eor	r1, r1
   13306:	81 a1       	ldd	r24, Z+33	; 0x21
   13308:	1f 92       	push	r1
   1330a:	8f 93       	push	r24
   1330c:	87 ea       	ldi	r24, 0xA7	; 167
   1330e:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13310:	38 c0       	rjmp	.+112    	; 0x13382 <gpib_tests+0x420>
   13312:	6a eb       	ldi	r22, 0xBA	; 186
   13314:	7d e0       	ldi	r23, 0x0D	; 13
   13316:	88 85       	ldd	r24, Y+8	; 0x08
   13318:	99 85       	ldd	r25, Y+9	; 0x09
   1331a:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1331e:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   13320:	59 f0       	breq	.+22     	; 0x13338 <gpib_tests+0x3d6>
   13322:	e5 b1       	in	r30, 0x05	; 5
   13324:	83 e0       	ldi	r24, 0x03	; 3
   13326:	e8 9f       	mul	r30, r24
   13328:	f0 01       	movw	r30, r0
   1332a:	11 24       	eor	r1, r1
   1332c:	81 a1       	ldd	r24, Z+33	; 0x21
   1332e:	1f 92       	push	r1
   13330:	8f 93       	push	r24
   13332:	80 e9       	ldi	r24, 0x90	; 144
   13334:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13336:	25 c0       	rjmp	.+74     	; 0x13382 <gpib_tests+0x420>
   13338:	63 ee       	ldi	r22, 0xE3	; 227
   1333a:	7c e0       	ldi	r23, 0x0C	; 12
   1333c:	88 85       	ldd	r24, Y+8	; 0x08
   1333e:	99 85       	ldd	r25, Y+9	; 0x09
   13340:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13344:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   13346:	59 f0       	breq	.+22     	; 0x1335e <gpib_tests+0x3fc>
   13348:	e8 b1       	in	r30, 0x08	; 8
   1334a:	83 e0       	ldi	r24, 0x03	; 3
   1334c:	e8 9f       	mul	r30, r24
   1334e:	f0 01       	movw	r30, r0
   13350:	11 24       	eor	r1, r1
   13352:	81 a1       	ldd	r24, Z+33	; 0x21
   13354:	1f 92       	push	r1
   13356:	8f 93       	push	r24
   13358:	89 e7       	ldi	r24, 0x79	; 121
   1335a:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1335c:	12 c0       	rjmp	.+36     	; 0x13382 <gpib_tests+0x420>
   1335e:	60 e4       	ldi	r22, 0x40	; 64
   13360:	77 e0       	ldi	r23, 0x07	; 7
   13362:	88 85       	ldd	r24, Y+8	; 0x08
   13364:	99 85       	ldd	r25, Y+9	; 0x09
   13366:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1336a:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   1336c:	a9 f0       	breq	.+42     	; 0x13398 <gpib_tests+0x436>
   1336e:	eb b1       	in	r30, 0x0b	; 11
   13370:	83 e0       	ldi	r24, 0x03	; 3
   13372:	e8 9f       	mul	r30, r24
   13374:	f0 01       	movw	r30, r0
   13376:	11 24       	eor	r1, r1
   13378:	81 a1       	ldd	r24, Z+33	; 0x21
   1337a:	1f 92       	push	r1
   1337c:	8f 93       	push	r24
   1337e:	82 e6       	ldi	r24, 0x62	; 98
   13380:	95 e1       	ldi	r25, 0x15	; 21
   13382:	1f 92       	push	r1
   13384:	9f 93       	push	r25
   13386:	8f 93       	push	r24
   13388:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
					return (1);
   1338c:	0f 90       	pop	r0
   1338e:	0f 90       	pop	r0
   13390:	0f 90       	pop	r0
   13392:	0f 90       	pop	r0
   13394:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   13396:	d7 c0       	rjmp	.+430    	; 0x13546 <gpib_tests+0x5e4>
   13398:	97 01       	movw	r18, r14
   1339a:	46 e0       	ldi	r20, 0x06	; 6
   1339c:	50 e0       	ldi	r21, 0x00	; 0
   1339e:	6b ea       	ldi	r22, 0xAB	; 171
   133a0:	7d e0       	ldi	r23, 0x0D	; 13
   133a2:	c8 01       	movw	r24, r16
   133a4:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   133a8:	89 2b       	or	r24, r25
   133aa:	09 f4       	brne	.+2      	; 0x133ae <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   133ac:	e6 cd       	rjmp	.-1076   	; 0x12f7a <gpib_tests+0x18>
   133ae:	68 e1       	ldi	r22, 0x18	; 24
   133b0:	73 e1       	ldi	r23, 0x13	; 19
   133b2:	8c 81       	ldd	r24, Y+4	; 0x04
   133b4:	9d 81       	ldd	r25, Y+5	; 0x05
   133b6:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   133ba:	89 2b       	or	r24, r25
   133bc:	09 f4       	brne	.+2      	; 0x133c0 <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   133be:	dd cd       	rjmp	.-1094   	; 0x12f7a <gpib_tests+0x18>
   133c0:	65 eb       	ldi	r22, 0xB5	; 181
   133c2:	7d e0       	ldi	r23, 0x0D	; 13
   133c4:	8e 81       	ldd	r24, Y+6	; 0x06
   133c6:	9f 81       	ldd	r25, Y+7	; 0x07
   133c8:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   133cc:	89 2b       	or	r24, r25
   133ce:	09 f4       	brne	.+2      	; 0x133d2 <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   133d0:	45 c0       	rjmp	.+138    	; 0x1345c <gpib_tests+0x4fa>
   133d2:	8a 85       	ldd	r24, Y+10	; 0x0a
   133d4:	9b 85       	ldd	r25, Y+11	; 0x0b
   133d6:	0e 94 52 32 	call	0x64a4	; 0x64a4 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   133da:	16 2f       	mov	r17, r22
   133dc:	6d ea       	ldi	r22, 0xAD	; 173
   133de:	73 e1       	ldi	r23, 0x13	; 19
   133e0:	88 85       	ldd	r24, Y+8	; 0x08
   133e2:	99 85       	ldd	r25, Y+9	; 0x09
   133e4:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   133e8:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   133ea:	41 f0       	breq	.+16     	; 0x133fc <gpib_tests+0x49a>
   133ec:	e2 b1       	in	r30, 0x02	; 2
   133ee:	83 e0       	ldi	r24, 0x03	; 3
   133f0:	e8 9f       	mul	r30, r24
   133f2:	f0 01       	movw	r30, r0
   133f4:	11 24       	eor	r1, r1
   133f6:	8f ef       	ldi	r24, 0xFF	; 255
   133f8:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   133fa:	45 c0       	rjmp	.+138    	; 0x13486 <gpib_tests+0x524>
   133fc:	6a eb       	ldi	r22, 0xBA	; 186
   133fe:	7d e0       	ldi	r23, 0x0D	; 13
   13400:	88 85       	ldd	r24, Y+8	; 0x08
   13402:	99 85       	ldd	r25, Y+9	; 0x09
   13404:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13408:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   1340a:	41 f0       	breq	.+16     	; 0x1341c <gpib_tests+0x4ba>
   1340c:	e5 b1       	in	r30, 0x05	; 5
   1340e:	83 e0       	ldi	r24, 0x03	; 3
   13410:	e8 9f       	mul	r30, r24
   13412:	f0 01       	movw	r30, r0
   13414:	11 24       	eor	r1, r1
   13416:	8f ef       	ldi	r24, 0xFF	; 255
   13418:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1341a:	3f c0       	rjmp	.+126    	; 0x1349a <gpib_tests+0x538>
   1341c:	63 ee       	ldi	r22, 0xE3	; 227
   1341e:	7c e0       	ldi	r23, 0x0C	; 12
   13420:	88 85       	ldd	r24, Y+8	; 0x08
   13422:	99 85       	ldd	r25, Y+9	; 0x09
   13424:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13428:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   1342a:	41 f0       	breq	.+16     	; 0x1343c <gpib_tests+0x4da>
   1342c:	e8 b1       	in	r30, 0x08	; 8
   1342e:	83 e0       	ldi	r24, 0x03	; 3
   13430:	e8 9f       	mul	r30, r24
   13432:	f0 01       	movw	r30, r0
   13434:	11 24       	eor	r1, r1
   13436:	8f ef       	ldi	r24, 0xFF	; 255
   13438:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1343a:	39 c0       	rjmp	.+114    	; 0x134ae <gpib_tests+0x54c>
   1343c:	60 e4       	ldi	r22, 0x40	; 64
   1343e:	77 e0       	ldi	r23, 0x07	; 7
   13440:	88 85       	ldd	r24, Y+8	; 0x08
   13442:	99 85       	ldd	r25, Y+9	; 0x09
   13444:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13448:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   1344a:	41 f0       	breq	.+16     	; 0x1345c <gpib_tests+0x4fa>
   1344c:	eb b1       	in	r30, 0x0b	; 11
   1344e:	83 e0       	ldi	r24, 0x03	; 3
   13450:	e8 9f       	mul	r30, r24
   13452:	f0 01       	movw	r30, r0
   13454:	11 24       	eor	r1, r1
   13456:	8f ef       	ldi	r24, 0xFF	; 255
   13458:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   1345a:	33 c0       	rjmp	.+102    	; 0x134c2 <gpib_tests+0x560>
   1345c:	6c eb       	ldi	r22, 0xBC	; 188
   1345e:	7d e0       	ldi	r23, 0x0D	; 13
   13460:	8e 81       	ldd	r24, Y+6	; 0x06
   13462:	9f 81       	ldd	r25, Y+7	; 0x07
   13464:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13468:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   1346a:	91 f1       	breq	.+100    	; 0x134d0 <gpib_tests+0x56e>
   1346c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1346e:	9b 85       	ldd	r25, Y+11	; 0x0b
   13470:	0e 94 52 32 	call	0x64a4	; 0x64a4 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13474:	16 2f       	mov	r17, r22
   13476:	6d ea       	ldi	r22, 0xAD	; 173
   13478:	73 e1       	ldi	r23, 0x13	; 19
   1347a:	88 85       	ldd	r24, Y+8	; 0x08
   1347c:	99 85       	ldd	r25, Y+9	; 0x09
   1347e:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13482:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   13484:	11 f0       	breq	.+4      	; 0x1348a <gpib_tests+0x528>
   13486:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13488:	1d c0       	rjmp	.+58     	; 0x134c4 <gpib_tests+0x562>
   1348a:	6a eb       	ldi	r22, 0xBA	; 186
   1348c:	7d e0       	ldi	r23, 0x0D	; 13
   1348e:	88 85       	ldd	r24, Y+8	; 0x08
   13490:	99 85       	ldd	r25, Y+9	; 0x09
   13492:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13496:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   13498:	11 f0       	breq	.+4      	; 0x1349e <gpib_tests+0x53c>
   1349a:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1349c:	13 c0       	rjmp	.+38     	; 0x134c4 <gpib_tests+0x562>
   1349e:	63 ee       	ldi	r22, 0xE3	; 227
   134a0:	7c e0       	ldi	r23, 0x0C	; 12
   134a2:	88 85       	ldd	r24, Y+8	; 0x08
   134a4:	99 85       	ldd	r25, Y+9	; 0x09
   134a6:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   134aa:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   134ac:	11 f0       	breq	.+4      	; 0x134b2 <gpib_tests+0x550>
   134ae:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   134b0:	09 c0       	rjmp	.+18     	; 0x134c4 <gpib_tests+0x562>
   134b2:	60 e4       	ldi	r22, 0x40	; 64
   134b4:	77 e0       	ldi	r23, 0x07	; 7
   134b6:	88 85       	ldd	r24, Y+8	; 0x08
   134b8:	99 85       	ldd	r25, Y+9	; 0x09
   134ba:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   134be:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   134c0:	39 f0       	breq	.+14     	; 0x134d0 <gpib_tests+0x56e>
   134c2:	eb b1       	in	r30, 0x0b	; 11
   134c4:	83 e0       	ldi	r24, 0x03	; 3
   134c6:	e8 9f       	mul	r30, r24
   134c8:	f0 01       	movw	r30, r0
   134ca:	11 24       	eor	r1, r1
   134cc:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   134ce:	3b c0       	rjmp	.+118    	; 0x13546 <gpib_tests+0x5e4>
   134d0:	62 ec       	ldi	r22, 0xC2	; 194
   134d2:	7d e0       	ldi	r23, 0x0D	; 13
   134d4:	8e 81       	ldd	r24, Y+6	; 0x06
   134d6:	9f 81       	ldd	r25, Y+7	; 0x07
   134d8:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   134dc:	89 2b       	or	r24, r25
   134de:	09 f4       	brne	.+2      	; 0x134e2 <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   134e0:	4c cd       	rjmp	.-1384   	; 0x12f7a <gpib_tests+0x18>
   134e2:	8a 85       	ldd	r24, Y+10	; 0x0a
   134e4:	9b 85       	ldd	r25, Y+11	; 0x0b
   134e6:	0e 94 52 32 	call	0x64a4	; 0x64a4 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   134ea:	16 2f       	mov	r17, r22
   134ec:	6d ea       	ldi	r22, 0xAD	; 173
   134ee:	73 e1       	ldi	r23, 0x13	; 19
   134f0:	88 85       	ldd	r24, Y+8	; 0x08
   134f2:	99 85       	ldd	r25, Y+9	; 0x09
   134f4:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   134f8:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   134fa:	11 f0       	breq	.+4      	; 0x13500 <gpib_tests+0x59e>
   134fc:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   134fe:	1e c0       	rjmp	.+60     	; 0x1353c <gpib_tests+0x5da>
   13500:	6a eb       	ldi	r22, 0xBA	; 186
   13502:	7d e0       	ldi	r23, 0x0D	; 13
   13504:	88 85       	ldd	r24, Y+8	; 0x08
   13506:	99 85       	ldd	r25, Y+9	; 0x09
   13508:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   1350c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   1350e:	11 f0       	breq	.+4      	; 0x13514 <gpib_tests+0x5b2>
   13510:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13512:	14 c0       	rjmp	.+40     	; 0x1353c <gpib_tests+0x5da>
   13514:	63 ee       	ldi	r22, 0xE3	; 227
   13516:	7c e0       	ldi	r23, 0x0C	; 12
   13518:	88 85       	ldd	r24, Y+8	; 0x08
   1351a:	99 85       	ldd	r25, Y+9	; 0x09
   1351c:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13520:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   13522:	11 f0       	breq	.+4      	; 0x13528 <gpib_tests+0x5c6>
   13524:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13526:	0a c0       	rjmp	.+20     	; 0x1353c <gpib_tests+0x5da>
   13528:	60 e4       	ldi	r22, 0x40	; 64
   1352a:	77 e0       	ldi	r23, 0x07	; 7
   1352c:	88 85       	ldd	r24, Y+8	; 0x08
   1352e:	99 85       	ldd	r25, Y+9	; 0x09
   13530:	0e 94 9c 31 	call	0x6338	; 0x6338 <MATCHI>
   13534:	89 2b       	or	r24, r25
   13536:	09 f4       	brne	.+2      	; 0x1353a <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   13538:	20 cd       	rjmp	.-1472   	; 0x12f7a <gpib_tests+0x18>
   1353a:	eb b1       	in	r30, 0x0b	; 11
   1353c:	83 e0       	ldi	r24, 0x03	; 3
   1353e:	e8 9f       	mul	r30, r24
   13540:	f0 01       	movw	r30, r0
   13542:	11 24       	eor	r1, r1
					return (1);
   13544:	11 a3       	std	Z+33, r17	; 0x21
   13546:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   13548:	90 e0       	ldi	r25, 0x00	; 0
   1354a:	cd b7       	in	r28, 0x3d	; 61
   1354c:	de b7       	in	r29, 0x3e	; 62
   1354e:	e6 e0       	ldi	r30, 0x06	; 6
   13550:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00013554 <SS80ControllerPack>:
   13554:	0f 93       	push	r16
   13556:	1f 93       	push	r17
   13558:	25 e0       	ldi	r18, 0x05	; 5
   1355a:	30 e0       	ldi	r19, 0x00	; 0
   1355c:	fc 01       	movw	r30, r24
   1355e:	31 83       	std	Z+1, r19	; 0x01
   13560:	20 83       	st	Z, r18
   13562:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13566:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1356a:	05 a1       	ldd	r16, Z+37	; 0x25
   1356c:	16 a1       	ldd	r17, Z+38	; 0x26
   1356e:	20 e0       	ldi	r18, 0x00	; 0
   13570:	30 e0       	ldi	r19, 0x00	; 0
   13572:	42 e0       	ldi	r20, 0x02	; 2
   13574:	50 e0       	ldi	r21, 0x00	; 0
   13576:	60 e0       	ldi	r22, 0x00	; 0
   13578:	70 e0       	ldi	r23, 0x00	; 0
   1357a:	82 e4       	ldi	r24, 0x42	; 66
   1357c:	99 e1       	ldi	r25, 0x19	; 25
   1357e:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   13582:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13586:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1358a:	07 a1       	ldd	r16, Z+39	; 0x27
   1358c:	10 a5       	ldd	r17, Z+40	; 0x28
   1358e:	20 e0       	ldi	r18, 0x00	; 0
   13590:	30 e0       	ldi	r19, 0x00	; 0
   13592:	42 e0       	ldi	r20, 0x02	; 2
   13594:	50 e0       	ldi	r21, 0x00	; 0
   13596:	61 e0       	ldi	r22, 0x01	; 1
   13598:	70 e0       	ldi	r23, 0x00	; 0
   1359a:	82 e4       	ldi	r24, 0x42	; 66
   1359c:	99 e1       	ldi	r25, 0x19	; 25
   1359e:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   135a2:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   135a6:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   135aa:	01 a5       	ldd	r16, Z+41	; 0x29
   135ac:	10 e0       	ldi	r17, 0x00	; 0
   135ae:	20 e0       	ldi	r18, 0x00	; 0
   135b0:	30 e0       	ldi	r19, 0x00	; 0
   135b2:	41 e0       	ldi	r20, 0x01	; 1
   135b4:	50 e0       	ldi	r21, 0x00	; 0
   135b6:	64 e0       	ldi	r22, 0x04	; 4
   135b8:	70 e0       	ldi	r23, 0x00	; 0
   135ba:	82 e4       	ldi	r24, 0x42	; 66
   135bc:	99 e1       	ldi	r25, 0x19	; 25
   135be:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   135c2:	82 e4       	ldi	r24, 0x42	; 66
   135c4:	99 e1       	ldi	r25, 0x19	; 25
   135c6:	1f 91       	pop	r17
   135c8:	0f 91       	pop	r16
   135ca:	08 95       	ret

000135cc <SS80UnitPack>:
   135cc:	0f 93       	push	r16
   135ce:	1f 93       	push	r17
   135d0:	23 e1       	ldi	r18, 0x13	; 19
   135d2:	30 e0       	ldi	r19, 0x00	; 0
   135d4:	fc 01       	movw	r30, r24
   135d6:	31 83       	std	Z+1, r19	; 0x01
   135d8:	20 83       	st	Z, r18
   135da:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   135de:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   135e2:	02 a5       	ldd	r16, Z+42	; 0x2a
   135e4:	10 e0       	ldi	r17, 0x00	; 0
   135e6:	20 e0       	ldi	r18, 0x00	; 0
   135e8:	30 e0       	ldi	r19, 0x00	; 0
   135ea:	41 e0       	ldi	r20, 0x01	; 1
   135ec:	50 e0       	ldi	r21, 0x00	; 0
   135ee:	60 e0       	ldi	r22, 0x00	; 0
   135f0:	70 e0       	ldi	r23, 0x00	; 0
   135f2:	8f e2       	ldi	r24, 0x2F	; 47
   135f4:	99 e1       	ldi	r25, 0x19	; 25
   135f6:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   135fa:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   135fe:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13602:	03 a5       	ldd	r16, Z+43	; 0x2b
   13604:	14 a5       	ldd	r17, Z+44	; 0x2c
   13606:	25 a5       	ldd	r18, Z+45	; 0x2d
   13608:	36 a5       	ldd	r19, Z+46	; 0x2e
   1360a:	43 e0       	ldi	r20, 0x03	; 3
   1360c:	50 e0       	ldi	r21, 0x00	; 0
   1360e:	61 e0       	ldi	r22, 0x01	; 1
   13610:	70 e0       	ldi	r23, 0x00	; 0
   13612:	8f e2       	ldi	r24, 0x2F	; 47
   13614:	99 e1       	ldi	r25, 0x19	; 25
   13616:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1361a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1361e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13622:	07 a5       	ldd	r16, Z+47	; 0x2f
   13624:	10 a9       	ldd	r17, Z+48	; 0x30
   13626:	20 e0       	ldi	r18, 0x00	; 0
   13628:	30 e0       	ldi	r19, 0x00	; 0
   1362a:	42 e0       	ldi	r20, 0x02	; 2
   1362c:	50 e0       	ldi	r21, 0x00	; 0
   1362e:	64 e0       	ldi	r22, 0x04	; 4
   13630:	70 e0       	ldi	r23, 0x00	; 0
   13632:	8f e2       	ldi	r24, 0x2F	; 47
   13634:	99 e1       	ldi	r25, 0x19	; 25
   13636:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1363a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1363e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13642:	01 a9       	ldd	r16, Z+49	; 0x31
   13644:	10 e0       	ldi	r17, 0x00	; 0
   13646:	20 e0       	ldi	r18, 0x00	; 0
   13648:	30 e0       	ldi	r19, 0x00	; 0
   1364a:	41 e0       	ldi	r20, 0x01	; 1
   1364c:	50 e0       	ldi	r21, 0x00	; 0
   1364e:	66 e0       	ldi	r22, 0x06	; 6
   13650:	70 e0       	ldi	r23, 0x00	; 0
   13652:	8f e2       	ldi	r24, 0x2F	; 47
   13654:	99 e1       	ldi	r25, 0x19	; 25
   13656:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1365a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1365e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13662:	02 a9       	ldd	r16, Z+50	; 0x32
   13664:	10 e0       	ldi	r17, 0x00	; 0
   13666:	20 e0       	ldi	r18, 0x00	; 0
   13668:	30 e0       	ldi	r19, 0x00	; 0
   1366a:	41 e0       	ldi	r20, 0x01	; 1
   1366c:	50 e0       	ldi	r21, 0x00	; 0
   1366e:	67 e0       	ldi	r22, 0x07	; 7
   13670:	70 e0       	ldi	r23, 0x00	; 0
   13672:	8f e2       	ldi	r24, 0x2F	; 47
   13674:	99 e1       	ldi	r25, 0x19	; 25
   13676:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1367a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1367e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13682:	03 a9       	ldd	r16, Z+51	; 0x33
   13684:	14 a9       	ldd	r17, Z+52	; 0x34
   13686:	20 e0       	ldi	r18, 0x00	; 0
   13688:	30 e0       	ldi	r19, 0x00	; 0
   1368a:	42 e0       	ldi	r20, 0x02	; 2
   1368c:	50 e0       	ldi	r21, 0x00	; 0
   1368e:	68 e0       	ldi	r22, 0x08	; 8
   13690:	70 e0       	ldi	r23, 0x00	; 0
   13692:	8f e2       	ldi	r24, 0x2F	; 47
   13694:	99 e1       	ldi	r25, 0x19	; 25
   13696:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1369a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1369e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   136a2:	05 a9       	ldd	r16, Z+53	; 0x35
   136a4:	16 a9       	ldd	r17, Z+54	; 0x36
   136a6:	20 e0       	ldi	r18, 0x00	; 0
   136a8:	30 e0       	ldi	r19, 0x00	; 0
   136aa:	42 e0       	ldi	r20, 0x02	; 2
   136ac:	50 e0       	ldi	r21, 0x00	; 0
   136ae:	6a e0       	ldi	r22, 0x0A	; 10
   136b0:	70 e0       	ldi	r23, 0x00	; 0
   136b2:	8f e2       	ldi	r24, 0x2F	; 47
   136b4:	99 e1       	ldi	r25, 0x19	; 25
   136b6:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   136ba:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   136be:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   136c2:	07 a9       	ldd	r16, Z+55	; 0x37
   136c4:	10 ad       	ldd	r17, Z+56	; 0x38
   136c6:	20 e0       	ldi	r18, 0x00	; 0
   136c8:	30 e0       	ldi	r19, 0x00	; 0
   136ca:	42 e0       	ldi	r20, 0x02	; 2
   136cc:	50 e0       	ldi	r21, 0x00	; 0
   136ce:	6c e0       	ldi	r22, 0x0C	; 12
   136d0:	70 e0       	ldi	r23, 0x00	; 0
   136d2:	8f e2       	ldi	r24, 0x2F	; 47
   136d4:	99 e1       	ldi	r25, 0x19	; 25
   136d6:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   136da:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   136de:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   136e2:	01 ad       	ldd	r16, Z+57	; 0x39
   136e4:	12 ad       	ldd	r17, Z+58	; 0x3a
   136e6:	20 e0       	ldi	r18, 0x00	; 0
   136e8:	30 e0       	ldi	r19, 0x00	; 0
   136ea:	42 e0       	ldi	r20, 0x02	; 2
   136ec:	50 e0       	ldi	r21, 0x00	; 0
   136ee:	6e e0       	ldi	r22, 0x0E	; 14
   136f0:	70 e0       	ldi	r23, 0x00	; 0
   136f2:	8f e2       	ldi	r24, 0x2F	; 47
   136f4:	99 e1       	ldi	r25, 0x19	; 25
   136f6:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   136fa:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   136fe:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13702:	03 ad       	ldd	r16, Z+59	; 0x3b
   13704:	10 e0       	ldi	r17, 0x00	; 0
   13706:	20 e0       	ldi	r18, 0x00	; 0
   13708:	30 e0       	ldi	r19, 0x00	; 0
   1370a:	41 e0       	ldi	r20, 0x01	; 1
   1370c:	50 e0       	ldi	r21, 0x00	; 0
   1370e:	60 e1       	ldi	r22, 0x10	; 16
   13710:	70 e0       	ldi	r23, 0x00	; 0
   13712:	8f e2       	ldi	r24, 0x2F	; 47
   13714:	99 e1       	ldi	r25, 0x19	; 25
   13716:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1371a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1371e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13722:	04 ad       	ldd	r16, Z+60	; 0x3c
   13724:	10 e0       	ldi	r17, 0x00	; 0
   13726:	20 e0       	ldi	r18, 0x00	; 0
   13728:	30 e0       	ldi	r19, 0x00	; 0
   1372a:	41 e0       	ldi	r20, 0x01	; 1
   1372c:	50 e0       	ldi	r21, 0x00	; 0
   1372e:	61 e1       	ldi	r22, 0x11	; 17
   13730:	70 e0       	ldi	r23, 0x00	; 0
   13732:	8f e2       	ldi	r24, 0x2F	; 47
   13734:	99 e1       	ldi	r25, 0x19	; 25
   13736:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1373a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1373e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13742:	05 ad       	ldd	r16, Z+61	; 0x3d
   13744:	10 e0       	ldi	r17, 0x00	; 0
   13746:	20 e0       	ldi	r18, 0x00	; 0
   13748:	30 e0       	ldi	r19, 0x00	; 0
   1374a:	41 e0       	ldi	r20, 0x01	; 1
   1374c:	50 e0       	ldi	r21, 0x00	; 0
   1374e:	62 e1       	ldi	r22, 0x12	; 18
   13750:	70 e0       	ldi	r23, 0x00	; 0
   13752:	8f e2       	ldi	r24, 0x2F	; 47
   13754:	99 e1       	ldi	r25, 0x19	; 25
   13756:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1375a:	8f e2       	ldi	r24, 0x2F	; 47
   1375c:	99 e1       	ldi	r25, 0x19	; 25
   1375e:	1f 91       	pop	r17
   13760:	0f 91       	pop	r16
   13762:	08 95       	ret

00013764 <SS80VolumePack>:
   13764:	0f 93       	push	r16
   13766:	1f 93       	push	r17
   13768:	2d e0       	ldi	r18, 0x0D	; 13
   1376a:	30 e0       	ldi	r19, 0x00	; 0
   1376c:	fc 01       	movw	r30, r24
   1376e:	31 83       	std	Z+1, r19	; 0x01
   13770:	20 83       	st	Z, r18
   13772:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13776:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1377a:	fe 96       	adiw	r30, 0x3e	; 62
   1377c:	00 81       	ld	r16, Z
   1377e:	11 81       	ldd	r17, Z+1	; 0x01
   13780:	22 81       	ldd	r18, Z+2	; 0x02
   13782:	33 81       	ldd	r19, Z+3	; 0x03
   13784:	43 e0       	ldi	r20, 0x03	; 3
   13786:	50 e0       	ldi	r21, 0x00	; 0
   13788:	60 e0       	ldi	r22, 0x00	; 0
   1378a:	70 e0       	ldi	r23, 0x00	; 0
   1378c:	82 e2       	ldi	r24, 0x22	; 34
   1378e:	99 e1       	ldi	r25, 0x19	; 25
   13790:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   13794:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13798:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1379c:	ee 5b       	subi	r30, 0xBE	; 190
   1379e:	ff 4f       	sbci	r31, 0xFF	; 255
   137a0:	00 81       	ld	r16, Z
   137a2:	10 e0       	ldi	r17, 0x00	; 0
   137a4:	20 e0       	ldi	r18, 0x00	; 0
   137a6:	30 e0       	ldi	r19, 0x00	; 0
   137a8:	41 e0       	ldi	r20, 0x01	; 1
   137aa:	50 e0       	ldi	r21, 0x00	; 0
   137ac:	63 e0       	ldi	r22, 0x03	; 3
   137ae:	70 e0       	ldi	r23, 0x00	; 0
   137b0:	82 e2       	ldi	r24, 0x22	; 34
   137b2:	99 e1       	ldi	r25, 0x19	; 25
   137b4:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   137b8:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   137bc:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   137c0:	ed 5b       	subi	r30, 0xBD	; 189
   137c2:	ff 4f       	sbci	r31, 0xFF	; 255
   137c4:	00 81       	ld	r16, Z
   137c6:	11 81       	ldd	r17, Z+1	; 0x01
   137c8:	20 e0       	ldi	r18, 0x00	; 0
   137ca:	30 e0       	ldi	r19, 0x00	; 0
   137cc:	42 e0       	ldi	r20, 0x02	; 2
   137ce:	50 e0       	ldi	r21, 0x00	; 0
   137d0:	64 e0       	ldi	r22, 0x04	; 4
   137d2:	70 e0       	ldi	r23, 0x00	; 0
   137d4:	82 e2       	ldi	r24, 0x22	; 34
   137d6:	99 e1       	ldi	r25, 0x19	; 25
   137d8:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   137dc:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   137e0:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   137e4:	eb 5b       	subi	r30, 0xBB	; 187
   137e6:	ff 4f       	sbci	r31, 0xFF	; 255
   137e8:	00 81       	ld	r16, Z
   137ea:	11 81       	ldd	r17, Z+1	; 0x01
   137ec:	22 81       	ldd	r18, Z+2	; 0x02
   137ee:	33 81       	ldd	r19, Z+3	; 0x03
   137f0:	46 e0       	ldi	r20, 0x06	; 6
   137f2:	50 e0       	ldi	r21, 0x00	; 0
   137f4:	66 e0       	ldi	r22, 0x06	; 6
   137f6:	70 e0       	ldi	r23, 0x00	; 0
   137f8:	82 e2       	ldi	r24, 0x22	; 34
   137fa:	99 e1       	ldi	r25, 0x19	; 25
   137fc:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   13800:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13804:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13808:	e7 5b       	subi	r30, 0xB7	; 183
   1380a:	ff 4f       	sbci	r31, 0xFF	; 255
   1380c:	00 81       	ld	r16, Z
   1380e:	10 e0       	ldi	r17, 0x00	; 0
   13810:	20 e0       	ldi	r18, 0x00	; 0
   13812:	30 e0       	ldi	r19, 0x00	; 0
   13814:	41 e0       	ldi	r20, 0x01	; 1
   13816:	50 e0       	ldi	r21, 0x00	; 0
   13818:	6c e0       	ldi	r22, 0x0C	; 12
   1381a:	70 e0       	ldi	r23, 0x00	; 0
   1381c:	82 e2       	ldi	r24, 0x22	; 34
   1381e:	99 e1       	ldi	r25, 0x19	; 25
   13820:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   13824:	82 e2       	ldi	r24, 0x22	; 34
   13826:	99 e1       	ldi	r25, 0x19	; 25
   13828:	1f 91       	pop	r17
   1382a:	0f 91       	pop	r16
   1382c:	08 95       	ret

0001382e <SS80_test_extended_status>:
   1382e:	9b 01       	movw	r18, r22
   13830:	43 e0       	ldi	r20, 0x03	; 3
   13832:	35 95       	asr	r19
   13834:	27 95       	ror	r18
   13836:	4a 95       	dec	r20
   13838:	e1 f7       	brne	.-8      	; 0x13832 <SS80_test_extended_status+0x4>
   1383a:	82 0f       	add	r24, r18
   1383c:	93 1f       	adc	r25, r19
   1383e:	67 70       	andi	r22, 0x07	; 7
   13840:	77 27       	eor	r23, r23
   13842:	20 e8       	ldi	r18, 0x80	; 128
   13844:	30 e0       	ldi	r19, 0x00	; 0
   13846:	02 c0       	rjmp	.+4      	; 0x1384c <SS80_test_extended_status+0x1e>
   13848:	35 95       	asr	r19
   1384a:	27 95       	ror	r18
   1384c:	6a 95       	dec	r22
   1384e:	e2 f7       	brpl	.-8      	; 0x13848 <SS80_test_extended_status+0x1a>
   13850:	fc 01       	movw	r30, r24
   13852:	80 81       	ld	r24, Z
   13854:	28 23       	and	r18, r24
   13856:	81 e0       	ldi	r24, 0x01	; 1
   13858:	90 e0       	ldi	r25, 0x00	; 0
   1385a:	11 f4       	brne	.+4      	; 0x13860 <SS80_test_extended_status+0x32>
   1385c:	80 e0       	ldi	r24, 0x00	; 0
   1385e:	90 e0       	ldi	r25, 0x00	; 0
   13860:	08 95       	ret

00013862 <SS80_display_extended_status>:
   13862:	6f 92       	push	r6
   13864:	7f 92       	push	r7
   13866:	8f 92       	push	r8
   13868:	ef 92       	push	r14
   1386a:	ff 92       	push	r15
   1386c:	0f 93       	push	r16
   1386e:	1f 93       	push	r17
   13870:	cf 93       	push	r28
   13872:	df 93       	push	r29
   13874:	fc 01       	movw	r30, r24
   13876:	ac 01       	movw	r20, r24
   13878:	48 5f       	subi	r20, 0xF8	; 248
   1387a:	5f 4f       	sbci	r21, 0xFF	; 255
   1387c:	20 e0       	ldi	r18, 0x00	; 0
   1387e:	30 e0       	ldi	r19, 0x00	; 0
   13880:	a1 91       	ld	r26, Z+
   13882:	aa 23       	and	r26, r26
   13884:	11 f0       	breq	.+4      	; 0x1388a <SS80_display_extended_status+0x28>
   13886:	21 e0       	ldi	r18, 0x01	; 1
   13888:	30 e0       	ldi	r19, 0x00	; 0
   1388a:	e4 17       	cp	r30, r20
   1388c:	f5 07       	cpc	r31, r21
   1388e:	c1 f7       	brne	.-16     	; 0x13880 <SS80_display_extended_status+0x1e>
   13890:	23 2b       	or	r18, r19
   13892:	a1 f1       	breq	.+104    	; 0x138fc <SS80_display_extended_status+0x9a>
   13894:	8c 01       	movw	r16, r24
   13896:	7f 93       	push	r23
   13898:	6f 93       	push	r22
   1389a:	81 e7       	ldi	r24, 0x71	; 113
   1389c:	9e e1       	ldi	r25, 0x1E	; 30
   1389e:	1f 92       	push	r1
   138a0:	9f 93       	push	r25
   138a2:	8f 93       	push	r24
   138a4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   138a8:	c0 ec       	ldi	r28, 0xC0	; 192
   138aa:	d1 e0       	ldi	r29, 0x01	; 1
   138ac:	0f 90       	pop	r0
   138ae:	0f 90       	pop	r0
   138b0:	0f 90       	pop	r0
   138b2:	0f 90       	pop	r0
   138b4:	0f 90       	pop	r0
   138b6:	86 e6       	ldi	r24, 0x66	; 102
   138b8:	9e e1       	ldi	r25, 0x1E	; 30
   138ba:	3c 01       	movw	r6, r24
   138bc:	e8 80       	ld	r14, Y
   138be:	f9 80       	ldd	r15, Y+1	; 0x01
   138c0:	9f ef       	ldi	r25, 0xFF	; 255
   138c2:	e9 16       	cp	r14, r25
   138c4:	f9 06       	cpc	r15, r25
   138c6:	d1 f0       	breq	.+52     	; 0x138fc <SS80_display_extended_status+0x9a>
   138c8:	b7 01       	movw	r22, r14
   138ca:	c8 01       	movw	r24, r16
   138cc:	b0 df       	rcall	.-160    	; 0x1382e <SS80_test_extended_status>
   138ce:	89 2b       	or	r24, r25
   138d0:	99 f0       	breq	.+38     	; 0x138f8 <SS80_display_extended_status+0x96>
   138d2:	8b 81       	ldd	r24, Y+3	; 0x03
   138d4:	8f 93       	push	r24
   138d6:	8a 81       	ldd	r24, Y+2	; 0x02
   138d8:	8f 93       	push	r24
   138da:	ff 92       	push	r15
   138dc:	ef 92       	push	r14
   138de:	1f 92       	push	r1
   138e0:	7f 92       	push	r7
   138e2:	6f 92       	push	r6
   138e4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   138e8:	8d b7       	in	r24, 0x3d	; 61
   138ea:	9e b7       	in	r25, 0x3e	; 62
   138ec:	07 96       	adiw	r24, 0x07	; 7
   138ee:	0f b6       	in	r0, 0x3f	; 63
   138f0:	f8 94       	cli
   138f2:	9e bf       	out	0x3e, r25	; 62
   138f4:	0f be       	out	0x3f, r0	; 63
   138f6:	8d bf       	out	0x3d, r24	; 61
   138f8:	24 96       	adiw	r28, 0x04	; 4
   138fa:	e0 cf       	rjmp	.-64     	; 0x138bc <SS80_display_extended_status+0x5a>
   138fc:	df 91       	pop	r29
   138fe:	cf 91       	pop	r28
   13900:	1f 91       	pop	r17
   13902:	0f 91       	pop	r16
   13904:	ff 90       	pop	r15
   13906:	ef 90       	pop	r14
   13908:	8f 90       	pop	r8
   1390a:	7f 90       	pop	r7
   1390c:	6f 90       	pop	r6
   1390e:	08 95       	ret

00013910 <SS80_send_status>:
   13910:	a6 e1       	ldi	r26, 0x16	; 22
   13912:	b0 e0       	ldi	r27, 0x00	; 0
   13914:	ee e8       	ldi	r30, 0x8E	; 142
   13916:	fc e9       	ldi	r31, 0x9C	; 156
   13918:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
   1391c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13920:	85 ff       	sbrs	r24, 5
   13922:	0a c0       	rjmp	.+20     	; 0x13938 <SS80_send_status+0x28>
   13924:	82 e5       	ldi	r24, 0x52	; 82
   13926:	9e e1       	ldi	r25, 0x1E	; 30
   13928:	1f 92       	push	r1
   1392a:	9f 93       	push	r25
   1392c:	8f 93       	push	r24
   1392e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13932:	0f 90       	pop	r0
   13934:	0f 90       	pop	r0
   13936:	0f 90       	pop	r0
   13938:	ce 01       	movw	r24, r28
   1393a:	01 96       	adiw	r24, 0x01	; 1
   1393c:	7c 01       	movw	r14, r24
   1393e:	84 e1       	ldi	r24, 0x14	; 20
   13940:	f7 01       	movw	r30, r14
   13942:	11 92       	st	Z+, r1
   13944:	8a 95       	dec	r24
   13946:	e9 f7       	brne	.-6      	; 0x13942 <SS80_send_status+0x32>
   13948:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   1394c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13950:	86 81       	ldd	r24, Z+6	; 0x06
   13952:	20 e1       	ldi	r18, 0x10	; 16
   13954:	82 9f       	mul	r24, r18
   13956:	c0 01       	movw	r24, r0
   13958:	11 24       	eor	r1, r1
   1395a:	95 81       	ldd	r25, Z+5	; 0x05
   1395c:	9f 70       	andi	r25, 0x0F	; 15
   1395e:	89 2b       	or	r24, r25
   13960:	89 83       	std	Y+1, r24	; 0x01
   13962:	8f ef       	ldi	r24, 0xFF	; 255
   13964:	8a 83       	std	Y+2, r24	; 0x02
   13966:	83 81       	ldd	r24, Z+3	; 0x03
   13968:	86 ff       	sbrs	r24, 6
   1396a:	02 c0       	rjmp	.+4      	; 0x13970 <SS80_send_status+0x60>
   1396c:	92 e0       	ldi	r25, 0x02	; 2
   1396e:	9b 83       	std	Y+3, r25	; 0x03
   13970:	82 ff       	sbrs	r24, 2
   13972:	03 c0       	rjmp	.+6      	; 0x1397a <SS80_send_status+0x6a>
   13974:	9b 81       	ldd	r25, Y+3	; 0x03
   13976:	91 60       	ori	r25, 0x01	; 1
   13978:	9b 83       	std	Y+3, r25	; 0x03
   1397a:	80 ff       	sbrs	r24, 0
   1397c:	02 c0       	rjmp	.+4      	; 0x13982 <SS80_send_status+0x72>
   1397e:	82 e0       	ldi	r24, 0x02	; 2
   13980:	8d 83       	std	Y+5, r24	; 0x05
   13982:	83 81       	ldd	r24, Z+3	; 0x03
   13984:	81 ff       	sbrs	r24, 1
   13986:	03 c0       	rjmp	.+6      	; 0x1398e <SS80_send_status+0x7e>
   13988:	8d 81       	ldd	r24, Y+5	; 0x05
   1398a:	82 60       	ori	r24, 0x02	; 2
   1398c:	8d 83       	std	Y+5, r24	; 0x05
   1398e:	83 81       	ldd	r24, Z+3	; 0x03
   13990:	83 ff       	sbrs	r24, 3
   13992:	02 c0       	rjmp	.+4      	; 0x13998 <SS80_send_status+0x88>
   13994:	88 e0       	ldi	r24, 0x08	; 8
   13996:	8f 83       	std	Y+7, r24	; 0x07
   13998:	83 81       	ldd	r24, Z+3	; 0x03
   1399a:	94 81       	ldd	r25, Z+4	; 0x04
   1399c:	89 2b       	or	r24, r25
   1399e:	59 f4       	brne	.+22     	; 0x139b6 <SS80_send_status+0xa6>
   139a0:	07 81       	ldd	r16, Z+7	; 0x07
   139a2:	10 85       	ldd	r17, Z+8	; 0x08
   139a4:	21 85       	ldd	r18, Z+9	; 0x09
   139a6:	32 85       	ldd	r19, Z+10	; 0x0a
   139a8:	46 e0       	ldi	r20, 0x06	; 6
   139aa:	50 e0       	ldi	r21, 0x00	; 0
   139ac:	6a e0       	ldi	r22, 0x0A	; 10
   139ae:	70 e0       	ldi	r23, 0x00	; 0
   139b0:	c7 01       	movw	r24, r14
   139b2:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   139b6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   139ba:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   139be:	83 81       	ldd	r24, Z+3	; 0x03
   139c0:	94 81       	ldd	r25, Z+4	; 0x04
   139c2:	89 2b       	or	r24, r25
   139c4:	11 f0       	breq	.+4      	; 0x139ca <SS80_send_status+0xba>
   139c6:	81 e0       	ldi	r24, 0x01	; 1
   139c8:	82 83       	std	Z+2, r24	; 0x02
   139ca:	80 e0       	ldi	r24, 0x00	; 0
   139cc:	91 e0       	ldi	r25, 0x01	; 1
   139ce:	9e 8b       	std	Y+22, r25	; 0x16
   139d0:	8d 8b       	std	Y+21, r24	; 0x15
   139d2:	ae 01       	movw	r20, r28
   139d4:	4b 5e       	subi	r20, 0xEB	; 235
   139d6:	5f 4f       	sbci	r21, 0xFF	; 255
   139d8:	64 e1       	ldi	r22, 0x14	; 20
   139da:	70 e0       	ldi	r23, 0x00	; 0
   139dc:	c7 01       	movw	r24, r14
   139de:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   139e2:	44 97       	sbiw	r24, 0x14	; 20
   139e4:	71 f0       	breq	.+28     	; 0x13a02 <SS80_send_status+0xf2>
   139e6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   139ea:	80 ff       	sbrs	r24, 0
   139ec:	0a c0       	rjmp	.+20     	; 0x13a02 <SS80_send_status+0xf2>
   139ee:	87 e3       	ldi	r24, 0x37	; 55
   139f0:	9e e1       	ldi	r25, 0x1E	; 30
   139f2:	1f 92       	push	r1
   139f4:	9f 93       	push	r25
   139f6:	8f 93       	push	r24
   139f8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   139fc:	0f 90       	pop	r0
   139fe:	0f 90       	pop	r0
   13a00:	0f 90       	pop	r0
   13a02:	8d 89       	ldd	r24, Y+21	; 0x15
   13a04:	9e 89       	ldd	r25, Y+22	; 0x16
   13a06:	88 27       	eor	r24, r24
   13a08:	90 7d       	andi	r25, 0xD0	; 208
   13a0a:	66 96       	adiw	r28, 0x16	; 22
   13a0c:	e6 e0       	ldi	r30, 0x06	; 6
   13a0e:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00013a12 <SS80_describe>:
   13a12:	a4 e0       	ldi	r26, 0x04	; 4
   13a14:	b0 e0       	ldi	r27, 0x00	; 0
   13a16:	ef e0       	ldi	r30, 0x0F	; 15
   13a18:	fd e9       	ldi	r31, 0x9D	; 157
   13a1a:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   13a1e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13a22:	85 ff       	sbrs	r24, 5
   13a24:	0a c0       	rjmp	.+20     	; 0x13a3a <SS80_describe+0x28>
   13a26:	86 e2       	ldi	r24, 0x26	; 38
   13a28:	9e e1       	ldi	r25, 0x1E	; 30
   13a2a:	1f 92       	push	r1
   13a2c:	9f 93       	push	r25
   13a2e:	8f 93       	push	r24
   13a30:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13a34:	0f 90       	pop	r0
   13a36:	0f 90       	pop	r0
   13a38:	0f 90       	pop	r0
   13a3a:	1c 82       	std	Y+4, r1	; 0x04
   13a3c:	1b 82       	std	Y+3, r1	; 0x03
   13a3e:	ce 01       	movw	r24, r28
   13a40:	01 96       	adiw	r24, 0x01	; 1
   13a42:	88 dd       	rcall	.-1264   	; 0x13554 <SS80ControllerPack>
   13a44:	69 81       	ldd	r22, Y+1	; 0x01
   13a46:	7a 81       	ldd	r23, Y+2	; 0x02
   13a48:	ae 01       	movw	r20, r28
   13a4a:	4d 5f       	subi	r20, 0xFD	; 253
   13a4c:	5f 4f       	sbci	r21, 0xFF	; 255
   13a4e:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   13a52:	29 81       	ldd	r18, Y+1	; 0x01
   13a54:	3a 81       	ldd	r19, Y+2	; 0x02
   13a56:	82 17       	cp	r24, r18
   13a58:	93 07       	cpc	r25, r19
   13a5a:	39 f0       	breq	.+14     	; 0x13a6a <SS80_describe+0x58>
   13a5c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13a60:	80 ff       	sbrs	r24, 0
   13a62:	3c c0       	rjmp	.+120    	; 0x13adc <SS80_describe+0xca>
   13a64:	83 e0       	ldi	r24, 0x03	; 3
   13a66:	9e e1       	ldi	r25, 0x1E	; 30
   13a68:	31 c0       	rjmp	.+98     	; 0x13acc <SS80_describe+0xba>
   13a6a:	1c 82       	std	Y+4, r1	; 0x04
   13a6c:	1b 82       	std	Y+3, r1	; 0x03
   13a6e:	ce 01       	movw	r24, r28
   13a70:	01 96       	adiw	r24, 0x01	; 1
   13a72:	ac dd       	rcall	.-1192   	; 0x135cc <SS80UnitPack>
   13a74:	69 81       	ldd	r22, Y+1	; 0x01
   13a76:	7a 81       	ldd	r23, Y+2	; 0x02
   13a78:	ae 01       	movw	r20, r28
   13a7a:	4d 5f       	subi	r20, 0xFD	; 253
   13a7c:	5f 4f       	sbci	r21, 0xFF	; 255
   13a7e:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   13a82:	29 81       	ldd	r18, Y+1	; 0x01
   13a84:	3a 81       	ldd	r19, Y+2	; 0x02
   13a86:	82 17       	cp	r24, r18
   13a88:	93 07       	cpc	r25, r19
   13a8a:	39 f0       	breq	.+14     	; 0x13a9a <SS80_describe+0x88>
   13a8c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13a90:	80 ff       	sbrs	r24, 0
   13a92:	24 c0       	rjmp	.+72     	; 0x13adc <SS80_describe+0xca>
   13a94:	86 ee       	ldi	r24, 0xE6	; 230
   13a96:	9d e1       	ldi	r25, 0x1D	; 29
   13a98:	19 c0       	rjmp	.+50     	; 0x13acc <SS80_describe+0xba>
   13a9a:	80 e0       	ldi	r24, 0x00	; 0
   13a9c:	91 e0       	ldi	r25, 0x01	; 1
   13a9e:	9c 83       	std	Y+4, r25	; 0x04
   13aa0:	8b 83       	std	Y+3, r24	; 0x03
   13aa2:	ce 01       	movw	r24, r28
   13aa4:	01 96       	adiw	r24, 0x01	; 1
   13aa6:	5e de       	rcall	.-836    	; 0x13764 <SS80VolumePack>
   13aa8:	69 81       	ldd	r22, Y+1	; 0x01
   13aaa:	7a 81       	ldd	r23, Y+2	; 0x02
   13aac:	ae 01       	movw	r20, r28
   13aae:	4d 5f       	subi	r20, 0xFD	; 253
   13ab0:	5f 4f       	sbci	r21, 0xFF	; 255
   13ab2:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   13ab6:	29 81       	ldd	r18, Y+1	; 0x01
   13ab8:	3a 81       	ldd	r19, Y+2	; 0x02
   13aba:	82 17       	cp	r24, r18
   13abc:	93 07       	cpc	r25, r19
   13abe:	99 f0       	breq	.+38     	; 0x13ae6 <SS80_describe+0xd4>
   13ac0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13ac4:	80 ff       	sbrs	r24, 0
   13ac6:	0a c0       	rjmp	.+20     	; 0x13adc <SS80_describe+0xca>
   13ac8:	87 ec       	ldi	r24, 0xC7	; 199
   13aca:	9d e1       	ldi	r25, 0x1D	; 29
   13acc:	1f 92       	push	r1
   13ace:	9f 93       	push	r25
   13ad0:	8f 93       	push	r24
   13ad2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13ad6:	0f 90       	pop	r0
   13ad8:	0f 90       	pop	r0
   13ada:	0f 90       	pop	r0
   13adc:	8b 81       	ldd	r24, Y+3	; 0x03
   13ade:	9c 81       	ldd	r25, Y+4	; 0x04
   13ae0:	88 27       	eor	r24, r24
   13ae2:	90 7d       	andi	r25, 0xD0	; 208
   13ae4:	02 c0       	rjmp	.+4      	; 0x13aea <SS80_describe+0xd8>
   13ae6:	80 e0       	ldi	r24, 0x00	; 0
   13ae8:	90 e0       	ldi	r25, 0x00	; 0
   13aea:	24 96       	adiw	r28, 0x04	; 4
   13aec:	e2 e0       	ldi	r30, 0x02	; 2
   13aee:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00013af2 <SS80_Check_Unit>:
   13af2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13af6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13afa:	88 23       	and	r24, r24
   13afc:	d1 f0       	breq	.+52     	; 0x13b32 <SS80_Check_Unit+0x40>
   13afe:	8f 30       	cpi	r24, 0x0F	; 15
   13b00:	c1 f0       	breq	.+48     	; 0x13b32 <SS80_Check_Unit+0x40>
   13b02:	23 81       	ldd	r18, Z+3	; 0x03
   13b04:	34 81       	ldd	r19, Z+4	; 0x04
   13b06:	20 64       	ori	r18, 0x40	; 64
   13b08:	34 83       	std	Z+4, r19	; 0x04
   13b0a:	23 83       	std	Z+3, r18	; 0x03
   13b0c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <debuglevel>
   13b10:	90 ff       	sbrs	r25, 0
   13b12:	10 c0       	rjmp	.+32     	; 0x13b34 <SS80_Check_Unit+0x42>
   13b14:	1f 92       	push	r1
   13b16:	8f 93       	push	r24
   13b18:	8f ea       	ldi	r24, 0xAF	; 175
   13b1a:	9d e1       	ldi	r25, 0x1D	; 29
   13b1c:	1f 92       	push	r1
   13b1e:	9f 93       	push	r25
   13b20:	8f 93       	push	r24
   13b22:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13b26:	0f 90       	pop	r0
   13b28:	0f 90       	pop	r0
   13b2a:	0f 90       	pop	r0
   13b2c:	0f 90       	pop	r0
   13b2e:	0f 90       	pop	r0
   13b30:	08 95       	ret
   13b32:	85 83       	std	Z+5, r24	; 0x05
   13b34:	08 95       	ret

00013b36 <SS80_Check_Volume>:
   13b36:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13b3a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13b3e:	88 23       	and	r24, r24
   13b40:	c1 f0       	breq	.+48     	; 0x13b72 <SS80_Check_Volume+0x3c>
   13b42:	23 81       	ldd	r18, Z+3	; 0x03
   13b44:	34 81       	ldd	r19, Z+4	; 0x04
   13b46:	20 64       	ori	r18, 0x40	; 64
   13b48:	34 83       	std	Z+4, r19	; 0x04
   13b4a:	23 83       	std	Z+3, r18	; 0x03
   13b4c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <debuglevel>
   13b50:	90 ff       	sbrs	r25, 0
   13b52:	10 c0       	rjmp	.+32     	; 0x13b74 <SS80_Check_Volume+0x3e>
   13b54:	1f 92       	push	r1
   13b56:	8f 93       	push	r24
   13b58:	85 e9       	ldi	r24, 0x95	; 149
   13b5a:	9d e1       	ldi	r25, 0x1D	; 29
   13b5c:	1f 92       	push	r1
   13b5e:	9f 93       	push	r25
   13b60:	8f 93       	push	r24
   13b62:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13b66:	0f 90       	pop	r0
   13b68:	0f 90       	pop	r0
   13b6a:	0f 90       	pop	r0
   13b6c:	0f 90       	pop	r0
   13b6e:	0f 90       	pop	r0
   13b70:	08 95       	ret
   13b72:	16 82       	std	Z+6, r1	; 0x06
   13b74:	08 95       	ret

00013b76 <SS80_Command_State>:
   13b76:	2f 92       	push	r2
   13b78:	3f 92       	push	r3
   13b7a:	4f 92       	push	r4
   13b7c:	6f 92       	push	r6
   13b7e:	7f 92       	push	r7
   13b80:	8f 92       	push	r8
   13b82:	af 92       	push	r10
   13b84:	bf 92       	push	r11
   13b86:	cf 92       	push	r12
   13b88:	df 92       	push	r13
   13b8a:	ef 92       	push	r14
   13b8c:	ff 92       	push	r15
   13b8e:	0f 93       	push	r16
   13b90:	1f 93       	push	r17
   13b92:	cf 93       	push	r28
   13b94:	df 93       	push	r29
   13b96:	cd b7       	in	r28, 0x3d	; 61
   13b98:	de b7       	in	r29, 0x3e	; 62
   13b9a:	60 97       	sbiw	r28, 0x10	; 16
   13b9c:	0f b6       	in	r0, 0x3f	; 63
   13b9e:	f8 94       	cli
   13ba0:	de bf       	out	0x3e, r29	; 62
   13ba2:	0f be       	out	0x3f, r0	; 63
   13ba4:	cd bf       	out	0x3d, r28	; 61
   13ba6:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   13baa:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   13bae:	81 81       	ldd	r24, Z+1	; 0x01
   13bb0:	90 e0       	ldi	r25, 0x00	; 0
   13bb2:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   13bb6:	80 e0       	ldi	r24, 0x00	; 0
   13bb8:	91 e0       	ldi	r25, 0x01	; 1
   13bba:	9a 83       	std	Y+2, r25	; 0x02
   13bbc:	89 83       	std	Y+1, r24	; 0x01
   13bbe:	ae 01       	movw	r20, r28
   13bc0:	4f 5f       	subi	r20, 0xFF	; 255
   13bc2:	5f 4f       	sbci	r21, 0xFF	; 255
   13bc4:	60 e0       	ldi	r22, 0x00	; 0
   13bc6:	72 e0       	ldi	r23, 0x02	; 2
   13bc8:	85 ea       	ldi	r24, 0xA5	; 165
   13bca:	9c e1       	ldi	r25, 0x1C	; 28
   13bcc:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   13bd0:	6c 01       	movw	r12, r24
   13bd2:	89 81       	ldd	r24, Y+1	; 0x01
   13bd4:	9a 81       	ldd	r25, Y+2	; 0x02
   13bd6:	9c 01       	movw	r18, r24
   13bd8:	22 27       	eor	r18, r18
   13bda:	30 7d       	andi	r19, 0xD0	; 208
   13bdc:	23 2b       	or	r18, r19
   13bde:	79 f0       	breq	.+30     	; 0x13bfe <SS80_Command_State+0x88>
   13be0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13be4:	80 ff       	sbrs	r24, 0
   13be6:	21 c2       	rjmp	.+1090   	; 0x1402a <SS80_Command_State+0x4b4>
   13be8:	8f e6       	ldi	r24, 0x6F	; 111
   13bea:	9d e1       	ldi	r25, 0x1D	; 29
   13bec:	1f 92       	push	r1
   13bee:	9f 93       	push	r25
   13bf0:	8f 93       	push	r24
   13bf2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13bf6:	0f 90       	pop	r0
   13bf8:	0f 90       	pop	r0
   13bfa:	0f 90       	pop	r0
   13bfc:	16 c2       	rjmp	.+1068   	; 0x1402a <SS80_Command_State+0x4b4>
   13bfe:	c1 14       	cp	r12, r1
   13c00:	d1 04       	cpc	r13, r1
   13c02:	09 f4       	brne	.+2      	; 0x13c06 <SS80_Command_State+0x90>
   13c04:	17 c2       	rjmp	.+1070   	; 0x14034 <SS80_Command_State+0x4be>
   13c06:	90 fd       	sbrc	r25, 0
   13c08:	0e c0       	rjmp	.+28     	; 0x13c26 <SS80_Command_State+0xb0>
   13c0a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13c0e:	80 ff       	sbrs	r24, 0
   13c10:	0a c0       	rjmp	.+20     	; 0x13c26 <SS80_Command_State+0xb0>
   13c12:	86 e5       	ldi	r24, 0x56	; 86
   13c14:	9d e1       	ldi	r25, 0x1D	; 29
   13c16:	1f 92       	push	r1
   13c18:	9f 93       	push	r25
   13c1a:	8f 93       	push	r24
   13c1c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13c20:	0f 90       	pop	r0
   13c22:	0f 90       	pop	r0
   13c24:	0f 90       	pop	r0
   13c26:	e1 2c       	mov	r14, r1
   13c28:	f1 2c       	mov	r15, r1
   13c2a:	8a e5       	ldi	r24, 0x5A	; 90
   13c2c:	9c e1       	ldi	r25, 0x1C	; 28
   13c2e:	9c 01       	movw	r18, r24
   13c30:	40 e0       	ldi	r20, 0x00	; 0
   13c32:	2d 83       	std	Y+5, r18	; 0x05
   13c34:	3e 83       	std	Y+6, r19	; 0x06
   13c36:	4f 83       	std	Y+7, r20	; 0x07
   13c38:	8f e7       	ldi	r24, 0x7F	; 127
   13c3a:	9c e1       	ldi	r25, 0x1C	; 28
   13c3c:	9c 01       	movw	r18, r24
   13c3e:	40 e0       	ldi	r20, 0x00	; 0
   13c40:	28 87       	std	Y+8, r18	; 0x08
   13c42:	39 87       	std	Y+9, r19	; 0x09
   13c44:	4a 87       	std	Y+10, r20	; 0x0a
   13c46:	89 e9       	ldi	r24, 0x99	; 153
   13c48:	9c e1       	ldi	r25, 0x1C	; 28
   13c4a:	9c 01       	movw	r18, r24
   13c4c:	40 e0       	ldi	r20, 0x00	; 0
   13c4e:	2b 87       	std	Y+11, r18	; 0x0b
   13c50:	3c 87       	std	Y+12, r19	; 0x0c
   13c52:	4d 87       	std	Y+13, r20	; 0x0d
   13c54:	8f ea       	ldi	r24, 0xAF	; 175
   13c56:	9c e1       	ldi	r25, 0x1C	; 28
   13c58:	3c 01       	movw	r6, r24
   13c5a:	8d eb       	ldi	r24, 0xBD	; 189
   13c5c:	9c e1       	ldi	r25, 0x1C	; 28
   13c5e:	9c 01       	movw	r18, r24
   13c60:	40 e0       	ldi	r20, 0x00	; 0
   13c62:	2e 87       	std	Y+14, r18	; 0x0e
   13c64:	3f 87       	std	Y+15, r19	; 0x0f
   13c66:	48 8b       	std	Y+16, r20	; 0x10
   13c68:	89 ed       	ldi	r24, 0xD9	; 217
   13c6a:	9c e1       	ldi	r25, 0x1C	; 28
   13c6c:	1c 01       	movw	r2, r24
   13c6e:	87 e2       	ldi	r24, 0x27	; 39
   13c70:	a8 2e       	mov	r10, r24
   13c72:	8d e1       	ldi	r24, 0x1D	; 29
   13c74:	b8 2e       	mov	r11, r24
   13c76:	87 01       	movw	r16, r14
   13c78:	ec 14       	cp	r14, r12
   13c7a:	fd 04       	cpc	r15, r13
   13c7c:	0c f0       	brlt	.+2      	; 0x13c80 <SS80_Command_State+0x10a>
   13c7e:	b6 c1       	rjmp	.+876    	; 0x13fec <SS80_Command_State+0x476>
   13c80:	0f 5f       	subi	r16, 0xFF	; 255
   13c82:	1f 4f       	sbci	r17, 0xFF	; 255
   13c84:	f7 01       	movw	r30, r14
   13c86:	eb 55       	subi	r30, 0x5B	; 91
   13c88:	f3 4e       	sbci	r31, 0xE3	; 227
   13c8a:	80 81       	ld	r24, Z
   13c8c:	28 2f       	mov	r18, r24
   13c8e:	30 e0       	ldi	r19, 0x00	; 0
   13c90:	a9 01       	movw	r20, r18
   13c92:	40 52       	subi	r20, 0x20	; 32
   13c94:	51 09       	sbc	r21, r1
   13c96:	40 31       	cpi	r20, 0x10	; 16
   13c98:	51 05       	cpc	r21, r1
   13c9a:	80 f4       	brcc	.+32     	; 0x13cbc <SS80_Command_State+0x146>
   13c9c:	80 52       	subi	r24, 0x20	; 32
   13c9e:	29 df       	rcall	.-430    	; 0x13af2 <SS80_Check_Unit>
   13ca0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13ca4:	85 ff       	sbrs	r24, 5
   13ca6:	a0 c1       	rjmp	.+832    	; 0x13fe8 <SS80_Command_State+0x472>
   13ca8:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13cac:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13cb0:	85 81       	ldd	r24, Z+5	; 0x05
   13cb2:	1f 92       	push	r1
   13cb4:	8f 93       	push	r24
   13cb6:	80 e4       	ldi	r24, 0x40	; 64
   13cb8:	9d e1       	ldi	r25, 0x1D	; 29
   13cba:	14 c0       	rjmp	.+40     	; 0x13ce4 <SS80_Command_State+0x16e>
   13cbc:	a9 01       	movw	r20, r18
   13cbe:	40 54       	subi	r20, 0x40	; 64
   13cc0:	51 09       	sbc	r21, r1
   13cc2:	40 31       	cpi	r20, 0x10	; 16
   13cc4:	51 05       	cpc	r21, r1
   13cc6:	c8 f4       	brcc	.+50     	; 0x13cfa <SS80_Command_State+0x184>
   13cc8:	80 54       	subi	r24, 0x40	; 64
   13cca:	35 df       	rcall	.-406    	; 0x13b36 <SS80_Check_Volume>
   13ccc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13cd0:	85 ff       	sbrs	r24, 5
   13cd2:	8a c1       	rjmp	.+788    	; 0x13fe8 <SS80_Command_State+0x472>
   13cd4:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13cd8:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13cdc:	86 81       	ldd	r24, Z+6	; 0x06
   13cde:	1f 92       	push	r1
   13ce0:	8f 93       	push	r24
   13ce2:	c5 01       	movw	r24, r10
   13ce4:	1f 92       	push	r1
   13ce6:	9f 93       	push	r25
   13ce8:	8f 93       	push	r24
   13cea:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13cee:	0f 90       	pop	r0
   13cf0:	0f 90       	pop	r0
   13cf2:	0f 90       	pop	r0
   13cf4:	0f 90       	pop	r0
   13cf6:	0f 90       	pop	r0
   13cf8:	77 c1       	rjmp	.+750    	; 0x13fe8 <SS80_Command_State+0x472>
   13cfa:	21 15       	cp	r18, r1
   13cfc:	31 05       	cpc	r19, r1
   13cfe:	79 f4       	brne	.+30     	; 0x13d1e <SS80_Command_State+0x1a8>
   13d00:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13d04:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13d08:	81 e0       	ldi	r24, 0x01	; 1
   13d0a:	90 e0       	ldi	r25, 0x00	; 0
   13d0c:	91 83       	std	Z+1, r25	; 0x01
   13d0e:	80 83       	st	Z, r24
   13d10:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13d14:	85 ff       	sbrs	r24, 5
   13d16:	6a c1       	rjmp	.+724    	; 0x13fec <SS80_Command_State+0x476>
   13d18:	8f e0       	ldi	r24, 0x0F	; 15
   13d1a:	9d e1       	ldi	r25, 0x1D	; 29
   13d1c:	0f c0       	rjmp	.+30     	; 0x13d3c <SS80_Command_State+0x1c6>
   13d1e:	22 30       	cpi	r18, 0x02	; 2
   13d20:	31 05       	cpc	r19, r1
   13d22:	a9 f4       	brne	.+42     	; 0x13d4e <SS80_Command_State+0x1d8>
   13d24:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13d28:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13d2c:	31 83       	std	Z+1, r19	; 0x01
   13d2e:	20 83       	st	Z, r18
   13d30:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13d34:	85 ff       	sbrs	r24, 5
   13d36:	5a c1       	rjmp	.+692    	; 0x13fec <SS80_Command_State+0x476>
   13d38:	86 ef       	ldi	r24, 0xF6	; 246
   13d3a:	9c e1       	ldi	r25, 0x1C	; 28
   13d3c:	1f 92       	push	r1
   13d3e:	9f 93       	push	r25
   13d40:	8f 93       	push	r24
   13d42:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13d46:	0f 90       	pop	r0
   13d48:	0f 90       	pop	r0
   13d4a:	0f 90       	pop	r0
   13d4c:	4f c1       	rjmp	.+670    	; 0x13fec <SS80_Command_State+0x476>
   13d4e:	20 31       	cpi	r18, 0x10	; 16
   13d50:	31 05       	cpc	r19, r1
   13d52:	a1 f5       	brne	.+104    	; 0x13dbc <SS80_Command_State+0x246>
   13d54:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <SS80s>
   13d58:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <SS80s+0x1>
   13d5c:	9c 83       	std	Y+4, r25	; 0x04
   13d5e:	8b 83       	std	Y+3, r24	; 0x03
   13d60:	46 e0       	ldi	r20, 0x06	; 6
   13d62:	50 e0       	ldi	r21, 0x00	; 0
   13d64:	b8 01       	movw	r22, r16
   13d66:	85 ea       	ldi	r24, 0xA5	; 165
   13d68:	9c e1       	ldi	r25, 0x1C	; 28
   13d6a:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   13d6e:	eb 81       	ldd	r30, Y+3	; 0x03
   13d70:	fc 81       	ldd	r31, Y+4	; 0x04
   13d72:	67 83       	std	Z+7, r22	; 0x07
   13d74:	70 87       	std	Z+8, r23	; 0x08
   13d76:	81 87       	std	Z+9, r24	; 0x09
   13d78:	92 87       	std	Z+10, r25	; 0x0a
   13d7a:	87 01       	movw	r16, r14
   13d7c:	09 5f       	subi	r16, 0xF9	; 249
   13d7e:	1f 4f       	sbci	r17, 0xFF	; 255
   13d80:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13d84:	85 ff       	sbrs	r24, 5
   13d86:	30 c1       	rjmp	.+608    	; 0x13fe8 <SS80_Command_State+0x472>
   13d88:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13d8c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13d90:	a0 91 5c 19 	lds	r26, 0x195C	; 0x80195c <SS80p>
   13d94:	b0 91 5d 19 	lds	r27, 0x195D	; 0x80195d <SS80p+0x1>
   13d98:	9f 96       	adiw	r26, 0x2f	; 47
   13d9a:	0d 90       	ld	r0, X+
   13d9c:	bc 91       	ld	r27, X
   13d9e:	a0 2d       	mov	r26, r0
   13da0:	27 81       	ldd	r18, Z+7	; 0x07
   13da2:	30 85       	ldd	r19, Z+8	; 0x08
   13da4:	41 85       	ldd	r20, Z+9	; 0x09
   13da6:	52 85       	ldd	r21, Z+10	; 0x0a
   13da8:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
   13dac:	9f 93       	push	r25
   13dae:	8f 93       	push	r24
   13db0:	7f 93       	push	r23
   13db2:	6f 93       	push	r22
   13db4:	1f 92       	push	r1
   13db6:	3f 92       	push	r3
   13db8:	2f 92       	push	r2
   13dba:	2e c0       	rjmp	.+92     	; 0x13e18 <SS80_Command_State+0x2a2>
   13dbc:	28 31       	cpi	r18, 0x18	; 24
   13dbe:	31 05       	cpc	r19, r1
   13dc0:	99 f5       	brne	.+102    	; 0x13e28 <SS80_Command_State+0x2b2>
   13dc2:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <SS80s>
   13dc6:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <SS80s+0x1>
   13dca:	9c 83       	std	Y+4, r25	; 0x04
   13dcc:	8b 83       	std	Y+3, r24	; 0x03
   13dce:	44 e0       	ldi	r20, 0x04	; 4
   13dd0:	50 e0       	ldi	r21, 0x00	; 0
   13dd2:	b8 01       	movw	r22, r16
   13dd4:	85 ea       	ldi	r24, 0xA5	; 165
   13dd6:	9c e1       	ldi	r25, 0x1C	; 28
   13dd8:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   13ddc:	eb 81       	ldd	r30, Y+3	; 0x03
   13dde:	fc 81       	ldd	r31, Y+4	; 0x04
   13de0:	63 87       	std	Z+11, r22	; 0x0b
   13de2:	74 87       	std	Z+12, r23	; 0x0c
   13de4:	85 87       	std	Z+13, r24	; 0x0d
   13de6:	96 87       	std	Z+14, r25	; 0x0e
   13de8:	87 01       	movw	r16, r14
   13dea:	0b 5f       	subi	r16, 0xFB	; 251
   13dec:	1f 4f       	sbci	r17, 0xFF	; 255
   13dee:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13df2:	85 ff       	sbrs	r24, 5
   13df4:	f9 c0       	rjmp	.+498    	; 0x13fe8 <SS80_Command_State+0x472>
   13df6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13dfa:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13dfe:	86 85       	ldd	r24, Z+14	; 0x0e
   13e00:	8f 93       	push	r24
   13e02:	85 85       	ldd	r24, Z+13	; 0x0d
   13e04:	8f 93       	push	r24
   13e06:	84 85       	ldd	r24, Z+12	; 0x0c
   13e08:	8f 93       	push	r24
   13e0a:	83 85       	ldd	r24, Z+11	; 0x0b
   13e0c:	8f 93       	push	r24
   13e0e:	1f 92       	push	r1
   13e10:	ff 85       	ldd	r31, Y+15	; 0x0f
   13e12:	ff 93       	push	r31
   13e14:	2e 85       	ldd	r18, Y+14	; 0x0e
   13e16:	2f 93       	push	r18
   13e18:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13e1c:	0f b6       	in	r0, 0x3f	; 63
   13e1e:	f8 94       	cli
   13e20:	de bf       	out	0x3e, r29	; 62
   13e22:	0f be       	out	0x3f, r0	; 63
   13e24:	cd bf       	out	0x3d, r28	; 61
   13e26:	e0 c0       	rjmp	.+448    	; 0x13fe8 <SS80_Command_State+0x472>
   13e28:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13e2c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   13e30:	24 33       	cpi	r18, 0x34	; 52
   13e32:	31 05       	cpc	r19, r1
   13e34:	31 f4       	brne	.+12     	; 0x13e42 <SS80_Command_State+0x2cc>
   13e36:	85 ff       	sbrs	r24, 5
   13e38:	d7 c0       	rjmp	.+430    	; 0x13fe8 <SS80_Command_State+0x472>
   13e3a:	1f 92       	push	r1
   13e3c:	7f 92       	push	r7
   13e3e:	6f 92       	push	r6
   13e40:	2c c0       	rjmp	.+88     	; 0x13e9a <SS80_Command_State+0x324>
   13e42:	29 33       	cpi	r18, 0x39	; 57
   13e44:	31 05       	cpc	r19, r1
   13e46:	59 f4       	brne	.+22     	; 0x13e5e <SS80_Command_State+0x2e8>
   13e48:	87 01       	movw	r16, r14
   13e4a:	0d 5f       	subi	r16, 0xFD	; 253
   13e4c:	1f 4f       	sbci	r17, 0xFF	; 255
   13e4e:	85 ff       	sbrs	r24, 5
   13e50:	cb c0       	rjmp	.+406    	; 0x13fe8 <SS80_Command_State+0x472>
   13e52:	1f 92       	push	r1
   13e54:	9c 85       	ldd	r25, Y+12	; 0x0c
   13e56:	9f 93       	push	r25
   13e58:	eb 85       	ldd	r30, Y+11	; 0x0b
   13e5a:	ef 93       	push	r30
   13e5c:	1e c0       	rjmp	.+60     	; 0x13e9a <SS80_Command_State+0x324>
   13e5e:	2b 33       	cpi	r18, 0x3B	; 59
   13e60:	31 05       	cpc	r19, r1
   13e62:	59 f4       	brne	.+22     	; 0x13e7a <SS80_Command_State+0x304>
   13e64:	87 01       	movw	r16, r14
   13e66:	0e 5f       	subi	r16, 0xFE	; 254
   13e68:	1f 4f       	sbci	r17, 0xFF	; 255
   13e6a:	85 ff       	sbrs	r24, 5
   13e6c:	bd c0       	rjmp	.+378    	; 0x13fe8 <SS80_Command_State+0x472>
   13e6e:	1f 92       	push	r1
   13e70:	f9 85       	ldd	r31, Y+9	; 0x09
   13e72:	ff 93       	push	r31
   13e74:	28 85       	ldd	r18, Y+8	; 0x08
   13e76:	2f 93       	push	r18
   13e78:	10 c0       	rjmp	.+32     	; 0x13e9a <SS80_Command_State+0x324>
   13e7a:	28 34       	cpi	r18, 0x48	; 72
   13e7c:	31 05       	cpc	r19, r1
   13e7e:	99 f4       	brne	.+38     	; 0x13ea6 <SS80_Command_State+0x330>
   13e80:	87 01       	movw	r16, r14
   13e82:	0e 5f       	subi	r16, 0xFE	; 254
   13e84:	1f 4f       	sbci	r17, 0xFF	; 255
   13e86:	80 73       	andi	r24, 0x30	; 48
   13e88:	99 27       	eor	r25, r25
   13e8a:	89 2b       	or	r24, r25
   13e8c:	09 f4       	brne	.+2      	; 0x13e90 <SS80_Command_State+0x31a>
   13e8e:	ac c0       	rjmp	.+344    	; 0x13fe8 <SS80_Command_State+0x472>
   13e90:	1f 92       	push	r1
   13e92:	3e 81       	ldd	r19, Y+6	; 0x06
   13e94:	3f 93       	push	r19
   13e96:	4d 81       	ldd	r20, Y+5	; 0x05
   13e98:	4f 93       	push	r20
   13e9a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13e9e:	0f 90       	pop	r0
   13ea0:	0f 90       	pop	r0
   13ea2:	0f 90       	pop	r0
   13ea4:	a1 c0       	rjmp	.+322    	; 0x13fe8 <SS80_Command_State+0x472>
   13ea6:	24 30       	cpi	r18, 0x04	; 4
   13ea8:	31 05       	cpc	r19, r1
   13eaa:	41 f4       	brne	.+16     	; 0x13ebc <SS80_Command_State+0x346>
   13eac:	80 73       	andi	r24, 0x30	; 48
   13eae:	99 27       	eor	r25, r25
   13eb0:	89 2b       	or	r24, r25
   13eb2:	09 f4       	brne	.+2      	; 0x13eb6 <SS80_Command_State+0x340>
   13eb4:	9b c0       	rjmp	.+310    	; 0x13fec <SS80_Command_State+0x476>
   13eb6:	89 e3       	ldi	r24, 0x39	; 57
   13eb8:	9c e1       	ldi	r25, 0x1C	; 28
   13eba:	40 cf       	rjmp	.-384    	; 0x13d3c <SS80_Command_State+0x1c6>
   13ebc:	2e 30       	cpi	r18, 0x0E	; 14
   13ebe:	31 05       	cpc	r19, r1
   13ec0:	29 f4       	brne	.+10     	; 0x13ecc <SS80_Command_State+0x356>
   13ec2:	85 ff       	sbrs	r24, 5
   13ec4:	93 c0       	rjmp	.+294    	; 0x13fec <SS80_Command_State+0x476>
   13ec6:	83 e2       	ldi	r24, 0x23	; 35
   13ec8:	9c e1       	ldi	r25, 0x1C	; 28
   13eca:	38 cf       	rjmp	.-400    	; 0x13d3c <SS80_Command_State+0x1c6>
   13ecc:	2f 30       	cpi	r18, 0x0F	; 15
   13ece:	31 05       	cpc	r19, r1
   13ed0:	29 f4       	brne	.+10     	; 0x13edc <SS80_Command_State+0x366>
   13ed2:	85 ff       	sbrs	r24, 5
   13ed4:	8b c0       	rjmp	.+278    	; 0x13fec <SS80_Command_State+0x476>
   13ed6:	86 e0       	ldi	r24, 0x06	; 6
   13ed8:	9c e1       	ldi	r25, 0x1C	; 28
   13eda:	30 cf       	rjmp	.-416    	; 0x13d3c <SS80_Command_State+0x1c6>
   13edc:	21 33       	cpi	r18, 0x31	; 49
   13ede:	31 05       	cpc	r19, r1
   13ee0:	41 f4       	brne	.+16     	; 0x13ef2 <SS80_Command_State+0x37c>
   13ee2:	87 01       	movw	r16, r14
   13ee4:	0d 5f       	subi	r16, 0xFD	; 253
   13ee6:	1f 4f       	sbci	r17, 0xFF	; 255
   13ee8:	85 ff       	sbrs	r24, 5
   13eea:	80 c0       	rjmp	.+256    	; 0x13fec <SS80_Command_State+0x476>
   13eec:	8a ee       	ldi	r24, 0xEA	; 234
   13eee:	9b e1       	ldi	r25, 0x1B	; 27
   13ef0:	25 cf       	rjmp	.-438    	; 0x13d3c <SS80_Command_State+0x1c6>
   13ef2:	25 33       	cpi	r18, 0x35	; 53
   13ef4:	31 05       	cpc	r19, r1
   13ef6:	69 f4       	brne	.+26     	; 0x13f12 <SS80_Command_State+0x39c>
   13ef8:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13efc:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13f00:	24 e0       	ldi	r18, 0x04	; 4
   13f02:	30 e0       	ldi	r19, 0x00	; 0
   13f04:	31 83       	std	Z+1, r19	; 0x01
   13f06:	20 83       	st	Z, r18
   13f08:	85 ff       	sbrs	r24, 5
   13f0a:	70 c0       	rjmp	.+224    	; 0x13fec <SS80_Command_State+0x476>
   13f0c:	89 ed       	ldi	r24, 0xD9	; 217
   13f0e:	9b e1       	ldi	r25, 0x1B	; 27
   13f10:	15 cf       	rjmp	.-470    	; 0x13d3c <SS80_Command_State+0x1c6>
   13f12:	27 33       	cpi	r18, 0x37	; 55
   13f14:	31 05       	cpc	r19, r1
   13f16:	59 f4       	brne	.+22     	; 0x13f2e <SS80_Command_State+0x3b8>
   13f18:	87 01       	movw	r16, r14
   13f1a:	0d 5f       	subi	r16, 0xFD	; 253
   13f1c:	1f 4f       	sbci	r17, 0xFF	; 255
   13f1e:	80 73       	andi	r24, 0x30	; 48
   13f20:	99 27       	eor	r25, r25
   13f22:	89 2b       	or	r24, r25
   13f24:	09 f4       	brne	.+2      	; 0x13f28 <SS80_Command_State+0x3b2>
   13f26:	62 c0       	rjmp	.+196    	; 0x13fec <SS80_Command_State+0x476>
   13f28:	8b eb       	ldi	r24, 0xBB	; 187
   13f2a:	9b e1       	ldi	r25, 0x1B	; 27
   13f2c:	07 cf       	rjmp	.-498    	; 0x13d3c <SS80_Command_State+0x1c6>
   13f2e:	2e 33       	cpi	r18, 0x3E	; 62
   13f30:	31 05       	cpc	r19, r1
   13f32:	c1 f4       	brne	.+48     	; 0x13f64 <SS80_Command_State+0x3ee>
   13f34:	80 73       	andi	r24, 0x30	; 48
   13f36:	99 27       	eor	r25, r25
   13f38:	89 2b       	or	r24, r25
   13f3a:	81 f0       	breq	.+32     	; 0x13f5c <SS80_Command_State+0x3e6>
   13f3c:	8c e9       	ldi	r24, 0x9C	; 156
   13f3e:	9b e1       	ldi	r25, 0x1B	; 27
   13f40:	1f 92       	push	r1
   13f42:	9f 93       	push	r25
   13f44:	8f 93       	push	r24
   13f46:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13f4a:	66 ec       	ldi	r22, 0xC6	; 198
   13f4c:	7d e0       	ldi	r23, 0x0D	; 13
   13f4e:	c8 01       	movw	r24, r16
   13f50:	8b 55       	subi	r24, 0x5B	; 91
   13f52:	93 4e       	sbci	r25, 0xE3	; 227
   13f54:	86 dc       	rcall	.-1780   	; 0x13862 <SS80_display_extended_status>
   13f56:	0f 90       	pop	r0
   13f58:	0f 90       	pop	r0
   13f5a:	0f 90       	pop	r0
   13f5c:	87 01       	movw	r16, r14
   13f5e:	07 5f       	subi	r16, 0xF7	; 247
   13f60:	1f 4f       	sbci	r17, 0xFF	; 255
   13f62:	44 c0       	rjmp	.+136    	; 0x13fec <SS80_Command_State+0x476>
   13f64:	2c 34       	cpi	r18, 0x4C	; 76
   13f66:	31 05       	cpc	r19, r1
   13f68:	39 f4       	brne	.+14     	; 0x13f78 <SS80_Command_State+0x402>
   13f6a:	80 73       	andi	r24, 0x30	; 48
   13f6c:	99 27       	eor	r25, r25
   13f6e:	89 2b       	or	r24, r25
   13f70:	e9 f1       	breq	.+122    	; 0x13fec <SS80_Command_State+0x476>
   13f72:	81 e8       	ldi	r24, 0x81	; 129
   13f74:	9b e1       	ldi	r25, 0x1B	; 27
   13f76:	e2 ce       	rjmp	.-572    	; 0x13d3c <SS80_Command_State+0x1c6>
   13f78:	2d 34       	cpi	r18, 0x4D	; 77
   13f7a:	31 05       	cpc	r19, r1
   13f7c:	39 f4       	brne	.+14     	; 0x13f8c <SS80_Command_State+0x416>
   13f7e:	80 73       	andi	r24, 0x30	; 48
   13f80:	99 27       	eor	r25, r25
   13f82:	89 2b       	or	r24, r25
   13f84:	99 f1       	breq	.+102    	; 0x13fec <SS80_Command_State+0x476>
   13f86:	88 e6       	ldi	r24, 0x68	; 104
   13f88:	9b e1       	ldi	r25, 0x1B	; 27
   13f8a:	d8 ce       	rjmp	.-592    	; 0x13d3c <SS80_Command_State+0x1c6>
   13f8c:	2d 30       	cpi	r18, 0x0D	; 13
   13f8e:	31 05       	cpc	r19, r1
   13f90:	69 f4       	brne	.+26     	; 0x13fac <SS80_Command_State+0x436>
   13f92:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   13f96:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   13f9a:	23 e0       	ldi	r18, 0x03	; 3
   13f9c:	30 e0       	ldi	r19, 0x00	; 0
   13f9e:	31 83       	std	Z+1, r19	; 0x01
   13fa0:	20 83       	st	Z, r18
   13fa2:	85 ff       	sbrs	r24, 5
   13fa4:	23 c0       	rjmp	.+70     	; 0x13fec <SS80_Command_State+0x476>
   13fa6:	81 e5       	ldi	r24, 0x51	; 81
   13fa8:	9b e1       	ldi	r25, 0x1B	; 27
   13faa:	c8 ce       	rjmp	.-624    	; 0x13d3c <SS80_Command_State+0x1c6>
   13fac:	23 33       	cpi	r18, 0x33	; 51
   13fae:	31 05       	cpc	r19, r1
   13fb0:	51 f4       	brne	.+20     	; 0x13fc6 <SS80_Command_State+0x450>
   13fb2:	87 01       	movw	r16, r14
   13fb4:	0c 5f       	subi	r16, 0xFC	; 252
   13fb6:	1f 4f       	sbci	r17, 0xFF	; 255
   13fb8:	80 73       	andi	r24, 0x30	; 48
   13fba:	99 27       	eor	r25, r25
   13fbc:	89 2b       	or	r24, r25
   13fbe:	b1 f0       	breq	.+44     	; 0x13fec <SS80_Command_State+0x476>
   13fc0:	80 e3       	ldi	r24, 0x30	; 48
   13fc2:	9b e1       	ldi	r25, 0x1B	; 27
   13fc4:	bb ce       	rjmp	.-650    	; 0x13d3c <SS80_Command_State+0x1c6>
   13fc6:	80 ff       	sbrs	r24, 0
   13fc8:	28 c0       	rjmp	.+80     	; 0x1401a <SS80_Command_State+0x4a4>
   13fca:	3f 93       	push	r19
   13fcc:	2f 93       	push	r18
   13fce:	80 e1       	ldi	r24, 0x10	; 16
   13fd0:	9b e1       	ldi	r25, 0x1B	; 27
   13fd2:	1f 92       	push	r1
   13fd4:	9f 93       	push	r25
   13fd6:	8f 93       	push	r24
   13fd8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   13fdc:	0f 90       	pop	r0
   13fde:	0f 90       	pop	r0
   13fe0:	0f 90       	pop	r0
   13fe2:	0f 90       	pop	r0
   13fe4:	0f 90       	pop	r0
   13fe6:	02 c0       	rjmp	.+4      	; 0x13fec <SS80_Command_State+0x476>
   13fe8:	78 01       	movw	r14, r16
   13fea:	45 ce       	rjmp	.-886    	; 0x13c76 <SS80_Command_State+0x100>
   13fec:	0c 15       	cp	r16, r12
   13fee:	1d 05       	cpc	r17, r13
   13ff0:	a1 f0       	breq	.+40     	; 0x1401a <SS80_Command_State+0x4a4>
   13ff2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   13ff6:	80 ff       	sbrs	r24, 0
   13ff8:	10 c0       	rjmp	.+32     	; 0x1401a <SS80_Command_State+0x4a4>
   13ffa:	df 92       	push	r13
   13ffc:	cf 92       	push	r12
   13ffe:	1f 93       	push	r17
   14000:	0f 93       	push	r16
   14002:	88 ed       	ldi	r24, 0xD8	; 216
   14004:	9a e1       	ldi	r25, 0x1A	; 26
   14006:	1f 92       	push	r1
   14008:	9f 93       	push	r25
   1400a:	8f 93       	push	r24
   1400c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14010:	0f b6       	in	r0, 0x3f	; 63
   14012:	f8 94       	cli
   14014:	de bf       	out	0x3e, r29	; 62
   14016:	0f be       	out	0x3f, r0	; 63
   14018:	cd bf       	out	0x3d, r28	; 61
   1401a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1401e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14022:	81 81       	ldd	r24, Z+1	; 0x01
   14024:	90 e0       	ldi	r25, 0x00	; 0
   14026:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1402a:	89 81       	ldd	r24, Y+1	; 0x01
   1402c:	9a 81       	ldd	r25, Y+2	; 0x02
   1402e:	88 27       	eor	r24, r24
   14030:	90 7d       	andi	r25, 0xD0	; 208
   14032:	02 c0       	rjmp	.+4      	; 0x14038 <SS80_Command_State+0x4c2>
   14034:	80 e0       	ldi	r24, 0x00	; 0
   14036:	90 e0       	ldi	r25, 0x00	; 0
   14038:	60 96       	adiw	r28, 0x10	; 16
   1403a:	0f b6       	in	r0, 0x3f	; 63
   1403c:	f8 94       	cli
   1403e:	de bf       	out	0x3e, r29	; 62
   14040:	0f be       	out	0x3f, r0	; 63
   14042:	cd bf       	out	0x3d, r28	; 61
   14044:	df 91       	pop	r29
   14046:	cf 91       	pop	r28
   14048:	1f 91       	pop	r17
   1404a:	0f 91       	pop	r16
   1404c:	ff 90       	pop	r15
   1404e:	ef 90       	pop	r14
   14050:	df 90       	pop	r13
   14052:	cf 90       	pop	r12
   14054:	bf 90       	pop	r11
   14056:	af 90       	pop	r10
   14058:	8f 90       	pop	r8
   1405a:	7f 90       	pop	r7
   1405c:	6f 90       	pop	r6
   1405e:	4f 90       	pop	r4
   14060:	3f 90       	pop	r3
   14062:	2f 90       	pop	r2
   14064:	08 95       	ret

00014066 <SS80_cmd_seek>:
   14066:	a0 e0       	ldi	r26, 0x00	; 0
   14068:	b0 e0       	ldi	r27, 0x00	; 0
   1406a:	e9 e3       	ldi	r30, 0x39	; 57
   1406c:	f0 ea       	ldi	r31, 0xA0	; 160
   1406e:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
   14072:	c0 91 5a 19 	lds	r28, 0x195A	; 0x80195a <SS80s>
   14076:	d0 91 5b 19 	lds	r29, 0x195B	; 0x80195b <SS80s+0x1>
   1407a:	8f 80       	ldd	r8, Y+7	; 0x07
   1407c:	98 84       	ldd	r9, Y+8	; 0x08
   1407e:	a9 84       	ldd	r10, Y+9	; 0x09
   14080:	ba 84       	ldd	r11, Y+10	; 0x0a
   14082:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80p>
   14086:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80p+0x1>
   1408a:	f8 01       	movw	r30, r16
   1408c:	c7 a4       	ldd	r12, Z+47	; 0x2f
   1408e:	d0 a8       	ldd	r13, Z+48	; 0x30
   14090:	e1 2c       	mov	r14, r1
   14092:	f1 2c       	mov	r15, r1
   14094:	6b 85       	ldd	r22, Y+11	; 0x0b
   14096:	7c 85       	ldd	r23, Y+12	; 0x0c
   14098:	8d 85       	ldd	r24, Y+13	; 0x0d
   1409a:	9e 85       	ldd	r25, Y+14	; 0x0e
   1409c:	a7 01       	movw	r20, r14
   1409e:	96 01       	movw	r18, r12
   140a0:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
   140a4:	da 01       	movw	r26, r20
   140a6:	c9 01       	movw	r24, r18
   140a8:	88 0d       	add	r24, r8
   140aa:	99 1d       	adc	r25, r9
   140ac:	aa 1d       	adc	r26, r10
   140ae:	bb 1d       	adc	r27, r11
   140b0:	f8 01       	movw	r30, r16
   140b2:	eb 5b       	subi	r30, 0xBB	; 187
   140b4:	ff 4f       	sbci	r31, 0xFF	; 255
   140b6:	40 80       	ld	r4, Z
   140b8:	51 80       	ldd	r5, Z+1	; 0x01
   140ba:	62 80       	ldd	r6, Z+2	; 0x02
   140bc:	73 80       	ldd	r7, Z+3	; 0x03
   140be:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   140c2:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   140c6:	48 16       	cp	r4, r24
   140c8:	59 06       	cpc	r5, r25
   140ca:	6a 06       	cpc	r6, r26
   140cc:	7b 06       	cpc	r7, r27
   140ce:	20 f5       	brcc	.+72     	; 0x14118 <SS80_cmd_seek+0xb2>
   140d0:	81 e0       	ldi	r24, 0x01	; 1
   140d2:	8a 83       	std	Y+2, r24	; 0x02
   140d4:	8b 81       	ldd	r24, Y+3	; 0x03
   140d6:	9c 81       	ldd	r25, Y+4	; 0x04
   140d8:	84 60       	ori	r24, 0x04	; 4
   140da:	9c 83       	std	Y+4, r25	; 0x04
   140dc:	8b 83       	std	Y+3, r24	; 0x03
   140de:	40 ff       	sbrs	r20, 0
   140e0:	3c c0       	rjmp	.+120    	; 0x1415a <SS80_cmd_seek+0xf4>
   140e2:	f8 01       	movw	r30, r16
   140e4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   140e6:	b0 a9       	ldd	r27, Z+48	; 0x30
   140e8:	a5 01       	movw	r20, r10
   140ea:	94 01       	movw	r18, r8
   140ec:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
   140f0:	9f 93       	push	r25
   140f2:	8f 93       	push	r24
   140f4:	7f 93       	push	r23
   140f6:	6f 93       	push	r22
   140f8:	85 e9       	ldi	r24, 0x95	; 149
   140fa:	99 e1       	ldi	r25, 0x19	; 25
   140fc:	1f 92       	push	r1
   140fe:	9f 93       	push	r25
   14100:	8f 93       	push	r24
   14102:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14106:	8d b7       	in	r24, 0x3d	; 61
   14108:	9e b7       	in	r25, 0x3e	; 62
   1410a:	07 96       	adiw	r24, 0x07	; 7
   1410c:	0f b6       	in	r0, 0x3f	; 63
   1410e:	f8 94       	cli
   14110:	9e bf       	out	0x3e, r25	; 62
   14112:	0f be       	out	0x3f, r0	; 63
   14114:	8d bf       	out	0x3d, r24	; 61
   14116:	21 c0       	rjmp	.+66     	; 0x1415a <SS80_cmd_seek+0xf4>
   14118:	ca 01       	movw	r24, r20
   1411a:	80 72       	andi	r24, 0x20	; 32
   1411c:	99 27       	eor	r25, r25
   1411e:	45 ff       	sbrs	r20, 5
   14120:	1e c0       	rjmp	.+60     	; 0x1415e <SS80_cmd_seek+0xf8>
   14122:	a5 01       	movw	r20, r10
   14124:	94 01       	movw	r18, r8
   14126:	c7 01       	movw	r24, r14
   14128:	b6 01       	movw	r22, r12
   1412a:	0e 94 8c e8 	call	0x1d118	; 0x1d118 <__mulsi3>
   1412e:	9f 93       	push	r25
   14130:	8f 93       	push	r24
   14132:	7f 93       	push	r23
   14134:	6f 93       	push	r22
   14136:	81 e8       	ldi	r24, 0x81	; 129
   14138:	99 e1       	ldi	r25, 0x19	; 25
   1413a:	1f 92       	push	r1
   1413c:	9f 93       	push	r25
   1413e:	8f 93       	push	r24
   14140:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14144:	ed b7       	in	r30, 0x3d	; 61
   14146:	fe b7       	in	r31, 0x3e	; 62
   14148:	37 96       	adiw	r30, 0x07	; 7
   1414a:	0f b6       	in	r0, 0x3f	; 63
   1414c:	f8 94       	cli
   1414e:	fe bf       	out	0x3e, r31	; 62
   14150:	0f be       	out	0x3f, r0	; 63
   14152:	ed bf       	out	0x3d, r30	; 61
   14154:	80 e0       	ldi	r24, 0x00	; 0
   14156:	90 e0       	ldi	r25, 0x00	; 0
   14158:	02 c0       	rjmp	.+4      	; 0x1415e <SS80_cmd_seek+0xf8>
   1415a:	81 e0       	ldi	r24, 0x01	; 1
   1415c:	90 e0       	ldi	r25, 0x00	; 0
   1415e:	cd b7       	in	r28, 0x3d	; 61
   14160:	de b7       	in	r29, 0x3e	; 62
   14162:	e0 e1       	ldi	r30, 0x10	; 16
   14164:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

00014168 <SS80_locate_and_write>:
   14168:	a8 e0       	ldi	r26, 0x08	; 8
   1416a:	b0 e0       	ldi	r27, 0x00	; 0
   1416c:	ea eb       	ldi	r30, 0xBA	; 186
   1416e:	f0 ea       	ldi	r31, 0xA0	; 160
   14170:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   14174:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14178:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   1417c:	a0 91 5c 19 	lds	r26, 0x195C	; 0x80195c <SS80p>
   14180:	b0 91 5d 19 	lds	r27, 0x195D	; 0x80195d <SS80p+0x1>
   14184:	9f 96       	adiw	r26, 0x2f	; 47
   14186:	0d 90       	ld	r0, X+
   14188:	bc 91       	ld	r27, X
   1418a:	a0 2d       	mov	r26, r0
   1418c:	27 81       	ldd	r18, Z+7	; 0x07
   1418e:	30 85       	ldd	r19, Z+8	; 0x08
   14190:	41 85       	ldd	r20, Z+9	; 0x09
   14192:	52 85       	ldd	r21, Z+10	; 0x0a
   14194:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
   14198:	4b 01       	movw	r8, r22
   1419a:	5c 01       	movw	r10, r24
   1419c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   141a0:	85 ff       	sbrs	r24, 5
   141a2:	18 c0       	rjmp	.+48     	; 0x141d4 <SS80_locate_and_write+0x6c>
   141a4:	86 85       	ldd	r24, Z+14	; 0x0e
   141a6:	8f 93       	push	r24
   141a8:	85 85       	ldd	r24, Z+13	; 0x0d
   141aa:	8f 93       	push	r24
   141ac:	84 85       	ldd	r24, Z+12	; 0x0c
   141ae:	8f 93       	push	r24
   141b0:	83 85       	ldd	r24, Z+11	; 0x0b
   141b2:	8f 93       	push	r24
   141b4:	bf 92       	push	r11
   141b6:	af 92       	push	r10
   141b8:	9f 92       	push	r9
   141ba:	8f 92       	push	r8
   141bc:	86 e1       	ldi	r24, 0x16	; 22
   141be:	9f e1       	ldi	r25, 0x1F	; 31
   141c0:	1f 92       	push	r1
   141c2:	9f 93       	push	r25
   141c4:	8f 93       	push	r24
   141c6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   141ca:	0f b6       	in	r0, 0x3f	; 63
   141cc:	f8 94       	cli
   141ce:	de bf       	out	0x3e, r29	; 62
   141d0:	0f be       	out	0x3f, r0	; 63
   141d2:	cd bf       	out	0x3d, r28	; 61
   141d4:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   141d8:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   141dc:	12 82       	std	Z+2, r1	; 0x02
   141de:	54 98       	cbi	0x0a, 4	; 10
   141e0:	4c 99       	sbic	0x09, 4	; 9
   141e2:	03 c0       	rjmp	.+6      	; 0x141ea <SS80_locate_and_write+0x82>
   141e4:	80 e0       	ldi	r24, 0x00	; 0
   141e6:	90 e1       	ldi	r25, 0x10	; 16
   141e8:	52 c1       	rjmp	.+676    	; 0x1448e <SS80_locate_and_write+0x326>
   141ea:	3d df       	rcall	.-390    	; 0x14066 <SS80_cmd_seek>
   141ec:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   141f0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   141f4:	89 2b       	or	r24, r25
   141f6:	41 f0       	breq	.+16     	; 0x14208 <SS80_locate_and_write+0xa0>
   141f8:	83 81       	ldd	r24, Z+3	; 0x03
   141fa:	94 81       	ldd	r25, Z+4	; 0x04
   141fc:	82 60       	ori	r24, 0x02	; 2
   141fe:	94 83       	std	Z+4, r25	; 0x04
   14200:	83 83       	std	Z+3, r24	; 0x03
   14202:	01 e0       	ldi	r16, 0x01	; 1
   14204:	10 e0       	ldi	r17, 0x00	; 0
   14206:	02 c0       	rjmp	.+4      	; 0x1420c <SS80_locate_and_write+0xa4>
   14208:	00 e0       	ldi	r16, 0x00	; 0
   1420a:	10 e0       	ldi	r17, 0x00	; 0
   1420c:	23 84       	ldd	r2, Z+11	; 0x0b
   1420e:	34 84       	ldd	r3, Z+12	; 0x0c
   14210:	1a 82       	std	Y+2, r1	; 0x02
   14212:	19 82       	std	Y+1, r1	; 0x01
   14214:	41 2c       	mov	r4, r1
   14216:	51 2c       	mov	r5, r1
   14218:	32 01       	movw	r6, r4
   1421a:	89 ec       	ldi	r24, 0xC9	; 201
   1421c:	9e e1       	ldi	r25, 0x1E	; 30
   1421e:	9c 01       	movw	r18, r24
   14220:	40 e0       	ldi	r20, 0x00	; 0
   14222:	2b 83       	std	Y+3, r18	; 0x03
   14224:	3c 83       	std	Y+4, r19	; 0x04
   14226:	4d 83       	std	Y+5, r20	; 0x05
   14228:	8f ee       	ldi	r24, 0xEF	; 239
   1422a:	9e e1       	ldi	r25, 0x1E	; 30
   1422c:	9c 01       	movw	r18, r24
   1422e:	40 e0       	ldi	r20, 0x00	; 0
   14230:	2e 83       	std	Y+6, r18	; 0x06
   14232:	3f 83       	std	Y+7, r19	; 0x07
   14234:	48 87       	std	Y+8, r20	; 0x08
   14236:	12 14       	cp	r1, r2
   14238:	13 04       	cpc	r1, r3
   1423a:	0c f0       	brlt	.+2      	; 0x1423e <SS80_locate_and_write+0xd6>
   1423c:	f6 c0       	rjmp	.+492    	; 0x1442a <SS80_locate_and_write+0x2c2>
   1423e:	54 98       	cbi	0x0a, 4	; 10
   14240:	4c 9b       	sbis	0x09, 4	; 9
   14242:	d0 cf       	rjmp	.-96     	; 0x141e4 <SS80_locate_and_write+0x7c>
   14244:	71 01       	movw	r14, r2
   14246:	31 e0       	ldi	r19, 0x01	; 1
   14248:	23 16       	cp	r2, r19
   1424a:	33 06       	cpc	r3, r19
   1424c:	1c f0       	brlt	.+6      	; 0x14254 <SS80_locate_and_write+0xec>
   1424e:	e1 2c       	mov	r14, r1
   14250:	ff 24       	eor	r15, r15
   14252:	f3 94       	inc	r15
   14254:	e5 ea       	ldi	r30, 0xA5	; 165
   14256:	fc e1       	ldi	r31, 0x1C	; 28
   14258:	20 e0       	ldi	r18, 0x00	; 0
   1425a:	32 e0       	ldi	r19, 0x02	; 2
   1425c:	11 92       	st	Z+, r1
   1425e:	21 50       	subi	r18, 0x01	; 1
   14260:	30 40       	sbci	r19, 0x00	; 0
   14262:	e1 f7       	brne	.-8      	; 0x1425c <SS80_locate_and_write+0xf4>
   14264:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14268:	87 fd       	sbrc	r24, 7
   1426a:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   1426e:	ae 01       	movw	r20, r28
   14270:	4f 5f       	subi	r20, 0xFF	; 255
   14272:	5f 4f       	sbci	r21, 0xFF	; 255
   14274:	b7 01       	movw	r22, r14
   14276:	85 ea       	ldi	r24, 0xA5	; 165
   14278:	9c e1       	ldi	r25, 0x1C	; 28
   1427a:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   1427e:	6c 01       	movw	r12, r24
   14280:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14284:	87 ff       	sbrs	r24, 7
   14286:	04 c0       	rjmp	.+8      	; 0x14290 <SS80_locate_and_write+0x128>
   14288:	82 ee       	ldi	r24, 0xE2	; 226
   1428a:	9d e0       	ldi	r25, 0x0D	; 13
   1428c:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   14290:	ce 14       	cp	r12, r14
   14292:	df 04       	cpc	r13, r15
   14294:	39 f1       	breq	.+78     	; 0x142e4 <SS80_locate_and_write+0x17c>
   14296:	89 81       	ldd	r24, Y+1	; 0x01
   14298:	9a 81       	ldd	r25, Y+2	; 0x02
   1429a:	9c 01       	movw	r18, r24
   1429c:	22 27       	eor	r18, r18
   1429e:	30 7d       	andi	r19, 0xD0	; 208
   142a0:	23 2b       	or	r18, r19
   142a2:	d1 f0       	breq	.+52     	; 0x142d8 <SS80_locate_and_write+0x170>
   142a4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   142a8:	80 ff       	sbrs	r24, 0
   142aa:	0a c0       	rjmp	.+20     	; 0x142c0 <SS80_locate_and_write+0x158>
   142ac:	83 e0       	ldi	r24, 0x03	; 3
   142ae:	9f e1       	ldi	r25, 0x1F	; 31
   142b0:	1f 92       	push	r1
   142b2:	9f 93       	push	r25
   142b4:	8f 93       	push	r24
   142b6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   142ba:	0f 90       	pop	r0
   142bc:	0f 90       	pop	r0
   142be:	0f 90       	pop	r0
   142c0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   142c4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   142c8:	83 81       	ldd	r24, Z+3	; 0x03
   142ca:	94 81       	ldd	r25, Z+4	; 0x04
   142cc:	82 60       	ori	r24, 0x02	; 2
   142ce:	94 83       	std	Z+4, r25	; 0x04
   142d0:	83 83       	std	Z+3, r24	; 0x03
   142d2:	81 e0       	ldi	r24, 0x01	; 1
   142d4:	82 83       	std	Z+2, r24	; 0x02
   142d6:	9a c0       	rjmp	.+308    	; 0x1440c <SS80_locate_and_write+0x2a4>
   142d8:	c1 14       	cp	r12, r1
   142da:	d1 04       	cpc	r13, r1
   142dc:	09 f0       	breq	.+2      	; 0x142e0 <SS80_locate_and_write+0x178>
   142de:	d3 c0       	rjmp	.+422    	; 0x14486 <SS80_locate_and_write+0x31e>
   142e0:	90 fd       	sbrc	r25, 0
   142e2:	94 c0       	rjmp	.+296    	; 0x1440c <SS80_locate_and_write+0x2a4>
   142e4:	01 15       	cp	r16, r1
   142e6:	11 05       	cpc	r17, r1
   142e8:	09 f0       	breq	.+2      	; 0x142ec <SS80_locate_and_write+0x184>
   142ea:	85 c0       	rjmp	.+266    	; 0x143f6 <SS80_locate_and_write+0x28e>
   142ec:	c1 14       	cp	r12, r1
   142ee:	d1 04       	cpc	r13, r1
   142f0:	09 f4       	brne	.+2      	; 0x142f4 <SS80_locate_and_write+0x18c>
   142f2:	83 c0       	rjmp	.+262    	; 0x143fa <SS80_locate_and_write+0x292>
   142f4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   142f8:	86 fd       	sbrc	r24, 6
   142fa:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   142fe:	e0 90 5a 19 	lds	r14, 0x195A	; 0x80195a <SS80s>
   14302:	f0 90 5b 19 	lds	r15, 0x195B	; 0x80195b <SS80s+0x1>
   14306:	33 e0       	ldi	r19, 0x03	; 3
   14308:	e3 0e       	add	r14, r19
   1430a:	f1 1c       	adc	r15, r1
   1430c:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <SS80p>
   14310:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <SS80p+0x1>
   14314:	86 01       	movw	r16, r12
   14316:	25 ea       	ldi	r18, 0xA5	; 165
   14318:	3c e1       	ldi	r19, 0x1C	; 28
   1431a:	b5 01       	movw	r22, r10
   1431c:	a4 01       	movw	r20, r8
   1431e:	02 96       	adiw	r24, 0x02	; 2
   14320:	0e 94 6e 8b 	call	0x116dc	; 0x116dc <dbf_open_write>
   14324:	7c 01       	movw	r14, r24
   14326:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1432a:	86 ff       	sbrs	r24, 6
   1432c:	04 c0       	rjmp	.+8      	; 0x14336 <SS80_locate_and_write+0x1ce>
   1432e:	8c ee       	ldi	r24, 0xEC	; 236
   14330:	9d e0       	ldi	r25, 0x0D	; 13
   14332:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   14336:	ce 14       	cp	r12, r14
   14338:	df 04       	cpc	r13, r15
   1433a:	39 f1       	breq	.+78     	; 0x1438a <SS80_locate_and_write+0x222>
   1433c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14340:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14344:	83 81       	ldd	r24, Z+3	; 0x03
   14346:	94 81       	ldd	r25, Z+4	; 0x04
   14348:	82 60       	ori	r24, 0x02	; 2
   1434a:	94 83       	std	Z+4, r25	; 0x04
   1434c:	83 83       	std	Z+3, r24	; 0x03
   1434e:	0e 94 23 73 	call	0xe646	; 0xe646 <mmc_wp_status>
   14352:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14356:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   1435a:	89 2b       	or	r24, r25
   1435c:	29 f0       	breq	.+10     	; 0x14368 <SS80_locate_and_write+0x200>
   1435e:	83 81       	ldd	r24, Z+3	; 0x03
   14360:	94 81       	ldd	r25, Z+4	; 0x04
   14362:	88 60       	ori	r24, 0x08	; 8
   14364:	94 83       	std	Z+4, r25	; 0x04
   14366:	83 83       	std	Z+3, r24	; 0x03
   14368:	41 e0       	ldi	r20, 0x01	; 1
   1436a:	42 83       	std	Z+2, r20	; 0x02
   1436c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14370:	80 ff       	sbrs	r24, 0
   14372:	29 c0       	rjmp	.+82     	; 0x143c6 <SS80_locate_and_write+0x25e>
   14374:	1f 92       	push	r1
   14376:	8f 81       	ldd	r24, Y+7	; 0x07
   14378:	8f 93       	push	r24
   1437a:	9e 81       	ldd	r25, Y+6	; 0x06
   1437c:	9f 93       	push	r25
   1437e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14382:	0f 90       	pop	r0
   14384:	0f 90       	pop	r0
   14386:	0f 90       	pop	r0
   14388:	1e c0       	rjmp	.+60     	; 0x143c6 <SS80_locate_and_write+0x25e>
   1438a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1438e:	85 ff       	sbrs	r24, 5
   14390:	0e c0       	rjmp	.+28     	; 0x143ae <SS80_locate_and_write+0x246>
   14392:	df 92       	push	r13
   14394:	cf 92       	push	r12
   14396:	1f 92       	push	r1
   14398:	ec 81       	ldd	r30, Y+4	; 0x04
   1439a:	ef 93       	push	r30
   1439c:	fb 81       	ldd	r31, Y+3	; 0x03
   1439e:	ff 93       	push	r31
   143a0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   143a4:	0f 90       	pop	r0
   143a6:	0f 90       	pop	r0
   143a8:	0f 90       	pop	r0
   143aa:	0f 90       	pop	r0
   143ac:	0f 90       	pop	r0
   143ae:	c6 01       	movw	r24, r12
   143b0:	0d 2c       	mov	r0, r13
   143b2:	00 0c       	add	r0, r0
   143b4:	aa 0b       	sbc	r26, r26
   143b6:	bb 0b       	sbc	r27, r27
   143b8:	88 0e       	add	r8, r24
   143ba:	99 1e       	adc	r9, r25
   143bc:	aa 1e       	adc	r10, r26
   143be:	bb 1e       	adc	r11, r27
   143c0:	00 e0       	ldi	r16, 0x00	; 0
   143c2:	10 e0       	ldi	r17, 0x00	; 0
   143c4:	05 c0       	rjmp	.+10     	; 0x143d0 <SS80_locate_and_write+0x268>
   143c6:	ec 14       	cp	r14, r12
   143c8:	fd 04       	cpc	r15, r13
   143ca:	64 f0       	brlt	.+24     	; 0x143e4 <SS80_locate_and_write+0x27c>
   143cc:	01 e0       	ldi	r16, 0x01	; 1
   143ce:	10 e0       	ldi	r17, 0x00	; 0
   143d0:	c7 01       	movw	r24, r14
   143d2:	0f 2c       	mov	r0, r15
   143d4:	00 0c       	add	r0, r0
   143d6:	aa 0b       	sbc	r26, r26
   143d8:	bb 0b       	sbc	r27, r27
   143da:	48 0e       	add	r4, r24
   143dc:	59 1e       	adc	r5, r25
   143de:	6a 1e       	adc	r6, r26
   143e0:	7b 1e       	adc	r7, r27
   143e2:	0b c0       	rjmp	.+22     	; 0x143fa <SS80_locate_and_write+0x292>
   143e4:	c6 01       	movw	r24, r12
   143e6:	0d 2c       	mov	r0, r13
   143e8:	00 0c       	add	r0, r0
   143ea:	aa 0b       	sbc	r26, r26
   143ec:	bb 0b       	sbc	r27, r27
   143ee:	48 0e       	add	r4, r24
   143f0:	59 1e       	adc	r5, r25
   143f2:	6a 1e       	adc	r6, r26
   143f4:	7b 1e       	adc	r7, r27
   143f6:	01 e0       	ldi	r16, 0x01	; 1
   143f8:	10 e0       	ldi	r17, 0x00	; 0
   143fa:	2c 18       	sub	r2, r12
   143fc:	3d 08       	sbc	r3, r13
   143fe:	89 81       	ldd	r24, Y+1	; 0x01
   14400:	9a 81       	ldd	r25, Y+2	; 0x02
   14402:	90 ff       	sbrs	r25, 0
   14404:	18 cf       	rjmp	.-464    	; 0x14236 <SS80_locate_and_write+0xce>
   14406:	12 14       	cp	r1, r2
   14408:	13 04       	cpc	r1, r3
   1440a:	7c f4       	brge	.+30     	; 0x1442a <SS80_locate_and_write+0x2c2>
   1440c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14410:	80 ff       	sbrs	r24, 0
   14412:	1f c0       	rjmp	.+62     	; 0x14452 <SS80_locate_and_write+0x2ea>
   14414:	81 ea       	ldi	r24, 0xA1	; 161
   14416:	9e e1       	ldi	r25, 0x1E	; 30
   14418:	1f 92       	push	r1
   1441a:	9f 93       	push	r25
   1441c:	8f 93       	push	r24
   1441e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14422:	0f 90       	pop	r0
   14424:	0f 90       	pop	r0
   14426:	0f 90       	pop	r0
   14428:	14 c0       	rjmp	.+40     	; 0x14452 <SS80_locate_and_write+0x2ea>
   1442a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1442e:	85 ff       	sbrs	r24, 5
   14430:	10 c0       	rjmp	.+32     	; 0x14452 <SS80_locate_and_write+0x2ea>
   14432:	7f 92       	push	r7
   14434:	6f 92       	push	r6
   14436:	5f 92       	push	r5
   14438:	4f 92       	push	r4
   1443a:	86 e7       	ldi	r24, 0x76	; 118
   1443c:	9e e1       	ldi	r25, 0x1E	; 30
   1443e:	1f 92       	push	r1
   14440:	9f 93       	push	r25
   14442:	8f 93       	push	r24
   14444:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14448:	0f b6       	in	r0, 0x3f	; 63
   1444a:	f8 94       	cli
   1444c:	de bf       	out	0x3e, r29	; 62
   1444e:	0f be       	out	0x3f, r0	; 63
   14450:	cd bf       	out	0x3d, r28	; 61
   14452:	00 91 5a 19 	lds	r16, 0x195A	; 0x80195a <SS80s>
   14456:	10 91 5b 19 	lds	r17, 0x195B	; 0x80195b <SS80s+0x1>
   1445a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1445e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14462:	27 a5       	ldd	r18, Z+47	; 0x2f
   14464:	30 a9       	ldd	r19, Z+48	; 0x30
   14466:	40 e0       	ldi	r20, 0x00	; 0
   14468:	50 e0       	ldi	r21, 0x00	; 0
   1446a:	c5 01       	movw	r24, r10
   1446c:	b4 01       	movw	r22, r8
   1446e:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
   14472:	f8 01       	movw	r30, r16
   14474:	27 83       	std	Z+7, r18	; 0x07
   14476:	30 87       	std	Z+8, r19	; 0x08
   14478:	41 87       	std	Z+9, r20	; 0x09
   1447a:	52 87       	std	Z+10, r21	; 0x0a
   1447c:	89 81       	ldd	r24, Y+1	; 0x01
   1447e:	9a 81       	ldd	r25, Y+2	; 0x02
   14480:	88 27       	eor	r24, r24
   14482:	90 7d       	andi	r25, 0xD0	; 208
   14484:	04 c0       	rjmp	.+8      	; 0x1448e <SS80_locate_and_write+0x326>
   14486:	01 2b       	or	r16, r17
   14488:	09 f4       	brne	.+2      	; 0x1448c <SS80_locate_and_write+0x324>
   1448a:	34 cf       	rjmp	.-408    	; 0x142f4 <SS80_locate_and_write+0x18c>
   1448c:	b4 cf       	rjmp	.-152    	; 0x143f6 <SS80_locate_and_write+0x28e>
   1448e:	28 96       	adiw	r28, 0x08	; 8
   14490:	e2 e1       	ldi	r30, 0x12	; 18
   14492:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

00014496 <SS80_Report>:
   14496:	a3 e0       	ldi	r26, 0x03	; 3
   14498:	b0 e0       	ldi	r27, 0x00	; 0
   1449a:	e1 e5       	ldi	r30, 0x51	; 81
   1449c:	f2 ea       	ldi	r31, 0xA2	; 162
   1449e:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   144a2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   144a6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   144aa:	82 81       	ldd	r24, Z+2	; 0x02
   144ac:	8b 83       	std	Y+3, r24	; 0x03
   144ae:	80 e0       	ldi	r24, 0x00	; 0
   144b0:	91 e0       	ldi	r25, 0x01	; 1
   144b2:	9a 83       	std	Y+2, r25	; 0x02
   144b4:	89 83       	std	Y+1, r24	; 0x01
   144b6:	ae 01       	movw	r20, r28
   144b8:	4f 5f       	subi	r20, 0xFF	; 255
   144ba:	5f 4f       	sbci	r21, 0xFF	; 255
   144bc:	61 e0       	ldi	r22, 0x01	; 1
   144be:	70 e0       	ldi	r23, 0x00	; 0
   144c0:	ce 01       	movw	r24, r28
   144c2:	03 96       	adiw	r24, 0x03	; 3
   144c4:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   144c8:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   144cc:	01 97       	sbiw	r24, 0x01	; 1
   144ce:	89 f0       	breq	.+34     	; 0x144f2 <SS80_Report+0x5c>
   144d0:	20 ff       	sbrs	r18, 0
   144d2:	0a c0       	rjmp	.+20     	; 0x144e8 <SS80_Report+0x52>
   144d4:	87 e6       	ldi	r24, 0x67	; 103
   144d6:	99 e1       	ldi	r25, 0x19	; 25
   144d8:	1f 92       	push	r1
   144da:	9f 93       	push	r25
   144dc:	8f 93       	push	r24
   144de:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   144e2:	0f 90       	pop	r0
   144e4:	0f 90       	pop	r0
   144e6:	0f 90       	pop	r0
   144e8:	89 81       	ldd	r24, Y+1	; 0x01
   144ea:	9a 81       	ldd	r25, Y+2	; 0x02
   144ec:	88 27       	eor	r24, r24
   144ee:	90 7d       	andi	r25, 0xD0	; 208
   144f0:	1c c0       	rjmp	.+56     	; 0x1452a <SS80_Report+0x94>
   144f2:	25 ff       	sbrs	r18, 5
   144f4:	13 c0       	rjmp	.+38     	; 0x1451c <SS80_Report+0x86>
   144f6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   144fa:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   144fe:	82 81       	ldd	r24, Z+2	; 0x02
   14500:	1f 92       	push	r1
   14502:	8f 93       	push	r24
   14504:	84 e5       	ldi	r24, 0x54	; 84
   14506:	99 e1       	ldi	r25, 0x19	; 25
   14508:	1f 92       	push	r1
   1450a:	9f 93       	push	r25
   1450c:	8f 93       	push	r24
   1450e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14512:	0f 90       	pop	r0
   14514:	0f 90       	pop	r0
   14516:	0f 90       	pop	r0
   14518:	0f 90       	pop	r0
   1451a:	0f 90       	pop	r0
   1451c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14520:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14524:	12 82       	std	Z+2, r1	; 0x02
   14526:	80 e0       	ldi	r24, 0x00	; 0
   14528:	90 e0       	ldi	r25, 0x00	; 0
   1452a:	23 96       	adiw	r28, 0x03	; 3
   1452c:	e2 e0       	ldi	r30, 0x02	; 2
   1452e:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00014532 <Clear_Common>:
   14532:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14536:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   1453a:	25 81       	ldd	r18, Z+5	; 0x05
   1453c:	30 e0       	ldi	r19, 0x00	; 0
   1453e:	28 17       	cp	r18, r24
   14540:	39 07       	cpc	r19, r25
   14542:	19 f0       	breq	.+6      	; 0x1454a <Clear_Common+0x18>
   14544:	0f 97       	sbiw	r24, 0x0f	; 15
   14546:	99 f4       	brne	.+38     	; 0x1456e <Clear_Common+0x3c>
   14548:	03 c0       	rjmp	.+6      	; 0x14550 <Clear_Common+0x1e>
   1454a:	2f 30       	cpi	r18, 0x0F	; 15
   1454c:	31 05       	cpc	r19, r1
   1454e:	09 f4       	brne	.+2      	; 0x14552 <Clear_Common+0x20>
   14550:	15 82       	std	Z+5, r1	; 0x05
   14552:	16 82       	std	Z+6, r1	; 0x06
   14554:	17 82       	std	Z+7, r1	; 0x07
   14556:	10 86       	std	Z+8, r1	; 0x08
   14558:	11 86       	std	Z+9, r1	; 0x09
   1455a:	12 86       	std	Z+10, r1	; 0x0a
   1455c:	13 86       	std	Z+11, r1	; 0x0b
   1455e:	14 86       	std	Z+12, r1	; 0x0c
   14560:	15 86       	std	Z+13, r1	; 0x0d
   14562:	16 86       	std	Z+14, r1	; 0x0e
   14564:	11 82       	std	Z+1, r1	; 0x01
   14566:	10 82       	st	Z, r1
   14568:	14 82       	std	Z+4, r1	; 0x04
   1456a:	13 82       	std	Z+3, r1	; 0x03
   1456c:	12 82       	std	Z+2, r1	; 0x02
   1456e:	08 95       	ret

00014570 <SS80_init>:
   14570:	a0 e0       	ldi	r26, 0x00	; 0
   14572:	b0 e0       	ldi	r27, 0x00	; 0
   14574:	ee eb       	ldi	r30, 0xBE	; 190
   14576:	f2 ea       	ldi	r31, 0xA2	; 162
   14578:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   1457c:	0f ea       	ldi	r16, 0xAF	; 175
   1457e:	1e e1       	ldi	r17, 0x1E	; 30
   14580:	c7 e0       	ldi	r28, 0x07	; 7
   14582:	d0 e0       	ldi	r29, 0x00	; 0
   14584:	8f e1       	ldi	r24, 0x1F	; 31
   14586:	90 e2       	ldi	r25, 0x20	; 32
   14588:	6c 01       	movw	r12, r24
   1458a:	e1 2c       	mov	r14, r1
   1458c:	f8 01       	movw	r30, r16
   1458e:	f1 a8       	ldd	r15, Z+49	; 0x31
   14590:	f2 e0       	ldi	r31, 0x02	; 2
   14592:	ff 12       	cpse	r15, r31
   14594:	27 c0       	rjmp	.+78     	; 0x145e4 <SS80_init+0x74>
   14596:	ce 01       	movw	r24, r28
   14598:	0e 94 0b b6 	call	0x16c16	; 0x16c16 <set_active_device>
   1459c:	89 2b       	or	r24, r25
   1459e:	11 f1       	breq	.+68     	; 0x145e4 <SS80_init+0x74>
   145a0:	8f e0       	ldi	r24, 0x0F	; 15
   145a2:	90 e0       	ldi	r25, 0x00	; 0
   145a4:	c6 df       	rcall	.-116    	; 0x14532 <Clear_Common>
   145a6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   145aa:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   145ae:	f2 82       	std	Z+2, r15	; 0x02
   145b0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   145b4:	85 ff       	sbrs	r24, 5
   145b6:	0e c0       	rjmp	.+28     	; 0x145d4 <SS80_init+0x64>
   145b8:	f8 01       	movw	r30, r16
   145ba:	82 a9       	ldd	r24, Z+50	; 0x32
   145bc:	1f 92       	push	r1
   145be:	8f 93       	push	r24
   145c0:	1f 92       	push	r1
   145c2:	df 92       	push	r13
   145c4:	cf 92       	push	r12
   145c6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   145ca:	0f 90       	pop	r0
   145cc:	0f 90       	pop	r0
   145ce:	0f 90       	pop	r0
   145d0:	0f 90       	pop	r0
   145d2:	0f 90       	pop	r0
   145d4:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   145d8:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   145dc:	81 81       	ldd	r24, Z+1	; 0x01
   145de:	90 e0       	ldi	r25, 0x00	; 0
   145e0:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   145e4:	21 97       	sbiw	r28, 0x01	; 1
   145e6:	07 50       	subi	r16, 0x07	; 7
   145e8:	11 09       	sbc	r17, r1
   145ea:	cf 3f       	cpi	r28, 0xFF	; 255
   145ec:	ff ef       	ldi	r31, 0xFF	; 255
   145ee:	df 07       	cpc	r29, r31
   145f0:	69 f6       	brne	.-102    	; 0x1458c <SS80_init+0x1c>
   145f2:	cd b7       	in	r28, 0x3d	; 61
   145f4:	de b7       	in	r29, 0x3e	; 62
   145f6:	e8 e0       	ldi	r30, 0x08	; 8
   145f8:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

000145fc <SS80_Channel_Independent_Clear>:
   145fc:	9a df       	rcall	.-204    	; 0x14532 <Clear_Common>
   145fe:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14602:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14606:	81 81       	ldd	r24, Z+1	; 0x01
   14608:	90 e0       	ldi	r25, 0x00	; 0
   1460a:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1460e:	80 e0       	ldi	r24, 0x00	; 0
   14610:	90 e0       	ldi	r25, 0x00	; 0
   14612:	08 95       	ret

00014614 <SS80_Universal_Device_Clear>:
   14614:	8f e0       	ldi	r24, 0x0F	; 15
   14616:	90 e0       	ldi	r25, 0x00	; 0
   14618:	8c df       	rcall	.-232    	; 0x14532 <Clear_Common>
   1461a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1461e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14622:	81 81       	ldd	r24, Z+1	; 0x01
   14624:	90 e0       	ldi	r25, 0x00	; 0
   14626:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1462a:	80 e0       	ldi	r24, 0x00	; 0
   1462c:	90 e0       	ldi	r25, 0x00	; 0
   1462e:	08 95       	ret

00014630 <SS80_Selected_Device_Clear>:
   14630:	cf 93       	push	r28
   14632:	df 93       	push	r29
   14634:	ec 01       	movw	r28, r24
   14636:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1463a:	85 ff       	sbrs	r24, 5
   1463c:	0a c0       	rjmp	.+20     	; 0x14652 <SS80_Selected_Device_Clear+0x22>
   1463e:	88 e4       	ldi	r24, 0x48	; 72
   14640:	99 e1       	ldi	r25, 0x19	; 25
   14642:	1f 92       	push	r1
   14644:	9f 93       	push	r25
   14646:	8f 93       	push	r24
   14648:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1464c:	0f 90       	pop	r0
   1464e:	0f 90       	pop	r0
   14650:	0f 90       	pop	r0
   14652:	ce 01       	movw	r24, r28
   14654:	6e df       	rcall	.-292    	; 0x14532 <Clear_Common>
   14656:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   1465a:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1465e:	81 81       	ldd	r24, Z+1	; 0x01
   14660:	90 e0       	ldi	r25, 0x00	; 0
   14662:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   14666:	80 e0       	ldi	r24, 0x00	; 0
   14668:	90 e0       	ldi	r25, 0x00	; 0
   1466a:	df 91       	pop	r29
   1466c:	cf 91       	pop	r28
   1466e:	08 95       	ret

00014670 <SS80_Amigo_Clear>:
   14670:	a3 e0       	ldi	r26, 0x03	; 3
   14672:	b0 e0       	ldi	r27, 0x00	; 0
   14674:	ee e3       	ldi	r30, 0x3E	; 62
   14676:	f3 ea       	ldi	r31, 0xA3	; 163
   14678:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   1467c:	1a 82       	std	Y+2, r1	; 0x02
   1467e:	19 82       	std	Y+1, r1	; 0x01
   14680:	ae 01       	movw	r20, r28
   14682:	4f 5f       	subi	r20, 0xFF	; 255
   14684:	5f 4f       	sbci	r21, 0xFF	; 255
   14686:	61 e0       	ldi	r22, 0x01	; 1
   14688:	70 e0       	ldi	r23, 0x00	; 0
   1468a:	ce 01       	movw	r24, r28
   1468c:	03 96       	adiw	r24, 0x03	; 3
   1468e:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   14692:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   14696:	01 97       	sbiw	r24, 0x01	; 1
   14698:	89 f0       	breq	.+34     	; 0x146bc <SS80_Amigo_Clear+0x4c>
   1469a:	20 ff       	sbrs	r18, 0
   1469c:	0a c0       	rjmp	.+20     	; 0x146b2 <SS80_Amigo_Clear+0x42>
   1469e:	85 e3       	ldi	r24, 0x35	; 53
   146a0:	99 e1       	ldi	r25, 0x19	; 25
   146a2:	1f 92       	push	r1
   146a4:	9f 93       	push	r25
   146a6:	8f 93       	push	r24
   146a8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   146ac:	0f 90       	pop	r0
   146ae:	0f 90       	pop	r0
   146b0:	0f 90       	pop	r0
   146b2:	89 81       	ldd	r24, Y+1	; 0x01
   146b4:	9a 81       	ldd	r25, Y+2	; 0x02
   146b6:	88 27       	eor	r24, r24
   146b8:	90 7d       	andi	r25, 0xD0	; 208
   146ba:	19 c0       	rjmp	.+50     	; 0x146ee <SS80_Amigo_Clear+0x7e>
   146bc:	25 ff       	sbrs	r18, 5
   146be:	0a c0       	rjmp	.+20     	; 0x146d4 <SS80_Amigo_Clear+0x64>
   146c0:	86 e2       	ldi	r24, 0x26	; 38
   146c2:	99 e1       	ldi	r25, 0x19	; 25
   146c4:	1f 92       	push	r1
   146c6:	9f 93       	push	r25
   146c8:	8f 93       	push	r24
   146ca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   146ce:	0f 90       	pop	r0
   146d0:	0f 90       	pop	r0
   146d2:	0f 90       	pop	r0
   146d4:	8f e0       	ldi	r24, 0x0F	; 15
   146d6:	90 e0       	ldi	r25, 0x00	; 0
   146d8:	2c df       	rcall	.-424    	; 0x14532 <Clear_Common>
   146da:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   146de:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   146e2:	81 81       	ldd	r24, Z+1	; 0x01
   146e4:	90 e0       	ldi	r25, 0x00	; 0
   146e6:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   146ea:	80 e0       	ldi	r24, 0x00	; 0
   146ec:	90 e0       	ldi	r25, 0x00	; 0
   146ee:	23 96       	adiw	r28, 0x03	; 3
   146f0:	e2 e0       	ldi	r30, 0x02	; 2
   146f2:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000146f6 <SS80_Cancel>:
   146f6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   146fa:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   146fe:	11 82       	std	Z+1, r1	; 0x01
   14700:	10 82       	st	Z, r1
   14702:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14706:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1470a:	81 81       	ldd	r24, Z+1	; 0x01
   1470c:	90 e0       	ldi	r25, 0x00	; 0
   1470e:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   14712:	80 e0       	ldi	r24, 0x00	; 0
   14714:	90 e0       	ldi	r25, 0x00	; 0
   14716:	08 95       	ret

00014718 <SS80_Transparent_State>:
   14718:	a2 e0       	ldi	r26, 0x02	; 2
   1471a:	b0 e0       	ldi	r27, 0x00	; 0
   1471c:	e2 e9       	ldi	r30, 0x92	; 146
   1471e:	f3 ea       	ldi	r31, 0xA3	; 163
   14720:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   14724:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14728:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   1472c:	81 81       	ldd	r24, Z+1	; 0x01
   1472e:	90 e0       	ldi	r25, 0x00	; 0
   14730:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   14734:	80 e0       	ldi	r24, 0x00	; 0
   14736:	91 e0       	ldi	r25, 0x01	; 1
   14738:	9a 83       	std	Y+2, r25	; 0x02
   1473a:	89 83       	std	Y+1, r24	; 0x01
   1473c:	ae 01       	movw	r20, r28
   1473e:	4f 5f       	subi	r20, 0xFF	; 255
   14740:	5f 4f       	sbci	r21, 0xFF	; 255
   14742:	60 e0       	ldi	r22, 0x00	; 0
   14744:	72 e0       	ldi	r23, 0x02	; 2
   14746:	85 ea       	ldi	r24, 0xA5	; 165
   14748:	9c e1       	ldi	r25, 0x1C	; 28
   1474a:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   1474e:	7c 01       	movw	r14, r24
   14750:	89 81       	ldd	r24, Y+1	; 0x01
   14752:	9a 81       	ldd	r25, Y+2	; 0x02
   14754:	9c 01       	movw	r18, r24
   14756:	22 27       	eor	r18, r18
   14758:	30 7d       	andi	r19, 0xD0	; 208
   1475a:	23 2b       	or	r18, r19
   1475c:	79 f0       	breq	.+30     	; 0x1477c <SS80_Transparent_State+0x64>
   1475e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14762:	80 ff       	sbrs	r24, 0
   14764:	e0 c0       	rjmp	.+448    	; 0x14926 <SS80_Transparent_State+0x20e>
   14766:	85 ec       	ldi	r24, 0xC5	; 197
   14768:	9a e1       	ldi	r25, 0x1A	; 26
   1476a:	1f 92       	push	r1
   1476c:	9f 93       	push	r25
   1476e:	8f 93       	push	r24
   14770:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14774:	0f 90       	pop	r0
   14776:	0f 90       	pop	r0
   14778:	0f 90       	pop	r0
   1477a:	d5 c0       	rjmp	.+426    	; 0x14926 <SS80_Transparent_State+0x20e>
   1477c:	e1 14       	cp	r14, r1
   1477e:	f1 04       	cpc	r15, r1
   14780:	09 f4       	brne	.+2      	; 0x14784 <SS80_Transparent_State+0x6c>
   14782:	d6 c0       	rjmp	.+428    	; 0x14930 <SS80_Transparent_State+0x218>
   14784:	90 fd       	sbrc	r25, 0
   14786:	0e c0       	rjmp	.+28     	; 0x147a4 <SS80_Transparent_State+0x8c>
   14788:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1478c:	80 ff       	sbrs	r24, 0
   1478e:	0a c0       	rjmp	.+20     	; 0x147a4 <SS80_Transparent_State+0x8c>
   14790:	8c ea       	ldi	r24, 0xAC	; 172
   14792:	9a e1       	ldi	r25, 0x1A	; 26
   14794:	1f 92       	push	r1
   14796:	9f 93       	push	r25
   14798:	8f 93       	push	r24
   1479a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1479e:	0f 90       	pop	r0
   147a0:	0f 90       	pop	r0
   147a2:	0f 90       	pop	r0
   147a4:	85 ea       	ldi	r24, 0xA5	; 165
   147a6:	a8 2e       	mov	r10, r24
   147a8:	8c e1       	ldi	r24, 0x1C	; 28
   147aa:	b8 2e       	mov	r11, r24
   147ac:	00 e0       	ldi	r16, 0x00	; 0
   147ae:	10 e0       	ldi	r17, 0x00	; 0
   147b0:	0e 15       	cp	r16, r14
   147b2:	1f 05       	cpc	r17, r15
   147b4:	0c f0       	brlt	.+2      	; 0x147b8 <SS80_Transparent_State+0xa0>
   147b6:	a0 c0       	rjmp	.+320    	; 0x148f8 <SS80_Transparent_State+0x1e0>
   147b8:	68 01       	movw	r12, r16
   147ba:	8f ef       	ldi	r24, 0xFF	; 255
   147bc:	c8 1a       	sub	r12, r24
   147be:	d8 0a       	sbc	r13, r24
   147c0:	f5 01       	movw	r30, r10
   147c2:	81 91       	ld	r24, Z+
   147c4:	5f 01       	movw	r10, r30
   147c6:	28 2f       	mov	r18, r24
   147c8:	30 e0       	ldi	r19, 0x00	; 0
   147ca:	a9 01       	movw	r20, r18
   147cc:	40 52       	subi	r20, 0x20	; 32
   147ce:	51 09       	sbc	r21, r1
   147d0:	40 31       	cpi	r20, 0x10	; 16
   147d2:	51 05       	cpc	r21, r1
   147d4:	20 f4       	brcc	.+8      	; 0x147de <SS80_Transparent_State+0xc6>
   147d6:	80 52       	subi	r24, 0x20	; 32
   147d8:	8c d9       	rcall	.-3304   	; 0x13af2 <SS80_Check_Unit>
   147da:	86 01       	movw	r16, r12
   147dc:	e9 cf       	rjmp	.-46     	; 0x147b0 <SS80_Transparent_State+0x98>
   147de:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   147e2:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   147e6:	21 30       	cpi	r18, 0x01	; 1
   147e8:	31 05       	cpc	r19, r1
   147ea:	c9 f4       	brne	.+50     	; 0x1481e <SS80_Transparent_State+0x106>
   147ec:	0e 5f       	subi	r16, 0xFE	; 254
   147ee:	1f 4f       	sbci	r17, 0xFF	; 255
   147f0:	80 73       	andi	r24, 0x30	; 48
   147f2:	99 27       	eor	r25, r25
   147f4:	89 2b       	or	r24, r25
   147f6:	51 f0       	breq	.+20     	; 0x1480c <SS80_Transparent_State+0xf4>
   147f8:	87 e8       	ldi	r24, 0x87	; 135
   147fa:	9a e1       	ldi	r25, 0x1A	; 26
   147fc:	1f 92       	push	r1
   147fe:	9f 93       	push	r25
   14800:	8f 93       	push	r24
   14802:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14806:	0f 90       	pop	r0
   14808:	0f 90       	pop	r0
   1480a:	0f 90       	pop	r0
   1480c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14810:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14814:	81 81       	ldd	r24, Z+1	; 0x01
   14816:	90 e0       	ldi	r25, 0x00	; 0
   14818:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1481c:	6d c0       	rjmp	.+218    	; 0x148f8 <SS80_Transparent_State+0x1e0>
   1481e:	22 30       	cpi	r18, 0x02	; 2
   14820:	31 05       	cpc	r19, r1
   14822:	51 f4       	brne	.+20     	; 0x14838 <SS80_Transparent_State+0x120>
   14824:	0b 5f       	subi	r16, 0xFB	; 251
   14826:	1f 4f       	sbci	r17, 0xFF	; 255
   14828:	80 73       	andi	r24, 0x30	; 48
   1482a:	99 27       	eor	r25, r25
   1482c:	89 2b       	or	r24, r25
   1482e:	09 f4       	brne	.+2      	; 0x14832 <SS80_Transparent_State+0x11a>
   14830:	63 c0       	rjmp	.+198    	; 0x148f8 <SS80_Transparent_State+0x1e0>
   14832:	8a e6       	ldi	r24, 0x6A	; 106
   14834:	9a e1       	ldi	r25, 0x1A	; 26
   14836:	0c c0       	rjmp	.+24     	; 0x14850 <SS80_Transparent_State+0x138>
   14838:	23 30       	cpi	r18, 0x03	; 3
   1483a:	31 05       	cpc	r19, r1
   1483c:	91 f4       	brne	.+36     	; 0x14862 <SS80_Transparent_State+0x14a>
   1483e:	0b 5f       	subi	r16, 0xFB	; 251
   14840:	1f 4f       	sbci	r17, 0xFF	; 255
   14842:	80 73       	andi	r24, 0x30	; 48
   14844:	99 27       	eor	r25, r25
   14846:	89 2b       	or	r24, r25
   14848:	09 f4       	brne	.+2      	; 0x1484c <SS80_Transparent_State+0x134>
   1484a:	56 c0       	rjmp	.+172    	; 0x148f8 <SS80_Transparent_State+0x1e0>
   1484c:	8c e4       	ldi	r24, 0x4C	; 76
   1484e:	9a e1       	ldi	r25, 0x1A	; 26
   14850:	1f 92       	push	r1
   14852:	9f 93       	push	r25
   14854:	8f 93       	push	r24
   14856:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1485a:	0f 90       	pop	r0
   1485c:	0f 90       	pop	r0
   1485e:	0f 90       	pop	r0
   14860:	4b c0       	rjmp	.+150    	; 0x148f8 <SS80_Transparent_State+0x1e0>
   14862:	28 30       	cpi	r18, 0x08	; 8
   14864:	31 05       	cpc	r19, r1
   14866:	e9 f4       	brne	.+58     	; 0x148a2 <SS80_Transparent_State+0x18a>
   14868:	85 ff       	sbrs	r24, 5
   1486a:	13 c0       	rjmp	.+38     	; 0x14892 <SS80_Transparent_State+0x17a>
   1486c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14870:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14874:	85 81       	ldd	r24, Z+5	; 0x05
   14876:	1f 92       	push	r1
   14878:	8f 93       	push	r24
   1487a:	85 e2       	ldi	r24, 0x25	; 37
   1487c:	9a e1       	ldi	r25, 0x1A	; 26
   1487e:	1f 92       	push	r1
   14880:	9f 93       	push	r25
   14882:	8f 93       	push	r24
   14884:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14888:	0f 90       	pop	r0
   1488a:	0f 90       	pop	r0
   1488c:	0f 90       	pop	r0
   1488e:	0f 90       	pop	r0
   14890:	0f 90       	pop	r0
   14892:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14896:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   1489a:	85 81       	ldd	r24, Z+5	; 0x05
   1489c:	90 e0       	ldi	r25, 0x00	; 0
   1489e:	ae de       	rcall	.-676    	; 0x145fc <SS80_Channel_Independent_Clear>
   148a0:	49 c0       	rjmp	.+146    	; 0x14934 <SS80_Transparent_State+0x21c>
   148a2:	29 30       	cpi	r18, 0x09	; 9
   148a4:	31 05       	cpc	r19, r1
   148a6:	b9 f4       	brne	.+46     	; 0x148d6 <SS80_Transparent_State+0x1be>
   148a8:	85 ff       	sbrs	r24, 5
   148aa:	13 c0       	rjmp	.+38     	; 0x148d2 <SS80_Transparent_State+0x1ba>
   148ac:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   148b0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   148b4:	85 81       	ldd	r24, Z+5	; 0x05
   148b6:	1f 92       	push	r1
   148b8:	8f 93       	push	r24
   148ba:	81 e1       	ldi	r24, 0x11	; 17
   148bc:	9a e1       	ldi	r25, 0x1A	; 26
   148be:	1f 92       	push	r1
   148c0:	9f 93       	push	r25
   148c2:	8f 93       	push	r24
   148c4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   148c8:	0f 90       	pop	r0
   148ca:	0f 90       	pop	r0
   148cc:	0f 90       	pop	r0
   148ce:	0f 90       	pop	r0
   148d0:	0f 90       	pop	r0
   148d2:	11 df       	rcall	.-478    	; 0x146f6 <SS80_Cancel>
   148d4:	2f c0       	rjmp	.+94     	; 0x14934 <SS80_Transparent_State+0x21c>
   148d6:	80 ff       	sbrs	r24, 0
   148d8:	26 c0       	rjmp	.+76     	; 0x14926 <SS80_Transparent_State+0x20e>
   148da:	3f 93       	push	r19
   148dc:	2f 93       	push	r18
   148de:	81 ef       	ldi	r24, 0xF1	; 241
   148e0:	99 e1       	ldi	r25, 0x19	; 25
   148e2:	1f 92       	push	r1
   148e4:	9f 93       	push	r25
   148e6:	8f 93       	push	r24
   148e8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   148ec:	0f 90       	pop	r0
   148ee:	0f 90       	pop	r0
   148f0:	0f 90       	pop	r0
   148f2:	0f 90       	pop	r0
   148f4:	0f 90       	pop	r0
   148f6:	86 01       	movw	r16, r12
   148f8:	0e 15       	cp	r16, r14
   148fa:	1f 05       	cpc	r17, r15
   148fc:	a1 f0       	breq	.+40     	; 0x14926 <SS80_Transparent_State+0x20e>
   148fe:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14902:	80 ff       	sbrs	r24, 0
   14904:	10 c0       	rjmp	.+32     	; 0x14926 <SS80_Transparent_State+0x20e>
   14906:	ff 92       	push	r15
   14908:	ef 92       	push	r14
   1490a:	1f 93       	push	r17
   1490c:	0f 93       	push	r16
   1490e:	85 eb       	ldi	r24, 0xB5	; 181
   14910:	99 e1       	ldi	r25, 0x19	; 25
   14912:	1f 92       	push	r1
   14914:	9f 93       	push	r25
   14916:	8f 93       	push	r24
   14918:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1491c:	0f b6       	in	r0, 0x3f	; 63
   1491e:	f8 94       	cli
   14920:	de bf       	out	0x3e, r29	; 62
   14922:	0f be       	out	0x3f, r0	; 63
   14924:	cd bf       	out	0x3d, r28	; 61
   14926:	89 81       	ldd	r24, Y+1	; 0x01
   14928:	9a 81       	ldd	r25, Y+2	; 0x02
   1492a:	88 27       	eor	r24, r24
   1492c:	90 7d       	andi	r25, 0xD0	; 208
   1492e:	02 c0       	rjmp	.+4      	; 0x14934 <SS80_Transparent_State+0x21c>
   14930:	80 e0       	ldi	r24, 0x00	; 0
   14932:	90 e0       	ldi	r25, 0x00	; 0
   14934:	22 96       	adiw	r28, 0x02	; 2
   14936:	ea e0       	ldi	r30, 0x0A	; 10
   14938:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001493c <SS80_error_return>:
   1493c:	a3 e0       	ldi	r26, 0x03	; 3
   1493e:	b0 e0       	ldi	r27, 0x00	; 0
   14940:	e4 ea       	ldi	r30, 0xA4	; 164
   14942:	f4 ea       	ldi	r31, 0xA4	; 164
   14944:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   14948:	80 e0       	ldi	r24, 0x00	; 0
   1494a:	91 e0       	ldi	r25, 0x01	; 1
   1494c:	9a 83       	std	Y+2, r25	; 0x02
   1494e:	89 83       	std	Y+1, r24	; 0x01
   14950:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14954:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14958:	81 e0       	ldi	r24, 0x01	; 1
   1495a:	82 83       	std	Z+2, r24	; 0x02
   1495c:	8b 83       	std	Y+3, r24	; 0x03
   1495e:	ae 01       	movw	r20, r28
   14960:	4f 5f       	subi	r20, 0xFF	; 255
   14962:	5f 4f       	sbci	r21, 0xFF	; 255
   14964:	61 e0       	ldi	r22, 0x01	; 1
   14966:	70 e0       	ldi	r23, 0x00	; 0
   14968:	ce 01       	movw	r24, r28
   1496a:	03 96       	adiw	r24, 0x03	; 3
   1496c:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   14970:	01 97       	sbiw	r24, 0x01	; 1
   14972:	99 f0       	breq	.+38     	; 0x1499a <SS80_error_return+0x5e>
   14974:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14978:	80 ff       	sbrs	r24, 0
   1497a:	0a c0       	rjmp	.+20     	; 0x14990 <SS80_error_return+0x54>
   1497c:	87 ee       	ldi	r24, 0xE7	; 231
   1497e:	98 e1       	ldi	r25, 0x18	; 24
   14980:	1f 92       	push	r1
   14982:	9f 93       	push	r25
   14984:	8f 93       	push	r24
   14986:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1498a:	0f 90       	pop	r0
   1498c:	0f 90       	pop	r0
   1498e:	0f 90       	pop	r0
   14990:	89 81       	ldd	r24, Y+1	; 0x01
   14992:	9a 81       	ldd	r25, Y+2	; 0x02
   14994:	88 27       	eor	r24, r24
   14996:	90 7d       	andi	r25, 0xD0	; 208
   14998:	07 c0       	rjmp	.+14     	; 0x149a8 <SS80_error_return+0x6c>
   1499a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   1499e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   149a2:	12 82       	std	Z+2, r1	; 0x02
   149a4:	80 e0       	ldi	r24, 0x00	; 0
   149a6:	90 e0       	ldi	r25, 0x00	; 0
   149a8:	23 96       	adiw	r28, 0x03	; 3
   149aa:	e2 e0       	ldi	r30, 0x02	; 2
   149ac:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000149b0 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   149b0:	ac e0       	ldi	r26, 0x0C	; 12
   149b2:	b0 e0       	ldi	r27, 0x00	; 0
   149b4:	ee ed       	ldi	r30, 0xDE	; 222
   149b6:	f4 ea       	ldi	r31, 0xA4	; 164
   149b8:	0c 94 3c e9 	jmp	0x1d278	; 0x1d278 <__prologue_saves__+0x2>
   149bc:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   149c0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   149c4:	27 81       	ldd	r18, Z+7	; 0x07
   149c6:	30 85       	ldd	r19, Z+8	; 0x08
   149c8:	41 85       	ldd	r20, Z+9	; 0x09
   149ca:	52 85       	ldd	r21, Z+10	; 0x0a
   149cc:	a0 91 5c 19 	lds	r26, 0x195C	; 0x80195c <SS80p>
   149d0:	b0 91 5d 19 	lds	r27, 0x195D	; 0x80195d <SS80p+0x1>
   149d4:	9f 96       	adiw	r26, 0x2f	; 47
   149d6:	0d 90       	ld	r0, X+
   149d8:	bc 91       	ld	r27, X
   149da:	a0 2d       	mov	r26, r0
   149dc:	12 82       	std	Z+2, r1	; 0x02
   149de:	1a 82       	std	Y+2, r1	; 0x02
   149e0:	19 82       	std	Y+1, r1	; 0x01
   149e2:	54 98       	cbi	0x0a, 4	; 10
   149e4:	4c 99       	sbic	0x09, 4	; 9
   149e6:	03 c0       	rjmp	.+6      	; 0x149ee <SS80_locate_and_read+0x3e>
   149e8:	80 e0       	ldi	r24, 0x00	; 0
   149ea:	90 e1       	ldi	r25, 0x10	; 16
   149ec:	45 c1       	rjmp	.+650    	; 0x14c78 <SS80_locate_and_read+0x2c8>
   149ee:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__muluhisi3>
   149f2:	4b 01       	movw	r8, r22
   149f4:	5c 01       	movw	r10, r24
   149f6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   149fa:	85 ff       	sbrs	r24, 5
   149fc:	1c c0       	rjmp	.+56     	; 0x14a36 <SS80_locate_and_read+0x86>
   149fe:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14a02:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14a06:	86 85       	ldd	r24, Z+14	; 0x0e
   14a08:	8f 93       	push	r24
   14a0a:	85 85       	ldd	r24, Z+13	; 0x0d
   14a0c:	8f 93       	push	r24
   14a0e:	84 85       	ldd	r24, Z+12	; 0x0c
   14a10:	8f 93       	push	r24
   14a12:	83 85       	ldd	r24, Z+11	; 0x0b
   14a14:	8f 93       	push	r24
   14a16:	bf 92       	push	r11
   14a18:	af 92       	push	r10
   14a1a:	9f 92       	push	r9
   14a1c:	8f 92       	push	r8
   14a1e:	8b ed       	ldi	r24, 0xDB	; 219
   14a20:	9f e1       	ldi	r25, 0x1F	; 31
   14a22:	1f 92       	push	r1
   14a24:	9f 93       	push	r25
   14a26:	8f 93       	push	r24
   14a28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14a2c:	0f b6       	in	r0, 0x3f	; 63
   14a2e:	f8 94       	cli
   14a30:	de bf       	out	0x3e, r29	; 62
   14a32:	0f be       	out	0x3f, r0	; 63
   14a34:	cd bf       	out	0x3d, r28	; 61
   14a36:	17 db       	rcall	.-2514   	; 0x14066 <SS80_cmd_seek>
   14a38:	89 2b       	or	r24, r25
   14a3a:	09 f0       	breq	.+2      	; 0x14a3e <SS80_locate_and_read+0x8e>
   14a3c:	af c0       	rjmp	.+350    	; 0x14b9c <SS80_locate_and_read+0x1ec>
   14a3e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14a42:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14a46:	43 84       	ldd	r4, Z+11	; 0x0b
   14a48:	54 84       	ldd	r5, Z+12	; 0x0c
   14a4a:	65 84       	ldd	r6, Z+13	; 0x0d
   14a4c:	76 84       	ldd	r7, Z+14	; 0x0e
   14a4e:	1b 82       	std	Y+3, r1	; 0x03
   14a50:	1c 82       	std	Y+4, r1	; 0x04
   14a52:	1d 82       	std	Y+5, r1	; 0x05
   14a54:	1e 82       	std	Y+6, r1	; 0x06
   14a56:	8d eb       	ldi	r24, 0xBD	; 189
   14a58:	9f e1       	ldi	r25, 0x1F	; 31
   14a5a:	9c 01       	movw	r18, r24
   14a5c:	40 e0       	ldi	r20, 0x00	; 0
   14a5e:	2f 83       	std	Y+7, r18	; 0x07
   14a60:	38 87       	std	Y+8, r19	; 0x08
   14a62:	49 87       	std	Y+9, r20	; 0x09
   14a64:	33 24       	eor	r3, r3
   14a66:	33 94       	inc	r3
   14a68:	8c e8       	ldi	r24, 0x8C	; 140
   14a6a:	9f e1       	ldi	r25, 0x1F	; 31
   14a6c:	9c 01       	movw	r18, r24
   14a6e:	40 e0       	ldi	r20, 0x00	; 0
   14a70:	2a 87       	std	Y+10, r18	; 0x0a
   14a72:	3b 87       	std	Y+11, r19	; 0x0b
   14a74:	4c 87       	std	Y+12, r20	; 0x0c
   14a76:	34 c0       	rjmp	.+104    	; 0x14ae0 <SS80_locate_and_read+0x130>
   14a78:	86 fd       	sbrc	r24, 6
   14a7a:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   14a7e:	ae 01       	movw	r20, r28
   14a80:	4f 5f       	subi	r20, 0xFF	; 255
   14a82:	5f 4f       	sbci	r21, 0xFF	; 255
   14a84:	b6 01       	movw	r22, r12
   14a86:	85 ea       	ldi	r24, 0xA5	; 165
   14a88:	9c e1       	ldi	r25, 0x1C	; 28
   14a8a:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   14a8e:	8c 01       	movw	r16, r24
   14a90:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14a94:	86 ff       	sbrs	r24, 6
   14a96:	04 c0       	rjmp	.+8      	; 0x14aa0 <SS80_locate_and_read+0xf0>
   14a98:	81 e0       	ldi	r24, 0x01	; 1
   14a9a:	9e e0       	ldi	r25, 0x0E	; 14
   14a9c:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   14aa0:	c0 16       	cp	r12, r16
   14aa2:	d1 06       	cpc	r13, r17
   14aa4:	09 f0       	breq	.+2      	; 0x14aa8 <SS80_locate_and_read+0xf8>
   14aa6:	83 c0       	rjmp	.+262    	; 0x14bae <SS80_locate_and_read+0x1fe>
   14aa8:	0d 2c       	mov	r0, r13
   14aaa:	00 0c       	add	r0, r0
   14aac:	ee 08       	sbc	r14, r14
   14aae:	ff 08       	sbc	r15, r15
   14ab0:	8c 0c       	add	r8, r12
   14ab2:	9d 1c       	adc	r9, r13
   14ab4:	ae 1c       	adc	r10, r14
   14ab6:	bf 1c       	adc	r11, r15
   14ab8:	01 2e       	mov	r0, r17
   14aba:	00 0c       	add	r0, r0
   14abc:	22 0b       	sbc	r18, r18
   14abe:	33 0b       	sbc	r19, r19
   14ac0:	8b 81       	ldd	r24, Y+3	; 0x03
   14ac2:	9c 81       	ldd	r25, Y+4	; 0x04
   14ac4:	ad 81       	ldd	r26, Y+5	; 0x05
   14ac6:	be 81       	ldd	r27, Y+6	; 0x06
   14ac8:	80 0f       	add	r24, r16
   14aca:	91 1f       	adc	r25, r17
   14acc:	a2 1f       	adc	r26, r18
   14ace:	b3 1f       	adc	r27, r19
   14ad0:	8b 83       	std	Y+3, r24	; 0x03
   14ad2:	9c 83       	std	Y+4, r25	; 0x04
   14ad4:	ad 83       	std	Y+5, r26	; 0x05
   14ad6:	be 83       	std	Y+6, r27	; 0x06
   14ad8:	40 1a       	sub	r4, r16
   14ada:	51 0a       	sbc	r5, r17
   14adc:	62 0a       	sbc	r6, r18
   14ade:	73 0a       	sbc	r7, r19
   14ae0:	41 14       	cp	r4, r1
   14ae2:	51 04       	cpc	r5, r1
   14ae4:	61 04       	cpc	r6, r1
   14ae6:	71 04       	cpc	r7, r1
   14ae8:	09 f4       	brne	.+2      	; 0x14aec <SS80_locate_and_read+0x13c>
   14aea:	93 c0       	rjmp	.+294    	; 0x14c12 <SS80_locate_and_read+0x262>
   14aec:	54 98       	cbi	0x0a, 4	; 10
   14aee:	4c 9b       	sbis	0x09, 4	; 9
   14af0:	7b cf       	rjmp	.-266    	; 0x149e8 <SS80_locate_and_read+0x38>
   14af2:	31 e0       	ldi	r19, 0x01	; 1
   14af4:	43 16       	cp	r4, r19
   14af6:	53 06       	cpc	r5, r19
   14af8:	61 04       	cpc	r6, r1
   14afa:	71 04       	cpc	r7, r1
   14afc:	08 f4       	brcc	.+2      	; 0x14b00 <SS80_locate_and_read+0x150>
   14afe:	50 c0       	rjmp	.+160    	; 0x14ba0 <SS80_locate_and_read+0x1f0>
   14b00:	1a 82       	std	Y+2, r1	; 0x02
   14b02:	19 82       	std	Y+1, r1	; 0x01
   14b04:	c1 2c       	mov	r12, r1
   14b06:	dd 24       	eor	r13, r13
   14b08:	d3 94       	inc	r13
   14b0a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14b0e:	86 fd       	sbrc	r24, 6
   14b10:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   14b14:	e0 90 5a 19 	lds	r14, 0x195A	; 0x80195a <SS80s>
   14b18:	f0 90 5b 19 	lds	r15, 0x195B	; 0x80195b <SS80s+0x1>
   14b1c:	43 e0       	ldi	r20, 0x03	; 3
   14b1e:	e4 0e       	add	r14, r20
   14b20:	f1 1c       	adc	r15, r1
   14b22:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <SS80p>
   14b26:	90 91 5d 19 	lds	r25, 0x195D	; 0x80195d <SS80p+0x1>
   14b2a:	86 01       	movw	r16, r12
   14b2c:	25 ea       	ldi	r18, 0xA5	; 165
   14b2e:	3c e1       	ldi	r19, 0x1C	; 28
   14b30:	b5 01       	movw	r22, r10
   14b32:	a4 01       	movw	r20, r8
   14b34:	02 96       	adiw	r24, 0x02	; 2
   14b36:	0e 94 17 8b 	call	0x1162e	; 0x1162e <dbf_open_read>
   14b3a:	8c 01       	movw	r16, r24
   14b3c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14b40:	86 ff       	sbrs	r24, 6
   14b42:	04 c0       	rjmp	.+8      	; 0x14b4c <SS80_locate_and_read+0x19c>
   14b44:	87 ef       	ldi	r24, 0xF7	; 247
   14b46:	9d e0       	ldi	r25, 0x0D	; 13
   14b48:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   14b4c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14b50:	85 ff       	sbrs	r24, 5
   14b52:	0e c0       	rjmp	.+28     	; 0x14b70 <SS80_locate_and_read+0x1c0>
   14b54:	1f 93       	push	r17
   14b56:	0f 93       	push	r16
   14b58:	1f 92       	push	r1
   14b5a:	88 85       	ldd	r24, Y+8	; 0x08
   14b5c:	8f 93       	push	r24
   14b5e:	9f 81       	ldd	r25, Y+7	; 0x07
   14b60:	9f 93       	push	r25
   14b62:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14b66:	0f 90       	pop	r0
   14b68:	0f 90       	pop	r0
   14b6a:	0f 90       	pop	r0
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14b74:	17 ff       	sbrs	r17, 7
   14b76:	80 cf       	rjmp	.-256    	; 0x14a78 <SS80_locate_and_read+0xc8>
   14b78:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14b7c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14b80:	91 e0       	ldi	r25, 0x01	; 1
   14b82:	92 83       	std	Z+2, r25	; 0x02
   14b84:	80 ff       	sbrs	r24, 0
   14b86:	0a c0       	rjmp	.+20     	; 0x14b9c <SS80_locate_and_read+0x1ec>
   14b88:	85 ea       	ldi	r24, 0xA5	; 165
   14b8a:	9f e1       	ldi	r25, 0x1F	; 31
   14b8c:	1f 92       	push	r1
   14b8e:	9f 93       	push	r25
   14b90:	8f 93       	push	r24
   14b92:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14b96:	0f 90       	pop	r0
   14b98:	0f 90       	pop	r0
   14b9a:	0f 90       	pop	r0
   14b9c:	cf de       	rcall	.-610    	; 0x1493c <SS80_error_return>
   14b9e:	6c c0       	rjmp	.+216    	; 0x14c78 <SS80_locate_and_read+0x2c8>
   14ba0:	62 01       	movw	r12, r4
   14ba2:	89 81       	ldd	r24, Y+1	; 0x01
   14ba4:	9a 81       	ldd	r25, Y+2	; 0x02
   14ba6:	91 60       	ori	r25, 0x01	; 1
   14ba8:	9a 83       	std	Y+2, r25	; 0x02
   14baa:	89 83       	std	Y+1, r24	; 0x01
   14bac:	ae cf       	rjmp	.-164    	; 0x14b0a <SS80_locate_and_read+0x15a>
   14bae:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14bb2:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14bb6:	32 82       	std	Z+2, r3	; 0x02
   14bb8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14bbc:	80 ff       	sbrs	r24, 0
   14bbe:	0a c0       	rjmp	.+20     	; 0x14bd4 <SS80_locate_and_read+0x224>
   14bc0:	1f 92       	push	r1
   14bc2:	ab 85       	ldd	r26, Y+11	; 0x0b
   14bc4:	af 93       	push	r26
   14bc6:	ba 85       	ldd	r27, Y+10	; 0x0a
   14bc8:	bf 93       	push	r27
   14bca:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14bce:	0f 90       	pop	r0
   14bd0:	0f 90       	pop	r0
   14bd2:	0f 90       	pop	r0
   14bd4:	89 81       	ldd	r24, Y+1	; 0x01
   14bd6:	9a 81       	ldd	r25, Y+2	; 0x02
   14bd8:	88 27       	eor	r24, r24
   14bda:	90 7d       	andi	r25, 0xD0	; 208
   14bdc:	89 2b       	or	r24, r25
   14bde:	09 f4       	brne	.+2      	; 0x14be2 <SS80_locate_and_read+0x232>
   14be0:	63 cf       	rjmp	.-314    	; 0x14aa8 <SS80_locate_and_read+0xf8>
   14be2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14be6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14bea:	83 81       	ldd	r24, Z+3	; 0x03
   14bec:	94 81       	ldd	r25, Z+4	; 0x04
   14bee:	80 62       	ori	r24, 0x20	; 32
   14bf0:	94 83       	std	Z+4, r25	; 0x04
   14bf2:	83 83       	std	Z+3, r24	; 0x03
   14bf4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14bf8:	80 ff       	sbrs	r24, 0
   14bfa:	23 c0       	rjmp	.+70     	; 0x14c42 <SS80_locate_and_read+0x292>
   14bfc:	87 e6       	ldi	r24, 0x67	; 103
   14bfe:	9f e1       	ldi	r25, 0x1F	; 31
   14c00:	1f 92       	push	r1
   14c02:	9f 93       	push	r25
   14c04:	8f 93       	push	r24
   14c06:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14c0a:	0f 90       	pop	r0
   14c0c:	0f 90       	pop	r0
   14c0e:	0f 90       	pop	r0
   14c10:	18 c0       	rjmp	.+48     	; 0x14c42 <SS80_locate_and_read+0x292>
   14c12:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14c16:	85 ff       	sbrs	r24, 5
   14c18:	14 c0       	rjmp	.+40     	; 0x14c42 <SS80_locate_and_read+0x292>
   14c1a:	9e 81       	ldd	r25, Y+6	; 0x06
   14c1c:	9f 93       	push	r25
   14c1e:	ad 81       	ldd	r26, Y+5	; 0x05
   14c20:	af 93       	push	r26
   14c22:	bc 81       	ldd	r27, Y+4	; 0x04
   14c24:	bf 93       	push	r27
   14c26:	eb 81       	ldd	r30, Y+3	; 0x03
   14c28:	ef 93       	push	r30
   14c2a:	8f e3       	ldi	r24, 0x3F	; 63
   14c2c:	9f e1       	ldi	r25, 0x1F	; 31
   14c2e:	1f 92       	push	r1
   14c30:	9f 93       	push	r25
   14c32:	8f 93       	push	r24
   14c34:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14c38:	0f b6       	in	r0, 0x3f	; 63
   14c3a:	f8 94       	cli
   14c3c:	de bf       	out	0x3e, r29	; 62
   14c3e:	0f be       	out	0x3f, r0	; 63
   14c40:	cd bf       	out	0x3d, r28	; 61
   14c42:	00 91 5a 19 	lds	r16, 0x195A	; 0x80195a <SS80s>
   14c46:	10 91 5b 19 	lds	r17, 0x195B	; 0x80195b <SS80s+0x1>
   14c4a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14c4e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14c52:	27 a5       	ldd	r18, Z+47	; 0x2f
   14c54:	30 a9       	ldd	r19, Z+48	; 0x30
   14c56:	40 e0       	ldi	r20, 0x00	; 0
   14c58:	50 e0       	ldi	r21, 0x00	; 0
   14c5a:	c5 01       	movw	r24, r10
   14c5c:	b4 01       	movw	r22, r8
   14c5e:	0e 94 ce e8 	call	0x1d19c	; 0x1d19c <__udivmodsi4>
   14c62:	d8 01       	movw	r26, r16
   14c64:	17 96       	adiw	r26, 0x07	; 7
   14c66:	2d 93       	st	X+, r18
   14c68:	3d 93       	st	X+, r19
   14c6a:	4d 93       	st	X+, r20
   14c6c:	5c 93       	st	X, r21
   14c6e:	1a 97       	sbiw	r26, 0x0a	; 10
   14c70:	89 81       	ldd	r24, Y+1	; 0x01
   14c72:	9a 81       	ldd	r25, Y+2	; 0x02
   14c74:	88 27       	eor	r24, r24
   14c76:	90 7d       	andi	r25, 0xD0	; 208
   14c78:	2c 96       	adiw	r28, 0x0c	; 12
   14c7a:	e1 e1       	ldi	r30, 0x11	; 17
   14c7c:	0c 94 58 e9 	jmp	0x1d2b0	; 0x1d2b0 <__epilogue_restores__+0x2>

00014c80 <SS80_Execute_State>:
   14c80:	cf 93       	push	r28
   14c82:	df 93       	push	r29
   14c84:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14c88:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14c8c:	81 81       	ldd	r24, Z+1	; 0x01
   14c8e:	90 e0       	ldi	r25, 0x00	; 0
   14c90:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   14c94:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14c98:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14c9c:	80 81       	ld	r24, Z
   14c9e:	91 81       	ldd	r25, Z+1	; 0x01
   14ca0:	82 30       	cpi	r24, 0x02	; 2
   14ca2:	91 05       	cpc	r25, r1
   14ca4:	89 f0       	breq	.+34     	; 0x14cc8 <SS80_Execute_State+0x48>
   14ca6:	3c f4       	brge	.+14     	; 0x14cb6 <SS80_Execute_State+0x36>
   14ca8:	00 97       	sbiw	r24, 0x00	; 0
   14caa:	91 f1       	breq	.+100    	; 0x14d10 <SS80_Execute_State+0x90>
   14cac:	81 30       	cpi	r24, 0x01	; 1
   14cae:	91 05       	cpc	r25, r1
   14cb0:	b9 f4       	brne	.+46     	; 0x14ce0 <SS80_Execute_State+0x60>
   14cb2:	7e de       	rcall	.-772    	; 0x149b0 <SS80_locate_and_read>
   14cb4:	0d c0       	rjmp	.+26     	; 0x14cd0 <SS80_Execute_State+0x50>
   14cb6:	83 30       	cpi	r24, 0x03	; 3
   14cb8:	91 05       	cpc	r25, r1
   14cba:	41 f0       	breq	.+16     	; 0x14ccc <SS80_Execute_State+0x4c>
   14cbc:	84 30       	cpi	r24, 0x04	; 4
   14cbe:	91 05       	cpc	r25, r1
   14cc0:	79 f4       	brne	.+30     	; 0x14ce0 <SS80_Execute_State+0x60>
   14cc2:	0e 94 09 9d 	call	0x13a12	; 0x13a12 <SS80_describe>
   14cc6:	04 c0       	rjmp	.+8      	; 0x14cd0 <SS80_Execute_State+0x50>
   14cc8:	4f da       	rcall	.-2914   	; 0x14168 <SS80_locate_and_write>
   14cca:	02 c0       	rjmp	.+4      	; 0x14cd0 <SS80_Execute_State+0x50>
   14ccc:	0e 94 88 9c 	call	0x13910	; 0x13910 <SS80_send_status>
   14cd0:	ec 01       	movw	r28, r24
   14cd2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14cd6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14cda:	11 82       	std	Z+1, r1	; 0x01
   14cdc:	10 82       	st	Z, r1
   14cde:	1a c0       	rjmp	.+52     	; 0x14d14 <SS80_Execute_State+0x94>
   14ce0:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   14ce4:	20 ff       	sbrs	r18, 0
   14ce6:	0e c0       	rjmp	.+28     	; 0x14d04 <SS80_Execute_State+0x84>
   14ce8:	9f 93       	push	r25
   14cea:	8f 93       	push	r24
   14cec:	83 e0       	ldi	r24, 0x03	; 3
   14cee:	90 e2       	ldi	r25, 0x20	; 32
   14cf0:	1f 92       	push	r1
   14cf2:	9f 93       	push	r25
   14cf4:	8f 93       	push	r24
   14cf6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14cfa:	0f 90       	pop	r0
   14cfc:	0f 90       	pop	r0
   14cfe:	0f 90       	pop	r0
   14d00:	0f 90       	pop	r0
   14d02:	0f 90       	pop	r0
   14d04:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <SS80s>
   14d08:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <SS80s+0x1>
   14d0c:	11 82       	std	Z+1, r1	; 0x01
   14d0e:	10 82       	st	Z, r1
   14d10:	c0 e0       	ldi	r28, 0x00	; 0
   14d12:	d0 e0       	ldi	r29, 0x00	; 0
   14d14:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14d18:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14d1c:	81 81       	ldd	r24, Z+1	; 0x01
   14d1e:	90 e0       	ldi	r25, 0x00	; 0
   14d20:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   14d24:	ce 01       	movw	r24, r28
   14d26:	df 91       	pop	r29
   14d28:	cf 91       	pop	r28
   14d2a:	08 95       	ret

00014d2c <SS80_COMMANDS>:
   14d2c:	1f 93       	push	r17
   14d2e:	cf 93       	push	r28
   14d30:	df 93       	push	r29
   14d32:	18 2f       	mov	r17, r24
   14d34:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   14d38:	90 e0       	ldi	r25, 0x00	; 0
   14d3a:	0e 94 86 92 	call	0x1250c	; 0x1250c <SS80_is_MTA>
   14d3e:	89 2b       	or	r24, r25
   14d40:	19 f0       	breq	.+6      	; 0x14d48 <SS80_COMMANDS+0x1c>
   14d42:	15 36       	cpi	r17, 0x65	; 101
   14d44:	19 f5       	brne	.+70     	; 0x14d8c <SS80_COMMANDS+0x60>
   14d46:	09 c0       	rjmp	.+18     	; 0x14d5a <SS80_COMMANDS+0x2e>
   14d48:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14d4c:	90 e0       	ldi	r25, 0x00	; 0
   14d4e:	0e 94 75 92 	call	0x124ea	; 0x124ea <SS80_is_MLA>
   14d52:	ec 01       	movw	r28, r24
   14d54:	89 2b       	or	r24, r25
   14d56:	a9 f7       	brne	.-22     	; 0x14d42 <SS80_COMMANDS+0x16>
   14d58:	ae c0       	rjmp	.+348    	; 0x14eb6 <SS80_COMMANDS+0x18a>
   14d5a:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14d5e:	90 e0       	ldi	r25, 0x00	; 0
   14d60:	0e 94 75 92 	call	0x124ea	; 0x124ea <SS80_is_MLA>
   14d64:	89 2b       	or	r24, r25
   14d66:	09 f4       	brne	.+2      	; 0x14d6a <SS80_COMMANDS+0x3e>
   14d68:	a3 c0       	rjmp	.+326    	; 0x14eb0 <SS80_COMMANDS+0x184>
   14d6a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14d6e:	85 ff       	sbrs	r24, 5
   14d70:	0a c0       	rjmp	.+20     	; 0x14d86 <SS80_COMMANDS+0x5a>
   14d72:	81 ed       	ldi	r24, 0xD1	; 209
   14d74:	98 e1       	ldi	r25, 0x18	; 24
   14d76:	1f 92       	push	r1
   14d78:	9f 93       	push	r25
   14d7a:	8f 93       	push	r24
   14d7c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14d80:	0f 90       	pop	r0
   14d82:	0f 90       	pop	r0
   14d84:	0f 90       	pop	r0
   14d86:	0e 94 bb 9d 	call	0x13b76	; 0x13b76 <SS80_Command_State>
   14d8a:	73 c0       	rjmp	.+230    	; 0x14e72 <SS80_COMMANDS+0x146>
   14d8c:	1e 36       	cpi	r17, 0x6E	; 110
   14d8e:	01 f5       	brne	.+64     	; 0x14dd0 <SS80_COMMANDS+0xa4>
   14d90:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14d94:	90 e0       	ldi	r25, 0x00	; 0
   14d96:	0e 94 75 92 	call	0x124ea	; 0x124ea <SS80_is_MLA>
   14d9a:	89 2b       	or	r24, r25
   14d9c:	79 f0       	breq	.+30     	; 0x14dbc <SS80_COMMANDS+0x90>
   14d9e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14da2:	85 ff       	sbrs	r24, 5
   14da4:	13 c0       	rjmp	.+38     	; 0x14dcc <SS80_COMMANDS+0xa0>
   14da6:	8b eb       	ldi	r24, 0xBB	; 187
   14da8:	98 e1       	ldi	r25, 0x18	; 24
   14daa:	1f 92       	push	r1
   14dac:	9f 93       	push	r25
   14dae:	8f 93       	push	r24
   14db0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14db4:	0f 90       	pop	r0
   14db6:	0f 90       	pop	r0
   14db8:	0f 90       	pop	r0
   14dba:	08 c0       	rjmp	.+16     	; 0x14dcc <SS80_COMMANDS+0xa0>
   14dbc:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   14dc0:	90 e0       	ldi	r25, 0x00	; 0
   14dc2:	0e 94 86 92 	call	0x1250c	; 0x1250c <SS80_is_MTA>
   14dc6:	89 2b       	or	r24, r25
   14dc8:	51 f7       	brne	.-44     	; 0x14d9e <SS80_COMMANDS+0x72>
   14dca:	72 c0       	rjmp	.+228    	; 0x14eb0 <SS80_COMMANDS+0x184>
   14dcc:	59 df       	rcall	.-334    	; 0x14c80 <SS80_Execute_State>
   14dce:	51 c0       	rjmp	.+162    	; 0x14e72 <SS80_COMMANDS+0x146>
   14dd0:	10 37       	cpi	r17, 0x70	; 112
   14dd2:	b9 f5       	brne	.+110    	; 0x14e42 <SS80_COMMANDS+0x116>
   14dd4:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   14dd8:	90 e0       	ldi	r25, 0x00	; 0
   14dda:	0e 94 86 92 	call	0x1250c	; 0x1250c <SS80_is_MTA>
   14dde:	89 2b       	or	r24, r25
   14de0:	81 f0       	breq	.+32     	; 0x14e02 <SS80_COMMANDS+0xd6>
   14de2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14de6:	85 ff       	sbrs	r24, 5
   14de8:	0a c0       	rjmp	.+20     	; 0x14dfe <SS80_COMMANDS+0xd2>
   14dea:	86 ea       	ldi	r24, 0xA6	; 166
   14dec:	98 e1       	ldi	r25, 0x18	; 24
   14dee:	1f 92       	push	r1
   14df0:	9f 93       	push	r25
   14df2:	8f 93       	push	r24
   14df4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14df8:	0f 90       	pop	r0
   14dfa:	0f 90       	pop	r0
   14dfc:	0f 90       	pop	r0
   14dfe:	4b db       	rcall	.-2410   	; 0x14496 <SS80_Report>
   14e00:	38 c0       	rjmp	.+112    	; 0x14e72 <SS80_COMMANDS+0x146>
   14e02:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14e06:	90 e0       	ldi	r25, 0x00	; 0
   14e08:	0e 94 75 92 	call	0x124ea	; 0x124ea <SS80_is_MLA>
   14e0c:	89 2b       	or	r24, r25
   14e0e:	09 f4       	brne	.+2      	; 0x14e12 <SS80_COMMANDS+0xe6>
   14e10:	4f c0       	rjmp	.+158    	; 0x14eb0 <SS80_COMMANDS+0x184>
   14e12:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14e16:	85 ff       	sbrs	r24, 5
   14e18:	0a c0       	rjmp	.+20     	; 0x14e2e <SS80_COMMANDS+0x102>
   14e1a:	87 e9       	ldi	r24, 0x97	; 151
   14e1c:	98 e1       	ldi	r25, 0x18	; 24
   14e1e:	1f 92       	push	r1
   14e20:	9f 93       	push	r25
   14e22:	8f 93       	push	r24
   14e24:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14e28:	0f 90       	pop	r0
   14e2a:	0f 90       	pop	r0
   14e2c:	0f 90       	pop	r0
   14e2e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80p>
   14e32:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80p+0x1>
   14e36:	81 81       	ldd	r24, Z+1	; 0x01
   14e38:	90 e0       	ldi	r25, 0x00	; 0
   14e3a:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   14e3e:	18 dc       	rcall	.-2000   	; 0x14670 <SS80_Amigo_Clear>
   14e40:	18 c0       	rjmp	.+48     	; 0x14e72 <SS80_COMMANDS+0x146>
   14e42:	12 37       	cpi	r17, 0x72	; 114
   14e44:	c1 f4       	brne	.+48     	; 0x14e76 <SS80_COMMANDS+0x14a>
   14e46:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14e4a:	90 e0       	ldi	r25, 0x00	; 0
   14e4c:	0e 94 75 92 	call	0x124ea	; 0x124ea <SS80_is_MLA>
   14e50:	89 2b       	or	r24, r25
   14e52:	89 f0       	breq	.+34     	; 0x14e76 <SS80_COMMANDS+0x14a>
   14e54:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14e58:	85 ff       	sbrs	r24, 5
   14e5a:	0a c0       	rjmp	.+20     	; 0x14e70 <SS80_COMMANDS+0x144>
   14e5c:	83 e8       	ldi	r24, 0x83	; 131
   14e5e:	98 e1       	ldi	r25, 0x18	; 24
   14e60:	1f 92       	push	r1
   14e62:	9f 93       	push	r25
   14e64:	8f 93       	push	r24
   14e66:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14e6a:	0f 90       	pop	r0
   14e6c:	0f 90       	pop	r0
   14e6e:	0f 90       	pop	r0
   14e70:	53 dc       	rcall	.-1882   	; 0x14718 <SS80_Transparent_State>
   14e72:	ec 01       	movw	r28, r24
   14e74:	3d c0       	rjmp	.+122    	; 0x14ef0 <SS80_COMMANDS+0x1c4>
   14e76:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14e7a:	80 ff       	sbrs	r24, 0
   14e7c:	19 c0       	rjmp	.+50     	; 0x14eb0 <SS80_COMMANDS+0x184>
   14e7e:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   14e82:	1f 92       	push	r1
   14e84:	8f 93       	push	r24
   14e86:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14e8a:	1f 92       	push	r1
   14e8c:	8f 93       	push	r24
   14e8e:	1f 92       	push	r1
   14e90:	1f 93       	push	r17
   14e92:	8f e4       	ldi	r24, 0x4F	; 79
   14e94:	98 e1       	ldi	r25, 0x18	; 24
   14e96:	1f 92       	push	r1
   14e98:	9f 93       	push	r25
   14e9a:	8f 93       	push	r24
   14e9c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14ea0:	8d b7       	in	r24, 0x3d	; 61
   14ea2:	9e b7       	in	r25, 0x3e	; 62
   14ea4:	09 96       	adiw	r24, 0x09	; 9
   14ea6:	0f b6       	in	r0, 0x3f	; 63
   14ea8:	f8 94       	cli
   14eaa:	9e bf       	out	0x3e, r25	; 62
   14eac:	0f be       	out	0x3f, r0	; 63
   14eae:	8d bf       	out	0x3d, r24	; 61
   14eb0:	c0 e0       	ldi	r28, 0x00	; 0
   14eb2:	d0 e0       	ldi	r29, 0x00	; 0
   14eb4:	1d c0       	rjmp	.+58     	; 0x14ef0 <SS80_COMMANDS+0x1c4>
   14eb6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14eba:	80 ff       	sbrs	r24, 0
   14ebc:	f9 cf       	rjmp	.-14     	; 0x14eb0 <SS80_COMMANDS+0x184>
   14ebe:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   14ec2:	1f 92       	push	r1
   14ec4:	8f 93       	push	r24
   14ec6:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   14eca:	1f 92       	push	r1
   14ecc:	8f 93       	push	r24
   14ece:	1f 92       	push	r1
   14ed0:	1f 93       	push	r17
   14ed2:	8b e1       	ldi	r24, 0x1B	; 27
   14ed4:	98 e1       	ldi	r25, 0x18	; 24
   14ed6:	1f 92       	push	r1
   14ed8:	9f 93       	push	r25
   14eda:	8f 93       	push	r24
   14edc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14ee0:	8d b7       	in	r24, 0x3d	; 61
   14ee2:	9e b7       	in	r25, 0x3e	; 62
   14ee4:	09 96       	adiw	r24, 0x09	; 9
   14ee6:	0f b6       	in	r0, 0x3f	; 63
   14ee8:	f8 94       	cli
   14eea:	9e bf       	out	0x3e, r25	; 62
   14eec:	0f be       	out	0x3f, r0	; 63
   14eee:	8d bf       	out	0x3d, r24	; 61
   14ef0:	ce 01       	movw	r24, r28
   14ef2:	df 91       	pop	r29
   14ef4:	cf 91       	pop	r28
   14ef6:	1f 91       	pop	r17
   14ef8:	08 95       	ret

00014efa <amigo_overflow_check>:
   14efa:	cf 92       	push	r12
   14efc:	df 92       	push	r13
   14efe:	ef 92       	push	r14
   14f00:	0f 93       	push	r16
   14f02:	1f 93       	push	r17
   14f04:	cf 93       	push	r28
   14f06:	df 93       	push	r29
   14f08:	ec 01       	movw	r28, r24
   14f0a:	8b 01       	movw	r16, r22
   14f0c:	80 e0       	ldi	r24, 0x00	; 0
   14f0e:	90 e0       	ldi	r25, 0x00	; 0
   14f10:	22 ef       	ldi	r18, 0xF2	; 242
   14f12:	37 e2       	ldi	r19, 0x27	; 39
   14f14:	69 01       	movw	r12, r18
   14f16:	2d 81       	ldd	r18, Y+5	; 0x05
   14f18:	30 e0       	ldi	r19, 0x00	; 0
   14f1a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   14f1e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   14f22:	47 a1       	ldd	r20, Z+39	; 0x27
   14f24:	50 a5       	ldd	r21, Z+40	; 0x28
   14f26:	24 17       	cp	r18, r20
   14f28:	35 07       	cpc	r19, r21
   14f2a:	7c f1       	brlt	.+94     	; 0x14f8a <amigo_overflow_check+0x90>
   14f2c:	1d 82       	std	Y+5, r1	; 0x05
   14f2e:	2c 81       	ldd	r18, Y+4	; 0x04
   14f30:	2f 5f       	subi	r18, 0xFF	; 255
   14f32:	2c 83       	std	Y+4, r18	; 0x04
   14f34:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   14f38:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   14f3c:	2c 81       	ldd	r18, Y+4	; 0x04
   14f3e:	30 e0       	ldi	r19, 0x00	; 0
   14f40:	41 a5       	ldd	r20, Z+41	; 0x29
   14f42:	52 a5       	ldd	r21, Z+42	; 0x2a
   14f44:	24 17       	cp	r18, r20
   14f46:	35 07       	cpc	r19, r21
   14f48:	34 f3       	brlt	.-52     	; 0x14f16 <amigo_overflow_check+0x1c>
   14f4a:	1c 82       	std	Y+4, r1	; 0x04
   14f4c:	2b 81       	ldd	r18, Y+3	; 0x03
   14f4e:	2f 5f       	subi	r18, 0xFF	; 255
   14f50:	2b 83       	std	Y+3, r18	; 0x03
   14f52:	30 e0       	ldi	r19, 0x00	; 0
   14f54:	43 a5       	ldd	r20, Z+43	; 0x2b
   14f56:	54 a5       	ldd	r21, Z+44	; 0x2c
   14f58:	24 17       	cp	r18, r20
   14f5a:	35 07       	cpc	r19, r21
   14f5c:	5c f3       	brlt	.-42     	; 0x14f34 <amigo_overflow_check+0x3a>
   14f5e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   14f62:	80 ff       	sbrs	r24, 0
   14f64:	0f c0       	rjmp	.+30     	; 0x14f84 <amigo_overflow_check+0x8a>
   14f66:	01 15       	cp	r16, r1
   14f68:	11 05       	cpc	r17, r1
   14f6a:	61 f0       	breq	.+24     	; 0x14f84 <amigo_overflow_check+0x8a>
   14f6c:	1f 93       	push	r17
   14f6e:	0f 93       	push	r16
   14f70:	1f 92       	push	r1
   14f72:	df 92       	push	r13
   14f74:	cf 92       	push	r12
   14f76:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   14f7a:	0f 90       	pop	r0
   14f7c:	0f 90       	pop	r0
   14f7e:	0f 90       	pop	r0
   14f80:	0f 90       	pop	r0
   14f82:	0f 90       	pop	r0
   14f84:	81 e0       	ldi	r24, 0x01	; 1
   14f86:	90 e0       	ldi	r25, 0x00	; 0
   14f88:	d5 cf       	rjmp	.-86     	; 0x14f34 <amigo_overflow_check+0x3a>
   14f8a:	df 91       	pop	r29
   14f8c:	cf 91       	pop	r28
   14f8e:	1f 91       	pop	r17
   14f90:	0f 91       	pop	r16
   14f92:	ef 90       	pop	r14
   14f94:	df 90       	pop	r13
   14f96:	cf 90       	pop	r12
   14f98:	08 95       	ret

00014f9a <amigo_chs_to_logical>:
   14f9a:	a0 e0       	ldi	r26, 0x00	; 0
   14f9c:	b0 e0       	ldi	r27, 0x00	; 0
   14f9e:	e3 ed       	ldi	r30, 0xD3	; 211
   14fa0:	f7 ea       	ldi	r31, 0xA7	; 167
   14fa2:	0c 94 44 e9 	jmp	0x1d288	; 0x1d288 <__prologue_saves__+0x12>
   14fa6:	dc 01       	movw	r26, r24
   14fa8:	d6 2f       	mov	r29, r22
   14faa:	17 2f       	mov	r17, r23
   14fac:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   14fb0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   14fb4:	87 a1       	ldd	r24, Z+39	; 0x27
   14fb6:	90 a5       	ldd	r25, Z+40	; 0x28
   14fb8:	14 96       	adiw	r26, 0x04	; 4
   14fba:	cc 91       	ld	r28, X
   14fbc:	14 97       	sbiw	r26, 0x04	; 4
   14fbe:	c8 9f       	mul	r28, r24
   14fc0:	90 01       	movw	r18, r0
   14fc2:	c9 9f       	mul	r28, r25
   14fc4:	30 0d       	add	r19, r0
   14fc6:	11 24       	eor	r1, r1
   14fc8:	a9 01       	movw	r20, r18
   14fca:	33 0f       	add	r19, r19
   14fcc:	66 0b       	sbc	r22, r22
   14fce:	77 0b       	sbc	r23, r23
   14fd0:	13 96       	adiw	r26, 0x03	; 3
   14fd2:	0c 91       	ld	r16, X
   14fd4:	13 97       	sbiw	r26, 0x03	; 3
   14fd6:	21 a5       	ldd	r18, Z+41	; 0x29
   14fd8:	32 a5       	ldd	r19, Z+42	; 0x2a
   14fda:	82 9f       	mul	r24, r18
   14fdc:	70 01       	movw	r14, r0
   14fde:	83 9f       	mul	r24, r19
   14fe0:	f0 0c       	add	r15, r0
   14fe2:	92 9f       	mul	r25, r18
   14fe4:	f0 0c       	add	r15, r0
   14fe6:	11 24       	eor	r1, r1
   14fe8:	0e 9d       	mul	r16, r14
   14fea:	90 01       	movw	r18, r0
   14fec:	0f 9d       	mul	r16, r15
   14fee:	30 0d       	add	r19, r0
   14ff0:	11 24       	eor	r1, r1
   14ff2:	69 01       	movw	r12, r18
   14ff4:	33 0f       	add	r19, r19
   14ff6:	ee 08       	sbc	r14, r14
   14ff8:	ff 08       	sbc	r15, r15
   14ffa:	4c 0d       	add	r20, r12
   14ffc:	5d 1d       	adc	r21, r13
   14ffe:	6e 1d       	adc	r22, r14
   15000:	7f 1d       	adc	r23, r15
   15002:	15 96       	adiw	r26, 0x05	; 5
   15004:	bc 90       	ld	r11, X
   15006:	9a 01       	movw	r18, r20
   15008:	ab 01       	movw	r20, r22
   1500a:	2b 0d       	add	r18, r11
   1500c:	31 1d       	adc	r19, r1
   1500e:	41 1d       	adc	r20, r1
   15010:	51 1d       	adc	r21, r1
   15012:	a5 a1       	ldd	r26, Z+37	; 0x25
   15014:	b6 a1       	ldd	r27, Z+38	; 0x26
   15016:	0e 94 25 e9 	call	0x1d24a	; 0x1d24a <__mulshisi3>
   1501a:	6b 01       	movw	r12, r22
   1501c:	7c 01       	movw	r14, r24
   1501e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15022:	85 ff       	sbrs	r24, 5
   15024:	22 c0       	rjmp	.+68     	; 0x1506a <amigo_chs_to_logical+0xd0>
   15026:	1f 92       	push	r1
   15028:	bf 92       	push	r11
   1502a:	1f 92       	push	r1
   1502c:	cf 93       	push	r28
   1502e:	1f 92       	push	r1
   15030:	0f 93       	push	r16
   15032:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15036:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1503a:	81 81       	ldd	r24, Z+1	; 0x01
   1503c:	1f 92       	push	r1
   1503e:	8f 93       	push	r24
   15040:	ff 92       	push	r15
   15042:	ef 92       	push	r14
   15044:	df 92       	push	r13
   15046:	cf 92       	push	r12
   15048:	1f 93       	push	r17
   1504a:	df 93       	push	r29
   1504c:	8f e9       	ldi	r24, 0x9F	; 159
   1504e:	97 e2       	ldi	r25, 0x27	; 39
   15050:	1f 92       	push	r1
   15052:	9f 93       	push	r25
   15054:	8f 93       	push	r24
   15056:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1505a:	8d b7       	in	r24, 0x3d	; 61
   1505c:	9e b7       	in	r25, 0x3e	; 62
   1505e:	41 96       	adiw	r24, 0x11	; 17
   15060:	0f b6       	in	r0, 0x3f	; 63
   15062:	f8 94       	cli
   15064:	9e bf       	out	0x3e, r25	; 62
   15066:	0f be       	out	0x3f, r0	; 63
   15068:	8d bf       	out	0x3d, r24	; 61
   1506a:	b6 01       	movw	r22, r12
   1506c:	c7 01       	movw	r24, r14
   1506e:	cd b7       	in	r28, 0x3d	; 61
   15070:	de b7       	in	r29, 0x3e	; 62
   15072:	e9 e0       	ldi	r30, 0x09	; 9
   15074:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__epilogue_restores__+0x12>

00015078 <amigo_init>:
   15078:	ef 92       	push	r14
   1507a:	ff 92       	push	r15
   1507c:	0f 93       	push	r16
   1507e:	1f 93       	push	r17
   15080:	cf 93       	push	r28
   15082:	df 93       	push	r29
   15084:	0f ea       	ldi	r16, 0xAF	; 175
   15086:	1e e1       	ldi	r17, 0x1E	; 30
   15088:	c7 e0       	ldi	r28, 0x07	; 7
   1508a:	d0 e0       	ldi	r29, 0x00	; 0
   1508c:	84 e0       	ldi	r24, 0x04	; 4
   1508e:	f8 2e       	mov	r15, r24
   15090:	92 e0       	ldi	r25, 0x02	; 2
   15092:	e9 2e       	mov	r14, r25
   15094:	d8 01       	movw	r26, r16
   15096:	d1 96       	adiw	r26, 0x31	; 49
   15098:	8c 91       	ld	r24, X
   1509a:	81 30       	cpi	r24, 0x01	; 1
   1509c:	31 f5       	brne	.+76     	; 0x150ea <amigo_init+0x72>
   1509e:	ce 01       	movw	r24, r28
   150a0:	0e 94 0b b6 	call	0x16c16	; 0x16c16 <set_active_device>
   150a4:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   150a8:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   150ac:	10 82       	st	Z, r1
   150ae:	9f 01       	movw	r18, r30
   150b0:	27 5f       	subi	r18, 0xF7	; 247
   150b2:	3f 4f       	sbci	r19, 0xFF	; 255
   150b4:	d9 01       	movw	r26, r18
   150b6:	8f 2d       	mov	r24, r15
   150b8:	1d 92       	st	X+, r1
   150ba:	8a 95       	dec	r24
   150bc:	e9 f7       	brne	.-6      	; 0x150b8 <amigo_init+0x40>
   150be:	2c 5f       	subi	r18, 0xFC	; 252
   150c0:	3f 4f       	sbci	r19, 0xFF	; 255
   150c2:	d9 01       	movw	r26, r18
   150c4:	8f 2d       	mov	r24, r15
   150c6:	1d 92       	st	X+, r1
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150c8:	8a 95       	dec	r24
   150ca:	e9 f7       	brne	.-6      	; 0x150c6 <amigo_init+0x4e>
   150cc:	11 82       	std	Z+1, r1	; 0x01
   150ce:	15 82       	std	Z+5, r1	; 0x05
   150d0:	14 82       	std	Z+4, r1	; 0x04
   150d2:	13 82       	std	Z+3, r1	; 0x03
   150d4:	e6 82       	std	Z+6, r14	; 0x06
   150d6:	10 86       	std	Z+8, r1	; 0x08
   150d8:	17 82       	std	Z+7, r1	; 0x07
   150da:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   150de:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   150e2:	81 81       	ldd	r24, Z+1	; 0x01
   150e4:	90 e0       	ldi	r25, 0x00	; 0
   150e6:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
   150ea:	21 97       	sbiw	r28, 0x01	; 1
   150ec:	07 50       	subi	r16, 0x07	; 7
   150ee:	11 09       	sbc	r17, r1
   150f0:	cf 3f       	cpi	r28, 0xFF	; 255
   150f2:	af ef       	ldi	r26, 0xFF	; 255
   150f4:	da 07       	cpc	r29, r26
   150f6:	71 f6       	brne	.-100    	; 0x15094 <amigo_init+0x1c>
   150f8:	cd b7       	in	r28, 0x3d	; 61
   150fa:	de b7       	in	r29, 0x3e	; 62
   150fc:	e6 e0       	ldi	r30, 0x06	; 6
   150fe:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00015102 <amigo_request_logical_address>:
   15102:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15106:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1510a:	15 86       	std	Z+13, r1	; 0x0d
   1510c:	83 81       	ldd	r24, Z+3	; 0x03
   1510e:	86 87       	std	Z+14, r24	; 0x0e
   15110:	84 81       	ldd	r24, Z+4	; 0x04
   15112:	87 87       	std	Z+15, r24	; 0x0f
   15114:	85 81       	ldd	r24, Z+5	; 0x05
   15116:	80 8b       	std	Z+16, r24	; 0x10
   15118:	80 e0       	ldi	r24, 0x00	; 0
   1511a:	90 e0       	ldi	r25, 0x00	; 0
   1511c:	08 95       	ret

0001511e <amigo_request_status>:
   1511e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15122:	85 ff       	sbrs	r24, 5
   15124:	0a c0       	rjmp	.+20     	; 0x1513a <amigo_request_status+0x1c>
   15126:	82 e7       	ldi	r24, 0x72	; 114
   15128:	98 e2       	ldi	r25, 0x28	; 40
   1512a:	1f 92       	push	r1
   1512c:	9f 93       	push	r25
   1512e:	8f 93       	push	r24
   15130:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15134:	0f 90       	pop	r0
   15136:	0f 90       	pop	r0
   15138:	0f 90       	pop	r0
   1513a:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1513e:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15142:	11 86       	std	Z+9, r1	; 0x09
   15144:	81 81       	ldd	r24, Z+1	; 0x01
   15146:	82 87       	std	Z+10, r24	; 0x0a
   15148:	8d e0       	ldi	r24, 0x0D	; 13
   1514a:	83 87       	std	Z+11, r24	; 0x0b
   1514c:	14 86       	std	Z+12, r1	; 0x0c
   1514e:	0e 94 23 73 	call	0xe646	; 0xe646 <mmc_wp_status>
   15152:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15156:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1515a:	89 2b       	or	r24, r25
   1515c:	19 f0       	breq	.+6      	; 0x15164 <amigo_request_status+0x46>
   1515e:	84 85       	ldd	r24, Z+12	; 0x0c
   15160:	80 66       	ori	r24, 0x60	; 96
   15162:	84 87       	std	Z+12, r24	; 0x0c
   15164:	86 81       	ldd	r24, Z+6	; 0x06
   15166:	82 30       	cpi	r24, 0x02	; 2
   15168:	31 f4       	brne	.+12     	; 0x15176 <amigo_request_status+0x58>
   1516a:	83 e1       	ldi	r24, 0x13	; 19
   1516c:	81 87       	std	Z+9, r24	; 0x09
   1516e:	84 85       	ldd	r24, Z+12	; 0x0c
   15170:	88 60       	ori	r24, 0x08	; 8
   15172:	84 87       	std	Z+12, r24	; 0x0c
   15174:	21 c0       	rjmp	.+66     	; 0x151b8 <amigo_request_status+0x9a>
   15176:	27 81       	ldd	r18, Z+7	; 0x07
   15178:	30 85       	ldd	r19, Z+8	; 0x08
   1517a:	21 15       	cp	r18, r1
   1517c:	31 05       	cpc	r19, r1
   1517e:	11 f4       	brne	.+4      	; 0x15184 <amigo_request_status+0x66>
   15180:	81 30       	cpi	r24, 0x01	; 1
   15182:	d1 f4       	brne	.+52     	; 0x151b8 <amigo_request_status+0x9a>
   15184:	26 fd       	sbrc	r18, 6
   15186:	0c c0       	rjmp	.+24     	; 0x151a0 <amigo_request_status+0x82>
   15188:	25 ff       	sbrs	r18, 5
   1518a:	03 c0       	rjmp	.+6      	; 0x15192 <amigo_request_status+0x74>
   1518c:	8a e0       	ldi	r24, 0x0A	; 10
   1518e:	81 87       	std	Z+9, r24	; 0x09
   15190:	0d c0       	rjmp	.+26     	; 0x151ac <amigo_request_status+0x8e>
   15192:	84 85       	ldd	r24, Z+12	; 0x0c
   15194:	24 ff       	sbrs	r18, 4
   15196:	02 c0       	rjmp	.+4      	; 0x1519c <amigo_request_status+0x7e>
   15198:	83 60       	ori	r24, 0x03	; 3
   1519a:	07 c0       	rjmp	.+14     	; 0x151aa <amigo_request_status+0x8c>
   1519c:	21 ff       	sbrs	r18, 1
   1519e:	02 c0       	rjmp	.+4      	; 0x151a4 <amigo_request_status+0x86>
   151a0:	83 e1       	ldi	r24, 0x13	; 19
   151a2:	f5 cf       	rjmp	.-22     	; 0x1518e <amigo_request_status+0x70>
   151a4:	22 ff       	sbrs	r18, 2
   151a6:	02 c0       	rjmp	.+4      	; 0x151ac <amigo_request_status+0x8e>
   151a8:	84 60       	ori	r24, 0x04	; 4
   151aa:	84 87       	std	Z+12, r24	; 0x0c
   151ac:	84 85       	ldd	r24, Z+12	; 0x0c
   151ae:	80 61       	ori	r24, 0x10	; 16
   151b0:	84 87       	std	Z+12, r24	; 0x0c
   151b2:	83 85       	ldd	r24, Z+11	; 0x0b
   151b4:	80 68       	ori	r24, 0x80	; 128
   151b6:	83 87       	std	Z+11, r24	; 0x0b
   151b8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   151bc:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   151c0:	81 81       	ldd	r24, Z+1	; 0x01
   151c2:	90 e0       	ldi	r25, 0x00	; 0
   151c4:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   151c8:	80 e0       	ldi	r24, 0x00	; 0
   151ca:	90 e0       	ldi	r25, 0x00	; 0
   151cc:	08 95       	ret

000151ce <amigo_send_logical_address>:
   151ce:	a2 e0       	ldi	r26, 0x02	; 2
   151d0:	b0 e0       	ldi	r27, 0x00	; 0
   151d2:	ed ee       	ldi	r30, 0xED	; 237
   151d4:	f8 ea       	ldi	r31, 0xA8	; 168
   151d6:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   151da:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   151de:	85 ff       	sbrs	r24, 5
   151e0:	0a c0       	rjmp	.+20     	; 0x151f6 <amigo_send_logical_address+0x28>
   151e2:	84 e5       	ldi	r24, 0x54	; 84
   151e4:	98 e2       	ldi	r25, 0x28	; 40
   151e6:	1f 92       	push	r1
   151e8:	9f 93       	push	r25
   151ea:	8f 93       	push	r24
   151ec:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   151f0:	0f 90       	pop	r0
   151f2:	0f 90       	pop	r0
   151f4:	0f 90       	pop	r0
   151f6:	80 e0       	ldi	r24, 0x00	; 0
   151f8:	91 e0       	ldi	r25, 0x01	; 1
   151fa:	9a 83       	std	Y+2, r25	; 0x02
   151fc:	89 83       	std	Y+1, r24	; 0x01
   151fe:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   15202:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   15206:	ae 01       	movw	r20, r28
   15208:	4f 5f       	subi	r20, 0xFF	; 255
   1520a:	5f 4f       	sbci	r21, 0xFF	; 255
   1520c:	64 e0       	ldi	r22, 0x04	; 4
   1520e:	70 e0       	ldi	r23, 0x00	; 0
   15210:	0d 96       	adiw	r24, 0x0d	; 13
   15212:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   15216:	29 81       	ldd	r18, Y+1	; 0x01
   15218:	3a 81       	ldd	r19, Y+2	; 0x02
   1521a:	22 27       	eor	r18, r18
   1521c:	30 7d       	andi	r19, 0xD0	; 208
   1521e:	23 2b       	or	r18, r19
   15220:	49 f0       	breq	.+18     	; 0x15234 <amigo_send_logical_address+0x66>
   15222:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15226:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1522a:	27 81       	ldd	r18, Z+7	; 0x07
   1522c:	30 85       	ldd	r19, Z+8	; 0x08
   1522e:	20 62       	ori	r18, 0x20	; 32
   15230:	30 87       	std	Z+8, r19	; 0x08
   15232:	27 83       	std	Z+7, r18	; 0x07
   15234:	04 97       	sbiw	r24, 0x04	; 4
   15236:	c9 f0       	breq	.+50     	; 0x1526a <amigo_send_logical_address+0x9c>
   15238:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1523c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15240:	87 81       	ldd	r24, Z+7	; 0x07
   15242:	90 85       	ldd	r25, Z+8	; 0x08
   15244:	80 62       	ori	r24, 0x20	; 32
   15246:	90 87       	std	Z+8, r25	; 0x08
   15248:	87 83       	std	Z+7, r24	; 0x07
   1524a:	81 e0       	ldi	r24, 0x01	; 1
   1524c:	86 83       	std	Z+6, r24	; 0x06
   1524e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15252:	80 ff       	sbrs	r24, 0
   15254:	0a c0       	rjmp	.+20     	; 0x1526a <amigo_send_logical_address+0x9c>
   15256:	8a e3       	ldi	r24, 0x3A	; 58
   15258:	98 e2       	ldi	r25, 0x28	; 40
   1525a:	1f 92       	push	r1
   1525c:	9f 93       	push	r25
   1525e:	8f 93       	push	r24
   15260:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15264:	0f 90       	pop	r0
   15266:	0f 90       	pop	r0
   15268:	0f 90       	pop	r0
   1526a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   1526e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15272:	81 81       	ldd	r24, Z+1	; 0x01
   15274:	90 e0       	ldi	r25, 0x00	; 0
   15276:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1527a:	89 81       	ldd	r24, Y+1	; 0x01
   1527c:	9a 81       	ldd	r25, Y+2	; 0x02
   1527e:	88 27       	eor	r24, r24
   15280:	90 7d       	andi	r25, 0xD0	; 208
   15282:	22 96       	adiw	r28, 0x02	; 2
   15284:	e2 e0       	ldi	r30, 0x02	; 2
   15286:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0001528a <amigo_send_status>:
   1528a:	a2 e0       	ldi	r26, 0x02	; 2
   1528c:	b0 e0       	ldi	r27, 0x00	; 0
   1528e:	eb e4       	ldi	r30, 0x4B	; 75
   15290:	f9 ea       	ldi	r31, 0xA9	; 169
   15292:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   15296:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1529a:	85 ff       	sbrs	r24, 5
   1529c:	0a c0       	rjmp	.+20     	; 0x152b2 <amigo_send_status+0x28>
   1529e:	85 e2       	ldi	r24, 0x25	; 37
   152a0:	98 e2       	ldi	r25, 0x28	; 40
   152a2:	1f 92       	push	r1
   152a4:	9f 93       	push	r25
   152a6:	8f 93       	push	r24
   152a8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   152ac:	0f 90       	pop	r0
   152ae:	0f 90       	pop	r0
   152b0:	0f 90       	pop	r0
   152b2:	80 e0       	ldi	r24, 0x00	; 0
   152b4:	91 e0       	ldi	r25, 0x01	; 1
   152b6:	9a 83       	std	Y+2, r25	; 0x02
   152b8:	89 83       	std	Y+1, r24	; 0x01
   152ba:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   152be:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   152c2:	ae 01       	movw	r20, r28
   152c4:	4f 5f       	subi	r20, 0xFF	; 255
   152c6:	5f 4f       	sbci	r21, 0xFF	; 255
   152c8:	64 e0       	ldi	r22, 0x04	; 4
   152ca:	70 e0       	ldi	r23, 0x00	; 0
   152cc:	09 96       	adiw	r24, 0x09	; 9
   152ce:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   152d2:	29 81       	ldd	r18, Y+1	; 0x01
   152d4:	3a 81       	ldd	r19, Y+2	; 0x02
   152d6:	22 27       	eor	r18, r18
   152d8:	30 7d       	andi	r19, 0xD0	; 208
   152da:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   152de:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   152e2:	23 2b       	or	r18, r19
   152e4:	29 f0       	breq	.+10     	; 0x152f0 <amigo_send_status+0x66>
   152e6:	27 81       	ldd	r18, Z+7	; 0x07
   152e8:	30 85       	ldd	r19, Z+8	; 0x08
   152ea:	20 62       	ori	r18, 0x20	; 32
   152ec:	30 87       	std	Z+8, r19	; 0x08
   152ee:	27 83       	std	Z+7, r18	; 0x07
   152f0:	04 97       	sbiw	r24, 0x04	; 4
   152f2:	b1 f0       	breq	.+44     	; 0x15320 <amigo_send_status+0x96>
   152f4:	87 81       	ldd	r24, Z+7	; 0x07
   152f6:	90 85       	ldd	r25, Z+8	; 0x08
   152f8:	80 62       	ori	r24, 0x20	; 32
   152fa:	90 87       	std	Z+8, r25	; 0x08
   152fc:	87 83       	std	Z+7, r24	; 0x07
   152fe:	81 e0       	ldi	r24, 0x01	; 1
   15300:	86 83       	std	Z+6, r24	; 0x06
   15302:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15306:	80 ff       	sbrs	r24, 0
   15308:	0e c0       	rjmp	.+28     	; 0x15326 <amigo_send_status+0x9c>
   1530a:	8b e0       	ldi	r24, 0x0B	; 11
   1530c:	98 e2       	ldi	r25, 0x28	; 40
   1530e:	1f 92       	push	r1
   15310:	9f 93       	push	r25
   15312:	8f 93       	push	r24
   15314:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15318:	0f 90       	pop	r0
   1531a:	0f 90       	pop	r0
   1531c:	0f 90       	pop	r0
   1531e:	03 c0       	rjmp	.+6      	; 0x15326 <amigo_send_status+0x9c>
   15320:	10 86       	std	Z+8, r1	; 0x08
   15322:	17 82       	std	Z+7, r1	; 0x07
   15324:	16 82       	std	Z+6, r1	; 0x06
   15326:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   1532a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   1532e:	81 81       	ldd	r24, Z+1	; 0x01
   15330:	90 e0       	ldi	r25, 0x00	; 0
   15332:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   15336:	89 81       	ldd	r24, Y+1	; 0x01
   15338:	9a 81       	ldd	r25, Y+2	; 0x02
   1533a:	88 27       	eor	r24, r24
   1533c:	90 7d       	andi	r25, 0xD0	; 208
   1533e:	22 96       	adiw	r28, 0x02	; 2
   15340:	e2 e0       	ldi	r30, 0x02	; 2
   15342:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00015346 <amigo_increment>:
   15346:	a1 e1       	ldi	r26, 0x11	; 17
   15348:	b0 e0       	ldi	r27, 0x00	; 0
   1534a:	e9 ea       	ldi	r30, 0xA9	; 169
   1534c:	f9 ea       	ldi	r31, 0xA9	; 169
   1534e:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   15352:	bc 01       	movw	r22, r24
   15354:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15358:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1535c:	91 e1       	ldi	r25, 0x11	; 17
   1535e:	de 01       	movw	r26, r28
   15360:	11 96       	adiw	r26, 0x01	; 1
   15362:	01 90       	ld	r0, Z+
   15364:	0d 92       	st	X+, r0
   15366:	9a 95       	dec	r25
   15368:	e1 f7       	brne	.-8      	; 0x15362 <amigo_increment+0x1c>
   1536a:	9e 81       	ldd	r25, Y+6	; 0x06
   1536c:	9f 5f       	subi	r25, 0xFF	; 255
   1536e:	9e 83       	std	Y+6, r25	; 0x06
   15370:	ce 01       	movw	r24, r28
   15372:	01 96       	adiw	r24, 0x01	; 1
   15374:	c2 dd       	rcall	.-1148   	; 0x14efa <amigo_overflow_check>
   15376:	00 97       	sbiw	r24, 0x00	; 0
   15378:	59 f4       	brne	.+22     	; 0x15390 <amigo_increment+0x4a>
   1537a:	a0 91 56 19 	lds	r26, 0x1956	; 0x801956 <AMIGOs>
   1537e:	b0 91 57 19 	lds	r27, 0x1957	; 0x801957 <AMIGOs+0x1>
   15382:	21 e1       	ldi	r18, 0x11	; 17
   15384:	fe 01       	movw	r30, r28
   15386:	31 96       	adiw	r30, 0x01	; 1
   15388:	01 90       	ld	r0, Z+
   1538a:	0d 92       	st	X+, r0
   1538c:	2a 95       	dec	r18
   1538e:	e1 f7       	brne	.-8      	; 0x15388 <amigo_increment+0x42>
   15390:	61 96       	adiw	r28, 0x11	; 17
   15392:	e2 e0       	ldi	r30, 0x02	; 2
   15394:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

00015398 <amigo_seek>:
   15398:	0f 93       	push	r16
   1539a:	1f 93       	push	r17
   1539c:	cf 93       	push	r28
   1539e:	df 93       	push	r29
   153a0:	ec 01       	movw	r28, r24
   153a2:	6d ed       	ldi	r22, 0xDD	; 221
   153a4:	72 e1       	ldi	r23, 0x12	; 18
   153a6:	a9 dd       	rcall	.-1198   	; 0x14efa <amigo_overflow_check>
   153a8:	8c 01       	movw	r16, r24
   153aa:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   153ae:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   153b2:	89 2b       	or	r24, r25
   153b4:	41 f0       	breq	.+16     	; 0x153c6 <amigo_seek+0x2e>
   153b6:	81 e0       	ldi	r24, 0x01	; 1
   153b8:	86 83       	std	Z+6, r24	; 0x06
   153ba:	87 81       	ldd	r24, Z+7	; 0x07
   153bc:	90 85       	ldd	r25, Z+8	; 0x08
   153be:	84 60       	ori	r24, 0x04	; 4
   153c0:	90 87       	std	Z+8, r25	; 0x08
   153c2:	87 83       	std	Z+7, r24	; 0x07
   153c4:	06 c0       	rjmp	.+12     	; 0x153d2 <amigo_seek+0x3a>
   153c6:	8d 81       	ldd	r24, Y+5	; 0x05
   153c8:	85 83       	std	Z+5, r24	; 0x05
   153ca:	8c 81       	ldd	r24, Y+4	; 0x04
   153cc:	84 83       	std	Z+4, r24	; 0x04
   153ce:	8b 81       	ldd	r24, Y+3	; 0x03
   153d0:	83 83       	std	Z+3, r24	; 0x03
   153d2:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   153d6:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   153da:	81 81       	ldd	r24, Z+1	; 0x01
   153dc:	90 e0       	ldi	r25, 0x00	; 0
   153de:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   153e2:	c8 01       	movw	r24, r16
   153e4:	df 91       	pop	r29
   153e6:	cf 91       	pop	r28
   153e8:	1f 91       	pop	r17
   153ea:	0f 91       	pop	r16
   153ec:	08 95       	ret

000153ee <amigo_verify>:
   153ee:	8f 92       	push	r8
   153f0:	9f 92       	push	r9
   153f2:	af 92       	push	r10
   153f4:	bf 92       	push	r11
   153f6:	ef 92       	push	r14
   153f8:	ff 92       	push	r15
   153fa:	0f 93       	push	r16
   153fc:	1f 93       	push	r17
   153fe:	cf 93       	push	r28
   15400:	df 93       	push	r29
   15402:	7c 01       	movw	r14, r24
   15404:	62 ee       	ldi	r22, 0xE2	; 226
   15406:	72 e1       	ldi	r23, 0x12	; 18
   15408:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   1540c:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   15410:	c4 dd       	rcall	.-1144   	; 0x14f9a <amigo_chs_to_logical>
   15412:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   15416:	25 ff       	sbrs	r18, 5
   15418:	15 c0       	rjmp	.+42     	; 0x15444 <amigo_verify+0x56>
   1541a:	ff 92       	push	r15
   1541c:	ef 92       	push	r14
   1541e:	9f 93       	push	r25
   15420:	8f 93       	push	r24
   15422:	7f 93       	push	r23
   15424:	6f 93       	push	r22
   15426:	8a ec       	ldi	r24, 0xCA	; 202
   15428:	97 e2       	ldi	r25, 0x27	; 39
   1542a:	1f 92       	push	r1
   1542c:	9f 93       	push	r25
   1542e:	8f 93       	push	r24
   15430:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15434:	8d b7       	in	r24, 0x3d	; 61
   15436:	9e b7       	in	r25, 0x3e	; 62
   15438:	09 96       	adiw	r24, 0x09	; 9
   1543a:	0f b6       	in	r0, 0x3f	; 63
   1543c:	f8 94       	cli
   1543e:	9e bf       	out	0x3e, r25	; 62
   15440:	0f be       	out	0x3f, r0	; 63
   15442:	8d bf       	out	0x3d, r24	; 61
   15444:	e7 01       	movw	r28, r14
   15446:	20 97       	sbiw	r28, 0x00	; 0
   15448:	09 f4       	brne	.+2      	; 0x1544c <amigo_verify+0x5e>
   1544a:	49 c0       	rjmp	.+146    	; 0x154de <amigo_verify+0xf0>
   1544c:	6f ee       	ldi	r22, 0xEF	; 239
   1544e:	72 e1       	ldi	r23, 0x12	; 18
   15450:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   15454:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   15458:	a0 dd       	rcall	.-1216   	; 0x14f9a <amigo_chs_to_logical>
   1545a:	4b 01       	movw	r8, r22
   1545c:	5c 01       	movw	r10, r24
   1545e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15462:	86 fd       	sbrc	r24, 6
   15464:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   15468:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOp>
   1546c:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOp+0x1>
   15470:	e0 90 56 19 	lds	r14, 0x1956	; 0x801956 <AMIGOs>
   15474:	f0 90 57 19 	lds	r15, 0x1957	; 0x801957 <AMIGOs+0x1>
   15478:	e7 e0       	ldi	r30, 0x07	; 7
   1547a:	ee 0e       	add	r14, r30
   1547c:	f1 1c       	adc	r15, r1
   1547e:	fc 01       	movw	r30, r24
   15480:	05 a1       	ldd	r16, Z+37	; 0x25
   15482:	16 a1       	ldd	r17, Z+38	; 0x26
   15484:	25 ea       	ldi	r18, 0xA5	; 165
   15486:	3c e1       	ldi	r19, 0x1C	; 28
   15488:	b5 01       	movw	r22, r10
   1548a:	a4 01       	movw	r20, r8
   1548c:	02 96       	adiw	r24, 0x02	; 2
   1548e:	0e 94 17 8b 	call	0x1162e	; 0x1162e <dbf_open_read>
   15492:	7c 01       	movw	r14, r24
   15494:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15498:	86 ff       	sbrs	r24, 6
   1549a:	04 c0       	rjmp	.+8      	; 0x154a4 <amigo_verify+0xb6>
   1549c:	87 ef       	ldi	r24, 0xF7	; 247
   1549e:	9d e0       	ldi	r25, 0x0D	; 13
   154a0:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   154a4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   154a8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   154ac:	85 a1       	ldd	r24, Z+37	; 0x25
   154ae:	96 a1       	ldd	r25, Z+38	; 0x26
   154b0:	e8 16       	cp	r14, r24
   154b2:	f9 06       	cpc	r15, r25
   154b4:	61 f0       	breq	.+24     	; 0x154ce <amigo_verify+0xe0>
   154b6:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   154ba:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   154be:	81 e0       	ldi	r24, 0x01	; 1
   154c0:	86 83       	std	Z+6, r24	; 0x06
   154c2:	87 81       	ldd	r24, Z+7	; 0x07
   154c4:	90 85       	ldd	r25, Z+8	; 0x08
   154c6:	81 60       	ori	r24, 0x01	; 1
   154c8:	90 87       	std	Z+8, r25	; 0x08
   154ca:	87 83       	std	Z+7, r24	; 0x07
   154cc:	0b c0       	rjmp	.+22     	; 0x154e4 <amigo_verify+0xf6>
   154ce:	87 ef       	ldi	r24, 0xF7	; 247
   154d0:	92 e1       	ldi	r25, 0x12	; 18
   154d2:	39 df       	rcall	.-398    	; 0x15346 <amigo_increment>
   154d4:	21 97       	sbiw	r28, 0x01	; 1
   154d6:	89 2b       	or	r24, r25
   154d8:	09 f4       	brne	.+2      	; 0x154dc <amigo_verify+0xee>
   154da:	b5 cf       	rjmp	.-150    	; 0x15446 <amigo_verify+0x58>
   154dc:	03 c0       	rjmp	.+6      	; 0x154e4 <amigo_verify+0xf6>
   154de:	c0 e0       	ldi	r28, 0x00	; 0
   154e0:	d0 e0       	ldi	r29, 0x00	; 0
   154e2:	02 c0       	rjmp	.+4      	; 0x154e8 <amigo_verify+0xfa>
   154e4:	c1 e0       	ldi	r28, 0x01	; 1
   154e6:	d0 e0       	ldi	r29, 0x00	; 0
   154e8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   154ec:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   154f0:	81 81       	ldd	r24, Z+1	; 0x01
   154f2:	90 e0       	ldi	r25, 0x00	; 0
   154f4:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   154f8:	ce 01       	movw	r24, r28
   154fa:	df 91       	pop	r29
   154fc:	cf 91       	pop	r28
   154fe:	1f 91       	pop	r17
   15500:	0f 91       	pop	r16
   15502:	ff 90       	pop	r15
   15504:	ef 90       	pop	r14
   15506:	bf 90       	pop	r11
   15508:	af 90       	pop	r10
   1550a:	9f 90       	pop	r9
   1550c:	8f 90       	pop	r8
   1550e:	08 95       	ret

00015510 <amigo_format>:
   15510:	ef 92       	push	r14
   15512:	ff 92       	push	r15
   15514:	0f 93       	push	r16
   15516:	1f 93       	push	r17
   15518:	cf 93       	push	r28
   1551a:	df 93       	push	r29
   1551c:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15520:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15524:	15 82       	std	Z+5, r1	; 0x05
   15526:	14 82       	std	Z+4, r1	; 0x04
   15528:	13 82       	std	Z+3, r1	; 0x03
   1552a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   1552e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15532:	45 a1       	ldd	r20, Z+37	; 0x25
   15534:	56 a1       	ldd	r21, Z+38	; 0x26
   15536:	68 2f       	mov	r22, r24
   15538:	70 e0       	ldi	r23, 0x00	; 0
   1553a:	85 ea       	ldi	r24, 0xA5	; 165
   1553c:	9c e1       	ldi	r25, 0x1C	; 28
   1553e:	0e 94 16 ee 	call	0x1dc2c	; 0x1dc2c <memset>
   15542:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15546:	85 ff       	sbrs	r24, 5
   15548:	0a c0       	rjmp	.+20     	; 0x1555e <amigo_format+0x4e>
   1554a:	8f e8       	ldi	r24, 0x8F	; 143
   1554c:	97 e2       	ldi	r25, 0x27	; 39
   1554e:	1f 92       	push	r1
   15550:	9f 93       	push	r25
   15552:	8f 93       	push	r24
   15554:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15558:	0f 90       	pop	r0
   1555a:	0f 90       	pop	r0
   1555c:	0f 90       	pop	r0
   1555e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15562:	86 fd       	sbrc	r24, 6
   15564:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   15568:	6e ef       	ldi	r22, 0xFE	; 254
   1556a:	72 e1       	ldi	r23, 0x12	; 18
   1556c:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   15570:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   15574:	12 dd       	rcall	.-1500   	; 0x14f9a <amigo_chs_to_logical>
   15576:	ab 01       	movw	r20, r22
   15578:	bc 01       	movw	r22, r24
   1557a:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOp>
   1557e:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOp+0x1>
   15582:	e0 90 56 19 	lds	r14, 0x1956	; 0x801956 <AMIGOs>
   15586:	f0 90 57 19 	lds	r15, 0x1957	; 0x801957 <AMIGOs+0x1>
   1558a:	27 e0       	ldi	r18, 0x07	; 7
   1558c:	e2 0e       	add	r14, r18
   1558e:	f1 1c       	adc	r15, r1
   15590:	fc 01       	movw	r30, r24
   15592:	05 a1       	ldd	r16, Z+37	; 0x25
   15594:	16 a1       	ldd	r17, Z+38	; 0x26
   15596:	25 ea       	ldi	r18, 0xA5	; 165
   15598:	3c e1       	ldi	r19, 0x1C	; 28
   1559a:	02 96       	adiw	r24, 0x02	; 2
   1559c:	0e 94 6e 8b 	call	0x116dc	; 0x116dc <dbf_open_write>
   155a0:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   155a4:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   155a8:	25 a1       	ldd	r18, Z+37	; 0x25
   155aa:	36 a1       	ldd	r19, Z+38	; 0x26
   155ac:	82 17       	cp	r24, r18
   155ae:	93 07       	cpc	r25, r19
   155b0:	71 f0       	breq	.+28     	; 0x155ce <amigo_format+0xbe>
   155b2:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   155b6:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   155ba:	87 81       	ldd	r24, Z+7	; 0x07
   155bc:	90 85       	ldd	r25, Z+8	; 0x08
   155be:	82 60       	ori	r24, 0x02	; 2
   155c0:	90 87       	std	Z+8, r25	; 0x08
   155c2:	87 83       	std	Z+7, r24	; 0x07
   155c4:	81 e0       	ldi	r24, 0x01	; 1
   155c6:	86 83       	std	Z+6, r24	; 0x06
   155c8:	c1 e0       	ldi	r28, 0x01	; 1
   155ca:	d0 e0       	ldi	r29, 0x00	; 0
   155cc:	0f c0       	rjmp	.+30     	; 0x155ec <amigo_format+0xdc>
   155ce:	80 e0       	ldi	r24, 0x00	; 0
   155d0:	90 e0       	ldi	r25, 0x00	; 0
   155d2:	b9 de       	rcall	.-654    	; 0x15346 <amigo_increment>
   155d4:	89 2b       	or	r24, r25
   155d6:	41 f2       	breq	.-112    	; 0x15568 <amigo_format+0x58>
   155d8:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   155dc:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   155e0:	15 82       	std	Z+5, r1	; 0x05
   155e2:	14 82       	std	Z+4, r1	; 0x04
   155e4:	13 82       	std	Z+3, r1	; 0x03
   155e6:	16 82       	std	Z+6, r1	; 0x06
   155e8:	c0 e0       	ldi	r28, 0x00	; 0
   155ea:	d0 e0       	ldi	r29, 0x00	; 0
   155ec:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   155f0:	86 ff       	sbrs	r24, 6
   155f2:	04 c0       	rjmp	.+8      	; 0x155fc <amigo_format+0xec>
   155f4:	8e ef       	ldi	r24, 0xFE	; 254
   155f6:	92 e1       	ldi	r25, 0x12	; 18
   155f8:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   155fc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15600:	85 ff       	sbrs	r24, 5
   15602:	0a c0       	rjmp	.+20     	; 0x15618 <amigo_format+0x108>
   15604:	8a e7       	ldi	r24, 0x7A	; 122
   15606:	97 e2       	ldi	r25, 0x27	; 39
   15608:	1f 92       	push	r1
   1560a:	9f 93       	push	r25
   1560c:	8f 93       	push	r24
   1560e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15612:	0f 90       	pop	r0
   15614:	0f 90       	pop	r0
   15616:	0f 90       	pop	r0
   15618:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   1561c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15620:	81 81       	ldd	r24, Z+1	; 0x01
   15622:	90 e0       	ldi	r25, 0x00	; 0
   15624:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   15628:	ce 01       	movw	r24, r28
   1562a:	cd b7       	in	r28, 0x3d	; 61
   1562c:	de b7       	in	r29, 0x3e	; 62
   1562e:	e6 e0       	ldi	r30, 0x06	; 6
   15630:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00015634 <amigo_buffered_read>:
   15634:	8f 92       	push	r8
   15636:	9f 92       	push	r9
   15638:	af 92       	push	r10
   1563a:	bf 92       	push	r11
   1563c:	ef 92       	push	r14
   1563e:	ff 92       	push	r15
   15640:	0f 93       	push	r16
   15642:	1f 93       	push	r17
   15644:	cf 93       	push	r28
   15646:	df 93       	push	r29
   15648:	00 d0       	rcall	.+0      	; 0x1564a <amigo_buffered_read+0x16>
   1564a:	cd b7       	in	r28, 0x3d	; 61
   1564c:	de b7       	in	r29, 0x3e	; 62
   1564e:	65 e0       	ldi	r22, 0x05	; 5
   15650:	73 e1       	ldi	r23, 0x13	; 19
   15652:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   15656:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   1565a:	9f dc       	rcall	.-1730   	; 0x14f9a <amigo_chs_to_logical>
   1565c:	4b 01       	movw	r8, r22
   1565e:	5c 01       	movw	r10, r24
   15660:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15664:	86 fd       	sbrc	r24, 6
   15666:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   1566a:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOp>
   1566e:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOp+0x1>
   15672:	e0 90 56 19 	lds	r14, 0x1956	; 0x801956 <AMIGOs>
   15676:	f0 90 57 19 	lds	r15, 0x1957	; 0x801957 <AMIGOs+0x1>
   1567a:	27 e0       	ldi	r18, 0x07	; 7
   1567c:	e2 0e       	add	r14, r18
   1567e:	f1 1c       	adc	r15, r1
   15680:	fc 01       	movw	r30, r24
   15682:	05 a1       	ldd	r16, Z+37	; 0x25
   15684:	16 a1       	ldd	r17, Z+38	; 0x26
   15686:	25 ea       	ldi	r18, 0xA5	; 165
   15688:	3c e1       	ldi	r19, 0x1C	; 28
   1568a:	b5 01       	movw	r22, r10
   1568c:	a4 01       	movw	r20, r8
   1568e:	02 96       	adiw	r24, 0x02	; 2
   15690:	0e 94 17 8b 	call	0x1162e	; 0x1162e <dbf_open_read>
   15694:	7c 01       	movw	r14, r24
   15696:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1569a:	86 ff       	sbrs	r24, 6
   1569c:	04 c0       	rjmp	.+8      	; 0x156a6 <amigo_buffered_read+0x72>
   1569e:	87 ef       	ldi	r24, 0xF7	; 247
   156a0:	9d e0       	ldi	r25, 0x0D	; 13
   156a2:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   156a6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   156aa:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   156ae:	85 a1       	ldd	r24, Z+37	; 0x25
   156b0:	96 a1       	ldd	r25, Z+38	; 0x26
   156b2:	e8 16       	cp	r14, r24
   156b4:	f9 06       	cpc	r15, r25
   156b6:	39 f0       	breq	.+14     	; 0x156c6 <amigo_buffered_read+0x92>
   156b8:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   156bc:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   156c0:	81 e0       	ldi	r24, 0x01	; 1
   156c2:	86 83       	std	Z+6, r24	; 0x06
   156c4:	6c c0       	rjmp	.+216    	; 0x1579e <amigo_buffered_read+0x16a>
   156c6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   156ca:	87 fd       	sbrc	r24, 7
   156cc:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   156d0:	80 e0       	ldi	r24, 0x00	; 0
   156d2:	91 e0       	ldi	r25, 0x01	; 1
   156d4:	9a 83       	std	Y+2, r25	; 0x02
   156d6:	89 83       	std	Y+1, r24	; 0x01
   156d8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   156dc:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   156e0:	65 a1       	ldd	r22, Z+37	; 0x25
   156e2:	76 a1       	ldd	r23, Z+38	; 0x26
   156e4:	ae 01       	movw	r20, r28
   156e6:	4f 5f       	subi	r20, 0xFF	; 255
   156e8:	5f 4f       	sbci	r21, 0xFF	; 255
   156ea:	85 ea       	ldi	r24, 0xA5	; 165
   156ec:	9c e1       	ldi	r25, 0x1C	; 28
   156ee:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   156f2:	7c 01       	movw	r14, r24
   156f4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   156f8:	87 ff       	sbrs	r24, 7
   156fa:	04 c0       	rjmp	.+8      	; 0x15704 <amigo_buffered_read+0xd0>
   156fc:	83 e1       	ldi	r24, 0x13	; 19
   156fe:	93 e1       	ldi	r25, 0x13	; 19
   15700:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   15704:	89 81       	ldd	r24, Y+1	; 0x01
   15706:	9a 81       	ldd	r25, Y+2	; 0x02
   15708:	88 27       	eor	r24, r24
   1570a:	90 7d       	andi	r25, 0xD0	; 208
   1570c:	89 2b       	or	r24, r25
   1570e:	49 f4       	brne	.+18     	; 0x15722 <amigo_buffered_read+0xee>
   15710:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15714:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15718:	85 a1       	ldd	r24, Z+37	; 0x25
   1571a:	96 a1       	ldd	r25, Z+38	; 0x26
   1571c:	e8 16       	cp	r14, r24
   1571e:	f9 06       	cpc	r15, r25
   15720:	31 f1       	breq	.+76     	; 0x1576e <amigo_buffered_read+0x13a>
   15722:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15726:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1572a:	81 e0       	ldi	r24, 0x01	; 1
   1572c:	86 83       	std	Z+6, r24	; 0x06
   1572e:	87 81       	ldd	r24, Z+7	; 0x07
   15730:	90 85       	ldd	r25, Z+8	; 0x08
   15732:	80 62       	ori	r24, 0x20	; 32
   15734:	90 87       	std	Z+8, r25	; 0x08
   15736:	87 83       	std	Z+7, r24	; 0x07
   15738:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1573c:	80 ff       	sbrs	r24, 0
   1573e:	0a c0       	rjmp	.+20     	; 0x15754 <amigo_buffered_read+0x120>
   15740:	80 e6       	ldi	r24, 0x60	; 96
   15742:	97 e2       	ldi	r25, 0x27	; 39
   15744:	1f 92       	push	r1
   15746:	9f 93       	push	r25
   15748:	8f 93       	push	r24
   1574a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1574e:	0f 90       	pop	r0
   15750:	0f 90       	pop	r0
   15752:	0f 90       	pop	r0
   15754:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15758:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   1575c:	81 81       	ldd	r24, Z+1	; 0x01
   1575e:	90 e0       	ldi	r25, 0x00	; 0
   15760:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   15764:	89 81       	ldd	r24, Y+1	; 0x01
   15766:	9a 81       	ldd	r25, Y+2	; 0x02
   15768:	88 27       	eor	r24, r24
   1576a:	90 7d       	andi	r25, 0xD0	; 208
   1576c:	1a c0       	rjmp	.+52     	; 0x157a2 <amigo_buffered_read+0x16e>
   1576e:	85 e0       	ldi	r24, 0x05	; 5
   15770:	93 e1       	ldi	r25, 0x13	; 19
   15772:	e9 dd       	rcall	.-1070   	; 0x15346 <amigo_increment>
   15774:	89 2b       	or	r24, r25
   15776:	59 f0       	breq	.+22     	; 0x1578e <amigo_buffered_read+0x15a>
   15778:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1577c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15780:	81 e0       	ldi	r24, 0x01	; 1
   15782:	86 83       	std	Z+6, r24	; 0x06
   15784:	87 81       	ldd	r24, Z+7	; 0x07
   15786:	90 85       	ldd	r25, Z+8	; 0x08
   15788:	84 60       	ori	r24, 0x04	; 4
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   1578a:	90 87       	std	Z+8, r25	; 0x08
   1578c:	87 83       	std	Z+7, r24	; 0x07
   1578e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15792:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15796:	81 81       	ldd	r24, Z+1	; 0x01
   15798:	90 e0       	ldi	r25, 0x00	; 0
   1579a:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1579e:	80 e0       	ldi	r24, 0x00	; 0
   157a0:	90 e0       	ldi	r25, 0x00	; 0
   157a2:	0f 90       	pop	r0
   157a4:	0f 90       	pop	r0
   157a6:	df 91       	pop	r29
   157a8:	cf 91       	pop	r28
   157aa:	1f 91       	pop	r17
   157ac:	0f 91       	pop	r16
   157ae:	ff 90       	pop	r15
   157b0:	ef 90       	pop	r14
   157b2:	bf 90       	pop	r11
   157b4:	af 90       	pop	r10
   157b6:	9f 90       	pop	r9
   157b8:	8f 90       	pop	r8
   157ba:	08 95       	ret

000157bc <amigo_buffered_write>:
   157bc:	8f 92       	push	r8
   157be:	9f 92       	push	r9
   157c0:	af 92       	push	r10
   157c2:	bf 92       	push	r11
   157c4:	ef 92       	push	r14
   157c6:	ff 92       	push	r15
   157c8:	0f 93       	push	r16
   157ca:	1f 93       	push	r17
   157cc:	cf 93       	push	r28
   157ce:	df 93       	push	r29
   157d0:	00 d0       	rcall	.+0      	; 0x157d2 <amigo_buffered_write+0x16>
   157d2:	cd b7       	in	r28, 0x3d	; 61
   157d4:	de b7       	in	r29, 0x3e	; 62
   157d6:	6e e1       	ldi	r22, 0x1E	; 30
   157d8:	73 e1       	ldi	r23, 0x13	; 19
   157da:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <AMIGOs>
   157de:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <AMIGOs+0x1>
   157e2:	db db       	rcall	.-2122   	; 0x14f9a <amigo_chs_to_logical>
   157e4:	4b 01       	movw	r8, r22
   157e6:	5c 01       	movw	r10, r24
   157e8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   157ec:	87 fd       	sbrc	r24, 7
   157ee:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   157f2:	1a 82       	std	Y+2, r1	; 0x02
   157f4:	19 82       	std	Y+1, r1	; 0x01
   157f6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   157fa:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   157fe:	65 a1       	ldd	r22, Z+37	; 0x25
   15800:	76 a1       	ldd	r23, Z+38	; 0x26
   15802:	ae 01       	movw	r20, r28
   15804:	4f 5f       	subi	r20, 0xFF	; 255
   15806:	5f 4f       	sbci	r21, 0xFF	; 255
   15808:	85 ea       	ldi	r24, 0xA5	; 165
   1580a:	9c e1       	ldi	r25, 0x1C	; 28
   1580c:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   15810:	7c 01       	movw	r14, r24
   15812:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15816:	87 ff       	sbrs	r24, 7
   15818:	04 c0       	rjmp	.+8      	; 0x15822 <amigo_buffered_write+0x66>
   1581a:	8d e2       	ldi	r24, 0x2D	; 45
   1581c:	93 e1       	ldi	r25, 0x13	; 19
   1581e:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   15822:	89 81       	ldd	r24, Y+1	; 0x01
   15824:	9a 81       	ldd	r25, Y+2	; 0x02
    return ( uart_rx_count( uart ) );
   15826:	88 27       	eor	r24, r24
}
   15828:	90 7d       	andi	r25, 0xD0	; 208
   1582a:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1582e:	89 2b       	or	r24, r25
   15830:	49 f4       	brne	.+18     	; 0x15844 <amigo_buffered_write+0x88>
   15832:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15836:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   1583a:	85 a1       	ldd	r24, Z+37	; 0x25
   1583c:	96 a1       	ldd	r25, Z+38	; 0x26
   1583e:	e8 16       	cp	r14, r24
   15840:	f9 06       	cpc	r15, r25
   15842:	c1 f0       	breq	.+48     	; 0x15874 <amigo_buffered_write+0xb8>
   15844:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15848:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1584c:	81 e0       	ldi	r24, 0x01	; 1
   1584e:	86 83       	std	Z+6, r24	; 0x06
   15850:	87 81       	ldd	r24, Z+7	; 0x07
   15852:	90 85       	ldd	r25, Z+8	; 0x08
   15854:	80 62       	ori	r24, 0x20	; 32
   15856:	90 87       	std	Z+8, r25	; 0x08
   15858:	87 83       	std	Z+7, r24	; 0x07
   1585a:	20 ff       	sbrs	r18, 0
   1585c:	4e c0       	rjmp	.+156    	; 0x158fa <amigo_buffered_write+0x13e>
   1585e:	81 e4       	ldi	r24, 0x41	; 65
   15860:	97 e2       	ldi	r25, 0x27	; 39
   15862:	1f 92       	push	r1
   15864:	9f 93       	push	r25
   15866:	8f 93       	push	r24
   15868:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1586c:	0f 90       	pop	r0
   1586e:	0f 90       	pop	r0
   15870:	0f 90       	pop	r0
   15872:	43 c0       	rjmp	.+134    	; 0x158fa <amigo_buffered_write+0x13e>
   15874:	26 fd       	sbrc	r18, 6
   15876:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
   1587a:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOp>
   1587e:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOp+0x1>
   15882:	e0 90 56 19 	lds	r14, 0x1956	; 0x801956 <AMIGOs>
   15886:	f0 90 57 19 	lds	r15, 0x1957	; 0x801957 <AMIGOs+0x1>
   1588a:	27 e0       	ldi	r18, 0x07	; 7
   1588c:	e2 0e       	add	r14, r18
   1588e:	f1 1c       	adc	r15, r1
   15890:	fc 01       	movw	r30, r24
   15892:	05 a1       	ldd	r16, Z+37	; 0x25
   15894:	16 a1       	ldd	r17, Z+38	; 0x26
   15896:	25 ea       	ldi	r18, 0xA5	; 165
   15898:	3c e1       	ldi	r19, 0x1C	; 28
   1589a:	b5 01       	movw	r22, r10
   1589c:	a4 01       	movw	r20, r8
   1589e:	02 96       	adiw	r24, 0x02	; 2
   158a0:	0e 94 6e 8b 	call	0x116dc	; 0x116dc <dbf_open_write>
   158a4:	7c 01       	movw	r14, r24
   158a6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   158aa:	86 ff       	sbrs	r24, 6
   158ac:	04 c0       	rjmp	.+8      	; 0x158b6 <amigo_buffered_write+0xfa>
   158ae:	8c ee       	ldi	r24, 0xEC	; 236
   158b0:	9d e0       	ldi	r25, 0x0D	; 13
   158b2:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
   158b6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   158ba:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   158be:	85 a1       	ldd	r24, Z+37	; 0x25
   158c0:	96 a1       	ldd	r25, Z+38	; 0x26
   158c2:	e8 16       	cp	r14, r24
   158c4:	f9 06       	cpc	r15, r25
   158c6:	49 f0       	breq	.+18     	; 0x158da <amigo_buffered_write+0x11e>
   158c8:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   158cc:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   158d0:	81 e0       	ldi	r24, 0x01	; 1
   158d2:	86 83       	std	Z+6, r24	; 0x06
   158d4:	80 e0       	ldi	r24, 0x00	; 0
   158d6:	90 e0       	ldi	r25, 0x00	; 0
   158d8:	1c c0       	rjmp	.+56     	; 0x15912 <amigo_buffered_write+0x156>
   158da:	8e e1       	ldi	r24, 0x1E	; 30
   158dc:	93 e1       	ldi	r25, 0x13	; 19
   158de:	33 dd       	rcall	.-1434   	; 0x15346 <amigo_increment>
   158e0:	89 2b       	or	r24, r25
   158e2:	59 f0       	breq	.+22     	; 0x158fa <amigo_buffered_write+0x13e>
   158e4:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   158e8:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   158ec:	81 e0       	ldi	r24, 0x01	; 1
   158ee:	86 83       	std	Z+6, r24	; 0x06
   158f0:	87 81       	ldd	r24, Z+7	; 0x07
   158f2:	90 85       	ldd	r25, Z+8	; 0x08
   158f4:	84 60       	ori	r24, 0x04	; 4
   158f6:	90 87       	std	Z+8, r25	; 0x08
   158f8:	87 83       	std	Z+7, r24	; 0x07
   158fa:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   158fe:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15902:	81 81       	ldd	r24, Z+1	; 0x01
   15904:	90 e0       	ldi	r25, 0x00	; 0
   15906:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   1590a:	89 81       	ldd	r24, Y+1	; 0x01
   1590c:	9a 81       	ldd	r25, Y+2	; 0x02
   1590e:	88 27       	eor	r24, r24
   15910:	90 7d       	andi	r25, 0xD0	; 208
   15912:	0f 90       	pop	r0
   15914:	0f 90       	pop	r0
   15916:	df 91       	pop	r29
   15918:	cf 91       	pop	r28
   1591a:	1f 91       	pop	r17
   1591c:	0f 91       	pop	r16
   1591e:	ff 90       	pop	r15
   15920:	ef 90       	pop	r14
   15922:	bf 90       	pop	r11
   15924:	af 90       	pop	r10
   15926:	9f 90       	pop	r9
   15928:	8f 90       	pop	r8
   1592a:	08 95       	ret

0001592c <amigo_cmd_dsj>:
   1592c:	a3 e0       	ldi	r26, 0x03	; 3
   1592e:	b0 e0       	ldi	r27, 0x00	; 0
   15930:	ec e9       	ldi	r30, 0x9C	; 156
   15932:	fc ea       	ldi	r31, 0xAC	; 172
   15934:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   15938:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1593c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15940:	86 81       	ldd	r24, Z+6	; 0x06
   15942:	8b 83       	std	Y+3, r24	; 0x03
   15944:	80 e0       	ldi	r24, 0x00	; 0
   15946:	91 e0       	ldi	r25, 0x01	; 1
   15948:	9a 83       	std	Y+2, r25	; 0x02
   1594a:	89 83       	std	Y+1, r24	; 0x01
   1594c:	ae 01       	movw	r20, r28
   1594e:	4f 5f       	subi	r20, 0xFF	; 255
   15950:	5f 4f       	sbci	r21, 0xFF	; 255
   15952:	61 e0       	ldi	r22, 0x01	; 1
   15954:	70 e0       	ldi	r23, 0x00	; 0
   15956:	ce 01       	movw	r24, r28
   15958:	03 96       	adiw	r24, 0x03	; 3
   1595a:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   1595e:	29 81       	ldd	r18, Y+1	; 0x01
   15960:	3a 81       	ldd	r19, Y+2	; 0x02
   15962:	22 27       	eor	r18, r18
   15964:	30 7d       	andi	r19, 0xD0	; 208
   15966:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1596a:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1596e:	23 2b       	or	r18, r19
   15970:	29 f0       	breq	.+10     	; 0x1597c <amigo_cmd_dsj+0x50>
   15972:	27 81       	ldd	r18, Z+7	; 0x07
   15974:	30 85       	ldd	r19, Z+8	; 0x08
   15976:	20 62       	ori	r18, 0x20	; 32
   15978:	30 87       	std	Z+8, r19	; 0x08
   1597a:	27 83       	std	Z+7, r18	; 0x07
   1597c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   15980:	01 97       	sbiw	r24, 0x01	; 1
   15982:	c1 f0       	breq	.+48     	; 0x159b4 <amigo_cmd_dsj+0x88>
   15984:	81 e0       	ldi	r24, 0x01	; 1
   15986:	86 83       	std	Z+6, r24	; 0x06
   15988:	87 81       	ldd	r24, Z+7	; 0x07
   1598a:	90 85       	ldd	r25, Z+8	; 0x08
   1598c:	80 62       	ori	r24, 0x20	; 32
   1598e:	90 87       	std	Z+8, r25	; 0x08
   15990:	87 83       	std	Z+7, r24	; 0x07
   15992:	20 ff       	sbrs	r18, 0
   15994:	0a c0       	rjmp	.+20     	; 0x159aa <amigo_cmd_dsj+0x7e>
   15996:	87 e2       	ldi	r24, 0x27	; 39
   15998:	97 e2       	ldi	r25, 0x27	; 39
   1599a:	1f 92       	push	r1
   1599c:	9f 93       	push	r25
   1599e:	8f 93       	push	r24
   159a0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   159a4:	0f 90       	pop	r0
   159a6:	0f 90       	pop	r0
   159a8:	0f 90       	pop	r0
   159aa:	89 81       	ldd	r24, Y+1	; 0x01
   159ac:	9a 81       	ldd	r25, Y+2	; 0x02
   159ae:	88 27       	eor	r24, r24
   159b0:	90 7d       	andi	r25, 0xD0	; 208
   159b2:	1a c0       	rjmp	.+52     	; 0x159e8 <amigo_cmd_dsj+0xbc>
   159b4:	25 ff       	sbrs	r18, 5
   159b6:	0f c0       	rjmp	.+30     	; 0x159d6 <amigo_cmd_dsj+0xaa>
   159b8:	86 81       	ldd	r24, Z+6	; 0x06
   159ba:	1f 92       	push	r1
   159bc:	8f 93       	push	r24
   159be:	8a e1       	ldi	r24, 0x1A	; 26
   159c0:	97 e2       	ldi	r25, 0x27	; 39
   159c2:	1f 92       	push	r1
   159c4:	9f 93       	push	r25
   159c6:	8f 93       	push	r24
   159c8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   159cc:	0f 90       	pop	r0
   159ce:	0f 90       	pop	r0
   159d0:	0f 90       	pop	r0
   159d2:	0f 90       	pop	r0
   159d4:	0f 90       	pop	r0
   159d6:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   159da:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   159de:	16 82       	std	Z+6, r1	; 0x06
   159e0:	10 86       	std	Z+8, r1	; 0x08
   159e2:	17 82       	std	Z+7, r1	; 0x07
   159e4:	80 e0       	ldi	r24, 0x00	; 0
   159e6:	90 e0       	ldi	r25, 0x00	; 0
   159e8:	23 96       	adiw	r28, 0x03	; 3
   159ea:	e2 e0       	ldi	r30, 0x02	; 2
   159ec:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

000159f0 <amigo_cmd_clear>:
   159f0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   159f4:	85 ff       	sbrs	r24, 5
   159f6:	0a c0       	rjmp	.+20     	; 0x15a0c <amigo_cmd_clear+0x1c>
   159f8:	81 ee       	ldi	r24, 0xE1	; 225
   159fa:	96 e2       	ldi	r25, 0x26	; 38
   159fc:	1f 92       	push	r1
   159fe:	9f 93       	push	r25
   15a00:	8f 93       	push	r24
   15a02:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15a06:	0f 90       	pop	r0
   15a08:	0f 90       	pop	r0
   15a0a:	0f 90       	pop	r0
   15a0c:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15a10:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15a14:	15 82       	std	Z+5, r1	; 0x05
   15a16:	14 82       	std	Z+4, r1	; 0x04
   15a18:	13 82       	std	Z+3, r1	; 0x03
   15a1a:	16 82       	std	Z+6, r1	; 0x06
   15a1c:	10 86       	std	Z+8, r1	; 0x08
   15a1e:	17 82       	std	Z+7, r1	; 0x07
   15a20:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15a24:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15a28:	81 81       	ldd	r24, Z+1	; 0x01
   15a2a:	90 e0       	ldi	r25, 0x00	; 0
   15a2c:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
   15a30:	80 e0       	ldi	r24, 0x00	; 0
   15a32:	90 e0       	ldi	r25, 0x00	; 0
   15a34:	08 95       	ret

00015a36 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   15a36:	0f 93       	push	r16
   15a38:	1f 93       	push	r17
   15a3a:	cf 93       	push	r28
   15a3c:	df 93       	push	r29
   15a3e:	c8 2f       	mov	r28, r24
   15a40:	d6 2f       	mov	r29, r22
   15a42:	14 2f       	mov	r17, r20
   15a44:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   15a46:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15a4a:	90 e0       	ldi	r25, 0x00	; 0
   15a4c:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   15a50:	20 91 a9 1e 	lds	r18, 0x1EA9	; 0x801ea9 <talking>
   15a54:	89 2b       	or	r24, r25
   15a56:	19 f1       	breq	.+70     	; 0x15a9e <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15a58:	1f 92       	push	r1
   15a5a:	2f 93       	push	r18
   15a5c:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15a60:	1f 92       	push	r1
   15a62:	8f 93       	push	r24
   15a64:	0f 93       	push	r16
   15a66:	1f 93       	push	r17
   15a68:	1f 92       	push	r1
   15a6a:	df 93       	push	r29
   15a6c:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15a70:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15a74:	80 81       	ld	r24, Z
   15a76:	1f 92       	push	r1
   15a78:	8f 93       	push	r24
   15a7a:	1f 92       	push	r1
   15a7c:	cf 93       	push	r28
   15a7e:	8a e7       	ldi	r24, 0x7A	; 122
   15a80:	96 e2       	ldi	r25, 0x26	; 38
   15a82:	1f 92       	push	r1
   15a84:	9f 93       	push	r25
   15a86:	8f 93       	push	r24
   15a88:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15a8c:	8d b7       	in	r24, 0x3d	; 61
   15a8e:	9e b7       	in	r25, 0x3e	; 62
   15a90:	0f 96       	adiw	r24, 0x0f	; 15
   15a92:	0f b6       	in	r0, 0x3f	; 63
   15a94:	f8 94       	cli
   15a96:	9e bf       	out	0x3e, r25	; 62
   15a98:	0f be       	out	0x3f, r0	; 63
   15a9a:	8d bf       	out	0x3d, r24	; 61
   15a9c:	66 c0       	rjmp	.+204    	; 0x15b6a <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   15a9e:	82 2f       	mov	r24, r18
   15aa0:	90 e0       	ldi	r25, 0x00	; 0
   15aa2:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   15aa6:	30 91 ab 1e 	lds	r19, 0x1EAB	; 0x801eab <listening>
   15aaa:	20 91 a9 1e 	lds	r18, 0x1EA9	; 0x801ea9 <talking>
   15aae:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15ab2:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15ab6:	89 2b       	or	r24, r25
   15ab8:	e9 f0       	breq	.+58     	; 0x15af4 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15aba:	1f 92       	push	r1
   15abc:	2f 93       	push	r18
   15abe:	1f 92       	push	r1
   15ac0:	3f 93       	push	r19
   15ac2:	0f 93       	push	r16
   15ac4:	1f 93       	push	r17
   15ac6:	1f 92       	push	r1
   15ac8:	df 93       	push	r29
   15aca:	80 81       	ld	r24, Z
   15acc:	1f 92       	push	r1
   15ace:	8f 93       	push	r24
   15ad0:	1f 92       	push	r1
   15ad2:	cf 93       	push	r28
   15ad4:	83 e1       	ldi	r24, 0x13	; 19
   15ad6:	96 e2       	ldi	r25, 0x26	; 38
   15ad8:	1f 92       	push	r1
   15ada:	9f 93       	push	r25
   15adc:	8f 93       	push	r24
   15ade:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15ae2:	8d b7       	in	r24, 0x3d	; 61
   15ae4:	9e b7       	in	r25, 0x3e	; 62
   15ae6:	0f 96       	adiw	r24, 0x0f	; 15
   15ae8:	0f b6       	in	r0, 0x3f	; 63
   15aea:	f8 94       	cli
   15aec:	9e bf       	out	0x3e, r25	; 62
   15aee:	0f be       	out	0x3f, r0	; 63
   15af0:	8d bf       	out	0x3d, r24	; 61
   15af2:	3b c0       	rjmp	.+118    	; 0x15b6a <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15af4:	2f 35       	cpi	r18, 0x5F	; 95
   15af6:	e9 f4       	brne	.+58     	; 0x15b32 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15af8:	1f 92       	push	r1
   15afa:	2f 93       	push	r18
   15afc:	1f 92       	push	r1
   15afe:	3f 93       	push	r19
   15b00:	0f 93       	push	r16
   15b02:	1f 93       	push	r17
   15b04:	1f 92       	push	r1
   15b06:	df 93       	push	r29
   15b08:	80 81       	ld	r24, Z
   15b0a:	1f 92       	push	r1
   15b0c:	8f 93       	push	r24
   15b0e:	1f 92       	push	r1
   15b10:	cf 93       	push	r28
   15b12:	8c ea       	ldi	r24, 0xAC	; 172
   15b14:	95 e2       	ldi	r25, 0x25	; 37
   15b16:	1f 92       	push	r1
   15b18:	9f 93       	push	r25
   15b1a:	8f 93       	push	r24
   15b1c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15b20:	8d b7       	in	r24, 0x3d	; 61
   15b22:	9e b7       	in	r25, 0x3e	; 62
   15b24:	0f 96       	adiw	r24, 0x0f	; 15
   15b26:	0f b6       	in	r0, 0x3f	; 63
   15b28:	f8 94       	cli
   15b2a:	9e bf       	out	0x3e, r25	; 62
   15b2c:	0f be       	out	0x3f, r0	; 63
   15b2e:	8d bf       	out	0x3d, r24	; 61
   15b30:	1c c0       	rjmp	.+56     	; 0x15b6a <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15b32:	1f 92       	push	r1
   15b34:	2f 93       	push	r18
   15b36:	1f 92       	push	r1
   15b38:	3f 93       	push	r19
   15b3a:	0f 93       	push	r16
   15b3c:	1f 93       	push	r17
   15b3e:	1f 92       	push	r1
   15b40:	df 93       	push	r29
   15b42:	80 81       	ld	r24, Z
   15b44:	1f 92       	push	r1
   15b46:	8f 93       	push	r24
   15b48:	1f 92       	push	r1
   15b4a:	cf 93       	push	r28
   15b4c:	87 e4       	ldi	r24, 0x47	; 71
   15b4e:	95 e2       	ldi	r25, 0x25	; 37
   15b50:	1f 92       	push	r1
   15b52:	9f 93       	push	r25
   15b54:	8f 93       	push	r24
   15b56:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15b5a:	8d b7       	in	r24, 0x3d	; 61
   15b5c:	9e b7       	in	r25, 0x3e	; 62
   15b5e:	0f 96       	adiw	r24, 0x0f	; 15
   15b60:	0f b6       	in	r0, 0x3f	; 63
   15b62:	f8 94       	cli
   15b64:	9e bf       	out	0x3e, r25	; 62
   15b66:	0f be       	out	0x3f, r0	; 63
   15b68:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15b6a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15b6e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15b72:	81 81       	ldd	r24, Z+1	; 0x01
   15b74:	90 e0       	ldi	r25, 0x00	; 0
   15b76:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
    return(0);
}
   15b7a:	80 e0       	ldi	r24, 0x00	; 0
   15b7c:	90 e0       	ldi	r25, 0x00	; 0
   15b7e:	df 91       	pop	r29
   15b80:	cf 91       	pop	r28
   15b82:	1f 91       	pop	r17
   15b84:	0f 91       	pop	r16
   15b86:	08 95       	ret

00015b88 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15b88:	cf 93       	push	r28
   15b8a:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15b8c:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15b90:	90 e0       	ldi	r25, 0x00	; 0
   15b92:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   15b96:	20 91 a9 1e 	lds	r18, 0x1EA9	; 0x801ea9 <talking>
   15b9a:	89 2b       	or	r24, r25
   15b9c:	f9 f0       	breq	.+62     	; 0x15bdc <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b9e:	1f 92       	push	r1
   15ba0:	2f 93       	push	r18
   15ba2:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15ba6:	1f 92       	push	r1
   15ba8:	8f 93       	push	r24
   15baa:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15bae:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15bb2:	80 81       	ld	r24, Z
   15bb4:	1f 92       	push	r1
   15bb6:	8f 93       	push	r24
   15bb8:	1f 92       	push	r1
   15bba:	cf 93       	push	r28
   15bbc:	87 ef       	ldi	r24, 0xF7	; 247
   15bbe:	94 e2       	ldi	r25, 0x24	; 36
   15bc0:	1f 92       	push	r1
   15bc2:	9f 93       	push	r25
   15bc4:	8f 93       	push	r24
   15bc6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15bca:	8d b7       	in	r24, 0x3d	; 61
   15bcc:	9e b7       	in	r25, 0x3e	; 62
   15bce:	0b 96       	adiw	r24, 0x0b	; 11
   15bd0:	0f b6       	in	r0, 0x3f	; 63
   15bd2:	f8 94       	cli
   15bd4:	9e bf       	out	0x3e, r25	; 62
   15bd6:	0f be       	out	0x3f, r0	; 63
   15bd8:	8d bf       	out	0x3d, r24	; 61
   15bda:	5a c0       	rjmp	.+180    	; 0x15c90 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15bdc:	82 2f       	mov	r24, r18
   15bde:	90 e0       	ldi	r25, 0x00	; 0
   15be0:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   15be4:	30 91 ab 1e 	lds	r19, 0x1EAB	; 0x801eab <listening>
   15be8:	20 91 a9 1e 	lds	r18, 0x1EA9	; 0x801ea9 <talking>
   15bec:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15bf0:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15bf4:	89 2b       	or	r24, r25
   15bf6:	c9 f0       	breq	.+50     	; 0x15c2a <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15bf8:	1f 92       	push	r1
   15bfa:	2f 93       	push	r18
   15bfc:	1f 92       	push	r1
   15bfe:	3f 93       	push	r19
   15c00:	80 81       	ld	r24, Z
   15c02:	1f 92       	push	r1
   15c04:	8f 93       	push	r24
   15c06:	1f 92       	push	r1
   15c08:	cf 93       	push	r28
   15c0a:	87 ea       	ldi	r24, 0xA7	; 167
   15c0c:	94 e2       	ldi	r25, 0x24	; 36
   15c0e:	1f 92       	push	r1
   15c10:	9f 93       	push	r25
   15c12:	8f 93       	push	r24
   15c14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15c18:	8d b7       	in	r24, 0x3d	; 61
   15c1a:	9e b7       	in	r25, 0x3e	; 62
   15c1c:	0b 96       	adiw	r24, 0x0b	; 11
   15c1e:	0f b6       	in	r0, 0x3f	; 63
   15c20:	f8 94       	cli
   15c22:	9e bf       	out	0x3e, r25	; 62
   15c24:	0f be       	out	0x3f, r0	; 63
   15c26:	8d bf       	out	0x3d, r24	; 61
   15c28:	33 c0       	rjmp	.+102    	; 0x15c90 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15c2a:	2f 35       	cpi	r18, 0x5F	; 95
   15c2c:	c9 f4       	brne	.+50     	; 0x15c60 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15c2e:	1f 92       	push	r1
   15c30:	2f 93       	push	r18
   15c32:	1f 92       	push	r1
   15c34:	3f 93       	push	r19
   15c36:	80 81       	ld	r24, Z
   15c38:	1f 92       	push	r1
   15c3a:	8f 93       	push	r24
   15c3c:	1f 92       	push	r1
   15c3e:	cf 93       	push	r28
   15c40:	87 e5       	ldi	r24, 0x57	; 87
   15c42:	94 e2       	ldi	r25, 0x24	; 36
   15c44:	1f 92       	push	r1
   15c46:	9f 93       	push	r25
   15c48:	8f 93       	push	r24
   15c4a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15c4e:	8d b7       	in	r24, 0x3d	; 61
   15c50:	9e b7       	in	r25, 0x3e	; 62
   15c52:	0b 96       	adiw	r24, 0x0b	; 11
   15c54:	0f b6       	in	r0, 0x3f	; 63
   15c56:	f8 94       	cli
   15c58:	9e bf       	out	0x3e, r25	; 62
   15c5a:	0f be       	out	0x3f, r0	; 63
   15c5c:	8d bf       	out	0x3d, r24	; 61
   15c5e:	18 c0       	rjmp	.+48     	; 0x15c90 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15c60:	1f 92       	push	r1
   15c62:	2f 93       	push	r18
   15c64:	1f 92       	push	r1
   15c66:	3f 93       	push	r19
   15c68:	80 81       	ld	r24, Z
   15c6a:	1f 92       	push	r1
   15c6c:	8f 93       	push	r24
   15c6e:	1f 92       	push	r1
   15c70:	cf 93       	push	r28
   15c72:	86 e0       	ldi	r24, 0x06	; 6
   15c74:	94 e2       	ldi	r25, 0x24	; 36
   15c76:	1f 92       	push	r1
   15c78:	9f 93       	push	r25
   15c7a:	8f 93       	push	r24
   15c7c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15c80:	8d b7       	in	r24, 0x3d	; 61
   15c82:	9e b7       	in	r25, 0x3e	; 62
   15c84:	0b 96       	adiw	r24, 0x0b	; 11
   15c86:	0f b6       	in	r0, 0x3f	; 63
   15c88:	f8 94       	cli
   15c8a:	9e bf       	out	0x3e, r25	; 62
   15c8c:	0f be       	out	0x3f, r0	; 63
   15c8e:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15c90:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15c94:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15c98:	81 81       	ldd	r24, Z+1	; 0x01
   15c9a:	90 e0       	ldi	r25, 0x00	; 0
   15c9c:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
    return(0);
}
   15ca0:	80 e0       	ldi	r24, 0x00	; 0
   15ca2:	90 e0       	ldi	r25, 0x00	; 0
   15ca4:	cf 91       	pop	r28
   15ca6:	08 95       	ret

00015ca8 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   15ca8:	8f 30       	cpi	r24, 0x0F	; 15
   15caa:	29 f0       	breq	.+10     	; 0x15cb6 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   15cac:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15cb0:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15cb4:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   15cb6:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15cba:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15cbe:	81 81       	ldd	r24, Z+1	; 0x01
   15cc0:	88 23       	and	r24, r24
   15cc2:	29 f0       	breq	.+10     	; 0x15cce <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   15cc4:	87 81       	ldd	r24, Z+7	; 0x07
   15cc6:	90 85       	ldd	r25, Z+8	; 0x08
   15cc8:	80 64       	ori	r24, 0x40	; 64
   15cca:	90 87       	std	Z+8, r25	; 0x08
   15ccc:	87 83       	std	Z+7, r24	; 0x07
   15cce:	08 95       	ret

00015cd0 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   15cd0:	a3 e1       	ldi	r26, 0x13	; 19
   15cd2:	b0 e0       	ldi	r27, 0x00	; 0
   15cd4:	ee e6       	ldi	r30, 0x6E	; 110
   15cd6:	fe ea       	ldi	r31, 0xAE	; 174
   15cd8:	0c 94 47 e9 	jmp	0x1d28e	; 0x1d28e <__prologue_saves__+0x18>
   15cdc:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   15cde:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15ce2:	85 ff       	sbrs	r24, 5
   15ce4:	16 c0       	rjmp	.+44     	; 0x15d12 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   15ce6:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   15cea:	1f 92       	push	r1
   15cec:	8f 93       	push	r24
   15cee:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15cf2:	1f 92       	push	r1
   15cf4:	8f 93       	push	r24
   15cf6:	ff 92       	push	r15
   15cf8:	ef 92       	push	r14
   15cfa:	84 ed       	ldi	r24, 0xD4	; 212
   15cfc:	93 e2       	ldi	r25, 0x23	; 35
   15cfe:	1f 92       	push	r1
   15d00:	9f 93       	push	r25
   15d02:	8f 93       	push	r24
   15d04:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15d08:	0f b6       	in	r0, 0x3f	; 63
   15d0a:	f8 94       	cli
   15d0c:	de bf       	out	0x3e, r29	; 62
   15d0e:	0f be       	out	0x3f, r0	; 63
   15d10:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   15d12:	9e e7       	ldi	r25, 0x7E	; 126
   15d14:	e9 16       	cp	r14, r25
   15d16:	f1 04       	cpc	r15, r1
   15d18:	f1 f5       	brne	.+124    	; 0x15d96 <Amigo_Command+0xc6>
   15d1a:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   15d1e:	90 e0       	ldi	r25, 0x00	; 0
   15d20:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   15d24:	89 2b       	or	r24, r25
   15d26:	09 f4       	brne	.+2      	; 0x15d2a <Amigo_Command+0x5a>
   15d28:	86 c0       	rjmp	.+268    	; 0x15e36 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15d2a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15d2e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15d32:	81 81       	ldd	r24, Z+1	; 0x01
   15d34:	90 e0       	ldi	r25, 0x00	; 0
   15d36:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
        status = EOI_FLAG;
   15d3a:	80 e0       	ldi	r24, 0x00	; 0
   15d3c:	91 e0       	ldi	r25, 0x01	; 1
   15d3e:	9b 8b       	std	Y+19, r25	; 0x13
   15d40:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15d42:	ae 01       	movw	r20, r28
   15d44:	4e 5e       	subi	r20, 0xEE	; 238
   15d46:	5f 4f       	sbci	r21, 0xFF	; 255
   15d48:	60 e0       	ldi	r22, 0x00	; 0
   15d4a:	72 e0       	ldi	r23, 0x02	; 2
   15d4c:	85 ea       	ldi	r24, 0xA5	; 165
   15d4e:	9c e1       	ldi	r25, 0x1C	; 28
   15d50:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15d54:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15d58:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15d5c:	81 81       	ldd	r24, Z+1	; 0x01
   15d5e:	90 e0       	ldi	r25, 0x00	; 0
   15d60:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15d64:	8a 89       	ldd	r24, Y+18	; 0x12
   15d66:	9b 89       	ldd	r25, Y+19	; 0x13
   15d68:	88 27       	eor	r24, r24
   15d6a:	90 7d       	andi	r25, 0xD0	; 208
   15d6c:	89 2b       	or	r24, r25
   15d6e:	09 f4       	brne	.+2      	; 0x15d72 <Amigo_Command+0xa2>
   15d70:	89 c2       	rjmp	.+1298   	; 0x16284 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15d72:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15d76:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15d7a:	81 e0       	ldi	r24, 0x01	; 1
   15d7c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15d7e:	87 81       	ldd	r24, Z+7	; 0x07
   15d80:	90 85       	ldd	r25, Z+8	; 0x08
   15d82:	80 62       	ori	r24, 0x20	; 32
   15d84:	90 87       	std	Z+8, r25	; 0x08
   15d86:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15d88:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15d8c:	80 ff       	sbrs	r24, 0
   15d8e:	7a c2       	rjmp	.+1268   	; 0x16284 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   15d90:	82 eb       	ldi	r24, 0xB2	; 178
   15d92:	93 e2       	ldi	r25, 0x23	; 35
   15d94:	8e c0       	rjmp	.+284    	; 0x15eb2 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   15d96:	8f e7       	ldi	r24, 0x7F	; 127
   15d98:	e8 16       	cp	r14, r24
   15d9a:	f1 04       	cpc	r15, r1
   15d9c:	09 f0       	breq	.+2      	; 0x15da0 <Amigo_Command+0xd0>
   15d9e:	4b c0       	rjmp	.+150    	; 0x15e36 <Amigo_Command+0x166>
   15da0:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15da4:	90 e0       	ldi	r25, 0x00	; 0
   15da6:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   15daa:	89 2b       	or	r24, r25
   15dac:	09 f4       	brne	.+2      	; 0x15db0 <Amigo_Command+0xe0>
   15dae:	43 c0       	rjmp	.+134    	; 0x15e36 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15db0:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15db4:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15db8:	81 81       	ldd	r24, Z+1	; 0x01
   15dba:	90 e0       	ldi	r25, 0x00	; 0
   15dbc:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   15dc0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15dc4:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15dc6:	0e 94 c5 8b 	call	0x1178a	; 0x1178a <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   15dca:	80 e0       	ldi	r24, 0x00	; 0
   15dcc:	91 e0       	ldi	r25, 0x01	; 1
   15dce:	9b 8b       	std	Y+19, r25	; 0x13
   15dd0:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15dd2:	ae 01       	movw	r20, r28
   15dd4:	4e 5e       	subi	r20, 0xEE	; 238
   15dd6:	5f 4f       	sbci	r21, 0xFF	; 255
   15dd8:	60 e0       	ldi	r22, 0x00	; 0
   15dda:	72 e0       	ldi	r23, 0x02	; 2
   15ddc:	85 ea       	ldi	r24, 0xA5	; 165
   15dde:	9c e1       	ldi	r25, 0x1C	; 28
   15de0:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   15de4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15de8:	87 ff       	sbrs	r24, 7
   15dea:	04 c0       	rjmp	.+8      	; 0x15df4 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   15dec:	8d e2       	ldi	r24, 0x2D	; 45
   15dee:	93 e1       	ldi	r25, 0x13	; 19
   15df0:	0e 94 d7 8b 	call	0x117ae	; 0x117ae <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15df4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15df8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15dfc:	81 81       	ldd	r24, Z+1	; 0x01
   15dfe:	90 e0       	ldi	r25, 0x00	; 0
   15e00:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15e04:	8a 89       	ldd	r24, Y+18	; 0x12
   15e06:	9b 89       	ldd	r25, Y+19	; 0x13
   15e08:	88 27       	eor	r24, r24
   15e0a:	90 7d       	andi	r25, 0xD0	; 208
   15e0c:	89 2b       	or	r24, r25
   15e0e:	09 f4       	brne	.+2      	; 0x15e12 <Amigo_Command+0x142>
   15e10:	39 c2       	rjmp	.+1138   	; 0x16284 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15e12:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15e16:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15e1a:	81 e0       	ldi	r24, 0x01	; 1
   15e1c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15e1e:	87 81       	ldd	r24, Z+7	; 0x07
   15e20:	90 85       	ldd	r25, Z+8	; 0x08
   15e22:	80 62       	ori	r24, 0x20	; 32
   15e24:	90 87       	std	Z+8, r25	; 0x08
   15e26:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15e28:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15e2c:	80 ff       	sbrs	r24, 0
   15e2e:	2a c2       	rjmp	.+1108   	; 0x16284 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   15e30:	81 e9       	ldi	r24, 0x91	; 145
   15e32:	93 e2       	ldi	r25, 0x23	; 35
   15e34:	3e c0       	rjmp	.+124    	; 0x15eb2 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15e36:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   15e3a:	90 e0       	ldi	r25, 0x00	; 0
   15e3c:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   15e40:	89 2b       	or	r24, r25
   15e42:	19 f4       	brne	.+6      	; 0x15e4a <Amigo_Command+0x17a>
        return(0);
   15e44:	80 e0       	ldi	r24, 0x00	; 0
   15e46:	90 e0       	ldi	r25, 0x00	; 0
   15e48:	25 c2       	rjmp	.+1098   	; 0x16294 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15e4a:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   15e4e:	90 e0       	ldi	r25, 0x00	; 0
   15e50:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   15e54:	89 2b       	or	r24, r25
   15e56:	b1 f7       	brne	.-20     	; 0x15e44 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15e58:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   15e5c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   15e60:	81 81       	ldd	r24, Z+1	; 0x01
   15e62:	90 e0       	ldi	r25, 0x00	; 0
   15e64:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   15e68:	80 e0       	ldi	r24, 0x00	; 0
   15e6a:	91 e0       	ldi	r25, 0x01	; 1
   15e6c:	9b 8b       	std	Y+19, r25	; 0x13
   15e6e:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15e70:	ae 01       	movw	r20, r28
   15e72:	4e 5e       	subi	r20, 0xEE	; 238
   15e74:	5f 4f       	sbci	r21, 0xFF	; 255
   15e76:	60 e0       	ldi	r22, 0x00	; 0
   15e78:	72 e0       	ldi	r23, 0x02	; 2
   15e7a:	85 ea       	ldi	r24, 0xA5	; 165
   15e7c:	9c e1       	ldi	r25, 0x1C	; 28
   15e7e:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   15e82:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   15e84:	8a 89       	ldd	r24, Y+18	; 0x12
   15e86:	9b 89       	ldd	r25, Y+19	; 0x13
   15e88:	88 27       	eor	r24, r24
   15e8a:	90 7d       	andi	r25, 0xD0	; 208
   15e8c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   15e90:	89 2b       	or	r24, r25
   15e92:	c1 f0       	breq	.+48     	; 0x15ec4 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   15e94:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15e98:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15e9c:	81 e0       	ldi	r24, 0x01	; 1
   15e9e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15ea0:	87 81       	ldd	r24, Z+7	; 0x07
   15ea2:	90 85       	ldd	r25, Z+8	; 0x08
   15ea4:	80 62       	ori	r24, 0x20	; 32
   15ea6:	90 87       	std	Z+8, r25	; 0x08
   15ea8:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   15eaa:	20 ff       	sbrs	r18, 0
   15eac:	eb c1       	rjmp	.+982    	; 0x16284 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   15eae:	80 e7       	ldi	r24, 0x70	; 112
   15eb0:	93 e2       	ldi	r25, 0x23	; 35
   15eb2:	1f 92       	push	r1
   15eb4:	9f 93       	push	r25
   15eb6:	8f 93       	push	r24
   15eb8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15ebc:	0f 90       	pop	r0
   15ebe:	0f 90       	pop	r0
   15ec0:	0f 90       	pop	r0
   15ec2:	e0 c1       	rjmp	.+960    	; 0x16284 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   15ec4:	25 ff       	sbrs	r18, 5
   15ec6:	10 c0       	rjmp	.+32     	; 0x15ee8 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   15ec8:	1f 93       	push	r17
   15eca:	0f 93       	push	r16
   15ecc:	ff 92       	push	r15
   15ece:	ef 92       	push	r14
   15ed0:	81 e4       	ldi	r24, 0x41	; 65
   15ed2:	93 e2       	ldi	r25, 0x23	; 35
   15ed4:	1f 92       	push	r1
   15ed6:	9f 93       	push	r25
   15ed8:	8f 93       	push	r24
   15eda:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15ede:	0f b6       	in	r0, 0x3f	; 63
   15ee0:	f8 94       	cli
   15ee2:	de bf       	out	0x3e, r29	; 62
   15ee4:	0f be       	out	0x3f, r0	; 63
   15ee6:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   15ee8:	01 15       	cp	r16, r1
   15eea:	11 05       	cpc	r17, r1
   15eec:	61 f4       	brne	.+24     	; 0x15f06 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   15eee:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15ef2:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15ef6:	81 e0       	ldi	r24, 0x01	; 1
   15ef8:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15efa:	87 81       	ldd	r24, Z+7	; 0x07
   15efc:	90 85       	ldd	r25, Z+8	; 0x08
   15efe:	80 62       	ori	r24, 0x20	; 32
   15f00:	90 87       	std	Z+8, r25	; 0x08
   15f02:	87 83       	std	Z+7, r24	; 0x07
   15f04:	bf c1       	rjmp	.+894    	; 0x16284 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   15f06:	60 91 a5 1c 	lds	r22, 0x1CA5	; 0x801ca5 <gpib_iobuff>

    if (secondary == 0x68)
   15f0a:	98 e6       	ldi	r25, 0x68	; 104
   15f0c:	e9 16       	cp	r14, r25
   15f0e:	f1 04       	cpc	r15, r1
   15f10:	09 f0       	breq	.+2      	; 0x15f14 <Amigo_Command+0x244>
   15f12:	28 c1       	rjmp	.+592    	; 0x16164 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   15f14:	61 11       	cpse	r22, r1
   15f16:	2e c0       	rjmp	.+92     	; 0x15f74 <Amigo_Command+0x2a4>
   15f18:	02 30       	cpi	r16, 0x02	; 2
   15f1a:	11 05       	cpc	r17, r1
   15f1c:	09 f0       	breq	.+2      	; 0x15f20 <Amigo_Command+0x250>
   15f1e:	b7 c1       	rjmp	.+878    	; 0x1628e <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15f20:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15f24:	85 ff       	sbrs	r24, 5
   15f26:	0a c0       	rjmp	.+20     	; 0x15f3c <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   15f28:	81 e2       	ldi	r24, 0x21	; 33
   15f2a:	93 e2       	ldi	r25, 0x23	; 35
   15f2c:	1f 92       	push	r1
   15f2e:	9f 93       	push	r25
   15f30:	8f 93       	push	r24
   15f32:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15f36:	0f 90       	pop	r0
   15f38:	0f 90       	pop	r0
   15f3a:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   15f3c:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15f40:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15f44:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   15f46:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   15f48:	10 86       	std	Z+8, r1	; 0x08
   15f4a:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   15f4c:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   15f4e:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
   15f52:	98 2f       	mov	r25, r24
   15f54:	92 95       	swap	r25
   15f56:	96 95       	lsr	r25
   15f58:	96 95       	lsr	r25
   15f5a:	93 70       	andi	r25, 0x03	; 3
   15f5c:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   15f5e:	8f 73       	andi	r24, 0x3F	; 63
   15f60:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   15f62:	ce 01       	movw	r24, r28
   15f64:	01 96       	adiw	r24, 0x01	; 1
   15f66:	18 da       	rcall	.-3024   	; 0x15398 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   15f68:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   15f6c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   15f70:	85 e0       	ldi	r24, 0x05	; 5
   15f72:	5c c1       	rjmp	.+696    	; 0x1622c <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   15f74:	62 30       	cpi	r22, 0x02	; 2
   15f76:	09 f0       	breq	.+2      	; 0x15f7a <Amigo_Command+0x2aa>
   15f78:	3f c0       	rjmp	.+126    	; 0x15ff8 <Amigo_Command+0x328>
   15f7a:	05 30       	cpi	r16, 0x05	; 5
   15f7c:	11 05       	cpc	r17, r1
   15f7e:	d1 f4       	brne	.+52     	; 0x15fb4 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15f80:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15f84:	85 ff       	sbrs	r24, 5
   15f86:	0a c0       	rjmp	.+20     	; 0x15f9c <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   15f88:	8d e0       	ldi	r24, 0x0D	; 13
   15f8a:	93 e2       	ldi	r25, 0x23	; 35
   15f8c:	1f 92       	push	r1
   15f8e:	9f 93       	push	r25
   15f90:	8f 93       	push	r24
   15f92:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15f96:	0f 90       	pop	r0
   15f98:	0f 90       	pop	r0
   15f9a:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15f9c:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
   15fa0:	83 de       	rcall	.-762    	; 0x15ca8 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   15fa2:	80 91 a7 1c 	lds	r24, 0x1CA7	; 0x801ca7 <gpib_iobuff+0x2>
   15fa6:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   15fa8:	80 91 a8 1c 	lds	r24, 0x1CA8	; 0x801ca8 <gpib_iobuff+0x3>
   15fac:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   15fae:	80 91 a9 1c 	lds	r24, 0x1CA9	; 0x801ca9 <gpib_iobuff+0x4>
   15fb2:	1d c0       	rjmp	.+58     	; 0x15fee <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   15fb4:	06 30       	cpi	r16, 0x06	; 6
   15fb6:	11 05       	cpc	r17, r1
   15fb8:	09 f0       	breq	.+2      	; 0x15fbc <Amigo_Command+0x2ec>
   15fba:	69 c1       	rjmp	.+722    	; 0x1628e <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15fbc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   15fc0:	85 ff       	sbrs	r24, 5
   15fc2:	0a c0       	rjmp	.+20     	; 0x15fd8 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   15fc4:	89 ef       	ldi	r24, 0xF9	; 249
   15fc6:	92 e2       	ldi	r25, 0x22	; 34
   15fc8:	1f 92       	push	r1
   15fca:	9f 93       	push	r25
   15fcc:	8f 93       	push	r24
 *
 * data - byte to send
 */
void i2c_Transmit(uint8_t data)
{
	TWI_SendByte(data);
   15fce:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   15fd2:	0f 90       	pop	r0
   15fd4:	0f 90       	pop	r0
   15fd6:	0f 90       	pop	r0
   15fd8:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
   15fdc:	65 de       	rcall	.-822    	; 0x15ca8 <amigo_check_unit>
   15fde:	80 91 a8 1c 	lds	r24, 0x1CA8	; 0x801ca8 <gpib_iobuff+0x3>
   15fe2:	8c 83       	std	Y+4, r24	; 0x04
   15fe4:	80 91 a9 1c 	lds	r24, 0x1CA9	; 0x801ca9 <gpib_iobuff+0x4>
   15fe8:	8d 83       	std	Y+5, r24	; 0x05
  i2c_Transmit(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
  i2c_Transmit(SPECIAL_COMMAND);                      //Send special command character
  i2c_Transmit(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
  i2c_Transmit(SETTING_COMMAND);                      //Put LCD into setting mode
  i2c_Transmit(CLEAR_COMMAND);                        //Send clear display command
  i2c_End();                              //Stop transmission
   15fea:	80 91 aa 1c 	lds	r24, 0x1CAA	; 0x801caa <gpib_iobuff+0x5>

  delayms(50);                                      //let things settle a bit
   15fee:	8e 83       	std	Y+6, r24	; 0x06
   15ff0:	ce 01       	movw	r24, r28
   15ff2:	01 96       	adiw	r24, 0x01	; 1
   15ff4:	d1 d9       	rcall	.-3166   	; 0x15398 <amigo_seek>
   15ff6:	1b c1       	rjmp	.+566    	; 0x1622e <Amigo_Command+0x55e>
   15ff8:	63 30       	cpi	r22, 0x03	; 3
   15ffa:	e9 f4       	brne	.+58     	; 0x16036 <Amigo_Command+0x366>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   15ffc:	02 30       	cpi	r16, 0x02	; 2
   15ffe:	11 05       	cpc	r17, r1
   16000:	09 f0       	breq	.+2      	; 0x16004 <Amigo_Command+0x334>
   16002:	45 c1       	rjmp	.+650    	; 0x1628e <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   16004:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16008:	85 ff       	sbrs	r24, 5
   1600a:	0a c0       	rjmp	.+20     	; 0x16020 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   1600c:	80 ed       	ldi	r24, 0xD0	; 208
   1600e:	92 e2       	ldi	r25, 0x22	; 34
   16010:	1f 92       	push	r1
   16012:	9f 93       	push	r25
   16014:	8f 93       	push	r24
   16016:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1601a:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1601c:	0f 90       	pop	r0
   1601e:	0f 90       	pop	r0
   16020:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            amigo_request_status();
   16024:	41 de       	rcall	.-894    	; 0x15ca8 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16026:	7b d8       	rcall	.-3850   	; 0x1511e <amigo_request_status>
   16028:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1602c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   16030:	83 e0       	ldi	r24, 0x03	; 3
   16032:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16034:	27 c1       	rjmp	.+590    	; 0x16284 <Amigo_Command+0x5b4>
   16036:	65 30       	cpi	r22, 0x05	; 5
   16038:	d9 f4       	brne	.+54     	; 0x16070 <Amigo_Command+0x3a0>
   1603a:	02 30       	cpi	r16, 0x02	; 2
   1603c:	11 05       	cpc	r17, r1
   1603e:	09 f0       	breq	.+2      	; 0x16042 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   16040:	26 c1       	rjmp	.+588    	; 0x1628e <Amigo_Command+0x5be>
   16042:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16046:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   16048:	0a c0       	rjmp	.+20     	; 0x1605e <Amigo_Command+0x38e>
   1604a:	8f ea       	ldi	r24, 0xAF	; 175
   1604c:	92 e2       	ldi	r25, 0x22	; 34
   1604e:	1f 92       	push	r1
   16050:	9f 93       	push	r25
   16052:	8f 93       	push	r24
   16054:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16058:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1605a:	0f 90       	pop	r0
   1605c:	0f 90       	pop	r0
   1605e:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16062:	22 de       	rcall	.-956    	; 0x15ca8 <amigo_check_unit>
   16064:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   16068:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1606c:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   1606e:	de c0       	rjmp	.+444    	; 0x1622c <Amigo_Command+0x55c>
   16070:	67 30       	cpi	r22, 0x07	; 7
   16072:	f9 f4       	brne	.+62     	; 0x160b2 <Amigo_Command+0x3e2>
   16074:	04 30       	cpi	r16, 0x04	; 4
   16076:	11 05       	cpc	r17, r1
   16078:	09 f0       	breq	.+2      	; 0x1607c <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   1607a:	09 c1       	rjmp	.+530    	; 0x1628e <Amigo_Command+0x5be>
   1607c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16080:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   16082:	0a c0       	rjmp	.+20     	; 0x16098 <Amigo_Command+0x3c8>
   16084:	8f e9       	ldi	r24, 0x9F	; 159
   16086:	92 e2       	ldi	r25, 0x22	; 34
   16088:	1f 92       	push	r1
   1608a:	9f 93       	push	r25
   1608c:	8f 93       	push	r24
   1608e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16092:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16094:	0f 90       	pop	r0
   16096:	0f 90       	pop	r0
   16098:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   1609c:	05 de       	rcall	.-1014   	; 0x15ca8 <amigo_check_unit>
   1609e:	80 91 a7 1c 	lds	r24, 0x1CA7	; 0x801ca7 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   160a2:	90 e0       	ldi	r25, 0x00	; 0
   160a4:	98 2f       	mov	r25, r24
   160a6:	88 27       	eor	r24, r24
   160a8:	20 91 a8 1c 	lds	r18, 0x1CA8	; 0x801ca8 <gpib_iobuff+0x3>
   160ac:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   160ae:	9f d9       	rcall	.-3266   	; 0x153ee <amigo_verify>
   160b0:	f1 c0       	rjmp	.+482    	; 0x16294 <Amigo_Command+0x5c4>
   160b2:	68 30       	cpi	r22, 0x08	; 8
   160b4:	d9 f4       	brne	.+54     	; 0x160ec <Amigo_Command+0x41c>
   160b6:	02 30       	cpi	r16, 0x02	; 2
   160b8:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   160ba:	09 f0       	breq	.+2      	; 0x160be <Amigo_Command+0x3ee>
   160bc:	e8 c0       	rjmp	.+464    	; 0x1628e <Amigo_Command+0x5be>
   160be:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   160c2:	85 ff       	sbrs	r24, 5
   160c4:	0a c0       	rjmp	.+20     	; 0x160da <Amigo_Command+0x40a>
   160c6:	8d e7       	ldi	r24, 0x7D	; 125
   160c8:	92 e2       	ldi	r25, 0x22	; 34
   160ca:	1f 92       	push	r1
   160cc:	9f 93       	push	r25
   160ce:	8f 93       	push	r24
   160d0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   160d4:	0f 90       	pop	r0
   160d6:	0f 90       	pop	r0
   160d8:	0f 90       	pop	r0
   160da:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   160de:	e4 dd       	rcall	.-1080   	; 0x15ca8 <amigo_check_unit>
   160e0:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   160e4:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   160e8:	88 e0       	ldi	r24, 0x08	; 8
   160ea:	a0 c0       	rjmp	.+320    	; 0x1622c <Amigo_Command+0x55c>
   160ec:	86 2f       	mov	r24, r22
   160ee:	8f 7d       	andi	r24, 0xDF	; 223
   160f0:	8b 30       	cpi	r24, 0x0B	; 11
   160f2:	d9 f4       	brne	.+54     	; 0x1612a <Amigo_Command+0x45a>
   160f4:	02 30       	cpi	r16, 0x02	; 2
   160f6:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   160f8:	09 f0       	breq	.+2      	; 0x160fc <Amigo_Command+0x42c>
   160fa:	c9 c0       	rjmp	.+402    	; 0x1628e <Amigo_Command+0x5be>
   160fc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   16100:	85 ff       	sbrs	r24, 5
   16102:	0a c0       	rjmp	.+20     	; 0x16118 <Amigo_Command+0x448>
   16104:	81 e6       	ldi	r24, 0x61	; 97
   16106:	92 e2       	ldi	r25, 0x22	; 34
   16108:	1f 92       	push	r1
   1610a:	9f 93       	push	r25
   1610c:	8f 93       	push	r24
   1610e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16112:	0f 90       	pop	r0
   16114:	0f 90       	pop	r0
   16116:	0f 90       	pop	r0
   16118:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1611c:	c5 dd       	rcall	.-1142   	; 0x15ca8 <amigo_check_unit>
   1611e:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   16122:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   16126:	8a e0       	ldi	r24, 0x0A	; 10
   16128:	81 c0       	rjmp	.+258    	; 0x1622c <Amigo_Command+0x55c>
   1612a:	64 31       	cpi	r22, 0x14	; 20
   1612c:	09 f0       	breq	.+2      	; 0x16130 <Amigo_Command+0x460>
   1612e:	af c0       	rjmp	.+350    	; 0x1628e <Amigo_Command+0x5be>
   16130:	02 30       	cpi	r16, 0x02	; 2
   16132:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16134:	09 f0       	breq	.+2      	; 0x16138 <Amigo_Command+0x468>
   16136:	ab c0       	rjmp	.+342    	; 0x1628e <Amigo_Command+0x5be>
   16138:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   1613c:	85 ff       	sbrs	r24, 5
   1613e:	0a c0       	rjmp	.+20     	; 0x16154 <Amigo_Command+0x484>
   16140:	88 e3       	ldi	r24, 0x38	; 56
   16142:	92 e2       	ldi	r25, 0x22	; 34
   16144:	1f 92       	push	r1
   16146:	9f 93       	push	r25
   16148:	8f 93       	push	r24
   1614a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1614e:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   16150:	0f 90       	pop	r0
   16152:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   16154:	0e 94 81 a8 	call	0x15102	; 0x15102 <amigo_request_logical_address>
   16158:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1615c:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16160:	84 e0       	ldi	r24, 0x04	; 4
   16162:	64 c0       	rjmp	.+200    	; 0x1622c <Amigo_Command+0x55c>
   16164:	89 e6       	ldi	r24, 0x69	; 105
   16166:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   16168:	f1 04       	cpc	r15, r1
   1616a:	f1 f4       	brne	.+60     	; 0x161a8 <Amigo_Command+0x4d8>
   1616c:	68 30       	cpi	r22, 0x08	; 8
   1616e:	09 f0       	breq	.+2      	; 0x16172 <Amigo_Command+0x4a2>
   16170:	8e c0       	rjmp	.+284    	; 0x1628e <Amigo_Command+0x5be>
   16172:	02 30       	cpi	r16, 0x02	; 2
   16174:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16176:	09 f0       	breq	.+2      	; 0x1617a <Amigo_Command+0x4aa>
   16178:	8a c0       	rjmp	.+276    	; 0x1628e <Amigo_Command+0x5be>
   1617a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   1617e:	85 ff       	sbrs	r24, 5
   16180:	0a c0       	rjmp	.+20     	; 0x16196 <Amigo_Command+0x4c6>
   16182:	88 e1       	ldi	r24, 0x18	; 24
   16184:	92 e2       	ldi	r25, 0x22	; 34
   16186:	1f 92       	push	r1
   16188:	9f 93       	push	r25
   1618a:	8f 93       	push	r24
   1618c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16190:	0f 90       	pop	r0
   16192:	0f 90       	pop	r0
   16194:	0f 90       	pop	r0
   16196:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   1619a:	86 dd       	rcall	.-1268   	; 0x15ca8 <amigo_check_unit>
   1619c:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   161a0:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   161a4:	89 e0       	ldi	r24, 0x09	; 9
   161a6:	42 c0       	rjmp	.+132    	; 0x1622c <Amigo_Command+0x55c>
   161a8:	9a e6       	ldi	r25, 0x6A	; 106
   161aa:	e9 16       	cp	r14, r25
   161ac:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   161ae:	09 f0       	breq	.+2      	; 0x161b2 <Amigo_Command+0x4e2>
   161b0:	47 c0       	rjmp	.+142    	; 0x16240 <Amigo_Command+0x570>
   161b2:	68 30       	cpi	r22, 0x08	; 8
   161b4:	f1 f4       	brne	.+60     	; 0x161f2 <Amigo_Command+0x522>
   161b6:	02 30       	cpi	r16, 0x02	; 2
   161b8:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   161ba:	09 f0       	breq	.+2      	; 0x161be <Amigo_Command+0x4ee>
   161bc:	68 c0       	rjmp	.+208    	; 0x1628e <Amigo_Command+0x5be>
   161be:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   161c2:	85 ff       	sbrs	r24, 5
   161c4:	0a c0       	rjmp	.+20     	; 0x161da <Amigo_Command+0x50a>
   161c6:	8d ee       	ldi	r24, 0xED	; 237
   161c8:	91 e2       	ldi	r25, 0x21	; 33
   161ca:	1f 92       	push	r1
   161cc:	9f 93       	push	r25
   161ce:	8f 93       	push	r24
   161d0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   161d4:	0f 90       	pop	r0
   161d6:	0f 90       	pop	r0
   161d8:	0f 90       	pop	r0
   161da:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   161de:	64 dd       	rcall	.-1336   	; 0x15ca8 <amigo_check_unit>
   161e0:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   161e4:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            amigo_request_status();
   161e8:	82 e0       	ldi	r24, 0x02	; 2
   161ea:	80 83       	st	Z, r24
   161ec:	0e 94 8f a8 	call	0x1511e	; 0x1511e <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   161f0:	49 c0       	rjmp	.+146    	; 0x16284 <Amigo_Command+0x5b4>
   161f2:	65 30       	cpi	r22, 0x05	; 5
   161f4:	09 f0       	breq	.+2      	; 0x161f8 <Amigo_Command+0x528>
   161f6:	4b c0       	rjmp	.+150    	; 0x1628e <Amigo_Command+0x5be>
   161f8:	02 30       	cpi	r16, 0x02	; 2
   161fa:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   161fc:	09 f0       	breq	.+2      	; 0x16200 <Amigo_Command+0x530>
   161fe:	47 c0       	rjmp	.+142    	; 0x1628e <Amigo_Command+0x5be>
   16200:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   16204:	85 ff       	sbrs	r24, 5
   16206:	0a c0       	rjmp	.+20     	; 0x1621c <Amigo_Command+0x54c>
   16208:	8e ec       	ldi	r24, 0xCE	; 206
   1620a:	91 e2       	ldi	r25, 0x21	; 33
   1620c:	1f 92       	push	r1
   1620e:	9f 93       	push	r25
   16210:	8f 93       	push	r24
   16212:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16216:	0f 90       	pop	r0
   16218:	0f 90       	pop	r0
   1621a:	0f 90       	pop	r0
   1621c:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   16220:	43 dd       	rcall	.-1402   	; 0x15ca8 <amigo_check_unit>
   16222:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   16226:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1622a:	87 e0       	ldi	r24, 0x07	; 7
   1622c:	80 83       	st	Z, r24
   1622e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   16232:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   16236:	81 81       	ldd	r24, Z+1	; 0x01
   16238:	90 e0       	ldi	r25, 0x00	; 0
   1623a:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   1623e:	22 c0       	rjmp	.+68     	; 0x16284 <Amigo_Command+0x5b4>
   16240:	8c e6       	ldi	r24, 0x6C	; 108
   16242:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   16244:	f1 04       	cpc	r15, r1
   16246:	d1 f4       	brne	.+52     	; 0x1627c <Amigo_Command+0x5ac>
   16248:	68 31       	cpi	r22, 0x18	; 24
   1624a:	09 f5       	brne	.+66     	; 0x1628e <Amigo_Command+0x5be>
   1624c:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   1624e:	11 05       	cpc	r17, r1
   16250:	f1 f4       	brne	.+60     	; 0x1628e <Amigo_Command+0x5be>
   16252:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("[AMIGO Format]\n");
   16256:	85 ff       	sbrs	r24, 5
   16258:	0a c0       	rjmp	.+20     	; 0x1626e <Amigo_Command+0x59e>
   1625a:	8e eb       	ldi	r24, 0xBE	; 190
   1625c:	91 e2       	ldi	r25, 0x21	; 33
   1625e:	1f 92       	push	r1
   16260:	9f 93       	push	r25
   16262:	8f 93       	push	r24
   16264:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16268:	0f 90       	pop	r0
   1626a:	0f 90       	pop	r0
   1626c:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1626e:	80 91 a6 1c 	lds	r24, 0x1CA6	; 0x801ca6 <gpib_iobuff+0x1>
   16272:	1a dd       	rcall	.-1484   	; 0x15ca8 <amigo_check_unit>
   16274:	80 91 a9 1c 	lds	r24, 0x1CA9	; 0x801ca9 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   16278:	4b d9       	rcall	.-3434   	; 0x15510 <amigo_format>
   1627a:	04 c0       	rjmp	.+8      	; 0x16284 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1627c:	90 e7       	ldi	r25, 0x70	; 112
   1627e:	e9 16       	cp	r14, r25
   16280:	f1 04       	cpc	r15, r1
   16282:	29 f4       	brne	.+10     	; 0x1628e <Amigo_Command+0x5be>
   16284:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   16286:	9b 89       	ldd	r25, Y+19	; 0x13
   16288:	88 27       	eor	r24, r24
   1628a:	90 7d       	andi	r25, 0xD0	; 208
   1628c:	03 c0       	rjmp	.+6      	; 0x16294 <Amigo_Command+0x5c4>
}
   1628e:	a8 01       	movw	r20, r16
   16290:	8e 2d       	mov	r24, r14
   16292:	d1 db       	rcall	.-2142   	; 0x15a36 <amigo_todo_op>
   16294:	63 96       	adiw	r28, 0x13	; 19
   16296:	e6 e0       	ldi	r30, 0x06	; 6
   16298:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0001629c <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   1629c:	cf 93       	push	r28
   1629e:	df 93       	push	r29
   162a0:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   162a2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   162a6:	85 ff       	sbrs	r24, 5
   162a8:	19 c0       	rjmp	.+50     	; 0x162dc <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   162aa:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   162ae:	1f 92       	push	r1
   162b0:	8f 93       	push	r24
   162b2:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   162b6:	1f 92       	push	r1
   162b8:	8f 93       	push	r24
   162ba:	df 93       	push	r29
   162bc:	cf 93       	push	r28
   162be:	8c e8       	ldi	r24, 0x8C	; 140
   162c0:	91 e2       	ldi	r25, 0x21	; 33
   162c2:	1f 92       	push	r1
   162c4:	9f 93       	push	r25
   162c6:	8f 93       	push	r24
   162c8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   162cc:	8d b7       	in	r24, 0x3d	; 61
   162ce:	9e b7       	in	r25, 0x3e	; 62
   162d0:	09 96       	adiw	r24, 0x09	; 9
   162d2:	0f b6       	in	r0, 0x3f	; 63
   162d4:	f8 94       	cli
   162d6:	9e bf       	out	0x3e, r25	; 62
   162d8:	0f be       	out	0x3f, r0	; 63
   162da:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   162dc:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   162e0:	8f 35       	cpi	r24, 0x5F	; 95
   162e2:	09 f4       	brne	.+2      	; 0x162e6 <Amigo_Execute+0x4a>
   162e4:	ad c0       	rjmp	.+346    	; 0x16440 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   162e6:	90 e0       	ldi	r25, 0x00	; 0
   162e8:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   162ec:	89 2b       	or	r24, r25
   162ee:	39 f0       	breq	.+14     	; 0x162fe <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   162f0:	ce 01       	movw	r24, r28
   162f2:	87 7f       	andi	r24, 0xF7	; 247
   162f4:	80 36       	cpi	r24, 0x60	; 96
   162f6:	91 05       	cpc	r25, r1
   162f8:	09 f0       	breq	.+2      	; 0x162fc <Amigo_Execute+0x60>
   162fa:	a2 c0       	rjmp	.+324    	; 0x16440 <Amigo_Execute+0x1a4>
   162fc:	08 c0       	rjmp	.+16     	; 0x1630e <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   162fe:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16302:	90 e0       	ldi	r25, 0x00	; 0
   16304:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   16308:	89 2b       	or	r24, r25
   1630a:	91 f7       	brne	.-28     	; 0x162f0 <Amigo_Execute+0x54>
   1630c:	99 c0       	rjmp	.+306    	; 0x16440 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1630e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   16312:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   16316:	81 81       	ldd	r24, Z+1	; 0x01
   16318:	90 e0       	ldi	r25, 0x00	; 0
   1631a:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>

    if(secondary == 0x60)
   1631e:	c0 36       	cpi	r28, 0x60	; 96
   16320:	d1 05       	cpc	r29, r1
   16322:	09 f0       	breq	.+2      	; 0x16326 <Amigo_Execute+0x8a>
   16324:	4e c0       	rjmp	.+156    	; 0x163c2 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   16326:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   1632a:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   1632e:	e0 81       	ld	r30, Z
   16330:	8e 2f       	mov	r24, r30
   16332:	90 e0       	ldi	r25, 0x00	; 0
   16334:	8b 30       	cpi	r24, 0x0B	; 11
   16336:	91 05       	cpc	r25, r1
   16338:	08 f0       	brcs	.+2      	; 0x1633c <Amigo_Execute+0xa0>
   1633a:	41 c0       	rjmp	.+130    	; 0x163be <Amigo_Execute+0x122>
   1633c:	fc 01       	movw	r30, r24
   1633e:	e0 53       	subi	r30, 0x30	; 48
   16340:	ff 4f       	sbci	r31, 0xFF	; 255
   16342:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   16346:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1634a:	85 ff       	sbrs	r24, 5
   1634c:	18 c0       	rjmp	.+48     	; 0x1637e <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1634e:	8c e6       	ldi	r24, 0x6C	; 108
   16350:	91 e2       	ldi	r25, 0x21	; 33
   16352:	0d c0       	rjmp	.+26     	; 0x1636e <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16354:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16358:	85 ff       	sbrs	r24, 5
   1635a:	11 c0       	rjmp	.+34     	; 0x1637e <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1635c:	8b e4       	ldi	r24, 0x4B	; 75
   1635e:	91 e2       	ldi	r25, 0x21	; 33
   16360:	06 c0       	rjmp	.+12     	; 0x1636e <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16362:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16366:	85 ff       	sbrs	r24, 5
   16368:	0a c0       	rjmp	.+20     	; 0x1637e <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   1636a:	8c e2       	ldi	r24, 0x2C	; 44
   1636c:	91 e2       	ldi	r25, 0x21	; 33
   1636e:	1f 92       	push	r1
   16370:	9f 93       	push	r25
   16372:	8f 93       	push	r24
   16374:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16378:	0f 90       	pop	r0
   1637a:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   1637c:	0f 90       	pop	r0
   1637e:	5a d9       	rcall	.-3404   	; 0x15634 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16380:	61 c0       	rjmp	.+194    	; 0x16444 <Amigo_Execute+0x1a8>
   16382:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16386:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   16388:	18 c0       	rjmp	.+48     	; 0x163ba <Amigo_Execute+0x11e>
   1638a:	8a e0       	ldi	r24, 0x0A	; 10
   1638c:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   1638e:	0d c0       	rjmp	.+26     	; 0x163aa <Amigo_Execute+0x10e>
   16390:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16394:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   16396:	11 c0       	rjmp	.+34     	; 0x163ba <Amigo_Execute+0x11e>
   16398:	8e ee       	ldi	r24, 0xEE	; 238
   1639a:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1639c:	06 c0       	rjmp	.+12     	; 0x163aa <Amigo_Execute+0x10e>
   1639e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   163a2:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   163a4:	0a c0       	rjmp	.+20     	; 0x163ba <Amigo_Execute+0x11e>
   163a6:	8e ec       	ldi	r24, 0xCE	; 206
   163a8:	90 e2       	ldi	r25, 0x20	; 32
   163aa:	1f 92       	push	r1
   163ac:	9f 93       	push	r25
   163ae:	8f 93       	push	r24
   163b0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   163b4:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   163b6:	0f 90       	pop	r0
   163b8:	0f 90       	pop	r0
   163ba:	00 da       	rcall	.-3072   	; 0x157bc <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   163bc:	43 c0       	rjmp	.+134    	; 0x16444 <Amigo_Execute+0x1a8>
   163be:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   163c0:	3d c0       	rjmp	.+122    	; 0x1643c <Amigo_Execute+0x1a0>
   163c2:	c8 36       	cpi	r28, 0x68	; 104
   163c4:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   163c6:	e1 f5       	brne	.+120    	; 0x16440 <Amigo_Execute+0x1a4>
   163c8:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <AMIGOs>
   163cc:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <AMIGOs+0x1>
   163d0:	80 81       	ld	r24, Z
   163d2:	82 30       	cpi	r24, 0x02	; 2
   163d4:	81 f0       	breq	.+32     	; 0x163f6 <Amigo_Execute+0x15a>
   163d6:	18 f4       	brcc	.+6      	; 0x163de <Amigo_Execute+0x142>
   163d8:	88 23       	and	r24, r24
   163da:	91 f1       	breq	.+100    	; 0x16440 <Amigo_Execute+0x1a4>
   163dc:	2e c0       	rjmp	.+92     	; 0x1643a <Amigo_Execute+0x19e>
   163de:	83 30       	cpi	r24, 0x03	; 3
   163e0:	19 f0       	breq	.+6      	; 0x163e8 <Amigo_Execute+0x14c>
   163e2:	84 30       	cpi	r24, 0x04	; 4
   163e4:	c9 f0       	breq	.+50     	; 0x16418 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   163e6:	29 c0       	rjmp	.+82     	; 0x1643a <Amigo_Execute+0x19e>
   163e8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   163ec:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   163ee:	11 c0       	rjmp	.+34     	; 0x16412 <Amigo_Execute+0x176>
   163f0:	85 ea       	ldi	r24, 0xA5	; 165
   163f2:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   163f4:	06 c0       	rjmp	.+12     	; 0x16402 <Amigo_Execute+0x166>
   163f6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   163fa:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   163fc:	0a c0       	rjmp	.+20     	; 0x16412 <Amigo_Execute+0x176>
   163fe:	8a e7       	ldi	r24, 0x7A	; 122
   16400:	90 e2       	ldi	r25, 0x20	; 32
   16402:	1f 92       	push	r1
   16404:	9f 93       	push	r25
   16406:	8f 93       	push	r24
   16408:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1640c:	0f 90       	pop	r0
   1640e:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   16410:	0f 90       	pop	r0
   16412:	0e 94 45 a9 	call	0x1528a	; 0x1528a <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   16416:	16 c0       	rjmp	.+44     	; 0x16444 <Amigo_Execute+0x1a8>
   16418:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1641c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   1641e:	0a c0       	rjmp	.+20     	; 0x16434 <Amigo_Execute+0x198>
   16420:	81 e5       	ldi	r24, 0x51	; 81
   16422:	90 e2       	ldi	r25, 0x20	; 32
   16424:	1f 92       	push	r1
   16426:	9f 93       	push	r25
   16428:	8f 93       	push	r24
   1642a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1642e:	0f 90       	pop	r0
   16430:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   16432:	0f 90       	pop	r0
   16434:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   16438:	05 c0       	rjmp	.+10     	; 0x16444 <Amigo_Execute+0x1a8>
   1643a:	88 e6       	ldi	r24, 0x68	; 104
   1643c:	a5 db       	rcall	.-2230   	; 0x15b88 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   1643e:	02 c0       	rjmp	.+4      	; 0x16444 <Amigo_Execute+0x1a8>
   16440:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   16442:	90 e0       	ldi	r25, 0x00	; 0
   16444:	df 91       	pop	r29
   16446:	cf 91       	pop	r28
   16448:	08 95       	ret

0001644a <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1644a:	cf 93       	push	r28
   1644c:	df 93       	push	r29
   1644e:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16450:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   16454:	90 e0       	ldi	r25, 0x00	; 0
   16456:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   1645a:	89 2b       	or	r24, r25
   1645c:	51 f0       	breq	.+20     	; 0x16472 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   1645e:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   16462:	8f 35       	cpi	r24, 0x5F	; 95
   16464:	71 f4       	brne	.+28     	; 0x16482 <AMIGO_COMMANDS+0x38>
   16466:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   1646a:	90 e0       	ldi	r25, 0x00	; 0
   1646c:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   16470:	08 c0       	rjmp	.+16     	; 0x16482 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16472:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16476:	90 e0       	ldi	r25, 0x00	; 0
   16478:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   1647c:	89 2b       	or	r24, r25
   1647e:	79 f7       	brne	.-34     	; 0x1645e <AMIGO_COMMANDS+0x14>
   16480:	76 c0       	rjmp	.+236    	; 0x1656e <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   16482:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16486:	81 11       	cpse	r24, r1
   16488:	05 c0       	rjmp	.+10     	; 0x16494 <AMIGO_COMMANDS+0x4a>
   1648a:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   1648e:	90 e0       	ldi	r25, 0x00	; 0
   16490:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   16494:	c0 36       	cpi	r28, 0x60	; 96
   16496:	99 f4       	brne	.+38     	; 0x164be <AMIGO_COMMANDS+0x74>
   16498:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   1649c:	90 e0       	ldi	r25, 0x00	; 0
   1649e:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   164a2:	89 2b       	or	r24, r25
   164a4:	19 f0       	breq	.+6      	; 0x164ac <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   164a6:	80 e6       	ldi	r24, 0x60	; 96
   164a8:	90 e0       	ldi	r25, 0x00	; 0
   164aa:	14 c0       	rjmp	.+40     	; 0x164d4 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   164ac:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   164b0:	90 e0       	ldi	r25, 0x00	; 0
   164b2:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   164b6:	89 2b       	or	r24, r25
   164b8:	09 f4       	brne	.+2      	; 0x164bc <AMIGO_COMMANDS+0x72>
   164ba:	59 c0       	rjmp	.+178    	; 0x1656e <AMIGO_COMMANDS+0x124>
   164bc:	f4 cf       	rjmp	.-24     	; 0x164a6 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   164be:	c8 36       	cpi	r28, 0x68	; 104
   164c0:	c1 f4       	brne	.+48     	; 0x164f2 <AMIGO_COMMANDS+0xa8>
   164c2:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   164c6:	90 e0       	ldi	r25, 0x00	; 0
   164c8:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   164cc:	89 2b       	or	r24, r25
   164ce:	21 f0       	breq	.+8      	; 0x164d8 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   164d0:	88 e6       	ldi	r24, 0x68	; 104
   164d2:	90 e0       	ldi	r25, 0x00	; 0
   164d4:	e3 de       	rcall	.-570    	; 0x1629c <Amigo_Execute>
   164d6:	0b c0       	rjmp	.+22     	; 0x164ee <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   164d8:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   164dc:	90 e0       	ldi	r25, 0x00	; 0
   164de:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   164e2:	89 2b       	or	r24, r25
   164e4:	09 f4       	brne	.+2      	; 0x164e8 <AMIGO_COMMANDS+0x9e>
   164e6:	43 c0       	rjmp	.+134    	; 0x1656e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   164e8:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   164ea:	90 e0       	ldi	r25, 0x00	; 0
   164ec:	f1 db       	rcall	.-2078   	; 0x15cd0 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   164ee:	ec 01       	movw	r28, r24
   164f0:	40 c0       	rjmp	.+128    	; 0x16572 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   164f2:	c9 36       	cpi	r28, 0x69	; 105
   164f4:	51 f4       	brne	.+20     	; 0x1650a <AMIGO_COMMANDS+0xc0>
   164f6:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   164fa:	90 e0       	ldi	r25, 0x00	; 0
   164fc:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   16500:	89 2b       	or	r24, r25
   16502:	a9 f1       	breq	.+106    	; 0x1656e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16504:	89 e6       	ldi	r24, 0x69	; 105
   16506:	90 e0       	ldi	r25, 0x00	; 0
   16508:	f1 cf       	rjmp	.-30     	; 0x164ec <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   1650a:	ca 36       	cpi	r28, 0x6A	; 106
   1650c:	51 f4       	brne	.+20     	; 0x16522 <AMIGO_COMMANDS+0xd8>
   1650e:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16512:	90 e0       	ldi	r25, 0x00	; 0
   16514:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   16518:	89 2b       	or	r24, r25
   1651a:	49 f1       	breq	.+82     	; 0x1656e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1651c:	8a e6       	ldi	r24, 0x6A	; 106
   1651e:	90 e0       	ldi	r25, 0x00	; 0
   16520:	e5 cf       	rjmp	.-54     	; 0x164ec <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   16522:	cc 36       	cpi	r28, 0x6C	; 108
   16524:	51 f4       	brne	.+20     	; 0x1653a <AMIGO_COMMANDS+0xf0>
   16526:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   1652a:	90 e0       	ldi	r25, 0x00	; 0
   1652c:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   16530:	89 2b       	or	r24, r25
   16532:	e9 f0       	breq	.+58     	; 0x1656e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16534:	8c e6       	ldi	r24, 0x6C	; 108
   16536:	90 e0       	ldi	r25, 0x00	; 0
   16538:	d9 cf       	rjmp	.-78     	; 0x164ec <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   1653a:	c0 37       	cpi	r28, 0x70	; 112
   1653c:	c1 f4       	brne	.+48     	; 0x1656e <AMIGO_COMMANDS+0x124>
   1653e:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   16542:	90 e0       	ldi	r25, 0x00	; 0
   16544:	0e 94 b9 92 	call	0x12572	; 0x12572 <AMIGO_is_MTA>
   16548:	ec 01       	movw	r28, r24
   1654a:	89 2b       	or	r24, r25
   1654c:	51 f0       	breq	.+20     	; 0x16562 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1654e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOp>
   16552:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOp+0x1>
   16556:	81 81       	ldd	r24, Z+1	; 0x01
   16558:	90 e0       	ldi	r25, 0x00	; 0
   1655a:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1655e:	e6 d9       	rcall	.-3124   	; 0x1592c <amigo_cmd_dsj>
   16560:	c6 cf       	rjmp	.-116    	; 0x164ee <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   16562:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16566:	90 e0       	ldi	r25, 0x00	; 0
   16568:	0e 94 a8 92 	call	0x12550	; 0x12550 <AMIGO_is_MLA>
   1656c:	02 c0       	rjmp	.+4      	; 0x16572 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   1656e:	c0 e0       	ldi	r28, 0x00	; 0
   16570:	d0 e0       	ldi	r29, 0x00	; 0
}
   16572:	ce 01       	movw	r24, r28
   16574:	df 91       	pop	r29
   16576:	cf 91       	pop	r28
   16578:	08 95       	ret

0001657a <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1657a:	e7 e4       	ldi	r30, 0x47	; 71
   1657c:	f9 e1       	ldi	r31, 0x19	; 25
   1657e:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   16580:	10 82       	st	Z, r1
   16582:	11 82       	std	Z+1, r1	; 0x01
   16584:	12 82       	std	Z+2, r1	; 0x02
   16586:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   16588:	15 82       	std	Z+5, r1	; 0x05
   1658a:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1658c:	12 86       	std	Z+10, r1	; 0x0a
   1658e:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   16590:	14 86       	std	Z+12, r1	; 0x0c
   16592:	13 86       	std	Z+11, r1	; 0x0b
   16594:	08 95       	ret

00016596 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   16596:	cf 93       	push	r28
   16598:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1659a:	20 91 50 19 	lds	r18, 0x1950	; 0x801950 <plot+0x9>
   1659e:	30 91 51 19 	lds	r19, 0x1951	; 0x801951 <plot+0xa>
   165a2:	21 15       	cp	r18, r1
   165a4:	31 05       	cpc	r19, r1
   165a6:	09 f4       	brne	.+2      	; 0x165aa <receive_plot_flush+0x14>
   165a8:	4a c0       	rjmp	.+148    	; 0x1663e <receive_plot_flush+0xa8>
   165aa:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <plot+0x4>
   165ae:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <plot+0x5>
   165b2:	00 97       	sbiw	r24, 0x00	; 0
   165b4:	09 f4       	brne	.+2      	; 0x165b8 <receive_plot_flush+0x22>
   165b6:	45 c0       	rjmp	.+138    	; 0x16642 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   165b8:	ac 01       	movw	r20, r24
   165ba:	61 e0       	ldi	r22, 0x01	; 1
   165bc:	70 e0       	ldi	r23, 0x00	; 0
   165be:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <plot+0xb>
   165c2:	90 91 53 19 	lds	r25, 0x1953	; 0x801953 <plot+0xc>
   165c6:	0e 94 69 80 	call	0x100d2	; 0x100d2 <fwrite>
   165ca:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   165cc:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <plot+0x4>
   165d0:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <plot+0x5>
   165d4:	c8 17       	cp	r28, r24
   165d6:	d9 07       	cpc	r29, r25
   165d8:	31 f1       	breq	.+76     	; 0x16626 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   165da:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   165de:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   165e2:	81 72       	andi	r24, 0x21	; 33
   165e4:	99 27       	eor	r25, r25
   165e6:	89 2b       	or	r24, r25
   165e8:	d9 f0       	breq	.+54     	; 0x16620 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   165ea:	8b e3       	ldi	r24, 0x3B	; 59
   165ec:	93 e1       	ldi	r25, 0x13	; 19
   165ee:	0e 94 17 7c 	call	0xf82e	; 0xf82e <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   165f2:	df 93       	push	r29
   165f4:	cf 93       	push	r28
   165f6:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <plot+0x5>
   165fa:	8f 93       	push	r24
   165fc:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <plot+0x4>
   16600:	8f 93       	push	r24
   16602:	85 e1       	ldi	r24, 0x15	; 21
   16604:	99 e2       	ldi	r25, 0x29	; 41
   16606:	1f 92       	push	r1
   16608:	9f 93       	push	r25
   1660a:	8f 93       	push	r24
   1660c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16610:	8d b7       	in	r24, 0x3d	; 61
   16612:	9e b7       	in	r25, 0x3e	; 62
   16614:	07 96       	adiw	r24, 0x07	; 7
   16616:	0f b6       	in	r0, 0x3f	; 63
   16618:	f8 94       	cli
   1661a:	9e bf       	out	0x3e, r25	; 62
   1661c:	0f be       	out	0x3f, r0	; 63
   1661e:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   16620:	8f ef       	ldi	r24, 0xFF	; 255
   16622:	9f ef       	ldi	r25, 0xFF	; 255
   16624:	0e c0       	rjmp	.+28     	; 0x16642 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   16626:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <plot+0x9>
   1662a:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <plot+0xa>
   1662e:	0e 94 b4 79 	call	0xf368	; 0xf368 <fileno>
    if(fno < 0)
   16632:	97 fd       	sbrc	r25, 7
   16634:	f5 cf       	rjmp	.-22     	; 0x16620 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   16636:	0e 94 b3 7f 	call	0xff66	; 0xff66 <syncfs>
    return (ret);
   1663a:	ce 01       	movw	r24, r28
   1663c:	02 c0       	rjmp	.+4      	; 0x16642 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   1663e:	80 e0       	ldi	r24, 0x00	; 0
   16640:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   16642:	df 91       	pop	r29
   16644:	cf 91       	pop	r28
   16646:	08 95       	ret

00016648 <printer_close>:
   16648:	a6 df       	rcall	.-180    	; 0x16596 <receive_plot_flush>
   1664a:	97 ff       	sbrs	r25, 7
   1664c:	03 c0       	rjmp	.+6      	; 0x16654 <printer_close+0xc>
   1664e:	81 e0       	ldi	r24, 0x01	; 1
   16650:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <plot+0x8>
   16654:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16658:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1665c:	81 72       	andi	r24, 0x21	; 33
   1665e:	99 27       	eor	r25, r25
   16660:	89 2b       	or	r24, r25
   16662:	71 f0       	breq	.+28     	; 0x16680 <printer_close+0x38>
   16664:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <plot+0x8>
   16668:	88 23       	and	r24, r24
   1666a:	51 f0       	breq	.+20     	; 0x16680 <printer_close+0x38>
   1666c:	84 e4       	ldi	r24, 0x44	; 68
   1666e:	99 e2       	ldi	r25, 0x29	; 41
   16670:	1f 92       	push	r1
   16672:	9f 93       	push	r25
   16674:	8f 93       	push	r24
   16676:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1667a:	0f 90       	pop	r0
   1667c:	0f 90       	pop	r0
   1667e:	0f 90       	pop	r0
   16680:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <plot+0x9>
   16684:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <plot+0xa>
   16688:	00 97       	sbiw	r24, 0x00	; 0
   1668a:	09 f1       	breq	.+66     	; 0x166ce <printer_close+0x86>
   1668c:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
   16690:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16694:	85 ff       	sbrs	r24, 5
   16696:	1b c0       	rjmp	.+54     	; 0x166ce <printer_close+0x86>
   16698:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <plot+0x3>
   1669c:	8f 93       	push	r24
   1669e:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <plot+0x2>
   166a2:	8f 93       	push	r24
   166a4:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <plot+0x1>
   166a8:	8f 93       	push	r24
   166aa:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot>
   166ae:	8f 93       	push	r24
   166b0:	86 e3       	ldi	r24, 0x36	; 54
   166b2:	99 e2       	ldi	r25, 0x29	; 41
   166b4:	1f 92       	push	r1
   166b6:	9f 93       	push	r25
   166b8:	8f 93       	push	r24
   166ba:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   166be:	8d b7       	in	r24, 0x3d	; 61
   166c0:	9e b7       	in	r25, 0x3e	; 62
   166c2:	07 96       	adiw	r24, 0x07	; 7
   166c4:	0f b6       	in	r0, 0x3f	; 63
   166c6:	f8 94       	cli
   166c8:	9e bf       	out	0x3e, r25	; 62
   166ca:	0f be       	out	0x3f, r0	; 63
   166cc:	8d bf       	out	0x3d, r24	; 61
   166ce:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <plot+0xb>
   166d2:	90 91 53 19 	lds	r25, 0x1953	; 0x801953 <plot+0xc>
   166d6:	00 97       	sbiw	r24, 0x00	; 0
   166d8:	11 f0       	breq	.+4      	; 0x166de <printer_close+0x96>
   166da:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   166de:	4d cf       	rjmp	.-358    	; 0x1657a <printer_init>
   166e0:	08 95       	ret

000166e2 <printer_open>:
   166e2:	ac e4       	ldi	r26, 0x4C	; 76
   166e4:	b0 e0       	ldi	r27, 0x00	; 0
   166e6:	e7 e7       	ldi	r30, 0x77	; 119
   166e8:	f3 eb       	ldi	r31, 0xB3	; 179
   166ea:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   166ee:	8c 01       	movw	r16, r24
   166f0:	89 2b       	or	r24, r25
   166f2:	09 f0       	breq	.+2      	; 0x166f6 <printer_open+0x14>
   166f4:	4b c0       	rjmp	.+150    	; 0x1678c <printer_open+0xaa>
   166f6:	be 01       	movw	r22, r28
   166f8:	6f 5b       	subi	r22, 0xBF	; 191
   166fa:	7f 4f       	sbci	r23, 0xFF	; 255
   166fc:	80 e0       	ldi	r24, 0x00	; 0
   166fe:	90 e0       	ldi	r25, 0x00	; 0
   16700:	0e 94 c2 32 	call	0x6584	; 0x6584 <clock_gettime>
   16704:	25 96       	adiw	r28, 0x05	; 5
   16706:	8c ad       	ldd	r24, Y+60	; 0x3c
   16708:	9d ad       	ldd	r25, Y+61	; 0x3d
   1670a:	ae ad       	ldd	r26, Y+62	; 0x3e
   1670c:	bf ad       	ldd	r27, Y+63	; 0x3f
   1670e:	25 97       	sbiw	r28, 0x05	; 5
   16710:	2d 96       	adiw	r28, 0x0d	; 13
   16712:	8c af       	std	Y+60, r24	; 0x3c
   16714:	9d af       	std	Y+61, r25	; 0x3d
   16716:	ae af       	std	Y+62, r26	; 0x3e
   16718:	bf af       	std	Y+63, r27	; 0x3f
   1671a:	2d 97       	sbiw	r28, 0x0d	; 13
   1671c:	ce 01       	movw	r24, r28
   1671e:	87 5b       	subi	r24, 0xB7	; 183
   16720:	9f 4f       	sbci	r25, 0xFF	; 255
   16722:	0e 94 92 36 	call	0x6d24	; 0x6d24 <gmtime>
   16726:	8c 01       	movw	r16, r24
   16728:	fc 01       	movw	r30, r24
   1672a:	90 80       	ld	r9, Z
   1672c:	81 80       	ldd	r8, Z+1	; 0x01
   1672e:	b2 80       	ldd	r11, Z+2	; 0x02
   16730:	a3 80       	ldd	r10, Z+3	; 0x03
   16732:	d4 80       	ldd	r13, Z+4	; 0x04
   16734:	c5 80       	ldd	r12, Z+5	; 0x05
   16736:	e2 84       	ldd	r14, Z+10	; 0x0a
   16738:	f3 84       	ldd	r15, Z+11	; 0x0b
   1673a:	f4 e9       	ldi	r31, 0x94	; 148
   1673c:	ef 1a       	sub	r14, r31
   1673e:	f8 ef       	ldi	r31, 0xF8	; 248
   16740:	ff 0a       	sbc	r15, r31
   16742:	fc 01       	movw	r30, r24
   16744:	80 85       	ldd	r24, Z+8	; 0x08
   16746:	91 85       	ldd	r25, Z+9	; 0x09
   16748:	0e 94 6e 35 	call	0x6adc	; 0x6adc <tm_mon_to_ascii>
   1674c:	8f 92       	push	r8
   1674e:	9f 92       	push	r9
   16750:	af 92       	push	r10
   16752:	bf 92       	push	r11
   16754:	cf 92       	push	r12
   16756:	df 92       	push	r13
   16758:	ff 92       	push	r15
   1675a:	ef 92       	push	r14
   1675c:	9f 93       	push	r25
   1675e:	8f 93       	push	r24
   16760:	f8 01       	movw	r30, r16
   16762:	87 81       	ldd	r24, Z+7	; 0x07
   16764:	8f 93       	push	r24
   16766:	86 81       	ldd	r24, Z+6	; 0x06
   16768:	8f 93       	push	r24
   1676a:	8b e7       	ldi	r24, 0x7B	; 123
   1676c:	99 e2       	ldi	r25, 0x29	; 41
   1676e:	1f 92       	push	r1
   16770:	9f 93       	push	r25
   16772:	8f 93       	push	r24
   16774:	8e 01       	movw	r16, r28
   16776:	0f 5f       	subi	r16, 0xFF	; 255
   16778:	1f 4f       	sbci	r17, 0xFF	; 255
   1677a:	1f 93       	push	r17
   1677c:	0f 93       	push	r16
   1677e:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
   16782:	0f b6       	in	r0, 0x3f	; 63
   16784:	f8 94       	cli
   16786:	de bf       	out	0x3e, r29	; 62
   16788:	0f be       	out	0x3f, r0	; 63
   1678a:	cd bf       	out	0x3d, r28	; 61
   1678c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16790:	85 ff       	sbrs	r24, 5
   16792:	0e c0       	rjmp	.+28     	; 0x167b0 <printer_open+0xce>
   16794:	1f 93       	push	r17
   16796:	0f 93       	push	r16
   16798:	85 e6       	ldi	r24, 0x65	; 101
   1679a:	99 e2       	ldi	r25, 0x29	; 41
   1679c:	1f 92       	push	r1
   1679e:	9f 93       	push	r25
   167a0:	8f 93       	push	r24
   167a2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   167a6:	0f 90       	pop	r0
   167a8:	0f 90       	pop	r0
   167aa:	0f 90       	pop	r0
   167ac:	0f 90       	pop	r0
   167ae:	0f 90       	pop	r0
   167b0:	6b e6       	ldi	r22, 0x6B	; 107
   167b2:	78 e0       	ldi	r23, 0x08	; 8
   167b4:	c8 01       	movw	r24, r16
   167b6:	0e 94 41 82 	call	0x10482	; 0x10482 <fopen>
   167ba:	90 93 51 19 	sts	0x1951, r25	; 0x801951 <plot+0xa>
   167be:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <plot+0x9>
   167c2:	89 2b       	or	r24, r25
   167c4:	b9 f4       	brne	.+46     	; 0x167f4 <printer_open+0x112>
   167c6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   167ca:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   167ce:	81 72       	andi	r24, 0x21	; 33
   167d0:	99 27       	eor	r25, r25
   167d2:	89 2b       	or	r24, r25
   167d4:	11 f1       	breq	.+68     	; 0x1681a <printer_open+0x138>
   167d6:	89 e1       	ldi	r24, 0x19	; 25
   167d8:	9d e0       	ldi	r25, 0x0D	; 13
   167da:	0e 94 17 7c 	call	0xf82e	; 0xf82e <perror>
   167de:	89 e5       	ldi	r24, 0x59	; 89
   167e0:	99 e2       	ldi	r25, 0x29	; 41
   167e2:	1f 92       	push	r1
   167e4:	9f 93       	push	r25
   167e6:	8f 93       	push	r24
   167e8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   167ec:	0f 90       	pop	r0
   167ee:	0f 90       	pop	r0
   167f0:	0f 90       	pop	r0
   167f2:	13 c0       	rjmp	.+38     	; 0x1681a <printer_open+0x138>
   167f4:	61 e0       	ldi	r22, 0x01	; 1
   167f6:	70 e0       	ldi	r23, 0x00	; 0
   167f8:	81 e0       	ldi	r24, 0x01	; 1
   167fa:	92 e0       	ldi	r25, 0x02	; 2
   167fc:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16800:	90 93 53 19 	sts	0x1953, r25	; 0x801953 <plot+0xc>
   16804:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <plot+0xb>
   16808:	89 2b       	or	r24, r25
   1680a:	09 f4       	brne	.+2      	; 0x1680e <printer_open+0x12c>
   1680c:	1d df       	rcall	.-454    	; 0x16648 <printer_close>
   1680e:	80 e0       	ldi	r24, 0x00	; 0
   16810:	92 e0       	ldi	r25, 0x02	; 2
   16812:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <plot+0x7>
   16816:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <plot+0x6>
   1681a:	c4 5b       	subi	r28, 0xB4	; 180
   1681c:	df 4f       	sbci	r29, 0xFF	; 255
   1681e:	ec e0       	ldi	r30, 0x0C	; 12
   16820:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00016824 <printer_buffer>:
   16824:	cf 93       	push	r28
   16826:	df 93       	push	r29
   16828:	ec 01       	movw	r28, r24
   1682a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1682e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16832:	81 72       	andi	r24, 0x21	; 33
   16834:	99 27       	eor	r25, r25
   16836:	89 2b       	or	r24, r25
   16838:	e9 f0       	breq	.+58     	; 0x16874 <printer_buffer+0x50>
   1683a:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot>
   1683e:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0x1>
   16842:	20 91 49 19 	lds	r18, 0x1949	; 0x801949 <plot+0x2>
   16846:	30 91 4a 19 	lds	r19, 0x194A	; 0x80194a <plot+0x3>
   1684a:	81 11       	cpse	r24, r1
   1684c:	13 c0       	rjmp	.+38     	; 0x16874 <printer_buffer+0x50>
   1684e:	3f 93       	push	r19
   16850:	2f 93       	push	r18
   16852:	9f 93       	push	r25
   16854:	8f 93       	push	r24
   16856:	8e e0       	ldi	r24, 0x0E	; 14
   16858:	99 e2       	ldi	r25, 0x29	; 41
   1685a:	1f 92       	push	r1
   1685c:	9f 93       	push	r25
   1685e:	8f 93       	push	r24
   16860:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16864:	8d b7       	in	r24, 0x3d	; 61
   16866:	9e b7       	in	r25, 0x3e	; 62
   16868:	07 96       	adiw	r24, 0x07	; 7
   1686a:	0f b6       	in	r0, 0x3f	; 63
   1686c:	f8 94       	cli
   1686e:	9e bf       	out	0x3e, r25	; 62
   16870:	0f be       	out	0x3f, r0	; 63
   16872:	8d bf       	out	0x3d, r24	; 61
   16874:	ce 01       	movw	r24, r28
   16876:	88 27       	eor	r24, r24
   16878:	97 7f       	andi	r25, 0xF7	; 247
   1687a:	89 2b       	or	r24, r25
   1687c:	41 f0       	breq	.+16     	; 0x1688e <printer_buffer+0x6a>
   1687e:	8b de       	rcall	.-746    	; 0x16596 <receive_plot_flush>
   16880:	89 2b       	or	r24, r25
   16882:	09 f4       	brne	.+2      	; 0x16886 <printer_buffer+0x62>
   16884:	3f c0       	rjmp	.+126    	; 0x16904 <printer_buffer+0xe0>
   16886:	81 e0       	ldi	r24, 0x01	; 1
   16888:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <plot+0x8>
   1688c:	3b c0       	rjmp	.+118    	; 0x16904 <printer_buffer+0xe0>
   1688e:	20 91 52 19 	lds	r18, 0x1952	; 0x801952 <plot+0xb>
   16892:	30 91 53 19 	lds	r19, 0x1953	; 0x801953 <plot+0xc>
   16896:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <plot+0x4>
   1689a:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <plot+0x5>
   1689e:	ac 01       	movw	r20, r24
   168a0:	4f 5f       	subi	r20, 0xFF	; 255
   168a2:	5f 4f       	sbci	r21, 0xFF	; 255
   168a4:	50 93 4c 19 	sts	0x194C, r21	; 0x80194c <plot+0x5>
   168a8:	40 93 4b 19 	sts	0x194B, r20	; 0x80194b <plot+0x4>
   168ac:	f9 01       	movw	r30, r18
   168ae:	e8 0f       	add	r30, r24
   168b0:	f9 1f       	adc	r31, r25
   168b2:	c0 83       	st	Z, r28
   168b4:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot>
   168b8:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0x1>
   168bc:	a0 91 49 19 	lds	r26, 0x1949	; 0x801949 <plot+0x2>
   168c0:	b0 91 4a 19 	lds	r27, 0x194A	; 0x80194a <plot+0x3>
   168c4:	01 96       	adiw	r24, 0x01	; 1
   168c6:	a1 1d       	adc	r26, r1
   168c8:	b1 1d       	adc	r27, r1
   168ca:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <plot>
   168ce:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <plot+0x1>
   168d2:	a0 93 49 19 	sts	0x1949, r26	; 0x801949 <plot+0x2>
   168d6:	b0 93 4a 19 	sts	0x194A, r27	; 0x80194a <plot+0x3>
   168da:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <plot+0x4>
   168de:	30 91 4c 19 	lds	r19, 0x194C	; 0x80194c <plot+0x5>
   168e2:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <plot+0x6>
   168e6:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <plot+0x7>
   168ea:	28 17       	cp	r18, r24
   168ec:	39 07       	cpc	r19, r25
   168ee:	54 f0       	brlt	.+20     	; 0x16904 <printer_buffer+0xe0>
   168f0:	52 de       	rcall	.-860    	; 0x16596 <receive_plot_flush>
   168f2:	97 ff       	sbrs	r25, 7
   168f4:	03 c0       	rjmp	.+6      	; 0x168fc <printer_buffer+0xd8>
   168f6:	81 e0       	ldi	r24, 0x01	; 1
   168f8:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <plot+0x8>
   168fc:	10 92 4c 19 	sts	0x194C, r1	; 0x80194c <plot+0x5>
   16900:	10 92 4b 19 	sts	0x194B, r1	; 0x80194b <plot+0x4>
   16904:	df 91       	pop	r29
   16906:	cf 91       	pop	r28
   16908:	08 95       	ret

0001690a <PRINTER_COMMANDS>:
   1690a:	cf 93       	push	r28
   1690c:	c8 2f       	mov	r28, r24
   1690e:	80 91 ab 1e 	lds	r24, 0x1EAB	; 0x801eab <listening>
   16912:	90 e0       	ldi	r25, 0x00	; 0
   16914:	0e 94 db 92 	call	0x125b6	; 0x125b6 <PRINTER_is_MLA>
   16918:	89 2b       	or	r24, r25
   1691a:	49 f0       	breq	.+18     	; 0x1692e <PRINTER_COMMANDS+0x24>
   1691c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16920:	85 ff       	sbrs	r24, 5
   16922:	1e c0       	rjmp	.+60     	; 0x16960 <PRINTER_COMMANDS+0x56>
   16924:	1f 92       	push	r1
   16926:	cf 93       	push	r28
   16928:	82 ef       	ldi	r24, 0xF2	; 242
   1692a:	98 e2       	ldi	r25, 0x28	; 40
   1692c:	0f c0       	rjmp	.+30     	; 0x1694c <PRINTER_COMMANDS+0x42>
   1692e:	80 91 a9 1e 	lds	r24, 0x1EA9	; 0x801ea9 <talking>
   16932:	90 e0       	ldi	r25, 0x00	; 0
   16934:	0e 94 ec 92 	call	0x125d8	; 0x125d8 <PRINTER_is_MTA>
   16938:	89 2b       	or	r24, r25
   1693a:	91 f0       	breq	.+36     	; 0x16960 <PRINTER_COMMANDS+0x56>
   1693c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16940:	85 ff       	sbrs	r24, 5
   16942:	0e c0       	rjmp	.+28     	; 0x16960 <PRINTER_COMMANDS+0x56>
   16944:	1f 92       	push	r1
   16946:	cf 93       	push	r28
   16948:	88 ed       	ldi	r24, 0xD8	; 216
   1694a:	98 e2       	ldi	r25, 0x28	; 40
   1694c:	1f 92       	push	r1
   1694e:	9f 93       	push	r25
   16950:	8f 93       	push	r24
   16952:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16956:	0f 90       	pop	r0
   16958:	0f 90       	pop	r0
   1695a:	0f 90       	pop	r0
   1695c:	0f 90       	pop	r0
   1695e:	0f 90       	pop	r0
   16960:	80 e0       	ldi	r24, 0x00	; 0
   16962:	90 e0       	ldi	r25, 0x00	; 0
   16964:	cf 91       	pop	r28
   16966:	08 95       	ret

00016968 <plot_echo>:
   16968:	cf 92       	push	r12
   1696a:	df 92       	push	r13
   1696c:	ff 92       	push	r15
   1696e:	0f 93       	push	r16
   16970:	1f 93       	push	r17
   16972:	cf 93       	push	r28
   16974:	df 93       	push	r29
   16976:	cd b7       	in	r28, 0x3d	; 61
   16978:	de b7       	in	r29, 0x3e	; 62
   1697a:	da 95       	dec	r29
   1697c:	0f b6       	in	r0, 0x3f	; 63
   1697e:	f8 94       	cli
   16980:	de bf       	out	0x3e, r29	; 62
   16982:	0f be       	out	0x3f, r0	; 63
   16984:	cd bf       	out	0x3d, r28	; 61
   16986:	f8 2e       	mov	r15, r24
   16988:	83 e0       	ldi	r24, 0x03	; 3
   1698a:	90 e0       	ldi	r25, 0x00	; 0
   1698c:	e9 d0       	rcall	.+466    	; 0x16b60 <find_type>
   1698e:	8c 01       	movw	r16, r24
   16990:	0f 3f       	cpi	r16, 0xFF	; 255
   16992:	8f ef       	ldi	r24, 0xFF	; 255
   16994:	18 07       	cpc	r17, r24
   16996:	59 f4       	brne	.+22     	; 0x169ae <plot_echo+0x46>
   16998:	83 ec       	ldi	r24, 0xC3	; 195
   1699a:	98 e2       	ldi	r25, 0x28	; 40
   1699c:	1f 92       	push	r1
   1699e:	9f 93       	push	r25
   169a0:	8f 93       	push	r24
   169a2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   169a6:	0f 90       	pop	r0
   169a8:	0f 90       	pop	r0
   169aa:	0f 90       	pop	r0
   169ac:	63 c0       	rjmp	.+198    	; 0x16a74 <plot_echo+0x10c>
   169ae:	4c de       	rcall	.-872    	; 0x16648 <printer_close>
   169b0:	80 e0       	ldi	r24, 0x00	; 0
   169b2:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   169b6:	89 2b       	or	r24, r25
   169b8:	31 f0       	breq	.+12     	; 0x169c6 <plot_echo+0x5e>
   169ba:	80 e0       	ldi	r24, 0x00	; 0
   169bc:	0e 94 c3 2b 	call	0x5786	; 0x5786 <uart_rx_byte>
   169c0:	0e 94 4b 79 	call	0xf296	; 0xf296 <putchar>
   169c4:	f5 cf       	rjmp	.-22     	; 0x169b0 <plot_echo+0x48>
   169c6:	80 91 7c 1c 	lds	r24, 0x1C7C	; 0x801c7c <__iob+0x2>
   169ca:	90 91 7d 1c 	lds	r25, 0x1C7D	; 0x801c7d <__iob+0x3>
   169ce:	0e 94 ac 8e 	call	0x11d58	; 0x11d58 <gpib_decode_header>
   169d2:	20 e0       	ldi	r18, 0x00	; 0
   169d4:	30 e0       	ldi	r19, 0x00	; 0
   169d6:	4e e4       	ldi	r20, 0x4E	; 78
   169d8:	53 e1       	ldi	r21, 0x13	; 19
   169da:	6f 2d       	mov	r22, r15
   169dc:	80 2f       	mov	r24, r16
   169de:	0e 94 22 c6 	call	0x18c44	; 0x18c44 <controller_send_str>
   169e2:	20 e0       	ldi	r18, 0x00	; 0
   169e4:	31 e0       	ldi	r19, 0x01	; 1
   169e6:	ce 01       	movw	r24, r28
   169e8:	01 96       	adiw	r24, 0x01	; 1
   169ea:	6c 01       	movw	r12, r24
   169ec:	ac 01       	movw	r20, r24
   169ee:	60 2f       	mov	r22, r16
   169f0:	8f 2d       	mov	r24, r15
   169f2:	0e 94 65 c6 	call	0x18cca	; 0x18cca <controller_read_str>
   169f6:	df 92       	push	r13
   169f8:	cf 92       	push	r12
   169fa:	9f 93       	push	r25
   169fc:	8f 93       	push	r24
   169fe:	81 eb       	ldi	r24, 0xB1	; 177
   16a00:	98 e2       	ldi	r25, 0x28	; 40
   16a02:	1f 92       	push	r1
   16a04:	9f 93       	push	r25
   16a06:	8f 93       	push	r24
   16a08:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16a0c:	20 e0       	ldi	r18, 0x00	; 0
   16a0e:	30 e0       	ldi	r19, 0x00	; 0
   16a10:	45 e5       	ldi	r20, 0x55	; 85
   16a12:	53 e1       	ldi	r21, 0x13	; 19
   16a14:	6f 2d       	mov	r22, r15
   16a16:	80 2f       	mov	r24, r16
   16a18:	0e 94 22 c6 	call	0x18c44	; 0x18c44 <controller_send_str>
   16a1c:	20 e0       	ldi	r18, 0x00	; 0
   16a1e:	31 e0       	ldi	r19, 0x01	; 1
   16a20:	a6 01       	movw	r20, r12
   16a22:	60 2f       	mov	r22, r16
   16a24:	8f 2d       	mov	r24, r15
   16a26:	0e 94 65 c6 	call	0x18cca	; 0x18cca <controller_read_str>
   16a2a:	df 92       	push	r13
   16a2c:	cf 92       	push	r12
   16a2e:	9f 93       	push	r25
   16a30:	8f 93       	push	r24
   16a32:	8f e9       	ldi	r24, 0x9F	; 159
   16a34:	98 e2       	ldi	r25, 0x28	; 40
   16a36:	1f 92       	push	r1
   16a38:	9f 93       	push	r25
   16a3a:	8f 93       	push	r24
   16a3c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16a40:	20 e0       	ldi	r18, 0x00	; 0
   16a42:	30 e0       	ldi	r19, 0x00	; 0
   16a44:	48 e6       	ldi	r20, 0x68	; 104
   16a46:	53 e1       	ldi	r21, 0x13	; 19
   16a48:	6f 2d       	mov	r22, r15
   16a4a:	80 2f       	mov	r24, r16
   16a4c:	0e 94 22 c6 	call	0x18c44	; 0x18c44 <controller_send_str>
   16a50:	60 2f       	mov	r22, r16
   16a52:	8f 2d       	mov	r24, r15
   16a54:	0e 94 ab c6 	call	0x18d56	; 0x18d56 <controller_read_trace>
   16a58:	9f 93       	push	r25
   16a5a:	8f 93       	push	r24
   16a5c:	8a e8       	ldi	r24, 0x8A	; 138
   16a5e:	98 e2       	ldi	r25, 0x28	; 40
   16a60:	1f 92       	push	r1
   16a62:	9f 93       	push	r25
   16a64:	8f 93       	push	r24
   16a66:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16a6a:	0f b6       	in	r0, 0x3f	; 63
   16a6c:	f8 94       	cli
   16a6e:	de bf       	out	0x3e, r29	; 62
   16a70:	0f be       	out	0x3f, r0	; 63
   16a72:	cd bf       	out	0x3d, r28	; 61
   16a74:	d3 95       	inc	r29
   16a76:	0f b6       	in	r0, 0x3f	; 63
   16a78:	f8 94       	cli
   16a7a:	de bf       	out	0x3e, r29	; 62
   16a7c:	0f be       	out	0x3f, r0	; 63
   16a7e:	cd bf       	out	0x3d, r28	; 61
   16a80:	df 91       	pop	r29
   16a82:	cf 91       	pop	r28
   16a84:	1f 91       	pop	r17
   16a86:	0f 91       	pop	r16
   16a88:	ff 90       	pop	r15
   16a8a:	df 90       	pop	r13
   16a8c:	cf 90       	pop	r12
   16a8e:	08 95       	ret

00016a90 <V2B_MSB>:
   16a90:	0f 93       	push	r16
   16a92:	1f 93       	push	r17
   16a94:	da 01       	movw	r26, r20
   16a96:	11 97       	sbiw	r26, 0x01	; 1
   16a98:	b7 fd       	sbrc	r27, 7
   16a9a:	0b c0       	rjmp	.+22     	; 0x16ab2 <V2B_MSB+0x22>
   16a9c:	fd 01       	movw	r30, r26
   16a9e:	e6 0f       	add	r30, r22
   16aa0:	f7 1f       	adc	r31, r23
   16aa2:	e8 0f       	add	r30, r24
   16aa4:	f9 1f       	adc	r31, r25
   16aa6:	00 83       	st	Z, r16
   16aa8:	01 2f       	mov	r16, r17
   16aaa:	12 2f       	mov	r17, r18
   16aac:	23 2f       	mov	r18, r19
   16aae:	33 27       	eor	r19, r19
   16ab0:	f2 cf       	rjmp	.-28     	; 0x16a96 <V2B_MSB+0x6>
   16ab2:	1f 91       	pop	r17
   16ab4:	0f 91       	pop	r16
   16ab6:	08 95       	ret

00016ab8 <V2B_LSB>:
   16ab8:	0f 93       	push	r16
   16aba:	1f 93       	push	r17
   16abc:	fc 01       	movw	r30, r24
   16abe:	e6 0f       	add	r30, r22
   16ac0:	f7 1f       	adc	r31, r23
   16ac2:	bf 01       	movw	r22, r30
   16ac4:	cf 01       	movw	r24, r30
   16ac6:	86 1b       	sub	r24, r22
   16ac8:	97 0b       	sbc	r25, r23
   16aca:	84 17       	cp	r24, r20
   16acc:	95 07       	cpc	r25, r21
   16ace:	34 f4       	brge	.+12     	; 0x16adc <V2B_LSB+0x24>
   16ad0:	01 93       	st	Z+, r16
   16ad2:	01 2f       	mov	r16, r17
   16ad4:	12 2f       	mov	r17, r18
   16ad6:	23 2f       	mov	r18, r19
   16ad8:	33 27       	eor	r19, r19
   16ada:	f4 cf       	rjmp	.-24     	; 0x16ac4 <V2B_LSB+0xc>
   16adc:	1f 91       	pop	r17
   16ade:	0f 91       	pop	r16
   16ae0:	08 95       	ret

00016ae2 <B2V_MSB>:
   16ae2:	cf 92       	push	r12
   16ae4:	df 92       	push	r13
   16ae6:	ef 92       	push	r14
   16ae8:	ff 92       	push	r15
   16aea:	fc 01       	movw	r30, r24
   16aec:	e6 0f       	add	r30, r22
   16aee:	f7 1f       	adc	r31, r23
   16af0:	60 e0       	ldi	r22, 0x00	; 0
   16af2:	70 e0       	ldi	r23, 0x00	; 0
   16af4:	cb 01       	movw	r24, r22
   16af6:	df 01       	movw	r26, r30
   16af8:	9f 01       	movw	r18, r30
   16afa:	2a 1b       	sub	r18, r26
   16afc:	3b 0b       	sbc	r19, r27
   16afe:	24 17       	cp	r18, r20
   16b00:	35 07       	cpc	r19, r21
   16b02:	4c f4       	brge	.+18     	; 0x16b16 <B2V_MSB+0x34>
   16b04:	cc 24       	eor	r12, r12
   16b06:	d6 2e       	mov	r13, r22
   16b08:	e7 2e       	mov	r14, r23
   16b0a:	f8 2e       	mov	r15, r24
   16b0c:	21 91       	ld	r18, Z+
   16b0e:	c7 01       	movw	r24, r14
   16b10:	b6 01       	movw	r22, r12
   16b12:	62 2b       	or	r22, r18
   16b14:	f1 cf       	rjmp	.-30     	; 0x16af8 <B2V_MSB+0x16>
   16b16:	ff 90       	pop	r15
   16b18:	ef 90       	pop	r14
   16b1a:	df 90       	pop	r13
   16b1c:	cf 90       	pop	r12
   16b1e:	08 95       	ret

00016b20 <B2V_LSB>:
   16b20:	cf 92       	push	r12
   16b22:	df 92       	push	r13
   16b24:	ef 92       	push	r14
   16b26:	ff 92       	push	r15
   16b28:	9c 01       	movw	r18, r24
   16b2a:	db 01       	movw	r26, r22
   16b2c:	60 e0       	ldi	r22, 0x00	; 0
   16b2e:	70 e0       	ldi	r23, 0x00	; 0
   16b30:	cb 01       	movw	r24, r22
   16b32:	41 50       	subi	r20, 0x01	; 1
   16b34:	51 09       	sbc	r21, r1
   16b36:	57 fd       	sbrc	r21, 7
   16b38:	0e c0       	rjmp	.+28     	; 0x16b56 <B2V_LSB+0x36>
   16b3a:	cc 24       	eor	r12, r12
   16b3c:	d6 2e       	mov	r13, r22
   16b3e:	e7 2e       	mov	r14, r23
   16b40:	f8 2e       	mov	r15, r24
   16b42:	fa 01       	movw	r30, r20
   16b44:	ea 0f       	add	r30, r26
   16b46:	fb 1f       	adc	r31, r27
   16b48:	e2 0f       	add	r30, r18
   16b4a:	f3 1f       	adc	r31, r19
   16b4c:	e0 81       	ld	r30, Z
   16b4e:	c7 01       	movw	r24, r14
   16b50:	b6 01       	movw	r22, r12
   16b52:	6e 2b       	or	r22, r30
   16b54:	ee cf       	rjmp	.-36     	; 0x16b32 <B2V_LSB+0x12>
   16b56:	ff 90       	pop	r15
   16b58:	ef 90       	pop	r14
   16b5a:	df 90       	pop	r13
   16b5c:	cf 90       	pop	r12
   16b5e:	08 95       	ret

00016b60 <find_type>:
   16b60:	ef ea       	ldi	r30, 0xAF	; 175
   16b62:	fe e1       	ldi	r31, 0x1E	; 30
   16b64:	20 e0       	ldi	r18, 0x00	; 0
   16b66:	30 e0       	ldi	r19, 0x00	; 0
   16b68:	40 81       	ld	r20, Z
   16b6a:	50 e0       	ldi	r21, 0x00	; 0
   16b6c:	48 17       	cp	r20, r24
   16b6e:	59 07       	cpc	r21, r25
   16b70:	49 f0       	breq	.+18     	; 0x16b84 <find_type+0x24>
   16b72:	2f 5f       	subi	r18, 0xFF	; 255
   16b74:	3f 4f       	sbci	r19, 0xFF	; 255
   16b76:	37 96       	adiw	r30, 0x07	; 7
   16b78:	28 30       	cpi	r18, 0x08	; 8
   16b7a:	31 05       	cpc	r19, r1
   16b7c:	a9 f7       	brne	.-22     	; 0x16b68 <find_type+0x8>
   16b7e:	8f ef       	ldi	r24, 0xFF	; 255
   16b80:	9f ef       	ldi	r25, 0xFF	; 255
   16b82:	08 95       	ret
   16b84:	c9 01       	movw	r24, r18
   16b86:	08 95       	ret

00016b88 <type_to_str>:
   16b88:	00 97       	sbiw	r24, 0x00	; 0
   16b8a:	59 f0       	breq	.+22     	; 0x16ba2 <type_to_str+0x1a>
   16b8c:	81 30       	cpi	r24, 0x01	; 1
   16b8e:	91 05       	cpc	r25, r1
   16b90:	59 f0       	breq	.+22     	; 0x16ba8 <type_to_str+0x20>
   16b92:	82 30       	cpi	r24, 0x02	; 2
   16b94:	91 05       	cpc	r25, r1
   16b96:	59 f0       	breq	.+22     	; 0x16bae <type_to_str+0x26>
   16b98:	03 97       	sbiw	r24, 0x03	; 3
   16b9a:	61 f0       	breq	.+24     	; 0x16bb4 <type_to_str+0x2c>
   16b9c:	8e e9       	ldi	r24, 0x9E	; 158
   16b9e:	93 e1       	ldi	r25, 0x13	; 19
   16ba0:	08 95       	ret
   16ba2:	84 e7       	ldi	r24, 0x74	; 116
   16ba4:	93 e1       	ldi	r25, 0x13	; 19
   16ba6:	08 95       	ret
   16ba8:	8c e7       	ldi	r24, 0x7C	; 124
   16baa:	93 e1       	ldi	r25, 0x13	; 19
   16bac:	08 95       	ret
   16bae:	84 e9       	ldi	r24, 0x94	; 148
   16bb0:	93 e1       	ldi	r25, 0x13	; 19
   16bb2:	08 95       	ret
   16bb4:	87 e8       	ldi	r24, 0x87	; 135
   16bb6:	93 e1       	ldi	r25, 0x13	; 19
   16bb8:	08 95       	ret

00016bba <find_free>:
   16bba:	80 e0       	ldi	r24, 0x00	; 0
   16bbc:	90 e0       	ldi	r25, 0x00	; 0
   16bbe:	d0 cf       	rjmp	.-96     	; 0x16b60 <find_type>
   16bc0:	08 95       	ret

00016bc2 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   16bc2:	9b 01       	movw	r18, r22
   16bc4:	20 52       	subi	r18, 0x20	; 32
   16bc6:	31 09       	sbc	r19, r1
   16bc8:	2f 35       	cpi	r18, 0x5F	; 95
   16bca:	31 05       	cpc	r19, r1
   16bcc:	f8 f4       	brcc	.+62     	; 0x16c0c <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   16bce:	64 17       	cp	r22, r20
   16bd0:	75 07       	cpc	r23, r21
   16bd2:	e4 f0       	brlt	.+56     	; 0x16c0c <find_device+0x4a>
   16bd4:	9a 01       	movw	r18, r20
   16bd6:	22 5e       	subi	r18, 0xE2	; 226
   16bd8:	3f 4f       	sbci	r19, 0xFF	; 255
   16bda:	26 17       	cp	r18, r22
   16bdc:	37 07       	cpc	r19, r23
   16bde:	b4 f0       	brlt	.+44     	; 0x16c0c <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   16be0:	64 1b       	sub	r22, r20
   16be2:	75 0b       	sbc	r23, r21
   16be4:	ef ea       	ldi	r30, 0xAF	; 175
   16be6:	fe e1       	ldi	r31, 0x1E	; 30

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16be8:	20 e0       	ldi	r18, 0x00	; 0
   16bea:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   16bec:	40 81       	ld	r20, Z
   16bee:	50 e0       	ldi	r21, 0x00	; 0
   16bf0:	48 17       	cp	r20, r24
   16bf2:	59 07       	cpc	r21, r25
   16bf4:	29 f4       	brne	.+10     	; 0x16c00 <find_device+0x3e>
   16bf6:	41 81       	ldd	r20, Z+1	; 0x01
   16bf8:	50 e0       	ldi	r21, 0x00	; 0
   16bfa:	64 17       	cp	r22, r20
   16bfc:	75 07       	cpc	r23, r21
   16bfe:	49 f0       	breq	.+18     	; 0x16c12 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16c00:	2f 5f       	subi	r18, 0xFF	; 255
   16c02:	3f 4f       	sbci	r19, 0xFF	; 255
   16c04:	37 96       	adiw	r30, 0x07	; 7
   16c06:	28 30       	cpi	r18, 0x08	; 8
   16c08:	31 05       	cpc	r19, r1
   16c0a:	81 f7       	brne	.-32     	; 0x16bec <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   16c0c:	8f ef       	ldi	r24, 0xFF	; 255
   16c0e:	9f ef       	ldi	r25, 0xFF	; 255
   16c10:	08 95       	ret
   16c12:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   16c14:	08 95       	ret

00016c16 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   16c16:	1f 93       	push	r17
   16c18:	cf 93       	push	r28
   16c1a:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   16c1c:	8f 3f       	cpi	r24, 0xFF	; 255
   16c1e:	2f ef       	ldi	r18, 0xFF	; 255
   16c20:	92 07       	cpc	r25, r18
   16c22:	09 f4       	brne	.+2      	; 0x16c26 <set_active_device+0x10>
   16c24:	fc c0       	rjmp	.+504    	; 0x16e1e <set_active_device+0x208>
   16c26:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   16c28:	08 97       	sbiw	r24, 0x08	; 8
   16c2a:	c0 f0       	brcs	.+48     	; 0x16c5c <set_active_device+0x46>
    {
        if(debuglevel & 1)
   16c2c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16c30:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16c34:	9c 01       	movw	r18, r24
   16c36:	21 70       	andi	r18, 0x01	; 1
   16c38:	33 27       	eor	r19, r19
   16c3a:	80 ff       	sbrs	r24, 0
   16c3c:	f2 c0       	rjmp	.+484    	; 0x16e22 <set_active_device+0x20c>
            printf("set_active_device:(%d) out of range\n", index);
   16c3e:	df 93       	push	r29
   16c40:	cf 93       	push	r28
   16c42:	87 e0       	ldi	r24, 0x07	; 7
   16c44:	92 e3       	ldi	r25, 0x32	; 50
   16c46:	1f 92       	push	r1
   16c48:	9f 93       	push	r25
   16c4a:	8f 93       	push	r24
   16c4c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16c50:	0f 90       	pop	r0
   16c52:	0f 90       	pop	r0
   16c54:	0f 90       	pop	r0
   16c56:	0f 90       	pop	r0
   16c58:	0f 90       	pop	r0
   16c5a:	e1 c0       	rjmp	.+450    	; 0x16e1e <set_active_device+0x208>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   16c5c:	87 e0       	ldi	r24, 0x07	; 7
   16c5e:	8c 9f       	mul	r24, r28
   16c60:	f0 01       	movw	r30, r0
   16c62:	8d 9f       	mul	r24, r29
   16c64:	f0 0d       	add	r31, r0
   16c66:	11 24       	eor	r1, r1
   16c68:	e1 55       	subi	r30, 0x51	; 81
   16c6a:	f1 4e       	sbci	r31, 0xE1	; 225
   16c6c:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   16c6e:	8f 31       	cpi	r24, 0x1F	; 31
   16c70:	e8 f0       	brcs	.+58     	; 0x16cac <set_active_device+0x96>
    {
        if(debuglevel & 1)
   16c72:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   16c76:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16c7a:	9a 01       	movw	r18, r20
   16c7c:	21 70       	andi	r18, 0x01	; 1
   16c7e:	33 27       	eor	r19, r19
   16c80:	40 ff       	sbrs	r20, 0
   16c82:	cf c0       	rjmp	.+414    	; 0x16e22 <set_active_device+0x20c>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   16c84:	1f 92       	push	r1
   16c86:	8f 93       	push	r24
   16c88:	df 93       	push	r29
   16c8a:	cf 93       	push	r28
   16c8c:	8e ec       	ldi	r24, 0xCE	; 206
   16c8e:	91 e3       	ldi	r25, 0x31	; 49
   16c90:	1f 92       	push	r1
   16c92:	9f 93       	push	r25
   16c94:	8f 93       	push	r24
   16c96:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16c9a:	8d b7       	in	r24, 0x3d	; 61
   16c9c:	9e b7       	in	r25, 0x3e	; 62
   16c9e:	07 96       	adiw	r24, 0x07	; 7
   16ca0:	0f b6       	in	r0, 0x3f	; 63
   16ca2:	f8 94       	cli
   16ca4:	9e bf       	out	0x3e, r25	; 62
   16ca6:	0f be       	out	0x3f, r0	; 63
   16ca8:	8d bf       	out	0x3d, r24	; 61
   16caa:	b9 c0       	rjmp	.+370    	; 0x16e1e <set_active_device+0x208>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   16cac:	10 81       	ld	r17, Z
   16cae:	81 2f       	mov	r24, r17
   16cb0:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   16cb2:	23 81       	ldd	r18, Z+3	; 0x03
   16cb4:	34 81       	ldd	r19, Z+4	; 0x04
   16cb6:	21 15       	cp	r18, r1
   16cb8:	31 05       	cpc	r19, r1
   16cba:	01 f5       	brne	.+64     	; 0x16cfc <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   16cbc:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   16cc0:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16cc4:	9a 01       	movw	r18, r20
   16cc6:	21 70       	andi	r18, 0x01	; 1
   16cc8:	33 27       	eor	r19, r19
   16cca:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   16ccc:	aa c0       	rjmp	.+340    	; 0x16e22 <set_active_device+0x20c>
   16cce:	5c df       	rcall	.-328    	; 0x16b88 <type_to_str>
   16cd0:	9f 93       	push	r25
   16cd2:	8f 93       	push	r24
   16cd4:	1f 92       	push	r1
   16cd6:	1f 93       	push	r17
   16cd8:	df 93       	push	r29
   16cda:	cf 93       	push	r28
   16cdc:	89 e9       	ldi	r24, 0x99	; 153
   16cde:	91 e3       	ldi	r25, 0x31	; 49
   16ce0:	1f 92       	push	r1
   16ce2:	9f 93       	push	r25
   16ce4:	8f 93       	push	r24
   16ce6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16cea:	8d b7       	in	r24, 0x3d	; 61
   16cec:	9e b7       	in	r25, 0x3e	; 62
   16cee:	09 96       	adiw	r24, 0x09	; 9
   16cf0:	0f b6       	in	r0, 0x3f	; 63
   16cf2:	f8 94       	cli
   16cf4:	9e bf       	out	0x3e, r25	; 62
   16cf6:	0f be       	out	0x3f, r0	; 63
   16cf8:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   16cfa:	91 c0       	rjmp	.+290    	; 0x16e1e <set_active_device+0x208>
   16cfc:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   16cfe:	11 f5       	brne	.+68     	; 0x16d44 <set_active_device+0x12e>
   16d00:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16d04:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16d08:	9c 01       	movw	r18, r24
   16d0a:	21 70       	andi	r18, 0x01	; 1
   16d0c:	33 27       	eor	r19, r19
   16d0e:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   16d10:	88 c0       	rjmp	.+272    	; 0x16e22 <set_active_device+0x20c>
   16d12:	80 e0       	ldi	r24, 0x00	; 0
   16d14:	90 e0       	ldi	r25, 0x00	; 0
   16d16:	38 df       	rcall	.-400    	; 0x16b88 <type_to_str>
   16d18:	9f 93       	push	r25
   16d1a:	8f 93       	push	r24
   16d1c:	1f 92       	push	r1
   16d1e:	1f 92       	push	r1
   16d20:	df 93       	push	r29
   16d22:	cf 93       	push	r28
   16d24:	84 e6       	ldi	r24, 0x64	; 100
   16d26:	91 e3       	ldi	r25, 0x31	; 49
   16d28:	1f 92       	push	r1
   16d2a:	9f 93       	push	r25
   16d2c:	8f 93       	push	r24
   16d2e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16d32:	8d b7       	in	r24, 0x3d	; 61
   16d34:	9e b7       	in	r25, 0x3e	; 62
   16d36:	09 96       	adiw	r24, 0x09	; 9
   16d38:	0f b6       	in	r0, 0x3f	; 63
   16d3a:	f8 94       	cli
   16d3c:	9e bf       	out	0x3e, r25	; 62
   16d3e:	0f be       	out	0x3f, r0	; 63
   16d40:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   16d42:	6d c0       	rjmp	.+218    	; 0x16e1e <set_active_device+0x208>
   16d44:	83 30       	cpi	r24, 0x03	; 3
   16d46:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   16d48:	29 f4       	brne	.+10     	; 0x16d54 <set_active_device+0x13e>
   16d4a:	30 93 5f 19 	sts	0x195F, r19	; 0x80195f <PRINTERp+0x1>
   16d4e:	20 93 5e 19 	sts	0x195E, r18	; 0x80195e <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   16d52:	43 c0       	rjmp	.+134    	; 0x16dda <set_active_device+0x1c4>
   16d54:	ac 01       	movw	r20, r24
   16d56:	41 50       	subi	r20, 0x01	; 1
   16d58:	51 09       	sbc	r21, r1
   16d5a:	42 30       	cpi	r20, 0x02	; 2
   16d5c:	51 05       	cpc	r21, r1
   16d5e:	08 f0       	brcs	.+2      	; 0x16d62 <set_active_device+0x14c>
    {
        if(Devices[index].state == NULL)
   16d60:	3f c0       	rjmp	.+126    	; 0x16de0 <set_active_device+0x1ca>
   16d62:	45 81       	ldd	r20, Z+5	; 0x05
   16d64:	56 81       	ldd	r21, Z+6	; 0x06
   16d66:	41 15       	cp	r20, r1
   16d68:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   16d6a:	01 f5       	brne	.+64     	; 0x16dac <set_active_device+0x196>
   16d6c:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   16d70:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16d74:	9a 01       	movw	r18, r20
   16d76:	21 70       	andi	r18, 0x01	; 1
   16d78:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   16d7a:	40 ff       	sbrs	r20, 0
   16d7c:	52 c0       	rjmp	.+164    	; 0x16e22 <set_active_device+0x20c>
   16d7e:	04 df       	rcall	.-504    	; 0x16b88 <type_to_str>
   16d80:	9f 93       	push	r25
   16d82:	8f 93       	push	r24
   16d84:	1f 92       	push	r1
   16d86:	1f 93       	push	r17
   16d88:	df 93       	push	r29
   16d8a:	cf 93       	push	r28
   16d8c:	8c e2       	ldi	r24, 0x2C	; 44
   16d8e:	91 e3       	ldi	r25, 0x31	; 49
   16d90:	1f 92       	push	r1
   16d92:	9f 93       	push	r25
   16d94:	8f 93       	push	r24
   16d96:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16d9a:	8d b7       	in	r24, 0x3d	; 61
   16d9c:	9e b7       	in	r25, 0x3e	; 62
   16d9e:	09 96       	adiw	r24, 0x09	; 9
   16da0:	0f b6       	in	r0, 0x3f	; 63
   16da2:	f8 94       	cli
   16da4:	9e bf       	out	0x3e, r25	; 62
   16da6:	0f be       	out	0x3f, r0	; 63
   16da8:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   16daa:	39 c0       	rjmp	.+114    	; 0x16e1e <set_active_device+0x208>
   16dac:	81 30       	cpi	r24, 0x01	; 1
   16dae:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   16db0:	49 f4       	brne	.+18     	; 0x16dc4 <set_active_device+0x1ae>
   16db2:	30 93 59 19 	sts	0x1959, r19	; 0x801959 <AMIGOp+0x1>
   16db6:	20 93 58 19 	sts	0x1958, r18	; 0x801958 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   16dba:	50 93 57 19 	sts	0x1957, r21	; 0x801957 <AMIGOs+0x1>
   16dbe:	40 93 56 19 	sts	0x1956, r20	; 0x801956 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   16dc2:	0b c0       	rjmp	.+22     	; 0x16dda <set_active_device+0x1c4>
   16dc4:	82 30       	cpi	r24, 0x02	; 2
   16dc6:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   16dc8:	59 f4       	brne	.+22     	; 0x16de0 <set_active_device+0x1ca>
   16dca:	30 93 5d 19 	sts	0x195D, r19	; 0x80195d <SS80p+0x1>
   16dce:	20 93 5c 19 	sts	0x195C, r18	; 0x80195c <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   16dd2:	50 93 5b 19 	sts	0x195B, r21	; 0x80195b <SS80s+0x1>
   16dd6:	40 93 5a 19 	sts	0x195A, r20	; 0x80195a <SS80s>
            return(1);
   16dda:	21 e0       	ldi	r18, 0x01	; 1
   16ddc:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   16dde:	21 c0       	rjmp	.+66     	; 0x16e22 <set_active_device+0x20c>
   16de0:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   16de4:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   16de8:	9a 01       	movw	r18, r20
   16dea:	21 70       	andi	r18, 0x01	; 1
   16dec:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   16dee:	40 ff       	sbrs	r20, 0
   16df0:	18 c0       	rjmp	.+48     	; 0x16e22 <set_active_device+0x20c>
   16df2:	ca de       	rcall	.-620    	; 0x16b88 <type_to_str>
   16df4:	9f 93       	push	r25
   16df6:	8f 93       	push	r24
   16df8:	1f 92       	push	r1
   16dfa:	1f 93       	push	r17
   16dfc:	df 93       	push	r29
   16dfe:	cf 93       	push	r28
   16e00:	81 e0       	ldi	r24, 0x01	; 1
   16e02:	91 e3       	ldi	r25, 0x31	; 49
   16e04:	1f 92       	push	r1
   16e06:	9f 93       	push	r25
   16e08:	8f 93       	push	r24
   16e0a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16e0e:	8d b7       	in	r24, 0x3d	; 61
   16e10:	9e b7       	in	r25, 0x3e	; 62
   16e12:	09 96       	adiw	r24, 0x09	; 9
   16e14:	0f b6       	in	r0, 0x3f	; 63
   16e16:	f8 94       	cli
   16e18:	9e bf       	out	0x3e, r25	; 62
   16e1a:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   16e1c:	8d bf       	out	0x3d, r24	; 61
   16e1e:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   16e20:	30 e0       	ldi	r19, 0x00	; 0
   16e22:	c9 01       	movw	r24, r18
   16e24:	df 91       	pop	r29
   16e26:	cf 91       	pop	r28
   16e28:	1f 91       	pop	r17
   16e2a:	08 95       	ret

00016e2c <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   16e2c:	0f 93       	push	r16
   16e2e:	1f 93       	push	r17
   16e30:	cf 93       	push	r28
   16e32:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   16e34:	ec 01       	movw	r28, r24
   16e36:	c1 de       	rcall	.-638    	; 0x16bba <find_free>
    if(ind == -1)
   16e38:	8c 01       	movw	r16, r24
   16e3a:	0f 3f       	cpi	r16, 0xFF	; 255
   16e3c:	8f ef       	ldi	r24, 0xFF	; 255
   16e3e:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   16e40:	99 f4       	brne	.+38     	; 0x16e68 <alloc_device+0x3c>
   16e42:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   16e46:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   16e48:	7b c0       	rjmp	.+246    	; 0x16f40 <alloc_device+0x114>
   16e4a:	df 93       	push	r29
   16e4c:	cf 93       	push	r28
   16e4e:	8d ed       	ldi	r24, 0xDD	; 221
   16e50:	90 e3       	ldi	r25, 0x30	; 48
   16e52:	1f 92       	push	r1
   16e54:	9f 93       	push	r25
   16e56:	8f 93       	push	r24
   16e58:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16e5c:	0f 90       	pop	r0
   16e5e:	0f 90       	pop	r0
   16e60:	0f 90       	pop	r0
   16e62:	0f 90       	pop	r0
   16e64:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   16e66:	6c c0       	rjmp	.+216    	; 0x16f40 <alloc_device+0x114>
   16e68:	c2 30       	cpi	r28, 0x02	; 2
   16e6a:	d1 05       	cpc	r29, r1
   16e6c:	f1 f0       	breq	.+60     	; 0x16eaa <alloc_device+0x7e>
   16e6e:	c3 30       	cpi	r28, 0x03	; 3
   16e70:	d1 05       	cpc	r29, r1
   16e72:	b1 f1       	breq	.+108    	; 0x16ee0 <alloc_device+0xb4>
   16e74:	c1 30       	cpi	r28, 0x01	; 1
   16e76:	d1 05       	cpc	r29, r1
   16e78:	09 f0       	breq	.+2      	; 0x16e7c <alloc_device+0x50>
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
            index = ind;
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   16e7a:	47 c0       	rjmp	.+142    	; 0x16f0a <alloc_device+0xde>
   16e7c:	87 e0       	ldi	r24, 0x07	; 7
   16e7e:	80 9f       	mul	r24, r16
   16e80:	e0 01       	movw	r28, r0
   16e82:	81 9f       	mul	r24, r17
   16e84:	d0 0d       	add	r29, r0
   16e86:	11 24       	eor	r1, r1
   16e88:	c1 55       	subi	r28, 0x51	; 81
   16e8a:	d1 4e       	sbci	r29, 0xE1	; 225
   16e8c:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   16e8e:	88 83       	st	Y, r24
   16e90:	61 e0       	ldi	r22, 0x01	; 1
   16e92:	70 e0       	ldi	r23, 0x00	; 0
   16e94:	84 e3       	ldi	r24, 0x34	; 52
   16e96:	90 e0       	ldi	r25, 0x00	; 0
   16e98:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16e9c:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16e9e:	8b 83       	std	Y+3, r24	; 0x03
   16ea0:	61 e0       	ldi	r22, 0x01	; 1
   16ea2:	70 e0       	ldi	r23, 0x00	; 0
   16ea4:	88 e1       	ldi	r24, 0x18	; 24
   16ea6:	90 e0       	ldi	r25, 0x00	; 0
    }

    switch(type)
    {
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   16ea8:	16 c0       	rjmp	.+44     	; 0x16ed6 <alloc_device+0xaa>
   16eaa:	87 e0       	ldi	r24, 0x07	; 7
   16eac:	80 9f       	mul	r24, r16
   16eae:	e0 01       	movw	r28, r0
   16eb0:	81 9f       	mul	r24, r17
   16eb2:	d0 0d       	add	r29, r0
   16eb4:	11 24       	eor	r1, r1
   16eb6:	c1 55       	subi	r28, 0x51	; 81
   16eb8:	d1 4e       	sbci	r29, 0xE1	; 225
   16eba:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   16ebc:	88 83       	st	Y, r24
   16ebe:	61 e0       	ldi	r22, 0x01	; 1
   16ec0:	70 e0       	ldi	r23, 0x00	; 0
   16ec2:	81 e5       	ldi	r24, 0x51	; 81
   16ec4:	90 e0       	ldi	r25, 0x00	; 0
   16ec6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16eca:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   16ecc:	8b 83       	std	Y+3, r24	; 0x03
   16ece:	61 e0       	ldi	r22, 0x01	; 1
   16ed0:	70 e0       	ldi	r23, 0x00	; 0
   16ed2:	86 e1       	ldi	r24, 0x16	; 22
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16ed4:	90 e0       	ldi	r25, 0x00	; 0
   16ed6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16eda:	9e 83       	std	Y+6, r25	; 0x06
            index = ind;
            break;
   16edc:	8d 83       	std	Y+5, r24	; 0x05
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   16ede:	30 c0       	rjmp	.+96     	; 0x16f40 <alloc_device+0x114>
   16ee0:	87 e0       	ldi	r24, 0x07	; 7
   16ee2:	80 9f       	mul	r24, r16
   16ee4:	e0 01       	movw	r28, r0
   16ee6:	81 9f       	mul	r24, r17
   16ee8:	d0 0d       	add	r29, r0
   16eea:	11 24       	eor	r1, r1
   16eec:	c1 55       	subi	r28, 0x51	; 81
   16eee:	d1 4e       	sbci	r29, 0xE1	; 225
   16ef0:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   16ef2:	88 83       	st	Y, r24
   16ef4:	61 e0       	ldi	r22, 0x01	; 1
   16ef6:	70 e0       	ldi	r23, 0x00	; 0
   16ef8:	8a e2       	ldi	r24, 0x2A	; 42
   16efa:	90 e0       	ldi	r25, 0x00	; 0
   16efc:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16f00:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = NULL;
   16f02:	8b 83       	std	Y+3, r24	; 0x03
   16f04:	1e 82       	std	Y+6, r1	; 0x06
            index = ind;
            break;
   16f06:	1d 82       	std	Y+5, r1	; 0x05
        default:
            if(debuglevel & 1)
   16f08:	1b c0       	rjmp	.+54     	; 0x16f40 <alloc_device+0x114>
   16f0a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   16f0e:	80 ff       	sbrs	r24, 0
   16f10:	15 c0       	rjmp	.+42     	; 0x16f3c <alloc_device+0x110>
   16f12:	ce 01       	movw	r24, r28
   16f14:	39 de       	rcall	.-910    	; 0x16b88 <type_to_str>
   16f16:	9f 93       	push	r25
   16f18:	8f 93       	push	r24
   16f1a:	df 93       	push	r29
   16f1c:	cf 93       	push	r28
   16f1e:	8b eb       	ldi	r24, 0xBB	; 187
   16f20:	90 e3       	ldi	r25, 0x30	; 48
   16f22:	1f 92       	push	r1
   16f24:	9f 93       	push	r25
   16f26:	8f 93       	push	r24
   16f28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   16f2c:	8d b7       	in	r24, 0x3d	; 61
   16f2e:	9e b7       	in	r25, 0x3e	; 62
   16f30:	07 96       	adiw	r24, 0x07	; 7
   16f32:	0f b6       	in	r0, 0x3f	; 63
   16f34:	f8 94       	cli
   16f36:	9e bf       	out	0x3e, r25	; 62
   16f38:	0f be       	out	0x3f, r0	; 63
   16f3a:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   16f3c:	0f ef       	ldi	r16, 0xFF	; 255
   16f3e:	1f ef       	ldi	r17, 0xFF	; 255
   16f40:	c8 01       	movw	r24, r16
   16f42:	df 91       	pop	r29
   16f44:	cf 91       	pop	r28
   16f46:	1f 91       	pop	r17
   16f48:	0f 91       	pop	r16
   16f4a:	08 95       	ret

00016f4c <init_Devices>:
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
   16f4c:	10 92 6b 19 	sts	0x196B, r1	; 0x80196b <stack_ind+0x1>
   16f50:	10 92 6a 19 	sts	0x196A, r1	; 0x80196a <stack_ind>
   16f54:	ef ea       	ldi	r30, 0xAF	; 175
   16f56:	fe e1       	ldi	r31, 0x1E	; 30
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   16f58:	8f ef       	ldi	r24, 0xFF	; 255
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   16f5a:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   16f5c:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   16f5e:	82 83       	std	Z+2, r24	; 0x02
        Devices[i].dev = NULL;
   16f60:	14 82       	std	Z+4, r1	; 0x04
   16f62:	13 82       	std	Z+3, r1	; 0x03
        Devices[i].state = NULL;
   16f64:	16 82       	std	Z+6, r1	; 0x06
   16f66:	15 82       	std	Z+5, r1	; 0x05
   16f68:	37 96       	adiw	r30, 0x07	; 7
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   16f6a:	9e e1       	ldi	r25, 0x1E	; 30
   16f6c:	e7 3e       	cpi	r30, 0xE7	; 231
   16f6e:	f9 07       	cpc	r31, r25
   16f70:	a1 f7       	brne	.-24     	; 0x16f5a <init_Devices+0xe>
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   16f72:	08 95       	ret

00016f74 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   16f74:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <stack_ind>
   16f78:	30 91 6b 19 	lds	r19, 0x196B	; 0x80196b <stack_ind+0x1>
   16f7c:	25 30       	cpi	r18, 0x05	; 5
   16f7e:	31 05       	cpc	r19, r1
   16f80:	7c f4       	brge	.+30     	; 0x16fa0 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   16f82:	a9 01       	movw	r20, r18
   16f84:	4f 5f       	subi	r20, 0xFF	; 255
   16f86:	5f 4f       	sbci	r21, 0xFF	; 255
   16f88:	50 93 6b 19 	sts	0x196B, r21	; 0x80196b <stack_ind+0x1>
   16f8c:	40 93 6a 19 	sts	0x196A, r20	; 0x80196a <stack_ind>
   16f90:	22 0f       	add	r18, r18
   16f92:	33 1f       	adc	r19, r19
   16f94:	f9 01       	movw	r30, r18
   16f96:	e0 5a       	subi	r30, 0xA0	; 160
   16f98:	f6 4e       	sbci	r31, 0xE6	; 230
   16f9a:	80 83       	st	Z, r24
   16f9c:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   16f9e:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   16fa0:	80 e0       	ldi	r24, 0x00	; 0
   16fa2:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   16fa4:	08 95       	ret

00016fa6 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   16fa6:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <stack_ind>
   16faa:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <stack_ind+0x1>
   16fae:	18 16       	cp	r1, r24
   16fb0:	19 06       	cpc	r1, r25
   16fb2:	6c f4       	brge	.+26     	; 0x16fce <pop_state+0x28>
        return(stack_p[--stack_ind]);
   16fb4:	01 97       	sbiw	r24, 0x01	; 1
   16fb6:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <stack_ind+0x1>
   16fba:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <stack_ind>
   16fbe:	88 0f       	add	r24, r24
   16fc0:	99 1f       	adc	r25, r25
   16fc2:	fc 01       	movw	r30, r24
   16fc4:	e0 5a       	subi	r30, 0xA0	; 160
   16fc6:	f6 4e       	sbci	r31, 0xE6	; 230
   16fc8:	80 81       	ld	r24, Z
   16fca:	91 81       	ldd	r25, Z+1	; 0x01
   16fcc:	08 95       	ret
    else
        return(START_STATE);
   16fce:	80 e0       	ldi	r24, 0x00	; 0
   16fd0:	90 e0       	ldi	r25, 0x00	; 0
}
   16fd2:	08 95       	ret

00016fd4 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
uint32_t assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   16fd4:	a0 e0       	ldi	r26, 0x00	; 0
   16fd6:	b0 e0       	ldi	r27, 0x00	; 0
   16fd8:	e0 ef       	ldi	r30, 0xF0	; 240
   16fda:	f7 eb       	ldi	r31, 0xB7	; 183
   16fdc:	0c 94 3d e9 	jmp	0x1d27a	; 0x1d27a <__prologue_saves__+0x4>
   16fe0:	2a 01       	movw	r4, r20
   16fe2:	3b 01       	movw	r6, r22
   16fe4:	48 01       	movw	r8, r16
   16fe6:	59 01       	movw	r10, r18
   16fe8:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   16fea:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
   16fee:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   16ff0:	88 81       	ld	r24, Y
   16ff2:	8d 33       	cpi	r24, 0x3D	; 61
   16ff4:	29 f4       	brne	.+10     	; 0x17000 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   16ff6:	ce 01       	movw	r24, r28
   16ff8:	01 96       	adiw	r24, 0x01	; 1
   16ffa:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
   16ffe:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   17000:	88 81       	ld	r24, Y
   17002:	81 11       	cpse	r24, r1
   17004:	17 c0       	rjmp	.+46     	; 0x17034 <assign_value+0x60>
    {
        if(debuglevel & 1)
   17006:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1700a:	80 ff       	sbrs	r24, 0
   1700c:	7a c0       	rjmp	.+244    	; 0x17102 <assign_value+0x12e>
            printf("line:%d, missing value\n", lines);
   1700e:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17012:	8f 93       	push	r24
   17014:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17018:	8f 93       	push	r24
   1701a:	83 ea       	ldi	r24, 0xA3	; 163
   1701c:	90 e3       	ldi	r25, 0x30	; 48
   1701e:	1f 92       	push	r1
   17020:	9f 93       	push	r25
   17022:	8f 93       	push	r24
   17024:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   17028:	0f 90       	pop	r0
   1702a:	0f 90       	pop	r0
   1702c:	0f 90       	pop	r0
   1702e:	0f 90       	pop	r0
   17030:	0f 90       	pop	r0
   17032:	67 c0       	rjmp	.+206    	; 0x17102 <assign_value+0x12e>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   17034:	ce 01       	movw	r24, r28
   17036:	0e 94 52 32 	call	0x64a4	; 0x64a4 <get_value>
   1703a:	6b 01       	movw	r12, r22
   1703c:	7c 01       	movw	r14, r24
        *val = tmp;
   1703e:	f8 01       	movw	r30, r16
   17040:	60 83       	st	Z, r22
   17042:	71 83       	std	Z+1, r23	; 0x01
   17044:	82 83       	std	Z+2, r24	; 0x02
   17046:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   17048:	41 14       	cp	r4, r1
   1704a:	51 04       	cpc	r5, r1
   1704c:	61 04       	cpc	r6, r1
   1704e:	71 04       	cpc	r7, r1
   17050:	39 f1       	breq	.+78     	; 0x170a0 <assign_value+0xcc>
   17052:	c4 14       	cp	r12, r4
   17054:	d5 04       	cpc	r13, r5
   17056:	e6 04       	cpc	r14, r6
   17058:	f7 04       	cpc	r15, r7
   1705a:	10 f5       	brcc	.+68     	; 0x170a0 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   1705c:	5f 92       	push	r5
   1705e:	4f 92       	push	r4
   17060:	df 93       	push	r29
   17062:	cf 93       	push	r28
   17064:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17068:	8f 93       	push	r24
   1706a:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   1706e:	8f 93       	push	r24
   17070:	84 e8       	ldi	r24, 0x84	; 132
   17072:	90 e3       	ldi	r25, 0x30	; 48
   17074:	1f 92       	push	r1
   17076:	9f 93       	push	r25
   17078:	8f 93       	push	r24
   1707a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   1707e:	ed b7       	in	r30, 0x3d	; 61
   17080:	fe b7       	in	r31, 0x3e	; 62
   17082:	39 96       	adiw	r30, 0x09	; 9
   17084:	0f b6       	in	r0, 0x3f	; 63
   17086:	f8 94       	cli
   17088:	fe bf       	out	0x3e, r31	; 62
   1708a:	0f be       	out	0x3f, r0	; 63
   1708c:	ed bf       	out	0x3d, r30	; 61
   1708e:	ff ef       	ldi	r31, 0xFF	; 255
   17090:	8f 16       	cp	r8, r31
   17092:	9f 06       	cpc	r9, r31
   17094:	af 06       	cpc	r10, r31
   17096:	bf 06       	cpc	r11, r31
   17098:	a1 f1       	breq	.+104    	; 0x17102 <assign_value+0x12e>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   1709a:	61 e0       	ldi	r22, 0x01	; 1
   1709c:	70 e0       	ldi	r23, 0x00	; 0
   1709e:	08 c0       	rjmp	.+16     	; 0x170b0 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   170a0:	ff ef       	ldi	r31, 0xFF	; 255
   170a2:	8f 16       	cp	r8, r31
   170a4:	9f 06       	cpc	r9, r31
   170a6:	af 06       	cpc	r10, r31
   170a8:	bf 06       	cpc	r11, r31
   170aa:	31 f1       	breq	.+76     	; 0x170f8 <assign_value+0x124>
   170ac:	60 e0       	ldi	r22, 0x00	; 0
   170ae:	70 e0       	ldi	r23, 0x00	; 0
   170b0:	8c 14       	cp	r8, r12
   170b2:	9d 04       	cpc	r9, r13
   170b4:	ae 04       	cpc	r10, r14
   170b6:	bf 04       	cpc	r11, r15
   170b8:	d0 f4       	brcc	.+52     	; 0x170ee <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   170ba:	9f 92       	push	r9
   170bc:	8f 92       	push	r8
   170be:	df 93       	push	r29
   170c0:	cf 93       	push	r28
   170c2:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   170c6:	8f 93       	push	r24
   170c8:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   170cc:	8f 93       	push	r24
   170ce:	85 e6       	ldi	r24, 0x65	; 101
   170d0:	90 e3       	ldi	r25, 0x30	; 48
   170d2:	1f 92       	push	r1
   170d4:	9f 93       	push	r25
   170d6:	8f 93       	push	r24
   170d8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   170dc:	ed b7       	in	r30, 0x3d	; 61
   170de:	fe b7       	in	r31, 0x3e	; 62
   170e0:	39 96       	adiw	r30, 0x09	; 9
   170e2:	0f b6       	in	r0, 0x3f	; 63
   170e4:	f8 94       	cli
   170e6:	fe bf       	out	0x3e, r31	; 62
   170e8:	0f be       	out	0x3f, r0	; 63
   170ea:	ed bf       	out	0x3d, r30	; 61
   170ec:	0a c0       	rjmp	.+20     	; 0x17102 <assign_value+0x12e>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   170ee:	f1 e0       	ldi	r31, 0x01	; 1
   170f0:	6f 27       	eor	r22, r31
   170f2:	80 e0       	ldi	r24, 0x00	; 0
   170f4:	90 e0       	ldi	r25, 0x00	; 0
   170f6:	08 c0       	rjmp	.+16     	; 0x17108 <assign_value+0x134>
    return(1);
   170f8:	61 e0       	ldi	r22, 0x01	; 1
   170fa:	70 e0       	ldi	r23, 0x00	; 0
   170fc:	80 e0       	ldi	r24, 0x00	; 0
   170fe:	90 e0       	ldi	r25, 0x00	; 0
   17100:	03 c0       	rjmp	.+6      	; 0x17108 <assign_value+0x134>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   17102:	60 e0       	ldi	r22, 0x00	; 0
   17104:	70 e0       	ldi	r23, 0x00	; 0
   17106:	cb 01       	movw	r24, r22
    return(1);
}
   17108:	cd b7       	in	r28, 0x3d	; 61
   1710a:	de b7       	in	r29, 0x3e	; 62
   1710c:	e0 e1       	ldi	r30, 0x10	; 16
   1710e:	0c 94 59 e9 	jmp	0x1d2b2	; 0x1d2b2 <__epilogue_restores__+0x4>

00017112 <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   17112:	08 95       	ret

00017114 <POSIX_Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int POSIX_Read_Config(char *name)
{
   17114:	aa e9       	ldi	r26, 0x9A	; 154
   17116:	b0 e0       	ldi	r27, 0x00	; 0
   17118:	e0 e9       	ldi	r30, 0x90	; 144
   1711a:	f8 eb       	ldi	r31, 0xB8	; 184
   1711c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   17120:	d8 2e       	mov	r13, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   17122:	c9 2e       	mov	r12, r25

    lines = 0;
   17124:	13 df       	rcall	.-474    	; 0x16f4c <init_Devices>
   17126:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <lines+0x1>
   1712a:	10 92 54 19 	sts	0x1954, r1	; 0x801954 <lines>

    printf("Reading: %s\n", name);
   1712e:	cf 92       	push	r12
   17130:	df 92       	push	r13
   17132:	88 e5       	ldi	r24, 0x58	; 88
   17134:	90 e3       	ldi	r25, 0x30	; 48
   17136:	1f 92       	push	r1
   17138:	9f 93       	push	r25
   1713a:	8f 93       	push	r24
   1713c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    cfg = fopen(name, "rb");
   17140:	6d e5       	ldi	r22, 0x5D	; 93
   17142:	78 e0       	ldi	r23, 0x08	; 8
   17144:	8d 2d       	mov	r24, r13
   17146:	9c 2d       	mov	r25, r12
   17148:	0e 94 41 82 	call	0x10482	; 0x10482 <fopen>
   1714c:	c9 57       	subi	r28, 0x79	; 121
   1714e:	df 4f       	sbci	r29, 0xFF	; 255
   17150:	99 83       	std	Y+1, r25	; 0x01
   17152:	88 83       	st	Y, r24
   17154:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   17156:	d0 40       	sbci	r29, 0x00	; 0
   17158:	0f 90       	pop	r0
   1715a:	0f 90       	pop	r0
   1715c:	0f 90       	pop	r0
   1715e:	0f 90       	pop	r0
   17160:	0f 90       	pop	r0
   17162:	89 2b       	or	r24, r25
   17164:	09 f4       	brne	.+2      	; 0x17168 <POSIX_Read_Config+0x54>
   17166:	53 c0       	rjmp	.+166    	; 0x1720e <POSIX_Read_Config+0xfa>
   17168:	21 2c       	mov	r2, r1
   1716a:	31 2c       	mov	r3, r1
   1716c:	41 2c       	mov	r4, r1
   1716e:	51 2c       	mov	r5, r1
   17170:	cb 57       	subi	r28, 0x7B	; 123
   17172:	df 4f       	sbci	r29, 0xFF	; 255
   17174:	19 82       	std	Y+1, r1	; 0x01
   17176:	18 82       	st	Y, r1
   17178:	c5 58       	subi	r28, 0x85	; 133
   1717a:	d0 40       	sbci	r29, 0x00	; 0
   1717c:	61 2c       	mov	r6, r1
   1717e:	71 2c       	mov	r7, r1
   17180:	a1 2c       	mov	r10, r1
   17182:	b1 2c       	mov	r11, r1
   17184:	81 2c       	mov	r8, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   17186:	91 2c       	mov	r9, r1
   17188:	81 e9       	ldi	r24, 0x91	; 145
   1718a:	9d e2       	ldi	r25, 0x2D	; 45
   1718c:	9c 01       	movw	r18, r24
   1718e:	40 e0       	ldi	r20, 0x00	; 0
   17190:	c7 57       	subi	r28, 0x77	; 119
   17192:	df 4f       	sbci	r29, 0xFF	; 255
   17194:	28 83       	st	Y, r18
   17196:	39 83       	std	Y+1, r19	; 0x01
   17198:	4a 83       	std	Y+2, r20	; 0x02
   1719a:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1719c:	d0 40       	sbci	r29, 0x00	; 0
   1719e:	83 eb       	ldi	r24, 0xB3	; 179
   171a0:	9d e2       	ldi	r25, 0x2D	; 45
   171a2:	9c 01       	movw	r18, r24
   171a4:	40 e0       	ldi	r20, 0x00	; 0
   171a6:	c4 57       	subi	r28, 0x74	; 116
   171a8:	df 4f       	sbci	r29, 0xFF	; 255
   171aa:	28 83       	st	Y, r18
   171ac:	39 83       	std	Y+1, r19	; 0x01
   171ae:	4a 83       	std	Y+2, r20	; 0x02
   171b0:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   171b2:	d0 40       	sbci	r29, 0x00	; 0
   171b4:	83 ee       	ldi	r24, 0xE3	; 227
   171b6:	9d e2       	ldi	r25, 0x2D	; 45
   171b8:	9c 01       	movw	r18, r24
   171ba:	40 e0       	ldi	r20, 0x00	; 0
   171bc:	c1 57       	subi	r28, 0x71	; 113
   171be:	df 4f       	sbci	r29, 0xFF	; 255
   171c0:	28 83       	st	Y, r18
   171c2:	39 83       	std	Y+1, r19	; 0x01
   171c4:	4a 83       	std	Y+2, r20	; 0x02
   171c6:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   171c8:	d0 40       	sbci	r29, 0x00	; 0
   171ca:	82 e1       	ldi	r24, 0x12	; 18
   171cc:	9e e2       	ldi	r25, 0x2E	; 46
   171ce:	9c 01       	movw	r18, r24
   171d0:	40 e0       	ldi	r20, 0x00	; 0
   171d2:	ce 56       	subi	r28, 0x6E	; 110
   171d4:	df 4f       	sbci	r29, 0xFF	; 255
   171d6:	28 83       	st	Y, r18
   171d8:	39 83       	std	Y+1, r19	; 0x01
   171da:	4a 83       	std	Y+2, r20	; 0x02
   171dc:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   171de:	d0 40       	sbci	r29, 0x00	; 0
   171e0:	82 e4       	ldi	r24, 0x42	; 66
   171e2:	9e e2       	ldi	r25, 0x2E	; 46
   171e4:	9c 01       	movw	r18, r24
   171e6:	40 e0       	ldi	r20, 0x00	; 0
   171e8:	cb 56       	subi	r28, 0x6B	; 107
   171ea:	df 4f       	sbci	r29, 0xFF	; 255
   171ec:	28 83       	st	Y, r18
   171ee:	39 83       	std	Y+1, r19	; 0x01
   171f0:	4a 83       	std	Y+2, r20	; 0x02
   171f2:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   171f4:	d0 40       	sbci	r29, 0x00	; 0
   171f6:	8b e5       	ldi	r24, 0x5B	; 91
   171f8:	9e e2       	ldi	r25, 0x2E	; 46
   171fa:	9c 01       	movw	r18, r24
   171fc:	40 e0       	ldi	r20, 0x00	; 0
   171fe:	c8 56       	subi	r28, 0x68	; 104
   17200:	df 4f       	sbci	r29, 0xFF	; 255
   17202:	28 83       	st	Y, r18
   17204:	39 83       	std	Y+1, r19	; 0x01
   17206:	4a 83       	std	Y+2, r20	; 0x02
   17208:	c8 59       	subi	r28, 0x98	; 152
   1720a:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   1720c:	2f c0       	rjmp	.+94     	; 0x1726c <POSIX_Read_Config+0x158>
   1720e:	86 ec       	ldi	r24, 0xC6	; 198
   17210:	93 e1       	ldi	r25, 0x13	; 19
   17212:	0e 94 17 7c 	call	0xf82e	; 0xf82e <perror>
        printf("Read_Config: open(%s) failed\n", name);
   17216:	cf 92       	push	r12
   17218:	df 92       	push	r13
   1721a:	8a e3       	ldi	r24, 0x3A	; 58
   1721c:	90 e3       	ldi	r25, 0x30	; 48
   1721e:	1f 92       	push	r1
   17220:	9f 93       	push	r25
   17222:	8f 93       	push	r24
   17224:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        set_Config_Defaults();
        return(errors);
   17228:	0f 90       	pop	r0
   1722a:	0f 90       	pop	r0
   1722c:	0f 90       	pop	r0
   1722e:	0f 90       	pop	r0
   17230:	0f 90       	pop	r0
   17232:	81 e0       	ldi	r24, 0x01	; 1
   17234:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   17236:	db c7       	rjmp	.+4022   	; 0x181ee <POSIX_Read_Config+0x10da>
   17238:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   1723c:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <lines+0x1>
   17240:	01 96       	adiw	r24, 0x01	; 1
   17242:	90 93 55 19 	sts	0x1955, r25	; 0x801955 <lines+0x1>
   17246:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <lines>

        ptr = str;

        trim_tail(ptr);
   1724a:	ce 01       	movw	r24, r28
   1724c:	01 96       	adiw	r24, 0x01	; 1
   1724e:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <trim_tail>
        ptr = skipspaces(ptr);
   17252:	ce 01       	movw	r24, r28
   17254:	01 96       	adiw	r24, 0x01	; 1
   17256:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
        len = strlen(ptr);
   1725a:	6c 01       	movw	r12, r24
   1725c:	fc 01       	movw	r30, r24
   1725e:	01 90       	ld	r0, Z+
   17260:	00 20       	and	r0, r0
   17262:	e9 f7       	brne	.-6      	; 0x1725e <POSIX_Read_Config+0x14a>
        if(!len)
   17264:	31 97       	sbiw	r30, 0x01	; 1
   17266:	8e 17       	cp	r24, r30
   17268:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1726a:	79 f4       	brne	.+30     	; 0x1728a <POSIX_Read_Config+0x176>
   1726c:	c9 57       	subi	r28, 0x79	; 121
   1726e:	df 4f       	sbci	r29, 0xFF	; 255
   17270:	48 81       	ld	r20, Y
   17272:	59 81       	ldd	r21, Y+1	; 0x01
   17274:	c7 58       	subi	r28, 0x87	; 135
   17276:	d0 40       	sbci	r29, 0x00	; 0
   17278:	6e e7       	ldi	r22, 0x7E	; 126
   1727a:	70 e0       	ldi	r23, 0x00	; 0
   1727c:	ce 01       	movw	r24, r28
   1727e:	01 96       	adiw	r24, 0x01	; 1
   17280:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
   17284:	89 2b       	or	r24, r25
   17286:	c1 f6       	brne	.-80     	; 0x17238 <POSIX_Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   17288:	65 c7       	rjmp	.+3786   	; 0x18154 <POSIX_Read_Config+0x1040>
   1728a:	dc 01       	movw	r26, r24
   1728c:	8c 91       	ld	r24, X
   1728e:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   17290:	69 f3       	breq	.-38     	; 0x1726c <POSIX_Read_Config+0x158>
   17292:	69 ed       	ldi	r22, 0xD9	; 217
   17294:	73 e1       	ldi	r23, 0x13	; 19
   17296:	c6 01       	movw	r24, r12
   17298:	0e 94 26 32 	call	0x644c	; 0x644c <token>
        {
            state = pop_state();
   1729c:	89 2b       	or	r24, r25
   1729e:	19 f0       	breq	.+6      	; 0x172a6 <POSIX_Read_Config+0x192>
   172a0:	82 de       	rcall	.-764    	; 0x16fa6 <pop_state>
            continue;
   172a2:	4c 01       	movw	r8, r24
        }

        switch(state)
   172a4:	e3 cf       	rjmp	.-58     	; 0x1726c <POSIX_Read_Config+0x158>
   172a6:	bd e0       	ldi	r27, 0x0D	; 13
   172a8:	8b 16       	cp	r8, r27
   172aa:	91 04       	cpc	r9, r1
   172ac:	08 f0       	brcs	.+2      	; 0x172b0 <POSIX_Read_Config+0x19c>
   172ae:	32 c7       	rjmp	.+3684   	; 0x18114 <POSIX_Read_Config+0x1000>
   172b0:	f4 01       	movw	r30, r8
   172b2:	e5 52       	subi	r30, 0x25	; 37
   172b4:	ff 4f       	sbci	r31, 0xFF	; 255
   172b6:	0c 94 0c e9 	jmp	0x1d218	; 0x1d218 <__tablejump2__>
        {
        case START_STATE:
            if(token(ptr,"SS80"))
   172ba:	6d ed       	ldi	r22, 0xDD	; 221
   172bc:	73 e1       	ldi	r23, 0x13	; 19
   172be:	c6 01       	movw	r24, r12
   172c0:	0e 94 26 32 	call	0x644c	; 0x644c <token>
            {
                push_state(state);
   172c4:	89 2b       	or	r24, r25
   172c6:	b9 f0       	breq	.+46     	; 0x172f6 <POSIX_Read_Config+0x1e2>
                state = SS80_STATE;
                index = alloc_device(SS80_TYPE);
   172c8:	80 e0       	ldi	r24, 0x00	; 0
   172ca:	90 e0       	ldi	r25, 0x00	; 0
   172cc:	53 de       	rcall	.-858    	; 0x16f74 <push_state>
   172ce:	82 e0       	ldi	r24, 0x02	; 2
   172d0:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   172d2:	ac dd       	rcall	.-1192   	; 0x16e2c <alloc_device>
   172d4:	3c 01       	movw	r6, r24
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
   172d6:	01 96       	adiw	r24, 0x01	; 1
   172d8:	49 f2       	breq	.-110    	; 0x1726c <POSIX_Read_Config+0x158>
   172da:	87 e0       	ldi	r24, 0x07	; 7
   172dc:	86 9d       	mul	r24, r6
   172de:	f0 01       	movw	r30, r0
   172e0:	87 9d       	mul	r24, r7
   172e2:	f0 0d       	add	r31, r0
   172e4:	11 24       	eor	r1, r1
   172e6:	e1 55       	subi	r30, 0x51	; 81
   172e8:	f1 4e       	sbci	r31, 0xE1	; 225
        {
        case START_STATE:
            if(token(ptr,"SS80"))
            {
                push_state(state);
                state = SS80_STATE;
   172ea:	43 80       	ldd	r4, Z+3	; 0x03
   172ec:	54 80       	ldd	r5, Z+4	; 0x04
   172ee:	88 24       	eor	r8, r8
   172f0:	83 94       	inc	r8
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
   172f2:	91 2c       	mov	r9, r1
   172f4:	bb cf       	rjmp	.-138    	; 0x1726c <POSIX_Read_Config+0x158>
   172f6:	62 ee       	ldi	r22, 0xE2	; 226
   172f8:	73 e1       	ldi	r23, 0x13	; 19
   172fa:	c6 01       	movw	r24, r12
   172fc:	0e 94 26 32 	call	0x644c	; 0x644c <token>
            {
                push_state(state);
   17300:	89 2b       	or	r24, r25
   17302:	c1 f0       	breq	.+48     	; 0x17334 <POSIX_Read_Config+0x220>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   17304:	80 e0       	ldi	r24, 0x00	; 0
   17306:	90 e0       	ldi	r25, 0x00	; 0
   17308:	35 de       	rcall	.-918    	; 0x16f74 <push_state>
   1730a:	81 e0       	ldi	r24, 0x01	; 1
   1730c:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1730e:	8e dd       	rcall	.-1252   	; 0x16e2c <alloc_device>
   17310:	3c 01       	movw	r6, r24
   17312:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   17314:	09 f4       	brne	.+2      	; 0x17318 <POSIX_Read_Config+0x204>
   17316:	aa cf       	rjmp	.-172    	; 0x1726c <POSIX_Read_Config+0x158>
   17318:	87 e0       	ldi	r24, 0x07	; 7
   1731a:	86 9d       	mul	r24, r6
   1731c:	f0 01       	movw	r30, r0
   1731e:	87 9d       	mul	r24, r7
   17320:	f0 0d       	add	r31, r0
   17322:	11 24       	eor	r1, r1
   17324:	e1 55       	subi	r30, 0x51	; 81
   17326:	f1 4e       	sbci	r31, 0xE1	; 225
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
            {
                push_state(state);
                state = AMIGO_STATE;
   17328:	23 80       	ldd	r2, Z+3	; 0x03
   1732a:	34 80       	ldd	r3, Z+4	; 0x04
   1732c:	a7 e0       	ldi	r26, 0x07	; 7
   1732e:	8a 2e       	mov	r8, r26
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;

            }
#endif
            else if(token(ptr,"PRINTER"))
   17330:	91 2c       	mov	r9, r1
   17332:	9c cf       	rjmp	.-200    	; 0x1726c <POSIX_Read_Config+0x158>
   17334:	68 ee       	ldi	r22, 0xE8	; 232
   17336:	73 e1       	ldi	r23, 0x13	; 19
   17338:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1733a:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   1733e:	89 2b       	or	r24, r25
   17340:	f1 f0       	breq	.+60     	; 0x1737e <POSIX_Read_Config+0x26a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   17342:	80 e0       	ldi	r24, 0x00	; 0
   17344:	90 e0       	ldi	r25, 0x00	; 0
   17346:	16 de       	rcall	.-980    	; 0x16f74 <push_state>
   17348:	83 e0       	ldi	r24, 0x03	; 3
   1734a:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1734c:	6f dd       	rcall	.-1314   	; 0x16e2c <alloc_device>
   1734e:	3c 01       	movw	r6, r24
   17350:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   17352:	09 f4       	brne	.+2      	; 0x17356 <POSIX_Read_Config+0x242>
   17354:	8b cf       	rjmp	.-234    	; 0x1726c <POSIX_Read_Config+0x158>
   17356:	87 e0       	ldi	r24, 0x07	; 7
   17358:	86 9d       	mul	r24, r6
   1735a:	f0 01       	movw	r30, r0
   1735c:	87 9d       	mul	r24, r7
   1735e:	f0 0d       	add	r31, r0
   17360:	11 24       	eor	r1, r1
   17362:	e1 55       	subi	r30, 0x51	; 81
   17364:	f1 4e       	sbci	r31, 0xE1	; 225
   17366:	83 81       	ldd	r24, Z+3	; 0x03
   17368:	94 81       	ldd	r25, Z+4	; 0x04
   1736a:	cb 57       	subi	r28, 0x7B	; 123
   1736c:	df 4f       	sbci	r29, 0xFF	; 255
   1736e:	99 83       	std	Y+1, r25	; 0x01
   17370:	88 83       	st	Y, r24
            }
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   17372:	c5 58       	subi	r28, 0x85	; 133
   17374:	d0 40       	sbci	r29, 0x00	; 0
   17376:	fb e0       	ldi	r31, 0x0B	; 11
   17378:	8f 2e       	mov	r8, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1737a:	91 2c       	mov	r9, r1
   1737c:	77 cf       	rjmp	.-274    	; 0x1726c <POSIX_Read_Config+0x158>
   1737e:	60 ef       	ldi	r22, 0xF0	; 240
   17380:	73 e1       	ldi	r23, 0x13	; 19
   17382:	c6 01       	movw	r24, r12
   17384:	0e 94 26 32 	call	0x644c	; 0x644c <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   17388:	00 97       	sbiw	r24, 0x00	; 0
   1738a:	f1 f0       	breq	.+60     	; 0x173c8 <POSIX_Read_Config+0x2b4>
   1738c:	de 01       	movw	r26, r28
   1738e:	af 57       	subi	r26, 0x7F	; 127
   17390:	bf 4f       	sbci	r27, 0xFF	; 255
   17392:	7d 01       	movw	r14, r26
   17394:	0f ef       	ldi	r16, 0xFF	; 255
   17396:	1f ef       	ldi	r17, 0xFF	; 255
   17398:	20 e0       	ldi	r18, 0x00	; 0
   1739a:	30 e0       	ldi	r19, 0x00	; 0
   1739c:	40 e0       	ldi	r20, 0x00	; 0
   1739e:	50 e0       	ldi	r21, 0x00	; 0
   173a0:	ba 01       	movw	r22, r20
   173a2:	8c 0d       	add	r24, r12
   173a4:	9d 1d       	adc	r25, r13
   173a6:	16 de       	rcall	.-980    	; 0x16fd4 <assign_value>
   173a8:	67 2b       	or	r22, r23
   173aa:	68 2b       	or	r22, r24
   173ac:	69 2b       	or	r22, r25
                    debuglevel = val;
   173ae:	09 f4       	brne	.+2      	; 0x173b2 <POSIX_Read_Config+0x29e>
   173b0:	5d cf       	rjmp	.-326    	; 0x1726c <POSIX_Read_Config+0x158>
   173b2:	cf 57       	subi	r28, 0x7F	; 127
   173b4:	df 4f       	sbci	r29, 0xFF	; 255
   173b6:	88 81       	ld	r24, Y
   173b8:	99 81       	ldd	r25, Y+1	; 0x01
   173ba:	c1 58       	subi	r28, 0x81	; 129
   173bc:	d0 40       	sbci	r29, 0x00	; 0
   173be:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <debuglevel+0x1>
   173c2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   173c6:	52 cf       	rjmp	.-348    	; 0x1726c <POSIX_Read_Config+0x158>
   173c8:	66 ef       	ldi	r22, 0xF6	; 246
   173ca:	73 e1       	ldi	r23, 0x13	; 19
   173cc:	c6 01       	movw	r24, r12
   173ce:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   173d2:	30 91 55 19 	lds	r19, 0x1955	; 0x801955 <lines+0x1>
   173d6:	20 91 54 19 	lds	r18, 0x1954	; 0x801954 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   173da:	00 97       	sbiw	r24, 0x00	; 0
   173dc:	61 f0       	breq	.+24     	; 0x173f6 <POSIX_Read_Config+0x2e2>
   173de:	3f 93       	push	r19
   173e0:	2f 93       	push	r18
   173e2:	c8 0e       	add	r12, r24
   173e4:	d9 1e       	adc	r13, r25
   173e6:	df 92       	push	r13
   173e8:	cf 92       	push	r12
   173ea:	81 e2       	ldi	r24, 0x21	; 33
   173ec:	90 e3       	ldi	r25, 0x30	; 48
   173ee:	1f 92       	push	r1
   173f0:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   173f2:	8f 93       	push	r24
   173f4:	00 c5       	rjmp	.+2560   	; 0x17df6 <POSIX_Read_Config+0xce2>
   173f6:	3f 93       	push	r19
   173f8:	2f 93       	push	r18
   173fa:	df 92       	push	r13
   173fc:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   173fe:	89 ef       	ldi	r24, 0xF9	; 249
   17400:	9f e2       	ldi	r25, 0x2F	; 47
   17402:	b5 c0       	rjmp	.+362    	; 0x1756e <POSIX_Read_Config+0x45a>
   17404:	6e e0       	ldi	r22, 0x0E	; 14
   17406:	74 e1       	ldi	r23, 0x14	; 20
   17408:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1740a:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   1740e:	89 2b       	or	r24, r25
   17410:	39 f0       	breq	.+14     	; 0x17420 <POSIX_Read_Config+0x30c>
                state = PRINTER_CONFIG;
   17412:	8b e0       	ldi	r24, 0x0B	; 11
   17414:	90 e0       	ldi	r25, 0x00	; 0
   17416:	ae dd       	rcall	.-1188   	; 0x16f74 <push_state>
   17418:	ec e0       	ldi	r30, 0x0C	; 12
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1741a:	8e 2e       	mov	r8, r30
   1741c:	91 2c       	mov	r9, r1
   1741e:	26 cf       	rjmp	.-436    	; 0x1726c <POSIX_Read_Config+0x158>
   17420:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17424:	8f 93       	push	r24
   17426:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   1742a:	8f 93       	push	r24
   1742c:	df 92       	push	r13
   1742e:	cf 92       	push	r12
   17430:	8f ec       	ldi	r24, 0xCF	; 207
   17432:	9f e2       	ldi	r25, 0x2F	; 47
   17434:	1f 92       	push	r1
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   17436:	9f 93       	push	r25
   17438:	8f 93       	push	r24
   1743a:	aa c5       	rjmp	.+2900   	; 0x17f90 <POSIX_Read_Config+0xe7c>
   1743c:	66 e0       	ldi	r22, 0x06	; 6
   1743e:	74 e1       	ldi	r23, 0x14	; 20
   17440:	c6 01       	movw	r24, r12
   17442:	0e 94 26 32 	call	0x644c	; 0x644c <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   17446:	00 97       	sbiw	r24, 0x00	; 0
   17448:	79 f1       	breq	.+94     	; 0x174a8 <POSIX_Read_Config+0x394>
   1744a:	de 01       	movw	r26, r28
   1744c:	af 57       	subi	r26, 0x7F	; 127
   1744e:	bf 4f       	sbci	r27, 0xFF	; 255
   17450:	7d 01       	movw	r14, r26
   17452:	0e e0       	ldi	r16, 0x0E	; 14
   17454:	10 e0       	ldi	r17, 0x00	; 0
   17456:	20 e0       	ldi	r18, 0x00	; 0
   17458:	30 e0       	ldi	r19, 0x00	; 0
   1745a:	40 e0       	ldi	r20, 0x00	; 0
   1745c:	50 e0       	ldi	r21, 0x00	; 0
   1745e:	ba 01       	movw	r22, r20
   17460:	8c 0d       	add	r24, r12
   17462:	9d 1d       	adc	r25, r13
   17464:	b7 dd       	rcall	.-1170   	; 0x16fd4 <assign_value>
   17466:	67 2b       	or	r22, r23
                    ++errors;
   17468:	68 2b       	or	r22, r24
   1746a:	69 2b       	or	r22, r25
   1746c:	29 f4       	brne	.+10     	; 0x17478 <POSIX_Read_Config+0x364>
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   1746e:	bf ef       	ldi	r27, 0xFF	; 255
   17470:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   17472:	bb 0a       	sbc	r11, r27
   17474:	8f ef       	ldi	r24, 0xFF	; 255
   17476:	05 c0       	rjmp	.+10     	; 0x17482 <POSIX_Read_Config+0x36e>
   17478:	cf 57       	subi	r28, 0x7F	; 127
   1747a:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   1747c:	88 81       	ld	r24, Y
   1747e:	c1 58       	subi	r28, 0x81	; 129
   17480:	d0 40       	sbci	r29, 0x00	; 0
   17482:	97 e0       	ldi	r25, 0x07	; 7
   17484:	96 9d       	mul	r25, r6
   17486:	f0 01       	movw	r30, r0
   17488:	97 9d       	mul	r25, r7
   1748a:	f0 0d       	add	r31, r0
   1748c:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = tmp;
   1748e:	e1 55       	subi	r30, 0x51	; 81
   17490:	f1 4e       	sbci	r31, 0xE1	; 225
   17492:	81 83       	std	Z+1, r24	; 0x01
   17494:	cb 57       	subi	r28, 0x7B	; 123
   17496:	df 4f       	sbci	r29, 0xFF	; 255
   17498:	a8 81       	ld	r26, Y
   1749a:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   1749c:	c5 58       	subi	r28, 0x85	; 133
   1749e:	d0 40       	sbci	r29, 0x00	; 0
   174a0:	8c 93       	st	X, r24
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   174a2:	8f ef       	ldi	r24, 0xFF	; 255
   174a4:	82 83       	std	Z+2, r24	; 0x02
   174a6:	c2 c0       	rjmp	.+388    	; 0x1762c <POSIX_Read_Config+0x518>
   174a8:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   174ac:	8f 93       	push	r24
   174ae:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   174b2:	8f 93       	push	r24
   174b4:	df 92       	push	r13
   174b6:	cf 92       	push	r12
   174b8:	8e e9       	ldi	r24, 0x9E	; 158
   174ba:	9f e2       	ldi	r25, 0x2F	; 47
   174bc:	1f 92       	push	r1
   174be:	9f 93       	push	r25
                ++errors;
   174c0:	8f 93       	push	r24
   174c2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   174c6:	bf ef       	ldi	r27, 0xFF	; 255
   174c8:	ab 1a       	sub	r10, r27
   174ca:	bb 0a       	sbc	r11, r27
   174cc:	3d c6       	rjmp	.+3194   	; 0x18148 <POSIX_Read_Config+0x1034>
   174ce:	65 e1       	ldi	r22, 0x15	; 21
   174d0:	74 e1       	ldi	r23, 0x14	; 20
   174d2:	c6 01       	movw	r24, r12
            {
                push_state(state);
   174d4:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   174d8:	89 2b       	or	r24, r25
   174da:	39 f0       	breq	.+14     	; 0x174ea <POSIX_Read_Config+0x3d6>
                state = SS80_HEADER;
   174dc:	81 e0       	ldi	r24, 0x01	; 1
   174de:	90 e0       	ldi	r25, 0x00	; 0
   174e0:	49 dd       	rcall	.-1390   	; 0x16f74 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   174e2:	72 e0       	ldi	r23, 0x02	; 2
   174e4:	87 2e       	mov	r8, r23
   174e6:	91 2c       	mov	r9, r1
   174e8:	c1 ce       	rjmp	.-638    	; 0x1726c <POSIX_Read_Config+0x158>
   174ea:	6e e0       	ldi	r22, 0x0E	; 14
   174ec:	74 e1       	ldi	r23, 0x14	; 20
   174ee:	c6 01       	movw	r24, r12
            {
                push_state(state);
   174f0:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   174f4:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   174f6:	39 f0       	breq	.+14     	; 0x17506 <POSIX_Read_Config+0x3f2>
   174f8:	81 e0       	ldi	r24, 0x01	; 1
   174fa:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"CONTROLLER"))
   174fc:	3b dd       	rcall	.-1418   	; 0x16f74 <push_state>
   174fe:	63 e0       	ldi	r22, 0x03	; 3
   17500:	86 2e       	mov	r8, r22
   17502:	91 2c       	mov	r9, r1
   17504:	b3 ce       	rjmp	.-666    	; 0x1726c <POSIX_Read_Config+0x158>
   17506:	6c e1       	ldi	r22, 0x1C	; 28
   17508:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   1750a:	c6 01       	movw	r24, r12
   1750c:	0e 94 26 32 	call	0x644c	; 0x644c <token>
                state = SS80_CONTROLLER;
   17510:	89 2b       	or	r24, r25
   17512:	39 f0       	breq	.+14     	; 0x17522 <POSIX_Read_Config+0x40e>
   17514:	81 e0       	ldi	r24, 0x01	; 1
   17516:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"UNIT"))
   17518:	2d dd       	rcall	.-1446   	; 0x16f74 <push_state>
   1751a:	54 e0       	ldi	r21, 0x04	; 4
   1751c:	85 2e       	mov	r8, r21
   1751e:	91 2c       	mov	r9, r1
   17520:	a5 ce       	rjmp	.-694    	; 0x1726c <POSIX_Read_Config+0x158>
   17522:	67 e2       	ldi	r22, 0x27	; 39
   17524:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17526:	c6 01       	movw	r24, r12
   17528:	0e 94 26 32 	call	0x644c	; 0x644c <token>
                state = SS80_UNIT;
   1752c:	89 2b       	or	r24, r25
   1752e:	39 f0       	breq	.+14     	; 0x1753e <POSIX_Read_Config+0x42a>
   17530:	81 e0       	ldi	r24, 0x01	; 1
   17532:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"VOLUME"))
   17534:	1f dd       	rcall	.-1474   	; 0x16f74 <push_state>
   17536:	45 e0       	ldi	r20, 0x05	; 5
   17538:	84 2e       	mov	r8, r20
   1753a:	91 2c       	mov	r9, r1
   1753c:	97 ce       	rjmp	.-722    	; 0x1726c <POSIX_Read_Config+0x158>
   1753e:	6c e2       	ldi	r22, 0x2C	; 44
   17540:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17542:	c6 01       	movw	r24, r12
   17544:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17548:	89 2b       	or	r24, r25
                state = SS80_VOLUME;
   1754a:	39 f0       	breq	.+14     	; 0x1755a <POSIX_Read_Config+0x446>
   1754c:	81 e0       	ldi	r24, 0x01	; 1
   1754e:	90 e0       	ldi	r25, 0x00	; 0
   17550:	11 dd       	rcall	.-1502   	; 0x16f74 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   17552:	36 e0       	ldi	r19, 0x06	; 6
   17554:	83 2e       	mov	r8, r19
   17556:	91 2c       	mov	r9, r1
   17558:	89 ce       	rjmp	.-750    	; 0x1726c <POSIX_Read_Config+0x158>
   1755a:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   1755e:	8f 93       	push	r24
   17560:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17564:	8f 93       	push	r24
   17566:	df 92       	push	r13
   17568:	cf 92       	push	r12
   1756a:	81 e7       	ldi	r24, 0x71	; 113
   1756c:	9f e2       	ldi	r25, 0x2F	; 47
                ++errors;
            }
            break;

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   1756e:	1f 92       	push	r1
   17570:	9f 93       	push	r25
   17572:	8f 93       	push	r24
   17574:	c9 c5       	rjmp	.+2962   	; 0x18108 <POSIX_Read_Config+0xff4>
   17576:	66 e0       	ldi	r22, 0x06	; 6
   17578:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   1757a:	c6 01       	movw	r24, r12
   1757c:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17580:	00 97       	sbiw	r24, 0x00	; 0
   17582:	39 f1       	breq	.+78     	; 0x175d2 <POSIX_Read_Config+0x4be>
   17584:	de 01       	movw	r26, r28
   17586:	af 57       	subi	r26, 0x7F	; 127
   17588:	bf 4f       	sbci	r27, 0xFF	; 255
   1758a:	7d 01       	movw	r14, r26
   1758c:	0e e1       	ldi	r16, 0x1E	; 30
   1758e:	10 e0       	ldi	r17, 0x00	; 0
   17590:	20 e0       	ldi	r18, 0x00	; 0
   17592:	30 e0       	ldi	r19, 0x00	; 0
   17594:	40 e0       	ldi	r20, 0x00	; 0
   17596:	50 e0       	ldi	r21, 0x00	; 0
   17598:	ba 01       	movw	r22, r20
   1759a:	8c 0d       	add	r24, r12
   1759c:	9d 1d       	adc	r25, r13
   1759e:	1a dd       	rcall	.-1484   	; 0x16fd4 <assign_value>
                    ++errors;
   175a0:	67 2b       	or	r22, r23
   175a2:	68 2b       	or	r22, r24
   175a4:	69 2b       	or	r22, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   175a6:	29 f4       	brne	.+10     	; 0x175b2 <POSIX_Read_Config+0x49e>
   175a8:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   175aa:	ab 1a       	sub	r10, r27
   175ac:	bb 0a       	sbc	r11, r27
   175ae:	8f ef       	ldi	r24, 0xFF	; 255
   175b0:	05 c0       	rjmp	.+10     	; 0x175bc <POSIX_Read_Config+0x4a8>
   175b2:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   175b4:	df 4f       	sbci	r29, 0xFF	; 255
   175b6:	88 81       	ld	r24, Y
   175b8:	c1 58       	subi	r28, 0x81	; 129
   175ba:	d0 40       	sbci	r29, 0x00	; 0
   175bc:	97 e0       	ldi	r25, 0x07	; 7
   175be:	96 9d       	mul	r25, r6
   175c0:	f0 01       	movw	r30, r0
   175c2:	97 9d       	mul	r25, r7
   175c4:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   175c6:	11 24       	eor	r1, r1
   175c8:	e1 55       	subi	r30, 0x51	; 81
            }
            else if( (ind = token(ptr,"PPR")) )
   175ca:	f1 4e       	sbci	r31, 0xE1	; 225
   175cc:	81 83       	std	Z+1, r24	; 0x01
   175ce:	f2 01       	movw	r30, r4
   175d0:	42 c4       	rjmp	.+2180   	; 0x17e56 <POSIX_Read_Config+0xd42>
   175d2:	63 e3       	ldi	r22, 0x33	; 51
   175d4:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   175d6:	c6 01       	movw	r24, r12
   175d8:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   175dc:	00 97       	sbiw	r24, 0x00	; 0
   175de:	49 f1       	breq	.+82     	; 0x17632 <POSIX_Read_Config+0x51e>
   175e0:	9e 01       	movw	r18, r28
   175e2:	2f 57       	subi	r18, 0x7F	; 127
   175e4:	3f 4f       	sbci	r19, 0xFF	; 255
   175e6:	79 01       	movw	r14, r18
   175e8:	07 e0       	ldi	r16, 0x07	; 7
   175ea:	10 e0       	ldi	r17, 0x00	; 0
   175ec:	20 e0       	ldi	r18, 0x00	; 0
   175ee:	30 e0       	ldi	r19, 0x00	; 0
   175f0:	40 e0       	ldi	r20, 0x00	; 0
   175f2:	50 e0       	ldi	r21, 0x00	; 0
   175f4:	ba 01       	movw	r22, r20
   175f6:	8c 0d       	add	r24, r12
   175f8:	9d 1d       	adc	r25, r13
   175fa:	ec dc       	rcall	.-1576   	; 0x16fd4 <assign_value>
                    ++errors;
   175fc:	67 2b       	or	r22, r23
   175fe:	68 2b       	or	r22, r24
   17600:	69 2b       	or	r22, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17602:	29 f4       	brne	.+10     	; 0x1760e <POSIX_Read_Config+0x4fa>
   17604:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   17606:	a3 1a       	sub	r10, r19
   17608:	b3 0a       	sbc	r11, r19
   1760a:	8f ef       	ldi	r24, 0xFF	; 255
   1760c:	05 c0       	rjmp	.+10     	; 0x17618 <POSIX_Read_Config+0x504>
   1760e:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   17610:	df 4f       	sbci	r29, 0xFF	; 255
   17612:	88 81       	ld	r24, Y
   17614:	c1 58       	subi	r28, 0x81	; 129
   17616:	d0 40       	sbci	r29, 0x00	; 0
   17618:	97 e0       	ldi	r25, 0x07	; 7
   1761a:	96 9d       	mul	r25, r6
   1761c:	f0 01       	movw	r30, r0
   1761e:	97 9d       	mul	r25, r7
   17620:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   17622:	11 24       	eor	r1, r1
   17624:	e1 55       	subi	r30, 0x51	; 81
   17626:	f1 4e       	sbci	r31, 0xE1	; 225
   17628:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   1762a:	d2 01       	movw	r26, r4
   1762c:	11 96       	adiw	r26, 0x01	; 1
   1762e:	8c 93       	st	X, r24
   17630:	1d ce       	rjmp	.-966    	; 0x1726c <POSIX_Read_Config+0x158>
   17632:	67 e3       	ldi	r22, 0x37	; 55
   17634:	74 e1       	ldi	r23, 0x14	; 20
   17636:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   17638:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   1763c:	00 97       	sbiw	r24, 0x00	; 0
   1763e:	a1 f0       	breq	.+40     	; 0x17668 <POSIX_Read_Config+0x554>
                if(*ptr == '=')
   17640:	8c 0d       	add	r24, r12
   17642:	9d 1d       	adc	r25, r13
   17644:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17648:	fc 01       	movw	r30, r24
   1764a:	20 81       	ld	r18, Z
   1764c:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   1764e:	19 f4       	brne	.+6      	; 0x17656 <POSIX_Read_Config+0x542>
   17650:	01 96       	adiw	r24, 0x01	; 1
   17652:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
   17656:	4f e1       	ldi	r20, 0x1F	; 31
   17658:	50 e0       	ldi	r21, 0x00	; 0
   1765a:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   1765c:	c2 01       	movw	r24, r4
   1765e:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17660:	0e 94 89 30 	call	0x6112	; 0x6112 <strncpy>
   17664:	d2 01       	movw	r26, r4
   17666:	41 c4       	rjmp	.+2178   	; 0x17eea <POSIX_Read_Config+0xdd6>
   17668:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   1766c:	8f 93       	push	r24
   1766e:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17672:	8f 93       	push	r24
   17674:	df 92       	push	r13
                ++errors;
            }
            break;
        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17676:	cf 92       	push	r12
   17678:	83 e4       	ldi	r24, 0x43	; 67
   1767a:	9f e2       	ldi	r25, 0x2F	; 47
   1767c:	1f cf       	rjmp	.-450    	; 0x174bc <POSIX_Read_Config+0x3a8>
   1767e:	6c e3       	ldi	r22, 0x3C	; 60
   17680:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17682:	c6 01       	movw	r24, r12
   17684:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17688:	00 97       	sbiw	r24, 0x00	; 0
   1768a:	09 f1       	breq	.+66     	; 0x176ce <POSIX_Read_Config+0x5ba>
   1768c:	9e 01       	movw	r18, r28
   1768e:	2f 57       	subi	r18, 0x7F	; 127
   17690:	3f 4f       	sbci	r19, 0xFF	; 255
   17692:	79 01       	movw	r14, r18
   17694:	0f ef       	ldi	r16, 0xFF	; 255
   17696:	1f ef       	ldi	r17, 0xFF	; 255
   17698:	20 e0       	ldi	r18, 0x00	; 0
   1769a:	30 e0       	ldi	r19, 0x00	; 0
   1769c:	40 e0       	ldi	r20, 0x00	; 0
   1769e:	50 e0       	ldi	r21, 0x00	; 0
   176a0:	ba 01       	movw	r22, r20
   176a2:	8c 0d       	add	r24, r12
   176a4:	9d 1d       	adc	r25, r13
   176a6:	96 dc       	rcall	.-1748   	; 0x16fd4 <assign_value>
                    ++errors;
   176a8:	67 2b       	or	r22, r23
   176aa:	68 2b       	or	r22, r24
   176ac:	69 2b       	or	r22, r25
                SS80p->CONFIG.ID = val;
   176ae:	19 f4       	brne	.+6      	; 0x176b6 <POSIX_Read_Config+0x5a2>
   176b0:	3f ef       	ldi	r19, 0xFF	; 255
   176b2:	a3 1a       	sub	r10, r19
   176b4:	b3 0a       	sbc	r11, r19
   176b6:	cf 57       	subi	r28, 0x7F	; 127
   176b8:	df 4f       	sbci	r29, 0xFF	; 255
   176ba:	88 81       	ld	r24, Y
   176bc:	99 81       	ldd	r25, Y+1	; 0x01
   176be:	c1 58       	subi	r28, 0x81	; 129
   176c0:	d0 40       	sbci	r29, 0x00	; 0
   176c2:	d2 01       	movw	r26, r4
   176c4:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   176c6:	9c 93       	st	X, r25
   176c8:	8e 93       	st	-X, r24
   176ca:	93 97       	sbiw	r26, 0x23	; 35
   176cc:	cf cd       	rjmp	.-1122   	; 0x1726c <POSIX_Read_Config+0x158>
   176ce:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   176d2:	8f 93       	push	r24
   176d4:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   176d8:	8f 93       	push	r24
   176da:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   176dc:	cf 92       	push	r12
   176de:	85 e1       	ldi	r24, 0x15	; 21
   176e0:	9f e2       	ldi	r25, 0x2F	; 47
   176e2:	ec ce       	rjmp	.-552    	; 0x174bc <POSIX_Read_Config+0x3a8>
   176e4:	6f e3       	ldi	r22, 0x3F	; 63
   176e6:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   176e8:	c6 01       	movw	r24, r12
   176ea:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   176ee:	00 97       	sbiw	r24, 0x00	; 0
   176f0:	09 f1       	breq	.+66     	; 0x17734 <POSIX_Read_Config+0x620>
   176f2:	9e 01       	movw	r18, r28
   176f4:	2f 57       	subi	r18, 0x7F	; 127
   176f6:	3f 4f       	sbci	r19, 0xFF	; 255
   176f8:	79 01       	movw	r14, r18
   176fa:	0f ef       	ldi	r16, 0xFF	; 255
   176fc:	1f ef       	ldi	r17, 0xFF	; 255
   176fe:	20 e0       	ldi	r18, 0x00	; 0
   17700:	30 e0       	ldi	r19, 0x00	; 0
   17702:	40 e0       	ldi	r20, 0x00	; 0
   17704:	50 e0       	ldi	r21, 0x00	; 0
   17706:	ba 01       	movw	r22, r20
   17708:	8c 0d       	add	r24, r12
   1770a:	9d 1d       	adc	r25, r13
   1770c:	63 dc       	rcall	.-1850   	; 0x16fd4 <assign_value>
                    ++errors;
   1770e:	67 2b       	or	r22, r23
   17710:	68 2b       	or	r22, r24
   17712:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   17714:	19 f4       	brne	.+6      	; 0x1771c <POSIX_Read_Config+0x608>
   17716:	3f ef       	ldi	r19, 0xFF	; 255
   17718:	a3 1a       	sub	r10, r19
   1771a:	b3 0a       	sbc	r11, r19
   1771c:	cf 57       	subi	r28, 0x7F	; 127
   1771e:	df 4f       	sbci	r29, 0xFF	; 255
   17720:	88 81       	ld	r24, Y
   17722:	99 81       	ldd	r25, Y+1	; 0x01
   17724:	c1 58       	subi	r28, 0x81	; 129
   17726:	d0 40       	sbci	r29, 0x00	; 0
   17728:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   1772a:	96 96       	adiw	r26, 0x26	; 38
   1772c:	9c 93       	st	X, r25
   1772e:	8e 93       	st	-X, r24
   17730:	95 97       	sbiw	r26, 0x25	; 37
   17732:	9c cd       	rjmp	.-1224   	; 0x1726c <POSIX_Read_Config+0x158>
   17734:	67 ea       	ldi	r22, 0xA7	; 167
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17736:	74 e1       	ldi	r23, 0x14	; 20
   17738:	c6 01       	movw	r24, r12
   1773a:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   1773e:	00 97       	sbiw	r24, 0x00	; 0
   17740:	e9 f0       	breq	.+58     	; 0x1777c <POSIX_Read_Config+0x668>
   17742:	fe 01       	movw	r30, r28
   17744:	ef 57       	subi	r30, 0x7F	; 127
   17746:	ff 4f       	sbci	r31, 0xFF	; 255
   17748:	7f 01       	movw	r14, r30
   1774a:	0f ef       	ldi	r16, 0xFF	; 255
   1774c:	1f ef       	ldi	r17, 0xFF	; 255
   1774e:	20 e0       	ldi	r18, 0x00	; 0
   17750:	30 e0       	ldi	r19, 0x00	; 0
   17752:	40 e0       	ldi	r20, 0x00	; 0
   17754:	50 e0       	ldi	r21, 0x00	; 0
   17756:	ba 01       	movw	r22, r20
   17758:	8c 0d       	add	r24, r12
   1775a:	9d 1d       	adc	r25, r13
                    ++errors;
   1775c:	3b dc       	rcall	.-1930   	; 0x16fd4 <assign_value>
   1775e:	67 2b       	or	r22, r23
   17760:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   17762:	69 2b       	or	r22, r25
   17764:	19 f4       	brne	.+6      	; 0x1776c <POSIX_Read_Config+0x658>
   17766:	ff ef       	ldi	r31, 0xFF	; 255
   17768:	af 1a       	sub	r10, r31
   1776a:	bf 0a       	sbc	r11, r31
   1776c:	cf 57       	subi	r28, 0x7F	; 127
   1776e:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"TYPE")) )
   17770:	88 81       	ld	r24, Y
   17772:	99 81       	ldd	r25, Y+1	; 0x01
   17774:	c1 58       	subi	r28, 0x81	; 129
   17776:	d0 40       	sbci	r29, 0x00	; 0
   17778:	d2 01       	movw	r26, r4
   1777a:	5a c4       	rjmp	.+2228   	; 0x18030 <POSIX_Read_Config+0xf1c>
   1777c:	66 ea       	ldi	r22, 0xA6	; 166
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1777e:	73 e1       	ldi	r23, 0x13	; 19
   17780:	c6 01       	movw	r24, r12
   17782:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17786:	00 97       	sbiw	r24, 0x00	; 0
   17788:	f1 f0       	breq	.+60     	; 0x177c6 <POSIX_Read_Config+0x6b2>
   1778a:	fe 01       	movw	r30, r28
   1778c:	ef 57       	subi	r30, 0x7F	; 127
   1778e:	ff 4f       	sbci	r31, 0xFF	; 255
   17790:	7f 01       	movw	r14, r30
   17792:	0f ef       	ldi	r16, 0xFF	; 255
   17794:	1f ef       	ldi	r17, 0xFF	; 255
   17796:	20 e0       	ldi	r18, 0x00	; 0
   17798:	30 e0       	ldi	r19, 0x00	; 0
   1779a:	40 e0       	ldi	r20, 0x00	; 0
   1779c:	50 e0       	ldi	r21, 0x00	; 0
   1779e:	ba 01       	movw	r22, r20
   177a0:	8c 0d       	add	r24, r12
   177a2:	9d 1d       	adc	r25, r13
                    ++errors;
   177a4:	17 dc       	rcall	.-2002   	; 0x16fd4 <assign_value>
   177a6:	67 2b       	or	r22, r23
   177a8:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TYPE = val;
   177aa:	69 2b       	or	r22, r25
   177ac:	19 f4       	brne	.+6      	; 0x177b4 <POSIX_Read_Config+0x6a0>
   177ae:	ff ef       	ldi	r31, 0xFF	; 255
   177b0:	af 1a       	sub	r10, r31
   177b2:	bf 0a       	sbc	r11, r31
   177b4:	cf 57       	subi	r28, 0x7F	; 127
   177b6:	df 4f       	sbci	r29, 0xFF	; 255
   177b8:	88 81       	ld	r24, Y
   177ba:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   177bc:	d0 40       	sbci	r29, 0x00	; 0
   177be:	d2 01       	movw	r26, r4
   177c0:	99 96       	adiw	r26, 0x29	; 41
   177c2:	8c 93       	st	X, r24
   177c4:	53 cd       	rjmp	.-1370   	; 0x1726c <POSIX_Read_Config+0x158>
   177c6:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   177ca:	8f 93       	push	r24
   177cc:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
                ++errors;
            }
            break;

        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   177d0:	8f 93       	push	r24
   177d2:	df 92       	push	r13
   177d4:	cf 92       	push	r12
   177d6:	83 ee       	ldi	r24, 0xE3	; 227
   177d8:	9e e2       	ldi	r25, 0x2E	; 46
   177da:	70 ce       	rjmp	.-800    	; 0x174bc <POSIX_Read_Config+0x3a8>
   177dc:	6f e4       	ldi	r22, 0x4F	; 79
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   177de:	74 e1       	ldi	r23, 0x14	; 20
   177e0:	c6 01       	movw	r24, r12
   177e2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   177e6:	00 97       	sbiw	r24, 0x00	; 0
   177e8:	f1 f0       	breq	.+60     	; 0x17826 <POSIX_Read_Config+0x712>
   177ea:	9e 01       	movw	r18, r28
   177ec:	2f 57       	subi	r18, 0x7F	; 127
   177ee:	3f 4f       	sbci	r19, 0xFF	; 255
   177f0:	79 01       	movw	r14, r18
   177f2:	0f ef       	ldi	r16, 0xFF	; 255
   177f4:	1f ef       	ldi	r17, 0xFF	; 255
   177f6:	20 e0       	ldi	r18, 0x00	; 0
   177f8:	30 e0       	ldi	r19, 0x00	; 0
   177fa:	40 e0       	ldi	r20, 0x00	; 0
   177fc:	50 e0       	ldi	r21, 0x00	; 0
   177fe:	ba 01       	movw	r22, r20
   17800:	8c 0d       	add	r24, r12
   17802:	9d 1d       	adc	r25, r13
                    ++errors;
   17804:	e7 db       	rcall	.-2098   	; 0x16fd4 <assign_value>
   17806:	67 2b       	or	r22, r23
   17808:	68 2b       	or	r22, r24
                SS80p->UNIT.UNIT_TYPE = val;
   1780a:	69 2b       	or	r22, r25
   1780c:	19 f4       	brne	.+6      	; 0x17814 <POSIX_Read_Config+0x700>
   1780e:	3f ef       	ldi	r19, 0xFF	; 255
   17810:	a3 1a       	sub	r10, r19
   17812:	b3 0a       	sbc	r11, r19
   17814:	cf 57       	subi	r28, 0x7F	; 127
   17816:	df 4f       	sbci	r29, 0xFF	; 255
   17818:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   1781a:	c1 58       	subi	r28, 0x81	; 129
   1781c:	d0 40       	sbci	r29, 0x00	; 0
   1781e:	d2 01       	movw	r26, r4
   17820:	9a 96       	adiw	r26, 0x2a	; 42
   17822:	8c 93       	st	X, r24
   17824:	23 cd       	rjmp	.-1466   	; 0x1726c <POSIX_Read_Config+0x158>
   17826:	69 e5       	ldi	r22, 0x59	; 89
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   17828:	74 e1       	ldi	r23, 0x14	; 20
   1782a:	c6 01       	movw	r24, r12
   1782c:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17830:	00 97       	sbiw	r24, 0x00	; 0
   17832:	11 f1       	breq	.+68     	; 0x17878 <POSIX_Read_Config+0x764>
   17834:	fe 01       	movw	r30, r28
   17836:	ef 57       	subi	r30, 0x7F	; 127
   17838:	ff 4f       	sbci	r31, 0xFF	; 255
   1783a:	7f 01       	movw	r14, r30
   1783c:	0f ef       	ldi	r16, 0xFF	; 255
   1783e:	1f ef       	ldi	r17, 0xFF	; 255
   17840:	98 01       	movw	r18, r16
   17842:	40 e0       	ldi	r20, 0x00	; 0
   17844:	50 e0       	ldi	r21, 0x00	; 0
   17846:	ba 01       	movw	r22, r20
   17848:	8c 0d       	add	r24, r12
   1784a:	9d 1d       	adc	r25, r13
                    ++errors;
   1784c:	c3 db       	rcall	.-2170   	; 0x16fd4 <assign_value>
   1784e:	67 2b       	or	r22, r23
   17850:	68 2b       	or	r22, r24
                SS80p->UNIT.DEVICE_NUMBER = val;
   17852:	69 2b       	or	r22, r25
   17854:	19 f4       	brne	.+6      	; 0x1785c <POSIX_Read_Config+0x748>
   17856:	ff ef       	ldi	r31, 0xFF	; 255
   17858:	af 1a       	sub	r10, r31
   1785a:	bf 0a       	sbc	r11, r31
   1785c:	cf 57       	subi	r28, 0x7F	; 127
   1785e:	df 4f       	sbci	r29, 0xFF	; 255
   17860:	88 81       	ld	r24, Y
   17862:	99 81       	ldd	r25, Y+1	; 0x01
   17864:	aa 81       	ldd	r26, Y+2	; 0x02
   17866:	bb 81       	ldd	r27, Y+3	; 0x03
   17868:	c1 58       	subi	r28, 0x81	; 129
   1786a:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   1786c:	f2 01       	movw	r30, r4
   1786e:	83 a7       	std	Z+43, r24	; 0x2b
   17870:	94 a7       	std	Z+44, r25	; 0x2c
   17872:	a5 a7       	std	Z+45, r26	; 0x2d
   17874:	b6 a7       	std	Z+46, r27	; 0x2e
   17876:	fa cc       	rjmp	.-1548   	; 0x1726c <POSIX_Read_Config+0x158>
   17878:	67 e6       	ldi	r22, 0x67	; 103
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   1787a:	74 e1       	ldi	r23, 0x14	; 20
   1787c:	c6 01       	movw	r24, r12
   1787e:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17882:	00 97       	sbiw	r24, 0x00	; 0
   17884:	09 f1       	breq	.+66     	; 0x178c8 <POSIX_Read_Config+0x7b4>
   17886:	9e 01       	movw	r18, r28
   17888:	2f 57       	subi	r18, 0x7F	; 127
   1788a:	3f 4f       	sbci	r19, 0xFF	; 255
   1788c:	79 01       	movw	r14, r18
   1788e:	00 e0       	ldi	r16, 0x00	; 0
   17890:	10 e1       	ldi	r17, 0x10	; 16
   17892:	20 e0       	ldi	r18, 0x00	; 0
   17894:	30 e0       	ldi	r19, 0x00	; 0
   17896:	40 e0       	ldi	r20, 0x00	; 0
   17898:	50 e0       	ldi	r21, 0x00	; 0
   1789a:	ba 01       	movw	r22, r20
   1789c:	8c 0d       	add	r24, r12
   1789e:	9d 1d       	adc	r25, r13
                    ++errors;
   178a0:	99 db       	rcall	.-2254   	; 0x16fd4 <assign_value>
   178a2:	67 2b       	or	r22, r23
   178a4:	68 2b       	or	r22, r24
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   178a6:	69 2b       	or	r22, r25
   178a8:	19 f4       	brne	.+6      	; 0x178b0 <POSIX_Read_Config+0x79c>
   178aa:	3f ef       	ldi	r19, 0xFF	; 255
   178ac:	a3 1a       	sub	r10, r19
   178ae:	b3 0a       	sbc	r11, r19
   178b0:	cf 57       	subi	r28, 0x7F	; 127
   178b2:	df 4f       	sbci	r29, 0xFF	; 255
   178b4:	88 81       	ld	r24, Y
   178b6:	99 81       	ldd	r25, Y+1	; 0x01
   178b8:	c1 58       	subi	r28, 0x81	; 129
   178ba:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   178bc:	d2 01       	movw	r26, r4
   178be:	d0 96       	adiw	r26, 0x30	; 48
   178c0:	9c 93       	st	X, r25
   178c2:	8e 93       	st	-X, r24
   178c4:	9f 97       	sbiw	r26, 0x2f	; 47
   178c6:	d2 cc       	rjmp	.-1628   	; 0x1726c <POSIX_Read_Config+0x158>
   178c8:	67 e7       	ldi	r22, 0x77	; 119
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   178ca:	74 e1       	ldi	r23, 0x14	; 20
   178cc:	c6 01       	movw	r24, r12
   178ce:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   178d2:	00 97       	sbiw	r24, 0x00	; 0
   178d4:	f9 f0       	breq	.+62     	; 0x17914 <POSIX_Read_Config+0x800>
   178d6:	fe 01       	movw	r30, r28
   178d8:	ef 57       	subi	r30, 0x7F	; 127
   178da:	ff 4f       	sbci	r31, 0xFF	; 255
   178dc:	7f 01       	movw	r14, r30
   178de:	01 e0       	ldi	r16, 0x01	; 1
   178e0:	10 e0       	ldi	r17, 0x00	; 0
   178e2:	20 e0       	ldi	r18, 0x00	; 0
   178e4:	30 e0       	ldi	r19, 0x00	; 0
   178e6:	41 e0       	ldi	r20, 0x01	; 1
   178e8:	50 e0       	ldi	r21, 0x00	; 0
   178ea:	60 e0       	ldi	r22, 0x00	; 0
   178ec:	70 e0       	ldi	r23, 0x00	; 0
   178ee:	8c 0d       	add	r24, r12
   178f0:	9d 1d       	adc	r25, r13
                    ++errors;
   178f2:	70 db       	rcall	.-2336   	; 0x16fd4 <assign_value>
   178f4:	67 2b       	or	r22, r23
   178f6:	68 2b       	or	r22, r24
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   178f8:	69 2b       	or	r22, r25
   178fa:	19 f4       	brne	.+6      	; 0x17902 <POSIX_Read_Config+0x7ee>
   178fc:	ff ef       	ldi	r31, 0xFF	; 255
   178fe:	af 1a       	sub	r10, r31
   17900:	bf 0a       	sbc	r11, r31
   17902:	cf 57       	subi	r28, 0x7F	; 127
   17904:	df 4f       	sbci	r29, 0xFF	; 255
   17906:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   17908:	c1 58       	subi	r28, 0x81	; 129
   1790a:	d0 40       	sbci	r29, 0x00	; 0
   1790c:	d2 01       	movw	r26, r4
   1790e:	d1 96       	adiw	r26, 0x31	; 49
   17910:	8c 93       	st	X, r24
   17912:	ac cc       	rjmp	.-1704   	; 0x1726c <POSIX_Read_Config+0x158>
   17914:	67 e8       	ldi	r22, 0x87	; 135
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   17916:	74 e1       	ldi	r23, 0x14	; 20
   17918:	c6 01       	movw	r24, r12
   1791a:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   1791e:	00 97       	sbiw	r24, 0x00	; 0
   17920:	e9 f0       	breq	.+58     	; 0x1795c <POSIX_Read_Config+0x848>
   17922:	fe 01       	movw	r30, r28
   17924:	ef 57       	subi	r30, 0x7F	; 127
   17926:	ff 4f       	sbci	r31, 0xFF	; 255
   17928:	7f 01       	movw	r14, r30
   1792a:	00 e0       	ldi	r16, 0x00	; 0
   1792c:	10 e0       	ldi	r17, 0x00	; 0
   1792e:	98 01       	movw	r18, r16
   17930:	40 e0       	ldi	r20, 0x00	; 0
   17932:	50 e0       	ldi	r21, 0x00	; 0
   17934:	ba 01       	movw	r22, r20
   17936:	8c 0d       	add	r24, r12
   17938:	9d 1d       	adc	r25, r13
                    ++errors;
   1793a:	4c db       	rcall	.-2408   	; 0x16fd4 <assign_value>
   1793c:	67 2b       	or	r22, r23
   1793e:	68 2b       	or	r22, r24
                SS80p->UNIT.BURST_SIZE = val;
   17940:	69 2b       	or	r22, r25
   17942:	19 f4       	brne	.+6      	; 0x1794a <POSIX_Read_Config+0x836>
   17944:	ff ef       	ldi	r31, 0xFF	; 255
   17946:	af 1a       	sub	r10, r31
   17948:	bf 0a       	sbc	r11, r31
   1794a:	cf 57       	subi	r28, 0x7F	; 127
   1794c:	df 4f       	sbci	r29, 0xFF	; 255
   1794e:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   17950:	c1 58       	subi	r28, 0x81	; 129
   17952:	d0 40       	sbci	r29, 0x00	; 0
   17954:	d2 01       	movw	r26, r4
   17956:	d2 96       	adiw	r26, 0x32	; 50
   17958:	8c 93       	st	X, r24
   1795a:	88 cc       	rjmp	.-1776   	; 0x1726c <POSIX_Read_Config+0x158>
   1795c:	62 e9       	ldi	r22, 0x92	; 146
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1795e:	74 e1       	ldi	r23, 0x14	; 20
   17960:	c6 01       	movw	r24, r12
   17962:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17966:	00 97       	sbiw	r24, 0x00	; 0
   17968:	09 f1       	breq	.+66     	; 0x179ac <POSIX_Read_Config+0x898>
   1796a:	fe 01       	movw	r30, r28
   1796c:	ef 57       	subi	r30, 0x7F	; 127
   1796e:	ff 4f       	sbci	r31, 0xFF	; 255
   17970:	7f 01       	movw	r14, r30
   17972:	0f ef       	ldi	r16, 0xFF	; 255
   17974:	1f ef       	ldi	r17, 0xFF	; 255
   17976:	20 e0       	ldi	r18, 0x00	; 0
   17978:	30 e0       	ldi	r19, 0x00	; 0
   1797a:	40 e0       	ldi	r20, 0x00	; 0
   1797c:	50 e0       	ldi	r21, 0x00	; 0
   1797e:	ba 01       	movw	r22, r20
   17980:	8c 0d       	add	r24, r12
   17982:	9d 1d       	adc	r25, r13
                    ++errors;
   17984:	27 db       	rcall	.-2482   	; 0x16fd4 <assign_value>
   17986:	67 2b       	or	r22, r23
   17988:	68 2b       	or	r22, r24
                SS80p->UNIT.BLOCK_TIME = val;
   1798a:	69 2b       	or	r22, r25
   1798c:	19 f4       	brne	.+6      	; 0x17994 <POSIX_Read_Config+0x880>
   1798e:	ff ef       	ldi	r31, 0xFF	; 255
   17990:	af 1a       	sub	r10, r31
   17992:	bf 0a       	sbc	r11, r31
   17994:	cf 57       	subi	r28, 0x7F	; 127
   17996:	df 4f       	sbci	r29, 0xFF	; 255
   17998:	88 81       	ld	r24, Y
   1799a:	99 81       	ldd	r25, Y+1	; 0x01
   1799c:	c1 58       	subi	r28, 0x81	; 129
   1799e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   179a0:	d2 01       	movw	r26, r4
   179a2:	d4 96       	adiw	r26, 0x34	; 52
   179a4:	9c 93       	st	X, r25
   179a6:	8e 93       	st	-X, r24
   179a8:	d3 97       	sbiw	r26, 0x33	; 51
   179aa:	60 cc       	rjmp	.-1856   	; 0x1726c <POSIX_Read_Config+0x158>
   179ac:	6d e9       	ldi	r22, 0x9D	; 157
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   179ae:	74 e1       	ldi	r23, 0x14	; 20
   179b0:	c6 01       	movw	r24, r12
   179b2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   179b6:	00 97       	sbiw	r24, 0x00	; 0
   179b8:	09 f1       	breq	.+66     	; 0x179fc <POSIX_Read_Config+0x8e8>
   179ba:	fe 01       	movw	r30, r28
   179bc:	ef 57       	subi	r30, 0x7F	; 127
   179be:	ff 4f       	sbci	r31, 0xFF	; 255
   179c0:	7f 01       	movw	r14, r30
   179c2:	0f ef       	ldi	r16, 0xFF	; 255
   179c4:	1f ef       	ldi	r17, 0xFF	; 255
   179c6:	20 e0       	ldi	r18, 0x00	; 0
   179c8:	30 e0       	ldi	r19, 0x00	; 0
   179ca:	40 e0       	ldi	r20, 0x00	; 0
   179cc:	50 e0       	ldi	r21, 0x00	; 0
   179ce:	ba 01       	movw	r22, r20
   179d0:	8c 0d       	add	r24, r12
   179d2:	9d 1d       	adc	r25, r13
                    ++errors;
   179d4:	ff da       	rcall	.-2562   	; 0x16fd4 <assign_value>
   179d6:	67 2b       	or	r22, r23
   179d8:	68 2b       	or	r22, r24
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   179da:	69 2b       	or	r22, r25
   179dc:	19 f4       	brne	.+6      	; 0x179e4 <POSIX_Read_Config+0x8d0>
   179de:	ff ef       	ldi	r31, 0xFF	; 255
   179e0:	af 1a       	sub	r10, r31
   179e2:	bf 0a       	sbc	r11, r31
   179e4:	cf 57       	subi	r28, 0x7F	; 127
   179e6:	df 4f       	sbci	r29, 0xFF	; 255
   179e8:	88 81       	ld	r24, Y
   179ea:	99 81       	ldd	r25, Y+1	; 0x01
   179ec:	c1 58       	subi	r28, 0x81	; 129
   179ee:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   179f0:	d2 01       	movw	r26, r4
   179f2:	d6 96       	adiw	r26, 0x36	; 54
   179f4:	9c 93       	st	X, r25
   179f6:	8e 93       	st	-X, r24
   179f8:	d5 97       	sbiw	r26, 0x35	; 53
   179fa:	38 cc       	rjmp	.-1936   	; 0x1726c <POSIX_Read_Config+0x158>
   179fc:	65 eb       	ldi	r22, 0xB5	; 181
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   179fe:	74 e1       	ldi	r23, 0x14	; 20
   17a00:	c6 01       	movw	r24, r12
   17a02:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17a06:	00 97       	sbiw	r24, 0x00	; 0
   17a08:	09 f1       	breq	.+66     	; 0x17a4c <POSIX_Read_Config+0x938>
   17a0a:	fe 01       	movw	r30, r28
   17a0c:	ef 57       	subi	r30, 0x7F	; 127
   17a0e:	ff 4f       	sbci	r31, 0xFF	; 255
   17a10:	7f 01       	movw	r14, r30
   17a12:	0f ef       	ldi	r16, 0xFF	; 255
   17a14:	1f ef       	ldi	r17, 0xFF	; 255
   17a16:	20 e0       	ldi	r18, 0x00	; 0
   17a18:	30 e0       	ldi	r19, 0x00	; 0
   17a1a:	40 e0       	ldi	r20, 0x00	; 0
   17a1c:	50 e0       	ldi	r21, 0x00	; 0
   17a1e:	ba 01       	movw	r22, r20
   17a20:	8c 0d       	add	r24, r12
   17a22:	9d 1d       	adc	r25, r13
                    ++errors;
   17a24:	d7 da       	rcall	.-2642   	; 0x16fd4 <assign_value>
   17a26:	67 2b       	or	r22, r23
   17a28:	68 2b       	or	r22, r24
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   17a2a:	69 2b       	or	r22, r25
   17a2c:	19 f4       	brne	.+6      	; 0x17a34 <POSIX_Read_Config+0x920>
   17a2e:	ff ef       	ldi	r31, 0xFF	; 255
   17a30:	af 1a       	sub	r10, r31
   17a32:	bf 0a       	sbc	r11, r31
   17a34:	cf 57       	subi	r28, 0x7F	; 127
   17a36:	df 4f       	sbci	r29, 0xFF	; 255
   17a38:	88 81       	ld	r24, Y
   17a3a:	99 81       	ldd	r25, Y+1	; 0x01
   17a3c:	c1 58       	subi	r28, 0x81	; 129
   17a3e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   17a40:	d2 01       	movw	r26, r4
   17a42:	d8 96       	adiw	r26, 0x38	; 56
   17a44:	9c 93       	st	X, r25
   17a46:	8e 93       	st	-X, r24
   17a48:	d7 97       	sbiw	r26, 0x37	; 55
   17a4a:	10 cc       	rjmp	.-2016   	; 0x1726c <POSIX_Read_Config+0x158>
   17a4c:	68 ec       	ldi	r22, 0xC8	; 200
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17a4e:	74 e1       	ldi	r23, 0x14	; 20
   17a50:	c6 01       	movw	r24, r12
   17a52:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17a56:	00 97       	sbiw	r24, 0x00	; 0
   17a58:	09 f1       	breq	.+66     	; 0x17a9c <POSIX_Read_Config+0x988>
   17a5a:	fe 01       	movw	r30, r28
   17a5c:	ef 57       	subi	r30, 0x7F	; 127
   17a5e:	ff 4f       	sbci	r31, 0xFF	; 255
   17a60:	7f 01       	movw	r14, r30
   17a62:	0f ef       	ldi	r16, 0xFF	; 255
   17a64:	1f ef       	ldi	r17, 0xFF	; 255
   17a66:	20 e0       	ldi	r18, 0x00	; 0
   17a68:	30 e0       	ldi	r19, 0x00	; 0
   17a6a:	40 e0       	ldi	r20, 0x00	; 0
   17a6c:	50 e0       	ldi	r21, 0x00	; 0
   17a6e:	ba 01       	movw	r22, r20
   17a70:	8c 0d       	add	r24, r12
   17a72:	9d 1d       	adc	r25, r13
                    ++errors;
   17a74:	af da       	rcall	.-2722   	; 0x16fd4 <assign_value>
   17a76:	67 2b       	or	r22, r23
   17a78:	68 2b       	or	r22, r24
                SS80p->UNIT.ACCESS_TIME = val;
   17a7a:	69 2b       	or	r22, r25
   17a7c:	19 f4       	brne	.+6      	; 0x17a84 <POSIX_Read_Config+0x970>
   17a7e:	ff ef       	ldi	r31, 0xFF	; 255
   17a80:	af 1a       	sub	r10, r31
   17a82:	bf 0a       	sbc	r11, r31
   17a84:	cf 57       	subi	r28, 0x7F	; 127
   17a86:	df 4f       	sbci	r29, 0xFF	; 255
   17a88:	88 81       	ld	r24, Y
   17a8a:	99 81       	ldd	r25, Y+1	; 0x01
   17a8c:	c1 58       	subi	r28, 0x81	; 129
   17a8e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   17a90:	d2 01       	movw	r26, r4
   17a92:	da 96       	adiw	r26, 0x3a	; 58
   17a94:	9c 93       	st	X, r25
   17a96:	8e 93       	st	-X, r24
   17a98:	d9 97       	sbiw	r26, 0x39	; 57
   17a9a:	e8 cb       	rjmp	.-2096   	; 0x1726c <POSIX_Read_Config+0x158>
   17a9c:	64 ed       	ldi	r22, 0xD4	; 212
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17a9e:	74 e1       	ldi	r23, 0x14	; 20
   17aa0:	c6 01       	movw	r24, r12
   17aa2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17aa6:	00 97       	sbiw	r24, 0x00	; 0
   17aa8:	f1 f0       	breq	.+60     	; 0x17ae6 <POSIX_Read_Config+0x9d2>
   17aaa:	fe 01       	movw	r30, r28
   17aac:	ef 57       	subi	r30, 0x7F	; 127
   17aae:	ff 4f       	sbci	r31, 0xFF	; 255
   17ab0:	7f 01       	movw	r14, r30
   17ab2:	0f ef       	ldi	r16, 0xFF	; 255
   17ab4:	10 e0       	ldi	r17, 0x00	; 0
   17ab6:	20 e0       	ldi	r18, 0x00	; 0
   17ab8:	30 e0       	ldi	r19, 0x00	; 0
   17aba:	40 e0       	ldi	r20, 0x00	; 0
   17abc:	50 e0       	ldi	r21, 0x00	; 0
   17abe:	ba 01       	movw	r22, r20
   17ac0:	8c 0d       	add	r24, r12
                    ++errors;
   17ac2:	9d 1d       	adc	r25, r13
   17ac4:	87 da       	rcall	.-2802   	; 0x16fd4 <assign_value>
   17ac6:	67 2b       	or	r22, r23
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   17ac8:	68 2b       	or	r22, r24
   17aca:	69 2b       	or	r22, r25
   17acc:	19 f4       	brne	.+6      	; 0x17ad4 <POSIX_Read_Config+0x9c0>
   17ace:	ff ef       	ldi	r31, 0xFF	; 255
   17ad0:	af 1a       	sub	r10, r31
   17ad2:	bf 0a       	sbc	r11, r31
   17ad4:	cf 57       	subi	r28, 0x7F	; 127
   17ad6:	df 4f       	sbci	r29, 0xFF	; 255
   17ad8:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   17ada:	c1 58       	subi	r28, 0x81	; 129
   17adc:	d0 40       	sbci	r29, 0x00	; 0
   17ade:	d2 01       	movw	r26, r4
   17ae0:	db 96       	adiw	r26, 0x3b	; 59
   17ae2:	8c 93       	st	X, r24
   17ae4:	c3 cb       	rjmp	.-2170   	; 0x1726c <POSIX_Read_Config+0x158>
   17ae6:	67 ee       	ldi	r22, 0xE7	; 231
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17ae8:	74 e1       	ldi	r23, 0x14	; 20
   17aea:	c6 01       	movw	r24, r12
   17aec:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17af0:	00 97       	sbiw	r24, 0x00	; 0
   17af2:	f1 f0       	breq	.+60     	; 0x17b30 <POSIX_Read_Config+0xa1c>
   17af4:	fe 01       	movw	r30, r28
   17af6:	ef 57       	subi	r30, 0x7F	; 127
   17af8:	ff 4f       	sbci	r31, 0xFF	; 255
   17afa:	7f 01       	movw	r14, r30
   17afc:	0f ef       	ldi	r16, 0xFF	; 255
   17afe:	10 e0       	ldi	r17, 0x00	; 0
   17b00:	20 e0       	ldi	r18, 0x00	; 0
   17b02:	30 e0       	ldi	r19, 0x00	; 0
   17b04:	40 e0       	ldi	r20, 0x00	; 0
   17b06:	50 e0       	ldi	r21, 0x00	; 0
   17b08:	ba 01       	movw	r22, r20
   17b0a:	8c 0d       	add	r24, r12
                    ++errors;
   17b0c:	9d 1d       	adc	r25, r13
   17b0e:	62 da       	rcall	.-2876   	; 0x16fd4 <assign_value>
   17b10:	67 2b       	or	r22, r23
                SS80p->UNIT.FIXED_VOLUMES = val;
   17b12:	68 2b       	or	r22, r24
   17b14:	69 2b       	or	r22, r25
   17b16:	19 f4       	brne	.+6      	; 0x17b1e <POSIX_Read_Config+0xa0a>
   17b18:	ff ef       	ldi	r31, 0xFF	; 255
   17b1a:	af 1a       	sub	r10, r31
   17b1c:	bf 0a       	sbc	r11, r31
   17b1e:	cf 57       	subi	r28, 0x7F	; 127
   17b20:	df 4f       	sbci	r29, 0xFF	; 255
   17b22:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   17b24:	c1 58       	subi	r28, 0x81	; 129
   17b26:	d0 40       	sbci	r29, 0x00	; 0
   17b28:	d2 01       	movw	r26, r4
   17b2a:	dc 96       	adiw	r26, 0x3c	; 60
   17b2c:	8c 93       	st	X, r24
   17b2e:	9e cb       	rjmp	.-2244   	; 0x1726c <POSIX_Read_Config+0x158>
   17b30:	65 ef       	ldi	r22, 0xF5	; 245
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17b32:	74 e1       	ldi	r23, 0x14	; 20
   17b34:	c6 01       	movw	r24, r12
   17b36:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17b3a:	00 97       	sbiw	r24, 0x00	; 0
   17b3c:	f1 f0       	breq	.+60     	; 0x17b7a <POSIX_Read_Config+0xa66>
   17b3e:	fe 01       	movw	r30, r28
   17b40:	ef 57       	subi	r30, 0x7F	; 127
   17b42:	ff 4f       	sbci	r31, 0xFF	; 255
   17b44:	7f 01       	movw	r14, r30
   17b46:	0f ef       	ldi	r16, 0xFF	; 255
   17b48:	10 e0       	ldi	r17, 0x00	; 0
   17b4a:	20 e0       	ldi	r18, 0x00	; 0
   17b4c:	30 e0       	ldi	r19, 0x00	; 0
   17b4e:	40 e0       	ldi	r20, 0x00	; 0
   17b50:	50 e0       	ldi	r21, 0x00	; 0
   17b52:	ba 01       	movw	r22, r20
   17b54:	8c 0d       	add	r24, r12
   17b56:	9d 1d       	adc	r25, r13
                    ++errors;
   17b58:	3d da       	rcall	.-2950   	; 0x16fd4 <assign_value>
   17b5a:	67 2b       	or	r22, r23
   17b5c:	68 2b       	or	r22, r24
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   17b5e:	69 2b       	or	r22, r25
   17b60:	19 f4       	brne	.+6      	; 0x17b68 <POSIX_Read_Config+0xa54>
   17b62:	ff ef       	ldi	r31, 0xFF	; 255
   17b64:	af 1a       	sub	r10, r31
   17b66:	bf 0a       	sbc	r11, r31
   17b68:	cf 57       	subi	r28, 0x7F	; 127
   17b6a:	df 4f       	sbci	r29, 0xFF	; 255
   17b6c:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   17b6e:	c1 58       	subi	r28, 0x81	; 129
   17b70:	d0 40       	sbci	r29, 0x00	; 0
   17b72:	d2 01       	movw	r26, r4
   17b74:	dd 96       	adiw	r26, 0x3d	; 61
   17b76:	8c 93       	st	X, r24
   17b78:	79 cb       	rjmp	.-2318   	; 0x1726c <POSIX_Read_Config+0x158>
   17b7a:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17b7e:	8f 93       	push	r24
   17b80:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   17b84:	8f 93       	push	r24
   17b86:	df 92       	push	r13
   17b88:	cf 92       	push	r12
   17b8a:	87 eb       	ldi	r24, 0xB7	; 183
   17b8c:	9e e2       	ldi	r25, 0x2E	; 46
   17b8e:	96 cc       	rjmp	.-1748   	; 0x174bc <POSIX_Read_Config+0x3a8>
   17b90:	67 e0       	ldi	r22, 0x07	; 7
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17b92:	75 e1       	ldi	r23, 0x15	; 21
   17b94:	c6 01       	movw	r24, r12
   17b96:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17b9a:	00 97       	sbiw	r24, 0x00	; 0
   17b9c:	f9 f0       	breq	.+62     	; 0x17bdc <POSIX_Read_Config+0xac8>
   17b9e:	9e 01       	movw	r18, r28
   17ba0:	2f 57       	subi	r18, 0x7F	; 127
   17ba2:	3f 4f       	sbci	r19, 0xFF	; 255
   17ba4:	79 01       	movw	r14, r18
   17ba6:	0f ef       	ldi	r16, 0xFF	; 255
   17ba8:	1f ef       	ldi	r17, 0xFF	; 255
   17baa:	98 01       	movw	r18, r16
   17bac:	40 e0       	ldi	r20, 0x00	; 0
   17bae:	50 e0       	ldi	r21, 0x00	; 0
   17bb0:	ba 01       	movw	r22, r20
   17bb2:	8c 0d       	add	r24, r12
                    ++errors;
   17bb4:	9d 1d       	adc	r25, r13
   17bb6:	0e da       	rcall	.-3044   	; 0x16fd4 <assign_value>
   17bb8:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_CYLINDER = val;
   17bba:	68 2b       	or	r22, r24
   17bbc:	69 2b       	or	r22, r25
   17bbe:	19 f4       	brne	.+6      	; 0x17bc6 <POSIX_Read_Config+0xab2>
   17bc0:	3f ef       	ldi	r19, 0xFF	; 255
   17bc2:	a3 1a       	sub	r10, r19
   17bc4:	b3 0a       	sbc	r11, r19
   17bc6:	cf 57       	subi	r28, 0x7F	; 127
   17bc8:	df 4f       	sbci	r29, 0xFF	; 255
   17bca:	88 81       	ld	r24, Y
   17bcc:	99 81       	ldd	r25, Y+1	; 0x01
   17bce:	aa 81       	ldd	r26, Y+2	; 0x02
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   17bd0:	bb 81       	ldd	r27, Y+3	; 0x03
   17bd2:	c1 58       	subi	r28, 0x81	; 129
   17bd4:	d0 40       	sbci	r29, 0x00	; 0
   17bd6:	f2 01       	movw	r30, r4
   17bd8:	fe 96       	adiw	r30, 0x3e	; 62
   17bda:	73 c0       	rjmp	.+230    	; 0x17cc2 <POSIX_Read_Config+0xbae>
   17bdc:	64 e1       	ldi	r22, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17bde:	75 e1       	ldi	r23, 0x15	; 21
   17be0:	c6 01       	movw	r24, r12
   17be2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17be6:	00 97       	sbiw	r24, 0x00	; 0
   17be8:	f1 f0       	breq	.+60     	; 0x17c26 <POSIX_Read_Config+0xb12>
   17bea:	de 01       	movw	r26, r28
   17bec:	af 57       	subi	r26, 0x7F	; 127
   17bee:	bf 4f       	sbci	r27, 0xFF	; 255
   17bf0:	7d 01       	movw	r14, r26
   17bf2:	0f ef       	ldi	r16, 0xFF	; 255
   17bf4:	10 e0       	ldi	r17, 0x00	; 0
   17bf6:	20 e0       	ldi	r18, 0x00	; 0
   17bf8:	30 e0       	ldi	r19, 0x00	; 0
   17bfa:	40 e0       	ldi	r20, 0x00	; 0
   17bfc:	50 e0       	ldi	r21, 0x00	; 0
   17bfe:	ba 01       	movw	r22, r20
   17c00:	8c 0d       	add	r24, r12
                    ++errors;
   17c02:	9d 1d       	adc	r25, r13
   17c04:	e7 d9       	rcall	.-3122   	; 0x16fd4 <assign_value>
   17c06:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_HEAD = val;
   17c08:	68 2b       	or	r22, r24
   17c0a:	69 2b       	or	r22, r25
   17c0c:	19 f4       	brne	.+6      	; 0x17c14 <POSIX_Read_Config+0xb00>
   17c0e:	bf ef       	ldi	r27, 0xFF	; 255
   17c10:	ab 1a       	sub	r10, r27
   17c12:	bb 0a       	sbc	r11, r27
   17c14:	cf 57       	subi	r28, 0x7F	; 127
   17c16:	df 4f       	sbci	r29, 0xFF	; 255
   17c18:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   17c1a:	c1 58       	subi	r28, 0x81	; 129
   17c1c:	d0 40       	sbci	r29, 0x00	; 0
   17c1e:	f2 01       	movw	r30, r4
   17c20:	ee 5b       	subi	r30, 0xBE	; 190
   17c22:	ff 4f       	sbci	r31, 0xFF	; 255
   17c24:	18 c1       	rjmp	.+560    	; 0x17e56 <POSIX_Read_Config+0xd42>
   17c26:	6d e1       	ldi	r22, 0x1D	; 29
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17c28:	75 e1       	ldi	r23, 0x15	; 21
   17c2a:	c6 01       	movw	r24, r12
   17c2c:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17c30:	00 97       	sbiw	r24, 0x00	; 0
   17c32:	09 f1       	breq	.+66     	; 0x17c76 <POSIX_Read_Config+0xb62>
   17c34:	fe 01       	movw	r30, r28
   17c36:	ef 57       	subi	r30, 0x7F	; 127
   17c38:	ff 4f       	sbci	r31, 0xFF	; 255
   17c3a:	7f 01       	movw	r14, r30
   17c3c:	0f ef       	ldi	r16, 0xFF	; 255
   17c3e:	1f ef       	ldi	r17, 0xFF	; 255
   17c40:	20 e0       	ldi	r18, 0x00	; 0
   17c42:	30 e0       	ldi	r19, 0x00	; 0
   17c44:	40 e0       	ldi	r20, 0x00	; 0
   17c46:	50 e0       	ldi	r21, 0x00	; 0
   17c48:	ba 01       	movw	r22, r20
   17c4a:	8c 0d       	add	r24, r12
                    ++errors;
   17c4c:	9d 1d       	adc	r25, r13
   17c4e:	c2 d9       	rcall	.-3196   	; 0x16fd4 <assign_value>
   17c50:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_SECTOR = val;
   17c52:	68 2b       	or	r22, r24
   17c54:	69 2b       	or	r22, r25
   17c56:	19 f4       	brne	.+6      	; 0x17c5e <POSIX_Read_Config+0xb4a>
   17c58:	ff ef       	ldi	r31, 0xFF	; 255
   17c5a:	af 1a       	sub	r10, r31
   17c5c:	bf 0a       	sbc	r11, r31
   17c5e:	cf 57       	subi	r28, 0x7F	; 127
   17c60:	df 4f       	sbci	r29, 0xFF	; 255
   17c62:	88 81       	ld	r24, Y
   17c64:	99 81       	ldd	r25, Y+1	; 0x01
   17c66:	c1 58       	subi	r28, 0x81	; 129
   17c68:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   17c6a:	f2 01       	movw	r30, r4
   17c6c:	ed 5b       	subi	r30, 0xBD	; 189
   17c6e:	ff 4f       	sbci	r31, 0xFF	; 255
   17c70:	91 83       	std	Z+1, r25	; 0x01
   17c72:	80 83       	st	Z, r24
   17c74:	fb ca       	rjmp	.-2570   	; 0x1726c <POSIX_Read_Config+0x158>
   17c76:	68 e2       	ldi	r22, 0x28	; 40
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17c78:	75 e1       	ldi	r23, 0x15	; 21
   17c7a:	c6 01       	movw	r24, r12
   17c7c:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17c80:	00 97       	sbiw	r24, 0x00	; 0
   17c82:	21 f1       	breq	.+72     	; 0x17ccc <POSIX_Read_Config+0xbb8>
   17c84:	9e 01       	movw	r18, r28
   17c86:	2f 57       	subi	r18, 0x7F	; 127
   17c88:	3f 4f       	sbci	r19, 0xFF	; 255
   17c8a:	79 01       	movw	r14, r18
   17c8c:	0f ef       	ldi	r16, 0xFF	; 255
   17c8e:	1f ef       	ldi	r17, 0xFF	; 255
   17c90:	98 01       	movw	r18, r16
   17c92:	40 e0       	ldi	r20, 0x00	; 0
   17c94:	50 e0       	ldi	r21, 0x00	; 0
   17c96:	ba 01       	movw	r22, r20
   17c98:	8c 0d       	add	r24, r12
                    ++errors;
   17c9a:	9d 1d       	adc	r25, r13
   17c9c:	9b d9       	rcall	.-3274   	; 0x16fd4 <assign_value>
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   17c9e:	67 2b       	or	r22, r23
   17ca0:	68 2b       	or	r22, r24
   17ca2:	69 2b       	or	r22, r25
   17ca4:	19 f4       	brne	.+6      	; 0x17cac <POSIX_Read_Config+0xb98>
   17ca6:	3f ef       	ldi	r19, 0xFF	; 255
   17ca8:	a3 1a       	sub	r10, r19
   17caa:	b3 0a       	sbc	r11, r19
   17cac:	cf 57       	subi	r28, 0x7F	; 127
   17cae:	df 4f       	sbci	r29, 0xFF	; 255
   17cb0:	88 81       	ld	r24, Y
   17cb2:	99 81       	ldd	r25, Y+1	; 0x01
   17cb4:	aa 81       	ldd	r26, Y+2	; 0x02
   17cb6:	bb 81       	ldd	r27, Y+3	; 0x03
   17cb8:	c1 58       	subi	r28, 0x81	; 129
   17cba:	d0 40       	sbci	r29, 0x00	; 0
   17cbc:	f2 01       	movw	r30, r4
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   17cbe:	eb 5b       	subi	r30, 0xBB	; 187
   17cc0:	ff 4f       	sbci	r31, 0xFF	; 255
   17cc2:	80 83       	st	Z, r24
   17cc4:	91 83       	std	Z+1, r25	; 0x01
   17cc6:	a2 83       	std	Z+2, r26	; 0x02
   17cc8:	b3 83       	std	Z+3, r27	; 0x03
   17cca:	d0 ca       	rjmp	.-2656   	; 0x1726c <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17ccc:	6c ed       	ldi	r22, 0xDC	; 220
   17cce:	74 e1       	ldi	r23, 0x14	; 20
   17cd0:	c6 01       	movw	r24, r12
   17cd2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17cd6:	00 97       	sbiw	r24, 0x00	; 0
   17cd8:	f1 f0       	breq	.+60     	; 0x17d16 <POSIX_Read_Config+0xc02>
   17cda:	de 01       	movw	r26, r28
   17cdc:	af 57       	subi	r26, 0x7F	; 127
   17cde:	bf 4f       	sbci	r27, 0xFF	; 255
   17ce0:	7d 01       	movw	r14, r26
   17ce2:	0f ef       	ldi	r16, 0xFF	; 255
   17ce4:	10 e0       	ldi	r17, 0x00	; 0
   17ce6:	20 e0       	ldi	r18, 0x00	; 0
   17ce8:	30 e0       	ldi	r19, 0x00	; 0
   17cea:	40 e0       	ldi	r20, 0x00	; 0
   17cec:	50 e0       	ldi	r21, 0x00	; 0
   17cee:	ba 01       	movw	r22, r20
                    ++errors;
   17cf0:	8c 0d       	add	r24, r12
   17cf2:	9d 1d       	adc	r25, r13
                SS80p->VOLUME.INTERLEAVE = val;
   17cf4:	6f d9       	rcall	.-3362   	; 0x16fd4 <assign_value>
   17cf6:	67 2b       	or	r22, r23
   17cf8:	68 2b       	or	r22, r24
   17cfa:	69 2b       	or	r22, r25
   17cfc:	19 f4       	brne	.+6      	; 0x17d04 <POSIX_Read_Config+0xbf0>
   17cfe:	bf ef       	ldi	r27, 0xFF	; 255
   17d00:	ab 1a       	sub	r10, r27
   17d02:	bb 0a       	sbc	r11, r27
   17d04:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   17d06:	df 4f       	sbci	r29, 0xFF	; 255
   17d08:	88 81       	ld	r24, Y
   17d0a:	c1 58       	subi	r28, 0x81	; 129
   17d0c:	d0 40       	sbci	r29, 0x00	; 0
   17d0e:	f2 01       	movw	r30, r4
   17d10:	e7 5b       	subi	r30, 0xB7	; 183
   17d12:	ff 4f       	sbci	r31, 0xFF	; 255
   17d14:	a0 c0       	rjmp	.+320    	; 0x17e56 <POSIX_Read_Config+0xd42>
   17d16:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17d1a:	8f 93       	push	r24
   17d1c:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17d20:	8f 93       	push	r24
                ++errors;
   17d22:	df 92       	push	r13
   17d24:	cf 92       	push	r12
   17d26:	89 e8       	ldi	r24, 0x89	; 137
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   17d28:	9e e2       	ldi	r25, 0x2E	; 46
   17d2a:	1f 92       	push	r1
   17d2c:	9f 93       	push	r25
   17d2e:	8f 93       	push	r24
   17d30:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   17d34:	ef ef       	ldi	r30, 0xFF	; 255
            {
                push_state(state);
   17d36:	ae 1a       	sub	r10, r30
   17d38:	be 0a       	sbc	r11, r30
   17d3a:	06 c2       	rjmp	.+1036   	; 0x18148 <POSIX_Read_Config+0x1034>
   17d3c:	65 e1       	ldi	r22, 0x15	; 21
                state = AMIGO_HEADER;
   17d3e:	74 e1       	ldi	r23, 0x14	; 20
   17d40:	c6 01       	movw	r24, r12
   17d42:	0e 94 26 32 	call	0x644c	; 0x644c <token>
            }
            else if(token(ptr,"CONFIG"))
   17d46:	89 2b       	or	r24, r25
   17d48:	39 f0       	breq	.+14     	; 0x17d58 <POSIX_Read_Config+0xc44>
   17d4a:	87 e0       	ldi	r24, 0x07	; 7
   17d4c:	90 e0       	ldi	r25, 0x00	; 0
   17d4e:	12 d9       	rcall	.-3548   	; 0x16f74 <push_state>
   17d50:	28 e0       	ldi	r18, 0x08	; 8
   17d52:	82 2e       	mov	r8, r18
            {
                push_state(state);
   17d54:	91 2c       	mov	r9, r1
   17d56:	8a ca       	rjmp	.-2796   	; 0x1726c <POSIX_Read_Config+0x158>
   17d58:	6e e0       	ldi	r22, 0x0E	; 14
   17d5a:	74 e1       	ldi	r23, 0x14	; 20
                state = AMIGO_CONFIG;
   17d5c:	c6 01       	movw	r24, r12
   17d5e:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17d62:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"GEOMETRY"))
   17d64:	39 f0       	breq	.+14     	; 0x17d74 <POSIX_Read_Config+0xc60>
   17d66:	87 e0       	ldi	r24, 0x07	; 7
   17d68:	90 e0       	ldi	r25, 0x00	; 0
   17d6a:	04 d9       	rcall	.-3576   	; 0x16f74 <push_state>
   17d6c:	99 e0       	ldi	r25, 0x09	; 9
   17d6e:	89 2e       	mov	r8, r25
   17d70:	91 2c       	mov	r9, r1
            {
                push_state(state);
   17d72:	7c ca       	rjmp	.-2824   	; 0x1726c <POSIX_Read_Config+0x158>
   17d74:	69 e3       	ldi	r22, 0x39	; 57
   17d76:	75 e1       	ldi	r23, 0x15	; 21
   17d78:	c6 01       	movw	r24, r12
                state = AMIGO_GEOMETRY;
   17d7a:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17d7e:	89 2b       	or	r24, r25
   17d80:	39 f0       	breq	.+14     	; 0x17d90 <POSIX_Read_Config+0xc7c>
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   17d82:	87 e0       	ldi	r24, 0x07	; 7
   17d84:	90 e0       	ldi	r25, 0x00	; 0
   17d86:	f6 d8       	rcall	.-3604   	; 0x16f74 <push_state>
   17d88:	8a e0       	ldi	r24, 0x0A	; 10
   17d8a:	88 2e       	mov	r8, r24
   17d8c:	91 2c       	mov	r9, r1
   17d8e:	6e ca       	rjmp	.-2852   	; 0x1726c <POSIX_Read_Config+0x158>
   17d90:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17d94:	8f 93       	push	r24
   17d96:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17d9a:	8f 93       	push	r24
   17d9c:	df 92       	push	r13
   17d9e:	cf 92       	push	r12
   17da0:	1f 92       	push	r1
   17da2:	c7 56       	subi	r28, 0x67	; 103
   17da4:	df 4f       	sbci	r29, 0xFF	; 255
   17da6:	38 81       	ld	r19, Y
   17da8:	c9 59       	subi	r28, 0x99	; 153
   17daa:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   17dac:	3f 93       	push	r19
   17dae:	c8 56       	subi	r28, 0x68	; 104
   17db0:	df 4f       	sbci	r29, 0xFF	; 255
   17db2:	48 81       	ld	r20, Y
   17db4:	c8 59       	subi	r28, 0x98	; 152
   17db6:	d0 40       	sbci	r29, 0x00	; 0
   17db8:	c1 c1       	rjmp	.+898    	; 0x1813c <POSIX_Read_Config+0x1028>
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17dba:	62 e4       	ldi	r22, 0x42	; 66
   17dbc:	75 e1       	ldi	r23, 0x15	; 21
   17dbe:	c6 01       	movw	r24, r12
   17dc0:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17dc4:	00 97       	sbiw	r24, 0x00	; 0
   17dc6:	d1 f0       	breq	.+52     	; 0x17dfc <POSIX_Read_Config+0xce8>
   17dc8:	20 91 55 19 	lds	r18, 0x1955	; 0x801955 <lines+0x1>
   17dcc:	2f 93       	push	r18
   17dce:	20 91 54 19 	lds	r18, 0x1954	; 0x801954 <lines>
   17dd2:	2f 93       	push	r18
   17dd4:	c8 0e       	add	r12, r24
   17dd6:	d9 1e       	adc	r13, r25
   17dd8:	df 92       	push	r13
   17dda:	cf 92       	push	r12
   17ddc:	1f 92       	push	r1
   17dde:	ca 56       	subi	r28, 0x6A	; 106
   17de0:	df 4f       	sbci	r29, 0xFF	; 255
   17de2:	b8 81       	ld	r27, Y
   17de4:	c6 59       	subi	r28, 0x96	; 150
   17de6:	d0 40       	sbci	r29, 0x00	; 0
   17de8:	bf 93       	push	r27
   17dea:	cb 56       	subi	r28, 0x6B	; 107
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   17dec:	df 4f       	sbci	r29, 0xFF	; 255
   17dee:	e8 81       	ld	r30, Y
   17df0:	c5 59       	subi	r28, 0x95	; 149
   17df2:	d0 40       	sbci	r29, 0x00	; 0
   17df4:	ef 93       	push	r30
   17df6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   17dfa:	a6 c1       	rjmp	.+844    	; 0x18148 <POSIX_Read_Config+0x1034>
   17dfc:	66 e0       	ldi	r22, 0x06	; 6
   17dfe:	74 e1       	ldi	r23, 0x14	; 20
   17e00:	c6 01       	movw	r24, r12
   17e02:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17e06:	00 97       	sbiw	r24, 0x00	; 0
   17e08:	41 f1       	breq	.+80     	; 0x17e5a <POSIX_Read_Config+0xd46>
   17e0a:	de 01       	movw	r26, r28
   17e0c:	af 57       	subi	r26, 0x7F	; 127
   17e0e:	bf 4f       	sbci	r27, 0xFF	; 255
   17e10:	7d 01       	movw	r14, r26
   17e12:	0e e0       	ldi	r16, 0x0E	; 14
   17e14:	10 e0       	ldi	r17, 0x00	; 0
   17e16:	20 e0       	ldi	r18, 0x00	; 0
   17e18:	30 e0       	ldi	r19, 0x00	; 0
   17e1a:	40 e0       	ldi	r20, 0x00	; 0
   17e1c:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17e1e:	ba 01       	movw	r22, r20
   17e20:	8c 0d       	add	r24, r12
   17e22:	9d 1d       	adc	r25, r13
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   17e24:	d7 d8       	rcall	.-3666   	; 0x16fd4 <assign_value>
   17e26:	67 2b       	or	r22, r23
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17e28:	68 2b       	or	r22, r24
   17e2a:	69 2b       	or	r22, r25
   17e2c:	29 f4       	brne	.+10     	; 0x17e38 <POSIX_Read_Config+0xd24>
   17e2e:	bf ef       	ldi	r27, 0xFF	; 255
   17e30:	ab 1a       	sub	r10, r27
                Devices[index].ADDRESS = tmp;
   17e32:	bb 0a       	sbc	r11, r27
   17e34:	8f ef       	ldi	r24, 0xFF	; 255
   17e36:	05 c0       	rjmp	.+10     	; 0x17e42 <POSIX_Read_Config+0xd2e>
   17e38:	cf 57       	subi	r28, 0x7F	; 127
   17e3a:	df 4f       	sbci	r29, 0xFF	; 255
   17e3c:	88 81       	ld	r24, Y
   17e3e:	c1 58       	subi	r28, 0x81	; 129
   17e40:	d0 40       	sbci	r29, 0x00	; 0
   17e42:	97 e0       	ldi	r25, 0x07	; 7
                AMIGOp->HEADER.ADDRESS = tmp;
   17e44:	96 9d       	mul	r25, r6
   17e46:	f0 01       	movw	r30, r0
   17e48:	97 9d       	mul	r25, r7
            }
            else if( (ind = token(ptr,"PPR")) )
   17e4a:	f0 0d       	add	r31, r0
   17e4c:	11 24       	eor	r1, r1
   17e4e:	e1 55       	subi	r30, 0x51	; 81
   17e50:	f1 4e       	sbci	r31, 0xE1	; 225
   17e52:	81 83       	std	Z+1, r24	; 0x01
   17e54:	f1 01       	movw	r30, r2
   17e56:	80 83       	st	Z, r24
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   17e58:	09 ca       	rjmp	.-3054   	; 0x1726c <POSIX_Read_Config+0x158>
   17e5a:	63 e3       	ldi	r22, 0x33	; 51
   17e5c:	74 e1       	ldi	r23, 0x14	; 20
   17e5e:	c6 01       	movw	r24, r12
   17e60:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17e64:	00 97       	sbiw	r24, 0x00	; 0
   17e66:	39 f1       	breq	.+78     	; 0x17eb6 <POSIX_Read_Config+0xda2>
   17e68:	9e 01       	movw	r18, r28
   17e6a:	2f 57       	subi	r18, 0x7F	; 127
   17e6c:	3f 4f       	sbci	r19, 0xFF	; 255
   17e6e:	79 01       	movw	r14, r18
   17e70:	07 e0       	ldi	r16, 0x07	; 7
   17e72:	10 e0       	ldi	r17, 0x00	; 0
   17e74:	20 e0       	ldi	r18, 0x00	; 0
   17e76:	30 e0       	ldi	r19, 0x00	; 0
   17e78:	40 e0       	ldi	r20, 0x00	; 0
   17e7a:	50 e0       	ldi	r21, 0x00	; 0
   17e7c:	ba 01       	movw	r22, r20
                    ++errors;
   17e7e:	8c 0d       	add	r24, r12
   17e80:	9d 1d       	adc	r25, r13
   17e82:	a8 d8       	rcall	.-3760   	; 0x16fd4 <assign_value>
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17e84:	67 2b       	or	r22, r23
   17e86:	68 2b       	or	r22, r24
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17e88:	69 2b       	or	r22, r25
   17e8a:	29 f4       	brne	.+10     	; 0x17e96 <POSIX_Read_Config+0xd82>
   17e8c:	3f ef       	ldi	r19, 0xFF	; 255
   17e8e:	a3 1a       	sub	r10, r19
   17e90:	b3 0a       	sbc	r11, r19
                Devices[index].PPR = tmp;
   17e92:	8f ef       	ldi	r24, 0xFF	; 255
   17e94:	05 c0       	rjmp	.+10     	; 0x17ea0 <POSIX_Read_Config+0xd8c>
   17e96:	cf 57       	subi	r28, 0x7F	; 127
   17e98:	df 4f       	sbci	r29, 0xFF	; 255
   17e9a:	88 81       	ld	r24, Y
   17e9c:	c1 58       	subi	r28, 0x81	; 129
   17e9e:	d0 40       	sbci	r29, 0x00	; 0
   17ea0:	97 e0       	ldi	r25, 0x07	; 7
   17ea2:	96 9d       	mul	r25, r6
                AMIGOp->HEADER.PPR = tmp;
   17ea4:	f0 01       	movw	r30, r0
   17ea6:	97 9d       	mul	r25, r7
            }
            else if( (ind = token(ptr,"FILE")) )
   17ea8:	f0 0d       	add	r31, r0
   17eaa:	11 24       	eor	r1, r1
   17eac:	e1 55       	subi	r30, 0x51	; 81
   17eae:	f1 4e       	sbci	r31, 0xE1	; 225
   17eb0:	82 83       	std	Z+2, r24	; 0x02
   17eb2:	d1 01       	movw	r26, r2
   17eb4:	bb cb       	rjmp	.-2186   	; 0x1762c <POSIX_Read_Config+0x518>
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   17eb6:	67 e3       	ldi	r22, 0x37	; 55
   17eb8:	74 e1       	ldi	r23, 0x14	; 20
   17eba:	c6 01       	movw	r24, r12
   17ebc:	0e 94 26 32 	call	0x644c	; 0x644c <token>
                if(*ptr == '=')
   17ec0:	00 97       	sbiw	r24, 0x00	; 0
   17ec2:	b1 f0       	breq	.+44     	; 0x17ef0 <POSIX_Read_Config+0xddc>
   17ec4:	8c 0d       	add	r24, r12
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17ec6:	9d 1d       	adc	r25, r13
   17ec8:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
                }
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   17ecc:	fc 01       	movw	r30, r24
   17ece:	20 81       	ld	r18, Z
   17ed0:	2d 33       	cpi	r18, 0x3D	; 61
   17ed2:	19 f4       	brne	.+6      	; 0x17eda <POSIX_Read_Config+0xdc6>
   17ed4:	01 96       	adiw	r24, 0x01	; 1
   17ed6:	0e 94 e6 30 	call	0x61cc	; 0x61cc <skipspaces>
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   17eda:	4f e1       	ldi	r20, 0x1F	; 31
   17edc:	50 e0       	ldi	r21, 0x00	; 0
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   17ede:	bc 01       	movw	r22, r24
   17ee0:	c1 01       	movw	r24, r2
   17ee2:	02 96       	adiw	r24, 0x02	; 2
   17ee4:	0e 94 89 30 	call	0x6112	; 0x6112 <strncpy>
   17ee8:	d1 01       	movw	r26, r2
   17eea:	91 96       	adiw	r26, 0x21	; 33
   17eec:	1c 92       	st	X, r1
   17eee:	be c9       	rjmp	.-3204   	; 0x1726c <POSIX_Read_Config+0x158>
   17ef0:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17ef4:	8f 93       	push	r24
   17ef6:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17efa:	8f 93       	push	r24
   17efc:	df 92       	push	r13
   17efe:	cf 92       	push	r12
   17f00:	1f 92       	push	r1
   17f02:	cd 56       	subi	r28, 0x6D	; 109
   17f04:	df 4f       	sbci	r29, 0xFF	; 255
   17f06:	b8 81       	ld	r27, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17f08:	c3 59       	subi	r28, 0x93	; 147
   17f0a:	d0 40       	sbci	r29, 0x00	; 0
   17f0c:	bf 93       	push	r27
   17f0e:	ce 56       	subi	r28, 0x6E	; 110
   17f10:	df 4f       	sbci	r29, 0xFF	; 255
   17f12:	e8 81       	ld	r30, Y
   17f14:	c2 59       	subi	r28, 0x92	; 146
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17f16:	d0 40       	sbci	r29, 0x00	; 0
   17f18:	f6 c0       	rjmp	.+492    	; 0x18106 <POSIX_Read_Config+0xff2>
   17f1a:	6c e3       	ldi	r22, 0x3C	; 60
   17f1c:	74 e1       	ldi	r23, 0x14	; 20
   17f1e:	c6 01       	movw	r24, r12
   17f20:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17f24:	00 97       	sbiw	r24, 0x00	; 0
   17f26:	f9 f0       	breq	.+62     	; 0x17f66 <POSIX_Read_Config+0xe52>
   17f28:	de 01       	movw	r26, r28
   17f2a:	af 57       	subi	r26, 0x7F	; 127
   17f2c:	bf 4f       	sbci	r27, 0xFF	; 255
   17f2e:	7d 01       	movw	r14, r26
   17f30:	0f ef       	ldi	r16, 0xFF	; 255
   17f32:	1f ef       	ldi	r17, 0xFF	; 255
   17f34:	20 e0       	ldi	r18, 0x00	; 0
   17f36:	30 e0       	ldi	r19, 0x00	; 0
   17f38:	40 e0       	ldi	r20, 0x00	; 0
   17f3a:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17f3c:	ba 01       	movw	r22, r20
   17f3e:	8c 0d       	add	r24, r12
   17f40:	9d 1d       	adc	r25, r13
                AMIGOp->CONFIG.ID = val;
   17f42:	48 d8       	rcall	.-3952   	; 0x16fd4 <assign_value>
   17f44:	67 2b       	or	r22, r23
   17f46:	68 2b       	or	r22, r24
   17f48:	69 2b       	or	r22, r25
   17f4a:	19 f4       	brne	.+6      	; 0x17f52 <POSIX_Read_Config+0xe3e>
   17f4c:	bf ef       	ldi	r27, 0xFF	; 255
   17f4e:	ab 1a       	sub	r10, r27
   17f50:	bb 0a       	sbc	r11, r27
   17f52:	cf 57       	subi	r28, 0x7F	; 127
   17f54:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   17f56:	88 81       	ld	r24, Y
   17f58:	99 81       	ldd	r25, Y+1	; 0x01
   17f5a:	c1 58       	subi	r28, 0x81	; 129
   17f5c:	d0 40       	sbci	r29, 0x00	; 0
   17f5e:	f1 01       	movw	r30, r2
   17f60:	94 a3       	std	Z+36, r25	; 0x24
   17f62:	83 a3       	std	Z+35, r24	; 0x23
   17f64:	83 c9       	rjmp	.-3322   	; 0x1726c <POSIX_Read_Config+0x158>
   17f66:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   17f6a:	8f 93       	push	r24
   17f6c:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   17f70:	8f 93       	push	r24
   17f72:	df 92       	push	r13
   17f74:	cf 92       	push	r12
   17f76:	1f 92       	push	r1
   17f78:	c0 57       	subi	r28, 0x70	; 112
   17f7a:	df 4f       	sbci	r29, 0xFF	; 255
   17f7c:	f8 81       	ld	r31, Y
   17f7e:	c0 59       	subi	r28, 0x90	; 144
   17f80:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   17f82:	ff 93       	push	r31
   17f84:	c1 57       	subi	r28, 0x71	; 113
   17f86:	df 4f       	sbci	r29, 0xFF	; 255
   17f88:	28 81       	ld	r18, Y
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   17f8a:	cf 58       	subi	r28, 0x8F	; 143
   17f8c:	d0 40       	sbci	r29, 0x00	; 0
   17f8e:	2f 93       	push	r18
   17f90:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   17f94:	3f ef       	ldi	r19, 0xFF	; 255
   17f96:	a3 1a       	sub	r10, r19
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   17f98:	b3 0a       	sbc	r11, r19
   17f9a:	d6 c0       	rjmp	.+428    	; 0x18148 <POSIX_Read_Config+0x1034>
   17f9c:	68 e4       	ldi	r22, 0x48	; 72
   17f9e:	75 e1       	ldi	r23, 0x15	; 21
   17fa0:	c6 01       	movw	r24, r12
   17fa2:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17fa6:	00 97       	sbiw	r24, 0x00	; 0
   17fa8:	f9 f0       	breq	.+62     	; 0x17fe8 <POSIX_Read_Config+0xed4>
   17faa:	de 01       	movw	r26, r28
   17fac:	af 57       	subi	r26, 0x7F	; 127
   17fae:	bf 4f       	sbci	r27, 0xFF	; 255
   17fb0:	7d 01       	movw	r14, r26
   17fb2:	00 e0       	ldi	r16, 0x00	; 0
   17fb4:	10 e1       	ldi	r17, 0x10	; 16
   17fb6:	20 e0       	ldi	r18, 0x00	; 0
   17fb8:	30 e0       	ldi	r19, 0x00	; 0
   17fba:	40 e0       	ldi	r20, 0x00	; 0
   17fbc:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17fbe:	ba 01       	movw	r22, r20
   17fc0:	8c 0d       	add	r24, r12
   17fc2:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   17fc4:	07 d8       	rcall	.-4082   	; 0x16fd4 <assign_value>
   17fc6:	67 2b       	or	r22, r23
   17fc8:	68 2b       	or	r22, r24
   17fca:	69 2b       	or	r22, r25
   17fcc:	19 f4       	brne	.+6      	; 0x17fd4 <POSIX_Read_Config+0xec0>
   17fce:	bf ef       	ldi	r27, 0xFF	; 255
   17fd0:	ab 1a       	sub	r10, r27
   17fd2:	bb 0a       	sbc	r11, r27
   17fd4:	cf 57       	subi	r28, 0x7F	; 127
   17fd6:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   17fd8:	88 81       	ld	r24, Y
   17fda:	99 81       	ldd	r25, Y+1	; 0x01
   17fdc:	c1 58       	subi	r28, 0x81	; 129
   17fde:	d0 40       	sbci	r29, 0x00	; 0
   17fe0:	f1 01       	movw	r30, r2
   17fe2:	96 a3       	std	Z+38, r25	; 0x26
   17fe4:	85 a3       	std	Z+37, r24	; 0x25
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17fe6:	42 c9       	rjmp	.-3452   	; 0x1726c <POSIX_Read_Config+0x158>
   17fe8:	69 e5       	ldi	r22, 0x59	; 89
   17fea:	75 e1       	ldi	r23, 0x15	; 21
   17fec:	c6 01       	movw	r24, r12
   17fee:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   17ff2:	00 97       	sbiw	r24, 0x00	; 0
   17ff4:	11 f1       	breq	.+68     	; 0x1803a <POSIX_Read_Config+0xf26>
   17ff6:	9e 01       	movw	r18, r28
   17ff8:	2f 57       	subi	r18, 0x7F	; 127
   17ffa:	3f 4f       	sbci	r19, 0xFF	; 255
   17ffc:	79 01       	movw	r14, r18
   17ffe:	0f ef       	ldi	r16, 0xFF	; 255
   18000:	10 e0       	ldi	r17, 0x00	; 0
   18002:	20 e0       	ldi	r18, 0x00	; 0
   18004:	30 e0       	ldi	r19, 0x00	; 0
   18006:	40 e0       	ldi	r20, 0x00	; 0
   18008:	50 e0       	ldi	r21, 0x00	; 0
   1800a:	ba 01       	movw	r22, r20
                    ++errors;
   1800c:	8c 0d       	add	r24, r12
   1800e:	9d 1d       	adc	r25, r13
   18010:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <assign_value>
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   18014:	67 2b       	or	r22, r23
   18016:	68 2b       	or	r22, r24
   18018:	69 2b       	or	r22, r25
   1801a:	19 f4       	brne	.+6      	; 0x18022 <POSIX_Read_Config+0xf0e>
   1801c:	3f ef       	ldi	r19, 0xFF	; 255
   1801e:	a3 1a       	sub	r10, r19
   18020:	b3 0a       	sbc	r11, r19
   18022:	cf 57       	subi	r28, 0x7F	; 127
   18024:	df 4f       	sbci	r29, 0xFF	; 255
   18026:	88 81       	ld	r24, Y
   18028:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"HEADS")) )
   1802a:	c1 58       	subi	r28, 0x81	; 129
   1802c:	d0 40       	sbci	r29, 0x00	; 0
   1802e:	d1 01       	movw	r26, r2
   18030:	98 96       	adiw	r26, 0x28	; 40
   18032:	9c 93       	st	X, r25
   18034:	8e 93       	st	-X, r24
   18036:	97 97       	sbiw	r26, 0x27	; 39
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18038:	19 c9       	rjmp	.-3534   	; 0x1726c <POSIX_Read_Config+0x158>
   1803a:	6b e6       	ldi	r22, 0x6B	; 107
   1803c:	75 e1       	ldi	r23, 0x15	; 21
   1803e:	c6 01       	movw	r24, r12
   18040:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   18044:	00 97       	sbiw	r24, 0x00	; 0
   18046:	11 f1       	breq	.+68     	; 0x1808c <POSIX_Read_Config+0xf78>
   18048:	fe 01       	movw	r30, r28
   1804a:	ef 57       	subi	r30, 0x7F	; 127
   1804c:	ff 4f       	sbci	r31, 0xFF	; 255
   1804e:	7f 01       	movw	r14, r30
   18050:	0f ef       	ldi	r16, 0xFF	; 255
   18052:	10 e0       	ldi	r17, 0x00	; 0
   18054:	20 e0       	ldi	r18, 0x00	; 0
   18056:	30 e0       	ldi	r19, 0x00	; 0
   18058:	40 e0       	ldi	r20, 0x00	; 0
   1805a:	50 e0       	ldi	r21, 0x00	; 0
   1805c:	ba 01       	movw	r22, r20
                    ++errors;
   1805e:	8c 0d       	add	r24, r12
   18060:	9d 1d       	adc	r25, r13
   18062:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <assign_value>
                AMIGOp->GEOMETRY.HEADS = val;
   18066:	67 2b       	or	r22, r23
   18068:	68 2b       	or	r22, r24
   1806a:	69 2b       	or	r22, r25
   1806c:	19 f4       	brne	.+6      	; 0x18074 <POSIX_Read_Config+0xf60>
   1806e:	ff ef       	ldi	r31, 0xFF	; 255
   18070:	af 1a       	sub	r10, r31
   18072:	bf 0a       	sbc	r11, r31
   18074:	cf 57       	subi	r28, 0x7F	; 127
   18076:	df 4f       	sbci	r29, 0xFF	; 255
   18078:	88 81       	ld	r24, Y
   1807a:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   1807c:	c1 58       	subi	r28, 0x81	; 129
   1807e:	d0 40       	sbci	r29, 0x00	; 0
   18080:	d1 01       	movw	r26, r2
   18082:	9a 96       	adiw	r26, 0x2a	; 42
   18084:	9c 93       	st	X, r25
   18086:	8e 93       	st	-X, r24
   18088:	99 97       	sbiw	r26, 0x29	; 41
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1808a:	f0 c8       	rjmp	.-3616   	; 0x1726c <POSIX_Read_Config+0x158>
   1808c:	61 e7       	ldi	r22, 0x71	; 113
   1808e:	75 e1       	ldi	r23, 0x15	; 21
   18090:	c6 01       	movw	r24, r12
   18092:	0e 94 26 32 	call	0x644c	; 0x644c <token>
   18096:	00 97       	sbiw	r24, 0x00	; 0
   18098:	11 f1       	breq	.+68     	; 0x180de <POSIX_Read_Config+0xfca>
   1809a:	fe 01       	movw	r30, r28
   1809c:	ef 57       	subi	r30, 0x7F	; 127
   1809e:	ff 4f       	sbci	r31, 0xFF	; 255
   180a0:	7f 01       	movw	r14, r30
   180a2:	0f ef       	ldi	r16, 0xFF	; 255
   180a4:	10 e0       	ldi	r17, 0x00	; 0
   180a6:	20 e0       	ldi	r18, 0x00	; 0
   180a8:	30 e0       	ldi	r19, 0x00	; 0
   180aa:	40 e0       	ldi	r20, 0x00	; 0
   180ac:	50 e0       	ldi	r21, 0x00	; 0
   180ae:	ba 01       	movw	r22, r20
                    ++errors;
   180b0:	8c 0d       	add	r24, r12
   180b2:	9d 1d       	adc	r25, r13
   180b4:	0e 94 ea b7 	call	0x16fd4	; 0x16fd4 <assign_value>
                AMIGOp->GEOMETRY.CYLINDERS = val;
   180b8:	67 2b       	or	r22, r23
   180ba:	68 2b       	or	r22, r24
   180bc:	69 2b       	or	r22, r25
   180be:	19 f4       	brne	.+6      	; 0x180c6 <POSIX_Read_Config+0xfb2>
   180c0:	ff ef       	ldi	r31, 0xFF	; 255
   180c2:	af 1a       	sub	r10, r31
   180c4:	bf 0a       	sbc	r11, r31
   180c6:	cf 57       	subi	r28, 0x7F	; 127
   180c8:	df 4f       	sbci	r29, 0xFF	; 255
   180ca:	88 81       	ld	r24, Y
   180cc:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   180ce:	c1 58       	subi	r28, 0x81	; 129
   180d0:	d0 40       	sbci	r29, 0x00	; 0
   180d2:	d1 01       	movw	r26, r2
   180d4:	9c 96       	adiw	r26, 0x2c	; 44
   180d6:	9c 93       	st	X, r25
   180d8:	8e 93       	st	-X, r24
   180da:	9b 97       	sbiw	r26, 0x2b	; 43
   180dc:	c7 c8       	rjmp	.-3698   	; 0x1726c <POSIX_Read_Config+0x158>
   180de:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   180e2:	8f 93       	push	r24
   180e4:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   180e8:	8f 93       	push	r24
   180ea:	df 92       	push	r13
   180ec:	cf 92       	push	r12
   180ee:	1f 92       	push	r1
   180f0:	c3 57       	subi	r28, 0x73	; 115
   180f2:	df 4f       	sbci	r29, 0xFF	; 255
   180f4:	b8 81       	ld	r27, Y
   180f6:	cd 58       	subi	r28, 0x8D	; 141
   180f8:	d0 40       	sbci	r29, 0x00	; 0
   180fa:	bf 93       	push	r27
                ++errors;
   180fc:	c4 57       	subi	r28, 0x74	; 116
   180fe:	df 4f       	sbci	r29, 0xFF	; 255
   18100:	e8 81       	ld	r30, Y
   18102:	cc 58       	subi	r28, 0x8C	; 140
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   18104:	d0 40       	sbci	r29, 0x00	; 0
   18106:	ef 93       	push	r30
   18108:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1810c:	ff ef       	ldi	r31, 0xFF	; 255
   1810e:	af 1a       	sub	r10, r31
   18110:	bf 0a       	sbc	r11, r31
   18112:	1a c0       	rjmp	.+52     	; 0x18148 <POSIX_Read_Config+0x1034>
   18114:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   18118:	8f 93       	push	r24
   1811a:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
   1811e:	8f 93       	push	r24
   18120:	df 92       	push	r13
   18122:	cf 92       	push	r12
   18124:	1f 92       	push	r1
   18126:	c6 57       	subi	r28, 0x76	; 118
   18128:	df 4f       	sbci	r29, 0xFF	; 255
   1812a:	38 81       	ld	r19, Y
   1812c:	ca 58       	subi	r28, 0x8A	; 138
   1812e:	d0 40       	sbci	r29, 0x00	; 0
   18130:	3f 93       	push	r19
            ++errors;
   18132:	c7 57       	subi	r28, 0x77	; 119
   18134:	df 4f       	sbci	r29, 0xFF	; 255
   18136:	48 81       	ld	r20, Y
            break;
   18138:	c9 58       	subi	r28, 0x89	; 137
   1813a:	d0 40       	sbci	r29, 0x00	; 0
   1813c:	4f 93       	push	r20
   1813e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18142:	8f ef       	ldi	r24, 0xFF	; 255

        } // switch
    } //while
    if(state != START_STATE)
   18144:	a8 1a       	sub	r10, r24
   18146:	b8 0a       	sbc	r11, r24
   18148:	0f b6       	in	r0, 0x3f	; 63
    {
        printf("Missing END statement at line:%d\n", lines);
   1814a:	f8 94       	cli
   1814c:	de bf       	out	0x3e, r29	; 62
   1814e:	0f be       	out	0x3f, r0	; 63
   18150:	cd bf       	out	0x3d, r28	; 61
   18152:	8c c8       	rjmp	.-3816   	; 0x1726c <POSIX_Read_Config+0x158>
   18154:	81 14       	cp	r8, r1
   18156:	91 04       	cpc	r9, r1
   18158:	a9 f0       	breq	.+42     	; 0x18184 <POSIX_Read_Config+0x1070>
   1815a:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   1815e:	8f 93       	push	r24
   18160:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
        ++errors;
   18164:	8f 93       	push	r24
   18166:	8f e6       	ldi	r24, 0x6F	; 111
   18168:	9d e2       	ldi	r25, 0x2D	; 45
   1816a:	1f 92       	push	r1
   1816c:	9f 93       	push	r25
   1816e:	8f 93       	push	r24
   18170:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   18174:	bf ef       	ldi	r27, 0xFF	; 255
   18176:	ab 1a       	sub	r10, r27
   18178:	bb 0a       	sbc	r11, r27
   1817a:	0f 90       	pop	r0
   1817c:	0f 90       	pop	r0
   1817e:	0f 90       	pop	r0
   18180:	0f 90       	pop	r0
   18182:	0f 90       	pop	r0
   18184:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <lines+0x1>
   18188:	8f 93       	push	r24
   1818a:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <lines>
    if(errors)
   1818e:	8f 93       	push	r24
   18190:	82 e5       	ldi	r24, 0x52	; 82
   18192:	9d e2       	ldi	r25, 0x2D	; 45
   18194:	1f 92       	push	r1
   18196:	9f 93       	push	r25
   18198:	8f 93       	push	r24
   1819a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1819e:	0f 90       	pop	r0
   181a0:	0f 90       	pop	r0
   181a2:	0f 90       	pop	r0
   181a4:	0f 90       	pop	r0
   181a6:	0f 90       	pop	r0
   181a8:	a1 14       	cp	r10, r1
   181aa:	b1 04       	cpc	r11, r1
   181ac:	71 f0       	breq	.+28     	; 0x181ca <POSIX_Read_Config+0x10b6>
   181ae:	bf 92       	push	r11
   181b0:	af 92       	push	r10
   181b2:	8b e2       	ldi	r24, 0x2B	; 43
   181b4:	9d e2       	ldi	r25, 0x2D	; 45
   181b6:	1f 92       	push	r1
   181b8:	9f 93       	push	r25

    ret = fclose(cfg);
   181ba:	8f 93       	push	r24
   181bc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   181c0:	0f 90       	pop	r0
   181c2:	0f 90       	pop	r0
   181c4:	0f 90       	pop	r0
   181c6:	0f 90       	pop	r0
   181c8:	0f 90       	pop	r0
    if(ret == EOF)
   181ca:	c9 57       	subi	r28, 0x79	; 121
   181cc:	df 4f       	sbci	r29, 0xFF	; 255
    {
        perror("Read_Config - close error");
   181ce:	88 81       	ld	r24, Y
   181d0:	99 81       	ldd	r25, Y+1	; 0x01
   181d2:	c7 58       	subi	r28, 0x87	; 135
   181d4:	d0 40       	sbci	r29, 0x00	; 0
        ++errors;
   181d6:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
   181da:	01 96       	adiw	r24, 0x01	; 1
   181dc:	39 f4       	brne	.+14     	; 0x181ec <POSIX_Read_Config+0x10d8>
    }

    return(errors);
}
   181de:	8b e7       	ldi	r24, 0x7B	; 123
   181e0:	95 e1       	ldi	r25, 0x15	; 21
   181e2:	0e 94 17 7c 	call	0xf82e	; 0xf82e <perror>
   181e6:	c5 01       	movw	r24, r10
   181e8:	01 96       	adiw	r24, 0x01	; 1
   181ea:	01 c0       	rjmp	.+2      	; 0x181ee <POSIX_Read_Config+0x10da>
   181ec:	c5 01       	movw	r24, r10
   181ee:	c6 56       	subi	r28, 0x66	; 102
   181f0:	df 4f       	sbci	r29, 0xFF	; 255
   181f2:	e2 e1       	ldi	r30, 0x12	; 18
   181f4:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

000181f8 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   181f8:	cf 92       	push	r12
   181fa:	df 92       	push	r13
   181fc:	ef 92       	push	r14
   181fe:	0f 93       	push	r16
   18200:	1f 93       	push	r17
   18202:	cf 93       	push	r28
   18204:	df 93       	push	r29
   18206:	cd b7       	in	r28, 0x3d	; 61
   18208:	de b7       	in	r29, 0x3e	; 62
   1820a:	c0 54       	subi	r28, 0x40	; 64
   1820c:	d1 09       	sbc	r29, r1
   1820e:	0f b6       	in	r0, 0x3f	; 63
   18210:	f8 94       	cli
   18212:	de bf       	out	0x3e, r29	; 62
   18214:	0f be       	out	0x3f, r0	; 63
   18216:	cd bf       	out	0x3d, r28	; 61
   18218:	6b 01       	movw	r12, r22
   1821a:	e8 2e       	mov	r14, r24
   1821c:	75 2f       	mov	r23, r21
   1821e:	de 01       	movw	r26, r28
   18220:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   18222:	80 e0       	ldi	r24, 0x00	; 0
   18224:	90 e0       	ldi	r25, 0x00	; 0
   18226:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   18228:	f6 01       	movw	r30, r12
   1822a:	5e 2d       	mov	r21, r14
   1822c:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
   18230:	66 23       	and	r22, r22
   18232:	51 f0       	breq	.+20     	; 0x18248 <print_var_P+0x50>
   18234:	8e 33       	cpi	r24, 0x3E	; 62
   18236:	91 05       	cpc	r25, r1
   18238:	39 f0       	breq	.+14     	; 0x18248 <print_var_P+0x50>
        tmp[i++] = *str++;
   1823a:	01 96       	adiw	r24, 0x01	; 1
   1823c:	5f ef       	ldi	r21, 0xFF	; 255
   1823e:	c5 1a       	sub	r12, r21
   18240:	d5 0a       	sbc	r13, r21
   18242:	e5 0a       	sbc	r14, r21
   18244:	6d 93       	st	X+, r22
   18246:	f0 cf       	rjmp	.-32     	; 0x18228 <print_var_P+0x30>
    tmp[i++] = 0;
   18248:	f8 01       	movw	r30, r16
   1824a:	e8 0f       	add	r30, r24
   1824c:	f9 1f       	adc	r31, r25
   1824e:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   18250:	7f 93       	push	r23
   18252:	4f 93       	push	r20
   18254:	3f 93       	push	r19
   18256:	2f 93       	push	r18
   18258:	7f 93       	push	r23
   1825a:	4f 93       	push	r20
   1825c:	3f 93       	push	r19
   1825e:	2f 93       	push	r18
   18260:	1f 93       	push	r17
   18262:	0f 93       	push	r16
   18264:	82 e1       	ldi	r24, 0x12	; 18
   18266:	9d e2       	ldi	r25, 0x2D	; 45
   18268:	1f 92       	push	r1
   1826a:	9f 93       	push	r25
   1826c:	8f 93       	push	r24
   1826e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   18272:	0f b6       	in	r0, 0x3f	; 63
   18274:	f8 94       	cli
   18276:	de bf       	out	0x3e, r29	; 62
   18278:	0f be       	out	0x3f, r0	; 63
   1827a:	cd bf       	out	0x3d, r28	; 61
   1827c:	c0 5c       	subi	r28, 0xC0	; 192
   1827e:	df 4f       	sbci	r29, 0xFF	; 255
   18280:	0f b6       	in	r0, 0x3f	; 63
   18282:	f8 94       	cli
   18284:	de bf       	out	0x3e, r29	; 62
   18286:	0f be       	out	0x3f, r0	; 63
   18288:	cd bf       	out	0x3d, r28	; 61
   1828a:	df 91       	pop	r29
   1828c:	cf 91       	pop	r28
   1828e:	1f 91       	pop	r17
   18290:	0f 91       	pop	r16
   18292:	ef 90       	pop	r14
   18294:	df 90       	pop	r13
   18296:	cf 90       	pop	r12
   18298:	08 95       	ret

0001829a <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   1829a:	cf 92       	push	r12
   1829c:	df 92       	push	r13
   1829e:	ef 92       	push	r14
   182a0:	cf 93       	push	r28
   182a2:	df 93       	push	r29
   182a4:	cd b7       	in	r28, 0x3d	; 61
   182a6:	de b7       	in	r29, 0x3e	; 62
   182a8:	c0 54       	subi	r28, 0x40	; 64
   182aa:	d1 09       	sbc	r29, r1
   182ac:	0f b6       	in	r0, 0x3f	; 63
   182ae:	f8 94       	cli
   182b0:	de bf       	out	0x3e, r29	; 62
   182b2:	0f be       	out	0x3f, r0	; 63
   182b4:	cd bf       	out	0x3d, r28	; 61
   182b6:	6b 01       	movw	r12, r22
   182b8:	e8 2e       	mov	r14, r24
   182ba:	75 2f       	mov	r23, r21
   182bc:	de 01       	movw	r26, r28
   182be:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   182c0:	80 e0       	ldi	r24, 0x00	; 0
   182c2:	90 e0       	ldi	r25, 0x00	; 0
   182c4:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   182c6:	f6 01       	movw	r30, r12
   182c8:	5e 2d       	mov	r21, r14
   182ca:	0e 94 72 e9 	call	0x1d2e4	; 0x1d2e4 <__xload_1>
   182ce:	66 23       	and	r22, r22
   182d0:	51 f0       	breq	.+20     	; 0x182e6 <print_str_P+0x4c>
   182d2:	8e 33       	cpi	r24, 0x3E	; 62
   182d4:	91 05       	cpc	r25, r1
   182d6:	39 f0       	breq	.+14     	; 0x182e6 <print_str_P+0x4c>
        tmp[i++] = *str++;
   182d8:	01 96       	adiw	r24, 0x01	; 1
   182da:	5f ef       	ldi	r21, 0xFF	; 255
   182dc:	c5 1a       	sub	r12, r21
   182de:	d5 0a       	sbc	r13, r21
   182e0:	e5 0a       	sbc	r14, r21
   182e2:	6d 93       	st	X+, r22
   182e4:	f0 cf       	rjmp	.-32     	; 0x182c6 <print_str_P+0x2c>
    tmp[i++] = 0;
   182e6:	f9 01       	movw	r30, r18
   182e8:	e8 0f       	add	r30, r24
   182ea:	f9 1f       	adc	r31, r25
   182ec:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   182ee:	7f 93       	push	r23
   182f0:	4f 93       	push	r20
   182f2:	3f 93       	push	r19
   182f4:	2f 93       	push	r18
   182f6:	80 e0       	ldi	r24, 0x00	; 0
   182f8:	9d e2       	ldi	r25, 0x2D	; 45
   182fa:	1f 92       	push	r1
   182fc:	9f 93       	push	r25
   182fe:	8f 93       	push	r24
   18300:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   18304:	0f b6       	in	r0, 0x3f	; 63
   18306:	f8 94       	cli
   18308:	de bf       	out	0x3e, r29	; 62
   1830a:	0f be       	out	0x3f, r0	; 63
   1830c:	cd bf       	out	0x3d, r28	; 61
   1830e:	c0 5c       	subi	r28, 0xC0	; 192
   18310:	df 4f       	sbci	r29, 0xFF	; 255
   18312:	0f b6       	in	r0, 0x3f	; 63
   18314:	f8 94       	cli
   18316:	de bf       	out	0x3e, r29	; 62
   18318:	0f be       	out	0x3f, r0	; 63
   1831a:	cd bf       	out	0x3d, r28	; 61
   1831c:	df 91       	pop	r29
   1831e:	cf 91       	pop	r28
   18320:	ef 90       	pop	r14
   18322:	df 90       	pop	r13
   18324:	cf 90       	pop	r12
   18326:	08 95       	ret

00018328 <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   18328:	2f 92       	push	r2
   1832a:	3f 92       	push	r3
   1832c:	4f 92       	push	r4
   1832e:	6f 92       	push	r6
   18330:	7f 92       	push	r7
   18332:	8f 92       	push	r8
   18334:	af 92       	push	r10
   18336:	bf 92       	push	r11
   18338:	cf 92       	push	r12
   1833a:	df 92       	push	r13
   1833c:	ef 92       	push	r14
   1833e:	0f 93       	push	r16
   18340:	1f 93       	push	r17
   18342:	cf 93       	push	r28
   18344:	df 93       	push	r29
   18346:	cd b7       	in	r28, 0x3d	; 61
   18348:	de b7       	in	r29, 0x3e	; 62
   1834a:	2b 97       	sbiw	r28, 0x0b	; 11
   1834c:	0f b6       	in	r0, 0x3f	; 63
   1834e:	f8 94       	cli
   18350:	de bf       	out	0x3e, r29	; 62
   18352:	0f be       	out	0x3f, r0	; 63
   18354:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   18356:	8e ed       	ldi	r24, 0xDE	; 222
   18358:	9c e2       	ldi	r25, 0x2C	; 44
   1835a:	1f 92       	push	r1
   1835c:	9f 93       	push	r25
   1835e:	8f 93       	push	r24
   18360:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18364:	0f ea       	ldi	r16, 0xAF	; 175
   18366:	1e e1       	ldi	r17, 0x1E	; 30
   18368:	0f 90       	pop	r0
   1836a:	0f 90       	pop	r0
   1836c:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   1836e:	8d e3       	ldi	r24, 0x3D	; 61
   18370:	9c e2       	ldi	r25, 0x2C	; 44
   18372:	9c 01       	movw	r18, r24
   18374:	40 e0       	ldi	r20, 0x00	; 0
   18376:	29 83       	std	Y+1, r18	; 0x01
   18378:	3a 83       	std	Y+2, r19	; 0x02
   1837a:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1837c:	86 e2       	ldi	r24, 0x26	; 38
   1837e:	9c e2       	ldi	r25, 0x2C	; 44
   18380:	9c 01       	movw	r18, r24
   18382:	40 e0       	ldi	r20, 0x00	; 0
   18384:	2c 83       	std	Y+4, r18	; 0x04
   18386:	3d 83       	std	Y+5, r19	; 0x05
   18388:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   1838a:	8f e0       	ldi	r24, 0x0F	; 15
   1838c:	9c e2       	ldi	r25, 0x2C	; 44
   1838e:	9c 01       	movw	r18, r24
   18390:	40 e0       	ldi	r20, 0x00	; 0
   18392:	2f 83       	std	Y+7, r18	; 0x07
   18394:	38 87       	std	Y+8, r19	; 0x08
   18396:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18398:	82 e8       	ldi	r24, 0x82	; 130
   1839a:	9c e2       	ldi	r25, 0x2C	; 44
   1839c:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1839e:	8b e6       	ldi	r24, 0x6B	; 107
   183a0:	9c e2       	ldi	r25, 0x2C	; 44
   183a2:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   183a4:	84 e5       	ldi	r24, 0x54	; 84
   183a6:	9c e2       	ldi	r25, 0x2C	; 44
   183a8:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   183aa:	87 ec       	ldi	r24, 0xC7	; 199
   183ac:	a8 2e       	mov	r10, r24
   183ae:	8c e2       	ldi	r24, 0x2C	; 44
   183b0:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   183b2:	f8 01       	movw	r30, r16
   183b4:	80 81       	ld	r24, Z
   183b6:	88 23       	and	r24, r24
   183b8:	09 f4       	brne	.+2      	; 0x183bc <display_Addresses+0x94>
   183ba:	8a c0       	rjmp	.+276    	; 0x184d0 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   183bc:	f1 81       	ldd	r31, Z+1	; 0x01
   183be:	2f 2f       	mov	r18, r31
   183c0:	30 e0       	ldi	r19, 0x00	; 0
   183c2:	3b 87       	std	Y+11, r19	; 0x0b
   183c4:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   183c6:	82 30       	cpi	r24, 0x02	; 2
   183c8:	49 f5       	brne	.+82     	; 0x1841c <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   183ca:	c9 01       	movw	r24, r18
   183cc:	80 96       	adiw	r24, 0x20	; 32
   183ce:	9f 93       	push	r25
   183d0:	8f 93       	push	r24
   183d2:	c5 01       	movw	r24, r10
   183d4:	1f 92       	push	r1
   183d6:	9f 93       	push	r25
   183d8:	af 92       	push	r10
   183da:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   183de:	8a 85       	ldd	r24, Y+10	; 0x0a
   183e0:	9b 85       	ldd	r25, Y+11	; 0x0b
   183e2:	80 5c       	subi	r24, 0xC0	; 192
   183e4:	9f 4f       	sbci	r25, 0xFF	; 255
   183e6:	9f 93       	push	r25
   183e8:	8f 93       	push	r24
   183ea:	80 eb       	ldi	r24, 0xB0	; 176
   183ec:	9c e2       	ldi	r25, 0x2C	; 44
   183ee:	1f 92       	push	r1
   183f0:	9f 93       	push	r25
   183f2:	8f 93       	push	r24
   183f4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   183f8:	8a 85       	ldd	r24, Y+10	; 0x0a
   183fa:	9b 85       	ldd	r25, Y+11	; 0x0b
   183fc:	80 5a       	subi	r24, 0xA0	; 160
   183fe:	9f 4f       	sbci	r25, 0xFF	; 255
   18400:	9f 93       	push	r25
   18402:	8f 93       	push	r24
   18404:	89 e9       	ldi	r24, 0x99	; 153
   18406:	9c e2       	ldi	r25, 0x2C	; 44
   18408:	1f 92       	push	r1
   1840a:	9f 93       	push	r25
   1840c:	8f 93       	push	r24
   1840e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18412:	0f b6       	in	r0, 0x3f	; 63
   18414:	f8 94       	cli
   18416:	de bf       	out	0x3e, r29	; 62
   18418:	0f be       	out	0x3f, r0	; 63
   1841a:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1841c:	f8 01       	movw	r30, r16
   1841e:	80 81       	ld	r24, Z
   18420:	81 30       	cpi	r24, 0x01	; 1
   18422:	29 f5       	brne	.+74     	; 0x1846e <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18424:	8a 85       	ldd	r24, Y+10	; 0x0a
   18426:	9b 85       	ldd	r25, Y+11	; 0x0b
   18428:	80 96       	adiw	r24, 0x20	; 32
   1842a:	9f 93       	push	r25
   1842c:	8f 93       	push	r24
   1842e:	1f 92       	push	r1
   18430:	df 92       	push	r13
   18432:	cf 92       	push	r12
   18434:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   18438:	8a 85       	ldd	r24, Y+10	; 0x0a
   1843a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1843c:	80 5c       	subi	r24, 0xC0	; 192
   1843e:	9f 4f       	sbci	r25, 0xFF	; 255
   18440:	9f 93       	push	r25
   18442:	8f 93       	push	r24
   18444:	1f 92       	push	r1
   18446:	7f 92       	push	r7
   18448:	6f 92       	push	r6
   1844a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1844e:	8a 85       	ldd	r24, Y+10	; 0x0a
   18450:	9b 85       	ldd	r25, Y+11	; 0x0b
   18452:	80 5a       	subi	r24, 0xA0	; 160
   18454:	9f 4f       	sbci	r25, 0xFF	; 255
   18456:	9f 93       	push	r25
   18458:	8f 93       	push	r24
   1845a:	1f 92       	push	r1
   1845c:	3f 92       	push	r3
   1845e:	2f 92       	push	r2
   18460:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18464:	0f b6       	in	r0, 0x3f	; 63
   18466:	f8 94       	cli
   18468:	de bf       	out	0x3e, r29	; 62
   1846a:	0f be       	out	0x3f, r0	; 63
   1846c:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   1846e:	f8 01       	movw	r30, r16
   18470:	80 81       	ld	r24, Z
   18472:	83 30       	cpi	r24, 0x03	; 3
   18474:	69 f5       	brne	.+90     	; 0x184d0 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18476:	8a 85       	ldd	r24, Y+10	; 0x0a
   18478:	9b 85       	ldd	r25, Y+11	; 0x0b
   1847a:	80 96       	adiw	r24, 0x20	; 32
   1847c:	9f 93       	push	r25
   1847e:	8f 93       	push	r24
   18480:	1f 92       	push	r1
   18482:	fa 81       	ldd	r31, Y+2	; 0x02
   18484:	ff 93       	push	r31
   18486:	29 81       	ldd	r18, Y+1	; 0x01
   18488:	2f 93       	push	r18
   1848a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1848e:	8a 85       	ldd	r24, Y+10	; 0x0a
   18490:	9b 85       	ldd	r25, Y+11	; 0x0b
   18492:	80 5c       	subi	r24, 0xC0	; 192
   18494:	9f 4f       	sbci	r25, 0xFF	; 255
   18496:	9f 93       	push	r25
   18498:	8f 93       	push	r24
   1849a:	1f 92       	push	r1
   1849c:	3d 81       	ldd	r19, Y+5	; 0x05
   1849e:	3f 93       	push	r19
   184a0:	4c 81       	ldd	r20, Y+4	; 0x04
   184a2:	4f 93       	push	r20
   184a4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   184a8:	8a 85       	ldd	r24, Y+10	; 0x0a
   184aa:	9b 85       	ldd	r25, Y+11	; 0x0b
   184ac:	80 5a       	subi	r24, 0xA0	; 160
   184ae:	9f 4f       	sbci	r25, 0xFF	; 255
   184b0:	9b 87       	std	Y+11, r25	; 0x0b
   184b2:	8a 87       	std	Y+10, r24	; 0x0a
   184b4:	9f 93       	push	r25
   184b6:	8f 93       	push	r24
   184b8:	1f 92       	push	r1
   184ba:	98 85       	ldd	r25, Y+8	; 0x08
   184bc:	9f 93       	push	r25
   184be:	ef 81       	ldd	r30, Y+7	; 0x07
   184c0:	ef 93       	push	r30
   184c2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   184c6:	0f b6       	in	r0, 0x3f	; 63
   184c8:	f8 94       	cli
   184ca:	de bf       	out	0x3e, r29	; 62
   184cc:	0f be       	out	0x3f, r0	; 63
   184ce:	cd bf       	out	0x3d, r28	; 61
   184d0:	09 5f       	subi	r16, 0xF9	; 249
   184d2:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   184d4:	3e e1       	ldi	r19, 0x1E	; 30
   184d6:	07 3e       	cpi	r16, 0xE7	; 231
   184d8:	13 07       	cpc	r17, r19
   184da:	09 f0       	breq	.+2      	; 0x184de <display_Addresses+0x1b6>
   184dc:	6a cf       	rjmp	.-300    	; 0x183b2 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   184de:	8d e0       	ldi	r24, 0x0D	; 13
   184e0:	9c e2       	ldi	r25, 0x2C	; 44
   184e2:	1f 92       	push	r1
   184e4:	9f 93       	push	r25
   184e6:	8f 93       	push	r24
   184e8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   184ec:	0f 90       	pop	r0
   184ee:	0f 90       	pop	r0
   184f0:	0f 90       	pop	r0
   184f2:	2b 96       	adiw	r28, 0x0b	; 11
   184f4:	0f b6       	in	r0, 0x3f	; 63
   184f6:	f8 94       	cli
   184f8:	de bf       	out	0x3e, r29	; 62
   184fa:	0f be       	out	0x3f, r0	; 63
   184fc:	cd bf       	out	0x3d, r28	; 61
   184fe:	df 91       	pop	r29
   18500:	cf 91       	pop	r28
   18502:	1f 91       	pop	r17
   18504:	0f 91       	pop	r16
   18506:	ef 90       	pop	r14
   18508:	df 90       	pop	r13
   1850a:	cf 90       	pop	r12
   1850c:	bf 90       	pop	r11
   1850e:	af 90       	pop	r10
   18510:	8f 90       	pop	r8
   18512:	7f 90       	pop	r7
   18514:	6f 90       	pop	r6
   18516:	4f 90       	pop	r4
   18518:	3f 90       	pop	r3
   1851a:	2f 90       	pop	r2
   1851c:	08 95       	ret

0001851e <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   1851e:	2f 92       	push	r2
   18520:	3f 92       	push	r3
   18522:	4f 92       	push	r4
   18524:	6f 92       	push	r6
   18526:	7f 92       	push	r7
   18528:	8f 92       	push	r8
   1852a:	af 92       	push	r10
   1852c:	bf 92       	push	r11
   1852e:	cf 92       	push	r12
   18530:	df 92       	push	r13
   18532:	ef 92       	push	r14
   18534:	0f 93       	push	r16
   18536:	1f 93       	push	r17
   18538:	cf 93       	push	r28
   1853a:	df 93       	push	r29
   1853c:	cd b7       	in	r28, 0x3d	; 61
   1853e:	de b7       	in	r29, 0x3e	; 62
   18540:	2b 97       	sbiw	r28, 0x0b	; 11
   18542:	0f b6       	in	r0, 0x3f	; 63
   18544:	f8 94       	cli
   18546:	de bf       	out	0x3e, r29	; 62
   18548:	0f be       	out	0x3f, r0	; 63
   1854a:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1854c:	8d ee       	ldi	r24, 0xED	; 237
   1854e:	9b e2       	ldi	r25, 0x2B	; 43
   18550:	1f 92       	push	r1
   18552:	9f 93       	push	r25
   18554:	8f 93       	push	r24
   18556:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1855a:	0f ea       	ldi	r16, 0xAF	; 175
   1855c:	1e e1       	ldi	r17, 0x1E	; 30
   1855e:	0f 90       	pop	r0
   18560:	0f 90       	pop	r0
   18562:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   18564:	8c ef       	ldi	r24, 0xFC	; 252
   18566:	99 e2       	ldi	r25, 0x29	; 41
   18568:	9c 01       	movw	r18, r24
   1856a:	40 e0       	ldi	r20, 0x00	; 0
   1856c:	29 83       	std	Y+1, r18	; 0x01
   1856e:	3a 83       	std	Y+2, r19	; 0x02
   18570:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   18572:	80 e1       	ldi	r24, 0x10	; 16
   18574:	9a e2       	ldi	r25, 0x2A	; 42
   18576:	9c 01       	movw	r18, r24
   18578:	40 e0       	ldi	r20, 0x00	; 0
   1857a:	2c 83       	std	Y+4, r18	; 0x04
   1857c:	3d 83       	std	Y+5, r19	; 0x05
   1857e:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   18580:	86 e0       	ldi	r24, 0x06	; 6
   18582:	9a e2       	ldi	r25, 0x2A	; 42
   18584:	9c 01       	movw	r18, r24
   18586:	40 e0       	ldi	r20, 0x00	; 0
   18588:	2f 83       	std	Y+7, r18	; 0x07
   1858a:	38 87       	std	Y+8, r19	; 0x08
   1858c:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1858e:	8e ef       	ldi	r24, 0xFE	; 254
   18590:	99 e2       	ldi	r25, 0x29	; 41
   18592:	3c 01       	movw	r6, r24
   18594:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   18596:	80 e8       	ldi	r24, 0x80	; 128
   18598:	9a e2       	ldi	r25, 0x2A	; 42
   1859a:	1c 01       	movw	r2, r24
            printf("  HEADER\n");
   1859c:	86 e7       	ldi	r24, 0x76	; 118
   1859e:	9a e2       	ldi	r25, 0x2A	; 42
   185a0:	6c 01       	movw	r12, r24
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   185a2:	8e e6       	ldi	r24, 0x6E	; 110
   185a4:	a8 2e       	mov	r10, r24
   185a6:	8a e2       	ldi	r24, 0x2A	; 42
   185a8:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   185aa:	f8 01       	movw	r30, r16
   185ac:	80 81       	ld	r24, Z
   185ae:	88 23       	and	r24, r24
   185b0:	09 f4       	brne	.+2      	; 0x185b4 <display_Config+0x96>
   185b2:	d8 c1       	rjmp	.+944    	; 0x18964 <display_Config+0x446>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   185b4:	82 30       	cpi	r24, 0x02	; 2
   185b6:	09 f0       	breq	.+2      	; 0x185ba <display_Config+0x9c>
   185b8:	2b c1       	rjmp	.+598    	; 0x18810 <display_Config+0x2f2>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   185ba:	23 81       	ldd	r18, Z+3	; 0x03
   185bc:	34 81       	ldd	r19, Z+4	; 0x04
   185be:	3b 87       	std	Y+11, r19	; 0x0b
   185c0:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   185c2:	87 ee       	ldi	r24, 0xE7	; 231
   185c4:	9b e2       	ldi	r25, 0x2B	; 43
   185c6:	1f 92       	push	r1
   185c8:	9f 93       	push	r25
   185ca:	8f 93       	push	r24
   185cc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            printf("  CONFIG\n");
   185d0:	8d ed       	ldi	r24, 0xDD	; 221
   185d2:	9b e2       	ldi	r25, 0x2B	; 43
   185d4:	1f 92       	push	r1
   185d6:	9f 93       	push	r25
   185d8:	8f 93       	push	r24
   185da:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   185de:	ea 85       	ldd	r30, Y+10	; 0x0a
   185e0:	fb 85       	ldd	r31, Y+11	; 0x0b
   185e2:	20 81       	ld	r18, Z
   185e4:	30 e0       	ldi	r19, 0x00	; 0
   185e6:	40 e0       	ldi	r20, 0x00	; 0
   185e8:	50 e0       	ldi	r21, 0x00	; 0
   185ea:	65 ed       	ldi	r22, 0xD5	; 213
   185ec:	7b e2       	ldi	r23, 0x2B	; 43
   185ee:	80 e0       	ldi	r24, 0x00	; 0
   185f0:	03 de       	rcall	.-1018   	; 0x181f8 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   185f2:	ea 85       	ldd	r30, Y+10	; 0x0a
   185f4:	fb 85       	ldd	r31, Y+11	; 0x0b
   185f6:	21 81       	ldd	r18, Z+1	; 0x01
   185f8:	30 e0       	ldi	r19, 0x00	; 0
   185fa:	40 e0       	ldi	r20, 0x00	; 0
   185fc:	50 e0       	ldi	r21, 0x00	; 0
   185fe:	61 ed       	ldi	r22, 0xD1	; 209
   18600:	7b e2       	ldi	r23, 0x2B	; 43
   18602:	80 e0       	ldi	r24, 0x00	; 0
   18604:	f9 dd       	rcall	.-1038   	; 0x181f8 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   18606:	4a 85       	ldd	r20, Y+10	; 0x0a
   18608:	5b 85       	ldd	r21, Y+11	; 0x0b
   1860a:	4e 5f       	subi	r20, 0xFE	; 254
   1860c:	5f 4f       	sbci	r21, 0xFF	; 255
   1860e:	6c ec       	ldi	r22, 0xCC	; 204
   18610:	7b e2       	ldi	r23, 0x2B	; 43
   18612:	80 e0       	ldi	r24, 0x00	; 0
   18614:	42 de       	rcall	.-892    	; 0x1829a <print_str_P>
            printf("  HEADER\n");
   18616:	82 ec       	ldi	r24, 0xC2	; 194
   18618:	9b e2       	ldi	r25, 0x2B	; 43
   1861a:	1f 92       	push	r1
   1861c:	9f 93       	push	r25
   1861e:	8f 93       	push	r24
   18620:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   18624:	ea 85       	ldd	r30, Y+10	; 0x0a
   18626:	fb 85       	ldd	r31, Y+11	; 0x0b
   18628:	23 a1       	ldd	r18, Z+35	; 0x23
   1862a:	34 a1       	ldd	r19, Z+36	; 0x24
   1862c:	40 e0       	ldi	r20, 0x00	; 0
   1862e:	50 e0       	ldi	r21, 0x00	; 0
   18630:	6f eb       	ldi	r22, 0xBF	; 191
   18632:	7b e2       	ldi	r23, 0x2B	; 43
   18634:	80 e0       	ldi	r24, 0x00	; 0
   18636:	e0 dd       	rcall	.-1088   	; 0x181f8 <print_var_P>
            printf("  CONTROLLER\n");
   18638:	81 eb       	ldi	r24, 0xB1	; 177
   1863a:	9b e2       	ldi	r25, 0x2B	; 43
   1863c:	1f 92       	push	r1
   1863e:	9f 93       	push	r25
   18640:	8f 93       	push	r24
   18642:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18646:	ea 85       	ldd	r30, Y+10	; 0x0a
   18648:	fb 85       	ldd	r31, Y+11	; 0x0b
   1864a:	25 a1       	ldd	r18, Z+37	; 0x25
   1864c:	36 a1       	ldd	r19, Z+38	; 0x26
   1864e:	40 e0       	ldi	r20, 0x00	; 0
   18650:	50 e0       	ldi	r21, 0x00	; 0
   18652:	61 ea       	ldi	r22, 0xA1	; 161
   18654:	7b e2       	ldi	r23, 0x2B	; 43
   18656:	80 e0       	ldi	r24, 0x00	; 0
   18658:	cf dd       	rcall	.-1122   	; 0x181f8 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   1865a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1865c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1865e:	27 a1       	ldd	r18, Z+39	; 0x27
   18660:	30 a5       	ldd	r19, Z+40	; 0x28
   18662:	40 e0       	ldi	r20, 0x00	; 0
   18664:	50 e0       	ldi	r21, 0x00	; 0
   18666:	63 e9       	ldi	r22, 0x93	; 147
   18668:	7b e2       	ldi	r23, 0x2B	; 43
   1866a:	80 e0       	ldi	r24, 0x00	; 0
   1866c:	c5 dd       	rcall	.-1142   	; 0x181f8 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   1866e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18670:	fb 85       	ldd	r31, Y+11	; 0x0b
   18672:	21 a5       	ldd	r18, Z+41	; 0x29
   18674:	30 e0       	ldi	r19, 0x00	; 0
   18676:	40 e0       	ldi	r20, 0x00	; 0
   18678:	50 e0       	ldi	r21, 0x00	; 0
   1867a:	6e e8       	ldi	r22, 0x8E	; 142
   1867c:	7b e2       	ldi	r23, 0x2B	; 43
   1867e:	80 e0       	ldi	r24, 0x00	; 0
   18680:	bb dd       	rcall	.-1162   	; 0x181f8 <print_var_P>
            printf("  UNIT\n");
   18682:	86 e8       	ldi	r24, 0x86	; 134
   18684:	9b e2       	ldi	r25, 0x2B	; 43
   18686:	1f 92       	push	r1
   18688:	9f 93       	push	r25
   1868a:	8f 93       	push	r24
   1868c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   18690:	ea 85       	ldd	r30, Y+10	; 0x0a
   18692:	fb 85       	ldd	r31, Y+11	; 0x0b
   18694:	22 a5       	ldd	r18, Z+42	; 0x2a
   18696:	30 e0       	ldi	r19, 0x00	; 0
   18698:	40 e0       	ldi	r20, 0x00	; 0
   1869a:	50 e0       	ldi	r21, 0x00	; 0
   1869c:	6c e7       	ldi	r22, 0x7C	; 124
   1869e:	7b e2       	ldi	r23, 0x2B	; 43
   186a0:	80 e0       	ldi	r24, 0x00	; 0
   186a2:	aa dd       	rcall	.-1196   	; 0x181f8 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   186a4:	ea 85       	ldd	r30, Y+10	; 0x0a
   186a6:	fb 85       	ldd	r31, Y+11	; 0x0b
   186a8:	23 a5       	ldd	r18, Z+43	; 0x2b
   186aa:	34 a5       	ldd	r19, Z+44	; 0x2c
   186ac:	45 a5       	ldd	r20, Z+45	; 0x2d
   186ae:	56 a5       	ldd	r21, Z+46	; 0x2e
   186b0:	6e e6       	ldi	r22, 0x6E	; 110
   186b2:	7b e2       	ldi	r23, 0x2B	; 43
   186b4:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   186b6:	a0 dd       	rcall	.-1216   	; 0x181f8 <print_var_P>
   186b8:	ea 85       	ldd	r30, Y+10	; 0x0a
   186ba:	fb 85       	ldd	r31, Y+11	; 0x0b
   186bc:	27 a5       	ldd	r18, Z+47	; 0x2f
   186be:	30 a9       	ldd	r19, Z+48	; 0x30
   186c0:	40 e0       	ldi	r20, 0x00	; 0
   186c2:	50 e0       	ldi	r21, 0x00	; 0
   186c4:	6e e5       	ldi	r22, 0x5E	; 94
   186c6:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   186c8:	80 e0       	ldi	r24, 0x00	; 0
   186ca:	96 dd       	rcall	.-1236   	; 0x181f8 <print_var_P>
   186cc:	ea 85       	ldd	r30, Y+10	; 0x0a
   186ce:	fb 85       	ldd	r31, Y+11	; 0x0b
   186d0:	21 a9       	ldd	r18, Z+49	; 0x31
   186d2:	30 e0       	ldi	r19, 0x00	; 0
   186d4:	40 e0       	ldi	r20, 0x00	; 0
   186d6:	50 e0       	ldi	r21, 0x00	; 0
   186d8:	6e e4       	ldi	r22, 0x4E	; 78
   186da:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   186dc:	80 e0       	ldi	r24, 0x00	; 0
   186de:	8c dd       	rcall	.-1256   	; 0x181f8 <print_var_P>
   186e0:	ea 85       	ldd	r30, Y+10	; 0x0a
   186e2:	fb 85       	ldd	r31, Y+11	; 0x0b
   186e4:	22 a9       	ldd	r18, Z+50	; 0x32
   186e6:	30 e0       	ldi	r19, 0x00	; 0
   186e8:	40 e0       	ldi	r20, 0x00	; 0
   186ea:	50 e0       	ldi	r21, 0x00	; 0
   186ec:	63 e4       	ldi	r22, 0x43	; 67
   186ee:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   186f0:	80 e0       	ldi	r24, 0x00	; 0
   186f2:	82 dd       	rcall	.-1276   	; 0x181f8 <print_var_P>
   186f4:	ea 85       	ldd	r30, Y+10	; 0x0a
   186f6:	fb 85       	ldd	r31, Y+11	; 0x0b
   186f8:	23 a9       	ldd	r18, Z+51	; 0x33
   186fa:	34 a9       	ldd	r19, Z+52	; 0x34
   186fc:	40 e0       	ldi	r20, 0x00	; 0
   186fe:	50 e0       	ldi	r21, 0x00	; 0
   18700:	68 e3       	ldi	r22, 0x38	; 56
   18702:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   18704:	80 e0       	ldi	r24, 0x00	; 0
   18706:	78 dd       	rcall	.-1296   	; 0x181f8 <print_var_P>
   18708:	ea 85       	ldd	r30, Y+10	; 0x0a
   1870a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1870c:	25 a9       	ldd	r18, Z+53	; 0x35
   1870e:	36 a9       	ldd	r19, Z+54	; 0x36
   18710:	40 e0       	ldi	r20, 0x00	; 0
   18712:	50 e0       	ldi	r21, 0x00	; 0
   18714:	60 e2       	ldi	r22, 0x20	; 32
   18716:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   18718:	80 e0       	ldi	r24, 0x00	; 0
   1871a:	6e dd       	rcall	.-1316   	; 0x181f8 <print_var_P>
   1871c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1871e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18720:	27 a9       	ldd	r18, Z+55	; 0x37
   18722:	30 ad       	ldd	r19, Z+56	; 0x38
   18724:	40 e0       	ldi	r20, 0x00	; 0
   18726:	50 e0       	ldi	r21, 0x00	; 0
   18728:	6d e0       	ldi	r22, 0x0D	; 13
   1872a:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   1872c:	80 e0       	ldi	r24, 0x00	; 0
   1872e:	64 dd       	rcall	.-1336   	; 0x181f8 <print_var_P>
   18730:	ea 85       	ldd	r30, Y+10	; 0x0a
   18732:	fb 85       	ldd	r31, Y+11	; 0x0b
   18734:	21 ad       	ldd	r18, Z+57	; 0x39
   18736:	32 ad       	ldd	r19, Z+58	; 0x3a
   18738:	40 e0       	ldi	r20, 0x00	; 0
   1873a:	50 e0       	ldi	r21, 0x00	; 0
   1873c:	61 e0       	ldi	r22, 0x01	; 1
   1873e:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   18740:	80 e0       	ldi	r24, 0x00	; 0
   18742:	5a dd       	rcall	.-1356   	; 0x181f8 <print_var_P>
   18744:	ea 85       	ldd	r30, Y+10	; 0x0a
   18746:	fb 85       	ldd	r31, Y+11	; 0x0b
   18748:	23 ad       	ldd	r18, Z+59	; 0x3b
   1874a:	30 e0       	ldi	r19, 0x00	; 0
   1874c:	40 e0       	ldi	r20, 0x00	; 0
   1874e:	50 e0       	ldi	r21, 0x00	; 0
   18750:	6e ee       	ldi	r22, 0xEE	; 238
   18752:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18754:	80 e0       	ldi	r24, 0x00	; 0
   18756:	50 dd       	rcall	.-1376   	; 0x181f8 <print_var_P>
   18758:	ea 85       	ldd	r30, Y+10	; 0x0a
   1875a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1875c:	24 ad       	ldd	r18, Z+60	; 0x3c
   1875e:	30 e0       	ldi	r19, 0x00	; 0
   18760:	40 e0       	ldi	r20, 0x00	; 0
   18762:	50 e0       	ldi	r21, 0x00	; 0
   18764:	60 ee       	ldi	r22, 0xE0	; 224
   18766:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   18768:	80 e0       	ldi	r24, 0x00	; 0
   1876a:	46 dd       	rcall	.-1396   	; 0x181f8 <print_var_P>
   1876c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1876e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18770:	25 ad       	ldd	r18, Z+61	; 0x3d
   18772:	30 e0       	ldi	r19, 0x00	; 0
   18774:	40 e0       	ldi	r20, 0x00	; 0
   18776:	50 e0       	ldi	r21, 0x00	; 0
   18778:	6e ec       	ldi	r22, 0xCE	; 206
   1877a:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  VOLUME\n");
   1877c:	80 e0       	ldi	r24, 0x00	; 0
   1877e:	3c dd       	rcall	.-1416   	; 0x181f8 <print_var_P>
   18780:	84 ec       	ldi	r24, 0xC4	; 196
   18782:	9a e2       	ldi	r25, 0x2A	; 42
   18784:	1f 92       	push	r1
   18786:	9f 93       	push	r25
   18788:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   1878a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1878e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18790:	fb 85       	ldd	r31, Y+11	; 0x0b
   18792:	fe 96       	adiw	r30, 0x3e	; 62
   18794:	20 81       	ld	r18, Z
   18796:	31 81       	ldd	r19, Z+1	; 0x01
   18798:	42 81       	ldd	r20, Z+2	; 0x02
   1879a:	53 81       	ldd	r21, Z+3	; 0x03
   1879c:	67 eb       	ldi	r22, 0xB7	; 183
   1879e:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   187a0:	80 e0       	ldi	r24, 0x00	; 0
   187a2:	2a dd       	rcall	.-1452   	; 0x181f8 <print_var_P>
   187a4:	ea 85       	ldd	r30, Y+10	; 0x0a
   187a6:	fb 85       	ldd	r31, Y+11	; 0x0b
   187a8:	ee 5b       	subi	r30, 0xBE	; 190
   187aa:	ff 4f       	sbci	r31, 0xFF	; 255
   187ac:	20 81       	ld	r18, Z
   187ae:	30 e0       	ldi	r19, 0x00	; 0
   187b0:	40 e0       	ldi	r20, 0x00	; 0
   187b2:	50 e0       	ldi	r21, 0x00	; 0
   187b4:	6e ea       	ldi	r22, 0xAE	; 174
   187b6:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   187b8:	80 e0       	ldi	r24, 0x00	; 0
   187ba:	1e dd       	rcall	.-1476   	; 0x181f8 <print_var_P>
   187bc:	ea 85       	ldd	r30, Y+10	; 0x0a
   187be:	fb 85       	ldd	r31, Y+11	; 0x0b
   187c0:	ed 5b       	subi	r30, 0xBD	; 189
   187c2:	ff 4f       	sbci	r31, 0xFF	; 255
   187c4:	20 81       	ld	r18, Z
   187c6:	31 81       	ldd	r19, Z+1	; 0x01
   187c8:	40 e0       	ldi	r20, 0x00	; 0
   187ca:	50 e0       	ldi	r21, 0x00	; 0
   187cc:	63 ea       	ldi	r22, 0xA3	; 163
   187ce:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   187d0:	80 e0       	ldi	r24, 0x00	; 0
   187d2:	12 dd       	rcall	.-1500   	; 0x181f8 <print_var_P>
   187d4:	ea 85       	ldd	r30, Y+10	; 0x0a
   187d6:	fb 85       	ldd	r31, Y+11	; 0x0b
   187d8:	eb 5b       	subi	r30, 0xBB	; 187
   187da:	ff 4f       	sbci	r31, 0xFF	; 255
   187dc:	20 81       	ld	r18, Z
   187de:	31 81       	ldd	r19, Z+1	; 0x01
   187e0:	42 81       	ldd	r20, Z+2	; 0x02
   187e2:	53 81       	ldd	r21, Z+3	; 0x03
   187e4:	62 e9       	ldi	r22, 0x92	; 146
   187e6:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   187e8:	80 e0       	ldi	r24, 0x00	; 0
   187ea:	06 dd       	rcall	.-1524   	; 0x181f8 <print_var_P>
   187ec:	2a 85       	ldd	r18, Y+10	; 0x0a
   187ee:	3b 85       	ldd	r19, Y+11	; 0x0b
   187f0:	27 5b       	subi	r18, 0xB7	; 183
   187f2:	3f 4f       	sbci	r19, 0xFF	; 255
   187f4:	f9 01       	movw	r30, r18
   187f6:	20 81       	ld	r18, Z
   187f8:	30 e0       	ldi	r19, 0x00	; 0
   187fa:	40 e0       	ldi	r20, 0x00	; 0
   187fc:	50 e0       	ldi	r21, 0x00	; 0
   187fe:	67 e8       	ldi	r22, 0x87	; 135
   18800:	7a e2       	ldi	r23, 0x2A	; 42
   18802:	80 e0       	ldi	r24, 0x00	; 0
   18804:	f9 dc       	rcall	.-1550   	; 0x181f8 <print_var_P>
   18806:	0f b6       	in	r0, 0x3f	; 63
   18808:	f8 94       	cli
   1880a:	de bf       	out	0x3e, r29	; 62
   1880c:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1880e:	cd bf       	out	0x3d, r28	; 61
   18810:	f8 01       	movw	r30, r16
   18812:	80 81       	ld	r24, Z
   18814:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18816:	09 f0       	breq	.+2      	; 0x1881a <display_Config+0x2fc>
   18818:	76 c0       	rjmp	.+236    	; 0x18906 <display_Config+0x3e8>
   1881a:	23 81       	ldd	r18, Z+3	; 0x03
   1881c:	34 81       	ldd	r19, Z+4	; 0x04

            printf("AMIGO\n");
   1881e:	3b 87       	std	Y+11, r19	; 0x0b
   18820:	2a 87       	std	Y+10, r18	; 0x0a
   18822:	1f 92       	push	r1
   18824:	3f 92       	push	r3
            printf("  HEADER\n");
   18826:	2f 92       	push	r2
   18828:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1882c:	1f 92       	push	r1
   1882e:	df 92       	push	r13
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18830:	cf 92       	push	r12
   18832:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18836:	ea 85       	ldd	r30, Y+10	; 0x0a
   18838:	fb 85       	ldd	r31, Y+11	; 0x0b
   1883a:	20 81       	ld	r18, Z
   1883c:	30 e0       	ldi	r19, 0x00	; 0
   1883e:	40 e0       	ldi	r20, 0x00	; 0
   18840:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18842:	b5 01       	movw	r22, r10
   18844:	80 e0       	ldi	r24, 0x00	; 0
   18846:	d8 dc       	rcall	.-1616   	; 0x181f8 <print_var_P>
   18848:	ea 85       	ldd	r30, Y+10	; 0x0a
   1884a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1884c:	21 81       	ldd	r18, Z+1	; 0x01
   1884e:	30 e0       	ldi	r19, 0x00	; 0
   18850:	40 e0       	ldi	r20, 0x00	; 0
   18852:	50 e0       	ldi	r21, 0x00	; 0
   18854:	6a e6       	ldi	r22, 0x6A	; 106
                print_str("FILE", AMIGOp->HEADER.NAME);
   18856:	7a e2       	ldi	r23, 0x2A	; 42
   18858:	80 e0       	ldi	r24, 0x00	; 0
   1885a:	ce dc       	rcall	.-1636   	; 0x181f8 <print_var_P>
   1885c:	4a 85       	ldd	r20, Y+10	; 0x0a
   1885e:	5b 85       	ldd	r21, Y+11	; 0x0b
   18860:	4e 5f       	subi	r20, 0xFE	; 254
   18862:	5f 4f       	sbci	r21, 0xFF	; 255
   18864:	65 e6       	ldi	r22, 0x65	; 101
   18866:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   18868:	80 e0       	ldi	r24, 0x00	; 0
   1886a:	17 dd       	rcall	.-1490   	; 0x1829a <print_str_P>
   1886c:	8b e5       	ldi	r24, 0x5B	; 91
   1886e:	9a e2       	ldi	r25, 0x2A	; 42
   18870:	1f 92       	push	r1
   18872:	9f 93       	push	r25
   18874:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18876:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1887a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1887c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1887e:	23 a1       	ldd	r18, Z+35	; 0x23
   18880:	34 a1       	ldd	r19, Z+36	; 0x24
   18882:	40 e0       	ldi	r20, 0x00	; 0
   18884:	50 e0       	ldi	r21, 0x00	; 0
   18886:	68 e5       	ldi	r22, 0x58	; 88
   18888:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  GEOMETRY\n");
   1888a:	80 e0       	ldi	r24, 0x00	; 0
   1888c:	b5 dc       	rcall	.-1686   	; 0x181f8 <print_var_P>
   1888e:	8c e4       	ldi	r24, 0x4C	; 76
   18890:	9a e2       	ldi	r25, 0x2A	; 42
   18892:	1f 92       	push	r1
   18894:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   18896:	8f 93       	push	r24
   18898:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1889c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1889e:	fb 85       	ldd	r31, Y+11	; 0x0b
   188a0:	25 a1       	ldd	r18, Z+37	; 0x25
   188a2:	36 a1       	ldd	r19, Z+38	; 0x26
   188a4:	03 2e       	mov	r0, r19
   188a6:	00 0c       	add	r0, r0
   188a8:	44 0b       	sbc	r20, r20
   188aa:	55 0b       	sbc	r21, r21
   188ac:	6b e3       	ldi	r22, 0x3B	; 59
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   188ae:	7a e2       	ldi	r23, 0x2A	; 42
   188b0:	80 e0       	ldi	r24, 0x00	; 0
   188b2:	a2 dc       	rcall	.-1724   	; 0x181f8 <print_var_P>
   188b4:	ea 85       	ldd	r30, Y+10	; 0x0a
   188b6:	fb 85       	ldd	r31, Y+11	; 0x0b
   188b8:	27 a1       	ldd	r18, Z+39	; 0x27
   188ba:	30 a5       	ldd	r19, Z+40	; 0x28
   188bc:	03 2e       	mov	r0, r19
   188be:	00 0c       	add	r0, r0
   188c0:	44 0b       	sbc	r20, r20
   188c2:	55 0b       	sbc	r21, r21
   188c4:	69 e2       	ldi	r22, 0x29	; 41
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   188c6:	7a e2       	ldi	r23, 0x2A	; 42
   188c8:	80 e0       	ldi	r24, 0x00	; 0
   188ca:	96 dc       	rcall	.-1748   	; 0x181f8 <print_var_P>
   188cc:	ea 85       	ldd	r30, Y+10	; 0x0a
   188ce:	fb 85       	ldd	r31, Y+11	; 0x0b
   188d0:	21 a5       	ldd	r18, Z+41	; 0x29
   188d2:	32 a5       	ldd	r19, Z+42	; 0x2a
   188d4:	03 2e       	mov	r0, r19
   188d6:	00 0c       	add	r0, r0
   188d8:	44 0b       	sbc	r20, r20
   188da:	55 0b       	sbc	r21, r21
   188dc:	63 e2       	ldi	r22, 0x23	; 35
   188de:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   188e0:	80 e0       	ldi	r24, 0x00	; 0
   188e2:	8a dc       	rcall	.-1772   	; 0x181f8 <print_var_P>
   188e4:	ea 85       	ldd	r30, Y+10	; 0x0a
   188e6:	fb 85       	ldd	r31, Y+11	; 0x0b
   188e8:	23 a5       	ldd	r18, Z+43	; 0x2b
   188ea:	34 a5       	ldd	r19, Z+44	; 0x2c
   188ec:	03 2e       	mov	r0, r19
   188ee:	00 0c       	add	r0, r0
   188f0:	44 0b       	sbc	r20, r20
   188f2:	55 0b       	sbc	r21, r21
   188f4:	69 e1       	ldi	r22, 0x19	; 25
   188f6:	7a e2       	ldi	r23, 0x2A	; 42
   188f8:	80 e0       	ldi	r24, 0x00	; 0
   188fa:	7e dc       	rcall	.-1796   	; 0x181f8 <print_var_P>
   188fc:	0f b6       	in	r0, 0x3f	; 63
   188fe:	f8 94       	cli
   18900:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   18902:	0f be       	out	0x3f, r0	; 63
   18904:	cd bf       	out	0x3d, r28	; 61
   18906:	f8 01       	movw	r30, r16
   18908:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   1890a:	83 30       	cpi	r24, 0x03	; 3
   1890c:	09 f5       	brne	.+66     	; 0x18950 <display_Config+0x432>
   1890e:	23 81       	ldd	r18, Z+3	; 0x03
   18910:	34 81       	ldd	r19, Z+4	; 0x04

            printf("PRINTER\n");
   18912:	3b 87       	std	Y+11, r19	; 0x0b
   18914:	2a 87       	std	Y+10, r18	; 0x0a
   18916:	1f 92       	push	r1
   18918:	3d 81       	ldd	r19, Y+5	; 0x05
   1891a:	3f 93       	push	r19
   1891c:	4c 81       	ldd	r20, Y+4	; 0x04
   1891e:	4f 93       	push	r20
            printf("  CONFIG\n");
   18920:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18924:	1f 92       	push	r1
   18926:	88 85       	ldd	r24, Y+8	; 0x08
   18928:	8f 93       	push	r24
   1892a:	9f 81       	ldd	r25, Y+7	; 0x07
   1892c:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1892e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18932:	ea 85       	ldd	r30, Y+10	; 0x0a
   18934:	fb 85       	ldd	r31, Y+11	; 0x0b
   18936:	20 81       	ld	r18, Z
   18938:	30 e0       	ldi	r19, 0x00	; 0
   1893a:	40 e0       	ldi	r20, 0x00	; 0
   1893c:	50 e0       	ldi	r21, 0x00	; 0
   1893e:	88 2d       	mov	r24, r8
   18940:	b3 01       	movw	r22, r6
   18942:	5a dc       	rcall	.-1868   	; 0x181f8 <print_var_P>
   18944:	0f 90       	pop	r0
   18946:	0f 90       	pop	r0
   18948:	0f 90       	pop	r0
   1894a:	0f 90       	pop	r0
   1894c:	0f 90       	pop	r0
        }
        printf("\n");
   1894e:	0f 90       	pop	r0
   18950:	1f 92       	push	r1
   18952:	fa 81       	ldd	r31, Y+2	; 0x02
   18954:	ff 93       	push	r31
   18956:	29 81       	ldd	r18, Y+1	; 0x01
   18958:	2f 93       	push	r18
   1895a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1895e:	0f 90       	pop	r0
   18960:	0f 90       	pop	r0
   18962:	0f 90       	pop	r0
   18964:	09 5f       	subi	r16, 0xF9	; 249
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18966:	1f 4f       	sbci	r17, 0xFF	; 255
   18968:	3e e1       	ldi	r19, 0x1E	; 30
   1896a:	07 3e       	cpi	r16, 0xE7	; 231
   1896c:	13 07       	cpc	r17, r19
   1896e:	09 f0       	breq	.+2      	; 0x18972 <display_Config+0x454>
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18970:	1c ce       	rjmp	.-968    	; 0x185aa <display_Config+0x8c>
   18972:	87 ef       	ldi	r24, 0xF7	; 247
   18974:	99 e2       	ldi	r25, 0x29	; 41
   18976:	1f 92       	push	r1
   18978:	9f 93       	push	r25
   1897a:	8f 93       	push	r24
   1897c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("\n");
   18980:	85 ef       	ldi	r24, 0xF5	; 245
   18982:	99 e2       	ldi	r25, 0x29	; 41
   18984:	1f 92       	push	r1
   18986:	9f 93       	push	r25
   18988:	8f 93       	push	r24
   1898a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("\n");
   1898e:	83 ef       	ldi	r24, 0xF3	; 243
   18990:	99 e2       	ldi	r25, 0x29	; 41
   18992:	1f 92       	push	r1
   18994:	9f 93       	push	r25
   18996:	8f 93       	push	r24
   18998:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   1899c:	0f b6       	in	r0, 0x3f	; 63
   1899e:	f8 94       	cli
   189a0:	de bf       	out	0x3e, r29	; 62
   189a2:	0f be       	out	0x3f, r0	; 63
   189a4:	cd bf       	out	0x3d, r28	; 61
   189a6:	2b 96       	adiw	r28, 0x0b	; 11
   189a8:	0f b6       	in	r0, 0x3f	; 63
   189aa:	f8 94       	cli
   189ac:	de bf       	out	0x3e, r29	; 62
   189ae:	0f be       	out	0x3f, r0	; 63
   189b0:	cd bf       	out	0x3d, r28	; 61
   189b2:	df 91       	pop	r29
   189b4:	cf 91       	pop	r28
   189b6:	1f 91       	pop	r17
   189b8:	0f 91       	pop	r16
   189ba:	ef 90       	pop	r14
   189bc:	df 90       	pop	r13
   189be:	cf 90       	pop	r12
   189c0:	bf 90       	pop	r11
   189c2:	af 90       	pop	r10
   189c4:	8f 90       	pop	r8
   189c6:	7f 90       	pop	r7
   189c8:	6f 90       	pop	r6
   189ca:	4f 90       	pop	r4
   189cc:	3f 90       	pop	r3
   189ce:	2f 90       	pop	r2
   189d0:	08 95       	ret

000189d2 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   189d2:	2f 92       	push	r2
   189d4:	3f 92       	push	r3
   189d6:	4f 92       	push	r4
   189d8:	5f 92       	push	r5
   189da:	6f 92       	push	r6
   189dc:	7f 92       	push	r7
   189de:	8f 92       	push	r8
   189e0:	af 92       	push	r10
   189e2:	bf 92       	push	r11
   189e4:	cf 92       	push	r12
   189e6:	df 92       	push	r13
   189e8:	ef 92       	push	r14
   189ea:	ff 92       	push	r15
   189ec:	0f 93       	push	r16
   189ee:	1f 93       	push	r17
   189f0:	cf 93       	push	r28
   189f2:	df 93       	push	r29
   189f4:	cd b7       	in	r28, 0x3d	; 61
   189f6:	de b7       	in	r29, 0x3e	; 62
   189f8:	cd 55       	subi	r28, 0x5D	; 93
   189fa:	d1 09       	sbc	r29, r1
   189fc:	0f b6       	in	r0, 0x3f	; 63
   189fe:	f8 94       	cli
   18a00:	de bf       	out	0x3e, r29	; 62
   18a02:	0f be       	out	0x3f, r0	; 63
   18a04:	cd bf       	out	0x3d, r28	; 61
   18a06:	8f ea       	ldi	r24, 0xAF	; 175
   18a08:	a8 2e       	mov	r10, r24
   18a0a:	8e e1       	ldi	r24, 0x1E	; 30
   18a0c:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   18a0e:	21 e0       	ldi	r18, 0x01	; 1
   18a10:	30 e0       	ldi	r19, 0x00	; 0
   18a12:	65 96       	adiw	r28, 0x15	; 21
   18a14:	3f af       	std	Y+63, r19	; 0x3f
   18a16:	2e af       	std	Y+62, r18	; 0x3e
   18a18:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   18a1a:	81 e0       	ldi	r24, 0x01	; 1
   18a1c:	90 e0       	ldi	r25, 0x00	; 0
   18a1e:	63 96       	adiw	r28, 0x13	; 19
   18a20:	9f af       	std	Y+63, r25	; 0x3f
   18a22:	8e af       	std	Y+62, r24	; 0x3e
   18a24:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   18a26:	8f e9       	ldi	r24, 0x9F	; 159
   18a28:	99 e2       	ldi	r25, 0x29	; 41
   18a2a:	9c 01       	movw	r18, r24
   18a2c:	40 e0       	ldi	r20, 0x00	; 0
   18a2e:	68 96       	adiw	r28, 0x18	; 24
   18a30:	2d af       	std	Y+61, r18	; 0x3d
   18a32:	3e af       	std	Y+62, r19	; 0x3e
   18a34:	4f af       	std	Y+63, r20	; 0x3f
   18a36:	68 97       	sbiw	r28, 0x18	; 24
   18a38:	2e 01       	movw	r4, r28
   18a3a:	31 e3       	ldi	r19, 0x31	; 49
   18a3c:	43 0e       	add	r4, r19
   18a3e:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18a40:	87 ea       	ldi	r24, 0xA7	; 167
   18a42:	99 e2       	ldi	r25, 0x29	; 41
   18a44:	9c 01       	movw	r18, r24
   18a46:	40 e0       	ldi	r20, 0x00	; 0
   18a48:	6b 96       	adiw	r28, 0x1b	; 27
   18a4a:	2d af       	std	Y+61, r18	; 0x3d
   18a4c:	3e af       	std	Y+62, r19	; 0x3e
   18a4e:	4f af       	std	Y+63, r20	; 0x3f
   18a50:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   18a52:	89 ec       	ldi	r24, 0xC9	; 201
   18a54:	99 e2       	ldi	r25, 0x29	; 41
   18a56:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18a58:	81 ed       	ldi	r24, 0xD1	; 209
   18a5a:	99 e2       	ldi	r25, 0x29	; 41
   18a5c:	9c 01       	movw	r18, r24
   18a5e:	40 e0       	ldi	r20, 0x00	; 0
   18a60:	6e 96       	adiw	r28, 0x1e	; 30
   18a62:	2d af       	std	Y+61, r18	; 0x3d
   18a64:	3e af       	std	Y+62, r19	; 0x3e
   18a66:	4f af       	std	Y+63, r20	; 0x3f
   18a68:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18a6a:	f5 01       	movw	r30, r10
   18a6c:	80 81       	ld	r24, Z
   18a6e:	88 23       	and	r24, r24
   18a70:	09 f4       	brne	.+2      	; 0x18a74 <format_drives+0xa2>
   18a72:	bc c0       	rjmp	.+376    	; 0x18bec <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18a74:	82 30       	cpi	r24, 0x02	; 2
   18a76:	09 f0       	breq	.+2      	; 0x18a7a <format_drives+0xa8>
   18a78:	4c c0       	rjmp	.+152    	; 0x18b12 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18a7a:	03 81       	ldd	r16, Z+3	; 0x03
   18a7c:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   18a7e:	18 01       	movw	r2, r16
   18a80:	f2 e0       	ldi	r31, 0x02	; 2
   18a82:	2f 0e       	add	r2, r31
   18a84:	31 1c       	adc	r3, r1
   18a86:	be 01       	movw	r22, r28
   18a88:	6f 5f       	subi	r22, 0xFF	; 255
   18a8a:	7f 4f       	sbci	r23, 0xFF	; 255
   18a8c:	c1 01       	movw	r24, r2
   18a8e:	0e 94 55 7d 	call	0xfaaa	; 0xfaaa <stat>
   18a92:	01 96       	adiw	r24, 0x01	; 1
   18a94:	a1 f5       	brne	.+104    	; 0x18afe <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   18a96:	f8 01       	movw	r30, r16
   18a98:	87 a5       	ldd	r24, Z+47	; 0x2f
   18a9a:	90 a9       	ldd	r25, Z+48	; 0x30
   18a9c:	81 15       	cp	r24, r1
   18a9e:	91 40       	sbci	r25, 0x01	; 1
   18aa0:	49 f0       	breq	.+18     	; 0x18ab4 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   18aa2:	1f 92       	push	r1
   18aa4:	6d 96       	adiw	r28, 0x1d	; 29
   18aa6:	2f ad       	ldd	r18, Y+63	; 0x3f
   18aa8:	6d 97       	sbiw	r28, 0x1d	; 29
   18aaa:	2f 93       	push	r18
   18aac:	6c 96       	adiw	r28, 0x1c	; 28
   18aae:	3f ad       	ldd	r19, Y+63	; 0x3f
   18ab0:	6c 97       	sbiw	r28, 0x1c	; 28
   18ab2:	51 c0       	rjmp	.+162    	; 0x18b56 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   18ab4:	f8 01       	movw	r30, r16
   18ab6:	eb 5b       	subi	r30, 0xBB	; 187
   18ab8:	ff 4f       	sbci	r31, 0xFF	; 255
   18aba:	c0 80       	ld	r12, Z
   18abc:	d1 80       	ldd	r13, Z+1	; 0x01
   18abe:	e2 80       	ldd	r14, Z+2	; 0x02
   18ac0:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   18ac2:	63 96       	adiw	r28, 0x13	; 19
   18ac4:	4f ad       	ldd	r20, Y+63	; 0x3f
   18ac6:	63 97       	sbiw	r28, 0x13	; 19
   18ac8:	4f 93       	push	r20
   18aca:	62 96       	adiw	r28, 0x12	; 18
   18acc:	8f ad       	ldd	r24, Y+63	; 0x3f
   18ace:	62 97       	sbiw	r28, 0x12	; 18
   18ad0:	8f 93       	push	r24
   18ad2:	1f 92       	push	r1
   18ad4:	7f 92       	push	r7
   18ad6:	6f 92       	push	r6
   18ad8:	5f 92       	push	r5
   18ada:	4f 92       	push	r4
   18adc:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   18ae0:	87 01       	movw	r16, r14
   18ae2:	76 01       	movw	r14, r12
   18ae4:	20 e8       	ldi	r18, 0x80	; 128
   18ae6:	30 e0       	ldi	r19, 0x00	; 0
   18ae8:	40 e0       	ldi	r20, 0x00	; 0
   18aea:	50 e0       	ldi	r21, 0x00	; 0
   18aec:	b2 01       	movw	r22, r4
   18aee:	c1 01       	movw	r24, r2
   18af0:	0e 94 31 e4 	call	0x1c862	; 0x1c862 <lif_create_image>
   18af4:	0f b6       	in	r0, 0x3f	; 63
   18af6:	f8 94       	cli
   18af8:	de bf       	out	0x3e, r29	; 62
   18afa:	0f be       	out	0x3f, r0	; 63
   18afc:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   18afe:	63 96       	adiw	r28, 0x13	; 19
   18b00:	2e ad       	ldd	r18, Y+62	; 0x3e
   18b02:	3f ad       	ldd	r19, Y+63	; 0x3f
   18b04:	63 97       	sbiw	r28, 0x13	; 19
   18b06:	2f 5f       	subi	r18, 0xFF	; 255
   18b08:	3f 4f       	sbci	r19, 0xFF	; 255
   18b0a:	63 96       	adiw	r28, 0x13	; 19
   18b0c:	3f af       	std	Y+63, r19	; 0x3f
   18b0e:	2e af       	std	Y+62, r18	; 0x3e
   18b10:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18b12:	f5 01       	movw	r30, r10
   18b14:	80 81       	ld	r24, Z
   18b16:	81 30       	cpi	r24, 0x01	; 1
   18b18:	09 f0       	breq	.+2      	; 0x18b1c <format_drives+0x14a>
   18b1a:	68 c0       	rjmp	.+208    	; 0x18bec <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18b1c:	03 81       	ldd	r16, Z+3	; 0x03
   18b1e:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   18b20:	68 01       	movw	r12, r16
   18b22:	f2 e0       	ldi	r31, 0x02	; 2
   18b24:	cf 0e       	add	r12, r31
   18b26:	d1 1c       	adc	r13, r1
   18b28:	be 01       	movw	r22, r28
   18b2a:	6f 5f       	subi	r22, 0xFF	; 255
   18b2c:	7f 4f       	sbci	r23, 0xFF	; 255
   18b2e:	c6 01       	movw	r24, r12
   18b30:	0e 94 55 7d 	call	0xfaaa	; 0xfaaa <stat>
   18b34:	01 96       	adiw	r24, 0x01	; 1
   18b36:	09 f0       	breq	.+2      	; 0x18b3a <format_drives+0x168>
   18b38:	50 c0       	rjmp	.+160    	; 0x18bda <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   18b3a:	f8 01       	movw	r30, r16
   18b3c:	85 a1       	ldd	r24, Z+37	; 0x25
   18b3e:	96 a1       	ldd	r25, Z+38	; 0x26
   18b40:	81 15       	cp	r24, r1
   18b42:	91 40       	sbci	r25, 0x01	; 1
   18b44:	79 f0       	breq	.+30     	; 0x18b64 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   18b46:	1f 92       	push	r1
   18b48:	6a 96       	adiw	r28, 0x1a	; 26
   18b4a:	2f ad       	ldd	r18, Y+63	; 0x3f
   18b4c:	6a 97       	sbiw	r28, 0x1a	; 26
   18b4e:	2f 93       	push	r18
   18b50:	69 96       	adiw	r28, 0x19	; 25
   18b52:	3f ad       	ldd	r19, Y+63	; 0x3f
   18b54:	69 97       	sbiw	r28, 0x19	; 25
   18b56:	3f 93       	push	r19
   18b58:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                    continue;
   18b5c:	0f 90       	pop	r0
   18b5e:	0f 90       	pop	r0
   18b60:	0f 90       	pop	r0
   18b62:	44 c0       	rjmp	.+136    	; 0x18bec <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   18b64:	f8 01       	movw	r30, r16
   18b66:	47 a1       	ldd	r20, Z+39	; 0x27
   18b68:	50 a5       	ldd	r21, Z+40	; 0x28
   18b6a:	81 a5       	ldd	r24, Z+41	; 0x29
   18b6c:	92 a5       	ldd	r25, Z+42	; 0x2a
   18b6e:	48 9f       	mul	r20, r24
   18b70:	90 01       	movw	r18, r0
   18b72:	49 9f       	mul	r20, r25
   18b74:	30 0d       	add	r19, r0
   18b76:	58 9f       	mul	r21, r24
   18b78:	30 0d       	add	r19, r0
   18b7a:	11 24       	eor	r1, r1
   18b7c:	83 a5       	ldd	r24, Z+43	; 0x2b
   18b7e:	94 a5       	ldd	r25, Z+44	; 0x2c
   18b80:	28 9f       	mul	r18, r24
   18b82:	70 01       	movw	r14, r0
   18b84:	29 9f       	mul	r18, r25
   18b86:	f0 0c       	add	r15, r0
   18b88:	38 9f       	mul	r19, r24
   18b8a:	f0 0c       	add	r15, r0
   18b8c:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   18b8e:	65 96       	adiw	r28, 0x15	; 21
   18b90:	ff ad       	ldd	r31, Y+63	; 0x3f
   18b92:	65 97       	sbiw	r28, 0x15	; 21
   18b94:	ff 93       	push	r31
   18b96:	64 96       	adiw	r28, 0x14	; 20
   18b98:	2f ad       	ldd	r18, Y+63	; 0x3f
   18b9a:	64 97       	sbiw	r28, 0x14	; 20
   18b9c:	2f 93       	push	r18
   18b9e:	1f 92       	push	r1
   18ba0:	67 96       	adiw	r28, 0x17	; 23
   18ba2:	3f ad       	ldd	r19, Y+63	; 0x3f
   18ba4:	67 97       	sbiw	r28, 0x17	; 23
   18ba6:	3f 93       	push	r19
   18ba8:	66 96       	adiw	r28, 0x16	; 22
   18baa:	4f ad       	ldd	r20, Y+63	; 0x3f
   18bac:	66 97       	sbiw	r28, 0x16	; 22
   18bae:	4f 93       	push	r20
   18bb0:	5f 92       	push	r5
   18bb2:	4f 92       	push	r4
   18bb4:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   18bb8:	0f 2c       	mov	r0, r15
   18bba:	00 0c       	add	r0, r0
   18bbc:	00 0b       	sbc	r16, r16
   18bbe:	11 0b       	sbc	r17, r17
   18bc0:	2f e0       	ldi	r18, 0x0F	; 15
   18bc2:	30 e0       	ldi	r19, 0x00	; 0
   18bc4:	40 e0       	ldi	r20, 0x00	; 0
   18bc6:	50 e0       	ldi	r21, 0x00	; 0
   18bc8:	b2 01       	movw	r22, r4
   18bca:	c6 01       	movw	r24, r12
   18bcc:	0e 94 31 e4 	call	0x1c862	; 0x1c862 <lif_create_image>
   18bd0:	0f b6       	in	r0, 0x3f	; 63
   18bd2:	f8 94       	cli
   18bd4:	de bf       	out	0x3e, r29	; 62
   18bd6:	0f be       	out	0x3f, r0	; 63
   18bd8:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   18bda:	65 96       	adiw	r28, 0x15	; 21
   18bdc:	ee ad       	ldd	r30, Y+62	; 0x3e
   18bde:	ff ad       	ldd	r31, Y+63	; 0x3f
   18be0:	65 97       	sbiw	r28, 0x15	; 21
   18be2:	31 96       	adiw	r30, 0x01	; 1
   18be4:	65 96       	adiw	r28, 0x15	; 21
   18be6:	ff af       	std	Y+63, r31	; 0x3f
   18be8:	ee af       	std	Y+62, r30	; 0x3e
   18bea:	65 97       	sbiw	r28, 0x15	; 21
   18bec:	f7 e0       	ldi	r31, 0x07	; 7
   18bee:	af 0e       	add	r10, r31
   18bf0:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   18bf2:	27 ee       	ldi	r18, 0xE7	; 231
   18bf4:	3e e1       	ldi	r19, 0x1E	; 30
   18bf6:	2a 15       	cp	r18, r10
   18bf8:	3b 05       	cpc	r19, r11
   18bfa:	09 f0       	breq	.+2      	; 0x18bfe <format_drives+0x22c>
   18bfc:	36 cf       	rjmp	.-404    	; 0x18a6a <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   18bfe:	8d e9       	ldi	r24, 0x9D	; 157
   18c00:	99 e2       	ldi	r25, 0x29	; 41
   18c02:	1f 92       	push	r1
   18c04:	9f 93       	push	r25
   18c06:	8f 93       	push	r24
   18c08:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   18c0c:	0f 90       	pop	r0
   18c0e:	0f 90       	pop	r0
   18c10:	0f 90       	pop	r0
   18c12:	c3 5a       	subi	r28, 0xA3	; 163
   18c14:	df 4f       	sbci	r29, 0xFF	; 255
   18c16:	0f b6       	in	r0, 0x3f	; 63
   18c18:	f8 94       	cli
   18c1a:	de bf       	out	0x3e, r29	; 62
   18c1c:	0f be       	out	0x3f, r0	; 63
   18c1e:	cd bf       	out	0x3d, r28	; 61
   18c20:	df 91       	pop	r29
   18c22:	cf 91       	pop	r28
   18c24:	1f 91       	pop	r17
   18c26:	0f 91       	pop	r16
   18c28:	ff 90       	pop	r15
   18c2a:	ef 90       	pop	r14
   18c2c:	df 90       	pop	r13
   18c2e:	cf 90       	pop	r12
   18c30:	bf 90       	pop	r11
   18c32:	af 90       	pop	r10
   18c34:	8f 90       	pop	r8
   18c36:	7f 90       	pop	r7
   18c38:	6f 90       	pop	r6
   18c3a:	5f 90       	pop	r5
   18c3c:	4f 90       	pop	r4
   18c3e:	3f 90       	pop	r3
   18c40:	2f 90       	pop	r2
   18c42:	08 95       	ret

00018c44 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   18c44:	a2 e0       	ldi	r26, 0x02	; 2
   18c46:	b0 e0       	ldi	r27, 0x00	; 0
   18c48:	e8 e2       	ldi	r30, 0x28	; 40
   18c4a:	f6 ec       	ldi	r31, 0xC6	; 198
   18c4c:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   18c50:	e8 2e       	mov	r14, r24
   18c52:	f6 2e       	mov	r15, r22
   18c54:	6a 01       	movw	r12, r20
   18c56:	89 01       	movw	r16, r18
    uint16_t status = 0;
   18c58:	1a 82       	std	Y+2, r1	; 0x02
   18c5a:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   18c5c:	23 2b       	or	r18, r19
   18c5e:	41 f4       	brne	.+16     	; 0x18c70 <controller_send_str+0x2c>
        len = strlen((char *)str);
   18c60:	fa 01       	movw	r30, r20
   18c62:	01 90       	ld	r0, Z+
   18c64:	00 20       	and	r0, r0
   18c66:	e9 f7       	brne	.-6      	; 0x18c62 <controller_send_str+0x1e>
   18c68:	31 97       	sbiw	r30, 0x01	; 1
   18c6a:	8f 01       	movw	r16, r30
   18c6c:	04 1b       	sub	r16, r20
   18c6e:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18c70:	8f e5       	ldi	r24, 0x5F	; 95
   18c72:	94 e0       	ldi	r25, 0x04	; 4
   18c74:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18c78:	8f e3       	ldi	r24, 0x3F	; 63
   18c7a:	94 e0       	ldi	r25, 0x04	; 4
   18c7c:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   18c80:	8e 2d       	mov	r24, r14
   18c82:	80 64       	ori	r24, 0x40	; 64
   18c84:	90 e0       	ldi	r25, 0x00	; 0
   18c86:	94 60       	ori	r25, 0x04	; 4
   18c88:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   18c8c:	8f 2d       	mov	r24, r15
   18c8e:	80 62       	ori	r24, 0x20	; 32
   18c90:	90 e0       	ldi	r25, 0x00	; 0
   18c92:	94 60       	ori	r25, 0x04	; 4
   18c94:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>

    status = EOI_FLAG;
   18c98:	80 e0       	ldi	r24, 0x00	; 0
   18c9a:	91 e0       	ldi	r25, 0x01	; 1
   18c9c:	9a 83       	std	Y+2, r25	; 0x02
   18c9e:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   18ca0:	ae 01       	movw	r20, r28
   18ca2:	4f 5f       	subi	r20, 0xFF	; 255
   18ca4:	5f 4f       	sbci	r21, 0xFF	; 255
   18ca6:	b8 01       	movw	r22, r16
   18ca8:	c6 01       	movw	r24, r12
   18caa:	0e 94 cd 91 	call	0x1239a	; 0x1239a <gpib_write_str>
   18cae:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18cb0:	8f e5       	ldi	r24, 0x5F	; 95
   18cb2:	94 e0       	ldi	r25, 0x04	; 4
   18cb4:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18cb8:	8f e3       	ldi	r24, 0x3F	; 63
   18cba:	94 e0       	ldi	r25, 0x04	; 4
   18cbc:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    return(size);
}
   18cc0:	c8 01       	movw	r24, r16
   18cc2:	22 96       	adiw	r28, 0x02	; 2
   18cc4:	e8 e0       	ldi	r30, 0x08	; 8
   18cc6:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

00018cca <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   18cca:	a2 e0       	ldi	r26, 0x02	; 2
   18ccc:	b0 e0       	ldi	r27, 0x00	; 0
   18cce:	eb e6       	ldi	r30, 0x6B	; 107
   18cd0:	f6 ec       	ldi	r31, 0xC6	; 198
   18cd2:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   18cd6:	c8 2e       	mov	r12, r24
   18cd8:	d6 2e       	mov	r13, r22
   18cda:	7a 01       	movw	r14, r20
   18cdc:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18cde:	8f e5       	ldi	r24, 0x5F	; 95
   18ce0:	94 e0       	ldi	r25, 0x04	; 4
   18ce2:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18ce6:	8f e3       	ldi	r24, 0x3F	; 63
   18ce8:	94 e0       	ldi	r25, 0x04	; 4
   18cea:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18cee:	8c 2d       	mov	r24, r12
   18cf0:	80 64       	ori	r24, 0x40	; 64
   18cf2:	90 e0       	ldi	r25, 0x00	; 0
   18cf4:	94 60       	ori	r25, 0x04	; 4
   18cf6:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18cfa:	8d 2d       	mov	r24, r13
   18cfc:	80 62       	ori	r24, 0x20	; 32
   18cfe:	90 e0       	ldi	r25, 0x00	; 0
   18d00:	94 60       	ori	r25, 0x04	; 4
   18d02:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>

    status = EOI_FLAG;
   18d06:	80 e0       	ldi	r24, 0x00	; 0
   18d08:	91 e0       	ldi	r25, 0x01	; 1
   18d0a:	9a 83       	std	Y+2, r25	; 0x02
   18d0c:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   18d0e:	ae 01       	movw	r20, r28
   18d10:	4f 5f       	subi	r20, 0xFF	; 255
   18d12:	5f 4f       	sbci	r21, 0xFF	; 255
   18d14:	b8 01       	movw	r22, r16
   18d16:	c7 01       	movw	r24, r14
   18d18:	0e 94 1f 91 	call	0x1223e	; 0x1223e <gpib_read_str>
   18d1c:	6c 01       	movw	r12, r24
    if(size > 0)
   18d1e:	18 16       	cp	r1, r24
   18d20:	19 06       	cpc	r1, r25
   18d22:	64 f4       	brge	.+24     	; 0x18d3c <controller_read_str+0x72>
    {
        if(size < len)
   18d24:	80 17       	cp	r24, r16
   18d26:	91 07       	cpc	r25, r17
   18d28:	24 f4       	brge	.+8      	; 0x18d32 <controller_read_str+0x68>
            str[size] = 0;
   18d2a:	f7 01       	movw	r30, r14
   18d2c:	e8 0f       	add	r30, r24
   18d2e:	f9 1f       	adc	r31, r25
   18d30:	04 c0       	rjmp	.+8      	; 0x18d3a <controller_read_str+0x70>
        else
            str[len-1] = 0;
   18d32:	0e 0d       	add	r16, r14
   18d34:	1f 1d       	adc	r17, r15
   18d36:	f8 01       	movw	r30, r16
   18d38:	31 97       	sbiw	r30, 0x01	; 1
   18d3a:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18d3c:	8f e5       	ldi	r24, 0x5F	; 95
   18d3e:	94 e0       	ldi	r25, 0x04	; 4
   18d40:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18d44:	8f e3       	ldi	r24, 0x3F	; 63
   18d46:	94 e0       	ldi	r25, 0x04	; 4
   18d48:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    return(size);
}
   18d4c:	c6 01       	movw	r24, r12
   18d4e:	22 96       	adiw	r28, 0x02	; 2
   18d50:	e8 e0       	ldi	r30, 0x08	; 8
   18d52:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

00018d56 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   18d56:	cf 92       	push	r12
   18d58:	df 92       	push	r13
   18d5a:	ef 92       	push	r14
   18d5c:	ff 92       	push	r15
   18d5e:	cf 93       	push	r28
   18d60:	df 93       	push	r29
   18d62:	d8 2f       	mov	r29, r24
   18d64:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18d66:	8f e5       	ldi	r24, 0x5F	; 95
   18d68:	94 e0       	ldi	r25, 0x04	; 4
   18d6a:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18d6e:	8f e3       	ldi	r24, 0x3F	; 63
   18d70:	94 e0       	ldi	r25, 0x04	; 4
   18d72:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18d76:	d0 64       	ori	r29, 0x40	; 64
   18d78:	8d 2f       	mov	r24, r29
   18d7a:	90 e0       	ldi	r25, 0x00	; 0
   18d7c:	94 60       	ori	r25, 0x04	; 4
   18d7e:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18d82:	c0 62       	ori	r28, 0x20	; 32
   18d84:	8c 2f       	mov	r24, r28
   18d86:	90 e0       	ldi	r25, 0x00	; 0
   18d88:	94 60       	ori	r25, 0x04	; 4
   18d8a:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   18d8e:	c1 2c       	mov	r12, r1
   18d90:	d1 2c       	mov	r13, r1
   18d92:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   18d94:	80 e0       	ldi	r24, 0x00	; 0
   18d96:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   18d9a:	89 2b       	or	r24, r25
   18d9c:	79 f4       	brne	.+30     	; 0x18dbc <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   18d9e:	80 e0       	ldi	r24, 0x00	; 0
   18da0:	90 e0       	ldi	r25, 0x00	; 0
   18da2:	0e 94 45 90 	call	0x1208a	; 0x1208a <gpib_read_byte>
   18da6:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   18da8:	0e 94 1b 91 	call	0x12236	; 0x12236 <gpib_decode>
       if(ch & EOI_FLAG)
   18dac:	d0 fd       	sbrc	r29, 0
   18dae:	06 c0       	rjmp	.+12     	; 0x18dbc <controller_read_trace+0x66>
            break;
        ++len;
   18db0:	8f ef       	ldi	r24, 0xFF	; 255
   18db2:	c8 1a       	sub	r12, r24
   18db4:	d8 0a       	sbc	r13, r24
   18db6:	e8 0a       	sbc	r14, r24
   18db8:	f8 0a       	sbc	r15, r24
    }
   18dba:	ec cf       	rjmp	.-40     	; 0x18d94 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18dbc:	8f e5       	ldi	r24, 0x5F	; 95
   18dbe:	94 e0       	ldi	r25, 0x04	; 4
   18dc0:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18dc4:	8f e3       	ldi	r24, 0x3F	; 63
   18dc6:	94 e0       	ldi	r25, 0x04	; 4
   18dc8:	0e 94 44 8d 	call	0x11a88	; 0x11a88 <gpib_write_byte>
    return(len);
}
   18dcc:	c6 01       	movw	r24, r12
   18dce:	df 91       	pop	r29
   18dd0:	cf 91       	pop	r28
   18dd2:	ff 90       	pop	r15
   18dd4:	ef 90       	pop	r14
   18dd6:	df 90       	pop	r13
   18dd8:	cf 90       	pop	r12
   18dda:	08 95       	ret

00018ddc <lif_help>:
   18ddc:	cf 93       	push	r28
   18dde:	df 93       	push	r29
   18de0:	ec 01       	movw	r28, r24
   18de2:	8e e7       	ldi	r24, 0x7E	; 126
   18de4:	95 e4       	ldi	r25, 0x45	; 69
   18de6:	1f 92       	push	r1
   18de8:	9f 93       	push	r25
   18dea:	8f 93       	push	r24
   18dec:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18df0:	0f 90       	pop	r0
   18df2:	0f 90       	pop	r0
   18df4:	0f 90       	pop	r0
   18df6:	cd 2b       	or	r28, r29
   18df8:	51 f0       	breq	.+20     	; 0x18e0e <lif_help+0x32>
   18dfa:	89 ed       	ldi	r24, 0xD9	; 217
   18dfc:	93 e4       	ldi	r25, 0x43	; 67
   18dfe:	1f 92       	push	r1
   18e00:	9f 93       	push	r25
   18e02:	8f 93       	push	r24
   18e04:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18e08:	0f 90       	pop	r0
   18e0a:	0f 90       	pop	r0
   18e0c:	0f 90       	pop	r0
   18e0e:	df 91       	pop	r29
   18e10:	cf 91       	pop	r28
   18e12:	08 95       	ret

00018e14 <lif_calloc>:
   18e14:	ef 92       	push	r14
   18e16:	ff 92       	push	r15
   18e18:	0f 93       	push	r16
   18e1a:	1f 93       	push	r17
   18e1c:	cf 93       	push	r28
   18e1e:	df 93       	push	r29
   18e20:	16 2f       	mov	r17, r22
   18e22:	07 2f       	mov	r16, r23
   18e24:	f8 2e       	mov	r15, r24
   18e26:	e9 2e       	mov	r14, r25
   18e28:	61 e0       	ldi	r22, 0x01	; 1
   18e2a:	70 e0       	ldi	r23, 0x00	; 0
   18e2c:	81 2f       	mov	r24, r17
   18e2e:	90 2f       	mov	r25, r16
   18e30:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   18e34:	ec 01       	movw	r28, r24
   18e36:	89 2b       	or	r24, r25
   18e38:	99 f4       	brne	.+38     	; 0x18e60 <lif_calloc+0x4c>
   18e3a:	ef 92       	push	r14
   18e3c:	ff 92       	push	r15
   18e3e:	0f 93       	push	r16
   18e40:	1f 93       	push	r17
   18e42:	80 eb       	ldi	r24, 0xB0	; 176
   18e44:	93 e4       	ldi	r25, 0x43	; 67
   18e46:	1f 92       	push	r1
   18e48:	9f 93       	push	r25
   18e4a:	8f 93       	push	r24
   18e4c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18e50:	8d b7       	in	r24, 0x3d	; 61
   18e52:	9e b7       	in	r25, 0x3e	; 62
   18e54:	07 96       	adiw	r24, 0x07	; 7
   18e56:	0f b6       	in	r0, 0x3f	; 63
   18e58:	f8 94       	cli
   18e5a:	9e bf       	out	0x3e, r25	; 62
   18e5c:	0f be       	out	0x3f, r0	; 63
   18e5e:	8d bf       	out	0x3d, r24	; 61
   18e60:	ce 01       	movw	r24, r28
   18e62:	cd b7       	in	r28, 0x3d	; 61
   18e64:	de b7       	in	r29, 0x3e	; 62
   18e66:	e6 e0       	ldi	r30, 0x06	; 6
   18e68:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00018e6c <lif_free>:
   18e6c:	00 97       	sbiw	r24, 0x00	; 0
   18e6e:	59 f4       	brne	.+22     	; 0x18e86 <lif_free+0x1a>
   18e70:	88 e9       	ldi	r24, 0x98	; 152
   18e72:	93 e4       	ldi	r25, 0x43	; 67
   18e74:	1f 92       	push	r1
   18e76:	9f 93       	push	r25
   18e78:	8f 93       	push	r24
   18e7a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18e7e:	0f 90       	pop	r0
   18e80:	0f 90       	pop	r0
   18e82:	0f 90       	pop	r0
   18e84:	08 95       	ret
   18e86:	0c 94 c7 29 	jmp	0x538e	; 0x538e <safefree>
   18e8a:	08 95       	ret

00018e8c <lif_stralloc>:
   18e8c:	0f 93       	push	r16
   18e8e:	1f 93       	push	r17
   18e90:	cf 93       	push	r28
   18e92:	df 93       	push	r29
   18e94:	ec 01       	movw	r28, r24
   18e96:	fc 01       	movw	r30, r24
   18e98:	01 90       	ld	r0, Z+
   18e9a:	00 20       	and	r0, r0
   18e9c:	e9 f7       	brne	.-6      	; 0x18e98 <lif_stralloc+0xc>
   18e9e:	bf 01       	movw	r22, r30
   18ea0:	68 1b       	sub	r22, r24
   18ea2:	79 0b       	sbc	r23, r25
   18ea4:	6d 5f       	subi	r22, 0xFD	; 253
   18ea6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ea8:	07 2e       	mov	r0, r23
   18eaa:	00 0c       	add	r0, r0
   18eac:	88 0b       	sbc	r24, r24
   18eae:	99 0b       	sbc	r25, r25
   18eb0:	b1 df       	rcall	.-158    	; 0x18e14 <lif_calloc>
   18eb2:	8c 01       	movw	r16, r24
   18eb4:	00 97       	sbiw	r24, 0x00	; 0
   18eb6:	19 f0       	breq	.+6      	; 0x18ebe <lif_stralloc+0x32>
   18eb8:	be 01       	movw	r22, r28
   18eba:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strcpy>
   18ebe:	c8 01       	movw	r24, r16
   18ec0:	df 91       	pop	r29
   18ec2:	cf 91       	pop	r28
   18ec4:	1f 91       	pop	r17
   18ec6:	0f 91       	pop	r16
   18ec8:	08 95       	ret

00018eca <lif_open>:
   18eca:	ef 92       	push	r14
   18ecc:	ff 92       	push	r15
   18ece:	0f 93       	push	r16
   18ed0:	1f 93       	push	r17
   18ed2:	cf 93       	push	r28
   18ed4:	df 93       	push	r29
   18ed6:	18 2f       	mov	r17, r24
   18ed8:	09 2f       	mov	r16, r25
   18eda:	f6 2e       	mov	r15, r22
   18edc:	e7 2e       	mov	r14, r23
   18ede:	0e 94 41 82 	call	0x10482	; 0x10482 <fopen>
   18ee2:	ec 01       	movw	r28, r24
   18ee4:	89 2b       	or	r24, r25
   18ee6:	99 f4       	brne	.+38     	; 0x18f0e <lif_open+0x44>
   18ee8:	ef 92       	push	r14
   18eea:	ff 92       	push	r15
   18eec:	0f 93       	push	r16
   18eee:	1f 93       	push	r17
   18ef0:	83 e7       	ldi	r24, 0x73	; 115
   18ef2:	93 e4       	ldi	r25, 0x43	; 67
   18ef4:	1f 92       	push	r1
   18ef6:	9f 93       	push	r25
   18ef8:	8f 93       	push	r24
   18efa:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18efe:	8d b7       	in	r24, 0x3d	; 61
   18f00:	9e b7       	in	r25, 0x3e	; 62
   18f02:	07 96       	adiw	r24, 0x07	; 7
   18f04:	0f b6       	in	r0, 0x3f	; 63
   18f06:	f8 94       	cli
   18f08:	9e bf       	out	0x3e, r25	; 62
   18f0a:	0f be       	out	0x3f, r0	; 63
   18f0c:	8d bf       	out	0x3d, r24	; 61
   18f0e:	ce 01       	movw	r24, r28
   18f10:	cd b7       	in	r28, 0x3d	; 61
   18f12:	de b7       	in	r29, 0x3e	; 62
   18f14:	e6 e0       	ldi	r30, 0x06	; 6
   18f16:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00018f1a <lif_stat>:
   18f1a:	0f 93       	push	r16
   18f1c:	1f 93       	push	r17
   18f1e:	cf 93       	push	r28
   18f20:	df 93       	push	r29
   18f22:	18 2f       	mov	r17, r24
   18f24:	09 2f       	mov	r16, r25
   18f26:	d6 2f       	mov	r29, r22
   18f28:	c7 2f       	mov	r28, r23
   18f2a:	0e 94 55 7d 	call	0xfaaa	; 0xfaaa <stat>
   18f2e:	97 ff       	sbrs	r25, 7
   18f30:	11 c0       	rjmp	.+34     	; 0x18f54 <lif_stat+0x3a>
   18f32:	0f 93       	push	r16
   18f34:	1f 93       	push	r17
   18f36:	8a e5       	ldi	r24, 0x5A	; 90
   18f38:	93 e4       	ldi	r25, 0x43	; 67
   18f3a:	1f 92       	push	r1
   18f3c:	9f 93       	push	r25
   18f3e:	8f 93       	push	r24
   18f40:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18f44:	0f 90       	pop	r0
   18f46:	0f 90       	pop	r0
   18f48:	0f 90       	pop	r0
   18f4a:	0f 90       	pop	r0
   18f4c:	0f 90       	pop	r0
   18f4e:	80 e0       	ldi	r24, 0x00	; 0
   18f50:	90 e0       	ldi	r25, 0x00	; 0
   18f52:	02 c0       	rjmp	.+4      	; 0x18f58 <lif_stat+0x3e>
   18f54:	8d 2f       	mov	r24, r29
   18f56:	9c 2f       	mov	r25, r28
   18f58:	df 91       	pop	r29
   18f5a:	cf 91       	pop	r28
   18f5c:	1f 91       	pop	r17
   18f5e:	0f 91       	pop	r16
   18f60:	08 95       	ret

00018f62 <lif_seek_msg>:
   18f62:	a0 e0       	ldi	r26, 0x00	; 0
   18f64:	b0 e0       	ldi	r27, 0x00	; 0
   18f66:	e7 eb       	ldi	r30, 0xB7	; 183
   18f68:	f7 ec       	ldi	r31, 0xC7	; 199
   18f6a:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   18f6e:	ec 01       	movw	r28, r24
   18f70:	6a 01       	movw	r12, r20
   18f72:	7b 01       	movw	r14, r22
   18f74:	12 2f       	mov	r17, r18
   18f76:	03 2f       	mov	r16, r19
   18f78:	0e 94 81 7e 	call	0xfd02	; 0xfd02 <ftell>
   18f7c:	6c 15       	cp	r22, r12
   18f7e:	7d 05       	cpc	r23, r13
   18f80:	8e 05       	cpc	r24, r14
   18f82:	9f 05       	cpc	r25, r15
   18f84:	19 f4       	brne	.+6      	; 0x18f8c <lif_seek_msg+0x2a>
   18f86:	81 e0       	ldi	r24, 0x01	; 1
   18f88:	90 e0       	ldi	r25, 0x00	; 0
   18f8a:	20 c0       	rjmp	.+64     	; 0x18fcc <lif_seek_msg+0x6a>
   18f8c:	20 e0       	ldi	r18, 0x00	; 0
   18f8e:	30 e0       	ldi	r19, 0x00	; 0
   18f90:	b7 01       	movw	r22, r14
   18f92:	a6 01       	movw	r20, r12
   18f94:	ce 01       	movw	r24, r28
   18f96:	0e 94 03 7f 	call	0xfe06	; 0xfe06 <fseek>
   18f9a:	97 ff       	sbrs	r25, 7
   18f9c:	f4 cf       	rjmp	.-24     	; 0x18f86 <lif_seek_msg+0x24>
   18f9e:	ff 92       	push	r15
   18fa0:	ef 92       	push	r14
   18fa2:	df 92       	push	r13
   18fa4:	cf 92       	push	r12
   18fa6:	0f 93       	push	r16
   18fa8:	1f 93       	push	r17
   18faa:	89 e3       	ldi	r24, 0x39	; 57
   18fac:	93 e4       	ldi	r25, 0x43	; 67
   18fae:	1f 92       	push	r1
   18fb0:	9f 93       	push	r25
   18fb2:	8f 93       	push	r24
   18fb4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   18fb8:	8d b7       	in	r24, 0x3d	; 61
   18fba:	9e b7       	in	r25, 0x3e	; 62
   18fbc:	09 96       	adiw	r24, 0x09	; 9
   18fbe:	0f b6       	in	r0, 0x3f	; 63
   18fc0:	f8 94       	cli
   18fc2:	9e bf       	out	0x3e, r25	; 62
   18fc4:	0f be       	out	0x3f, r0	; 63
   18fc6:	8d bf       	out	0x3d, r24	; 61
   18fc8:	80 e0       	ldi	r24, 0x00	; 0
   18fca:	90 e0       	ldi	r25, 0x00	; 0
   18fcc:	cd b7       	in	r28, 0x3d	; 61
   18fce:	de b7       	in	r29, 0x3e	; 62
   18fd0:	e8 e0       	ldi	r30, 0x08	; 8
   18fd2:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

00018fd6 <lif_read>:
   18fd6:	a0 e0       	ldi	r26, 0x00	; 0
   18fd8:	b0 e0       	ldi	r27, 0x00	; 0
   18fda:	e1 ef       	ldi	r30, 0xF1	; 241
   18fdc:	f7 ec       	ldi	r31, 0xC7	; 199
   18fde:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   18fe2:	ec 01       	movw	r28, r24
   18fe4:	7b 01       	movw	r14, r22
   18fe6:	b2 2e       	mov	r11, r18
   18fe8:	a3 2e       	mov	r10, r19
   18fea:	94 2e       	mov	r9, r20
   18fec:	85 2e       	mov	r8, r21
   18fee:	28 81       	ld	r18, Y
   18ff0:	39 81       	ldd	r19, Y+1	; 0x01
   18ff2:	4b 2d       	mov	r20, r11
   18ff4:	5a 2d       	mov	r21, r10
   18ff6:	69 2d       	mov	r22, r9
   18ff8:	78 2d       	mov	r23, r8
   18ffa:	8a 81       	ldd	r24, Y+2	; 0x02
   18ffc:	9b 81       	ldd	r25, Y+3	; 0x03
   18ffe:	b1 df       	rcall	.-158    	; 0x18f62 <lif_seek_msg>
   19000:	89 2b       	or	r24, r25
   19002:	b9 f1       	breq	.+110    	; 0x19072 <lif_read+0x9c>
   19004:	2a 81       	ldd	r18, Y+2	; 0x02
   19006:	3b 81       	ldd	r19, Y+3	; 0x03
   19008:	a8 01       	movw	r20, r16
   1900a:	61 e0       	ldi	r22, 0x01	; 1
   1900c:	70 e0       	ldi	r23, 0x00	; 0
   1900e:	c7 01       	movw	r24, r14
   19010:	0e 94 97 7f 	call	0xff2e	; 0xff2e <fread>
   19014:	6c 01       	movw	r12, r24
   19016:	e1 2c       	mov	r14, r1
   19018:	f1 2c       	mov	r15, r1
   1901a:	b8 01       	movw	r22, r16
   1901c:	01 2e       	mov	r0, r17
   1901e:	00 0c       	add	r0, r0
   19020:	88 0b       	sbc	r24, r24
   19022:	99 0b       	sbc	r25, r25
   19024:	c6 16       	cp	r12, r22
   19026:	d7 06       	cpc	r13, r23
   19028:	e8 06       	cpc	r14, r24
   1902a:	f9 06       	cpc	r15, r25
   1902c:	41 f1       	breq	.+80     	; 0x1907e <lif_read+0xa8>
   1902e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19032:	80 ff       	sbrs	r24, 0
   19034:	22 c0       	rjmp	.+68     	; 0x1907a <lif_read+0xa4>
   19036:	1f 93       	push	r17
   19038:	0f 93       	push	r16
   1903a:	1f 92       	push	r1
   1903c:	1f 92       	push	r1
   1903e:	df 92       	push	r13
   19040:	cf 92       	push	r12
   19042:	8f 92       	push	r8
   19044:	9f 92       	push	r9
   19046:	af 92       	push	r10
   19048:	bf 92       	push	r11
   1904a:	89 81       	ldd	r24, Y+1	; 0x01
   1904c:	8f 93       	push	r24
   1904e:	88 81       	ld	r24, Y
   19050:	8f 93       	push	r24
   19052:	8d ef       	ldi	r24, 0xFD	; 253
   19054:	92 e4       	ldi	r25, 0x42	; 66
   19056:	1f 92       	push	r1
   19058:	9f 93       	push	r25
   1905a:	8f 93       	push	r24
   1905c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19060:	8d b7       	in	r24, 0x3d	; 61
   19062:	9e b7       	in	r25, 0x3e	; 62
   19064:	0f 96       	adiw	r24, 0x0f	; 15
   19066:	0f b6       	in	r0, 0x3f	; 63
   19068:	f8 94       	cli
   1906a:	9e bf       	out	0x3e, r25	; 62
   1906c:	0f be       	out	0x3f, r0	; 63
   1906e:	8d bf       	out	0x3d, r24	; 61
   19070:	04 c0       	rjmp	.+8      	; 0x1907a <lif_read+0xa4>
   19072:	60 e0       	ldi	r22, 0x00	; 0
   19074:	70 e0       	ldi	r23, 0x00	; 0
   19076:	cb 01       	movw	r24, r22
   19078:	02 c0       	rjmp	.+4      	; 0x1907e <lif_read+0xa8>
   1907a:	c7 01       	movw	r24, r14
   1907c:	b6 01       	movw	r22, r12
   1907e:	cd b7       	in	r28, 0x3d	; 61
   19080:	de b7       	in	r29, 0x3e	; 62
   19082:	ec e0       	ldi	r30, 0x0C	; 12
   19084:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

00019088 <lif_write>:
   19088:	a0 e0       	ldi	r26, 0x00	; 0
   1908a:	b0 e0       	ldi	r27, 0x00	; 0
   1908c:	ea e4       	ldi	r30, 0x4A	; 74
   1908e:	f8 ec       	ldi	r31, 0xC8	; 200
   19090:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   19094:	7c 01       	movw	r14, r24
   19096:	eb 01       	movw	r28, r22
   19098:	d2 2e       	mov	r13, r18
   1909a:	c3 2e       	mov	r12, r19
   1909c:	b4 2e       	mov	r11, r20
   1909e:	a5 2e       	mov	r10, r21
   190a0:	fc 01       	movw	r30, r24
   190a2:	20 81       	ld	r18, Z
   190a4:	31 81       	ldd	r19, Z+1	; 0x01
   190a6:	4d 2d       	mov	r20, r13
   190a8:	5c 2d       	mov	r21, r12
   190aa:	6b 2d       	mov	r22, r11
   190ac:	7a 2d       	mov	r23, r10
   190ae:	82 81       	ldd	r24, Z+2	; 0x02
   190b0:	93 81       	ldd	r25, Z+3	; 0x03
   190b2:	57 df       	rcall	.-338    	; 0x18f62 <lif_seek_msg>
   190b4:	00 97       	sbiw	r24, 0x00	; 0
   190b6:	89 f1       	breq	.+98     	; 0x1911a <lif_write+0x92>
   190b8:	f7 01       	movw	r30, r14
   190ba:	22 81       	ldd	r18, Z+2	; 0x02
   190bc:	33 81       	ldd	r19, Z+3	; 0x03
   190be:	a8 01       	movw	r20, r16
   190c0:	61 e0       	ldi	r22, 0x01	; 1
   190c2:	70 e0       	ldi	r23, 0x00	; 0
   190c4:	ce 01       	movw	r24, r28
   190c6:	0e 94 69 80 	call	0x100d2	; 0x100d2 <fwrite>
   190ca:	ec 01       	movw	r28, r24
   190cc:	08 17       	cp	r16, r24
   190ce:	19 07       	cpc	r17, r25
   190d0:	09 f1       	breq	.+66     	; 0x19114 <lif_write+0x8c>
   190d2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   190d6:	80 ff       	sbrs	r24, 0
   190d8:	1f c0       	rjmp	.+62     	; 0x19118 <lif_write+0x90>
   190da:	1f 93       	push	r17
   190dc:	0f 93       	push	r16
   190de:	df 93       	push	r29
   190e0:	cf 93       	push	r28
   190e2:	af 92       	push	r10
   190e4:	bf 92       	push	r11
   190e6:	cf 92       	push	r12
   190e8:	df 92       	push	r13
   190ea:	f7 01       	movw	r30, r14
   190ec:	81 81       	ldd	r24, Z+1	; 0x01
   190ee:	8f 93       	push	r24
   190f0:	80 81       	ld	r24, Z
   190f2:	8f 93       	push	r24
   190f4:	80 ec       	ldi	r24, 0xC0	; 192
   190f6:	92 e4       	ldi	r25, 0x42	; 66
   190f8:	1f 92       	push	r1
   190fa:	9f 93       	push	r25
   190fc:	8f 93       	push	r24
   190fe:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19102:	8d b7       	in	r24, 0x3d	; 61
   19104:	9e b7       	in	r25, 0x3e	; 62
   19106:	0d 96       	adiw	r24, 0x0d	; 13
   19108:	0f b6       	in	r0, 0x3f	; 63
   1910a:	f8 94       	cli
   1910c:	9e bf       	out	0x3e, r25	; 62
   1910e:	0f be       	out	0x3f, r0	; 63
   19110:	8d bf       	out	0x3d, r24	; 61
   19112:	02 c0       	rjmp	.+4      	; 0x19118 <lif_write+0x90>
   19114:	c8 01       	movw	r24, r16
   19116:	01 c0       	rjmp	.+2      	; 0x1911a <lif_write+0x92>
   19118:	ce 01       	movw	r24, r28
   1911a:	cd b7       	in	r28, 0x3d	; 61
   1911c:	de b7       	in	r29, 0x3e	; 62
   1911e:	ea e0       	ldi	r30, 0x0A	; 10
   19120:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

00019124 <lif_chars>:
   19124:	80 32       	cpi	r24, 0x20	; 32
   19126:	91 05       	cpc	r25, r1
   19128:	e1 f0       	breq	.+56     	; 0x19162 <lif_chars+0x3e>
   1912a:	9c 01       	movw	r18, r24
   1912c:	21 56       	subi	r18, 0x61	; 97
   1912e:	31 09       	sbc	r19, r1
   19130:	2a 31       	cpi	r18, 0x1A	; 26
   19132:	31 05       	cpc	r19, r1
   19134:	10 f4       	brcc	.+4      	; 0x1913a <lif_chars+0x16>
   19136:	80 97       	sbiw	r24, 0x20	; 32
   19138:	08 95       	ret
   1913a:	9c 01       	movw	r18, r24
   1913c:	21 54       	subi	r18, 0x41	; 65
   1913e:	31 09       	sbc	r19, r1
   19140:	2a 31       	cpi	r18, 0x1A	; 26
   19142:	31 05       	cpc	r19, r1
   19144:	c8 f0       	brcs	.+50     	; 0x19178 <lif_chars+0x54>
   19146:	16 16       	cp	r1, r22
   19148:	17 06       	cpc	r1, r23
   1914a:	74 f4       	brge	.+28     	; 0x19168 <lif_chars+0x44>
   1914c:	2f 5e       	subi	r18, 0xEF	; 239
   1914e:	3f 4f       	sbci	r19, 0xFF	; 255
   19150:	2a 30       	cpi	r18, 0x0A	; 10
   19152:	31 05       	cpc	r19, r1
   19154:	88 f0       	brcs	.+34     	; 0x19178 <lif_chars+0x54>
   19156:	8f 35       	cpi	r24, 0x5F	; 95
   19158:	91 05       	cpc	r25, r1
   1915a:	49 f0       	breq	.+18     	; 0x1916e <lif_chars+0x4a>
   1915c:	8d 97       	sbiw	r24, 0x2d	; 45
   1915e:	21 f4       	brne	.+8      	; 0x19168 <lif_chars+0x44>
   19160:	09 c0       	rjmp	.+18     	; 0x19174 <lif_chars+0x50>
   19162:	80 e2       	ldi	r24, 0x20	; 32
   19164:	90 e0       	ldi	r25, 0x00	; 0
   19166:	08 95       	ret
   19168:	80 e0       	ldi	r24, 0x00	; 0
   1916a:	90 e0       	ldi	r25, 0x00	; 0
   1916c:	08 95       	ret
   1916e:	8f e5       	ldi	r24, 0x5F	; 95
   19170:	90 e0       	ldi	r25, 0x00	; 0
   19172:	08 95       	ret
   19174:	8d e2       	ldi	r24, 0x2D	; 45
   19176:	90 e0       	ldi	r25, 0x00	; 0
   19178:	08 95       	ret

0001917a <lif_B2S>:
   1917a:	a0 e0       	ldi	r26, 0x00	; 0
   1917c:	b0 e0       	ldi	r27, 0x00	; 0
   1917e:	e3 ec       	ldi	r30, 0xC3	; 195
   19180:	f8 ec       	ldi	r31, 0xC8	; 200
   19182:	0c 94 41 e9 	jmp	0x1d282	; 0x1d282 <__prologue_saves__+0xc>
   19186:	5c 01       	movw	r10, r24
   19188:	6b 01       	movw	r12, r22
   1918a:	ea 01       	movw	r28, r20
   1918c:	4c 01       	movw	r8, r24
   1918e:	ee 24       	eor	r14, r14
   19190:	e3 94       	inc	r14
   19192:	f1 2c       	mov	r15, r1
   19194:	00 e0       	ldi	r16, 0x00	; 0
   19196:	10 e0       	ldi	r17, 0x00	; 0
   19198:	0c 17       	cp	r16, r28
   1919a:	1d 07       	cpc	r17, r29
   1919c:	6c f4       	brge	.+26     	; 0x191b8 <lif_B2S+0x3e>
   1919e:	f4 01       	movw	r30, r8
   191a0:	81 91       	ld	r24, Z+
   191a2:	4f 01       	movw	r8, r30
   191a4:	b8 01       	movw	r22, r16
   191a6:	90 e0       	ldi	r25, 0x00	; 0
   191a8:	bd df       	rcall	.-134    	; 0x19124 <lif_chars>
   191aa:	89 2b       	or	r24, r25
   191ac:	11 f4       	brne	.+4      	; 0x191b2 <lif_B2S+0x38>
   191ae:	e1 2c       	mov	r14, r1
   191b0:	f1 2c       	mov	r15, r1
   191b2:	0f 5f       	subi	r16, 0xFF	; 255
   191b4:	1f 4f       	sbci	r17, 0xFF	; 255
   191b6:	f0 cf       	rjmp	.-32     	; 0x19198 <lif_B2S+0x1e>
   191b8:	d6 01       	movw	r26, r12
   191ba:	f5 01       	movw	r30, r10
   191bc:	cf 01       	movw	r24, r30
   191be:	8a 19       	sub	r24, r10
   191c0:	9b 09       	sbc	r25, r11
   191c2:	8c 17       	cp	r24, r28
   191c4:	9d 07       	cpc	r25, r29
   191c6:	1c f4       	brge	.+6      	; 0x191ce <lif_B2S+0x54>
   191c8:	81 91       	ld	r24, Z+
   191ca:	8d 93       	st	X+, r24
   191cc:	f7 cf       	rjmp	.-18     	; 0x191bc <lif_B2S+0x42>
   191ce:	d7 ff       	sbrs	r29, 7
   191d0:	02 c0       	rjmp	.+4      	; 0x191d6 <lif_B2S+0x5c>
   191d2:	c0 e0       	ldi	r28, 0x00	; 0
   191d4:	d0 e0       	ldi	r29, 0x00	; 0
   191d6:	cc 0d       	add	r28, r12
   191d8:	dd 1d       	adc	r29, r13
   191da:	18 82       	st	Y, r1
   191dc:	c6 01       	movw	r24, r12
   191de:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <trim_tail>
   191e2:	c7 01       	movw	r24, r14
   191e4:	cd b7       	in	r28, 0x3d	; 61
   191e6:	de b7       	in	r29, 0x3e	; 62
   191e8:	ec e0       	ldi	r30, 0x0C	; 12
   191ea:	0c 94 5d e9 	jmp	0x1d2ba	; 0x1d2ba <__epilogue_restores__+0xc>

000191ee <lif_checkname>:
   191ee:	ef 92       	push	r14
   191f0:	ff 92       	push	r15
   191f2:	0f 93       	push	r16
   191f4:	1f 93       	push	r17
   191f6:	cf 93       	push	r28
   191f8:	df 93       	push	r29
   191fa:	7c 01       	movw	r14, r24
   191fc:	ec 01       	movw	r28, r24
   191fe:	01 e0       	ldi	r16, 0x01	; 1
   19200:	10 e0       	ldi	r17, 0x00	; 0
   19202:	be 01       	movw	r22, r28
   19204:	6e 19       	sub	r22, r14
   19206:	7f 09       	sbc	r23, r15
   19208:	89 91       	ld	r24, Y+
   1920a:	88 23       	and	r24, r24
   1920c:	39 f0       	breq	.+14     	; 0x1921c <lif_checkname+0x2e>
   1920e:	90 e0       	ldi	r25, 0x00	; 0
   19210:	89 df       	rcall	.-238    	; 0x19124 <lif_chars>
   19212:	89 2b       	or	r24, r25
   19214:	b1 f7       	brne	.-20     	; 0x19202 <lif_checkname+0x14>
   19216:	00 e0       	ldi	r16, 0x00	; 0
   19218:	10 e0       	ldi	r17, 0x00	; 0
   1921a:	f3 cf       	rjmp	.-26     	; 0x19202 <lif_checkname+0x14>
   1921c:	c8 01       	movw	r24, r16
   1921e:	cd b7       	in	r28, 0x3d	; 61
   19220:	de b7       	in	r29, 0x3e	; 62
   19222:	e6 e0       	ldi	r30, 0x06	; 6
   19224:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

00019228 <lif_S2B>:
   19228:	fb 01       	movw	r30, r22
   1922a:	dc 01       	movw	r26, r24
   1922c:	20 e0       	ldi	r18, 0x00	; 0
   1922e:	30 e0       	ldi	r19, 0x00	; 0
   19230:	61 91       	ld	r22, Z+
   19232:	61 11       	cpse	r22, r1
   19234:	05 c0       	rjmp	.+10     	; 0x19240 <lif_S2B+0x18>
   19236:	fc 01       	movw	r30, r24
   19238:	e2 0f       	add	r30, r18
   1923a:	f3 1f       	adc	r31, r19
   1923c:	60 e2       	ldi	r22, 0x20	; 32
   1923e:	08 c0       	rjmp	.+16     	; 0x19250 <lif_S2B+0x28>
   19240:	24 17       	cp	r18, r20
   19242:	35 07       	cpc	r19, r21
   19244:	24 f4       	brge	.+8      	; 0x1924e <lif_S2B+0x26>
   19246:	6d 93       	st	X+, r22
   19248:	2f 5f       	subi	r18, 0xFF	; 255
   1924a:	3f 4f       	sbci	r19, 0xFF	; 255
   1924c:	f1 cf       	rjmp	.-30     	; 0x19230 <lif_S2B+0x8>
   1924e:	08 95       	ret
   19250:	9f 01       	movw	r18, r30
   19252:	28 1b       	sub	r18, r24
   19254:	39 0b       	sbc	r19, r25
   19256:	24 17       	cp	r18, r20
   19258:	35 07       	cpc	r19, r21
   1925a:	14 f4       	brge	.+4      	; 0x19260 <lif_S2B+0x38>
   1925c:	61 93       	st	Z+, r22
   1925e:	f8 cf       	rjmp	.-16     	; 0x19250 <lif_S2B+0x28>
   19260:	08 95       	ret

00019262 <lif_fixname>:
   19262:	a0 e0       	ldi	r26, 0x00	; 0
   19264:	b0 e0       	ldi	r27, 0x00	; 0
   19266:	e7 e3       	ldi	r30, 0x37	; 55
   19268:	f9 ec       	ldi	r31, 0xC9	; 201
   1926a:	0c 94 44 e9 	jmp	0x1d288	; 0x1d288 <__prologue_saves__+0x12>
   1926e:	8c 01       	movw	r16, r24
   19270:	cb 01       	movw	r24, r22
   19272:	7a 01       	movw	r14, r20
   19274:	0e 94 b7 7a 	call	0xf56e	; 0xf56e <basename>
   19278:	6c 01       	movw	r12, r24
   1927a:	e8 01       	movw	r28, r16
   1927c:	80 e2       	ldi	r24, 0x20	; 32
   1927e:	b8 2e       	mov	r11, r24
   19280:	be 01       	movw	r22, r28
   19282:	60 1b       	sub	r22, r16
   19284:	71 0b       	sbc	r23, r17
   19286:	f6 01       	movw	r30, r12
   19288:	81 91       	ld	r24, Z+
   1928a:	6f 01       	movw	r12, r30
   1928c:	81 11       	cpse	r24, r1
   1928e:	02 c0       	rjmp	.+4      	; 0x19294 <lif_fixname+0x32>
   19290:	20 e2       	ldi	r18, 0x20	; 32
   19292:	0e c0       	rjmp	.+28     	; 0x192b0 <lif_fixname+0x4e>
   19294:	1e 14       	cp	r1, r14
   19296:	1f 04       	cpc	r1, r15
   19298:	dc f7       	brge	.-10     	; 0x19290 <lif_fixname+0x2e>
   1929a:	8e 32       	cpi	r24, 0x2E	; 46
   1929c:	c9 f3       	breq	.-14     	; 0x19290 <lif_fixname+0x2e>
   1929e:	90 e0       	ldi	r25, 0x00	; 0
   192a0:	41 df       	rcall	.-382    	; 0x19124 <lif_chars>
   192a2:	88 23       	and	r24, r24
   192a4:	11 f0       	breq	.+4      	; 0x192aa <lif_fixname+0x48>
   192a6:	88 83       	st	Y, r24
   192a8:	01 c0       	rjmp	.+2      	; 0x192ac <lif_fixname+0x4a>
   192aa:	b8 82       	st	Y, r11
   192ac:	21 96       	adiw	r28, 0x01	; 1
   192ae:	e8 cf       	rjmp	.-48     	; 0x19280 <lif_fixname+0x1e>
   192b0:	ce 01       	movw	r24, r28
   192b2:	80 1b       	sub	r24, r16
   192b4:	91 0b       	sbc	r25, r17
   192b6:	8e 15       	cp	r24, r14
   192b8:	9f 05       	cpc	r25, r15
   192ba:	14 f4       	brge	.+4      	; 0x192c0 <lif_fixname+0x5e>
   192bc:	29 93       	st	Y+, r18
   192be:	f8 cf       	rjmp	.-16     	; 0x192b0 <lif_fixname+0x4e>
   192c0:	18 82       	st	Y, r1
   192c2:	f8 01       	movw	r30, r16
   192c4:	01 90       	ld	r0, Z+
   192c6:	00 20       	and	r0, r0
   192c8:	e9 f7       	brne	.-6      	; 0x192c4 <lif_fixname+0x62>
   192ca:	cf 01       	movw	r24, r30
   192cc:	01 97       	sbiw	r24, 0x01	; 1
   192ce:	80 1b       	sub	r24, r16
   192d0:	91 0b       	sbc	r25, r17
   192d2:	cd b7       	in	r28, 0x3d	; 61
   192d4:	de b7       	in	r29, 0x3e	; 62
   192d6:	e9 e0       	ldi	r30, 0x09	; 9
   192d8:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__epilogue_restores__+0x12>

000192dc <lif_vol2str>:
   192dc:	ef 92       	push	r14
   192de:	ff 92       	push	r15
   192e0:	0f 93       	push	r16
   192e2:	1f 93       	push	r17
   192e4:	cf 93       	push	r28
   192e6:	df 93       	push	r29
   192e8:	7c 01       	movw	r14, r24
   192ea:	eb 01       	movw	r28, r22
   192ec:	fc 01       	movw	r30, r24
   192ee:	04 a1       	ldd	r16, Z+36	; 0x24
   192f0:	15 a1       	ldd	r17, Z+37	; 0x25
   192f2:	20 e0       	ldi	r18, 0x00	; 0
   192f4:	30 e0       	ldi	r19, 0x00	; 0
   192f6:	42 e0       	ldi	r20, 0x02	; 2
   192f8:	50 e0       	ldi	r21, 0x00	; 0
   192fa:	60 e0       	ldi	r22, 0x00	; 0
   192fc:	70 e0       	ldi	r23, 0x00	; 0
   192fe:	ce 01       	movw	r24, r28
   19300:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19304:	b7 01       	movw	r22, r14
   19306:	6a 5d       	subi	r22, 0xDA	; 218
   19308:	7f 4f       	sbci	r23, 0xFF	; 255
   1930a:	46 e0       	ldi	r20, 0x06	; 6
   1930c:	50 e0       	ldi	r21, 0x00	; 0
   1930e:	ce 01       	movw	r24, r28
   19310:	02 96       	adiw	r24, 0x02	; 2
   19312:	8a df       	rcall	.-236    	; 0x19228 <lif_S2B>
   19314:	f7 01       	movw	r30, r14
   19316:	05 a5       	ldd	r16, Z+45	; 0x2d
   19318:	16 a5       	ldd	r17, Z+46	; 0x2e
   1931a:	27 a5       	ldd	r18, Z+47	; 0x2f
   1931c:	30 a9       	ldd	r19, Z+48	; 0x30
   1931e:	44 e0       	ldi	r20, 0x04	; 4
   19320:	50 e0       	ldi	r21, 0x00	; 0
   19322:	68 e0       	ldi	r22, 0x08	; 8
   19324:	70 e0       	ldi	r23, 0x00	; 0
   19326:	ce 01       	movw	r24, r28
   19328:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1932c:	f7 01       	movw	r30, r14
   1932e:	01 a9       	ldd	r16, Z+49	; 0x31
   19330:	12 a9       	ldd	r17, Z+50	; 0x32
   19332:	20 e0       	ldi	r18, 0x00	; 0
   19334:	30 e0       	ldi	r19, 0x00	; 0
   19336:	42 e0       	ldi	r20, 0x02	; 2
   19338:	50 e0       	ldi	r21, 0x00	; 0
   1933a:	6c e0       	ldi	r22, 0x0C	; 12
   1933c:	70 e0       	ldi	r23, 0x00	; 0
   1933e:	ce 01       	movw	r24, r28
   19340:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19344:	00 e0       	ldi	r16, 0x00	; 0
   19346:	10 e0       	ldi	r17, 0x00	; 0
   19348:	98 01       	movw	r18, r16
   1934a:	42 e0       	ldi	r20, 0x02	; 2
   1934c:	50 e0       	ldi	r21, 0x00	; 0
   1934e:	6e e0       	ldi	r22, 0x0E	; 14
   19350:	70 e0       	ldi	r23, 0x00	; 0
   19352:	ce 01       	movw	r24, r28
   19354:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19358:	f7 01       	movw	r30, r14
   1935a:	05 a9       	ldd	r16, Z+53	; 0x35
   1935c:	16 a9       	ldd	r17, Z+54	; 0x36
   1935e:	27 a9       	ldd	r18, Z+55	; 0x37
   19360:	30 ad       	ldd	r19, Z+56	; 0x38
   19362:	44 e0       	ldi	r20, 0x04	; 4
   19364:	50 e0       	ldi	r21, 0x00	; 0
   19366:	60 e1       	ldi	r22, 0x10	; 16
   19368:	70 e0       	ldi	r23, 0x00	; 0
   1936a:	ce 01       	movw	r24, r28
   1936c:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19370:	f7 01       	movw	r30, r14
   19372:	01 ad       	ldd	r16, Z+57	; 0x39
   19374:	12 ad       	ldd	r17, Z+58	; 0x3a
   19376:	20 e0       	ldi	r18, 0x00	; 0
   19378:	30 e0       	ldi	r19, 0x00	; 0
   1937a:	42 e0       	ldi	r20, 0x02	; 2
   1937c:	50 e0       	ldi	r21, 0x00	; 0
   1937e:	64 e1       	ldi	r22, 0x14	; 20
   19380:	70 e0       	ldi	r23, 0x00	; 0
   19382:	ce 01       	movw	r24, r28
   19384:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19388:	00 e0       	ldi	r16, 0x00	; 0
   1938a:	10 e0       	ldi	r17, 0x00	; 0
   1938c:	98 01       	movw	r18, r16
   1938e:	42 e0       	ldi	r20, 0x02	; 2
   19390:	50 e0       	ldi	r21, 0x00	; 0
   19392:	66 e1       	ldi	r22, 0x16	; 22
   19394:	70 e0       	ldi	r23, 0x00	; 0
   19396:	ce 01       	movw	r24, r28
   19398:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1939c:	f7 01       	movw	r30, r14
   1939e:	fd 96       	adiw	r30, 0x3d	; 61
   193a0:	00 81       	ld	r16, Z
   193a2:	11 81       	ldd	r17, Z+1	; 0x01
   193a4:	22 81       	ldd	r18, Z+2	; 0x02
   193a6:	33 81       	ldd	r19, Z+3	; 0x03
   193a8:	44 e0       	ldi	r20, 0x04	; 4
   193aa:	50 e0       	ldi	r21, 0x00	; 0
   193ac:	68 e1       	ldi	r22, 0x18	; 24
   193ae:	70 e0       	ldi	r23, 0x00	; 0
   193b0:	ce 01       	movw	r24, r28
   193b2:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   193b6:	f7 01       	movw	r30, r14
   193b8:	ef 5b       	subi	r30, 0xBF	; 191
   193ba:	ff 4f       	sbci	r31, 0xFF	; 255
   193bc:	00 81       	ld	r16, Z
   193be:	11 81       	ldd	r17, Z+1	; 0x01
   193c0:	22 81       	ldd	r18, Z+2	; 0x02
   193c2:	33 81       	ldd	r19, Z+3	; 0x03
   193c4:	44 e0       	ldi	r20, 0x04	; 4
   193c6:	50 e0       	ldi	r21, 0x00	; 0
   193c8:	6c e1       	ldi	r22, 0x1C	; 28
   193ca:	70 e0       	ldi	r23, 0x00	; 0
   193cc:	ce 01       	movw	r24, r28
   193ce:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   193d2:	f7 01       	movw	r30, r14
   193d4:	eb 5b       	subi	r30, 0xBB	; 187
   193d6:	ff 4f       	sbci	r31, 0xFF	; 255
   193d8:	00 81       	ld	r16, Z
   193da:	11 81       	ldd	r17, Z+1	; 0x01
   193dc:	22 81       	ldd	r18, Z+2	; 0x02
   193de:	33 81       	ldd	r19, Z+3	; 0x03
   193e0:	44 e0       	ldi	r20, 0x04	; 4
   193e2:	50 e0       	ldi	r21, 0x00	; 0
   193e4:	60 e2       	ldi	r22, 0x20	; 32
   193e6:	70 e0       	ldi	r23, 0x00	; 0
   193e8:	ce 01       	movw	r24, r28
   193ea:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   193ee:	de 01       	movw	r26, r28
   193f0:	94 96       	adiw	r26, 0x24	; 36
   193f2:	f7 01       	movw	r30, r14
   193f4:	e7 5b       	subi	r30, 0xB7	; 183
   193f6:	ff 4f       	sbci	r31, 0xFF	; 255
   193f8:	86 e0       	ldi	r24, 0x06	; 6
   193fa:	01 90       	ld	r0, Z+
   193fc:	0d 92       	st	X+, r0
   193fe:	8a 95       	dec	r24
   19400:	e1 f7       	brne	.-8      	; 0x193fa <lif_vol2str+0x11e>
   19402:	cd b7       	in	r28, 0x3d	; 61
   19404:	de b7       	in	r29, 0x3e	; 62
   19406:	e6 e0       	ldi	r30, 0x06	; 6
   19408:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

0001940c <lif_str2vol>:
   1940c:	0f 93       	push	r16
   1940e:	1f 93       	push	r17
   19410:	cf 93       	push	r28
   19412:	df 93       	push	r29
   19414:	8c 01       	movw	r16, r24
   19416:	eb 01       	movw	r28, r22
   19418:	42 e0       	ldi	r20, 0x02	; 2
   1941a:	50 e0       	ldi	r21, 0x00	; 0
   1941c:	60 e0       	ldi	r22, 0x00	; 0
   1941e:	70 e0       	ldi	r23, 0x00	; 0
   19420:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19424:	7d a3       	std	Y+37, r23	; 0x25
   19426:	6c a3       	std	Y+36, r22	; 0x24
   19428:	be 01       	movw	r22, r28
   1942a:	6a 5d       	subi	r22, 0xDA	; 218
   1942c:	7f 4f       	sbci	r23, 0xFF	; 255
   1942e:	46 e0       	ldi	r20, 0x06	; 6
   19430:	50 e0       	ldi	r21, 0x00	; 0
   19432:	c8 01       	movw	r24, r16
   19434:	02 96       	adiw	r24, 0x02	; 2
   19436:	a1 de       	rcall	.-702    	; 0x1917a <lif_B2S>
   19438:	44 e0       	ldi	r20, 0x04	; 4
   1943a:	50 e0       	ldi	r21, 0x00	; 0
   1943c:	68 e0       	ldi	r22, 0x08	; 8
   1943e:	70 e0       	ldi	r23, 0x00	; 0
   19440:	c8 01       	movw	r24, r16
   19442:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19446:	6d a7       	std	Y+45, r22	; 0x2d
   19448:	7e a7       	std	Y+46, r23	; 0x2e
   1944a:	8f a7       	std	Y+47, r24	; 0x2f
   1944c:	98 ab       	std	Y+48, r25	; 0x30
   1944e:	42 e0       	ldi	r20, 0x02	; 2
   19450:	50 e0       	ldi	r21, 0x00	; 0
   19452:	6c e0       	ldi	r22, 0x0C	; 12
   19454:	70 e0       	ldi	r23, 0x00	; 0
   19456:	c8 01       	movw	r24, r16
   19458:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   1945c:	7a ab       	std	Y+50, r23	; 0x32
   1945e:	69 ab       	std	Y+49, r22	; 0x31
   19460:	42 e0       	ldi	r20, 0x02	; 2
   19462:	50 e0       	ldi	r21, 0x00	; 0
   19464:	6e e0       	ldi	r22, 0x0E	; 14
   19466:	70 e0       	ldi	r23, 0x00	; 0
   19468:	c8 01       	movw	r24, r16
   1946a:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   1946e:	7c ab       	std	Y+52, r23	; 0x34
   19470:	6b ab       	std	Y+51, r22	; 0x33
   19472:	44 e0       	ldi	r20, 0x04	; 4
   19474:	50 e0       	ldi	r21, 0x00	; 0
   19476:	60 e1       	ldi	r22, 0x10	; 16
   19478:	70 e0       	ldi	r23, 0x00	; 0
   1947a:	c8 01       	movw	r24, r16
   1947c:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19480:	6d ab       	std	Y+53, r22	; 0x35
   19482:	7e ab       	std	Y+54, r23	; 0x36
   19484:	8f ab       	std	Y+55, r24	; 0x37
   19486:	98 af       	std	Y+56, r25	; 0x38
   19488:	42 e0       	ldi	r20, 0x02	; 2
   1948a:	50 e0       	ldi	r21, 0x00	; 0
   1948c:	64 e1       	ldi	r22, 0x14	; 20
   1948e:	70 e0       	ldi	r23, 0x00	; 0
   19490:	c8 01       	movw	r24, r16
   19492:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19496:	7a af       	std	Y+58, r23	; 0x3a
   19498:	69 af       	std	Y+57, r22	; 0x39
   1949a:	42 e0       	ldi	r20, 0x02	; 2
   1949c:	50 e0       	ldi	r21, 0x00	; 0
   1949e:	66 e1       	ldi	r22, 0x16	; 22
   194a0:	70 e0       	ldi	r23, 0x00	; 0
   194a2:	c8 01       	movw	r24, r16
   194a4:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   194a8:	7c af       	std	Y+60, r23	; 0x3c
   194aa:	6b af       	std	Y+59, r22	; 0x3b
   194ac:	44 e0       	ldi	r20, 0x04	; 4
   194ae:	50 e0       	ldi	r21, 0x00	; 0
   194b0:	68 e1       	ldi	r22, 0x18	; 24
   194b2:	70 e0       	ldi	r23, 0x00	; 0
   194b4:	c8 01       	movw	r24, r16
   194b6:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   194ba:	fe 01       	movw	r30, r28
   194bc:	fd 96       	adiw	r30, 0x3d	; 61
   194be:	60 83       	st	Z, r22
   194c0:	71 83       	std	Z+1, r23	; 0x01
   194c2:	82 83       	std	Z+2, r24	; 0x02
   194c4:	93 83       	std	Z+3, r25	; 0x03
   194c6:	44 e0       	ldi	r20, 0x04	; 4
   194c8:	50 e0       	ldi	r21, 0x00	; 0
   194ca:	6c e1       	ldi	r22, 0x1C	; 28
   194cc:	70 e0       	ldi	r23, 0x00	; 0
   194ce:	c8 01       	movw	r24, r16
   194d0:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   194d4:	fe 01       	movw	r30, r28
   194d6:	ef 5b       	subi	r30, 0xBF	; 191
   194d8:	ff 4f       	sbci	r31, 0xFF	; 255
   194da:	60 83       	st	Z, r22
   194dc:	71 83       	std	Z+1, r23	; 0x01
   194de:	82 83       	std	Z+2, r24	; 0x02
   194e0:	93 83       	std	Z+3, r25	; 0x03
   194e2:	44 e0       	ldi	r20, 0x04	; 4
   194e4:	50 e0       	ldi	r21, 0x00	; 0
   194e6:	60 e2       	ldi	r22, 0x20	; 32
   194e8:	70 e0       	ldi	r23, 0x00	; 0
   194ea:	c8 01       	movw	r24, r16
   194ec:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   194f0:	fe 01       	movw	r30, r28
   194f2:	eb 5b       	subi	r30, 0xBB	; 187
   194f4:	ff 4f       	sbci	r31, 0xFF	; 255
   194f6:	60 83       	st	Z, r22
   194f8:	71 83       	std	Z+1, r23	; 0x01
   194fa:	82 83       	std	Z+2, r24	; 0x02
   194fc:	93 83       	std	Z+3, r25	; 0x03
   194fe:	de 01       	movw	r26, r28
   19500:	a7 5b       	subi	r26, 0xB7	; 183
   19502:	bf 4f       	sbci	r27, 0xFF	; 255
   19504:	f8 01       	movw	r30, r16
   19506:	b4 96       	adiw	r30, 0x24	; 36
   19508:	86 e0       	ldi	r24, 0x06	; 6
   1950a:	01 90       	ld	r0, Z+
   1950c:	0d 92       	st	X+, r0
   1950e:	8a 95       	dec	r24
   19510:	e1 f7       	brne	.-8      	; 0x1950a <lif_str2vol+0xfe>
   19512:	df 91       	pop	r29
   19514:	cf 91       	pop	r28
   19516:	1f 91       	pop	r17
   19518:	0f 91       	pop	r16
   1951a:	08 95       	ret

0001951c <lif_dir2str>:
   1951c:	ef 92       	push	r14
   1951e:	ff 92       	push	r15
   19520:	0f 93       	push	r16
   19522:	1f 93       	push	r17
   19524:	cf 93       	push	r28
   19526:	df 93       	push	r29
   19528:	ec 01       	movw	r28, r24
   1952a:	7b 01       	movw	r14, r22
   1952c:	bc 01       	movw	r22, r24
   1952e:	61 5b       	subi	r22, 0xB1	; 177
   19530:	7f 4f       	sbci	r23, 0xFF	; 255
   19532:	4a e0       	ldi	r20, 0x0A	; 10
   19534:	50 e0       	ldi	r21, 0x00	; 0
   19536:	c7 01       	movw	r24, r14
   19538:	77 de       	rcall	.-786    	; 0x19228 <lif_S2B>
   1953a:	fe 01       	movw	r30, r28
   1953c:	e6 5a       	subi	r30, 0xA6	; 166
   1953e:	ff 4f       	sbci	r31, 0xFF	; 255
   19540:	00 81       	ld	r16, Z
   19542:	11 81       	ldd	r17, Z+1	; 0x01
   19544:	20 e0       	ldi	r18, 0x00	; 0
   19546:	30 e0       	ldi	r19, 0x00	; 0
   19548:	42 e0       	ldi	r20, 0x02	; 2
   1954a:	50 e0       	ldi	r21, 0x00	; 0
   1954c:	6a e0       	ldi	r22, 0x0A	; 10
   1954e:	70 e0       	ldi	r23, 0x00	; 0
   19550:	c7 01       	movw	r24, r14
   19552:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19556:	fe 01       	movw	r30, r28
   19558:	e4 5a       	subi	r30, 0xA4	; 164
   1955a:	ff 4f       	sbci	r31, 0xFF	; 255
   1955c:	00 81       	ld	r16, Z
   1955e:	11 81       	ldd	r17, Z+1	; 0x01
   19560:	22 81       	ldd	r18, Z+2	; 0x02
   19562:	33 81       	ldd	r19, Z+3	; 0x03
   19564:	44 e0       	ldi	r20, 0x04	; 4
   19566:	50 e0       	ldi	r21, 0x00	; 0
   19568:	6c e0       	ldi	r22, 0x0C	; 12
   1956a:	70 e0       	ldi	r23, 0x00	; 0
   1956c:	c7 01       	movw	r24, r14
   1956e:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   19572:	fe 01       	movw	r30, r28
   19574:	e0 5a       	subi	r30, 0xA0	; 160
   19576:	ff 4f       	sbci	r31, 0xFF	; 255
   19578:	00 81       	ld	r16, Z
   1957a:	11 81       	ldd	r17, Z+1	; 0x01
   1957c:	22 81       	ldd	r18, Z+2	; 0x02
   1957e:	33 81       	ldd	r19, Z+3	; 0x03
   19580:	44 e0       	ldi	r20, 0x04	; 4
   19582:	50 e0       	ldi	r21, 0x00	; 0
   19584:	60 e1       	ldi	r22, 0x10	; 16
   19586:	70 e0       	ldi	r23, 0x00	; 0
   19588:	c7 01       	movw	r24, r14
   1958a:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   1958e:	d7 01       	movw	r26, r14
   19590:	54 96       	adiw	r26, 0x14	; 20
   19592:	fe 01       	movw	r30, r28
   19594:	ec 59       	subi	r30, 0x9C	; 156
   19596:	ff 4f       	sbci	r31, 0xFF	; 255
   19598:	86 e0       	ldi	r24, 0x06	; 6
   1959a:	01 90       	ld	r0, Z+
   1959c:	0d 92       	st	X+, r0
   1959e:	8a 95       	dec	r24
   195a0:	e1 f7       	brne	.-8      	; 0x1959a <lif_dir2str+0x7e>
   195a2:	fe 01       	movw	r30, r28
   195a4:	e6 59       	subi	r30, 0x96	; 150
   195a6:	ff 4f       	sbci	r31, 0xFF	; 255
   195a8:	00 81       	ld	r16, Z
   195aa:	11 81       	ldd	r17, Z+1	; 0x01
   195ac:	20 e0       	ldi	r18, 0x00	; 0
   195ae:	30 e0       	ldi	r19, 0x00	; 0
   195b0:	42 e0       	ldi	r20, 0x02	; 2
   195b2:	50 e0       	ldi	r21, 0x00	; 0
   195b4:	6a e1       	ldi	r22, 0x1A	; 26
   195b6:	70 e0       	ldi	r23, 0x00	; 0
   195b8:	c7 01       	movw	r24, r14
   195ba:	0e 94 48 b5 	call	0x16a90	; 0x16a90 <V2B_MSB>
   195be:	fe 01       	movw	r30, r28
   195c0:	e4 59       	subi	r30, 0x94	; 148
   195c2:	ff 4f       	sbci	r31, 0xFF	; 255
   195c4:	00 81       	ld	r16, Z
   195c6:	11 81       	ldd	r17, Z+1	; 0x01
   195c8:	20 e0       	ldi	r18, 0x00	; 0
   195ca:	30 e0       	ldi	r19, 0x00	; 0
   195cc:	42 e0       	ldi	r20, 0x02	; 2
   195ce:	50 e0       	ldi	r21, 0x00	; 0
   195d0:	6c e1       	ldi	r22, 0x1C	; 28
   195d2:	70 e0       	ldi	r23, 0x00	; 0
   195d4:	c7 01       	movw	r24, r14
   195d6:	0e 94 5c b5 	call	0x16ab8	; 0x16ab8 <V2B_LSB>
   195da:	c2 59       	subi	r28, 0x92	; 146
   195dc:	df 4f       	sbci	r29, 0xFF	; 255
   195de:	08 81       	ld	r16, Y
   195e0:	19 81       	ldd	r17, Y+1	; 0x01
   195e2:	20 e0       	ldi	r18, 0x00	; 0
   195e4:	30 e0       	ldi	r19, 0x00	; 0
   195e6:	42 e0       	ldi	r20, 0x02	; 2
   195e8:	50 e0       	ldi	r21, 0x00	; 0
   195ea:	6e e1       	ldi	r22, 0x1E	; 30
   195ec:	70 e0       	ldi	r23, 0x00	; 0
   195ee:	c7 01       	movw	r24, r14
   195f0:	0e 94 5c b5 	call	0x16ab8	; 0x16ab8 <V2B_LSB>
   195f4:	cd b7       	in	r28, 0x3d	; 61
   195f6:	de b7       	in	r29, 0x3e	; 62
   195f8:	e6 e0       	ldi	r30, 0x06	; 6
   195fa:	0c 94 63 e9 	jmp	0x1d2c6	; 0x1d2c6 <__epilogue_restores__+0x18>

000195fe <lif_str2dir>:
   195fe:	0f 93       	push	r16
   19600:	1f 93       	push	r17
   19602:	cf 93       	push	r28
   19604:	df 93       	push	r29
   19606:	8c 01       	movw	r16, r24
   19608:	eb 01       	movw	r28, r22
   1960a:	61 5b       	subi	r22, 0xB1	; 177
   1960c:	7f 4f       	sbci	r23, 0xFF	; 255
   1960e:	4a e0       	ldi	r20, 0x0A	; 10
   19610:	50 e0       	ldi	r21, 0x00	; 0
   19612:	b3 dd       	rcall	.-1178   	; 0x1917a <lif_B2S>
   19614:	42 e0       	ldi	r20, 0x02	; 2
   19616:	50 e0       	ldi	r21, 0x00	; 0
   19618:	6a e0       	ldi	r22, 0x0A	; 10
   1961a:	70 e0       	ldi	r23, 0x00	; 0
   1961c:	c8 01       	movw	r24, r16
   1961e:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19622:	fe 01       	movw	r30, r28
   19624:	e6 5a       	subi	r30, 0xA6	; 166
   19626:	ff 4f       	sbci	r31, 0xFF	; 255
   19628:	71 83       	std	Z+1, r23	; 0x01
   1962a:	60 83       	st	Z, r22
   1962c:	44 e0       	ldi	r20, 0x04	; 4
   1962e:	50 e0       	ldi	r21, 0x00	; 0
   19630:	6c e0       	ldi	r22, 0x0C	; 12
   19632:	70 e0       	ldi	r23, 0x00	; 0
   19634:	c8 01       	movw	r24, r16
   19636:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   1963a:	fe 01       	movw	r30, r28
   1963c:	e4 5a       	subi	r30, 0xA4	; 164
   1963e:	ff 4f       	sbci	r31, 0xFF	; 255
   19640:	60 83       	st	Z, r22
   19642:	71 83       	std	Z+1, r23	; 0x01
   19644:	82 83       	std	Z+2, r24	; 0x02
   19646:	93 83       	std	Z+3, r25	; 0x03
   19648:	44 e0       	ldi	r20, 0x04	; 4
   1964a:	50 e0       	ldi	r21, 0x00	; 0
   1964c:	60 e1       	ldi	r22, 0x10	; 16
   1964e:	70 e0       	ldi	r23, 0x00	; 0
   19650:	c8 01       	movw	r24, r16
   19652:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19656:	fe 01       	movw	r30, r28
   19658:	e0 5a       	subi	r30, 0xA0	; 160
   1965a:	ff 4f       	sbci	r31, 0xFF	; 255
   1965c:	60 83       	st	Z, r22
   1965e:	71 83       	std	Z+1, r23	; 0x01
   19660:	82 83       	std	Z+2, r24	; 0x02
   19662:	93 83       	std	Z+3, r25	; 0x03
   19664:	de 01       	movw	r26, r28
   19666:	ac 59       	subi	r26, 0x9C	; 156
   19668:	bf 4f       	sbci	r27, 0xFF	; 255
   1966a:	f8 01       	movw	r30, r16
   1966c:	74 96       	adiw	r30, 0x14	; 20
   1966e:	86 e0       	ldi	r24, 0x06	; 6
   19670:	01 90       	ld	r0, Z+
   19672:	0d 92       	st	X+, r0
   19674:	8a 95       	dec	r24
   19676:	e1 f7       	brne	.-8      	; 0x19670 <lif_str2dir+0x72>
   19678:	42 e0       	ldi	r20, 0x02	; 2
   1967a:	50 e0       	ldi	r21, 0x00	; 0
   1967c:	6a e1       	ldi	r22, 0x1A	; 26
   1967e:	70 e0       	ldi	r23, 0x00	; 0
   19680:	c8 01       	movw	r24, r16
   19682:	0e 94 71 b5 	call	0x16ae2	; 0x16ae2 <B2V_MSB>
   19686:	fe 01       	movw	r30, r28
   19688:	e6 59       	subi	r30, 0x96	; 150
   1968a:	ff 4f       	sbci	r31, 0xFF	; 255
   1968c:	71 83       	std	Z+1, r23	; 0x01
   1968e:	60 83       	st	Z, r22
   19690:	42 e0       	ldi	r20, 0x02	; 2
   19692:	50 e0       	ldi	r21, 0x00	; 0
   19694:	6c e1       	ldi	r22, 0x1C	; 28
   19696:	70 e0       	ldi	r23, 0x00	; 0
   19698:	c8 01       	movw	r24, r16
   1969a:	0e 94 90 b5 	call	0x16b20	; 0x16b20 <B2V_LSB>
   1969e:	fe 01       	movw	r30, r28
   196a0:	e4 59       	subi	r30, 0x94	; 148
   196a2:	ff 4f       	sbci	r31, 0xFF	; 255
   196a4:	71 83       	std	Z+1, r23	; 0x01
   196a6:	60 83       	st	Z, r22
   196a8:	42 e0       	ldi	r20, 0x02	; 2
   196aa:	50 e0       	ldi	r21, 0x00	; 0
   196ac:	6e e1       	ldi	r22, 0x1E	; 30
   196ae:	70 e0       	ldi	r23, 0x00	; 0
   196b0:	c8 01       	movw	r24, r16
   196b2:	0e 94 90 b5 	call	0x16b20	; 0x16b20 <B2V_LSB>
   196b6:	c2 59       	subi	r28, 0x92	; 146
   196b8:	df 4f       	sbci	r29, 0xFF	; 255
   196ba:	79 83       	std	Y+1, r23	; 0x01
   196bc:	68 83       	st	Y, r22
   196be:	df 91       	pop	r29
   196c0:	cf 91       	pop	r28
   196c2:	1f 91       	pop	r17
   196c4:	0f 91       	pop	r16
   196c6:	08 95       	ret

000196c8 <lif_BIN2BCD>:
   196c8:	6a e0       	ldi	r22, 0x0A	; 10
   196ca:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__udivmodqi4>
   196ce:	82 95       	swap	r24
   196d0:	80 7f       	andi	r24, 0xF0	; 240
   196d2:	89 2b       	or	r24, r25
   196d4:	08 95       	ret

000196d6 <lif_BCD2BIN>:
   196d6:	28 2f       	mov	r18, r24
   196d8:	22 95       	swap	r18
   196da:	2f 70       	andi	r18, 0x0F	; 15
   196dc:	8f 70       	andi	r24, 0x0F	; 15
   196de:	90 e0       	ldi	r25, 0x00	; 0
   196e0:	3a e0       	ldi	r19, 0x0A	; 10
   196e2:	23 9f       	mul	r18, r19
   196e4:	80 0d       	add	r24, r0
   196e6:	91 1d       	adc	r25, r1
   196e8:	11 24       	eor	r1, r1
   196ea:	08 95       	ret

000196ec <lif_time2lifbcd>:
   196ec:	aa e1       	ldi	r26, 0x1A	; 26
   196ee:	b0 e0       	ldi	r27, 0x00	; 0
   196f0:	ec e7       	ldi	r30, 0x7C	; 124
   196f2:	fb ec       	ldi	r31, 0xCB	; 203
   196f4:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
   196f8:	8b 01       	movw	r16, r22
   196fa:	9c 01       	movw	r18, r24
   196fc:	6f 8b       	std	Y+23, r22	; 0x17
   196fe:	78 8f       	std	Y+24, r23	; 0x18
   19700:	89 8f       	std	Y+25, r24	; 0x19
   19702:	9a 8f       	std	Y+26, r25	; 0x1a
   19704:	67 2b       	or	r22, r23
   19706:	68 2b       	or	r22, r24
   19708:	69 2b       	or	r22, r25
   1970a:	41 f4       	brne	.+16     	; 0x1971c <lif_time2lifbcd+0x30>
   1970c:	fa 01       	movw	r30, r20
   1970e:	ca 01       	movw	r24, r20
   19710:	06 96       	adiw	r24, 0x06	; 6
   19712:	11 92       	st	Z+, r1
   19714:	e8 17       	cp	r30, r24
   19716:	f9 07       	cpc	r31, r25
   19718:	e1 f7       	brne	.-8      	; 0x19712 <lif_time2lifbcd+0x26>
   1971a:	26 c0       	rjmp	.+76     	; 0x19768 <lif_time2lifbcd+0x7c>
   1971c:	8a 01       	movw	r16, r20
   1971e:	be 01       	movw	r22, r28
   19720:	6f 5f       	subi	r22, 0xFF	; 255
   19722:	7f 4f       	sbci	r23, 0xFF	; 255
   19724:	ce 01       	movw	r24, r28
   19726:	47 96       	adiw	r24, 0x17	; 23
   19728:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <gmtime_r>
   1972c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1972e:	9c 85       	ldd	r25, Y+12	; 0x0c
   19730:	64 e6       	ldi	r22, 0x64	; 100
   19732:	70 e0       	ldi	r23, 0x00	; 0
   19734:	0e 94 bb e8 	call	0x1d176	; 0x1d176 <__divmodhi4>
   19738:	c7 df       	rcall	.-114    	; 0x196c8 <lif_BIN2BCD>
   1973a:	f8 01       	movw	r30, r16
   1973c:	80 83       	st	Z, r24
   1973e:	89 85       	ldd	r24, Y+9	; 0x09
   19740:	8f 5f       	subi	r24, 0xFF	; 255
   19742:	c2 df       	rcall	.-124    	; 0x196c8 <lif_BIN2BCD>
   19744:	f8 01       	movw	r30, r16
   19746:	81 83       	std	Z+1, r24	; 0x01
   19748:	8f 81       	ldd	r24, Y+7	; 0x07
   1974a:	be df       	rcall	.-132    	; 0x196c8 <lif_BIN2BCD>
   1974c:	f8 01       	movw	r30, r16
   1974e:	82 83       	std	Z+2, r24	; 0x02
   19750:	8d 81       	ldd	r24, Y+5	; 0x05
   19752:	ba df       	rcall	.-140    	; 0x196c8 <lif_BIN2BCD>
   19754:	f8 01       	movw	r30, r16
   19756:	83 83       	std	Z+3, r24	; 0x03
   19758:	8b 81       	ldd	r24, Y+3	; 0x03
   1975a:	b6 df       	rcall	.-148    	; 0x196c8 <lif_BIN2BCD>
   1975c:	f8 01       	movw	r30, r16
   1975e:	84 83       	std	Z+4, r24	; 0x04
   19760:	89 81       	ldd	r24, Y+1	; 0x01
   19762:	b2 df       	rcall	.-156    	; 0x196c8 <lif_BIN2BCD>
   19764:	f8 01       	movw	r30, r16
   19766:	85 83       	std	Z+5, r24	; 0x05
   19768:	6a 96       	adiw	r28, 0x1a	; 26
   1976a:	e4 e0       	ldi	r30, 0x04	; 4
   1976c:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

00019770 <lif_lifbcd2time>:
   19770:	a6 e1       	ldi	r26, 0x16	; 22
   19772:	b0 e0       	ldi	r27, 0x00	; 0
   19774:	ee eb       	ldi	r30, 0xBE	; 190
   19776:	fb ec       	ldi	r31, 0xCB	; 203
   19778:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   1977c:	8c 01       	movw	r16, r24
   1977e:	7c 01       	movw	r14, r24
   19780:	5c 01       	movw	r10, r24
   19782:	26 e0       	ldi	r18, 0x06	; 6
   19784:	a2 0e       	add	r10, r18
   19786:	b1 1c       	adc	r11, r1
   19788:	cc 24       	eor	r12, r12
   1978a:	c3 94       	inc	r12
   1978c:	d1 2c       	mov	r13, r1
   1978e:	f7 01       	movw	r30, r14
   19790:	81 91       	ld	r24, Z+
   19792:	7f 01       	movw	r14, r30
   19794:	a0 df       	rcall	.-192    	; 0x196d6 <lif_BCD2BIN>
   19796:	89 2b       	or	r24, r25
   19798:	11 f0       	breq	.+4      	; 0x1979e <lif_lifbcd2time+0x2e>
   1979a:	c1 2c       	mov	r12, r1
   1979c:	d1 2c       	mov	r13, r1
   1979e:	ea 14       	cp	r14, r10
   197a0:	fb 04       	cpc	r15, r11
   197a2:	a9 f7       	brne	.-22     	; 0x1978e <lif_lifbcd2time+0x1e>
   197a4:	c1 14       	cp	r12, r1
   197a6:	d1 04       	cpc	r13, r1
   197a8:	61 f5       	brne	.+88     	; 0x19802 <lif_lifbcd2time+0x92>
   197aa:	f8 01       	movw	r30, r16
   197ac:	80 81       	ld	r24, Z
   197ae:	93 df       	rcall	.-218    	; 0x196d6 <lif_BCD2BIN>
   197b0:	7c 01       	movw	r14, r24
   197b2:	f8 01       	movw	r30, r16
   197b4:	81 81       	ldd	r24, Z+1	; 0x01
   197b6:	8f df       	rcall	.-226    	; 0x196d6 <lif_BCD2BIN>
   197b8:	01 97       	sbiw	r24, 0x01	; 1
   197ba:	f6 e4       	ldi	r31, 0x46	; 70
   197bc:	ef 16       	cp	r14, r31
   197be:	f1 04       	cpc	r15, r1
   197c0:	1c f4       	brge	.+6      	; 0x197c8 <lif_lifbcd2time+0x58>
   197c2:	24 e6       	ldi	r18, 0x64	; 100
   197c4:	e2 0e       	add	r14, r18
   197c6:	f1 1c       	adc	r15, r1
   197c8:	fc 86       	std	Y+12, r15	; 0x0c
   197ca:	eb 86       	std	Y+11, r14	; 0x0b
   197cc:	9a 87       	std	Y+10, r25	; 0x0a
   197ce:	89 87       	std	Y+9, r24	; 0x09
   197d0:	f8 01       	movw	r30, r16
   197d2:	82 81       	ldd	r24, Z+2	; 0x02
   197d4:	80 df       	rcall	.-256    	; 0x196d6 <lif_BCD2BIN>
   197d6:	98 87       	std	Y+8, r25	; 0x08
   197d8:	8f 83       	std	Y+7, r24	; 0x07
   197da:	f8 01       	movw	r30, r16
   197dc:	83 81       	ldd	r24, Z+3	; 0x03
   197de:	7b df       	rcall	.-266    	; 0x196d6 <lif_BCD2BIN>
   197e0:	9e 83       	std	Y+6, r25	; 0x06
   197e2:	8d 83       	std	Y+5, r24	; 0x05
   197e4:	f8 01       	movw	r30, r16
   197e6:	84 81       	ldd	r24, Z+4	; 0x04
   197e8:	76 df       	rcall	.-276    	; 0x196d6 <lif_BCD2BIN>
   197ea:	9c 83       	std	Y+4, r25	; 0x04
   197ec:	8b 83       	std	Y+3, r24	; 0x03
   197ee:	f8 01       	movw	r30, r16
   197f0:	85 81       	ldd	r24, Z+5	; 0x05
   197f2:	71 df       	rcall	.-286    	; 0x196d6 <lif_BCD2BIN>
   197f4:	9a 83       	std	Y+2, r25	; 0x02
   197f6:	89 83       	std	Y+1, r24	; 0x01
   197f8:	ce 01       	movw	r24, r28
   197fa:	01 96       	adiw	r24, 0x01	; 1
   197fc:	0e 94 52 39 	call	0x72a4	; 0x72a4 <timegm>
   19800:	03 c0       	rjmp	.+6      	; 0x19808 <lif_lifbcd2time+0x98>
   19802:	60 e0       	ldi	r22, 0x00	; 0
   19804:	70 e0       	ldi	r23, 0x00	; 0
   19806:	cb 01       	movw	r24, r22
   19808:	66 96       	adiw	r28, 0x16	; 22
   1980a:	ea e0       	ldi	r30, 0x0A	; 10
   1980c:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

00019810 <lif_ctime_gmt>:
   19810:	a6 e1       	ldi	r26, 0x16	; 22
   19812:	b0 e0       	ldi	r27, 0x00	; 0
   19814:	ee e0       	ldi	r30, 0x0E	; 14
   19816:	fc ec       	ldi	r31, 0xCC	; 204
   19818:	0c 94 49 e9 	jmp	0x1d292	; 0x1d292 <__prologue_saves__+0x1c>
   1981c:	20 e2       	ldi	r18, 0x20	; 32
   1981e:	ec e8       	ldi	r30, 0x8C	; 140
   19820:	f9 e1       	ldi	r31, 0x19	; 25
   19822:	df 01       	movw	r26, r30
   19824:	1d 92       	st	X+, r1
   19826:	2a 95       	dec	r18
   19828:	e9 f7       	brne	.-6      	; 0x19824 <lif_ctime_gmt+0x14>
   1982a:	be 01       	movw	r22, r28
   1982c:	6f 5f       	subi	r22, 0xFF	; 255
   1982e:	7f 4f       	sbci	r23, 0xFF	; 255
   19830:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <gmtime_r>
   19834:	6c e8       	ldi	r22, 0x8C	; 140
   19836:	79 e1       	ldi	r23, 0x19	; 25
   19838:	0e 94 a8 3b 	call	0x7750	; 0x7750 <asctime_r>
   1983c:	8c 01       	movw	r16, r24
   1983e:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <trim_tail>
   19842:	c8 01       	movw	r24, r16
   19844:	66 96       	adiw	r28, 0x16	; 22
   19846:	e4 e0       	ldi	r30, 0x04	; 4
   19848:	0c 94 65 e9 	jmp	0x1d2ca	; 0x1d2ca <__epilogue_restores__+0x1c>

0001984c <lif_lifbcd2timestr>:
   1984c:	a4 e0       	ldi	r26, 0x04	; 4
   1984e:	b0 e0       	ldi	r27, 0x00	; 0
   19850:	ec e2       	ldi	r30, 0x2C	; 44
   19852:	fc ec       	ldi	r31, 0xCC	; 204
   19854:	0c 94 4b e9 	jmp	0x1d296	; 0x1d296 <__prologue_saves__+0x20>
   19858:	20 e2       	ldi	r18, 0x20	; 32
   1985a:	ec e6       	ldi	r30, 0x6C	; 108
   1985c:	f9 e1       	ldi	r31, 0x19	; 25
   1985e:	df 01       	movw	r26, r30
   19860:	1d 92       	st	X+, r1
   19862:	2a 95       	dec	r18
   19864:	e9 f7       	brne	.-6      	; 0x19860 <lif_lifbcd2timestr+0x14>
   19866:	84 df       	rcall	.-248    	; 0x19770 <lif_lifbcd2time>
   19868:	69 83       	std	Y+1, r22	; 0x01
   1986a:	7a 83       	std	Y+2, r23	; 0x02
   1986c:	8b 83       	std	Y+3, r24	; 0x03
   1986e:	9c 83       	std	Y+4, r25	; 0x04
   19870:	67 2b       	or	r22, r23
   19872:	68 2b       	or	r22, r24
   19874:	69 2b       	or	r22, r25
   19876:	29 f0       	breq	.+10     	; 0x19882 <lif_lifbcd2timestr+0x36>
   19878:	ce 01       	movw	r24, r28
   1987a:	01 96       	adiw	r24, 0x01	; 1
   1987c:	c9 df       	rcall	.-110    	; 0x19810 <lif_ctime_gmt>
   1987e:	bc 01       	movw	r22, r24
   19880:	02 c0       	rjmp	.+4      	; 0x19886 <lif_lifbcd2timestr+0x3a>
   19882:	65 e9       	ldi	r22, 0x95	; 149
   19884:	75 e1       	ldi	r23, 0x15	; 21
   19886:	8c e6       	ldi	r24, 0x6C	; 108
   19888:	99 e1       	ldi	r25, 0x19	; 25
   1988a:	0e 94 7e 30 	call	0x60fc	; 0x60fc <strcpy>
   1988e:	8c e6       	ldi	r24, 0x6C	; 108
   19890:	99 e1       	ldi	r25, 0x19	; 25
   19892:	24 96       	adiw	r28, 0x04	; 4
   19894:	e2 e0       	ldi	r30, 0x02	; 2
   19896:	0c 94 67 e9 	jmp	0x1d2ce	; 0x1d2ce <__epilogue_restores__+0x20>

0001989a <lif_image_clear>:
   1989a:	20 e7       	ldi	r18, 0x70	; 112
   1989c:	fc 01       	movw	r30, r24
   1989e:	11 92       	st	Z+, r1
   198a0:	2a 95       	dec	r18
   198a2:	e9 f7       	brne	.-6      	; 0x1989e <lif_image_clear+0x4>
   198a4:	08 95       	ret

000198a6 <lif_dir_clear>:
   198a6:	81 5b       	subi	r24, 0xB1	; 177
   198a8:	9f 4f       	sbci	r25, 0xFF	; 255
   198aa:	21 e2       	ldi	r18, 0x21	; 33
   198ac:	fc 01       	movw	r30, r24
   198ae:	11 92       	st	Z+, r1
   198b0:	2a 95       	dec	r18
   198b2:	e9 f7       	brne	.-6      	; 0x198ae <lif_dir_clear+0x8>
   198b4:	08 95       	ret

000198b6 <lif_vol_clear>:
   198b6:	84 96       	adiw	r24, 0x24	; 36
   198b8:	2b e2       	ldi	r18, 0x2B	; 43
   198ba:	fc 01       	movw	r30, r24
   198bc:	11 92       	st	Z+, r1
   198be:	2a 95       	dec	r18
   198c0:	e9 f7       	brne	.-6      	; 0x198bc <lif_vol_clear+0x6>
   198c2:	08 95       	ret

000198c4 <lif_dump_vol>:
   198c4:	cf 93       	push	r28
   198c6:	df 93       	push	r29
   198c8:	ec 01       	movw	r28, r24
   198ca:	7f 93       	push	r23
   198cc:	6f 93       	push	r22
   198ce:	8b eb       	ldi	r24, 0xBB	; 187
   198d0:	92 e4       	ldi	r25, 0x42	; 66
   198d2:	1f 92       	push	r1
   198d4:	9f 93       	push	r25
   198d6:	8f 93       	push	r24
   198d8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   198dc:	89 81       	ldd	r24, Y+1	; 0x01
   198de:	8f 93       	push	r24
   198e0:	88 81       	ld	r24, Y
   198e2:	8f 93       	push	r24
   198e4:	81 ea       	ldi	r24, 0xA1	; 161
   198e6:	92 e4       	ldi	r25, 0x42	; 66
   198e8:	1f 92       	push	r1
   198ea:	9f 93       	push	r25
   198ec:	8f 93       	push	r24
   198ee:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   198f2:	8f 81       	ldd	r24, Y+7	; 0x07
   198f4:	8f 93       	push	r24
   198f6:	8e 81       	ldd	r24, Y+6	; 0x06
   198f8:	8f 93       	push	r24
   198fa:	8d 81       	ldd	r24, Y+5	; 0x05
   198fc:	8f 93       	push	r24
   198fe:	8c 81       	ldd	r24, Y+4	; 0x04
   19900:	8f 93       	push	r24
   19902:	84 e8       	ldi	r24, 0x84	; 132
   19904:	92 e4       	ldi	r25, 0x42	; 66
   19906:	1f 92       	push	r1
   19908:	9f 93       	push	r25
   1990a:	8f 93       	push	r24
   1990c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19910:	8b 85       	ldd	r24, Y+11	; 0x0b
   19912:	8f 93       	push	r24
   19914:	8a 85       	ldd	r24, Y+10	; 0x0a
   19916:	8f 93       	push	r24
   19918:	89 85       	ldd	r24, Y+9	; 0x09
   1991a:	8f 93       	push	r24
   1991c:	88 85       	ldd	r24, Y+8	; 0x08
   1991e:	8f 93       	push	r24
   19920:	87 e6       	ldi	r24, 0x67	; 103
   19922:	92 e4       	ldi	r25, 0x42	; 66
   19924:	1f 92       	push	r1
   19926:	9f 93       	push	r25
   19928:	8f 93       	push	r24
   1992a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1992e:	8f 85       	ldd	r24, Y+15	; 0x0f
   19930:	8f 93       	push	r24
   19932:	8e 85       	ldd	r24, Y+14	; 0x0e
   19934:	8f 93       	push	r24
   19936:	8d 85       	ldd	r24, Y+13	; 0x0d
   19938:	8f 93       	push	r24
   1993a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1993c:	8f 93       	push	r24
   1993e:	8a e4       	ldi	r24, 0x4A	; 74
   19940:	92 e4       	ldi	r25, 0x42	; 66
   19942:	1f 92       	push	r1
   19944:	9f 93       	push	r25
   19946:	8f 93       	push	r24
   19948:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1994c:	8b 89       	ldd	r24, Y+19	; 0x13
   1994e:	8f 93       	push	r24
   19950:	8a 89       	ldd	r24, Y+18	; 0x12
   19952:	8f 93       	push	r24
   19954:	89 89       	ldd	r24, Y+17	; 0x11
   19956:	8f 93       	push	r24
   19958:	88 89       	ldd	r24, Y+16	; 0x10
   1995a:	8f 93       	push	r24
   1995c:	8d e2       	ldi	r24, 0x2D	; 45
   1995e:	92 e4       	ldi	r25, 0x42	; 66
   19960:	1f 92       	push	r1
   19962:	9f 93       	push	r25
   19964:	8f 93       	push	r24
   19966:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1996a:	8d b7       	in	r24, 0x3d	; 61
   1996c:	9e b7       	in	r25, 0x3e	; 62
   1996e:	86 96       	adiw	r24, 0x26	; 38
   19970:	0f b6       	in	r0, 0x3f	; 63
   19972:	f8 94       	cli
   19974:	9e bf       	out	0x3e, r25	; 62
   19976:	0f be       	out	0x3f, r0	; 63
   19978:	8d bf       	out	0x3d, r24	; 61
   1997a:	8f 89       	ldd	r24, Y+23	; 0x17
   1997c:	8f 93       	push	r24
   1997e:	8e 89       	ldd	r24, Y+22	; 0x16
   19980:	8f 93       	push	r24
   19982:	8d 89       	ldd	r24, Y+21	; 0x15
   19984:	8f 93       	push	r24
   19986:	8c 89       	ldd	r24, Y+20	; 0x14
   19988:	8f 93       	push	r24
   1998a:	80 e1       	ldi	r24, 0x10	; 16
   1998c:	92 e4       	ldi	r25, 0x42	; 66
   1998e:	1f 92       	push	r1
   19990:	9f 93       	push	r25
   19992:	8f 93       	push	r24
   19994:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19998:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1999a:	8f 93       	push	r24
   1999c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1999e:	8f 93       	push	r24
   199a0:	89 8d       	ldd	r24, Y+25	; 0x19
   199a2:	8f 93       	push	r24
   199a4:	88 8d       	ldd	r24, Y+24	; 0x18
   199a6:	8f 93       	push	r24
   199a8:	83 ef       	ldi	r24, 0xF3	; 243
   199aa:	91 e4       	ldi	r25, 0x41	; 65
   199ac:	1f 92       	push	r1
   199ae:	9f 93       	push	r25
   199b0:	8f 93       	push	r24
   199b2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   199b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199ba:	09 2e       	mov	r0, r25
   199bc:	00 0c       	add	r0, r0
   199be:	aa 0b       	sbc	r26, r26
   199c0:	bb 0b       	sbc	r27, r27
   199c2:	bf 93       	push	r27
   199c4:	af 93       	push	r26
   199c6:	9f 93       	push	r25
   199c8:	8f 93       	push	r24
   199ca:	86 ed       	ldi	r24, 0xD6	; 214
   199cc:	91 e4       	ldi	r25, 0x41	; 65
   199ce:	1f 92       	push	r1
   199d0:	9f 93       	push	r25
   199d2:	8f 93       	push	r24
   199d4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   199d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
   199da:	9f 8d       	ldd	r25, Y+31	; 0x1f
   199dc:	09 2e       	mov	r0, r25
   199de:	00 0c       	add	r0, r0
   199e0:	aa 0b       	sbc	r26, r26
   199e2:	bb 0b       	sbc	r27, r27
   199e4:	bf 93       	push	r27
   199e6:	af 93       	push	r26
   199e8:	9f 93       	push	r25
   199ea:	8f 93       	push	r24
   199ec:	89 eb       	ldi	r24, 0xB9	; 185
   199ee:	91 e4       	ldi	r25, 0x41	; 65
   199f0:	1f 92       	push	r1
   199f2:	9f 93       	push	r25
   199f4:	8f 93       	push	r24
   199f6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   199fa:	ce 01       	movw	r24, r28
   199fc:	86 96       	adiw	r24, 0x26	; 38
   199fe:	9f 93       	push	r25
   19a00:	8f 93       	push	r24
   19a02:	8f e9       	ldi	r24, 0x9F	; 159
   19a04:	91 e4       	ldi	r25, 0x41	; 65
   19a06:	1f 92       	push	r1
   19a08:	9f 93       	push	r25
   19a0a:	8f 93       	push	r24
   19a0c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a10:	8d b7       	in	r24, 0x3d	; 61
   19a12:	9e b7       	in	r25, 0x3e	; 62
   19a14:	81 96       	adiw	r24, 0x21	; 33
   19a16:	0f b6       	in	r0, 0x3f	; 63
   19a18:	f8 94       	cli
   19a1a:	9e bf       	out	0x3e, r25	; 62
   19a1c:	0f be       	out	0x3f, r0	; 63
   19a1e:	8d bf       	out	0x3d, r24	; 61
   19a20:	8d a1       	ldd	r24, Y+37	; 0x25
   19a22:	8f 93       	push	r24
   19a24:	8c a1       	ldd	r24, Y+36	; 0x24
   19a26:	8f 93       	push	r24
   19a28:	83 e8       	ldi	r24, 0x83	; 131
   19a2a:	91 e4       	ldi	r25, 0x41	; 65
   19a2c:	1f 92       	push	r1
   19a2e:	9f 93       	push	r25
   19a30:	8f 93       	push	r24
   19a32:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a36:	88 a9       	ldd	r24, Y+48	; 0x30
   19a38:	8f 93       	push	r24
   19a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
   19a3c:	8f 93       	push	r24
   19a3e:	8e a5       	ldd	r24, Y+46	; 0x2e
   19a40:	8f 93       	push	r24
   19a42:	8d a5       	ldd	r24, Y+45	; 0x2d
   19a44:	8f 93       	push	r24
   19a46:	86 e6       	ldi	r24, 0x66	; 102
   19a48:	91 e4       	ldi	r25, 0x41	; 65
   19a4a:	1f 92       	push	r1
   19a4c:	9f 93       	push	r25
   19a4e:	8f 93       	push	r24
   19a50:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a54:	88 ad       	ldd	r24, Y+56	; 0x38
   19a56:	8f 93       	push	r24
   19a58:	8f a9       	ldd	r24, Y+55	; 0x37
   19a5a:	8f 93       	push	r24
   19a5c:	8e a9       	ldd	r24, Y+54	; 0x36
   19a5e:	8f 93       	push	r24
   19a60:	8d a9       	ldd	r24, Y+53	; 0x35
   19a62:	8f 93       	push	r24
   19a64:	89 e4       	ldi	r24, 0x49	; 73
   19a66:	91 e4       	ldi	r25, 0x41	; 65
   19a68:	1f 92       	push	r1
   19a6a:	9f 93       	push	r25
   19a6c:	8f 93       	push	r24
   19a6e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a72:	8a a9       	ldd	r24, Y+50	; 0x32
   19a74:	8f 93       	push	r24
   19a76:	89 a9       	ldd	r24, Y+49	; 0x31
   19a78:	8f 93       	push	r24
   19a7a:	8d e2       	ldi	r24, 0x2D	; 45
   19a7c:	91 e4       	ldi	r25, 0x41	; 65
   19a7e:	1f 92       	push	r1
   19a80:	9f 93       	push	r25
   19a82:	8f 93       	push	r24
   19a84:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a88:	8a ad       	ldd	r24, Y+58	; 0x3a
   19a8a:	8f 93       	push	r24
   19a8c:	89 ad       	ldd	r24, Y+57	; 0x39
   19a8e:	8f 93       	push	r24
   19a90:	81 e1       	ldi	r24, 0x11	; 17
   19a92:	91 e4       	ldi	r25, 0x41	; 65
   19a94:	1f 92       	push	r1
   19a96:	9f 93       	push	r25
   19a98:	8f 93       	push	r24
   19a9a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19a9e:	ce 01       	movw	r24, r28
   19aa0:	87 5b       	subi	r24, 0xB7	; 183
   19aa2:	9f 4f       	sbci	r25, 0xFF	; 255
   19aa4:	d3 de       	rcall	.-602    	; 0x1984c <lif_lifbcd2timestr>
   19aa6:	9f 93       	push	r25
   19aa8:	8f 93       	push	r24
   19aaa:	87 ef       	ldi	r24, 0xF7	; 247
   19aac:	90 e4       	ldi	r25, 0x40	; 64
   19aae:	1f 92       	push	r1
   19ab0:	9f 93       	push	r25
   19ab2:	8f 93       	push	r24
   19ab4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19ab8:	8d b7       	in	r24, 0x3d	; 61
   19aba:	9e b7       	in	r25, 0x3e	; 62
   19abc:	82 96       	adiw	r24, 0x22	; 34
   19abe:	0f b6       	in	r0, 0x3f	; 63
   19ac0:	f8 94       	cli
   19ac2:	9e bf       	out	0x3e, r25	; 62
   19ac4:	0f be       	out	0x3f, r0	; 63
   19ac6:	8d bf       	out	0x3d, r24	; 61
   19ac8:	ce 01       	movw	r24, r28
   19aca:	81 5b       	subi	r24, 0xB1	; 177
   19acc:	9f 4f       	sbci	r25, 0xFF	; 255
   19ace:	9f 93       	push	r25
   19ad0:	8f 93       	push	r24
   19ad2:	8d ed       	ldi	r24, 0xDD	; 221
   19ad4:	90 e4       	ldi	r25, 0x40	; 64
   19ad6:	1f 92       	push	r1
   19ad8:	9f 93       	push	r25
   19ada:	8f 93       	push	r24
   19adc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19ae0:	fe 01       	movw	r30, r28
   19ae2:	e6 5a       	subi	r30, 0xA6	; 166
   19ae4:	ff 4f       	sbci	r31, 0xFF	; 255
   19ae6:	81 81       	ldd	r24, Z+1	; 0x01
   19ae8:	8f 93       	push	r24
   19aea:	80 81       	ld	r24, Z
   19aec:	8f 93       	push	r24
   19aee:	81 ec       	ldi	r24, 0xC1	; 193
   19af0:	90 e4       	ldi	r25, 0x40	; 64
   19af2:	1f 92       	push	r1
   19af4:	9f 93       	push	r25
   19af6:	8f 93       	push	r24
   19af8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19afc:	fe 01       	movw	r30, r28
   19afe:	e6 59       	subi	r30, 0x96	; 150
   19b00:	ff 4f       	sbci	r31, 0xFF	; 255
   19b02:	81 81       	ldd	r24, Z+1	; 0x01
   19b04:	8f 93       	push	r24
   19b06:	80 81       	ld	r24, Z
   19b08:	8f 93       	push	r24
   19b0a:	85 ea       	ldi	r24, 0xA5	; 165
   19b0c:	90 e4       	ldi	r25, 0x40	; 64
   19b0e:	1f 92       	push	r1
   19b10:	9f 93       	push	r25
   19b12:	8f 93       	push	r24
   19b14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19b18:	fe 01       	movw	r30, r28
   19b1a:	e4 5a       	subi	r30, 0xA4	; 164
   19b1c:	ff 4f       	sbci	r31, 0xFF	; 255
   19b1e:	83 81       	ldd	r24, Z+3	; 0x03
   19b20:	8f 93       	push	r24
   19b22:	82 81       	ldd	r24, Z+2	; 0x02
   19b24:	8f 93       	push	r24
   19b26:	81 81       	ldd	r24, Z+1	; 0x01
   19b28:	8f 93       	push	r24
   19b2a:	80 81       	ld	r24, Z
   19b2c:	8f 93       	push	r24
   19b2e:	88 e8       	ldi	r24, 0x88	; 136
   19b30:	90 e4       	ldi	r25, 0x40	; 64
   19b32:	1f 92       	push	r1
   19b34:	9f 93       	push	r25
   19b36:	8f 93       	push	r24
   19b38:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19b3c:	fe 01       	movw	r30, r28
   19b3e:	e0 5a       	subi	r30, 0xA0	; 160
   19b40:	ff 4f       	sbci	r31, 0xFF	; 255
   19b42:	83 81       	ldd	r24, Z+3	; 0x03
   19b44:	8f 93       	push	r24
   19b46:	82 81       	ldd	r24, Z+2	; 0x02
   19b48:	8f 93       	push	r24
   19b4a:	81 81       	ldd	r24, Z+1	; 0x01
   19b4c:	8f 93       	push	r24
   19b4e:	80 81       	ld	r24, Z
   19b50:	8f 93       	push	r24
   19b52:	8b e6       	ldi	r24, 0x6B	; 107
   19b54:	90 e4       	ldi	r25, 0x40	; 64
   19b56:	1f 92       	push	r1
   19b58:	9f 93       	push	r25
   19b5a:	8f 93       	push	r24
   19b5c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19b60:	fe 01       	movw	r30, r28
   19b62:	e4 59       	subi	r30, 0x94	; 148
   19b64:	ff 4f       	sbci	r31, 0xFF	; 255
   19b66:	80 81       	ld	r24, Z
   19b68:	91 81       	ldd	r25, Z+1	; 0x01
   19b6a:	1f 92       	push	r1
   19b6c:	1f 92       	push	r1
   19b6e:	9f 93       	push	r25
   19b70:	8f 93       	push	r24
   19b72:	8e e4       	ldi	r24, 0x4E	; 78
   19b74:	90 e4       	ldi	r25, 0x40	; 64
   19b76:	1f 92       	push	r1
   19b78:	9f 93       	push	r25
   19b7a:	8f 93       	push	r24
   19b7c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19b80:	8d b7       	in	r24, 0x3d	; 61
   19b82:	9e b7       	in	r25, 0x3e	; 62
   19b84:	84 96       	adiw	r24, 0x24	; 36
   19b86:	0f b6       	in	r0, 0x3f	; 63
   19b88:	f8 94       	cli
   19b8a:	9e bf       	out	0x3e, r25	; 62
   19b8c:	0f be       	out	0x3f, r0	; 63
   19b8e:	8d bf       	out	0x3d, r24	; 61
   19b90:	fe 01       	movw	r30, r28
   19b92:	e2 59       	subi	r30, 0x92	; 146
   19b94:	ff 4f       	sbci	r31, 0xFF	; 255
   19b96:	81 81       	ldd	r24, Z+1	; 0x01
   19b98:	8f 93       	push	r24
   19b9a:	80 81       	ld	r24, Z
   19b9c:	8f 93       	push	r24
   19b9e:	82 e3       	ldi	r24, 0x32	; 50
   19ba0:	90 e4       	ldi	r25, 0x40	; 64
   19ba2:	1f 92       	push	r1
   19ba4:	9f 93       	push	r25
   19ba6:	8f 93       	push	r24
   19ba8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19bac:	ce 01       	movw	r24, r28
   19bae:	8c 59       	subi	r24, 0x9C	; 156
   19bb0:	9f 4f       	sbci	r25, 0xFF	; 255
   19bb2:	4c de       	rcall	.-872    	; 0x1984c <lif_lifbcd2timestr>
   19bb4:	9f 93       	push	r25
   19bb6:	8f 93       	push	r24
   19bb8:	88 e1       	ldi	r24, 0x18	; 24
   19bba:	90 e4       	ldi	r25, 0x40	; 64
   19bbc:	1f 92       	push	r1
   19bbe:	9f 93       	push	r25
   19bc0:	8f 93       	push	r24
   19bc2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19bc6:	86 e1       	ldi	r24, 0x16	; 22
   19bc8:	90 e4       	ldi	r25, 0x40	; 64
   19bca:	1f 92       	push	r1
   19bcc:	9f 93       	push	r25
   19bce:	8f 93       	push	r24
   19bd0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19bd4:	8d b7       	in	r24, 0x3d	; 61
   19bd6:	9e b7       	in	r25, 0x3e	; 62
   19bd8:	0d 96       	adiw	r24, 0x0d	; 13
   19bda:	0f b6       	in	r0, 0x3f	; 63
   19bdc:	f8 94       	cli
   19bde:	9e bf       	out	0x3e, r25	; 62
   19be0:	0f be       	out	0x3f, r0	; 63
   19be2:	8d bf       	out	0x3d, r24	; 61
   19be4:	df 91       	pop	r29
   19be6:	cf 91       	pop	r28
   19be8:	08 95       	ret

00019bea <lif_check_volume>:
   19bea:	0f 93       	push	r16
   19bec:	1f 93       	push	r17
   19bee:	cf 93       	push	r28
   19bf0:	df 93       	push	r29
   19bf2:	ec 01       	movw	r28, r24
   19bf4:	86 96       	adiw	r24, 0x26	; 38
   19bf6:	fb da       	rcall	.-2570   	; 0x191ee <lif_checkname>
   19bf8:	89 2b       	or	r24, r25
   19bfa:	79 f4       	brne	.+30     	; 0x19c1a <lif_check_volume+0x30>
   19bfc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19c00:	80 ff       	sbrs	r24, 0
   19c02:	0e c0       	rjmp	.+28     	; 0x19c20 <lif_check_volume+0x36>
   19c04:	87 ef       	ldi	r24, 0xF7	; 247
   19c06:	9f e3       	ldi	r25, 0x3F	; 63
   19c08:	1f 92       	push	r1
   19c0a:	9f 93       	push	r25
   19c0c:	8f 93       	push	r24
   19c0e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19c12:	0f 90       	pop	r0
   19c14:	0f 90       	pop	r0
   19c16:	0f 90       	pop	r0
   19c18:	03 c0       	rjmp	.+6      	; 0x19c20 <lif_check_volume+0x36>
   19c1a:	81 e0       	ldi	r24, 0x01	; 1
   19c1c:	90 e0       	ldi	r25, 0x00	; 0
   19c1e:	02 c0       	rjmp	.+4      	; 0x19c24 <lif_check_volume+0x3a>
   19c20:	80 e0       	ldi	r24, 0x00	; 0
   19c22:	90 e0       	ldi	r25, 0x00	; 0
   19c24:	29 a9       	ldd	r18, Y+49	; 0x31
   19c26:	3a a9       	ldd	r19, Y+50	; 0x32
   19c28:	21 15       	cp	r18, r1
   19c2a:	40 e1       	ldi	r20, 0x10	; 16
   19c2c:	34 07       	cpc	r19, r20
   19c2e:	a1 f0       	breq	.+40     	; 0x19c58 <lif_check_volume+0x6e>
   19c30:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19c34:	80 ff       	sbrs	r24, 0
   19c36:	0e c0       	rjmp	.+28     	; 0x19c54 <lif_check_volume+0x6a>
   19c38:	3f 93       	push	r19
   19c3a:	2f 93       	push	r18
   19c3c:	8e eb       	ldi	r24, 0xBE	; 190
   19c3e:	9f e3       	ldi	r25, 0x3F	; 63
   19c40:	1f 92       	push	r1
   19c42:	9f 93       	push	r25
   19c44:	8f 93       	push	r24
   19c46:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19c4a:	0f 90       	pop	r0
   19c4c:	0f 90       	pop	r0
   19c4e:	0f 90       	pop	r0
   19c50:	0f 90       	pop	r0
   19c52:	0f 90       	pop	r0
   19c54:	80 e0       	ldi	r24, 0x00	; 0
   19c56:	90 e0       	ldi	r25, 0x00	; 0
   19c58:	29 ad       	ldd	r18, Y+57	; 0x39
   19c5a:	3a ad       	ldd	r19, Y+58	; 0x3a
   19c5c:	22 30       	cpi	r18, 0x02	; 2
   19c5e:	31 05       	cpc	r19, r1
   19c60:	a0 f0       	brcs	.+40     	; 0x19c8a <lif_check_volume+0xa0>
   19c62:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19c66:	80 ff       	sbrs	r24, 0
   19c68:	0e c0       	rjmp	.+28     	; 0x19c86 <lif_check_volume+0x9c>
   19c6a:	3f 93       	push	r19
   19c6c:	2f 93       	push	r18
   19c6e:	86 ea       	ldi	r24, 0xA6	; 166
   19c70:	9f e3       	ldi	r25, 0x3F	; 63
   19c72:	1f 92       	push	r1
   19c74:	9f 93       	push	r25
   19c76:	8f 93       	push	r24
   19c78:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19c7c:	0f 90       	pop	r0
   19c7e:	0f 90       	pop	r0
   19c80:	0f 90       	pop	r0
   19c82:	0f 90       	pop	r0
   19c84:	0f 90       	pop	r0
   19c86:	80 e0       	ldi	r24, 0x00	; 0
   19c88:	90 e0       	ldi	r25, 0x00	; 0
   19c8a:	2b a9       	ldd	r18, Y+51	; 0x33
   19c8c:	3c a9       	ldd	r19, Y+52	; 0x34
   19c8e:	23 2b       	or	r18, r19
   19c90:	81 f0       	breq	.+32     	; 0x19cb2 <lif_check_volume+0xc8>
   19c92:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19c96:	80 ff       	sbrs	r24, 0
   19c98:	0a c0       	rjmp	.+20     	; 0x19cae <lif_check_volume+0xc4>
   19c9a:	8d e6       	ldi	r24, 0x6D	; 109
   19c9c:	9f e3       	ldi	r25, 0x3F	; 63
   19c9e:	1f 92       	push	r1
   19ca0:	9f 93       	push	r25
   19ca2:	8f 93       	push	r24
   19ca4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19ca8:	0f 90       	pop	r0
   19caa:	0f 90       	pop	r0
   19cac:	0f 90       	pop	r0
   19cae:	80 e0       	ldi	r24, 0x00	; 0
   19cb0:	90 e0       	ldi	r25, 0x00	; 0
   19cb2:	2b ad       	ldd	r18, Y+59	; 0x3b
   19cb4:	3c ad       	ldd	r19, Y+60	; 0x3c
   19cb6:	23 2b       	or	r18, r19
   19cb8:	81 f0       	breq	.+32     	; 0x19cda <lif_check_volume+0xf0>
   19cba:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19cbe:	80 ff       	sbrs	r24, 0
   19cc0:	0a c0       	rjmp	.+20     	; 0x19cd6 <lif_check_volume+0xec>
   19cc2:	84 e3       	ldi	r24, 0x34	; 52
   19cc4:	9f e3       	ldi	r25, 0x3F	; 63
   19cc6:	1f 92       	push	r1
   19cc8:	9f 93       	push	r25
   19cca:	8f 93       	push	r24
   19ccc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19cd0:	0f 90       	pop	r0
   19cd2:	0f 90       	pop	r0
   19cd4:	0f 90       	pop	r0
   19cd6:	80 e0       	ldi	r24, 0x00	; 0
   19cd8:	90 e0       	ldi	r25, 0x00	; 0
   19cda:	4d a5       	ldd	r20, Y+45	; 0x2d
   19cdc:	5e a5       	ldd	r21, Y+46	; 0x2e
   19cde:	6f a5       	ldd	r22, Y+47	; 0x2f
   19ce0:	78 a9       	ldd	r23, Y+48	; 0x30
   19ce2:	45 2b       	or	r20, r21
   19ce4:	46 2b       	or	r20, r22
   19ce6:	47 2b       	or	r20, r23
   19ce8:	c9 f4       	brne	.+50     	; 0x19d1c <lif_check_volume+0x132>
   19cea:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19cee:	80 ff       	sbrs	r24, 0
   19cf0:	13 c0       	rjmp	.+38     	; 0x19d18 <lif_check_volume+0x12e>
   19cf2:	1f 92       	push	r1
   19cf4:	1f 92       	push	r1
   19cf6:	1f 92       	push	r1
   19cf8:	1f 92       	push	r1
   19cfa:	8f e0       	ldi	r24, 0x0F	; 15
   19cfc:	9f e3       	ldi	r25, 0x3F	; 63
   19cfe:	1f 92       	push	r1
   19d00:	9f 93       	push	r25
   19d02:	8f 93       	push	r24
   19d04:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19d08:	8d b7       	in	r24, 0x3d	; 61
   19d0a:	9e b7       	in	r25, 0x3e	; 62
   19d0c:	07 96       	adiw	r24, 0x07	; 7
   19d0e:	0f b6       	in	r0, 0x3f	; 63
   19d10:	f8 94       	cli
   19d12:	9e bf       	out	0x3e, r25	; 62
   19d14:	0f be       	out	0x3f, r0	; 63
   19d16:	8d bf       	out	0x3d, r24	; 61
   19d18:	80 e0       	ldi	r24, 0x00	; 0
   19d1a:	90 e0       	ldi	r25, 0x00	; 0
   19d1c:	4d a9       	ldd	r20, Y+53	; 0x35
   19d1e:	5e a9       	ldd	r21, Y+54	; 0x36
   19d20:	6f a9       	ldd	r22, Y+55	; 0x37
   19d22:	78 ad       	ldd	r23, Y+56	; 0x38
   19d24:	45 2b       	or	r20, r21
   19d26:	46 2b       	or	r20, r22
   19d28:	47 2b       	or	r20, r23
   19d2a:	81 f4       	brne	.+32     	; 0x19d4c <lif_check_volume+0x162>
   19d2c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19d30:	80 ff       	sbrs	r24, 0
   19d32:	0a c0       	rjmp	.+20     	; 0x19d48 <lif_check_volume+0x15e>
   19d34:	80 ee       	ldi	r24, 0xE0	; 224
   19d36:	9e e3       	ldi	r25, 0x3E	; 62
   19d38:	1f 92       	push	r1
   19d3a:	9f 93       	push	r25
   19d3c:	8f 93       	push	r24
   19d3e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19d42:	0f 90       	pop	r0
   19d44:	0f 90       	pop	r0
   19d46:	0f 90       	pop	r0
   19d48:	80 e0       	ldi	r24, 0x00	; 0
   19d4a:	90 e0       	ldi	r25, 0x00	; 0
   19d4c:	0d a5       	ldd	r16, Y+45	; 0x2d
   19d4e:	1e a5       	ldd	r17, Y+46	; 0x2e
   19d50:	2f a5       	ldd	r18, Y+47	; 0x2f
   19d52:	38 a9       	ldd	r19, Y+48	; 0x30
   19d54:	4d a9       	ldd	r20, Y+53	; 0x35
   19d56:	5e a9       	ldd	r21, Y+54	; 0x36
   19d58:	6f a9       	ldd	r22, Y+55	; 0x37
   19d5a:	78 ad       	ldd	r23, Y+56	; 0x38
   19d5c:	40 0f       	add	r20, r16
   19d5e:	51 1f       	adc	r21, r17
   19d60:	62 1f       	adc	r22, r18
   19d62:	73 1f       	adc	r23, r19
   19d64:	0c 81       	ldd	r16, Y+4	; 0x04
   19d66:	1d 81       	ldd	r17, Y+5	; 0x05
   19d68:	2e 81       	ldd	r18, Y+6	; 0x06
   19d6a:	3f 81       	ldd	r19, Y+7	; 0x07
   19d6c:	04 17       	cp	r16, r20
   19d6e:	15 07       	cpc	r17, r21
   19d70:	26 07       	cpc	r18, r22
   19d72:	37 07       	cpc	r19, r23
   19d74:	80 f4       	brcc	.+32     	; 0x19d96 <lif_check_volume+0x1ac>
   19d76:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19d7a:	80 ff       	sbrs	r24, 0
   19d7c:	0a c0       	rjmp	.+20     	; 0x19d92 <lif_check_volume+0x1a8>
   19d7e:	84 eb       	ldi	r24, 0xB4	; 180
   19d80:	9e e3       	ldi	r25, 0x3E	; 62
   19d82:	1f 92       	push	r1
   19d84:	9f 93       	push	r25
   19d86:	8f 93       	push	r24
   19d88:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19d8c:	0f 90       	pop	r0
   19d8e:	0f 90       	pop	r0
   19d90:	0f 90       	pop	r0
   19d92:	80 e0       	ldi	r24, 0x00	; 0
   19d94:	90 e0       	ldi	r25, 0x00	; 0
   19d96:	df 91       	pop	r29
   19d98:	cf 91       	pop	r28
   19d9a:	1f 91       	pop	r17
   19d9c:	0f 91       	pop	r16
   19d9e:	08 95       	ret

00019da0 <lif_check_dir>:
   19da0:	a4 e0       	ldi	r26, 0x04	; 4
   19da2:	b0 e0       	ldi	r27, 0x00	; 0
   19da4:	e6 ed       	ldi	r30, 0xD6	; 214
   19da6:	fe ec       	ldi	r31, 0xCE	; 206
   19da8:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   19dac:	6c 01       	movw	r12, r24
   19dae:	2a e5       	ldi	r18, 0x5A	; 90
   19db0:	c2 0e       	add	r12, r18
   19db2:	d1 1c       	adc	r13, r1
   19db4:	f6 01       	movw	r30, r12
   19db6:	20 81       	ld	r18, Z
   19db8:	31 81       	ldd	r19, Z+1	; 0x01
   19dba:	21 50       	subi	r18, 0x01	; 1
   19dbc:	31 09       	sbc	r19, r1
   19dbe:	2e 3f       	cpi	r18, 0xFE	; 254
   19dc0:	3f 4f       	sbci	r19, 0xFF	; 255
   19dc2:	08 f0       	brcs	.+2      	; 0x19dc6 <lif_check_dir+0x26>
   19dc4:	98 c1       	rjmp	.+816    	; 0x1a0f6 <lif_check_dir+0x356>
   19dc6:	9c 83       	std	Y+4, r25	; 0x04
   19dc8:	8b 83       	std	Y+3, r24	; 0x03
   19dca:	8c 01       	movw	r16, r24
   19dcc:	01 5b       	subi	r16, 0xB1	; 177
   19dce:	1f 4f       	sbci	r17, 0xFF	; 255
   19dd0:	c8 01       	movw	r24, r16
   19dd2:	0d da       	rcall	.-3046   	; 0x191ee <lif_checkname>
   19dd4:	89 2b       	or	r24, r25
   19dd6:	99 f4       	brne	.+38     	; 0x19dfe <lif_check_dir+0x5e>
   19dd8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   19ddc:	80 ff       	sbrs	r24, 0
   19dde:	12 c0       	rjmp	.+36     	; 0x19e04 <lif_check_dir+0x64>
   19de0:	1f 93       	push	r17
   19de2:	0f 93       	push	r16
   19de4:	83 e9       	ldi	r24, 0x93	; 147
   19de6:	9e e3       	ldi	r25, 0x3E	; 62
   19de8:	1f 92       	push	r1
   19dea:	9f 93       	push	r25
   19dec:	8f 93       	push	r24
   19dee:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19df2:	0f 90       	pop	r0
   19df4:	0f 90       	pop	r0
   19df6:	0f 90       	pop	r0
   19df8:	0f 90       	pop	r0
   19dfa:	0f 90       	pop	r0
   19dfc:	03 c0       	rjmp	.+6      	; 0x19e04 <lif_check_dir+0x64>
   19dfe:	ee 24       	eor	r14, r14
   19e00:	e3 94       	inc	r14
   19e02:	01 c0       	rjmp	.+2      	; 0x19e06 <lif_check_dir+0x66>
   19e04:	e1 2c       	mov	r14, r1
   19e06:	f1 2c       	mov	r15, r1
   19e08:	eb 81       	ldd	r30, Y+3	; 0x03
   19e0a:	fc 81       	ldd	r31, Y+4	; 0x04
   19e0c:	84 85       	ldd	r24, Z+12	; 0x0c
   19e0e:	95 85       	ldd	r25, Z+13	; 0x0d
   19e10:	a6 85       	ldd	r26, Z+14	; 0x0e
   19e12:	b7 85       	ldd	r27, Z+15	; 0x0f
   19e14:	00 97       	sbiw	r24, 0x00	; 0
   19e16:	a1 05       	cpc	r26, r1
   19e18:	b1 05       	cpc	r27, r1
   19e1a:	39 f1       	breq	.+78     	; 0x19e6a <lif_check_dir+0xca>
   19e1c:	e4 5a       	subi	r30, 0xA4	; 164
   19e1e:	ff 4f       	sbci	r31, 0xFF	; 255
   19e20:	40 81       	ld	r20, Z
   19e22:	51 81       	ldd	r21, Z+1	; 0x01
   19e24:	62 81       	ldd	r22, Z+2	; 0x02
   19e26:	73 81       	ldd	r23, Z+3	; 0x03
   19e28:	48 17       	cp	r20, r24
   19e2a:	59 07       	cpc	r21, r25
   19e2c:	6a 07       	cpc	r22, r26
   19e2e:	7b 07       	cpc	r23, r27
   19e30:	e0 f4       	brcc	.+56     	; 0x19e6a <lif_check_dir+0xca>
   19e32:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   19e36:	20 ff       	sbrs	r18, 0
   19e38:	16 c0       	rjmp	.+44     	; 0x19e66 <lif_check_dir+0xc6>
   19e3a:	bf 93       	push	r27
   19e3c:	af 93       	push	r26
   19e3e:	9f 93       	push	r25
   19e40:	8f 93       	push	r24
   19e42:	7f 93       	push	r23
   19e44:	6f 93       	push	r22
   19e46:	5f 93       	push	r21
   19e48:	4f 93       	push	r20
   19e4a:	1f 93       	push	r17
   19e4c:	0f 93       	push	r16
   19e4e:	8f e4       	ldi	r24, 0x4F	; 79
   19e50:	9e e3       	ldi	r25, 0x3E	; 62
   19e52:	1f 92       	push	r1
   19e54:	9f 93       	push	r25
   19e56:	8f 93       	push	r24
   19e58:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19e5c:	0f b6       	in	r0, 0x3f	; 63
   19e5e:	f8 94       	cli
   19e60:	de bf       	out	0x3e, r29	; 62
   19e62:	0f be       	out	0x3f, r0	; 63
   19e64:	cd bf       	out	0x3d, r28	; 61
   19e66:	e1 2c       	mov	r14, r1
   19e68:	f1 2c       	mov	r15, r1
   19e6a:	eb 81       	ldd	r30, Y+3	; 0x03
   19e6c:	fc 81       	ldd	r31, Y+4	; 0x04
   19e6e:	44 81       	ldd	r20, Z+4	; 0x04
   19e70:	55 81       	ldd	r21, Z+5	; 0x05
   19e72:	66 81       	ldd	r22, Z+6	; 0x06
   19e74:	77 81       	ldd	r23, Z+7	; 0x07
   19e76:	41 15       	cp	r20, r1
   19e78:	51 05       	cpc	r21, r1
   19e7a:	61 05       	cpc	r22, r1
   19e7c:	71 05       	cpc	r23, r1
   19e7e:	99 f1       	breq	.+102    	; 0x19ee6 <lif_check_dir+0x146>
   19e80:	e4 5a       	subi	r30, 0xA4	; 164
   19e82:	ff 4f       	sbci	r31, 0xFF	; 255
   19e84:	80 80       	ld	r8, Z
   19e86:	91 80       	ldd	r9, Z+1	; 0x01
   19e88:	a2 80       	ldd	r10, Z+2	; 0x02
   19e8a:	b3 80       	ldd	r11, Z+3	; 0x03
   19e8c:	eb 81       	ldd	r30, Y+3	; 0x03
   19e8e:	fc 81       	ldd	r31, Y+4	; 0x04
   19e90:	e0 5a       	subi	r30, 0xA0	; 160
   19e92:	ff 4f       	sbci	r31, 0xFF	; 255
   19e94:	80 81       	ld	r24, Z
   19e96:	91 81       	ldd	r25, Z+1	; 0x01
   19e98:	a2 81       	ldd	r26, Z+2	; 0x02
   19e9a:	b3 81       	ldd	r27, Z+3	; 0x03
   19e9c:	88 0d       	add	r24, r8
   19e9e:	99 1d       	adc	r25, r9
   19ea0:	aa 1d       	adc	r26, r10
   19ea2:	bb 1d       	adc	r27, r11
   19ea4:	48 17       	cp	r20, r24
   19ea6:	59 07       	cpc	r21, r25
   19ea8:	6a 07       	cpc	r22, r26
   19eaa:	7b 07       	cpc	r23, r27
   19eac:	e0 f4       	brcc	.+56     	; 0x19ee6 <lif_check_dir+0x146>
   19eae:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   19eb2:	20 ff       	sbrs	r18, 0
   19eb4:	16 c0       	rjmp	.+44     	; 0x19ee2 <lif_check_dir+0x142>
   19eb6:	7f 93       	push	r23
   19eb8:	6f 93       	push	r22
   19eba:	5f 93       	push	r21
   19ebc:	4f 93       	push	r20
   19ebe:	bf 93       	push	r27
   19ec0:	af 93       	push	r26
   19ec2:	9f 93       	push	r25
   19ec4:	8f 93       	push	r24
   19ec6:	1f 93       	push	r17
   19ec8:	0f 93       	push	r16
   19eca:	8e e0       	ldi	r24, 0x0E	; 14
   19ecc:	9e e3       	ldi	r25, 0x3E	; 62
   19ece:	1f 92       	push	r1
   19ed0:	9f 93       	push	r25
   19ed2:	8f 93       	push	r24
   19ed4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19ed8:	0f b6       	in	r0, 0x3f	; 63
   19eda:	f8 94       	cli
   19edc:	de bf       	out	0x3e, r29	; 62
   19ede:	0f be       	out	0x3f, r0	; 63
   19ee0:	cd bf       	out	0x3d, r28	; 61
   19ee2:	e1 2c       	mov	r14, r1
   19ee4:	f1 2c       	mov	r15, r1
   19ee6:	eb 81       	ldd	r30, Y+3	; 0x03
   19ee8:	fc 81       	ldd	r31, Y+4	; 0x04
   19eea:	e6 59       	subi	r30, 0x96	; 150
   19eec:	ff 4f       	sbci	r31, 0xFF	; 255
   19eee:	80 81       	ld	r24, Z
   19ef0:	91 81       	ldd	r25, Z+1	; 0x01
   19ef2:	81 30       	cpi	r24, 0x01	; 1
   19ef4:	30 e8       	ldi	r19, 0x80	; 128
   19ef6:	93 07       	cpc	r25, r19
   19ef8:	b1 f0       	breq	.+44     	; 0x19f26 <lif_check_dir+0x186>
   19efa:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   19efe:	20 ff       	sbrs	r18, 0
   19f00:	10 c0       	rjmp	.+32     	; 0x19f22 <lif_check_dir+0x182>
   19f02:	9f 93       	push	r25
   19f04:	8f 93       	push	r24
   19f06:	1f 93       	push	r17
   19f08:	0f 93       	push	r16
   19f0a:	80 ee       	ldi	r24, 0xE0	; 224
   19f0c:	9d e3       	ldi	r25, 0x3D	; 61
   19f0e:	1f 92       	push	r1
   19f10:	9f 93       	push	r25
   19f12:	8f 93       	push	r24
   19f14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19f18:	0f b6       	in	r0, 0x3f	; 63
   19f1a:	f8 94       	cli
   19f1c:	de bf       	out	0x3e, r29	; 62
   19f1e:	0f be       	out	0x3f, r0	; 63
   19f20:	cd bf       	out	0x3d, r28	; 61
   19f22:	e1 2c       	mov	r14, r1
   19f24:	f1 2c       	mov	r15, r1
   19f26:	f6 01       	movw	r30, r12
   19f28:	80 81       	ld	r24, Z
   19f2a:	91 81       	ldd	r25, Z+1	; 0x01
   19f2c:	8c 7f       	andi	r24, 0xFC	; 252
   19f2e:	80 31       	cpi	r24, 0x10	; 16
   19f30:	90 4e       	sbci	r25, 0xE0	; 224
   19f32:	09 f0       	breq	.+2      	; 0x19f36 <lif_check_dir+0x196>
   19f34:	b3 c0       	rjmp	.+358    	; 0x1a09c <lif_check_dir+0x2fc>
   19f36:	cb 80       	ldd	r12, Y+3	; 0x03
   19f38:	dc 80       	ldd	r13, Y+4	; 0x04
   19f3a:	2c e6       	ldi	r18, 0x6C	; 108
   19f3c:	c2 0e       	add	r12, r18
   19f3e:	d1 1c       	adc	r13, r1
   19f40:	f6 01       	movw	r30, r12
   19f42:	20 81       	ld	r18, Z
   19f44:	31 81       	ldd	r19, Z+1	; 0x01
   19f46:	21 15       	cp	r18, r1
   19f48:	31 05       	cpc	r19, r1
   19f4a:	09 f4       	brne	.+2      	; 0x19f4e <lif_check_dir+0x1ae>
   19f4c:	a7 c0       	rjmp	.+334    	; 0x1a09c <lif_check_dir+0x2fc>
   19f4e:	49 01       	movw	r8, r18
   19f50:	a1 2c       	mov	r10, r1
   19f52:	b1 2c       	mov	r11, r1
   19f54:	bb 27       	eor	r27, r27
   19f56:	ab 2d       	mov	r26, r11
   19f58:	9a 2d       	mov	r25, r10
   19f5a:	89 2d       	mov	r24, r9
   19f5c:	33 27       	eor	r19, r19
   19f5e:	2c 01       	movw	r4, r24
   19f60:	3d 01       	movw	r6, r26
   19f62:	21 15       	cp	r18, r1
   19f64:	31 05       	cpc	r19, r1
   19f66:	29 f0       	breq	.+10     	; 0x19f72 <lif_check_dir+0x1d2>
   19f68:	ff ef       	ldi	r31, 0xFF	; 255
   19f6a:	4f 1a       	sub	r4, r31
   19f6c:	5f 0a       	sbc	r5, r31
   19f6e:	6f 0a       	sbc	r6, r31
   19f70:	7f 0a       	sbc	r7, r31
   19f72:	2b 80       	ldd	r2, Y+3	; 0x03
   19f74:	3c 80       	ldd	r3, Y+4	; 0x04
   19f76:	40 e6       	ldi	r20, 0x60	; 96
   19f78:	24 0e       	add	r2, r20
   19f7a:	31 1c       	adc	r3, r1
   19f7c:	f1 01       	movw	r30, r2
   19f7e:	40 81       	ld	r20, Z
   19f80:	51 81       	ldd	r21, Z+1	; 0x01
   19f82:	62 81       	ldd	r22, Z+2	; 0x02
   19f84:	73 81       	ldd	r23, Z+3	; 0x03
   19f86:	44 15       	cp	r20, r4
   19f88:	55 05       	cpc	r21, r5
   19f8a:	66 05       	cpc	r22, r6
   19f8c:	77 05       	cpc	r23, r7
   19f8e:	28 f5       	brcc	.+74     	; 0x19fda <lif_check_dir+0x23a>
   19f90:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <debuglevel>
   19f94:	e0 ff       	sbrs	r30, 0
   19f96:	1f c0       	rjmp	.+62     	; 0x19fd6 <lif_check_dir+0x236>
   19f98:	23 2b       	or	r18, r19
   19f9a:	19 f0       	breq	.+6      	; 0x19fa2 <lif_check_dir+0x202>
   19f9c:	01 96       	adiw	r24, 0x01	; 1
   19f9e:	a1 1d       	adc	r26, r1
   19fa0:	b1 1d       	adc	r27, r1
   19fa2:	7f 93       	push	r23
   19fa4:	6f 93       	push	r22
   19fa6:	5f 93       	push	r21
   19fa8:	4f 93       	push	r20
   19faa:	bf 93       	push	r27
   19fac:	af 93       	push	r26
   19fae:	9f 93       	push	r25
   19fb0:	8f 93       	push	r24
   19fb2:	1f 92       	push	r1
   19fb4:	1f 92       	push	r1
   19fb6:	9f 92       	push	r9
   19fb8:	8f 92       	push	r8
   19fba:	1f 93       	push	r17
   19fbc:	0f 93       	push	r16
   19fbe:	85 e9       	ldi	r24, 0x95	; 149
   19fc0:	9d e3       	ldi	r25, 0x3D	; 61
   19fc2:	1f 92       	push	r1
   19fc4:	9f 93       	push	r25
   19fc6:	8f 93       	push	r24
   19fc8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   19fcc:	0f b6       	in	r0, 0x3f	; 63
   19fce:	f8 94       	cli
   19fd0:	de bf       	out	0x3e, r29	; 62
   19fd2:	0f be       	out	0x3f, r0	; 63
   19fd4:	cd bf       	out	0x3d, r28	; 61
   19fd6:	e1 2c       	mov	r14, r1
   19fd8:	f1 2c       	mov	r15, r1
   19fda:	f6 01       	movw	r30, r12
   19fdc:	20 81       	ld	r18, Z
   19fde:	31 81       	ldd	r19, Z+1	; 0x01
   19fe0:	49 01       	movw	r8, r18
   19fe2:	a1 2c       	mov	r10, r1
   19fe4:	b1 2c       	mov	r11, r1
   19fe6:	bb 27       	eor	r27, r27
   19fe8:	ab 2d       	mov	r26, r11
   19fea:	9a 2d       	mov	r25, r10
   19fec:	89 2d       	mov	r24, r9
   19fee:	a9 01       	movw	r20, r18
   19ff0:	55 27       	eor	r21, r21
   19ff2:	5a 83       	std	Y+2, r21	; 0x02
   19ff4:	49 83       	std	Y+1, r20	; 0x01
   19ff6:	2c 01       	movw	r4, r24
   19ff8:	3d 01       	movw	r6, r26
   19ffa:	45 2b       	or	r20, r21
   19ffc:	29 f0       	breq	.+10     	; 0x1a008 <lif_check_dir+0x268>
   19ffe:	5f ef       	ldi	r21, 0xFF	; 255
   1a000:	45 1a       	sub	r4, r21
   1a002:	55 0a       	sbc	r5, r21
   1a004:	65 0a       	sbc	r6, r21
   1a006:	75 0a       	sbc	r7, r21
   1a008:	f1 01       	movw	r30, r2
   1a00a:	40 81       	ld	r20, Z
   1a00c:	51 81       	ldd	r21, Z+1	; 0x01
   1a00e:	62 81       	ldd	r22, Z+2	; 0x02
   1a010:	73 81       	ldd	r23, Z+3	; 0x03
   1a012:	44 16       	cp	r4, r20
   1a014:	55 06       	cpc	r5, r21
   1a016:	66 06       	cpc	r6, r22
   1a018:	77 06       	cpc	r7, r23
   1a01a:	38 f5       	brcc	.+78     	; 0x1a06a <lif_check_dir+0x2ca>
   1a01c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1a020:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1a024:	32 ff       	sbrs	r19, 2
   1a026:	21 c0       	rjmp	.+66     	; 0x1a06a <lif_check_dir+0x2ca>
   1a028:	29 81       	ldd	r18, Y+1	; 0x01
   1a02a:	3a 81       	ldd	r19, Y+2	; 0x02
   1a02c:	23 2b       	or	r18, r19
   1a02e:	19 f0       	breq	.+6      	; 0x1a036 <lif_check_dir+0x296>
   1a030:	01 96       	adiw	r24, 0x01	; 1
   1a032:	a1 1d       	adc	r26, r1
   1a034:	b1 1d       	adc	r27, r1
   1a036:	7f 93       	push	r23
   1a038:	6f 93       	push	r22
   1a03a:	5f 93       	push	r21
   1a03c:	4f 93       	push	r20
   1a03e:	bf 93       	push	r27
   1a040:	af 93       	push	r26
   1a042:	9f 93       	push	r25
   1a044:	8f 93       	push	r24
   1a046:	1f 92       	push	r1
   1a048:	1f 92       	push	r1
   1a04a:	9f 92       	push	r9
   1a04c:	8f 92       	push	r8
   1a04e:	1f 93       	push	r17
   1a050:	0f 93       	push	r16
   1a052:	8a e4       	ldi	r24, 0x4A	; 74
   1a054:	9d e3       	ldi	r25, 0x3D	; 61
   1a056:	1f 92       	push	r1
   1a058:	9f 93       	push	r25
   1a05a:	8f 93       	push	r24
   1a05c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a060:	0f b6       	in	r0, 0x3f	; 63
   1a062:	f8 94       	cli
   1a064:	de bf       	out	0x3e, r29	; 62
   1a066:	0f be       	out	0x3f, r0	; 63
   1a068:	cd bf       	out	0x3d, r28	; 61
   1a06a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1a06e:	80 ff       	sbrs	r24, 0
   1a070:	15 c0       	rjmp	.+42     	; 0x1a09c <lif_check_dir+0x2fc>
   1a072:	f6 01       	movw	r30, r12
   1a074:	80 81       	ld	r24, Z
   1a076:	91 81       	ldd	r25, Z+1	; 0x01
   1a078:	89 2b       	or	r24, r25
   1a07a:	81 f4       	brne	.+32     	; 0x1a09c <lif_check_dir+0x2fc>
   1a07c:	1f 93       	push	r17
   1a07e:	0f 93       	push	r16
   1a080:	8f e1       	ldi	r24, 0x1F	; 31
   1a082:	9d e3       	ldi	r25, 0x3D	; 61
   1a084:	1f 92       	push	r1
   1a086:	9f 93       	push	r25
   1a088:	8f 93       	push	r24
   1a08a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a08e:	0f 90       	pop	r0
   1a090:	0f 90       	pop	r0
   1a092:	0f 90       	pop	r0
   1a094:	0f 90       	pop	r0
   1a096:	0f 90       	pop	r0
   1a098:	e1 2c       	mov	r14, r1
   1a09a:	f1 2c       	mov	r15, r1
   1a09c:	eb 81       	ldd	r30, Y+3	; 0x03
   1a09e:	fc 81       	ldd	r31, Y+4	; 0x04
   1a0a0:	e2 59       	subi	r30, 0x92	; 146
   1a0a2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0a4:	20 81       	ld	r18, Z
   1a0a6:	31 81       	ldd	r19, Z+1	; 0x01
   1a0a8:	21 15       	cp	r18, r1
   1a0aa:	f1 e0       	ldi	r31, 0x01	; 1
   1a0ac:	3f 07       	cpc	r19, r31
   1a0ae:	31 f1       	breq	.+76     	; 0x1a0fc <lif_check_dir+0x35c>
   1a0b0:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   1a0b4:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1a0b8:	ca 01       	movw	r24, r20
   1a0ba:	81 70       	andi	r24, 0x01	; 1
   1a0bc:	99 27       	eor	r25, r25
   1a0be:	40 ff       	sbrs	r20, 0
   1a0c0:	1e c0       	rjmp	.+60     	; 0x1a0fe <lif_check_dir+0x35e>
   1a0c2:	c9 01       	movw	r24, r18
   1a0c4:	1f 92       	push	r1
   1a0c6:	1f 92       	push	r1
   1a0c8:	9f 93       	push	r25
   1a0ca:	2f 93       	push	r18
   1a0cc:	eb 81       	ldd	r30, Y+3	; 0x03
   1a0ce:	fc 81       	ldd	r31, Y+4	; 0x04
   1a0d0:	81 81       	ldd	r24, Z+1	; 0x01
   1a0d2:	8f 93       	push	r24
   1a0d4:	80 81       	ld	r24, Z
   1a0d6:	8f 93       	push	r24
   1a0d8:	83 ef       	ldi	r24, 0xF3	; 243
   1a0da:	9c e3       	ldi	r25, 0x3C	; 60
   1a0dc:	1f 92       	push	r1
   1a0de:	9f 93       	push	r25
   1a0e0:	8f 93       	push	r24
   1a0e2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a0e6:	0f b6       	in	r0, 0x3f	; 63
   1a0e8:	f8 94       	cli
   1a0ea:	de bf       	out	0x3e, r29	; 62
   1a0ec:	0f be       	out	0x3f, r0	; 63
   1a0ee:	cd bf       	out	0x3d, r28	; 61
   1a0f0:	80 e0       	ldi	r24, 0x00	; 0
   1a0f2:	90 e0       	ldi	r25, 0x00	; 0
   1a0f4:	04 c0       	rjmp	.+8      	; 0x1a0fe <lif_check_dir+0x35e>
   1a0f6:	81 e0       	ldi	r24, 0x01	; 1
   1a0f8:	90 e0       	ldi	r25, 0x00	; 0
   1a0fa:	01 c0       	rjmp	.+2      	; 0x1a0fe <lif_check_dir+0x35e>
   1a0fc:	c7 01       	movw	r24, r14
   1a0fe:	24 96       	adiw	r28, 0x04	; 4
   1a100:	e2 e1       	ldi	r30, 0x12	; 18
   1a102:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001a106 <lif_close_volume>:
   1a106:	cf 93       	push	r28
   1a108:	df 93       	push	r29
   1a10a:	00 97       	sbiw	r24, 0x00	; 0
   1a10c:	f9 f0       	breq	.+62     	; 0x1a14c <lif_close_volume+0x46>
   1a10e:	ec 01       	movw	r28, r24
   1a110:	8a 81       	ldd	r24, Y+2	; 0x02
   1a112:	9b 81       	ldd	r25, Y+3	; 0x03
   1a114:	00 97       	sbiw	r24, 0x00	; 0
   1a116:	79 f0       	breq	.+30     	; 0x1a136 <lif_close_volume+0x30>
   1a118:	22 e0       	ldi	r18, 0x02	; 2
   1a11a:	30 e0       	ldi	r19, 0x00	; 0
   1a11c:	40 e0       	ldi	r20, 0x00	; 0
   1a11e:	50 e0       	ldi	r21, 0x00	; 0
   1a120:	ba 01       	movw	r22, r20
   1a122:	0e 94 03 7f 	call	0xfe06	; 0xfe06 <fseek>
   1a126:	8a 81       	ldd	r24, Y+2	; 0x02
   1a128:	9b 81       	ldd	r25, Y+3	; 0x03
   1a12a:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
   1a12e:	1b 82       	std	Y+3, r1	; 0x03
   1a130:	1a 82       	std	Y+2, r1	; 0x02
   1a132:	0e 94 e6 7f 	call	0xffcc	; 0xffcc <sync>
   1a136:	88 81       	ld	r24, Y
   1a138:	99 81       	ldd	r25, Y+1	; 0x01
   1a13a:	00 97       	sbiw	r24, 0x00	; 0
   1a13c:	11 f0       	breq	.+4      	; 0x1a142 <lif_close_volume+0x3c>
   1a13e:	0e 94 36 c7 	call	0x18e6c	; 0x18e6c <lif_free>
   1a142:	ce 01       	movw	r24, r28
   1a144:	b8 db       	rcall	.-2192   	; 0x198b6 <lif_vol_clear>
   1a146:	ce 01       	movw	r24, r28
   1a148:	0e 94 36 c7 	call	0x18e6c	; 0x18e6c <lif_free>
   1a14c:	df 91       	pop	r29
   1a14e:	cf 91       	pop	r28
   1a150:	08 95       	ret

0001a152 <lif_checkdirindex>:
   1a152:	a0 e0       	ldi	r26, 0x00	; 0
   1a154:	b0 e0       	ldi	r27, 0x00	; 0
   1a156:	ef ea       	ldi	r30, 0xAF	; 175
   1a158:	f0 ed       	ldi	r31, 0xD0	; 208
   1a15a:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   1a15e:	77 fd       	sbrc	r23, 7
   1a160:	26 c0       	rjmp	.+76     	; 0x1a1ae <lif_checkdirindex+0x5c>
   1a162:	8b 01       	movw	r16, r22
   1a164:	07 2e       	mov	r0, r23
   1a166:	00 0c       	add	r0, r0
   1a168:	22 0b       	sbc	r18, r18
   1a16a:	33 0b       	sbc	r19, r19
   1a16c:	45 e0       	ldi	r20, 0x05	; 5
   1a16e:	00 0f       	add	r16, r16
   1a170:	11 1f       	adc	r17, r17
   1a172:	22 1f       	adc	r18, r18
   1a174:	33 1f       	adc	r19, r19
   1a176:	4a 95       	dec	r20
   1a178:	d1 f7       	brne	.-12     	; 0x1a16e <lif_checkdirindex+0x1c>
   1a17a:	c1 2e       	mov	r12, r17
   1a17c:	d2 2e       	mov	r13, r18
   1a17e:	e3 2e       	mov	r14, r19
   1a180:	ff 24       	eor	r15, r15
   1a182:	11 27       	eor	r17, r17
   1a184:	22 27       	eor	r18, r18
   1a186:	33 27       	eor	r19, r19
   1a188:	01 2b       	or	r16, r17
   1a18a:	02 2b       	or	r16, r18
   1a18c:	03 2b       	or	r16, r19
   1a18e:	29 f0       	breq	.+10     	; 0x1a19a <lif_checkdirindex+0x48>
   1a190:	2f ef       	ldi	r18, 0xFF	; 255
   1a192:	c2 1a       	sub	r12, r18
   1a194:	d2 0a       	sbc	r13, r18
   1a196:	e2 0a       	sbc	r14, r18
   1a198:	f2 0a       	sbc	r15, r18
   1a19a:	fc 01       	movw	r30, r24
   1a19c:	05 a9       	ldd	r16, Z+53	; 0x35
   1a19e:	16 a9       	ldd	r17, Z+54	; 0x36
   1a1a0:	27 a9       	ldd	r18, Z+55	; 0x37
   1a1a2:	30 ad       	ldd	r19, Z+56	; 0x38
   1a1a4:	0c 15       	cp	r16, r12
   1a1a6:	1d 05       	cpc	r17, r13
   1a1a8:	2e 05       	cpc	r18, r14
   1a1aa:	3f 05       	cpc	r19, r15
   1a1ac:	30 f5       	brcc	.+76     	; 0x1a1fa <lif_checkdirindex+0xa8>
   1a1ae:	ec 01       	movw	r28, r24
   1a1b0:	7f 93       	push	r23
   1a1b2:	6f 93       	push	r22
   1a1b4:	89 81       	ldd	r24, Y+1	; 0x01
   1a1b6:	8f 93       	push	r24
   1a1b8:	88 81       	ld	r24, Y
   1a1ba:	8f 93       	push	r24
   1a1bc:	89 e8       	ldi	r24, 0x89	; 137
   1a1be:	9c e3       	ldi	r25, 0x3C	; 60
   1a1c0:	1f 92       	push	r1
   1a1c2:	9f 93       	push	r25
   1a1c4:	8f 93       	push	r24
   1a1c6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a1ca:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1a1ce:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1a1d2:	8d b7       	in	r24, 0x3d	; 61
   1a1d4:	9e b7       	in	r25, 0x3e	; 62
   1a1d6:	07 96       	adiw	r24, 0x07	; 7
   1a1d8:	0f b6       	in	r0, 0x3f	; 63
   1a1da:	f8 94       	cli
   1a1dc:	9e bf       	out	0x3e, r25	; 62
   1a1de:	0f be       	out	0x3f, r0	; 63
   1a1e0:	8d bf       	out	0x3d, r24	; 61
   1a1e2:	c9 01       	movw	r24, r18
   1a1e4:	88 27       	eor	r24, r24
   1a1e6:	94 70       	andi	r25, 0x04	; 4
   1a1e8:	32 ff       	sbrs	r19, 2
   1a1ea:	09 c0       	rjmp	.+18     	; 0x1a1fe <lif_checkdirindex+0xac>
   1a1ec:	6d e9       	ldi	r22, 0x9D	; 157
   1a1ee:	75 e1       	ldi	r23, 0x15	; 21
   1a1f0:	ce 01       	movw	r24, r28
   1a1f2:	68 db       	rcall	.-2352   	; 0x198c4 <lif_dump_vol>
   1a1f4:	80 e0       	ldi	r24, 0x00	; 0
   1a1f6:	90 e0       	ldi	r25, 0x00	; 0
   1a1f8:	02 c0       	rjmp	.+4      	; 0x1a1fe <lif_checkdirindex+0xac>
   1a1fa:	81 e0       	ldi	r24, 0x01	; 1
   1a1fc:	90 e0       	ldi	r25, 0x00	; 0
   1a1fe:	cd b7       	in	r28, 0x3d	; 61
   1a200:	de b7       	in	r29, 0x3e	; 62
   1a202:	e8 e0       	ldi	r30, 0x08	; 8
   1a204:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0001a208 <lif_readdirindex>:
   1a208:	a0 e2       	ldi	r26, 0x20	; 32
   1a20a:	b0 e0       	ldi	r27, 0x00	; 0
   1a20c:	ea e0       	ldi	r30, 0x0A	; 10
   1a20e:	f1 ed       	ldi	r31, 0xD1	; 209
   1a210:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   1a214:	7c 01       	movw	r14, r24
   1a216:	6b 01       	movw	r12, r22
   1a218:	9c df       	rcall	.-200    	; 0x1a152 <lif_checkdirindex>
   1a21a:	89 2b       	or	r24, r25
   1a21c:	19 f4       	brne	.+6      	; 0x1a224 <lif_readdirindex+0x1c>
   1a21e:	00 e0       	ldi	r16, 0x00	; 0
   1a220:	10 e0       	ldi	r17, 0x00	; 0
   1a222:	56 c0       	rjmp	.+172    	; 0x1a2d0 <lif_readdirindex+0xc8>
   1a224:	f7 01       	movw	r30, r14
   1a226:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a228:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a22a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a22c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a22e:	44 27       	eor	r20, r20
   1a230:	58 2f       	mov	r21, r24
   1a232:	69 2f       	mov	r22, r25
   1a234:	7a 2f       	mov	r23, r26
   1a236:	c6 01       	movw	r24, r12
   1a238:	0d 2c       	mov	r0, r13
   1a23a:	00 0c       	add	r0, r0
   1a23c:	aa 0b       	sbc	r26, r26
   1a23e:	bb 0b       	sbc	r27, r27
   1a240:	35 e0       	ldi	r19, 0x05	; 5
   1a242:	88 0f       	add	r24, r24
   1a244:	99 1f       	adc	r25, r25
   1a246:	aa 1f       	adc	r26, r26
   1a248:	bb 1f       	adc	r27, r27
   1a24a:	3a 95       	dec	r19
   1a24c:	d1 f7       	brne	.-12     	; 0x1a242 <lif_readdirindex+0x3a>
   1a24e:	9a 01       	movw	r18, r20
   1a250:	ab 01       	movw	r20, r22
   1a252:	28 0f       	add	r18, r24
   1a254:	39 1f       	adc	r19, r25
   1a256:	4a 1f       	adc	r20, r26
   1a258:	5b 1f       	adc	r21, r27
   1a25a:	00 e2       	ldi	r16, 0x20	; 32
   1a25c:	10 e0       	ldi	r17, 0x00	; 0
   1a25e:	be 01       	movw	r22, r28
   1a260:	6f 5f       	subi	r22, 0xFF	; 255
   1a262:	7f 4f       	sbci	r23, 0xFF	; 255
   1a264:	c7 01       	movw	r24, r14
   1a266:	0e 94 eb c7 	call	0x18fd6	; 0x18fd6 <lif_read>
   1a26a:	60 32       	cpi	r22, 0x20	; 32
   1a26c:	71 05       	cpc	r23, r1
   1a26e:	81 05       	cpc	r24, r1
   1a270:	91 05       	cpc	r25, r1
   1a272:	a8 f2       	brcs	.-86     	; 0x1a21e <lif_readdirindex+0x16>
   1a274:	b7 01       	movw	r22, r14
   1a276:	ce 01       	movw	r24, r28
   1a278:	01 96       	adiw	r24, 0x01	; 1
   1a27a:	c1 d9       	rcall	.-3198   	; 0x195fe <lif_str2dir>
   1a27c:	f7 01       	movw	r30, r14
   1a27e:	e6 5a       	subi	r30, 0xA6	; 166
   1a280:	ff 4f       	sbci	r31, 0xFF	; 255
   1a282:	80 81       	ld	r24, Z
   1a284:	91 81       	ldd	r25, Z+1	; 0x01
   1a286:	01 96       	adiw	r24, 0x01	; 1
   1a288:	19 f4       	brne	.+6      	; 0x1a290 <lif_readdirindex+0x88>
   1a28a:	f7 01       	movw	r30, r14
   1a28c:	d3 a2       	std	Z+35, r13	; 0x23
   1a28e:	c2 a2       	std	Z+34, r12	; 0x22
   1a290:	c7 01       	movw	r24, r14
   1a292:	86 dd       	rcall	.-1268   	; 0x19da0 <lif_check_dir>
   1a294:	8c 01       	movw	r16, r24
   1a296:	89 2b       	or	r24, r25
   1a298:	c9 f4       	brne	.+50     	; 0x1a2cc <lif_readdirindex+0xc4>
   1a29a:	df 92       	push	r13
   1a29c:	cf 92       	push	r12
   1a29e:	89 e6       	ldi	r24, 0x69	; 105
   1a2a0:	9c e3       	ldi	r25, 0x3C	; 60
   1a2a2:	1f 92       	push	r1
   1a2a4:	9f 93       	push	r25
   1a2a6:	8f 93       	push	r24
   1a2a8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a2ac:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1a2b0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1a2b4:	0f 90       	pop	r0
   1a2b6:	0f 90       	pop	r0
   1a2b8:	0f 90       	pop	r0
   1a2ba:	0f 90       	pop	r0
   1a2bc:	0f 90       	pop	r0
   1a2be:	92 ff       	sbrs	r25, 2
   1a2c0:	ae cf       	rjmp	.-164    	; 0x1a21e <lif_readdirindex+0x16>
   1a2c2:	6e ea       	ldi	r22, 0xAE	; 174
   1a2c4:	75 e1       	ldi	r23, 0x15	; 21
   1a2c6:	c7 01       	movw	r24, r14
   1a2c8:	fd da       	rcall	.-2566   	; 0x198c4 <lif_dump_vol>
   1a2ca:	02 c0       	rjmp	.+4      	; 0x1a2d0 <lif_readdirindex+0xc8>
   1a2cc:	01 e0       	ldi	r16, 0x01	; 1
   1a2ce:	10 e0       	ldi	r17, 0x00	; 0
   1a2d0:	c8 01       	movw	r24, r16
   1a2d2:	a0 96       	adiw	r28, 0x20	; 32
   1a2d4:	e8 e0       	ldi	r30, 0x08	; 8
   1a2d6:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0001a2da <lif_writedirindex>:
   1a2da:	a0 e2       	ldi	r26, 0x20	; 32
   1a2dc:	b0 e0       	ldi	r27, 0x00	; 0
   1a2de:	e3 e7       	ldi	r30, 0x73	; 115
   1a2e0:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2e2:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   1a2e6:	5c 01       	movw	r10, r24
   1a2e8:	6b 01       	movw	r12, r22
   1a2ea:	5a dd       	rcall	.-1356   	; 0x19da0 <lif_check_dir>
   1a2ec:	7c 01       	movw	r14, r24
   1a2ee:	89 2b       	or	r24, r25
   1a2f0:	71 f4       	brne	.+28     	; 0x1a30e <lif_writedirindex+0x34>
   1a2f2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1a2f6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1a2fa:	92 fd       	sbrc	r25, 2
   1a2fc:	03 c0       	rjmp	.+6      	; 0x1a304 <lif_writedirindex+0x2a>
   1a2fe:	e1 2c       	mov	r14, r1
   1a300:	f1 2c       	mov	r15, r1
   1a302:	42 c0       	rjmp	.+132    	; 0x1a388 <lif_writedirindex+0xae>
   1a304:	6f eb       	ldi	r22, 0xBF	; 191
   1a306:	75 e1       	ldi	r23, 0x15	; 21
   1a308:	c5 01       	movw	r24, r10
   1a30a:	dc da       	rcall	.-2632   	; 0x198c4 <lif_dump_vol>
   1a30c:	3d c0       	rjmp	.+122    	; 0x1a388 <lif_writedirindex+0xae>
   1a30e:	b6 01       	movw	r22, r12
   1a310:	c5 01       	movw	r24, r10
   1a312:	1f df       	rcall	.-450    	; 0x1a152 <lif_checkdirindex>
   1a314:	89 2b       	or	r24, r25
   1a316:	99 f3       	breq	.-26     	; 0x1a2fe <lif_writedirindex+0x24>
   1a318:	f5 01       	movw	r30, r10
   1a31a:	e6 5a       	subi	r30, 0xA6	; 166
   1a31c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a31e:	80 81       	ld	r24, Z
   1a320:	91 81       	ldd	r25, Z+1	; 0x01
   1a322:	01 96       	adiw	r24, 0x01	; 1
   1a324:	19 f4       	brne	.+6      	; 0x1a32c <lif_writedirindex+0x52>
   1a326:	f5 01       	movw	r30, r10
   1a328:	d3 a2       	std	Z+35, r13	; 0x23
   1a32a:	c2 a2       	std	Z+34, r12	; 0x22
   1a32c:	f5 01       	movw	r30, r10
   1a32e:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a330:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a332:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a334:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a336:	ba 2f       	mov	r27, r26
   1a338:	a9 2f       	mov	r26, r25
   1a33a:	98 2f       	mov	r25, r24
   1a33c:	88 27       	eor	r24, r24
   1a33e:	0d 2c       	mov	r0, r13
   1a340:	00 0c       	add	r0, r0
   1a342:	ee 08       	sbc	r14, r14
   1a344:	ff 08       	sbc	r15, r15
   1a346:	35 e0       	ldi	r19, 0x05	; 5
   1a348:	cc 0c       	add	r12, r12
   1a34a:	dd 1c       	adc	r13, r13
   1a34c:	ee 1c       	adc	r14, r14
   1a34e:	ff 1c       	adc	r15, r15
   1a350:	3a 95       	dec	r19
   1a352:	d1 f7       	brne	.-12     	; 0x1a348 <lif_writedirindex+0x6e>
   1a354:	c8 0e       	add	r12, r24
   1a356:	d9 1e       	adc	r13, r25
   1a358:	ea 1e       	adc	r14, r26
   1a35a:	fb 1e       	adc	r15, r27
   1a35c:	be 01       	movw	r22, r28
   1a35e:	6f 5f       	subi	r22, 0xFF	; 255
   1a360:	7f 4f       	sbci	r23, 0xFF	; 255
   1a362:	c5 01       	movw	r24, r10
   1a364:	db d8       	rcall	.-3658   	; 0x1951c <lif_dir2str>
   1a366:	00 e2       	ldi	r16, 0x20	; 32
   1a368:	10 e0       	ldi	r17, 0x00	; 0
   1a36a:	a7 01       	movw	r20, r14
   1a36c:	96 01       	movw	r18, r12
   1a36e:	be 01       	movw	r22, r28
   1a370:	6f 5f       	subi	r22, 0xFF	; 255
   1a372:	7f 4f       	sbci	r23, 0xFF	; 255
   1a374:	c5 01       	movw	r24, r10
   1a376:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
   1a37a:	31 e0       	ldi	r19, 0x01	; 1
   1a37c:	20 e0       	ldi	r18, 0x00	; 0
   1a37e:	80 97       	sbiw	r24, 0x20	; 32
   1a380:	0c f4       	brge	.+2      	; 0x1a384 <lif_writedirindex+0xaa>
   1a382:	30 e0       	ldi	r19, 0x00	; 0
   1a384:	e3 2e       	mov	r14, r19
   1a386:	f2 2e       	mov	r15, r18
   1a388:	c7 01       	movw	r24, r14
   1a38a:	a0 96       	adiw	r28, 0x20	; 32
   1a38c:	ea e0       	ldi	r30, 0x0A	; 10
   1a38e:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001a392 <lif_writedirEOF>:
   1a392:	0f 93       	push	r16
   1a394:	1f 93       	push	r17
   1a396:	cf 93       	push	r28
   1a398:	df 93       	push	r29
   1a39a:	ec 01       	movw	r28, r24
   1a39c:	8b 01       	movw	r16, r22
   1a39e:	83 da       	rcall	.-2810   	; 0x198a6 <lif_dir_clear>
   1a3a0:	fe 01       	movw	r30, r28
   1a3a2:	e6 5a       	subi	r30, 0xA6	; 166
   1a3a4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3a6:	8f ef       	ldi	r24, 0xFF	; 255
   1a3a8:	9f ef       	ldi	r25, 0xFF	; 255
   1a3aa:	91 83       	std	Z+1, r25	; 0x01
   1a3ac:	80 83       	st	Z, r24
   1a3ae:	1b a3       	std	Y+35, r17	; 0x23
   1a3b0:	0a a3       	std	Y+34, r16	; 0x22
   1a3b2:	b8 01       	movw	r22, r16
   1a3b4:	ce 01       	movw	r24, r28
   1a3b6:	91 df       	rcall	.-222    	; 0x1a2da <lif_writedirindex>
   1a3b8:	df 91       	pop	r29
   1a3ba:	cf 91       	pop	r28
   1a3bc:	1f 91       	pop	r17
   1a3be:	0f 91       	pop	r16
   1a3c0:	08 95       	ret

0001a3c2 <lif_updatefree>:
   1a3c2:	2f 92       	push	r2
   1a3c4:	3f 92       	push	r3
   1a3c6:	4f 92       	push	r4
   1a3c8:	5f 92       	push	r5
   1a3ca:	6f 92       	push	r6
   1a3cc:	7f 92       	push	r7
   1a3ce:	8f 92       	push	r8
   1a3d0:	af 92       	push	r10
   1a3d2:	bf 92       	push	r11
   1a3d4:	cf 92       	push	r12
   1a3d6:	df 92       	push	r13
   1a3d8:	ef 92       	push	r14
   1a3da:	ff 92       	push	r15
   1a3dc:	0f 93       	push	r16
   1a3de:	1f 93       	push	r17
   1a3e0:	cf 93       	push	r28
   1a3e2:	df 93       	push	r29
   1a3e4:	cd b7       	in	r28, 0x3d	; 61
   1a3e6:	de b7       	in	r29, 0x3e	; 62
   1a3e8:	28 97       	sbiw	r28, 0x08	; 8
   1a3ea:	0f b6       	in	r0, 0x3f	; 63
   1a3ec:	f8 94       	cli
   1a3ee:	de bf       	out	0x3e, r29	; 62
   1a3f0:	0f be       	out	0x3f, r0	; 63
   1a3f2:	cd bf       	out	0x3d, r28	; 61
   1a3f4:	98 87       	std	Y+8, r25	; 0x08
   1a3f6:	8f 83       	std	Y+7, r24	; 0x07
   1a3f8:	fc 01       	movw	r30, r24
   1a3fa:	24 84       	ldd	r2, Z+12	; 0x0c
   1a3fc:	35 84       	ldd	r3, Z+13	; 0x0d
   1a3fe:	46 84       	ldd	r4, Z+14	; 0x0e
   1a400:	57 84       	ldd	r5, Z+15	; 0x0f
   1a402:	80 89       	ldd	r24, Z+16	; 0x10
   1a404:	91 89       	ldd	r25, Z+17	; 0x11
   1a406:	a2 89       	ldd	r26, Z+18	; 0x12
   1a408:	b3 89       	ldd	r27, Z+19	; 0x13
   1a40a:	80 8f       	std	Z+24, r24	; 0x18
   1a40c:	91 8f       	std	Z+25, r25	; 0x19
   1a40e:	a2 8f       	std	Z+26, r26	; 0x1a
   1a410:	b3 8f       	std	Z+27, r27	; 0x1b
   1a412:	14 8a       	std	Z+20, r1	; 0x14
   1a414:	15 8a       	std	Z+21, r1	; 0x15
   1a416:	16 8a       	std	Z+22, r1	; 0x16
   1a418:	17 8a       	std	Z+23, r1	; 0x17
   1a41a:	17 8e       	std	Z+31, r1	; 0x1f
   1a41c:	16 8e       	std	Z+30, r1	; 0x1e
   1a41e:	15 8e       	std	Z+29, r1	; 0x1d
   1a420:	14 8e       	std	Z+28, r1	; 0x1c
   1a422:	11 a2       	std	Z+33, r1	; 0x21
   1a424:	10 a2       	std	Z+32, r1	; 0x20
   1a426:	13 a2       	std	Z+35, r1	; 0x23
   1a428:	12 a2       	std	Z+34, r1	; 0x22
   1a42a:	cc 24       	eor	r12, r12
   1a42c:	c3 94       	inc	r12
   1a42e:	d1 2c       	mov	r13, r1
   1a430:	0f ef       	ldi	r16, 0xFF	; 255
   1a432:	1f ef       	ldi	r17, 0xFF	; 255
   1a434:	e6 5a       	subi	r30, 0xA6	; 166
   1a436:	ff 4f       	sbci	r31, 0xFF	; 255
   1a438:	fc 83       	std	Y+4, r31	; 0x04
   1a43a:	eb 83       	std	Y+3, r30	; 0x03
   1a43c:	af 80       	ldd	r10, Y+7	; 0x07
   1a43e:	b8 84       	ldd	r11, Y+8	; 0x08
   1a440:	fc e5       	ldi	r31, 0x5C	; 92
   1a442:	af 0e       	add	r10, r31
   1a444:	b1 1c       	adc	r11, r1
   1a446:	8f 81       	ldd	r24, Y+7	; 0x07
   1a448:	98 85       	ldd	r25, Y+8	; 0x08
   1a44a:	80 5a       	subi	r24, 0xA0	; 160
   1a44c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a44e:	9e 83       	std	Y+6, r25	; 0x06
   1a450:	8d 83       	std	Y+5, r24	; 0x05
   1a452:	ef 81       	ldd	r30, Y+7	; 0x07
   1a454:	f8 85       	ldd	r31, Y+8	; 0x08
   1a456:	e1 5b       	subi	r30, 0xB1	; 177
   1a458:	ff 4f       	sbci	r31, 0xFF	; 255
   1a45a:	fa 83       	std	Y+2, r31	; 0x02
   1a45c:	e9 83       	std	Y+1, r30	; 0x01
   1a45e:	8c e1       	ldi	r24, 0x1C	; 28
   1a460:	9c e3       	ldi	r25, 0x3C	; 60
   1a462:	3c 01       	movw	r6, r24
   1a464:	76 01       	movw	r14, r12
   1a466:	21 e0       	ldi	r18, 0x01	; 1
   1a468:	e2 1a       	sub	r14, r18
   1a46a:	f1 08       	sbc	r15, r1
   1a46c:	b7 01       	movw	r22, r14
   1a46e:	8f 81       	ldd	r24, Y+7	; 0x07
   1a470:	98 85       	ldd	r25, Y+8	; 0x08
   1a472:	ca de       	rcall	.-620    	; 0x1a208 <lif_readdirindex>
   1a474:	89 2b       	or	r24, r25
   1a476:	19 f4       	brne	.+6      	; 0x1a47e <lif_updatefree+0xbc>
   1a478:	80 e0       	ldi	r24, 0x00	; 0
   1a47a:	90 e0       	ldi	r25, 0x00	; 0
   1a47c:	92 c0       	rjmp	.+292    	; 0x1a5a2 <lif_updatefree+0x1e0>
   1a47e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a480:	fc 81       	ldd	r31, Y+4	; 0x04
   1a482:	80 81       	ld	r24, Z
   1a484:	91 81       	ldd	r25, Z+1	; 0x01
   1a486:	8f 3f       	cpi	r24, 0xFF	; 255
   1a488:	ff ef       	ldi	r31, 0xFF	; 255
   1a48a:	9f 07       	cpc	r25, r31
   1a48c:	c1 f4       	brne	.+48     	; 0x1a4be <lif_updatefree+0xfc>
   1a48e:	ef 81       	ldd	r30, Y+7	; 0x07
   1a490:	f8 85       	ldd	r31, Y+8	; 0x08
   1a492:	0f 3f       	cpi	r16, 0xFF	; 255
   1a494:	2f ef       	ldi	r18, 0xFF	; 255
   1a496:	12 07       	cpc	r17, r18
   1a498:	09 f4       	brne	.+2      	; 0x1a49c <lif_updatefree+0xda>
   1a49a:	79 c0       	rjmp	.+242    	; 0x1a58e <lif_updatefree+0x1cc>
   1a49c:	13 a3       	std	Z+35, r17	; 0x23
   1a49e:	02 a3       	std	Z+34, r16	; 0x22
   1a4a0:	e0 1a       	sub	r14, r16
   1a4a2:	f1 0a       	sbc	r15, r17
   1a4a4:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a4a6:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a4a8:	8e 19       	sub	r24, r14
   1a4aa:	9f 09       	sbc	r25, r15
   1a4ac:	97 8f       	std	Z+31, r25	; 0x1f
   1a4ae:	86 8f       	std	Z+30, r24	; 0x1e
   1a4b0:	b8 01       	movw	r22, r16
   1a4b2:	cf 01       	movw	r24, r30
   1a4b4:	6e df       	rcall	.-292    	; 0x1a392 <lif_writedirEOF>
   1a4b6:	89 2b       	or	r24, r25
   1a4b8:	09 f0       	breq	.+2      	; 0x1a4bc <lif_updatefree+0xfa>
   1a4ba:	6b c0       	rjmp	.+214    	; 0x1a592 <lif_updatefree+0x1d0>
   1a4bc:	dd cf       	rjmp	.-70     	; 0x1a478 <lif_updatefree+0xb6>
   1a4be:	89 2b       	or	r24, r25
   1a4c0:	81 f4       	brne	.+32     	; 0x1a4e2 <lif_updatefree+0x120>
   1a4c2:	0f 3f       	cpi	r16, 0xFF	; 255
   1a4c4:	ff ef       	ldi	r31, 0xFF	; 255
   1a4c6:	1f 07       	cpc	r17, r31
   1a4c8:	09 f4       	brne	.+2      	; 0x1a4cc <lif_updatefree+0x10a>
   1a4ca:	87 01       	movw	r16, r14
   1a4cc:	ef 81       	ldd	r30, Y+7	; 0x07
   1a4ce:	f8 85       	ldd	r31, Y+8	; 0x08
   1a4d0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a4d2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a4d4:	01 96       	adiw	r24, 0x01	; 1
   1a4d6:	97 8f       	std	Z+31, r25	; 0x1f
   1a4d8:	86 8f       	std	Z+30, r24	; 0x1e
   1a4da:	ff ef       	ldi	r31, 0xFF	; 255
   1a4dc:	cf 1a       	sub	r12, r31
   1a4de:	df 0a       	sbc	r13, r31
   1a4e0:	c1 cf       	rjmp	.-126    	; 0x1a464 <lif_updatefree+0xa2>
   1a4e2:	f5 01       	movw	r30, r10
   1a4e4:	80 81       	ld	r24, Z
   1a4e6:	91 81       	ldd	r25, Z+1	; 0x01
   1a4e8:	a2 81       	ldd	r26, Z+2	; 0x02
   1a4ea:	b3 81       	ldd	r27, Z+3	; 0x03
   1a4ec:	82 15       	cp	r24, r2
   1a4ee:	93 05       	cpc	r25, r3
   1a4f0:	a4 05       	cpc	r26, r4
   1a4f2:	b5 05       	cpc	r27, r5
   1a4f4:	c0 f4       	brcc	.+48     	; 0x1a526 <lif_updatefree+0x164>
   1a4f6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1a4fa:	80 ff       	sbrs	r24, 0
   1a4fc:	14 c0       	rjmp	.+40     	; 0x1a526 <lif_updatefree+0x164>
   1a4fe:	fa 81       	ldd	r31, Y+2	; 0x02
   1a500:	ff 93       	push	r31
   1a502:	29 81       	ldd	r18, Y+1	; 0x01
   1a504:	2f 93       	push	r18
   1a506:	ef 81       	ldd	r30, Y+7	; 0x07
   1a508:	f8 85       	ldd	r31, Y+8	; 0x08
   1a50a:	81 81       	ldd	r24, Z+1	; 0x01
   1a50c:	8f 93       	push	r24
   1a50e:	80 81       	ld	r24, Z
   1a510:	8f 93       	push	r24
   1a512:	1f 92       	push	r1
   1a514:	7f 92       	push	r7
   1a516:	6f 92       	push	r6
   1a518:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a51c:	0f b6       	in	r0, 0x3f	; 63
   1a51e:	f8 94       	cli
   1a520:	de bf       	out	0x3e, r29	; 62
   1a522:	0f be       	out	0x3f, r0	; 63
   1a524:	cd bf       	out	0x3d, r28	; 61
   1a526:	ed 81       	ldd	r30, Y+5	; 0x05
   1a528:	fe 81       	ldd	r31, Y+6	; 0x06
   1a52a:	80 81       	ld	r24, Z
   1a52c:	91 81       	ldd	r25, Z+1	; 0x01
   1a52e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a530:	b3 81       	ldd	r27, Z+3	; 0x03
   1a532:	ef 81       	ldd	r30, Y+7	; 0x07
   1a534:	f8 85       	ldd	r31, Y+8	; 0x08
   1a536:	44 89       	ldd	r20, Z+20	; 0x14
   1a538:	55 89       	ldd	r21, Z+21	; 0x15
   1a53a:	66 89       	ldd	r22, Z+22	; 0x16
   1a53c:	77 89       	ldd	r23, Z+23	; 0x17
   1a53e:	48 0f       	add	r20, r24
   1a540:	59 1f       	adc	r21, r25
   1a542:	6a 1f       	adc	r22, r26
   1a544:	7b 1f       	adc	r23, r27
   1a546:	44 8b       	std	Z+20, r20	; 0x14
   1a548:	55 8b       	std	Z+21, r21	; 0x15
   1a54a:	66 8b       	std	Z+22, r22	; 0x16
   1a54c:	77 8b       	std	Z+23, r23	; 0x17
   1a54e:	40 8d       	ldd	r20, Z+24	; 0x18
   1a550:	51 8d       	ldd	r21, Z+25	; 0x19
   1a552:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a554:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a556:	48 1b       	sub	r20, r24
   1a558:	59 0b       	sbc	r21, r25
   1a55a:	6a 0b       	sbc	r22, r26
   1a55c:	7b 0b       	sbc	r23, r27
   1a55e:	40 8f       	std	Z+24, r20	; 0x18
   1a560:	51 8f       	std	Z+25, r21	; 0x19
   1a562:	62 8f       	std	Z+26, r22	; 0x1a
   1a564:	73 8f       	std	Z+27, r23	; 0x1b
   1a566:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a568:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a56a:	2f 5f       	subi	r18, 0xFF	; 255
   1a56c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a56e:	35 8f       	std	Z+29, r19	; 0x1d
   1a570:	24 8f       	std	Z+28, r18	; 0x1c
   1a572:	f5 01       	movw	r30, r10
   1a574:	40 81       	ld	r20, Z
   1a576:	51 81       	ldd	r21, Z+1	; 0x01
   1a578:	62 81       	ldd	r22, Z+2	; 0x02
   1a57a:	73 81       	ldd	r23, Z+3	; 0x03
   1a57c:	1c 01       	movw	r2, r24
   1a57e:	2d 01       	movw	r4, r26
   1a580:	24 0e       	add	r2, r20
   1a582:	35 1e       	adc	r3, r21
   1a584:	46 1e       	adc	r4, r22
   1a586:	57 1e       	adc	r5, r23
   1a588:	0f ef       	ldi	r16, 0xFF	; 255
   1a58a:	1f ef       	ldi	r17, 0xFF	; 255
   1a58c:	a6 cf       	rjmp	.-180    	; 0x1a4da <lif_updatefree+0x118>
   1a58e:	f3 a2       	std	Z+35, r15	; 0x23
   1a590:	e2 a2       	std	Z+34, r14	; 0x22
   1a592:	8f ef       	ldi	r24, 0xFF	; 255
   1a594:	9f ef       	ldi	r25, 0xFF	; 255
   1a596:	ef 81       	ldd	r30, Y+7	; 0x07
   1a598:	f8 85       	ldd	r31, Y+8	; 0x08
   1a59a:	91 a3       	std	Z+33, r25	; 0x21
   1a59c:	80 a3       	std	Z+32, r24	; 0x20
   1a59e:	8f 81       	ldd	r24, Y+7	; 0x07
   1a5a0:	98 85       	ldd	r25, Y+8	; 0x08
   1a5a2:	28 96       	adiw	r28, 0x08	; 8
   1a5a4:	0f b6       	in	r0, 0x3f	; 63
   1a5a6:	f8 94       	cli
   1a5a8:	de bf       	out	0x3e, r29	; 62
   1a5aa:	0f be       	out	0x3f, r0	; 63
   1a5ac:	cd bf       	out	0x3d, r28	; 61
   1a5ae:	df 91       	pop	r29
   1a5b0:	cf 91       	pop	r28
   1a5b2:	1f 91       	pop	r17
   1a5b4:	0f 91       	pop	r16
   1a5b6:	ff 90       	pop	r15
   1a5b8:	ef 90       	pop	r14
   1a5ba:	df 90       	pop	r13
   1a5bc:	cf 90       	pop	r12
   1a5be:	bf 90       	pop	r11
   1a5c0:	af 90       	pop	r10
   1a5c2:	8f 90       	pop	r8
   1a5c4:	7f 90       	pop	r7
   1a5c6:	6f 90       	pop	r6
   1a5c8:	5f 90       	pop	r5
   1a5ca:	4f 90       	pop	r4
   1a5cc:	3f 90       	pop	r3
   1a5ce:	2f 90       	pop	r2
   1a5d0:	08 95       	ret

0001a5d2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1a5d2:	a4 e1       	ldi	r26, 0x14	; 20
   1a5d4:	b1 e0       	ldi	r27, 0x01	; 1
   1a5d6:	ef ee       	ldi	r30, 0xEF	; 239
   1a5d8:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5da:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1a5de:	4c 01       	movw	r8, r24
   1a5e0:	3b 01       	movw	r6, r22
   1a5e2:	19 01       	movw	r2, r18
   1a5e4:	2a 01       	movw	r4, r20
   1a5e6:	cf 5e       	subi	r28, 0xEF	; 239
   1a5e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a5ea:	e8 82       	st	Y, r14
   1a5ec:	f9 82       	std	Y+1, r15	; 0x01
   1a5ee:	0a 83       	std	Y+2, r16	; 0x02
   1a5f0:	1b 83       	std	Y+3, r17	; 0x03
   1a5f2:	c1 51       	subi	r28, 0x11	; 17
   1a5f4:	d1 40       	sbci	r29, 0x01	; 1
   1a5f6:	c3 5f       	subi	r28, 0xF3	; 243
   1a5f8:	de 4f       	sbci	r29, 0xFE	; 254
   1a5fa:	a8 82       	st	Y, r10
   1a5fc:	b9 82       	std	Y+1, r11	; 0x01
   1a5fe:	ca 82       	std	Y+2, r12	; 0x02
   1a600:	db 82       	std	Y+3, r13	; 0x03
   1a602:	cd 50       	subi	r28, 0x0D	; 13
   1a604:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1a606:	80 e0       	ldi	r24, 0x00	; 0
   1a608:	90 e0       	ldi	r25, 0x00	; 0
   1a60a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <time>
   1a60e:	5b 01       	movw	r10, r22
   1a610:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1a612:	64 e7       	ldi	r22, 0x74	; 116
   1a614:	70 e0       	ldi	r23, 0x00	; 0
   1a616:	80 e0       	ldi	r24, 0x00	; 0
   1a618:	90 e0       	ldi	r25, 0x00	; 0
   1a61a:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <lif_calloc>
   1a61e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1a620:	00 97       	sbiw	r24, 0x00	; 0
   1a622:	09 f4       	brne	.+2      	; 0x1a626 <lif_create_volume+0x54>
        return(NULL);
    
    lif_image_clear(LIF);
   1a624:	a5 c2       	rjmp	.+1354   	; 0x1ab70 <lif_create_volume+0x59e>

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1a626:	39 d9       	rcall	.-3470   	; 0x1989a <lif_image_clear>
   1a628:	80 e0       	ldi	r24, 0x00	; 0
   1a62a:	90 e8       	ldi	r25, 0x80	; 128
   1a62c:	d7 01       	movw	r26, r14
   1a62e:	95 96       	adiw	r26, 0x25	; 37
   1a630:	9c 93       	st	X, r25
   1a632:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1a634:	94 97       	sbiw	r26, 0x24	; 36
   1a636:	46 e0       	ldi	r20, 0x06	; 6
   1a638:	50 e0       	ldi	r21, 0x00	; 0
   1a63a:	b3 01       	movw	r22, r6
   1a63c:	c7 01       	movw	r24, r14
   1a63e:	86 96       	adiw	r24, 0x26	; 38
   1a640:	0e 94 31 c9 	call	0x19262	; 0x19262 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1a644:	f7 01       	movw	r30, r14
   1a646:	25 a6       	std	Z+45, r2	; 0x2d
   1a648:	36 a6       	std	Z+46, r3	; 0x2e
   1a64a:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1a64c:	50 aa       	std	Z+48, r5	; 0x30
   1a64e:	cf 5e       	subi	r28, 0xEF	; 239
   1a650:	de 4f       	sbci	r29, 0xFE	; 254
   1a652:	28 81       	ld	r18, Y
   1a654:	39 81       	ldd	r19, Y+1	; 0x01
   1a656:	4a 81       	ldd	r20, Y+2	; 0x02
   1a658:	5b 81       	ldd	r21, Y+3	; 0x03
   1a65a:	c1 51       	subi	r28, 0x11	; 17
   1a65c:	d1 40       	sbci	r29, 0x01	; 1
   1a65e:	25 ab       	std	Z+53, r18	; 0x35
   1a660:	36 ab       	std	Z+54, r19	; 0x36
   1a662:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1a664:	50 af       	std	Z+56, r21	; 0x38
   1a666:	80 e0       	ldi	r24, 0x00	; 0
   1a668:	90 e1       	ldi	r25, 0x10	; 16
   1a66a:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1a66c:	81 ab       	std	Z+49, r24	; 0x31
   1a66e:	fd 96       	adiw	r30, 0x3d	; 61
   1a670:	10 82       	st	Z, r1
   1a672:	11 82       	std	Z+1, r1	; 0x01
   1a674:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1a676:	13 82       	std	Z+3, r1	; 0x03
   1a678:	34 96       	adiw	r30, 0x04	; 4
   1a67a:	10 82       	st	Z, r1
   1a67c:	11 82       	std	Z+1, r1	; 0x01
   1a67e:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1a680:	13 82       	std	Z+3, r1	; 0x03
   1a682:	34 96       	adiw	r30, 0x04	; 4
   1a684:	10 82       	st	Z, r1
   1a686:	11 82       	std	Z+1, r1	; 0x01
   1a688:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1a68a:	13 82       	std	Z+3, r1	; 0x03
   1a68c:	a7 01       	movw	r20, r14
   1a68e:	47 5b       	subi	r20, 0xB7	; 183
   1a690:	5f 4f       	sbci	r21, 0xFF	; 255
   1a692:	c6 01       	movw	r24, r12
   1a694:	b5 01       	movw	r22, r10

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1a696:	2a d8       	rcall	.-4012   	; 0x196ec <lif_time2lifbcd>
   1a698:	c4 01       	movw	r24, r8
   1a69a:	0e 94 46 c7 	call	0x18e8c	; 0x18e8c <lif_stralloc>
   1a69e:	f7 01       	movw	r30, r14
   1a6a0:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1a6a2:	80 83       	st	Z, r24
   1a6a4:	89 2b       	or	r24, r25
   1a6a6:	09 f4       	brne	.+2      	; 0x1a6aa <lif_create_volume+0xd8>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1a6a8:	58 c2       	rjmp	.+1200   	; 0x1ab5a <lif_create_volume+0x588>
   1a6aa:	c3 5f       	subi	r28, 0xF3	; 243
   1a6ac:	de 4f       	sbci	r29, 0xFE	; 254
   1a6ae:	28 81       	ld	r18, Y
   1a6b0:	39 81       	ldd	r19, Y+1	; 0x01
   1a6b2:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6b4:	5b 81       	ldd	r21, Y+3	; 0x03
   1a6b6:	cd 50       	subi	r28, 0x0D	; 13
   1a6b8:	d1 40       	sbci	r29, 0x01	; 1
   1a6ba:	20 8b       	std	Z+16, r18	; 0x10
   1a6bc:	31 8b       	std	Z+17, r19	; 0x11
   1a6be:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1a6c0:	53 8b       	std	Z+19, r21	; 0x13
   1a6c2:	cf 5e       	subi	r28, 0xEF	; 239
   1a6c4:	de 4f       	sbci	r29, 0xFE	; 254
   1a6c6:	88 81       	ld	r24, Y
   1a6c8:	99 81       	ldd	r25, Y+1	; 0x01
   1a6ca:	aa 81       	ldd	r26, Y+2	; 0x02
   1a6cc:	bb 81       	ldd	r27, Y+3	; 0x03
   1a6ce:	c1 51       	subi	r28, 0x11	; 17
   1a6d0:	d1 40       	sbci	r29, 0x01	; 1
   1a6d2:	82 0d       	add	r24, r2
   1a6d4:	93 1d       	adc	r25, r3
   1a6d6:	a4 1d       	adc	r26, r4
   1a6d8:	b5 1d       	adc	r27, r5
   1a6da:	f7 01       	movw	r30, r14
   1a6dc:	84 87       	std	Z+12, r24	; 0x0c
   1a6de:	95 87       	std	Z+13, r25	; 0x0d
   1a6e0:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1a6e2:	b7 87       	std	Z+15, r27	; 0x0f
   1a6e4:	82 0f       	add	r24, r18
   1a6e6:	93 1f       	adc	r25, r19
   1a6e8:	a4 1f       	adc	r26, r20
   1a6ea:	b5 1f       	adc	r27, r21
   1a6ec:	84 83       	std	Z+4, r24	; 0x04
   1a6ee:	95 83       	std	Z+5, r25	; 0x05
   1a6f0:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1a6f2:	b7 83       	std	Z+7, r27	; 0x07
   1a6f4:	ba 2f       	mov	r27, r26
   1a6f6:	a9 2f       	mov	r26, r25
   1a6f8:	98 2f       	mov	r25, r24
   1a6fa:	88 27       	eor	r24, r24
   1a6fc:	80 87       	std	Z+8, r24	; 0x08
   1a6fe:	91 87       	std	Z+9, r25	; 0x09
   1a700:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1a702:	b3 87       	std	Z+11, r27	; 0x0b
   1a704:	20 8f       	std	Z+24, r18	; 0x18
   1a706:	31 8f       	std	Z+25, r19	; 0x19
   1a708:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1a70a:	53 8f       	std	Z+27, r21	; 0x1b
   1a70c:	14 8a       	std	Z+20, r1	; 0x14
   1a70e:	15 8a       	std	Z+21, r1	; 0x15
   1a710:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1a712:	17 8a       	std	Z+23, r1	; 0x17
   1a714:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1a716:	14 8e       	std	Z+28, r1	; 0x1c
   1a718:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1a71a:	16 8e       	std	Z+30, r1	; 0x1e
   1a71c:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1a71e:	10 a2       	std	Z+32, r1	; 0x20
   1a720:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1a722:	12 a2       	std	Z+34, r1	; 0x22
   1a724:	61 2c       	mov	r6, r1
   1a726:	77 24       	eor	r7, r7
   1a728:	73 94       	inc	r7
   1a72a:	9e 01       	movw	r18, r28
   1a72c:	2f 5f       	subi	r18, 0xFF	; 255
   1a72e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a730:	49 01       	movw	r8, r18
   1a732:	d9 01       	movw	r26, r18
   1a734:	f3 01       	movw	r30, r6
   1a736:	1d 92       	st	X+, r1
   1a738:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1a73a:	e9 f7       	brne	.-6      	; 0x1a736 <lif_create_volume+0x164>
   1a73c:	b9 01       	movw	r22, r18
   1a73e:	c7 01       	movw	r24, r14
   1a740:	0e 94 6e c9 	call	0x192dc	; 0x192dc <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1a744:	65 e7       	ldi	r22, 0x75	; 117
   1a746:	78 e0       	ldi	r23, 0x08	; 8
   1a748:	d7 01       	movw	r26, r14
   1a74a:	8d 91       	ld	r24, X+
   1a74c:	9c 91       	ld	r25, X
   1a74e:	0e 94 65 c7 	call	0x18eca	; 0x18eca <lif_open>
   1a752:	f7 01       	movw	r30, r14
   1a754:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1a756:	82 83       	std	Z+2, r24	; 0x02
   1a758:	89 2b       	or	r24, r25
   1a75a:	09 f4       	brne	.+2      	; 0x1a75e <lif_create_volume+0x18c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a75c:	fe c1       	rjmp	.+1020   	; 0x1ab5a <lif_create_volume+0x588>
   1a75e:	00 e0       	ldi	r16, 0x00	; 0
   1a760:	11 e0       	ldi	r17, 0x01	; 1
   1a762:	20 e0       	ldi	r18, 0x00	; 0
   1a764:	30 e0       	ldi	r19, 0x00	; 0
   1a766:	a9 01       	movw	r20, r18
   1a768:	b4 01       	movw	r22, r8
   1a76a:	c7 01       	movw	r24, r14
   1a76c:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
   1a770:	9c 01       	movw	r18, r24
   1a772:	99 0f       	add	r25, r25
   1a774:	44 0b       	sbc	r20, r20
   1a776:	55 0b       	sbc	r21, r21
   1a778:	cb 5f       	subi	r28, 0xFB	; 251
   1a77a:	de 4f       	sbci	r29, 0xFE	; 254
   1a77c:	28 83       	st	Y, r18
   1a77e:	39 83       	std	Y+1, r19	; 0x01
   1a780:	4a 83       	std	Y+2, r20	; 0x02
   1a782:	5b 83       	std	Y+3, r21	; 0x03
   1a784:	c5 50       	subi	r28, 0x05	; 5

    if(size < LIF_SECTOR_SIZE)
   1a786:	d1 40       	sbci	r29, 0x01	; 1
   1a788:	2f 3f       	cpi	r18, 0xFF	; 255
   1a78a:	31 05       	cpc	r19, r1
   1a78c:	41 05       	cpc	r20, r1
   1a78e:	51 05       	cpc	r21, r1
   1a790:	09 f0       	breq	.+2      	; 0x1a794 <lif_create_volume+0x1c2>
   1a792:	0c f4       	brge	.+2      	; 0x1a796 <lif_create_volume+0x1c4>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1a794:	e2 c1       	rjmp	.+964    	; 0x1ab5a <lif_create_volume+0x588>
   1a796:	d4 01       	movw	r26, r8
   1a798:	f3 01       	movw	r30, r6
   1a79a:	1d 92       	st	X+, r1
   1a79c:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a79e:	e9 f7       	brne	.-6      	; 0x1a79a <lif_create_volume+0x1c8>
   1a7a0:	21 e0       	ldi	r18, 0x01	; 1
   1a7a2:	30 e0       	ldi	r19, 0x00	; 0
   1a7a4:	40 e0       	ldi	r20, 0x00	; 0
   1a7a6:	50 e0       	ldi	r21, 0x00	; 0
   1a7a8:	cf 5f       	subi	r28, 0xFF	; 255
   1a7aa:	de 4f       	sbci	r29, 0xFE	; 254
   1a7ac:	28 83       	st	Y, r18
   1a7ae:	39 83       	std	Y+1, r19	; 0x01
   1a7b0:	4a 83       	std	Y+2, r20	; 0x02
   1a7b2:	5b 83       	std	Y+3, r21	; 0x03
   1a7b4:	c1 50       	subi	r28, 0x01	; 1
   1a7b6:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1a7b8:	64 01       	movw	r12, r8
   1a7ba:	87 ee       	ldi	r24, 0xE7	; 231
   1a7bc:	9c e3       	ldi	r25, 0x3C	; 60
   1a7be:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a7c0:	81 2c       	mov	r8, r1
   1a7c2:	cf 5f       	subi	r28, 0xFF	; 255
   1a7c4:	de 4f       	sbci	r29, 0xFE	; 254
   1a7c6:	88 81       	ld	r24, Y
   1a7c8:	99 81       	ldd	r25, Y+1	; 0x01
   1a7ca:	aa 81       	ldd	r26, Y+2	; 0x02
   1a7cc:	bb 81       	ldd	r27, Y+3	; 0x03
   1a7ce:	c1 50       	subi	r28, 0x01	; 1
   1a7d0:	d1 40       	sbci	r29, 0x01	; 1
   1a7d2:	82 15       	cp	r24, r2
   1a7d4:	93 05       	cpc	r25, r3
   1a7d6:	a4 05       	cpc	r26, r4
   1a7d8:	b5 05       	cpc	r27, r5
   1a7da:	0c f0       	brlt	.+2      	; 0x1a7de <lif_create_volume+0x20c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a7dc:	64 c0       	rjmp	.+200    	; 0x1a8a6 <lif_create_volume+0x2d4>
   1a7de:	00 e0       	ldi	r16, 0x00	; 0
   1a7e0:	11 e0       	ldi	r17, 0x01	; 1
   1a7e2:	cb 5f       	subi	r28, 0xFB	; 251
   1a7e4:	de 4f       	sbci	r29, 0xFE	; 254
   1a7e6:	28 81       	ld	r18, Y
   1a7e8:	39 81       	ldd	r19, Y+1	; 0x01
   1a7ea:	4a 81       	ldd	r20, Y+2	; 0x02
   1a7ec:	5b 81       	ldd	r21, Y+3	; 0x03
   1a7ee:	c5 50       	subi	r28, 0x05	; 5
   1a7f0:	d1 40       	sbci	r29, 0x01	; 1
   1a7f2:	b6 01       	movw	r22, r12
   1a7f4:	c7 01       	movw	r24, r14
   1a7f6:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
   1a7fa:	09 2e       	mov	r0, r25
   1a7fc:	00 0c       	add	r0, r0
   1a7fe:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a800:	bb 0b       	sbc	r27, r27
   1a802:	8f 3f       	cpi	r24, 0xFF	; 255
   1a804:	91 05       	cpc	r25, r1
   1a806:	a1 05       	cpc	r26, r1
   1a808:	b1 05       	cpc	r27, r1
   1a80a:	09 f0       	breq	.+2      	; 0x1a80e <lif_create_volume+0x23c>
   1a80c:	0c f4       	brge	.+2      	; 0x1a810 <lif_create_volume+0x23e>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a80e:	a5 c1       	rjmp	.+842    	; 0x1ab5a <lif_create_volume+0x588>
   1a810:	cb 5f       	subi	r28, 0xFB	; 251
   1a812:	de 4f       	sbci	r29, 0xFE	; 254
   1a814:	28 81       	ld	r18, Y
   1a816:	39 81       	ldd	r19, Y+1	; 0x01
   1a818:	4a 81       	ldd	r20, Y+2	; 0x02
   1a81a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a81c:	c5 50       	subi	r28, 0x05	; 5
   1a81e:	d1 40       	sbci	r29, 0x01	; 1
   1a820:	28 0f       	add	r18, r24
   1a822:	39 1f       	adc	r19, r25
   1a824:	4a 1f       	adc	r20, r26
   1a826:	5b 1f       	adc	r21, r27
   1a828:	cb 5f       	subi	r28, 0xFB	; 251
   1a82a:	de 4f       	sbci	r29, 0xFE	; 254
   1a82c:	28 83       	st	Y, r18
   1a82e:	39 83       	std	Y+1, r19	; 0x01
   1a830:	4a 83       	std	Y+2, r20	; 0x02
   1a832:	5b 83       	std	Y+3, r21	; 0x03
   1a834:	c5 50       	subi	r28, 0x05	; 5
            printf("Wrote: %ld\r", count);
   1a836:	d1 40       	sbci	r29, 0x01	; 1
   1a838:	cc 5f       	subi	r28, 0xFC	; 252
   1a83a:	de 4f       	sbci	r29, 0xFE	; 254
   1a83c:	38 81       	ld	r19, Y
   1a83e:	c4 50       	subi	r28, 0x04	; 4
   1a840:	d1 40       	sbci	r29, 0x01	; 1
   1a842:	3f 93       	push	r19
   1a844:	cd 5f       	subi	r28, 0xFD	; 253
   1a846:	de 4f       	sbci	r29, 0xFE	; 254
   1a848:	48 81       	ld	r20, Y
   1a84a:	c3 50       	subi	r28, 0x03	; 3
   1a84c:	d1 40       	sbci	r29, 0x01	; 1
   1a84e:	4f 93       	push	r20
   1a850:	ce 5f       	subi	r28, 0xFE	; 254
   1a852:	de 4f       	sbci	r29, 0xFE	; 254
   1a854:	58 81       	ld	r21, Y
   1a856:	c2 50       	subi	r28, 0x02	; 2
   1a858:	d1 40       	sbci	r29, 0x01	; 1
   1a85a:	5f 93       	push	r21
   1a85c:	cf 5f       	subi	r28, 0xFF	; 255
   1a85e:	de 4f       	sbci	r29, 0xFE	; 254
   1a860:	88 81       	ld	r24, Y
   1a862:	c1 50       	subi	r28, 0x01	; 1
   1a864:	d1 40       	sbci	r29, 0x01	; 1
   1a866:	8f 93       	push	r24
   1a868:	1f 92       	push	r1
   1a86a:	7f 92       	push	r7
   1a86c:	6f 92       	push	r6
   1a86e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a872:	cf 5f       	subi	r28, 0xFF	; 255
   1a874:	de 4f       	sbci	r29, 0xFE	; 254
   1a876:	28 81       	ld	r18, Y
   1a878:	39 81       	ldd	r19, Y+1	; 0x01
   1a87a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a87c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a87e:	c1 50       	subi	r28, 0x01	; 1
   1a880:	d1 40       	sbci	r29, 0x01	; 1
   1a882:	2f 5f       	subi	r18, 0xFF	; 255
   1a884:	3f 4f       	sbci	r19, 0xFF	; 255
   1a886:	4f 4f       	sbci	r20, 0xFF	; 255
   1a888:	5f 4f       	sbci	r21, 0xFF	; 255
   1a88a:	cf 5f       	subi	r28, 0xFF	; 255
   1a88c:	de 4f       	sbci	r29, 0xFE	; 254
   1a88e:	28 83       	st	Y, r18
   1a890:	39 83       	std	Y+1, r19	; 0x01
   1a892:	4a 83       	std	Y+2, r20	; 0x02
   1a894:	5b 83       	std	Y+3, r21	; 0x03
   1a896:	c1 50       	subi	r28, 0x01	; 1
   1a898:	d1 40       	sbci	r29, 0x01	; 1
   1a89a:	0f b6       	in	r0, 0x3f	; 63
   1a89c:	f8 94       	cli
   1a89e:	de bf       	out	0x3e, r29	; 62
   1a8a0:	0f be       	out	0x3f, r0	; 63
   1a8a2:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a8a4:	8e cf       	rjmp	.-228    	; 0x1a7c2 <lif_create_volume+0x1f0>
   1a8a6:	c7 01       	movw	r24, r14
   1a8a8:	0e 94 53 cc 	call	0x198a6	; 0x198a6 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a8ac:	8f ef       	ldi	r24, 0xFF	; 255
   1a8ae:	9f ef       	ldi	r25, 0xFF	; 255
   1a8b0:	f7 01       	movw	r30, r14
   1a8b2:	e6 5a       	subi	r30, 0xA6	; 166
   1a8b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8b6:	91 83       	std	Z+1, r25	; 0x01
   1a8b8:	80 83       	st	Z, r24
   1a8ba:	46 01       	movw	r8, r12
   1a8bc:	6e 01       	movw	r12, r28
   1a8be:	91 e0       	ldi	r25, 0x01	; 1
   1a8c0:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a8c2:	d9 1e       	adc	r13, r25
   1a8c4:	b4 01       	movw	r22, r8
   1a8c6:	c7 01       	movw	r24, r14
   1a8c8:	0e 94 8e ca 	call	0x1951c	; 0x1951c <lif_dir2str>
   1a8cc:	a0 e2       	ldi	r26, 0x20	; 32
   1a8ce:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a8d0:	91 1c       	adc	r9, r1
   1a8d2:	c8 14       	cp	r12, r8
   1a8d4:	d9 04       	cpc	r13, r9
   1a8d6:	b1 f7       	brne	.-20     	; 0x1a8c4 <lif_create_volume+0x2f2>
   1a8d8:	81 2c       	mov	r8, r1
   1a8da:	91 2c       	mov	r9, r1
   1a8dc:	54 01       	movw	r10, r8
   1a8de:	fe 01       	movw	r30, r28
   1a8e0:	31 96       	adiw	r30, 0x01	; 1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1a8e2:	6f 01       	movw	r12, r30
   1a8e4:	8b ed       	ldi	r24, 0xDB	; 219
   1a8e6:	9c e3       	ldi	r25, 0x3C	; 60
   1a8e8:	2c 01       	movw	r4, r24
   1a8ea:	61 2c       	mov	r6, r1
   1a8ec:	cf 5f       	subi	r28, 0xFF	; 255
   1a8ee:	de 4f       	sbci	r29, 0xFE	; 254
   1a8f0:	28 81       	ld	r18, Y
   1a8f2:	39 81       	ldd	r19, Y+1	; 0x01
   1a8f4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a8f6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a8f8:	c1 50       	subi	r28, 0x01	; 1
   1a8fa:	d1 40       	sbci	r29, 0x01	; 1
   1a8fc:	28 0d       	add	r18, r8
   1a8fe:	39 1d       	adc	r19, r9
   1a900:	4a 1d       	adc	r20, r10
   1a902:	5b 1d       	adc	r21, r11
   1a904:	c7 5f       	subi	r28, 0xF7	; 247
   1a906:	de 4f       	sbci	r29, 0xFE	; 254
   1a908:	28 83       	st	Y, r18
   1a90a:	39 83       	std	Y+1, r19	; 0x01
   1a90c:	4a 83       	std	Y+2, r20	; 0x02
   1a90e:	5b 83       	std	Y+3, r21	; 0x03
   1a910:	c9 50       	subi	r28, 0x09	; 9
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a912:	d1 40       	sbci	r29, 0x01	; 1
   1a914:	cf 5e       	subi	r28, 0xEF	; 239
   1a916:	de 4f       	sbci	r29, 0xFE	; 254
   1a918:	88 81       	ld	r24, Y
   1a91a:	99 81       	ldd	r25, Y+1	; 0x01
   1a91c:	aa 81       	ldd	r26, Y+2	; 0x02
   1a91e:	bb 81       	ldd	r27, Y+3	; 0x03
   1a920:	c1 51       	subi	r28, 0x11	; 17
   1a922:	d1 40       	sbci	r29, 0x01	; 1
   1a924:	88 16       	cp	r8, r24
   1a926:	99 06       	cpc	r9, r25
   1a928:	aa 06       	cpc	r10, r26
   1a92a:	bb 06       	cpc	r11, r27
   1a92c:	0c f0       	brlt	.+2      	; 0x1a930 <lif_create_volume+0x35e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a92e:	67 c0       	rjmp	.+206    	; 0x1a9fe <lif_create_volume+0x42c>
   1a930:	00 e0       	ldi	r16, 0x00	; 0
   1a932:	11 e0       	ldi	r17, 0x01	; 1
   1a934:	cb 5f       	subi	r28, 0xFB	; 251
   1a936:	de 4f       	sbci	r29, 0xFE	; 254
   1a938:	28 81       	ld	r18, Y
   1a93a:	39 81       	ldd	r19, Y+1	; 0x01
   1a93c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a93e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a940:	c5 50       	subi	r28, 0x05	; 5
   1a942:	d1 40       	sbci	r29, 0x01	; 1
   1a944:	b6 01       	movw	r22, r12
   1a946:	c7 01       	movw	r24, r14
   1a948:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
   1a94c:	09 2e       	mov	r0, r25
   1a94e:	00 0c       	add	r0, r0
   1a950:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a952:	bb 0b       	sbc	r27, r27
   1a954:	8f 3f       	cpi	r24, 0xFF	; 255
   1a956:	91 05       	cpc	r25, r1
   1a958:	a1 05       	cpc	r26, r1
   1a95a:	b1 05       	cpc	r27, r1
   1a95c:	09 f0       	breq	.+2      	; 0x1a960 <lif_create_volume+0x38e>
   1a95e:	0c f4       	brge	.+2      	; 0x1a962 <lif_create_volume+0x390>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a960:	fc c0       	rjmp	.+504    	; 0x1ab5a <lif_create_volume+0x588>
   1a962:	cb 5f       	subi	r28, 0xFB	; 251
   1a964:	de 4f       	sbci	r29, 0xFE	; 254
   1a966:	28 81       	ld	r18, Y
   1a968:	39 81       	ldd	r19, Y+1	; 0x01
   1a96a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a96c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a96e:	c5 50       	subi	r28, 0x05	; 5
   1a970:	d1 40       	sbci	r29, 0x01	; 1
   1a972:	28 0f       	add	r18, r24
   1a974:	39 1f       	adc	r19, r25
   1a976:	4a 1f       	adc	r20, r26
   1a978:	5b 1f       	adc	r21, r27
   1a97a:	cb 5f       	subi	r28, 0xFB	; 251
   1a97c:	de 4f       	sbci	r29, 0xFE	; 254
   1a97e:	28 83       	st	Y, r18
   1a980:	39 83       	std	Y+1, r19	; 0x01
   1a982:	4a 83       	std	Y+2, r20	; 0x02
   1a984:	5b 83       	std	Y+3, r21	; 0x03
   1a986:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1a988:	d1 40       	sbci	r29, 0x01	; 1
   1a98a:	c7 5f       	subi	r28, 0xF7	; 247
   1a98c:	de 4f       	sbci	r29, 0xFE	; 254
   1a98e:	68 81       	ld	r22, Y
   1a990:	79 81       	ldd	r23, Y+1	; 0x01
   1a992:	8a 81       	ldd	r24, Y+2	; 0x02
   1a994:	9b 81       	ldd	r25, Y+3	; 0x03
   1a996:	c9 50       	subi	r28, 0x09	; 9
   1a998:	d1 40       	sbci	r29, 0x01	; 1
   1a99a:	24 e6       	ldi	r18, 0x64	; 100
   1a99c:	30 e0       	ldi	r19, 0x00	; 0
   1a99e:	40 e0       	ldi	r20, 0x00	; 0
   1a9a0:	50 e0       	ldi	r21, 0x00	; 0
   1a9a2:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
   1a9a6:	67 2b       	or	r22, r23
   1a9a8:	68 2b       	or	r22, r24
   1a9aa:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1a9ac:	11 f5       	brne	.+68     	; 0x1a9f2 <lif_create_volume+0x420>
   1a9ae:	c4 5f       	subi	r28, 0xF4	; 244
   1a9b0:	de 4f       	sbci	r29, 0xFE	; 254
   1a9b2:	38 81       	ld	r19, Y
   1a9b4:	cc 50       	subi	r28, 0x0C	; 12
   1a9b6:	d1 40       	sbci	r29, 0x01	; 1
   1a9b8:	3f 93       	push	r19
   1a9ba:	c5 5f       	subi	r28, 0xF5	; 245
   1a9bc:	de 4f       	sbci	r29, 0xFE	; 254
   1a9be:	48 81       	ld	r20, Y
   1a9c0:	cb 50       	subi	r28, 0x0B	; 11
   1a9c2:	d1 40       	sbci	r29, 0x01	; 1
   1a9c4:	4f 93       	push	r20
   1a9c6:	c6 5f       	subi	r28, 0xF6	; 246
   1a9c8:	de 4f       	sbci	r29, 0xFE	; 254
   1a9ca:	58 81       	ld	r21, Y
   1a9cc:	ca 50       	subi	r28, 0x0A	; 10
   1a9ce:	d1 40       	sbci	r29, 0x01	; 1
   1a9d0:	5f 93       	push	r21
   1a9d2:	c7 5f       	subi	r28, 0xF7	; 247
   1a9d4:	de 4f       	sbci	r29, 0xFE	; 254
   1a9d6:	88 81       	ld	r24, Y
   1a9d8:	c9 50       	subi	r28, 0x09	; 9
   1a9da:	d1 40       	sbci	r29, 0x01	; 1
   1a9dc:	8f 93       	push	r24
   1a9de:	1f 92       	push	r1
   1a9e0:	5f 92       	push	r5
   1a9e2:	4f 92       	push	r4
   1a9e4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1a9e8:	0f b6       	in	r0, 0x3f	; 63
   1a9ea:	f8 94       	cli
   1a9ec:	de bf       	out	0x3e, r29	; 62
   1a9ee:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a9f0:	cd bf       	out	0x3d, r28	; 61
   1a9f2:	bf ef       	ldi	r27, 0xFF	; 255
   1a9f4:	8b 1a       	sub	r8, r27
   1a9f6:	9b 0a       	sbc	r9, r27
   1a9f8:	ab 0a       	sbc	r10, r27
   1a9fa:	bb 0a       	sbc	r11, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a9fc:	77 cf       	rjmp	.-274    	; 0x1a8ec <lif_create_volume+0x31a>
   1a9fe:	80 e0       	ldi	r24, 0x00	; 0
   1aa00:	91 e0       	ldi	r25, 0x01	; 1
   1aa02:	d6 01       	movw	r26, r12
   1aa04:	fc 01       	movw	r30, r24
   1aa06:	1d 92       	st	X+, r1
   1aa08:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1aa0a:	e9 f7       	brne	.-6      	; 0x1aa06 <lif_create_volume+0x434>
   1aa0c:	41 2c       	mov	r4, r1
   1aa0e:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1aa10:	32 01       	movw	r6, r4
   1aa12:	8f ec       	ldi	r24, 0xCF	; 207
   1aa14:	9c e3       	ldi	r25, 0x3C	; 60
   1aa16:	9c 01       	movw	r18, r24
   1aa18:	40 e0       	ldi	r20, 0x00	; 0
   1aa1a:	cf 5f       	subi	r28, 0xFF	; 255
   1aa1c:	de 4f       	sbci	r29, 0xFE	; 254
   1aa1e:	28 83       	st	Y, r18
   1aa20:	39 83       	std	Y+1, r19	; 0x01
   1aa22:	4a 83       	std	Y+2, r20	; 0x02
   1aa24:	c1 50       	subi	r28, 0x01	; 1
   1aa26:	d1 40       	sbci	r29, 0x01	; 1
   1aa28:	c7 5f       	subi	r28, 0xF7	; 247
   1aa2a:	de 4f       	sbci	r29, 0xFE	; 254
   1aa2c:	88 80       	ld	r8, Y
   1aa2e:	99 80       	ldd	r9, Y+1	; 0x01
   1aa30:	aa 80       	ldd	r10, Y+2	; 0x02
   1aa32:	bb 80       	ldd	r11, Y+3	; 0x03
   1aa34:	c9 50       	subi	r28, 0x09	; 9
   1aa36:	d1 40       	sbci	r29, 0x01	; 1
   1aa38:	84 0c       	add	r8, r4
   1aa3a:	95 1c       	adc	r9, r5
   1aa3c:	a6 1c       	adc	r10, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1aa3e:	b7 1c       	adc	r11, r7
   1aa40:	c3 5f       	subi	r28, 0xF3	; 243
   1aa42:	de 4f       	sbci	r29, 0xFE	; 254
   1aa44:	28 81       	ld	r18, Y
   1aa46:	39 81       	ldd	r19, Y+1	; 0x01
   1aa48:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa4a:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa4c:	cd 50       	subi	r28, 0x0D	; 13
   1aa4e:	d1 40       	sbci	r29, 0x01	; 1
   1aa50:	42 16       	cp	r4, r18
   1aa52:	53 06       	cpc	r5, r19
   1aa54:	64 06       	cpc	r6, r20
   1aa56:	75 06       	cpc	r7, r21
   1aa58:	0c f0       	brlt	.+2      	; 0x1aa5c <lif_create_volume+0x48a>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1aa5a:	59 c0       	rjmp	.+178    	; 0x1ab0e <lif_create_volume+0x53c>
   1aa5c:	00 e0       	ldi	r16, 0x00	; 0
   1aa5e:	11 e0       	ldi	r17, 0x01	; 1
   1aa60:	cb 5f       	subi	r28, 0xFB	; 251
   1aa62:	de 4f       	sbci	r29, 0xFE	; 254
   1aa64:	28 81       	ld	r18, Y
   1aa66:	39 81       	ldd	r19, Y+1	; 0x01
   1aa68:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa6a:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa6c:	c5 50       	subi	r28, 0x05	; 5
   1aa6e:	d1 40       	sbci	r29, 0x01	; 1
   1aa70:	be 01       	movw	r22, r28
   1aa72:	6f 5f       	subi	r22, 0xFF	; 255
   1aa74:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa76:	c7 01       	movw	r24, r14
   1aa78:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
   1aa7c:	09 2e       	mov	r0, r25
   1aa7e:	00 0c       	add	r0, r0
   1aa80:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1aa82:	bb 0b       	sbc	r27, r27
   1aa84:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa86:	91 05       	cpc	r25, r1
   1aa88:	a1 05       	cpc	r26, r1
   1aa8a:	b1 05       	cpc	r27, r1
   1aa8c:	09 f0       	breq	.+2      	; 0x1aa90 <lif_create_volume+0x4be>
   1aa8e:	0c f4       	brge	.+2      	; 0x1aa92 <lif_create_volume+0x4c0>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1aa90:	64 c0       	rjmp	.+200    	; 0x1ab5a <lif_create_volume+0x588>
   1aa92:	cb 5f       	subi	r28, 0xFB	; 251
   1aa94:	de 4f       	sbci	r29, 0xFE	; 254
   1aa96:	28 81       	ld	r18, Y
   1aa98:	39 81       	ldd	r19, Y+1	; 0x01
   1aa9a:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa9c:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa9e:	c5 50       	subi	r28, 0x05	; 5
   1aaa0:	d1 40       	sbci	r29, 0x01	; 1
   1aaa2:	28 0f       	add	r18, r24
   1aaa4:	39 1f       	adc	r19, r25
   1aaa6:	4a 1f       	adc	r20, r26
   1aaa8:	5b 1f       	adc	r21, r27
   1aaaa:	cb 5f       	subi	r28, 0xFB	; 251
   1aaac:	de 4f       	sbci	r29, 0xFE	; 254
   1aaae:	28 83       	st	Y, r18
   1aab0:	39 83       	std	Y+1, r19	; 0x01
   1aab2:	4a 83       	std	Y+2, r20	; 0x02
   1aab4:	5b 83       	std	Y+3, r21	; 0x03
   1aab6:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1aab8:	d1 40       	sbci	r29, 0x01	; 1
   1aaba:	c5 01       	movw	r24, r10
   1aabc:	b4 01       	movw	r22, r8
   1aabe:	24 e6       	ldi	r18, 0x64	; 100
   1aac0:	30 e0       	ldi	r19, 0x00	; 0
   1aac2:	40 e0       	ldi	r20, 0x00	; 0
   1aac4:	50 e0       	ldi	r21, 0x00	; 0
   1aac6:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
   1aaca:	67 2b       	or	r22, r23
   1aacc:	68 2b       	or	r22, r24
   1aace:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1aad0:	c1 f4       	brne	.+48     	; 0x1ab02 <lif_create_volume+0x530>
   1aad2:	bf 92       	push	r11
   1aad4:	af 92       	push	r10
   1aad6:	9f 92       	push	r9
   1aad8:	8f 92       	push	r8
   1aada:	1f 92       	push	r1
   1aadc:	ce 5f       	subi	r28, 0xFE	; 254
   1aade:	de 4f       	sbci	r29, 0xFE	; 254
   1aae0:	38 81       	ld	r19, Y
   1aae2:	c2 50       	subi	r28, 0x02	; 2
   1aae4:	d1 40       	sbci	r29, 0x01	; 1
   1aae6:	3f 93       	push	r19
   1aae8:	cf 5f       	subi	r28, 0xFF	; 255
   1aaea:	de 4f       	sbci	r29, 0xFE	; 254
   1aaec:	48 81       	ld	r20, Y
   1aaee:	c1 50       	subi	r28, 0x01	; 1
   1aaf0:	d1 40       	sbci	r29, 0x01	; 1
   1aaf2:	4f 93       	push	r20
   1aaf4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1aaf8:	0f b6       	in	r0, 0x3f	; 63
   1aafa:	f8 94       	cli
   1aafc:	de bf       	out	0x3e, r29	; 62
   1aafe:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1ab00:	cd bf       	out	0x3d, r28	; 61
   1ab02:	9f ef       	ldi	r25, 0xFF	; 255
   1ab04:	49 1a       	sub	r4, r25
   1ab06:	59 0a       	sbc	r5, r25
   1ab08:	69 0a       	sbc	r6, r25
   1ab0a:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    if(debuglevel & 0x400)
   1ab0c:	8d cf       	rjmp	.-230    	; 0x1aa28 <lif_create_volume+0x456>
   1ab0e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1ab12:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1ab16:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_create_volume");
   1ab18:	05 c0       	rjmp	.+10     	; 0x1ab24 <lif_create_volume+0x552>
   1ab1a:	61 ed       	ldi	r22, 0xD1	; 209
   1ab1c:	75 e1       	ldi	r23, 0x15	; 21
   1ab1e:	c7 01       	movw	r24, r14
   1ab20:	0e 94 62 cc 	call	0x198c4	; 0x198c4 <lif_dump_vol>
    printf("Wrote: %ld\n", count);
   1ab24:	bf 92       	push	r11
   1ab26:	af 92       	push	r10
   1ab28:	9f 92       	push	r9
   1ab2a:	8f 92       	push	r8
   1ab2c:	83 ec       	ldi	r24, 0xC3	; 195
   1ab2e:	9c e3       	ldi	r25, 0x3C	; 60
   1ab30:	1f 92       	push	r1
   1ab32:	9f 93       	push	r25
   1ab34:	8f 93       	push	r24
   1ab36:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1ab3a:	8f ef       	ldi	r24, 0xFF	; 255
   1ab3c:	9f ef       	ldi	r25, 0xFF	; 255
   1ab3e:	d7 01       	movw	r26, r14
   1ab40:	91 96       	adiw	r26, 0x21	; 33
   1ab42:	9c 93       	st	X, r25
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1ab44:	8e 93       	st	-X, r24
   1ab46:	90 97       	sbiw	r26, 0x20	; 32
   1ab48:	c7 01       	movw	r24, r14
   1ab4a:	4f d8       	rcall	.-3938   	; 0x19bea <lif_check_volume>
   1ab4c:	0f b6       	in	r0, 0x3f	; 63
   1ab4e:	f8 94       	cli
   1ab50:	de bf       	out	0x3e, r29	; 62
   1ab52:	0f be       	out	0x3f, r0	; 63
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ab54:	cd bf       	out	0x3d, r28	; 61
   1ab56:	89 2b       	or	r24, r25
   1ab58:	19 f4       	brne	.+6      	; 0x1ab60 <lif_create_volume+0x58e>
   1ab5a:	c7 01       	movw	r24, r14
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1ab5c:	d4 da       	rcall	.-2648   	; 0x1a106 <lif_close_volume>
   1ab5e:	08 c0       	rjmp	.+16     	; 0x1ab70 <lif_create_volume+0x59e>
   1ab60:	c7 01       	movw	r24, r14
   1ab62:	2f dc       	rcall	.-1954   	; 0x1a3c2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ab64:	6c 01       	movw	r12, r24
   1ab66:	89 2b       	or	r24, r25
   1ab68:	31 f4       	brne	.+12     	; 0x1ab76 <lif_create_volume+0x5a4>

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1ab6a:	c7 01       	movw	r24, r14

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1ab6c:	cc da       	rcall	.-2664   	; 0x1a106 <lif_close_volume>
   1ab6e:	04 c0       	rjmp	.+8      	; 0x1ab78 <lif_create_volume+0x5a6>
   1ab70:	c1 2c       	mov	r12, r1
   1ab72:	d1 2c       	mov	r13, r1
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1ab74:	01 c0       	rjmp	.+2      	; 0x1ab78 <lif_create_volume+0x5a6>
   1ab76:	67 01       	movw	r12, r14
   1ab78:	c6 01       	movw	r24, r12
   1ab7a:	cc 5e       	subi	r28, 0xEC	; 236
   1ab7c:	de 4f       	sbci	r29, 0xFE	; 254
   1ab7e:	e2 e1       	ldi	r30, 0x12	; 18
   1ab80:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001ab84 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1ab84:	ac e0       	ldi	r26, 0x0C	; 12
   1ab86:	b0 e0       	ldi	r27, 0x00	; 0
   1ab88:	e8 ec       	ldi	r30, 0xC8	; 200
   1ab8a:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab8c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1ab90:	9c 87       	std	Y+12, r25	; 0x0c
   1ab92:	8b 87       	std	Y+11, r24	; 0x0b
   1ab94:	6a 01       	movw	r12, r20
   1ab96:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1ab98:	fc 01       	movw	r30, r24
   1ab9a:	84 84       	ldd	r8, Z+12	; 0x0c
   1ab9c:	95 84       	ldd	r9, Z+13	; 0x0d
   1ab9e:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1aba0:	b7 84       	ldd	r11, Z+15	; 0x0f
   1aba2:	0f dc       	rcall	.-2018   	; 0x1a3c2 <lif_updatefree>
   1aba4:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1aba6:	b1 f4       	brne	.+44     	; 0x1abd4 <lif_newdir+0x50>
   1aba8:	ff 92       	push	r15
   1abaa:	ef 92       	push	r14
   1abac:	df 92       	push	r13
   1abae:	cf 92       	push	r12
   1abb0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1abb2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1abb4:	83 8d       	ldd	r24, Z+27	; 0x1b
   1abb6:	8f 93       	push	r24
   1abb8:	82 8d       	ldd	r24, Z+26	; 0x1a
   1abba:	8f 93       	push	r24
   1abbc:	81 8d       	ldd	r24, Z+25	; 0x19
   1abbe:	8f 93       	push	r24
   1abc0:	80 8d       	ldd	r24, Z+24	; 0x18
   1abc2:	8f 93       	push	r24
   1abc4:	84 ee       	ldi	r24, 0xE4	; 228
   1abc6:	9b e3       	ldi	r25, 0x3B	; 59
   1abc8:	1f 92       	push	r1
   1abca:	9f 93       	push	r25
   1abcc:	8f 93       	push	r24
   1abce:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1abd2:	2c c0       	rjmp	.+88     	; 0x1ac2c <lif_newdir+0xa8>
   1abd4:	eb 85       	ldd	r30, Y+11	; 0x0b
   1abd6:	fc 85       	ldd	r31, Y+12	; 0x0c
   1abd8:	80 8d       	ldd	r24, Z+24	; 0x18
   1abda:	91 8d       	ldd	r25, Z+25	; 0x19
   1abdc:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1abde:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1abe0:	8c 15       	cp	r24, r12
   1abe2:	9d 05       	cpc	r25, r13
   1abe4:	ae 05       	cpc	r26, r14
   1abe6:	bf 05       	cpc	r27, r15
   1abe8:	b4 f0       	brlt	.+44     	; 0x1ac16 <lif_newdir+0x92>
   1abea:	44 24       	eor	r4, r4
   1abec:	43 94       	inc	r4
   1abee:	51 2c       	mov	r5, r1
   1abf0:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1abf2:	71 2c       	mov	r7, r1
   1abf4:	e6 5a       	subi	r30, 0xA6	; 166
   1abf6:	ff 4f       	sbci	r31, 0xFF	; 255
   1abf8:	fc 83       	std	Y+4, r31	; 0x04
   1abfa:	eb 83       	std	Y+3, r30	; 0x03
   1abfc:	8b 85       	ldd	r24, Y+11	; 0x0b
   1abfe:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ac00:	84 5a       	subi	r24, 0xA4	; 164
   1ac02:	9f 4f       	sbci	r25, 0xFF	; 255
   1ac04:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1ac06:	89 83       	std	Y+1, r24	; 0x01
   1ac08:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac0a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac0c:	e0 5a       	subi	r30, 0xA0	; 160
   1ac0e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ac10:	fe 83       	std	Y+6, r31	; 0x06
   1ac12:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1ac14:	23 c0       	rjmp	.+70     	; 0x1ac5c <lif_newdir+0xd8>
   1ac16:	bf 93       	push	r27
   1ac18:	af 93       	push	r26
   1ac1a:	9f 93       	push	r25
   1ac1c:	8f 93       	push	r24
   1ac1e:	8b eb       	ldi	r24, 0xBB	; 187
   1ac20:	9b e3       	ldi	r25, 0x3B	; 59
   1ac22:	1f 92       	push	r1
   1ac24:	9f 93       	push	r25
   1ac26:	8f 93       	push	r24
   1ac28:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1ac2c:	0f b6       	in	r0, 0x3f	; 63
   1ac2e:	f8 94       	cli
   1ac30:	de bf       	out	0x3e, r29	; 62
   1ac32:	0f be       	out	0x3f, r0	; 63
   1ac34:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1ac36:	05 c1       	rjmp	.+522    	; 0x1ae42 <lif_newdir+0x2be>
   1ac38:	eb 81       	ldd	r30, Y+3	; 0x03
   1ac3a:	fc 81       	ldd	r31, Y+4	; 0x04
   1ac3c:	80 81       	ld	r24, Z
   1ac3e:	91 81       	ldd	r25, Z+1	; 0x01
   1ac40:	8f 3f       	cpi	r24, 0xFF	; 255
   1ac42:	ff ef       	ldi	r31, 0xFF	; 255
   1ac44:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1ac46:	a1 f0       	breq	.+40     	; 0x1ac70 <lif_newdir+0xec>
   1ac48:	89 2b       	or	r24, r25
   1ac4a:	09 f0       	breq	.+2      	; 0x1ac4e <lif_newdir+0xca>
        {
            if(freestate == 0)
   1ac4c:	d0 c0       	rjmp	.+416    	; 0x1adee <lif_newdir+0x26a>
   1ac4e:	61 14       	cp	r6, r1
   1ac50:	71 04       	cpc	r7, r1
   1ac52:	09 f4       	brne	.+2      	; 0x1ac56 <lif_newdir+0xd2>
   1ac54:	c3 c0       	rjmp	.+390    	; 0x1addc <lif_newdir+0x258>
   1ac56:	9f ef       	ldi	r25, 0xFF	; 255
   1ac58:	49 1a       	sub	r4, r25
   1ac5a:	59 0a       	sbc	r5, r25
   1ac5c:	82 01       	movw	r16, r4
   1ac5e:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1ac60:	11 09       	sbc	r17, r1
   1ac62:	b8 01       	movw	r22, r16
   1ac64:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ac66:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ac68:	cf da       	rcall	.-2658   	; 0x1a208 <lif_readdirindex>
   1ac6a:	89 2b       	or	r24, r25
   1ac6c:	29 f7       	brne	.-54     	; 0x1ac38 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1ac6e:	e9 c0       	rjmp	.+466    	; 0x1ae42 <lif_newdir+0x2be>
   1ac70:	22 e0       	ldi	r18, 0x02	; 2
   1ac72:	62 16       	cp	r6, r18
   1ac74:	71 04       	cpc	r7, r1
   1ac76:	09 f0       	breq	.+2      	; 0x1ac7a <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1ac78:	46 c0       	rjmp	.+140    	; 0x1ad06 <lif_newdir+0x182>
   1ac7a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ac7c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ac7e:	0e 94 53 cc 	call	0x198a6	; 0x198a6 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1ac82:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac84:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac86:	e4 5a       	subi	r30, 0xA4	; 164
   1ac88:	ff 4f       	sbci	r31, 0xFF	; 255
   1ac8a:	8f 81       	ldd	r24, Y+7	; 0x07
   1ac8c:	80 83       	st	Z, r24
   1ac8e:	98 85       	ldd	r25, Y+8	; 0x08
   1ac90:	91 83       	std	Z+1, r25	; 0x01
   1ac92:	29 85       	ldd	r18, Y+9	; 0x09
   1ac94:	22 83       	std	Z+2, r18	; 0x02
   1ac96:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1ac98:	83 83       	std	Z+3, r24	; 0x03
   1ac9a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac9c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac9e:	e0 5a       	subi	r30, 0xA0	; 160
   1aca0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aca2:	c0 82       	st	Z, r12
   1aca4:	d1 82       	std	Z+1, r13	; 0x01
   1aca6:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1aca8:	f3 82       	std	Z+3, r15	; 0x03
   1acaa:	eb 85       	ldd	r30, Y+11	; 0x0b
   1acac:	fc 85       	ldd	r31, Y+12	; 0x0c
   1acae:	84 89       	ldd	r24, Z+20	; 0x14
   1acb0:	95 89       	ldd	r25, Z+21	; 0x15
   1acb2:	a6 89       	ldd	r26, Z+22	; 0x16
   1acb4:	b7 89       	ldd	r27, Z+23	; 0x17
   1acb6:	8c 0d       	add	r24, r12
   1acb8:	9d 1d       	adc	r25, r13
   1acba:	ae 1d       	adc	r26, r14
   1acbc:	bf 1d       	adc	r27, r15
   1acbe:	84 8b       	std	Z+20, r24	; 0x14
   1acc0:	95 8b       	std	Z+21, r25	; 0x15
   1acc2:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1acc4:	b7 8b       	std	Z+23, r27	; 0x17
   1acc6:	80 8d       	ldd	r24, Z+24	; 0x18
   1acc8:	91 8d       	ldd	r25, Z+25	; 0x19
   1acca:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1accc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1acce:	8c 19       	sub	r24, r12
   1acd0:	9d 09       	sbc	r25, r13
   1acd2:	ae 09       	sbc	r26, r14
   1acd4:	bf 09       	sbc	r27, r15
   1acd6:	80 8f       	std	Z+24, r24	; 0x18
   1acd8:	91 8f       	std	Z+25, r25	; 0x19
   1acda:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1acdc:	b3 8f       	std	Z+27, r27	; 0x1b
   1acde:	84 8d       	ldd	r24, Z+28	; 0x1c
   1ace0:	95 8d       	ldd	r25, Z+29	; 0x1d
   1ace2:	01 96       	adiw	r24, 0x01	; 1
   1ace4:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1ace6:	84 8f       	std	Z+28, r24	; 0x1c
   1ace8:	86 8d       	ldd	r24, Z+30	; 0x1e
   1acea:	97 8d       	ldd	r25, Z+31	; 0x1f
   1acec:	01 97       	sbiw	r24, 0x01	; 1
   1acee:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1acf0:	86 8f       	std	Z+30, r24	; 0x1e
   1acf2:	20 a2       	std	Z+32, r2	; 0x20
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1acf4:	31 a2       	std	Z+33, r3	; 0x21
   1acf6:	b1 01       	movw	r22, r2
   1acf8:	cf 01       	movw	r24, r30
   1acfa:	ef da       	rcall	.-2594   	; 0x1a2da <lif_writedirindex>
   1acfc:	89 2b       	or	r24, r25
   1acfe:	09 f4       	brne	.+2      	; 0x1ad02 <lif_newdir+0x17e>
   1ad00:	a0 c0       	rjmp	.+320    	; 0x1ae42 <lif_newdir+0x2be>
   1ad02:	c1 01       	movw	r24, r2
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1ad04:	a0 c0       	rjmp	.+320    	; 0x1ae46 <lif_newdir+0x2c2>
   1ad06:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1ad0a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1ad0e:	92 ff       	sbrs	r25, 2
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1ad10:	20 c0       	rjmp	.+64     	; 0x1ad52 <lif_newdir+0x1ce>
   1ad12:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad14:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad16:	83 8d       	ldd	r24, Z+27	; 0x1b
   1ad18:	8f 93       	push	r24
   1ad1a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ad1c:	8f 93       	push	r24
   1ad1e:	81 8d       	ldd	r24, Z+25	; 0x19
   1ad20:	8f 93       	push	r24
   1ad22:	80 8d       	ldd	r24, Z+24	; 0x18
   1ad24:	8f 93       	push	r24
   1ad26:	ff 92       	push	r15
   1ad28:	ef 92       	push	r14
   1ad2a:	df 92       	push	r13
   1ad2c:	cf 92       	push	r12
   1ad2e:	bf 92       	push	r11
   1ad30:	af 92       	push	r10
   1ad32:	9f 92       	push	r9
   1ad34:	8f 92       	push	r8
   1ad36:	1f 93       	push	r17
   1ad38:	0f 93       	push	r16
   1ad3a:	8a e6       	ldi	r24, 0x6A	; 106
   1ad3c:	9b e3       	ldi	r25, 0x3B	; 59
   1ad3e:	1f 92       	push	r1
   1ad40:	9f 93       	push	r25
   1ad42:	8f 93       	push	r24
   1ad44:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1ad48:	0f b6       	in	r0, 0x3f	; 63
   1ad4a:	f8 94       	cli
   1ad4c:	de bf       	out	0x3e, r29	; 62
   1ad4e:	0f be       	out	0x3f, r0	; 63
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1ad50:	cd bf       	out	0x3d, r28	; 61
   1ad52:	b8 01       	movw	r22, r16
   1ad54:	6f 5f       	subi	r22, 0xFF	; 255
   1ad56:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad58:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ad5a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ad5c:	1a db       	rcall	.-2508   	; 0x1a392 <lif_writedirEOF>
   1ad5e:	89 2b       	or	r24, r25
   1ad60:	09 f4       	brne	.+2      	; 0x1ad64 <lif_newdir+0x1e0>
            {
                break;
            }

            lif_dir_clear(LIF);
   1ad62:	6f c0       	rjmp	.+222    	; 0x1ae42 <lif_newdir+0x2be>
   1ad64:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ad66:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ad68:	0e 94 53 cc 	call	0x198a6	; 0x198a6 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1ad6c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad6e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad70:	e4 5a       	subi	r30, 0xA4	; 164
   1ad72:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad74:	80 82       	st	Z, r8
   1ad76:	91 82       	std	Z+1, r9	; 0x01
   1ad78:	a2 82       	std	Z+2, r10	; 0x02
            LIF->DIR.FileSectors = sectors;
   1ad7a:	b3 82       	std	Z+3, r11	; 0x03
   1ad7c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad7e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad80:	e0 5a       	subi	r30, 0xA0	; 160
   1ad82:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad84:	c0 82       	st	Z, r12
   1ad86:	d1 82       	std	Z+1, r13	; 0x01
   1ad88:	e2 82       	std	Z+2, r14	; 0x02
            LIF->usedsectors += sectors;
   1ad8a:	f3 82       	std	Z+3, r15	; 0x03
   1ad8c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad8e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad90:	84 89       	ldd	r24, Z+20	; 0x14
   1ad92:	95 89       	ldd	r25, Z+21	; 0x15
   1ad94:	a6 89       	ldd	r26, Z+22	; 0x16
   1ad96:	b7 89       	ldd	r27, Z+23	; 0x17
   1ad98:	8c 0d       	add	r24, r12
   1ad9a:	9d 1d       	adc	r25, r13
   1ad9c:	ae 1d       	adc	r26, r14
   1ad9e:	bf 1d       	adc	r27, r15
   1ada0:	84 8b       	std	Z+20, r24	; 0x14
   1ada2:	95 8b       	std	Z+21, r25	; 0x15
   1ada4:	a6 8b       	std	Z+22, r26	; 0x16
            LIF->freesectors -= sectors;
   1ada6:	b7 8b       	std	Z+23, r27	; 0x17
   1ada8:	80 8d       	ldd	r24, Z+24	; 0x18
   1adaa:	91 8d       	ldd	r25, Z+25	; 0x19
   1adac:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1adae:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1adb0:	8c 19       	sub	r24, r12
   1adb2:	9d 09       	sbc	r25, r13
   1adb4:	ae 09       	sbc	r26, r14
   1adb6:	bf 09       	sbc	r27, r15
   1adb8:	80 8f       	std	Z+24, r24	; 0x18
   1adba:	91 8f       	std	Z+25, r25	; 0x19
   1adbc:	a2 8f       	std	Z+26, r26	; 0x1a
            LIF->files++;
   1adbe:	b3 8f       	std	Z+27, r27	; 0x1b
   1adc0:	84 8d       	ldd	r24, Z+28	; 0x1c
   1adc2:	95 8d       	ldd	r25, Z+29	; 0x1d
   1adc4:	01 96       	adiw	r24, 0x01	; 1
            LIF->dirindex = index;
   1adc6:	95 8f       	std	Z+29, r25	; 0x1d
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1adc8:	84 8f       	std	Z+28, r24	; 0x1c
   1adca:	11 a3       	std	Z+33, r17	; 0x21
   1adcc:	00 a3       	std	Z+32, r16	; 0x20
   1adce:	b8 01       	movw	r22, r16
   1add0:	cf 01       	movw	r24, r30
   1add2:	83 da       	rcall	.-2810   	; 0x1a2da <lif_writedirindex>
   1add4:	89 2b       	or	r24, r25
   1add6:	a9 f1       	breq	.+106    	; 0x1ae42 <lif_newdir+0x2be>


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1add8:	c8 01       	movw	r24, r16
   1adda:	35 c0       	rjmp	.+106    	; 0x1ae46 <lif_newdir+0x2c2>
   1addc:	8f 82       	std	Y+7, r8	; 0x07
   1adde:	98 86       	std	Y+8, r9	; 0x08
   1ade0:	a9 86       	std	Y+9, r10	; 0x09
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1ade2:	ba 86       	std	Y+10, r11	; 0x0a
   1ade4:	18 01       	movw	r2, r16
   1ade6:	66 24       	eor	r6, r6
            }
            ++index;
            continue;
   1ade8:	63 94       	inc	r6
        }
        

        // VALID record
        if(freestate == 1)
   1adea:	71 2c       	mov	r7, r1
   1adec:	34 cf       	rjmp	.-408    	; 0x1ac56 <lif_newdir+0xd2>
   1adee:	f1 e0       	ldi	r31, 0x01	; 1
   1adf0:	6f 16       	cp	r6, r31
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1adf2:	71 04       	cpc	r7, r1
   1adf4:	a9 f4       	brne	.+42     	; 0x1ae20 <lif_newdir+0x29c>
   1adf6:	e9 81       	ldd	r30, Y+1	; 0x01
   1adf8:	fa 81       	ldd	r31, Y+2	; 0x02
   1adfa:	80 81       	ld	r24, Z
   1adfc:	91 81       	ldd	r25, Z+1	; 0x01
   1adfe:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae00:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae02:	88 19       	sub	r24, r8
   1ae04:	99 09       	sbc	r25, r9
   1ae06:	aa 09       	sbc	r26, r10
   1ae08:	bb 09       	sbc	r27, r11
   1ae0a:	8c 15       	cp	r24, r12
   1ae0c:	9d 05       	cpc	r25, r13
   1ae0e:	ae 05       	cpc	r26, r14
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1ae10:	bf 05       	cpc	r27, r15
   1ae12:	1c f4       	brge	.+6      	; 0x1ae1a <lif_newdir+0x296>
   1ae14:	61 2c       	mov	r6, r1
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1ae16:	71 2c       	mov	r7, r1
   1ae18:	03 c0       	rjmp	.+6      	; 0x1ae20 <lif_newdir+0x29c>
   1ae1a:	82 e0       	ldi	r24, 0x02	; 2
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1ae1c:	68 2e       	mov	r6, r24
   1ae1e:	71 2c       	mov	r7, r1
   1ae20:	e9 81       	ldd	r30, Y+1	; 0x01
   1ae22:	fa 81       	ldd	r31, Y+2	; 0x02
   1ae24:	80 80       	ld	r8, Z
   1ae26:	91 80       	ldd	r9, Z+1	; 0x01
   1ae28:	a2 80       	ldd	r10, Z+2	; 0x02
   1ae2a:	b3 80       	ldd	r11, Z+3	; 0x03
   1ae2c:	ed 81       	ldd	r30, Y+5	; 0x05
   1ae2e:	fe 81       	ldd	r31, Y+6	; 0x06
   1ae30:	80 81       	ld	r24, Z
   1ae32:	91 81       	ldd	r25, Z+1	; 0x01
   1ae34:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae36:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae38:	88 0e       	add	r8, r24
   1ae3a:	99 1e       	adc	r9, r25
   1ae3c:	aa 1e       	adc	r10, r26
        ++index;
    }
    // ERROR
    return(-1);
   1ae3e:	bb 1e       	adc	r11, r27
   1ae40:	0a cf       	rjmp	.-492    	; 0x1ac56 <lif_newdir+0xd2>
}
   1ae42:	8f ef       	ldi	r24, 0xFF	; 255
   1ae44:	9f ef       	ldi	r25, 0xFF	; 255
   1ae46:	2c 96       	adiw	r28, 0x0c	; 12
   1ae48:	e2 e1       	ldi	r30, 0x12	; 18
   1ae4a:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001ae4e <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1ae4e:	a0 e3       	ldi	r26, 0x30	; 48
   1ae50:	b1 e0       	ldi	r27, 0x01	; 1
   1ae52:	ed e2       	ldi	r30, 0x2D	; 45
   1ae54:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae56:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   1ae5a:	b8 2e       	mov	r11, r24
   1ae5c:	a9 2e       	mov	r10, r25
   1ae5e:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1ae60:	be 01       	movw	r22, r28
   1ae62:	6f 5f       	subi	r22, 0xFF	; 255
   1ae64:	7e 4f       	sbci	r23, 0xFE	; 254
   1ae66:	0e 94 8d c7 	call	0x18f1a	; 0x18f1a <lif_stat>
   1ae6a:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1ae6c:	00 97       	sbiw	r24, 0x00	; 0
   1ae6e:	09 f4       	brne	.+2      	; 0x1ae72 <lif_open_volume+0x24>
   1ae70:	92 c0       	rjmp	.+292    	; 0x1af96 <lif_open_volume+0x148>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1ae72:	fc 01       	movw	r30, r24
   1ae74:	80 8d       	ldd	r24, Z+24	; 0x18
   1ae76:	91 8d       	ldd	r25, Z+25	; 0x19
   1ae78:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ae7a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ae7c:	81 15       	cp	r24, r1
   1ae7e:	f2 e0       	ldi	r31, 0x02	; 2
   1ae80:	9f 07       	cpc	r25, r31
   1ae82:	a1 05       	cpc	r26, r1
   1ae84:	b1 05       	cpc	r27, r1
   1ae86:	b8 f4       	brcc	.+46     	; 0x1aeb6 <lif_open_volume+0x68>
    {
        if(debuglevel & 1)
   1ae88:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1ae8c:	20 ff       	sbrs	r18, 0
   1ae8e:	83 c0       	rjmp	.+262    	; 0x1af96 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1ae90:	bf 93       	push	r27
   1ae92:	af 93       	push	r26
   1ae94:	9f 93       	push	r25
   1ae96:	8f 93       	push	r24
   1ae98:	af 92       	push	r10
   1ae9a:	bf 92       	push	r11
   1ae9c:	8b e2       	ldi	r24, 0x2B	; 43
   1ae9e:	9b e3       	ldi	r25, 0x3B	; 59
   1aea0:	1f 92       	push	r1
   1aea2:	9f 93       	push	r25
   1aea4:	8f 93       	push	r24
   1aea6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1aeaa:	0f b6       	in	r0, 0x3f	; 63
   1aeac:	f8 94       	cli
   1aeae:	de bf       	out	0x3e, r29	; 62
   1aeb0:	0f be       	out	0x3f, r0	; 63
   1aeb2:	cd bf       	out	0x3d, r28	; 61
   1aeb4:	70 c0       	rjmp	.+224    	; 0x1af96 <lif_open_volume+0x148>
        return(NULL);
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1aeb6:	64 e7       	ldi	r22, 0x74	; 116
   1aeb8:	70 e0       	ldi	r23, 0x00	; 0
   1aeba:	80 e0       	ldi	r24, 0x00	; 0
   1aebc:	90 e0       	ldi	r25, 0x00	; 0
   1aebe:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <lif_calloc>
   1aec2:	7c 01       	movw	r14, r24
    if(!LIF)
   1aec4:	89 2b       	or	r24, r25
   1aec6:	09 f4       	brne	.+2      	; 0x1aeca <lif_open_volume+0x7c>
   1aec8:	66 c0       	rjmp	.+204    	; 0x1af96 <lif_open_volume+0x148>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1aeca:	8b 2d       	mov	r24, r11
   1aecc:	9a 2d       	mov	r25, r10
   1aece:	0e 94 46 c7 	call	0x18e8c	; 0x18e8c <lif_stralloc>
   1aed2:	f7 01       	movw	r30, r14
   1aed4:	91 83       	std	Z+1, r25	; 0x01
   1aed6:	80 83       	st	Z, r24
    if(!LIF->name)
   1aed8:	00 97       	sbiw	r24, 0x00	; 0
   1aeda:	09 f4       	brne	.+2      	; 0x1aede <lif_open_volume+0x90>
   1aedc:	5a c0       	rjmp	.+180    	; 0x1af92 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1aede:	f8 01       	movw	r30, r16
   1aee0:	00 8d       	ldd	r16, Z+24	; 0x18
   1aee2:	11 8d       	ldd	r17, Z+25	; 0x19
   1aee4:	22 8d       	ldd	r18, Z+26	; 0x1a
   1aee6:	33 8d       	ldd	r19, Z+27	; 0x1b
   1aee8:	f7 01       	movw	r30, r14
   1aeea:	00 87       	std	Z+8, r16	; 0x08
   1aeec:	11 87       	std	Z+9, r17	; 0x09
   1aeee:	22 87       	std	Z+10, r18	; 0x0a
   1aef0:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1aef2:	77 27       	eor	r23, r23
   1aef4:	63 2f       	mov	r22, r19
   1aef6:	52 2f       	mov	r21, r18
   1aef8:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1aefa:	00 23       	and	r16, r16
   1aefc:	21 f0       	breq	.+8      	; 0x1af06 <lif_open_volume+0xb8>
        ++sectors;
   1aefe:	4f 5f       	subi	r20, 0xFF	; 255
   1af00:	5f 4f       	sbci	r21, 0xFF	; 255
   1af02:	6f 4f       	sbci	r22, 0xFF	; 255
   1af04:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1af06:	f7 01       	movw	r30, r14
   1af08:	44 83       	std	Z+4, r20	; 0x04
   1af0a:	55 83       	std	Z+5, r21	; 0x05
   1af0c:	66 83       	std	Z+6, r22	; 0x06
   1af0e:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1af10:	b6 01       	movw	r22, r12
   1af12:	0e 94 65 c7 	call	0x18eca	; 0x18eca <lif_open>
   1af16:	f7 01       	movw	r30, r14
   1af18:	93 83       	std	Z+3, r25	; 0x03
   1af1a:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1af1c:	89 2b       	or	r24, r25
   1af1e:	c9 f1       	breq	.+114    	; 0x1af92 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1af20:	00 e0       	ldi	r16, 0x00	; 0
   1af22:	11 e0       	ldi	r17, 0x01	; 1
   1af24:	20 e0       	ldi	r18, 0x00	; 0
   1af26:	30 e0       	ldi	r19, 0x00	; 0
   1af28:	a9 01       	movw	r20, r18
   1af2a:	be 01       	movw	r22, r28
   1af2c:	6f 5f       	subi	r22, 0xFF	; 255
   1af2e:	7f 4f       	sbci	r23, 0xFF	; 255
   1af30:	c7 01       	movw	r24, r14
   1af32:	0e 94 eb c7 	call	0x18fd6	; 0x18fd6 <lif_read>
   1af36:	6f 3f       	cpi	r22, 0xFF	; 255
   1af38:	71 05       	cpc	r23, r1
   1af3a:	81 05       	cpc	r24, r1
   1af3c:	91 05       	cpc	r25, r1
   1af3e:	09 f0       	breq	.+2      	; 0x1af42 <lif_open_volume+0xf4>
   1af40:	4c f4       	brge	.+18     	; 0x1af54 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1af42:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1af46:	80 ff       	sbrs	r24, 0
   1af48:	24 c0       	rjmp	.+72     	; 0x1af92 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1af4a:	af 92       	push	r10
   1af4c:	bf 92       	push	r11
   1af4e:	85 ef       	ldi	r24, 0xF5	; 245
   1af50:	9a e3       	ldi	r25, 0x3A	; 58
   1af52:	15 c0       	rjmp	.+42     	; 0x1af7e <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1af54:	b7 01       	movw	r22, r14
   1af56:	ce 01       	movw	r24, r28
   1af58:	01 96       	adiw	r24, 0x01	; 1
   1af5a:	0e 94 06 ca 	call	0x1940c	; 0x1940c <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1af5e:	c7 01       	movw	r24, r14
   1af60:	0e 94 f5 cd 	call	0x19bea	; 0x19bea <lif_check_volume>
   1af64:	89 2b       	or	r24, r25
   1af66:	d1 f4       	brne	.+52     	; 0x1af9c <lif_open_volume+0x14e>
    {
        if(debuglevel & 1)
   1af68:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1af6c:	80 ff       	sbrs	r24, 0
   1af6e:	11 c0       	rjmp	.+34     	; 0x1af92 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1af70:	f7 01       	movw	r30, r14
   1af72:	81 81       	ldd	r24, Z+1	; 0x01
   1af74:	8f 93       	push	r24
   1af76:	80 81       	ld	r24, Z
   1af78:	8f 93       	push	r24
   1af7a:	82 ec       	ldi	r24, 0xC2	; 194
   1af7c:	9a e3       	ldi	r25, 0x3A	; 58
   1af7e:	1f 92       	push	r1
   1af80:	9f 93       	push	r25
   1af82:	8f 93       	push	r24
   1af84:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1af88:	0f 90       	pop	r0
   1af8a:	0f 90       	pop	r0
   1af8c:	0f 90       	pop	r0
   1af8e:	0f 90       	pop	r0
   1af90:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af92:	c7 01       	movw	r24, r14
   1af94:	b8 d8       	rcall	.-3728   	; 0x1a106 <lif_close_volume>
    if( !lif_check_volume(LIF) )
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1af96:	00 e0       	ldi	r16, 0x00	; 0
   1af98:	10 e0       	ldi	r17, 0x00	; 0
   1af9a:	4b c0       	rjmp	.+150    	; 0x1b032 <lif_open_volume+0x1e4>
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1af9c:	f7 01       	movw	r30, r14
   1af9e:	45 a5       	ldd	r20, Z+45	; 0x2d
   1afa0:	56 a5       	ldd	r21, Z+46	; 0x2e
   1afa2:	67 a5       	ldd	r22, Z+47	; 0x2f
   1afa4:	70 a9       	ldd	r23, Z+48	; 0x30
   1afa6:	85 a9       	ldd	r24, Z+53	; 0x35
   1afa8:	96 a9       	ldd	r25, Z+54	; 0x36
   1afaa:	a7 a9       	ldd	r26, Z+55	; 0x37
   1afac:	b0 ad       	ldd	r27, Z+56	; 0x38
   1afae:	48 0f       	add	r20, r24
   1afb0:	59 1f       	adc	r21, r25
   1afb2:	6a 1f       	adc	r22, r26
   1afb4:	7b 1f       	adc	r23, r27
   1afb6:	44 87       	std	Z+12, r20	; 0x0c
   1afb8:	55 87       	std	Z+13, r21	; 0x0d
   1afba:	66 87       	std	Z+14, r22	; 0x0e
   1afbc:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1afbe:	84 81       	ldd	r24, Z+4	; 0x04
   1afc0:	95 81       	ldd	r25, Z+5	; 0x05
   1afc2:	a6 81       	ldd	r26, Z+6	; 0x06
   1afc4:	b7 81       	ldd	r27, Z+7	; 0x07
   1afc6:	84 1b       	sub	r24, r20
   1afc8:	95 0b       	sbc	r25, r21
   1afca:	a6 0b       	sbc	r26, r22
   1afcc:	b7 0b       	sbc	r27, r23
   1afce:	80 8b       	std	Z+16, r24	; 0x10
   1afd0:	91 8b       	std	Z+17, r25	; 0x11
   1afd2:	a2 8b       	std	Z+18, r26	; 0x12
   1afd4:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1afd6:	80 8f       	std	Z+24, r24	; 0x18
   1afd8:	91 8f       	std	Z+25, r25	; 0x19
   1afda:	a2 8f       	std	Z+26, r26	; 0x1a
   1afdc:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1afde:	14 8a       	std	Z+20, r1	; 0x14
   1afe0:	15 8a       	std	Z+21, r1	; 0x15
   1afe2:	16 8a       	std	Z+22, r1	; 0x16
   1afe4:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1afe6:	17 8e       	std	Z+31, r1	; 0x1f
   1afe8:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1afea:	15 8e       	std	Z+29, r1	; 0x1d
   1afec:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1afee:	11 a2       	std	Z+33, r1	; 0x21
   1aff0:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1aff2:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1aff4:	12 a2       	std	Z+34, r1	; 0x22
   1aff6:	c7 01       	movw	r24, r14
   1aff8:	e4 d9       	rcall	.-3128   	; 0x1a3c2 <lif_updatefree>
   1affa:	8c 01       	movw	r16, r24
   1affc:	89 2b       	or	r24, r25
    {
        if(debuglevel & 1)
   1affe:	c1 f4       	brne	.+48     	; 0x1b030 <lif_open_volume+0x1e2>
   1b000:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b004:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1b006:	11 c0       	rjmp	.+34     	; 0x1b02a <lif_open_volume+0x1dc>
   1b008:	f7 01       	movw	r30, r14
   1b00a:	81 81       	ldd	r24, Z+1	; 0x01
   1b00c:	8f 93       	push	r24
   1b00e:	80 81       	ld	r24, Z
   1b010:	8f 93       	push	r24
   1b012:	8f e8       	ldi	r24, 0x8F	; 143
   1b014:	9a e3       	ldi	r25, 0x3A	; 58
   1b016:	1f 92       	push	r1
   1b018:	9f 93       	push	r25
   1b01a:	8f 93       	push	r24
   1b01c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b020:	0f 90       	pop	r0
   1b022:	0f 90       	pop	r0
   1b024:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b026:	0f 90       	pop	r0
   1b028:	0f 90       	pop	r0
   1b02a:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b02c:	6c d8       	rcall	.-3880   	; 0x1a106 <lif_close_volume>
   1b02e:	01 c0       	rjmp	.+2      	; 0x1b032 <lif_open_volume+0x1e4>
    }

    return( LIF );
}
   1b030:	87 01       	movw	r16, r14
   1b032:	c8 01       	movw	r24, r16
   1b034:	c0 5d       	subi	r28, 0xD0	; 208
   1b036:	de 4f       	sbci	r29, 0xFE	; 254
   1b038:	ea e0       	ldi	r30, 0x0A	; 10
   1b03a:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001b03e <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1b03e:	a1 e1       	ldi	r26, 0x11	; 17
   1b040:	b0 e0       	ldi	r27, 0x00	; 0
   1b042:	e5 e2       	ldi	r30, 0x25	; 37
   1b044:	f8 ed       	ldi	r31, 0xD8	; 216
   1b046:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1b04a:	67 e6       	ldi	r22, 0x67	; 103
   1b04c:	78 e0       	ldi	r23, 0x08	; 8
   1b04e:	ff de       	rcall	.-514    	; 0x1ae4e <lif_open_volume>
   1b050:	99 8b       	std	Y+17, r25	; 0x11
   1b052:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1b054:	00 97       	sbiw	r24, 0x00	; 0
   1b056:	09 f4       	brne	.+2      	; 0x1b05a <lif_dir+0x1c>
   1b058:	5b c1       	rjmp	.+694    	; 0x1b310 <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1b05a:	fc 01       	movw	r30, r24
   1b05c:	86 a1       	ldd	r24, Z+38	; 0x26
   1b05e:	88 23       	and	r24, r24
   1b060:	21 f0       	breq	.+8      	; 0x1b06a <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1b062:	8f 01       	movw	r16, r30
   1b064:	0a 5d       	subi	r16, 0xDA	; 218
   1b066:	1f 4f       	sbci	r17, 0xFF	; 255
   1b068:	02 c0       	rjmp	.+4      	; 0x1b06e <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1b06a:	05 e9       	ldi	r16, 0x95	; 149
   1b06c:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1b06e:	88 89       	ldd	r24, Y+16	; 0x10
   1b070:	99 89       	ldd	r25, Y+17	; 0x11
   1b072:	87 5b       	subi	r24, 0xB7	; 183
   1b074:	9f 4f       	sbci	r25, 0xFF	; 255
   1b076:	0e 94 26 cc 	call	0x1984c	; 0x1984c <lif_lifbcd2timestr>
   1b07a:	9f 93       	push	r25
   1b07c:	8f 93       	push	r24
   1b07e:	1f 93       	push	r17
   1b080:	0f 93       	push	r16
   1b082:	88 e7       	ldi	r24, 0x78	; 120
   1b084:	9a e3       	ldi	r25, 0x3A	; 58
   1b086:	1f 92       	push	r1
   1b088:	9f 93       	push	r25
   1b08a:	8f 93       	push	r24
   1b08c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1b090:	88 e3       	ldi	r24, 0x38	; 56
   1b092:	9a e3       	ldi	r25, 0x3A	; 58
   1b094:	1f 92       	push	r1
   1b096:	9f 93       	push	r25
   1b098:	8f 93       	push	r24
   1b09a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b09e:	0f b6       	in	r0, 0x3f	; 63
   1b0a0:	f8 94       	cli
   1b0a2:	de bf       	out	0x3e, r29	; 62
   1b0a4:	0f be       	out	0x3f, r0	; 63
   1b0a6:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1b0a8:	60 e2       	ldi	r22, 0x20	; 32
   1b0aa:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1b0ac:	00 e0       	ldi	r16, 0x00	; 0
   1b0ae:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b0b0:	88 89       	ldd	r24, Y+16	; 0x10
   1b0b2:	99 89       	ldd	r25, Y+17	; 0x11
   1b0b4:	86 5a       	subi	r24, 0xA6	; 166
   1b0b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0b8:	9c 83       	std	Y+4, r25	; 0x04
   1b0ba:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b0bc:	e8 89       	ldd	r30, Y+16	; 0x10
   1b0be:	f9 89       	ldd	r31, Y+17	; 0x11
   1b0c0:	e0 5a       	subi	r30, 0xA0	; 160
   1b0c2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0c4:	fb 87       	std	Y+11, r31	; 0x0b
   1b0c6:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b0c8:	28 89       	ldd	r18, Y+16	; 0x10
   1b0ca:	39 89       	ldd	r19, Y+17	; 0x11
   1b0cc:	24 59       	subi	r18, 0x94	; 148
   1b0ce:	3f 4f       	sbci	r19, 0xFF	; 255
   1b0d0:	3d 87       	std	Y+13, r19	; 0x0d
   1b0d2:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b0d4:	88 89       	ldd	r24, Y+16	; 0x10
   1b0d6:	99 89       	ldd	r25, Y+17	; 0x11
   1b0d8:	81 5b       	subi	r24, 0xB1	; 177
   1b0da:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0dc:	9a 83       	std	Y+2, r25	; 0x02
   1b0de:	89 83       	std	Y+1, r24	; 0x01
   1b0e0:	8c ee       	ldi	r24, 0xEC	; 236
   1b0e2:	99 e3       	ldi	r25, 0x39	; 57
   1b0e4:	3c 01       	movw	r6, r24
   1b0e6:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b0e8:	e8 89       	ldd	r30, Y+16	; 0x10
   1b0ea:	f9 89       	ldd	r31, Y+17	; 0x11
   1b0ec:	ec 59       	subi	r30, 0x9C	; 156
   1b0ee:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0f0:	ff 87       	std	Y+15, r31	; 0x0f
   1b0f2:	ee 87       	std	Y+14, r30	; 0x0e
   1b0f4:	28 89       	ldd	r18, Y+16	; 0x10
   1b0f6:	39 89       	ldd	r19, Y+17	; 0x11
   1b0f8:	22 59       	subi	r18, 0x92	; 146
   1b0fa:	3f 4f       	sbci	r19, 0xFF	; 255
   1b0fc:	3e 83       	std	Y+6, r19	; 0x06
   1b0fe:	2d 83       	std	Y+5, r18	; 0x05
   1b100:	a8 88       	ldd	r10, Y+16	; 0x10
   1b102:	b9 88       	ldd	r11, Y+17	; 0x11
   1b104:	3c e5       	ldi	r19, 0x5C	; 92
   1b106:	a3 0e       	add	r10, r19
   1b108:	b1 1c       	adc	r11, r1
   1b10a:	8c eb       	ldi	r24, 0xBC	; 188
   1b10c:	99 e3       	ldi	r25, 0x39	; 57
   1b10e:	9c 01       	movw	r18, r24
   1b110:	40 e0       	ldi	r20, 0x00	; 0
   1b112:	2f 83       	std	Y+7, r18	; 0x07
   1b114:	38 87       	std	Y+8, r19	; 0x08
   1b116:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b118:	b8 01       	movw	r22, r16
   1b11a:	88 89       	ldd	r24, Y+16	; 0x10
   1b11c:	99 89       	ldd	r25, Y+17	; 0x11
   1b11e:	74 d8       	rcall	.-3864   	; 0x1a208 <lif_readdirindex>
   1b120:	89 2b       	or	r24, r25
   1b122:	09 f4       	brne	.+2      	; 0x1b126 <lif_dir+0xe8>
   1b124:	9d c0       	rjmp	.+314    	; 0x1b260 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b126:	eb 81       	ldd	r30, Y+3	; 0x03
   1b128:	fc 81       	ldd	r31, Y+4	; 0x04
   1b12a:	20 81       	ld	r18, Z
   1b12c:	31 81       	ldd	r19, Z+1	; 0x01
   1b12e:	2f 3f       	cpi	r18, 0xFF	; 255
   1b130:	ff ef       	ldi	r31, 0xFF	; 255
   1b132:	3f 07       	cpc	r19, r31
   1b134:	09 f4       	brne	.+2      	; 0x1b138 <lif_dir+0xfa>
   1b136:	94 c0       	rjmp	.+296    	; 0x1b260 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b138:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b13a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b13c:	80 81       	ld	r24, Z
   1b13e:	91 81       	ldd	r25, Z+1	; 0x01
   1b140:	a2 81       	ldd	r26, Z+2	; 0x02
   1b142:	b3 81       	ldd	r27, Z+3	; 0x03
   1b144:	cc 24       	eor	r12, r12
   1b146:	d8 2e       	mov	r13, r24
   1b148:	e9 2e       	mov	r14, r25
   1b14a:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b14c:	2c 7f       	andi	r18, 0xFC	; 252
   1b14e:	20 31       	cpi	r18, 0x10	; 16
   1b150:	30 4e       	sbci	r19, 0xE0	; 224
   1b152:	09 f0       	breq	.+2      	; 0x1b156 <lif_dir+0x118>
   1b154:	4b c0       	rjmp	.+150    	; 0x1b1ec <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b156:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b158:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b15a:	20 81       	ld	r18, Z
   1b15c:	31 81       	ldd	r19, Z+1	; 0x01
   1b15e:	21 15       	cp	r18, r1
   1b160:	31 05       	cpc	r19, r1
   1b162:	a9 f0       	breq	.+42     	; 0x1b18e <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b164:	19 01       	movw	r2, r18
   1b166:	41 2c       	mov	r4, r1
   1b168:	51 2c       	mov	r5, r1
   1b16a:	77 27       	eor	r23, r23
   1b16c:	65 2d       	mov	r22, r5
   1b16e:	54 2d       	mov	r21, r4
   1b170:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b172:	22 23       	and	r18, r18
   1b174:	21 f0       	breq	.+8      	; 0x1b17e <lif_dir+0x140>
        ++sectors;
   1b176:	4f 5f       	subi	r20, 0xFF	; 255
   1b178:	5f 4f       	sbci	r21, 0xFF	; 255
   1b17a:	6f 4f       	sbci	r22, 0xFF	; 255
   1b17c:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b17e:	84 17       	cp	r24, r20
   1b180:	95 07       	cpc	r25, r21
   1b182:	a6 07       	cpc	r26, r22
   1b184:	b7 07       	cpc	r27, r23
   1b186:	19 f4       	brne	.+6      	; 0x1b18e <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b188:	72 01       	movw	r14, r4
   1b18a:	61 01       	movw	r12, r2
   1b18c:	2f c0       	rjmp	.+94     	; 0x1b1ec <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b18e:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <debuglevel>
   1b192:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1b196:	52 ff       	sbrs	r21, 2
   1b198:	27 c0       	rjmp	.+78     	; 0x1b1e8 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b19a:	19 01       	movw	r2, r18
   1b19c:	41 2c       	mov	r4, r1
   1b19e:	51 2c       	mov	r5, r1
   1b1a0:	77 27       	eor	r23, r23
   1b1a2:	65 2d       	mov	r22, r5
   1b1a4:	54 2d       	mov	r21, r4
   1b1a6:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b1a8:	22 23       	and	r18, r18
   1b1aa:	21 f0       	breq	.+8      	; 0x1b1b4 <lif_dir+0x176>
        ++sectors;
   1b1ac:	4f 5f       	subi	r20, 0xFF	; 255
   1b1ae:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1b0:	6f 4f       	sbci	r22, 0xFF	; 255
   1b1b2:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b1b4:	bf 93       	push	r27
   1b1b6:	af 93       	push	r26
   1b1b8:	9f 93       	push	r25
   1b1ba:	8f 93       	push	r24
   1b1bc:	7f 93       	push	r23
   1b1be:	6f 93       	push	r22
   1b1c0:	5f 93       	push	r21
   1b1c2:	4f 93       	push	r20
   1b1c4:	1f 92       	push	r1
   1b1c6:	1f 92       	push	r1
   1b1c8:	3f 92       	push	r3
   1b1ca:	2f 92       	push	r2
   1b1cc:	fa 81       	ldd	r31, Y+2	; 0x02
   1b1ce:	ff 93       	push	r31
   1b1d0:	29 81       	ldd	r18, Y+1	; 0x01
   1b1d2:	2f 93       	push	r18
   1b1d4:	1f 92       	push	r1
   1b1d6:	7f 92       	push	r7
   1b1d8:	6f 92       	push	r6
   1b1da:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b1de:	0f b6       	in	r0, 0x3f	; 63
   1b1e0:	f8 94       	cli
   1b1e2:	de bf       	out	0x3e, r29	; 62
   1b1e4:	0f be       	out	0x3f, r0	; 63
   1b1e6:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b1e8:	81 e2       	ldi	r24, 0x21	; 33
   1b1ea:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b1ec:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b1ee:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b1f0:	0e 94 26 cc 	call	0x1984c	; 0x1984c <lif_lifbcd2timestr>
   1b1f4:	ed 81       	ldd	r30, Y+5	; 0x05
   1b1f6:	fe 81       	ldd	r31, Y+6	; 0x06
   1b1f8:	a0 81       	ld	r26, Z
   1b1fa:	b1 81       	ldd	r27, Z+1	; 0x01
   1b1fc:	f5 01       	movw	r30, r10
   1b1fe:	60 81       	ld	r22, Z
   1b200:	71 81       	ldd	r23, Z+1	; 0x01
   1b202:	52 80       	ldd	r5, Z+2	; 0x02
   1b204:	43 80       	ldd	r4, Z+3	; 0x03
   1b206:	eb 81       	ldd	r30, Y+3	; 0x03
   1b208:	fc 81       	ldd	r31, Y+4	; 0x04
   1b20a:	40 81       	ld	r20, Z
   1b20c:	51 81       	ldd	r21, Z+1	; 0x01
   1b20e:	41 15       	cp	r20, r1
   1b210:	51 05       	cpc	r21, r1
   1b212:	19 f0       	breq	.+6      	; 0x1b21a <lif_dir+0x1dc>
   1b214:	29 81       	ldd	r18, Y+1	; 0x01
   1b216:	3a 81       	ldd	r19, Y+2	; 0x02
   1b218:	02 c0       	rjmp	.+4      	; 0x1b21e <lif_dir+0x1e0>
   1b21a:	23 ee       	ldi	r18, 0xE3	; 227
   1b21c:	35 e1       	ldi	r19, 0x15	; 21
   1b21e:	9f 93       	push	r25
   1b220:	8f 93       	push	r24
   1b222:	bf 93       	push	r27
   1b224:	af 93       	push	r26
   1b226:	1f 92       	push	r1
   1b228:	9f 92       	push	r9
   1b22a:	ff 92       	push	r15
   1b22c:	ef 92       	push	r14
   1b22e:	df 92       	push	r13
   1b230:	cf 92       	push	r12
   1b232:	4f 92       	push	r4
   1b234:	5f 92       	push	r5
   1b236:	7f 93       	push	r23
   1b238:	6f 93       	push	r22
   1b23a:	5f 93       	push	r21
   1b23c:	4f 93       	push	r20
   1b23e:	3f 93       	push	r19
   1b240:	2f 93       	push	r18
   1b242:	1f 92       	push	r1
   1b244:	f8 85       	ldd	r31, Y+8	; 0x08
   1b246:	ff 93       	push	r31
   1b248:	2f 81       	ldd	r18, Y+7	; 0x07
   1b24a:	2f 93       	push	r18
   1b24c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b250:	0f 5f       	subi	r16, 0xFF	; 255
   1b252:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b254:	0f b6       	in	r0, 0x3f	; 63
   1b256:	f8 94       	cli
   1b258:	de bf       	out	0x3e, r29	; 62
   1b25a:	0f be       	out	0x3f, r0	; 63
   1b25c:	cd bf       	out	0x3d, r28	; 61
   1b25e:	5c cf       	rjmp	.-328    	; 0x1b118 <lif_dir+0xda>

    printf("\n");
   1b260:	8a eb       	ldi	r24, 0xBA	; 186
   1b262:	99 e3       	ldi	r25, 0x39	; 57
   1b264:	1f 92       	push	r1
   1b266:	9f 93       	push	r25
   1b268:	8f 93       	push	r24
   1b26a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b26e:	e8 89       	ldd	r30, Y+16	; 0x10
   1b270:	f9 89       	ldd	r31, Y+17	; 0x11
   1b272:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b274:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b276:	09 2e       	mov	r0, r25
   1b278:	00 0c       	add	r0, r0
   1b27a:	aa 0b       	sbc	r26, r26
   1b27c:	bb 0b       	sbc	r27, r27
   1b27e:	bf 93       	push	r27
   1b280:	af 93       	push	r26
   1b282:	9f 93       	push	r25
   1b284:	8f 93       	push	r24
   1b286:	8e ea       	ldi	r24, 0xAE	; 174
   1b288:	99 e3       	ldi	r25, 0x39	; 57
   1b28a:	1f 92       	push	r1
   1b28c:	9f 93       	push	r25
   1b28e:	8f 93       	push	r24
   1b290:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b294:	e8 89       	ldd	r30, Y+16	; 0x10
   1b296:	f9 89       	ldd	r31, Y+17	; 0x11
   1b298:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b29a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b29c:	09 2e       	mov	r0, r25
   1b29e:	00 0c       	add	r0, r0
   1b2a0:	aa 0b       	sbc	r26, r26
   1b2a2:	bb 0b       	sbc	r27, r27
   1b2a4:	bf 93       	push	r27
   1b2a6:	af 93       	push	r26
   1b2a8:	9f 93       	push	r25
   1b2aa:	8f 93       	push	r24
   1b2ac:	81 ea       	ldi	r24, 0xA1	; 161
   1b2ae:	99 e3       	ldi	r25, 0x39	; 57
   1b2b0:	1f 92       	push	r1
   1b2b2:	9f 93       	push	r25
   1b2b4:	8f 93       	push	r24
   1b2b6:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b2ba:	e8 89       	ldd	r30, Y+16	; 0x10
   1b2bc:	f9 89       	ldd	r31, Y+17	; 0x11
   1b2be:	87 89       	ldd	r24, Z+23	; 0x17
   1b2c0:	8f 93       	push	r24
   1b2c2:	86 89       	ldd	r24, Z+22	; 0x16
   1b2c4:	8f 93       	push	r24
   1b2c6:	85 89       	ldd	r24, Z+21	; 0x15
   1b2c8:	8f 93       	push	r24
   1b2ca:	84 89       	ldd	r24, Z+20	; 0x14
   1b2cc:	8f 93       	push	r24
   1b2ce:	8e e8       	ldi	r24, 0x8E	; 142
   1b2d0:	99 e3       	ldi	r25, 0x39	; 57
   1b2d2:	1f 92       	push	r1
   1b2d4:	9f 93       	push	r25
   1b2d6:	8f 93       	push	r24
   1b2d8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b2dc:	e8 89       	ldd	r30, Y+16	; 0x10
   1b2de:	f9 89       	ldd	r31, Y+17	; 0x11
   1b2e0:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b2e2:	8f 93       	push	r24
   1b2e4:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b2e6:	8f 93       	push	r24
   1b2e8:	81 8d       	ldd	r24, Z+25	; 0x19
   1b2ea:	8f 93       	push	r24
   1b2ec:	80 8d       	ldd	r24, Z+24	; 0x18
   1b2ee:	8f 93       	push	r24
   1b2f0:	8b e7       	ldi	r24, 0x7B	; 123
   1b2f2:	99 e3       	ldi	r25, 0x39	; 57
   1b2f4:	1f 92       	push	r1
   1b2f6:	9f 93       	push	r25
   1b2f8:	8f 93       	push	r24
   1b2fa:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2fe:	88 89       	ldd	r24, Y+16	; 0x10
   1b300:	99 89       	ldd	r25, Y+17	; 0x11
   1b302:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1b306:	0f b6       	in	r0, 0x3f	; 63
   1b308:	f8 94       	cli
   1b30a:	de bf       	out	0x3e, r29	; 62
   1b30c:	0f be       	out	0x3f, r0	; 63
   1b30e:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b310:	61 96       	adiw	r28, 0x11	; 17
   1b312:	e2 e1       	ldi	r30, 0x12	; 18
   1b314:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001b318 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b318:	a0 e0       	ldi	r26, 0x00	; 0
   1b31a:	b0 e0       	ldi	r27, 0x00	; 0
   1b31c:	e2 e9       	ldi	r30, 0x92	; 146
   1b31e:	f9 ed       	ldi	r31, 0xD9	; 217
   1b320:	0c 94 43 e9 	jmp	0x1d286	; 0x1d286 <__prologue_saves__+0x10>
   1b324:	7c 01       	movw	r14, r24
   1b326:	16 2f       	mov	r17, r22
   1b328:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b32a:	86 2f       	mov	r24, r22
   1b32c:	97 2f       	mov	r25, r23
   1b32e:	0e 94 f7 c8 	call	0x191ee	; 0x191ee <lif_checkname>
   1b332:	89 2b       	or	r24, r25
   1b334:	49 f4       	brne	.+18     	; 0x1b348 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b336:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b33a:	80 ff       	sbrs	r24, 0
   1b33c:	48 c0       	rjmp	.+144    	; 0x1b3ce <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b33e:	0f 93       	push	r16
   1b340:	1f 93       	push	r17
   1b342:	84 e5       	ldi	r24, 0x54	; 84
   1b344:	99 e3       	ldi	r25, 0x39	; 57
   1b346:	13 c0       	rjmp	.+38     	; 0x1b36e <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b348:	a1 2f       	mov	r26, r17
   1b34a:	b0 2f       	mov	r27, r16
   1b34c:	fd 01       	movw	r30, r26
   1b34e:	01 90       	ld	r0, Z+
   1b350:	00 20       	and	r0, r0
   1b352:	e9 f7       	brne	.-6      	; 0x1b34e <lif_find_file+0x36>
   1b354:	31 97       	sbiw	r30, 0x01	; 1
   1b356:	ea 1b       	sub	r30, r26
   1b358:	fb 0b       	sbc	r31, r27
   1b35a:	3b 97       	sbiw	r30, 0x0b	; 11
   1b35c:	98 f0       	brcs	.+38     	; 0x1b384 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b35e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b362:	80 ff       	sbrs	r24, 0
   1b364:	34 c0       	rjmp	.+104    	; 0x1b3ce <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b366:	0f 93       	push	r16
   1b368:	1f 93       	push	r17
   1b36a:	8f e2       	ldi	r24, 0x2F	; 47
   1b36c:	99 e3       	ldi	r25, 0x39	; 57
   1b36e:	1f 92       	push	r1
   1b370:	9f 93       	push	r25
   1b372:	8f 93       	push	r24
   1b374:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b378:	0f 90       	pop	r0
   1b37a:	0f 90       	pop	r0
   1b37c:	0f 90       	pop	r0
   1b37e:	0f 90       	pop	r0
   1b380:	0f 90       	pop	r0
   1b382:	25 c0       	rjmp	.+74     	; 0x1b3ce <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b384:	e1 14       	cp	r14, r1
   1b386:	f1 04       	cpc	r15, r1
   1b388:	11 f1       	breq	.+68     	; 0x1b3ce <lif_find_file+0xb6>
   1b38a:	c0 e0       	ldi	r28, 0x00	; 0
   1b38c:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b38e:	67 01       	movw	r12, r14
   1b390:	2a e5       	ldi	r18, 0x5A	; 90
   1b392:	c2 0e       	add	r12, r18
   1b394:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b396:	57 01       	movw	r10, r14
   1b398:	8f e4       	ldi	r24, 0x4F	; 79
   1b39a:	a8 0e       	add	r10, r24
   1b39c:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b39e:	be 01       	movw	r22, r28
   1b3a0:	c7 01       	movw	r24, r14
   1b3a2:	0e 94 04 d1 	call	0x1a208	; 0x1a208 <lif_readdirindex>
   1b3a6:	89 2b       	or	r24, r25
   1b3a8:	91 f0       	breq	.+36     	; 0x1b3ce <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b3aa:	f6 01       	movw	r30, r12
   1b3ac:	80 81       	ld	r24, Z
   1b3ae:	91 81       	ldd	r25, Z+1	; 0x01
   1b3b0:	8f 3f       	cpi	r24, 0xFF	; 255
   1b3b2:	ff ef       	ldi	r31, 0xFF	; 255
   1b3b4:	9f 07       	cpc	r25, r31
   1b3b6:	59 f0       	breq	.+22     	; 0x1b3ce <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b3b8:	89 2b       	or	r24, r25
   1b3ba:	39 f0       	breq	.+14     	; 0x1b3ca <lif_find_file+0xb2>
   1b3bc:	61 2f       	mov	r22, r17
   1b3be:	70 2f       	mov	r23, r16
   1b3c0:	c5 01       	movw	r24, r10
   1b3c2:	0e 94 12 31 	call	0x6224	; 0x6224 <strcasecmp>
   1b3c6:	89 2b       	or	r24, r25
   1b3c8:	29 f0       	breq	.+10     	; 0x1b3d4 <lif_find_file+0xbc>
            break;
        ++index;
   1b3ca:	21 96       	adiw	r28, 0x01	; 1
   1b3cc:	e8 cf       	rjmp	.-48     	; 0x1b39e <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b3ce:	8f ef       	ldi	r24, 0xFF	; 255
   1b3d0:	9f ef       	ldi	r25, 0xFF	; 255
   1b3d2:	01 c0       	rjmp	.+2      	; 0x1b3d6 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b3d4:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b3d6:	cd b7       	in	r28, 0x3d	; 61
   1b3d8:	de b7       	in	r29, 0x3e	; 62
   1b3da:	ea e0       	ldi	r30, 0x0A	; 10
   1b3dc:	0c 94 5f e9 	jmp	0x1d2be	; 0x1d2be <__epilogue_restores__+0x10>

0001b3e0 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b3e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b3e2:	b0 e0       	ldi	r27, 0x00	; 0
   1b3e4:	e6 ef       	ldi	r30, 0xF6	; 246
   1b3e6:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3e8:	0c 94 45 e9 	jmp	0x1d28a	; 0x1d28a <__prologue_saves__+0x14>
   1b3ec:	6b 01       	movw	r12, r22
   1b3ee:	7c 01       	movw	r14, r24
   1b3f0:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b3f2:	20 e0       	ldi	r18, 0x00	; 0
   1b3f4:	31 e0       	ldi	r19, 0x01	; 1
   1b3f6:	40 e0       	ldi	r20, 0x00	; 0
   1b3f8:	50 e0       	ldi	r21, 0x00	; 0
   1b3fa:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    if(!pos)
   1b3fe:	61 15       	cp	r22, r1
   1b400:	71 05       	cpc	r23, r1
   1b402:	e1 f1       	breq	.+120    	; 0x1b47c <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b404:	c0 e0       	ldi	r28, 0x00	; 0
   1b406:	d1 e0       	ldi	r29, 0x01	; 1
   1b408:	c6 1b       	sub	r28, r22
   1b40a:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b40c:	f8 01       	movw	r30, r16
   1b40e:	8f ee       	ldi	r24, 0xEF	; 239
   1b410:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b412:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b414:	cf 01       	movw	r24, r30
   1b416:	80 1b       	sub	r24, r16
   1b418:	91 0b       	sbc	r25, r17
   1b41a:	8c 17       	cp	r24, r28
   1b41c:	9d 07       	cpc	r25, r29
   1b41e:	14 f4       	brge	.+4      	; 0x1b424 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b420:	21 93       	st	Z+, r18
   1b422:	f8 cf       	rjmp	.-16     	; 0x1b414 <lif_e010_pad_sector+0x34>
   1b424:	1c 16       	cp	r1, r28
   1b426:	1d 06       	cpc	r1, r29
   1b428:	14 f0       	brlt	.+4      	; 0x1b42e <lif_e010_pad_sector+0x4e>
   1b42a:	c1 e0       	ldi	r28, 0x01	; 1
   1b42c:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b42e:	ce 01       	movw	r24, r28
   1b430:	0d 2e       	mov	r0, r29
   1b432:	00 0c       	add	r0, r0
   1b434:	aa 0b       	sbc	r26, r26
   1b436:	bb 0b       	sbc	r27, r27
   1b438:	bc 01       	movw	r22, r24
   1b43a:	cd 01       	movw	r24, r26
   1b43c:	6c 0d       	add	r22, r12
   1b43e:	7d 1d       	adc	r23, r13
   1b440:	8e 1d       	adc	r24, r14
   1b442:	9f 1d       	adc	r25, r15
   1b444:	20 e0       	ldi	r18, 0x00	; 0
   1b446:	31 e0       	ldi	r19, 0x01	; 1
   1b448:	40 e0       	ldi	r20, 0x00	; 0
   1b44a:	50 e0       	ldi	r21, 0x00	; 0
   1b44c:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b450:	61 15       	cp	r22, r1
   1b452:	71 05       	cpc	r23, r1
   1b454:	b1 f0       	breq	.+44     	; 0x1b482 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b456:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1b45a:	20 ff       	sbrs	r18, 0
   1b45c:	14 c0       	rjmp	.+40     	; 0x1b486 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b45e:	7f 93       	push	r23
   1b460:	6f 93       	push	r22
   1b462:	86 ef       	ldi	r24, 0xF6	; 246
   1b464:	98 e3       	ldi	r25, 0x38	; 56
   1b466:	1f 92       	push	r1
   1b468:	9f 93       	push	r25
   1b46a:	8f 93       	push	r24
   1b46c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b470:	0f 90       	pop	r0
   1b472:	0f 90       	pop	r0
   1b474:	0f 90       	pop	r0
   1b476:	0f 90       	pop	r0
   1b478:	0f 90       	pop	r0
   1b47a:	05 c0       	rjmp	.+10     	; 0x1b486 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b47c:	80 e0       	ldi	r24, 0x00	; 0
   1b47e:	90 e0       	ldi	r25, 0x00	; 0
   1b480:	04 c0       	rjmp	.+8      	; 0x1b48a <lif_e010_pad_sector+0xaa>
   1b482:	ce 01       	movw	r24, r28
   1b484:	02 c0       	rjmp	.+4      	; 0x1b48a <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b486:	8f ef       	ldi	r24, 0xFF	; 255
   1b488:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b48a:	cd b7       	in	r28, 0x3d	; 61
   1b48c:	de b7       	in	r29, 0x3e	; 62
   1b48e:	e8 e0       	ldi	r30, 0x08	; 8
   1b490:	0c 94 61 e9 	jmp	0x1d2c2	; 0x1d2c2 <__epilogue_restores__+0x14>

0001b494 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b494:	a0 e0       	ldi	r26, 0x00	; 0
   1b496:	b0 e0       	ldi	r27, 0x00	; 0
   1b498:	e0 e5       	ldi	r30, 0x50	; 80
   1b49a:	fa ed       	ldi	r31, 0xDA	; 218
   1b49c:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1b4a0:	ec 01       	movw	r28, r24
   1b4a2:	4a 01       	movw	r8, r20
   1b4a4:	5b 01       	movw	r10, r22
   1b4a6:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b4a8:	fc 01       	movw	r30, r24
   1b4aa:	01 90       	ld	r0, Z+
   1b4ac:	00 20       	and	r0, r0
   1b4ae:	e9 f7       	brne	.-6      	; 0x1b4aa <lif_ascii_string_to_e010+0x16>
   1b4b0:	31 97       	sbiw	r30, 0x01	; 1
   1b4b2:	6f 01       	movw	r12, r30
   1b4b4:	c8 1a       	sub	r12, r24
   1b4b6:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b4b8:	41 2c       	mov	r4, r1
   1b4ba:	51 2c       	mov	r5, r1
   1b4bc:	32 01       	movw	r6, r4
   1b4be:	53 94       	inc	r5
   1b4c0:	cb 01       	movw	r24, r22
   1b4c2:	ba 01       	movw	r22, r20
   1b4c4:	a3 01       	movw	r20, r6
   1b4c6:	92 01       	movw	r18, r4
   1b4c8:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
   1b4cc:	21 2c       	mov	r2, r1
   1b4ce:	33 24       	eor	r3, r3
   1b4d0:	33 94       	inc	r3
   1b4d2:	c1 01       	movw	r24, r2
   1b4d4:	86 1b       	sub	r24, r22
   1b4d6:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1b4d8:	86 30       	cpi	r24, 0x06	; 6
   1b4da:	91 05       	cpc	r25, r1
   1b4dc:	20 f0       	brcs	.+8      	; 0x1b4e6 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b4de:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1b4e0:	00 e0       	ldi	r16, 0x00	; 0
   1b4e2:	10 e0       	ldi	r17, 0x00	; 0
   1b4e4:	17 c0       	rjmp	.+46     	; 0x1b514 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1b4e6:	a7 01       	movw	r20, r14
   1b4e8:	c5 01       	movw	r24, r10
   1b4ea:	b4 01       	movw	r22, r8
   1b4ec:	79 df       	rcall	.-270    	; 0x1b3e0 <lif_e010_pad_sector>
   1b4ee:	8c 01       	movw	r16, r24
        if(ind < 0)
   1b4f0:	97 fd       	sbrc	r25, 7
   1b4f2:	84 c0       	rjmp	.+264    	; 0x1b5fc <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1b4f4:	09 2e       	mov	r0, r25
   1b4f6:	00 0c       	add	r0, r0
   1b4f8:	aa 0b       	sbc	r26, r26
   1b4fa:	bb 0b       	sbc	r27, r27
   1b4fc:	bc 01       	movw	r22, r24
   1b4fe:	cd 01       	movw	r24, r26
   1b500:	68 0d       	add	r22, r8
   1b502:	79 1d       	adc	r23, r9
   1b504:	8a 1d       	adc	r24, r10
   1b506:	9b 1d       	adc	r25, r11
   1b508:	a3 01       	movw	r20, r6
   1b50a:	92 01       	movw	r18, r4
   1b50c:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
   1b510:	26 1a       	sub	r2, r22
   1b512:	37 0a       	sbc	r3, r23
   1b514:	f7 01       	movw	r30, r14
   1b516:	e0 0f       	add	r30, r16
   1b518:	f1 1f       	adc	r31, r17
   1b51a:	0d 5f       	subi	r16, 0xFD	; 253
   1b51c:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1b51e:	c6 01       	movw	r24, r12
   1b520:	02 96       	adiw	r24, 0x02	; 2
   1b522:	82 15       	cp	r24, r2
   1b524:	93 05       	cpc	r25, r3
   1b526:	84 f4       	brge	.+32     	; 0x1b548 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1b528:	8f ed       	ldi	r24, 0xDF	; 223
   1b52a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b52c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1b52e:	d2 82       	std	Z+2, r13	; 0x02
   1b530:	f7 01       	movw	r30, r14
   1b532:	e0 0f       	add	r30, r16
   1b534:	f1 1f       	adc	r31, r17
   1b536:	cf 01       	movw	r24, r30
   1b538:	8e 19       	sub	r24, r14
   1b53a:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b53c:	29 91       	ld	r18, Y+
   1b53e:	22 23       	and	r18, r18
   1b540:	09 f4       	brne	.+2      	; 0x1b544 <lif_ascii_string_to_e010+0xb0>
   1b542:	5c c0       	rjmp	.+184    	; 0x1b5fc <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b544:	21 93       	st	Z+, r18
   1b546:	f7 cf       	rjmp	.-18     	; 0x1b536 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1b548:	8f ec       	ldi	r24, 0xCF	; 207
   1b54a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b54c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1b54e:	d2 82       	std	Z+2, r13	; 0x02
   1b550:	d7 01       	movw	r26, r14
   1b552:	a0 0f       	add	r26, r16
   1b554:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b556:	fe 01       	movw	r30, r28
   1b558:	81 91       	ld	r24, Z+
   1b55a:	81 11       	cpse	r24, r1
   1b55c:	0e c0       	rjmp	.+28     	; 0x1b57a <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1b55e:	c8 01       	movw	r24, r16
   1b560:	01 2e       	mov	r0, r17
   1b562:	00 0c       	add	r0, r0
   1b564:	aa 0b       	sbc	r26, r26
   1b566:	bb 0b       	sbc	r27, r27
   1b568:	bc 01       	movw	r22, r24
   1b56a:	cd 01       	movw	r24, r26
   1b56c:	68 0d       	add	r22, r8
   1b56e:	79 1d       	adc	r23, r9
   1b570:	8a 1d       	adc	r24, r10
   1b572:	9b 1d       	adc	r25, r11
   1b574:	61 11       	cpse	r22, r1
   1b576:	09 c0       	rjmp	.+18     	; 0x1b58a <lif_ascii_string_to_e010+0xf6>
   1b578:	21 c0       	rjmp	.+66     	; 0x1b5bc <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b57a:	02 15       	cp	r16, r2
   1b57c:	13 05       	cpc	r17, r3
   1b57e:	7c f7       	brge	.-34     	; 0x1b55e <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1b580:	0f 5f       	subi	r16, 0xFF	; 255
   1b582:	1f 4f       	sbci	r17, 0xFF	; 255
   1b584:	8d 93       	st	X+, r24
   1b586:	ef 01       	movw	r28, r30
   1b588:	e6 cf       	rjmp	.-52     	; 0x1b556 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1b58a:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <debuglevel>
   1b58e:	20 ff       	sbrs	r18, 0
   1b590:	33 c0       	rjmp	.+102    	; 0x1b5f8 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1b592:	20 e0       	ldi	r18, 0x00	; 0
   1b594:	31 e0       	ldi	r19, 0x01	; 1
   1b596:	40 e0       	ldi	r20, 0x00	; 0
   1b598:	50 e0       	ldi	r21, 0x00	; 0
   1b59a:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__divmodsi4>
   1b59e:	7f 93       	push	r23
   1b5a0:	6f 93       	push	r22
   1b5a2:	82 ed       	ldi	r24, 0xD2	; 210
   1b5a4:	98 e3       	ldi	r25, 0x38	; 56
   1b5a6:	1f 92       	push	r1
   1b5a8:	9f 93       	push	r25
   1b5aa:	8f 93       	push	r24
   1b5ac:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b5b0:	0f 90       	pop	r0
   1b5b2:	0f 90       	pop	r0
   1b5b4:	0f 90       	pop	r0
   1b5b6:	0f 90       	pop	r0
   1b5b8:	0f 90       	pop	r0
   1b5ba:	1e c0       	rjmp	.+60     	; 0x1b5f8 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1b5bc:	fe 01       	movw	r30, r28
   1b5be:	01 90       	ld	r0, Z+
   1b5c0:	00 20       	and	r0, r0
   1b5c2:	e9 f7       	brne	.-6      	; 0x1b5be <lif_ascii_string_to_e010+0x12a>
   1b5c4:	31 97       	sbiw	r30, 0x01	; 1
   1b5c6:	ec 1b       	sub	r30, r28
   1b5c8:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1b5ca:	d7 01       	movw	r26, r14
   1b5cc:	a0 0f       	add	r26, r16
   1b5ce:	b1 1f       	adc	r27, r17
   1b5d0:	8f e6       	ldi	r24, 0x6F	; 111
   1b5d2:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1b5d4:	11 96       	adiw	r26, 0x01	; 1
   1b5d6:	ec 93       	st	X, r30
   1b5d8:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1b5da:	12 96       	adiw	r26, 0x02	; 2
   1b5dc:	fc 93       	st	X, r31
   1b5de:	0d 5f       	subi	r16, 0xFD	; 253
   1b5e0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b5e2:	f7 01       	movw	r30, r14
   1b5e4:	e0 0f       	add	r30, r16
   1b5e6:	f1 1f       	adc	r31, r17
   1b5e8:	cf 01       	movw	r24, r30
   1b5ea:	8e 19       	sub	r24, r14
   1b5ec:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b5ee:	29 91       	ld	r18, Y+
   1b5f0:	22 23       	and	r18, r18
   1b5f2:	21 f0       	breq	.+8      	; 0x1b5fc <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b5f4:	21 93       	st	Z+, r18
   1b5f6:	f8 cf       	rjmp	.-16     	; 0x1b5e8 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1b5f8:	8f ef       	ldi	r24, 0xFF	; 255
   1b5fa:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1b5fc:	cd b7       	in	r28, 0x3d	; 61
   1b5fe:	de b7       	in	r29, 0x3e	; 62
   1b600:	e2 e1       	ldi	r30, 0x12	; 18
   1b602:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001b606 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1b606:	a6 e0       	ldi	r26, 0x06	; 6
   1b608:	b3 e0       	ldi	r27, 0x03	; 3
   1b60a:	e9 e0       	ldi	r30, 0x09	; 9
   1b60c:	fb ed       	ldi	r31, 0xDB	; 219
   1b60e:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1b612:	7c 01       	movw	r14, r24
   1b614:	4a 01       	movw	r8, r20
   1b616:	5b 01       	movw	r10, r22
   1b618:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1b61a:	6d e5       	ldi	r22, 0x5D	; 93
   1b61c:	78 e0       	ldi	r23, 0x08	; 8
   1b61e:	0e 94 65 c7 	call	0x18eca	; 0x18eca <lif_open>
   1b622:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1b624:	89 2b       	or	r24, r25
   1b626:	09 f4       	brne	.+2      	; 0x1b62a <lif_add_ascii_file_as_e010_wrapper+0x24>
   1b628:	6b c0       	rjmp	.+214    	; 0x1b700 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1b62a:	21 2c       	mov	r2, r1
   1b62c:	31 2c       	mov	r3, r1
   1b62e:	41 2c       	mov	r4, r1
   1b630:	51 2c       	mov	r5, r1
   1b632:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1b634:	85 ec       	ldi	r24, 0xC5	; 197
   1b636:	98 e3       	ldi	r25, 0x38	; 56
   1b638:	9c 01       	movw	r18, r24
   1b63a:	40 e0       	ldi	r20, 0x00	; 0
   1b63c:	cc 5f       	subi	r28, 0xFC	; 252
   1b63e:	dc 4f       	sbci	r29, 0xFC	; 252
   1b640:	28 83       	st	Y, r18
   1b642:	39 83       	std	Y+1, r19	; 0x01
   1b644:	4a 83       	std	Y+2, r20	; 0x02
   1b646:	c4 50       	subi	r28, 0x04	; 4
   1b648:	d3 40       	sbci	r29, 0x03	; 3
   1b64a:	1a c0       	rjmp	.+52     	; 0x1b680 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1b64c:	ce 5f       	subi	r28, 0xFE	; 254
   1b64e:	dc 4f       	sbci	r29, 0xFC	; 252
   1b650:	28 81       	ld	r18, Y
   1b652:	39 81       	ldd	r19, Y+1	; 0x01
   1b654:	c2 50       	subi	r28, 0x02	; 2
   1b656:	d3 40       	sbci	r29, 0x03	; 3
   1b658:	c9 01       	movw	r24, r18
   1b65a:	03 2e       	mov	r0, r19
   1b65c:	00 0c       	add	r0, r0
   1b65e:	aa 0b       	sbc	r26, r26
   1b660:	bb 0b       	sbc	r27, r27
   1b662:	88 0e       	add	r8, r24
   1b664:	99 1e       	adc	r9, r25
   1b666:	aa 1e       	adc	r10, r26
   1b668:	bb 1e       	adc	r11, r27
        bytes += size;
   1b66a:	48 0e       	add	r4, r24
   1b66c:	59 1e       	adc	r5, r25
   1b66e:	6a 1e       	adc	r6, r26
   1b670:	7b 1e       	adc	r7, r27
        count += size;
   1b672:	22 0e       	add	r2, r18
   1b674:	33 1e       	adc	r3, r19

        if(count > 256)
   1b676:	31 e0       	ldi	r19, 0x01	; 1
   1b678:	23 16       	cp	r2, r19
   1b67a:	33 06       	cpc	r3, r19
   1b67c:	0c f0       	brlt	.+2      	; 0x1b680 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1b67e:	45 c0       	rjmp	.+138    	; 0x1b70a <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1b680:	a6 01       	movw	r20, r12
   1b682:	6d ef       	ldi	r22, 0xFD	; 253
   1b684:	70 e0       	ldi	r23, 0x00	; 0
   1b686:	ce 01       	movw	r24, r28
   1b688:	8f 5f       	subi	r24, 0xFF	; 255
   1b68a:	9d 4f       	sbci	r25, 0xFD	; 253
   1b68c:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
   1b690:	89 2b       	or	r24, r25
   1b692:	09 f4       	brne	.+2      	; 0x1b696 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1b694:	58 c0       	rjmp	.+176    	; 0x1b746 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1b696:	ce 01       	movw	r24, r28
   1b698:	8f 5f       	subi	r24, 0xFF	; 255
   1b69a:	9d 4f       	sbci	r25, 0xFD	; 253
   1b69c:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1b6a0:	6c ee       	ldi	r22, 0xEC	; 236
   1b6a2:	75 e1       	ldi	r23, 0x15	; 21
   1b6a4:	ce 01       	movw	r24, r28
   1b6a6:	8f 5f       	subi	r24, 0xFF	; 255
   1b6a8:	9d 4f       	sbci	r25, 0xFD	; 253
   1b6aa:	0e 94 9f 30 	call	0x613e	; 0x613e <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1b6ae:	9e 01       	movw	r18, r28
   1b6b0:	2f 5f       	subi	r18, 0xFF	; 255
   1b6b2:	3f 4f       	sbci	r19, 0xFF	; 255
   1b6b4:	b5 01       	movw	r22, r10
   1b6b6:	a4 01       	movw	r20, r8
   1b6b8:	ce 01       	movw	r24, r28
   1b6ba:	8f 5f       	subi	r24, 0xFF	; 255
   1b6bc:	9d 4f       	sbci	r25, 0xFD	; 253
   1b6be:	ea de       	rcall	.-556    	; 0x1b494 <lif_ascii_string_to_e010>
   1b6c0:	ce 5f       	subi	r28, 0xFE	; 254
   1b6c2:	dc 4f       	sbci	r29, 0xFC	; 252
   1b6c4:	99 83       	std	Y+1, r25	; 0x01
   1b6c6:	88 83       	st	Y, r24
   1b6c8:	c2 50       	subi	r28, 0x02	; 2
   1b6ca:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1b6cc:	e1 14       	cp	r14, r1
   1b6ce:	f1 04       	cpc	r15, r1
   1b6d0:	09 f4       	brne	.+2      	; 0x1b6d4 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1b6d2:	bc cf       	rjmp	.-136    	; 0x1b64c <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1b6d4:	8c 01       	movw	r16, r24
   1b6d6:	a5 01       	movw	r20, r10
   1b6d8:	94 01       	movw	r18, r8
   1b6da:	be 01       	movw	r22, r28
   1b6dc:	6f 5f       	subi	r22, 0xFF	; 255
   1b6de:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6e0:	c7 01       	movw	r24, r14
   1b6e2:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
            if(len < size)
   1b6e6:	ce 5f       	subi	r28, 0xFE	; 254
   1b6e8:	dc 4f       	sbci	r29, 0xFC	; 252
   1b6ea:	08 81       	ld	r16, Y
   1b6ec:	19 81       	ldd	r17, Y+1	; 0x01
   1b6ee:	c2 50       	subi	r28, 0x02	; 2
   1b6f0:	d3 40       	sbci	r29, 0x03	; 3
   1b6f2:	80 17       	cp	r24, r16
   1b6f4:	91 07       	cpc	r25, r17
   1b6f6:	0c f0       	brlt	.+2      	; 0x1b6fa <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1b6f8:	a9 cf       	rjmp	.-174    	; 0x1b64c <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1b6fa:	c6 01       	movw	r24, r12
   1b6fc:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
                return(-1);
   1b700:	6f ef       	ldi	r22, 0xFF	; 255
   1b702:	7f ef       	ldi	r23, 0xFF	; 255
   1b704:	8f ef       	ldi	r24, 0xFF	; 255
   1b706:	9f ef       	ldi	r25, 0xFF	; 255
   1b708:	86 c0       	rjmp	.+268    	; 0x1b816 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1b70a:	e1 14       	cp	r14, r1
   1b70c:	f1 04       	cpc	r15, r1
   1b70e:	c1 f0       	breq	.+48     	; 0x1b740 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1b710:	7f 92       	push	r7
   1b712:	6f 92       	push	r6
   1b714:	5f 92       	push	r5
   1b716:	4f 92       	push	r4
   1b718:	1f 92       	push	r1
   1b71a:	cb 5f       	subi	r28, 0xFB	; 251
   1b71c:	dc 4f       	sbci	r29, 0xFC	; 252
   1b71e:	48 81       	ld	r20, Y
   1b720:	c5 50       	subi	r28, 0x05	; 5
   1b722:	d3 40       	sbci	r29, 0x03	; 3
   1b724:	4f 93       	push	r20
   1b726:	cc 5f       	subi	r28, 0xFC	; 252
   1b728:	dc 4f       	sbci	r29, 0xFC	; 252
   1b72a:	88 81       	ld	r24, Y
   1b72c:	c4 50       	subi	r28, 0x04	; 4
   1b72e:	d3 40       	sbci	r29, 0x03	; 3
   1b730:	8f 93       	push	r24
   1b732:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b736:	0f b6       	in	r0, 0x3f	; 63
   1b738:	f8 94       	cli
   1b73a:	de bf       	out	0x3e, r29	; 62
   1b73c:	0f be       	out	0x3f, r0	; 63
   1b73e:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1b740:	21 2c       	mov	r2, r1
   1b742:	31 2c       	mov	r3, r1
   1b744:	9d cf       	rjmp	.-198    	; 0x1b680 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1b746:	c6 01       	movw	r24, r12
   1b748:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>

    // Write EOF
    str[0] = 0;
   1b74c:	cf 5f       	subi	r28, 0xFF	; 255
   1b74e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b750:	18 82       	st	Y, r1
   1b752:	c1 50       	subi	r28, 0x01	; 1
   1b754:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1b756:	9e 01       	movw	r18, r28
   1b758:	2f 5f       	subi	r18, 0xFF	; 255
   1b75a:	3f 4f       	sbci	r19, 0xFF	; 255
   1b75c:	b5 01       	movw	r22, r10
   1b75e:	a4 01       	movw	r20, r8
   1b760:	ce 01       	movw	r24, r28
   1b762:	8f 5f       	subi	r24, 0xFF	; 255
   1b764:	9d 4f       	sbci	r25, 0xFD	; 253
   1b766:	96 de       	rcall	.-724    	; 0x1b494 <lif_ascii_string_to_e010>
   1b768:	6c 01       	movw	r12, r24

    if(LIF)
   1b76a:	e1 14       	cp	r14, r1
   1b76c:	f1 04       	cpc	r15, r1
   1b76e:	b9 f4       	brne	.+46     	; 0x1b79e <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1b770:	c6 01       	movw	r24, r12
   1b772:	dd 0c       	add	r13, r13
   1b774:	aa 0b       	sbc	r26, r26
   1b776:	bb 0b       	sbc	r27, r27
   1b778:	48 0e       	add	r4, r24
   1b77a:	59 1e       	adc	r5, r25
   1b77c:	6a 1e       	adc	r6, r26
   1b77e:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1b780:	88 0e       	add	r8, r24
   1b782:	99 1e       	adc	r9, r25
   1b784:	aa 1e       	adc	r10, r26
   1b786:	bb 1e       	adc	r11, r27
   1b788:	ae 01       	movw	r20, r28
   1b78a:	4f 5f       	subi	r20, 0xFF	; 255
   1b78c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b78e:	c5 01       	movw	r24, r10
   1b790:	b4 01       	movw	r22, r8
   1b792:	26 de       	rcall	.-948    	; 0x1b3e0 <lif_e010_pad_sector>
   1b794:	6c 01       	movw	r12, r24
    if(LIF)
   1b796:	e1 14       	cp	r14, r1
   1b798:	f1 04       	cpc	r15, r1
   1b79a:	f1 f4       	brne	.+60     	; 0x1b7d8 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1b79c:	3a c0       	rjmp	.+116    	; 0x1b812 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1b79e:	7f 92       	push	r7
   1b7a0:	6f 92       	push	r6
   1b7a2:	5f 92       	push	r5
   1b7a4:	4f 92       	push	r4
   1b7a6:	88 eb       	ldi	r24, 0xB8	; 184
   1b7a8:	98 e3       	ldi	r25, 0x38	; 56
   1b7aa:	1f 92       	push	r1
   1b7ac:	9f 93       	push	r25
   1b7ae:	8f 93       	push	r24
   1b7b0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1b7b4:	86 01       	movw	r16, r12
   1b7b6:	a5 01       	movw	r20, r10
   1b7b8:	94 01       	movw	r18, r8
   1b7ba:	be 01       	movw	r22, r28
   1b7bc:	6f 5f       	subi	r22, 0xFF	; 255
   1b7be:	7f 4f       	sbci	r23, 0xFF	; 255
   1b7c0:	c7 01       	movw	r24, r14
   1b7c2:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
        if(len < size)
   1b7c6:	0f b6       	in	r0, 0x3f	; 63
   1b7c8:	f8 94       	cli
   1b7ca:	de bf       	out	0x3e, r29	; 62
   1b7cc:	0f be       	out	0x3f, r0	; 63
   1b7ce:	cd bf       	out	0x3d, r28	; 61
   1b7d0:	8c 15       	cp	r24, r12
   1b7d2:	9d 05       	cpc	r25, r13
   1b7d4:	6c f6       	brge	.-102    	; 0x1b770 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1b7d6:	94 cf       	rjmp	.-216    	; 0x1b700 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1b7d8:	8c 01       	movw	r16, r24
   1b7da:	a5 01       	movw	r20, r10
   1b7dc:	94 01       	movw	r18, r8
   1b7de:	be 01       	movw	r22, r28
   1b7e0:	6f 5f       	subi	r22, 0xFF	; 255
   1b7e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b7e4:	c7 01       	movw	r24, r14
   1b7e6:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
        if(len < size)
   1b7ea:	8c 15       	cp	r24, r12
   1b7ec:	9d 05       	cpc	r25, r13
   1b7ee:	0c f4       	brge	.+2      	; 0x1b7f2 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1b7f0:	87 cf       	rjmp	.-242    	; 0x1b700 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1b7f2:	7f 92       	push	r7
   1b7f4:	6f 92       	push	r6
   1b7f6:	5f 92       	push	r5
   1b7f8:	4f 92       	push	r4
   1b7fa:	8b ea       	ldi	r24, 0xAB	; 171
   1b7fc:	98 e3       	ldi	r25, 0x38	; 56
   1b7fe:	1f 92       	push	r1
   1b800:	9f 93       	push	r25
   1b802:	8f 93       	push	r24
   1b804:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b808:	0f b6       	in	r0, 0x3f	; 63
   1b80a:	f8 94       	cli
   1b80c:	de bf       	out	0x3e, r29	; 62
   1b80e:	0f be       	out	0x3f, r0	; 63
   1b810:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1b812:	b2 01       	movw	r22, r4
   1b814:	c3 01       	movw	r24, r6
}
   1b816:	ca 5f       	subi	r28, 0xFA	; 250
   1b818:	dc 4f       	sbci	r29, 0xFC	; 252
   1b81a:	e2 e1       	ldi	r30, 0x12	; 18
   1b81c:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001b820 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1b820:	a2 e3       	ldi	r26, 0x32	; 50
   1b822:	b0 e0       	ldi	r27, 0x00	; 0
   1b824:	e6 e1       	ldi	r30, 0x16	; 22
   1b826:	fc ed       	ldi	r31, 0xDC	; 220
   1b828:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1b82c:	6c 01       	movw	r12, r24
   1b82e:	1b 01       	movw	r2, r22
   1b830:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1b832:	fc 01       	movw	r30, r24
   1b834:	80 81       	ld	r24, Z
   1b836:	81 11       	cpse	r24, r1
   1b838:	03 c0       	rjmp	.+6      	; 0x1b840 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b83a:	88 e7       	ldi	r24, 0x78	; 120
   1b83c:	98 e3       	ldi	r25, 0x38	; 56
   1b83e:	1a c0       	rjmp	.+52     	; 0x1b874 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b840:	fb 01       	movw	r30, r22
   1b842:	80 81       	ld	r24, Z
   1b844:	81 11       	cpse	r24, r1
   1b846:	03 c0       	rjmp	.+6      	; 0x1b84e <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b848:	8a e4       	ldi	r24, 0x4A	; 74
   1b84a:	98 e3       	ldi	r25, 0x38	; 56
   1b84c:	13 c0       	rjmp	.+38     	; 0x1b874 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b84e:	fa 01       	movw	r30, r20
   1b850:	80 81       	ld	r24, Z
   1b852:	81 11       	cpse	r24, r1
   1b854:	03 c0       	rjmp	.+6      	; 0x1b85c <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b856:	8b e1       	ldi	r24, 0x1B	; 27
   1b858:	98 e3       	ldi	r25, 0x38	; 56
   1b85a:	0c c0       	rjmp	.+24     	; 0x1b874 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b85c:	be 01       	movw	r22, r28
   1b85e:	6f 5f       	subi	r22, 0xFF	; 255
   1b860:	7f 4f       	sbci	r23, 0xFF	; 255
   1b862:	ca 01       	movw	r24, r20
   1b864:	0e 94 8d c7 	call	0x18f1a	; 0x18f1a <lif_stat>
   1b868:	9a ab       	std	Y+50, r25	; 0x32
   1b86a:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b86c:	89 2b       	or	r24, r25
   1b86e:	59 f4       	brne	.+22     	; 0x1b886 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b870:	8b ee       	ldi	r24, 0xEB	; 235
   1b872:	97 e3       	ldi	r25, 0x37	; 55
   1b874:	1f 92       	push	r1
   1b876:	9f 93       	push	r25
   1b878:	8f 93       	push	r24
   1b87a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1b87e:	0f 90       	pop	r0
   1b880:	0f 90       	pop	r0
   1b882:	0f 90       	pop	r0
   1b884:	fe c0       	rjmp	.+508    	; 0x1ba82 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b886:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b88a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1b88e:	92 ff       	sbrs	r25, 2
   1b890:	12 c0       	rjmp	.+36     	; 0x1b8b6 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b892:	ff 92       	push	r15
   1b894:	ef 92       	push	r14
   1b896:	3f 92       	push	r3
   1b898:	2f 92       	push	r2
   1b89a:	df 92       	push	r13
   1b89c:	cf 92       	push	r12
   1b89e:	8c eb       	ldi	r24, 0xBC	; 188
   1b8a0:	97 e3       	ldi	r25, 0x37	; 55
   1b8a2:	1f 92       	push	r1
   1b8a4:	9f 93       	push	r25
   1b8a6:	8f 93       	push	r24
   1b8a8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1b8ac:	0f b6       	in	r0, 0x3f	; 63
   1b8ae:	f8 94       	cli
   1b8b0:	de bf       	out	0x3e, r29	; 62
   1b8b2:	0f be       	out	0x3f, r0	; 63
   1b8b4:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b8b6:	97 01       	movw	r18, r14
   1b8b8:	40 e0       	ldi	r20, 0x00	; 0
   1b8ba:	50 e0       	ldi	r21, 0x00	; 0
   1b8bc:	ba 01       	movw	r22, r20
   1b8be:	80 e0       	ldi	r24, 0x00	; 0
   1b8c0:	90 e0       	ldi	r25, 0x00	; 0
   1b8c2:	a1 de       	rcall	.-702    	; 0x1b606 <lif_add_ascii_file_as_e010_wrapper>
   1b8c4:	4b 01       	movw	r8, r22
   1b8c6:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b8c8:	47 2e       	mov	r4, r23
   1b8ca:	58 2e       	mov	r5, r24
   1b8cc:	69 2e       	mov	r6, r25
   1b8ce:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b8d0:	66 23       	and	r22, r22
   1b8d2:	29 f0       	breq	.+10     	; 0x1b8de <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b8d4:	9f ef       	ldi	r25, 0xFF	; 255
   1b8d6:	49 1a       	sub	r4, r25
   1b8d8:	59 0a       	sbc	r5, r25
   1b8da:	69 0a       	sbc	r6, r25
   1b8dc:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b8de:	60 e6       	ldi	r22, 0x60	; 96
   1b8e0:	78 e0       	ldi	r23, 0x08	; 8
   1b8e2:	c6 01       	movw	r24, r12
   1b8e4:	b4 da       	rcall	.-2712   	; 0x1ae4e <lif_open_volume>
   1b8e6:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b8e8:	00 97       	sbiw	r24, 0x00	; 0
   1b8ea:	09 f4       	brne	.+2      	; 0x1b8ee <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b8ec:	ca c0       	rjmp	.+404    	; 0x1ba82 <lif_add_ascii_file_as_e010+0x262>
   1b8ee:	b3 01       	movw	r22, r6
   1b8f0:	a2 01       	movw	r20, r4
   1b8f2:	48 d9       	rcall	.-3440   	; 0x1ab84 <lif_newdir>
    if(index == -1)
   1b8f4:	3c 01       	movw	r6, r24
   1b8f6:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b8f8:	a1 f4       	brne	.+40     	; 0x1b922 <lif_add_ascii_file_as_e010+0x102>
   1b8fa:	ff 92       	push	r15
   1b8fc:	ef 92       	push	r14
   1b8fe:	df 92       	push	r13
   1b900:	cf 92       	push	r12
   1b902:	8c e8       	ldi	r24, 0x8C	; 140
   1b904:	97 e3       	ldi	r25, 0x37	; 55
   1b906:	1f 92       	push	r1
   1b908:	9f 93       	push	r25
   1b90a:	8f 93       	push	r24
   1b90c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b910:	c8 01       	movw	r24, r16
   1b912:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b916:	0f b6       	in	r0, 0x3f	; 63
   1b918:	f8 94       	cli
   1b91a:	de bf       	out	0x3e, r29	; 62
   1b91c:	0f be       	out	0x3f, r0	; 63
   1b91e:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b920:	b0 c0       	rjmp	.+352    	; 0x1ba82 <lif_add_ascii_file_as_e010+0x262>
   1b922:	68 01       	movw	r12, r16
   1b924:	9f e4       	ldi	r25, 0x4F	; 79
   1b926:	c9 0e       	add	r12, r25
   1b928:	d1 1c       	adc	r13, r1
   1b92a:	4a e0       	ldi	r20, 0x0A	; 10
   1b92c:	50 e0       	ldi	r21, 0x00	; 0
   1b92e:	b1 01       	movw	r22, r2
   1b930:	c6 01       	movw	r24, r12
   1b932:	0e 94 31 c9 	call	0x19262	; 0x19262 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b936:	80 e1       	ldi	r24, 0x10	; 16
   1b938:	90 ee       	ldi	r25, 0xE0	; 224
   1b93a:	f8 01       	movw	r30, r16
   1b93c:	e6 5a       	subi	r30, 0xA6	; 166
   1b93e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b940:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b942:	80 83       	st	Z, r24
   1b944:	e9 a9       	ldd	r30, Y+49	; 0x31
   1b946:	fa a9       	ldd	r31, Y+50	; 0x32
   1b948:	60 a5       	ldd	r22, Z+40	; 0x28
   1b94a:	71 a5       	ldd	r23, Z+41	; 0x29
   1b94c:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b94e:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b950:	a8 01       	movw	r20, r16
   1b952:	4c 59       	subi	r20, 0x9C	; 156
   1b954:	5f 4f       	sbci	r21, 0xFF	; 255
   1b956:	0e 94 76 cb 	call	0x196ec	; 0x196ec <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1b95a:	81 e0       	ldi	r24, 0x01	; 1
   1b95c:	90 e8       	ldi	r25, 0x80	; 128
   1b95e:	f8 01       	movw	r30, r16
   1b960:	e6 59       	subi	r30, 0x96	; 150
   1b962:	ff 4f       	sbci	r31, 0xFF	; 255
   1b964:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1b966:	80 83       	st	Z, r24
   1b968:	32 96       	adiw	r30, 0x02	; 2
   1b96a:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1b96c:	80 82       	st	Z, r8
   1b96e:	80 e0       	ldi	r24, 0x00	; 0
   1b970:	91 e0       	ldi	r25, 0x01	; 1
   1b972:	32 96       	adiw	r30, 0x02	; 2
   1b974:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b976:	80 83       	st	Z, r24
   1b978:	58 01       	movw	r10, r16
   1b97a:	fc e5       	ldi	r31, 0x5C	; 92
   1b97c:	af 0e       	add	r10, r31
   1b97e:	b1 1c       	adc	r11, r1
   1b980:	f5 01       	movw	r30, r10
   1b982:	80 81       	ld	r24, Z
   1b984:	91 81       	ldd	r25, Z+1	; 0x01
   1b986:	a2 81       	ldd	r26, Z+2	; 0x02
   1b988:	b3 81       	ldd	r27, Z+3	; 0x03
   1b98a:	22 24       	eor	r2, r2
   1b98c:	38 2e       	mov	r3, r24
   1b98e:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b990:	5a 2e       	mov	r5, r26
   1b992:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b996:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1b99a:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b99c:	05 c0       	rjmp	.+10     	; 0x1b9a8 <lif_add_ascii_file_as_e010+0x188>
   1b99e:	6e ee       	ldi	r22, 0xEE	; 238
   1b9a0:	75 e1       	ldi	r23, 0x15	; 21
   1b9a2:	c8 01       	movw	r24, r16
   1b9a4:	0e 94 62 cc 	call	0x198c4	; 0x198c4 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b9a8:	97 01       	movw	r18, r14
   1b9aa:	b2 01       	movw	r22, r4
   1b9ac:	a1 01       	movw	r20, r2
   1b9ae:	c8 01       	movw	r24, r16
   1b9b0:	2a de       	rcall	.-940    	; 0x1b606 <lif_add_ascii_file_as_e010_wrapper>
   1b9b2:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b9b4:	7c 01       	movw	r14, r24
   1b9b6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1b9ba:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1b9be:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b9c0:	40 c0       	rjmp	.+128    	; 0x1ba42 <lif_add_ascii_file_as_e010+0x222>
   1b9c2:	85 e6       	ldi	r24, 0x65	; 101
   1b9c4:	97 e3       	ldi	r25, 0x37	; 55
   1b9c6:	1f 92       	push	r1
   1b9c8:	9f 93       	push	r25
   1b9ca:	8f 93       	push	r24
   1b9cc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b9d0:	df 92       	push	r13
   1b9d2:	cf 92       	push	r12
   1b9d4:	8e e4       	ldi	r24, 0x4E	; 78
   1b9d6:	97 e3       	ldi	r25, 0x37	; 55
   1b9d8:	1f 92       	push	r1
   1b9da:	9f 93       	push	r25
   1b9dc:	8f 93       	push	r24
   1b9de:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b9e2:	7f 92       	push	r7
   1b9e4:	6f 92       	push	r6
   1b9e6:	87 e3       	ldi	r24, 0x37	; 55
   1b9e8:	97 e3       	ldi	r25, 0x37	; 55
   1b9ea:	1f 92       	push	r1
   1b9ec:	9f 93       	push	r25
   1b9ee:	8f 93       	push	r24
   1b9f0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b9f4:	f5 01       	movw	r30, r10
   1b9f6:	83 81       	ldd	r24, Z+3	; 0x03
   1b9f8:	8f 93       	push	r24
   1b9fa:	82 81       	ldd	r24, Z+2	; 0x02
   1b9fc:	8f 93       	push	r24
   1b9fe:	81 81       	ldd	r24, Z+1	; 0x01
   1ba00:	8f 93       	push	r24
   1ba02:	80 81       	ld	r24, Z
   1ba04:	8f 93       	push	r24
   1ba06:	8e e1       	ldi	r24, 0x1E	; 30
   1ba08:	97 e3       	ldi	r25, 0x37	; 55
   1ba0a:	1f 92       	push	r1
   1ba0c:	9f 93       	push	r25
   1ba0e:	8f 93       	push	r24
   1ba10:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1ba14:	f8 01       	movw	r30, r16
   1ba16:	e0 5a       	subi	r30, 0xA0	; 160
   1ba18:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba1a:	83 81       	ldd	r24, Z+3	; 0x03
   1ba1c:	8f 93       	push	r24
   1ba1e:	82 81       	ldd	r24, Z+2	; 0x02
   1ba20:	8f 93       	push	r24
   1ba22:	81 81       	ldd	r24, Z+1	; 0x01
   1ba24:	8f 93       	push	r24
   1ba26:	80 81       	ld	r24, Z
   1ba28:	8f 93       	push	r24
   1ba2a:	85 e0       	ldi	r24, 0x05	; 5
   1ba2c:	97 e3       	ldi	r25, 0x37	; 55
   1ba2e:	1f 92       	push	r1
   1ba30:	9f 93       	push	r25
   1ba32:	8f 93       	push	r24
   1ba34:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1ba38:	0f b6       	in	r0, 0x3f	; 63
   1ba3a:	f8 94       	cli
   1ba3c:	de bf       	out	0x3e, r29	; 62
   1ba3e:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1ba40:	cd bf       	out	0x3d, r28	; 61
   1ba42:	b3 01       	movw	r22, r6
   1ba44:	c8 01       	movw	r24, r16
   1ba46:	0e 94 6d d1 	call	0x1a2da	; 0x1a2da <lif_writedirindex>
   1ba4a:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba4c:	21 f4       	brne	.+8      	; 0x1ba56 <lif_add_ascii_file_as_e010+0x236>
   1ba4e:	c8 01       	movw	r24, r16
   1ba50:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1ba54:	16 c0       	rjmp	.+44     	; 0x1ba82 <lif_add_ascii_file_as_e010+0x262>
   1ba56:	c8 01       	movw	r24, r16
   1ba58:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1ba5c:	ff 92       	push	r15
   1ba5e:	ef 92       	push	r14
   1ba60:	9f 92       	push	r9
   1ba62:	8f 92       	push	r8
   1ba64:	88 ef       	ldi	r24, 0xF8	; 248
   1ba66:	96 e3       	ldi	r25, 0x36	; 54
   1ba68:	1f 92       	push	r1
   1ba6a:	9f 93       	push	r25
   1ba6c:	8f 93       	push	r24
   1ba6e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    // Return file size
    return(bytes);
   1ba72:	0f b6       	in	r0, 0x3f	; 63
   1ba74:	f8 94       	cli
   1ba76:	de bf       	out	0x3e, r29	; 62
   1ba78:	0f be       	out	0x3f, r0	; 63
   1ba7a:	cd bf       	out	0x3d, r28	; 61
   1ba7c:	b4 01       	movw	r22, r8
   1ba7e:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1ba80:	04 c0       	rjmp	.+8      	; 0x1ba8a <lif_add_ascii_file_as_e010+0x26a>
   1ba82:	6f ef       	ldi	r22, 0xFF	; 255
   1ba84:	7f ef       	ldi	r23, 0xFF	; 255
   1ba86:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1ba88:	9f ef       	ldi	r25, 0xFF	; 255
   1ba8a:	e2 96       	adiw	r28, 0x32	; 50
   1ba8c:	e2 e1       	ldi	r30, 0x12	; 18
   1ba8e:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001ba92 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1ba92:	ac e2       	ldi	r26, 0x2C	; 44
   1ba94:	b2 e0       	ldi	r27, 0x02	; 2
   1ba96:	ef e4       	ldi	r30, 0x4F	; 79
   1ba98:	fd ed       	ldi	r31, 0xDD	; 221
   1ba9a:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1ba9e:	f8 2e       	mov	r15, r24
   1baa0:	b9 2e       	mov	r11, r25
   1baa2:	16 2f       	mov	r17, r22
   1baa4:	07 2f       	mov	r16, r23
   1baa6:	c4 5e       	subi	r28, 0xE4	; 228
   1baa8:	dd 4f       	sbci	r29, 0xFD	; 253
   1baaa:	48 83       	st	Y, r20
   1baac:	cc 51       	subi	r28, 0x1C	; 28
   1baae:	d2 40       	sbci	r29, 0x02	; 2
   1bab0:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1bab2:	68 e1       	ldi	r22, 0x18	; 24
   1bab4:	77 e0       	ldi	r23, 0x07	; 7
   1bab6:	cb d9       	rcall	.-3178   	; 0x1ae4e <lif_open_volume>
   1bab8:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1baba:	00 97       	sbiw	r24, 0x00	; 0
   1babc:	51 f4       	brne	.+20     	; 0x1bad2 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1babe:	bf 92       	push	r11
   1bac0:	ff 92       	push	r15
   1bac2:	80 ee       	ldi	r24, 0xE0	; 224
   1bac4:	96 e3       	ldi	r25, 0x36	; 54
   1bac6:	1f 92       	push	r1
   1bac8:	9f 93       	push	r25
   1baca:	8f 93       	push	r24
   1bacc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1bad0:	11 c0       	rjmp	.+34     	; 0x1baf4 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1bad2:	61 2f       	mov	r22, r17
   1bad4:	70 2f       	mov	r23, r16
   1bad6:	20 dc       	rcall	.-1984   	; 0x1b318 <lif_find_file>
    if(index == -1)
   1bad8:	01 96       	adiw	r24, 0x01	; 1
   1bada:	a1 f4       	brne	.+40     	; 0x1bb04 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1badc:	0f 93       	push	r16
   1bade:	1f 93       	push	r17
   1bae0:	89 ec       	ldi	r24, 0xC9	; 201
   1bae2:	96 e3       	ldi	r25, 0x36	; 54
   1bae4:	1f 92       	push	r1
   1bae6:	9f 93       	push	r25
   1bae8:	8f 93       	push	r24
   1baea:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baee:	c6 01       	movw	r24, r12
   1baf0:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1baf4:	0f 90       	pop	r0
   1baf6:	0f 90       	pop	r0
   1baf8:	0f 90       	pop	r0
   1bafa:	0f 90       	pop	r0
   1bafc:	0f 90       	pop	r0
   1bafe:	80 e0       	ldi	r24, 0x00	; 0
   1bb00:	90 e0       	ldi	r25, 0x00	; 0
   1bb02:	ae c2       	rjmp	.+1372   	; 0x1c060 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1bb04:	f6 01       	movw	r30, r12
   1bb06:	e6 5a       	subi	r30, 0xA6	; 166
   1bb08:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb0a:	80 81       	ld	r24, Z
   1bb0c:	91 81       	ldd	r25, Z+1	; 0x01
   1bb0e:	9c 01       	movw	r18, r24
   1bb10:	2c 7f       	andi	r18, 0xFC	; 252
   1bb12:	20 31       	cpi	r18, 0x10	; 16
   1bb14:	30 4e       	sbci	r19, 0xE0	; 224
   1bb16:	c9 f0       	breq	.+50     	; 0x1bb4a <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1bb18:	9f 93       	push	r25
   1bb1a:	8f 93       	push	r24
   1bb1c:	ef 92       	push	r14
   1bb1e:	c4 5e       	subi	r28, 0xE4	; 228
   1bb20:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb22:	58 81       	ld	r21, Y
   1bb24:	cc 51       	subi	r28, 0x1C	; 28
   1bb26:	d2 40       	sbci	r29, 0x02	; 2
   1bb28:	5f 93       	push	r21
   1bb2a:	81 e9       	ldi	r24, 0x91	; 145
   1bb2c:	96 e3       	ldi	r25, 0x36	; 54
   1bb2e:	1f 92       	push	r1
   1bb30:	9f 93       	push	r25
   1bb32:	8f 93       	push	r24
   1bb34:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb38:	c6 01       	movw	r24, r12
   1bb3a:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1bb3e:	0f b6       	in	r0, 0x3f	; 63
   1bb40:	f8 94       	cli
   1bb42:	de bf       	out	0x3e, r29	; 62
   1bb44:	0f be       	out	0x3f, r0	; 63
   1bb46:	cd bf       	out	0x3d, r28	; 61
   1bb48:	da cf       	rjmp	.-76     	; 0x1bafe <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1bb4a:	f6 01       	movw	r30, r12
   1bb4c:	e4 5a       	subi	r30, 0xA4	; 164
   1bb4e:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb50:	80 80       	ld	r8, Z
   1bb52:	91 80       	ldd	r9, Z+1	; 0x01
   1bb54:	a2 80       	ldd	r10, Z+2	; 0x02
   1bb56:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1bb58:	34 96       	adiw	r30, 0x04	; 4
   1bb5a:	80 81       	ld	r24, Z
   1bb5c:	91 81       	ldd	r25, Z+1	; 0x01
   1bb5e:	a2 81       	ldd	r26, Z+2	; 0x02
   1bb60:	b3 81       	ldd	r27, Z+3	; 0x03
   1bb62:	a5 01       	movw	r20, r10
   1bb64:	94 01       	movw	r18, r8
   1bb66:	28 0f       	add	r18, r24
   1bb68:	39 1f       	adc	r19, r25
   1bb6a:	4a 1f       	adc	r20, r26
   1bb6c:	5b 1f       	adc	r21, r27
   1bb6e:	c9 5d       	subi	r28, 0xD9	; 217
   1bb70:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb72:	28 83       	st	Y, r18
   1bb74:	39 83       	std	Y+1, r19	; 0x01
   1bb76:	4a 83       	std	Y+2, r20	; 0x02
   1bb78:	5b 83       	std	Y+3, r21	; 0x03
   1bb7a:	c7 52       	subi	r28, 0x27	; 39
   1bb7c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1bb7e:	c6 01       	movw	r24, r12
   1bb80:	8c 59       	subi	r24, 0x9C	; 156
   1bb82:	9f 4f       	sbci	r25, 0xFF	; 255
   1bb84:	0e 94 b8 cb 	call	0x19770	; 0x19770 <lif_lifbcd2time>
   1bb88:	c3 5e       	subi	r28, 0xE3	; 227
   1bb8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb8c:	68 83       	st	Y, r22
   1bb8e:	79 83       	std	Y+1, r23	; 0x01
   1bb90:	8a 83       	std	Y+2, r24	; 0x02
   1bb92:	9b 83       	std	Y+3, r25	; 0x03
   1bb94:	cd 51       	subi	r28, 0x1D	; 29
   1bb96:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1bb98:	ba 2d       	mov	r27, r10
   1bb9a:	a9 2d       	mov	r26, r9
   1bb9c:	98 2d       	mov	r25, r8
   1bb9e:	88 27       	eor	r24, r24
   1bba0:	cf 5e       	subi	r28, 0xEF	; 239
   1bba2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bba4:	88 83       	st	Y, r24
   1bba6:	99 83       	std	Y+1, r25	; 0x01
   1bba8:	aa 83       	std	Y+2, r26	; 0x02
   1bbaa:	bb 83       	std	Y+3, r27	; 0x03
   1bbac:	c1 51       	subi	r28, 0x11	; 17
   1bbae:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1bbb0:	6b e6       	ldi	r22, 0x6B	; 107
   1bbb2:	78 e0       	ldi	r23, 0x08	; 8
   1bbb4:	c4 5e       	subi	r28, 0xE4	; 228
   1bbb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbb8:	88 81       	ld	r24, Y
   1bbba:	cc 51       	subi	r28, 0x1C	; 28
   1bbbc:	d2 40       	sbci	r29, 0x02	; 2
   1bbbe:	9e 2d       	mov	r25, r14
   1bbc0:	0e 94 65 c7 	call	0x18eca	; 0x18eca <lif_open>
   1bbc4:	c6 5e       	subi	r28, 0xE6	; 230
   1bbc6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbc8:	99 83       	std	Y+1, r25	; 0x01
   1bbca:	88 83       	st	Y, r24
   1bbcc:	ca 51       	subi	r28, 0x1A	; 26
   1bbce:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1bbd0:	89 2b       	or	r24, r25
   1bbd2:	21 f4       	brne	.+8      	; 0x1bbdc <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbd4:	c6 01       	movw	r24, r12
   1bbd6:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1bbda:	91 cf       	rjmp	.-222    	; 0x1bafe <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1bbdc:	ef 92       	push	r14
   1bbde:	c4 5e       	subi	r28, 0xE4	; 228
   1bbe0:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbe2:	98 81       	ld	r25, Y
   1bbe4:	cc 51       	subi	r28, 0x1C	; 28
   1bbe6:	d2 40       	sbci	r29, 0x02	; 2
   1bbe8:	9f 93       	push	r25
   1bbea:	81 e8       	ldi	r24, 0x81	; 129
   1bbec:	96 e3       	ldi	r25, 0x36	; 54
   1bbee:	1f 92       	push	r1
   1bbf0:	9f 93       	push	r25
   1bbf2:	8f 93       	push	r24
   1bbf4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bbf8:	0f 90       	pop	r0
   1bbfa:	0f 90       	pop	r0
   1bbfc:	0f 90       	pop	r0
   1bbfe:	0f 90       	pop	r0
   1bc00:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1bc02:	81 2c       	mov	r8, r1
   1bc04:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1bc06:	c8 5e       	subi	r28, 0xE8	; 232
   1bc08:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc0a:	19 82       	std	Y+1, r1	; 0x01
   1bc0c:	18 82       	st	Y, r1
   1bc0e:	c8 51       	subi	r28, 0x18	; 24
   1bc10:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1bc12:	a1 e0       	ldi	r26, 0x01	; 1
   1bc14:	cb 5e       	subi	r28, 0xEB	; 235
   1bc16:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc18:	a8 83       	st	Y, r26
   1bc1a:	c5 51       	subi	r28, 0x15	; 21
   1bc1c:	d2 40       	sbci	r29, 0x02	; 2
   1bc1e:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1bc20:	41 2c       	mov	r4, r1
   1bc22:	51 2c       	mov	r5, r1
   1bc24:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1bc26:	81 ec       	ldi	r24, 0xC1	; 193
   1bc28:	95 e3       	ldi	r25, 0x35	; 53
   1bc2a:	9c 01       	movw	r18, r24
   1bc2c:	40 e0       	ldi	r20, 0x00	; 0
   1bc2e:	cf 5d       	subi	r28, 0xDF	; 223
   1bc30:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc32:	28 83       	st	Y, r18
   1bc34:	39 83       	std	Y+1, r19	; 0x01
   1bc36:	4a 83       	std	Y+2, r20	; 0x02
   1bc38:	c1 52       	subi	r28, 0x21	; 33
   1bc3a:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bc3c:	8e ec       	ldi	r24, 0xCE	; 206
   1bc3e:	95 e3       	ldi	r25, 0x35	; 53
   1bc40:	9c 01       	movw	r18, r24
   1bc42:	40 e0       	ldi	r20, 0x00	; 0
   1bc44:	cc 5d       	subi	r28, 0xDC	; 220
   1bc46:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc48:	28 83       	st	Y, r18
   1bc4a:	39 83       	std	Y+1, r19	; 0x01
   1bc4c:	4a 83       	std	Y+2, r20	; 0x02
   1bc4e:	c4 52       	subi	r28, 0x24	; 36
   1bc50:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bc52:	cf 5e       	subi	r28, 0xEF	; 239
   1bc54:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc56:	28 81       	ld	r18, Y
   1bc58:	39 81       	ldd	r19, Y+1	; 0x01
   1bc5a:	4a 81       	ldd	r20, Y+2	; 0x02
   1bc5c:	5b 81       	ldd	r21, Y+3	; 0x03
   1bc5e:	c1 51       	subi	r28, 0x11	; 17
   1bc60:	d2 40       	sbci	r29, 0x02	; 2
   1bc62:	bb 27       	eor	r27, r27
   1bc64:	a5 2f       	mov	r26, r21
   1bc66:	94 2f       	mov	r25, r20
   1bc68:	83 2f       	mov	r24, r19
   1bc6a:	c9 5d       	subi	r28, 0xD9	; 217
   1bc6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc6e:	28 81       	ld	r18, Y
   1bc70:	39 81       	ldd	r19, Y+1	; 0x01
   1bc72:	4a 81       	ldd	r20, Y+2	; 0x02
   1bc74:	5b 81       	ldd	r21, Y+3	; 0x03
   1bc76:	c7 52       	subi	r28, 0x27	; 39
   1bc78:	d2 40       	sbci	r29, 0x02	; 2
   1bc7a:	28 17       	cp	r18, r24
   1bc7c:	39 07       	cpc	r19, r25
   1bc7e:	4a 07       	cpc	r20, r26
   1bc80:	5b 07       	cpc	r21, r27
   1bc82:	08 f4       	brcc	.+2      	; 0x1bc86 <lif_extract_e010_as_ascii+0x1f4>
   1bc84:	76 c1       	rjmp	.+748    	; 0x1bf72 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bc86:	00 e0       	ldi	r16, 0x00	; 0
   1bc88:	11 e0       	ldi	r17, 0x01	; 1
   1bc8a:	cf 5e       	subi	r28, 0xEF	; 239
   1bc8c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc8e:	28 81       	ld	r18, Y
   1bc90:	39 81       	ldd	r19, Y+1	; 0x01
   1bc92:	4a 81       	ldd	r20, Y+2	; 0x02
   1bc94:	5b 81       	ldd	r21, Y+3	; 0x03
   1bc96:	c1 51       	subi	r28, 0x11	; 17
   1bc98:	d2 40       	sbci	r29, 0x02	; 2
   1bc9a:	be 01       	movw	r22, r28
   1bc9c:	6b 5f       	subi	r22, 0xFB	; 251
   1bc9e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bca0:	c6 01       	movw	r24, r12
   1bca2:	0e 94 eb c7 	call	0x18fd6	; 0x18fd6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bca6:	6f 3f       	cpi	r22, 0xFF	; 255
   1bca8:	71 05       	cpc	r23, r1
   1bcaa:	09 f0       	breq	.+2      	; 0x1bcae <lif_extract_e010_as_ascii+0x21c>
   1bcac:	0c f4       	brge	.+2      	; 0x1bcb0 <lif_extract_e010_as_ascii+0x21e>
   1bcae:	5b c1       	rjmp	.+694    	; 0x1bf66 <lif_extract_e010_as_ascii+0x4d4>
   1bcb0:	00 e0       	ldi	r16, 0x00	; 0
   1bcb2:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bcb4:	c8 5e       	subi	r28, 0xE8	; 232
   1bcb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcb8:	a8 81       	ld	r26, Y
   1bcba:	b9 81       	ldd	r27, Y+1	; 0x01
   1bcbc:	c8 51       	subi	r28, 0x18	; 24
   1bcbe:	d2 40       	sbci	r29, 0x02	; 2
   1bcc0:	ab 2b       	or	r26, r27
   1bcc2:	09 f0       	breq	.+2      	; 0x1bcc6 <lif_extract_e010_as_ascii+0x234>
   1bcc4:	3c c1       	rjmp	.+632    	; 0x1bf3e <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1bcc6:	e5 e0       	ldi	r30, 0x05	; 5
   1bcc8:	f1 e0       	ldi	r31, 0x01	; 1
   1bcca:	ec 0f       	add	r30, r28
   1bccc:	fd 1f       	adc	r31, r29
   1bcce:	e0 0f       	add	r30, r16
   1bcd0:	f1 1f       	adc	r31, r17
   1bcd2:	80 81       	ld	r24, Z
   1bcd4:	98 2f       	mov	r25, r24
   1bcd6:	9f 7e       	andi	r25, 0xEF	; 239
   1bcd8:	9f 3c       	cpi	r25, 0xCF	; 207
   1bcda:	11 f0       	breq	.+4      	; 0x1bce0 <lif_extract_e010_as_ascii+0x24e>
   1bcdc:	8f 36       	cpi	r24, 0x6F	; 111
   1bcde:	d9 f5       	brne	.+118    	; 0x1bd56 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1bce0:	e5 e0       	ldi	r30, 0x05	; 5
   1bce2:	f1 e0       	ldi	r31, 0x01	; 1
   1bce4:	ec 0f       	add	r30, r28
   1bce6:	fd 1f       	adc	r31, r29
   1bce8:	e0 0f       	add	r30, r16
   1bcea:	f1 1f       	adc	r31, r17
   1bcec:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1bcee:	f8 01       	movw	r30, r16
   1bcf0:	32 96       	adiw	r30, 0x02	; 2
   1bcf2:	45 e0       	ldi	r20, 0x05	; 5
   1bcf4:	51 e0       	ldi	r21, 0x01	; 1
   1bcf6:	4c 0f       	add	r20, r28
   1bcf8:	5d 1f       	adc	r21, r29
   1bcfa:	e4 0f       	add	r30, r20
   1bcfc:	f5 1f       	adc	r31, r21
   1bcfe:	0d 5f       	subi	r16, 0xFD	; 253
   1bd00:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd02:	80 81       	ld	r24, Z
   1bd04:	31 2c       	mov	r3, r1
   1bd06:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1bd08:	21 14       	cp	r2, r1
   1bd0a:	31 04       	cpc	r3, r1
   1bd0c:	09 f4       	brne	.+2      	; 0x1bd10 <lif_extract_e010_as_ascii+0x27e>
   1bd0e:	0f c1       	rjmp	.+542    	; 0x1bf2e <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1bd10:	5f ef       	ldi	r21, 0xFF	; 255
   1bd12:	25 16       	cp	r2, r21
   1bd14:	31 04       	cpc	r3, r1
   1bd16:	09 f0       	breq	.+2      	; 0x1bd1a <lif_extract_e010_as_ascii+0x288>
   1bd18:	7c f4       	brge	.+30     	; 0x1bd38 <lif_extract_e010_as_ascii+0x2a6>
   1bd1a:	ca 5e       	subi	r28, 0xEA	; 234
   1bd1c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd1e:	19 82       	std	Y+1, r1	; 0x01
   1bd20:	18 82       	st	Y, r1
   1bd22:	c6 51       	subi	r28, 0x16	; 22
   1bd24:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1bd26:	c1 01       	movw	r24, r2
   1bd28:	01 97       	sbiw	r24, 0x01	; 1
   1bd2a:	c5 5d       	subi	r28, 0xD5	; 213
   1bd2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd2e:	99 83       	std	Y+1, r25	; 0x01
   1bd30:	88 83       	st	Y, r24
   1bd32:	cb 52       	subi	r28, 0x2B	; 43
   1bd34:	d2 40       	sbci	r29, 0x02	; 2
   1bd36:	7b c0       	rjmp	.+246    	; 0x1be2e <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1bd38:	3f 92       	push	r3
   1bd3a:	2f 92       	push	r2
   1bd3c:	8c e4       	ldi	r24, 0x4C	; 76
   1bd3e:	96 e3       	ldi	r25, 0x36	; 54
   1bd40:	1f 92       	push	r1
   1bd42:	9f 93       	push	r25
   1bd44:	8f 93       	push	r24
   1bd46:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1bd4a:	0f 90       	pop	r0
   1bd4c:	0f 90       	pop	r0
   1bd4e:	0f 90       	pop	r0
   1bd50:	0f 90       	pop	r0
   1bd52:	0f 90       	pop	r0
   1bd54:	2b c0       	rjmp	.+86     	; 0x1bdac <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1bd56:	8f 3e       	cpi	r24, 0xEF	; 239
   1bd58:	09 f4       	brne	.+2      	; 0x1bd5c <lif_extract_e010_as_ascii+0x2ca>
   1bd5a:	f1 c0       	rjmp	.+482    	; 0x1bf3e <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1bd5c:	1f 93       	push	r17
   1bd5e:	0f 93       	push	r16
   1bd60:	cc 5e       	subi	r28, 0xEC	; 236
   1bd62:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd64:	b8 81       	ld	r27, Y
   1bd66:	c4 51       	subi	r28, 0x14	; 20
   1bd68:	d2 40       	sbci	r29, 0x02	; 2
   1bd6a:	bf 93       	push	r27
   1bd6c:	cd 5e       	subi	r28, 0xED	; 237
   1bd6e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd70:	28 81       	ld	r18, Y
   1bd72:	c3 51       	subi	r28, 0x13	; 19
   1bd74:	d2 40       	sbci	r29, 0x02	; 2
   1bd76:	2f 93       	push	r18
   1bd78:	ce 5e       	subi	r28, 0xEE	; 238
   1bd7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd7c:	38 81       	ld	r19, Y
   1bd7e:	c2 51       	subi	r28, 0x12	; 18
   1bd80:	d2 40       	sbci	r29, 0x02	; 2
   1bd82:	3f 93       	push	r19
   1bd84:	cf 5e       	subi	r28, 0xEF	; 239
   1bd86:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd88:	48 81       	ld	r20, Y
   1bd8a:	c1 51       	subi	r28, 0x11	; 17
   1bd8c:	d2 40       	sbci	r29, 0x02	; 2
   1bd8e:	4f 93       	push	r20
   1bd90:	1f 92       	push	r1
   1bd92:	8f 93       	push	r24
   1bd94:	86 ef       	ldi	r24, 0xF6	; 246
   1bd96:	95 e3       	ldi	r25, 0x35	; 53
   1bd98:	1f 92       	push	r1
   1bd9a:	9f 93       	push	r25
   1bd9c:	8f 93       	push	r24
   1bd9e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                status = 0;
                done = 1;
                break;
   1bda2:	0f b6       	in	r0, 0x3f	; 63
   1bda4:	f8 94       	cli
   1bda6:	de bf       	out	0x3e, r29	; 62
   1bda8:	0f be       	out	0x3f, r0	; 63
   1bdaa:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1bdac:	a1 e0       	ldi	r26, 0x01	; 1
   1bdae:	b0 e0       	ldi	r27, 0x00	; 0
   1bdb0:	c8 5e       	subi	r28, 0xE8	; 232
   1bdb2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdb4:	b9 83       	std	Y+1, r27	; 0x01
   1bdb6:	a8 83       	st	Y, r26
   1bdb8:	c8 51       	subi	r28, 0x18	; 24
   1bdba:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1bdbc:	cb 5e       	subi	r28, 0xEB	; 235
   1bdbe:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdc0:	18 82       	st	Y, r1
   1bdc2:	c5 51       	subi	r28, 0x15	; 21
   1bdc4:	d2 40       	sbci	r29, 0x02	; 2
   1bdc6:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1bdc8:	ba c0       	rjmp	.+372    	; 0x1bf3e <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1bdca:	0f 3f       	cpi	r16, 0xFF	; 255
   1bdcc:	11 05       	cpc	r17, r1
   1bdce:	11 f0       	breq	.+4      	; 0x1bdd4 <lif_extract_e010_as_ascii+0x342>
   1bdd0:	0c f0       	brlt	.+2      	; 0x1bdd4 <lif_extract_e010_as_ascii+0x342>
   1bdd2:	b5 c0       	rjmp	.+362    	; 0x1bf3e <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1bdd4:	e5 e0       	ldi	r30, 0x05	; 5
   1bdd6:	f1 e0       	ldi	r31, 0x01	; 1
   1bdd8:	ec 0f       	add	r30, r28
   1bdda:	fd 1f       	adc	r31, r29
   1bddc:	e0 0f       	add	r30, r16
   1bdde:	f1 1f       	adc	r31, r17
   1bde0:	20 81       	ld	r18, Z
   1bde2:	a4 01       	movw	r20, r8
   1bde4:	4f 5f       	subi	r20, 0xFF	; 255
   1bde6:	5f 4f       	sbci	r21, 0xFF	; 255
   1bde8:	5a 01       	movw	r10, r20
   1bdea:	2d 30       	cpi	r18, 0x0D	; 13
   1bdec:	51 f1       	breq	.+84     	; 0x1be42 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bdee:	9a 2d       	mov	r25, r10
   1bdf0:	8b 2d       	mov	r24, r11
   1bdf2:	0f 5f       	subi	r16, 0xFF	; 255
   1bdf4:	1f 4f       	sbci	r17, 0xFF	; 255
   1bdf6:	e1 e0       	ldi	r30, 0x01	; 1
   1bdf8:	f0 e0       	ldi	r31, 0x00	; 0
   1bdfa:	ec 0f       	add	r30, r28
   1bdfc:	fd 1f       	adc	r31, r29
   1bdfe:	e8 0d       	add	r30, r8
   1be00:	f9 1d       	adc	r31, r9
   1be02:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1be04:	2f ef       	ldi	r18, 0xFF	; 255
   1be06:	a2 16       	cp	r10, r18
   1be08:	b1 04       	cpc	r11, r1
   1be0a:	09 f0       	breq	.+2      	; 0x1be0e <lif_extract_e010_as_ascii+0x37c>
   1be0c:	ac f5       	brge	.+106    	; 0x1be78 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1be0e:	ca 5e       	subi	r28, 0xEA	; 234
   1be10:	dd 4f       	sbci	r29, 0xFD	; 253
   1be12:	48 81       	ld	r20, Y
   1be14:	59 81       	ldd	r21, Y+1	; 0x01
   1be16:	c6 51       	subi	r28, 0x16	; 22
   1be18:	d2 40       	sbci	r29, 0x02	; 2
   1be1a:	4f 5f       	subi	r20, 0xFF	; 255
   1be1c:	5f 4f       	sbci	r21, 0xFF	; 255
   1be1e:	ca 5e       	subi	r28, 0xEA	; 234
   1be20:	dd 4f       	sbci	r29, 0xFD	; 253
   1be22:	59 83       	std	Y+1, r21	; 0x01
   1be24:	48 83       	st	Y, r20
   1be26:	c6 51       	subi	r28, 0x16	; 22
   1be28:	d2 40       	sbci	r29, 0x02	; 2
   1be2a:	89 2e       	mov	r8, r25
   1be2c:	98 2e       	mov	r9, r24
   1be2e:	ca 5e       	subi	r28, 0xEA	; 234
   1be30:	dd 4f       	sbci	r29, 0xFD	; 253
   1be32:	88 81       	ld	r24, Y
   1be34:	99 81       	ldd	r25, Y+1	; 0x01
   1be36:	c6 51       	subi	r28, 0x16	; 22
   1be38:	d2 40       	sbci	r29, 0x02	; 2
   1be3a:	82 15       	cp	r24, r2
   1be3c:	93 05       	cpc	r25, r3
   1be3e:	2c f2       	brlt	.-118    	; 0x1bdca <lif_extract_e010_as_ascii+0x338>
   1be40:	70 c0       	rjmp	.+224    	; 0x1bf22 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1be42:	ca 5e       	subi	r28, 0xEA	; 234
   1be44:	dd 4f       	sbci	r29, 0xFD	; 253
   1be46:	88 81       	ld	r24, Y
   1be48:	99 81       	ldd	r25, Y+1	; 0x01
   1be4a:	c6 51       	subi	r28, 0x16	; 22
   1be4c:	d2 40       	sbci	r29, 0x02	; 2
   1be4e:	c5 5d       	subi	r28, 0xD5	; 213
   1be50:	dd 4f       	sbci	r29, 0xFD	; 253
   1be52:	a8 81       	ld	r26, Y
   1be54:	b9 81       	ldd	r27, Y+1	; 0x01
   1be56:	cb 52       	subi	r28, 0x2B	; 43
   1be58:	d2 40       	sbci	r29, 0x02	; 2
   1be5a:	8a 17       	cp	r24, r26
   1be5c:	9b 07       	cpc	r25, r27
   1be5e:	39 f6       	brne	.-114    	; 0x1bdee <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1be60:	e1 e0       	ldi	r30, 0x01	; 1
   1be62:	f0 e0       	ldi	r31, 0x00	; 0
   1be64:	ec 0f       	add	r30, r28
   1be66:	fd 1f       	adc	r31, r29
   1be68:	e8 0d       	add	r30, r8
   1be6a:	f9 1d       	adc	r31, r9
   1be6c:	ba e0       	ldi	r27, 0x0A	; 10
   1be6e:	b0 83       	st	Z, r27
                    ++ind;
   1be70:	0f 5f       	subi	r16, 0xFF	; 255
   1be72:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1be74:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1be76:	55 c0       	rjmp	.+170    	; 0x1bf22 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1be78:	c6 5e       	subi	r28, 0xE6	; 230
   1be7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1be7c:	28 81       	ld	r18, Y
   1be7e:	39 81       	ldd	r19, Y+1	; 0x01
   1be80:	ca 51       	subi	r28, 0x1A	; 26
   1be82:	d2 40       	sbci	r29, 0x02	; 2
   1be84:	a5 01       	movw	r20, r10
   1be86:	61 e0       	ldi	r22, 0x01	; 1
   1be88:	70 e0       	ldi	r23, 0x00	; 0
   1be8a:	ce 01       	movw	r24, r28
   1be8c:	01 96       	adiw	r24, 0x01	; 1
   1be8e:	0e 94 69 80 	call	0x100d2	; 0x100d2 <fwrite>
                    if(size < wind)
   1be92:	8a 15       	cp	r24, r10
   1be94:	9b 05       	cpc	r25, r11
   1be96:	14 f5       	brge	.+68     	; 0x1bedc <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1be98:	1f 92       	push	r1
   1be9a:	cb 5d       	subi	r28, 0xDB	; 219
   1be9c:	dd 4f       	sbci	r29, 0xFD	; 253
   1be9e:	38 81       	ld	r19, Y
   1bea0:	c5 52       	subi	r28, 0x25	; 37
   1bea2:	d2 40       	sbci	r29, 0x02	; 2
   1bea4:	3f 93       	push	r19
   1bea6:	cc 5d       	subi	r28, 0xDC	; 220
   1bea8:	dd 4f       	sbci	r29, 0xFD	; 253
   1beaa:	48 81       	ld	r20, Y
   1beac:	c4 52       	subi	r28, 0x24	; 36
   1beae:	d2 40       	sbci	r29, 0x02	; 2
   1beb0:	4f 93       	push	r20
   1beb2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1beb6:	0f 90       	pop	r0
   1beb8:	0f 90       	pop	r0
   1beba:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bebc:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1bebe:	81 e0       	ldi	r24, 0x01	; 1
   1bec0:	90 e0       	ldi	r25, 0x00	; 0
   1bec2:	c8 5e       	subi	r28, 0xE8	; 232
   1bec4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bec6:	99 83       	std	Y+1, r25	; 0x01
   1bec8:	88 83       	st	Y, r24
   1beca:	c8 51       	subi	r28, 0x18	; 24
   1becc:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1bece:	cb 5e       	subi	r28, 0xEB	; 235
   1bed0:	dd 4f       	sbci	r29, 0xFD	; 253
   1bed2:	18 82       	st	Y, r1
   1bed4:	c5 51       	subi	r28, 0x15	; 21
   1bed6:	d2 40       	sbci	r29, 0x02	; 2
   1bed8:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1beda:	23 c0       	rjmp	.+70     	; 0x1bf22 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1bedc:	09 2e       	mov	r0, r25
   1bede:	00 0c       	add	r0, r0
   1bee0:	aa 0b       	sbc	r26, r26
   1bee2:	bb 0b       	sbc	r27, r27
   1bee4:	48 0e       	add	r4, r24
   1bee6:	59 1e       	adc	r5, r25
   1bee8:	6a 1e       	adc	r6, r26
   1beea:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1beec:	7f 92       	push	r7
   1beee:	6f 92       	push	r6
   1bef0:	5f 92       	push	r5
   1bef2:	4f 92       	push	r4
   1bef4:	1f 92       	push	r1
   1bef6:	ce 5d       	subi	r28, 0xDE	; 222
   1bef8:	dd 4f       	sbci	r29, 0xFD	; 253
   1befa:	98 81       	ld	r25, Y
   1befc:	c2 52       	subi	r28, 0x22	; 34
   1befe:	d2 40       	sbci	r29, 0x02	; 2
   1bf00:	9f 93       	push	r25
   1bf02:	cf 5d       	subi	r28, 0xDF	; 223
   1bf04:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf06:	a8 81       	ld	r26, Y
   1bf08:	c1 52       	subi	r28, 0x21	; 33
   1bf0a:	d2 40       	sbci	r29, 0x02	; 2
   1bf0c:	af 93       	push	r26
   1bf0e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1bf12:	0f b6       	in	r0, 0x3f	; 63
   1bf14:	f8 94       	cli
   1bf16:	de bf       	out	0x3e, r29	; 62
   1bf18:	0f be       	out	0x3f, r0	; 63
   1bf1a:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1bf1c:	90 e0       	ldi	r25, 0x00	; 0
   1bf1e:	80 e0       	ldi	r24, 0x00	; 0
   1bf20:	76 cf       	rjmp	.-276    	; 0x1be0e <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bf22:	0f 3f       	cpi	r16, 0xFF	; 255
   1bf24:	11 05       	cpc	r17, r1
   1bf26:	09 f0       	breq	.+2      	; 0x1bf2a <lif_extract_e010_as_ascii+0x498>
   1bf28:	0c f4       	brge	.+2      	; 0x1bf2c <lif_extract_e010_as_ascii+0x49a>
   1bf2a:	c4 ce       	rjmp	.-632    	; 0x1bcb4 <lif_extract_e010_as_ascii+0x222>
   1bf2c:	08 c0       	rjmp	.+16     	; 0x1bf3e <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1bf2e:	21 e0       	ldi	r18, 0x01	; 1
   1bf30:	30 e0       	ldi	r19, 0x00	; 0
   1bf32:	c8 5e       	subi	r28, 0xE8	; 232
   1bf34:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf36:	39 83       	std	Y+1, r19	; 0x01
   1bf38:	28 83       	st	Y, r18
   1bf3a:	c8 51       	subi	r28, 0x18	; 24
   1bf3c:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1bf3e:	cf 5e       	subi	r28, 0xEF	; 239
   1bf40:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf42:	88 81       	ld	r24, Y
   1bf44:	99 81       	ldd	r25, Y+1	; 0x01
   1bf46:	aa 81       	ldd	r26, Y+2	; 0x02
   1bf48:	bb 81       	ldd	r27, Y+3	; 0x03
   1bf4a:	c1 51       	subi	r28, 0x11	; 17
   1bf4c:	d2 40       	sbci	r29, 0x02	; 2
   1bf4e:	9f 5f       	subi	r25, 0xFF	; 255
   1bf50:	af 4f       	sbci	r26, 0xFF	; 255
   1bf52:	bf 4f       	sbci	r27, 0xFF	; 255
   1bf54:	cf 5e       	subi	r28, 0xEF	; 239
   1bf56:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf58:	88 83       	st	Y, r24
   1bf5a:	99 83       	std	Y+1, r25	; 0x01
   1bf5c:	aa 83       	std	Y+2, r26	; 0x02
   1bf5e:	bb 83       	std	Y+3, r27	; 0x03
   1bf60:	c1 51       	subi	r28, 0x11	; 17
   1bf62:	d2 40       	sbci	r29, 0x02	; 2
   1bf64:	76 ce       	rjmp	.-788    	; 0x1bc52 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1bf66:	cb 5e       	subi	r28, 0xEB	; 235
   1bf68:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf6a:	18 82       	st	Y, r1
   1bf6c:	c5 51       	subi	r28, 0x15	; 21
   1bf6e:	d2 40       	sbci	r29, 0x02	; 2
   1bf70:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bf72:	c6 01       	movw	r24, r12
   1bf74:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1bf78:	81 14       	cp	r8, r1
   1bf7a:	91 04       	cpc	r9, r1
   1bf7c:	51 f1       	breq	.+84     	; 0x1bfd2 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1bf7e:	c6 5e       	subi	r28, 0xE6	; 230
   1bf80:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf82:	28 81       	ld	r18, Y
   1bf84:	39 81       	ldd	r19, Y+1	; 0x01
   1bf86:	ca 51       	subi	r28, 0x1A	; 26
   1bf88:	d2 40       	sbci	r29, 0x02	; 2
   1bf8a:	a4 01       	movw	r20, r8
   1bf8c:	61 e0       	ldi	r22, 0x01	; 1
   1bf8e:	70 e0       	ldi	r23, 0x00	; 0
   1bf90:	ce 01       	movw	r24, r28
   1bf92:	01 96       	adiw	r24, 0x01	; 1
   1bf94:	0e 94 69 80 	call	0x100d2	; 0x100d2 <fwrite>
   1bf98:	8c 01       	movw	r16, r24
        if(size < wind)
   1bf9a:	88 15       	cp	r24, r8
   1bf9c:	99 05       	cpc	r25, r9
   1bf9e:	84 f4       	brge	.+32     	; 0x1bfc0 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1bfa0:	89 e9       	ldi	r24, 0x99	; 153
   1bfa2:	95 e3       	ldi	r25, 0x35	; 53
   1bfa4:	1f 92       	push	r1
   1bfa6:	9f 93       	push	r25
   1bfa8:	8f 93       	push	r24
   1bfaa:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1bfae:	0f 90       	pop	r0
   1bfb0:	0f 90       	pop	r0
   1bfb2:	0f 90       	pop	r0
            status = 0;
   1bfb4:	cb 5e       	subi	r28, 0xEB	; 235
   1bfb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfb8:	18 82       	st	Y, r1
   1bfba:	c5 51       	subi	r28, 0x15	; 21
   1bfbc:	d2 40       	sbci	r29, 0x02	; 2
   1bfbe:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1bfc0:	c8 01       	movw	r24, r16
   1bfc2:	01 2e       	mov	r0, r17
   1bfc4:	00 0c       	add	r0, r0
   1bfc6:	aa 0b       	sbc	r26, r26
   1bfc8:	bb 0b       	sbc	r27, r27
   1bfca:	48 0e       	add	r4, r24
   1bfcc:	59 1e       	adc	r5, r25
   1bfce:	6a 1e       	adc	r6, r26
   1bfd0:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1bfd2:	c6 5e       	subi	r28, 0xE6	; 230
   1bfd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfd6:	88 81       	ld	r24, Y
   1bfd8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfda:	ca 51       	subi	r28, 0x1A	; 26
   1bfdc:	d2 40       	sbci	r29, 0x02	; 2
   1bfde:	0e 94 eb 80 	call	0x101d6	; 0x101d6 <fclose>
    if(t)
   1bfe2:	c3 5e       	subi	r28, 0xE3	; 227
   1bfe4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfe6:	88 81       	ld	r24, Y
   1bfe8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfea:	aa 81       	ldd	r26, Y+2	; 0x02
   1bfec:	bb 81       	ldd	r27, Y+3	; 0x03
   1bfee:	cd 51       	subi	r28, 0x1D	; 29
   1bff0:	d2 40       	sbci	r29, 0x02	; 2
   1bff2:	00 97       	sbiw	r24, 0x00	; 0
   1bff4:	a1 05       	cpc	r26, r1
   1bff6:	b1 05       	cpc	r27, r1
   1bff8:	d9 f0       	breq	.+54     	; 0x1c030 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1bffa:	c3 5f       	subi	r28, 0xF3	; 243
   1bffc:	dd 4f       	sbci	r29, 0xFD	; 253
   1bffe:	88 83       	st	Y, r24
   1c000:	99 83       	std	Y+1, r25	; 0x01
   1c002:	aa 83       	std	Y+2, r26	; 0x02
   1c004:	bb 83       	std	Y+3, r27	; 0x03
   1c006:	cd 50       	subi	r28, 0x0D	; 13
   1c008:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1c00a:	c7 5f       	subi	r28, 0xF7	; 247
   1c00c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c00e:	88 83       	st	Y, r24
   1c010:	99 83       	std	Y+1, r25	; 0x01
   1c012:	aa 83       	std	Y+2, r26	; 0x02
   1c014:	bb 83       	std	Y+3, r27	; 0x03
   1c016:	c9 50       	subi	r28, 0x09	; 9
   1c018:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1c01a:	be 01       	movw	r22, r28
   1c01c:	67 5f       	subi	r22, 0xF7	; 247
   1c01e:	7d 4f       	sbci	r23, 0xFD	; 253
   1c020:	c4 5e       	subi	r28, 0xE4	; 228
   1c022:	dd 4f       	sbci	r29, 0xFD	; 253
   1c024:	88 81       	ld	r24, Y
   1c026:	cc 51       	subi	r28, 0x1C	; 28
   1c028:	d2 40       	sbci	r29, 0x02	; 2
   1c02a:	9e 2d       	mov	r25, r14
   1c02c:	0e 94 29 7e 	call	0xfc52	; 0xfc52 <utime>
    }
    sync();
   1c030:	0e 94 e6 7f 	call	0xffcc	; 0xffcc <sync>
    printf("Wrote: %8ld\n", bytes);
   1c034:	7f 92       	push	r7
   1c036:	6f 92       	push	r6
   1c038:	5f 92       	push	r5
   1c03a:	4f 92       	push	r4
   1c03c:	8c e8       	ldi	r24, 0x8C	; 140
   1c03e:	95 e3       	ldi	r25, 0x35	; 53
   1c040:	1f 92       	push	r1
   1c042:	9f 93       	push	r25
   1c044:	8f 93       	push	r24
   1c046:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(status);
   1c04a:	0f b6       	in	r0, 0x3f	; 63
   1c04c:	f8 94       	cli
   1c04e:	de bf       	out	0x3e, r29	; 62
   1c050:	0f be       	out	0x3f, r0	; 63
   1c052:	cd bf       	out	0x3d, r28	; 61
   1c054:	cb 5e       	subi	r28, 0xEB	; 235
   1c056:	dd 4f       	sbci	r29, 0xFD	; 253
   1c058:	88 81       	ld	r24, Y
   1c05a:	c5 51       	subi	r28, 0x15	; 21
   1c05c:	d2 40       	sbci	r29, 0x02	; 2
   1c05e:	9f 2d       	mov	r25, r15
}
   1c060:	c4 5d       	subi	r28, 0xD4	; 212
   1c062:	dd 4f       	sbci	r29, 0xFD	; 253
   1c064:	e2 e1       	ldi	r30, 0x12	; 18
   1c066:	0c 94 57 e9 	jmp	0x1d2ae	; 0x1d2ae <__epilogue_restores__>

0001c06a <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1c06a:	ad e0       	ldi	r26, 0x0D	; 13
   1c06c:	b1 e0       	ldi	r27, 0x01	; 1
   1c06e:	eb e3       	ldi	r30, 0x3B	; 59
   1c070:	f0 ee       	ldi	r31, 0xE0	; 224
   1c072:	0c 94 3b e9 	jmp	0x1d276	; 0x1d276 <__prologue_saves__>
   1c076:	f8 2e       	mov	r15, r24
   1c078:	e9 2e       	mov	r14, r25
   1c07a:	16 2f       	mov	r17, r22
   1c07c:	07 2f       	mov	r16, r23
   1c07e:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1c080:	68 e1       	ldi	r22, 0x18	; 24
   1c082:	77 e0       	ldi	r23, 0x07	; 7
   1c084:	0e 94 27 d7 	call	0x1ae4e	; 0x1ae4e <lif_open_volume>
   1c088:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1c08a:	00 97       	sbiw	r24, 0x00	; 0
   1c08c:	51 f4       	brne	.+20     	; 0x1c0a2 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c08e:	ef 92       	push	r14
   1c090:	ff 92       	push	r15
   1c092:	84 e7       	ldi	r24, 0x74	; 116
   1c094:	95 e3       	ldi	r25, 0x35	; 53
   1c096:	1f 92       	push	r1
   1c098:	9f 93       	push	r25
   1c09a:	8f 93       	push	r24
   1c09c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1c0a0:	11 c0       	rjmp	.+34     	; 0x1c0c4 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c0a2:	61 2f       	mov	r22, r17
   1c0a4:	70 2f       	mov	r23, r16
   1c0a6:	38 d9       	rcall	.-3472   	; 0x1b318 <lif_find_file>
    if(index == -1)
   1c0a8:	01 96       	adiw	r24, 0x01	; 1
   1c0aa:	a1 f4       	brne	.+40     	; 0x1c0d4 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1c0ac:	0f 93       	push	r16
   1c0ae:	1f 93       	push	r17
   1c0b0:	81 e6       	ldi	r24, 0x61	; 97
   1c0b2:	95 e3       	ldi	r25, 0x35	; 53
   1c0b4:	1f 92       	push	r1
   1c0b6:	9f 93       	push	r25
   1c0b8:	8f 93       	push	r24
   1c0ba:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c0be:	c4 01       	movw	r24, r8
   1c0c0:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c0c4:	0f 90       	pop	r0
   1c0c6:	0f 90       	pop	r0
   1c0c8:	0f 90       	pop	r0
   1c0ca:	0f 90       	pop	r0
   1c0cc:	0f 90       	pop	r0
   1c0ce:	00 e0       	ldi	r16, 0x00	; 0
   1c0d0:	10 e0       	ldi	r17, 0x00	; 0
   1c0d2:	0c c1       	rjmp	.+536    	; 0x1c2ec <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1c0d4:	a4 01       	movw	r20, r8
   1c0d6:	40 5a       	subi	r20, 0xA0	; 160
   1c0d8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c0da:	c4 5f       	subi	r28, 0xF4	; 244
   1c0dc:	de 4f       	sbci	r29, 0xFE	; 254
   1c0de:	59 83       	std	Y+1, r21	; 0x01
   1c0e0:	48 83       	st	Y, r20
   1c0e2:	cc 50       	subi	r28, 0x0C	; 12
   1c0e4:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c0e6:	da 01       	movw	r26, r20
   1c0e8:	ad 90       	ld	r10, X+
   1c0ea:	bc 90       	ld	r11, X
   1c0ec:	0b 2c       	mov	r0, r11
   1c0ee:	00 0c       	add	r0, r0
   1c0f0:	cc 08       	sbc	r12, r12
   1c0f2:	dd 08       	sbc	r13, r13
   1c0f4:	e1 2c       	mov	r14, r1
   1c0f6:	f1 2c       	mov	r15, r1
   1c0f8:	87 01       	movw	r16, r14
   1c0fa:	e3 94       	inc	r14
   1c0fc:	21 e0       	ldi	r18, 0x01	; 1
   1c0fe:	30 e0       	ldi	r19, 0x00	; 0
   1c100:	40 e0       	ldi	r20, 0x00	; 0
   1c102:	50 e0       	ldi	r21, 0x00	; 0
   1c104:	63 e0       	ldi	r22, 0x03	; 3
   1c106:	76 e1       	ldi	r23, 0x16	; 22
   1c108:	c3 01       	movw	r24, r6
   1c10a:	0e 94 e9 d2 	call	0x1a5d2	; 0x1a5d2 <lif_create_volume>
   1c10e:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c110:	89 2b       	or	r24, r25
   1c112:	11 f4       	brne	.+4      	; 0x1c118 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c114:	c4 01       	movw	r24, r8
   1c116:	cf c0       	rjmp	.+414    	; 0x1c2b6 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c118:	81 e2       	ldi	r24, 0x21	; 33
   1c11a:	f4 01       	movw	r30, r8
   1c11c:	e1 5b       	subi	r30, 0xB1	; 177
   1c11e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c120:	d5 01       	movw	r26, r10
   1c122:	a1 5b       	subi	r26, 0xB1	; 177
   1c124:	bf 4f       	sbci	r27, 0xFF	; 255
   1c126:	01 90       	ld	r0, Z+
   1c128:	0d 92       	st	X+, r0
   1c12a:	8a 95       	dec	r24
   1c12c:	e1 f7       	brne	.-8      	; 0x1c126 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c12e:	82 e0       	ldi	r24, 0x02	; 2
   1c130:	90 e0       	ldi	r25, 0x00	; 0
   1c132:	a0 e0       	ldi	r26, 0x00	; 0
   1c134:	b0 e0       	ldi	r27, 0x00	; 0
   1c136:	f5 01       	movw	r30, r10
   1c138:	e4 5a       	subi	r30, 0xA4	; 164
   1c13a:	ff 4f       	sbci	r31, 0xFF	; 255
   1c13c:	80 83       	st	Z, r24
   1c13e:	91 83       	std	Z+1, r25	; 0x01
   1c140:	a2 83       	std	Z+2, r26	; 0x02
   1c142:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c144:	c4 5f       	subi	r28, 0xF4	; 244
   1c146:	de 4f       	sbci	r29, 0xFE	; 254
   1c148:	e8 81       	ld	r30, Y
   1c14a:	f9 81       	ldd	r31, Y+1	; 0x01
   1c14c:	cc 50       	subi	r28, 0x0C	; 12
   1c14e:	d1 40       	sbci	r29, 0x01	; 1
   1c150:	80 81       	ld	r24, Z
   1c152:	91 81       	ldd	r25, Z+1	; 0x01
   1c154:	a2 81       	ldd	r26, Z+2	; 0x02
   1c156:	b3 81       	ldd	r27, Z+3	; 0x03
   1c158:	f5 01       	movw	r30, r10
   1c15a:	80 8b       	std	Z+16, r24	; 0x10
   1c15c:	91 8b       	std	Z+17, r25	; 0x11
   1c15e:	a2 8b       	std	Z+18, r26	; 0x12
   1c160:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c162:	60 e0       	ldi	r22, 0x00	; 0
   1c164:	70 e0       	ldi	r23, 0x00	; 0
   1c166:	c5 01       	movw	r24, r10
   1c168:	0e 94 6d d1 	call	0x1a2da	; 0x1a2da <lif_writedirindex>
   1c16c:	8c 01       	movw	r16, r24
   1c16e:	89 2b       	or	r24, r25
   1c170:	41 f0       	breq	.+16     	; 0x1c182 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c172:	61 e0       	ldi	r22, 0x01	; 1
   1c174:	70 e0       	ldi	r23, 0x00	; 0
   1c176:	c5 01       	movw	r24, r10
   1c178:	0e 94 c9 d1 	call	0x1a392	; 0x1a392 <lif_writedirEOF>
   1c17c:	8c 01       	movw	r16, r24
   1c17e:	89 2b       	or	r24, r25
   1c180:	39 f4       	brne	.+14     	; 0x1c190 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c182:	c4 01       	movw	r24, r8
   1c184:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c188:	c5 01       	movw	r24, r10
   1c18a:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c18e:	ae c0       	rjmp	.+348    	; 0x1c2ec <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c190:	d5 01       	movw	r26, r10
   1c192:	1c 96       	adiw	r26, 0x0c	; 12
   1c194:	cd 90       	ld	r12, X+
   1c196:	dd 90       	ld	r13, X+
   1c198:	ed 90       	ld	r14, X+
   1c19a:	fc 90       	ld	r15, X
   1c19c:	1f 97       	sbiw	r26, 0x0f	; 15
   1c19e:	fe 2c       	mov	r15, r14
   1c1a0:	ed 2c       	mov	r14, r13
   1c1a2:	dc 2c       	mov	r13, r12
   1c1a4:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c1a6:	f4 01       	movw	r30, r8
   1c1a8:	e4 5a       	subi	r30, 0xA4	; 164
   1c1aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1c1ac:	80 81       	ld	r24, Z
   1c1ae:	91 81       	ldd	r25, Z+1	; 0x01
   1c1b0:	a2 81       	ldd	r26, Z+2	; 0x02
   1c1b2:	b3 81       	ldd	r27, Z+3	; 0x03
   1c1b4:	22 27       	eor	r18, r18
   1c1b6:	38 2f       	mov	r19, r24
   1c1b8:	49 2f       	mov	r20, r25
   1c1ba:	5a 2f       	mov	r21, r26
   1c1bc:	cb 5f       	subi	r28, 0xFB	; 251
   1c1be:	de 4f       	sbci	r29, 0xFE	; 254
   1c1c0:	28 83       	st	Y, r18
   1c1c2:	39 83       	std	Y+1, r19	; 0x01
   1c1c4:	4a 83       	std	Y+2, r20	; 0x02
   1c1c6:	5b 83       	std	Y+3, r21	; 0x03
   1c1c8:	c5 50       	subi	r28, 0x05	; 5
   1c1ca:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c1cc:	21 2c       	mov	r2, r1
   1c1ce:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c1d0:	84 e5       	ldi	r24, 0x54	; 84
   1c1d2:	95 e3       	ldi	r25, 0x35	; 53
   1c1d4:	9c 01       	movw	r18, r24
   1c1d6:	40 e0       	ldi	r20, 0x00	; 0
   1c1d8:	c7 5f       	subi	r28, 0xF7	; 247
   1c1da:	de 4f       	sbci	r29, 0xFE	; 254
   1c1dc:	28 83       	st	Y, r18
   1c1de:	39 83       	std	Y+1, r19	; 0x01
   1c1e0:	4a 83       	std	Y+2, r20	; 0x02
   1c1e2:	c9 50       	subi	r28, 0x09	; 9
   1c1e4:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c1e6:	41 c0       	rjmp	.+130    	; 0x1c26a <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c1e8:	00 e0       	ldi	r16, 0x00	; 0
   1c1ea:	11 e0       	ldi	r17, 0x01	; 1
   1c1ec:	a7 01       	movw	r20, r14
   1c1ee:	96 01       	movw	r18, r12
   1c1f0:	be 01       	movw	r22, r28
   1c1f2:	6f 5f       	subi	r22, 0xFF	; 255
   1c1f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c1f6:	c5 01       	movw	r24, r10
   1c1f8:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c1fc:	05 2c       	mov	r0, r5
   1c1fe:	00 0c       	add	r0, r0
   1c200:	66 08       	sbc	r6, r6
   1c202:	77 08       	sbc	r7, r7
   1c204:	c4 0c       	add	r12, r4
   1c206:	d5 1c       	adc	r13, r5
   1c208:	e6 1c       	adc	r14, r6
   1c20a:	f7 1c       	adc	r15, r7
        offset += size;
   1c20c:	cb 5f       	subi	r28, 0xFB	; 251
   1c20e:	de 4f       	sbci	r29, 0xFE	; 254
   1c210:	88 81       	ld	r24, Y
   1c212:	99 81       	ldd	r25, Y+1	; 0x01
   1c214:	aa 81       	ldd	r26, Y+2	; 0x02
   1c216:	bb 81       	ldd	r27, Y+3	; 0x03
   1c218:	c5 50       	subi	r28, 0x05	; 5
   1c21a:	d1 40       	sbci	r29, 0x01	; 1
   1c21c:	84 0d       	add	r24, r4
   1c21e:	95 1d       	adc	r25, r5
   1c220:	a6 1d       	adc	r26, r6
   1c222:	b7 1d       	adc	r27, r7
   1c224:	cb 5f       	subi	r28, 0xFB	; 251
   1c226:	de 4f       	sbci	r29, 0xFE	; 254
   1c228:	88 83       	st	Y, r24
   1c22a:	99 83       	std	Y+1, r25	; 0x01
   1c22c:	aa 83       	std	Y+2, r26	; 0x02
   1c22e:	bb 83       	std	Y+3, r27	; 0x03
   1c230:	c5 50       	subi	r28, 0x05	; 5
   1c232:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c234:	ff 92       	push	r15
   1c236:	ef 92       	push	r14
   1c238:	df 92       	push	r13
   1c23a:	cf 92       	push	r12
   1c23c:	1f 92       	push	r1
   1c23e:	c6 5f       	subi	r28, 0xF6	; 246
   1c240:	de 4f       	sbci	r29, 0xFE	; 254
   1c242:	98 81       	ld	r25, Y
   1c244:	ca 50       	subi	r28, 0x0A	; 10
   1c246:	d1 40       	sbci	r29, 0x01	; 1
   1c248:	9f 93       	push	r25
   1c24a:	c7 5f       	subi	r28, 0xF7	; 247
   1c24c:	de 4f       	sbci	r29, 0xFE	; 254
   1c24e:	a8 81       	ld	r26, Y
   1c250:	c9 50       	subi	r28, 0x09	; 9
   1c252:	d1 40       	sbci	r29, 0x01	; 1
   1c254:	af 93       	push	r26
   1c256:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c25a:	bf ef       	ldi	r27, 0xFF	; 255
   1c25c:	2b 1a       	sub	r2, r27
   1c25e:	3b 0a       	sbc	r3, r27
   1c260:	0f b6       	in	r0, 0x3f	; 63
   1c262:	f8 94       	cli
   1c264:	de bf       	out	0x3e, r29	; 62
   1c266:	0f be       	out	0x3f, r0	; 63
   1c268:	cd bf       	out	0x3d, r28	; 61
   1c26a:	c4 5f       	subi	r28, 0xF4	; 244
   1c26c:	de 4f       	sbci	r29, 0xFE	; 254
   1c26e:	a8 81       	ld	r26, Y
   1c270:	b9 81       	ldd	r27, Y+1	; 0x01
   1c272:	cc 50       	subi	r28, 0x0C	; 12
   1c274:	d1 40       	sbci	r29, 0x01	; 1
   1c276:	8d 91       	ld	r24, X+
   1c278:	9c 91       	ld	r25, X
   1c27a:	28 16       	cp	r2, r24
   1c27c:	39 06       	cpc	r3, r25
   1c27e:	f4 f4       	brge	.+60     	; 0x1c2bc <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c280:	00 e0       	ldi	r16, 0x00	; 0
   1c282:	11 e0       	ldi	r17, 0x01	; 1
   1c284:	cb 5f       	subi	r28, 0xFB	; 251
   1c286:	de 4f       	sbci	r29, 0xFE	; 254
   1c288:	28 81       	ld	r18, Y
   1c28a:	39 81       	ldd	r19, Y+1	; 0x01
   1c28c:	4a 81       	ldd	r20, Y+2	; 0x02
   1c28e:	5b 81       	ldd	r21, Y+3	; 0x03
   1c290:	c5 50       	subi	r28, 0x05	; 5
   1c292:	d1 40       	sbci	r29, 0x01	; 1
   1c294:	be 01       	movw	r22, r28
   1c296:	6f 5f       	subi	r22, 0xFF	; 255
   1c298:	7f 4f       	sbci	r23, 0xFF	; 255
   1c29a:	c4 01       	movw	r24, r8
   1c29c:	0e 94 eb c7 	call	0x18fd6	; 0x18fd6 <lif_read>
   1c2a0:	2b 01       	movw	r4, r22
   1c2a2:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c2a4:	6f 3f       	cpi	r22, 0xFF	; 255
   1c2a6:	71 05       	cpc	r23, r1
   1c2a8:	11 f0       	breq	.+4      	; 0x1c2ae <lif_extract_lif_as_lif+0x244>
   1c2aa:	0c f0       	brlt	.+2      	; 0x1c2ae <lif_extract_lif_as_lif+0x244>
   1c2ac:	9d cf       	rjmp	.-198    	; 0x1c1e8 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c2ae:	c4 01       	movw	r24, r8
   1c2b0:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c2b4:	c5 01       	movw	r24, r10
   1c2b6:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c2ba:	09 cf       	rjmp	.-494    	; 0x1c0ce <lif_extract_lif_as_lif+0x64>
   1c2bc:	c4 01       	movw	r24, r8
   1c2be:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c2c2:	c5 01       	movw	r24, r10
   1c2c4:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c2c8:	ff 92       	push	r15
   1c2ca:	ef 92       	push	r14
   1c2cc:	df 92       	push	r13
   1c2ce:	cf 92       	push	r12
   1c2d0:	87 e4       	ldi	r24, 0x47	; 71
   1c2d2:	95 e3       	ldi	r25, 0x35	; 53
   1c2d4:	1f 92       	push	r1
   1c2d6:	9f 93       	push	r25
   1c2d8:	8f 93       	push	r24
   1c2da:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(1);
   1c2de:	0f b6       	in	r0, 0x3f	; 63
   1c2e0:	f8 94       	cli
   1c2e2:	de bf       	out	0x3e, r29	; 62
   1c2e4:	0f be       	out	0x3f, r0	; 63
   1c2e6:	cd bf       	out	0x3d, r28	; 61
   1c2e8:	01 e0       	ldi	r16, 0x01	; 1
   1c2ea:	10 e0       	ldi	r17, 0x00	; 0
}
   1c2ec:	c8 01       	movw	r24, r16
   1c2ee:	c3 5f       	subi	r28, 0xF3	; 243
   1c2f0:	de 4f       	sbci	r29, 0xFE	; 254
   1c2f2:	e2 e1       	ldi	r30, 0x12	; 18
   1c2f4:	dc c7       	rjmp	.+4024   	; 0x1d2ae <__epilogue_restores__>

0001c2f6 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c2f6:	2f 92       	push	r2
   1c2f8:	3f 92       	push	r3
   1c2fa:	4f 92       	push	r4
   1c2fc:	5f 92       	push	r5
   1c2fe:	6f 92       	push	r6
   1c300:	8f 92       	push	r8
   1c302:	9f 92       	push	r9
   1c304:	af 92       	push	r10
   1c306:	bf 92       	push	r11
   1c308:	cf 92       	push	r12
   1c30a:	df 92       	push	r13
   1c30c:	ef 92       	push	r14
   1c30e:	ff 92       	push	r15
   1c310:	0f 93       	push	r16
   1c312:	1f 93       	push	r17
   1c314:	cf 93       	push	r28
   1c316:	df 93       	push	r29
   1c318:	cd b7       	in	r28, 0x3d	; 61
   1c31a:	de b7       	in	r29, 0x3e	; 62
   1c31c:	c4 51       	subi	r28, 0x14	; 20
   1c31e:	d1 40       	sbci	r29, 0x01	; 1
   1c320:	0f b6       	in	r0, 0x3f	; 63
   1c322:	f8 94       	cli
   1c324:	de bf       	out	0x3e, r29	; 62
   1c326:	0f be       	out	0x3f, r0	; 63
   1c328:	cd bf       	out	0x3d, r28	; 61
   1c32a:	7c 01       	movw	r14, r24
   1c32c:	5b 01       	movw	r10, r22
   1c32e:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c330:	dc 01       	movw	r26, r24
   1c332:	8c 91       	ld	r24, X
   1c334:	81 11       	cpse	r24, r1
   1c336:	03 c0       	rjmp	.+6      	; 0x1c33e <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c338:	87 e2       	ldi	r24, 0x27	; 39
   1c33a:	95 e3       	ldi	r25, 0x35	; 53
   1c33c:	06 c0       	rjmp	.+12     	; 0x1c34a <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c33e:	fb 01       	movw	r30, r22
   1c340:	80 81       	ld	r24, Z
   1c342:	81 11       	cpse	r24, r1
   1c344:	0b c0       	rjmp	.+22     	; 0x1c35c <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c346:	8c e0       	ldi	r24, 0x0C	; 12
   1c348:	95 e3       	ldi	r25, 0x35	; 53
   1c34a:	1f 92       	push	r1
   1c34c:	9f 93       	push	r25
   1c34e:	8f 93       	push	r24
   1c350:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1c354:	0f 90       	pop	r0
   1c356:	0f 90       	pop	r0
   1c358:	0f 90       	pop	r0
   1c35a:	32 c1       	rjmp	.+612    	; 0x1c5c0 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c35c:	da 01       	movw	r26, r20
   1c35e:	8c 91       	ld	r24, X
   1c360:	81 11       	cpse	r24, r1
   1c362:	03 c0       	rjmp	.+6      	; 0x1c36a <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c364:	80 ef       	ldi	r24, 0xF0	; 240
   1c366:	94 e3       	ldi	r25, 0x34	; 52
   1c368:	f0 cf       	rjmp	.-32     	; 0x1c34a <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c36a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1c36e:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1c372:	92 ff       	sbrs	r25, 2
   1c374:	12 c0       	rjmp	.+36     	; 0x1c39a <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c376:	df 92       	push	r13
   1c378:	4f 93       	push	r20
   1c37a:	bf 92       	push	r11
   1c37c:	6f 93       	push	r22
   1c37e:	ff 92       	push	r15
   1c380:	ef 92       	push	r14
   1c382:	81 ec       	ldi	r24, 0xC1	; 193
   1c384:	94 e3       	ldi	r25, 0x34	; 52
   1c386:	1f 92       	push	r1
   1c388:	9f 93       	push	r25
   1c38a:	8f 93       	push	r24
   1c38c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1c390:	0f b6       	in	r0, 0x3f	; 63
   1c392:	f8 94       	cli
   1c394:	de bf       	out	0x3e, r29	; 62
   1c396:	0f be       	out	0x3f, r0	; 63
   1c398:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c39a:	67 e6       	ldi	r22, 0x67	; 103
   1c39c:	78 e0       	ldi	r23, 0x08	; 8
   1c39e:	c6 01       	movw	r24, r12
   1c3a0:	0e 94 27 d7 	call	0x1ae4e	; 0x1ae4e <lif_open_volume>
   1c3a4:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c3a6:	00 97       	sbiw	r24, 0x00	; 0
   1c3a8:	09 f4       	brne	.+2      	; 0x1c3ac <lif_add_lif_file+0xb6>
   1c3aa:	0a c1       	rjmp	.+532    	; 0x1c5c0 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c3ac:	b5 01       	movw	r22, r10
   1c3ae:	0e 94 8c d9 	call	0x1b318	; 0x1b318 <lif_find_file>
    if(index == -1)
   1c3b2:	01 96       	adiw	r24, 0x01	; 1
   1c3b4:	b1 f4       	brne	.+44     	; 0x1c3e2 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c3b6:	bf 92       	push	r11
   1c3b8:	af 92       	push	r10
   1c3ba:	8e ea       	ldi	r24, 0xAE	; 174
   1c3bc:	94 e3       	ldi	r25, 0x34	; 52
   1c3be:	1f 92       	push	r1
   1c3c0:	9f 93       	push	r25
   1c3c2:	8f 93       	push	r24
   1c3c4:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c3c8:	c4 01       	movw	r24, r8
   1c3ca:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c3ce:	0f 90       	pop	r0
   1c3d0:	0f 90       	pop	r0
   1c3d2:	0f 90       	pop	r0
   1c3d4:	0f 90       	pop	r0
   1c3d6:	0f 90       	pop	r0
   1c3d8:	60 e0       	ldi	r22, 0x00	; 0
   1c3da:	70 e0       	ldi	r23, 0x00	; 0
   1c3dc:	80 e0       	ldi	r24, 0x00	; 0
   1c3de:	90 e0       	ldi	r25, 0x00	; 0
   1c3e0:	09 c1       	rjmp	.+530    	; 0x1c5f4 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c3e2:	67 e6       	ldi	r22, 0x67	; 103
   1c3e4:	78 e0       	ldi	r23, 0x08	; 8
   1c3e6:	c7 01       	movw	r24, r14
   1c3e8:	0e 94 27 d7 	call	0x1ae4e	; 0x1ae4e <lif_open_volume>
   1c3ec:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c3ee:	00 97       	sbiw	r24, 0x00	; 0
   1c3f0:	09 f4       	brne	.+2      	; 0x1c3f4 <lif_add_lif_file+0xfe>
   1c3f2:	e6 c0       	rjmp	.+460    	; 0x1c5c0 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c3f4:	f4 01       	movw	r30, r8
   1c3f6:	e0 5a       	subi	r30, 0xA0	; 160
   1c3f8:	ff 4f       	sbci	r31, 0xFF	; 255
   1c3fa:	40 81       	ld	r20, Z
   1c3fc:	51 81       	ldd	r21, Z+1	; 0x01
   1c3fe:	62 81       	ldd	r22, Z+2	; 0x02
   1c400:	73 81       	ldd	r23, Z+3	; 0x03
   1c402:	0e 94 c2 d5 	call	0x1ab84	; 0x1ab84 <lif_newdir>
   1c406:	c3 5f       	subi	r28, 0xF3	; 243
   1c408:	de 4f       	sbci	r29, 0xFE	; 254
   1c40a:	99 83       	std	Y+1, r25	; 0x01
   1c40c:	88 83       	st	Y, r24
   1c40e:	cd 50       	subi	r28, 0x0D	; 13
   1c410:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c412:	01 96       	adiw	r24, 0x01	; 1
   1c414:	b9 f4       	brne	.+46     	; 0x1c444 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c416:	df 92       	push	r13
   1c418:	cf 92       	push	r12
   1c41a:	ff 92       	push	r15
   1c41c:	ef 92       	push	r14
   1c41e:	8e e7       	ldi	r24, 0x7E	; 126
   1c420:	94 e3       	ldi	r25, 0x34	; 52
   1c422:	1f 92       	push	r1
   1c424:	9f 93       	push	r25
   1c426:	8f 93       	push	r24
   1c428:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c42c:	c5 01       	movw	r24, r10
   1c42e:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c432:	c4 01       	movw	r24, r8
   1c434:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c438:	0f b6       	in	r0, 0x3f	; 63
   1c43a:	f8 94       	cli
   1c43c:	de bf       	out	0x3e, r29	; 62
   1c43e:	0f be       	out	0x3f, r0	; 63
   1c440:	cd bf       	out	0x3d, r28	; 61
   1c442:	be c0       	rjmp	.+380    	; 0x1c5c0 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c444:	c5 01       	movw	r24, r10
   1c446:	84 5a       	subi	r24, 0xA4	; 164
   1c448:	9f 4f       	sbci	r25, 0xFF	; 255
   1c44a:	dc 01       	movw	r26, r24
   1c44c:	4d 91       	ld	r20, X+
   1c44e:	5d 91       	ld	r21, X+
   1c450:	6d 91       	ld	r22, X+
   1c452:	7c 91       	ld	r23, X
   1c454:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c456:	21 e2       	ldi	r18, 0x21	; 33
   1c458:	f4 01       	movw	r30, r8
   1c45a:	e1 5b       	subi	r30, 0xB1	; 177
   1c45c:	ff 4f       	sbci	r31, 0xFF	; 255
   1c45e:	1d 97       	sbiw	r26, 0x0d	; 13
   1c460:	01 90       	ld	r0, Z+
   1c462:	0d 92       	st	X+, r0
   1c464:	2a 95       	dec	r18
   1c466:	e1 f7       	brne	.-8      	; 0x1c460 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c468:	fc 01       	movw	r30, r24
   1c46a:	40 83       	st	Z, r20
   1c46c:	51 83       	std	Z+1, r21	; 0x01
   1c46e:	62 83       	std	Z+2, r22	; 0x02
   1c470:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c472:	b6 2f       	mov	r27, r22
   1c474:	a5 2f       	mov	r26, r21
   1c476:	94 2f       	mov	r25, r20
   1c478:	88 27       	eor	r24, r24
   1c47a:	cb 5f       	subi	r28, 0xFB	; 251
   1c47c:	de 4f       	sbci	r29, 0xFE	; 254
   1c47e:	88 83       	st	Y, r24
   1c480:	99 83       	std	Y+1, r25	; 0x01
   1c482:	aa 83       	std	Y+2, r26	; 0x02
   1c484:	bb 83       	std	Y+3, r27	; 0x03
   1c486:	c5 50       	subi	r28, 0x05	; 5
   1c488:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c48a:	f4 01       	movw	r30, r8
   1c48c:	e4 5a       	subi	r30, 0xA4	; 164
   1c48e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c490:	80 81       	ld	r24, Z
   1c492:	91 81       	ldd	r25, Z+1	; 0x01
   1c494:	a2 81       	ldd	r26, Z+2	; 0x02
   1c496:	b3 81       	ldd	r27, Z+3	; 0x03
   1c498:	22 27       	eor	r18, r18
   1c49a:	38 2f       	mov	r19, r24
   1c49c:	49 2f       	mov	r20, r25
   1c49e:	5a 2f       	mov	r21, r26
   1c4a0:	c7 5f       	subi	r28, 0xF7	; 247
   1c4a2:	de 4f       	sbci	r29, 0xFE	; 254
   1c4a4:	28 83       	st	Y, r18
   1c4a6:	39 83       	std	Y+1, r19	; 0x01
   1c4a8:	4a 83       	std	Y+2, r20	; 0x02
   1c4aa:	5b 83       	std	Y+3, r21	; 0x03
   1c4ac:	c9 50       	subi	r28, 0x09	; 9
   1c4ae:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c4b0:	21 2c       	mov	r2, r1
   1c4b2:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c4b4:	c1 2c       	mov	r12, r1
   1c4b6:	d1 2c       	mov	r13, r1
   1c4b8:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c4ba:	a5 01       	movw	r20, r10
   1c4bc:	40 5a       	subi	r20, 0xA0	; 160
   1c4be:	5f 4f       	sbci	r21, 0xFF	; 255
   1c4c0:	cd 5e       	subi	r28, 0xED	; 237
   1c4c2:	de 4f       	sbci	r29, 0xFE	; 254
   1c4c4:	59 83       	std	Y+1, r21	; 0x01
   1c4c6:	48 83       	st	Y, r20
   1c4c8:	c3 51       	subi	r28, 0x13	; 19
   1c4ca:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1c4cc:	81 e7       	ldi	r24, 0x71	; 113
   1c4ce:	94 e3       	ldi	r25, 0x34	; 52
   1c4d0:	2c 01       	movw	r4, r24
   1c4d2:	c7 5f       	subi	r28, 0xF7	; 247
   1c4d4:	de 4f       	sbci	r29, 0xFE	; 254
   1c4d6:	28 81       	ld	r18, Y
   1c4d8:	39 81       	ldd	r19, Y+1	; 0x01
   1c4da:	4a 81       	ldd	r20, Y+2	; 0x02
   1c4dc:	5b 81       	ldd	r21, Y+3	; 0x03
   1c4de:	c9 50       	subi	r28, 0x09	; 9
   1c4e0:	d1 40       	sbci	r29, 0x01	; 1
   1c4e2:	2c 0d       	add	r18, r12
   1c4e4:	3d 1d       	adc	r19, r13
   1c4e6:	4e 1d       	adc	r20, r14
   1c4e8:	5f 1d       	adc	r21, r15
   1c4ea:	cb 5f       	subi	r28, 0xFB	; 251
   1c4ec:	de 4f       	sbci	r29, 0xFE	; 254
   1c4ee:	88 81       	ld	r24, Y
   1c4f0:	99 81       	ldd	r25, Y+1	; 0x01
   1c4f2:	aa 81       	ldd	r26, Y+2	; 0x02
   1c4f4:	bb 81       	ldd	r27, Y+3	; 0x03
   1c4f6:	c5 50       	subi	r28, 0x05	; 5
   1c4f8:	d1 40       	sbci	r29, 0x01	; 1
   1c4fa:	8c 0d       	add	r24, r12
   1c4fc:	9d 1d       	adc	r25, r13
   1c4fe:	ae 1d       	adc	r26, r14
   1c500:	bf 1d       	adc	r27, r15
   1c502:	c1 5f       	subi	r28, 0xF1	; 241
   1c504:	de 4f       	sbci	r29, 0xFE	; 254
   1c506:	88 83       	st	Y, r24
   1c508:	99 83       	std	Y+1, r25	; 0x01
   1c50a:	aa 83       	std	Y+2, r26	; 0x02
   1c50c:	bb 83       	std	Y+3, r27	; 0x03
   1c50e:	cf 50       	subi	r28, 0x0F	; 15
   1c510:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c512:	cd 5e       	subi	r28, 0xED	; 237
   1c514:	de 4f       	sbci	r29, 0xFE	; 254
   1c516:	a8 81       	ld	r26, Y
   1c518:	b9 81       	ldd	r27, Y+1	; 0x01
   1c51a:	c3 51       	subi	r28, 0x13	; 19
   1c51c:	d1 40       	sbci	r29, 0x01	; 1
   1c51e:	8d 91       	ld	r24, X+
   1c520:	9c 91       	ld	r25, X
   1c522:	28 16       	cp	r2, r24
   1c524:	39 06       	cpc	r3, r25
   1c526:	dc f5       	brge	.+118    	; 0x1c59e <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1c528:	00 e0       	ldi	r16, 0x00	; 0
   1c52a:	11 e0       	ldi	r17, 0x01	; 1
   1c52c:	be 01       	movw	r22, r28
   1c52e:	6f 5f       	subi	r22, 0xFF	; 255
   1c530:	7f 4f       	sbci	r23, 0xFF	; 255
   1c532:	c4 01       	movw	r24, r8
   1c534:	0e 94 eb c7 	call	0x18fd6	; 0x18fd6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c538:	6f 3f       	cpi	r22, 0xFF	; 255
   1c53a:	71 05       	cpc	r23, r1
   1c53c:	a9 f0       	breq	.+42     	; 0x1c568 <lif_add_lif_file+0x272>
   1c53e:	a4 f0       	brlt	.+40     	; 0x1c568 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c540:	00 e0       	ldi	r16, 0x00	; 0
   1c542:	11 e0       	ldi	r17, 0x01	; 1
   1c544:	c1 5f       	subi	r28, 0xF1	; 241
   1c546:	de 4f       	sbci	r29, 0xFE	; 254
   1c548:	28 81       	ld	r18, Y
   1c54a:	39 81       	ldd	r19, Y+1	; 0x01
   1c54c:	4a 81       	ldd	r20, Y+2	; 0x02
   1c54e:	5b 81       	ldd	r21, Y+3	; 0x03
   1c550:	cf 50       	subi	r28, 0x0F	; 15
   1c552:	d1 40       	sbci	r29, 0x01	; 1
   1c554:	be 01       	movw	r22, r28
   1c556:	6f 5f       	subi	r22, 0xFF	; 255
   1c558:	7f 4f       	sbci	r23, 0xFF	; 255
   1c55a:	c5 01       	movw	r24, r10
   1c55c:	0e 94 44 c8 	call	0x19088	; 0x19088 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1c560:	8f 3f       	cpi	r24, 0xFF	; 255
   1c562:	91 05       	cpc	r25, r1
   1c564:	09 f0       	breq	.+2      	; 0x1c568 <lif_add_lif_file+0x272>
   1c566:	2c f4       	brge	.+10     	; 0x1c572 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c568:	c5 01       	movw	r24, r10
   1c56a:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c56e:	c4 01       	movw	r24, r8
   1c570:	25 c0       	rjmp	.+74     	; 0x1c5bc <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1c572:	5f ef       	ldi	r21, 0xFF	; 255
   1c574:	d5 1a       	sub	r13, r21
   1c576:	e5 0a       	sbc	r14, r21
   1c578:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1c57a:	ff 92       	push	r15
   1c57c:	ef 92       	push	r14
   1c57e:	df 92       	push	r13
   1c580:	cf 92       	push	r12
   1c582:	1f 92       	push	r1
   1c584:	5f 92       	push	r5
   1c586:	4f 92       	push	r4
   1c588:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c58c:	8f ef       	ldi	r24, 0xFF	; 255
   1c58e:	28 1a       	sub	r2, r24
   1c590:	38 0a       	sbc	r3, r24
   1c592:	0f b6       	in	r0, 0x3f	; 63
   1c594:	f8 94       	cli
   1c596:	de bf       	out	0x3e, r29	; 62
   1c598:	0f be       	out	0x3f, r0	; 63
   1c59a:	cd bf       	out	0x3d, r28	; 61
   1c59c:	9a cf       	rjmp	.-204    	; 0x1c4d2 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c59e:	c4 01       	movw	r24, r8
   1c5a0:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1c5a4:	c3 5f       	subi	r28, 0xF3	; 243
   1c5a6:	de 4f       	sbci	r29, 0xFE	; 254
   1c5a8:	68 81       	ld	r22, Y
   1c5aa:	79 81       	ldd	r23, Y+1	; 0x01
   1c5ac:	cd 50       	subi	r28, 0x0D	; 13
   1c5ae:	d1 40       	sbci	r29, 0x01	; 1
   1c5b0:	c5 01       	movw	r24, r10
   1c5b2:	0e 94 6d d1 	call	0x1a2da	; 0x1a2da <lif_writedirindex>
   1c5b6:	89 2b       	or	r24, r25
   1c5b8:	41 f4       	brne	.+16     	; 0x1c5ca <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c5ba:	c5 01       	movw	r24, r10
   1c5bc:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1c5c0:	6f ef       	ldi	r22, 0xFF	; 255
   1c5c2:	7f ef       	ldi	r23, 0xFF	; 255
   1c5c4:	8f ef       	ldi	r24, 0xFF	; 255
   1c5c6:	9f ef       	ldi	r25, 0xFF	; 255
   1c5c8:	15 c0       	rjmp	.+42     	; 0x1c5f4 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c5ca:	c5 01       	movw	r24, r10
   1c5cc:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1c5d0:	ff 92       	push	r15
   1c5d2:	ef 92       	push	r14
   1c5d4:	df 92       	push	r13
   1c5d6:	cf 92       	push	r12
   1c5d8:	84 e6       	ldi	r24, 0x64	; 100
   1c5da:	94 e3       	ldi	r25, 0x34	; 52
   1c5dc:	1f 92       	push	r1
   1c5de:	9f 93       	push	r25
   1c5e0:	8f 93       	push	r24
   1c5e2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(bytes);
   1c5e6:	0f b6       	in	r0, 0x3f	; 63
   1c5e8:	f8 94       	cli
   1c5ea:	de bf       	out	0x3e, r29	; 62
   1c5ec:	0f be       	out	0x3f, r0	; 63
   1c5ee:	cd bf       	out	0x3d, r28	; 61
   1c5f0:	b6 01       	movw	r22, r12
   1c5f2:	c7 01       	movw	r24, r14
}
   1c5f4:	cc 5e       	subi	r28, 0xEC	; 236
   1c5f6:	de 4f       	sbci	r29, 0xFE	; 254
   1c5f8:	0f b6       	in	r0, 0x3f	; 63
   1c5fa:	f8 94       	cli
   1c5fc:	de bf       	out	0x3e, r29	; 62
   1c5fe:	0f be       	out	0x3f, r0	; 63
   1c600:	cd bf       	out	0x3d, r28	; 61
   1c602:	df 91       	pop	r29
   1c604:	cf 91       	pop	r28
   1c606:	1f 91       	pop	r17
   1c608:	0f 91       	pop	r16
   1c60a:	ff 90       	pop	r15
   1c60c:	ef 90       	pop	r14
   1c60e:	df 90       	pop	r13
   1c610:	cf 90       	pop	r12
   1c612:	bf 90       	pop	r11
   1c614:	af 90       	pop	r10
   1c616:	9f 90       	pop	r9
   1c618:	8f 90       	pop	r8
   1c61a:	6f 90       	pop	r6
   1c61c:	5f 90       	pop	r5
   1c61e:	4f 90       	pop	r4
   1c620:	3f 90       	pop	r3
   1c622:	2f 90       	pop	r2
   1c624:	08 95       	ret

0001c626 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1c626:	ef 92       	push	r14
   1c628:	ff 92       	push	r15
   1c62a:	0f 93       	push	r16
   1c62c:	1f 93       	push	r17
   1c62e:	cf 93       	push	r28
   1c630:	df 93       	push	r29
   1c632:	7c 01       	movw	r14, r24
   1c634:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1c636:	fc 01       	movw	r30, r24
   1c638:	80 81       	ld	r24, Z
   1c63a:	81 11       	cpse	r24, r1
   1c63c:	03 c0       	rjmp	.+6      	; 0x1c644 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1c63e:	8f e3       	ldi	r24, 0x3F	; 63
   1c640:	94 e3       	ldi	r25, 0x34	; 52
   1c642:	06 c0       	rjmp	.+12     	; 0x1c650 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1c644:	fb 01       	movw	r30, r22
   1c646:	80 81       	ld	r24, Z
   1c648:	81 11       	cpse	r24, r1
   1c64a:	0b c0       	rjmp	.+22     	; 0x1c662 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1c64c:	8f e1       	ldi	r24, 0x1F	; 31
   1c64e:	94 e3       	ldi	r25, 0x34	; 52
   1c650:	1f 92       	push	r1
   1c652:	9f 93       	push	r25
   1c654:	8f 93       	push	r24
   1c656:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1c65a:	0f 90       	pop	r0
   1c65c:	0f 90       	pop	r0
   1c65e:	0f 90       	pop	r0
   1c660:	74 c0       	rjmp	.+232    	; 0x1c74a <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1c662:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1c666:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1c66a:	92 ff       	sbrs	r25, 2
   1c66c:	13 c0       	rjmp	.+38     	; 0x1c694 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1c66e:	1f 93       	push	r17
   1c670:	6f 93       	push	r22
   1c672:	ff 92       	push	r15
   1c674:	ef 92       	push	r14
   1c676:	80 e0       	ldi	r24, 0x00	; 0
   1c678:	94 e3       	ldi	r25, 0x34	; 52
   1c67a:	1f 92       	push	r1
   1c67c:	9f 93       	push	r25
   1c67e:	8f 93       	push	r24
   1c680:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1c684:	8d b7       	in	r24, 0x3d	; 61
   1c686:	9e b7       	in	r25, 0x3e	; 62
   1c688:	07 96       	adiw	r24, 0x07	; 7
   1c68a:	0f b6       	in	r0, 0x3f	; 63
   1c68c:	f8 94       	cli
   1c68e:	9e bf       	out	0x3e, r25	; 62
   1c690:	0f be       	out	0x3f, r0	; 63
   1c692:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1c694:	67 e6       	ldi	r22, 0x67	; 103
   1c696:	78 e0       	ldi	r23, 0x08	; 8
   1c698:	c7 01       	movw	r24, r14
   1c69a:	0e 94 27 d7 	call	0x1ae4e	; 0x1ae4e <lif_open_volume>
   1c69e:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c6a0:	00 97       	sbiw	r24, 0x00	; 0
   1c6a2:	09 f4       	brne	.+2      	; 0x1c6a6 <lif_del_file+0x80>
   1c6a4:	52 c0       	rjmp	.+164    	; 0x1c74a <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1c6a6:	b8 01       	movw	r22, r16
   1c6a8:	0e 94 8c d9 	call	0x1b318	; 0x1b318 <lif_find_file>
    if(index == -1)
   1c6ac:	8f 3f       	cpi	r24, 0xFF	; 255
   1c6ae:	ef ef       	ldi	r30, 0xFF	; 255
   1c6b0:	9e 07       	cpc	r25, r30
   1c6b2:	c9 f4       	brne	.+50     	; 0x1c6e6 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c6b4:	ce 01       	movw	r24, r28
   1c6b6:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1c6ba:	1f 93       	push	r17
   1c6bc:	0f 93       	push	r16
   1c6be:	ff 92       	push	r15
   1c6c0:	ef 92       	push	r14
   1c6c2:	88 ed       	ldi	r24, 0xD8	; 216
   1c6c4:	93 e3       	ldi	r25, 0x33	; 51
   1c6c6:	1f 92       	push	r1
   1c6c8:	9f 93       	push	r25
   1c6ca:	8f 93       	push	r24
   1c6cc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(0);
   1c6d0:	8d b7       	in	r24, 0x3d	; 61
   1c6d2:	9e b7       	in	r25, 0x3e	; 62
   1c6d4:	07 96       	adiw	r24, 0x07	; 7
   1c6d6:	0f b6       	in	r0, 0x3f	; 63
   1c6d8:	f8 94       	cli
   1c6da:	9e bf       	out	0x3e, r25	; 62
   1c6dc:	0f be       	out	0x3f, r0	; 63
   1c6de:	8d bf       	out	0x3d, r24	; 61
   1c6e0:	80 e0       	ldi	r24, 0x00	; 0
   1c6e2:	90 e0       	ldi	r25, 0x00	; 0
   1c6e4:	34 c0       	rjmp	.+104    	; 0x1c74e <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1c6e6:	2a a1       	ldd	r18, Y+34	; 0x22
   1c6e8:	3b a1       	ldd	r19, Y+35	; 0x23
   1c6ea:	21 50       	subi	r18, 0x01	; 1
   1c6ec:	31 09       	sbc	r19, r1
   1c6ee:	fe 01       	movw	r30, r28
   1c6f0:	e6 5a       	subi	r30, 0xA6	; 166
   1c6f2:	ff 4f       	sbci	r31, 0xFF	; 255
   1c6f4:	82 17       	cp	r24, r18
   1c6f6:	93 07       	cpc	r25, r19
   1c6f8:	2c f0       	brlt	.+10     	; 0x1c704 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1c6fa:	2f ef       	ldi	r18, 0xFF	; 255
   1c6fc:	3f ef       	ldi	r19, 0xFF	; 255
   1c6fe:	31 83       	std	Z+1, r19	; 0x01
   1c700:	20 83       	st	Z, r18
   1c702:	02 c0       	rjmp	.+4      	; 0x1c708 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1c704:	11 82       	std	Z+1, r1	; 0x01
   1c706:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1c708:	bc 01       	movw	r22, r24
   1c70a:	ce 01       	movw	r24, r28
   1c70c:	0e 94 6d d1 	call	0x1a2da	; 0x1a2da <lif_writedirindex>
   1c710:	89 2b       	or	r24, r25
   1c712:	21 f4       	brne	.+8      	; 0x1c71c <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c714:	ce 01       	movw	r24, r28
   1c716:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c71a:	17 c0       	rjmp	.+46     	; 0x1c74a <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1c71c:	ce 01       	movw	r24, r28
   1c71e:	0e 94 e1 d1 	call	0x1a3c2	; 0x1a3c2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c722:	ce 01       	movw	r24, r28
   1c724:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1c728:	1f 93       	push	r17
   1c72a:	0f 93       	push	r16
   1c72c:	89 ec       	ldi	r24, 0xC9	; 201
   1c72e:	93 e3       	ldi	r25, 0x33	; 51
   1c730:	1f 92       	push	r1
   1c732:	9f 93       	push	r25
   1c734:	8f 93       	push	r24
   1c736:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    return(1);
   1c73a:	0f 90       	pop	r0
   1c73c:	0f 90       	pop	r0
   1c73e:	0f 90       	pop	r0
   1c740:	0f 90       	pop	r0
   1c742:	0f 90       	pop	r0
   1c744:	81 e0       	ldi	r24, 0x01	; 1
   1c746:	90 e0       	ldi	r25, 0x00	; 0
   1c748:	02 c0       	rjmp	.+4      	; 0x1c74e <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c74a:	8f ef       	ldi	r24, 0xFF	; 255
   1c74c:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1c74e:	cd b7       	in	r28, 0x3d	; 61
   1c750:	de b7       	in	r29, 0x3e	; 62
   1c752:	e6 e0       	ldi	r30, 0x06	; 6
   1c754:	b8 c5       	rjmp	.+2928   	; 0x1d2c6 <__epilogue_restores__+0x18>

0001c756 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1c756:	a0 e0       	ldi	r26, 0x00	; 0
   1c758:	b0 e0       	ldi	r27, 0x00	; 0
   1c75a:	e0 eb       	ldi	r30, 0xB0	; 176
   1c75c:	f3 ee       	ldi	r31, 0xE3	; 227
   1c75e:	93 c5       	rjmp	.+2854   	; 0x1d286 <__prologue_saves__+0x10>
   1c760:	6c 01       	movw	r12, r24
   1c762:	8b 01       	movw	r16, r22
   1c764:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1c766:	fc 01       	movw	r30, r24
   1c768:	80 81       	ld	r24, Z
   1c76a:	81 11       	cpse	r24, r1
   1c76c:	03 c0       	rjmp	.+6      	; 0x1c774 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1c76e:	81 ea       	ldi	r24, 0xA1	; 161
   1c770:	93 e3       	ldi	r25, 0x33	; 51
   1c772:	06 c0       	rjmp	.+12     	; 0x1c780 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1c774:	fb 01       	movw	r30, r22
   1c776:	80 81       	ld	r24, Z
   1c778:	81 11       	cpse	r24, r1
   1c77a:	0b c0       	rjmp	.+22     	; 0x1c792 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1c77c:	8a e7       	ldi	r24, 0x7A	; 122
   1c77e:	93 e3       	ldi	r25, 0x33	; 51
   1c780:	1f 92       	push	r1
   1c782:	9f 93       	push	r25
   1c784:	8f 93       	push	r24
   1c786:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1c78a:	0f 90       	pop	r0
   1c78c:	0f 90       	pop	r0
   1c78e:	0f 90       	pop	r0
   1c790:	62 c0       	rjmp	.+196    	; 0x1c856 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1c792:	fa 01       	movw	r30, r20
   1c794:	80 81       	ld	r24, Z
   1c796:	81 11       	cpse	r24, r1
   1c798:	03 c0       	rjmp	.+6      	; 0x1c7a0 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1c79a:	83 e5       	ldi	r24, 0x53	; 83
   1c79c:	93 e3       	ldi	r25, 0x33	; 51
   1c79e:	f0 cf       	rjmp	.-32     	; 0x1c780 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1c7a0:	ca 01       	movw	r24, r20
   1c7a2:	0e 94 f7 c8 	call	0x191ee	; 0x191ee <lif_checkname>
   1c7a6:	89 2b       	or	r24, r25
   1c7a8:	19 f4       	brne	.+6      	; 0x1c7b0 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1c7aa:	8d e1       	ldi	r24, 0x1D	; 29
   1c7ac:	93 e3       	ldi	r25, 0x33	; 51
   1c7ae:	e8 cf       	rjmp	.-48     	; 0x1c780 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c7b0:	67 e6       	ldi	r22, 0x67	; 103
   1c7b2:	78 e0       	ldi	r23, 0x08	; 8
   1c7b4:	c6 01       	movw	r24, r12
   1c7b6:	0e 94 27 d7 	call	0x1ae4e	; 0x1ae4e <lif_open_volume>
   1c7ba:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c7bc:	00 97       	sbiw	r24, 0x00	; 0
   1c7be:	09 f4       	brne	.+2      	; 0x1c7c2 <lif_rename_file+0x6c>
   1c7c0:	4a c0       	rjmp	.+148    	; 0x1c856 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1c7c2:	b8 01       	movw	r22, r16
   1c7c4:	0e 94 8c d9 	call	0x1b318	; 0x1b318 <lif_find_file>
   1c7c8:	5c 01       	movw	r10, r24
    if(index == -1)
   1c7ca:	01 96       	adiw	r24, 0x01	; 1
   1c7cc:	c9 f4       	brne	.+50     	; 0x1c800 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1c7ce:	1f 93       	push	r17
   1c7d0:	0f 93       	push	r16
   1c7d2:	df 92       	push	r13
   1c7d4:	cf 92       	push	r12
   1c7d6:	84 ef       	ldi	r24, 0xF4	; 244
   1c7d8:	92 e3       	ldi	r25, 0x32	; 50
   1c7da:	1f 92       	push	r1
   1c7dc:	9f 93       	push	r25
   1c7de:	8f 93       	push	r24
   1c7e0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c7e4:	ce 01       	movw	r24, r28
   1c7e6:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1c7ea:	8d b7       	in	r24, 0x3d	; 61
   1c7ec:	9e b7       	in	r25, 0x3e	; 62
   1c7ee:	07 96       	adiw	r24, 0x07	; 7
   1c7f0:	0f b6       	in	r0, 0x3f	; 63
   1c7f2:	f8 94       	cli
   1c7f4:	9e bf       	out	0x3e, r25	; 62
   1c7f6:	0f be       	out	0x3f, r0	; 63
   1c7f8:	8d bf       	out	0x3d, r24	; 61
   1c7fa:	80 e0       	ldi	r24, 0x00	; 0
   1c7fc:	90 e0       	ldi	r25, 0x00	; 0
   1c7fe:	2d c0       	rjmp	.+90     	; 0x1c85a <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1c800:	4a e0       	ldi	r20, 0x0A	; 10
   1c802:	50 e0       	ldi	r21, 0x00	; 0
   1c804:	b7 01       	movw	r22, r14
   1c806:	ce 01       	movw	r24, r28
   1c808:	81 5b       	subi	r24, 0xB1	; 177
   1c80a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c80c:	0e 94 31 c9 	call	0x19262	; 0x19262 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1c810:	b5 01       	movw	r22, r10
   1c812:	ce 01       	movw	r24, r28
   1c814:	0e 94 6d d1 	call	0x1a2da	; 0x1a2da <lif_writedirindex>
   1c818:	89 2b       	or	r24, r25
   1c81a:	21 f4       	brne	.+8      	; 0x1c824 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c81c:	ce 01       	movw	r24, r28
   1c81e:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
   1c822:	19 c0       	rjmp	.+50     	; 0x1c856 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1c824:	ff 92       	push	r15
   1c826:	ef 92       	push	r14
   1c828:	1f 93       	push	r17
   1c82a:	0f 93       	push	r16
   1c82c:	8d ed       	ldi	r24, 0xDD	; 221
   1c82e:	92 e3       	ldi	r25, 0x32	; 50
   1c830:	1f 92       	push	r1
   1c832:	9f 93       	push	r25
   1c834:	8f 93       	push	r24
   1c836:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c83a:	ce 01       	movw	r24, r28
   1c83c:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c840:	ed b7       	in	r30, 0x3d	; 61
   1c842:	fe b7       	in	r31, 0x3e	; 62
   1c844:	37 96       	adiw	r30, 0x07	; 7
   1c846:	0f b6       	in	r0, 0x3f	; 63
   1c848:	f8 94       	cli
   1c84a:	fe bf       	out	0x3e, r31	; 62
   1c84c:	0f be       	out	0x3f, r0	; 63
   1c84e:	ed bf       	out	0x3d, r30	; 61
   1c850:	81 e0       	ldi	r24, 0x01	; 1
   1c852:	90 e0       	ldi	r25, 0x00	; 0
   1c854:	02 c0       	rjmp	.+4      	; 0x1c85a <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c856:	8f ef       	ldi	r24, 0xFF	; 255
   1c858:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c85a:	cd b7       	in	r28, 0x3d	; 61
   1c85c:	de b7       	in	r29, 0x3e	; 62
   1c85e:	ea e0       	ldi	r30, 0x0A	; 10
   1c860:	2e c5       	rjmp	.+2652   	; 0x1d2be <__epilogue_restores__+0x10>

0001c862 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c862:	4f 92       	push	r4
   1c864:	5f 92       	push	r5
   1c866:	6f 92       	push	r6
   1c868:	7f 92       	push	r7
   1c86a:	af 92       	push	r10
   1c86c:	bf 92       	push	r11
   1c86e:	cf 92       	push	r12
   1c870:	df 92       	push	r13
   1c872:	ef 92       	push	r14
   1c874:	ff 92       	push	r15
   1c876:	0f 93       	push	r16
   1c878:	1f 93       	push	r17
   1c87a:	cf 93       	push	r28
   1c87c:	df 93       	push	r29
   1c87e:	27 01       	movw	r4, r14
   1c880:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c882:	dc 01       	movw	r26, r24
   1c884:	ec 91       	ld	r30, X
   1c886:	e1 11       	cpse	r30, r1
   1c888:	03 c0       	rjmp	.+6      	; 0x1c890 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c88a:	84 eb       	ldi	r24, 0xB4	; 180
   1c88c:	92 e3       	ldi	r25, 0x32	; 50
   1c88e:	16 c0       	rjmp	.+44     	; 0x1c8bc <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c890:	db 01       	movw	r26, r22
   1c892:	ec 91       	ld	r30, X
   1c894:	e1 11       	cpse	r30, r1
   1c896:	03 c0       	rjmp	.+6      	; 0x1c89e <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c898:	8f e8       	ldi	r24, 0x8F	; 143
   1c89a:	92 e3       	ldi	r25, 0x32	; 50
   1c89c:	0f c0       	rjmp	.+30     	; 0x1c8bc <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c89e:	21 15       	cp	r18, r1
   1c8a0:	31 05       	cpc	r19, r1
   1c8a2:	41 05       	cpc	r20, r1
   1c8a4:	51 05       	cpc	r21, r1
   1c8a6:	19 f4       	brne	.+6      	; 0x1c8ae <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c8a8:	8c e6       	ldi	r24, 0x6C	; 108
   1c8aa:	92 e3       	ldi	r25, 0x32	; 50
   1c8ac:	07 c0       	rjmp	.+14     	; 0x1c8bc <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c8ae:	e1 14       	cp	r14, r1
   1c8b0:	f1 04       	cpc	r15, r1
   1c8b2:	01 05       	cpc	r16, r1
   1c8b4:	11 05       	cpc	r17, r1
   1c8b6:	59 f4       	brne	.+22     	; 0x1c8ce <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c8b8:	8c e4       	ldi	r24, 0x4C	; 76
   1c8ba:	92 e3       	ldi	r25, 0x32	; 50
   1c8bc:	1f 92       	push	r1
   1c8be:	9f 93       	push	r25
   1c8c0:	8f 93       	push	r24
   1c8c2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
        return(-1);
   1c8c6:	0f 90       	pop	r0
   1c8c8:	0f 90       	pop	r0
   1c8ca:	0f 90       	pop	r0
   1c8cc:	30 c0       	rjmp	.+96     	; 0x1c92e <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c8ce:	67 01       	movw	r12, r14
   1c8d0:	78 01       	movw	r14, r16
   1c8d2:	b2 e0       	ldi	r27, 0x02	; 2
   1c8d4:	cb 1a       	sub	r12, r27
   1c8d6:	d1 08       	sbc	r13, r1
   1c8d8:	e1 08       	sbc	r14, r1
   1c8da:	f1 08       	sbc	r15, r1
   1c8dc:	56 01       	movw	r10, r12
   1c8de:	67 01       	movw	r12, r14
   1c8e0:	a2 1a       	sub	r10, r18
   1c8e2:	b3 0a       	sbc	r11, r19
   1c8e4:	c4 0a       	sbc	r12, r20
   1c8e6:	d5 0a       	sbc	r13, r21
   1c8e8:	79 01       	movw	r14, r18
   1c8ea:	8a 01       	movw	r16, r20
   1c8ec:	22 e0       	ldi	r18, 0x02	; 2
   1c8ee:	30 e0       	ldi	r19, 0x00	; 0
   1c8f0:	40 e0       	ldi	r20, 0x00	; 0
   1c8f2:	50 e0       	ldi	r21, 0x00	; 0
   1c8f4:	0e 94 e9 d2 	call	0x1a5d2	; 0x1a5d2 <lif_create_volume>
    if(LIF == NULL)
   1c8f8:	00 97       	sbiw	r24, 0x00	; 0
   1c8fa:	c9 f0       	breq	.+50     	; 0x1c92e <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c8fc:	0e 94 83 d0 	call	0x1a106	; 0x1a106 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1c900:	82 01       	movw	r16, r4
   1c902:	d6 2d       	mov	r29, r6
   1c904:	c7 2d       	mov	r28, r7
   1c906:	7f 92       	push	r7
   1c908:	6f 92       	push	r6
   1c90a:	5f 92       	push	r5
   1c90c:	4f 92       	push	r4
   1c90e:	8c e2       	ldi	r24, 0x2C	; 44
   1c910:	92 e3       	ldi	r25, 0x32	; 50
   1c912:	1f 92       	push	r1
   1c914:	9f 93       	push	r25
   1c916:	8f 93       	push	r24
   1c918:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    return(end);
   1c91c:	8d b7       	in	r24, 0x3d	; 61
   1c91e:	9e b7       	in	r25, 0x3e	; 62
   1c920:	07 96       	adiw	r24, 0x07	; 7
   1c922:	0f b6       	in	r0, 0x3f	; 63
   1c924:	f8 94       	cli
   1c926:	9e bf       	out	0x3e, r25	; 62
   1c928:	0f be       	out	0x3f, r0	; 63
   1c92a:	8d bf       	out	0x3d, r24	; 61
   1c92c:	04 c0       	rjmp	.+8      	; 0x1c936 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c92e:	0f ef       	ldi	r16, 0xFF	; 255
   1c930:	1f ef       	ldi	r17, 0xFF	; 255
   1c932:	df ef       	ldi	r29, 0xFF	; 255
   1c934:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1c936:	b8 01       	movw	r22, r16
   1c938:	8d 2f       	mov	r24, r29
   1c93a:	9c 2f       	mov	r25, r28
   1c93c:	df 91       	pop	r29
   1c93e:	cf 91       	pop	r28
   1c940:	1f 91       	pop	r17
   1c942:	0f 91       	pop	r16
   1c944:	ff 90       	pop	r15
   1c946:	ef 90       	pop	r14
   1c948:	df 90       	pop	r13
   1c94a:	cf 90       	pop	r12
   1c94c:	bf 90       	pop	r11
   1c94e:	af 90       	pop	r10
   1c950:	7f 90       	pop	r7
   1c952:	6f 90       	pop	r6
   1c954:	5f 90       	pop	r5
   1c956:	4f 90       	pop	r4
   1c958:	08 95       	ret

0001c95a <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c95a:	a0 e0       	ldi	r26, 0x00	; 0
   1c95c:	b0 e0       	ldi	r27, 0x00	; 0
   1c95e:	e2 eb       	ldi	r30, 0xB2	; 178
   1c960:	f4 ee       	ldi	r31, 0xE4	; 228
   1c962:	8f c4       	rjmp	.+2334   	; 0x1d282 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1c964:	fb 01       	movw	r30, r22
   1c966:	20 81       	ld	r18, Z
   1c968:	31 81       	ldd	r19, Z+1	; 0x01
   1c96a:	23 2b       	or	r18, r19
   1c96c:	59 f0       	breq	.+22     	; 0x1c984 <lif_tests+0x2a>
   1c96e:	8b 01       	movw	r16, r22
   1c970:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c972:	fb 01       	movw	r30, r22
   1c974:	a2 80       	ldd	r10, Z+2	; 0x02
   1c976:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c978:	02 97       	sbiw	r24, 0x02	; 2
   1c97a:	3c f4       	brge	.+14     	; 0x1c98a <lif_tests+0x30>
    {
        lif_help(1);
   1c97c:	81 e0       	ldi	r24, 0x01	; 1
   1c97e:	90 e0       	ldi	r25, 0x00	; 0
   1c980:	0e 94 ee c6 	call	0x18ddc	; 0x18ddc <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1c984:	80 e0       	ldi	r24, 0x00	; 0
   1c986:	90 e0       	ldi	r25, 0x00	; 0
   1c988:	0a c1       	rjmp	.+532    	; 0x1cb9e <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c98a:	a1 14       	cp	r10, r1
   1c98c:	b1 04       	cpc	r11, r1
   1c98e:	b1 f3       	breq	.-20     	; 0x1c97c <lif_tests+0x22>
   1c990:	6b e0       	ldi	r22, 0x0B	; 11
   1c992:	76 e1       	ldi	r23, 0x16	; 22
   1c994:	c5 01       	movw	r24, r10
   1c996:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   1c99a:	89 2b       	or	r24, r25
   1c99c:	79 f7       	brne	.-34     	; 0x1c97c <lif_tests+0x22>
   1c99e:	6a e0       	ldi	r22, 0x0A	; 10
   1c9a0:	76 e1       	ldi	r23, 0x16	; 22
   1c9a2:	c5 01       	movw	r24, r10
   1c9a4:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   1c9a8:	89 2b       	or	r24, r25
   1c9aa:	41 f7       	brne	.-48     	; 0x1c97c <lif_tests+0x22>
   1c9ac:	60 e1       	ldi	r22, 0x10	; 16
   1c9ae:	76 e1       	ldi	r23, 0x16	; 22
   1c9b0:	c5 01       	movw	r24, r10
   1c9b2:	0e 94 59 31 	call	0x62b2	; 0x62b2 <MATCH>
   1c9b6:	89 2b       	or	r24, r25
   1c9b8:	09 f7       	brne	.-62     	; 0x1c97c <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c9ba:	94 01       	movw	r18, r8
   1c9bc:	42 e0       	ldi	r20, 0x02	; 2
   1c9be:	50 e0       	ldi	r21, 0x00	; 0
   1c9c0:	63 e1       	ldi	r22, 0x13	; 19
   1c9c2:	76 e1       	ldi	r23, 0x16	; 22
   1c9c4:	c5 01       	movw	r24, r10
   1c9c6:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1c9ca:	89 2b       	or	r24, r25
   1c9cc:	69 f0       	breq	.+26     	; 0x1c9e8 <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1c9ce:	8f ef       	ldi	r24, 0xFF	; 255
   1c9d0:	9f ef       	ldi	r25, 0xFF	; 255
   1c9d2:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <debuglevel+0x1>
   1c9d6:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <debuglevel>
		ptr = argv[ind++];
   1c9da:	f8 01       	movw	r30, r16
   1c9dc:	a4 80       	ldd	r10, Z+4	; 0x04
   1c9de:	b5 80       	ldd	r11, Z+5	; 0x05
   1c9e0:	f3 e0       	ldi	r31, 0x03	; 3
   1c9e2:	ef 2e       	mov	r14, r31
   1c9e4:	f1 2c       	mov	r15, r1
   1c9e6:	03 c0       	rjmp	.+6      	; 0x1c9ee <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c9e8:	e2 e0       	ldi	r30, 0x02	; 2
   1c9ea:	ee 2e       	mov	r14, r30
   1c9ec:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c9ee:	67 01       	movw	r12, r14
   1c9f0:	f3 e0       	ldi	r31, 0x03	; 3
   1c9f2:	cf 0e       	add	r12, r31
   1c9f4:	d1 1c       	adc	r13, r1
   1c9f6:	94 01       	movw	r18, r8
   1c9f8:	a6 01       	movw	r20, r12
   1c9fa:	66 e1       	ldi	r22, 0x16	; 22
   1c9fc:	76 e1       	ldi	r23, 0x16	; 22
   1c9fe:	c5 01       	movw	r24, r10
   1ca00:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ca04:	e7 01       	movw	r28, r14
   1ca06:	22 96       	adiw	r28, 0x02	; 2
   1ca08:	89 2b       	or	r24, r25
   1ca0a:	79 f0       	breq	.+30     	; 0x1ca2a <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1ca0c:	cc 0f       	add	r28, r28
   1ca0e:	dd 1f       	adc	r29, r29
   1ca10:	c0 0f       	add	r28, r16
   1ca12:	d1 1f       	adc	r29, r17
   1ca14:	48 81       	ld	r20, Y
   1ca16:	59 81       	ldd	r21, Y+1	; 0x01
   1ca18:	fe 01       	movw	r30, r28
   1ca1a:	32 97       	sbiw	r30, 0x02	; 2
   1ca1c:	60 81       	ld	r22, Z
   1ca1e:	71 81       	ldd	r23, Z+1	; 0x01
   1ca20:	24 97       	sbiw	r28, 0x04	; 4
   1ca22:	88 81       	ld	r24, Y
   1ca24:	99 81       	ldd	r25, Y+1	; 0x01
   1ca26:	67 dc       	rcall	.-1842   	; 0x1c2f6 <lif_add_lif_file>
   1ca28:	b8 c0       	rjmp	.+368    	; 0x1cb9a <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1ca2a:	94 01       	movw	r18, r8
   1ca2c:	a6 01       	movw	r20, r12
   1ca2e:	6d e1       	ldi	r22, 0x1D	; 29
   1ca30:	76 e1       	ldi	r23, 0x16	; 22
   1ca32:	c5 01       	movw	r24, r10
   1ca34:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ca38:	89 2b       	or	r24, r25
   1ca3a:	81 f0       	breq	.+32     	; 0x1ca5c <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1ca3c:	cc 0f       	add	r28, r28
   1ca3e:	dd 1f       	adc	r29, r29
   1ca40:	c0 0f       	add	r28, r16
   1ca42:	d1 1f       	adc	r29, r17
   1ca44:	48 81       	ld	r20, Y
   1ca46:	59 81       	ldd	r21, Y+1	; 0x01
   1ca48:	fe 01       	movw	r30, r28
   1ca4a:	32 97       	sbiw	r30, 0x02	; 2
   1ca4c:	60 81       	ld	r22, Z
   1ca4e:	71 81       	ldd	r23, Z+1	; 0x01
   1ca50:	24 97       	sbiw	r28, 0x04	; 4
   1ca52:	88 81       	ld	r24, Y
   1ca54:	99 81       	ldd	r25, Y+1	; 0x01
   1ca56:	0e 94 10 dc 	call	0x1b820	; 0x1b820 <lif_add_ascii_file_as_e010>
   1ca5a:	9f c0       	rjmp	.+318    	; 0x1cb9a <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1ca5c:	94 01       	movw	r18, r8
   1ca5e:	ae 01       	movw	r20, r28
   1ca60:	61 e2       	ldi	r22, 0x21	; 33
   1ca62:	76 e1       	ldi	r23, 0x16	; 22
   1ca64:	c5 01       	movw	r24, r10
   1ca66:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ca6a:	89 2b       	or	r24, r25
   1ca6c:	71 f0       	breq	.+28     	; 0x1ca8a <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1ca6e:	c7 01       	movw	r24, r14
   1ca70:	01 96       	adiw	r24, 0x01	; 1
   1ca72:	88 0f       	add	r24, r24
   1ca74:	99 1f       	adc	r25, r25
   1ca76:	e8 01       	movw	r28, r16
   1ca78:	c8 0f       	add	r28, r24
   1ca7a:	d9 1f       	adc	r29, r25
   1ca7c:	68 81       	ld	r22, Y
   1ca7e:	79 81       	ldd	r23, Y+1	; 0x01
   1ca80:	22 97       	sbiw	r28, 0x02	; 2
   1ca82:	88 81       	ld	r24, Y
   1ca84:	99 81       	ldd	r25, Y+1	; 0x01
   1ca86:	cf dd       	rcall	.-1122   	; 0x1c626 <lif_del_file>
   1ca88:	88 c0       	rjmp	.+272    	; 0x1cb9a <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1ca8a:	94 01       	movw	r18, r8
   1ca8c:	a7 01       	movw	r20, r14
   1ca8e:	4c 5f       	subi	r20, 0xFC	; 252
   1ca90:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca92:	65 e2       	ldi	r22, 0x25	; 37
   1ca94:	76 e1       	ldi	r23, 0x16	; 22
   1ca96:	c5 01       	movw	r24, r10
   1ca98:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ca9c:	89 2b       	or	r24, r25
   1ca9e:	f1 f0       	breq	.+60     	; 0x1cadc <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1caa0:	e6 01       	movw	r28, r12
   1caa2:	cc 0f       	add	r28, r28
   1caa4:	dd 1f       	adc	r29, r29
   1caa6:	c0 0f       	add	r28, r16
   1caa8:	d1 1f       	adc	r29, r17
   1caaa:	88 81       	ld	r24, Y
   1caac:	99 81       	ldd	r25, Y+1	; 0x01
   1caae:	0e 94 d7 45 	call	0x8bae	; 0x8bae <atol>
   1cab2:	6b 01       	movw	r12, r22
   1cab4:	7c 01       	movw	r14, r24
   1cab6:	fe 01       	movw	r30, r28
   1cab8:	32 97       	sbiw	r30, 0x02	; 2
   1caba:	80 81       	ld	r24, Z
   1cabc:	91 81       	ldd	r25, Z+1	; 0x01
   1cabe:	0e 94 d7 45 	call	0x8bae	; 0x8bae <atol>
   1cac2:	9b 01       	movw	r18, r22
   1cac4:	ac 01       	movw	r20, r24
   1cac6:	fe 01       	movw	r30, r28
   1cac8:	34 97       	sbiw	r30, 0x04	; 4
   1caca:	60 81       	ld	r22, Z
   1cacc:	71 81       	ldd	r23, Z+1	; 0x01
   1cace:	26 97       	sbiw	r28, 0x06	; 6
   1cad0:	87 01       	movw	r16, r14
   1cad2:	76 01       	movw	r14, r12
   1cad4:	88 81       	ld	r24, Y
   1cad6:	99 81       	ldd	r25, Y+1	; 0x01
   1cad8:	c4 de       	rcall	.-632    	; 0x1c862 <lif_create_image>
   1cada:	5f c0       	rjmp	.+190    	; 0x1cb9a <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1cadc:	94 01       	movw	r18, r8
   1cade:	a7 01       	movw	r20, r14
   1cae0:	4f 5f       	subi	r20, 0xFF	; 255
   1cae2:	5f 4f       	sbci	r21, 0xFF	; 255
   1cae4:	6a e3       	ldi	r22, 0x3A	; 58
   1cae6:	7b e0       	ldi	r23, 0x0B	; 11
   1cae8:	c5 01       	movw	r24, r10
   1caea:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1caee:	89 2b       	or	r24, r25
   1caf0:	59 f0       	breq	.+22     	; 0x1cb08 <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1caf2:	c7 01       	movw	r24, r14
   1caf4:	88 0f       	add	r24, r24
   1caf6:	99 1f       	adc	r25, r25
   1caf8:	e8 01       	movw	r28, r16
   1cafa:	c8 0f       	add	r28, r24
   1cafc:	d9 1f       	adc	r29, r25
   1cafe:	88 81       	ld	r24, Y
   1cb00:	99 81       	ldd	r25, Y+1	; 0x01
   1cb02:	0e 94 1f d8 	call	0x1b03e	; 0x1b03e <lif_dir>
   1cb06:	49 c0       	rjmp	.+146    	; 0x1cb9a <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1cb08:	94 01       	movw	r18, r8
   1cb0a:	a6 01       	movw	r20, r12
   1cb0c:	6c e2       	ldi	r22, 0x2C	; 44
   1cb0e:	76 e1       	ldi	r23, 0x16	; 22
   1cb10:	c5 01       	movw	r24, r10
   1cb12:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cb16:	89 2b       	or	r24, r25
   1cb18:	79 f0       	breq	.+30     	; 0x1cb38 <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1cb1a:	cc 0f       	add	r28, r28
   1cb1c:	dd 1f       	adc	r29, r29
   1cb1e:	c0 0f       	add	r28, r16
   1cb20:	d1 1f       	adc	r29, r17
   1cb22:	48 81       	ld	r20, Y
   1cb24:	59 81       	ldd	r21, Y+1	; 0x01
   1cb26:	fe 01       	movw	r30, r28
   1cb28:	32 97       	sbiw	r30, 0x02	; 2
   1cb2a:	60 81       	ld	r22, Z
   1cb2c:	71 81       	ldd	r23, Z+1	; 0x01
   1cb2e:	24 97       	sbiw	r28, 0x04	; 4
   1cb30:	88 81       	ld	r24, Y
   1cb32:	99 81       	ldd	r25, Y+1	; 0x01
   1cb34:	9a da       	rcall	.-2764   	; 0x1c06a <lif_extract_lif_as_lif>
   1cb36:	31 c0       	rjmp	.+98     	; 0x1cb9a <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1cb38:	94 01       	movw	r18, r8
   1cb3a:	a6 01       	movw	r20, r12
   1cb3c:	67 e3       	ldi	r22, 0x37	; 55
   1cb3e:	76 e1       	ldi	r23, 0x16	; 22
   1cb40:	c5 01       	movw	r24, r10
   1cb42:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cb46:	89 2b       	or	r24, r25
   1cb48:	81 f0       	breq	.+32     	; 0x1cb6a <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1cb4a:	cc 0f       	add	r28, r28
   1cb4c:	dd 1f       	adc	r29, r29
   1cb4e:	c0 0f       	add	r28, r16
   1cb50:	d1 1f       	adc	r29, r17
   1cb52:	48 81       	ld	r20, Y
   1cb54:	59 81       	ldd	r21, Y+1	; 0x01
   1cb56:	fe 01       	movw	r30, r28
   1cb58:	32 97       	sbiw	r30, 0x02	; 2
   1cb5a:	60 81       	ld	r22, Z
   1cb5c:	71 81       	ldd	r23, Z+1	; 0x01
   1cb5e:	24 97       	sbiw	r28, 0x04	; 4
   1cb60:	88 81       	ld	r24, Y
   1cb62:	99 81       	ldd	r25, Y+1	; 0x01
   1cb64:	0e 94 49 dd 	call	0x1ba92	; 0x1ba92 <lif_extract_e010_as_ascii>
   1cb68:	18 c0       	rjmp	.+48     	; 0x1cb9a <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1cb6a:	94 01       	movw	r18, r8
   1cb6c:	a6 01       	movw	r20, r12
   1cb6e:	67 e4       	ldi	r22, 0x47	; 71
   1cb70:	7b e0       	ldi	r23, 0x0B	; 11
   1cb72:	c5 01       	movw	r24, r10
   1cb74:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cb78:	89 2b       	or	r24, r25
   1cb7a:	09 f4       	brne	.+2      	; 0x1cb7e <lif_tests+0x224>
   1cb7c:	03 cf       	rjmp	.-506    	; 0x1c984 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1cb7e:	cc 0f       	add	r28, r28
   1cb80:	dd 1f       	adc	r29, r29
   1cb82:	c0 0f       	add	r28, r16
   1cb84:	d1 1f       	adc	r29, r17
   1cb86:	48 81       	ld	r20, Y
   1cb88:	59 81       	ldd	r21, Y+1	; 0x01
   1cb8a:	fe 01       	movw	r30, r28
   1cb8c:	32 97       	sbiw	r30, 0x02	; 2
   1cb8e:	60 81       	ld	r22, Z
   1cb90:	71 81       	ldd	r23, Z+1	; 0x01
   1cb92:	24 97       	sbiw	r28, 0x04	; 4
   1cb94:	88 81       	ld	r24, Y
   1cb96:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1cb98:	de dd       	rcall	.-1092   	; 0x1c756 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1cb9a:	81 e0       	ldi	r24, 0x01	; 1
   1cb9c:	90 e0       	ldi	r25, 0x00	; 0
   1cb9e:	cd b7       	in	r28, 0x3d	; 61
   1cba0:	de b7       	in	r29, 0x3e	; 62
   1cba2:	ec e0       	ldi	r30, 0x0C	; 12
   1cba4:	8a c3       	rjmp	.+1812   	; 0x1d2ba <__epilogue_restores__+0xc>

0001cba6 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1cba6:	8e e5       	ldi	r24, 0x5E	; 94
   1cba8:	98 e4       	ldi	r25, 0x48	; 72
   1cbaa:	1f 92       	push	r1
   1cbac:	9f 93       	push	r25
   1cbae:	8f 93       	push	r24
   1cbb0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1cbb4:	8f e3       	ldi	r24, 0x3F	; 63
   1cbb6:	98 e4       	ldi	r25, 0x48	; 72
   1cbb8:	1f 92       	push	r1
   1cbba:	9f 93       	push	r25
   1cbbc:	8f 93       	push	r24
   1cbbe:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1cbc2:	82 e2       	ldi	r24, 0x22	; 34
   1cbc4:	98 e4       	ldi	r25, 0x48	; 72
   1cbc6:	1f 92       	push	r1
   1cbc8:	9f 93       	push	r25
   1cbca:	8f 93       	push	r24
   1cbcc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf(" GNU version 3\n");
   1cbd0:	82 e1       	ldi	r24, 0x12	; 18
   1cbd2:	98 e4       	ldi	r25, 0x48	; 72
   1cbd4:	1f 92       	push	r1
   1cbd6:	9f 93       	push	r25
   1cbd8:	8f 93       	push	r24
   1cbda:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cbde:	8b ee       	ldi	r24, 0xEB	; 235
   1cbe0:	97 e4       	ldi	r25, 0x47	; 71
   1cbe2:	1f 92       	push	r1
   1cbe4:	9f 93       	push	r25
   1cbe6:	8f 93       	push	r24
   1cbe8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1cbec:	8f e3       	ldi	r24, 0x3F	; 63
   1cbee:	96 e1       	ldi	r25, 0x16	; 22
   1cbf0:	9f 93       	push	r25
   1cbf2:	8f 93       	push	r24
   1cbf4:	81 ed       	ldi	r24, 0xD1	; 209
   1cbf6:	97 e4       	ldi	r25, 0x47	; 71
   1cbf8:	1f 92       	push	r1
   1cbfa:	9f 93       	push	r25
   1cbfc:	8f 93       	push	r24
   1cbfe:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1cc02:	83 e6       	ldi	r24, 0x63	; 99
   1cc04:	96 e1       	ldi	r25, 0x16	; 22
   1cc06:	9f 93       	push	r25
   1cc08:	8f 93       	push	r24
   1cc0a:	87 eb       	ldi	r24, 0xB7	; 183
   1cc0c:	97 e4       	ldi	r25, 0x47	; 71
   1cc0e:	1f 92       	push	r1
   1cc10:	9f 93       	push	r25
   1cc12:	8f 93       	push	r24
   1cc14:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
    printf("\n");
   1cc18:	85 eb       	ldi	r24, 0xB5	; 181
   1cc1a:	97 e4       	ldi	r25, 0x47	; 71
   1cc1c:	1f 92       	push	r1
   1cc1e:	9f 93       	push	r25
   1cc20:	8f 93       	push	r24
   1cc22:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
}
   1cc26:	8d b7       	in	r24, 0x3d	; 61
   1cc28:	9e b7       	in	r25, 0x3e	; 62
   1cc2a:	4c 96       	adiw	r24, 0x1c	; 28
   1cc2c:	0f b6       	in	r0, 0x3f	; 63
   1cc2e:	f8 94       	cli
   1cc30:	9e bf       	out	0x3e, r25	; 62
   1cc32:	0f be       	out	0x3f, r0	; 63
   1cc34:	8d bf       	out	0x3d, r24	; 61
   1cc36:	08 95       	ret

0001cc38 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1cc38:	86 ea       	ldi	r24, 0xA6	; 166
   1cc3a:	97 e4       	ldi	r25, 0x47	; 71
   1cc3c:	1f 92       	push	r1
   1cc3e:	9f 93       	push	r25
   1cc40:	8f 93       	push	r24
   1cc42:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    clock_elapsed_begin();
   1cc46:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1cc4a:	87 e8       	ldi	r24, 0x87	; 135
   1cc4c:	96 e1       	ldi	r25, 0x16	; 22
   1cc4e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    clock_elapsed_begin();
   1cc52:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
   1cc56:	83 ef       	ldi	r24, 0xF3	; 243
   1cc58:	91 e0       	ldi	r25, 0x01	; 1
   1cc5a:	01 97       	sbiw	r24, 0x01	; 1
   1cc5c:	f1 f7       	brne	.-4      	; 0x1cc5a <delay_tests+0x22>
   1cc5e:	00 c0       	rjmp	.+0      	; 0x1cc60 <delay_tests+0x28>
   1cc60:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1cc62:	8e e9       	ldi	r24, 0x9E	; 158
   1cc64:	96 e1       	ldi	r25, 0x16	; 22
   1cc66:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    clock_elapsed_begin();
   1cc6a:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
   1cc6e:	83 ec       	ldi	r24, 0xC3	; 195
   1cc70:	99 e0       	ldi	r25, 0x09	; 9
   1cc72:	01 97       	sbiw	r24, 0x01	; 1
   1cc74:	f1 f7       	brne	.-4      	; 0x1cc72 <delay_tests+0x3a>
   1cc76:	00 c0       	rjmp	.+0      	; 0x1cc78 <delay_tests+0x40>
   1cc78:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1cc7a:	8d ea       	ldi	r24, 0xAD	; 173
   1cc7c:	96 e1       	ldi	r25, 0x16	; 22
   1cc7e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    printf("My delays\n");
   1cc82:	8b e9       	ldi	r24, 0x9B	; 155
   1cc84:	97 e4       	ldi	r25, 0x47	; 71
   1cc86:	1f 92       	push	r1
   1cc88:	9f 93       	push	r25
   1cc8a:	8f 93       	push	r24
   1cc8c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>

    clock_elapsed_begin();
   1cc90:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
    delayus(100U);
   1cc94:	64 e6       	ldi	r22, 0x64	; 100
   1cc96:	70 e0       	ldi	r23, 0x00	; 0
   1cc98:	80 e0       	ldi	r24, 0x00	; 0
   1cc9a:	90 e0       	ldi	r25, 0x00	; 0
   1cc9c:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(100)");
   1cca0:	8c eb       	ldi	r24, 0xBC	; 188
   1cca2:	96 e1       	ldi	r25, 0x16	; 22
   1cca4:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    clock_elapsed_begin();
   1cca8:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
    delayus(500U);
   1ccac:	64 ef       	ldi	r22, 0xF4	; 244
   1ccae:	71 e0       	ldi	r23, 0x01	; 1
   1ccb0:	80 e0       	ldi	r24, 0x00	; 0
   1ccb2:	90 e0       	ldi	r25, 0x00	; 0
   1ccb4:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(500)");
   1ccb8:	89 ec       	ldi	r24, 0xC9	; 201
   1ccba:	96 e1       	ldi	r25, 0x16	; 22
   1ccbc:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    clock_elapsed_begin();
   1ccc0:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
    delayus(1100);
   1ccc4:	6c e4       	ldi	r22, 0x4C	; 76
   1ccc6:	74 e0       	ldi	r23, 0x04	; 4
   1ccc8:	80 e0       	ldi	r24, 0x00	; 0
   1ccca:	90 e0       	ldi	r25, 0x00	; 0
   1cccc:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(1100)");
   1ccd0:	86 ed       	ldi	r24, 0xD6	; 214
   1ccd2:	96 e1       	ldi	r25, 0x16	; 22
   1ccd4:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>

    clock_elapsed_begin();
   1ccd8:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_elapsed_begin>
    delayms(1000);
   1ccdc:	68 ee       	ldi	r22, 0xE8	; 232
   1ccde:	73 e0       	ldi	r23, 0x03	; 3
   1cce0:	80 e0       	ldi	r24, 0x00	; 0
   1cce2:	90 e0       	ldi	r25, 0x00	; 0
   1cce4:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
    clock_elapsed_end("delayms(1100)");
   1cce8:	84 ee       	ldi	r24, 0xE4	; 228
   1ccea:	96 e1       	ldi	r25, 0x16	; 22
   1ccec:	0e 94 64 34 	call	0x68c8	; 0x68c8 <clock_elapsed_end>
}
   1ccf0:	0f 90       	pop	r0
   1ccf2:	0f 90       	pop	r0
   1ccf4:	0f 90       	pop	r0
   1ccf6:	0f 90       	pop	r0
   1ccf8:	0f 90       	pop	r0
   1ccfa:	0f 90       	pop	r0
   1ccfc:	08 95       	ret

0001ccfe <help>:
   1ccfe:	53 df       	rcall	.-346    	; 0x1cba6 <copyright>
   1cd00:	80 e0       	ldi	r24, 0x00	; 0
   1cd02:	90 e0       	ldi	r25, 0x00	; 0
   1cd04:	0e 94 26 76 	call	0xec4c	; 0xec4c <fatfs_help>
   1cd08:	80 e0       	ldi	r24, 0x00	; 0
   1cd0a:	90 e0       	ldi	r25, 0x00	; 0
   1cd0c:	0e 94 6e 82 	call	0x104dc	; 0x104dc <posix_help>
   1cd10:	80 e0       	ldi	r24, 0x00	; 0
   1cd12:	90 e0       	ldi	r25, 0x00	; 0
   1cd14:	0e 94 ee c6 	call	0x18ddc	; 0x18ddc <lif_help>
   1cd18:	80 e0       	ldi	r24, 0x00	; 0
   1cd1a:	90 e0       	ldi	r25, 0x00	; 0
   1cd1c:	0e 94 95 97 	call	0x12f2a	; 0x12f2a <gpib_help>
   1cd20:	8c e7       	ldi	r24, 0x7C	; 124
   1cd22:	97 e4       	ldi	r25, 0x47	; 71
   1cd24:	1f 92       	push	r1
   1cd26:	9f 93       	push	r25
   1cd28:	8f 93       	push	r24
   1cd2a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cd2e:	0f 90       	pop	r0
   1cd30:	0f 90       	pop	r0
   1cd32:	0f 90       	pop	r0
   1cd34:	08 95       	ret

0001cd36 <task>:
   1cd36:	a4 ee       	ldi	r26, 0xE4	; 228
   1cd38:	b0 e0       	ldi	r27, 0x00	; 0
   1cd3a:	e0 ea       	ldi	r30, 0xA0	; 160
   1cd3c:	f6 ee       	ldi	r31, 0xE6	; 230
   1cd3e:	a7 c2       	rjmp	.+1358   	; 0x1d28e <__prologue_saves__+0x18>
   1cd40:	81 11       	cpse	r24, r1
   1cd42:	0e 94 33 97 	call	0x12e66	; 0x12e66 <gpib_task>
   1cd46:	80 e0       	ldi	r24, 0x00	; 0
   1cd48:	0e 94 91 2b 	call	0x5722	; 0x5722 <uart_rx_count>
   1cd4c:	89 2b       	or	r24, r25
   1cd4e:	09 f4       	brne	.+2      	; 0x1cd52 <task+0x1c>
   1cd50:	a0 c0       	rjmp	.+320    	; 0x1ce92 <task+0x15c>
   1cd52:	89 e7       	ldi	r24, 0x79	; 121
   1cd54:	97 e4       	ldi	r25, 0x47	; 71
   1cd56:	1f 92       	push	r1
   1cd58:	9f 93       	push	r25
   1cd5a:	8f 93       	push	r24
   1cd5c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cd60:	40 91 7a 1c 	lds	r20, 0x1C7A	; 0x801c7a <__iob>
   1cd64:	50 91 7b 1c 	lds	r21, 0x1C7B	; 0x801c7b <__iob+0x1>
   1cd68:	6e e7       	ldi	r22, 0x7E	; 126
   1cd6a:	70 e0       	ldi	r23, 0x00	; 0
   1cd6c:	ce 01       	movw	r24, r28
   1cd6e:	01 96       	adiw	r24, 0x01	; 1
   1cd70:	0e 94 51 79 	call	0xf2a2	; 0xf2a2 <fgets>
   1cd74:	42 e3       	ldi	r20, 0x32	; 50
   1cd76:	50 e0       	ldi	r21, 0x00	; 0
   1cd78:	be 01       	movw	r22, r28
   1cd7a:	6f 57       	subi	r22, 0x7F	; 127
   1cd7c:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd7e:	ce 01       	movw	r24, r28
   1cd80:	01 96       	adiw	r24, 0x01	; 1
   1cd82:	0e 94 ca 31 	call	0x6394	; 0x6394 <split_args>
   1cd86:	8c 01       	movw	r16, r24
   1cd88:	cf 57       	subi	r28, 0x7F	; 127
   1cd8a:	df 4f       	sbci	r29, 0xFF	; 255
   1cd8c:	e8 80       	ld	r14, Y
   1cd8e:	f9 80       	ldd	r15, Y+1	; 0x01
   1cd90:	c1 58       	subi	r28, 0x81	; 129
   1cd92:	d0 40       	sbci	r29, 0x00	; 0
   1cd94:	0f 90       	pop	r0
   1cd96:	0f 90       	pop	r0
   1cd98:	0f 90       	pop	r0
   1cd9a:	e1 14       	cp	r14, r1
   1cd9c:	f1 04       	cpc	r15, r1
   1cd9e:	09 f4       	brne	.+2      	; 0x1cda2 <task+0x6c>
   1cda0:	78 c0       	rjmp	.+240    	; 0x1ce92 <task+0x15c>
   1cda2:	9c 01       	movw	r18, r24
   1cda4:	41 e0       	ldi	r20, 0x01	; 1
   1cda6:	50 e0       	ldi	r21, 0x00	; 0
   1cda8:	62 ef       	ldi	r22, 0xF2	; 242
   1cdaa:	76 e1       	ldi	r23, 0x16	; 22
   1cdac:	c7 01       	movw	r24, r14
   1cdae:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cdb2:	89 2b       	or	r24, r25
   1cdb4:	11 f0       	breq	.+4      	; 0x1cdba <task+0x84>
   1cdb6:	40 df       	rcall	.-384    	; 0x1cc38 <delay_tests>
   1cdb8:	6c c0       	rjmp	.+216    	; 0x1ce92 <task+0x15c>
   1cdba:	98 01       	movw	r18, r16
   1cdbc:	41 e0       	ldi	r20, 0x01	; 1
   1cdbe:	50 e0       	ldi	r21, 0x00	; 0
   1cdc0:	6e ef       	ldi	r22, 0xFE	; 254
   1cdc2:	76 e1       	ldi	r23, 0x16	; 22
   1cdc4:	c7 01       	movw	r24, r14
   1cdc6:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cdca:	89 2b       	or	r24, r25
   1cdcc:	61 f4       	brne	.+24     	; 0x1cde6 <task+0xb0>
   1cdce:	98 01       	movw	r18, r16
   1cdd0:	41 e0       	ldi	r20, 0x01	; 1
   1cdd2:	50 e0       	ldi	r21, 0x00	; 0
   1cdd4:	63 e0       	ldi	r22, 0x03	; 3
   1cdd6:	77 e1       	ldi	r23, 0x17	; 23
   1cdd8:	c7 01       	movw	r24, r14
   1cdda:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cdde:	89 2b       	or	r24, r25
   1cde0:	29 f0       	breq	.+10     	; 0x1cdec <task+0xb6>
   1cde2:	0e 94 6d 3a 	call	0x74da	; 0x74da <setdate>
   1cde6:	0e 94 86 3c 	call	0x790c	; 0x790c <display_clock>
   1cdea:	53 c0       	rjmp	.+166    	; 0x1ce92 <task+0x15c>
   1cdec:	98 01       	movw	r18, r16
   1cdee:	41 e0       	ldi	r20, 0x01	; 1
   1cdf0:	50 e0       	ldi	r21, 0x00	; 0
   1cdf2:	6b e0       	ldi	r22, 0x0B	; 11
   1cdf4:	77 e1       	ldi	r23, 0x17	; 23
   1cdf6:	c7 01       	movw	r24, r14
   1cdf8:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1cdfc:	89 2b       	or	r24, r25
   1cdfe:	19 f0       	breq	.+6      	; 0x1ce06 <task+0xd0>
   1ce00:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <PrintFree>
   1ce04:	46 c0       	rjmp	.+140    	; 0x1ce92 <task+0x15c>
   1ce06:	98 01       	movw	r18, r16
   1ce08:	41 e0       	ldi	r20, 0x01	; 1
   1ce0a:	50 e0       	ldi	r21, 0x00	; 0
   1ce0c:	6b e0       	ldi	r22, 0x0B	; 11
   1ce0e:	76 e1       	ldi	r23, 0x16	; 22
   1ce10:	c7 01       	movw	r24, r14
   1ce12:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ce16:	89 2b       	or	r24, r25
   1ce18:	11 f0       	breq	.+4      	; 0x1ce1e <task+0xe8>
   1ce1a:	71 df       	rcall	.-286    	; 0x1ccfe <help>
   1ce1c:	3a c0       	rjmp	.+116    	; 0x1ce92 <task+0x15c>
   1ce1e:	98 01       	movw	r18, r16
   1ce20:	41 e0       	ldi	r20, 0x01	; 1
   1ce22:	50 e0       	ldi	r21, 0x00	; 0
   1ce24:	61 e1       	ldi	r22, 0x11	; 17
   1ce26:	76 e1       	ldi	r23, 0x16	; 22
   1ce28:	c7 01       	movw	r24, r14
   1ce2a:	0e 94 6d 31 	call	0x62da	; 0x62da <MATCHARGS>
   1ce2e:	89 2b       	or	r24, r25
   1ce30:	a1 f7       	brne	.-24     	; 0x1ce1a <task+0xe4>
   1ce32:	be 01       	movw	r22, r28
   1ce34:	6f 57       	subi	r22, 0x7F	; 127
   1ce36:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce38:	c8 01       	movw	r24, r16
   1ce3a:	0e 94 b1 97 	call	0x12f62	; 0x12f62 <gpib_tests>
   1ce3e:	89 2b       	or	r24, r25
   1ce40:	19 f0       	breq	.+6      	; 0x1ce48 <task+0x112>
   1ce42:	0e 94 fd 92 	call	0x125fa	; 0x125fa <gpib_init_devices>
   1ce46:	25 c0       	rjmp	.+74     	; 0x1ce92 <task+0x15c>
   1ce48:	be 01       	movw	r22, r28
   1ce4a:	6f 57       	subi	r22, 0x7F	; 127
   1ce4c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce4e:	c8 01       	movw	r24, r16
   1ce50:	0e 94 fd 87 	call	0x10ffa	; 0x10ffa <posix_tests>
   1ce54:	89 2b       	or	r24, r25
   1ce56:	e9 f4       	brne	.+58     	; 0x1ce92 <task+0x15c>
   1ce58:	be 01       	movw	r22, r28
   1ce5a:	6f 57       	subi	r22, 0x7F	; 127
   1ce5c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce5e:	c8 01       	movw	r24, r16
   1ce60:	0e 94 41 77 	call	0xee82	; 0xee82 <fatfs_tests>
   1ce64:	89 2b       	or	r24, r25
   1ce66:	a9 f4       	brne	.+42     	; 0x1ce92 <task+0x15c>
   1ce68:	be 01       	movw	r22, r28
   1ce6a:	6f 57       	subi	r22, 0x7F	; 127
   1ce6c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce6e:	c8 01       	movw	r24, r16
   1ce70:	74 dd       	rcall	.-1304   	; 0x1c95a <lif_tests>
   1ce72:	89 2b       	or	r24, r25
   1ce74:	71 f4       	brne	.+28     	; 0x1ce92 <task+0x15c>
   1ce76:	ff 92       	push	r15
   1ce78:	ef 92       	push	r14
   1ce7a:	8d e6       	ldi	r24, 0x6D	; 109
   1ce7c:	97 e4       	ldi	r25, 0x47	; 71
   1ce7e:	1f 92       	push	r1
   1ce80:	9f 93       	push	r25
   1ce82:	8f 93       	push	r24
   1ce84:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1ce88:	0f 90       	pop	r0
   1ce8a:	0f 90       	pop	r0
   1ce8c:	0f 90       	pop	r0
   1ce8e:	0f 90       	pop	r0
   1ce90:	0f 90       	pop	r0
   1ce92:	cc 51       	subi	r28, 0x1C	; 28
   1ce94:	df 4f       	sbci	r29, 0xFF	; 255
   1ce96:	e6 e0       	ldi	r30, 0x06	; 6
   1ce98:	16 c2       	rjmp	.+1068   	; 0x1d2c6 <__epilogue_restores__+0x18>

0001ce9a <main>:
   1ce9a:	a8 e0       	ldi	r26, 0x08	; 8
   1ce9c:	b0 e0       	ldi	r27, 0x00	; 0
   1ce9e:	e2 e5       	ldi	r30, 0x52	; 82
   1cea0:	f7 ee       	ldi	r31, 0xE7	; 231
   1cea2:	f4 c1       	rjmp	.+1000   	; 0x1d28c <__prologue_saves__+0x16>
   1cea4:	0e 94 2d 8c 	call	0x1185a	; 0x1185a <gpib_bus_init>
   1cea8:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <init_timers>
   1ceac:	40 e0       	ldi	r20, 0x00	; 0
   1ceae:	52 ec       	ldi	r21, 0xC2	; 194
   1ceb0:	61 e0       	ldi	r22, 0x01	; 1
   1ceb2:	70 e0       	ldi	r23, 0x00	; 0
   1ceb4:	80 e0       	ldi	r24, 0x00	; 0
   1ceb6:	0e 94 00 2b 	call	0x5600	; 0x5600 <uart_init>
   1ceba:	06 2f       	mov	r16, r22
   1cebc:	f7 2e       	mov	r15, r23
   1cebe:	e8 2e       	mov	r14, r24
   1cec0:	d9 2e       	mov	r13, r25
   1cec2:	68 ec       	ldi	r22, 0xC8	; 200
   1cec4:	70 e0       	ldi	r23, 0x00	; 0
   1cec6:	80 e0       	ldi	r24, 0x00	; 0
   1cec8:	90 e0       	ldi	r25, 0x00	; 0
   1ceca:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
   1cece:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1ced2:	86 e6       	ldi	r24, 0x66	; 102
   1ced4:	97 e4       	ldi	r25, 0x47	; 71
   1ced6:	1f 92       	push	r1
   1ced8:	9f 93       	push	r25
   1ceda:	8f 93       	push	r24
   1cedc:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cee0:	11 e0       	ldi	r17, 0x01	; 1
   1cee2:	1f 93       	push	r17
   1cee4:	81 e3       	ldi	r24, 0x31	; 49
   1cee6:	8f 93       	push	r24
   1cee8:	8d e2       	ldi	r24, 0x2D	; 45
   1ceea:	8f 93       	push	r24
   1ceec:	1f 92       	push	r1
   1ceee:	85 e5       	ldi	r24, 0x55	; 85
   1cef0:	97 e4       	ldi	r25, 0x47	; 71
   1cef2:	1f 92       	push	r1
   1cef4:	9f 93       	push	r25
   1cef6:	8f 93       	push	r24
   1cef8:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cefc:	df 92       	push	r13
   1cefe:	ef 92       	push	r14
   1cf00:	ff 92       	push	r15
   1cf02:	0f 93       	push	r16
   1cf04:	1f 92       	push	r1
   1cf06:	1f 93       	push	r17
   1cf08:	82 ec       	ldi	r24, 0xC2	; 194
   1cf0a:	8f 93       	push	r24
   1cf0c:	1f 92       	push	r1
   1cf0e:	8e e2       	ldi	r24, 0x2E	; 46
   1cf10:	97 e4       	ldi	r25, 0x47	; 71
   1cf12:	1f 92       	push	r1
   1cf14:	9f 93       	push	r25
   1cf16:	8f 93       	push	r24
   1cf18:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf1c:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1cf20:	8f e0       	ldi	r24, 0x0F	; 15
   1cf22:	97 e4       	ldi	r25, 0x47	; 71
   1cf24:	1f 92       	push	r1
   1cf26:	9f 93       	push	r25
   1cf28:	8f 93       	push	r24
   1cf2a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf2e:	82 ef       	ldi	r24, 0xF2	; 242
   1cf30:	96 e4       	ldi	r25, 0x46	; 70
   1cf32:	1f 92       	push	r1
   1cf34:	9f 93       	push	r25
   1cf36:	8f 93       	push	r24
   1cf38:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf3c:	82 ee       	ldi	r24, 0xE2	; 226
   1cf3e:	96 e4       	ldi	r25, 0x46	; 70
   1cf40:	1f 92       	push	r1
   1cf42:	9f 93       	push	r25
   1cf44:	8f 93       	push	r24
   1cf46:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf4a:	8b eb       	ldi	r24, 0xBB	; 187
   1cf4c:	96 e4       	ldi	r25, 0x46	; 70
   1cf4e:	1f 92       	push	r1
   1cf50:	9f 93       	push	r25
   1cf52:	8f 93       	push	r24
   1cf54:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf58:	0f b6       	in	r0, 0x3f	; 63
   1cf5a:	f8 94       	cli
   1cf5c:	de bf       	out	0x3e, r29	; 62
   1cf5e:	0f be       	out	0x3f, r0	; 63
   1cf60:	cd bf       	out	0x3d, r28	; 61
   1cf62:	8f e3       	ldi	r24, 0x3F	; 63
   1cf64:	96 e1       	ldi	r25, 0x16	; 22
   1cf66:	9f 93       	push	r25
   1cf68:	8f 93       	push	r24
   1cf6a:	81 ea       	ldi	r24, 0xA1	; 161
   1cf6c:	96 e4       	ldi	r25, 0x46	; 70
   1cf6e:	1f 92       	push	r1
   1cf70:	9f 93       	push	r25
   1cf72:	8f 93       	push	r24
   1cf74:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf78:	83 e6       	ldi	r24, 0x63	; 99
   1cf7a:	96 e1       	ldi	r25, 0x16	; 22
   1cf7c:	9f 93       	push	r25
   1cf7e:	8f 93       	push	r24
   1cf80:	87 e8       	ldi	r24, 0x87	; 135
   1cf82:	96 e4       	ldi	r25, 0x46	; 70
   1cf84:	1f 92       	push	r1
   1cf86:	9f 93       	push	r25
   1cf88:	8f 93       	push	r24
   1cf8a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cf8e:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1cf92:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <PrintFree>
   1cf96:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1cf9a:	68 ec       	ldi	r22, 0xC8	; 200
   1cf9c:	70 e0       	ldi	r23, 0x00	; 0
   1cf9e:	80 e0       	ldi	r24, 0x00	; 0
   1cfa0:	90 e0       	ldi	r25, 0x00	; 0
   1cfa2:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
   1cfa6:	81 e7       	ldi	r24, 0x71	; 113
   1cfa8:	96 e4       	ldi	r25, 0x46	; 70
   1cfaa:	1f 92       	push	r1
   1cfac:	9f 93       	push	r25
   1cfae:	8f 93       	push	r24
   1cfb0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cfb4:	4b e0       	ldi	r20, 0x0B	; 11
   1cfb6:	50 e0       	ldi	r21, 0x00	; 0
   1cfb8:	60 e2       	ldi	r22, 0x20	; 32
   1cfba:	71 ea       	ldi	r23, 0xA1	; 161
   1cfbc:	87 e0       	ldi	r24, 0x07	; 7
   1cfbe:	90 e0       	ldi	r25, 0x00	; 0
   1cfc0:	0e 94 77 28 	call	0x50ee	; 0x50ee <spi_init>
   1cfc4:	8b e5       	ldi	r24, 0x5B	; 91
   1cfc6:	96 e4       	ldi	r25, 0x46	; 70
   1cfc8:	1f 92       	push	r1
   1cfca:	9f 93       	push	r25
   1cfcc:	8f 93       	push	r24
   1cfce:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cfd2:	6a e2       	ldi	r22, 0x2A	; 42
   1cfd4:	81 e0       	ldi	r24, 0x01	; 1
   1cfd6:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <TWI_Init>
   1cfda:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1cfde:	0e 94 a6 34 	call	0x694c	; 0x694c <clock_clear>
   1cfe2:	8c e4       	ldi	r24, 0x4C	; 76
   1cfe4:	96 e4       	ldi	r25, 0x46	; 70
   1cfe6:	1f 92       	push	r1
   1cfe8:	9f 93       	push	r25
   1cfea:	8f 93       	push	r24
   1cfec:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1cff0:	be 01       	movw	r22, r28
   1cff2:	6f 5f       	subi	r22, 0xFF	; 255
   1cff4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cff6:	80 e0       	ldi	r24, 0x00	; 0
   1cff8:	90 e0       	ldi	r25, 0x00	; 0
   1cffa:	0e 94 41 35 	call	0x6a82	; 0x6a82 <clock_getres>
   1cffe:	88 85       	ldd	r24, Y+8	; 0x08
   1d000:	8f 93       	push	r24
   1d002:	8f 81       	ldd	r24, Y+7	; 0x07
   1d004:	8f 93       	push	r24
   1d006:	8e 81       	ldd	r24, Y+6	; 0x06
   1d008:	8f 93       	push	r24
   1d00a:	8d 81       	ldd	r24, Y+5	; 0x05
   1d00c:	8f 93       	push	r24
   1d00e:	8f e2       	ldi	r24, 0x2F	; 47
   1d010:	96 e4       	ldi	r25, 0x46	; 70
   1d012:	1f 92       	push	r1
   1d014:	9f 93       	push	r25
   1d016:	8f 93       	push	r24
   1d018:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d01c:	8c e2       	ldi	r24, 0x2C	; 44
   1d01e:	91 e0       	ldi	r25, 0x01	; 1
   1d020:	0e 94 0f 3c 	call	0x781e	; 0x781e <initialize_clock>
   1d024:	0e 94 86 3c 	call	0x790c	; 0x790c <display_clock>
   1d028:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <LCD_init>
   1d02c:	40 e8       	ldi	r20, 0x80	; 128
   1d02e:	60 e8       	ldi	r22, 0x80	; 128
   1d030:	80 e8       	ldi	r24, 0x80	; 128
   1d032:	0e 94 28 30 	call	0x6050	; 0x6050 <LCD_setFastBacklightRGB>
   1d036:	8f e0       	ldi	r24, 0x0F	; 15
   1d038:	97 e1       	ldi	r25, 0x17	; 23
   1d03a:	0e 94 1e 30 	call	0x603c	; 0x603c <LCD_puts>
   1d03e:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d042:	81 e0       	ldi	r24, 0x01	; 1
   1d044:	90 e0       	ldi	r25, 0x00	; 0
   1d046:	0e 94 7a 72 	call	0xe4f4	; 0xe4f4 <mmc_init>
   1d04a:	0e 94 2d 8c 	call	0x1185a	; 0x1185a <gpib_bus_init>
   1d04e:	88 e1       	ldi	r24, 0x18	; 24
   1d050:	96 e4       	ldi	r25, 0x46	; 70
   1d052:	1f 92       	push	r1
   1d054:	9f 93       	push	r25
   1d056:	8f 93       	push	r24
   1d058:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d05c:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d060:	0e 94 bd b2 	call	0x1657a	; 0x1657a <printer_init>
   1d064:	85 e0       	ldi	r24, 0x05	; 5
   1d066:	96 e4       	ldi	r25, 0x46	; 70
   1d068:	1f 92       	push	r1
   1d06a:	9f 93       	push	r25
   1d06c:	8f 93       	push	r24
   1d06e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d072:	0f b6       	in	r0, 0x3f	; 63
   1d074:	f8 94       	cli
   1d076:	de bf       	out	0x3e, r29	; 62
   1d078:	0f be       	out	0x3f, r0	; 63
   1d07a:	cd bf       	out	0x3d, r28	; 61
   1d07c:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d080:	83 ef       	ldi	r24, 0xF3	; 243
   1d082:	95 e4       	ldi	r25, 0x45	; 69
   1d084:	1f 92       	push	r1
   1d086:	9f 93       	push	r25
   1d088:	8f 93       	push	r24
   1d08a:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d08e:	0e 94 3d 8a 	call	0x1147a	; 0x1147a <gpib_timer_init>
   1d092:	8d ed       	ldi	r24, 0xDD	; 221
   1d094:	95 e4       	ldi	r25, 0x45	; 69
   1d096:	1f 92       	push	r1
   1d098:	9f 93       	push	r25
   1d09a:	8f 93       	push	r24
   1d09c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d0a0:	0e 94 46 92 	call	0x1248c	; 0x1248c <gpib_file_init>
   1d0a4:	88 ec       	ldi	r24, 0xC8	; 200
   1d0a6:	95 e4       	ldi	r25, 0x45	; 69
   1d0a8:	1f 92       	push	r1
   1d0aa:	9f 93       	push	r25
   1d0ac:	8f 93       	push	r24
   1d0ae:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d0b2:	0e 94 55 8c 	call	0x118aa	; 0x118aa <gpib_state_init>
   1d0b6:	82 eb       	ldi	r24, 0xB2	; 178
   1d0b8:	95 e4       	ldi	r25, 0x45	; 69
   1d0ba:	1f 92       	push	r1
   1d0bc:	9f 93       	push	r25
   1d0be:	8f 93       	push	r24
   1d0c0:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d0c4:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d0c8:	0e 94 8f c2 	call	0x1851e	; 0x1851e <display_Config>
   1d0cc:	0e 94 e9 c4 	call	0x189d2	; 0x189d2 <format_drives>
   1d0d0:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d0d4:	0e 94 94 c1 	call	0x18328	; 0x18328 <display_Addresses>
   1d0d8:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d0dc:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <debuglevel+0x1>
   1d0e0:	8f 93       	push	r24
   1d0e2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <debuglevel>
   1d0e6:	8f 93       	push	r24
   1d0e8:	8c e9       	ldi	r24, 0x9C	; 156
   1d0ea:	95 e4       	ldi	r25, 0x45	; 69
   1d0ec:	1f 92       	push	r1
   1d0ee:	9f 93       	push	r25
   1d0f0:	8f 93       	push	r24
   1d0f2:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d0f6:	0e 94 43 30 	call	0x6086	; 0x6086 <sep>
   1d0fa:	88 e8       	ldi	r24, 0x88	; 136
   1d0fc:	95 e4       	ldi	r25, 0x45	; 69
   1d0fe:	1f 92       	push	r1
   1d100:	9f 93       	push	r25
   1d102:	8f 93       	push	r24
   1d104:	0e 94 31 45 	call	0x8a62	; 0x8a62 <printf_P>
   1d108:	0f b6       	in	r0, 0x3f	; 63
   1d10a:	f8 94       	cli
   1d10c:	de bf       	out	0x3e, r29	; 62
   1d10e:	0f be       	out	0x3f, r0	; 63
   1d110:	cd bf       	out	0x3d, r28	; 61
   1d112:	81 e0       	ldi	r24, 0x01	; 1
   1d114:	10 de       	rcall	.-992    	; 0x1cd36 <task>
   1d116:	fd cf       	rjmp	.-6      	; 0x1d112 <main+0x278>

0001d118 <__mulsi3>:
   1d118:	db 01       	movw	r26, r22
   1d11a:	8f 93       	push	r24
   1d11c:	9f 93       	push	r25
   1d11e:	8b d0       	rcall	.+278    	; 0x1d236 <__muluhisi3>
   1d120:	bf 91       	pop	r27
   1d122:	af 91       	pop	r26
   1d124:	a2 9f       	mul	r26, r18
   1d126:	80 0d       	add	r24, r0
   1d128:	91 1d       	adc	r25, r1
   1d12a:	a3 9f       	mul	r26, r19
   1d12c:	90 0d       	add	r25, r0
   1d12e:	b2 9f       	mul	r27, r18
   1d130:	90 0d       	add	r25, r0
   1d132:	11 24       	eor	r1, r1
   1d134:	08 95       	ret

0001d136 <__udivmodqi4>:
   1d136:	99 1b       	sub	r25, r25
   1d138:	79 e0       	ldi	r23, 0x09	; 9
   1d13a:	04 c0       	rjmp	.+8      	; 0x1d144 <__udivmodqi4_ep>

0001d13c <__udivmodqi4_loop>:
   1d13c:	99 1f       	adc	r25, r25
   1d13e:	96 17       	cp	r25, r22
   1d140:	08 f0       	brcs	.+2      	; 0x1d144 <__udivmodqi4_ep>
   1d142:	96 1b       	sub	r25, r22

0001d144 <__udivmodqi4_ep>:
   1d144:	88 1f       	adc	r24, r24
   1d146:	7a 95       	dec	r23
   1d148:	c9 f7       	brne	.-14     	; 0x1d13c <__udivmodqi4_loop>
   1d14a:	80 95       	com	r24
   1d14c:	08 95       	ret

0001d14e <__udivmodhi4>:
   1d14e:	aa 1b       	sub	r26, r26
   1d150:	bb 1b       	sub	r27, r27
   1d152:	51 e1       	ldi	r21, 0x11	; 17
   1d154:	07 c0       	rjmp	.+14     	; 0x1d164 <__udivmodhi4_ep>

0001d156 <__udivmodhi4_loop>:
   1d156:	aa 1f       	adc	r26, r26
   1d158:	bb 1f       	adc	r27, r27
   1d15a:	a6 17       	cp	r26, r22
   1d15c:	b7 07       	cpc	r27, r23
   1d15e:	10 f0       	brcs	.+4      	; 0x1d164 <__udivmodhi4_ep>
   1d160:	a6 1b       	sub	r26, r22
   1d162:	b7 0b       	sbc	r27, r23

0001d164 <__udivmodhi4_ep>:
   1d164:	88 1f       	adc	r24, r24
   1d166:	99 1f       	adc	r25, r25
   1d168:	5a 95       	dec	r21
   1d16a:	a9 f7       	brne	.-22     	; 0x1d156 <__udivmodhi4_loop>
   1d16c:	80 95       	com	r24
   1d16e:	90 95       	com	r25
   1d170:	bc 01       	movw	r22, r24
   1d172:	cd 01       	movw	r24, r26
   1d174:	08 95       	ret

0001d176 <__divmodhi4>:
   1d176:	97 fb       	bst	r25, 7
   1d178:	07 2e       	mov	r0, r23
   1d17a:	16 f4       	brtc	.+4      	; 0x1d180 <__divmodhi4+0xa>
   1d17c:	00 94       	com	r0
   1d17e:	06 d0       	rcall	.+12     	; 0x1d18c <__divmodhi4_neg1>
   1d180:	77 fd       	sbrc	r23, 7
   1d182:	08 d0       	rcall	.+16     	; 0x1d194 <__divmodhi4_neg2>
   1d184:	e4 df       	rcall	.-56     	; 0x1d14e <__udivmodhi4>
   1d186:	07 fc       	sbrc	r0, 7
   1d188:	05 d0       	rcall	.+10     	; 0x1d194 <__divmodhi4_neg2>
   1d18a:	3e f4       	brtc	.+14     	; 0x1d19a <__divmodhi4_exit>

0001d18c <__divmodhi4_neg1>:
   1d18c:	90 95       	com	r25
   1d18e:	81 95       	neg	r24
   1d190:	9f 4f       	sbci	r25, 0xFF	; 255
   1d192:	08 95       	ret

0001d194 <__divmodhi4_neg2>:
   1d194:	70 95       	com	r23
   1d196:	61 95       	neg	r22
   1d198:	7f 4f       	sbci	r23, 0xFF	; 255

0001d19a <__divmodhi4_exit>:
   1d19a:	08 95       	ret

0001d19c <__udivmodsi4>:
   1d19c:	a1 e2       	ldi	r26, 0x21	; 33
   1d19e:	1a 2e       	mov	r1, r26
   1d1a0:	aa 1b       	sub	r26, r26
   1d1a2:	bb 1b       	sub	r27, r27
   1d1a4:	fd 01       	movw	r30, r26
   1d1a6:	0d c0       	rjmp	.+26     	; 0x1d1c2 <__udivmodsi4_ep>

0001d1a8 <__udivmodsi4_loop>:
   1d1a8:	aa 1f       	adc	r26, r26
   1d1aa:	bb 1f       	adc	r27, r27
   1d1ac:	ee 1f       	adc	r30, r30
   1d1ae:	ff 1f       	adc	r31, r31
   1d1b0:	a2 17       	cp	r26, r18
   1d1b2:	b3 07       	cpc	r27, r19
   1d1b4:	e4 07       	cpc	r30, r20
   1d1b6:	f5 07       	cpc	r31, r21
   1d1b8:	20 f0       	brcs	.+8      	; 0x1d1c2 <__udivmodsi4_ep>
   1d1ba:	a2 1b       	sub	r26, r18
   1d1bc:	b3 0b       	sbc	r27, r19
   1d1be:	e4 0b       	sbc	r30, r20
   1d1c0:	f5 0b       	sbc	r31, r21

0001d1c2 <__udivmodsi4_ep>:
   1d1c2:	66 1f       	adc	r22, r22
   1d1c4:	77 1f       	adc	r23, r23
   1d1c6:	88 1f       	adc	r24, r24
   1d1c8:	99 1f       	adc	r25, r25
   1d1ca:	1a 94       	dec	r1
   1d1cc:	69 f7       	brne	.-38     	; 0x1d1a8 <__udivmodsi4_loop>
   1d1ce:	60 95       	com	r22
   1d1d0:	70 95       	com	r23
   1d1d2:	80 95       	com	r24
   1d1d4:	90 95       	com	r25
   1d1d6:	9b 01       	movw	r18, r22
   1d1d8:	ac 01       	movw	r20, r24
   1d1da:	bd 01       	movw	r22, r26
   1d1dc:	cf 01       	movw	r24, r30
   1d1de:	08 95       	ret

0001d1e0 <__divmodsi4>:
   1d1e0:	05 2e       	mov	r0, r21
   1d1e2:	97 fb       	bst	r25, 7
   1d1e4:	16 f4       	brtc	.+4      	; 0x1d1ea <__divmodsi4+0xa>
   1d1e6:	00 94       	com	r0
   1d1e8:	0f d0       	rcall	.+30     	; 0x1d208 <__negsi2>
   1d1ea:	57 fd       	sbrc	r21, 7
   1d1ec:	05 d0       	rcall	.+10     	; 0x1d1f8 <__divmodsi4_neg2>
   1d1ee:	d6 df       	rcall	.-84     	; 0x1d19c <__udivmodsi4>
   1d1f0:	07 fc       	sbrc	r0, 7
   1d1f2:	02 d0       	rcall	.+4      	; 0x1d1f8 <__divmodsi4_neg2>
   1d1f4:	46 f4       	brtc	.+16     	; 0x1d206 <__divmodsi4_exit>
   1d1f6:	08 c0       	rjmp	.+16     	; 0x1d208 <__negsi2>

0001d1f8 <__divmodsi4_neg2>:
   1d1f8:	50 95       	com	r21
   1d1fa:	40 95       	com	r20
   1d1fc:	30 95       	com	r19
   1d1fe:	21 95       	neg	r18
   1d200:	3f 4f       	sbci	r19, 0xFF	; 255
   1d202:	4f 4f       	sbci	r20, 0xFF	; 255
   1d204:	5f 4f       	sbci	r21, 0xFF	; 255

0001d206 <__divmodsi4_exit>:
   1d206:	08 95       	ret

0001d208 <__negsi2>:
   1d208:	90 95       	com	r25
   1d20a:	80 95       	com	r24
   1d20c:	70 95       	com	r23
   1d20e:	61 95       	neg	r22
   1d210:	7f 4f       	sbci	r23, 0xFF	; 255
   1d212:	8f 4f       	sbci	r24, 0xFF	; 255
   1d214:	9f 4f       	sbci	r25, 0xFF	; 255
   1d216:	08 95       	ret

0001d218 <__tablejump2__>:
   1d218:	ee 0f       	add	r30, r30
   1d21a:	ff 1f       	adc	r31, r31
   1d21c:	00 24       	eor	r0, r0
   1d21e:	00 1c       	adc	r0, r0
   1d220:	0b be       	out	0x3b, r0	; 59
   1d222:	07 90       	elpm	r0, Z+
   1d224:	f6 91       	elpm	r31, Z
   1d226:	e0 2d       	mov	r30, r0
   1d228:	09 94       	ijmp

0001d22a <__usmulhisi3>:
   1d22a:	6f d0       	rcall	.+222    	; 0x1d30a <__umulhisi3>

0001d22c <__usmulhisi3_tail>:
   1d22c:	b7 ff       	sbrs	r27, 7
   1d22e:	08 95       	ret
   1d230:	82 1b       	sub	r24, r18
   1d232:	93 0b       	sbc	r25, r19
   1d234:	08 95       	ret

0001d236 <__muluhisi3>:
   1d236:	69 d0       	rcall	.+210    	; 0x1d30a <__umulhisi3>
   1d238:	a5 9f       	mul	r26, r21
   1d23a:	90 0d       	add	r25, r0
   1d23c:	b4 9f       	mul	r27, r20
   1d23e:	90 0d       	add	r25, r0
   1d240:	a4 9f       	mul	r26, r20
   1d242:	80 0d       	add	r24, r0
   1d244:	91 1d       	adc	r25, r1
   1d246:	11 24       	eor	r1, r1
   1d248:	08 95       	ret

0001d24a <__mulshisi3>:
   1d24a:	b7 ff       	sbrs	r27, 7
   1d24c:	f4 cf       	rjmp	.-24     	; 0x1d236 <__muluhisi3>

0001d24e <__mulohisi3>:
   1d24e:	f3 df       	rcall	.-26     	; 0x1d236 <__muluhisi3>
   1d250:	82 1b       	sub	r24, r18
   1d252:	93 0b       	sbc	r25, r19
   1d254:	08 95       	ret

0001d256 <__negdi2>:
   1d256:	60 95       	com	r22
   1d258:	70 95       	com	r23
   1d25a:	80 95       	com	r24
   1d25c:	90 95       	com	r25
   1d25e:	30 95       	com	r19
   1d260:	40 95       	com	r20
   1d262:	50 95       	com	r21
   1d264:	21 95       	neg	r18
   1d266:	3f 4f       	sbci	r19, 0xFF	; 255
   1d268:	4f 4f       	sbci	r20, 0xFF	; 255
   1d26a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d26c:	6f 4f       	sbci	r22, 0xFF	; 255
   1d26e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d270:	8f 4f       	sbci	r24, 0xFF	; 255
   1d272:	9f 4f       	sbci	r25, 0xFF	; 255
   1d274:	08 95       	ret

0001d276 <__prologue_saves__>:
   1d276:	2f 92       	push	r2
   1d278:	3f 92       	push	r3
   1d27a:	4f 92       	push	r4
   1d27c:	5f 92       	push	r5
   1d27e:	6f 92       	push	r6
   1d280:	7f 92       	push	r7
   1d282:	8f 92       	push	r8
   1d284:	9f 92       	push	r9
   1d286:	af 92       	push	r10
   1d288:	bf 92       	push	r11
   1d28a:	cf 92       	push	r12
   1d28c:	df 92       	push	r13
   1d28e:	ef 92       	push	r14
   1d290:	ff 92       	push	r15
   1d292:	0f 93       	push	r16
   1d294:	1f 93       	push	r17
   1d296:	cf 93       	push	r28
   1d298:	df 93       	push	r29
   1d29a:	cd b7       	in	r28, 0x3d	; 61
   1d29c:	de b7       	in	r29, 0x3e	; 62
   1d29e:	ca 1b       	sub	r28, r26
   1d2a0:	db 0b       	sbc	r29, r27
   1d2a2:	0f b6       	in	r0, 0x3f	; 63
   1d2a4:	f8 94       	cli
   1d2a6:	de bf       	out	0x3e, r29	; 62
   1d2a8:	0f be       	out	0x3f, r0	; 63
   1d2aa:	cd bf       	out	0x3d, r28	; 61
   1d2ac:	09 94       	ijmp

0001d2ae <__epilogue_restores__>:
   1d2ae:	2a 88       	ldd	r2, Y+18	; 0x12
   1d2b0:	39 88       	ldd	r3, Y+17	; 0x11
   1d2b2:	48 88       	ldd	r4, Y+16	; 0x10
   1d2b4:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d2b6:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d2b8:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d2ba:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d2bc:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d2be:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d2c0:	b9 84       	ldd	r11, Y+9	; 0x09
   1d2c2:	c8 84       	ldd	r12, Y+8	; 0x08
   1d2c4:	df 80       	ldd	r13, Y+7	; 0x07
   1d2c6:	ee 80       	ldd	r14, Y+6	; 0x06
   1d2c8:	fd 80       	ldd	r15, Y+5	; 0x05
   1d2ca:	0c 81       	ldd	r16, Y+4	; 0x04
   1d2cc:	1b 81       	ldd	r17, Y+3	; 0x03
   1d2ce:	aa 81       	ldd	r26, Y+2	; 0x02
   1d2d0:	b9 81       	ldd	r27, Y+1	; 0x01
   1d2d2:	ce 0f       	add	r28, r30
   1d2d4:	d1 1d       	adc	r29, r1
   1d2d6:	0f b6       	in	r0, 0x3f	; 63
   1d2d8:	f8 94       	cli
   1d2da:	de bf       	out	0x3e, r29	; 62
   1d2dc:	0f be       	out	0x3f, r0	; 63
   1d2de:	cd bf       	out	0x3d, r28	; 61
   1d2e0:	ed 01       	movw	r28, r26
   1d2e2:	08 95       	ret

0001d2e4 <__xload_1>:
   1d2e4:	57 fd       	sbrc	r21, 7
   1d2e6:	03 c0       	rjmp	.+6      	; 0x1d2ee <__xload_1+0xa>
   1d2e8:	5b bf       	out	0x3b, r21	; 59
   1d2ea:	67 91       	elpm	r22, Z+
   1d2ec:	08 95       	ret
   1d2ee:	60 81       	ld	r22, Z
   1d2f0:	08 95       	ret

0001d2f2 <__cmpdi2_s8>:
   1d2f2:	00 24       	eor	r0, r0
   1d2f4:	a7 fd       	sbrc	r26, 7
   1d2f6:	00 94       	com	r0
   1d2f8:	2a 17       	cp	r18, r26
   1d2fa:	30 05       	cpc	r19, r0
   1d2fc:	40 05       	cpc	r20, r0
   1d2fe:	50 05       	cpc	r21, r0
   1d300:	60 05       	cpc	r22, r0
   1d302:	70 05       	cpc	r23, r0
   1d304:	80 05       	cpc	r24, r0
   1d306:	90 05       	cpc	r25, r0
   1d308:	08 95       	ret

0001d30a <__umulhisi3>:
   1d30a:	a2 9f       	mul	r26, r18
   1d30c:	b0 01       	movw	r22, r0
   1d30e:	b3 9f       	mul	r27, r19
   1d310:	c0 01       	movw	r24, r0
   1d312:	a3 9f       	mul	r26, r19
   1d314:	70 0d       	add	r23, r0
   1d316:	81 1d       	adc	r24, r1
   1d318:	11 24       	eor	r1, r1
   1d31a:	91 1d       	adc	r25, r1
   1d31c:	b2 9f       	mul	r27, r18
   1d31e:	70 0d       	add	r23, r0
   1d320:	81 1d       	adc	r24, r1
   1d322:	11 24       	eor	r1, r1
   1d324:	91 1d       	adc	r25, r1
   1d326:	08 95       	ret

0001d328 <__subsf3>:
   1d328:	50 58       	subi	r21, 0x80	; 128

0001d32a <__addsf3>:
   1d32a:	bb 27       	eor	r27, r27
   1d32c:	aa 27       	eor	r26, r26
   1d32e:	0e d0       	rcall	.+28     	; 0x1d34c <__addsf3x>
   1d330:	75 c1       	rjmp	.+746    	; 0x1d61c <__fp_round>
   1d332:	66 d1       	rcall	.+716    	; 0x1d600 <__fp_pscA>
   1d334:	30 f0       	brcs	.+12     	; 0x1d342 <__addsf3+0x18>
   1d336:	6b d1       	rcall	.+726    	; 0x1d60e <__fp_pscB>
   1d338:	20 f0       	brcs	.+8      	; 0x1d342 <__addsf3+0x18>
   1d33a:	31 f4       	brne	.+12     	; 0x1d348 <__addsf3+0x1e>
   1d33c:	9f 3f       	cpi	r25, 0xFF	; 255
   1d33e:	11 f4       	brne	.+4      	; 0x1d344 <__addsf3+0x1a>
   1d340:	1e f4       	brtc	.+6      	; 0x1d348 <__addsf3+0x1e>
   1d342:	5b c1       	rjmp	.+694    	; 0x1d5fa <__fp_nan>
   1d344:	0e f4       	brtc	.+2      	; 0x1d348 <__addsf3+0x1e>
   1d346:	e0 95       	com	r30
   1d348:	e7 fb       	bst	r30, 7
   1d34a:	51 c1       	rjmp	.+674    	; 0x1d5ee <__fp_inf>

0001d34c <__addsf3x>:
   1d34c:	e9 2f       	mov	r30, r25
   1d34e:	77 d1       	rcall	.+750    	; 0x1d63e <__fp_split3>
   1d350:	80 f3       	brcs	.-32     	; 0x1d332 <__addsf3+0x8>
   1d352:	ba 17       	cp	r27, r26
   1d354:	62 07       	cpc	r22, r18
   1d356:	73 07       	cpc	r23, r19
   1d358:	84 07       	cpc	r24, r20
   1d35a:	95 07       	cpc	r25, r21
   1d35c:	18 f0       	brcs	.+6      	; 0x1d364 <__addsf3x+0x18>
   1d35e:	71 f4       	brne	.+28     	; 0x1d37c <__addsf3x+0x30>
   1d360:	9e f5       	brtc	.+102    	; 0x1d3c8 <__addsf3x+0x7c>
   1d362:	8f c1       	rjmp	.+798    	; 0x1d682 <__fp_zero>
   1d364:	0e f4       	brtc	.+2      	; 0x1d368 <__addsf3x+0x1c>
   1d366:	e0 95       	com	r30
   1d368:	0b 2e       	mov	r0, r27
   1d36a:	ba 2f       	mov	r27, r26
   1d36c:	a0 2d       	mov	r26, r0
   1d36e:	0b 01       	movw	r0, r22
   1d370:	b9 01       	movw	r22, r18
   1d372:	90 01       	movw	r18, r0
   1d374:	0c 01       	movw	r0, r24
   1d376:	ca 01       	movw	r24, r20
   1d378:	a0 01       	movw	r20, r0
   1d37a:	11 24       	eor	r1, r1
   1d37c:	ff 27       	eor	r31, r31
   1d37e:	59 1b       	sub	r21, r25
   1d380:	99 f0       	breq	.+38     	; 0x1d3a8 <__addsf3x+0x5c>
   1d382:	59 3f       	cpi	r21, 0xF9	; 249
   1d384:	50 f4       	brcc	.+20     	; 0x1d39a <__addsf3x+0x4e>
   1d386:	50 3e       	cpi	r21, 0xE0	; 224
   1d388:	68 f1       	brcs	.+90     	; 0x1d3e4 <__addsf3x+0x98>
   1d38a:	1a 16       	cp	r1, r26
   1d38c:	f0 40       	sbci	r31, 0x00	; 0
   1d38e:	a2 2f       	mov	r26, r18
   1d390:	23 2f       	mov	r18, r19
   1d392:	34 2f       	mov	r19, r20
   1d394:	44 27       	eor	r20, r20
   1d396:	58 5f       	subi	r21, 0xF8	; 248
   1d398:	f3 cf       	rjmp	.-26     	; 0x1d380 <__addsf3x+0x34>
   1d39a:	46 95       	lsr	r20
   1d39c:	37 95       	ror	r19
   1d39e:	27 95       	ror	r18
   1d3a0:	a7 95       	ror	r26
   1d3a2:	f0 40       	sbci	r31, 0x00	; 0
   1d3a4:	53 95       	inc	r21
   1d3a6:	c9 f7       	brne	.-14     	; 0x1d39a <__addsf3x+0x4e>
   1d3a8:	7e f4       	brtc	.+30     	; 0x1d3c8 <__addsf3x+0x7c>
   1d3aa:	1f 16       	cp	r1, r31
   1d3ac:	ba 0b       	sbc	r27, r26
   1d3ae:	62 0b       	sbc	r22, r18
   1d3b0:	73 0b       	sbc	r23, r19
   1d3b2:	84 0b       	sbc	r24, r20
   1d3b4:	ba f0       	brmi	.+46     	; 0x1d3e4 <__addsf3x+0x98>
   1d3b6:	91 50       	subi	r25, 0x01	; 1
   1d3b8:	a1 f0       	breq	.+40     	; 0x1d3e2 <__addsf3x+0x96>
   1d3ba:	ff 0f       	add	r31, r31
   1d3bc:	bb 1f       	adc	r27, r27
   1d3be:	66 1f       	adc	r22, r22
   1d3c0:	77 1f       	adc	r23, r23
   1d3c2:	88 1f       	adc	r24, r24
   1d3c4:	c2 f7       	brpl	.-16     	; 0x1d3b6 <__addsf3x+0x6a>
   1d3c6:	0e c0       	rjmp	.+28     	; 0x1d3e4 <__addsf3x+0x98>
   1d3c8:	ba 0f       	add	r27, r26
   1d3ca:	62 1f       	adc	r22, r18
   1d3cc:	73 1f       	adc	r23, r19
   1d3ce:	84 1f       	adc	r24, r20
   1d3d0:	48 f4       	brcc	.+18     	; 0x1d3e4 <__addsf3x+0x98>
   1d3d2:	87 95       	ror	r24
   1d3d4:	77 95       	ror	r23
   1d3d6:	67 95       	ror	r22
   1d3d8:	b7 95       	ror	r27
   1d3da:	f7 95       	ror	r31
   1d3dc:	9e 3f       	cpi	r25, 0xFE	; 254
   1d3de:	08 f0       	brcs	.+2      	; 0x1d3e2 <__addsf3x+0x96>
   1d3e0:	b3 cf       	rjmp	.-154    	; 0x1d348 <__addsf3+0x1e>
   1d3e2:	93 95       	inc	r25
   1d3e4:	88 0f       	add	r24, r24
   1d3e6:	08 f0       	brcs	.+2      	; 0x1d3ea <__addsf3x+0x9e>
   1d3e8:	99 27       	eor	r25, r25
   1d3ea:	ee 0f       	add	r30, r30
   1d3ec:	97 95       	ror	r25
   1d3ee:	87 95       	ror	r24
   1d3f0:	08 95       	ret

0001d3f2 <__cmpsf2>:
   1d3f2:	d9 d0       	rcall	.+434    	; 0x1d5a6 <__fp_cmp>
   1d3f4:	08 f4       	brcc	.+2      	; 0x1d3f8 <__cmpsf2+0x6>
   1d3f6:	81 e0       	ldi	r24, 0x01	; 1
   1d3f8:	08 95       	ret

0001d3fa <__divsf3>:
   1d3fa:	0c d0       	rcall	.+24     	; 0x1d414 <__divsf3x>
   1d3fc:	0f c1       	rjmp	.+542    	; 0x1d61c <__fp_round>
   1d3fe:	07 d1       	rcall	.+526    	; 0x1d60e <__fp_pscB>
   1d400:	40 f0       	brcs	.+16     	; 0x1d412 <__divsf3+0x18>
   1d402:	fe d0       	rcall	.+508    	; 0x1d600 <__fp_pscA>
   1d404:	30 f0       	brcs	.+12     	; 0x1d412 <__divsf3+0x18>
   1d406:	21 f4       	brne	.+8      	; 0x1d410 <__divsf3+0x16>
   1d408:	5f 3f       	cpi	r21, 0xFF	; 255
   1d40a:	19 f0       	breq	.+6      	; 0x1d412 <__divsf3+0x18>
   1d40c:	f0 c0       	rjmp	.+480    	; 0x1d5ee <__fp_inf>
   1d40e:	51 11       	cpse	r21, r1
   1d410:	39 c1       	rjmp	.+626    	; 0x1d684 <__fp_szero>
   1d412:	f3 c0       	rjmp	.+486    	; 0x1d5fa <__fp_nan>

0001d414 <__divsf3x>:
   1d414:	14 d1       	rcall	.+552    	; 0x1d63e <__fp_split3>
   1d416:	98 f3       	brcs	.-26     	; 0x1d3fe <__divsf3+0x4>

0001d418 <__divsf3_pse>:
   1d418:	99 23       	and	r25, r25
   1d41a:	c9 f3       	breq	.-14     	; 0x1d40e <__divsf3+0x14>
   1d41c:	55 23       	and	r21, r21
   1d41e:	b1 f3       	breq	.-20     	; 0x1d40c <__divsf3+0x12>
   1d420:	95 1b       	sub	r25, r21
   1d422:	55 0b       	sbc	r21, r21
   1d424:	bb 27       	eor	r27, r27
   1d426:	aa 27       	eor	r26, r26
   1d428:	62 17       	cp	r22, r18
   1d42a:	73 07       	cpc	r23, r19
   1d42c:	84 07       	cpc	r24, r20
   1d42e:	38 f0       	brcs	.+14     	; 0x1d43e <__divsf3_pse+0x26>
   1d430:	9f 5f       	subi	r25, 0xFF	; 255
   1d432:	5f 4f       	sbci	r21, 0xFF	; 255
   1d434:	22 0f       	add	r18, r18
   1d436:	33 1f       	adc	r19, r19
   1d438:	44 1f       	adc	r20, r20
   1d43a:	aa 1f       	adc	r26, r26
   1d43c:	a9 f3       	breq	.-22     	; 0x1d428 <__divsf3_pse+0x10>
   1d43e:	33 d0       	rcall	.+102    	; 0x1d4a6 <__divsf3_pse+0x8e>
   1d440:	0e 2e       	mov	r0, r30
   1d442:	3a f0       	brmi	.+14     	; 0x1d452 <__divsf3_pse+0x3a>
   1d444:	e0 e8       	ldi	r30, 0x80	; 128
   1d446:	30 d0       	rcall	.+96     	; 0x1d4a8 <__divsf3_pse+0x90>
   1d448:	91 50       	subi	r25, 0x01	; 1
   1d44a:	50 40       	sbci	r21, 0x00	; 0
   1d44c:	e6 95       	lsr	r30
   1d44e:	00 1c       	adc	r0, r0
   1d450:	ca f7       	brpl	.-14     	; 0x1d444 <__divsf3_pse+0x2c>
   1d452:	29 d0       	rcall	.+82     	; 0x1d4a6 <__divsf3_pse+0x8e>
   1d454:	fe 2f       	mov	r31, r30
   1d456:	27 d0       	rcall	.+78     	; 0x1d4a6 <__divsf3_pse+0x8e>
   1d458:	66 0f       	add	r22, r22
   1d45a:	77 1f       	adc	r23, r23
   1d45c:	88 1f       	adc	r24, r24
   1d45e:	bb 1f       	adc	r27, r27
   1d460:	26 17       	cp	r18, r22
   1d462:	37 07       	cpc	r19, r23
   1d464:	48 07       	cpc	r20, r24
   1d466:	ab 07       	cpc	r26, r27
   1d468:	b0 e8       	ldi	r27, 0x80	; 128
   1d46a:	09 f0       	breq	.+2      	; 0x1d46e <__divsf3_pse+0x56>
   1d46c:	bb 0b       	sbc	r27, r27
   1d46e:	80 2d       	mov	r24, r0
   1d470:	bf 01       	movw	r22, r30
   1d472:	ff 27       	eor	r31, r31
   1d474:	93 58       	subi	r25, 0x83	; 131
   1d476:	5f 4f       	sbci	r21, 0xFF	; 255
   1d478:	2a f0       	brmi	.+10     	; 0x1d484 <__divsf3_pse+0x6c>
   1d47a:	9e 3f       	cpi	r25, 0xFE	; 254
   1d47c:	51 05       	cpc	r21, r1
   1d47e:	68 f0       	brcs	.+26     	; 0x1d49a <__divsf3_pse+0x82>
   1d480:	b6 c0       	rjmp	.+364    	; 0x1d5ee <__fp_inf>
   1d482:	00 c1       	rjmp	.+512    	; 0x1d684 <__fp_szero>
   1d484:	5f 3f       	cpi	r21, 0xFF	; 255
   1d486:	ec f3       	brlt	.-6      	; 0x1d482 <__divsf3_pse+0x6a>
   1d488:	98 3e       	cpi	r25, 0xE8	; 232
   1d48a:	dc f3       	brlt	.-10     	; 0x1d482 <__divsf3_pse+0x6a>
   1d48c:	86 95       	lsr	r24
   1d48e:	77 95       	ror	r23
   1d490:	67 95       	ror	r22
   1d492:	b7 95       	ror	r27
   1d494:	f7 95       	ror	r31
   1d496:	9f 5f       	subi	r25, 0xFF	; 255
   1d498:	c9 f7       	brne	.-14     	; 0x1d48c <__divsf3_pse+0x74>
   1d49a:	88 0f       	add	r24, r24
   1d49c:	91 1d       	adc	r25, r1
   1d49e:	96 95       	lsr	r25
   1d4a0:	87 95       	ror	r24
   1d4a2:	97 f9       	bld	r25, 7
   1d4a4:	08 95       	ret
   1d4a6:	e1 e0       	ldi	r30, 0x01	; 1
   1d4a8:	66 0f       	add	r22, r22
   1d4aa:	77 1f       	adc	r23, r23
   1d4ac:	88 1f       	adc	r24, r24
   1d4ae:	bb 1f       	adc	r27, r27
   1d4b0:	62 17       	cp	r22, r18
   1d4b2:	73 07       	cpc	r23, r19
   1d4b4:	84 07       	cpc	r24, r20
   1d4b6:	ba 07       	cpc	r27, r26
   1d4b8:	20 f0       	brcs	.+8      	; 0x1d4c2 <__divsf3_pse+0xaa>
   1d4ba:	62 1b       	sub	r22, r18
   1d4bc:	73 0b       	sbc	r23, r19
   1d4be:	84 0b       	sbc	r24, r20
   1d4c0:	ba 0b       	sbc	r27, r26
   1d4c2:	ee 1f       	adc	r30, r30
   1d4c4:	88 f7       	brcc	.-30     	; 0x1d4a8 <__divsf3_pse+0x90>
   1d4c6:	e0 95       	com	r30
   1d4c8:	08 95       	ret

0001d4ca <__fixsfsi>:
   1d4ca:	04 d0       	rcall	.+8      	; 0x1d4d4 <__fixunssfsi>
   1d4cc:	68 94       	set
   1d4ce:	b1 11       	cpse	r27, r1
   1d4d0:	d9 c0       	rjmp	.+434    	; 0x1d684 <__fp_szero>
   1d4d2:	08 95       	ret

0001d4d4 <__fixunssfsi>:
   1d4d4:	bc d0       	rcall	.+376    	; 0x1d64e <__fp_splitA>
   1d4d6:	88 f0       	brcs	.+34     	; 0x1d4fa <__fixunssfsi+0x26>
   1d4d8:	9f 57       	subi	r25, 0x7F	; 127
   1d4da:	90 f0       	brcs	.+36     	; 0x1d500 <__fixunssfsi+0x2c>
   1d4dc:	b9 2f       	mov	r27, r25
   1d4de:	99 27       	eor	r25, r25
   1d4e0:	b7 51       	subi	r27, 0x17	; 23
   1d4e2:	a0 f0       	brcs	.+40     	; 0x1d50c <__fixunssfsi+0x38>
   1d4e4:	d1 f0       	breq	.+52     	; 0x1d51a <__fixunssfsi+0x46>
   1d4e6:	66 0f       	add	r22, r22
   1d4e8:	77 1f       	adc	r23, r23
   1d4ea:	88 1f       	adc	r24, r24
   1d4ec:	99 1f       	adc	r25, r25
   1d4ee:	1a f0       	brmi	.+6      	; 0x1d4f6 <__fixunssfsi+0x22>
   1d4f0:	ba 95       	dec	r27
   1d4f2:	c9 f7       	brne	.-14     	; 0x1d4e6 <__fixunssfsi+0x12>
   1d4f4:	12 c0       	rjmp	.+36     	; 0x1d51a <__fixunssfsi+0x46>
   1d4f6:	b1 30       	cpi	r27, 0x01	; 1
   1d4f8:	81 f0       	breq	.+32     	; 0x1d51a <__fixunssfsi+0x46>
   1d4fa:	c3 d0       	rcall	.+390    	; 0x1d682 <__fp_zero>
   1d4fc:	b1 e0       	ldi	r27, 0x01	; 1
   1d4fe:	08 95       	ret
   1d500:	c0 c0       	rjmp	.+384    	; 0x1d682 <__fp_zero>
   1d502:	67 2f       	mov	r22, r23
   1d504:	78 2f       	mov	r23, r24
   1d506:	88 27       	eor	r24, r24
   1d508:	b8 5f       	subi	r27, 0xF8	; 248
   1d50a:	39 f0       	breq	.+14     	; 0x1d51a <__fixunssfsi+0x46>
   1d50c:	b9 3f       	cpi	r27, 0xF9	; 249
   1d50e:	cc f3       	brlt	.-14     	; 0x1d502 <__fixunssfsi+0x2e>
   1d510:	86 95       	lsr	r24
   1d512:	77 95       	ror	r23
   1d514:	67 95       	ror	r22
   1d516:	b3 95       	inc	r27
   1d518:	d9 f7       	brne	.-10     	; 0x1d510 <__fixunssfsi+0x3c>
   1d51a:	3e f4       	brtc	.+14     	; 0x1d52a <__fixunssfsi+0x56>
   1d51c:	90 95       	com	r25
   1d51e:	80 95       	com	r24
   1d520:	70 95       	com	r23
   1d522:	61 95       	neg	r22
   1d524:	7f 4f       	sbci	r23, 0xFF	; 255
   1d526:	8f 4f       	sbci	r24, 0xFF	; 255
   1d528:	9f 4f       	sbci	r25, 0xFF	; 255
   1d52a:	08 95       	ret

0001d52c <__floatunsisf>:
   1d52c:	e8 94       	clt
   1d52e:	09 c0       	rjmp	.+18     	; 0x1d542 <__floatsisf+0x12>

0001d530 <__floatsisf>:
   1d530:	97 fb       	bst	r25, 7
   1d532:	3e f4       	brtc	.+14     	; 0x1d542 <__floatsisf+0x12>
   1d534:	90 95       	com	r25
   1d536:	80 95       	com	r24
   1d538:	70 95       	com	r23
   1d53a:	61 95       	neg	r22
   1d53c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d53e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d540:	9f 4f       	sbci	r25, 0xFF	; 255
   1d542:	99 23       	and	r25, r25
   1d544:	a9 f0       	breq	.+42     	; 0x1d570 <__floatsisf+0x40>
   1d546:	f9 2f       	mov	r31, r25
   1d548:	96 e9       	ldi	r25, 0x96	; 150
   1d54a:	bb 27       	eor	r27, r27
   1d54c:	93 95       	inc	r25
   1d54e:	f6 95       	lsr	r31
   1d550:	87 95       	ror	r24
   1d552:	77 95       	ror	r23
   1d554:	67 95       	ror	r22
   1d556:	b7 95       	ror	r27
   1d558:	f1 11       	cpse	r31, r1
   1d55a:	f8 cf       	rjmp	.-16     	; 0x1d54c <__floatsisf+0x1c>
   1d55c:	fa f4       	brpl	.+62     	; 0x1d59c <__floatsisf+0x6c>
   1d55e:	bb 0f       	add	r27, r27
   1d560:	11 f4       	brne	.+4      	; 0x1d566 <__floatsisf+0x36>
   1d562:	60 ff       	sbrs	r22, 0
   1d564:	1b c0       	rjmp	.+54     	; 0x1d59c <__floatsisf+0x6c>
   1d566:	6f 5f       	subi	r22, 0xFF	; 255
   1d568:	7f 4f       	sbci	r23, 0xFF	; 255
   1d56a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d56c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d56e:	16 c0       	rjmp	.+44     	; 0x1d59c <__floatsisf+0x6c>
   1d570:	88 23       	and	r24, r24
   1d572:	11 f0       	breq	.+4      	; 0x1d578 <__floatsisf+0x48>
   1d574:	96 e9       	ldi	r25, 0x96	; 150
   1d576:	11 c0       	rjmp	.+34     	; 0x1d59a <__floatsisf+0x6a>
   1d578:	77 23       	and	r23, r23
   1d57a:	21 f0       	breq	.+8      	; 0x1d584 <__floatsisf+0x54>
   1d57c:	9e e8       	ldi	r25, 0x8E	; 142
   1d57e:	87 2f       	mov	r24, r23
   1d580:	76 2f       	mov	r23, r22
   1d582:	05 c0       	rjmp	.+10     	; 0x1d58e <__floatsisf+0x5e>
   1d584:	66 23       	and	r22, r22
   1d586:	71 f0       	breq	.+28     	; 0x1d5a4 <__floatsisf+0x74>
   1d588:	96 e8       	ldi	r25, 0x86	; 134
   1d58a:	86 2f       	mov	r24, r22
   1d58c:	70 e0       	ldi	r23, 0x00	; 0
   1d58e:	60 e0       	ldi	r22, 0x00	; 0
   1d590:	2a f0       	brmi	.+10     	; 0x1d59c <__floatsisf+0x6c>
   1d592:	9a 95       	dec	r25
   1d594:	66 0f       	add	r22, r22
   1d596:	77 1f       	adc	r23, r23
   1d598:	88 1f       	adc	r24, r24
   1d59a:	da f7       	brpl	.-10     	; 0x1d592 <__floatsisf+0x62>
   1d59c:	88 0f       	add	r24, r24
   1d59e:	96 95       	lsr	r25
   1d5a0:	87 95       	ror	r24
   1d5a2:	97 f9       	bld	r25, 7
   1d5a4:	08 95       	ret

0001d5a6 <__fp_cmp>:
   1d5a6:	99 0f       	add	r25, r25
   1d5a8:	00 08       	sbc	r0, r0
   1d5aa:	55 0f       	add	r21, r21
   1d5ac:	aa 0b       	sbc	r26, r26
   1d5ae:	e0 e8       	ldi	r30, 0x80	; 128
   1d5b0:	fe ef       	ldi	r31, 0xFE	; 254
   1d5b2:	16 16       	cp	r1, r22
   1d5b4:	17 06       	cpc	r1, r23
   1d5b6:	e8 07       	cpc	r30, r24
   1d5b8:	f9 07       	cpc	r31, r25
   1d5ba:	c0 f0       	brcs	.+48     	; 0x1d5ec <__fp_cmp+0x46>
   1d5bc:	12 16       	cp	r1, r18
   1d5be:	13 06       	cpc	r1, r19
   1d5c0:	e4 07       	cpc	r30, r20
   1d5c2:	f5 07       	cpc	r31, r21
   1d5c4:	98 f0       	brcs	.+38     	; 0x1d5ec <__fp_cmp+0x46>
   1d5c6:	62 1b       	sub	r22, r18
   1d5c8:	73 0b       	sbc	r23, r19
   1d5ca:	84 0b       	sbc	r24, r20
   1d5cc:	95 0b       	sbc	r25, r21
   1d5ce:	39 f4       	brne	.+14     	; 0x1d5de <__fp_cmp+0x38>
   1d5d0:	0a 26       	eor	r0, r26
   1d5d2:	61 f0       	breq	.+24     	; 0x1d5ec <__fp_cmp+0x46>
   1d5d4:	23 2b       	or	r18, r19
   1d5d6:	24 2b       	or	r18, r20
   1d5d8:	25 2b       	or	r18, r21
   1d5da:	21 f4       	brne	.+8      	; 0x1d5e4 <__fp_cmp+0x3e>
   1d5dc:	08 95       	ret
   1d5de:	0a 26       	eor	r0, r26
   1d5e0:	09 f4       	brne	.+2      	; 0x1d5e4 <__fp_cmp+0x3e>
   1d5e2:	a1 40       	sbci	r26, 0x01	; 1
   1d5e4:	a6 95       	lsr	r26
   1d5e6:	8f ef       	ldi	r24, 0xFF	; 255
   1d5e8:	81 1d       	adc	r24, r1
   1d5ea:	81 1d       	adc	r24, r1
   1d5ec:	08 95       	ret

0001d5ee <__fp_inf>:
   1d5ee:	97 f9       	bld	r25, 7
   1d5f0:	9f 67       	ori	r25, 0x7F	; 127
   1d5f2:	80 e8       	ldi	r24, 0x80	; 128
   1d5f4:	70 e0       	ldi	r23, 0x00	; 0
   1d5f6:	60 e0       	ldi	r22, 0x00	; 0
   1d5f8:	08 95       	ret

0001d5fa <__fp_nan>:
   1d5fa:	9f ef       	ldi	r25, 0xFF	; 255
   1d5fc:	80 ec       	ldi	r24, 0xC0	; 192
   1d5fe:	08 95       	ret

0001d600 <__fp_pscA>:
   1d600:	00 24       	eor	r0, r0
   1d602:	0a 94       	dec	r0
   1d604:	16 16       	cp	r1, r22
   1d606:	17 06       	cpc	r1, r23
   1d608:	18 06       	cpc	r1, r24
   1d60a:	09 06       	cpc	r0, r25
   1d60c:	08 95       	ret

0001d60e <__fp_pscB>:
   1d60e:	00 24       	eor	r0, r0
   1d610:	0a 94       	dec	r0
   1d612:	12 16       	cp	r1, r18
   1d614:	13 06       	cpc	r1, r19
   1d616:	14 06       	cpc	r1, r20
   1d618:	05 06       	cpc	r0, r21
   1d61a:	08 95       	ret

0001d61c <__fp_round>:
   1d61c:	09 2e       	mov	r0, r25
   1d61e:	03 94       	inc	r0
   1d620:	00 0c       	add	r0, r0
   1d622:	11 f4       	brne	.+4      	; 0x1d628 <__fp_round+0xc>
   1d624:	88 23       	and	r24, r24
   1d626:	52 f0       	brmi	.+20     	; 0x1d63c <__fp_round+0x20>
   1d628:	bb 0f       	add	r27, r27
   1d62a:	40 f4       	brcc	.+16     	; 0x1d63c <__fp_round+0x20>
   1d62c:	bf 2b       	or	r27, r31
   1d62e:	11 f4       	brne	.+4      	; 0x1d634 <__fp_round+0x18>
   1d630:	60 ff       	sbrs	r22, 0
   1d632:	04 c0       	rjmp	.+8      	; 0x1d63c <__fp_round+0x20>
   1d634:	6f 5f       	subi	r22, 0xFF	; 255
   1d636:	7f 4f       	sbci	r23, 0xFF	; 255
   1d638:	8f 4f       	sbci	r24, 0xFF	; 255
   1d63a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d63c:	08 95       	ret

0001d63e <__fp_split3>:
   1d63e:	57 fd       	sbrc	r21, 7
   1d640:	90 58       	subi	r25, 0x80	; 128
   1d642:	44 0f       	add	r20, r20
   1d644:	55 1f       	adc	r21, r21
   1d646:	59 f0       	breq	.+22     	; 0x1d65e <__fp_splitA+0x10>
   1d648:	5f 3f       	cpi	r21, 0xFF	; 255
   1d64a:	71 f0       	breq	.+28     	; 0x1d668 <__fp_splitA+0x1a>
   1d64c:	47 95       	ror	r20

0001d64e <__fp_splitA>:
   1d64e:	88 0f       	add	r24, r24
   1d650:	97 fb       	bst	r25, 7
   1d652:	99 1f       	adc	r25, r25
   1d654:	61 f0       	breq	.+24     	; 0x1d66e <__fp_splitA+0x20>
   1d656:	9f 3f       	cpi	r25, 0xFF	; 255
   1d658:	79 f0       	breq	.+30     	; 0x1d678 <__fp_splitA+0x2a>
   1d65a:	87 95       	ror	r24
   1d65c:	08 95       	ret
   1d65e:	12 16       	cp	r1, r18
   1d660:	13 06       	cpc	r1, r19
   1d662:	14 06       	cpc	r1, r20
   1d664:	55 1f       	adc	r21, r21
   1d666:	f2 cf       	rjmp	.-28     	; 0x1d64c <__fp_split3+0xe>
   1d668:	46 95       	lsr	r20
   1d66a:	f1 df       	rcall	.-30     	; 0x1d64e <__fp_splitA>
   1d66c:	08 c0       	rjmp	.+16     	; 0x1d67e <__fp_splitA+0x30>
   1d66e:	16 16       	cp	r1, r22
   1d670:	17 06       	cpc	r1, r23
   1d672:	18 06       	cpc	r1, r24
   1d674:	99 1f       	adc	r25, r25
   1d676:	f1 cf       	rjmp	.-30     	; 0x1d65a <__fp_splitA+0xc>
   1d678:	86 95       	lsr	r24
   1d67a:	71 05       	cpc	r23, r1
   1d67c:	61 05       	cpc	r22, r1
   1d67e:	08 94       	sec
   1d680:	08 95       	ret

0001d682 <__fp_zero>:
   1d682:	e8 94       	clt

0001d684 <__fp_szero>:
   1d684:	bb 27       	eor	r27, r27
   1d686:	66 27       	eor	r22, r22
   1d688:	77 27       	eor	r23, r23
   1d68a:	cb 01       	movw	r24, r22
   1d68c:	97 f9       	bld	r25, 7
   1d68e:	08 95       	ret

0001d690 <__gesf2>:
   1d690:	8a df       	rcall	.-236    	; 0x1d5a6 <__fp_cmp>
   1d692:	08 f4       	brcc	.+2      	; 0x1d696 <__gesf2+0x6>
   1d694:	8f ef       	ldi	r24, 0xFF	; 255
   1d696:	08 95       	ret

0001d698 <__mulsf3>:
   1d698:	0b d0       	rcall	.+22     	; 0x1d6b0 <__mulsf3x>
   1d69a:	c0 cf       	rjmp	.-128    	; 0x1d61c <__fp_round>
   1d69c:	b1 df       	rcall	.-158    	; 0x1d600 <__fp_pscA>
   1d69e:	28 f0       	brcs	.+10     	; 0x1d6aa <__mulsf3+0x12>
   1d6a0:	b6 df       	rcall	.-148    	; 0x1d60e <__fp_pscB>
   1d6a2:	18 f0       	brcs	.+6      	; 0x1d6aa <__mulsf3+0x12>
   1d6a4:	95 23       	and	r25, r21
   1d6a6:	09 f0       	breq	.+2      	; 0x1d6aa <__mulsf3+0x12>
   1d6a8:	a2 cf       	rjmp	.-188    	; 0x1d5ee <__fp_inf>
   1d6aa:	a7 cf       	rjmp	.-178    	; 0x1d5fa <__fp_nan>
   1d6ac:	11 24       	eor	r1, r1
   1d6ae:	ea cf       	rjmp	.-44     	; 0x1d684 <__fp_szero>

0001d6b0 <__mulsf3x>:
   1d6b0:	c6 df       	rcall	.-116    	; 0x1d63e <__fp_split3>
   1d6b2:	a0 f3       	brcs	.-24     	; 0x1d69c <__mulsf3+0x4>

0001d6b4 <__mulsf3_pse>:
   1d6b4:	95 9f       	mul	r25, r21
   1d6b6:	d1 f3       	breq	.-12     	; 0x1d6ac <__mulsf3+0x14>
   1d6b8:	95 0f       	add	r25, r21
   1d6ba:	50 e0       	ldi	r21, 0x00	; 0
   1d6bc:	55 1f       	adc	r21, r21
   1d6be:	62 9f       	mul	r22, r18
   1d6c0:	f0 01       	movw	r30, r0
   1d6c2:	72 9f       	mul	r23, r18
   1d6c4:	bb 27       	eor	r27, r27
   1d6c6:	f0 0d       	add	r31, r0
   1d6c8:	b1 1d       	adc	r27, r1
   1d6ca:	63 9f       	mul	r22, r19
   1d6cc:	aa 27       	eor	r26, r26
   1d6ce:	f0 0d       	add	r31, r0
   1d6d0:	b1 1d       	adc	r27, r1
   1d6d2:	aa 1f       	adc	r26, r26
   1d6d4:	64 9f       	mul	r22, r20
   1d6d6:	66 27       	eor	r22, r22
   1d6d8:	b0 0d       	add	r27, r0
   1d6da:	a1 1d       	adc	r26, r1
   1d6dc:	66 1f       	adc	r22, r22
   1d6de:	82 9f       	mul	r24, r18
   1d6e0:	22 27       	eor	r18, r18
   1d6e2:	b0 0d       	add	r27, r0
   1d6e4:	a1 1d       	adc	r26, r1
   1d6e6:	62 1f       	adc	r22, r18
   1d6e8:	73 9f       	mul	r23, r19
   1d6ea:	b0 0d       	add	r27, r0
   1d6ec:	a1 1d       	adc	r26, r1
   1d6ee:	62 1f       	adc	r22, r18
   1d6f0:	83 9f       	mul	r24, r19
   1d6f2:	a0 0d       	add	r26, r0
   1d6f4:	61 1d       	adc	r22, r1
   1d6f6:	22 1f       	adc	r18, r18
   1d6f8:	74 9f       	mul	r23, r20
   1d6fa:	33 27       	eor	r19, r19
   1d6fc:	a0 0d       	add	r26, r0
   1d6fe:	61 1d       	adc	r22, r1
   1d700:	23 1f       	adc	r18, r19
   1d702:	84 9f       	mul	r24, r20
   1d704:	60 0d       	add	r22, r0
   1d706:	21 1d       	adc	r18, r1
   1d708:	82 2f       	mov	r24, r18
   1d70a:	76 2f       	mov	r23, r22
   1d70c:	6a 2f       	mov	r22, r26
   1d70e:	11 24       	eor	r1, r1
   1d710:	9f 57       	subi	r25, 0x7F	; 127
   1d712:	50 40       	sbci	r21, 0x00	; 0
   1d714:	8a f0       	brmi	.+34     	; 0x1d738 <__mulsf3_pse+0x84>
   1d716:	e1 f0       	breq	.+56     	; 0x1d750 <__mulsf3_pse+0x9c>
   1d718:	88 23       	and	r24, r24
   1d71a:	4a f0       	brmi	.+18     	; 0x1d72e <__mulsf3_pse+0x7a>
   1d71c:	ee 0f       	add	r30, r30
   1d71e:	ff 1f       	adc	r31, r31
   1d720:	bb 1f       	adc	r27, r27
   1d722:	66 1f       	adc	r22, r22
   1d724:	77 1f       	adc	r23, r23
   1d726:	88 1f       	adc	r24, r24
   1d728:	91 50       	subi	r25, 0x01	; 1
   1d72a:	50 40       	sbci	r21, 0x00	; 0
   1d72c:	a9 f7       	brne	.-22     	; 0x1d718 <__mulsf3_pse+0x64>
   1d72e:	9e 3f       	cpi	r25, 0xFE	; 254
   1d730:	51 05       	cpc	r21, r1
   1d732:	70 f0       	brcs	.+28     	; 0x1d750 <__mulsf3_pse+0x9c>
   1d734:	5c cf       	rjmp	.-328    	; 0x1d5ee <__fp_inf>
   1d736:	a6 cf       	rjmp	.-180    	; 0x1d684 <__fp_szero>
   1d738:	5f 3f       	cpi	r21, 0xFF	; 255
   1d73a:	ec f3       	brlt	.-6      	; 0x1d736 <__mulsf3_pse+0x82>
   1d73c:	98 3e       	cpi	r25, 0xE8	; 232
   1d73e:	dc f3       	brlt	.-10     	; 0x1d736 <__mulsf3_pse+0x82>
   1d740:	86 95       	lsr	r24
   1d742:	77 95       	ror	r23
   1d744:	67 95       	ror	r22
   1d746:	b7 95       	ror	r27
   1d748:	f7 95       	ror	r31
   1d74a:	e7 95       	ror	r30
   1d74c:	9f 5f       	subi	r25, 0xFF	; 255
   1d74e:	c1 f7       	brne	.-16     	; 0x1d740 <__mulsf3_pse+0x8c>
   1d750:	fe 2b       	or	r31, r30
   1d752:	88 0f       	add	r24, r24
   1d754:	91 1d       	adc	r25, r1
   1d756:	96 95       	lsr	r25
   1d758:	87 95       	ror	r24
   1d75a:	97 f9       	bld	r25, 7
   1d75c:	08 95       	ret

0001d75e <round>:
   1d75e:	77 df       	rcall	.-274    	; 0x1d64e <__fp_splitA>
   1d760:	e0 f0       	brcs	.+56     	; 0x1d79a <round+0x3c>
   1d762:	9e 37       	cpi	r25, 0x7E	; 126
   1d764:	d8 f0       	brcs	.+54     	; 0x1d79c <round+0x3e>
   1d766:	96 39       	cpi	r25, 0x96	; 150
   1d768:	b8 f4       	brcc	.+46     	; 0x1d798 <round+0x3a>
   1d76a:	9e 38       	cpi	r25, 0x8E	; 142
   1d76c:	48 f4       	brcc	.+18     	; 0x1d780 <round+0x22>
   1d76e:	67 2f       	mov	r22, r23
   1d770:	78 2f       	mov	r23, r24
   1d772:	88 27       	eor	r24, r24
   1d774:	98 5f       	subi	r25, 0xF8	; 248
   1d776:	f9 cf       	rjmp	.-14     	; 0x1d76a <round+0xc>
   1d778:	86 95       	lsr	r24
   1d77a:	77 95       	ror	r23
   1d77c:	67 95       	ror	r22
   1d77e:	93 95       	inc	r25
   1d780:	95 39       	cpi	r25, 0x95	; 149
   1d782:	d0 f3       	brcs	.-12     	; 0x1d778 <round+0x1a>
   1d784:	b6 2f       	mov	r27, r22
   1d786:	b1 70       	andi	r27, 0x01	; 1
   1d788:	6b 0f       	add	r22, r27
   1d78a:	71 1d       	adc	r23, r1
   1d78c:	81 1d       	adc	r24, r1
   1d78e:	20 f4       	brcc	.+8      	; 0x1d798 <round+0x3a>
   1d790:	87 95       	ror	r24
   1d792:	77 95       	ror	r23
   1d794:	67 95       	ror	r22
   1d796:	93 95       	inc	r25
   1d798:	02 c0       	rjmp	.+4      	; 0x1d79e <__fp_mintl>
   1d79a:	1c c0       	rjmp	.+56     	; 0x1d7d4 <__fp_mpack>
   1d79c:	73 cf       	rjmp	.-282    	; 0x1d684 <__fp_szero>

0001d79e <__fp_mintl>:
   1d79e:	88 23       	and	r24, r24
   1d7a0:	71 f4       	brne	.+28     	; 0x1d7be <__fp_mintl+0x20>
   1d7a2:	77 23       	and	r23, r23
   1d7a4:	21 f0       	breq	.+8      	; 0x1d7ae <__fp_mintl+0x10>
   1d7a6:	98 50       	subi	r25, 0x08	; 8
   1d7a8:	87 2b       	or	r24, r23
   1d7aa:	76 2f       	mov	r23, r22
   1d7ac:	07 c0       	rjmp	.+14     	; 0x1d7bc <__fp_mintl+0x1e>
   1d7ae:	66 23       	and	r22, r22
   1d7b0:	11 f4       	brne	.+4      	; 0x1d7b6 <__fp_mintl+0x18>
   1d7b2:	99 27       	eor	r25, r25
   1d7b4:	0d c0       	rjmp	.+26     	; 0x1d7d0 <__fp_mintl+0x32>
   1d7b6:	90 51       	subi	r25, 0x10	; 16
   1d7b8:	86 2b       	or	r24, r22
   1d7ba:	70 e0       	ldi	r23, 0x00	; 0
   1d7bc:	60 e0       	ldi	r22, 0x00	; 0
   1d7be:	2a f0       	brmi	.+10     	; 0x1d7ca <__fp_mintl+0x2c>
   1d7c0:	9a 95       	dec	r25
   1d7c2:	66 0f       	add	r22, r22
   1d7c4:	77 1f       	adc	r23, r23
   1d7c6:	88 1f       	adc	r24, r24
   1d7c8:	da f7       	brpl	.-10     	; 0x1d7c0 <__fp_mintl+0x22>
   1d7ca:	88 0f       	add	r24, r24
   1d7cc:	96 95       	lsr	r25
   1d7ce:	87 95       	ror	r24
   1d7d0:	97 f9       	bld	r25, 7
   1d7d2:	08 95       	ret

0001d7d4 <__fp_mpack>:
   1d7d4:	9f 3f       	cpi	r25, 0xFF	; 255
   1d7d6:	31 f0       	breq	.+12     	; 0x1d7e4 <__fp_mpack_finite+0xc>

0001d7d8 <__fp_mpack_finite>:
   1d7d8:	91 50       	subi	r25, 0x01	; 1
   1d7da:	20 f4       	brcc	.+8      	; 0x1d7e4 <__fp_mpack_finite+0xc>
   1d7dc:	87 95       	ror	r24
   1d7de:	77 95       	ror	r23
   1d7e0:	67 95       	ror	r22
   1d7e2:	b7 95       	ror	r27
   1d7e4:	88 0f       	add	r24, r24
   1d7e6:	91 1d       	adc	r25, r1
   1d7e8:	96 95       	lsr	r25
   1d7ea:	87 95       	ror	r24
   1d7ec:	97 f9       	bld	r25, 7
   1d7ee:	08 95       	ret

0001d7f0 <calloc>:
   1d7f0:	0f 93       	push	r16
   1d7f2:	1f 93       	push	r17
   1d7f4:	cf 93       	push	r28
   1d7f6:	df 93       	push	r29
   1d7f8:	86 9f       	mul	r24, r22
   1d7fa:	80 01       	movw	r16, r0
   1d7fc:	87 9f       	mul	r24, r23
   1d7fe:	10 0d       	add	r17, r0
   1d800:	96 9f       	mul	r25, r22
   1d802:	10 0d       	add	r17, r0
   1d804:	11 24       	eor	r1, r1
   1d806:	c8 01       	movw	r24, r16
   1d808:	0d d0       	rcall	.+26     	; 0x1d824 <malloc>
   1d80a:	ec 01       	movw	r28, r24
   1d80c:	00 97       	sbiw	r24, 0x00	; 0
   1d80e:	21 f0       	breq	.+8      	; 0x1d818 <calloc+0x28>
   1d810:	a8 01       	movw	r20, r16
   1d812:	60 e0       	ldi	r22, 0x00	; 0
   1d814:	70 e0       	ldi	r23, 0x00	; 0
   1d816:	0a d2       	rcall	.+1044   	; 0x1dc2c <memset>
   1d818:	ce 01       	movw	r24, r28
   1d81a:	df 91       	pop	r29
   1d81c:	cf 91       	pop	r28
   1d81e:	1f 91       	pop	r17
   1d820:	0f 91       	pop	r16
   1d822:	08 95       	ret

0001d824 <malloc>:
   1d824:	0f 93       	push	r16
   1d826:	1f 93       	push	r17
   1d828:	cf 93       	push	r28
   1d82a:	df 93       	push	r29
   1d82c:	82 30       	cpi	r24, 0x02	; 2
   1d82e:	91 05       	cpc	r25, r1
   1d830:	10 f4       	brcc	.+4      	; 0x1d836 <malloc+0x12>
   1d832:	82 e0       	ldi	r24, 0x02	; 2
   1d834:	90 e0       	ldi	r25, 0x00	; 0
   1d836:	e0 91 e9 1e 	lds	r30, 0x1EE9	; 0x801ee9 <__flp>
   1d83a:	f0 91 ea 1e 	lds	r31, 0x1EEA	; 0x801eea <__flp+0x1>
   1d83e:	20 e0       	ldi	r18, 0x00	; 0
   1d840:	30 e0       	ldi	r19, 0x00	; 0
   1d842:	a0 e0       	ldi	r26, 0x00	; 0
   1d844:	b0 e0       	ldi	r27, 0x00	; 0
   1d846:	30 97       	sbiw	r30, 0x00	; 0
   1d848:	19 f1       	breq	.+70     	; 0x1d890 <malloc+0x6c>
   1d84a:	40 81       	ld	r20, Z
   1d84c:	51 81       	ldd	r21, Z+1	; 0x01
   1d84e:	02 81       	ldd	r16, Z+2	; 0x02
   1d850:	13 81       	ldd	r17, Z+3	; 0x03
   1d852:	48 17       	cp	r20, r24
   1d854:	59 07       	cpc	r21, r25
   1d856:	c8 f0       	brcs	.+50     	; 0x1d88a <malloc+0x66>
   1d858:	84 17       	cp	r24, r20
   1d85a:	95 07       	cpc	r25, r21
   1d85c:	69 f4       	brne	.+26     	; 0x1d878 <malloc+0x54>
   1d85e:	10 97       	sbiw	r26, 0x00	; 0
   1d860:	31 f0       	breq	.+12     	; 0x1d86e <malloc+0x4a>
   1d862:	12 96       	adiw	r26, 0x02	; 2
   1d864:	0c 93       	st	X, r16
   1d866:	12 97       	sbiw	r26, 0x02	; 2
   1d868:	13 96       	adiw	r26, 0x03	; 3
   1d86a:	1c 93       	st	X, r17
   1d86c:	27 c0       	rjmp	.+78     	; 0x1d8bc <malloc+0x98>
   1d86e:	00 93 e9 1e 	sts	0x1EE9, r16	; 0x801ee9 <__flp>
   1d872:	10 93 ea 1e 	sts	0x1EEA, r17	; 0x801eea <__flp+0x1>
   1d876:	22 c0       	rjmp	.+68     	; 0x1d8bc <malloc+0x98>
   1d878:	21 15       	cp	r18, r1
   1d87a:	31 05       	cpc	r19, r1
   1d87c:	19 f0       	breq	.+6      	; 0x1d884 <malloc+0x60>
   1d87e:	42 17       	cp	r20, r18
   1d880:	53 07       	cpc	r21, r19
   1d882:	18 f4       	brcc	.+6      	; 0x1d88a <malloc+0x66>
   1d884:	9a 01       	movw	r18, r20
   1d886:	bd 01       	movw	r22, r26
   1d888:	ef 01       	movw	r28, r30
   1d88a:	df 01       	movw	r26, r30
   1d88c:	f8 01       	movw	r30, r16
   1d88e:	db cf       	rjmp	.-74     	; 0x1d846 <malloc+0x22>
   1d890:	21 15       	cp	r18, r1
   1d892:	31 05       	cpc	r19, r1
   1d894:	f9 f0       	breq	.+62     	; 0x1d8d4 <malloc+0xb0>
   1d896:	28 1b       	sub	r18, r24
   1d898:	39 0b       	sbc	r19, r25
   1d89a:	24 30       	cpi	r18, 0x04	; 4
   1d89c:	31 05       	cpc	r19, r1
   1d89e:	80 f4       	brcc	.+32     	; 0x1d8c0 <malloc+0x9c>
   1d8a0:	8a 81       	ldd	r24, Y+2	; 0x02
   1d8a2:	9b 81       	ldd	r25, Y+3	; 0x03
   1d8a4:	61 15       	cp	r22, r1
   1d8a6:	71 05       	cpc	r23, r1
   1d8a8:	21 f0       	breq	.+8      	; 0x1d8b2 <malloc+0x8e>
   1d8aa:	fb 01       	movw	r30, r22
   1d8ac:	93 83       	std	Z+3, r25	; 0x03
   1d8ae:	82 83       	std	Z+2, r24	; 0x02
   1d8b0:	04 c0       	rjmp	.+8      	; 0x1d8ba <malloc+0x96>
   1d8b2:	90 93 ea 1e 	sts	0x1EEA, r25	; 0x801eea <__flp+0x1>
   1d8b6:	80 93 e9 1e 	sts	0x1EE9, r24	; 0x801ee9 <__flp>
   1d8ba:	fe 01       	movw	r30, r28
   1d8bc:	32 96       	adiw	r30, 0x02	; 2
   1d8be:	44 c0       	rjmp	.+136    	; 0x1d948 <malloc+0x124>
   1d8c0:	fe 01       	movw	r30, r28
   1d8c2:	e2 0f       	add	r30, r18
   1d8c4:	f3 1f       	adc	r31, r19
   1d8c6:	81 93       	st	Z+, r24
   1d8c8:	91 93       	st	Z+, r25
   1d8ca:	22 50       	subi	r18, 0x02	; 2
   1d8cc:	31 09       	sbc	r19, r1
   1d8ce:	39 83       	std	Y+1, r19	; 0x01
   1d8d0:	28 83       	st	Y, r18
   1d8d2:	3a c0       	rjmp	.+116    	; 0x1d948 <malloc+0x124>
   1d8d4:	20 91 e7 1e 	lds	r18, 0x1EE7	; 0x801ee7 <__brkval>
   1d8d8:	30 91 e8 1e 	lds	r19, 0x1EE8	; 0x801ee8 <__brkval+0x1>
   1d8dc:	23 2b       	or	r18, r19
   1d8de:	41 f4       	brne	.+16     	; 0x1d8f0 <malloc+0xcc>
   1d8e0:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__malloc_heap_start>
   1d8e4:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__malloc_heap_start+0x1>
   1d8e8:	30 93 e8 1e 	sts	0x1EE8, r19	; 0x801ee8 <__brkval+0x1>
   1d8ec:	20 93 e7 1e 	sts	0x1EE7, r18	; 0x801ee7 <__brkval>
   1d8f0:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__malloc_heap_end>
   1d8f4:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__malloc_heap_end+0x1>
   1d8f8:	21 15       	cp	r18, r1
   1d8fa:	31 05       	cpc	r19, r1
   1d8fc:	41 f4       	brne	.+16     	; 0x1d90e <malloc+0xea>
   1d8fe:	2d b7       	in	r18, 0x3d	; 61
   1d900:	3e b7       	in	r19, 0x3e	; 62
   1d902:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <__malloc_margin>
   1d906:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <__malloc_margin+0x1>
   1d90a:	24 1b       	sub	r18, r20
   1d90c:	35 0b       	sbc	r19, r21
   1d90e:	e0 91 e7 1e 	lds	r30, 0x1EE7	; 0x801ee7 <__brkval>
   1d912:	f0 91 e8 1e 	lds	r31, 0x1EE8	; 0x801ee8 <__brkval+0x1>
   1d916:	e2 17       	cp	r30, r18
   1d918:	f3 07       	cpc	r31, r19
   1d91a:	a0 f4       	brcc	.+40     	; 0x1d944 <malloc+0x120>
   1d91c:	2e 1b       	sub	r18, r30
   1d91e:	3f 0b       	sbc	r19, r31
   1d920:	28 17       	cp	r18, r24
   1d922:	39 07       	cpc	r19, r25
   1d924:	78 f0       	brcs	.+30     	; 0x1d944 <malloc+0x120>
   1d926:	ac 01       	movw	r20, r24
   1d928:	4e 5f       	subi	r20, 0xFE	; 254
   1d92a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d92c:	24 17       	cp	r18, r20
   1d92e:	35 07       	cpc	r19, r21
   1d930:	48 f0       	brcs	.+18     	; 0x1d944 <malloc+0x120>
   1d932:	4e 0f       	add	r20, r30
   1d934:	5f 1f       	adc	r21, r31
   1d936:	50 93 e8 1e 	sts	0x1EE8, r21	; 0x801ee8 <__brkval+0x1>
   1d93a:	40 93 e7 1e 	sts	0x1EE7, r20	; 0x801ee7 <__brkval>
   1d93e:	81 93       	st	Z+, r24
   1d940:	91 93       	st	Z+, r25
   1d942:	02 c0       	rjmp	.+4      	; 0x1d948 <malloc+0x124>
   1d944:	e0 e0       	ldi	r30, 0x00	; 0
   1d946:	f0 e0       	ldi	r31, 0x00	; 0
   1d948:	cf 01       	movw	r24, r30
   1d94a:	df 91       	pop	r29
   1d94c:	cf 91       	pop	r28
   1d94e:	1f 91       	pop	r17
   1d950:	0f 91       	pop	r16
   1d952:	08 95       	ret

0001d954 <free>:
   1d954:	cf 93       	push	r28
   1d956:	df 93       	push	r29
   1d958:	00 97       	sbiw	r24, 0x00	; 0
   1d95a:	09 f4       	brne	.+2      	; 0x1d95e <free+0xa>
   1d95c:	81 c0       	rjmp	.+258    	; 0x1da60 <free+0x10c>
   1d95e:	fc 01       	movw	r30, r24
   1d960:	32 97       	sbiw	r30, 0x02	; 2
   1d962:	13 82       	std	Z+3, r1	; 0x03
   1d964:	12 82       	std	Z+2, r1	; 0x02
   1d966:	a0 91 e9 1e 	lds	r26, 0x1EE9	; 0x801ee9 <__flp>
   1d96a:	b0 91 ea 1e 	lds	r27, 0x1EEA	; 0x801eea <__flp+0x1>
   1d96e:	10 97       	sbiw	r26, 0x00	; 0
   1d970:	81 f4       	brne	.+32     	; 0x1d992 <free+0x3e>
   1d972:	20 81       	ld	r18, Z
   1d974:	31 81       	ldd	r19, Z+1	; 0x01
   1d976:	82 0f       	add	r24, r18
   1d978:	93 1f       	adc	r25, r19
   1d97a:	20 91 e7 1e 	lds	r18, 0x1EE7	; 0x801ee7 <__brkval>
   1d97e:	30 91 e8 1e 	lds	r19, 0x1EE8	; 0x801ee8 <__brkval+0x1>
   1d982:	28 17       	cp	r18, r24
   1d984:	39 07       	cpc	r19, r25
   1d986:	51 f5       	brne	.+84     	; 0x1d9dc <free+0x88>
   1d988:	f0 93 e8 1e 	sts	0x1EE8, r31	; 0x801ee8 <__brkval+0x1>
   1d98c:	e0 93 e7 1e 	sts	0x1EE7, r30	; 0x801ee7 <__brkval>
   1d990:	67 c0       	rjmp	.+206    	; 0x1da60 <free+0x10c>
   1d992:	ed 01       	movw	r28, r26
   1d994:	20 e0       	ldi	r18, 0x00	; 0
   1d996:	30 e0       	ldi	r19, 0x00	; 0
   1d998:	ce 17       	cp	r28, r30
   1d99a:	df 07       	cpc	r29, r31
   1d99c:	40 f4       	brcc	.+16     	; 0x1d9ae <free+0x5a>
   1d99e:	4a 81       	ldd	r20, Y+2	; 0x02
   1d9a0:	5b 81       	ldd	r21, Y+3	; 0x03
   1d9a2:	9e 01       	movw	r18, r28
   1d9a4:	41 15       	cp	r20, r1
   1d9a6:	51 05       	cpc	r21, r1
   1d9a8:	f1 f0       	breq	.+60     	; 0x1d9e6 <free+0x92>
   1d9aa:	ea 01       	movw	r28, r20
   1d9ac:	f5 cf       	rjmp	.-22     	; 0x1d998 <free+0x44>
   1d9ae:	d3 83       	std	Z+3, r29	; 0x03
   1d9b0:	c2 83       	std	Z+2, r28	; 0x02
   1d9b2:	40 81       	ld	r20, Z
   1d9b4:	51 81       	ldd	r21, Z+1	; 0x01
   1d9b6:	84 0f       	add	r24, r20
   1d9b8:	95 1f       	adc	r25, r21
   1d9ba:	c8 17       	cp	r28, r24
   1d9bc:	d9 07       	cpc	r29, r25
   1d9be:	59 f4       	brne	.+22     	; 0x1d9d6 <free+0x82>
   1d9c0:	88 81       	ld	r24, Y
   1d9c2:	99 81       	ldd	r25, Y+1	; 0x01
   1d9c4:	84 0f       	add	r24, r20
   1d9c6:	95 1f       	adc	r25, r21
   1d9c8:	02 96       	adiw	r24, 0x02	; 2
   1d9ca:	91 83       	std	Z+1, r25	; 0x01
   1d9cc:	80 83       	st	Z, r24
   1d9ce:	8a 81       	ldd	r24, Y+2	; 0x02
   1d9d0:	9b 81       	ldd	r25, Y+3	; 0x03
   1d9d2:	93 83       	std	Z+3, r25	; 0x03
   1d9d4:	82 83       	std	Z+2, r24	; 0x02
   1d9d6:	21 15       	cp	r18, r1
   1d9d8:	31 05       	cpc	r19, r1
   1d9da:	29 f4       	brne	.+10     	; 0x1d9e6 <free+0x92>
   1d9dc:	f0 93 ea 1e 	sts	0x1EEA, r31	; 0x801eea <__flp+0x1>
   1d9e0:	e0 93 e9 1e 	sts	0x1EE9, r30	; 0x801ee9 <__flp>
   1d9e4:	3d c0       	rjmp	.+122    	; 0x1da60 <free+0x10c>
   1d9e6:	e9 01       	movw	r28, r18
   1d9e8:	fb 83       	std	Y+3, r31	; 0x03
   1d9ea:	ea 83       	std	Y+2, r30	; 0x02
   1d9ec:	49 91       	ld	r20, Y+
   1d9ee:	59 91       	ld	r21, Y+
   1d9f0:	c4 0f       	add	r28, r20
   1d9f2:	d5 1f       	adc	r29, r21
   1d9f4:	ec 17       	cp	r30, r28
   1d9f6:	fd 07       	cpc	r31, r29
   1d9f8:	61 f4       	brne	.+24     	; 0x1da12 <free+0xbe>
   1d9fa:	80 81       	ld	r24, Z
   1d9fc:	91 81       	ldd	r25, Z+1	; 0x01
   1d9fe:	84 0f       	add	r24, r20
   1da00:	95 1f       	adc	r25, r21
   1da02:	02 96       	adiw	r24, 0x02	; 2
   1da04:	e9 01       	movw	r28, r18
   1da06:	99 83       	std	Y+1, r25	; 0x01
   1da08:	88 83       	st	Y, r24
   1da0a:	82 81       	ldd	r24, Z+2	; 0x02
   1da0c:	93 81       	ldd	r25, Z+3	; 0x03
   1da0e:	9b 83       	std	Y+3, r25	; 0x03
   1da10:	8a 83       	std	Y+2, r24	; 0x02
   1da12:	e0 e0       	ldi	r30, 0x00	; 0
   1da14:	f0 e0       	ldi	r31, 0x00	; 0
   1da16:	12 96       	adiw	r26, 0x02	; 2
   1da18:	8d 91       	ld	r24, X+
   1da1a:	9c 91       	ld	r25, X
   1da1c:	13 97       	sbiw	r26, 0x03	; 3
   1da1e:	00 97       	sbiw	r24, 0x00	; 0
   1da20:	19 f0       	breq	.+6      	; 0x1da28 <free+0xd4>
   1da22:	fd 01       	movw	r30, r26
   1da24:	dc 01       	movw	r26, r24
   1da26:	f7 cf       	rjmp	.-18     	; 0x1da16 <free+0xc2>
   1da28:	8d 91       	ld	r24, X+
   1da2a:	9c 91       	ld	r25, X
   1da2c:	11 97       	sbiw	r26, 0x01	; 1
   1da2e:	9d 01       	movw	r18, r26
   1da30:	2e 5f       	subi	r18, 0xFE	; 254
   1da32:	3f 4f       	sbci	r19, 0xFF	; 255
   1da34:	82 0f       	add	r24, r18
   1da36:	93 1f       	adc	r25, r19
   1da38:	20 91 e7 1e 	lds	r18, 0x1EE7	; 0x801ee7 <__brkval>
   1da3c:	30 91 e8 1e 	lds	r19, 0x1EE8	; 0x801ee8 <__brkval+0x1>
   1da40:	28 17       	cp	r18, r24
   1da42:	39 07       	cpc	r19, r25
   1da44:	69 f4       	brne	.+26     	; 0x1da60 <free+0x10c>
   1da46:	30 97       	sbiw	r30, 0x00	; 0
   1da48:	29 f4       	brne	.+10     	; 0x1da54 <free+0x100>
   1da4a:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <__flp+0x1>
   1da4e:	10 92 e9 1e 	sts	0x1EE9, r1	; 0x801ee9 <__flp>
   1da52:	02 c0       	rjmp	.+4      	; 0x1da58 <free+0x104>
   1da54:	13 82       	std	Z+3, r1	; 0x03
   1da56:	12 82       	std	Z+2, r1	; 0x02
   1da58:	b0 93 e8 1e 	sts	0x1EE8, r27	; 0x801ee8 <__brkval+0x1>
   1da5c:	a0 93 e7 1e 	sts	0x1EE7, r26	; 0x801ee7 <__brkval>
   1da60:	df 91       	pop	r29
   1da62:	cf 91       	pop	r28
   1da64:	08 95       	ret

0001da66 <__ftoa_engine>:
   1da66:	28 30       	cpi	r18, 0x08	; 8
   1da68:	08 f0       	brcs	.+2      	; 0x1da6c <__ftoa_engine+0x6>
   1da6a:	27 e0       	ldi	r18, 0x07	; 7
   1da6c:	33 27       	eor	r19, r19
   1da6e:	da 01       	movw	r26, r20
   1da70:	99 0f       	add	r25, r25
   1da72:	31 1d       	adc	r19, r1
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1da74:	87 fd       	sbrc	r24, 7
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1da76:	91 60       	ori	r25, 0x01	; 1
   1da78:	00 96       	adiw	r24, 0x00	; 0
   1da7a:	61 05       	cpc	r22, r1
   1da7c:	71 05       	cpc	r23, r1
   1da7e:	39 f4       	brne	.+14     	; 0x1da8e <__ftoa_engine+0x28>
   1da80:	32 60       	ori	r19, 0x02	; 2
   1da82:	2e 5f       	subi	r18, 0xFE	; 254
   1da84:	3d 93       	st	X+, r19
   1da86:	30 e3       	ldi	r19, 0x30	; 48
   1da88:	2a 95       	dec	r18
   1da8a:	e1 f7       	brne	.-8      	; 0x1da84 <__ftoa_engine+0x1e>
   1da8c:	08 95       	ret
   1da8e:	9f 3f       	cpi	r25, 0xFF	; 255
   1da90:	30 f0       	brcs	.+12     	; 0x1da9e <__ftoa_engine+0x38>
   1da92:	80 38       	cpi	r24, 0x80	; 128
   1da94:	71 05       	cpc	r23, r1
   1da96:	61 05       	cpc	r22, r1
   1da98:	09 f0       	breq	.+2      	; 0x1da9c <__ftoa_engine+0x36>
   1da9a:	3c 5f       	subi	r19, 0xFC	; 252
   1da9c:	3c 5f       	subi	r19, 0xFC	; 252
   1da9e:	3d 93       	st	X+, r19
   1daa0:	91 30       	cpi	r25, 0x01	; 1
   1daa2:	08 f0       	brcs	.+2      	; 0x1daa6 <__ftoa_engine+0x40>
   1daa4:	80 68       	ori	r24, 0x80	; 128
   1daa6:	91 1d       	adc	r25, r1
   1daa8:	df 93       	push	r29
   1daaa:	cf 93       	push	r28
   1daac:	1f 93       	push	r17
   1daae:	0f 93       	push	r16
   1dab0:	ff 92       	push	r15
   1dab2:	ef 92       	push	r14
   1dab4:	19 2f       	mov	r17, r25
   1dab6:	98 7f       	andi	r25, 0xF8	; 248
   1dab8:	96 95       	lsr	r25
   1daba:	e9 2f       	mov	r30, r25
   1dabc:	96 95       	lsr	r25
   1dabe:	96 95       	lsr	r25
   1dac0:	e9 0f       	add	r30, r25
   1dac2:	ff 27       	eor	r31, r31
   1dac4:	ee 5c       	subi	r30, 0xCE	; 206
   1dac6:	fd 4f       	sbci	r31, 0xFD	; 253
   1dac8:	99 27       	eor	r25, r25
   1daca:	33 27       	eor	r19, r19
   1dacc:	ee 24       	eor	r14, r14
   1dace:	ff 24       	eor	r15, r15
   1dad0:	a7 01       	movw	r20, r14
   1dad2:	e7 01       	movw	r28, r14
   1dad4:	05 90       	lpm	r0, Z+
   1dad6:	08 94       	sec
   1dad8:	07 94       	ror	r0
   1dada:	28 f4       	brcc	.+10     	; 0x1dae6 <__ftoa_engine+0x80>
   1dadc:	36 0f       	add	r19, r22
   1dade:	e7 1e       	adc	r14, r23
   1dae0:	f8 1e       	adc	r15, r24
   1dae2:	49 1f       	adc	r20, r25
   1dae4:	51 1d       	adc	r21, r1
   1dae6:	66 0f       	add	r22, r22
   1dae8:	77 1f       	adc	r23, r23
   1daea:	88 1f       	adc	r24, r24
   1daec:	99 1f       	adc	r25, r25
   1daee:	06 94       	lsr	r0
   1daf0:	a1 f7       	brne	.-24     	; 0x1dada <__ftoa_engine+0x74>
   1daf2:	05 90       	lpm	r0, Z+
   1daf4:	07 94       	ror	r0
   1daf6:	28 f4       	brcc	.+10     	; 0x1db02 <__ftoa_engine+0x9c>
   1daf8:	e7 0e       	add	r14, r23
   1dafa:	f8 1e       	adc	r15, r24
   1dafc:	49 1f       	adc	r20, r25
   1dafe:	56 1f       	adc	r21, r22
   1db00:	c1 1d       	adc	r28, r1
   1db02:	77 0f       	add	r23, r23
   1db04:	88 1f       	adc	r24, r24
   1db06:	99 1f       	adc	r25, r25
   1db08:	66 1f       	adc	r22, r22
   1db0a:	06 94       	lsr	r0
   1db0c:	a1 f7       	brne	.-24     	; 0x1daf6 <__ftoa_engine+0x90>
   1db0e:	05 90       	lpm	r0, Z+
   1db10:	07 94       	ror	r0
   1db12:	28 f4       	brcc	.+10     	; 0x1db1e <__ftoa_engine+0xb8>
   1db14:	f8 0e       	add	r15, r24
   1db16:	49 1f       	adc	r20, r25
   1db18:	56 1f       	adc	r21, r22
   1db1a:	c7 1f       	adc	r28, r23
   1db1c:	d1 1d       	adc	r29, r1
   1db1e:	88 0f       	add	r24, r24
   1db20:	99 1f       	adc	r25, r25
   1db22:	66 1f       	adc	r22, r22
   1db24:	77 1f       	adc	r23, r23
   1db26:	06 94       	lsr	r0
   1db28:	a1 f7       	brne	.-24     	; 0x1db12 <__ftoa_engine+0xac>
   1db2a:	05 90       	lpm	r0, Z+
   1db2c:	07 94       	ror	r0
   1db2e:	20 f4       	brcc	.+8      	; 0x1db38 <__ftoa_engine+0xd2>
   1db30:	49 0f       	add	r20, r25
   1db32:	56 1f       	adc	r21, r22
   1db34:	c7 1f       	adc	r28, r23
   1db36:	d8 1f       	adc	r29, r24
   1db38:	99 0f       	add	r25, r25
   1db3a:	66 1f       	adc	r22, r22
   1db3c:	77 1f       	adc	r23, r23
   1db3e:	88 1f       	adc	r24, r24
   1db40:	06 94       	lsr	r0
   1db42:	a9 f7       	brne	.-22     	; 0x1db2e <__ftoa_engine+0xc8>
   1db44:	84 91       	lpm	r24, Z
   1db46:	10 95       	com	r17
   1db48:	17 70       	andi	r17, 0x07	; 7
   1db4a:	41 f0       	breq	.+16     	; 0x1db5c <__ftoa_engine+0xf6>
   1db4c:	d6 95       	lsr	r29
   1db4e:	c7 95       	ror	r28
   1db50:	57 95       	ror	r21
   1db52:	47 95       	ror	r20
   1db54:	f7 94       	ror	r15
   1db56:	e7 94       	ror	r14
   1db58:	1a 95       	dec	r17
   1db5a:	c1 f7       	brne	.-16     	; 0x1db4c <__ftoa_engine+0xe6>
   1db5c:	e8 ed       	ldi	r30, 0xD8	; 216
   1db5e:	f1 e0       	ldi	r31, 0x01	; 1
   1db60:	68 94       	set
   1db62:	15 90       	lpm	r1, Z+
   1db64:	15 91       	lpm	r17, Z+
   1db66:	35 91       	lpm	r19, Z+
   1db68:	65 91       	lpm	r22, Z+
   1db6a:	95 91       	lpm	r25, Z+
   1db6c:	05 90       	lpm	r0, Z+
   1db6e:	7f e2       	ldi	r23, 0x2F	; 47
   1db70:	73 95       	inc	r23
   1db72:	e1 18       	sub	r14, r1
   1db74:	f1 0a       	sbc	r15, r17
   1db76:	43 0b       	sbc	r20, r19
   1db78:	56 0b       	sbc	r21, r22
   1db7a:	c9 0b       	sbc	r28, r25
   1db7c:	d0 09       	sbc	r29, r0
   1db7e:	c0 f7       	brcc	.-16     	; 0x1db70 <__ftoa_engine+0x10a>
   1db80:	e1 0c       	add	r14, r1
   1db82:	f1 1e       	adc	r15, r17
   1db84:	43 1f       	adc	r20, r19
   1db86:	56 1f       	adc	r21, r22
   1db88:	c9 1f       	adc	r28, r25
   1db8a:	d0 1d       	adc	r29, r0
   1db8c:	7e f4       	brtc	.+30     	; 0x1dbac <__ftoa_engine+0x146>
   1db8e:	70 33       	cpi	r23, 0x30	; 48
   1db90:	11 f4       	brne	.+4      	; 0x1db96 <__ftoa_engine+0x130>
   1db92:	8a 95       	dec	r24
   1db94:	e6 cf       	rjmp	.-52     	; 0x1db62 <__ftoa_engine+0xfc>
   1db96:	e8 94       	clt
   1db98:	01 50       	subi	r16, 0x01	; 1
   1db9a:	30 f0       	brcs	.+12     	; 0x1dba8 <__ftoa_engine+0x142>
   1db9c:	08 0f       	add	r16, r24
   1db9e:	0a f4       	brpl	.+2      	; 0x1dba2 <__ftoa_engine+0x13c>
   1dba0:	00 27       	eor	r16, r16
   1dba2:	02 17       	cp	r16, r18
   1dba4:	08 f4       	brcc	.+2      	; 0x1dba8 <__ftoa_engine+0x142>
   1dba6:	20 2f       	mov	r18, r16
   1dba8:	23 95       	inc	r18
   1dbaa:	02 2f       	mov	r16, r18
   1dbac:	7a 33       	cpi	r23, 0x3A	; 58
   1dbae:	28 f0       	brcs	.+10     	; 0x1dbba <__ftoa_engine+0x154>
   1dbb0:	79 e3       	ldi	r23, 0x39	; 57
   1dbb2:	7d 93       	st	X+, r23
   1dbb4:	2a 95       	dec	r18
   1dbb6:	e9 f7       	brne	.-6      	; 0x1dbb2 <__ftoa_engine+0x14c>
   1dbb8:	10 c0       	rjmp	.+32     	; 0x1dbda <__ftoa_engine+0x174>
   1dbba:	7d 93       	st	X+, r23
   1dbbc:	2a 95       	dec	r18
   1dbbe:	89 f6       	brne	.-94     	; 0x1db62 <__ftoa_engine+0xfc>
   1dbc0:	06 94       	lsr	r0
   1dbc2:	97 95       	ror	r25
   1dbc4:	67 95       	ror	r22
   1dbc6:	37 95       	ror	r19
   1dbc8:	17 95       	ror	r17
   1dbca:	17 94       	ror	r1
   1dbcc:	e1 18       	sub	r14, r1
   1dbce:	f1 0a       	sbc	r15, r17
   1dbd0:	43 0b       	sbc	r20, r19
   1dbd2:	56 0b       	sbc	r21, r22
   1dbd4:	c9 0b       	sbc	r28, r25
   1dbd6:	d0 09       	sbc	r29, r0
   1dbd8:	98 f0       	brcs	.+38     	; 0x1dc00 <__ftoa_engine+0x19a>
   1dbda:	23 95       	inc	r18
   1dbdc:	7e 91       	ld	r23, -X
   1dbde:	73 95       	inc	r23
   1dbe0:	7a 33       	cpi	r23, 0x3A	; 58
   1dbe2:	08 f0       	brcs	.+2      	; 0x1dbe6 <__ftoa_engine+0x180>
   1dbe4:	70 e3       	ldi	r23, 0x30	; 48
   1dbe6:	7c 93       	st	X, r23
   1dbe8:	20 13       	cpse	r18, r16
   1dbea:	b8 f7       	brcc	.-18     	; 0x1dbda <__ftoa_engine+0x174>
   1dbec:	7e 91       	ld	r23, -X
   1dbee:	70 61       	ori	r23, 0x10	; 16
   1dbf0:	7d 93       	st	X+, r23
   1dbf2:	30 f0       	brcs	.+12     	; 0x1dc00 <__ftoa_engine+0x19a>
   1dbf4:	83 95       	inc	r24
   1dbf6:	71 e3       	ldi	r23, 0x31	; 49
   1dbf8:	7d 93       	st	X+, r23
   1dbfa:	70 e3       	ldi	r23, 0x30	; 48
   1dbfc:	2a 95       	dec	r18
   1dbfe:	e1 f7       	brne	.-8      	; 0x1dbf8 <__ftoa_engine+0x192>
   1dc00:	11 24       	eor	r1, r1
   1dc02:	ef 90       	pop	r14
   1dc04:	ff 90       	pop	r15
   1dc06:	0f 91       	pop	r16
   1dc08:	1f 91       	pop	r17
   1dc0a:	cf 91       	pop	r28
   1dc0c:	df 91       	pop	r29
   1dc0e:	99 27       	eor	r25, r25
   1dc10:	87 fd       	sbrc	r24, 7
   1dc12:	90 95       	com	r25
   1dc14:	08 95       	ret

0001dc16 <strnlen_P>:
   1dc16:	fc 01       	movw	r30, r24
   1dc18:	05 90       	lpm	r0, Z+
   1dc1a:	61 50       	subi	r22, 0x01	; 1
   1dc1c:	70 40       	sbci	r23, 0x00	; 0
   1dc1e:	01 10       	cpse	r0, r1
   1dc20:	d8 f7       	brcc	.-10     	; 0x1dc18 <strnlen_P+0x2>
   1dc22:	80 95       	com	r24
   1dc24:	90 95       	com	r25
   1dc26:	8e 0f       	add	r24, r30
   1dc28:	9f 1f       	adc	r25, r31
   1dc2a:	08 95       	ret

0001dc2c <memset>:
   1dc2c:	dc 01       	movw	r26, r24
   1dc2e:	01 c0       	rjmp	.+2      	; 0x1dc32 <memset+0x6>
   1dc30:	6d 93       	st	X+, r22
   1dc32:	41 50       	subi	r20, 0x01	; 1
   1dc34:	50 40       	sbci	r21, 0x00	; 0
   1dc36:	e0 f7       	brcc	.-8      	; 0x1dc30 <memset+0x4>
   1dc38:	08 95       	ret

0001dc3a <strnlen>:
   1dc3a:	fc 01       	movw	r30, r24
   1dc3c:	61 50       	subi	r22, 0x01	; 1
   1dc3e:	70 40       	sbci	r23, 0x00	; 0
   1dc40:	01 90       	ld	r0, Z+
   1dc42:	01 10       	cpse	r0, r1
   1dc44:	d8 f7       	brcc	.-10     	; 0x1dc3c <strnlen+0x2>
   1dc46:	80 95       	com	r24
   1dc48:	90 95       	com	r25
   1dc4a:	8e 0f       	add	r24, r30
   1dc4c:	9f 1f       	adc	r25, r31
   1dc4e:	08 95       	ret

0001dc50 <__ultoa_invert>:
   1dc50:	fa 01       	movw	r30, r20
   1dc52:	aa 27       	eor	r26, r26
   1dc54:	28 30       	cpi	r18, 0x08	; 8
   1dc56:	51 f1       	breq	.+84     	; 0x1dcac <__ultoa_invert+0x5c>
   1dc58:	20 31       	cpi	r18, 0x10	; 16
   1dc5a:	81 f1       	breq	.+96     	; 0x1dcbc <__ultoa_invert+0x6c>
   1dc5c:	e8 94       	clt
   1dc5e:	6f 93       	push	r22
   1dc60:	6e 7f       	andi	r22, 0xFE	; 254
   1dc62:	6e 5f       	subi	r22, 0xFE	; 254
   1dc64:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc66:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc68:	9f 4f       	sbci	r25, 0xFF	; 255
   1dc6a:	af 4f       	sbci	r26, 0xFF	; 255
   1dc6c:	b1 e0       	ldi	r27, 0x01	; 1
   1dc6e:	3e d0       	rcall	.+124    	; 0x1dcec <__ultoa_invert+0x9c>
   1dc70:	b4 e0       	ldi	r27, 0x04	; 4
   1dc72:	3c d0       	rcall	.+120    	; 0x1dcec <__ultoa_invert+0x9c>
   1dc74:	67 0f       	add	r22, r23
   1dc76:	78 1f       	adc	r23, r24
   1dc78:	89 1f       	adc	r24, r25
   1dc7a:	9a 1f       	adc	r25, r26
   1dc7c:	a1 1d       	adc	r26, r1
   1dc7e:	68 0f       	add	r22, r24
   1dc80:	79 1f       	adc	r23, r25
   1dc82:	8a 1f       	adc	r24, r26
   1dc84:	91 1d       	adc	r25, r1
   1dc86:	a1 1d       	adc	r26, r1
   1dc88:	6a 0f       	add	r22, r26
   1dc8a:	71 1d       	adc	r23, r1
   1dc8c:	81 1d       	adc	r24, r1
   1dc8e:	91 1d       	adc	r25, r1
   1dc90:	a1 1d       	adc	r26, r1
   1dc92:	20 d0       	rcall	.+64     	; 0x1dcd4 <__ultoa_invert+0x84>
   1dc94:	09 f4       	brne	.+2      	; 0x1dc98 <__ultoa_invert+0x48>
   1dc96:	68 94       	set
   1dc98:	3f 91       	pop	r19
   1dc9a:	2a e0       	ldi	r18, 0x0A	; 10
   1dc9c:	26 9f       	mul	r18, r22
   1dc9e:	11 24       	eor	r1, r1
   1dca0:	30 19       	sub	r19, r0
   1dca2:	30 5d       	subi	r19, 0xD0	; 208
   1dca4:	31 93       	st	Z+, r19
   1dca6:	de f6       	brtc	.-74     	; 0x1dc5e <__ultoa_invert+0xe>
   1dca8:	cf 01       	movw	r24, r30
   1dcaa:	08 95       	ret
   1dcac:	46 2f       	mov	r20, r22
   1dcae:	47 70       	andi	r20, 0x07	; 7
   1dcb0:	40 5d       	subi	r20, 0xD0	; 208
   1dcb2:	41 93       	st	Z+, r20
   1dcb4:	b3 e0       	ldi	r27, 0x03	; 3
   1dcb6:	0f d0       	rcall	.+30     	; 0x1dcd6 <__ultoa_invert+0x86>
   1dcb8:	c9 f7       	brne	.-14     	; 0x1dcac <__ultoa_invert+0x5c>
   1dcba:	f6 cf       	rjmp	.-20     	; 0x1dca8 <__ultoa_invert+0x58>
   1dcbc:	46 2f       	mov	r20, r22
   1dcbe:	4f 70       	andi	r20, 0x0F	; 15
   1dcc0:	40 5d       	subi	r20, 0xD0	; 208
   1dcc2:	4a 33       	cpi	r20, 0x3A	; 58
   1dcc4:	18 f0       	brcs	.+6      	; 0x1dccc <__ultoa_invert+0x7c>
   1dcc6:	49 5d       	subi	r20, 0xD9	; 217
   1dcc8:	31 fd       	sbrc	r19, 1
   1dcca:	40 52       	subi	r20, 0x20	; 32
   1dccc:	41 93       	st	Z+, r20
   1dcce:	02 d0       	rcall	.+4      	; 0x1dcd4 <__ultoa_invert+0x84>
   1dcd0:	a9 f7       	brne	.-22     	; 0x1dcbc <__ultoa_invert+0x6c>
   1dcd2:	ea cf       	rjmp	.-44     	; 0x1dca8 <__ultoa_invert+0x58>
   1dcd4:	b4 e0       	ldi	r27, 0x04	; 4
   1dcd6:	a6 95       	lsr	r26
   1dcd8:	97 95       	ror	r25
   1dcda:	87 95       	ror	r24
   1dcdc:	77 95       	ror	r23
   1dcde:	67 95       	ror	r22
   1dce0:	ba 95       	dec	r27
   1dce2:	c9 f7       	brne	.-14     	; 0x1dcd6 <__ultoa_invert+0x86>
   1dce4:	00 97       	sbiw	r24, 0x00	; 0
   1dce6:	61 05       	cpc	r22, r1
   1dce8:	71 05       	cpc	r23, r1
   1dcea:	08 95       	ret
   1dcec:	9b 01       	movw	r18, r22
   1dcee:	ac 01       	movw	r20, r24
   1dcf0:	0a 2e       	mov	r0, r26
   1dcf2:	06 94       	lsr	r0
   1dcf4:	57 95       	ror	r21
   1dcf6:	47 95       	ror	r20
   1dcf8:	37 95       	ror	r19
   1dcfa:	27 95       	ror	r18
   1dcfc:	ba 95       	dec	r27
   1dcfe:	c9 f7       	brne	.-14     	; 0x1dcf2 <__ultoa_invert+0xa2>
   1dd00:	62 0f       	add	r22, r18
   1dd02:	73 1f       	adc	r23, r19
   1dd04:	84 1f       	adc	r24, r20
   1dd06:	95 1f       	adc	r25, r21
   1dd08:	a0 1d       	adc	r26, r0
   1dd0a:	08 95       	ret

0001dd0c <_exit>:
   1dd0c:	f8 94       	cli

0001dd0e <__stop_program>:
   1dd0e:	ff cf       	rjmp	.-2      	; 0x1dd0e <__stop_program>
