
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001660  00800100  0001e0d0  0001e164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001e0d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d3  00801760  00801760  0001f7c4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f7c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f7d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001778  00000000  00000000  0001f818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027f70  00000000  00000000  00020f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061b2  00000000  00000000  00048f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012000  00000000  00000000  0004f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000061a8  00000000  00000000  000610b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004718  00000000  00000000  0006725c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026a1f  00000000  00000000  0006b974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001718  00000000  00000000  00092393  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801760 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d2 l     O .text	0000001e __c.3690
000002f0 l     O .text	0000001d __c.3685
00000000 l    df *ABS*	00000000 LCD.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800107 l     O .data	00000001 lcd_address
00800109 l     O .data	00000001 _displayControl
00800108 l     O .data	00000001 _displayMode
00000000 l    df *ABS*	00000000 lcd_printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006318 l     F .text	00000016 _putc_win
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006d96 l     F .text	0000002a IS_Leap
00800263 l     O .data	00000018 __days
008017b0 l     O .bss	00000016 t.3744
008017c6 l     O .bss	00000002 p.3745
00801792 l     O .bss	00000008 ts.3823
0080179a l     O .bss	00000016 t.3756
0080027b l     O .data	0000001a __days_sum
0000076c l     O .text	00000012 __c.3863
0000075b l     O .text	00000011 __c.3865
0000074a l     O .text	00000011 __c.3867
00000738 l     O .text	00000012 __c.3869
00000727 l     O .text	00000011 __c.3871
00000710 l     O .text	00000017 __c.3873
0000077e l     O .text	00000021 __c.3842
0000079f l     O .text	0000001d __c.3717
00801808 l     O .bss	00000020 buf.3722
008017e8 l     O .bss	00000020 buf.3730
008017c8 l     O .bss	00000020 buf.3734
000006f7 l     O .text	00000019 __c.3902
000006de l     O .text	00000019 __c.3904
000006c5 l     O .text	00000019 __c.3908
000006ac l     O .text	00000019 __c.3910
0000069a l     O .text	00000012 __c.3919
00000685 l     O .text	00000015 __c.3921
0000066e l     O .text	00000017 __c.3923
00000654 l     O .text	0000001a __c.3925
00000630 l     O .text	00000024 __c.3927
0000061e l     O .text	00000012 __c.3934
0000060d l     O .text	00000011 __c.3936
000005fc l     O .text	00000011 __c.3938
000005ea l     O .text	00000012 __c.3940
000005d9 l     O .text	00000011 __c.3942
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000dd56 l     F .text	00000004 xchg_spi
0000dd5a l     F .text	0000000c deselect
0000dd66 l     F .text	0000004e rcvr_datablock
0000ddd8 l     F .text	0000003a select
000007bc l     O .text	00000010 __c.3685
0000de12 l     F .text	00000086 send_cmd
0000de98 l     F .text	00000054 xmit_datablock
0080182c l     O .bss	00000001 CardType
0080182e l     O .bss	00000001 Timer1
0080182d l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800704 l     O .data	00000014 CSWTCH.97
00000c78 l     O .text	00000018 __c.3662
00000c60 l     O .text	00000018 __c.3669
0000f554 l     F .text	0000001a _fprintf_putc
00000c47 l     O .text	0000000d __c.3861
00000c3e l     O .text	00000009 __c.3863
00000c39 l     O .text	00000005 __c.3865
00000c33 l     O .text	00000006 __c.3867
00000c2a l     O .text	00000009 __c.3869
00000c1d l     O .text	0000000d __c.3871
00000c10 l     O .text	0000000d __c.3873
00000c03 l     O .text	0000000d __c.3875
00000bf7 l     O .text	0000000c __c.3877
00000beb l     O .text	0000000c __c.3879
00000bdf l     O .text	0000000c __c.3881
00801938 l     O .bss	0000002e _dp
00801839 l     O .bss	000000ff _de
00000bd7 l     O .text	00000008 __c.3985
00000bd3 l     O .text	00000004 __c.3987
00000bb4 l     O .text	0000001f __c.4014
00000c54 l     O .text	0000000c __c.3740
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000f8f l     O .text	0000000c __c.3686
00000e58 l     O .text	00000137 __c.3688
00000e2b l     O .text	0000000c __c.3748
00000e1b l     O .text	00000010 __c.3750
00000e0e l     O .text	0000000d __c.3752
00000dfe l     O .text	00000010 __c.3754
00000df1 l     O .text	0000000d __c.3756
00000dd5 l     O .text	0000000f __c.3761
00000de4 l     O .text	0000000d __c.3758
00000dc2 l     O .text	00000013 __c.3765
00800187 l     O .data	00000002 _pagesize
00000d91 l     O .text	00000007 __c.3814
00000d8f l     O .text	00000002 __c.3816
00000e44 l     O .text	00000010 __c.3730
00000e42 l     O .text	00000002 __c.3735
00000e37 l     O .text	0000000b __c.3737
00000daa l     O .text	00000009 __c.3779
00000da4 l     O .text	00000006 __c.3781
00000da0 l     O .text	00000004 __c.3786
00000d9c l     O .text	00000004 __c.3791
00000d9a l     O .text	00000002 __c.3799
00000db3 l     O .text	0000000f __c.3777
00000d98 l     O .text	00000002 __c.3804
00000d7d l     O .text	00000012 __c.3828
00000d79 l     O .text	00000004 __c.3830
00000d5f l     O .text	0000001a __c.3835
00000d3e l     O .text	00000021 __c.3848
00000d30 l     O .text	0000000e __c.3850
00000d1a l     O .text	00000016 __c.3852
00000ce7 l     O .text	00000023 __c.3860
00000d0a l     O .text	00000010 __c.3857
00000cdc l     O .text	0000000b __c.3864
00000ccc l     O .text	00000010 __c.3872
00000cbf l     O .text	0000000d __c.3874
00000cb0 l     O .text	0000000f __c.3884
00000c9f l     O .text	00000011 __c.3892
00000c90 l     O .text	0000000f __c.3902
00000e54 l     O .text	00000004 __c.3719
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000129e l     O .text	00000011 __c.4191
0000128b l     O .text	00000013 __c.4196
00001265 l     O .text	00000026 __c.4201
0000124a l     O .text	0000001b __c.4203
00001223 l     O .text	00000027 __c.4208
00001208 l     O .text	0000001b __c.4210
000011e5 l     O .text	00000023 __c.4216
000011d9 l     O .text	0000000c __c.4224
000011ce l     O .text	0000000b __c.4229
000011c4 l     O .text	0000000a __c.4231
00001196 l     O .text	0000002e __c.4236
00001104 l     O .text	0000001a __c.4269
0000111e l     O .text	0000001b __c.4265
00001139 l     O .text	0000001b __c.4262
00001154 l     O .text	00000028 __c.4257
0000117c l     O .text	0000001a __c.4253
000010f1 l     O .text	00000013 __c.4273
000010e8 l     O .text	00000009 __c.4315
000010e2 l     O .text	00000006 __c.4317
000010d7 l     O .text	0000000b __c.4321
000010cc l     O .text	0000000b __c.4323
000010c1 l     O .text	0000000b __c.4325
000010a8 l     O .text	00000019 __c.4341
0000107b l     O .text	0000002d __c.4344
00001054 l     O .text	00000027 __c.4348
0000103a l     O .text	0000001a __c.4358
00001012 l     O .text	00000028 __c.4363
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001550 l     O .text	00000012 __c.4175
00001537 l     O .text	00000019 __c.4177
0000151d l     O .text	0000001a __c.4223
000014f2 l     O .text	0000002b __c.4225
000014db l     O .text	00000017 __c.4227
000014cf l     O .text	0000000c __c.4229
000014c9 l     O .text	00000006 __c.4233
000014b7 l     O .text	00000012 __c.4235
000014b0 l     O .text	00000007 __c.4240
000014a5 l     O .text	0000000b __c.4242
0000149e l     O .text	00000007 __c.4244
00001491 l     O .text	0000000d __c.4246
00001480 l     O .text	00000011 __c.4248
0000145f l     O .text	00000021 __c.4275
00001445 l     O .text	0000001a __c.4277
00001432 l     O .text	00000013 __c.4282
0000141f l     O .text	00000013 __c.4284
00001418 l     O .text	00000007 __c.4286
00001411 l     O .text	00000007 __c.4288
0000140a l     O .text	00000007 __c.4290
000013fe l     O .text	0000000c __c.4292
000013f1 l     O .text	0000000d __c.4294
000013ea l     O .text	00000007 __c.4296
000013ce l     O .text	0000001c __c.4298
0000137b l     O .text	00000007 __c.4318
0000136a l     O .text	00000011 __c.4320
00001358 l     O .text	00000012 __c.4322
00001344 l     O .text	00000014 __c.4324
00001334 l     O .text	00000010 __c.4326
00001328 l     O .text	0000000c __c.4328
00001317 l     O .text	00000011 __c.4333
00001305 l     O .text	00000012 __c.4335
000012df l     O .text	00000026 __c.4337
000012ce l     O .text	00000011 __c.4342
000013c7 l     O .text	00000007 __c.4303
000013c5 l     O .text	00000002 __c.4305
000013b3 l     O .text	00000012 __c.4307
000013a2 l     O .text	00000011 __c.4309
0000138e l     O .text	00000014 __c.4311
00001382 l     O .text	0000000c __c.4313
000012c2 l     O .text	0000000c __c.4353
000012c0 l     O .text	00000002 __c.4355
000012ba l     O .text	00000006 __c.4357
000012b6 l     O .text	00000004 __c.4362
000012b1 l     O .text	00000002 __c.4366
000012b3 l     O .text	00000003 __c.4364
000012af l     O .text	00000002 __c.4374
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002044 l     O .text	0000000d __c.4167
00002032 l     O .text	00000012 __c.4169
0080198a l     O .bss	00000005 B.4180
00801977 l     O .bss	00000013 B.4184
0080196a l     O .bss	0000000d B.4188
00001e71 l     O .text	00000005 __c.4291
00001e66 l     O .text	0000000b __c.4293
00001e52 l     O .text	00000014 __c.4303
00001e37 l     O .text	0000001b __c.4305
00001e26 l     O .text	00000011 __c.4313
00001e03 l     O .text	00000023 __c.4315
00001de6 l     O .text	0000001d __c.4317
00001dc7 l     O .text	0000001f __c.4319
00001daf l     O .text	00000018 __c.4324
00001d95 l     O .text	0000001a __c.4329
00001d6f l     O .text	00000026 __c.4338
00001d56 l     O .text	00000019 __c.4340
00001c5a l     O .text	00000025 __c.4362
00001c7f l     O .text	0000001a __c.4360
00001c99 l     O .text	00000016 __c.4358
00001caf l     O .text	0000000e __c.4356
00001cbd l     O .text	0000001c __c.4354
00001cd9 l     O .text	0000001d __c.4352
00001d27 l     O .text	00000019 __c.4345
00001d40 l     O .text	00000016 __c.4342
00001d0f l     O .text	00000018 __c.4347
00001cf6 l     O .text	00000019 __c.4350
00001c39 l     O .text	00000021 __c.4364
00001c23 l     O .text	00000016 __c.4366
00001c06 l     O .text	0000001d __c.4368
00001bea l     O .text	0000001c __c.4370
00001bd9 l     O .text	00000011 __c.4372
00001bbb l     O .text	0000001e __c.4374
00001b9c l     O .text	0000001f __c.4376
00001b81 l     O .text	0000001b __c.4378
00001b68 l     O .text	00000019 __c.4380
00001b51 l     O .text	00000017 __c.4382
00001b30 l     O .text	00000021 __c.4384
00001b10 l     O .text	00000020 __c.4386
00001ad8 l     O .text	00000038 __c.4389
00001995 l     O .text	00000020 __c.4422
00001981 l     O .text	00000014 __c.4424
00001f16 l     O .text	00000029 __c.4252
00001ec9 l     O .text	00000026 __c.4260
00001eef l     O .text	00000014 __c.4258
00001f03 l     O .text	00000013 __c.4254
00001ea1 l     O .text	00000028 __c.4264
00001e76 l     O .text	0000002b __c.4266
00001967 l     O .text	0000001a __c.4431
00001954 l     O .text	00000013 __c.4433
0000201f l     O .text	00000013 __c.4194
00001948 l     O .text	0000000c __c.4447
00001935 l     O .text	00000013 __c.4454
00001926 l     O .text	0000000f __c.4456
00001ac5 l     O .text	00000013 __c.4398
00001aac l     O .text	00000019 __c.4400
00001a87 l     O .text	00000025 __c.4403
00001a6a l     O .text	0000001d __c.4406
00001a4c l     O .text	0000001e __c.4408
00001a25 l     O .text	00000027 __c.4410
00001a11 l     O .text	00000014 __c.4412
000019f1 l     O .text	00000020 __c.4414
000019b5 l     O .text	0000003c __c.4417
0000190a l     O .text	0000001c __c.4463
000018e7 l     O .text	00000023 __c.4470
00001fdb l     O .text	00000028 __c.4227
00001fbd l     O .text	0000001e __c.4229
00001f8c l     O .text	00000019 __c.4233
00001fa5 l     O .text	00000018 __c.4231
00001f67 l     O .text	00000025 __c.4238
00001f3f l     O .text	00000028 __c.4240
00002003 l     O .text	0000001c __c.4210
000018d1 l     O .text	00000016 __c.4475
000018bb l     O .text	00000016 __c.4477
000018a6 l     O .text	00000015 __c.4479
00001897 l     O .text	0000000f __c.4481
00001883 l     O .text	00000014 __c.4483
0000184f l     O .text	00000034 __c.4485
0000181b l     O .text	00000034 __c.4487
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008e9e l     F .text	0000002a ld_dword
00008ec8 l     F .text	0000000c st_dword
00008ed4 l     F .text	00000012 mem_set
00008ee6 l     F .text	00000050 clust2sect
00008f36 l     F .text	00000078 clmt_clust
00008fae l     F .text	0000001e sum_sfn
008002ce l     O .data	00000080 ExCvt
00008fcc l     F .text	00000040 get_ldnumber
0000900c l     F .text	0000005a validate
00009066 l     F .text	00000016 mem_cpy.part.0
0000907c l     F .text	0000002a ld_clust.isra.1
000090a6 l     F .text	0000001a st_clust.isra.2
000090c0 l     F .text	000000a2 sync_window.part.3
00009162 l     F .text	00000012 sync_window
00009174 l     F .text	000000d8 sync_fs
0000924c l     F .text	00000082 move_window
000092ce l     F .text	0000007e check_fs
0000934c l     F .text	00000552 find_volume
0080182a l     O .bss	00000002 FatFs
00801828 l     O .bss	00000002 Fsid
0000989e l     F .text	000001fa put_fat
00009a98 l     F .text	00000166 get_fat.isra.7
00009bfe l     F .text	00000180 dir_sdi
00009d7e l     F .text	000001a2 create_chain
00009f20 l     F .text	00000122 remove_chain
0000a042 l     F .text	000001b0 get_fileinfo
0000a1f2 l     F .text	00000250 dir_next
0000a442 l     F .text	00000074 dir_alloc
0000a4b6 l     F .text	0000019c dir_read
008002c1 l     O .data	0000000d LfnOfs
0000a652 l     F .text	00000090 dir_remove
0000a6e2 l     F .text	0000022e dir_find
0000a910 l     F .text	00000348 dir_register
0000ac58 l     F .text	00000442 follow_path
008002b1 l     O .data	00000010 badchr.4354
008002a3 l     O .data	0000000e cst32.4395
00800295 l     O .data	0000000e cst.4394
00000000 l    df *ABS*	00000000 unicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008005fc l     O .data	00000100 Tbl
0080034e l     O .data	000000bc cvt2.1794
0080040a l     O .data	000001f2 cvt1.1793
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a57 l     O .text	00000007 __c.3664
008006fc l     O .data	00000008 CSWTCH.27
00000a46 l     O .text	00000011 __c.3700
00000a28 l     O .text	0000001e __c.3702
00000a09 l     O .text	0000001f __c.3704
000009eb l     O .text	0000001e __c.3706
000009cd l     O .text	0000001e __c.3708
000009ae l     O .text	0000001f __c.3710
0000098f l     O .text	0000001f __c.3712
00000970 l     O .text	0000001f __c.3714
00000951 l     O .text	0000001f __c.3716
00000932 l     O .text	0000001f __c.3718
00000914 l     O .text	0000001e __c.3720
000008ef l     O .text	00000025 __c.3722
000008a2 l     O .text	0000004d __c.3724
00000887 l     O .text	0000001b __c.3730
00000865 l     O .text	00000022 __c.3732
00000863 l     O .text	00000002 __c.3734
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004fe l     O .text	00000020 __c.3654
000004d8 l     O .text	00000026 __c.3820
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007cf6 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000e6b0 l     F .text	0000003c mmc_task
00000847 l     O .text	0000001c __c.3662
0000083a l     O .text	0000000d __c.3690
0000082a l     O .text	00000010 __c.3703
00801837 l     O .bss	00000002 mmc_init_flag
0000081e l     O .text	0000000c __c.3705
0000080d l     O .text	00000011 __c.3707
000007ef l     O .text	0000001e __c.3710
000007da l     O .text	00000015 __c.3712
000007cc l     O .text	0000000e __c.3714
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ba8 l     O .text	0000000c __c.3655
00000b2c l     O .text	0000007c __c.3657
00000a9c l     O .text	0000000e __c.3696
00000a73 l     O .text	00000029 __c.3700
00000a5e l     O .text	00000015 __c.3702
00000afc l     O .text	00000020 __c.3675
00000aec l     O .text	00000010 __c.3677
00000ad8 l     O .text	00000014 __c.3679
00000aca l     O .text	0000000e __c.3681
00000aaa l     O .text	00000020 __c.3683
00000b1c l     O .text	00000010 __c.3667
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001810 l     O .text	0000000b __c.4384
0000168f l     O .text	00000181 __c.4386
00001682 l     O .text	0000000d __c.4394
0000166a l     O .text	00000018 __c.4397
00001652 l     O .text	00000018 __c.4399
0000163a l     O .text	00000018 __c.4401
00001622 l     O .text	00000018 __c.4403
00001609 l     O .text	00000019 __c.4405
000015f0 l     O .text	00000019 __c.4407
000015d7 l     O .text	00000019 __c.4409
000015be l     O .text	00000019 __c.4411
000015a7 l     O .text	00000017 __c.4413
00001590 l     O .text	00000017 __c.4415
00001579 l     O .text	00000017 __c.4417
00001562 l     O .text	00000017 __c.4419
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000151de l     F .text	000000a0 amigo_overflow_check
000027f2 l     O .text	00000019 __c.4140
0001527e l     F .text	000000de amigo_chs_to_logical
0000279f l     O .text	0000002b __c.4133
00002872 l     O .text	00000018 __c.4110
00002854 l     O .text	0000001e __c.4116
0000283a l     O .text	0000001a __c.4118
00002825 l     O .text	00000015 __c.4124
0000280b l     O .text	0000001a __c.4126
000027ca l     O .text	00000028 __c.4163
0000278f l     O .text	00000010 __c.4174
0000277a l     O .text	00000015 __c.4178
00002760 l     O .text	0000001a __c.4185
00002741 l     O .text	0000001f __c.4192
00002727 l     O .text	0000001a __c.4199
0000271a l     O .text	0000000d __c.4201
0000270a l     O .text	00000010 __c.4208
000026f0 l     O .text	0000001a __c.4210
000026e1 l     O .text	0000000f __c.4214
0000267a l     O .text	00000067 __c.4221
00002613 l     O .text	00000067 __c.4223
000025ac l     O .text	00000067 __c.4225
00002547 l     O .text	00000065 __c.4227
000024f7 l     O .text	00000050 __c.4232
000024a7 l     O .text	00000050 __c.4234
00002457 l     O .text	00000050 __c.4236
00002406 l     O .text	00000051 __c.4238
000023d4 l     O .text	00000032 __c.4250
000023b2 l     O .text	00000022 __c.4252
00002391 l     O .text	00000021 __c.4254
00002370 l     O .text	00000021 __c.4256
00002341 l     O .text	0000002f __c.4258
00002321 l     O .text	00000020 __c.4261
0000230d l     O .text	00000014 __c.4264
000022f9 l     O .text	00000014 __c.4267
000022d0 l     O .text	00000029 __c.4269
000022af l     O .text	00000021 __c.4271
0000229f l     O .text	00000010 __c.4274
0000227d l     O .text	00000022 __c.4276
00002261 l     O .text	0000001c __c.4278
00002238 l     O .text	00000029 __c.4280
00002218 l     O .text	00000020 __c.4282
000021ed l     O .text	0000002b __c.4284
000021ce l     O .text	0000001f __c.4286
000021be l     O .text	00000010 __c.4289
0000218c l     O .text	00000032 __c.4294
0000216c l     O .text	00000020 __c.4298
0000214b l     O .text	00000021 __c.4301
0000212c l     O .text	0000001f __c.4304
0000210a l     O .text	00000022 __c.4307
000020ee l     O .text	0000001c __c.4310
000020ce l     O .text	00000020 __c.4313
000020a5 l     O .text	00000029 __c.4318
0000207a l     O .text	0000002b __c.4321
00002051 l     O .text	00000029 __c.4324
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002915 l     O .text	00000021 __c.4101
00002944 l     O .text	00000015 __c.4093
00002936 l     O .text	0000000e __c.4095
0000297b l     O .text	00000022 __c.4083
00002965 l     O .text	00000016 __c.4085
00002959 l     O .text	0000000c __c.4087
0000290e l     O .text	00000007 __c.4107
000028f2 l     O .text	0000001c __c.4112
000028d8 l     O .text	0000001a __c.4114
000028c3 l     O .text	00000015 __c.4123
000028b1 l     O .text	00000012 __c.4128
0000289f l     O .text	00000012 __c.4130
0000288a l     O .text	00000015 __c.4132
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00003207 l     O .text	00000025 __c.4447
000031ce l     O .text	00000039 __c.4449
00003199 l     O .text	00000035 __c.4451
00003164 l     O .text	00000035 __c.4453
0000312c l     O .text	00000038 __c.4455
00003101 l     O .text	0000002b __c.4457
000030dd l     O .text	00000024 __c.4464
000030bb l     O .text	00000022 __c.4471
008019b2 l     O .bss	00000002 stack_ind
008019a8 l     O .bss	0000000a stack_p
000030a3 l     O .text	00000018 __c.4494
00003084 l     O .text	0000001f __c.4496
00003065 l     O .text	0000001f __c.4498
00003058 l     O .text	0000000d __c.4519
00002d91 l     O .text	00000022 __c.4569
00002db3 l     O .text	00000030 __c.4566
00002de3 l     O .text	0000002f __c.4563
00002e12 l     O .text	00000030 __c.4560
00002e42 l     O .text	00000019 __c.4558
00002e5b l     O .text	0000002e __c.4555
0000303a l     O .text	0000001e __c.4521
00003021 l     O .text	00000019 __c.4525
00002ff9 l     O .text	00000028 __c.4527
00002fcf l     O .text	0000002a __c.4531
00002f9e l     O .text	00000031 __c.4534
00002f71 l     O .text	0000002d __c.4537
00002f43 l     O .text	0000002e __c.4540
00002f15 l     O .text	0000002e __c.4543
00002ee3 l     O .text	00000032 __c.4546
00002eb7 l     O .text	0000002c __c.4549
00002e89 l     O .text	0000002e __c.4552
00002d6f l     O .text	00000022 __c.4573
00002d52 l     O .text	0000001d __c.4575
00002d2b l     O .text	00000027 __c.4577
00002d12 l     O .text	00000019 __c.4588
00002d00 l     O .text	00000012 __c.4599
00002cde l     O .text	00000022 __c.4605
00002c3d l     O .text	00000017 __c.4620
00002c26 l     O .text	00000017 __c.4622
00002c0f l     O .text	00000017 __c.4624
00002c82 l     O .text	00000017 __c.4614
00002c6b l     O .text	00000017 __c.4616
00002c54 l     O .text	00000017 __c.4618
00002cc7 l     O .text	00000017 __c.4608
00002cb0 l     O .text	00000017 __c.4610
00002c99 l     O .text	00000017 __c.4612
00002c0d l     O .text	00000002 __c.4629
00002bed l     O .text	00000020 __c.4637
000029fc l     O .text	00000002 __c.4730
00002a10 l     O .text	00000009 __c.4724
00002a06 l     O .text	0000000a __c.4726
000029fe l     O .text	00000008 __c.4728
00002a80 l     O .text	00000007 __c.4700
00002a76 l     O .text	0000000a __c.4702
00002a6e l     O .text	00000008 __c.4704
00002be7 l     O .text	00000006 __c.4640
00002bdd l     O .text	0000000a __c.4642
00002bd5 l     O .text	00000008 __c.4644
00002bd1 l     O .text	00000004 __c.4646
00002bcc l     O .text	00000005 __c.4648
00002bc2 l     O .text	0000000a __c.4650
00002bbf l     O .text	00000003 __c.4652
00002bb1 l     O .text	0000000e __c.4654
00002ba1 l     O .text	00000010 __c.4656
00002b93 l     O .text	0000000e __c.4658
00002b8e l     O .text	00000005 __c.4660
00002b86 l     O .text	00000008 __c.4662
00002b7c l     O .text	0000000a __c.4664
00002b6e l     O .text	0000000e __c.4666
00002b5e l     O .text	00000010 __c.4668
00002b4e l     O .text	00000010 __c.4670
00002b43 l     O .text	0000000b __c.4672
00002b38 l     O .text	0000000b __c.4674
00002b20 l     O .text	00000018 __c.4676
00002b0d l     O .text	00000013 __c.4678
00002b01 l     O .text	0000000c __c.4680
00002aee l     O .text	00000013 __c.4682
00002ae0 l     O .text	0000000e __c.4684
00002ace l     O .text	00000012 __c.4686
00002ac4 l     O .text	0000000a __c.4688
00002ab7 l     O .text	0000000d __c.4690
00002aae l     O .text	00000009 __c.4692
00002aa3 l     O .text	0000000b __c.4694
00002a92 l     O .text	00000011 __c.4696
00002a87 l     O .text	0000000b __c.4698
00002a6a l     O .text	00000004 __c.4706
00002a65 l     O .text	00000005 __c.4708
00002a5b l     O .text	0000000a __c.4710
00002a58 l     O .text	00000003 __c.4712
00002a4c l     O .text	0000000c __c.4714
00002a3b l     O .text	00000011 __c.4716
00002a29 l     O .text	00000012 __c.4718
00002a23 l     O .text	00000006 __c.4720
00002a19 l     O .text	0000000a __c.4722
000029f7 l     O .text	00000005 __c.4735
000029f5 l     O .text	00000002 __c.4737
000029f3 l     O .text	00000002 __c.4739
0000299f l     O .text	00000008 __c.4758
000029a7 l     O .text	00000022 __c.4756
000029c9 l     O .text	00000008 __c.4754
000029d1 l     O .text	00000022 __c.4752
0000299d l     O .text	00000002 __c.4763
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000457e l     O .text	0000000a __c.4048
000043d9 l     O .text	000001a5 __c.4050
000043b0 l     O .text	00000029 __c.4062
00004398 l     O .text	00000018 __c.4067
00004373 l     O .text	00000025 __c.4079
0000435a l     O .text	00000019 __c.4085
00004339 l     O .text	00000021 __c.4092
000042fd l     O .text	0000003c __c.4101
000042c0 l     O .text	0000003d __c.4110
008019d4 l     O .bss	00000020 _lif_ctime_buf.4213
008019b4 l     O .bss	00000020 _timestr.4218
000042bb l     O .text	00000005 __c.4233
000042a1 l     O .text	0000001a __c.4235
00004284 l     O .text	0000001d __c.4237
00004267 l     O .text	0000001d __c.4239
0000424a l     O .text	0000001d __c.4241
0000422d l     O .text	0000001d __c.4243
00004210 l     O .text	0000001d __c.4245
000041f3 l     O .text	0000001d __c.4247
000041d6 l     O .text	0000001d __c.4249
000041b9 l     O .text	0000001d __c.4251
0000419f l     O .text	0000001a __c.4253
00004183 l     O .text	0000001c __c.4255
00004166 l     O .text	0000001d __c.4257
00004149 l     O .text	0000001d __c.4259
0000412d l     O .text	0000001c __c.4261
00004111 l     O .text	0000001c __c.4263
000040f7 l     O .text	0000001a __c.4265
000040dd l     O .text	0000001a __c.4267
000040c1 l     O .text	0000001c __c.4269
000040a5 l     O .text	0000001c __c.4271
00004088 l     O .text	0000001d __c.4273
0000406b l     O .text	0000001d __c.4275
0000404e l     O .text	0000001d __c.4277
00004032 l     O .text	0000001c __c.4279
00004018 l     O .text	0000001a __c.4281
00004016 l     O .text	00000002 __c.4283
00003ff7 l     O .text	0000001f __c.4290
00003fbe l     O .text	00000039 __c.4292
00003fa6 l     O .text	00000018 __c.4294
00003f6d l     O .text	00000039 __c.4296
00003f34 l     O .text	00000039 __c.4298
00003f0f l     O .text	00000025 __c.4300
00003ee0 l     O .text	0000002f __c.4302
00003eb4 l     O .text	0000002c __c.4304
00003e93 l     O .text	00000021 __c.4310
00003e4f l     O .text	00000044 __c.4312
00003e0e l     O .text	00000041 __c.4314
00003de0 l     O .text	0000002e __c.4316
00003d95 l     O .text	0000004b __c.4318
00003d4a l     O .text	0000004b __c.4320
00003d1f l     O .text	0000002b __c.4322
00003cf3 l     O .text	0000002c __c.4324
00003c89 l     O .text	0000003a __c.4377
00003c69 l     O .text	00000020 __c.4386
00003c1c l     O .text	0000004d __c.4411
00003ce7 l     O .text	0000000c __c.4340
00003cdb l     O .text	0000000c __c.4348
00003ccf l     O .text	0000000c __c.4353
00003cc3 l     O .text	0000000c __c.4358
00003be4 l     O .text	00000038 __c.4423
00003bbb l     O .text	00000029 __c.4425
00003b6a l     O .text	00000051 __c.4428
00003b2b l     O .text	0000003f __c.4441
00003af5 l     O .text	00000036 __c.4443
00003ac2 l     O .text	00000033 __c.4445
00003a8f l     O .text	00000033 __c.4447
00003a78 l     O .text	00000017 __c.4457
00003a38 l     O .text	00000040 __c.4459
000039ec l     O .text	0000004c __c.4462
000039bc l     O .text	00000030 __c.4464
000039ba l     O .text	00000002 __c.4467
000039ae l     O .text	0000000c __c.4469
000039a1 l     O .text	0000000d __c.4471
0000398e l     O .text	00000013 __c.4473
0000397b l     O .text	00000013 __c.4475
00003954 l     O .text	00000027 __c.4482
0000392f l     O .text	00000025 __c.4484
000038f6 l     O .text	00000039 __c.4498
000038d2 l     O .text	00000024 __c.4515
000038c5 l     O .text	0000000d __c.4532
000038b8 l     O .text	0000000d __c.4537
000038ab l     O .text	0000000d __c.4539
00003878 l     O .text	00000033 __c.4553
0000384a l     O .text	0000002e __c.4555
0000381b l     O .text	0000002f __c.4557
000037eb l     O .text	00000030 __c.4559
000037bc l     O .text	0000002f __c.4561
0000378c l     O .text	00000030 __c.4563
00003765 l     O .text	00000027 __c.4565
0000374e l     O .text	00000017 __c.4567
00003737 l     O .text	00000017 __c.4569
0000371e l     O .text	00000019 __c.4571
00003705 l     O .text	00000019 __c.4573
000036f8 l     O .text	0000000d __c.4575
000036e0 l     O .text	00000018 __c.4599
000036c9 l     O .text	00000017 __c.4601
00003691 l     O .text	00000038 __c.4603
00003681 l     O .text	00000010 __c.4605
000035c1 l     O .text	0000000d __c.4616
000035ce l     O .text	00000028 __c.4614
0000364c l     O .text	00000035 __c.4609
000035f6 l     O .text	00000056 __c.4611
00003599 l     O .text	00000028 __c.4624
0000358c l     O .text	0000000d __c.4627
00003574 l     O .text	00000018 __c.4644
00003561 l     O .text	00000013 __c.4646
00003554 l     O .text	0000000d __c.4648
00003547 l     O .text	0000000d __c.4653
00003527 l     O .text	00000020 __c.4670
0000350c l     O .text	0000001b __c.4672
000034f0 l     O .text	0000001c __c.4674
000034c1 l     O .text	0000002f __c.4676
000034ae l     O .text	00000013 __c.4678
0000347e l     O .text	00000030 __c.4680
00003471 l     O .text	0000000d __c.4682
00003464 l     O .text	0000000d __c.4687
0000343f l     O .text	00000025 __c.4695
0000341f l     O .text	00000020 __c.4697
00003400 l     O .text	0000001f __c.4699
000033d8 l     O .text	00000028 __c.4701
000033c9 l     O .text	0000000f __c.4703
000033a1 l     O .text	00000028 __c.4712
0000337a l     O .text	00000027 __c.4714
00003353 l     O .text	00000027 __c.4716
0000331d l     O .text	00000036 __c.4718
000032f4 l     O .text	00000029 __c.4720
000032dd l     O .text	00000017 __c.4722
000032b4 l     O .text	00000029 __c.4735
0000328f l     O .text	00000025 __c.4737
0000326c l     O .text	00000023 __c.4739
0000324c l     O .text	00000020 __c.4741
0000322c l     O .text	00000020 __c.4743
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000048f1 l     O .text	00000030 __c.4414
000048d2 l     O .text	0000001f __c.4416
000048b5 l     O .text	0000001d __c.4418
000048a5 l     O .text	00000010 __c.4420
0000487e l     O .text	00000027 __c.4422
00004864 l     O .text	0000001a __c.4424
0000484a l     O .text	0000001a __c.4426
00004848 l     O .text	00000002 __c.4428
00004839 l     O .text	0000000f __c.4432
0000482e l     O .text	0000000b __c.4434
0000480f l     O .text	0000001f __c.4438
0000480c l     O .text	00000003 __c.4448
00004800 l     O .text	0000000c __c.4450
000047f9 l     O .text	00000007 __c.4458
000047e8 l     O .text	00000011 __c.4460
000047c1 l     O .text	00000027 __c.4462
000047a2 l     O .text	0000001f __c.4464
00004785 l     O .text	0000001d __c.4466
00004775 l     O .text	00000010 __c.4468
0000474e l     O .text	00000027 __c.4470
00004734 l     O .text	0000001a __c.4472
0000471a l     O .text	0000001a __c.4474
00004704 l     O .text	00000016 __c.4476
000046ee l     O .text	00000016 __c.4478
000046dc l     O .text	00000012 __c.4480
000046cd l     O .text	0000000f __c.4482
000046b0 l     O .text	0000001d __c.4484
00004692 l     O .text	0000001e __c.4486
00004675 l     O .text	0000001d __c.4488
0000465b l     O .text	0000001a __c.4490
00004643 l     O .text	00000018 __c.4492
00004632 l     O .text	00000011 __c.4494
0000461c l     O .text	00000016 __c.4496
00004607 l     O .text	00000015 __c.4498
000045f5 l     O .text	00000012 __c.4500
000045dd l     O .text	00000018 __c.4502
000045c8 l     O .text	00000015 __c.4504
000045b2 l     O .text	00000016 __c.4506
0000459c l     O .text	00000016 __c.4508
00004588 l     O .text	00000014 __c.4510
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d0 l     O .text	00000004 __c.2334
000001d4 l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000417 l     O .text	0000000d __c.3672
00000404 l     O .text	00000013 __c.3674
000003f1 l     O .text	00000013 __c.3676
000003d3 l     O .text	0000001e __c.3678
000003b5 l     O .text	0000001e __c.3680
00000397 l     O .text	0000001e __c.3682
00000379 l     O .text	0000001e __c.3684
00000365 l     O .text	00000014 __c.3686
0000034a l     O .text	0000001b __c.3701
00000332 l     O .text	00000018 __c.3707
0000030d l     O .text	00000025 __c.3716
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801762 l     O .bss	00000004 SPI0_Speed_value
00000424 l     O .text	0000001d __c.3670
00801760 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004c2 l     O .text	00000016 __c.3662
000004ae l     O .text	00000014 __c.3670
00000497 l     O .text	00000017 __c.3672
00000451 l     O .text	00000011 __c.3695
00000462 l     O .text	0000001c __c.3685
0000047e l     O .text	00000019 __c.3683
00000441 l     O .text	00000010 __c.3702
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000069cc l     F .text	0000007c clock_settime.part.2
000005bc l     O .text	0000001d __c.3667
000005b2 l     O .text	0000000a __c.3687
0080176e l     O .bss	00000020 _ts_to_str
000005a3 l     O .text	0000000f __c.3692
00801766 l     O .bss	00000008 __clock_elapsed
00000595 l     O .text	0000000e __c.3701
0000058a l     O .text	0000000b __c.3703
0080178e l     O .bss	00000002 timers_configured
00801790 l     O .bss	00000002 timers_enabled
00000576 l     O .text	00000014 __c.3723
00000563 l     O .text	00000013 __c.3725
00000557 l     O .text	0000000c __c.3727
0000053f l     O .text	00000018 __c.3729
0000052e l     O .text	00000011 __c.3731
0000051e l     O .text	00000010 __c.3733
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000ff5 l     O .text	0000001d __c.3814
00801966 l     O .bss	00000001 _ppr_reg
00000fe2 l     O .text	00000013 __c.3832
00000fd1 l     O .text	00000011 __c.3846
00000fc4 l     O .text	0000000d __c.3855
00000fb6 l     O .text	0000000e __c.3864
00000fa9 l     O .text	0000000d __c.3871
00000f9b l     O .text	0000000e __c.3877
00000000 l    df *ABS*	00000000 _clear_bss.o
00004952 l       .text	00000000 .do_clear_bss_start
00004950 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 syscall.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 controller.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001d504 l       .text	00000000 __udivmodqi4_ep
0001d4fc l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001d524 l       .text	00000000 __udivmodhi4_ep
0001d516 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001d54c l       .text	00000000 __divmodhi4_neg1
0001d554 l       .text	00000000 __divmodhi4_neg2
0001d55a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001d582 l       .text	00000000 __udivmodsi4_ep
0001d568 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001d5b8 l       .text	00000000 __divmodsi4_neg2
0001d5c6 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001e0ce l       .text	00000000 __stop_program
00014914 g     F .text	00000040 SS80_Selected_Device_Clear
0001d5ea g       .text	00000002 .hidden __usmulhisi3
0000f57a g     F .text	0000000c putchar
000127f0 g     F .text	00000022 SS80_is_MTA
00006868 g     F .text	000000ea clock_gettime
00005e86 g     F .text	000000e8 rtc_init
00012b1c g     F .text	000000a8 GPIB_COMMANDS
00004960  w      .text	00000000 __vector_22
00011cde g     F .text	0000004a gpib_unread
00013b12 g     F .text	00000034 SS80_test_extended_status
000063e0  w    F .text	00000016 strcpy
00007ad8 g     F .text	00000008 asctime
00006dc0 g     F .text	00000020 tm_mon_to_ascii
00801a83 g     O .bss	00000235 Fatfs
0000f6ae g     F .text	0000004a mctime
00004960  w      .text	00000000 __vector_28
0000e760 g     F .text	0000001a mmc_fast
00005dd0 g     F .text	000000b6 rtc_write
000149fc g     F .text	00000224 SS80_Transparent_State
00801967 g     O .bss	00000001 gpib_unread_f
0000515e g     F .text	00000004 spi_RX_buffer
0001320e g     F .text	00000038 gpib_help
0001477a g     F .text	0000009c SS80_Report
00019058 g     F .text	00000086 controller_read_trace
000103ee g     F .text	0000006a free_file_descriptor
0000f382 g     F .text	00000096 fatfs_putc
0001d6ca g       .text	0000001e .hidden __umulhisi3
008001bf g     O .data	0000000c cfgfile
00004960  w      .text	00000000 __vector_1
00012c58 g     F .text	0000016e GPIB
0000ef30 g     F .text	00000038 fatfs_help
00006ab4 g     F .text	00000016 delete_all_timers
00006168 g     F .text	00000016 LCD_clear
000059fa g     F .text	0000000c SPI0_TXRX_Byte
0001db98 g       .text	00000000 __fp_mpack_finite
00015918 g     F .text	00000188 amigo_buffered_read
0000ff36 g     F .text	00000086 utime
00801a4d g     O .bss	00000008 __clock
00016ec4 g     F .text	00000054 find_device
0001859c g     F .text	0000008e print_str_P
0080010a g     O .data	00000008 lcd
0000790c g     F .text	00000128 set_dst
0000fb88 g     F .text	00000096 fdevopen
00012812 g     F .text	00000022 SS80_is_MSA
00005116 g     F .text	00000044 spi_end
0001981e g     F .text	000000e2 lif_dir2str
0001db1e g     F .text	00000040 round
0001712e g     F .text	00000120 alloc_device
00005422 g     F .text	00000054 safefree
000184fa g     F .text	000000a2 print_var_P
00012dc6 g     F .text	0000012a GPIB_TALK
00004960  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001d7ba g     F .text	00000004 __divsf3
0001d66e g       .text	00000036 .hidden __epilogue_restores__
000057b6 g     F .text	00000018 uart_rx_count
00801ce2 g     O .bss	00000009 gpib_timer
00012ef0 g     F .text	000000fa GPIB_SECONDARY_ADDRESS
00019bb8 g     F .text	0000000e lif_vol_clear
00006952 g     F .text	0000007a clock_task
000120e0 g     F .text	0000028e gpib_trace_display
0001ca5a g     F .text	0000010c lif_rename_file
00016e44 g     F .text	00000028 find_type
0001d9dc g     F .text	00000022 __fp_round
00016e6c g     F .text	0000001e count_drive_types
00006de0 g     F .text	00000042 Days_Per_Month
00006c8e g     F .text	00000028 execute_timers
00010d20 g     F .text	0000017a ls_info
00004960  w      .text	00000000 __vector_34
0000e71a g     F .text	0000001a mmc_spi_begin
0001d88a g     F .text	0000000a __fixsfsi
00006ba0 g     F .text	0000000c clock_elapsed_begin
00006448  w    F .text	00000032 reverse
0000632e g     F .text	0000003c lcd_printf
0000e026 g     F .text	00000006 mmc_disk_status
0001d9fe g     F .text	00000044 __fp_split3
00011ae4 g     F .text	00000014 gpib_timeout_set
0001d50e g       .text	00000028 .hidden __udivmodhi4
00005112 g     F .text	00000004 chip_select_init
00006b4c g     F .text	00000054 ts_to_str
00008e92 g     F .text	0000000c atol
00007e82 g     F .text	000000aa p_ntoa
00016c4c g     F .text	00000128 plot_echo
0000e930 g     F .text	000000d8 tm_to_fat
0000528a g     F .text	00000106 PrintFree
00015c10 g     F .text	000000c4 amigo_cmd_dsj
0000ddb4 g     F .text	00000024 wait_ready
000001d0 g       .text	00000000 __trampolines_start
0001d966 g     F .text	00000048 __fp_cmp
0001267e g     F .text	000000f2 gpib_write_str
00801cc0 g     O .bss	00000002 errno
000149da g     F .text	00000022 SS80_Cancel
0001e0d0 g       .text	00000000 _etext
00005ae6 g     F .text	00000008 TWI_StopTransmission
0000e182 g     F .text	00000510 mmc_disk_ioctl
00006596 g     F .text	00000028 MATCH
0080012c g     O .data	00000010 __WDay
0001a5dc g     F .text	000000b8 lif_writedirindex
00006110 g     F .text	00000040 LCD_setCursor
000058c0 g     F .text	000000ce SPI0_Speed
00006bac g     F .text	00000084 clock_elapsed_end
00010af8 g     F .text	00000228 hexdump
0080023f g     O .data	00000016 TD
0000dc42 g     F .text	000000a8 ff_wtoupper
0001d6e8 g     F .text	0000000a __subsf3
0001c5fa g     F .text	00000330 lif_add_lif_file
00801ceb g     O .bss	00000002 lastcmd
00004960  w      .text	00000000 __vector_24
00017414 g     F .text	00000002 set_Config_Defaults
000064b0 g     F .text	00000014 skipspaces
0000bcba g     F .text	00000268 f_getcwd
00004960  w      .text	00000000 __vector_12
0001175e g     F .text	00000028 gpib_timer_init
000117b6 g     F .text	00000022 ppr_init
0000f586 g     F .text	00000068 fgets
0001e010 g     F .text	000000bc __ultoa_invert
000057ce g     F .text	0000004c uart_get_tail
000053e0 g     F .text	00000042 safemalloc
0001c92a g     F .text	00000130 lif_del_file
00007cc4 g     F .text	00000032 _putc_buffer_fn
0001b796 g     F .text	00000172 lif_ascii_string_to_e010
0000e924 g     F .text	00000006 mmc_ins_status
00019b4e g     F .text	0000004e lif_lifbcd2timestr
00801ced g     O .bss	00000200 gpib_iobuff
00016d74 g     F .text	00000028 V2B_MSB
000199ee g     F .text	00000084 lif_time2lifbcd
00016ebc g     F .text	00000008 find_free
0001a0a2 g     F .text	00000366 lif_check_dir
00004960 g       .text	00000000 __bad_interrupt
000054d0 g     F .text	00000090 delayms
000148e0 g     F .text	00000018 SS80_Channel_Independent_Clear
00010a1e g     F .text	000000da cat
00008cf6 g     F .text	00000028 snprintf_P
00015d1a g     F .text	00000152 amigo_todo_op
00014954 g     F .text	00000086 SS80_Amigo_Clear
0000fb12 g     F .text	00000076 perror
0001f730 g       *ABS*	00000000 __data_load_end
0000dcf6 g     F .text	0000000c disk_initialize
0080198f g     O .bss	0000000d plot
00011a92 g     F .text	00000006 gpib_timer_elapsed_end
0001916e g     F .text	00000020 lif_free
0000f61e g     F .text	0000002e puts
000107f8 g     F .text	000001c0 copy
00006d86 g     F .text	00000010 clock_settime
0001918e g     F .text	0000003e lif_stralloc
00006396  w    F .text	00000016 islower
0000525c g     F .text	0000002e freeRam
000153e6 g     F .text	0000001c amigo_request_logical_address
000063ac  w    F .text	0000001a tolower
00006150 g     F .text	00000018 LCD_pos
0000ccb2 g     F .text	0000021e f_rename
00004960  w      .text	00000000 __vector_6
00011a74 g     F .text	0000001e gpib_timer_reset
0001a8d4 g     F .text	000005b2 lif_create_volume
0001dbe4 g     F .text	00000130 malloc
00005182 g     F .text	00000040 spi_init
000107c0 g     F .text	00000038 posix_help
00004960  w      .text	00000000 __vector_31
0001180e g     F .text	00000044 dbf_open
0001ceaa g     F .text	00000092 copyright
00011172 g     F .text	000000a0 sum
0000bc04 g     F .text	000000b6 f_chdir
0001d7b2 g       .text	00000000 __lesf2
000050e2 g     F .text	00000030 chip_deselect
00016bee g     F .text	0000005e PRINTER_COMMANDS
00006c30 g     F .text	00000036 clock_clear
00007b02 g     F .text	000000ee initialize_clock
0000e922 g     F .text	00000002 mmc_power_off
0000e92a g     F .text	00000006 mmc_wp_status
0000f27c g     F .text	00000106 fatfs_getc
00801eed g     O .bss	00000001 listening_last
0000dcea g     F .text	0000000c disk_status
000060ea g     F .text	00000026 LCD_specialCommand
00800257 g     O .data	00000002 __malloc_heap_start
000001d0 g       .text	00000000 __trampolines_end
00006d66 g     F .text	00000020 clock_getres
0001b908 g     F .text	0000021a lif_add_ascii_file_as_e010_wrapper
00011ca2 g     F .text	0000003c gpib_assert_ifc
000199d8 g     F .text	00000016 lif_BCD2BIN
00005bae g     F .text	00000028 TWI_SendByte
000191cc g     F .text	00000050 lif_open
00007bf0 g     F .text	000000d4 display_clock
000117d8 g     F .text	0000001a ppr_bit_set
00004960  w      .text	00000000 __vector_3
000117ae g     F .text	00000008 ppr_reg
000110d2 g     F .text	000000a0 logfile
0001251a g     F .text	00000008 gpib_decode
0000fa20 g     F .text	00000004 rmdir
00006a48 g     F .text	0000006c set_timers
00801a71 g     O .bss	0000000c dst
0000fa96 g     F .text	0000007c readdir
0001da42 g     F .text	0000000e __fp_zero
0000c5c2 g     F .text	0000002a f_closedir
0000dd42 g     F .text	00000014 disk_ioctl
0001cc5e g     F .text	0000024c lif_tests
000083f2 g     F .text	00000084 _puts_pad
00005162 g     F .text	00000020 spi_TX
00019bc6 g     F .text	00000326 lif_dump_vol
00012fea g     F .text	00000044 listen_cleanup
00019a72 g     F .text	000000a0 lif_lifbcd2time
00019900 g     F .text	000000ca lif_str2dir
00005a78 g     F .text	0000002c SPI0_TXRX
000061bc g     F .text	00000064 LCD_init
0001d7b2 g       .text	00000000 __nesf2
00005cf0 g     F .text	0000000e BINtoBCD
0001001c g     F .text	000000ce lseek
00004960  w      .text	00000000 __vector_23
0001e0d0 g       *ABS*	00000000 __data_load_start
00801831 g     O .bss	00000004 _mmc_clock
00004922 g       .text	00000000 __dtors_end
000060a0 g     F .text	00000024 LCD_putb
000128de g     F .text	00000010 gpib_init_devices
00006546  w    F .text	00000050 strncasecmp
00801f33 g       .bss	00000000 __bss_end
00019426 g     F .text	00000056 lif_chars
0001d5f6 g       .text	00000014 .hidden __muluhisi3
00004960  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00018cd4 g     F .text	00000272 format_drives
00004960  w      .text	00000000 __vector_25
00801f2f g     O .bss	00000002 __brkval
00006fde g     F .text	0000002a gmtime_r
0000f8ac g     F .text	00000052 chmod
00006cb6 g     F .text	000000b0 init_timers
00012878 g     F .text	00000022 AMIGO_is_MSA
0001a454 g     F .text	000000b6 lif_checkdirindex
0000c8d2 g     F .text	00000152 f_unlink
00011d34 g     F .text	00000020 gpib_control_pin_read
00011912 g     F .text	000000ae dbf_open_read
00008dbc g     F .text	000000bc strtol
00011a6e g     F .text	00000006 gpib_timer_elapsed_begin
0001dffa g     F .text	00000016 strnlen
00005560 g     F .text	00000134 uart_ubr
0001b6e2 g     F .text	000000b4 lif_e010_pad_sector
000190de g     F .text	00000038 lif_help
00006678 g     F .text	000000b8 split_args
0000f9a4 g     F .text	0000003e rename
000118e2 g     F .text	00000030 dbf_close
0001687a g     F .text	000000b2 receive_plot_flush
0001d7d4 g     F .text	000000d4 __divsf3x
00004960  w      .text	00000000 __vector_11
00801eee g     O .bss	00000001 spoll
0000f852 g     F .text	0000001c basename
00013b46 g     F .text	000000ae SS80_display_extended_status
0001672e g     F .text	00000130 AMIGO_COMMANDS
0001de26 g     F .text	000001b0 __ftoa_engine
00019564 g     F .text	0000007a lif_fixname
0000e0b8 g     F .text	000000ca mmc_disk_write
00004922  w      .text	00000000 __init
0001dbb0 g     F .text	00000034 calloc
0001c36c g     F .text	0000028e lif_extract_lif_as_lif
000067f4 g     F .text	00000026 install_timers_isr
000172d6 g     F .text	0000013e assign_value
00011786 g     F .text	00000014 reverse_8bits
00013cf6 g     F .text	000000e0 SS80_describe
00005852 g     F .text	0000002c uart_getchar
00007f2c g     F .text	0000020e p_ftoa
000102da g     F .text	000000dc write
00006220 g     F .text	00000046 lcd_cleareol
0001947c g     F .text	00000074 lif_B2S
0001da50 g       .text	00000000 __gtsf2
00010780 g     F .text	00000040 fprintf
0001203c g     F .text	000000a4 gpib_decode_header
0001236e g     F .text	000001ac gpib_read_byte
000148f8 g     F .text	0000001c SS80_Universal_Device_Clear
0001bb22 g     F .text	00000272 lif_add_ascii_file_as_e010
0000681a g     F .text	0000004e __vector_13
00006422  w    F .text	00000026 strcat
008019f6 g     O .bss	00000057 uarts
0001da74 g       .text	00000000 __mulsf3_pse
00004960  w      .text	00000000 __vector_17
0000523a g     F .text	00000022 spi_TXRX
0001d9ba g     F .text	00000006 __fp_nan
00016f18 g     F .text	00000216 set_active_device
00004960  w      .text	00000000 __vector_19
00006788 g     F .text	00000068 get_value
00005a50 g     F .text	00000028 SPI0_TX
000194f0 g     F .text	0000003a lif_checkname
0000f86e g     F .text	0000003e chdir
00004960  w      .text	00000000 __vector_7
0000e7d8 g     F .text	0000014a mmc_init
0000ef68 g     F .text	0000019a fatfs_ls
0001d9ae g     F .text	0000000c __fp_inf
00008d1e g     F .text	00000028 sprintf_P
0001d6b2 g       .text	00000018 .hidden __cmpdi2_s8
0000fd06 g     F .text	00000088 fat_time_to_unix
000100ea g     F .text	0000004e fseek
0000f6f8 g     F .text	0000015a dump_stat
00801cb8 g     O .bss	00000004 AccSize
00019b9c g     F .text	0000000c lif_image_clear
0000e78c g     F .text	0000000e mmc_set_ms_timeout
000067f0 g     F .text	00000004 enable_system_task
0000e780 g     F .text	00000006 mmc_spi_RX_buffer
00007100 g     F .text	00000058 is_dst
00005694 g     F .text	0000008e uart_init
00013838 g     F .text	00000078 SS80ControllerPack
00801ef7 g     O .bss	00000038 Devices
00004948 g       .text	00000010 .hidden __do_clear_bss
0001dfd6 g     F .text	00000016 strnlen_P
00801a7d g     O .bss	00000006 _pch
0000598e g     F .text	0000006c SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
0001b150 g     F .text	000001f0 lif_open_volume
000109b8 g     F .text	00000066 testpage
00016b08 g     F .text	000000e6 printer_buffer
00005c94 g     F .text	0000005c TWI_WritePacket
0000bbd2 g     F .text	00000032 f_close
0001da70 g     F .text	000000ca __mulsf3x
0001685e g     F .text	0000001c printer_init
0000e73c g     F .text	0000001a mmc_slow
0000636a g     F .text	00000016 sep
00800255 g     O .data	00000002 __malloc_heap_end
0001179a g     F .text	00000014 ppr_set
000157f4 g     F .text	00000124 amigo_format
00010138 g     F .text	000000da read
0001a694 g     F .text	00000030 lif_writedirEOF
0000e734 g     F .text	00000008 mmc_spi_end
0001d8f0 g       .text	00000000 __floatsisf
00015cd4 g     F .text	00000046 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
0001a6c4 g     F .text	00000210 lif_updatefree
00005aa4 g     F .text	0000002a SPI0_RX
0000b50e g     F .text	00000296 f_read
008019f4 g     O .bss	00000002 rtc_ok
000127ce g     F .text	00000022 SS80_is_MLA
00006380  w    F .text	00000016 isupper
000064de  w    F .text	0000002a strncmp
00005722 g     F .text	00000040 uart_rx_interrupt
0000587e g     F .text	00000006 uart0_getchar
00004960  w      .text	00000000 __vector_27
00011c40 g     F .text	00000062 gpib_disable_PPR
0000ea4c g     F .text	000000e0 fatfs_scan_files
000050b0 g     F .text	00000032 chip_select
00801760 g       .data	00000000 __data_end
000118b2 g     F .text	00000030 dbf_lseek
00015010 g     F .text	000001ce SS80_COMMANDS
0000c5ec g     F .text	0000008c f_readdir
00801eef g     O .bss	00000002 current
00013e1a g     F .text	00000040 SS80_Check_Volume
0000e6ec g     F .text	0000002e mmc_install_timer
00007e3a g     F .text	00000048 pch
00008d80 g     F .text	0000003c atodigit
0001d4d8 g       .text	0000001e .hidden __mulsi3
000063f6  w    F .text	0000002c strncpy
0000f9e2 g     F .text	0000003e unlink
000102b0 g     F .text	0000002a sync
00014854 g     F .text	0000008c SS80_init
0001d7b2 g       .text	00000000 __eqsf2
000104ca g     F .text	0000008a new_file_descriptor
00006508  w    F .text	0000003e strcasecmp
0001d616 g       .text	00000020 .hidden __negdi2
00016e04 g     F .text	00000040 B2V_LSB
0000ee22 g     F .text	0000010e fatfs_filinfo_list
0000ced0 g     F .text	0000009a f_chmod
00008e78 g     F .text	0000000c atoh
00801a55 g     O .bss	00000018 timer_irq
00016e8a g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001d536 g       .text	00000026 .hidden __divmodhi4
000138b0 g     F .text	00000198 SS80UnitPack
000119c0 g     F .text	000000ae dbf_open_write
00004960  w      .text	00000000 __vector_5
0000e692 g     F .text	0000001e mmc_disk_timerproc
00007800 g     F .text	0000010c find_dst
00800189 g     O .data	00000034 gpib_tokens
00004960  w      .text	00000000 __vector_33
00012522 g     F .text	0000015c gpib_read_str
0001b340 g     F .text	000002da lif_dir
00015aa0 g     F .text	00000170 amigo_buffered_write
0001d03a g     F .text	00000164 task
00011212 g     F .text	000000cc upload
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00013bf4 g     F .text	00000102 SS80_send_status
00006266 g     F .text	000000b2 lcd_putch
0001d5d8 g       .text	00000012 .hidden __tablejump2__
000128ee g     F .text	0000011a gpib_trace_task
0080013c g     O .data	00000001 Stat
0000fea6 g     F .text	00000090 unix_time_to_fat
00004922 g       .text	00000000 __ctors_start
0000617e g     F .text	0000003e LCD_setFastBacklightRGB
0000deec g     F .text	0000013a mmc_disk_initialize
00801a6d g     O .bss	00000004 __tzone
0000ea08 g     F .text	00000026 get_fattime
00010212 g     F .text	00000038 fread
00019ba8 g     F .text	00000010 lif_dir_clear
0001562a g     F .text	00000052 amigo_increment
0001302e g     F .text	0000011c GPIB_LISTEN
008001bd g     O .data	00000002 debuglevel
00801835 g     O .bss	00000002 _mmc_timeout
0000492e g       .text	0000001a .hidden __do_copy_data
008001cb g     O .data	00000074 faults
00010692 g     F .text	000000d4 posix_fopen_modes_to_open
00016dc6 g     F .text	0000003e B2V_MSB
000199ca g     F .text	0000000e lif_BIN2BCD
0001db5e g     F .text	00000036 __fp_mintl
0001d7b2 g     F .text	00000008 __cmpsf2
0001d6a4 g       .text	0000000e .hidden __xload_1
00007062 g     F .text	0000005c gettimeofday
0001d9ce g     F .text	0000000e __fp_pscB
0001da0e g       .text	00000000 __fp_splitA
00019b12 g     F .text	0000003c lif_ctime_gmt
000192d8 g     F .text	000000b2 lif_read
00010766 g     F .text	0000001a fopen
00801760 g       .bss	00000000 __bss_start
00007a34 g     F .text	000000a4 asctime_r
000071f0 g     F .text	00000008 localtime
0001dfec g     F .text	0000000e memset
00017276 g     F .text	00000032 push_state
00015e6c g     F .text	00000120 amigo_todo
000077be g     F .text	00000042 setdate
0001d19e g     F .text	0000033a main
00005ace g     F .text	00000018 TWI_Init
0001320c g     F .text	00000002 talk_cleanup
00005d10 g     F .text	000000c0 rtc_run
0000ffe6 g     F .text	00000036 ftell
00801ef1 g     O .bss	00000001 talking
0000bad2 g     F .text	00000100 f_sync
0080199e g     O .bss	00000002 AMIGOs
0001d7b2 g       .text	00000000 __ltsf2
000058bc g     F .text	00000004 uart_keyhit
0001724e g     F .text	00000028 init_Devices
00004960  w      .text	00000000 __vector_4
0001a408 g     F .text	0000004c lif_close_volume
0000e756 g     F .text	0000000a mmc_spi_init
0001a50a g     F .text	000000d2 lif_readdirindex
00005aee g     F .text	000000c0 TWI_StartTransmission
00015fb4 g     F .text	000005cc Amigo_Command
000104ba g     F .text	00000010 fclose
0000f56e g     F .text	0000000c getchar
0001556e g     F .text	000000bc amigo_send_status
0001535c g     F .text	0000008a amigo_init
0080013d g     O .data	0000004a sys_errlist
000070be g     F .text	00000042 time
00017416 g     F .text	000010e4 POSIX_Read_Config
0000fa5a g     F .text	0000003c opendir
0000d110 g     F .text	00000ad8 f_mkfs
0001db94 g     F .text	0000001c __fp_mpack
00007040 g     F .text	00000022 settimezone
0000b09a g     F .text	0000007c f_mount
0000eb4a g     F .text	000002d8 fatfs_status
00007e20 g     F .text	0000001a pch_init
00012856 g     F .text	00000022 AMIGO_is_MTA
0001d5c8 g       .text	00000010 .hidden __negsi2
0000c4dc g     F .text	000000e6 f_opendir
00014816 g     F .text	0000003e Clear_Common
0001d002 g     F .text	00000038 help
00011bde g     F .text	00000062 gpib_enable_PPR
000156d2 g     F .text	00000122 amigo_verify
0001da58 g     F .text	00000004 __mulsf3
00015402 g     F .text	000000b0 amigo_request_status
0001862a g     F .text	000001f6 display_Addresses
0000ffbc g     F .text	0000002a fileno_to_fatfs
000064c4  w    F .text	0000001a strcmp
00011b8e g     F .text	00000050 gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00011a98 g     F .text	0000004c gpib_timer_task
0000fc1e g     F .text	000000e8 mkfs
00005476 g     F .text	0000005a delayus
000172a8 g     F .text	0000002e pop_state
00004960  w      .text	00000000 __vector_9
0000f8fe g     F .text	0000004a getcwd
00004960  w      .text	00000000 __vector_2
0000661c g     F .text	00000028 MATCHI
00015f8c g     F .text	00000028 amigo_check_unit
0001d70c g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000bf22 g     F .text	000005ba f_lseek
0000f418 g     F .text	000000a2 fgetc
00801ef2 g     O .bss	00000001 secondary
00018fcc g     F .text	0000008c controller_read_str
00008caa g     F .text	0000004c vsnprintf_P
00007ae0 g     F .text	00000022 ctime_gm
0001da50 g     F .text	00000008 __gesf2
000154b2 g     F .text	000000bc amigo_send_logical_address
00013dd6 g     F .text	00000044 SS80_Check_Unit
00012770 g     F .text	0000005e gpib_file_init
00800104 g     O .data	00000001 _cs_pin
00006046 g     F .text	00000028 I2C_Start
00801968 g     O .bss	00000002 gpib_log_fp
00004960  w      .text	00000000 __vector_21
00004960  w      .text	00000000 __vector_15
0000607e g     F .text	00000022 I2C_Send
0000813a g     F .text	000002b8 p_etoa
00014c94 g     F .text	000002d0 SS80_locate_and_read
00013246 g     F .text	000005f2 gpib_tests
00801cbc g     O .bss	00000002 AccDirs
0000dbee g     F .text	00000006 ff_memfree
008019a6 g     O .bss	00000002 PRINTERp
0001d9c0 g     F .text	0000000e __fp_pscA
0001d4f6 g       .text	00000018 .hidden __udivmodqi4
00801ef3 g     O .bss	00000001 listening
00012a08 g     F .text	00000114 gpib_error_test
008019a2 g     O .bss	00000002 SS80s
0000c678 g     F .text	00000080 f_stat
00011b3e g     F .text	00000050 gpib_bus_init
0000f4ba g     F .text	0000009a fputc
00004960  w      .text	00000000 __vector_29
000058a8 g     F .text	00000014 uart0_putchar
00008d46 g     F .text	0000003a printf_P
0001d60e g       .text	00000006 .hidden __mulohisi3
00014f64 g     F .text	000000ac SS80_Execute_State
00007588 g     F .text	00000008 timegm
00013e5a g     F .text	000004f0 SS80_Command_State
0000701e g     F .text	00000022 gettimezone
00801f33 g       .comment	00000000 __heap_start
00006494 g     F .text	0000001c trim_tail
00011d6c g     F .text	000002d0 gpib_write_byte
0001692c g     F .text	0000009a printer_close
00019eec g     F .text	000001b6 lif_check_volume
00007158 g     F .text	00000098 localtime_r
00801cbe g     O .bss	00000002 AccFiles
00005f6e g     F .text	000000d8 rtc_read
00004922 g       .text	00000000 __dtors_start
00011af8 g     F .text	00000046 gpib_bus_read_init
00004922 g       .text	00000000 __ctors_end
0001d5a0 g       .text	00000028 .hidden __divmodsi4
00011d28 g     F .text	0000000c gpib_bus_read
0000fd8e g     F .text	00000118 stat
000040ff  w      *ABS*	00000000 __stack
0001024a g     F .text	00000066 syncfs
00019116 g     F .text	00000058 lif_calloc
000103b6 g     F .text	00000038 fwrite
00012bc4 g     F .text	00000094 Send_Identify
0080182f g     O .bss	00000002 _mmc_pre
0000e786 g     F .text	00000006 mmc_spi_TXRX
00801760 g       .data	00000000 _edata
00005c12 g     F .text	00000082 TWI_ReadPacket
0000cf6a g     F .text	000000b2 f_utime
00018820 g     F .text	000004b4 display_Config
0001d5ec g       .text	00000008 .hidden __usmulhisi3_tail
00801f33 g       .comment	00000000 _end
00005bd6 g     F .text	0000003c TWI_ReceiveByte
00019264 g     F .text	00000074 lif_seek_msg
000051c2 g     F .text	00000078 spi_begin
000169c6 g     F .text	00000142 printer_open
0000b7a4 g     F .text	0000032e f_write
00004960  w      .text	00000000 __vector_8
0001b61a g     F .text	000000c8 lif_find_file
00004960  w      .text	00000000 __vector_26
00007d0e g     F .text	00000112 bin2num
0001d7d8 g       .text	00000000 __divsf3_pse
0001cf3c g     F .text	000000c6 delay_tests
00800100 g     O .data	00000004 _spi_clock
008019a0 g     O .bss	00000002 AMIGOp
0000e77a g     F .text	00000006 mmc_spi_TX_buffer
0000b116 g     F .text	000003f8 f_open
000195de g     F .text	00000130 lif_vol2str
0000dd22 g     F .text	00000020 disk_write
00010e9a g     F .text	00000238 ls
0001e0cc  w      .text	00000000 .hidden exit
0001314a g     F .text	000000c2 gpib_task
0001d8ec g     F .text	0000007a __floatunsisf
00006aca g     F .text	00000082 subtract_timespec
0001d536 g       .text	00000000 .hidden _div
00016580 g     F .text	000001ae Amigo_Execute
0000647a  w    F .text	0000001a strupper
00801f31 g     O .bss	00000002 __flp
0001d55c g       .text	00000044 .hidden __udivmodsi4
000128bc g     F .text	00000022 PRINTER_is_MTA
0001ae86 g     F .text	000002ca lif_newdir
0001289a g     F .text	00000022 PRINTER_is_MLA
00008e84 g     F .text	0000000e atoi
00006e22 g     F .text	000001bc time_to_tm
0000ea2e g     F .text	0000001e put_rc
00800105 g     O .data	00000002 LCD_ok
0000f64c g     F .text	00000038 fileno
00800112 g     O .data	0000001a __Month
00005a06 g     F .text	0000004a SPI0_Init
0000ca24 g     F .text	0000028e f_mkdir
0001d894 g     F .text	00000058 __fixunssfsi
00007590 g     F .text	0000022e setdate_r
000065be g     F .text	0000005e MATCHARGS
0000515a g     F .text	00000004 spi_TX_buffer
0000606e g     F .text	00000010 I2C_Stop
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001e0cc g       .text	00000000 .hidden _exit
0001938a g     F .text	0000009c lif_write
0001952a g     F .text	0000003a lif_S2B
00801ef4 g     O .bss	00000001 talking_last
00011852 g     F .text	00000030 dbf_read
00005cfe g     F .text	00000012 BCDtoBIN
000071f8 g     F .text	00000390 normalize
00007008 g     F .text	00000016 gmtime
00004960  w      .text	00000000 __vector_14
0000f166 g     F .text	00000116 fatfs_tests
0001cb66 g     F .text	000000f8 lif_create_image
0000dd02 g     F .text	00000020 disk_read
00010554 g     F .text	0000013e open
00006730 g     F .text	00000058 token
000063c6  w    F .text	0000001a toupper
0001444c g     F .text	0000032e SS80_locate_and_write
00008476 g     F .text	00000834 _printf_fn
00004960  w      .text	00000000 __vector_10
000117f2 g     F .text	0000001c ppr_bit_clr
00801cc2 g     O .bss	00000020 __iob
0000d01c g     F .text	000000f4 f_getlabel
0001970e g     F .text	00000110 lif_str2vol
000060c4 g     F .text	00000026 LCD_command
0000c6f8 g     F .text	000001da f_getfree
0000dbf4 g     F .text	0000004e ff_convert
0000f5ee g     F .text	00000030 fputs
00004960  w      .text	00000000 __vector_16
00006644 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00005390 g     F .text	00000050 safecalloc
0000f684 g     F .text	0000002a fileno_to_stream
0001434a g     F .text	00000102 SS80_cmd_seek
0000fa24 g     F .text	00000036 closedir
00004960  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00013a48 g     F .text	000000ca SS80VolumePack
0000e02c g     F .text	0000008c mmc_disk_read
0000f102 g     F .text	00000064 mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
0001921c g     F .text	00000048 lif_stat
0000581a g     F .text	00000006 uart_rx_byte
00014c20 g     F .text	00000074 SS80_error_return
00800259 g     O .data	00000002 __malloc_margin
00005762 g     F .text	00000054 __vector_20
00018f46 g     F .text	00000086 controller_send_str
0000f948 g     F .text	0000005c mkdir
00005884 g     F .text	00000024 uart_putchar
000112de g     F .text	00000480 posix_tests
00801ef5 g     O .bss	00000002 gpib_unread_data
00010458 g     F .text	00000062 close
0001d6ea g       .text	00000000 __addsf3
0001d636 g       .text	00000038 .hidden __prologue_saves__
00012834 g     F .text	00000022 AMIGO_is_MLA
0000e79a g     F .text	0000003e mmc_test_timeout
0001bd94 g     F .text	000005d8 lif_extract_e010_as_ascii
00004964 g     F .text	0000074c vfprintf
0001567c g     F .text	00000056 amigo_seek
00011d54 g     F .text	00000018 gpib_handshake_pin_read
00006c66 g     F .text	00000028 enable_timers
0000eb2c g     F .text	0000001e fatfs_fstype
00016d9c g     F .text	0000002a V2B_LSB
00011882 g     F .text	00000030 dbf_write
008019a4 g     O .bss	00000002 SS80p
0080199c g     O .bss	00000002 lines
0000dbe8 g     F .text	00000006 ff_memalloc
0001dd14 g     F .text	00000112 free
0001da44 g       .text	00000000 __fp_szero
00005820 g     F .text	00000032 uart_tx_byte
0001d60a g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__ctors_end>
       4:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
       8:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
       c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      10:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      14:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      18:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      1c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      20:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      24:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      28:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      2c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      30:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      34:	0c 94 0d 34 	jmp	0x681a	; 0x681a <__vector_13>
      38:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      3c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      40:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      44:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      48:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      4c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      50:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <__vector_20>
      54:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      58:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      5c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      60:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      64:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      68:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      6c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      70:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      74:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      78:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      7c:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      80:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      84:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      88:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__bad_interrupt>
      8c:	b4 43       	sbci	r27, 0x34	; 52
      8e:	0f 45       	sbci	r16, 0x5F	; 95
      90:	e4 43       	sbci	r30, 0x34	; 52
      92:	e8 44       	sbci	r30, 0x48	; 72
      94:	e8 44       	sbci	r30, 0x48	; 72
      96:	0f 45       	sbci	r16, 0x5F	; 95
      98:	0f 45       	sbci	r16, 0x5F	; 95
      9a:	0f 45       	sbci	r16, 0x5F	; 95
      9c:	0f 45       	sbci	r16, 0x5F	; 95
      9e:	0f 45       	sbci	r16, 0x5F	; 95
      a0:	0f 45       	sbci	r16, 0x5F	; 95
      a2:	0f 45       	sbci	r16, 0x5F	; 95
      a4:	0f 45       	sbci	r16, 0x5F	; 95
      a6:	b4 43       	sbci	r27, 0x34	; 52
      a8:	ae 43       	sbci	r26, 0x3E	; 62
      aa:	0f 45       	sbci	r16, 0x5F	; 95
      ac:	0f 45       	sbci	r16, 0x5F	; 95
      ae:	0f 45       	sbci	r16, 0x5F	; 95
      b0:	0f 45       	sbci	r16, 0x5F	; 95
      b2:	de 43       	sbci	r29, 0x3E	; 62
      b4:	0f 45       	sbci	r16, 0x5F	; 95
      b6:	0f 45       	sbci	r16, 0x5F	; 95
      b8:	b4 43       	sbci	r27, 0x34	; 52
      ba:	0f 45       	sbci	r16, 0x5F	; 95
      bc:	0f 45       	sbci	r16, 0x5F	; 95
      be:	0f 45       	sbci	r16, 0x5F	; 95
      c0:	0f 45       	sbci	r16, 0x5F	; 95
      c2:	0f 45       	sbci	r16, 0x5F	; 95
      c4:	0f 45       	sbci	r16, 0x5F	; 95
      c6:	0f 45       	sbci	r16, 0x5F	; 95
      c8:	0f 45       	sbci	r16, 0x5F	; 95
      ca:	0f 45       	sbci	r16, 0x5F	; 95
      cc:	b4 43       	sbci	r27, 0x34	; 52
      ce:	0a 45       	sbci	r16, 0x5A	; 90
      d0:	e4 43       	sbci	r30, 0x34	; 52
      d2:	e8 44       	sbci	r30, 0x48	; 72
      d4:	e8 44       	sbci	r30, 0x48	; 72
      d6:	0f 45       	sbci	r16, 0x5F	; 95
      d8:	0f 45       	sbci	r16, 0x5F	; 95
      da:	0f 45       	sbci	r16, 0x5F	; 95
      dc:	0f 45       	sbci	r16, 0x5F	; 95
      de:	0f 45       	sbci	r16, 0x5F	; 95
      e0:	0f 45       	sbci	r16, 0x5F	; 95
      e2:	0f 45       	sbci	r16, 0x5F	; 95
      e4:	0f 45       	sbci	r16, 0x5F	; 95
      e6:	b4 43       	sbci	r27, 0x34	; 52
      e8:	ae 43       	sbci	r26, 0x3E	; 62
      ea:	0f 45       	sbci	r16, 0x5F	; 95
      ec:	0f 45       	sbci	r16, 0x5F	; 95
      ee:	05 45       	sbci	r16, 0x55	; 85
      f0:	0f 45       	sbci	r16, 0x5F	; 95
      f2:	de 43       	sbci	r29, 0x3E	; 62
      f4:	0f 45       	sbci	r16, 0x5F	; 95
      f6:	0f 45       	sbci	r16, 0x5F	; 95
      f8:	b4 43       	sbci	r27, 0x34	; 52
      fa:	31 45       	sbci	r19, 0x51	; 81
      fc:	18 46       	sbci	r17, 0x68	; 104
      fe:	27 45       	sbci	r18, 0x57	; 87
     100:	85 45       	sbci	r24, 0x55	; 85
     102:	6c 45       	sbci	r22, 0x5C	; 92
     104:	18 46       	sbci	r17, 0x68	; 104
     106:	18 46       	sbci	r17, 0x68	; 104
     108:	18 46       	sbci	r17, 0x68	; 104
     10a:	18 46       	sbci	r17, 0x68	; 104
     10c:	18 46       	sbci	r17, 0x68	; 104
     10e:	18 46       	sbci	r17, 0x68	; 104
     110:	18 46       	sbci	r17, 0x68	; 104
     112:	18 46       	sbci	r17, 0x68	; 104
     114:	3b 45       	sbci	r19, 0x5B	; 91
     116:	4f 45       	sbci	r20, 0x5F	; 95
     118:	18 46       	sbci	r17, 0x68	; 104
     11a:	18 46       	sbci	r17, 0x68	; 104
     11c:	18 46       	sbci	r17, 0x68	; 104
     11e:	18 46       	sbci	r17, 0x68	; 104
     120:	23 45       	sbci	r18, 0x53	; 83
     122:	18 46       	sbci	r17, 0x68	; 104
     124:	18 46       	sbci	r17, 0x68	; 104
     126:	4f 45       	sbci	r20, 0x5F	; 95
     128:	18 46       	sbci	r17, 0x68	; 104
     12a:	18 46       	sbci	r17, 0x68	; 104
     12c:	18 46       	sbci	r17, 0x68	; 104
     12e:	18 46       	sbci	r17, 0x68	; 104
     130:	18 46       	sbci	r17, 0x68	; 104
     132:	18 46       	sbci	r17, 0x68	; 104
     134:	18 46       	sbci	r17, 0x68	; 104
     136:	18 46       	sbci	r17, 0x68	; 104
     138:	18 46       	sbci	r17, 0x68	; 104
     13a:	31 45       	sbci	r19, 0x51	; 81
     13c:	b3 45       	sbci	r27, 0x53	; 83
     13e:	27 45       	sbci	r18, 0x57	; 87
     140:	85 45       	sbci	r24, 0x55	; 85
     142:	6c 45       	sbci	r22, 0x5C	; 92
     144:	18 46       	sbci	r17, 0x68	; 104
     146:	18 46       	sbci	r17, 0x68	; 104
     148:	18 46       	sbci	r17, 0x68	; 104
     14a:	18 46       	sbci	r17, 0x68	; 104
     14c:	18 46       	sbci	r17, 0x68	; 104
     14e:	18 46       	sbci	r17, 0x68	; 104
     150:	18 46       	sbci	r17, 0x68	; 104
     152:	18 46       	sbci	r17, 0x68	; 104
     154:	3b 45       	sbci	r19, 0x5B	; 91
     156:	4f 45       	sbci	r20, 0x5F	; 95
     158:	18 46       	sbci	r17, 0x68	; 104
     15a:	18 46       	sbci	r17, 0x68	; 104
     15c:	b3 45       	sbci	r27, 0x53	; 83
     15e:	18 46       	sbci	r17, 0x68	; 104
     160:	23 45       	sbci	r18, 0x53	; 83
     162:	18 46       	sbci	r17, 0x68	; 104
     164:	18 46       	sbci	r17, 0x68	; 104
     166:	4f 45       	sbci	r20, 0x5F	; 95
     168:	4a 6e       	ori	r20, 0xEA	; 234
     16a:	54 6e       	ori	r21, 0xE4	; 228
     16c:	5c 6e       	ori	r21, 0xEC	; 236
     16e:	5e 6e       	ori	r21, 0xEE	; 238
     170:	60 6e       	ori	r22, 0xE0	; 224
     172:	62 6e       	ori	r22, 0xE2	; 226
     174:	64 6e       	ori	r22, 0xE4	; 228
     176:	66 6e       	ori	r22, 0xE6	; 230
     178:	69 6e       	ori	r22, 0xE9	; 233
     17a:	06 8f       	std	Z+30, r16	; 0x1e
     17c:	2c 8f       	std	Y+28, r18	; 0x1c
     17e:	53 8f       	std	Z+27, r21	; 0x1b
     180:	6d 8f       	std	Y+29, r22	; 0x1d
     182:	76 8f       	std	Z+30, r23	; 0x1e
     184:	96 8f       	std	Z+30, r25	; 0x1e
     186:	af 8f       	std	Y+31, r26	; 0x1f
     188:	be 8f       	std	Y+30, r27	; 0x1e
     18a:	09 90       	ld	r0, Y+
     18c:	db 8f       	std	Y+27, r29	; 0x1b
     18e:	f7 91       	elpm	r31, Z+	; undefined
     190:	ff 91       	pop	r31
     192:	04 92       	xch	Z, r0
     194:	28 92       	.word	0x9228	; ????
     196:	32 92       	st	-Z, r3
     198:	7c 92       	st	X, r7
     19a:	47 92       	lat	Z, r4
     19c:	47 92       	lat	Z, r4
     19e:	3f 92       	push	r3
     1a0:	92 b3       	in	r25, 0x12	; 18
     1a2:	51 b3       	in	r21, 0x11	; 17
     1a4:	51 b3       	in	r21, 0x11	; 17
     1a6:	51 b3       	in	r21, 0x11	; 17
     1a8:	51 b3       	in	r21, 0x11	; 17
     1aa:	15 b3       	in	r17, 0x15	; 21
     1ac:	1c b3       	in	r17, 0x1c	; 28
     1ae:	23 b3       	in	r18, 0x13	; 19
     1b0:	33 b3       	in	r19, 0x13	; 19
     1b2:	41 b3       	in	r20, 0x11	; 17
     1b4:	3a b3       	in	r19, 0x1a	; 26
     1b6:	de ba       	out	0x1e, r13	; 30
     1b8:	e8 bb       	out	0x18, r30	; 24
     1ba:	3c bc       	out	0x2c, r3	; 44
     1bc:	c0 bc       	out	0x20, r12	; 32
     1be:	f3 bc       	out	0x23, r15	; 35
     1c0:	6f bd       	out	0x2f, r22	; 47
     1c2:	49 bf       	out	0x39, r20	; 57
     1c4:	1f c0       	rjmp	.+62     	; 0x204 <__c.2332+0x30>
     1c6:	5e c0       	rjmp	.+188    	; 0x284 <__c.2332+0xb0>
     1c8:	0e c1       	rjmp	.+540    	; 0x3e6 <__c.3678+0x13>
     1ca:	4f c1       	rjmp	.+670    	; 0x46a <__c.3685+0x8>
     1cc:	83 bb       	out	0x13, r24	; 19
     1ce:	9f bb       	out	0x1f, r25	; 31

000001d0 <__trampolines_end>:
     1d0:	6e 61       	ori	r22, 0x1E	; 30
     1d2:	6e 00       	.word	0x006e	; ????

000001d4 <__c.2332>:
     1d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     204:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     214:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     224:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     234:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     244:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     254:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     264:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     274:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     284:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     294:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d2 <__c.3690>:
     2d2:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e2:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f0 <__c.3685>:
     2f0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     300:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

0000030d <__c.3716>:
     30d:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     31d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     32d:	25 75 29 0a 00                                      %u)..

00000332 <__c.3707>:
     332:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     342:	61 69 6c 65 64 21 0a 00                             ailed!..

0000034a <__c.3701>:
     34a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     35a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000365 <__c.3686>:
     365:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     375:	35 75 0a 00                                         5u..

00000379 <__c.3684>:
     379:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     389:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000397 <__c.3682>:
     397:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3a7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003b5 <__c.3680>:
     3b5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3c5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d3 <__c.3678>:
     3d3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f1 <__c.3676>:
     3f1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     401:	75 0a 00                                            u..

00000404 <__c.3674>:
     404:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     414:	75 0a 00                                            u..

00000417 <__c.3672>:
     417:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000424 <__c.3670>:
     424:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     434:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000441 <__c.3702>:
     441:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000451 <__c.3695>:
     451:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000462 <__c.3685>:
     462:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     472:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

0000047e <__c.3683>:
     47e:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     48e:	20 66 61 69 6c 65 64 0a 00                           failed..

00000497 <__c.3672>:
     497:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4a7:	65 72 72 6f 72 0a 00                                error..

000004ae <__c.3670>:
     4ae:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4be:	6f 72 0a 00                                         or..

000004c2 <__c.3662>:
     4c2:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d2:	72 72 6f 72 0a 00                                   rror..

000004d8 <__c.3820>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3654>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3733>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3731>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3729>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3727>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3725>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3723>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3703>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3701>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3692>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3687>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3667>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3942>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3940>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3938>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3936>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3934>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3927>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3925>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3923>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3921>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3919>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3910>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3908>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3904>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3902>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3873>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3871>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3869>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3867>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3865>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3863>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3842>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3717>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3685>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3714>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3712>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3710>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3707>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3705>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3703>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3690>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3662>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3734>:
     863:	0a 00                                               ..

00000865 <__c.3732>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3730>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3724>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3722>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3720>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3718>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3716>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3714>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3712>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3710>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3708>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3706>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3704>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3702>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3700>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3664>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3702>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3700>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3696>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3683>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3681>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3679>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3677>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3675>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3667>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3657>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3655>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.4014>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.3987>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.3985>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3881>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3879>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3877>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3875>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3873>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3871>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3869>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3867>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3865>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3863>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3861>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3740>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3669>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3662>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3902>:
     c90:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000c9f <__c.3892>:
     c9f:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb0 <__c.3884>:
     cb0:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cbf <__c.3874>:
     cbf:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ccc <__c.3872>:
     ccc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cdc <__c.3864>:
     cdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ce7 <__c.3860>:
     ce7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d07:	68 0a 00                                            h..

00000d0a <__c.3857>:
     d0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d1a <__c.3852>:
     d1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d2a:	5b 25 73 5d 0a 00                                   [%s]..

00000d30 <__c.3850>:
     d30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d3e <__c.3848>:
     d3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d5f <__c.3835>:
     d5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d79 <__c.3830>:
     d79:	25 73 0a 00                                         %s..

00000d7d <__c.3828>:
     d7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d8d:	0a 00                                               ..

00000d8f <__c.3816>:
     d8f:	0d 00                                               ..

00000d91 <__c.3814>:
     d91:	4d 6f 72 65 2e 2e 00                                More...

00000d98 <__c.3804>:
     d98:	0a 00                                               ..

00000d9a <__c.3799>:
     d9a:	0a 00                                               ..

00000d9c <__c.3791>:
     d9c:	20 3a 20 00                                          : .

00000da0 <__c.3786>:
     da0:	20 20 20 00                                            .

00000da4 <__c.3781>:
     da4:	25 30 32 78 20 00                                   %02x .

00000daa <__c.3779>:
     daa:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db3 <__c.3777>:
     db3:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc2 <__c.3765>:
     dc2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd2:	2e 0a 00                                            ...

00000dd5 <__c.3761>:
     dd5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000de4 <__c.3758>:
     de4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df1 <__c.3756>:
     df1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dfe <__c.3754>:
     dfe:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e0e <__c.3752>:
     e0e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e1b <__c.3750>:
     e1b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e2b <__c.3748>:
     e2b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e37 <__c.3737>:
     e37:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e42 <__c.3735>:
     e42:	0a 00                                               ..

00000e44 <__c.3730>:
     e44:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e54 <__c.3719>:
     e54:	25 73 0a 00                                         %s..

00000e58 <__c.3688>:
     e58:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e68:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e78:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e88:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e98:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     ea8:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     eb8:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ec8:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ed8:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     ee8:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     ef8:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f08:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f18:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f28:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f38:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f48:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f58:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f68:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f78:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f88:	66 69 6c 65 0a 0a 00                                file...

00000f8f <__c.3686>:
     f8f:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f9b <__c.3877>:
     f9b:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000fa9 <__c.3871>:
     fa9:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fb6 <__c.3864>:
     fb6:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fc4 <__c.3855>:
     fc4:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd1 <__c.3846>:
     fd1:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe2 <__c.3832>:
     fe2:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff2:	5d 0a 00                                            ]..

00000ff5 <__c.3814>:
     ff5:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    1005:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001012 <__c.4363>:
    1012:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1022:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1032:	64 28 25 64 29 5d 0a 00                             d(%d)]..

0000103a <__c.4358>:
    103a:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    104a:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001054 <__c.4348>:
    1054:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1064:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1074:	28 25 64 29 5d 0a 00                                (%d)]..

0000107b <__c.4344>:
    107b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    108b:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    109b:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010a8 <__c.4341>:
    10a8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10b8:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c1 <__c.4325>:
    10c1:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010cc <__c.4323>:
    10cc:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010d7 <__c.4321>:
    10d7:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e2 <__c.4317>:
    10e2:	20 20 20 20 20 00                                        .

000010e8 <__c.4315>:
    10e8:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f1 <__c.4273>:
    10f1:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1101:	3e 0a 00                                            >..

00001104 <__c.4269>:
    1104:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1114:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000111e <__c.4265>:
    111e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    112e:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001139 <__c.4262>:
    1139:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1149:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001154 <__c.4257>:
    1154:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1164:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1174:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000117c <__c.4253>:
    117c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    118c:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001196 <__c.4236>:
    1196:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11a6:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11b6:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011c4 <__c.4231>:
    11c4:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011ce <__c.4229>:
    11ce:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011d9 <__c.4224>:
    11d9:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011e5 <__c.4216>:
    11e5:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11f5:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1205:	5d 0a 00                                            ]..

00001208 <__c.4210>:
    1208:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1218:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001223 <__c.4208>:
    1223:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1233:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1243:	72 61 6e 67 65 0a 00                                range..

0000124a <__c.4203>:
    124a:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    125a:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001265 <__c.4201>:
    1265:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1275:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1285:	61 6e 67 65 0a 00                                   ange..

0000128b <__c.4196>:
    128b:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    129b:	5d 0a 00                                            ]..

0000129e <__c.4191>:
    129e:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012af <__c.4374>:
    12af:	0a 00                                               ..

000012b1 <__c.4366>:
    12b1:	2e 00                                               ..

000012b3 <__c.4364>:
    12b3:	25 63 00                                            %c.

000012b6 <__c.4362>:
    12b6:	20 7c 20 00                                          | .

000012ba <__c.4357>:
    12ba:	20 25 30 32 58 00                                    %02X.

000012c0 <__c.4355>:
    12c0:	0a 00                                               ..

000012c2 <__c.4353>:
    12c2:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012ce <__c.4342>:
    12ce:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012df <__c.4337>:
    12df:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12ef:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12ff:	32 58 48 5d 0a 00                                   2XH]..

00001305 <__c.4335>:
    1305:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1315:	0a 00                                               ..

00001317 <__c.4333>:
    1317:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001328 <__c.4328>:
    1328:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001334 <__c.4326>:
    1334:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001344 <__c.4324>:
    1344:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1354:	52 5d 0a 00                                         R]..

00001358 <__c.4322>:
    1358:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1368:	0a 00                                               ..

0000136a <__c.4320>:
    136a:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000137b <__c.4318>:
    137b:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001382 <__c.4313>:
    1382:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000138e <__c.4311>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    139e:	52 5d 0a 00                                         R]..

000013a2 <__c.4309>:
    13a2:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b3 <__c.4307>:
    13b3:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c3:	0a 00                                               ..

000013c5 <__c.4305>:
    13c5:	0a 00                                               ..

000013c7 <__c.4303>:
    13c7:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ce <__c.4298>:
    13ce:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13de:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013ea <__c.4296>:
    13ea:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f1 <__c.4294>:
    13f1:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013fe <__c.4292>:
    13fe:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000140a <__c.4290>:
    140a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001411 <__c.4288>:
    1411:	5b 53 50 44 5d 0a 00                                [SPD]..

00001418 <__c.4286>:
    1418:	5b 53 50 45 5d 0a 00                                [SPE]..

0000141f <__c.4284>:
    141f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    142f:	5d 0a 00                                            ]..

00001432 <__c.4282>:
    1432:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1442:	5d 0a 00                                            ]..

00001445 <__c.4277>:
    1445:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1455:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145f <__c.4275>:
    145f:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146f:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001480 <__c.4248>:
    1480:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001491 <__c.4246>:
    1491:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000149e <__c.4244>:
    149e:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a5 <__c.4242>:
    14a5:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b0 <__c.4240>:
    14b0:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b7 <__c.4235>:
    14b7:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c7:	0a 00                                               ..

000014c9 <__c.4233>:
    14c9:	44 6f 6e 65 0a 00                                   Done..

000014cf <__c.4229>:
    14cf:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014db <__c.4227>:
    14db:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14eb:	20 65 78 69 74 0a 00                                 exit..

000014f2 <__c.4225>:
    14f2:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1502:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1512:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000151d <__c.4223>:
    151d:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    152d:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001537 <__c.4177>:
    1537:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1547:	6f 74 65 63 74 65 64 0a 00                          otected..

00001550 <__c.4175>:
    1550:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1560:	0a 00                                               ..

00001562 <__c.4419>:
    1562:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1572:	30 32 58 48 5d 0a 00                                02XH]..

00001579 <__c.4417>:
    1579:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4415>:
    1590:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4413>:
    15a7:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4411>:
    15be:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15ce:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015d7 <__c.4409>:
    15d7:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15e7:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015f0 <__c.4407>:
    15f0:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1600:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001609 <__c.4405>:
    1609:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1619:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001622 <__c.4403>:
    1622:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1632:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000163a <__c.4401>:
    163a:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    164a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001652 <__c.4399>:
    1652:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1662:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000166a <__c.4397>:
    166a:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    167a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001682 <__c.4394>:
    1682:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000168f <__c.4386>:
    168f:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    169f:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16af:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16bf:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16cf:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16df:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    16ef:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    16ff:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    170f:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    171f:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    172f:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    173f:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    174f:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    175f:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    176f:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    177f:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    178f:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    179f:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17af:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17bf:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17cf:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17df:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    17ef:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    17ff:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001810 <__c.4384>:
    1810:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000181b <__c.4487>:
    181b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    182b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    183b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    184b:	48 5d 0a 00                                         H]..

0000184f <__c.4485>:
    184f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    185f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    186f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    187f:	48 5d 0a 00                                         H]..

00001883 <__c.4483>:
    1883:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1893:	74 5d 0a 00                                         t]..

00001897 <__c.4481>:
    1897:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018a6 <__c.4479>:
    18a6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18b6:	74 65 5d 0a 00                                      te]..

000018bb <__c.4477>:
    18bb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18cb:	61 74 65 5d 0a 00                                   ate]..

000018d1 <__c.4475>:
    18d1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18e1:	61 74 65 5d 0a 00                                   ate]..

000018e7 <__c.4470>:
    18e7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    18f7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1907:	5d 0a 00                                            ]..

0000190a <__c.4463>:
    190a:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    191a:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00001926 <__c.4456>:
    1926:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001935 <__c.4454>:
    1935:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1945:	5d 0a 00                                            ]..

00001948 <__c.4447>:
    1948:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001954 <__c.4433>:
    1954:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1964:	5d 0a 00                                            ]..

00001967 <__c.4431>:
    1967:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1977:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001981 <__c.4424>:
    1981:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1991:	48 5d 0a 00                                         H]..

00001995 <__c.4422>:
    1995:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19a5:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019b5 <__c.4417>:
    19b5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19c5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19d5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19e5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000019f1 <__c.4414>:
    19f1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a01:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a11 <__c.4412>:
    1a11:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a21:	29 5d 0a 00                                         )]..

00001a25 <__c.4410>:
    1a25:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a35:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a45:	28 25 64 29 5d 0a 00                                (%d)]..

00001a4c <__c.4408>:
    1a4c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a5c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a6a <__c.4406>:
    1a6a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a7a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a87 <__c.4403>:
    1a87:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1a97:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1aa7:	44 4f 5d 0a 00                                      DO]..

00001aac <__c.4400>:
    1aac:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1abc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001ac5 <__c.4398>:
    1ac5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ad5:	5d 0a 00                                            ]..

00001ad8 <__c.4389>:
    1ad8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ae8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1af8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b08:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b10 <__c.4386>:
    1b10:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b20:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b30 <__c.4384>:
    1b30:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b40:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b51 <__c.4382>:
    1b51:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b61:	61 74 75 73 5d 0a 00                                atus]..

00001b68 <__c.4380>:
    1b68:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b78:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b81 <__c.4378>:
    1b81:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1b91:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001b9c <__c.4376>:
    1b9c:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bac:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bbb <__c.4374>:
    1bbb:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1bcb:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bd9 <__c.4372>:
    1bd9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001bea <__c.4370>:
    1bea:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1bfa:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c06 <__c.4368>:
    1c06:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c16:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c23 <__c.4366>:
    1c23:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c33:	2d 4f 50 5d 0a 00                                   -OP]..

00001c39 <__c.4364>:
    1c39:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c49:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c5a <__c.4362>:
    1c5a:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c6a:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c7a:	44 4f 5d 0a 00                                      DO]..

00001c7f <__c.4360>:
    1c7f:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1c8f:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001c99 <__c.4358>:
    1c99:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1ca9:	2d 4f 50 5d 0a 00                                   -OP]..

00001caf <__c.4356>:
    1caf:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cbd <__c.4354>:
    1cbd:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ccd:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cd9 <__c.4352>:
    1cd9:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1ce9:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001cf6 <__c.4350>:
    1cf6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d06:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d0f <__c.4347>:
    1d0f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1f:	20 52 65 61 64 5d 0a 00                              Read]..

00001d27 <__c.4345>:
    1d27:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d37:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d40 <__c.4342>:
    1d40:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d50:	25 64 29 5d 0a 00                                   %d)]..

00001d56 <__c.4340>:
    1d56:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d66:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d6f <__c.4338>:
    1d6f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d7f:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1d8f:	52 4f 52 5d 0a 00                                   ROR]..

00001d95 <__c.4329>:
    1d95:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1da5:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001daf <__c.4324>:
    1daf:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dbf:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dc7 <__c.4319>:
    1dc7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dd7:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001de6 <__c.4317>:
    1de6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1df6:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e03 <__c.4315>:
    1e03:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e13:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e23:	5d 0a 00                                            ]..

00001e26 <__c.4313>:
    1e26:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e37 <__c.4305>:
    1e37:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e47:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e52 <__c.4303>:
    1e52:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e62:	73 5d 0a 00                                         s]..

00001e66 <__c.4293>:
    1e66:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e71 <__c.4291>:
    1e71:	25 73 3a 0a 00                                      %s:..

00001e76 <__c.4266>:
    1e76:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e86:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1e96:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001ea1 <__c.4264>:
    1ea1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1eb1:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ec1:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ec9 <__c.4260>:
    1ec9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ed9:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1ee9:	58 48 29 5d 0a 00                                   XH)]..

00001eef <__c.4258>:
    1eef:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1eff:	72 5d 0a 00                                         r]..

00001f03 <__c.4254>:
    1f03:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4252>:
    1f16:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f26:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f36:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f3f <__c.4240>:
    1f3f:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f4f:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f5f:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f67 <__c.4238>:
    1f67:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f77:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f87:	53 48 5d 0a 00                                      SH]..

00001f8c <__c.4233>:
    1f8c:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1f9c:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fa5 <__c.4231>:
    1fa5:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fb5:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fbd <__c.4229>:
    1fbd:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcd:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001fdb <__c.4227>:
    1fdb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1feb:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    1ffb:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002003 <__c.4210>:
    2003:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2013:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000201f <__c.4194>:
    201f:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    202f:	5d 0a 00                                            ]..

00002032 <__c.4169>:
    2032:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2042:	0a 00                                               ..

00002044 <__c.4167>:
    2044:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002051 <__c.4324>:
    2051:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2061:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2071:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000207a <__c.4321>:
    207a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    208a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    209a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020a5 <__c.4318>:
    20a5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20b5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20c5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020ce <__c.4313>:
    20ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20de:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000020ee <__c.4310>:
    20ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    20fe:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000210a <__c.4307>:
    210a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    211a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    212a:	0a 00                                               ..

0000212c <__c.4304>:
    212c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    213c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000214b <__c.4301>:
    214b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    215b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000216c <__c.4298>:
    216c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    217c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000218c <__c.4294>:
    218c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    219c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21ac:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21bc:	0a 00                                               ..

000021be <__c.4289>:
    21be:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021ce <__c.4286>:
    21ce:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21de:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000021ed <__c.4284>:
    21ed:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    21fd:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    220d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002218 <__c.4282>:
    2218:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2228:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002238 <__c.4280>:
    2238:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2248:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2258:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002261 <__c.4278>:
    2261:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2271:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000227d <__c.4276>:
    227d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    228d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    229d:	0a 00                                               ..

0000229f <__c.4274>:
    229f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022af <__c.4271>:
    22af:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22bf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022d0 <__c.4269>:
    22d0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22e0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    22f0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000022f9 <__c.4267>:
    22f9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2309:	36 5d 0a 00                                         6]..

0000230d <__c.4264>:
    230d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    231d:	35 5d 0a 00                                         5]..

00002321 <__c.4261>:
    2321:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2331:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002341 <__c.4258>:
    2341:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2351:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2361:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002370 <__c.4256>:
    2370:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2380:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002391 <__c.4254>:
    2391:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23a1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023b2 <__c.4252>:
    23b2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23c2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23d2:	0a 00                                               ..

000023d4 <__c.4250>:
    23d4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23e4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    23f4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2404:	0a 00                                               ..

00002406 <__c.4238>:
    2406:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2416:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2426:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2436:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2446:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002457 <__c.4236>:
    2457:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2467:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2477:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2487:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2497:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024a7 <__c.4234>:
    24a7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24b7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24c7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24d7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24e7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024f7 <__c.4232>:
    24f7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2507:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2517:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2527:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2537:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002547 <__c.4227>:
    2547:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2557:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2567:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2577:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2587:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2597:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25a7:	58 48 5d 0a 00                                      XH]..

000025ac <__c.4225>:
    25ac:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25bc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25cc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25dc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    25ec:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    25fc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    260c:	30 32 58 48 5d 0a 00                                02XH]..

00002613 <__c.4223>:
    2613:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2623:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2633:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2643:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2653:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2663:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2673:	30 32 58 48 5d 0a 00                                02XH]..

0000267a <__c.4221>:
    267a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    268a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    269a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26aa:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26ba:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26ca:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26da:	30 32 58 48 5d 0a 00                                02XH]..

000026e1 <__c.4214>:
    26e1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

000026f0 <__c.4210>:
    26f0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2700:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000270a <__c.4208>:
    270a:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

0000271a <__c.4201>:
    271a:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002727 <__c.4199>:
    2727:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2737:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002741 <__c.4192>:
    2741:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2751:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002760 <__c.4185>:
    2760:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2770:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000277a <__c.4178>:
    277a:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    278a:	6e 65 5d 0a 00                                      ne]..

0000278f <__c.4174>:
    278f:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000279f <__c.4133>:
    279f:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27af:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27bf:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027ca <__c.4163>:
    27ca:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27da:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    27ea:	25 30 34 58 48 5d 0a 00                             %04XH]..

000027f2 <__c.4140>:
    27f2:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2802:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000280b <__c.4126>:
    280b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    281b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002825 <__c.4124>:
    2825:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2835:	75 73 5d 0a 00                                      us]..

0000283a <__c.4118>:
    283a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    284a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002854 <__c.4116>:
    2854:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2864:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002872 <__c.4110>:
    2872:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2882:	74 61 74 75 73 5d 0a 00                             tatus]..

0000288a <__c.4132>:
    288a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    289a:	74 65 73 0a 00                                      tes..

0000289f <__c.4130>:
    289f:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28af:	0a 00                                               ..

000028b1 <__c.4128>:
    28b1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c1:	0a 00                                               ..

000028c3 <__c.4123>:
    28c3:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28d3:	6e 65 64 0a 00                                      ned..

000028d8 <__c.4114>:
    28d8:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28e8:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000028f2 <__c.4112>:
    28f2:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2902:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000290e <__c.4107>:
    290e:	25 30 38 6c 64 0d 00                                %08ld..

00002915 <__c.4101>:
    2915:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2925:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002936 <__c.4095>:
    2936:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002944 <__c.4093>:
    2944:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2954:	69 74 65 0a 00                                      ite..

00002959 <__c.4087>:
    2959:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002965 <__c.4085>:
    2965:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2975:	6f 3a 25 73 0a 00                                   o:%s..

0000297b <__c.4083>:
    297b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    298b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    299b:	74 00                                               t.

0000299d <__c.4763>:
    299d:	0a 00                                               ..

0000299f <__c.4758>:
    299f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029a7 <__c.4756>:
    29a7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29b7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29c7:	0a 00                                               ..

000029c9 <__c.4754>:
    29c9:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029d1 <__c.4752>:
    29d1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29e1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29f1:	0a 00                                               ..

000029f3 <__c.4739>:
    29f3:	0a 00                                               ..

000029f5 <__c.4737>:
    29f5:	0a 00                                               ..

000029f7 <__c.4735>:
    29f7:	45 4e 44 0a 00                                      END..

000029fc <__c.4730>:
    29fc:	0a 00                                               ..

000029fe <__c.4728>:
    29fe:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a06 <__c.4726>:
    2a06:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a10 <__c.4724>:
    2a10:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a19 <__c.4722>:
    2a19:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a23 <__c.4720>:
    2a23:	48 45 41 44 53 00                                   HEADS.

00002a29 <__c.4718>:
    2a29:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a39:	4b 00                                               K.

00002a3b <__c.4716>:
    2a3b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a4c <__c.4714>:
    2a4c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a58 <__c.4712>:
    2a58:	49 44 00                                            ID.

00002a5b <__c.4710>:
    2a5b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a65 <__c.4708>:
    2a65:	46 49 4c 45 00                                      FILE.

00002a6a <__c.4706>:
    2a6a:	50 50 52 00                                         PPR.

00002a6e <__c.4704>:
    2a6e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a76 <__c.4702>:
    2a76:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002a80 <__c.4700>:
    2a80:	41 4d 49 47 4f 0a 00                                AMIGO..

00002a87 <__c.4698>:
    2a87:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002a92 <__c.4696>:
    2a92:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aa3 <__c.4694>:
    2aa3:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002aae <__c.4692>:
    2aae:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002ab7 <__c.4690>:
    2ab7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002ac4 <__c.4688>:
    2ac4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002ace <__c.4686>:
    2ace:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2ade:	53 00                                               S.

00002ae0 <__c.4684>:
    2ae0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002aee <__c.4682>:
    2aee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2afe:	56 45 00                                            VE.

00002b01 <__c.4680>:
    2b01:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b0d <__c.4678>:
    2b0d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b1d:	4d 45 00                                            ME.

00002b20 <__c.4676>:
    2b20:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b30:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b38 <__c.4674>:
    2b38:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b43 <__c.4672>:
    2b43:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b4e <__c.4670>:
    2b4e:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002b5e <__c.4668>:
    2b5e:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002b6e <__c.4666>:
    2b6e:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002b7c <__c.4664>:
    2b7c:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002b86 <__c.4662>:
    2b86:	20 20 55 4e 49 54 0a 00                               UNIT..

00002b8e <__c.4660>:
    2b8e:	54 59 50 45 00                                      TYPE.

00002b93 <__c.4658>:
    2b93:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002ba1 <__c.4656>:
    2ba1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bb1 <__c.4654>:
    2bb1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002bbf <__c.4652>:
    2bbf:	49 44 00                                            ID.

00002bc2 <__c.4650>:
    2bc2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002bcc <__c.4648>:
    2bcc:	46 49 4c 45 00                                      FILE.

00002bd1 <__c.4646>:
    2bd1:	50 50 52 00                                         PPR.

00002bd5 <__c.4644>:
    2bd5:	41 44 44 52 45 53 53 00                             ADDRESS.

00002bdd <__c.4642>:
    2bdd:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002be7 <__c.4640>:
    2be7:	53 53 38 30 0a 00                                   SS80..

00002bed <__c.4637>:
    2bed:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2bfd:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c0d <__c.4629>:
    2c0d:	0a 00                                               ..

00002c0f <__c.4624>:
    2c0f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c1f:	25 30 32 58 48 0a 00                                %02XH..

00002c26 <__c.4622>:
    2c26:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c36:	25 30 32 58 48 0a 00                                %02XH..

00002c3d <__c.4620>:
    2c3d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2c4d:	25 30 32 58 48 0a 00                                %02XH..

00002c54 <__c.4618>:
    2c54:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2c64:	25 30 32 58 48 0a 00                                %02XH..

00002c6b <__c.4616>:
    2c6b:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2c7b:	25 30 32 58 48 0a 00                                %02XH..

00002c82 <__c.4614>:
    2c82:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2c92:	25 30 32 58 48 0a 00                                %02XH..

00002c99 <__c.4612>:
    2c99:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2ca9:	25 30 32 58 48 0a 00                                %02XH..

00002cb0 <__c.4610>:
    2cb0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2cc0:	25 30 32 58 48 0a 00                                %02XH..

00002cc7 <__c.4608>:
    2cc7:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2cd7:	25 30 32 58 48 0a 00                                %02XH..

00002cde <__c.4605>:
    2cde:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2cee:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2cfe:	0a 00                                               ..

00002d00 <__c.4599>:
    2d00:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d10:	0a 00                                               ..

00002d12 <__c.4588>:
    2d12:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d22:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d2b <__c.4577>:
    2d2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2d3b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2d4b:	2a 2a 2a 2a 2a 0a 00                                *****..

00002d52 <__c.4575>:
    2d52:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2d62:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002d6f <__c.4573>:
    2d6f:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2d7f:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2d8f:	0a 00                                               ..

00002d91 <__c.4569>:
    2d91:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2da1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2db1:	0a 00                                               ..

00002db3 <__c.4566>:
    2db3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2dc3:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2dd3:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002de3 <__c.4563>:
    2de3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2df3:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e03:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e12 <__c.4560>:
    2e12:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e22:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e32:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e42 <__c.4558>:
    2e42:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2e52:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002e5b <__c.4555>:
    2e5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e6b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2e7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002e89 <__c.4552>:
    2e89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2e99:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2ea9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002eb7 <__c.4549>:
    2eb7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ec7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2ed7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002ee3 <__c.4546>:
    2ee3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ef3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f03:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f13:	0a 00                                               ..

00002f15 <__c.4543>:
    2f15:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f25:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f35:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f43 <__c.4540>:
    2f43:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f53:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f71 <__c.4537>:
    2f71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f81:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2f91:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002f9e <__c.4534>:
    2f9e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fae:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2fbe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002fcf <__c.4531>:
    2fcf:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fdf:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2fef:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002ff9 <__c.4527>:
    2ff9:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3009:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3019:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003021 <__c.4525>:
    3021:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3031:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

0000303a <__c.4521>:
    303a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    304a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00003058 <__c.4519>:
    3058:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00003065 <__c.4498>:
    3065:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    3075:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00003084 <__c.4496>:
    3084:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    3094:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

000030a3 <__c.4494>:
    30a3:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    30b3:	20 76 61 6c 75 65 0a 00                              value..

000030bb <__c.4471>:
    30bb:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    30cb:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    30db:	0a 00                                               ..

000030dd <__c.4464>:
    30dd:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    30ed:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    30fd:	6c 6c 0a 00                                         ll..

00003101 <__c.4457>:
    3101:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3111:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    3121:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000312c <__c.4455>:
    312c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    313c:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    314c:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    315c:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00003164 <__c.4453>:
    3164:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3174:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    3184:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    3194:	3a 25 73 0a 00                                      :%s..

00003199 <__c.4451>:
    3199:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    31b9:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    31c9:	55 4c 4c 0a 00                                      ULL..

000031ce <__c.4449>:
    31ce:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31de:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    31ee:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    31fe:	66 20 72 61 6e 67 65 0a 00                          f range..

00003207 <__c.4447>:
    3207:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3217:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    3227:	6e 67 65 0a 00                                      nge..

0000322c <__c.4743>:
    322c:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    323c:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

0000324c <__c.4741>:
    324c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    325c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000326c <__c.4739>:
    326c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    327c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    328c:	30 0a 00                                            0..

0000328f <__c.4737>:
    328f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    329f:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32af:	70 74 79 0a 00                                      pty..

000032b4 <__c.4735>:
    32b4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32d4:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032dd <__c.4722>:
    32dd:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32ed:	20 25 31 30 73 0a 00                                 %10s..

000032f4 <__c.4720>:
    32f4:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3304:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3314:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000331d <__c.4718>:
    331d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    332d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    333d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    334d:	74 65 72 73 0a 00                                   ters..

00003353 <__c.4716>:
    3353:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3363:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3373:	65 6d 70 74 79 0a 00                                empty..

0000337a <__c.4714>:
    337a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    339a:	65 6d 70 74 79 0a 00                                empty..

000033a1 <__c.4712>:
    33a1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33b1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33c1:	20 65 6d 70 74 79 0a 00                              empty..

000033c9 <__c.4703>:
    33c9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033d8 <__c.4701>:
    33d8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33e8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33f8:	20 66 6f 75 6e 64 0a 00                              found..

00003400 <__c.4699>:
    3400:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3410:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000341f <__c.4697>:
    341f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    342f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000343f <__c.4695>:
    343f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    344f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    345f:	70 74 79 0a 00                                      pty..

00003464 <__c.4687>:
    3464:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003471 <__c.4682>:
    3471:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000347e <__c.4680>:
    347e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034ae <__c.4678>:
    34ae:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34be:	73 0a 00                                            s..

000034c1 <__c.4676>:
    34c1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34d1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34e1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034f0 <__c.4674>:
    34f0:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3500:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000350c <__c.4672>:
    350c:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    351c:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003527 <__c.4670>:
    3527:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3537:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003547 <__c.4653>:
    3547:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003554 <__c.4648>:
    3554:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003561 <__c.4646>:
    3561:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3571:	73 0a 00                                            s..

00003574 <__c.4644>:
    3574:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3584:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000358c <__c.4627>:
    358c:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003599 <__c.4624>:
    3599:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a9:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b9:	20 65 72 72 6f 72 0a 00                              error..

000035c1 <__c.4616>:
    35c1:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035ce <__c.4614>:
    35ce:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35de:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35ee:	20 65 72 72 6f 72 0a 00                              error..

000035f6 <__c.4611>:
    35f6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3606:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3616:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3626:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3636:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3646:	30 32 58 48 0a 00                                   02XH..

0000364c <__c.4609>:
    364c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    366c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    367c:	20 25 64 0a 00                                       %d..

00003681 <__c.4605>:
    3681:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003691 <__c.4603>:
    3691:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36a1:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36b1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36c1:	30 78 45 30 31 33 0a 00                             0xE013..

000036c9 <__c.4601>:
    36c9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36d9:	6e 64 3a 25 73 0a 00                                nd:%s..

000036e0 <__c.4599>:
    36e0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36f0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036f8 <__c.4575>:
    36f8:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003705 <__c.4573>:
    3705:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3715:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000371e <__c.4571>:
    371e:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    372e:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003737 <__c.4569>:
    3737:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3747:	20 20 25 34 64 0a 00                                  %4d..

0000374e <__c.4567>:
    374e:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    375e:	20 20 20 25 73 0a 00                                   %s..

00003765 <__c.4565>:
    3765:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3775:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3785:	77 72 69 74 65 0a 00                                write..

0000378c <__c.4563>:
    378c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    379c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37ac:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037bc <__c.4561>:
    37bc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37cc:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37dc:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037eb <__c.4559>:
    37eb:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37fb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    380b:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000381b <__c.4557>:
    381b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    382b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    383b:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000384a <__c.4555>:
    384a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    386a:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003878 <__c.4553>:
    3878:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3888:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3898:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38a8:	79 0a 00                                            y..

000038ab <__c.4539>:
    38ab:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038b8 <__c.4537>:
    38b8:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038c5 <__c.4532>:
    38c5:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038d2 <__c.4515>:
    38d2:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38e2:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38f2:	25 64 0a 00                                         %d..

000038f6 <__c.4498>:
    38f6:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3906:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3916:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3926:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000392f <__c.4484>:
    392f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    393f:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    394f:	62 69 67 0a 00                                      big..

00003954 <__c.4482>:
    3954:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3964:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3974:	63 74 65 72 73 0a 00                                cters..

0000397b <__c.4475>:
    397b:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    398b:	73 0a 00                                            s..

0000398e <__c.4473>:
    398e:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    399e:	73 0a 00                                            s..

000039a1 <__c.4471>:
    39a1:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039ae <__c.4469>:
    39ae:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039ba <__c.4467>:
    39ba:	0a 00                                               ..

000039bc <__c.4464>:
    39bc:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39cc:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    39dc:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000039ec <__c.4462>:
    39ec:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39fc:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a0c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a1c:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a2c:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a38 <__c.4459>:
    3a38:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a48:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a58:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a68:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a78 <__c.4457>:
    3a78:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a88:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a8f <__c.4447>:
    3a8f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a9f:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3aaf:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3abf:	64 0a 00                                            d..

00003ac2 <__c.4445>:
    3ac2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ad2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ae2:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3af2:	64 0a 00                                            d..

00003af5 <__c.4443>:
    3af5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b15:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b25:	69 6c 65 64 0a 00                                   iled..

00003b2b <__c.4441>:
    3b2b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b3b:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b4b:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b5b:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b6a <__c.4428>:
    3b6a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b7a:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b8a:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b9a:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3baa:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003bbb <__c.4425>:
    3bbb:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bcb:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bdb:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003be4 <__c.4423>:
    3be4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c04:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c14:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c1c <__c.4411>:
    3c1c:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c2c:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c3c:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c4c:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c5c:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c69 <__c.4386>:
    3c69:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c79:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c89 <__c.4377>:
    3c89:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c99:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3ca9:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3cb9:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003cc3 <__c.4358>:
    3cc3:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003ccf <__c.4353>:
    3ccf:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cdb <__c.4348>:
    3cdb:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003ce7 <__c.4340>:
    3ce7:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cf3 <__c.4324>:
    3cf3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d03:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d13:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d1f <__c.4322>:
    3d1f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d2f:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d3f:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d4a <__c.4320>:
    3d4a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d5a:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3d6a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d7a:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3d8a:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d95 <__c.4318>:
    3d95:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3da5:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3db5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dc5:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3dd5:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003de0 <__c.4316>:
    3de0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3df0:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e00:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e0e <__c.4314>:
    3e0e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e1e:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e2e:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e3e:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e4f <__c.4312>:
    3e4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e5f:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3e6f:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3e7f:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3e8f:	58 68 0a 00                                         Xh..

00003e93 <__c.4310>:
    3e93:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ea3:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003eb4 <__c.4304>:
    3eb4:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ec4:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3ed4:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003ee0 <__c.4302>:
    3ee0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ef0:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f00:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f0f <__c.4300>:
    3f0f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f1f:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f2f:	25 6c 64 0a 00                                      %ld..

00003f34 <__c.4298>:
    3f34:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f44:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f54:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3f64:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f6d <__c.4296>:
    3f6d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f7d:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f8d:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3f9d:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fa6 <__c.4294>:
    3fa6:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3fb6:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003fbe <__c.4292>:
    3fbe:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fce:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3fde:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3fee:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003ff7 <__c.4290>:
    3ff7:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4007:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004016 <__c.4283>:
    4016:	0a 00                                               ..

00004018 <__c.4281>:
    4018:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4028:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004032 <__c.4279>:
    4032:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4042:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000404e <__c.4277>:
    404e:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    405e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000406b <__c.4275>:
    406b:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    407b:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004088 <__c.4273>:
    4088:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4098:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040a5 <__c.4271>:
    40a5:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    40b5:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000040c1 <__c.4269>:
    40c1:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    40d1:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040dd <__c.4267>:
    40dd:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    40ed:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040f7 <__c.4265>:
    40f7:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4107:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004111 <__c.4263>:
    4111:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4121:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000412d <__c.4261>:
    412d:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    413d:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004149 <__c.4259>:
    4149:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4159:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004166 <__c.4257>:
    4166:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4176:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004183 <__c.4255>:
    4183:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4193:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000419f <__c.4253>:
    419f:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    41af:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041b9 <__c.4251>:
    41b9:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    41c9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d6 <__c.4249>:
    41d6:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    41e6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041f3 <__c.4247>:
    41f3:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4203:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004210 <__c.4245>:
    4210:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4220:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000422d <__c.4243>:
    422d:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    423d:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000424a <__c.4241>:
    424a:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    425a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004267 <__c.4239>:
    4267:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4277:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004284 <__c.4237>:
    4284:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4294:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042a1 <__c.4235>:
    42a1:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    42b1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042bb <__c.4233>:
    42bb:	0a 25 73 0a 00                                      .%s..

000042c0 <__c.4110>:
    42c0:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    42d0:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    42e0:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    42f0:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000042fd <__c.4101>:
    42fd:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    430d:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    431d:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    432d:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004339 <__c.4092>:
    4339:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4349:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000435a <__c.4085>:
    435a:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    436a:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004373 <__c.4079>:
    4373:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4383:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4393:	25 73 5d 0a 00                                      %s]..

00004398 <__c.4067>:
    4398:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43a8:	6f 69 6e 74 65 72 0a 00                             ointer..

000043b0 <__c.4062>:
    43b0:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    43c0:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    43d0:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000043d9 <__c.4050>:
    43d9:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    43e9:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    43f9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4409:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4419:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4429:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4439:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4449:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4459:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    4469:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    4479:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4489:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4499:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    44a9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    44b9:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    44c9:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    44d9:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    44e9:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    44f9:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    4509:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    4519:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    4529:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    4539:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    4549:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    4559:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    4569:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    4579:	6e 67 0a 0a 00                                      ng...

0000457e <__c.4048>:
    457e:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004588 <__c.4510>:
    4588:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4598:	53 4b 0a 00                                         SK..

0000459c <__c.4508>:
    459c:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    45ac:	30 34 78 48 0a 00                                   04xH..

000045b2 <__c.4506>:
    45b2:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    45c2:	64 6f 6e 65 0a 00                                   done..

000045c8 <__c.4504>:
    45c8:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    45d8:	6f 6e 65 0a 00                                      one..

000045dd <__c.4502>:
    45dd:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    45ed:	61 6c 69 7a 65 64 0a 00                             alized..

000045f5 <__c.4500>:
    45f5:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4605:	0a 00                                               ..

00004607 <__c.4498>:
    4607:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4617:	7a 65 64 0a 00                                      zed..

0000461c <__c.4496>:
    461c:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    462c:	69 7a 65 64 0a 00                                   ized..

00004632 <__c.4494>:
    4632:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004643 <__c.4492>:
    4643:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4653:	20 73 74 61 72 74 0a 00                              start..

0000465b <__c.4490>:
    465b:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    466b:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004675 <__c.4488>:
    4675:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4685:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

00004692 <__c.4486>:
    4692:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46a2:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000046b0 <__c.4484>:
    46b0:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    46c0:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

000046cd <__c.4482>:
    46cd:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000046dc <__c.4480>:
    46dc:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    46ec:	0a 00                                               ..

000046ee <__c.4478>:
    46ee:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    46fe:	20 62 75 73 0a 00                                    bus..

00004704 <__c.4476>:
    4704:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4714:	20 62 75 73 0a 00                                    bus..

0000471a <__c.4474>:
    471a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    472a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004734 <__c.4472>:
    4734:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4744:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000474e <__c.4470>:
    474e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    475e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    476e:	35 64 69 73 6b 0a 00                                5disk..

00004775 <__c.4468>:
    4775:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004785 <__c.4466>:
    4785:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4795:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047a2 <__c.4464>:
    47a2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47b2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047c1 <__c.4462>:
    47c1:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    47d1:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    47e1:	3a 20 25 6c 64 0a 00                                : %ld..

000047e8 <__c.4460>:
    47e8:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000047f9 <__c.4458>:
    47f9:	53 74 61 72 74 0a 00                                Start..

00004800 <__c.4450>:
    4800:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

0000480c <__c.4448>:
    480c:	0a 3e 00                                            .>.

0000480f <__c.4438>:
    480f:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    481f:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

0000482e <__c.4434>:
    482e:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

00004839 <__c.4432>:
    4839:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

00004848 <__c.4428>:
    4848:	0a 00                                               ..

0000484a <__c.4426>:
    484a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    485a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004864 <__c.4424>:
    4864:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4874:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000487e <__c.4422>:
    487e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    488e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    489e:	35 64 69 73 6b 0a 00                                5disk..

000048a5 <__c.4420>:
    48a5:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048b5 <__c.4418>:
    48b5:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    48c5:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000048d2 <__c.4416>:
    48d2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48e2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000048f1 <__c.4414>:
    48f1:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4901:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4911:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004922 <__ctors_end>:
    4922:	11 24       	eor	r1, r1
    4924:	1f be       	out	0x3f, r1	; 63
    4926:	cf ef       	ldi	r28, 0xFF	; 255
    4928:	d0 e4       	ldi	r29, 0x40	; 64
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	cd bf       	out	0x3d, r28	; 61

0000492e <__do_copy_data>:
    492e:	17 e1       	ldi	r17, 0x17	; 23
    4930:	a0 e0       	ldi	r26, 0x00	; 0
    4932:	b1 e0       	ldi	r27, 0x01	; 1
    4934:	e0 ed       	ldi	r30, 0xD0	; 208
    4936:	f0 ee       	ldi	r31, 0xE0	; 224
    4938:	01 e0       	ldi	r16, 0x01	; 1
    493a:	0b bf       	out	0x3b, r16	; 59
    493c:	02 c0       	rjmp	.+4      	; 0x4942 <__do_copy_data+0x14>
    493e:	07 90       	elpm	r0, Z+
    4940:	0d 92       	st	X+, r0
    4942:	a0 36       	cpi	r26, 0x60	; 96
    4944:	b1 07       	cpc	r27, r17
    4946:	d9 f7       	brne	.-10     	; 0x493e <__do_copy_data+0x10>

00004948 <__do_clear_bss>:
    4948:	2f e1       	ldi	r18, 0x1F	; 31
    494a:	a0 e6       	ldi	r26, 0x60	; 96
    494c:	b7 e1       	ldi	r27, 0x17	; 23
    494e:	01 c0       	rjmp	.+2      	; 0x4952 <.do_clear_bss_start>

00004950 <.do_clear_bss_loop>:
    4950:	1d 92       	st	X+, r1

00004952 <.do_clear_bss_start>:
    4952:	a3 33       	cpi	r26, 0x33	; 51
    4954:	b2 07       	cpc	r27, r18
    4956:	e1 f7       	brne	.-8      	; 0x4950 <.do_clear_bss_loop>
    4958:	0e 94 cf e8 	call	0x1d19e	; 0x1d19e <main>
    495c:	0c 94 66 f0 	jmp	0x1e0cc	; 0x1e0cc <_exit>

00004960 <__bad_interrupt>:
    4960:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004964 <vfprintf>:
    4964:	2f 92       	push	r2
    4966:	3f 92       	push	r3
    4968:	4f 92       	push	r4
    496a:	5f 92       	push	r5
    496c:	6f 92       	push	r6
    496e:	7f 92       	push	r7
    4970:	8f 92       	push	r8
    4972:	9f 92       	push	r9
    4974:	af 92       	push	r10
    4976:	bf 92       	push	r11
    4978:	cf 92       	push	r12
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	60 97       	sbiw	r28, 0x10	; 16
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	f8 94       	cli
    4992:	de bf       	out	0x3e, r29	; 62
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	cd bf       	out	0x3d, r28	; 61
    4998:	7c 01       	movw	r14, r24
    499a:	1b 01       	movw	r2, r22
    499c:	6a 01       	movw	r12, r20
    499e:	fc 01       	movw	r30, r24
    49a0:	17 82       	std	Z+7, r1	; 0x07
    49a2:	16 82       	std	Z+6, r1	; 0x06
    49a4:	83 81       	ldd	r24, Z+3	; 0x03
    49a6:	81 ff       	sbrs	r24, 1
    49a8:	44 c3       	rjmp	.+1672   	; 0x5032 <vfprintf+0x6ce>
    49aa:	9e 01       	movw	r18, r28
    49ac:	2f 5f       	subi	r18, 0xFF	; 255
    49ae:	3f 4f       	sbci	r19, 0xFF	; 255
    49b0:	39 01       	movw	r6, r18
    49b2:	f7 01       	movw	r30, r14
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	f1 01       	movw	r30, r2
    49b8:	93 fd       	sbrc	r25, 3
    49ba:	85 91       	lpm	r24, Z+
    49bc:	93 ff       	sbrs	r25, 3
    49be:	81 91       	ld	r24, Z+
    49c0:	1f 01       	movw	r2, r30
    49c2:	88 23       	and	r24, r24
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <vfprintf+0x64>
    49c6:	31 c3       	rjmp	.+1634   	; 0x502a <vfprintf+0x6c6>
    49c8:	85 32       	cpi	r24, 0x25	; 37
    49ca:	39 f4       	brne	.+14     	; 0x49da <vfprintf+0x76>
    49cc:	93 fd       	sbrc	r25, 3
    49ce:	85 91       	lpm	r24, Z+
    49d0:	93 ff       	sbrs	r25, 3
    49d2:	81 91       	ld	r24, Z+
    49d4:	1f 01       	movw	r2, r30
    49d6:	85 32       	cpi	r24, 0x25	; 37
    49d8:	39 f4       	brne	.+14     	; 0x49e8 <vfprintf+0x84>
    49da:	b7 01       	movw	r22, r14
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    49e2:	56 01       	movw	r10, r12
    49e4:	65 01       	movw	r12, r10
    49e6:	e5 cf       	rjmp	.-54     	; 0x49b2 <vfprintf+0x4e>
    49e8:	10 e0       	ldi	r17, 0x00	; 0
    49ea:	51 2c       	mov	r5, r1
    49ec:	91 2c       	mov	r9, r1
    49ee:	ff e1       	ldi	r31, 0x1F	; 31
    49f0:	f9 15       	cp	r31, r9
    49f2:	d8 f0       	brcs	.+54     	; 0x4a2a <vfprintf+0xc6>
    49f4:	8b 32       	cpi	r24, 0x2B	; 43
    49f6:	79 f0       	breq	.+30     	; 0x4a16 <vfprintf+0xb2>
    49f8:	38 f4       	brcc	.+14     	; 0x4a08 <vfprintf+0xa4>
    49fa:	80 32       	cpi	r24, 0x20	; 32
    49fc:	79 f0       	breq	.+30     	; 0x4a1c <vfprintf+0xb8>
    49fe:	83 32       	cpi	r24, 0x23	; 35
    4a00:	a1 f4       	brne	.+40     	; 0x4a2a <vfprintf+0xc6>
    4a02:	f9 2d       	mov	r31, r9
    4a04:	f0 61       	ori	r31, 0x10	; 16
    4a06:	2e c0       	rjmp	.+92     	; 0x4a64 <vfprintf+0x100>
    4a08:	8d 32       	cpi	r24, 0x2D	; 45
    4a0a:	61 f0       	breq	.+24     	; 0x4a24 <vfprintf+0xc0>
    4a0c:	80 33       	cpi	r24, 0x30	; 48
    4a0e:	69 f4       	brne	.+26     	; 0x4a2a <vfprintf+0xc6>
    4a10:	29 2d       	mov	r18, r9
    4a12:	21 60       	ori	r18, 0x01	; 1
    4a14:	2d c0       	rjmp	.+90     	; 0x4a70 <vfprintf+0x10c>
    4a16:	39 2d       	mov	r19, r9
    4a18:	32 60       	ori	r19, 0x02	; 2
    4a1a:	93 2e       	mov	r9, r19
    4a1c:	89 2d       	mov	r24, r9
    4a1e:	84 60       	ori	r24, 0x04	; 4
    4a20:	98 2e       	mov	r9, r24
    4a22:	2a c0       	rjmp	.+84     	; 0x4a78 <vfprintf+0x114>
    4a24:	e9 2d       	mov	r30, r9
    4a26:	e8 60       	ori	r30, 0x08	; 8
    4a28:	15 c0       	rjmp	.+42     	; 0x4a54 <vfprintf+0xf0>
    4a2a:	97 fc       	sbrc	r9, 7
    4a2c:	2d c0       	rjmp	.+90     	; 0x4a88 <vfprintf+0x124>
    4a2e:	20 ed       	ldi	r18, 0xD0	; 208
    4a30:	28 0f       	add	r18, r24
    4a32:	2a 30       	cpi	r18, 0x0A	; 10
    4a34:	88 f4       	brcc	.+34     	; 0x4a58 <vfprintf+0xf4>
    4a36:	96 fe       	sbrs	r9, 6
    4a38:	06 c0       	rjmp	.+12     	; 0x4a46 <vfprintf+0xe2>
    4a3a:	3a e0       	ldi	r19, 0x0A	; 10
    4a3c:	13 9f       	mul	r17, r19
    4a3e:	20 0d       	add	r18, r0
    4a40:	11 24       	eor	r1, r1
    4a42:	12 2f       	mov	r17, r18
    4a44:	19 c0       	rjmp	.+50     	; 0x4a78 <vfprintf+0x114>
    4a46:	8a e0       	ldi	r24, 0x0A	; 10
    4a48:	58 9e       	mul	r5, r24
    4a4a:	20 0d       	add	r18, r0
    4a4c:	11 24       	eor	r1, r1
    4a4e:	52 2e       	mov	r5, r18
    4a50:	e9 2d       	mov	r30, r9
    4a52:	e0 62       	ori	r30, 0x20	; 32
    4a54:	9e 2e       	mov	r9, r30
    4a56:	10 c0       	rjmp	.+32     	; 0x4a78 <vfprintf+0x114>
    4a58:	8e 32       	cpi	r24, 0x2E	; 46
    4a5a:	31 f4       	brne	.+12     	; 0x4a68 <vfprintf+0x104>
    4a5c:	96 fc       	sbrc	r9, 6
    4a5e:	e5 c2       	rjmp	.+1482   	; 0x502a <vfprintf+0x6c6>
    4a60:	f9 2d       	mov	r31, r9
    4a62:	f0 64       	ori	r31, 0x40	; 64
    4a64:	9f 2e       	mov	r9, r31
    4a66:	08 c0       	rjmp	.+16     	; 0x4a78 <vfprintf+0x114>
    4a68:	8c 36       	cpi	r24, 0x6C	; 108
    4a6a:	21 f4       	brne	.+8      	; 0x4a74 <vfprintf+0x110>
    4a6c:	29 2d       	mov	r18, r9
    4a6e:	20 68       	ori	r18, 0x80	; 128
    4a70:	92 2e       	mov	r9, r18
    4a72:	02 c0       	rjmp	.+4      	; 0x4a78 <vfprintf+0x114>
    4a74:	88 36       	cpi	r24, 0x68	; 104
    4a76:	41 f4       	brne	.+16     	; 0x4a88 <vfprintf+0x124>
    4a78:	f1 01       	movw	r30, r2
    4a7a:	93 fd       	sbrc	r25, 3
    4a7c:	85 91       	lpm	r24, Z+
    4a7e:	93 ff       	sbrs	r25, 3
    4a80:	81 91       	ld	r24, Z+
    4a82:	1f 01       	movw	r2, r30
    4a84:	81 11       	cpse	r24, r1
    4a86:	b3 cf       	rjmp	.-154    	; 0x49ee <vfprintf+0x8a>
    4a88:	9b eb       	ldi	r25, 0xBB	; 187
    4a8a:	98 0f       	add	r25, r24
    4a8c:	93 30       	cpi	r25, 0x03	; 3
    4a8e:	20 f4       	brcc	.+8      	; 0x4a98 <vfprintf+0x134>
    4a90:	99 2d       	mov	r25, r9
    4a92:	90 61       	ori	r25, 0x10	; 16
    4a94:	80 5e       	subi	r24, 0xE0	; 224
    4a96:	07 c0       	rjmp	.+14     	; 0x4aa6 <vfprintf+0x142>
    4a98:	9b e9       	ldi	r25, 0x9B	; 155
    4a9a:	98 0f       	add	r25, r24
    4a9c:	93 30       	cpi	r25, 0x03	; 3
    4a9e:	08 f0       	brcs	.+2      	; 0x4aa2 <vfprintf+0x13e>
    4aa0:	66 c1       	rjmp	.+716    	; 0x4d6e <vfprintf+0x40a>
    4aa2:	99 2d       	mov	r25, r9
    4aa4:	9f 7e       	andi	r25, 0xEF	; 239
    4aa6:	96 ff       	sbrs	r25, 6
    4aa8:	16 e0       	ldi	r17, 0x06	; 6
    4aaa:	9f 73       	andi	r25, 0x3F	; 63
    4aac:	99 2e       	mov	r9, r25
    4aae:	85 36       	cpi	r24, 0x65	; 101
    4ab0:	19 f4       	brne	.+6      	; 0x4ab8 <vfprintf+0x154>
    4ab2:	90 64       	ori	r25, 0x40	; 64
    4ab4:	99 2e       	mov	r9, r25
    4ab6:	08 c0       	rjmp	.+16     	; 0x4ac8 <vfprintf+0x164>
    4ab8:	86 36       	cpi	r24, 0x66	; 102
    4aba:	21 f4       	brne	.+8      	; 0x4ac4 <vfprintf+0x160>
    4abc:	39 2f       	mov	r19, r25
    4abe:	30 68       	ori	r19, 0x80	; 128
    4ac0:	93 2e       	mov	r9, r19
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <vfprintf+0x164>
    4ac4:	11 11       	cpse	r17, r1
    4ac6:	11 50       	subi	r17, 0x01	; 1
    4ac8:	97 fe       	sbrs	r9, 7
    4aca:	07 c0       	rjmp	.+14     	; 0x4ada <vfprintf+0x176>
    4acc:	1c 33       	cpi	r17, 0x3C	; 60
    4ace:	50 f4       	brcc	.+20     	; 0x4ae4 <vfprintf+0x180>
    4ad0:	44 24       	eor	r4, r4
    4ad2:	43 94       	inc	r4
    4ad4:	41 0e       	add	r4, r17
    4ad6:	27 e0       	ldi	r18, 0x07	; 7
    4ad8:	0b c0       	rjmp	.+22     	; 0x4af0 <vfprintf+0x18c>
    4ada:	18 30       	cpi	r17, 0x08	; 8
    4adc:	38 f0       	brcs	.+14     	; 0x4aec <vfprintf+0x188>
    4ade:	27 e0       	ldi	r18, 0x07	; 7
    4ae0:	17 e0       	ldi	r17, 0x07	; 7
    4ae2:	05 c0       	rjmp	.+10     	; 0x4aee <vfprintf+0x18a>
    4ae4:	27 e0       	ldi	r18, 0x07	; 7
    4ae6:	9c e3       	ldi	r25, 0x3C	; 60
    4ae8:	49 2e       	mov	r4, r25
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <vfprintf+0x18c>
    4aec:	21 2f       	mov	r18, r17
    4aee:	41 2c       	mov	r4, r1
    4af0:	56 01       	movw	r10, r12
    4af2:	84 e0       	ldi	r24, 0x04	; 4
    4af4:	a8 0e       	add	r10, r24
    4af6:	b1 1c       	adc	r11, r1
    4af8:	f6 01       	movw	r30, r12
    4afa:	60 81       	ld	r22, Z
    4afc:	71 81       	ldd	r23, Z+1	; 0x01
    4afe:	82 81       	ldd	r24, Z+2	; 0x02
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	04 2d       	mov	r16, r4
    4b04:	a3 01       	movw	r20, r6
    4b06:	0e 94 13 ef 	call	0x1de26	; 0x1de26 <__ftoa_engine>
    4b0a:	6c 01       	movw	r12, r24
    4b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b0e:	fc 87       	std	Y+12, r31	; 0x0c
    4b10:	f0 ff       	sbrs	r31, 0
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <vfprintf+0x1b4>
    4b14:	f3 ff       	sbrs	r31, 3
    4b16:	06 c0       	rjmp	.+12     	; 0x4b24 <vfprintf+0x1c0>
    4b18:	91 fc       	sbrc	r9, 1
    4b1a:	06 c0       	rjmp	.+12     	; 0x4b28 <vfprintf+0x1c4>
    4b1c:	92 fe       	sbrs	r9, 2
    4b1e:	06 c0       	rjmp	.+12     	; 0x4b2c <vfprintf+0x1c8>
    4b20:	00 e2       	ldi	r16, 0x20	; 32
    4b22:	05 c0       	rjmp	.+10     	; 0x4b2e <vfprintf+0x1ca>
    4b24:	0d e2       	ldi	r16, 0x2D	; 45
    4b26:	03 c0       	rjmp	.+6      	; 0x4b2e <vfprintf+0x1ca>
    4b28:	0b e2       	ldi	r16, 0x2B	; 43
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <vfprintf+0x1ca>
    4b2c:	00 e0       	ldi	r16, 0x00	; 0
    4b2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b30:	8c 70       	andi	r24, 0x0C	; 12
    4b32:	19 f0       	breq	.+6      	; 0x4b3a <vfprintf+0x1d6>
    4b34:	01 11       	cpse	r16, r1
    4b36:	5a c2       	rjmp	.+1204   	; 0x4fec <vfprintf+0x688>
    4b38:	9b c2       	rjmp	.+1334   	; 0x5070 <vfprintf+0x70c>
    4b3a:	97 fe       	sbrs	r9, 7
    4b3c:	10 c0       	rjmp	.+32     	; 0x4b5e <vfprintf+0x1fa>
    4b3e:	4c 0c       	add	r4, r12
    4b40:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b42:	f4 ff       	sbrs	r31, 4
    4b44:	04 c0       	rjmp	.+8      	; 0x4b4e <vfprintf+0x1ea>
    4b46:	8a 81       	ldd	r24, Y+2	; 0x02
    4b48:	81 33       	cpi	r24, 0x31	; 49
    4b4a:	09 f4       	brne	.+2      	; 0x4b4e <vfprintf+0x1ea>
    4b4c:	4a 94       	dec	r4
    4b4e:	14 14       	cp	r1, r4
    4b50:	74 f5       	brge	.+92     	; 0x4bae <vfprintf+0x24a>
    4b52:	28 e0       	ldi	r18, 0x08	; 8
    4b54:	24 15       	cp	r18, r4
    4b56:	78 f5       	brcc	.+94     	; 0x4bb6 <vfprintf+0x252>
    4b58:	88 e0       	ldi	r24, 0x08	; 8
    4b5a:	48 2e       	mov	r4, r24
    4b5c:	2c c0       	rjmp	.+88     	; 0x4bb6 <vfprintf+0x252>
    4b5e:	96 fc       	sbrc	r9, 6
    4b60:	2a c0       	rjmp	.+84     	; 0x4bb6 <vfprintf+0x252>
    4b62:	81 2f       	mov	r24, r17
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	8c 15       	cp	r24, r12
    4b68:	9d 05       	cpc	r25, r13
    4b6a:	9c f0       	brlt	.+38     	; 0x4b92 <vfprintf+0x22e>
    4b6c:	3c ef       	ldi	r19, 0xFC	; 252
    4b6e:	c3 16       	cp	r12, r19
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	d3 06       	cpc	r13, r19
    4b74:	74 f0       	brlt	.+28     	; 0x4b92 <vfprintf+0x22e>
    4b76:	89 2d       	mov	r24, r9
    4b78:	80 68       	ori	r24, 0x80	; 128
    4b7a:	98 2e       	mov	r9, r24
    4b7c:	0a c0       	rjmp	.+20     	; 0x4b92 <vfprintf+0x22e>
    4b7e:	e2 e0       	ldi	r30, 0x02	; 2
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	ec 0f       	add	r30, r28
    4b84:	fd 1f       	adc	r31, r29
    4b86:	e1 0f       	add	r30, r17
    4b88:	f1 1d       	adc	r31, r1
    4b8a:	80 81       	ld	r24, Z
    4b8c:	80 33       	cpi	r24, 0x30	; 48
    4b8e:	19 f4       	brne	.+6      	; 0x4b96 <vfprintf+0x232>
    4b90:	11 50       	subi	r17, 0x01	; 1
    4b92:	11 11       	cpse	r17, r1
    4b94:	f4 cf       	rjmp	.-24     	; 0x4b7e <vfprintf+0x21a>
    4b96:	97 fe       	sbrs	r9, 7
    4b98:	0e c0       	rjmp	.+28     	; 0x4bb6 <vfprintf+0x252>
    4b9a:	44 24       	eor	r4, r4
    4b9c:	43 94       	inc	r4
    4b9e:	41 0e       	add	r4, r17
    4ba0:	81 2f       	mov	r24, r17
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	c8 16       	cp	r12, r24
    4ba6:	d9 06       	cpc	r13, r25
    4ba8:	2c f4       	brge	.+10     	; 0x4bb4 <vfprintf+0x250>
    4baa:	1c 19       	sub	r17, r12
    4bac:	04 c0       	rjmp	.+8      	; 0x4bb6 <vfprintf+0x252>
    4bae:	44 24       	eor	r4, r4
    4bb0:	43 94       	inc	r4
    4bb2:	01 c0       	rjmp	.+2      	; 0x4bb6 <vfprintf+0x252>
    4bb4:	10 e0       	ldi	r17, 0x00	; 0
    4bb6:	97 fe       	sbrs	r9, 7
    4bb8:	06 c0       	rjmp	.+12     	; 0x4bc6 <vfprintf+0x262>
    4bba:	1c 14       	cp	r1, r12
    4bbc:	1d 04       	cpc	r1, r13
    4bbe:	34 f4       	brge	.+12     	; 0x4bcc <vfprintf+0x268>
    4bc0:	c6 01       	movw	r24, r12
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <vfprintf+0x26c>
    4bc6:	85 e0       	ldi	r24, 0x05	; 5
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	02 c0       	rjmp	.+4      	; 0x4bd0 <vfprintf+0x26c>
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	01 11       	cpse	r16, r1
    4bd2:	01 96       	adiw	r24, 0x01	; 1
    4bd4:	11 23       	and	r17, r17
    4bd6:	31 f0       	breq	.+12     	; 0x4be4 <vfprintf+0x280>
    4bd8:	21 2f       	mov	r18, r17
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	3f 4f       	sbci	r19, 0xFF	; 255
    4be0:	82 0f       	add	r24, r18
    4be2:	93 1f       	adc	r25, r19
    4be4:	25 2d       	mov	r18, r5
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	82 17       	cp	r24, r18
    4bea:	93 07       	cpc	r25, r19
    4bec:	14 f4       	brge	.+4      	; 0x4bf2 <vfprintf+0x28e>
    4bee:	58 1a       	sub	r5, r24
    4bf0:	01 c0       	rjmp	.+2      	; 0x4bf4 <vfprintf+0x290>
    4bf2:	51 2c       	mov	r5, r1
    4bf4:	89 2d       	mov	r24, r9
    4bf6:	89 70       	andi	r24, 0x09	; 9
    4bf8:	49 f4       	brne	.+18     	; 0x4c0c <vfprintf+0x2a8>
    4bfa:	55 20       	and	r5, r5
    4bfc:	39 f0       	breq	.+14     	; 0x4c0c <vfprintf+0x2a8>
    4bfe:	b7 01       	movw	r22, r14
    4c00:	80 e2       	ldi	r24, 0x20	; 32
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4c08:	5a 94       	dec	r5
    4c0a:	f7 cf       	rjmp	.-18     	; 0x4bfa <vfprintf+0x296>
    4c0c:	00 23       	and	r16, r16
    4c0e:	29 f0       	breq	.+10     	; 0x4c1a <vfprintf+0x2b6>
    4c10:	b7 01       	movw	r22, r14
    4c12:	80 2f       	mov	r24, r16
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4c1a:	93 fc       	sbrc	r9, 3
    4c1c:	09 c0       	rjmp	.+18     	; 0x4c30 <vfprintf+0x2cc>
    4c1e:	55 20       	and	r5, r5
    4c20:	39 f0       	breq	.+14     	; 0x4c30 <vfprintf+0x2cc>
    4c22:	b7 01       	movw	r22, r14
    4c24:	80 e3       	ldi	r24, 0x30	; 48
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4c2c:	5a 94       	dec	r5
    4c2e:	f7 cf       	rjmp	.-18     	; 0x4c1e <vfprintf+0x2ba>
    4c30:	97 fe       	sbrs	r9, 7
    4c32:	4c c0       	rjmp	.+152    	; 0x4ccc <vfprintf+0x368>
    4c34:	46 01       	movw	r8, r12
    4c36:	d7 fe       	sbrs	r13, 7
    4c38:	02 c0       	rjmp	.+4      	; 0x4c3e <vfprintf+0x2da>
    4c3a:	81 2c       	mov	r8, r1
    4c3c:	91 2c       	mov	r9, r1
    4c3e:	c6 01       	movw	r24, r12
    4c40:	88 19       	sub	r24, r8
    4c42:	99 09       	sbc	r25, r9
    4c44:	f3 01       	movw	r30, r6
    4c46:	e8 0f       	add	r30, r24
    4c48:	f9 1f       	adc	r31, r25
    4c4a:	fe 87       	std	Y+14, r31	; 0x0e
    4c4c:	ed 87       	std	Y+13, r30	; 0x0d
    4c4e:	96 01       	movw	r18, r12
    4c50:	24 19       	sub	r18, r4
    4c52:	31 09       	sbc	r19, r1
    4c54:	38 8b       	std	Y+16, r19	; 0x10
    4c56:	2f 87       	std	Y+15, r18	; 0x0f
    4c58:	01 2f       	mov	r16, r17
    4c5a:	10 e0       	ldi	r17, 0x00	; 0
    4c5c:	11 95       	neg	r17
    4c5e:	01 95       	neg	r16
    4c60:	11 09       	sbc	r17, r1
    4c62:	3f ef       	ldi	r19, 0xFF	; 255
    4c64:	83 16       	cp	r8, r19
    4c66:	93 06       	cpc	r9, r19
    4c68:	29 f4       	brne	.+10     	; 0x4c74 <vfprintf+0x310>
    4c6a:	b7 01       	movw	r22, r14
    4c6c:	8e e2       	ldi	r24, 0x2E	; 46
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4c74:	c8 14       	cp	r12, r8
    4c76:	d9 04       	cpc	r13, r9
    4c78:	4c f0       	brlt	.+18     	; 0x4c8c <vfprintf+0x328>
    4c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c7c:	98 89       	ldd	r25, Y+16	; 0x10
    4c7e:	88 15       	cp	r24, r8
    4c80:	99 05       	cpc	r25, r9
    4c82:	24 f4       	brge	.+8      	; 0x4c8c <vfprintf+0x328>
    4c84:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c86:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c88:	81 81       	ldd	r24, Z+1	; 0x01
    4c8a:	01 c0       	rjmp	.+2      	; 0x4c8e <vfprintf+0x32a>
    4c8c:	80 e3       	ldi	r24, 0x30	; 48
    4c8e:	f1 e0       	ldi	r31, 0x01	; 1
    4c90:	8f 1a       	sub	r8, r31
    4c92:	91 08       	sbc	r9, r1
    4c94:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c96:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c98:	2f 5f       	subi	r18, 0xFF	; 255
    4c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9c:	3e 87       	std	Y+14, r19	; 0x0e
    4c9e:	2d 87       	std	Y+13, r18	; 0x0d
    4ca0:	80 16       	cp	r8, r16
    4ca2:	91 06       	cpc	r9, r17
    4ca4:	2c f0       	brlt	.+10     	; 0x4cb0 <vfprintf+0x34c>
    4ca6:	b7 01       	movw	r22, r14
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4cae:	d9 cf       	rjmp	.-78     	; 0x4c62 <vfprintf+0x2fe>
    4cb0:	c8 14       	cp	r12, r8
    4cb2:	d9 04       	cpc	r13, r9
    4cb4:	41 f4       	brne	.+16     	; 0x4cc6 <vfprintf+0x362>
    4cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb8:	96 33       	cpi	r25, 0x36	; 54
    4cba:	20 f4       	brcc	.+8      	; 0x4cc4 <vfprintf+0x360>
    4cbc:	95 33       	cpi	r25, 0x35	; 53
    4cbe:	19 f4       	brne	.+6      	; 0x4cc6 <vfprintf+0x362>
    4cc0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4cc2:	34 ff       	sbrs	r19, 4
    4cc4:	81 e3       	ldi	r24, 0x31	; 49
    4cc6:	b7 01       	movw	r22, r14
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	4e c0       	rjmp	.+156    	; 0x4d68 <vfprintf+0x404>
    4ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cce:	81 33       	cpi	r24, 0x31	; 49
    4cd0:	19 f0       	breq	.+6      	; 0x4cd8 <vfprintf+0x374>
    4cd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cd4:	9f 7e       	andi	r25, 0xEF	; 239
    4cd6:	9c 87       	std	Y+12, r25	; 0x0c
    4cd8:	b7 01       	movw	r22, r14
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4ce0:	11 11       	cpse	r17, r1
    4ce2:	05 c0       	rjmp	.+10     	; 0x4cee <vfprintf+0x38a>
    4ce4:	94 fc       	sbrc	r9, 4
    4ce6:	18 c0       	rjmp	.+48     	; 0x4d18 <vfprintf+0x3b4>
    4ce8:	85 e6       	ldi	r24, 0x65	; 101
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	17 c0       	rjmp	.+46     	; 0x4d1c <vfprintf+0x3b8>
    4cee:	b7 01       	movw	r22, r14
    4cf0:	8e e2       	ldi	r24, 0x2E	; 46
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4cf8:	1e 5f       	subi	r17, 0xFE	; 254
    4cfa:	82 e0       	ldi	r24, 0x02	; 2
    4cfc:	01 e0       	ldi	r16, 0x01	; 1
    4cfe:	08 0f       	add	r16, r24
    4d00:	f3 01       	movw	r30, r6
    4d02:	e8 0f       	add	r30, r24
    4d04:	f1 1d       	adc	r31, r1
    4d06:	80 81       	ld	r24, Z
    4d08:	b7 01       	movw	r22, r14
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4d10:	80 2f       	mov	r24, r16
    4d12:	01 13       	cpse	r16, r17
    4d14:	f3 cf       	rjmp	.-26     	; 0x4cfc <vfprintf+0x398>
    4d16:	e6 cf       	rjmp	.-52     	; 0x4ce4 <vfprintf+0x380>
    4d18:	85 e4       	ldi	r24, 0x45	; 69
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	b7 01       	movw	r22, r14
    4d1e:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4d22:	d7 fc       	sbrc	r13, 7
    4d24:	06 c0       	rjmp	.+12     	; 0x4d32 <vfprintf+0x3ce>
    4d26:	c1 14       	cp	r12, r1
    4d28:	d1 04       	cpc	r13, r1
    4d2a:	41 f4       	brne	.+16     	; 0x4d3c <vfprintf+0x3d8>
    4d2c:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d2e:	e4 ff       	sbrs	r30, 4
    4d30:	05 c0       	rjmp	.+10     	; 0x4d3c <vfprintf+0x3d8>
    4d32:	d1 94       	neg	r13
    4d34:	c1 94       	neg	r12
    4d36:	d1 08       	sbc	r13, r1
    4d38:	8d e2       	ldi	r24, 0x2D	; 45
    4d3a:	01 c0       	rjmp	.+2      	; 0x4d3e <vfprintf+0x3da>
    4d3c:	8b e2       	ldi	r24, 0x2B	; 43
    4d3e:	b7 01       	movw	r22, r14
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4d46:	80 e3       	ldi	r24, 0x30	; 48
    4d48:	2a e0       	ldi	r18, 0x0A	; 10
    4d4a:	c2 16       	cp	r12, r18
    4d4c:	d1 04       	cpc	r13, r1
    4d4e:	2c f0       	brlt	.+10     	; 0x4d5a <vfprintf+0x3f6>
    4d50:	8f 5f       	subi	r24, 0xFF	; 255
    4d52:	fa e0       	ldi	r31, 0x0A	; 10
    4d54:	cf 1a       	sub	r12, r31
    4d56:	d1 08       	sbc	r13, r1
    4d58:	f7 cf       	rjmp	.-18     	; 0x4d48 <vfprintf+0x3e4>
    4d5a:	b7 01       	movw	r22, r14
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4d62:	b7 01       	movw	r22, r14
    4d64:	c6 01       	movw	r24, r12
    4d66:	c0 96       	adiw	r24, 0x30	; 48
    4d68:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4d6c:	54 c1       	rjmp	.+680    	; 0x5016 <vfprintf+0x6b2>
    4d6e:	83 36       	cpi	r24, 0x63	; 99
    4d70:	31 f0       	breq	.+12     	; 0x4d7e <vfprintf+0x41a>
    4d72:	83 37       	cpi	r24, 0x73	; 115
    4d74:	79 f0       	breq	.+30     	; 0x4d94 <vfprintf+0x430>
    4d76:	83 35       	cpi	r24, 0x53	; 83
    4d78:	09 f0       	breq	.+2      	; 0x4d7c <vfprintf+0x418>
    4d7a:	56 c0       	rjmp	.+172    	; 0x4e28 <vfprintf+0x4c4>
    4d7c:	20 c0       	rjmp	.+64     	; 0x4dbe <vfprintf+0x45a>
    4d7e:	56 01       	movw	r10, r12
    4d80:	32 e0       	ldi	r19, 0x02	; 2
    4d82:	a3 0e       	add	r10, r19
    4d84:	b1 1c       	adc	r11, r1
    4d86:	f6 01       	movw	r30, r12
    4d88:	80 81       	ld	r24, Z
    4d8a:	89 83       	std	Y+1, r24	; 0x01
    4d8c:	01 e0       	ldi	r16, 0x01	; 1
    4d8e:	10 e0       	ldi	r17, 0x00	; 0
    4d90:	63 01       	movw	r12, r6
    4d92:	12 c0       	rjmp	.+36     	; 0x4db8 <vfprintf+0x454>
    4d94:	56 01       	movw	r10, r12
    4d96:	f2 e0       	ldi	r31, 0x02	; 2
    4d98:	af 0e       	add	r10, r31
    4d9a:	b1 1c       	adc	r11, r1
    4d9c:	f6 01       	movw	r30, r12
    4d9e:	c0 80       	ld	r12, Z
    4da0:	d1 80       	ldd	r13, Z+1	; 0x01
    4da2:	96 fe       	sbrs	r9, 6
    4da4:	03 c0       	rjmp	.+6      	; 0x4dac <vfprintf+0x448>
    4da6:	61 2f       	mov	r22, r17
    4da8:	70 e0       	ldi	r23, 0x00	; 0
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <vfprintf+0x44c>
    4dac:	6f ef       	ldi	r22, 0xFF	; 255
    4dae:	7f ef       	ldi	r23, 0xFF	; 255
    4db0:	c6 01       	movw	r24, r12
    4db2:	0e 94 fd ef 	call	0x1dffa	; 0x1dffa <strnlen>
    4db6:	8c 01       	movw	r16, r24
    4db8:	f9 2d       	mov	r31, r9
    4dba:	ff 77       	andi	r31, 0x7F	; 127
    4dbc:	14 c0       	rjmp	.+40     	; 0x4de6 <vfprintf+0x482>
    4dbe:	56 01       	movw	r10, r12
    4dc0:	22 e0       	ldi	r18, 0x02	; 2
    4dc2:	a2 0e       	add	r10, r18
    4dc4:	b1 1c       	adc	r11, r1
    4dc6:	f6 01       	movw	r30, r12
    4dc8:	c0 80       	ld	r12, Z
    4dca:	d1 80       	ldd	r13, Z+1	; 0x01
    4dcc:	96 fe       	sbrs	r9, 6
    4dce:	03 c0       	rjmp	.+6      	; 0x4dd6 <vfprintf+0x472>
    4dd0:	61 2f       	mov	r22, r17
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <vfprintf+0x476>
    4dd6:	6f ef       	ldi	r22, 0xFF	; 255
    4dd8:	7f ef       	ldi	r23, 0xFF	; 255
    4dda:	c6 01       	movw	r24, r12
    4ddc:	0e 94 eb ef 	call	0x1dfd6	; 0x1dfd6 <strnlen_P>
    4de0:	8c 01       	movw	r16, r24
    4de2:	f9 2d       	mov	r31, r9
    4de4:	f0 68       	ori	r31, 0x80	; 128
    4de6:	9f 2e       	mov	r9, r31
    4de8:	f3 fd       	sbrc	r31, 3
    4dea:	1a c0       	rjmp	.+52     	; 0x4e20 <vfprintf+0x4bc>
    4dec:	85 2d       	mov	r24, r5
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	08 17       	cp	r16, r24
    4df2:	19 07       	cpc	r17, r25
    4df4:	a8 f4       	brcc	.+42     	; 0x4e20 <vfprintf+0x4bc>
    4df6:	b7 01       	movw	r22, r14
    4df8:	80 e2       	ldi	r24, 0x20	; 32
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4e00:	5a 94       	dec	r5
    4e02:	f4 cf       	rjmp	.-24     	; 0x4dec <vfprintf+0x488>
    4e04:	f6 01       	movw	r30, r12
    4e06:	97 fc       	sbrc	r9, 7
    4e08:	85 91       	lpm	r24, Z+
    4e0a:	97 fe       	sbrs	r9, 7
    4e0c:	81 91       	ld	r24, Z+
    4e0e:	6f 01       	movw	r12, r30
    4e10:	b7 01       	movw	r22, r14
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4e18:	51 10       	cpse	r5, r1
    4e1a:	5a 94       	dec	r5
    4e1c:	01 50       	subi	r16, 0x01	; 1
    4e1e:	11 09       	sbc	r17, r1
    4e20:	01 15       	cp	r16, r1
    4e22:	11 05       	cpc	r17, r1
    4e24:	79 f7       	brne	.-34     	; 0x4e04 <vfprintf+0x4a0>
    4e26:	f7 c0       	rjmp	.+494    	; 0x5016 <vfprintf+0x6b2>
    4e28:	84 36       	cpi	r24, 0x64	; 100
    4e2a:	11 f0       	breq	.+4      	; 0x4e30 <vfprintf+0x4cc>
    4e2c:	89 36       	cpi	r24, 0x69	; 105
    4e2e:	61 f5       	brne	.+88     	; 0x4e88 <vfprintf+0x524>
    4e30:	56 01       	movw	r10, r12
    4e32:	97 fe       	sbrs	r9, 7
    4e34:	09 c0       	rjmp	.+18     	; 0x4e48 <vfprintf+0x4e4>
    4e36:	24 e0       	ldi	r18, 0x04	; 4
    4e38:	a2 0e       	add	r10, r18
    4e3a:	b1 1c       	adc	r11, r1
    4e3c:	f6 01       	movw	r30, r12
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	0a c0       	rjmp	.+20     	; 0x4e5c <vfprintf+0x4f8>
    4e48:	f2 e0       	ldi	r31, 0x02	; 2
    4e4a:	af 0e       	add	r10, r31
    4e4c:	b1 1c       	adc	r11, r1
    4e4e:	f6 01       	movw	r30, r12
    4e50:	60 81       	ld	r22, Z
    4e52:	71 81       	ldd	r23, Z+1	; 0x01
    4e54:	07 2e       	mov	r0, r23
    4e56:	00 0c       	add	r0, r0
    4e58:	88 0b       	sbc	r24, r24
    4e5a:	99 0b       	sbc	r25, r25
    4e5c:	f9 2d       	mov	r31, r9
    4e5e:	ff 76       	andi	r31, 0x6F	; 111
    4e60:	9f 2e       	mov	r9, r31
    4e62:	97 ff       	sbrs	r25, 7
    4e64:	09 c0       	rjmp	.+18     	; 0x4e78 <vfprintf+0x514>
    4e66:	90 95       	com	r25
    4e68:	80 95       	com	r24
    4e6a:	70 95       	com	r23
    4e6c:	61 95       	neg	r22
    4e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e70:	8f 4f       	sbci	r24, 0xFF	; 255
    4e72:	9f 4f       	sbci	r25, 0xFF	; 255
    4e74:	f0 68       	ori	r31, 0x80	; 128
    4e76:	9f 2e       	mov	r9, r31
    4e78:	2a e0       	ldi	r18, 0x0A	; 10
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	a3 01       	movw	r20, r6
    4e7e:	0e 94 08 f0 	call	0x1e010	; 0x1e010 <__ultoa_invert>
    4e82:	c8 2e       	mov	r12, r24
    4e84:	c6 18       	sub	r12, r6
    4e86:	3f c0       	rjmp	.+126    	; 0x4f06 <vfprintf+0x5a2>
    4e88:	09 2d       	mov	r16, r9
    4e8a:	85 37       	cpi	r24, 0x75	; 117
    4e8c:	21 f4       	brne	.+8      	; 0x4e96 <vfprintf+0x532>
    4e8e:	0f 7e       	andi	r16, 0xEF	; 239
    4e90:	2a e0       	ldi	r18, 0x0A	; 10
    4e92:	30 e0       	ldi	r19, 0x00	; 0
    4e94:	1d c0       	rjmp	.+58     	; 0x4ed0 <vfprintf+0x56c>
    4e96:	09 7f       	andi	r16, 0xF9	; 249
    4e98:	8f 36       	cpi	r24, 0x6F	; 111
    4e9a:	91 f0       	breq	.+36     	; 0x4ec0 <vfprintf+0x55c>
    4e9c:	18 f4       	brcc	.+6      	; 0x4ea4 <vfprintf+0x540>
    4e9e:	88 35       	cpi	r24, 0x58	; 88
    4ea0:	59 f0       	breq	.+22     	; 0x4eb8 <vfprintf+0x554>
    4ea2:	c3 c0       	rjmp	.+390    	; 0x502a <vfprintf+0x6c6>
    4ea4:	80 37       	cpi	r24, 0x70	; 112
    4ea6:	19 f0       	breq	.+6      	; 0x4eae <vfprintf+0x54a>
    4ea8:	88 37       	cpi	r24, 0x78	; 120
    4eaa:	11 f0       	breq	.+4      	; 0x4eb0 <vfprintf+0x54c>
    4eac:	be c0       	rjmp	.+380    	; 0x502a <vfprintf+0x6c6>
    4eae:	00 61       	ori	r16, 0x10	; 16
    4eb0:	04 ff       	sbrs	r16, 4
    4eb2:	09 c0       	rjmp	.+18     	; 0x4ec6 <vfprintf+0x562>
    4eb4:	04 60       	ori	r16, 0x04	; 4
    4eb6:	07 c0       	rjmp	.+14     	; 0x4ec6 <vfprintf+0x562>
    4eb8:	94 fe       	sbrs	r9, 4
    4eba:	08 c0       	rjmp	.+16     	; 0x4ecc <vfprintf+0x568>
    4ebc:	06 60       	ori	r16, 0x06	; 6
    4ebe:	06 c0       	rjmp	.+12     	; 0x4ecc <vfprintf+0x568>
    4ec0:	28 e0       	ldi	r18, 0x08	; 8
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	05 c0       	rjmp	.+10     	; 0x4ed0 <vfprintf+0x56c>
    4ec6:	20 e1       	ldi	r18, 0x10	; 16
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <vfprintf+0x56c>
    4ecc:	20 e1       	ldi	r18, 0x10	; 16
    4ece:	32 e0       	ldi	r19, 0x02	; 2
    4ed0:	56 01       	movw	r10, r12
    4ed2:	07 ff       	sbrs	r16, 7
    4ed4:	09 c0       	rjmp	.+18     	; 0x4ee8 <vfprintf+0x584>
    4ed6:	84 e0       	ldi	r24, 0x04	; 4
    4ed8:	a8 0e       	add	r10, r24
    4eda:	b1 1c       	adc	r11, r1
    4edc:	f6 01       	movw	r30, r12
    4ede:	60 81       	ld	r22, Z
    4ee0:	71 81       	ldd	r23, Z+1	; 0x01
    4ee2:	82 81       	ldd	r24, Z+2	; 0x02
    4ee4:	93 81       	ldd	r25, Z+3	; 0x03
    4ee6:	08 c0       	rjmp	.+16     	; 0x4ef8 <vfprintf+0x594>
    4ee8:	f2 e0       	ldi	r31, 0x02	; 2
    4eea:	af 0e       	add	r10, r31
    4eec:	b1 1c       	adc	r11, r1
    4eee:	f6 01       	movw	r30, r12
    4ef0:	60 81       	ld	r22, Z
    4ef2:	71 81       	ldd	r23, Z+1	; 0x01
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	a3 01       	movw	r20, r6
    4efa:	0e 94 08 f0 	call	0x1e010	; 0x1e010 <__ultoa_invert>
    4efe:	c8 2e       	mov	r12, r24
    4f00:	c6 18       	sub	r12, r6
    4f02:	0f 77       	andi	r16, 0x7F	; 127
    4f04:	90 2e       	mov	r9, r16
    4f06:	96 fe       	sbrs	r9, 6
    4f08:	0b c0       	rjmp	.+22     	; 0x4f20 <vfprintf+0x5bc>
    4f0a:	09 2d       	mov	r16, r9
    4f0c:	0e 7f       	andi	r16, 0xFE	; 254
    4f0e:	c1 16       	cp	r12, r17
    4f10:	50 f4       	brcc	.+20     	; 0x4f26 <vfprintf+0x5c2>
    4f12:	94 fe       	sbrs	r9, 4
    4f14:	0a c0       	rjmp	.+20     	; 0x4f2a <vfprintf+0x5c6>
    4f16:	92 fc       	sbrc	r9, 2
    4f18:	08 c0       	rjmp	.+16     	; 0x4f2a <vfprintf+0x5c6>
    4f1a:	09 2d       	mov	r16, r9
    4f1c:	0e 7e       	andi	r16, 0xEE	; 238
    4f1e:	05 c0       	rjmp	.+10     	; 0x4f2a <vfprintf+0x5c6>
    4f20:	dc 2c       	mov	r13, r12
    4f22:	09 2d       	mov	r16, r9
    4f24:	03 c0       	rjmp	.+6      	; 0x4f2c <vfprintf+0x5c8>
    4f26:	dc 2c       	mov	r13, r12
    4f28:	01 c0       	rjmp	.+2      	; 0x4f2c <vfprintf+0x5c8>
    4f2a:	d1 2e       	mov	r13, r17
    4f2c:	04 ff       	sbrs	r16, 4
    4f2e:	0d c0       	rjmp	.+26     	; 0x4f4a <vfprintf+0x5e6>
    4f30:	fe 01       	movw	r30, r28
    4f32:	ec 0d       	add	r30, r12
    4f34:	f1 1d       	adc	r31, r1
    4f36:	80 81       	ld	r24, Z
    4f38:	80 33       	cpi	r24, 0x30	; 48
    4f3a:	11 f4       	brne	.+4      	; 0x4f40 <vfprintf+0x5dc>
    4f3c:	09 7e       	andi	r16, 0xE9	; 233
    4f3e:	09 c0       	rjmp	.+18     	; 0x4f52 <vfprintf+0x5ee>
    4f40:	02 ff       	sbrs	r16, 2
    4f42:	06 c0       	rjmp	.+12     	; 0x4f50 <vfprintf+0x5ec>
    4f44:	d3 94       	inc	r13
    4f46:	d3 94       	inc	r13
    4f48:	04 c0       	rjmp	.+8      	; 0x4f52 <vfprintf+0x5ee>
    4f4a:	80 2f       	mov	r24, r16
    4f4c:	86 78       	andi	r24, 0x86	; 134
    4f4e:	09 f0       	breq	.+2      	; 0x4f52 <vfprintf+0x5ee>
    4f50:	d3 94       	inc	r13
    4f52:	03 fd       	sbrc	r16, 3
    4f54:	11 c0       	rjmp	.+34     	; 0x4f78 <vfprintf+0x614>
    4f56:	00 ff       	sbrs	r16, 0
    4f58:	06 c0       	rjmp	.+12     	; 0x4f66 <vfprintf+0x602>
    4f5a:	1c 2d       	mov	r17, r12
    4f5c:	d5 14       	cp	r13, r5
    4f5e:	80 f4       	brcc	.+32     	; 0x4f80 <vfprintf+0x61c>
    4f60:	15 0d       	add	r17, r5
    4f62:	1d 19       	sub	r17, r13
    4f64:	0d c0       	rjmp	.+26     	; 0x4f80 <vfprintf+0x61c>
    4f66:	d5 14       	cp	r13, r5
    4f68:	58 f4       	brcc	.+22     	; 0x4f80 <vfprintf+0x61c>
    4f6a:	b7 01       	movw	r22, r14
    4f6c:	80 e2       	ldi	r24, 0x20	; 32
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4f74:	d3 94       	inc	r13
    4f76:	f7 cf       	rjmp	.-18     	; 0x4f66 <vfprintf+0x602>
    4f78:	d5 14       	cp	r13, r5
    4f7a:	10 f4       	brcc	.+4      	; 0x4f80 <vfprintf+0x61c>
    4f7c:	5d 18       	sub	r5, r13
    4f7e:	01 c0       	rjmp	.+2      	; 0x4f82 <vfprintf+0x61e>
    4f80:	51 2c       	mov	r5, r1
    4f82:	04 ff       	sbrs	r16, 4
    4f84:	10 c0       	rjmp	.+32     	; 0x4fa6 <vfprintf+0x642>
    4f86:	b7 01       	movw	r22, r14
    4f88:	80 e3       	ldi	r24, 0x30	; 48
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4f90:	02 ff       	sbrs	r16, 2
    4f92:	17 c0       	rjmp	.+46     	; 0x4fc2 <vfprintf+0x65e>
    4f94:	01 fd       	sbrc	r16, 1
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <vfprintf+0x63a>
    4f98:	88 e7       	ldi	r24, 0x78	; 120
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <vfprintf+0x63e>
    4f9e:	88 e5       	ldi	r24, 0x58	; 88
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	b7 01       	movw	r22, r14
    4fa4:	0c c0       	rjmp	.+24     	; 0x4fbe <vfprintf+0x65a>
    4fa6:	80 2f       	mov	r24, r16
    4fa8:	86 78       	andi	r24, 0x86	; 134
    4faa:	59 f0       	breq	.+22     	; 0x4fc2 <vfprintf+0x65e>
    4fac:	01 ff       	sbrs	r16, 1
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <vfprintf+0x650>
    4fb0:	8b e2       	ldi	r24, 0x2B	; 43
    4fb2:	01 c0       	rjmp	.+2      	; 0x4fb6 <vfprintf+0x652>
    4fb4:	80 e2       	ldi	r24, 0x20	; 32
    4fb6:	07 fd       	sbrc	r16, 7
    4fb8:	8d e2       	ldi	r24, 0x2D	; 45
    4fba:	b7 01       	movw	r22, r14
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4fc2:	c1 16       	cp	r12, r17
    4fc4:	38 f4       	brcc	.+14     	; 0x4fd4 <vfprintf+0x670>
    4fc6:	b7 01       	movw	r22, r14
    4fc8:	80 e3       	ldi	r24, 0x30	; 48
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4fd0:	11 50       	subi	r17, 0x01	; 1
    4fd2:	f7 cf       	rjmp	.-18     	; 0x4fc2 <vfprintf+0x65e>
    4fd4:	ca 94       	dec	r12
    4fd6:	f3 01       	movw	r30, r6
    4fd8:	ec 0d       	add	r30, r12
    4fda:	f1 1d       	adc	r31, r1
    4fdc:	80 81       	ld	r24, Z
    4fde:	b7 01       	movw	r22, r14
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    4fe6:	c1 10       	cpse	r12, r1
    4fe8:	f5 cf       	rjmp	.-22     	; 0x4fd4 <vfprintf+0x670>
    4fea:	15 c0       	rjmp	.+42     	; 0x5016 <vfprintf+0x6b2>
    4fec:	f4 e0       	ldi	r31, 0x04	; 4
    4fee:	f5 15       	cp	r31, r5
    4ff0:	60 f5       	brcc	.+88     	; 0x504a <vfprintf+0x6e6>
    4ff2:	84 e0       	ldi	r24, 0x04	; 4
    4ff4:	58 1a       	sub	r5, r24
    4ff6:	93 fe       	sbrs	r9, 3
    4ff8:	1f c0       	rjmp	.+62     	; 0x5038 <vfprintf+0x6d4>
    4ffa:	01 11       	cpse	r16, r1
    4ffc:	27 c0       	rjmp	.+78     	; 0x504c <vfprintf+0x6e8>
    4ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    5000:	23 ff       	sbrs	r18, 3
    5002:	2a c0       	rjmp	.+84     	; 0x5058 <vfprintf+0x6f4>
    5004:	00 ed       	ldi	r16, 0xD0	; 208
    5006:	11 e0       	ldi	r17, 0x01	; 1
    5008:	39 2d       	mov	r19, r9
    500a:	30 71       	andi	r19, 0x10	; 16
    500c:	93 2e       	mov	r9, r19
    500e:	f8 01       	movw	r30, r16
    5010:	84 91       	lpm	r24, Z
    5012:	81 11       	cpse	r24, r1
    5014:	24 c0       	rjmp	.+72     	; 0x505e <vfprintf+0x6fa>
    5016:	55 20       	and	r5, r5
    5018:	09 f4       	brne	.+2      	; 0x501c <vfprintf+0x6b8>
    501a:	e4 cc       	rjmp	.-1592   	; 0x49e4 <vfprintf+0x80>
    501c:	b7 01       	movw	r22, r14
    501e:	80 e2       	ldi	r24, 0x20	; 32
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    5026:	5a 94       	dec	r5
    5028:	f6 cf       	rjmp	.-20     	; 0x5016 <vfprintf+0x6b2>
    502a:	f7 01       	movw	r30, r14
    502c:	86 81       	ldd	r24, Z+6	; 0x06
    502e:	97 81       	ldd	r25, Z+7	; 0x07
    5030:	26 c0       	rjmp	.+76     	; 0x507e <vfprintf+0x71a>
    5032:	8f ef       	ldi	r24, 0xFF	; 255
    5034:	9f ef       	ldi	r25, 0xFF	; 255
    5036:	23 c0       	rjmp	.+70     	; 0x507e <vfprintf+0x71a>
    5038:	b7 01       	movw	r22, r14
    503a:	80 e2       	ldi	r24, 0x20	; 32
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    5042:	5a 94       	dec	r5
    5044:	51 10       	cpse	r5, r1
    5046:	f8 cf       	rjmp	.-16     	; 0x5038 <vfprintf+0x6d4>
    5048:	d8 cf       	rjmp	.-80     	; 0x4ffa <vfprintf+0x696>
    504a:	51 2c       	mov	r5, r1
    504c:	b7 01       	movw	r22, r14
    504e:	80 2f       	mov	r24, r16
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    5056:	d3 cf       	rjmp	.-90     	; 0x4ffe <vfprintf+0x69a>
    5058:	04 ed       	ldi	r16, 0xD4	; 212
    505a:	11 e0       	ldi	r17, 0x01	; 1
    505c:	d5 cf       	rjmp	.-86     	; 0x5008 <vfprintf+0x6a4>
    505e:	91 10       	cpse	r9, r1
    5060:	80 52       	subi	r24, 0x20	; 32
    5062:	b7 01       	movw	r22, r14
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0e 94 5d 7a 	call	0xf4ba	; 0xf4ba <fputc>
    506a:	0f 5f       	subi	r16, 0xFF	; 255
    506c:	1f 4f       	sbci	r17, 0xFF	; 255
    506e:	cf cf       	rjmp	.-98     	; 0x500e <vfprintf+0x6aa>
    5070:	23 e0       	ldi	r18, 0x03	; 3
    5072:	25 15       	cp	r18, r5
    5074:	10 f4       	brcc	.+4      	; 0x507a <vfprintf+0x716>
    5076:	83 e0       	ldi	r24, 0x03	; 3
    5078:	bd cf       	rjmp	.-134    	; 0x4ff4 <vfprintf+0x690>
    507a:	51 2c       	mov	r5, r1
    507c:	c0 cf       	rjmp	.-128    	; 0x4ffe <vfprintf+0x69a>
    507e:	60 96       	adiw	r28, 0x10	; 16
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	ff 90       	pop	r15
    5094:	ef 90       	pop	r14
    5096:	df 90       	pop	r13
    5098:	cf 90       	pop	r12
    509a:	bf 90       	pop	r11
    509c:	af 90       	pop	r10
    509e:	9f 90       	pop	r9
    50a0:	8f 90       	pop	r8
    50a2:	7f 90       	pop	r7
    50a4:	6f 90       	pop	r6
    50a6:	5f 90       	pop	r5
    50a8:	4f 90       	pop	r4
    50aa:	3f 90       	pop	r3
    50ac:	2f 90       	pop	r2
    50ae:	08 95       	ret

000050b0 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    50b0:	e8 2f       	mov	r30, r24
    50b2:	e6 95       	lsr	r30
    50b4:	e6 95       	lsr	r30
    50b6:	e6 95       	lsr	r30
    50b8:	93 e0       	ldi	r25, 0x03	; 3
    50ba:	e9 9f       	mul	r30, r25
    50bc:	f0 01       	movw	r30, r0
    50be:	11 24       	eor	r1, r1
    50c0:	32 a1       	ldd	r19, Z+34	; 0x22
    50c2:	28 2f       	mov	r18, r24
    50c4:	27 70       	andi	r18, 0x07	; 7
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <chip_select+0x1e>
    50cc:	88 0f       	add	r24, r24
    50ce:	2a 95       	dec	r18
    50d0:	ea f7       	brpl	.-6      	; 0x50cc <chip_select+0x1c>
    50d2:	98 2f       	mov	r25, r24
    50d4:	90 95       	com	r25
    50d6:	93 23       	and	r25, r19
    50d8:	92 a3       	std	Z+34, r25	; 0x22
    50da:	91 a1       	ldd	r25, Z+33	; 0x21
    50dc:	89 2b       	or	r24, r25
    50de:	81 a3       	std	Z+33, r24	; 0x21
    50e0:	08 95       	ret

000050e2 <chip_deselect>:
    50e2:	e8 2f       	mov	r30, r24
    50e4:	e6 95       	lsr	r30
    50e6:	e6 95       	lsr	r30
    50e8:	e6 95       	lsr	r30
    50ea:	93 e0       	ldi	r25, 0x03	; 3
    50ec:	e9 9f       	mul	r30, r25
    50ee:	f0 01       	movw	r30, r0
    50f0:	11 24       	eor	r1, r1
    50f2:	32 a1       	ldd	r19, Z+34	; 0x22
    50f4:	28 2f       	mov	r18, r24
    50f6:	27 70       	andi	r18, 0x07	; 7
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	01 c0       	rjmp	.+2      	; 0x5100 <chip_deselect+0x1e>
    50fe:	88 0f       	add	r24, r24
    5100:	2a 95       	dec	r18
    5102:	ea f7       	brpl	.-6      	; 0x50fe <chip_deselect+0x1c>
    5104:	93 2f       	mov	r25, r19
    5106:	98 2b       	or	r25, r24
    5108:	92 a3       	std	Z+34, r25	; 0x22
    510a:	91 a1       	ldd	r25, Z+33	; 0x21
    510c:	89 2b       	or	r24, r25
    510e:	81 a3       	std	Z+33, r24	; 0x21
    5110:	08 95       	ret

00005112 <chip_select_init>:
    5112:	e7 cf       	rjmp	.-50     	; 0x50e2 <chip_deselect>
    5114:	08 95       	ret

00005116 <spi_end>:
    5116:	cf 93       	push	r28
    5118:	c8 2f       	mov	r28, r24
    511a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    511e:	8c 17       	cp	r24, r28
    5120:	a9 f0       	breq	.+42     	; 0x514c <spi_end+0x36>
    5122:	8f 3f       	cpi	r24, 0xFF	; 255
    5124:	99 f0       	breq	.+38     	; 0x514c <spi_end+0x36>
    5126:	1f 92       	push	r1
    5128:	cf 93       	push	r28
    512a:	1f 92       	push	r1
    512c:	8f 93       	push	r24
    512e:	82 ed       	ldi	r24, 0xD2	; 210
    5130:	92 e0       	ldi	r25, 0x02	; 2
    5132:	1f 92       	push	r1
    5134:	9f 93       	push	r25
    5136:	8f 93       	push	r24
    5138:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    513c:	8d b7       	in	r24, 0x3d	; 61
    513e:	9e b7       	in	r25, 0x3e	; 62
    5140:	07 96       	adiw	r24, 0x07	; 7
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	f8 94       	cli
    5146:	9e bf       	out	0x3e, r25	; 62
    5148:	0f be       	out	0x3f, r0	; 63
    514a:	8d bf       	out	0x3d, r24	; 61
    514c:	8c 2f       	mov	r24, r28
    514e:	c9 df       	rcall	.-110    	; 0x50e2 <chip_deselect>
    5150:	8f ef       	ldi	r24, 0xFF	; 255
    5152:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5156:	cf 91       	pop	r28
    5158:	08 95       	ret

0000515a <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    515a:	7a c4       	rjmp	.+2292   	; 0x5a50 <SPI0_TX>
    515c:	08 95       	ret

0000515e <spi_RX_buffer>:
    515e:	a2 c4       	rjmp	.+2372   	; 0x5aa4 <SPI0_RX>
    5160:	08 95       	ret

00005162 <spi_TX>:
    5162:	a1 e0       	ldi	r26, 0x01	; 1
    5164:	b0 e0       	ldi	r27, 0x00	; 0
    5166:	e7 eb       	ldi	r30, 0xB7	; 183
    5168:	f8 e2       	ldi	r31, 0x28	; 40
    516a:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    516e:	89 83       	std	Y+1, r24	; 0x01
    5170:	61 e0       	ldi	r22, 0x01	; 1
    5172:	70 e0       	ldi	r23, 0x00	; 0
    5174:	ce 01       	movw	r24, r28
    5176:	01 96       	adiw	r24, 0x01	; 1
    5178:	6b d4       	rcall	.+2262   	; 0x5a50 <SPI0_TX>
    517a:	21 96       	adiw	r28, 0x01	; 1
    517c:	e2 e0       	ldi	r30, 0x02	; 2
    517e:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00005182 <spi_init>:
    5182:	cf 92       	push	r12
    5184:	df 92       	push	r13
    5186:	ef 92       	push	r14
    5188:	ff 92       	push	r15
    518a:	6b 01       	movw	r12, r22
    518c:	7c 01       	movw	r14, r24
    518e:	84 2f       	mov	r24, r20
    5190:	a8 df       	rcall	.-176    	; 0x50e2 <chip_deselect>
    5192:	8f ef       	ldi	r24, 0xFF	; 255
    5194:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5198:	c7 01       	movw	r24, r14
    519a:	b6 01       	movw	r22, r12
    519c:	34 d4       	rcall	.+2152   	; 0x5a06 <SPI0_Init>
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	f5 d3       	rcall	.+2026   	; 0x598e <SPI0_Mode>
    51a4:	8f ef       	ldi	r24, 0xFF	; 255
    51a6:	dd df       	rcall	.-70     	; 0x5162 <spi_TX>
    51a8:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    51ac:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    51b0:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    51b4:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	df 90       	pop	r13
    51be:	cf 90       	pop	r12
    51c0:	08 95       	ret

000051c2 <spi_begin>:
    51c2:	cf 92       	push	r12
    51c4:	df 92       	push	r13
    51c6:	ef 92       	push	r14
    51c8:	ff 92       	push	r15
    51ca:	cf 93       	push	r28
    51cc:	df 93       	push	r29
    51ce:	6b 01       	movw	r12, r22
    51d0:	7c 01       	movw	r14, r24
    51d2:	ea 01       	movw	r28, r20
    51d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    51d8:	8f 3f       	cpi	r24, 0xFF	; 255
    51da:	99 f0       	breq	.+38     	; 0x5202 <spi_begin+0x40>
    51dc:	df 93       	push	r29
    51de:	4f 93       	push	r20
    51e0:	1f 92       	push	r1
    51e2:	8f 93       	push	r24
    51e4:	80 ef       	ldi	r24, 0xF0	; 240
    51e6:	92 e0       	ldi	r25, 0x02	; 2
    51e8:	1f 92       	push	r1
    51ea:	9f 93       	push	r25
    51ec:	8f 93       	push	r24
    51ee:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    51f2:	8d b7       	in	r24, 0x3d	; 61
    51f4:	9e b7       	in	r25, 0x3e	; 62
    51f6:	07 96       	adiw	r24, 0x07	; 7
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	9e bf       	out	0x3e, r25	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	8d bf       	out	0x3d, r24	; 61
    5202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    520a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    520e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5212:	8c 15       	cp	r24, r12
    5214:	9d 05       	cpc	r25, r13
    5216:	ae 05       	cpc	r26, r14
    5218:	bf 05       	cpc	r27, r15
    521a:	21 f0       	breq	.+8      	; 0x5224 <spi_begin+0x62>
    521c:	ae 01       	movw	r20, r28
    521e:	c7 01       	movw	r24, r14
    5220:	b6 01       	movw	r22, r12
    5222:	af df       	rcall	.-162    	; 0x5182 <spi_init>
    5224:	8c 2f       	mov	r24, r28
    5226:	44 df       	rcall	.-376    	; 0x50b0 <chip_select>
    5228:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    522c:	df 91       	pop	r29
    522e:	cf 91       	pop	r28
    5230:	ff 90       	pop	r15
    5232:	ef 90       	pop	r14
    5234:	df 90       	pop	r13
    5236:	cf 90       	pop	r12
    5238:	08 95       	ret

0000523a <spi_TXRX>:
    523a:	a1 e0       	ldi	r26, 0x01	; 1
    523c:	b0 e0       	ldi	r27, 0x00	; 0
    523e:	e3 e2       	ldi	r30, 0x23	; 35
    5240:	f9 e2       	ldi	r31, 0x29	; 41
    5242:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    5246:	89 83       	std	Y+1, r24	; 0x01
    5248:	61 e0       	ldi	r22, 0x01	; 1
    524a:	70 e0       	ldi	r23, 0x00	; 0
    524c:	ce 01       	movw	r24, r28
    524e:	01 96       	adiw	r24, 0x01	; 1
    5250:	13 d4       	rcall	.+2086   	; 0x5a78 <SPI0_TXRX>
    5252:	89 81       	ldd	r24, Y+1	; 0x01
    5254:	21 96       	adiw	r28, 0x01	; 1
    5256:	e2 e0       	ldi	r30, 0x02	; 2
    5258:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000525c <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    525c:	a2 e0       	ldi	r26, 0x02	; 2
    525e:	b0 e0       	ldi	r27, 0x00	; 0
    5260:	e4 e3       	ldi	r30, 0x34	; 52
    5262:	f9 e2       	ldi	r31, 0x29	; 41
    5264:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    5268:	20 91 2f 1f 	lds	r18, 0x1F2F	; 0x801f2f <__brkval>
    526c:	30 91 30 1f 	lds	r19, 0x1F30	; 0x801f30 <__brkval+0x1>
    5270:	21 15       	cp	r18, r1
    5272:	31 05       	cpc	r19, r1
    5274:	11 f4       	brne	.+4      	; 0x527a <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5276:	23 e3       	ldi	r18, 0x33	; 51
    5278:	3f e1       	ldi	r19, 0x1F	; 31

    ret = (uint16_t) &v - top;
    return ( ret );
}
    527a:	ce 01       	movw	r24, r28
    527c:	01 96       	adiw	r24, 0x01	; 1
    527e:	82 1b       	sub	r24, r18
    5280:	93 0b       	sbc	r25, r19
    5282:	22 96       	adiw	r28, 0x02	; 2
    5284:	e2 e0       	ldi	r30, 0x02	; 2
    5286:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000528a <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    528a:	a2 e0       	ldi	r26, 0x02	; 2
    528c:	b0 e0       	ldi	r27, 0x00	; 0
    528e:	eb e4       	ldi	r30, 0x4B	; 75
    5290:	f9 e2       	ldi	r31, 0x29	; 41
    5292:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5296:	e2 df       	rcall	.-60     	; 0x525c <freeRam>
    5298:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    529a:	9a 83       	std	Y+2, r25	; 0x02
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	87 e1       	ldi	r24, 0x17	; 23
    52a2:	94 e0       	ldi	r25, 0x04	; 4
    52a4:	1f 92       	push	r1
    52a6:	9f 93       	push	r25
    52a8:	8f 93       	push	r24
    52aa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    52ae:	8f ef       	ldi	r24, 0xFF	; 255
    52b0:	90 e4       	ldi	r25, 0x40	; 64
    52b2:	9f 93       	push	r25
    52b4:	8f 93       	push	r24
    52b6:	84 e0       	ldi	r24, 0x04	; 4
    52b8:	94 e0       	ldi	r25, 0x04	; 4
    52ba:	1f 92       	push	r1
    52bc:	9f 93       	push	r25
    52be:	8f 93       	push	r24
    52c0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    52c4:	ce 01       	movw	r24, r28
    52c6:	01 96       	adiw	r24, 0x01	; 1
    52c8:	9f 93       	push	r25
    52ca:	8f 93       	push	r24
    52cc:	81 ef       	ldi	r24, 0xF1	; 241
    52ce:	93 e0       	ldi	r25, 0x03	; 3
    52d0:	1f 92       	push	r1
    52d2:	9f 93       	push	r25
    52d4:	8f 93       	push	r24
    52d6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    52da:	83 e3       	ldi	r24, 0x33	; 51
    52dc:	9f e1       	ldi	r25, 0x1F	; 31
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	80 e6       	ldi	r24, 0x60	; 96
    52e4:	97 e1       	ldi	r25, 0x17	; 23
    52e6:	9f 93       	push	r25
    52e8:	8f 93       	push	r24
    52ea:	83 ed       	ldi	r24, 0xD3	; 211
    52ec:	93 e0       	ldi	r25, 0x03	; 3
    52ee:	1f 92       	push	r1
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    52f8:	80 e6       	ldi	r24, 0x60	; 96
    52fa:	97 e1       	ldi	r25, 0x17	; 23
    52fc:	9f 93       	push	r25
    52fe:	8f 93       	push	r24
    5300:	80 e0       	ldi	r24, 0x00	; 0
    5302:	91 e0       	ldi	r25, 0x01	; 1
    5304:	9f 93       	push	r25
    5306:	8f 93       	push	r24
    5308:	85 eb       	ldi	r24, 0xB5	; 181
    530a:	93 e0       	ldi	r25, 0x03	; 3
    530c:	1f 92       	push	r1
    530e:	9f 93       	push	r25
    5310:	8f 93       	push	r24
    5312:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	9f 93       	push	r25
    531c:	8f 93       	push	r24
    531e:	83 e3       	ldi	r24, 0x33	; 51
    5320:	9f e1       	ldi	r25, 0x1F	; 31
    5322:	9f 93       	push	r25
    5324:	8f 93       	push	r24
    5326:	87 e9       	ldi	r24, 0x97	; 151
    5328:	93 e0       	ldi	r25, 0x03	; 3
    532a:	1f 92       	push	r1
    532c:	9f 93       	push	r25
    532e:	8f 93       	push	r24
    5330:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    5334:	0f b6       	in	r0, 0x3f	; 63
    5336:	f8 94       	cli
    5338:	de bf       	out	0x3e, r29	; 62
    533a:	0f be       	out	0x3f, r0	; 63
    533c:	cd bf       	out	0x3d, r28	; 61
    533e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    5342:	8f 93       	push	r24
    5344:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    5348:	8f 93       	push	r24
    534a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    534e:	8f 93       	push	r24
    5350:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    5354:	8f 93       	push	r24
    5356:	89 e7       	ldi	r24, 0x79	; 121
    5358:	93 e0       	ldi	r25, 0x03	; 3
    535a:	1f 92       	push	r1
    535c:	9f 93       	push	r25
    535e:	8f 93       	push	r24
    5360:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    5364:	80 91 30 1f 	lds	r24, 0x1F30	; 0x801f30 <__brkval+0x1>
    5368:	8f 93       	push	r24
    536a:	80 91 2f 1f 	lds	r24, 0x1F2F	; 0x801f2f <__brkval>
    536e:	8f 93       	push	r24
    5370:	85 e6       	ldi	r24, 0x65	; 101
    5372:	93 e0       	ldi	r25, 0x03	; 3
    5374:	1f 92       	push	r1
    5376:	9f 93       	push	r25
    5378:	8f 93       	push	r24
    537a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

}
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	cd bf       	out	0x3d, r28	; 61
    5388:	22 96       	adiw	r28, 0x02	; 2
    538a:	e2 e0       	ldi	r30, 0x02	; 2
    538c:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00005390 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	18 2f       	mov	r17, r24
    539e:	09 2f       	mov	r16, r25
    53a0:	f6 2e       	mov	r15, r22
    53a2:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    53a4:	0e 94 d8 ed 	call	0x1dbb0	; 0x1dbb0 <calloc>
    53a8:	ec 01       	movw	r28, r24
	if(!p)
    53aa:	89 2b       	or	r24, r25
    53ac:	99 f4       	brne	.+38     	; 0x53d4 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    53ae:	ef 92       	push	r14
    53b0:	ff 92       	push	r15
    53b2:	0f 93       	push	r16
    53b4:	1f 93       	push	r17
    53b6:	8a e4       	ldi	r24, 0x4A	; 74
    53b8:	93 e0       	ldi	r25, 0x03	; 3
    53ba:	1f 92       	push	r1
    53bc:	9f 93       	push	r25
    53be:	8f 93       	push	r24
    53c0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    53c4:	8d b7       	in	r24, 0x3d	; 61
    53c6:	9e b7       	in	r25, 0x3e	; 62
    53c8:	07 96       	adiw	r24, 0x07	; 7
    53ca:	0f b6       	in	r0, 0x3f	; 63
    53cc:	f8 94       	cli
    53ce:	9e bf       	out	0x3e, r25	; 62
    53d0:	0f be       	out	0x3f, r0	; 63
    53d2:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    53d4:	ce 01       	movw	r24, r28
    53d6:	cd b7       	in	r28, 0x3d	; 61
    53d8:	de b7       	in	r29, 0x3e	; 62
    53da:	e6 e0       	ldi	r30, 0x06	; 6
    53dc:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

000053e0 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	df 93       	push	r29
    53e8:	18 2f       	mov	r17, r24
    53ea:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    53ec:	61 e0       	ldi	r22, 0x01	; 1
    53ee:	70 e0       	ldi	r23, 0x00	; 0
    53f0:	0e 94 d8 ed 	call	0x1dbb0	; 0x1dbb0 <calloc>
    53f4:	ec 01       	movw	r28, r24
    if(!p)
    53f6:	89 2b       	or	r24, r25
    53f8:	71 f4       	brne	.+28     	; 0x5416 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    53fa:	0f 93       	push	r16
    53fc:	1f 93       	push	r17
    53fe:	82 e3       	ldi	r24, 0x32	; 50
    5400:	93 e0       	ldi	r25, 0x03	; 3
    5402:	1f 92       	push	r1
    5404:	9f 93       	push	r25
    5406:	8f 93       	push	r24
    5408:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    540c:	0f 90       	pop	r0
    540e:	0f 90       	pop	r0
    5410:	0f 90       	pop	r0
    5412:	0f 90       	pop	r0
    5414:	0f 90       	pop	r0
    }
    return(p);
}
    5416:	ce 01       	movw	r24, r28
    5418:	df 91       	pop	r29
    541a:	cf 91       	pop	r28
    541c:	1f 91       	pop	r17
    541e:	0f 91       	pop	r16
    5420:	08 95       	ret

00005422 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	39 f1       	breq	.+78     	; 0x5474 <safefree+0x52>
        return;

    if(__brkval)
    5426:	20 91 2f 1f 	lds	r18, 0x1F2F	; 0x801f2f <__brkval>
    542a:	30 91 30 1f 	lds	r19, 0x1F30	; 0x801f30 <__brkval+0x1>
    542e:	21 15       	cp	r18, r1
    5430:	31 05       	cpc	r19, r1
    5432:	11 f4       	brne	.+4      	; 0x5438 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5434:	23 e3       	ldi	r18, 0x33	; 51
    5436:	3f e1       	ldi	r19, 0x1F	; 31

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    5438:	4f e1       	ldi	r20, 0x1F	; 31
    543a:	83 33       	cpi	r24, 0x33	; 51
    543c:	94 07       	cpc	r25, r20
    543e:	30 f0       	brcs	.+12     	; 0x544c <safefree+0x2a>
    5440:	28 17       	cp	r18, r24
    5442:	39 07       	cpc	r19, r25
    5444:	18 f0       	brcs	.+6      	; 0x544c <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    5446:	0c 94 8a ee 	jmp	0x1dd14	; 0x1dd14 <free>
        return;
    544a:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    544c:	3f 93       	push	r19
    544e:	2f 93       	push	r18
    5450:	9f 93       	push	r25
    5452:	8f 93       	push	r24
    5454:	8d e0       	ldi	r24, 0x0D	; 13
    5456:	93 e0       	ldi	r25, 0x03	; 3
    5458:	1f 92       	push	r1
    545a:	9f 93       	push	r25
    545c:	8f 93       	push	r24
    545e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    PrintFree();
    5462:	13 df       	rcall	.-474    	; 0x528a <PrintFree>
    5464:	8d b7       	in	r24, 0x3d	; 61
    5466:	9e b7       	in	r25, 0x3e	; 62
    5468:	07 96       	adiw	r24, 0x07	; 7
    546a:	0f b6       	in	r0, 0x3f	; 63
    546c:	f8 94       	cli
    546e:	9e bf       	out	0x3e, r25	; 62
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	8d bf       	out	0x3d, r24	; 61
    5474:	08 95       	ret

00005476 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5476:	64 36       	cpi	r22, 0x64	; 100
    5478:	71 05       	cpc	r23, r1
    547a:	81 05       	cpc	r24, r1
    547c:	91 05       	cpc	r25, r1
    547e:	58 f0       	brcs	.+22     	; 0x5496 <delayus+0x20>
    {
        us -= 100U;
    5480:	64 56       	subi	r22, 0x64	; 100
    5482:	71 09       	sbc	r23, r1
    5484:	81 09       	sbc	r24, r1
    5486:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5488:	e3 ef       	ldi	r30, 0xF3	; 243
    548a:	f1 e0       	ldi	r31, 0x01	; 1
    548c:	31 97       	sbiw	r30, 0x01	; 1
    548e:	f1 f7       	brne	.-4      	; 0x548c <delayus+0x16>
    5490:	00 c0       	rjmp	.+0      	; 0x5492 <delayus+0x1c>
    5492:	00 00       	nop
    5494:	f0 cf       	rjmp	.-32     	; 0x5476 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5496:	6a 30       	cpi	r22, 0x0A	; 10
    5498:	71 05       	cpc	r23, r1
    549a:	81 05       	cpc	r24, r1
    549c:	91 05       	cpc	r25, r1
    549e:	48 f0       	brcs	.+18     	; 0x54b2 <delayus+0x3c>
    {
        us -= 10U;
    54a0:	6a 50       	subi	r22, 0x0A	; 10
    54a2:	71 09       	sbc	r23, r1
    54a4:	81 09       	sbc	r24, r1
    54a6:	91 09       	sbc	r25, r1
    54a8:	f2 e4       	ldi	r31, 0x42	; 66
    54aa:	fa 95       	dec	r31
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <delayus+0x34>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <delayus+0x3a>
    54b0:	f2 cf       	rjmp	.-28     	; 0x5496 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    54b2:	61 15       	cp	r22, r1
    54b4:	71 05       	cpc	r23, r1
    54b6:	81 05       	cpc	r24, r1
    54b8:	91 05       	cpc	r25, r1
    54ba:	49 f0       	breq	.+18     	; 0x54ce <delayus+0x58>
    {
        --us;
    54bc:	61 50       	subi	r22, 0x01	; 1
    54be:	71 09       	sbc	r23, r1
    54c0:	81 09       	sbc	r24, r1
    54c2:	91 09       	sbc	r25, r1
    54c4:	26 e0       	ldi	r18, 0x06	; 6
    54c6:	2a 95       	dec	r18
    54c8:	f1 f7       	brne	.-4      	; 0x54c6 <delayus+0x50>
    54ca:	00 c0       	rjmp	.+0      	; 0x54cc <delayus+0x56>
    54cc:	f2 cf       	rjmp	.-28     	; 0x54b2 <delayus+0x3c>
        _delay_us(1);
    }
}
    54ce:	08 95       	ret

000054d0 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    54d0:	61 15       	cp	r22, r1
    54d2:	71 05       	cpc	r23, r1
    54d4:	81 05       	cpc	r24, r1
    54d6:	91 05       	cpc	r25, r1
    54d8:	09 f4       	brne	.+2      	; 0x54dc <delayms+0xc>
    54da:	41 c0       	rjmp	.+130    	; 0x555e <delayms+0x8e>
    54dc:	e3 ef       	ldi	r30, 0xF3	; 243
    54de:	f1 e0       	ldi	r31, 0x01	; 1
    54e0:	31 97       	sbiw	r30, 0x01	; 1
    54e2:	f1 f7       	brne	.-4      	; 0x54e0 <delayms+0x10>
    54e4:	00 c0       	rjmp	.+0      	; 0x54e6 <delayms+0x16>
    54e6:	00 00       	nop
    54e8:	e3 ef       	ldi	r30, 0xF3	; 243
    54ea:	f1 e0       	ldi	r31, 0x01	; 1
    54ec:	31 97       	sbiw	r30, 0x01	; 1
    54ee:	f1 f7       	brne	.-4      	; 0x54ec <delayms+0x1c>
    54f0:	00 c0       	rjmp	.+0      	; 0x54f2 <delayms+0x22>
    54f2:	00 00       	nop
    54f4:	e3 ef       	ldi	r30, 0xF3	; 243
    54f6:	f1 e0       	ldi	r31, 0x01	; 1
    54f8:	31 97       	sbiw	r30, 0x01	; 1
    54fa:	f1 f7       	brne	.-4      	; 0x54f8 <delayms+0x28>
    54fc:	00 c0       	rjmp	.+0      	; 0x54fe <delayms+0x2e>
    54fe:	00 00       	nop
    5500:	e3 ef       	ldi	r30, 0xF3	; 243
    5502:	f1 e0       	ldi	r31, 0x01	; 1
    5504:	31 97       	sbiw	r30, 0x01	; 1
    5506:	f1 f7       	brne	.-4      	; 0x5504 <delayms+0x34>
    5508:	00 c0       	rjmp	.+0      	; 0x550a <delayms+0x3a>
    550a:	00 00       	nop
    550c:	e3 ef       	ldi	r30, 0xF3	; 243
    550e:	f1 e0       	ldi	r31, 0x01	; 1
    5510:	31 97       	sbiw	r30, 0x01	; 1
    5512:	f1 f7       	brne	.-4      	; 0x5510 <delayms+0x40>
    5514:	00 c0       	rjmp	.+0      	; 0x5516 <delayms+0x46>
    5516:	00 00       	nop
    5518:	e3 ef       	ldi	r30, 0xF3	; 243
    551a:	f1 e0       	ldi	r31, 0x01	; 1
    551c:	31 97       	sbiw	r30, 0x01	; 1
    551e:	f1 f7       	brne	.-4      	; 0x551c <delayms+0x4c>
    5520:	00 c0       	rjmp	.+0      	; 0x5522 <delayms+0x52>
    5522:	00 00       	nop
    5524:	e3 ef       	ldi	r30, 0xF3	; 243
    5526:	f1 e0       	ldi	r31, 0x01	; 1
    5528:	31 97       	sbiw	r30, 0x01	; 1
    552a:	f1 f7       	brne	.-4      	; 0x5528 <delayms+0x58>
    552c:	00 c0       	rjmp	.+0      	; 0x552e <delayms+0x5e>
    552e:	00 00       	nop
    5530:	e3 ef       	ldi	r30, 0xF3	; 243
    5532:	f1 e0       	ldi	r31, 0x01	; 1
    5534:	31 97       	sbiw	r30, 0x01	; 1
    5536:	f1 f7       	brne	.-4      	; 0x5534 <delayms+0x64>
    5538:	00 c0       	rjmp	.+0      	; 0x553a <delayms+0x6a>
    553a:	00 00       	nop
    553c:	e3 ef       	ldi	r30, 0xF3	; 243
    553e:	f1 e0       	ldi	r31, 0x01	; 1
    5540:	31 97       	sbiw	r30, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <delayms+0x70>
    5544:	00 c0       	rjmp	.+0      	; 0x5546 <delayms+0x76>
    5546:	00 00       	nop
    5548:	e3 ef       	ldi	r30, 0xF3	; 243
    554a:	f1 e0       	ldi	r31, 0x01	; 1
    554c:	31 97       	sbiw	r30, 0x01	; 1
    554e:	f1 f7       	brne	.-4      	; 0x554c <delayms+0x7c>
    5550:	00 c0       	rjmp	.+0      	; 0x5552 <delayms+0x82>
    5552:	00 00       	nop
    5554:	61 50       	subi	r22, 0x01	; 1
    5556:	71 09       	sbc	r23, r1
    5558:	81 09       	sbc	r24, r1
    555a:	91 09       	sbc	r25, r1
    555c:	b9 cf       	rjmp	.-142    	; 0x54d0 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    555e:	08 95       	ret

00005560 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5560:	4f 92       	push	r4
    5562:	5f 92       	push	r5
    5564:	6f 92       	push	r6
    5566:	7f 92       	push	r7
    5568:	8f 92       	push	r8
    556a:	9f 92       	push	r9
    556c:	af 92       	push	r10
    556e:	bf 92       	push	r11
    5570:	cf 92       	push	r12
    5572:	df 92       	push	r13
    5574:	ef 92       	push	r14
    5576:	ff 92       	push	r15
    5578:	cf 93       	push	r28
    557a:	df 93       	push	r29
    557c:	5a 01       	movw	r10, r20
    557e:	e9 01       	movw	r28, r18
    5580:	0e 94 76 ec 	call	0x1d8ec	; 0x1d8ec <__floatunsisf>
    5584:	2b 01       	movw	r4, r22
    5586:	3c 01       	movw	r6, r24
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	40 e0       	ldi	r20, 0x00	; 0
    558e:	51 e4       	ldi	r21, 0x41	; 65
    5590:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    5594:	9b 01       	movw	r18, r22
    5596:	ac 01       	movw	r20, r24
    5598:	60 e8       	ldi	r22, 0x80	; 128
    559a:	76 e9       	ldi	r23, 0x96	; 150
    559c:	88 e9       	ldi	r24, 0x98	; 152
    559e:	9b e4       	ldi	r25, 0x4B	; 75
    55a0:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    55a4:	20 e0       	ldi	r18, 0x00	; 0
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	40 e8       	ldi	r20, 0x80	; 128
    55aa:	5f e3       	ldi	r21, 0x3F	; 63
    55ac:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    55b0:	0e 94 8f ed 	call	0x1db1e	; 0x1db1e <round>
    55b4:	0e 94 4a ec 	call	0x1d894	; 0x1d894 <__fixunssfsi>
    55b8:	6b 01       	movw	r12, r22
    55ba:	7c 01       	movw	r14, r24
    55bc:	c1 14       	cp	r12, r1
    55be:	80 e1       	ldi	r24, 0x10	; 16
    55c0:	d8 06       	cpc	r13, r24
    55c2:	e1 04       	cpc	r14, r1
    55c4:	f1 04       	cpc	r15, r1
    55c6:	58 f4       	brcc	.+22     	; 0x55de <uart_ubr+0x7e>
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	f5 01       	movw	r30, r10
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	80 83       	st	Z, r24
    55d2:	81 2c       	mov	r8, r1
    55d4:	91 2c       	mov	r9, r1
    55d6:	a1 2c       	mov	r10, r1
    55d8:	21 e4       	ldi	r18, 0x41	; 65
    55da:	b2 2e       	mov	r11, r18
    55dc:	31 c0       	rjmp	.+98     	; 0x5640 <uart_ubr+0xe0>
    55de:	f5 01       	movw	r30, r10
    55e0:	11 82       	std	Z+1, r1	; 0x01
    55e2:	10 82       	st	Z, r1
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	40 e8       	ldi	r20, 0x80	; 128
    55ea:	51 e4       	ldi	r21, 0x41	; 65
    55ec:	c3 01       	movw	r24, r6
    55ee:	b2 01       	movw	r22, r4
    55f0:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    55f4:	9b 01       	movw	r18, r22
    55f6:	ac 01       	movw	r20, r24
    55f8:	60 e8       	ldi	r22, 0x80	; 128
    55fa:	76 e9       	ldi	r23, 0x96	; 150
    55fc:	88 e9       	ldi	r24, 0x98	; 152
    55fe:	9b e4       	ldi	r25, 0x4B	; 75
    5600:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	40 e8       	ldi	r20, 0x80	; 128
    560a:	5f e3       	ldi	r21, 0x3F	; 63
    560c:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    5610:	0e 94 8f ed 	call	0x1db1e	; 0x1db1e <round>
    5614:	0e 94 4a ec 	call	0x1d894	; 0x1d894 <__fixunssfsi>
    5618:	6b 01       	movw	r12, r22
    561a:	7c 01       	movw	r14, r24
    561c:	81 2c       	mov	r8, r1
    561e:	91 2c       	mov	r9, r1
    5620:	90 e8       	ldi	r25, 0x80	; 128
    5622:	a9 2e       	mov	r10, r25
    5624:	91 e4       	ldi	r25, 0x41	; 65
    5626:	b9 2e       	mov	r11, r25
    5628:	c1 14       	cp	r12, r1
    562a:	f0 e1       	ldi	r31, 0x10	; 16
    562c:	df 06       	cpc	r13, r31
    562e:	e1 04       	cpc	r14, r1
    5630:	f1 04       	cpc	r15, r1
    5632:	30 f0       	brcs	.+12     	; 0x5640 <uart_ubr+0xe0>
    5634:	cc 24       	eor	r12, r12
    5636:	ca 94       	dec	r12
    5638:	8f e0       	ldi	r24, 0x0F	; 15
    563a:	d8 2e       	mov	r13, r24
    563c:	e1 2c       	mov	r14, r1
    563e:	f1 2c       	mov	r15, r1
    5640:	c7 01       	movw	r24, r14
    5642:	b6 01       	movw	r22, r12
    5644:	6f 5f       	subi	r22, 0xFF	; 255
    5646:	7f 4f       	sbci	r23, 0xFF	; 255
    5648:	8f 4f       	sbci	r24, 0xFF	; 255
    564a:	9f 4f       	sbci	r25, 0xFF	; 255
    564c:	0e 94 76 ec 	call	0x1d8ec	; 0x1d8ec <__floatunsisf>
    5650:	a5 01       	movw	r20, r10
    5652:	94 01       	movw	r18, r8
    5654:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    5658:	9b 01       	movw	r18, r22
    565a:	ac 01       	movw	r20, r24
    565c:	60 e8       	ldi	r22, 0x80	; 128
    565e:	76 e9       	ldi	r23, 0x96	; 150
    5660:	88 e9       	ldi	r24, 0x98	; 152
    5662:	9b e4       	ldi	r25, 0x4B	; 75
    5664:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    5668:	0e 94 4a ec 	call	0x1d894	; 0x1d894 <__fixunssfsi>
    566c:	68 83       	st	Y, r22
    566e:	79 83       	std	Y+1, r23	; 0x01
    5670:	8a 83       	std	Y+2, r24	; 0x02
    5672:	9b 83       	std	Y+3, r25	; 0x03
    5674:	c6 01       	movw	r24, r12
    5676:	df 91       	pop	r29
    5678:	cf 91       	pop	r28
    567a:	ff 90       	pop	r15
    567c:	ef 90       	pop	r14
    567e:	df 90       	pop	r13
    5680:	cf 90       	pop	r12
    5682:	bf 90       	pop	r11
    5684:	af 90       	pop	r10
    5686:	9f 90       	pop	r9
    5688:	8f 90       	pop	r8
    568a:	7f 90       	pop	r7
    568c:	6f 90       	pop	r6
    568e:	5f 90       	pop	r5
    5690:	4f 90       	pop	r4
    5692:	08 95       	ret

00005694 <uart_init>:
    5694:	a6 e0       	ldi	r26, 0x06	; 6
    5696:	b0 e0       	ldi	r27, 0x00	; 0
    5698:	e0 e5       	ldi	r30, 0x50	; 80
    569a:	fb e2       	ldi	r31, 0x2B	; 43
    569c:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    56a0:	1e 82       	std	Y+6, r1	; 0x06
    56a2:	1d 82       	std	Y+5, r1	; 0x05
    56a4:	81 11       	cpse	r24, r1
    56a6:	36 c0       	rjmp	.+108    	; 0x5714 <uart_init+0x80>
    56a8:	cb 01       	movw	r24, r22
    56aa:	ba 01       	movw	r22, r20
    56ac:	9e 01       	movw	r18, r28
    56ae:	2f 5f       	subi	r18, 0xFF	; 255
    56b0:	3f 4f       	sbci	r19, 0xFF	; 255
    56b2:	ae 01       	movw	r20, r28
    56b4:	4b 5f       	subi	r20, 0xFB	; 251
    56b6:	5f 4f       	sbci	r21, 0xFF	; 255
    56b8:	53 df       	rcall	.-346    	; 0x5560 <uart_ubr>
    56ba:	f8 94       	cli
    56bc:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x4>
    56c0:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x3>
    56c4:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <uarts>
    56c8:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts+0x1>
    56cc:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x2>
    56d0:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x5>
    56d4:	78 94       	sei
    56d6:	f8 94       	cli
    56d8:	58 9a       	sbi	0x0b, 0	; 11
    56da:	59 9a       	sbi	0x0b, 1	; 11
    56dc:	50 98       	cbi	0x0a, 0	; 10
    56de:	51 9a       	sbi	0x0a, 1	; 10
    56e0:	28 e9       	ldi	r18, 0x98	; 152
    56e2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    56e6:	2d 81       	ldd	r18, Y+5	; 0x05
    56e8:	3e 81       	ldd	r19, Y+6	; 0x06
    56ea:	23 2b       	or	r18, r19
    56ec:	19 f0       	breq	.+6      	; 0x56f4 <uart_init+0x60>
    56ee:	22 e0       	ldi	r18, 0x02	; 2
    56f0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    56f4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    56f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    56fc:	78 94       	sei
    56fe:	6f e3       	ldi	r22, 0x3F	; 63
    5700:	7c e2       	ldi	r23, 0x2C	; 44
    5702:	84 e5       	ldi	r24, 0x54	; 84
    5704:	9c e2       	ldi	r25, 0x2C	; 44
    5706:	0e 94 c4 7d 	call	0xfb88	; 0xfb88 <fdevopen>
    570a:	69 81       	ldd	r22, Y+1	; 0x01
    570c:	7a 81       	ldd	r23, Y+2	; 0x02
    570e:	8b 81       	ldd	r24, Y+3	; 0x03
    5710:	9c 81       	ldd	r25, Y+4	; 0x04
    5712:	03 c0       	rjmp	.+6      	; 0x571a <uart_init+0x86>
    5714:	60 e0       	ldi	r22, 0x00	; 0
    5716:	70 e0       	ldi	r23, 0x00	; 0
    5718:	cb 01       	movw	r24, r22
    571a:	26 96       	adiw	r28, 0x06	; 6
    571c:	e2 e0       	ldi	r30, 0x02	; 2
    571e:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00005722 <uart_rx_interrupt>:
    5722:	27 e5       	ldi	r18, 0x57	; 87
    5724:	82 9f       	mul	r24, r18
    5726:	c0 01       	movw	r24, r0
    5728:	11 24       	eor	r1, r1
    572a:	fc 01       	movw	r30, r24
    572c:	ea 50       	subi	r30, 0x0A	; 10
    572e:	f6 4e       	sbci	r31, 0xE6	; 230
    5730:	83 81       	ldd	r24, Z+3	; 0x03
    5732:	94 81       	ldd	r25, Z+4	; 0x04
    5734:	80 35       	cpi	r24, 0x50	; 80
    5736:	91 05       	cpc	r25, r1
    5738:	84 f4       	brge	.+32     	; 0x575a <uart_rx_interrupt+0x38>
    573a:	30 81       	ld	r19, Z
    573c:	21 e0       	ldi	r18, 0x01	; 1
    573e:	23 0f       	add	r18, r19
    5740:	20 83       	st	Z, r18
    5742:	df 01       	movw	r26, r30
    5744:	a3 0f       	add	r26, r19
    5746:	b1 1d       	adc	r27, r1
    5748:	16 96       	adiw	r26, 0x06	; 6
    574a:	6c 93       	st	X, r22
    574c:	01 96       	adiw	r24, 0x01	; 1
    574e:	94 83       	std	Z+4, r25	; 0x04
    5750:	83 83       	std	Z+3, r24	; 0x03
    5752:	20 35       	cpi	r18, 0x50	; 80
    5754:	28 f0       	brcs	.+10     	; 0x5760 <uart_rx_interrupt+0x3e>
    5756:	10 82       	st	Z, r1
    5758:	08 95       	ret
    575a:	85 81       	ldd	r24, Z+5	; 0x05
    575c:	81 60       	ori	r24, 0x01	; 1
    575e:	85 83       	std	Z+5, r24	; 0x05
    5760:	08 95       	ret

00005762 <__vector_20>:
    5762:	1f 92       	push	r1
    5764:	0f 92       	push	r0
    5766:	0f b6       	in	r0, 0x3f	; 63
    5768:	0f 92       	push	r0
    576a:	11 24       	eor	r1, r1
    576c:	0b b6       	in	r0, 0x3b	; 59
    576e:	0f 92       	push	r0
    5770:	2f 93       	push	r18
    5772:	3f 93       	push	r19
    5774:	4f 93       	push	r20
    5776:	5f 93       	push	r21
    5778:	6f 93       	push	r22
    577a:	7f 93       	push	r23
    577c:	8f 93       	push	r24
    577e:	9f 93       	push	r25
    5780:	af 93       	push	r26
    5782:	bf 93       	push	r27
    5784:	ef 93       	push	r30
    5786:	ff 93       	push	r31
    5788:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    578c:	80 e0       	ldi	r24, 0x00	; 0
    578e:	c9 df       	rcall	.-110    	; 0x5722 <uart_rx_interrupt>
    5790:	ff 91       	pop	r31
    5792:	ef 91       	pop	r30
    5794:	bf 91       	pop	r27
    5796:	af 91       	pop	r26
    5798:	9f 91       	pop	r25
    579a:	8f 91       	pop	r24
    579c:	7f 91       	pop	r23
    579e:	6f 91       	pop	r22
    57a0:	5f 91       	pop	r21
    57a2:	4f 91       	pop	r20
    57a4:	3f 91       	pop	r19
    57a6:	2f 91       	pop	r18
    57a8:	0f 90       	pop	r0
    57aa:	0b be       	out	0x3b, r0	; 59
    57ac:	0f 90       	pop	r0
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	0f 90       	pop	r0
    57b2:	1f 90       	pop	r1
    57b4:	18 95       	reti

000057b6 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    57b6:	81 11       	cpse	r24, r1
    57b8:	07 c0       	rjmp	.+14     	; 0x57c8 <uart_rx_count+0x12>
        return(EOF);

    cli();
    57ba:	f8 94       	cli

    count = uarts[uart].rx_count;
    57bc:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <uarts+0x3>
    57c0:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <uarts+0x4>

    sei();
    57c4:	78 94       	sei

    return (count );
    57c6:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    57c8:	8f ef       	ldi	r24, 0xFF	; 255
    57ca:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    57cc:	08 95       	ret

000057ce <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    57ce:	81 11       	cpse	r24, r1
    57d0:	21 c0       	rjmp	.+66     	; 0x5814 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    57d2:	80 e0       	ldi	r24, 0x00	; 0
    57d4:	f0 df       	rcall	.-32     	; 0x57b6 <uart_rx_count>
    57d6:	18 16       	cp	r1, r24
    57d8:	19 06       	cpc	r1, r25
    57da:	dc f7       	brge	.-10     	; 0x57d2 <uart_get_tail+0x4>
		;

    cli();
    57dc:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    57de:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <uarts+0x1>
    57e2:	91 e0       	ldi	r25, 0x01	; 1
    57e4:	9e 0f       	add	r25, r30
    57e6:	90 93 f7 19 	sts	0x19F7, r25	; 0x8019f7 <uarts+0x1>
    57ea:	f0 e0       	ldi	r31, 0x00	; 0
    57ec:	ea 50       	subi	r30, 0x0A	; 10
    57ee:	f6 4e       	sbci	r31, 0xE6	; 230
    57f0:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    57f2:	90 35       	cpi	r25, 0x50	; 80
    57f4:	10 f0       	brcs	.+4      	; 0x57fa <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    57f6:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts+0x1>
    uarts[uart].rx_count--;
    57fa:	20 91 f9 19 	lds	r18, 0x19F9	; 0x8019f9 <uarts+0x3>
    57fe:	30 91 fa 19 	lds	r19, 0x19FA	; 0x8019fa <uarts+0x4>
    5802:	21 50       	subi	r18, 0x01	; 1
    5804:	31 09       	sbc	r19, r1
    5806:	30 93 fa 19 	sts	0x19FA, r19	; 0x8019fa <uarts+0x4>
    580a:	20 93 f9 19 	sts	0x19F9, r18	; 0x8019f9 <uarts+0x3>
    sei();
    580e:	78 94       	sei

    return (c & 0xff);
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5814:	8f ef       	ldi	r24, 0xFF	; 255
    5816:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5818:	08 95       	ret

0000581a <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    581a:	d9 df       	rcall	.-78     	; 0x57ce <uart_get_tail>
    581c:	99 27       	eor	r25, r25
    581e:	08 95       	ret

00005820 <uart_tx_byte>:
    5820:	61 11       	cpse	r22, r1
    5822:	09 c0       	rjmp	.+18     	; 0x5836 <uart_tx_byte+0x16>
    5824:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5828:	25 ff       	sbrs	r18, 5
    582a:	fc cf       	rjmp	.-8      	; 0x5824 <uart_tx_byte+0x4>
    582c:	28 2f       	mov	r18, r24
    582e:	2f 77       	andi	r18, 0x7F	; 127
    5830:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5834:	08 95       	ret
    5836:	61 30       	cpi	r22, 0x01	; 1
    5838:	49 f4       	brne	.+18     	; 0x584c <uart_tx_byte+0x2c>
    583a:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    583e:	25 ff       	sbrs	r18, 5
    5840:	fc cf       	rjmp	.-8      	; 0x583a <uart_tx_byte+0x1a>
    5842:	28 2f       	mov	r18, r24
    5844:	2f 77       	andi	r18, 0x7F	; 127
    5846:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    584a:	08 95       	ret
    584c:	8f ef       	ldi	r24, 0xFF	; 255
    584e:	9f ef       	ldi	r25, 0xFF	; 255
    5850:	08 95       	ret

00005852 <uart_getchar>:
    5852:	cf 93       	push	r28
    5854:	81 11       	cpse	r24, r1
    5856:	0f c0       	rjmp	.+30     	; 0x5876 <uart_getchar+0x24>
    5858:	e0 df       	rcall	.-64     	; 0x581a <uart_rx_byte>
    585a:	c8 2f       	mov	r28, r24
    585c:	60 e0       	ldi	r22, 0x00	; 0
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	df df       	rcall	.-66     	; 0x5820 <uart_tx_byte>
    5862:	cd 30       	cpi	r28, 0x0D	; 13
    5864:	29 f4       	brne	.+10     	; 0x5870 <uart_getchar+0x1e>
    5866:	60 e0       	ldi	r22, 0x00	; 0
    5868:	8a e0       	ldi	r24, 0x0A	; 10
    586a:	90 e0       	ldi	r25, 0x00	; 0
    586c:	d9 df       	rcall	.-78     	; 0x5820 <uart_tx_byte>
    586e:	ca e0       	ldi	r28, 0x0A	; 10
    5870:	8c 2f       	mov	r24, r28
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	02 c0       	rjmp	.+4      	; 0x587a <uart_getchar+0x28>
    5876:	8f ef       	ldi	r24, 0xFF	; 255
    5878:	9f ef       	ldi	r25, 0xFF	; 255
    587a:	cf 91       	pop	r28
    587c:	08 95       	ret

0000587e <uart0_getchar>:
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	e8 cf       	rjmp	.-48     	; 0x5852 <uart_getchar>
    5882:	08 95       	ret

00005884 <uart_putchar>:
    5884:	1f 93       	push	r17
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	ec 01       	movw	r28, r24
    588c:	16 2f       	mov	r17, r22
    588e:	c8 df       	rcall	.-112    	; 0x5820 <uart_tx_byte>
    5890:	ca 30       	cpi	r28, 0x0A	; 10
    5892:	d1 05       	cpc	r29, r1
    5894:	21 f4       	brne	.+8      	; 0x589e <uart_putchar+0x1a>
    5896:	61 2f       	mov	r22, r17
    5898:	8d e0       	ldi	r24, 0x0D	; 13
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	c1 df       	rcall	.-126    	; 0x5820 <uart_tx_byte>
    589e:	ce 01       	movw	r24, r28
    58a0:	df 91       	pop	r29
    58a2:	cf 91       	pop	r28
    58a4:	1f 91       	pop	r17
    58a6:	08 95       	ret

000058a8 <uart0_putchar>:
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29
    58ac:	ec 01       	movw	r28, r24
    58ae:	60 e0       	ldi	r22, 0x00	; 0
    58b0:	70 e0       	ldi	r23, 0x00	; 0
    58b2:	e8 df       	rcall	.-48     	; 0x5884 <uart_putchar>
    58b4:	ce 01       	movw	r24, r28
    58b6:	df 91       	pop	r29
    58b8:	cf 91       	pop	r28
    58ba:	08 95       	ret

000058bc <uart_keyhit>:
    58bc:	7c cf       	rjmp	.-264    	; 0x57b6 <uart_rx_count>
    58be:	08 95       	ret

000058c0 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    58c0:	cf 92       	push	r12
    58c2:	df 92       	push	r13
    58c4:	ef 92       	push	r14
    58c6:	ff 92       	push	r15
    58c8:	6b 01       	movw	r12, r22
    58ca:	7c 01       	movw	r14, r24
    58cc:	80 91 62 17 	lds	r24, 0x1762	; 0x801762 <SPI0_Speed_value>
    58d0:	90 91 63 17 	lds	r25, 0x1763	; 0x801763 <SPI0_Speed_value+0x1>
    58d4:	a0 91 64 17 	lds	r26, 0x1764	; 0x801764 <SPI0_Speed_value+0x2>
    58d8:	b0 91 65 17 	lds	r27, 0x1765	; 0x801765 <SPI0_Speed_value+0x3>
    58dc:	8c 15       	cp	r24, r12
    58de:	9d 05       	cpc	r25, r13
    58e0:	ae 05       	cpc	r26, r14
    58e2:	bf 05       	cpc	r27, r15
    58e4:	09 f4       	brne	.+2      	; 0x58e8 <SPI0_Speed+0x28>
    58e6:	4e c0       	rjmp	.+156    	; 0x5984 <SPI0_Speed+0xc4>
    58e8:	60 e0       	ldi	r22, 0x00	; 0
    58ea:	7d e2       	ldi	r23, 0x2D	; 45
    58ec:	81 e3       	ldi	r24, 0x31	; 49
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	a7 01       	movw	r20, r14
    58f2:	96 01       	movw	r18, r12
    58f4:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    58f8:	20 38       	cpi	r18, 0x80	; 128
    58fa:	31 05       	cpc	r19, r1
    58fc:	41 05       	cpc	r20, r1
    58fe:	51 05       	cpc	r21, r1
    5900:	28 f4       	brcc	.+10     	; 0x590c <SPI0_Speed+0x4c>
    5902:	20 34       	cpi	r18, 0x40	; 64
    5904:	31 05       	cpc	r19, r1
    5906:	41 05       	cpc	r20, r1
    5908:	51 05       	cpc	r21, r1
    590a:	30 f0       	brcs	.+12     	; 0x5918 <SPI0_Speed+0x58>
    590c:	8d b5       	in	r24, 0x2d	; 45
    590e:	8e 7f       	andi	r24, 0xFE	; 254
    5910:	8d bd       	out	0x2d, r24	; 45
    5912:	8c b5       	in	r24, 0x2c	; 44
    5914:	82 60       	ori	r24, 0x02	; 2
    5916:	1b c0       	rjmp	.+54     	; 0x594e <SPI0_Speed+0x8e>
    5918:	8d b5       	in	r24, 0x2d	; 45
    591a:	20 32       	cpi	r18, 0x20	; 32
    591c:	31 05       	cpc	r19, r1
    591e:	41 05       	cpc	r20, r1
    5920:	51 05       	cpc	r21, r1
    5922:	28 f0       	brcs	.+10     	; 0x592e <SPI0_Speed+0x6e>
    5924:	81 60       	ori	r24, 0x01	; 1
    5926:	8d bd       	out	0x2d, r24	; 45
    5928:	8c b5       	in	r24, 0x2c	; 44
    592a:	82 60       	ori	r24, 0x02	; 2
    592c:	1f c0       	rjmp	.+62     	; 0x596c <SPI0_Speed+0xac>
    592e:	20 31       	cpi	r18, 0x10	; 16
    5930:	31 05       	cpc	r19, r1
    5932:	41 05       	cpc	r20, r1
    5934:	51 05       	cpc	r21, r1
    5936:	10 f0       	brcs	.+4      	; 0x593c <SPI0_Speed+0x7c>
    5938:	8e 7f       	andi	r24, 0xFE	; 254
    593a:	06 c0       	rjmp	.+12     	; 0x5948 <SPI0_Speed+0x88>
    593c:	28 30       	cpi	r18, 0x08	; 8
    593e:	31 05       	cpc	r19, r1
    5940:	41 05       	cpc	r20, r1
    5942:	51 05       	cpc	r21, r1
    5944:	40 f0       	brcs	.+16     	; 0x5956 <SPI0_Speed+0x96>
    5946:	81 60       	ori	r24, 0x01	; 1
    5948:	8d bd       	out	0x2d, r24	; 45
    594a:	8c b5       	in	r24, 0x2c	; 44
    594c:	8d 7f       	andi	r24, 0xFD	; 253
    594e:	8c bd       	out	0x2c, r24	; 44
    5950:	8c b5       	in	r24, 0x2c	; 44
    5952:	81 60       	ori	r24, 0x01	; 1
    5954:	0e c0       	rjmp	.+28     	; 0x5972 <SPI0_Speed+0xb2>
    5956:	24 30       	cpi	r18, 0x04	; 4
    5958:	31 05       	cpc	r19, r1
    595a:	41 05       	cpc	r20, r1
    595c:	51 05       	cpc	r21, r1
    595e:	10 f0       	brcs	.+4      	; 0x5964 <SPI0_Speed+0xa4>
    5960:	8e 7f       	andi	r24, 0xFE	; 254
    5962:	01 c0       	rjmp	.+2      	; 0x5966 <SPI0_Speed+0xa6>
    5964:	81 60       	ori	r24, 0x01	; 1
    5966:	8d bd       	out	0x2d, r24	; 45
    5968:	8c b5       	in	r24, 0x2c	; 44
    596a:	8d 7f       	andi	r24, 0xFD	; 253
    596c:	8c bd       	out	0x2c, r24	; 44
    596e:	8c b5       	in	r24, 0x2c	; 44
    5970:	8e 7f       	andi	r24, 0xFE	; 254
    5972:	8c bd       	out	0x2c, r24	; 44
    5974:	c0 92 62 17 	sts	0x1762, r12	; 0x801762 <SPI0_Speed_value>
    5978:	d0 92 63 17 	sts	0x1763, r13	; 0x801763 <SPI0_Speed_value+0x1>
    597c:	e0 92 64 17 	sts	0x1764, r14	; 0x801764 <SPI0_Speed_value+0x2>
    5980:	f0 92 65 17 	sts	0x1765, r15	; 0x801765 <SPI0_Speed_value+0x3>
    5984:	ff 90       	pop	r15
    5986:	ef 90       	pop	r14
    5988:	df 90       	pop	r13
    598a:	cf 90       	pop	r12
    598c:	08 95       	ret

0000598e <SPI0_Mode>:
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	ec 01       	movw	r28, r24
    5994:	81 30       	cpi	r24, 0x01	; 1
    5996:	91 05       	cpc	r25, r1
    5998:	71 f0       	breq	.+28     	; 0x59b6 <SPI0_Mode+0x28>
    599a:	2c f4       	brge	.+10     	; 0x59a6 <SPI0_Mode+0x18>
    599c:	89 2b       	or	r24, r25
    599e:	c1 f4       	brne	.+48     	; 0x59d0 <SPI0_Mode+0x42>
    59a0:	8c b5       	in	r24, 0x2c	; 44
    59a2:	87 7f       	andi	r24, 0xF7	; 247
    59a4:	11 c0       	rjmp	.+34     	; 0x59c8 <SPI0_Mode+0x3a>
    59a6:	82 30       	cpi	r24, 0x02	; 2
    59a8:	91 05       	cpc	r25, r1
    59aa:	61 f0       	breq	.+24     	; 0x59c4 <SPI0_Mode+0x36>
    59ac:	03 97       	sbiw	r24, 0x03	; 3
    59ae:	81 f4       	brne	.+32     	; 0x59d0 <SPI0_Mode+0x42>
    59b0:	8c b5       	in	r24, 0x2c	; 44
    59b2:	88 60       	ori	r24, 0x08	; 8
    59b4:	02 c0       	rjmp	.+4      	; 0x59ba <SPI0_Mode+0x2c>
    59b6:	8c b5       	in	r24, 0x2c	; 44
    59b8:	87 7f       	andi	r24, 0xF7	; 247
    59ba:	8c bd       	out	0x2c, r24	; 44
    59bc:	8c b5       	in	r24, 0x2c	; 44
    59be:	84 60       	ori	r24, 0x04	; 4
    59c0:	8c bd       	out	0x2c, r24	; 44
    59c2:	14 c0       	rjmp	.+40     	; 0x59ec <SPI0_Mode+0x5e>
    59c4:	8c b5       	in	r24, 0x2c	; 44
    59c6:	88 60       	ori	r24, 0x08	; 8
    59c8:	8c bd       	out	0x2c, r24	; 44
    59ca:	8c b5       	in	r24, 0x2c	; 44
    59cc:	8b 7f       	andi	r24, 0xFB	; 251
    59ce:	f8 cf       	rjmp	.-16     	; 0x59c0 <SPI0_Mode+0x32>
    59d0:	df 93       	push	r29
    59d2:	cf 93       	push	r28
    59d4:	84 e2       	ldi	r24, 0x24	; 36
    59d6:	94 e0       	ldi	r25, 0x04	; 4
    59d8:	1f 92       	push	r1
    59da:	9f 93       	push	r25
    59dc:	8f 93       	push	r24
    59de:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    59e2:	0f 90       	pop	r0
    59e4:	0f 90       	pop	r0
    59e6:	0f 90       	pop	r0
    59e8:	0f 90       	pop	r0
    59ea:	0f 90       	pop	r0
    59ec:	d0 93 61 17 	sts	0x1761, r29	; 0x801761 <__data_end+0x1>
    59f0:	c0 93 60 17 	sts	0x1760, r28	; 0x801760 <__data_end>
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	08 95       	ret

000059fa <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    59fa:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    59fc:	0d b4       	in	r0, 0x2d	; 45
    59fe:	07 fe       	sbrs	r0, 7
    5a00:	fd cf       	rjmp	.-6      	; 0x59fc <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5a02:	8e b5       	in	r24, 0x2e	; 46
}
    5a04:	08 95       	ret

00005a06 <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5a06:	cf 92       	push	r12
    5a08:	df 92       	push	r13
    5a0a:	ef 92       	push	r14
    5a0c:	ff 92       	push	r15
    5a0e:	6b 01       	movw	r12, r22
    5a10:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    5a12:	2c 9a       	sbi	0x05, 4	; 5
    5a14:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5a16:	6a e0       	ldi	r22, 0x0A	; 10
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	2b dd       	rcall	.-1450   	; 0x5476 <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    5a20:	2f 9a       	sbi	0x05, 7	; 5
    5a22:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5a24:	2d 9a       	sbi	0x05, 5	; 5
    5a26:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5a28:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5a2a:	8c b5       	in	r24, 0x2c	; 44
    5a2c:	80 64       	ori	r24, 0x40	; 64
    5a2e:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5a30:	8c b5       	in	r24, 0x2c	; 44
    5a32:	80 61       	ori	r24, 0x10	; 16
    5a34:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    5a3a:	a9 df       	rcall	.-174    	; 0x598e <SPI0_Mode>
    5a3c:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    5a3e:	b6 01       	movw	r22, r12
    5a40:	3f df       	rcall	.-386    	; 0x58c0 <SPI0_Speed>
    5a42:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    5a44:	da df       	rcall	.-76     	; 0x59fa <SPI0_TXRX_Byte>
    5a46:	ff 90       	pop	r15
    5a48:	ef 90       	pop	r14
    5a4a:	df 90       	pop	r13
    5a4c:	cf 90       	pop	r12
    5a4e:	08 95       	ret

00005a50 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5a50:	0f 93       	push	r16
    5a52:	1f 93       	push	r17
    5a54:	cf 93       	push	r28
    5a56:	df 93       	push	r29
    5a58:	8c 01       	movw	r16, r24
    5a5a:	eb 01       	movw	r28, r22

    while(count > 0)
    5a5c:	1c 16       	cp	r1, r28
    5a5e:	1d 06       	cpc	r1, r29
    5a60:	34 f4       	brge	.+12     	; 0x5a6e <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5a62:	f8 01       	movw	r30, r16
    5a64:	81 91       	ld	r24, Z+
    5a66:	8f 01       	movw	r16, r30
    5a68:	c8 df       	rcall	.-112    	; 0x59fa <SPI0_TXRX_Byte>
		++data;
		--count;
    5a6a:	21 97       	sbiw	r28, 0x01	; 1
    5a6c:	f7 cf       	rjmp	.-18     	; 0x5a5c <SPI0_TX+0xc>
	}
}
    5a6e:	df 91       	pop	r29
    5a70:	cf 91       	pop	r28
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	08 95       	ret

00005a78 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a78:	0f 93       	push	r16
    5a7a:	1f 93       	push	r17
    5a7c:	cf 93       	push	r28
    5a7e:	df 93       	push	r29
    5a80:	8c 01       	movw	r16, r24
    5a82:	eb 01       	movw	r28, r22

    while(count > 0)
    5a84:	1c 16       	cp	r1, r28
    5a86:	1d 06       	cpc	r1, r29
    5a88:	44 f4       	brge	.+16     	; 0x5a9a <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a8a:	f8 01       	movw	r30, r16
    5a8c:	80 81       	ld	r24, Z
    5a8e:	b5 df       	rcall	.-150    	; 0x59fa <SPI0_TXRX_Byte>
    5a90:	f8 01       	movw	r30, r16
    5a92:	81 93       	st	Z+, r24
    5a94:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a96:	21 97       	sbiw	r28, 0x01	; 1
    5a98:	f5 cf       	rjmp	.-22     	; 0x5a84 <SPI0_TXRX+0xc>
	}
}
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	0f 91       	pop	r16
    5aa2:	08 95       	ret

00005aa4 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	cf 93       	push	r28
    5aaa:	df 93       	push	r29
    5aac:	8c 01       	movw	r16, r24
    5aae:	eb 01       	movw	r28, r22

    while(count > 0)
    5ab0:	1c 16       	cp	r1, r28
    5ab2:	1d 06       	cpc	r1, r29
    5ab4:	3c f4       	brge	.+14     	; 0x5ac4 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5ab6:	8f ef       	ldi	r24, 0xFF	; 255
    5ab8:	a0 df       	rcall	.-192    	; 0x59fa <SPI0_TXRX_Byte>
    5aba:	f8 01       	movw	r30, r16
    5abc:	81 93       	st	Z+, r24
    5abe:	8f 01       	movw	r16, r30
		++data;
		--count;
    5ac0:	21 97       	sbiw	r28, 0x01	; 1
    5ac2:	f6 cf       	rjmp	.-20     	; 0x5ab0 <SPI0_RX+0xc>
	}
}
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	1f 91       	pop	r17
    5aca:	0f 91       	pop	r16
    5acc:	08 95       	ret

00005ace <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5ace:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5ad0:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5ad2:	ec eb       	ldi	r30, 0xBC	; 188
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	90 81       	ld	r25, Z
    5ad8:	94 60       	ori	r25, 0x04	; 4
    5ada:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5adc:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5ae0:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5ae4:	08 95       	ret

00005ae6 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5ae6:	84 e9       	ldi	r24, 0x94	; 148
    5ae8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aec:	08 95       	ret

00005aee <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5aee:	94 ea       	ldi	r25, 0xA4	; 164
    5af0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5af4:	24 e6       	ldi	r18, 0x64	; 100
    5af6:	62 9f       	mul	r22, r18
    5af8:	b0 01       	movw	r22, r0
    5afa:	11 24       	eor	r1, r1
    5afc:	61 50       	subi	r22, 0x01	; 1
    5afe:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b00:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b06:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b08:	2f 3f       	cpi	r18, 0xFF	; 255
    5b0a:	9f ef       	ldi	r25, 0xFF	; 255
    5b0c:	39 07       	cpc	r19, r25
    5b0e:	41 f1       	breq	.+80     	; 0x5b60 <TWI_StartTransmission+0x72>
    5b10:	41 15       	cp	r20, r1
    5b12:	51 05       	cpc	r21, r1
    5b14:	f1 f4       	brne	.+60     	; 0x5b52 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5b16:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b1a:	97 ff       	sbrs	r25, 7
    5b1c:	13 c0       	rjmp	.+38     	; 0x5b44 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5b1e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b22:	98 7f       	andi	r25, 0xF8	; 248
    5b24:	90 31       	cpi	r25, 0x10	; 16
    5b26:	61 f0       	breq	.+24     	; 0x5b40 <TWI_StartTransmission+0x52>
    5b28:	98 33       	cpi	r25, 0x38	; 56
    5b2a:	39 f0       	breq	.+14     	; 0x5b3a <TWI_StartTransmission+0x4c>
    5b2c:	98 30       	cpi	r25, 0x08	; 8
    5b2e:	41 f0       	breq	.+16     	; 0x5b40 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5b30:	84 e0       	ldi	r24, 0x04	; 4
    5b32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5b36:	81 e0       	ldi	r24, 0x01	; 1
    5b38:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b3a:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5b3e:	06 c0       	rjmp	.+12     	; 0x5b4c <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5b40:	41 e0       	ldi	r20, 0x01	; 1
    5b42:	50 e0       	ldi	r21, 0x00	; 0
    5b44:	92 e4       	ldi	r25, 0x42	; 66
    5b46:	9a 95       	dec	r25
    5b48:	f1 f7       	brne	.-4      	; 0x5b46 <TWI_StartTransmission+0x58>
    5b4a:	00 c0       	rjmp	.+0      	; 0x5b4c <TWI_StartTransmission+0x5e>
    5b4c:	21 50       	subi	r18, 0x01	; 1
    5b4e:	31 09       	sbc	r19, r1
    5b50:	db cf       	rjmp	.-74     	; 0x5b08 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b52:	23 2b       	or	r18, r19
    5b54:	29 f4       	brne	.+10     	; 0x5b60 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5b56:	84 e0       	ldi	r24, 0x04	; 4
    5b58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5b5c:	82 e0       	ldi	r24, 0x02	; 2
    5b5e:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5b60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5b64:	84 e8       	ldi	r24, 0x84	; 132
    5b66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5b6a:	6f 3f       	cpi	r22, 0xFF	; 255
    5b6c:	8f ef       	ldi	r24, 0xFF	; 255
    5b6e:	78 07       	cpc	r23, r24
    5b70:	71 f0       	breq	.+28     	; 0x5b8e <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b72:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b76:	cb 01       	movw	r24, r22
    5b78:	01 97       	sbiw	r24, 0x01	; 1
    5b7a:	27 fd       	sbrc	r18, 7
    5b7c:	06 c0       	rjmp	.+12     	; 0x5b8a <TWI_StartTransmission+0x9c>
    5b7e:	22 e4       	ldi	r18, 0x42	; 66
    5b80:	2a 95       	dec	r18
    5b82:	f1 f7       	brne	.-4      	; 0x5b80 <TWI_StartTransmission+0x92>
    5b84:	00 c0       	rjmp	.+0      	; 0x5b86 <TWI_StartTransmission+0x98>
    5b86:	bc 01       	movw	r22, r24
    5b88:	f0 cf       	rjmp	.-32     	; 0x5b6a <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b8a:	67 2b       	or	r22, r23
    5b8c:	61 f0       	breq	.+24     	; 0x5ba6 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b92:	88 7f       	andi	r24, 0xF8	; 248
    5b94:	88 31       	cpi	r24, 0x18	; 24
    5b96:	49 f0       	breq	.+18     	; 0x5baa <TWI_StartTransmission+0xbc>
    5b98:	80 34       	cpi	r24, 0x40	; 64
    5b9a:	39 f0       	breq	.+14     	; 0x5baa <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b9c:	84 e9       	ldi	r24, 0x94	; 148
    5b9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5ba2:	84 e0       	ldi	r24, 0x04	; 4
    5ba4:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5ba6:	83 e0       	ldi	r24, 0x03	; 3
    5ba8:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5baa:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5bac:	08 95       	ret

00005bae <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5bae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5bb2:	84 e8       	ldi	r24, 0x84	; 132
    5bb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5bb8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bbc:	87 ff       	sbrs	r24, 7
    5bbe:	fc cf       	rjmp	.-8      	; 0x5bb8 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5bc0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bc4:	98 7f       	andi	r25, 0xF8	; 248
    5bc6:	21 e0       	ldi	r18, 0x01	; 1
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	98 32       	cpi	r25, 0x28	; 40
    5bcc:	11 f0       	breq	.+4      	; 0x5bd2 <TWI_SendByte+0x24>
    5bce:	20 e0       	ldi	r18, 0x00	; 0
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
}
    5bd2:	c9 01       	movw	r24, r18
    5bd4:	08 95       	ret

00005bd6 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5bd6:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5bd8:	61 15       	cp	r22, r1
    5bda:	71 05       	cpc	r23, r1
    5bdc:	11 f4       	brne	.+4      	; 0x5be2 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5bde:	94 ec       	ldi	r25, 0xC4	; 196
    5be0:	01 c0       	rjmp	.+2      	; 0x5be4 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5be2:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5be4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5be8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bec:	87 ff       	sbrs	r24, 7
    5bee:	fc cf       	rjmp	.-8      	; 0x5be8 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5bf0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5bf4:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5bf6:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bfa:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	67 2b       	or	r22, r23
    5c02:	19 f0       	breq	.+6      	; 0x5c0a <TWI_ReceiveByte+0x34>
    5c04:	28 35       	cpi	r18, 0x58	; 88
    5c06:	19 f4       	brne	.+6      	; 0x5c0e <TWI_ReceiveByte+0x38>
    5c08:	03 c0       	rjmp	.+6      	; 0x5c10 <TWI_ReceiveByte+0x3a>
    5c0a:	20 35       	cpi	r18, 0x50	; 80
    5c0c:	09 f0       	breq	.+2      	; 0x5c10 <TWI_ReceiveByte+0x3a>
    5c0e:	80 e0       	ldi	r24, 0x00	; 0
}
    5c10:	08 95       	ret

00005c12 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5c12:	a0 e0       	ldi	r26, 0x00	; 0
    5c14:	b0 e0       	ldi	r27, 0x00	; 0
    5c16:	ef e0       	ldi	r30, 0x0F	; 15
    5c18:	fe e2       	ldi	r31, 0x2E	; 46
    5c1a:	0c 94 22 eb 	jmp	0x1d644	; 0x1d644 <__prologue_saves__+0xe>
    5c1e:	f8 2e       	mov	r15, r24
    5c20:	b6 2e       	mov	r11, r22
    5c22:	94 2e       	mov	r9, r20
    5c24:	a5 2e       	mov	r10, r21
    5c26:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c28:	8e 7f       	andi	r24, 0xFE	; 254
    5c2a:	61 df       	rcall	.-318    	; 0x5aee <TWI_StartTransmission>
    5c2c:	d8 2f       	mov	r29, r24
    5c2e:	81 11       	cpse	r24, r1
    5c30:	2b c0       	rjmp	.+86     	; 0x5c88 <TWI_ReadPacket+0x76>
    5c32:	c9 2c       	mov	r12, r9
    5c34:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c36:	cc 23       	and	r28, r28
    5c38:	39 f0       	breq	.+14     	; 0x5c48 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c3a:	f6 01       	movw	r30, r12
    5c3c:	81 91       	ld	r24, Z+
    5c3e:	6f 01       	movw	r12, r30
    5c40:	b6 df       	rcall	.-148    	; 0x5bae <TWI_SendByte>
    5c42:	c1 50       	subi	r28, 0x01	; 1
    5c44:	89 2b       	or	r24, r25
    5c46:	b9 f7       	brne	.-18     	; 0x5c36 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5c48:	6b 2d       	mov	r22, r11
    5c4a:	8f 2d       	mov	r24, r15
    5c4c:	81 60       	ori	r24, 0x01	; 1
    5c4e:	4f df       	rcall	.-354    	; 0x5aee <TWI_StartTransmission>
    5c50:	d8 2f       	mov	r29, r24
    5c52:	81 11       	cpse	r24, r1
    5c54:	19 c0       	rjmp	.+50     	; 0x5c88 <TWI_ReadPacket+0x76>
    5c56:	cf ef       	ldi	r28, 0xFF	; 255
    5c58:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5c5a:	cf 3f       	cpi	r28, 0xFF	; 255
    5c5c:	91 f0       	breq	.+36     	; 0x5c82 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5c5e:	78 01       	movw	r14, r16
    5c60:	ff ef       	ldi	r31, 0xFF	; 255
    5c62:	ef 1a       	sub	r14, r31
    5c64:	ff 0a       	sbc	r15, r31
    5c66:	61 e0       	ldi	r22, 0x01	; 1
    5c68:	70 e0       	ldi	r23, 0x00	; 0
    5c6a:	cc 23       	and	r28, r28
    5c6c:	11 f0       	breq	.+4      	; 0x5c72 <TWI_ReadPacket+0x60>
    5c6e:	60 e0       	ldi	r22, 0x00	; 0
    5c70:	70 e0       	ldi	r23, 0x00	; 0
    5c72:	c8 01       	movw	r24, r16
    5c74:	b0 df       	rcall	.-160    	; 0x5bd6 <TWI_ReceiveByte>
    5c76:	c1 50       	subi	r28, 0x01	; 1
    5c78:	89 2b       	or	r24, r25
    5c7a:	11 f0       	breq	.+4      	; 0x5c80 <TWI_ReadPacket+0x6e>
    5c7c:	87 01       	movw	r16, r14
    5c7e:	ed cf       	rjmp	.-38     	; 0x5c5a <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c80:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c82:	84 e9       	ldi	r24, 0x94	; 148
    5c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c88:	8d 2f       	mov	r24, r29
    5c8a:	cd b7       	in	r28, 0x3d	; 61
    5c8c:	de b7       	in	r29, 0x3e	; 62
    5c8e:	eb e0       	ldi	r30, 0x0B	; 11
    5c90:	0c 94 3e eb 	jmp	0x1d67c	; 0x1d67c <__epilogue_restores__+0xe>

00005c94 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c94:	a0 e0       	ldi	r26, 0x00	; 0
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
    5c98:	e0 e5       	ldi	r30, 0x50	; 80
    5c9a:	fe e2       	ldi	r31, 0x2E	; 46
    5c9c:	0c 94 24 eb 	jmp	0x1d648	; 0x1d648 <__prologue_saves__+0x12>
    5ca0:	b4 2e       	mov	r11, r20
    5ca2:	f5 2e       	mov	r15, r21
    5ca4:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5ca6:	8e 7f       	andi	r24, 0xFE	; 254
    5ca8:	22 df       	rcall	.-444    	; 0x5aee <TWI_StartTransmission>
    5caa:	d8 2f       	mov	r29, r24
    5cac:	81 11       	cpse	r24, r1
    5cae:	1a c0       	rjmp	.+52     	; 0x5ce4 <TWI_WritePacket+0x50>
    5cb0:	cb 2c       	mov	r12, r11
    5cb2:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5cb4:	cc 23       	and	r28, r28
    5cb6:	41 f0       	breq	.+16     	; 0x5cc8 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5cb8:	f6 01       	movw	r30, r12
    5cba:	81 91       	ld	r24, Z+
    5cbc:	6f 01       	movw	r12, r30
    5cbe:	77 df       	rcall	.-274    	; 0x5bae <TWI_SendByte>
    5cc0:	c1 50       	subi	r28, 0x01	; 1
    5cc2:	89 2b       	or	r24, r25
    5cc4:	b9 f7       	brne	.-18     	; 0x5cb4 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5cc6:	d5 e0       	ldi	r29, 0x05	; 5
    5cc8:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5cca:	ee 20       	and	r14, r14
    5ccc:	41 f0       	breq	.+16     	; 0x5cde <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5cce:	f6 01       	movw	r30, r12
    5cd0:	81 91       	ld	r24, Z+
    5cd2:	6f 01       	movw	r12, r30
    5cd4:	6c df       	rcall	.-296    	; 0x5bae <TWI_SendByte>
    5cd6:	ea 94       	dec	r14
    5cd8:	89 2b       	or	r24, r25
    5cda:	b9 f7       	brne	.-18     	; 0x5cca <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5cdc:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5cde:	84 e9       	ldi	r24, 0x94	; 148
    5ce0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5ce4:	8d 2f       	mov	r24, r29
    5ce6:	cd b7       	in	r28, 0x3d	; 61
    5ce8:	de b7       	in	r29, 0x3e	; 62
    5cea:	e9 e0       	ldi	r30, 0x09	; 9
    5cec:	0c 94 40 eb 	jmp	0x1d680	; 0x1d680 <__epilogue_restores__+0x12>

00005cf0 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5cf0:	6a e0       	ldi	r22, 0x0A	; 10
    5cf2:	0e 94 7b ea 	call	0x1d4f6	; 0x1d4f6 <__udivmodqi4>
    5cf6:	82 95       	swap	r24
    5cf8:	80 7f       	andi	r24, 0xF0	; 240
    5cfa:	89 2b       	or	r24, r25
    5cfc:	08 95       	ret

00005cfe <BCDtoBIN>:
    5cfe:	98 2f       	mov	r25, r24
    5d00:	92 95       	swap	r25
    5d02:	9f 70       	andi	r25, 0x0F	; 15
    5d04:	8f 70       	andi	r24, 0x0F	; 15
    5d06:	2a e0       	ldi	r18, 0x0A	; 10
    5d08:	92 9f       	mul	r25, r18
    5d0a:	80 0d       	add	r24, r0
    5d0c:	11 24       	eor	r1, r1
    5d0e:	08 95       	ret

00005d10 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5d10:	cf 92       	push	r12
    5d12:	df 92       	push	r13
    5d14:	ef 92       	push	r14
    5d16:	0f 93       	push	r16
    5d18:	1f 93       	push	r17
    5d1a:	cf 93       	push	r28
    5d1c:	df 93       	push	r29
    5d1e:	00 d0       	rcall	.+0      	; 0x5d20 <rtc_run+0x10>
    5d20:	1f 92       	push	r1
    5d22:	cd b7       	in	r28, 0x3d	; 61
    5d24:	de b7       	in	r29, 0x3e	; 62
    5d26:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5d28:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5d2a:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5d2c:	ee 24       	eor	r14, r14
    5d2e:	e3 94       	inc	r14
    5d30:	8e 01       	movw	r16, r28
    5d32:	0f 5f       	subi	r16, 0xFF	; 255
    5d34:	1f 4f       	sbci	r17, 0xFF	; 255
    5d36:	21 e0       	ldi	r18, 0x01	; 1
    5d38:	ae 01       	movw	r20, r28
    5d3a:	4e 5f       	subi	r20, 0xFE	; 254
    5d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d3e:	64 e1       	ldi	r22, 0x14	; 20
    5d40:	81 ed       	ldi	r24, 0xD1	; 209
    5d42:	67 df       	rcall	.-306    	; 0x5c12 <TWI_ReadPacket>
    5d44:	88 23       	and	r24, r24
    5d46:	19 f0       	breq	.+6      	; 0x5d4e <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5d48:	8e ea       	ldi	r24, 0xAE	; 174
    5d4a:	94 e0       	ldi	r25, 0x04	; 4
    5d4c:	2a c0       	rjmp	.+84     	; 0x5da2 <rtc_run+0x92>
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5d50:	9f ef       	ldi	r25, 0xFF	; 255
    5d52:	c9 16       	cp	r12, r25
    5d54:	d9 06       	cpc	r13, r25
    5d56:	59 f4       	brne	.+22     	; 0x5d6e <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5d58:	08 2e       	mov	r0, r24
    5d5a:	00 0c       	add	r0, r0
    5d5c:	99 0b       	sbc	r25, r25
    5d5e:	80 95       	com	r24
    5d60:	90 95       	com	r25
    5d62:	89 2f       	mov	r24, r25
    5d64:	88 1f       	adc	r24, r24
    5d66:	88 27       	eor	r24, r24
    5d68:	88 1f       	adc	r24, r24
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	26 c0       	rjmp	.+76     	; 0x5dba <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5d6e:	8f 77       	andi	r24, 0x7F	; 127
    5d70:	c1 14       	cp	r12, r1
    5d72:	d1 04       	cpc	r13, r1
    5d74:	11 f4       	brne	.+4      	; 0x5d7a <rtc_run+0x6a>
    5d76:	90 e8       	ldi	r25, 0x80	; 128
    5d78:	01 c0       	rjmp	.+2      	; 0x5d7c <rtc_run+0x6c>
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	89 2b       	or	r24, r25
    5d7e:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5d80:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5d82:	ee 24       	eor	r14, r14
    5d84:	e3 94       	inc	r14
    5d86:	8e 01       	movw	r16, r28
    5d88:	0f 5f       	subi	r16, 0xFF	; 255
    5d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d8c:	21 e0       	ldi	r18, 0x01	; 1
    5d8e:	ae 01       	movw	r20, r28
    5d90:	4d 5f       	subi	r20, 0xFD	; 253
    5d92:	5f 4f       	sbci	r21, 0xFF	; 255
    5d94:	64 e1       	ldi	r22, 0x14	; 20
    5d96:	80 ed       	ldi	r24, 0xD0	; 208
    5d98:	7d df       	rcall	.-262    	; 0x5c94 <TWI_WritePacket>
    5d9a:	88 23       	and	r24, r24
    5d9c:	69 f0       	breq	.+26     	; 0x5db8 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d9e:	87 e9       	ldi	r24, 0x97	; 151
    5da0:	94 e0       	ldi	r25, 0x04	; 4
    5da2:	1f 92       	push	r1
    5da4:	9f 93       	push	r25
    5da6:	8f 93       	push	r24
    5da8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
    5dac:	0f 90       	pop	r0
    5dae:	0f 90       	pop	r0
    5db0:	0f 90       	pop	r0
    5db2:	8f ef       	ldi	r24, 0xFF	; 255
    5db4:	9f ef       	ldi	r25, 0xFF	; 255
    5db6:	01 c0       	rjmp	.+2      	; 0x5dba <rtc_run+0xaa>
    5db8:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5dba:	0f 90       	pop	r0
    5dbc:	0f 90       	pop	r0
    5dbe:	0f 90       	pop	r0
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	ef 90       	pop	r14
    5dca:	df 90       	pop	r13
    5dcc:	cf 90       	pop	r12
    5dce:	08 95       	ret

00005dd0 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5dd0:	ef 92       	push	r14
    5dd2:	0f 93       	push	r16
    5dd4:	1f 93       	push	r17
    5dd6:	cf 93       	push	r28
    5dd8:	df 93       	push	r29
    5dda:	cd b7       	in	r28, 0x3d	; 61
    5ddc:	de b7       	in	r29, 0x3e	; 62
    5dde:	29 97       	sbiw	r28, 0x09	; 9
    5de0:	0f b6       	in	r0, 0x3f	; 63
    5de2:	f8 94       	cli
    5de4:	de bf       	out	0x3e, r29	; 62
    5de6:	0f be       	out	0x3f, r0	; 63
    5de8:	cd bf       	out	0x3d, r28	; 61
    5dea:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5dec:	fc 01       	movw	r30, r24
    5dee:	80 81       	ld	r24, Z
    5df0:	7f df       	rcall	.-258    	; 0x5cf0 <BINtoBCD>
    5df2:	8f 77       	andi	r24, 0x7F	; 127
    5df4:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5df6:	f8 01       	movw	r30, r16
    5df8:	82 81       	ldd	r24, Z+2	; 0x02
    5dfa:	7a df       	rcall	.-268    	; 0x5cf0 <BINtoBCD>
    5dfc:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5dfe:	8a 83       	std	Y+2, r24	; 0x02
    5e00:	f8 01       	movw	r30, r16
    5e02:	84 81       	ldd	r24, Z+4	; 0x04
    5e04:	75 df       	rcall	.-278    	; 0x5cf0 <BINtoBCD>
    5e06:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5e08:	8b 83       	std	Y+3, r24	; 0x03
    5e0a:	f8 01       	movw	r30, r16
    5e0c:	84 85       	ldd	r24, Z+12	; 0x0c
    5e0e:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5e10:	8f 5f       	subi	r24, 0xFF	; 255
    5e12:	8c 83       	std	Y+4, r24	; 0x04
    5e14:	86 81       	ldd	r24, Z+6	; 0x06
    5e16:	6c df       	rcall	.-296    	; 0x5cf0 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5e18:	8f 73       	andi	r24, 0x3F	; 63
    5e1a:	8d 83       	std	Y+5, r24	; 0x05
    5e1c:	f8 01       	movw	r30, r16
    5e1e:	80 85       	ldd	r24, Z+8	; 0x08
    5e20:	8f 5f       	subi	r24, 0xFF	; 255
    5e22:	66 df       	rcall	.-308    	; 0x5cf0 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5e24:	8f 71       	andi	r24, 0x1F	; 31
    5e26:	8e 83       	std	Y+6, r24	; 0x06
    5e28:	f8 01       	movw	r30, r16
    5e2a:	82 85       	ldd	r24, Z+10	; 0x0a
    5e2c:	84 56       	subi	r24, 0x64	; 100
    5e2e:	60 df       	rcall	.-320    	; 0x5cf0 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5e30:	8f 83       	std	Y+7, r24	; 0x07
    5e32:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5e34:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e36:	19 86       	std	Y+9, r1	; 0x09
    5e38:	88 e0       	ldi	r24, 0x08	; 8
    5e3a:	e8 2e       	mov	r14, r24
    5e3c:	8e 01       	movw	r16, r28
    5e3e:	0f 5f       	subi	r16, 0xFF	; 255
    5e40:	1f 4f       	sbci	r17, 0xFF	; 255
    5e42:	21 e0       	ldi	r18, 0x01	; 1
    5e44:	ae 01       	movw	r20, r28
    5e46:	47 5f       	subi	r20, 0xF7	; 247
    5e48:	5f 4f       	sbci	r21, 0xFF	; 255
    5e4a:	64 e1       	ldi	r22, 0x14	; 20
    5e4c:	80 ed       	ldi	r24, 0xD0	; 208
    5e4e:	22 df       	rcall	.-444    	; 0x5c94 <TWI_WritePacket>
    5e50:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5e52:	61 f0       	breq	.+24     	; 0x5e6c <rtc_write+0x9c>
    5e54:	81 e5       	ldi	r24, 0x51	; 81
    5e56:	94 e0       	ldi	r25, 0x04	; 4
    5e58:	1f 92       	push	r1
    5e5a:	9f 93       	push	r25
    5e5c:	8f 93       	push	r24
    5e5e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
    5e62:	0f 90       	pop	r0
    5e64:	0f 90       	pop	r0
    5e66:	0f 90       	pop	r0
    5e68:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5e6a:	01 c0       	rjmp	.+2      	; 0x5e6e <rtc_write+0x9e>
}
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	29 96       	adiw	r28, 0x09	; 9
    5e70:	0f b6       	in	r0, 0x3f	; 63
    5e72:	f8 94       	cli
    5e74:	de bf       	out	0x3e, r29	; 62
    5e76:	0f be       	out	0x3f, r0	; 63
    5e78:	cd bf       	out	0x3d, r28	; 61
    5e7a:	df 91       	pop	r29
    5e7c:	cf 91       	pop	r28
    5e7e:	1f 91       	pop	r17
    5e80:	0f 91       	pop	r16
    5e82:	ef 90       	pop	r14
    5e84:	08 95       	ret

00005e86 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5e86:	ad e0       	ldi	r26, 0x0D	; 13
    5e88:	b0 e0       	ldi	r27, 0x00	; 0
    5e8a:	e9 e4       	ldi	r30, 0x49	; 73
    5e8c:	ff e2       	ldi	r31, 0x2F	; 47
    5e8e:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    5e92:	6c 01       	movw	r12, r24
    5e94:	4a 87       	std	Y+10, r20	; 0x0a
    5e96:	5b 87       	std	Y+11, r21	; 0x0b
    5e98:	6c 87       	std	Y+12, r22	; 0x0c
    5e9a:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e9c:	6a e2       	ldi	r22, 0x2A	; 42
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	16 de       	rcall	.-980    	; 0x5ace <TWI_Init>

    if(!force)
    5ea2:	c1 14       	cp	r12, r1
    5ea4:	d1 04       	cpc	r13, r1
    5ea6:	09 f0       	breq	.+2      	; 0x5eaa <rtc_init+0x24>
    5ea8:	42 c0       	rjmp	.+132    	; 0x5f2e <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5eaa:	8f ef       	ldi	r24, 0xFF	; 255
    5eac:	9f ef       	ldi	r25, 0xFF	; 255
    5eae:	30 df       	rcall	.-416    	; 0x5d10 <rtc_run>
        if(state < 0)
    5eb0:	87 ff       	sbrs	r24, 7
    5eb2:	05 c0       	rjmp	.+10     	; 0x5ebe <rtc_init+0x38>
        {
            rtc_ok = 0;
    5eb4:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <rtc_ok+0x1>
    5eb8:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <rtc_ok>
    5ebc:	24 c0       	rjmp	.+72     	; 0x5f06 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5ebe:	88 23       	and	r24, r24
    5ec0:	b1 f1       	breq	.+108    	; 0x5f2e <rtc_init+0xa8>
    5ec2:	2d c0       	rjmp	.+90     	; 0x5f1e <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5ec4:	ce 01       	movw	r24, r28
    5ec6:	01 96       	adiw	r24, 0x01	; 1
    5ec8:	6c 01       	movw	r12, r24
    5eca:	88 e0       	ldi	r24, 0x08	; 8
    5ecc:	f6 01       	movw	r30, r12
    5ece:	11 92       	st	Z+, r1
    5ed0:	8a 95       	dec	r24
    5ed2:	e9 f7       	brne	.-6      	; 0x5ece <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5ed4:	98 e0       	ldi	r25, 0x08	; 8
    5ed6:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5ed8:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5eda:	88 e0       	ldi	r24, 0x08	; 8
    5edc:	e8 2e       	mov	r14, r24
    5ede:	86 01       	movw	r16, r12
    5ee0:	21 e0       	ldi	r18, 0x01	; 1
    5ee2:	ae 01       	movw	r20, r28
    5ee4:	47 5f       	subi	r20, 0xF7	; 247
    5ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee8:	64 e1       	ldi	r22, 0x14	; 20
    5eea:	80 ed       	ldi	r24, 0xD0	; 208
    5eec:	d3 de       	rcall	.-602    	; 0x5c94 <TWI_WritePacket>
    5eee:	88 23       	and	r24, r24
    5ef0:	61 f0       	breq	.+24     	; 0x5f0a <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5ef2:	82 e6       	ldi	r24, 0x62	; 98
    5ef4:	94 e0       	ldi	r25, 0x04	; 4
    5ef6:	1f 92       	push	r1
    5ef8:	9f 93       	push	r25
    5efa:	8f 93       	push	r24
    5efc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                return(0);
    5f00:	0f 90       	pop	r0
    5f02:	0f 90       	pop	r0
    5f04:	0f 90       	pop	r0
    5f06:	10 e0       	ldi	r17, 0x00	; 0
    5f08:	2d c0       	rjmp	.+90     	; 0x5f64 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5f0a:	f8 e0       	ldi	r31, 0x08	; 8
    5f0c:	ff 0e       	add	r15, r31
    5f0e:	80 e4       	ldi	r24, 0x40	; 64
    5f10:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5f12:	e2 cf       	rjmp	.-60     	; 0x5ed8 <rtc_init+0x52>
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	fb de       	rcall	.-522    	; 0x5d10 <rtc_run>
    5f1a:	97 fd       	sbrc	r25, 7
    5f1c:	cb cf       	rjmp	.-106    	; 0x5eb4 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5f1e:	81 e0       	ldi	r24, 0x01	; 1
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	90 93 f5 19 	sts	0x19F5, r25	; 0x8019f5 <rtc_ok+0x1>
    5f26:	80 93 f4 19 	sts	0x19F4, r24	; 0x8019f4 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5f2a:	11 e0       	ldi	r17, 0x01	; 1
    5f2c:	1b c0       	rjmp	.+54     	; 0x5f64 <rtc_init+0xde>
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	ee de       	rcall	.-548    	; 0x5d10 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5f34:	97 fd       	sbrc	r25, 7
    5f36:	be cf       	rjmp	.-132    	; 0x5eb4 <rtc_init+0x2e>
    5f38:	ce 01       	movw	r24, r28
    5f3a:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5f3c:	0e 94 04 38 	call	0x7008	; 0x7008 <gmtime>
    5f40:	47 df       	rcall	.-370    	; 0x5dd0 <rtc_write>
    5f42:	18 2f       	mov	r17, r24
    5f44:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5f46:	be cf       	rjmp	.-132    	; 0x5ec4 <rtc_init+0x3e>
    5f48:	8e e7       	ldi	r24, 0x7E	; 126
    5f4a:	94 e0       	ldi	r25, 0x04	; 4
    5f4c:	1f 92       	push	r1
    5f4e:	9f 93       	push	r25
    5f50:	8f 93       	push	r24
    5f52:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            rtc_ok = 0;
    5f56:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <rtc_ok+0x1>
    5f5a:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <rtc_ok>
            return 0;
    5f5e:	0f 90       	pop	r0
    5f60:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5f62:	0f 90       	pop	r0
    5f64:	81 2f       	mov	r24, r17
    5f66:	2d 96       	adiw	r28, 0x0d	; 13
    5f68:	e8 e0       	ldi	r30, 0x08	; 8
    5f6a:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00005f6e <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5f6e:	cf 92       	push	r12
    5f70:	df 92       	push	r13
    5f72:	ef 92       	push	r14
    5f74:	0f 93       	push	r16
    5f76:	1f 93       	push	r17
    5f78:	cf 93       	push	r28
    5f7a:	df 93       	push	r29
    5f7c:	cd b7       	in	r28, 0x3d	; 61
    5f7e:	de b7       	in	r29, 0x3e	; 62
    5f80:	29 97       	sbiw	r28, 0x09	; 9
    5f82:	0f b6       	in	r0, 0x3f	; 63
    5f84:	f8 94       	cli
    5f86:	de bf       	out	0x3e, r29	; 62
    5f88:	0f be       	out	0x3f, r0	; 63
    5f8a:	cd bf       	out	0x3d, r28	; 61
    5f8c:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5f8e:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5f90:	88 e0       	ldi	r24, 0x08	; 8
    5f92:	e8 2e       	mov	r14, r24
    5f94:	8e 01       	movw	r16, r28
    5f96:	0f 5f       	subi	r16, 0xFF	; 255
    5f98:	1f 4f       	sbci	r17, 0xFF	; 255
    5f9a:	21 e0       	ldi	r18, 0x01	; 1
    5f9c:	ae 01       	movw	r20, r28
    5f9e:	47 5f       	subi	r20, 0xF7	; 247
    5fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa2:	64 e1       	ldi	r22, 0x14	; 20
    5fa4:	81 ed       	ldi	r24, 0xD1	; 209
    5fa6:	35 de       	rcall	.-918    	; 0x5c12 <TWI_ReadPacket>
    5fa8:	88 23       	and	r24, r24
    5faa:	61 f0       	breq	.+24     	; 0x5fc4 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5fac:	81 e4       	ldi	r24, 0x41	; 65
    5fae:	94 e0       	ldi	r25, 0x04	; 4
    5fb0:	1f 92       	push	r1
    5fb2:	9f 93       	push	r25
    5fb4:	8f 93       	push	r24
    5fb6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return 0;
    5fba:	0f 90       	pop	r0
    5fbc:	0f 90       	pop	r0
    5fbe:	0f 90       	pop	r0
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	33 c0       	rjmp	.+102    	; 0x602a <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5fc4:	89 81       	ldd	r24, Y+1	; 0x01
    5fc6:	8f 77       	andi	r24, 0x7F	; 127
    5fc8:	9a de       	rcall	.-716    	; 0x5cfe <BCDtoBIN>
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	f6 01       	movw	r30, r12
    5fce:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5fd0:	80 83       	st	Z, r24
    5fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd4:	8f 77       	andi	r24, 0x7F	; 127
    5fd6:	93 de       	rcall	.-730    	; 0x5cfe <BCDtoBIN>
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5fdc:	93 83       	std	Z+3, r25	; 0x03
    5fde:	82 83       	std	Z+2, r24	; 0x02
    5fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    5fe2:	8f 73       	andi	r24, 0x3F	; 63
    5fe4:	8c de       	rcall	.-744    	; 0x5cfe <BCDtoBIN>
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	f6 01       	movw	r30, r12
    5fea:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5fec:	84 83       	std	Z+4, r24	; 0x04
    5fee:	8c 81       	ldd	r24, Y+4	; 0x04
    5ff0:	87 70       	andi	r24, 0x07	; 7
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5ff6:	95 87       	std	Z+13, r25	; 0x0d
    5ff8:	84 87       	std	Z+12, r24	; 0x0c
    5ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    5ffc:	8f 73       	andi	r24, 0x3F	; 63
    5ffe:	7f de       	rcall	.-770    	; 0x5cfe <BCDtoBIN>
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6004:	97 83       	std	Z+7, r25	; 0x07
    6006:	86 83       	std	Z+6, r24	; 0x06
    6008:	8e 81       	ldd	r24, Y+6	; 0x06
    600a:	8f 71       	andi	r24, 0x1F	; 31
    600c:	78 de       	rcall	.-784    	; 0x5cfe <BCDtoBIN>
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	01 97       	sbiw	r24, 0x01	; 1
    6012:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6014:	91 87       	std	Z+9, r25	; 0x09
    6016:	80 87       	std	Z+8, r24	; 0x08
    6018:	8f 81       	ldd	r24, Y+7	; 0x07
    601a:	71 de       	rcall	.-798    	; 0x5cfe <BCDtoBIN>
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	8c 59       	subi	r24, 0x9C	; 156
    6020:	9f 4f       	sbci	r25, 0xFF	; 255
    6022:	f6 01       	movw	r30, r12
    6024:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    6026:	82 87       	std	Z+10, r24	; 0x0a
}
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	29 96       	adiw	r28, 0x09	; 9
    602c:	0f b6       	in	r0, 0x3f	; 63
    602e:	f8 94       	cli
    6030:	de bf       	out	0x3e, r29	; 62
    6032:	0f be       	out	0x3f, r0	; 63
    6034:	cd bf       	out	0x3d, r28	; 61
    6036:	df 91       	pop	r29
    6038:	cf 91       	pop	r28
    603a:	1f 91       	pop	r17
    603c:	0f 91       	pop	r16
    603e:	ef 90       	pop	r14
    6040:	df 90       	pop	r13
    6042:	cf 90       	pop	r12
    6044:	08 95       	ret

00006046 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6046:	64 e1       	ldi	r22, 0x14	; 20
    6048:	52 dd       	rcall	.-1372   	; 0x5aee <TWI_StartTransmission>
    604a:	81 11       	cpse	r24, r1
    604c:	07 c0       	rjmp	.+14     	; 0x605c <I2C_Start+0x16>
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    6056:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    605a:	04 c0       	rjmp	.+8      	; 0x6064 <I2C_Start+0x1e>
    605c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    6060:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    6064:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6068:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    606c:	08 95       	ret

0000606e <I2C_Stop>:
    606e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6072:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6076:	89 2b       	or	r24, r25
    6078:	09 f0       	breq	.+2      	; 0x607c <I2C_Stop+0xe>
    607a:	35 cd       	rjmp	.-1430   	; 0x5ae6 <TWI_StopTransmission>
    607c:	08 95       	ret

0000607e <I2C_Send>:
    607e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6082:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6086:	21 15       	cp	r18, r1
    6088:	31 05       	cpc	r19, r1
    608a:	41 f0       	breq	.+16     	; 0x609c <I2C_Send+0x1e>
    608c:	90 dd       	rcall	.-1248   	; 0x5bae <TWI_SendByte>
    608e:	51 e0       	ldi	r21, 0x01	; 1
    6090:	40 e0       	ldi	r20, 0x00	; 0
    6092:	89 2b       	or	r24, r25
    6094:	09 f0       	breq	.+2      	; 0x6098 <I2C_Send+0x1a>
    6096:	50 e0       	ldi	r21, 0x00	; 0
    6098:	25 2f       	mov	r18, r21
    609a:	34 2f       	mov	r19, r20
    609c:	c9 01       	movw	r24, r18
    609e:	08 95       	ret

000060a0 <LCD_putb>:
    60a0:	cf 93       	push	r28
    60a2:	c8 2f       	mov	r28, r24
    60a4:	84 ee       	ldi	r24, 0xE4	; 228
    60a6:	cf df       	rcall	.-98     	; 0x6046 <I2C_Start>
    60a8:	89 2b       	or	r24, r25
    60aa:	19 f4       	brne	.+6      	; 0x60b2 <LCD_putb+0x12>
    60ac:	80 e0       	ldi	r24, 0x00	; 0
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	07 c0       	rjmp	.+14     	; 0x60c0 <LCD_putb+0x20>
    60b2:	8c 2f       	mov	r24, r28
    60b4:	e4 df       	rcall	.-56     	; 0x607e <I2C_Send>
    60b6:	89 2b       	or	r24, r25
    60b8:	c9 f3       	breq	.-14     	; 0x60ac <LCD_putb+0xc>
    60ba:	d9 df       	rcall	.-78     	; 0x606e <I2C_Stop>
    60bc:	81 e0       	ldi	r24, 0x01	; 1
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	cf 91       	pop	r28
    60c2:	08 95       	ret

000060c4 <LCD_command>:
    60c4:	cf 93       	push	r28
    60c6:	c8 2f       	mov	r28, r24
    60c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    60cc:	bc df       	rcall	.-136    	; 0x6046 <I2C_Start>
    60ce:	89 2b       	or	r24, r25
    60d0:	51 f0       	breq	.+20     	; 0x60e6 <LCD_command+0x22>
    60d2:	8c e7       	ldi	r24, 0x7C	; 124
    60d4:	d4 df       	rcall	.-88     	; 0x607e <I2C_Send>
    60d6:	8c 2f       	mov	r24, r28
    60d8:	d2 df       	rcall	.-92     	; 0x607e <I2C_Send>
    60da:	c9 df       	rcall	.-110    	; 0x606e <I2C_Stop>
    60dc:	6a e0       	ldi	r22, 0x0A	; 10
    60de:	70 e0       	ldi	r23, 0x00	; 0
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	f5 d9       	rcall	.-3094   	; 0x54d0 <delayms>
    60e6:	cf 91       	pop	r28
    60e8:	08 95       	ret

000060ea <LCD_specialCommand>:
    60ea:	cf 93       	push	r28
    60ec:	c8 2f       	mov	r28, r24
    60ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    60f2:	a9 df       	rcall	.-174    	; 0x6046 <I2C_Start>
    60f4:	89 2b       	or	r24, r25
    60f6:	51 f0       	breq	.+20     	; 0x610c <LCD_specialCommand+0x22>
    60f8:	8e ef       	ldi	r24, 0xFE	; 254
    60fa:	c1 df       	rcall	.-126    	; 0x607e <I2C_Send>
    60fc:	8c 2f       	mov	r24, r28
    60fe:	bf df       	rcall	.-130    	; 0x607e <I2C_Send>
    6100:	b6 df       	rcall	.-148    	; 0x606e <I2C_Stop>
    6102:	62 e3       	ldi	r22, 0x32	; 50
    6104:	70 e0       	ldi	r23, 0x00	; 0
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	e2 d9       	rcall	.-3132   	; 0x54d0 <delayms>
    610c:	cf 91       	pop	r28
    610e:	08 95       	ret

00006110 <LCD_setCursor>:
    6110:	a8 e0       	ldi	r26, 0x08	; 8
    6112:	b0 e0       	ldi	r27, 0x00	; 0
    6114:	ee e8       	ldi	r30, 0x8E	; 142
    6116:	f0 e3       	ldi	r31, 0x30	; 48
    6118:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    611c:	98 e0       	ldi	r25, 0x08	; 8
    611e:	eb e5       	ldi	r30, 0x5B	; 91
    6120:	f2 e0       	ldi	r31, 0x02	; 2
    6122:	de 01       	movw	r26, r28
    6124:	11 96       	adiw	r26, 0x01	; 1
    6126:	01 90       	ld	r0, Z+
    6128:	0d 92       	st	X+, r0
    612a:	9a 95       	dec	r25
    612c:	e1 f7       	brne	.-8      	; 0x6126 <LCD_setCursor+0x16>
    612e:	64 30       	cpi	r22, 0x04	; 4
    6130:	08 f0       	brcs	.+2      	; 0x6134 <LCD_setCursor+0x24>
    6132:	63 e0       	ldi	r22, 0x03	; 3
    6134:	fe 01       	movw	r30, r28
    6136:	31 96       	adiw	r30, 0x01	; 1
    6138:	e6 0f       	add	r30, r22
    613a:	f1 1d       	adc	r31, r1
    613c:	e6 0f       	add	r30, r22
    613e:	f1 1d       	adc	r31, r1
    6140:	90 81       	ld	r25, Z
    6142:	89 0f       	add	r24, r25
    6144:	80 68       	ori	r24, 0x80	; 128
    6146:	d1 df       	rcall	.-94     	; 0x60ea <LCD_specialCommand>
    6148:	28 96       	adiw	r28, 0x08	; 8
    614a:	e2 e0       	ldi	r30, 0x02	; 2
    614c:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00006150 <LCD_pos>:
    6150:	ea e0       	ldi	r30, 0x0A	; 10
    6152:	f1 e0       	ldi	r31, 0x01	; 1
    6154:	28 2f       	mov	r18, r24
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	31 83       	std	Z+1, r19	; 0x01
    615a:	20 83       	st	Z, r18
    615c:	26 2f       	mov	r18, r22
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	33 83       	std	Z+3, r19	; 0x03
    6162:	22 83       	std	Z+2, r18	; 0x02
    6164:	d5 cf       	rjmp	.-86     	; 0x6110 <LCD_setCursor>
    6166:	08 95       	ret

00006168 <LCD_clear>:
    6168:	8d e2       	ldi	r24, 0x2D	; 45
    616a:	ac df       	rcall	.-168    	; 0x60c4 <LCD_command>
    616c:	60 e0       	ldi	r22, 0x00	; 0
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	ef df       	rcall	.-34     	; 0x6150 <LCD_pos>
    6172:	6a e0       	ldi	r22, 0x0A	; 10
    6174:	70 e0       	ldi	r23, 0x00	; 0
    6176:	80 e0       	ldi	r24, 0x00	; 0
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	aa c9       	rjmp	.-3244   	; 0x54d0 <delayms>
    617c:	08 95       	ret

0000617e <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    617e:	1f 93       	push	r17
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	18 2f       	mov	r17, r24
    6186:	d6 2f       	mov	r29, r22
    6188:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    618a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    618e:	5b df       	rcall	.-330    	; 0x6046 <I2C_Start>
    6190:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6192:	81 f0       	breq	.+32     	; 0x61b4 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6194:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6196:	73 df       	rcall	.-282    	; 0x607e <I2C_Send>
    6198:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    619a:	71 df       	rcall	.-286    	; 0x607e <I2C_Send>
    619c:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    619e:	6f df       	rcall	.-290    	; 0x607e <I2C_Send>
    61a0:	8d 2f       	mov	r24, r29
  delayms(10);
    61a2:	6d df       	rcall	.-294    	; 0x607e <I2C_Send>
    61a4:	8c 2f       	mov	r24, r28
    61a6:	6b df       	rcall	.-298    	; 0x607e <I2C_Send>
    61a8:	62 df       	rcall	.-316    	; 0x606e <I2C_Stop>
    61aa:	6a e0       	ldi	r22, 0x0A	; 10
    61ac:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    61ae:	80 e0       	ldi	r24, 0x00	; 0
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	8e d9       	rcall	.-3300   	; 0x54d0 <delayms>
    61b4:	df 91       	pop	r29
    61b6:	cf 91       	pop	r28
    61b8:	1f 91       	pop	r17
    61ba:	08 95       	ret

000061bc <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    61bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    61c0:	42 df       	rcall	.-380    	; 0x6046 <I2C_Start>
    61c2:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    61c4:	61 f1       	breq	.+88     	; 0x621e <LCD_init+0x62>
    61c6:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    61c8:	5a df       	rcall	.-332    	; 0x607e <I2C_Send>
    61ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    61ce:	88 60       	ori	r24, 0x08	; 8
    61d0:	56 df       	rcall	.-340    	; 0x607e <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    61d2:	8e ef       	ldi	r24, 0xFE	; 254
    61d4:	54 df       	rcall	.-344    	; 0x607e <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    61d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    61da:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    61dc:	50 df       	rcall	.-352    	; 0x607e <I2C_Send>
    61de:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    61e0:	4e df       	rcall	.-356    	; 0x607e <I2C_Send>
    61e2:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    61e4:	4c df       	rcall	.-360    	; 0x607e <I2C_Send>
    61e6:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    61e8:	4a df       	rcall	.-364    	; 0x607e <I2C_Send>
    61ea:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    61ec:	48 df       	rcall	.-368    	; 0x607e <I2C_Send>
    61ee:	8e ef       	ldi	r24, 0xFE	; 254
    61f0:	46 df       	rcall	.-372    	; 0x607e <I2C_Send>
    61f2:	80 e8       	ldi	r24, 0x80	; 128
    61f4:	44 df       	rcall	.-376    	; 0x607e <I2C_Send>
    61f6:	3b df       	rcall	.-394    	; 0x606e <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    61f8:	62 e3       	ldi	r22, 0x32	; 50
    61fa:	70 e0       	ldi	r23, 0x00	; 0
    61fc:	80 e0       	ldi	r24, 0x00	; 0
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	67 d9       	rcall	.-3378   	; 0x54d0 <delayms>

  lcd.xpos = 0;
    6202:	40 ec       	ldi	r20, 0xC0	; 192
    6204:	60 ec       	ldi	r22, 0xC0	; 192
    6206:	80 ec       	ldi	r24, 0xC0	; 192
    6208:	ba df       	rcall	.-140    	; 0x617e <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    620a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    620e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    6212:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    6216:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	08 95       	ret

00006220 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    6220:	cf 93       	push	r28
    6222:	df 93       	push	r29
    6224:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    6228:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    622c:	21 97       	sbiw	r28, 0x01	; 1
    622e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6232:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6236:	c8 1b       	sub	r28, r24
    6238:	d9 0b       	sbc	r29, r25
    623a:	1c 16       	cp	r1, r28
    623c:	1d 06       	cpc	r1, r29
    623e:	24 f4       	brge	.+8      	; 0x6248 <lcd_cleareol+0x28>
    6240:	80 e2       	ldi	r24, 0x20	; 32
    6242:	2e df       	rcall	.-420    	; 0x60a0 <LCD_putb>
    6244:	21 97       	sbiw	r28, 0x01	; 1
    6246:	f9 cf       	rjmp	.-14     	; 0x623a <lcd_cleareol+0x1a>
    6248:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    624c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    6250:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6254:	01 97       	sbiw	r24, 0x01	; 1
    6256:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    625a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    625e:	78 df       	rcall	.-272    	; 0x6150 <LCD_pos>
    6260:	df 91       	pop	r29
    6262:	cf 91       	pop	r28
    6264:	08 95       	ret

00006266 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    626a:	8f 37       	cpi	r24, 0x7F	; 127
    626c:	91 05       	cpc	r25, r1
    626e:	08 f0       	brcs	.+2      	; 0x6272 <lcd_putch+0xc>
    6270:	50 c0       	rjmp	.+160    	; 0x6312 <lcd_putch+0xac>
    6272:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6274:	80 32       	cpi	r24, 0x20	; 32
    6276:	91 05       	cpc	r25, r1
    6278:	4c f1       	brlt	.+82     	; 0x62cc <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    627a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    627e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6282:	01 97       	sbiw	r24, 0x01	; 1
    6284:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6288:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    628c:	82 1b       	sub	r24, r18
    628e:	93 0b       	sbc	r25, r19
    6290:	18 16       	cp	r1, r24
    6292:	19 06       	cpc	r1, r25
    6294:	7c f0       	brlt	.+30     	; 0x62b4 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6296:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    629a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    629e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    62a2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    62a6:	01 96       	adiw	r24, 0x01	; 1
    62a8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    62ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    62b0:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    62b2:	4e df       	rcall	.-356    	; 0x6150 <LCD_pos>
    62b4:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    62b6:	f4 de       	rcall	.-536    	; 0x60a0 <LCD_putb>
    62b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    62bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    62c0:	01 96       	adiw	r24, 0x01	; 1
    62c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    62c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    62ca:	23 c0       	rjmp	.+70     	; 0x6312 <lcd_putch+0xac>
    62cc:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    62ce:	91 05       	cpc	r25, r1
    62d0:	91 f4       	brne	.+36     	; 0x62f6 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    62d2:	a6 df       	rcall	.-180    	; 0x6220 <lcd_cleareol>
    62d4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    62d8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    62dc:	6f 5f       	subi	r22, 0xFF	; 255
    62de:	7f 4f       	sbci	r23, 0xFF	; 255
    62e0:	63 70       	andi	r22, 0x03	; 3
    62e2:	77 27       	eor	r23, r23
    62e4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    62e8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    62ec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    62f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    62f4:	0c c0       	rjmp	.+24     	; 0x630e <lcd_putch+0xa8>
	{
		LCD_clear();
    62f6:	0c 97       	sbiw	r24, 0x0c	; 12
    62f8:	61 f4       	brne	.+24     	; 0x6312 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    62fa:	36 df       	rcall	.-404    	; 0x6168 <LCD_clear>
    62fc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    6300:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6304:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6308:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    630c:	60 e0       	ldi	r22, 0x00	; 0
    630e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6310:	1f df       	rcall	.-450    	; 0x6150 <LCD_pos>
    6312:	df 91       	pop	r29
    6314:	cf 91       	pop	r28
    6316:	08 95       	ret

00006318 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6318:	fc 01       	movw	r30, r24
	p->sent++;
    631a:	26 81       	ldd	r18, Z+6	; 0x06
    631c:	37 81       	ldd	r19, Z+7	; 0x07
    631e:	2f 5f       	subi	r18, 0xFF	; 255
    6320:	3f 4f       	sbci	r19, 0xFF	; 255
    6322:	37 83       	std	Z+7, r19	; 0x07
    6324:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    6326:	86 2f       	mov	r24, r22
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	9d cf       	rjmp	.-198    	; 0x6266 <lcd_putch>
    632c:	08 95       	ret

0000632e <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    632e:	a8 e0       	ldi	r26, 0x08	; 8
    6330:	b0 e0       	ldi	r27, 0x00	; 0
    6332:	ed e9       	ldi	r30, 0x9D	; 157
    6334:	f1 e3       	ldi	r31, 0x31	; 49
    6336:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    633a:	9e 01       	movw	r18, r28
    633c:	23 5f       	subi	r18, 0xF3	; 243
    633e:	3f 4f       	sbci	r19, 0xFF	; 255
    6340:	f9 01       	movw	r30, r18
    6342:	41 91       	ld	r20, Z+
    6344:	51 91       	ld	r21, Z+
    6346:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6348:	8c e8       	ldi	r24, 0x8C	; 140
    634a:	91 e3       	ldi	r25, 0x31	; 49
    634c:	9a 83       	std	Y+2, r25	; 0x02
    634e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    6350:	18 86       	std	Y+8, r1	; 0x08
    6352:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6354:	60 e8       	ldi	r22, 0x80	; 128
    6356:	ce 01       	movw	r24, r28
    6358:	01 96       	adiw	r24, 0x01	; 1
    635a:	0e 94 3b 42 	call	0x8476	; 0x8476 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    635e:	8f 81       	ldd	r24, Y+7	; 0x07
    6360:	98 85       	ldd	r25, Y+8	; 0x08
    6362:	28 96       	adiw	r28, 0x08	; 8
    6364:	e2 e0       	ldi	r30, 0x02	; 2
    6366:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000636a <sep>:
    *token = 0;
    // str points past the token
    if(!len)
        return(NULL);
    return(str);
}
    636a:	8e ef       	ldi	r24, 0xFE	; 254
    636c:	94 e0       	ldi	r25, 0x04	; 4
    636e:	1f 92       	push	r1
    6370:	9f 93       	push	r25
    6372:	8f 93       	push	r24
    6374:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6378:	0f 90       	pop	r0
    637a:	0f 90       	pop	r0
    637c:	0f 90       	pop	r0
    637e:	08 95       	ret

00006380 <isupper>:
    6380:	9c 01       	movw	r18, r24
    6382:	21 54       	subi	r18, 0x41	; 65
    6384:	31 09       	sbc	r19, r1
    6386:	81 e0       	ldi	r24, 0x01	; 1
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	2a 31       	cpi	r18, 0x1A	; 26
    638c:	31 05       	cpc	r19, r1
    638e:	10 f0       	brcs	.+4      	; 0x6394 <isupper+0x14>
    6390:	80 e0       	ldi	r24, 0x00	; 0
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	08 95       	ret

00006396 <islower>:
    6396:	9c 01       	movw	r18, r24
    6398:	21 56       	subi	r18, 0x61	; 97
    639a:	31 09       	sbc	r19, r1
    639c:	81 e0       	ldi	r24, 0x01	; 1
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	2a 31       	cpi	r18, 0x1A	; 26
    63a2:	31 05       	cpc	r19, r1
    63a4:	10 f0       	brcs	.+4      	; 0x63aa <islower+0x14>
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	08 95       	ret

000063ac <tolower>:
    63ac:	cf 93       	push	r28
    63ae:	df 93       	push	r29
    63b0:	ec 01       	movw	r28, r24
    63b2:	e6 df       	rcall	.-52     	; 0x6380 <isupper>
    63b4:	89 2b       	or	r24, r25
    63b6:	19 f0       	breq	.+6      	; 0x63be <tolower+0x12>
    63b8:	ce 01       	movw	r24, r28
    63ba:	80 96       	adiw	r24, 0x20	; 32
    63bc:	01 c0       	rjmp	.+2      	; 0x63c0 <tolower+0x14>
    63be:	ce 01       	movw	r24, r28
    63c0:	df 91       	pop	r29
    63c2:	cf 91       	pop	r28
    63c4:	08 95       	ret

000063c6 <toupper>:
    63c6:	cf 93       	push	r28
    63c8:	df 93       	push	r29
    63ca:	ec 01       	movw	r28, r24
    63cc:	e4 df       	rcall	.-56     	; 0x6396 <islower>
    63ce:	89 2b       	or	r24, r25
    63d0:	19 f0       	breq	.+6      	; 0x63d8 <toupper+0x12>
    63d2:	ce 01       	movw	r24, r28
    63d4:	80 97       	sbiw	r24, 0x20	; 32
    63d6:	01 c0       	rjmp	.+2      	; 0x63da <toupper+0x14>
    63d8:	ce 01       	movw	r24, r28
    63da:	df 91       	pop	r29
    63dc:	cf 91       	pop	r28
    63de:	08 95       	ret

000063e0 <strcpy>:
    63e0:	fc 01       	movw	r30, r24
    63e2:	db 01       	movw	r26, r22
    63e4:	2d 91       	ld	r18, X+
    63e6:	bd 01       	movw	r22, r26
    63e8:	01 96       	adiw	r24, 0x01	; 1
    63ea:	22 23       	and	r18, r18
    63ec:	11 f0       	breq	.+4      	; 0x63f2 <strcpy+0x12>
    63ee:	20 83       	st	Z, r18
    63f0:	f7 cf       	rjmp	.-18     	; 0x63e0 <strcpy>
    63f2:	10 82       	st	Z, r1
    63f4:	08 95       	ret

000063f6 <strncpy>:
    63f6:	db 01       	movw	r26, r22
    63f8:	fc 01       	movw	r30, r24
    63fa:	2d 91       	ld	r18, X+
    63fc:	21 11       	cpse	r18, r1
    63fe:	03 c0       	rjmp	.+6      	; 0x6406 <strncpy+0x10>
    6400:	4e 0f       	add	r20, r30
    6402:	5f 1f       	adc	r21, r31
    6404:	08 c0       	rjmp	.+16     	; 0x6416 <strncpy+0x20>
    6406:	41 15       	cp	r20, r1
    6408:	51 05       	cpc	r21, r1
    640a:	21 f0       	breq	.+8      	; 0x6414 <strncpy+0x1e>
    640c:	21 93       	st	Z+, r18
    640e:	41 50       	subi	r20, 0x01	; 1
    6410:	51 09       	sbc	r21, r1
    6412:	f3 cf       	rjmp	.-26     	; 0x63fa <strncpy+0x4>
    6414:	08 95       	ret
    6416:	4e 17       	cp	r20, r30
    6418:	5f 07       	cpc	r21, r31
    641a:	11 f0       	breq	.+4      	; 0x6420 <strncpy+0x2a>
    641c:	11 92       	st	Z+, r1
    641e:	fb cf       	rjmp	.-10     	; 0x6416 <strncpy+0x20>
    6420:	08 95       	ret

00006422 <strcat>:
    6422:	cf 93       	push	r28
    6424:	df 93       	push	r29
    6426:	d8 2f       	mov	r29, r24
    6428:	c9 2f       	mov	r28, r25
    642a:	28 2f       	mov	r18, r24
    642c:	39 2f       	mov	r19, r25
    642e:	c9 01       	movw	r24, r18
    6430:	2f 5f       	subi	r18, 0xFF	; 255
    6432:	3f 4f       	sbci	r19, 0xFF	; 255
    6434:	fc 01       	movw	r30, r24
    6436:	40 81       	ld	r20, Z
    6438:	41 11       	cpse	r20, r1
    643a:	f9 cf       	rjmp	.-14     	; 0x642e <strcat+0xc>
    643c:	d1 df       	rcall	.-94     	; 0x63e0 <strcpy>
    643e:	8d 2f       	mov	r24, r29
    6440:	9c 2f       	mov	r25, r28
    6442:	df 91       	pop	r29
    6444:	cf 91       	pop	r28
    6446:	08 95       	ret

00006448 <reverse>:
    6448:	fc 01       	movw	r30, r24
    644a:	01 90       	ld	r0, Z+
    644c:	00 20       	and	r0, r0
    644e:	e9 f7       	brne	.-6      	; 0x644a <reverse+0x2>
    6450:	31 97       	sbiw	r30, 0x01	; 1
    6452:	e8 1b       	sub	r30, r24
    6454:	f9 0b       	sbc	r31, r25
    6456:	af 01       	movw	r20, r30
    6458:	55 95       	asr	r21
    645a:	47 95       	ror	r20
    645c:	e8 0f       	add	r30, r24
    645e:	f9 1f       	adc	r31, r25
    6460:	dc 01       	movw	r26, r24
    6462:	9d 01       	movw	r18, r26
    6464:	28 1b       	sub	r18, r24
    6466:	39 0b       	sbc	r19, r25
    6468:	24 17       	cp	r18, r20
    646a:	35 07       	cpc	r19, r21
    646c:	2c f4       	brge	.+10     	; 0x6478 <reverse+0x30>
    646e:	22 91       	ld	r18, -Z
    6470:	3c 91       	ld	r19, X
    6472:	30 83       	st	Z, r19
    6474:	2d 93       	st	X+, r18
    6476:	f5 cf       	rjmp	.-22     	; 0x6462 <reverse+0x1a>
    6478:	08 95       	ret

0000647a <strupper>:
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	ec 01       	movw	r28, r24
    6480:	88 81       	ld	r24, Y
    6482:	88 23       	and	r24, r24
    6484:	21 f0       	breq	.+8      	; 0x648e <strupper+0x14>
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	9e df       	rcall	.-196    	; 0x63c6 <toupper>
    648a:	89 93       	st	Y+, r24
    648c:	f9 cf       	rjmp	.-14     	; 0x6480 <strupper+0x6>
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	08 95       	ret

00006494 <trim_tail>:
    6494:	fc 01       	movw	r30, r24
    6496:	01 90       	ld	r0, Z+
    6498:	00 20       	and	r0, r0
    649a:	e9 f7       	brne	.-6      	; 0x6496 <trim_tail+0x2>
    649c:	31 97       	sbiw	r30, 0x01	; 1
    649e:	e8 17       	cp	r30, r24
    64a0:	f9 07       	cpc	r31, r25
    64a2:	29 f0       	breq	.+10     	; 0x64ae <trim_tail+0x1a>
    64a4:	22 91       	ld	r18, -Z
    64a6:	21 32       	cpi	r18, 0x21	; 33
    64a8:	10 f4       	brcc	.+4      	; 0x64ae <trim_tail+0x1a>
    64aa:	10 82       	st	Z, r1
    64ac:	f8 cf       	rjmp	.-16     	; 0x649e <trim_tail+0xa>
    64ae:	08 95       	ret

000064b0 <skipspaces>:
    64b0:	00 97       	sbiw	r24, 0x00	; 0
    64b2:	39 f0       	breq	.+14     	; 0x64c2 <skipspaces+0x12>
    64b4:	fc 01       	movw	r30, r24
    64b6:	cf 01       	movw	r24, r30
    64b8:	21 91       	ld	r18, Z+
    64ba:	20 32       	cpi	r18, 0x20	; 32
    64bc:	e1 f3       	breq	.-8      	; 0x64b6 <skipspaces+0x6>
    64be:	29 30       	cpi	r18, 0x09	; 9
    64c0:	d1 f3       	breq	.-12     	; 0x64b6 <skipspaces+0x6>
    64c2:	08 95       	ret

000064c4 <strcmp>:
    64c4:	dc 01       	movw	r26, r24
    64c6:	fb 01       	movw	r30, r22
    64c8:	2d 91       	ld	r18, X+
    64ca:	41 91       	ld	r20, Z+
    64cc:	50 e0       	ldi	r21, 0x00	; 0
    64ce:	30 e0       	ldi	r19, 0x00	; 0
    64d0:	c9 01       	movw	r24, r18
    64d2:	84 1b       	sub	r24, r20
    64d4:	95 0b       	sbc	r25, r21
    64d6:	11 f4       	brne	.+4      	; 0x64dc <strcmp+0x18>
    64d8:	45 2b       	or	r20, r21
    64da:	b1 f7       	brne	.-20     	; 0x64c8 <strcmp+0x4>
    64dc:	08 95       	ret

000064de <strncmp>:
    64de:	fc 01       	movw	r30, r24
    64e0:	db 01       	movw	r26, r22
    64e2:	48 0f       	add	r20, r24
    64e4:	59 1f       	adc	r21, r25
    64e6:	e4 17       	cp	r30, r20
    64e8:	f5 07       	cpc	r31, r21
    64ea:	59 f0       	breq	.+22     	; 0x6502 <strncmp+0x24>
    64ec:	21 91       	ld	r18, Z+
    64ee:	6d 91       	ld	r22, X+
    64f0:	70 e0       	ldi	r23, 0x00	; 0
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	c9 01       	movw	r24, r18
    64f6:	86 1b       	sub	r24, r22
    64f8:	97 0b       	sbc	r25, r23
    64fa:	29 f4       	brne	.+10     	; 0x6506 <strncmp+0x28>
    64fc:	67 2b       	or	r22, r23
    64fe:	99 f7       	brne	.-26     	; 0x64e6 <strncmp+0x8>
    6500:	02 c0       	rjmp	.+4      	; 0x6506 <strncmp+0x28>
    6502:	80 e0       	ldi	r24, 0x00	; 0
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	08 95       	ret

00006508 <strcasecmp>:
    6508:	ef 92       	push	r14
    650a:	ff 92       	push	r15
    650c:	0f 93       	push	r16
    650e:	1f 93       	push	r17
    6510:	cf 93       	push	r28
    6512:	df 93       	push	r29
    6514:	7c 01       	movw	r14, r24
    6516:	8b 01       	movw	r16, r22
    6518:	f7 01       	movw	r30, r14
    651a:	81 91       	ld	r24, Z+
    651c:	7f 01       	movw	r14, r30
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	52 df       	rcall	.-348    	; 0x63c6 <toupper>
    6522:	ec 01       	movw	r28, r24
    6524:	f8 01       	movw	r30, r16
    6526:	81 91       	ld	r24, Z+
    6528:	8f 01       	movw	r16, r30
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	4c df       	rcall	.-360    	; 0x63c6 <toupper>
    652e:	9c 01       	movw	r18, r24
    6530:	ce 01       	movw	r24, r28
    6532:	82 1b       	sub	r24, r18
    6534:	93 0b       	sbc	r25, r19
    6536:	11 f4       	brne	.+4      	; 0x653c <strcasecmp+0x34>
    6538:	23 2b       	or	r18, r19
    653a:	71 f7       	brne	.-36     	; 0x6518 <strcasecmp+0x10>
    653c:	cd b7       	in	r28, 0x3d	; 61
    653e:	de b7       	in	r29, 0x3e	; 62
    6540:	e6 e0       	ldi	r30, 0x06	; 6
    6542:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00006546 <strncasecmp>:
    6546:	a0 e0       	ldi	r26, 0x00	; 0
    6548:	b0 e0       	ldi	r27, 0x00	; 0
    654a:	e9 ea       	ldi	r30, 0xA9	; 169
    654c:	f2 e3       	ldi	r31, 0x32	; 50
    654e:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    6552:	8c 01       	movw	r16, r24
    6554:	7b 01       	movw	r14, r22
    6556:	6c 01       	movw	r12, r24
    6558:	c4 0e       	add	r12, r20
    655a:	d5 1e       	adc	r13, r21
    655c:	0c 15       	cp	r16, r12
    655e:	1d 05       	cpc	r17, r13
    6560:	99 f0       	breq	.+38     	; 0x6588 <strncasecmp+0x42>
    6562:	f8 01       	movw	r30, r16
    6564:	81 91       	ld	r24, Z+
    6566:	8f 01       	movw	r16, r30
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	2d df       	rcall	.-422    	; 0x63c6 <toupper>
    656c:	ec 01       	movw	r28, r24
    656e:	f7 01       	movw	r30, r14
    6570:	81 91       	ld	r24, Z+
    6572:	7f 01       	movw	r14, r30
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	27 df       	rcall	.-434    	; 0x63c6 <toupper>
    6578:	9c 01       	movw	r18, r24
    657a:	ce 01       	movw	r24, r28
    657c:	82 1b       	sub	r24, r18
    657e:	93 0b       	sbc	r25, r19
    6580:	29 f4       	brne	.+10     	; 0x658c <strncasecmp+0x46>
    6582:	23 2b       	or	r18, r19
    6584:	59 f7       	brne	.-42     	; 0x655c <strncasecmp+0x16>
    6586:	02 c0       	rjmp	.+4      	; 0x658c <strncasecmp+0x46>
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	cd b7       	in	r28, 0x3d	; 61
    658e:	de b7       	in	r29, 0x3e	; 62
    6590:	e8 e0       	ldi	r30, 0x08	; 8
    6592:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00006596 <MATCH>:
    6596:	cf 93       	push	r28
    6598:	df 93       	push	r29
    659a:	fb 01       	movw	r30, r22
    659c:	01 90       	ld	r0, Z+
    659e:	00 20       	and	r0, r0
    65a0:	e9 f7       	brne	.-6      	; 0x659c <MATCH+0x6>
    65a2:	31 97       	sbiw	r30, 0x01	; 1
    65a4:	ef 01       	movw	r28, r30
    65a6:	c6 1b       	sub	r28, r22
    65a8:	d7 0b       	sbc	r29, r23
    65aa:	8c df       	rcall	.-232    	; 0x64c4 <strcmp>
    65ac:	89 2b       	or	r24, r25
    65ae:	11 f4       	brne	.+4      	; 0x65b4 <MATCH+0x1e>
    65b0:	ce 01       	movw	r24, r28
    65b2:	02 c0       	rjmp	.+4      	; 0x65b8 <MATCH+0x22>
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	08 95       	ret

000065be <MATCHARGS>:
    65be:	ef 92       	push	r14
    65c0:	ff 92       	push	r15
    65c2:	0f 93       	push	r16
    65c4:	1f 93       	push	r17
    65c6:	cf 93       	push	r28
    65c8:	df 93       	push	r29
    65ca:	f6 2e       	mov	r15, r22
    65cc:	e7 2e       	mov	r14, r23
    65ce:	ea 01       	movw	r28, r20
    65d0:	89 01       	movw	r16, r18
    65d2:	e1 df       	rcall	.-62     	; 0x6596 <MATCH>
    65d4:	00 97       	sbiw	r24, 0x00	; 0
    65d6:	e9 f0       	breq	.+58     	; 0x6612 <MATCHARGS+0x54>
    65d8:	0c 17       	cp	r16, r28
    65da:	1d 07       	cpc	r17, r29
    65dc:	c4 f4       	brge	.+48     	; 0x660e <MATCHARGS+0x50>
    65de:	1f 93       	push	r17
    65e0:	0f 93       	push	r16
    65e2:	df 93       	push	r29
    65e4:	cf 93       	push	r28
    65e6:	ef 92       	push	r14
    65e8:	ff 92       	push	r15
    65ea:	88 ed       	ldi	r24, 0xD8	; 216
    65ec:	94 e0       	ldi	r25, 0x04	; 4
    65ee:	1f 92       	push	r1
    65f0:	9f 93       	push	r25
    65f2:	8f 93       	push	r24
    65f4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    65f8:	8d b7       	in	r24, 0x3d	; 61
    65fa:	9e b7       	in	r25, 0x3e	; 62
    65fc:	09 96       	adiw	r24, 0x09	; 9
    65fe:	0f b6       	in	r0, 0x3f	; 63
    6600:	f8 94       	cli
    6602:	9e bf       	out	0x3e, r25	; 62
    6604:	0f be       	out	0x3f, r0	; 63
    6606:	8d bf       	out	0x3d, r24	; 61
    6608:	80 e0       	ldi	r24, 0x00	; 0
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	02 c0       	rjmp	.+4      	; 0x6612 <MATCHARGS+0x54>
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	cd b7       	in	r28, 0x3d	; 61
    6614:	de b7       	in	r29, 0x3e	; 62
    6616:	e6 e0       	ldi	r30, 0x06	; 6
    6618:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000661c <MATCHI>:
    661c:	cf 93       	push	r28
    661e:	df 93       	push	r29
    6620:	fb 01       	movw	r30, r22
    6622:	01 90       	ld	r0, Z+
    6624:	00 20       	and	r0, r0
    6626:	e9 f7       	brne	.-6      	; 0x6622 <MATCHI+0x6>
    6628:	31 97       	sbiw	r30, 0x01	; 1
    662a:	ef 01       	movw	r28, r30
    662c:	c6 1b       	sub	r28, r22
    662e:	d7 0b       	sbc	r29, r23
    6630:	6b df       	rcall	.-298    	; 0x6508 <strcasecmp>
    6632:	89 2b       	or	r24, r25
    6634:	11 f4       	brne	.+4      	; 0x663a <MATCHI+0x1e>
    6636:	ce 01       	movw	r24, r28
    6638:	02 c0       	rjmp	.+4      	; 0x663e <MATCHI+0x22>
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	df 91       	pop	r29
    6640:	cf 91       	pop	r28
    6642:	08 95       	ret

00006644 <MATCHI_LEN>:
    6644:	cf 93       	push	r28
    6646:	df 93       	push	r29
    6648:	00 97       	sbiw	r24, 0x00	; 0
    664a:	89 f0       	breq	.+34     	; 0x666e <MATCHI_LEN+0x2a>
    664c:	61 15       	cp	r22, r1
    664e:	71 05       	cpc	r23, r1
    6650:	71 f0       	breq	.+28     	; 0x666e <MATCHI_LEN+0x2a>
    6652:	eb 01       	movw	r28, r22
    6654:	09 90       	ld	r0, Y+
    6656:	00 20       	and	r0, r0
    6658:	e9 f7       	brne	.-6      	; 0x6654 <MATCHI_LEN+0x10>
    665a:	21 97       	sbiw	r28, 0x01	; 1
    665c:	c6 1b       	sub	r28, r22
    665e:	d7 0b       	sbc	r29, r23
    6660:	31 f0       	breq	.+12     	; 0x666e <MATCHI_LEN+0x2a>
    6662:	ae 01       	movw	r20, r28
    6664:	70 df       	rcall	.-288    	; 0x6546 <strncasecmp>
    6666:	89 2b       	or	r24, r25
    6668:	11 f4       	brne	.+4      	; 0x666e <MATCHI_LEN+0x2a>
    666a:	ce 01       	movw	r24, r28
    666c:	02 c0       	rjmp	.+4      	; 0x6672 <MATCHI_LEN+0x2e>
    666e:	80 e0       	ldi	r24, 0x00	; 0
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	df 91       	pop	r29
    6674:	cf 91       	pop	r28
    6676:	08 95       	ret

00006678 <split_args>:
    6678:	a0 e0       	ldi	r26, 0x00	; 0
    667a:	b0 e0       	ldi	r27, 0x00	; 0
    667c:	e2 e4       	ldi	r30, 0x42	; 66
    667e:	f3 e3       	ldi	r31, 0x33	; 51
    6680:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    6684:	dc 01       	movw	r26, r24
    6686:	6a 01       	movw	r12, r20
    6688:	8b 01       	movw	r16, r22
    668a:	fb 01       	movw	r30, r22
    668c:	80 e0       	ldi	r24, 0x00	; 0
    668e:	90 e0       	ldi	r25, 0x00	; 0
    6690:	8c 15       	cp	r24, r12
    6692:	9d 05       	cpc	r25, r13
    6694:	24 f4       	brge	.+8      	; 0x669e <split_args+0x26>
    6696:	11 92       	st	Z+, r1
    6698:	11 92       	st	Z+, r1
    669a:	01 96       	adiw	r24, 0x01	; 1
    669c:	f9 cf       	rjmp	.-14     	; 0x6690 <split_args+0x18>
    669e:	c1 14       	cp	r12, r1
    66a0:	d1 04       	cpc	r13, r1
    66a2:	d9 f1       	breq	.+118    	; 0x671a <split_args+0xa2>
    66a4:	10 97       	sbiw	r26, 0x00	; 0
    66a6:	c9 f1       	breq	.+114    	; 0x671a <split_args+0xa2>
    66a8:	ee 24       	eor	r14, r14
    66aa:	e3 94       	inc	r14
    66ac:	f1 2c       	mov	r15, r1
    66ae:	c0 e0       	ldi	r28, 0x00	; 0
    66b0:	d0 e0       	ldi	r29, 0x00	; 0
    66b2:	8c 91       	ld	r24, X
    66b4:	88 23       	and	r24, r24
    66b6:	b1 f1       	breq	.+108    	; 0x6724 <split_args+0xac>
    66b8:	cc 15       	cp	r28, r12
    66ba:	dd 05       	cpc	r29, r13
    66bc:	9c f5       	brge	.+102    	; 0x6724 <split_args+0xac>
    66be:	cd 01       	movw	r24, r26
    66c0:	f7 de       	rcall	.-530    	; 0x64b0 <skipspaces>
    66c2:	dc 01       	movw	r26, r24
    66c4:	2c 91       	ld	r18, X
    66c6:	22 23       	and	r18, r18
    66c8:	69 f1       	breq	.+90     	; 0x6724 <split_args+0xac>
    66ca:	22 32       	cpi	r18, 0x22	; 34
    66cc:	79 f4       	brne	.+30     	; 0x66ec <split_args+0x74>
    66ce:	fc 01       	movw	r30, r24
    66d0:	31 96       	adiw	r30, 0x01	; 1
    66d2:	d8 01       	movw	r26, r16
    66d4:	ed 93       	st	X+, r30
    66d6:	fc 93       	st	X, r31
    66d8:	df 01       	movw	r26, r30
    66da:	80 81       	ld	r24, Z
    66dc:	31 96       	adiw	r30, 0x01	; 1
    66de:	88 23       	and	r24, r24
    66e0:	a9 f0       	breq	.+42     	; 0x670c <split_args+0x94>
    66e2:	82 32       	cpi	r24, 0x22	; 34
    66e4:	c9 f7       	brne	.-14     	; 0x66d8 <split_args+0x60>
    66e6:	1c 92       	st	X, r1
    66e8:	df 01       	movw	r26, r30
    66ea:	10 c0       	rjmp	.+32     	; 0x670c <split_args+0x94>
    66ec:	f8 01       	movw	r30, r16
    66ee:	91 83       	std	Z+1, r25	; 0x01
    66f0:	80 83       	st	Z, r24
    66f2:	fc 01       	movw	r30, r24
    66f4:	2e 2f       	mov	r18, r30
    66f6:	9f 2f       	mov	r25, r31
    66f8:	81 91       	ld	r24, Z+
    66fa:	3f ed       	ldi	r19, 0xDF	; 223
    66fc:	38 0f       	add	r19, r24
    66fe:	3e 35       	cpi	r19, 0x5E	; 94
    6700:	c8 f3       	brcs	.-14     	; 0x66f4 <split_args+0x7c>
    6702:	88 23       	and	r24, r24
    6704:	69 f0       	breq	.+26     	; 0x6720 <split_args+0xa8>
    6706:	a2 2f       	mov	r26, r18
    6708:	b9 2f       	mov	r27, r25
    670a:	1d 92       	st	X+, r1
    670c:	21 96       	adiw	r28, 0x01	; 1
    670e:	ff ef       	ldi	r31, 0xFF	; 255
    6710:	ef 1a       	sub	r14, r31
    6712:	ff 0a       	sbc	r15, r31
    6714:	0e 5f       	subi	r16, 0xFE	; 254
    6716:	1f 4f       	sbci	r17, 0xFF	; 255
    6718:	cc cf       	rjmp	.-104    	; 0x66b2 <split_args+0x3a>
    671a:	80 e0       	ldi	r24, 0x00	; 0
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	03 c0       	rjmp	.+6      	; 0x6726 <split_args+0xae>
    6720:	c7 01       	movw	r24, r14
    6722:	01 c0       	rjmp	.+2      	; 0x6726 <split_args+0xae>
    6724:	ce 01       	movw	r24, r28
    6726:	cd b7       	in	r28, 0x3d	; 61
    6728:	de b7       	in	r29, 0x3e	; 62
    672a:	e8 e0       	ldi	r30, 0x08	; 8
    672c:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00006730 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6730:	ef 92       	push	r14
    6732:	ff 92       	push	r15
    6734:	0f 93       	push	r16
    6736:	1f 93       	push	r17
    6738:	cf 93       	push	r28
    673a:	df 93       	push	r29
    673c:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    673e:	8b 01       	movw	r16, r22
    6740:	b7 de       	rcall	.-658    	; 0x64b0 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6742:	9c 01       	movw	r18, r24
    6744:	fc 01       	movw	r30, r24
    6746:	ef 01       	movw	r28, r30
    6748:	c2 1b       	sub	r28, r18
    674a:	d3 0b       	sbc	r29, r19
    674c:	91 91       	ld	r25, Z+
    674e:	91 52       	subi	r25, 0x21	; 33
    6750:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    6752:	c8 f3       	brcs	.-14     	; 0x6746 <token+0x16>
    6754:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    6756:	91 f0       	breq	.+36     	; 0x677c <token+0x4c>
    6758:	f8 01       	movw	r30, r16
    675a:	01 90       	ld	r0, Z+
    675c:	00 20       	and	r0, r0
    675e:	e9 f7       	brne	.-6      	; 0x675a <token+0x2a>
    6760:	31 97       	sbiw	r30, 0x01	; 1
    6762:	e0 1b       	sub	r30, r16

    if(len != patlen)
    6764:	f1 0b       	sbc	r31, r17
    6766:	ec 17       	cp	r30, r28
    6768:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    676a:	31 f4       	brne	.+12     	; 0x6778 <token+0x48>
    676c:	ae 01       	movw	r20, r28
    676e:	b8 01       	movw	r22, r16
    6770:	c7 01       	movw	r24, r14
    6772:	b5 de       	rcall	.-662    	; 0x64de <strncmp>
    6774:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    6776:	11 f0       	breq	.+4      	; 0x677c <token+0x4c>
    6778:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    677a:	d0 e0       	ldi	r29, 0x00	; 0
    677c:	ce 01       	movw	r24, r28
    677e:	cd b7       	in	r28, 0x3d	; 61
    6780:	de b7       	in	r29, 0x3e	; 62
    6782:	e6 e0       	ldi	r30, 0x06	; 6
    6784:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00006788 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    6788:	a2 e0       	ldi	r26, 0x02	; 2
    678a:	b0 e0       	ldi	r27, 0x00	; 0
    678c:	ea ec       	ldi	r30, 0xCA	; 202
    678e:	f3 e3       	ldi	r31, 0x33	; 51
    6790:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    6794:	8d de       	rcall	.-742    	; 0x64b0 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6796:	8c 01       	movw	r16, r24
    6798:	68 e1       	ldi	r22, 0x18	; 24
    679a:	77 e0       	ldi	r23, 0x07	; 7
    679c:	53 df       	rcall	.-346    	; 0x6644 <MATCHI_LEN>
    679e:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    67a0:	29 f0       	breq	.+10     	; 0x67ac <get_value+0x24>
    67a2:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    67a4:	19 1f       	adc	r17, r25
    67a6:	40 e1       	ldi	r20, 0x10	; 16
    67a8:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    67aa:	18 c0       	rjmp	.+48     	; 0x67dc <get_value+0x54>
    67ac:	6b e1       	ldi	r22, 0x1B	; 27
    67ae:	77 e0       	ldi	r23, 0x07	; 7
    67b0:	c8 01       	movw	r24, r16
    67b2:	48 df       	rcall	.-368    	; 0x6644 <MATCHI_LEN>
    67b4:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    67b6:	29 f0       	breq	.+10     	; 0x67c2 <get_value+0x3a>
    67b8:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    67ba:	19 1f       	adc	r17, r25
    67bc:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    67be:	50 e0       	ldi	r21, 0x00	; 0
    67c0:	0d c0       	rjmp	.+26     	; 0x67dc <get_value+0x54>
    67c2:	6e e1       	ldi	r22, 0x1E	; 30
    67c4:	77 e0       	ldi	r23, 0x07	; 7
    67c6:	c8 01       	movw	r24, r16
    67c8:	3d df       	rcall	.-390    	; 0x6644 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    67ca:	00 97       	sbiw	r24, 0x00	; 0
    67cc:	29 f0       	breq	.+10     	; 0x67d8 <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    67ce:	08 0f       	add	r16, r24
    67d0:	19 1f       	adc	r17, r25
    67d2:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    67d4:	50 e0       	ldi	r21, 0x00	; 0
    67d6:	02 c0       	rjmp	.+4      	; 0x67dc <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    67d8:	4a e0       	ldi	r20, 0x0A	; 10
    67da:	50 e0       	ldi	r21, 0x00	; 0
    67dc:	be 01       	movw	r22, r28
    67de:	6f 5f       	subi	r22, 0xFF	; 255
    67e0:	7f 4f       	sbci	r23, 0xFF	; 255
    67e2:	c8 01       	movw	r24, r16
}
    67e4:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    67e8:	22 96       	adiw	r28, 0x02	; 2
    67ea:	e4 e0       	ldi	r30, 0x04	; 4
    67ec:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

000067f0 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    67f0:	78 94       	sei
    67f2:	08 95       	ret

000067f4 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    67f4:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    67f6:	89 e0       	ldi	r24, 0x09	; 9
    67f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    67fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6800:	8f e1       	ldi	r24, 0x1F	; 31
    6802:	9e e4       	ldi	r25, 0x4E	; 78
    6804:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6808:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    680c:	ef e6       	ldi	r30, 0x6F	; 111
    680e:	f0 e0       	ldi	r31, 0x00	; 0
    6810:	80 81       	ld	r24, Z
    6812:	82 60       	ori	r24, 0x02	; 2
    6814:	80 83       	st	Z, r24
    sei();
    6816:	78 94       	sei
    6818:	08 95       	ret

0000681a <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    681a:	1f 92       	push	r1
    681c:	0f 92       	push	r0
    681e:	0f b6       	in	r0, 0x3f	; 63
    6820:	0f 92       	push	r0
    6822:	11 24       	eor	r1, r1
    6824:	0b b6       	in	r0, 0x3b	; 59
    6826:	0f 92       	push	r0
    6828:	2f 93       	push	r18
    682a:	3f 93       	push	r19
    682c:	4f 93       	push	r20
    682e:	5f 93       	push	r21
    6830:	6f 93       	push	r22
    6832:	7f 93       	push	r23
    6834:	8f 93       	push	r24
    6836:	9f 93       	push	r25
    6838:	af 93       	push	r26
    683a:	bf 93       	push	r27
    683c:	ef 93       	push	r30
    execute_timers();
    683e:	ff 93       	push	r31
}
    6840:	26 d2       	rcall	.+1100   	; 0x6c8e <execute_timers>
    6842:	ff 91       	pop	r31
    6844:	ef 91       	pop	r30
    6846:	bf 91       	pop	r27
    6848:	af 91       	pop	r26
    684a:	9f 91       	pop	r25
    684c:	8f 91       	pop	r24
    684e:	7f 91       	pop	r23
    6850:	6f 91       	pop	r22
    6852:	5f 91       	pop	r21
    6854:	4f 91       	pop	r20
    6856:	3f 91       	pop	r19
    6858:	2f 91       	pop	r18
    685a:	0f 90       	pop	r0
    685c:	0b be       	out	0x3b, r0	; 59
    685e:	0f 90       	pop	r0
    6860:	0f be       	out	0x3f, r0	; 63
    6862:	0f 90       	pop	r0
    6864:	1f 90       	pop	r1
    6866:	18 95       	reti

00006868 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6868:	0f 93       	push	r16
    686a:	1f 93       	push	r17
    686c:	cf 93       	push	r28
    686e:	df 93       	push	r29
    6870:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    6872:	f8 94       	cli

    count1 = TCNT1;
    6874:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6878:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    687c:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    6880:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    6884:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    6888:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    688c:	80 83       	st	Z, r24
    688e:	91 83       	std	Z+1, r25	; 0x01
    6890:	a2 83       	std	Z+2, r26	; 0x02
    6892:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6894:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    6898:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    689c:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    68a0:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    68a4:	84 83       	std	Z+4, r24	; 0x04
    68a6:	95 83       	std	Z+5, r25	; 0x05
    68a8:	a6 83       	std	Z+6, r26	; 0x06
    68aa:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    68ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    68b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    68b4:	b1 9b       	sbis	0x16, 1	; 22
    68b6:	03 c0       	rjmp	.+6      	; 0x68be <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68b8:	c0 e0       	ldi	r28, 0x00	; 0
    68ba:	d0 e0       	ldi	r29, 0x00	; 0
    68bc:	3f c0       	rjmp	.+126    	; 0x693c <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    68be:	82 17       	cp	r24, r18
    68c0:	93 07       	cpc	r25, r19
    68c2:	d0 f1       	brcs	.+116    	; 0x6938 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68c4:	c0 e0       	ldi	r28, 0x00	; 0
    68c6:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    68c8:	40 e0       	ldi	r20, 0x00	; 0
    68ca:	50 e0       	ldi	r21, 0x00	; 0
    68cc:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    68ce:	9a 01       	movw	r18, r20
    68d0:	ab 01       	movw	r20, r22
    68d2:	28 0f       	add	r18, r24
    68d4:	39 1f       	adc	r19, r25
    68d6:	41 1d       	adc	r20, r1
    68d8:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    68da:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    68dc:	a2 e3       	ldi	r26, 0x32	; 50
    68de:	b0 e0       	ldi	r27, 0x00	; 0
    68e0:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    68e4:	04 81       	ldd	r16, Z+4	; 0x04
    68e6:	15 81       	ldd	r17, Z+5	; 0x05
    68e8:	26 81       	ldd	r18, Z+6	; 0x06
    68ea:	37 81       	ldd	r19, Z+7	; 0x07
    68ec:	dc 01       	movw	r26, r24
    68ee:	cb 01       	movw	r24, r22
    68f0:	80 0f       	add	r24, r16
    68f2:	91 1f       	adc	r25, r17
    68f4:	a2 1f       	adc	r26, r18
    68f6:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    68f8:	81 15       	cp	r24, r1
    68fa:	2a ec       	ldi	r18, 0xCA	; 202
    68fc:	92 07       	cpc	r25, r18
    68fe:	2a e9       	ldi	r18, 0x9A	; 154
    6900:	a2 07       	cpc	r26, r18
    6902:	2b e3       	ldi	r18, 0x3B	; 59
    6904:	b2 07       	cpc	r27, r18
    6906:	2c f4       	brge	.+10     	; 0x6912 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6908:	84 83       	std	Z+4, r24	; 0x04
    690a:	95 83       	std	Z+5, r25	; 0x05
    690c:	a6 83       	std	Z+6, r26	; 0x06
    690e:	b7 83       	std	Z+7, r27	; 0x07
    6910:	1a c0       	rjmp	.+52     	; 0x6946 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6912:	9a 5c       	subi	r25, 0xCA	; 202
    6914:	aa 49       	sbci	r26, 0x9A	; 154
    6916:	bb 43       	sbci	r27, 0x3B	; 59
    6918:	84 83       	std	Z+4, r24	; 0x04
    691a:	95 83       	std	Z+5, r25	; 0x05
    691c:	a6 83       	std	Z+6, r26	; 0x06
    691e:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6920:	80 81       	ld	r24, Z
    6922:	91 81       	ldd	r25, Z+1	; 0x01
    6924:	a2 81       	ldd	r26, Z+2	; 0x02
    6926:	b3 81       	ldd	r27, Z+3	; 0x03
    6928:	01 96       	adiw	r24, 0x01	; 1
    692a:	a1 1d       	adc	r26, r1
    692c:	b1 1d       	adc	r27, r1
    692e:	80 83       	st	Z, r24
    6930:	91 83       	std	Z+1, r25	; 0x01
    6932:	a2 83       	std	Z+2, r26	; 0x02
    6934:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6936:	07 c0       	rjmp	.+14     	; 0x6946 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6938:	cf ef       	ldi	r28, 0xFF	; 255
    693a:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    693c:	40 e2       	ldi	r20, 0x20	; 32
    693e:	5e e4       	ldi	r21, 0x4E	; 78
    6940:	60 e0       	ldi	r22, 0x00	; 0
    6942:	70 e0       	ldi	r23, 0x00	; 0
    6944:	c4 cf       	rjmp	.-120    	; 0x68ce <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6946:	ce 01       	movw	r24, r28
    6948:	df 91       	pop	r29
    694a:	cf 91       	pop	r28
    694c:	1f 91       	pop	r17
    694e:	0f 91       	pop	r16
    6950:	08 95       	ret

00006952 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6952:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    6956:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    695a:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    695e:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    6962:	80 5c       	subi	r24, 0xC0	; 192
    6964:	9d 4b       	sbci	r25, 0xBD	; 189
    6966:	a0 4f       	sbci	r26, 0xF0	; 240
    6968:	bf 4f       	sbci	r27, 0xFF	; 255
    696a:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <__clock+0x4>
    696e:	90 93 52 1a 	sts	0x1A52, r25	; 0x801a52 <__clock+0x5>
    6972:	a0 93 53 1a 	sts	0x1A53, r26	; 0x801a53 <__clock+0x6>
    6976:	b0 93 54 1a 	sts	0x1A54, r27	; 0x801a54 <__clock+0x7>
    697a:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    697e:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    6982:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    6986:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    698a:	81 15       	cp	r24, r1
    698c:	9a 4c       	sbci	r25, 0xCA	; 202
    698e:	aa 49       	sbci	r26, 0x9A	; 154
    6990:	bb 43       	sbci	r27, 0x3B	; 59
    6992:	dc f0       	brlt	.+54     	; 0x69ca <clock_task+0x78>
    6994:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    6998:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    699c:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    69a0:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    69a4:	01 96       	adiw	r24, 0x01	; 1
    69a6:	a1 1d       	adc	r26, r1
    69a8:	b1 1d       	adc	r27, r1
    69aa:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <__clock>
    69ae:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <__clock+0x1>
    69b2:	a0 93 4f 1a 	sts	0x1A4F, r26	; 0x801a4f <__clock+0x2>
    69b6:	b0 93 50 1a 	sts	0x1A50, r27	; 0x801a50 <__clock+0x3>
    69ba:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <__clock+0x4>
    69be:	10 92 52 1a 	sts	0x1A52, r1	; 0x801a52 <__clock+0x5>
    69c2:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <__clock+0x6>
    69c6:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x7>
    69ca:	08 95       	ret

000069cc <clock_settime.part.2>:
    69cc:	fc 01       	movw	r30, r24
    69ce:	84 81       	ldd	r24, Z+4	; 0x04
    69d0:	95 81       	ldd	r25, Z+5	; 0x05
    69d2:	a6 81       	ldd	r26, Z+6	; 0x06
    69d4:	b7 81       	ldd	r27, Z+7	; 0x07
    69d6:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <__clock+0x4>
    69da:	90 93 52 1a 	sts	0x1A52, r25	; 0x801a52 <__clock+0x5>
    69de:	a0 93 53 1a 	sts	0x1A53, r26	; 0x801a53 <__clock+0x6>
    69e2:	b0 93 54 1a 	sts	0x1A54, r27	; 0x801a54 <__clock+0x7>
    69e6:	80 81       	ld	r24, Z
    69e8:	91 81       	ldd	r25, Z+1	; 0x01
    69ea:	a2 81       	ldd	r26, Z+2	; 0x02
    69ec:	b3 81       	ldd	r27, Z+3	; 0x03
    69ee:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <__clock>
    69f2:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <__clock+0x1>
    69f6:	a0 93 4f 1a 	sts	0x1A4F, r26	; 0x801a4f <__clock+0x2>
    69fa:	b0 93 50 1a 	sts	0x1A50, r27	; 0x801a50 <__clock+0x3>
    69fe:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    6a02:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    6a06:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    6a0a:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    6a0e:	44 81       	ldd	r20, Z+4	; 0x04
    6a10:	55 81       	ldd	r21, Z+5	; 0x05
    6a12:	66 81       	ldd	r22, Z+6	; 0x06
    6a14:	77 81       	ldd	r23, Z+7	; 0x07
    6a16:	48 17       	cp	r20, r24
    6a18:	59 07       	cpc	r21, r25
    6a1a:	6a 07       	cpc	r22, r26
    6a1c:	7b 07       	cpc	r23, r27
    6a1e:	b9 f6       	brne	.-82     	; 0x69ce <clock_settime.part.2+0x2>
    6a20:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    6a24:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    6a28:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    6a2c:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    6a30:	40 81       	ld	r20, Z
    6a32:	51 81       	ldd	r21, Z+1	; 0x01
    6a34:	62 81       	ldd	r22, Z+2	; 0x02
    6a36:	73 81       	ldd	r23, Z+3	; 0x03
    6a38:	48 17       	cp	r20, r24
    6a3a:	59 07       	cpc	r21, r25
    6a3c:	6a 07       	cpc	r22, r26
    6a3e:	7b 07       	cpc	r23, r27
    6a40:	31 f6       	brne	.-116    	; 0x69ce <clock_settime.part.2+0x2>
    6a42:	80 e0       	ldi	r24, 0x00	; 0
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	08 95       	ret

00006a48 <set_timers>:
    6a48:	00 97       	sbiw	r24, 0x00	; 0
    6a4a:	79 f1       	breq	.+94     	; 0x6aaa <set_timers+0x62>
    6a4c:	e5 e5       	ldi	r30, 0x55	; 85
    6a4e:	fa e1       	ldi	r31, 0x1A	; 26
    6a50:	4f ef       	ldi	r20, 0xFF	; 255
    6a52:	5f ef       	ldi	r21, 0xFF	; 255
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	60 81       	ld	r22, Z
    6a5a:	71 81       	ldd	r23, Z+1	; 0x01
    6a5c:	86 17       	cp	r24, r22
    6a5e:	97 07       	cpc	r25, r23
    6a60:	79 f0       	breq	.+30     	; 0x6a80 <set_timers+0x38>
    6a62:	67 2b       	or	r22, r23
    6a64:	71 f4       	brne	.+28     	; 0x6a82 <set_timers+0x3a>
    6a66:	f9 01       	movw	r30, r18
    6a68:	ee 0f       	add	r30, r30
    6a6a:	ff 1f       	adc	r31, r31
    6a6c:	e2 0f       	add	r30, r18
    6a6e:	f3 1f       	adc	r31, r19
    6a70:	eb 5a       	subi	r30, 0xAB	; 171
    6a72:	f5 4e       	sbci	r31, 0xE5	; 229
    6a74:	91 83       	std	Z+1, r25	; 0x01
    6a76:	80 83       	st	Z, r24
    6a78:	81 e0       	ldi	r24, 0x01	; 1
    6a7a:	82 83       	std	Z+2, r24	; 0x02
    6a7c:	c9 01       	movw	r24, r18
    6a7e:	08 95       	ret
    6a80:	a9 01       	movw	r20, r18
    6a82:	2f 5f       	subi	r18, 0xFF	; 255
    6a84:	3f 4f       	sbci	r19, 0xFF	; 255
    6a86:	33 96       	adiw	r30, 0x03	; 3
    6a88:	28 30       	cpi	r18, 0x08	; 8
    6a8a:	31 05       	cpc	r19, r1
    6a8c:	29 f7       	brne	.-54     	; 0x6a58 <set_timers+0x10>
    6a8e:	4f 3f       	cpi	r20, 0xFF	; 255
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	58 07       	cpc	r21, r24
    6a94:	69 f4       	brne	.+26     	; 0x6ab0 <set_timers+0x68>
    6a96:	8c eb       	ldi	r24, 0xBC	; 188
    6a98:	95 e0       	ldi	r25, 0x05	; 5
    6a9a:	1f 92       	push	r1
    6a9c:	9f 93       	push	r25
    6a9e:	8f 93       	push	r24
    6aa0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6aa4:	0f 90       	pop	r0
    6aa6:	0f 90       	pop	r0
    6aa8:	0f 90       	pop	r0
    6aaa:	8f ef       	ldi	r24, 0xFF	; 255
    6aac:	9f ef       	ldi	r25, 0xFF	; 255
    6aae:	08 95       	ret
    6ab0:	ca 01       	movw	r24, r20
    6ab2:	08 95       	ret

00006ab4 <delete_all_timers>:
    6ab4:	e5 e5       	ldi	r30, 0x55	; 85
    6ab6:	fa e1       	ldi	r31, 0x1A	; 26
    6ab8:	12 82       	std	Z+2, r1	; 0x02
    6aba:	11 82       	std	Z+1, r1	; 0x01
    6abc:	10 82       	st	Z, r1
    6abe:	33 96       	adiw	r30, 0x03	; 3
    6ac0:	8a e1       	ldi	r24, 0x1A	; 26
    6ac2:	ed 36       	cpi	r30, 0x6D	; 109
    6ac4:	f8 07       	cpc	r31, r24
    6ac6:	c1 f7       	brne	.-16     	; 0x6ab8 <delete_all_timers+0x4>
    6ac8:	08 95       	ret

00006aca <subtract_timespec>:
    6aca:	0f 93       	push	r16
    6acc:	1f 93       	push	r17
    6ace:	cf 93       	push	r28
    6ad0:	df 93       	push	r29
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	84 81       	ldd	r24, Z+4	; 0x04
    6ad6:	95 81       	ldd	r25, Z+5	; 0x05
    6ad8:	a6 81       	ldd	r26, Z+6	; 0x06
    6ada:	b7 81       	ldd	r27, Z+7	; 0x07
    6adc:	eb 01       	movw	r28, r22
    6ade:	0c 81       	ldd	r16, Y+4	; 0x04
    6ae0:	1d 81       	ldd	r17, Y+5	; 0x05
    6ae2:	2e 81       	ldd	r18, Y+6	; 0x06
    6ae4:	3f 81       	ldd	r19, Y+7	; 0x07
    6ae6:	80 1b       	sub	r24, r16
    6ae8:	91 0b       	sbc	r25, r17
    6aea:	a2 0b       	sbc	r26, r18
    6aec:	b3 0b       	sbc	r27, r19
    6aee:	b7 fd       	sbrc	r27, 7
    6af0:	05 c0       	rjmp	.+10     	; 0x6afc <subtract_timespec+0x32>
    6af2:	84 83       	std	Z+4, r24	; 0x04
    6af4:	95 83       	std	Z+5, r25	; 0x05
    6af6:	a6 83       	std	Z+6, r26	; 0x06
    6af8:	b7 83       	std	Z+7, r27	; 0x07
    6afa:	12 c0       	rjmp	.+36     	; 0x6b20 <subtract_timespec+0x56>
    6afc:	96 53       	subi	r25, 0x36	; 54
    6afe:	a5 46       	sbci	r26, 0x65	; 101
    6b00:	b4 4c       	sbci	r27, 0xC4	; 196
    6b02:	84 83       	std	Z+4, r24	; 0x04
    6b04:	95 83       	std	Z+5, r25	; 0x05
    6b06:	a6 83       	std	Z+6, r26	; 0x06
    6b08:	b7 83       	std	Z+7, r27	; 0x07
    6b0a:	80 81       	ld	r24, Z
    6b0c:	91 81       	ldd	r25, Z+1	; 0x01
    6b0e:	a2 81       	ldd	r26, Z+2	; 0x02
    6b10:	b3 81       	ldd	r27, Z+3	; 0x03
    6b12:	01 97       	sbiw	r24, 0x01	; 1
    6b14:	a1 09       	sbc	r26, r1
    6b16:	b1 09       	sbc	r27, r1
    6b18:	80 83       	st	Z, r24
    6b1a:	91 83       	std	Z+1, r25	; 0x01
    6b1c:	a2 83       	std	Z+2, r26	; 0x02
    6b1e:	b3 83       	std	Z+3, r27	; 0x03
    6b20:	80 81       	ld	r24, Z
    6b22:	91 81       	ldd	r25, Z+1	; 0x01
    6b24:	a2 81       	ldd	r26, Z+2	; 0x02
    6b26:	b3 81       	ldd	r27, Z+3	; 0x03
    6b28:	eb 01       	movw	r28, r22
    6b2a:	48 81       	ld	r20, Y
    6b2c:	59 81       	ldd	r21, Y+1	; 0x01
    6b2e:	6a 81       	ldd	r22, Y+2	; 0x02
    6b30:	7b 81       	ldd	r23, Y+3	; 0x03
    6b32:	84 1b       	sub	r24, r20
    6b34:	95 0b       	sbc	r25, r21
    6b36:	a6 0b       	sbc	r26, r22
    6b38:	b7 0b       	sbc	r27, r23
    6b3a:	80 83       	st	Z, r24
    6b3c:	91 83       	std	Z+1, r25	; 0x01
    6b3e:	a2 83       	std	Z+2, r26	; 0x02
    6b40:	b3 83       	std	Z+3, r27	; 0x03
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	1f 91       	pop	r17
    6b48:	0f 91       	pop	r16
    6b4a:	08 95       	ret

00006b4c <ts_to_str>:
    6b4c:	fc 01       	movw	r30, r24
    6b4e:	87 81       	ldd	r24, Z+7	; 0x07
    6b50:	8f 93       	push	r24
    6b52:	86 81       	ldd	r24, Z+6	; 0x06
    6b54:	8f 93       	push	r24
    6b56:	85 81       	ldd	r24, Z+5	; 0x05
    6b58:	8f 93       	push	r24
    6b5a:	84 81       	ldd	r24, Z+4	; 0x04
    6b5c:	8f 93       	push	r24
    6b5e:	83 81       	ldd	r24, Z+3	; 0x03
    6b60:	8f 93       	push	r24
    6b62:	82 81       	ldd	r24, Z+2	; 0x02
    6b64:	8f 93       	push	r24
    6b66:	81 81       	ldd	r24, Z+1	; 0x01
    6b68:	8f 93       	push	r24
    6b6a:	80 81       	ld	r24, Z
    6b6c:	8f 93       	push	r24
    6b6e:	82 eb       	ldi	r24, 0xB2	; 178
    6b70:	95 e0       	ldi	r25, 0x05	; 5
    6b72:	1f 92       	push	r1
    6b74:	9f 93       	push	r25
    6b76:	8f 93       	push	r24
    6b78:	1f 92       	push	r1
    6b7a:	8f e1       	ldi	r24, 0x1F	; 31
    6b7c:	8f 93       	push	r24
    6b7e:	8e e6       	ldi	r24, 0x6E	; 110
    6b80:	97 e1       	ldi	r25, 0x17	; 23
    6b82:	9f 93       	push	r25
    6b84:	8f 93       	push	r24
    6b86:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <snprintf_P>
    6b8a:	8d b7       	in	r24, 0x3d	; 61
    6b8c:	9e b7       	in	r25, 0x3e	; 62
    6b8e:	0f 96       	adiw	r24, 0x0f	; 15
    6b90:	0f b6       	in	r0, 0x3f	; 63
    6b92:	f8 94       	cli
    6b94:	9e bf       	out	0x3e, r25	; 62
    6b96:	0f be       	out	0x3f, r0	; 63
    6b98:	8d bf       	out	0x3d, r24	; 61
    6b9a:	8e e6       	ldi	r24, 0x6E	; 110
    6b9c:	97 e1       	ldi	r25, 0x17	; 23
    6b9e:	08 95       	ret

00006ba0 <clock_elapsed_begin>:
    6ba0:	66 e6       	ldi	r22, 0x66	; 102
    6ba2:	77 e1       	ldi	r23, 0x17	; 23
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	5f ce       	rjmp	.-834    	; 0x6868 <clock_gettime>
    6baa:	08 95       	ret

00006bac <clock_elapsed_end>:
    6bac:	a8 e0       	ldi	r26, 0x08	; 8
    6bae:	b0 e0       	ldi	r27, 0x00	; 0
    6bb0:	ec ed       	ldi	r30, 0xDC	; 220
    6bb2:	f5 e3       	ldi	r31, 0x35	; 53
    6bb4:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    6bb8:	8c 01       	movw	r16, r24
    6bba:	be 01       	movw	r22, r28
    6bbc:	6f 5f       	subi	r22, 0xFF	; 255
    6bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    6bc0:	80 e0       	ldi	r24, 0x00	; 0
    6bc2:	90 e0       	ldi	r25, 0x00	; 0
    6bc4:	51 de       	rcall	.-862    	; 0x6868 <clock_gettime>
    6bc6:	66 e6       	ldi	r22, 0x66	; 102
    6bc8:	77 e1       	ldi	r23, 0x17	; 23
    6bca:	ce 01       	movw	r24, r28
    6bcc:	01 96       	adiw	r24, 0x01	; 1
    6bce:	7d df       	rcall	.-262    	; 0x6aca <subtract_timespec>
    6bd0:	01 15       	cp	r16, r1
    6bd2:	11 05       	cpc	r17, r1
    6bd4:	c1 f0       	breq	.+48     	; 0x6c06 <clock_elapsed_end+0x5a>
    6bd6:	f8 01       	movw	r30, r16
    6bd8:	80 81       	ld	r24, Z
    6bda:	88 23       	and	r24, r24
    6bdc:	a1 f0       	breq	.+40     	; 0x6c06 <clock_elapsed_end+0x5a>
    6bde:	ce 01       	movw	r24, r28
    6be0:	01 96       	adiw	r24, 0x01	; 1
    6be2:	b4 df       	rcall	.-152    	; 0x6b4c <ts_to_str>
    6be4:	9f 93       	push	r25
    6be6:	8f 93       	push	r24
    6be8:	1f 93       	push	r17
    6bea:	0f 93       	push	r16
    6bec:	85 e9       	ldi	r24, 0x95	; 149
    6bee:	95 e0       	ldi	r25, 0x05	; 5
    6bf0:	1f 92       	push	r1
    6bf2:	9f 93       	push	r25
    6bf4:	8f 93       	push	r24
    6bf6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6bfa:	0f b6       	in	r0, 0x3f	; 63
    6bfc:	f8 94       	cli
    6bfe:	de bf       	out	0x3e, r29	; 62
    6c00:	0f be       	out	0x3f, r0	; 63
    6c02:	cd bf       	out	0x3d, r28	; 61
    6c04:	11 c0       	rjmp	.+34     	; 0x6c28 <clock_elapsed_end+0x7c>
    6c06:	ce 01       	movw	r24, r28
    6c08:	01 96       	adiw	r24, 0x01	; 1
    6c0a:	a0 df       	rcall	.-192    	; 0x6b4c <ts_to_str>
    6c0c:	9f 93       	push	r25
    6c0e:	8f 93       	push	r24
    6c10:	8a e8       	ldi	r24, 0x8A	; 138
    6c12:	95 e0       	ldi	r25, 0x05	; 5
    6c14:	1f 92       	push	r1
    6c16:	9f 93       	push	r25
    6c18:	8f 93       	push	r24
    6c1a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6c1e:	0f 90       	pop	r0
    6c20:	0f 90       	pop	r0
    6c22:	0f 90       	pop	r0
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	28 96       	adiw	r28, 0x08	; 8
    6c2a:	e4 e0       	ldi	r30, 0x04	; 4
    6c2c:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

00006c30 <clock_clear>:
    6c30:	a8 e0       	ldi	r26, 0x08	; 8
    6c32:	b0 e0       	ldi	r27, 0x00	; 0
    6c34:	ee e1       	ldi	r30, 0x1E	; 30
    6c36:	f6 e3       	ldi	r31, 0x36	; 54
    6c38:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    6c3c:	1d 82       	std	Y+5, r1	; 0x05
    6c3e:	1e 82       	std	Y+6, r1	; 0x06
    6c40:	1f 82       	std	Y+7, r1	; 0x07
    6c42:	18 86       	std	Y+8, r1	; 0x08
    6c44:	19 82       	std	Y+1, r1	; 0x01
    6c46:	1a 82       	std	Y+2, r1	; 0x02
    6c48:	1b 82       	std	Y+3, r1	; 0x03
    6c4a:	1c 82       	std	Y+4, r1	; 0x04
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	01 96       	adiw	r24, 0x01	; 1
    6c50:	bd de       	rcall	.-646    	; 0x69cc <clock_settime.part.2>
    6c52:	ed e6       	ldi	r30, 0x6D	; 109
    6c54:	fa e1       	ldi	r31, 0x1A	; 26
    6c56:	11 82       	std	Z+1, r1	; 0x01
    6c58:	10 82       	st	Z, r1
    6c5a:	13 82       	std	Z+3, r1	; 0x03
    6c5c:	12 82       	std	Z+2, r1	; 0x02
    6c5e:	28 96       	adiw	r28, 0x08	; 8
    6c60:	e2 e0       	ldi	r30, 0x02	; 2
    6c62:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00006c66 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6c66:	80 91 8e 17 	lds	r24, 0x178E	; 0x80178e <timers_configured>
    6c6a:	90 91 8f 17 	lds	r25, 0x178F	; 0x80178f <timers_configured+0x1>
    6c6e:	89 2b       	or	r24, r25
    6c70:	69 f0       	breq	.+26     	; 0x6c8c <enable_timers+0x26>
    6c72:	80 91 90 17 	lds	r24, 0x1790	; 0x801790 <timers_enabled>
    6c76:	90 91 91 17 	lds	r25, 0x1791	; 0x801791 <timers_enabled+0x1>
    6c7a:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6c7c:	39 f4       	brne	.+14     	; 0x6c8c <enable_timers+0x26>
        timers_enabled = 1;
    6c7e:	b8 dd       	rcall	.-1168   	; 0x67f0 <enable_system_task>
    6c80:	81 e0       	ldi	r24, 0x01	; 1
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	90 93 91 17 	sts	0x1791, r25	; 0x801791 <timers_enabled+0x1>
    6c88:	80 93 90 17 	sts	0x1790, r24	; 0x801790 <timers_enabled>
    6c8c:	08 95       	ret

00006c8e <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c8e:	cf 93       	push	r28
    6c90:	df 93       	push	r29
    6c92:	c5 e5       	ldi	r28, 0x55	; 85
    6c94:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6c96:	8a 81       	ldd	r24, Y+2	; 0x02
    6c98:	88 23       	and	r24, r24
    6c9a:	29 f0       	breq	.+10     	; 0x6ca6 <execute_timers+0x18>
    6c9c:	e8 81       	ld	r30, Y
    6c9e:	f9 81       	ldd	r31, Y+1	; 0x01
    6ca0:	30 97       	sbiw	r30, 0x00	; 0
    6ca2:	09 f0       	breq	.+2      	; 0x6ca6 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6ca4:	09 95       	icall
    6ca6:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6ca8:	8a e1       	ldi	r24, 0x1A	; 26
    6caa:	cd 36       	cpi	r28, 0x6D	; 109
    6cac:	d8 07       	cpc	r29, r24
    6cae:	99 f7       	brne	.-26     	; 0x6c96 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6cb0:	df 91       	pop	r29
    6cb2:	cf 91       	pop	r28
    6cb4:	08 95       	ret

00006cb6 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6cb6:	86 e7       	ldi	r24, 0x76	; 118
    6cb8:	95 e0       	ldi	r25, 0x05	; 5
    6cba:	1f 92       	push	r1
    6cbc:	9f 93       	push	r25
    6cbe:	8f 93       	push	r24
    6cc0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    if(!timers_configured)
    6cc4:	0f 90       	pop	r0
    6cc6:	0f 90       	pop	r0
    6cc8:	0f 90       	pop	r0
    6cca:	80 91 8e 17 	lds	r24, 0x178E	; 0x80178e <timers_configured>
    6cce:	90 91 8f 17 	lds	r25, 0x178F	; 0x80178f <timers_configured+0x1>
    6cd2:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6cd4:	a9 f4       	brne	.+42     	; 0x6d00 <init_timers+0x4a>
        timers_configured = 1;
    6cd6:	8e dd       	rcall	.-1252   	; 0x67f4 <install_timers_isr>
    6cd8:	81 e0       	ldi	r24, 0x01	; 1
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	90 93 8f 17 	sts	0x178F, r25	; 0x80178f <timers_configured+0x1>
    6ce0:	80 93 8e 17 	sts	0x178E, r24	; 0x80178e <timers_configured>
        timers_enabled = 0;
    6ce4:	10 92 91 17 	sts	0x1791, r1	; 0x801791 <timers_enabled+0x1>
    6ce8:	10 92 90 17 	sts	0x1790, r1	; 0x801790 <timers_enabled>
        printf("Timers configured\n");
    6cec:	83 e6       	ldi	r24, 0x63	; 99
    6cee:	95 e0       	ldi	r25, 0x05	; 5
    6cf0:	1f 92       	push	r1
    6cf2:	9f 93       	push	r25
    6cf4:	8f 93       	push	r24
    6cf6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    }

    delete_all_timers();
    6cfa:	0f 90       	pop	r0

    clock_clear();
    6cfc:	0f 90       	pop	r0
    6cfe:	0f 90       	pop	r0
    printf("Clock Init\n");
    6d00:	d9 de       	rcall	.-590    	; 0x6ab4 <delete_all_timers>
    6d02:	96 df       	rcall	.-212    	; 0x6c30 <clock_clear>
    6d04:	87 e5       	ldi	r24, 0x57	; 87
    6d06:	95 e0       	ldi	r25, 0x05	; 5
    6d08:	1f 92       	push	r1
    6d0a:	9f 93       	push	r25
    6d0c:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6d0e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6d12:	61 e0       	ldi	r22, 0x01	; 1
    6d14:	70 e0       	ldi	r23, 0x00	; 0
    6d16:	89 ea       	ldi	r24, 0xA9	; 169
    6d18:	94 e3       	ldi	r25, 0x34	; 52
    6d1a:	96 de       	rcall	.-724    	; 0x6a48 <set_timers>
    6d1c:	0f 90       	pop	r0
    6d1e:	0f 90       	pop	r0
    6d20:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6d22:	01 96       	adiw	r24, 0x01	; 1
    6d24:	51 f4       	brne	.+20     	; 0x6d3a <init_timers+0x84>
    6d26:	8f e3       	ldi	r24, 0x3F	; 63
    6d28:	95 e0       	ldi	r25, 0x05	; 5
    6d2a:	1f 92       	push	r1
    6d2c:	9f 93       	push	r25
    6d2e:	8f 93       	push	r24
    6d30:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6d34:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6d36:	0f 90       	pop	r0
    6d38:	0f 90       	pop	r0
    6d3a:	8e e2       	ldi	r24, 0x2E	; 46
    6d3c:	95 e0       	ldi	r25, 0x05	; 5
    6d3e:	1f 92       	push	r1
    6d40:	9f 93       	push	r25

    enable_timers();
    6d42:	8f 93       	push	r24
    6d44:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    printf("Timers enabled\n");
    6d48:	8e df       	rcall	.-228    	; 0x6c66 <enable_timers>
    6d4a:	8e e1       	ldi	r24, 0x1E	; 30
    6d4c:	95 e0       	ldi	r25, 0x05	; 5
    6d4e:	1f 92       	push	r1
    6d50:	9f 93       	push	r25
    6d52:	8f 93       	push	r24
}
    6d54:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    6d58:	0f 90       	pop	r0
    6d5a:	0f 90       	pop	r0
    6d5c:	0f 90       	pop	r0
    6d5e:	0f 90       	pop	r0
    6d60:	0f 90       	pop	r0
    6d62:	0f 90       	pop	r0
    6d64:	08 95       	ret

00006d66 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6d66:	fb 01       	movw	r30, r22
    6d68:	10 82       	st	Z, r1
    6d6a:	11 82       	std	Z+1, r1	; 0x01
    6d6c:	12 82       	std	Z+2, r1	; 0x02
    6d6e:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d70:	80 e4       	ldi	r24, 0x40	; 64
    6d72:	92 e4       	ldi	r25, 0x42	; 66
    6d74:	af e0       	ldi	r26, 0x0F	; 15
    6d76:	b0 e0       	ldi	r27, 0x00	; 0
    6d78:	84 83       	std	Z+4, r24	; 0x04
    6d7a:	95 83       	std	Z+5, r25	; 0x05
    6d7c:	a6 83       	std	Z+6, r26	; 0x06
    6d7e:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6d80:	80 e0       	ldi	r24, 0x00	; 0
    6d82:	90 e0       	ldi	r25, 0x00	; 0
    6d84:	08 95       	ret

00006d86 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6d86:	89 2b       	or	r24, r25
    6d88:	19 f4       	brne	.+6      	; 0x6d90 <clock_settime+0xa>
    6d8a:	cb 01       	movw	r24, r22
    6d8c:	1f ce       	rjmp	.-962    	; 0x69cc <clock_settime.part.2>
    6d8e:	08 95       	ret
        return(-1);
    6d90:	8f ef       	ldi	r24, 0xFF	; 255
    6d92:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6d94:	08 95       	ret

00006d96 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6d96:	9c 01       	movw	r18, r24
    6d98:	83 70       	andi	r24, 0x03	; 3
    6d9a:	99 27       	eor	r25, r25
    6d9c:	00 97       	sbiw	r24, 0x00	; 0
    6d9e:	69 f4       	brne	.+26     	; 0x6dba <IS_Leap+0x24>
    6da0:	2c 36       	cpi	r18, 0x6C	; 108
    6da2:	47 e0       	ldi	r20, 0x07	; 7
    6da4:	34 07       	cpc	r19, r20
    6da6:	59 f0       	breq	.+22     	; 0x6dbe <IS_Leap+0x28>
    6da8:	51 e0       	ldi	r21, 0x01	; 1
    6daa:	40 e0       	ldi	r20, 0x00	; 0
    6dac:	24 33       	cpi	r18, 0x34	; 52
    6dae:	38 40       	sbci	r19, 0x08	; 8
    6db0:	09 f4       	brne	.+2      	; 0x6db4 <IS_Leap+0x1e>
    6db2:	50 e0       	ldi	r21, 0x00	; 0
    6db4:	85 2f       	mov	r24, r21
    6db6:	94 2f       	mov	r25, r20
    6db8:	08 95       	ret
    6dba:	80 e0       	ldi	r24, 0x00	; 0
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	08 95       	ret

00006dc0 <tm_mon_to_ascii>:
    6dc0:	8c 30       	cpi	r24, 0x0C	; 12
    6dc2:	91 05       	cpc	r25, r1
    6dc4:	40 f4       	brcc	.+16     	; 0x6dd6 <tm_mon_to_ascii+0x16>
    6dc6:	88 0f       	add	r24, r24
    6dc8:	99 1f       	adc	r25, r25
    6dca:	fc 01       	movw	r30, r24
    6dcc:	ee 5e       	subi	r30, 0xEE	; 238
    6dce:	fe 4f       	sbci	r31, 0xFE	; 254
    6dd0:	80 81       	ld	r24, Z
    6dd2:	91 81       	ldd	r25, Z+1	; 0x01
    6dd4:	08 95       	ret
    6dd6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6dda:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6dde:	08 95       	ret

00006de0 <Days_Per_Month>:
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	8c 30       	cpi	r24, 0x0C	; 12
    6de6:	91 05       	cpc	r25, r1
    6de8:	24 f0       	brlt	.+8      	; 0x6df2 <Days_Per_Month+0x12>
    6dea:	6f 5f       	subi	r22, 0xFF	; 255
    6dec:	7f 4f       	sbci	r23, 0xFF	; 255
    6dee:	0c 97       	sbiw	r24, 0x0c	; 12
    6df0:	f9 cf       	rjmp	.-14     	; 0x6de4 <Days_Per_Month+0x4>
    6df2:	97 ff       	sbrs	r25, 7
    6df4:	04 c0       	rjmp	.+8      	; 0x6dfe <Days_Per_Month+0x1e>
    6df6:	61 50       	subi	r22, 0x01	; 1
    6df8:	71 09       	sbc	r23, r1
    6dfa:	0c 96       	adiw	r24, 0x0c	; 12
    6dfc:	fa cf       	rjmp	.-12     	; 0x6df2 <Days_Per_Month+0x12>
    6dfe:	fc 01       	movw	r30, r24
    6e00:	ee 0f       	add	r30, r30
    6e02:	ff 1f       	adc	r31, r31
    6e04:	ed 59       	subi	r30, 0x9D	; 157
    6e06:	fd 4f       	sbci	r31, 0xFD	; 253
    6e08:	c0 81       	ld	r28, Z
    6e0a:	d1 81       	ldd	r29, Z+1	; 0x01
    6e0c:	01 97       	sbiw	r24, 0x01	; 1
    6e0e:	29 f4       	brne	.+10     	; 0x6e1a <Days_Per_Month+0x3a>
    6e10:	cb 01       	movw	r24, r22
    6e12:	c1 df       	rcall	.-126    	; 0x6d96 <IS_Leap>
    6e14:	89 2b       	or	r24, r25
    6e16:	09 f0       	breq	.+2      	; 0x6e1a <Days_Per_Month+0x3a>
    6e18:	21 96       	adiw	r28, 0x01	; 1
    6e1a:	ce 01       	movw	r24, r28
    6e1c:	df 91       	pop	r29
    6e1e:	cf 91       	pop	r28
    6e20:	08 95       	ret

00006e22 <time_to_tm>:
    6e22:	a0 e0       	ldi	r26, 0x00	; 0
    6e24:	b0 e0       	ldi	r27, 0x00	; 0
    6e26:	e7 e1       	ldi	r30, 0x17	; 23
    6e28:	f7 e3       	ldi	r31, 0x37	; 55
    6e2a:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
    6e2e:	e8 01       	movw	r28, r16
    6e30:	e6 e1       	ldi	r30, 0x16	; 22
    6e32:	d8 01       	movw	r26, r16
    6e34:	1d 92       	st	X+, r1
    6e36:	ea 95       	dec	r30
    6e38:	e9 f7       	brne	.-6      	; 0x6e34 <time_to_tm+0x12>
    6e3a:	61 15       	cp	r22, r1
    6e3c:	bd e5       	ldi	r27, 0x5D	; 93
    6e3e:	7b 07       	cpc	r23, r27
    6e40:	bd ef       	ldi	r27, 0xFD	; 253
    6e42:	8b 07       	cpc	r24, r27
    6e44:	bf ef       	ldi	r27, 0xFF	; 255
    6e46:	9b 07       	cpc	r25, r27
    6e48:	08 f0       	brcs	.+2      	; 0x6e4c <time_to_tm+0x2a>
    6e4a:	c0 c0       	rjmp	.+384    	; 0x6fcc <time_to_tm+0x1aa>
    6e4c:	6b 01       	movw	r12, r22
    6e4e:	7c 01       	movw	r14, r24
    6e50:	c2 1a       	sub	r12, r18
    6e52:	d3 0a       	sbc	r13, r19
    6e54:	e4 0a       	sbc	r14, r20
    6e56:	f5 0a       	sbc	r15, r21
    6e58:	46 01       	movw	r8, r12
    6e5a:	57 01       	movw	r10, r14
    6e5c:	e0 e8       	ldi	r30, 0x80	; 128
    6e5e:	ce 16       	cp	r12, r30
    6e60:	ee ea       	ldi	r30, 0xAE	; 174
    6e62:	de 06       	cpc	r13, r30
    6e64:	ee ef       	ldi	r30, 0xFE	; 254
    6e66:	ee 06       	cpc	r14, r30
    6e68:	ef ef       	ldi	r30, 0xFF	; 255
    6e6a:	fe 06       	cpc	r15, r30
    6e6c:	50 f0       	brcs	.+20     	; 0x6e82 <time_to_tm+0x60>
    6e6e:	80 e8       	ldi	r24, 0x80	; 128
    6e70:	88 0e       	add	r8, r24
    6e72:	81 e5       	ldi	r24, 0x51	; 81
    6e74:	98 1e       	adc	r9, r24
    6e76:	81 e0       	ldi	r24, 0x01	; 1
    6e78:	a8 1e       	adc	r10, r24
    6e7a:	b1 1c       	adc	r11, r1
    6e7c:	01 e0       	ldi	r16, 0x01	; 1
    6e7e:	10 e0       	ldi	r17, 0x00	; 0
    6e80:	02 c0       	rjmp	.+4      	; 0x6e86 <time_to_tm+0x64>
    6e82:	00 e0       	ldi	r16, 0x00	; 0
    6e84:	10 e0       	ldi	r17, 0x00	; 0
    6e86:	8c e3       	ldi	r24, 0x3C	; 60
    6e88:	48 2e       	mov	r4, r24
    6e8a:	51 2c       	mov	r5, r1
    6e8c:	61 2c       	mov	r6, r1
    6e8e:	71 2c       	mov	r7, r1
    6e90:	c5 01       	movw	r24, r10
    6e92:	b4 01       	movw	r22, r8
    6e94:	a3 01       	movw	r20, r6
    6e96:	92 01       	movw	r18, r4
    6e98:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    6e9c:	79 83       	std	Y+1, r23	; 0x01
    6e9e:	68 83       	st	Y, r22
    6ea0:	ca 01       	movw	r24, r20
    6ea2:	b9 01       	movw	r22, r18
    6ea4:	a3 01       	movw	r20, r6
    6ea6:	92 01       	movw	r18, r4
    6ea8:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    6eac:	7b 83       	std	Y+3, r23	; 0x03
    6eae:	6a 83       	std	Y+2, r22	; 0x02
    6eb0:	c5 01       	movw	r24, r10
    6eb2:	b4 01       	movw	r22, r8
    6eb4:	20 e1       	ldi	r18, 0x10	; 16
    6eb6:	3e e0       	ldi	r19, 0x0E	; 14
    6eb8:	40 e0       	ldi	r20, 0x00	; 0
    6eba:	50 e0       	ldi	r21, 0x00	; 0
    6ebc:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    6ec0:	ca 01       	movw	r24, r20
    6ec2:	b9 01       	movw	r22, r18
    6ec4:	28 e1       	ldi	r18, 0x18	; 24
    6ec6:	30 e0       	ldi	r19, 0x00	; 0
    6ec8:	40 e0       	ldi	r20, 0x00	; 0
    6eca:	50 e0       	ldi	r21, 0x00	; 0
    6ecc:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    6ed0:	7d 83       	std	Y+5, r23	; 0x05
    6ed2:	6c 83       	std	Y+4, r22	; 0x04
    6ed4:	01 15       	cp	r16, r1
    6ed6:	11 05       	cpc	r17, r1
    6ed8:	89 f0       	breq	.+34     	; 0x6efc <time_to_tm+0xda>
    6eda:	85 e4       	ldi	r24, 0x45	; 69
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	9b 87       	std	Y+11, r25	; 0x0b
    6ee0:	8a 87       	std	Y+10, r24	; 0x0a
    6ee2:	8b e0       	ldi	r24, 0x0B	; 11
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	99 87       	std	Y+9, r25	; 0x09
    6ee8:	88 87       	std	Y+8, r24	; 0x08
    6eea:	8f e1       	ldi	r24, 0x1F	; 31
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	9f 83       	std	Y+7, r25	; 0x07
    6ef0:	8e 83       	std	Y+6, r24	; 0x06
    6ef2:	83 e0       	ldi	r24, 0x03	; 3
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
    6ef6:	9d 87       	std	Y+13, r25	; 0x0d
    6ef8:	8c 87       	std	Y+12, r24	; 0x0c
    6efa:	65 c0       	rjmp	.+202    	; 0x6fc6 <time_to_tm+0x1a4>
    6efc:	c5 01       	movw	r24, r10
    6efe:	b4 01       	movw	r22, r8
    6f00:	20 e8       	ldi	r18, 0x80	; 128
    6f02:	31 e5       	ldi	r19, 0x51	; 81
    6f04:	41 e0       	ldi	r20, 0x01	; 1
    6f06:	50 e0       	ldi	r21, 0x00	; 0
    6f08:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    6f0c:	49 01       	movw	r8, r18
    6f0e:	5a 01       	movw	r10, r20
    6f10:	ca 01       	movw	r24, r20
    6f12:	b9 01       	movw	r22, r18
    6f14:	6c 5f       	subi	r22, 0xFC	; 252
    6f16:	7f 4f       	sbci	r23, 0xFF	; 255
    6f18:	8f 4f       	sbci	r24, 0xFF	; 255
    6f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f1c:	27 e0       	ldi	r18, 0x07	; 7
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	40 e0       	ldi	r20, 0x00	; 0
    6f22:	50 e0       	ldi	r21, 0x00	; 0
    6f24:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    6f28:	7d 87       	std	Y+13, r23	; 0x0d
    6f2a:	6c 87       	std	Y+12, r22	; 0x0c
    6f2c:	02 eb       	ldi	r16, 0xB2	; 178
    6f2e:	17 e0       	ldi	r17, 0x07	; 7
    6f30:	c8 01       	movw	r24, r16
    6f32:	31 df       	rcall	.-414    	; 0x6d96 <IS_Leap>
    6f34:	00 97       	sbiw	r24, 0x00	; 0
    6f36:	19 f4       	brne	.+6      	; 0x6f3e <time_to_tm+0x11c>
    6f38:	4d e6       	ldi	r20, 0x6D	; 109
    6f3a:	51 e0       	ldi	r21, 0x01	; 1
    6f3c:	02 c0       	rjmp	.+4      	; 0x6f42 <time_to_tm+0x120>
    6f3e:	4e e6       	ldi	r20, 0x6E	; 110
    6f40:	51 e0       	ldi	r21, 0x01	; 1
    6f42:	05 2e       	mov	r0, r21
    6f44:	00 0c       	add	r0, r0
    6f46:	66 0b       	sbc	r22, r22
    6f48:	77 0b       	sbc	r23, r23
    6f4a:	84 16       	cp	r8, r20
    6f4c:	95 06       	cpc	r9, r21
    6f4e:	a6 06       	cpc	r10, r22
    6f50:	b7 06       	cpc	r11, r23
    6f52:	3c f0       	brlt	.+14     	; 0x6f62 <time_to_tm+0x140>
    6f54:	0f 5f       	subi	r16, 0xFF	; 255
    6f56:	1f 4f       	sbci	r17, 0xFF	; 255
    6f58:	84 1a       	sub	r8, r20
    6f5a:	95 0a       	sbc	r9, r21
    6f5c:	a6 0a       	sbc	r10, r22
    6f5e:	b7 0a       	sbc	r11, r23
    6f60:	e7 cf       	rjmp	.-50     	; 0x6f30 <time_to_tm+0x10e>
    6f62:	0c 56       	subi	r16, 0x6C	; 108
    6f64:	17 40       	sbci	r17, 0x07	; 7
    6f66:	1b 87       	std	Y+11, r17	; 0x0b
    6f68:	0a 87       	std	Y+10, r16	; 0x0a
    6f6a:	9f 86       	std	Y+15, r9	; 0x0f
    6f6c:	8e 86       	std	Y+14, r8	; 0x0e
    6f6e:	e3 e6       	ldi	r30, 0x63	; 99
    6f70:	f2 e0       	ldi	r31, 0x02	; 2
    6f72:	20 e0       	ldi	r18, 0x00	; 0
    6f74:	30 e0       	ldi	r19, 0x00	; 0
    6f76:	18 14       	cp	r1, r8
    6f78:	19 04       	cpc	r1, r9
    6f7a:	1a 04       	cpc	r1, r10
    6f7c:	1b 04       	cpc	r1, r11
    6f7e:	e4 f4       	brge	.+56     	; 0x6fb8 <time_to_tm+0x196>
    6f80:	2c 30       	cpi	r18, 0x0C	; 12
    6f82:	31 05       	cpc	r19, r1
    6f84:	c9 f0       	breq	.+50     	; 0x6fb8 <time_to_tm+0x196>
    6f86:	41 91       	ld	r20, Z+
    6f88:	51 91       	ld	r21, Z+
    6f8a:	21 30       	cpi	r18, 0x01	; 1
    6f8c:	31 05       	cpc	r19, r1
    6f8e:	21 f4       	brne	.+8      	; 0x6f98 <time_to_tm+0x176>
    6f90:	00 97       	sbiw	r24, 0x00	; 0
    6f92:	11 f0       	breq	.+4      	; 0x6f98 <time_to_tm+0x176>
    6f94:	4f 5f       	subi	r20, 0xFF	; 255
    6f96:	5f 4f       	sbci	r21, 0xFF	; 255
    6f98:	05 2e       	mov	r0, r21
    6f9a:	00 0c       	add	r0, r0
    6f9c:	66 0b       	sbc	r22, r22
    6f9e:	77 0b       	sbc	r23, r23
    6fa0:	84 16       	cp	r8, r20
    6fa2:	95 06       	cpc	r9, r21
    6fa4:	a6 06       	cpc	r10, r22
    6fa6:	b7 06       	cpc	r11, r23
    6fa8:	3c f0       	brlt	.+14     	; 0x6fb8 <time_to_tm+0x196>
    6faa:	84 1a       	sub	r8, r20
    6fac:	95 0a       	sbc	r9, r21
    6fae:	a6 0a       	sbc	r10, r22
    6fb0:	b7 0a       	sbc	r11, r23
    6fb2:	2f 5f       	subi	r18, 0xFF	; 255
    6fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    6fb6:	df cf       	rjmp	.-66     	; 0x6f76 <time_to_tm+0x154>
    6fb8:	39 87       	std	Y+9, r19	; 0x09
    6fba:	28 87       	std	Y+8, r18	; 0x08
    6fbc:	af ef       	ldi	r26, 0xFF	; 255
    6fbe:	8a 1a       	sub	r8, r26
    6fc0:	9a 0a       	sbc	r9, r26
    6fc2:	9f 82       	std	Y+7, r9	; 0x07
    6fc4:	8e 82       	std	Y+6, r8	; 0x06
    6fc6:	b6 01       	movw	r22, r12
    6fc8:	c7 01       	movw	r24, r14
    6fca:	04 c0       	rjmp	.+8      	; 0x6fd4 <time_to_tm+0x1b2>
    6fcc:	6f ef       	ldi	r22, 0xFF	; 255
    6fce:	7f ef       	ldi	r23, 0xFF	; 255
    6fd0:	8f ef       	ldi	r24, 0xFF	; 255
    6fd2:	9f ef       	ldi	r25, 0xFF	; 255
    6fd4:	cd b7       	in	r28, 0x3d	; 61
    6fd6:	de b7       	in	r29, 0x3e	; 62
    6fd8:	e0 e1       	ldi	r30, 0x10	; 16
    6fda:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

00006fde <gmtime_r>:
    6fde:	0f 93       	push	r16
    6fe0:	1f 93       	push	r17
    6fe2:	cf 93       	push	r28
    6fe4:	df 93       	push	r29
    6fe6:	eb 01       	movw	r28, r22
    6fe8:	fc 01       	movw	r30, r24
    6fea:	60 81       	ld	r22, Z
    6fec:	71 81       	ldd	r23, Z+1	; 0x01
    6fee:	82 81       	ldd	r24, Z+2	; 0x02
    6ff0:	93 81       	ldd	r25, Z+3	; 0x03
    6ff2:	8e 01       	movw	r16, r28
    6ff4:	20 e0       	ldi	r18, 0x00	; 0
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	a9 01       	movw	r20, r18
    6ffa:	13 df       	rcall	.-474    	; 0x6e22 <time_to_tm>
    6ffc:	ce 01       	movw	r24, r28
    6ffe:	df 91       	pop	r29
    7000:	cf 91       	pop	r28
    7002:	1f 91       	pop	r17
    7004:	0f 91       	pop	r16
    7006:	08 95       	ret

00007008 <gmtime>:
    7008:	20 eb       	ldi	r18, 0xB0	; 176
    700a:	37 e1       	ldi	r19, 0x17	; 23
    700c:	30 93 c7 17 	sts	0x17C7, r19	; 0x8017c7 <p.3745+0x1>
    7010:	20 93 c6 17 	sts	0x17C6, r18	; 0x8017c6 <p.3745>
    7014:	b9 01       	movw	r22, r18
    7016:	e3 df       	rcall	.-58     	; 0x6fde <gmtime_r>
    7018:	80 eb       	ldi	r24, 0xB0	; 176
    701a:	97 e1       	ldi	r25, 0x17	; 23
    701c:	08 95       	ret

0000701e <gettimezone>:
    701e:	ed e6       	ldi	r30, 0x6D	; 109
    7020:	fa e1       	ldi	r31, 0x1A	; 26
    7022:	20 81       	ld	r18, Z
    7024:	31 81       	ldd	r19, Z+1	; 0x01
    7026:	dc 01       	movw	r26, r24
    7028:	11 96       	adiw	r26, 0x01	; 1
    702a:	3c 93       	st	X, r19
    702c:	2e 93       	st	-X, r18
    702e:	22 81       	ldd	r18, Z+2	; 0x02
    7030:	33 81       	ldd	r19, Z+3	; 0x03
    7032:	13 96       	adiw	r26, 0x03	; 3
    7034:	3c 93       	st	X, r19
    7036:	2e 93       	st	-X, r18
    7038:	12 97       	sbiw	r26, 0x02	; 2
    703a:	80 e0       	ldi	r24, 0x00	; 0
    703c:	90 e0       	ldi	r25, 0x00	; 0
    703e:	08 95       	ret

00007040 <settimezone>:
    7040:	dc 01       	movw	r26, r24
    7042:	2d 91       	ld	r18, X+
    7044:	3c 91       	ld	r19, X
    7046:	11 97       	sbiw	r26, 0x01	; 1
    7048:	ed e6       	ldi	r30, 0x6D	; 109
    704a:	fa e1       	ldi	r31, 0x1A	; 26
    704c:	31 83       	std	Z+1, r19	; 0x01
    704e:	20 83       	st	Z, r18
    7050:	12 96       	adiw	r26, 0x02	; 2
    7052:	8d 91       	ld	r24, X+
    7054:	9c 91       	ld	r25, X
    7056:	13 97       	sbiw	r26, 0x03	; 3
    7058:	93 83       	std	Z+3, r25	; 0x03
    705a:	82 83       	std	Z+2, r24	; 0x02
    705c:	80 e0       	ldi	r24, 0x00	; 0
    705e:	90 e0       	ldi	r25, 0x00	; 0
    7060:	08 95       	ret

00007062 <gettimeofday>:
    7062:	a8 e0       	ldi	r26, 0x08	; 8
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e7 e3       	ldi	r30, 0x37	; 55
    7068:	f8 e3       	ldi	r31, 0x38	; 56
    706a:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
    706e:	8c 01       	movw	r16, r24
    7070:	7b 01       	movw	r14, r22
    7072:	be 01       	movw	r22, r28
    7074:	6f 5f       	subi	r22, 0xFF	; 255
    7076:	7f 4f       	sbci	r23, 0xFF	; 255
    7078:	80 e0       	ldi	r24, 0x00	; 0
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	f5 db       	rcall	.-2070   	; 0x6868 <clock_gettime>
    707e:	89 81       	ldd	r24, Y+1	; 0x01
    7080:	9a 81       	ldd	r25, Y+2	; 0x02
    7082:	ab 81       	ldd	r26, Y+3	; 0x03
    7084:	bc 81       	ldd	r27, Y+4	; 0x04
    7086:	f8 01       	movw	r30, r16
    7088:	80 83       	st	Z, r24
    708a:	91 83       	std	Z+1, r25	; 0x01
    708c:	a2 83       	std	Z+2, r26	; 0x02
    708e:	b3 83       	std	Z+3, r27	; 0x03
    7090:	6d 81       	ldd	r22, Y+5	; 0x05
    7092:	7e 81       	ldd	r23, Y+6	; 0x06
    7094:	8f 81       	ldd	r24, Y+7	; 0x07
    7096:	98 85       	ldd	r25, Y+8	; 0x08
    7098:	28 ee       	ldi	r18, 0xE8	; 232
    709a:	33 e0       	ldi	r19, 0x03	; 3
    709c:	40 e0       	ldi	r20, 0x00	; 0
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    70a4:	f8 01       	movw	r30, r16
    70a6:	24 83       	std	Z+4, r18	; 0x04
    70a8:	35 83       	std	Z+5, r19	; 0x05
    70aa:	46 83       	std	Z+6, r20	; 0x06
    70ac:	57 83       	std	Z+7, r21	; 0x07
    70ae:	c7 01       	movw	r24, r14
    70b0:	b6 df       	rcall	.-148    	; 0x701e <gettimezone>
    70b2:	80 e0       	ldi	r24, 0x00	; 0
    70b4:	90 e0       	ldi	r25, 0x00	; 0
    70b6:	28 96       	adiw	r28, 0x08	; 8
    70b8:	e6 e0       	ldi	r30, 0x06	; 6
    70ba:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

000070be <time>:
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	ec 01       	movw	r28, r24
    70c4:	62 e9       	ldi	r22, 0x92	; 146
    70c6:	77 e1       	ldi	r23, 0x17	; 23
    70c8:	80 e0       	ldi	r24, 0x00	; 0
    70ca:	90 e0       	ldi	r25, 0x00	; 0
    70cc:	cd db       	rcall	.-2150   	; 0x6868 <clock_gettime>
    70ce:	20 97       	sbiw	r28, 0x00	; 0
    70d0:	61 f0       	breq	.+24     	; 0x70ea <time+0x2c>
    70d2:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <ts.3823>
    70d6:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <ts.3823+0x1>
    70da:	a0 91 94 17 	lds	r26, 0x1794	; 0x801794 <ts.3823+0x2>
    70de:	b0 91 95 17 	lds	r27, 0x1795	; 0x801795 <ts.3823+0x3>
    70e2:	88 83       	st	Y, r24
    70e4:	99 83       	std	Y+1, r25	; 0x01
    70e6:	aa 83       	std	Y+2, r26	; 0x02
    70e8:	bb 83       	std	Y+3, r27	; 0x03
    70ea:	60 91 92 17 	lds	r22, 0x1792	; 0x801792 <ts.3823>
    70ee:	70 91 93 17 	lds	r23, 0x1793	; 0x801793 <ts.3823+0x1>
    70f2:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <ts.3823+0x2>
    70f6:	90 91 95 17 	lds	r25, 0x1795	; 0x801795 <ts.3823+0x3>
    70fa:	df 91       	pop	r29
    70fc:	cf 91       	pop	r28
    70fe:	08 95       	ret

00007100 <is_dst>:
    7100:	cf 92       	push	r12
    7102:	df 92       	push	r13
    7104:	ef 92       	push	r14
    7106:	ff 92       	push	r15
    7108:	6b 01       	movw	r12, r22
    710a:	7c 01       	movw	r14, r24
    710c:	ff d3       	rcall	.+2046   	; 0x790c <set_dst>
    710e:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <dst>
    7112:	90 91 72 1a 	lds	r25, 0x1A72	; 0x801a72 <dst+0x1>
    7116:	a0 91 73 1a 	lds	r26, 0x1A73	; 0x801a73 <dst+0x2>
    711a:	b0 91 74 1a 	lds	r27, 0x1A74	; 0x801a74 <dst+0x3>
    711e:	c8 16       	cp	r12, r24
    7120:	d9 06       	cpc	r13, r25
    7122:	ea 06       	cpc	r14, r26
    7124:	fb 06       	cpc	r15, r27
    7126:	88 f0       	brcs	.+34     	; 0x714a <is_dst+0x4a>
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	40 91 75 1a 	lds	r20, 0x1A75	; 0x801a75 <dst+0x4>
    7130:	50 91 76 1a 	lds	r21, 0x1A76	; 0x801a76 <dst+0x5>
    7134:	60 91 77 1a 	lds	r22, 0x1A77	; 0x801a77 <dst+0x6>
    7138:	70 91 78 1a 	lds	r23, 0x1A78	; 0x801a78 <dst+0x7>
    713c:	4c 15       	cp	r20, r12
    713e:	5d 05       	cpc	r21, r13
    7140:	6e 05       	cpc	r22, r14
    7142:	7f 05       	cpc	r23, r15
    7144:	20 f4       	brcc	.+8      	; 0x714e <is_dst+0x4e>
    7146:	80 e0       	ldi	r24, 0x00	; 0
    7148:	02 c0       	rjmp	.+4      	; 0x714e <is_dst+0x4e>
    714a:	80 e0       	ldi	r24, 0x00	; 0
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	ff 90       	pop	r15
    7150:	ef 90       	pop	r14
    7152:	df 90       	pop	r13
    7154:	cf 90       	pop	r12
    7156:	08 95       	ret

00007158 <localtime_r>:
    7158:	4f 92       	push	r4
    715a:	5f 92       	push	r5
    715c:	6f 92       	push	r6
    715e:	7f 92       	push	r7
    7160:	af 92       	push	r10
    7162:	bf 92       	push	r11
    7164:	cf 92       	push	r12
    7166:	df 92       	push	r13
    7168:	ef 92       	push	r14
    716a:	ff 92       	push	r15
    716c:	0f 93       	push	r16
    716e:	1f 93       	push	r17
    7170:	cf 93       	push	r28
    7172:	df 93       	push	r29
    7174:	00 d0       	rcall	.+0      	; 0x7176 <localtime_r+0x1e>
    7176:	00 d0       	rcall	.+0      	; 0x7178 <localtime_r+0x20>
    7178:	cd b7       	in	r28, 0x3d	; 61
    717a:	de b7       	in	r29, 0x3e	; 62
    717c:	5b 01       	movw	r10, r22
    717e:	fc 01       	movw	r30, r24
    7180:	40 80       	ld	r4, Z
    7182:	51 80       	ldd	r5, Z+1	; 0x01
    7184:	62 80       	ldd	r6, Z+2	; 0x02
    7186:	73 80       	ldd	r7, Z+3	; 0x03
    7188:	ce 01       	movw	r24, r28
    718a:	01 96       	adiw	r24, 0x01	; 1
    718c:	48 df       	rcall	.-368    	; 0x701e <gettimezone>
    718e:	a9 81       	ldd	r26, Y+1	; 0x01
    7190:	ba 81       	ldd	r27, Y+2	; 0x02
    7192:	2c e3       	ldi	r18, 0x3C	; 60
    7194:	30 e0       	ldi	r19, 0x00	; 0
    7196:	0e 94 f5 ea 	call	0x1d5ea	; 0x1d5ea <__usmulhisi3>
    719a:	6b 01       	movw	r12, r22
    719c:	7c 01       	movw	r14, r24
    719e:	c3 01       	movw	r24, r6
    71a0:	b2 01       	movw	r22, r4
    71a2:	6c 19       	sub	r22, r12
    71a4:	7d 09       	sbc	r23, r13
    71a6:	8e 09       	sbc	r24, r14
    71a8:	9f 09       	sbc	r25, r15
    71aa:	aa df       	rcall	.-172    	; 0x7100 <is_dst>
    71ac:	89 2b       	or	r24, r25
    71ae:	31 f0       	breq	.+12     	; 0x71bc <localtime_r+0x64>
    71b0:	f0 e1       	ldi	r31, 0x10	; 16
    71b2:	cf 1a       	sub	r12, r31
    71b4:	fe e0       	ldi	r31, 0x0E	; 14
    71b6:	df 0a       	sbc	r13, r31
    71b8:	e1 08       	sbc	r14, r1
    71ba:	f1 08       	sbc	r15, r1
    71bc:	85 01       	movw	r16, r10
    71be:	a7 01       	movw	r20, r14
    71c0:	96 01       	movw	r18, r12
    71c2:	c3 01       	movw	r24, r6
    71c4:	b2 01       	movw	r22, r4
    71c6:	2d de       	rcall	.-934    	; 0x6e22 <time_to_tm>
    71c8:	c5 01       	movw	r24, r10
    71ca:	0f 90       	pop	r0
    71cc:	0f 90       	pop	r0
    71ce:	0f 90       	pop	r0
    71d0:	0f 90       	pop	r0
    71d2:	df 91       	pop	r29
    71d4:	cf 91       	pop	r28
    71d6:	1f 91       	pop	r17
    71d8:	0f 91       	pop	r16
    71da:	ff 90       	pop	r15
    71dc:	ef 90       	pop	r14
    71de:	df 90       	pop	r13
    71e0:	cf 90       	pop	r12
    71e2:	bf 90       	pop	r11
    71e4:	af 90       	pop	r10
    71e6:	7f 90       	pop	r7
    71e8:	6f 90       	pop	r6
    71ea:	5f 90       	pop	r5
    71ec:	4f 90       	pop	r4
    71ee:	08 95       	ret

000071f0 <localtime>:
    71f0:	6a e9       	ldi	r22, 0x9A	; 154
    71f2:	77 e1       	ldi	r23, 0x17	; 23
    71f4:	b1 cf       	rjmp	.-158    	; 0x7158 <localtime_r>
    71f6:	08 95       	ret

000071f8 <normalize>:
    71f8:	aa e0       	ldi	r26, 0x0A	; 10
    71fa:	b0 e0       	ldi	r27, 0x00	; 0
    71fc:	e2 e0       	ldi	r30, 0x02	; 2
    71fe:	f9 e3       	ldi	r31, 0x39	; 57
    7200:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    7204:	7c 01       	movw	r14, r24
    7206:	7a 87       	std	Y+10, r23	; 0x0a
    7208:	69 87       	std	Y+9, r22	; 0x09
    720a:	f7 01       	movw	r30, r14
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	8c 33       	cpi	r24, 0x3C	; 60
    7212:	91 05       	cpc	r25, r1
    7214:	5c f0       	brlt	.+22     	; 0x722c <normalize+0x34>
    7216:	f7 01       	movw	r30, r14
    7218:	22 81       	ldd	r18, Z+2	; 0x02
    721a:	33 81       	ldd	r19, Z+3	; 0x03
    721c:	2f 5f       	subi	r18, 0xFF	; 255
    721e:	3f 4f       	sbci	r19, 0xFF	; 255
    7220:	33 83       	std	Z+3, r19	; 0x03
    7222:	22 83       	std	Z+2, r18	; 0x02
    7224:	cc 97       	sbiw	r24, 0x3c	; 60
    7226:	91 83       	std	Z+1, r25	; 0x01
    7228:	80 83       	st	Z, r24
    722a:	ef cf       	rjmp	.-34     	; 0x720a <normalize+0x12>
    722c:	f7 01       	movw	r30, r14
    722e:	01 90       	ld	r0, Z+
    7230:	f0 81       	ld	r31, Z
    7232:	e0 2d       	mov	r30, r0
    7234:	fe 83       	std	Y+6, r31	; 0x06
    7236:	ed 83       	std	Y+5, r30	; 0x05
    7238:	f7 ff       	sbrs	r31, 7
    723a:	0d c0       	rjmp	.+26     	; 0x7256 <normalize+0x5e>
    723c:	f7 01       	movw	r30, r14
    723e:	82 81       	ldd	r24, Z+2	; 0x02
    7240:	93 81       	ldd	r25, Z+3	; 0x03
    7242:	01 97       	sbiw	r24, 0x01	; 1
    7244:	93 83       	std	Z+3, r25	; 0x03
    7246:	82 83       	std	Z+2, r24	; 0x02
    7248:	6d 81       	ldd	r22, Y+5	; 0x05
    724a:	7e 81       	ldd	r23, Y+6	; 0x06
    724c:	64 5c       	subi	r22, 0xC4	; 196
    724e:	7f 4f       	sbci	r23, 0xFF	; 255
    7250:	71 83       	std	Z+1, r23	; 0x01
    7252:	60 83       	st	Z, r22
    7254:	eb cf       	rjmp	.-42     	; 0x722c <normalize+0x34>
    7256:	f7 01       	movw	r30, r14
    7258:	82 81       	ldd	r24, Z+2	; 0x02
    725a:	93 81       	ldd	r25, Z+3	; 0x03
    725c:	8c 33       	cpi	r24, 0x3C	; 60
    725e:	91 05       	cpc	r25, r1
    7260:	5c f0       	brlt	.+22     	; 0x7278 <normalize+0x80>
    7262:	f7 01       	movw	r30, r14
    7264:	24 81       	ldd	r18, Z+4	; 0x04
    7266:	35 81       	ldd	r19, Z+5	; 0x05
    7268:	2f 5f       	subi	r18, 0xFF	; 255
    726a:	3f 4f       	sbci	r19, 0xFF	; 255
    726c:	35 83       	std	Z+5, r19	; 0x05
    726e:	24 83       	std	Z+4, r18	; 0x04
    7270:	cc 97       	sbiw	r24, 0x3c	; 60
    7272:	93 83       	std	Z+3, r25	; 0x03
    7274:	82 83       	std	Z+2, r24	; 0x02
    7276:	ef cf       	rjmp	.-34     	; 0x7256 <normalize+0x5e>
    7278:	f7 01       	movw	r30, r14
    727a:	22 80       	ldd	r2, Z+2	; 0x02
    727c:	33 80       	ldd	r3, Z+3	; 0x03
    727e:	37 fe       	sbrs	r3, 7
    7280:	0d c0       	rjmp	.+26     	; 0x729c <normalize+0xa4>
    7282:	f7 01       	movw	r30, r14
    7284:	84 81       	ldd	r24, Z+4	; 0x04
    7286:	95 81       	ldd	r25, Z+5	; 0x05
    7288:	01 97       	sbiw	r24, 0x01	; 1
    728a:	95 83       	std	Z+5, r25	; 0x05
    728c:	84 83       	std	Z+4, r24	; 0x04
    728e:	fc e3       	ldi	r31, 0x3C	; 60
    7290:	2f 0e       	add	r2, r31
    7292:	31 1c       	adc	r3, r1
    7294:	f7 01       	movw	r30, r14
    7296:	33 82       	std	Z+3, r3	; 0x03
    7298:	22 82       	std	Z+2, r2	; 0x02
    729a:	ee cf       	rjmp	.-36     	; 0x7278 <normalize+0x80>
    729c:	f7 01       	movw	r30, r14
    729e:	84 81       	ldd	r24, Z+4	; 0x04
    72a0:	95 81       	ldd	r25, Z+5	; 0x05
    72a2:	88 31       	cpi	r24, 0x18	; 24
    72a4:	91 05       	cpc	r25, r1
    72a6:	5c f0       	brlt	.+22     	; 0x72be <normalize+0xc6>
    72a8:	f7 01       	movw	r30, r14
    72aa:	26 81       	ldd	r18, Z+6	; 0x06
    72ac:	37 81       	ldd	r19, Z+7	; 0x07
    72ae:	2f 5f       	subi	r18, 0xFF	; 255
    72b0:	3f 4f       	sbci	r19, 0xFF	; 255
    72b2:	37 83       	std	Z+7, r19	; 0x07
    72b4:	26 83       	std	Z+6, r18	; 0x06
    72b6:	48 97       	sbiw	r24, 0x18	; 24
    72b8:	95 83       	std	Z+5, r25	; 0x05
    72ba:	84 83       	std	Z+4, r24	; 0x04
    72bc:	ef cf       	rjmp	.-34     	; 0x729c <normalize+0xa4>
    72be:	f7 01       	movw	r30, r14
    72c0:	04 81       	ldd	r16, Z+4	; 0x04
    72c2:	15 81       	ldd	r17, Z+5	; 0x05
    72c4:	17 ff       	sbrs	r17, 7
    72c6:	0b c0       	rjmp	.+22     	; 0x72de <normalize+0xe6>
    72c8:	f7 01       	movw	r30, r14
    72ca:	86 81       	ldd	r24, Z+6	; 0x06
    72cc:	97 81       	ldd	r25, Z+7	; 0x07
    72ce:	01 97       	sbiw	r24, 0x01	; 1
    72d0:	97 83       	std	Z+7, r25	; 0x07
    72d2:	86 83       	std	Z+6, r24	; 0x06
    72d4:	08 5e       	subi	r16, 0xE8	; 232
    72d6:	1f 4f       	sbci	r17, 0xFF	; 255
    72d8:	15 83       	std	Z+5, r17	; 0x05
    72da:	04 83       	std	Z+4, r16	; 0x04
    72dc:	f0 cf       	rjmp	.-32     	; 0x72be <normalize+0xc6>
    72de:	f7 01       	movw	r30, r14
    72e0:	80 85       	ldd	r24, Z+8	; 0x08
    72e2:	91 85       	ldd	r25, Z+9	; 0x09
    72e4:	8c 30       	cpi	r24, 0x0C	; 12
    72e6:	91 05       	cpc	r25, r1
    72e8:	5c f0       	brlt	.+22     	; 0x7300 <normalize+0x108>
    72ea:	f7 01       	movw	r30, r14
    72ec:	22 85       	ldd	r18, Z+10	; 0x0a
    72ee:	33 85       	ldd	r19, Z+11	; 0x0b
    72f0:	2f 5f       	subi	r18, 0xFF	; 255
    72f2:	3f 4f       	sbci	r19, 0xFF	; 255
    72f4:	33 87       	std	Z+11, r19	; 0x0b
    72f6:	22 87       	std	Z+10, r18	; 0x0a
    72f8:	0c 97       	sbiw	r24, 0x0c	; 12
    72fa:	91 87       	std	Z+9, r25	; 0x09
    72fc:	80 87       	std	Z+8, r24	; 0x08
    72fe:	ef cf       	rjmp	.-34     	; 0x72de <normalize+0xe6>
    7300:	f7 01       	movw	r30, r14
    7302:	80 85       	ldd	r24, Z+8	; 0x08
    7304:	91 85       	ldd	r25, Z+9	; 0x09
    7306:	97 ff       	sbrs	r25, 7
    7308:	2d c0       	rjmp	.+90     	; 0x7364 <normalize+0x16c>
    730a:	f7 01       	movw	r30, r14
    730c:	22 85       	ldd	r18, Z+10	; 0x0a
    730e:	33 85       	ldd	r19, Z+11	; 0x0b
    7310:	21 50       	subi	r18, 0x01	; 1
    7312:	31 09       	sbc	r19, r1
    7314:	33 87       	std	Z+11, r19	; 0x0b
    7316:	22 87       	std	Z+10, r18	; 0x0a
    7318:	0c 96       	adiw	r24, 0x0c	; 12
    731a:	91 87       	std	Z+9, r25	; 0x09
    731c:	80 87       	std	Z+8, r24	; 0x08
    731e:	f0 cf       	rjmp	.-32     	; 0x7300 <normalize+0x108>
    7320:	f7 01       	movw	r30, r14
    7322:	c6 80       	ldd	r12, Z+6	; 0x06
    7324:	d7 80       	ldd	r13, Z+7	; 0x07
    7326:	a0 84       	ldd	r10, Z+8	; 0x08
    7328:	b1 84       	ldd	r11, Z+9	; 0x09
    732a:	b4 01       	movw	r22, r8
    732c:	c5 01       	movw	r24, r10
    732e:	58 dd       	rcall	.-1360   	; 0x6de0 <Days_Per_Month>
    7330:	8c 15       	cp	r24, r12
    7332:	9d 05       	cpc	r25, r13
    7334:	84 f5       	brge	.+96     	; 0x7396 <normalize+0x19e>
    7336:	c8 1a       	sub	r12, r24
    7338:	d9 0a       	sbc	r13, r25
    733a:	f7 01       	movw	r30, r14
    733c:	d7 82       	std	Z+7, r13	; 0x07
    733e:	c6 82       	std	Z+6, r12	; 0x06
    7340:	c5 01       	movw	r24, r10
    7342:	01 96       	adiw	r24, 0x01	; 1
    7344:	91 87       	std	Z+9, r25	; 0x09
    7346:	80 87       	std	Z+8, r24	; 0x08
    7348:	0c 97       	sbiw	r24, 0x0c	; 12
    734a:	54 f3       	brlt	.-44     	; 0x7320 <normalize+0x128>
    734c:	fb e0       	ldi	r31, 0x0B	; 11
    734e:	af 1a       	sub	r10, r31
    7350:	b1 08       	sbc	r11, r1
    7352:	f7 01       	movw	r30, r14
    7354:	b1 86       	std	Z+9, r11	; 0x09
    7356:	a0 86       	std	Z+8, r10	; 0x08
    7358:	ff ef       	ldi	r31, 0xFF	; 255
    735a:	8f 1a       	sub	r8, r31
    735c:	9f 0a       	sbc	r9, r31
    735e:	f7 01       	movw	r30, r14
    7360:	93 86       	std	Z+11, r9	; 0x0b
    7362:	82 86       	std	Z+10, r8	; 0x0a
    7364:	f7 01       	movw	r30, r14
    7366:	82 84       	ldd	r8, Z+10	; 0x0a
    7368:	93 84       	ldd	r9, Z+11	; 0x0b
    736a:	da cf       	rjmp	.-76     	; 0x7320 <normalize+0x128>
    736c:	f7 01       	movw	r30, r14
    736e:	80 85       	ldd	r24, Z+8	; 0x08
    7370:	91 85       	ldd	r25, Z+9	; 0x09
    7372:	9c 01       	movw	r18, r24
    7374:	21 50       	subi	r18, 0x01	; 1
    7376:	31 09       	sbc	r19, r1
    7378:	37 fd       	sbrc	r19, 7
    737a:	16 c0       	rjmp	.+44     	; 0x73a8 <normalize+0x1b0>
    737c:	31 87       	std	Z+9, r19	; 0x09
    737e:	20 87       	std	Z+8, r18	; 0x08
    7380:	f7 01       	movw	r30, r14
    7382:	62 85       	ldd	r22, Z+10	; 0x0a
    7384:	73 85       	ldd	r23, Z+11	; 0x0b
    7386:	80 85       	ldd	r24, Z+8	; 0x08
    7388:	91 85       	ldd	r25, Z+9	; 0x09
    738a:	2a dd       	rcall	.-1452   	; 0x6de0 <Days_Per_Month>
    738c:	88 0d       	add	r24, r8
    738e:	99 1d       	adc	r25, r9
    7390:	f7 01       	movw	r30, r14
    7392:	97 83       	std	Z+7, r25	; 0x07
    7394:	86 83       	std	Z+6, r24	; 0x06
    7396:	f7 01       	movw	r30, r14
    7398:	86 80       	ldd	r8, Z+6	; 0x06
    739a:	97 80       	ldd	r9, Z+7	; 0x07
    739c:	a2 84       	ldd	r10, Z+10	; 0x0a
    739e:	b3 84       	ldd	r11, Z+11	; 0x0b
    73a0:	18 14       	cp	r1, r8
    73a2:	19 04       	cpc	r1, r9
    73a4:	1c f7       	brge	.-58     	; 0x736c <normalize+0x174>
    73a6:	0b c0       	rjmp	.+22     	; 0x73be <normalize+0x1c6>
    73a8:	0b 96       	adiw	r24, 0x0b	; 11
    73aa:	f7 01       	movw	r30, r14
    73ac:	91 87       	std	Z+9, r25	; 0x09
    73ae:	80 87       	std	Z+8, r24	; 0x08
    73b0:	f1 e0       	ldi	r31, 0x01	; 1
    73b2:	af 1a       	sub	r10, r31
    73b4:	b1 08       	sbc	r11, r1
    73b6:	f7 01       	movw	r30, r14
    73b8:	b3 86       	std	Z+11, r11	; 0x0b
    73ba:	a2 86       	std	Z+10, r10	; 0x0a
    73bc:	e1 cf       	rjmp	.-62     	; 0x7380 <normalize+0x188>
    73be:	a5 01       	movw	r20, r10
    73c0:	44 59       	subi	r20, 0x94	; 148
    73c2:	58 4f       	sbci	r21, 0xF8	; 248
    73c4:	58 87       	std	Y+8, r21	; 0x08
    73c6:	4f 83       	std	Y+7, r20	; 0x07
    73c8:	35 01       	movw	r6, r10
    73ca:	56 e4       	ldi	r21, 0x46	; 70
    73cc:	65 1a       	sub	r6, r21
    73ce:	71 08       	sbc	r7, r1
    73d0:	89 e8       	ldi	r24, 0x89	; 137
    73d2:	68 16       	cp	r6, r24
    73d4:	71 04       	cpc	r7, r1
    73d6:	08 f0       	brcs	.+2      	; 0x73da <normalize+0x1e2>
    73d8:	9b c0       	rjmp	.+310    	; 0x7510 <normalize+0x318>
    73da:	c0 84       	ldd	r12, Z+8	; 0x08
    73dc:	d1 84       	ldd	r13, Z+9	; 0x09
    73de:	9c e0       	ldi	r25, 0x0C	; 12
    73e0:	c9 16       	cp	r12, r25
    73e2:	d1 04       	cpc	r13, r1
    73e4:	08 f0       	brcs	.+2      	; 0x73e8 <normalize+0x1f0>
    73e6:	94 c0       	rjmp	.+296    	; 0x7510 <normalize+0x318>
    73e8:	24 01       	movw	r4, r8
    73ea:	e1 e0       	ldi	r30, 0x01	; 1
    73ec:	4e 1a       	sub	r4, r30
    73ee:	51 08       	sbc	r5, r1
    73f0:	6f 81       	ldd	r22, Y+7	; 0x07
    73f2:	78 85       	ldd	r23, Y+8	; 0x08
    73f4:	c6 01       	movw	r24, r12
    73f6:	f4 dc       	rcall	.-1560   	; 0x6de0 <Days_Per_Month>
    73f8:	48 16       	cp	r4, r24
    73fa:	59 06       	cpc	r5, r25
    73fc:	0c f0       	brlt	.+2      	; 0x7400 <normalize+0x208>
    73fe:	88 c0       	rjmp	.+272    	; 0x7510 <normalize+0x318>
    7400:	08 31       	cpi	r16, 0x18	; 24
    7402:	11 05       	cpc	r17, r1
    7404:	0c f0       	brlt	.+2      	; 0x7408 <normalize+0x210>
    7406:	84 c0       	rjmp	.+264    	; 0x7510 <normalize+0x318>
    7408:	fc e3       	ldi	r31, 0x3C	; 60
    740a:	2f 16       	cp	r2, r31
    740c:	31 04       	cpc	r3, r1
    740e:	0c f0       	brlt	.+2      	; 0x7412 <normalize+0x21a>
    7410:	7f c0       	rjmp	.+254    	; 0x7510 <normalize+0x318>
    7412:	4d 81       	ldd	r20, Y+5	; 0x05
    7414:	5e 81       	ldd	r21, Y+6	; 0x06
    7416:	4c 33       	cpi	r20, 0x3C	; 60
    7418:	51 05       	cpc	r21, r1
    741a:	0c f0       	brlt	.+2      	; 0x741e <normalize+0x226>
    741c:	79 c0       	rjmp	.+242    	; 0x7510 <normalize+0x318>
    741e:	2d e6       	ldi	r18, 0x6D	; 109
    7420:	31 e0       	ldi	r19, 0x01	; 1
    7422:	d3 01       	movw	r26, r6
    7424:	0e 94 f5 ea 	call	0x1d5ea	; 0x1d5ea <__usmulhisi3>
    7428:	f6 01       	movw	r30, r12
    742a:	ee 0f       	add	r30, r30
    742c:	ff 1f       	adc	r31, r31
    742e:	e5 58       	subi	r30, 0x85	; 133
    7430:	fd 4f       	sbci	r31, 0xFD	; 253
    7432:	20 81       	ld	r18, Z
    7434:	31 81       	ldd	r19, Z+1	; 0x01
    7436:	dc 01       	movw	r26, r24
    7438:	cb 01       	movw	r24, r22
    743a:	82 0f       	add	r24, r18
    743c:	93 1f       	adc	r25, r19
    743e:	a1 1d       	adc	r26, r1
    7440:	b1 1d       	adc	r27, r1
    7442:	05 2c       	mov	r0, r5
    7444:	00 0c       	add	r0, r0
    7446:	66 08       	sbc	r6, r6
    7448:	77 08       	sbc	r7, r7
    744a:	48 0e       	add	r4, r24
    744c:	59 1e       	adc	r5, r25
    744e:	6a 1e       	adc	r6, r26
    7450:	7b 1e       	adc	r7, r27
    7452:	1a 14       	cp	r1, r10
    7454:	1b 04       	cpc	r1, r11
    7456:	1c f4       	brge	.+6      	; 0x745e <normalize+0x266>
    7458:	51 e0       	ldi	r21, 0x01	; 1
    745a:	a5 1a       	sub	r10, r21
    745c:	b1 08       	sbc	r11, r1
    745e:	45 01       	movw	r8, r10
    7460:	95 94       	asr	r9
    7462:	87 94       	ror	r8
    7464:	95 94       	asr	r9
    7466:	87 94       	ror	r8
    7468:	88 ec       	ldi	r24, 0xC8	; 200
    746a:	a8 16       	cp	r10, r24
    746c:	b1 04       	cpc	r11, r1
    746e:	1c f0       	brlt	.+6      	; 0x7476 <normalize+0x27e>
    7470:	91 e0       	ldi	r25, 0x01	; 1
    7472:	89 1a       	sub	r8, r25
    7474:	91 08       	sbc	r9, r1
    7476:	09 2c       	mov	r0, r9
    7478:	00 0c       	add	r0, r0
    747a:	aa 08       	sbc	r10, r10
    747c:	bb 08       	sbc	r11, r11
    747e:	84 0c       	add	r8, r4
    7480:	95 1c       	adc	r9, r5
    7482:	a6 1c       	adc	r10, r6
    7484:	b7 1c       	adc	r11, r7
    7486:	24 01       	movw	r4, r8
    7488:	35 01       	movw	r6, r10
    748a:	e1 e1       	ldi	r30, 0x11	; 17
    748c:	4e 1a       	sub	r4, r30
    748e:	51 08       	sbc	r5, r1
    7490:	61 08       	sbc	r6, r1
    7492:	71 08       	sbc	r7, r1
    7494:	f2 e0       	ldi	r31, 0x02	; 2
    7496:	cf 16       	cp	r12, r31
    7498:	d1 04       	cpc	r13, r1
    749a:	64 f0       	brlt	.+24     	; 0x74b4 <normalize+0x2bc>
    749c:	8f 81       	ldd	r24, Y+7	; 0x07
    749e:	98 85       	ldd	r25, Y+8	; 0x08
    74a0:	7a dc       	rcall	.-1804   	; 0x6d96 <IS_Leap>
    74a2:	89 2b       	or	r24, r25
    74a4:	39 f0       	breq	.+14     	; 0x74b4 <normalize+0x2bc>
    74a6:	24 01       	movw	r4, r8
    74a8:	35 01       	movw	r6, r10
    74aa:	40 e1       	ldi	r20, 0x10	; 16
    74ac:	44 1a       	sub	r4, r20
    74ae:	51 08       	sbc	r5, r1
    74b0:	61 08       	sbc	r6, r1
    74b2:	71 08       	sbc	r7, r1
    74b4:	a8 e1       	ldi	r26, 0x18	; 24
    74b6:	b0 e0       	ldi	r27, 0x00	; 0
    74b8:	a3 01       	movw	r20, r6
    74ba:	92 01       	movw	r18, r4
    74bc:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    74c0:	01 2e       	mov	r0, r17
    74c2:	00 0c       	add	r0, r0
    74c4:	22 0b       	sbc	r18, r18
    74c6:	33 0b       	sbc	r19, r19
    74c8:	a9 01       	movw	r20, r18
    74ca:	98 01       	movw	r18, r16
    74cc:	26 0f       	add	r18, r22
    74ce:	37 1f       	adc	r19, r23
    74d0:	48 1f       	adc	r20, r24
    74d2:	59 1f       	adc	r21, r25
    74d4:	ac e3       	ldi	r26, 0x3C	; 60
    74d6:	b0 e0       	ldi	r27, 0x00	; 0
    74d8:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    74dc:	81 01       	movw	r16, r2
    74de:	03 2c       	mov	r0, r3
    74e0:	00 0c       	add	r0, r0
    74e2:	22 0b       	sbc	r18, r18
    74e4:	33 0b       	sbc	r19, r19
    74e6:	a9 01       	movw	r20, r18
    74e8:	98 01       	movw	r18, r16
    74ea:	26 0f       	add	r18, r22
    74ec:	37 1f       	adc	r19, r23
    74ee:	48 1f       	adc	r20, r24
    74f0:	59 1f       	adc	r21, r25
    74f2:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    74f6:	ed 81       	ldd	r30, Y+5	; 0x05
    74f8:	fe 81       	ldd	r31, Y+6	; 0x06
    74fa:	8f 01       	movw	r16, r30
    74fc:	ff 0f       	add	r31, r31
    74fe:	22 0b       	sbc	r18, r18
    7500:	33 0b       	sbc	r19, r19
    7502:	48 01       	movw	r8, r16
    7504:	59 01       	movw	r10, r18
    7506:	86 0e       	add	r8, r22
    7508:	97 1e       	adc	r9, r23
    750a:	a8 1e       	adc	r10, r24
    750c:	b9 1e       	adc	r11, r25
    750e:	04 c0       	rjmp	.+8      	; 0x7518 <normalize+0x320>
    7510:	88 24       	eor	r8, r8
    7512:	8a 94       	dec	r8
    7514:	98 2c       	mov	r9, r8
    7516:	54 01       	movw	r10, r8
    7518:	49 85       	ldd	r20, Y+9	; 0x09
    751a:	5a 85       	ldd	r21, Y+10	; 0x0a
    751c:	45 2b       	or	r20, r21
    751e:	e9 f0       	breq	.+58     	; 0x755a <normalize+0x362>
    7520:	ce 01       	movw	r24, r28
    7522:	01 96       	adiw	r24, 0x01	; 1
    7524:	7c dd       	rcall	.-1288   	; 0x701e <gettimezone>
    7526:	a9 81       	ldd	r26, Y+1	; 0x01
    7528:	ba 81       	ldd	r27, Y+2	; 0x02
    752a:	2c e3       	ldi	r18, 0x3C	; 60
    752c:	30 e0       	ldi	r19, 0x00	; 0
    752e:	0e 94 f5 ea 	call	0x1d5ea	; 0x1d5ea <__usmulhisi3>
    7532:	2b 01       	movw	r4, r22
    7534:	3c 01       	movw	r6, r24
    7536:	c5 01       	movw	r24, r10
    7538:	b4 01       	movw	r22, r8
    753a:	e2 dd       	rcall	.-1084   	; 0x7100 <is_dst>
    753c:	89 2b       	or	r24, r25
    753e:	51 f0       	breq	.+20     	; 0x7554 <normalize+0x35c>
    7540:	50 e1       	ldi	r21, 0x10	; 16
    7542:	45 1a       	sub	r4, r21
    7544:	5e e0       	ldi	r21, 0x0E	; 14
    7546:	55 0a       	sbc	r5, r21
    7548:	61 08       	sbc	r6, r1
    754a:	71 08       	sbc	r7, r1
    754c:	cc 24       	eor	r12, r12
    754e:	c3 94       	inc	r12
    7550:	d1 2c       	mov	r13, r1
    7552:	08 c0       	rjmp	.+16     	; 0x7564 <normalize+0x36c>
    7554:	c1 2c       	mov	r12, r1
    7556:	d1 2c       	mov	r13, r1
    7558:	05 c0       	rjmp	.+10     	; 0x7564 <normalize+0x36c>
    755a:	c1 2c       	mov	r12, r1
    755c:	d1 2c       	mov	r13, r1
    755e:	41 2c       	mov	r4, r1
    7560:	51 2c       	mov	r5, r1
    7562:	32 01       	movw	r6, r4
    7564:	87 01       	movw	r16, r14
    7566:	a3 01       	movw	r20, r6
    7568:	92 01       	movw	r18, r4
    756a:	c5 01       	movw	r24, r10
    756c:	b4 01       	movw	r22, r8
    756e:	59 dc       	rcall	.-1870   	; 0x6e22 <time_to_tm>
    7570:	c1 14       	cp	r12, r1
    7572:	d1 04       	cpc	r13, r1
    7574:	29 f0       	breq	.+10     	; 0x7580 <normalize+0x388>
    7576:	21 e0       	ldi	r18, 0x01	; 1
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	f7 01       	movw	r30, r14
    757c:	31 8b       	std	Z+17, r19	; 0x11
    757e:	20 8b       	std	Z+16, r18	; 0x10
    7580:	2a 96       	adiw	r28, 0x0a	; 10
    7582:	e2 e1       	ldi	r30, 0x12	; 18
    7584:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

00007588 <timegm>:
    7588:	60 e0       	ldi	r22, 0x00	; 0
    758a:	70 e0       	ldi	r23, 0x00	; 0
    758c:	35 ce       	rjmp	.-918    	; 0x71f8 <normalize>
    758e:	08 95       	ret

00007590 <setdate_r>:
    7590:	cf 92       	push	r12
    7592:	df 92       	push	r13
    7594:	ef 92       	push	r14
    7596:	ff 92       	push	r15
    7598:	cf 93       	push	r28
    759a:	df 93       	push	r29
    759c:	cd b7       	in	r28, 0x3d	; 61
    759e:	de b7       	in	r29, 0x3e	; 62
    75a0:	a0 97       	sbiw	r28, 0x20	; 32
    75a2:	0f b6       	in	r0, 0x3f	; 63
    75a4:	f8 94       	cli
    75a6:	de bf       	out	0x3e, r29	; 62
    75a8:	0f be       	out	0x3f, r0	; 63
    75aa:	cd bf       	out	0x3d, r28	; 61
    75ac:	98 a3       	std	Y+32, r25	; 0x20
    75ae:	8f 8f       	std	Y+31, r24	; 0x1f
    75b0:	1a 82       	std	Y+2, r1	; 0x02
    75b2:	19 82       	std	Y+1, r1	; 0x01
    75b4:	1c 82       	std	Y+4, r1	; 0x04
    75b6:	1b 82       	std	Y+3, r1	; 0x03
    75b8:	1e 82       	std	Y+6, r1	; 0x06
    75ba:	1d 82       	std	Y+5, r1	; 0x05
    75bc:	18 86       	std	Y+8, r1	; 0x08
    75be:	1f 82       	std	Y+7, r1	; 0x07
    75c0:	1a 86       	std	Y+10, r1	; 0x0a
    75c2:	19 86       	std	Y+9, r1	; 0x09
    75c4:	1c 86       	std	Y+12, r1	; 0x0c
    75c6:	1b 86       	std	Y+11, r1	; 0x0b
    75c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75ca:	98 a1       	ldd	r25, Y+32	; 0x20
    75cc:	fc 01       	movw	r30, r24
    75ce:	20 81       	ld	r18, Z
    75d0:	20 32       	cpi	r18, 0x20	; 32
    75d2:	21 f4       	brne	.+8      	; 0x75dc <setdate_r+0x4c>
    75d4:	01 96       	adiw	r24, 0x01	; 1
    75d6:	98 a3       	std	Y+32, r25	; 0x20
    75d8:	8f 8f       	std	Y+31, r24	; 0x1f
    75da:	f6 cf       	rjmp	.-20     	; 0x75c8 <setdate_r+0x38>
    75dc:	4a e0       	ldi	r20, 0x0A	; 10
    75de:	50 e0       	ldi	r21, 0x00	; 0
    75e0:	be 01       	movw	r22, r28
    75e2:	61 5e       	subi	r22, 0xE1	; 225
    75e4:	7f 4f       	sbci	r23, 0xFF	; 255
    75e6:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    75ea:	7c 87       	std	Y+12, r23	; 0x0c
    75ec:	6b 87       	std	Y+11, r22	; 0x0b
    75ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75f0:	98 a1       	ldd	r25, Y+32	; 0x20
    75f2:	fc 01       	movw	r30, r24
    75f4:	20 81       	ld	r18, Z
    75f6:	20 32       	cpi	r18, 0x20	; 32
    75f8:	21 f4       	brne	.+8      	; 0x7602 <setdate_r+0x72>
    75fa:	01 96       	adiw	r24, 0x01	; 1
    75fc:	98 a3       	std	Y+32, r25	; 0x20
    75fe:	8f 8f       	std	Y+31, r24	; 0x1f
    7600:	f6 cf       	rjmp	.-20     	; 0x75ee <setdate_r+0x5e>
    7602:	4a e0       	ldi	r20, 0x0A	; 10
    7604:	50 e0       	ldi	r21, 0x00	; 0
    7606:	be 01       	movw	r22, r28
    7608:	61 5e       	subi	r22, 0xE1	; 225
    760a:	7f 4f       	sbci	r23, 0xFF	; 255
    760c:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    7610:	7a 87       	std	Y+10, r23	; 0x0a
    7612:	69 87       	std	Y+9, r22	; 0x09
    7614:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7616:	98 a1       	ldd	r25, Y+32	; 0x20
    7618:	fc 01       	movw	r30, r24
    761a:	20 81       	ld	r18, Z
    761c:	20 32       	cpi	r18, 0x20	; 32
    761e:	21 f4       	brne	.+8      	; 0x7628 <setdate_r+0x98>
    7620:	01 96       	adiw	r24, 0x01	; 1
    7622:	98 a3       	std	Y+32, r25	; 0x20
    7624:	8f 8f       	std	Y+31, r24	; 0x1f
    7626:	f6 cf       	rjmp	.-20     	; 0x7614 <setdate_r+0x84>
    7628:	4a e0       	ldi	r20, 0x0A	; 10
    762a:	50 e0       	ldi	r21, 0x00	; 0
    762c:	be 01       	movw	r22, r28
    762e:	61 5e       	subi	r22, 0xE1	; 225
    7630:	7f 4f       	sbci	r23, 0xFF	; 255
    7632:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    7636:	78 87       	std	Y+8, r23	; 0x08
    7638:	6f 83       	std	Y+7, r22	; 0x07
    763a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    763c:	98 a1       	ldd	r25, Y+32	; 0x20
    763e:	fc 01       	movw	r30, r24
    7640:	20 81       	ld	r18, Z
    7642:	20 32       	cpi	r18, 0x20	; 32
    7644:	21 f4       	brne	.+8      	; 0x764e <setdate_r+0xbe>
    7646:	01 96       	adiw	r24, 0x01	; 1
    7648:	98 a3       	std	Y+32, r25	; 0x20
    764a:	8f 8f       	std	Y+31, r24	; 0x1f
    764c:	f6 cf       	rjmp	.-20     	; 0x763a <setdate_r+0xaa>
    764e:	4a e0       	ldi	r20, 0x0A	; 10
    7650:	50 e0       	ldi	r21, 0x00	; 0
    7652:	be 01       	movw	r22, r28
    7654:	61 5e       	subi	r22, 0xE1	; 225
    7656:	7f 4f       	sbci	r23, 0xFF	; 255
    7658:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    765c:	7e 83       	std	Y+6, r23	; 0x06
    765e:	6d 83       	std	Y+5, r22	; 0x05
    7660:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7662:	f8 a1       	ldd	r31, Y+32	; 0x20
    7664:	80 81       	ld	r24, Z
    7666:	88 23       	and	r24, r24
    7668:	39 f0       	breq	.+14     	; 0x7678 <setdate_r+0xe8>
    766a:	80 32       	cpi	r24, 0x20	; 32
    766c:	11 f0       	breq	.+4      	; 0x7672 <setdate_r+0xe2>
    766e:	8a 33       	cpi	r24, 0x3A	; 58
    7670:	19 f4       	brne	.+6      	; 0x7678 <setdate_r+0xe8>
    7672:	31 96       	adiw	r30, 0x01	; 1
    7674:	f8 a3       	std	Y+32, r31	; 0x20
    7676:	ef 8f       	std	Y+31, r30	; 0x1f
    7678:	4a e0       	ldi	r20, 0x0A	; 10
    767a:	50 e0       	ldi	r21, 0x00	; 0
    767c:	be 01       	movw	r22, r28
    767e:	61 5e       	subi	r22, 0xE1	; 225
    7680:	7f 4f       	sbci	r23, 0xFF	; 255
    7682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7684:	98 a1       	ldd	r25, Y+32	; 0x20
    7686:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    768a:	7c 83       	std	Y+4, r23	; 0x04
    768c:	6b 83       	std	Y+3, r22	; 0x03
    768e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7690:	f8 a1       	ldd	r31, Y+32	; 0x20
    7692:	80 81       	ld	r24, Z
    7694:	88 23       	and	r24, r24
    7696:	39 f0       	breq	.+14     	; 0x76a6 <setdate_r+0x116>
    7698:	80 32       	cpi	r24, 0x20	; 32
    769a:	11 f0       	breq	.+4      	; 0x76a0 <setdate_r+0x110>
    769c:	8a 33       	cpi	r24, 0x3A	; 58
    769e:	19 f4       	brne	.+6      	; 0x76a6 <setdate_r+0x116>
    76a0:	31 96       	adiw	r30, 0x01	; 1
    76a2:	f8 a3       	std	Y+32, r31	; 0x20
    76a4:	ef 8f       	std	Y+31, r30	; 0x1f
    76a6:	4a e0       	ldi	r20, 0x0A	; 10
    76a8:	50 e0       	ldi	r21, 0x00	; 0
    76aa:	be 01       	movw	r22, r28
    76ac:	61 5e       	subi	r22, 0xE1	; 225
    76ae:	7f 4f       	sbci	r23, 0xFF	; 255
    76b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76b2:	98 a1       	ldd	r25, Y+32	; 0x20
    76b4:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
    76b8:	7a 83       	std	Y+2, r23	; 0x02
    76ba:	69 83       	std	Y+1, r22	; 0x01
    76bc:	29 85       	ldd	r18, Y+9	; 0x09
    76be:	3a 85       	ldd	r19, Y+10	; 0x0a
    76c0:	21 50       	subi	r18, 0x01	; 1
    76c2:	31 09       	sbc	r19, r1
    76c4:	3a 87       	std	Y+10, r19	; 0x0a
    76c6:	29 87       	std	Y+9, r18	; 0x09
    76c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    76ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    76cc:	ac 01       	movw	r20, r24
    76ce:	42 5b       	subi	r20, 0xB2	; 178
    76d0:	57 40       	sbci	r21, 0x07	; 7
    76d2:	45 34       	cpi	r20, 0x45	; 69
    76d4:	51 05       	cpc	r21, r1
    76d6:	28 f0       	brcs	.+10     	; 0x76e2 <setdate_r+0x152>
    76d8:	9f 93       	push	r25
    76da:	8f 93       	push	r24
    76dc:	8c e6       	ldi	r24, 0x6C	; 108
    76de:	97 e0       	ldi	r25, 0x07	; 7
    76e0:	2c c0       	rjmp	.+88     	; 0x773a <setdate_r+0x1aa>
    76e2:	8c 56       	subi	r24, 0x6C	; 108
    76e4:	97 40       	sbci	r25, 0x07	; 7
    76e6:	9c 87       	std	Y+12, r25	; 0x0c
    76e8:	8b 87       	std	Y+11, r24	; 0x0b
    76ea:	2c 30       	cpi	r18, 0x0C	; 12
    76ec:	31 05       	cpc	r19, r1
    76ee:	28 f0       	brcs	.+10     	; 0x76fa <setdate_r+0x16a>
    76f0:	9f 93       	push	r25
    76f2:	8f 93       	push	r24
    76f4:	8b e5       	ldi	r24, 0x5B	; 91
    76f6:	97 e0       	ldi	r25, 0x07	; 7
    76f8:	20 c0       	rjmp	.+64     	; 0x773a <setdate_r+0x1aa>
    76fa:	8f 81       	ldd	r24, Y+7	; 0x07
    76fc:	98 85       	ldd	r25, Y+8	; 0x08
    76fe:	9c 01       	movw	r18, r24
    7700:	21 50       	subi	r18, 0x01	; 1
    7702:	31 09       	sbc	r19, r1
    7704:	2f 31       	cpi	r18, 0x1F	; 31
    7706:	31 05       	cpc	r19, r1
    7708:	28 f0       	brcs	.+10     	; 0x7714 <setdate_r+0x184>
    770a:	9f 93       	push	r25
    770c:	8f 93       	push	r24
    770e:	8a e4       	ldi	r24, 0x4A	; 74
    7710:	97 e0       	ldi	r25, 0x07	; 7
    7712:	13 c0       	rjmp	.+38     	; 0x773a <setdate_r+0x1aa>
    7714:	8d 81       	ldd	r24, Y+5	; 0x05
    7716:	9e 81       	ldd	r25, Y+6	; 0x06
    7718:	88 31       	cpi	r24, 0x18	; 24
    771a:	91 05       	cpc	r25, r1
    771c:	28 f0       	brcs	.+10     	; 0x7728 <setdate_r+0x198>
    771e:	9f 93       	push	r25
    7720:	8f 93       	push	r24
    7722:	88 e3       	ldi	r24, 0x38	; 56
    7724:	97 e0       	ldi	r25, 0x07	; 7
    7726:	09 c0       	rjmp	.+18     	; 0x773a <setdate_r+0x1aa>
    7728:	8b 81       	ldd	r24, Y+3	; 0x03
    772a:	9c 81       	ldd	r25, Y+4	; 0x04
    772c:	8c 33       	cpi	r24, 0x3C	; 60
    772e:	91 05       	cpc	r25, r1
    7730:	78 f0       	brcs	.+30     	; 0x7750 <setdate_r+0x1c0>
    7732:	9f 93       	push	r25
    7734:	8f 93       	push	r24
    7736:	87 e2       	ldi	r24, 0x27	; 39
    7738:	97 e0       	ldi	r25, 0x07	; 7
    773a:	1f 92       	push	r1
    773c:	9f 93       	push	r25
    773e:	8f 93       	push	r24
    7740:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7744:	0f 90       	pop	r0
    7746:	0f 90       	pop	r0
    7748:	0f 90       	pop	r0
    774a:	0f 90       	pop	r0
    774c:	0f 90       	pop	r0
    774e:	25 c0       	rjmp	.+74     	; 0x779a <setdate_r+0x20a>
    7750:	ce 01       	movw	r24, r28
    7752:	01 96       	adiw	r24, 0x01	; 1
    7754:	19 df       	rcall	.-462    	; 0x7588 <timegm>
    7756:	6b 01       	movw	r12, r22
    7758:	7c 01       	movw	r14, r24
    775a:	6f 8b       	std	Y+23, r22	; 0x17
    775c:	78 8f       	std	Y+24, r23	; 0x18
    775e:	89 8f       	std	Y+25, r24	; 0x19
    7760:	9a 8f       	std	Y+26, r25	; 0x1a
    7762:	1b 8e       	std	Y+27, r1	; 0x1b
    7764:	1c 8e       	std	Y+28, r1	; 0x1c
    7766:	1d 8e       	std	Y+29, r1	; 0x1d
    7768:	1e 8e       	std	Y+30, r1	; 0x1e
    776a:	be 01       	movw	r22, r28
    776c:	69 5e       	subi	r22, 0xE9	; 233
    776e:	7f 4f       	sbci	r23, 0xFF	; 255
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	90 e0       	ldi	r25, 0x00	; 0
    7774:	08 db       	rcall	.-2544   	; 0x6d86 <clock_settime>
    7776:	b7 01       	movw	r22, r14
    7778:	a6 01       	movw	r20, r12
    777a:	81 e0       	ldi	r24, 0x01	; 1
    777c:	90 e0       	ldi	r25, 0x00	; 0
    777e:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <rtc_init>
    7782:	81 11       	cpse	r24, r1
    7784:	0d c0       	rjmp	.+26     	; 0x77a0 <setdate_r+0x210>
    7786:	80 e1       	ldi	r24, 0x10	; 16
    7788:	97 e0       	ldi	r25, 0x07	; 7
    778a:	1f 92       	push	r1
    778c:	9f 93       	push	r25
    778e:	8f 93       	push	r24
    7790:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7794:	0f 90       	pop	r0
    7796:	0f 90       	pop	r0
    7798:	0f 90       	pop	r0
    779a:	8f ef       	ldi	r24, 0xFF	; 255
    779c:	9f ef       	ldi	r25, 0xFF	; 255
    779e:	02 c0       	rjmp	.+4      	; 0x77a4 <setdate_r+0x214>
    77a0:	80 e0       	ldi	r24, 0x00	; 0
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	a0 96       	adiw	r28, 0x20	; 32
    77a6:	0f b6       	in	r0, 0x3f	; 63
    77a8:	f8 94       	cli
    77aa:	de bf       	out	0x3e, r29	; 62
    77ac:	0f be       	out	0x3f, r0	; 63
    77ae:	cd bf       	out	0x3d, r28	; 61
    77b0:	df 91       	pop	r29
    77b2:	cf 91       	pop	r28
    77b4:	ff 90       	pop	r15
    77b6:	ef 90       	pop	r14
    77b8:	df 90       	pop	r13
    77ba:	cf 90       	pop	r12
    77bc:	08 95       	ret

000077be <setdate>:
    77be:	a8 e2       	ldi	r26, 0x28	; 40
    77c0:	b0 e0       	ldi	r27, 0x00	; 0
    77c2:	e5 ee       	ldi	r30, 0xE5	; 229
    77c4:	fb e3       	ldi	r31, 0x3B	; 59
    77c6:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    77ca:	8e e7       	ldi	r24, 0x7E	; 126
    77cc:	97 e0       	ldi	r25, 0x07	; 7
    77ce:	1f 92       	push	r1
    77d0:	9f 93       	push	r25
    77d2:	8f 93       	push	r24
    77d4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    77d8:	40 91 c2 1c 	lds	r20, 0x1CC2	; 0x801cc2 <__iob>
    77dc:	50 91 c3 1c 	lds	r21, 0x1CC3	; 0x801cc3 <__iob+0x1>
    77e0:	67 e2       	ldi	r22, 0x27	; 39
    77e2:	70 e0       	ldi	r23, 0x00	; 0
    77e4:	ce 01       	movw	r24, r28
    77e6:	01 96       	adiw	r24, 0x01	; 1
    77e8:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
    77ec:	ce 01       	movw	r24, r28
    77ee:	01 96       	adiw	r24, 0x01	; 1
    77f0:	cf de       	rcall	.-610    	; 0x7590 <setdate_r>
    77f2:	0f 90       	pop	r0
    77f4:	0f 90       	pop	r0
    77f6:	0f 90       	pop	r0
    77f8:	a8 96       	adiw	r28, 0x28	; 40
    77fa:	e2 e0       	ldi	r30, 0x02	; 2
    77fc:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00007800 <find_dst>:
    7800:	a8 e2       	ldi	r26, 0x28	; 40
    7802:	b0 e0       	ldi	r27, 0x00	; 0
    7804:	e6 e0       	ldi	r30, 0x06	; 6
    7806:	fc e3       	ldi	r31, 0x3C	; 60
    7808:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    780c:	3c 01       	movw	r6, r24
    780e:	1a 01       	movw	r2, r20
    7810:	2b 01       	movw	r4, r22
    7812:	49 01       	movw	r8, r18
    7814:	1c a3       	std	Y+36, r17	; 0x24
    7816:	0b a3       	std	Y+35, r16	; 0x23
    7818:	de a2       	std	Y+38, r13	; 0x26
    781a:	cd a2       	std	Y+37, r12	; 0x25
    781c:	b8 a6       	std	Y+40, r11	; 0x28
    781e:	af a2       	std	Y+39, r10	; 0x27
    7820:	be 01       	movw	r22, r28
    7822:	61 5e       	subi	r22, 0xE1	; 225
    7824:	7f 4f       	sbci	r23, 0xFF	; 255
    7826:	ce 01       	movw	r24, r28
    7828:	47 96       	adiw	r24, 0x17	; 23
    782a:	1b dc       	rcall	.-1994   	; 0x7062 <gettimeofday>
    782c:	af 8d       	ldd	r26, Y+31	; 0x1f
    782e:	b8 a1       	ldd	r27, Y+32	; 0x20
    7830:	2c e3       	ldi	r18, 0x3C	; 60
    7832:	30 e0       	ldi	r19, 0x00	; 0
    7834:	0e 94 f5 ea 	call	0x1d5ea	; 0x1d5ea <__usmulhisi3>
    7838:	5b 01       	movw	r10, r22
    783a:	6c 01       	movw	r12, r24
    783c:	61 14       	cp	r6, r1
    783e:	71 04       	cpc	r7, r1
    7840:	31 f0       	breq	.+12     	; 0x784e <find_dst+0x4e>
    7842:	20 e1       	ldi	r18, 0x10	; 16
    7844:	a2 1a       	sub	r10, r18
    7846:	2e e0       	ldi	r18, 0x0E	; 14
    7848:	b2 0a       	sbc	r11, r18
    784a:	c1 08       	sbc	r12, r1
    784c:	d1 08       	sbc	r13, r1
    784e:	81 14       	cp	r8, r1
    7850:	91 04       	cpc	r9, r1
    7852:	39 f0       	breq	.+14     	; 0x7862 <find_dst+0x62>
    7854:	4c e6       	ldi	r20, 0x6C	; 108
    7856:	84 1a       	sub	r8, r20
    7858:	47 e0       	ldi	r20, 0x07	; 7
    785a:	94 0a       	sbc	r9, r20
    785c:	9c 86       	std	Y+12, r9	; 0x0c
    785e:	8b 86       	std	Y+11, r8	; 0x0b
    7860:	11 c0       	rjmp	.+34     	; 0x7884 <find_dst+0x84>
    7862:	21 14       	cp	r2, r1
    7864:	31 04       	cpc	r3, r1
    7866:	41 04       	cpc	r4, r1
    7868:	51 04       	cpc	r5, r1
    786a:	21 f4       	brne	.+8      	; 0x7874 <find_dst+0x74>
    786c:	2f 88       	ldd	r2, Y+23	; 0x17
    786e:	38 8c       	ldd	r3, Y+24	; 0x18
    7870:	49 8c       	ldd	r4, Y+25	; 0x19
    7872:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7874:	8e 01       	movw	r16, r28
    7876:	0f 5f       	subi	r16, 0xFF	; 255
    7878:	1f 4f       	sbci	r17, 0xFF	; 255
    787a:	a6 01       	movw	r20, r12
    787c:	95 01       	movw	r18, r10
    787e:	c2 01       	movw	r24, r4
    7880:	b1 01       	movw	r22, r2
    7882:	cf da       	rcall	.-2658   	; 0x6e22 <time_to_tm>
    7884:	8b a1       	ldd	r24, Y+35	; 0x23
    7886:	9c a1       	ldd	r25, Y+36	; 0x24
    7888:	01 97       	sbiw	r24, 0x01	; 1
    788a:	9a 87       	std	Y+10, r25	; 0x0a
    788c:	89 87       	std	Y+9, r24	; 0x09
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	90 e0       	ldi	r25, 0x00	; 0
    7892:	98 87       	std	Y+8, r25	; 0x08
    7894:	8f 83       	std	Y+7, r24	; 0x07
    7896:	8f a1       	ldd	r24, Y+39	; 0x27
    7898:	98 a5       	ldd	r25, Y+40	; 0x28
    789a:	9e 83       	std	Y+6, r25	; 0x06
    789c:	8d 83       	std	Y+5, r24	; 0x05
    789e:	1c 82       	std	Y+4, r1	; 0x04
    78a0:	1b 82       	std	Y+3, r1	; 0x03
    78a2:	1a 82       	std	Y+2, r1	; 0x02
    78a4:	19 82       	std	Y+1, r1	; 0x01
    78a6:	ce 01       	movw	r24, r28
    78a8:	01 96       	adiw	r24, 0x01	; 1
    78aa:	6e de       	rcall	.-804    	; 0x7588 <timegm>
    78ac:	45 01       	movw	r8, r10
    78ae:	56 01       	movw	r10, r12
    78b0:	86 0e       	add	r8, r22
    78b2:	97 1e       	adc	r9, r23
    78b4:	a8 1e       	adc	r10, r24
    78b6:	b9 1e       	adc	r11, r25
    78b8:	8e 01       	movw	r16, r28
    78ba:	0f 5f       	subi	r16, 0xFF	; 255
    78bc:	1f 4f       	sbci	r17, 0xFF	; 255
    78be:	20 e0       	ldi	r18, 0x00	; 0
    78c0:	30 e0       	ldi	r19, 0x00	; 0
    78c2:	a9 01       	movw	r20, r18
    78c4:	c5 01       	movw	r24, r10
    78c6:	b4 01       	movw	r22, r8
    78c8:	ac da       	rcall	.-2728   	; 0x6e22 <time_to_tm>
    78ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    78cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    78ce:	e7 e0       	ldi	r30, 0x07	; 7
    78d0:	f0 e0       	ldi	r31, 0x00	; 0
    78d2:	c9 01       	movw	r24, r18
    78d4:	bf 01       	movw	r22, r30
    78d6:	0e 94 9b ea 	call	0x1d536	; 0x1d536 <__divmodhi4>
    78da:	4d a1       	ldd	r20, Y+37	; 0x25
    78dc:	5e a1       	ldd	r21, Y+38	; 0x26
    78de:	48 17       	cp	r20, r24
    78e0:	59 07       	cpc	r21, r25
    78e2:	21 f4       	brne	.+8      	; 0x78ec <find_dst+0xec>
    78e4:	51 e0       	ldi	r21, 0x01	; 1
    78e6:	e5 1a       	sub	r14, r21
    78e8:	f1 08       	sbc	r15, r1
    78ea:	51 f0       	breq	.+20     	; 0x7900 <find_dst+0x100>
    78ec:	80 e8       	ldi	r24, 0x80	; 128
    78ee:	88 0e       	add	r8, r24
    78f0:	81 e5       	ldi	r24, 0x51	; 81
    78f2:	98 1e       	adc	r9, r24
    78f4:	81 e0       	ldi	r24, 0x01	; 1
    78f6:	a8 1e       	adc	r10, r24
    78f8:	b1 1c       	adc	r11, r1
    78fa:	2f 5f       	subi	r18, 0xFF	; 255
    78fc:	3f 4f       	sbci	r19, 0xFF	; 255
    78fe:	e9 cf       	rjmp	.-46     	; 0x78d2 <find_dst+0xd2>
    7900:	c5 01       	movw	r24, r10
    7902:	b4 01       	movw	r22, r8
    7904:	a8 96       	adiw	r28, 0x28	; 40
    7906:	e2 e1       	ldi	r30, 0x12	; 18
    7908:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000790c <set_dst>:
    790c:	4f 92       	push	r4
    790e:	5f 92       	push	r5
    7910:	6f 92       	push	r6
    7912:	7f 92       	push	r7
    7914:	af 92       	push	r10
    7916:	bf 92       	push	r11
    7918:	cf 92       	push	r12
    791a:	df 92       	push	r13
    791c:	ef 92       	push	r14
    791e:	ff 92       	push	r15
    7920:	0f 93       	push	r16
    7922:	1f 93       	push	r17
    7924:	cf 93       	push	r28
    7926:	df 93       	push	r29
    7928:	cd b7       	in	r28, 0x3d	; 61
    792a:	de b7       	in	r29, 0x3e	; 62
    792c:	2c 97       	sbiw	r28, 0x0c	; 12
    792e:	0f b6       	in	r0, 0x3f	; 63
    7930:	f8 94       	cli
    7932:	de bf       	out	0x3e, r29	; 62
    7934:	0f be       	out	0x3f, r0	; 63
    7936:	cd bf       	out	0x3d, r28	; 61
    7938:	2b 01       	movw	r4, r22
    793a:	3c 01       	movw	r6, r24
    793c:	67 2b       	or	r22, r23
    793e:	68 2b       	or	r22, r24
    7940:	69 2b       	or	r22, r25
    7942:	51 f4       	brne	.+20     	; 0x7958 <set_dst+0x4c>
    7944:	be 01       	movw	r22, r28
    7946:	67 5f       	subi	r22, 0xF7	; 247
    7948:	7f 4f       	sbci	r23, 0xFF	; 255
    794a:	ce 01       	movw	r24, r28
    794c:	01 96       	adiw	r24, 0x01	; 1
    794e:	89 db       	rcall	.-2286   	; 0x7062 <gettimeofday>
    7950:	49 80       	ldd	r4, Y+1	; 0x01
    7952:	5a 80       	ldd	r5, Y+2	; 0x02
    7954:	6b 80       	ldd	r6, Y+3	; 0x03
    7956:	7c 80       	ldd	r7, Y+4	; 0x04
    7958:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <dst+0x8>
    795c:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <dst+0x9>
    7960:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <dst+0xa>
    7964:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <dst+0xb>
    7968:	84 15       	cp	r24, r4
    796a:	95 05       	cpc	r25, r5
    796c:	a6 05       	cpc	r26, r6
    796e:	b7 05       	cpc	r27, r7
    7970:	50 f0       	brcs	.+20     	; 0x7986 <set_dst+0x7a>
    7972:	84 19       	sub	r24, r4
    7974:	95 09       	sbc	r25, r5
    7976:	a6 09       	sbc	r26, r6
    7978:	b7 09       	sbc	r27, r7
    797a:	80 38       	cpi	r24, 0x80	; 128
    797c:	91 45       	sbci	r25, 0x51	; 81
    797e:	a1 40       	sbci	r26, 0x01	; 1
    7980:	b1 05       	cpc	r27, r1
    7982:	70 f4       	brcc	.+28     	; 0x79a0 <set_dst+0x94>
    7984:	42 c0       	rjmp	.+132    	; 0x7a0a <set_dst+0xfe>
    7986:	a3 01       	movw	r20, r6
    7988:	92 01       	movw	r18, r4
    798a:	28 1b       	sub	r18, r24
    798c:	39 0b       	sbc	r19, r25
    798e:	4a 0b       	sbc	r20, r26
    7990:	5b 0b       	sbc	r21, r27
    7992:	da 01       	movw	r26, r20
    7994:	c9 01       	movw	r24, r18
    7996:	80 38       	cpi	r24, 0x80	; 128
    7998:	91 45       	sbci	r25, 0x51	; 81
    799a:	a1 40       	sbci	r26, 0x01	; 1
    799c:	b1 05       	cpc	r27, r1
    799e:	a8 f1       	brcs	.+106    	; 0x7a0a <set_dst+0xfe>
    79a0:	40 92 79 1a 	sts	0x1A79, r4	; 0x801a79 <dst+0x8>
    79a4:	50 92 7a 1a 	sts	0x1A7A, r5	; 0x801a7a <dst+0x9>
    79a8:	60 92 7b 1a 	sts	0x1A7B, r6	; 0x801a7b <dst+0xa>
    79ac:	70 92 7c 1a 	sts	0x1A7C, r7	; 0x801a7c <dst+0xb>
    79b0:	82 e0       	ldi	r24, 0x02	; 2
    79b2:	a8 2e       	mov	r10, r24
    79b4:	b1 2c       	mov	r11, r1
    79b6:	c1 2c       	mov	r12, r1
    79b8:	d1 2c       	mov	r13, r1
    79ba:	92 e0       	ldi	r25, 0x02	; 2
    79bc:	e9 2e       	mov	r14, r25
    79be:	f1 2c       	mov	r15, r1
    79c0:	03 e0       	ldi	r16, 0x03	; 3
    79c2:	10 e0       	ldi	r17, 0x00	; 0
    79c4:	20 e0       	ldi	r18, 0x00	; 0
    79c6:	30 e0       	ldi	r19, 0x00	; 0
    79c8:	b3 01       	movw	r22, r6
    79ca:	a2 01       	movw	r20, r4
    79cc:	80 e0       	ldi	r24, 0x00	; 0
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	17 df       	rcall	.-466    	; 0x7800 <find_dst>
    79d2:	60 93 71 1a 	sts	0x1A71, r22	; 0x801a71 <dst>
    79d6:	70 93 72 1a 	sts	0x1A72, r23	; 0x801a72 <dst+0x1>
    79da:	80 93 73 1a 	sts	0x1A73, r24	; 0x801a73 <dst+0x2>
    79de:	90 93 74 1a 	sts	0x1A74, r25	; 0x801a74 <dst+0x3>
    79e2:	ee 24       	eor	r14, r14
    79e4:	e3 94       	inc	r14
    79e6:	f1 2c       	mov	r15, r1
    79e8:	0b e0       	ldi	r16, 0x0B	; 11
    79ea:	10 e0       	ldi	r17, 0x00	; 0
    79ec:	20 e0       	ldi	r18, 0x00	; 0
    79ee:	30 e0       	ldi	r19, 0x00	; 0
    79f0:	b3 01       	movw	r22, r6
    79f2:	a2 01       	movw	r20, r4
    79f4:	81 e0       	ldi	r24, 0x01	; 1
    79f6:	90 e0       	ldi	r25, 0x00	; 0
    79f8:	03 df       	rcall	.-506    	; 0x7800 <find_dst>
    79fa:	60 93 75 1a 	sts	0x1A75, r22	; 0x801a75 <dst+0x4>
    79fe:	70 93 76 1a 	sts	0x1A76, r23	; 0x801a76 <dst+0x5>
    7a02:	80 93 77 1a 	sts	0x1A77, r24	; 0x801a77 <dst+0x6>
    7a06:	90 93 78 1a 	sts	0x1A78, r25	; 0x801a78 <dst+0x7>
    7a0a:	2c 96       	adiw	r28, 0x0c	; 12
    7a0c:	0f b6       	in	r0, 0x3f	; 63
    7a0e:	f8 94       	cli
    7a10:	de bf       	out	0x3e, r29	; 62
    7a12:	0f be       	out	0x3f, r0	; 63
    7a14:	cd bf       	out	0x3d, r28	; 61
    7a16:	df 91       	pop	r29
    7a18:	cf 91       	pop	r28
    7a1a:	1f 91       	pop	r17
    7a1c:	0f 91       	pop	r16
    7a1e:	ff 90       	pop	r15
    7a20:	ef 90       	pop	r14
    7a22:	df 90       	pop	r13
    7a24:	cf 90       	pop	r12
    7a26:	bf 90       	pop	r11
    7a28:	af 90       	pop	r10
    7a2a:	7f 90       	pop	r7
    7a2c:	6f 90       	pop	r6
    7a2e:	5f 90       	pop	r5
    7a30:	4f 90       	pop	r4
    7a32:	08 95       	ret

00007a34 <asctime_r>:
    7a34:	0f 93       	push	r16
    7a36:	1f 93       	push	r17
    7a38:	cf 93       	push	r28
    7a3a:	df 93       	push	r29
    7a3c:	ec 01       	movw	r28, r24
    7a3e:	8b 01       	movw	r16, r22
    7a40:	60 e0       	ldi	r22, 0x00	; 0
    7a42:	70 e0       	ldi	r23, 0x00	; 0
    7a44:	d9 db       	rcall	.-2126   	; 0x71f8 <normalize>
    7a46:	20 e2       	ldi	r18, 0x20	; 32
    7a48:	d8 01       	movw	r26, r16
    7a4a:	82 2f       	mov	r24, r18
    7a4c:	1d 92       	st	X+, r1
    7a4e:	8a 95       	dec	r24
    7a50:	e9 f7       	brne	.-6      	; 0x7a4c <asctime_r+0x18>
    7a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a56:	84 59       	subi	r24, 0x94	; 148
    7a58:	98 4f       	sbci	r25, 0xF8	; 248
    7a5a:	9f 93       	push	r25
    7a5c:	8f 93       	push	r24
    7a5e:	89 81       	ldd	r24, Y+1	; 0x01
    7a60:	8f 93       	push	r24
    7a62:	88 81       	ld	r24, Y
    7a64:	8f 93       	push	r24
    7a66:	8b 81       	ldd	r24, Y+3	; 0x03
    7a68:	8f 93       	push	r24
    7a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a6c:	8f 93       	push	r24
    7a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a70:	8f 93       	push	r24
    7a72:	8c 81       	ldd	r24, Y+4	; 0x04
    7a74:	8f 93       	push	r24
    7a76:	8f 81       	ldd	r24, Y+7	; 0x07
    7a78:	8f 93       	push	r24
    7a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a7c:	8f 93       	push	r24
    7a7e:	e8 85       	ldd	r30, Y+8	; 0x08
    7a80:	f9 85       	ldd	r31, Y+9	; 0x09
    7a82:	ee 0f       	add	r30, r30
    7a84:	ff 1f       	adc	r31, r31
    7a86:	ee 5e       	subi	r30, 0xEE	; 238
    7a88:	fe 4f       	sbci	r31, 0xFE	; 254
    7a8a:	81 81       	ldd	r24, Z+1	; 0x01
    7a8c:	8f 93       	push	r24
    7a8e:	80 81       	ld	r24, Z
    7a90:	8f 93       	push	r24
    7a92:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a94:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a96:	ee 0f       	add	r30, r30
    7a98:	ff 1f       	adc	r31, r31
    7a9a:	e4 5d       	subi	r30, 0xD4	; 212
    7a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    7a9e:	81 81       	ldd	r24, Z+1	; 0x01
    7aa0:	8f 93       	push	r24
    7aa2:	80 81       	ld	r24, Z
    7aa4:	8f 93       	push	r24
    7aa6:	8f e9       	ldi	r24, 0x9F	; 159
    7aa8:	97 e0       	ldi	r25, 0x07	; 7
    7aaa:	1f 92       	push	r1
    7aac:	9f 93       	push	r25
    7aae:	8f 93       	push	r24
    7ab0:	1f 92       	push	r1
    7ab2:	2f 93       	push	r18
    7ab4:	1f 93       	push	r17
    7ab6:	0f 93       	push	r16
    7ab8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <snprintf_P>
    7abc:	ad b7       	in	r26, 0x3d	; 61
    7abe:	be b7       	in	r27, 0x3e	; 62
    7ac0:	55 96       	adiw	r26, 0x15	; 21
    7ac2:	0f b6       	in	r0, 0x3f	; 63
    7ac4:	f8 94       	cli
    7ac6:	be bf       	out	0x3e, r27	; 62
    7ac8:	0f be       	out	0x3f, r0	; 63
    7aca:	ad bf       	out	0x3d, r26	; 61
    7acc:	c8 01       	movw	r24, r16
    7ace:	df 91       	pop	r29
    7ad0:	cf 91       	pop	r28
    7ad2:	1f 91       	pop	r17
    7ad4:	0f 91       	pop	r16
    7ad6:	08 95       	ret

00007ad8 <asctime>:
    7ad8:	68 e0       	ldi	r22, 0x08	; 8
    7ada:	78 e1       	ldi	r23, 0x18	; 24
    7adc:	ab cf       	rjmp	.-170    	; 0x7a34 <asctime_r>
    7ade:	08 95       	ret

00007ae0 <ctime_gm>:
    7ae0:	a6 e1       	ldi	r26, 0x16	; 22
    7ae2:	b0 e0       	ldi	r27, 0x00	; 0
    7ae4:	e6 e7       	ldi	r30, 0x76	; 118
    7ae6:	fd e3       	ldi	r31, 0x3D	; 61
    7ae8:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    7aec:	be 01       	movw	r22, r28
    7aee:	6f 5f       	subi	r22, 0xFF	; 255
    7af0:	7f 4f       	sbci	r23, 0xFF	; 255
    7af2:	75 da       	rcall	.-2838   	; 0x6fde <gmtime_r>
    7af4:	68 ec       	ldi	r22, 0xC8	; 200
    7af6:	77 e1       	ldi	r23, 0x17	; 23
    7af8:	9d df       	rcall	.-198    	; 0x7a34 <asctime_r>
    7afa:	66 96       	adiw	r28, 0x16	; 22
    7afc:	e2 e0       	ldi	r30, 0x02	; 2
    7afe:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00007b02 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7b02:	a2 e2       	ldi	r26, 0x22	; 34
    7b04:	b0 e0       	ldi	r27, 0x00	; 0
    7b06:	e7 e8       	ldi	r30, 0x87	; 135
    7b08:	fd e3       	ldi	r31, 0x3D	; 61
    7b0a:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    7b0e:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7b10:	40 e0       	ldi	r20, 0x00	; 0
    7b12:	50 e0       	ldi	r21, 0x00	; 0
    7b14:	ba 01       	movw	r22, r20
    7b16:	80 e0       	ldi	r24, 0x00	; 0
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <rtc_init>
    7b1e:	81 11       	cpse	r24, r1
    7b20:	27 c0       	rjmp	.+78     	; 0x7b70 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7b22:	8a e9       	ldi	r24, 0x9A	; 154
    7b24:	96 e0       	ldi	r25, 0x06	; 6
    7b26:	1f 92       	push	r1
    7b28:	9f 93       	push	r25
    7b2a:	8f 93       	push	r24
    7b2c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("attempting rtc init\n");
    7b30:	85 e8       	ldi	r24, 0x85	; 133
    7b32:	96 e0       	ldi	r25, 0x06	; 6
    7b34:	1f 92       	push	r1
    7b36:	9f 93       	push	r25
    7b38:	8f 93       	push	r24
    7b3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b3e:	40 e0       	ldi	r20, 0x00	; 0
    7b40:	50 e0       	ldi	r21, 0x00	; 0
    7b42:	ba 01       	movw	r22, r20
    7b44:	81 e0       	ldi	r24, 0x01	; 1
    7b46:	90 e0       	ldi	r25, 0x00	; 0
    7b48:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <rtc_init>
    7b4c:	0f 90       	pop	r0
    7b4e:	0f 90       	pop	r0
    7b50:	0f 90       	pop	r0
    7b52:	0f 90       	pop	r0
    7b54:	0f 90       	pop	r0
    7b56:	0f 90       	pop	r0
    7b58:	81 11       	cpse	r24, r1
    7b5a:	0a c0       	rjmp	.+20     	; 0x7b70 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b5c:	8e e6       	ldi	r24, 0x6E	; 110
    7b5e:	96 e0       	ldi	r25, 0x06	; 6
    7b60:	1f 92       	push	r1
    7b62:	9f 93       	push	r25
    7b64:	8f 93       	push	r24
    7b66:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7b6a:	0f 90       	pop	r0
    7b6c:	0f 90       	pop	r0
    7b6e:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7b70:	ce 01       	movw	r24, r28
    7b72:	01 96       	adiw	r24, 0x01	; 1
    7b74:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <rtc_read>
    7b78:	88 23       	and	r24, r24
    7b7a:	51 f0       	breq	.+20     	; 0x7b90 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b7c:	ce 01       	movw	r24, r28
    7b7e:	01 96       	adiw	r24, 0x01	; 1
    7b80:	03 dd       	rcall	.-1530   	; 0x7588 <timegm>
    7b82:	6b 01       	movw	r12, r22
    7b84:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7b86:	67 2b       	or	r22, r23
    7b88:	68 2b       	or	r22, r24
    7b8a:	69 2b       	or	r22, r25
    7b8c:	c1 f4       	brne	.+48     	; 0x7bbe <initialize_clock+0xbc>
    7b8e:	0a c0       	rjmp	.+20     	; 0x7ba4 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b90:	84 e5       	ldi	r24, 0x54	; 84
    7b92:	96 e0       	ldi	r25, 0x06	; 6
    7b94:	1f 92       	push	r1
    7b96:	9f 93       	push	r25
    7b98:	8f 93       	push	r24
    7b9a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7b9e:	0f 90       	pop	r0
    7ba0:	0f 90       	pop	r0
    7ba2:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7ba4:	80 e3       	ldi	r24, 0x30	; 48
    7ba6:	96 e0       	ldi	r25, 0x06	; 6
    7ba8:	1f 92       	push	r1
    7baa:	9f 93       	push	r25
    7bac:	8f 93       	push	r24
    7bae:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7bb2:	0f 90       	pop	r0
    7bb4:	0f 90       	pop	r0
    7bb6:	0f 90       	pop	r0
    7bb8:	c1 2c       	mov	r12, r1
    7bba:	d1 2c       	mov	r13, r1
    7bbc:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7bbe:	18 a3       	std	Y+32, r17	; 0x20
    7bc0:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7bc2:	1a a2       	std	Y+34, r1	; 0x22
    7bc4:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7bc6:	ce 01       	movw	r24, r28
    7bc8:	4f 96       	adiw	r24, 0x1f	; 31
    7bca:	3a da       	rcall	.-2956   	; 0x7040 <settimezone>

    ts.tv_sec = seconds;
    7bcc:	cf 8a       	std	Y+23, r12	; 0x17
    7bce:	d8 8e       	std	Y+24, r13	; 0x18
    7bd0:	e9 8e       	std	Y+25, r14	; 0x19
    7bd2:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7bd4:	1b 8e       	std	Y+27, r1	; 0x1b
    7bd6:	1c 8e       	std	Y+28, r1	; 0x1c
    7bd8:	1d 8e       	std	Y+29, r1	; 0x1d
    7bda:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7bdc:	be 01       	movw	r22, r28
    7bde:	69 5e       	subi	r22, 0xE9	; 233
    7be0:	7f 4f       	sbci	r23, 0xFF	; 255
    7be2:	80 e0       	ldi	r24, 0x00	; 0
    7be4:	90 e0       	ldi	r25, 0x00	; 0
    7be6:	cf d8       	rcall	.-3682   	; 0x6d86 <clock_settime>
}
    7be8:	a2 96       	adiw	r28, 0x22	; 34
    7bea:	e8 e0       	ldi	r30, 0x08	; 8
    7bec:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00007bf0 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7bf0:	a2 e2       	ldi	r26, 0x22	; 34
    7bf2:	b0 e0       	ldi	r27, 0x00	; 0
    7bf4:	ee ef       	ldi	r30, 0xFE	; 254
    7bf6:	fd e3       	ldi	r31, 0x3D	; 61
    7bf8:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7bfc:	ce 01       	movw	r24, r28
    7bfe:	01 96       	adiw	r24, 0x01	; 1
    7c00:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <rtc_read>
    7c04:	88 23       	and	r24, r24
    7c06:	21 f1       	breq	.+72     	; 0x7c50 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7c08:	ce 01       	movw	r24, r28
    7c0a:	01 96       	adiw	r24, 0x01	; 1
    7c0c:	bd dc       	rcall	.-1670   	; 0x7588 <timegm>
    7c0e:	6f 8f       	std	Y+31, r22	; 0x1f
    7c10:	78 a3       	std	Y+32, r23	; 0x20
    7c12:	89 a3       	std	Y+33, r24	; 0x21
    7c14:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7c16:	9f 93       	push	r25
    7c18:	8f 93       	push	r24
    7c1a:	7f 93       	push	r23
    7c1c:	6f 93       	push	r22
    7c1e:	8e e1       	ldi	r24, 0x1E	; 30
    7c20:	96 e0       	ldi	r25, 0x06	; 6
    7c22:	1f 92       	push	r1
    7c24:	9f 93       	push	r25
    7c26:	8f 93       	push	r24
    7c28:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7c2c:	ce 01       	movw	r24, r28
    7c2e:	01 96       	adiw	r24, 0x01	; 1
    7c30:	53 df       	rcall	.-346    	; 0x7ad8 <asctime>
    7c32:	9f 93       	push	r25
    7c34:	8f 93       	push	r24
    7c36:	8d e0       	ldi	r24, 0x0D	; 13
    7c38:	96 e0       	ldi	r25, 0x06	; 6
    7c3a:	1f 92       	push	r1
    7c3c:	9f 93       	push	r25
    7c3e:	8f 93       	push	r24
    7c40:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7c44:	0f b6       	in	r0, 0x3f	; 63
    7c46:	f8 94       	cli
    7c48:	de bf       	out	0x3e, r29	; 62
    7c4a:	0f be       	out	0x3f, r0	; 63
    7c4c:	cd bf       	out	0x3d, r28	; 61
    7c4e:	0a c0       	rjmp	.+20     	; 0x7c64 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c50:	8c ef       	ldi	r24, 0xFC	; 252
    7c52:	95 e0       	ldi	r25, 0x05	; 5
    7c54:	1f 92       	push	r1
    7c56:	9f 93       	push	r25
    7c58:	8f 93       	push	r24
    7c5a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    7c5e:	0f 90       	pop	r0
    7c60:	0f 90       	pop	r0
    7c62:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c64:	be 01       	movw	r22, r28
    7c66:	69 5e       	subi	r22, 0xE9	; 233
    7c68:	7f 4f       	sbci	r23, 0xFF	; 255
    7c6a:	80 e0       	ldi	r24, 0x00	; 0
    7c6c:	90 e0       	ldi	r25, 0x00	; 0
    7c6e:	0e 94 34 34 	call	0x6868	; 0x6868 <clock_gettime>
    seconds = ts.tv_sec;
    7c72:	8f 89       	ldd	r24, Y+23	; 0x17
    7c74:	98 8d       	ldd	r25, Y+24	; 0x18
    7c76:	29 8d       	ldd	r18, Y+25	; 0x19
    7c78:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7c7a:	8f 8f       	std	Y+31, r24	; 0x1f
    7c7c:	98 a3       	std	Y+32, r25	; 0x20
    7c7e:	29 a3       	std	Y+33, r18	; 0x21
    7c80:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7c82:	3f 93       	push	r19
    7c84:	2f 93       	push	r18
    7c86:	9f 93       	push	r25
    7c88:	8f 93       	push	r24
    7c8a:	8a ee       	ldi	r24, 0xEA	; 234
    7c8c:	95 e0       	ldi	r25, 0x05	; 5
    7c8e:	1f 92       	push	r1
    7c90:	9f 93       	push	r25
    7c92:	8f 93       	push	r24
    7c94:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c98:	ce 01       	movw	r24, r28
    7c9a:	4f 96       	adiw	r24, 0x1f	; 31
    7c9c:	b5 d9       	rcall	.-3222   	; 0x7008 <gmtime>
    7c9e:	1c df       	rcall	.-456    	; 0x7ad8 <asctime>
    7ca0:	9f 93       	push	r25
    7ca2:	8f 93       	push	r24
    7ca4:	89 ed       	ldi	r24, 0xD9	; 217
    7ca6:	95 e0       	ldi	r25, 0x05	; 5
    7ca8:	1f 92       	push	r1
    7caa:	9f 93       	push	r25
    7cac:	8f 93       	push	r24
    7cae:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
    7cb2:	0f b6       	in	r0, 0x3f	; 63
    7cb4:	f8 94       	cli
    7cb6:	de bf       	out	0x3e, r29	; 62
    7cb8:	0f be       	out	0x3f, r0	; 63
    7cba:	cd bf       	out	0x3d, r28	; 61
    7cbc:	a2 96       	adiw	r28, 0x22	; 34
    7cbe:	e2 e0       	ldi	r30, 0x02	; 2
    7cc0:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00007cc4 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7cc4:	fc 01       	movw	r30, r24
    7cc6:	84 81       	ldd	r24, Z+4	; 0x04
    7cc8:	95 81       	ldd	r25, Z+5	; 0x05
    7cca:	00 97       	sbiw	r24, 0x00	; 0
    7ccc:	79 f0       	breq	.+30     	; 0x7cec <_putc_buffer_fn+0x28>
    7cce:	66 23       	and	r22, r22
    7cd0:	69 f0       	breq	.+26     	; 0x7cec <_putc_buffer_fn+0x28>
    7cd2:	01 97       	sbiw	r24, 0x01	; 1
    7cd4:	95 83       	std	Z+5, r25	; 0x05
    7cd6:	84 83       	std	Z+4, r24	; 0x04
    7cd8:	86 81       	ldd	r24, Z+6	; 0x06
    7cda:	97 81       	ldd	r25, Z+7	; 0x07
    7cdc:	01 96       	adiw	r24, 0x01	; 1
    7cde:	97 83       	std	Z+7, r25	; 0x07
    7ce0:	86 83       	std	Z+6, r24	; 0x06
    7ce2:	a2 81       	ldd	r26, Z+2	; 0x02
    7ce4:	b3 81       	ldd	r27, Z+3	; 0x03
    7ce6:	6d 93       	st	X+, r22
    7ce8:	b3 83       	std	Z+3, r27	; 0x03
    7cea:	a2 83       	std	Z+2, r26	; 0x02
    7cec:	02 80       	ldd	r0, Z+2	; 0x02
    7cee:	f3 81       	ldd	r31, Z+3	; 0x03
    7cf0:	e0 2d       	mov	r30, r0
    7cf2:	10 82       	st	Z, r1
    7cf4:	08 95       	ret

00007cf6 <_putc_fn>:
    7cf6:	fc 01       	movw	r30, r24
    7cf8:	26 81       	ldd	r18, Z+6	; 0x06
    7cfa:	37 81       	ldd	r19, Z+7	; 0x07
    7cfc:	2f 5f       	subi	r18, 0xFF	; 255
    7cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    7d00:	37 83       	std	Z+7, r19	; 0x07
    7d02:	26 83       	std	Z+6, r18	; 0x06
    7d04:	86 2f       	mov	r24, r22
    7d06:	90 e0       	ldi	r25, 0x00	; 0
    7d08:	0c 94 bd 7a 	jmp	0xf57a	; 0xf57a <putchar>
    7d0c:	08 95       	ret

00007d0e <bin2num>:
    7d0e:	a0 e0       	ldi	r26, 0x00	; 0
    7d10:	b0 e0       	ldi	r27, 0x00	; 0
    7d12:	ed e8       	ldi	r30, 0x8D	; 141
    7d14:	fe e3       	ldi	r31, 0x3E	; 62
    7d16:	0c 94 22 eb 	jmp	0x1d644	; 0x1d644 <__prologue_saves__+0xe>
    7d1a:	ea 01       	movw	r28, r20
    7d1c:	53 e0       	ldi	r21, 0x03	; 3
    7d1e:	ee 0c       	add	r14, r14
    7d20:	ff 1c       	adc	r15, r15
    7d22:	5a 95       	dec	r21
    7d24:	e1 f7       	brne	.-8      	; 0x7d1e <bin2num+0x10>
    7d26:	fc 01       	movw	r30, r24
    7d28:	af 01       	movw	r20, r30
    7d2a:	48 1b       	sub	r20, r24
    7d2c:	59 0b       	sbc	r21, r25
    7d2e:	c4 17       	cp	r28, r20
    7d30:	d5 07       	cpc	r29, r21
    7d32:	14 f0       	brlt	.+4      	; 0x7d38 <bin2num+0x2a>
    7d34:	11 92       	st	Z+, r1
    7d36:	f8 cf       	rjmp	.-16     	; 0x7d28 <bin2num+0x1a>
    7d38:	41 e0       	ldi	r20, 0x01	; 1
    7d3a:	e4 1a       	sub	r14, r20
    7d3c:	f1 08       	sbc	r15, r1
    7d3e:	5b 01       	movw	r10, r22
    7d40:	42 e0       	ldi	r20, 0x02	; 2
    7d42:	a4 1a       	sub	r10, r20
    7d44:	b1 08       	sbc	r11, r1
    7d46:	f7 fc       	sbrc	r15, 7
    7d48:	3b c0       	rjmp	.+118    	; 0x7dc0 <bin2num+0xb2>
    7d4a:	f7 01       	movw	r30, r14
    7d4c:	43 e0       	ldi	r20, 0x03	; 3
    7d4e:	f5 95       	asr	r31
    7d50:	e7 95       	ror	r30
    7d52:	4a 95       	dec	r20
    7d54:	e1 f7       	brne	.-8      	; 0x7d4e <bin2num+0x40>
    7d56:	e0 0f       	add	r30, r16
    7d58:	f1 1f       	adc	r31, r17
    7d5a:	40 81       	ld	r20, Z
    7d5c:	50 e0       	ldi	r21, 0x00	; 0
    7d5e:	f7 01       	movw	r30, r14
    7d60:	e7 70       	andi	r30, 0x07	; 7
    7d62:	ff 27       	eor	r31, r31
    7d64:	02 c0       	rjmp	.+4      	; 0x7d6a <bin2num+0x5c>
    7d66:	55 95       	asr	r21
    7d68:	47 95       	ror	r20
    7d6a:	ea 95       	dec	r30
    7d6c:	e2 f7       	brpl	.-8      	; 0x7d66 <bin2num+0x58>
    7d6e:	41 70       	andi	r20, 0x01	; 1
    7d70:	55 27       	eor	r21, r21
    7d72:	dc 01       	movw	r26, r24
    7d74:	e0 e0       	ldi	r30, 0x00	; 0
    7d76:	f0 e0       	ldi	r31, 0x00	; 0
    7d78:	ec 17       	cp	r30, r28
    7d7a:	fd 07       	cpc	r31, r29
    7d7c:	ec f4       	brge	.+58     	; 0x7db8 <bin2num+0xaa>
    7d7e:	ea 15       	cp	r30, r10
    7d80:	fb 05       	cpc	r31, r11
    7d82:	4c f0       	brlt	.+18     	; 0x7d96 <bin2num+0x88>
    7d84:	dc 01       	movw	r26, r24
    7d86:	ae 0f       	add	r26, r30
    7d88:	bf 1f       	adc	r27, r31
    7d8a:	1c 92       	st	X, r1
    7d8c:	41 e0       	ldi	r20, 0x01	; 1
    7d8e:	e4 1a       	sub	r14, r20
    7d90:	f1 08       	sbc	r15, r1
    7d92:	ef 01       	movw	r28, r30
    7d94:	d8 cf       	rjmp	.-80     	; 0x7d46 <bin2num+0x38>
    7d96:	9c 90       	ld	r9, X
    7d98:	99 0c       	add	r9, r9
    7d9a:	94 2a       	or	r9, r20
    7d9c:	49 2d       	mov	r20, r9
    7d9e:	50 e0       	ldi	r21, 0x00	; 0
    7da0:	42 17       	cp	r20, r18
    7da2:	53 07       	cpc	r21, r19
    7da4:	24 f0       	brlt	.+8      	; 0x7dae <bin2num+0xa0>
    7da6:	92 1a       	sub	r9, r18
    7da8:	41 e0       	ldi	r20, 0x01	; 1
    7daa:	50 e0       	ldi	r21, 0x00	; 0
    7dac:	02 c0       	rjmp	.+4      	; 0x7db2 <bin2num+0xa4>
    7dae:	40 e0       	ldi	r20, 0x00	; 0
    7db0:	50 e0       	ldi	r21, 0x00	; 0
    7db2:	9d 92       	st	X+, r9
    7db4:	31 96       	adiw	r30, 0x01	; 1
    7db6:	e0 cf       	rjmp	.-64     	; 0x7d78 <bin2num+0x6a>
    7db8:	41 15       	cp	r20, r1
    7dba:	51 05       	cpc	r21, r1
    7dbc:	01 f7       	brne	.-64     	; 0x7d7e <bin2num+0x70>
    7dbe:	e2 cf       	rjmp	.-60     	; 0x7d84 <bin2num+0x76>
    7dc0:	fc 01       	movw	r30, r24
    7dc2:	9f 01       	movw	r18, r30
    7dc4:	28 1b       	sub	r18, r24
    7dc6:	39 0b       	sbc	r19, r25
    7dc8:	2c 17       	cp	r18, r28
    7dca:	3d 07       	cpc	r19, r29
    7dcc:	4c f4       	brge	.+18     	; 0x7de0 <bin2num+0xd2>
    7dce:	20 81       	ld	r18, Z
    7dd0:	2a 30       	cpi	r18, 0x0A	; 10
    7dd2:	10 f4       	brcc	.+4      	; 0x7dd8 <bin2num+0xca>
    7dd4:	20 5d       	subi	r18, 0xD0	; 208
    7dd6:	01 c0       	rjmp	.+2      	; 0x7dda <bin2num+0xcc>
    7dd8:	29 5a       	subi	r18, 0xA9	; 169
    7dda:	20 83       	st	Z, r18
    7ddc:	31 96       	adiw	r30, 0x01	; 1
    7dde:	f1 cf       	rjmp	.-30     	; 0x7dc2 <bin2num+0xb4>
    7de0:	9e 01       	movw	r18, r28
    7de2:	d7 ff       	sbrs	r29, 7
    7de4:	02 c0       	rjmp	.+4      	; 0x7dea <bin2num+0xdc>
    7de6:	20 e0       	ldi	r18, 0x00	; 0
    7de8:	30 e0       	ldi	r19, 0x00	; 0
    7dea:	c1 14       	cp	r12, r1
    7dec:	d1 04       	cpc	r13, r1
    7dee:	61 f0       	breq	.+24     	; 0x7e08 <bin2num+0xfa>
    7df0:	61 50       	subi	r22, 0x01	; 1
    7df2:	71 09       	sbc	r23, r1
    7df4:	26 17       	cp	r18, r22
    7df6:	37 07       	cpc	r19, r23
    7df8:	3c f4       	brge	.+14     	; 0x7e08 <bin2num+0xfa>
    7dfa:	fc 01       	movw	r30, r24
    7dfc:	e2 0f       	add	r30, r18
    7dfe:	f3 1f       	adc	r31, r19
    7e00:	c0 82       	st	Z, r12
    7e02:	21 96       	adiw	r28, 0x01	; 1
    7e04:	2f 5f       	subi	r18, 0xFF	; 255
    7e06:	3f 4f       	sbci	r19, 0xFF	; 255
    7e08:	fc 01       	movw	r30, r24
    7e0a:	e2 0f       	add	r30, r18
    7e0c:	f3 1f       	adc	r31, r19
    7e0e:	10 82       	st	Z, r1
    7e10:	0e 94 24 32 	call	0x6448	; 0x6448 <reverse>
    7e14:	ce 01       	movw	r24, r28
    7e16:	cd b7       	in	r28, 0x3d	; 61
    7e18:	de b7       	in	r29, 0x3e	; 62
    7e1a:	eb e0       	ldi	r30, 0x0B	; 11
    7e1c:	0c 94 3e eb 	jmp	0x1d67c	; 0x1d67c <__epilogue_restores__+0xe>

00007e20 <pch_init>:
    7e20:	ed e7       	ldi	r30, 0x7D	; 125
    7e22:	fa e1       	ldi	r31, 0x1A	; 26
    7e24:	91 83       	std	Z+1, r25	; 0x01
    7e26:	80 83       	st	Z, r24
    7e28:	13 82       	std	Z+3, r1	; 0x03
    7e2a:	12 82       	std	Z+2, r1	; 0x02
    7e2c:	61 50       	subi	r22, 0x01	; 1
    7e2e:	71 09       	sbc	r23, r1
    7e30:	75 83       	std	Z+5, r23	; 0x05
    7e32:	64 83       	std	Z+4, r22	; 0x04
    7e34:	fc 01       	movw	r30, r24
    7e36:	10 82       	st	Z, r1
    7e38:	08 95       	ret

00007e3a <pch>:
    7e3a:	20 91 7f 1a 	lds	r18, 0x1A7F	; 0x801a7f <_pch+0x2>
    7e3e:	30 91 80 1a 	lds	r19, 0x1A80	; 0x801a80 <_pch+0x3>
    7e42:	60 91 81 1a 	lds	r22, 0x1A81	; 0x801a81 <_pch+0x4>
    7e46:	70 91 82 1a 	lds	r23, 0x1A82	; 0x801a82 <_pch+0x5>
    7e4a:	40 91 7d 1a 	lds	r20, 0x1A7D	; 0x801a7d <_pch>
    7e4e:	50 91 7e 1a 	lds	r21, 0x1A7E	; 0x801a7e <_pch+0x1>
    7e52:	26 17       	cp	r18, r22
    7e54:	37 07       	cpc	r19, r23
    7e56:	64 f4       	brge	.+24     	; 0x7e70 <pch+0x36>
    7e58:	b9 01       	movw	r22, r18
    7e5a:	6f 5f       	subi	r22, 0xFF	; 255
    7e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e5e:	70 93 80 1a 	sts	0x1A80, r23	; 0x801a80 <_pch+0x3>
    7e62:	60 93 7f 1a 	sts	0x1A7F, r22	; 0x801a7f <_pch+0x2>
    7e66:	fa 01       	movw	r30, r20
    7e68:	e2 0f       	add	r30, r18
    7e6a:	f3 1f       	adc	r31, r19
    7e6c:	80 83       	st	Z, r24
    7e6e:	04 c0       	rjmp	.+8      	; 0x7e78 <pch+0x3e>
    7e70:	fa 01       	movw	r30, r20
    7e72:	e2 0f       	add	r30, r18
    7e74:	f3 1f       	adc	r31, r19
    7e76:	10 82       	st	Z, r1
    7e78:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <_pch+0x2>
    7e7c:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <_pch+0x3>
    7e80:	08 95       	ret

00007e82 <p_ntoa>:
    7e82:	af 92       	push	r10
    7e84:	cf 92       	push	r12
    7e86:	df 92       	push	r13
    7e88:	ef 92       	push	r14
    7e8a:	ff 92       	push	r15
    7e8c:	0f 93       	push	r16
    7e8e:	1f 93       	push	r17
    7e90:	cf 93       	push	r28
    7e92:	df 93       	push	r29
    7e94:	dc 01       	movw	r26, r24
    7e96:	eb 01       	movw	r28, r22
    7e98:	fa 01       	movw	r30, r20
    7e9a:	b9 01       	movw	r22, r18
    7e9c:	98 01       	movw	r18, r16
    7e9e:	a6 01       	movw	r20, r12
    7ea0:	9a 2d       	mov	r25, r10
    7ea2:	a5 fa       	bst	r10, 5
    7ea4:	cc 24       	eor	r12, r12
    7ea6:	c0 f8       	bld	r12, 0
    7ea8:	a6 fc       	sbrc	r10, 6
    7eaa:	07 c0       	rjmp	.+14     	; 0x7eba <p_ntoa+0x38>
    7eac:	a2 fc       	sbrc	r10, 2
    7eae:	08 c0       	rjmp	.+16     	; 0x7ec0 <p_ntoa+0x3e>
    7eb0:	a4 fe       	sbrs	r10, 4
    7eb2:	09 c0       	rjmp	.+18     	; 0x7ec6 <p_ntoa+0x44>
    7eb4:	00 e2       	ldi	r16, 0x20	; 32
    7eb6:	10 e0       	ldi	r17, 0x00	; 0
    7eb8:	08 c0       	rjmp	.+16     	; 0x7eca <p_ntoa+0x48>
    7eba:	0d e2       	ldi	r16, 0x2D	; 45
    7ebc:	10 e0       	ldi	r17, 0x00	; 0
    7ebe:	05 c0       	rjmp	.+10     	; 0x7eca <p_ntoa+0x48>
    7ec0:	0b e2       	ldi	r16, 0x2B	; 43
    7ec2:	10 e0       	ldi	r17, 0x00	; 0
    7ec4:	02 c0       	rjmp	.+4      	; 0x7eca <p_ntoa+0x48>
    7ec6:	00 e0       	ldi	r16, 0x00	; 0
    7ec8:	10 e0       	ldi	r17, 0x00	; 0
    7eca:	95 ff       	sbrs	r25, 5
    7ecc:	04 c0       	rjmp	.+8      	; 0x7ed6 <p_ntoa+0x54>
    7ece:	89 2f       	mov	r24, r25
    7ed0:	8a 70       	andi	r24, 0x0A	; 10
    7ed2:	09 f0       	breq	.+2      	; 0x7ed6 <p_ntoa+0x54>
    7ed4:	c1 2c       	mov	r12, r1
    7ed6:	c0 fa       	bst	r12, 0
    7ed8:	95 f9       	bld	r25, 5
    7eda:	89 2f       	mov	r24, r25
    7edc:	82 70       	andi	r24, 0x02	; 2
    7ede:	c8 2e       	mov	r12, r24
    7ee0:	91 fd       	sbrc	r25, 1
    7ee2:	02 c0       	rjmp	.+4      	; 0x7ee8 <p_ntoa+0x66>
    7ee4:	40 e0       	ldi	r20, 0x00	; 0
    7ee6:	50 e0       	ldi	r21, 0x00	; 0
    7ee8:	89 2f       	mov	r24, r25
    7eea:	83 70       	andi	r24, 0x03	; 3
    7eec:	11 f4       	brne	.+4      	; 0x7ef2 <p_ntoa+0x70>
    7eee:	41 e0       	ldi	r20, 0x01	; 1
    7ef0:	50 e0       	ldi	r21, 0x00	; 0
    7ef2:	90 ff       	sbrs	r25, 0
    7ef4:	0c c0       	rjmp	.+24     	; 0x7f0e <p_ntoa+0x8c>
    7ef6:	95 fd       	sbrc	r25, 5
    7ef8:	05 c0       	rjmp	.+10     	; 0x7f04 <p_ntoa+0x82>
    7efa:	c1 10       	cpse	r12, r1
    7efc:	08 c0       	rjmp	.+16     	; 0x7f0e <p_ntoa+0x8c>
    7efe:	41 e0       	ldi	r20, 0x01	; 1
    7f00:	50 e0       	ldi	r21, 0x00	; 0
    7f02:	05 c0       	rjmp	.+10     	; 0x7f0e <p_ntoa+0x8c>
    7f04:	94 75       	andi	r25, 0x54	; 84
    7f06:	a7 01       	movw	r20, r14
    7f08:	11 f0       	breq	.+4      	; 0x7f0e <p_ntoa+0x8c>
    7f0a:	41 50       	subi	r20, 0x01	; 1
    7f0c:	51 09       	sbc	r21, r1
    7f0e:	68 01       	movw	r12, r16
    7f10:	7e 01       	movw	r14, r28
    7f12:	8d 01       	movw	r16, r26
    7f14:	cf 01       	movw	r24, r30
    7f16:	fb de       	rcall	.-522    	; 0x7d0e <bin2num>
    7f18:	df 91       	pop	r29
    7f1a:	cf 91       	pop	r28
    7f1c:	1f 91       	pop	r17
    7f1e:	0f 91       	pop	r16
    7f20:	ff 90       	pop	r15
    7f22:	ef 90       	pop	r14
    7f24:	df 90       	pop	r13
    7f26:	cf 90       	pop	r12
    7f28:	af 90       	pop	r10
    7f2a:	08 95       	ret

00007f2c <p_ftoa>:
    7f2c:	2f 92       	push	r2
    7f2e:	3f 92       	push	r3
    7f30:	4f 92       	push	r4
    7f32:	5f 92       	push	r5
    7f34:	6f 92       	push	r6
    7f36:	7f 92       	push	r7
    7f38:	8f 92       	push	r8
    7f3a:	9f 92       	push	r9
    7f3c:	af 92       	push	r10
    7f3e:	bf 92       	push	r11
    7f40:	cf 92       	push	r12
    7f42:	ef 92       	push	r14
    7f44:	ff 92       	push	r15
    7f46:	0f 93       	push	r16
    7f48:	1f 93       	push	r17
    7f4a:	cf 93       	push	r28
    7f4c:	df 93       	push	r29
    7f4e:	4b 01       	movw	r8, r22
    7f50:	5c 01       	movw	r10, r24
    7f52:	1a 01       	movw	r2, r20
    7f54:	38 01       	movw	r6, r16
    7f56:	c6 fa       	bst	r12, 6
    7f58:	cc 27       	eor	r28, r28
    7f5a:	c0 f9       	bld	r28, 0
    7f5c:	b9 01       	movw	r22, r18
    7f5e:	ca 01       	movw	r24, r20
    7f60:	5f df       	rcall	.-322    	; 0x7e20 <pch_init>
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	30 e0       	ldi	r19, 0x00	; 0
    7f66:	a9 01       	movw	r20, r18
    7f68:	c5 01       	movw	r24, r10
    7f6a:	b4 01       	movw	r22, r8
    7f6c:	0e 94 d9 eb 	call	0x1d7b2	; 0x1d7b2 <__cmpsf2>
    7f70:	87 ff       	sbrs	r24, 7
    7f72:	05 c0       	rjmp	.+10     	; 0x7f7e <p_ftoa+0x52>
    7f74:	b7 fa       	bst	r11, 7
    7f76:	b0 94       	com	r11
    7f78:	b7 f8       	bld	r11, 7
    7f7a:	b0 94       	com	r11
    7f7c:	c1 e0       	ldi	r28, 0x01	; 1
    7f7e:	c0 fb       	bst	r28, 0
    7f80:	c6 f8       	bld	r12, 6
    7f82:	c6 fe       	sbrs	r12, 6
    7f84:	02 c0       	rjmp	.+4      	; 0x7f8a <p_ftoa+0x5e>
    7f86:	8d e2       	ldi	r24, 0x2D	; 45
    7f88:	07 c0       	rjmp	.+14     	; 0x7f98 <p_ftoa+0x6c>
    7f8a:	c2 fe       	sbrs	r12, 2
    7f8c:	02 c0       	rjmp	.+4      	; 0x7f92 <p_ftoa+0x66>
    7f8e:	8b e2       	ldi	r24, 0x2B	; 43
    7f90:	03 c0       	rjmp	.+6      	; 0x7f98 <p_ftoa+0x6c>
    7f92:	c4 fe       	sbrs	r12, 4
    7f94:	02 c0       	rjmp	.+4      	; 0x7f9a <p_ftoa+0x6e>
    7f96:	80 e2       	ldi	r24, 0x20	; 32
    7f98:	50 df       	rcall	.-352    	; 0x7e3a <pch>
    7f9a:	e7 01       	movw	r28, r14
    7f9c:	f7 fe       	sbrs	r15, 7
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <p_ftoa+0x78>
    7fa0:	c0 e0       	ldi	r28, 0x00	; 0
    7fa2:	d0 e0       	ldi	r29, 0x00	; 0
    7fa4:	20 e0       	ldi	r18, 0x00	; 0
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	a9 01       	movw	r20, r18
    7faa:	c5 01       	movw	r24, r10
    7fac:	b4 01       	movw	r22, r8
    7fae:	0e 94 d9 eb 	call	0x1d7b2	; 0x1d7b2 <__cmpsf2>
    7fb2:	88 23       	and	r24, r24
    7fb4:	d1 f1       	breq	.+116    	; 0x802a <p_ftoa+0xfe>
    7fb6:	c1 fe       	sbrs	r12, 1
    7fb8:	11 c0       	rjmp	.+34     	; 0x7fdc <p_ftoa+0xb0>
    7fba:	8e 01       	movw	r16, r28
    7fbc:	60 e0       	ldi	r22, 0x00	; 0
    7fbe:	70 e0       	ldi	r23, 0x00	; 0
    7fc0:	80 e0       	ldi	r24, 0x00	; 0
    7fc2:	9f e3       	ldi	r25, 0x3F	; 63
    7fc4:	01 15       	cp	r16, r1
    7fc6:	11 05       	cpc	r17, r1
    7fc8:	69 f0       	breq	.+26     	; 0x7fe4 <p_ftoa+0xb8>
    7fca:	20 e0       	ldi	r18, 0x00	; 0
    7fcc:	30 e0       	ldi	r19, 0x00	; 0
    7fce:	40 e2       	ldi	r20, 0x20	; 32
    7fd0:	51 e4       	ldi	r21, 0x41	; 65
    7fd2:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    7fd6:	01 50       	subi	r16, 0x01	; 1
    7fd8:	11 09       	sbc	r17, r1
    7fda:	f4 cf       	rjmp	.-24     	; 0x7fc4 <p_ftoa+0x98>
    7fdc:	60 e0       	ldi	r22, 0x00	; 0
    7fde:	70 e0       	ldi	r23, 0x00	; 0
    7fe0:	80 e0       	ldi	r24, 0x00	; 0
    7fe2:	9f e3       	ldi	r25, 0x3F	; 63
    7fe4:	9b 01       	movw	r18, r22
    7fe6:	ac 01       	movw	r20, r24
    7fe8:	c5 01       	movw	r24, r10
    7fea:	b4 01       	movw	r22, r8
    7fec:	0e 94 75 eb 	call	0x1d6ea	; 0x1d6ea <__addsf3>
    7ff0:	4b 01       	movw	r8, r22
    7ff2:	5c 01       	movw	r10, r24
    7ff4:	ee 24       	eor	r14, r14
    7ff6:	e3 94       	inc	r14
    7ff8:	f1 2c       	mov	r15, r1
    7ffa:	20 e0       	ldi	r18, 0x00	; 0
    7ffc:	30 e0       	ldi	r19, 0x00	; 0
    7ffe:	40 e2       	ldi	r20, 0x20	; 32
    8000:	51 e4       	ldi	r21, 0x41	; 65
    8002:	c5 01       	movw	r24, r10
    8004:	b4 01       	movw	r22, r8
    8006:	0e 94 28 ed 	call	0x1da50	; 0x1da50 <__gesf2>
    800a:	87 fd       	sbrc	r24, 7
    800c:	11 c0       	rjmp	.+34     	; 0x8030 <p_ftoa+0x104>
    800e:	2f ef       	ldi	r18, 0xFF	; 255
    8010:	e2 1a       	sub	r14, r18
    8012:	f2 0a       	sbc	r15, r18
    8014:	20 e0       	ldi	r18, 0x00	; 0
    8016:	30 e0       	ldi	r19, 0x00	; 0
    8018:	40 e2       	ldi	r20, 0x20	; 32
    801a:	51 e4       	ldi	r21, 0x41	; 65
    801c:	c5 01       	movw	r24, r10
    801e:	b4 01       	movw	r22, r8
    8020:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    8024:	4b 01       	movw	r8, r22
    8026:	5c 01       	movw	r10, r24
    8028:	e8 cf       	rjmp	.-48     	; 0x7ffa <p_ftoa+0xce>
    802a:	ee 24       	eor	r14, r14
    802c:	e3 94       	inc	r14
    802e:	f1 2c       	mov	r15, r1
    8030:	8c 2d       	mov	r24, r12
    8032:	88 72       	andi	r24, 0x28	; 40
    8034:	80 32       	cpi	r24, 0x20	; 32
    8036:	b9 f4       	brne	.+46     	; 0x8066 <p_ftoa+0x13a>
    8038:	83 01       	movw	r16, r6
    803a:	0e 19       	sub	r16, r14
    803c:	1f 09       	sbc	r17, r15
    803e:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <_pch+0x2>
    8042:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <_pch+0x3>
    8046:	08 1b       	sub	r16, r24
    8048:	19 0b       	sbc	r17, r25
    804a:	c1 fe       	sbrs	r12, 1
    804c:	06 c0       	rjmp	.+12     	; 0x805a <p_ftoa+0x12e>
    804e:	20 97       	sbiw	r28, 0x00	; 0
    8050:	21 f0       	breq	.+8      	; 0x805a <p_ftoa+0x12e>
    8052:	0c 1b       	sub	r16, r28
    8054:	1d 0b       	sbc	r17, r29
    8056:	01 50       	subi	r16, 0x01	; 1
    8058:	11 09       	sbc	r17, r1
    805a:	10 16       	cp	r1, r16
    805c:	11 06       	cpc	r1, r17
    805e:	1c f4       	brge	.+6      	; 0x8066 <p_ftoa+0x13a>
    8060:	80 e3       	ldi	r24, 0x30	; 48
    8062:	eb de       	rcall	.-554    	; 0x7e3a <pch>
    8064:	f8 cf       	rjmp	.-16     	; 0x8056 <p_ftoa+0x12a>
    8066:	c5 01       	movw	r24, r10
    8068:	b4 01       	movw	r22, r8
    806a:	0e 94 45 ec 	call	0x1d88a	; 0x1d88a <__fixsfsi>
    806e:	2b 01       	movw	r4, r22
    8070:	3c 01       	movw	r6, r24
    8072:	80 e3       	ldi	r24, 0x30	; 48
    8074:	84 0d       	add	r24, r4
    8076:	e1 de       	rcall	.-574    	; 0x7e3a <pch>
    8078:	b2 01       	movw	r22, r4
    807a:	55 0c       	add	r5, r5
    807c:	88 0b       	sbc	r24, r24
    807e:	99 0b       	sbc	r25, r25
    8080:	0e 94 78 ec 	call	0x1d8f0	; 0x1d8f0 <__floatsisf>
    8084:	9b 01       	movw	r18, r22
    8086:	ac 01       	movw	r20, r24
    8088:	c5 01       	movw	r24, r10
    808a:	b4 01       	movw	r22, r8
    808c:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    8090:	21 e0       	ldi	r18, 0x01	; 1
    8092:	e2 1a       	sub	r14, r18
    8094:	f1 08       	sbc	r15, r1
    8096:	20 e0       	ldi	r18, 0x00	; 0
    8098:	30 e0       	ldi	r19, 0x00	; 0
    809a:	40 e2       	ldi	r20, 0x20	; 32
    809c:	51 e4       	ldi	r21, 0x41	; 65
    809e:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    80a2:	4b 01       	movw	r8, r22
    80a4:	5c 01       	movw	r10, r24
    80a6:	e1 14       	cp	r14, r1
    80a8:	f1 04       	cpc	r15, r1
    80aa:	e9 f6       	brne	.-70     	; 0x8066 <p_ftoa+0x13a>
    80ac:	c1 fc       	sbrc	r12, 1
    80ae:	1c c0       	rjmp	.+56     	; 0x80e8 <p_ftoa+0x1bc>
    80b0:	80 e0       	ldi	r24, 0x00	; 0
    80b2:	c3 de       	rcall	.-634    	; 0x7e3a <pch>
    80b4:	f1 01       	movw	r30, r2
    80b6:	01 90       	ld	r0, Z+
    80b8:	00 20       	and	r0, r0
    80ba:	e9 f7       	brne	.-6      	; 0x80b6 <p_ftoa+0x18a>
    80bc:	31 97       	sbiw	r30, 0x01	; 1
    80be:	cf 01       	movw	r24, r30
    80c0:	82 19       	sub	r24, r2
    80c2:	93 09       	sbc	r25, r3
    80c4:	df 91       	pop	r29
    80c6:	cf 91       	pop	r28
    80c8:	1f 91       	pop	r17
    80ca:	0f 91       	pop	r16
    80cc:	ff 90       	pop	r15
    80ce:	ef 90       	pop	r14
    80d0:	cf 90       	pop	r12
    80d2:	bf 90       	pop	r11
    80d4:	af 90       	pop	r10
    80d6:	9f 90       	pop	r9
    80d8:	8f 90       	pop	r8
    80da:	7f 90       	pop	r7
    80dc:	6f 90       	pop	r6
    80de:	5f 90       	pop	r5
    80e0:	4f 90       	pop	r4
    80e2:	3f 90       	pop	r3
    80e4:	2f 90       	pop	r2
    80e6:	08 95       	ret
    80e8:	20 97       	sbiw	r28, 0x00	; 0
    80ea:	11 f3       	breq	.-60     	; 0x80b0 <p_ftoa+0x184>
    80ec:	8e e2       	ldi	r24, 0x2E	; 46
    80ee:	a5 de       	rcall	.-694    	; 0x7e3a <pch>
    80f0:	c5 01       	movw	r24, r10
    80f2:	b4 01       	movw	r22, r8
    80f4:	0e 94 45 ec 	call	0x1d88a	; 0x1d88a <__fixsfsi>
    80f8:	2b 01       	movw	r4, r22
    80fa:	3c 01       	movw	r6, r24
    80fc:	07 2e       	mov	r0, r23
    80fe:	00 0c       	add	r0, r0
    8100:	88 0b       	sbc	r24, r24
    8102:	99 0b       	sbc	r25, r25
    8104:	0e 94 78 ec 	call	0x1d8f0	; 0x1d8f0 <__floatsisf>
    8108:	9b 01       	movw	r18, r22
    810a:	ac 01       	movw	r20, r24
    810c:	c5 01       	movw	r24, r10
    810e:	b4 01       	movw	r22, r8
    8110:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    8114:	4b 01       	movw	r8, r22
    8116:	5c 01       	movw	r10, r24
    8118:	80 e3       	ldi	r24, 0x30	; 48
    811a:	84 0d       	add	r24, r4
    811c:	8e de       	rcall	.-740    	; 0x7e3a <pch>
    811e:	21 97       	sbiw	r28, 0x01	; 1
    8120:	20 e0       	ldi	r18, 0x00	; 0
    8122:	30 e0       	ldi	r19, 0x00	; 0
    8124:	40 e2       	ldi	r20, 0x20	; 32
    8126:	51 e4       	ldi	r21, 0x41	; 65
    8128:	c5 01       	movw	r24, r10
    812a:	b4 01       	movw	r22, r8
    812c:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    8130:	4b 01       	movw	r8, r22
    8132:	5c 01       	movw	r10, r24
    8134:	20 97       	sbiw	r28, 0x00	; 0
    8136:	e1 f6       	brne	.-72     	; 0x80f0 <p_ftoa+0x1c4>
    8138:	bb cf       	rjmp	.-138    	; 0x80b0 <p_ftoa+0x184>

0000813a <p_etoa>:
    813a:	ad e0       	ldi	r26, 0x0D	; 13
    813c:	b0 e0       	ldi	r27, 0x00	; 0
    813e:	e3 ea       	ldi	r30, 0xA3	; 163
    8140:	f0 e4       	ldi	r31, 0x40	; 64
    8142:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    8146:	4b 01       	movw	r8, r22
    8148:	5c 01       	movw	r10, r24
    814a:	5b 87       	std	Y+11, r21	; 0x0b
    814c:	4a 87       	std	Y+10, r20	; 0x0a
    814e:	1d 87       	std	Y+13, r17	; 0x0d
    8150:	0c 87       	std	Y+12, r16	; 0x0c
    8152:	3c 2c       	mov	r3, r12
    8154:	c6 fa       	bst	r12, 6
    8156:	11 27       	eor	r17, r17
    8158:	10 f9       	bld	r17, 0
    815a:	b9 01       	movw	r22, r18
    815c:	ca 01       	movw	r24, r20
    815e:	60 de       	rcall	.-832    	; 0x7e20 <pch_init>
    8160:	20 e0       	ldi	r18, 0x00	; 0
    8162:	30 e0       	ldi	r19, 0x00	; 0
    8164:	a9 01       	movw	r20, r18
    8166:	c5 01       	movw	r24, r10
    8168:	b4 01       	movw	r22, r8
    816a:	0e 94 d9 eb 	call	0x1d7b2	; 0x1d7b2 <__cmpsf2>
    816e:	87 ff       	sbrs	r24, 7
    8170:	05 c0       	rjmp	.+10     	; 0x817c <p_etoa+0x42>
    8172:	b7 fa       	bst	r11, 7
    8174:	b0 94       	com	r11
    8176:	b7 f8       	bld	r11, 7
    8178:	b0 94       	com	r11
    817a:	11 e0       	ldi	r17, 0x01	; 1
    817c:	10 fb       	bst	r17, 0
    817e:	36 f8       	bld	r3, 6
    8180:	36 fe       	sbrs	r3, 6
    8182:	02 c0       	rjmp	.+4      	; 0x8188 <p_etoa+0x4e>
    8184:	8d e2       	ldi	r24, 0x2D	; 45
    8186:	07 c0       	rjmp	.+14     	; 0x8196 <p_etoa+0x5c>
    8188:	32 fe       	sbrs	r3, 2
    818a:	02 c0       	rjmp	.+4      	; 0x8190 <p_etoa+0x56>
    818c:	8b e2       	ldi	r24, 0x2B	; 43
    818e:	03 c0       	rjmp	.+6      	; 0x8196 <p_etoa+0x5c>
    8190:	34 fe       	sbrs	r3, 4
    8192:	02 c0       	rjmp	.+4      	; 0x8198 <p_etoa+0x5e>
    8194:	80 e2       	ldi	r24, 0x20	; 32
    8196:	51 de       	rcall	.-862    	; 0x7e3a <pch>
    8198:	37 01       	movw	r6, r14
    819a:	f7 fe       	sbrs	r15, 7
    819c:	02 c0       	rjmp	.+4      	; 0x81a2 <p_etoa+0x68>
    819e:	61 2c       	mov	r6, r1
    81a0:	71 2c       	mov	r7, r1
    81a2:	19 86       	std	Y+9, r1	; 0x09
    81a4:	18 86       	std	Y+8, r1	; 0x08
    81a6:	20 e0       	ldi	r18, 0x00	; 0
    81a8:	30 e0       	ldi	r19, 0x00	; 0
    81aa:	a9 01       	movw	r20, r18
    81ac:	c5 01       	movw	r24, r10
    81ae:	b4 01       	movw	r22, r8
    81b0:	0e 94 d9 eb 	call	0x1d7b2	; 0x1d7b2 <__cmpsf2>
    81b4:	23 2d       	mov	r18, r3
    81b6:	22 70       	andi	r18, 0x02	; 2
    81b8:	22 2e       	mov	r2, r18
    81ba:	88 23       	and	r24, r24
    81bc:	09 f4       	brne	.+2      	; 0x81c0 <p_etoa+0x86>
    81be:	70 c0       	rjmp	.+224    	; 0x82a0 <p_etoa+0x166>
    81c0:	22 23       	and	r18, r18
    81c2:	b1 f0       	breq	.+44     	; 0x81f0 <p_etoa+0xb6>
    81c4:	83 01       	movw	r16, r6
    81c6:	c1 2c       	mov	r12, r1
    81c8:	d1 2c       	mov	r13, r1
    81ca:	e1 2c       	mov	r14, r1
    81cc:	2f e3       	ldi	r18, 0x3F	; 63
    81ce:	f2 2e       	mov	r15, r18
    81d0:	01 15       	cp	r16, r1
    81d2:	11 05       	cpc	r17, r1
    81d4:	91 f0       	breq	.+36     	; 0x81fa <p_etoa+0xc0>
    81d6:	20 e0       	ldi	r18, 0x00	; 0
    81d8:	30 e0       	ldi	r19, 0x00	; 0
    81da:	40 e2       	ldi	r20, 0x20	; 32
    81dc:	51 e4       	ldi	r21, 0x41	; 65
    81de:	c7 01       	movw	r24, r14
    81e0:	b6 01       	movw	r22, r12
    81e2:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    81e6:	6b 01       	movw	r12, r22
    81e8:	7c 01       	movw	r14, r24
    81ea:	01 50       	subi	r16, 0x01	; 1
    81ec:	11 09       	sbc	r17, r1
    81ee:	f0 cf       	rjmp	.-32     	; 0x81d0 <p_etoa+0x96>
    81f0:	c1 2c       	mov	r12, r1
    81f2:	d1 2c       	mov	r13, r1
    81f4:	e1 2c       	mov	r14, r1
    81f6:	9f e3       	ldi	r25, 0x3F	; 63
    81f8:	f9 2e       	mov	r15, r25
    81fa:	41 2c       	mov	r4, r1
    81fc:	51 2c       	mov	r5, r1
    81fe:	82 01       	movw	r16, r4
    8200:	01 50       	subi	r16, 0x01	; 1
    8202:	11 09       	sbc	r17, r1
    8204:	20 e0       	ldi	r18, 0x00	; 0
    8206:	30 e0       	ldi	r19, 0x00	; 0
    8208:	40 e8       	ldi	r20, 0x80	; 128
    820a:	5f e3       	ldi	r21, 0x3F	; 63
    820c:	c5 01       	movw	r24, r10
    820e:	b4 01       	movw	r22, r8
    8210:	0e 94 d9 eb 	call	0x1d7b2	; 0x1d7b2 <__cmpsf2>
    8214:	87 ff       	sbrs	r24, 7
    8216:	0c c0       	rjmp	.+24     	; 0x8230 <p_etoa+0xf6>
    8218:	20 e0       	ldi	r18, 0x00	; 0
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	40 e2       	ldi	r20, 0x20	; 32
    821e:	51 e4       	ldi	r21, 0x41	; 65
    8220:	c5 01       	movw	r24, r10
    8222:	b4 01       	movw	r22, r8
    8224:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    8228:	4b 01       	movw	r8, r22
    822a:	5c 01       	movw	r10, r24
    822c:	28 01       	movw	r4, r16
    822e:	e7 cf       	rjmp	.-50     	; 0x81fe <p_etoa+0xc4>
    8230:	82 01       	movw	r16, r4
    8232:	0f 5f       	subi	r16, 0xFF	; 255
    8234:	1f 4f       	sbci	r17, 0xFF	; 255
    8236:	20 e0       	ldi	r18, 0x00	; 0
    8238:	30 e0       	ldi	r19, 0x00	; 0
    823a:	40 e2       	ldi	r20, 0x20	; 32
    823c:	51 e4       	ldi	r21, 0x41	; 65
    823e:	c5 01       	movw	r24, r10
    8240:	b4 01       	movw	r22, r8
    8242:	0e 94 28 ed 	call	0x1da50	; 0x1da50 <__gesf2>
    8246:	87 fd       	sbrc	r24, 7
    8248:	0c c0       	rjmp	.+24     	; 0x8262 <p_etoa+0x128>
    824a:	20 e0       	ldi	r18, 0x00	; 0
    824c:	30 e0       	ldi	r19, 0x00	; 0
    824e:	40 e2       	ldi	r20, 0x20	; 32
    8250:	51 e4       	ldi	r21, 0x41	; 65
    8252:	c5 01       	movw	r24, r10
    8254:	b4 01       	movw	r22, r8
    8256:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    825a:	4b 01       	movw	r8, r22
    825c:	5c 01       	movw	r10, r24
    825e:	28 01       	movw	r4, r16
    8260:	e7 cf       	rjmp	.-50     	; 0x8230 <p_etoa+0xf6>
    8262:	a7 01       	movw	r20, r14
    8264:	96 01       	movw	r18, r12
    8266:	c5 01       	movw	r24, r10
    8268:	b4 01       	movw	r22, r8
    826a:	0e 94 75 eb 	call	0x1d6ea	; 0x1d6ea <__addsf3>
    826e:	4b 01       	movw	r8, r22
    8270:	5c 01       	movw	r10, r24
    8272:	82 01       	movw	r16, r4
    8274:	3f ef       	ldi	r19, 0xFF	; 255
    8276:	43 1a       	sub	r4, r19
    8278:	53 0a       	sbc	r5, r19
    827a:	20 e0       	ldi	r18, 0x00	; 0
    827c:	30 e0       	ldi	r19, 0x00	; 0
    827e:	40 e2       	ldi	r20, 0x20	; 32
    8280:	51 e4       	ldi	r21, 0x41	; 65
    8282:	0e 94 28 ed 	call	0x1da50	; 0x1da50 <__gesf2>
    8286:	87 fd       	sbrc	r24, 7
    8288:	09 c0       	rjmp	.+18     	; 0x829c <p_etoa+0x162>
    828a:	20 e0       	ldi	r18, 0x00	; 0
    828c:	30 e0       	ldi	r19, 0x00	; 0
    828e:	40 e2       	ldi	r20, 0x20	; 32
    8290:	51 e4       	ldi	r21, 0x41	; 65
    8292:	c5 01       	movw	r24, r10
    8294:	b4 01       	movw	r22, r8
    8296:	0e 94 dd eb 	call	0x1d7ba	; 0x1d7ba <__divsf3>
    829a:	e9 cf       	rjmp	.-46     	; 0x826e <p_etoa+0x134>
    829c:	08 87       	std	Y+8, r16	; 0x08
    829e:	19 87       	std	Y+9, r17	; 0x09
    82a0:	85 e6       	ldi	r24, 0x65	; 101
    82a2:	89 83       	std	Y+1, r24	; 0x01
    82a4:	88 85       	ldd	r24, Y+8	; 0x08
    82a6:	99 85       	ldd	r25, Y+9	; 0x09
    82a8:	97 ff       	sbrs	r25, 7
    82aa:	08 c0       	rjmp	.+16     	; 0x82bc <p_etoa+0x182>
    82ac:	91 95       	neg	r25
    82ae:	81 95       	neg	r24
    82b0:	91 09       	sbc	r25, r1
    82b2:	99 87       	std	Y+9, r25	; 0x09
    82b4:	88 87       	std	Y+8, r24	; 0x08
    82b6:	8d e2       	ldi	r24, 0x2D	; 45
    82b8:	90 e0       	ldi	r25, 0x00	; 0
    82ba:	02 c0       	rjmp	.+4      	; 0x82c0 <p_etoa+0x186>
    82bc:	8b e2       	ldi	r24, 0x2B	; 43
    82be:	90 e0       	ldi	r25, 0x00	; 0
    82c0:	6c 01       	movw	r12, r24
    82c2:	82 e0       	ldi	r24, 0x02	; 2
    82c4:	e8 2e       	mov	r14, r24
    82c6:	f1 2c       	mov	r15, r1
    82c8:	8e 01       	movw	r16, r28
    82ca:	08 5f       	subi	r16, 0xF8	; 248
    82cc:	1f 4f       	sbci	r17, 0xFF	; 255
    82ce:	2a e0       	ldi	r18, 0x0A	; 10
    82d0:	30 e0       	ldi	r19, 0x00	; 0
    82d2:	42 e0       	ldi	r20, 0x02	; 2
    82d4:	50 e0       	ldi	r21, 0x00	; 0
    82d6:	65 e0       	ldi	r22, 0x05	; 5
    82d8:	70 e0       	ldi	r23, 0x00	; 0
    82da:	ce 01       	movw	r24, r28
    82dc:	02 96       	adiw	r24, 0x02	; 2
    82de:	17 dd       	rcall	.-1490   	; 0x7d0e <bin2num>
    82e0:	9c 01       	movw	r18, r24
    82e2:	93 2d       	mov	r25, r3
    82e4:	98 72       	andi	r25, 0x28	; 40
    82e6:	90 32       	cpi	r25, 0x20	; 32
    82e8:	61 f0       	breq	.+24     	; 0x8302 <p_etoa+0x1c8>
    82ea:	c5 01       	movw	r24, r10
    82ec:	b4 01       	movw	r22, r8
    82ee:	0e 94 45 ec 	call	0x1d88a	; 0x1d88a <__fixsfsi>
    82f2:	6b 01       	movw	r12, r22
    82f4:	7c 01       	movw	r14, r24
    82f6:	80 e3       	ldi	r24, 0x30	; 48
    82f8:	8c 0d       	add	r24, r12
    82fa:	9f dd       	rcall	.-1218   	; 0x7e3a <pch>
    82fc:	21 10       	cpse	r2, r1
    82fe:	20 c0       	rjmp	.+64     	; 0x8340 <p_etoa+0x206>
    8300:	5e c0       	rjmp	.+188    	; 0x83be <p_etoa+0x284>
    8302:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <_pch+0x2>
    8306:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <_pch+0x3>
    830a:	0c 85       	ldd	r16, Y+12	; 0x0c
    830c:	1d 85       	ldd	r17, Y+13	; 0x0d
    830e:	08 1b       	sub	r16, r24
    8310:	19 0b       	sbc	r17, r25
    8312:	22 20       	and	r2, r2
    8314:	41 f0       	breq	.+16     	; 0x8326 <p_etoa+0x1ec>
    8316:	61 14       	cp	r6, r1
    8318:	71 04       	cpc	r7, r1
    831a:	29 f0       	breq	.+10     	; 0x8326 <p_etoa+0x1ec>
    831c:	06 19       	sub	r16, r6
    831e:	17 09       	sbc	r17, r7
    8320:	06 50       	subi	r16, 0x06	; 6
    8322:	11 09       	sbc	r17, r1
    8324:	02 c0       	rjmp	.+4      	; 0x832a <p_etoa+0x1f0>
    8326:	05 50       	subi	r16, 0x05	; 5
    8328:	11 09       	sbc	r17, r1
    832a:	24 30       	cpi	r18, 0x04	; 4
    832c:	31 05       	cpc	r19, r1
    832e:	14 f0       	brlt	.+4      	; 0x8334 <p_etoa+0x1fa>
    8330:	01 50       	subi	r16, 0x01	; 1
    8332:	11 09       	sbc	r17, r1
    8334:	10 16       	cp	r1, r16
    8336:	11 06       	cpc	r1, r17
    8338:	c4 f6       	brge	.-80     	; 0x82ea <p_etoa+0x1b0>
    833a:	80 e3       	ldi	r24, 0x30	; 48
    833c:	7e dd       	rcall	.-1284   	; 0x7e3a <pch>
    833e:	f8 cf       	rjmp	.-16     	; 0x8330 <p_etoa+0x1f6>
    8340:	61 14       	cp	r6, r1
    8342:	71 04       	cpc	r7, r1
    8344:	09 f4       	brne	.+2      	; 0x8348 <p_etoa+0x20e>
    8346:	3b c0       	rjmp	.+118    	; 0x83be <p_etoa+0x284>
    8348:	b6 01       	movw	r22, r12
    834a:	dd 0c       	add	r13, r13
    834c:	88 0b       	sbc	r24, r24
    834e:	99 0b       	sbc	r25, r25
    8350:	0e 94 78 ec 	call	0x1d8f0	; 0x1d8f0 <__floatsisf>
    8354:	9b 01       	movw	r18, r22
    8356:	ac 01       	movw	r20, r24
    8358:	c5 01       	movw	r24, r10
    835a:	b4 01       	movw	r22, r8
    835c:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    8360:	20 e0       	ldi	r18, 0x00	; 0
    8362:	30 e0       	ldi	r19, 0x00	; 0
    8364:	40 e2       	ldi	r20, 0x20	; 32
    8366:	51 e4       	ldi	r21, 0x41	; 65
    8368:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    836c:	6b 01       	movw	r12, r22
    836e:	7c 01       	movw	r14, r24
    8370:	8e e2       	ldi	r24, 0x2E	; 46
    8372:	63 dd       	rcall	.-1338   	; 0x7e3a <pch>
    8374:	c7 01       	movw	r24, r14
    8376:	b6 01       	movw	r22, r12
    8378:	0e 94 45 ec 	call	0x1d88a	; 0x1d88a <__fixsfsi>
    837c:	4b 01       	movw	r8, r22
    837e:	5c 01       	movw	r10, r24
    8380:	07 2e       	mov	r0, r23
    8382:	00 0c       	add	r0, r0
    8384:	88 0b       	sbc	r24, r24
    8386:	99 0b       	sbc	r25, r25
    8388:	0e 94 78 ec 	call	0x1d8f0	; 0x1d8f0 <__floatsisf>
    838c:	9b 01       	movw	r18, r22
    838e:	ac 01       	movw	r20, r24
    8390:	c7 01       	movw	r24, r14
    8392:	b6 01       	movw	r22, r12
    8394:	0e 94 74 eb 	call	0x1d6e8	; 0x1d6e8 <__subsf3>
    8398:	6b 01       	movw	r12, r22
    839a:	7c 01       	movw	r14, r24
    839c:	80 e3       	ldi	r24, 0x30	; 48
    839e:	88 0d       	add	r24, r8
    83a0:	4c dd       	rcall	.-1384   	; 0x7e3a <pch>
    83a2:	20 e0       	ldi	r18, 0x00	; 0
    83a4:	30 e0       	ldi	r19, 0x00	; 0
    83a6:	40 e2       	ldi	r20, 0x20	; 32
    83a8:	51 e4       	ldi	r21, 0x41	; 65
    83aa:	c7 01       	movw	r24, r14
    83ac:	b6 01       	movw	r22, r12
    83ae:	0e 94 2c ed 	call	0x1da58	; 0x1da58 <__mulsf3>
    83b2:	6b 01       	movw	r12, r22
    83b4:	7c 01       	movw	r14, r24
    83b6:	81 e0       	ldi	r24, 0x01	; 1
    83b8:	68 1a       	sub	r6, r24
    83ba:	71 08       	sbc	r7, r1
    83bc:	d9 f6       	brne	.-74     	; 0x8374 <p_etoa+0x23a>
    83be:	8e 01       	movw	r16, r28
    83c0:	0f 5f       	subi	r16, 0xFF	; 255
    83c2:	1f 4f       	sbci	r17, 0xFF	; 255
    83c4:	f8 01       	movw	r30, r16
    83c6:	81 91       	ld	r24, Z+
    83c8:	8f 01       	movw	r16, r30
    83ca:	88 23       	and	r24, r24
    83cc:	11 f0       	breq	.+4      	; 0x83d2 <p_etoa+0x298>
    83ce:	35 dd       	rcall	.-1430   	; 0x7e3a <pch>
    83d0:	f9 cf       	rjmp	.-14     	; 0x83c4 <p_etoa+0x28a>
    83d2:	33 dd       	rcall	.-1434   	; 0x7e3a <pch>
    83d4:	ea 85       	ldd	r30, Y+10	; 0x0a
    83d6:	fb 85       	ldd	r31, Y+11	; 0x0b
    83d8:	01 90       	ld	r0, Z+
    83da:	00 20       	and	r0, r0
    83dc:	e9 f7       	brne	.-6      	; 0x83d8 <p_etoa+0x29e>
    83de:	cf 01       	movw	r24, r30
    83e0:	01 97       	sbiw	r24, 0x01	; 1
    83e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    83e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    83e6:	82 1b       	sub	r24, r18
    83e8:	93 0b       	sbc	r25, r19
    83ea:	2d 96       	adiw	r28, 0x0d	; 13
    83ec:	e2 e1       	ldi	r30, 0x12	; 18
    83ee:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

000083f2 <_puts_pad>:
    83f2:	a0 e0       	ldi	r26, 0x00	; 0
    83f4:	b0 e0       	ldi	r27, 0x00	; 0
    83f6:	ef ef       	ldi	r30, 0xFF	; 255
    83f8:	f1 e4       	ldi	r31, 0x41	; 65
    83fa:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
    83fe:	6c 01       	movw	r12, r24
    8400:	4b 01       	movw	r8, r22
    8402:	79 01       	movw	r14, r18
    8404:	24 17       	cp	r18, r20
    8406:	35 07       	cpc	r19, r21
    8408:	24 f4       	brge	.+8      	; 0x8412 <_puts_pad+0x20>
    840a:	ea 01       	movw	r28, r20
    840c:	c2 1b       	sub	r28, r18
    840e:	d3 0b       	sbc	r29, r19
    8410:	02 c0       	rjmp	.+4      	; 0x8416 <_puts_pad+0x24>
    8412:	c0 e0       	ldi	r28, 0x00	; 0
    8414:	d0 e0       	ldi	r29, 0x00	; 0
    8416:	01 15       	cp	r16, r1
    8418:	11 05       	cpc	r17, r1
    841a:	49 f4       	brne	.+18     	; 0x842e <_puts_pad+0x3c>
    841c:	21 97       	sbiw	r28, 0x01	; 1
    841e:	38 f0       	brcs	.+14     	; 0x842e <_puts_pad+0x3c>
    8420:	d6 01       	movw	r26, r12
    8422:	ed 91       	ld	r30, X+
    8424:	fc 91       	ld	r31, X
    8426:	60 e2       	ldi	r22, 0x20	; 32
    8428:	c6 01       	movw	r24, r12
    842a:	09 95       	icall
    842c:	f7 cf       	rjmp	.-18     	; 0x841c <_puts_pad+0x2a>
    842e:	54 01       	movw	r10, r8
    8430:	f5 01       	movw	r30, r10
    8432:	61 91       	ld	r22, Z+
    8434:	5f 01       	movw	r10, r30
    8436:	66 23       	and	r22, r22
    8438:	61 f0       	breq	.+24     	; 0x8452 <_puts_pad+0x60>
    843a:	e1 14       	cp	r14, r1
    843c:	f1 04       	cpc	r15, r1
    843e:	49 f0       	breq	.+18     	; 0x8452 <_puts_pad+0x60>
    8440:	d6 01       	movw	r26, r12
    8442:	ed 91       	ld	r30, X+
    8444:	fc 91       	ld	r31, X
    8446:	c6 01       	movw	r24, r12
    8448:	09 95       	icall
    844a:	b1 e0       	ldi	r27, 0x01	; 1
    844c:	eb 1a       	sub	r14, r27
    844e:	f1 08       	sbc	r15, r1
    8450:	ef cf       	rjmp	.-34     	; 0x8430 <_puts_pad+0x3e>
    8452:	01 15       	cp	r16, r1
    8454:	11 05       	cpc	r17, r1
    8456:	51 f0       	breq	.+20     	; 0x846c <_puts_pad+0x7a>
    8458:	20 97       	sbiw	r28, 0x00	; 0
    845a:	41 f0       	breq	.+16     	; 0x846c <_puts_pad+0x7a>
    845c:	d6 01       	movw	r26, r12
    845e:	ed 91       	ld	r30, X+
    8460:	fc 91       	ld	r31, X
    8462:	60 e2       	ldi	r22, 0x20	; 32
    8464:	c6 01       	movw	r24, r12
    8466:	09 95       	icall
    8468:	21 97       	sbiw	r28, 0x01	; 1
    846a:	f6 cf       	rjmp	.-20     	; 0x8458 <_puts_pad+0x66>
    846c:	cd b7       	in	r28, 0x3d	; 61
    846e:	de b7       	in	r29, 0x3e	; 62
    8470:	ec e0       	ldi	r30, 0x0C	; 12
    8472:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

00008476 <_printf_fn>:
    8476:	ab e6       	ldi	r26, 0x6B	; 107
    8478:	b0 e0       	ldi	r27, 0x00	; 0
    847a:	e1 e4       	ldi	r30, 0x41	; 65
    847c:	f2 e4       	ldi	r31, 0x42	; 66
    847e:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    8482:	a5 96       	adiw	r28, 0x25	; 37
    8484:	9f af       	std	Y+63, r25	; 0x3f
    8486:	8e af       	std	Y+62, r24	; 0x3e
    8488:	a5 97       	sbiw	r28, 0x25	; 37
    848a:	6a 01       	movw	r12, r20
    848c:	e6 2e       	mov	r14, r22
    848e:	19 01       	movw	r2, r18
    8490:	a9 96       	adiw	r28, 0x29	; 41
    8492:	1c ae       	std	Y+60, r1	; 0x3c
    8494:	1d ae       	std	Y+61, r1	; 0x3d
    8496:	1e ae       	std	Y+62, r1	; 0x3e
    8498:	1f ae       	std	Y+63, r1	; 0x3f
    849a:	a9 97       	sbiw	r28, 0x29	; 41
    849c:	9e 01       	movw	r18, r28
    849e:	2f 5a       	subi	r18, 0xAF	; 175
    84a0:	3f 4f       	sbci	r19, 0xFF	; 255
    84a2:	67 96       	adiw	r28, 0x17	; 23
    84a4:	3f af       	std	Y+63, r19	; 0x3f
    84a6:	2e af       	std	Y+62, r18	; 0x3e
    84a8:	67 97       	sbiw	r28, 0x17	; 23
    84aa:	ae 01       	movw	r20, r28
    84ac:	4d 5b       	subi	r20, 0xBD	; 189
    84ae:	5f 4f       	sbci	r21, 0xFF	; 255
    84b0:	69 96       	adiw	r28, 0x19	; 25
    84b2:	5f af       	std	Y+63, r21	; 0x3f
    84b4:	4e af       	std	Y+62, r20	; 0x3e
    84b6:	69 97       	sbiw	r28, 0x19	; 25
    84b8:	ce 01       	movw	r24, r28
    84ba:	85 5b       	subi	r24, 0xB5	; 181
    84bc:	9f 4f       	sbci	r25, 0xFF	; 255
    84be:	6b 96       	adiw	r28, 0x1b	; 27
    84c0:	9f af       	std	Y+63, r25	; 0x3f
    84c2:	8e af       	std	Y+62, r24	; 0x3e
    84c4:	6b 97       	sbiw	r28, 0x1b	; 27
    84c6:	de 01       	movw	r26, r28
    84c8:	ad 5a       	subi	r26, 0xAD	; 173
    84ca:	bf 4f       	sbci	r27, 0xFF	; 255
    84cc:	6d 96       	adiw	r28, 0x1d	; 29
    84ce:	bf af       	std	Y+63, r27	; 0x3f
    84d0:	ae af       	std	Y+62, r26	; 0x3e
    84d2:	6d 97       	sbiw	r28, 0x1d	; 29
    84d4:	f6 01       	movw	r30, r12
    84d6:	5e 2d       	mov	r21, r14
    84d8:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    84dc:	66 23       	and	r22, r22
    84de:	09 f4       	brne	.+2      	; 0x84e2 <_printf_fn+0x6c>
    84e0:	df c3       	rjmp	.+1982   	; 0x8ca0 <_printf_fn+0x82a>
    84e2:	ae 2d       	mov	r26, r14
    84e4:	c6 01       	movw	r24, r12
    84e6:	01 96       	adiw	r24, 0x01	; 1
    84e8:	a1 1d       	adc	r26, r1
    84ea:	3c 01       	movw	r6, r24
    84ec:	8a 2e       	mov	r8, r26
    84ee:	65 32       	cpi	r22, 0x25	; 37
    84f0:	51 f0       	breq	.+20     	; 0x8506 <_printf_fn+0x90>
    84f2:	a5 96       	adiw	r28, 0x25	; 37
    84f4:	ae ad       	ldd	r26, Y+62	; 0x3e
    84f6:	bf ad       	ldd	r27, Y+63	; 0x3f
    84f8:	a5 97       	sbiw	r28, 0x25	; 37
    84fa:	ed 91       	ld	r30, X+
    84fc:	fc 91       	ld	r31, X
    84fe:	11 97       	sbiw	r26, 0x01	; 1
    8500:	cd 01       	movw	r24, r26
    8502:	09 95       	icall
    8504:	99 c3       	rjmp	.+1842   	; 0x8c38 <_printf_fn+0x7c2>
    8506:	91 2c       	mov	r9, r1
    8508:	f3 01       	movw	r30, r6
    850a:	58 2d       	mov	r21, r8
    850c:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    8510:	63 32       	cpi	r22, 0x23	; 35
    8512:	19 f4       	brne	.+6      	; 0x851a <_printf_fn+0xa4>
    8514:	68 94       	set
    8516:	97 f8       	bld	r9, 7
    8518:	04 c0       	rjmp	.+8      	; 0x8522 <_printf_fn+0xac>
    851a:	6b 32       	cpi	r22, 0x2B	; 43
    851c:	39 f4       	brne	.+14     	; 0x852c <_printf_fn+0xb6>
    851e:	68 94       	set
    8520:	92 f8       	bld	r9, 2
    8522:	bf ef       	ldi	r27, 0xFF	; 255
    8524:	6b 1a       	sub	r6, r27
    8526:	7b 0a       	sbc	r7, r27
    8528:	8b 0a       	sbc	r8, r27
    852a:	ee cf       	rjmp	.-36     	; 0x8508 <_printf_fn+0x92>
    852c:	6d 32       	cpi	r22, 0x2D	; 45
    852e:	a9 f4       	brne	.+42     	; 0x855a <_printf_fn+0xe4>
    8530:	93 fc       	sbrc	r9, 3
    8532:	05 c0       	rjmp	.+10     	; 0x853e <_printf_fn+0xc8>
    8534:	6d 32       	cpi	r22, 0x2D	; 45
    8536:	19 f4       	brne	.+6      	; 0x853e <_printf_fn+0xc8>
    8538:	68 94       	set
    853a:	93 f8       	bld	r9, 3
    853c:	f2 cf       	rjmp	.-28     	; 0x8522 <_printf_fn+0xac>
    853e:	94 fc       	sbrc	r9, 4
    8540:	05 c0       	rjmp	.+10     	; 0x854c <_printf_fn+0xd6>
    8542:	60 32       	cpi	r22, 0x20	; 32
    8544:	19 f4       	brne	.+6      	; 0x854c <_printf_fn+0xd6>
    8546:	68 94       	set
    8548:	94 f8       	bld	r9, 4
    854a:	eb cf       	rjmp	.-42     	; 0x8522 <_printf_fn+0xac>
    854c:	95 fc       	sbrc	r9, 5
    854e:	e9 cf       	rjmp	.-46     	; 0x8522 <_printf_fn+0xac>
    8550:	60 33       	cpi	r22, 0x30	; 48
    8552:	39 f7       	brne	.-50     	; 0x8522 <_printf_fn+0xac>
    8554:	68 94       	set
    8556:	95 f8       	bld	r9, 5
    8558:	e4 cf       	rjmp	.-56     	; 0x8522 <_printf_fn+0xac>
    855a:	86 2f       	mov	r24, r22
    855c:	8f 7e       	andi	r24, 0xEF	; 239
    855e:	80 32       	cpi	r24, 0x20	; 32
    8560:	39 f3       	breq	.-50     	; 0x8530 <_printf_fn+0xba>
    8562:	70 e0       	ldi	r23, 0x00	; 0
    8564:	60 53       	subi	r22, 0x30	; 48
    8566:	71 09       	sbc	r23, r1
    8568:	41 2c       	mov	r4, r1
    856a:	51 2c       	mov	r5, r1
    856c:	6a 30       	cpi	r22, 0x0A	; 10
    856e:	71 05       	cpc	r23, r1
    8570:	e0 f4       	brcc	.+56     	; 0x85aa <_printf_fn+0x134>
    8572:	2a e0       	ldi	r18, 0x0A	; 10
    8574:	f3 01       	movw	r30, r6
    8576:	58 2d       	mov	r21, r8
    8578:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    857c:	70 e0       	ldi	r23, 0x00	; 0
    857e:	cb 01       	movw	r24, r22
    8580:	c0 97       	sbiw	r24, 0x30	; 48
    8582:	0a 97       	sbiw	r24, 0x0a	; 10
    8584:	80 f4       	brcc	.+32     	; 0x85a6 <_printf_fn+0x130>
    8586:	ef ef       	ldi	r30, 0xFF	; 255
    8588:	6e 1a       	sub	r6, r30
    858a:	7e 0a       	sbc	r7, r30
    858c:	8e 0a       	sbc	r8, r30
    858e:	24 9d       	mul	r18, r4
    8590:	c0 01       	movw	r24, r0
    8592:	25 9d       	mul	r18, r5
    8594:	90 0d       	add	r25, r0
    8596:	11 24       	eor	r1, r1
    8598:	68 0f       	add	r22, r24
    859a:	79 1f       	adc	r23, r25
    859c:	2b 01       	movw	r4, r22
    859e:	f0 e3       	ldi	r31, 0x30	; 48
    85a0:	4f 1a       	sub	r4, r31
    85a2:	51 08       	sbc	r5, r1
    85a4:	e7 cf       	rjmp	.-50     	; 0x8574 <_printf_fn+0xfe>
    85a6:	68 94       	set
    85a8:	90 f8       	bld	r9, 0
    85aa:	f3 01       	movw	r30, r6
    85ac:	58 2d       	mov	r21, r8
    85ae:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    85b2:	6e 32       	cpi	r22, 0x2E	; 46
    85b4:	59 f5       	brne	.+86     	; 0x860c <_printf_fn+0x196>
    85b6:	2f ef       	ldi	r18, 0xFF	; 255
    85b8:	62 1a       	sub	r6, r18
    85ba:	72 0a       	sbc	r7, r18
    85bc:	82 0a       	sbc	r8, r18
    85be:	a1 96       	adiw	r28, 0x21	; 33
    85c0:	1f ae       	std	Y+63, r1	; 0x3f
    85c2:	1e ae       	std	Y+62, r1	; 0x3e
    85c4:	a1 97       	sbiw	r28, 0x21	; 33
    85c6:	2a e0       	ldi	r18, 0x0A	; 10
    85c8:	f3 01       	movw	r30, r6
    85ca:	58 2d       	mov	r21, r8
    85cc:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    85d0:	70 e0       	ldi	r23, 0x00	; 0
    85d2:	cb 01       	movw	r24, r22
    85d4:	c0 97       	sbiw	r24, 0x30	; 48
    85d6:	0a 97       	sbiw	r24, 0x0a	; 10
    85d8:	b0 f4       	brcc	.+44     	; 0x8606 <_printf_fn+0x190>
    85da:	3f ef       	ldi	r19, 0xFF	; 255
    85dc:	63 1a       	sub	r6, r19
    85de:	73 0a       	sbc	r7, r19
    85e0:	83 0a       	sbc	r8, r19
    85e2:	a1 96       	adiw	r28, 0x21	; 33
    85e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    85e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    85e8:	a1 97       	sbiw	r28, 0x21	; 33
    85ea:	24 9f       	mul	r18, r20
    85ec:	c0 01       	movw	r24, r0
    85ee:	25 9f       	mul	r18, r21
    85f0:	90 0d       	add	r25, r0
    85f2:	11 24       	eor	r1, r1
    85f4:	68 0f       	add	r22, r24
    85f6:	79 1f       	adc	r23, r25
    85f8:	cb 01       	movw	r24, r22
    85fa:	c0 97       	sbiw	r24, 0x30	; 48
    85fc:	a1 96       	adiw	r28, 0x21	; 33
    85fe:	9f af       	std	Y+63, r25	; 0x3f
    8600:	8e af       	std	Y+62, r24	; 0x3e
    8602:	a1 97       	sbiw	r28, 0x21	; 33
    8604:	e1 cf       	rjmp	.-62     	; 0x85c8 <_printf_fn+0x152>
    8606:	68 94       	set
    8608:	91 f8       	bld	r9, 1
    860a:	04 c0       	rjmp	.+8      	; 0x8614 <_printf_fn+0x19e>
    860c:	a1 96       	adiw	r28, 0x21	; 33
    860e:	1f ae       	std	Y+63, r1	; 0x3f
    8610:	1e ae       	std	Y+62, r1	; 0x3e
    8612:	a1 97       	sbiw	r28, 0x21	; 33
    8614:	f3 01       	movw	r30, r6
    8616:	58 2d       	mov	r21, r8
    8618:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    861c:	69 34       	cpi	r22, 0x49	; 73
    861e:	09 f0       	breq	.+2      	; 0x8622 <_printf_fn+0x1ac>
    8620:	45 c0       	rjmp	.+138    	; 0x86ac <_printf_fn+0x236>
    8622:	9f ef       	ldi	r25, 0xFF	; 255
    8624:	69 1a       	sub	r6, r25
    8626:	79 0a       	sbc	r7, r25
    8628:	89 0a       	sbc	r8, r25
    862a:	6f 96       	adiw	r28, 0x1f	; 31
    862c:	1f ae       	std	Y+63, r1	; 0x3f
    862e:	1e ae       	std	Y+62, r1	; 0x3e
    8630:	6f 97       	sbiw	r28, 0x1f	; 31
    8632:	2a e0       	ldi	r18, 0x0A	; 10
    8634:	f3 01       	movw	r30, r6
    8636:	58 2d       	mov	r21, r8
    8638:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    863c:	70 e0       	ldi	r23, 0x00	; 0
    863e:	cb 01       	movw	r24, r22
    8640:	c0 97       	sbiw	r24, 0x30	; 48
    8642:	0a 97       	sbiw	r24, 0x0a	; 10
    8644:	b8 f4       	brcc	.+46     	; 0x8674 <_printf_fn+0x1fe>
    8646:	af ef       	ldi	r26, 0xFF	; 255
    8648:	6a 1a       	sub	r6, r26
    864a:	7a 0a       	sbc	r7, r26
    864c:	8a 0a       	sbc	r8, r26
    864e:	6f 96       	adiw	r28, 0x1f	; 31
    8650:	ee ad       	ldd	r30, Y+62	; 0x3e
    8652:	ff ad       	ldd	r31, Y+63	; 0x3f
    8654:	6f 97       	sbiw	r28, 0x1f	; 31
    8656:	2e 9f       	mul	r18, r30
    8658:	c0 01       	movw	r24, r0
    865a:	2f 9f       	mul	r18, r31
    865c:	90 0d       	add	r25, r0
    865e:	11 24       	eor	r1, r1
    8660:	68 0f       	add	r22, r24
    8662:	79 1f       	adc	r23, r25
    8664:	ab 01       	movw	r20, r22
    8666:	40 53       	subi	r20, 0x30	; 48
    8668:	51 09       	sbc	r21, r1
    866a:	6f 96       	adiw	r28, 0x1f	; 31
    866c:	5f af       	std	Y+63, r21	; 0x3f
    866e:	4e af       	std	Y+62, r20	; 0x3e
    8670:	6f 97       	sbiw	r28, 0x1f	; 31
    8672:	e0 cf       	rjmp	.-64     	; 0x8634 <_printf_fn+0x1be>
    8674:	6f 96       	adiw	r28, 0x1f	; 31
    8676:	8e ad       	ldd	r24, Y+62	; 0x3e
    8678:	9f ad       	ldd	r25, Y+63	; 0x3f
    867a:	6f 97       	sbiw	r28, 0x1f	; 31
    867c:	00 97       	sbiw	r24, 0x00	; 0
    867e:	09 f4       	brne	.+2      	; 0x8682 <_printf_fn+0x20c>
    8680:	4f c0       	rjmp	.+158    	; 0x8720 <_printf_fn+0x2aa>
    8682:	87 70       	andi	r24, 0x07	; 7
    8684:	99 27       	eor	r25, r25
    8686:	89 2b       	or	r24, r25
    8688:	09 f0       	breq	.+2      	; 0x868c <_printf_fn+0x216>
    868a:	46 c0       	rjmp	.+140    	; 0x8718 <_printf_fn+0x2a2>
    868c:	6f 96       	adiw	r28, 0x1f	; 31
    868e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8690:	bf ad       	ldd	r27, Y+63	; 0x3f
    8692:	6f 97       	sbiw	r28, 0x1f	; 31
    8694:	83 e0       	ldi	r24, 0x03	; 3
    8696:	b5 95       	asr	r27
    8698:	a7 95       	ror	r26
    869a:	8a 95       	dec	r24
    869c:	e1 f7       	brne	.-8      	; 0x8696 <_printf_fn+0x220>
    869e:	6f 96       	adiw	r28, 0x1f	; 31
    86a0:	bf af       	std	Y+63, r27	; 0x3f
    86a2:	ae af       	std	Y+62, r26	; 0x3e
    86a4:	6f 97       	sbiw	r28, 0x1f	; 31
    86a6:	ab 2b       	or	r26, r27
    86a8:	d9 f1       	breq	.+118    	; 0x8720 <_printf_fn+0x2aa>
    86aa:	27 c0       	rjmp	.+78     	; 0x86fa <_printf_fn+0x284>
    86ac:	68 36       	cpi	r22, 0x68	; 104
    86ae:	29 f4       	brne	.+10     	; 0x86ba <_printf_fn+0x244>
    86b0:	bf ef       	ldi	r27, 0xFF	; 255
    86b2:	6b 1a       	sub	r6, r27
    86b4:	7b 0a       	sbc	r7, r27
    86b6:	8b 0a       	sbc	r8, r27
    86b8:	c2 c2       	rjmp	.+1412   	; 0x8c3e <_printf_fn+0x7c8>
    86ba:	6c 36       	cpi	r22, 0x6C	; 108
    86bc:	09 f0       	breq	.+2      	; 0x86c0 <_printf_fn+0x24a>
    86be:	bf c2       	rjmp	.+1406   	; 0x8c3e <_printf_fn+0x7c8>
    86c0:	a8 2d       	mov	r26, r8
    86c2:	c3 01       	movw	r24, r6
    86c4:	01 96       	adiw	r24, 0x01	; 1
    86c6:	a1 1d       	adc	r26, r1
    86c8:	fc 01       	movw	r30, r24
    86ca:	5a 2f       	mov	r21, r26
    86cc:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    86d0:	6c 36       	cpi	r22, 0x6C	; 108
    86d2:	49 f0       	breq	.+18     	; 0x86e6 <_printf_fn+0x270>
    86d4:	3c 01       	movw	r6, r24
    86d6:	8a 2e       	mov	r8, r26
    86d8:	24 e0       	ldi	r18, 0x04	; 4
    86da:	30 e0       	ldi	r19, 0x00	; 0
    86dc:	6f 96       	adiw	r28, 0x1f	; 31
    86de:	3f af       	std	Y+63, r19	; 0x3f
    86e0:	2e af       	std	Y+62, r18	; 0x3e
    86e2:	6f 97       	sbiw	r28, 0x1f	; 31
    86e4:	0a c0       	rjmp	.+20     	; 0x86fa <_printf_fn+0x284>
    86e6:	32 e0       	ldi	r19, 0x02	; 2
    86e8:	63 0e       	add	r6, r19
    86ea:	71 1c       	adc	r7, r1
    86ec:	81 1c       	adc	r8, r1
    86ee:	48 e0       	ldi	r20, 0x08	; 8
    86f0:	50 e0       	ldi	r21, 0x00	; 0
    86f2:	6f 96       	adiw	r28, 0x1f	; 31
    86f4:	5f af       	std	Y+63, r21	; 0x3f
    86f6:	4e af       	std	Y+62, r20	; 0x3e
    86f8:	6f 97       	sbiw	r28, 0x1f	; 31
    86fa:	f3 01       	movw	r30, r6
    86fc:	58 2d       	mov	r21, r8
    86fe:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    8702:	86 2f       	mov	r24, r22
    8704:	90 e0       	ldi	r25, 0x00	; 0
    8706:	a3 96       	adiw	r28, 0x23	; 35
    8708:	9f af       	std	Y+63, r25	; 0x3f
    870a:	8e af       	std	Y+62, r24	; 0x3e
    870c:	a3 97       	sbiw	r28, 0x23	; 35
    870e:	84 36       	cpi	r24, 0x64	; 100
    8710:	91 05       	cpc	r25, r1
    8712:	09 f4       	brne	.+2      	; 0x8716 <_printf_fn+0x2a0>
    8714:	9b c2       	rjmp	.+1334   	; 0x8c4c <_printf_fn+0x7d6>
    8716:	08 c0       	rjmp	.+16     	; 0x8728 <_printf_fn+0x2b2>
    8718:	6f 96       	adiw	r28, 0x1f	; 31
    871a:	1f ae       	std	Y+63, r1	; 0x3f
    871c:	1e ae       	std	Y+62, r1	; 0x3e
    871e:	6f 97       	sbiw	r28, 0x1f	; 31
    8720:	a3 96       	adiw	r28, 0x23	; 35
    8722:	1f ae       	std	Y+63, r1	; 0x3f
    8724:	1e ae       	std	Y+62, r1	; 0x3e
    8726:	a3 97       	sbiw	r28, 0x23	; 35
    8728:	31 e0       	ldi	r19, 0x01	; 1
    872a:	20 e0       	ldi	r18, 0x00	; 0
    872c:	a3 96       	adiw	r28, 0x23	; 35
    872e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8730:	bf ad       	ldd	r27, Y+63	; 0x3f
    8732:	a3 97       	sbiw	r28, 0x23	; 35
    8734:	a4 34       	cpi	r26, 0x44	; 68
    8736:	b1 05       	cpc	r27, r1
    8738:	09 f0       	breq	.+2      	; 0x873c <_printf_fn+0x2c6>
    873a:	30 e0       	ldi	r19, 0x00	; 0
    873c:	83 2f       	mov	r24, r19
    873e:	92 2f       	mov	r25, r18
    8740:	a3 96       	adiw	r28, 0x23	; 35
    8742:	ee ad       	ldd	r30, Y+62	; 0x3e
    8744:	ff ad       	ldd	r31, Y+63	; 0x3f
    8746:	a3 97       	sbiw	r28, 0x23	; 35
    8748:	e2 54       	subi	r30, 0x42	; 66
    874a:	f1 09       	sbc	r31, r1
    874c:	e7 33       	cpi	r30, 0x37	; 55
    874e:	f1 05       	cpc	r31, r1
    8750:	08 f0       	brcs	.+2      	; 0x8754 <_printf_fn+0x2de>
    8752:	65 c1       	rjmp	.+714    	; 0x8a1e <_printf_fn+0x5a8>
    8754:	ea 5b       	subi	r30, 0xBA	; 186
    8756:	ff 4f       	sbci	r31, 0xFF	; 255
    8758:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
    875c:	e2 e0       	ldi	r30, 0x02	; 2
    875e:	f0 e0       	ldi	r31, 0x00	; 0
    8760:	6f 96       	adiw	r28, 0x1f	; 31
    8762:	ff af       	std	Y+63, r31	; 0x3f
    8764:	ee af       	std	Y+62, r30	; 0x3e
    8766:	6f 97       	sbiw	r28, 0x1f	; 31
    8768:	29 2d       	mov	r18, r9
    876a:	28 72       	andi	r18, 0x28	; 40
    876c:	28 32       	cpi	r18, 0x28	; 40
    876e:	11 f4       	brne	.+4      	; 0x8774 <_printf_fn+0x2fe>
    8770:	e8 94       	clt
    8772:	95 f8       	bld	r9, 5
    8774:	29 2d       	mov	r18, r9
    8776:	22 72       	andi	r18, 0x22	; 34
    8778:	22 32       	cpi	r18, 0x22	; 34
    877a:	11 f4       	brne	.+4      	; 0x8780 <_printf_fn+0x30a>
    877c:	e8 94       	clt
    877e:	95 f8       	bld	r9, 5
    8780:	29 2d       	mov	r18, r9
    8782:	21 72       	andi	r18, 0x21	; 33
    8784:	21 32       	cpi	r18, 0x21	; 33
    8786:	59 f4       	brne	.+22     	; 0x879e <_printf_fn+0x328>
    8788:	a1 96       	adiw	r28, 0x21	; 33
    878a:	2e ad       	ldd	r18, Y+62	; 0x3e
    878c:	3f ad       	ldd	r19, Y+63	; 0x3f
    878e:	a1 97       	sbiw	r28, 0x21	; 33
    8790:	24 15       	cp	r18, r4
    8792:	35 05       	cpc	r19, r5
    8794:	24 f4       	brge	.+8      	; 0x879e <_printf_fn+0x328>
    8796:	a1 96       	adiw	r28, 0x21	; 33
    8798:	5f ae       	std	Y+63, r5	; 0x3f
    879a:	4e ae       	std	Y+62, r4	; 0x3e
    879c:	a1 97       	sbiw	r28, 0x21	; 33
    879e:	29 2d       	mov	r18, r9
    87a0:	23 72       	andi	r18, 0x23	; 35
    87a2:	23 32       	cpi	r18, 0x23	; 35
    87a4:	59 f4       	brne	.+22     	; 0x87bc <_printf_fn+0x346>
    87a6:	a1 96       	adiw	r28, 0x21	; 33
    87a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    87aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    87ac:	a1 97       	sbiw	r28, 0x21	; 33
    87ae:	44 15       	cp	r20, r4
    87b0:	55 05       	cpc	r21, r5
    87b2:	24 f4       	brge	.+8      	; 0x87bc <_printf_fn+0x346>
    87b4:	a1 96       	adiw	r28, 0x21	; 33
    87b6:	5f ae       	std	Y+63, r5	; 0x3f
    87b8:	4e ae       	std	Y+62, r4	; 0x3e
    87ba:	a1 97       	sbiw	r28, 0x21	; 33
    87bc:	e8 94       	clt
    87be:	94 f8       	bld	r9, 4
    87c0:	e8 94       	clt
    87c2:	92 f8       	bld	r9, 2
    87c4:	e8 94       	clt
    87c6:	96 f8       	bld	r9, 6
    87c8:	6f 96       	adiw	r28, 0x1f	; 31
    87ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    87cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    87ce:	6f 97       	sbiw	r28, 0x1f	; 31
    87d0:	12 97       	sbiw	r26, 0x02	; 2
    87d2:	29 f5       	brne	.+74     	; 0x881e <_printf_fn+0x3a8>
    87d4:	51 01       	movw	r10, r2
    87d6:	b2 e0       	ldi	r27, 0x02	; 2
    87d8:	ab 0e       	add	r10, r27
    87da:	b1 1c       	adc	r11, r1
    87dc:	f1 01       	movw	r30, r2
    87de:	80 81       	ld	r24, Z
    87e0:	91 81       	ldd	r25, Z+1	; 0x01
    87e2:	65 96       	adiw	r28, 0x15	; 21
    87e4:	9f af       	std	Y+63, r25	; 0x3f
    87e6:	8e af       	std	Y+62, r24	; 0x3e
    87e8:	65 97       	sbiw	r28, 0x15	; 21
    87ea:	a3 96       	adiw	r28, 0x23	; 35
    87ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    87ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    87f0:	a3 97       	sbiw	r28, 0x23	; 35
    87f2:	24 34       	cpi	r18, 0x44	; 68
    87f4:	31 05       	cpc	r19, r1
    87f6:	09 f0       	breq	.+2      	; 0x87fa <_printf_fn+0x384>
    87f8:	c0 c0       	rjmp	.+384    	; 0x897a <_printf_fn+0x504>
    87fa:	97 ff       	sbrs	r25, 7
    87fc:	b8 c0       	rjmp	.+368    	; 0x896e <_printf_fn+0x4f8>
    87fe:	68 94       	set
    8800:	96 f8       	bld	r9, 6
    8802:	91 95       	neg	r25
    8804:	81 95       	neg	r24
    8806:	91 09       	sbc	r25, r1
    8808:	65 96       	adiw	r28, 0x15	; 21
    880a:	9f af       	std	Y+63, r25	; 0x3f
    880c:	8e af       	std	Y+62, r24	; 0x3e
    880e:	65 97       	sbiw	r28, 0x15	; 21
    8810:	42 e0       	ldi	r20, 0x02	; 2
    8812:	50 e0       	ldi	r21, 0x00	; 0
    8814:	6f 96       	adiw	r28, 0x1f	; 31
    8816:	5f af       	std	Y+63, r21	; 0x3f
    8818:	4e af       	std	Y+62, r20	; 0x3e
    881a:	6f 97       	sbiw	r28, 0x1f	; 31
    881c:	ae c0       	rjmp	.+348    	; 0x897a <_printf_fn+0x504>
    881e:	6f 96       	adiw	r28, 0x1f	; 31
    8820:	ae ad       	ldd	r26, Y+62	; 0x3e
    8822:	bf ad       	ldd	r27, Y+63	; 0x3f
    8824:	6f 97       	sbiw	r28, 0x1f	; 31
    8826:	14 97       	sbiw	r26, 0x04	; 4
    8828:	59 f5       	brne	.+86     	; 0x8880 <_printf_fn+0x40a>
    882a:	51 01       	movw	r10, r2
    882c:	b4 e0       	ldi	r27, 0x04	; 4
    882e:	ab 0e       	add	r10, r27
    8830:	b1 1c       	adc	r11, r1
    8832:	f1 01       	movw	r30, r2
    8834:	80 81       	ld	r24, Z
    8836:	91 81       	ldd	r25, Z+1	; 0x01
    8838:	a2 81       	ldd	r26, Z+2	; 0x02
    883a:	b3 81       	ldd	r27, Z+3	; 0x03
    883c:	2f 96       	adiw	r28, 0x0f	; 15
    883e:	8c af       	std	Y+60, r24	; 0x3c
    8840:	9d af       	std	Y+61, r25	; 0x3d
    8842:	ae af       	std	Y+62, r26	; 0x3e
    8844:	bf af       	std	Y+63, r27	; 0x3f
    8846:	2f 97       	sbiw	r28, 0x0f	; 15
    8848:	a3 96       	adiw	r28, 0x23	; 35
    884a:	2e ad       	ldd	r18, Y+62	; 0x3e
    884c:	3f ad       	ldd	r19, Y+63	; 0x3f
    884e:	a3 97       	sbiw	r28, 0x23	; 35
    8850:	24 34       	cpi	r18, 0x44	; 68
    8852:	31 05       	cpc	r19, r1
    8854:	09 f0       	breq	.+2      	; 0x8858 <_printf_fn+0x3e2>
    8856:	9e c0       	rjmp	.+316    	; 0x8994 <_printf_fn+0x51e>
    8858:	b7 ff       	sbrs	r27, 7
    885a:	96 c0       	rjmp	.+300    	; 0x8988 <_printf_fn+0x512>
    885c:	68 94       	set
    885e:	96 f8       	bld	r9, 6
    8860:	b0 95       	com	r27
    8862:	a0 95       	com	r26
    8864:	90 95       	com	r25
    8866:	81 95       	neg	r24
    8868:	9f 4f       	sbci	r25, 0xFF	; 255
    886a:	af 4f       	sbci	r26, 0xFF	; 255
    886c:	bf 4f       	sbci	r27, 0xFF	; 255
    886e:	2f 96       	adiw	r28, 0x0f	; 15
    8870:	8c af       	std	Y+60, r24	; 0x3c
    8872:	9d af       	std	Y+61, r25	; 0x3d
    8874:	ae af       	std	Y+62, r26	; 0x3e
    8876:	bf af       	std	Y+63, r27	; 0x3f
    8878:	2f 97       	sbiw	r28, 0x0f	; 15
    887a:	86 c0       	rjmp	.+268    	; 0x8988 <_printf_fn+0x512>
    887c:	81 e0       	ldi	r24, 0x01	; 1
    887e:	90 e0       	ldi	r25, 0x00	; 0
    8880:	6f 96       	adiw	r28, 0x1f	; 31
    8882:	ae ad       	ldd	r26, Y+62	; 0x3e
    8884:	bf ad       	ldd	r27, Y+63	; 0x3f
    8886:	6f 97       	sbiw	r28, 0x1f	; 31
    8888:	51 01       	movw	r10, r2
    888a:	18 97       	sbiw	r26, 0x08	; 8
    888c:	09 f0       	breq	.+2      	; 0x8890 <_printf_fn+0x41a>
    888e:	89 c0       	rjmp	.+274    	; 0x89a2 <_printf_fn+0x52c>
    8890:	b8 e0       	ldi	r27, 0x08	; 8
    8892:	ab 0e       	add	r10, r27
    8894:	b1 1c       	adc	r11, r1
    8896:	f1 01       	movw	r30, r2
    8898:	f0 81       	ld	r31, Z
    889a:	aa 96       	adiw	r28, 0x2a	; 42
    889c:	ff af       	std	Y+63, r31	; 0x3f
    889e:	aa 97       	sbiw	r28, 0x2a	; 42
    88a0:	d1 01       	movw	r26, r2
    88a2:	11 96       	adiw	r26, 0x01	; 1
    88a4:	fc 90       	ld	r15, X
    88a6:	11 97       	sbiw	r26, 0x01	; 1
    88a8:	12 96       	adiw	r26, 0x02	; 2
    88aa:	0c 91       	ld	r16, X
    88ac:	12 97       	sbiw	r26, 0x02	; 2
    88ae:	13 96       	adiw	r26, 0x03	; 3
    88b0:	1c 91       	ld	r17, X
    88b2:	13 97       	sbiw	r26, 0x03	; 3
    88b4:	14 96       	adiw	r26, 0x04	; 4
    88b6:	bc 91       	ld	r27, X
    88b8:	f1 01       	movw	r30, r2
    88ba:	f5 81       	ldd	r31, Z+5	; 0x05
    88bc:	ab 96       	adiw	r28, 0x2b	; 43
    88be:	ff af       	std	Y+63, r31	; 0x3f
    88c0:	ab 97       	sbiw	r28, 0x2b	; 43
    88c2:	f1 01       	movw	r30, r2
    88c4:	f6 81       	ldd	r31, Z+6	; 0x06
    88c6:	ac 96       	adiw	r28, 0x2c	; 44
    88c8:	ff af       	std	Y+63, r31	; 0x3f
    88ca:	ac 97       	sbiw	r28, 0x2c	; 44
    88cc:	f1 01       	movw	r30, r2
    88ce:	37 80       	ldd	r3, Z+7	; 0x07
    88d0:	aa 96       	adiw	r28, 0x2a	; 42
    88d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    88d4:	aa 97       	sbiw	r28, 0x2a	; 42
    88d6:	24 96       	adiw	r28, 0x04	; 4
    88d8:	ff af       	std	Y+63, r31	; 0x3f
    88da:	24 97       	sbiw	r28, 0x04	; 4
    88dc:	25 96       	adiw	r28, 0x05	; 5
    88de:	ff ae       	std	Y+63, r15	; 0x3f
    88e0:	25 97       	sbiw	r28, 0x05	; 5
    88e2:	26 96       	adiw	r28, 0x06	; 6
    88e4:	0f af       	std	Y+63, r16	; 0x3f
    88e6:	26 97       	sbiw	r28, 0x06	; 6
    88e8:	27 96       	adiw	r28, 0x07	; 7
    88ea:	1f af       	std	Y+63, r17	; 0x3f
    88ec:	27 97       	sbiw	r28, 0x07	; 7
    88ee:	28 96       	adiw	r28, 0x08	; 8
    88f0:	bf af       	std	Y+63, r27	; 0x3f
    88f2:	28 97       	sbiw	r28, 0x08	; 8
    88f4:	ab 96       	adiw	r28, 0x2b	; 43
    88f6:	ef ad       	ldd	r30, Y+63	; 0x3f
    88f8:	ab 97       	sbiw	r28, 0x2b	; 43
    88fa:	29 96       	adiw	r28, 0x09	; 9
    88fc:	ef af       	std	Y+63, r30	; 0x3f
    88fe:	29 97       	sbiw	r28, 0x09	; 9
    8900:	ac 96       	adiw	r28, 0x2c	; 44
    8902:	ff ad       	ldd	r31, Y+63	; 0x3f
    8904:	ac 97       	sbiw	r28, 0x2c	; 44
    8906:	2a 96       	adiw	r28, 0x0a	; 10
    8908:	ff af       	std	Y+63, r31	; 0x3f
    890a:	2a 97       	sbiw	r28, 0x0a	; 10
    890c:	2b 96       	adiw	r28, 0x0b	; 11
    890e:	3f ae       	std	Y+63, r3	; 0x3f
    8910:	2b 97       	sbiw	r28, 0x0b	; 11
    8912:	89 2b       	or	r24, r25
    8914:	09 f4       	brne	.+2      	; 0x8918 <_printf_fn+0x4a2>
    8916:	50 c0       	rjmp	.+160    	; 0x89b8 <_printf_fn+0x542>
    8918:	aa 96       	adiw	r28, 0x2a	; 42
    891a:	2f ad       	ldd	r18, Y+63	; 0x3f
    891c:	aa 97       	sbiw	r28, 0x2a	; 42
    891e:	3f 2d       	mov	r19, r15
    8920:	a8 01       	movw	r20, r16
    8922:	6b 2f       	mov	r22, r27
    8924:	7e 2f       	mov	r23, r30
    8926:	8f 2f       	mov	r24, r31
    8928:	93 2d       	mov	r25, r3
    892a:	a0 e0       	ldi	r26, 0x00	; 0
    892c:	0e 94 59 eb 	call	0x1d6b2	; 0x1d6b2 <__cmpdi2_s8>
    8930:	0c f0       	brlt	.+2      	; 0x8934 <_printf_fn+0x4be>
    8932:	42 c0       	rjmp	.+132    	; 0x89b8 <_printf_fn+0x542>
    8934:	68 94       	set
    8936:	96 f8       	bld	r9, 6
    8938:	0e 94 0b eb 	call	0x1d616	; 0x1d616 <__negdi2>
    893c:	24 96       	adiw	r28, 0x04	; 4
    893e:	2f af       	std	Y+63, r18	; 0x3f
    8940:	24 97       	sbiw	r28, 0x04	; 4
    8942:	25 96       	adiw	r28, 0x05	; 5
    8944:	3f af       	std	Y+63, r19	; 0x3f
    8946:	25 97       	sbiw	r28, 0x05	; 5
    8948:	26 96       	adiw	r28, 0x06	; 6
    894a:	4f af       	std	Y+63, r20	; 0x3f
    894c:	26 97       	sbiw	r28, 0x06	; 6
    894e:	27 96       	adiw	r28, 0x07	; 7
    8950:	5f af       	std	Y+63, r21	; 0x3f
    8952:	27 97       	sbiw	r28, 0x07	; 7
    8954:	28 96       	adiw	r28, 0x08	; 8
    8956:	6f af       	std	Y+63, r22	; 0x3f
    8958:	28 97       	sbiw	r28, 0x08	; 8
    895a:	29 96       	adiw	r28, 0x09	; 9
    895c:	7f af       	std	Y+63, r23	; 0x3f
    895e:	29 97       	sbiw	r28, 0x09	; 9
    8960:	2a 96       	adiw	r28, 0x0a	; 10
    8962:	8f af       	std	Y+63, r24	; 0x3f
    8964:	2a 97       	sbiw	r28, 0x0a	; 10
    8966:	2b 96       	adiw	r28, 0x0b	; 11
    8968:	9f af       	std	Y+63, r25	; 0x3f
    896a:	2b 97       	sbiw	r28, 0x0b	; 11
    896c:	25 c0       	rjmp	.+74     	; 0x89b8 <_printf_fn+0x542>
    896e:	22 e0       	ldi	r18, 0x02	; 2
    8970:	30 e0       	ldi	r19, 0x00	; 0
    8972:	6f 96       	adiw	r28, 0x1f	; 31
    8974:	3f af       	std	Y+63, r19	; 0x3f
    8976:	2e af       	std	Y+62, r18	; 0x3e
    8978:	6f 97       	sbiw	r28, 0x1f	; 31
    897a:	6c 96       	adiw	r28, 0x1c	; 28
    897c:	8f ad       	ldd	r24, Y+63	; 0x3f
    897e:	6c 97       	sbiw	r28, 0x1c	; 28
    8980:	6d 96       	adiw	r28, 0x1d	; 29
    8982:	9f ad       	ldd	r25, Y+63	; 0x3f
    8984:	6d 97       	sbiw	r28, 0x1d	; 29
    8986:	1e c0       	rjmp	.+60     	; 0x89c4 <_printf_fn+0x54e>
    8988:	44 e0       	ldi	r20, 0x04	; 4
    898a:	50 e0       	ldi	r21, 0x00	; 0
    898c:	6f 96       	adiw	r28, 0x1f	; 31
    898e:	5f af       	std	Y+63, r21	; 0x3f
    8990:	4e af       	std	Y+62, r20	; 0x3e
    8992:	6f 97       	sbiw	r28, 0x1f	; 31
    8994:	6a 96       	adiw	r28, 0x1a	; 26
    8996:	8f ad       	ldd	r24, Y+63	; 0x3f
    8998:	6a 97       	sbiw	r28, 0x1a	; 26
    899a:	6b 96       	adiw	r28, 0x1b	; 27
    899c:	9f ad       	ldd	r25, Y+63	; 0x3f
    899e:	6b 97       	sbiw	r28, 0x1b	; 27
    89a0:	11 c0       	rjmp	.+34     	; 0x89c4 <_printf_fn+0x54e>
    89a2:	66 96       	adiw	r28, 0x16	; 22
    89a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    89a6:	66 97       	sbiw	r28, 0x16	; 22
    89a8:	67 96       	adiw	r28, 0x17	; 23
    89aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    89ac:	67 97       	sbiw	r28, 0x17	; 23
    89ae:	a3 96       	adiw	r28, 0x23	; 35
    89b0:	1f ae       	std	Y+63, r1	; 0x3f
    89b2:	1e ae       	std	Y+62, r1	; 0x3e
    89b4:	a3 97       	sbiw	r28, 0x23	; 35
    89b6:	06 c0       	rjmp	.+12     	; 0x89c4 <_printf_fn+0x54e>
    89b8:	68 96       	adiw	r28, 0x18	; 24
    89ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    89bc:	68 97       	sbiw	r28, 0x18	; 24
    89be:	69 96       	adiw	r28, 0x19	; 25
    89c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    89c2:	69 97       	sbiw	r28, 0x19	; 25
    89c4:	5f ef       	ldi	r21, 0xFF	; 255
    89c6:	65 1a       	sub	r6, r21
    89c8:	75 0a       	sbc	r7, r21
    89ca:	85 0a       	sbc	r8, r21
    89cc:	15 01       	movw	r2, r10
    89ce:	2d c0       	rjmp	.+90     	; 0x8a2a <_printf_fn+0x5b4>
    89d0:	91 fc       	sbrc	r9, 1
    89d2:	08 c0       	rjmp	.+16     	; 0x89e4 <_printf_fn+0x56e>
    89d4:	68 94       	set
    89d6:	91 f8       	bld	r9, 1
    89d8:	86 e0       	ldi	r24, 0x06	; 6
    89da:	90 e0       	ldi	r25, 0x00	; 0
    89dc:	a1 96       	adiw	r28, 0x21	; 33
    89de:	9f af       	std	Y+63, r25	; 0x3f
    89e0:	8e af       	std	Y+62, r24	; 0x3e
    89e2:	a1 97       	sbiw	r28, 0x21	; 33
    89e4:	d1 01       	movw	r26, r2
    89e6:	2d 91       	ld	r18, X+
    89e8:	3d 91       	ld	r19, X+
    89ea:	4d 91       	ld	r20, X+
    89ec:	5c 91       	ld	r21, X
    89ee:	a9 96       	adiw	r28, 0x29	; 41
    89f0:	2c af       	std	Y+60, r18	; 0x3c
    89f2:	3d af       	std	Y+61, r19	; 0x3d
    89f4:	4e af       	std	Y+62, r20	; 0x3e
    89f6:	5f af       	std	Y+63, r21	; 0x3f
    89f8:	a9 97       	sbiw	r28, 0x29	; 41
    89fa:	bf ef       	ldi	r27, 0xFF	; 255
    89fc:	6b 1a       	sub	r6, r27
    89fe:	7b 0a       	sbc	r7, r27
    8a00:	8b 0a       	sbc	r8, r27
    8a02:	f1 01       	movw	r30, r2
    8a04:	34 96       	adiw	r30, 0x04	; 4
    8a06:	1f 01       	movw	r2, r30
    8a08:	0a c0       	rjmp	.+20     	; 0x8a1e <_printf_fn+0x5a8>
    8a0a:	ff ef       	ldi	r31, 0xFF	; 255
    8a0c:	6f 1a       	sub	r6, r31
    8a0e:	7f 0a       	sbc	r7, r31
    8a10:	8f 0a       	sbc	r8, r31
    8a12:	b0 c0       	rjmp	.+352    	; 0x8b74 <_printf_fn+0x6fe>
    8a14:	2f ef       	ldi	r18, 0xFF	; 255
    8a16:	62 1a       	sub	r6, r18
    8a18:	72 0a       	sbc	r7, r18
    8a1a:	82 0a       	sbc	r8, r18
    8a1c:	b8 c0       	rjmp	.+368    	; 0x8b8e <_printf_fn+0x718>
    8a1e:	66 96       	adiw	r28, 0x16	; 22
    8a20:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a22:	66 97       	sbiw	r28, 0x16	; 22
    8a24:	67 96       	adiw	r28, 0x17	; 23
    8a26:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a28:	67 97       	sbiw	r28, 0x17	; 23
    8a2a:	a3 96       	adiw	r28, 0x23	; 35
    8a2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a30:	a3 97       	sbiw	r28, 0x23	; 35
    8a32:	e2 54       	subi	r30, 0x42	; 66
    8a34:	f1 09       	sbc	r31, r1
    8a36:	e7 33       	cpi	r30, 0x37	; 55
    8a38:	f1 05       	cpc	r31, r1
    8a3a:	08 f0       	brcs	.+2      	; 0x8a3e <_printf_fn+0x5c8>
    8a3c:	f9 c0       	rjmp	.+498    	; 0x8c30 <_printf_fn+0x7ba>
    8a3e:	e3 58       	subi	r30, 0x83	; 131
    8a40:	ff 4f       	sbci	r31, 0xFF	; 255
    8a42:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
    8a46:	e8 94       	clt
    8a48:	94 f8       	bld	r9, 4
    8a4a:	e8 94       	clt
    8a4c:	92 f8       	bld	r9, 2
    8a4e:	a9 2c       	mov	r10, r9
    8a50:	b1 2c       	mov	r11, r1
    8a52:	a1 96       	adiw	r28, 0x21	; 33
    8a54:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a56:	df ac       	ldd	r13, Y+63	; 0x3f
    8a58:	a1 97       	sbiw	r28, 0x21	; 33
    8a5a:	72 01       	movw	r14, r4
    8a5c:	0a e0       	ldi	r16, 0x0A	; 10
    8a5e:	10 e0       	ldi	r17, 0x00	; 0
    8a60:	13 c0       	rjmp	.+38     	; 0x8a88 <_printf_fn+0x612>
    8a62:	a9 2c       	mov	r10, r9
    8a64:	b1 2c       	mov	r11, r1
    8a66:	a1 96       	adiw	r28, 0x21	; 33
    8a68:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a6a:	df ac       	ldd	r13, Y+63	; 0x3f
    8a6c:	a1 97       	sbiw	r28, 0x21	; 33
    8a6e:	72 01       	movw	r14, r4
    8a70:	02 e0       	ldi	r16, 0x02	; 2
    8a72:	10 e0       	ldi	r17, 0x00	; 0
    8a74:	09 c0       	rjmp	.+18     	; 0x8a88 <_printf_fn+0x612>
    8a76:	a9 2c       	mov	r10, r9
    8a78:	b1 2c       	mov	r11, r1
    8a7a:	a1 96       	adiw	r28, 0x21	; 33
    8a7c:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a7e:	df ac       	ldd	r13, Y+63	; 0x3f
    8a80:	a1 97       	sbiw	r28, 0x21	; 33
    8a82:	72 01       	movw	r14, r4
    8a84:	08 e0       	ldi	r16, 0x08	; 8
    8a86:	10 e0       	ldi	r17, 0x00	; 0
    8a88:	22 e4       	ldi	r18, 0x42	; 66
    8a8a:	30 e0       	ldi	r19, 0x00	; 0
    8a8c:	ae 01       	movw	r20, r28
    8a8e:	4f 5f       	subi	r20, 0xFF	; 255
    8a90:	5f 4f       	sbci	r21, 0xFF	; 255
    8a92:	6f 96       	adiw	r28, 0x1f	; 31
    8a94:	6e ad       	ldd	r22, Y+62	; 0x3e
    8a96:	7f ad       	ldd	r23, Y+63	; 0x3f
    8a98:	6f 97       	sbiw	r28, 0x1f	; 31
    8a9a:	f3 d9       	rcall	.-3098   	; 0x7e82 <p_ntoa>
    8a9c:	30 c0       	rjmp	.+96     	; 0x8afe <_printf_fn+0x688>
    8a9e:	a9 2c       	mov	r10, r9
    8aa0:	b1 2c       	mov	r11, r1
    8aa2:	a1 96       	adiw	r28, 0x21	; 33
    8aa4:	ce ac       	ldd	r12, Y+62	; 0x3e
    8aa6:	df ac       	ldd	r13, Y+63	; 0x3f
    8aa8:	a1 97       	sbiw	r28, 0x21	; 33
    8aaa:	72 01       	movw	r14, r4
    8aac:	00 e1       	ldi	r16, 0x10	; 16
    8aae:	10 e0       	ldi	r17, 0x00	; 0
    8ab0:	22 e4       	ldi	r18, 0x42	; 66
    8ab2:	30 e0       	ldi	r19, 0x00	; 0
    8ab4:	ae 01       	movw	r20, r28
    8ab6:	4f 5f       	subi	r20, 0xFF	; 255
    8ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    8aba:	6f 96       	adiw	r28, 0x1f	; 31
    8abc:	6e ad       	ldd	r22, Y+62	; 0x3e
    8abe:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ac0:	6f 97       	sbiw	r28, 0x1f	; 31
    8ac2:	df d9       	rcall	.-3138   	; 0x7e82 <p_ntoa>
    8ac4:	7c 01       	movw	r14, r24
    8ac6:	a3 96       	adiw	r28, 0x23	; 35
    8ac8:	6e ad       	ldd	r22, Y+62	; 0x3e
    8aca:	7f ad       	ldd	r23, Y+63	; 0x3f
    8acc:	a3 97       	sbiw	r28, 0x23	; 35
    8ace:	67 7f       	andi	r22, 0xF7	; 247
    8ad0:	60 35       	cpi	r22, 0x50	; 80
    8ad2:	71 05       	cpc	r23, r1
    8ad4:	c9 f5       	brne	.+114    	; 0x8b48 <_printf_fn+0x6d2>
    8ad6:	34 c0       	rjmp	.+104    	; 0x8b40 <_printf_fn+0x6ca>
    8ad8:	c9 2c       	mov	r12, r9
    8ada:	d1 2c       	mov	r13, r1
    8adc:	a1 96       	adiw	r28, 0x21	; 33
    8ade:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ae0:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ae2:	a1 97       	sbiw	r28, 0x21	; 33
    8ae4:	82 01       	movw	r16, r4
    8ae6:	22 e4       	ldi	r18, 0x42	; 66
    8ae8:	30 e0       	ldi	r19, 0x00	; 0
    8aea:	ae 01       	movw	r20, r28
    8aec:	4f 5f       	subi	r20, 0xFF	; 255
    8aee:	5f 4f       	sbci	r21, 0xFF	; 255
    8af0:	a9 96       	adiw	r28, 0x29	; 41
    8af2:	6c ad       	ldd	r22, Y+60	; 0x3c
    8af4:	7d ad       	ldd	r23, Y+61	; 0x3d
    8af6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8af8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8afa:	a9 97       	sbiw	r28, 0x29	; 41
    8afc:	17 da       	rcall	.-3026   	; 0x7f2c <p_ftoa>
    8afe:	93 fa       	bst	r9, 3
    8b00:	00 27       	eor	r16, r16
    8b02:	00 f9       	bld	r16, 0
    8b04:	10 e0       	ldi	r17, 0x00	; 0
    8b06:	9c 01       	movw	r18, r24
    8b08:	24 c0       	rjmp	.+72     	; 0x8b52 <_printf_fn+0x6dc>
    8b0a:	c9 2c       	mov	r12, r9
    8b0c:	d1 2c       	mov	r13, r1
    8b0e:	a1 96       	adiw	r28, 0x21	; 33
    8b10:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b12:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b14:	a1 97       	sbiw	r28, 0x21	; 33
    8b16:	82 01       	movw	r16, r4
    8b18:	22 e4       	ldi	r18, 0x42	; 66
    8b1a:	30 e0       	ldi	r19, 0x00	; 0
    8b1c:	ae 01       	movw	r20, r28
    8b1e:	4f 5f       	subi	r20, 0xFF	; 255
    8b20:	5f 4f       	sbci	r21, 0xFF	; 255
    8b22:	a9 96       	adiw	r28, 0x29	; 41
    8b24:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b26:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b28:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b2c:	a9 97       	sbiw	r28, 0x29	; 41
    8b2e:	05 db       	rcall	.-2550   	; 0x813a <p_etoa>
    8b30:	7c 01       	movw	r14, r24
    8b32:	a3 96       	adiw	r28, 0x23	; 35
    8b34:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b36:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b38:	a3 97       	sbiw	r28, 0x23	; 35
    8b3a:	45 34       	cpi	r20, 0x45	; 69
    8b3c:	51 05       	cpc	r21, r1
    8b3e:	21 f4       	brne	.+8      	; 0x8b48 <_printf_fn+0x6d2>
    8b40:	ce 01       	movw	r24, r28
    8b42:	01 96       	adiw	r24, 0x01	; 1
    8b44:	0e 94 3d 32 	call	0x647a	; 0x647a <strupper>
    8b48:	93 fa       	bst	r9, 3
    8b4a:	00 27       	eor	r16, r16
    8b4c:	00 f9       	bld	r16, 0
    8b4e:	10 e0       	ldi	r17, 0x00	; 0
    8b50:	97 01       	movw	r18, r14
    8b52:	a2 01       	movw	r20, r4
    8b54:	be 01       	movw	r22, r28
    8b56:	6f 5f       	subi	r22, 0xFF	; 255
    8b58:	7f 4f       	sbci	r23, 0xFF	; 255
    8b5a:	a5 96       	adiw	r28, 0x25	; 37
    8b5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b60:	a5 97       	sbiw	r28, 0x25	; 37
    8b62:	47 dc       	rcall	.-1906   	; 0x83f2 <_puts_pad>
    8b64:	69 c0       	rjmp	.+210    	; 0x8c38 <_printf_fn+0x7c2>
    8b66:	a3 96       	adiw	r28, 0x23	; 35
    8b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b6c:	a3 97       	sbiw	r28, 0x23	; 35
    8b6e:	83 37       	cpi	r24, 0x73	; 115
    8b70:	91 05       	cpc	r25, r1
    8b72:	69 f4       	brne	.+26     	; 0x8b8e <_printf_fn+0x718>
    8b74:	71 01       	movw	r14, r2
    8b76:	92 e0       	ldi	r25, 0x02	; 2
    8b78:	e9 0e       	add	r14, r25
    8b7a:	f1 1c       	adc	r15, r1
    8b7c:	d1 01       	movw	r26, r2
    8b7e:	6d 91       	ld	r22, X+
    8b80:	7c 91       	ld	r23, X
    8b82:	61 15       	cp	r22, r1
    8b84:	71 05       	cpc	r23, r1
    8b86:	91 f4       	brne	.+36     	; 0x8bac <_printf_fn+0x736>
    8b88:	61 ed       	ldi	r22, 0xD1	; 209
    8b8a:	77 e0       	ldi	r23, 0x07	; 7
    8b8c:	0f c0       	rjmp	.+30     	; 0x8bac <_printf_fn+0x736>
    8b8e:	71 01       	movw	r14, r2
    8b90:	b2 e0       	ldi	r27, 0x02	; 2
    8b92:	eb 0e       	add	r14, r27
    8b94:	f1 1c       	adc	r15, r1
    8b96:	f1 01       	movw	r30, r2
    8b98:	80 81       	ld	r24, Z
    8b9a:	60 96       	adiw	r28, 0x10	; 16
    8b9c:	8f af       	std	Y+63, r24	; 0x3f
    8b9e:	60 97       	sbiw	r28, 0x10	; 16
    8ba0:	61 96       	adiw	r28, 0x11	; 17
    8ba2:	1f ae       	std	Y+63, r1	; 0x3f
    8ba4:	61 97       	sbiw	r28, 0x11	; 17
    8ba6:	be 01       	movw	r22, r28
    8ba8:	61 5b       	subi	r22, 0xB1	; 177
    8baa:	7f 4f       	sbci	r23, 0xFF	; 255
    8bac:	fb 01       	movw	r30, r22
    8bae:	01 90       	ld	r0, Z+
    8bb0:	00 20       	and	r0, r0
    8bb2:	e9 f7       	brne	.-6      	; 0x8bae <_printf_fn+0x738>
    8bb4:	31 97       	sbiw	r30, 0x01	; 1
    8bb6:	e6 1b       	sub	r30, r22
    8bb8:	f7 0b       	sbc	r31, r23
    8bba:	a1 96       	adiw	r28, 0x21	; 33
    8bbc:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bc0:	a1 97       	sbiw	r28, 0x21	; 33
    8bc2:	23 2b       	or	r18, r19
    8bc4:	21 f4       	brne	.+8      	; 0x8bce <_printf_fn+0x758>
    8bc6:	a1 96       	adiw	r28, 0x21	; 33
    8bc8:	ff af       	std	Y+63, r31	; 0x3f
    8bca:	ee af       	std	Y+62, r30	; 0x3e
    8bcc:	a1 97       	sbiw	r28, 0x21	; 33
    8bce:	a1 96       	adiw	r28, 0x21	; 33
    8bd0:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bd2:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bd4:	a1 97       	sbiw	r28, 0x21	; 33
    8bd6:	44 16       	cp	r4, r20
    8bd8:	55 06       	cpc	r5, r21
    8bda:	3c f4       	brge	.+14     	; 0x8bea <_printf_fn+0x774>
    8bdc:	41 14       	cp	r4, r1
    8bde:	51 04       	cpc	r5, r1
    8be0:	21 f0       	breq	.+8      	; 0x8bea <_printf_fn+0x774>
    8be2:	a1 96       	adiw	r28, 0x21	; 33
    8be4:	5f ae       	std	Y+63, r5	; 0x3f
    8be6:	4e ae       	std	Y+62, r4	; 0x3e
    8be8:	a1 97       	sbiw	r28, 0x21	; 33
    8bea:	93 fa       	bst	r9, 3
    8bec:	00 27       	eor	r16, r16
    8bee:	00 f9       	bld	r16, 0
    8bf0:	10 e0       	ldi	r17, 0x00	; 0
    8bf2:	a1 96       	adiw	r28, 0x21	; 33
    8bf4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bf6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bf8:	a1 97       	sbiw	r28, 0x21	; 33
    8bfa:	a2 01       	movw	r20, r4
    8bfc:	a5 96       	adiw	r28, 0x25	; 37
    8bfe:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c00:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c02:	a5 97       	sbiw	r28, 0x25	; 37
    8c04:	f6 db       	rcall	.-2068   	; 0x83f2 <_puts_pad>
    8c06:	17 01       	movw	r2, r14
    8c08:	17 c0       	rjmp	.+46     	; 0x8c38 <_printf_fn+0x7c2>
    8c0a:	f6 01       	movw	r30, r12
    8c0c:	5e 2d       	mov	r21, r14
    8c0e:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
    8c12:	66 23       	and	r22, r22
    8c14:	89 f0       	breq	.+34     	; 0x8c38 <_printf_fn+0x7c2>
    8c16:	5f ef       	ldi	r21, 0xFF	; 255
    8c18:	c5 1a       	sub	r12, r21
    8c1a:	d5 0a       	sbc	r13, r21
    8c1c:	e5 0a       	sbc	r14, r21
    8c1e:	a5 96       	adiw	r28, 0x25	; 37
    8c20:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c22:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c24:	a5 97       	sbiw	r28, 0x25	; 37
    8c26:	ed 91       	ld	r30, X+
    8c28:	fc 91       	ld	r31, X
    8c2a:	11 97       	sbiw	r26, 0x01	; 1
    8c2c:	cd 01       	movw	r24, r26
    8c2e:	09 95       	icall
    8c30:	6c 14       	cp	r6, r12
    8c32:	7d 04       	cpc	r7, r13
    8c34:	8e 04       	cpc	r8, r14
    8c36:	48 f7       	brcc	.-46     	; 0x8c0a <_printf_fn+0x794>
    8c38:	e8 2c       	mov	r14, r8
    8c3a:	63 01       	movw	r12, r6
    8c3c:	4b cc       	rjmp	.-1898   	; 0x84d4 <_printf_fn+0x5e>
    8c3e:	e2 e0       	ldi	r30, 0x02	; 2
    8c40:	f0 e0       	ldi	r31, 0x00	; 0
    8c42:	6f 96       	adiw	r28, 0x1f	; 31
    8c44:	ff af       	std	Y+63, r31	; 0x3f
    8c46:	ee af       	std	Y+62, r30	; 0x3e
    8c48:	6f 97       	sbiw	r28, 0x1f	; 31
    8c4a:	57 cd       	rjmp	.-1362   	; 0x86fa <_printf_fn+0x284>
    8c4c:	6f 96       	adiw	r28, 0x1f	; 31
    8c4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c50:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c52:	6f 97       	sbiw	r28, 0x1f	; 31
    8c54:	32 97       	sbiw	r30, 0x02	; 2
    8c56:	61 f4       	brne	.+24     	; 0x8c70 <_printf_fn+0x7fa>
    8c58:	51 01       	movw	r10, r2
    8c5a:	f2 e0       	ldi	r31, 0x02	; 2
    8c5c:	af 0e       	add	r10, r31
    8c5e:	b1 1c       	adc	r11, r1
    8c60:	d1 01       	movw	r26, r2
    8c62:	8d 91       	ld	r24, X+
    8c64:	9c 91       	ld	r25, X
    8c66:	65 96       	adiw	r28, 0x15	; 21
    8c68:	9f af       	std	Y+63, r25	; 0x3f
    8c6a:	8e af       	std	Y+62, r24	; 0x3e
    8c6c:	65 97       	sbiw	r28, 0x15	; 21
    8c6e:	c5 cd       	rjmp	.-1142   	; 0x87fa <_printf_fn+0x384>
    8c70:	6f 96       	adiw	r28, 0x1f	; 31
    8c72:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c74:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c76:	6f 97       	sbiw	r28, 0x1f	; 31
    8c78:	24 30       	cpi	r18, 0x04	; 4
    8c7a:	31 05       	cpc	r19, r1
    8c7c:	09 f0       	breq	.+2      	; 0x8c80 <_printf_fn+0x80a>
    8c7e:	fe cd       	rjmp	.-1028   	; 0x887c <_printf_fn+0x406>
    8c80:	51 01       	movw	r10, r2
    8c82:	f4 e0       	ldi	r31, 0x04	; 4
    8c84:	af 0e       	add	r10, r31
    8c86:	b1 1c       	adc	r11, r1
    8c88:	f1 01       	movw	r30, r2
    8c8a:	80 81       	ld	r24, Z
    8c8c:	91 81       	ldd	r25, Z+1	; 0x01
    8c8e:	a2 81       	ldd	r26, Z+2	; 0x02
    8c90:	b3 81       	ldd	r27, Z+3	; 0x03
    8c92:	2f 96       	adiw	r28, 0x0f	; 15
    8c94:	8c af       	std	Y+60, r24	; 0x3c
    8c96:	9d af       	std	Y+61, r25	; 0x3d
    8c98:	ae af       	std	Y+62, r26	; 0x3e
    8c9a:	bf af       	std	Y+63, r27	; 0x3f
    8c9c:	2f 97       	sbiw	r28, 0x0f	; 15
    8c9e:	dc cd       	rjmp	.-1096   	; 0x8858 <_printf_fn+0x3e2>
    8ca0:	c5 59       	subi	r28, 0x95	; 149
    8ca2:	df 4f       	sbci	r29, 0xFF	; 255
    8ca4:	e2 e1       	ldi	r30, 0x12	; 18
    8ca6:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

00008caa <vsnprintf_P>:
    8caa:	a8 e0       	ldi	r26, 0x08	; 8
    8cac:	b0 e0       	ldi	r27, 0x00	; 0
    8cae:	eb e5       	ldi	r30, 0x5B	; 91
    8cb0:	f6 e4       	ldi	r31, 0x46	; 70
    8cb2:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
    8cb6:	7c 01       	movw	r14, r24
    8cb8:	cb 01       	movw	r24, r22
    8cba:	64 2f       	mov	r22, r20
    8cbc:	a9 01       	movw	r20, r18
    8cbe:	98 01       	movw	r18, r16
    8cc0:	f7 01       	movw	r30, r14
    8cc2:	10 82       	st	Z, r1
    8cc4:	e2 e6       	ldi	r30, 0x62	; 98
    8cc6:	fe e3       	ldi	r31, 0x3E	; 62
    8cc8:	fa 83       	std	Y+2, r31	; 0x02
    8cca:	e9 83       	std	Y+1, r30	; 0x01
    8ccc:	9e 83       	std	Y+6, r25	; 0x06
    8cce:	8d 83       	std	Y+5, r24	; 0x05
    8cd0:	18 86       	std	Y+8, r1	; 0x08
    8cd2:	1f 82       	std	Y+7, r1	; 0x07
    8cd4:	fc 82       	std	Y+4, r15	; 0x04
    8cd6:	eb 82       	std	Y+3, r14	; 0x03
    8cd8:	ce 01       	movw	r24, r28
    8cda:	01 96       	adiw	r24, 0x01	; 1
    8cdc:	cc db       	rcall	.-2152   	; 0x8476 <_printf_fn>
    8cde:	f7 01       	movw	r30, r14
    8ce0:	01 90       	ld	r0, Z+
    8ce2:	00 20       	and	r0, r0
    8ce4:	e9 f7       	brne	.-6      	; 0x8ce0 <vsnprintf_P+0x36>
    8ce6:	cf 01       	movw	r24, r30
    8ce8:	01 97       	sbiw	r24, 0x01	; 1
    8cea:	8e 19       	sub	r24, r14
    8cec:	9f 09       	sbc	r25, r15
    8cee:	28 96       	adiw	r28, 0x08	; 8
    8cf0:	e6 e0       	ldi	r30, 0x06	; 6
    8cf2:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00008cf6 <snprintf_P>:
    8cf6:	a0 e0       	ldi	r26, 0x00	; 0
    8cf8:	b0 e0       	ldi	r27, 0x00	; 0
    8cfa:	e1 e8       	ldi	r30, 0x81	; 129
    8cfc:	f6 e4       	ldi	r31, 0x46	; 70
    8cfe:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    8d02:	8e 01       	movw	r16, r28
    8d04:	02 5f       	subi	r16, 0xF2	; 242
    8d06:	1f 4f       	sbci	r17, 0xFF	; 255
    8d08:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d0e:	69 85       	ldd	r22, Y+9	; 0x09
    8d10:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d12:	8f 81       	ldd	r24, Y+7	; 0x07
    8d14:	98 85       	ldd	r25, Y+8	; 0x08
    8d16:	c9 df       	rcall	.-110    	; 0x8caa <vsnprintf_P>
    8d18:	e4 e0       	ldi	r30, 0x04	; 4
    8d1a:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

00008d1e <sprintf_P>:
    8d1e:	a0 e0       	ldi	r26, 0x00	; 0
    8d20:	b0 e0       	ldi	r27, 0x00	; 0
    8d22:	e5 e9       	ldi	r30, 0x95	; 149
    8d24:	f6 e4       	ldi	r31, 0x46	; 70
    8d26:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    8d2a:	8e 01       	movw	r16, r28
    8d2c:	04 5f       	subi	r16, 0xF4	; 244
    8d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    8d30:	29 85       	ldd	r18, Y+9	; 0x09
    8d32:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d34:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d36:	60 e0       	ldi	r22, 0x00	; 0
    8d38:	74 e0       	ldi	r23, 0x04	; 4
    8d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    8d3c:	98 85       	ldd	r25, Y+8	; 0x08
    8d3e:	b5 df       	rcall	.-150    	; 0x8caa <vsnprintf_P>
    8d40:	e4 e0       	ldi	r30, 0x04	; 4
    8d42:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

00008d46 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8d46:	a8 e0       	ldi	r26, 0x08	; 8
    8d48:	b0 e0       	ldi	r27, 0x00	; 0
    8d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    8d4c:	f6 e4       	ldi	r31, 0x46	; 70
    8d4e:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    8d52:	9e 01       	movw	r18, r28
    8d54:	23 5f       	subi	r18, 0xF3	; 243
    8d56:	3f 4f       	sbci	r19, 0xFF	; 255
    8d58:	f9 01       	movw	r30, r18
    8d5a:	41 91       	ld	r20, Z+
    8d5c:	51 91       	ld	r21, Z+
    8d5e:	61 91       	ld	r22, Z+
    8d60:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8d62:	8b e7       	ldi	r24, 0x7B	; 123
    8d64:	9e e3       	ldi	r25, 0x3E	; 62
    8d66:	9a 83       	std	Y+2, r25	; 0x02
    8d68:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8d6a:	18 86       	std	Y+8, r1	; 0x08
    8d6c:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8d6e:	ce 01       	movw	r24, r28
    8d70:	01 96       	adiw	r24, 0x01	; 1
    8d72:	81 db       	rcall	.-2302   	; 0x8476 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8d74:	8f 81       	ldd	r24, Y+7	; 0x07
    8d76:	98 85       	ldd	r25, Y+8	; 0x08
    8d78:	28 96       	adiw	r28, 0x08	; 8
    8d7a:	e2 e0       	ldi	r30, 0x02	; 2
    8d7c:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00008d80 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8d80:	9c 01       	movw	r18, r24
    8d82:	20 53       	subi	r18, 0x30	; 48
    8d84:	31 09       	sbc	r19, r1
    8d86:	2a 30       	cpi	r18, 0x0A	; 10
    8d88:	31 05       	cpc	r19, r1
    8d8a:	10 f4       	brcc	.+4      	; 0x8d90 <atodigit+0x10>
    8d8c:	c9 01       	movw	r24, r18
    8d8e:	10 c0       	rjmp	.+32     	; 0x8db0 <atodigit+0x30>
    8d90:	9c 01       	movw	r18, r24
    8d92:	21 54       	subi	r18, 0x41	; 65
    8d94:	31 09       	sbc	r19, r1
    8d96:	26 30       	cpi	r18, 0x06	; 6
    8d98:	31 05       	cpc	r19, r1
    8d9a:	10 f4       	brcc	.+4      	; 0x8da0 <atodigit+0x20>
    8d9c:	c7 97       	sbiw	r24, 0x37	; 55
    8d9e:	08 c0       	rjmp	.+16     	; 0x8db0 <atodigit+0x30>
    8da0:	9c 01       	movw	r18, r24
    8da2:	21 56       	subi	r18, 0x61	; 97
    8da4:	31 09       	sbc	r19, r1
    8da6:	26 30       	cpi	r18, 0x06	; 6
    8da8:	31 05       	cpc	r19, r1
    8daa:	28 f4       	brcc	.+10     	; 0x8db6 <atodigit+0x36>
    8dac:	87 55       	subi	r24, 0x57	; 87
    8dae:	91 09       	sbc	r25, r1
    8db0:	86 17       	cp	r24, r22
    8db2:	97 07       	cpc	r25, r23
    8db4:	14 f0       	brlt	.+4      	; 0x8dba <atodigit+0x3a>
    8db6:	8f ef       	ldi	r24, 0xFF	; 255
    8db8:	9f ef       	ldi	r25, 0xFF	; 255
    8dba:	08 95       	ret

00008dbc <strtol>:
    8dbc:	a0 e0       	ldi	r26, 0x00	; 0
    8dbe:	b0 e0       	ldi	r27, 0x00	; 0
    8dc0:	e4 ee       	ldi	r30, 0xE4	; 228
    8dc2:	f6 e4       	ldi	r31, 0x46	; 70
    8dc4:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    8dc8:	2b 01       	movw	r4, r22
    8dca:	8a 01       	movw	r16, r20
    8dcc:	ec 01       	movw	r28, r24
    8dce:	28 81       	ld	r18, Y
    8dd0:	01 96       	adiw	r24, 0x01	; 1
    8dd2:	20 32       	cpi	r18, 0x20	; 32
    8dd4:	d9 f3       	breq	.-10     	; 0x8dcc <strtol+0x10>
    8dd6:	29 30       	cpi	r18, 0x09	; 9
    8dd8:	c9 f3       	breq	.-14     	; 0x8dcc <strtol+0x10>
    8dda:	2d 32       	cpi	r18, 0x2D	; 45
    8ddc:	29 f4       	brne	.+10     	; 0x8de8 <strtol+0x2c>
    8dde:	ec 01       	movw	r28, r24
    8de0:	66 24       	eor	r6, r6
    8de2:	63 94       	inc	r6
    8de4:	71 2c       	mov	r7, r1
    8de6:	05 c0       	rjmp	.+10     	; 0x8df2 <strtol+0x36>
    8de8:	2b 32       	cpi	r18, 0x2B	; 43
    8dea:	09 f4       	brne	.+2      	; 0x8dee <strtol+0x32>
    8dec:	ec 01       	movw	r28, r24
    8dee:	61 2c       	mov	r6, r1
    8df0:	71 2c       	mov	r7, r1
    8df2:	9e 01       	movw	r18, r28
    8df4:	2f 5f       	subi	r18, 0xFF	; 255
    8df6:	3f 4f       	sbci	r19, 0xFF	; 255
    8df8:	88 81       	ld	r24, Y
    8dfa:	80 33       	cpi	r24, 0x30	; 48
    8dfc:	11 f4       	brne	.+4      	; 0x8e02 <strtol+0x46>
    8dfe:	e9 01       	movw	r28, r18
    8e00:	f8 cf       	rjmp	.-16     	; 0x8df2 <strtol+0x36>
    8e02:	c1 2c       	mov	r12, r1
    8e04:	d1 2c       	mov	r13, r1
    8e06:	76 01       	movw	r14, r12
    8e08:	48 01       	movw	r8, r16
    8e0a:	01 2e       	mov	r0, r17
    8e0c:	00 0c       	add	r0, r0
    8e0e:	aa 08       	sbc	r10, r10
    8e10:	bb 08       	sbc	r11, r11
    8e12:	3c 2e       	mov	r3, r28
    8e14:	2d 2e       	mov	r2, r29
    8e16:	89 91       	ld	r24, Y+
    8e18:	88 23       	and	r24, r24
    8e1a:	31 f0       	breq	.+12     	; 0x8e28 <strtol+0x6c>
    8e1c:	b8 01       	movw	r22, r16
    8e1e:	90 e0       	ldi	r25, 0x00	; 0
    8e20:	af df       	rcall	.-162    	; 0x8d80 <atodigit>
    8e22:	fc 01       	movw	r30, r24
    8e24:	97 ff       	sbrs	r25, 7
    8e26:	0c c0       	rjmp	.+24     	; 0x8e40 <strtol+0x84>
    8e28:	61 14       	cp	r6, r1
    8e2a:	71 04       	cpc	r7, r1
    8e2c:	c1 f0       	breq	.+48     	; 0x8e5e <strtol+0xa2>
    8e2e:	f0 94       	com	r15
    8e30:	e0 94       	com	r14
    8e32:	d0 94       	com	r13
    8e34:	c0 94       	com	r12
    8e36:	c1 1c       	adc	r12, r1
    8e38:	d1 1c       	adc	r13, r1
    8e3a:	e1 1c       	adc	r14, r1
    8e3c:	f1 1c       	adc	r15, r1
    8e3e:	0f c0       	rjmp	.+30     	; 0x8e5e <strtol+0xa2>
    8e40:	a5 01       	movw	r20, r10
    8e42:	94 01       	movw	r18, r8
    8e44:	c7 01       	movw	r24, r14
    8e46:	b6 01       	movw	r22, r12
    8e48:	0e 94 6c ea 	call	0x1d4d8	; 0x1d4d8 <__mulsi3>
    8e4c:	6f 01       	movw	r12, r30
    8e4e:	ff 0f       	add	r31, r31
    8e50:	ee 08       	sbc	r14, r14
    8e52:	ff 08       	sbc	r15, r15
    8e54:	c6 0e       	add	r12, r22
    8e56:	d7 1e       	adc	r13, r23
    8e58:	e8 1e       	adc	r14, r24
    8e5a:	f9 1e       	adc	r15, r25
    8e5c:	da cf       	rjmp	.-76     	; 0x8e12 <strtol+0x56>
    8e5e:	41 14       	cp	r4, r1
    8e60:	51 04       	cpc	r5, r1
    8e62:	19 f0       	breq	.+6      	; 0x8e6a <strtol+0xae>
    8e64:	f2 01       	movw	r30, r4
    8e66:	30 82       	st	Z, r3
    8e68:	21 82       	std	Z+1, r2	; 0x01
    8e6a:	c7 01       	movw	r24, r14
    8e6c:	b6 01       	movw	r22, r12
    8e6e:	cd b7       	in	r28, 0x3d	; 61
    8e70:	de b7       	in	r29, 0x3e	; 62
    8e72:	e2 e1       	ldi	r30, 0x12	; 18
    8e74:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

00008e78 <atoh>:
    8e78:	40 e1       	ldi	r20, 0x10	; 16
    8e7a:	50 e0       	ldi	r21, 0x00	; 0
    8e7c:	60 e0       	ldi	r22, 0x00	; 0
    8e7e:	70 e0       	ldi	r23, 0x00	; 0
    8e80:	9d cf       	rjmp	.-198    	; 0x8dbc <strtol>
    8e82:	08 95       	ret

00008e84 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e84:	4a e0       	ldi	r20, 0x0A	; 10
    8e86:	50 e0       	ldi	r21, 0x00	; 0
    8e88:	60 e0       	ldi	r22, 0x00	; 0
    8e8a:	70 e0       	ldi	r23, 0x00	; 0
    8e8c:	97 df       	rcall	.-210    	; 0x8dbc <strtol>
    return((int)num);
}
    8e8e:	cb 01       	movw	r24, r22
    8e90:	08 95       	ret

00008e92 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e92:	4a e0       	ldi	r20, 0x0A	; 10
    8e94:	50 e0       	ldi	r21, 0x00	; 0
    8e96:	60 e0       	ldi	r22, 0x00	; 0
    8e98:	70 e0       	ldi	r23, 0x00	; 0
    8e9a:	90 cf       	rjmp	.-224    	; 0x8dbc <strtol>
    return(num);
}
    8e9c:	08 95       	ret

00008e9e <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8e9e:	fc 01       	movw	r30, r24
    8ea0:	62 81       	ldd	r22, Z+2	; 0x02
    8ea2:	73 81       	ldd	r23, Z+3	; 0x03
    8ea4:	cb 01       	movw	r24, r22
    8ea6:	a0 e0       	ldi	r26, 0x00	; 0
    8ea8:	b0 e0       	ldi	r27, 0x00	; 0
    8eaa:	ba 2f       	mov	r27, r26
    8eac:	a9 2f       	mov	r26, r25
    8eae:	98 2f       	mov	r25, r24
    8eb0:	88 27       	eor	r24, r24
    8eb2:	21 81       	ldd	r18, Z+1	; 0x01
    8eb4:	82 2b       	or	r24, r18
    8eb6:	ba 2f       	mov	r27, r26
    8eb8:	a9 2f       	mov	r26, r25
    8eba:	98 2f       	mov	r25, r24
    8ebc:	88 27       	eor	r24, r24
    8ebe:	20 81       	ld	r18, Z
    8ec0:	bc 01       	movw	r22, r24
    8ec2:	cd 01       	movw	r24, r26
    8ec4:	62 2b       	or	r22, r18
    8ec6:	08 95       	ret

00008ec8 <st_dword>:
    8ec8:	fc 01       	movw	r30, r24
    8eca:	40 83       	st	Z, r20
    8ecc:	51 83       	std	Z+1, r21	; 0x01
    8ece:	62 83       	std	Z+2, r22	; 0x02
    8ed0:	73 83       	std	Z+3, r23	; 0x03
    8ed2:	08 95       	ret

00008ed4 <mem_set>:
    8ed4:	48 0f       	add	r20, r24
    8ed6:	59 1f       	adc	r21, r25
    8ed8:	fc 01       	movw	r30, r24
    8eda:	61 93       	st	Z+, r22
    8edc:	cf 01       	movw	r24, r30
    8ede:	e4 17       	cp	r30, r20
    8ee0:	f5 07       	cpc	r31, r21
    8ee2:	d1 f7       	brne	.-12     	; 0x8ed8 <mem_set+0x4>
    8ee4:	08 95       	ret

00008ee6 <clust2sect>:
    8ee6:	0f 93       	push	r16
    8ee8:	1f 93       	push	r17
    8eea:	fc 01       	movw	r30, r24
    8eec:	9a 01       	movw	r18, r20
    8eee:	ab 01       	movw	r20, r22
    8ef0:	22 50       	subi	r18, 0x02	; 2
    8ef2:	31 09       	sbc	r19, r1
    8ef4:	41 09       	sbc	r20, r1
    8ef6:	51 09       	sbc	r21, r1
    8ef8:	81 8d       	ldd	r24, Z+25	; 0x19
    8efa:	92 8d       	ldd	r25, Z+26	; 0x1a
    8efc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8efe:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8f00:	02 97       	sbiw	r24, 0x02	; 2
    8f02:	a1 09       	sbc	r26, r1
    8f04:	b1 09       	sbc	r27, r1
    8f06:	28 17       	cp	r18, r24
    8f08:	39 07       	cpc	r19, r25
    8f0a:	4a 07       	cpc	r20, r26
    8f0c:	5b 07       	cpc	r21, r27
    8f0e:	68 f4       	brcc	.+26     	; 0x8f2a <clust2sect+0x44>
    8f10:	a1 85       	ldd	r26, Z+9	; 0x09
    8f12:	b2 85       	ldd	r27, Z+10	; 0x0a
    8f14:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    8f18:	05 a5       	ldd	r16, Z+45	; 0x2d
    8f1a:	16 a5       	ldd	r17, Z+46	; 0x2e
    8f1c:	27 a5       	ldd	r18, Z+47	; 0x2f
    8f1e:	30 a9       	ldd	r19, Z+48	; 0x30
    8f20:	60 0f       	add	r22, r16
    8f22:	71 1f       	adc	r23, r17
    8f24:	82 1f       	adc	r24, r18
    8f26:	93 1f       	adc	r25, r19
    8f28:	03 c0       	rjmp	.+6      	; 0x8f30 <clust2sect+0x4a>
    8f2a:	60 e0       	ldi	r22, 0x00	; 0
    8f2c:	70 e0       	ldi	r23, 0x00	; 0
    8f2e:	cb 01       	movw	r24, r22
    8f30:	1f 91       	pop	r17
    8f32:	0f 91       	pop	r16
    8f34:	08 95       	ret

00008f36 <clmt_clust>:
    8f36:	cf 93       	push	r28
    8f38:	df 93       	push	r29
    8f3a:	fc 01       	movw	r30, r24
    8f3c:	c2 a1       	ldd	r28, Z+34	; 0x22
    8f3e:	d3 a1       	ldd	r29, Z+35	; 0x23
    8f40:	24 96       	adiw	r28, 0x04	; 4
    8f42:	cb 01       	movw	r24, r22
    8f44:	ba 01       	movw	r22, r20
    8f46:	29 e0       	ldi	r18, 0x09	; 9
    8f48:	96 95       	lsr	r25
    8f4a:	87 95       	ror	r24
    8f4c:	77 95       	ror	r23
    8f4e:	67 95       	ror	r22
    8f50:	2a 95       	dec	r18
    8f52:	d1 f7       	brne	.-12     	; 0x8f48 <clmt_clust+0x12>
    8f54:	01 90       	ld	r0, Z+
    8f56:	f0 81       	ld	r31, Z
    8f58:	e0 2d       	mov	r30, r0
    8f5a:	21 85       	ldd	r18, Z+9	; 0x09
    8f5c:	32 85       	ldd	r19, Z+10	; 0x0a
    8f5e:	40 e0       	ldi	r20, 0x00	; 0
    8f60:	50 e0       	ldi	r21, 0x00	; 0
    8f62:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    8f66:	88 81       	ld	r24, Y
    8f68:	99 81       	ldd	r25, Y+1	; 0x01
    8f6a:	aa 81       	ldd	r26, Y+2	; 0x02
    8f6c:	bb 81       	ldd	r27, Y+3	; 0x03
    8f6e:	00 97       	sbiw	r24, 0x00	; 0
    8f70:	a1 05       	cpc	r26, r1
    8f72:	b1 05       	cpc	r27, r1
    8f74:	b1 f0       	breq	.+44     	; 0x8fa2 <clmt_clust+0x6c>
    8f76:	28 17       	cp	r18, r24
    8f78:	39 07       	cpc	r19, r25
    8f7a:	4a 07       	cpc	r20, r26
    8f7c:	5b 07       	cpc	r21, r27
    8f7e:	30 f0       	brcs	.+12     	; 0x8f8c <clmt_clust+0x56>
    8f80:	28 1b       	sub	r18, r24
    8f82:	39 0b       	sbc	r19, r25
    8f84:	4a 0b       	sbc	r20, r26
    8f86:	5b 0b       	sbc	r21, r27
    8f88:	28 96       	adiw	r28, 0x08	; 8
    8f8a:	ed cf       	rjmp	.-38     	; 0x8f66 <clmt_clust+0x30>
    8f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    8f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    8f90:	ae 81       	ldd	r26, Y+6	; 0x06
    8f92:	bf 81       	ldd	r27, Y+7	; 0x07
    8f94:	bc 01       	movw	r22, r24
    8f96:	cd 01       	movw	r24, r26
    8f98:	62 0f       	add	r22, r18
    8f9a:	73 1f       	adc	r23, r19
    8f9c:	84 1f       	adc	r24, r20
    8f9e:	95 1f       	adc	r25, r21
    8fa0:	03 c0       	rjmp	.+6      	; 0x8fa8 <clmt_clust+0x72>
    8fa2:	60 e0       	ldi	r22, 0x00	; 0
    8fa4:	70 e0       	ldi	r23, 0x00	; 0
    8fa6:	cb 01       	movw	r24, r22
    8fa8:	df 91       	pop	r29
    8faa:	cf 91       	pop	r28
    8fac:	08 95       	ret

00008fae <sum_sfn>:
    8fae:	fc 01       	movw	r30, r24
    8fb0:	9c 01       	movw	r18, r24
    8fb2:	25 5f       	subi	r18, 0xF5	; 245
    8fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    8fb6:	80 e0       	ldi	r24, 0x00	; 0
    8fb8:	98 2f       	mov	r25, r24
    8fba:	90 fb       	bst	r25, 0
    8fbc:	97 95       	ror	r25
    8fbe:	97 f9       	bld	r25, 7
    8fc0:	81 91       	ld	r24, Z+
    8fc2:	89 0f       	add	r24, r25
    8fc4:	e2 17       	cp	r30, r18
    8fc6:	f3 07       	cpc	r31, r19
    8fc8:	b9 f7       	brne	.-18     	; 0x8fb8 <sum_sfn+0xa>
    8fca:	08 95       	ret

00008fcc <get_ldnumber>:
    8fcc:	dc 01       	movw	r26, r24
    8fce:	ed 91       	ld	r30, X+
    8fd0:	fc 91       	ld	r31, X
    8fd2:	30 97       	sbiw	r30, 0x00	; 0
    8fd4:	c1 f0       	breq	.+48     	; 0x9006 <get_ldnumber+0x3a>
    8fd6:	df 01       	movw	r26, r30
    8fd8:	9d 01       	movw	r18, r26
    8fda:	4d 91       	ld	r20, X+
    8fdc:	40 32       	cpi	r20, 0x20	; 32
    8fde:	80 f0       	brcs	.+32     	; 0x9000 <get_ldnumber+0x34>
    8fe0:	4a 33       	cpi	r20, 0x3A	; 58
    8fe2:	d1 f7       	brne	.-12     	; 0x8fd8 <get_ldnumber+0xc>
    8fe4:	af 01       	movw	r20, r30
    8fe6:	4f 5f       	subi	r20, 0xFF	; 255
    8fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    8fea:	24 17       	cp	r18, r20
    8fec:	35 07       	cpc	r19, r21
    8fee:	59 f4       	brne	.+22     	; 0x9006 <get_ldnumber+0x3a>
    8ff0:	40 81       	ld	r20, Z
    8ff2:	40 33       	cpi	r20, 0x30	; 48
    8ff4:	41 f4       	brne	.+16     	; 0x9006 <get_ldnumber+0x3a>
    8ff6:	2f 5f       	subi	r18, 0xFF	; 255
    8ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    8ffa:	fc 01       	movw	r30, r24
    8ffc:	31 83       	std	Z+1, r19	; 0x01
    8ffe:	20 83       	st	Z, r18
    9000:	80 e0       	ldi	r24, 0x00	; 0
    9002:	90 e0       	ldi	r25, 0x00	; 0
    9004:	08 95       	ret
    9006:	8f ef       	ldi	r24, 0xFF	; 255
    9008:	9f ef       	ldi	r25, 0xFF	; 255
    900a:	08 95       	ret

0000900c <validate>:
    900c:	0f 93       	push	r16
    900e:	1f 93       	push	r17
    9010:	cf 93       	push	r28
    9012:	df 93       	push	r29
    9014:	ec 01       	movw	r28, r24
    9016:	8b 01       	movw	r16, r22
    9018:	89 2b       	or	r24, r25
    901a:	31 f4       	brne	.+12     	; 0x9028 <validate+0x1c>
    901c:	f8 01       	movw	r30, r16
    901e:	11 82       	std	Z+1, r1	; 0x01
    9020:	10 82       	st	Z, r1
    9022:	89 e0       	ldi	r24, 0x09	; 9
    9024:	90 e0       	ldi	r25, 0x00	; 0
    9026:	1a c0       	rjmp	.+52     	; 0x905c <validate+0x50>
    9028:	e8 81       	ld	r30, Y
    902a:	f9 81       	ldd	r31, Y+1	; 0x01
    902c:	30 97       	sbiw	r30, 0x00	; 0
    902e:	b1 f3       	breq	.-20     	; 0x901c <validate+0x10>
    9030:	80 81       	ld	r24, Z
    9032:	88 23       	and	r24, r24
    9034:	99 f3       	breq	.-26     	; 0x901c <validate+0x10>
    9036:	25 81       	ldd	r18, Z+5	; 0x05
    9038:	36 81       	ldd	r19, Z+6	; 0x06
    903a:	8a 81       	ldd	r24, Y+2	; 0x02
    903c:	9b 81       	ldd	r25, Y+3	; 0x03
    903e:	28 17       	cp	r18, r24
    9040:	39 07       	cpc	r19, r25
    9042:	61 f7       	brne	.-40     	; 0x901c <validate+0x10>
    9044:	81 81       	ldd	r24, Z+1	; 0x01
    9046:	0e 94 75 6e 	call	0xdcea	; 0xdcea <disk_status>
    904a:	80 fd       	sbrc	r24, 0
    904c:	e7 cf       	rjmp	.-50     	; 0x901c <validate+0x10>
    904e:	88 81       	ld	r24, Y
    9050:	99 81       	ldd	r25, Y+1	; 0x01
    9052:	f8 01       	movw	r30, r16
    9054:	91 83       	std	Z+1, r25	; 0x01
    9056:	80 83       	st	Z, r24
    9058:	80 e0       	ldi	r24, 0x00	; 0
    905a:	90 e0       	ldi	r25, 0x00	; 0
    905c:	df 91       	pop	r29
    905e:	cf 91       	pop	r28
    9060:	1f 91       	pop	r17
    9062:	0f 91       	pop	r16
    9064:	08 95       	ret

00009066 <mem_cpy.part.0>:
    9066:	fb 01       	movw	r30, r22
    9068:	48 0f       	add	r20, r24
    906a:	59 1f       	adc	r21, r25
    906c:	21 91       	ld	r18, Z+
    906e:	dc 01       	movw	r26, r24
    9070:	2d 93       	st	X+, r18
    9072:	cd 01       	movw	r24, r26
    9074:	a4 17       	cp	r26, r20
    9076:	b5 07       	cpc	r27, r21
    9078:	c9 f7       	brne	.-14     	; 0x906c <mem_cpy.part.0+0x6>
    907a:	08 95       	ret

0000907c <ld_clust.isra.1>:
    907c:	fb 01       	movw	r30, r22
    907e:	42 8d       	ldd	r20, Z+26	; 0x1a
    9080:	53 8d       	ldd	r21, Z+27	; 0x1b
    9082:	60 e0       	ldi	r22, 0x00	; 0
    9084:	70 e0       	ldi	r23, 0x00	; 0
    9086:	83 30       	cpi	r24, 0x03	; 3
    9088:	59 f4       	brne	.+22     	; 0x90a0 <ld_clust.isra.1+0x24>
    908a:	84 89       	ldd	r24, Z+20	; 0x14
    908c:	95 89       	ldd	r25, Z+21	; 0x15
    908e:	a0 e0       	ldi	r26, 0x00	; 0
    9090:	b0 e0       	ldi	r27, 0x00	; 0
    9092:	dc 01       	movw	r26, r24
    9094:	99 27       	eor	r25, r25
    9096:	88 27       	eor	r24, r24
    9098:	48 2b       	or	r20, r24
    909a:	59 2b       	or	r21, r25
    909c:	6a 2b       	or	r22, r26
    909e:	7b 2b       	or	r23, r27
    90a0:	cb 01       	movw	r24, r22
    90a2:	ba 01       	movw	r22, r20
    90a4:	08 95       	ret

000090a6 <st_clust.isra.2>:
    90a6:	fb 01       	movw	r30, r22
    90a8:	22 8f       	std	Z+26, r18	; 0x1a
    90aa:	33 8f       	std	Z+27, r19	; 0x1b
    90ac:	dc 01       	movw	r26, r24
    90ae:	8c 91       	ld	r24, X
    90b0:	83 30       	cpi	r24, 0x03	; 3
    90b2:	29 f4       	brne	.+10     	; 0x90be <st_clust.isra.2+0x18>
    90b4:	ca 01       	movw	r24, r20
    90b6:	aa 27       	eor	r26, r26
    90b8:	bb 27       	eor	r27, r27
    90ba:	84 8b       	std	Z+20, r24	; 0x14
    90bc:	95 8b       	std	Z+21, r25	; 0x15
    90be:	08 95       	ret

000090c0 <sync_window.part.3>:
    90c0:	a0 e0       	ldi	r26, 0x00	; 0
    90c2:	b0 e0       	ldi	r27, 0x00	; 0
    90c4:	e6 e6       	ldi	r30, 0x66	; 102
    90c6:	f8 e4       	ldi	r31, 0x48	; 72
    90c8:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
    90cc:	ec 01       	movw	r28, r24
    90ce:	89 a8       	ldd	r8, Y+49	; 0x31
    90d0:	9a a8       	ldd	r9, Y+50	; 0x32
    90d2:	ab a8       	ldd	r10, Y+51	; 0x33
    90d4:	bc a8       	ldd	r11, Y+52	; 0x34
    90d6:	6c 01       	movw	r12, r24
    90d8:	85 e3       	ldi	r24, 0x35	; 53
    90da:	c8 0e       	add	r12, r24
    90dc:	d1 1c       	adc	r13, r1
    90de:	01 e0       	ldi	r16, 0x01	; 1
    90e0:	10 e0       	ldi	r17, 0x00	; 0
    90e2:	a5 01       	movw	r20, r10
    90e4:	94 01       	movw	r18, r8
    90e6:	b6 01       	movw	r22, r12
    90e8:	89 81       	ldd	r24, Y+1	; 0x01
    90ea:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    90ee:	89 2b       	or	r24, r25
    90f0:	89 f5       	brne	.+98     	; 0x9154 <sync_window.part.3+0x94>
    90f2:	1b 82       	std	Y+3, r1	; 0x03
    90f4:	8d a1       	ldd	r24, Y+37	; 0x25
    90f6:	9e a1       	ldd	r25, Y+38	; 0x26
    90f8:	af a1       	ldd	r26, Y+39	; 0x27
    90fa:	b8 a5       	ldd	r27, Y+40	; 0x28
    90fc:	b5 01       	movw	r22, r10
    90fe:	a4 01       	movw	r20, r8
    9100:	48 1b       	sub	r20, r24
    9102:	59 0b       	sbc	r21, r25
    9104:	6a 0b       	sbc	r22, r26
    9106:	7b 0b       	sbc	r23, r27
    9108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    910a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    910c:	af 8d       	ldd	r26, Y+31	; 0x1f
    910e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9110:	48 17       	cp	r20, r24
    9112:	59 07       	cpc	r21, r25
    9114:	6a 07       	cpc	r22, r26
    9116:	7b 07       	cpc	r23, r27
    9118:	18 f0       	brcs	.+6      	; 0x9120 <sync_window.part.3+0x60>
    911a:	80 e0       	ldi	r24, 0x00	; 0
    911c:	90 e0       	ldi	r25, 0x00	; 0
    911e:	1c c0       	rjmp	.+56     	; 0x9158 <sync_window.part.3+0x98>
    9120:	ea 80       	ldd	r14, Y+2	; 0x02
    9122:	f1 2c       	mov	r15, r1
    9124:	82 e0       	ldi	r24, 0x02	; 2
    9126:	e8 16       	cp	r14, r24
    9128:	f1 04       	cpc	r15, r1
    912a:	b8 f3       	brcs	.-18     	; 0x911a <sync_window.part.3+0x5a>
    912c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    912e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9130:	af 8d       	ldd	r26, Y+31	; 0x1f
    9132:	b8 a1       	ldd	r27, Y+32	; 0x20
    9134:	88 0e       	add	r8, r24
    9136:	99 1e       	adc	r9, r25
    9138:	aa 1e       	adc	r10, r26
    913a:	bb 1e       	adc	r11, r27
    913c:	01 e0       	ldi	r16, 0x01	; 1
    913e:	10 e0       	ldi	r17, 0x00	; 0
    9140:	a5 01       	movw	r20, r10
    9142:	94 01       	movw	r18, r8
    9144:	b6 01       	movw	r22, r12
    9146:	89 81       	ldd	r24, Y+1	; 0x01
    9148:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    914c:	81 e0       	ldi	r24, 0x01	; 1
    914e:	e8 1a       	sub	r14, r24
    9150:	f1 08       	sbc	r15, r1
    9152:	e8 cf       	rjmp	.-48     	; 0x9124 <sync_window.part.3+0x64>
    9154:	81 e0       	ldi	r24, 0x01	; 1
    9156:	90 e0       	ldi	r25, 0x00	; 0
    9158:	cd b7       	in	r28, 0x3d	; 61
    915a:	de b7       	in	r29, 0x3e	; 62
    915c:	ec e0       	ldi	r30, 0x0C	; 12
    915e:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

00009162 <sync_window>:
    9162:	fc 01       	movw	r30, r24
    9164:	23 81       	ldd	r18, Z+3	; 0x03
    9166:	22 23       	and	r18, r18
    9168:	11 f0       	breq	.+4      	; 0x916e <sync_window+0xc>
    916a:	aa cf       	rjmp	.-172    	; 0x90c0 <sync_window.part.3>
    916c:	08 95       	ret
    916e:	80 e0       	ldi	r24, 0x00	; 0
    9170:	90 e0       	ldi	r25, 0x00	; 0
    9172:	08 95       	ret

00009174 <sync_fs>:
    9174:	ef 92       	push	r14
    9176:	ff 92       	push	r15
    9178:	0f 93       	push	r16
    917a:	1f 93       	push	r17
    917c:	cf 93       	push	r28
    917e:	df 93       	push	r29
    9180:	ec 01       	movw	r28, r24
    9182:	ef df       	rcall	.-34     	; 0x9162 <sync_window>
    9184:	00 97       	sbiw	r24, 0x00	; 0
    9186:	09 f0       	breq	.+2      	; 0x918a <sync_fs+0x16>
    9188:	5c c0       	rjmp	.+184    	; 0x9242 <sync_fs+0xce>
    918a:	88 81       	ld	r24, Y
    918c:	83 30       	cpi	r24, 0x03	; 3
    918e:	09 f0       	breq	.+2      	; 0x9192 <sync_fs+0x1e>
    9190:	4b c0       	rjmp	.+150    	; 0x9228 <sync_fs+0xb4>
    9192:	8c 81       	ldd	r24, Y+4	; 0x04
    9194:	81 30       	cpi	r24, 0x01	; 1
    9196:	09 f0       	breq	.+2      	; 0x919a <sync_fs+0x26>
    9198:	47 c0       	rjmp	.+142    	; 0x9228 <sync_fs+0xb4>
    919a:	40 e0       	ldi	r20, 0x00	; 0
    919c:	52 e0       	ldi	r21, 0x02	; 2
    919e:	60 e0       	ldi	r22, 0x00	; 0
    91a0:	70 e0       	ldi	r23, 0x00	; 0
    91a2:	7e 01       	movw	r14, r28
    91a4:	85 e3       	ldi	r24, 0x35	; 53
    91a6:	e8 0e       	add	r14, r24
    91a8:	f1 1c       	adc	r15, r1
    91aa:	c7 01       	movw	r24, r14
    91ac:	93 de       	rcall	.-730    	; 0x8ed4 <mem_set>
    91ae:	85 e5       	ldi	r24, 0x55	; 85
    91b0:	fe 01       	movw	r30, r28
    91b2:	ed 5c       	subi	r30, 0xCD	; 205
    91b4:	fd 4f       	sbci	r31, 0xFD	; 253
    91b6:	80 83       	st	Z, r24
    91b8:	8a ea       	ldi	r24, 0xAA	; 170
    91ba:	31 96       	adiw	r30, 0x01	; 1
    91bc:	80 83       	st	Z, r24
    91be:	82 e5       	ldi	r24, 0x52	; 82
    91c0:	8d ab       	std	Y+53, r24	; 0x35
    91c2:	8e ab       	std	Y+54, r24	; 0x36
    91c4:	81 e6       	ldi	r24, 0x61	; 97
    91c6:	8f ab       	std	Y+55, r24	; 0x37
    91c8:	91 e4       	ldi	r25, 0x41	; 65
    91ca:	98 af       	std	Y+56, r25	; 0x38
    91cc:	22 e7       	ldi	r18, 0x72	; 114
    91ce:	7b 97       	sbiw	r30, 0x1b	; 27
    91d0:	20 83       	st	Z, r18
    91d2:	31 96       	adiw	r30, 0x01	; 1
    91d4:	20 83       	st	Z, r18
    91d6:	31 96       	adiw	r30, 0x01	; 1
    91d8:	90 83       	st	Z, r25
    91da:	31 96       	adiw	r30, 0x01	; 1
    91dc:	80 83       	st	Z, r24
    91de:	49 89       	ldd	r20, Y+17	; 0x11
    91e0:	5a 89       	ldd	r21, Y+18	; 0x12
    91e2:	6b 89       	ldd	r22, Y+19	; 0x13
    91e4:	7c 89       	ldd	r23, Y+20	; 0x14
    91e6:	ce 01       	movw	r24, r28
    91e8:	83 5e       	subi	r24, 0xE3	; 227
    91ea:	9d 4f       	sbci	r25, 0xFD	; 253
    91ec:	6d de       	rcall	.-806    	; 0x8ec8 <st_dword>
    91ee:	4d 85       	ldd	r20, Y+13	; 0x0d
    91f0:	5e 85       	ldd	r21, Y+14	; 0x0e
    91f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    91f4:	78 89       	ldd	r23, Y+16	; 0x10
    91f6:	ce 01       	movw	r24, r28
    91f8:	8f 5d       	subi	r24, 0xDF	; 223
    91fa:	9d 4f       	sbci	r25, 0xFD	; 253
    91fc:	65 de       	rcall	.-822    	; 0x8ec8 <st_dword>
    91fe:	89 a1       	ldd	r24, Y+33	; 0x21
    9200:	9a a1       	ldd	r25, Y+34	; 0x22
    9202:	ab a1       	ldd	r26, Y+35	; 0x23
    9204:	bc a1       	ldd	r27, Y+36	; 0x24
    9206:	9c 01       	movw	r18, r24
    9208:	ad 01       	movw	r20, r26
    920a:	2f 5f       	subi	r18, 0xFF	; 255
    920c:	3f 4f       	sbci	r19, 0xFF	; 255
    920e:	4f 4f       	sbci	r20, 0xFF	; 255
    9210:	5f 4f       	sbci	r21, 0xFF	; 255
    9212:	29 ab       	std	Y+49, r18	; 0x31
    9214:	3a ab       	std	Y+50, r19	; 0x32
    9216:	4b ab       	std	Y+51, r20	; 0x33
    9218:	5c ab       	std	Y+52, r21	; 0x34
    921a:	01 e0       	ldi	r16, 0x01	; 1
    921c:	10 e0       	ldi	r17, 0x00	; 0
    921e:	b7 01       	movw	r22, r14
    9220:	89 81       	ldd	r24, Y+1	; 0x01
    9222:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    9226:	1c 82       	std	Y+4, r1	; 0x04
    9228:	40 e0       	ldi	r20, 0x00	; 0
    922a:	50 e0       	ldi	r21, 0x00	; 0
    922c:	60 e0       	ldi	r22, 0x00	; 0
    922e:	89 81       	ldd	r24, Y+1	; 0x01
    9230:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <disk_ioctl>
    9234:	31 e0       	ldi	r19, 0x01	; 1
    9236:	20 e0       	ldi	r18, 0x00	; 0
    9238:	89 2b       	or	r24, r25
    923a:	09 f4       	brne	.+2      	; 0x923e <sync_fs+0xca>
    923c:	30 e0       	ldi	r19, 0x00	; 0
    923e:	83 2f       	mov	r24, r19
    9240:	92 2f       	mov	r25, r18
    9242:	cd b7       	in	r28, 0x3d	; 61
    9244:	de b7       	in	r29, 0x3e	; 62
    9246:	e6 e0       	ldi	r30, 0x06	; 6
    9248:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000924c <move_window>:
    924c:	8f 92       	push	r8
    924e:	9f 92       	push	r9
    9250:	af 92       	push	r10
    9252:	bf 92       	push	r11
    9254:	ef 92       	push	r14
    9256:	ff 92       	push	r15
    9258:	0f 93       	push	r16
    925a:	1f 93       	push	r17
    925c:	cf 93       	push	r28
    925e:	df 93       	push	r29
    9260:	ec 01       	movw	r28, r24
    9262:	4a 01       	movw	r8, r20
    9264:	5b 01       	movw	r10, r22
    9266:	89 a9       	ldd	r24, Y+49	; 0x31
    9268:	9a a9       	ldd	r25, Y+50	; 0x32
    926a:	ab a9       	ldd	r26, Y+51	; 0x33
    926c:	bc a9       	ldd	r27, Y+52	; 0x34
    926e:	84 17       	cp	r24, r20
    9270:	95 07       	cpc	r25, r21
    9272:	a6 07       	cpc	r26, r22
    9274:	b7 07       	cpc	r27, r23
    9276:	e9 f0       	breq	.+58     	; 0x92b2 <move_window+0x66>
    9278:	ce 01       	movw	r24, r28
    927a:	73 df       	rcall	.-282    	; 0x9162 <sync_window>
    927c:	7c 01       	movw	r14, r24
    927e:	89 2b       	or	r24, r25
    9280:	d1 f4       	brne	.+52     	; 0x92b6 <move_window+0x6a>
    9282:	01 e0       	ldi	r16, 0x01	; 1
    9284:	10 e0       	ldi	r17, 0x00	; 0
    9286:	a5 01       	movw	r20, r10
    9288:	94 01       	movw	r18, r8
    928a:	be 01       	movw	r22, r28
    928c:	6b 5c       	subi	r22, 0xCB	; 203
    928e:	7f 4f       	sbci	r23, 0xFF	; 255
    9290:	89 81       	ldd	r24, Y+1	; 0x01
    9292:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    9296:	89 2b       	or	r24, r25
    9298:	39 f0       	breq	.+14     	; 0x92a8 <move_window+0x5c>
    929a:	ee 24       	eor	r14, r14
    929c:	e3 94       	inc	r14
    929e:	f1 2c       	mov	r15, r1
    92a0:	88 24       	eor	r8, r8
    92a2:	8a 94       	dec	r8
    92a4:	98 2c       	mov	r9, r8
    92a6:	54 01       	movw	r10, r8
    92a8:	89 aa       	std	Y+49, r8	; 0x31
    92aa:	9a aa       	std	Y+50, r9	; 0x32
    92ac:	ab aa       	std	Y+51, r10	; 0x33
    92ae:	bc aa       	std	Y+52, r11	; 0x34
    92b0:	02 c0       	rjmp	.+4      	; 0x92b6 <move_window+0x6a>
    92b2:	e1 2c       	mov	r14, r1
    92b4:	f1 2c       	mov	r15, r1
    92b6:	c7 01       	movw	r24, r14
    92b8:	df 91       	pop	r29
    92ba:	cf 91       	pop	r28
    92bc:	1f 91       	pop	r17
    92be:	0f 91       	pop	r16
    92c0:	ff 90       	pop	r15
    92c2:	ef 90       	pop	r14
    92c4:	bf 90       	pop	r11
    92c6:	af 90       	pop	r10
    92c8:	9f 90       	pop	r9
    92ca:	8f 90       	pop	r8
    92cc:	08 95       	ret

000092ce <check_fs>:
    92ce:	cf 93       	push	r28
    92d0:	df 93       	push	r29
    92d2:	ec 01       	movw	r28, r24
    92d4:	1b 82       	std	Y+3, r1	; 0x03
    92d6:	8f ef       	ldi	r24, 0xFF	; 255
    92d8:	9f ef       	ldi	r25, 0xFF	; 255
    92da:	dc 01       	movw	r26, r24
    92dc:	89 ab       	std	Y+49, r24	; 0x31
    92de:	9a ab       	std	Y+50, r25	; 0x32
    92e0:	ab ab       	std	Y+51, r26	; 0x33
    92e2:	bc ab       	std	Y+52, r27	; 0x34
    92e4:	ce 01       	movw	r24, r28
    92e6:	b2 df       	rcall	.-156    	; 0x924c <move_window>
    92e8:	89 2b       	or	r24, r25
    92ea:	31 f5       	brne	.+76     	; 0x9338 <check_fs+0x6a>
    92ec:	fe 01       	movw	r30, r28
    92ee:	ed 5c       	subi	r30, 0xCD	; 205
    92f0:	fd 4f       	sbci	r31, 0xFD	; 253
    92f2:	80 81       	ld	r24, Z
    92f4:	91 81       	ldd	r25, Z+1	; 0x01
    92f6:	85 35       	cpi	r24, 0x55	; 85
    92f8:	9a 4a       	sbci	r25, 0xAA	; 170
    92fa:	01 f5       	brne	.+64     	; 0x933c <check_fs+0x6e>
    92fc:	8d a9       	ldd	r24, Y+53	; 0x35
    92fe:	89 3e       	cpi	r24, 0xE9	; 233
    9300:	29 f0       	breq	.+10     	; 0x930c <check_fs+0x3e>
    9302:	8b 3e       	cpi	r24, 0xEB	; 235
    9304:	f9 f4       	brne	.+62     	; 0x9344 <check_fs+0x76>
    9306:	8f a9       	ldd	r24, Y+55	; 0x37
    9308:	80 39       	cpi	r24, 0x90	; 144
    930a:	e1 f4       	brne	.+56     	; 0x9344 <check_fs+0x76>
    930c:	ce 01       	movw	r24, r28
    930e:	85 59       	subi	r24, 0x95	; 149
    9310:	9f 4f       	sbci	r25, 0xFF	; 255
    9312:	c5 dd       	rcall	.-1142   	; 0x8e9e <ld_dword>
    9314:	dc 01       	movw	r26, r24
    9316:	cb 01       	movw	r24, r22
    9318:	bb 27       	eor	r27, r27
    931a:	86 34       	cpi	r24, 0x46	; 70
    931c:	91 44       	sbci	r25, 0x41	; 65
    931e:	a4 45       	sbci	r26, 0x54	; 84
    9320:	b1 05       	cpc	r27, r1
    9322:	71 f0       	breq	.+28     	; 0x9340 <check_fs+0x72>
    9324:	ce 01       	movw	r24, r28
    9326:	89 57       	subi	r24, 0x79	; 121
    9328:	9f 4f       	sbci	r25, 0xFF	; 255
    932a:	b9 dd       	rcall	.-1166   	; 0x8e9e <ld_dword>
    932c:	66 34       	cpi	r22, 0x46	; 70
    932e:	71 44       	sbci	r23, 0x41	; 65
    9330:	84 45       	sbci	r24, 0x54	; 84
    9332:	93 43       	sbci	r25, 0x33	; 51
    9334:	39 f4       	brne	.+14     	; 0x9344 <check_fs+0x76>
    9336:	04 c0       	rjmp	.+8      	; 0x9340 <check_fs+0x72>
    9338:	84 e0       	ldi	r24, 0x04	; 4
    933a:	05 c0       	rjmp	.+10     	; 0x9346 <check_fs+0x78>
    933c:	83 e0       	ldi	r24, 0x03	; 3
    933e:	03 c0       	rjmp	.+6      	; 0x9346 <check_fs+0x78>
    9340:	80 e0       	ldi	r24, 0x00	; 0
    9342:	01 c0       	rjmp	.+2      	; 0x9346 <check_fs+0x78>
    9344:	82 e0       	ldi	r24, 0x02	; 2
    9346:	df 91       	pop	r29
    9348:	cf 91       	pop	r28
    934a:	08 95       	ret

0000934c <find_volume>:
    934c:	ad e1       	ldi	r26, 0x1D	; 29
    934e:	b0 e0       	ldi	r27, 0x00	; 0
    9350:	ec ea       	ldi	r30, 0xAC	; 172
    9352:	f9 e4       	ldi	r31, 0x49	; 73
    9354:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    9358:	5b 01       	movw	r10, r22
    935a:	f4 2e       	mov	r15, r20
    935c:	db 01       	movw	r26, r22
    935e:	1d 92       	st	X+, r1
    9360:	1c 92       	st	X, r1
    9362:	34 de       	rcall	.-920    	; 0x8fcc <get_ldnumber>
    9364:	6c 01       	movw	r12, r24
    9366:	97 fd       	sbrc	r25, 7
    9368:	1b c2       	rjmp	.+1078   	; 0x97a0 <find_volume+0x454>
    936a:	fc 01       	movw	r30, r24
    936c:	ee 0f       	add	r30, r30
    936e:	ff 1f       	adc	r31, r31
    9370:	e6 5d       	subi	r30, 0xD6	; 214
    9372:	f7 4e       	sbci	r31, 0xE7	; 231
    9374:	00 81       	ld	r16, Z
    9376:	11 81       	ldd	r17, Z+1	; 0x01
    9378:	01 15       	cp	r16, r1
    937a:	11 05       	cpc	r17, r1
    937c:	09 f4       	brne	.+2      	; 0x9380 <find_volume+0x34>
    937e:	13 c2       	rjmp	.+1062   	; 0x97a6 <find_volume+0x45a>
    9380:	f5 01       	movw	r30, r10
    9382:	11 83       	std	Z+1, r17	; 0x01
    9384:	00 83       	st	Z, r16
    9386:	ff 2d       	mov	r31, r15
    9388:	fe 7f       	andi	r31, 0xFE	; 254
    938a:	ff 2e       	mov	r15, r31
    938c:	d8 01       	movw	r26, r16
    938e:	8c 91       	ld	r24, X
    9390:	88 23       	and	r24, r24
    9392:	71 f0       	breq	.+28     	; 0x93b0 <find_volume+0x64>
    9394:	11 96       	adiw	r26, 0x01	; 1
    9396:	8c 91       	ld	r24, X
    9398:	0e 94 75 6e 	call	0xdcea	; 0xdcea <disk_status>
    939c:	80 fd       	sbrc	r24, 0
    939e:	08 c0       	rjmp	.+16     	; 0x93b0 <find_volume+0x64>
    93a0:	ff 20       	and	r15, r15
    93a2:	09 f4       	brne	.+2      	; 0x93a6 <find_volume+0x5a>
    93a4:	03 c2       	rjmp	.+1030   	; 0x97ac <find_volume+0x460>
    93a6:	82 ff       	sbrs	r24, 2
    93a8:	01 c2       	rjmp	.+1026   	; 0x97ac <find_volume+0x460>
    93aa:	8a e0       	ldi	r24, 0x0A	; 10
    93ac:	90 e0       	ldi	r25, 0x00	; 0
    93ae:	73 c2       	rjmp	.+1254   	; 0x9896 <find_volume+0x54a>
    93b0:	f8 01       	movw	r30, r16
    93b2:	10 82       	st	Z, r1
    93b4:	c1 82       	std	Z+1, r12	; 0x01
    93b6:	8c 2d       	mov	r24, r12
    93b8:	0e 94 7b 6e 	call	0xdcf6	; 0xdcf6 <disk_initialize>
    93bc:	80 fd       	sbrc	r24, 0
    93be:	f9 c1       	rjmp	.+1010   	; 0x97b2 <find_volume+0x466>
    93c0:	ff 20       	and	r15, r15
    93c2:	11 f0       	breq	.+4      	; 0x93c8 <find_volume+0x7c>
    93c4:	82 fd       	sbrc	r24, 2
    93c6:	f1 cf       	rjmp	.-30     	; 0x93aa <find_volume+0x5e>
    93c8:	40 e0       	ldi	r20, 0x00	; 0
    93ca:	50 e0       	ldi	r21, 0x00	; 0
    93cc:	ba 01       	movw	r22, r20
    93ce:	c8 01       	movw	r24, r16
    93d0:	7e df       	rcall	.-260    	; 0x92ce <check_fs>
    93d2:	82 30       	cpi	r24, 0x02	; 2
    93d4:	09 f0       	breq	.+2      	; 0x93d8 <find_volume+0x8c>
    93d6:	41 c0       	rjmp	.+130    	; 0x945a <find_volume+0x10e>
    93d8:	9e 01       	movw	r18, r28
    93da:	2f 5f       	subi	r18, 0xFF	; 255
    93dc:	3f 4f       	sbci	r19, 0xFF	; 255
    93de:	79 01       	movw	r14, r18
    93e0:	68 01       	movw	r12, r16
    93e2:	35 e0       	ldi	r19, 0x05	; 5
    93e4:	c3 1a       	sub	r12, r19
    93e6:	3e ef       	ldi	r19, 0xFE	; 254
    93e8:	d3 0a       	sbc	r13, r19
    93ea:	48 01       	movw	r8, r16
    93ec:	45 ec       	ldi	r20, 0xC5	; 197
    93ee:	84 1a       	sub	r8, r20
    93f0:	4d ef       	ldi	r20, 0xFD	; 253
    93f2:	94 0a       	sbc	r9, r20
    93f4:	57 01       	movw	r10, r14
    93f6:	f6 01       	movw	r30, r12
    93f8:	34 97       	sbiw	r30, 0x04	; 4
    93fa:	80 81       	ld	r24, Z
    93fc:	88 23       	and	r24, r24
    93fe:	19 f0       	breq	.+6      	; 0x9406 <find_volume+0xba>
    9400:	c6 01       	movw	r24, r12
    9402:	4d dd       	rcall	.-1382   	; 0x8e9e <ld_dword>
    9404:	03 c0       	rjmp	.+6      	; 0x940c <find_volume+0xc0>
    9406:	60 e0       	ldi	r22, 0x00	; 0
    9408:	70 e0       	ldi	r23, 0x00	; 0
    940a:	cb 01       	movw	r24, r22
    940c:	d5 01       	movw	r26, r10
    940e:	6d 93       	st	X+, r22
    9410:	7d 93       	st	X+, r23
    9412:	8d 93       	st	X+, r24
    9414:	9d 93       	st	X+, r25
    9416:	5d 01       	movw	r10, r26
    9418:	b0 e1       	ldi	r27, 0x10	; 16
    941a:	cb 0e       	add	r12, r27
    941c:	d1 1c       	adc	r13, r1
    941e:	c8 14       	cp	r12, r8
    9420:	d9 04       	cpc	r13, r9
    9422:	49 f7       	brne	.-46     	; 0x93f6 <find_volume+0xaa>
    9424:	6e 01       	movw	r12, r28
    9426:	e1 e1       	ldi	r30, 0x11	; 17
    9428:	ce 0e       	add	r12, r30
    942a:	d1 1c       	adc	r13, r1
    942c:	d7 01       	movw	r26, r14
    942e:	8d 90       	ld	r8, X+
    9430:	9d 90       	ld	r9, X+
    9432:	ad 90       	ld	r10, X+
    9434:	bd 90       	ld	r11, X+
    9436:	7d 01       	movw	r14, r26
    9438:	81 14       	cp	r8, r1
    943a:	91 04       	cpc	r9, r1
    943c:	a1 04       	cpc	r10, r1
    943e:	b1 04       	cpc	r11, r1
    9440:	39 f0       	breq	.+14     	; 0x9450 <find_volume+0x104>
    9442:	b5 01       	movw	r22, r10
    9444:	a4 01       	movw	r20, r8
    9446:	c8 01       	movw	r24, r16
    9448:	42 df       	rcall	.-380    	; 0x92ce <check_fs>
    944a:	82 30       	cpi	r24, 0x02	; 2
    944c:	10 f4       	brcc	.+4      	; 0x9452 <find_volume+0x106>
    944e:	10 c0       	rjmp	.+32     	; 0x9470 <find_volume+0x124>
    9450:	83 e0       	ldi	r24, 0x03	; 3
    9452:	ce 14       	cp	r12, r14
    9454:	df 04       	cpc	r13, r15
    9456:	51 f7       	brne	.-44     	; 0x942c <find_volume+0xe0>
    9458:	af c1       	rjmp	.+862    	; 0x97b8 <find_volume+0x46c>
    945a:	84 30       	cpi	r24, 0x04	; 4
    945c:	09 f4       	brne	.+2      	; 0x9460 <find_volume+0x114>
    945e:	af c1       	rjmp	.+862    	; 0x97be <find_volume+0x472>
    9460:	82 30       	cpi	r24, 0x02	; 2
    9462:	18 f0       	brcs	.+6      	; 0x946a <find_volume+0x11e>
    9464:	8d e0       	ldi	r24, 0x0D	; 13
    9466:	90 e0       	ldi	r25, 0x00	; 0
    9468:	16 c2       	rjmp	.+1068   	; 0x9896 <find_volume+0x54a>
    946a:	81 2c       	mov	r8, r1
    946c:	91 2c       	mov	r9, r1
    946e:	54 01       	movw	r10, r8
    9470:	f8 01       	movw	r30, r16
    9472:	e0 5c       	subi	r30, 0xC0	; 192
    9474:	ff 4f       	sbci	r31, 0xFF	; 255
    9476:	80 81       	ld	r24, Z
    9478:	91 81       	ldd	r25, Z+1	; 0x01
    947a:	81 15       	cp	r24, r1
    947c:	92 40       	sbci	r25, 0x02	; 2
    947e:	91 f7       	brne	.-28     	; 0x9464 <find_volume+0x118>
    9480:	3b 96       	adiw	r30, 0x0b	; 11
    9482:	80 81       	ld	r24, Z
    9484:	91 81       	ldd	r25, Z+1	; 0x01
    9486:	00 97       	sbiw	r24, 0x00	; 0
    9488:	41 f0       	breq	.+16     	; 0x949a <find_volume+0x14e>
    948a:	9c 01       	movw	r18, r24
    948c:	40 e0       	ldi	r20, 0x00	; 0
    948e:	50 e0       	ldi	r21, 0x00	; 0
    9490:	2d 8b       	std	Y+21, r18	; 0x15
    9492:	3e 8b       	std	Y+22, r19	; 0x16
    9494:	4f 8b       	std	Y+23, r20	; 0x17
    9496:	58 8f       	std	Y+24, r21	; 0x18
    9498:	08 c0       	rjmp	.+16     	; 0x94aa <find_volume+0x15e>
    949a:	c8 01       	movw	r24, r16
    949c:	87 5a       	subi	r24, 0xA7	; 167
    949e:	9f 4f       	sbci	r25, 0xFF	; 255
    94a0:	fe dc       	rcall	.-1540   	; 0x8e9e <ld_dword>
    94a2:	6d 8b       	std	Y+21, r22	; 0x15
    94a4:	7e 8b       	std	Y+22, r23	; 0x16
    94a6:	8f 8b       	std	Y+23, r24	; 0x17
    94a8:	98 8f       	std	Y+24, r25	; 0x18
    94aa:	8d 89       	ldd	r24, Y+21	; 0x15
    94ac:	9e 89       	ldd	r25, Y+22	; 0x16
    94ae:	af 89       	ldd	r26, Y+23	; 0x17
    94b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    94b2:	f8 01       	movw	r30, r16
    94b4:	85 8f       	std	Z+29, r24	; 0x1d
    94b6:	96 8f       	std	Z+30, r25	; 0x1e
    94b8:	a7 8f       	std	Z+31, r26	; 0x1f
    94ba:	b0 a3       	std	Z+32, r27	; 0x20
    94bc:	eb 5b       	subi	r30, 0xBB	; 187
    94be:	ff 4f       	sbci	r31, 0xFF	; 255
    94c0:	70 80       	ld	r7, Z
    94c2:	d8 01       	movw	r26, r16
    94c4:	12 96       	adiw	r26, 0x02	; 2
    94c6:	7c 92       	st	X, r7
    94c8:	8f ef       	ldi	r24, 0xFF	; 255
    94ca:	87 0d       	add	r24, r7
    94cc:	82 30       	cpi	r24, 0x02	; 2
    94ce:	50 f6       	brcc	.-108    	; 0x9464 <find_volume+0x118>
    94d0:	33 97       	sbiw	r30, 0x03	; 3
    94d2:	b0 81       	ld	r27, Z
    94d4:	b9 8f       	std	Y+25, r27	; 0x19
    94d6:	8b 2f       	mov	r24, r27
    94d8:	90 e0       	ldi	r25, 0x00	; 0
    94da:	f8 01       	movw	r30, r16
    94dc:	92 87       	std	Z+10, r25	; 0x0a
    94de:	81 87       	std	Z+9, r24	; 0x09
    94e0:	00 97       	sbiw	r24, 0x00	; 0
    94e2:	09 f4       	brne	.+2      	; 0x94e6 <find_volume+0x19a>
    94e4:	bf cf       	rjmp	.-130    	; 0x9464 <find_volume+0x118>
    94e6:	9c 01       	movw	r18, r24
    94e8:	21 50       	subi	r18, 0x01	; 1
    94ea:	31 09       	sbc	r19, r1
    94ec:	82 23       	and	r24, r18
    94ee:	93 23       	and	r25, r19
    94f0:	89 2b       	or	r24, r25
    94f2:	09 f0       	breq	.+2      	; 0x94f6 <find_volume+0x1aa>
    94f4:	b7 cf       	rjmp	.-146    	; 0x9464 <find_volume+0x118>
    94f6:	ea 5b       	subi	r30, 0xBA	; 186
    94f8:	ff 4f       	sbci	r31, 0xFF	; 255
    94fa:	20 80       	ld	r2, Z
    94fc:	31 80       	ldd	r3, Z+1	; 0x01
    94fe:	d8 01       	movw	r26, r16
    9500:	18 96       	adiw	r26, 0x08	; 8
    9502:	3c 92       	st	X, r3
    9504:	2e 92       	st	-X, r2
    9506:	17 97       	sbiw	r26, 0x07	; 7
    9508:	c1 01       	movw	r24, r2
    950a:	8f 70       	andi	r24, 0x0F	; 15
    950c:	99 27       	eor	r25, r25
    950e:	89 2b       	or	r24, r25
    9510:	09 f0       	breq	.+2      	; 0x9514 <find_volume+0x1c8>
    9512:	a8 cf       	rjmp	.-176    	; 0x9464 <find_volume+0x118>
    9514:	32 96       	adiw	r30, 0x02	; 2
    9516:	80 81       	ld	r24, Z
    9518:	91 81       	ldd	r25, Z+1	; 0x01
    951a:	6c 01       	movw	r12, r24
    951c:	e1 2c       	mov	r14, r1
    951e:	f1 2c       	mov	r15, r1
    9520:	89 2b       	or	r24, r25
    9522:	31 f4       	brne	.+12     	; 0x9530 <find_volume+0x1e4>
    9524:	c8 01       	movw	r24, r16
    9526:	8b 5a       	subi	r24, 0xAB	; 171
    9528:	9f 4f       	sbci	r25, 0xFF	; 255
    952a:	b9 dc       	rcall	.-1678   	; 0x8e9e <ld_dword>
    952c:	6b 01       	movw	r12, r22
    952e:	7c 01       	movw	r14, r24
    9530:	f8 01       	movw	r30, r16
    9532:	ed 5b       	subi	r30, 0xBD	; 189
    9534:	ff 4f       	sbci	r31, 0xFF	; 255
    9536:	01 90       	ld	r0, Z+
    9538:	f0 81       	ld	r31, Z
    953a:	e0 2d       	mov	r30, r0
    953c:	30 97       	sbiw	r30, 0x00	; 0
    953e:	09 f4       	brne	.+2      	; 0x9542 <find_volume+0x1f6>
    9540:	91 cf       	rjmp	.-222    	; 0x9464 <find_volume+0x118>
    9542:	a7 2d       	mov	r26, r7
    9544:	b0 e0       	ldi	r27, 0x00	; 0
    9546:	2d 89       	ldd	r18, Y+21	; 0x15
    9548:	3e 89       	ldd	r19, Y+22	; 0x16
    954a:	4f 89       	ldd	r20, Y+23	; 0x17
    954c:	58 8d       	ldd	r21, Y+24	; 0x18
    954e:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    9552:	2b 01       	movw	r4, r22
    9554:	3c 01       	movw	r6, r24
    9556:	9f 01       	movw	r18, r30
    9558:	40 e0       	ldi	r20, 0x00	; 0
    955a:	50 e0       	ldi	r21, 0x00	; 0
    955c:	2a 8f       	std	Y+26, r18	; 0x1a
    955e:	3b 8f       	std	Y+27, r19	; 0x1b
    9560:	4c 8f       	std	Y+28, r20	; 0x1c
    9562:	5d 8f       	std	Y+29, r21	; 0x1d
    9564:	c1 01       	movw	r24, r2
    9566:	e4 e0       	ldi	r30, 0x04	; 4
    9568:	96 95       	lsr	r25
    956a:	87 95       	ror	r24
    956c:	ea 95       	dec	r30
    956e:	e1 f7       	brne	.-8      	; 0x9568 <find_volume+0x21c>
    9570:	ba 01       	movw	r22, r20
    9572:	a9 01       	movw	r20, r18
    9574:	48 0f       	add	r20, r24
    9576:	59 1f       	adc	r21, r25
    9578:	61 1d       	adc	r22, r1
    957a:	71 1d       	adc	r23, r1
    957c:	db 01       	movw	r26, r22
    957e:	ca 01       	movw	r24, r20
    9580:	84 0d       	add	r24, r4
    9582:	95 1d       	adc	r25, r5
    9584:	a6 1d       	adc	r26, r6
    9586:	b7 1d       	adc	r27, r7
    9588:	89 8b       	std	Y+17, r24	; 0x11
    958a:	9a 8b       	std	Y+18, r25	; 0x12
    958c:	ab 8b       	std	Y+19, r26	; 0x13
    958e:	bc 8b       	std	Y+20, r27	; 0x14
    9590:	c8 16       	cp	r12, r24
    9592:	d9 06       	cpc	r13, r25
    9594:	ea 06       	cpc	r14, r26
    9596:	fb 06       	cpc	r15, r27
    9598:	08 f4       	brcc	.+2      	; 0x959c <find_volume+0x250>
    959a:	64 cf       	rjmp	.-312    	; 0x9464 <find_volume+0x118>
    959c:	c7 01       	movw	r24, r14
    959e:	b6 01       	movw	r22, r12
    95a0:	29 89       	ldd	r18, Y+17	; 0x11
    95a2:	3a 89       	ldd	r19, Y+18	; 0x12
    95a4:	4b 89       	ldd	r20, Y+19	; 0x13
    95a6:	5c 89       	ldd	r21, Y+20	; 0x14
    95a8:	62 1b       	sub	r22, r18
    95aa:	73 0b       	sbc	r23, r19
    95ac:	84 0b       	sbc	r24, r20
    95ae:	95 0b       	sbc	r25, r21
    95b0:	a9 8d       	ldd	r26, Y+25	; 0x19
    95b2:	2a 2f       	mov	r18, r26
    95b4:	30 e0       	ldi	r19, 0x00	; 0
    95b6:	40 e0       	ldi	r20, 0x00	; 0
    95b8:	50 e0       	ldi	r21, 0x00	; 0
    95ba:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    95be:	21 15       	cp	r18, r1
    95c0:	31 05       	cpc	r19, r1
    95c2:	41 05       	cpc	r20, r1
    95c4:	51 05       	cpc	r21, r1
    95c6:	09 f4       	brne	.+2      	; 0x95ca <find_volume+0x27e>
    95c8:	4d cf       	rjmp	.-358    	; 0x9464 <find_volume+0x118>
    95ca:	69 01       	movw	r12, r18
    95cc:	7a 01       	movw	r14, r20
    95ce:	b2 e0       	ldi	r27, 0x02	; 2
    95d0:	cb 0e       	add	r12, r27
    95d2:	d1 1c       	adc	r13, r1
    95d4:	e1 1c       	adc	r14, r1
    95d6:	f1 1c       	adc	r15, r1
    95d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    95da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    95dc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    95de:	bd 8d       	ldd	r27, Y+29	; 0x1d
    95e0:	88 0d       	add	r24, r8
    95e2:	99 1d       	adc	r25, r9
    95e4:	aa 1d       	adc	r26, r10
    95e6:	bb 1d       	adc	r27, r11
    95e8:	8a 8f       	std	Y+26, r24	; 0x1a
    95ea:	9b 8f       	std	Y+27, r25	; 0x1b
    95ec:	ac 8f       	std	Y+28, r26	; 0x1c
    95ee:	bd 8f       	std	Y+29, r27	; 0x1d
    95f0:	89 89       	ldd	r24, Y+17	; 0x11
    95f2:	9a 89       	ldd	r25, Y+18	; 0x12
    95f4:	ab 89       	ldd	r26, Y+19	; 0x13
    95f6:	bc 89       	ldd	r27, Y+20	; 0x14
    95f8:	88 0d       	add	r24, r8
    95fa:	99 1d       	adc	r25, r9
    95fc:	aa 1d       	adc	r26, r10
    95fe:	bb 1d       	adc	r27, r11
    9600:	89 8b       	std	Y+17, r24	; 0x11
    9602:	9a 8b       	std	Y+18, r25	; 0x12
    9604:	ab 8b       	std	Y+19, r26	; 0x13
    9606:	bc 8b       	std	Y+20, r27	; 0x14
    9608:	26 3f       	cpi	r18, 0xF6	; 246
    960a:	9f ef       	ldi	r25, 0xFF	; 255
    960c:	39 07       	cpc	r19, r25
    960e:	41 05       	cpc	r20, r1
    9610:	51 05       	cpc	r21, r1
    9612:	08 f0       	brcs	.+2      	; 0x9616 <find_volume+0x2ca>
    9614:	d7 c0       	rjmp	.+430    	; 0x97c4 <find_volume+0x478>
    9616:	f8 01       	movw	r30, r16
    9618:	c1 8e       	std	Z+25, r12	; 0x19
    961a:	d2 8e       	std	Z+26, r13	; 0x1a
    961c:	e3 8e       	std	Z+27, r14	; 0x1b
    961e:	f4 8e       	std	Z+28, r15	; 0x1c
    9620:	26 3f       	cpi	r18, 0xF6	; 246
    9622:	3f 40       	sbci	r19, 0x0F	; 15
    9624:	41 05       	cpc	r20, r1
    9626:	51 05       	cpc	r21, r1
    9628:	08 f0       	brcs	.+2      	; 0x962c <find_volume+0x2e0>
    962a:	0a c1       	rjmp	.+532    	; 0x9840 <find_volume+0x4f4>
    962c:	81 a2       	std	Z+33, r8	; 0x21
    962e:	92 a2       	std	Z+34, r9	; 0x22
    9630:	a3 a2       	std	Z+35, r10	; 0x23
    9632:	b4 a2       	std	Z+36, r11	; 0x24
    9634:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9636:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9638:	4c 8d       	ldd	r20, Y+28	; 0x1c
    963a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    963c:	25 a3       	std	Z+37, r18	; 0x25
    963e:	36 a3       	std	Z+38, r19	; 0x26
    9640:	47 a3       	std	Z+39, r20	; 0x27
    9642:	50 a7       	std	Z+40, r21	; 0x28
    9644:	29 89       	ldd	r18, Y+17	; 0x11
    9646:	3a 89       	ldd	r19, Y+18	; 0x12
    9648:	4b 89       	ldd	r20, Y+19	; 0x13
    964a:	5c 89       	ldd	r21, Y+20	; 0x14
    964c:	25 a7       	std	Z+45, r18	; 0x2d
    964e:	36 a7       	std	Z+46, r19	; 0x2e
    9650:	47 a7       	std	Z+47, r20	; 0x2f
    9652:	50 ab       	std	Z+48, r21	; 0x30
    9654:	21 14       	cp	r2, r1
    9656:	31 04       	cpc	r3, r1
    9658:	09 f4       	brne	.+2      	; 0x965c <find_volume+0x310>
    965a:	04 cf       	rjmp	.-504    	; 0x9464 <find_volume+0x118>
    965c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    965e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9660:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9662:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9664:	42 0e       	add	r4, r18
    9666:	53 1e       	adc	r5, r19
    9668:	64 1e       	adc	r6, r20
    966a:	75 1e       	adc	r7, r21
    966c:	41 a6       	std	Z+41, r4	; 0x29
    966e:	52 a6       	std	Z+42, r5	; 0x2a
    9670:	63 a6       	std	Z+43, r6	; 0x2b
    9672:	74 a6       	std	Z+44, r7	; 0x2c
    9674:	a3 e0       	ldi	r26, 0x03	; 3
    9676:	b0 e0       	ldi	r27, 0x00	; 0
    9678:	a7 01       	movw	r20, r14
    967a:	96 01       	movw	r18, r12
    967c:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    9680:	dc 01       	movw	r26, r24
    9682:	cb 01       	movw	r24, r22
    9684:	b6 95       	lsr	r27
    9686:	a7 95       	ror	r26
    9688:	97 95       	ror	r25
    968a:	87 95       	ror	r24
    968c:	e1 e0       	ldi	r30, 0x01	; 1
    968e:	ce 22       	and	r12, r30
    9690:	dd 24       	eor	r13, r13
    9692:	ee 24       	eor	r14, r14
    9694:	ff 24       	eor	r15, r15
    9696:	c8 0e       	add	r12, r24
    9698:	d9 1e       	adc	r13, r25
    969a:	ea 1e       	adc	r14, r26
    969c:	fb 1e       	adc	r15, r27
    969e:	77 24       	eor	r7, r7
    96a0:	73 94       	inc	r7
    96a2:	ff ef       	ldi	r31, 0xFF	; 255
    96a4:	cf 0e       	add	r12, r31
    96a6:	f1 e0       	ldi	r31, 0x01	; 1
    96a8:	df 1e       	adc	r13, r31
    96aa:	e1 1c       	adc	r14, r1
    96ac:	f1 1c       	adc	r15, r1
    96ae:	59 e0       	ldi	r21, 0x09	; 9
    96b0:	f6 94       	lsr	r15
    96b2:	e7 94       	ror	r14
    96b4:	d7 94       	ror	r13
    96b6:	c7 94       	ror	r12
    96b8:	5a 95       	dec	r21
    96ba:	d1 f7       	brne	.-12     	; 0x96b0 <find_volume+0x364>
    96bc:	2d 89       	ldd	r18, Y+21	; 0x15
    96be:	3e 89       	ldd	r19, Y+22	; 0x16
    96c0:	4f 89       	ldd	r20, Y+23	; 0x17
    96c2:	58 8d       	ldd	r21, Y+24	; 0x18
    96c4:	2c 15       	cp	r18, r12
    96c6:	3d 05       	cpc	r19, r13
    96c8:	4e 05       	cpc	r20, r14
    96ca:	5f 05       	cpc	r21, r15
    96cc:	08 f4       	brcc	.+2      	; 0x96d0 <find_volume+0x384>
    96ce:	ca ce       	rjmp	.-620    	; 0x9464 <find_volume+0x118>
    96d0:	8f ef       	ldi	r24, 0xFF	; 255
    96d2:	9f ef       	ldi	r25, 0xFF	; 255
    96d4:	dc 01       	movw	r26, r24
    96d6:	f8 01       	movw	r30, r16
    96d8:	81 8b       	std	Z+17, r24	; 0x11
    96da:	92 8b       	std	Z+18, r25	; 0x12
    96dc:	a3 8b       	std	Z+19, r26	; 0x13
    96de:	b4 8b       	std	Z+20, r27	; 0x14
    96e0:	85 87       	std	Z+13, r24	; 0x0d
    96e2:	96 87       	std	Z+14, r25	; 0x0e
    96e4:	a7 87       	std	Z+15, r26	; 0x0f
    96e6:	b0 8b       	std	Z+16, r27	; 0x10
    96e8:	80 e8       	ldi	r24, 0x80	; 128
    96ea:	84 83       	std	Z+4, r24	; 0x04
    96ec:	f3 e0       	ldi	r31, 0x03	; 3
    96ee:	7f 12       	cpse	r7, r31
    96f0:	42 c0       	rjmp	.+132    	; 0x9776 <find_volume+0x42a>
    96f2:	f8 01       	movw	r30, r16
    96f4:	eb 59       	subi	r30, 0x9B	; 155
    96f6:	ff 4f       	sbci	r31, 0xFF	; 255
    96f8:	80 81       	ld	r24, Z
    96fa:	91 81       	ldd	r25, Z+1	; 0x01
    96fc:	01 97       	sbiw	r24, 0x01	; 1
    96fe:	09 f0       	breq	.+2      	; 0x9702 <find_volume+0x3b6>
    9700:	3a c0       	rjmp	.+116    	; 0x9776 <find_volume+0x42a>
    9702:	b5 01       	movw	r22, r10
    9704:	a4 01       	movw	r20, r8
    9706:	4f 5f       	subi	r20, 0xFF	; 255
    9708:	5f 4f       	sbci	r21, 0xFF	; 255
    970a:	6f 4f       	sbci	r22, 0xFF	; 255
    970c:	7f 4f       	sbci	r23, 0xFF	; 255
    970e:	c8 01       	movw	r24, r16
    9710:	9d dd       	rcall	.-1222   	; 0x924c <move_window>
    9712:	89 2b       	or	r24, r25
    9714:	81 f5       	brne	.+96     	; 0x9776 <find_volume+0x42a>
    9716:	d8 01       	movw	r26, r16
    9718:	14 96       	adiw	r26, 0x04	; 4
    971a:	1c 92       	st	X, r1
    971c:	f8 01       	movw	r30, r16
    971e:	ed 5c       	subi	r30, 0xCD	; 205
    9720:	fd 4f       	sbci	r31, 0xFD	; 253
    9722:	80 81       	ld	r24, Z
    9724:	91 81       	ldd	r25, Z+1	; 0x01
    9726:	85 35       	cpi	r24, 0x55	; 85
    9728:	9a 4a       	sbci	r25, 0xAA	; 170
    972a:	29 f5       	brne	.+74     	; 0x9776 <find_volume+0x42a>
    972c:	c8 01       	movw	r24, r16
    972e:	c5 96       	adiw	r24, 0x35	; 53
    9730:	b6 db       	rcall	.-2196   	; 0x8e9e <ld_dword>
    9732:	62 35       	cpi	r22, 0x52	; 82
    9734:	72 45       	sbci	r23, 0x52	; 82
    9736:	81 46       	sbci	r24, 0x61	; 97
    9738:	91 44       	sbci	r25, 0x41	; 65
    973a:	e9 f4       	brne	.+58     	; 0x9776 <find_volume+0x42a>
    973c:	c8 01       	movw	r24, r16
    973e:	87 5e       	subi	r24, 0xE7	; 231
    9740:	9d 4f       	sbci	r25, 0xFD	; 253
    9742:	ad db       	rcall	.-2214   	; 0x8e9e <ld_dword>
    9744:	62 37       	cpi	r22, 0x72	; 114
    9746:	72 47       	sbci	r23, 0x72	; 114
    9748:	81 44       	sbci	r24, 0x41	; 65
    974a:	91 46       	sbci	r25, 0x61	; 97
    974c:	a1 f4       	brne	.+40     	; 0x9776 <find_volume+0x42a>
    974e:	c8 01       	movw	r24, r16
    9750:	83 5e       	subi	r24, 0xE3	; 227
    9752:	9d 4f       	sbci	r25, 0xFD	; 253
    9754:	a4 db       	rcall	.-2232   	; 0x8e9e <ld_dword>
    9756:	d8 01       	movw	r26, r16
    9758:	51 96       	adiw	r26, 0x11	; 17
    975a:	6d 93       	st	X+, r22
    975c:	7d 93       	st	X+, r23
    975e:	8d 93       	st	X+, r24
    9760:	9c 93       	st	X, r25
    9762:	54 97       	sbiw	r26, 0x14	; 20
    9764:	c8 01       	movw	r24, r16
    9766:	8f 5d       	subi	r24, 0xDF	; 223
    9768:	9d 4f       	sbci	r25, 0xFD	; 253
    976a:	99 db       	rcall	.-2254   	; 0x8e9e <ld_dword>
    976c:	f8 01       	movw	r30, r16
    976e:	65 87       	std	Z+13, r22	; 0x0d
    9770:	76 87       	std	Z+14, r23	; 0x0e
    9772:	87 87       	std	Z+15, r24	; 0x0f
    9774:	90 8b       	std	Z+16, r25	; 0x10
    9776:	d8 01       	movw	r26, r16
    9778:	7c 92       	st	X, r7
    977a:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <Fsid>
    977e:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <Fsid+0x1>
    9782:	01 96       	adiw	r24, 0x01	; 1
    9784:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <Fsid+0x1>
    9788:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <Fsid>
    978c:	16 96       	adiw	r26, 0x06	; 6
    978e:	9c 93       	st	X, r25
    9790:	8e 93       	st	-X, r24
    9792:	15 97       	sbiw	r26, 0x05	; 5
    9794:	f8 01       	movw	r30, r16
    9796:	15 8a       	std	Z+21, r1	; 0x15
    9798:	16 8a       	std	Z+22, r1	; 0x16
    979a:	17 8a       	std	Z+23, r1	; 0x17
    979c:	10 8e       	std	Z+24, r1	; 0x18
    979e:	06 c0       	rjmp	.+12     	; 0x97ac <find_volume+0x460>
    97a0:	8b e0       	ldi	r24, 0x0B	; 11
    97a2:	90 e0       	ldi	r25, 0x00	; 0
    97a4:	78 c0       	rjmp	.+240    	; 0x9896 <find_volume+0x54a>
    97a6:	8c e0       	ldi	r24, 0x0C	; 12
    97a8:	90 e0       	ldi	r25, 0x00	; 0
    97aa:	75 c0       	rjmp	.+234    	; 0x9896 <find_volume+0x54a>
    97ac:	80 e0       	ldi	r24, 0x00	; 0
    97ae:	90 e0       	ldi	r25, 0x00	; 0
    97b0:	72 c0       	rjmp	.+228    	; 0x9896 <find_volume+0x54a>
    97b2:	83 e0       	ldi	r24, 0x03	; 3
    97b4:	90 e0       	ldi	r25, 0x00	; 0
    97b6:	6f c0       	rjmp	.+222    	; 0x9896 <find_volume+0x54a>
    97b8:	84 30       	cpi	r24, 0x04	; 4
    97ba:	09 f0       	breq	.+2      	; 0x97be <find_volume+0x472>
    97bc:	53 ce       	rjmp	.-858    	; 0x9464 <find_volume+0x118>
    97be:	81 e0       	ldi	r24, 0x01	; 1
    97c0:	90 e0       	ldi	r25, 0x00	; 0
    97c2:	69 c0       	rjmp	.+210    	; 0x9896 <find_volume+0x54a>
    97c4:	d8 01       	movw	r26, r16
    97c6:	59 96       	adiw	r26, 0x19	; 25
    97c8:	cd 92       	st	X+, r12
    97ca:	dd 92       	st	X+, r13
    97cc:	ed 92       	st	X+, r14
    97ce:	fc 92       	st	X, r15
    97d0:	5c 97       	sbiw	r26, 0x1c	; 28
    97d2:	f8 01       	movw	r30, r16
    97d4:	81 a2       	std	Z+33, r8	; 0x21
    97d6:	92 a2       	std	Z+34, r9	; 0x22
    97d8:	a3 a2       	std	Z+35, r10	; 0x23
    97da:	b4 a2       	std	Z+36, r11	; 0x24
    97dc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    97de:	3b 8d       	ldd	r19, Y+27	; 0x1b
    97e0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    97e2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    97e4:	95 96       	adiw	r26, 0x25	; 37
    97e6:	2d 93       	st	X+, r18
    97e8:	3d 93       	st	X+, r19
    97ea:	4d 93       	st	X+, r20
    97ec:	5c 93       	st	X, r21
    97ee:	98 97       	sbiw	r26, 0x28	; 40
    97f0:	29 89       	ldd	r18, Y+17	; 0x11
    97f2:	3a 89       	ldd	r19, Y+18	; 0x12
    97f4:	4b 89       	ldd	r20, Y+19	; 0x13
    97f6:	5c 89       	ldd	r21, Y+20	; 0x14
    97f8:	9d 96       	adiw	r26, 0x2d	; 45
    97fa:	2d 93       	st	X+, r18
    97fc:	3d 93       	st	X+, r19
    97fe:	4d 93       	st	X+, r20
    9800:	5c 93       	st	X, r21
    9802:	d0 97       	sbiw	r26, 0x30	; 48
    9804:	e1 5a       	subi	r30, 0xA1	; 161
    9806:	ff 4f       	sbci	r31, 0xFF	; 255
    9808:	80 81       	ld	r24, Z
    980a:	91 81       	ldd	r25, Z+1	; 0x01
    980c:	89 2b       	or	r24, r25
    980e:	09 f0       	breq	.+2      	; 0x9812 <find_volume+0x4c6>
    9810:	29 ce       	rjmp	.-942    	; 0x9464 <find_volume+0x118>
    9812:	21 14       	cp	r2, r1
    9814:	31 04       	cpc	r3, r1
    9816:	09 f0       	breq	.+2      	; 0x981a <find_volume+0x4ce>
    9818:	25 ce       	rjmp	.-950    	; 0x9464 <find_volume+0x118>
    981a:	c8 01       	movw	r24, r16
    981c:	8f 59       	subi	r24, 0x9F	; 159
    981e:	9f 4f       	sbci	r25, 0xFF	; 255
    9820:	3e db       	rcall	.-2436   	; 0x8e9e <ld_dword>
    9822:	f8 01       	movw	r30, r16
    9824:	61 a7       	std	Z+41, r22	; 0x29
    9826:	72 a7       	std	Z+42, r23	; 0x2a
    9828:	83 a7       	std	Z+43, r24	; 0x2b
    982a:	94 a7       	std	Z+44, r25	; 0x2c
    982c:	62 e0       	ldi	r22, 0x02	; 2
    982e:	cc 0c       	add	r12, r12
    9830:	dd 1c       	adc	r13, r13
    9832:	ee 1c       	adc	r14, r14
    9834:	ff 1c       	adc	r15, r15
    9836:	6a 95       	dec	r22
    9838:	d1 f7       	brne	.-12     	; 0x982e <find_volume+0x4e2>
    983a:	73 e0       	ldi	r23, 0x03	; 3
    983c:	77 2e       	mov	r7, r23
    983e:	31 cf       	rjmp	.-414    	; 0x96a2 <find_volume+0x356>
    9840:	81 a2       	std	Z+33, r8	; 0x21
    9842:	92 a2       	std	Z+34, r9	; 0x22
    9844:	a3 a2       	std	Z+35, r10	; 0x23
    9846:	b4 a2       	std	Z+36, r11	; 0x24
    9848:	2a 8d       	ldd	r18, Y+26	; 0x1a
    984a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    984c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    984e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9850:	25 a3       	std	Z+37, r18	; 0x25
    9852:	36 a3       	std	Z+38, r19	; 0x26
    9854:	47 a3       	std	Z+39, r20	; 0x27
    9856:	50 a7       	std	Z+40, r21	; 0x28
    9858:	29 89       	ldd	r18, Y+17	; 0x11
    985a:	3a 89       	ldd	r19, Y+18	; 0x12
    985c:	4b 89       	ldd	r20, Y+19	; 0x13
    985e:	5c 89       	ldd	r21, Y+20	; 0x14
    9860:	25 a7       	std	Z+45, r18	; 0x2d
    9862:	36 a7       	std	Z+46, r19	; 0x2e
    9864:	47 a7       	std	Z+47, r20	; 0x2f
    9866:	50 ab       	std	Z+48, r21	; 0x30
    9868:	21 14       	cp	r2, r1
    986a:	31 04       	cpc	r3, r1
    986c:	09 f4       	brne	.+2      	; 0x9870 <find_volume+0x524>
    986e:	fa cd       	rjmp	.-1036   	; 0x9464 <find_volume+0x118>
    9870:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9872:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9874:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9876:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9878:	42 0e       	add	r4, r18
    987a:	53 1e       	adc	r5, r19
    987c:	64 1e       	adc	r6, r20
    987e:	75 1e       	adc	r7, r21
    9880:	41 a6       	std	Z+41, r4	; 0x29
    9882:	52 a6       	std	Z+42, r5	; 0x2a
    9884:	63 a6       	std	Z+43, r6	; 0x2b
    9886:	74 a6       	std	Z+44, r7	; 0x2c
    9888:	cc 0c       	add	r12, r12
    988a:	dd 1c       	adc	r13, r13
    988c:	ee 1c       	adc	r14, r14
    988e:	ff 1c       	adc	r15, r15
    9890:	42 e0       	ldi	r20, 0x02	; 2
    9892:	74 2e       	mov	r7, r20
    9894:	06 cf       	rjmp	.-500    	; 0x96a2 <find_volume+0x356>
    9896:	6d 96       	adiw	r28, 0x1d	; 29
    9898:	e2 e1       	ldi	r30, 0x12	; 18
    989a:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000989e <put_fat>:
    989e:	a6 e0       	ldi	r26, 0x06	; 6
    98a0:	b0 e0       	ldi	r27, 0x00	; 0
    98a2:	e5 e5       	ldi	r30, 0x55	; 85
    98a4:	fc e4       	ldi	r31, 0x4C	; 76
    98a6:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    98aa:	42 30       	cpi	r20, 0x02	; 2
    98ac:	51 05       	cpc	r21, r1
    98ae:	61 05       	cpc	r22, r1
    98b0:	71 05       	cpc	r23, r1
    98b2:	08 f4       	brcc	.+2      	; 0x98b6 <put_fat+0x18>
    98b4:	e9 c0       	rjmp	.+466    	; 0x9a88 <put_fat+0x1ea>
    98b6:	dc 01       	movw	r26, r24
    98b8:	59 96       	adiw	r26, 0x19	; 25
    98ba:	cd 90       	ld	r12, X+
    98bc:	dd 90       	ld	r13, X+
    98be:	ed 90       	ld	r14, X+
    98c0:	fc 90       	ld	r15, X
    98c2:	5c 97       	sbiw	r26, 0x1c	; 28
    98c4:	4c 15       	cp	r20, r12
    98c6:	5d 05       	cpc	r21, r13
    98c8:	6e 05       	cpc	r22, r14
    98ca:	7f 05       	cpc	r23, r15
    98cc:	08 f0       	brcs	.+2      	; 0x98d0 <put_fat+0x32>
    98ce:	dc c0       	rjmp	.+440    	; 0x9a88 <put_fat+0x1ea>
    98d0:	28 01       	movw	r4, r16
    98d2:	39 01       	movw	r6, r18
    98d4:	6a 01       	movw	r12, r20
    98d6:	7b 01       	movw	r14, r22
    98d8:	9e 83       	std	Y+6, r25	; 0x06
    98da:	8d 83       	std	Y+5, r24	; 0x05
    98dc:	fc 01       	movw	r30, r24
    98de:	80 81       	ld	r24, Z
    98e0:	82 30       	cpi	r24, 0x02	; 2
    98e2:	09 f4       	brne	.+2      	; 0x98e6 <put_fat+0x48>
    98e4:	73 c0       	rjmp	.+230    	; 0x99cc <put_fat+0x12e>
    98e6:	83 30       	cpi	r24, 0x03	; 3
    98e8:	09 f4       	brne	.+2      	; 0x98ec <put_fat+0x4e>
    98ea:	92 c0       	rjmp	.+292    	; 0x9a10 <put_fat+0x172>
    98ec:	81 30       	cpi	r24, 0x01	; 1
    98ee:	09 f0       	breq	.+2      	; 0x98f2 <put_fat+0x54>
    98f0:	cb c0       	rjmp	.+406    	; 0x9a88 <put_fat+0x1ea>
    98f2:	4a 01       	movw	r8, r20
    98f4:	96 94       	lsr	r9
    98f6:	87 94       	ror	r8
    98f8:	84 0e       	add	r8, r20
    98fa:	95 1e       	adc	r9, r21
    98fc:	c4 01       	movw	r24, r8
    98fe:	89 2f       	mov	r24, r25
    9900:	99 27       	eor	r25, r25
    9902:	86 95       	lsr	r24
    9904:	45 a1       	ldd	r20, Z+37	; 0x25
    9906:	56 a1       	ldd	r21, Z+38	; 0x26
    9908:	67 a1       	ldd	r22, Z+39	; 0x27
    990a:	70 a5       	ldd	r23, Z+40	; 0x28
    990c:	48 0f       	add	r20, r24
    990e:	59 1f       	adc	r21, r25
    9910:	61 1d       	adc	r22, r1
    9912:	71 1d       	adc	r23, r1
    9914:	cf 01       	movw	r24, r30
    9916:	9a dc       	rcall	.-1740   	; 0x924c <move_window>
    9918:	5c 01       	movw	r10, r24
    991a:	89 2b       	or	r24, r25
    991c:	09 f0       	breq	.+2      	; 0x9920 <put_fat+0x82>
    991e:	b7 c0       	rjmp	.+366    	; 0x9a8e <put_fat+0x1f0>
    9920:	2d 80       	ldd	r2, Y+5	; 0x05
    9922:	3e 80       	ldd	r3, Y+6	; 0x06
    9924:	f5 e3       	ldi	r31, 0x35	; 53
    9926:	2f 0e       	add	r2, r31
    9928:	31 1c       	adc	r3, r1
    992a:	84 01       	movw	r16, r8
    992c:	0f 5f       	subi	r16, 0xFF	; 255
    992e:	1f 4f       	sbci	r17, 0xFF	; 255
    9930:	21 e0       	ldi	r18, 0x01	; 1
    9932:	92 22       	and	r9, r18
    9934:	f1 01       	movw	r30, r2
    9936:	e8 0d       	add	r30, r8
    9938:	f9 1d       	adc	r31, r9
    993a:	d7 01       	movw	r26, r14
    993c:	c6 01       	movw	r24, r12
    993e:	81 70       	andi	r24, 0x01	; 1
    9940:	99 27       	eor	r25, r25
    9942:	aa 27       	eor	r26, r26
    9944:	bb 27       	eor	r27, r27
    9946:	89 83       	std	Y+1, r24	; 0x01
    9948:	9a 83       	std	Y+2, r25	; 0x02
    994a:	ab 83       	std	Y+3, r26	; 0x03
    994c:	bc 83       	std	Y+4, r27	; 0x04
    994e:	c0 fe       	sbrs	r12, 0
    9950:	09 c0       	rjmp	.+18     	; 0x9964 <put_fat+0xc6>
    9952:	80 81       	ld	r24, Z
    9954:	28 2f       	mov	r18, r24
    9956:	2f 70       	andi	r18, 0x0F	; 15
    9958:	a0 e1       	ldi	r26, 0x10	; 16
    995a:	4a 9e       	mul	r4, r26
    995c:	c0 01       	movw	r24, r0
    995e:	11 24       	eor	r1, r1
    9960:	82 2b       	or	r24, r18
    9962:	01 c0       	rjmp	.+2      	; 0x9966 <put_fat+0xc8>
    9964:	84 2d       	mov	r24, r4
    9966:	80 83       	st	Z, r24
    9968:	81 e0       	ldi	r24, 0x01	; 1
    996a:	ed 81       	ldd	r30, Y+5	; 0x05
    996c:	fe 81       	ldd	r31, Y+6	; 0x06
    996e:	83 83       	std	Z+3, r24	; 0x03
    9970:	45 a1       	ldd	r20, Z+37	; 0x25
    9972:	56 a1       	ldd	r21, Z+38	; 0x26
    9974:	67 a1       	ldd	r22, Z+39	; 0x27
    9976:	70 a5       	ldd	r23, Z+40	; 0x28
    9978:	c8 01       	movw	r24, r16
    997a:	89 2f       	mov	r24, r25
    997c:	99 27       	eor	r25, r25
    997e:	86 95       	lsr	r24
    9980:	48 0f       	add	r20, r24
    9982:	59 1f       	adc	r21, r25
    9984:	61 1d       	adc	r22, r1
    9986:	71 1d       	adc	r23, r1
    9988:	cf 01       	movw	r24, r30
    998a:	60 dc       	rcall	.-1856   	; 0x924c <move_window>
    998c:	5c 01       	movw	r10, r24
    998e:	89 2b       	or	r24, r25
    9990:	09 f0       	breq	.+2      	; 0x9994 <put_fat+0xf6>
    9992:	7d c0       	rjmp	.+250    	; 0x9a8e <put_fat+0x1f0>
    9994:	11 70       	andi	r17, 0x01	; 1
    9996:	f1 01       	movw	r30, r2
    9998:	e0 0f       	add	r30, r16
    999a:	f1 1f       	adc	r31, r17
    999c:	89 81       	ldd	r24, Y+1	; 0x01
    999e:	9a 81       	ldd	r25, Y+2	; 0x02
    99a0:	ab 81       	ldd	r26, Y+3	; 0x03
    99a2:	bc 81       	ldd	r27, Y+4	; 0x04
    99a4:	89 2b       	or	r24, r25
    99a6:	8a 2b       	or	r24, r26
    99a8:	8b 2b       	or	r24, r27
    99aa:	41 f0       	breq	.+16     	; 0x99bc <put_fat+0x11e>
    99ac:	54 e0       	ldi	r21, 0x04	; 4
    99ae:	76 94       	lsr	r7
    99b0:	67 94       	ror	r6
    99b2:	57 94       	ror	r5
    99b4:	47 94       	ror	r4
    99b6:	5a 95       	dec	r21
    99b8:	d1 f7       	brne	.-12     	; 0x99ae <put_fat+0x110>
    99ba:	06 c0       	rjmp	.+12     	; 0x99c8 <put_fat+0x12a>
    99bc:	00 81       	ld	r16, Z
    99be:	00 7f       	andi	r16, 0xF0	; 240
    99c0:	85 2d       	mov	r24, r5
    99c2:	8f 70       	andi	r24, 0x0F	; 15
    99c4:	40 2e       	mov	r4, r16
    99c6:	48 2a       	or	r4, r24
    99c8:	40 82       	st	Z, r4
    99ca:	58 c0       	rjmp	.+176    	; 0x9a7c <put_fat+0x1de>
    99cc:	77 27       	eor	r23, r23
    99ce:	6f 2d       	mov	r22, r15
    99d0:	5e 2d       	mov	r21, r14
    99d2:	4d 2d       	mov	r20, r13
    99d4:	ed 81       	ldd	r30, Y+5	; 0x05
    99d6:	fe 81       	ldd	r31, Y+6	; 0x06
    99d8:	85 a1       	ldd	r24, Z+37	; 0x25
    99da:	96 a1       	ldd	r25, Z+38	; 0x26
    99dc:	a7 a1       	ldd	r26, Z+39	; 0x27
    99de:	b0 a5       	ldd	r27, Z+40	; 0x28
    99e0:	48 0f       	add	r20, r24
    99e2:	59 1f       	adc	r21, r25
    99e4:	6a 1f       	adc	r22, r26
    99e6:	7b 1f       	adc	r23, r27
    99e8:	cf 01       	movw	r24, r30
    99ea:	30 dc       	rcall	.-1952   	; 0x924c <move_window>
    99ec:	5c 01       	movw	r10, r24
    99ee:	89 2b       	or	r24, r25
    99f0:	09 f0       	breq	.+2      	; 0x99f4 <put_fat+0x156>
    99f2:	4d c0       	rjmp	.+154    	; 0x9a8e <put_fat+0x1f0>
    99f4:	ed 81       	ldd	r30, Y+5	; 0x05
    99f6:	fe 81       	ldd	r31, Y+6	; 0x06
    99f8:	f5 96       	adiw	r30, 0x35	; 53
    99fa:	cc 0c       	add	r12, r12
    99fc:	dd 1c       	adc	r13, r13
    99fe:	e8 94       	clt
    9a00:	c0 f8       	bld	r12, 0
    9a02:	21 e0       	ldi	r18, 0x01	; 1
    9a04:	d2 22       	and	r13, r18
    9a06:	ec 0d       	add	r30, r12
    9a08:	fd 1d       	adc	r31, r13
    9a0a:	40 82       	st	Z, r4
    9a0c:	51 82       	std	Z+1, r5	; 0x01
    9a0e:	36 c0       	rjmp	.+108    	; 0x9a7c <put_fat+0x1de>
    9a10:	ed 81       	ldd	r30, Y+5	; 0x05
    9a12:	fe 81       	ldd	r31, Y+6	; 0x06
    9a14:	85 a1       	ldd	r24, Z+37	; 0x25
    9a16:	96 a1       	ldd	r25, Z+38	; 0x26
    9a18:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a1a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a1c:	27 e0       	ldi	r18, 0x07	; 7
    9a1e:	76 95       	lsr	r23
    9a20:	67 95       	ror	r22
    9a22:	57 95       	ror	r21
    9a24:	47 95       	ror	r20
    9a26:	2a 95       	dec	r18
    9a28:	d1 f7       	brne	.-12     	; 0x9a1e <put_fat+0x180>
    9a2a:	48 0f       	add	r20, r24
    9a2c:	59 1f       	adc	r21, r25
    9a2e:	6a 1f       	adc	r22, r26
    9a30:	7b 1f       	adc	r23, r27
    9a32:	cf 01       	movw	r24, r30
    9a34:	0b dc       	rcall	.-2026   	; 0x924c <move_window>
    9a36:	5c 01       	movw	r10, r24
    9a38:	89 2b       	or	r24, r25
    9a3a:	49 f5       	brne	.+82     	; 0x9a8e <put_fat+0x1f0>
    9a3c:	4d 81       	ldd	r20, Y+5	; 0x05
    9a3e:	5e 81       	ldd	r21, Y+6	; 0x06
    9a40:	4b 5c       	subi	r20, 0xCB	; 203
    9a42:	5f 4f       	sbci	r21, 0xFF	; 255
    9a44:	cc 0c       	add	r12, r12
    9a46:	dd 1c       	adc	r13, r13
    9a48:	cc 0c       	add	r12, r12
    9a4a:	dd 1c       	adc	r13, r13
    9a4c:	fc ef       	ldi	r31, 0xFC	; 252
    9a4e:	cf 22       	and	r12, r31
    9a50:	f1 e0       	ldi	r31, 0x01	; 1
    9a52:	df 22       	and	r13, r31
    9a54:	c4 0e       	add	r12, r20
    9a56:	d5 1e       	adc	r13, r21
    9a58:	c6 01       	movw	r24, r12
    9a5a:	21 da       	rcall	.-3006   	; 0x8e9e <ld_dword>
    9a5c:	2f e0       	ldi	r18, 0x0F	; 15
    9a5e:	72 22       	and	r7, r18
    9a60:	dc 01       	movw	r26, r24
    9a62:	cb 01       	movw	r24, r22
    9a64:	88 27       	eor	r24, r24
    9a66:	99 27       	eor	r25, r25
    9a68:	aa 27       	eor	r26, r26
    9a6a:	b0 7f       	andi	r27, 0xF0	; 240
    9a6c:	b3 01       	movw	r22, r6
    9a6e:	a2 01       	movw	r20, r4
    9a70:	48 2b       	or	r20, r24
    9a72:	59 2b       	or	r21, r25
    9a74:	6a 2b       	or	r22, r26
    9a76:	7b 2b       	or	r23, r27
    9a78:	c6 01       	movw	r24, r12
    9a7a:	26 da       	rcall	.-2996   	; 0x8ec8 <st_dword>
    9a7c:	81 e0       	ldi	r24, 0x01	; 1
    9a7e:	ad 81       	ldd	r26, Y+5	; 0x05
    9a80:	be 81       	ldd	r27, Y+6	; 0x06
    9a82:	13 96       	adiw	r26, 0x03	; 3
    9a84:	8c 93       	st	X, r24
    9a86:	03 c0       	rjmp	.+6      	; 0x9a8e <put_fat+0x1f0>
    9a88:	82 e0       	ldi	r24, 0x02	; 2
    9a8a:	a8 2e       	mov	r10, r24
    9a8c:	b1 2c       	mov	r11, r1
    9a8e:	c5 01       	movw	r24, r10
    9a90:	26 96       	adiw	r28, 0x06	; 6
    9a92:	e2 e1       	ldi	r30, 0x12	; 18
    9a94:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

00009a98 <get_fat.isra.7>:
    9a98:	a0 e0       	ldi	r26, 0x00	; 0
    9a9a:	b0 e0       	ldi	r27, 0x00	; 0
    9a9c:	e2 e5       	ldi	r30, 0x52	; 82
    9a9e:	fd e4       	ldi	r31, 0x4D	; 77
    9aa0:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
    9aa4:	42 30       	cpi	r20, 0x02	; 2
    9aa6:	51 05       	cpc	r21, r1
    9aa8:	61 05       	cpc	r22, r1
    9aaa:	71 05       	cpc	r23, r1
    9aac:	08 f4       	brcc	.+2      	; 0x9ab0 <get_fat.isra.7+0x18>
    9aae:	9e c0       	rjmp	.+316    	; 0x9bec <get_fat.isra.7+0x154>
    9ab0:	fc 01       	movw	r30, r24
    9ab2:	01 8d       	ldd	r16, Z+25	; 0x19
    9ab4:	12 8d       	ldd	r17, Z+26	; 0x1a
    9ab6:	23 8d       	ldd	r18, Z+27	; 0x1b
    9ab8:	34 8d       	ldd	r19, Z+28	; 0x1c
    9aba:	40 17       	cp	r20, r16
    9abc:	51 07       	cpc	r21, r17
    9abe:	62 07       	cpc	r22, r18
    9ac0:	73 07       	cpc	r23, r19
    9ac2:	08 f0       	brcs	.+2      	; 0x9ac6 <get_fat.isra.7+0x2e>
    9ac4:	93 c0       	rjmp	.+294    	; 0x9bec <get_fat.isra.7+0x154>
    9ac6:	6a 01       	movw	r12, r20
    9ac8:	7b 01       	movw	r14, r22
    9aca:	8c 01       	movw	r16, r24
    9acc:	80 81       	ld	r24, Z
    9ace:	82 30       	cpi	r24, 0x02	; 2
    9ad0:	09 f4       	brne	.+2      	; 0x9ad4 <get_fat.isra.7+0x3c>
    9ad2:	4b c0       	rjmp	.+150    	; 0x9b6a <get_fat.isra.7+0xd2>
    9ad4:	83 30       	cpi	r24, 0x03	; 3
    9ad6:	09 f4       	brne	.+2      	; 0x9ada <get_fat.isra.7+0x42>
    9ad8:	67 c0       	rjmp	.+206    	; 0x9ba8 <get_fat.isra.7+0x110>
    9ada:	81 30       	cpi	r24, 0x01	; 1
    9adc:	09 f0       	breq	.+2      	; 0x9ae0 <get_fat.isra.7+0x48>
    9ade:	86 c0       	rjmp	.+268    	; 0x9bec <get_fat.isra.7+0x154>
    9ae0:	ea 01       	movw	r28, r20
    9ae2:	d6 95       	lsr	r29
    9ae4:	c7 95       	ror	r28
    9ae6:	cc 0d       	add	r28, r12
    9ae8:	dd 1d       	adc	r29, r13
    9aea:	ce 01       	movw	r24, r28
    9aec:	89 2f       	mov	r24, r25
    9aee:	99 27       	eor	r25, r25
    9af0:	86 95       	lsr	r24
    9af2:	45 a1       	ldd	r20, Z+37	; 0x25
    9af4:	56 a1       	ldd	r21, Z+38	; 0x26
    9af6:	67 a1       	ldd	r22, Z+39	; 0x27
    9af8:	70 a5       	ldd	r23, Z+40	; 0x28
    9afa:	48 0f       	add	r20, r24
    9afc:	59 1f       	adc	r21, r25
    9afe:	61 1d       	adc	r22, r1
    9b00:	71 1d       	adc	r23, r1
    9b02:	cf 01       	movw	r24, r30
    9b04:	a3 db       	rcall	.-2234   	; 0x924c <move_window>
    9b06:	89 2b       	or	r24, r25
    9b08:	21 f0       	breq	.+8      	; 0x9b12 <get_fat.isra.7+0x7a>
    9b0a:	6f ef       	ldi	r22, 0xFF	; 255
    9b0c:	7f ef       	ldi	r23, 0xFF	; 255
    9b0e:	cb 01       	movw	r24, r22
    9b10:	71 c0       	rjmp	.+226    	; 0x9bf4 <get_fat.isra.7+0x15c>
    9b12:	5e 01       	movw	r10, r28
    9b14:	ff ef       	ldi	r31, 0xFF	; 255
    9b16:	af 1a       	sub	r10, r31
    9b18:	bf 0a       	sbc	r11, r31
    9b1a:	d1 70       	andi	r29, 0x01	; 1
    9b1c:	c0 0f       	add	r28, r16
    9b1e:	d1 1f       	adc	r29, r17
    9b20:	cd a9       	ldd	r28, Y+53	; 0x35
    9b22:	c5 01       	movw	r24, r10
    9b24:	89 2f       	mov	r24, r25
    9b26:	99 27       	eor	r25, r25
    9b28:	86 95       	lsr	r24
    9b2a:	f8 01       	movw	r30, r16
    9b2c:	45 a1       	ldd	r20, Z+37	; 0x25
    9b2e:	56 a1       	ldd	r21, Z+38	; 0x26
    9b30:	67 a1       	ldd	r22, Z+39	; 0x27
    9b32:	70 a5       	ldd	r23, Z+40	; 0x28
    9b34:	48 0f       	add	r20, r24
    9b36:	59 1f       	adc	r21, r25
    9b38:	61 1d       	adc	r22, r1
    9b3a:	71 1d       	adc	r23, r1
    9b3c:	c8 01       	movw	r24, r16
    9b3e:	86 db       	rcall	.-2292   	; 0x924c <move_window>
    9b40:	89 2b       	or	r24, r25
    9b42:	19 f7       	brne	.-58     	; 0x9b0a <get_fat.isra.7+0x72>
    9b44:	f1 e0       	ldi	r31, 0x01	; 1
    9b46:	bf 22       	and	r11, r31
    9b48:	f8 01       	movw	r30, r16
    9b4a:	ea 0d       	add	r30, r10
    9b4c:	fb 1d       	adc	r31, r11
    9b4e:	85 a9       	ldd	r24, Z+53	; 0x35
    9b50:	6c 2f       	mov	r22, r28
    9b52:	70 e0       	ldi	r23, 0x00	; 0
    9b54:	78 2b       	or	r23, r24
    9b56:	c0 fe       	sbrs	r12, 0
    9b58:	06 c0       	rjmp	.+12     	; 0x9b66 <get_fat.isra.7+0xce>
    9b5a:	54 e0       	ldi	r21, 0x04	; 4
    9b5c:	76 95       	lsr	r23
    9b5e:	67 95       	ror	r22
    9b60:	5a 95       	dec	r21
    9b62:	e1 f7       	brne	.-8      	; 0x9b5c <get_fat.isra.7+0xc4>
    9b64:	1e c0       	rjmp	.+60     	; 0x9ba2 <get_fat.isra.7+0x10a>
    9b66:	7f 70       	andi	r23, 0x0F	; 15
    9b68:	1c c0       	rjmp	.+56     	; 0x9ba2 <get_fat.isra.7+0x10a>
    9b6a:	77 27       	eor	r23, r23
    9b6c:	6f 2d       	mov	r22, r15
    9b6e:	5e 2d       	mov	r21, r14
    9b70:	4d 2d       	mov	r20, r13
    9b72:	85 a1       	ldd	r24, Z+37	; 0x25
    9b74:	96 a1       	ldd	r25, Z+38	; 0x26
    9b76:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b78:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b7a:	48 0f       	add	r20, r24
    9b7c:	59 1f       	adc	r21, r25
    9b7e:	6a 1f       	adc	r22, r26
    9b80:	7b 1f       	adc	r23, r27
    9b82:	cf 01       	movw	r24, r30
    9b84:	63 db       	rcall	.-2362   	; 0x924c <move_window>
    9b86:	89 2b       	or	r24, r25
    9b88:	09 f0       	breq	.+2      	; 0x9b8c <get_fat.isra.7+0xf4>
    9b8a:	bf cf       	rjmp	.-130    	; 0x9b0a <get_fat.isra.7+0x72>
    9b8c:	cc 0c       	add	r12, r12
    9b8e:	dd 1c       	adc	r13, r13
    9b90:	e8 94       	clt
    9b92:	c0 f8       	bld	r12, 0
    9b94:	f1 e0       	ldi	r31, 0x01	; 1
    9b96:	df 22       	and	r13, r31
    9b98:	f8 01       	movw	r30, r16
    9b9a:	ec 0d       	add	r30, r12
    9b9c:	fd 1d       	adc	r31, r13
    9b9e:	65 a9       	ldd	r22, Z+53	; 0x35
    9ba0:	76 a9       	ldd	r23, Z+54	; 0x36
    9ba2:	80 e0       	ldi	r24, 0x00	; 0
    9ba4:	90 e0       	ldi	r25, 0x00	; 0
    9ba6:	26 c0       	rjmp	.+76     	; 0x9bf4 <get_fat.isra.7+0x15c>
    9ba8:	85 a1       	ldd	r24, Z+37	; 0x25
    9baa:	96 a1       	ldd	r25, Z+38	; 0x26
    9bac:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bae:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bb0:	27 e0       	ldi	r18, 0x07	; 7
    9bb2:	76 95       	lsr	r23
    9bb4:	67 95       	ror	r22
    9bb6:	57 95       	ror	r21
    9bb8:	47 95       	ror	r20
    9bba:	2a 95       	dec	r18
    9bbc:	d1 f7       	brne	.-12     	; 0x9bb2 <get_fat.isra.7+0x11a>
    9bbe:	48 0f       	add	r20, r24
    9bc0:	59 1f       	adc	r21, r25
    9bc2:	6a 1f       	adc	r22, r26
    9bc4:	7b 1f       	adc	r23, r27
    9bc6:	cf 01       	movw	r24, r30
    9bc8:	41 db       	rcall	.-2430   	; 0x924c <move_window>
    9bca:	89 2b       	or	r24, r25
    9bcc:	09 f0       	breq	.+2      	; 0x9bd0 <get_fat.isra.7+0x138>
    9bce:	9d cf       	rjmp	.-198    	; 0x9b0a <get_fat.isra.7+0x72>
    9bd0:	0b 5c       	subi	r16, 0xCB	; 203
    9bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    9bd4:	cc 0c       	add	r12, r12
    9bd6:	dd 1c       	adc	r13, r13
    9bd8:	cc 0c       	add	r12, r12
    9bda:	dd 1c       	adc	r13, r13
    9bdc:	c6 01       	movw	r24, r12
    9bde:	8c 7f       	andi	r24, 0xFC	; 252
    9be0:	91 70       	andi	r25, 0x01	; 1
    9be2:	80 0f       	add	r24, r16
    9be4:	91 1f       	adc	r25, r17
    9be6:	5b d9       	rcall	.-3402   	; 0x8e9e <ld_dword>
    9be8:	9f 70       	andi	r25, 0x0F	; 15
    9bea:	04 c0       	rjmp	.+8      	; 0x9bf4 <get_fat.isra.7+0x15c>
    9bec:	61 e0       	ldi	r22, 0x01	; 1
    9bee:	70 e0       	ldi	r23, 0x00	; 0
    9bf0:	80 e0       	ldi	r24, 0x00	; 0
    9bf2:	90 e0       	ldi	r25, 0x00	; 0
    9bf4:	cd b7       	in	r28, 0x3d	; 61
    9bf6:	de b7       	in	r29, 0x3e	; 62
    9bf8:	ea e0       	ldi	r30, 0x0A	; 10
    9bfa:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00009bfe <dir_sdi>:
    9bfe:	a0 e0       	ldi	r26, 0x00	; 0
    9c00:	b0 e0       	ldi	r27, 0x00	; 0
    9c02:	e5 e0       	ldi	r30, 0x05	; 5
    9c04:	fe e4       	ldi	r31, 0x4E	; 78
    9c06:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
    9c0a:	ec 01       	movw	r28, r24
    9c0c:	6a 01       	movw	r12, r20
    9c0e:	7b 01       	movw	r14, r22
    9c10:	41 15       	cp	r20, r1
    9c12:	51 05       	cpc	r21, r1
    9c14:	80 e2       	ldi	r24, 0x20	; 32
    9c16:	68 07       	cpc	r22, r24
    9c18:	71 05       	cpc	r23, r1
    9c1a:	18 f0       	brcs	.+6      	; 0x9c22 <dir_sdi+0x24>
    9c1c:	82 e0       	ldi	r24, 0x02	; 2
    9c1e:	90 e0       	ldi	r25, 0x00	; 0
    9c20:	a9 c0       	rjmp	.+338    	; 0x9d74 <dir_sdi+0x176>
    9c22:	db 01       	movw	r26, r22
    9c24:	ca 01       	movw	r24, r20
    9c26:	8f 71       	andi	r24, 0x1F	; 31
    9c28:	99 27       	eor	r25, r25
    9c2a:	aa 27       	eor	r26, r26
    9c2c:	bb 27       	eor	r27, r27
    9c2e:	89 2b       	or	r24, r25
    9c30:	8a 2b       	or	r24, r26
    9c32:	8b 2b       	or	r24, r27
    9c34:	99 f7       	brne	.-26     	; 0x9c1c <dir_sdi+0x1e>
    9c36:	08 81       	ld	r16, Y
    9c38:	19 81       	ldd	r17, Y+1	; 0x01
    9c3a:	4e 87       	std	Y+14, r20	; 0x0e
    9c3c:	5f 87       	std	Y+15, r21	; 0x0f
    9c3e:	68 8b       	std	Y+16, r22	; 0x10
    9c40:	79 8b       	std	Y+17, r23	; 0x11
    9c42:	8e 80       	ldd	r8, Y+6	; 0x06
    9c44:	9f 80       	ldd	r9, Y+7	; 0x07
    9c46:	a8 84       	ldd	r10, Y+8	; 0x08
    9c48:	b9 84       	ldd	r11, Y+9	; 0x09
    9c4a:	81 14       	cp	r8, r1
    9c4c:	91 04       	cpc	r9, r1
    9c4e:	a1 04       	cpc	r10, r1
    9c50:	b1 04       	cpc	r11, r1
    9c52:	51 f5       	brne	.+84     	; 0x9ca8 <dir_sdi+0xaa>
    9c54:	f8 01       	movw	r30, r16
    9c56:	80 81       	ld	r24, Z
    9c58:	83 30       	cpi	r24, 0x03	; 3
    9c5a:	40 f0       	brcs	.+16     	; 0x9c6c <dir_sdi+0x6e>
    9c5c:	81 a5       	ldd	r24, Z+41	; 0x29
    9c5e:	92 a5       	ldd	r25, Z+42	; 0x2a
    9c60:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9c62:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9c64:	00 97       	sbiw	r24, 0x00	; 0
    9c66:	a1 05       	cpc	r26, r1
    9c68:	b1 05       	cpc	r27, r1
    9c6a:	e1 f4       	brne	.+56     	; 0x9ca4 <dir_sdi+0xa6>
    9c6c:	f8 01       	movw	r30, r16
    9c6e:	87 81       	ldd	r24, Z+7	; 0x07
    9c70:	90 85       	ldd	r25, Z+8	; 0x08
    9c72:	a0 e0       	ldi	r26, 0x00	; 0
    9c74:	b0 e0       	ldi	r27, 0x00	; 0
    9c76:	b7 01       	movw	r22, r14
    9c78:	a6 01       	movw	r20, r12
    9c7a:	25 e0       	ldi	r18, 0x05	; 5
    9c7c:	76 95       	lsr	r23
    9c7e:	67 95       	ror	r22
    9c80:	57 95       	ror	r21
    9c82:	47 95       	ror	r20
    9c84:	2a 95       	dec	r18
    9c86:	d1 f7       	brne	.-12     	; 0x9c7c <dir_sdi+0x7e>
    9c88:	48 17       	cp	r20, r24
    9c8a:	59 07       	cpc	r21, r25
    9c8c:	6a 07       	cpc	r22, r26
    9c8e:	7b 07       	cpc	r23, r27
    9c90:	28 f6       	brcc	.-118    	; 0x9c1c <dir_sdi+0x1e>
    9c92:	81 a5       	ldd	r24, Z+41	; 0x29
    9c94:	92 a5       	ldd	r25, Z+42	; 0x2a
    9c96:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9c98:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9c9a:	8e 8b       	std	Y+22, r24	; 0x16
    9c9c:	9f 8b       	std	Y+23, r25	; 0x17
    9c9e:	a8 8f       	std	Y+24, r26	; 0x18
    9ca0:	b9 8f       	std	Y+25, r27	; 0x19
    9ca2:	3d c0       	rjmp	.+122    	; 0x9d1e <dir_sdi+0x120>
    9ca4:	4c 01       	movw	r8, r24
    9ca6:	5d 01       	movw	r10, r26
    9ca8:	f8 01       	movw	r30, r16
    9caa:	41 84       	ldd	r4, Z+9	; 0x09
    9cac:	52 84       	ldd	r5, Z+10	; 0x0a
    9cae:	61 2c       	mov	r6, r1
    9cb0:	71 2c       	mov	r7, r1
    9cb2:	39 e0       	ldi	r19, 0x09	; 9
    9cb4:	44 0c       	add	r4, r4
    9cb6:	55 1c       	adc	r5, r5
    9cb8:	66 1c       	adc	r6, r6
    9cba:	77 1c       	adc	r7, r7
    9cbc:	3a 95       	dec	r19
    9cbe:	d1 f7       	brne	.-12     	; 0x9cb4 <dir_sdi+0xb6>
    9cc0:	b5 01       	movw	r22, r10
    9cc2:	a4 01       	movw	r20, r8
    9cc4:	c4 14       	cp	r12, r4
    9cc6:	d5 04       	cpc	r13, r5
    9cc8:	e6 04       	cpc	r14, r6
    9cca:	f7 04       	cpc	r15, r7
    9ccc:	10 f1       	brcs	.+68     	; 0x9d12 <dir_sdi+0x114>
    9cce:	88 81       	ld	r24, Y
    9cd0:	99 81       	ldd	r25, Y+1	; 0x01
    9cd2:	e2 de       	rcall	.-572    	; 0x9a98 <get_fat.isra.7>
    9cd4:	4b 01       	movw	r8, r22
    9cd6:	5c 01       	movw	r10, r24
    9cd8:	6f 3f       	cpi	r22, 0xFF	; 255
    9cda:	7f 4f       	sbci	r23, 0xFF	; 255
    9cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    9cde:	9f 4f       	sbci	r25, 0xFF	; 255
    9ce0:	09 f4       	brne	.+2      	; 0x9ce4 <dir_sdi+0xe6>
    9ce2:	46 c0       	rjmp	.+140    	; 0x9d70 <dir_sdi+0x172>
    9ce4:	82 e0       	ldi	r24, 0x02	; 2
    9ce6:	88 16       	cp	r8, r24
    9ce8:	91 04       	cpc	r9, r1
    9cea:	a1 04       	cpc	r10, r1
    9cec:	b1 04       	cpc	r11, r1
    9cee:	08 f4       	brcc	.+2      	; 0x9cf2 <dir_sdi+0xf4>
    9cf0:	95 cf       	rjmp	.-214    	; 0x9c1c <dir_sdi+0x1e>
    9cf2:	f8 01       	movw	r30, r16
    9cf4:	81 8d       	ldd	r24, Z+25	; 0x19
    9cf6:	92 8d       	ldd	r25, Z+26	; 0x1a
    9cf8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9cfa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9cfc:	88 16       	cp	r8, r24
    9cfe:	99 06       	cpc	r9, r25
    9d00:	aa 06       	cpc	r10, r26
    9d02:	bb 06       	cpc	r11, r27
    9d04:	08 f0       	brcs	.+2      	; 0x9d08 <dir_sdi+0x10a>
    9d06:	8a cf       	rjmp	.-236    	; 0x9c1c <dir_sdi+0x1e>
    9d08:	c4 18       	sub	r12, r4
    9d0a:	d5 08       	sbc	r13, r5
    9d0c:	e6 08       	sbc	r14, r6
    9d0e:	f7 08       	sbc	r15, r7
    9d10:	d7 cf       	rjmp	.-82     	; 0x9cc0 <dir_sdi+0xc2>
    9d12:	c8 01       	movw	r24, r16
    9d14:	e8 d8       	rcall	.-3632   	; 0x8ee6 <clust2sect>
    9d16:	6e 8b       	std	Y+22, r22	; 0x16
    9d18:	7f 8b       	std	Y+23, r23	; 0x17
    9d1a:	88 8f       	std	Y+24, r24	; 0x18
    9d1c:	99 8f       	std	Y+25, r25	; 0x19
    9d1e:	8a 8a       	std	Y+18, r8	; 0x12
    9d20:	9b 8a       	std	Y+19, r9	; 0x13
    9d22:	ac 8a       	std	Y+20, r10	; 0x14
    9d24:	bd 8a       	std	Y+21, r11	; 0x15
    9d26:	8e 89       	ldd	r24, Y+22	; 0x16
    9d28:	9f 89       	ldd	r25, Y+23	; 0x17
    9d2a:	a8 8d       	ldd	r26, Y+24	; 0x18
    9d2c:	b9 8d       	ldd	r27, Y+25	; 0x19
    9d2e:	00 97       	sbiw	r24, 0x00	; 0
    9d30:	a1 05       	cpc	r26, r1
    9d32:	b1 05       	cpc	r27, r1
    9d34:	09 f4       	brne	.+2      	; 0x9d38 <dir_sdi+0x13a>
    9d36:	72 cf       	rjmp	.-284    	; 0x9c1c <dir_sdi+0x1e>
    9d38:	b7 01       	movw	r22, r14
    9d3a:	a6 01       	movw	r20, r12
    9d3c:	29 e0       	ldi	r18, 0x09	; 9
    9d3e:	76 95       	lsr	r23
    9d40:	67 95       	ror	r22
    9d42:	57 95       	ror	r21
    9d44:	47 95       	ror	r20
    9d46:	2a 95       	dec	r18
    9d48:	d1 f7       	brne	.-12     	; 0x9d3e <dir_sdi+0x140>
    9d4a:	84 0f       	add	r24, r20
    9d4c:	95 1f       	adc	r25, r21
    9d4e:	a6 1f       	adc	r26, r22
    9d50:	b7 1f       	adc	r27, r23
    9d52:	8e 8b       	std	Y+22, r24	; 0x16
    9d54:	9f 8b       	std	Y+23, r25	; 0x17
    9d56:	a8 8f       	std	Y+24, r26	; 0x18
    9d58:	b9 8f       	std	Y+25, r27	; 0x19
    9d5a:	0b 5c       	subi	r16, 0xCB	; 203
    9d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    9d5e:	f1 e0       	ldi	r31, 0x01	; 1
    9d60:	df 22       	and	r13, r31
    9d62:	c0 0e       	add	r12, r16
    9d64:	d1 1e       	adc	r13, r17
    9d66:	db 8e       	std	Y+27, r13	; 0x1b
    9d68:	ca 8e       	std	Y+26, r12	; 0x1a
    9d6a:	80 e0       	ldi	r24, 0x00	; 0
    9d6c:	90 e0       	ldi	r25, 0x00	; 0
    9d6e:	02 c0       	rjmp	.+4      	; 0x9d74 <dir_sdi+0x176>
    9d70:	81 e0       	ldi	r24, 0x01	; 1
    9d72:	90 e0       	ldi	r25, 0x00	; 0
    9d74:	cd b7       	in	r28, 0x3d	; 61
    9d76:	de b7       	in	r29, 0x3e	; 62
    9d78:	e0 e1       	ldi	r30, 0x10	; 16
    9d7a:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

00009d7e <create_chain>:
    9d7e:	a0 e0       	ldi	r26, 0x00	; 0
    9d80:	b0 e0       	ldi	r27, 0x00	; 0
    9d82:	e5 ec       	ldi	r30, 0xC5	; 197
    9d84:	fe e4       	ldi	r31, 0x4E	; 78
    9d86:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
    9d8a:	8c 01       	movw	r16, r24
    9d8c:	2a 01       	movw	r4, r20
    9d8e:	3b 01       	movw	r6, r22
    9d90:	fc 01       	movw	r30, r24
    9d92:	c0 81       	ld	r28, Z
    9d94:	d1 81       	ldd	r29, Z+1	; 0x01
    9d96:	41 15       	cp	r20, r1
    9d98:	51 05       	cpc	r21, r1
    9d9a:	61 05       	cpc	r22, r1
    9d9c:	71 05       	cpc	r23, r1
    9d9e:	99 f4       	brne	.+38     	; 0x9dc6 <create_chain+0x48>
    9da0:	8d 84       	ldd	r8, Y+13	; 0x0d
    9da2:	9e 84       	ldd	r9, Y+14	; 0x0e
    9da4:	af 84       	ldd	r10, Y+15	; 0x0f
    9da6:	b8 88       	ldd	r11, Y+16	; 0x10
    9da8:	81 14       	cp	r8, r1
    9daa:	91 04       	cpc	r9, r1
    9dac:	a1 04       	cpc	r10, r1
    9dae:	b1 04       	cpc	r11, r1
    9db0:	51 f1       	breq	.+84     	; 0x9e06 <create_chain+0x88>
    9db2:	89 8d       	ldd	r24, Y+25	; 0x19
    9db4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9db6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9db8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9dba:	88 16       	cp	r8, r24
    9dbc:	99 06       	cpc	r9, r25
    9dbe:	aa 06       	cpc	r10, r26
    9dc0:	bb 06       	cpc	r11, r27
    9dc2:	28 f1       	brcs	.+74     	; 0x9e0e <create_chain+0x90>
    9dc4:	20 c0       	rjmp	.+64     	; 0x9e06 <create_chain+0x88>
    9dc6:	ce 01       	movw	r24, r28
    9dc8:	67 de       	rcall	.-818    	; 0x9a98 <get_fat.isra.7>
    9dca:	62 30       	cpi	r22, 0x02	; 2
    9dcc:	71 05       	cpc	r23, r1
    9dce:	81 05       	cpc	r24, r1
    9dd0:	91 05       	cpc	r25, r1
    9dd2:	08 f4       	brcc	.+2      	; 0x9dd6 <create_chain+0x58>
    9dd4:	95 c0       	rjmp	.+298    	; 0x9f00 <create_chain+0x182>
    9dd6:	6f 3f       	cpi	r22, 0xFF	; 255
    9dd8:	ff ef       	ldi	r31, 0xFF	; 255
    9dda:	7f 07       	cpc	r23, r31
    9ddc:	8f 07       	cpc	r24, r31
    9dde:	9f 07       	cpc	r25, r31
    9de0:	29 f4       	brne	.+10     	; 0x9dec <create_chain+0x6e>
    9de2:	4f ef       	ldi	r20, 0xFF	; 255
    9de4:	3f ef       	ldi	r19, 0xFF	; 255
    9de6:	2f ef       	ldi	r18, 0xFF	; 255
    9de8:	9f ef       	ldi	r25, 0xFF	; 255
    9dea:	92 c0       	rjmp	.+292    	; 0x9f10 <create_chain+0x192>
    9dec:	c9 8c       	ldd	r12, Y+25	; 0x19
    9dee:	da 8c       	ldd	r13, Y+26	; 0x1a
    9df0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9df2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9df4:	6c 15       	cp	r22, r12
    9df6:	7d 05       	cpc	r23, r13
    9df8:	8e 05       	cpc	r24, r14
    9dfa:	9f 05       	cpc	r25, r15
    9dfc:	08 f4       	brcc	.+2      	; 0x9e00 <create_chain+0x82>
    9dfe:	85 c0       	rjmp	.+266    	; 0x9f0a <create_chain+0x18c>
    9e00:	53 01       	movw	r10, r6
    9e02:	42 01       	movw	r8, r4
    9e04:	04 c0       	rjmp	.+8      	; 0x9e0e <create_chain+0x90>
    9e06:	81 2c       	mov	r8, r1
    9e08:	91 2c       	mov	r9, r1
    9e0a:	54 01       	movw	r10, r8
    9e0c:	83 94       	inc	r8
    9e0e:	75 01       	movw	r14, r10
    9e10:	64 01       	movw	r12, r8
    9e12:	2f ef       	ldi	r18, 0xFF	; 255
    9e14:	c2 1a       	sub	r12, r18
    9e16:	d2 0a       	sbc	r13, r18
    9e18:	e2 0a       	sbc	r14, r18
    9e1a:	f2 0a       	sbc	r15, r18
    9e1c:	89 8d       	ldd	r24, Y+25	; 0x19
    9e1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e20:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e22:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e24:	c8 16       	cp	r12, r24
    9e26:	d9 06       	cpc	r13, r25
    9e28:	ea 06       	cpc	r14, r26
    9e2a:	fb 06       	cpc	r15, r27
    9e2c:	68 f0       	brcs	.+26     	; 0x9e48 <create_chain+0xca>
    9e2e:	82 e0       	ldi	r24, 0x02	; 2
    9e30:	88 16       	cp	r8, r24
    9e32:	91 04       	cpc	r9, r1
    9e34:	a1 04       	cpc	r10, r1
    9e36:	b1 04       	cpc	r11, r1
    9e38:	10 f4       	brcc	.+4      	; 0x9e3e <create_chain+0xc0>
    9e3a:	40 e0       	ldi	r20, 0x00	; 0
    9e3c:	62 c0       	rjmp	.+196    	; 0x9f02 <create_chain+0x184>
    9e3e:	82 e0       	ldi	r24, 0x02	; 2
    9e40:	c8 2e       	mov	r12, r24
    9e42:	d1 2c       	mov	r13, r1
    9e44:	e1 2c       	mov	r14, r1
    9e46:	f1 2c       	mov	r15, r1
    9e48:	b7 01       	movw	r22, r14
    9e4a:	a6 01       	movw	r20, r12
    9e4c:	f8 01       	movw	r30, r16
    9e4e:	80 81       	ld	r24, Z
    9e50:	91 81       	ldd	r25, Z+1	; 0x01
    9e52:	22 de       	rcall	.-956    	; 0x9a98 <get_fat.isra.7>
    9e54:	61 15       	cp	r22, r1
    9e56:	71 05       	cpc	r23, r1
    9e58:	81 05       	cpc	r24, r1
    9e5a:	91 05       	cpc	r25, r1
    9e5c:	91 f0       	breq	.+36     	; 0x9e82 <create_chain+0x104>
    9e5e:	61 30       	cpi	r22, 0x01	; 1
    9e60:	71 05       	cpc	r23, r1
    9e62:	81 05       	cpc	r24, r1
    9e64:	91 05       	cpc	r25, r1
    9e66:	09 f4       	brne	.+2      	; 0x9e6a <create_chain+0xec>
    9e68:	4b c0       	rjmp	.+150    	; 0x9f00 <create_chain+0x182>
    9e6a:	6f 3f       	cpi	r22, 0xFF	; 255
    9e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    9e70:	9f 4f       	sbci	r25, 0xFF	; 255
    9e72:	09 f4       	brne	.+2      	; 0x9e76 <create_chain+0xf8>
    9e74:	b6 cf       	rjmp	.-148    	; 0x9de2 <create_chain+0x64>
    9e76:	c8 14       	cp	r12, r8
    9e78:	d9 04       	cpc	r13, r9
    9e7a:	ea 04       	cpc	r14, r10
    9e7c:	fb 04       	cpc	r15, r11
    9e7e:	49 f6       	brne	.-110    	; 0x9e12 <create_chain+0x94>
    9e80:	dc cf       	rjmp	.-72     	; 0x9e3a <create_chain+0xbc>
    9e82:	0f ef       	ldi	r16, 0xFF	; 255
    9e84:	1f ef       	ldi	r17, 0xFF	; 255
    9e86:	98 01       	movw	r18, r16
    9e88:	b7 01       	movw	r22, r14
    9e8a:	a6 01       	movw	r20, r12
    9e8c:	ce 01       	movw	r24, r28
    9e8e:	07 dd       	rcall	.-1522   	; 0x989e <put_fat>
    9e90:	00 97       	sbiw	r24, 0x00	; 0
    9e92:	99 f5       	brne	.+102    	; 0x9efa <create_chain+0x17c>
    9e94:	41 14       	cp	r4, r1
    9e96:	51 04       	cpc	r5, r1
    9e98:	61 04       	cpc	r6, r1
    9e9a:	71 04       	cpc	r7, r1
    9e9c:	e9 f4       	brne	.+58     	; 0x9ed8 <create_chain+0x15a>
    9e9e:	cd 86       	std	Y+13, r12	; 0x0d
    9ea0:	de 86       	std	Y+14, r13	; 0x0e
    9ea2:	ef 86       	std	Y+15, r14	; 0x0f
    9ea4:	f8 8a       	std	Y+16, r15	; 0x10
    9ea6:	89 89       	ldd	r24, Y+17	; 0x11
    9ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    9eaa:	ab 89       	ldd	r26, Y+19	; 0x13
    9eac:	bc 89       	ldd	r27, Y+20	; 0x14
    9eae:	49 8d       	ldd	r20, Y+25	; 0x19
    9eb0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9eb2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9eb4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9eb6:	42 50       	subi	r20, 0x02	; 2
    9eb8:	51 09       	sbc	r21, r1
    9eba:	61 09       	sbc	r22, r1
    9ebc:	71 09       	sbc	r23, r1
    9ebe:	84 17       	cp	r24, r20
    9ec0:	95 07       	cpc	r25, r21
    9ec2:	a6 07       	cpc	r26, r22
    9ec4:	b7 07       	cpc	r27, r23
    9ec6:	88 f4       	brcc	.+34     	; 0x9eea <create_chain+0x16c>
    9ec8:	01 97       	sbiw	r24, 0x01	; 1
    9eca:	a1 09       	sbc	r26, r1
    9ecc:	b1 09       	sbc	r27, r1
    9ece:	89 8b       	std	Y+17, r24	; 0x11
    9ed0:	9a 8b       	std	Y+18, r25	; 0x12
    9ed2:	ab 8b       	std	Y+19, r26	; 0x13
    9ed4:	bc 8b       	std	Y+20, r27	; 0x14
    9ed6:	09 c0       	rjmp	.+18     	; 0x9eea <create_chain+0x16c>
    9ed8:	97 01       	movw	r18, r14
    9eda:	86 01       	movw	r16, r12
    9edc:	b3 01       	movw	r22, r6
    9ede:	a2 01       	movw	r20, r4
    9ee0:	ce 01       	movw	r24, r28
    9ee2:	dd dc       	rcall	.-1606   	; 0x989e <put_fat>
    9ee4:	00 97       	sbiw	r24, 0x00	; 0
    9ee6:	d9 f2       	breq	.-74     	; 0x9e9e <create_chain+0x120>
    9ee8:	08 c0       	rjmp	.+16     	; 0x9efa <create_chain+0x17c>
    9eea:	8c 81       	ldd	r24, Y+4	; 0x04
    9eec:	81 60       	ori	r24, 0x01	; 1
    9eee:	8c 83       	std	Y+4, r24	; 0x04
    9ef0:	4c 2d       	mov	r20, r12
    9ef2:	3d 2d       	mov	r19, r13
    9ef4:	2e 2d       	mov	r18, r14
    9ef6:	9f 2d       	mov	r25, r15
    9ef8:	0b c0       	rjmp	.+22     	; 0x9f10 <create_chain+0x192>
    9efa:	01 97       	sbiw	r24, 0x01	; 1
    9efc:	09 f4       	brne	.+2      	; 0x9f00 <create_chain+0x182>
    9efe:	71 cf       	rjmp	.-286    	; 0x9de2 <create_chain+0x64>
    9f00:	41 e0       	ldi	r20, 0x01	; 1
    9f02:	30 e0       	ldi	r19, 0x00	; 0
    9f04:	20 e0       	ldi	r18, 0x00	; 0
    9f06:	90 e0       	ldi	r25, 0x00	; 0
    9f08:	03 c0       	rjmp	.+6      	; 0x9f10 <create_chain+0x192>
    9f0a:	46 2f       	mov	r20, r22
    9f0c:	37 2f       	mov	r19, r23
    9f0e:	28 2f       	mov	r18, r24
    9f10:	64 2f       	mov	r22, r20
    9f12:	73 2f       	mov	r23, r19
    9f14:	82 2f       	mov	r24, r18
    9f16:	cd b7       	in	r28, 0x3d	; 61
    9f18:	de b7       	in	r29, 0x3e	; 62
    9f1a:	e0 e1       	ldi	r30, 0x10	; 16
    9f1c:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

00009f20 <remove_chain>:
    9f20:	4f 92       	push	r4
    9f22:	5f 92       	push	r5
    9f24:	6f 92       	push	r6
    9f26:	7f 92       	push	r7
    9f28:	af 92       	push	r10
    9f2a:	bf 92       	push	r11
    9f2c:	cf 92       	push	r12
    9f2e:	df 92       	push	r13
    9f30:	ef 92       	push	r14
    9f32:	ff 92       	push	r15
    9f34:	0f 93       	push	r16
    9f36:	1f 93       	push	r17
    9f38:	cf 93       	push	r28
    9f3a:	df 93       	push	r29
    9f3c:	5c 01       	movw	r10, r24
    9f3e:	6a 01       	movw	r12, r20
    9f40:	7b 01       	movw	r14, r22
    9f42:	b9 01       	movw	r22, r18
    9f44:	a8 01       	movw	r20, r16
    9f46:	22 e0       	ldi	r18, 0x02	; 2
    9f48:	c2 16       	cp	r12, r18
    9f4a:	d1 04       	cpc	r13, r1
    9f4c:	e1 04       	cpc	r14, r1
    9f4e:	f1 04       	cpc	r15, r1
    9f50:	10 f4       	brcc	.+4      	; 0x9f56 <remove_chain+0x36>
    9f52:	22 e0       	ldi	r18, 0x02	; 2
    9f54:	27 c0       	rjmp	.+78     	; 0x9fa4 <remove_chain+0x84>
    9f56:	fc 01       	movw	r30, r24
    9f58:	c0 81       	ld	r28, Z
    9f5a:	d1 81       	ldd	r29, Z+1	; 0x01
    9f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    9f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f64:	c8 16       	cp	r12, r24
    9f66:	d9 06       	cpc	r13, r25
    9f68:	ea 06       	cpc	r14, r26
    9f6a:	fb 06       	cpc	r15, r27
    9f6c:	90 f7       	brcc	.-28     	; 0x9f52 <remove_chain+0x32>
    9f6e:	41 15       	cp	r20, r1
    9f70:	51 05       	cpc	r21, r1
    9f72:	61 05       	cpc	r22, r1
    9f74:	71 05       	cpc	r23, r1
    9f76:	41 f0       	breq	.+16     	; 0x9f88 <remove_chain+0x68>
    9f78:	0f ef       	ldi	r16, 0xFF	; 255
    9f7a:	1f ef       	ldi	r17, 0xFF	; 255
    9f7c:	98 01       	movw	r18, r16
    9f7e:	ce 01       	movw	r24, r28
    9f80:	8e dc       	rcall	.-1764   	; 0x989e <put_fat>
    9f82:	00 97       	sbiw	r24, 0x00	; 0
    9f84:	09 f0       	breq	.+2      	; 0x9f88 <remove_chain+0x68>
    9f86:	4c c0       	rjmp	.+152    	; 0xa020 <remove_chain+0x100>
    9f88:	b7 01       	movw	r22, r14
    9f8a:	a6 01       	movw	r20, r12
    9f8c:	f5 01       	movw	r30, r10
    9f8e:	80 81       	ld	r24, Z
    9f90:	91 81       	ldd	r25, Z+1	; 0x01
    9f92:	82 dd       	rcall	.-1276   	; 0x9a98 <get_fat.isra.7>
    9f94:	2b 01       	movw	r4, r22
    9f96:	3c 01       	movw	r6, r24
    9f98:	61 15       	cp	r22, r1
    9f9a:	71 05       	cpc	r23, r1
    9f9c:	81 05       	cpc	r24, r1
    9f9e:	91 05       	cpc	r25, r1
    9fa0:	19 f4       	brne	.+6      	; 0x9fa8 <remove_chain+0x88>
    9fa2:	20 e0       	ldi	r18, 0x00	; 0
    9fa4:	90 e0       	ldi	r25, 0x00	; 0
    9fa6:	3d c0       	rjmp	.+122    	; 0xa022 <remove_chain+0x102>
    9fa8:	61 30       	cpi	r22, 0x01	; 1
    9faa:	71 05       	cpc	r23, r1
    9fac:	81 05       	cpc	r24, r1
    9fae:	91 05       	cpc	r25, r1
    9fb0:	81 f2       	breq	.-96     	; 0x9f52 <remove_chain+0x32>
    9fb2:	6f 3f       	cpi	r22, 0xFF	; 255
    9fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    9fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    9fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    9fba:	81 f1       	breq	.+96     	; 0xa01c <remove_chain+0xfc>
    9fbc:	00 e0       	ldi	r16, 0x00	; 0
    9fbe:	10 e0       	ldi	r17, 0x00	; 0
    9fc0:	98 01       	movw	r18, r16
    9fc2:	b7 01       	movw	r22, r14
    9fc4:	a6 01       	movw	r20, r12
    9fc6:	ce 01       	movw	r24, r28
    9fc8:	6a dc       	rcall	.-1836   	; 0x989e <put_fat>
    9fca:	00 97       	sbiw	r24, 0x00	; 0
    9fcc:	49 f5       	brne	.+82     	; 0xa020 <remove_chain+0x100>
    9fce:	89 89       	ldd	r24, Y+17	; 0x11
    9fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    9fd2:	ab 89       	ldd	r26, Y+19	; 0x13
    9fd4:	bc 89       	ldd	r27, Y+20	; 0x14
    9fd6:	49 8d       	ldd	r20, Y+25	; 0x19
    9fd8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9fda:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9fdc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9fde:	6a 01       	movw	r12, r20
    9fe0:	7b 01       	movw	r14, r22
    9fe2:	e2 e0       	ldi	r30, 0x02	; 2
    9fe4:	ce 1a       	sub	r12, r30
    9fe6:	d1 08       	sbc	r13, r1
    9fe8:	e1 08       	sbc	r14, r1
    9fea:	f1 08       	sbc	r15, r1
    9fec:	8c 15       	cp	r24, r12
    9fee:	9d 05       	cpc	r25, r13
    9ff0:	ae 05       	cpc	r26, r14
    9ff2:	bf 05       	cpc	r27, r15
    9ff4:	50 f4       	brcc	.+20     	; 0xa00a <remove_chain+0xea>
    9ff6:	01 96       	adiw	r24, 0x01	; 1
    9ff8:	a1 1d       	adc	r26, r1
    9ffa:	b1 1d       	adc	r27, r1
    9ffc:	89 8b       	std	Y+17, r24	; 0x11
    9ffe:	9a 8b       	std	Y+18, r25	; 0x12
    a000:	ab 8b       	std	Y+19, r26	; 0x13
    a002:	bc 8b       	std	Y+20, r27	; 0x14
    a004:	8c 81       	ldd	r24, Y+4	; 0x04
    a006:	81 60       	ori	r24, 0x01	; 1
    a008:	8c 83       	std	Y+4, r24	; 0x04
    a00a:	73 01       	movw	r14, r6
    a00c:	62 01       	movw	r12, r4
    a00e:	44 16       	cp	r4, r20
    a010:	55 06       	cpc	r5, r21
    a012:	66 06       	cpc	r6, r22
    a014:	77 06       	cpc	r7, r23
    a016:	08 f4       	brcc	.+2      	; 0xa01a <remove_chain+0xfa>
    a018:	b7 cf       	rjmp	.-146    	; 0x9f88 <remove_chain+0x68>
    a01a:	c3 cf       	rjmp	.-122    	; 0x9fa2 <remove_chain+0x82>
    a01c:	21 e0       	ldi	r18, 0x01	; 1
    a01e:	c2 cf       	rjmp	.-124    	; 0x9fa4 <remove_chain+0x84>
    a020:	28 2f       	mov	r18, r24
    a022:	82 2f       	mov	r24, r18
    a024:	df 91       	pop	r29
    a026:	cf 91       	pop	r28
    a028:	1f 91       	pop	r17
    a02a:	0f 91       	pop	r16
    a02c:	ff 90       	pop	r15
    a02e:	ef 90       	pop	r14
    a030:	df 90       	pop	r13
    a032:	cf 90       	pop	r12
    a034:	bf 90       	pop	r11
    a036:	af 90       	pop	r10
    a038:	7f 90       	pop	r7
    a03a:	6f 90       	pop	r6
    a03c:	5f 90       	pop	r5
    a03e:	4f 90       	pop	r4
    a040:	08 95       	ret

0000a042 <get_fileinfo>:
    a042:	a0 e0       	ldi	r26, 0x00	; 0
    a044:	b0 e0       	ldi	r27, 0x00	; 0
    a046:	e7 e2       	ldi	r30, 0x27	; 39
    a048:	f0 e5       	ldi	r31, 0x50	; 80
    a04a:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
    a04e:	dc 01       	movw	r26, r24
    a050:	cd 90       	ld	r12, X+
    a052:	dc 90       	ld	r13, X
    a054:	11 97       	sbiw	r26, 0x01	; 1
    a056:	fb 01       	movw	r30, r22
    a058:	16 8a       	std	Z+22, r1	; 0x16
    a05a:	56 96       	adiw	r26, 0x16	; 22
    a05c:	0d 91       	ld	r16, X+
    a05e:	1d 91       	ld	r17, X+
    a060:	2d 91       	ld	r18, X+
    a062:	3c 91       	ld	r19, X
    a064:	59 97       	sbiw	r26, 0x19	; 25
    a066:	01 15       	cp	r16, r1
    a068:	11 05       	cpc	r17, r1
    a06a:	21 05       	cpc	r18, r1
    a06c:	31 05       	cpc	r19, r1
    a06e:	09 f4       	brne	.+2      	; 0xa072 <get_fileinfo+0x30>
    a070:	bb c0       	rjmp	.+374    	; 0xa1e8 <get_fileinfo+0x1a6>
    a072:	eb 01       	movw	r28, r22
    a074:	8c 01       	movw	r16, r24
    a076:	fc 01       	movw	r30, r24
    a078:	80 a5       	ldd	r24, Z+40	; 0x28
    a07a:	91 a5       	ldd	r25, Z+41	; 0x29
    a07c:	a2 a5       	ldd	r26, Z+42	; 0x2a
    a07e:	b3 a5       	ldd	r27, Z+43	; 0x2b
    a080:	8f 3f       	cpi	r24, 0xFF	; 255
    a082:	9f 4f       	sbci	r25, 0xFF	; 255
    a084:	af 4f       	sbci	r26, 0xFF	; 255
    a086:	bf 4f       	sbci	r27, 0xFF	; 255
    a088:	59 f1       	breq	.+86     	; 0xa0e0 <get_fileinfo+0x9e>
    a08a:	5b 01       	movw	r10, r22
    a08c:	26 e1       	ldi	r18, 0x16	; 22
    a08e:	a2 0e       	add	r10, r18
    a090:	b1 1c       	adc	r11, r1
    a092:	e1 2c       	mov	r14, r1
    a094:	f1 2c       	mov	r15, r1
    a096:	d6 01       	movw	r26, r12
    a098:	1b 96       	adiw	r26, 0x0b	; 11
    a09a:	ed 91       	ld	r30, X+
    a09c:	fc 91       	ld	r31, X
    a09e:	1c 97       	sbiw	r26, 0x0c	; 12
    a0a0:	c7 01       	movw	r24, r14
    a0a2:	88 0f       	add	r24, r24
    a0a4:	99 1f       	adc	r25, r25
    a0a6:	e8 0f       	add	r30, r24
    a0a8:	f9 1f       	adc	r31, r25
    a0aa:	80 81       	ld	r24, Z
    a0ac:	91 81       	ldd	r25, Z+1	; 0x01
    a0ae:	00 97       	sbiw	r24, 0x00	; 0
    a0b0:	99 f0       	breq	.+38     	; 0xa0d8 <get_fileinfo+0x96>
    a0b2:	60 e0       	ldi	r22, 0x00	; 0
    a0b4:	70 e0       	ldi	r23, 0x00	; 0
    a0b6:	0e 94 fa 6d 	call	0xdbf4	; 0xdbf4 <ff_convert>
    a0ba:	00 97       	sbiw	r24, 0x00	; 0
    a0bc:	59 f0       	breq	.+22     	; 0xa0d4 <get_fileinfo+0x92>
    a0be:	af ef       	ldi	r26, 0xFF	; 255
    a0c0:	ea 16       	cp	r14, r26
    a0c2:	f1 04       	cpc	r15, r1
    a0c4:	39 f0       	breq	.+14     	; 0xa0d4 <get_fileinfo+0x92>
    a0c6:	bf ef       	ldi	r27, 0xFF	; 255
    a0c8:	eb 1a       	sub	r14, r27
    a0ca:	fb 0a       	sbc	r15, r27
    a0cc:	f5 01       	movw	r30, r10
    a0ce:	81 93       	st	Z+, r24
    a0d0:	5f 01       	movw	r10, r30
    a0d2:	e1 cf       	rjmp	.-62     	; 0xa096 <get_fileinfo+0x54>
    a0d4:	e1 2c       	mov	r14, r1
    a0d6:	f1 2c       	mov	r15, r1
    a0d8:	fe 01       	movw	r30, r28
    a0da:	ee 0d       	add	r30, r14
    a0dc:	ff 1d       	adc	r31, r15
    a0de:	16 8a       	std	Z+22, r1	; 0x16
    a0e0:	4e 89       	ldd	r20, Y+22	; 0x16
    a0e2:	50 e0       	ldi	r21, 0x00	; 0
    a0e4:	20 e0       	ldi	r18, 0x00	; 0
    a0e6:	30 e0       	ldi	r19, 0x00	; 0
    a0e8:	80 e0       	ldi	r24, 0x00	; 0
    a0ea:	90 e0       	ldi	r25, 0x00	; 0
    a0ec:	6e e2       	ldi	r22, 0x2E	; 46
    a0ee:	d6 2e       	mov	r13, r22
    a0f0:	fc 01       	movw	r30, r24
    a0f2:	31 96       	adiw	r30, 0x01	; 1
    a0f4:	d8 01       	movw	r26, r16
    a0f6:	5a 96       	adiw	r26, 0x1a	; 26
    a0f8:	6d 91       	ld	r22, X+
    a0fa:	7c 91       	ld	r23, X
    a0fc:	5b 97       	sbiw	r26, 0x1b	; 27
    a0fe:	db 01       	movw	r26, r22
    a100:	a8 0f       	add	r26, r24
    a102:	b9 1f       	adc	r27, r25
    a104:	8c 91       	ld	r24, X
    a106:	80 32       	cpi	r24, 0x20	; 32
    a108:	e1 f1       	breq	.+120    	; 0xa182 <get_fileinfo+0x140>
    a10a:	85 30       	cpi	r24, 0x05	; 5
    a10c:	09 f4       	brne	.+2      	; 0xa110 <get_fileinfo+0xce>
    a10e:	85 ee       	ldi	r24, 0xE5	; 229
    a110:	e9 30       	cpi	r30, 0x09	; 9
    a112:	f1 05       	cpc	r31, r1
    a114:	69 f4       	brne	.+26     	; 0xa130 <get_fileinfo+0xee>
    a116:	de 01       	movw	r26, r28
    a118:	a2 0f       	add	r26, r18
    a11a:	b3 1f       	adc	r27, r19
    a11c:	41 15       	cp	r20, r1
    a11e:	51 05       	cpc	r21, r1
    a120:	19 f4       	brne	.+6      	; 0xa128 <get_fileinfo+0xe6>
    a122:	56 96       	adiw	r26, 0x16	; 22
    a124:	dc 92       	st	X, r13
    a126:	56 97       	sbiw	r26, 0x16	; 22
    a128:	19 96       	adiw	r26, 0x09	; 9
    a12a:	dc 92       	st	X, r13
    a12c:	2f 5f       	subi	r18, 0xFF	; 255
    a12e:	3f 4f       	sbci	r19, 0xFF	; 255
    a130:	7e 01       	movw	r14, r28
    a132:	e2 0e       	add	r14, r18
    a134:	f3 1e       	adc	r15, r19
    a136:	d7 01       	movw	r26, r14
    a138:	19 96       	adiw	r26, 0x09	; 9
    a13a:	8c 93       	st	X, r24
    a13c:	41 15       	cp	r20, r1
    a13e:	51 05       	cpc	r21, r1
    a140:	f1 f4       	brne	.+60     	; 0xa17e <get_fileinfo+0x13c>
    a142:	9f eb       	ldi	r25, 0xBF	; 191
    a144:	98 0f       	add	r25, r24
    a146:	9a 31       	cpi	r25, 0x1A	; 26
    a148:	b8 f4       	brcc	.+46     	; 0xa178 <get_fileinfo+0x136>
    a14a:	d8 01       	movw	r26, r16
    a14c:	5a 96       	adiw	r26, 0x1a	; 26
    a14e:	6d 91       	ld	r22, X+
    a150:	7c 91       	ld	r23, X
    a152:	5b 97       	sbiw	r26, 0x1b	; 27
    a154:	db 01       	movw	r26, r22
    a156:	1c 96       	adiw	r26, 0x0c	; 12
    a158:	6c 91       	ld	r22, X
    a15a:	a6 2f       	mov	r26, r22
    a15c:	b0 e0       	ldi	r27, 0x00	; 0
    a15e:	e9 30       	cpi	r30, 0x09	; 9
    a160:	f1 05       	cpc	r31, r1
    a162:	18 f4       	brcc	.+6      	; 0xa16a <get_fileinfo+0x128>
    a164:	68 e0       	ldi	r22, 0x08	; 8
    a166:	70 e0       	ldi	r23, 0x00	; 0
    a168:	02 c0       	rjmp	.+4      	; 0xa16e <get_fileinfo+0x12c>
    a16a:	60 e1       	ldi	r22, 0x10	; 16
    a16c:	70 e0       	ldi	r23, 0x00	; 0
    a16e:	6a 23       	and	r22, r26
    a170:	7b 23       	and	r23, r27
    a172:	67 2b       	or	r22, r23
    a174:	09 f0       	breq	.+2      	; 0xa178 <get_fileinfo+0x136>
    a176:	80 5e       	subi	r24, 0xE0	; 224
    a178:	d7 01       	movw	r26, r14
    a17a:	56 96       	adiw	r26, 0x16	; 22
    a17c:	8c 93       	st	X, r24
    a17e:	2f 5f       	subi	r18, 0xFF	; 255
    a180:	3f 4f       	sbci	r19, 0xFF	; 255
    a182:	cf 01       	movw	r24, r30
    a184:	3b 97       	sbiw	r30, 0x0b	; 11
    a186:	09 f0       	breq	.+2      	; 0xa18a <get_fileinfo+0x148>
    a188:	b3 cf       	rjmp	.-154    	; 0xa0f0 <get_fileinfo+0xae>
    a18a:	45 2b       	or	r20, r21
    a18c:	71 f4       	brne	.+28     	; 0xa1aa <get_fileinfo+0x168>
    a18e:	fe 01       	movw	r30, r28
    a190:	e2 0f       	add	r30, r18
    a192:	f3 1f       	adc	r31, r19
    a194:	16 8a       	std	Z+22, r1	; 0x16
    a196:	d8 01       	movw	r26, r16
    a198:	5a 96       	adiw	r26, 0x1a	; 26
    a19a:	ed 91       	ld	r30, X+
    a19c:	fc 91       	ld	r31, X
    a19e:	5b 97       	sbiw	r26, 0x1b	; 27
    a1a0:	84 85       	ldd	r24, Z+12	; 0x0c
    a1a2:	81 11       	cpse	r24, r1
    a1a4:	02 c0       	rjmp	.+4      	; 0xa1aa <get_fileinfo+0x168>
    a1a6:	20 e0       	ldi	r18, 0x00	; 0
    a1a8:	30 e0       	ldi	r19, 0x00	; 0
    a1aa:	fe 01       	movw	r30, r28
    a1ac:	e2 0f       	add	r30, r18
    a1ae:	f3 1f       	adc	r31, r19
    a1b0:	11 86       	std	Z+9, r1	; 0x09
    a1b2:	d8 01       	movw	r26, r16
    a1b4:	5a 96       	adiw	r26, 0x1a	; 26
    a1b6:	ed 91       	ld	r30, X+
    a1b8:	fc 91       	ld	r31, X
    a1ba:	5b 97       	sbiw	r26, 0x1b	; 27
    a1bc:	83 85       	ldd	r24, Z+11	; 0x0b
    a1be:	88 87       	std	Y+8, r24	; 0x08
    a1c0:	5a 96       	adiw	r26, 0x1a	; 26
    a1c2:	0d 91       	ld	r16, X+
    a1c4:	1c 91       	ld	r17, X
    a1c6:	5b 97       	sbiw	r26, 0x1b	; 27
    a1c8:	c8 01       	movw	r24, r16
    a1ca:	4c 96       	adiw	r24, 0x1c	; 28
    a1cc:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    a1d0:	68 83       	st	Y, r22
    a1d2:	79 83       	std	Y+1, r23	; 0x01
    a1d4:	8a 83       	std	Y+2, r24	; 0x02
    a1d6:	9b 83       	std	Y+3, r25	; 0x03
    a1d8:	c8 01       	movw	r24, r16
    a1da:	46 96       	adiw	r24, 0x16	; 22
    a1dc:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    a1e0:	7f 83       	std	Y+7, r23	; 0x07
    a1e2:	6e 83       	std	Y+6, r22	; 0x06
    a1e4:	9d 83       	std	Y+5, r25	; 0x05
    a1e6:	8c 83       	std	Y+4, r24	; 0x04
    a1e8:	cd b7       	in	r28, 0x3d	; 61
    a1ea:	de b7       	in	r29, 0x3e	; 62
    a1ec:	ea e0       	ldi	r30, 0x0A	; 10
    a1ee:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0000a1f2 <dir_next>:
    a1f2:	4f 92       	push	r4
    a1f4:	5f 92       	push	r5
    a1f6:	6f 92       	push	r6
    a1f8:	7f 92       	push	r7
    a1fa:	9f 92       	push	r9
    a1fc:	af 92       	push	r10
    a1fe:	bf 92       	push	r11
    a200:	cf 92       	push	r12
    a202:	df 92       	push	r13
    a204:	ef 92       	push	r14
    a206:	ff 92       	push	r15
    a208:	0f 93       	push	r16
    a20a:	1f 93       	push	r17
    a20c:	cf 93       	push	r28
    a20e:	df 93       	push	r29
    a210:	5b 01       	movw	r10, r22
    a212:	fc 01       	movw	r30, r24
    a214:	46 89       	ldd	r20, Z+22	; 0x16
    a216:	57 89       	ldd	r21, Z+23	; 0x17
    a218:	60 8d       	ldd	r22, Z+24	; 0x18
    a21a:	71 8d       	ldd	r23, Z+25	; 0x19
    a21c:	41 15       	cp	r20, r1
    a21e:	51 05       	cpc	r21, r1
    a220:	61 05       	cpc	r22, r1
    a222:	71 05       	cpc	r23, r1
    a224:	09 f4       	brne	.+2      	; 0xa228 <dir_next+0x36>
    a226:	f8 c0       	rjmp	.+496    	; 0xa418 <dir_next+0x226>
    a228:	c6 84       	ldd	r12, Z+14	; 0x0e
    a22a:	d7 84       	ldd	r13, Z+15	; 0x0f
    a22c:	e0 88       	ldd	r14, Z+16	; 0x10
    a22e:	f1 88       	ldd	r15, Z+17	; 0x11
    a230:	f0 e2       	ldi	r31, 0x20	; 32
    a232:	cf 0e       	add	r12, r31
    a234:	d1 1c       	adc	r13, r1
    a236:	e1 1c       	adc	r14, r1
    a238:	f1 1c       	adc	r15, r1
    a23a:	c1 14       	cp	r12, r1
    a23c:	d1 04       	cpc	r13, r1
    a23e:	20 e2       	ldi	r18, 0x20	; 32
    a240:	e2 06       	cpc	r14, r18
    a242:	f1 04       	cpc	r15, r1
    a244:	08 f0       	brcs	.+2      	; 0xa248 <dir_next+0x56>
    a246:	e8 c0       	rjmp	.+464    	; 0xa418 <dir_next+0x226>
    a248:	8c 01       	movw	r16, r24
    a24a:	fc 01       	movw	r30, r24
    a24c:	c0 81       	ld	r28, Z
    a24e:	d1 81       	ldd	r29, Z+1	; 0x01
    a250:	d7 01       	movw	r26, r14
    a252:	c6 01       	movw	r24, r12
    a254:	91 70       	andi	r25, 0x01	; 1
    a256:	aa 27       	eor	r26, r26
    a258:	bb 27       	eor	r27, r27
    a25a:	89 2b       	or	r24, r25
    a25c:	8a 2b       	or	r24, r26
    a25e:	8b 2b       	or	r24, r27
    a260:	09 f0       	breq	.+2      	; 0xa264 <dir_next+0x72>
    a262:	ca c0       	rjmp	.+404    	; 0xa3f8 <dir_next+0x206>
    a264:	4f 5f       	subi	r20, 0xFF	; 255
    a266:	5f 4f       	sbci	r21, 0xFF	; 255
    a268:	6f 4f       	sbci	r22, 0xFF	; 255
    a26a:	7f 4f       	sbci	r23, 0xFF	; 255
    a26c:	46 8b       	std	Z+22, r20	; 0x16
    a26e:	57 8b       	std	Z+23, r21	; 0x17
    a270:	60 8f       	std	Z+24, r22	; 0x18
    a272:	71 8f       	std	Z+25, r23	; 0x19
    a274:	42 89       	ldd	r20, Z+18	; 0x12
    a276:	53 89       	ldd	r21, Z+19	; 0x13
    a278:	64 89       	ldd	r22, Z+20	; 0x14
    a27a:	75 89       	ldd	r23, Z+21	; 0x15
    a27c:	41 15       	cp	r20, r1
    a27e:	51 05       	cpc	r21, r1
    a280:	61 05       	cpc	r22, r1
    a282:	71 05       	cpc	r23, r1
    a284:	c9 f4       	brne	.+50     	; 0xa2b8 <dir_next+0xc6>
    a286:	8f 81       	ldd	r24, Y+7	; 0x07
    a288:	98 85       	ldd	r25, Y+8	; 0x08
    a28a:	a0 e0       	ldi	r26, 0x00	; 0
    a28c:	b0 e0       	ldi	r27, 0x00	; 0
    a28e:	b7 01       	movw	r22, r14
    a290:	a6 01       	movw	r20, r12
    a292:	35 e0       	ldi	r19, 0x05	; 5
    a294:	76 95       	lsr	r23
    a296:	67 95       	ror	r22
    a298:	57 95       	ror	r21
    a29a:	47 95       	ror	r20
    a29c:	3a 95       	dec	r19
    a29e:	d1 f7       	brne	.-12     	; 0xa294 <dir_next+0xa2>
    a2a0:	48 17       	cp	r20, r24
    a2a2:	59 07       	cpc	r21, r25
    a2a4:	6a 07       	cpc	r22, r26
    a2a6:	7b 07       	cpc	r23, r27
    a2a8:	08 f4       	brcc	.+2      	; 0xa2ac <dir_next+0xba>
    a2aa:	a6 c0       	rjmp	.+332    	; 0xa3f8 <dir_next+0x206>
    a2ac:	f8 01       	movw	r30, r16
    a2ae:	16 8a       	std	Z+22, r1	; 0x16
    a2b0:	17 8a       	std	Z+23, r1	; 0x17
    a2b2:	10 8e       	std	Z+24, r1	; 0x18
    a2b4:	11 8e       	std	Z+25, r1	; 0x19
    a2b6:	b0 c0       	rjmp	.+352    	; 0xa418 <dir_next+0x226>
    a2b8:	89 85       	ldd	r24, Y+9	; 0x09
    a2ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    a2bc:	01 97       	sbiw	r24, 0x01	; 1
    a2be:	a0 e0       	ldi	r26, 0x00	; 0
    a2c0:	b0 e0       	ldi	r27, 0x00	; 0
    a2c2:	26 01       	movw	r4, r12
    a2c4:	37 01       	movw	r6, r14
    a2c6:	29 e0       	ldi	r18, 0x09	; 9
    a2c8:	76 94       	lsr	r7
    a2ca:	67 94       	ror	r6
    a2cc:	57 94       	ror	r5
    a2ce:	47 94       	ror	r4
    a2d0:	2a 95       	dec	r18
    a2d2:	d1 f7       	brne	.-12     	; 0xa2c8 <dir_next+0xd6>
    a2d4:	84 21       	and	r24, r4
    a2d6:	95 21       	and	r25, r5
    a2d8:	a6 21       	and	r26, r6
    a2da:	b7 21       	and	r27, r7
    a2dc:	89 2b       	or	r24, r25
    a2de:	8a 2b       	or	r24, r26
    a2e0:	8b 2b       	or	r24, r27
    a2e2:	09 f0       	breq	.+2      	; 0xa2e6 <dir_next+0xf4>
    a2e4:	89 c0       	rjmp	.+274    	; 0xa3f8 <dir_next+0x206>
    a2e6:	ce 01       	movw	r24, r28
    a2e8:	d7 db       	rcall	.-2130   	; 0x9a98 <get_fat.isra.7>
    a2ea:	2b 01       	movw	r4, r22
    a2ec:	3c 01       	movw	r6, r24
    a2ee:	62 30       	cpi	r22, 0x02	; 2
    a2f0:	71 05       	cpc	r23, r1
    a2f2:	81 05       	cpc	r24, r1
    a2f4:	91 05       	cpc	r25, r1
    a2f6:	18 f4       	brcc	.+6      	; 0xa2fe <dir_next+0x10c>
    a2f8:	82 e0       	ldi	r24, 0x02	; 2
    a2fa:	90 e0       	ldi	r25, 0x00	; 0
    a2fc:	92 c0       	rjmp	.+292    	; 0xa422 <dir_next+0x230>
    a2fe:	6f 3f       	cpi	r22, 0xFF	; 255
    a300:	7f 4f       	sbci	r23, 0xFF	; 255
    a302:	8f 4f       	sbci	r24, 0xFF	; 255
    a304:	9f 4f       	sbci	r25, 0xFF	; 255
    a306:	19 f4       	brne	.+6      	; 0xa30e <dir_next+0x11c>
    a308:	81 e0       	ldi	r24, 0x01	; 1
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	8a c0       	rjmp	.+276    	; 0xa422 <dir_next+0x230>
    a30e:	89 8d       	ldd	r24, Y+25	; 0x19
    a310:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a312:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a314:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a316:	48 16       	cp	r4, r24
    a318:	59 06       	cpc	r5, r25
    a31a:	6a 06       	cpc	r6, r26
    a31c:	7b 06       	cpc	r7, r27
    a31e:	08 f4       	brcc	.+2      	; 0xa322 <dir_next+0x130>
    a320:	5c c0       	rjmp	.+184    	; 0xa3da <dir_next+0x1e8>
    a322:	ab 28       	or	r10, r11
    a324:	19 f2       	breq	.-122    	; 0xa2ac <dir_next+0xba>
    a326:	f8 01       	movw	r30, r16
    a328:	42 89       	ldd	r20, Z+18	; 0x12
    a32a:	53 89       	ldd	r21, Z+19	; 0x13
    a32c:	64 89       	ldd	r22, Z+20	; 0x14
    a32e:	75 89       	ldd	r23, Z+21	; 0x15
    a330:	c8 01       	movw	r24, r16
    a332:	25 dd       	rcall	.-1462   	; 0x9d7e <create_chain>
    a334:	2b 01       	movw	r4, r22
    a336:	3c 01       	movw	r6, r24
    a338:	61 15       	cp	r22, r1
    a33a:	71 05       	cpc	r23, r1
    a33c:	81 05       	cpc	r24, r1
    a33e:	91 05       	cpc	r25, r1
    a340:	09 f4       	brne	.+2      	; 0xa344 <dir_next+0x152>
    a342:	6d c0       	rjmp	.+218    	; 0xa41e <dir_next+0x22c>
    a344:	61 30       	cpi	r22, 0x01	; 1
    a346:	71 05       	cpc	r23, r1
    a348:	81 05       	cpc	r24, r1
    a34a:	91 05       	cpc	r25, r1
    a34c:	a9 f2       	breq	.-86     	; 0xa2f8 <dir_next+0x106>
    a34e:	6f 3f       	cpi	r22, 0xFF	; 255
    a350:	7f 4f       	sbci	r23, 0xFF	; 255
    a352:	8f 4f       	sbci	r24, 0xFF	; 255
    a354:	9f 4f       	sbci	r25, 0xFF	; 255
    a356:	c1 f2       	breq	.-80     	; 0xa308 <dir_next+0x116>
    a358:	ce 01       	movw	r24, r28
    a35a:	0e 94 b1 48 	call	0x9162	; 0x9162 <sync_window>
    a35e:	89 2b       	or	r24, r25
    a360:	99 f6       	brne	.-90     	; 0xa308 <dir_next+0x116>
    a362:	40 e0       	ldi	r20, 0x00	; 0
    a364:	52 e0       	ldi	r21, 0x02	; 2
    a366:	60 e0       	ldi	r22, 0x00	; 0
    a368:	70 e0       	ldi	r23, 0x00	; 0
    a36a:	ce 01       	movw	r24, r28
    a36c:	c5 96       	adiw	r24, 0x35	; 53
    a36e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    a372:	b3 01       	movw	r22, r6
    a374:	a2 01       	movw	r20, r4
    a376:	ce 01       	movw	r24, r28
    a378:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    a37c:	69 ab       	std	Y+49, r22	; 0x31
    a37e:	7a ab       	std	Y+50, r23	; 0x32
    a380:	8b ab       	std	Y+51, r24	; 0x33
    a382:	9c ab       	std	Y+52, r25	; 0x34
    a384:	a1 2c       	mov	r10, r1
    a386:	b1 2c       	mov	r11, r1
    a388:	99 24       	eor	r9, r9
    a38a:	93 94       	inc	r9
    a38c:	89 85       	ldd	r24, Y+9	; 0x09
    a38e:	9a 85       	ldd	r25, Y+10	; 0x0a
    a390:	a8 16       	cp	r10, r24
    a392:	b9 06       	cpc	r11, r25
    a394:	b0 f4       	brcc	.+44     	; 0xa3c2 <dir_next+0x1d0>
    a396:	9b 82       	std	Y+3, r9	; 0x03
    a398:	ce 01       	movw	r24, r28
    a39a:	0e 94 60 48 	call	0x90c0	; 0x90c0 <sync_window.part.3>
    a39e:	89 2b       	or	r24, r25
    a3a0:	09 f0       	breq	.+2      	; 0xa3a4 <dir_next+0x1b2>
    a3a2:	b2 cf       	rjmp	.-156    	; 0xa308 <dir_next+0x116>
    a3a4:	8f ef       	ldi	r24, 0xFF	; 255
    a3a6:	a8 1a       	sub	r10, r24
    a3a8:	b8 0a       	sbc	r11, r24
    a3aa:	89 a9       	ldd	r24, Y+49	; 0x31
    a3ac:	9a a9       	ldd	r25, Y+50	; 0x32
    a3ae:	ab a9       	ldd	r26, Y+51	; 0x33
    a3b0:	bc a9       	ldd	r27, Y+52	; 0x34
    a3b2:	01 96       	adiw	r24, 0x01	; 1
    a3b4:	a1 1d       	adc	r26, r1
    a3b6:	b1 1d       	adc	r27, r1
    a3b8:	89 ab       	std	Y+49, r24	; 0x31
    a3ba:	9a ab       	std	Y+50, r25	; 0x32
    a3bc:	ab ab       	std	Y+51, r26	; 0x33
    a3be:	bc ab       	std	Y+52, r27	; 0x34
    a3c0:	e5 cf       	rjmp	.-54     	; 0xa38c <dir_next+0x19a>
    a3c2:	89 a9       	ldd	r24, Y+49	; 0x31
    a3c4:	9a a9       	ldd	r25, Y+50	; 0x32
    a3c6:	ab a9       	ldd	r26, Y+51	; 0x33
    a3c8:	bc a9       	ldd	r27, Y+52	; 0x34
    a3ca:	8a 19       	sub	r24, r10
    a3cc:	9b 09       	sbc	r25, r11
    a3ce:	a1 09       	sbc	r26, r1
    a3d0:	b1 09       	sbc	r27, r1
    a3d2:	89 ab       	std	Y+49, r24	; 0x31
    a3d4:	9a ab       	std	Y+50, r25	; 0x32
    a3d6:	ab ab       	std	Y+51, r26	; 0x33
    a3d8:	bc ab       	std	Y+52, r27	; 0x34
    a3da:	f8 01       	movw	r30, r16
    a3dc:	42 8a       	std	Z+18, r4	; 0x12
    a3de:	53 8a       	std	Z+19, r5	; 0x13
    a3e0:	64 8a       	std	Z+20, r6	; 0x14
    a3e2:	75 8a       	std	Z+21, r7	; 0x15
    a3e4:	b3 01       	movw	r22, r6
    a3e6:	a2 01       	movw	r20, r4
    a3e8:	ce 01       	movw	r24, r28
    a3ea:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    a3ee:	f8 01       	movw	r30, r16
    a3f0:	66 8b       	std	Z+22, r22	; 0x16
    a3f2:	77 8b       	std	Z+23, r23	; 0x17
    a3f4:	80 8f       	std	Z+24, r24	; 0x18
    a3f6:	91 8f       	std	Z+25, r25	; 0x19
    a3f8:	f8 01       	movw	r30, r16
    a3fa:	c6 86       	std	Z+14, r12	; 0x0e
    a3fc:	d7 86       	std	Z+15, r13	; 0x0f
    a3fe:	e0 8a       	std	Z+16, r14	; 0x10
    a400:	f1 8a       	std	Z+17, r15	; 0x11
    a402:	ce 01       	movw	r24, r28
    a404:	c5 96       	adiw	r24, 0x35	; 53
    a406:	e6 01       	movw	r28, r12
    a408:	d1 70       	andi	r29, 0x01	; 1
    a40a:	c8 0f       	add	r28, r24
    a40c:	d9 1f       	adc	r29, r25
    a40e:	d3 8f       	std	Z+27, r29	; 0x1b
    a410:	c2 8f       	std	Z+26, r28	; 0x1a
    a412:	80 e0       	ldi	r24, 0x00	; 0
    a414:	90 e0       	ldi	r25, 0x00	; 0
    a416:	05 c0       	rjmp	.+10     	; 0xa422 <dir_next+0x230>
    a418:	84 e0       	ldi	r24, 0x04	; 4
    a41a:	90 e0       	ldi	r25, 0x00	; 0
    a41c:	02 c0       	rjmp	.+4      	; 0xa422 <dir_next+0x230>
    a41e:	87 e0       	ldi	r24, 0x07	; 7
    a420:	90 e0       	ldi	r25, 0x00	; 0
    a422:	df 91       	pop	r29
    a424:	cf 91       	pop	r28
    a426:	1f 91       	pop	r17
    a428:	0f 91       	pop	r16
    a42a:	ff 90       	pop	r15
    a42c:	ef 90       	pop	r14
    a42e:	df 90       	pop	r13
    a430:	cf 90       	pop	r12
    a432:	bf 90       	pop	r11
    a434:	af 90       	pop	r10
    a436:	9f 90       	pop	r9
    a438:	7f 90       	pop	r7
    a43a:	6f 90       	pop	r6
    a43c:	5f 90       	pop	r5
    a43e:	4f 90       	pop	r4
    a440:	08 95       	ret

0000a442 <dir_alloc>:
    a442:	a0 e0       	ldi	r26, 0x00	; 0
    a444:	b0 e0       	ldi	r27, 0x00	; 0
    a446:	e7 e2       	ldi	r30, 0x27	; 39
    a448:	f2 e5       	ldi	r31, 0x52	; 82
    a44a:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    a44e:	ec 01       	movw	r28, r24
    a450:	6b 01       	movw	r12, r22
    a452:	e8 80       	ld	r14, Y
    a454:	f9 80       	ldd	r15, Y+1	; 0x01
    a456:	40 e0       	ldi	r20, 0x00	; 0
    a458:	50 e0       	ldi	r21, 0x00	; 0
    a45a:	ba 01       	movw	r22, r20
    a45c:	d0 db       	rcall	.-2144   	; 0x9bfe <dir_sdi>
    a45e:	00 97       	sbiw	r24, 0x00	; 0
    a460:	01 f5       	brne	.+64     	; 0xa4a2 <dir_alloc+0x60>
    a462:	00 e0       	ldi	r16, 0x00	; 0
    a464:	10 e0       	ldi	r17, 0x00	; 0
    a466:	4e 89       	ldd	r20, Y+22	; 0x16
    a468:	5f 89       	ldd	r21, Y+23	; 0x17
    a46a:	68 8d       	ldd	r22, Y+24	; 0x18
    a46c:	79 8d       	ldd	r23, Y+25	; 0x19
    a46e:	c7 01       	movw	r24, r14
    a470:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    a474:	00 97       	sbiw	r24, 0x00	; 0
    a476:	a9 f4       	brne	.+42     	; 0xa4a2 <dir_alloc+0x60>
    a478:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a47a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a47c:	20 81       	ld	r18, Z
    a47e:	25 3e       	cpi	r18, 0xE5	; 229
    a480:	11 f0       	breq	.+4      	; 0xa486 <dir_alloc+0x44>
    a482:	21 11       	cpse	r18, r1
    a484:	06 c0       	rjmp	.+12     	; 0xa492 <dir_alloc+0x50>
    a486:	0f 5f       	subi	r16, 0xFF	; 255
    a488:	1f 4f       	sbci	r17, 0xFF	; 255
    a48a:	0c 15       	cp	r16, r12
    a48c:	1d 05       	cpc	r17, r13
    a48e:	19 f4       	brne	.+6      	; 0xa496 <dir_alloc+0x54>
    a490:	0d c0       	rjmp	.+26     	; 0xa4ac <dir_alloc+0x6a>
    a492:	00 e0       	ldi	r16, 0x00	; 0
    a494:	10 e0       	ldi	r17, 0x00	; 0
    a496:	61 e0       	ldi	r22, 0x01	; 1
    a498:	70 e0       	ldi	r23, 0x00	; 0
    a49a:	ce 01       	movw	r24, r28
    a49c:	aa de       	rcall	.-684    	; 0xa1f2 <dir_next>
    a49e:	00 97       	sbiw	r24, 0x00	; 0
    a4a0:	11 f3       	breq	.-60     	; 0xa466 <dir_alloc+0x24>
    a4a2:	84 30       	cpi	r24, 0x04	; 4
    a4a4:	91 05       	cpc	r25, r1
    a4a6:	11 f4       	brne	.+4      	; 0xa4ac <dir_alloc+0x6a>
    a4a8:	87 e0       	ldi	r24, 0x07	; 7
    a4aa:	90 e0       	ldi	r25, 0x00	; 0
    a4ac:	cd b7       	in	r28, 0x3d	; 61
    a4ae:	de b7       	in	r29, 0x3e	; 62
    a4b0:	e8 e0       	ldi	r30, 0x08	; 8
    a4b2:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000a4b6 <dir_read>:
    a4b6:	a0 e0       	ldi	r26, 0x00	; 0
    a4b8:	b0 e0       	ldi	r27, 0x00	; 0
    a4ba:	e1 e6       	ldi	r30, 0x61	; 97
    a4bc:	f2 e5       	ldi	r31, 0x52	; 82
    a4be:	0c 94 1f eb 	jmp	0x1d63e	; 0x1d63e <__prologue_saves__+0x8>
    a4c2:	ec 01       	movw	r28, r24
    a4c4:	7b 01       	movw	r14, r22
    a4c6:	a8 80       	ld	r10, Y
    a4c8:	b9 80       	ldd	r11, Y+1	; 0x01
    a4ca:	dd 24       	eor	r13, r13
    a4cc:	da 94       	dec	r13
    a4ce:	1f ef       	ldi	r17, 0xFF	; 255
    a4d0:	84 e0       	ldi	r24, 0x04	; 4
    a4d2:	90 e0       	ldi	r25, 0x00	; 0
    a4d4:	ad e0       	ldi	r26, 0x0D	; 13
    a4d6:	ca 2e       	mov	r12, r26
    a4d8:	4e 89       	ldd	r20, Y+22	; 0x16
    a4da:	5f 89       	ldd	r21, Y+23	; 0x17
    a4dc:	68 8d       	ldd	r22, Y+24	; 0x18
    a4de:	79 8d       	ldd	r23, Y+25	; 0x19
    a4e0:	41 15       	cp	r20, r1
    a4e2:	51 05       	cpc	r21, r1
    a4e4:	61 05       	cpc	r22, r1
    a4e6:	71 05       	cpc	r23, r1
    a4e8:	09 f4       	brne	.+2      	; 0xa4ec <dir_read+0x36>
    a4ea:	9f c0       	rjmp	.+318    	; 0xa62a <dir_read+0x174>
    a4ec:	c5 01       	movw	r24, r10
    a4ee:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    a4f2:	00 97       	sbiw	r24, 0x00	; 0
    a4f4:	09 f0       	breq	.+2      	; 0xa4f8 <dir_read+0x42>
    a4f6:	9b c0       	rjmp	.+310    	; 0xa62e <dir_read+0x178>
    a4f8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a4fa:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a4fc:	0c 91       	ld	r16, X
    a4fe:	00 23       	and	r16, r16
    a500:	09 f4       	brne	.+2      	; 0xa504 <dir_read+0x4e>
    a502:	9d c0       	rjmp	.+314    	; 0xa63e <dir_read+0x188>
    a504:	1b 96       	adiw	r26, 0x0b	; 11
    a506:	8c 91       	ld	r24, X
    a508:	1b 97       	sbiw	r26, 0x0b	; 11
    a50a:	8f 73       	andi	r24, 0x3F	; 63
    a50c:	8c 83       	std	Y+4, r24	; 0x04
    a50e:	05 3e       	cpi	r16, 0xE5	; 229
    a510:	09 f4       	brne	.+2      	; 0xa514 <dir_read+0x5e>
    a512:	82 c0       	rjmp	.+260    	; 0xa618 <dir_read+0x162>
    a514:	0e 32       	cpi	r16, 0x2E	; 46
    a516:	09 f4       	brne	.+2      	; 0xa51a <dir_read+0x64>
    a518:	7f c0       	rjmp	.+254    	; 0xa618 <dir_read+0x162>
    a51a:	21 e0       	ldi	r18, 0x01	; 1
    a51c:	30 e0       	ldi	r19, 0x00	; 0
    a51e:	98 2f       	mov	r25, r24
    a520:	9f 71       	andi	r25, 0x1F	; 31
    a522:	98 30       	cpi	r25, 0x08	; 8
    a524:	11 f0       	breq	.+4      	; 0xa52a <dir_read+0x74>
    a526:	20 e0       	ldi	r18, 0x00	; 0
    a528:	30 e0       	ldi	r19, 0x00	; 0
    a52a:	2e 15       	cp	r18, r14
    a52c:	3f 05       	cpc	r19, r15
    a52e:	09 f0       	breq	.+2      	; 0xa532 <dir_read+0x7c>
    a530:	73 c0       	rjmp	.+230    	; 0xa618 <dir_read+0x162>
    a532:	8f 30       	cpi	r24, 0x0F	; 15
    a534:	09 f0       	breq	.+2      	; 0xa538 <dir_read+0x82>
    a536:	60 c0       	rjmp	.+192    	; 0xa5f8 <dir_read+0x142>
    a538:	06 ff       	sbrs	r16, 6
    a53a:	0d c0       	rjmp	.+26     	; 0xa556 <dir_read+0xa0>
    a53c:	1d 96       	adiw	r26, 0x0d	; 13
    a53e:	8c 91       	ld	r24, X
    a540:	1d 97       	sbiw	r26, 0x0d	; 13
    a542:	0f 7b       	andi	r16, 0xBF	; 191
    a544:	4e 85       	ldd	r20, Y+14	; 0x0e
    a546:	5f 85       	ldd	r21, Y+15	; 0x0f
    a548:	68 89       	ldd	r22, Y+16	; 0x10
    a54a:	79 89       	ldd	r23, Y+17	; 0x11
    a54c:	48 a7       	std	Y+40, r20	; 0x28
    a54e:	59 a7       	std	Y+41, r21	; 0x29
    a550:	6a a7       	std	Y+42, r22	; 0x2a
    a552:	7b a7       	std	Y+43, r23	; 0x2b
    a554:	03 c0       	rjmp	.+6      	; 0xa55c <dir_read+0xa6>
    a556:	10 13       	cpse	r17, r16
    a558:	5f c0       	rjmp	.+190    	; 0xa618 <dir_read+0x162>
    a55a:	8d 2d       	mov	r24, r13
    a55c:	1d 96       	adiw	r26, 0x0d	; 13
    a55e:	dc 90       	ld	r13, X
    a560:	1d 97       	sbiw	r26, 0x0d	; 13
    a562:	d8 12       	cpse	r13, r24
    a564:	58 c0       	rjmp	.+176    	; 0xa616 <dir_read+0x160>
    a566:	5a 96       	adiw	r26, 0x1a	; 26
    a568:	8d 91       	ld	r24, X+
    a56a:	9c 91       	ld	r25, X
    a56c:	5b 97       	sbiw	r26, 0x1b	; 27
    a56e:	89 2b       	or	r24, r25
    a570:	09 f0       	breq	.+2      	; 0xa574 <dir_read+0xbe>
    a572:	52 c0       	rjmp	.+164    	; 0xa618 <dir_read+0x162>
    a574:	f5 01       	movw	r30, r10
    a576:	63 85       	ldd	r22, Z+11	; 0x0b
    a578:	74 85       	ldd	r23, Z+12	; 0x0c
    a57a:	8c 91       	ld	r24, X
    a57c:	8f 73       	andi	r24, 0x3F	; 63
    a57e:	90 e0       	ldi	r25, 0x00	; 0
    a580:	01 97       	sbiw	r24, 0x01	; 1
    a582:	c8 9e       	mul	r12, r24
    a584:	90 01       	movw	r18, r0
    a586:	c9 9e       	mul	r12, r25
    a588:	30 0d       	add	r19, r0
    a58a:	11 24       	eor	r1, r1
    a58c:	f1 ec       	ldi	r31, 0xC1	; 193
    a58e:	6f 2e       	mov	r6, r31
    a590:	f2 e0       	ldi	r31, 0x02	; 2
    a592:	7f 2e       	mov	r7, r31
    a594:	41 e0       	ldi	r20, 0x01	; 1
    a596:	50 e0       	ldi	r21, 0x00	; 0
    a598:	f3 01       	movw	r30, r6
    a59a:	81 91       	ld	r24, Z+
    a59c:	3f 01       	movw	r6, r30
    a59e:	4d 01       	movw	r8, r26
    a5a0:	88 0e       	add	r8, r24
    a5a2:	91 1c       	adc	r9, r1
    a5a4:	f4 01       	movw	r30, r8
    a5a6:	80 81       	ld	r24, Z
    a5a8:	91 81       	ldd	r25, Z+1	; 0x01
    a5aa:	41 15       	cp	r20, r1
    a5ac:	51 05       	cpc	r21, r1
    a5ae:	79 f0       	breq	.+30     	; 0xa5ce <dir_read+0x118>
    a5b0:	2f 3f       	cpi	r18, 0xFF	; 255
    a5b2:	31 05       	cpc	r19, r1
    a5b4:	88 f5       	brcc	.+98     	; 0xa618 <dir_read+0x162>
    a5b6:	a9 01       	movw	r20, r18
    a5b8:	44 0f       	add	r20, r20
    a5ba:	55 1f       	adc	r21, r21
    a5bc:	46 0f       	add	r20, r22
    a5be:	57 1f       	adc	r21, r23
    a5c0:	fa 01       	movw	r30, r20
    a5c2:	91 83       	std	Z+1, r25	; 0x01
    a5c4:	80 83       	st	Z, r24
    a5c6:	ac 01       	movw	r20, r24
    a5c8:	2f 5f       	subi	r18, 0xFF	; 255
    a5ca:	3f 4f       	sbci	r19, 0xFF	; 255
    a5cc:	02 c0       	rjmp	.+4      	; 0xa5d2 <dir_read+0x11c>
    a5ce:	01 96       	adiw	r24, 0x01	; 1
    a5d0:	19 f5       	brne	.+70     	; 0xa618 <dir_read+0x162>
    a5d2:	8e ec       	ldi	r24, 0xCE	; 206
    a5d4:	68 16       	cp	r6, r24
    a5d6:	82 e0       	ldi	r24, 0x02	; 2
    a5d8:	78 06       	cpc	r7, r24
    a5da:	f1 f6       	brne	.-68     	; 0xa598 <dir_read+0xe2>
    a5dc:	8c 91       	ld	r24, X
    a5de:	86 ff       	sbrs	r24, 6
    a5e0:	2b c0       	rjmp	.+86     	; 0xa638 <dir_read+0x182>
    a5e2:	2f 3f       	cpi	r18, 0xFF	; 255
    a5e4:	31 05       	cpc	r19, r1
    a5e6:	c0 f4       	brcc	.+48     	; 0xa618 <dir_read+0x162>
    a5e8:	22 0f       	add	r18, r18
    a5ea:	33 1f       	adc	r19, r19
    a5ec:	fb 01       	movw	r30, r22
    a5ee:	e2 0f       	add	r30, r18
    a5f0:	f3 1f       	adc	r31, r19
    a5f2:	11 82       	std	Z+1, r1	; 0x01
    a5f4:	10 82       	st	Z, r1
    a5f6:	20 c0       	rjmp	.+64     	; 0xa638 <dir_read+0x182>
    a5f8:	11 11       	cpse	r17, r1
    a5fa:	05 c0       	rjmp	.+10     	; 0xa606 <dir_read+0x150>
    a5fc:	cd 01       	movw	r24, r26
    a5fe:	0e 94 d7 47 	call	0x8fae	; 0x8fae <sum_sfn>
    a602:	d8 16       	cp	r13, r24
    a604:	f9 f0       	breq	.+62     	; 0xa644 <dir_read+0x18e>
    a606:	8f ef       	ldi	r24, 0xFF	; 255
    a608:	9f ef       	ldi	r25, 0xFF	; 255
    a60a:	dc 01       	movw	r26, r24
    a60c:	88 a7       	std	Y+40, r24	; 0x28
    a60e:	99 a7       	std	Y+41, r25	; 0x29
    a610:	aa a7       	std	Y+42, r26	; 0x2a
    a612:	bb a7       	std	Y+43, r27	; 0x2b
    a614:	17 c0       	rjmp	.+46     	; 0xa644 <dir_read+0x18e>
    a616:	d8 2e       	mov	r13, r24
    a618:	1f ef       	ldi	r17, 0xFF	; 255
    a61a:	60 e0       	ldi	r22, 0x00	; 0
    a61c:	70 e0       	ldi	r23, 0x00	; 0
    a61e:	ce 01       	movw	r24, r28
    a620:	e8 dd       	rcall	.-1072   	; 0xa1f2 <dir_next>
    a622:	00 97       	sbiw	r24, 0x00	; 0
    a624:	09 f4       	brne	.+2      	; 0xa628 <dir_read+0x172>
    a626:	58 cf       	rjmp	.-336    	; 0xa4d8 <dir_read+0x22>
    a628:	02 c0       	rjmp	.+4      	; 0xa62e <dir_read+0x178>
    a62a:	00 97       	sbiw	r24, 0x00	; 0
    a62c:	59 f0       	breq	.+22     	; 0xa644 <dir_read+0x18e>
    a62e:	1e 8a       	std	Y+22, r1	; 0x16
    a630:	1f 8a       	std	Y+23, r1	; 0x17
    a632:	18 8e       	std	Y+24, r1	; 0x18
    a634:	19 8e       	std	Y+25, r1	; 0x19
    a636:	08 c0       	rjmp	.+16     	; 0xa648 <dir_read+0x192>
    a638:	1f ef       	ldi	r17, 0xFF	; 255
    a63a:	10 0f       	add	r17, r16
    a63c:	ee cf       	rjmp	.-36     	; 0xa61a <dir_read+0x164>
    a63e:	84 e0       	ldi	r24, 0x04	; 4
    a640:	90 e0       	ldi	r25, 0x00	; 0
    a642:	f5 cf       	rjmp	.-22     	; 0xa62e <dir_read+0x178>
    a644:	80 e0       	ldi	r24, 0x00	; 0
    a646:	90 e0       	ldi	r25, 0x00	; 0
    a648:	cd b7       	in	r28, 0x3d	; 61
    a64a:	de b7       	in	r29, 0x3e	; 62
    a64c:	ee e0       	ldi	r30, 0x0E	; 14
    a64e:	0c 94 3b eb 	jmp	0x1d676	; 0x1d676 <__epilogue_restores__+0x8>

0000a652 <dir_remove>:
    a652:	a0 e0       	ldi	r26, 0x00	; 0
    a654:	b0 e0       	ldi	r27, 0x00	; 0
    a656:	ef e2       	ldi	r30, 0x2F	; 47
    a658:	f3 e5       	ldi	r31, 0x53	; 83
    a65a:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
    a65e:	ec 01       	movw	r28, r24
    a660:	08 81       	ld	r16, Y
    a662:	19 81       	ldd	r17, Y+1	; 0x01
    a664:	ce 84       	ldd	r12, Y+14	; 0x0e
    a666:	df 84       	ldd	r13, Y+15	; 0x0f
    a668:	e8 88       	ldd	r14, Y+16	; 0x10
    a66a:	f9 88       	ldd	r15, Y+17	; 0x11
    a66c:	48 a5       	ldd	r20, Y+40	; 0x28
    a66e:	59 a5       	ldd	r21, Y+41	; 0x29
    a670:	6a a5       	ldd	r22, Y+42	; 0x2a
    a672:	7b a5       	ldd	r23, Y+43	; 0x2b
    a674:	4f 3f       	cpi	r20, 0xFF	; 255
    a676:	8f ef       	ldi	r24, 0xFF	; 255
    a678:	58 07       	cpc	r21, r24
    a67a:	68 07       	cpc	r22, r24
    a67c:	78 07       	cpc	r23, r24
    a67e:	29 f4       	brne	.+10     	; 0xa68a <dir_remove+0x38>
    a680:	85 ee       	ldi	r24, 0xE5	; 229
    a682:	b8 2e       	mov	r11, r24
    a684:	aa 24       	eor	r10, r10
    a686:	a3 94       	inc	r10
    a688:	19 c0       	rjmp	.+50     	; 0xa6bc <dir_remove+0x6a>
    a68a:	ce 01       	movw	r24, r28
    a68c:	b8 da       	rcall	.-2704   	; 0x9bfe <dir_sdi>
    a68e:	00 97       	sbiw	r24, 0x00	; 0
    a690:	19 f5       	brne	.+70     	; 0xa6d8 <dir_remove+0x86>
    a692:	f6 cf       	rjmp	.-20     	; 0xa680 <dir_remove+0x2e>
    a694:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a696:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a698:	b0 82       	st	Z, r11
    a69a:	f8 01       	movw	r30, r16
    a69c:	a3 82       	std	Z+3, r10	; 0x03
    a69e:	4e 85       	ldd	r20, Y+14	; 0x0e
    a6a0:	5f 85       	ldd	r21, Y+15	; 0x0f
    a6a2:	68 89       	ldd	r22, Y+16	; 0x10
    a6a4:	79 89       	ldd	r23, Y+17	; 0x11
    a6a6:	4c 15       	cp	r20, r12
    a6a8:	5d 05       	cpc	r21, r13
    a6aa:	6e 05       	cpc	r22, r14
    a6ac:	7f 05       	cpc	r23, r15
    a6ae:	a0 f4       	brcc	.+40     	; 0xa6d8 <dir_remove+0x86>
    a6b0:	60 e0       	ldi	r22, 0x00	; 0
    a6b2:	70 e0       	ldi	r23, 0x00	; 0
    a6b4:	ce 01       	movw	r24, r28
    a6b6:	9d dd       	rcall	.-1222   	; 0xa1f2 <dir_next>
    a6b8:	00 97       	sbiw	r24, 0x00	; 0
    a6ba:	49 f4       	brne	.+18     	; 0xa6ce <dir_remove+0x7c>
    a6bc:	4e 89       	ldd	r20, Y+22	; 0x16
    a6be:	5f 89       	ldd	r21, Y+23	; 0x17
    a6c0:	68 8d       	ldd	r22, Y+24	; 0x18
    a6c2:	79 8d       	ldd	r23, Y+25	; 0x19
    a6c4:	c8 01       	movw	r24, r16
    a6c6:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    a6ca:	00 97       	sbiw	r24, 0x00	; 0
    a6cc:	19 f3       	breq	.-58     	; 0xa694 <dir_remove+0x42>
    a6ce:	84 30       	cpi	r24, 0x04	; 4
    a6d0:	91 05       	cpc	r25, r1
    a6d2:	11 f4       	brne	.+4      	; 0xa6d8 <dir_remove+0x86>
    a6d4:	82 e0       	ldi	r24, 0x02	; 2
    a6d6:	90 e0       	ldi	r25, 0x00	; 0
    a6d8:	cd b7       	in	r28, 0x3d	; 61
    a6da:	de b7       	in	r29, 0x3e	; 62
    a6dc:	ea e0       	ldi	r30, 0x0A	; 10
    a6de:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0000a6e2 <dir_find>:
    a6e2:	a8 e0       	ldi	r26, 0x08	; 8
    a6e4:	b0 e0       	ldi	r27, 0x00	; 0
    a6e6:	e7 e7       	ldi	r30, 0x77	; 119
    a6e8:	f3 e5       	ldi	r31, 0x53	; 83
    a6ea:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    a6ee:	8c 01       	movw	r16, r24
    a6f0:	dc 01       	movw	r26, r24
    a6f2:	8d 90       	ld	r8, X+
    a6f4:	9c 90       	ld	r9, X
    a6f6:	40 e0       	ldi	r20, 0x00	; 0
    a6f8:	50 e0       	ldi	r21, 0x00	; 0
    a6fa:	ba 01       	movw	r22, r20
    a6fc:	80 da       	rcall	.-2816   	; 0x9bfe <dir_sdi>
    a6fe:	00 97       	sbiw	r24, 0x00	; 0
    a700:	09 f0       	breq	.+2      	; 0xa704 <dir_find+0x22>
    a702:	f3 c0       	rjmp	.+486    	; 0xa8ea <dir_find+0x208>
    a704:	8f ef       	ldi	r24, 0xFF	; 255
    a706:	9f ef       	ldi	r25, 0xFF	; 255
    a708:	dc 01       	movw	r26, r24
    a70a:	f8 01       	movw	r30, r16
    a70c:	80 a7       	std	Z+40, r24	; 0x28
    a70e:	91 a7       	std	Z+41, r25	; 0x29
    a710:	a2 a7       	std	Z+42, r26	; 0x2a
    a712:	b3 a7       	std	Z+43, r27	; 0x2b
    a714:	ee 24       	eor	r14, r14
    a716:	ea 94       	dec	r14
    a718:	ff 24       	eor	r15, r15
    a71a:	fa 94       	dec	r15
    a71c:	44 24       	eor	r4, r4
    a71e:	4a 94       	dec	r4
    a720:	54 2c       	mov	r5, r4
    a722:	32 01       	movw	r6, r4
    a724:	d8 01       	movw	r26, r16
    a726:	56 96       	adiw	r26, 0x16	; 22
    a728:	4d 91       	ld	r20, X+
    a72a:	5d 91       	ld	r21, X+
    a72c:	6d 91       	ld	r22, X+
    a72e:	7c 91       	ld	r23, X
    a730:	59 97       	sbiw	r26, 0x19	; 25
    a732:	c4 01       	movw	r24, r8
    a734:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    a738:	00 97       	sbiw	r24, 0x00	; 0
    a73a:	09 f0       	breq	.+2      	; 0xa73e <dir_find+0x5c>
    a73c:	d6 c0       	rjmp	.+428    	; 0xa8ea <dir_find+0x208>
    a73e:	f8 01       	movw	r30, r16
    a740:	02 8c       	ldd	r0, Z+26	; 0x1a
    a742:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a744:	e0 2d       	mov	r30, r0
    a746:	f8 87       	std	Y+8, r31	; 0x08
    a748:	ef 83       	std	Y+7, r30	; 0x07
    a74a:	30 80       	ld	r3, Z
    a74c:	33 20       	and	r3, r3
    a74e:	09 f4       	brne	.+2      	; 0xa752 <dir_find+0x70>
    a750:	ce c0       	rjmp	.+412    	; 0xa8ee <dir_find+0x20c>
    a752:	93 85       	ldd	r25, Z+11	; 0x0b
    a754:	89 2f       	mov	r24, r25
    a756:	8f 73       	andi	r24, 0x3F	; 63
    a758:	d8 01       	movw	r26, r16
    a75a:	14 96       	adiw	r26, 0x04	; 4
    a75c:	8c 93       	st	X, r24
    a75e:	b5 ee       	ldi	r27, 0xE5	; 229
    a760:	3b 16       	cp	r3, r27
    a762:	09 f4       	brne	.+2      	; 0xa766 <dir_find+0x84>
    a764:	b4 c0       	rjmp	.+360    	; 0xa8ce <dir_find+0x1ec>
    a766:	93 ff       	sbrs	r25, 3
    a768:	04 c0       	rjmp	.+8      	; 0xa772 <dir_find+0x90>
    a76a:	8f 30       	cpi	r24, 0x0F	; 15
    a76c:	09 f0       	breq	.+2      	; 0xa770 <dir_find+0x8e>
    a76e:	af c0       	rjmp	.+350    	; 0xa8ce <dir_find+0x1ec>
    a770:	03 c0       	rjmp	.+6      	; 0xa778 <dir_find+0x96>
    a772:	8f 30       	cpi	r24, 0x0F	; 15
    a774:	09 f0       	breq	.+2      	; 0xa778 <dir_find+0x96>
    a776:	87 c0       	rjmp	.+270    	; 0xa886 <dir_find+0x1a4>
    a778:	d8 01       	movw	r26, r16
    a77a:	97 96       	adiw	r26, 0x27	; 39
    a77c:	8c 91       	ld	r24, X
    a77e:	97 97       	sbiw	r26, 0x27	; 39
    a780:	86 fd       	sbrc	r24, 6
    a782:	ac c0       	rjmp	.+344    	; 0xa8dc <dir_find+0x1fa>
    a784:	36 fe       	sbrs	r3, 6
    a786:	12 c0       	rjmp	.+36     	; 0xa7ac <dir_find+0xca>
    a788:	ef 81       	ldd	r30, Y+7	; 0x07
    a78a:	f8 85       	ldd	r31, Y+8	; 0x08
    a78c:	e5 84       	ldd	r14, Z+13	; 0x0d
    a78e:	f3 2d       	mov	r31, r3
    a790:	ff 7b       	andi	r31, 0xBF	; 191
    a792:	3f 2e       	mov	r3, r31
    a794:	1e 96       	adiw	r26, 0x0e	; 14
    a796:	8d 91       	ld	r24, X+
    a798:	9d 91       	ld	r25, X+
    a79a:	0d 90       	ld	r0, X+
    a79c:	bc 91       	ld	r27, X
    a79e:	a0 2d       	mov	r26, r0
    a7a0:	f8 01       	movw	r30, r16
    a7a2:	80 a7       	std	Z+40, r24	; 0x28
    a7a4:	91 a7       	std	Z+41, r25	; 0x29
    a7a6:	a2 a7       	std	Z+42, r26	; 0x2a
    a7a8:	b3 a7       	std	Z+43, r27	; 0x2b
    a7aa:	02 c0       	rjmp	.+4      	; 0xa7b0 <dir_find+0xce>
    a7ac:	f3 10       	cpse	r15, r3
    a7ae:	94 c0       	rjmp	.+296    	; 0xa8d8 <dir_find+0x1f6>
    a7b0:	af 81       	ldd	r26, Y+7	; 0x07
    a7b2:	b8 85       	ldd	r27, Y+8	; 0x08
    a7b4:	1d 96       	adiw	r26, 0x0d	; 13
    a7b6:	2c 90       	ld	r2, X
    a7b8:	1d 97       	sbiw	r26, 0x0d	; 13
    a7ba:	2e 10       	cpse	r2, r14
    a7bc:	8d c0       	rjmp	.+282    	; 0xa8d8 <dir_find+0x1f6>
    a7be:	5a 96       	adiw	r26, 0x1a	; 26
    a7c0:	8d 91       	ld	r24, X+
    a7c2:	9c 91       	ld	r25, X
    a7c4:	5b 97       	sbiw	r26, 0x1b	; 27
    a7c6:	89 2b       	or	r24, r25
    a7c8:	09 f0       	breq	.+2      	; 0xa7cc <dir_find+0xea>
    a7ca:	9b c0       	rjmp	.+310    	; 0xa902 <dir_find+0x220>
    a7cc:	f4 01       	movw	r30, r8
    a7ce:	c3 84       	ldd	r12, Z+11	; 0x0b
    a7d0:	d4 84       	ldd	r13, Z+12	; 0x0c
    a7d2:	8c 91       	ld	r24, X
    a7d4:	8f 73       	andi	r24, 0x3F	; 63
    a7d6:	90 e0       	ldi	r25, 0x00	; 0
    a7d8:	01 97       	sbiw	r24, 0x01	; 1
    a7da:	fd e0       	ldi	r31, 0x0D	; 13
    a7dc:	f8 9f       	mul	r31, r24
    a7de:	70 01       	movw	r14, r0
    a7e0:	f9 9f       	mul	r31, r25
    a7e2:	f0 0c       	add	r15, r0
    a7e4:	11 24       	eor	r1, r1
    a7e6:	21 ec       	ldi	r18, 0xC1	; 193
    a7e8:	32 e0       	ldi	r19, 0x02	; 2
    a7ea:	3a 83       	std	Y+2, r19	; 0x02
    a7ec:	29 83       	std	Y+1, r18	; 0x01
    a7ee:	81 e0       	ldi	r24, 0x01	; 1
    a7f0:	90 e0       	ldi	r25, 0x00	; 0
    a7f2:	a9 81       	ldd	r26, Y+1	; 0x01
    a7f4:	ba 81       	ldd	r27, Y+2	; 0x02
    a7f6:	2d 91       	ld	r18, X+
    a7f8:	ba 83       	std	Y+2, r27	; 0x02
    a7fa:	a9 83       	std	Y+1, r26	; 0x01
    a7fc:	ef 81       	ldd	r30, Y+7	; 0x07
    a7fe:	f8 85       	ldd	r31, Y+8	; 0x08
    a800:	e2 0f       	add	r30, r18
    a802:	f1 1d       	adc	r31, r1
    a804:	a0 80       	ld	r10, Z
    a806:	b1 80       	ldd	r11, Z+1	; 0x01
    a808:	00 97       	sbiw	r24, 0x00	; 0
    a80a:	09 f1       	breq	.+66     	; 0xa84e <dir_find+0x16c>
    a80c:	bf ef       	ldi	r27, 0xFF	; 255
    a80e:	eb 16       	cp	r14, r27
    a810:	f1 04       	cpc	r15, r1
    a812:	08 f0       	brcs	.+2      	; 0xa816 <dir_find+0x134>
    a814:	76 c0       	rjmp	.+236    	; 0xa902 <dir_find+0x220>
    a816:	c5 01       	movw	r24, r10
    a818:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_wtoupper>
    a81c:	9c 83       	std	Y+4, r25	; 0x04
    a81e:	8b 83       	std	Y+3, r24	; 0x03
    a820:	f7 01       	movw	r30, r14
    a822:	31 96       	adiw	r30, 0x01	; 1
    a824:	fe 83       	std	Y+6, r31	; 0x06
    a826:	ed 83       	std	Y+5, r30	; 0x05
    a828:	ee 0c       	add	r14, r14
    a82a:	ff 1c       	adc	r15, r15
    a82c:	f6 01       	movw	r30, r12
    a82e:	ee 0d       	add	r30, r14
    a830:	ff 1d       	adc	r31, r15
    a832:	80 81       	ld	r24, Z
    a834:	91 81       	ldd	r25, Z+1	; 0x01
    a836:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_wtoupper>
    a83a:	2b 81       	ldd	r18, Y+3	; 0x03
    a83c:	3c 81       	ldd	r19, Y+4	; 0x04
    a83e:	28 17       	cp	r18, r24
    a840:	39 07       	cpc	r19, r25
    a842:	09 f0       	breq	.+2      	; 0xa846 <dir_find+0x164>
    a844:	5e c0       	rjmp	.+188    	; 0xa902 <dir_find+0x220>
    a846:	c5 01       	movw	r24, r10
    a848:	ed 80       	ldd	r14, Y+5	; 0x05
    a84a:	fe 80       	ldd	r15, Y+6	; 0x06
    a84c:	05 c0       	rjmp	.+10     	; 0xa858 <dir_find+0x176>
    a84e:	3f ef       	ldi	r19, 0xFF	; 255
    a850:	a3 16       	cp	r10, r19
    a852:	b3 06       	cpc	r11, r19
    a854:	09 f0       	breq	.+2      	; 0xa858 <dir_find+0x176>
    a856:	55 c0       	rjmp	.+170    	; 0xa902 <dir_find+0x220>
    a858:	49 81       	ldd	r20, Y+1	; 0x01
    a85a:	5a 81       	ldd	r21, Y+2	; 0x02
    a85c:	4e 5c       	subi	r20, 0xCE	; 206
    a85e:	52 40       	sbci	r21, 0x02	; 2
    a860:	41 f6       	brne	.-112    	; 0xa7f2 <dir_find+0x110>
    a862:	ef 81       	ldd	r30, Y+7	; 0x07
    a864:	f8 85       	ldd	r31, Y+8	; 0x08
    a866:	20 81       	ld	r18, Z
    a868:	26 ff       	sbrs	r18, 6
    a86a:	46 c0       	rjmp	.+140    	; 0xa8f8 <dir_find+0x216>
    a86c:	89 2b       	or	r24, r25
    a86e:	09 f4       	brne	.+2      	; 0xa872 <dir_find+0x190>
    a870:	43 c0       	rjmp	.+134    	; 0xa8f8 <dir_find+0x216>
    a872:	ee 0c       	add	r14, r14
    a874:	ff 1c       	adc	r15, r15
    a876:	f6 01       	movw	r30, r12
    a878:	ee 0d       	add	r30, r14
    a87a:	ff 1d       	adc	r31, r15
    a87c:	80 81       	ld	r24, Z
    a87e:	91 81       	ldd	r25, Z+1	; 0x01
    a880:	89 2b       	or	r24, r25
    a882:	d1 f1       	breq	.+116    	; 0xa8f8 <dir_find+0x216>
    a884:	3e c0       	rjmp	.+124    	; 0xa902 <dir_find+0x220>
    a886:	f1 10       	cpse	r15, r1
    a888:	06 c0       	rjmp	.+12     	; 0xa896 <dir_find+0x1b4>
    a88a:	8f 81       	ldd	r24, Y+7	; 0x07
    a88c:	98 85       	ldd	r25, Y+8	; 0x08
    a88e:	0e 94 d7 47 	call	0x8fae	; 0x8fae <sum_sfn>
    a892:	e8 16       	cp	r14, r24
    a894:	71 f1       	breq	.+92     	; 0xa8f2 <dir_find+0x210>
    a896:	d8 01       	movw	r26, r16
    a898:	97 96       	adiw	r26, 0x27	; 39
    a89a:	8c 91       	ld	r24, X
    a89c:	80 fd       	sbrc	r24, 0
    a89e:	17 c0       	rjmp	.+46     	; 0xa8ce <dir_find+0x1ec>
    a8a0:	f8 01       	movw	r30, r16
    a8a2:	7c 96       	adiw	r30, 0x1c	; 28
    a8a4:	2f 81       	ldd	r18, Y+7	; 0x07
    a8a6:	38 85       	ldd	r19, Y+8	; 0x08
    a8a8:	25 5f       	subi	r18, 0xF5	; 245
    a8aa:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ac:	af 81       	ldd	r26, Y+7	; 0x07
    a8ae:	b8 85       	ldd	r27, Y+8	; 0x08
    a8b0:	8d 91       	ld	r24, X+
    a8b2:	b8 87       	std	Y+8, r27	; 0x08
    a8b4:	af 83       	std	Y+7, r26	; 0x07
    a8b6:	41 91       	ld	r20, Z+
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	84 1b       	sub	r24, r20
    a8bc:	91 09       	sbc	r25, r1
    a8be:	2a 17       	cp	r18, r26
    a8c0:	3b 07       	cpc	r19, r27
    a8c2:	19 f0       	breq	.+6      	; 0xa8ca <dir_find+0x1e8>
    a8c4:	89 2b       	or	r24, r25
    a8c6:	91 f3       	breq	.-28     	; 0xa8ac <dir_find+0x1ca>
    a8c8:	02 c0       	rjmp	.+4      	; 0xa8ce <dir_find+0x1ec>
    a8ca:	89 2b       	or	r24, r25
    a8cc:	91 f0       	breq	.+36     	; 0xa8f2 <dir_find+0x210>
    a8ce:	f8 01       	movw	r30, r16
    a8d0:	40 a6       	std	Z+40, r4	; 0x28
    a8d2:	51 a6       	std	Z+41, r5	; 0x29
    a8d4:	62 a6       	std	Z+42, r6	; 0x2a
    a8d6:	73 a6       	std	Z+43, r7	; 0x2b
    a8d8:	ff 24       	eor	r15, r15
    a8da:	fa 94       	dec	r15
    a8dc:	60 e0       	ldi	r22, 0x00	; 0
    a8de:	70 e0       	ldi	r23, 0x00	; 0
    a8e0:	c8 01       	movw	r24, r16
    a8e2:	87 dc       	rcall	.-1778   	; 0xa1f2 <dir_next>
    a8e4:	00 97       	sbiw	r24, 0x00	; 0
    a8e6:	09 f4       	brne	.+2      	; 0xa8ea <dir_find+0x208>
    a8e8:	1d cf       	rjmp	.-454    	; 0xa724 <dir_find+0x42>
    a8ea:	28 2f       	mov	r18, r24
    a8ec:	0c c0       	rjmp	.+24     	; 0xa906 <dir_find+0x224>
    a8ee:	24 e0       	ldi	r18, 0x04	; 4
    a8f0:	01 c0       	rjmp	.+2      	; 0xa8f4 <dir_find+0x212>
    a8f2:	20 e0       	ldi	r18, 0x00	; 0
    a8f4:	90 e0       	ldi	r25, 0x00	; 0
    a8f6:	07 c0       	rjmp	.+14     	; 0xa906 <dir_find+0x224>
    a8f8:	ff 24       	eor	r15, r15
    a8fa:	fa 94       	dec	r15
    a8fc:	f3 0c       	add	r15, r3
    a8fe:	e2 2c       	mov	r14, r2
    a900:	ed cf       	rjmp	.-38     	; 0xa8dc <dir_find+0x1fa>
    a902:	e2 2c       	mov	r14, r2
    a904:	e9 cf       	rjmp	.-46     	; 0xa8d8 <dir_find+0x1f6>
    a906:	82 2f       	mov	r24, r18
    a908:	28 96       	adiw	r28, 0x08	; 8
    a90a:	e2 e1       	ldi	r30, 0x12	; 18
    a90c:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000a910 <dir_register>:
    a910:	a6 e1       	ldi	r26, 0x16	; 22
    a912:	b0 e0       	ldi	r27, 0x00	; 0
    a914:	ee e8       	ldi	r30, 0x8E	; 142
    a916:	f4 e5       	ldi	r31, 0x54	; 84
    a918:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    a91c:	dc 01       	movw	r26, r24
    a91e:	97 96       	adiw	r26, 0x27	; 39
    a920:	2c 91       	ld	r18, X
    a922:	97 97       	sbiw	r26, 0x27	; 39
    a924:	20 7a       	andi	r18, 0xA0	; 160
    a926:	09 f0       	breq	.+2      	; 0xa92a <dir_register+0x1a>
    a928:	61 c1       	rjmp	.+706    	; 0xabec <dir_register+0x2dc>
    a92a:	cd 90       	ld	r12, X+
    a92c:	dc 90       	ld	r13, X
    a92e:	d6 01       	movw	r26, r12
    a930:	1b 96       	adiw	r26, 0x0b	; 11
    a932:	ed 91       	ld	r30, X+
    a934:	fc 91       	ld	r31, X
    a936:	1c 97       	sbiw	r26, 0x0c	; 12
    a938:	81 2c       	mov	r8, r1
    a93a:	91 2c       	mov	r9, r1
    a93c:	21 91       	ld	r18, Z+
    a93e:	31 91       	ld	r19, Z+
    a940:	23 2b       	or	r18, r19
    a942:	21 f0       	breq	.+8      	; 0xa94c <dir_register+0x3c>
    a944:	bf ef       	ldi	r27, 0xFF	; 255
    a946:	8b 1a       	sub	r8, r27
    a948:	9b 0a       	sbc	r9, r27
    a94a:	f8 cf       	rjmp	.-16     	; 0xa93c <dir_register+0x2c>
    a94c:	8c 01       	movw	r16, r24
    a94e:	5c 01       	movw	r10, r24
    a950:	ec e1       	ldi	r30, 0x1C	; 28
    a952:	ae 0e       	add	r10, r30
    a954:	b1 1c       	adc	r11, r1
    a956:	4c e0       	ldi	r20, 0x0C	; 12
    a958:	50 e0       	ldi	r21, 0x00	; 0
    a95a:	b5 01       	movw	r22, r10
    a95c:	ce 01       	movw	r24, r28
    a95e:	01 96       	adiw	r24, 0x01	; 1
    a960:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    a964:	8c 85       	ldd	r24, Y+12	; 0x0c
    a966:	80 ff       	sbrs	r24, 0
    a968:	96 c0       	rjmp	.+300    	; 0xaa96 <dir_register+0x186>
    a96a:	80 e4       	ldi	r24, 0x40	; 64
    a96c:	d8 01       	movw	r26, r16
    a96e:	97 96       	adiw	r26, 0x27	; 39
    a970:	8c 93       	st	X, r24
    a972:	41 2c       	mov	r4, r1
    a974:	51 2c       	mov	r5, r1
    a976:	32 01       	movw	r6, r4
    a978:	43 94       	inc	r4
    a97a:	72 01       	movw	r14, r4
    a97c:	f6 01       	movw	r30, r12
    a97e:	23 84       	ldd	r2, Z+11	; 0x0b
    a980:	34 84       	ldd	r3, Z+12	; 0x0c
    a982:	4b e0       	ldi	r20, 0x0B	; 11
    a984:	50 e0       	ldi	r21, 0x00	; 0
    a986:	be 01       	movw	r22, r28
    a988:	6f 5f       	subi	r22, 0xFF	; 255
    a98a:	7f 4f       	sbci	r23, 0xFF	; 255
    a98c:	c5 01       	movw	r24, r10
    a98e:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    a992:	f6 e0       	ldi	r31, 0x06	; 6
    a994:	4f 16       	cp	r4, r31
    a996:	51 04       	cpc	r5, r1
    a998:	18 f1       	brcs	.+70     	; 0xa9e0 <dir_register+0xd0>
    a99a:	f1 01       	movw	r30, r2
    a99c:	b3 01       	movw	r22, r6
    a99e:	a2 01       	movw	r20, r4
    a9a0:	81 91       	ld	r24, Z+
    a9a2:	91 91       	ld	r25, Z+
    a9a4:	00 97       	sbiw	r24, 0x00	; 0
    a9a6:	d9 f0       	breq	.+54     	; 0xa9de <dir_register+0xce>
    a9a8:	20 e1       	ldi	r18, 0x10	; 16
    a9aa:	30 e0       	ldi	r19, 0x00	; 0
    a9ac:	44 0f       	add	r20, r20
    a9ae:	55 1f       	adc	r21, r21
    a9b0:	66 1f       	adc	r22, r22
    a9b2:	77 1f       	adc	r23, r23
    a9b4:	dc 01       	movw	r26, r24
    a9b6:	a1 70       	andi	r26, 0x01	; 1
    a9b8:	bb 27       	eor	r27, r27
    a9ba:	4a 0f       	add	r20, r26
    a9bc:	5b 1f       	adc	r21, r27
    a9be:	61 1d       	adc	r22, r1
    a9c0:	71 1d       	adc	r23, r1
    a9c2:	96 95       	lsr	r25
    a9c4:	87 95       	ror	r24
    a9c6:	60 ff       	sbrs	r22, 0
    a9c8:	06 c0       	rjmp	.+12     	; 0xa9d6 <dir_register+0xc6>
    a9ca:	a1 e2       	ldi	r26, 0x21	; 33
    a9cc:	4a 27       	eor	r20, r26
    a9ce:	a0 e1       	ldi	r26, 0x10	; 16
    a9d0:	5a 27       	eor	r21, r26
    a9d2:	a1 e0       	ldi	r26, 0x01	; 1
    a9d4:	6a 27       	eor	r22, r26
    a9d6:	21 50       	subi	r18, 0x01	; 1
    a9d8:	31 09       	sbc	r19, r1
    a9da:	41 f7       	brne	.-48     	; 0xa9ac <dir_register+0x9c>
    a9dc:	e1 cf       	rjmp	.-62     	; 0xa9a0 <dir_register+0x90>
    a9de:	7a 01       	movw	r14, r20
    a9e0:	fe 01       	movw	r30, r28
    a9e2:	75 96       	adiw	r30, 0x15	; 21
    a9e4:	27 e0       	ldi	r18, 0x07	; 7
    a9e6:	30 e0       	ldi	r19, 0x00	; 0
    a9e8:	9e 2d       	mov	r25, r14
    a9ea:	9f 70       	andi	r25, 0x0F	; 15
    a9ec:	80 e3       	ldi	r24, 0x30	; 48
    a9ee:	89 0f       	add	r24, r25
    a9f0:	8a 33       	cpi	r24, 0x3A	; 58
    a9f2:	10 f0       	brcs	.+4      	; 0xa9f8 <dir_register+0xe8>
    a9f4:	87 e3       	ldi	r24, 0x37	; 55
    a9f6:	89 0f       	add	r24, r25
    a9f8:	21 50       	subi	r18, 0x01	; 1
    a9fa:	31 09       	sbc	r19, r1
    a9fc:	82 93       	st	-Z, r24
    a9fe:	a4 e0       	ldi	r26, 0x04	; 4
    aa00:	f6 94       	lsr	r15
    aa02:	e7 94       	ror	r14
    aa04:	aa 95       	dec	r26
    aa06:	e1 f7       	brne	.-8      	; 0xaa00 <dir_register+0xf0>
    aa08:	e1 14       	cp	r14, r1
    aa0a:	f1 04       	cpc	r15, r1
    aa0c:	69 f7       	brne	.-38     	; 0xa9e8 <dir_register+0xd8>
    aa0e:	ed e0       	ldi	r30, 0x0D	; 13
    aa10:	f0 e0       	ldi	r31, 0x00	; 0
    aa12:	ec 0f       	add	r30, r28
    aa14:	fd 1f       	adc	r31, r29
    aa16:	e2 0f       	add	r30, r18
    aa18:	f3 1f       	adc	r31, r19
    aa1a:	be e7       	ldi	r27, 0x7E	; 126
    aa1c:	b0 83       	st	Z, r27
    aa1e:	f5 01       	movw	r30, r10
    aa20:	80 e0       	ldi	r24, 0x00	; 0
    aa22:	90 e0       	ldi	r25, 0x00	; 0
    aa24:	28 17       	cp	r18, r24
    aa26:	39 07       	cpc	r19, r25
    aa28:	29 f0       	breq	.+10     	; 0xaa34 <dir_register+0x124>
    aa2a:	41 91       	ld	r20, Z+
    aa2c:	40 32       	cpi	r20, 0x20	; 32
    aa2e:	11 f0       	breq	.+4      	; 0xaa34 <dir_register+0x124>
    aa30:	01 96       	adiw	r24, 0x01	; 1
    aa32:	f8 cf       	rjmp	.-16     	; 0xaa24 <dir_register+0x114>
    aa34:	f5 01       	movw	r30, r10
    aa36:	e8 0f       	add	r30, r24
    aa38:	f9 1f       	adc	r31, r25
    aa3a:	28 30       	cpi	r18, 0x08	; 8
    aa3c:	31 05       	cpc	r19, r1
    aa3e:	50 f4       	brcc	.+20     	; 0xaa54 <dir_register+0x144>
    aa40:	ad e0       	ldi	r26, 0x0D	; 13
    aa42:	b0 e0       	ldi	r27, 0x00	; 0
    aa44:	ac 0f       	add	r26, r28
    aa46:	bd 1f       	adc	r27, r29
    aa48:	a2 0f       	add	r26, r18
    aa4a:	b3 1f       	adc	r27, r19
    aa4c:	8c 91       	ld	r24, X
    aa4e:	2f 5f       	subi	r18, 0xFF	; 255
    aa50:	3f 4f       	sbci	r19, 0xFF	; 255
    aa52:	01 c0       	rjmp	.+2      	; 0xaa56 <dir_register+0x146>
    aa54:	80 e2       	ldi	r24, 0x20	; 32
    aa56:	81 93       	st	Z+, r24
    aa58:	cf 01       	movw	r24, r30
    aa5a:	8a 19       	sub	r24, r10
    aa5c:	9b 09       	sbc	r25, r11
    aa5e:	08 97       	sbiw	r24, 0x08	; 8
    aa60:	60 f3       	brcs	.-40     	; 0xaa3a <dir_register+0x12a>
    aa62:	c8 01       	movw	r24, r16
    aa64:	3e de       	rcall	.-900    	; 0xa6e2 <dir_find>
    aa66:	00 97       	sbiw	r24, 0x00	; 0
    aa68:	71 f4       	brne	.+28     	; 0xaa86 <dir_register+0x176>
    aa6a:	ef ef       	ldi	r30, 0xFF	; 255
    aa6c:	4e 1a       	sub	r4, r30
    aa6e:	5e 0a       	sbc	r5, r30
    aa70:	6e 0a       	sbc	r6, r30
    aa72:	7e 0a       	sbc	r7, r30
    aa74:	f4 e6       	ldi	r31, 0x64	; 100
    aa76:	4f 16       	cp	r4, r31
    aa78:	51 04       	cpc	r5, r1
    aa7a:	61 04       	cpc	r6, r1
    aa7c:	71 04       	cpc	r7, r1
    aa7e:	09 f0       	breq	.+2      	; 0xaa82 <dir_register+0x172>
    aa80:	7c cf       	rjmp	.-264    	; 0xa97a <dir_register+0x6a>
    aa82:	27 e0       	ldi	r18, 0x07	; 7
    aa84:	b4 c0       	rjmp	.+360    	; 0xabee <dir_register+0x2de>
    aa86:	84 30       	cpi	r24, 0x04	; 4
    aa88:	91 05       	cpc	r25, r1
    aa8a:	09 f0       	breq	.+2      	; 0xaa8e <dir_register+0x17e>
    aa8c:	df c0       	rjmp	.+446    	; 0xac4c <dir_register+0x33c>
    aa8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa90:	d8 01       	movw	r26, r16
    aa92:	97 96       	adiw	r26, 0x27	; 39
    aa94:	8c 93       	st	X, r24
    aa96:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa98:	81 ff       	sbrs	r24, 1
    aa9a:	0b c0       	rjmp	.+22     	; 0xaab2 <dir_register+0x1a2>
    aa9c:	c4 01       	movw	r24, r8
    aa9e:	0c 96       	adiw	r24, 0x0c	; 12
    aaa0:	6d e0       	ldi	r22, 0x0D	; 13
    aaa2:	70 e0       	ldi	r23, 0x00	; 0
    aaa4:	0e 94 87 ea 	call	0x1d50e	; 0x1d50e <__udivmodhi4>
    aaa8:	7b 01       	movw	r14, r22
    aaaa:	bf ef       	ldi	r27, 0xFF	; 255
    aaac:	eb 1a       	sub	r14, r27
    aaae:	fb 0a       	sbc	r15, r27
    aab0:	03 c0       	rjmp	.+6      	; 0xaab8 <dir_register+0x1a8>
    aab2:	ee 24       	eor	r14, r14
    aab4:	e3 94       	inc	r14
    aab6:	f1 2c       	mov	r15, r1
    aab8:	b7 01       	movw	r22, r14
    aaba:	c8 01       	movw	r24, r16
    aabc:	c2 dc       	rcall	.-1660   	; 0xa442 <dir_alloc>
    aabe:	00 97       	sbiw	r24, 0x00	; 0
    aac0:	09 f0       	breq	.+2      	; 0xaac4 <dir_register+0x1b4>
    aac2:	c4 c0       	rjmp	.+392    	; 0xac4c <dir_register+0x33c>
    aac4:	e1 e0       	ldi	r30, 0x01	; 1
    aac6:	ee 1a       	sub	r14, r30
    aac8:	f1 08       	sbc	r15, r1
    aaca:	09 f4       	brne	.+2      	; 0xaace <dir_register+0x1be>
    aacc:	92 c0       	rjmp	.+292    	; 0xabf2 <dir_register+0x2e2>
    aace:	d8 01       	movw	r26, r16
    aad0:	1e 96       	adiw	r26, 0x0e	; 14
    aad2:	4d 91       	ld	r20, X+
    aad4:	5d 91       	ld	r21, X+
    aad6:	6d 91       	ld	r22, X+
    aad8:	7c 91       	ld	r23, X
    aada:	51 97       	sbiw	r26, 0x11	; 17
    aadc:	c7 01       	movw	r24, r14
    aade:	e5 e0       	ldi	r30, 0x05	; 5
    aae0:	88 0f       	add	r24, r24
    aae2:	99 1f       	adc	r25, r25
    aae4:	ea 95       	dec	r30
    aae6:	e1 f7       	brne	.-8      	; 0xaae0 <dir_register+0x1d0>
    aae8:	48 1b       	sub	r20, r24
    aaea:	59 0b       	sbc	r21, r25
    aaec:	61 09       	sbc	r22, r1
    aaee:	71 09       	sbc	r23, r1
    aaf0:	c8 01       	movw	r24, r16
    aaf2:	85 d8       	rcall	.-3830   	; 0x9bfe <dir_sdi>
    aaf4:	00 97       	sbiw	r24, 0x00	; 0
    aaf6:	09 f0       	breq	.+2      	; 0xaafa <dir_register+0x1ea>
    aaf8:	a9 c0       	rjmp	.+338    	; 0xac4c <dir_register+0x33c>
    aafa:	c5 01       	movw	r24, r10
    aafc:	0e 94 d7 47 	call	0x8fae	; 0x8fae <sum_sfn>
    ab00:	68 2e       	mov	r6, r24
    ab02:	5f e0       	ldi	r21, 0x0F	; 15
    ab04:	35 2e       	mov	r3, r21
    ab06:	6d e0       	ldi	r22, 0x0D	; 13
    ab08:	46 2e       	mov	r4, r22
    ab0a:	7e ec       	ldi	r23, 0xCE	; 206
    ab0c:	87 2e       	mov	r8, r23
    ab0e:	72 e0       	ldi	r23, 0x02	; 2
    ab10:	97 2e       	mov	r9, r23
    ab12:	55 24       	eor	r5, r5
    ab14:	53 94       	inc	r5
    ab16:	f8 01       	movw	r30, r16
    ab18:	46 89       	ldd	r20, Z+22	; 0x16
    ab1a:	57 89       	ldd	r21, Z+23	; 0x17
    ab1c:	60 8d       	ldd	r22, Z+24	; 0x18
    ab1e:	71 8d       	ldd	r23, Z+25	; 0x19
    ab20:	c6 01       	movw	r24, r12
    ab22:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    ab26:	00 97       	sbiw	r24, 0x00	; 0
    ab28:	09 f0       	breq	.+2      	; 0xab2c <dir_register+0x21c>
    ab2a:	90 c0       	rjmp	.+288    	; 0xac4c <dir_register+0x33c>
    ab2c:	7e 2c       	mov	r7, r14
    ab2e:	d8 01       	movw	r26, r16
    ab30:	5a 96       	adiw	r26, 0x1a	; 26
    ab32:	ed 91       	ld	r30, X+
    ab34:	fc 91       	ld	r31, X
    ab36:	5b 97       	sbiw	r26, 0x1b	; 27
    ab38:	d6 01       	movw	r26, r12
    ab3a:	1b 96       	adiw	r26, 0x0b	; 11
    ab3c:	6d 91       	ld	r22, X+
    ab3e:	7c 91       	ld	r23, X
    ab40:	1c 97       	sbiw	r26, 0x0c	; 12
    ab42:	65 86       	std	Z+13, r6	; 0x0d
    ab44:	33 86       	std	Z+11, r3	; 0x0b
    ab46:	14 86       	std	Z+12, r1	; 0x0c
    ab48:	12 8e       	std	Z+26, r1	; 0x1a
    ab4a:	13 8e       	std	Z+27, r1	; 0x1b
    ab4c:	97 01       	movw	r18, r14
    ab4e:	33 27       	eor	r19, r19
    ab50:	21 50       	subi	r18, 0x01	; 1
    ab52:	31 09       	sbc	r19, r1
    ab54:	42 9e       	mul	r4, r18
    ab56:	c0 01       	movw	r24, r0
    ab58:	43 9e       	mul	r4, r19
    ab5a:	90 0d       	add	r25, r0
    ab5c:	11 24       	eor	r1, r1
    ab5e:	21 ec       	ldi	r18, 0xC1	; 193
    ab60:	32 e0       	ldi	r19, 0x02	; 2
    ab62:	3e 8b       	std	Y+22, r19	; 0x16
    ab64:	2d 8b       	std	Y+21, r18	; 0x15
    ab66:	20 e0       	ldi	r18, 0x00	; 0
    ab68:	30 e0       	ldi	r19, 0x00	; 0
    ab6a:	2f 3f       	cpi	r18, 0xFF	; 255
    ab6c:	4f ef       	ldi	r20, 0xFF	; 255
    ab6e:	34 07       	cpc	r19, r20
    ab70:	49 f0       	breq	.+18     	; 0xab84 <dir_register+0x274>
    ab72:	9c 01       	movw	r18, r24
    ab74:	22 0f       	add	r18, r18
    ab76:	33 1f       	adc	r19, r19
    ab78:	26 0f       	add	r18, r22
    ab7a:	37 1f       	adc	r19, r23
    ab7c:	d9 01       	movw	r26, r18
    ab7e:	2d 91       	ld	r18, X+
    ab80:	3c 91       	ld	r19, X
    ab82:	01 96       	adiw	r24, 0x01	; 1
    ab84:	ad 89       	ldd	r26, Y+21	; 0x15
    ab86:	be 89       	ldd	r27, Y+22	; 0x16
    ab88:	4d 91       	ld	r20, X+
    ab8a:	be 8b       	std	Y+22, r27	; 0x16
    ab8c:	ad 8b       	std	Y+21, r26	; 0x15
    ab8e:	df 01       	movw	r26, r30
    ab90:	a4 0f       	add	r26, r20
    ab92:	b1 1d       	adc	r27, r1
    ab94:	2c 93       	st	X, r18
    ab96:	11 96       	adiw	r26, 0x01	; 1
    ab98:	3c 93       	st	X, r19
    ab9a:	21 15       	cp	r18, r1
    ab9c:	31 05       	cpc	r19, r1
    ab9e:	11 f4       	brne	.+4      	; 0xaba4 <dir_register+0x294>
    aba0:	2f ef       	ldi	r18, 0xFF	; 255
    aba2:	3f ef       	ldi	r19, 0xFF	; 255
    aba4:	4d 89       	ldd	r20, Y+21	; 0x15
    aba6:	5e 89       	ldd	r21, Y+22	; 0x16
    aba8:	84 16       	cp	r8, r20
    abaa:	95 06       	cpc	r9, r21
    abac:	f1 f6       	brne	.-68     	; 0xab6a <dir_register+0x25a>
    abae:	2f 3f       	cpi	r18, 0xFF	; 255
    abb0:	3f 4f       	sbci	r19, 0xFF	; 255
    abb2:	49 f0       	breq	.+18     	; 0xabc6 <dir_register+0x2b6>
    abb4:	88 0f       	add	r24, r24
    abb6:	99 1f       	adc	r25, r25
    abb8:	db 01       	movw	r26, r22
    abba:	a8 0f       	add	r26, r24
    abbc:	b9 1f       	adc	r27, r25
    abbe:	8d 91       	ld	r24, X+
    abc0:	9c 91       	ld	r25, X
    abc2:	89 2b       	or	r24, r25
    abc4:	19 f4       	brne	.+6      	; 0xabcc <dir_register+0x2bc>
    abc6:	87 2d       	mov	r24, r7
    abc8:	80 64       	ori	r24, 0x40	; 64
    abca:	78 2e       	mov	r7, r24
    abcc:	70 82       	st	Z, r7
    abce:	d6 01       	movw	r26, r12
    abd0:	13 96       	adiw	r26, 0x03	; 3
    abd2:	5c 92       	st	X, r5
    abd4:	60 e0       	ldi	r22, 0x00	; 0
    abd6:	70 e0       	ldi	r23, 0x00	; 0
    abd8:	c8 01       	movw	r24, r16
    abda:	0b db       	rcall	.-2538   	; 0xa1f2 <dir_next>
    abdc:	00 97       	sbiw	r24, 0x00	; 0
    abde:	b1 f5       	brne	.+108    	; 0xac4c <dir_register+0x33c>
    abe0:	b1 e0       	ldi	r27, 0x01	; 1
    abe2:	eb 1a       	sub	r14, r27
    abe4:	f1 08       	sbc	r15, r1
    abe6:	09 f0       	breq	.+2      	; 0xabea <dir_register+0x2da>
    abe8:	96 cf       	rjmp	.-212    	; 0xab16 <dir_register+0x206>
    abea:	03 c0       	rjmp	.+6      	; 0xabf2 <dir_register+0x2e2>
    abec:	26 e0       	ldi	r18, 0x06	; 6
    abee:	90 e0       	ldi	r25, 0x00	; 0
    abf0:	2e c0       	rjmp	.+92     	; 0xac4e <dir_register+0x33e>
    abf2:	d8 01       	movw	r26, r16
    abf4:	56 96       	adiw	r26, 0x16	; 22
    abf6:	4d 91       	ld	r20, X+
    abf8:	5d 91       	ld	r21, X+
    abfa:	6d 91       	ld	r22, X+
    abfc:	7c 91       	ld	r23, X
    abfe:	59 97       	sbiw	r26, 0x19	; 25
    ac00:	c6 01       	movw	r24, r12
    ac02:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    ac06:	00 97       	sbiw	r24, 0x00	; 0
    ac08:	09 f5       	brne	.+66     	; 0xac4c <dir_register+0x33c>
    ac0a:	40 e2       	ldi	r20, 0x20	; 32
    ac0c:	50 e0       	ldi	r21, 0x00	; 0
    ac0e:	60 e0       	ldi	r22, 0x00	; 0
    ac10:	70 e0       	ldi	r23, 0x00	; 0
    ac12:	f8 01       	movw	r30, r16
    ac14:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac16:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac18:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    ac1c:	4b e0       	ldi	r20, 0x0B	; 11
    ac1e:	50 e0       	ldi	r21, 0x00	; 0
    ac20:	b5 01       	movw	r22, r10
    ac22:	d8 01       	movw	r26, r16
    ac24:	5a 96       	adiw	r26, 0x1a	; 26
    ac26:	8d 91       	ld	r24, X+
    ac28:	9c 91       	ld	r25, X
    ac2a:	5b 97       	sbiw	r26, 0x1b	; 27
    ac2c:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    ac30:	d8 01       	movw	r26, r16
    ac32:	5a 96       	adiw	r26, 0x1a	; 26
    ac34:	ed 91       	ld	r30, X+
    ac36:	fc 91       	ld	r31, X
    ac38:	5b 97       	sbiw	r26, 0x1b	; 27
    ac3a:	97 96       	adiw	r26, 0x27	; 39
    ac3c:	8c 91       	ld	r24, X
    ac3e:	88 71       	andi	r24, 0x18	; 24
    ac40:	84 87       	std	Z+12, r24	; 0x0c
    ac42:	81 e0       	ldi	r24, 0x01	; 1
    ac44:	f6 01       	movw	r30, r12
    ac46:	83 83       	std	Z+3, r24	; 0x03
    ac48:	20 e0       	ldi	r18, 0x00	; 0
    ac4a:	d1 cf       	rjmp	.-94     	; 0xabee <dir_register+0x2de>
    ac4c:	28 2f       	mov	r18, r24
    ac4e:	82 2f       	mov	r24, r18
    ac50:	66 96       	adiw	r28, 0x16	; 22
    ac52:	e2 e1       	ldi	r30, 0x12	; 18
    ac54:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000ac58 <follow_path>:
    ac58:	a7 e0       	ldi	r26, 0x07	; 7
    ac5a:	b0 e0       	ldi	r27, 0x00	; 0
    ac5c:	e2 e3       	ldi	r30, 0x32	; 50
    ac5e:	f6 e5       	ldi	r31, 0x56	; 86
    ac60:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    ac64:	8c 01       	movw	r16, r24
    ac66:	7b 01       	movw	r14, r22
    ac68:	dc 01       	movw	r26, r24
    ac6a:	2d 90       	ld	r2, X+
    ac6c:	3c 90       	ld	r3, X
    ac6e:	fb 01       	movw	r30, r22
    ac70:	80 81       	ld	r24, Z
    ac72:	8f 32       	cpi	r24, 0x2F	; 47
    ac74:	11 f0       	breq	.+4      	; 0xac7a <follow_path+0x22>
    ac76:	8c 35       	cpi	r24, 0x5C	; 92
    ac78:	11 f4       	brne	.+4      	; 0xac7e <follow_path+0x26>
    ac7a:	97 01       	movw	r18, r14
    ac7c:	0b c0       	rjmp	.+22     	; 0xac94 <follow_path+0x3c>
    ac7e:	f1 01       	movw	r30, r2
    ac80:	85 89       	ldd	r24, Z+21	; 0x15
    ac82:	96 89       	ldd	r25, Z+22	; 0x16
    ac84:	a7 89       	ldd	r26, Z+23	; 0x17
    ac86:	b0 8d       	ldd	r27, Z+24	; 0x18
    ac88:	f8 01       	movw	r30, r16
    ac8a:	86 83       	std	Z+6, r24	; 0x06
    ac8c:	97 83       	std	Z+7, r25	; 0x07
    ac8e:	a0 87       	std	Z+8, r26	; 0x08
    ac90:	b1 87       	std	Z+9, r27	; 0x09
    ac92:	0e c0       	rjmp	.+28     	; 0xacb0 <follow_path+0x58>
    ac94:	79 01       	movw	r14, r18
    ac96:	d9 01       	movw	r26, r18
    ac98:	8c 91       	ld	r24, X
    ac9a:	2f 5f       	subi	r18, 0xFF	; 255
    ac9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac9e:	8f 32       	cpi	r24, 0x2F	; 47
    aca0:	c9 f3       	breq	.-14     	; 0xac94 <follow_path+0x3c>
    aca2:	8c 35       	cpi	r24, 0x5C	; 92
    aca4:	b9 f3       	breq	.-18     	; 0xac94 <follow_path+0x3c>
    aca6:	f8 01       	movw	r30, r16
    aca8:	16 82       	std	Z+6, r1	; 0x06
    acaa:	17 82       	std	Z+7, r1	; 0x07
    acac:	10 86       	std	Z+8, r1	; 0x08
    acae:	11 86       	std	Z+9, r1	; 0x09
    acb0:	d7 01       	movw	r26, r14
    acb2:	8c 91       	ld	r24, X
    acb4:	80 32       	cpi	r24, 0x20	; 32
    acb6:	50 f0       	brcs	.+20     	; 0xaccc <follow_path+0x74>
    acb8:	f8 01       	movw	r30, r16
    acba:	7c 96       	adiw	r30, 0x1c	; 28
    acbc:	fb 83       	std	Y+3, r31	; 0x03
    acbe:	ea 83       	std	Y+2, r30	; 0x02
    acc0:	91 01       	movw	r18, r2
    acc2:	2b 5c       	subi	r18, 0xCB	; 203
    acc4:	3f 4f       	sbci	r19, 0xFF	; 255
    acc6:	3d 83       	std	Y+5, r19	; 0x05
    acc8:	2c 83       	std	Y+4, r18	; 0x04
    acca:	87 c0       	rjmp	.+270    	; 0xadda <follow_path+0x182>
    accc:	80 e8       	ldi	r24, 0x80	; 128
    acce:	d8 01       	movw	r26, r16
    acd0:	97 96       	adiw	r26, 0x27	; 39
    acd2:	8c 93       	st	X, r24
    acd4:	40 e0       	ldi	r20, 0x00	; 0
    acd6:	50 e0       	ldi	r21, 0x00	; 0
    acd8:	ba 01       	movw	r22, r20
    acda:	c8 01       	movw	r24, r16
    acdc:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    ace0:	d8 c1       	rjmp	.+944    	; 0xb092 <follow_path+0x43a>
    ace2:	8f 32       	cpi	r24, 0x2F	; 47
    ace4:	91 05       	cpc	r25, r1
    ace6:	09 f4       	brne	.+2      	; 0xacea <follow_path+0x92>
    ace8:	83 c0       	rjmp	.+262    	; 0xadf0 <follow_path+0x198>
    acea:	8c 35       	cpi	r24, 0x5C	; 92
    acec:	91 05       	cpc	r25, r1
    acee:	09 f4       	brne	.+2      	; 0xacf2 <follow_path+0x9a>
    acf0:	7f c0       	rjmp	.+254    	; 0xadf0 <follow_path+0x198>
    acf2:	a1 14       	cp	r10, r1
    acf4:	f1 e0       	ldi	r31, 0x01	; 1
    acf6:	bf 06       	cpc	r11, r31
    acf8:	09 f4       	brne	.+2      	; 0xacfc <follow_path+0xa4>
    acfa:	ac c1       	rjmp	.+856    	; 0xb054 <follow_path+0x3fc>
    acfc:	61 e0       	ldi	r22, 0x01	; 1
    acfe:	70 e0       	ldi	r23, 0x00	; 0
    ad00:	0e 94 fa 6d 	call	0xdbf4	; 0xdbf4 <ff_convert>
    ad04:	00 97       	sbiw	r24, 0x00	; 0
    ad06:	09 f4       	brne	.+2      	; 0xad0a <follow_path+0xb2>
    ad08:	a5 c1       	rjmp	.+842    	; 0xb054 <follow_path+0x3fc>
    ad0a:	80 38       	cpi	r24, 0x80	; 128
    ad0c:	91 05       	cpc	r25, r1
    ad0e:	28 f4       	brcc	.+10     	; 0xad1a <follow_path+0xc2>
    ad10:	e8 ed       	ldi	r30, 0xD8	; 216
    ad12:	f7 e0       	ldi	r31, 0x07	; 7
    ad14:	21 91       	ld	r18, Z+
    ad16:	21 11       	cpse	r18, r1
    ad18:	79 c0       	rjmp	.+242    	; 0xae0c <follow_path+0x1b4>
    ad1a:	d3 01       	movw	r26, r6
    ad1c:	8d 93       	st	X+, r24
    ad1e:	9d 93       	st	X+, r25
    ad20:	3d 01       	movw	r6, r26
    ad22:	bf 82       	std	Y+7, r11	; 0x07
    ad24:	ae 82       	std	Y+6, r10	; 0x06
    ad26:	ae 80       	ldd	r10, Y+6	; 0x06
    ad28:	bf 80       	ldd	r11, Y+7	; 0x07
    ad2a:	bf ef       	ldi	r27, 0xFF	; 255
    ad2c:	ab 1a       	sub	r10, r27
    ad2e:	bb 0a       	sbc	r11, r27
    ad30:	f4 01       	movw	r30, r8
    ad32:	81 91       	ld	r24, Z+
    ad34:	4f 01       	movw	r8, r30
    ad36:	90 e0       	ldi	r25, 0x00	; 0
    ad38:	80 32       	cpi	r24, 0x20	; 32
    ad3a:	91 05       	cpc	r25, r1
    ad3c:	90 f6       	brcc	.-92     	; 0xace2 <follow_path+0x8a>
    ad3e:	ea 0c       	add	r14, r10
    ad40:	fb 1c       	adc	r15, r11
    ad42:	80 97       	sbiw	r24, 0x20	; 32
    ad44:	08 f0       	brcs	.+2      	; 0xad48 <follow_path+0xf0>
    ad46:	68 c0       	rjmp	.+208    	; 0xae18 <follow_path+0x1c0>
    ad48:	b4 e0       	ldi	r27, 0x04	; 4
    ad4a:	b9 83       	std	Y+1, r27	; 0x01
    ad4c:	ee 81       	ldd	r30, Y+6	; 0x06
    ad4e:	ff 81       	ldd	r31, Y+7	; 0x07
    ad50:	ee 0f       	add	r30, r30
    ad52:	ff 1f       	adc	r31, r31
    ad54:	2e 81       	ldd	r18, Y+6	; 0x06
    ad56:	3f 81       	ldd	r19, Y+7	; 0x07
    ad58:	21 30       	cpi	r18, 0x01	; 1
    ad5a:	31 05       	cpc	r19, r1
    ad5c:	09 f0       	breq	.+2      	; 0xad60 <follow_path+0x108>
    ad5e:	5e c0       	rjmp	.+188    	; 0xae1c <follow_path+0x1c4>
    ad60:	d6 01       	movw	r26, r12
    ad62:	8d 91       	ld	r24, X+
    ad64:	9c 91       	ld	r25, X
    ad66:	8e 97       	sbiw	r24, 0x2e	; 46
    ad68:	09 f0       	breq	.+2      	; 0xad6c <follow_path+0x114>
    ad6a:	65 c0       	rjmp	.+202    	; 0xae36 <follow_path+0x1de>
    ad6c:	ec 0d       	add	r30, r12
    ad6e:	fd 1d       	adc	r31, r13
    ad70:	11 82       	std	Z+1, r1	; 0x01
    ad72:	10 82       	st	Z, r1
    ad74:	f8 01       	movw	r30, r16
    ad76:	7c 96       	adiw	r30, 0x1c	; 28
    ad78:	80 e0       	ldi	r24, 0x00	; 0
    ad7a:	90 e0       	ldi	r25, 0x00	; 0
    ad7c:	2e 81       	ldd	r18, Y+6	; 0x06
    ad7e:	3f 81       	ldd	r19, Y+7	; 0x07
    ad80:	82 17       	cp	r24, r18
    ad82:	93 07       	cpc	r25, r19
    ad84:	08 f0       	brcs	.+2      	; 0xad88 <follow_path+0x130>
    ad86:	5a c0       	rjmp	.+180    	; 0xae3c <follow_path+0x1e4>
    ad88:	2e e2       	ldi	r18, 0x2E	; 46
    ad8a:	21 93       	st	Z+, r18
    ad8c:	01 96       	adiw	r24, 0x01	; 1
    ad8e:	8b 30       	cpi	r24, 0x0B	; 11
    ad90:	91 05       	cpc	r25, r1
    ad92:	a1 f7       	brne	.-24     	; 0xad7c <follow_path+0x124>
    ad94:	89 81       	ldd	r24, Y+1	; 0x01
    ad96:	80 62       	ori	r24, 0x20	; 32
    ad98:	d8 01       	movw	r26, r16
    ad9a:	97 96       	adiw	r26, 0x27	; 39
    ad9c:	8c 93       	st	X, r24
    ad9e:	c8 01       	movw	r24, r16
    ada0:	a0 dc       	rcall	.-1728   	; 0xa6e2 <dir_find>
    ada2:	d8 01       	movw	r26, r16
    ada4:	97 96       	adiw	r26, 0x27	; 39
    ada6:	2c 91       	ld	r18, X
    ada8:	00 97       	sbiw	r24, 0x00	; 0
    adaa:	09 f0       	breq	.+2      	; 0xadae <follow_path+0x156>
    adac:	56 c1       	rjmp	.+684    	; 0xb05a <follow_path+0x402>
    adae:	22 fd       	sbrc	r18, 2
    adb0:	70 c1       	rjmp	.+736    	; 0xb092 <follow_path+0x43a>
    adb2:	f8 01       	movw	r30, r16
    adb4:	84 81       	ldd	r24, Z+4	; 0x04
    adb6:	84 ff       	sbrs	r24, 4
    adb8:	63 c1       	rjmp	.+710    	; 0xb080 <follow_path+0x428>
    adba:	66 85       	ldd	r22, Z+14	; 0x0e
    adbc:	77 85       	ldd	r23, Z+15	; 0x0f
    adbe:	71 70       	andi	r23, 0x01	; 1
    adc0:	2c 81       	ldd	r18, Y+4	; 0x04
    adc2:	3d 81       	ldd	r19, Y+5	; 0x05
    adc4:	62 0f       	add	r22, r18
    adc6:	73 1f       	adc	r23, r19
    adc8:	d1 01       	movw	r26, r2
    adca:	8c 91       	ld	r24, X
    adcc:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    add0:	f8 01       	movw	r30, r16
    add2:	66 83       	std	Z+6, r22	; 0x06
    add4:	77 83       	std	Z+7, r23	; 0x07
    add6:	80 87       	std	Z+8, r24	; 0x08
    add8:	91 87       	std	Z+9, r25	; 0x09
    adda:	d8 01       	movw	r26, r16
    addc:	ed 91       	ld	r30, X+
    adde:	fc 91       	ld	r31, X
    ade0:	c3 84       	ldd	r12, Z+11	; 0x0b
    ade2:	d4 84       	ldd	r13, Z+12	; 0x0c
    ade4:	26 01       	movw	r4, r12
    ade6:	36 01       	movw	r6, r12
    ade8:	47 01       	movw	r8, r14
    adea:	1f 82       	std	Y+7, r1	; 0x07
    adec:	1e 82       	std	Y+6, r1	; 0x06
    adee:	9b cf       	rjmp	.-202    	; 0xad26 <follow_path+0xce>
    adf0:	f7 01       	movw	r30, r14
    adf2:	ea 0d       	add	r30, r10
    adf4:	fb 1d       	adc	r31, r11
    adf6:	03 c0       	rjmp	.+6      	; 0xadfe <follow_path+0x1a6>
    adf8:	2c 35       	cpi	r18, 0x5C	; 92
    adfa:	09 f0       	breq	.+2      	; 0xadfe <follow_path+0x1a6>
    adfc:	a0 cf       	rjmp	.-192    	; 0xad3e <follow_path+0xe6>
    adfe:	5f 01       	movw	r10, r30
    ae00:	ae 18       	sub	r10, r14
    ae02:	bf 08       	sbc	r11, r15
    ae04:	21 91       	ld	r18, Z+
    ae06:	2f 32       	cpi	r18, 0x2F	; 47
    ae08:	b9 f7       	brne	.-18     	; 0xadf8 <follow_path+0x1a0>
    ae0a:	f9 cf       	rjmp	.-14     	; 0xadfe <follow_path+0x1a6>
    ae0c:	30 e0       	ldi	r19, 0x00	; 0
    ae0e:	82 17       	cp	r24, r18
    ae10:	93 07       	cpc	r25, r19
    ae12:	09 f0       	breq	.+2      	; 0xae16 <follow_path+0x1be>
    ae14:	7f cf       	rjmp	.-258    	; 0xad14 <follow_path+0xbc>
    ae16:	1e c1       	rjmp	.+572    	; 0xb054 <follow_path+0x3fc>
    ae18:	19 82       	std	Y+1, r1	; 0x01
    ae1a:	98 cf       	rjmp	.-208    	; 0xad4c <follow_path+0xf4>
    ae1c:	2e 81       	ldd	r18, Y+6	; 0x06
    ae1e:	3f 81       	ldd	r19, Y+7	; 0x07
    ae20:	22 30       	cpi	r18, 0x02	; 2
    ae22:	31 05       	cpc	r19, r1
    ae24:	41 f4       	brne	.+16     	; 0xae36 <follow_path+0x1de>
    ae26:	d6 01       	movw	r26, r12
    ae28:	12 96       	adiw	r26, 0x02	; 2
    ae2a:	8d 91       	ld	r24, X+
    ae2c:	9c 91       	ld	r25, X
    ae2e:	13 97       	sbiw	r26, 0x03	; 3
    ae30:	8e 97       	sbiw	r24, 0x2e	; 46
    ae32:	09 f4       	brne	.+2      	; 0xae36 <follow_path+0x1de>
    ae34:	96 cf       	rjmp	.-212    	; 0xad62 <follow_path+0x10a>
    ae36:	ec 0d       	add	r30, r12
    ae38:	fd 1d       	adc	r31, r13
    ae3a:	0d c0       	rjmp	.+26     	; 0xae56 <follow_path+0x1fe>
    ae3c:	20 e2       	ldi	r18, 0x20	; 32
    ae3e:	a5 cf       	rjmp	.-182    	; 0xad8a <follow_path+0x132>
    ae40:	92 91       	ld	r25, -Z
    ae42:	82 91       	ld	r24, -Z
    ae44:	80 32       	cpi	r24, 0x20	; 32
    ae46:	91 05       	cpc	r25, r1
    ae48:	59 f4       	brne	.+22     	; 0xae60 <follow_path+0x208>
    ae4a:	2e 81       	ldd	r18, Y+6	; 0x06
    ae4c:	3f 81       	ldd	r19, Y+7	; 0x07
    ae4e:	21 50       	subi	r18, 0x01	; 1
    ae50:	31 09       	sbc	r19, r1
    ae52:	3f 83       	std	Y+7, r19	; 0x07
    ae54:	2e 83       	std	Y+6, r18	; 0x06
    ae56:	8e 81       	ldd	r24, Y+6	; 0x06
    ae58:	9f 81       	ldd	r25, Y+7	; 0x07
    ae5a:	89 2b       	or	r24, r25
    ae5c:	89 f7       	brne	.-30     	; 0xae40 <follow_path+0x1e8>
    ae5e:	02 c0       	rjmp	.+4      	; 0xae64 <follow_path+0x20c>
    ae60:	8e 97       	sbiw	r24, 0x2e	; 46
    ae62:	99 f3       	breq	.-26     	; 0xae4a <follow_path+0x1f2>
    ae64:	ae 80       	ldd	r10, Y+6	; 0x06
    ae66:	bf 80       	ldd	r11, Y+7	; 0x07
    ae68:	aa 0c       	add	r10, r10
    ae6a:	bb 1c       	adc	r11, r11
    ae6c:	ac 0c       	add	r10, r12
    ae6e:	bd 1c       	adc	r11, r13
    ae70:	d5 01       	movw	r26, r10
    ae72:	1d 92       	st	X+, r1
    ae74:	1c 92       	st	X, r1
    ae76:	ee 81       	ldd	r30, Y+6	; 0x06
    ae78:	ff 81       	ldd	r31, Y+7	; 0x07
    ae7a:	ef 2b       	or	r30, r31
    ae7c:	09 f4       	brne	.+2      	; 0xae80 <follow_path+0x228>
    ae7e:	ea c0       	rjmp	.+468    	; 0xb054 <follow_path+0x3fc>
    ae80:	4b e0       	ldi	r20, 0x0B	; 11
    ae82:	50 e0       	ldi	r21, 0x00	; 0
    ae84:	60 e2       	ldi	r22, 0x20	; 32
    ae86:	70 e0       	ldi	r23, 0x00	; 0
    ae88:	8a 81       	ldd	r24, Y+2	; 0x02
    ae8a:	9b 81       	ldd	r25, Y+3	; 0x03
    ae8c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    ae90:	80 e0       	ldi	r24, 0x00	; 0
    ae92:	90 e0       	ldi	r25, 0x00	; 0
    ae94:	d2 01       	movw	r26, r4
    ae96:	2d 91       	ld	r18, X+
    ae98:	3d 91       	ld	r19, X+
    ae9a:	2d 01       	movw	r4, r26
    ae9c:	20 32       	cpi	r18, 0x20	; 32
    ae9e:	31 05       	cpc	r19, r1
    aea0:	11 f4       	brne	.+4      	; 0xaea6 <follow_path+0x24e>
    aea2:	01 96       	adiw	r24, 0x01	; 1
    aea4:	f7 cf       	rjmp	.-18     	; 0xae94 <follow_path+0x23c>
    aea6:	2e 32       	cpi	r18, 0x2E	; 46
    aea8:	31 05       	cpc	r19, r1
    aeaa:	d9 f3       	breq	.-10     	; 0xaea2 <follow_path+0x24a>
    aeac:	00 97       	sbiw	r24, 0x00	; 0
    aeae:	19 f0       	breq	.+6      	; 0xaeb6 <follow_path+0x25e>
    aeb0:	b9 81       	ldd	r27, Y+1	; 0x01
    aeb2:	b3 60       	ori	r27, 0x03	; 3
    aeb4:	b9 83       	std	Y+1, r27	; 0x01
    aeb6:	f5 01       	movw	r30, r10
    aeb8:	32 91       	ld	r19, -Z
    aeba:	22 91       	ld	r18, -Z
    aebc:	2e 32       	cpi	r18, 0x2E	; 46
    aebe:	31 05       	cpc	r19, r1
    aec0:	41 f0       	breq	.+16     	; 0xaed2 <follow_path+0x27a>
    aec2:	2e 81       	ldd	r18, Y+6	; 0x06
    aec4:	3f 81       	ldd	r19, Y+7	; 0x07
    aec6:	21 50       	subi	r18, 0x01	; 1
    aec8:	31 09       	sbc	r19, r1
    aeca:	3f 83       	std	Y+7, r19	; 0x07
    aecc:	2e 83       	std	Y+6, r18	; 0x06
    aece:	23 2b       	or	r18, r19
    aed0:	99 f7       	brne	.-26     	; 0xaeb8 <follow_path+0x260>
    aed2:	48 e0       	ldi	r20, 0x08	; 8
    aed4:	a4 2e       	mov	r10, r20
    aed6:	b1 2c       	mov	r11, r1
    aed8:	81 2c       	mov	r8, r1
    aeda:	91 2c       	mov	r9, r1
    aedc:	41 2c       	mov	r4, r1
    aede:	3c 01       	movw	r6, r24
    aee0:	3f ef       	ldi	r19, 0xFF	; 255
    aee2:	63 1a       	sub	r6, r19
    aee4:	73 0a       	sbc	r7, r19
    aee6:	88 0f       	add	r24, r24
    aee8:	99 1f       	adc	r25, r25
    aeea:	f6 01       	movw	r30, r12
    aeec:	e8 0f       	add	r30, r24
    aeee:	f9 1f       	adc	r31, r25
    aef0:	80 81       	ld	r24, Z
    aef2:	91 81       	ldd	r25, Z+1	; 0x01
    aef4:	00 97       	sbiw	r24, 0x00	; 0
    aef6:	09 f4       	brne	.+2      	; 0xaefa <follow_path+0x2a2>
    aef8:	75 c0       	rjmp	.+234    	; 0xafe4 <follow_path+0x38c>
    aefa:	80 32       	cpi	r24, 0x20	; 32
    aefc:	91 05       	cpc	r25, r1
    aefe:	41 f0       	breq	.+16     	; 0xaf10 <follow_path+0x2b8>
    af00:	8e 32       	cpi	r24, 0x2E	; 46
    af02:	91 05       	cpc	r25, r1
    af04:	51 f4       	brne	.+20     	; 0xaf1a <follow_path+0x2c2>
    af06:	8e 81       	ldd	r24, Y+6	; 0x06
    af08:	9f 81       	ldd	r25, Y+7	; 0x07
    af0a:	68 16       	cp	r6, r24
    af0c:	79 06       	cpc	r7, r25
    af0e:	71 f0       	breq	.+28     	; 0xaf2c <follow_path+0x2d4>
    af10:	99 81       	ldd	r25, Y+1	; 0x01
    af12:	93 60       	ori	r25, 0x03	; 3
    af14:	99 83       	std	Y+1, r25	; 0x01
    af16:	c3 01       	movw	r24, r6
    af18:	e2 cf       	rjmp	.-60     	; 0xaede <follow_path+0x286>
    af1a:	8a 14       	cp	r8, r10
    af1c:	9b 04       	cpc	r9, r11
    af1e:	50 f4       	brcc	.+20     	; 0xaf34 <follow_path+0x2dc>
    af20:	ae 81       	ldd	r26, Y+6	; 0x06
    af22:	bf 81       	ldd	r27, Y+7	; 0x07
    af24:	6a 16       	cp	r6, r26
    af26:	7b 06       	cpc	r7, r27
    af28:	49 f5       	brne	.+82     	; 0xaf7c <follow_path+0x324>
    af2a:	ad c0       	rjmp	.+346    	; 0xb086 <follow_path+0x42e>
    af2c:	8a 14       	cp	r8, r10
    af2e:	9b 04       	cpc	r9, r11
    af30:	08 f4       	brcc	.+2      	; 0xaf34 <follow_path+0x2dc>
    af32:	a9 c0       	rjmp	.+338    	; 0xb086 <follow_path+0x42e>
    af34:	bb e0       	ldi	r27, 0x0B	; 11
    af36:	ab 16       	cp	r10, r27
    af38:	b1 04       	cpc	r11, r1
    af3a:	39 f4       	brne	.+14     	; 0xaf4a <follow_path+0x2f2>
    af3c:	e9 81       	ldd	r30, Y+1	; 0x01
    af3e:	e3 60       	ori	r30, 0x03	; 3
    af40:	e9 83       	std	Y+1, r30	; 0x01
    af42:	2b e0       	ldi	r18, 0x0B	; 11
    af44:	a2 2e       	mov	r10, r18
    af46:	b1 2c       	mov	r11, r1
    af48:	4d c0       	rjmp	.+154    	; 0xafe4 <follow_path+0x38c>
    af4a:	2e 81       	ldd	r18, Y+6	; 0x06
    af4c:	3f 81       	ldd	r19, Y+7	; 0x07
    af4e:	62 16       	cp	r6, r18
    af50:	73 06       	cpc	r7, r19
    af52:	49 f0       	breq	.+18     	; 0xaf66 <follow_path+0x30e>
    af54:	39 81       	ldd	r19, Y+1	; 0x01
    af56:	33 60       	ori	r19, 0x03	; 3
    af58:	39 83       	std	Y+1, r19	; 0x01
    af5a:	8e 81       	ldd	r24, Y+6	; 0x06
    af5c:	9f 81       	ldd	r25, Y+7	; 0x07
    af5e:	86 15       	cp	r24, r6
    af60:	97 05       	cpc	r25, r7
    af62:	08 f4       	brcc	.+2      	; 0xaf66 <follow_path+0x30e>
    af64:	3f c0       	rjmp	.+126    	; 0xafe4 <follow_path+0x38c>
    af66:	44 0c       	add	r4, r4
    af68:	44 0c       	add	r4, r4
    af6a:	6e 80       	ldd	r6, Y+6	; 0x06
    af6c:	7f 80       	ldd	r7, Y+7	; 0x07
    af6e:	8b e0       	ldi	r24, 0x0B	; 11
    af70:	a8 2e       	mov	r10, r24
    af72:	b1 2c       	mov	r11, r1
    af74:	98 e0       	ldi	r25, 0x08	; 8
    af76:	89 2e       	mov	r8, r25
    af78:	91 2c       	mov	r9, r1
    af7a:	cd cf       	rjmp	.-102    	; 0xaf16 <follow_path+0x2be>
    af7c:	80 38       	cpi	r24, 0x80	; 128
    af7e:	91 05       	cpc	r25, r1
    af80:	80 f0       	brcs	.+32     	; 0xafa2 <follow_path+0x34a>
    af82:	60 e0       	ldi	r22, 0x00	; 0
    af84:	70 e0       	ldi	r23, 0x00	; 0
    af86:	0e 94 fa 6d 	call	0xdbf4	; 0xdbf4 <ff_convert>
    af8a:	00 97       	sbiw	r24, 0x00	; 0
    af8c:	29 f0       	breq	.+10     	; 0xaf98 <follow_path+0x340>
    af8e:	fc 01       	movw	r30, r24
    af90:	e2 5b       	subi	r30, 0xB2	; 178
    af92:	fd 4f       	sbci	r31, 0xFD	; 253
    af94:	80 81       	ld	r24, Z
    af96:	90 e0       	ldi	r25, 0x00	; 0
    af98:	a9 81       	ldd	r26, Y+1	; 0x01
    af9a:	a2 60       	ori	r26, 0x02	; 2
    af9c:	a9 83       	std	Y+1, r26	; 0x01
    af9e:	00 97       	sbiw	r24, 0x00	; 0
    afa0:	49 f0       	breq	.+18     	; 0xafb4 <follow_path+0x35c>
    afa2:	e1 ee       	ldi	r30, 0xE1	; 225
    afa4:	f7 e0       	ldi	r31, 0x07	; 7
    afa6:	21 91       	ld	r18, Z+
    afa8:	22 23       	and	r18, r18
    afaa:	51 f0       	breq	.+20     	; 0xafc0 <follow_path+0x368>
    afac:	30 e0       	ldi	r19, 0x00	; 0
    afae:	82 17       	cp	r24, r18
    afb0:	93 07       	cpc	r25, r19
    afb2:	c9 f7       	brne	.-14     	; 0xafa6 <follow_path+0x34e>
    afb4:	b9 81       	ldd	r27, Y+1	; 0x01
    afb6:	b3 60       	ori	r27, 0x03	; 3
    afb8:	b9 83       	std	Y+1, r27	; 0x01
    afba:	8f e5       	ldi	r24, 0x5F	; 95
    afbc:	90 e0       	ldi	r25, 0x00	; 0
    afbe:	09 c0       	rjmp	.+18     	; 0xafd2 <follow_path+0x37a>
    afc0:	9c 01       	movw	r18, r24
    afc2:	21 54       	subi	r18, 0x41	; 65
    afc4:	31 09       	sbc	r19, r1
    afc6:	2a 31       	cpi	r18, 0x1A	; 26
    afc8:	31 05       	cpc	r19, r1
    afca:	c8 f5       	brcc	.+114    	; 0xb03e <follow_path+0x3e6>
    afcc:	e4 2d       	mov	r30, r4
    afce:	e2 60       	ori	r30, 0x02	; 2
    afd0:	4e 2e       	mov	r4, r30
    afd2:	f8 01       	movw	r30, r16
    afd4:	e8 0d       	add	r30, r8
    afd6:	f9 1d       	adc	r31, r9
    afd8:	84 8f       	std	Z+28, r24	; 0x1c
    afda:	94 01       	movw	r18, r8
    afdc:	2f 5f       	subi	r18, 0xFF	; 255
    afde:	3f 4f       	sbci	r19, 0xFF	; 255
    afe0:	49 01       	movw	r8, r18
    afe2:	99 cf       	rjmp	.-206    	; 0xaf16 <follow_path+0x2be>
    afe4:	d8 01       	movw	r26, r16
    afe6:	5c 96       	adiw	r26, 0x1c	; 28
    afe8:	8c 91       	ld	r24, X
    afea:	5c 97       	sbiw	r26, 0x1c	; 28
    afec:	85 3e       	cpi	r24, 0xE5	; 229
    afee:	19 f4       	brne	.+6      	; 0xaff6 <follow_path+0x39e>
    aff0:	e5 e0       	ldi	r30, 0x05	; 5
    aff2:	5c 96       	adiw	r26, 0x1c	; 28
    aff4:	ec 93       	st	X, r30
    aff6:	f8 e0       	ldi	r31, 0x08	; 8
    aff8:	af 16       	cp	r10, r31
    affa:	b1 04       	cpc	r11, r1
    affc:	11 f4       	brne	.+4      	; 0xb002 <follow_path+0x3aa>
    affe:	44 0c       	add	r4, r4
    b000:	44 0c       	add	r4, r4
    b002:	84 2d       	mov	r24, r4
    b004:	8c 70       	andi	r24, 0x0C	; 12
    b006:	8c 30       	cpi	r24, 0x0C	; 12
    b008:	21 f0       	breq	.+8      	; 0xb012 <follow_path+0x3ba>
    b00a:	94 2d       	mov	r25, r4
    b00c:	93 70       	andi	r25, 0x03	; 3
    b00e:	93 30       	cpi	r25, 0x03	; 3
    b010:	19 f4       	brne	.+6      	; 0xb018 <follow_path+0x3c0>
    b012:	29 81       	ldd	r18, Y+1	; 0x01
    b014:	22 60       	ori	r18, 0x02	; 2
    b016:	29 83       	std	Y+1, r18	; 0x01
    b018:	39 81       	ldd	r19, Y+1	; 0x01
    b01a:	31 fd       	sbrc	r19, 1
    b01c:	0b c0       	rjmp	.+22     	; 0xb034 <follow_path+0x3dc>
    b01e:	94 2d       	mov	r25, r4
    b020:	93 70       	andi	r25, 0x03	; 3
    b022:	91 30       	cpi	r25, 0x01	; 1
    b024:	11 f4       	brne	.+4      	; 0xb02a <follow_path+0x3d2>
    b026:	30 61       	ori	r19, 0x10	; 16
    b028:	39 83       	std	Y+1, r19	; 0x01
    b02a:	84 30       	cpi	r24, 0x04	; 4
    b02c:	19 f4       	brne	.+6      	; 0xb034 <follow_path+0x3dc>
    b02e:	89 81       	ldd	r24, Y+1	; 0x01
    b030:	88 60       	ori	r24, 0x08	; 8
    b032:	89 83       	std	Y+1, r24	; 0x01
    b034:	e9 81       	ldd	r30, Y+1	; 0x01
    b036:	d8 01       	movw	r26, r16
    b038:	97 96       	adiw	r26, 0x27	; 39
    b03a:	ec 93       	st	X, r30
    b03c:	b0 ce       	rjmp	.-672    	; 0xad9e <follow_path+0x146>
    b03e:	9c 01       	movw	r18, r24
    b040:	21 56       	subi	r18, 0x61	; 97
    b042:	31 09       	sbc	r19, r1
    b044:	2a 31       	cpi	r18, 0x1A	; 26
    b046:	31 05       	cpc	r19, r1
    b048:	20 f6       	brcc	.-120    	; 0xafd2 <follow_path+0x37a>
    b04a:	f4 2d       	mov	r31, r4
    b04c:	f1 60       	ori	r31, 0x01	; 1
    b04e:	4f 2e       	mov	r4, r31
    b050:	80 97       	sbiw	r24, 0x20	; 32
    b052:	bf cf       	rjmp	.-130    	; 0xafd2 <follow_path+0x37a>
    b054:	86 e0       	ldi	r24, 0x06	; 6
    b056:	90 e0       	ldi	r25, 0x00	; 0
    b058:	1c c0       	rjmp	.+56     	; 0xb092 <follow_path+0x43a>
    b05a:	84 30       	cpi	r24, 0x04	; 4
    b05c:	91 05       	cpc	r25, r1
    b05e:	c9 f4       	brne	.+50     	; 0xb092 <follow_path+0x43a>
    b060:	32 2f       	mov	r19, r18
    b062:	34 70       	andi	r19, 0x04	; 4
    b064:	25 ff       	sbrs	r18, 5
    b066:	0a c0       	rjmp	.+20     	; 0xb07c <follow_path+0x424>
    b068:	33 23       	and	r19, r19
    b06a:	09 f4       	brne	.+2      	; 0xb06e <follow_path+0x416>
    b06c:	b6 ce       	rjmp	.-660    	; 0xadda <follow_path+0x182>
    b06e:	80 e8       	ldi	r24, 0x80	; 128
    b070:	d8 01       	movw	r26, r16
    b072:	97 96       	adiw	r26, 0x27	; 39
    b074:	8c 93       	st	X, r24
    b076:	80 e0       	ldi	r24, 0x00	; 0
    b078:	90 e0       	ldi	r25, 0x00	; 0
    b07a:	0b c0       	rjmp	.+22     	; 0xb092 <follow_path+0x43a>
    b07c:	31 11       	cpse	r19, r1
    b07e:	09 c0       	rjmp	.+18     	; 0xb092 <follow_path+0x43a>
    b080:	85 e0       	ldi	r24, 0x05	; 5
    b082:	90 e0       	ldi	r25, 0x00	; 0
    b084:	06 c0       	rjmp	.+12     	; 0xb092 <follow_path+0x43a>
    b086:	bb e0       	ldi	r27, 0x0B	; 11
    b088:	ab 16       	cp	r10, r27
    b08a:	b1 04       	cpc	r11, r1
    b08c:	09 f0       	breq	.+2      	; 0xb090 <follow_path+0x438>
    b08e:	6b cf       	rjmp	.-298    	; 0xaf66 <follow_path+0x30e>
    b090:	55 cf       	rjmp	.-342    	; 0xaf3c <follow_path+0x2e4>
    b092:	27 96       	adiw	r28, 0x07	; 7
    b094:	e2 e1       	ldi	r30, 0x12	; 18
    b096:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000b09a <f_mount>:
    b09a:	a6 e0       	ldi	r26, 0x06	; 6
    b09c:	b0 e0       	ldi	r27, 0x00	; 0
    b09e:	e3 e5       	ldi	r30, 0x53	; 83
    b0a0:	f8 e5       	ldi	r31, 0x58	; 88
    b0a2:	0c 94 2a eb 	jmp	0x1d654	; 0x1d654 <__prologue_saves__+0x1e>
    b0a6:	9c 83       	std	Y+4, r25	; 0x04
    b0a8:	8b 83       	std	Y+3, r24	; 0x03
    b0aa:	7e 83       	std	Y+6, r23	; 0x06
    b0ac:	6d 83       	std	Y+5, r22	; 0x05
    b0ae:	14 2f       	mov	r17, r20
    b0b0:	7a 83       	std	Y+2, r23	; 0x02
    b0b2:	69 83       	std	Y+1, r22	; 0x01
    b0b4:	ce 01       	movw	r24, r28
    b0b6:	01 96       	adiw	r24, 0x01	; 1
    b0b8:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <get_ldnumber>
    b0bc:	97 fd       	sbrc	r25, 7
    b0be:	22 c0       	rjmp	.+68     	; 0xb104 <f_mount+0x6a>
    b0c0:	88 0f       	add	r24, r24
    b0c2:	99 1f       	adc	r25, r25
    b0c4:	fc 01       	movw	r30, r24
    b0c6:	e6 5d       	subi	r30, 0xD6	; 214
    b0c8:	f7 4e       	sbci	r31, 0xE7	; 231
    b0ca:	01 90       	ld	r0, Z+
    b0cc:	f0 81       	ld	r31, Z
    b0ce:	e0 2d       	mov	r30, r0
    b0d0:	30 97       	sbiw	r30, 0x00	; 0
    b0d2:	09 f0       	breq	.+2      	; 0xb0d6 <f_mount+0x3c>
    b0d4:	10 82       	st	Z, r1
    b0d6:	eb 81       	ldd	r30, Y+3	; 0x03
    b0d8:	fc 81       	ldd	r31, Y+4	; 0x04
    b0da:	30 97       	sbiw	r30, 0x00	; 0
    b0dc:	09 f0       	breq	.+2      	; 0xb0e0 <f_mount+0x46>
    b0de:	10 82       	st	Z, r1
    b0e0:	dc 01       	movw	r26, r24
    b0e2:	a6 5d       	subi	r26, 0xD6	; 214
    b0e4:	b7 4e       	sbci	r27, 0xE7	; 231
    b0e6:	ed 93       	st	X+, r30
    b0e8:	fc 93       	st	X, r31
    b0ea:	ef 2b       	or	r30, r31
    b0ec:	71 f0       	breq	.+28     	; 0xb10a <f_mount+0x70>
    b0ee:	11 30       	cpi	r17, 0x01	; 1
    b0f0:	61 f4       	brne	.+24     	; 0xb10a <f_mount+0x70>
    b0f2:	40 e0       	ldi	r20, 0x00	; 0
    b0f4:	be 01       	movw	r22, r28
    b0f6:	6d 5f       	subi	r22, 0xFD	; 253
    b0f8:	7f 4f       	sbci	r23, 0xFF	; 255
    b0fa:	ce 01       	movw	r24, r28
    b0fc:	05 96       	adiw	r24, 0x05	; 5
    b0fe:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    b102:	05 c0       	rjmp	.+10     	; 0xb10e <f_mount+0x74>
    b104:	8b e0       	ldi	r24, 0x0B	; 11
    b106:	90 e0       	ldi	r25, 0x00	; 0
    b108:	02 c0       	rjmp	.+4      	; 0xb10e <f_mount+0x74>
    b10a:	80 e0       	ldi	r24, 0x00	; 0
    b10c:	90 e0       	ldi	r25, 0x00	; 0
    b10e:	26 96       	adiw	r28, 0x06	; 6
    b110:	e3 e0       	ldi	r30, 0x03	; 3
    b112:	0c 94 46 eb 	jmp	0x1d68c	; 0x1d68c <__epilogue_restores__+0x1e>

0000b116 <f_open>:
    b116:	2f 92       	push	r2
    b118:	3f 92       	push	r3
    b11a:	4f 92       	push	r4
    b11c:	5f 92       	push	r5
    b11e:	6f 92       	push	r6
    b120:	7f 92       	push	r7
    b122:	8f 92       	push	r8
    b124:	9f 92       	push	r9
    b126:	af 92       	push	r10
    b128:	bf 92       	push	r11
    b12a:	df 92       	push	r13
    b12c:	ef 92       	push	r14
    b12e:	ff 92       	push	r15
    b130:	0f 93       	push	r16
    b132:	1f 93       	push	r17
    b134:	cf 93       	push	r28
    b136:	df 93       	push	r29
    b138:	cd b7       	in	r28, 0x3d	; 61
    b13a:	de b7       	in	r29, 0x3e	; 62
    b13c:	e6 97       	sbiw	r28, 0x36	; 54
    b13e:	0f b6       	in	r0, 0x3f	; 63
    b140:	f8 94       	cli
    b142:	de bf       	out	0x3e, r29	; 62
    b144:	0f be       	out	0x3f, r0	; 63
    b146:	cd bf       	out	0x3d, r28	; 61
    b148:	7a ab       	std	Y+50, r23	; 0x32
    b14a:	69 ab       	std	Y+49, r22	; 0x31
    b14c:	00 97       	sbiw	r24, 0x00	; 0
    b14e:	09 f4       	brne	.+2      	; 0xb152 <f_open+0x3c>
    b150:	b0 c1       	rjmp	.+864    	; 0xb4b2 <f_open+0x39c>
    b152:	94 2e       	mov	r9, r20
    b154:	7c 01       	movw	r14, r24
    b156:	24 2f       	mov	r18, r20
    b158:	2f 73       	andi	r18, 0x3F	; 63
    b15a:	d2 2e       	mov	r13, r18
    b15c:	42 2f       	mov	r20, r18
    b15e:	be 01       	movw	r22, r28
    b160:	61 5d       	subi	r22, 0xD1	; 209
    b162:	7f 4f       	sbci	r23, 0xFF	; 255
    b164:	ce 01       	movw	r24, r28
    b166:	c1 96       	adiw	r24, 0x31	; 49
    b168:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    b16c:	00 97       	sbiw	r24, 0x00	; 0
    b16e:	09 f0       	breq	.+2      	; 0xb172 <f_open+0x5c>
    b170:	9a c1       	rjmp	.+820    	; 0xb4a6 <f_open+0x390>
    b172:	8f a5       	ldd	r24, Y+47	; 0x2f
    b174:	98 a9       	ldd	r25, Y+48	; 0x30
    b176:	9a 83       	std	Y+2, r25	; 0x02
    b178:	89 83       	std	Y+1, r24	; 0x01
    b17a:	80 e0       	ldi	r24, 0x00	; 0
    b17c:	92 e0       	ldi	r25, 0x02	; 2
    b17e:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    b182:	5c 01       	movw	r10, r24
    b184:	00 97       	sbiw	r24, 0x00	; 0
    b186:	09 f4       	brne	.+2      	; 0xb18a <f_open+0x74>
    b188:	96 c1       	rjmp	.+812    	; 0xb4b6 <f_open+0x3a0>
    b18a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b18c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b18e:	94 87       	std	Z+12, r25	; 0x0c
    b190:	83 87       	std	Z+11, r24	; 0x0b
    b192:	69 a9       	ldd	r22, Y+49	; 0x31
    b194:	7a a9       	ldd	r23, Y+50	; 0x32
    b196:	ce 01       	movw	r24, r28
    b198:	01 96       	adiw	r24, 0x01	; 1
    b19a:	5e dd       	rcall	.-1348   	; 0xac58 <follow_path>
    b19c:	8c 01       	movw	r16, r24
    b19e:	89 2b       	or	r24, r25
    b1a0:	29 f4       	brne	.+10     	; 0xb1ac <f_open+0x96>
    b1a2:	88 a5       	ldd	r24, Y+40	; 0x28
    b1a4:	87 ff       	sbrs	r24, 7
    b1a6:	02 c0       	rjmp	.+4      	; 0xb1ac <f_open+0x96>
    b1a8:	06 e0       	ldi	r16, 0x06	; 6
    b1aa:	10 e0       	ldi	r17, 0x00	; 0
    b1ac:	89 2d       	mov	r24, r9
    b1ae:	8c 71       	andi	r24, 0x1C	; 28
    b1b0:	09 f4       	brne	.+2      	; 0xb1b4 <f_open+0x9e>
    b1b2:	7e c0       	rjmp	.+252    	; 0xb2b0 <f_open+0x19a>
    b1b4:	01 15       	cp	r16, r1
    b1b6:	11 05       	cpc	r17, r1
    b1b8:	79 f0       	breq	.+30     	; 0xb1d8 <f_open+0xc2>
    b1ba:	04 30       	cpi	r16, 0x04	; 4
    b1bc:	11 05       	cpc	r17, r1
    b1be:	09 f0       	breq	.+2      	; 0xb1c2 <f_open+0xac>
    b1c0:	8a c1       	rjmp	.+788    	; 0xb4d6 <f_open+0x3c0>
    b1c2:	ce 01       	movw	r24, r28
    b1c4:	01 96       	adiw	r24, 0x01	; 1
    b1c6:	a4 db       	rcall	.-2232   	; 0xa910 <dir_register>
    b1c8:	8c 01       	movw	r16, r24
    b1ca:	89 2b       	or	r24, r25
    b1cc:	09 f0       	breq	.+2      	; 0xb1d0 <f_open+0xba>
    b1ce:	83 c1       	rjmp	.+774    	; 0xb4d6 <f_open+0x3c0>
    b1d0:	8d 2d       	mov	r24, r13
    b1d2:	88 60       	ori	r24, 0x08	; 8
    b1d4:	d8 2e       	mov	r13, r24
    b1d6:	06 c0       	rjmp	.+12     	; 0xb1e4 <f_open+0xce>
    b1d8:	8d 81       	ldd	r24, Y+5	; 0x05
    b1da:	81 71       	andi	r24, 0x11	; 17
    b1dc:	09 f0       	breq	.+2      	; 0xb1e0 <f_open+0xca>
    b1de:	79 c1       	rjmp	.+754    	; 0xb4d2 <f_open+0x3bc>
    b1e0:	92 fc       	sbrc	r9, 2
    b1e2:	6e c1       	rjmp	.+732    	; 0xb4c0 <f_open+0x3aa>
    b1e4:	d3 fe       	sbrs	r13, 3
    b1e6:	74 c0       	rjmp	.+232    	; 0xb2d0 <f_open+0x1ba>
    b1e8:	0e 94 04 75 	call	0xea08	; 0xea08 <get_fattime>
    b1ec:	2b 01       	movw	r4, r22
    b1ee:	3c 01       	movw	r6, r24
    b1f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b1f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b1f4:	b3 01       	movw	r22, r6
    b1f6:	a2 01       	movw	r20, r4
    b1f8:	0e 96       	adiw	r24, 0x0e	; 14
    b1fa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    b1fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b202:	b3 01       	movw	r22, r6
    b204:	a2 01       	movw	r20, r4
    b206:	46 96       	adiw	r24, 0x16	; 22
    b208:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    b20c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b20e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b210:	80 e2       	ldi	r24, 0x20	; 32
    b212:	83 87       	std	Z+11, r24	; 0x0b
    b214:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b216:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b218:	8f a4       	ldd	r8, Y+47	; 0x2f
    b21a:	98 a8       	ldd	r9, Y+48	; 0x30
    b21c:	b8 01       	movw	r22, r16
    b21e:	d4 01       	movw	r26, r8
    b220:	8c 91       	ld	r24, X
    b222:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    b226:	2b 01       	movw	r4, r22
    b228:	3c 01       	movw	r6, r24
    b22a:	f8 01       	movw	r30, r16
    b22c:	12 8e       	std	Z+26, r1	; 0x1a
    b22e:	13 8e       	std	Z+27, r1	; 0x1b
    b230:	d4 01       	movw	r26, r8
    b232:	8c 91       	ld	r24, X
    b234:	83 30       	cpi	r24, 0x03	; 3
    b236:	11 f4       	brne	.+4      	; 0xb23c <f_open+0x126>
    b238:	14 8a       	std	Z+20, r1	; 0x14
    b23a:	15 8a       	std	Z+21, r1	; 0x15
    b23c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b23e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b240:	14 8e       	std	Z+28, r1	; 0x1c
    b242:	15 8e       	std	Z+29, r1	; 0x1d
    b244:	16 8e       	std	Z+30, r1	; 0x1e
    b246:	17 8e       	std	Z+31, r1	; 0x1f
    b248:	81 e0       	ldi	r24, 0x01	; 1
    b24a:	f4 01       	movw	r30, r8
    b24c:	83 83       	std	Z+3, r24	; 0x03
    b24e:	41 14       	cp	r4, r1
    b250:	51 04       	cpc	r5, r1
    b252:	61 04       	cpc	r6, r1
    b254:	71 04       	cpc	r7, r1
    b256:	c9 f1       	breq	.+114    	; 0xb2ca <f_open+0x1b4>
    b258:	81 a9       	ldd	r24, Z+49	; 0x31
    b25a:	92 a9       	ldd	r25, Z+50	; 0x32
    b25c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b25e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b260:	8b ab       	std	Y+51, r24	; 0x33
    b262:	9c ab       	std	Y+52, r25	; 0x34
    b264:	ad ab       	std	Y+53, r26	; 0x35
    b266:	be ab       	std	Y+54, r27	; 0x36
    b268:	00 e0       	ldi	r16, 0x00	; 0
    b26a:	10 e0       	ldi	r17, 0x00	; 0
    b26c:	98 01       	movw	r18, r16
    b26e:	b3 01       	movw	r22, r6
    b270:	a2 01       	movw	r20, r4
    b272:	ce 01       	movw	r24, r28
    b274:	01 96       	adiw	r24, 0x01	; 1
    b276:	0e 94 90 4f 	call	0x9f20	; 0x9f20 <remove_chain>
    b27a:	8c 01       	movw	r16, r24
    b27c:	89 2b       	or	r24, r25
    b27e:	09 f0       	breq	.+2      	; 0xb282 <f_open+0x16c>
    b280:	2a c1       	rjmp	.+596    	; 0xb4d6 <f_open+0x3c0>
    b282:	4b a9       	ldd	r20, Y+51	; 0x33
    b284:	5c a9       	ldd	r21, Y+52	; 0x34
    b286:	6d a9       	ldd	r22, Y+53	; 0x35
    b288:	7e a9       	ldd	r23, Y+54	; 0x36
    b28a:	8f a5       	ldd	r24, Y+47	; 0x2f
    b28c:	98 a9       	ldd	r25, Y+48	; 0x30
    b28e:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    b292:	8c 01       	movw	r16, r24
    b294:	ef a5       	ldd	r30, Y+47	; 0x2f
    b296:	f8 a9       	ldd	r31, Y+48	; 0x30
    b298:	b1 e0       	ldi	r27, 0x01	; 1
    b29a:	4b 1a       	sub	r4, r27
    b29c:	51 08       	sbc	r5, r1
    b29e:	61 08       	sbc	r6, r1
    b2a0:	71 08       	sbc	r7, r1
    b2a2:	45 86       	std	Z+13, r4	; 0x0d
    b2a4:	56 86       	std	Z+14, r5	; 0x0e
    b2a6:	67 86       	std	Z+15, r6	; 0x0f
    b2a8:	70 8a       	std	Z+16, r7	; 0x10
    b2aa:	89 2b       	or	r24, r25
    b2ac:	61 f0       	breq	.+24     	; 0xb2c6 <f_open+0x1b0>
    b2ae:	13 c1       	rjmp	.+550    	; 0xb4d6 <f_open+0x3c0>
    b2b0:	01 15       	cp	r16, r1
    b2b2:	11 05       	cpc	r17, r1
    b2b4:	09 f0       	breq	.+2      	; 0xb2b8 <f_open+0x1a2>
    b2b6:	0f c1       	rjmp	.+542    	; 0xb4d6 <f_open+0x3c0>
    b2b8:	8d 81       	ldd	r24, Y+5	; 0x05
    b2ba:	84 fd       	sbrc	r24, 4
    b2bc:	07 c1       	rjmp	.+526    	; 0xb4cc <f_open+0x3b6>
    b2be:	91 fe       	sbrs	r9, 1
    b2c0:	02 c0       	rjmp	.+4      	; 0xb2c6 <f_open+0x1b0>
    b2c2:	80 fd       	sbrc	r24, 0
    b2c4:	06 c1       	rjmp	.+524    	; 0xb4d2 <f_open+0x3bc>
    b2c6:	d3 fe       	sbrs	r13, 3
    b2c8:	03 c0       	rjmp	.+6      	; 0xb2d0 <f_open+0x1ba>
    b2ca:	ed 2d       	mov	r30, r13
    b2cc:	e0 64       	ori	r30, 0x40	; 64
    b2ce:	de 2e       	mov	r13, r30
    b2d0:	0f a5       	ldd	r16, Y+47	; 0x2f
    b2d2:	18 a9       	ldd	r17, Y+48	; 0x30
    b2d4:	f8 01       	movw	r30, r16
    b2d6:	81 a9       	ldd	r24, Z+49	; 0x31
    b2d8:	92 a9       	ldd	r25, Z+50	; 0x32
    b2da:	a3 a9       	ldd	r26, Z+51	; 0x33
    b2dc:	b4 a9       	ldd	r27, Z+52	; 0x34
    b2de:	f7 01       	movw	r30, r14
    b2e0:	84 8f       	std	Z+28, r24	; 0x1c
    b2e2:	95 8f       	std	Z+29, r25	; 0x1d
    b2e4:	a6 8f       	std	Z+30, r26	; 0x1e
    b2e6:	b7 8f       	std	Z+31, r27	; 0x1f
    b2e8:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b2ea:	9c 8c       	ldd	r9, Y+28	; 0x1c
    b2ec:	91 a2       	std	Z+33, r9	; 0x21
    b2ee:	80 a2       	std	Z+32, r8	; 0x20
    b2f0:	b4 01       	movw	r22, r8
    b2f2:	d8 01       	movw	r26, r16
    b2f4:	8c 91       	ld	r24, X
    b2f6:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    b2fa:	f7 01       	movw	r30, r14
    b2fc:	66 83       	std	Z+6, r22	; 0x06
    b2fe:	77 83       	std	Z+7, r23	; 0x07
    b300:	80 87       	std	Z+8, r24	; 0x08
    b302:	91 87       	std	Z+9, r25	; 0x09
    b304:	c4 01       	movw	r24, r8
    b306:	4c 96       	adiw	r24, 0x1c	; 28
    b308:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    b30c:	d7 01       	movw	r26, r14
    b30e:	1a 96       	adiw	r26, 0x0a	; 10
    b310:	6d 93       	st	X+, r22
    b312:	7d 93       	st	X+, r23
    b314:	8d 93       	st	X+, r24
    b316:	9c 93       	st	X, r25
    b318:	1d 97       	sbiw	r26, 0x0d	; 13
    b31a:	93 96       	adiw	r26, 0x23	; 35
    b31c:	1c 92       	st	X, r1
    b31e:	1e 92       	st	-X, r1
    b320:	92 97       	sbiw	r26, 0x22	; 34
    b322:	11 96       	adiw	r26, 0x01	; 1
    b324:	1c 93       	st	X, r17
    b326:	0e 93       	st	-X, r16
    b328:	f8 01       	movw	r30, r16
    b32a:	85 81       	ldd	r24, Z+5	; 0x05
    b32c:	96 81       	ldd	r25, Z+6	; 0x06
    b32e:	13 96       	adiw	r26, 0x03	; 3
    b330:	9c 93       	st	X, r25
    b332:	8e 93       	st	-X, r24
    b334:	12 97       	sbiw	r26, 0x02	; 2
    b336:	1e 96       	adiw	r26, 0x0e	; 14
    b338:	dc 92       	st	X, r13
    b33a:	1e 97       	sbiw	r26, 0x0e	; 14
    b33c:	1f 96       	adiw	r26, 0x0f	; 15
    b33e:	1c 92       	st	X, r1
    b340:	1f 97       	sbiw	r26, 0x0f	; 15
    b342:	58 96       	adiw	r26, 0x18	; 24
    b344:	1d 92       	st	X+, r1
    b346:	1d 92       	st	X+, r1
    b348:	1d 92       	st	X+, r1
    b34a:	1c 92       	st	X, r1
    b34c:	5b 97       	sbiw	r26, 0x1b	; 27
    b34e:	f7 01       	movw	r30, r14
    b350:	10 8a       	std	Z+16, r1	; 0x10
    b352:	11 8a       	std	Z+17, r1	; 0x11
    b354:	12 8a       	std	Z+18, r1	; 0x12
    b356:	13 8a       	std	Z+19, r1	; 0x13
    b358:	c7 01       	movw	r24, r14
    b35a:	84 96       	adiw	r24, 0x24	; 36
    b35c:	9c ab       	std	Y+52, r25	; 0x34
    b35e:	8b ab       	std	Y+51, r24	; 0x33
    b360:	40 e0       	ldi	r20, 0x00	; 0
    b362:	52 e0       	ldi	r21, 0x02	; 2
    b364:	60 e0       	ldi	r22, 0x00	; 0
    b366:	70 e0       	ldi	r23, 0x00	; 0
    b368:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    b36c:	d5 fc       	sbrc	r13, 5
    b36e:	03 c0       	rjmp	.+6      	; 0xb376 <f_open+0x260>
    b370:	00 e0       	ldi	r16, 0x00	; 0
    b372:	10 e0       	ldi	r17, 0x00	; 0
    b374:	91 c0       	rjmp	.+290    	; 0xb498 <f_open+0x382>
    b376:	d7 01       	movw	r26, r14
    b378:	1a 96       	adiw	r26, 0x0a	; 10
    b37a:	2d 90       	ld	r2, X+
    b37c:	3d 90       	ld	r3, X+
    b37e:	4d 90       	ld	r4, X+
    b380:	5c 90       	ld	r5, X
    b382:	1d 97       	sbiw	r26, 0x0d	; 13
    b384:	21 14       	cp	r2, r1
    b386:	31 04       	cpc	r3, r1
    b388:	41 04       	cpc	r4, r1
    b38a:	51 04       	cpc	r5, r1
    b38c:	89 f3       	breq	.-30     	; 0xb370 <f_open+0x25a>
    b38e:	f7 01       	movw	r30, r14
    b390:	20 8a       	std	Z+16, r2	; 0x10
    b392:	31 8a       	std	Z+17, r3	; 0x11
    b394:	42 8a       	std	Z+18, r4	; 0x12
    b396:	53 8a       	std	Z+19, r5	; 0x13
    b398:	ef a5       	ldd	r30, Y+47	; 0x2f
    b39a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b39c:	81 85       	ldd	r24, Z+9	; 0x09
    b39e:	92 85       	ldd	r25, Z+10	; 0x0a
    b3a0:	a0 e0       	ldi	r26, 0x00	; 0
    b3a2:	b0 e0       	ldi	r27, 0x00	; 0
    b3a4:	3c 01       	movw	r6, r24
    b3a6:	4d 01       	movw	r8, r26
    b3a8:	59 e0       	ldi	r21, 0x09	; 9
    b3aa:	66 0c       	add	r6, r6
    b3ac:	77 1c       	adc	r7, r7
    b3ae:	88 1c       	adc	r8, r8
    b3b0:	99 1c       	adc	r9, r9
    b3b2:	5a 95       	dec	r21
    b3b4:	d1 f7       	brne	.-12     	; 0xb3aa <f_open+0x294>
    b3b6:	d7 01       	movw	r26, r14
    b3b8:	16 96       	adiw	r26, 0x06	; 6
    b3ba:	4d 91       	ld	r20, X+
    b3bc:	5d 91       	ld	r21, X+
    b3be:	6d 91       	ld	r22, X+
    b3c0:	7c 91       	ld	r23, X
    b3c2:	19 97       	sbiw	r26, 0x09	; 9
    b3c4:	62 14       	cp	r6, r2
    b3c6:	73 04       	cpc	r7, r3
    b3c8:	84 04       	cpc	r8, r4
    b3ca:	95 04       	cpc	r9, r5
    b3cc:	f0 f4       	brcc	.+60     	; 0xb40a <f_open+0x2f4>
    b3ce:	f7 01       	movw	r30, r14
    b3d0:	80 81       	ld	r24, Z
    b3d2:	91 81       	ldd	r25, Z+1	; 0x01
    b3d4:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <get_fat.isra.7>
    b3d8:	ab 01       	movw	r20, r22
    b3da:	bc 01       	movw	r22, r24
    b3dc:	d2 01       	movw	r26, r4
    b3de:	c1 01       	movw	r24, r2
    b3e0:	86 19       	sub	r24, r6
    b3e2:	97 09       	sbc	r25, r7
    b3e4:	a8 09       	sbc	r26, r8
    b3e6:	b9 09       	sbc	r27, r9
    b3e8:	1c 01       	movw	r2, r24
    b3ea:	2d 01       	movw	r4, r26
    b3ec:	42 30       	cpi	r20, 0x02	; 2
    b3ee:	51 05       	cpc	r21, r1
    b3f0:	61 05       	cpc	r22, r1
    b3f2:	71 05       	cpc	r23, r1
    b3f4:	08 f4       	brcc	.+2      	; 0xb3f8 <f_open+0x2e2>
    b3f6:	67 c0       	rjmp	.+206    	; 0xb4c6 <f_open+0x3b0>
    b3f8:	4f 3f       	cpi	r20, 0xFF	; 255
    b3fa:	ff ef       	ldi	r31, 0xFF	; 255
    b3fc:	5f 07       	cpc	r21, r31
    b3fe:	6f 07       	cpc	r22, r31
    b400:	7f 07       	cpc	r23, r31
    b402:	01 f7       	brne	.-64     	; 0xb3c4 <f_open+0x2ae>
    b404:	01 e0       	ldi	r16, 0x01	; 1
    b406:	10 e0       	ldi	r17, 0x00	; 0
    b408:	02 c0       	rjmp	.+4      	; 0xb40e <f_open+0x2f8>
    b40a:	00 e0       	ldi	r16, 0x00	; 0
    b40c:	10 e0       	ldi	r17, 0x00	; 0
    b40e:	d7 01       	movw	r26, r14
    b410:	54 96       	adiw	r26, 0x14	; 20
    b412:	4d 93       	st	X+, r20
    b414:	5d 93       	st	X+, r21
    b416:	6d 93       	st	X+, r22
    b418:	7c 93       	st	X, r23
    b41a:	57 97       	sbiw	r26, 0x17	; 23
    b41c:	01 15       	cp	r16, r1
    b41e:	11 05       	cpc	r17, r1
    b420:	d9 f5       	brne	.+118    	; 0xb498 <f_open+0x382>
    b422:	d2 01       	movw	r26, r4
    b424:	c1 01       	movw	r24, r2
    b426:	91 70       	andi	r25, 0x01	; 1
    b428:	aa 27       	eor	r26, r26
    b42a:	bb 27       	eor	r27, r27
    b42c:	89 2b       	or	r24, r25
    b42e:	8a 2b       	or	r24, r26
    b430:	8b 2b       	or	r24, r27
    b432:	09 f4       	brne	.+2      	; 0xb436 <f_open+0x320>
    b434:	9d cf       	rjmp	.-198    	; 0xb370 <f_open+0x25a>
    b436:	6f a4       	ldd	r6, Y+47	; 0x2f
    b438:	78 a8       	ldd	r7, Y+48	; 0x30
    b43a:	c3 01       	movw	r24, r6
    b43c:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    b440:	61 15       	cp	r22, r1
    b442:	71 05       	cpc	r23, r1
    b444:	81 05       	cpc	r24, r1
    b446:	91 05       	cpc	r25, r1
    b448:	29 f1       	breq	.+74     	; 0xb494 <f_open+0x37e>
    b44a:	92 01       	movw	r18, r4
    b44c:	81 01       	movw	r16, r2
    b44e:	49 e0       	ldi	r20, 0x09	; 9
    b450:	36 95       	lsr	r19
    b452:	27 95       	ror	r18
    b454:	17 95       	ror	r17
    b456:	07 95       	ror	r16
    b458:	4a 95       	dec	r20
    b45a:	d1 f7       	brne	.-12     	; 0xb450 <f_open+0x33a>
    b45c:	a9 01       	movw	r20, r18
    b45e:	98 01       	movw	r18, r16
    b460:	26 0f       	add	r18, r22
    b462:	37 1f       	adc	r19, r23
    b464:	48 1f       	adc	r20, r24
    b466:	59 1f       	adc	r21, r25
    b468:	f7 01       	movw	r30, r14
    b46a:	20 8f       	std	Z+24, r18	; 0x18
    b46c:	31 8f       	std	Z+25, r19	; 0x19
    b46e:	42 8f       	std	Z+26, r20	; 0x1a
    b470:	53 8f       	std	Z+27, r21	; 0x1b
    b472:	01 e0       	ldi	r16, 0x01	; 1
    b474:	10 e0       	ldi	r17, 0x00	; 0
    b476:	6b a9       	ldd	r22, Y+51	; 0x33
    b478:	7c a9       	ldd	r23, Y+52	; 0x34
    b47a:	d3 01       	movw	r26, r6
    b47c:	11 96       	adiw	r26, 0x01	; 1
    b47e:	8c 91       	ld	r24, X
    b480:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    b484:	31 e0       	ldi	r19, 0x01	; 1
    b486:	20 e0       	ldi	r18, 0x00	; 0
    b488:	89 2b       	or	r24, r25
    b48a:	09 f4       	brne	.+2      	; 0xb48e <f_open+0x378>
    b48c:	30 e0       	ldi	r19, 0x00	; 0
    b48e:	03 2f       	mov	r16, r19
    b490:	12 2f       	mov	r17, r18
    b492:	02 c0       	rjmp	.+4      	; 0xb498 <f_open+0x382>
    b494:	02 e0       	ldi	r16, 0x02	; 2
    b496:	10 e0       	ldi	r17, 0x00	; 0
    b498:	c5 01       	movw	r24, r10
    b49a:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    b49e:	01 15       	cp	r16, r1
    b4a0:	11 05       	cpc	r17, r1
    b4a2:	59 f0       	breq	.+22     	; 0xb4ba <f_open+0x3a4>
    b4a4:	01 c0       	rjmp	.+2      	; 0xb4a8 <f_open+0x392>
    b4a6:	8c 01       	movw	r16, r24
    b4a8:	f7 01       	movw	r30, r14
    b4aa:	11 82       	std	Z+1, r1	; 0x01
    b4ac:	10 82       	st	Z, r1
    b4ae:	c8 01       	movw	r24, r16
    b4b0:	16 c0       	rjmp	.+44     	; 0xb4de <f_open+0x3c8>
    b4b2:	89 e0       	ldi	r24, 0x09	; 9
    b4b4:	03 c0       	rjmp	.+6      	; 0xb4bc <f_open+0x3a6>
    b4b6:	81 e1       	ldi	r24, 0x11	; 17
    b4b8:	01 c0       	rjmp	.+2      	; 0xb4bc <f_open+0x3a6>
    b4ba:	80 e0       	ldi	r24, 0x00	; 0
    b4bc:	90 e0       	ldi	r25, 0x00	; 0
    b4be:	0f c0       	rjmp	.+30     	; 0xb4de <f_open+0x3c8>
    b4c0:	08 e0       	ldi	r16, 0x08	; 8
    b4c2:	10 e0       	ldi	r17, 0x00	; 0
    b4c4:	08 c0       	rjmp	.+16     	; 0xb4d6 <f_open+0x3c0>
    b4c6:	02 e0       	ldi	r16, 0x02	; 2
    b4c8:	10 e0       	ldi	r17, 0x00	; 0
    b4ca:	a1 cf       	rjmp	.-190    	; 0xb40e <f_open+0x2f8>
    b4cc:	04 e0       	ldi	r16, 0x04	; 4
    b4ce:	10 e0       	ldi	r17, 0x00	; 0
    b4d0:	02 c0       	rjmp	.+4      	; 0xb4d6 <f_open+0x3c0>
    b4d2:	07 e0       	ldi	r16, 0x07	; 7
    b4d4:	10 e0       	ldi	r17, 0x00	; 0
    b4d6:	c5 01       	movw	r24, r10
    b4d8:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    b4dc:	e5 cf       	rjmp	.-54     	; 0xb4a8 <f_open+0x392>
    b4de:	e6 96       	adiw	r28, 0x36	; 54
    b4e0:	0f b6       	in	r0, 0x3f	; 63
    b4e2:	f8 94       	cli
    b4e4:	de bf       	out	0x3e, r29	; 62
    b4e6:	0f be       	out	0x3f, r0	; 63
    b4e8:	cd bf       	out	0x3d, r28	; 61
    b4ea:	df 91       	pop	r29
    b4ec:	cf 91       	pop	r28
    b4ee:	1f 91       	pop	r17
    b4f0:	0f 91       	pop	r16
    b4f2:	ff 90       	pop	r15
    b4f4:	ef 90       	pop	r14
    b4f6:	df 90       	pop	r13
    b4f8:	bf 90       	pop	r11
    b4fa:	af 90       	pop	r10
    b4fc:	9f 90       	pop	r9
    b4fe:	8f 90       	pop	r8
    b500:	7f 90       	pop	r7
    b502:	6f 90       	pop	r6
    b504:	5f 90       	pop	r5
    b506:	4f 90       	pop	r4
    b508:	3f 90       	pop	r3
    b50a:	2f 90       	pop	r2
    b50c:	08 95       	ret

0000b50e <f_read>:
    b50e:	a6 e0       	ldi	r26, 0x06	; 6
    b510:	b0 e0       	ldi	r27, 0x00	; 0
    b512:	ed e8       	ldi	r30, 0x8D	; 141
    b514:	fa e5       	ldi	r31, 0x5A	; 90
    b516:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    b51a:	7c 01       	movw	r14, r24
    b51c:	4b 01       	movw	r8, r22
    b51e:	5a 01       	movw	r10, r20
    b520:	3e 83       	std	Y+6, r19	; 0x06
    b522:	2d 83       	std	Y+5, r18	; 0x05
    b524:	f9 01       	movw	r30, r18
    b526:	11 82       	std	Z+1, r1	; 0x01
    b528:	10 82       	st	Z, r1
    b52a:	be 01       	movw	r22, r28
    b52c:	6f 5f       	subi	r22, 0xFF	; 255
    b52e:	7f 4f       	sbci	r23, 0xFF	; 255
    b530:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    b534:	00 97       	sbiw	r24, 0x00	; 0
    b536:	09 f0       	breq	.+2      	; 0xb53a <f_read+0x2c>
    b538:	31 c1       	rjmp	.+610    	; 0xb79c <f_read+0x28e>
    b53a:	f7 01       	movw	r30, r14
    b53c:	87 85       	ldd	r24, Z+15	; 0x0f
    b53e:	90 e0       	ldi	r25, 0x00	; 0
    b540:	00 97       	sbiw	r24, 0x00	; 0
    b542:	09 f0       	breq	.+2      	; 0xb546 <f_read+0x38>
    b544:	2b c1       	rjmp	.+598    	; 0xb79c <f_read+0x28e>
    b546:	86 85       	ldd	r24, Z+14	; 0x0e
    b548:	80 ff       	sbrs	r24, 0
    b54a:	26 c1       	rjmp	.+588    	; 0xb798 <f_read+0x28a>
    b54c:	82 85       	ldd	r24, Z+10	; 0x0a
    b54e:	93 85       	ldd	r25, Z+11	; 0x0b
    b550:	a4 85       	ldd	r26, Z+12	; 0x0c
    b552:	b5 85       	ldd	r27, Z+13	; 0x0d
    b554:	40 89       	ldd	r20, Z+16	; 0x10
    b556:	51 89       	ldd	r21, Z+17	; 0x11
    b558:	62 89       	ldd	r22, Z+18	; 0x12
    b55a:	73 89       	ldd	r23, Z+19	; 0x13
    b55c:	84 1b       	sub	r24, r20
    b55e:	95 0b       	sbc	r25, r21
    b560:	a6 0b       	sbc	r26, r22
    b562:	b7 0b       	sbc	r27, r23
    b564:	a5 01       	movw	r20, r10
    b566:	60 e0       	ldi	r22, 0x00	; 0
    b568:	70 e0       	ldi	r23, 0x00	; 0
    b56a:	84 17       	cp	r24, r20
    b56c:	95 07       	cpc	r25, r21
    b56e:	a6 07       	cpc	r26, r22
    b570:	b7 07       	cpc	r27, r23
    b572:	08 f4       	brcc	.+2      	; 0xb576 <f_read+0x68>
    b574:	5c 01       	movw	r10, r24
    b576:	17 01       	movw	r2, r14
    b578:	f4 e2       	ldi	r31, 0x24	; 36
    b57a:	2f 0e       	add	r2, r31
    b57c:	31 1c       	adc	r3, r1
    b57e:	a1 14       	cp	r10, r1
    b580:	b1 04       	cpc	r11, r1
    b582:	09 f4       	brne	.+2      	; 0xb586 <f_read+0x78>
    b584:	07 c1       	rjmp	.+526    	; 0xb794 <f_read+0x286>
    b586:	f7 01       	movw	r30, r14
    b588:	40 89       	ldd	r20, Z+16	; 0x10
    b58a:	51 89       	ldd	r21, Z+17	; 0x11
    b58c:	62 89       	ldd	r22, Z+18	; 0x12
    b58e:	73 89       	ldd	r23, Z+19	; 0x13
    b590:	db 01       	movw	r26, r22
    b592:	ca 01       	movw	r24, r20
    b594:	91 70       	andi	r25, 0x01	; 1
    b596:	aa 27       	eor	r26, r26
    b598:	bb 27       	eor	r27, r27
    b59a:	89 2b       	or	r24, r25
    b59c:	8a 2b       	or	r24, r26
    b59e:	8b 2b       	or	r24, r27
    b5a0:	09 f0       	breq	.+2      	; 0xb5a4 <f_read+0x96>
    b5a2:	cb c0       	rjmp	.+406    	; 0xb73a <f_read+0x22c>
    b5a4:	e9 81       	ldd	r30, Y+1	; 0x01
    b5a6:	fa 81       	ldd	r31, Y+2	; 0x02
    b5a8:	01 85       	ldd	r16, Z+9	; 0x09
    b5aa:	12 85       	ldd	r17, Z+10	; 0x0a
    b5ac:	01 50       	subi	r16, 0x01	; 1
    b5ae:	11 09       	sbc	r17, r1
    b5b0:	db 01       	movw	r26, r22
    b5b2:	ca 01       	movw	r24, r20
    b5b4:	e9 e0       	ldi	r30, 0x09	; 9
    b5b6:	b6 95       	lsr	r27
    b5b8:	a7 95       	ror	r26
    b5ba:	97 95       	ror	r25
    b5bc:	87 95       	ror	r24
    b5be:	ea 95       	dec	r30
    b5c0:	d1 f7       	brne	.-12     	; 0xb5b6 <f_read+0xa8>
    b5c2:	08 23       	and	r16, r24
    b5c4:	19 23       	and	r17, r25
    b5c6:	01 15       	cp	r16, r1
    b5c8:	11 05       	cpc	r17, r1
    b5ca:	91 f5       	brne	.+100    	; 0xb630 <f_read+0x122>
    b5cc:	f7 01       	movw	r30, r14
    b5ce:	41 15       	cp	r20, r1
    b5d0:	51 05       	cpc	r21, r1
    b5d2:	61 05       	cpc	r22, r1
    b5d4:	71 05       	cpc	r23, r1
    b5d6:	29 f4       	brne	.+10     	; 0xb5e2 <f_read+0xd4>
    b5d8:	66 81       	ldd	r22, Z+6	; 0x06
    b5da:	77 81       	ldd	r23, Z+7	; 0x07
    b5dc:	80 85       	ldd	r24, Z+8	; 0x08
    b5de:	91 85       	ldd	r25, Z+9	; 0x09
    b5e0:	11 c0       	rjmp	.+34     	; 0xb604 <f_read+0xf6>
    b5e2:	82 a1       	ldd	r24, Z+34	; 0x22
    b5e4:	93 a1       	ldd	r25, Z+35	; 0x23
    b5e6:	89 2b       	or	r24, r25
    b5e8:	21 f0       	breq	.+8      	; 0xb5f2 <f_read+0xe4>
    b5ea:	c7 01       	movw	r24, r14
    b5ec:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <clmt_clust>
    b5f0:	09 c0       	rjmp	.+18     	; 0xb604 <f_read+0xf6>
    b5f2:	f7 01       	movw	r30, r14
    b5f4:	44 89       	ldd	r20, Z+20	; 0x14
    b5f6:	55 89       	ldd	r21, Z+21	; 0x15
    b5f8:	66 89       	ldd	r22, Z+22	; 0x16
    b5fa:	77 89       	ldd	r23, Z+23	; 0x17
    b5fc:	80 81       	ld	r24, Z
    b5fe:	91 81       	ldd	r25, Z+1	; 0x01
    b600:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <get_fat.isra.7>
    b604:	62 30       	cpi	r22, 0x02	; 2
    b606:	71 05       	cpc	r23, r1
    b608:	81 05       	cpc	r24, r1
    b60a:	91 05       	cpc	r25, r1
    b60c:	10 f4       	brcc	.+4      	; 0xb612 <f_read+0x104>
    b60e:	82 e0       	ldi	r24, 0x02	; 2
    b610:	07 c0       	rjmp	.+14     	; 0xb620 <f_read+0x112>
    b612:	6f 3f       	cpi	r22, 0xFF	; 255
    b614:	ff ef       	ldi	r31, 0xFF	; 255
    b616:	7f 07       	cpc	r23, r31
    b618:	8f 07       	cpc	r24, r31
    b61a:	9f 07       	cpc	r25, r31
    b61c:	21 f4       	brne	.+8      	; 0xb626 <f_read+0x118>
    b61e:	81 e0       	ldi	r24, 0x01	; 1
    b620:	f7 01       	movw	r30, r14
    b622:	87 87       	std	Z+15, r24	; 0x0f
    b624:	ba c0       	rjmp	.+372    	; 0xb79a <f_read+0x28c>
    b626:	f7 01       	movw	r30, r14
    b628:	64 8b       	std	Z+20, r22	; 0x14
    b62a:	75 8b       	std	Z+21, r23	; 0x15
    b62c:	86 8b       	std	Z+22, r24	; 0x16
    b62e:	97 8b       	std	Z+23, r25	; 0x17
    b630:	89 81       	ldd	r24, Y+1	; 0x01
    b632:	9a 81       	ldd	r25, Y+2	; 0x02
    b634:	9c 83       	std	Y+4, r25	; 0x04
    b636:	8b 83       	std	Y+3, r24	; 0x03
    b638:	f7 01       	movw	r30, r14
    b63a:	44 89       	ldd	r20, Z+20	; 0x14
    b63c:	55 89       	ldd	r21, Z+21	; 0x15
    b63e:	66 89       	ldd	r22, Z+22	; 0x16
    b640:	77 89       	ldd	r23, Z+23	; 0x17
    b642:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    b646:	61 15       	cp	r22, r1
    b648:	71 05       	cpc	r23, r1
    b64a:	81 05       	cpc	r24, r1
    b64c:	91 05       	cpc	r25, r1
    b64e:	f9 f2       	breq	.-66     	; 0xb60e <f_read+0x100>
    b650:	2b 01       	movw	r4, r22
    b652:	3c 01       	movw	r6, r24
    b654:	40 0e       	add	r4, r16
    b656:	51 1e       	adc	r5, r17
    b658:	61 1c       	adc	r6, r1
    b65a:	71 1c       	adc	r7, r1
    b65c:	65 01       	movw	r12, r10
    b65e:	cd 2c       	mov	r12, r13
    b660:	dd 24       	eor	r13, r13
    b662:	c6 94       	lsr	r12
    b664:	c1 14       	cp	r12, r1
    b666:	d1 04       	cpc	r13, r1
    b668:	d1 f1       	breq	.+116    	; 0xb6de <f_read+0x1d0>
    b66a:	eb 81       	ldd	r30, Y+3	; 0x03
    b66c:	fc 81       	ldd	r31, Y+4	; 0x04
    b66e:	81 85       	ldd	r24, Z+9	; 0x09
    b670:	92 85       	ldd	r25, Z+10	; 0x0a
    b672:	98 01       	movw	r18, r16
    b674:	2c 0d       	add	r18, r12
    b676:	3d 1d       	adc	r19, r13
    b678:	82 17       	cp	r24, r18
    b67a:	93 07       	cpc	r25, r19
    b67c:	18 f4       	brcc	.+6      	; 0xb684 <f_read+0x176>
    b67e:	6c 01       	movw	r12, r24
    b680:	c0 1a       	sub	r12, r16
    b682:	d1 0a       	sbc	r13, r17
    b684:	86 01       	movw	r16, r12
    b686:	a3 01       	movw	r20, r6
    b688:	92 01       	movw	r18, r4
    b68a:	b4 01       	movw	r22, r8
    b68c:	eb 81       	ldd	r30, Y+3	; 0x03
    b68e:	fc 81       	ldd	r31, Y+4	; 0x04
    b690:	81 81       	ldd	r24, Z+1	; 0x01
    b692:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    b696:	89 2b       	or	r24, r25
    b698:	11 f6       	brne	.-124    	; 0xb61e <f_read+0x110>
    b69a:	f7 01       	movw	r30, r14
    b69c:	86 85       	ldd	r24, Z+14	; 0x0e
    b69e:	87 ff       	sbrs	r24, 7
    b6a0:	1a c0       	rjmp	.+52     	; 0xb6d6 <f_read+0x1c8>
    b6a2:	80 8d       	ldd	r24, Z+24	; 0x18
    b6a4:	91 8d       	ldd	r25, Z+25	; 0x19
    b6a6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6a8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6aa:	84 19       	sub	r24, r4
    b6ac:	95 09       	sbc	r25, r5
    b6ae:	a6 09       	sbc	r26, r6
    b6b0:	b7 09       	sbc	r27, r7
    b6b2:	a6 01       	movw	r20, r12
    b6b4:	60 e0       	ldi	r22, 0x00	; 0
    b6b6:	70 e0       	ldi	r23, 0x00	; 0
    b6b8:	84 17       	cp	r24, r20
    b6ba:	95 07       	cpc	r25, r21
    b6bc:	a6 07       	cpc	r26, r22
    b6be:	b7 07       	cpc	r27, r23
    b6c0:	50 f4       	brcc	.+20     	; 0xb6d6 <f_read+0x1c8>
    b6c2:	98 2f       	mov	r25, r24
    b6c4:	88 27       	eor	r24, r24
    b6c6:	99 0f       	add	r25, r25
    b6c8:	40 e0       	ldi	r20, 0x00	; 0
    b6ca:	52 e0       	ldi	r21, 0x02	; 2
    b6cc:	b1 01       	movw	r22, r2
    b6ce:	88 0d       	add	r24, r8
    b6d0:	99 1d       	adc	r25, r9
    b6d2:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    b6d6:	dc 2c       	mov	r13, r12
    b6d8:	cc 24       	eor	r12, r12
    b6da:	dd 0c       	add	r13, r13
    b6dc:	41 c0       	rjmp	.+130    	; 0xb760 <f_read+0x252>
    b6de:	f7 01       	movw	r30, r14
    b6e0:	20 8d       	ldd	r18, Z+24	; 0x18
    b6e2:	31 8d       	ldd	r19, Z+25	; 0x19
    b6e4:	42 8d       	ldd	r20, Z+26	; 0x1a
    b6e6:	53 8d       	ldd	r21, Z+27	; 0x1b
    b6e8:	42 16       	cp	r4, r18
    b6ea:	53 06       	cpc	r5, r19
    b6ec:	64 06       	cpc	r6, r20
    b6ee:	75 06       	cpc	r7, r21
    b6f0:	f9 f0       	breq	.+62     	; 0xb730 <f_read+0x222>
    b6f2:	86 85       	ldd	r24, Z+14	; 0x0e
    b6f4:	87 ff       	sbrs	r24, 7
    b6f6:	0f c0       	rjmp	.+30     	; 0xb716 <f_read+0x208>
    b6f8:	01 e0       	ldi	r16, 0x01	; 1
    b6fa:	10 e0       	ldi	r17, 0x00	; 0
    b6fc:	b1 01       	movw	r22, r2
    b6fe:	eb 81       	ldd	r30, Y+3	; 0x03
    b700:	fc 81       	ldd	r31, Y+4	; 0x04
    b702:	81 81       	ldd	r24, Z+1	; 0x01
    b704:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    b708:	89 2b       	or	r24, r25
    b70a:	09 f0       	breq	.+2      	; 0xb70e <f_read+0x200>
    b70c:	88 cf       	rjmp	.-240    	; 0xb61e <f_read+0x110>
    b70e:	f7 01       	movw	r30, r14
    b710:	86 85       	ldd	r24, Z+14	; 0x0e
    b712:	8f 77       	andi	r24, 0x7F	; 127
    b714:	86 87       	std	Z+14, r24	; 0x0e
    b716:	e9 81       	ldd	r30, Y+1	; 0x01
    b718:	fa 81       	ldd	r31, Y+2	; 0x02
    b71a:	01 e0       	ldi	r16, 0x01	; 1
    b71c:	10 e0       	ldi	r17, 0x00	; 0
    b71e:	a3 01       	movw	r20, r6
    b720:	92 01       	movw	r18, r4
    b722:	b1 01       	movw	r22, r2
    b724:	81 81       	ldd	r24, Z+1	; 0x01
    b726:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    b72a:	89 2b       	or	r24, r25
    b72c:	09 f0       	breq	.+2      	; 0xb730 <f_read+0x222>
    b72e:	77 cf       	rjmp	.-274    	; 0xb61e <f_read+0x110>
    b730:	f7 01       	movw	r30, r14
    b732:	40 8e       	std	Z+24, r4	; 0x18
    b734:	51 8e       	std	Z+25, r5	; 0x19
    b736:	62 8e       	std	Z+26, r6	; 0x1a
    b738:	73 8e       	std	Z+27, r7	; 0x1b
    b73a:	f7 01       	movw	r30, r14
    b73c:	60 89       	ldd	r22, Z+16	; 0x10
    b73e:	71 89       	ldd	r23, Z+17	; 0x11
    b740:	71 70       	andi	r23, 0x01	; 1
    b742:	80 e0       	ldi	r24, 0x00	; 0
    b744:	92 e0       	ldi	r25, 0x02	; 2
    b746:	86 1b       	sub	r24, r22
    b748:	97 0b       	sbc	r25, r23
    b74a:	65 01       	movw	r12, r10
    b74c:	8a 15       	cp	r24, r10
    b74e:	9b 05       	cpc	r25, r11
    b750:	08 f4       	brcc	.+2      	; 0xb754 <f_read+0x246>
    b752:	6c 01       	movw	r12, r24
    b754:	62 0d       	add	r22, r2
    b756:	73 1d       	adc	r23, r3
    b758:	a6 01       	movw	r20, r12
    b75a:	c4 01       	movw	r24, r8
    b75c:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    b760:	8c 0c       	add	r8, r12
    b762:	9d 1c       	adc	r9, r13
    b764:	f7 01       	movw	r30, r14
    b766:	80 89       	ldd	r24, Z+16	; 0x10
    b768:	91 89       	ldd	r25, Z+17	; 0x11
    b76a:	a2 89       	ldd	r26, Z+18	; 0x12
    b76c:	b3 89       	ldd	r27, Z+19	; 0x13
    b76e:	8c 0d       	add	r24, r12
    b770:	9d 1d       	adc	r25, r13
    b772:	a1 1d       	adc	r26, r1
    b774:	b1 1d       	adc	r27, r1
    b776:	80 8b       	std	Z+16, r24	; 0x10
    b778:	91 8b       	std	Z+17, r25	; 0x11
    b77a:	a2 8b       	std	Z+18, r26	; 0x12
    b77c:	b3 8b       	std	Z+19, r27	; 0x13
    b77e:	ed 81       	ldd	r30, Y+5	; 0x05
    b780:	fe 81       	ldd	r31, Y+6	; 0x06
    b782:	80 81       	ld	r24, Z
    b784:	91 81       	ldd	r25, Z+1	; 0x01
    b786:	8c 0d       	add	r24, r12
    b788:	9d 1d       	adc	r25, r13
    b78a:	91 83       	std	Z+1, r25	; 0x01
    b78c:	80 83       	st	Z, r24
    b78e:	ac 18       	sub	r10, r12
    b790:	bd 08       	sbc	r11, r13
    b792:	f5 ce       	rjmp	.-534    	; 0xb57e <f_read+0x70>
    b794:	80 e0       	ldi	r24, 0x00	; 0
    b796:	01 c0       	rjmp	.+2      	; 0xb79a <f_read+0x28c>
    b798:	87 e0       	ldi	r24, 0x07	; 7
    b79a:	90 e0       	ldi	r25, 0x00	; 0
    b79c:	26 96       	adiw	r28, 0x06	; 6
    b79e:	e2 e1       	ldi	r30, 0x12	; 18
    b7a0:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000b7a4 <f_write>:
    b7a4:	a8 e0       	ldi	r26, 0x08	; 8
    b7a6:	b0 e0       	ldi	r27, 0x00	; 0
    b7a8:	e8 ed       	ldi	r30, 0xD8	; 216
    b7aa:	fb e5       	ldi	r31, 0x5B	; 91
    b7ac:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    b7b0:	7c 01       	movw	r14, r24
    b7b2:	3b 01       	movw	r6, r22
    b7b4:	5a 01       	movw	r10, r20
    b7b6:	38 87       	std	Y+8, r19	; 0x08
    b7b8:	2f 83       	std	Y+7, r18	; 0x07
    b7ba:	f9 01       	movw	r30, r18
    b7bc:	11 82       	std	Z+1, r1	; 0x01
    b7be:	10 82       	st	Z, r1
    b7c0:	be 01       	movw	r22, r28
    b7c2:	6f 5f       	subi	r22, 0xFF	; 255
    b7c4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7c6:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    b7ca:	00 97       	sbiw	r24, 0x00	; 0
    b7cc:	09 f0       	breq	.+2      	; 0xb7d0 <f_write+0x2c>
    b7ce:	7d c1       	rjmp	.+762    	; 0xbaca <f_write+0x326>
    b7d0:	f7 01       	movw	r30, r14
    b7d2:	87 85       	ldd	r24, Z+15	; 0x0f
    b7d4:	90 e0       	ldi	r25, 0x00	; 0
    b7d6:	00 97       	sbiw	r24, 0x00	; 0
    b7d8:	09 f0       	breq	.+2      	; 0xb7dc <f_write+0x38>
    b7da:	77 c1       	rjmp	.+750    	; 0xbaca <f_write+0x326>
    b7dc:	86 85       	ldd	r24, Z+14	; 0x0e
    b7de:	81 ff       	sbrs	r24, 1
    b7e0:	72 c1       	rjmp	.+740    	; 0xbac6 <f_write+0x322>
    b7e2:	80 89       	ldd	r24, Z+16	; 0x10
    b7e4:	91 89       	ldd	r25, Z+17	; 0x11
    b7e6:	a2 89       	ldd	r26, Z+18	; 0x12
    b7e8:	b3 89       	ldd	r27, Z+19	; 0x13
    b7ea:	ac 01       	movw	r20, r24
    b7ec:	bd 01       	movw	r22, r26
    b7ee:	4a 0d       	add	r20, r10
    b7f0:	5b 1d       	adc	r21, r11
    b7f2:	61 1d       	adc	r22, r1
    b7f4:	71 1d       	adc	r23, r1
    b7f6:	48 17       	cp	r20, r24
    b7f8:	59 07       	cpc	r21, r25
    b7fa:	6a 07       	cpc	r22, r26
    b7fc:	7b 07       	cpc	r23, r27
    b7fe:	18 f4       	brcc	.+6      	; 0xb806 <f_write+0x62>
    b800:	5c 01       	movw	r10, r24
    b802:	a0 94       	com	r10
    b804:	b0 94       	com	r11
    b806:	97 01       	movw	r18, r14
    b808:	2c 5d       	subi	r18, 0xDC	; 220
    b80a:	3f 4f       	sbci	r19, 0xFF	; 255
    b80c:	3e 83       	std	Y+6, r19	; 0x06
    b80e:	2d 83       	std	Y+5, r18	; 0x05
    b810:	a1 14       	cp	r10, r1
    b812:	b1 04       	cpc	r11, r1
    b814:	09 f4       	brne	.+2      	; 0xb818 <f_write+0x74>
    b816:	4d c0       	rjmp	.+154    	; 0xb8b2 <f_write+0x10e>
    b818:	f7 01       	movw	r30, r14
    b81a:	40 89       	ldd	r20, Z+16	; 0x10
    b81c:	51 89       	ldd	r21, Z+17	; 0x11
    b81e:	62 89       	ldd	r22, Z+18	; 0x12
    b820:	73 89       	ldd	r23, Z+19	; 0x13
    b822:	db 01       	movw	r26, r22
    b824:	ca 01       	movw	r24, r20
    b826:	91 70       	andi	r25, 0x01	; 1
    b828:	aa 27       	eor	r26, r26
    b82a:	bb 27       	eor	r27, r27
    b82c:	89 2b       	or	r24, r25
    b82e:	8a 2b       	or	r24, r26
    b830:	8b 2b       	or	r24, r27
    b832:	09 f0       	breq	.+2      	; 0xb836 <f_write+0x92>
    b834:	05 c1       	rjmp	.+522    	; 0xba40 <f_write+0x29c>
    b836:	e9 81       	ldd	r30, Y+1	; 0x01
    b838:	fa 81       	ldd	r31, Y+2	; 0x02
    b83a:	81 84       	ldd	r8, Z+9	; 0x09
    b83c:	92 84       	ldd	r9, Z+10	; 0x0a
    b83e:	f1 e0       	ldi	r31, 0x01	; 1
    b840:	8f 1a       	sub	r8, r31
    b842:	91 08       	sbc	r9, r1
    b844:	db 01       	movw	r26, r22
    b846:	ca 01       	movw	r24, r20
    b848:	e9 e0       	ldi	r30, 0x09	; 9
    b84a:	b6 95       	lsr	r27
    b84c:	a7 95       	ror	r26
    b84e:	97 95       	ror	r25
    b850:	87 95       	ror	r24
    b852:	ea 95       	dec	r30
    b854:	d1 f7       	brne	.-12     	; 0xb84a <f_write+0xa6>
    b856:	88 22       	and	r8, r24
    b858:	99 22       	and	r9, r25
    b85a:	81 14       	cp	r8, r1
    b85c:	91 04       	cpc	r9, r1
    b85e:	09 f0       	breq	.+2      	; 0xb862 <f_write+0xbe>
    b860:	51 c0       	rjmp	.+162    	; 0xb904 <f_write+0x160>
    b862:	f7 01       	movw	r30, r14
    b864:	41 15       	cp	r20, r1
    b866:	51 05       	cpc	r21, r1
    b868:	61 05       	cpc	r22, r1
    b86a:	71 05       	cpc	r23, r1
    b86c:	69 f4       	brne	.+26     	; 0xb888 <f_write+0xe4>
    b86e:	66 81       	ldd	r22, Z+6	; 0x06
    b870:	77 81       	ldd	r23, Z+7	; 0x07
    b872:	80 85       	ldd	r24, Z+8	; 0x08
    b874:	91 85       	ldd	r25, Z+9	; 0x09
    b876:	61 15       	cp	r22, r1
    b878:	71 05       	cpc	r23, r1
    b87a:	81 05       	cpc	r24, r1
    b87c:	91 05       	cpc	r25, r1
    b87e:	f9 f4       	brne	.+62     	; 0xb8be <f_write+0x11a>
    b880:	40 e0       	ldi	r20, 0x00	; 0
    b882:	50 e0       	ldi	r21, 0x00	; 0
    b884:	ba 01       	movw	r22, r20
    b886:	0d c0       	rjmp	.+26     	; 0xb8a2 <f_write+0xfe>
    b888:	82 a1       	ldd	r24, Z+34	; 0x22
    b88a:	93 a1       	ldd	r25, Z+35	; 0x23
    b88c:	89 2b       	or	r24, r25
    b88e:	21 f0       	breq	.+8      	; 0xb898 <f_write+0xf4>
    b890:	c7 01       	movw	r24, r14
    b892:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <clmt_clust>
    b896:	08 c0       	rjmp	.+16     	; 0xb8a8 <f_write+0x104>
    b898:	f7 01       	movw	r30, r14
    b89a:	44 89       	ldd	r20, Z+20	; 0x14
    b89c:	55 89       	ldd	r21, Z+21	; 0x15
    b89e:	66 89       	ldd	r22, Z+22	; 0x16
    b8a0:	77 89       	ldd	r23, Z+23	; 0x17
    b8a2:	c7 01       	movw	r24, r14
    b8a4:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <create_chain>
    b8a8:	61 15       	cp	r22, r1
    b8aa:	71 05       	cpc	r23, r1
    b8ac:	81 05       	cpc	r24, r1
    b8ae:	91 05       	cpc	r25, r1
    b8b0:	31 f4       	brne	.+12     	; 0xb8be <f_write+0x11a>
    b8b2:	f7 01       	movw	r30, r14
    b8b4:	86 85       	ldd	r24, Z+14	; 0x0e
    b8b6:	80 64       	ori	r24, 0x40	; 64
    b8b8:	86 87       	std	Z+14, r24	; 0x0e
    b8ba:	80 e0       	ldi	r24, 0x00	; 0
    b8bc:	05 c1       	rjmp	.+522    	; 0xbac8 <f_write+0x324>
    b8be:	61 30       	cpi	r22, 0x01	; 1
    b8c0:	71 05       	cpc	r23, r1
    b8c2:	81 05       	cpc	r24, r1
    b8c4:	91 05       	cpc	r25, r1
    b8c6:	11 f4       	brne	.+4      	; 0xb8cc <f_write+0x128>
    b8c8:	82 e0       	ldi	r24, 0x02	; 2
    b8ca:	07 c0       	rjmp	.+14     	; 0xb8da <f_write+0x136>
    b8cc:	6f 3f       	cpi	r22, 0xFF	; 255
    b8ce:	ff ef       	ldi	r31, 0xFF	; 255
    b8d0:	7f 07       	cpc	r23, r31
    b8d2:	8f 07       	cpc	r24, r31
    b8d4:	9f 07       	cpc	r25, r31
    b8d6:	21 f4       	brne	.+8      	; 0xb8e0 <f_write+0x13c>
    b8d8:	81 e0       	ldi	r24, 0x01	; 1
    b8da:	f7 01       	movw	r30, r14
    b8dc:	87 87       	std	Z+15, r24	; 0x0f
    b8de:	f4 c0       	rjmp	.+488    	; 0xbac8 <f_write+0x324>
    b8e0:	f7 01       	movw	r30, r14
    b8e2:	64 8b       	std	Z+20, r22	; 0x14
    b8e4:	75 8b       	std	Z+21, r23	; 0x15
    b8e6:	86 8b       	std	Z+22, r24	; 0x16
    b8e8:	97 8b       	std	Z+23, r25	; 0x17
    b8ea:	06 81       	ldd	r16, Z+6	; 0x06
    b8ec:	17 81       	ldd	r17, Z+7	; 0x07
    b8ee:	20 85       	ldd	r18, Z+8	; 0x08
    b8f0:	31 85       	ldd	r19, Z+9	; 0x09
    b8f2:	01 15       	cp	r16, r1
    b8f4:	11 05       	cpc	r17, r1
    b8f6:	21 05       	cpc	r18, r1
    b8f8:	31 05       	cpc	r19, r1
    b8fa:	21 f4       	brne	.+8      	; 0xb904 <f_write+0x160>
    b8fc:	66 83       	std	Z+6, r22	; 0x06
    b8fe:	77 83       	std	Z+7, r23	; 0x07
    b900:	80 87       	std	Z+8, r24	; 0x08
    b902:	91 87       	std	Z+9, r25	; 0x09
    b904:	f7 01       	movw	r30, r14
    b906:	86 85       	ldd	r24, Z+14	; 0x0e
    b908:	87 ff       	sbrs	r24, 7
    b90a:	13 c0       	rjmp	.+38     	; 0xb932 <f_write+0x18e>
    b90c:	20 8d       	ldd	r18, Z+24	; 0x18
    b90e:	31 8d       	ldd	r19, Z+25	; 0x19
    b910:	42 8d       	ldd	r20, Z+26	; 0x1a
    b912:	53 8d       	ldd	r21, Z+27	; 0x1b
    b914:	e9 81       	ldd	r30, Y+1	; 0x01
    b916:	fa 81       	ldd	r31, Y+2	; 0x02
    b918:	01 e0       	ldi	r16, 0x01	; 1
    b91a:	10 e0       	ldi	r17, 0x00	; 0
    b91c:	6d 81       	ldd	r22, Y+5	; 0x05
    b91e:	7e 81       	ldd	r23, Y+6	; 0x06
    b920:	81 81       	ldd	r24, Z+1	; 0x01
    b922:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    b926:	89 2b       	or	r24, r25
    b928:	b9 f6       	brne	.-82     	; 0xb8d8 <f_write+0x134>
    b92a:	f7 01       	movw	r30, r14
    b92c:	86 85       	ldd	r24, Z+14	; 0x0e
    b92e:	8f 77       	andi	r24, 0x7F	; 127
    b930:	86 87       	std	Z+14, r24	; 0x0e
    b932:	29 81       	ldd	r18, Y+1	; 0x01
    b934:	3a 81       	ldd	r19, Y+2	; 0x02
    b936:	3c 83       	std	Y+4, r19	; 0x04
    b938:	2b 83       	std	Y+3, r18	; 0x03
    b93a:	f7 01       	movw	r30, r14
    b93c:	44 89       	ldd	r20, Z+20	; 0x14
    b93e:	55 89       	ldd	r21, Z+21	; 0x15
    b940:	66 89       	ldd	r22, Z+22	; 0x16
    b942:	77 89       	ldd	r23, Z+23	; 0x17
    b944:	c9 01       	movw	r24, r18
    b946:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    b94a:	61 15       	cp	r22, r1
    b94c:	71 05       	cpc	r23, r1
    b94e:	81 05       	cpc	r24, r1
    b950:	91 05       	cpc	r25, r1
    b952:	09 f4       	brne	.+2      	; 0xb956 <f_write+0x1b2>
    b954:	b9 cf       	rjmp	.-142    	; 0xb8c8 <f_write+0x124>
    b956:	1b 01       	movw	r2, r22
    b958:	2c 01       	movw	r4, r24
    b95a:	28 0c       	add	r2, r8
    b95c:	39 1c       	adc	r3, r9
    b95e:	41 1c       	adc	r4, r1
    b960:	51 1c       	adc	r5, r1
    b962:	65 01       	movw	r12, r10
    b964:	cd 2c       	mov	r12, r13
    b966:	dd 24       	eor	r13, r13
    b968:	c6 94       	lsr	r12
    b96a:	c1 14       	cp	r12, r1
    b96c:	d1 04       	cpc	r13, r1
    b96e:	f1 f1       	breq	.+124    	; 0xb9ec <f_write+0x248>
    b970:	eb 81       	ldd	r30, Y+3	; 0x03
    b972:	fc 81       	ldd	r31, Y+4	; 0x04
    b974:	81 85       	ldd	r24, Z+9	; 0x09
    b976:	92 85       	ldd	r25, Z+10	; 0x0a
    b978:	94 01       	movw	r18, r8
    b97a:	2c 0d       	add	r18, r12
    b97c:	3d 1d       	adc	r19, r13
    b97e:	82 17       	cp	r24, r18
    b980:	93 07       	cpc	r25, r19
    b982:	18 f4       	brcc	.+6      	; 0xb98a <f_write+0x1e6>
    b984:	6c 01       	movw	r12, r24
    b986:	c8 18       	sub	r12, r8
    b988:	d9 08       	sbc	r13, r9
    b98a:	86 01       	movw	r16, r12
    b98c:	a2 01       	movw	r20, r4
    b98e:	91 01       	movw	r18, r2
    b990:	b3 01       	movw	r22, r6
    b992:	eb 81       	ldd	r30, Y+3	; 0x03
    b994:	fc 81       	ldd	r31, Y+4	; 0x04
    b996:	81 81       	ldd	r24, Z+1	; 0x01
    b998:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    b99c:	89 2b       	or	r24, r25
    b99e:	09 f0       	breq	.+2      	; 0xb9a2 <f_write+0x1fe>
    b9a0:	9b cf       	rjmp	.-202    	; 0xb8d8 <f_write+0x134>
    b9a2:	f7 01       	movw	r30, r14
    b9a4:	80 8d       	ldd	r24, Z+24	; 0x18
    b9a6:	91 8d       	ldd	r25, Z+25	; 0x19
    b9a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9aa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9ac:	82 19       	sub	r24, r2
    b9ae:	93 09       	sbc	r25, r3
    b9b0:	a4 09       	sbc	r26, r4
    b9b2:	b5 09       	sbc	r27, r5
    b9b4:	a6 01       	movw	r20, r12
    b9b6:	60 e0       	ldi	r22, 0x00	; 0
    b9b8:	70 e0       	ldi	r23, 0x00	; 0
    b9ba:	84 17       	cp	r24, r20
    b9bc:	95 07       	cpc	r25, r21
    b9be:	a6 07       	cpc	r26, r22
    b9c0:	b7 07       	cpc	r27, r23
    b9c2:	80 f4       	brcc	.+32     	; 0xb9e4 <f_write+0x240>
    b9c4:	98 2f       	mov	r25, r24
    b9c6:	88 27       	eor	r24, r24
    b9c8:	99 0f       	add	r25, r25
    b9ca:	b3 01       	movw	r22, r6
    b9cc:	68 0f       	add	r22, r24
    b9ce:	79 1f       	adc	r23, r25
    b9d0:	40 e0       	ldi	r20, 0x00	; 0
    b9d2:	52 e0       	ldi	r21, 0x02	; 2
    b9d4:	8d 81       	ldd	r24, Y+5	; 0x05
    b9d6:	9e 81       	ldd	r25, Y+6	; 0x06
    b9d8:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    b9dc:	f7 01       	movw	r30, r14
    b9de:	86 85       	ldd	r24, Z+14	; 0x0e
    b9e0:	8f 77       	andi	r24, 0x7F	; 127
    b9e2:	86 87       	std	Z+14, r24	; 0x0e
    b9e4:	dc 2c       	mov	r13, r12
    b9e6:	cc 24       	eor	r12, r12
    b9e8:	dd 0c       	add	r13, r13
    b9ea:	43 c0       	rjmp	.+134    	; 0xba72 <f_write+0x2ce>
    b9ec:	f7 01       	movw	r30, r14
    b9ee:	80 8d       	ldd	r24, Z+24	; 0x18
    b9f0:	91 8d       	ldd	r25, Z+25	; 0x19
    b9f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9f4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9f6:	28 16       	cp	r2, r24
    b9f8:	39 06       	cpc	r3, r25
    b9fa:	4a 06       	cpc	r4, r26
    b9fc:	5b 06       	cpc	r5, r27
    b9fe:	d9 f0       	breq	.+54     	; 0xba36 <f_write+0x292>
    ba00:	40 89       	ldd	r20, Z+16	; 0x10
    ba02:	51 89       	ldd	r21, Z+17	; 0x11
    ba04:	62 89       	ldd	r22, Z+18	; 0x12
    ba06:	73 89       	ldd	r23, Z+19	; 0x13
    ba08:	82 85       	ldd	r24, Z+10	; 0x0a
    ba0a:	93 85       	ldd	r25, Z+11	; 0x0b
    ba0c:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba0e:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba10:	48 17       	cp	r20, r24
    ba12:	59 07       	cpc	r21, r25
    ba14:	6a 07       	cpc	r22, r26
    ba16:	7b 07       	cpc	r23, r27
    ba18:	70 f4       	brcc	.+28     	; 0xba36 <f_write+0x292>
    ba1a:	01 e0       	ldi	r16, 0x01	; 1
    ba1c:	10 e0       	ldi	r17, 0x00	; 0
    ba1e:	a2 01       	movw	r20, r4
    ba20:	91 01       	movw	r18, r2
    ba22:	6d 81       	ldd	r22, Y+5	; 0x05
    ba24:	7e 81       	ldd	r23, Y+6	; 0x06
    ba26:	eb 81       	ldd	r30, Y+3	; 0x03
    ba28:	fc 81       	ldd	r31, Y+4	; 0x04
    ba2a:	81 81       	ldd	r24, Z+1	; 0x01
    ba2c:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    ba30:	89 2b       	or	r24, r25
    ba32:	09 f0       	breq	.+2      	; 0xba36 <f_write+0x292>
    ba34:	51 cf       	rjmp	.-350    	; 0xb8d8 <f_write+0x134>
    ba36:	f7 01       	movw	r30, r14
    ba38:	20 8e       	std	Z+24, r2	; 0x18
    ba3a:	31 8e       	std	Z+25, r3	; 0x19
    ba3c:	42 8e       	std	Z+26, r4	; 0x1a
    ba3e:	53 8e       	std	Z+27, r5	; 0x1b
    ba40:	f7 01       	movw	r30, r14
    ba42:	80 89       	ldd	r24, Z+16	; 0x10
    ba44:	91 89       	ldd	r25, Z+17	; 0x11
    ba46:	91 70       	andi	r25, 0x01	; 1
    ba48:	20 e0       	ldi	r18, 0x00	; 0
    ba4a:	32 e0       	ldi	r19, 0x02	; 2
    ba4c:	28 1b       	sub	r18, r24
    ba4e:	39 0b       	sbc	r19, r25
    ba50:	65 01       	movw	r12, r10
    ba52:	2a 15       	cp	r18, r10
    ba54:	3b 05       	cpc	r19, r11
    ba56:	08 f4       	brcc	.+2      	; 0xba5a <f_write+0x2b6>
    ba58:	69 01       	movw	r12, r18
    ba5a:	a6 01       	movw	r20, r12
    ba5c:	b3 01       	movw	r22, r6
    ba5e:	2d 81       	ldd	r18, Y+5	; 0x05
    ba60:	3e 81       	ldd	r19, Y+6	; 0x06
    ba62:	82 0f       	add	r24, r18
    ba64:	93 1f       	adc	r25, r19
    ba66:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    ba6a:	f7 01       	movw	r30, r14
    ba6c:	86 85       	ldd	r24, Z+14	; 0x0e
    ba6e:	80 68       	ori	r24, 0x80	; 128
    ba70:	86 87       	std	Z+14, r24	; 0x0e
    ba72:	6c 0c       	add	r6, r12
    ba74:	7d 1c       	adc	r7, r13
    ba76:	f7 01       	movw	r30, r14
    ba78:	80 89       	ldd	r24, Z+16	; 0x10
    ba7a:	91 89       	ldd	r25, Z+17	; 0x11
    ba7c:	a2 89       	ldd	r26, Z+18	; 0x12
    ba7e:	b3 89       	ldd	r27, Z+19	; 0x13
    ba80:	8c 0d       	add	r24, r12
    ba82:	9d 1d       	adc	r25, r13
    ba84:	a1 1d       	adc	r26, r1
    ba86:	b1 1d       	adc	r27, r1
    ba88:	80 8b       	std	Z+16, r24	; 0x10
    ba8a:	91 8b       	std	Z+17, r25	; 0x11
    ba8c:	a2 8b       	std	Z+18, r26	; 0x12
    ba8e:	b3 8b       	std	Z+19, r27	; 0x13
    ba90:	42 85       	ldd	r20, Z+10	; 0x0a
    ba92:	53 85       	ldd	r21, Z+11	; 0x0b
    ba94:	64 85       	ldd	r22, Z+12	; 0x0c
    ba96:	75 85       	ldd	r23, Z+13	; 0x0d
    ba98:	48 17       	cp	r20, r24
    ba9a:	59 07       	cpc	r21, r25
    ba9c:	6a 07       	cpc	r22, r26
    ba9e:	7b 07       	cpc	r23, r27
    baa0:	10 f4       	brcc	.+4      	; 0xbaa6 <f_write+0x302>
    baa2:	ac 01       	movw	r20, r24
    baa4:	bd 01       	movw	r22, r26
    baa6:	f7 01       	movw	r30, r14
    baa8:	42 87       	std	Z+10, r20	; 0x0a
    baaa:	53 87       	std	Z+11, r21	; 0x0b
    baac:	64 87       	std	Z+12, r22	; 0x0c
    baae:	75 87       	std	Z+13, r23	; 0x0d
    bab0:	ef 81       	ldd	r30, Y+7	; 0x07
    bab2:	f8 85       	ldd	r31, Y+8	; 0x08
    bab4:	80 81       	ld	r24, Z
    bab6:	91 81       	ldd	r25, Z+1	; 0x01
    bab8:	8c 0d       	add	r24, r12
    baba:	9d 1d       	adc	r25, r13
    babc:	91 83       	std	Z+1, r25	; 0x01
    babe:	80 83       	st	Z, r24
    bac0:	ac 18       	sub	r10, r12
    bac2:	bd 08       	sbc	r11, r13
    bac4:	a5 ce       	rjmp	.-694    	; 0xb810 <f_write+0x6c>
    bac6:	87 e0       	ldi	r24, 0x07	; 7
    bac8:	90 e0       	ldi	r25, 0x00	; 0
    baca:	28 96       	adiw	r28, 0x08	; 8
    bacc:	e2 e1       	ldi	r30, 0x12	; 18
    bace:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000bad2 <f_sync>:
    bad2:	8f 92       	push	r8
    bad4:	9f 92       	push	r9
    bad6:	af 92       	push	r10
    bad8:	bf 92       	push	r11
    bada:	ef 92       	push	r14
    badc:	ff 92       	push	r15
    bade:	0f 93       	push	r16
    bae0:	1f 93       	push	r17
    bae2:	cf 93       	push	r28
    bae4:	df 93       	push	r29
    bae6:	00 d0       	rcall	.+0      	; 0xbae8 <f_sync+0x16>
    bae8:	cd b7       	in	r28, 0x3d	; 61
    baea:	de b7       	in	r29, 0x3e	; 62
    baec:	7c 01       	movw	r14, r24
    baee:	be 01       	movw	r22, r28
    baf0:	6f 5f       	subi	r22, 0xFF	; 255
    baf2:	7f 4f       	sbci	r23, 0xFF	; 255
    baf4:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    baf8:	00 97       	sbiw	r24, 0x00	; 0
    bafa:	09 f0       	breq	.+2      	; 0xbafe <f_sync+0x2c>
    bafc:	5d c0       	rjmp	.+186    	; 0xbbb8 <f_sync+0xe6>
    bafe:	f7 01       	movw	r30, r14
    bb00:	86 85       	ldd	r24, Z+14	; 0x0e
    bb02:	86 ff       	sbrs	r24, 6
    bb04:	55 c0       	rjmp	.+170    	; 0xbbb0 <f_sync+0xde>
    bb06:	87 ff       	sbrs	r24, 7
    bb08:	15 c0       	rjmp	.+42     	; 0xbb34 <f_sync+0x62>
    bb0a:	20 8d       	ldd	r18, Z+24	; 0x18
    bb0c:	31 8d       	ldd	r19, Z+25	; 0x19
    bb0e:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb10:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb12:	e9 81       	ldd	r30, Y+1	; 0x01
    bb14:	fa 81       	ldd	r31, Y+2	; 0x02
    bb16:	01 e0       	ldi	r16, 0x01	; 1
    bb18:	10 e0       	ldi	r17, 0x00	; 0
    bb1a:	b7 01       	movw	r22, r14
    bb1c:	6c 5d       	subi	r22, 0xDC	; 220
    bb1e:	7f 4f       	sbci	r23, 0xFF	; 255
    bb20:	81 81       	ldd	r24, Z+1	; 0x01
    bb22:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    bb26:	89 2b       	or	r24, r25
    bb28:	09 f0       	breq	.+2      	; 0xbb2c <f_sync+0x5a>
    bb2a:	44 c0       	rjmp	.+136    	; 0xbbb4 <f_sync+0xe2>
    bb2c:	f7 01       	movw	r30, r14
    bb2e:	86 85       	ldd	r24, Z+14	; 0x0e
    bb30:	8f 77       	andi	r24, 0x7F	; 127
    bb32:	86 87       	std	Z+14, r24	; 0x0e
    bb34:	0e 94 04 75 	call	0xea08	; 0xea08 <get_fattime>
    bb38:	4b 01       	movw	r8, r22
    bb3a:	5c 01       	movw	r10, r24
    bb3c:	f7 01       	movw	r30, r14
    bb3e:	44 8d       	ldd	r20, Z+28	; 0x1c
    bb40:	55 8d       	ldd	r21, Z+29	; 0x1d
    bb42:	66 8d       	ldd	r22, Z+30	; 0x1e
    bb44:	77 8d       	ldd	r23, Z+31	; 0x1f
    bb46:	89 81       	ldd	r24, Y+1	; 0x01
    bb48:	9a 81       	ldd	r25, Y+2	; 0x02
    bb4a:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    bb4e:	00 97       	sbiw	r24, 0x00	; 0
    bb50:	99 f5       	brne	.+102    	; 0xbbb8 <f_sync+0xe6>
    bb52:	f7 01       	movw	r30, r14
    bb54:	00 a1       	ldd	r16, Z+32	; 0x20
    bb56:	11 a1       	ldd	r17, Z+33	; 0x21
    bb58:	f8 01       	movw	r30, r16
    bb5a:	83 85       	ldd	r24, Z+11	; 0x0b
    bb5c:	80 62       	ori	r24, 0x20	; 32
    bb5e:	83 87       	std	Z+11, r24	; 0x0b
    bb60:	f7 01       	movw	r30, r14
    bb62:	26 81       	ldd	r18, Z+6	; 0x06
    bb64:	37 81       	ldd	r19, Z+7	; 0x07
    bb66:	40 85       	ldd	r20, Z+8	; 0x08
    bb68:	51 85       	ldd	r21, Z+9	; 0x09
    bb6a:	b8 01       	movw	r22, r16
    bb6c:	80 81       	ld	r24, Z
    bb6e:	91 81       	ldd	r25, Z+1	; 0x01
    bb70:	0e 94 53 48 	call	0x90a6	; 0x90a6 <st_clust.isra.2>
    bb74:	f7 01       	movw	r30, r14
    bb76:	42 85       	ldd	r20, Z+10	; 0x0a
    bb78:	53 85       	ldd	r21, Z+11	; 0x0b
    bb7a:	64 85       	ldd	r22, Z+12	; 0x0c
    bb7c:	75 85       	ldd	r23, Z+13	; 0x0d
    bb7e:	c8 01       	movw	r24, r16
    bb80:	4c 96       	adiw	r24, 0x1c	; 28
    bb82:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    bb86:	b5 01       	movw	r22, r10
    bb88:	a4 01       	movw	r20, r8
    bb8a:	c8 01       	movw	r24, r16
    bb8c:	46 96       	adiw	r24, 0x16	; 22
    bb8e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    bb92:	f8 01       	movw	r30, r16
    bb94:	12 8a       	std	Z+18, r1	; 0x12
    bb96:	13 8a       	std	Z+19, r1	; 0x13
    bb98:	89 81       	ldd	r24, Y+1	; 0x01
    bb9a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb9c:	21 e0       	ldi	r18, 0x01	; 1
    bb9e:	fc 01       	movw	r30, r24
    bba0:	23 83       	std	Z+3, r18	; 0x03
    bba2:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    bba6:	f7 01       	movw	r30, r14
    bba8:	26 85       	ldd	r18, Z+14	; 0x0e
    bbaa:	2f 7b       	andi	r18, 0xBF	; 191
    bbac:	26 87       	std	Z+14, r18	; 0x0e
    bbae:	04 c0       	rjmp	.+8      	; 0xbbb8 <f_sync+0xe6>
    bbb0:	80 e0       	ldi	r24, 0x00	; 0
    bbb2:	01 c0       	rjmp	.+2      	; 0xbbb6 <f_sync+0xe4>
    bbb4:	81 e0       	ldi	r24, 0x01	; 1
    bbb6:	90 e0       	ldi	r25, 0x00	; 0
    bbb8:	0f 90       	pop	r0
    bbba:	0f 90       	pop	r0
    bbbc:	df 91       	pop	r29
    bbbe:	cf 91       	pop	r28
    bbc0:	1f 91       	pop	r17
    bbc2:	0f 91       	pop	r16
    bbc4:	ff 90       	pop	r15
    bbc6:	ef 90       	pop	r14
    bbc8:	bf 90       	pop	r11
    bbca:	af 90       	pop	r10
    bbcc:	9f 90       	pop	r9
    bbce:	8f 90       	pop	r8
    bbd0:	08 95       	ret

0000bbd2 <f_close>:
    bbd2:	a2 e0       	ldi	r26, 0x02	; 2
    bbd4:	b0 e0       	ldi	r27, 0x00	; 0
    bbd6:	ef ee       	ldi	r30, 0xEF	; 239
    bbd8:	fd e5       	ldi	r31, 0x5D	; 93
    bbda:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    bbde:	8c 01       	movw	r16, r24
    bbe0:	78 df       	rcall	.-272    	; 0xbad2 <f_sync>
    bbe2:	00 97       	sbiw	r24, 0x00	; 0
    bbe4:	59 f4       	brne	.+22     	; 0xbbfc <f_close+0x2a>
    bbe6:	be 01       	movw	r22, r28
    bbe8:	6f 5f       	subi	r22, 0xFF	; 255
    bbea:	7f 4f       	sbci	r23, 0xFF	; 255
    bbec:	c8 01       	movw	r24, r16
    bbee:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    bbf2:	00 97       	sbiw	r24, 0x00	; 0
    bbf4:	19 f4       	brne	.+6      	; 0xbbfc <f_close+0x2a>
    bbf6:	f8 01       	movw	r30, r16
    bbf8:	11 82       	std	Z+1, r1	; 0x01
    bbfa:	10 82       	st	Z, r1
    bbfc:	22 96       	adiw	r28, 0x02	; 2
    bbfe:	e4 e0       	ldi	r30, 0x04	; 4
    bc00:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

0000bc04 <f_chdir>:
    bc04:	a2 e3       	ldi	r26, 0x32	; 50
    bc06:	b0 e0       	ldi	r27, 0x00	; 0
    bc08:	e8 e0       	ldi	r30, 0x08	; 8
    bc0a:	fe e5       	ldi	r31, 0x5E	; 94
    bc0c:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    bc10:	9a ab       	std	Y+50, r25	; 0x32
    bc12:	89 ab       	std	Y+49, r24	; 0x31
    bc14:	40 e0       	ldi	r20, 0x00	; 0
    bc16:	be 01       	movw	r22, r28
    bc18:	61 5d       	subi	r22, 0xD1	; 209
    bc1a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc1c:	ce 01       	movw	r24, r28
    bc1e:	c1 96       	adiw	r24, 0x31	; 49
    bc20:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    bc24:	00 97       	sbiw	r24, 0x00	; 0
    bc26:	09 f0       	breq	.+2      	; 0xbc2a <f_chdir+0x26>
    bc28:	44 c0       	rjmp	.+136    	; 0xbcb2 <f_chdir+0xae>
    bc2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    bc2c:	98 a9       	ldd	r25, Y+48	; 0x30
    bc2e:	9a 83       	std	Y+2, r25	; 0x02
    bc30:	89 83       	std	Y+1, r24	; 0x01
    bc32:	80 e0       	ldi	r24, 0x00	; 0
    bc34:	92 e0       	ldi	r25, 0x02	; 2
    bc36:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    bc3a:	7c 01       	movw	r14, r24
    bc3c:	00 97       	sbiw	r24, 0x00	; 0
    bc3e:	a9 f1       	breq	.+106    	; 0xbcaa <f_chdir+0xa6>
    bc40:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc42:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc44:	94 87       	std	Z+12, r25	; 0x0c
    bc46:	83 87       	std	Z+11, r24	; 0x0b
    bc48:	69 a9       	ldd	r22, Y+49	; 0x31
    bc4a:	7a a9       	ldd	r23, Y+50	; 0x32
    bc4c:	ce 01       	movw	r24, r28
    bc4e:	01 96       	adiw	r24, 0x01	; 1
    bc50:	03 d8       	rcall	.-4090   	; 0xac58 <follow_path>
    bc52:	8c 01       	movw	r16, r24
    bc54:	89 2b       	or	r24, r25
    bc56:	09 f5       	brne	.+66     	; 0xbc9a <f_chdir+0x96>
    bc58:	88 a5       	ldd	r24, Y+40	; 0x28
    bc5a:	87 ff       	sbrs	r24, 7
    bc5c:	0b c0       	rjmp	.+22     	; 0xbc74 <f_chdir+0x70>
    bc5e:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc60:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc62:	8f 81       	ldd	r24, Y+7	; 0x07
    bc64:	98 85       	ldd	r25, Y+8	; 0x08
    bc66:	a9 85       	ldd	r26, Y+9	; 0x09
    bc68:	ba 85       	ldd	r27, Y+10	; 0x0a
    bc6a:	85 8b       	std	Z+21, r24	; 0x15
    bc6c:	96 8b       	std	Z+22, r25	; 0x16
    bc6e:	a7 8b       	std	Z+23, r26	; 0x17
    bc70:	b0 8f       	std	Z+24, r27	; 0x18
    bc72:	13 c0       	rjmp	.+38     	; 0xbc9a <f_chdir+0x96>
    bc74:	8d 81       	ldd	r24, Y+5	; 0x05
    bc76:	84 ff       	sbrs	r24, 4
    bc78:	0e c0       	rjmp	.+28     	; 0xbc96 <f_chdir+0x92>
    bc7a:	cf a4       	ldd	r12, Y+47	; 0x2f
    bc7c:	d8 a8       	ldd	r13, Y+48	; 0x30
    bc7e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bc80:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bc82:	f6 01       	movw	r30, r12
    bc84:	80 81       	ld	r24, Z
    bc86:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    bc8a:	f6 01       	movw	r30, r12
    bc8c:	65 8b       	std	Z+21, r22	; 0x15
    bc8e:	76 8b       	std	Z+22, r23	; 0x16
    bc90:	87 8b       	std	Z+23, r24	; 0x17
    bc92:	90 8f       	std	Z+24, r25	; 0x18
    bc94:	02 c0       	rjmp	.+4      	; 0xbc9a <f_chdir+0x96>
    bc96:	05 e0       	ldi	r16, 0x05	; 5
    bc98:	10 e0       	ldi	r17, 0x00	; 0
    bc9a:	c7 01       	movw	r24, r14
    bc9c:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    bca0:	04 30       	cpi	r16, 0x04	; 4
    bca2:	11 05       	cpc	r17, r1
    bca4:	29 f4       	brne	.+10     	; 0xbcb0 <f_chdir+0xac>
    bca6:	85 e0       	ldi	r24, 0x05	; 5
    bca8:	01 c0       	rjmp	.+2      	; 0xbcac <f_chdir+0xa8>
    bcaa:	81 e1       	ldi	r24, 0x11	; 17
    bcac:	90 e0       	ldi	r25, 0x00	; 0
    bcae:	01 c0       	rjmp	.+2      	; 0xbcb2 <f_chdir+0xae>
    bcb0:	c8 01       	movw	r24, r16
    bcb2:	e2 96       	adiw	r28, 0x32	; 50
    bcb4:	e8 e0       	ldi	r30, 0x08	; 8
    bcb6:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000bcba <f_getcwd>:
    bcba:	a8 e4       	ldi	r26, 0x48	; 72
    bcbc:	b1 e0       	ldi	r27, 0x01	; 1
    bcbe:	e3 e6       	ldi	r30, 0x63	; 99
    bcc0:	fe e5       	ldi	r31, 0x5E	; 94
    bcc2:	0c 94 1c eb 	jmp	0x1d638	; 0x1d638 <__prologue_saves__+0x2>
    bcc6:	c9 5b       	subi	r28, 0xB9	; 185
    bcc8:	de 4f       	sbci	r29, 0xFE	; 254
    bcca:	99 83       	std	Y+1, r25	; 0x01
    bccc:	88 83       	st	Y, r24
    bcce:	c7 54       	subi	r28, 0x47	; 71
    bcd0:	d1 40       	sbci	r29, 0x01	; 1
    bcd2:	5b 01       	movw	r10, r22
    bcd4:	fc 01       	movw	r30, r24
    bcd6:	10 82       	st	Z, r1
    bcd8:	40 e0       	ldi	r20, 0x00	; 0
    bcda:	be 01       	movw	r22, r28
    bcdc:	6b 5b       	subi	r22, 0xBB	; 187
    bcde:	7e 4f       	sbci	r23, 0xFE	; 254
    bce0:	ce 01       	movw	r24, r28
    bce2:	89 5b       	subi	r24, 0xB9	; 185
    bce4:	9e 4f       	sbci	r25, 0xFE	; 254
    bce6:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    bcea:	8c 01       	movw	r16, r24
    bcec:	89 2b       	or	r24, r25
    bcee:	09 f0       	breq	.+2      	; 0xbcf2 <f_getcwd+0x38>
    bcf0:	08 c1       	rjmp	.+528    	; 0xbf02 <f_getcwd+0x248>
    bcf2:	cb 5b       	subi	r28, 0xBB	; 187
    bcf4:	de 4f       	sbci	r29, 0xFE	; 254
    bcf6:	88 81       	ld	r24, Y
    bcf8:	99 81       	ldd	r25, Y+1	; 0x01
    bcfa:	c5 54       	subi	r28, 0x45	; 69
    bcfc:	d1 40       	sbci	r29, 0x01	; 1
    bcfe:	c9 5e       	subi	r28, 0xE9	; 233
    bd00:	de 4f       	sbci	r29, 0xFE	; 254
    bd02:	99 83       	std	Y+1, r25	; 0x01
    bd04:	88 83       	st	Y, r24
    bd06:	c7 51       	subi	r28, 0x17	; 23
    bd08:	d1 40       	sbci	r29, 0x01	; 1
    bd0a:	80 e0       	ldi	r24, 0x00	; 0
    bd0c:	92 e0       	ldi	r25, 0x02	; 2
    bd0e:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    bd12:	6c 01       	movw	r12, r24
    bd14:	00 97       	sbiw	r24, 0x00	; 0
    bd16:	09 f4       	brne	.+2      	; 0xbd1a <f_getcwd+0x60>
    bd18:	f6 c0       	rjmp	.+492    	; 0xbf06 <f_getcwd+0x24c>
    bd1a:	cb 5b       	subi	r28, 0xBB	; 187
    bd1c:	de 4f       	sbci	r29, 0xFE	; 254
    bd1e:	e8 81       	ld	r30, Y
    bd20:	f9 81       	ldd	r31, Y+1	; 0x01
    bd22:	c5 54       	subi	r28, 0x45	; 69
    bd24:	d1 40       	sbci	r29, 0x01	; 1
    bd26:	94 87       	std	Z+12, r25	; 0x0c
    bd28:	83 87       	std	Z+11, r24	; 0x0b
    bd2a:	85 89       	ldd	r24, Z+21	; 0x15
    bd2c:	96 89       	ldd	r25, Z+22	; 0x16
    bd2e:	a7 89       	ldd	r26, Z+23	; 0x17
    bd30:	b0 8d       	ldd	r27, Z+24	; 0x18
    bd32:	c3 5e       	subi	r28, 0xE3	; 227
    bd34:	de 4f       	sbci	r29, 0xFE	; 254
    bd36:	88 83       	st	Y, r24
    bd38:	99 83       	std	Y+1, r25	; 0x01
    bd3a:	aa 83       	std	Y+2, r26	; 0x02
    bd3c:	bb 83       	std	Y+3, r27	; 0x03
    bd3e:	cd 51       	subi	r28, 0x1D	; 29
    bd40:	d1 40       	sbci	r29, 0x01	; 1
    bd42:	75 01       	movw	r14, r10
    bd44:	ce 01       	movw	r24, r28
    bd46:	01 96       	adiw	r24, 0x01	; 1
    bd48:	4c 01       	movw	r8, r24
    bd4a:	8f e2       	ldi	r24, 0x2F	; 47
    bd4c:	38 2e       	mov	r3, r24
    bd4e:	c3 5e       	subi	r28, 0xE3	; 227
    bd50:	de 4f       	sbci	r29, 0xFE	; 254
    bd52:	48 80       	ld	r4, Y
    bd54:	59 80       	ldd	r5, Y+1	; 0x01
    bd56:	6a 80       	ldd	r6, Y+2	; 0x02
    bd58:	7b 80       	ldd	r7, Y+3	; 0x03
    bd5a:	cd 51       	subi	r28, 0x1D	; 29
    bd5c:	d1 40       	sbci	r29, 0x01	; 1
    bd5e:	41 14       	cp	r4, r1
    bd60:	51 04       	cpc	r5, r1
    bd62:	61 04       	cpc	r6, r1
    bd64:	71 04       	cpc	r7, r1
    bd66:	09 f4       	brne	.+2      	; 0xbd6a <f_getcwd+0xb0>
    bd68:	a5 c0       	rjmp	.+330    	; 0xbeb4 <f_getcwd+0x1fa>
    bd6a:	40 e2       	ldi	r20, 0x20	; 32
    bd6c:	50 e0       	ldi	r21, 0x00	; 0
    bd6e:	60 e0       	ldi	r22, 0x00	; 0
    bd70:	70 e0       	ldi	r23, 0x00	; 0
    bd72:	ce 01       	movw	r24, r28
    bd74:	89 5e       	subi	r24, 0xE9	; 233
    bd76:	9e 4f       	sbci	r25, 0xFE	; 254
    bd78:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    bd7c:	00 97       	sbiw	r24, 0x00	; 0
    bd7e:	09 f0       	breq	.+2      	; 0xbd82 <f_getcwd+0xc8>
    bd80:	95 c0       	rjmp	.+298    	; 0xbeac <f_getcwd+0x1f2>
    bd82:	c3 5d       	subi	r28, 0xD3	; 211
    bd84:	de 4f       	sbci	r29, 0xFE	; 254
    bd86:	48 81       	ld	r20, Y
    bd88:	59 81       	ldd	r21, Y+1	; 0x01
    bd8a:	6a 81       	ldd	r22, Y+2	; 0x02
    bd8c:	7b 81       	ldd	r23, Y+3	; 0x03
    bd8e:	cd 52       	subi	r28, 0x2D	; 45
    bd90:	d1 40       	sbci	r29, 0x01	; 1
    bd92:	cb 5b       	subi	r28, 0xBB	; 187
    bd94:	de 4f       	sbci	r29, 0xFE	; 254
    bd96:	88 81       	ld	r24, Y
    bd98:	99 81       	ldd	r25, Y+1	; 0x01
    bd9a:	c5 54       	subi	r28, 0x45	; 69
    bd9c:	d1 40       	sbci	r29, 0x01	; 1
    bd9e:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    bda2:	00 97       	sbiw	r24, 0x00	; 0
    bda4:	09 f0       	breq	.+2      	; 0xbda8 <f_getcwd+0xee>
    bda6:	82 c0       	rjmp	.+260    	; 0xbeac <f_getcwd+0x1f2>
    bda8:	cf 5c       	subi	r28, 0xCF	; 207
    bdaa:	de 4f       	sbci	r29, 0xFE	; 254
    bdac:	68 81       	ld	r22, Y
    bdae:	79 81       	ldd	r23, Y+1	; 0x01
    bdb0:	c1 53       	subi	r28, 0x31	; 49
    bdb2:	d1 40       	sbci	r29, 0x01	; 1
    bdb4:	cb 5b       	subi	r28, 0xBB	; 187
    bdb6:	de 4f       	sbci	r29, 0xFE	; 254
    bdb8:	e8 81       	ld	r30, Y
    bdba:	f9 81       	ldd	r31, Y+1	; 0x01
    bdbc:	c5 54       	subi	r28, 0x45	; 69
    bdbe:	d1 40       	sbci	r29, 0x01	; 1
    bdc0:	80 81       	ld	r24, Z
    bdc2:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    bdc6:	c3 5e       	subi	r28, 0xE3	; 227
    bdc8:	de 4f       	sbci	r29, 0xFE	; 254
    bdca:	68 83       	st	Y, r22
    bdcc:	79 83       	std	Y+1, r23	; 0x01
    bdce:	8a 83       	std	Y+2, r24	; 0x02
    bdd0:	9b 83       	std	Y+3, r25	; 0x03
    bdd2:	cd 51       	subi	r28, 0x1D	; 29
    bdd4:	d1 40       	sbci	r29, 0x01	; 1
    bdd6:	40 e0       	ldi	r20, 0x00	; 0
    bdd8:	50 e0       	ldi	r21, 0x00	; 0
    bdda:	ba 01       	movw	r22, r20
    bddc:	ce 01       	movw	r24, r28
    bdde:	89 5e       	subi	r24, 0xE9	; 233
    bde0:	9e 4f       	sbci	r25, 0xFE	; 254
    bde2:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    bde6:	00 97       	sbiw	r24, 0x00	; 0
    bde8:	09 f0       	breq	.+2      	; 0xbdec <f_getcwd+0x132>
    bdea:	60 c0       	rjmp	.+192    	; 0xbeac <f_getcwd+0x1f2>
    bdec:	60 e0       	ldi	r22, 0x00	; 0
    bdee:	70 e0       	ldi	r23, 0x00	; 0
    bdf0:	ce 01       	movw	r24, r28
    bdf2:	89 5e       	subi	r24, 0xE9	; 233
    bdf4:	9e 4f       	sbci	r25, 0xFE	; 254
    bdf6:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <dir_read>
    bdfa:	00 97       	sbiw	r24, 0x00	; 0
    bdfc:	09 f0       	breq	.+2      	; 0xbe00 <f_getcwd+0x146>
    bdfe:	86 c0       	rjmp	.+268    	; 0xbf0c <f_getcwd+0x252>
    be00:	cf 5c       	subi	r28, 0xCF	; 207
    be02:	de 4f       	sbci	r29, 0xFE	; 254
    be04:	68 81       	ld	r22, Y
    be06:	79 81       	ldd	r23, Y+1	; 0x01
    be08:	c1 53       	subi	r28, 0x31	; 49
    be0a:	d1 40       	sbci	r29, 0x01	; 1
    be0c:	cb 5b       	subi	r28, 0xBB	; 187
    be0e:	de 4f       	sbci	r29, 0xFE	; 254
    be10:	e8 81       	ld	r30, Y
    be12:	f9 81       	ldd	r31, Y+1	; 0x01
    be14:	c5 54       	subi	r28, 0x45	; 69
    be16:	d1 40       	sbci	r29, 0x01	; 1
    be18:	80 81       	ld	r24, Z
    be1a:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    be1e:	46 16       	cp	r4, r22
    be20:	57 06       	cpc	r5, r23
    be22:	68 06       	cpc	r6, r24
    be24:	79 06       	cpc	r7, r25
    be26:	41 f4       	brne	.+16     	; 0xbe38 <f_getcwd+0x17e>
    be28:	b4 01       	movw	r22, r8
    be2a:	ce 01       	movw	r24, r28
    be2c:	89 5e       	subi	r24, 0xE9	; 233
    be2e:	9e 4f       	sbci	r25, 0xFE	; 254
    be30:	0e 94 21 50 	call	0xa042	; 0xa042 <get_fileinfo>
    be34:	f4 01       	movw	r30, r8
    be36:	0a c0       	rjmp	.+20     	; 0xbe4c <f_getcwd+0x192>
    be38:	60 e0       	ldi	r22, 0x00	; 0
    be3a:	70 e0       	ldi	r23, 0x00	; 0
    be3c:	ce 01       	movw	r24, r28
    be3e:	89 5e       	subi	r24, 0xE9	; 233
    be40:	9e 4f       	sbci	r25, 0xFE	; 254
    be42:	0e 94 f9 50 	call	0xa1f2	; 0xa1f2 <dir_next>
    be46:	00 97       	sbiw	r24, 0x00	; 0
    be48:	89 f2       	breq	.-94     	; 0xbdec <f_getcwd+0x132>
    be4a:	60 c0       	rjmp	.+192    	; 0xbf0c <f_getcwd+0x252>
    be4c:	cf 01       	movw	r24, r30
    be4e:	88 19       	sub	r24, r8
    be50:	99 09       	sbc	r25, r9
    be52:	31 96       	adiw	r30, 0x01	; 1
    be54:	25 89       	ldd	r18, Z+21	; 0x15
    be56:	21 11       	cpse	r18, r1
    be58:	f9 cf       	rjmp	.-14     	; 0xbe4c <f_getcwd+0x192>
    be5a:	9c 01       	movw	r18, r24
    be5c:	2d 5f       	subi	r18, 0xFD	; 253
    be5e:	3f 4f       	sbci	r19, 0xFF	; 255
    be60:	e2 16       	cp	r14, r18
    be62:	f3 06       	cpc	r15, r19
    be64:	28 f1       	brcs	.+74     	; 0xbeb0 <f_getcwd+0x1f6>
    be66:	f4 01       	movw	r30, r8
    be68:	e8 0f       	add	r30, r24
    be6a:	f9 1f       	adc	r31, r25
    be6c:	97 01       	movw	r18, r14
    be6e:	e8 15       	cp	r30, r8
    be70:	f9 05       	cpc	r31, r9
    be72:	71 f0       	breq	.+28     	; 0xbe90 <f_getcwd+0x1d6>
    be74:	21 50       	subi	r18, 0x01	; 1
    be76:	31 09       	sbc	r19, r1
    be78:	45 89       	ldd	r20, Z+21	; 0x15
    be7a:	c9 5b       	subi	r28, 0xB9	; 185
    be7c:	de 4f       	sbci	r29, 0xFE	; 254
    be7e:	a8 81       	ld	r26, Y
    be80:	b9 81       	ldd	r27, Y+1	; 0x01
    be82:	c7 54       	subi	r28, 0x47	; 71
    be84:	d1 40       	sbci	r29, 0x01	; 1
    be86:	a2 0f       	add	r26, r18
    be88:	b3 1f       	adc	r27, r19
    be8a:	4c 93       	st	X, r20
    be8c:	31 97       	sbiw	r30, 0x01	; 1
    be8e:	ef cf       	rjmp	.-34     	; 0xbe6e <f_getcwd+0x1b4>
    be90:	80 95       	com	r24
    be92:	90 95       	com	r25
    be94:	e8 0e       	add	r14, r24
    be96:	f9 1e       	adc	r15, r25
    be98:	c9 5b       	subi	r28, 0xB9	; 185
    be9a:	de 4f       	sbci	r29, 0xFE	; 254
    be9c:	e8 81       	ld	r30, Y
    be9e:	f9 81       	ldd	r31, Y+1	; 0x01
    bea0:	c7 54       	subi	r28, 0x47	; 71
    bea2:	d1 40       	sbci	r29, 0x01	; 1
    bea4:	ee 0d       	add	r30, r14
    bea6:	ff 1d       	adc	r31, r15
    bea8:	30 82       	st	Z, r3
    beaa:	51 cf       	rjmp	.-350    	; 0xbd4e <f_getcwd+0x94>
    beac:	8c 01       	movw	r16, r24
    beae:	02 c0       	rjmp	.+4      	; 0xbeb4 <f_getcwd+0x1fa>
    beb0:	01 e1       	ldi	r16, 0x11	; 17
    beb2:	10 e0       	ldi	r17, 0x00	; 0
    beb4:	c9 5b       	subi	r28, 0xB9	; 185
    beb6:	de 4f       	sbci	r29, 0xFE	; 254
    beb8:	e8 81       	ld	r30, Y
    beba:	f9 81       	ldd	r31, Y+1	; 0x01
    bebc:	c7 54       	subi	r28, 0x47	; 71
    bebe:	d1 40       	sbci	r29, 0x01	; 1
    bec0:	01 15       	cp	r16, r1
    bec2:	11 05       	cpc	r17, r1
    bec4:	d1 f4       	brne	.+52     	; 0xbefa <f_getcwd+0x240>
    bec6:	ea 14       	cp	r14, r10
    bec8:	fb 04       	cpc	r15, r11
    beca:	21 f4       	brne	.+8      	; 0xbed4 <f_getcwd+0x21a>
    becc:	8f e2       	ldi	r24, 0x2F	; 47
    bece:	80 83       	st	Z, r24
    bed0:	31 96       	adiw	r30, 0x01	; 1
    bed2:	13 c0       	rjmp	.+38     	; 0xbefa <f_getcwd+0x240>
    bed4:	31 96       	adiw	r30, 0x01	; 1
    bed6:	c9 5b       	subi	r28, 0xB9	; 185
    bed8:	de 4f       	sbci	r29, 0xFE	; 254
    beda:	a8 81       	ld	r26, Y
    bedc:	b9 81       	ldd	r27, Y+1	; 0x01
    bede:	c7 54       	subi	r28, 0x47	; 71
    bee0:	d1 40       	sbci	r29, 0x01	; 1
    bee2:	ae 0d       	add	r26, r14
    bee4:	bf 1d       	adc	r27, r15
    bee6:	8c 91       	ld	r24, X
    bee8:	df 01       	movw	r26, r30
    beea:	11 97       	sbiw	r26, 0x01	; 1
    beec:	8c 93       	st	X, r24
    beee:	c7 01       	movw	r24, r14
    bef0:	01 96       	adiw	r24, 0x01	; 1
    bef2:	7c 01       	movw	r14, r24
    bef4:	8a 15       	cp	r24, r10
    bef6:	9b 05       	cpc	r25, r11
    bef8:	68 f3       	brcs	.-38     	; 0xbed4 <f_getcwd+0x21a>
    befa:	10 82       	st	Z, r1
    befc:	c6 01       	movw	r24, r12
    befe:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    bf02:	c8 01       	movw	r24, r16
    bf04:	09 c0       	rjmp	.+18     	; 0xbf18 <f_getcwd+0x25e>
    bf06:	81 e1       	ldi	r24, 0x11	; 17
    bf08:	90 e0       	ldi	r25, 0x00	; 0
    bf0a:	06 c0       	rjmp	.+12     	; 0xbf18 <f_getcwd+0x25e>
    bf0c:	8c 01       	movw	r16, r24
    bf0e:	04 97       	sbiw	r24, 0x04	; 4
    bf10:	89 f6       	brne	.-94     	; 0xbeb4 <f_getcwd+0x1fa>
    bf12:	02 e0       	ldi	r16, 0x02	; 2
    bf14:	10 e0       	ldi	r17, 0x00	; 0
    bf16:	ce cf       	rjmp	.-100    	; 0xbeb4 <f_getcwd+0x1fa>
    bf18:	c8 5b       	subi	r28, 0xB8	; 184
    bf1a:	de 4f       	sbci	r29, 0xFE	; 254
    bf1c:	e1 e1       	ldi	r30, 0x11	; 17
    bf1e:	0c 94 38 eb 	jmp	0x1d670	; 0x1d670 <__epilogue_restores__+0x2>

0000bf22 <f_lseek>:
    bf22:	aa e0       	ldi	r26, 0x0A	; 10
    bf24:	b0 e0       	ldi	r27, 0x00	; 0
    bf26:	e7 e9       	ldi	r30, 0x97	; 151
    bf28:	ff e5       	ldi	r31, 0x5F	; 95
    bf2a:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    bf2e:	1c 01       	movw	r2, r24
    bf30:	6a 01       	movw	r12, r20
    bf32:	7b 01       	movw	r14, r22
    bf34:	be 01       	movw	r22, r28
    bf36:	6f 5f       	subi	r22, 0xFF	; 255
    bf38:	7f 4f       	sbci	r23, 0xFF	; 255
    bf3a:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    bf3e:	00 97       	sbiw	r24, 0x00	; 0
    bf40:	09 f0       	breq	.+2      	; 0xbf44 <f_lseek+0x22>
    bf42:	c8 c2       	rjmp	.+1424   	; 0xc4d4 <f_lseek+0x5b2>
    bf44:	d1 01       	movw	r26, r2
    bf46:	1f 96       	adiw	r26, 0x0f	; 15
    bf48:	8c 91       	ld	r24, X
    bf4a:	1f 97       	sbiw	r26, 0x0f	; 15
    bf4c:	90 e0       	ldi	r25, 0x00	; 0
    bf4e:	00 97       	sbiw	r24, 0x00	; 0
    bf50:	09 f0       	breq	.+2      	; 0xbf54 <f_lseek+0x32>
    bf52:	c0 c2       	rjmp	.+1408   	; 0xc4d4 <f_lseek+0x5b2>
    bf54:	92 96       	adiw	r26, 0x22	; 34
    bf56:	ed 91       	ld	r30, X+
    bf58:	fc 91       	ld	r31, X
    bf5a:	93 97       	sbiw	r26, 0x23	; 35
    bf5c:	30 97       	sbiw	r30, 0x00	; 0
    bf5e:	09 f4       	brne	.+2      	; 0xbf62 <f_lseek+0x40>
    bf60:	3a c1       	rjmp	.+628    	; 0xc1d6 <f_lseek+0x2b4>
    bf62:	bf ef       	ldi	r27, 0xFF	; 255
    bf64:	cb 16       	cp	r12, r27
    bf66:	db 06       	cpc	r13, r27
    bf68:	eb 06       	cpc	r14, r27
    bf6a:	fb 06       	cpc	r15, r27
    bf6c:	09 f0       	breq	.+2      	; 0xbf70 <f_lseek+0x4e>
    bf6e:	9f c0       	rjmp	.+318    	; 0xc0ae <f_lseek+0x18c>
    bf70:	8f 01       	movw	r16, r30
    bf72:	0c 5f       	subi	r16, 0xFC	; 252
    bf74:	1f 4f       	sbci	r17, 0xFF	; 255
    bf76:	20 81       	ld	r18, Z
    bf78:	31 81       	ldd	r19, Z+1	; 0x01
    bf7a:	42 81       	ldd	r20, Z+2	; 0x02
    bf7c:	53 81       	ldd	r21, Z+3	; 0x03
    bf7e:	2f 83       	std	Y+7, r18	; 0x07
    bf80:	38 87       	std	Y+8, r19	; 0x08
    bf82:	49 87       	std	Y+9, r20	; 0x09
    bf84:	5a 87       	std	Y+10, r21	; 0x0a
    bf86:	d1 01       	movw	r26, r2
    bf88:	16 96       	adiw	r26, 0x06	; 6
    bf8a:	8d 90       	ld	r8, X+
    bf8c:	9d 90       	ld	r9, X+
    bf8e:	ad 90       	ld	r10, X+
    bf90:	bc 90       	ld	r11, X
    bf92:	19 97       	sbiw	r26, 0x09	; 9
    bf94:	52 e0       	ldi	r21, 0x02	; 2
    bf96:	c5 2e       	mov	r12, r21
    bf98:	d1 2c       	mov	r13, r1
    bf9a:	e1 2c       	mov	r14, r1
    bf9c:	f1 2c       	mov	r15, r1
    bf9e:	81 14       	cp	r8, r1
    bfa0:	91 04       	cpc	r9, r1
    bfa2:	a1 04       	cpc	r10, r1
    bfa4:	b1 04       	cpc	r11, r1
    bfa6:	09 f4       	brne	.+2      	; 0xbfaa <f_lseek+0x88>
    bfa8:	68 c0       	rjmp	.+208    	; 0xc07a <f_lseek+0x158>
    bfaa:	24 01       	movw	r4, r8
    bfac:	35 01       	movw	r6, r10
    bfae:	1b 82       	std	Y+3, r1	; 0x03
    bfb0:	1c 82       	std	Y+4, r1	; 0x04
    bfb2:	1d 82       	std	Y+5, r1	; 0x05
    bfb4:	1e 82       	std	Y+6, r1	; 0x06
    bfb6:	2b 81       	ldd	r18, Y+3	; 0x03
    bfb8:	3c 81       	ldd	r19, Y+4	; 0x04
    bfba:	4d 81       	ldd	r20, Y+5	; 0x05
    bfbc:	5e 81       	ldd	r21, Y+6	; 0x06
    bfbe:	2f 5f       	subi	r18, 0xFF	; 255
    bfc0:	3f 4f       	sbci	r19, 0xFF	; 255
    bfc2:	4f 4f       	sbci	r20, 0xFF	; 255
    bfc4:	5f 4f       	sbci	r21, 0xFF	; 255
    bfc6:	2b 83       	std	Y+3, r18	; 0x03
    bfc8:	3c 83       	std	Y+4, r19	; 0x04
    bfca:	4d 83       	std	Y+5, r20	; 0x05
    bfcc:	5e 83       	std	Y+6, r21	; 0x06
    bfce:	b3 01       	movw	r22, r6
    bfd0:	a2 01       	movw	r20, r4
    bfd2:	d1 01       	movw	r26, r2
    bfd4:	8d 91       	ld	r24, X+
    bfd6:	9c 91       	ld	r25, X
    bfd8:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <get_fat.isra.7>
    bfdc:	62 30       	cpi	r22, 0x02	; 2
    bfde:	71 05       	cpc	r23, r1
    bfe0:	81 05       	cpc	r24, r1
    bfe2:	91 05       	cpc	r25, r1
    bfe4:	20 f4       	brcc	.+8      	; 0xbfee <f_lseek+0xcc>
    bfe6:	82 e0       	ldi	r24, 0x02	; 2
    bfe8:	f1 01       	movw	r30, r2
    bfea:	87 87       	std	Z+15, r24	; 0x0f
    bfec:	0a c0       	rjmp	.+20     	; 0xc002 <f_lseek+0xe0>
    bfee:	6f 3f       	cpi	r22, 0xFF	; 255
    bff0:	ff ef       	ldi	r31, 0xFF	; 255
    bff2:	7f 07       	cpc	r23, r31
    bff4:	8f 07       	cpc	r24, r31
    bff6:	9f 07       	cpc	r25, r31
    bff8:	31 f4       	brne	.+12     	; 0xc006 <f_lseek+0xe4>
    bffa:	81 e0       	ldi	r24, 0x01	; 1
    bffc:	d1 01       	movw	r26, r2
    bffe:	1f 96       	adiw	r26, 0x0f	; 15
    c000:	8c 93       	st	X, r24
    c002:	90 e0       	ldi	r25, 0x00	; 0
    c004:	67 c2       	rjmp	.+1230   	; 0xc4d4 <f_lseek+0x5b2>
    c006:	a3 01       	movw	r20, r6
    c008:	92 01       	movw	r18, r4
    c00a:	2f 5f       	subi	r18, 0xFF	; 255
    c00c:	3f 4f       	sbci	r19, 0xFF	; 255
    c00e:	4f 4f       	sbci	r20, 0xFF	; 255
    c010:	5f 4f       	sbci	r21, 0xFF	; 255
    c012:	2b 01       	movw	r4, r22
    c014:	3c 01       	movw	r6, r24
    c016:	62 17       	cp	r22, r18
    c018:	73 07       	cpc	r23, r19
    c01a:	84 07       	cpc	r24, r20
    c01c:	95 07       	cpc	r25, r21
    c01e:	59 f2       	breq	.-106    	; 0xbfb6 <f_lseek+0x94>
    c020:	b2 e0       	ldi	r27, 0x02	; 2
    c022:	cb 0e       	add	r12, r27
    c024:	d1 1c       	adc	r13, r1
    c026:	e1 1c       	adc	r14, r1
    c028:	f1 1c       	adc	r15, r1
    c02a:	2f 81       	ldd	r18, Y+7	; 0x07
    c02c:	38 85       	ldd	r19, Y+8	; 0x08
    c02e:	49 85       	ldd	r20, Y+9	; 0x09
    c030:	5a 85       	ldd	r21, Y+10	; 0x0a
    c032:	2c 15       	cp	r18, r12
    c034:	3d 05       	cpc	r19, r13
    c036:	4e 05       	cpc	r20, r14
    c038:	5f 05       	cpc	r21, r15
    c03a:	88 f0       	brcs	.+34     	; 0xc05e <f_lseek+0x13c>
    c03c:	2b 81       	ldd	r18, Y+3	; 0x03
    c03e:	3c 81       	ldd	r19, Y+4	; 0x04
    c040:	4d 81       	ldd	r20, Y+5	; 0x05
    c042:	5e 81       	ldd	r21, Y+6	; 0x06
    c044:	d8 01       	movw	r26, r16
    c046:	2d 93       	st	X+, r18
    c048:	3d 93       	st	X+, r19
    c04a:	4d 93       	st	X+, r20
    c04c:	5c 93       	st	X, r21
    c04e:	13 97       	sbiw	r26, 0x03	; 3
    c050:	f8 01       	movw	r30, r16
    c052:	84 82       	std	Z+4, r8	; 0x04
    c054:	95 82       	std	Z+5, r9	; 0x05
    c056:	a6 82       	std	Z+6, r10	; 0x06
    c058:	b7 82       	std	Z+7, r11	; 0x07
    c05a:	08 5f       	subi	r16, 0xF8	; 248
    c05c:	1f 4f       	sbci	r17, 0xFF	; 255
    c05e:	e9 81       	ldd	r30, Y+1	; 0x01
    c060:	fa 81       	ldd	r31, Y+2	; 0x02
    c062:	81 8c       	ldd	r8, Z+25	; 0x19
    c064:	92 8c       	ldd	r9, Z+26	; 0x1a
    c066:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c068:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c06a:	68 15       	cp	r22, r8
    c06c:	79 05       	cpc	r23, r9
    c06e:	8a 05       	cpc	r24, r10
    c070:	9b 05       	cpc	r25, r11
    c072:	18 f4       	brcc	.+6      	; 0xc07a <f_lseek+0x158>
    c074:	4b 01       	movw	r8, r22
    c076:	5c 01       	movw	r10, r24
    c078:	98 cf       	rjmp	.-208    	; 0xbfaa <f_lseek+0x88>
    c07a:	d1 01       	movw	r26, r2
    c07c:	92 96       	adiw	r26, 0x22	; 34
    c07e:	ed 91       	ld	r30, X+
    c080:	fc 91       	ld	r31, X
    c082:	93 97       	sbiw	r26, 0x23	; 35
    c084:	c0 82       	st	Z, r12
    c086:	d1 82       	std	Z+1, r13	; 0x01
    c088:	e2 82       	std	Z+2, r14	; 0x02
    c08a:	f3 82       	std	Z+3, r15	; 0x03
    c08c:	2f 81       	ldd	r18, Y+7	; 0x07
    c08e:	38 85       	ldd	r19, Y+8	; 0x08
    c090:	49 85       	ldd	r20, Y+9	; 0x09
    c092:	5a 85       	ldd	r21, Y+10	; 0x0a
    c094:	2c 15       	cp	r18, r12
    c096:	3d 05       	cpc	r19, r13
    c098:	4e 05       	cpc	r20, r14
    c09a:	5f 05       	cpc	r21, r15
    c09c:	08 f4       	brcc	.+2      	; 0xc0a0 <f_lseek+0x17e>
    c09e:	11 c2       	rjmp	.+1058   	; 0xc4c2 <f_lseek+0x5a0>
    c0a0:	d8 01       	movw	r26, r16
    c0a2:	1d 92       	st	X+, r1
    c0a4:	1d 92       	st	X+, r1
    c0a6:	1d 92       	st	X+, r1
    c0a8:	1c 92       	st	X, r1
    c0aa:	13 97       	sbiw	r26, 0x03	; 3
    c0ac:	08 c2       	rjmp	.+1040   	; 0xc4be <f_lseek+0x59c>
    c0ae:	f1 01       	movw	r30, r2
    c0b0:	82 85       	ldd	r24, Z+10	; 0x0a
    c0b2:	93 85       	ldd	r25, Z+11	; 0x0b
    c0b4:	a4 85       	ldd	r26, Z+12	; 0x0c
    c0b6:	b5 85       	ldd	r27, Z+13	; 0x0d
    c0b8:	46 01       	movw	r8, r12
    c0ba:	57 01       	movw	r10, r14
    c0bc:	8c 15       	cp	r24, r12
    c0be:	9d 05       	cpc	r25, r13
    c0c0:	ae 05       	cpc	r26, r14
    c0c2:	bf 05       	cpc	r27, r15
    c0c4:	10 f4       	brcc	.+4      	; 0xc0ca <f_lseek+0x1a8>
    c0c6:	4c 01       	movw	r8, r24
    c0c8:	5d 01       	movw	r10, r26
    c0ca:	d1 01       	movw	r26, r2
    c0cc:	50 96       	adiw	r26, 0x10	; 16
    c0ce:	8d 92       	st	X+, r8
    c0d0:	9d 92       	st	X+, r9
    c0d2:	ad 92       	st	X+, r10
    c0d4:	bc 92       	st	X, r11
    c0d6:	53 97       	sbiw	r26, 0x13	; 19
    c0d8:	81 14       	cp	r8, r1
    c0da:	91 04       	cpc	r9, r1
    c0dc:	a1 04       	cpc	r10, r1
    c0de:	b1 04       	cpc	r11, r1
    c0e0:	09 f4       	brne	.+2      	; 0xc0e4 <f_lseek+0x1c2>
    c0e2:	ed c1       	rjmp	.+986    	; 0xc4be <f_lseek+0x59c>
    c0e4:	24 01       	movw	r4, r8
    c0e6:	35 01       	movw	r6, r10
    c0e8:	b1 e0       	ldi	r27, 0x01	; 1
    c0ea:	4b 1a       	sub	r4, r27
    c0ec:	51 08       	sbc	r5, r1
    c0ee:	61 08       	sbc	r6, r1
    c0f0:	71 08       	sbc	r7, r1
    c0f2:	b3 01       	movw	r22, r6
    c0f4:	a2 01       	movw	r20, r4
    c0f6:	c1 01       	movw	r24, r2
    c0f8:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <clmt_clust>
    c0fc:	ab 01       	movw	r20, r22
    c0fe:	bc 01       	movw	r22, r24
    c100:	f1 01       	movw	r30, r2
    c102:	44 8b       	std	Z+20, r20	; 0x14
    c104:	55 8b       	std	Z+21, r21	; 0x15
    c106:	66 8b       	std	Z+22, r22	; 0x16
    c108:	77 8b       	std	Z+23, r23	; 0x17
    c10a:	e9 80       	ldd	r14, Y+1	; 0x01
    c10c:	fa 80       	ldd	r15, Y+2	; 0x02
    c10e:	c7 01       	movw	r24, r14
    c110:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    c114:	61 15       	cp	r22, r1
    c116:	71 05       	cpc	r23, r1
    c118:	81 05       	cpc	r24, r1
    c11a:	91 05       	cpc	r25, r1
    c11c:	09 f4       	brne	.+2      	; 0xc120 <f_lseek+0x1fe>
    c11e:	63 cf       	rjmp	.-314    	; 0xbfe6 <f_lseek+0xc4>
    c120:	95 01       	movw	r18, r10
    c122:	84 01       	movw	r16, r8
    c124:	11 70       	andi	r17, 0x01	; 1
    c126:	22 27       	eor	r18, r18
    c128:	33 27       	eor	r19, r19
    c12a:	01 15       	cp	r16, r1
    c12c:	11 05       	cpc	r17, r1
    c12e:	21 05       	cpc	r18, r1
    c130:	31 05       	cpc	r19, r1
    c132:	09 f4       	brne	.+2      	; 0xc136 <f_lseek+0x214>
    c134:	c4 c1       	rjmp	.+904    	; 0xc4be <f_lseek+0x59c>
    c136:	d7 01       	movw	r26, r14
    c138:	19 96       	adiw	r26, 0x09	; 9
    c13a:	8d 90       	ld	r8, X+
    c13c:	9c 90       	ld	r9, X
    c13e:	1a 97       	sbiw	r26, 0x0a	; 10
    c140:	b1 e0       	ldi	r27, 0x01	; 1
    c142:	8b 1a       	sub	r8, r27
    c144:	91 08       	sbc	r9, r1
    c146:	a1 2c       	mov	r10, r1
    c148:	b1 2c       	mov	r11, r1
    c14a:	49 e0       	ldi	r20, 0x09	; 9
    c14c:	76 94       	lsr	r7
    c14e:	67 94       	ror	r6
    c150:	57 94       	ror	r5
    c152:	47 94       	ror	r4
    c154:	4a 95       	dec	r20
    c156:	d1 f7       	brne	.-12     	; 0xc14c <f_lseek+0x22a>
    c158:	48 20       	and	r4, r8
    c15a:	59 20       	and	r5, r9
    c15c:	6a 20       	and	r6, r10
    c15e:	7b 20       	and	r7, r11
    c160:	53 01       	movw	r10, r6
    c162:	42 01       	movw	r8, r4
    c164:	86 0e       	add	r8, r22
    c166:	97 1e       	adc	r9, r23
    c168:	a8 1e       	adc	r10, r24
    c16a:	b9 1e       	adc	r11, r25
    c16c:	f1 01       	movw	r30, r2
    c16e:	20 8d       	ldd	r18, Z+24	; 0x18
    c170:	31 8d       	ldd	r19, Z+25	; 0x19
    c172:	42 8d       	ldd	r20, Z+26	; 0x1a
    c174:	53 8d       	ldd	r21, Z+27	; 0x1b
    c176:	82 16       	cp	r8, r18
    c178:	93 06       	cpc	r9, r19
    c17a:	a4 06       	cpc	r10, r20
    c17c:	b5 06       	cpc	r11, r21
    c17e:	09 f4       	brne	.+2      	; 0xc182 <f_lseek+0x260>
    c180:	9e c1       	rjmp	.+828    	; 0xc4be <f_lseek+0x59c>
    c182:	86 85       	ldd	r24, Z+14	; 0x0e
    c184:	b1 01       	movw	r22, r2
    c186:	6c 5d       	subi	r22, 0xDC	; 220
    c188:	7f 4f       	sbci	r23, 0xFF	; 255
    c18a:	6b 01       	movw	r12, r22
    c18c:	87 ff       	sbrs	r24, 7
    c18e:	0e c0       	rjmp	.+28     	; 0xc1ac <f_lseek+0x28a>
    c190:	01 e0       	ldi	r16, 0x01	; 1
    c192:	10 e0       	ldi	r17, 0x00	; 0
    c194:	d7 01       	movw	r26, r14
    c196:	11 96       	adiw	r26, 0x01	; 1
    c198:	8c 91       	ld	r24, X
    c19a:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    c19e:	89 2b       	or	r24, r25
    c1a0:	09 f0       	breq	.+2      	; 0xc1a4 <f_lseek+0x282>
    c1a2:	2b cf       	rjmp	.-426    	; 0xbffa <f_lseek+0xd8>
    c1a4:	f1 01       	movw	r30, r2
    c1a6:	86 85       	ldd	r24, Z+14	; 0x0e
    c1a8:	8f 77       	andi	r24, 0x7F	; 127
    c1aa:	86 87       	std	Z+14, r24	; 0x0e
    c1ac:	e9 81       	ldd	r30, Y+1	; 0x01
    c1ae:	fa 81       	ldd	r31, Y+2	; 0x02
    c1b0:	01 e0       	ldi	r16, 0x01	; 1
    c1b2:	10 e0       	ldi	r17, 0x00	; 0
    c1b4:	a5 01       	movw	r20, r10
    c1b6:	94 01       	movw	r18, r8
    c1b8:	b6 01       	movw	r22, r12
    c1ba:	81 81       	ldd	r24, Z+1	; 0x01
    c1bc:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    c1c0:	89 2b       	or	r24, r25
    c1c2:	09 f0       	breq	.+2      	; 0xc1c6 <f_lseek+0x2a4>
    c1c4:	1a cf       	rjmp	.-460    	; 0xbffa <f_lseek+0xd8>
    c1c6:	d1 01       	movw	r26, r2
    c1c8:	58 96       	adiw	r26, 0x18	; 24
    c1ca:	8d 92       	st	X+, r8
    c1cc:	9d 92       	st	X+, r9
    c1ce:	ad 92       	st	X+, r10
    c1d0:	bc 92       	st	X, r11
    c1d2:	5b 97       	sbiw	r26, 0x1b	; 27
    c1d4:	74 c1       	rjmp	.+744    	; 0xc4be <f_lseek+0x59c>
    c1d6:	f1 01       	movw	r30, r2
    c1d8:	82 85       	ldd	r24, Z+10	; 0x0a
    c1da:	93 85       	ldd	r25, Z+11	; 0x0b
    c1dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1de:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1e0:	8c 15       	cp	r24, r12
    c1e2:	9d 05       	cpc	r25, r13
    c1e4:	ae 05       	cpc	r26, r14
    c1e6:	bf 05       	cpc	r27, r15
    c1e8:	28 f4       	brcc	.+10     	; 0xc1f4 <f_lseek+0x2d2>
    c1ea:	26 85       	ldd	r18, Z+14	; 0x0e
    c1ec:	21 fd       	sbrc	r18, 1
    c1ee:	02 c0       	rjmp	.+4      	; 0xc1f4 <f_lseek+0x2d2>
    c1f0:	6c 01       	movw	r12, r24
    c1f2:	7d 01       	movw	r14, r26
    c1f4:	d1 01       	movw	r26, r2
    c1f6:	50 96       	adiw	r26, 0x10	; 16
    c1f8:	4d 90       	ld	r4, X+
    c1fa:	5d 90       	ld	r5, X+
    c1fc:	6d 90       	ld	r6, X+
    c1fe:	7c 90       	ld	r7, X
    c200:	53 97       	sbiw	r26, 0x13	; 19
    c202:	f1 01       	movw	r30, r2
    c204:	10 8a       	std	Z+16, r1	; 0x10
    c206:	11 8a       	std	Z+17, r1	; 0x11
    c208:	12 8a       	std	Z+18, r1	; 0x12
    c20a:	13 8a       	std	Z+19, r1	; 0x13
    c20c:	c1 14       	cp	r12, r1
    c20e:	d1 04       	cpc	r13, r1
    c210:	e1 04       	cpc	r14, r1
    c212:	f1 04       	cpc	r15, r1
    c214:	09 f4       	brne	.+2      	; 0xc218 <f_lseek+0x2f6>
    c216:	57 c1       	rjmp	.+686    	; 0xc4c6 <f_lseek+0x5a4>
    c218:	e9 81       	ldd	r30, Y+1	; 0x01
    c21a:	fa 81       	ldd	r31, Y+2	; 0x02
    c21c:	81 84       	ldd	r8, Z+9	; 0x09
    c21e:	92 84       	ldd	r9, Z+10	; 0x0a
    c220:	a1 2c       	mov	r10, r1
    c222:	b1 2c       	mov	r11, r1
    c224:	39 e0       	ldi	r19, 0x09	; 9
    c226:	88 0c       	add	r8, r8
    c228:	99 1c       	adc	r9, r9
    c22a:	aa 1c       	adc	r10, r10
    c22c:	bb 1c       	adc	r11, r11
    c22e:	3a 95       	dec	r19
    c230:	d1 f7       	brne	.-12     	; 0xc226 <f_lseek+0x304>
    c232:	41 14       	cp	r4, r1
    c234:	51 04       	cpc	r5, r1
    c236:	61 04       	cpc	r6, r1
    c238:	71 04       	cpc	r7, r1
    c23a:	09 f4       	brne	.+2      	; 0xc23e <f_lseek+0x31c>
    c23c:	3f c0       	rjmp	.+126    	; 0xc2bc <f_lseek+0x39a>
    c23e:	f1 e0       	ldi	r31, 0x01	; 1
    c240:	4f 1a       	sub	r4, r31
    c242:	51 08       	sbc	r5, r1
    c244:	61 08       	sbc	r6, r1
    c246:	71 08       	sbc	r7, r1
    c248:	c7 01       	movw	r24, r14
    c24a:	b6 01       	movw	r22, r12
    c24c:	61 50       	subi	r22, 0x01	; 1
    c24e:	71 09       	sbc	r23, r1
    c250:	81 09       	sbc	r24, r1
    c252:	91 09       	sbc	r25, r1
    c254:	a5 01       	movw	r20, r10
    c256:	94 01       	movw	r18, r8
    c258:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    c25c:	2b 83       	std	Y+3, r18	; 0x03
    c25e:	3c 83       	std	Y+4, r19	; 0x04
    c260:	4d 83       	std	Y+5, r20	; 0x05
    c262:	5e 83       	std	Y+6, r21	; 0x06
    c264:	c3 01       	movw	r24, r6
    c266:	b2 01       	movw	r22, r4
    c268:	a5 01       	movw	r20, r10
    c26a:	94 01       	movw	r18, r8
    c26c:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    c270:	6b 81       	ldd	r22, Y+3	; 0x03
    c272:	7c 81       	ldd	r23, Y+4	; 0x04
    c274:	8d 81       	ldd	r24, Y+5	; 0x05
    c276:	9e 81       	ldd	r25, Y+6	; 0x06
    c278:	62 17       	cp	r22, r18
    c27a:	73 07       	cpc	r23, r19
    c27c:	84 07       	cpc	r24, r20
    c27e:	95 07       	cpc	r25, r21
    c280:	e8 f0       	brcs	.+58     	; 0xc2bc <f_lseek+0x39a>
    c282:	88 27       	eor	r24, r24
    c284:	99 27       	eor	r25, r25
    c286:	dc 01       	movw	r26, r24
    c288:	88 19       	sub	r24, r8
    c28a:	99 09       	sbc	r25, r9
    c28c:	aa 09       	sbc	r26, r10
    c28e:	bb 09       	sbc	r27, r11
    c290:	48 22       	and	r4, r24
    c292:	59 22       	and	r5, r25
    c294:	6a 22       	and	r6, r26
    c296:	7b 22       	and	r7, r27
    c298:	d1 01       	movw	r26, r2
    c29a:	50 96       	adiw	r26, 0x10	; 16
    c29c:	4d 92       	st	X+, r4
    c29e:	5d 92       	st	X+, r5
    c2a0:	6d 92       	st	X+, r6
    c2a2:	7c 92       	st	X, r7
    c2a4:	53 97       	sbiw	r26, 0x13	; 19
    c2a6:	c4 18       	sub	r12, r4
    c2a8:	d5 08       	sbc	r13, r5
    c2aa:	e6 08       	sbc	r14, r6
    c2ac:	f7 08       	sbc	r15, r7
    c2ae:	54 96       	adiw	r26, 0x14	; 20
    c2b0:	4d 91       	ld	r20, X+
    c2b2:	5d 91       	ld	r21, X+
    c2b4:	6d 91       	ld	r22, X+
    c2b6:	7c 91       	ld	r23, X
    c2b8:	57 97       	sbiw	r26, 0x17	; 23
    c2ba:	2b c0       	rjmp	.+86     	; 0xc312 <f_lseek+0x3f0>
    c2bc:	f1 01       	movw	r30, r2
    c2be:	46 81       	ldd	r20, Z+6	; 0x06
    c2c0:	57 81       	ldd	r21, Z+7	; 0x07
    c2c2:	60 85       	ldd	r22, Z+8	; 0x08
    c2c4:	71 85       	ldd	r23, Z+9	; 0x09
    c2c6:	41 15       	cp	r20, r1
    c2c8:	51 05       	cpc	r21, r1
    c2ca:	61 05       	cpc	r22, r1
    c2cc:	71 05       	cpc	r23, r1
    c2ce:	e1 f4       	brne	.+56     	; 0xc308 <f_lseek+0x3e6>
    c2d0:	40 e0       	ldi	r20, 0x00	; 0
    c2d2:	50 e0       	ldi	r21, 0x00	; 0
    c2d4:	ba 01       	movw	r22, r20
    c2d6:	c1 01       	movw	r24, r2
    c2d8:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <create_chain>
    c2dc:	ab 01       	movw	r20, r22
    c2de:	bc 01       	movw	r22, r24
    c2e0:	41 30       	cpi	r20, 0x01	; 1
    c2e2:	51 05       	cpc	r21, r1
    c2e4:	61 05       	cpc	r22, r1
    c2e6:	71 05       	cpc	r23, r1
    c2e8:	09 f4       	brne	.+2      	; 0xc2ec <f_lseek+0x3ca>
    c2ea:	7d ce       	rjmp	.-774    	; 0xbfe6 <f_lseek+0xc4>
    c2ec:	4f 3f       	cpi	r20, 0xFF	; 255
    c2ee:	ff ef       	ldi	r31, 0xFF	; 255
    c2f0:	5f 07       	cpc	r21, r31
    c2f2:	6f 07       	cpc	r22, r31
    c2f4:	7f 07       	cpc	r23, r31
    c2f6:	09 f4       	brne	.+2      	; 0xc2fa <f_lseek+0x3d8>
    c2f8:	80 ce       	rjmp	.-768    	; 0xbffa <f_lseek+0xd8>
    c2fa:	d1 01       	movw	r26, r2
    c2fc:	16 96       	adiw	r26, 0x06	; 6
    c2fe:	4d 93       	st	X+, r20
    c300:	5d 93       	st	X+, r21
    c302:	6d 93       	st	X+, r22
    c304:	7c 93       	st	X, r23
    c306:	19 97       	sbiw	r26, 0x09	; 9
    c308:	f1 01       	movw	r30, r2
    c30a:	44 8b       	std	Z+20, r20	; 0x14
    c30c:	55 8b       	std	Z+21, r21	; 0x15
    c30e:	66 8b       	std	Z+22, r22	; 0x16
    c310:	77 8b       	std	Z+23, r23	; 0x17
    c312:	41 15       	cp	r20, r1
    c314:	51 05       	cpc	r21, r1
    c316:	61 05       	cpc	r22, r1
    c318:	71 05       	cpc	r23, r1
    c31a:	09 f0       	breq	.+2      	; 0xc31e <f_lseek+0x3fc>
    c31c:	40 c0       	rjmp	.+128    	; 0xc39e <f_lseek+0x47c>
    c31e:	c1 2c       	mov	r12, r1
    c320:	d1 2c       	mov	r13, r1
    c322:	76 01       	movw	r14, r12
    c324:	79 c0       	rjmp	.+242    	; 0xc418 <f_lseek+0x4f6>
    c326:	c8 18       	sub	r12, r8
    c328:	d9 08       	sbc	r13, r9
    c32a:	ea 08       	sbc	r14, r10
    c32c:	fb 08       	sbc	r15, r11
    c32e:	f1 01       	movw	r30, r2
    c330:	80 89       	ldd	r24, Z+16	; 0x10
    c332:	91 89       	ldd	r25, Z+17	; 0x11
    c334:	a2 89       	ldd	r26, Z+18	; 0x12
    c336:	b3 89       	ldd	r27, Z+19	; 0x13
    c338:	88 0d       	add	r24, r8
    c33a:	99 1d       	adc	r25, r9
    c33c:	aa 1d       	adc	r26, r10
    c33e:	bb 1d       	adc	r27, r11
    c340:	80 8b       	std	Z+16, r24	; 0x10
    c342:	91 8b       	std	Z+17, r25	; 0x11
    c344:	a2 8b       	std	Z+18, r26	; 0x12
    c346:	b3 8b       	std	Z+19, r27	; 0x13
    c348:	86 85       	ldd	r24, Z+14	; 0x0e
    c34a:	81 ff       	sbrs	r24, 1
    c34c:	2f c0       	rjmp	.+94     	; 0xc3ac <f_lseek+0x48a>
    c34e:	c1 01       	movw	r24, r2
    c350:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <create_chain>
    c354:	ab 01       	movw	r20, r22
    c356:	bc 01       	movw	r22, r24
    c358:	41 15       	cp	r20, r1
    c35a:	51 05       	cpc	r21, r1
    c35c:	61 05       	cpc	r22, r1
    c35e:	71 05       	cpc	r23, r1
    c360:	61 f1       	breq	.+88     	; 0xc3ba <f_lseek+0x498>
    c362:	4f 3f       	cpi	r20, 0xFF	; 255
    c364:	bf ef       	ldi	r27, 0xFF	; 255
    c366:	5b 07       	cpc	r21, r27
    c368:	6b 07       	cpc	r22, r27
    c36a:	7b 07       	cpc	r23, r27
    c36c:	09 f4       	brne	.+2      	; 0xc370 <f_lseek+0x44e>
    c36e:	45 ce       	rjmp	.-886    	; 0xbffa <f_lseek+0xd8>
    c370:	42 30       	cpi	r20, 0x02	; 2
    c372:	51 05       	cpc	r21, r1
    c374:	61 05       	cpc	r22, r1
    c376:	71 05       	cpc	r23, r1
    c378:	08 f4       	brcc	.+2      	; 0xc37c <f_lseek+0x45a>
    c37a:	35 ce       	rjmp	.-918    	; 0xbfe6 <f_lseek+0xc4>
    c37c:	e9 81       	ldd	r30, Y+1	; 0x01
    c37e:	fa 81       	ldd	r31, Y+2	; 0x02
    c380:	81 8d       	ldd	r24, Z+25	; 0x19
    c382:	92 8d       	ldd	r25, Z+26	; 0x1a
    c384:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c386:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c388:	48 17       	cp	r20, r24
    c38a:	59 07       	cpc	r21, r25
    c38c:	6a 07       	cpc	r22, r26
    c38e:	7b 07       	cpc	r23, r27
    c390:	08 f0       	brcs	.+2      	; 0xc394 <f_lseek+0x472>
    c392:	29 ce       	rjmp	.-942    	; 0xbfe6 <f_lseek+0xc4>
    c394:	f1 01       	movw	r30, r2
    c396:	44 8b       	std	Z+20, r20	; 0x14
    c398:	55 8b       	std	Z+21, r21	; 0x15
    c39a:	66 8b       	std	Z+22, r22	; 0x16
    c39c:	77 8b       	std	Z+23, r23	; 0x17
    c39e:	8c 14       	cp	r8, r12
    c3a0:	9d 04       	cpc	r9, r13
    c3a2:	ae 04       	cpc	r10, r14
    c3a4:	bf 04       	cpc	r11, r15
    c3a6:	08 f4       	brcc	.+2      	; 0xc3aa <f_lseek+0x488>
    c3a8:	be cf       	rjmp	.-132    	; 0xc326 <f_lseek+0x404>
    c3aa:	0a c0       	rjmp	.+20     	; 0xc3c0 <f_lseek+0x49e>
    c3ac:	80 81       	ld	r24, Z
    c3ae:	91 81       	ldd	r25, Z+1	; 0x01
    c3b0:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <get_fat.isra.7>
    c3b4:	ab 01       	movw	r20, r22
    c3b6:	bc 01       	movw	r22, r24
    c3b8:	d4 cf       	rjmp	.-88     	; 0xc362 <f_lseek+0x440>
    c3ba:	c1 2c       	mov	r12, r1
    c3bc:	d1 2c       	mov	r13, r1
    c3be:	76 01       	movw	r14, r12
    c3c0:	f1 01       	movw	r30, r2
    c3c2:	80 89       	ldd	r24, Z+16	; 0x10
    c3c4:	91 89       	ldd	r25, Z+17	; 0x11
    c3c6:	a2 89       	ldd	r26, Z+18	; 0x12
    c3c8:	b3 89       	ldd	r27, Z+19	; 0x13
    c3ca:	8c 0d       	add	r24, r12
    c3cc:	9d 1d       	adc	r25, r13
    c3ce:	ae 1d       	adc	r26, r14
    c3d0:	bf 1d       	adc	r27, r15
    c3d2:	80 8b       	std	Z+16, r24	; 0x10
    c3d4:	91 8b       	std	Z+17, r25	; 0x11
    c3d6:	a2 8b       	std	Z+18, r26	; 0x12
    c3d8:	b3 8b       	std	Z+19, r27	; 0x13
    c3da:	d7 01       	movw	r26, r14
    c3dc:	c6 01       	movw	r24, r12
    c3de:	91 70       	andi	r25, 0x01	; 1
    c3e0:	aa 27       	eor	r26, r26
    c3e2:	bb 27       	eor	r27, r27
    c3e4:	89 2b       	or	r24, r25
    c3e6:	8a 2b       	or	r24, r26
    c3e8:	8b 2b       	or	r24, r27
    c3ea:	09 f4       	brne	.+2      	; 0xc3ee <f_lseek+0x4cc>
    c3ec:	98 cf       	rjmp	.-208    	; 0xc31e <f_lseek+0x3fc>
    c3ee:	89 81       	ldd	r24, Y+1	; 0x01
    c3f0:	9a 81       	ldd	r25, Y+2	; 0x02
    c3f2:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    c3f6:	61 15       	cp	r22, r1
    c3f8:	71 05       	cpc	r23, r1
    c3fa:	81 05       	cpc	r24, r1
    c3fc:	91 05       	cpc	r25, r1
    c3fe:	09 f4       	brne	.+2      	; 0xc402 <f_lseek+0x4e0>
    c400:	f2 cd       	rjmp	.-1052   	; 0xbfe6 <f_lseek+0xc4>
    c402:	29 e0       	ldi	r18, 0x09	; 9
    c404:	f6 94       	lsr	r15
    c406:	e7 94       	ror	r14
    c408:	d7 94       	ror	r13
    c40a:	c7 94       	ror	r12
    c40c:	2a 95       	dec	r18
    c40e:	d1 f7       	brne	.-12     	; 0xc404 <f_lseek+0x4e2>
    c410:	c6 0e       	add	r12, r22
    c412:	d7 1e       	adc	r13, r23
    c414:	e8 1e       	adc	r14, r24
    c416:	f9 1e       	adc	r15, r25
    c418:	f1 01       	movw	r30, r2
    c41a:	80 89       	ldd	r24, Z+16	; 0x10
    c41c:	91 89       	ldd	r25, Z+17	; 0x11
    c41e:	a2 89       	ldd	r26, Z+18	; 0x12
    c420:	b3 89       	ldd	r27, Z+19	; 0x13
    c422:	42 85       	ldd	r20, Z+10	; 0x0a
    c424:	53 85       	ldd	r21, Z+11	; 0x0b
    c426:	64 85       	ldd	r22, Z+12	; 0x0c
    c428:	75 85       	ldd	r23, Z+13	; 0x0d
    c42a:	48 17       	cp	r20, r24
    c42c:	59 07       	cpc	r21, r25
    c42e:	6a 07       	cpc	r22, r26
    c430:	7b 07       	cpc	r23, r27
    c432:	38 f4       	brcc	.+14     	; 0xc442 <f_lseek+0x520>
    c434:	82 87       	std	Z+10, r24	; 0x0a
    c436:	93 87       	std	Z+11, r25	; 0x0b
    c438:	a4 87       	std	Z+12, r26	; 0x0c
    c43a:	b5 87       	std	Z+13, r27	; 0x0d
    c43c:	26 85       	ldd	r18, Z+14	; 0x0e
    c43e:	20 64       	ori	r18, 0x40	; 64
    c440:	26 87       	std	Z+14, r18	; 0x0e
    c442:	91 70       	andi	r25, 0x01	; 1
    c444:	aa 27       	eor	r26, r26
    c446:	bb 27       	eor	r27, r27
    c448:	89 2b       	or	r24, r25
    c44a:	8a 2b       	or	r24, r26
    c44c:	8b 2b       	or	r24, r27
    c44e:	b9 f1       	breq	.+110    	; 0xc4be <f_lseek+0x59c>
    c450:	d1 01       	movw	r26, r2
    c452:	58 96       	adiw	r26, 0x18	; 24
    c454:	2d 91       	ld	r18, X+
    c456:	3d 91       	ld	r19, X+
    c458:	4d 91       	ld	r20, X+
    c45a:	5c 91       	ld	r21, X
    c45c:	5b 97       	sbiw	r26, 0x1b	; 27
    c45e:	2c 15       	cp	r18, r12
    c460:	3d 05       	cpc	r19, r13
    c462:	4e 05       	cpc	r20, r14
    c464:	5f 05       	cpc	r21, r15
    c466:	59 f1       	breq	.+86     	; 0xc4be <f_lseek+0x59c>
    c468:	1e 96       	adiw	r26, 0x0e	; 14
    c46a:	8c 91       	ld	r24, X
    c46c:	f1 01       	movw	r30, r2
    c46e:	b4 96       	adiw	r30, 0x24	; 36
    c470:	5f 01       	movw	r10, r30
    c472:	87 ff       	sbrs	r24, 7
    c474:	12 c0       	rjmp	.+36     	; 0xc49a <f_lseek+0x578>
    c476:	e9 81       	ldd	r30, Y+1	; 0x01
    c478:	fa 81       	ldd	r31, Y+2	; 0x02
    c47a:	01 e0       	ldi	r16, 0x01	; 1
    c47c:	10 e0       	ldi	r17, 0x00	; 0
    c47e:	b5 01       	movw	r22, r10
    c480:	81 81       	ldd	r24, Z+1	; 0x01
    c482:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <disk_write>
    c486:	89 2b       	or	r24, r25
    c488:	09 f0       	breq	.+2      	; 0xc48c <f_lseek+0x56a>
    c48a:	b7 cd       	rjmp	.-1170   	; 0xbffa <f_lseek+0xd8>
    c48c:	d1 01       	movw	r26, r2
    c48e:	1e 96       	adiw	r26, 0x0e	; 14
    c490:	8c 91       	ld	r24, X
    c492:	1e 97       	sbiw	r26, 0x0e	; 14
    c494:	8f 77       	andi	r24, 0x7F	; 127
    c496:	1e 96       	adiw	r26, 0x0e	; 14
    c498:	8c 93       	st	X, r24
    c49a:	e9 81       	ldd	r30, Y+1	; 0x01
    c49c:	fa 81       	ldd	r31, Y+2	; 0x02
    c49e:	01 e0       	ldi	r16, 0x01	; 1
    c4a0:	10 e0       	ldi	r17, 0x00	; 0
    c4a2:	a7 01       	movw	r20, r14
    c4a4:	96 01       	movw	r18, r12
    c4a6:	b5 01       	movw	r22, r10
    c4a8:	81 81       	ldd	r24, Z+1	; 0x01
    c4aa:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <disk_read>
    c4ae:	89 2b       	or	r24, r25
    c4b0:	09 f0       	breq	.+2      	; 0xc4b4 <f_lseek+0x592>
    c4b2:	a3 cd       	rjmp	.-1210   	; 0xbffa <f_lseek+0xd8>
    c4b4:	f1 01       	movw	r30, r2
    c4b6:	c0 8e       	std	Z+24, r12	; 0x18
    c4b8:	d1 8e       	std	Z+25, r13	; 0x19
    c4ba:	e2 8e       	std	Z+26, r14	; 0x1a
    c4bc:	f3 8e       	std	Z+27, r15	; 0x1b
    c4be:	80 e0       	ldi	r24, 0x00	; 0
    c4c0:	a0 cd       	rjmp	.-1216   	; 0xc002 <f_lseek+0xe0>
    c4c2:	81 e1       	ldi	r24, 0x11	; 17
    c4c4:	9e cd       	rjmp	.-1220   	; 0xc002 <f_lseek+0xe0>
    c4c6:	80 e0       	ldi	r24, 0x00	; 0
    c4c8:	90 e0       	ldi	r25, 0x00	; 0
    c4ca:	dc 01       	movw	r26, r24
    c4cc:	c1 2c       	mov	r12, r1
    c4ce:	d1 2c       	mov	r13, r1
    c4d0:	76 01       	movw	r14, r12
    c4d2:	b7 cf       	rjmp	.-146    	; 0xc442 <f_lseek+0x520>
    c4d4:	2a 96       	adiw	r28, 0x0a	; 10
    c4d6:	e2 e1       	ldi	r30, 0x12	; 18
    c4d8:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000c4dc <f_opendir>:
    c4dc:	a4 e0       	ldi	r26, 0x04	; 4
    c4de:	b0 e0       	ldi	r27, 0x00	; 0
    c4e0:	e4 e7       	ldi	r30, 0x74	; 116
    c4e2:	f2 e6       	ldi	r31, 0x62	; 98
    c4e4:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    c4e8:	7c 83       	std	Y+4, r23	; 0x04
    c4ea:	6b 83       	std	Y+3, r22	; 0x03
    c4ec:	00 97       	sbiw	r24, 0x00	; 0
    c4ee:	09 f4       	brne	.+2      	; 0xc4f2 <f_opendir+0x16>
    c4f0:	4a c0       	rjmp	.+148    	; 0xc586 <f_opendir+0xaa>
    c4f2:	8c 01       	movw	r16, r24
    c4f4:	40 e0       	ldi	r20, 0x00	; 0
    c4f6:	be 01       	movw	r22, r28
    c4f8:	6f 5f       	subi	r22, 0xFF	; 255
    c4fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c4fc:	ce 01       	movw	r24, r28
    c4fe:	03 96       	adiw	r24, 0x03	; 3
    c500:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    c504:	7c 01       	movw	r14, r24
    c506:	89 2b       	or	r24, r25
    c508:	c9 f5       	brne	.+114    	; 0xc57c <f_opendir+0xa0>
    c50a:	89 81       	ldd	r24, Y+1	; 0x01
    c50c:	9a 81       	ldd	r25, Y+2	; 0x02
    c50e:	f8 01       	movw	r30, r16
    c510:	91 83       	std	Z+1, r25	; 0x01
    c512:	80 83       	st	Z, r24
    c514:	80 e0       	ldi	r24, 0x00	; 0
    c516:	92 e0       	ldi	r25, 0x02	; 2
    c518:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    c51c:	6c 01       	movw	r12, r24
    c51e:	00 97       	sbiw	r24, 0x00	; 0
    c520:	a1 f1       	breq	.+104    	; 0xc58a <f_opendir+0xae>
    c522:	e9 81       	ldd	r30, Y+1	; 0x01
    c524:	fa 81       	ldd	r31, Y+2	; 0x02
    c526:	94 87       	std	Z+12, r25	; 0x0c
    c528:	83 87       	std	Z+11, r24	; 0x0b
    c52a:	6b 81       	ldd	r22, Y+3	; 0x03
    c52c:	7c 81       	ldd	r23, Y+4	; 0x04
    c52e:	c8 01       	movw	r24, r16
    c530:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    c534:	7c 01       	movw	r14, r24
    c536:	89 2b       	or	r24, r25
    c538:	b9 f4       	brne	.+46     	; 0xc568 <f_opendir+0x8c>
    c53a:	f8 01       	movw	r30, r16
    c53c:	87 a1       	ldd	r24, Z+39	; 0x27
    c53e:	87 fd       	sbrc	r24, 7
    c540:	29 c0       	rjmp	.+82     	; 0xc594 <f_opendir+0xb8>
    c542:	84 81       	ldd	r24, Z+4	; 0x04
    c544:	84 ff       	sbrs	r24, 4
    c546:	0d c0       	rjmp	.+26     	; 0xc562 <f_opendir+0x86>
    c548:	62 8d       	ldd	r22, Z+26	; 0x1a
    c54a:	73 8d       	ldd	r23, Z+27	; 0x1b
    c54c:	e9 81       	ldd	r30, Y+1	; 0x01
    c54e:	fa 81       	ldd	r31, Y+2	; 0x02
    c550:	80 81       	ld	r24, Z
    c552:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    c556:	f8 01       	movw	r30, r16
    c558:	66 83       	std	Z+6, r22	; 0x06
    c55a:	77 83       	std	Z+7, r23	; 0x07
    c55c:	80 87       	std	Z+8, r24	; 0x08
    c55e:	91 87       	std	Z+9, r25	; 0x09
    c560:	19 c0       	rjmp	.+50     	; 0xc594 <f_opendir+0xb8>
    c562:	95 e0       	ldi	r25, 0x05	; 5
    c564:	e9 2e       	mov	r14, r25
    c566:	f1 2c       	mov	r15, r1
    c568:	c6 01       	movw	r24, r12
    c56a:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    c56e:	f4 e0       	ldi	r31, 0x04	; 4
    c570:	ef 16       	cp	r14, r31
    c572:	f1 04       	cpc	r15, r1
    c574:	f1 f0       	breq	.+60     	; 0xc5b2 <f_opendir+0xd6>
    c576:	e1 14       	cp	r14, r1
    c578:	f1 04       	cpc	r15, r1
    c57a:	49 f0       	breq	.+18     	; 0xc58e <f_opendir+0xb2>
    c57c:	f8 01       	movw	r30, r16
    c57e:	11 82       	std	Z+1, r1	; 0x01
    c580:	10 82       	st	Z, r1
    c582:	c7 01       	movw	r24, r14
    c584:	1a c0       	rjmp	.+52     	; 0xc5ba <f_opendir+0xde>
    c586:	89 e0       	ldi	r24, 0x09	; 9
    c588:	03 c0       	rjmp	.+6      	; 0xc590 <f_opendir+0xb4>
    c58a:	81 e1       	ldi	r24, 0x11	; 17
    c58c:	01 c0       	rjmp	.+2      	; 0xc590 <f_opendir+0xb4>
    c58e:	80 e0       	ldi	r24, 0x00	; 0
    c590:	90 e0       	ldi	r25, 0x00	; 0
    c592:	13 c0       	rjmp	.+38     	; 0xc5ba <f_opendir+0xde>
    c594:	e9 81       	ldd	r30, Y+1	; 0x01
    c596:	fa 81       	ldd	r31, Y+2	; 0x02
    c598:	85 81       	ldd	r24, Z+5	; 0x05
    c59a:	96 81       	ldd	r25, Z+6	; 0x06
    c59c:	f8 01       	movw	r30, r16
    c59e:	93 83       	std	Z+3, r25	; 0x03
    c5a0:	82 83       	std	Z+2, r24	; 0x02
    c5a2:	40 e0       	ldi	r20, 0x00	; 0
    c5a4:	50 e0       	ldi	r21, 0x00	; 0
    c5a6:	ba 01       	movw	r22, r20
    c5a8:	c8 01       	movw	r24, r16
    c5aa:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    c5ae:	7c 01       	movw	r14, r24
    c5b0:	db cf       	rjmp	.-74     	; 0xc568 <f_opendir+0x8c>
    c5b2:	85 e0       	ldi	r24, 0x05	; 5
    c5b4:	e8 2e       	mov	r14, r24
    c5b6:	f1 2c       	mov	r15, r1
    c5b8:	e1 cf       	rjmp	.-62     	; 0xc57c <f_opendir+0xa0>
    c5ba:	24 96       	adiw	r28, 0x04	; 4
    c5bc:	e8 e0       	ldi	r30, 0x08	; 8
    c5be:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000c5c2 <f_closedir>:
    c5c2:	a2 e0       	ldi	r26, 0x02	; 2
    c5c4:	b0 e0       	ldi	r27, 0x00	; 0
    c5c6:	e7 ee       	ldi	r30, 0xE7	; 231
    c5c8:	f2 e6       	ldi	r31, 0x62	; 98
    c5ca:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    c5ce:	8c 01       	movw	r16, r24
    c5d0:	be 01       	movw	r22, r28
    c5d2:	6f 5f       	subi	r22, 0xFF	; 255
    c5d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c5d6:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    c5da:	00 97       	sbiw	r24, 0x00	; 0
    c5dc:	19 f4       	brne	.+6      	; 0xc5e4 <f_closedir+0x22>
    c5de:	f8 01       	movw	r30, r16
    c5e0:	11 82       	std	Z+1, r1	; 0x01
    c5e2:	10 82       	st	Z, r1
    c5e4:	22 96       	adiw	r28, 0x02	; 2
    c5e6:	e4 e0       	ldi	r30, 0x04	; 4
    c5e8:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

0000c5ec <f_readdir>:
    c5ec:	a2 e0       	ldi	r26, 0x02	; 2
    c5ee:	b0 e0       	ldi	r27, 0x00	; 0
    c5f0:	ec ef       	ldi	r30, 0xFC	; 252
    c5f2:	f2 e6       	ldi	r31, 0x62	; 98
    c5f4:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
    c5f8:	7c 01       	movw	r14, r24
    c5fa:	5b 01       	movw	r10, r22
    c5fc:	be 01       	movw	r22, r28
    c5fe:	6f 5f       	subi	r22, 0xFF	; 255
    c600:	7f 4f       	sbci	r23, 0xFF	; 255
    c602:	0e 94 06 48 	call	0x900c	; 0x900c <validate>
    c606:	00 97       	sbiw	r24, 0x00	; 0
    c608:	99 f5       	brne	.+102    	; 0xc670 <f_readdir+0x84>
    c60a:	a1 14       	cp	r10, r1
    c60c:	b1 04       	cpc	r11, r1
    c60e:	39 f4       	brne	.+14     	; 0xc61e <f_readdir+0x32>
    c610:	40 e0       	ldi	r20, 0x00	; 0
    c612:	50 e0       	ldi	r21, 0x00	; 0
    c614:	ba 01       	movw	r22, r20
    c616:	c7 01       	movw	r24, r14
    c618:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    c61c:	29 c0       	rjmp	.+82     	; 0xc670 <f_readdir+0x84>
    c61e:	80 e0       	ldi	r24, 0x00	; 0
    c620:	92 e0       	ldi	r25, 0x02	; 2
    c622:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    c626:	6c 01       	movw	r12, r24
    c628:	00 97       	sbiw	r24, 0x00	; 0
    c62a:	01 f1       	breq	.+64     	; 0xc66c <f_readdir+0x80>
    c62c:	e9 81       	ldd	r30, Y+1	; 0x01
    c62e:	fa 81       	ldd	r31, Y+2	; 0x02
    c630:	94 87       	std	Z+12, r25	; 0x0c
    c632:	83 87       	std	Z+11, r24	; 0x0b
    c634:	60 e0       	ldi	r22, 0x00	; 0
    c636:	70 e0       	ldi	r23, 0x00	; 0
    c638:	c7 01       	movw	r24, r14
    c63a:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <dir_read>
    c63e:	8c 01       	movw	r16, r24
    c640:	8b 7f       	andi	r24, 0xFB	; 251
    c642:	89 2b       	or	r24, r25
    c644:	71 f4       	brne	.+28     	; 0xc662 <f_readdir+0x76>
    c646:	b5 01       	movw	r22, r10
    c648:	c7 01       	movw	r24, r14
    c64a:	0e 94 21 50 	call	0xa042	; 0xa042 <get_fileinfo>
    c64e:	60 e0       	ldi	r22, 0x00	; 0
    c650:	70 e0       	ldi	r23, 0x00	; 0
    c652:	c7 01       	movw	r24, r14
    c654:	0e 94 f9 50 	call	0xa1f2	; 0xa1f2 <dir_next>
    c658:	8c 01       	movw	r16, r24
    c65a:	04 97       	sbiw	r24, 0x04	; 4
    c65c:	11 f4       	brne	.+4      	; 0xc662 <f_readdir+0x76>
    c65e:	00 e0       	ldi	r16, 0x00	; 0
    c660:	10 e0       	ldi	r17, 0x00	; 0
    c662:	c6 01       	movw	r24, r12
    c664:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    c668:	c8 01       	movw	r24, r16
    c66a:	02 c0       	rjmp	.+4      	; 0xc670 <f_readdir+0x84>
    c66c:	81 e1       	ldi	r24, 0x11	; 17
    c66e:	90 e0       	ldi	r25, 0x00	; 0
    c670:	22 96       	adiw	r28, 0x02	; 2
    c672:	ea e0       	ldi	r30, 0x0A	; 10
    c674:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0000c678 <f_stat>:
    c678:	a0 e3       	ldi	r26, 0x30	; 48
    c67a:	b0 e0       	ldi	r27, 0x00	; 0
    c67c:	e2 e4       	ldi	r30, 0x42	; 66
    c67e:	f3 e6       	ldi	r31, 0x63	; 99
    c680:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    c684:	98 ab       	std	Y+48, r25	; 0x30
    c686:	8f a7       	std	Y+47, r24	; 0x2f
    c688:	6b 01       	movw	r12, r22
    c68a:	40 e0       	ldi	r20, 0x00	; 0
    c68c:	be 01       	movw	r22, r28
    c68e:	6f 5f       	subi	r22, 0xFF	; 255
    c690:	7f 4f       	sbci	r23, 0xFF	; 255
    c692:	ce 01       	movw	r24, r28
    c694:	8f 96       	adiw	r24, 0x2f	; 47
    c696:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    c69a:	00 97       	sbiw	r24, 0x00	; 0
    c69c:	49 f5       	brne	.+82     	; 0xc6f0 <f_stat+0x78>
    c69e:	80 e0       	ldi	r24, 0x00	; 0
    c6a0:	92 e0       	ldi	r25, 0x02	; 2
    c6a2:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    c6a6:	7c 01       	movw	r14, r24
    c6a8:	00 97       	sbiw	r24, 0x00	; 0
    c6aa:	01 f1       	breq	.+64     	; 0xc6ec <f_stat+0x74>
    c6ac:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ae:	fa 81       	ldd	r31, Y+2	; 0x02
    c6b0:	94 87       	std	Z+12, r25	; 0x0c
    c6b2:	83 87       	std	Z+11, r24	; 0x0b
    c6b4:	6f a5       	ldd	r22, Y+47	; 0x2f
    c6b6:	78 a9       	ldd	r23, Y+48	; 0x30
    c6b8:	ce 01       	movw	r24, r28
    c6ba:	01 96       	adiw	r24, 0x01	; 1
    c6bc:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    c6c0:	8c 01       	movw	r16, r24
    c6c2:	89 2b       	or	r24, r25
    c6c4:	71 f4       	brne	.+28     	; 0xc6e2 <f_stat+0x6a>
    c6c6:	88 a5       	ldd	r24, Y+40	; 0x28
    c6c8:	87 fd       	sbrc	r24, 7
    c6ca:	09 c0       	rjmp	.+18     	; 0xc6de <f_stat+0x66>
    c6cc:	c1 14       	cp	r12, r1
    c6ce:	d1 04       	cpc	r13, r1
    c6d0:	41 f0       	breq	.+16     	; 0xc6e2 <f_stat+0x6a>
    c6d2:	b6 01       	movw	r22, r12
    c6d4:	ce 01       	movw	r24, r28
    c6d6:	01 96       	adiw	r24, 0x01	; 1
    c6d8:	0e 94 21 50 	call	0xa042	; 0xa042 <get_fileinfo>
    c6dc:	02 c0       	rjmp	.+4      	; 0xc6e2 <f_stat+0x6a>
    c6de:	06 e0       	ldi	r16, 0x06	; 6
    c6e0:	10 e0       	ldi	r17, 0x00	; 0
    c6e2:	c7 01       	movw	r24, r14
    c6e4:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    c6e8:	c8 01       	movw	r24, r16
    c6ea:	02 c0       	rjmp	.+4      	; 0xc6f0 <f_stat+0x78>
    c6ec:	81 e1       	ldi	r24, 0x11	; 17
    c6ee:	90 e0       	ldi	r25, 0x00	; 0
    c6f0:	e0 96       	adiw	r28, 0x30	; 48
    c6f2:	e8 e0       	ldi	r30, 0x08	; 8
    c6f4:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000c6f8 <f_getfree>:
    c6f8:	ac e0       	ldi	r26, 0x0C	; 12
    c6fa:	b0 e0       	ldi	r27, 0x00	; 0
    c6fc:	e2 e8       	ldi	r30, 0x82	; 130
    c6fe:	f3 e6       	ldi	r31, 0x63	; 99
    c700:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    c704:	9c 83       	std	Y+4, r25	; 0x04
    c706:	8b 83       	std	Y+3, r24	; 0x03
    c708:	78 87       	std	Y+8, r23	; 0x08
    c70a:	6f 83       	std	Y+7, r22	; 0x07
    c70c:	7a 01       	movw	r14, r20
    c70e:	40 e0       	ldi	r20, 0x00	; 0
    c710:	be 01       	movw	r22, r28
    c712:	6f 5f       	subi	r22, 0xFF	; 255
    c714:	7f 4f       	sbci	r23, 0xFF	; 255
    c716:	ce 01       	movw	r24, r28
    c718:	03 96       	adiw	r24, 0x03	; 3
    c71a:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    c71e:	9e 83       	std	Y+6, r25	; 0x06
    c720:	8d 83       	std	Y+5, r24	; 0x05
    c722:	89 2b       	or	r24, r25
    c724:	09 f0       	breq	.+2      	; 0xc728 <f_getfree+0x30>
    c726:	cf c0       	rjmp	.+414    	; 0xc8c6 <f_getfree+0x1ce>
    c728:	69 80       	ldd	r6, Y+1	; 0x01
    c72a:	7a 80       	ldd	r7, Y+2	; 0x02
    c72c:	d7 01       	movw	r26, r14
    c72e:	6d 92       	st	X+, r6
    c730:	7c 92       	st	X, r7
    c732:	f3 01       	movw	r30, r6
    c734:	81 89       	ldd	r24, Z+17	; 0x11
    c736:	92 89       	ldd	r25, Z+18	; 0x12
    c738:	a3 89       	ldd	r26, Z+19	; 0x13
    c73a:	b4 89       	ldd	r27, Z+20	; 0x14
    c73c:	81 8c       	ldd	r8, Z+25	; 0x19
    c73e:	92 8c       	ldd	r9, Z+26	; 0x1a
    c740:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c742:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c744:	b5 01       	movw	r22, r10
    c746:	a4 01       	movw	r20, r8
    c748:	42 50       	subi	r20, 0x02	; 2
    c74a:	51 09       	sbc	r21, r1
    c74c:	61 09       	sbc	r22, r1
    c74e:	71 09       	sbc	r23, r1
    c750:	48 17       	cp	r20, r24
    c752:	59 07       	cpc	r21, r25
    c754:	6a 07       	cpc	r22, r26
    c756:	7b 07       	cpc	r23, r27
    c758:	38 f0       	brcs	.+14     	; 0xc768 <f_getfree+0x70>
    c75a:	ef 81       	ldd	r30, Y+7	; 0x07
    c75c:	f8 85       	ldd	r31, Y+8	; 0x08
    c75e:	80 83       	st	Z, r24
    c760:	91 83       	std	Z+1, r25	; 0x01
    c762:	a2 83       	std	Z+2, r26	; 0x02
    c764:	b3 83       	std	Z+3, r27	; 0x03
    c766:	af c0       	rjmp	.+350    	; 0xc8c6 <f_getfree+0x1ce>
    c768:	80 81       	ld	r24, Z
    c76a:	81 30       	cpi	r24, 0x01	; 1
    c76c:	a1 f5       	brne	.+104    	; 0xc7d6 <f_getfree+0xde>
    c76e:	82 e0       	ldi	r24, 0x02	; 2
    c770:	88 2e       	mov	r8, r24
    c772:	91 2c       	mov	r9, r1
    c774:	a1 2c       	mov	r10, r1
    c776:	b1 2c       	mov	r11, r1
    c778:	c1 2c       	mov	r12, r1
    c77a:	d1 2c       	mov	r13, r1
    c77c:	76 01       	movw	r14, r12
    c77e:	b5 01       	movw	r22, r10
    c780:	a4 01       	movw	r20, r8
    c782:	c3 01       	movw	r24, r6
    c784:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <get_fat.isra.7>
    c788:	6f 3f       	cpi	r22, 0xFF	; 255
    c78a:	bf ef       	ldi	r27, 0xFF	; 255
    c78c:	7b 07       	cpc	r23, r27
    c78e:	8b 07       	cpc	r24, r27
    c790:	9b 07       	cpc	r25, r27
    c792:	09 f4       	brne	.+2      	; 0xc796 <f_getfree+0x9e>
    c794:	7c c0       	rjmp	.+248    	; 0xc88e <f_getfree+0x196>
    c796:	61 30       	cpi	r22, 0x01	; 1
    c798:	71 05       	cpc	r23, r1
    c79a:	81 05       	cpc	r24, r1
    c79c:	91 05       	cpc	r25, r1
    c79e:	09 f4       	brne	.+2      	; 0xc7a2 <f_getfree+0xaa>
    c7a0:	7b c0       	rjmp	.+246    	; 0xc898 <f_getfree+0x1a0>
    c7a2:	67 2b       	or	r22, r23
    c7a4:	68 2b       	or	r22, r24
    c7a6:	69 2b       	or	r22, r25
    c7a8:	29 f4       	brne	.+10     	; 0xc7b4 <f_getfree+0xbc>
    c7aa:	ef ef       	ldi	r30, 0xFF	; 255
    c7ac:	ce 1a       	sub	r12, r30
    c7ae:	de 0a       	sbc	r13, r30
    c7b0:	ee 0a       	sbc	r14, r30
    c7b2:	fe 0a       	sbc	r15, r30
    c7b4:	ff ef       	ldi	r31, 0xFF	; 255
    c7b6:	8f 1a       	sub	r8, r31
    c7b8:	9f 0a       	sbc	r9, r31
    c7ba:	af 0a       	sbc	r10, r31
    c7bc:	bf 0a       	sbc	r11, r31
    c7be:	e9 81       	ldd	r30, Y+1	; 0x01
    c7c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c7c2:	81 8d       	ldd	r24, Z+25	; 0x19
    c7c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    c7c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c7c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c7ca:	88 16       	cp	r8, r24
    c7cc:	99 06       	cpc	r9, r25
    c7ce:	aa 06       	cpc	r10, r26
    c7d0:	bb 06       	cpc	r11, r27
    c7d2:	a8 f2       	brcs	.-86     	; 0xc77e <f_getfree+0x86>
    c7d4:	68 c0       	rjmp	.+208    	; 0xc8a6 <f_getfree+0x1ae>
    c7d6:	45 a0       	ldd	r4, Z+37	; 0x25
    c7d8:	56 a0       	ldd	r5, Z+38	; 0x26
    c7da:	67 a0       	ldd	r6, Z+39	; 0x27
    c7dc:	70 a4       	ldd	r7, Z+40	; 0x28
    c7de:	21 2c       	mov	r2, r1
    c7e0:	31 2c       	mov	r3, r1
    c7e2:	00 e0       	ldi	r16, 0x00	; 0
    c7e4:	10 e0       	ldi	r17, 0x00	; 0
    c7e6:	c1 2c       	mov	r12, r1
    c7e8:	d1 2c       	mov	r13, r1
    c7ea:	76 01       	movw	r14, r12
    c7ec:	01 15       	cp	r16, r1
    c7ee:	11 05       	cpc	r17, r1
    c7f0:	e9 f4       	brne	.+58     	; 0xc82c <f_getfree+0x134>
    c7f2:	d3 01       	movw	r26, r6
    c7f4:	c2 01       	movw	r24, r4
    c7f6:	01 96       	adiw	r24, 0x01	; 1
    c7f8:	a1 1d       	adc	r26, r1
    c7fa:	b1 1d       	adc	r27, r1
    c7fc:	89 87       	std	Y+9, r24	; 0x09
    c7fe:	9a 87       	std	Y+10, r25	; 0x0a
    c800:	ab 87       	std	Y+11, r26	; 0x0b
    c802:	bc 87       	std	Y+12, r27	; 0x0c
    c804:	b3 01       	movw	r22, r6
    c806:	a2 01       	movw	r20, r4
    c808:	89 81       	ldd	r24, Y+1	; 0x01
    c80a:	9a 81       	ldd	r25, Y+2	; 0x02
    c80c:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    c810:	00 97       	sbiw	r24, 0x00	; 0
    c812:	09 f0       	breq	.+2      	; 0xc816 <f_getfree+0x11e>
    c814:	46 c0       	rjmp	.+140    	; 0xc8a2 <f_getfree+0x1aa>
    c816:	29 80       	ldd	r2, Y+1	; 0x01
    c818:	3a 80       	ldd	r3, Y+2	; 0x02
    c81a:	95 e3       	ldi	r25, 0x35	; 53
    c81c:	29 0e       	add	r2, r25
    c81e:	31 1c       	adc	r3, r1
    c820:	49 84       	ldd	r4, Y+9	; 0x09
    c822:	5a 84       	ldd	r5, Y+10	; 0x0a
    c824:	6b 84       	ldd	r6, Y+11	; 0x0b
    c826:	7c 84       	ldd	r7, Y+12	; 0x0c
    c828:	00 e0       	ldi	r16, 0x00	; 0
    c82a:	12 e0       	ldi	r17, 0x02	; 2
    c82c:	e9 81       	ldd	r30, Y+1	; 0x01
    c82e:	fa 81       	ldd	r31, Y+2	; 0x02
    c830:	80 81       	ld	r24, Z
    c832:	82 30       	cpi	r24, 0x02	; 2
    c834:	81 f4       	brne	.+32     	; 0xc856 <f_getfree+0x15e>
    c836:	d1 01       	movw	r26, r2
    c838:	8d 91       	ld	r24, X+
    c83a:	9c 91       	ld	r25, X
    c83c:	89 2b       	or	r24, r25
    c83e:	29 f4       	brne	.+10     	; 0xc84a <f_getfree+0x152>
    c840:	bf ef       	ldi	r27, 0xFF	; 255
    c842:	cb 1a       	sub	r12, r27
    c844:	db 0a       	sbc	r13, r27
    c846:	eb 0a       	sbc	r14, r27
    c848:	fb 0a       	sbc	r15, r27
    c84a:	e2 e0       	ldi	r30, 0x02	; 2
    c84c:	2e 0e       	add	r2, r30
    c84e:	31 1c       	adc	r3, r1
    c850:	02 50       	subi	r16, 0x02	; 2
    c852:	11 09       	sbc	r17, r1
    c854:	14 c0       	rjmp	.+40     	; 0xc87e <f_getfree+0x186>
    c856:	c1 01       	movw	r24, r2
    c858:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    c85c:	dc 01       	movw	r26, r24
    c85e:	cb 01       	movw	r24, r22
    c860:	bf 70       	andi	r27, 0x0F	; 15
    c862:	89 2b       	or	r24, r25
    c864:	8a 2b       	or	r24, r26
    c866:	8b 2b       	or	r24, r27
    c868:	29 f4       	brne	.+10     	; 0xc874 <f_getfree+0x17c>
    c86a:	ff ef       	ldi	r31, 0xFF	; 255
    c86c:	cf 1a       	sub	r12, r31
    c86e:	df 0a       	sbc	r13, r31
    c870:	ef 0a       	sbc	r14, r31
    c872:	ff 0a       	sbc	r15, r31
    c874:	24 e0       	ldi	r18, 0x04	; 4
    c876:	22 0e       	add	r2, r18
    c878:	31 1c       	adc	r3, r1
    c87a:	04 50       	subi	r16, 0x04	; 4
    c87c:	11 09       	sbc	r17, r1
    c87e:	81 e0       	ldi	r24, 0x01	; 1
    c880:	88 1a       	sub	r8, r24
    c882:	91 08       	sbc	r9, r1
    c884:	a1 08       	sbc	r10, r1
    c886:	b1 08       	sbc	r11, r1
    c888:	09 f0       	breq	.+2      	; 0xc88c <f_getfree+0x194>
    c88a:	b0 cf       	rjmp	.-160    	; 0xc7ec <f_getfree+0xf4>
    c88c:	0c c0       	rjmp	.+24     	; 0xc8a6 <f_getfree+0x1ae>
    c88e:	a1 e0       	ldi	r26, 0x01	; 1
    c890:	b0 e0       	ldi	r27, 0x00	; 0
    c892:	be 83       	std	Y+6, r27	; 0x06
    c894:	ad 83       	std	Y+5, r26	; 0x05
    c896:	07 c0       	rjmp	.+14     	; 0xc8a6 <f_getfree+0x1ae>
    c898:	e2 e0       	ldi	r30, 0x02	; 2
    c89a:	f0 e0       	ldi	r31, 0x00	; 0
    c89c:	fe 83       	std	Y+6, r31	; 0x06
    c89e:	ed 83       	std	Y+5, r30	; 0x05
    c8a0:	02 c0       	rjmp	.+4      	; 0xc8a6 <f_getfree+0x1ae>
    c8a2:	9e 83       	std	Y+6, r25	; 0x06
    c8a4:	8d 83       	std	Y+5, r24	; 0x05
    c8a6:	af 81       	ldd	r26, Y+7	; 0x07
    c8a8:	b8 85       	ldd	r27, Y+8	; 0x08
    c8aa:	cd 92       	st	X+, r12
    c8ac:	dd 92       	st	X+, r13
    c8ae:	ed 92       	st	X+, r14
    c8b0:	fc 92       	st	X, r15
    c8b2:	13 97       	sbiw	r26, 0x03	; 3
    c8b4:	e9 81       	ldd	r30, Y+1	; 0x01
    c8b6:	fa 81       	ldd	r31, Y+2	; 0x02
    c8b8:	c1 8a       	std	Z+17, r12	; 0x11
    c8ba:	d2 8a       	std	Z+18, r13	; 0x12
    c8bc:	e3 8a       	std	Z+19, r14	; 0x13
    c8be:	f4 8a       	std	Z+20, r15	; 0x14
    c8c0:	84 81       	ldd	r24, Z+4	; 0x04
    c8c2:	81 60       	ori	r24, 0x01	; 1
    c8c4:	84 83       	std	Z+4, r24	; 0x04
    c8c6:	8d 81       	ldd	r24, Y+5	; 0x05
    c8c8:	9e 81       	ldd	r25, Y+6	; 0x06
    c8ca:	2c 96       	adiw	r28, 0x0c	; 12
    c8cc:	e2 e1       	ldi	r30, 0x12	; 18
    c8ce:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000c8d2 <f_unlink>:
    c8d2:	a0 e6       	ldi	r26, 0x60	; 96
    c8d4:	b0 e0       	ldi	r27, 0x00	; 0
    c8d6:	ef e6       	ldi	r30, 0x6F	; 111
    c8d8:	f4 e6       	ldi	r31, 0x64	; 100
    c8da:	0c 94 22 eb 	jmp	0x1d644	; 0x1d644 <__prologue_saves__+0xe>
    c8de:	a1 96       	adiw	r28, 0x21	; 33
    c8e0:	9f af       	std	Y+63, r25	; 0x3f
    c8e2:	8e af       	std	Y+62, r24	; 0x3e
    c8e4:	a1 97       	sbiw	r28, 0x21	; 33
    c8e6:	42 e0       	ldi	r20, 0x02	; 2
    c8e8:	be 01       	movw	r22, r28
    c8ea:	63 5a       	subi	r22, 0xA3	; 163
    c8ec:	7f 4f       	sbci	r23, 0xFF	; 255
    c8ee:	ce 01       	movw	r24, r28
    c8f0:	81 5a       	subi	r24, 0xA1	; 161
    c8f2:	9f 4f       	sbci	r25, 0xFF	; 255
    c8f4:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    c8f8:	6f 96       	adiw	r28, 0x1f	; 31
    c8fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    c8fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    c8fe:	6f 97       	sbiw	r28, 0x1f	; 31
    c900:	38 ab       	std	Y+48, r19	; 0x30
    c902:	2f a7       	std	Y+47, r18	; 0x2f
    c904:	00 97       	sbiw	r24, 0x00	; 0
    c906:	09 f0       	breq	.+2      	; 0xc90a <f_unlink+0x38>
    c908:	88 c0       	rjmp	.+272    	; 0xca1a <f_unlink+0x148>
    c90a:	80 e0       	ldi	r24, 0x00	; 0
    c90c:	92 e0       	ldi	r25, 0x02	; 2
    c90e:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    c912:	5c 01       	movw	r10, r24
    c914:	00 97       	sbiw	r24, 0x00	; 0
    c916:	09 f4       	brne	.+2      	; 0xc91a <f_unlink+0x48>
    c918:	4a c0       	rjmp	.+148    	; 0xc9ae <f_unlink+0xdc>
    c91a:	6f 96       	adiw	r28, 0x1f	; 31
    c91c:	ee ad       	ldd	r30, Y+62	; 0x3e
    c91e:	ff ad       	ldd	r31, Y+63	; 0x3f
    c920:	6f 97       	sbiw	r28, 0x1f	; 31
    c922:	94 87       	std	Z+12, r25	; 0x0c
    c924:	83 87       	std	Z+11, r24	; 0x0b
    c926:	a1 96       	adiw	r28, 0x21	; 33
    c928:	6e ad       	ldd	r22, Y+62	; 0x3e
    c92a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c92c:	a1 97       	sbiw	r28, 0x21	; 33
    c92e:	ce 01       	movw	r24, r28
    c930:	8f 96       	adiw	r24, 0x2f	; 47
    c932:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    c936:	8c 01       	movw	r16, r24
    c938:	89 2b       	or	r24, r25
    c93a:	a1 f5       	brne	.+104    	; 0xc9a4 <f_unlink+0xd2>
    c93c:	67 96       	adiw	r28, 0x17	; 23
    c93e:	8f ad       	ldd	r24, Y+63	; 0x3f
    c940:	67 97       	sbiw	r28, 0x17	; 23
    c942:	85 fd       	sbrc	r24, 5
    c944:	37 c0       	rjmp	.+110    	; 0xc9b4 <f_unlink+0xe2>
    c946:	87 fd       	sbrc	r24, 7
    c948:	35 c0       	rjmp	.+106    	; 0xc9b4 <f_unlink+0xe2>
    c94a:	9b a8       	ldd	r9, Y+51	; 0x33
    c94c:	90 fc       	sbrc	r9, 0
    c94e:	41 c0       	rjmp	.+130    	; 0xc9d2 <f_unlink+0x100>
    c950:	6f 96       	adiw	r28, 0x1f	; 31
    c952:	0e ad       	ldd	r16, Y+62	; 0x3e
    c954:	1f ad       	ldd	r17, Y+63	; 0x3f
    c956:	6f 97       	sbiw	r28, 0x1f	; 31
    c958:	2b 96       	adiw	r28, 0x0b	; 11
    c95a:	6e ad       	ldd	r22, Y+62	; 0x3e
    c95c:	7f ad       	ldd	r23, Y+63	; 0x3f
    c95e:	2b 97       	sbiw	r28, 0x0b	; 11
    c960:	f8 01       	movw	r30, r16
    c962:	80 81       	ld	r24, Z
    c964:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    c968:	6b 01       	movw	r12, r22
    c96a:	7c 01       	movw	r14, r24
    c96c:	94 fe       	sbrs	r9, 4
    c96e:	34 c0       	rjmp	.+104    	; 0xc9d8 <f_unlink+0x106>
    c970:	f8 01       	movw	r30, r16
    c972:	85 89       	ldd	r24, Z+21	; 0x15
    c974:	96 89       	ldd	r25, Z+22	; 0x16
    c976:	a7 89       	ldd	r26, Z+23	; 0x17
    c978:	b0 8d       	ldd	r27, Z+24	; 0x18
    c97a:	c8 16       	cp	r12, r24
    c97c:	d9 06       	cpc	r13, r25
    c97e:	ea 06       	cpc	r14, r26
    c980:	fb 06       	cpc	r15, r27
    c982:	39 f1       	breq	.+78     	; 0xc9d2 <f_unlink+0x100>
    c984:	1a 83       	std	Y+2, r17	; 0x02
    c986:	09 83       	std	Y+1, r16	; 0x01
    c988:	cf 82       	std	Y+7, r12	; 0x07
    c98a:	d8 86       	std	Y+8, r13	; 0x08
    c98c:	e9 86       	std	Y+9, r14	; 0x09
    c98e:	fa 86       	std	Y+10, r15	; 0x0a
    c990:	40 e0       	ldi	r20, 0x00	; 0
    c992:	50 e0       	ldi	r21, 0x00	; 0
    c994:	ba 01       	movw	r22, r20
    c996:	ce 01       	movw	r24, r28
    c998:	01 96       	adiw	r24, 0x01	; 1
    c99a:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    c99e:	8c 01       	movw	r16, r24
    c9a0:	89 2b       	or	r24, r25
    c9a2:	59 f0       	breq	.+22     	; 0xc9ba <f_unlink+0xe8>
    c9a4:	c5 01       	movw	r24, r10
    c9a6:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    c9aa:	c8 01       	movw	r24, r16
    c9ac:	36 c0       	rjmp	.+108    	; 0xca1a <f_unlink+0x148>
    c9ae:	81 e1       	ldi	r24, 0x11	; 17
    c9b0:	90 e0       	ldi	r25, 0x00	; 0
    c9b2:	33 c0       	rjmp	.+102    	; 0xca1a <f_unlink+0x148>
    c9b4:	06 e0       	ldi	r16, 0x06	; 6
    c9b6:	10 e0       	ldi	r17, 0x00	; 0
    c9b8:	f5 cf       	rjmp	.-22     	; 0xc9a4 <f_unlink+0xd2>
    c9ba:	60 e0       	ldi	r22, 0x00	; 0
    c9bc:	70 e0       	ldi	r23, 0x00	; 0
    c9be:	ce 01       	movw	r24, r28
    c9c0:	01 96       	adiw	r24, 0x01	; 1
    c9c2:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <dir_read>
    c9c6:	8c 01       	movw	r16, r24
    c9c8:	00 97       	sbiw	r24, 0x00	; 0
    c9ca:	19 f0       	breq	.+6      	; 0xc9d2 <f_unlink+0x100>
    c9cc:	04 97       	sbiw	r24, 0x04	; 4
    c9ce:	21 f0       	breq	.+8      	; 0xc9d8 <f_unlink+0x106>
    c9d0:	e9 cf       	rjmp	.-46     	; 0xc9a4 <f_unlink+0xd2>
    c9d2:	07 e0       	ldi	r16, 0x07	; 7
    c9d4:	10 e0       	ldi	r17, 0x00	; 0
    c9d6:	e6 cf       	rjmp	.-52     	; 0xc9a4 <f_unlink+0xd2>
    c9d8:	ce 01       	movw	r24, r28
    c9da:	8f 96       	adiw	r24, 0x2f	; 47
    c9dc:	0e 94 29 53 	call	0xa652	; 0xa652 <dir_remove>
    c9e0:	8c 01       	movw	r16, r24
    c9e2:	89 2b       	or	r24, r25
    c9e4:	f9 f6       	brne	.-66     	; 0xc9a4 <f_unlink+0xd2>
    c9e6:	c1 14       	cp	r12, r1
    c9e8:	d1 04       	cpc	r13, r1
    c9ea:	e1 04       	cpc	r14, r1
    c9ec:	f1 04       	cpc	r15, r1
    c9ee:	41 f4       	brne	.+16     	; 0xca00 <f_unlink+0x12e>
    c9f0:	6f 96       	adiw	r28, 0x1f	; 31
    c9f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    c9f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    c9f6:	6f 97       	sbiw	r28, 0x1f	; 31
    c9f8:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    c9fc:	8c 01       	movw	r16, r24
    c9fe:	d2 cf       	rjmp	.-92     	; 0xc9a4 <f_unlink+0xd2>
    ca00:	00 e0       	ldi	r16, 0x00	; 0
    ca02:	10 e0       	ldi	r17, 0x00	; 0
    ca04:	98 01       	movw	r18, r16
    ca06:	b7 01       	movw	r22, r14
    ca08:	a6 01       	movw	r20, r12
    ca0a:	ce 01       	movw	r24, r28
    ca0c:	8f 96       	adiw	r24, 0x2f	; 47
    ca0e:	0e 94 90 4f 	call	0x9f20	; 0x9f20 <remove_chain>
    ca12:	8c 01       	movw	r16, r24
    ca14:	89 2b       	or	r24, r25
    ca16:	31 f6       	brne	.-116    	; 0xc9a4 <f_unlink+0xd2>
    ca18:	eb cf       	rjmp	.-42     	; 0xc9f0 <f_unlink+0x11e>
    ca1a:	c0 5a       	subi	r28, 0xA0	; 160
    ca1c:	df 4f       	sbci	r29, 0xFF	; 255
    ca1e:	eb e0       	ldi	r30, 0x0B	; 11
    ca20:	0c 94 3e eb 	jmp	0x1d67c	; 0x1d67c <__epilogue_restores__+0xe>

0000ca24 <f_mkdir>:
    ca24:	ac e3       	ldi	r26, 0x3C	; 60
    ca26:	b0 e0       	ldi	r27, 0x00	; 0
    ca28:	e8 e1       	ldi	r30, 0x18	; 24
    ca2a:	f5 e6       	ldi	r31, 0x65	; 101
    ca2c:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    ca30:	9a ab       	std	Y+50, r25	; 0x32
    ca32:	89 ab       	std	Y+49, r24	; 0x31
    ca34:	42 e0       	ldi	r20, 0x02	; 2
    ca36:	be 01       	movw	r22, r28
    ca38:	61 5d       	subi	r22, 0xD1	; 209
    ca3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ca3c:	ce 01       	movw	r24, r28
    ca3e:	c1 96       	adiw	r24, 0x31	; 49
    ca40:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    ca44:	2f a5       	ldd	r18, Y+47	; 0x2f
    ca46:	38 a9       	ldd	r19, Y+48	; 0x30
    ca48:	3a 83       	std	Y+2, r19	; 0x02
    ca4a:	29 83       	std	Y+1, r18	; 0x01
    ca4c:	00 97       	sbiw	r24, 0x00	; 0
    ca4e:	09 f0       	breq	.+2      	; 0xca52 <f_mkdir+0x2e>
    ca50:	2c c1       	rjmp	.+600    	; 0xccaa <f_mkdir+0x286>
    ca52:	80 e0       	ldi	r24, 0x00	; 0
    ca54:	92 e0       	ldi	r25, 0x02	; 2
    ca56:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <ff_memalloc>
    ca5a:	98 af       	std	Y+56, r25	; 0x38
    ca5c:	8f ab       	std	Y+55, r24	; 0x37
    ca5e:	00 97       	sbiw	r24, 0x00	; 0
    ca60:	d9 f0       	breq	.+54     	; 0xca98 <f_mkdir+0x74>
    ca62:	ef a5       	ldd	r30, Y+47	; 0x2f
    ca64:	f8 a9       	ldd	r31, Y+48	; 0x30
    ca66:	94 87       	std	Z+12, r25	; 0x0c
    ca68:	83 87       	std	Z+11, r24	; 0x0b
    ca6a:	69 a9       	ldd	r22, Y+49	; 0x31
    ca6c:	7a a9       	ldd	r23, Y+50	; 0x32
    ca6e:	ce 01       	movw	r24, r28
    ca70:	01 96       	adiw	r24, 0x01	; 1
    ca72:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    ca76:	7c 01       	movw	r14, r24
    ca78:	00 97       	sbiw	r24, 0x00	; 0
    ca7a:	89 f0       	breq	.+34     	; 0xca9e <f_mkdir+0x7a>
    ca7c:	04 97       	sbiw	r24, 0x04	; 4
    ca7e:	31 f4       	brne	.+12     	; 0xca8c <f_mkdir+0x68>
    ca80:	88 a5       	ldd	r24, Y+40	; 0x28
    ca82:	85 ff       	sbrs	r24, 5
    ca84:	10 c0       	rjmp	.+32     	; 0xcaa6 <f_mkdir+0x82>
    ca86:	36 e0       	ldi	r19, 0x06	; 6
    ca88:	e3 2e       	mov	r14, r19
    ca8a:	f1 2c       	mov	r15, r1
    ca8c:	8f a9       	ldd	r24, Y+55	; 0x37
    ca8e:	98 ad       	ldd	r25, Y+56	; 0x38
    ca90:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <ff_memfree>
    ca94:	c7 01       	movw	r24, r14
    ca96:	09 c1       	rjmp	.+530    	; 0xccaa <f_mkdir+0x286>
    ca98:	81 e1       	ldi	r24, 0x11	; 17
    ca9a:	90 e0       	ldi	r25, 0x00	; 0
    ca9c:	06 c1       	rjmp	.+524    	; 0xccaa <f_mkdir+0x286>
    ca9e:	48 e0       	ldi	r20, 0x08	; 8
    caa0:	e4 2e       	mov	r14, r20
    caa2:	f1 2c       	mov	r15, r1
    caa4:	f3 cf       	rjmp	.-26     	; 0xca8c <f_mkdir+0x68>
    caa6:	40 e0       	ldi	r20, 0x00	; 0
    caa8:	50 e0       	ldi	r21, 0x00	; 0
    caaa:	ba 01       	movw	r22, r20
    caac:	ce 01       	movw	r24, r28
    caae:	01 96       	adiw	r24, 0x01	; 1
    cab0:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <create_chain>
    cab4:	4b 01       	movw	r8, r22
    cab6:	5c 01       	movw	r10, r24
    cab8:	8f a5       	ldd	r24, Y+47	; 0x2f
    caba:	98 a9       	ldd	r25, Y+48	; 0x30
    cabc:	dc 01       	movw	r26, r24
    cabe:	19 96       	adiw	r26, 0x09	; 9
    cac0:	4d 91       	ld	r20, X+
    cac2:	5c 91       	ld	r21, X
    cac4:	1a 97       	sbiw	r26, 0x0a	; 10
    cac6:	60 e0       	ldi	r22, 0x00	; 0
    cac8:	70 e0       	ldi	r23, 0x00	; 0
    caca:	29 e0       	ldi	r18, 0x09	; 9
    cacc:	44 0f       	add	r20, r20
    cace:	55 1f       	adc	r21, r21
    cad0:	66 1f       	adc	r22, r22
    cad2:	77 1f       	adc	r23, r23
    cad4:	2a 95       	dec	r18
    cad6:	d1 f7       	brne	.-12     	; 0xcacc <f_mkdir+0xa8>
    cad8:	4b 87       	std	Y+11, r20	; 0x0b
    cada:	5c 87       	std	Y+12, r21	; 0x0c
    cadc:	6d 87       	std	Y+13, r22	; 0x0d
    cade:	7e 87       	std	Y+14, r23	; 0x0e
    cae0:	81 14       	cp	r8, r1
    cae2:	91 04       	cpc	r9, r1
    cae4:	a1 04       	cpc	r10, r1
    cae6:	b1 04       	cpc	r11, r1
    cae8:	a9 f0       	breq	.+42     	; 0xcb14 <f_mkdir+0xf0>
    caea:	31 e0       	ldi	r19, 0x01	; 1
    caec:	83 16       	cp	r8, r19
    caee:	91 04       	cpc	r9, r1
    caf0:	a1 04       	cpc	r10, r1
    caf2:	b1 04       	cpc	r11, r1
    caf4:	59 f0       	breq	.+22     	; 0xcb0c <f_mkdir+0xe8>
    caf6:	4f ef       	ldi	r20, 0xFF	; 255
    caf8:	84 16       	cp	r8, r20
    cafa:	94 06       	cpc	r9, r20
    cafc:	a4 06       	cpc	r10, r20
    cafe:	b4 06       	cpc	r11, r20
    cb00:	09 f0       	breq	.+2      	; 0xcb04 <f_mkdir+0xe0>
    cb02:	cf c0       	rjmp	.+414    	; 0xcca2 <f_mkdir+0x27e>
    cb04:	ee 24       	eor	r14, r14
    cb06:	e3 94       	inc	r14
    cb08:	f1 2c       	mov	r15, r1
    cb0a:	07 c0       	rjmp	.+14     	; 0xcb1a <f_mkdir+0xf6>
    cb0c:	62 e0       	ldi	r22, 0x02	; 2
    cb0e:	e6 2e       	mov	r14, r22
    cb10:	f1 2c       	mov	r15, r1
    cb12:	03 c0       	rjmp	.+6      	; 0xcb1a <f_mkdir+0xf6>
    cb14:	57 e0       	ldi	r21, 0x07	; 7
    cb16:	e5 2e       	mov	r14, r21
    cb18:	f1 2c       	mov	r15, r1
    cb1a:	0e 94 04 75 	call	0xea08	; 0xea08 <get_fattime>
    cb1e:	2b 01       	movw	r4, r22
    cb20:	3c 01       	movw	r6, r24
    cb22:	e1 14       	cp	r14, r1
    cb24:	f1 04       	cpc	r15, r1
    cb26:	09 f0       	breq	.+2      	; 0xcb2a <f_mkdir+0x106>
    cb28:	8f c0       	rjmp	.+286    	; 0xcc48 <f_mkdir+0x224>
    cb2a:	0f a5       	ldd	r16, Y+47	; 0x2f
    cb2c:	18 a9       	ldd	r17, Y+48	; 0x30
    cb2e:	b5 01       	movw	r22, r10
    cb30:	a4 01       	movw	r20, r8
    cb32:	c8 01       	movw	r24, r16
    cb34:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    cb38:	6b 01       	movw	r12, r22
    cb3a:	7c 01       	movw	r14, r24
    cb3c:	18 01       	movw	r2, r16
    cb3e:	55 e3       	ldi	r21, 0x35	; 53
    cb40:	25 0e       	add	r2, r21
    cb42:	31 1c       	adc	r3, r1
    cb44:	40 e0       	ldi	r20, 0x00	; 0
    cb46:	52 e0       	ldi	r21, 0x02	; 2
    cb48:	60 e0       	ldi	r22, 0x00	; 0
    cb4a:	70 e0       	ldi	r23, 0x00	; 0
    cb4c:	c1 01       	movw	r24, r2
    cb4e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    cb52:	4b e0       	ldi	r20, 0x0B	; 11
    cb54:	50 e0       	ldi	r21, 0x00	; 0
    cb56:	60 e2       	ldi	r22, 0x20	; 32
    cb58:	70 e0       	ldi	r23, 0x00	; 0
    cb5a:	c1 01       	movw	r24, r2
    cb5c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    cb60:	ee e2       	ldi	r30, 0x2E	; 46
    cb62:	d8 01       	movw	r26, r16
    cb64:	d5 96       	adiw	r26, 0x35	; 53
    cb66:	ec 93       	st	X, r30
    cb68:	f8 01       	movw	r30, r16
    cb6a:	e0 5c       	subi	r30, 0xC0	; 192
    cb6c:	ff 4f       	sbci	r31, 0xFF	; 255
    cb6e:	80 e1       	ldi	r24, 0x10	; 16
    cb70:	80 83       	st	Z, r24
    cb72:	b3 01       	movw	r22, r6
    cb74:	a2 01       	movw	r20, r4
    cb76:	c8 01       	movw	r24, r16
    cb78:	85 5b       	subi	r24, 0xB5	; 181
    cb7a:	9f 4f       	sbci	r25, 0xFF	; 255
    cb7c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    cb80:	a5 01       	movw	r20, r10
    cb82:	94 01       	movw	r18, r8
    cb84:	b1 01       	movw	r22, r2
    cb86:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb88:	98 a9       	ldd	r25, Y+48	; 0x30
    cb8a:	0e 94 53 48 	call	0x90a6	; 0x90a6 <st_clust.isra.2>
    cb8e:	98 01       	movw	r18, r16
    cb90:	2b 5a       	subi	r18, 0xAB	; 171
    cb92:	3f 4f       	sbci	r19, 0xFF	; 255
    cb94:	3c ab       	std	Y+52, r19	; 0x34
    cb96:	2b ab       	std	Y+51, r18	; 0x33
    cb98:	40 e2       	ldi	r20, 0x20	; 32
    cb9a:	50 e0       	ldi	r21, 0x00	; 0
    cb9c:	b1 01       	movw	r22, r2
    cb9e:	c9 01       	movw	r24, r18
    cba0:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    cba4:	f8 01       	movw	r30, r16
    cba6:	ea 5a       	subi	r30, 0xAA	; 170
    cba8:	ff 4f       	sbci	r31, 0xFF	; 255
    cbaa:	3e e2       	ldi	r19, 0x2E	; 46
    cbac:	30 83       	st	Z, r19
    cbae:	2f 81       	ldd	r18, Y+7	; 0x07
    cbb0:	38 85       	ldd	r19, Y+8	; 0x08
    cbb2:	49 85       	ldd	r20, Y+9	; 0x09
    cbb4:	5a 85       	ldd	r21, Y+10	; 0x0a
    cbb6:	0f a5       	ldd	r16, Y+47	; 0x2f
    cbb8:	18 a9       	ldd	r17, Y+48	; 0x30
    cbba:	d8 01       	movw	r26, r16
    cbbc:	6c 91       	ld	r22, X
    cbbe:	63 30       	cpi	r22, 0x03	; 3
    cbc0:	71 f4       	brne	.+28     	; 0xcbde <f_mkdir+0x1ba>
    cbc2:	99 96       	adiw	r26, 0x29	; 41
    cbc4:	8d 91       	ld	r24, X+
    cbc6:	9d 91       	ld	r25, X+
    cbc8:	0d 90       	ld	r0, X+
    cbca:	bc 91       	ld	r27, X
    cbcc:	a0 2d       	mov	r26, r0
    cbce:	28 17       	cp	r18, r24
    cbd0:	39 07       	cpc	r19, r25
    cbd2:	4a 07       	cpc	r20, r26
    cbd4:	5b 07       	cpc	r21, r27
    cbd6:	19 f4       	brne	.+6      	; 0xcbde <f_mkdir+0x1ba>
    cbd8:	20 e0       	ldi	r18, 0x00	; 0
    cbda:	30 e0       	ldi	r19, 0x00	; 0
    cbdc:	a9 01       	movw	r20, r18
    cbde:	6b a9       	ldd	r22, Y+51	; 0x33
    cbe0:	7c a9       	ldd	r23, Y+52	; 0x34
    cbe2:	c8 01       	movw	r24, r16
    cbe4:	0e 94 53 48 	call	0x90a6	; 0x90a6 <st_clust.isra.2>
    cbe8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cbea:	f8 a9       	ldd	r31, Y+48	; 0x30
    cbec:	01 85       	ldd	r16, Z+9	; 0x09
    cbee:	12 85       	ldd	r17, Z+10	; 0x0a
    cbf0:	01 15       	cp	r16, r1
    cbf2:	11 05       	cpc	r17, r1
    cbf4:	99 f1       	breq	.+102    	; 0xcc5c <f_mkdir+0x238>
    cbf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    cbf8:	98 a9       	ldd	r25, Y+48	; 0x30
    cbfa:	a7 01       	movw	r20, r14
    cbfc:	96 01       	movw	r18, r12
    cbfe:	2f 5f       	subi	r18, 0xFF	; 255
    cc00:	3f 4f       	sbci	r19, 0xFF	; 255
    cc02:	4f 4f       	sbci	r20, 0xFF	; 255
    cc04:	5f 4f       	sbci	r21, 0xFF	; 255
    cc06:	2b ab       	std	Y+51, r18	; 0x33
    cc08:	3c ab       	std	Y+52, r19	; 0x34
    cc0a:	4d ab       	std	Y+53, r20	; 0x35
    cc0c:	5e ab       	std	Y+54, r21	; 0x36
    cc0e:	dc 01       	movw	r26, r24
    cc10:	d1 96       	adiw	r26, 0x31	; 49
    cc12:	cd 92       	st	X+, r12
    cc14:	dd 92       	st	X+, r13
    cc16:	ed 92       	st	X+, r14
    cc18:	fc 92       	st	X, r15
    cc1a:	d4 97       	sbiw	r26, 0x34	; 52
    cc1c:	e1 e0       	ldi	r30, 0x01	; 1
    cc1e:	13 96       	adiw	r26, 0x03	; 3
    cc20:	ec 93       	st	X, r30
    cc22:	0e 94 60 48 	call	0x90c0	; 0x90c0 <sync_window.part.3>
    cc26:	7c 01       	movw	r14, r24
    cc28:	89 2b       	or	r24, r25
    cc2a:	71 f4       	brne	.+28     	; 0xcc48 <f_mkdir+0x224>
    cc2c:	40 e0       	ldi	r20, 0x00	; 0
    cc2e:	52 e0       	ldi	r21, 0x02	; 2
    cc30:	60 e0       	ldi	r22, 0x00	; 0
    cc32:	70 e0       	ldi	r23, 0x00	; 0
    cc34:	c1 01       	movw	r24, r2
    cc36:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    cc3a:	01 50       	subi	r16, 0x01	; 1
    cc3c:	11 09       	sbc	r17, r1
    cc3e:	cb a8       	ldd	r12, Y+51	; 0x33
    cc40:	dc a8       	ldd	r13, Y+52	; 0x34
    cc42:	ed a8       	ldd	r14, Y+53	; 0x35
    cc44:	fe a8       	ldd	r15, Y+54	; 0x36
    cc46:	d4 cf       	rjmp	.-88     	; 0xcbf0 <f_mkdir+0x1cc>
    cc48:	00 e0       	ldi	r16, 0x00	; 0
    cc4a:	10 e0       	ldi	r17, 0x00	; 0
    cc4c:	98 01       	movw	r18, r16
    cc4e:	b5 01       	movw	r22, r10
    cc50:	a4 01       	movw	r20, r8
    cc52:	ce 01       	movw	r24, r28
    cc54:	01 96       	adiw	r24, 0x01	; 1
    cc56:	0e 94 90 4f 	call	0x9f20	; 0x9f20 <remove_chain>
    cc5a:	18 cf       	rjmp	.-464    	; 0xca8c <f_mkdir+0x68>
    cc5c:	ce 01       	movw	r24, r28
    cc5e:	01 96       	adiw	r24, 0x01	; 1
    cc60:	0e 94 88 54 	call	0xa910	; 0xa910 <dir_register>
    cc64:	7c 01       	movw	r14, r24
    cc66:	89 2b       	or	r24, r25
    cc68:	79 f7       	brne	.-34     	; 0xcc48 <f_mkdir+0x224>
    cc6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cc6c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cc6e:	b3 01       	movw	r22, r6
    cc70:	a2 01       	movw	r20, r4
    cc72:	c8 01       	movw	r24, r16
    cc74:	46 96       	adiw	r24, 0x16	; 22
    cc76:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    cc7a:	a5 01       	movw	r20, r10
    cc7c:	94 01       	movw	r18, r8
    cc7e:	b8 01       	movw	r22, r16
    cc80:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc82:	98 a9       	ldd	r25, Y+48	; 0x30
    cc84:	0e 94 53 48 	call	0x90a6	; 0x90a6 <st_clust.isra.2>
    cc88:	80 e1       	ldi	r24, 0x10	; 16
    cc8a:	f8 01       	movw	r30, r16
    cc8c:	83 87       	std	Z+11, r24	; 0x0b
    cc8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc90:	98 a9       	ldd	r25, Y+48	; 0x30
    cc92:	21 e0       	ldi	r18, 0x01	; 1
    cc94:	dc 01       	movw	r26, r24
    cc96:	13 96       	adiw	r26, 0x03	; 3
    cc98:	2c 93       	st	X, r18
    cc9a:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    cc9e:	7c 01       	movw	r14, r24
    cca0:	f5 ce       	rjmp	.-534    	; 0xca8c <f_mkdir+0x68>
    cca2:	0e 94 b1 48 	call	0x9162	; 0x9162 <sync_window>
    cca6:	7c 01       	movw	r14, r24
    cca8:	38 cf       	rjmp	.-400    	; 0xcb1a <f_mkdir+0xf6>
    ccaa:	ec 96       	adiw	r28, 0x3c	; 60
    ccac:	e2 e1       	ldi	r30, 0x12	; 18
    ccae:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000ccb2 <f_rename>:
    ccb2:	aa e7       	ldi	r26, 0x7A	; 122
    ccb4:	b0 e0       	ldi	r27, 0x00	; 0
    ccb6:	ef e5       	ldi	r30, 0x5F	; 95
    ccb8:	f6 e6       	ldi	r31, 0x66	; 102
    ccba:	0c 94 24 eb 	jmp	0x1d648	; 0x1d648 <__prologue_saves__+0x12>
    ccbe:	e9 96       	adiw	r28, 0x39	; 57
    ccc0:	9f af       	std	Y+63, r25	; 0x3f
    ccc2:	8e af       	std	Y+62, r24	; 0x3e
    ccc4:	e9 97       	sbiw	r28, 0x39	; 57
    ccc6:	eb 96       	adiw	r28, 0x3b	; 59
    ccc8:	7f af       	std	Y+63, r23	; 0x3f
    ccca:	6e af       	std	Y+62, r22	; 0x3e
    cccc:	eb 97       	sbiw	r28, 0x3b	; 59
    ccce:	ce 01       	movw	r24, r28
    ccd0:	87 58       	subi	r24, 0x87	; 135
    ccd2:	9f 4f       	sbci	r25, 0xFF	; 255
    ccd4:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <get_ldnumber>
    ccd8:	42 e0       	ldi	r20, 0x02	; 2
    ccda:	be 01       	movw	r22, r28
    ccdc:	6b 58       	subi	r22, 0x8B	; 139
    ccde:	7f 4f       	sbci	r23, 0xFF	; 255
    cce0:	ce 01       	movw	r24, r28
    cce2:	89 58       	subi	r24, 0x89	; 137
    cce4:	9f 4f       	sbci	r25, 0xFF	; 255
    cce6:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    ccea:	00 97       	sbiw	r24, 0x00	; 0
    ccec:	09 f0       	breq	.+2      	; 0xccf0 <f_rename+0x3e>
    ccee:	eb c0       	rjmp	.+470    	; 0xcec6 <f_rename+0x214>
    ccf0:	e7 96       	adiw	r28, 0x37	; 55
    ccf2:	8e ad       	ldd	r24, Y+62	; 0x3e
    ccf4:	9f ad       	ldd	r25, Y+63	; 0x3f
    ccf6:	e7 97       	sbiw	r28, 0x37	; 55
    ccf8:	98 ab       	std	Y+48, r25	; 0x30
    ccfa:	8f a7       	std	Y+47, r24	; 0x2f
    ccfc:	80 e0       	ldi	r24, 0x00	; 0
    ccfe:	92 e0       	ldi	r25, 0x02	; 2
    cd00:	73 d7       	rcall	.+3814   	; 0xdbe8 <ff_memalloc>
    cd02:	6c 01       	movw	r12, r24
    cd04:	00 97       	sbiw	r24, 0x00	; 0
    cd06:	09 f4       	brne	.+2      	; 0xcd0a <f_rename+0x58>
    cd08:	3f c0       	rjmp	.+126    	; 0xcd88 <f_rename+0xd6>
    cd0a:	e7 96       	adiw	r28, 0x37	; 55
    cd0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd10:	e7 97       	sbiw	r28, 0x37	; 55
    cd12:	94 87       	std	Z+12, r25	; 0x0c
    cd14:	83 87       	std	Z+11, r24	; 0x0b
    cd16:	e9 96       	adiw	r28, 0x39	; 57
    cd18:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd1a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd1c:	e9 97       	sbiw	r28, 0x39	; 57
    cd1e:	ce 01       	movw	r24, r28
    cd20:	8f 96       	adiw	r24, 0x2f	; 47
    cd22:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    cd26:	8c 01       	movw	r16, r24
    cd28:	89 2b       	or	r24, r25
    cd2a:	51 f5       	brne	.+84     	; 0xcd80 <f_rename+0xce>
    cd2c:	67 96       	adiw	r28, 0x17	; 23
    cd2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd30:	67 97       	sbiw	r28, 0x17	; 23
    cd32:	80 7a       	andi	r24, 0xA0	; 160
    cd34:	09 f0       	breq	.+2      	; 0xcd38 <f_rename+0x86>
    cd36:	ae c0       	rjmp	.+348    	; 0xce94 <f_rename+0x1e2>
    cd38:	2b 96       	adiw	r28, 0x0b	; 11
    cd3a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd3c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd3e:	2b 97       	sbiw	r28, 0x0b	; 11
    cd40:	65 5f       	subi	r22, 0xF5	; 245
    cd42:	7f 4f       	sbci	r23, 0xFF	; 255
    cd44:	45 e1       	ldi	r20, 0x15	; 21
    cd46:	50 e0       	ldi	r21, 0x00	; 0
    cd48:	ce 01       	movw	r24, r28
    cd4a:	83 5a       	subi	r24, 0xA3	; 163
    cd4c:	9f 4f       	sbci	r25, 0xFF	; 255
    cd4e:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    cd52:	4e e2       	ldi	r20, 0x2E	; 46
    cd54:	50 e0       	ldi	r21, 0x00	; 0
    cd56:	be 01       	movw	r22, r28
    cd58:	61 5d       	subi	r22, 0xD1	; 209
    cd5a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd5c:	ce 01       	movw	r24, r28
    cd5e:	01 96       	adiw	r24, 0x01	; 1
    cd60:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    cd64:	eb 96       	adiw	r28, 0x3b	; 59
    cd66:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd68:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd6a:	eb 97       	sbiw	r28, 0x3b	; 59
    cd6c:	ce 01       	movw	r24, r28
    cd6e:	01 96       	adiw	r24, 0x01	; 1
    cd70:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    cd74:	8c 01       	movw	r16, r24
    cd76:	89 2b       	or	r24, r25
    cd78:	51 f0       	breq	.+20     	; 0xcd8e <f_rename+0xdc>
    cd7a:	04 30       	cpi	r16, 0x04	; 4
    cd7c:	11 05       	cpc	r17, r1
    cd7e:	29 f1       	breq	.+74     	; 0xcdca <f_rename+0x118>
    cd80:	c6 01       	movw	r24, r12
    cd82:	35 d7       	rcall	.+3690   	; 0xdbee <ff_memfree>
    cd84:	c8 01       	movw	r24, r16
    cd86:	9f c0       	rjmp	.+318    	; 0xcec6 <f_rename+0x214>
    cd88:	81 e1       	ldi	r24, 0x11	; 17
    cd8a:	90 e0       	ldi	r25, 0x00	; 0
    cd8c:	9c c0       	rjmp	.+312    	; 0xcec6 <f_rename+0x214>
    cd8e:	4f 81       	ldd	r20, Y+7	; 0x07
    cd90:	58 85       	ldd	r21, Y+8	; 0x08
    cd92:	69 85       	ldd	r22, Y+9	; 0x09
    cd94:	7a 85       	ldd	r23, Y+10	; 0x0a
    cd96:	8d a9       	ldd	r24, Y+53	; 0x35
    cd98:	9e a9       	ldd	r25, Y+54	; 0x36
    cd9a:	af a9       	ldd	r26, Y+55	; 0x37
    cd9c:	b8 ad       	ldd	r27, Y+56	; 0x38
    cd9e:	48 17       	cp	r20, r24
    cda0:	59 07       	cpc	r21, r25
    cda2:	6a 07       	cpc	r22, r26
    cda4:	7b 07       	cpc	r23, r27
    cda6:	09 f0       	breq	.+2      	; 0xcdaa <f_rename+0xf8>
    cda8:	88 c0       	rjmp	.+272    	; 0xceba <f_rename+0x208>
    cdaa:	4f 85       	ldd	r20, Y+15	; 0x0f
    cdac:	58 89       	ldd	r21, Y+16	; 0x10
    cdae:	69 89       	ldd	r22, Y+17	; 0x11
    cdb0:	7a 89       	ldd	r23, Y+18	; 0x12
    cdb2:	21 96       	adiw	r28, 0x01	; 1
    cdb4:	8c ad       	ldd	r24, Y+60	; 0x3c
    cdb6:	9d ad       	ldd	r25, Y+61	; 0x3d
    cdb8:	ae ad       	ldd	r26, Y+62	; 0x3e
    cdba:	bf ad       	ldd	r27, Y+63	; 0x3f
    cdbc:	21 97       	sbiw	r28, 0x01	; 1
    cdbe:	48 17       	cp	r20, r24
    cdc0:	59 07       	cpc	r21, r25
    cdc2:	6a 07       	cpc	r22, r26
    cdc4:	7b 07       	cpc	r23, r27
    cdc6:	09 f0       	breq	.+2      	; 0xcdca <f_rename+0x118>
    cdc8:	78 c0       	rjmp	.+240    	; 0xceba <f_rename+0x208>
    cdca:	ce 01       	movw	r24, r28
    cdcc:	01 96       	adiw	r24, 0x01	; 1
    cdce:	0e 94 88 54 	call	0xa910	; 0xa910 <dir_register>
    cdd2:	8c 01       	movw	r16, r24
    cdd4:	89 2b       	or	r24, r25
    cdd6:	a1 f6       	brne	.-88     	; 0xcd80 <f_rename+0xce>
    cdd8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    cdda:	fc 8c       	ldd	r15, Y+28	; 0x1c
    cddc:	6d e5       	ldi	r22, 0x5D	; 93
    cdde:	70 e0       	ldi	r23, 0x00	; 0
    cde0:	6c 0f       	add	r22, r28
    cde2:	7d 1f       	adc	r23, r29
    cde4:	6e 5f       	subi	r22, 0xFE	; 254
    cde6:	7f 4f       	sbci	r23, 0xFF	; 255
    cde8:	43 e1       	ldi	r20, 0x13	; 19
    cdea:	50 e0       	ldi	r21, 0x00	; 0
    cdec:	c7 01       	movw	r24, r14
    cdee:	0d 96       	adiw	r24, 0x0d	; 13
    cdf0:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>
    cdf4:	6e 96       	adiw	r28, 0x1e	; 30
    cdf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdf8:	6e 97       	sbiw	r28, 0x1e	; 30
    cdfa:	80 62       	ori	r24, 0x20	; 32
    cdfc:	f7 01       	movw	r30, r14
    cdfe:	83 87       	std	Z+11, r24	; 0x0b
    ce00:	e7 96       	adiw	r28, 0x37	; 55
    ce02:	0e ad       	ldd	r16, Y+62	; 0x3e
    ce04:	1f ad       	ldd	r17, Y+63	; 0x3f
    ce06:	e7 97       	sbiw	r28, 0x37	; 55
    ce08:	bb 24       	eor	r11, r11
    ce0a:	b3 94       	inc	r11
    ce0c:	f8 01       	movw	r30, r16
    ce0e:	b3 82       	std	Z+3, r11	; 0x03
    ce10:	f7 01       	movw	r30, r14
    ce12:	83 85       	ldd	r24, Z+11	; 0x0b
    ce14:	84 ff       	sbrs	r24, 4
    ce16:	41 c0       	rjmp	.+130    	; 0xce9a <f_rename+0x1e8>
    ce18:	4d a9       	ldd	r20, Y+53	; 0x35
    ce1a:	5e a9       	ldd	r21, Y+54	; 0x36
    ce1c:	6f a9       	ldd	r22, Y+55	; 0x37
    ce1e:	78 ad       	ldd	r23, Y+56	; 0x38
    ce20:	8f 81       	ldd	r24, Y+7	; 0x07
    ce22:	98 85       	ldd	r25, Y+8	; 0x08
    ce24:	a9 85       	ldd	r26, Y+9	; 0x09
    ce26:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce28:	48 17       	cp	r20, r24
    ce2a:	59 07       	cpc	r21, r25
    ce2c:	6a 07       	cpc	r22, r26
    ce2e:	7b 07       	cpc	r23, r27
    ce30:	a1 f1       	breq	.+104    	; 0xce9a <f_rename+0x1e8>
    ce32:	b7 01       	movw	r22, r14
    ce34:	f8 01       	movw	r30, r16
    ce36:	80 81       	ld	r24, Z
    ce38:	0e 94 3e 48 	call	0x907c	; 0x907c <ld_clust.isra.1>
    ce3c:	ab 01       	movw	r20, r22
    ce3e:	bc 01       	movw	r22, r24
    ce40:	c8 01       	movw	r24, r16
    ce42:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <clust2sect>
    ce46:	ab 01       	movw	r20, r22
    ce48:	bc 01       	movw	r22, r24
    ce4a:	41 15       	cp	r20, r1
    ce4c:	51 05       	cpc	r21, r1
    ce4e:	61 05       	cpc	r22, r1
    ce50:	71 05       	cpc	r23, r1
    ce52:	b1 f1       	breq	.+108    	; 0xcec0 <f_rename+0x20e>
    ce54:	c8 01       	movw	r24, r16
    ce56:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    ce5a:	8c 01       	movw	r16, r24
    ce5c:	89 2b       	or	r24, r25
    ce5e:	09 f0       	breq	.+2      	; 0xce62 <f_rename+0x1b0>
    ce60:	8f cf       	rjmp	.-226    	; 0xcd80 <f_rename+0xce>
    ce62:	e7 96       	adiw	r28, 0x37	; 55
    ce64:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce66:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce68:	e7 97       	sbiw	r28, 0x37	; 55
    ce6a:	fc 01       	movw	r30, r24
    ce6c:	ea 5a       	subi	r30, 0xAA	; 170
    ce6e:	ff 4f       	sbci	r31, 0xFF	; 255
    ce70:	20 81       	ld	r18, Z
    ce72:	2e 32       	cpi	r18, 0x2E	; 46
    ce74:	91 f4       	brne	.+36     	; 0xce9a <f_rename+0x1e8>
    ce76:	2f 81       	ldd	r18, Y+7	; 0x07
    ce78:	38 85       	ldd	r19, Y+8	; 0x08
    ce7a:	49 85       	ldd	r20, Y+9	; 0x09
    ce7c:	5a 85       	ldd	r21, Y+10	; 0x0a
    ce7e:	bc 01       	movw	r22, r24
    ce80:	6b 5a       	subi	r22, 0xAB	; 171
    ce82:	7f 4f       	sbci	r23, 0xFF	; 255
    ce84:	0e 94 53 48 	call	0x90a6	; 0x90a6 <st_clust.isra.2>
    ce88:	e7 96       	adiw	r28, 0x37	; 55
    ce8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce8e:	e7 97       	sbiw	r28, 0x37	; 55
    ce90:	b3 82       	std	Z+3, r11	; 0x03
    ce92:	03 c0       	rjmp	.+6      	; 0xce9a <f_rename+0x1e8>
    ce94:	06 e0       	ldi	r16, 0x06	; 6
    ce96:	10 e0       	ldi	r17, 0x00	; 0
    ce98:	73 cf       	rjmp	.-282    	; 0xcd80 <f_rename+0xce>
    ce9a:	ce 01       	movw	r24, r28
    ce9c:	8f 96       	adiw	r24, 0x2f	; 47
    ce9e:	0e 94 29 53 	call	0xa652	; 0xa652 <dir_remove>
    cea2:	8c 01       	movw	r16, r24
    cea4:	89 2b       	or	r24, r25
    cea6:	09 f0       	breq	.+2      	; 0xceaa <f_rename+0x1f8>
    cea8:	6b cf       	rjmp	.-298    	; 0xcd80 <f_rename+0xce>
    ceaa:	e7 96       	adiw	r28, 0x37	; 55
    ceac:	8e ad       	ldd	r24, Y+62	; 0x3e
    ceae:	9f ad       	ldd	r25, Y+63	; 0x3f
    ceb0:	e7 97       	sbiw	r28, 0x37	; 55
    ceb2:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    ceb6:	8c 01       	movw	r16, r24
    ceb8:	63 cf       	rjmp	.-314    	; 0xcd80 <f_rename+0xce>
    ceba:	08 e0       	ldi	r16, 0x08	; 8
    cebc:	10 e0       	ldi	r17, 0x00	; 0
    cebe:	60 cf       	rjmp	.-320    	; 0xcd80 <f_rename+0xce>
    cec0:	02 e0       	ldi	r16, 0x02	; 2
    cec2:	10 e0       	ldi	r17, 0x00	; 0
    cec4:	5d cf       	rjmp	.-326    	; 0xcd80 <f_rename+0xce>
    cec6:	c6 58       	subi	r28, 0x86	; 134
    cec8:	df 4f       	sbci	r29, 0xFF	; 255
    ceca:	e9 e0       	ldi	r30, 0x09	; 9
    cecc:	0c 94 40 eb 	jmp	0x1d680	; 0x1d680 <__epilogue_restores__+0x12>

0000ced0 <f_chmod>:
    ced0:	a2 e3       	ldi	r26, 0x32	; 50
    ced2:	b0 e0       	ldi	r27, 0x00	; 0
    ced4:	ee e6       	ldi	r30, 0x6E	; 110
    ced6:	f7 e6       	ldi	r31, 0x67	; 103
    ced8:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    cedc:	9a ab       	std	Y+50, r25	; 0x32
    cede:	89 ab       	std	Y+49, r24	; 0x31
    cee0:	e6 2e       	mov	r14, r22
    cee2:	f4 2e       	mov	r15, r20
    cee4:	42 e0       	ldi	r20, 0x02	; 2
    cee6:	be 01       	movw	r22, r28
    cee8:	61 5d       	subi	r22, 0xD1	; 209
    ceea:	7f 4f       	sbci	r23, 0xFF	; 255
    ceec:	ce 01       	movw	r24, r28
    ceee:	c1 96       	adiw	r24, 0x31	; 49
    cef0:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    cef4:	2f a5       	ldd	r18, Y+47	; 0x2f
    cef6:	38 a9       	ldd	r19, Y+48	; 0x30
    cef8:	3a 83       	std	Y+2, r19	; 0x02
    cefa:	29 83       	std	Y+1, r18	; 0x01
    cefc:	00 97       	sbiw	r24, 0x00	; 0
    cefe:	89 f5       	brne	.+98     	; 0xcf62 <f_chmod+0x92>
    cf00:	80 e0       	ldi	r24, 0x00	; 0
    cf02:	92 e0       	ldi	r25, 0x02	; 2
    cf04:	71 d6       	rcall	.+3298   	; 0xdbe8 <ff_memalloc>
    cf06:	6c 01       	movw	r12, r24
    cf08:	00 97       	sbiw	r24, 0x00	; 0
    cf0a:	b1 f0       	breq	.+44     	; 0xcf38 <f_chmod+0x68>
    cf0c:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf0e:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf10:	94 87       	std	Z+12, r25	; 0x0c
    cf12:	83 87       	std	Z+11, r24	; 0x0b
    cf14:	69 a9       	ldd	r22, Y+49	; 0x31
    cf16:	7a a9       	ldd	r23, Y+50	; 0x32
    cf18:	ce 01       	movw	r24, r28
    cf1a:	01 96       	adiw	r24, 0x01	; 1
    cf1c:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    cf20:	8c 01       	movw	r16, r24
    cf22:	89 2b       	or	r24, r25
    cf24:	29 f4       	brne	.+10     	; 0xcf30 <f_chmod+0x60>
    cf26:	88 a5       	ldd	r24, Y+40	; 0x28
    cf28:	80 7a       	andi	r24, 0xA0	; 160
    cf2a:	49 f0       	breq	.+18     	; 0xcf3e <f_chmod+0x6e>
    cf2c:	06 e0       	ldi	r16, 0x06	; 6
    cf2e:	10 e0       	ldi	r17, 0x00	; 0
    cf30:	c6 01       	movw	r24, r12
    cf32:	5d d6       	rcall	.+3258   	; 0xdbee <ff_memfree>
    cf34:	c8 01       	movw	r24, r16
    cf36:	15 c0       	rjmp	.+42     	; 0xcf62 <f_chmod+0x92>
    cf38:	81 e1       	ldi	r24, 0x11	; 17
    cf3a:	90 e0       	ldi	r25, 0x00	; 0
    cf3c:	12 c0       	rjmp	.+36     	; 0xcf62 <f_chmod+0x92>
    cf3e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf40:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf42:	83 85       	ldd	r24, Z+11	; 0x0b
    cf44:	6e 2d       	mov	r22, r14
    cf46:	68 27       	eor	r22, r24
    cf48:	6f 21       	and	r22, r15
    cf4a:	67 72       	andi	r22, 0x27	; 39
    cf4c:	68 27       	eor	r22, r24
    cf4e:	63 87       	std	Z+11, r22	; 0x0b
    cf50:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf52:	98 a9       	ldd	r25, Y+48	; 0x30
    cf54:	21 e0       	ldi	r18, 0x01	; 1
    cf56:	fc 01       	movw	r30, r24
    cf58:	23 83       	std	Z+3, r18	; 0x03
    cf5a:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    cf5e:	8c 01       	movw	r16, r24
    cf60:	e7 cf       	rjmp	.-50     	; 0xcf30 <f_chmod+0x60>
    cf62:	e2 96       	adiw	r28, 0x32	; 50
    cf64:	e8 e0       	ldi	r30, 0x08	; 8
    cf66:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000cf6a <f_utime>:
    cf6a:	a2 e3       	ldi	r26, 0x32	; 50
    cf6c:	b0 e0       	ldi	r27, 0x00	; 0
    cf6e:	eb eb       	ldi	r30, 0xBB	; 187
    cf70:	f7 e6       	ldi	r31, 0x67	; 103
    cf72:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    cf76:	9a ab       	std	Y+50, r25	; 0x32
    cf78:	89 ab       	std	Y+49, r24	; 0x31
    cf7a:	6b 01       	movw	r12, r22
    cf7c:	42 e0       	ldi	r20, 0x02	; 2
    cf7e:	be 01       	movw	r22, r28
    cf80:	61 5d       	subi	r22, 0xD1	; 209
    cf82:	7f 4f       	sbci	r23, 0xFF	; 255
    cf84:	ce 01       	movw	r24, r28
    cf86:	c1 96       	adiw	r24, 0x31	; 49
    cf88:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    cf8c:	2f a5       	ldd	r18, Y+47	; 0x2f
    cf8e:	38 a9       	ldd	r19, Y+48	; 0x30
    cf90:	3a 83       	std	Y+2, r19	; 0x02
    cf92:	29 83       	std	Y+1, r18	; 0x01
    cf94:	00 97       	sbiw	r24, 0x00	; 0
    cf96:	09 f0       	breq	.+2      	; 0xcf9a <f_utime+0x30>
    cf98:	3d c0       	rjmp	.+122    	; 0xd014 <f_utime+0xaa>
    cf9a:	80 e0       	ldi	r24, 0x00	; 0
    cf9c:	92 e0       	ldi	r25, 0x02	; 2
    cf9e:	24 d6       	rcall	.+3144   	; 0xdbe8 <ff_memalloc>
    cfa0:	7c 01       	movw	r14, r24
    cfa2:	00 97       	sbiw	r24, 0x00	; 0
    cfa4:	b1 f0       	breq	.+44     	; 0xcfd2 <f_utime+0x68>
    cfa6:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfa8:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfaa:	94 87       	std	Z+12, r25	; 0x0c
    cfac:	83 87       	std	Z+11, r24	; 0x0b
    cfae:	69 a9       	ldd	r22, Y+49	; 0x31
    cfb0:	7a a9       	ldd	r23, Y+50	; 0x32
    cfb2:	ce 01       	movw	r24, r28
    cfb4:	01 96       	adiw	r24, 0x01	; 1
    cfb6:	0e 94 2c 56 	call	0xac58	; 0xac58 <follow_path>
    cfba:	8c 01       	movw	r16, r24
    cfbc:	89 2b       	or	r24, r25
    cfbe:	29 f4       	brne	.+10     	; 0xcfca <f_utime+0x60>
    cfc0:	88 a5       	ldd	r24, Y+40	; 0x28
    cfc2:	80 7a       	andi	r24, 0xA0	; 160
    cfc4:	49 f0       	breq	.+18     	; 0xcfd8 <f_utime+0x6e>
    cfc6:	06 e0       	ldi	r16, 0x06	; 6
    cfc8:	10 e0       	ldi	r17, 0x00	; 0
    cfca:	c7 01       	movw	r24, r14
    cfcc:	10 d6       	rcall	.+3104   	; 0xdbee <ff_memfree>
    cfce:	c8 01       	movw	r24, r16
    cfd0:	21 c0       	rjmp	.+66     	; 0xd014 <f_utime+0xaa>
    cfd2:	81 e1       	ldi	r24, 0x11	; 17
    cfd4:	90 e0       	ldi	r25, 0x00	; 0
    cfd6:	1e c0       	rjmp	.+60     	; 0xd014 <f_utime+0xaa>
    cfd8:	f6 01       	movw	r30, r12
    cfda:	44 81       	ldd	r20, Z+4	; 0x04
    cfdc:	55 81       	ldd	r21, Z+5	; 0x05
    cfde:	60 e0       	ldi	r22, 0x00	; 0
    cfe0:	70 e0       	ldi	r23, 0x00	; 0
    cfe2:	ba 01       	movw	r22, r20
    cfe4:	55 27       	eor	r21, r21
    cfe6:	44 27       	eor	r20, r20
    cfe8:	86 81       	ldd	r24, Z+6	; 0x06
    cfea:	97 81       	ldd	r25, Z+7	; 0x07
    cfec:	a0 e0       	ldi	r26, 0x00	; 0
    cfee:	b0 e0       	ldi	r27, 0x00	; 0
    cff0:	48 2b       	or	r20, r24
    cff2:	59 2b       	or	r21, r25
    cff4:	6a 2b       	or	r22, r26
    cff6:	7b 2b       	or	r23, r27
    cff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cffc:	46 96       	adiw	r24, 0x16	; 22
    cffe:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    d002:	8f a5       	ldd	r24, Y+47	; 0x2f
    d004:	98 a9       	ldd	r25, Y+48	; 0x30
    d006:	21 e0       	ldi	r18, 0x01	; 1
    d008:	fc 01       	movw	r30, r24
    d00a:	23 83       	std	Z+3, r18	; 0x03
    d00c:	0e 94 ba 48 	call	0x9174	; 0x9174 <sync_fs>
    d010:	8c 01       	movw	r16, r24
    d012:	db cf       	rjmp	.-74     	; 0xcfca <f_utime+0x60>
    d014:	e2 96       	adiw	r28, 0x32	; 50
    d016:	e8 e0       	ldi	r30, 0x08	; 8
    d018:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000d01c <f_getlabel>:
    d01c:	a2 e3       	ldi	r26, 0x32	; 50
    d01e:	b0 e0       	ldi	r27, 0x00	; 0
    d020:	e4 e1       	ldi	r30, 0x14	; 20
    d022:	f8 e6       	ldi	r31, 0x68	; 104
    d024:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    d028:	9a ab       	std	Y+50, r25	; 0x32
    d02a:	89 ab       	std	Y+49, r24	; 0x31
    d02c:	7b 01       	movw	r14, r22
    d02e:	6a 01       	movw	r12, r20
    d030:	40 e0       	ldi	r20, 0x00	; 0
    d032:	be 01       	movw	r22, r28
    d034:	61 5d       	subi	r22, 0xD1	; 209
    d036:	7f 4f       	sbci	r23, 0xFF	; 255
    d038:	ce 01       	movw	r24, r28
    d03a:	c1 96       	adiw	r24, 0x31	; 49
    d03c:	0e 94 a6 49 	call	0x934c	; 0x934c <find_volume>
    d040:	8c 01       	movw	r16, r24
    d042:	89 2b       	or	r24, r25
    d044:	09 f0       	breq	.+2      	; 0xd048 <f_getlabel+0x2c>
    d046:	5f c0       	rjmp	.+190    	; 0xd106 <f_getlabel+0xea>
    d048:	e1 14       	cp	r14, r1
    d04a:	f1 04       	cpc	r15, r1
    d04c:	91 f1       	breq	.+100    	; 0xd0b2 <f_getlabel+0x96>
    d04e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d050:	98 a9       	ldd	r25, Y+48	; 0x30
    d052:	9a 83       	std	Y+2, r25	; 0x02
    d054:	89 83       	std	Y+1, r24	; 0x01
    d056:	1f 82       	std	Y+7, r1	; 0x07
    d058:	18 86       	std	Y+8, r1	; 0x08
    d05a:	19 86       	std	Y+9, r1	; 0x09
    d05c:	1a 86       	std	Y+10, r1	; 0x0a
    d05e:	40 e0       	ldi	r20, 0x00	; 0
    d060:	50 e0       	ldi	r21, 0x00	; 0
    d062:	ba 01       	movw	r22, r20
    d064:	ce 01       	movw	r24, r28
    d066:	01 96       	adiw	r24, 0x01	; 1
    d068:	0e 94 ff 4d 	call	0x9bfe	; 0x9bfe <dir_sdi>
    d06c:	00 97       	sbiw	r24, 0x00	; 0
    d06e:	e1 f4       	brne	.+56     	; 0xd0a8 <f_getlabel+0x8c>
    d070:	61 e0       	ldi	r22, 0x01	; 1
    d072:	70 e0       	ldi	r23, 0x00	; 0
    d074:	ce 01       	movw	r24, r28
    d076:	01 96       	adiw	r24, 0x01	; 1
    d078:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <dir_read>
    d07c:	00 97       	sbiw	r24, 0x00	; 0
    d07e:	a1 f4       	brne	.+40     	; 0xd0a8 <f_getlabel+0x8c>
    d080:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d082:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d084:	cf 01       	movw	r24, r30
    d086:	0b 96       	adiw	r24, 0x0b	; 11
    d088:	d7 01       	movw	r26, r14
    d08a:	21 91       	ld	r18, Z+
    d08c:	2d 93       	st	X+, r18
    d08e:	e8 17       	cp	r30, r24
    d090:	f9 07       	cpc	r31, r25
    d092:	d9 f7       	brne	.-10     	; 0xd08a <f_getlabel+0x6e>
    d094:	f7 01       	movw	r30, r14
    d096:	3b 96       	adiw	r30, 0x0b	; 11
    d098:	10 82       	st	Z, r1
    d09a:	ee 16       	cp	r14, r30
    d09c:	ff 06       	cpc	r15, r31
    d09e:	49 f0       	breq	.+18     	; 0xd0b2 <f_getlabel+0x96>
    d0a0:	82 91       	ld	r24, -Z
    d0a2:	80 32       	cpi	r24, 0x20	; 32
    d0a4:	c9 f3       	breq	.-14     	; 0xd098 <f_getlabel+0x7c>
    d0a6:	05 c0       	rjmp	.+10     	; 0xd0b2 <f_getlabel+0x96>
    d0a8:	84 30       	cpi	r24, 0x04	; 4
    d0aa:	91 05       	cpc	r25, r1
    d0ac:	59 f5       	brne	.+86     	; 0xd104 <f_getlabel+0xe8>
    d0ae:	f7 01       	movw	r30, r14
    d0b0:	10 82       	st	Z, r1
    d0b2:	c1 14       	cp	r12, r1
    d0b4:	d1 04       	cpc	r13, r1
    d0b6:	39 f1       	breq	.+78     	; 0xd106 <f_getlabel+0xea>
    d0b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0ba:	98 a9       	ldd	r25, Y+48	; 0x30
    d0bc:	fc 01       	movw	r30, r24
    d0be:	41 a1       	ldd	r20, Z+33	; 0x21
    d0c0:	52 a1       	ldd	r21, Z+34	; 0x22
    d0c2:	63 a1       	ldd	r22, Z+35	; 0x23
    d0c4:	74 a1       	ldd	r23, Z+36	; 0x24
    d0c6:	0e 94 26 49 	call	0x924c	; 0x924c <move_window>
    d0ca:	8c 01       	movw	r16, r24
    d0cc:	89 2b       	or	r24, r25
    d0ce:	d9 f4       	brne	.+54     	; 0xd106 <f_getlabel+0xea>
    d0d0:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0d2:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0d4:	80 81       	ld	r24, Z
    d0d6:	83 30       	cpi	r24, 0x03	; 3
    d0d8:	29 f0       	breq	.+10     	; 0xd0e4 <f_getlabel+0xc8>
    d0da:	84 30       	cpi	r24, 0x04	; 4
    d0dc:	31 f0       	breq	.+12     	; 0xd0ea <f_getlabel+0xce>
    d0de:	87 e2       	ldi	r24, 0x27	; 39
    d0e0:	90 e0       	ldi	r25, 0x00	; 0
    d0e2:	05 c0       	rjmp	.+10     	; 0xd0ee <f_getlabel+0xd2>
    d0e4:	83 e4       	ldi	r24, 0x43	; 67
    d0e6:	90 e0       	ldi	r25, 0x00	; 0
    d0e8:	02 c0       	rjmp	.+4      	; 0xd0ee <f_getlabel+0xd2>
    d0ea:	84 e6       	ldi	r24, 0x64	; 100
    d0ec:	90 e0       	ldi	r25, 0x00	; 0
    d0ee:	f5 96       	adiw	r30, 0x35	; 53
    d0f0:	8e 0f       	add	r24, r30
    d0f2:	9f 1f       	adc	r25, r31
    d0f4:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <ld_dword>
    d0f8:	f6 01       	movw	r30, r12
    d0fa:	60 83       	st	Z, r22
    d0fc:	71 83       	std	Z+1, r23	; 0x01
    d0fe:	82 83       	std	Z+2, r24	; 0x02
    d100:	93 83       	std	Z+3, r25	; 0x03
    d102:	01 c0       	rjmp	.+2      	; 0xd106 <f_getlabel+0xea>
    d104:	8c 01       	movw	r16, r24
    d106:	c8 01       	movw	r24, r16
    d108:	e2 96       	adiw	r28, 0x32	; 50
    d10a:	e8 e0       	ldi	r30, 0x08	; 8
    d10c:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000d110 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    d110:	a2 e4       	ldi	r26, 0x42	; 66
    d112:	b0 e0       	ldi	r27, 0x00	; 0
    d114:	ee e8       	ldi	r30, 0x8E	; 142
    d116:	f8 e6       	ldi	r31, 0x68	; 104
    d118:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    d11c:	9a 87       	std	Y+10, r25	; 0x0a
    d11e:	89 87       	std	Y+9, r24	; 0x09
    d120:	e6 2e       	mov	r14, r22
    d122:	49 01       	movw	r8, r18
    d124:	5a 01       	movw	r10, r20
    d126:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    d128:	ce 01       	movw	r24, r28
    d12a:	09 96       	adiw	r24, 0x09	; 9
    d12c:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <get_ldnumber>
    d130:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    d132:	97 fd       	sbrc	r25, 7
    d134:	39 c5       	rjmp	.+2674   	; 0xdba8 <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    d136:	fc 01       	movw	r30, r24
    d138:	ee 0f       	add	r30, r30
    d13a:	ff 1f       	adc	r31, r31
    d13c:	e6 5d       	subi	r30, 0xD6	; 214
    d13e:	f7 4e       	sbci	r31, 0xE7	; 231
    d140:	01 90       	ld	r0, Z+
    d142:	f0 81       	ld	r31, Z
    d144:	e0 2d       	mov	r30, r0
    d146:	30 97       	sbiw	r30, 0x00	; 0
    d148:	09 f0       	breq	.+2      	; 0xd14c <f_mkfs+0x3c>
    d14a:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    d14c:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    d14e:	82 2d       	mov	r24, r2
    d150:	d2 d5       	rcall	.+2980   	; 0xdcf6 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d152:	80 fd       	sbrc	r24, 0
    d154:	2b c5       	rjmp	.+2646   	; 0xdbac <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d156:	82 fd       	sbrc	r24, 2
    d158:	2b c5       	rjmp	.+2646   	; 0xdbb0 <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    d15a:	ae 01       	movw	r20, r28
    d15c:	4b 5f       	subi	r20, 0xFB	; 251
    d15e:	5f 4f       	sbci	r21, 0xFF	; 255
    d160:	63 e0       	ldi	r22, 0x03	; 3
    d162:	82 2d       	mov	r24, r2
    d164:	ee d5       	rcall	.+3036   	; 0xdd42 <disk_ioctl>
    d166:	89 2b       	or	r24, r25
    d168:	b9 f4       	brne	.+46     	; 0xd198 <f_mkfs+0x88>
    d16a:	4d 81       	ldd	r20, Y+5	; 0x05
    d16c:	5e 81       	ldd	r21, Y+6	; 0x06
    d16e:	6f 81       	ldd	r22, Y+7	; 0x07
    d170:	78 85       	ldd	r23, Y+8	; 0x08
    d172:	db 01       	movw	r26, r22
    d174:	ca 01       	movw	r24, r20
    d176:	01 97       	sbiw	r24, 0x01	; 1
    d178:	a1 09       	sbc	r26, r1
    d17a:	b1 09       	sbc	r27, r1
    d17c:	81 15       	cp	r24, r1
    d17e:	00 e8       	ldi	r16, 0x80	; 128
    d180:	90 07       	cpc	r25, r16
    d182:	a1 05       	cpc	r26, r1
    d184:	b1 05       	cpc	r27, r1
    d186:	40 f4       	brcc	.+16     	; 0xd198 <f_mkfs+0x88>
    d188:	84 23       	and	r24, r20
    d18a:	95 23       	and	r25, r21
    d18c:	a6 23       	and	r26, r22
    d18e:	b7 23       	and	r27, r23
    d190:	89 2b       	or	r24, r25
    d192:	8a 2b       	or	r24, r26
    d194:	8b 2b       	or	r24, r27
    d196:	41 f0       	breq	.+16     	; 0xd1a8 <f_mkfs+0x98>
    d198:	81 e0       	ldi	r24, 0x01	; 1
    d19a:	90 e0       	ldi	r25, 0x00	; 0
    d19c:	a0 e0       	ldi	r26, 0x00	; 0
    d19e:	b0 e0       	ldi	r27, 0x00	; 0
    d1a0:	8d 83       	std	Y+5, r24	; 0x05
    d1a2:	9e 83       	std	Y+6, r25	; 0x06
    d1a4:	af 83       	std	Y+7, r26	; 0x07
    d1a6:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    d1a8:	81 14       	cp	r8, r1
    d1aa:	91 04       	cpc	r9, r1
    d1ac:	a1 04       	cpc	r10, r1
    d1ae:	b1 04       	cpc	r11, r1
    d1b0:	61 f0       	breq	.+24     	; 0xd1ca <f_mkfs+0xba>
    d1b2:	d5 01       	movw	r26, r10
    d1b4:	c4 01       	movw	r24, r8
    d1b6:	92 50       	subi	r25, 0x02	; 2
    d1b8:	a1 09       	sbc	r26, r1
    d1ba:	b1 09       	sbc	r27, r1
    d1bc:	81 30       	cpi	r24, 0x01	; 1
    d1be:	9e 4f       	sbci	r25, 0xFE	; 254
    d1c0:	af 4f       	sbci	r26, 0xFF	; 255
    d1c2:	b1 05       	cpc	r27, r1
    d1c4:	10 f0       	brcs	.+4      	; 0xd1ca <f_mkfs+0xba>
    d1c6:	83 e1       	ldi	r24, 0x13	; 19
    d1c8:	f6 c4       	rjmp	.+2540   	; 0xdbb6 <f_mkfs+0xaa6>
    d1ca:	d5 01       	movw	r26, r10
    d1cc:	c4 01       	movw	r24, r8
    d1ce:	01 97       	sbiw	r24, 0x01	; 1
    d1d0:	a1 09       	sbc	r26, r1
    d1d2:	b1 09       	sbc	r27, r1
    d1d4:	88 21       	and	r24, r8
    d1d6:	99 21       	and	r25, r9
    d1d8:	aa 21       	and	r26, r10
    d1da:	bb 21       	and	r27, r11
    d1dc:	89 2b       	or	r24, r25
    d1de:	8a 2b       	or	r24, r26
    d1e0:	8b 2b       	or	r24, r27
    d1e2:	89 f7       	brne	.-30     	; 0xd1c6 <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    d1e4:	8f 2d       	mov	r24, r15
    d1e6:	86 95       	lsr	r24
    d1e8:	90 e0       	ldi	r25, 0x00	; 0
    d1ea:	9c 01       	movw	r18, r24
    d1ec:	40 e0       	ldi	r20, 0x00	; 0
    d1ee:	50 e0       	ldi	r21, 0x00	; 0
    d1f0:	2c a3       	std	Y+36, r18	; 0x24
    d1f2:	3d a3       	std	Y+37, r19	; 0x25
    d1f4:	4e a3       	std	Y+38, r20	; 0x26
    d1f6:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    d1f8:	69 e0       	ldi	r22, 0x09	; 9
    d1fa:	22 0f       	add	r18, r18
    d1fc:	33 1f       	adc	r19, r19
    d1fe:	44 1f       	adc	r20, r20
    d200:	55 1f       	adc	r21, r21
    d202:	6a 95       	dec	r22
    d204:	d1 f7       	brne	.-12     	; 0xd1fa <f_mkfs+0xea>
    d206:	2d a7       	std	Y+45, r18	; 0x2d
    d208:	3e a7       	std	Y+46, r19	; 0x2e
    d20a:	4f a7       	std	Y+47, r20	; 0x2f
    d20c:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    d20e:	23 2b       	or	r18, r19
    d210:	24 2b       	or	r18, r20
    d212:	25 2b       	or	r18, r21
    d214:	11 f4       	brne	.+4      	; 0xd21a <f_mkfs+0x10a>
    d216:	8e e0       	ldi	r24, 0x0E	; 14
    d218:	ce c4       	rjmp	.+2460   	; 0xdbb6 <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d21a:	ae 01       	movw	r20, r28
    d21c:	4f 5f       	subi	r20, 0xFF	; 255
    d21e:	5f 4f       	sbci	r21, 0xFF	; 255
    d220:	61 e0       	ldi	r22, 0x01	; 1
    d222:	82 2d       	mov	r24, r2
    d224:	8e d5       	rcall	.+2844   	; 0xdd42 <disk_ioctl>
    d226:	89 2b       	or	r24, r25
    d228:	09 f0       	breq	.+2      	; 0xd22c <f_mkfs+0x11c>
    d22a:	c4 c4       	rjmp	.+2440   	; 0xdbb4 <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    d22c:	3e 2d       	mov	r19, r14
    d22e:	38 70       	andi	r19, 0x08	; 8
    d230:	3a ab       	std	Y+50, r19	; 0x32
    d232:	e3 fe       	sbrs	r14, 3
    d234:	05 c0       	rjmp	.+10     	; 0xd240 <f_mkfs+0x130>
    d236:	1c 8a       	std	Y+20, r1	; 0x14
    d238:	1d 8a       	std	Y+21, r1	; 0x15
    d23a:	1e 8a       	std	Y+22, r1	; 0x16
    d23c:	1f 8a       	std	Y+23, r1	; 0x17
    d23e:	08 c0       	rjmp	.+16     	; 0xd250 <f_mkfs+0x140>
    d240:	8f e3       	ldi	r24, 0x3F	; 63
    d242:	90 e0       	ldi	r25, 0x00	; 0
    d244:	a0 e0       	ldi	r26, 0x00	; 0
    d246:	b0 e0       	ldi	r27, 0x00	; 0
    d248:	8c 8b       	std	Y+20, r24	; 0x14
    d24a:	9d 8b       	std	Y+21, r25	; 0x15
    d24c:	ae 8b       	std	Y+22, r26	; 0x16
    d24e:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    d250:	49 80       	ldd	r4, Y+1	; 0x01
    d252:	5a 80       	ldd	r5, Y+2	; 0x02
    d254:	6b 80       	ldd	r6, Y+3	; 0x03
    d256:	7c 80       	ldd	r7, Y+4	; 0x04
    d258:	0c 89       	ldd	r16, Y+20	; 0x14
    d25a:	1d 89       	ldd	r17, Y+21	; 0x15
    d25c:	2e 89       	ldd	r18, Y+22	; 0x16
    d25e:	3f 89       	ldd	r19, Y+23	; 0x17
    d260:	40 16       	cp	r4, r16
    d262:	51 06       	cpc	r5, r17
    d264:	62 06       	cpc	r6, r18
    d266:	73 06       	cpc	r7, r19
    d268:	b0 f2       	brcs	.-84     	; 0xd216 <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    d26a:	d3 01       	movw	r26, r6
    d26c:	c2 01       	movw	r24, r4
    d26e:	80 1b       	sub	r24, r16
    d270:	91 0b       	sbc	r25, r17
    d272:	a2 0b       	sbc	r26, r18
    d274:	b3 0b       	sbc	r27, r19
    d276:	8b 87       	std	Y+11, r24	; 0x0b
    d278:	9c 87       	std	Y+12, r25	; 0x0c
    d27a:	ad 87       	std	Y+13, r26	; 0x0d
    d27c:	be 87       	std	Y+14, r27	; 0x0e
    d27e:	89 83       	std	Y+1, r24	; 0x01
    d280:	9a 83       	std	Y+2, r25	; 0x02
    d282:	ab 83       	std	Y+3, r26	; 0x03
    d284:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    d286:	80 38       	cpi	r24, 0x80	; 128
    d288:	91 05       	cpc	r25, r1
    d28a:	a1 05       	cpc	r26, r1
    d28c:	b1 05       	cpc	r27, r1
    d28e:	18 f2       	brcs	.-122    	; 0xd216 <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    d290:	29 e0       	ldi	r18, 0x09	; 9
    d292:	b6 94       	lsr	r11
    d294:	a7 94       	ror	r10
    d296:	97 94       	ror	r9
    d298:	87 94       	ror	r8
    d29a:	2a 95       	dec	r18
    d29c:	d1 f7       	brne	.-12     	; 0xd292 <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    d29e:	91 e8       	ldi	r25, 0x81	; 129
    d2a0:	89 16       	cp	r8, r25
    d2a2:	91 04       	cpc	r9, r1
    d2a4:	a1 04       	cpc	r10, r1
    d2a6:	b1 04       	cpc	r11, r1
    d2a8:	08 f0       	brcs	.+2      	; 0xd2ac <f_mkfs+0x19c>
    d2aa:	8d cf       	rjmp	.-230    	; 0xd1c6 <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    d2ac:	ae 2d       	mov	r26, r14
    d2ae:	a2 70       	andi	r26, 0x02	; 2
    d2b0:	fa 2e       	mov	r15, r26
    d2b2:	e1 fe       	sbrs	r14, 1
    d2b4:	06 c0       	rjmp	.+12     	; 0xd2c2 <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    d2b6:	8e 2d       	mov	r24, r14
    d2b8:	87 70       	andi	r24, 0x07	; 7
    d2ba:	82 30       	cpi	r24, 0x02	; 2
    d2bc:	39 f0       	breq	.+14     	; 0xd2cc <f_mkfs+0x1bc>
    d2be:	e0 fe       	sbrs	r14, 0
    d2c0:	08 c0       	rjmp	.+16     	; 0xd2d2 <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    d2c2:	e0 fe       	sbrs	r14, 0
    d2c4:	80 cf       	rjmp	.-256    	; 0xd1c6 <f_mkfs+0xb6>
		fmt = FS_FAT16;
    d2c6:	b2 e0       	ldi	r27, 0x02	; 2
    d2c8:	bf 87       	std	Y+15, r27	; 0x0f
    d2ca:	05 c0       	rjmp	.+10     	; 0xd2d6 <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    d2cc:	e3 e0       	ldi	r30, 0x03	; 3
    d2ce:	ef 87       	std	Y+15, r30	; 0x0f
    d2d0:	02 c0       	rjmp	.+4      	; 0xd2d6 <f_mkfs+0x1c6>
    d2d2:	f3 e0       	ldi	r31, 0x03	; 3
    d2d4:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    d2d6:	0b 85       	ldd	r16, Y+11	; 0x0b
    d2d8:	1c 85       	ldd	r17, Y+12	; 0x0c
    d2da:	2d 85       	ldd	r18, Y+13	; 0x0d
    d2dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    d2de:	81 e1       	ldi	r24, 0x11	; 17
    d2e0:	36 95       	lsr	r19
    d2e2:	27 95       	ror	r18
    d2e4:	17 95       	ror	r17
    d2e6:	07 95       	ror	r16
    d2e8:	8a 95       	dec	r24
    d2ea:	d1 f7       	brne	.-12     	; 0xd2e0 <f_mkfs+0x1d0>
    d2ec:	23 96       	adiw	r28, 0x03	; 3
    d2ee:	0c af       	std	Y+60, r16	; 0x3c
    d2f0:	1d af       	std	Y+61, r17	; 0x3d
    d2f2:	2e af       	std	Y+62, r18	; 0x3e
    d2f4:	3f af       	std	Y+63, r19	; 0x3f
    d2f6:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    d2f8:	0b 85       	ldd	r16, Y+11	; 0x0b
    d2fa:	1c 85       	ldd	r17, Y+12	; 0x0c
    d2fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    d2fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    d300:	9c e0       	ldi	r25, 0x0C	; 12
    d302:	36 95       	lsr	r19
    d304:	27 95       	ror	r18
    d306:	17 95       	ror	r17
    d308:	07 95       	ror	r16
    d30a:	9a 95       	dec	r25
    d30c:	d1 f7       	brne	.-12     	; 0xd302 <f_mkfs+0x1f2>
    d30e:	0b ab       	std	Y+51, r16	; 0x33
    d310:	1c ab       	std	Y+52, r17	; 0x34
    d312:	2d ab       	std	Y+53, r18	; 0x35
    d314:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d316:	8d 81       	ldd	r24, Y+5	; 0x05
    d318:	9e 81       	ldd	r25, Y+6	; 0x06
    d31a:	af 81       	ldd	r26, Y+7	; 0x07
    d31c:	b8 85       	ldd	r27, Y+8	; 0x08
    d31e:	8c 01       	movw	r16, r24
    d320:	9d 01       	movw	r18, r26
    d322:	01 50       	subi	r16, 0x01	; 1
    d324:	11 09       	sbc	r17, r1
    d326:	21 09       	sbc	r18, r1
    d328:	31 09       	sbc	r19, r1
    d32a:	0b af       	std	Y+59, r16	; 0x3b
    d32c:	1c af       	std	Y+60, r17	; 0x3c
    d32e:	2d af       	std	Y+61, r18	; 0x3d
    d330:	3e af       	std	Y+62, r19	; 0x3e
    d332:	00 27       	eor	r16, r16
    d334:	11 27       	eor	r17, r17
    d336:	98 01       	movw	r18, r16
    d338:	08 1b       	sub	r16, r24
    d33a:	19 0b       	sbc	r17, r25
    d33c:	2a 0b       	sbc	r18, r26
    d33e:	3b 0b       	sbc	r19, r27
    d340:	0f ab       	std	Y+55, r16	; 0x37
    d342:	18 af       	std	Y+56, r17	; 0x38
    d344:	29 af       	std	Y+57, r18	; 0x39
    d346:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    d348:	1f 85       	ldd	r17, Y+15	; 0x0f
    d34a:	13 30       	cpi	r17, 0x03	; 3
    d34c:	09 f0       	breq	.+2      	; 0xd350 <f_mkfs+0x240>
    d34e:	67 c1       	rjmp	.+718    	; 0xd61e <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    d350:	81 14       	cp	r8, r1
    d352:	91 04       	cpc	r9, r1
    d354:	a1 04       	cpc	r10, r1
    d356:	b1 04       	cpc	r11, r1
    d358:	e1 f4       	brne	.+56     	; 0xd392 <f_mkfs+0x282>
    d35a:	e3 ea       	ldi	r30, 0xA3	; 163
    d35c:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d35e:	41 2c       	mov	r4, r1
    d360:	51 2c       	mov	r5, r1
    d362:	32 01       	movw	r6, r4
    d364:	43 94       	inc	r4
    d366:	81 91       	ld	r24, Z+
    d368:	91 91       	ld	r25, Z+
    d36a:	00 97       	sbiw	r24, 0x00	; 0
    d36c:	a1 f0       	breq	.+40     	; 0xd396 <f_mkfs+0x286>
    d36e:	a0 e0       	ldi	r26, 0x00	; 0
    d370:	b0 e0       	ldi	r27, 0x00	; 0
    d372:	23 96       	adiw	r28, 0x03	; 3
    d374:	0c ad       	ldd	r16, Y+60	; 0x3c
    d376:	1d ad       	ldd	r17, Y+61	; 0x3d
    d378:	2e ad       	ldd	r18, Y+62	; 0x3e
    d37a:	3f ad       	ldd	r19, Y+63	; 0x3f
    d37c:	23 97       	sbiw	r28, 0x03	; 3
    d37e:	08 17       	cp	r16, r24
    d380:	19 07       	cpc	r17, r25
    d382:	2a 07       	cpc	r18, r26
    d384:	3b 07       	cpc	r19, r27
    d386:	38 f0       	brcs	.+14     	; 0xd396 <f_mkfs+0x286>
    d388:	44 0c       	add	r4, r4
    d38a:	55 1c       	adc	r5, r5
    d38c:	66 1c       	adc	r6, r6
    d38e:	77 1c       	adc	r7, r7
    d390:	ea cf       	rjmp	.-44     	; 0xd366 <f_mkfs+0x256>
    d392:	24 01       	movw	r4, r8
    d394:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    d396:	6b 85       	ldd	r22, Y+11	; 0x0b
    d398:	7c 85       	ldd	r23, Y+12	; 0x0c
    d39a:	8d 85       	ldd	r24, Y+13	; 0x0d
    d39c:	9e 85       	ldd	r25, Y+14	; 0x0e
    d39e:	a3 01       	movw	r20, r6
    d3a0:	92 01       	movw	r18, r4
    d3a2:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    d3a6:	da 01       	movw	r26, r20
    d3a8:	c9 01       	movw	r24, r18
    d3aa:	62 e0       	ldi	r22, 0x02	; 2
    d3ac:	88 0f       	add	r24, r24
    d3ae:	99 1f       	adc	r25, r25
    d3b0:	aa 1f       	adc	r26, r26
    d3b2:	bb 1f       	adc	r27, r27
    d3b4:	6a 95       	dec	r22
    d3b6:	d1 f7       	brne	.-12     	; 0xd3ac <f_mkfs+0x29c>
    d3b8:	89 5f       	subi	r24, 0xF9	; 249
    d3ba:	9d 4f       	sbci	r25, 0xFD	; 253
    d3bc:	af 4f       	sbci	r26, 0xFF	; 255
    d3be:	bf 4f       	sbci	r27, 0xFF	; 255
    d3c0:	79 e0       	ldi	r23, 0x09	; 9
    d3c2:	b6 95       	lsr	r27
    d3c4:	a7 95       	ror	r26
    d3c6:	97 95       	ror	r25
    d3c8:	87 95       	ror	r24
    d3ca:	7a 95       	dec	r23
    d3cc:	d1 f7       	brne	.-12     	; 0xd3c2 <f_mkfs+0x2b2>
    d3ce:	88 8b       	std	Y+16, r24	; 0x10
    d3d0:	99 8b       	std	Y+17, r25	; 0x11
    d3d2:	aa 8b       	std	Y+18, r26	; 0x12
    d3d4:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d3d6:	da 01       	movw	r26, r20
    d3d8:	c9 01       	movw	r24, r18
    d3da:	86 5f       	subi	r24, 0xF6	; 246
    d3dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d3de:	a1 09       	sbc	r26, r1
    d3e0:	b1 09       	sbc	r27, r1
    d3e2:	00 97       	sbiw	r24, 0x00	; 0
    d3e4:	af 4f       	sbci	r26, 0xFF	; 255
    d3e6:	bf 40       	sbci	r27, 0x0F	; 15
    d3e8:	08 f0       	brcs	.+2      	; 0xd3ec <f_mkfs+0x2dc>
    d3ea:	15 cf       	rjmp	.-470    	; 0xd216 <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d3ec:	1c 8e       	std	Y+28, r1	; 0x1c
    d3ee:	1d 8e       	std	Y+29, r1	; 0x1d
    d3f0:	1e 8e       	std	Y+30, r1	; 0x1e
    d3f2:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d3f4:	00 e2       	ldi	r16, 0x20	; 32
    d3f6:	10 e0       	ldi	r17, 0x00	; 0
    d3f8:	20 e0       	ldi	r18, 0x00	; 0
    d3fa:	30 e0       	ldi	r19, 0x00	; 0
    d3fc:	08 a3       	std	Y+32, r16	; 0x20
    d3fe:	19 a3       	std	Y+33, r17	; 0x21
    d400:	2a a3       	std	Y+34, r18	; 0x22
    d402:	3b a3       	std	Y+35, r19	; 0x23
    d404:	4e c0       	rjmp	.+156    	; 0xd4a2 <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d406:	a0 e0       	ldi	r26, 0x00	; 0
    d408:	b0 e0       	ldi	r27, 0x00	; 0
    d40a:	0b a9       	ldd	r16, Y+51	; 0x33
    d40c:	1c a9       	ldd	r17, Y+52	; 0x34
    d40e:	2d a9       	ldd	r18, Y+53	; 0x35
    d410:	3e a9       	ldd	r19, Y+54	; 0x36
    d412:	08 17       	cp	r16, r24
    d414:	19 07       	cpc	r17, r25
    d416:	2a 07       	cpc	r18, r26
    d418:	3b 07       	cpc	r19, r27
    d41a:	40 f0       	brcs	.+16     	; 0xd42c <f_mkfs+0x31c>
    d41c:	44 0c       	add	r4, r4
    d41e:	55 1c       	adc	r5, r5
    d420:	66 1c       	adc	r6, r6
    d422:	77 1c       	adc	r7, r7
    d424:	81 91       	ld	r24, Z+
    d426:	91 91       	ld	r25, Z+
    d428:	00 97       	sbiw	r24, 0x00	; 0
    d42a:	69 f7       	brne	.-38     	; 0xd406 <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d42c:	6b 85       	ldd	r22, Y+11	; 0x0b
    d42e:	7c 85       	ldd	r23, Y+12	; 0x0c
    d430:	8d 85       	ldd	r24, Y+13	; 0x0d
    d432:	9e 85       	ldd	r25, Y+14	; 0x0e
    d434:	a3 01       	movw	r20, r6
    d436:	92 01       	movw	r18, r4
    d438:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d43c:	26 3f       	cpi	r18, 0xF6	; 246
    d43e:	1f e0       	ldi	r17, 0x0F	; 15
    d440:	31 07       	cpc	r19, r17
    d442:	41 05       	cpc	r20, r1
    d444:	51 05       	cpc	r21, r1
    d446:	08 f4       	brcc	.+2      	; 0xd44a <f_mkfs+0x33a>
    d448:	f9 c0       	rjmp	.+498    	; 0xd63c <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d44a:	da 01       	movw	r26, r20
    d44c:	c9 01       	movw	r24, r18
    d44e:	02 96       	adiw	r24, 0x02	; 2
    d450:	a1 1d       	adc	r26, r1
    d452:	b1 1d       	adc	r27, r1
    d454:	88 0f       	add	r24, r24
    d456:	99 1f       	adc	r25, r25
    d458:	aa 1f       	adc	r26, r26
    d45a:	bb 1f       	adc	r27, r27
    d45c:	22 e0       	ldi	r18, 0x02	; 2
    d45e:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d460:	81 50       	subi	r24, 0x01	; 1
    d462:	9e 4f       	sbci	r25, 0xFE	; 254
    d464:	af 4f       	sbci	r26, 0xFF	; 255
    d466:	bf 4f       	sbci	r27, 0xFF	; 255
    d468:	8c 01       	movw	r16, r24
    d46a:	9d 01       	movw	r18, r26
    d46c:	a9 e0       	ldi	r26, 0x09	; 9
    d46e:	36 95       	lsr	r19
    d470:	27 95       	ror	r18
    d472:	17 95       	ror	r17
    d474:	07 95       	ror	r16
    d476:	aa 95       	dec	r26
    d478:	d1 f7       	brne	.-12     	; 0xd46e <f_mkfs+0x35e>
    d47a:	08 8b       	std	Y+16, r16	; 0x10
    d47c:	19 8b       	std	Y+17, r17	; 0x11
    d47e:	2a 8b       	std	Y+18, r18	; 0x12
    d480:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d482:	20 e2       	ldi	r18, 0x20	; 32
    d484:	30 e0       	ldi	r19, 0x00	; 0
    d486:	40 e0       	ldi	r20, 0x00	; 0
    d488:	50 e0       	ldi	r21, 0x00	; 0
    d48a:	2c 8f       	std	Y+28, r18	; 0x1c
    d48c:	3d 8f       	std	Y+29, r19	; 0x1d
    d48e:	4e 8f       	std	Y+30, r20	; 0x1e
    d490:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d492:	81 e0       	ldi	r24, 0x01	; 1
    d494:	90 e0       	ldi	r25, 0x00	; 0
    d496:	a0 e0       	ldi	r26, 0x00	; 0
    d498:	b0 e0       	ldi	r27, 0x00	; 0
    d49a:	88 a3       	std	Y+32, r24	; 0x20
    d49c:	99 a3       	std	Y+33, r25	; 0x21
    d49e:	aa a3       	std	Y+34, r26	; 0x22
    d4a0:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d4a2:	08 a1       	ldd	r16, Y+32	; 0x20
    d4a4:	19 a1       	ldd	r17, Y+33	; 0x21
    d4a6:	2a a1       	ldd	r18, Y+34	; 0x22
    d4a8:	3b a1       	ldd	r19, Y+35	; 0x23
    d4aa:	8c 89       	ldd	r24, Y+20	; 0x14
    d4ac:	9d 89       	ldd	r25, Y+21	; 0x15
    d4ae:	ae 89       	ldd	r26, Y+22	; 0x16
    d4b0:	bf 89       	ldd	r27, Y+23	; 0x17
    d4b2:	08 0f       	add	r16, r24
    d4b4:	19 1f       	adc	r17, r25
    d4b6:	2a 1f       	adc	r18, r26
    d4b8:	3b 1f       	adc	r19, r27
    d4ba:	08 8f       	std	Y+24, r16	; 0x18
    d4bc:	19 8f       	std	Y+25, r17	; 0x19
    d4be:	2a 8f       	std	Y+26, r18	; 0x1a
    d4c0:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d4c2:	88 89       	ldd	r24, Y+16	; 0x10
    d4c4:	99 89       	ldd	r25, Y+17	; 0x11
    d4c6:	aa 89       	ldd	r26, Y+18	; 0x12
    d4c8:	bb 89       	ldd	r27, Y+19	; 0x13
    d4ca:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d4cc:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d4ce:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d4d0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d4d2:	80 0f       	add	r24, r16
    d4d4:	91 1f       	adc	r25, r17
    d4d6:	a2 1f       	adc	r26, r18
    d4d8:	b3 1f       	adc	r27, r19
    d4da:	28 8d       	ldd	r18, Y+24	; 0x18
    d4dc:	39 8d       	ldd	r19, Y+25	; 0x19
    d4de:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d4e0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d4e2:	82 0f       	add	r24, r18
    d4e4:	93 1f       	adc	r25, r19
    d4e6:	a4 1f       	adc	r26, r20
    d4e8:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d4ea:	4b ad       	ldd	r20, Y+59	; 0x3b
    d4ec:	5c ad       	ldd	r21, Y+60	; 0x3c
    d4ee:	6d ad       	ldd	r22, Y+61	; 0x3d
    d4f0:	7e ad       	ldd	r23, Y+62	; 0x3e
    d4f2:	48 0f       	add	r20, r24
    d4f4:	59 1f       	adc	r21, r25
    d4f6:	6a 1f       	adc	r22, r26
    d4f8:	7b 1f       	adc	r23, r27
    d4fa:	0f a9       	ldd	r16, Y+55	; 0x37
    d4fc:	18 ad       	ldd	r17, Y+56	; 0x38
    d4fe:	29 ad       	ldd	r18, Y+57	; 0x39
    d500:	3a ad       	ldd	r19, Y+58	; 0x3a
    d502:	40 23       	and	r20, r16
    d504:	51 23       	and	r21, r17
    d506:	62 23       	and	r22, r18
    d508:	73 23       	and	r23, r19
    d50a:	48 1b       	sub	r20, r24
    d50c:	59 0b       	sbc	r21, r25
    d50e:	6a 0b       	sbc	r22, r26
    d510:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d512:	1f 85       	ldd	r17, Y+15	; 0x0f
    d514:	13 30       	cpi	r17, 0x03	; 3
    d516:	09 f0       	breq	.+2      	; 0xd51a <f_mkfs+0x40a>
    d518:	a4 c0       	rjmp	.+328    	; 0xd662 <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d51a:	08 a1       	ldd	r16, Y+32	; 0x20
    d51c:	19 a1       	ldd	r17, Y+33	; 0x21
    d51e:	2a a1       	ldd	r18, Y+34	; 0x22
    d520:	3b a1       	ldd	r19, Y+35	; 0x23
    d522:	04 0f       	add	r16, r20
    d524:	15 1f       	adc	r17, r21
    d526:	26 1f       	adc	r18, r22
    d528:	37 1f       	adc	r19, r23
    d52a:	08 a3       	std	Y+32, r16	; 0x20
    d52c:	19 a3       	std	Y+33, r17	; 0x21
    d52e:	2a a3       	std	Y+34, r18	; 0x22
    d530:	3b a3       	std	Y+35, r19	; 0x23
    d532:	08 8d       	ldd	r16, Y+24	; 0x18
    d534:	19 8d       	ldd	r17, Y+25	; 0x19
    d536:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d538:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d53a:	04 0f       	add	r16, r20
    d53c:	15 1f       	adc	r17, r21
    d53e:	26 1f       	adc	r18, r22
    d540:	37 1f       	adc	r19, r23
    d542:	08 8f       	std	Y+24, r16	; 0x18
    d544:	19 8f       	std	Y+25, r17	; 0x19
    d546:	2a 8f       	std	Y+26, r18	; 0x1a
    d548:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d54a:	b3 01       	movw	r22, r6
    d54c:	a2 01       	movw	r20, r4
    d54e:	f4 e0       	ldi	r31, 0x04	; 4
    d550:	44 0f       	add	r20, r20
    d552:	55 1f       	adc	r21, r21
    d554:	66 1f       	adc	r22, r22
    d556:	77 1f       	adc	r23, r23
    d558:	fa 95       	dec	r31
    d55a:	d1 f7       	brne	.-12     	; 0xd550 <f_mkfs+0x440>
    d55c:	0c 89       	ldd	r16, Y+20	; 0x14
    d55e:	1d 89       	ldd	r17, Y+21	; 0x15
    d560:	2e 89       	ldd	r18, Y+22	; 0x16
    d562:	3f 89       	ldd	r19, Y+23	; 0x17
    d564:	40 1b       	sub	r20, r16
    d566:	51 0b       	sbc	r21, r17
    d568:	62 0b       	sbc	r22, r18
    d56a:	73 0b       	sbc	r23, r19
    d56c:	84 0f       	add	r24, r20
    d56e:	95 1f       	adc	r25, r21
    d570:	a6 1f       	adc	r26, r22
    d572:	b7 1f       	adc	r27, r23
    d574:	0b 85       	ldd	r16, Y+11	; 0x0b
    d576:	1c 85       	ldd	r17, Y+12	; 0x0c
    d578:	2d 85       	ldd	r18, Y+13	; 0x0d
    d57a:	3e 85       	ldd	r19, Y+14	; 0x0e
    d57c:	08 17       	cp	r16, r24
    d57e:	19 07       	cpc	r17, r25
    d580:	2a 07       	cpc	r18, r26
    d582:	3b 07       	cpc	r19, r27
    d584:	08 f4       	brcc	.+2      	; 0xd588 <f_mkfs+0x478>
    d586:	47 ce       	rjmp	.-882    	; 0xd216 <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d588:	d9 01       	movw	r26, r18
    d58a:	c8 01       	movw	r24, r16
    d58c:	28 a1       	ldd	r18, Y+32	; 0x20
    d58e:	39 a1       	ldd	r19, Y+33	; 0x21
    d590:	4a a1       	ldd	r20, Y+34	; 0x22
    d592:	5b a1       	ldd	r21, Y+35	; 0x23
    d594:	82 1b       	sub	r24, r18
    d596:	93 0b       	sbc	r25, r19
    d598:	a4 0b       	sbc	r26, r20
    d59a:	b5 0b       	sbc	r27, r21
    d59c:	08 89       	ldd	r16, Y+16	; 0x10
    d59e:	19 89       	ldd	r17, Y+17	; 0x11
    d5a0:	2a 89       	ldd	r18, Y+18	; 0x12
    d5a2:	3b 89       	ldd	r19, Y+19	; 0x13
    d5a4:	80 1b       	sub	r24, r16
    d5a6:	91 0b       	sbc	r25, r17
    d5a8:	a2 0b       	sbc	r26, r18
    d5aa:	b3 0b       	sbc	r27, r19
    d5ac:	bc 01       	movw	r22, r24
    d5ae:	cd 01       	movw	r24, r26
    d5b0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d5b2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d5b4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d5b6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d5b8:	62 1b       	sub	r22, r18
    d5ba:	73 0b       	sbc	r23, r19
    d5bc:	84 0b       	sbc	r24, r20
    d5be:	95 0b       	sbc	r25, r21
    d5c0:	a3 01       	movw	r20, r6
    d5c2:	92 01       	movw	r18, r4
    d5c4:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
    d5c8:	28 a7       	std	Y+40, r18	; 0x28
    d5ca:	39 a7       	std	Y+41, r19	; 0x29
    d5cc:	4a a7       	std	Y+42, r20	; 0x2a
    d5ce:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d5d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    d5d2:	33 30       	cpi	r19, 0x03	; 3
    d5d4:	09 f4       	brne	.+2      	; 0xd5d8 <f_mkfs+0x4c8>
    d5d6:	52 c0       	rjmp	.+164    	; 0xd67c <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d5d8:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d5da:	08 a5       	ldd	r16, Y+40	; 0x28
    d5dc:	19 a5       	ldd	r17, Y+41	; 0x29
    d5de:	2a a5       	ldd	r18, Y+42	; 0x2a
    d5e0:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d5e2:	f2 30       	cpi	r31, 0x02	; 2
    d5e4:	09 f0       	breq	.+2      	; 0xd5e8 <f_mkfs+0x4d8>
    d5e6:	83 c0       	rjmp	.+262    	; 0xd6ee <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d5e8:	06 3f       	cpi	r16, 0xF6	; 246
    d5ea:	4f ef       	ldi	r20, 0xFF	; 255
    d5ec:	14 07       	cpc	r17, r20
    d5ee:	21 05       	cpc	r18, r1
    d5f0:	31 05       	cpc	r19, r1
    d5f2:	08 f4       	brcc	.+2      	; 0xd5f6 <f_mkfs+0x4e6>
    d5f4:	5f c0       	rjmp	.+190    	; 0xd6b4 <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d5f6:	81 14       	cp	r8, r1
    d5f8:	91 04       	cpc	r9, r1
    d5fa:	a1 04       	cpc	r10, r1
    d5fc:	b1 04       	cpc	r11, r1
    d5fe:	09 f0       	breq	.+2      	; 0xd602 <f_mkfs+0x4f2>
    d600:	e8 c2       	rjmp	.+1488   	; 0xdbd2 <f_mkfs+0xac2>
    d602:	d3 01       	movw	r26, r6
    d604:	c2 01       	movw	r24, r4
    d606:	88 0f       	add	r24, r24
    d608:	99 1f       	adc	r25, r25
    d60a:	aa 1f       	adc	r26, r26
    d60c:	bb 1f       	adc	r27, r27
    d60e:	81 34       	cpi	r24, 0x41	; 65
    d610:	91 05       	cpc	r25, r1
    d612:	a1 05       	cpc	r26, r1
    d614:	b1 05       	cpc	r27, r1
    d616:	08 f0       	brcs	.+2      	; 0xd61a <f_mkfs+0x50a>
    d618:	d0 c2       	rjmp	.+1440   	; 0xdbba <f_mkfs+0xaaa>
    d61a:	4c 01       	movw	r8, r24
    d61c:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d61e:	81 14       	cp	r8, r1
    d620:	91 04       	cpc	r9, r1
    d622:	a1 04       	cpc	r10, r1
    d624:	b1 04       	cpc	r11, r1
    d626:	39 f4       	brne	.+14     	; 0xd636 <f_mkfs+0x526>
    d628:	e5 e9       	ldi	r30, 0x95	; 149
    d62a:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d62c:	41 2c       	mov	r4, r1
    d62e:	51 2c       	mov	r5, r1
    d630:	32 01       	movw	r6, r4
    d632:	43 94       	inc	r4
    d634:	f7 ce       	rjmp	.-530    	; 0xd424 <f_mkfs+0x314>
    d636:	24 01       	movw	r4, r8
    d638:	35 01       	movw	r6, r10
    d63a:	f8 ce       	rjmp	.-528    	; 0xd42c <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d63c:	a3 e0       	ldi	r26, 0x03	; 3
    d63e:	b0 e0       	ldi	r27, 0x00	; 0
    d640:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    d644:	dc 01       	movw	r26, r24
    d646:	cb 01       	movw	r24, r22
    d648:	01 96       	adiw	r24, 0x01	; 1
    d64a:	a1 1d       	adc	r26, r1
    d64c:	b1 1d       	adc	r27, r1
    d64e:	b6 95       	lsr	r27
    d650:	a7 95       	ror	r26
    d652:	97 95       	ror	r25
    d654:	87 95       	ror	r24
    d656:	03 96       	adiw	r24, 0x03	; 3
    d658:	a1 1d       	adc	r26, r1
    d65a:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d65c:	31 e0       	ldi	r19, 0x01	; 1
    d65e:	3f 87       	std	Y+15, r19	; 0x0f
    d660:	ff ce       	rjmp	.-514    	; 0xd460 <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d662:	08 89       	ldd	r16, Y+16	; 0x10
    d664:	19 89       	ldd	r17, Y+17	; 0x11
    d666:	2a 89       	ldd	r18, Y+18	; 0x12
    d668:	3b 89       	ldd	r19, Y+19	; 0x13
    d66a:	04 0f       	add	r16, r20
    d66c:	15 1f       	adc	r17, r21
    d66e:	26 1f       	adc	r18, r22
    d670:	37 1f       	adc	r19, r23
    d672:	08 8b       	std	Y+16, r16	; 0x10
    d674:	19 8b       	std	Y+17, r17	; 0x11
    d676:	2a 8b       	std	Y+18, r18	; 0x12
    d678:	3b 8b       	std	Y+19, r19	; 0x13
    d67a:	67 cf       	rjmp	.-306    	; 0xd54a <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d67c:	88 a5       	ldd	r24, Y+40	; 0x28
    d67e:	99 a5       	ldd	r25, Y+41	; 0x29
    d680:	aa a5       	ldd	r26, Y+42	; 0x2a
    d682:	bb a5       	ldd	r27, Y+43	; 0x2b
    d684:	86 3f       	cpi	r24, 0xF6	; 246
    d686:	9f 4f       	sbci	r25, 0xFF	; 255
    d688:	a1 05       	cpc	r26, r1
    d68a:	b1 05       	cpc	r27, r1
    d68c:	c8 f5       	brcc	.+114    	; 0xd700 <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d68e:	81 14       	cp	r8, r1
    d690:	91 04       	cpc	r9, r1
    d692:	a1 04       	cpc	r10, r1
    d694:	b1 04       	cpc	r11, r1
    d696:	09 f0       	breq	.+2      	; 0xd69a <f_mkfs+0x58a>
    d698:	be cd       	rjmp	.-1156   	; 0xd216 <f_mkfs+0x106>
    d69a:	53 01       	movw	r10, r6
    d69c:	42 01       	movw	r8, r4
    d69e:	b6 94       	lsr	r11
    d6a0:	a7 94       	ror	r10
    d6a2:	97 94       	ror	r9
    d6a4:	87 94       	ror	r8
    d6a6:	81 14       	cp	r8, r1
    d6a8:	91 04       	cpc	r9, r1
    d6aa:	a1 04       	cpc	r10, r1
    d6ac:	b1 04       	cpc	r11, r1
    d6ae:	09 f4       	brne	.+2      	; 0xd6b2 <f_mkfs+0x5a2>
    d6b0:	b2 cd       	rjmp	.-1180   	; 0xd216 <f_mkfs+0x106>
    d6b2:	4e ce       	rjmp	.-868    	; 0xd350 <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d6b4:	88 a5       	ldd	r24, Y+40	; 0x28
    d6b6:	99 a5       	ldd	r25, Y+41	; 0x29
    d6b8:	aa a5       	ldd	r26, Y+42	; 0x2a
    d6ba:	bb a5       	ldd	r27, Y+43	; 0x2b
    d6bc:	86 3f       	cpi	r24, 0xF6	; 246
    d6be:	9f 40       	sbci	r25, 0x0F	; 15
    d6c0:	a1 05       	cpc	r26, r1
    d6c2:	b1 05       	cpc	r27, r1
    d6c4:	e8 f4       	brcc	.+58     	; 0xd700 <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d6c6:	81 14       	cp	r8, r1
    d6c8:	91 04       	cpc	r9, r1
    d6ca:	a1 04       	cpc	r10, r1
    d6cc:	b1 04       	cpc	r11, r1
    d6ce:	09 f0       	breq	.+2      	; 0xd6d2 <f_mkfs+0x5c2>
    d6d0:	a2 cd       	rjmp	.-1212   	; 0xd216 <f_mkfs+0x106>
    d6d2:	53 01       	movw	r10, r6
    d6d4:	42 01       	movw	r8, r4
    d6d6:	88 0c       	add	r8, r8
    d6d8:	99 1c       	adc	r9, r9
    d6da:	aa 1c       	adc	r10, r10
    d6dc:	bb 1c       	adc	r11, r11
    d6de:	f1 e8       	ldi	r31, 0x81	; 129
    d6e0:	8f 16       	cp	r8, r31
    d6e2:	91 04       	cpc	r9, r1
    d6e4:	a1 04       	cpc	r10, r1
    d6e6:	b1 04       	cpc	r11, r1
    d6e8:	08 f0       	brcs	.+2      	; 0xd6ec <f_mkfs+0x5dc>
    d6ea:	95 cd       	rjmp	.-1238   	; 0xd216 <f_mkfs+0x106>
    d6ec:	98 cf       	rjmp	.-208    	; 0xd61e <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d6ee:	06 3f       	cpi	r16, 0xF6	; 246
    d6f0:	4f e0       	ldi	r20, 0x0F	; 15
    d6f2:	14 07       	cpc	r17, r20
    d6f4:	21 05       	cpc	r18, r1
    d6f6:	31 05       	cpc	r19, r1
    d6f8:	08 f0       	brcs	.+2      	; 0xd6fc <f_mkfs+0x5ec>
    d6fa:	8d cd       	rjmp	.-1254   	; 0xd216 <f_mkfs+0x106>
    d6fc:	51 e0       	ldi	r21, 0x01	; 1
    d6fe:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d700:	40 e0       	ldi	r20, 0x00	; 0
    d702:	52 e0       	ldi	r21, 0x02	; 2
    d704:	60 e0       	ldi	r22, 0x00	; 0
    d706:	70 e0       	ldi	r23, 0x00	; 0
    d708:	c6 01       	movw	r24, r12
    d70a:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
    d70e:	4b e0       	ldi	r20, 0x0B	; 11
    d710:	50 e0       	ldi	r21, 0x00	; 0
    d712:	68 ee       	ldi	r22, 0xE8	; 232
    d714:	77 e0       	ldi	r23, 0x07	; 7
    d716:	c6 01       	movw	r24, r12
    d718:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d71c:	d6 01       	movw	r26, r12
    d71e:	1b 96       	adiw	r26, 0x0b	; 11
    d720:	1c 92       	st	X, r1
    d722:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d724:	82 e0       	ldi	r24, 0x02	; 2
    d726:	1c 96       	adiw	r26, 0x0c	; 12
    d728:	8c 93       	st	X, r24
    d72a:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d72c:	1d 96       	adiw	r26, 0x0d	; 13
    d72e:	4c 92       	st	X, r4
    d730:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d732:	e8 a1       	ldd	r30, Y+32	; 0x20
    d734:	1e 96       	adiw	r26, 0x0e	; 14
    d736:	ec 93       	st	X, r30
    d738:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d73a:	f9 a1       	ldd	r31, Y+33	; 0x21
    d73c:	1f 96       	adiw	r26, 0x0f	; 15
    d73e:	fc 93       	st	X, r31
    d740:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d742:	81 e0       	ldi	r24, 0x01	; 1
    d744:	50 96       	adiw	r26, 0x10	; 16
    d746:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d748:	0f 85       	ldd	r16, Y+15	; 0x0f
    d74a:	03 30       	cpi	r16, 0x03	; 3
    d74c:	11 f0       	breq	.+4      	; 0xd752 <f_mkfs+0x642>
    d74e:	82 e0       	ldi	r24, 0x02	; 2
    d750:	01 c0       	rjmp	.+2      	; 0xd754 <f_mkfs+0x644>
    d752:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d754:	d6 01       	movw	r26, r12
    d756:	51 96       	adiw	r26, 0x11	; 17
    d758:	1c 92       	st	X, r1
    d75a:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d75c:	52 96       	adiw	r26, 0x12	; 18
    d75e:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d760:	49 81       	ldd	r20, Y+1	; 0x01
    d762:	5a 81       	ldd	r21, Y+2	; 0x02
    d764:	6b 81       	ldd	r22, Y+3	; 0x03
    d766:	7c 81       	ldd	r23, Y+4	; 0x04
    d768:	41 15       	cp	r20, r1
    d76a:	51 05       	cpc	r21, r1
    d76c:	b1 e0       	ldi	r27, 0x01	; 1
    d76e:	6b 07       	cpc	r22, r27
    d770:	71 05       	cpc	r23, r1
    d772:	20 f4       	brcc	.+8      	; 0xd77c <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d774:	f6 01       	movw	r30, r12
    d776:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d778:	54 8b       	std	Z+20, r21	; 0x14
    d77a:	04 c0       	rjmp	.+8      	; 0xd784 <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d77c:	c6 01       	movw	r24, r12
    d77e:	80 96       	adiw	r24, 0x20	; 32
    d780:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d784:	88 ef       	ldi	r24, 0xF8	; 248
    d786:	d6 01       	movw	r26, r12
    d788:	55 96       	adiw	r26, 0x15	; 21
    d78a:	8c 93       	st	X, r24
    d78c:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d78e:	8f e3       	ldi	r24, 0x3F	; 63
    d790:	58 96       	adiw	r26, 0x18	; 24
    d792:	8c 93       	st	X, r24
    d794:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d796:	59 96       	adiw	r26, 0x19	; 25
    d798:	1c 92       	st	X, r1
    d79a:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d79c:	8f ef       	ldi	r24, 0xFF	; 255
    d79e:	5a 96       	adiw	r26, 0x1a	; 26
    d7a0:	8c 93       	st	X, r24
    d7a2:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d7a4:	5b 96       	adiw	r26, 0x1b	; 27
    d7a6:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d7a8:	4c 89       	ldd	r20, Y+20	; 0x14
    d7aa:	5d 89       	ldd	r21, Y+21	; 0x15
    d7ac:	6e 89       	ldd	r22, Y+22	; 0x16
    d7ae:	7f 89       	ldd	r23, Y+23	; 0x17
    d7b0:	c6 01       	movw	r24, r12
    d7b2:	4c 96       	adiw	r24, 0x1c	; 28
    d7b4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
		if (fmt == FS_FAT32) {
    d7b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    d7ba:	b3 30       	cpi	r27, 0x03	; 3
    d7bc:	61 f5       	brne	.+88     	; 0xd816 <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d7be:	0e 94 04 75 	call	0xea08	; 0xea08 <get_fattime>
    d7c2:	ab 01       	movw	r20, r22
    d7c4:	bc 01       	movw	r22, r24
    d7c6:	c6 01       	movw	r24, r12
    d7c8:	8d 5b       	subi	r24, 0xBD	; 189
    d7ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d7cc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d7d0:	48 89       	ldd	r20, Y+16	; 0x10
    d7d2:	59 89       	ldd	r21, Y+17	; 0x11
    d7d4:	6a 89       	ldd	r22, Y+18	; 0x12
    d7d6:	7b 89       	ldd	r23, Y+19	; 0x13
    d7d8:	c6 01       	movw	r24, r12
    d7da:	84 96       	adiw	r24, 0x24	; 36
    d7dc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7e0:	82 e0       	ldi	r24, 0x02	; 2
    d7e2:	f6 01       	movw	r30, r12
    d7e4:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d7e6:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d7e8:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d7ea:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7ec:	81 e0       	ldi	r24, 0x01	; 1
    d7ee:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d7f0:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7f2:	86 e0       	ldi	r24, 0x06	; 6
    d7f4:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d7f6:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d7f8:	80 e8       	ldi	r24, 0x80	; 128
    d7fa:	e0 5c       	subi	r30, 0xC0	; 192
    d7fc:	ff 4f       	sbci	r31, 0xFF	; 255
    d7fe:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d800:	89 e2       	ldi	r24, 0x29	; 41
    d802:	32 96       	adiw	r30, 0x02	; 2
    d804:	80 83       	st	Z, r24
    d806:	43 e1       	ldi	r20, 0x13	; 19
    d808:	50 e0       	ldi	r21, 0x00	; 0
    d80a:	64 ef       	ldi	r22, 0xF4	; 244
    d80c:	77 e0       	ldi	r23, 0x07	; 7
    d80e:	c6 01       	movw	r24, r12
    d810:	89 5b       	subi	r24, 0xB9	; 185
    d812:	9f 4f       	sbci	r25, 0xFF	; 255
    d814:	1e c0       	rjmp	.+60     	; 0xd852 <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d816:	0e 94 04 75 	call	0xea08	; 0xea08 <get_fattime>
    d81a:	ab 01       	movw	r20, r22
    d81c:	bc 01       	movw	r22, r24
    d81e:	c6 01       	movw	r24, r12
    d820:	87 96       	adiw	r24, 0x27	; 39
    d822:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d826:	e8 89       	ldd	r30, Y+16	; 0x10
    d828:	d6 01       	movw	r26, r12
    d82a:	56 96       	adiw	r26, 0x16	; 22
    d82c:	ec 93       	st	X, r30
    d82e:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d830:	f9 89       	ldd	r31, Y+17	; 0x11
    d832:	57 96       	adiw	r26, 0x17	; 23
    d834:	fc 93       	st	X, r31
    d836:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d838:	80 e8       	ldi	r24, 0x80	; 128
    d83a:	94 96       	adiw	r26, 0x24	; 36
    d83c:	8c 93       	st	X, r24
    d83e:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d840:	89 e2       	ldi	r24, 0x29	; 41
    d842:	96 96       	adiw	r26, 0x26	; 38
    d844:	8c 93       	st	X, r24
    d846:	43 e1       	ldi	r20, 0x13	; 19
    d848:	50 e0       	ldi	r21, 0x00	; 0
    d84a:	68 e0       	ldi	r22, 0x08	; 8
    d84c:	78 e0       	ldi	r23, 0x08	; 8
    d84e:	c6 01       	movw	r24, r12
    d850:	8b 96       	adiw	r24, 0x2b	; 43
    d852:	0e 94 33 48 	call	0x9066	; 0x9066 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d856:	46 01       	movw	r8, r12
    d858:	02 e0       	ldi	r16, 0x02	; 2
    d85a:	80 1a       	sub	r8, r16
    d85c:	0e ef       	ldi	r16, 0xFE	; 254
    d85e:	90 0a       	sbc	r9, r16
    d860:	45 e5       	ldi	r20, 0x55	; 85
    d862:	b4 2e       	mov	r11, r20
    d864:	d4 01       	movw	r26, r8
    d866:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d868:	76 01       	movw	r14, r12
    d86a:	b1 e0       	ldi	r27, 0x01	; 1
    d86c:	eb 1a       	sub	r14, r27
    d86e:	be ef       	ldi	r27, 0xFE	; 254
    d870:	fb 0a       	sbc	r15, r27
    d872:	5a ea       	ldi	r21, 0xAA	; 170
    d874:	a5 2e       	mov	r10, r21
    d876:	f7 01       	movw	r30, r14
    d878:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d87a:	01 e0       	ldi	r16, 0x01	; 1
    d87c:	10 e0       	ldi	r17, 0x00	; 0
    d87e:	2c 89       	ldd	r18, Y+20	; 0x14
    d880:	3d 89       	ldd	r19, Y+21	; 0x15
    d882:	4e 89       	ldd	r20, Y+22	; 0x16
    d884:	5f 89       	ldd	r21, Y+23	; 0x17
    d886:	b6 01       	movw	r22, r12
    d888:	82 2d       	mov	r24, r2
    d88a:	4b d2       	rcall	.+1174   	; 0xdd22 <disk_write>
    d88c:	89 2b       	or	r24, r25
    d88e:	09 f0       	breq	.+2      	; 0xd892 <f_mkfs+0x782>
    d890:	91 c1       	rjmp	.+802    	; 0xdbb4 <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d892:	ff 85       	ldd	r31, Y+15	; 0x0f
    d894:	f3 30       	cpi	r31, 0x03	; 3
    d896:	09 f0       	breq	.+2      	; 0xd89a <f_mkfs+0x78a>
    d898:	5e c0       	rjmp	.+188    	; 0xd956 <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d89a:	01 e0       	ldi	r16, 0x01	; 1
    d89c:	10 e0       	ldi	r17, 0x00	; 0
    d89e:	2c 89       	ldd	r18, Y+20	; 0x14
    d8a0:	3d 89       	ldd	r19, Y+21	; 0x15
    d8a2:	4e 89       	ldd	r20, Y+22	; 0x16
    d8a4:	5f 89       	ldd	r21, Y+23	; 0x17
    d8a6:	2a 5f       	subi	r18, 0xFA	; 250
    d8a8:	3f 4f       	sbci	r19, 0xFF	; 255
    d8aa:	4f 4f       	sbci	r20, 0xFF	; 255
    d8ac:	5f 4f       	sbci	r21, 0xFF	; 255
    d8ae:	b6 01       	movw	r22, r12
    d8b0:	82 2d       	mov	r24, r2
    d8b2:	37 d2       	rcall	.+1134   	; 0xdd22 <disk_write>
			mem_set(buf, 0, ss);
    d8b4:	40 e0       	ldi	r20, 0x00	; 0
    d8b6:	52 e0       	ldi	r21, 0x02	; 2
    d8b8:	60 e0       	ldi	r22, 0x00	; 0
    d8ba:	70 e0       	ldi	r23, 0x00	; 0
    d8bc:	c6 01       	movw	r24, r12
    d8be:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8c2:	82 e5       	ldi	r24, 0x52	; 82
    d8c4:	d6 01       	movw	r26, r12
    d8c6:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d8c8:	11 96       	adiw	r26, 0x01	; 1
    d8ca:	8c 93       	st	X, r24
    d8cc:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d8ce:	81 e6       	ldi	r24, 0x61	; 97
    d8d0:	12 96       	adiw	r26, 0x02	; 2
    d8d2:	8c 93       	st	X, r24
    d8d4:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d8d6:	91 e4       	ldi	r25, 0x41	; 65
    d8d8:	13 96       	adiw	r26, 0x03	; 3
    d8da:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8dc:	22 e7       	ldi	r18, 0x72	; 114
    d8de:	f6 01       	movw	r30, r12
    d8e0:	ec 51       	subi	r30, 0x1C	; 28
    d8e2:	fe 4f       	sbci	r31, 0xFE	; 254
    d8e4:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d8e6:	31 96       	adiw	r30, 0x01	; 1
    d8e8:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d8ea:	31 96       	adiw	r30, 0x01	; 1
    d8ec:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d8ee:	31 96       	adiw	r30, 0x01	; 1
    d8f0:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d8f2:	48 a5       	ldd	r20, Y+40	; 0x28
    d8f4:	59 a5       	ldd	r21, Y+41	; 0x29
    d8f6:	6a a5       	ldd	r22, Y+42	; 0x2a
    d8f8:	7b a5       	ldd	r23, Y+43	; 0x2b
    d8fa:	41 50       	subi	r20, 0x01	; 1
    d8fc:	51 09       	sbc	r21, r1
    d8fe:	61 09       	sbc	r22, r1
    d900:	71 09       	sbc	r23, r1
    d902:	c6 01       	movw	r24, r12
    d904:	88 51       	subi	r24, 0x18	; 24
    d906:	9e 4f       	sbci	r25, 0xFE	; 254
    d908:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d90c:	82 e0       	ldi	r24, 0x02	; 2
    d90e:	f6 01       	movw	r30, r12
    d910:	e4 51       	subi	r30, 0x14	; 20
    d912:	fe 4f       	sbci	r31, 0xFE	; 254
    d914:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d916:	31 96       	adiw	r30, 0x01	; 1
    d918:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d91a:	31 96       	adiw	r30, 0x01	; 1
    d91c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d91e:	31 96       	adiw	r30, 0x01	; 1
    d920:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d922:	f4 01       	movw	r30, r8
    d924:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d926:	d7 01       	movw	r26, r14
    d928:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d92a:	2c 89       	ldd	r18, Y+20	; 0x14
    d92c:	3d 89       	ldd	r19, Y+21	; 0x15
    d92e:	4e 89       	ldd	r20, Y+22	; 0x16
    d930:	5f 89       	ldd	r21, Y+23	; 0x17
    d932:	29 5f       	subi	r18, 0xF9	; 249
    d934:	3f 4f       	sbci	r19, 0xFF	; 255
    d936:	4f 4f       	sbci	r20, 0xFF	; 255
    d938:	5f 4f       	sbci	r21, 0xFF	; 255
    d93a:	b6 01       	movw	r22, r12
    d93c:	82 2d       	mov	r24, r2
    d93e:	f1 d1       	rcall	.+994    	; 0xdd22 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d940:	2c 89       	ldd	r18, Y+20	; 0x14
    d942:	3d 89       	ldd	r19, Y+21	; 0x15
    d944:	4e 89       	ldd	r20, Y+22	; 0x16
    d946:	5f 89       	ldd	r21, Y+23	; 0x17
    d948:	2f 5f       	subi	r18, 0xFF	; 255
    d94a:	3f 4f       	sbci	r19, 0xFF	; 255
    d94c:	4f 4f       	sbci	r20, 0xFF	; 255
    d94e:	5f 4f       	sbci	r21, 0xFF	; 255
    d950:	b6 01       	movw	r22, r12
    d952:	82 2d       	mov	r24, r2
    d954:	e6 d1       	rcall	.+972    	; 0xdd22 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    d956:	4d a5       	ldd	r20, Y+45	; 0x2d
    d958:	5e a5       	ldd	r21, Y+46	; 0x2e
    d95a:	60 e0       	ldi	r22, 0x00	; 0
    d95c:	70 e0       	ldi	r23, 0x00	; 0
    d95e:	c6 01       	movw	r24, r12
    d960:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    d964:	bf 85       	ldd	r27, Y+15	; 0x0f
    d966:	b3 30       	cpi	r27, 0x03	; 3
    d968:	89 f4       	brne	.+34     	; 0xd98c <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d96a:	88 ef       	ldi	r24, 0xF8	; 248
    d96c:	f6 01       	movw	r30, r12
    d96e:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d970:	8f ef       	ldi	r24, 0xFF	; 255
    d972:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    d974:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    d976:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d978:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    d97a:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    d97c:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    d97e:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d980:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    d982:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    d984:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    d986:	8f e0       	ldi	r24, 0x0F	; 15
    d988:	83 87       	std	Z+11, r24	; 0x0b
    d98a:	0f c0       	rjmp	.+30     	; 0xd9aa <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    d98c:	ff 85       	ldd	r31, Y+15	; 0x0f
    d98e:	f1 30       	cpi	r31, 0x01	; 1
    d990:	29 f0       	breq	.+10     	; 0xd99c <f_mkfs+0x88c>
    d992:	48 ef       	ldi	r20, 0xF8	; 248
    d994:	5f ef       	ldi	r21, 0xFF	; 255
    d996:	6f ef       	ldi	r22, 0xFF	; 255
    d998:	7f ef       	ldi	r23, 0xFF	; 255
    d99a:	04 c0       	rjmp	.+8      	; 0xd9a4 <f_mkfs+0x894>
    d99c:	48 ef       	ldi	r20, 0xF8	; 248
    d99e:	5f ef       	ldi	r21, 0xFF	; 255
    d9a0:	6f ef       	ldi	r22, 0xFF	; 255
    d9a2:	70 e0       	ldi	r23, 0x00	; 0
    d9a4:	c6 01       	movw	r24, r12
    d9a6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    d9aa:	88 88       	ldd	r8, Y+16	; 0x10
    d9ac:	99 88       	ldd	r9, Y+17	; 0x11
    d9ae:	aa 88       	ldd	r10, Y+18	; 0x12
    d9b0:	bb 88       	ldd	r11, Y+19	; 0x13
    d9b2:	0c a1       	ldd	r16, Y+36	; 0x24
    d9b4:	1d a1       	ldd	r17, Y+37	; 0x25
    d9b6:	2e a1       	ldd	r18, Y+38	; 0x26
    d9b8:	3f a1       	ldd	r19, Y+39	; 0x27
    d9ba:	08 15       	cp	r16, r8
    d9bc:	19 05       	cpc	r17, r9
    d9be:	2a 05       	cpc	r18, r10
    d9c0:	3b 05       	cpc	r19, r11
    d9c2:	10 f4       	brcc	.+4      	; 0xd9c8 <f_mkfs+0x8b8>
    d9c4:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d9c6:	59 01       	movw	r10, r18
    d9c8:	84 01       	movw	r16, r8
    d9ca:	28 8d       	ldd	r18, Y+24	; 0x18
    d9cc:	39 8d       	ldd	r19, Y+25	; 0x19
    d9ce:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d9d0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d9d2:	b6 01       	movw	r22, r12
    d9d4:	8c a5       	ldd	r24, Y+44	; 0x2c
    d9d6:	a5 d1       	rcall	.+842    	; 0xdd22 <disk_write>
    d9d8:	89 2b       	or	r24, r25
    d9da:	09 f0       	breq	.+2      	; 0xd9de <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    d9dc:	eb c0       	rjmp	.+470    	; 0xdbb4 <f_mkfs+0xaa4>
    d9de:	40 e0       	ldi	r20, 0x00	; 0
    d9e0:	52 e0       	ldi	r21, 0x02	; 2
    d9e2:	60 e0       	ldi	r22, 0x00	; 0
    d9e4:	70 e0       	ldi	r23, 0x00	; 0
    d9e6:	c6 01       	movw	r24, r12
    d9e8:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>
				sect += n; nsect -= n;
    d9ec:	28 8d       	ldd	r18, Y+24	; 0x18
    d9ee:	39 8d       	ldd	r19, Y+25	; 0x19
    d9f0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d9f2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d9f4:	28 0d       	add	r18, r8
    d9f6:	39 1d       	adc	r19, r9
    d9f8:	4a 1d       	adc	r20, r10
    d9fa:	5b 1d       	adc	r21, r11
    d9fc:	28 8f       	std	Y+24, r18	; 0x18
    d9fe:	39 8f       	std	Y+25, r19	; 0x19
    da00:	4a 8f       	std	Y+26, r20	; 0x1a
    da02:	5b 8f       	std	Y+27, r21	; 0x1b
    da04:	88 89       	ldd	r24, Y+16	; 0x10
    da06:	99 89       	ldd	r25, Y+17	; 0x11
    da08:	aa 89       	ldd	r26, Y+18	; 0x12
    da0a:	bb 89       	ldd	r27, Y+19	; 0x13
    da0c:	88 19       	sub	r24, r8
    da0e:	99 09       	sbc	r25, r9
    da10:	aa 09       	sbc	r26, r10
    da12:	bb 09       	sbc	r27, r11
    da14:	88 8b       	std	Y+16, r24	; 0x10
    da16:	99 8b       	std	Y+17, r25	; 0x11
    da18:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    da1a:	bb 8b       	std	Y+19, r27	; 0x13
    da1c:	89 2b       	or	r24, r25
    da1e:	8a 2b       	or	r24, r26
    da20:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    da22:	19 f6       	brne	.-122    	; 0xd9aa <f_mkfs+0x89a>
    da24:	9f 85       	ldd	r25, Y+15	; 0x0f
    da26:	93 30       	cpi	r25, 0x03	; 3
    da28:	21 f4       	brne	.+8      	; 0xda32 <f_mkfs+0x922>
    da2a:	4c 8e       	std	Y+28, r4	; 0x1c
    da2c:	5d 8e       	std	Y+29, r5	; 0x1d
    da2e:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    da30:	7f 8e       	std	Y+31, r7	; 0x1f
    da32:	8c 8c       	ldd	r8, Y+28	; 0x1c
    da34:	9d 8c       	ldd	r9, Y+29	; 0x1d
    da36:	ae 8c       	ldd	r10, Y+30	; 0x1e
    da38:	bf 8c       	ldd	r11, Y+31	; 0x1f
    da3a:	0c a1       	ldd	r16, Y+36	; 0x24
    da3c:	1d a1       	ldd	r17, Y+37	; 0x25
    da3e:	2e a1       	ldd	r18, Y+38	; 0x26
    da40:	3f a1       	ldd	r19, Y+39	; 0x27
    da42:	08 15       	cp	r16, r8
    da44:	19 05       	cpc	r17, r9
    da46:	2a 05       	cpc	r18, r10
    da48:	3b 05       	cpc	r19, r11
    da4a:	10 f4       	brcc	.+4      	; 0xda50 <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    da4c:	48 01       	movw	r8, r16
    da4e:	59 01       	movw	r10, r18
    da50:	84 01       	movw	r16, r8
    da52:	28 8d       	ldd	r18, Y+24	; 0x18
    da54:	39 8d       	ldd	r19, Y+25	; 0x19
    da56:	4a 8d       	ldd	r20, Y+26	; 0x1a
    da58:	5b 8d       	ldd	r21, Y+27	; 0x1b
    da5a:	b6 01       	movw	r22, r12
    da5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    da5e:	61 d1       	rcall	.+706    	; 0xdd22 <disk_write>
    da60:	89 2b       	or	r24, r25
    da62:	09 f0       	breq	.+2      	; 0xda66 <f_mkfs+0x956>
			sect += n; nsect -= n;
    da64:	a7 c0       	rjmp	.+334    	; 0xdbb4 <f_mkfs+0xaa4>
    da66:	28 8d       	ldd	r18, Y+24	; 0x18
    da68:	39 8d       	ldd	r19, Y+25	; 0x19
    da6a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    da6c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    da6e:	28 0d       	add	r18, r8
    da70:	39 1d       	adc	r19, r9
    da72:	4a 1d       	adc	r20, r10
    da74:	5b 1d       	adc	r21, r11
    da76:	28 8f       	std	Y+24, r18	; 0x18
    da78:	39 8f       	std	Y+25, r19	; 0x19
    da7a:	4a 8f       	std	Y+26, r20	; 0x1a
    da7c:	5b 8f       	std	Y+27, r21	; 0x1b
    da7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    da80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    da82:	ae 8d       	ldd	r26, Y+30	; 0x1e
    da84:	bf 8d       	ldd	r27, Y+31	; 0x1f
    da86:	88 19       	sub	r24, r8
    da88:	99 09       	sbc	r25, r9
    da8a:	aa 09       	sbc	r26, r10
    da8c:	bb 09       	sbc	r27, r11
    da8e:	8c 8f       	std	Y+28, r24	; 0x1c
    da90:	9d 8f       	std	Y+29, r25	; 0x1d
    da92:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    da94:	bf 8f       	std	Y+31, r27	; 0x1f
    da96:	89 2b       	or	r24, r25
    da98:	8a 2b       	or	r24, r26
    da9a:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    da9c:	51 f6       	brne	.-108    	; 0xda32 <f_mkfs+0x922>
    da9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    daa0:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    daa2:	69 f0       	breq	.+26     	; 0xdabe <f_mkfs+0x9ae>
    daa4:	89 81       	ldd	r24, Y+1	; 0x01
    daa6:	9a 81       	ldd	r25, Y+2	; 0x02
    daa8:	ab 81       	ldd	r26, Y+3	; 0x03
    daaa:	bc 81       	ldd	r27, Y+4	; 0x04
    daac:	00 97       	sbiw	r24, 0x00	; 0
    daae:	a1 40       	sbci	r26, 0x01	; 1
    dab0:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    dab2:	38 f4       	brcc	.+14     	; 0xdac2 <f_mkfs+0x9b2>
    dab4:	ff 85       	ldd	r31, Y+15	; 0x0f
    dab6:	f2 30       	cpi	r31, 0x02	; 2
    dab8:	31 f4       	brne	.+12     	; 0xdac6 <f_mkfs+0x9b6>
    daba:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    dabc:	05 c0       	rjmp	.+10     	; 0xdac8 <f_mkfs+0x9b8>
    dabe:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    dac0:	03 c0       	rjmp	.+6      	; 0xdac8 <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    dac2:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    dac4:	01 c0       	rjmp	.+2      	; 0xdac8 <f_mkfs+0x9b8>
    dac6:	11 e0       	ldi	r17, 0x01	; 1
    dac8:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    daca:	00 23       	and	r16, r16
    dacc:	69 f0       	breq	.+26     	; 0xdae8 <f_mkfs+0x9d8>
    dace:	40 e0       	ldi	r20, 0x00	; 0
    dad0:	50 e0       	ldi	r21, 0x00	; 0
    dad2:	60 e0       	ldi	r22, 0x00	; 0
    dad4:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    dad6:	35 d1       	rcall	.+618    	; 0xdd42 <disk_ioctl>
    dad8:	31 e0       	ldi	r19, 0x01	; 1
    dada:	20 e0       	ldi	r18, 0x00	; 0
    dadc:	89 2b       	or	r24, r25
    dade:	09 f4       	brne	.+2      	; 0xdae2 <f_mkfs+0x9d2>
    dae0:	30 e0       	ldi	r19, 0x00	; 0
    dae2:	83 2f       	mov	r24, r19
    dae4:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    dae6:	7b c0       	rjmp	.+246    	; 0xdbde <f_mkfs+0xace>
    dae8:	40 e0       	ldi	r20, 0x00	; 0
    daea:	52 e0       	ldi	r21, 0x02	; 2
    daec:	60 e0       	ldi	r22, 0x00	; 0
    daee:	70 e0       	ldi	r23, 0x00	; 0
    daf0:	c6 01       	movw	r24, r12
    daf2:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    daf6:	f6 01       	movw	r30, r12
    daf8:	e2 50       	subi	r30, 0x02	; 2
    dafa:	fe 4f       	sbci	r31, 0xFE	; 254
    dafc:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    dafe:	80 83       	st	Z, r24
    db00:	31 96       	adiw	r30, 0x01	; 1
    db02:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    db04:	80 83       	st	Z, r24
    db06:	e1 54       	subi	r30, 0x41	; 65
    db08:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    db0a:	10 82       	st	Z, r1
    db0c:	31 96       	adiw	r30, 0x01	; 1
    db0e:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    db10:	80 83       	st	Z, r24
    db12:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    db14:	80 83       	st	Z, r24
    db16:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    db18:	10 82       	st	Z, r1
    db1a:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    db1c:	10 83       	st	Z, r17
    db1e:	89 81       	ldd	r24, Y+1	; 0x01
    db20:	9a 81       	ldd	r25, Y+2	; 0x02
    db22:	ab 81       	ldd	r26, Y+3	; 0x03
    db24:	bc 81       	ldd	r27, Y+4	; 0x04
    db26:	2c 89       	ldd	r18, Y+20	; 0x14
    db28:	3d 89       	ldd	r19, Y+21	; 0x15
    db2a:	4e 89       	ldd	r20, Y+22	; 0x16
    db2c:	5f 89       	ldd	r21, Y+23	; 0x17
    db2e:	28 0f       	add	r18, r24
    db30:	39 1f       	adc	r19, r25
    db32:	4a 1f       	adc	r20, r26
    db34:	5b 1f       	adc	r21, r27
    db36:	ca 01       	movw	r24, r20
    db38:	b9 01       	movw	r22, r18
    db3a:	21 ec       	ldi	r18, 0xC1	; 193
    db3c:	3e e3       	ldi	r19, 0x3E	; 62
    db3e:	40 e0       	ldi	r20, 0x00	; 0
    db40:	50 e0       	ldi	r21, 0x00	; 0
    db42:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    db46:	f6 01       	movw	r30, r12
    db48:	ed 53       	subi	r30, 0x3D	; 61
    db4a:	fe 4f       	sbci	r31, 0xFE	; 254
    db4c:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    db4e:	80 83       	st	Z, r24
    db50:	31 96       	adiw	r30, 0x01	; 1
    db52:	da 01       	movw	r26, r20
    db54:	c9 01       	movw	r24, r18
    db56:	32 e0       	ldi	r19, 0x02	; 2
    db58:	b6 95       	lsr	r27
    db5a:	a7 95       	ror	r26
    db5c:	97 95       	ror	r25
    db5e:	87 95       	ror	r24
    db60:	3a 95       	dec	r19
    db62:	d1 f7       	brne	.-12     	; 0xdb58 <f_mkfs+0xa48>
    db64:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    db66:	80 83       	st	Z, r24
    db68:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    db6a:	20 83       	st	Z, r18
    db6c:	4c 89       	ldd	r20, Y+20	; 0x14
    db6e:	5d 89       	ldd	r21, Y+21	; 0x15
    db70:	6e 89       	ldd	r22, Y+22	; 0x16
    db72:	7f 89       	ldd	r23, Y+23	; 0x17
    db74:	c6 01       	movw	r24, r12
    db76:	8a 53       	subi	r24, 0x3A	; 58
    db78:	9e 4f       	sbci	r25, 0xFE	; 254
    db7a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    db7e:	49 81       	ldd	r20, Y+1	; 0x01
    db80:	5a 81       	ldd	r21, Y+2	; 0x02
    db82:	6b 81       	ldd	r22, Y+3	; 0x03
    db84:	7c 81       	ldd	r23, Y+4	; 0x04
    db86:	c6 01       	movw	r24, r12
    db88:	86 53       	subi	r24, 0x36	; 54
    db8a:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    db8c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <st_dword>
    db90:	01 e0       	ldi	r16, 0x01	; 1
    db92:	10 e0       	ldi	r17, 0x00	; 0
    db94:	20 e0       	ldi	r18, 0x00	; 0
    db96:	30 e0       	ldi	r19, 0x00	; 0
    db98:	a9 01       	movw	r20, r18
    db9a:	b6 01       	movw	r22, r12
    db9c:	82 2d       	mov	r24, r2
    db9e:	c1 d0       	rcall	.+386    	; 0xdd22 <disk_write>
    dba0:	89 2b       	or	r24, r25
    dba2:	09 f4       	brne	.+2      	; 0xdba6 <f_mkfs+0xa96>
    dba4:	94 cf       	rjmp	.-216    	; 0xdace <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    dba6:	06 c0       	rjmp	.+12     	; 0xdbb4 <f_mkfs+0xaa4>
    dba8:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    dbaa:	05 c0       	rjmp	.+10     	; 0xdbb6 <f_mkfs+0xaa6>
    dbac:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    dbae:	03 c0       	rjmp	.+6      	; 0xdbb6 <f_mkfs+0xaa6>
    dbb0:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    dbb2:	01 c0       	rjmp	.+2      	; 0xdbb6 <f_mkfs+0xaa6>
    dbb4:	81 e0       	ldi	r24, 0x01	; 1
    dbb6:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dbb8:	12 c0       	rjmp	.+36     	; 0xdbde <f_mkfs+0xace>
    dbba:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dbbc:	19 f0       	breq	.+6      	; 0xdbc4 <f_mkfs+0xab4>
    dbbe:	23 e0       	ldi	r18, 0x03	; 3
    dbc0:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    dbc2:	c6 cb       	rjmp	.-2164   	; 0xd350 <f_mkfs+0x240>
    dbc4:	81 38       	cpi	r24, 0x81	; 129
    dbc6:	91 05       	cpc	r25, r1
    dbc8:	a1 05       	cpc	r26, r1
    dbca:	b1 05       	cpc	r27, r1
    dbcc:	08 f0       	brcs	.+2      	; 0xdbd0 <f_mkfs+0xac0>
    dbce:	23 cb       	rjmp	.-2490   	; 0xd216 <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dbd0:	24 cd       	rjmp	.-1464   	; 0xd61a <f_mkfs+0x50a>
    dbd2:	ff 20       	and	r15, r15
    dbd4:	09 f4       	brne	.+2      	; 0xdbd8 <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dbd6:	1f cb       	rjmp	.-2498   	; 0xd216 <f_mkfs+0x106>
    dbd8:	33 e0       	ldi	r19, 0x03	; 3
    dbda:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    dbdc:	b9 cb       	rjmp	.-2190   	; 0xd350 <f_mkfs+0x240>
    dbde:	ce 5b       	subi	r28, 0xBE	; 190
    dbe0:	df 4f       	sbci	r29, 0xFF	; 255
    dbe2:	e2 e1       	ldi	r30, 0x12	; 18
    dbe4:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0000dbe8 <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    dbe8:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <safemalloc>
}
    dbec:	08 95       	ret

0000dbee <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    dbee:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <safefree>
    dbf2:	08 95       	ret

0000dbf4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    dbf4:	80 38       	cpi	r24, 0x80	; 128
    dbf6:	91 05       	cpc	r25, r1
    dbf8:	18 f1       	brcs	.+70     	; 0xdc40 <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dbfa:	67 2b       	or	r22, r23
    dbfc:	61 f0       	breq	.+24     	; 0xdc16 <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dbfe:	8f 3f       	cpi	r24, 0xFF	; 255
    dc00:	91 05       	cpc	r25, r1
    dc02:	09 f0       	breq	.+2      	; 0xdc06 <ff_convert+0x12>
    dc04:	d8 f4       	brcc	.+54     	; 0xdc3c <ff_convert+0x48>
    dc06:	88 0f       	add	r24, r24
    dc08:	99 1f       	adc	r25, r25
    dc0a:	fc 01       	movw	r30, r24
    dc0c:	e4 50       	subi	r30, 0x04	; 4
    dc0e:	fb 4f       	sbci	r31, 0xFB	; 251
    dc10:	80 81       	ld	r24, Z
    dc12:	91 81       	ldd	r25, Z+1	; 0x01
    dc14:	08 95       	ret
    dc16:	ec ef       	ldi	r30, 0xFC	; 252
    dc18:	f5 e0       	ldi	r31, 0x05	; 5

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dc1a:	20 e0       	ldi	r18, 0x00	; 0
    dc1c:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    dc1e:	41 91       	ld	r20, Z+
    dc20:	51 91       	ld	r21, Z+
    dc22:	84 17       	cp	r24, r20
    dc24:	95 07       	cpc	r25, r21
    dc26:	29 f0       	breq	.+10     	; 0xdc32 <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    dc28:	2f 5f       	subi	r18, 0xFF	; 255
    dc2a:	3f 4f       	sbci	r19, 0xFF	; 255
    dc2c:	20 38       	cpi	r18, 0x80	; 128
    dc2e:	31 05       	cpc	r19, r1
    dc30:	b1 f7       	brne	.-20     	; 0xdc1e <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    dc32:	c9 01       	movw	r24, r18
    dc34:	80 58       	subi	r24, 0x80	; 128
    dc36:	9f 4f       	sbci	r25, 0xFF	; 255
    dc38:	99 27       	eor	r25, r25
    dc3a:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dc3c:	80 e0       	ldi	r24, 0x00	; 0
    dc3e:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    dc40:	08 95       	ret

0000dc42 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    dc42:	81 15       	cp	r24, r1
    dc44:	20 e1       	ldi	r18, 0x10	; 16
    dc46:	92 07       	cpc	r25, r18
    dc48:	18 f0       	brcs	.+6      	; 0xdc50 <ff_wtoupper+0xe>
    dc4a:	ae e4       	ldi	r26, 0x4E	; 78
    dc4c:	b3 e0       	ldi	r27, 0x03	; 3
    dc4e:	02 c0       	rjmp	.+4      	; 0xdc54 <ff_wtoupper+0x12>
    dc50:	aa e0       	ldi	r26, 0x0A	; 10
    dc52:	b4 e0       	ldi	r27, 0x04	; 4
	for (;;) {
		bc = *p++;								/* Get block base */
    dc54:	4d 91       	ld	r20, X+
    dc56:	5c 91       	ld	r21, X
    dc58:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    dc5a:	41 15       	cp	r20, r1
    dc5c:	51 05       	cpc	r21, r1
    dc5e:	09 f4       	brne	.+2      	; 0xdc62 <ff_wtoupper+0x20>
    dc60:	43 c0       	rjmp	.+134    	; 0xdce8 <ff_wtoupper+0xa6>
    dc62:	84 17       	cp	r24, r20
    dc64:	95 07       	cpc	r25, r21
    dc66:	08 f4       	brcc	.+2      	; 0xdc6a <ff_wtoupper+0x28>
    dc68:	3f c0       	rjmp	.+126    	; 0xdce8 <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    dc6a:	14 96       	adiw	r26, 0x04	; 4
    dc6c:	fd 01       	movw	r30, r26
    dc6e:	32 97       	sbiw	r30, 0x02	; 2
    dc70:	20 81       	ld	r18, Z
    dc72:	31 81       	ldd	r19, Z+1	; 0x01
    dc74:	e3 2f       	mov	r30, r19
    dc76:	ff 27       	eor	r31, r31
    dc78:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    dc7a:	ba 01       	movw	r22, r20
    dc7c:	62 0f       	add	r22, r18
    dc7e:	73 1f       	adc	r23, r19
    dc80:	86 17       	cp	r24, r22
    dc82:	97 07       	cpc	r25, r23
    dc84:	48 f5       	brcc	.+82     	; 0xdcd8 <ff_wtoupper+0x96>
			switch (cmd) {
    dc86:	e9 30       	cpi	r30, 0x09	; 9
    dc88:	f1 05       	cpc	r31, r1
    dc8a:	70 f5       	brcc	.+92     	; 0xdce8 <ff_wtoupper+0xa6>
    dc8c:	ec 54       	subi	r30, 0x4C	; 76
    dc8e:	ff 4f       	sbci	r31, 0xFF	; 255
    dc90:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    dc94:	fc 01       	movw	r30, r24
    dc96:	e4 1b       	sub	r30, r20
    dc98:	f5 0b       	sbc	r31, r21
    dc9a:	ee 0f       	add	r30, r30
    dc9c:	ff 1f       	adc	r31, r31
    dc9e:	ea 0f       	add	r30, r26
    dca0:	fb 1f       	adc	r31, r27
    dca2:	80 81       	ld	r24, Z
    dca4:	91 81       	ldd	r25, Z+1	; 0x01
    dca6:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    dca8:	9c 01       	movw	r18, r24
    dcaa:	24 1b       	sub	r18, r20
    dcac:	35 0b       	sbc	r19, r21
    dcae:	21 70       	andi	r18, 0x01	; 1
    dcb0:	33 27       	eor	r19, r19
    dcb2:	82 1b       	sub	r24, r18
    dcb4:	93 0b       	sbc	r25, r19
    dcb6:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    dcb8:	40 97       	sbiw	r24, 0x10	; 16
    dcba:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    dcbc:	80 97       	sbiw	r24, 0x20	; 32
    dcbe:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    dcc0:	c0 97       	sbiw	r24, 0x30	; 48
    dcc2:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    dcc4:	4a 97       	sbiw	r24, 0x1a	; 26
    dcc6:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    dcc8:	08 96       	adiw	r24, 0x08	; 8
    dcca:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    dccc:	80 55       	subi	r24, 0x50	; 80
    dcce:	91 09       	sbc	r25, r1
    dcd0:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    dcd2:	80 56       	subi	r24, 0x60	; 96
    dcd4:	9c 41       	sbci	r25, 0x1C	; 28
    dcd6:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    dcd8:	ef 2b       	or	r30, r31
    dcda:	09 f0       	breq	.+2      	; 0xdcde <ff_wtoupper+0x9c>
    dcdc:	bb cf       	rjmp	.-138    	; 0xdc54 <ff_wtoupper+0x12>
    dcde:	22 0f       	add	r18, r18
    dce0:	33 1f       	adc	r19, r19
    dce2:	a2 0f       	add	r26, r18
    dce4:	b3 1f       	adc	r27, r19
    dce6:	b6 cf       	rjmp	.-148    	; 0xdc54 <ff_wtoupper+0x12>
	}

	return chr;
}
    dce8:	08 95       	ret

0000dcea <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    dcea:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    dcec:	02 c0       	rjmp	.+4      	; 0xdcf2 <disk_status+0x8>
    dcee:	9b c1       	rjmp	.+822    	; 0xe026 <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    dcf0:	08 95       	ret
}
    dcf2:	81 e0       	ldi	r24, 0x01	; 1
    dcf4:	08 95       	ret

0000dcf6 <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    dcf6:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    dcf8:	02 c0       	rjmp	.+4      	; 0xdcfe <disk_initialize+0x8>
    dcfa:	f8 c0       	rjmp	.+496    	; 0xdeec <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    dcfc:	08 95       	ret
}
    dcfe:	81 e0       	ldi	r24, 0x01	; 1
    dd00:	08 95       	ret

0000dd02 <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    dd02:	0f 93       	push	r16
    dd04:	1f 93       	push	r17
    dd06:	fb 01       	movw	r30, r22
    switch (pdrv) {
    dd08:	81 11       	cpse	r24, r1
    dd0a:	06 c0       	rjmp	.+12     	; 0xdd18 <disk_read+0x16>
    dd0c:	ba 01       	movw	r22, r20
    dd0e:	a9 01       	movw	r20, r18
    dd10:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    dd12:	98 01       	movw	r18, r16
    dd14:	8b d1       	rcall	.+790    	; 0xe02c <mmc_disk_read>
    dd16:	02 c0       	rjmp	.+4      	; 0xdd1c <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    dd18:	84 e0       	ldi	r24, 0x04	; 4
    dd1a:	90 e0       	ldi	r25, 0x00	; 0
}
    dd1c:	1f 91       	pop	r17
    dd1e:	0f 91       	pop	r16
    dd20:	08 95       	ret

0000dd22 <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    dd22:	0f 93       	push	r16
    dd24:	1f 93       	push	r17
    dd26:	fb 01       	movw	r30, r22
    switch (pdrv) {
    dd28:	81 11       	cpse	r24, r1
    dd2a:	06 c0       	rjmp	.+12     	; 0xdd38 <disk_write+0x16>
    dd2c:	ba 01       	movw	r22, r20
    dd2e:	a9 01       	movw	r20, r18
    dd30:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    dd32:	98 01       	movw	r18, r16
    dd34:	c1 d1       	rcall	.+898    	; 0xe0b8 <mmc_disk_write>
    dd36:	02 c0       	rjmp	.+4      	; 0xdd3c <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    dd38:	84 e0       	ldi	r24, 0x04	; 4
    dd3a:	90 e0       	ldi	r25, 0x00	; 0
}
    dd3c:	1f 91       	pop	r17
    dd3e:	0f 91       	pop	r16
    dd40:	08 95       	ret

0000dd42 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    dd42:	96 2f       	mov	r25, r22
    switch (pdrv) {
    dd44:	81 11       	cpse	r24, r1
    dd46:	04 c0       	rjmp	.+8      	; 0xdd50 <disk_ioctl+0xe>
    dd48:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    dd4a:	89 2f       	mov	r24, r25
    dd4c:	1a c2       	rjmp	.+1076   	; 0xe182 <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    dd4e:	08 95       	ret
    dd50:	84 e0       	ldi	r24, 0x04	; 4
}
    dd52:	90 e0       	ldi	r25, 0x00	; 0
    dd54:	08 95       	ret

0000dd56 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    dd56:	17 c5       	rjmp	.+2606   	; 0xe786 <mmc_spi_TXRX>
    dd58:	08 95       	ret

0000dd5a <deselect>:
    dd5a:	ec d4       	rcall	.+2520   	; 0xe734 <mmc_spi_end>
    dd5c:	8f ef       	ldi	r24, 0xFF	; 255
    dd5e:	fb df       	rcall	.-10     	; 0xdd56 <xchg_spi>
    dd60:	8f ef       	ldi	r24, 0xFF	; 255
    dd62:	f9 cf       	rjmp	.-14     	; 0xdd56 <xchg_spi>
    dd64:	08 95       	ret

0000dd66 <rcvr_datablock>:
    dd66:	0f 93       	push	r16
    dd68:	1f 93       	push	r17
    dd6a:	cf 93       	push	r28
    dd6c:	df 93       	push	r29
    dd6e:	ec 01       	movw	r28, r24
    dd70:	8b 01       	movw	r16, r22
    dd72:	46 9a       	sbi	0x08, 6	; 8
    dd74:	3e 9a       	sbi	0x07, 6	; 7
    dd76:	88 ee       	ldi	r24, 0xE8	; 232
    dd78:	93 e0       	ldi	r25, 0x03	; 3
    dd7a:	08 d5       	rcall	.+2576   	; 0xe78c <mmc_set_ms_timeout>
    dd7c:	8f ef       	ldi	r24, 0xFF	; 255
    dd7e:	03 d5       	rcall	.+2566   	; 0xe786 <mmc_spi_TXRX>
    dd80:	8f 3f       	cpi	r24, 0xFF	; 255
    dd82:	31 f4       	brne	.+12     	; 0xdd90 <rcvr_datablock+0x2a>
    dd84:	0a d5       	rcall	.+2580   	; 0xe79a <mmc_test_timeout>
    dd86:	89 2b       	or	r24, r25
    dd88:	c9 f3       	breq	.-14     	; 0xdd7c <rcvr_datablock+0x16>
    dd8a:	80 e0       	ldi	r24, 0x00	; 0
    dd8c:	90 e0       	ldi	r25, 0x00	; 0
    dd8e:	0d c0       	rjmp	.+26     	; 0xddaa <rcvr_datablock+0x44>
    dd90:	8e 3f       	cpi	r24, 0xFE	; 254
    dd92:	d9 f7       	brne	.-10     	; 0xdd8a <rcvr_datablock+0x24>
    dd94:	b8 01       	movw	r22, r16
    dd96:	ce 01       	movw	r24, r28
    dd98:	f3 d4       	rcall	.+2534   	; 0xe780 <mmc_spi_RX_buffer>
    dd9a:	8f ef       	ldi	r24, 0xFF	; 255
    dd9c:	dc df       	rcall	.-72     	; 0xdd56 <xchg_spi>
    dd9e:	8f ef       	ldi	r24, 0xFF	; 255
    dda0:	da df       	rcall	.-76     	; 0xdd56 <xchg_spi>
    dda2:	46 98       	cbi	0x08, 6	; 8
    dda4:	3e 9a       	sbi	0x07, 6	; 7
    dda6:	81 e0       	ldi	r24, 0x01	; 1
    dda8:	90 e0       	ldi	r25, 0x00	; 0
    ddaa:	df 91       	pop	r29
    ddac:	cf 91       	pop	r28
    ddae:	1f 91       	pop	r17
    ddb0:	0f 91       	pop	r16
    ddb2:	08 95       	ret

0000ddb4 <wait_ready>:
    ddb4:	cf 93       	push	r28
    ddb6:	ea d4       	rcall	.+2516   	; 0xe78c <mmc_set_ms_timeout>
    ddb8:	8f ef       	ldi	r24, 0xFF	; 255
    ddba:	e5 d4       	rcall	.+2506   	; 0xe786 <mmc_spi_TXRX>
    ddbc:	c8 2f       	mov	r28, r24
    ddbe:	8f 3f       	cpi	r24, 0xFF	; 255
    ddc0:	19 f0       	breq	.+6      	; 0xddc8 <wait_ready+0x14>
    ddc2:	eb d4       	rcall	.+2518   	; 0xe79a <mmc_test_timeout>
    ddc4:	89 2b       	or	r24, r25
    ddc6:	c1 f3       	breq	.-16     	; 0xddb8 <wait_ready+0x4>
    ddc8:	81 e0       	ldi	r24, 0x01	; 1
    ddca:	90 e0       	ldi	r25, 0x00	; 0
    ddcc:	cf 3f       	cpi	r28, 0xFF	; 255
    ddce:	11 f0       	breq	.+4      	; 0xddd4 <wait_ready+0x20>
    ddd0:	80 e0       	ldi	r24, 0x00	; 0
    ddd2:	90 e0       	ldi	r25, 0x00	; 0
    ddd4:	cf 91       	pop	r28
    ddd6:	08 95       	ret

0000ddd8 <select>:
    ddd8:	cf 93       	push	r28
    ddda:	df 93       	push	r29
    dddc:	9e d4       	rcall	.+2364   	; 0xe71a <mmc_spi_begin>
    ddde:	8f ef       	ldi	r24, 0xFF	; 255
    dde0:	ba df       	rcall	.-140    	; 0xdd56 <xchg_spi>
    dde2:	88 ee       	ldi	r24, 0xE8	; 232
    dde4:	93 e0       	ldi	r25, 0x03	; 3
    dde6:	e6 df       	rcall	.-52     	; 0xddb4 <wait_ready>
    dde8:	ec 01       	movw	r28, r24
    ddea:	89 2b       	or	r24, r25
    ddec:	61 f4       	brne	.+24     	; 0xde06 <select+0x2e>
    ddee:	8c eb       	ldi	r24, 0xBC	; 188
    ddf0:	97 e0       	ldi	r25, 0x07	; 7
    ddf2:	1f 92       	push	r1
    ddf4:	9f 93       	push	r25
    ddf6:	8f 93       	push	r24
    ddf8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    ddfc:	ae df       	rcall	.-164    	; 0xdd5a <deselect>
    ddfe:	0f 90       	pop	r0
    de00:	0f 90       	pop	r0
    de02:	0f 90       	pop	r0
    de04:	02 c0       	rjmp	.+4      	; 0xde0a <select+0x32>
    de06:	c1 e0       	ldi	r28, 0x01	; 1
    de08:	d0 e0       	ldi	r29, 0x00	; 0
    de0a:	ce 01       	movw	r24, r28
    de0c:	df 91       	pop	r29
    de0e:	cf 91       	pop	r28
    de10:	08 95       	ret

0000de12 <send_cmd>:
    de12:	ff 92       	push	r15
    de14:	0f 93       	push	r16
    de16:	1f 93       	push	r17
    de18:	cf 93       	push	r28
    de1a:	df 93       	push	r29
    de1c:	c8 2f       	mov	r28, r24
    de1e:	d4 2f       	mov	r29, r20
    de20:	15 2f       	mov	r17, r21
    de22:	06 2f       	mov	r16, r22
    de24:	f7 2e       	mov	r15, r23
    de26:	87 ff       	sbrs	r24, 7
    de28:	08 c0       	rjmp	.+16     	; 0xde3a <send_cmd+0x28>
    de2a:	40 e0       	ldi	r20, 0x00	; 0
    de2c:	50 e0       	ldi	r21, 0x00	; 0
    de2e:	ba 01       	movw	r22, r20
    de30:	87 e3       	ldi	r24, 0x37	; 55
    de32:	ef df       	rcall	.-34     	; 0xde12 <send_cmd>
    de34:	82 30       	cpi	r24, 0x02	; 2
    de36:	58 f5       	brcc	.+86     	; 0xde8e <send_cmd+0x7c>
    de38:	cf 77       	andi	r28, 0x7F	; 127
    de3a:	cc 30       	cpi	r28, 0x0C	; 12
    de3c:	71 f4       	brne	.+28     	; 0xde5a <send_cmd+0x48>
    de3e:	8c 2f       	mov	r24, r28
    de40:	80 64       	ori	r24, 0x40	; 64
    de42:	89 df       	rcall	.-238    	; 0xdd56 <xchg_spi>
    de44:	8f 2d       	mov	r24, r15
    de46:	87 df       	rcall	.-242    	; 0xdd56 <xchg_spi>
    de48:	80 2f       	mov	r24, r16
    de4a:	85 df       	rcall	.-246    	; 0xdd56 <xchg_spi>
    de4c:	81 2f       	mov	r24, r17
    de4e:	83 df       	rcall	.-250    	; 0xdd56 <xchg_spi>
    de50:	8d 2f       	mov	r24, r29
    de52:	81 df       	rcall	.-254    	; 0xdd56 <xchg_spi>
    de54:	cc 23       	and	r28, r28
    de56:	c9 f0       	breq	.+50     	; 0xde8a <send_cmd+0x78>
    de58:	06 c0       	rjmp	.+12     	; 0xde66 <send_cmd+0x54>
    de5a:	7f df       	rcall	.-258    	; 0xdd5a <deselect>
    de5c:	bd df       	rcall	.-134    	; 0xddd8 <select>
    de5e:	89 2b       	or	r24, r25
    de60:	71 f7       	brne	.-36     	; 0xde3e <send_cmd+0x2c>
    de62:	8f ef       	ldi	r24, 0xFF	; 255
    de64:	14 c0       	rjmp	.+40     	; 0xde8e <send_cmd+0x7c>
    de66:	c8 30       	cpi	r28, 0x08	; 8
    de68:	11 f4       	brne	.+4      	; 0xde6e <send_cmd+0x5c>
    de6a:	87 e8       	ldi	r24, 0x87	; 135
    de6c:	01 c0       	rjmp	.+2      	; 0xde70 <send_cmd+0x5e>
    de6e:	81 e0       	ldi	r24, 0x01	; 1
    de70:	72 df       	rcall	.-284    	; 0xdd56 <xchg_spi>
    de72:	cc 30       	cpi	r28, 0x0C	; 12
    de74:	11 f4       	brne	.+4      	; 0xde7a <send_cmd+0x68>
    de76:	8f ef       	ldi	r24, 0xFF	; 255
    de78:	6e df       	rcall	.-292    	; 0xdd56 <xchg_spi>
    de7a:	ca e0       	ldi	r28, 0x0A	; 10
    de7c:	8f ef       	ldi	r24, 0xFF	; 255
    de7e:	83 d4       	rcall	.+2310   	; 0xe786 <mmc_spi_TXRX>
    de80:	87 ff       	sbrs	r24, 7
    de82:	05 c0       	rjmp	.+10     	; 0xde8e <send_cmd+0x7c>
    de84:	c1 50       	subi	r28, 0x01	; 1
    de86:	d1 f7       	brne	.-12     	; 0xde7c <send_cmd+0x6a>
    de88:	02 c0       	rjmp	.+4      	; 0xde8e <send_cmd+0x7c>
    de8a:	85 e9       	ldi	r24, 0x95	; 149
    de8c:	f5 cf       	rjmp	.-22     	; 0xde78 <send_cmd+0x66>
    de8e:	cd b7       	in	r28, 0x3d	; 61
    de90:	de b7       	in	r29, 0x3e	; 62
    de92:	e5 e0       	ldi	r30, 0x05	; 5
    de94:	0c 94 44 eb 	jmp	0x1d688	; 0x1d688 <__epilogue_restores__+0x1a>

0000de98 <xmit_datablock>:
    de98:	0f 93       	push	r16
    de9a:	1f 93       	push	r17
    de9c:	cf 93       	push	r28
    de9e:	8c 01       	movw	r16, r24
    dea0:	c6 2f       	mov	r28, r22
    dea2:	47 9a       	sbi	0x08, 7	; 8
    dea4:	3f 9a       	sbi	0x07, 7	; 7
    dea6:	88 ee       	ldi	r24, 0xE8	; 232
    dea8:	93 e0       	ldi	r25, 0x03	; 3
    deaa:	84 df       	rcall	.-248    	; 0xddb4 <wait_ready>
    deac:	89 2b       	or	r24, r25
    deae:	19 f4       	brne	.+6      	; 0xdeb6 <xmit_datablock+0x1e>
    deb0:	80 e0       	ldi	r24, 0x00	; 0
    deb2:	90 e0       	ldi	r25, 0x00	; 0
    deb4:	17 c0       	rjmp	.+46     	; 0xdee4 <xmit_datablock+0x4c>
    deb6:	8c 2f       	mov	r24, r28
    deb8:	4e df       	rcall	.-356    	; 0xdd56 <xchg_spi>
    deba:	cd 3f       	cpi	r28, 0xFD	; 253
    debc:	29 f4       	brne	.+10     	; 0xdec8 <xmit_datablock+0x30>
    debe:	46 98       	cbi	0x08, 6	; 8
    dec0:	3e 9a       	sbi	0x07, 6	; 7
    dec2:	81 e0       	ldi	r24, 0x01	; 1
    dec4:	90 e0       	ldi	r25, 0x00	; 0
    dec6:	0e c0       	rjmp	.+28     	; 0xdee4 <xmit_datablock+0x4c>
    dec8:	60 e0       	ldi	r22, 0x00	; 0
    deca:	72 e0       	ldi	r23, 0x02	; 2
    decc:	c8 01       	movw	r24, r16
    dece:	55 d4       	rcall	.+2218   	; 0xe77a <mmc_spi_TX_buffer>
    ded0:	8f ef       	ldi	r24, 0xFF	; 255
    ded2:	41 df       	rcall	.-382    	; 0xdd56 <xchg_spi>
    ded4:	8f ef       	ldi	r24, 0xFF	; 255
    ded6:	3f df       	rcall	.-386    	; 0xdd56 <xchg_spi>
    ded8:	8f ef       	ldi	r24, 0xFF	; 255
    deda:	55 d4       	rcall	.+2218   	; 0xe786 <mmc_spi_TXRX>
    dedc:	8f 71       	andi	r24, 0x1F	; 31
    dede:	85 30       	cpi	r24, 0x05	; 5
    dee0:	39 f7       	brne	.-50     	; 0xdeb0 <xmit_datablock+0x18>
    dee2:	ed cf       	rjmp	.-38     	; 0xdebe <xmit_datablock+0x26>
    dee4:	cf 91       	pop	r28
    dee6:	1f 91       	pop	r17
    dee8:	0f 91       	pop	r16
    deea:	08 95       	ret

0000deec <mmc_disk_initialize>:
    deec:	a4 e0       	ldi	r26, 0x04	; 4
    deee:	b0 e0       	ldi	r27, 0x00	; 0
    def0:	ec e7       	ldi	r30, 0x7C	; 124
    def2:	ff e6       	ldi	r31, 0x6F	; 111
    def4:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    def8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    defc:	81 fd       	sbrc	r24, 1
    defe:	8d c0       	rjmp	.+282    	; 0xe01a <mmc_disk_initialize+0x12e>
    df00:	1d d4       	rcall	.+2106   	; 0xe73c <mmc_slow>
    df02:	1a e0       	ldi	r17, 0x0A	; 10
    df04:	8f ef       	ldi	r24, 0xFF	; 255
    df06:	27 df       	rcall	.-434    	; 0xdd56 <xchg_spi>
    df08:	11 50       	subi	r17, 0x01	; 1
    df0a:	e1 f7       	brne	.-8      	; 0xdf04 <mmc_disk_initialize+0x18>
    df0c:	40 e0       	ldi	r20, 0x00	; 0
    df0e:	50 e0       	ldi	r21, 0x00	; 0
    df10:	ba 01       	movw	r22, r20
    df12:	80 e0       	ldi	r24, 0x00	; 0
    df14:	7e df       	rcall	.-260    	; 0xde12 <send_cmd>
    df16:	81 30       	cpi	r24, 0x01	; 1
    df18:	09 f0       	breq	.+2      	; 0xdf1c <mmc_disk_initialize+0x30>
    df1a:	6f c0       	rjmp	.+222    	; 0xdffa <mmc_disk_initialize+0x10e>
    df1c:	80 ed       	ldi	r24, 0xD0	; 208
    df1e:	97 e0       	ldi	r25, 0x07	; 7
    df20:	35 d4       	rcall	.+2154   	; 0xe78c <mmc_set_ms_timeout>
    df22:	4a ea       	ldi	r20, 0xAA	; 170
    df24:	51 e0       	ldi	r21, 0x01	; 1
    df26:	60 e0       	ldi	r22, 0x00	; 0
    df28:	70 e0       	ldi	r23, 0x00	; 0
    df2a:	88 e0       	ldi	r24, 0x08	; 8
    df2c:	72 df       	rcall	.-284    	; 0xde12 <send_cmd>
    df2e:	81 30       	cpi	r24, 0x01	; 1
    df30:	09 f0       	breq	.+2      	; 0xdf34 <mmc_disk_initialize+0x48>
    df32:	3d c0       	rjmp	.+122    	; 0xdfae <mmc_disk_initialize+0xc2>
    df34:	8e 01       	movw	r16, r28
    df36:	0f 5f       	subi	r16, 0xFF	; 255
    df38:	1f 4f       	sbci	r17, 0xFF	; 255
    df3a:	6e 01       	movw	r12, r28
    df3c:	85 e0       	ldi	r24, 0x05	; 5
    df3e:	c8 0e       	add	r12, r24
    df40:	d1 1c       	adc	r13, r1
    df42:	78 01       	movw	r14, r16
    df44:	8f ef       	ldi	r24, 0xFF	; 255
    df46:	1f d4       	rcall	.+2110   	; 0xe786 <mmc_spi_TXRX>
    df48:	f7 01       	movw	r30, r14
    df4a:	81 93       	st	Z+, r24
    df4c:	7f 01       	movw	r14, r30
    df4e:	ce 16       	cp	r12, r30
    df50:	df 06       	cpc	r13, r31
    df52:	c1 f7       	brne	.-16     	; 0xdf44 <mmc_disk_initialize+0x58>
    df54:	8b 81       	ldd	r24, Y+3	; 0x03
    df56:	81 30       	cpi	r24, 0x01	; 1
    df58:	09 f0       	breq	.+2      	; 0xdf5c <mmc_disk_initialize+0x70>
    df5a:	4f c0       	rjmp	.+158    	; 0xdffa <mmc_disk_initialize+0x10e>
    df5c:	8c 81       	ldd	r24, Y+4	; 0x04
    df5e:	8a 3a       	cpi	r24, 0xAA	; 170
    df60:	09 f0       	breq	.+2      	; 0xdf64 <mmc_disk_initialize+0x78>
    df62:	4b c0       	rjmp	.+150    	; 0xdffa <mmc_disk_initialize+0x10e>
    df64:	1a d4       	rcall	.+2100   	; 0xe79a <mmc_test_timeout>
    df66:	89 2b       	or	r24, r25
    df68:	29 f0       	breq	.+10     	; 0xdf74 <mmc_disk_initialize+0x88>
    df6a:	17 d4       	rcall	.+2094   	; 0xe79a <mmc_test_timeout>
    df6c:	89 2b       	or	r24, r25
    df6e:	09 f0       	breq	.+2      	; 0xdf72 <mmc_disk_initialize+0x86>
    df70:	44 c0       	rjmp	.+136    	; 0xdffa <mmc_disk_initialize+0x10e>
    df72:	09 c0       	rjmp	.+18     	; 0xdf86 <mmc_disk_initialize+0x9a>
    df74:	40 e0       	ldi	r20, 0x00	; 0
    df76:	50 e0       	ldi	r21, 0x00	; 0
    df78:	60 e0       	ldi	r22, 0x00	; 0
    df7a:	70 e4       	ldi	r23, 0x40	; 64
    df7c:	89 ea       	ldi	r24, 0xA9	; 169
    df7e:	49 df       	rcall	.-366    	; 0xde12 <send_cmd>
    df80:	81 11       	cpse	r24, r1
    df82:	f0 cf       	rjmp	.-32     	; 0xdf64 <mmc_disk_initialize+0x78>
    df84:	f2 cf       	rjmp	.-28     	; 0xdf6a <mmc_disk_initialize+0x7e>
    df86:	40 e0       	ldi	r20, 0x00	; 0
    df88:	50 e0       	ldi	r21, 0x00	; 0
    df8a:	ba 01       	movw	r22, r20
    df8c:	8a e3       	ldi	r24, 0x3A	; 58
    df8e:	41 df       	rcall	.-382    	; 0xde12 <send_cmd>
    df90:	81 11       	cpse	r24, r1
    df92:	33 c0       	rjmp	.+102    	; 0xdffa <mmc_disk_initialize+0x10e>
    df94:	8f ef       	ldi	r24, 0xFF	; 255
    df96:	f7 d3       	rcall	.+2030   	; 0xe786 <mmc_spi_TXRX>
    df98:	f8 01       	movw	r30, r16
    df9a:	81 93       	st	Z+, r24
    df9c:	8f 01       	movw	r16, r30
    df9e:	ce 16       	cp	r12, r30
    dfa0:	df 06       	cpc	r13, r31
    dfa2:	c1 f7       	brne	.-16     	; 0xdf94 <mmc_disk_initialize+0xa8>
    dfa4:	89 81       	ldd	r24, Y+1	; 0x01
    dfa6:	86 fd       	sbrc	r24, 6
    dfa8:	2a c0       	rjmp	.+84     	; 0xdffe <mmc_disk_initialize+0x112>
    dfaa:	14 e0       	ldi	r17, 0x04	; 4
    dfac:	29 c0       	rjmp	.+82     	; 0xe000 <mmc_disk_initialize+0x114>
    dfae:	80 ed       	ldi	r24, 0xD0	; 208
    dfb0:	97 e0       	ldi	r25, 0x07	; 7
    dfb2:	ec d3       	rcall	.+2008   	; 0xe78c <mmc_set_ms_timeout>
    dfb4:	40 e0       	ldi	r20, 0x00	; 0
    dfb6:	50 e0       	ldi	r21, 0x00	; 0
    dfb8:	ba 01       	movw	r22, r20
    dfba:	89 ea       	ldi	r24, 0xA9	; 169
    dfbc:	2a df       	rcall	.-428    	; 0xde12 <send_cmd>
    dfbe:	82 30       	cpi	r24, 0x02	; 2
    dfc0:	18 f0       	brcs	.+6      	; 0xdfc8 <mmc_disk_initialize+0xdc>
    dfc2:	11 e0       	ldi	r17, 0x01	; 1
    dfc4:	01 e0       	ldi	r16, 0x01	; 1
    dfc6:	02 c0       	rjmp	.+4      	; 0xdfcc <mmc_disk_initialize+0xe0>
    dfc8:	12 e0       	ldi	r17, 0x02	; 2
    dfca:	09 ea       	ldi	r16, 0xA9	; 169
    dfcc:	e6 d3       	rcall	.+1996   	; 0xe79a <mmc_test_timeout>
    dfce:	89 2b       	or	r24, r25
    dfd0:	21 f0       	breq	.+8      	; 0xdfda <mmc_disk_initialize+0xee>
    dfd2:	e3 d3       	rcall	.+1990   	; 0xe79a <mmc_test_timeout>
    dfd4:	89 2b       	or	r24, r25
    dfd6:	89 f4       	brne	.+34     	; 0xdffa <mmc_disk_initialize+0x10e>
    dfd8:	08 c0       	rjmp	.+16     	; 0xdfea <mmc_disk_initialize+0xfe>
    dfda:	40 e0       	ldi	r20, 0x00	; 0
    dfdc:	50 e0       	ldi	r21, 0x00	; 0
    dfde:	ba 01       	movw	r22, r20
    dfe0:	80 2f       	mov	r24, r16
    dfe2:	17 df       	rcall	.-466    	; 0xde12 <send_cmd>
    dfe4:	81 11       	cpse	r24, r1
    dfe6:	f2 cf       	rjmp	.-28     	; 0xdfcc <mmc_disk_initialize+0xe0>
    dfe8:	f4 cf       	rjmp	.-24     	; 0xdfd2 <mmc_disk_initialize+0xe6>
    dfea:	40 e0       	ldi	r20, 0x00	; 0
    dfec:	52 e0       	ldi	r21, 0x02	; 2
    dfee:	60 e0       	ldi	r22, 0x00	; 0
    dff0:	70 e0       	ldi	r23, 0x00	; 0
    dff2:	80 e1       	ldi	r24, 0x10	; 16
    dff4:	0e df       	rcall	.-484    	; 0xde12 <send_cmd>
    dff6:	88 23       	and	r24, r24
    dff8:	19 f0       	breq	.+6      	; 0xe000 <mmc_disk_initialize+0x114>
    dffa:	10 e0       	ldi	r17, 0x00	; 0
    dffc:	01 c0       	rjmp	.+2      	; 0xe000 <mmc_disk_initialize+0x114>
    dffe:	1c e0       	ldi	r17, 0x0C	; 12
    e000:	10 93 2c 18 	sts	0x182C, r17	; 0x80182c <CardType>
    e004:	aa de       	rcall	.-684    	; 0xdd5a <deselect>
    e006:	11 23       	and	r17, r17
    e008:	39 f0       	breq	.+14     	; 0xe018 <mmc_disk_initialize+0x12c>
    e00a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e00e:	8e 7f       	andi	r24, 0xFE	; 254
    e010:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e014:	a5 d3       	rcall	.+1866   	; 0xe760 <mmc_fast>
    e016:	01 c0       	rjmp	.+2      	; 0xe01a <mmc_disk_initialize+0x12e>
    e018:	84 d4       	rcall	.+2312   	; 0xe922 <mmc_power_off>
    e01a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e01e:	24 96       	adiw	r28, 0x04	; 4
    e020:	e8 e0       	ldi	r30, 0x08	; 8
    e022:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000e026 <mmc_disk_status>:
    e026:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e02a:	08 95       	ret

0000e02c <mmc_disk_read>:
    e02c:	ef 92       	push	r14
    e02e:	ff 92       	push	r15
    e030:	1f 93       	push	r17
    e032:	cf 93       	push	r28
    e034:	df 93       	push	r29
    e036:	7c 01       	movw	r14, r24
    e038:	e9 01       	movw	r28, r18
    e03a:	20 97       	sbiw	r28, 0x00	; 0
    e03c:	19 f4       	brne	.+6      	; 0xe044 <mmc_disk_read+0x18>
    e03e:	8d de       	rcall	.-742    	; 0xdd5a <deselect>
    e040:	84 e0       	ldi	r24, 0x04	; 4
    e042:	06 c0       	rjmp	.+12     	; 0xe050 <mmc_disk_read+0x24>
    e044:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e048:	80 ff       	sbrs	r24, 0
    e04a:	04 c0       	rjmp	.+8      	; 0xe054 <mmc_disk_read+0x28>
    e04c:	86 de       	rcall	.-756    	; 0xdd5a <deselect>
    e04e:	83 e0       	ldi	r24, 0x03	; 3
    e050:	90 e0       	ldi	r25, 0x00	; 0
    e052:	2c c0       	rjmp	.+88     	; 0xe0ac <mmc_disk_read+0x80>
    e054:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e058:	83 fd       	sbrc	r24, 3
    e05a:	07 c0       	rjmp	.+14     	; 0xe06a <mmc_disk_read+0x3e>
    e05c:	89 e0       	ldi	r24, 0x09	; 9
    e05e:	44 0f       	add	r20, r20
    e060:	55 1f       	adc	r21, r21
    e062:	66 1f       	adc	r22, r22
    e064:	77 1f       	adc	r23, r23
    e066:	8a 95       	dec	r24
    e068:	d1 f7       	brne	.-12     	; 0xe05e <mmc_disk_read+0x32>
    e06a:	c2 30       	cpi	r28, 0x02	; 2
    e06c:	d1 05       	cpc	r29, r1
    e06e:	10 f4       	brcc	.+4      	; 0xe074 <mmc_disk_read+0x48>
    e070:	11 e1       	ldi	r17, 0x11	; 17
    e072:	01 c0       	rjmp	.+2      	; 0xe076 <mmc_disk_read+0x4a>
    e074:	12 e1       	ldi	r17, 0x12	; 18
    e076:	81 2f       	mov	r24, r17
    e078:	cc de       	rcall	.-616    	; 0xde12 <send_cmd>
    e07a:	81 11       	cpse	r24, r1
    e07c:	11 c0       	rjmp	.+34     	; 0xe0a0 <mmc_disk_read+0x74>
    e07e:	60 e0       	ldi	r22, 0x00	; 0
    e080:	72 e0       	ldi	r23, 0x02	; 2
    e082:	c7 01       	movw	r24, r14
    e084:	70 de       	rcall	.-800    	; 0xdd66 <rcvr_datablock>
    e086:	89 2b       	or	r24, r25
    e088:	21 f0       	breq	.+8      	; 0xe092 <mmc_disk_read+0x66>
    e08a:	8e ef       	ldi	r24, 0xFE	; 254
    e08c:	f8 1a       	sub	r15, r24
    e08e:	21 97       	sbiw	r28, 0x01	; 1
    e090:	b1 f7       	brne	.-20     	; 0xe07e <mmc_disk_read+0x52>
    e092:	12 31       	cpi	r17, 0x12	; 18
    e094:	29 f4       	brne	.+10     	; 0xe0a0 <mmc_disk_read+0x74>
    e096:	40 e0       	ldi	r20, 0x00	; 0
    e098:	50 e0       	ldi	r21, 0x00	; 0
    e09a:	ba 01       	movw	r22, r20
    e09c:	8c e0       	ldi	r24, 0x0C	; 12
    e09e:	b9 de       	rcall	.-654    	; 0xde12 <send_cmd>
    e0a0:	5c de       	rcall	.-840    	; 0xdd5a <deselect>
    e0a2:	81 e0       	ldi	r24, 0x01	; 1
    e0a4:	90 e0       	ldi	r25, 0x00	; 0
    e0a6:	cd 2b       	or	r28, r29
    e0a8:	09 f4       	brne	.+2      	; 0xe0ac <mmc_disk_read+0x80>
    e0aa:	80 e0       	ldi	r24, 0x00	; 0
    e0ac:	df 91       	pop	r29
    e0ae:	cf 91       	pop	r28
    e0b0:	1f 91       	pop	r17
    e0b2:	ff 90       	pop	r15
    e0b4:	ef 90       	pop	r14
    e0b6:	08 95       	ret

0000e0b8 <mmc_disk_write>:
    e0b8:	a0 e0       	ldi	r26, 0x00	; 0
    e0ba:	b0 e0       	ldi	r27, 0x00	; 0
    e0bc:	e2 e6       	ldi	r30, 0x62	; 98
    e0be:	f0 e7       	ldi	r31, 0x70	; 112
    e0c0:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    e0c4:	8c 01       	movw	r16, r24
    e0c6:	6a 01       	movw	r12, r20
    e0c8:	7b 01       	movw	r14, r22
    e0ca:	e9 01       	movw	r28, r18
    e0cc:	20 97       	sbiw	r28, 0x00	; 0
    e0ce:	19 f4       	brne	.+6      	; 0xe0d6 <mmc_disk_write+0x1e>
    e0d0:	44 de       	rcall	.-888    	; 0xdd5a <deselect>
    e0d2:	84 e0       	ldi	r24, 0x04	; 4
    e0d4:	06 c0       	rjmp	.+12     	; 0xe0e2 <mmc_disk_write+0x2a>
    e0d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e0da:	80 ff       	sbrs	r24, 0
    e0dc:	04 c0       	rjmp	.+8      	; 0xe0e6 <mmc_disk_write+0x2e>
    e0de:	3d de       	rcall	.-902    	; 0xdd5a <deselect>
    e0e0:	83 e0       	ldi	r24, 0x03	; 3
    e0e2:	90 e0       	ldi	r25, 0x00	; 0
    e0e4:	49 c0       	rjmp	.+146    	; 0xe178 <mmc_disk_write+0xc0>
    e0e6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e0ea:	82 ff       	sbrs	r24, 2
    e0ec:	03 c0       	rjmp	.+6      	; 0xe0f4 <mmc_disk_write+0x3c>
    e0ee:	35 de       	rcall	.-918    	; 0xdd5a <deselect>
    e0f0:	82 e0       	ldi	r24, 0x02	; 2
    e0f2:	f7 cf       	rjmp	.-18     	; 0xe0e2 <mmc_disk_write+0x2a>
    e0f4:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e0f8:	83 fd       	sbrc	r24, 3
    e0fa:	07 c0       	rjmp	.+14     	; 0xe10a <mmc_disk_write+0x52>
    e0fc:	99 e0       	ldi	r25, 0x09	; 9
    e0fe:	cc 0c       	add	r12, r12
    e100:	dd 1c       	adc	r13, r13
    e102:	ee 1c       	adc	r14, r14
    e104:	ff 1c       	adc	r15, r15
    e106:	9a 95       	dec	r25
    e108:	d1 f7       	brne	.-12     	; 0xe0fe <mmc_disk_write+0x46>
    e10a:	c1 30       	cpi	r28, 0x01	; 1
    e10c:	d1 05       	cpc	r29, r1
    e10e:	89 f4       	brne	.+34     	; 0xe132 <mmc_disk_write+0x7a>
    e110:	b7 01       	movw	r22, r14
    e112:	a6 01       	movw	r20, r12
    e114:	88 e1       	ldi	r24, 0x18	; 24
    e116:	7d de       	rcall	.-774    	; 0xde12 <send_cmd>
    e118:	81 11       	cpse	r24, r1
    e11a:	26 c0       	rjmp	.+76     	; 0xe168 <mmc_disk_write+0xb0>
    e11c:	6e ef       	ldi	r22, 0xFE	; 254
    e11e:	c8 01       	movw	r24, r16
    e120:	bb de       	rcall	.-650    	; 0xde98 <xmit_datablock>
    e122:	31 e0       	ldi	r19, 0x01	; 1
    e124:	20 e0       	ldi	r18, 0x00	; 0
    e126:	89 2b       	or	r24, r25
    e128:	09 f0       	breq	.+2      	; 0xe12c <mmc_disk_write+0x74>
    e12a:	30 e0       	ldi	r19, 0x00	; 0
    e12c:	c3 2f       	mov	r28, r19
    e12e:	d2 2f       	mov	r29, r18
    e130:	1d c0       	rjmp	.+58     	; 0xe16c <mmc_disk_write+0xb4>
    e132:	86 70       	andi	r24, 0x06	; 6
    e134:	29 f0       	breq	.+10     	; 0xe140 <mmc_disk_write+0x88>
    e136:	ae 01       	movw	r20, r28
    e138:	60 e0       	ldi	r22, 0x00	; 0
    e13a:	70 e0       	ldi	r23, 0x00	; 0
    e13c:	87 e9       	ldi	r24, 0x97	; 151
    e13e:	69 de       	rcall	.-814    	; 0xde12 <send_cmd>
    e140:	b7 01       	movw	r22, r14
    e142:	a6 01       	movw	r20, r12
    e144:	89 e1       	ldi	r24, 0x19	; 25
    e146:	65 de       	rcall	.-822    	; 0xde12 <send_cmd>
    e148:	81 11       	cpse	r24, r1
    e14a:	10 c0       	rjmp	.+32     	; 0xe16c <mmc_disk_write+0xb4>
    e14c:	6c ef       	ldi	r22, 0xFC	; 252
    e14e:	c8 01       	movw	r24, r16
    e150:	a3 de       	rcall	.-698    	; 0xde98 <xmit_datablock>
    e152:	89 2b       	or	r24, r25
    e154:	19 f0       	breq	.+6      	; 0xe15c <mmc_disk_write+0xa4>
    e156:	1e 5f       	subi	r17, 0xFE	; 254
    e158:	21 97       	sbiw	r28, 0x01	; 1
    e15a:	c1 f7       	brne	.-16     	; 0xe14c <mmc_disk_write+0x94>
    e15c:	6d ef       	ldi	r22, 0xFD	; 253
    e15e:	80 e0       	ldi	r24, 0x00	; 0
    e160:	90 e0       	ldi	r25, 0x00	; 0
    e162:	9a de       	rcall	.-716    	; 0xde98 <xmit_datablock>
    e164:	89 2b       	or	r24, r25
    e166:	11 f4       	brne	.+4      	; 0xe16c <mmc_disk_write+0xb4>
    e168:	c1 e0       	ldi	r28, 0x01	; 1
    e16a:	d0 e0       	ldi	r29, 0x00	; 0
    e16c:	f6 dd       	rcall	.-1044   	; 0xdd5a <deselect>
    e16e:	81 e0       	ldi	r24, 0x01	; 1
    e170:	90 e0       	ldi	r25, 0x00	; 0
    e172:	cd 2b       	or	r28, r29
    e174:	09 f4       	brne	.+2      	; 0xe178 <mmc_disk_write+0xc0>
    e176:	80 e0       	ldi	r24, 0x00	; 0
    e178:	cd b7       	in	r28, 0x3d	; 61
    e17a:	de b7       	in	r29, 0x3e	; 62
    e17c:	e8 e0       	ldi	r30, 0x08	; 8
    e17e:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000e182 <mmc_disk_ioctl>:
    e182:	a0 e1       	ldi	r26, 0x10	; 16
    e184:	b0 e0       	ldi	r27, 0x00	; 0
    e186:	e7 ec       	ldi	r30, 0xC7	; 199
    e188:	f0 e7       	ldi	r31, 0x70	; 112
    e18a:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    e18e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    e192:	90 fd       	sbrc	r25, 0
    e194:	75 c2       	rjmp	.+1258   	; 0xe680 <mmc_disk_ioctl+0x4fe>
    e196:	8b 01       	movw	r16, r22
    e198:	83 33       	cpi	r24, 0x33	; 51
    e19a:	09 f4       	brne	.+2      	; 0xe19e <mmc_disk_ioctl+0x1c>
    e19c:	4b c1       	rjmp	.+662    	; 0xe434 <mmc_disk_ioctl+0x2b2>
    e19e:	98 f4       	brcc	.+38     	; 0xe1c6 <mmc_disk_ioctl+0x44>
    e1a0:	83 30       	cpi	r24, 0x03	; 3
    e1a2:	09 f4       	brne	.+2      	; 0xe1a6 <mmc_disk_ioctl+0x24>
    e1a4:	84 c0       	rjmp	.+264    	; 0xe2ae <mmc_disk_ioctl+0x12c>
    e1a6:	28 f4       	brcc	.+10     	; 0xe1b2 <mmc_disk_ioctl+0x30>
    e1a8:	88 23       	and	r24, r24
    e1aa:	09 f1       	breq	.+66     	; 0xe1ee <mmc_disk_ioctl+0x6c>
    e1ac:	81 30       	cpi	r24, 0x01	; 1
    e1ae:	09 f1       	breq	.+66     	; 0xe1f2 <mmc_disk_ioctl+0x70>
    e1b0:	69 c2       	rjmp	.+1234   	; 0xe684 <mmc_disk_ioctl+0x502>
    e1b2:	87 30       	cpi	r24, 0x07	; 7
    e1b4:	09 f4       	brne	.+2      	; 0xe1b8 <mmc_disk_ioctl+0x36>
    e1b6:	74 c1       	rjmp	.+744    	; 0xe4a0 <mmc_disk_ioctl+0x31e>
    e1b8:	82 33       	cpi	r24, 0x32	; 50
    e1ba:	09 f4       	brne	.+2      	; 0xe1be <mmc_disk_ioctl+0x3c>
    e1bc:	36 c1       	rjmp	.+620    	; 0xe42a <mmc_disk_ioctl+0x2a8>
    e1be:	84 30       	cpi	r24, 0x04	; 4
    e1c0:	09 f0       	breq	.+2      	; 0xe1c4 <mmc_disk_ioctl+0x42>
    e1c2:	60 c2       	rjmp	.+1216   	; 0xe684 <mmc_disk_ioctl+0x502>
    e1c4:	ec c0       	rjmp	.+472    	; 0xe39e <mmc_disk_ioctl+0x21c>
    e1c6:	86 33       	cpi	r24, 0x36	; 54
    e1c8:	09 f4       	brne	.+2      	; 0xe1cc <mmc_disk_ioctl+0x4a>
    e1ca:	57 c1       	rjmp	.+686    	; 0xe47a <mmc_disk_ioctl+0x2f8>
    e1cc:	38 f4       	brcc	.+14     	; 0xe1dc <mmc_disk_ioctl+0x5a>
    e1ce:	84 33       	cpi	r24, 0x34	; 52
    e1d0:	09 f4       	brne	.+2      	; 0xe1d4 <mmc_disk_ioctl+0x52>
    e1d2:	35 c1       	rjmp	.+618    	; 0xe43e <mmc_disk_ioctl+0x2bc>
    e1d4:	85 33       	cpi	r24, 0x35	; 53
    e1d6:	09 f4       	brne	.+2      	; 0xe1da <mmc_disk_ioctl+0x58>
    e1d8:	3c c1       	rjmp	.+632    	; 0xe452 <mmc_disk_ioctl+0x2d0>
    e1da:	54 c2       	rjmp	.+1192   	; 0xe684 <mmc_disk_ioctl+0x502>
    e1dc:	88 33       	cpi	r24, 0x38	; 56
    e1de:	09 f4       	brne	.+2      	; 0xe1e2 <mmc_disk_ioctl+0x60>
    e1e0:	bf c1       	rjmp	.+894    	; 0xe560 <mmc_disk_ioctl+0x3de>
    e1e2:	08 f4       	brcc	.+2      	; 0xe1e6 <mmc_disk_ioctl+0x64>
    e1e4:	65 c1       	rjmp	.+714    	; 0xe4b0 <mmc_disk_ioctl+0x32e>
    e1e6:	89 33       	cpi	r24, 0x39	; 57
    e1e8:	09 f4       	brne	.+2      	; 0xe1ec <mmc_disk_ioctl+0x6a>
    e1ea:	07 c2       	rjmp	.+1038   	; 0xe5fa <mmc_disk_ioctl+0x478>
    e1ec:	4b c2       	rjmp	.+1174   	; 0xe684 <mmc_disk_ioctl+0x502>
    e1ee:	f4 dd       	rcall	.-1048   	; 0xddd8 <select>
    e1f0:	51 c1       	rjmp	.+674    	; 0xe494 <mmc_disk_ioctl+0x312>
    e1f2:	40 e0       	ldi	r20, 0x00	; 0
    e1f4:	50 e0       	ldi	r21, 0x00	; 0
    e1f6:	ba 01       	movw	r22, r20
    e1f8:	89 e0       	ldi	r24, 0x09	; 9
    e1fa:	0b de       	rcall	.-1002   	; 0xde12 <send_cmd>
    e1fc:	81 11       	cpse	r24, r1
    e1fe:	3c c2       	rjmp	.+1144   	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e200:	60 e1       	ldi	r22, 0x10	; 16
    e202:	70 e0       	ldi	r23, 0x00	; 0
    e204:	ce 01       	movw	r24, r28
    e206:	01 96       	adiw	r24, 0x01	; 1
    e208:	ae dd       	rcall	.-1188   	; 0xdd66 <rcvr_datablock>
    e20a:	89 2b       	or	r24, r25
    e20c:	09 f4       	brne	.+2      	; 0xe210 <mmc_disk_ioctl+0x8e>
    e20e:	34 c2       	rjmp	.+1128   	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e210:	99 81       	ldd	r25, Y+1	; 0x01
    e212:	92 95       	swap	r25
    e214:	96 95       	lsr	r25
    e216:	96 95       	lsr	r25
    e218:	93 70       	andi	r25, 0x03	; 3
    e21a:	29 85       	ldd	r18, Y+9	; 0x09
    e21c:	4a 85       	ldd	r20, Y+10	; 0x0a
    e21e:	88 85       	ldd	r24, Y+8	; 0x08
    e220:	91 30       	cpi	r25, 0x01	; 1
    e222:	d9 f4       	brne	.+54     	; 0xe25a <mmc_disk_ioctl+0xd8>
    e224:	30 e0       	ldi	r19, 0x00	; 0
    e226:	32 2f       	mov	r19, r18
    e228:	22 27       	eor	r18, r18
    e22a:	24 0f       	add	r18, r20
    e22c:	31 1d       	adc	r19, r1
    e22e:	8f 73       	andi	r24, 0x3F	; 63
    e230:	90 e0       	ldi	r25, 0x00	; 0
    e232:	a0 e0       	ldi	r26, 0x00	; 0
    e234:	b0 e0       	ldi	r27, 0x00	; 0
    e236:	dc 01       	movw	r26, r24
    e238:	99 27       	eor	r25, r25
    e23a:	88 27       	eor	r24, r24
    e23c:	01 96       	adiw	r24, 0x01	; 1
    e23e:	a1 1d       	adc	r26, r1
    e240:	b1 1d       	adc	r27, r1
    e242:	82 0f       	add	r24, r18
    e244:	93 1f       	adc	r25, r19
    e246:	a1 1d       	adc	r26, r1
    e248:	b1 1d       	adc	r27, r1
    e24a:	5a e0       	ldi	r21, 0x0A	; 10
    e24c:	88 0f       	add	r24, r24
    e24e:	99 1f       	adc	r25, r25
    e250:	aa 1f       	adc	r26, r26
    e252:	bb 1f       	adc	r27, r27
    e254:	5a 95       	dec	r21
    e256:	d1 f7       	brne	.-12     	; 0xe24c <mmc_disk_ioctl+0xca>
    e258:	9b c0       	rjmp	.+310    	; 0xe390 <mmc_disk_ioctl+0x20e>
    e25a:	22 95       	swap	r18
    e25c:	26 95       	lsr	r18
    e25e:	26 95       	lsr	r18
    e260:	23 70       	andi	r18, 0x03	; 3
    e262:	f4 e0       	ldi	r31, 0x04	; 4
    e264:	8f 9f       	mul	r24, r31
    e266:	c0 01       	movw	r24, r0
    e268:	11 24       	eor	r1, r1
    e26a:	82 0f       	add	r24, r18
    e26c:	91 1d       	adc	r25, r1
    e26e:	01 96       	adiw	r24, 0x01	; 1
    e270:	2f 81       	ldd	r18, Y+7	; 0x07
    e272:	23 70       	andi	r18, 0x03	; 3
    e274:	30 e0       	ldi	r19, 0x00	; 0
    e276:	32 2f       	mov	r19, r18
    e278:	22 27       	eor	r18, r18
    e27a:	33 0f       	add	r19, r19
    e27c:	33 0f       	add	r19, r19
    e27e:	82 0f       	add	r24, r18
    e280:	93 1f       	adc	r25, r19
    e282:	a0 e0       	ldi	r26, 0x00	; 0
    e284:	b0 e0       	ldi	r27, 0x00	; 0
    e286:	2e 81       	ldd	r18, Y+6	; 0x06
    e288:	32 2f       	mov	r19, r18
    e28a:	3f 70       	andi	r19, 0x0F	; 15
    e28c:	2b 85       	ldd	r18, Y+11	; 0x0b
    e28e:	22 1f       	adc	r18, r18
    e290:	22 27       	eor	r18, r18
    e292:	22 1f       	adc	r18, r18
    e294:	23 0f       	add	r18, r19
    e296:	43 70       	andi	r20, 0x03	; 3
    e298:	44 0f       	add	r20, r20
    e29a:	42 0f       	add	r20, r18
    e29c:	47 50       	subi	r20, 0x07	; 7
    e29e:	04 c0       	rjmp	.+8      	; 0xe2a8 <mmc_disk_ioctl+0x126>
    e2a0:	88 0f       	add	r24, r24
    e2a2:	99 1f       	adc	r25, r25
    e2a4:	aa 1f       	adc	r26, r26
    e2a6:	bb 1f       	adc	r27, r27
    e2a8:	4a 95       	dec	r20
    e2aa:	d2 f7       	brpl	.-12     	; 0xe2a0 <mmc_disk_ioctl+0x11e>
    e2ac:	71 c0       	rjmp	.+226    	; 0xe390 <mmc_disk_ioctl+0x20e>
    e2ae:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e2b2:	40 e0       	ldi	r20, 0x00	; 0
    e2b4:	50 e0       	ldi	r21, 0x00	; 0
    e2b6:	ba 01       	movw	r22, r20
    e2b8:	82 ff       	sbrs	r24, 2
    e2ba:	24 c0       	rjmp	.+72     	; 0xe304 <mmc_disk_ioctl+0x182>
    e2bc:	8d e8       	ldi	r24, 0x8D	; 141
    e2be:	a9 dd       	rcall	.-1198   	; 0xde12 <send_cmd>
    e2c0:	81 11       	cpse	r24, r1
    e2c2:	da c1       	rjmp	.+948    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e2c4:	8f ef       	ldi	r24, 0xFF	; 255
    e2c6:	47 dd       	rcall	.-1394   	; 0xdd56 <xchg_spi>
    e2c8:	60 e1       	ldi	r22, 0x10	; 16
    e2ca:	70 e0       	ldi	r23, 0x00	; 0
    e2cc:	ce 01       	movw	r24, r28
    e2ce:	01 96       	adiw	r24, 0x01	; 1
    e2d0:	4a dd       	rcall	.-1388   	; 0xdd66 <rcvr_datablock>
    e2d2:	89 2b       	or	r24, r25
    e2d4:	09 f4       	brne	.+2      	; 0xe2d8 <mmc_disk_ioctl+0x156>
    e2d6:	d0 c1       	rjmp	.+928    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e2d8:	a0 e3       	ldi	r26, 0x30	; 48
    e2da:	fa 2e       	mov	r15, r26
    e2dc:	8f ef       	ldi	r24, 0xFF	; 255
    e2de:	3b dd       	rcall	.-1418   	; 0xdd56 <xchg_spi>
    e2e0:	fa 94       	dec	r15
    e2e2:	f1 10       	cpse	r15, r1
    e2e4:	fb cf       	rjmp	.-10     	; 0xe2dc <mmc_disk_ioctl+0x15a>
    e2e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    e2e8:	22 95       	swap	r18
    e2ea:	2f 70       	andi	r18, 0x0F	; 15
    e2ec:	80 e1       	ldi	r24, 0x10	; 16
    e2ee:	90 e0       	ldi	r25, 0x00	; 0
    e2f0:	a0 e0       	ldi	r26, 0x00	; 0
    e2f2:	b0 e0       	ldi	r27, 0x00	; 0
    e2f4:	04 c0       	rjmp	.+8      	; 0xe2fe <mmc_disk_ioctl+0x17c>
    e2f6:	88 0f       	add	r24, r24
    e2f8:	99 1f       	adc	r25, r25
    e2fa:	aa 1f       	adc	r26, r26
    e2fc:	bb 1f       	adc	r27, r27
    e2fe:	2a 95       	dec	r18
    e300:	d2 f7       	brpl	.-12     	; 0xe2f6 <mmc_disk_ioctl+0x174>
    e302:	46 c0       	rjmp	.+140    	; 0xe390 <mmc_disk_ioctl+0x20e>
    e304:	89 e0       	ldi	r24, 0x09	; 9
    e306:	85 dd       	rcall	.-1270   	; 0xde12 <send_cmd>
    e308:	81 11       	cpse	r24, r1
    e30a:	b6 c1       	rjmp	.+876    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e30c:	60 e1       	ldi	r22, 0x10	; 16
    e30e:	70 e0       	ldi	r23, 0x00	; 0
    e310:	ce 01       	movw	r24, r28
    e312:	01 96       	adiw	r24, 0x01	; 1
    e314:	28 dd       	rcall	.-1456   	; 0xdd66 <rcvr_datablock>
    e316:	89 2b       	or	r24, r25
    e318:	09 f4       	brne	.+2      	; 0xe31c <mmc_disk_ioctl+0x19a>
    e31a:	ae c1       	rjmp	.+860    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e31c:	90 91 2c 18 	lds	r25, 0x182C	; 0x80182c <CardType>
    e320:	2b 85       	ldd	r18, Y+11	; 0x0b
    e322:	8c 85       	ldd	r24, Y+12	; 0x0c
    e324:	91 ff       	sbrs	r25, 1
    e326:	16 c0       	rjmp	.+44     	; 0xe354 <mmc_disk_ioctl+0x1d2>
    e328:	2f 73       	andi	r18, 0x3F	; 63
    e32a:	88 1f       	adc	r24, r24
    e32c:	88 27       	eor	r24, r24
    e32e:	88 1f       	adc	r24, r24
    e330:	90 e0       	ldi	r25, 0x00	; 0
    e332:	01 96       	adiw	r24, 0x01	; 1
    e334:	82 0f       	add	r24, r18
    e336:	91 1d       	adc	r25, r1
    e338:	82 0f       	add	r24, r18
    e33a:	91 1d       	adc	r25, r1
    e33c:	2e 85       	ldd	r18, Y+14	; 0x0e
    e33e:	22 95       	swap	r18
    e340:	26 95       	lsr	r18
    e342:	26 95       	lsr	r18
    e344:	23 70       	andi	r18, 0x03	; 3
    e346:	21 50       	subi	r18, 0x01	; 1
    e348:	02 c0       	rjmp	.+4      	; 0xe34e <mmc_disk_ioctl+0x1cc>
    e34a:	88 0f       	add	r24, r24
    e34c:	99 1f       	adc	r25, r25
    e34e:	2a 95       	dec	r18
    e350:	e2 f7       	brpl	.-8      	; 0xe34a <mmc_disk_ioctl+0x1c8>
    e352:	1c c0       	rjmp	.+56     	; 0xe38c <mmc_disk_ioctl+0x20a>
    e354:	38 2f       	mov	r19, r24
    e356:	33 70       	andi	r19, 0x03	; 3
    e358:	82 95       	swap	r24
    e35a:	86 95       	lsr	r24
    e35c:	87 70       	andi	r24, 0x07	; 7
    e35e:	90 e0       	ldi	r25, 0x00	; 0
    e360:	f8 e0       	ldi	r31, 0x08	; 8
    e362:	3f 9f       	mul	r19, r31
    e364:	80 0d       	add	r24, r0
    e366:	91 1d       	adc	r25, r1
    e368:	11 24       	eor	r1, r1
    e36a:	01 96       	adiw	r24, 0x01	; 1
    e36c:	2c 77       	andi	r18, 0x7C	; 124
    e36e:	30 e0       	ldi	r19, 0x00	; 0
    e370:	35 95       	asr	r19
    e372:	27 95       	ror	r18
    e374:	35 95       	asr	r19
    e376:	27 95       	ror	r18
    e378:	2f 5f       	subi	r18, 0xFF	; 255
    e37a:	3f 4f       	sbci	r19, 0xFF	; 255
    e37c:	82 9f       	mul	r24, r18
    e37e:	a0 01       	movw	r20, r0
    e380:	83 9f       	mul	r24, r19
    e382:	50 0d       	add	r21, r0
    e384:	92 9f       	mul	r25, r18
    e386:	50 0d       	add	r21, r0
    e388:	11 24       	eor	r1, r1
    e38a:	ca 01       	movw	r24, r20
    e38c:	a0 e0       	ldi	r26, 0x00	; 0
    e38e:	b0 e0       	ldi	r27, 0x00	; 0
    e390:	f8 01       	movw	r30, r16
    e392:	80 83       	st	Z, r24
    e394:	91 83       	std	Z+1, r25	; 0x01
    e396:	a2 83       	std	Z+2, r26	; 0x02
    e398:	b3 83       	std	Z+3, r27	; 0x03
    e39a:	00 e0       	ldi	r16, 0x00	; 0
    e39c:	6e c1       	rjmp	.+732    	; 0xe67a <mmc_disk_ioctl+0x4f8>
    e39e:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e3a2:	86 70       	andi	r24, 0x06	; 6
    e3a4:	11 f4       	brne	.+4      	; 0xe3aa <mmc_disk_ioctl+0x228>
    e3a6:	01 e0       	ldi	r16, 0x01	; 1
    e3a8:	6e c1       	rjmp	.+732    	; 0xe686 <mmc_disk_ioctl+0x504>
    e3aa:	be 01       	movw	r22, r28
    e3ac:	6f 5f       	subi	r22, 0xFF	; 255
    e3ae:	7f 4f       	sbci	r23, 0xFF	; 255
    e3b0:	83 e3       	ldi	r24, 0x33	; 51
    e3b2:	e7 de       	rcall	.-562    	; 0xe182 <mmc_disk_ioctl>
    e3b4:	89 2b       	or	r24, r25
    e3b6:	b9 f7       	brne	.-18     	; 0xe3a6 <mmc_disk_ioctl+0x224>
    e3b8:	89 81       	ldd	r24, Y+1	; 0x01
    e3ba:	82 95       	swap	r24
    e3bc:	86 95       	lsr	r24
    e3be:	86 95       	lsr	r24
    e3c0:	83 70       	andi	r24, 0x03	; 3
    e3c2:	19 f4       	brne	.+6      	; 0xe3ca <mmc_disk_ioctl+0x248>
    e3c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    e3c6:	86 ff       	sbrs	r24, 6
    e3c8:	ee cf       	rjmp	.-36     	; 0xe3a6 <mmc_disk_ioctl+0x224>
    e3ca:	f8 01       	movw	r30, r16
    e3cc:	40 81       	ld	r20, Z
    e3ce:	51 81       	ldd	r21, Z+1	; 0x01
    e3d0:	62 81       	ldd	r22, Z+2	; 0x02
    e3d2:	73 81       	ldd	r23, Z+3	; 0x03
    e3d4:	c4 80       	ldd	r12, Z+4	; 0x04
    e3d6:	d5 80       	ldd	r13, Z+5	; 0x05
    e3d8:	e6 80       	ldd	r14, Z+6	; 0x06
    e3da:	f7 80       	ldd	r15, Z+7	; 0x07
    e3dc:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e3e0:	83 fd       	sbrc	r24, 3
    e3e2:	0e c0       	rjmp	.+28     	; 0xe400 <mmc_disk_ioctl+0x27e>
    e3e4:	39 e0       	ldi	r19, 0x09	; 9
    e3e6:	44 0f       	add	r20, r20
    e3e8:	55 1f       	adc	r21, r21
    e3ea:	66 1f       	adc	r22, r22
    e3ec:	77 1f       	adc	r23, r23
    e3ee:	3a 95       	dec	r19
    e3f0:	d1 f7       	brne	.-12     	; 0xe3e6 <mmc_disk_ioctl+0x264>
    e3f2:	e9 e0       	ldi	r30, 0x09	; 9
    e3f4:	cc 0c       	add	r12, r12
    e3f6:	dd 1c       	adc	r13, r13
    e3f8:	ee 1c       	adc	r14, r14
    e3fa:	ff 1c       	adc	r15, r15
    e3fc:	ea 95       	dec	r30
    e3fe:	d1 f7       	brne	.-12     	; 0xe3f4 <mmc_disk_ioctl+0x272>
    e400:	80 e2       	ldi	r24, 0x20	; 32
    e402:	07 dd       	rcall	.-1522   	; 0xde12 <send_cmd>
    e404:	81 11       	cpse	r24, r1
    e406:	38 c1       	rjmp	.+624    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e408:	b7 01       	movw	r22, r14
    e40a:	a6 01       	movw	r20, r12
    e40c:	81 e2       	ldi	r24, 0x21	; 33
    e40e:	01 dd       	rcall	.-1534   	; 0xde12 <send_cmd>
    e410:	81 11       	cpse	r24, r1
    e412:	32 c1       	rjmp	.+612    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e414:	40 e0       	ldi	r20, 0x00	; 0
    e416:	50 e0       	ldi	r21, 0x00	; 0
    e418:	ba 01       	movw	r22, r20
    e41a:	86 e2       	ldi	r24, 0x26	; 38
    e41c:	fa dc       	rcall	.-1548   	; 0xde12 <send_cmd>
    e41e:	81 11       	cpse	r24, r1
    e420:	2b c1       	rjmp	.+598    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e422:	80 e3       	ldi	r24, 0x30	; 48
    e424:	95 e7       	ldi	r25, 0x75	; 117
    e426:	c6 dc       	rcall	.-1652   	; 0xddb4 <wait_ready>
    e428:	35 c0       	rjmp	.+106    	; 0xe494 <mmc_disk_ioctl+0x312>
    e42a:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <CardType>
    e42e:	fb 01       	movw	r30, r22
    e430:	80 83       	st	Z, r24
    e432:	3c c0       	rjmp	.+120    	; 0xe4ac <mmc_disk_ioctl+0x32a>
    e434:	40 e0       	ldi	r20, 0x00	; 0
    e436:	50 e0       	ldi	r21, 0x00	; 0
    e438:	ba 01       	movw	r22, r20
    e43a:	89 e0       	ldi	r24, 0x09	; 9
    e43c:	04 c0       	rjmp	.+8      	; 0xe446 <mmc_disk_ioctl+0x2c4>
    e43e:	40 e0       	ldi	r20, 0x00	; 0
    e440:	50 e0       	ldi	r21, 0x00	; 0
    e442:	ba 01       	movw	r22, r20
    e444:	8a e0       	ldi	r24, 0x0A	; 10
    e446:	e5 dc       	rcall	.-1590   	; 0xde12 <send_cmd>
    e448:	81 11       	cpse	r24, r1
    e44a:	16 c1       	rjmp	.+556    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e44c:	60 e1       	ldi	r22, 0x10	; 16
    e44e:	70 e0       	ldi	r23, 0x00	; 0
    e450:	1f c0       	rjmp	.+62     	; 0xe490 <mmc_disk_ioctl+0x30e>
    e452:	40 e0       	ldi	r20, 0x00	; 0
    e454:	50 e0       	ldi	r21, 0x00	; 0
    e456:	ba 01       	movw	r22, r20
    e458:	8a e3       	ldi	r24, 0x3A	; 58
    e45a:	db dc       	rcall	.-1610   	; 0xde12 <send_cmd>
    e45c:	81 11       	cpse	r24, r1
    e45e:	0c c1       	rjmp	.+536    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e460:	78 01       	movw	r14, r16
    e462:	f4 e0       	ldi	r31, 0x04	; 4
    e464:	ef 0e       	add	r14, r31
    e466:	f1 1c       	adc	r15, r1
    e468:	8f ef       	ldi	r24, 0xFF	; 255
    e46a:	8d d1       	rcall	.+794    	; 0xe786 <mmc_spi_TXRX>
    e46c:	f8 01       	movw	r30, r16
    e46e:	81 93       	st	Z+, r24
    e470:	8f 01       	movw	r16, r30
    e472:	ee 15       	cp	r30, r14
    e474:	ff 05       	cpc	r31, r15
    e476:	c1 f7       	brne	.-16     	; 0xe468 <mmc_disk_ioctl+0x2e6>
    e478:	90 cf       	rjmp	.-224    	; 0xe39a <mmc_disk_ioctl+0x218>
    e47a:	40 e0       	ldi	r20, 0x00	; 0
    e47c:	50 e0       	ldi	r21, 0x00	; 0
    e47e:	ba 01       	movw	r22, r20
    e480:	8d e8       	ldi	r24, 0x8D	; 141
    e482:	c7 dc       	rcall	.-1650   	; 0xde12 <send_cmd>
    e484:	81 11       	cpse	r24, r1
    e486:	f8 c0       	rjmp	.+496    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e488:	8f ef       	ldi	r24, 0xFF	; 255
    e48a:	65 dc       	rcall	.-1846   	; 0xdd56 <xchg_spi>
    e48c:	60 e4       	ldi	r22, 0x40	; 64
    e48e:	70 e0       	ldi	r23, 0x00	; 0
    e490:	c8 01       	movw	r24, r16
    e492:	69 dc       	rcall	.-1838   	; 0xdd66 <rcvr_datablock>
    e494:	01 e0       	ldi	r16, 0x01	; 1
    e496:	10 e0       	ldi	r17, 0x00	; 0
    e498:	89 2b       	or	r24, r25
    e49a:	09 f4       	brne	.+2      	; 0xe49e <mmc_disk_ioctl+0x31c>
    e49c:	ef c0       	rjmp	.+478    	; 0xe67c <mmc_disk_ioctl+0x4fa>
    e49e:	ea c0       	rjmp	.+468    	; 0xe674 <mmc_disk_ioctl+0x4f2>
    e4a0:	40 d2       	rcall	.+1152   	; 0xe922 <mmc_power_off>
    e4a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e4a6:	81 60       	ori	r24, 0x01	; 1
    e4a8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e4ac:	00 e0       	ldi	r16, 0x00	; 0
    e4ae:	eb c0       	rjmp	.+470    	; 0xe686 <mmc_disk_ioctl+0x504>
    e4b0:	fb 01       	movw	r30, r22
    e4b2:	43 81       	ldd	r20, Z+3	; 0x03
    e4b4:	54 81       	ldd	r21, Z+4	; 0x04
    e4b6:	65 81       	ldd	r22, Z+5	; 0x05
    e4b8:	76 81       	ldd	r23, Z+6	; 0x06
    e4ba:	39 e0       	ldi	r19, 0x09	; 9
    e4bc:	44 0f       	add	r20, r20
    e4be:	55 1f       	adc	r21, r21
    e4c0:	66 1f       	adc	r22, r22
    e4c2:	77 1f       	adc	r23, r23
    e4c4:	3a 95       	dec	r19
    e4c6:	d1 f7       	brne	.-12     	; 0xe4bc <mmc_disk_ioctl+0x33a>
    e4c8:	70 68       	ori	r23, 0x80	; 128
    e4ca:	80 81       	ld	r24, Z
    e4cc:	90 e0       	ldi	r25, 0x00	; 0
    e4ce:	a0 e0       	ldi	r26, 0x00	; 0
    e4d0:	b0 e0       	ldi	r27, 0x00	; 0
    e4d2:	2c e1       	ldi	r18, 0x1C	; 28
    e4d4:	88 0f       	add	r24, r24
    e4d6:	99 1f       	adc	r25, r25
    e4d8:	aa 1f       	adc	r26, r26
    e4da:	bb 1f       	adc	r27, r27
    e4dc:	2a 95       	dec	r18
    e4de:	d1 f7       	brne	.-12     	; 0xe4d4 <mmc_disk_ioctl+0x352>
    e4e0:	48 2b       	or	r20, r24
    e4e2:	59 2b       	or	r21, r25
    e4e4:	6a 2b       	or	r22, r26
    e4e6:	7b 2b       	or	r23, r27
    e4e8:	81 81       	ldd	r24, Z+1	; 0x01
    e4ea:	92 81       	ldd	r25, Z+2	; 0x02
    e4ec:	01 97       	sbiw	r24, 0x01	; 1
    e4ee:	91 70       	andi	r25, 0x01	; 1
    e4f0:	a0 e0       	ldi	r26, 0x00	; 0
    e4f2:	b0 e0       	ldi	r27, 0x00	; 0
    e4f4:	48 2b       	or	r20, r24
    e4f6:	59 2b       	or	r21, r25
    e4f8:	6a 2b       	or	r22, r26
    e4fa:	7b 2b       	or	r23, r27
    e4fc:	80 e3       	ldi	r24, 0x30	; 48
    e4fe:	89 dc       	rcall	.-1774   	; 0xde12 <send_cmd>
    e500:	81 11       	cpse	r24, r1
    e502:	ba c0       	rjmp	.+372    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e504:	88 ee       	ldi	r24, 0xE8	; 232
    e506:	93 e0       	ldi	r25, 0x03	; 3
    e508:	41 d1       	rcall	.+642    	; 0xe78c <mmc_set_ms_timeout>
    e50a:	8f ef       	ldi	r24, 0xFF	; 255
    e50c:	3c d1       	rcall	.+632    	; 0xe786 <mmc_spi_TXRX>
    e50e:	8f 3f       	cpi	r24, 0xFF	; 255
    e510:	21 f4       	brne	.+8      	; 0xe51a <mmc_disk_ioctl+0x398>
    e512:	43 d1       	rcall	.+646    	; 0xe79a <mmc_test_timeout>
    e514:	89 2b       	or	r24, r25
    e516:	c9 f3       	breq	.-14     	; 0xe50a <mmc_disk_ioctl+0x388>
    e518:	af c0       	rjmp	.+350    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e51a:	8e 3f       	cpi	r24, 0xFE	; 254
    e51c:	09 f0       	breq	.+2      	; 0xe520 <mmc_disk_ioctl+0x39e>
    e51e:	ac c0       	rjmp	.+344    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e520:	f8 01       	movw	r30, r16
    e522:	e7 80       	ldd	r14, Z+7	; 0x07
    e524:	f0 84       	ldd	r15, Z+8	; 0x08
    e526:	c1 80       	ldd	r12, Z+1	; 0x01
    e528:	d2 80       	ldd	r13, Z+2	; 0x02
    e52a:	ce 0c       	add	r12, r14
    e52c:	df 1c       	adc	r13, r15
    e52e:	ce 14       	cp	r12, r14
    e530:	df 04       	cpc	r13, r15
    e532:	31 f0       	breq	.+12     	; 0xe540 <mmc_disk_ioctl+0x3be>
    e534:	8f ef       	ldi	r24, 0xFF	; 255
    e536:	27 d1       	rcall	.+590    	; 0xe786 <mmc_spi_TXRX>
    e538:	f7 01       	movw	r30, r14
    e53a:	81 93       	st	Z+, r24
    e53c:	7f 01       	movw	r14, r30
    e53e:	f7 cf       	rjmp	.-18     	; 0xe52e <mmc_disk_ioctl+0x3ac>
    e540:	f8 01       	movw	r30, r16
    e542:	81 81       	ldd	r24, Z+1	; 0x01
    e544:	92 81       	ldd	r25, Z+2	; 0x02
    e546:	02 e0       	ldi	r16, 0x02	; 2
    e548:	12 e0       	ldi	r17, 0x02	; 2
    e54a:	08 1b       	sub	r16, r24
    e54c:	19 0b       	sbc	r17, r25
    e54e:	01 15       	cp	r16, r1
    e550:	11 05       	cpc	r17, r1
    e552:	09 f4       	brne	.+2      	; 0xe556 <mmc_disk_ioctl+0x3d4>
    e554:	22 cf       	rjmp	.-444    	; 0xe39a <mmc_disk_ioctl+0x218>
    e556:	8f ef       	ldi	r24, 0xFF	; 255
    e558:	fe db       	rcall	.-2052   	; 0xdd56 <xchg_spi>
    e55a:	01 50       	subi	r16, 0x01	; 1
    e55c:	11 09       	sbc	r17, r1
    e55e:	f7 cf       	rjmp	.-18     	; 0xe54e <mmc_disk_ioctl+0x3cc>
    e560:	fb 01       	movw	r30, r22
    e562:	43 81       	ldd	r20, Z+3	; 0x03
    e564:	54 81       	ldd	r21, Z+4	; 0x04
    e566:	65 81       	ldd	r22, Z+5	; 0x05
    e568:	76 81       	ldd	r23, Z+6	; 0x06
    e56a:	39 e0       	ldi	r19, 0x09	; 9
    e56c:	44 0f       	add	r20, r20
    e56e:	55 1f       	adc	r21, r21
    e570:	66 1f       	adc	r22, r22
    e572:	77 1f       	adc	r23, r23
    e574:	3a 95       	dec	r19
    e576:	d1 f7       	brne	.-12     	; 0xe56c <mmc_disk_ioctl+0x3ea>
    e578:	70 68       	ori	r23, 0x80	; 128
    e57a:	80 81       	ld	r24, Z
    e57c:	90 e0       	ldi	r25, 0x00	; 0
    e57e:	a0 e0       	ldi	r26, 0x00	; 0
    e580:	b0 e0       	ldi	r27, 0x00	; 0
    e582:	2c e1       	ldi	r18, 0x1C	; 28
    e584:	88 0f       	add	r24, r24
    e586:	99 1f       	adc	r25, r25
    e588:	aa 1f       	adc	r26, r26
    e58a:	bb 1f       	adc	r27, r27
    e58c:	2a 95       	dec	r18
    e58e:	d1 f7       	brne	.-12     	; 0xe584 <mmc_disk_ioctl+0x402>
    e590:	48 2b       	or	r20, r24
    e592:	59 2b       	or	r21, r25
    e594:	6a 2b       	or	r22, r26
    e596:	7b 2b       	or	r23, r27
    e598:	81 81       	ldd	r24, Z+1	; 0x01
    e59a:	92 81       	ldd	r25, Z+2	; 0x02
    e59c:	01 97       	sbiw	r24, 0x01	; 1
    e59e:	91 70       	andi	r25, 0x01	; 1
    e5a0:	a0 e0       	ldi	r26, 0x00	; 0
    e5a2:	b0 e0       	ldi	r27, 0x00	; 0
    e5a4:	48 2b       	or	r20, r24
    e5a6:	59 2b       	or	r21, r25
    e5a8:	6a 2b       	or	r22, r26
    e5aa:	7b 2b       	or	r23, r27
    e5ac:	81 e3       	ldi	r24, 0x31	; 49
    e5ae:	31 dc       	rcall	.-1950   	; 0xde12 <send_cmd>
    e5b0:	81 11       	cpse	r24, r1
    e5b2:	62 c0       	rjmp	.+196    	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e5b4:	8f ef       	ldi	r24, 0xFF	; 255
    e5b6:	cf db       	rcall	.-2146   	; 0xdd56 <xchg_spi>
    e5b8:	8e ef       	ldi	r24, 0xFE	; 254
    e5ba:	cd db       	rcall	.-2150   	; 0xdd56 <xchg_spi>
    e5bc:	f8 01       	movw	r30, r16
    e5be:	e7 80       	ldd	r14, Z+7	; 0x07
    e5c0:	f0 84       	ldd	r15, Z+8	; 0x08
    e5c2:	c1 80       	ldd	r12, Z+1	; 0x01
    e5c4:	d2 80       	ldd	r13, Z+2	; 0x02
    e5c6:	ce 0c       	add	r12, r14
    e5c8:	df 1c       	adc	r13, r15
    e5ca:	ec 14       	cp	r14, r12
    e5cc:	fd 04       	cpc	r15, r13
    e5ce:	29 f0       	breq	.+10     	; 0xe5da <mmc_disk_ioctl+0x458>
    e5d0:	f7 01       	movw	r30, r14
    e5d2:	81 91       	ld	r24, Z+
    e5d4:	7f 01       	movw	r14, r30
    e5d6:	bf db       	rcall	.-2178   	; 0xdd56 <xchg_spi>
    e5d8:	f8 cf       	rjmp	.-16     	; 0xe5ca <mmc_disk_ioctl+0x448>
    e5da:	f8 01       	movw	r30, r16
    e5dc:	81 81       	ldd	r24, Z+1	; 0x01
    e5de:	92 81       	ldd	r25, Z+2	; 0x02
    e5e0:	02 e0       	ldi	r16, 0x02	; 2
    e5e2:	12 e0       	ldi	r17, 0x02	; 2
    e5e4:	08 1b       	sub	r16, r24
    e5e6:	19 0b       	sbc	r17, r25
    e5e8:	8f ef       	ldi	r24, 0xFF	; 255
    e5ea:	01 15       	cp	r16, r1
    e5ec:	11 05       	cpc	r17, r1
    e5ee:	09 f4       	brne	.+2      	; 0xe5f2 <mmc_disk_ioctl+0x470>
    e5f0:	3b c0       	rjmp	.+118    	; 0xe668 <mmc_disk_ioctl+0x4e6>
    e5f2:	b1 db       	rcall	.-2206   	; 0xdd56 <xchg_spi>
    e5f4:	01 50       	subi	r16, 0x01	; 1
    e5f6:	11 09       	sbc	r17, r1
    e5f8:	f7 cf       	rjmp	.-18     	; 0xe5e8 <mmc_disk_ioctl+0x466>
    e5fa:	fb 01       	movw	r30, r22
    e5fc:	43 81       	ldd	r20, Z+3	; 0x03
    e5fe:	54 81       	ldd	r21, Z+4	; 0x04
    e600:	65 81       	ldd	r22, Z+5	; 0x05
    e602:	76 81       	ldd	r23, Z+6	; 0x06
    e604:	89 e0       	ldi	r24, 0x09	; 9
    e606:	44 0f       	add	r20, r20
    e608:	55 1f       	adc	r21, r21
    e60a:	66 1f       	adc	r22, r22
    e60c:	77 1f       	adc	r23, r23
    e60e:	8a 95       	dec	r24
    e610:	d1 f7       	brne	.-12     	; 0xe606 <mmc_disk_ioctl+0x484>
    e612:	74 68       	ori	r23, 0x84	; 132
    e614:	80 81       	ld	r24, Z
    e616:	90 e0       	ldi	r25, 0x00	; 0
    e618:	a0 e0       	ldi	r26, 0x00	; 0
    e61a:	b0 e0       	ldi	r27, 0x00	; 0
    e61c:	2c e1       	ldi	r18, 0x1C	; 28
    e61e:	88 0f       	add	r24, r24
    e620:	99 1f       	adc	r25, r25
    e622:	aa 1f       	adc	r26, r26
    e624:	bb 1f       	adc	r27, r27
    e626:	2a 95       	dec	r18
    e628:	d1 f7       	brne	.-12     	; 0xe61e <mmc_disk_ioctl+0x49c>
    e62a:	48 2b       	or	r20, r24
    e62c:	59 2b       	or	r21, r25
    e62e:	6a 2b       	or	r22, r26
    e630:	7b 2b       	or	r23, r27
    e632:	82 81       	ldd	r24, Z+2	; 0x02
    e634:	90 e0       	ldi	r25, 0x00	; 0
    e636:	a0 e0       	ldi	r26, 0x00	; 0
    e638:	b0 e0       	ldi	r27, 0x00	; 0
    e63a:	48 2b       	or	r20, r24
    e63c:	59 2b       	or	r21, r25
    e63e:	6a 2b       	or	r22, r26
    e640:	7b 2b       	or	r23, r27
    e642:	81 e3       	ldi	r24, 0x31	; 49
    e644:	e6 db       	rcall	.-2100   	; 0xde12 <send_cmd>
    e646:	81 11       	cpse	r24, r1
    e648:	17 c0       	rjmp	.+46     	; 0xe678 <mmc_disk_ioctl+0x4f6>
    e64a:	8f ef       	ldi	r24, 0xFF	; 255
    e64c:	84 db       	rcall	.-2296   	; 0xdd56 <xchg_spi>
    e64e:	8e ef       	ldi	r24, 0xFE	; 254
    e650:	82 db       	rcall	.-2300   	; 0xdd56 <xchg_spi>
    e652:	f8 01       	movw	r30, r16
    e654:	81 81       	ldd	r24, Z+1	; 0x01
    e656:	7f db       	rcall	.-2306   	; 0xdd56 <xchg_spi>
    e658:	01 e0       	ldi	r16, 0x01	; 1
    e65a:	12 e0       	ldi	r17, 0x02	; 2
    e65c:	8f ef       	ldi	r24, 0xFF	; 255
    e65e:	7b db       	rcall	.-2314   	; 0xdd56 <xchg_spi>
    e660:	01 50       	subi	r16, 0x01	; 1
    e662:	11 09       	sbc	r17, r1
    e664:	d9 f7       	brne	.-10     	; 0xe65c <mmc_disk_ioctl+0x4da>
    e666:	8f ef       	ldi	r24, 0xFF	; 255
    e668:	8e d0       	rcall	.+284    	; 0xe786 <mmc_spi_TXRX>
    e66a:	8f 71       	andi	r24, 0x1F	; 31
    e66c:	01 e0       	ldi	r16, 0x01	; 1
    e66e:	10 e0       	ldi	r17, 0x00	; 0
    e670:	85 30       	cpi	r24, 0x05	; 5
    e672:	21 f4       	brne	.+8      	; 0xe67c <mmc_disk_ioctl+0x4fa>
    e674:	00 e0       	ldi	r16, 0x00	; 0
    e676:	02 c0       	rjmp	.+4      	; 0xe67c <mmc_disk_ioctl+0x4fa>
    e678:	01 e0       	ldi	r16, 0x01	; 1
    e67a:	10 e0       	ldi	r17, 0x00	; 0
    e67c:	6e db       	rcall	.-2340   	; 0xdd5a <deselect>
    e67e:	04 c0       	rjmp	.+8      	; 0xe688 <mmc_disk_ioctl+0x506>
    e680:	03 e0       	ldi	r16, 0x03	; 3
    e682:	01 c0       	rjmp	.+2      	; 0xe686 <mmc_disk_ioctl+0x504>
    e684:	04 e0       	ldi	r16, 0x04	; 4
    e686:	10 e0       	ldi	r17, 0x00	; 0
    e688:	c8 01       	movw	r24, r16
    e68a:	60 96       	adiw	r28, 0x10	; 16
    e68c:	e8 e0       	ldi	r30, 0x08	; 8
    e68e:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000e692 <mmc_disk_timerproc>:
    e692:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <Timer1>
    e696:	88 23       	and	r24, r24
    e698:	19 f0       	breq	.+6      	; 0xe6a0 <mmc_disk_timerproc+0xe>
    e69a:	81 50       	subi	r24, 0x01	; 1
    e69c:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <Timer1>
    e6a0:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Timer2>
    e6a4:	88 23       	and	r24, r24
    e6a6:	19 f0       	breq	.+6      	; 0xe6ae <mmc_disk_timerproc+0x1c>
    e6a8:	81 50       	subi	r24, 0x01	; 1
    e6aa:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Timer2>
    e6ae:	08 95       	ret

0000e6b0 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e6b0:	80 91 35 18 	lds	r24, 0x1835	; 0x801835 <_mmc_timeout>
    e6b4:	90 91 36 18 	lds	r25, 0x1836	; 0x801836 <_mmc_timeout+0x1>
    e6b8:	00 97       	sbiw	r24, 0x00	; 0
    e6ba:	29 f0       	breq	.+10     	; 0xe6c6 <mmc_task+0x16>
    e6bc:	01 97       	sbiw	r24, 0x01	; 1
    e6be:	90 93 36 18 	sts	0x1836, r25	; 0x801836 <_mmc_timeout+0x1>
    e6c2:	80 93 35 18 	sts	0x1835, r24	; 0x801835 <_mmc_timeout>
    e6c6:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <_mmc_pre>
    e6ca:	90 91 30 18 	lds	r25, 0x1830	; 0x801830 <_mmc_pre+0x1>
    e6ce:	8a 30       	cpi	r24, 0x0A	; 10
    e6d0:	91 05       	cpc	r25, r1
    e6d2:	30 f4       	brcc	.+12     	; 0xe6e0 <mmc_task+0x30>
    e6d4:	01 96       	adiw	r24, 0x01	; 1
    e6d6:	90 93 30 18 	sts	0x1830, r25	; 0x801830 <_mmc_pre+0x1>
    e6da:	80 93 2f 18 	sts	0x182F, r24	; 0x80182f <_mmc_pre>
    e6de:	08 95       	ret
    e6e0:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_mmc_pre+0x1>
    e6e4:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_pre>
    e6e8:	d4 cf       	rjmp	.-88     	; 0xe692 <mmc_disk_timerproc>
    e6ea:	08 95       	ret

0000e6ec <mmc_install_timer>:
    e6ec:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_timeout+0x1>
    e6f0:	10 92 35 18 	sts	0x1835, r1	; 0x801835 <_mmc_timeout>
    e6f4:	61 e0       	ldi	r22, 0x01	; 1
    e6f6:	70 e0       	ldi	r23, 0x00	; 0
    e6f8:	88 e5       	ldi	r24, 0x58	; 88
    e6fa:	93 e7       	ldi	r25, 0x73	; 115
    e6fc:	0e 94 24 35 	call	0x6a48	; 0x6a48 <set_timers>
    e700:	01 96       	adiw	r24, 0x01	; 1
    e702:	51 f4       	brne	.+20     	; 0xe718 <mmc_install_timer+0x2c>
    e704:	87 e4       	ldi	r24, 0x47	; 71
    e706:	98 e0       	ldi	r25, 0x08	; 8
    e708:	1f 92       	push	r1
    e70a:	9f 93       	push	r25
    e70c:	8f 93       	push	r24
    e70e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e712:	0f 90       	pop	r0
    e714:	0f 90       	pop	r0
    e716:	0f 90       	pop	r0
    e718:	08 95       	ret

0000e71a <mmc_spi_begin>:
    e71a:	60 91 31 18 	lds	r22, 0x1831	; 0x801831 <_mmc_clock>
    e71e:	70 91 32 18 	lds	r23, 0x1832	; 0x801832 <_mmc_clock+0x1>
    e722:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_mmc_clock+0x2>
    e726:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_mmc_clock+0x3>
    e72a:	4b e0       	ldi	r20, 0x0B	; 11
    e72c:	50 e0       	ldi	r21, 0x00	; 0
    e72e:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <spi_begin>
    e732:	08 95       	ret

0000e734 <mmc_spi_end>:
    e734:	8b e0       	ldi	r24, 0x0B	; 11
    e736:	0c 94 8b 28 	jmp	0x5116	; 0x5116 <spi_end>
    e73a:	08 95       	ret

0000e73c <mmc_slow>:
    e73c:	80 e2       	ldi	r24, 0x20	; 32
    e73e:	91 ea       	ldi	r25, 0xA1	; 161
    e740:	a7 e0       	ldi	r26, 0x07	; 7
    e742:	b0 e0       	ldi	r27, 0x00	; 0
    e744:	80 93 31 18 	sts	0x1831, r24	; 0x801831 <_mmc_clock>
    e748:	90 93 32 18 	sts	0x1832, r25	; 0x801832 <_mmc_clock+0x1>
    e74c:	a0 93 33 18 	sts	0x1833, r26	; 0x801833 <_mmc_clock+0x2>
    e750:	b0 93 34 18 	sts	0x1834, r27	; 0x801834 <_mmc_clock+0x3>
    e754:	08 95       	ret

0000e756 <mmc_spi_init>:
    e756:	8b e0       	ldi	r24, 0x0B	; 11
    e758:	0e 94 89 28 	call	0x5112	; 0x5112 <chip_select_init>
    e75c:	ef cf       	rjmp	.-34     	; 0xe73c <mmc_slow>
    e75e:	08 95       	ret

0000e760 <mmc_fast>:
    e760:	80 ea       	ldi	r24, 0xA0	; 160
    e762:	95 e2       	ldi	r25, 0x25	; 37
    e764:	a6 e2       	ldi	r26, 0x26	; 38
    e766:	b0 e0       	ldi	r27, 0x00	; 0
    e768:	80 93 31 18 	sts	0x1831, r24	; 0x801831 <_mmc_clock>
    e76c:	90 93 32 18 	sts	0x1832, r25	; 0x801832 <_mmc_clock+0x1>
    e770:	a0 93 33 18 	sts	0x1833, r26	; 0x801833 <_mmc_clock+0x2>
    e774:	b0 93 34 18 	sts	0x1834, r27	; 0x801834 <_mmc_clock+0x3>
    e778:	08 95       	ret

0000e77a <mmc_spi_TX_buffer>:
    e77a:	0c 94 ad 28 	jmp	0x515a	; 0x515a <spi_TX_buffer>
    e77e:	08 95       	ret

0000e780 <mmc_spi_RX_buffer>:
    e780:	0c 94 af 28 	jmp	0x515e	; 0x515e <spi_RX_buffer>
    e784:	08 95       	ret

0000e786 <mmc_spi_TXRX>:
    e786:	0c 94 1d 29 	jmp	0x523a	; 0x523a <spi_TXRX>
    e78a:	08 95       	ret

0000e78c <mmc_set_ms_timeout>:
    e78c:	f8 94       	cli
    e78e:	90 93 36 18 	sts	0x1836, r25	; 0x801836 <_mmc_timeout+0x1>
    e792:	80 93 35 18 	sts	0x1835, r24	; 0x801835 <_mmc_timeout>
    e796:	78 94       	sei
    e798:	08 95       	ret

0000e79a <mmc_test_timeout>:
    e79a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e79e:	81 fd       	sbrc	r24, 1
    e7a0:	15 c0       	rjmp	.+42     	; 0xe7cc <mmc_test_timeout+0x32>
    e7a2:	80 91 35 18 	lds	r24, 0x1835	; 0x801835 <_mmc_timeout>
    e7a6:	90 91 36 18 	lds	r25, 0x1836	; 0x801836 <_mmc_timeout+0x1>
    e7aa:	89 2b       	or	r24, r25
    e7ac:	91 f4       	brne	.+36     	; 0xe7d2 <mmc_test_timeout+0x38>
    e7ae:	8a e3       	ldi	r24, 0x3A	; 58
    e7b0:	98 e0       	ldi	r25, 0x08	; 8
    e7b2:	1f 92       	push	r1
    e7b4:	9f 93       	push	r25
    e7b6:	8f 93       	push	r24
    e7b8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e7bc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e7c0:	83 60       	ori	r24, 0x03	; 3
    e7c2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e7c6:	0f 90       	pop	r0
    e7c8:	0f 90       	pop	r0
    e7ca:	0f 90       	pop	r0
    e7cc:	81 e0       	ldi	r24, 0x01	; 1
    e7ce:	90 e0       	ldi	r25, 0x00	; 0
    e7d0:	08 95       	ret
    e7d2:	80 e0       	ldi	r24, 0x00	; 0
    e7d4:	90 e0       	ldi	r25, 0x00	; 0
    e7d6:	08 95       	ret

0000e7d8 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e7d8:	a4 e0       	ldi	r26, 0x04	; 4
    e7da:	b0 e0       	ldi	r27, 0x00	; 0
    e7dc:	e2 ef       	ldi	r30, 0xF2	; 242
    e7de:	f3 e7       	ldi	r31, 0x73	; 115
    e7e0:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
    e7e4:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e7e6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e7ea:	b5 df       	rcall	.-150    	; 0xe756 <mmc_spi_init>
    e7ec:	e1 14       	cp	r14, r1
    e7ee:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e7f0:	51 f0       	breq	.+20     	; 0xe806 <mmc_init+0x2e>
    e7f2:	8a e2       	ldi	r24, 0x2A	; 42
    e7f4:	98 e0       	ldi	r25, 0x08	; 8
    e7f6:	1f 92       	push	r1
    e7f8:	9f 93       	push	r25
    e7fa:	8f 93       	push	r24
    e7fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e800:	0f 90       	pop	r0
    e802:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e804:	0f 90       	pop	r0
    e806:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <mmc_init_flag>
    e80a:	90 91 38 18 	lds	r25, 0x1838	; 0x801838 <mmc_init_flag+0x1>
        mmc_install_timer();
    e80e:	89 2b       	or	r24, r25
    e810:	09 f4       	brne	.+2      	; 0xe814 <mmc_init+0x3c>

    if( verbose)
    e812:	6c df       	rcall	.-296    	; 0xe6ec <mmc_install_timer>
    e814:	e1 14       	cp	r14, r1
    e816:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e818:	b9 f0       	breq	.+46     	; 0xe848 <mmc_init+0x70>
    e81a:	8e e1       	ldi	r24, 0x1E	; 30
    e81c:	98 e0       	ldi	r25, 0x08	; 8
    e81e:	1f 92       	push	r1
    e820:	9f 93       	push	r25
    e822:	8f 93       	push	r24
    e824:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e828:	81 e0       	ldi	r24, 0x01	; 1
    e82a:	8f 93       	push	r24
    e82c:	85 eb       	ldi	r24, 0xB5	; 181
    e82e:	8f 93       	push	r24
    e830:	8d e0       	ldi	r24, 0x0D	; 13
    e832:	98 e0       	ldi	r25, 0x08	; 8
    e834:	1f 92       	push	r1
    e836:	9f 93       	push	r25
    e838:	8f 93       	push	r24
    e83a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e83e:	0f b6       	in	r0, 0x3f	; 63
    e840:	f8 94       	cli
    e842:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e844:	0f be       	out	0x3f, r0	; 63
    e846:	cd bf       	out	0x3d, r28	; 61
    e848:	80 e0       	ldi	r24, 0x00	; 0
    e84a:	55 da       	rcall	.-2902   	; 0xdcf6 <disk_initialize>
    e84c:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e84e:	10 e0       	ldi	r17, 0x00	; 0
    e850:	01 15       	cp	r16, r1
    e852:	11 05       	cpc	r17, r1
    e854:	71 f4       	brne	.+28     	; 0xe872 <mmc_init+0x9a>
    e856:	e1 14       	cp	r14, r1
    e858:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e85a:	59 f4       	brne	.+22     	; 0xe872 <mmc_init+0x9a>
    e85c:	40 e0       	ldi	r20, 0x00	; 0
    e85e:	6c e1       	ldi	r22, 0x1C	; 28
    e860:	78 e0       	ldi	r23, 0x08	; 8
    e862:	83 e8       	ldi	r24, 0x83	; 131
    e864:	9a e1       	ldi	r25, 0x1A	; 26
    e866:	0e 94 4d 58 	call	0xb09a	; 0xb09a <f_mount>
    }

    if( rc != RES_OK || verbose)
    e86a:	8c 01       	movw	r16, r24
    e86c:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e86e:	39 f0       	breq	.+14     	; 0xe87e <mmc_init+0xa6>
    e870:	0a c0       	rjmp	.+20     	; 0xe886 <mmc_init+0xae>
    e872:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e874:	dc d0       	rcall	.+440    	; 0xea2e <put_rc>
    e876:	01 15       	cp	r16, r1
    e878:	11 05       	cpc	r17, r1
    e87a:	29 f4       	brne	.+10     	; 0xe886 <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e87c:	ef cf       	rjmp	.-34     	; 0xe85c <mmc_init+0x84>
    e87e:	e1 14       	cp	r14, r1
    e880:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e882:	09 f4       	brne	.+2      	; 0xe886 <mmc_init+0xae>
    e884:	43 c0       	rjmp	.+134    	; 0xe90c <mmc_init+0x134>
    e886:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e888:	d2 d0       	rcall	.+420    	; 0xea2e <put_rc>
    e88a:	e1 14       	cp	r14, r1
    e88c:	f1 04       	cpc	r15, r1
    e88e:	09 f4       	brne	.+2      	; 0xe892 <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e890:	3d c0       	rjmp	.+122    	; 0xe90c <mmc_init+0x134>
    e892:	19 82       	std	Y+1, r1	; 0x01
    e894:	1a 82       	std	Y+2, r1	; 0x02
    e896:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e898:	1c 82       	std	Y+4, r1	; 0x04
    e89a:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e89c:	11 05       	cpc	r17, r1
    e89e:	61 f5       	brne	.+88     	; 0xe8f8 <mmc_init+0x120>
    e8a0:	ae 01       	movw	r20, r28
    e8a2:	4f 5f       	subi	r20, 0xFF	; 255
    e8a4:	5f 4f       	sbci	r21, 0xFF	; 255
    e8a6:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e8a8:	80 e0       	ldi	r24, 0x00	; 0
    e8aa:	4b da       	rcall	.-2922   	; 0xdd42 <disk_ioctl>
            {
                put_rc( rc );
    e8ac:	8c 01       	movw	r16, r24
    e8ae:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e8b0:	61 f0       	breq	.+24     	; 0xe8ca <mmc_init+0xf2>
    e8b2:	bd d0       	rcall	.+378    	; 0xea2e <put_rc>
    e8b4:	8f ee       	ldi	r24, 0xEF	; 239
    e8b6:	97 e0       	ldi	r25, 0x07	; 7
    e8b8:	1f 92       	push	r1
    e8ba:	9f 93       	push	r25
    e8bc:	8f 93       	push	r24
    e8be:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e8c2:	0f 90       	pop	r0
    e8c4:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e8c6:	0f 90       	pop	r0
    e8c8:	17 c0       	rjmp	.+46     	; 0xe8f8 <mmc_init+0x120>
    e8ca:	8c 81       	ldd	r24, Y+4	; 0x04
    e8cc:	8f 93       	push	r24
    e8ce:	8b 81       	ldd	r24, Y+3	; 0x03
    e8d0:	8f 93       	push	r24
    e8d2:	8a 81       	ldd	r24, Y+2	; 0x02
    e8d4:	8f 93       	push	r24
    e8d6:	89 81       	ldd	r24, Y+1	; 0x01
    e8d8:	8f 93       	push	r24
    e8da:	8a ed       	ldi	r24, 0xDA	; 218
    e8dc:	97 e0       	ldi	r25, 0x07	; 7
    e8de:	1f 92       	push	r1
    e8e0:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e8e2:	8f 93       	push	r24
    e8e4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e8e8:	8c e1       	ldi	r24, 0x1C	; 28
    e8ea:	98 e0       	ldi	r25, 0x08	; 8
    e8ec:	2e d1       	rcall	.+604    	; 0xeb4a <fatfs_status>
    e8ee:	0f b6       	in	r0, 0x3f	; 63
    e8f0:	f8 94       	cli
    e8f2:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e8f4:	0f be       	out	0x3f, r0	; 63
    e8f6:	cd bf       	out	0x3d, r28	; 61
    e8f8:	8c ec       	ldi	r24, 0xCC	; 204
    e8fa:	97 e0       	ldi	r25, 0x07	; 7
    e8fc:	1f 92       	push	r1
    e8fe:	9f 93       	push	r25
    e900:	8f 93       	push	r24
    e902:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    e906:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e908:	0f 90       	pop	r0
    e90a:	0f 90       	pop	r0
    e90c:	81 e0       	ldi	r24, 0x01	; 1
    e90e:	90 e0       	ldi	r25, 0x00	; 0
    e910:	90 93 38 18 	sts	0x1838, r25	; 0x801838 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e914:	80 93 37 18 	sts	0x1837, r24	; 0x801837 <mmc_init_flag>
    e918:	c8 01       	movw	r24, r16
    e91a:	24 96       	adiw	r28, 0x04	; 4
    e91c:	e6 e0       	ldi	r30, 0x06	; 6
    e91e:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000e922 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e922:	08 95       	ret

0000e924 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e924:	81 e0       	ldi	r24, 0x01	; 1
    e926:	90 e0       	ldi	r25, 0x00	; 0
    e928:	08 95       	ret

0000e92a <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e92a:	80 e0       	ldi	r24, 0x00	; 0
    e92c:	90 e0       	ldi	r25, 0x00	; 0
    e92e:	08 95       	ret

0000e930 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e930:	0f 93       	push	r16
    e932:	1f 93       	push	r17
    e934:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e936:	46 81       	ldd	r20, Z+6	; 0x06
    e938:	57 81       	ldd	r21, Z+7	; 0x07
    e93a:	05 2e       	mov	r0, r21
    e93c:	00 0c       	add	r0, r0
    e93e:	66 0b       	sbc	r22, r22
    e940:	77 0b       	sbc	r23, r23
    e942:	ba 01       	movw	r22, r20
    e944:	55 27       	eor	r21, r21
    e946:	44 27       	eor	r20, r20
    e948:	84 81       	ldd	r24, Z+4	; 0x04
    e94a:	95 81       	ldd	r25, Z+5	; 0x05
    e94c:	09 2e       	mov	r0, r25
    e94e:	00 0c       	add	r0, r0
    e950:	aa 0b       	sbc	r26, r26
    e952:	bb 0b       	sbc	r27, r27
    e954:	2b e0       	ldi	r18, 0x0B	; 11
    e956:	88 0f       	add	r24, r24
    e958:	99 1f       	adc	r25, r25
    e95a:	aa 1f       	adc	r26, r26
    e95c:	bb 1f       	adc	r27, r27
    e95e:	2a 95       	dec	r18
    e960:	d1 f7       	brne	.-12     	; 0xe956 <tm_to_fat+0x26>
    e962:	48 2b       	or	r20, r24
    e964:	59 2b       	or	r21, r25
    e966:	6a 2b       	or	r22, r26
    e968:	7b 2b       	or	r23, r27
    e96a:	82 81       	ldd	r24, Z+2	; 0x02
    e96c:	93 81       	ldd	r25, Z+3	; 0x03
    e96e:	09 2e       	mov	r0, r25
    e970:	00 0c       	add	r0, r0
    e972:	aa 0b       	sbc	r26, r26
    e974:	bb 0b       	sbc	r27, r27
    e976:	35 e0       	ldi	r19, 0x05	; 5
    e978:	88 0f       	add	r24, r24
    e97a:	99 1f       	adc	r25, r25
    e97c:	aa 1f       	adc	r26, r26
    e97e:	bb 1f       	adc	r27, r27
    e980:	3a 95       	dec	r19
    e982:	d1 f7       	brne	.-12     	; 0xe978 <tm_to_fat+0x48>
    e984:	48 2b       	or	r20, r24
    e986:	59 2b       	or	r21, r25
    e988:	6a 2b       	or	r22, r26
    e98a:	7b 2b       	or	r23, r27
    e98c:	80 81       	ld	r24, Z
    e98e:	91 81       	ldd	r25, Z+1	; 0x01
    e990:	09 2e       	mov	r0, r25
    e992:	00 0c       	add	r0, r0
    e994:	aa 0b       	sbc	r26, r26
    e996:	bb 0b       	sbc	r27, r27
    e998:	b6 95       	lsr	r27
    e99a:	a7 95       	ror	r26
    e99c:	97 95       	ror	r25
    e99e:	87 95       	ror	r24
    e9a0:	84 2b       	or	r24, r20
    e9a2:	95 2b       	or	r25, r21
    e9a4:	a6 2b       	or	r26, r22
    e9a6:	b7 2b       	or	r27, r23
    e9a8:	02 85       	ldd	r16, Z+10	; 0x0a
    e9aa:	13 85       	ldd	r17, Z+11	; 0x0b
    e9ac:	00 55       	subi	r16, 0x50	; 80
    e9ae:	11 09       	sbc	r17, r1
    e9b0:	01 2e       	mov	r0, r17
    e9b2:	00 0c       	add	r0, r0
    e9b4:	22 0b       	sbc	r18, r18
    e9b6:	33 0b       	sbc	r19, r19
    e9b8:	49 e1       	ldi	r20, 0x19	; 25
    e9ba:	00 0f       	add	r16, r16
    e9bc:	11 1f       	adc	r17, r17
    e9be:	22 1f       	adc	r18, r18
    e9c0:	33 1f       	adc	r19, r19
    e9c2:	4a 95       	dec	r20
    e9c4:	d1 f7       	brne	.-12     	; 0xe9ba <tm_to_fat+0x8a>
    e9c6:	ac 01       	movw	r20, r24
    e9c8:	bd 01       	movw	r22, r26
    e9ca:	40 2b       	or	r20, r16
    e9cc:	51 2b       	or	r21, r17
    e9ce:	62 2b       	or	r22, r18
    e9d0:	73 2b       	or	r23, r19
    e9d2:	80 85       	ldd	r24, Z+8	; 0x08
    e9d4:	91 85       	ldd	r25, Z+9	; 0x09
    e9d6:	09 2e       	mov	r0, r25
    e9d8:	00 0c       	add	r0, r0
    e9da:	aa 0b       	sbc	r26, r26
    e9dc:	bb 0b       	sbc	r27, r27
    e9de:	01 96       	adiw	r24, 0x01	; 1
    e9e0:	a1 1d       	adc	r26, r1
    e9e2:	b1 1d       	adc	r27, r1
    e9e4:	e5 e1       	ldi	r30, 0x15	; 21
    e9e6:	88 0f       	add	r24, r24
    e9e8:	99 1f       	adc	r25, r25
    e9ea:	aa 1f       	adc	r26, r26
    e9ec:	bb 1f       	adc	r27, r27
    e9ee:	ea 95       	dec	r30
    e9f0:	d1 f7       	brne	.-12     	; 0xe9e6 <tm_to_fat+0xb6>
    e9f2:	8a 01       	movw	r16, r20
    e9f4:	9b 01       	movw	r18, r22
    e9f6:	08 2b       	or	r16, r24
    e9f8:	19 2b       	or	r17, r25
    e9fa:	2a 2b       	or	r18, r26
    e9fc:	3b 2b       	or	r19, r27
    e9fe:	c9 01       	movw	r24, r18
    ea00:	b8 01       	movw	r22, r16
}
    ea02:	1f 91       	pop	r17
    ea04:	0f 91       	pop	r16
    ea06:	08 95       	ret

0000ea08 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    ea08:	a4 e0       	ldi	r26, 0x04	; 4
    ea0a:	b0 e0       	ldi	r27, 0x00	; 0
    ea0c:	ea e0       	ldi	r30, 0x0A	; 10
    ea0e:	f5 e7       	ldi	r31, 0x75	; 117
    ea10:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    ea14:	ce 01       	movw	r24, r28
    ea16:	01 96       	adiw	r24, 0x01	; 1
    ea18:	0e 94 5f 38 	call	0x70be	; 0x70be <time>
    return( tm_to_fat(localtime(&t)));
    ea1c:	ce 01       	movw	r24, r28
    ea1e:	01 96       	adiw	r24, 0x01	; 1
    ea20:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <localtime>
    ea24:	85 df       	rcall	.-246    	; 0xe930 <tm_to_fat>
}
    ea26:	24 96       	adiw	r28, 0x04	; 4
    ea28:	e2 e0       	ldi	r30, 0x02	; 2
    ea2a:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000ea2e <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    ea2e:	9f 93       	push	r25
    ea30:	8f 93       	push	r24
    ea32:	87 e5       	ldi	r24, 0x57	; 87
    ea34:	9a e0       	ldi	r25, 0x0A	; 10
    ea36:	1f 92       	push	r1
    ea38:	9f 93       	push	r25
    ea3a:	8f 93       	push	r24
    ea3c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
}
    ea40:	0f 90       	pop	r0
    ea42:	0f 90       	pop	r0
    ea44:	0f 90       	pop	r0
    ea46:	0f 90       	pop	r0
    ea48:	0f 90       	pop	r0
    ea4a:	08 95       	ret

0000ea4c <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    ea4c:	a4 e4       	ldi	r26, 0x44	; 68
    ea4e:	b1 e0       	ldi	r27, 0x01	; 1
    ea50:	ec e2       	ldi	r30, 0x2C	; 44
    ea52:	f5 e7       	ldi	r31, 0x75	; 117
    ea54:	0c 94 26 eb 	jmp	0x1d64c	; 0x1d64c <__prologue_saves__+0x16>
    ea58:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    ea5a:	bc 01       	movw	r22, r24
    ea5c:	ce 01       	movw	r24, r28
    ea5e:	89 5e       	subi	r24, 0xE9	; 233
    ea60:	9e 4f       	sbci	r25, 0xFE	; 254
    ea62:	0e 94 6e 62 	call	0xc4dc	; 0xc4dc <f_opendir>
    if (fr == FR_OK) {
    ea66:	00 97       	sbiw	r24, 0x00	; 0
    ea68:	09 f0       	breq	.+2      	; 0xea6c <fatfs_scan_files+0x20>
    ea6a:	5b c0       	rjmp	.+182    	; 0xeb22 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ea6c:	8f e2       	ldi	r24, 0x2F	; 47
    ea6e:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    ea70:	be 01       	movw	r22, r28
    ea72:	6f 5f       	subi	r22, 0xFF	; 255
    ea74:	7f 4f       	sbci	r23, 0xFF	; 255
    ea76:	ce 01       	movw	r24, r28
    ea78:	89 5e       	subi	r24, 0xE9	; 233
    ea7a:	9e 4f       	sbci	r25, 0xFE	; 254
    ea7c:	0e 94 f6 62 	call	0xc5ec	; 0xc5ec <f_readdir>
    ea80:	00 97       	sbiw	r24, 0x00	; 0
    ea82:	09 f0       	breq	.+2      	; 0xea86 <fatfs_scan_files+0x3a>
    ea84:	4e c0       	rjmp	.+156    	; 0xeb22 <fatfs_scan_files+0xd6>
    ea86:	2f 89       	ldd	r18, Y+23	; 0x17
    ea88:	22 23       	and	r18, r18
    ea8a:	09 f4       	brne	.+2      	; 0xea8e <fatfs_scan_files+0x42>
    ea8c:	4a c0       	rjmp	.+148    	; 0xeb22 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    ea8e:	89 85       	ldd	r24, Y+9	; 0x09
    ea90:	84 ff       	sbrs	r24, 4
    ea92:	25 c0       	rjmp	.+74     	; 0xeade <fatfs_scan_files+0x92>
                AccDirs++;
    ea94:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <AccDirs>
    ea98:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <AccDirs+0x1>
    ea9c:	01 96       	adiw	r24, 0x01	; 1
    ea9e:	90 93 bd 1c 	sts	0x1CBD, r25	; 0x801cbd <AccDirs+0x1>
    eaa2:	80 93 bc 1c 	sts	0x1CBC, r24	; 0x801cbc <AccDirs>
                i = strlen(path);
    eaa6:	f8 01       	movw	r30, r16
    eaa8:	01 90       	ld	r0, Z+
    eaaa:	00 20       	and	r0, r0
    eaac:	e9 f7       	brne	.-6      	; 0xeaa8 <fatfs_scan_files+0x5c>
    eaae:	31 97       	sbiw	r30, 0x01	; 1
    eab0:	e0 1b       	sub	r30, r16
    eab2:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    eab4:	78 01       	movw	r14, r16
    eab6:	ee 0e       	add	r14, r30
    eab8:	ff 1e       	adc	r15, r31
    eaba:	d7 01       	movw	r26, r14
    eabc:	dc 92       	st	X, r13
    eabe:	cf 01       	movw	r24, r30
    eac0:	01 96       	adiw	r24, 0x01	; 1
    eac2:	be 01       	movw	r22, r28
    eac4:	69 5e       	subi	r22, 0xE9	; 233
    eac6:	7f 4f       	sbci	r23, 0xFF	; 255
    eac8:	80 0f       	add	r24, r16
    eaca:	91 1f       	adc	r25, r17
    eacc:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcpy>
                fr = fatfs_scan_files(path);
    ead0:	c8 01       	movw	r24, r16
    ead2:	bc df       	rcall	.-136    	; 0xea4c <fatfs_scan_files>
                path[i] = 0;
    ead4:	f7 01       	movw	r30, r14
    ead6:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    ead8:	00 97       	sbiw	r24, 0x00	; 0
    eada:	51 f2       	breq	.-108    	; 0xea70 <fatfs_scan_files+0x24>
    eadc:	22 c0       	rjmp	.+68     	; 0xeb22 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    eade:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <AccFiles>
    eae2:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <AccFiles+0x1>
    eae6:	01 96       	adiw	r24, 0x01	; 1
    eae8:	90 93 bf 1c 	sts	0x1CBF, r25	; 0x801cbf <AccFiles+0x1>
    eaec:	80 93 be 1c 	sts	0x1CBE, r24	; 0x801cbe <AccFiles>
                AccSize += info.fsize;
    eaf0:	40 91 b8 1c 	lds	r20, 0x1CB8	; 0x801cb8 <AccSize>
    eaf4:	50 91 b9 1c 	lds	r21, 0x1CB9	; 0x801cb9 <AccSize+0x1>
    eaf8:	60 91 ba 1c 	lds	r22, 0x1CBA	; 0x801cba <AccSize+0x2>
    eafc:	70 91 bb 1c 	lds	r23, 0x1CBB	; 0x801cbb <AccSize+0x3>
    eb00:	89 81       	ldd	r24, Y+1	; 0x01
    eb02:	9a 81       	ldd	r25, Y+2	; 0x02
    eb04:	ab 81       	ldd	r26, Y+3	; 0x03
    eb06:	bc 81       	ldd	r27, Y+4	; 0x04
    eb08:	84 0f       	add	r24, r20
    eb0a:	95 1f       	adc	r25, r21
    eb0c:	a6 1f       	adc	r26, r22
    eb0e:	b7 1f       	adc	r27, r23
    eb10:	80 93 b8 1c 	sts	0x1CB8, r24	; 0x801cb8 <AccSize>
    eb14:	90 93 b9 1c 	sts	0x1CB9, r25	; 0x801cb9 <AccSize+0x1>
    eb18:	a0 93 ba 1c 	sts	0x1CBA, r26	; 0x801cba <AccSize+0x2>
    eb1c:	b0 93 bb 1c 	sts	0x1CBB, r27	; 0x801cbb <AccSize+0x3>
    eb20:	a7 cf       	rjmp	.-178    	; 0xea70 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    eb22:	cc 5b       	subi	r28, 0xBC	; 188
    eb24:	de 4f       	sbci	r29, 0xFE	; 254
    eb26:	e7 e0       	ldi	r30, 0x07	; 7
    eb28:	0c 94 42 eb 	jmp	0x1d684	; 0x1d684 <__epilogue_restores__+0x16>

0000eb2c <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    eb2c:	01 97       	sbiw	r24, 0x01	; 1
    eb2e:	84 30       	cpi	r24, 0x04	; 4
    eb30:	91 05       	cpc	r25, r1
    eb32:	40 f4       	brcc	.+16     	; 0xeb44 <fatfs_fstype+0x18>
    eb34:	88 0f       	add	r24, r24
    eb36:	99 1f       	adc	r25, r25
    eb38:	fc 01       	movw	r30, r24
    eb3a:	e4 50       	subi	r30, 0x04	; 4
    eb3c:	f9 4f       	sbci	r31, 0xF9	; 249
    eb3e:	80 81       	ld	r24, Z
    eb40:	91 81       	ldd	r25, Z+1	; 0x01
    eb42:	08 95       	ret
    char *ptr;
    switch(type)
    eb44:	8e e1       	ldi	r24, 0x1E	; 30
    eb46:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    eb48:	08 95       	ret

0000eb4a <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    eb4a:	a4 e2       	ldi	r26, 0x24	; 36
    eb4c:	b0 e0       	ldi	r27, 0x00	; 0
    eb4e:	eb ea       	ldi	r30, 0xAB	; 171
    eb50:	f5 e7       	ldi	r31, 0x75	; 117
    eb52:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    eb56:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    eb58:	fc 01       	movw	r30, r24
    eb5a:	21 91       	ld	r18, Z+
    eb5c:	cf 01       	movw	r24, r30
    eb5e:	20 32       	cpi	r18, 0x20	; 32
    eb60:	d1 f3       	breq	.-12     	; 0xeb56 <fatfs_status+0xc>
    eb62:	29 30       	cpi	r18, 0x09	; 9
    eb64:	c1 f3       	breq	.-16     	; 0xeb56 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    eb66:	1f 93       	push	r17
    eb68:	0f 93       	push	r16
    eb6a:	86 e4       	ldi	r24, 0x46	; 70
    eb6c:	9a e0       	ldi	r25, 0x0A	; 10
    eb6e:	1f 92       	push	r1
    eb70:	9f 93       	push	r25
    eb72:	8f 93       	push	r24
    eb74:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    eb78:	ae 01       	movw	r20, r28
    eb7a:	4d 5d       	subi	r20, 0xDD	; 221
    eb7c:	5f 4f       	sbci	r21, 0xFF	; 255
    eb7e:	be 01       	movw	r22, r28
    eb80:	61 5e       	subi	r22, 0xE1	; 225
    eb82:	7f 4f       	sbci	r23, 0xFF	; 255
    eb84:	c8 01       	movw	r24, r16
    eb86:	0e 94 7c 63 	call	0xc6f8	; 0xc6f8 <f_getfree>
    if (res)
    eb8a:	0f 90       	pop	r0
    eb8c:	0f 90       	pop	r0
    eb8e:	0f 90       	pop	r0
    eb90:	0f 90       	pop	r0
    eb92:	0f 90       	pop	r0
    eb94:	00 97       	sbiw	r24, 0x00	; 0
    eb96:	09 f0       	breq	.+2      	; 0xeb9a <fatfs_status+0x50>
    eb98:	e8 c0       	rjmp	.+464    	; 0xed6a <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    eb9a:	eb a1       	ldd	r30, Y+35	; 0x23
    eb9c:	fc a1       	ldd	r31, Y+36	; 0x24
    eb9e:	80 81       	ld	r24, Z
    eba0:	90 e0       	ldi	r25, 0x00	; 0
    eba2:	c4 df       	rcall	.-120    	; 0xeb2c <fatfs_fstype>
    eba4:	9f 93       	push	r25
    eba6:	8f 93       	push	r24
    eba8:	88 e2       	ldi	r24, 0x28	; 40
    ebaa:	9a e0       	ldi	r25, 0x0A	; 10
    ebac:	1f 92       	push	r1
    ebae:	9f 93       	push	r25
    ebb0:	8f 93       	push	r24
    ebb2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    ebb6:	eb a1       	ldd	r30, Y+35	; 0x23
    ebb8:	fc a1       	ldd	r31, Y+36	; 0x24
    ebba:	81 85       	ldd	r24, Z+9	; 0x09
    ebbc:	92 85       	ldd	r25, Z+10	; 0x0a
    ebbe:	a0 e0       	ldi	r26, 0x00	; 0
    ebc0:	b0 e0       	ldi	r27, 0x00	; 0
    ebc2:	49 e0       	ldi	r20, 0x09	; 9
    ebc4:	88 0f       	add	r24, r24
    ebc6:	99 1f       	adc	r25, r25
    ebc8:	aa 1f       	adc	r26, r26
    ebca:	bb 1f       	adc	r27, r27
    ebcc:	4a 95       	dec	r20
    ebce:	d1 f7       	brne	.-12     	; 0xebc4 <fatfs_status+0x7a>
    ebd0:	bf 93       	push	r27
    ebd2:	af 93       	push	r26
    ebd4:	9f 93       	push	r25
    ebd6:	8f 93       	push	r24
    ebd8:	89 e0       	ldi	r24, 0x09	; 9
    ebda:	9a e0       	ldi	r25, 0x0A	; 10
    ebdc:	1f 92       	push	r1
    ebde:	9f 93       	push	r25
    ebe0:	8f 93       	push	r24
    ebe2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    ebe6:	eb a1       	ldd	r30, Y+35	; 0x23
    ebe8:	fc a1       	ldd	r31, Y+36	; 0x24
    ebea:	82 81       	ldd	r24, Z+2	; 0x02
    ebec:	1f 92       	push	r1
    ebee:	8f 93       	push	r24
    ebf0:	8b ee       	ldi	r24, 0xEB	; 235
    ebf2:	99 e0       	ldi	r25, 0x09	; 9
    ebf4:	1f 92       	push	r1
    ebf6:	9f 93       	push	r25
    ebf8:	8f 93       	push	r24
    ebfa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    ebfe:	eb a1       	ldd	r30, Y+35	; 0x23
    ec00:	fc a1       	ldd	r31, Y+36	; 0x24
    ec02:	80 85       	ldd	r24, Z+8	; 0x08
    ec04:	8f 93       	push	r24
    ec06:	87 81       	ldd	r24, Z+7	; 0x07
    ec08:	8f 93       	push	r24
    ec0a:	8d ec       	ldi	r24, 0xCD	; 205
    ec0c:	99 e0       	ldi	r25, 0x09	; 9
    ec0e:	1f 92       	push	r1
    ec10:	9f 93       	push	r25
    ec12:	8f 93       	push	r24
    ec14:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    ec18:	eb a1       	ldd	r30, Y+35	; 0x23
    ec1a:	fc a1       	ldd	r31, Y+36	; 0x24
    ec1c:	80 a1       	ldd	r24, Z+32	; 0x20
    ec1e:	8f 93       	push	r24
    ec20:	87 8d       	ldd	r24, Z+31	; 0x1f
    ec22:	8f 93       	push	r24
    ec24:	86 8d       	ldd	r24, Z+30	; 0x1e
    ec26:	8f 93       	push	r24
    ec28:	85 8d       	ldd	r24, Z+29	; 0x1d
    ec2a:	8f 93       	push	r24
    ec2c:	8e ea       	ldi	r24, 0xAE	; 174
    ec2e:	99 e0       	ldi	r25, 0x09	; 9
    ec30:	1f 92       	push	r1
    ec32:	9f 93       	push	r25
    ec34:	8f 93       	push	r24
    ec36:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    ec3a:	eb a1       	ldd	r30, Y+35	; 0x23
    ec3c:	fc a1       	ldd	r31, Y+36	; 0x24
    ec3e:	81 8d       	ldd	r24, Z+25	; 0x19
    ec40:	92 8d       	ldd	r25, Z+26	; 0x1a
    ec42:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ec44:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ec46:	02 97       	sbiw	r24, 0x02	; 2
    ec48:	a1 09       	sbc	r26, r1
    ec4a:	b1 09       	sbc	r27, r1
    ec4c:	bf 93       	push	r27
    ec4e:	af 93       	push	r26
    ec50:	9f 93       	push	r25
    ec52:	8f 93       	push	r24
    ec54:	8f e8       	ldi	r24, 0x8F	; 143
    ec56:	99 e0       	ldi	r25, 0x09	; 9
    ec58:	1f 92       	push	r1
    ec5a:	9f 93       	push	r25
    ec5c:	8f 93       	push	r24
    ec5e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    ec62:	0f b6       	in	r0, 0x3f	; 63
    ec64:	f8 94       	cli
    ec66:	de bf       	out	0x3e, r29	; 62
    ec68:	0f be       	out	0x3f, r0	; 63
    ec6a:	cd bf       	out	0x3d, r28	; 61
    ec6c:	eb a1       	ldd	r30, Y+35	; 0x23
    ec6e:	fc a1       	ldd	r31, Y+36	; 0x24
    ec70:	80 a5       	ldd	r24, Z+40	; 0x28
    ec72:	8f 93       	push	r24
    ec74:	87 a1       	ldd	r24, Z+39	; 0x27
    ec76:	8f 93       	push	r24
    ec78:	86 a1       	ldd	r24, Z+38	; 0x26
    ec7a:	8f 93       	push	r24
    ec7c:	85 a1       	ldd	r24, Z+37	; 0x25
    ec7e:	8f 93       	push	r24
    ec80:	80 e7       	ldi	r24, 0x70	; 112
    ec82:	99 e0       	ldi	r25, 0x09	; 9
    ec84:	1f 92       	push	r1
    ec86:	9f 93       	push	r25
    ec88:	8f 93       	push	r24
    ec8a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    ec8e:	eb a1       	ldd	r30, Y+35	; 0x23
    ec90:	fc a1       	ldd	r31, Y+36	; 0x24
    ec92:	84 a5       	ldd	r24, Z+44	; 0x2c
    ec94:	8f 93       	push	r24
    ec96:	83 a5       	ldd	r24, Z+43	; 0x2b
    ec98:	8f 93       	push	r24
    ec9a:	82 a5       	ldd	r24, Z+42	; 0x2a
    ec9c:	8f 93       	push	r24
    ec9e:	81 a5       	ldd	r24, Z+41	; 0x29
    eca0:	8f 93       	push	r24
    eca2:	81 e5       	ldi	r24, 0x51	; 81
    eca4:	99 e0       	ldi	r25, 0x09	; 9
    eca6:	1f 92       	push	r1
    eca8:	9f 93       	push	r25
    ecaa:	8f 93       	push	r24
    ecac:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    ecb0:	eb a1       	ldd	r30, Y+35	; 0x23
    ecb2:	fc a1       	ldd	r31, Y+36	; 0x24
    ecb4:	80 a9       	ldd	r24, Z+48	; 0x30
    ecb6:	8f 93       	push	r24
    ecb8:	87 a5       	ldd	r24, Z+47	; 0x2f
    ecba:	8f 93       	push	r24
    ecbc:	86 a5       	ldd	r24, Z+46	; 0x2e
    ecbe:	8f 93       	push	r24
    ecc0:	85 a5       	ldd	r24, Z+45	; 0x2d
    ecc2:	8f 93       	push	r24
    ecc4:	82 e3       	ldi	r24, 0x32	; 50
    ecc6:	99 e0       	ldi	r25, 0x09	; 9
    ecc8:	1f 92       	push	r1
    ecca:	9f 93       	push	r25
    eccc:	8f 93       	push	r24
    ecce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    ecd2:	ae 01       	movw	r20, r28
    ecd4:	45 5e       	subi	r20, 0xE5	; 229
    ecd6:	5f 4f       	sbci	r21, 0xFF	; 255
    ecd8:	be 01       	movw	r22, r28
    ecda:	6f 5f       	subi	r22, 0xFF	; 255
    ecdc:	7f 4f       	sbci	r23, 0xFF	; 255
    ecde:	c8 01       	movw	r24, r16
    ece0:	0e 94 0e 68 	call	0xd01c	; 0xd01c <f_getlabel>
    if (res)
    ece4:	0f b6       	in	r0, 0x3f	; 63
    ece6:	f8 94       	cli
    ece8:	de bf       	out	0x3e, r29	; 62
    ecea:	0f be       	out	0x3f, r0	; 63
    ecec:	cd bf       	out	0x3d, r28	; 61
    ecee:	00 97       	sbiw	r24, 0x00	; 0
    ecf0:	e1 f5       	brne	.+120    	; 0xed6a <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    ecf2:	89 81       	ldd	r24, Y+1	; 0x01
    ecf4:	81 11       	cpse	r24, r1
    ecf6:	03 c0       	rjmp	.+6      	; 0xecfe <fatfs_status+0x1b4>
    ecf8:	86 e2       	ldi	r24, 0x26	; 38
    ecfa:	98 e0       	ldi	r25, 0x08	; 8
    ecfc:	02 c0       	rjmp	.+4      	; 0xed02 <fatfs_status+0x1b8>
    ecfe:	ce 01       	movw	r24, r28
    ed00:	01 96       	adiw	r24, 0x01	; 1
    ed02:	9f 93       	push	r25
    ed04:	8f 93       	push	r24
    ed06:	84 e1       	ldi	r24, 0x14	; 20
    ed08:	99 e0       	ldi	r25, 0x09	; 9
    ed0a:	1f 92       	push	r1
    ed0c:	9f 93       	push	r25
    ed0e:	8f 93       	push	r24
    ed10:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    ed14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed18:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ed1a:	be 8d       	ldd	r27, Y+30	; 0x1e
    ed1c:	9f 93       	push	r25
    ed1e:	8f 93       	push	r24
    ed20:	cd 01       	movw	r24, r26
    ed22:	aa 27       	eor	r26, r26
    ed24:	bb 27       	eor	r27, r27
    ed26:	9f 93       	push	r25
    ed28:	8f 93       	push	r24
    ed2a:	8f ee       	ldi	r24, 0xEF	; 239
    ed2c:	98 e0       	ldi	r25, 0x08	; 8
    ed2e:	1f 92       	push	r1
    ed30:	9f 93       	push	r25
    ed32:	8f 93       	push	r24
    ed34:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    ed38:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <AccDirs+0x1>
    ed3c:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccDirs>
    ed40:	10 92 bf 1c 	sts	0x1CBF, r1	; 0x801cbf <AccFiles+0x1>
    ed44:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <AccFiles>
    ed48:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize>
    ed4c:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccSize+0x1>
    ed50:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccSize+0x2>
    ed54:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    ed58:	c8 01       	movw	r24, r16
    if (res)
    ed5a:	78 de       	rcall	.-784    	; 0xea4c <fatfs_scan_files>
    ed5c:	0f b6       	in	r0, 0x3f	; 63
    ed5e:	f8 94       	cli
    ed60:	de bf       	out	0x3e, r29	; 62
    ed62:	0f be       	out	0x3f, r0	; 63
    ed64:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    ed66:	00 97       	sbiw	r24, 0x00	; 0
    ed68:	11 f0       	breq	.+4      	; 0xed6e <fatfs_status+0x224>
        return;
    ed6a:	61 de       	rcall	.-830    	; 0xea2e <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    ed6c:	56 c0       	rjmp	.+172    	; 0xee1a <fatfs_status+0x2d0>
    ed6e:	0b a1       	ldd	r16, Y+35	; 0x23
    ed70:	1c a1       	ldd	r17, Y+36	; 0x24
    ed72:	f8 01       	movw	r30, r16
    ed74:	c1 84       	ldd	r12, Z+9	; 0x09
    ed76:	d2 84       	ldd	r13, Z+10	; 0x0a
    ed78:	e1 2c       	mov	r14, r1
    ed7a:	f1 2c       	mov	r15, r1
    ed7c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    ed7e:	78 a1       	ldd	r23, Y+32	; 0x20
    ed80:	89 a1       	ldd	r24, Y+33	; 0x21
    ed82:	9a a1       	ldd	r25, Y+34	; 0x22
    ed84:	a7 01       	movw	r20, r14
    ed86:	96 01       	movw	r18, r12
    ed88:	0e 94 6c ea 	call	0x1d4d8	; 0x1d4d8 <__mulsi3>
    ed8c:	22 e0       	ldi	r18, 0x02	; 2
    ed8e:	30 e0       	ldi	r19, 0x00	; 0
    ed90:	40 e0       	ldi	r20, 0x00	; 0
    ed92:	50 e0       	ldi	r21, 0x00	; 0
    ed94:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    ed98:	5f 93       	push	r21
    ed9a:	4f 93       	push	r20
    ed9c:	3f 93       	push	r19
    ed9e:	2f 93       	push	r18
    eda0:	f8 01       	movw	r30, r16
    eda2:	81 8d       	ldd	r24, Z+25	; 0x19
    eda4:	92 8d       	ldd	r25, Z+26	; 0x1a
    eda6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    eda8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    edaa:	9c 01       	movw	r18, r24
    edac:	ad 01       	movw	r20, r26
    edae:	22 50       	subi	r18, 0x02	; 2
    edb0:	31 09       	sbc	r19, r1
    edb2:	41 09       	sbc	r20, r1
    edb4:	51 09       	sbc	r21, r1
    edb6:	c7 01       	movw	r24, r14
    edb8:	b6 01       	movw	r22, r12
    edba:	0e 94 6c ea 	call	0x1d4d8	; 0x1d4d8 <__mulsi3>
    edbe:	dc 01       	movw	r26, r24
    edc0:	cb 01       	movw	r24, r22
    edc2:	b6 95       	lsr	r27
    edc4:	a7 95       	ror	r26
    edc6:	97 95       	ror	r25
    edc8:	87 95       	ror	r24
    edca:	bf 93       	push	r27
    edcc:	af 93       	push	r26
    edce:	9f 93       	push	r25
    edd0:	8f 93       	push	r24
    edd2:	80 91 bd 1c 	lds	r24, 0x1CBD	; 0x801cbd <AccDirs+0x1>
    edd6:	8f 93       	push	r24
    edd8:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <AccDirs>
    eddc:	8f 93       	push	r24
    edde:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccSize+0x3>
    ede2:	8f 93       	push	r24
    ede4:	80 91 ba 1c 	lds	r24, 0x1CBA	; 0x801cba <AccSize+0x2>
    ede8:	8f 93       	push	r24
    edea:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccSize+0x1>
    edee:	8f 93       	push	r24
    edf0:	80 91 b8 1c 	lds	r24, 0x1CB8	; 0x801cb8 <AccSize>
    edf4:	8f 93       	push	r24
    edf6:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <AccFiles+0x1>
    edfa:	8f 93       	push	r24
    edfc:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <AccFiles>
    ee00:	8f 93       	push	r24
    ee02:	82 ea       	ldi	r24, 0xA2	; 162
    ee04:	98 e0       	ldi	r25, 0x08	; 8
    ee06:	1f 92       	push	r1
    ee08:	9f 93       	push	r25
    ee0a:	8f 93       	push	r24
    ee0c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    ee10:	0f b6       	in	r0, 0x3f	; 63
    ee12:	f8 94       	cli
    ee14:	de bf       	out	0x3e, r29	; 62
    ee16:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    ee18:	cd bf       	out	0x3d, r28	; 61
    ee1a:	a4 96       	adiw	r28, 0x24	; 36
    ee1c:	e8 e0       	ldi	r30, 0x08	; 8
    ee1e:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000ee22 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    ee22:	a6 e0       	ldi	r26, 0x06	; 6
    ee24:	b0 e0       	ldi	r27, 0x00	; 0
    ee26:	e7 e1       	ldi	r30, 0x17	; 23
    ee28:	f7 e7       	ldi	r31, 0x77	; 119
    ee2a:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    ee2e:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    ee30:	86 89       	ldd	r24, Z+22	; 0x16
    ee32:	81 11       	cpse	r24, r1
    ee34:	0b c0       	rjmp	.+22     	; 0xee4c <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    ee36:	87 e8       	ldi	r24, 0x87	; 135
    ee38:	98 e0       	ldi	r25, 0x08	; 8
    ee3a:	1f 92       	push	r1
    ee3c:	9f 93       	push	r25
    ee3e:	8f 93       	push	r24
    ee40:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return;
    ee44:	0f 90       	pop	r0
    ee46:	0f 90       	pop	r0
    ee48:	0f 90       	pop	r0
    ee4a:	6e c0       	rjmp	.+220    	; 0xef28 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    ee4c:	80 85       	ldd	r24, Z+8	; 0x08
    ee4e:	84 fd       	sbrc	r24, 4
    ee50:	02 c0       	rjmp	.+4      	; 0xee56 <fatfs_filinfo_list+0x34>
    ee52:	9d e2       	ldi	r25, 0x2D	; 45
    ee54:	01 c0       	rjmp	.+2      	; 0xee58 <fatfs_filinfo_list+0x36>
    ee56:	94 e4       	ldi	r25, 0x44	; 68
    ee58:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    ee5a:	80 fd       	sbrc	r24, 0
    ee5c:	02 c0       	rjmp	.+4      	; 0xee62 <fatfs_filinfo_list+0x40>
    ee5e:	9d e2       	ldi	r25, 0x2D	; 45
    ee60:	01 c0       	rjmp	.+2      	; 0xee64 <fatfs_filinfo_list+0x42>
    ee62:	92 e5       	ldi	r25, 0x52	; 82
    ee64:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    ee66:	81 fd       	sbrc	r24, 1
    ee68:	02 c0       	rjmp	.+4      	; 0xee6e <fatfs_filinfo_list+0x4c>
    ee6a:	9d e2       	ldi	r25, 0x2D	; 45
    ee6c:	01 c0       	rjmp	.+2      	; 0xee70 <fatfs_filinfo_list+0x4e>
    ee6e:	98 e4       	ldi	r25, 0x48	; 72
    ee70:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    ee72:	82 fd       	sbrc	r24, 2
    ee74:	02 c0       	rjmp	.+4      	; 0xee7a <fatfs_filinfo_list+0x58>
    ee76:	9d e2       	ldi	r25, 0x2D	; 45
    ee78:	01 c0       	rjmp	.+2      	; 0xee7c <fatfs_filinfo_list+0x5a>
    ee7a:	93 e5       	ldi	r25, 0x53	; 83
    ee7c:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    ee7e:	85 fd       	sbrc	r24, 5
    ee80:	02 c0       	rjmp	.+4      	; 0xee86 <fatfs_filinfo_list+0x64>
    ee82:	8d e2       	ldi	r24, 0x2D	; 45
    ee84:	01 c0       	rjmp	.+2      	; 0xee88 <fatfs_filinfo_list+0x66>
    ee86:	81 e4       	ldi	r24, 0x41	; 65
    ee88:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    ee8a:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    ee8c:	46 81       	ldd	r20, Z+6	; 0x06
    ee8e:	57 81       	ldd	r21, Z+7	; 0x07
    ee90:	84 81       	ldd	r24, Z+4	; 0x04
    ee92:	95 81       	ldd	r25, Z+5	; 0x05
    ee94:	9f 01       	movw	r18, r30
    ee96:	2a 5e       	subi	r18, 0xEA	; 234
    ee98:	3f 4f       	sbci	r19, 0xFF	; 255
    ee9a:	3f 93       	push	r19
    ee9c:	2f 93       	push	r18
    ee9e:	23 81       	ldd	r18, Z+3	; 0x03
    eea0:	2f 93       	push	r18
    eea2:	22 81       	ldd	r18, Z+2	; 0x02
    eea4:	2f 93       	push	r18
    eea6:	21 81       	ldd	r18, Z+1	; 0x01
    eea8:	2f 93       	push	r18
    eeaa:	20 81       	ld	r18, Z
    eeac:	2f 93       	push	r18
    eeae:	9a 01       	movw	r18, r20
    eeb0:	45 e0       	ldi	r20, 0x05	; 5
    eeb2:	36 95       	lsr	r19
    eeb4:	27 95       	ror	r18
    eeb6:	4a 95       	dec	r20
    eeb8:	e1 f7       	brne	.-8      	; 0xeeb2 <fatfs_filinfo_list+0x90>
    eeba:	2f 73       	andi	r18, 0x3F	; 63
    eebc:	33 27       	eor	r19, r19
    eebe:	3f 93       	push	r19
    eec0:	2f 93       	push	r18
    eec2:	25 2f       	mov	r18, r21
    eec4:	26 95       	lsr	r18
    eec6:	26 95       	lsr	r18
    eec8:	26 95       	lsr	r18
    eeca:	1f 92       	push	r1
    eecc:	2f 93       	push	r18
    eece:	9c 01       	movw	r18, r24
    eed0:	2f 71       	andi	r18, 0x1F	; 31
    eed2:	33 27       	eor	r19, r19
    eed4:	3f 93       	push	r19
    eed6:	2f 93       	push	r18
    eed8:	9c 01       	movw	r18, r24
    eeda:	55 e0       	ldi	r21, 0x05	; 5
    eedc:	36 95       	lsr	r19
    eede:	27 95       	ror	r18
    eee0:	5a 95       	dec	r21
    eee2:	e1 f7       	brne	.-8      	; 0xeedc <fatfs_filinfo_list+0xba>
    eee4:	2f 70       	andi	r18, 0x0F	; 15
    eee6:	33 27       	eor	r19, r19
    eee8:	3f 93       	push	r19
    eeea:	2f 93       	push	r18
    eeec:	89 2f       	mov	r24, r25
    eeee:	99 27       	eor	r25, r25
    eef0:	86 95       	lsr	r24
    eef2:	84 54       	subi	r24, 0x44	; 68
    eef4:	98 4f       	sbci	r25, 0xF8	; 248
    eef6:	9f 93       	push	r25
    eef8:	8f 93       	push	r24
    eefa:	ce 01       	movw	r24, r28
    eefc:	01 96       	adiw	r24, 0x01	; 1
    eefe:	9f 93       	push	r25
    ef00:	8f 93       	push	r24
    ef02:	85 e6       	ldi	r24, 0x65	; 101
    ef04:	98 e0       	ldi	r25, 0x08	; 8
    ef06:	1f 92       	push	r1
    ef08:	9f 93       	push	r25
    ef0a:	8f 93       	push	r24
    ef0c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    ef10:	83 e6       	ldi	r24, 0x63	; 99
    ef12:	98 e0       	ldi	r25, 0x08	; 8
    ef14:	1f 92       	push	r1
    ef16:	9f 93       	push	r25
    ef18:	8f 93       	push	r24
    ef1a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    ef1e:	0f b6       	in	r0, 0x3f	; 63
    ef20:	f8 94       	cli
    ef22:	de bf       	out	0x3e, r29	; 62
    ef24:	0f be       	out	0x3f, r0	; 63
    ef26:	cd bf       	out	0x3d, r28	; 61
}
    ef28:	26 96       	adiw	r28, 0x06	; 6
    ef2a:	e2 e0       	ldi	r30, 0x02	; 2
    ef2c:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000ef30 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    ef30:	cf 93       	push	r28
    ef32:	df 93       	push	r29
    ef34:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    ef36:	88 ea       	ldi	r24, 0xA8	; 168
    ef38:	9b e0       	ldi	r25, 0x0B	; 11
    ef3a:	1f 92       	push	r1
    ef3c:	9f 93       	push	r25
    ef3e:	8f 93       	push	r24
    ef40:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    
    if(full)
    ef44:	0f 90       	pop	r0
    ef46:	0f 90       	pop	r0
    ef48:	0f 90       	pop	r0
    ef4a:	cd 2b       	or	r28, r29
    ef4c:	51 f0       	breq	.+20     	; 0xef62 <fatfs_help+0x32>
    {
        printf(
    ef4e:	8c e2       	ldi	r24, 0x2C	; 44
    ef50:	9b e0       	ldi	r25, 0x0B	; 11
    ef52:	1f 92       	push	r1
    ef54:	9f 93       	push	r25
    ef56:	8f 93       	push	r24
    ef58:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    ef5c:	0f 90       	pop	r0
    ef5e:	0f 90       	pop	r0
    ef60:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    ef62:	df 91       	pop	r29
    ef64:	cf 91       	pop	r28
    ef66:	08 95       	ret

0000ef68 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    ef68:	aa e4       	ldi	r26, 0x4A	; 74
    ef6a:	b2 e0       	ldi	r27, 0x02	; 2
    ef6c:	ea eb       	ldi	r30, 0xBA	; 186
    ef6e:	f7 e7       	ldi	r31, 0x77	; 119
    ef70:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    ef74:	8e 01       	movw	r16, r28
    ef76:	09 5e       	subi	r16, 0xE9	; 233
    ef78:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    ef7a:	00 97       	sbiw	r24, 0x00	; 0
    ef7c:	21 f0       	breq	.+8      	; 0xef86 <fatfs_ls+0x1e>
    ef7e:	fc 01       	movw	r30, r24
    ef80:	20 81       	ld	r18, Z
    ef82:	21 11       	cpse	r18, r1
    ef84:	03 c0       	rjmp	.+6      	; 0xef8c <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    ef86:	6b e5       	ldi	r22, 0x5B	; 91
    ef88:	70 e1       	ldi	r23, 0x10	; 16
    ef8a:	01 c0       	rjmp	.+2      	; 0xef8e <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    ef8c:	bc 01       	movw	r22, r24
    ef8e:	c8 01       	movw	r24, r16
    ef90:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    ef94:	1f 93       	push	r17
    ef96:	0f 93       	push	r16
    ef98:	8c e9       	ldi	r24, 0x9C	; 156
    ef9a:	9a e0       	ldi	r25, 0x0A	; 10
    ef9c:	1f 92       	push	r1
    ef9e:	9f 93       	push	r25
    efa0:	8f 93       	push	r24
    efa2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    res = f_opendir(&dirs, buff);
    efa6:	b8 01       	movw	r22, r16
    efa8:	ce 01       	movw	r24, r28
    efaa:	89 5e       	subi	r24, 0xE9	; 233
    efac:	9d 4f       	sbci	r25, 0xFD	; 253
    efae:	0e 94 6e 62 	call	0xc4dc	; 0xc4dc <f_opendir>
    if (res) { put_rc(res); return; }
    efb2:	0f 90       	pop	r0
    efb4:	0f 90       	pop	r0
    efb6:	0f 90       	pop	r0
    efb8:	0f 90       	pop	r0
    efba:	0f 90       	pop	r0
    efbc:	00 97       	sbiw	r24, 0x00	; 0
    efbe:	11 f0       	breq	.+4      	; 0xefc4 <fatfs_ls+0x5c>
    efc0:	36 dd       	rcall	.-1428   	; 0xea2e <put_rc>
    p1 = s1 = s2 = 0;
    efc2:	9a c0       	rjmp	.+308    	; 0xf0f8 <fatfs_ls+0x190>
    efc4:	cb 5b       	subi	r28, 0xBB	; 187
    efc6:	dd 4f       	sbci	r29, 0xFD	; 253
    efc8:	18 82       	st	Y, r1
    efca:	19 82       	std	Y+1, r1	; 0x01
    efcc:	1a 82       	std	Y+2, r1	; 0x02
    efce:	1b 82       	std	Y+3, r1	; 0x03
    efd0:	c5 54       	subi	r28, 0x45	; 69
    efd2:	d2 40       	sbci	r29, 0x02	; 2
    efd4:	c1 2c       	mov	r12, r1
    efd6:	d1 2c       	mov	r13, r1
    efd8:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    efda:	f1 2c       	mov	r15, r1
    efdc:	be 01       	movw	r22, r28
    efde:	6f 5f       	subi	r22, 0xFF	; 255
    efe0:	7f 4f       	sbci	r23, 0xFF	; 255
    efe2:	ce 01       	movw	r24, r28
    efe4:	89 5e       	subi	r24, 0xE9	; 233
    efe6:	9d 4f       	sbci	r25, 0xFD	; 253
    efe8:	0e 94 f6 62 	call	0xc5ec	; 0xc5ec <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    efec:	89 2b       	or	r24, r25
    efee:	49 f5       	brne	.+82     	; 0xf042 <fatfs_ls+0xda>
    eff0:	8f 89       	ldd	r24, Y+23	; 0x17
    eff2:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    eff4:	31 f1       	breq	.+76     	; 0xf042 <fatfs_ls+0xda>
    eff6:	89 85       	ldd	r24, Y+9	; 0x09
    eff8:	84 ff       	sbrs	r24, 4
        {
            s2++;
    effa:	04 c0       	rjmp	.+8      	; 0xf004 <fatfs_ls+0x9c>
    effc:	ff ef       	ldi	r31, 0xFF	; 255
    effe:	cf 1a       	sub	r12, r31
    f000:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    f002:	1b c0       	rjmp	.+54     	; 0xf03a <fatfs_ls+0xd2>
    f004:	2f ef       	ldi	r18, 0xFF	; 255
    f006:	e2 1a       	sub	r14, r18
    f008:	f2 0a       	sbc	r15, r18
    f00a:	49 81       	ldd	r20, Y+1	; 0x01
    f00c:	5a 81       	ldd	r21, Y+2	; 0x02
    f00e:	6b 81       	ldd	r22, Y+3	; 0x03
    f010:	7c 81       	ldd	r23, Y+4	; 0x04
    f012:	cb 5b       	subi	r28, 0xBB	; 187
    f014:	dd 4f       	sbci	r29, 0xFD	; 253
    f016:	88 81       	ld	r24, Y
    f018:	99 81       	ldd	r25, Y+1	; 0x01
    f01a:	aa 81       	ldd	r26, Y+2	; 0x02
    f01c:	bb 81       	ldd	r27, Y+3	; 0x03
    f01e:	c5 54       	subi	r28, 0x45	; 69
    f020:	d2 40       	sbci	r29, 0x02	; 2
    f022:	84 0f       	add	r24, r20
    f024:	95 1f       	adc	r25, r21
    f026:	a6 1f       	adc	r26, r22
    f028:	b7 1f       	adc	r27, r23
    f02a:	cb 5b       	subi	r28, 0xBB	; 187
    f02c:	dd 4f       	sbci	r29, 0xFD	; 253
    f02e:	88 83       	st	Y, r24
    f030:	99 83       	std	Y+1, r25	; 0x01
    f032:	aa 83       	std	Y+2, r26	; 0x02
    f034:	bb 83       	std	Y+3, r27	; 0x03
    f036:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    f038:	d2 40       	sbci	r29, 0x02	; 2
    f03a:	ce 01       	movw	r24, r28
    f03c:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    f03e:	f1 de       	rcall	.-542    	; 0xee22 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    f040:	cd cf       	rjmp	.-102    	; 0xefdc <fatfs_ls+0x74>
    f042:	df 92       	push	r13
    f044:	cf 92       	push	r12
    f046:	c8 5b       	subi	r28, 0xB8	; 184
    f048:	dd 4f       	sbci	r29, 0xFD	; 253
    f04a:	88 81       	ld	r24, Y
    f04c:	c8 54       	subi	r28, 0x48	; 72
    f04e:	d2 40       	sbci	r29, 0x02	; 2
    f050:	8f 93       	push	r24
    f052:	c9 5b       	subi	r28, 0xB9	; 185
    f054:	dd 4f       	sbci	r29, 0xFD	; 253
    f056:	88 81       	ld	r24, Y
    f058:	c7 54       	subi	r28, 0x47	; 71
    f05a:	d2 40       	sbci	r29, 0x02	; 2
    f05c:	8f 93       	push	r24
    f05e:	ca 5b       	subi	r28, 0xBA	; 186
    f060:	dd 4f       	sbci	r29, 0xFD	; 253
    f062:	88 81       	ld	r24, Y
    f064:	c6 54       	subi	r28, 0x46	; 70
    f066:	d2 40       	sbci	r29, 0x02	; 2
    f068:	8f 93       	push	r24
    f06a:	cb 5b       	subi	r28, 0xBB	; 187
    f06c:	dd 4f       	sbci	r29, 0xFD	; 253
    f06e:	88 81       	ld	r24, Y
    f070:	c5 54       	subi	r28, 0x45	; 69
    f072:	d2 40       	sbci	r29, 0x02	; 2
    f074:	8f 93       	push	r24
    f076:	ff 92       	push	r15
    f078:	ef 92       	push	r14
    f07a:	83 e7       	ldi	r24, 0x73	; 115
    f07c:	9a e0       	ldi	r25, 0x0A	; 10
    f07e:	1f 92       	push	r1
    f080:	9f 93       	push	r25
    f082:	8f 93       	push	r24
    f084:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    f088:	ae 01       	movw	r20, r28
    f08a:	47 5b       	subi	r20, 0xB7	; 183
    f08c:	5d 4f       	sbci	r21, 0xFD	; 253
    f08e:	be 01       	movw	r22, r28
    f090:	6b 5b       	subi	r22, 0xBB	; 187
    f092:	7d 4f       	sbci	r23, 0xFD	; 253
    f094:	c8 01       	movw	r24, r16
    f096:	0e 94 7c 63 	call	0xc6f8	; 0xc6f8 <f_getfree>
    f09a:	0f b6       	in	r0, 0x3f	; 63
    f09c:	f8 94       	cli
    f09e:	de bf       	out	0x3e, r29	; 62
    f0a0:	0f be       	out	0x3f, r0	; 63
    f0a2:	cd bf       	out	0x3d, r28	; 61
    f0a4:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    f0a6:	41 f5       	brne	.+80     	; 0xf0f8 <fatfs_ls+0x190>
    f0a8:	c7 5b       	subi	r28, 0xB7	; 183
    f0aa:	dd 4f       	sbci	r29, 0xFD	; 253
    f0ac:	e8 81       	ld	r30, Y
    f0ae:	f9 81       	ldd	r31, Y+1	; 0x01
    f0b0:	c9 54       	subi	r28, 0x49	; 73
    f0b2:	d2 40       	sbci	r29, 0x02	; 2
    f0b4:	a1 85       	ldd	r26, Z+9	; 0x09
    f0b6:	b2 85       	ldd	r27, Z+10	; 0x0a
    f0b8:	cb 5b       	subi	r28, 0xBB	; 187
    f0ba:	dd 4f       	sbci	r29, 0xFD	; 253
    f0bc:	28 81       	ld	r18, Y
    f0be:	39 81       	ldd	r19, Y+1	; 0x01
    f0c0:	4a 81       	ldd	r20, Y+2	; 0x02
    f0c2:	5b 81       	ldd	r21, Y+3	; 0x03
    f0c4:	c5 54       	subi	r28, 0x45	; 69
    f0c6:	d2 40       	sbci	r29, 0x02	; 2
    f0c8:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
    f0cc:	22 e0       	ldi	r18, 0x02	; 2
    f0ce:	30 e0       	ldi	r19, 0x00	; 0
    f0d0:	40 e0       	ldi	r20, 0x00	; 0
    f0d2:	50 e0       	ldi	r21, 0x00	; 0
    f0d4:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    f0d8:	5f 93       	push	r21
    f0da:	4f 93       	push	r20
    f0dc:	3f 93       	push	r19
    f0de:	2f 93       	push	r18
    f0e0:	8e e5       	ldi	r24, 0x5E	; 94
    f0e2:	9a e0       	ldi	r25, 0x0A	; 10
    f0e4:	1f 92       	push	r1
    f0e6:	9f 93       	push	r25
    f0e8:	8f 93       	push	r24
    f0ea:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f0ee:	0f b6       	in	r0, 0x3f	; 63
    f0f0:	f8 94       	cli
    f0f2:	de bf       	out	0x3e, r29	; 62
    f0f4:	0f be       	out	0x3f, r0	; 63
}
    f0f6:	cd bf       	out	0x3d, r28	; 61
    f0f8:	c6 5b       	subi	r28, 0xB6	; 182
    f0fa:	dd 4f       	sbci	r29, 0xFD	; 253
    f0fc:	e8 e0       	ldi	r30, 0x08	; 8
    f0fe:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000f102 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    f102:	8c ef       	ldi	r24, 0xFC	; 252
    f104:	9a e0       	ldi	r25, 0x0A	; 10
    f106:	1f 92       	push	r1
    f108:	9f 93       	push	r25
    f10a:	8f 93       	push	r24
    f10c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("START MMC TEST\n");
    f110:	8c ee       	ldi	r24, 0xEC	; 236
    f112:	9a e0       	ldi	r25, 0x0A	; 10
    f114:	1f 92       	push	r1
    f116:	9f 93       	push	r25
    f118:	8f 93       	push	r24
    f11a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fatfs_status("/");
    f11e:	8c e1       	ldi	r24, 0x1C	; 28
    f120:	98 e0       	ldi	r25, 0x08	; 8
    f122:	13 dd       	rcall	.-1498   	; 0xeb4a <fatfs_status>
    printf("MMC Directory List\n");
    f124:	88 ed       	ldi	r24, 0xD8	; 216
    f126:	9a e0       	ldi	r25, 0x0A	; 10
    f128:	1f 92       	push	r1
    f12a:	9f 93       	push	r25
    f12c:	8f 93       	push	r24
    f12e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fatfs_ls("/");
    f132:	8c e1       	ldi	r24, 0x1C	; 28
    f134:	98 e0       	ldi	r25, 0x08	; 8
    f136:	18 df       	rcall	.-464    	; 0xef68 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    f138:	8a ec       	ldi	r24, 0xCA	; 202
    f13a:	9a e0       	ldi	r25, 0x0A	; 10
    f13c:	1f 92       	push	r1
    f13e:	9f 93       	push	r25
    f140:	8f 93       	push	r24
    f142:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("==============================\n");
    f146:	8a ea       	ldi	r24, 0xAA	; 170
    f148:	9a e0       	ldi	r25, 0x0A	; 10
    f14a:	1f 92       	push	r1
    f14c:	9f 93       	push	r25
    f14e:	8f 93       	push	r24
    f150:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
    f154:	8d b7       	in	r24, 0x3d	; 61
    f156:	9e b7       	in	r25, 0x3e	; 62
    f158:	0f 96       	adiw	r24, 0x0f	; 15
    f15a:	0f b6       	in	r0, 0x3f	; 63
    f15c:	f8 94       	cli
    f15e:	9e bf       	out	0x3e, r25	; 62
    f160:	0f be       	out	0x3f, r0	; 63
    f162:	8d bf       	out	0x3d, r24	; 61
    f164:	08 95       	ret

0000f166 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    f166:	ef 92       	push	r14
    f168:	ff 92       	push	r15
    f16a:	0f 93       	push	r16
    f16c:	1f 93       	push	r17
    f16e:	cf 93       	push	r28
    f170:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    f172:	fb 01       	movw	r30, r22
    f174:	20 81       	ld	r18, Z
    f176:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    f178:	21 15       	cp	r18, r1
    f17a:	31 05       	cpc	r19, r1
    f17c:	19 f4       	brne	.+6      	; 0xf184 <fatfs_tests+0x1e>
        return(0);
    f17e:	80 e0       	ldi	r24, 0x00	; 0
    f180:	90 e0       	ldi	r25, 0x00	; 0
    f182:	77 c0       	rjmp	.+238    	; 0xf272 <fatfs_tests+0x10c>
    f184:	eb 01       	movw	r28, r22
    f186:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    f188:	66 e4       	ldi	r22, 0x46	; 70
    f18a:	78 e0       	ldi	r23, 0x08	; 8
    f18c:	c9 01       	movw	r24, r18
    f18e:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
    f192:	89 2b       	or	r24, r25
    f194:	a1 f3       	breq	.-24     	; 0xf17e <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    f196:	ea 80       	ldd	r14, Y+2	; 0x02
    f198:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    f19a:	e1 14       	cp	r14, r1
    f19c:	f1 04       	cpc	r15, r1
    f19e:	21 f4       	brne	.+8      	; 0xf1a8 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    f1a0:	81 e0       	ldi	r24, 0x01	; 1
    f1a2:	90 e0       	ldi	r25, 0x00	; 0
    f1a4:	c5 de       	rcall	.-630    	; 0xef30 <fatfs_help>
    f1a6:	63 c0       	rjmp	.+198    	; 0xf26e <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    f1a8:	6e e1       	ldi	r22, 0x1E	; 30
    f1aa:	76 e1       	ldi	r23, 0x16	; 22
    f1ac:	c7 01       	movw	r24, r14
    f1ae:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
    f1b2:	89 2b       	or	r24, r25
    f1b4:	a9 f7       	brne	.-22     	; 0xf1a0 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    f1b6:	98 01       	movw	r18, r16
    f1b8:	42 e0       	ldi	r20, 0x02	; 2
    f1ba:	50 e0       	ldi	r21, 0x00	; 0
    f1bc:	6c e4       	ldi	r22, 0x4C	; 76
    f1be:	78 e0       	ldi	r23, 0x08	; 8
    f1c0:	c7 01       	movw	r24, r14
    f1c2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
    f1c6:	89 2b       	or	r24, r25
    f1c8:	51 f1       	breq	.+84     	; 0xf21e <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    f1ca:	1f 93       	push	r17
    f1cc:	0f 93       	push	r16
    f1ce:	1f 92       	push	r1
    f1d0:	82 e0       	ldi	r24, 0x02	; 2
    f1d2:	8f 93       	push	r24
    f1d4:	8c e1       	ldi	r24, 0x1C	; 28
    f1d6:	9b e0       	ldi	r25, 0x0B	; 11
    f1d8:	1f 92       	push	r1
    f1da:	9f 93       	push	r25
    f1dc:	8f 93       	push	r24
    f1de:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f1e2:	7e 01       	movw	r14, r28
    f1e4:	f4 e0       	ldi	r31, 0x04	; 4
    f1e6:	ef 0e       	add	r14, r31
    f1e8:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    f1ea:	8d b7       	in	r24, 0x3d	; 61
    f1ec:	9e b7       	in	r25, 0x3e	; 62
    f1ee:	07 96       	adiw	r24, 0x07	; 7
    f1f0:	0f b6       	in	r0, 0x3f	; 63
    f1f2:	f8 94       	cli
    f1f4:	9e bf       	out	0x3e, r25	; 62
    f1f6:	0f be       	out	0x3f, r0	; 63
    f1f8:	8d bf       	out	0x3d, r24	; 61
    f1fa:	c2 e0       	ldi	r28, 0x02	; 2
    f1fc:	d0 e0       	ldi	r29, 0x00	; 0
    f1fe:	c0 17       	cp	r28, r16
    f200:	d1 07       	cpc	r29, r17
    f202:	3c f4       	brge	.+14     	; 0xf212 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    f204:	f7 01       	movw	r30, r14
    f206:	81 91       	ld	r24, Z+
    f208:	91 91       	ld	r25, Z+
    f20a:	7f 01       	movw	r14, r30
    f20c:	ad de       	rcall	.-678    	; 0xef68 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    f20e:	21 96       	adiw	r28, 0x01	; 1
    f210:	f6 cf       	rjmp	.-20     	; 0xf1fe <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    f212:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    f214:	61 f5       	brne	.+88     	; 0xf26e <fatfs_tests+0x108>
    f216:	80 e3       	ldi	r24, 0x30	; 48
    f218:	97 e1       	ldi	r25, 0x17	; 23
    f21a:	a6 de       	rcall	.-692    	; 0xef68 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    f21c:	28 c0       	rjmp	.+80     	; 0xf26e <fatfs_tests+0x108>
    f21e:	98 01       	movw	r18, r16
    f220:	42 e0       	ldi	r20, 0x02	; 2
    f222:	50 e0       	ldi	r21, 0x00	; 0
    f224:	6f e4       	ldi	r22, 0x4F	; 79
    f226:	78 e0       	ldi	r23, 0x08	; 8
    f228:	c7 01       	movw	r24, r14
    f22a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
    {
        mmc_test();
    f22e:	89 2b       	or	r24, r25
    f230:	11 f0       	breq	.+4      	; 0xf236 <fatfs_tests+0xd0>
    f232:	67 df       	rcall	.-306    	; 0xf102 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    f234:	1c c0       	rjmp	.+56     	; 0xf26e <fatfs_tests+0x108>
    f236:	98 01       	movw	r18, r16
    f238:	42 e0       	ldi	r20, 0x02	; 2
    f23a:	50 e0       	ldi	r21, 0x00	; 0
    f23c:	68 e5       	ldi	r22, 0x58	; 88
    f23e:	78 e0       	ldi	r23, 0x08	; 8
    f240:	c7 01       	movw	r24, r14
    f242:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
    {
        mmc_init(1);
    f246:	89 2b       	or	r24, r25
    f248:	21 f0       	breq	.+8      	; 0xf252 <fatfs_tests+0xec>
    f24a:	81 e0       	ldi	r24, 0x01	; 1
    f24c:	90 e0       	ldi	r25, 0x00	; 0
    f24e:	c4 da       	rcall	.-2680   	; 0xe7d8 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    f250:	0e c0       	rjmp	.+28     	; 0xf26e <fatfs_tests+0x108>
    f252:	98 01       	movw	r18, r16
    f254:	43 e0       	ldi	r20, 0x03	; 3
    f256:	50 e0       	ldi	r21, 0x00	; 0
    f258:	61 e6       	ldi	r22, 0x61	; 97
    f25a:	78 e0       	ldi	r23, 0x08	; 8
    f25c:	c7 01       	movw	r24, r14
    f25e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
    f262:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    f264:	09 f4       	brne	.+2      	; 0xf268 <fatfs_tests+0x102>
    f266:	8b cf       	rjmp	.-234    	; 0xf17e <fatfs_tests+0x18>
    f268:	8c 81       	ldd	r24, Y+4	; 0x04
    f26a:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    f26c:	6e dc       	rcall	.-1828   	; 0xeb4a <fatfs_status>
    f26e:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    f270:	90 e0       	ldi	r25, 0x00	; 0
    f272:	cd b7       	in	r28, 0x3d	; 61
    f274:	de b7       	in	r29, 0x3e	; 62
    f276:	e6 e0       	ldi	r30, 0x06	; 6
    f278:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000f27c <fatfs_getc>:
    f27c:	8f 92       	push	r8
    f27e:	9f 92       	push	r9
    f280:	af 92       	push	r10
    f282:	bf 92       	push	r11
    f284:	ef 92       	push	r14
    f286:	ff 92       	push	r15
    f288:	0f 93       	push	r16
    f28a:	1f 93       	push	r17
    f28c:	cf 93       	push	r28
    f28e:	df 93       	push	r29
    f290:	00 d0       	rcall	.+0      	; 0xf292 <fatfs_getc+0x16>
    f292:	1f 92       	push	r1
    f294:	cd b7       	in	r28, 0x3d	; 61
    f296:	de b7       	in	r29, 0x3e	; 62
    f298:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f29c:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f2a0:	00 97       	sbiw	r24, 0x00	; 0
    f2a2:	39 f4       	brne	.+14     	; 0xf2b2 <fatfs_getc+0x36>
    f2a4:	89 e0       	ldi	r24, 0x09	; 9
    f2a6:	90 e0       	ldi	r25, 0x00	; 0
    f2a8:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f2ac:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f2b0:	2f c0       	rjmp	.+94     	; 0xf310 <fatfs_getc+0x94>
    f2b2:	fc 01       	movw	r30, r24
    f2b4:	e4 84       	ldd	r14, Z+12	; 0x0c
    f2b6:	f5 84       	ldd	r15, Z+13	; 0x0d
    f2b8:	e1 14       	cp	r14, r1
    f2ba:	f1 04       	cpc	r15, r1
    f2bc:	99 f3       	breq	.-26     	; 0xf2a4 <fatfs_getc+0x28>
    f2be:	8c 01       	movw	r16, r24
    f2c0:	9e 01       	movw	r18, r28
    f2c2:	2f 5f       	subi	r18, 0xFF	; 255
    f2c4:	3f 4f       	sbci	r19, 0xFF	; 255
    f2c6:	41 e0       	ldi	r20, 0x01	; 1
    f2c8:	50 e0       	ldi	r21, 0x00	; 0
    f2ca:	be 01       	movw	r22, r28
    f2cc:	6d 5f       	subi	r22, 0xFD	; 253
    f2ce:	7f 4f       	sbci	r23, 0xFF	; 255
    f2d0:	c7 01       	movw	r24, r14
    f2d2:	0e 94 87 5a 	call	0xb50e	; 0xb50e <f_read>
    f2d6:	00 97       	sbiw	r24, 0x00	; 0
    f2d8:	31 f4       	brne	.+12     	; 0xf2e6 <fatfs_getc+0x6a>
    f2da:	29 81       	ldd	r18, Y+1	; 0x01
    f2dc:	3a 81       	ldd	r19, Y+2	; 0x02
    f2de:	21 30       	cpi	r18, 0x01	; 1
    f2e0:	31 05       	cpc	r19, r1
    f2e2:	c9 f0       	breq	.+50     	; 0xf316 <fatfs_getc+0x9a>
    f2e4:	03 c0       	rjmp	.+6      	; 0xf2ec <fatfs_getc+0x70>
    f2e6:	84 31       	cpi	r24, 0x14	; 20
    f2e8:	91 05       	cpc	r25, r1
    f2ea:	40 f4       	brcc	.+16     	; 0xf2fc <fatfs_getc+0x80>
    f2ec:	fc 01       	movw	r30, r24
    f2ee:	ec 5f       	subi	r30, 0xFC	; 252
    f2f0:	f8 4f       	sbci	r31, 0xF8	; 248
    f2f2:	80 81       	ld	r24, Z
    f2f4:	08 2e       	mov	r0, r24
    f2f6:	00 0c       	add	r0, r0
    f2f8:	99 0b       	sbc	r25, r25
    f2fa:	02 c0       	rjmp	.+4      	; 0xf300 <fatfs_getc+0x84>
    f2fc:	83 e2       	ldi	r24, 0x23	; 35
    f2fe:	90 e0       	ldi	r25, 0x00	; 0
    f300:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f304:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f308:	f8 01       	movw	r30, r16
    f30a:	83 81       	ldd	r24, Z+3	; 0x03
    f30c:	80 62       	ori	r24, 0x20	; 32
    f30e:	83 83       	std	Z+3, r24	; 0x03
    f310:	8f ef       	ldi	r24, 0xFF	; 255
    f312:	9f ef       	ldi	r25, 0xFF	; 255
    f314:	28 c0       	rjmp	.+80     	; 0xf366 <fatfs_getc+0xea>
    f316:	8b 81       	ldd	r24, Y+3	; 0x03
    f318:	8d 30       	cpi	r24, 0x0D	; 13
    f31a:	01 f5       	brne	.+64     	; 0xf35c <fatfs_getc+0xe0>
    f31c:	f7 01       	movw	r30, r14
    f31e:	80 88       	ldd	r8, Z+16	; 0x10
    f320:	91 88       	ldd	r9, Z+17	; 0x11
    f322:	a2 88       	ldd	r10, Z+18	; 0x12
    f324:	b3 88       	ldd	r11, Z+19	; 0x13
    f326:	9e 01       	movw	r18, r28
    f328:	2f 5f       	subi	r18, 0xFF	; 255
    f32a:	3f 4f       	sbci	r19, 0xFF	; 255
    f32c:	41 e0       	ldi	r20, 0x01	; 1
    f32e:	50 e0       	ldi	r21, 0x00	; 0
    f330:	be 01       	movw	r22, r28
    f332:	6d 5f       	subi	r22, 0xFD	; 253
    f334:	7f 4f       	sbci	r23, 0xFF	; 255
    f336:	c7 01       	movw	r24, r14
    f338:	0e 94 87 5a 	call	0xb50e	; 0xb50e <f_read>
    f33c:	89 2b       	or	r24, r25
    f33e:	89 f4       	brne	.+34     	; 0xf362 <fatfs_getc+0xe6>
    f340:	89 81       	ldd	r24, Y+1	; 0x01
    f342:	9a 81       	ldd	r25, Y+2	; 0x02
    f344:	01 97       	sbiw	r24, 0x01	; 1
    f346:	69 f4       	brne	.+26     	; 0xf362 <fatfs_getc+0xe6>
    f348:	8b 81       	ldd	r24, Y+3	; 0x03
    f34a:	8a 30       	cpi	r24, 0x0A	; 10
    f34c:	31 f0       	breq	.+12     	; 0xf35a <fatfs_getc+0xde>
    f34e:	b5 01       	movw	r22, r10
    f350:	a4 01       	movw	r20, r8
    f352:	c7 01       	movw	r24, r14
    f354:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <f_lseek>
    f358:	04 c0       	rjmp	.+8      	; 0xf362 <fatfs_getc+0xe6>
    f35a:	8b 83       	std	Y+3, r24	; 0x03
    f35c:	8b 81       	ldd	r24, Y+3	; 0x03
    f35e:	90 e0       	ldi	r25, 0x00	; 0
    f360:	02 c0       	rjmp	.+4      	; 0xf366 <fatfs_getc+0xea>
    f362:	8a e0       	ldi	r24, 0x0A	; 10
    f364:	90 e0       	ldi	r25, 0x00	; 0
    f366:	0f 90       	pop	r0
    f368:	0f 90       	pop	r0
    f36a:	0f 90       	pop	r0
    f36c:	df 91       	pop	r29
    f36e:	cf 91       	pop	r28
    f370:	1f 91       	pop	r17
    f372:	0f 91       	pop	r16
    f374:	ff 90       	pop	r15
    f376:	ef 90       	pop	r14
    f378:	bf 90       	pop	r11
    f37a:	af 90       	pop	r10
    f37c:	9f 90       	pop	r9
    f37e:	8f 90       	pop	r8
    f380:	08 95       	ret

0000f382 <fatfs_putc>:
    f382:	a3 e0       	ldi	r26, 0x03	; 3
    f384:	b0 e0       	ldi	r27, 0x00	; 0
    f386:	e7 ec       	ldi	r30, 0xC7	; 199
    f388:	f9 e7       	ldi	r31, 0x79	; 121
    f38a:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    f38e:	8b 83       	std	Y+3, r24	; 0x03
    f390:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f394:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f398:	61 15       	cp	r22, r1
    f39a:	71 05       	cpc	r23, r1
    f39c:	39 f4       	brne	.+14     	; 0xf3ac <fatfs_putc+0x2a>
    f39e:	89 e0       	ldi	r24, 0x09	; 9
    f3a0:	90 e0       	ldi	r25, 0x00	; 0
    f3a2:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f3a6:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f3aa:	2d c0       	rjmp	.+90     	; 0xf406 <fatfs_putc+0x84>
    f3ac:	fb 01       	movw	r30, r22
    f3ae:	84 85       	ldd	r24, Z+12	; 0x0c
    f3b0:	95 85       	ldd	r25, Z+13	; 0x0d
    f3b2:	00 97       	sbiw	r24, 0x00	; 0
    f3b4:	a1 f3       	breq	.-24     	; 0xf39e <fatfs_putc+0x1c>
    f3b6:	8b 01       	movw	r16, r22
    f3b8:	9e 01       	movw	r18, r28
    f3ba:	2f 5f       	subi	r18, 0xFF	; 255
    f3bc:	3f 4f       	sbci	r19, 0xFF	; 255
    f3be:	41 e0       	ldi	r20, 0x01	; 1
    f3c0:	50 e0       	ldi	r21, 0x00	; 0
    f3c2:	be 01       	movw	r22, r28
    f3c4:	6d 5f       	subi	r22, 0xFD	; 253
    f3c6:	7f 4f       	sbci	r23, 0xFF	; 255
    f3c8:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <f_write>
    f3cc:	00 97       	sbiw	r24, 0x00	; 0
    f3ce:	31 f4       	brne	.+12     	; 0xf3dc <fatfs_putc+0x5a>
    f3d0:	29 81       	ldd	r18, Y+1	; 0x01
    f3d2:	3a 81       	ldd	r19, Y+2	; 0x02
    f3d4:	21 30       	cpi	r18, 0x01	; 1
    f3d6:	31 05       	cpc	r19, r1
    f3d8:	c9 f0       	breq	.+50     	; 0xf40c <fatfs_putc+0x8a>
    f3da:	03 c0       	rjmp	.+6      	; 0xf3e2 <fatfs_putc+0x60>
    f3dc:	84 31       	cpi	r24, 0x14	; 20
    f3de:	91 05       	cpc	r25, r1
    f3e0:	40 f4       	brcc	.+16     	; 0xf3f2 <fatfs_putc+0x70>
    f3e2:	fc 01       	movw	r30, r24
    f3e4:	ec 5f       	subi	r30, 0xFC	; 252
    f3e6:	f8 4f       	sbci	r31, 0xF8	; 248
    f3e8:	80 81       	ld	r24, Z
    f3ea:	08 2e       	mov	r0, r24
    f3ec:	00 0c       	add	r0, r0
    f3ee:	99 0b       	sbc	r25, r25
    f3f0:	02 c0       	rjmp	.+4      	; 0xf3f6 <fatfs_putc+0x74>
    f3f2:	83 e2       	ldi	r24, 0x23	; 35
    f3f4:	90 e0       	ldi	r25, 0x00	; 0
    f3f6:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f3fa:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f3fe:	f8 01       	movw	r30, r16
    f400:	83 81       	ldd	r24, Z+3	; 0x03
    f402:	80 62       	ori	r24, 0x20	; 32
    f404:	83 83       	std	Z+3, r24	; 0x03
    f406:	8f ef       	ldi	r24, 0xFF	; 255
    f408:	9f ef       	ldi	r25, 0xFF	; 255
    f40a:	02 c0       	rjmp	.+4      	; 0xf410 <fatfs_putc+0x8e>
    f40c:	8b 81       	ldd	r24, Y+3	; 0x03
    f40e:	90 e0       	ldi	r25, 0x00	; 0
    f410:	23 96       	adiw	r28, 0x03	; 3
    f412:	e4 e0       	ldi	r30, 0x04	; 4
    f414:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

0000f418 <fgetc>:
    f418:	cf 93       	push	r28
    f41a:	df 93       	push	r29
    f41c:	ec 01       	movw	r28, r24
    f41e:	00 97       	sbiw	r24, 0x00	; 0
    f420:	39 f4       	brne	.+14     	; 0xf430 <fgetc+0x18>
    f422:	89 e0       	ldi	r24, 0x09	; 9
    f424:	90 e0       	ldi	r25, 0x00	; 0
    f426:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f42a:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f42e:	40 c0       	rjmp	.+128    	; 0xf4b0 <fgetc+0x98>
    f430:	2b 81       	ldd	r18, Y+3	; 0x03
    f432:	20 ff       	sbrs	r18, 0
    f434:	3d c0       	rjmp	.+122    	; 0xf4b0 <fgetc+0x98>
    f436:	26 ff       	sbrs	r18, 6
    f438:	0a c0       	rjmp	.+20     	; 0xf44e <fgetc+0x36>
    f43a:	2f 7b       	andi	r18, 0xBF	; 191
    f43c:	2b 83       	std	Y+3, r18	; 0x03
    f43e:	8e 81       	ldd	r24, Y+6	; 0x06
    f440:	9f 81       	ldd	r25, Y+7	; 0x07
    f442:	01 96       	adiw	r24, 0x01	; 1
    f444:	9f 83       	std	Y+7, r25	; 0x07
    f446:	8e 83       	std	Y+6, r24	; 0x06
    f448:	8a 81       	ldd	r24, Y+2	; 0x02
    f44a:	90 e0       	ldi	r25, 0x00	; 0
    f44c:	33 c0       	rjmp	.+102    	; 0xf4b4 <fgetc+0x9c>
    f44e:	22 ff       	sbrs	r18, 2
    f450:	0d c0       	rjmp	.+26     	; 0xf46c <fgetc+0x54>
    f452:	e8 81       	ld	r30, Y
    f454:	f9 81       	ldd	r31, Y+1	; 0x01
    f456:	80 81       	ld	r24, Z
    f458:	90 e0       	ldi	r25, 0x00	; 0
    f45a:	00 97       	sbiw	r24, 0x00	; 0
    f45c:	19 f4       	brne	.+6      	; 0xf464 <fgetc+0x4c>
    f45e:	20 62       	ori	r18, 0x20	; 32
    f460:	2b 83       	std	Y+3, r18	; 0x03
    f462:	26 c0       	rjmp	.+76     	; 0xf4b0 <fgetc+0x98>
    f464:	31 96       	adiw	r30, 0x01	; 1
    f466:	f9 83       	std	Y+1, r31	; 0x01
    f468:	e8 83       	st	Y, r30
    f46a:	1b c0       	rjmp	.+54     	; 0xf4a2 <fgetc+0x8a>
    f46c:	ea 85       	ldd	r30, Y+10	; 0x0a
    f46e:	fb 85       	ldd	r31, Y+11	; 0x0b
    f470:	30 97       	sbiw	r30, 0x00	; 0
    f472:	59 f4       	brne	.+22     	; 0xf48a <fgetc+0x72>
    f474:	88 e7       	ldi	r24, 0x78	; 120
    f476:	9c e0       	ldi	r25, 0x0C	; 12
    f478:	1f 92       	push	r1
    f47a:	9f 93       	push	r25
    f47c:	8f 93       	push	r24
    f47e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f482:	0f 90       	pop	r0
    f484:	0f 90       	pop	r0
    f486:	0f 90       	pop	r0
    f488:	13 c0       	rjmp	.+38     	; 0xf4b0 <fgetc+0x98>
    f48a:	09 95       	icall
    f48c:	97 ff       	sbrs	r25, 7
    f48e:	09 c0       	rjmp	.+18     	; 0xf4a2 <fgetc+0x8a>
    f490:	2b 81       	ldd	r18, Y+3	; 0x03
    f492:	02 96       	adiw	r24, 0x02	; 2
    f494:	11 f0       	breq	.+4      	; 0xf49a <fgetc+0x82>
    f496:	80 e2       	ldi	r24, 0x20	; 32
    f498:	01 c0       	rjmp	.+2      	; 0xf49c <fgetc+0x84>
    f49a:	80 e1       	ldi	r24, 0x10	; 16
    f49c:	82 2b       	or	r24, r18
    f49e:	8b 83       	std	Y+3, r24	; 0x03
    f4a0:	07 c0       	rjmp	.+14     	; 0xf4b0 <fgetc+0x98>
    f4a2:	2e 81       	ldd	r18, Y+6	; 0x06
    f4a4:	3f 81       	ldd	r19, Y+7	; 0x07
    f4a6:	2f 5f       	subi	r18, 0xFF	; 255
    f4a8:	3f 4f       	sbci	r19, 0xFF	; 255
    f4aa:	3f 83       	std	Y+7, r19	; 0x07
    f4ac:	2e 83       	std	Y+6, r18	; 0x06
    f4ae:	02 c0       	rjmp	.+4      	; 0xf4b4 <fgetc+0x9c>
    f4b0:	8f ef       	ldi	r24, 0xFF	; 255
    f4b2:	9f ef       	ldi	r25, 0xFF	; 255
    f4b4:	df 91       	pop	r29
    f4b6:	cf 91       	pop	r28
    f4b8:	08 95       	ret

0000f4ba <fputc>:
    f4ba:	cf 93       	push	r28
    f4bc:	df 93       	push	r29
    f4be:	eb 01       	movw	r28, r22
    f4c0:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f4c4:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f4c8:	20 91 c4 1c 	lds	r18, 0x1CC4	; 0x801cc4 <__iob+0x2>
    f4cc:	30 91 c5 1c 	lds	r19, 0x1CC5	; 0x801cc5 <__iob+0x3>
    f4d0:	62 17       	cp	r22, r18
    f4d2:	73 07       	cpc	r23, r19
    f4d4:	49 f0       	breq	.+18     	; 0xf4e8 <fputc+0x2e>
    f4d6:	20 91 c6 1c 	lds	r18, 0x1CC6	; 0x801cc6 <__iob+0x4>
    f4da:	30 91 c7 1c 	lds	r19, 0x1CC7	; 0x801cc7 <__iob+0x5>
    f4de:	62 17       	cp	r22, r18
    f4e0:	73 07       	cpc	r23, r19
    f4e2:	11 f0       	breq	.+4      	; 0xf4e8 <fputc+0x2e>
    f4e4:	4e df       	rcall	.-356    	; 0xf382 <fatfs_putc>
    f4e6:	33 c0       	rjmp	.+102    	; 0xf54e <fputc+0x94>
    f4e8:	2b 81       	ldd	r18, Y+3	; 0x03
    f4ea:	21 ff       	sbrs	r18, 1
    f4ec:	2e c0       	rjmp	.+92     	; 0xf54a <fputc+0x90>
    f4ee:	22 ff       	sbrs	r18, 2
    f4f0:	10 c0       	rjmp	.+32     	; 0xf512 <fputc+0x58>
    f4f2:	4e 81       	ldd	r20, Y+6	; 0x06
    f4f4:	5f 81       	ldd	r21, Y+7	; 0x07
    f4f6:	2c 81       	ldd	r18, Y+4	; 0x04
    f4f8:	3d 81       	ldd	r19, Y+5	; 0x05
    f4fa:	42 17       	cp	r20, r18
    f4fc:	53 07       	cpc	r21, r19
    f4fe:	f4 f4       	brge	.+60     	; 0xf53c <fputc+0x82>
    f500:	e8 81       	ld	r30, Y
    f502:	f9 81       	ldd	r31, Y+1	; 0x01
    f504:	9f 01       	movw	r18, r30
    f506:	2f 5f       	subi	r18, 0xFF	; 255
    f508:	3f 4f       	sbci	r19, 0xFF	; 255
    f50a:	39 83       	std	Y+1, r19	; 0x01
    f50c:	28 83       	st	Y, r18
    f50e:	80 83       	st	Z, r24
    f510:	15 c0       	rjmp	.+42     	; 0xf53c <fputc+0x82>
    f512:	e8 85       	ldd	r30, Y+8	; 0x08
    f514:	f9 85       	ldd	r31, Y+9	; 0x09
    f516:	30 97       	sbiw	r30, 0x00	; 0
    f518:	59 f4       	brne	.+22     	; 0xf530 <fputc+0x76>
    f51a:	80 e6       	ldi	r24, 0x60	; 96
    f51c:	9c e0       	ldi	r25, 0x0C	; 12
    f51e:	1f 92       	push	r1
    f520:	9f 93       	push	r25
    f522:	8f 93       	push	r24
    f524:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f528:	0f 90       	pop	r0
    f52a:	0f 90       	pop	r0
    f52c:	0f 90       	pop	r0
    f52e:	0d c0       	rjmp	.+26     	; 0xf54a <fputc+0x90>
    f530:	be 01       	movw	r22, r28
    f532:	09 95       	icall
    f534:	8f 3f       	cpi	r24, 0xFF	; 255
    f536:	2f ef       	ldi	r18, 0xFF	; 255
    f538:	92 07       	cpc	r25, r18
    f53a:	39 f0       	breq	.+14     	; 0xf54a <fputc+0x90>
    f53c:	2e 81       	ldd	r18, Y+6	; 0x06
    f53e:	3f 81       	ldd	r19, Y+7	; 0x07
    f540:	2f 5f       	subi	r18, 0xFF	; 255
    f542:	3f 4f       	sbci	r19, 0xFF	; 255
    f544:	3f 83       	std	Y+7, r19	; 0x07
    f546:	2e 83       	std	Y+6, r18	; 0x06
    f548:	02 c0       	rjmp	.+4      	; 0xf54e <fputc+0x94>
    f54a:	8f ef       	ldi	r24, 0xFF	; 255
    f54c:	9f ef       	ldi	r25, 0xFF	; 255
    f54e:	df 91       	pop	r29
    f550:	cf 91       	pop	r28
    f552:	08 95       	ret

0000f554 <_fprintf_putc>:
    f554:	fc 01       	movw	r30, r24
    f556:	86 2f       	mov	r24, r22
    f558:	26 81       	ldd	r18, Z+6	; 0x06
    f55a:	37 81       	ldd	r19, Z+7	; 0x07
    f55c:	2f 5f       	subi	r18, 0xFF	; 255
    f55e:	3f 4f       	sbci	r19, 0xFF	; 255
    f560:	37 83       	std	Z+7, r19	; 0x07
    f562:	26 83       	std	Z+6, r18	; 0x06
    f564:	62 81       	ldd	r22, Z+2	; 0x02
    f566:	73 81       	ldd	r23, Z+3	; 0x03
    f568:	90 e0       	ldi	r25, 0x00	; 0
    f56a:	a7 cf       	rjmp	.-178    	; 0xf4ba <fputc>
    f56c:	08 95       	ret

0000f56e <getchar>:
    f56e:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    f572:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    f576:	50 cf       	rjmp	.-352    	; 0xf418 <fgetc>
    f578:	08 95       	ret

0000f57a <putchar>:
    f57a:	60 91 c4 1c 	lds	r22, 0x1CC4	; 0x801cc4 <__iob+0x2>
    f57e:	70 91 c5 1c 	lds	r23, 0x1CC5	; 0x801cc5 <__iob+0x3>
    f582:	9b cf       	rjmp	.-202    	; 0xf4ba <fputc>
    f584:	08 95       	ret

0000f586 <fgets>:
    f586:	a0 e0       	ldi	r26, 0x00	; 0
    f588:	b0 e0       	ldi	r27, 0x00	; 0
    f58a:	e9 ec       	ldi	r30, 0xC9	; 201
    f58c:	fa e7       	ldi	r31, 0x7A	; 122
    f58e:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    f592:	7c 01       	movw	r14, r24
    f594:	6a 01       	movw	r12, r20
    f596:	8b 01       	movw	r16, r22
    f598:	c0 e0       	ldi	r28, 0x00	; 0
    f59a:	d0 e0       	ldi	r29, 0x00	; 0
    f59c:	01 15       	cp	r16, r1
    f59e:	11 05       	cpc	r17, r1
    f5a0:	41 f0       	breq	.+16     	; 0xf5b2 <fgets+0x2c>
    f5a2:	c6 01       	movw	r24, r12
    f5a4:	39 df       	rcall	.-398    	; 0xf418 <fgetc>
    f5a6:	8f 3f       	cpi	r24, 0xFF	; 255
    f5a8:	2f ef       	ldi	r18, 0xFF	; 255
    f5aa:	92 07       	cpc	r25, r18
    f5ac:	39 f4       	brne	.+14     	; 0xf5bc <fgets+0x36>
    f5ae:	20 97       	sbiw	r28, 0x00	; 0
    f5b0:	b9 f0       	breq	.+46     	; 0xf5e0 <fgets+0x5a>
    f5b2:	ce 0d       	add	r28, r14
    f5b4:	df 1d       	adc	r29, r15
    f5b6:	18 82       	st	Y, r1
    f5b8:	c7 01       	movw	r24, r14
    f5ba:	14 c0       	rjmp	.+40     	; 0xf5e4 <fgets+0x5e>
    f5bc:	8a 30       	cpi	r24, 0x0A	; 10
    f5be:	91 05       	cpc	r25, r1
    f5c0:	c1 f3       	breq	.-16     	; 0xf5b2 <fgets+0x2c>
    f5c2:	88 30       	cpi	r24, 0x08	; 8
    f5c4:	91 05       	cpc	r25, r1
    f5c6:	21 f4       	brne	.+8      	; 0xf5d0 <fgets+0x4a>
    f5c8:	20 97       	sbiw	r28, 0x00	; 0
    f5ca:	39 f0       	breq	.+14     	; 0xf5da <fgets+0x54>
    f5cc:	21 97       	sbiw	r28, 0x01	; 1
    f5ce:	05 c0       	rjmp	.+10     	; 0xf5da <fgets+0x54>
    f5d0:	f7 01       	movw	r30, r14
    f5d2:	ec 0f       	add	r30, r28
    f5d4:	fd 1f       	adc	r31, r29
    f5d6:	80 83       	st	Z, r24
    f5d8:	21 96       	adiw	r28, 0x01	; 1
    f5da:	01 50       	subi	r16, 0x01	; 1
    f5dc:	11 09       	sbc	r17, r1
    f5de:	de cf       	rjmp	.-68     	; 0xf59c <fgets+0x16>
    f5e0:	80 e0       	ldi	r24, 0x00	; 0
    f5e2:	90 e0       	ldi	r25, 0x00	; 0
    f5e4:	cd b7       	in	r28, 0x3d	; 61
    f5e6:	de b7       	in	r29, 0x3e	; 62
    f5e8:	e8 e0       	ldi	r30, 0x08	; 8
    f5ea:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000f5ee <fputs>:
    f5ee:	0f 93       	push	r16
    f5f0:	1f 93       	push	r17
    f5f2:	cf 93       	push	r28
    f5f4:	df 93       	push	r29
    f5f6:	8b 01       	movw	r16, r22
    f5f8:	ec 01       	movw	r28, r24
    f5fa:	89 91       	ld	r24, Y+
    f5fc:	88 23       	and	r24, r24
    f5fe:	41 f0       	breq	.+16     	; 0xf610 <fputs+0x22>
    f600:	b8 01       	movw	r22, r16
    f602:	90 e0       	ldi	r25, 0x00	; 0
    f604:	5a df       	rcall	.-332    	; 0xf4ba <fputc>
    f606:	8f 3f       	cpi	r24, 0xFF	; 255
    f608:	2f ef       	ldi	r18, 0xFF	; 255
    f60a:	92 07       	cpc	r25, r18
    f60c:	b1 f7       	brne	.-20     	; 0xf5fa <fputs+0xc>
    f60e:	02 c0       	rjmp	.+4      	; 0xf614 <fputs+0x26>
    f610:	80 e0       	ldi	r24, 0x00	; 0
    f612:	90 e0       	ldi	r25, 0x00	; 0
    f614:	df 91       	pop	r29
    f616:	cf 91       	pop	r28
    f618:	1f 91       	pop	r17
    f61a:	0f 91       	pop	r16
    f61c:	08 95       	ret

0000f61e <puts>:
    f61e:	cf 93       	push	r28
    f620:	df 93       	push	r29
    f622:	ec 01       	movw	r28, r24
    f624:	89 91       	ld	r24, Y+
    f626:	60 91 c4 1c 	lds	r22, 0x1CC4	; 0x801cc4 <__iob+0x2>
    f62a:	70 91 c5 1c 	lds	r23, 0x1CC5	; 0x801cc5 <__iob+0x3>
    f62e:	88 23       	and	r24, r24
    f630:	39 f0       	breq	.+14     	; 0xf640 <puts+0x22>
    f632:	90 e0       	ldi	r25, 0x00	; 0
    f634:	42 df       	rcall	.-380    	; 0xf4ba <fputc>
    f636:	8f 3f       	cpi	r24, 0xFF	; 255
    f638:	2f ef       	ldi	r18, 0xFF	; 255
    f63a:	92 07       	cpc	r25, r18
    f63c:	99 f7       	brne	.-26     	; 0xf624 <puts+0x6>
    f63e:	03 c0       	rjmp	.+6      	; 0xf646 <puts+0x28>
    f640:	8a e0       	ldi	r24, 0x0A	; 10
    f642:	90 e0       	ldi	r25, 0x00	; 0
    f644:	3a df       	rcall	.-396    	; 0xf4ba <fputc>
    f646:	df 91       	pop	r29
    f648:	cf 91       	pop	r28
    f64a:	08 95       	ret

0000f64c <fileno>:
    f64c:	00 97       	sbiw	r24, 0x00	; 0
    f64e:	39 f4       	brne	.+14     	; 0xf65e <fileno+0x12>
    f650:	89 e0       	ldi	r24, 0x09	; 9
    f652:	90 e0       	ldi	r25, 0x00	; 0
    f654:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f658:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f65c:	0e c0       	rjmp	.+28     	; 0xf67a <fileno+0x2e>
    f65e:	e2 ec       	ldi	r30, 0xC2	; 194
    f660:	fc e1       	ldi	r31, 0x1C	; 28
    f662:	20 e0       	ldi	r18, 0x00	; 0
    f664:	30 e0       	ldi	r19, 0x00	; 0
    f666:	41 91       	ld	r20, Z+
    f668:	51 91       	ld	r21, Z+
    f66a:	84 17       	cp	r24, r20
    f66c:	95 07       	cpc	r25, r21
    f66e:	41 f0       	breq	.+16     	; 0xf680 <fileno+0x34>
    f670:	2f 5f       	subi	r18, 0xFF	; 255
    f672:	3f 4f       	sbci	r19, 0xFF	; 255
    f674:	20 31       	cpi	r18, 0x10	; 16
    f676:	31 05       	cpc	r19, r1
    f678:	b1 f7       	brne	.-20     	; 0xf666 <fileno+0x1a>
    f67a:	8f ef       	ldi	r24, 0xFF	; 255
    f67c:	9f ef       	ldi	r25, 0xFF	; 255
    f67e:	08 95       	ret
    f680:	c9 01       	movw	r24, r18
    f682:	08 95       	ret

0000f684 <fileno_to_stream>:
    f684:	80 31       	cpi	r24, 0x10	; 16
    f686:	91 05       	cpc	r25, r1
    f688:	48 f4       	brcc	.+18     	; 0xf69c <fileno_to_stream+0x18>
    f68a:	88 0f       	add	r24, r24
    f68c:	99 1f       	adc	r25, r25
    f68e:	fc 01       	movw	r30, r24
    f690:	ee 53       	subi	r30, 0x3E	; 62
    f692:	f3 4e       	sbci	r31, 0xE3	; 227
    f694:	80 81       	ld	r24, Z
    f696:	91 81       	ldd	r25, Z+1	; 0x01
    f698:	00 97       	sbiw	r24, 0x00	; 0
    f69a:	41 f4       	brne	.+16     	; 0xf6ac <fileno_to_stream+0x28>
    f69c:	89 e0       	ldi	r24, 0x09	; 9
    f69e:	90 e0       	ldi	r25, 0x00	; 0
    f6a0:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f6a4:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f6a8:	80 e0       	ldi	r24, 0x00	; 0
    f6aa:	90 e0       	ldi	r25, 0x00	; 0
    f6ac:	08 95       	ret

0000f6ae <mctime>:
    f6ae:	a4 e0       	ldi	r26, 0x04	; 4
    f6b0:	b0 e0       	ldi	r27, 0x00	; 0
    f6b2:	ed e5       	ldi	r30, 0x5D	; 93
    f6b4:	fb e7       	ldi	r31, 0x7B	; 123
    f6b6:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    f6ba:	69 83       	std	Y+1, r22	; 0x01
    f6bc:	7a 83       	std	Y+2, r23	; 0x02
    f6be:	8b 83       	std	Y+3, r24	; 0x03
    f6c0:	9c 83       	std	Y+4, r25	; 0x04
    f6c2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f6c6:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f6ca:	ce 01       	movw	r24, r28
    f6cc:	01 96       	adiw	r24, 0x01	; 1
    f6ce:	0e 94 70 3d 	call	0x7ae0	; 0x7ae0 <ctime_gm>
    f6d2:	fc 01       	movw	r30, r24
    f6d4:	01 90       	ld	r0, Z+
    f6d6:	00 20       	and	r0, r0
    f6d8:	e9 f7       	brne	.-6      	; 0xf6d4 <mctime+0x26>
    f6da:	31 97       	sbiw	r30, 0x01	; 1
    f6dc:	e8 1b       	sub	r30, r24
    f6de:	f9 0b       	sbc	r31, r25
    f6e0:	39 f0       	breq	.+14     	; 0xf6f0 <mctime+0x42>
    f6e2:	31 97       	sbiw	r30, 0x01	; 1
    f6e4:	e8 0f       	add	r30, r24
    f6e6:	f9 1f       	adc	r31, r25
    f6e8:	20 81       	ld	r18, Z
    f6ea:	2a 30       	cpi	r18, 0x0A	; 10
    f6ec:	09 f4       	brne	.+2      	; 0xf6f0 <mctime+0x42>
    f6ee:	10 82       	st	Z, r1
    f6f0:	24 96       	adiw	r28, 0x04	; 4
    f6f2:	e2 e0       	ldi	r30, 0x02	; 2
    f6f4:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000f6f8 <dump_stat>:
    f6f8:	cf 92       	push	r12
    f6fa:	df 92       	push	r13
    f6fc:	ef 92       	push	r14
    f6fe:	ff 92       	push	r15
    f700:	cf 93       	push	r28
    f702:	df 93       	push	r29
    f704:	ec 01       	movw	r28, r24
    f706:	c8 84       	ldd	r12, Y+8	; 0x08
    f708:	d9 84       	ldd	r13, Y+9	; 0x09
    f70a:	ea 84       	ldd	r14, Y+10	; 0x0a
    f70c:	fb 84       	ldd	r15, Y+11	; 0x0b
    f70e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f710:	8f 93       	push	r24
    f712:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f714:	8f 93       	push	r24
    f716:	89 8d       	ldd	r24, Y+25	; 0x19
    f718:	8f 93       	push	r24
    f71a:	88 8d       	ldd	r24, Y+24	; 0x18
    f71c:	8f 93       	push	r24
    f71e:	87 e4       	ldi	r24, 0x47	; 71
    f720:	9c e0       	ldi	r25, 0x0C	; 12
    f722:	1f 92       	push	r1
    f724:	9f 93       	push	r25
    f726:	8f 93       	push	r24
    f728:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f72c:	8e e3       	ldi	r24, 0x3E	; 62
    f72e:	9c e0       	ldi	r25, 0x0C	; 12
    f730:	1f 92       	push	r1
    f732:	9f 93       	push	r25
    f734:	8f 93       	push	r24
    f736:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f73a:	d7 01       	movw	r26, r14
    f73c:	c6 01       	movw	r24, r12
    f73e:	88 27       	eor	r24, r24
    f740:	90 7f       	andi	r25, 0xF0	; 240
    f742:	aa 27       	eor	r26, r26
    f744:	bb 27       	eor	r27, r27
    f746:	2d b7       	in	r18, 0x3d	; 61
    f748:	3e b7       	in	r19, 0x3e	; 62
    f74a:	26 5f       	subi	r18, 0xF6	; 246
    f74c:	3f 4f       	sbci	r19, 0xFF	; 255
    f74e:	0f b6       	in	r0, 0x3f	; 63
    f750:	f8 94       	cli
    f752:	3e bf       	out	0x3e, r19	; 62
    f754:	0f be       	out	0x3f, r0	; 63
    f756:	2d bf       	out	0x3d, r18	; 61
    f758:	81 15       	cp	r24, r1
    f75a:	30 e4       	ldi	r19, 0x40	; 64
    f75c:	93 07       	cpc	r25, r19
    f75e:	a1 05       	cpc	r26, r1
    f760:	b1 05       	cpc	r27, r1
    f762:	19 f4       	brne	.+6      	; 0xf76a <dump_stat+0x72>
    f764:	89 e3       	ldi	r24, 0x39	; 57
    f766:	9c e0       	ldi	r25, 0x0C	; 12
    f768:	0a c0       	rjmp	.+20     	; 0xf77e <dump_stat+0x86>
    f76a:	81 15       	cp	r24, r1
    f76c:	90 48       	sbci	r25, 0x80	; 128
    f76e:	a1 05       	cpc	r26, r1
    f770:	b1 05       	cpc	r27, r1
    f772:	19 f4       	brne	.+6      	; 0xf77a <dump_stat+0x82>
    f774:	83 e3       	ldi	r24, 0x33	; 51
    f776:	9c e0       	ldi	r25, 0x0C	; 12
    f778:	02 c0       	rjmp	.+4      	; 0xf77e <dump_stat+0x86>
    f77a:	8a e2       	ldi	r24, 0x2A	; 42
    f77c:	9c e0       	ldi	r25, 0x0C	; 12
    f77e:	1f 92       	push	r1
    f780:	9f 93       	push	r25
    f782:	8f 93       	push	r24
    f784:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f788:	0f 90       	pop	r0
    f78a:	0f 90       	pop	r0
    f78c:	0f 90       	pop	r0
    f78e:	8b 85       	ldd	r24, Y+11	; 0x0b
    f790:	8f 93       	push	r24
    f792:	8a 85       	ldd	r24, Y+10	; 0x0a
    f794:	8f 93       	push	r24
    f796:	89 85       	ldd	r24, Y+9	; 0x09
    f798:	8f 93       	push	r24
    f79a:	88 85       	ldd	r24, Y+8	; 0x08
    f79c:	8f 93       	push	r24
    f79e:	8d e1       	ldi	r24, 0x1D	; 29
    f7a0:	9c e0       	ldi	r25, 0x0C	; 12
    f7a2:	1f 92       	push	r1
    f7a4:	9f 93       	push	r25
    f7a6:	8f 93       	push	r24
    f7a8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f7ac:	88 89       	ldd	r24, Y+16	; 0x10
    f7ae:	99 89       	ldd	r25, Y+17	; 0x11
    f7b0:	1f 92       	push	r1
    f7b2:	1f 92       	push	r1
    f7b4:	9f 93       	push	r25
    f7b6:	8f 93       	push	r24
    f7b8:	80 e1       	ldi	r24, 0x10	; 16
    f7ba:	9c e0       	ldi	r25, 0x0C	; 12
    f7bc:	1f 92       	push	r1
    f7be:	9f 93       	push	r25
    f7c0:	8f 93       	push	r24
    f7c2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f7c6:	8a 89       	ldd	r24, Y+18	; 0x12
    f7c8:	9b 89       	ldd	r25, Y+19	; 0x13
    f7ca:	1f 92       	push	r1
    f7cc:	1f 92       	push	r1
    f7ce:	9f 93       	push	r25
    f7d0:	8f 93       	push	r24
    f7d2:	83 e0       	ldi	r24, 0x03	; 3
    f7d4:	9c e0       	ldi	r25, 0x0C	; 12
    f7d6:	1f 92       	push	r1
    f7d8:	9f 93       	push	r25
    f7da:	8f 93       	push	r24
    f7dc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f7e0:	6c a1       	ldd	r22, Y+36	; 0x24
    f7e2:	7d a1       	ldd	r23, Y+37	; 0x25
    f7e4:	8e a1       	ldd	r24, Y+38	; 0x26
    f7e6:	9f a1       	ldd	r25, Y+39	; 0x27
    f7e8:	62 df       	rcall	.-316    	; 0xf6ae <mctime>
    f7ea:	9f 93       	push	r25
    f7ec:	8f 93       	push	r24
    f7ee:	87 ef       	ldi	r24, 0xF7	; 247
    f7f0:	9b e0       	ldi	r25, 0x0B	; 11
    f7f2:	1f 92       	push	r1
    f7f4:	9f 93       	push	r25
    f7f6:	8f 93       	push	r24
    f7f8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f7fc:	68 a5       	ldd	r22, Y+40	; 0x28
    f7fe:	79 a5       	ldd	r23, Y+41	; 0x29
    f800:	8a a5       	ldd	r24, Y+42	; 0x2a
    f802:	9b a5       	ldd	r25, Y+43	; 0x2b
    f804:	54 df       	rcall	.-344    	; 0xf6ae <mctime>
    f806:	9f 93       	push	r25
    f808:	8f 93       	push	r24
    f80a:	8b ee       	ldi	r24, 0xEB	; 235
    f80c:	9b e0       	ldi	r25, 0x0B	; 11
    f80e:	1f 92       	push	r1
    f810:	9f 93       	push	r25
    f812:	8f 93       	push	r24
    f814:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f818:	6c a5       	ldd	r22, Y+44	; 0x2c
    f81a:	7d a5       	ldd	r23, Y+45	; 0x2d
    f81c:	8e a5       	ldd	r24, Y+46	; 0x2e
    f81e:	9f a5       	ldd	r25, Y+47	; 0x2f
    f820:	46 df       	rcall	.-372    	; 0xf6ae <mctime>
    f822:	9f 93       	push	r25
    f824:	8f 93       	push	r24
    f826:	8f ed       	ldi	r24, 0xDF	; 223
    f828:	9b e0       	ldi	r25, 0x0B	; 11
    f82a:	1f 92       	push	r1
    f82c:	9f 93       	push	r25
    f82e:	8f 93       	push	r24
    f830:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    f834:	8d b7       	in	r24, 0x3d	; 61
    f836:	9e b7       	in	r25, 0x3e	; 62
    f838:	84 96       	adiw	r24, 0x24	; 36
    f83a:	0f b6       	in	r0, 0x3f	; 63
    f83c:	f8 94       	cli
    f83e:	9e bf       	out	0x3e, r25	; 62
    f840:	0f be       	out	0x3f, r0	; 63
    f842:	8d bf       	out	0x3d, r24	; 61
    f844:	df 91       	pop	r29
    f846:	cf 91       	pop	r28
    f848:	ff 90       	pop	r15
    f84a:	ef 90       	pop	r14
    f84c:	df 90       	pop	r13
    f84e:	cf 90       	pop	r12
    f850:	08 95       	ret

0000f852 <basename>:
    f852:	00 97       	sbiw	r24, 0x00	; 0
    f854:	49 f0       	breq	.+18     	; 0xf868 <basename+0x16>
    f856:	fc 01       	movw	r30, r24
    f858:	21 91       	ld	r18, Z+
    f85a:	22 23       	and	r18, r18
    f85c:	21 f0       	breq	.+8      	; 0xf866 <basename+0x14>
    f85e:	2f 32       	cpi	r18, 0x2F	; 47
    f860:	d9 f7       	brne	.-10     	; 0xf858 <basename+0x6>
    f862:	cf 01       	movw	r24, r30
    f864:	f9 cf       	rjmp	.-14     	; 0xf858 <basename+0x6>
    f866:	08 95       	ret
    f868:	80 e3       	ldi	r24, 0x30	; 48
    f86a:	97 e1       	ldi	r25, 0x17	; 23
    f86c:	08 95       	ret

0000f86e <chdir>:
    f86e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f872:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f876:	0e 94 02 5e 	call	0xbc04	; 0xbc04 <f_chdir>
    f87a:	00 97       	sbiw	r24, 0x00	; 0
    f87c:	a1 f0       	breq	.+40     	; 0xf8a6 <chdir+0x38>
    f87e:	84 31       	cpi	r24, 0x14	; 20
    f880:	91 05       	cpc	r25, r1
    f882:	40 f4       	brcc	.+16     	; 0xf894 <chdir+0x26>
    f884:	fc 01       	movw	r30, r24
    f886:	ec 5f       	subi	r30, 0xFC	; 252
    f888:	f8 4f       	sbci	r31, 0xF8	; 248
    f88a:	80 81       	ld	r24, Z
    f88c:	08 2e       	mov	r0, r24
    f88e:	00 0c       	add	r0, r0
    f890:	99 0b       	sbc	r25, r25
    f892:	02 c0       	rjmp	.+4      	; 0xf898 <chdir+0x2a>
    f894:	83 e2       	ldi	r24, 0x23	; 35
    f896:	90 e0       	ldi	r25, 0x00	; 0
    f898:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f89c:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f8a0:	8f ef       	ldi	r24, 0xFF	; 255
    f8a2:	9f ef       	ldi	r25, 0xFF	; 255
    f8a4:	08 95       	ret
    f8a6:	80 e0       	ldi	r24, 0x00	; 0
    f8a8:	90 e0       	ldi	r25, 0x00	; 0
    f8aa:	08 95       	ret

0000f8ac <chmod>:
    f8ac:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f8b0:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f8b4:	42 79       	andi	r20, 0x92	; 146
    f8b6:	55 27       	eor	r21, r21
    f8b8:	66 27       	eor	r22, r22
    f8ba:	77 27       	eor	r23, r23
    f8bc:	45 2b       	or	r20, r21
    f8be:	46 2b       	or	r20, r22
    f8c0:	47 2b       	or	r20, r23
    f8c2:	19 f0       	breq	.+6      	; 0xf8ca <chmod+0x1e>
    f8c4:	80 e0       	ldi	r24, 0x00	; 0
    f8c6:	90 e0       	ldi	r25, 0x00	; 0
    f8c8:	08 95       	ret
    f8ca:	41 e0       	ldi	r20, 0x01	; 1
    f8cc:	61 e0       	ldi	r22, 0x01	; 1
    f8ce:	0e 94 68 67 	call	0xced0	; 0xced0 <f_chmod>
    f8d2:	00 97       	sbiw	r24, 0x00	; 0
    f8d4:	b9 f3       	breq	.-18     	; 0xf8c4 <chmod+0x18>
    f8d6:	84 31       	cpi	r24, 0x14	; 20
    f8d8:	91 05       	cpc	r25, r1
    f8da:	40 f4       	brcc	.+16     	; 0xf8ec <chmod+0x40>
    f8dc:	fc 01       	movw	r30, r24
    f8de:	ec 5f       	subi	r30, 0xFC	; 252
    f8e0:	f8 4f       	sbci	r31, 0xF8	; 248
    f8e2:	80 81       	ld	r24, Z
    f8e4:	08 2e       	mov	r0, r24
    f8e6:	00 0c       	add	r0, r0
    f8e8:	99 0b       	sbc	r25, r25
    f8ea:	02 c0       	rjmp	.+4      	; 0xf8f0 <chmod+0x44>
    f8ec:	83 e2       	ldi	r24, 0x23	; 35
    f8ee:	90 e0       	ldi	r25, 0x00	; 0
    f8f0:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f8f4:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f8f8:	8f ef       	ldi	r24, 0xFF	; 255
    f8fa:	9f ef       	ldi	r25, 0xFF	; 255
    f8fc:	08 95       	ret

0000f8fe <getcwd>:
    f8fe:	cf 93       	push	r28
    f900:	df 93       	push	r29
    f902:	d8 2f       	mov	r29, r24
    f904:	c9 2f       	mov	r28, r25
    f906:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f90a:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f90e:	0e 94 5d 5e 	call	0xbcba	; 0xbcba <f_getcwd>
    f912:	00 97       	sbiw	r24, 0x00	; 0
    f914:	a1 f0       	breq	.+40     	; 0xf93e <getcwd+0x40>
    f916:	84 31       	cpi	r24, 0x14	; 20
    f918:	91 05       	cpc	r25, r1
    f91a:	40 f4       	brcc	.+16     	; 0xf92c <getcwd+0x2e>
    f91c:	fc 01       	movw	r30, r24
    f91e:	ec 5f       	subi	r30, 0xFC	; 252
    f920:	f8 4f       	sbci	r31, 0xF8	; 248
    f922:	80 81       	ld	r24, Z
    f924:	08 2e       	mov	r0, r24
    f926:	00 0c       	add	r0, r0
    f928:	99 0b       	sbc	r25, r25
    f92a:	02 c0       	rjmp	.+4      	; 0xf930 <getcwd+0x32>
    f92c:	83 e2       	ldi	r24, 0x23	; 35
    f92e:	90 e0       	ldi	r25, 0x00	; 0
    f930:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f934:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f938:	80 e0       	ldi	r24, 0x00	; 0
    f93a:	90 e0       	ldi	r25, 0x00	; 0
    f93c:	02 c0       	rjmp	.+4      	; 0xf942 <getcwd+0x44>
    f93e:	8d 2f       	mov	r24, r29
    f940:	9c 2f       	mov	r25, r28
    f942:	df 91       	pop	r29
    f944:	cf 91       	pop	r28
    f946:	08 95       	ret

0000f948 <mkdir>:
    f948:	cf 93       	push	r28
    f94a:	df 93       	push	r29
    f94c:	ec 01       	movw	r28, r24
    f94e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f952:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f956:	41 15       	cp	r20, r1
    f958:	51 05       	cpc	r21, r1
    f95a:	61 05       	cpc	r22, r1
    f95c:	71 05       	cpc	r23, r1
    f95e:	41 f4       	brne	.+16     	; 0xf970 <mkdir+0x28>
    f960:	ce 01       	movw	r24, r28
    f962:	0e 94 12 65 	call	0xca24	; 0xca24 <f_mkdir>
    f966:	00 97       	sbiw	r24, 0x00	; 0
    f968:	39 f4       	brne	.+14     	; 0xf978 <mkdir+0x30>
    f96a:	80 e0       	ldi	r24, 0x00	; 0
    f96c:	90 e0       	ldi	r25, 0x00	; 0
    f96e:	17 c0       	rjmp	.+46     	; 0xf99e <mkdir+0x56>
    f970:	9d df       	rcall	.-198    	; 0xf8ac <chmod>
    f972:	89 2b       	or	r24, r25
    f974:	a9 f3       	breq	.-22     	; 0xf960 <mkdir+0x18>
    f976:	11 c0       	rjmp	.+34     	; 0xf99a <mkdir+0x52>
    f978:	84 31       	cpi	r24, 0x14	; 20
    f97a:	91 05       	cpc	r25, r1
    f97c:	40 f4       	brcc	.+16     	; 0xf98e <mkdir+0x46>
    f97e:	fc 01       	movw	r30, r24
    f980:	ec 5f       	subi	r30, 0xFC	; 252
    f982:	f8 4f       	sbci	r31, 0xF8	; 248
    f984:	80 81       	ld	r24, Z
    f986:	08 2e       	mov	r0, r24
    f988:	00 0c       	add	r0, r0
    f98a:	99 0b       	sbc	r25, r25
    f98c:	02 c0       	rjmp	.+4      	; 0xf992 <mkdir+0x4a>
    f98e:	83 e2       	ldi	r24, 0x23	; 35
    f990:	90 e0       	ldi	r25, 0x00	; 0
    f992:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f996:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f99a:	8f ef       	ldi	r24, 0xFF	; 255
    f99c:	9f ef       	ldi	r25, 0xFF	; 255
    f99e:	df 91       	pop	r29
    f9a0:	cf 91       	pop	r28
    f9a2:	08 95       	ret

0000f9a4 <rename>:
    f9a4:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f9a8:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f9ac:	0e 94 59 66 	call	0xccb2	; 0xccb2 <f_rename>
    f9b0:	00 97       	sbiw	r24, 0x00	; 0
    f9b2:	a1 f0       	breq	.+40     	; 0xf9dc <rename+0x38>
    f9b4:	84 31       	cpi	r24, 0x14	; 20
    f9b6:	91 05       	cpc	r25, r1
    f9b8:	40 f4       	brcc	.+16     	; 0xf9ca <rename+0x26>
    f9ba:	fc 01       	movw	r30, r24
    f9bc:	ec 5f       	subi	r30, 0xFC	; 252
    f9be:	f8 4f       	sbci	r31, 0xF8	; 248
    f9c0:	80 81       	ld	r24, Z
    f9c2:	08 2e       	mov	r0, r24
    f9c4:	00 0c       	add	r0, r0
    f9c6:	99 0b       	sbc	r25, r25
    f9c8:	02 c0       	rjmp	.+4      	; 0xf9ce <rename+0x2a>
    f9ca:	83 e2       	ldi	r24, 0x23	; 35
    f9cc:	90 e0       	ldi	r25, 0x00	; 0
    f9ce:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f9d2:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f9d6:	8f ef       	ldi	r24, 0xFF	; 255
    f9d8:	9f ef       	ldi	r25, 0xFF	; 255
    f9da:	08 95       	ret
    f9dc:	80 e0       	ldi	r24, 0x00	; 0
    f9de:	90 e0       	ldi	r25, 0x00	; 0
    f9e0:	08 95       	ret

0000f9e2 <unlink>:
    f9e2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f9e6:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f9ea:	0e 94 69 64 	call	0xc8d2	; 0xc8d2 <f_unlink>
    f9ee:	00 97       	sbiw	r24, 0x00	; 0
    f9f0:	a1 f0       	breq	.+40     	; 0xfa1a <unlink+0x38>
    f9f2:	84 31       	cpi	r24, 0x14	; 20
    f9f4:	91 05       	cpc	r25, r1
    f9f6:	40 f4       	brcc	.+16     	; 0xfa08 <unlink+0x26>
    f9f8:	fc 01       	movw	r30, r24
    f9fa:	ec 5f       	subi	r30, 0xFC	; 252
    f9fc:	f8 4f       	sbci	r31, 0xF8	; 248
    f9fe:	80 81       	ld	r24, Z
    fa00:	08 2e       	mov	r0, r24
    fa02:	00 0c       	add	r0, r0
    fa04:	99 0b       	sbc	r25, r25
    fa06:	02 c0       	rjmp	.+4      	; 0xfa0c <unlink+0x2a>
    fa08:	83 e2       	ldi	r24, 0x23	; 35
    fa0a:	90 e0       	ldi	r25, 0x00	; 0
    fa0c:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    fa10:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    fa14:	8f ef       	ldi	r24, 0xFF	; 255
    fa16:	9f ef       	ldi	r25, 0xFF	; 255
    fa18:	08 95       	ret
    fa1a:	80 e0       	ldi	r24, 0x00	; 0
    fa1c:	90 e0       	ldi	r25, 0x00	; 0
    fa1e:	08 95       	ret

0000fa20 <rmdir>:
    fa20:	e0 cf       	rjmp	.-64     	; 0xf9e2 <unlink>
    fa22:	08 95       	ret

0000fa24 <closedir>:
    fa24:	0e 94 e1 62 	call	0xc5c2	; 0xc5c2 <f_closedir>
    fa28:	00 97       	sbiw	r24, 0x00	; 0
    fa2a:	a1 f0       	breq	.+40     	; 0xfa54 <closedir+0x30>
    fa2c:	84 31       	cpi	r24, 0x14	; 20
    fa2e:	91 05       	cpc	r25, r1
    fa30:	40 f4       	brcc	.+16     	; 0xfa42 <closedir+0x1e>
    fa32:	fc 01       	movw	r30, r24
    fa34:	ec 5f       	subi	r30, 0xFC	; 252
    fa36:	f8 4f       	sbci	r31, 0xF8	; 248
    fa38:	80 81       	ld	r24, Z
    fa3a:	08 2e       	mov	r0, r24
    fa3c:	00 0c       	add	r0, r0
    fa3e:	99 0b       	sbc	r25, r25
    fa40:	02 c0       	rjmp	.+4      	; 0xfa46 <closedir+0x22>
    fa42:	83 e2       	ldi	r24, 0x23	; 35
    fa44:	90 e0       	ldi	r25, 0x00	; 0
    fa46:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    fa4a:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    fa4e:	8f ef       	ldi	r24, 0xFF	; 255
    fa50:	9f ef       	ldi	r25, 0xFF	; 255
    fa52:	08 95       	ret
    fa54:	80 e0       	ldi	r24, 0x00	; 0
    fa56:	90 e0       	ldi	r25, 0x00	; 0
    fa58:	08 95       	ret

0000fa5a <opendir>:
    fa5a:	bc 01       	movw	r22, r24
    fa5c:	88 e3       	ldi	r24, 0x38	; 56
    fa5e:	99 e1       	ldi	r25, 0x19	; 25
    fa60:	0e 94 6e 62 	call	0xc4dc	; 0xc4dc <f_opendir>
    fa64:	00 97       	sbiw	r24, 0x00	; 0
    fa66:	a1 f0       	breq	.+40     	; 0xfa90 <opendir+0x36>
    fa68:	84 31       	cpi	r24, 0x14	; 20
    fa6a:	91 05       	cpc	r25, r1
    fa6c:	40 f4       	brcc	.+16     	; 0xfa7e <opendir+0x24>
    fa6e:	fc 01       	movw	r30, r24
    fa70:	ec 5f       	subi	r30, 0xFC	; 252
    fa72:	f8 4f       	sbci	r31, 0xF8	; 248
    fa74:	80 81       	ld	r24, Z
    fa76:	08 2e       	mov	r0, r24
    fa78:	00 0c       	add	r0, r0
    fa7a:	99 0b       	sbc	r25, r25
    fa7c:	02 c0       	rjmp	.+4      	; 0xfa82 <opendir+0x28>
    fa7e:	83 e2       	ldi	r24, 0x23	; 35
    fa80:	90 e0       	ldi	r25, 0x00	; 0
    fa82:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    fa86:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    fa8a:	80 e0       	ldi	r24, 0x00	; 0
    fa8c:	90 e0       	ldi	r25, 0x00	; 0
    fa8e:	08 95       	ret
    fa90:	88 e3       	ldi	r24, 0x38	; 56
    fa92:	99 e1       	ldi	r25, 0x19	; 25
    fa94:	08 95       	ret

0000fa96 <readdir>:
    fa96:	a6 e1       	ldi	r26, 0x16	; 22
    fa98:	b1 e0       	ldi	r27, 0x01	; 1
    fa9a:	e1 e5       	ldi	r30, 0x51	; 81
    fa9c:	fd e7       	ldi	r31, 0x7D	; 125
    fa9e:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    faa2:	10 92 39 18 	sts	0x1839, r1	; 0x801839 <_de>
    faa6:	be 01       	movw	r22, r28
    faa8:	6f 5f       	subi	r22, 0xFF	; 255
    faaa:	7f 4f       	sbci	r23, 0xFF	; 255
    faac:	0e 94 f6 62 	call	0xc5ec	; 0xc5ec <f_readdir>
    fab0:	00 97       	sbiw	r24, 0x00	; 0
    fab2:	a1 f0       	breq	.+40     	; 0xfadc <readdir+0x46>
    fab4:	84 31       	cpi	r24, 0x14	; 20
    fab6:	91 05       	cpc	r25, r1
    fab8:	40 f4       	brcc	.+16     	; 0xfaca <readdir+0x34>
    faba:	fc 01       	movw	r30, r24
    fabc:	ec 5f       	subi	r30, 0xFC	; 252
    fabe:	f8 4f       	sbci	r31, 0xF8	; 248
    fac0:	80 81       	ld	r24, Z
    fac2:	08 2e       	mov	r0, r24
    fac4:	00 0c       	add	r0, r0
    fac6:	99 0b       	sbc	r25, r25
    fac8:	02 c0       	rjmp	.+4      	; 0xface <readdir+0x38>
    faca:	83 e2       	ldi	r24, 0x23	; 35
    facc:	90 e0       	ldi	r25, 0x00	; 0
    face:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    fad2:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    fad6:	80 e0       	ldi	r24, 0x00	; 0
    fad8:	90 e0       	ldi	r25, 0x00	; 0
    fada:	16 c0       	rjmp	.+44     	; 0xfb08 <readdir+0x72>
    fadc:	be 01       	movw	r22, r28
    fade:	69 5e       	subi	r22, 0xE9	; 233
    fae0:	7f 4f       	sbci	r23, 0xFF	; 255
    fae2:	fb 01       	movw	r30, r22
    fae4:	01 90       	ld	r0, Z+
    fae6:	00 20       	and	r0, r0
    fae8:	e9 f7       	brne	.-6      	; 0xfae4 <readdir+0x4e>
    faea:	31 97       	sbiw	r30, 0x01	; 1
    faec:	8f 01       	movw	r16, r30
    faee:	06 1b       	sub	r16, r22
    faf0:	17 0b       	sbc	r17, r23
    faf2:	a8 01       	movw	r20, r16
    faf4:	89 e3       	ldi	r24, 0x39	; 57
    faf6:	98 e1       	ldi	r25, 0x18	; 24
    faf8:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <strncpy>
    fafc:	f8 01       	movw	r30, r16
    fafe:	e7 5c       	subi	r30, 0xC7	; 199
    fb00:	f7 4e       	sbci	r31, 0xE7	; 231
    fb02:	10 82       	st	Z, r1
    fb04:	89 e3       	ldi	r24, 0x39	; 57
    fb06:	98 e1       	ldi	r25, 0x18	; 24
    fb08:	ca 5e       	subi	r28, 0xEA	; 234
    fb0a:	de 4f       	sbci	r29, 0xFE	; 254
    fb0c:	e4 e0       	ldi	r30, 0x04	; 4
    fb0e:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

0000fb12 <perror>:
    fb12:	e0 91 c0 1c 	lds	r30, 0x1CC0	; 0x801cc0 <errno>
    fb16:	f0 91 c1 1c 	lds	r31, 0x1CC1	; 0x801cc1 <errno+0x1>
    fb1a:	e3 32       	cpi	r30, 0x23	; 35
    fb1c:	f1 05       	cpc	r31, r1
    fb1e:	38 f4       	brcc	.+14     	; 0xfb2e <perror+0x1c>
    fb20:	ee 0f       	add	r30, r30
    fb22:	ff 1f       	adc	r31, r31
    fb24:	e3 5c       	subi	r30, 0xC3	; 195
    fb26:	fe 4f       	sbci	r31, 0xFE	; 254
    fb28:	20 81       	ld	r18, Z
    fb2a:	31 81       	ldd	r19, Z+1	; 0x01
    fb2c:	04 c0       	rjmp	.+8      	; 0xfb36 <perror+0x24>
    fb2e:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    fb32:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    fb36:	00 97       	sbiw	r24, 0x00	; 0
    fb38:	c1 f0       	breq	.+48     	; 0xfb6a <perror+0x58>
    fb3a:	fc 01       	movw	r30, r24
    fb3c:	40 81       	ld	r20, Z
    fb3e:	44 23       	and	r20, r20
    fb40:	a1 f0       	breq	.+40     	; 0xfb6a <perror+0x58>
    fb42:	3f 93       	push	r19
    fb44:	2f 93       	push	r18
    fb46:	9f 93       	push	r25
    fb48:	8f 93       	push	r24
    fb4a:	87 ed       	ldi	r24, 0xD7	; 215
    fb4c:	9b e0       	ldi	r25, 0x0B	; 11
    fb4e:	1f 92       	push	r1
    fb50:	9f 93       	push	r25
    fb52:	8f 93       	push	r24
    fb54:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fb58:	8d b7       	in	r24, 0x3d	; 61
    fb5a:	9e b7       	in	r25, 0x3e	; 62
    fb5c:	07 96       	adiw	r24, 0x07	; 7
    fb5e:	0f b6       	in	r0, 0x3f	; 63
    fb60:	f8 94       	cli
    fb62:	9e bf       	out	0x3e, r25	; 62
    fb64:	0f be       	out	0x3f, r0	; 63
    fb66:	8d bf       	out	0x3d, r24	; 61
    fb68:	08 95       	ret
    fb6a:	3f 93       	push	r19
    fb6c:	2f 93       	push	r18
    fb6e:	83 ed       	ldi	r24, 0xD3	; 211
    fb70:	9b e0       	ldi	r25, 0x0B	; 11
    fb72:	1f 92       	push	r1
    fb74:	9f 93       	push	r25
    fb76:	8f 93       	push	r24
    fb78:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fb7c:	0f 90       	pop	r0
    fb7e:	0f 90       	pop	r0
    fb80:	0f 90       	pop	r0
    fb82:	0f 90       	pop	r0
    fb84:	0f 90       	pop	r0
    fb86:	08 95       	ret

0000fb88 <fdevopen>:
    fb88:	0f 93       	push	r16
    fb8a:	1f 93       	push	r17
    fb8c:	cf 93       	push	r28
    fb8e:	df 93       	push	r29
    fb90:	00 97       	sbiw	r24, 0x00	; 0
    fb92:	31 f4       	brne	.+12     	; 0xfba0 <fdevopen+0x18>
    fb94:	61 15       	cp	r22, r1
    fb96:	71 05       	cpc	r23, r1
    fb98:	19 f4       	brne	.+6      	; 0xfba0 <fdevopen+0x18>
    fb9a:	80 e0       	ldi	r24, 0x00	; 0
    fb9c:	90 e0       	ldi	r25, 0x00	; 0
    fb9e:	3a c0       	rjmp	.+116    	; 0xfc14 <fdevopen+0x8c>
    fba0:	8b 01       	movw	r16, r22
    fba2:	ec 01       	movw	r28, r24
    fba4:	6e e0       	ldi	r22, 0x0E	; 14
    fba6:	70 e0       	ldi	r23, 0x00	; 0
    fba8:	81 e0       	ldi	r24, 0x01	; 1
    fbaa:	90 e0       	ldi	r25, 0x00	; 0
    fbac:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
    fbb0:	fc 01       	movw	r30, r24
    fbb2:	89 2b       	or	r24, r25
    fbb4:	91 f3       	breq	.-28     	; 0xfb9a <fdevopen+0x12>
    fbb6:	80 e8       	ldi	r24, 0x80	; 128
    fbb8:	83 83       	std	Z+3, r24	; 0x03
    fbba:	01 15       	cp	r16, r1
    fbbc:	11 05       	cpc	r17, r1
    fbbe:	71 f0       	breq	.+28     	; 0xfbdc <fdevopen+0x54>
    fbc0:	13 87       	std	Z+11, r17	; 0x0b
    fbc2:	02 87       	std	Z+10, r16	; 0x0a
    fbc4:	81 e8       	ldi	r24, 0x81	; 129
    fbc6:	83 83       	std	Z+3, r24	; 0x03
    fbc8:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    fbcc:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    fbd0:	89 2b       	or	r24, r25
    fbd2:	21 f4       	brne	.+8      	; 0xfbdc <fdevopen+0x54>
    fbd4:	f0 93 c3 1c 	sts	0x1CC3, r31	; 0x801cc3 <__iob+0x1>
    fbd8:	e0 93 c2 1c 	sts	0x1CC2, r30	; 0x801cc2 <__iob>
    fbdc:	20 97       	sbiw	r28, 0x00	; 0
    fbde:	c9 f0       	breq	.+50     	; 0xfc12 <fdevopen+0x8a>
    fbe0:	d1 87       	std	Z+9, r29	; 0x09
    fbe2:	c0 87       	std	Z+8, r28	; 0x08
    fbe4:	83 81       	ldd	r24, Z+3	; 0x03
    fbe6:	82 60       	ori	r24, 0x02	; 2
    fbe8:	83 83       	std	Z+3, r24	; 0x03
    fbea:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
    fbee:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
    fbf2:	89 2b       	or	r24, r25
    fbf4:	21 f4       	brne	.+8      	; 0xfbfe <fdevopen+0x76>
    fbf6:	f0 93 c5 1c 	sts	0x1CC5, r31	; 0x801cc5 <__iob+0x3>
    fbfa:	e0 93 c4 1c 	sts	0x1CC4, r30	; 0x801cc4 <__iob+0x2>
    fbfe:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
    fc02:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
    fc06:	89 2b       	or	r24, r25
    fc08:	21 f4       	brne	.+8      	; 0xfc12 <fdevopen+0x8a>
    fc0a:	f0 93 c7 1c 	sts	0x1CC7, r31	; 0x801cc7 <__iob+0x5>
    fc0e:	e0 93 c6 1c 	sts	0x1CC6, r30	; 0x801cc6 <__iob+0x4>
    fc12:	cf 01       	movw	r24, r30
    fc14:	df 91       	pop	r29
    fc16:	cf 91       	pop	r28
    fc18:	1f 91       	pop	r17
    fc1a:	0f 91       	pop	r16
    fc1c:	08 95       	ret

0000fc1e <mkfs>:
    fc1e:	a9 e3       	ldi	r26, 0x39	; 57
    fc20:	b2 e0       	ldi	r27, 0x02	; 2
    fc22:	e5 e1       	ldi	r30, 0x15	; 21
    fc24:	fe e7       	ldi	r31, 0x7E	; 126
    fc26:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
    fc2a:	6c 01       	movw	r12, r24
    fc2c:	68 e6       	ldi	r22, 0x68	; 104
    fc2e:	78 e0       	ldi	r23, 0x08	; 8
    fc30:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
    fc34:	00 97       	sbiw	r24, 0x00	; 0
    fc36:	59 f4       	brne	.+22     	; 0xfc4e <mkfs+0x30>
    fc38:	84 eb       	ldi	r24, 0xB4	; 180
    fc3a:	9b e0       	ldi	r25, 0x0B	; 11
    fc3c:	1f 92       	push	r1
    fc3e:	9f 93       	push	r25
    fc40:	8f 93       	push	r24
    fc42:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fc46:	0f 90       	pop	r0
    fc48:	0f 90       	pop	r0
    fc4a:	0f 90       	pop	r0
    fc4c:	55 c0       	rjmp	.+170    	; 0xfcf8 <mkfs+0xda>
    fc4e:	2a e3       	ldi	r18, 0x3A	; 58
    fc50:	c9 5c       	subi	r28, 0xC9	; 201
    fc52:	dd 4f       	sbci	r29, 0xFD	; 253
    fc54:	28 83       	st	Y, r18
    fc56:	c7 53       	subi	r28, 0x37	; 55
    fc58:	d2 40       	sbci	r29, 0x02	; 2
    fc5a:	c8 5c       	subi	r28, 0xC8	; 200
    fc5c:	dd 4f       	sbci	r29, 0xFD	; 253
    fc5e:	18 82       	st	Y, r1
    fc60:	c8 53       	subi	r28, 0x38	; 56
    fc62:	d2 40       	sbci	r29, 0x02	; 2
    fc64:	8c 0d       	add	r24, r12
    fc66:	9d 1d       	adc	r25, r13
    fc68:	fc 01       	movw	r30, r24
    fc6a:	31 97       	sbiw	r30, 0x01	; 1
    fc6c:	80 81       	ld	r24, Z
    fc6e:	90 e0       	ldi	r25, 0x00	; 0
    fc70:	0e 94 d6 31 	call	0x63ac	; 0x63ac <tolower>
    fc74:	9c 01       	movw	r18, r24
    fc76:	21 56       	subi	r18, 0x61	; 97
    fc78:	31 09       	sbc	r19, r1
    fc7a:	2a 30       	cpi	r18, 0x0A	; 10
    fc7c:	31 05       	cpc	r19, r1
    fc7e:	30 f4       	brcc	.+12     	; 0xfc8c <mkfs+0x6e>
    fc80:	81 56       	subi	r24, 0x61	; 97
    fc82:	ca 5c       	subi	r28, 0xCA	; 202
    fc84:	dd 4f       	sbci	r29, 0xFD	; 253
    fc86:	88 83       	st	Y, r24
    fc88:	c6 53       	subi	r28, 0x36	; 54
    fc8a:	d2 40       	sbci	r29, 0x02	; 2
    fc8c:	c7 5c       	subi	r28, 0xC7	; 199
    fc8e:	dd 4f       	sbci	r29, 0xFD	; 253
    fc90:	18 82       	st	Y, r1
    fc92:	c9 53       	subi	r28, 0x39	; 57
    fc94:	d2 40       	sbci	r29, 0x02	; 2
    fc96:	40 e0       	ldi	r20, 0x00	; 0
    fc98:	be 01       	movw	r22, r28
    fc9a:	6a 5c       	subi	r22, 0xCA	; 202
    fc9c:	7d 4f       	sbci	r23, 0xFD	; 253
    fc9e:	ce 01       	movw	r24, r28
    fca0:	01 96       	adiw	r24, 0x01	; 1
    fca2:	0e 94 4d 58 	call	0xb09a	; 0xb09a <f_mount>
    fca6:	89 2b       	or	r24, r25
    fca8:	29 f4       	brne	.+10     	; 0xfcb4 <mkfs+0x96>
    fcaa:	80 e0       	ldi	r24, 0x00	; 0
    fcac:	90 e0       	ldi	r25, 0x00	; 0
    fcae:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
    fcb2:	22 c0       	rjmp	.+68     	; 0xfcf8 <mkfs+0xda>
    fcb4:	80 e0       	ldi	r24, 0x00	; 0
    fcb6:	94 e0       	ldi	r25, 0x04	; 4
    fcb8:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <safemalloc>
    fcbc:	6c 01       	movw	r12, r24
    fcbe:	89 2b       	or	r24, r25
    fcc0:	d9 f0       	breq	.+54     	; 0xfcf8 <mkfs+0xda>
    fcc2:	e1 2c       	mov	r14, r1
    fcc4:	84 e0       	ldi	r24, 0x04	; 4
    fcc6:	f8 2e       	mov	r15, r24
    fcc8:	86 01       	movw	r16, r12
    fcca:	20 e0       	ldi	r18, 0x00	; 0
    fccc:	30 e0       	ldi	r19, 0x00	; 0
    fcce:	a9 01       	movw	r20, r18
    fcd0:	62 e0       	ldi	r22, 0x02	; 2
    fcd2:	ce 01       	movw	r24, r28
    fcd4:	8a 5c       	subi	r24, 0xCA	; 202
    fcd6:	9d 4f       	sbci	r25, 0xFD	; 253
    fcd8:	0e 94 88 68 	call	0xd110	; 0xd110 <f_mkfs>
    fcdc:	00 97       	sbiw	r24, 0x00	; 0
    fcde:	31 f0       	breq	.+12     	; 0xfcec <mkfs+0xce>
    fce0:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
    fce4:	c6 01       	movw	r24, r12
    fce6:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
    fcea:	06 c0       	rjmp	.+12     	; 0xfcf8 <mkfs+0xda>
    fcec:	c6 01       	movw	r24, r12
    fcee:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
    fcf2:	81 e0       	ldi	r24, 0x01	; 1
    fcf4:	90 e0       	ldi	r25, 0x00	; 0
    fcf6:	02 c0       	rjmp	.+4      	; 0xfcfc <mkfs+0xde>
    fcf8:	80 e0       	ldi	r24, 0x00	; 0
    fcfa:	90 e0       	ldi	r25, 0x00	; 0
    fcfc:	c7 5c       	subi	r28, 0xC7	; 199
    fcfe:	dd 4f       	sbci	r29, 0xFD	; 253
    fd00:	e8 e0       	ldi	r30, 0x08	; 8
    fd02:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0000fd06 <fat_time_to_unix>:
    fd06:	a6 e1       	ldi	r26, 0x16	; 22
    fd08:	b0 e0       	ldi	r27, 0x00	; 0
    fd0a:	e9 e8       	ldi	r30, 0x89	; 137
    fd0c:	fe e7       	ldi	r31, 0x7E	; 126
    fd0e:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
    fd12:	fe 01       	movw	r30, r28
    fd14:	31 96       	adiw	r30, 0x01	; 1
    fd16:	26 e1       	ldi	r18, 0x16	; 22
    fd18:	df 01       	movw	r26, r30
    fd1a:	1d 92       	st	X+, r1
    fd1c:	2a 95       	dec	r18
    fd1e:	e9 f7       	brne	.-6      	; 0xfd1a <fat_time_to_unix+0x14>
    fd20:	9b 01       	movw	r18, r22
    fd22:	22 0f       	add	r18, r18
    fd24:	33 1f       	adc	r19, r19
    fd26:	2e 73       	andi	r18, 0x3E	; 62
    fd28:	33 27       	eor	r19, r19
    fd2a:	3a 83       	std	Y+2, r19	; 0x02
    fd2c:	29 83       	std	Y+1, r18	; 0x01
    fd2e:	9b 01       	movw	r18, r22
    fd30:	55 e0       	ldi	r21, 0x05	; 5
    fd32:	36 95       	lsr	r19
    fd34:	27 95       	ror	r18
    fd36:	5a 95       	dec	r21
    fd38:	e1 f7       	brne	.-8      	; 0xfd32 <fat_time_to_unix+0x2c>
    fd3a:	2f 73       	andi	r18, 0x3F	; 63
    fd3c:	33 27       	eor	r19, r19
    fd3e:	3c 83       	std	Y+4, r19	; 0x04
    fd40:	2b 83       	std	Y+3, r18	; 0x03
    fd42:	27 2f       	mov	r18, r23
    fd44:	26 95       	lsr	r18
    fd46:	26 95       	lsr	r18
    fd48:	26 95       	lsr	r18
    fd4a:	2d 83       	std	Y+5, r18	; 0x05
    fd4c:	1e 82       	std	Y+6, r1	; 0x06
    fd4e:	9c 01       	movw	r18, r24
    fd50:	2f 71       	andi	r18, 0x1F	; 31
    fd52:	33 27       	eor	r19, r19
    fd54:	38 87       	std	Y+8, r19	; 0x08
    fd56:	2f 83       	std	Y+7, r18	; 0x07
    fd58:	9c 01       	movw	r18, r24
    fd5a:	65 e0       	ldi	r22, 0x05	; 5
    fd5c:	36 95       	lsr	r19
    fd5e:	27 95       	ror	r18
    fd60:	6a 95       	dec	r22
    fd62:	e1 f7       	brne	.-8      	; 0xfd5c <fat_time_to_unix+0x56>
    fd64:	2f 70       	andi	r18, 0x0F	; 15
    fd66:	33 27       	eor	r19, r19
    fd68:	21 50       	subi	r18, 0x01	; 1
    fd6a:	31 09       	sbc	r19, r1
    fd6c:	3a 87       	std	Y+10, r19	; 0x0a
    fd6e:	29 87       	std	Y+9, r18	; 0x09
    fd70:	9c 01       	movw	r18, r24
    fd72:	23 2f       	mov	r18, r19
    fd74:	33 27       	eor	r19, r19
    fd76:	26 95       	lsr	r18
    fd78:	20 5b       	subi	r18, 0xB0	; 176
    fd7a:	3f 4f       	sbci	r19, 0xFF	; 255
    fd7c:	3c 87       	std	Y+12, r19	; 0x0c
    fd7e:	2b 87       	std	Y+11, r18	; 0x0b
    fd80:	cf 01       	movw	r24, r30
    fd82:	0e 94 c4 3a 	call	0x7588	; 0x7588 <timegm>
    fd86:	66 96       	adiw	r28, 0x16	; 22
    fd88:	e2 e0       	ldi	r30, 0x02	; 2
    fd8a:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0000fd8e <stat>:
    fd8e:	a6 e1       	ldi	r26, 0x16	; 22
    fd90:	b1 e0       	ldi	r27, 0x01	; 1
    fd92:	ed ec       	ldi	r30, 0xCD	; 205
    fd94:	fe e7       	ldi	r31, 0x7E	; 126
    fd96:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
    fd9a:	7c 01       	movw	r14, r24
    fd9c:	8b 01       	movw	r16, r22
    fd9e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    fda2:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    fda6:	6c e1       	ldi	r22, 0x1C	; 28
    fda8:	78 e0       	ldi	r23, 0x08	; 8
    fdaa:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
    fdae:	89 2b       	or	r24, r25
    fdb0:	39 f0       	breq	.+14     	; 0xfdc0 <stat+0x32>
    fdb2:	6b e5       	ldi	r22, 0x5B	; 91
    fdb4:	70 e1       	ldi	r23, 0x10	; 16
    fdb6:	c7 01       	movw	r24, r14
    fdb8:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
    fdbc:	89 2b       	or	r24, r25
    fdbe:	d1 f4       	brne	.+52     	; 0xfdf4 <stat+0x66>
    fdc0:	f8 01       	movw	r30, r16
    fdc2:	14 a2       	std	Z+36, r1	; 0x24
    fdc4:	15 a2       	std	Z+37, r1	; 0x25
    fdc6:	16 a2       	std	Z+38, r1	; 0x26
    fdc8:	17 a2       	std	Z+39, r1	; 0x27
    fdca:	10 a6       	std	Z+40, r1	; 0x28
    fdcc:	11 a6       	std	Z+41, r1	; 0x29
    fdce:	12 a6       	std	Z+42, r1	; 0x2a
    fdd0:	13 a6       	std	Z+43, r1	; 0x2b
    fdd2:	14 a6       	std	Z+44, r1	; 0x2c
    fdd4:	15 a6       	std	Z+45, r1	; 0x2d
    fdd6:	16 a6       	std	Z+46, r1	; 0x2e
    fdd8:	17 a6       	std	Z+47, r1	; 0x2f
    fdda:	11 8a       	std	Z+17, r1	; 0x11
    fddc:	10 8a       	std	Z+16, r1	; 0x10
    fdde:	13 8a       	std	Z+19, r1	; 0x13
    fde0:	12 8a       	std	Z+18, r1	; 0x12
    fde2:	10 8e       	std	Z+24, r1	; 0x18
    fde4:	11 8e       	std	Z+25, r1	; 0x19
    fde6:	12 8e       	std	Z+26, r1	; 0x1a
    fde8:	13 8e       	std	Z+27, r1	; 0x1b
    fdea:	80 e0       	ldi	r24, 0x00	; 0
    fdec:	90 e4       	ldi	r25, 0x40	; 64
    fdee:	a0 e0       	ldi	r26, 0x00	; 0
    fdf0:	b0 e0       	ldi	r27, 0x00	; 0
    fdf2:	4e c0       	rjmp	.+156    	; 0xfe90 <stat+0x102>
    fdf4:	be 01       	movw	r22, r28
    fdf6:	6f 5f       	subi	r22, 0xFF	; 255
    fdf8:	7f 4f       	sbci	r23, 0xFF	; 255
    fdfa:	c7 01       	movw	r24, r14
    fdfc:	0e 94 3c 63 	call	0xc678	; 0xc678 <f_stat>
    fe00:	00 97       	sbiw	r24, 0x00	; 0
    fe02:	a1 f0       	breq	.+40     	; 0xfe2c <stat+0x9e>
    fe04:	84 31       	cpi	r24, 0x14	; 20
    fe06:	91 05       	cpc	r25, r1
    fe08:	40 f4       	brcc	.+16     	; 0xfe1a <stat+0x8c>
    fe0a:	fc 01       	movw	r30, r24
    fe0c:	ec 5f       	subi	r30, 0xFC	; 252
    fe0e:	f8 4f       	sbci	r31, 0xF8	; 248
    fe10:	80 81       	ld	r24, Z
    fe12:	08 2e       	mov	r0, r24
    fe14:	00 0c       	add	r0, r0
    fe16:	99 0b       	sbc	r25, r25
    fe18:	02 c0       	rjmp	.+4      	; 0xfe1e <stat+0x90>
    fe1a:	83 e2       	ldi	r24, 0x23	; 35
    fe1c:	90 e0       	ldi	r25, 0x00	; 0
    fe1e:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    fe22:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    fe26:	8f ef       	ldi	r24, 0xFF	; 255
    fe28:	9f ef       	ldi	r25, 0xFF	; 255
    fe2a:	38 c0       	rjmp	.+112    	; 0xfe9c <stat+0x10e>
    fe2c:	89 81       	ldd	r24, Y+1	; 0x01
    fe2e:	9a 81       	ldd	r25, Y+2	; 0x02
    fe30:	ab 81       	ldd	r26, Y+3	; 0x03
    fe32:	bc 81       	ldd	r27, Y+4	; 0x04
    fe34:	f8 01       	movw	r30, r16
    fe36:	80 8f       	std	Z+24, r24	; 0x18
    fe38:	91 8f       	std	Z+25, r25	; 0x19
    fe3a:	a2 8f       	std	Z+26, r26	; 0x1a
    fe3c:	b3 8f       	std	Z+27, r27	; 0x1b
    fe3e:	6f 81       	ldd	r22, Y+7	; 0x07
    fe40:	78 85       	ldd	r23, Y+8	; 0x08
    fe42:	8d 81       	ldd	r24, Y+5	; 0x05
    fe44:	9e 81       	ldd	r25, Y+6	; 0x06
    fe46:	5f df       	rcall	.-322    	; 0xfd06 <fat_time_to_unix>
    fe48:	f8 01       	movw	r30, r16
    fe4a:	64 a3       	std	Z+36, r22	; 0x24
    fe4c:	75 a3       	std	Z+37, r23	; 0x25
    fe4e:	86 a3       	std	Z+38, r24	; 0x26
    fe50:	97 a3       	std	Z+39, r25	; 0x27
    fe52:	60 a7       	std	Z+40, r22	; 0x28
    fe54:	71 a7       	std	Z+41, r23	; 0x29
    fe56:	82 a7       	std	Z+42, r24	; 0x2a
    fe58:	93 a7       	std	Z+43, r25	; 0x2b
    fe5a:	64 a7       	std	Z+44, r22	; 0x2c
    fe5c:	75 a7       	std	Z+45, r23	; 0x2d
    fe5e:	86 a7       	std	Z+46, r24	; 0x2e
    fe60:	97 a7       	std	Z+47, r25	; 0x2f
    fe62:	29 85       	ldd	r18, Y+9	; 0x09
    fe64:	20 fd       	sbrc	r18, 0
    fe66:	03 c0       	rjmp	.+6      	; 0xfe6e <stat+0xe0>
    fe68:	8f ef       	ldi	r24, 0xFF	; 255
    fe6a:	91 e0       	ldi	r25, 0x01	; 1
    fe6c:	02 c0       	rjmp	.+4      	; 0xfe72 <stat+0xe4>
    fe6e:	8d e6       	ldi	r24, 0x6D	; 109
    fe70:	91 e0       	ldi	r25, 0x01	; 1
    fe72:	48 ee       	ldi	r20, 0xE8	; 232
    fe74:	53 e0       	ldi	r21, 0x03	; 3
    fe76:	f8 01       	movw	r30, r16
    fe78:	51 8b       	std	Z+17, r21	; 0x11
    fe7a:	40 8b       	std	Z+16, r20	; 0x10
    fe7c:	53 8b       	std	Z+19, r21	; 0x13
    fe7e:	42 8b       	std	Z+18, r20	; 0x12
    fe80:	24 ff       	sbrs	r18, 4
    fe82:	02 c0       	rjmp	.+4      	; 0xfe88 <stat+0xfa>
    fe84:	90 64       	ori	r25, 0x40	; 64
    fe86:	01 c0       	rjmp	.+2      	; 0xfe8a <stat+0xfc>
    fe88:	90 68       	ori	r25, 0x80	; 128
    fe8a:	a0 e0       	ldi	r26, 0x00	; 0
    fe8c:	b0 e0       	ldi	r27, 0x00	; 0
    fe8e:	f8 01       	movw	r30, r16
    fe90:	80 87       	std	Z+8, r24	; 0x08
    fe92:	91 87       	std	Z+9, r25	; 0x09
    fe94:	a2 87       	std	Z+10, r26	; 0x0a
    fe96:	b3 87       	std	Z+11, r27	; 0x0b
    fe98:	80 e0       	ldi	r24, 0x00	; 0
    fe9a:	90 e0       	ldi	r25, 0x00	; 0
    fe9c:	ca 5e       	subi	r28, 0xEA	; 234
    fe9e:	de 4f       	sbci	r29, 0xFE	; 254
    fea0:	e6 e0       	ldi	r30, 0x06	; 6
    fea2:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000fea6 <unix_time_to_fat>:
    fea6:	a4 e0       	ldi	r26, 0x04	; 4
    fea8:	b0 e0       	ldi	r27, 0x00	; 0
    feaa:	e9 e5       	ldi	r30, 0x59	; 89
    feac:	ff e7       	ldi	r31, 0x7F	; 127
    feae:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
    feb2:	69 83       	std	Y+1, r22	; 0x01
    feb4:	7a 83       	std	Y+2, r23	; 0x02
    feb6:	8b 83       	std	Y+3, r24	; 0x03
    feb8:	9c 83       	std	Y+4, r25	; 0x04
    feba:	7a 01       	movw	r14, r20
    febc:	89 01       	movw	r16, r18
    febe:	ce 01       	movw	r24, r28
    fec0:	01 96       	adiw	r24, 0x01	; 1
    fec2:	0e 94 04 38 	call	0x7008	; 0x7008 <gmtime>
    fec6:	fc 01       	movw	r30, r24
    fec8:	22 85       	ldd	r18, Z+10	; 0x0a
    feca:	33 85       	ldd	r19, Z+11	; 0x0b
    fecc:	20 55       	subi	r18, 0x50	; 80
    fece:	31 09       	sbc	r19, r1
    fed0:	c9 01       	movw	r24, r18
    fed2:	98 2f       	mov	r25, r24
    fed4:	88 27       	eor	r24, r24
    fed6:	99 0f       	add	r25, r25
    fed8:	20 85       	ldd	r18, Z+8	; 0x08
    feda:	31 85       	ldd	r19, Z+9	; 0x09
    fedc:	2f 5f       	subi	r18, 0xFF	; 255
    fede:	3f 4f       	sbci	r19, 0xFF	; 255
    fee0:	45 e0       	ldi	r20, 0x05	; 5
    fee2:	22 0f       	add	r18, r18
    fee4:	33 1f       	adc	r19, r19
    fee6:	4a 95       	dec	r20
    fee8:	e1 f7       	brne	.-8      	; 0xfee2 <unix_time_to_fat+0x3c>
    feea:	28 2b       	or	r18, r24
    feec:	39 2b       	or	r19, r25
    feee:	86 81       	ldd	r24, Z+6	; 0x06
    fef0:	97 81       	ldd	r25, Z+7	; 0x07
    fef2:	28 2b       	or	r18, r24
    fef4:	39 2b       	or	r19, r25
    fef6:	d7 01       	movw	r26, r14
    fef8:	2d 93       	st	X+, r18
    fefa:	3c 93       	st	X, r19
    fefc:	84 81       	ldd	r24, Z+4	; 0x04
    fefe:	20 e0       	ldi	r18, 0x00	; 0
    ff00:	30 e0       	ldi	r19, 0x00	; 0
    ff02:	38 2f       	mov	r19, r24
    ff04:	33 0f       	add	r19, r19
    ff06:	33 0f       	add	r19, r19
    ff08:	33 0f       	add	r19, r19
    ff0a:	82 81       	ldd	r24, Z+2	; 0x02
    ff0c:	93 81       	ldd	r25, Z+3	; 0x03
    ff0e:	55 e0       	ldi	r21, 0x05	; 5
    ff10:	88 0f       	add	r24, r24
    ff12:	99 1f       	adc	r25, r25
    ff14:	5a 95       	dec	r21
    ff16:	e1 f7       	brne	.-8      	; 0xff10 <__DATA_REGION_LENGTH__+0x10>
    ff18:	82 2b       	or	r24, r18
    ff1a:	93 2b       	or	r25, r19
    ff1c:	20 81       	ld	r18, Z
    ff1e:	31 81       	ldd	r19, Z+1	; 0x01
    ff20:	36 95       	lsr	r19
    ff22:	27 95       	ror	r18
    ff24:	82 2b       	or	r24, r18
    ff26:	93 2b       	or	r25, r19
    ff28:	f8 01       	movw	r30, r16
    ff2a:	91 83       	std	Z+1, r25	; 0x01
    ff2c:	80 83       	st	Z, r24
    ff2e:	24 96       	adiw	r28, 0x04	; 4
    ff30:	e6 e0       	ldi	r30, 0x06	; 6
    ff32:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0000ff36 <utime>:
    ff36:	aa e1       	ldi	r26, 0x1A	; 26
    ff38:	b1 e0       	ldi	r27, 0x01	; 1
    ff3a:	e1 ea       	ldi	r30, 0xA1	; 161
    ff3c:	ff e7       	ldi	r31, 0x7F	; 127
    ff3e:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
    ff42:	8c 01       	movw	r16, r24
    ff44:	61 15       	cp	r22, r1
    ff46:	71 05       	cpc	r23, r1
    ff48:	31 f0       	breq	.+12     	; 0xff56 <utime+0x20>
    ff4a:	fb 01       	movw	r30, r22
    ff4c:	64 81       	ldd	r22, Z+4	; 0x04
    ff4e:	75 81       	ldd	r23, Z+5	; 0x05
    ff50:	86 81       	ldd	r24, Z+6	; 0x06
    ff52:	97 81       	ldd	r25, Z+7	; 0x07
    ff54:	04 c0       	rjmp	.+8      	; 0xff5e <utime+0x28>
    ff56:	80 e0       	ldi	r24, 0x00	; 0
    ff58:	90 e0       	ldi	r25, 0x00	; 0
    ff5a:	0e 94 5f 38 	call	0x70be	; 0x70be <time>
    ff5e:	9e 01       	movw	r18, r28
    ff60:	29 5e       	subi	r18, 0xE9	; 233
    ff62:	3e 4f       	sbci	r19, 0xFE	; 254
    ff64:	ae 01       	movw	r20, r28
    ff66:	47 5e       	subi	r20, 0xE7	; 231
    ff68:	5e 4f       	sbci	r21, 0xFE	; 254
    ff6a:	9d df       	rcall	.-198    	; 0xfea6 <unix_time_to_fat>
    ff6c:	c7 5e       	subi	r28, 0xE7	; 231
    ff6e:	de 4f       	sbci	r29, 0xFE	; 254
    ff70:	88 81       	ld	r24, Y
    ff72:	99 81       	ldd	r25, Y+1	; 0x01
    ff74:	c9 51       	subi	r28, 0x19	; 25
    ff76:	d1 40       	sbci	r29, 0x01	; 1
    ff78:	9e 83       	std	Y+6, r25	; 0x06
    ff7a:	8d 83       	std	Y+5, r24	; 0x05
    ff7c:	c9 5e       	subi	r28, 0xE9	; 233
    ff7e:	de 4f       	sbci	r29, 0xFE	; 254
    ff80:	88 81       	ld	r24, Y
    ff82:	99 81       	ldd	r25, Y+1	; 0x01
    ff84:	c7 51       	subi	r28, 0x17	; 23
    ff86:	d1 40       	sbci	r29, 0x01	; 1
    ff88:	98 87       	std	Y+8, r25	; 0x08
    ff8a:	8f 83       	std	Y+7, r24	; 0x07
    ff8c:	be 01       	movw	r22, r28
    ff8e:	6f 5f       	subi	r22, 0xFF	; 255
    ff90:	7f 4f       	sbci	r23, 0xFF	; 255
    ff92:	c8 01       	movw	r24, r16
    ff94:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <f_utime>
    ff98:	84 31       	cpi	r24, 0x14	; 20
    ff9a:	91 05       	cpc	r25, r1
    ff9c:	40 f4       	brcc	.+16     	; 0xffae <utime+0x78>
    ff9e:	fc 01       	movw	r30, r24
    ffa0:	ec 5f       	subi	r30, 0xFC	; 252
    ffa2:	f8 4f       	sbci	r31, 0xF8	; 248
    ffa4:	80 81       	ld	r24, Z
    ffa6:	08 2e       	mov	r0, r24
    ffa8:	00 0c       	add	r0, r0
    ffaa:	99 0b       	sbc	r25, r25
    ffac:	02 c0       	rjmp	.+4      	; 0xffb2 <utime+0x7c>
    ffae:	83 e2       	ldi	r24, 0x23	; 35
    ffb0:	90 e0       	ldi	r25, 0x00	; 0
    ffb2:	c6 5e       	subi	r28, 0xE6	; 230
    ffb4:	de 4f       	sbci	r29, 0xFE	; 254
    ffb6:	e4 e0       	ldi	r30, 0x04	; 4
    ffb8:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

0000ffbc <fileno_to_fatfs>:
    ffbc:	83 30       	cpi	r24, 0x03	; 3
    ffbe:	91 05       	cpc	r25, r1
    ffc0:	48 f4       	brcc	.+18     	; 0xffd4 <fileno_to_fatfs+0x18>
    ffc2:	89 e0       	ldi	r24, 0x09	; 9
    ffc4:	90 e0       	ldi	r25, 0x00	; 0
    ffc6:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ffca:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ffce:	80 e0       	ldi	r24, 0x00	; 0
    ffd0:	90 e0       	ldi	r25, 0x00	; 0
    ffd2:	08 95       	ret
    ffd4:	57 db       	rcall	.-2386   	; 0xf684 <fileno_to_stream>
    ffd6:	00 97       	sbiw	r24, 0x00	; 0
    ffd8:	d1 f3       	breq	.-12     	; 0xffce <fileno_to_fatfs+0x12>
    ffda:	fc 01       	movw	r30, r24
    ffdc:	84 85       	ldd	r24, Z+12	; 0x0c
    ffde:	95 85       	ldd	r25, Z+13	; 0x0d
    ffe0:	00 97       	sbiw	r24, 0x00	; 0
    ffe2:	79 f3       	breq	.-34     	; 0xffc2 <fileno_to_fatfs+0x6>
    ffe4:	08 95       	ret

0000ffe6 <ftell>:
    ffe6:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ffea:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ffee:	2e db       	rcall	.-2468   	; 0xf64c <fileno>
    fff0:	83 30       	cpi	r24, 0x03	; 3
    fff2:	91 05       	cpc	r25, r1
    fff4:	48 f0       	brcs	.+18     	; 0x10008 <__EEPROM_REGION_LENGTH__+0x8>
    fff6:	e2 df       	rcall	.-60     	; 0xffbc <fileno_to_fatfs>
    fff8:	00 97       	sbiw	r24, 0x00	; 0
    fffa:	51 f4       	brne	.+20     	; 0x10010 <__EEPROM_REGION_LENGTH__+0x10>
    fffc:	89 e0       	ldi	r24, 0x09	; 9
    fffe:	90 e0       	ldi	r25, 0x00	; 0
   10000:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   10004:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   10008:	6f ef       	ldi	r22, 0xFF	; 255
   1000a:	7f ef       	ldi	r23, 0xFF	; 255
   1000c:	cb 01       	movw	r24, r22
   1000e:	08 95       	ret
   10010:	fc 01       	movw	r30, r24
   10012:	60 89       	ldd	r22, Z+16	; 0x10
   10014:	71 89       	ldd	r23, Z+17	; 0x11
   10016:	82 89       	ldd	r24, Z+18	; 0x12
   10018:	93 89       	ldd	r25, Z+19	; 0x13
   1001a:	08 95       	ret

0001001c <lseek>:
   1001c:	a0 e0       	ldi	r26, 0x00	; 0
   1001e:	b0 e0       	ldi	r27, 0x00	; 0
   10020:	e4 e1       	ldi	r30, 0x14	; 20
   10022:	f0 e8       	ldi	r31, 0x80	; 128
   10024:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   10028:	5c 01       	movw	r10, r24
   1002a:	6a 01       	movw	r12, r20
   1002c:	7b 01       	movw	r14, r22
   1002e:	89 01       	movw	r16, r18
   10030:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   10034:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
   10038:	c1 df       	rcall	.-126    	; 0xffbc <fileno_to_fatfs>
   1003a:	ec 01       	movw	r28, r24
   1003c:	89 2b       	or	r24, r25
   1003e:	19 f4       	brne	.+6      	; 0x10046 <lseek+0x2a>
   10040:	88 e1       	ldi	r24, 0x18	; 24
   10042:	90 e0       	ldi	r25, 0x00	; 0
   10044:	26 c0       	rjmp	.+76     	; 0x10092 <lseek+0x76>
   10046:	83 e0       	ldi	r24, 0x03	; 3
   10048:	a8 16       	cp	r10, r24
   1004a:	b1 04       	cpc	r11, r1
   1004c:	d0 f1       	brcs	.+116    	; 0x100c2 <lseek+0xa6>
   1004e:	c5 01       	movw	r24, r10
   10050:	19 db       	rcall	.-2510   	; 0xf684 <fileno_to_stream>
   10052:	fc 01       	movw	r30, r24
   10054:	93 81       	ldd	r25, Z+3	; 0x03
   10056:	90 64       	ori	r25, 0x40	; 64
   10058:	93 83       	std	Z+3, r25	; 0x03
   1005a:	02 30       	cpi	r16, 0x02	; 2
   1005c:	11 05       	cpc	r17, r1
   1005e:	a9 f5       	brne	.+106    	; 0x100ca <lseek+0xae>
   10060:	8a 85       	ldd	r24, Y+10	; 0x0a
   10062:	9b 85       	ldd	r25, Y+11	; 0x0b
   10064:	ac 85       	ldd	r26, Y+12	; 0x0c
   10066:	bd 85       	ldd	r27, Y+13	; 0x0d
   10068:	c8 0e       	add	r12, r24
   1006a:	d9 1e       	adc	r13, r25
   1006c:	ea 1e       	adc	r14, r26
   1006e:	fb 1e       	adc	r15, r27
   10070:	b7 01       	movw	r22, r14
   10072:	a6 01       	movw	r20, r12
   10074:	ce 01       	movw	r24, r28
   10076:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <f_lseek>
   1007a:	00 97       	sbiw	r24, 0x00	; 0
   1007c:	79 f0       	breq	.+30     	; 0x1009c <lseek+0x80>
   1007e:	84 31       	cpi	r24, 0x14	; 20
   10080:	91 05       	cpc	r25, r1
   10082:	58 f5       	brcc	.+86     	; 0x100da <lseek+0xbe>
   10084:	fc 01       	movw	r30, r24
   10086:	ec 5f       	subi	r30, 0xFC	; 252
   10088:	f8 4f       	sbci	r31, 0xF8	; 248
   1008a:	80 81       	ld	r24, Z
   1008c:	08 2e       	mov	r0, r24
   1008e:	00 0c       	add	r0, r0
   10090:	99 0b       	sbc	r25, r25
   10092:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   10096:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   1009a:	13 c0       	rjmp	.+38     	; 0x100c2 <lseek+0xa6>
   1009c:	68 89       	ldd	r22, Y+16	; 0x10
   1009e:	79 89       	ldd	r23, Y+17	; 0x11
   100a0:	8a 89       	ldd	r24, Y+18	; 0x12
   100a2:	9b 89       	ldd	r25, Y+19	; 0x13
   100a4:	c6 16       	cp	r12, r22
   100a6:	d7 06       	cpc	r13, r23
   100a8:	e8 06       	cpc	r14, r24
   100aa:	f9 06       	cpc	r15, r25
   100ac:	c9 f0       	breq	.+50     	; 0x100e0 <lseek+0xc4>
   100ae:	84 e5       	ldi	r24, 0x54	; 84
   100b0:	9c e0       	ldi	r25, 0x0C	; 12
   100b2:	1f 92       	push	r1
   100b4:	9f 93       	push	r25
   100b6:	8f 93       	push	r24
   100b8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   100bc:	0f 90       	pop	r0
   100be:	0f 90       	pop	r0
   100c0:	0f 90       	pop	r0
   100c2:	6f ef       	ldi	r22, 0xFF	; 255
   100c4:	7f ef       	ldi	r23, 0xFF	; 255
   100c6:	cb 01       	movw	r24, r22
   100c8:	0b c0       	rjmp	.+22     	; 0x100e0 <lseek+0xc4>
   100ca:	01 30       	cpi	r16, 0x01	; 1
   100cc:	11 05       	cpc	r17, r1
   100ce:	81 f6       	brne	.-96     	; 0x10070 <lseek+0x54>
   100d0:	88 89       	ldd	r24, Y+16	; 0x10
   100d2:	99 89       	ldd	r25, Y+17	; 0x11
   100d4:	aa 89       	ldd	r26, Y+18	; 0x12
   100d6:	bb 89       	ldd	r27, Y+19	; 0x13
   100d8:	c7 cf       	rjmp	.-114    	; 0x10068 <lseek+0x4c>
   100da:	83 e2       	ldi	r24, 0x23	; 35
   100dc:	90 e0       	ldi	r25, 0x00	; 0
   100de:	d9 cf       	rjmp	.-78     	; 0x10092 <lseek+0x76>
   100e0:	cd b7       	in	r28, 0x3d	; 61
   100e2:	de b7       	in	r29, 0x3e	; 62
   100e4:	ea e0       	ldi	r30, 0x0A	; 10
   100e6:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

000100ea <fseek>:
   100ea:	cf 92       	push	r12
   100ec:	df 92       	push	r13
   100ee:	ef 92       	push	r14
   100f0:	ff 92       	push	r15
   100f2:	cf 93       	push	r28
   100f4:	df 93       	push	r29
   100f6:	6a 01       	movw	r12, r20
   100f8:	7b 01       	movw	r14, r22
   100fa:	e9 01       	movw	r28, r18
   100fc:	a7 da       	rcall	.-2738   	; 0xf64c <fileno>
   100fe:	97 fd       	sbrc	r25, 7
   10100:	12 c0       	rjmp	.+36     	; 0x10126 <fseek+0x3c>
   10102:	9e 01       	movw	r18, r28
   10104:	b7 01       	movw	r22, r14
   10106:	a6 01       	movw	r20, r12
   10108:	89 df       	rcall	.-238    	; 0x1001c <lseek>
   1010a:	21 e0       	ldi	r18, 0x01	; 1
   1010c:	30 e0       	ldi	r19, 0x00	; 0
   1010e:	6f 3f       	cpi	r22, 0xFF	; 255
   10110:	7f 4f       	sbci	r23, 0xFF	; 255
   10112:	8f 4f       	sbci	r24, 0xFF	; 255
   10114:	9f 4f       	sbci	r25, 0xFF	; 255
   10116:	11 f0       	breq	.+4      	; 0x1011c <fseek+0x32>
   10118:	20 e0       	ldi	r18, 0x00	; 0
   1011a:	30 e0       	ldi	r19, 0x00	; 0
   1011c:	88 27       	eor	r24, r24
   1011e:	99 27       	eor	r25, r25
   10120:	82 1b       	sub	r24, r18
   10122:	93 0b       	sbc	r25, r19
   10124:	02 c0       	rjmp	.+4      	; 0x1012a <fseek+0x40>
   10126:	8f ef       	ldi	r24, 0xFF	; 255
   10128:	9f ef       	ldi	r25, 0xFF	; 255
   1012a:	df 91       	pop	r29
   1012c:	cf 91       	pop	r28
   1012e:	ff 90       	pop	r15
   10130:	ef 90       	pop	r14
   10132:	df 90       	pop	r13
   10134:	cf 90       	pop	r12
   10136:	08 95       	ret

00010138 <read>:
   10138:	a2 e0       	ldi	r26, 0x02	; 2
   1013a:	b0 e0       	ldi	r27, 0x00	; 0
   1013c:	e2 ea       	ldi	r30, 0xA2	; 162
   1013e:	f0 e8       	ldi	r31, 0x80	; 128
   10140:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   10144:	5c 01       	movw	r10, r24
   10146:	8b 01       	movw	r16, r22
   10148:	6a 01       	movw	r12, r20
   1014a:	fb 01       	movw	r30, r22
   1014c:	10 82       	st	Z, r1
   1014e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   10152:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
   10156:	96 da       	rcall	.-2772   	; 0xf684 <fileno_to_stream>
   10158:	7c 01       	movw	r14, r24
   1015a:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
   1015e:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
   10162:	e8 16       	cp	r14, r24
   10164:	f9 06       	cpc	r15, r25
   10166:	c9 f4       	brne	.+50     	; 0x1019a <read+0x62>
   10168:	f7 01       	movw	r30, r14
   1016a:	83 81       	ldd	r24, Z+3	; 0x03
   1016c:	80 64       	ori	r24, 0x40	; 64
   1016e:	83 83       	std	Z+3, r24	; 0x03
   10170:	1a 82       	std	Y+2, r1	; 0x02
   10172:	19 82       	std	Y+1, r1	; 0x01
   10174:	c0 0e       	add	r12, r16
   10176:	d1 1e       	adc	r13, r17
   10178:	0c 15       	cp	r16, r12
   1017a:	1d 05       	cpc	r17, r13
   1017c:	09 f4       	brne	.+2      	; 0x10180 <read+0x48>
   1017e:	3d c0       	rjmp	.+122    	; 0x101fa <read+0xc2>
   10180:	c7 01       	movw	r24, r14
   10182:	4a d9       	rcall	.-3436   	; 0xf418 <fgetc>
   10184:	97 fd       	sbrc	r25, 7
   10186:	39 c0       	rjmp	.+114    	; 0x101fa <read+0xc2>
   10188:	f8 01       	movw	r30, r16
   1018a:	81 93       	st	Z+, r24
   1018c:	8f 01       	movw	r16, r30
   1018e:	89 81       	ldd	r24, Y+1	; 0x01
   10190:	9a 81       	ldd	r25, Y+2	; 0x02
   10192:	01 96       	adiw	r24, 0x01	; 1
   10194:	9a 83       	std	Y+2, r25	; 0x02
   10196:	89 83       	std	Y+1, r24	; 0x01
   10198:	ef cf       	rjmp	.-34     	; 0x10178 <read+0x40>
   1019a:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   1019e:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   101a2:	e8 16       	cp	r14, r24
   101a4:	f9 06       	cpc	r15, r25
   101a6:	71 f1       	breq	.+92     	; 0x10204 <read+0xcc>
   101a8:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
   101ac:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
   101b0:	e8 16       	cp	r14, r24
   101b2:	f9 06       	cpc	r15, r25
   101b4:	39 f1       	breq	.+78     	; 0x10204 <read+0xcc>
   101b6:	c5 01       	movw	r24, r10
   101b8:	01 df       	rcall	.-510    	; 0xffbc <fileno_to_fatfs>
   101ba:	00 97       	sbiw	r24, 0x00	; 0
   101bc:	19 f4       	brne	.+6      	; 0x101c4 <read+0x8c>
   101be:	89 e0       	ldi	r24, 0x09	; 9
   101c0:	90 e0       	ldi	r25, 0x00	; 0
   101c2:	16 c0       	rjmp	.+44     	; 0x101f0 <read+0xb8>
   101c4:	9e 01       	movw	r18, r28
   101c6:	2f 5f       	subi	r18, 0xFF	; 255
   101c8:	3f 4f       	sbci	r19, 0xFF	; 255
   101ca:	a6 01       	movw	r20, r12
   101cc:	b8 01       	movw	r22, r16
   101ce:	0e 94 87 5a 	call	0xb50e	; 0xb50e <f_read>
   101d2:	00 97       	sbiw	r24, 0x00	; 0
   101d4:	91 f0       	breq	.+36     	; 0x101fa <read+0xc2>
   101d6:	84 31       	cpi	r24, 0x14	; 20
   101d8:	91 05       	cpc	r25, r1
   101da:	40 f4       	brcc	.+16     	; 0x101ec <read+0xb4>
   101dc:	fc 01       	movw	r30, r24
   101de:	ec 5f       	subi	r30, 0xFC	; 252
   101e0:	f8 4f       	sbci	r31, 0xF8	; 248
   101e2:	80 81       	ld	r24, Z
   101e4:	08 2e       	mov	r0, r24
   101e6:	00 0c       	add	r0, r0
   101e8:	99 0b       	sbc	r25, r25
   101ea:	02 c0       	rjmp	.+4      	; 0x101f0 <read+0xb8>
   101ec:	83 e2       	ldi	r24, 0x23	; 35
   101ee:	90 e0       	ldi	r25, 0x00	; 0
   101f0:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   101f4:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   101f8:	05 c0       	rjmp	.+10     	; 0x10204 <read+0xcc>
   101fa:	69 81       	ldd	r22, Y+1	; 0x01
   101fc:	7a 81       	ldd	r23, Y+2	; 0x02
   101fe:	80 e0       	ldi	r24, 0x00	; 0
   10200:	90 e0       	ldi	r25, 0x00	; 0
   10202:	03 c0       	rjmp	.+6      	; 0x1020a <read+0xd2>
   10204:	6f ef       	ldi	r22, 0xFF	; 255
   10206:	7f ef       	ldi	r23, 0xFF	; 255
   10208:	cb 01       	movw	r24, r22
   1020a:	22 96       	adiw	r28, 0x02	; 2
   1020c:	ea e0       	ldi	r30, 0x0A	; 10
   1020e:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00010212 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   10212:	0f 93       	push	r16
   10214:	1f 93       	push	r17
   10216:	cf 93       	push	r28
   10218:	df 93       	push	r29
   1021a:	ec 01       	movw	r28, r24
   1021c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   1021e:	64 9f       	mul	r22, r20
   10220:	80 01       	movw	r16, r0
   10222:	65 9f       	mul	r22, r21
   10224:	10 0d       	add	r17, r0
   10226:	74 9f       	mul	r23, r20
   10228:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   1022a:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
   1022c:	0f da       	rcall	.-3042   	; 0xf64c <fileno>
   1022e:	a8 01       	movw	r20, r16
   10230:	be 01       	movw	r22, r28
    if(ret < 0)
   10232:	82 df       	rcall	.-252    	; 0x10138 <read>
   10234:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   10236:	02 c0       	rjmp	.+4      	; 0x1023c <fread+0x2a>
   10238:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
   1023a:	02 c0       	rjmp	.+4      	; 0x10240 <fread+0x2e>
   1023c:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   1023e:	90 e0       	ldi	r25, 0x00	; 0
   10240:	df 91       	pop	r29
   10242:	cf 91       	pop	r28
   10244:	1f 91       	pop	r17
   10246:	0f 91       	pop	r16
   10248:	08 95       	ret

0001024a <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
   1024a:	cf 93       	push	r28
   1024c:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
   1024e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   10252:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   10256:	83 30       	cpi	r24, 0x03	; 3
   10258:	91 05       	cpc	r25, r1
   1025a:	18 f4       	brcc	.+6      	; 0x10262 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
   1025c:	89 e0       	ldi	r24, 0x09	; 9
   1025e:	90 e0       	ldi	r25, 0x00	; 0
   10260:	18 c0       	rjmp	.+48     	; 0x10292 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
   10262:	ec 01       	movw	r28, r24
   10264:	0f da       	rcall	.-3042   	; 0xf684 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
   10266:	fc 01       	movw	r30, r24
   10268:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   1026a:	90 64       	ori	r25, 0x40	; 64
   1026c:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
   1026e:	ce 01       	movw	r24, r28
   10270:	a5 de       	rcall	.-694    	; 0xffbc <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
   10272:	00 97       	sbiw	r24, 0x00	; 0
   10274:	99 f3       	breq	.-26     	; 0x1025c <syncfs+0x12>
    if (res != FR_OK)
   10276:	0e 94 69 5d 	call	0xbad2	; 0xbad2 <f_sync>
   1027a:	00 97       	sbiw	r24, 0x00	; 0
   1027c:	a1 f0       	breq	.+40     	; 0x102a6 <syncfs+0x5c>
   1027e:	84 31       	cpi	r24, 0x14	; 20
   10280:	91 05       	cpc	r25, r1
   10282:	70 f4       	brcc	.+28     	; 0x102a0 <syncfs+0x56>
   10284:	fc 01       	movw	r30, r24
   10286:	ec 5f       	subi	r30, 0xFC	; 252
   10288:	f8 4f       	sbci	r31, 0xF8	; 248
   1028a:	80 81       	ld	r24, Z
   1028c:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
   1028e:	00 0c       	add	r0, r0
   10290:	99 0b       	sbc	r25, r25
   10292:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
        return(-1);
   10296:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   1029a:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
   1029c:	9f ef       	ldi	r25, 0xFF	; 255
   1029e:	05 c0       	rjmp	.+10     	; 0x102aa <syncfs+0x60>
   102a0:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
   102a2:	90 e0       	ldi	r25, 0x00	; 0
   102a4:	f6 cf       	rjmp	.-20     	; 0x10292 <syncfs+0x48>
}
   102a6:	80 e0       	ldi	r24, 0x00	; 0
   102a8:	90 e0       	ldi	r25, 0x00	; 0
   102aa:	df 91       	pop	r29
   102ac:	cf 91       	pop	r28
   102ae:	08 95       	ret

000102b0 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
   102b0:	cf 93       	push	r28
   102b2:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
   102b4:	c0 e0       	ldi	r28, 0x00	; 0
   102b6:	d0 e0       	ldi	r29, 0x00	; 0
   102b8:	21 96       	adiw	r28, 0x01	; 1
   102ba:	c0 31       	cpi	r28, 0x10	; 16
   102bc:	d1 05       	cpc	r29, r1
   102be:	51 f0       	breq	.+20     	; 0x102d4 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   102c0:	c3 30       	cpi	r28, 0x03	; 3
   102c2:	d1 05       	cpc	r29, r1
   102c4:	cc f3       	brlt	.-14     	; 0x102b8 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
   102c6:	ce 01       	movw	r24, r28
   102c8:	79 de       	rcall	.-782    	; 0xffbc <fileno_to_fatfs>
        if(fh == NULL)
   102ca:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
   102cc:	a9 f3       	breq	.-22     	; 0x102b8 <sync+0x8>
   102ce:	ce 01       	movw	r24, r28
   102d0:	bc df       	rcall	.-136    	; 0x1024a <syncfs>
    }
}
   102d2:	f2 cf       	rjmp	.-28     	; 0x102b8 <sync+0x8>
   102d4:	df 91       	pop	r29
   102d6:	cf 91       	pop	r28
   102d8:	08 95       	ret

000102da <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
   102da:	a2 e0       	ldi	r26, 0x02	; 2
   102dc:	b0 e0       	ldi	r27, 0x00	; 0
   102de:	e3 e7       	ldi	r30, 0x73	; 115
   102e0:	f1 e8       	ldi	r31, 0x81	; 129
   102e2:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   102e6:	8c 01       	movw	r16, r24
   102e8:	b6 2e       	mov	r11, r22
   102ea:	f7 2e       	mov	r15, r23
   102ec:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
   102ee:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   102f2:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
   102f6:	c6 d9       	rcall	.-3188   	; 0xf684 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
   102f8:	6c 01       	movw	r12, r24
   102fa:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   102fe:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   10302:	c8 16       	cp	r12, r24
   10304:	d9 06       	cpc	r13, r25
   10306:	39 f0       	breq	.+14     	; 0x10316 <write+0x3c>
   10308:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
   1030c:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
   10310:	c8 16       	cp	r12, r24
   10312:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
   10314:	d1 f4       	brne	.+52     	; 0x1034a <write+0x70>
   10316:	1a 82       	std	Y+2, r1	; 0x02
   10318:	19 82       	std	Y+1, r1	; 0x01
   1031a:	0b 2d       	mov	r16, r11
   1031c:	1f 2d       	mov	r17, r15
   1031e:	78 01       	movw	r14, r16
   10320:	e8 0c       	add	r14, r8
        while(count--)
   10322:	f9 1c       	adc	r15, r9
   10324:	0e 15       	cp	r16, r14
   10326:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
   10328:	d1 f1       	breq	.+116    	; 0x1039e <write+0xc4>
   1032a:	f8 01       	movw	r30, r16
   1032c:	a1 90       	ld	r10, Z+
   1032e:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
   10330:	b1 2c       	mov	r11, r1
   10332:	b6 01       	movw	r22, r12
   10334:	c5 01       	movw	r24, r10
            if(c != ret)
   10336:	c1 d8       	rcall	.-3710   	; 0xf4ba <fputc>
   10338:	a8 16       	cp	r10, r24
   1033a:	b9 06       	cpc	r11, r25
                break;

            ++size;
   1033c:	81 f5       	brne	.+96     	; 0x1039e <write+0xc4>
   1033e:	89 81       	ldd	r24, Y+1	; 0x01
   10340:	9a 81       	ldd	r25, Y+2	; 0x02
   10342:	01 96       	adiw	r24, 0x01	; 1
   10344:	9a 83       	std	Y+2, r25	; 0x02
   10346:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
   10348:	ed cf       	rjmp	.-38     	; 0x10324 <write+0x4a>
   1034a:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
   1034e:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
   10352:	c8 16       	cp	r12, r24
   10354:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   10356:	41 f1       	breq	.+80     	; 0x103a8 <write+0xce>
   10358:	c8 01       	movw	r24, r16
    if ( fh == NULL )
   1035a:	30 de       	rcall	.-928    	; 0xffbc <fileno_to_fatfs>
   1035c:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
   1035e:	19 f4       	brne	.+6      	; 0x10366 <write+0x8c>
   10360:	89 e0       	ldi	r24, 0x09	; 9
   10362:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
   10364:	17 c0       	rjmp	.+46     	; 0x10394 <write+0xba>
   10366:	9e 01       	movw	r18, r28
   10368:	2f 5f       	subi	r18, 0xFF	; 255
   1036a:	3f 4f       	sbci	r19, 0xFF	; 255
   1036c:	a4 01       	movw	r20, r8
   1036e:	6b 2d       	mov	r22, r11
   10370:	7f 2d       	mov	r23, r15
   10372:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <f_write>
    if(res != FR_OK)
   10376:	00 97       	sbiw	r24, 0x00	; 0
   10378:	91 f0       	breq	.+36     	; 0x1039e <write+0xc4>
   1037a:	84 31       	cpi	r24, 0x14	; 20
   1037c:	91 05       	cpc	r25, r1
   1037e:	40 f4       	brcc	.+16     	; 0x10390 <write+0xb6>
   10380:	fc 01       	movw	r30, r24
   10382:	ec 5f       	subi	r30, 0xFC	; 252
   10384:	f8 4f       	sbci	r31, 0xF8	; 248
   10386:	80 81       	ld	r24, Z
   10388:	08 2e       	mov	r0, r24
   1038a:	00 0c       	add	r0, r0
   1038c:	99 0b       	sbc	r25, r25
   1038e:	02 c0       	rjmp	.+4      	; 0x10394 <write+0xba>
   10390:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
   10392:	90 e0       	ldi	r25, 0x00	; 0
   10394:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   10398:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
        return(-1);
    }
    return ((ssize_t) size);
   1039c:	05 c0       	rjmp	.+10     	; 0x103a8 <write+0xce>
   1039e:	69 81       	ldd	r22, Y+1	; 0x01
   103a0:	7a 81       	ldd	r23, Y+2	; 0x02
   103a2:	80 e0       	ldi	r24, 0x00	; 0
   103a4:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
   103a6:	03 c0       	rjmp	.+6      	; 0x103ae <write+0xd4>
   103a8:	6f ef       	ldi	r22, 0xFF	; 255
   103aa:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
   103ac:	cb 01       	movw	r24, r22
   103ae:	22 96       	adiw	r28, 0x02	; 2
   103b0:	ec e0       	ldi	r30, 0x0C	; 12
   103b2:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

000103b6 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   103b6:	0f 93       	push	r16
   103b8:	1f 93       	push	r17
   103ba:	cf 93       	push	r28
   103bc:	df 93       	push	r29
   103be:	ec 01       	movw	r28, r24
   103c0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   103c2:	64 9f       	mul	r22, r20
   103c4:	80 01       	movw	r16, r0
   103c6:	65 9f       	mul	r22, r21
   103c8:	10 0d       	add	r17, r0
   103ca:	74 9f       	mul	r23, r20
   103cc:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   103ce:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   103d0:	3d d9       	rcall	.-3462   	; 0xf64c <fileno>
   103d2:	a8 01       	movw	r20, r16
   103d4:	be 01       	movw	r22, r28

    if(ret < 0)
   103d6:	81 df       	rcall	.-254    	; 0x102da <write>
   103d8:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   103da:	02 c0       	rjmp	.+4      	; 0x103e0 <fwrite+0x2a>
   103dc:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   103de:	02 c0       	rjmp	.+4      	; 0x103e4 <fwrite+0x2e>
   103e0:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   103e2:	90 e0       	ldi	r25, 0x00	; 0
   103e4:	df 91       	pop	r29
   103e6:	cf 91       	pop	r28
   103e8:	1f 91       	pop	r17
   103ea:	0f 91       	pop	r16
   103ec:	08 95       	ret

000103ee <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   103ee:	0f 93       	push	r16
   103f0:	1f 93       	push	r17
   103f2:	cf 93       	push	r28
   103f4:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   103f6:	83 30       	cpi	r24, 0x03	; 3
   103f8:	91 05       	cpc	r25, r1
   103fa:	48 f4       	brcc	.+18     	; 0x1040e <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   103fc:	89 e0       	ldi	r24, 0x09	; 9
   103fe:	90 e0       	ldi	r25, 0x00	; 0
   10400:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   10404:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
        return(-1);
   10408:	8f ef       	ldi	r24, 0xFF	; 255
   1040a:	9f ef       	ldi	r25, 0xFF	; 255
   1040c:	20 c0       	rjmp	.+64     	; 0x1044e <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   1040e:	ec 01       	movw	r28, r24
   10410:	39 d9       	rcall	.-3470   	; 0xf684 <fileno_to_stream>
    if(stream == NULL)
   10412:	8c 01       	movw	r16, r24
   10414:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   10416:	c1 f3       	breq	.-16     	; 0x10408 <free_file_descriptor+0x1a>
   10418:	f8 01       	movw	r30, r16
   1041a:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   1041c:	95 85       	ldd	r25, Z+13	; 0x0d
   1041e:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   10420:	11 f0       	breq	.+4      	; 0x10426 <free_file_descriptor+0x38>
   10422:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   10426:	f8 01       	movw	r30, r16
   10428:	80 81       	ld	r24, Z
   1042a:	91 81       	ldd	r25, Z+1	; 0x01
   1042c:	00 97       	sbiw	r24, 0x00	; 0
   1042e:	21 f0       	breq	.+8      	; 0x10438 <free_file_descriptor+0x4a>
   10430:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   10432:	27 fd       	sbrc	r18, 7
   10434:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
    }

    __iob[fileno]  = NULL;
   10438:	fe 01       	movw	r30, r28
   1043a:	ee 0f       	add	r30, r30
   1043c:	ff 1f       	adc	r31, r31
   1043e:	ee 53       	subi	r30, 0x3E	; 62
   10440:	f3 4e       	sbci	r31, 0xE3	; 227
   10442:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   10444:	10 82       	st	Z, r1
   10446:	c8 01       	movw	r24, r16
   10448:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
    return(fileno);
}
   1044c:	ce 01       	movw	r24, r28
   1044e:	df 91       	pop	r29
   10450:	cf 91       	pop	r28
   10452:	1f 91       	pop	r17
   10454:	0f 91       	pop	r16
   10456:	08 95       	ret

00010458 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   10458:	0f 93       	push	r16
   1045a:	1f 93       	push	r17
   1045c:	cf 93       	push	r28
   1045e:	df 93       	push	r29
   10460:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   10462:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   10466:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   1046a:	0c d9       	rcall	.-3560   	; 0xf684 <fileno_to_stream>
   1046c:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   1046e:	d9 f0       	breq	.+54     	; 0x104a6 <close+0x4e>
   10470:	c8 01       	movw	r24, r16
    if(fh == NULL)
   10472:	a4 dd       	rcall	.-1208   	; 0xffbc <fileno_to_fatfs>
   10474:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   10476:	b9 f0       	breq	.+46     	; 0x104a6 <close+0x4e>
   10478:	0e 94 e9 5d 	call	0xbbd2	; 0xbbd2 <f_close>
    free_file_descriptor(fileno);
   1047c:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   1047e:	c8 01       	movw	r24, r16
   10480:	b6 df       	rcall	.-148    	; 0x103ee <free_file_descriptor>
   10482:	20 97       	sbiw	r28, 0x00	; 0
   10484:	99 f0       	breq	.+38     	; 0x104ac <close+0x54>
   10486:	c4 31       	cpi	r28, 0x14	; 20
   10488:	d1 05       	cpc	r29, r1
   1048a:	38 f4       	brcc	.+14     	; 0x1049a <close+0x42>
   1048c:	cc 5f       	subi	r28, 0xFC	; 252
   1048e:	d8 4f       	sbci	r29, 0xF8	; 248
   10490:	88 81       	ld	r24, Y
   10492:	08 2e       	mov	r0, r24
   10494:	00 0c       	add	r0, r0
   10496:	99 0b       	sbc	r25, r25
   10498:	02 c0       	rjmp	.+4      	; 0x1049e <close+0x46>
    {
        errno = fatfs_to_errno(res);
   1049a:	83 e2       	ldi	r24, 0x23	; 35
   1049c:	90 e0       	ldi	r25, 0x00	; 0
   1049e:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
        return(-1);
   104a2:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   104a6:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   104a8:	9f ef       	ldi	r25, 0xFF	; 255
   104aa:	02 c0       	rjmp	.+4      	; 0x104b0 <close+0x58>
}
   104ac:	80 e0       	ldi	r24, 0x00	; 0
   104ae:	90 e0       	ldi	r25, 0x00	; 0
   104b0:	df 91       	pop	r29
   104b2:	cf 91       	pop	r28
   104b4:	1f 91       	pop	r17
   104b6:	0f 91       	pop	r16
   104b8:	08 95       	ret

000104ba <fclose>:
   104ba:	c8 d8       	rcall	.-3696   	; 0xf64c <fileno>
   104bc:	97 fd       	sbrc	r25, 7
   104be:	02 c0       	rjmp	.+4      	; 0x104c4 <fclose+0xa>
   104c0:	cb cf       	rjmp	.-106    	; 0x10458 <close>
   104c2:	08 95       	ret
   104c4:	8f ef       	ldi	r24, 0xFF	; 255
   104c6:	9f ef       	ldi	r25, 0xFF	; 255
   104c8:	08 95       	ret

000104ca <new_file_descriptor>:
   104ca:	0f 93       	push	r16
   104cc:	1f 93       	push	r17
   104ce:	cf 93       	push	r28
   104d0:	df 93       	push	r29
   104d2:	e2 ec       	ldi	r30, 0xC2	; 194
   104d4:	fc e1       	ldi	r31, 0x1C	; 28
   104d6:	c0 e0       	ldi	r28, 0x00	; 0
   104d8:	d0 e0       	ldi	r29, 0x00	; 0
   104da:	21 96       	adiw	r28, 0x01	; 1
   104dc:	c0 31       	cpi	r28, 0x10	; 16
   104de:	d1 05       	cpc	r29, r1
   104e0:	49 f0       	breq	.+18     	; 0x104f4 <new_file_descriptor+0x2a>
   104e2:	c3 30       	cpi	r28, 0x03	; 3
   104e4:	d1 05       	cpc	r29, r1
   104e6:	24 f0       	brlt	.+8      	; 0x104f0 <new_file_descriptor+0x26>
   104e8:	82 81       	ldd	r24, Z+2	; 0x02
   104ea:	93 81       	ldd	r25, Z+3	; 0x03
   104ec:	89 2b       	or	r24, r25
   104ee:	59 f0       	breq	.+22     	; 0x10506 <new_file_descriptor+0x3c>
   104f0:	32 96       	adiw	r30, 0x02	; 2
   104f2:	f3 cf       	rjmp	.-26     	; 0x104da <new_file_descriptor+0x10>
   104f4:	87 e1       	ldi	r24, 0x17	; 23
   104f6:	90 e0       	ldi	r25, 0x00	; 0
   104f8:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   104fc:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   10500:	8f ef       	ldi	r24, 0xFF	; 255
   10502:	9f ef       	ldi	r25, 0xFF	; 255
   10504:	22 c0       	rjmp	.+68     	; 0x1054a <new_file_descriptor+0x80>
   10506:	61 e0       	ldi	r22, 0x01	; 1
   10508:	70 e0       	ldi	r23, 0x00	; 0
   1050a:	8e e0       	ldi	r24, 0x0E	; 14
   1050c:	90 e0       	ldi	r25, 0x00	; 0
   1050e:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   10512:	8c 01       	movw	r16, r24
   10514:	89 2b       	or	r24, r25
   10516:	59 f0       	breq	.+22     	; 0x1052e <new_file_descriptor+0x64>
   10518:	61 e0       	ldi	r22, 0x01	; 1
   1051a:	70 e0       	ldi	r23, 0x00	; 0
   1051c:	84 e2       	ldi	r24, 0x24	; 36
   1051e:	92 e0       	ldi	r25, 0x02	; 2
   10520:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   10524:	00 97       	sbiw	r24, 0x00	; 0
   10526:	31 f4       	brne	.+12     	; 0x10534 <new_file_descriptor+0x6a>
   10528:	c8 01       	movw	r24, r16
   1052a:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
   1052e:	8c e0       	ldi	r24, 0x0C	; 12
   10530:	90 e0       	ldi	r25, 0x00	; 0
   10532:	e2 cf       	rjmp	.-60     	; 0x104f8 <new_file_descriptor+0x2e>
   10534:	fe 01       	movw	r30, r28
   10536:	ee 0f       	add	r30, r30
   10538:	ff 1f       	adc	r31, r31
   1053a:	ee 53       	subi	r30, 0x3E	; 62
   1053c:	f3 4e       	sbci	r31, 0xE3	; 227
   1053e:	11 83       	std	Z+1, r17	; 0x01
   10540:	00 83       	st	Z, r16
   10542:	f8 01       	movw	r30, r16
   10544:	95 87       	std	Z+13, r25	; 0x0d
   10546:	84 87       	std	Z+12, r24	; 0x0c
   10548:	ce 01       	movw	r24, r28
   1054a:	df 91       	pop	r29
   1054c:	cf 91       	pop	r28
   1054e:	1f 91       	pop	r17
   10550:	0f 91       	pop	r16
   10552:	08 95       	ret

00010554 <open>:
   10554:	a0 e0       	ldi	r26, 0x00	; 0
   10556:	b0 e0       	ldi	r27, 0x00	; 0
   10558:	e0 eb       	ldi	r30, 0xB0	; 176
   1055a:	f2 e8       	ldi	r31, 0x82	; 130
   1055c:	0c 94 1f eb 	jmp	0x1d63e	; 0x1d63e <__prologue_saves__+0x8>
   10560:	5c 01       	movw	r10, r24
   10562:	6b 01       	movw	r12, r22
   10564:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
   10568:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
   1056c:	7b 01       	movw	r14, r22
   1056e:	83 e0       	ldi	r24, 0x03	; 3
   10570:	e8 22       	and	r14, r24
   10572:	ff 24       	eor	r15, r15
   10574:	e2 e0       	ldi	r30, 0x02	; 2
   10576:	ee 16       	cp	r14, r30
   10578:	f1 04       	cpc	r15, r1
   1057a:	31 f0       	breq	.+12     	; 0x10588 <open+0x34>
   1057c:	e1 14       	cp	r14, r1
   1057e:	f1 04       	cpc	r15, r1
   10580:	31 f0       	breq	.+12     	; 0x1058e <open+0x3a>
   10582:	02 e0       	ldi	r16, 0x02	; 2
   10584:	10 e0       	ldi	r17, 0x00	; 0
   10586:	05 c0       	rjmp	.+10     	; 0x10592 <open+0x3e>
   10588:	03 e0       	ldi	r16, 0x03	; 3
   1058a:	10 e0       	ldi	r17, 0x00	; 0
   1058c:	02 c0       	rjmp	.+4      	; 0x10592 <open+0x3e>
   1058e:	01 e0       	ldi	r16, 0x01	; 1
   10590:	10 e0       	ldi	r17, 0x00	; 0
   10592:	c6 fe       	sbrs	r12, 6
   10594:	05 c0       	rjmp	.+10     	; 0x105a0 <open+0x4c>
   10596:	d1 fe       	sbrs	r13, 1
   10598:	02 c0       	rjmp	.+4      	; 0x1059e <open+0x4a>
   1059a:	08 60       	ori	r16, 0x08	; 8
   1059c:	01 c0       	rjmp	.+2      	; 0x105a0 <open+0x4c>
   1059e:	00 61       	ori	r16, 0x10	; 16
   105a0:	94 df       	rcall	.-216    	; 0x104ca <new_file_descriptor>
   105a2:	3c 01       	movw	r6, r24
   105a4:	6f d8       	rcall	.-3874   	; 0xf684 <fileno_to_stream>
   105a6:	ec 01       	movw	r28, r24
   105a8:	c3 01       	movw	r24, r6
   105aa:	20 97       	sbiw	r28, 0x00	; 0
   105ac:	09 f4       	brne	.+2      	; 0x105b0 <open+0x5c>
   105ae:	48 c0       	rjmp	.+144    	; 0x10640 <open+0xec>
   105b0:	05 dd       	rcall	.-1526   	; 0xffbc <fileno_to_fatfs>
   105b2:	4c 01       	movw	r8, r24
   105b4:	00 97       	sbiw	r24, 0x00	; 0
   105b6:	59 f4       	brne	.+22     	; 0x105ce <open+0x7a>
   105b8:	c3 01       	movw	r24, r6
   105ba:	19 df       	rcall	.-462    	; 0x103ee <free_file_descriptor>
   105bc:	89 e0       	ldi	r24, 0x09	; 9
   105be:	90 e0       	ldi	r25, 0x00	; 0
   105c0:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   105c4:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   105c8:	8f ef       	ldi	r24, 0xFF	; 255
   105ca:	9f ef       	ldi	r25, 0xFF	; 255
   105cc:	5d c0       	rjmp	.+186    	; 0x10688 <open+0x134>
   105ce:	40 2f       	mov	r20, r16
   105d0:	b5 01       	movw	r22, r10
   105d2:	0e 94 8b 58 	call	0xb116	; 0xb116 <f_open>
   105d6:	00 97       	sbiw	r24, 0x00	; 0
   105d8:	91 f0       	breq	.+36     	; 0x105fe <open+0xaa>
   105da:	84 31       	cpi	r24, 0x14	; 20
   105dc:	91 05       	cpc	r25, r1
   105de:	40 f4       	brcc	.+16     	; 0x105f0 <open+0x9c>
   105e0:	fc 01       	movw	r30, r24
   105e2:	ec 5f       	subi	r30, 0xFC	; 252
   105e4:	f8 4f       	sbci	r31, 0xF8	; 248
   105e6:	80 81       	ld	r24, Z
   105e8:	08 2e       	mov	r0, r24
   105ea:	00 0c       	add	r0, r0
   105ec:	99 0b       	sbc	r25, r25
   105ee:	02 c0       	rjmp	.+4      	; 0x105f4 <open+0xa0>
   105f0:	83 e2       	ldi	r24, 0x23	; 35
   105f2:	90 e0       	ldi	r25, 0x00	; 0
   105f4:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   105f8:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   105fc:	20 c0       	rjmp	.+64     	; 0x1063e <open+0xea>
   105fe:	d2 fe       	sbrs	r13, 2
   10600:	21 c0       	rjmp	.+66     	; 0x10644 <open+0xf0>
   10602:	f4 01       	movw	r30, r8
   10604:	42 85       	ldd	r20, Z+10	; 0x0a
   10606:	53 85       	ldd	r21, Z+11	; 0x0b
   10608:	64 85       	ldd	r22, Z+12	; 0x0c
   1060a:	75 85       	ldd	r23, Z+13	; 0x0d
   1060c:	c4 01       	movw	r24, r8
   1060e:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <f_lseek>
   10612:	00 97       	sbiw	r24, 0x00	; 0
   10614:	b9 f0       	breq	.+46     	; 0x10644 <open+0xf0>
   10616:	84 31       	cpi	r24, 0x14	; 20
   10618:	91 05       	cpc	r25, r1
   1061a:	40 f4       	brcc	.+16     	; 0x1062c <open+0xd8>
   1061c:	fc 01       	movw	r30, r24
   1061e:	ec 5f       	subi	r30, 0xFC	; 252
   10620:	f8 4f       	sbci	r31, 0xF8	; 248
   10622:	80 81       	ld	r24, Z
   10624:	08 2e       	mov	r0, r24
   10626:	00 0c       	add	r0, r0
   10628:	99 0b       	sbc	r25, r25
   1062a:	02 c0       	rjmp	.+4      	; 0x10630 <open+0xdc>
   1062c:	83 e2       	ldi	r24, 0x23	; 35
   1062e:	90 e0       	ldi	r25, 0x00	; 0
   10630:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
   10634:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
   10638:	c4 01       	movw	r24, r8
   1063a:	0e 94 e9 5d 	call	0xbbd2	; 0xbbd2 <f_close>
   1063e:	c3 01       	movw	r24, r6
   10640:	d6 de       	rcall	.-596    	; 0x103ee <free_file_descriptor>
   10642:	c2 cf       	rjmp	.-124    	; 0x105c8 <open+0x74>
   10644:	f2 e0       	ldi	r31, 0x02	; 2
   10646:	ef 16       	cp	r14, r31
   10648:	f1 04       	cpc	r15, r1
   1064a:	51 f4       	brne	.+20     	; 0x10660 <open+0x10c>
   1064c:	81 ec       	ldi	r24, 0xC1	; 193
   1064e:	99 e7       	ldi	r25, 0x79	; 121
   10650:	99 87       	std	Y+9, r25	; 0x09
   10652:	88 87       	std	Y+8, r24	; 0x08
   10654:	8e e3       	ldi	r24, 0x3E	; 62
   10656:	99 e7       	ldi	r25, 0x79	; 121
   10658:	9b 87       	std	Y+11, r25	; 0x0b
   1065a:	8a 87       	std	Y+10, r24	; 0x0a
   1065c:	83 e0       	ldi	r24, 0x03	; 3
   1065e:	12 c0       	rjmp	.+36     	; 0x10684 <open+0x130>
   10660:	e1 14       	cp	r14, r1
   10662:	f1 04       	cpc	r15, r1
   10664:	41 f4       	brne	.+16     	; 0x10676 <open+0x122>
   10666:	19 86       	std	Y+9, r1	; 0x09
   10668:	18 86       	std	Y+8, r1	; 0x08
   1066a:	8e e3       	ldi	r24, 0x3E	; 62
   1066c:	99 e7       	ldi	r25, 0x79	; 121
   1066e:	9b 87       	std	Y+11, r25	; 0x0b
   10670:	8a 87       	std	Y+10, r24	; 0x0a
   10672:	81 e0       	ldi	r24, 0x01	; 1
   10674:	07 c0       	rjmp	.+14     	; 0x10684 <open+0x130>
   10676:	81 ec       	ldi	r24, 0xC1	; 193
   10678:	99 e7       	ldi	r25, 0x79	; 121
   1067a:	99 87       	std	Y+9, r25	; 0x09
   1067c:	88 87       	std	Y+8, r24	; 0x08
   1067e:	1b 86       	std	Y+11, r1	; 0x0b
   10680:	1a 86       	std	Y+10, r1	; 0x0a
   10682:	82 e0       	ldi	r24, 0x02	; 2
   10684:	8b 83       	std	Y+3, r24	; 0x03
   10686:	c3 01       	movw	r24, r6
   10688:	cd b7       	in	r28, 0x3d	; 61
   1068a:	de b7       	in	r29, 0x3e	; 62
   1068c:	ee e0       	ldi	r30, 0x0E	; 14
   1068e:	0c 94 3b eb 	jmp	0x1d676	; 0x1d676 <__epilogue_restores__+0x8>

00010692 <posix_fopen_modes_to_open>:
   10692:	cf 93       	push	r28
   10694:	df 93       	push	r29
   10696:	ec 01       	movw	r28, r24
   10698:	6b e2       	ldi	r22, 0x2B	; 43
   1069a:	77 e0       	ldi	r23, 0x07	; 7
   1069c:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106a0:	00 97       	sbiw	r24, 0x00	; 0
   106a2:	09 f4       	brne	.+2      	; 0x106a6 <posix_fopen_modes_to_open+0x14>
   106a4:	5d c0       	rjmp	.+186    	; 0x10760 <posix_fopen_modes_to_open+0xce>
   106a6:	60 e7       	ldi	r22, 0x70	; 112
   106a8:	78 e0       	ldi	r23, 0x08	; 8
   106aa:	ce 01       	movw	r24, r28
   106ac:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106b0:	00 97       	sbiw	r24, 0x00	; 0
   106b2:	09 f4       	brne	.+2      	; 0x106b6 <posix_fopen_modes_to_open+0x24>
   106b4:	55 c0       	rjmp	.+170    	; 0x10760 <posix_fopen_modes_to_open+0xce>
   106b6:	63 e7       	ldi	r22, 0x73	; 115
   106b8:	78 e0       	ldi	r23, 0x08	; 8
   106ba:	ce 01       	movw	r24, r28
   106bc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106c0:	89 2b       	or	r24, r25
   106c2:	09 f4       	brne	.+2      	; 0x106c6 <posix_fopen_modes_to_open+0x34>
   106c4:	42 c0       	rjmp	.+132    	; 0x1074a <posix_fopen_modes_to_open+0xb8>
   106c6:	66 e7       	ldi	r22, 0x76	; 118
   106c8:	78 e0       	ldi	r23, 0x08	; 8
   106ca:	ce 01       	movw	r24, r28
   106cc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106d0:	89 2b       	or	r24, r25
   106d2:	d9 f1       	breq	.+118    	; 0x1074a <posix_fopen_modes_to_open+0xb8>
   106d4:	6a e7       	ldi	r22, 0x7A	; 122
   106d6:	78 e0       	ldi	r23, 0x08	; 8
   106d8:	ce 01       	movw	r24, r28
   106da:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106de:	89 2b       	or	r24, r25
   106e0:	a1 f1       	breq	.+104    	; 0x1074a <posix_fopen_modes_to_open+0xb8>
   106e2:	6f e2       	ldi	r22, 0x2F	; 47
   106e4:	7a e0       	ldi	r23, 0x0A	; 10
   106e6:	ce 01       	movw	r24, r28
   106e8:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106ec:	89 2b       	or	r24, r25
   106ee:	81 f1       	breq	.+96     	; 0x10750 <posix_fopen_modes_to_open+0xbe>
   106f0:	6e e7       	ldi	r22, 0x7E	; 126
   106f2:	78 e0       	ldi	r23, 0x08	; 8
   106f4:	ce 01       	movw	r24, r28
   106f6:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   106fa:	89 2b       	or	r24, r25
   106fc:	49 f1       	breq	.+82     	; 0x10750 <posix_fopen_modes_to_open+0xbe>
   106fe:	61 e8       	ldi	r22, 0x81	; 129
   10700:	78 e0       	ldi	r23, 0x08	; 8
   10702:	ce 01       	movw	r24, r28
   10704:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   10708:	89 2b       	or	r24, r25
   1070a:	29 f1       	breq	.+74     	; 0x10756 <posix_fopen_modes_to_open+0xc4>
   1070c:	64 e8       	ldi	r22, 0x84	; 132
   1070e:	78 e0       	ldi	r23, 0x08	; 8
   10710:	ce 01       	movw	r24, r28
   10712:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   10716:	89 2b       	or	r24, r25
   10718:	f1 f0       	breq	.+60     	; 0x10756 <posix_fopen_modes_to_open+0xc4>
   1071a:	68 e8       	ldi	r22, 0x88	; 136
   1071c:	78 e0       	ldi	r23, 0x08	; 8
   1071e:	ce 01       	movw	r24, r28
   10720:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   10724:	89 2b       	or	r24, r25
   10726:	b9 f0       	breq	.+46     	; 0x10756 <posix_fopen_modes_to_open+0xc4>
   10728:	6c e8       	ldi	r22, 0x8C	; 140
   1072a:	70 e1       	ldi	r23, 0x10	; 16
   1072c:	ce 01       	movw	r24, r28
   1072e:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   10732:	89 2b       	or	r24, r25
   10734:	99 f0       	breq	.+38     	; 0x1075c <posix_fopen_modes_to_open+0xca>
   10736:	6c e8       	ldi	r22, 0x8C	; 140
   10738:	78 e0       	ldi	r23, 0x08	; 8
   1073a:	ce 01       	movw	r24, r28
   1073c:	0e 94 62 32 	call	0x64c4	; 0x64c4 <strcmp>
   10740:	89 2b       	or	r24, r25
   10742:	61 f0       	breq	.+24     	; 0x1075c <posix_fopen_modes_to_open+0xca>
   10744:	8f ef       	ldi	r24, 0xFF	; 255
   10746:	9f ef       	ldi	r25, 0xFF	; 255
   10748:	0b c0       	rjmp	.+22     	; 0x10760 <posix_fopen_modes_to_open+0xce>
   1074a:	82 e0       	ldi	r24, 0x02	; 2
   1074c:	92 e0       	ldi	r25, 0x02	; 2
   1074e:	08 c0       	rjmp	.+16     	; 0x10760 <posix_fopen_modes_to_open+0xce>
   10750:	81 e4       	ldi	r24, 0x41	; 65
   10752:	92 e0       	ldi	r25, 0x02	; 2
   10754:	05 c0       	rjmp	.+10     	; 0x10760 <posix_fopen_modes_to_open+0xce>
   10756:	82 e4       	ldi	r24, 0x42	; 66
   10758:	92 e0       	ldi	r25, 0x02	; 2
   1075a:	02 c0       	rjmp	.+4      	; 0x10760 <posix_fopen_modes_to_open+0xce>
   1075c:	81 e4       	ldi	r24, 0x41	; 65
   1075e:	94 e0       	ldi	r25, 0x04	; 4
   10760:	df 91       	pop	r29
   10762:	cf 91       	pop	r28
   10764:	08 95       	ret

00010766 <fopen>:
   10766:	cf 93       	push	r28
   10768:	df 93       	push	r29
   1076a:	ec 01       	movw	r28, r24
   1076c:	cb 01       	movw	r24, r22
   1076e:	91 df       	rcall	.-222    	; 0x10692 <posix_fopen_modes_to_open>
   10770:	bc 01       	movw	r22, r24
   10772:	ce 01       	movw	r24, r28
   10774:	ef de       	rcall	.-546    	; 0x10554 <open>
   10776:	0e 94 42 7b 	call	0xf684	; 0xf684 <fileno_to_stream>
   1077a:	df 91       	pop	r29
   1077c:	cf 91       	pop	r28
   1077e:	08 95       	ret

00010780 <fprintf>:
   10780:	a8 e0       	ldi	r26, 0x08	; 8
   10782:	b0 e0       	ldi	r27, 0x00	; 0
   10784:	e6 ec       	ldi	r30, 0xC6	; 198
   10786:	f3 e8       	ldi	r31, 0x83	; 131
   10788:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   1078c:	8a ea       	ldi	r24, 0xAA	; 170
   1078e:	9a e7       	ldi	r25, 0x7A	; 122
   10790:	9a 83       	std	Y+2, r25	; 0x02
   10792:	89 83       	std	Y+1, r24	; 0x01
   10794:	18 86       	std	Y+8, r1	; 0x08
   10796:	1f 82       	std	Y+7, r1	; 0x07
   10798:	8d 85       	ldd	r24, Y+13	; 0x0d
   1079a:	9e 85       	ldd	r25, Y+14	; 0x0e
   1079c:	9c 83       	std	Y+4, r25	; 0x04
   1079e:	8b 83       	std	Y+3, r24	; 0x03
   107a0:	4f 85       	ldd	r20, Y+15	; 0x0f
   107a2:	58 89       	ldd	r21, Y+16	; 0x10
   107a4:	60 e8       	ldi	r22, 0x80	; 128
   107a6:	9e 01       	movw	r18, r28
   107a8:	2f 5e       	subi	r18, 0xEF	; 239
   107aa:	3f 4f       	sbci	r19, 0xFF	; 255
   107ac:	ce 01       	movw	r24, r28
   107ae:	01 96       	adiw	r24, 0x01	; 1
   107b0:	0e 94 3b 42 	call	0x8476	; 0x8476 <_printf_fn>
   107b4:	8f 81       	ldd	r24, Y+7	; 0x07
   107b6:	98 85       	ldd	r25, Y+8	; 0x08
   107b8:	28 96       	adiw	r28, 0x08	; 8
   107ba:	e2 e0       	ldi	r30, 0x02	; 2
   107bc:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

000107c0 <posix_help>:
   107c0:	cf 93       	push	r28
   107c2:	df 93       	push	r29
   107c4:	ec 01       	movw	r28, r24
   107c6:	8f e8       	ldi	r24, 0x8F	; 143
   107c8:	9f e0       	ldi	r25, 0x0F	; 15
   107ca:	1f 92       	push	r1
   107cc:	9f 93       	push	r25
   107ce:	8f 93       	push	r24
   107d0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   107d4:	0f 90       	pop	r0
   107d6:	0f 90       	pop	r0
   107d8:	0f 90       	pop	r0
   107da:	cd 2b       	or	r28, r29
   107dc:	51 f0       	breq	.+20     	; 0x107f2 <posix_help+0x32>
   107de:	88 e5       	ldi	r24, 0x58	; 88
   107e0:	9e e0       	ldi	r25, 0x0E	; 14
   107e2:	1f 92       	push	r1
   107e4:	9f 93       	push	r25
   107e6:	8f 93       	push	r24
   107e8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   107ec:	0f 90       	pop	r0
   107ee:	0f 90       	pop	r0
   107f0:	0f 90       	pop	r0
   107f2:	df 91       	pop	r29
   107f4:	cf 91       	pop	r28
   107f6:	08 95       	ret

000107f8 <copy>:
   107f8:	4f 92       	push	r4
   107fa:	5f 92       	push	r5
   107fc:	6f 92       	push	r6
   107fe:	8f 92       	push	r8
   10800:	9f 92       	push	r9
   10802:	af 92       	push	r10
   10804:	bf 92       	push	r11
   10806:	cf 92       	push	r12
   10808:	df 92       	push	r13
   1080a:	ef 92       	push	r14
   1080c:	ff 92       	push	r15
   1080e:	0f 93       	push	r16
   10810:	1f 93       	push	r17
   10812:	cf 93       	push	r28
   10814:	df 93       	push	r29
   10816:	18 2f       	mov	r17, r24
   10818:	09 2f       	mov	r16, r25
   1081a:	eb 01       	movw	r28, r22
   1081c:	9f 93       	push	r25
   1081e:	8f 93       	push	r24
   10820:	8b e2       	ldi	r24, 0x2B	; 43
   10822:	9e e0       	ldi	r25, 0x0E	; 14
   10824:	1f 92       	push	r1
   10826:	9f 93       	push	r25
   10828:	8f 93       	push	r24
   1082a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1082e:	60 e7       	ldi	r22, 0x70	; 112
   10830:	78 e0       	ldi	r23, 0x08	; 8
   10832:	81 2f       	mov	r24, r17
   10834:	90 2f       	mov	r25, r16
   10836:	97 df       	rcall	.-210    	; 0x10766 <fopen>
   10838:	7c 01       	movw	r14, r24
   1083a:	0f 90       	pop	r0
   1083c:	0f 90       	pop	r0
   1083e:	0f 90       	pop	r0
   10840:	0f 90       	pop	r0
   10842:	0f 90       	pop	r0
   10844:	89 2b       	or	r24, r25
   10846:	51 f4       	brne	.+20     	; 0x1085c <copy+0x64>
   10848:	0f 93       	push	r16
   1084a:	1f 93       	push	r17
   1084c:	8b e1       	ldi	r24, 0x1B	; 27
   1084e:	9e e0       	ldi	r25, 0x0E	; 14
   10850:	1f 92       	push	r1
   10852:	9f 93       	push	r25
   10854:	8f 93       	push	r24
   10856:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1085a:	21 c0       	rjmp	.+66     	; 0x1089e <copy+0xa6>
   1085c:	df 93       	push	r29
   1085e:	cf 93       	push	r28
   10860:	8e e0       	ldi	r24, 0x0E	; 14
   10862:	9e e0       	ldi	r25, 0x0E	; 14
   10864:	1f 92       	push	r1
   10866:	9f 93       	push	r25
   10868:	8f 93       	push	r24
   1086a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1086e:	6e e7       	ldi	r22, 0x7E	; 126
   10870:	78 e0       	ldi	r23, 0x08	; 8
   10872:	ce 01       	movw	r24, r28
   10874:	78 df       	rcall	.-272    	; 0x10766 <fopen>
   10876:	8c 01       	movw	r16, r24
   10878:	0f 90       	pop	r0
   1087a:	0f 90       	pop	r0
   1087c:	0f 90       	pop	r0
   1087e:	0f 90       	pop	r0
   10880:	0f 90       	pop	r0
   10882:	89 2b       	or	r24, r25
   10884:	b1 f4       	brne	.+44     	; 0x108b2 <copy+0xba>
   10886:	df 93       	push	r29
   10888:	cf 93       	push	r28
   1088a:	8e ef       	ldi	r24, 0xFE	; 254
   1088c:	9d e0       	ldi	r25, 0x0D	; 13
   1088e:	1f 92       	push	r1
   10890:	9f 93       	push	r25
   10892:	8f 93       	push	r24
   10894:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10898:	80 e0       	ldi	r24, 0x00	; 0
   1089a:	90 e0       	ldi	r25, 0x00	; 0
   1089c:	0e de       	rcall	.-996    	; 0x104ba <fclose>
   1089e:	0f 90       	pop	r0
   108a0:	0f 90       	pop	r0
   108a2:	0f 90       	pop	r0
   108a4:	0f 90       	pop	r0
   108a6:	0f 90       	pop	r0
   108a8:	60 e0       	ldi	r22, 0x00	; 0
   108aa:	70 e0       	ldi	r23, 0x00	; 0
   108ac:	80 e0       	ldi	r24, 0x00	; 0
   108ae:	90 e0       	ldi	r25, 0x00	; 0
   108b0:	73 c0       	rjmp	.+230    	; 0x10998 <copy+0x1a0>
   108b2:	61 e0       	ldi	r22, 0x01	; 1
   108b4:	70 e0       	ldi	r23, 0x00	; 0
   108b6:	80 e0       	ldi	r24, 0x00	; 0
   108b8:	92 e0       	ldi	r25, 0x02	; 2
   108ba:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   108be:	6c 01       	movw	r12, r24
   108c0:	89 2b       	or	r24, r25
   108c2:	29 f4       	brne	.+10     	; 0x108ce <copy+0xd6>
   108c4:	c7 01       	movw	r24, r14
   108c6:	f9 dd       	rcall	.-1038   	; 0x104ba <fclose>
   108c8:	c8 01       	movw	r24, r16
   108ca:	f7 dd       	rcall	.-1042   	; 0x104ba <fclose>
   108cc:	ed cf       	rjmp	.-38     	; 0x108a8 <copy+0xb0>
   108ce:	81 ef       	ldi	r24, 0xF1	; 241
   108d0:	9d e0       	ldi	r25, 0x0D	; 13
   108d2:	1f 92       	push	r1
   108d4:	9f 93       	push	r25
   108d6:	8f 93       	push	r24
   108d8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   108dc:	0f 90       	pop	r0
   108de:	0f 90       	pop	r0
   108e0:	0f 90       	pop	r0
   108e2:	81 2c       	mov	r8, r1
   108e4:	91 2c       	mov	r9, r1
   108e6:	54 01       	movw	r10, r8
   108e8:	85 ed       	ldi	r24, 0xD5	; 213
   108ea:	9d e0       	ldi	r25, 0x0D	; 13
   108ec:	2c 01       	movw	r4, r24
   108ee:	97 01       	movw	r18, r14
   108f0:	40 e0       	ldi	r20, 0x00	; 0
   108f2:	52 e0       	ldi	r21, 0x02	; 2
   108f4:	61 e0       	ldi	r22, 0x01	; 1
   108f6:	70 e0       	ldi	r23, 0x00	; 0
   108f8:	c6 01       	movw	r24, r12
   108fa:	8b dc       	rcall	.-1770   	; 0x10212 <fread>
   108fc:	ec 01       	movw	r28, r24
   108fe:	18 16       	cp	r1, r24
   10900:	19 06       	cpc	r1, r25
   10902:	74 f5       	brge	.+92     	; 0x10960 <copy+0x168>
   10904:	98 01       	movw	r18, r16
   10906:	ae 01       	movw	r20, r28
   10908:	61 e0       	ldi	r22, 0x01	; 1
   1090a:	70 e0       	ldi	r23, 0x00	; 0
   1090c:	c6 01       	movw	r24, r12
   1090e:	53 dd       	rcall	.-1370   	; 0x103b6 <fwrite>
   10910:	8c 17       	cp	r24, r28
   10912:	9d 07       	cpc	r25, r29
   10914:	5c f4       	brge	.+22     	; 0x1092c <copy+0x134>
   10916:	84 ee       	ldi	r24, 0xE4	; 228
   10918:	9d e0       	ldi	r25, 0x0D	; 13
   1091a:	1f 92       	push	r1
   1091c:	9f 93       	push	r25
   1091e:	8f 93       	push	r24
   10920:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10924:	0f 90       	pop	r0
   10926:	0f 90       	pop	r0
   10928:	0f 90       	pop	r0
   1092a:	1a c0       	rjmp	.+52     	; 0x10960 <copy+0x168>
   1092c:	ce 01       	movw	r24, r28
   1092e:	dd 0f       	add	r29, r29
   10930:	aa 0b       	sbc	r26, r26
   10932:	bb 0b       	sbc	r27, r27
   10934:	88 0e       	add	r8, r24
   10936:	99 1e       	adc	r9, r25
   10938:	aa 1e       	adc	r10, r26
   1093a:	bb 1e       	adc	r11, r27
   1093c:	bf 92       	push	r11
   1093e:	af 92       	push	r10
   10940:	9f 92       	push	r9
   10942:	8f 92       	push	r8
   10944:	1f 92       	push	r1
   10946:	5f 92       	push	r5
   10948:	4f 92       	push	r4
   1094a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1094e:	8d b7       	in	r24, 0x3d	; 61
   10950:	9e b7       	in	r25, 0x3e	; 62
   10952:	07 96       	adiw	r24, 0x07	; 7
   10954:	0f b6       	in	r0, 0x3f	; 63
   10956:	f8 94       	cli
   10958:	9e bf       	out	0x3e, r25	; 62
   1095a:	0f be       	out	0x3f, r0	; 63
   1095c:	8d bf       	out	0x3d, r24	; 61
   1095e:	c7 cf       	rjmp	.-114    	; 0x108ee <copy+0xf6>
   10960:	bf 92       	push	r11
   10962:	af 92       	push	r10
   10964:	9f 92       	push	r9
   10966:	8f 92       	push	r8
   10968:	82 ec       	ldi	r24, 0xC2	; 194
   1096a:	9d e0       	ldi	r25, 0x0D	; 13
   1096c:	1f 92       	push	r1
   1096e:	9f 93       	push	r25
   10970:	8f 93       	push	r24
   10972:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10976:	c6 01       	movw	r24, r12
   10978:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
   1097c:	c7 01       	movw	r24, r14
   1097e:	9d dd       	rcall	.-1222   	; 0x104ba <fclose>
   10980:	c8 01       	movw	r24, r16
   10982:	9b dd       	rcall	.-1226   	; 0x104ba <fclose>
   10984:	8d b7       	in	r24, 0x3d	; 61
   10986:	9e b7       	in	r25, 0x3e	; 62
   10988:	07 96       	adiw	r24, 0x07	; 7
   1098a:	0f b6       	in	r0, 0x3f	; 63
   1098c:	f8 94       	cli
   1098e:	9e bf       	out	0x3e, r25	; 62
   10990:	0f be       	out	0x3f, r0	; 63
   10992:	8d bf       	out	0x3d, r24	; 61
   10994:	b4 01       	movw	r22, r8
   10996:	c5 01       	movw	r24, r10
   10998:	df 91       	pop	r29
   1099a:	cf 91       	pop	r28
   1099c:	1f 91       	pop	r17
   1099e:	0f 91       	pop	r16
   109a0:	ff 90       	pop	r15
   109a2:	ef 90       	pop	r14
   109a4:	df 90       	pop	r13
   109a6:	cf 90       	pop	r12
   109a8:	bf 90       	pop	r11
   109aa:	af 90       	pop	r10
   109ac:	9f 90       	pop	r9
   109ae:	8f 90       	pop	r8
   109b0:	6f 90       	pop	r6
   109b2:	5f 90       	pop	r5
   109b4:	4f 90       	pop	r4
   109b6:	08 95       	ret

000109b8 <testpage>:
   109b8:	cf 93       	push	r28
   109ba:	df 93       	push	r29
   109bc:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   109c0:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   109c4:	82 17       	cp	r24, r18
   109c6:	93 07       	cpc	r25, r19
   109c8:	3c f1       	brlt	.+78     	; 0x10a18 <testpage+0x60>
   109ca:	81 e9       	ldi	r24, 0x91	; 145
   109cc:	9d e0       	ldi	r25, 0x0D	; 13
   109ce:	1f 92       	push	r1
   109d0:	9f 93       	push	r25
   109d2:	8f 93       	push	r24
   109d4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   109d8:	0e 94 b7 7a 	call	0xf56e	; 0xf56e <getchar>
   109dc:	ec 01       	movw	r28, r24
   109de:	8f e8       	ldi	r24, 0x8F	; 143
   109e0:	9d e0       	ldi	r25, 0x0D	; 13
   109e2:	1f 92       	push	r1
   109e4:	9f 93       	push	r25
   109e6:	8f 93       	push	r24
   109e8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   109ec:	0f 90       	pop	r0
   109ee:	0f 90       	pop	r0
   109f0:	0f 90       	pop	r0
   109f2:	0f 90       	pop	r0
   109f4:	0f 90       	pop	r0
   109f6:	0f 90       	pop	r0
   109f8:	c1 37       	cpi	r28, 0x71	; 113
   109fa:	d1 05       	cpc	r29, r1
   109fc:	41 f0       	breq	.+16     	; 0x10a0e <testpage+0x56>
   109fe:	2a 97       	sbiw	r28, 0x0a	; 10
   10a00:	49 f4       	brne	.+18     	; 0x10a14 <testpage+0x5c>
   10a02:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   10a06:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   10a0a:	01 97       	sbiw	r24, 0x01	; 1
   10a0c:	05 c0       	rjmp	.+10     	; 0x10a18 <testpage+0x60>
   10a0e:	8f ef       	ldi	r24, 0xFF	; 255
   10a10:	9f ef       	ldi	r25, 0xFF	; 255
   10a12:	02 c0       	rjmp	.+4      	; 0x10a18 <testpage+0x60>
   10a14:	80 e0       	ldi	r24, 0x00	; 0
   10a16:	90 e0       	ldi	r25, 0x00	; 0
   10a18:	df 91       	pop	r29
   10a1a:	cf 91       	pop	r28
   10a1c:	08 95       	ret

00010a1e <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10a1e:	a0 e0       	ldi	r26, 0x00	; 0
   10a20:	b1 e0       	ldi	r27, 0x01	; 1
   10a22:	e5 e1       	ldi	r30, 0x15	; 21
   10a24:	f5 e8       	ldi	r31, 0x85	; 133
   10a26:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   10a2a:	18 2f       	mov	r17, r24
   10a2c:	09 2f       	mov	r16, r25
   10a2e:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10a30:	60 e7       	ldi	r22, 0x70	; 112
   10a32:	78 e0       	ldi	r23, 0x08	; 8
   10a34:	98 de       	rcall	.-720    	; 0x10766 <fopen>
   10a36:	7c 01       	movw	r14, r24
    if (!fp)
   10a38:	89 2b       	or	r24, r25
   10a3a:	41 f0       	breq	.+16     	; 0x10a4c <cat+0x2e>
   10a3c:	c1 2c       	mov	r12, r1
   10a3e:	d1 2c       	mov	r13, r1
   10a40:	a1 2c       	mov	r10, r1
   10a42:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10a44:	8e 01       	movw	r16, r28
   10a46:	0f 5f       	subi	r16, 0xFF	; 255
   10a48:	1f 4f       	sbci	r17, 0xFF	; 255
   10a4a:	24 c0       	rjmp	.+72     	; 0x10a94 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10a4c:	0f 93       	push	r16
   10a4e:	1f 93       	push	r17
   10a50:	84 e4       	ldi	r24, 0x44	; 68
   10a52:	9e e0       	ldi	r25, 0x0E	; 14
   10a54:	1f 92       	push	r1
   10a56:	9f 93       	push	r25
   10a58:	8f 93       	push	r24
   10a5a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   10a5e:	0f 90       	pop	r0
   10a60:	0f 90       	pop	r0
   10a62:	0f 90       	pop	r0
   10a64:	0f 90       	pop	r0
   10a66:	0f 90       	pop	r0
   10a68:	c1 2c       	mov	r12, r1
   10a6a:	d1 2c       	mov	r13, r1
   10a6c:	76 01       	movw	r14, r12
   10a6e:	3e c0       	rjmp	.+124    	; 0x10aec <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10a70:	c8 01       	movw	r24, r16
   10a72:	0e 94 4a 32 	call	0x6494	; 0x6494 <trim_tail>
        size += strlen(line);
   10a76:	f8 01       	movw	r30, r16
   10a78:	01 90       	ld	r0, Z+
   10a7a:	00 20       	and	r0, r0
   10a7c:	e9 f7       	brne	.-6      	; 0x10a78 <cat+0x5a>
   10a7e:	31 97       	sbiw	r30, 0x01	; 1
   10a80:	e0 1b       	sub	r30, r16
   10a82:	f1 0b       	sbc	r31, r17
   10a84:	ce 0e       	add	r12, r30
   10a86:	df 1e       	adc	r13, r31
        puts(line);
   10a88:	c8 01       	movw	r24, r16
   10a8a:	0e 94 0f 7b 	call	0xf61e	; 0xf61e <puts>
        if(dopage)
   10a8e:	81 14       	cp	r8, r1
   10a90:	91 04       	cpc	r9, r1
   10a92:	49 f4       	brne	.+18     	; 0x10aa6 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10a94:	a7 01       	movw	r20, r14
   10a96:	6e ef       	ldi	r22, 0xFE	; 254
   10a98:	70 e0       	ldi	r23, 0x00	; 0
   10a9a:	c8 01       	movw	r24, r16
   10a9c:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
   10aa0:	89 2b       	or	r24, r25
   10aa2:	31 f7       	brne	.-52     	; 0x10a70 <cat+0x52>
   10aa4:	06 c0       	rjmp	.+12     	; 0x10ab2 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10aa6:	c5 01       	movw	r24, r10
   10aa8:	01 96       	adiw	r24, 0x01	; 1
   10aaa:	86 df       	rcall	.-244    	; 0x109b8 <testpage>
   10aac:	5c 01       	movw	r10, r24
            if(count < 0)
   10aae:	97 ff       	sbrs	r25, 7
   10ab0:	f1 cf       	rjmp	.-30     	; 0x10a94 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10ab2:	82 e4       	ldi	r24, 0x42	; 66
   10ab4:	9e e0       	ldi	r25, 0x0E	; 14
   10ab6:	1f 92       	push	r1
   10ab8:	9f 93       	push	r25
   10aba:	8f 93       	push	r24
   10abc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    fclose(fp);
   10ac0:	c7 01       	movw	r24, r14
   10ac2:	fb dc       	rcall	.-1546   	; 0x104ba <fclose>
    printf("%ld bytes\n", (long)size);
   10ac4:	0d 2c       	mov	r0, r13
   10ac6:	00 0c       	add	r0, r0
   10ac8:	ee 08       	sbc	r14, r14
   10aca:	ff 08       	sbc	r15, r15
   10acc:	ff 92       	push	r15
   10ace:	ef 92       	push	r14
   10ad0:	df 92       	push	r13
   10ad2:	cf 92       	push	r12
   10ad4:	87 e3       	ldi	r24, 0x37	; 55
   10ad6:	9e e0       	ldi	r25, 0x0E	; 14
   10ad8:	1f 92       	push	r1
   10ada:	9f 93       	push	r25
   10adc:	8f 93       	push	r24
   10ade:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(size);
   10ae2:	0f b6       	in	r0, 0x3f	; 63
   10ae4:	f8 94       	cli
   10ae6:	de bf       	out	0x3e, r29	; 62
   10ae8:	0f be       	out	0x3f, r0	; 63
   10aea:	cd bf       	out	0x3d, r28	; 61
}
   10aec:	c7 01       	movw	r24, r14
   10aee:	b6 01       	movw	r22, r12
   10af0:	d3 95       	inc	r29
   10af2:	ec e0       	ldi	r30, 0x0C	; 12
   10af4:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

00010af8 <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   10af8:	2f 92       	push	r2
   10afa:	3f 92       	push	r3
   10afc:	4f 92       	push	r4
   10afe:	5f 92       	push	r5
   10b00:	6f 92       	push	r6
   10b02:	7f 92       	push	r7
   10b04:	8f 92       	push	r8
   10b06:	af 92       	push	r10
   10b08:	bf 92       	push	r11
   10b0a:	cf 92       	push	r12
   10b0c:	df 92       	push	r13
   10b0e:	ef 92       	push	r14
   10b10:	ff 92       	push	r15
   10b12:	0f 93       	push	r16
   10b14:	1f 93       	push	r17
   10b16:	cf 93       	push	r28
   10b18:	df 93       	push	r29
   10b1a:	cd b7       	in	r28, 0x3d	; 61
   10b1c:	de b7       	in	r29, 0x3e	; 62
   10b1e:	e0 97       	sbiw	r28, 0x30	; 48
   10b20:	0f b6       	in	r0, 0x3f	; 63
   10b22:	f8 94       	cli
   10b24:	de bf       	out	0x3e, r29	; 62
   10b26:	0f be       	out	0x3f, r0	; 63
   10b28:	cd bf       	out	0x3d, r28	; 61
   10b2a:	18 2f       	mov	r17, r24
   10b2c:	09 2f       	mov	r16, r25
   10b2e:	78 ab       	std	Y+48, r23	; 0x30
   10b30:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   10b32:	60 e7       	ldi	r22, 0x70	; 112
   10b34:	78 e0       	ldi	r23, 0x08	; 8
   10b36:	17 de       	rcall	.-978    	; 0x10766 <fopen>
   10b38:	9a a3       	std	Y+34, r25	; 0x22
   10b3a:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   10b3c:	89 2b       	or	r24, r25
   10b3e:	49 f1       	breq	.+82     	; 0x10b92 <hexdump+0x9a>
   10b40:	21 2c       	mov	r2, r1
   10b42:	31 2c       	mov	r3, r1
   10b44:	c1 2c       	mov	r12, r1
   10b46:	d1 2c       	mov	r13, r1
   10b48:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10b4a:	9e 01       	movw	r18, r28
   10b4c:	2f 5f       	subi	r18, 0xFF	; 255
   10b4e:	3f 4f       	sbci	r19, 0xFF	; 255
   10b50:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   10b52:	8a ea       	ldi	r24, 0xAA	; 170
   10b54:	9d e0       	ldi	r25, 0x0D	; 13
   10b56:	9c 01       	movw	r18, r24
   10b58:	40 e0       	ldi	r20, 0x00	; 0
   10b5a:	2b a3       	std	Y+35, r18	; 0x23
   10b5c:	3c a3       	std	Y+36, r19	; 0x24
   10b5e:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10b60:	84 ea       	ldi	r24, 0xA4	; 164
   10b62:	9d e0       	ldi	r25, 0x0D	; 13
   10b64:	9c 01       	movw	r18, r24
   10b66:	40 e0       	ldi	r20, 0x00	; 0
   10b68:	2e a3       	std	Y+38, r18	; 0x26
   10b6a:	3f a3       	std	Y+39, r19	; 0x27
   10b6c:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   10b6e:	80 ea       	ldi	r24, 0xA0	; 160
   10b70:	9d e0       	ldi	r25, 0x0D	; 13
   10b72:	9c 01       	movw	r18, r24
   10b74:	40 e0       	ldi	r20, 0x00	; 0
   10b76:	29 a7       	std	Y+41, r18	; 0x29
   10b78:	3a a7       	std	Y+42, r19	; 0x2a
   10b7a:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   10b7c:	8c e9       	ldi	r24, 0x9C	; 156
   10b7e:	9d e0       	ldi	r25, 0x0D	; 13
   10b80:	9c 01       	movw	r18, r24
   10b82:	40 e0       	ldi	r20, 0x00	; 0
   10b84:	2c a7       	std	Y+44, r18	; 0x2c
   10b86:	3d a7       	std	Y+45, r19	; 0x2d
   10b88:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10b8a:	8a e9       	ldi	r24, 0x9A	; 154
   10b8c:	9d e0       	ldi	r25, 0x0D	; 13
   10b8e:	3c 01       	movw	r6, r24
   10b90:	26 c0       	rjmp	.+76     	; 0x10bde <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   10b92:	0f 93       	push	r16
   10b94:	1f 93       	push	r17
   10b96:	83 eb       	ldi	r24, 0xB3	; 179
   10b98:	9d e0       	ldi	r25, 0x0D	; 13
   10b9a:	1f 92       	push	r1
   10b9c:	9f 93       	push	r25
   10b9e:	8f 93       	push	r24
   10ba0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   10ba4:	0f 90       	pop	r0
   10ba6:	0f 90       	pop	r0
   10ba8:	0f 90       	pop	r0
   10baa:	0f 90       	pop	r0
   10bac:	0f 90       	pop	r0
   10bae:	80 e0       	ldi	r24, 0x00	; 0
   10bb0:	90 e0       	ldi	r25, 0x00	; 0
   10bb2:	9e c0       	rjmp	.+316    	; 0x10cf0 <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10bb4:	1f 92       	push	r1
   10bb6:	7f 92       	push	r7
   10bb8:	6f 92       	push	r6
   10bba:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        addr += len;
   10bbe:	01 2e       	mov	r0, r17
   10bc0:	00 0c       	add	r0, r0
   10bc2:	22 0b       	sbc	r18, r18
   10bc4:	33 0b       	sbc	r19, r19
   10bc6:	c0 0e       	add	r12, r16
   10bc8:	d1 1e       	adc	r13, r17
   10bca:	e2 1e       	adc	r14, r18
   10bcc:	f3 1e       	adc	r15, r19
        if(dopage)
   10bce:	0f 90       	pop	r0
   10bd0:	0f 90       	pop	r0
   10bd2:	0f 90       	pop	r0
   10bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
   10bd6:	98 a9       	ldd	r25, Y+48	; 0x30
   10bd8:	89 2b       	or	r24, r25
   10bda:	09 f0       	breq	.+2      	; 0x10bde <hexdump+0xe6>
   10bdc:	74 c0       	rjmp	.+232    	; 0x10cc6 <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10bde:	29 a1       	ldd	r18, Y+33	; 0x21
   10be0:	3a a1       	ldd	r19, Y+34	; 0x22
   10be2:	40 e1       	ldi	r20, 0x10	; 16
   10be4:	50 e0       	ldi	r21, 0x00	; 0
   10be6:	61 e0       	ldi	r22, 0x01	; 1
   10be8:	70 e0       	ldi	r23, 0x00	; 0
   10bea:	c2 01       	movw	r24, r4
   10bec:	12 db       	rcall	.-2524   	; 0x10212 <fread>
   10bee:	8c 01       	movw	r16, r24
   10bf0:	18 16       	cp	r1, r24
   10bf2:	19 06       	cpc	r1, r25
   10bf4:	0c f0       	brlt	.+2      	; 0x10bf8 <hexdump+0x100>
   10bf6:	6d c0       	rjmp	.+218    	; 0x10cd2 <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   10bf8:	ff 92       	push	r15
   10bfa:	ef 92       	push	r14
   10bfc:	df 92       	push	r13
   10bfe:	cf 92       	push	r12
   10c00:	1f 92       	push	r1
   10c02:	3c a1       	ldd	r19, Y+36	; 0x24
   10c04:	3f 93       	push	r19
   10c06:	4b a1       	ldd	r20, Y+35	; 0x23
   10c08:	4f 93       	push	r20
   10c0a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10c0e:	0f b6       	in	r0, 0x3f	; 63
   10c10:	f8 94       	cli
   10c12:	de bf       	out	0x3e, r29	; 62
   10c14:	0f be       	out	0x3f, r0	; 63
   10c16:	cd bf       	out	0x3d, r28	; 61
   10c18:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10c1a:	f5 01       	movw	r30, r10
   10c1c:	81 91       	ld	r24, Z+
   10c1e:	5f 01       	movw	r10, r30
   10c20:	1f 92       	push	r1
   10c22:	8f 93       	push	r24
   10c24:	1f 92       	push	r1
   10c26:	ff a1       	ldd	r31, Y+39	; 0x27
   10c28:	ff 93       	push	r31
   10c2a:	2e a1       	ldd	r18, Y+38	; 0x26
   10c2c:	2f 93       	push	r18
   10c2e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   10c32:	c5 01       	movw	r24, r10
   10c34:	84 19       	sub	r24, r4
   10c36:	95 09       	sbc	r25, r5
   10c38:	0f 90       	pop	r0
   10c3a:	0f 90       	pop	r0
   10c3c:	0f 90       	pop	r0
   10c3e:	0f 90       	pop	r0
   10c40:	0f 90       	pop	r0
   10c42:	80 17       	cp	r24, r16
   10c44:	91 07       	cpc	r25, r17
   10c46:	4c f3       	brlt	.-46     	; 0x10c1a <hexdump+0x122>
   10c48:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10c4a:	90 e1       	ldi	r25, 0x10	; 16
   10c4c:	a9 16       	cp	r10, r25
   10c4e:	b1 04       	cpc	r11, r1
   10c50:	74 f4       	brge	.+28     	; 0x10c6e <hexdump+0x176>
            printf("   ");
   10c52:	1f 92       	push	r1
   10c54:	3a a5       	ldd	r19, Y+42	; 0x2a
   10c56:	3f 93       	push	r19
   10c58:	49 a5       	ldd	r20, Y+41	; 0x29
   10c5a:	4f 93       	push	r20
   10c5c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10c60:	8f ef       	ldi	r24, 0xFF	; 255
   10c62:	a8 1a       	sub	r10, r24
   10c64:	b8 0a       	sbc	r11, r24
   10c66:	0f 90       	pop	r0
   10c68:	0f 90       	pop	r0
   10c6a:	0f 90       	pop	r0
   10c6c:	ee cf       	rjmp	.-36     	; 0x10c4a <hexdump+0x152>
            printf("   ");

        printf(" : ");
   10c6e:	1f 92       	push	r1
   10c70:	ed a5       	ldd	r30, Y+45	; 0x2d
   10c72:	ef 93       	push	r30
   10c74:	fc a5       	ldd	r31, Y+44	; 0x2c
   10c76:	ff 93       	push	r31
   10c78:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10c7c:	0f 90       	pop	r0
   10c7e:	0f 90       	pop	r0
   10c80:	0f 90       	pop	r0
   10c82:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   10c84:	f5 01       	movw	r30, r10
   10c86:	81 91       	ld	r24, Z+
   10c88:	5f 01       	movw	r10, r30
   10c8a:	90 ee       	ldi	r25, 0xE0	; 224
   10c8c:	98 0f       	add	r25, r24
   10c8e:	9f 35       	cpi	r25, 0x5F	; 95
   10c90:	10 f4       	brcc	.+4      	; 0x10c96 <hexdump+0x19e>
                putchar(buf[i]);
   10c92:	90 e0       	ldi	r25, 0x00	; 0
   10c94:	02 c0       	rjmp	.+4      	; 0x10c9a <hexdump+0x1a2>
            else
                putchar('.');
   10c96:	8e e2       	ldi	r24, 0x2E	; 46
   10c98:	90 e0       	ldi	r25, 0x00	; 0
   10c9a:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   10c9e:	c5 01       	movw	r24, r10
   10ca0:	84 19       	sub	r24, r4
   10ca2:	95 09       	sbc	r25, r5
   10ca4:	80 17       	cp	r24, r16
   10ca6:	91 07       	cpc	r25, r17
   10ca8:	6c f3       	brlt	.-38     	; 0x10c84 <hexdump+0x18c>
   10caa:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10cac:	20 e1       	ldi	r18, 0x10	; 16
   10cae:	a2 16       	cp	r10, r18
   10cb0:	b1 04       	cpc	r11, r1
   10cb2:	0c f0       	brlt	.+2      	; 0x10cb6 <hexdump+0x1be>
   10cb4:	7f cf       	rjmp	.-258    	; 0x10bb4 <hexdump+0xbc>
            putchar('.');
   10cb6:	8e e2       	ldi	r24, 0x2E	; 46
   10cb8:	90 e0       	ldi	r25, 0x00	; 0
   10cba:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10cbe:	ff ef       	ldi	r31, 0xFF	; 255
   10cc0:	af 1a       	sub	r10, r31
   10cc2:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   10cc4:	f3 cf       	rjmp	.-26     	; 0x10cac <hexdump+0x1b4>
   10cc6:	c1 01       	movw	r24, r2
   10cc8:	01 96       	adiw	r24, 0x01	; 1
   10cca:	76 de       	rcall	.-788    	; 0x109b8 <testpage>
            if(count < 0)
   10ccc:	1c 01       	movw	r2, r24
   10cce:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10cd0:	86 cf       	rjmp	.-244    	; 0x10bde <hexdump+0xe6>
   10cd2:	88 e9       	ldi	r24, 0x98	; 152
   10cd4:	9d e0       	ldi	r25, 0x0D	; 13
   10cd6:	1f 92       	push	r1
   10cd8:	9f 93       	push	r25
   10cda:	8f 93       	push	r24
    fclose(fi);
   10cdc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   10ce0:	89 a1       	ldd	r24, Y+33	; 0x21
   10ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   10ce4:	ea db       	rcall	.-2092   	; 0x104ba <fclose>
   10ce6:	0f 90       	pop	r0
   10ce8:	0f 90       	pop	r0
   10cea:	0f 90       	pop	r0
   10cec:	81 e0       	ldi	r24, 0x01	; 1
}
   10cee:	90 e0       	ldi	r25, 0x00	; 0
   10cf0:	e0 96       	adiw	r28, 0x30	; 48
   10cf2:	0f b6       	in	r0, 0x3f	; 63
   10cf4:	f8 94       	cli
   10cf6:	de bf       	out	0x3e, r29	; 62
   10cf8:	0f be       	out	0x3f, r0	; 63
   10cfa:	cd bf       	out	0x3d, r28	; 61
   10cfc:	df 91       	pop	r29
   10cfe:	cf 91       	pop	r28
   10d00:	1f 91       	pop	r17
   10d02:	0f 91       	pop	r16
   10d04:	ff 90       	pop	r15
   10d06:	ef 90       	pop	r14
   10d08:	df 90       	pop	r13
   10d0a:	cf 90       	pop	r12
   10d0c:	bf 90       	pop	r11
   10d0e:	af 90       	pop	r10
   10d10:	8f 90       	pop	r8
   10d12:	7f 90       	pop	r7
   10d14:	6f 90       	pop	r6
   10d16:	5f 90       	pop	r5
   10d18:	4f 90       	pop	r4
   10d1a:	3f 90       	pop	r3
   10d1c:	2f 90       	pop	r2
   10d1e:	08 95       	ret

00010d20 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10d20:	4f 92       	push	r4
   10d22:	5f 92       	push	r5
   10d24:	6f 92       	push	r6
   10d26:	7f 92       	push	r7
   10d28:	af 92       	push	r10
   10d2a:	bf 92       	push	r11
   10d2c:	cf 92       	push	r12
   10d2e:	df 92       	push	r13
   10d30:	ef 92       	push	r14
   10d32:	ff 92       	push	r15
   10d34:	0f 93       	push	r16
   10d36:	1f 93       	push	r17
   10d38:	cf 93       	push	r28
   10d3a:	df 93       	push	r29
   10d3c:	cd b7       	in	r28, 0x3d	; 61
   10d3e:	de b7       	in	r29, 0x3e	; 62
   10d40:	ec 97       	sbiw	r28, 0x3c	; 60
   10d42:	0f b6       	in	r0, 0x3f	; 63
   10d44:	f8 94       	cli
   10d46:	de bf       	out	0x3e, r29	; 62
   10d48:	0f be       	out	0x3f, r0	; 63
   10d4a:	cd bf       	out	0x3d, r28	; 61
   10d4c:	8c 01       	movw	r16, r24
   10d4e:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10d50:	be 01       	movw	r22, r28
   10d52:	6f 5f       	subi	r22, 0xFF	; 255
   10d54:	7f 4f       	sbci	r23, 0xFF	; 255
   10d56:	1b d8       	rcall	.-4042   	; 0xfd8e <stat>
   10d58:	01 96       	adiw	r24, 0x01	; 1
   10d5a:	89 f4       	brne	.+34     	; 0x10d7e <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10d5c:	1f 93       	push	r17
   10d5e:	0f 93       	push	r16
   10d60:	8d e7       	ldi	r24, 0x7D	; 125
   10d62:	9d e0       	ldi	r25, 0x0D	; 13
   10d64:	1f 92       	push	r1
   10d66:	9f 93       	push	r25
   10d68:	8f 93       	push	r24
   10d6a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   10d6e:	0f 90       	pop	r0
   10d70:	0f 90       	pop	r0
   10d72:	0f 90       	pop	r0
   10d74:	0f 90       	pop	r0
   10d76:	0f 90       	pop	r0
   10d78:	80 e0       	ldi	r24, 0x00	; 0
   10d7a:	90 e0       	ldi	r25, 0x00	; 0
   10d7c:	79 c0       	rjmp	.+242    	; 0x10e70 <ls_info+0x150>
    }

    if(!verbose)
   10d7e:	ef 28       	or	r14, r15
   10d80:	91 f4       	brne	.+36     	; 0x10da6 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10d82:	c8 01       	movw	r24, r16
   10d84:	0e 94 29 7c 	call	0xf852	; 0xf852 <basename>
   10d88:	9f 93       	push	r25
   10d8a:	8f 93       	push	r24
   10d8c:	89 e7       	ldi	r24, 0x79	; 121
   10d8e:	9d e0       	ldi	r25, 0x0D	; 13
   10d90:	1f 92       	push	r1
   10d92:	9f 93       	push	r25
   10d94:	8f 93       	push	r24
   10d96:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(1);
   10d9a:	0f 90       	pop	r0
   10d9c:	0f 90       	pop	r0
   10d9e:	0f 90       	pop	r0
   10da0:	0f 90       	pop	r0
   10da2:	0f 90       	pop	r0
   10da4:	63 c0       	rjmp	.+198    	; 0x10e6c <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10da6:	49 84       	ldd	r4, Y+9	; 0x09
   10da8:	5a 84       	ldd	r5, Y+10	; 0x0a
   10daa:	6b 84       	ldd	r6, Y+11	; 0x0b
   10dac:	7c 84       	ldd	r7, Y+12	; 0x0c
   10dae:	d3 01       	movw	r26, r6
   10db0:	c2 01       	movw	r24, r4
   10db2:	88 27       	eor	r24, r24
   10db4:	90 7f       	andi	r25, 0xF0	; 240
   10db6:	aa 27       	eor	r26, r26
   10db8:	bb 27       	eor	r27, r27
   10dba:	81 15       	cp	r24, r1
   10dbc:	90 44       	sbci	r25, 0x40	; 64
   10dbe:	a1 05       	cpc	r26, r1
   10dc0:	b1 05       	cpc	r27, r1
   10dc2:	11 f4       	brne	.+4      	; 0x10dc8 <ls_info+0xa8>
        *p++ = 'd';
   10dc4:	84 e6       	ldi	r24, 0x64	; 100
   10dc6:	01 c0       	rjmp	.+2      	; 0x10dca <ls_info+0xaa>
    else
        *p++ = '-';
   10dc8:	8d e2       	ldi	r24, 0x2D	; 45
   10dca:	89 ab       	std	Y+49, r24	; 0x31
   10dcc:	fe 01       	movw	r30, r28
   10dce:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10dd0:	e1 2c       	mov	r14, r1
   10dd2:	ff 24       	eor	r15, r15
   10dd4:	f3 94       	inc	r15
   10dd6:	20 e0       	ldi	r18, 0x00	; 0
   10dd8:	30 e0       	ldi	r19, 0x00	; 0
   10dda:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10ddc:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10dde:	53 e0       	ldi	r21, 0x03	; 3
   10de0:	c5 2e       	mov	r12, r21
   10de2:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10de4:	c7 01       	movw	r24, r14
   10de6:	a0 e0       	ldi	r26, 0x00	; 0
   10de8:	b0 e0       	ldi	r27, 0x00	; 0
   10dea:	84 21       	and	r24, r4
   10dec:	95 21       	and	r25, r5
   10dee:	a6 21       	and	r26, r6
   10df0:	b7 21       	and	r27, r7
   10df2:	89 2b       	or	r24, r25
   10df4:	8a 2b       	or	r24, r26
   10df6:	8b 2b       	or	r24, r27
   10df8:	51 f0       	breq	.+20     	; 0x10e0e <ls_info+0xee>
            *p++ = cm[ i % 3];
   10dfa:	c9 01       	movw	r24, r18
   10dfc:	b6 01       	movw	r22, r12
   10dfe:	0e 94 9b ea 	call	0x1d536	; 0x1d536 <__divmodhi4>
   10e02:	dc 01       	movw	r26, r24
   10e04:	a8 5e       	subi	r26, 0xE8	; 232
   10e06:	b4 4f       	sbci	r27, 0xF4	; 244
   10e08:	8c 91       	ld	r24, X
   10e0a:	81 83       	std	Z+1, r24	; 0x01
   10e0c:	01 c0       	rjmp	.+2      	; 0x10e10 <ls_info+0xf0>
        else
            *p++ = '-';
   10e0e:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10e10:	f6 94       	lsr	r15
   10e12:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10e14:	2f 5f       	subi	r18, 0xFF	; 255
   10e16:	3f 4f       	sbci	r19, 0xFF	; 255
   10e18:	31 96       	adiw	r30, 0x01	; 1
   10e1a:	29 30       	cpi	r18, 0x09	; 9
   10e1c:	31 05       	cpc	r19, r1
   10e1e:	11 f7       	brne	.-60     	; 0x10de4 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10e20:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10e22:	c8 01       	movw	r24, r16
   10e24:	0e 94 29 7c 	call	0xf852	; 0xf852 <basename>
   10e28:	18 2f       	mov	r17, r24
   10e2a:	09 2f       	mov	r16, r25
   10e2c:	69 a5       	ldd	r22, Y+41	; 0x29
   10e2e:	7a a5       	ldd	r23, Y+42	; 0x2a
   10e30:	8b a5       	ldd	r24, Y+43	; 0x2b
   10e32:	9c a5       	ldd	r25, Y+44	; 0x2c
   10e34:	0e 94 57 7b 	call	0xf6ae	; 0xf6ae <mctime>
   10e38:	0f 93       	push	r16
   10e3a:	1f 93       	push	r17
   10e3c:	9f 93       	push	r25
   10e3e:	8f 93       	push	r24
   10e40:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10e42:	8f 93       	push	r24
   10e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10e46:	8f 93       	push	r24
   10e48:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10e4a:	8f 93       	push	r24
   10e4c:	89 8d       	ldd	r24, Y+25	; 0x19
   10e4e:	8f 93       	push	r24
   10e50:	bf 92       	push	r11
   10e52:	af 92       	push	r10
   10e54:	8f e5       	ldi	r24, 0x5F	; 95
   10e56:	9d e0       	ldi	r25, 0x0D	; 13
   10e58:	1f 92       	push	r1
   10e5a:	9f 93       	push	r25
   10e5c:	8f 93       	push	r24
   10e5e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10e62:	0f b6       	in	r0, 0x3f	; 63
   10e64:	f8 94       	cli
   10e66:	de bf       	out	0x3e, r29	; 62
   10e68:	0f be       	out	0x3f, r0	; 63
   10e6a:	cd bf       	out	0x3d, r28	; 61
   10e6c:	81 e0       	ldi	r24, 0x01	; 1
   10e6e:	90 e0       	ldi	r25, 0x00	; 0
}
   10e70:	ec 96       	adiw	r28, 0x3c	; 60
   10e72:	0f b6       	in	r0, 0x3f	; 63
   10e74:	f8 94       	cli
   10e76:	de bf       	out	0x3e, r29	; 62
   10e78:	0f be       	out	0x3f, r0	; 63
   10e7a:	cd bf       	out	0x3d, r28	; 61
   10e7c:	df 91       	pop	r29
   10e7e:	cf 91       	pop	r28
   10e80:	1f 91       	pop	r17
   10e82:	0f 91       	pop	r16
   10e84:	ff 90       	pop	r15
   10e86:	ef 90       	pop	r14
   10e88:	df 90       	pop	r13
   10e8a:	cf 90       	pop	r12
   10e8c:	bf 90       	pop	r11
   10e8e:	af 90       	pop	r10
   10e90:	7f 90       	pop	r7
   10e92:	6f 90       	pop	r6
   10e94:	5f 90       	pop	r5
   10e96:	4f 90       	pop	r4
   10e98:	08 95       	ret

00010e9a <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10e9a:	2f 92       	push	r2
   10e9c:	3f 92       	push	r3
   10e9e:	4f 92       	push	r4
   10ea0:	5f 92       	push	r5
   10ea2:	6f 92       	push	r6
   10ea4:	8f 92       	push	r8
   10ea6:	9f 92       	push	r9
   10ea8:	af 92       	push	r10
   10eaa:	bf 92       	push	r11
   10eac:	cf 92       	push	r12
   10eae:	df 92       	push	r13
   10eb0:	ef 92       	push	r14
   10eb2:	ff 92       	push	r15
   10eb4:	0f 93       	push	r16
   10eb6:	1f 93       	push	r17
   10eb8:	cf 93       	push	r28
   10eba:	df 93       	push	r29
   10ebc:	cd b7       	in	r28, 0x3d	; 61
   10ebe:	de b7       	in	r29, 0x3e	; 62
   10ec0:	c2 53       	subi	r28, 0x32	; 50
   10ec2:	d1 40       	sbci	r29, 0x01	; 1
   10ec4:	0f b6       	in	r0, 0x3f	; 63
   10ec6:	f8 94       	cli
   10ec8:	de bf       	out	0x3e, r29	; 62
   10eca:	0f be       	out	0x3f, r0	; 63
   10ecc:	cd bf       	out	0x3d, r28	; 61
   10ece:	7c 01       	movw	r14, r24
   10ed0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10ed2:	19 82       	std	Y+1, r1	; 0x01
   10ed4:	8e 01       	movw	r16, r28
   10ed6:	0f 5f       	subi	r16, 0xFF	; 255
   10ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10eda:	00 97       	sbiw	r24, 0x00	; 0
   10edc:	91 f4       	brne	.+36     	; 0x10f02 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10ede:	6e ef       	ldi	r22, 0xFE	; 254
   10ee0:	70 e0       	ldi	r23, 0x00	; 0
   10ee2:	c8 01       	movw	r24, r16
   10ee4:	0e 94 7f 7c 	call	0xf8fe	; 0xf8fe <getcwd>
   10ee8:	89 2b       	or	r24, r25
   10eea:	d1 f4       	brne	.+52     	; 0x10f20 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10eec:	8e e3       	ldi	r24, 0x3E	; 62
   10eee:	9d e0       	ldi	r25, 0x0D	; 13
   10ef0:	1f 92       	push	r1
   10ef2:	9f 93       	push	r25
   10ef4:	8f 93       	push	r24
   10ef6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            return(0); 
   10efa:	0f 90       	pop	r0
   10efc:	0f 90       	pop	r0
   10efe:	0f 90       	pop	r0
   10f00:	3c c0       	rjmp	.+120    	; 0x10f7a <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10f02:	fc 01       	movw	r30, r24
   10f04:	80 81       	ld	r24, Z
   10f06:	88 23       	and	r24, r24
   10f08:	51 f3       	breq	.-44     	; 0x10ede <ls+0x44>
   10f0a:	6b e5       	ldi	r22, 0x5B	; 91
   10f0c:	70 e1       	ldi	r23, 0x10	; 16
   10f0e:	c7 01       	movw	r24, r14
   10f10:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   10f14:	89 2b       	or	r24, r25
   10f16:	19 f7       	brne	.-58     	; 0x10ede <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10f18:	b7 01       	movw	r22, r14
   10f1a:	c8 01       	movw	r24, r16
   10f1c:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcpy>
    }
    len = strlen(fullpath);
   10f20:	f8 01       	movw	r30, r16
   10f22:	01 90       	ld	r0, Z+
   10f24:	00 20       	and	r0, r0
   10f26:	e9 f7       	brne	.-6      	; 0x10f22 <ls+0x88>
   10f28:	31 97       	sbiw	r30, 0x01	; 1
   10f2a:	1f 01       	movw	r2, r30
   10f2c:	20 1a       	sub	r2, r16
   10f2e:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10f30:	1f 93       	push	r17
   10f32:	0f 93       	push	r16
   10f34:	80 e3       	ldi	r24, 0x30	; 48
   10f36:	9d e0       	ldi	r25, 0x0D	; 13
   10f38:	1f 92       	push	r1
   10f3a:	9f 93       	push	r25
   10f3c:	8f 93       	push	r24
   10f3e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    if (stat(fullpath, &st)) 
   10f42:	be 01       	movw	r22, r28
   10f44:	6f 5f       	subi	r22, 0xFF	; 255
   10f46:	7e 4f       	sbci	r23, 0xFE	; 254
   10f48:	c8 01       	movw	r24, r16
   10f4a:	0e 94 c7 7e 	call	0xfd8e	; 0xfd8e <stat>
   10f4e:	7c 01       	movw	r14, r24
   10f50:	0f 90       	pop	r0
   10f52:	0f 90       	pop	r0
   10f54:	0f 90       	pop	r0
   10f56:	0f 90       	pop	r0
   10f58:	0f 90       	pop	r0
   10f5a:	89 2b       	or	r24, r25
   10f5c:	89 f0       	breq	.+34     	; 0x10f80 <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10f5e:	1f 93       	push	r17
   10f60:	0f 93       	push	r16
   10f62:	8a e1       	ldi	r24, 0x1A	; 26
   10f64:	9d e0       	ldi	r25, 0x0D	; 13
   10f66:	1f 92       	push	r1
   10f68:	9f 93       	push	r25
   10f6a:	8f 93       	push	r24
   10f6c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0); 
   10f70:	0f 90       	pop	r0
   10f72:	0f 90       	pop	r0
   10f74:	0f 90       	pop	r0
   10f76:	0f 90       	pop	r0
   10f78:	0f 90       	pop	r0
   10f7a:	e1 2c       	mov	r14, r1
   10f7c:	f1 2c       	mov	r15, r1
   10f7e:	8f c0       	rjmp	.+286    	; 0x1109e <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   10f80:	c7 5f       	subi	r28, 0xF7	; 247
   10f82:	de 4f       	sbci	r29, 0xFE	; 254
   10f84:	88 81       	ld	r24, Y
   10f86:	99 81       	ldd	r25, Y+1	; 0x01
   10f88:	aa 81       	ldd	r26, Y+2	; 0x02
   10f8a:	bb 81       	ldd	r27, Y+3	; 0x03
   10f8c:	c9 50       	subi	r28, 0x09	; 9
   10f8e:	d1 40       	sbci	r29, 0x01	; 1
   10f90:	88 27       	eor	r24, r24
   10f92:	90 7f       	andi	r25, 0xF0	; 240
   10f94:	aa 27       	eor	r26, r26
   10f96:	bb 27       	eor	r27, r27
   10f98:	81 15       	cp	r24, r1
   10f9a:	f0 e4       	ldi	r31, 0x40	; 64
   10f9c:	9f 07       	cpc	r25, r31
   10f9e:	a1 05       	cpc	r26, r1
   10fa0:	b1 05       	cpc	r27, r1
   10fa2:	51 f0       	breq	.+20     	; 0x10fb8 <ls+0x11e>
   10fa4:	81 15       	cp	r24, r1
   10fa6:	90 48       	sbci	r25, 0x80	; 128
   10fa8:	a1 05       	cpc	r26, r1
   10faa:	b1 05       	cpc	r27, r1
   10fac:	09 f0       	breq	.+2      	; 0x10fb0 <ls+0x116>
   10fae:	67 c0       	rjmp	.+206    	; 0x1107e <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10fb0:	b4 01       	movw	r22, r8
   10fb2:	c8 01       	movw	r24, r16
   10fb4:	b5 de       	rcall	.-662    	; 0x10d20 <ls_info>
   10fb6:	63 c0       	rjmp	.+198    	; 0x1107e <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10fb8:	c8 01       	movw	r24, r16
   10fba:	0e 94 2d 7d 	call	0xfa5a	; 0xfa5a <opendir>
   10fbe:	5c 01       	movw	r10, r24
        if(!dirp)
   10fc0:	89 2b       	or	r24, r25
   10fc2:	79 f0       	breq	.+30     	; 0x10fe2 <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10fc4:	e1 2c       	mov	r14, r1
   10fc6:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10fc8:	c8 01       	movw	r24, r16
   10fca:	82 0d       	add	r24, r2
   10fcc:	93 1d       	adc	r25, r3
   10fce:	cf 5c       	subi	r28, 0xCF	; 207
   10fd0:	de 4f       	sbci	r29, 0xFE	; 254
   10fd2:	99 83       	std	Y+1, r25	; 0x01
   10fd4:	88 83       	st	Y, r24
   10fd6:	c1 53       	subi	r28, 0x31	; 49
   10fd8:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10fda:	87 ee       	ldi	r24, 0xE7	; 231
   10fdc:	9c e0       	ldi	r25, 0x0C	; 12
   10fde:	2c 01       	movw	r4, r24
   10fe0:	27 c0       	rjmp	.+78     	; 0x11030 <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10fe2:	8a e0       	ldi	r24, 0x0A	; 10
   10fe4:	9d e0       	ldi	r25, 0x0D	; 13
   10fe6:	1f 92       	push	r1
   10fe8:	9f 93       	push	r25
   10fea:	8f 93       	push	r24
   10fec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            return(0);
   10ff0:	0f 90       	pop	r0
   10ff2:	0f 90       	pop	r0
   10ff4:	0f 90       	pop	r0
   10ff6:	53 c0       	rjmp	.+166    	; 0x1109e <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10ff8:	f6 01       	movw	r30, r12
   10ffa:	80 81       	ld	r24, Z
   10ffc:	88 23       	and	r24, r24
   10ffe:	f1 f0       	breq	.+60     	; 0x1103c <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   11000:	f6 01       	movw	r30, r12
   11002:	01 90       	ld	r0, Z+
   11004:	00 20       	and	r0, r0
   11006:	e9 f7       	brne	.-6      	; 0x11002 <ls+0x168>
   11008:	31 97       	sbiw	r30, 0x01	; 1
   1100a:	ec 19       	sub	r30, r12
   1100c:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   1100e:	e2 0d       	add	r30, r2
   11010:	f3 1d       	adc	r31, r3
   11012:	ef 3f       	cpi	r30, 0xFF	; 255
   11014:	f1 05       	cpc	r31, r1
   11016:	b4 f0       	brlt	.+44     	; 0x11044 <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   11018:	df 92       	push	r13
   1101a:	cf 92       	push	r12
   1101c:	1f 92       	push	r1
   1101e:	5f 92       	push	r5
   11020:	4f 92       	push	r4
   11022:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                continue;
   11026:	0f 90       	pop	r0
   11028:	0f 90       	pop	r0
   1102a:	0f 90       	pop	r0
   1102c:	0f 90       	pop	r0
   1102e:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   11030:	c5 01       	movw	r24, r10
   11032:	0e 94 4b 7d 	call	0xfa96	; 0xfa96 <readdir>
   11036:	6c 01       	movw	r12, r24
   11038:	89 2b       	or	r24, r25
   1103a:	f1 f6       	brne	.-68     	; 0x10ff8 <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   1103c:	c5 01       	movw	r24, r10
   1103e:	0e 94 12 7d 	call	0xfa24	; 0xfa24 <closedir>
        break;
   11042:	1f c0       	rjmp	.+62     	; 0x11082 <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   11044:	6c e1       	ldi	r22, 0x1C	; 28
   11046:	78 e0       	ldi	r23, 0x08	; 8
   11048:	c8 01       	movw	r24, r16
   1104a:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1104e:	89 2b       	or	r24, r25
   11050:	29 f4       	brne	.+10     	; 0x1105c <ls+0x1c2>
            {
                strcat(fullpath,"/");
   11052:	6c e1       	ldi	r22, 0x1C	; 28
   11054:	78 e0       	ldi	r23, 0x08	; 8
   11056:	c8 01       	movw	r24, r16
   11058:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
            }
            strcat(fullpath,de->d_name);
   1105c:	b6 01       	movw	r22, r12
   1105e:	c8 01       	movw	r24, r16
   11060:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
            files +=ls_info(fullpath,verbose);
   11064:	b4 01       	movw	r22, r8
   11066:	c8 01       	movw	r24, r16
   11068:	5b de       	rcall	.-842    	; 0x10d20 <ls_info>
   1106a:	e8 0e       	add	r14, r24
   1106c:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   1106e:	cf 5c       	subi	r28, 0xCF	; 207
   11070:	de 4f       	sbci	r29, 0xFE	; 254
   11072:	e8 81       	ld	r30, Y
   11074:	f9 81       	ldd	r31, Y+1	; 0x01
   11076:	c1 53       	subi	r28, 0x31	; 49
   11078:	d1 40       	sbci	r29, 0x01	; 1
   1107a:	10 82       	st	Z, r1
   1107c:	d9 cf       	rjmp	.-78     	; 0x11030 <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1107e:	e1 2c       	mov	r14, r1
   11080:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   11082:	ff 92       	push	r15
   11084:	ef 92       	push	r14
   11086:	8c ed       	ldi	r24, 0xDC	; 220
   11088:	9c e0       	ldi	r25, 0x0C	; 12
   1108a:	1f 92       	push	r1
   1108c:	9f 93       	push	r25
   1108e:	8f 93       	push	r24
   11090:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(files);
   11094:	0f 90       	pop	r0
   11096:	0f 90       	pop	r0
   11098:	0f 90       	pop	r0
   1109a:	0f 90       	pop	r0
   1109c:	0f 90       	pop	r0
}
   1109e:	c7 01       	movw	r24, r14
   110a0:	ce 5c       	subi	r28, 0xCE	; 206
   110a2:	de 4f       	sbci	r29, 0xFE	; 254
   110a4:	0f b6       	in	r0, 0x3f	; 63
   110a6:	f8 94       	cli
   110a8:	de bf       	out	0x3e, r29	; 62
   110aa:	0f be       	out	0x3f, r0	; 63
   110ac:	cd bf       	out	0x3d, r28	; 61
   110ae:	df 91       	pop	r29
   110b0:	cf 91       	pop	r28
   110b2:	1f 91       	pop	r17
   110b4:	0f 91       	pop	r16
   110b6:	ff 90       	pop	r15
   110b8:	ef 90       	pop	r14
   110ba:	df 90       	pop	r13
   110bc:	cf 90       	pop	r12
   110be:	bf 90       	pop	r11
   110c0:	af 90       	pop	r10
   110c2:	9f 90       	pop	r9
   110c4:	8f 90       	pop	r8
   110c6:	6f 90       	pop	r6
   110c8:	5f 90       	pop	r5
   110ca:	4f 90       	pop	r4
   110cc:	3f 90       	pop	r3
   110ce:	2f 90       	pop	r2
   110d0:	08 95       	ret

000110d2 <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   110d2:	cf 92       	push	r12
   110d4:	df 92       	push	r13
   110d6:	ef 92       	push	r14
   110d8:	ff 92       	push	r15
   110da:	cf 93       	push	r28
   110dc:	df 93       	push	r29
   110de:	f8 2e       	mov	r15, r24
   110e0:	e9 2e       	mov	r14, r25
   110e2:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   110e4:	6c e8       	ldi	r22, 0x8C	; 140
   110e6:	78 e0       	ldi	r23, 0x08	; 8
   110e8:	3e db       	rcall	.-2436   	; 0x10766 <fopen>
    if (fo)
   110ea:	89 2b       	or	r24, r25
   110ec:	79 f0       	breq	.+30     	; 0x1110c <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   110ee:	ef 92       	push	r14
   110f0:	ff 92       	push	r15
   110f2:	8c ec       	ldi	r24, 0xCC	; 204
   110f4:	9c e0       	ldi	r25, 0x0C	; 12
   110f6:	1f 92       	push	r1
   110f8:	9f 93       	push	r25
   110fa:	8f 93       	push	r24
   110fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   11100:	0f 90       	pop	r0
   11102:	0f 90       	pop	r0
   11104:	0f 90       	pop	r0
   11106:	0f 90       	pop	r0
   11108:	0f 90       	pop	r0
   1110a:	22 c0       	rjmp	.+68     	; 0x11150 <logfile+0x7e>
    }

    size = strlen(str);
   1110c:	fe 01       	movw	r30, r28
   1110e:	01 90       	ld	r0, Z+
   11110:	00 20       	and	r0, r0
   11112:	e9 f7       	brne	.-6      	; 0x1110e <logfile+0x3c>
   11114:	31 97       	sbiw	r30, 0x01	; 1
   11116:	af 01       	movw	r20, r30
   11118:	4c 1b       	sub	r20, r28
   1111a:	5d 0b       	sbc	r21, r29
   1111c:	6a 01       	movw	r12, r20
   1111e:	e1 2c       	mov	r14, r1
   11120:	f1 2c       	mov	r15, r1
    if( fwrite(str, 1, size, fo) < size)
   11122:	20 e0       	ldi	r18, 0x00	; 0
   11124:	30 e0       	ldi	r19, 0x00	; 0
   11126:	61 e0       	ldi	r22, 0x01	; 1
   11128:	70 e0       	ldi	r23, 0x00	; 0
   1112a:	ce 01       	movw	r24, r28
   1112c:	44 d9       	rcall	.-3448   	; 0x103b6 <fwrite>
   1112e:	a0 e0       	ldi	r26, 0x00	; 0
   11130:	b0 e0       	ldi	r27, 0x00	; 0
   11132:	8c 15       	cp	r24, r12
   11134:	9d 05       	cpc	r25, r13
   11136:	ae 05       	cpc	r26, r14
   11138:	bf 05       	cpc	r27, r15
   1113a:	7c f4       	brge	.+30     	; 0x1115a <logfile+0x88>
    {
        printf("Write error\n");
   1113c:	8f eb       	ldi	r24, 0xBF	; 191
   1113e:	9c e0       	ldi	r25, 0x0C	; 12
   11140:	1f 92       	push	r1
   11142:	9f 93       	push	r25
   11144:	8f 93       	push	r24
   11146:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1114a:	0f 90       	pop	r0
   1114c:	0f 90       	pop	r0
   1114e:	0f 90       	pop	r0
   11150:	60 e0       	ldi	r22, 0x00	; 0
   11152:	70 e0       	ldi	r23, 0x00	; 0
   11154:	80 e0       	ldi	r24, 0x00	; 0
   11156:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   11158:	05 c0       	rjmp	.+10     	; 0x11164 <logfile+0x92>
   1115a:	80 e0       	ldi	r24, 0x00	; 0
   1115c:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   1115e:	ad d9       	rcall	.-3238   	; 0x104ba <fclose>
   11160:	b6 01       	movw	r22, r12
}
   11162:	c7 01       	movw	r24, r14
   11164:	df 91       	pop	r29
   11166:	cf 91       	pop	r28
   11168:	ff 90       	pop	r15
   1116a:	ef 90       	pop	r14
   1116c:	df 90       	pop	r13
   1116e:	cf 90       	pop	r12
   11170:	08 95       	ret

00011172 <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   11172:	a0 e0       	ldi	r26, 0x00	; 0
   11174:	b1 e0       	ldi	r27, 0x01	; 1
   11176:	ef eb       	ldi	r30, 0xBF	; 191
   11178:	f8 e8       	ldi	r31, 0x88	; 136
   1117a:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   1117e:	18 2f       	mov	r17, r24
   11180:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   11182:	60 e7       	ldi	r22, 0x70	; 112
   11184:	78 e0       	ldi	r23, 0x08	; 8
   11186:	ef da       	rcall	.-2594   	; 0x10766 <fopen>
   11188:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   1118a:	89 2b       	or	r24, r25
   1118c:	89 f4       	brne	.+34     	; 0x111b0 <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   1118e:	0f 93       	push	r16
   11190:	1f 93       	push	r17
   11192:	80 eb       	ldi	r24, 0xB0	; 176
   11194:	9c e0       	ldi	r25, 0x0C	; 12
   11196:	1f 92       	push	r1
   11198:	9f 93       	push	r25
   1119a:	8f 93       	push	r24
   1119c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   111a0:	0f 90       	pop	r0
   111a2:	0f 90       	pop	r0
   111a4:	0f 90       	pop	r0
   111a6:	0f 90       	pop	r0
   111a8:	0f 90       	pop	r0
   111aa:	80 e0       	ldi	r24, 0x00	; 0
   111ac:	90 e0       	ldi	r25, 0x00	; 0
   111ae:	2d c0       	rjmp	.+90     	; 0x1120a <sum+0x98>
   111b0:	00 e0       	ldi	r16, 0x00	; 0
   111b2:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   111b4:	ce 01       	movw	r24, r28
   111b6:	01 96       	adiw	r24, 0x01	; 1
   111b8:	6c 01       	movw	r12, r24
   111ba:	97 01       	movw	r18, r14
   111bc:	40 e0       	ldi	r20, 0x00	; 0
   111be:	51 e0       	ldi	r21, 0x01	; 1
   111c0:	61 e0       	ldi	r22, 0x01	; 1
   111c2:	70 e0       	ldi	r23, 0x00	; 0
   111c4:	c6 01       	movw	r24, r12
   111c6:	25 d8       	rcall	.-4022   	; 0x10212 <fread>
   111c8:	18 16       	cp	r1, r24
   111ca:	19 06       	cpc	r1, r25
   111cc:	5c f4       	brge	.+22     	; 0x111e4 <sum+0x72>
   111ce:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   111d0:	21 91       	ld	r18, Z+
   111d2:	02 0f       	add	r16, r18
   111d4:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   111d6:	9f 01       	movw	r18, r30
   111d8:	2c 19       	sub	r18, r12
   111da:	3d 09       	sbc	r19, r13
   111dc:	28 17       	cp	r18, r24
   111de:	39 07       	cpc	r19, r25
   111e0:	bc f3       	brlt	.-18     	; 0x111d0 <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   111e2:	eb cf       	rjmp	.-42     	; 0x111ba <sum+0x48>
   111e4:	c7 01       	movw	r24, r14
   111e6:	69 d9       	rcall	.-3374   	; 0x104ba <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   111e8:	1f 93       	push	r17
   111ea:	0f 93       	push	r16
   111ec:	1f 93       	push	r17
   111ee:	0f 93       	push	r16
   111f0:	8f e9       	ldi	r24, 0x9F	; 159
   111f2:	9c e0       	ldi	r25, 0x0C	; 12
   111f4:	1f 92       	push	r1
   111f6:	9f 93       	push	r25
   111f8:	8f 93       	push	r24
   111fa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(sum);
   111fe:	0f b6       	in	r0, 0x3f	; 63
   11200:	f8 94       	cli
   11202:	de bf       	out	0x3e, r29	; 62
   11204:	0f be       	out	0x3f, r0	; 63
   11206:	cd bf       	out	0x3d, r28	; 61
   11208:	c8 01       	movw	r24, r16
}
   1120a:	d3 95       	inc	r29
   1120c:	e8 e0       	ldi	r30, 0x08	; 8
   1120e:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00011212 <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   11212:	a0 e0       	ldi	r26, 0x00	; 0
   11214:	b1 e0       	ldi	r27, 0x01	; 1
   11216:	ef e0       	ldi	r30, 0x0F	; 15
   11218:	f9 e8       	ldi	r31, 0x89	; 137
   1121a:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   1121e:	18 2f       	mov	r17, r24
   11220:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   11222:	6e e7       	ldi	r22, 0x7E	; 126
   11224:	78 e0       	ldi	r23, 0x08	; 8
   11226:	9f da       	rcall	.-2754   	; 0x10766 <fopen>
   11228:	6c 01       	movw	r12, r24
    if( fp == NULL)
   1122a:	89 2b       	or	r24, r25
   1122c:	39 f0       	breq	.+14     	; 0x1123c <upload+0x2a>
   1122e:	81 2c       	mov	r8, r1
   11230:	91 2c       	mov	r9, r1
   11232:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   11234:	ce 01       	movw	r24, r28
   11236:	01 96       	adiw	r24, 0x01	; 1
   11238:	7c 01       	movw	r14, r24
   1123a:	3c c0       	rjmp	.+120    	; 0x112b4 <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   1123c:	0f 93       	push	r16
   1123e:	1f 93       	push	r17
   11240:	80 e9       	ldi	r24, 0x90	; 144
   11242:	9c e0       	ldi	r25, 0x0C	; 12
   11244:	1f 92       	push	r1
   11246:	9f 93       	push	r25
   11248:	8f 93       	push	r24
   1124a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   1124e:	0f 90       	pop	r0
   11250:	0f 90       	pop	r0
   11252:	0f 90       	pop	r0
   11254:	0f 90       	pop	r0
   11256:	0f 90       	pop	r0
   11258:	60 e0       	ldi	r22, 0x00	; 0
   1125a:	70 e0       	ldi	r23, 0x00	; 0
   1125c:	80 e0       	ldi	r24, 0x00	; 0
   1125e:	90 e0       	ldi	r25, 0x00	; 0
   11260:	3a c0       	rjmp	.+116    	; 0x112d6 <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   11262:	f7 01       	movw	r30, r14
   11264:	01 90       	ld	r0, Z+
   11266:	00 20       	and	r0, r0
   11268:	e9 f7       	brne	.-6      	; 0x11264 <upload+0x52>
   1126a:	31 97       	sbiw	r30, 0x01	; 1
   1126c:	ee 19       	sub	r30, r14
   1126e:	ff 09       	sbc	r31, r15
        if(len < 1)
   11270:	1e 16       	cp	r1, r30
   11272:	1f 06       	cpc	r1, r31
   11274:	54 f5       	brge	.+84     	; 0x112ca <upload+0xb8>
            break;
        strcat(buffer,"\n");
   11276:	6f e2       	ldi	r22, 0x2F	; 47
   11278:	77 e1       	ldi	r23, 0x17	; 23
   1127a:	c7 01       	movw	r24, r14
   1127c:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
        len = strlen(buffer);
   11280:	f7 01       	movw	r30, r14
   11282:	01 90       	ld	r0, Z+
   11284:	00 20       	and	r0, r0
   11286:	e9 f7       	brne	.-6      	; 0x11282 <upload+0x70>
   11288:	31 97       	sbiw	r30, 0x01	; 1
   1128a:	8f 01       	movw	r16, r30
   1128c:	0e 19       	sub	r16, r14
   1128e:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   11290:	96 01       	movw	r18, r12
   11292:	a8 01       	movw	r20, r16
   11294:	61 e0       	ldi	r22, 0x01	; 1
   11296:	70 e0       	ldi	r23, 0x00	; 0
   11298:	c7 01       	movw	r24, r14
   1129a:	8d d8       	rcall	.-3814   	; 0x103b6 <fwrite>
        if(len != len2)
   1129c:	08 17       	cp	r16, r24
   1129e:	19 07       	cpc	r17, r25
   112a0:	a1 f4       	brne	.+40     	; 0x112ca <upload+0xb8>
            break;
        size += len;
   112a2:	a8 01       	movw	r20, r16
   112a4:	01 2e       	mov	r0, r17
   112a6:	00 0c       	add	r0, r0
   112a8:	66 0b       	sbc	r22, r22
   112aa:	77 0b       	sbc	r23, r23
   112ac:	84 0e       	add	r8, r20
   112ae:	95 1e       	adc	r9, r21
   112b0:	a6 1e       	adc	r10, r22
   112b2:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   112b4:	40 91 c2 1c 	lds	r20, 0x1CC2	; 0x801cc2 <__iob>
   112b8:	50 91 c3 1c 	lds	r21, 0x1CC3	; 0x801cc3 <__iob+0x1>
   112bc:	6e ef       	ldi	r22, 0xFE	; 254
   112be:	70 e0       	ldi	r23, 0x00	; 0
   112c0:	c7 01       	movw	r24, r14
   112c2:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
   112c6:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   112c8:	61 f6       	brne	.-104    	; 0x11262 <upload+0x50>
   112ca:	c6 01       	movw	r24, r12
   112cc:	f6 d8       	rcall	.-3604   	; 0x104ba <fclose>
    sync();
   112ce:	0e 94 58 81 	call	0x102b0	; 0x102b0 <sync>
    return(size);
   112d2:	b4 01       	movw	r22, r8
   112d4:	c5 01       	movw	r24, r10
}
   112d6:	d3 95       	inc	r29
   112d8:	ec e0       	ldi	r30, 0x0C	; 12
   112da:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

000112de <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   112de:	a0 e0       	ldi	r26, 0x00	; 0
   112e0:	b1 e0       	ldi	r27, 0x01	; 1
   112e2:	e5 e7       	ldi	r30, 0x75	; 117
   112e4:	f9 e8       	ldi	r31, 0x89	; 137
   112e6:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   112ea:	fb 01       	movw	r30, r22
   112ec:	c0 80       	ld	r12, Z
   112ee:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   112f0:	c1 14       	cp	r12, r1
   112f2:	d1 04       	cpc	r13, r1
   112f4:	19 f4       	brne	.+6      	; 0x112fc <posix_tests+0x1e>
        return(0);
   112f6:	80 e0       	ldi	r24, 0x00	; 0
   112f8:	90 e0       	ldi	r25, 0x00	; 0
   112fa:	2d c2       	rjmp	.+1114   	; 0x11756 <posix_tests+0x478>
   112fc:	4b 01       	movw	r8, r22
   112fe:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   11300:	6c e1       	ldi	r22, 0x1C	; 28
   11302:	7b e0       	ldi	r23, 0x0B	; 11
   11304:	c6 01       	movw	r24, r12
   11306:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1130a:	89 2b       	or	r24, r25
   1130c:	a9 f0       	breq	.+42     	; 0x11338 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1130e:	f4 01       	movw	r30, r8
   11310:	c2 80       	ldd	r12, Z+2	; 0x02
   11312:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   11314:	c1 14       	cp	r12, r1
   11316:	d1 04       	cpc	r13, r1
   11318:	21 f4       	brne	.+8      	; 0x11322 <posix_tests+0x44>
        {
            posix_help(1);
   1131a:	81 e0       	ldi	r24, 0x01	; 1
   1131c:	90 e0       	ldi	r25, 0x00	; 0
   1131e:	50 da       	rcall	.-2912   	; 0x107c0 <posix_help>
   11320:	18 c2       	rjmp	.+1072   	; 0x11752 <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   11322:	6e e1       	ldi	r22, 0x1E	; 30
   11324:	76 e1       	ldi	r23, 0x16	; 22
   11326:	c6 01       	movw	r24, r12
   11328:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1132c:	89 2b       	or	r24, r25
   1132e:	a9 f7       	brne	.-22     	; 0x1131a <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   11330:	f2 e0       	ldi	r31, 0x02	; 2
   11332:	6f 2e       	mov	r6, r31
   11334:	71 2c       	mov	r7, r1
   11336:	03 c0       	rjmp	.+6      	; 0x1133e <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   11338:	66 24       	eor	r6, r6
   1133a:	63 94       	inc	r6
   1133c:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1133e:	73 01       	movw	r14, r6
   11340:	ff ef       	ldi	r31, 0xFF	; 255
   11342:	ef 1a       	sub	r14, r31
   11344:	ff 0a       	sbc	r15, r31
   11346:	98 01       	movw	r18, r16
   11348:	a7 01       	movw	r20, r14
   1134a:	62 e2       	ldi	r22, 0x22	; 34
   1134c:	7b e0       	ldi	r23, 0x0B	; 11
   1134e:	c6 01       	movw	r24, r12
   11350:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11354:	89 2b       	or	r24, r25
   11356:	a1 f1       	breq	.+104    	; 0x113c0 <posix_tests+0xe2>
   11358:	73 01       	movw	r14, r6
   1135a:	ee 0c       	add	r14, r14
   1135c:	ff 1c       	adc	r15, r15
   1135e:	e8 0c       	add	r14, r8
   11360:	f9 1c       	adc	r15, r9
   11362:	57 01       	movw	r10, r14
   11364:	47 01       	movw	r8, r14
   11366:	63 01       	movw	r12, r6
   11368:	41 2c       	mov	r4, r1
   1136a:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1136c:	c0 16       	cp	r12, r16
   1136e:	d1 06       	cpc	r13, r17
   11370:	1c f5       	brge	.+70     	; 0x113b8 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   11372:	66 e2       	ldi	r22, 0x26	; 38
   11374:	7b e0       	ldi	r23, 0x0B	; 11
   11376:	f4 01       	movw	r30, r8
   11378:	81 91       	ld	r24, Z+
   1137a:	91 91       	ld	r25, Z+
   1137c:	4f 01       	movw	r8, r30
   1137e:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   11382:	89 2b       	or	r24, r25
   11384:	19 f0       	breq	.+6      	; 0x1138c <posix_tests+0xae>
                page = 1;
   11386:	44 24       	eor	r4, r4
   11388:	43 94       	inc	r4
   1138a:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1138c:	ff ef       	ldi	r31, 0xFF	; 255
   1138e:	cf 1a       	sub	r12, r31
   11390:	df 0a       	sbc	r13, r31
   11392:	ec cf       	rjmp	.-40     	; 0x1136c <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   11394:	66 e2       	ldi	r22, 0x26	; 38
   11396:	7b e0       	ldi	r23, 0x0B	; 11
   11398:	f5 01       	movw	r30, r10
   1139a:	81 91       	ld	r24, Z+
   1139c:	91 91       	ld	r25, Z+
   1139e:	5f 01       	movw	r10, r30
   113a0:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   113a4:	89 2b       	or	r24, r25
   113a6:	29 f4       	brne	.+10     	; 0x113b2 <posix_tests+0xd4>
                cat(argv[ind], page);
   113a8:	b2 01       	movw	r22, r4
   113aa:	f7 01       	movw	r30, r14
   113ac:	80 81       	ld	r24, Z
   113ae:	91 81       	ldd	r25, Z+1	; 0x01
   113b0:	36 db       	rcall	.-2452   	; 0x10a1e <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   113b2:	ff ef       	ldi	r31, 0xFF	; 255
   113b4:	6f 1a       	sub	r6, r31
   113b6:	7f 0a       	sbc	r7, r31
   113b8:	60 16       	cp	r6, r16
   113ba:	71 06       	cpc	r7, r17
   113bc:	5c f3       	brlt	.-42     	; 0x11394 <posix_tests+0xb6>
   113be:	c9 c1       	rjmp	.+914    	; 0x11752 <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   113c0:	53 01       	movw	r10, r6
   113c2:	82 e0       	ldi	r24, 0x02	; 2
   113c4:	a8 0e       	add	r10, r24
   113c6:	b1 1c       	adc	r11, r1
   113c8:	98 01       	movw	r18, r16
   113ca:	a5 01       	movw	r20, r10
   113cc:	69 e2       	ldi	r22, 0x29	; 41
   113ce:	7b e0       	ldi	r23, 0x0B	; 11
   113d0:	c6 01       	movw	r24, r12
   113d2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   113d6:	89 2b       	or	r24, r25
   113d8:	b1 f0       	breq	.+44     	; 0x11406 <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   113da:	ee 0c       	add	r14, r14
   113dc:	ff 1c       	adc	r15, r15
   113de:	e8 0c       	add	r14, r8
   113e0:	f9 1c       	adc	r15, r9
   113e2:	48 e0       	ldi	r20, 0x08	; 8
   113e4:	50 e0       	ldi	r21, 0x00	; 0
   113e6:	60 e0       	ldi	r22, 0x00	; 0
   113e8:	70 e0       	ldi	r23, 0x00	; 0
   113ea:	f7 01       	movw	r30, r14
   113ec:	80 81       	ld	r24, Z
   113ee:	91 81       	ldd	r25, Z+1	; 0x01
   113f0:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
   113f4:	ab 01       	movw	r20, r22
   113f6:	bc 01       	movw	r22, r24
   113f8:	f7 01       	movw	r30, r14
   113fa:	32 97       	sbiw	r30, 0x02	; 2
   113fc:	80 81       	ld	r24, Z
   113fe:	91 81       	ldd	r25, Z+1	; 0x01
   11400:	0e 94 56 7c 	call	0xf8ac	; 0xf8ac <chmod>
   11404:	a6 c1       	rjmp	.+844    	; 0x11752 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   11406:	98 01       	movw	r18, r16
   11408:	a5 01       	movw	r20, r10
   1140a:	6f e2       	ldi	r22, 0x2F	; 47
   1140c:	7b e0       	ldi	r23, 0x0B	; 11
   1140e:	c6 01       	movw	r24, r12
   11410:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11414:	89 2b       	or	r24, r25
   11416:	61 f0       	breq	.+24     	; 0x11430 <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   11418:	ee 0c       	add	r14, r14
   1141a:	ff 1c       	adc	r15, r15
   1141c:	f4 01       	movw	r30, r8
   1141e:	ee 0d       	add	r30, r14
   11420:	ff 1d       	adc	r31, r15
   11422:	60 81       	ld	r22, Z
   11424:	71 81       	ldd	r23, Z+1	; 0x01
   11426:	32 97       	sbiw	r30, 0x02	; 2
   11428:	80 81       	ld	r24, Z
   1142a:	91 81       	ldd	r25, Z+1	; 0x01
   1142c:	e5 d9       	rcall	.-3126   	; 0x107f8 <copy>
   1142e:	91 c1       	rjmp	.+802    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   11430:	98 01       	movw	r18, r16
   11432:	a7 01       	movw	r20, r14
   11434:	64 e3       	ldi	r22, 0x34	; 52
   11436:	7b e0       	ldi	r23, 0x0B	; 11
   11438:	c6 01       	movw	r24, r12
   1143a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1143e:	89 2b       	or	r24, r25
   11440:	59 f0       	breq	.+22     	; 0x11458 <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   11442:	73 01       	movw	r14, r6
   11444:	ee 0c       	add	r14, r14
   11446:	ff 1c       	adc	r15, r15
   11448:	f4 01       	movw	r30, r8
   1144a:	ee 0d       	add	r30, r14
   1144c:	ff 1d       	adc	r31, r15
   1144e:	80 81       	ld	r24, Z
   11450:	91 81       	ldd	r25, Z+1	; 0x01
   11452:	0e 94 37 7c 	call	0xf86e	; 0xf86e <chdir>
   11456:	7d c1       	rjmp	.+762    	; 0x11752 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   11458:	98 01       	movw	r18, r16
   1145a:	a7 01       	movw	r20, r14
   1145c:	67 e3       	ldi	r22, 0x37	; 55
   1145e:	7b e0       	ldi	r23, 0x0B	; 11
   11460:	c6 01       	movw	r24, r12
   11462:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11466:	89 2b       	or	r24, r25
   11468:	a1 f1       	breq	.+104    	; 0x114d2 <posix_tests+0x1f4>
   1146a:	73 01       	movw	r14, r6
   1146c:	ee 0c       	add	r14, r14
   1146e:	ff 1c       	adc	r15, r15
   11470:	e8 0c       	add	r14, r8
   11472:	f9 1c       	adc	r15, r9
   11474:	57 01       	movw	r10, r14
   11476:	47 01       	movw	r8, r14
   11478:	63 01       	movw	r12, r6
   1147a:	41 2c       	mov	r4, r1
   1147c:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1147e:	c0 16       	cp	r12, r16
   11480:	d1 06       	cpc	r13, r17
   11482:	1c f5       	brge	.+70     	; 0x114ca <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   11484:	66 e2       	ldi	r22, 0x26	; 38
   11486:	7b e0       	ldi	r23, 0x0B	; 11
   11488:	f4 01       	movw	r30, r8
   1148a:	81 91       	ld	r24, Z+
   1148c:	91 91       	ld	r25, Z+
   1148e:	4f 01       	movw	r8, r30
   11490:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   11494:	89 2b       	or	r24, r25
   11496:	19 f0       	breq	.+6      	; 0x1149e <posix_tests+0x1c0>
                page = 1;
   11498:	44 24       	eor	r4, r4
   1149a:	43 94       	inc	r4
   1149c:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1149e:	ff ef       	ldi	r31, 0xFF	; 255
   114a0:	cf 1a       	sub	r12, r31
   114a2:	df 0a       	sbc	r13, r31
   114a4:	ec cf       	rjmp	.-40     	; 0x1147e <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   114a6:	66 e2       	ldi	r22, 0x26	; 38
   114a8:	7b e0       	ldi	r23, 0x0B	; 11
   114aa:	f5 01       	movw	r30, r10
   114ac:	81 91       	ld	r24, Z+
   114ae:	91 91       	ld	r25, Z+
   114b0:	5f 01       	movw	r10, r30
   114b2:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   114b6:	89 2b       	or	r24, r25
   114b8:	29 f4       	brne	.+10     	; 0x114c4 <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   114ba:	b2 01       	movw	r22, r4
   114bc:	f7 01       	movw	r30, r14
   114be:	80 81       	ld	r24, Z
   114c0:	91 81       	ldd	r25, Z+1	; 0x01
   114c2:	1a db       	rcall	.-2508   	; 0x10af8 <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   114c4:	ff ef       	ldi	r31, 0xFF	; 255
   114c6:	6f 1a       	sub	r6, r31
   114c8:	7f 0a       	sbc	r7, r31
   114ca:	60 16       	cp	r6, r16
   114cc:	71 06       	cpc	r7, r17
   114ce:	5c f3       	brlt	.-42     	; 0x114a6 <posix_tests+0x1c8>
   114d0:	40 c1       	rjmp	.+640    	; 0x11752 <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   114d2:	98 01       	movw	r18, r16
   114d4:	a5 01       	movw	r20, r10
   114d6:	6f e3       	ldi	r22, 0x3F	; 63
   114d8:	7b e0       	ldi	r23, 0x0B	; 11
   114da:	c6 01       	movw	r24, r12
   114dc:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   114e0:	89 2b       	or	r24, r25
   114e2:	61 f0       	breq	.+24     	; 0x114fc <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   114e4:	ee 0c       	add	r14, r14
   114e6:	ff 1c       	adc	r15, r15
   114e8:	f4 01       	movw	r30, r8
   114ea:	ee 0d       	add	r30, r14
   114ec:	ff 1d       	adc	r31, r15
   114ee:	60 81       	ld	r22, Z
   114f0:	71 81       	ldd	r23, Z+1	; 0x01
   114f2:	32 97       	sbiw	r30, 0x02	; 2
   114f4:	80 81       	ld	r24, Z
   114f6:	91 81       	ldd	r25, Z+1	; 0x01
   114f8:	ec dd       	rcall	.-1064   	; 0x110d2 <logfile>
   114fa:	2b c1       	rjmp	.+598    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   114fc:	98 01       	movw	r18, r16
   114fe:	a3 01       	movw	r20, r6
   11500:	6c e4       	ldi	r22, 0x4C	; 76
   11502:	78 e0       	ldi	r23, 0x08	; 8
   11504:	c6 01       	movw	r24, r12
   11506:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1150a:	89 2b       	or	r24, r25
   1150c:	69 f1       	breq	.+90     	; 0x11568 <posix_tests+0x28a>
   1150e:	73 01       	movw	r14, r6
   11510:	ee 0c       	add	r14, r14
   11512:	ff 1c       	adc	r15, r15
   11514:	e8 0c       	add	r14, r8
   11516:	f9 1c       	adc	r15, r9
   11518:	c1 2c       	mov	r12, r1
   1151a:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1151c:	c6 01       	movw	r24, r12
   1151e:	86 0d       	add	r24, r6
   11520:	97 1d       	adc	r25, r7
   11522:	80 17       	cp	r24, r16
   11524:	91 07       	cpc	r25, r17
   11526:	b4 f4       	brge	.+44     	; 0x11554 <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   11528:	63 e4       	ldi	r22, 0x43	; 67
   1152a:	7b e0       	ldi	r23, 0x0B	; 11
   1152c:	f7 01       	movw	r30, r14
   1152e:	80 81       	ld	r24, Z
   11530:	91 81       	ldd	r25, Z+1	; 0x01
   11532:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   11536:	89 2b       	or	r24, r25
   11538:	31 f4       	brne	.+12     	; 0x11546 <posix_tests+0x268>
                ls(argv[i],1);
   1153a:	61 e0       	ldi	r22, 0x01	; 1
   1153c:	70 e0       	ldi	r23, 0x00	; 0
   1153e:	f7 01       	movw	r30, r14
   11540:	80 81       	ld	r24, Z
   11542:	91 81       	ldd	r25, Z+1	; 0x01
   11544:	aa dc       	rcall	.-1708   	; 0x10e9a <ls>
            ++args;
   11546:	ff ef       	ldi	r31, 0xFF	; 255
   11548:	cf 1a       	sub	r12, r31
   1154a:	df 0a       	sbc	r13, r31
   1154c:	82 e0       	ldi	r24, 0x02	; 2
   1154e:	e8 0e       	add	r14, r24
   11550:	f1 1c       	adc	r15, r1
   11552:	e4 cf       	rjmp	.-56     	; 0x1151c <posix_tests+0x23e>
        }
        if(!args)
   11554:	c1 14       	cp	r12, r1
   11556:	d1 04       	cpc	r13, r1
   11558:	09 f0       	breq	.+2      	; 0x1155c <posix_tests+0x27e>
        {
            ls("",1);
   1155a:	fb c0       	rjmp	.+502    	; 0x11752 <posix_tests+0x474>
   1155c:	61 e0       	ldi	r22, 0x01	; 1
   1155e:	70 e0       	ldi	r23, 0x00	; 0
   11560:	80 e3       	ldi	r24, 0x30	; 48
   11562:	97 e1       	ldi	r25, 0x17	; 23
   11564:	9a dc       	rcall	.-1740   	; 0x10e9a <ls>
   11566:	f5 c0       	rjmp	.+490    	; 0x11752 <posix_tests+0x474>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   11568:	98 01       	movw	r18, r16
   1156a:	a7 01       	movw	r20, r14
   1156c:	66 e4       	ldi	r22, 0x46	; 70
   1156e:	7b e0       	ldi	r23, 0x0B	; 11
   11570:	c6 01       	movw	r24, r12
   11572:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11576:	89 2b       	or	r24, r25
   11578:	59 f0       	breq	.+22     	; 0x11590 <posix_tests+0x2b2>
    {

        mkfs(argv[ind++]);
   1157a:	73 01       	movw	r14, r6
   1157c:	ee 0c       	add	r14, r14
   1157e:	ff 1c       	adc	r15, r15
   11580:	f4 01       	movw	r30, r8
   11582:	ee 0d       	add	r30, r14
   11584:	ff 1d       	adc	r31, r15
   11586:	80 81       	ld	r24, Z
   11588:	91 81       	ldd	r25, Z+1	; 0x01
   1158a:	0e 94 0f 7e 	call	0xfc1e	; 0xfc1e <mkfs>
   1158e:	e1 c0       	rjmp	.+450    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   11590:	98 01       	movw	r18, r16
   11592:	a7 01       	movw	r20, r14
   11594:	6b e4       	ldi	r22, 0x4B	; 75
   11596:	7b e0       	ldi	r23, 0x0B	; 11
   11598:	c6 01       	movw	r24, r12
   1159a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1159e:	89 2b       	or	r24, r25
   115a0:	19 f1       	breq	.+70     	; 0x115e8 <posix_tests+0x30a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   115a2:	e0 16       	cp	r14, r16
   115a4:	f1 06       	cpc	r15, r17
   115a6:	7c f4       	brge	.+30     	; 0x115c6 <posix_tests+0x2e8>
        {
            mode = strtol(argv[ind+1],NULL,8);
   115a8:	ee 0c       	add	r14, r14
   115aa:	ff 1c       	adc	r15, r15
   115ac:	f4 01       	movw	r30, r8
   115ae:	ee 0d       	add	r30, r14
   115b0:	ff 1d       	adc	r31, r15
   115b2:	48 e0       	ldi	r20, 0x08	; 8
   115b4:	50 e0       	ldi	r21, 0x00	; 0
   115b6:	60 e0       	ldi	r22, 0x00	; 0
   115b8:	70 e0       	ldi	r23, 0x00	; 0
   115ba:	80 81       	ld	r24, Z
   115bc:	91 81       	ldd	r25, Z+1	; 0x01
   115be:	0e 94 de 46 	call	0x8dbc	; 0x8dbc <strtol>
   115c2:	ab 01       	movw	r20, r22
   115c4:	02 c0       	rjmp	.+4      	; 0x115ca <posix_tests+0x2ec>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   115c6:	4f ef       	ldi	r20, 0xFF	; 255
   115c8:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   115ca:	05 2e       	mov	r0, r21
   115cc:	00 0c       	add	r0, r0
   115ce:	66 0b       	sbc	r22, r22
   115d0:	77 0b       	sbc	r23, r23
   115d2:	73 01       	movw	r14, r6
   115d4:	ee 0c       	add	r14, r14
   115d6:	ff 1c       	adc	r15, r15
   115d8:	f4 01       	movw	r30, r8
   115da:	ee 0d       	add	r30, r14
   115dc:	ff 1d       	adc	r31, r15
   115de:	80 81       	ld	r24, Z
   115e0:	91 81       	ldd	r25, Z+1	; 0x01
   115e2:	0e 94 a4 7c 	call	0xf948	; 0xf948 <mkdir>
   115e6:	b5 c0       	rjmp	.+362    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   115e8:	98 01       	movw	r18, r16
   115ea:	a7 01       	movw	r20, r14
   115ec:	61 e5       	ldi	r22, 0x51	; 81
   115ee:	7b e0       	ldi	r23, 0x0B	; 11
   115f0:	c6 01       	movw	r24, r12
   115f2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   115f6:	89 2b       	or	r24, r25
   115f8:	79 f0       	breq	.+30     	; 0x11618 <posix_tests+0x33a>
    {
        setpage(atoi(argv[ind]));
   115fa:	73 01       	movw	r14, r6
   115fc:	ee 0c       	add	r14, r14
   115fe:	ff 1c       	adc	r15, r15
   11600:	f4 01       	movw	r30, r8
   11602:	ee 0d       	add	r30, r14
   11604:	ff 1d       	adc	r31, r15
   11606:	80 81       	ld	r24, Z
   11608:	91 81       	ldd	r25, Z+1	; 0x01
   1160a:	0e 94 42 47 	call	0x8e84	; 0x8e84 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1160e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   11612:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
   11616:	9d c0       	rjmp	.+314    	; 0x11752 <posix_tests+0x474>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   11618:	98 01       	movw	r18, r16
   1161a:	a3 01       	movw	r20, r6
   1161c:	66 e5       	ldi	r22, 0x56	; 86
   1161e:	7b e0       	ldi	r23, 0x0B	; 11
   11620:	c6 01       	movw	r24, r12
   11622:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11626:	89 2b       	or	r24, r25
   11628:	a9 f0       	breq	.+42     	; 0x11654 <posix_tests+0x376>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1162a:	6e ef       	ldi	r22, 0xFE	; 254
   1162c:	70 e0       	ldi	r23, 0x00	; 0
   1162e:	ce 01       	movw	r24, r28
   11630:	01 96       	adiw	r24, 0x01	; 1
   11632:	0e 94 7f 7c 	call	0xf8fe	; 0xf8fe <getcwd>
   11636:	9f 93       	push	r25
   11638:	8f 93       	push	r24
   1163a:	84 e5       	ldi	r24, 0x54	; 84
   1163c:	9e e0       	ldi	r25, 0x0E	; 14
   1163e:	1f 92       	push	r1
   11640:	9f 93       	push	r25
   11642:	8f 93       	push	r24
   11644:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11648:	0f 90       	pop	r0
   1164a:	0f 90       	pop	r0
   1164c:	0f 90       	pop	r0
   1164e:	0f 90       	pop	r0
   11650:	0f 90       	pop	r0
   11652:	7f c0       	rjmp	.+254    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   11654:	98 01       	movw	r18, r16
   11656:	a5 01       	movw	r20, r10
   11658:	6a e5       	ldi	r22, 0x5A	; 90
   1165a:	7b e0       	ldi	r23, 0x0B	; 11
   1165c:	c6 01       	movw	r24, r12
   1165e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11662:	89 2b       	or	r24, r25
   11664:	69 f0       	breq	.+26     	; 0x11680 <posix_tests+0x3a2>
    {
        rename(argv[ind],argv[ind+1]);
   11666:	ee 0c       	add	r14, r14
   11668:	ff 1c       	adc	r15, r15
   1166a:	f4 01       	movw	r30, r8
   1166c:	ee 0d       	add	r30, r14
   1166e:	ff 1d       	adc	r31, r15
   11670:	60 81       	ld	r22, Z
   11672:	71 81       	ldd	r23, Z+1	; 0x01
   11674:	32 97       	sbiw	r30, 0x02	; 2
   11676:	80 81       	ld	r24, Z
   11678:	91 81       	ldd	r25, Z+1	; 0x01
   1167a:	0e 94 d2 7c 	call	0xf9a4	; 0xf9a4 <rename>
   1167e:	69 c0       	rjmp	.+210    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   11680:	98 01       	movw	r18, r16
   11682:	a7 01       	movw	r20, r14
   11684:	61 e6       	ldi	r22, 0x61	; 97
   11686:	7b e0       	ldi	r23, 0x0B	; 11
   11688:	c6 01       	movw	r24, r12
   1168a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1168e:	89 2b       	or	r24, r25
   11690:	59 f0       	breq	.+22     	; 0x116a8 <posix_tests+0x3ca>
    {
        unlink(argv[ind]);
   11692:	73 01       	movw	r14, r6
   11694:	ee 0c       	add	r14, r14
   11696:	ff 1c       	adc	r15, r15
   11698:	f4 01       	movw	r30, r8
   1169a:	ee 0d       	add	r30, r14
   1169c:	ff 1d       	adc	r31, r15
   1169e:	80 81       	ld	r24, Z
   116a0:	91 81       	ldd	r25, Z+1	; 0x01
   116a2:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <unlink>
   116a6:	55 c0       	rjmp	.+170    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   116a8:	98 01       	movw	r18, r16
   116aa:	a7 01       	movw	r20, r14
   116ac:	64 e6       	ldi	r22, 0x64	; 100
   116ae:	7b e0       	ldi	r23, 0x0B	; 11
   116b0:	c6 01       	movw	r24, r12
   116b2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   116b6:	89 2b       	or	r24, r25
   116b8:	51 f0       	breq	.+20     	; 0x116ce <posix_tests+0x3f0>
    {
        sum(argv[ind]);
   116ba:	73 01       	movw	r14, r6
   116bc:	ee 0c       	add	r14, r14
   116be:	ff 1c       	adc	r15, r15
   116c0:	f4 01       	movw	r30, r8
   116c2:	ee 0d       	add	r30, r14
   116c4:	ff 1d       	adc	r31, r15
   116c6:	80 81       	ld	r24, Z
   116c8:	91 81       	ldd	r25, Z+1	; 0x01
   116ca:	53 dd       	rcall	.-1370   	; 0x11172 <sum>
   116cc:	42 c0       	rjmp	.+132    	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   116ce:	98 01       	movw	r18, r16
   116d0:	a7 01       	movw	r20, r14
   116d2:	68 e6       	ldi	r22, 0x68	; 104
   116d4:	7b e0       	ldi	r23, 0x0B	; 11
   116d6:	c6 01       	movw	r24, r12
   116d8:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   116dc:	89 2b       	or	r24, r25
   116de:	91 f0       	breq	.+36     	; 0x11704 <posix_tests+0x426>
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   116e0:	73 01       	movw	r14, r6
   116e2:	ee 0c       	add	r14, r14
   116e4:	ff 1c       	adc	r15, r15
   116e6:	f4 01       	movw	r30, r8
   116e8:	ee 0d       	add	r30, r14
   116ea:	ff 1d       	adc	r31, r15
   116ec:	be 01       	movw	r22, r28
   116ee:	6f 5f       	subi	r22, 0xFF	; 255
   116f0:	7f 4f       	sbci	r23, 0xFF	; 255
   116f2:	80 81       	ld	r24, Z
   116f4:	91 81       	ldd	r25, Z+1	; 0x01
   116f6:	0e 94 c7 7e 	call	0xfd8e	; 0xfd8e <stat>
        dump_stat(&p);
   116fa:	ce 01       	movw	r24, r28
   116fc:	01 96       	adiw	r24, 0x01	; 1
   116fe:	0e 94 7c 7b 	call	0xf6f8	; 0xf6f8 <dump_stat>
   11702:	27 c0       	rjmp	.+78     	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   11704:	98 01       	movw	r18, r16
   11706:	a7 01       	movw	r20, r14
   11708:	6d e6       	ldi	r22, 0x6D	; 109
   1170a:	7b e0       	ldi	r23, 0x0B	; 11
   1170c:	c6 01       	movw	r24, r12
   1170e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   11712:	89 2b       	or	r24, r25
   11714:	59 f0       	breq	.+22     	; 0x1172c <posix_tests+0x44e>
    {
        rmdir(argv[ind]);
   11716:	73 01       	movw	r14, r6
   11718:	ee 0c       	add	r14, r14
   1171a:	ff 1c       	adc	r15, r15
   1171c:	f4 01       	movw	r30, r8
   1171e:	ee 0d       	add	r30, r14
   11720:	ff 1d       	adc	r31, r15
   11722:	80 81       	ld	r24, Z
   11724:	91 81       	ldd	r25, Z+1	; 0x01
   11726:	0e 94 10 7d 	call	0xfa20	; 0xfa20 <rmdir>
   1172a:	13 c0       	rjmp	.+38     	; 0x11752 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   1172c:	98 01       	movw	r18, r16
   1172e:	a7 01       	movw	r20, r14
   11730:	63 e7       	ldi	r22, 0x73	; 115
   11732:	7b e0       	ldi	r23, 0x0B	; 11
   11734:	c6 01       	movw	r24, r12
   11736:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1173a:	89 2b       	or	r24, r25
   1173c:	09 f4       	brne	.+2      	; 0x11740 <posix_tests+0x462>
   1173e:	db cd       	rjmp	.-1098   	; 0x112f6 <posix_tests+0x18>
    {
        upload(argv[ind]);
   11740:	73 01       	movw	r14, r6
   11742:	ee 0c       	add	r14, r14
   11744:	ff 1c       	adc	r15, r15
   11746:	f4 01       	movw	r30, r8
   11748:	ee 0d       	add	r30, r14
   1174a:	ff 1d       	adc	r31, r15
   1174c:	80 81       	ld	r24, Z
   1174e:	91 81       	ldd	r25, Z+1	; 0x01
   11750:	60 dd       	rcall	.-1344   	; 0x11212 <upload>
        return(1);
   11752:	81 e0       	ldi	r24, 0x01	; 1
   11754:	90 e0       	ldi	r25, 0x00	; 0
    }

    return(0);
}
   11756:	d3 95       	inc	r29
   11758:	e0 e1       	ldi	r30, 0x10	; 16
   1175a:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

0001175e <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1175e:	61 e0       	ldi	r22, 0x01	; 1
   11760:	70 e0       	ldi	r23, 0x00	; 0
   11762:	8c e4       	ldi	r24, 0x4C	; 76
   11764:	9d e8       	ldi	r25, 0x8D	; 141
   11766:	0e 94 24 35 	call	0x6a48	; 0x6a48 <set_timers>
   1176a:	01 96       	adiw	r24, 0x01	; 1
   1176c:	51 f4       	brne	.+20     	; 0x11782 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   1176e:	85 ef       	ldi	r24, 0xF5	; 245
   11770:	9f e0       	ldi	r25, 0x0F	; 15
   11772:	1f 92       	push	r1
   11774:	9f 93       	push	r25
   11776:	8f 93       	push	r24
   11778:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1177c:	0f 90       	pop	r0
   1177e:	0f 90       	pop	r0

    gpib_timer_reset();
   11780:	0f 90       	pop	r0
   11782:	78 c1       	rjmp	.+752    	; 0x11a74 <gpib_timer_reset>
   11784:	08 95       	ret

00011786 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   11786:	28 2f       	mov	r18, r24
   11788:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1178a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1178c:	88 0f       	add	r24, r24
        if(mask & 1)
   1178e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   11790:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   11792:	26 95       	lsr	r18
   11794:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   11796:	d1 f7       	brne	.-12     	; 0x1178c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   11798:	08 95       	ret

0001179a <ppr_set>:
   1179a:	f5 df       	rcall	.-22     	; 0x11786 <reverse_8bits>
   1179c:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
   117a0:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <SPI0_TXRX_Byte>
   117a4:	2a 9a       	sbi	0x05, 2	; 5
   117a6:	22 9a       	sbi	0x04, 2	; 4
   117a8:	2a 98       	cbi	0x05, 2	; 5
   117aa:	22 9a       	sbi	0x04, 2	; 4
   117ac:	08 95       	ret

000117ae <ppr_reg>:
   117ae:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   117b2:	e9 cf       	rjmp	.-46     	; 0x11786 <reverse_8bits>
   117b4:	08 95       	ret

000117b6 <ppr_init>:
   117b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   117ba:	81 ff       	sbrs	r24, 1
   117bc:	0a c0       	rjmp	.+20     	; 0x117d2 <ppr_init+0x1c>
   117be:	82 ee       	ldi	r24, 0xE2	; 226
   117c0:	9f e0       	ldi	r25, 0x0F	; 15
   117c2:	1f 92       	push	r1
   117c4:	9f 93       	push	r25
   117c6:	8f 93       	push	r24
   117c8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   117cc:	0f 90       	pop	r0
   117ce:	0f 90       	pop	r0
   117d0:	0f 90       	pop	r0
   117d2:	80 e0       	ldi	r24, 0x00	; 0
   117d4:	e2 cf       	rjmp	.-60     	; 0x1179a <ppr_set>
   117d6:	08 95       	ret

000117d8 <ppr_bit_set>:
   117d8:	21 e0       	ldi	r18, 0x01	; 1
   117da:	30 e0       	ldi	r19, 0x00	; 0
   117dc:	01 c0       	rjmp	.+2      	; 0x117e0 <ppr_bit_set+0x8>
   117de:	22 0f       	add	r18, r18
   117e0:	8a 95       	dec	r24
   117e2:	ea f7       	brpl	.-6      	; 0x117de <ppr_bit_set+0x6>
   117e4:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   117e8:	82 2b       	or	r24, r18
   117ea:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
   117ee:	d5 cf       	rjmp	.-86     	; 0x1179a <ppr_set>
   117f0:	08 95       	ret

000117f2 <ppr_bit_clr>:
   117f2:	21 e0       	ldi	r18, 0x01	; 1
   117f4:	30 e0       	ldi	r19, 0x00	; 0
   117f6:	01 c0       	rjmp	.+2      	; 0x117fa <ppr_bit_clr+0x8>
   117f8:	22 0f       	add	r18, r18
   117fa:	8a 95       	dec	r24
   117fc:	ea f7       	brpl	.-6      	; 0x117f8 <ppr_bit_clr+0x6>
   117fe:	20 95       	com	r18
   11800:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   11804:	82 23       	and	r24, r18
   11806:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
   1180a:	c7 cf       	rjmp	.-114    	; 0x1179a <ppr_set>
   1180c:	08 95       	ret

0001180e <dbf_open>:
   1180e:	0f 93       	push	r16
   11810:	1f 93       	push	r17
   11812:	cf 93       	push	r28
   11814:	df 93       	push	r29
   11816:	16 2f       	mov	r17, r22
   11818:	07 2f       	mov	r16, r23
   1181a:	0e 94 8b 58 	call	0xb116	; 0xb116 <f_open>
   1181e:	ec 01       	movw	r28, r24
   11820:	89 2b       	or	r24, r25
   11822:	89 f0       	breq	.+34     	; 0x11846 <dbf_open+0x38>
   11824:	0f 93       	push	r16
   11826:	1f 93       	push	r17
   11828:	81 ed       	ldi	r24, 0xD1	; 209
   1182a:	9f e0       	ldi	r25, 0x0F	; 15
   1182c:	1f 92       	push	r1
   1182e:	9f 93       	push	r25
   11830:	8f 93       	push	r24
   11832:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11836:	ce 01       	movw	r24, r28
   11838:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
   1183c:	0f 90       	pop	r0
   1183e:	0f 90       	pop	r0
   11840:	0f 90       	pop	r0
   11842:	0f 90       	pop	r0
   11844:	0f 90       	pop	r0
   11846:	ce 01       	movw	r24, r28
   11848:	df 91       	pop	r29
   1184a:	cf 91       	pop	r28
   1184c:	1f 91       	pop	r17
   1184e:	0f 91       	pop	r16
   11850:	08 95       	ret

00011852 <dbf_read>:
   11852:	cf 93       	push	r28
   11854:	df 93       	push	r29
   11856:	0e 94 87 5a 	call	0xb50e	; 0xb50e <f_read>
   1185a:	ec 01       	movw	r28, r24
   1185c:	89 2b       	or	r24, r25
   1185e:	69 f0       	breq	.+26     	; 0x1187a <dbf_read+0x28>
   11860:	84 ec       	ldi	r24, 0xC4	; 196
   11862:	9f e0       	ldi	r25, 0x0F	; 15
   11864:	1f 92       	push	r1
   11866:	9f 93       	push	r25
   11868:	8f 93       	push	r24
   1186a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1186e:	ce 01       	movw	r24, r28
   11870:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
   11874:	0f 90       	pop	r0
   11876:	0f 90       	pop	r0
   11878:	0f 90       	pop	r0
   1187a:	ce 01       	movw	r24, r28
   1187c:	df 91       	pop	r29
   1187e:	cf 91       	pop	r28
   11880:	08 95       	ret

00011882 <dbf_write>:
   11882:	cf 93       	push	r28
   11884:	df 93       	push	r29
   11886:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <f_write>
   1188a:	ec 01       	movw	r28, r24
   1188c:	89 2b       	or	r24, r25
   1188e:	69 f0       	breq	.+26     	; 0x118aa <dbf_write+0x28>
   11890:	86 eb       	ldi	r24, 0xB6	; 182
   11892:	9f e0       	ldi	r25, 0x0F	; 15
   11894:	1f 92       	push	r1
   11896:	9f 93       	push	r25
   11898:	8f 93       	push	r24
   1189a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1189e:	ce 01       	movw	r24, r28
   118a0:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
   118a4:	0f 90       	pop	r0
   118a6:	0f 90       	pop	r0
   118a8:	0f 90       	pop	r0
   118aa:	ce 01       	movw	r24, r28
   118ac:	df 91       	pop	r29
   118ae:	cf 91       	pop	r28
   118b0:	08 95       	ret

000118b2 <dbf_lseek>:
   118b2:	cf 93       	push	r28
   118b4:	df 93       	push	r29
   118b6:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <f_lseek>
   118ba:	ec 01       	movw	r28, r24
   118bc:	89 2b       	or	r24, r25
   118be:	69 f0       	breq	.+26     	; 0x118da <dbf_lseek+0x28>
   118c0:	89 ea       	ldi	r24, 0xA9	; 169
   118c2:	9f e0       	ldi	r25, 0x0F	; 15
   118c4:	1f 92       	push	r1
   118c6:	9f 93       	push	r25
   118c8:	8f 93       	push	r24
   118ca:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   118ce:	ce 01       	movw	r24, r28
   118d0:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
   118d4:	0f 90       	pop	r0
   118d6:	0f 90       	pop	r0
   118d8:	0f 90       	pop	r0
   118da:	ce 01       	movw	r24, r28
   118dc:	df 91       	pop	r29
   118de:	cf 91       	pop	r28
   118e0:	08 95       	ret

000118e2 <dbf_close>:
   118e2:	cf 93       	push	r28
   118e4:	df 93       	push	r29
   118e6:	0e 94 e9 5d 	call	0xbbd2	; 0xbbd2 <f_close>
   118ea:	ec 01       	movw	r28, r24
   118ec:	89 2b       	or	r24, r25
   118ee:	69 f0       	breq	.+26     	; 0x1190a <dbf_close+0x28>
   118f0:	8b e9       	ldi	r24, 0x9B	; 155
   118f2:	9f e0       	ldi	r25, 0x0F	; 15
   118f4:	1f 92       	push	r1
   118f6:	9f 93       	push	r25
   118f8:	8f 93       	push	r24
   118fa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   118fe:	ce 01       	movw	r24, r28
   11900:	0e 94 17 75 	call	0xea2e	; 0xea2e <put_rc>
   11904:	0f 90       	pop	r0
   11906:	0f 90       	pop	r0
   11908:	0f 90       	pop	r0
   1190a:	ce 01       	movw	r24, r28
   1190c:	df 91       	pop	r29
   1190e:	cf 91       	pop	r28
   11910:	08 95       	ret

00011912 <dbf_open_read>:
   11912:	a6 e2       	ldi	r26, 0x26	; 38
   11914:	b2 e0       	ldi	r27, 0x02	; 2
   11916:	ef e8       	ldi	r30, 0x8F	; 143
   11918:	fc e8       	ldi	r31, 0x8C	; 140
   1191a:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   1191e:	4a 01       	movw	r8, r20
   11920:	5b 01       	movw	r10, r22
   11922:	69 01       	movw	r12, r18
   11924:	cb 5d       	subi	r28, 0xDB	; 219
   11926:	dd 4f       	sbci	r29, 0xFD	; 253
   11928:	19 82       	std	Y+1, r1	; 0x01
   1192a:	18 82       	st	Y, r1
   1192c:	c5 52       	subi	r28, 0x25	; 37
   1192e:	d2 40       	sbci	r29, 0x02	; 2
   11930:	43 e0       	ldi	r20, 0x03	; 3
   11932:	bc 01       	movw	r22, r24
   11934:	ce 01       	movw	r24, r28
   11936:	01 96       	adiw	r24, 0x01	; 1
   11938:	6a df       	rcall	.-300    	; 0x1180e <dbf_open>
   1193a:	89 2b       	or	r24, r25
   1193c:	19 f0       	breq	.+6      	; 0x11944 <dbf_open_read+0x32>
   1193e:	81 e1       	ldi	r24, 0x11	; 17
   11940:	90 e0       	ldi	r25, 0x00	; 0
   11942:	2f c0       	rjmp	.+94     	; 0x119a2 <dbf_open_read+0x90>
   11944:	b5 01       	movw	r22, r10
   11946:	a4 01       	movw	r20, r8
   11948:	ce 01       	movw	r24, r28
   1194a:	01 96       	adiw	r24, 0x01	; 1
   1194c:	b2 df       	rcall	.-156    	; 0x118b2 <dbf_lseek>
   1194e:	89 2b       	or	r24, r25
   11950:	59 f0       	breq	.+22     	; 0x11968 <dbf_open_read+0x56>
   11952:	85 e0       	ldi	r24, 0x05	; 5
   11954:	90 e0       	ldi	r25, 0x00	; 0
   11956:	f7 01       	movw	r30, r14
   11958:	91 83       	std	Z+1, r25	; 0x01
   1195a:	80 83       	st	Z, r24
   1195c:	ce 01       	movw	r24, r28
   1195e:	01 96       	adiw	r24, 0x01	; 1
   11960:	c0 df       	rcall	.-128    	; 0x118e2 <dbf_close>
   11962:	8f ef       	ldi	r24, 0xFF	; 255
   11964:	9f ef       	ldi	r25, 0xFF	; 255
   11966:	27 c0       	rjmp	.+78     	; 0x119b6 <dbf_open_read+0xa4>
   11968:	9e 01       	movw	r18, r28
   1196a:	2b 5d       	subi	r18, 0xDB	; 219
   1196c:	3d 4f       	sbci	r19, 0xFD	; 253
   1196e:	a8 01       	movw	r20, r16
   11970:	b6 01       	movw	r22, r12
   11972:	ce 01       	movw	r24, r28
   11974:	01 96       	adiw	r24, 0x01	; 1
   11976:	6d df       	rcall	.-294    	; 0x11852 <dbf_read>
   11978:	89 2b       	or	r24, r25
   1197a:	49 f4       	brne	.+18     	; 0x1198e <dbf_open_read+0x7c>
   1197c:	cb 5d       	subi	r28, 0xDB	; 219
   1197e:	dd 4f       	sbci	r29, 0xFD	; 253
   11980:	88 81       	ld	r24, Y
   11982:	99 81       	ldd	r25, Y+1	; 0x01
   11984:	c5 52       	subi	r28, 0x25	; 37
   11986:	d2 40       	sbci	r29, 0x02	; 2
   11988:	08 17       	cp	r16, r24
   1198a:	19 07       	cpc	r17, r25
   1198c:	19 f0       	breq	.+6      	; 0x11994 <dbf_open_read+0x82>
   1198e:	81 e0       	ldi	r24, 0x01	; 1
   11990:	90 e0       	ldi	r25, 0x00	; 0
   11992:	e1 cf       	rjmp	.-62     	; 0x11956 <dbf_open_read+0x44>
   11994:	ce 01       	movw	r24, r28
   11996:	01 96       	adiw	r24, 0x01	; 1
   11998:	a4 df       	rcall	.-184    	; 0x118e2 <dbf_close>
   1199a:	89 2b       	or	r24, r25
   1199c:	31 f0       	breq	.+12     	; 0x119aa <dbf_open_read+0x98>
   1199e:	80 e1       	ldi	r24, 0x10	; 16
   119a0:	90 e0       	ldi	r25, 0x00	; 0
   119a2:	f7 01       	movw	r30, r14
   119a4:	91 83       	std	Z+1, r25	; 0x01
   119a6:	80 83       	st	Z, r24
   119a8:	dc cf       	rjmp	.-72     	; 0x11962 <dbf_open_read+0x50>
   119aa:	cb 5d       	subi	r28, 0xDB	; 219
   119ac:	dd 4f       	sbci	r29, 0xFD	; 253
   119ae:	88 81       	ld	r24, Y
   119b0:	99 81       	ldd	r25, Y+1	; 0x01
   119b2:	c5 52       	subi	r28, 0x25	; 37
   119b4:	d2 40       	sbci	r29, 0x02	; 2
   119b6:	ca 5d       	subi	r28, 0xDA	; 218
   119b8:	dd 4f       	sbci	r29, 0xFD	; 253
   119ba:	ec e0       	ldi	r30, 0x0C	; 12
   119bc:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

000119c0 <dbf_open_write>:
   119c0:	a6 e2       	ldi	r26, 0x26	; 38
   119c2:	b2 e0       	ldi	r27, 0x02	; 2
   119c4:	e6 ee       	ldi	r30, 0xE6	; 230
   119c6:	fc e8       	ldi	r31, 0x8C	; 140
   119c8:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   119cc:	4a 01       	movw	r8, r20
   119ce:	5b 01       	movw	r10, r22
   119d0:	69 01       	movw	r12, r18
   119d2:	cb 5d       	subi	r28, 0xDB	; 219
   119d4:	dd 4f       	sbci	r29, 0xFD	; 253
   119d6:	19 82       	std	Y+1, r1	; 0x01
   119d8:	18 82       	st	Y, r1
   119da:	c5 52       	subi	r28, 0x25	; 37
   119dc:	d2 40       	sbci	r29, 0x02	; 2
   119de:	43 e0       	ldi	r20, 0x03	; 3
   119e0:	bc 01       	movw	r22, r24
   119e2:	ce 01       	movw	r24, r28
   119e4:	01 96       	adiw	r24, 0x01	; 1
   119e6:	13 df       	rcall	.-474    	; 0x1180e <dbf_open>
   119e8:	89 2b       	or	r24, r25
   119ea:	19 f0       	breq	.+6      	; 0x119f2 <dbf_open_write+0x32>
   119ec:	81 e1       	ldi	r24, 0x11	; 17
   119ee:	90 e0       	ldi	r25, 0x00	; 0
   119f0:	2f c0       	rjmp	.+94     	; 0x11a50 <dbf_open_write+0x90>
   119f2:	b5 01       	movw	r22, r10
   119f4:	a4 01       	movw	r20, r8
   119f6:	ce 01       	movw	r24, r28
   119f8:	01 96       	adiw	r24, 0x01	; 1
   119fa:	5b df       	rcall	.-330    	; 0x118b2 <dbf_lseek>
   119fc:	89 2b       	or	r24, r25
   119fe:	59 f0       	breq	.+22     	; 0x11a16 <dbf_open_write+0x56>
   11a00:	85 e0       	ldi	r24, 0x05	; 5
   11a02:	90 e0       	ldi	r25, 0x00	; 0
   11a04:	f7 01       	movw	r30, r14
   11a06:	91 83       	std	Z+1, r25	; 0x01
   11a08:	80 83       	st	Z, r24
   11a0a:	ce 01       	movw	r24, r28
   11a0c:	01 96       	adiw	r24, 0x01	; 1
   11a0e:	69 df       	rcall	.-302    	; 0x118e2 <dbf_close>
   11a10:	8f ef       	ldi	r24, 0xFF	; 255
   11a12:	9f ef       	ldi	r25, 0xFF	; 255
   11a14:	27 c0       	rjmp	.+78     	; 0x11a64 <dbf_open_write+0xa4>
   11a16:	9e 01       	movw	r18, r28
   11a18:	2b 5d       	subi	r18, 0xDB	; 219
   11a1a:	3d 4f       	sbci	r19, 0xFD	; 253
   11a1c:	a8 01       	movw	r20, r16
   11a1e:	b6 01       	movw	r22, r12
   11a20:	ce 01       	movw	r24, r28
   11a22:	01 96       	adiw	r24, 0x01	; 1
   11a24:	2e df       	rcall	.-420    	; 0x11882 <dbf_write>
   11a26:	89 2b       	or	r24, r25
   11a28:	49 f4       	brne	.+18     	; 0x11a3c <dbf_open_write+0x7c>
   11a2a:	cb 5d       	subi	r28, 0xDB	; 219
   11a2c:	dd 4f       	sbci	r29, 0xFD	; 253
   11a2e:	88 81       	ld	r24, Y
   11a30:	99 81       	ldd	r25, Y+1	; 0x01
   11a32:	c5 52       	subi	r28, 0x25	; 37
   11a34:	d2 40       	sbci	r29, 0x02	; 2
   11a36:	08 17       	cp	r16, r24
   11a38:	19 07       	cpc	r17, r25
   11a3a:	19 f0       	breq	.+6      	; 0x11a42 <dbf_open_write+0x82>
   11a3c:	81 e0       	ldi	r24, 0x01	; 1
   11a3e:	90 e0       	ldi	r25, 0x00	; 0
   11a40:	e1 cf       	rjmp	.-62     	; 0x11a04 <dbf_open_write+0x44>
   11a42:	ce 01       	movw	r24, r28
   11a44:	01 96       	adiw	r24, 0x01	; 1
   11a46:	4d df       	rcall	.-358    	; 0x118e2 <dbf_close>
   11a48:	89 2b       	or	r24, r25
   11a4a:	31 f0       	breq	.+12     	; 0x11a58 <dbf_open_write+0x98>
   11a4c:	80 e1       	ldi	r24, 0x10	; 16
   11a4e:	90 e0       	ldi	r25, 0x00	; 0
   11a50:	f7 01       	movw	r30, r14
   11a52:	91 83       	std	Z+1, r25	; 0x01
   11a54:	80 83       	st	Z, r24
   11a56:	dc cf       	rjmp	.-72     	; 0x11a10 <dbf_open_write+0x50>
   11a58:	cb 5d       	subi	r28, 0xDB	; 219
   11a5a:	dd 4f       	sbci	r29, 0xFD	; 253
   11a5c:	88 81       	ld	r24, Y
   11a5e:	99 81       	ldd	r25, Y+1	; 0x01
   11a60:	c5 52       	subi	r28, 0x25	; 37
   11a62:	d2 40       	sbci	r29, 0x02	; 2
   11a64:	ca 5d       	subi	r28, 0xDA	; 218
   11a66:	dd 4f       	sbci	r29, 0xFD	; 253
   11a68:	ec e0       	ldi	r30, 0x0C	; 12
   11a6a:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

00011a6e <gpib_timer_elapsed_begin>:
   11a6e:	0c 94 d0 35 	jmp	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
   11a72:	08 95       	ret

00011a74 <gpib_timer_reset>:
   11a74:	f8 94       	cli
   11a76:	e2 ee       	ldi	r30, 0xE2	; 226
   11a78:	fc e1       	ldi	r31, 0x1C	; 28
   11a7a:	10 82       	st	Z, r1
   11a7c:	11 82       	std	Z+1, r1	; 0x01
   11a7e:	12 82       	std	Z+2, r1	; 0x02
   11a80:	13 82       	std	Z+3, r1	; 0x03
   11a82:	14 82       	std	Z+4, r1	; 0x04
   11a84:	15 82       	std	Z+5, r1	; 0x05
   11a86:	16 82       	std	Z+6, r1	; 0x06
   11a88:	17 82       	std	Z+7, r1	; 0x07
   11a8a:	81 e0       	ldi	r24, 0x01	; 1
   11a8c:	80 87       	std	Z+8, r24	; 0x08
   11a8e:	78 94       	sei
   11a90:	08 95       	ret

00011a92 <gpib_timer_elapsed_end>:
   11a92:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <clock_elapsed_end>
   11a96:	08 95       	ret

00011a98 <gpib_timer_task>:
   11a98:	f8 94       	cli
   11a9a:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <gpib_timer+0x4>
   11a9e:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <gpib_timer+0x5>
   11aa2:	a0 91 e8 1c 	lds	r26, 0x1CE8	; 0x801ce8 <gpib_timer+0x6>
   11aa6:	b0 91 e9 1c 	lds	r27, 0x1CE9	; 0x801ce9 <gpib_timer+0x7>
   11aaa:	89 2b       	or	r24, r25
   11aac:	8a 2b       	or	r24, r26
   11aae:	8b 2b       	or	r24, r27
   11ab0:	a1 f0       	breq	.+40     	; 0x11ada <gpib_timer_task+0x42>
   11ab2:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <gpib_timer+0x4>
   11ab6:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <gpib_timer+0x5>
   11aba:	a0 91 e8 1c 	lds	r26, 0x1CE8	; 0x801ce8 <gpib_timer+0x6>
   11abe:	b0 91 e9 1c 	lds	r27, 0x1CE9	; 0x801ce9 <gpib_timer+0x7>
   11ac2:	01 97       	sbiw	r24, 0x01	; 1
   11ac4:	a1 09       	sbc	r26, r1
   11ac6:	b1 09       	sbc	r27, r1
   11ac8:	80 93 e6 1c 	sts	0x1CE6, r24	; 0x801ce6 <gpib_timer+0x4>
   11acc:	90 93 e7 1c 	sts	0x1CE7, r25	; 0x801ce7 <gpib_timer+0x5>
   11ad0:	a0 93 e8 1c 	sts	0x1CE8, r26	; 0x801ce8 <gpib_timer+0x6>
   11ad4:	b0 93 e9 1c 	sts	0x1CE9, r27	; 0x801ce9 <gpib_timer+0x7>
   11ad8:	03 c0       	rjmp	.+6      	; 0x11ae0 <gpib_timer_task+0x48>
   11ada:	81 e0       	ldi	r24, 0x01	; 1
   11adc:	80 93 ea 1c 	sts	0x1CEA, r24	; 0x801cea <gpib_timer+0x8>
   11ae0:	78 94       	sei
   11ae2:	08 95       	ret

00011ae4 <gpib_timeout_set>:
   11ae4:	f8 94       	cli
   11ae6:	e2 ee       	ldi	r30, 0xE2	; 226
   11ae8:	fc e1       	ldi	r31, 0x1C	; 28
   11aea:	64 83       	std	Z+4, r22	; 0x04
   11aec:	75 83       	std	Z+5, r23	; 0x05
   11aee:	86 83       	std	Z+6, r24	; 0x06
   11af0:	97 83       	std	Z+7, r25	; 0x07
   11af2:	10 86       	std	Z+8, r1	; 0x08
   11af4:	78 94       	sei
   11af6:	08 95       	ret

00011af8 <gpib_bus_read_init>:
   11af8:	54 98       	cbi	0x0a, 4	; 10
   11afa:	57 98       	cbi	0x0a, 7	; 10
   11afc:	45 98       	cbi	0x08, 5	; 8
   11afe:	3d 9a       	sbi	0x07, 5	; 7
   11b00:	11 b8       	out	0x01, r1	; 1
   11b02:	2f ef       	ldi	r18, 0xFF	; 255
   11b04:	22 b9       	out	0x02, r18	; 2
   11b06:	43 98       	cbi	0x08, 3	; 8
   11b08:	3b 9a       	sbi	0x07, 3	; 7
   11b0a:	21 98       	cbi	0x04, 1	; 4
   11b0c:	56 98       	cbi	0x0a, 6	; 10
   11b0e:	20 98       	cbi	0x04, 0	; 4
   11b10:	55 98       	cbi	0x0a, 5	; 10
   11b12:	89 2b       	or	r24, r25
   11b14:	39 f4       	brne	.+14     	; 0x11b24 <gpib_bus_read_init+0x2c>
   11b16:	52 98       	cbi	0x0a, 2	; 10
   11b18:	53 98       	cbi	0x0a, 3	; 10
   11b1a:	8d e0       	ldi	r24, 0x0D	; 13
   11b1c:	8a 95       	dec	r24
   11b1e:	f1 f7       	brne	.-4      	; 0x11b1c <gpib_bus_read_init+0x24>
   11b20:	00 00       	nop
   11b22:	04 c0       	rjmp	.+8      	; 0x11b2c <gpib_bus_read_init+0x34>
   11b24:	5b 98       	cbi	0x0b, 3	; 11
   11b26:	53 9a       	sbi	0x0a, 3	; 10
   11b28:	5a 98       	cbi	0x0b, 2	; 11
   11b2a:	52 9a       	sbi	0x0a, 2	; 10
   11b2c:	42 98       	cbi	0x08, 2	; 8
   11b2e:	3a 9a       	sbi	0x07, 2	; 7
   11b30:	44 9a       	sbi	0x08, 4	; 8
   11b32:	3c 9a       	sbi	0x07, 4	; 7
   11b34:	8d e0       	ldi	r24, 0x0D	; 13
   11b36:	8a 95       	dec	r24
   11b38:	f1 f7       	brne	.-4      	; 0x11b36 <gpib_bus_read_init+0x3e>
   11b3a:	00 00       	nop
   11b3c:	08 95       	ret

00011b3e <gpib_bus_init>:
   11b3e:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
   11b42:	11 b8       	out	0x01, r1	; 1
   11b44:	8f ef       	ldi	r24, 0xFF	; 255
   11b46:	82 b9       	out	0x02, r24	; 2
   11b48:	21 98       	cbi	0x04, 1	; 4
   11b4a:	52 98       	cbi	0x0a, 2	; 10
   11b4c:	53 98       	cbi	0x0a, 3	; 10
   11b4e:	54 98       	cbi	0x0a, 4	; 10
   11b50:	57 98       	cbi	0x0a, 7	; 10
   11b52:	56 98       	cbi	0x0a, 6	; 10
   11b54:	20 98       	cbi	0x04, 0	; 4
   11b56:	55 98       	cbi	0x0a, 5	; 10
   11b58:	45 98       	cbi	0x08, 5	; 8
   11b5a:	3d 9a       	sbi	0x07, 5	; 7
   11b5c:	43 98       	cbi	0x08, 3	; 8
   11b5e:	3b 9a       	sbi	0x07, 3	; 7
   11b60:	42 98       	cbi	0x08, 2	; 8
   11b62:	3a 9a       	sbi	0x07, 2	; 7
   11b64:	44 9a       	sbi	0x08, 4	; 8
   11b66:	3c 9a       	sbi	0x07, 4	; 7
   11b68:	8d e0       	ldi	r24, 0x0D	; 13
   11b6a:	8a 95       	dec	r24
   11b6c:	f1 f7       	brne	.-4      	; 0x11b6a <gpib_bus_init+0x2c>
   11b6e:	00 00       	nop
   11b70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b74:	82 ff       	sbrs	r24, 2
   11b76:	0a c0       	rjmp	.+20     	; 0x11b8c <gpib_bus_init+0x4e>
   11b78:	8e e9       	ldi	r24, 0x9E	; 158
   11b7a:	92 e1       	ldi	r25, 0x12	; 18
   11b7c:	1f 92       	push	r1
   11b7e:	9f 93       	push	r25
   11b80:	8f 93       	push	r24
   11b82:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11b86:	0f 90       	pop	r0
   11b88:	0f 90       	pop	r0
   11b8a:	0f 90       	pop	r0
   11b8c:	08 95       	ret

00011b8e <gpib_state_init>:
   11b8e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b92:	82 ff       	sbrs	r24, 2
   11b94:	0a c0       	rjmp	.+20     	; 0x11baa <gpib_state_init+0x1c>
   11b96:	8b e8       	ldi	r24, 0x8B	; 139
   11b98:	92 e1       	ldi	r25, 0x12	; 18
   11b9a:	1f 92       	push	r1
   11b9c:	9f 93       	push	r25
   11b9e:	8f 93       	push	r24
   11ba0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11ba4:	0f 90       	pop	r0
   11ba6:	0f 90       	pop	r0
   11ba8:	0f 90       	pop	r0
   11baa:	05 de       	rcall	.-1014   	; 0x117b6 <ppr_init>
   11bac:	0e 94 f5 97 	call	0x12fea	; 0x12fea <listen_cleanup>
   11bb0:	0e 94 06 99 	call	0x1320c	; 0x1320c <talk_cleanup>
   11bb4:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <spoll>
   11bb8:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking>
   11bbc:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <talking_last>
   11bc0:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <listening>
   11bc4:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <listening_last>
   11bc8:	10 92 ec 1c 	sts	0x1CEC, r1	; 0x801cec <lastcmd+0x1>
   11bcc:	10 92 eb 1c 	sts	0x1CEB, r1	; 0x801ceb <lastcmd>
   11bd0:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <current+0x1>
   11bd4:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <current>
   11bd8:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
   11bdc:	08 95       	ret

00011bde <gpib_enable_PPR>:
   11bde:	cf 93       	push	r28
   11be0:	df 93       	push	r29
   11be2:	ec 01       	movw	r28, r24
   11be4:	88 30       	cpi	r24, 0x08	; 8
   11be6:	91 05       	cpc	r25, r1
   11be8:	78 f0       	brcs	.+30     	; 0x11c08 <gpib_enable_PPR+0x2a>
   11bea:	df 93       	push	r29
   11bec:	cf 93       	push	r28
   11bee:	85 e6       	ldi	r24, 0x65	; 101
   11bf0:	92 e1       	ldi	r25, 0x12	; 18
   11bf2:	1f 92       	push	r1
   11bf4:	9f 93       	push	r25
   11bf6:	8f 93       	push	r24
   11bf8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11bfc:	0f 90       	pop	r0
   11bfe:	0f 90       	pop	r0
   11c00:	0f 90       	pop	r0
   11c02:	0f 90       	pop	r0
   11c04:	0f 90       	pop	r0
   11c06:	19 c0       	rjmp	.+50     	; 0x11c3a <gpib_enable_PPR+0x5c>
   11c08:	e7 dd       	rcall	.-1074   	; 0x117d8 <ppr_bit_set>
   11c0a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c0e:	81 ff       	sbrs	r24, 1
   11c10:	14 c0       	rjmp	.+40     	; 0x11c3a <gpib_enable_PPR+0x5c>
   11c12:	cd dd       	rcall	.-1126   	; 0x117ae <ppr_reg>
   11c14:	1f 92       	push	r1
   11c16:	8f 93       	push	r24
   11c18:	df 93       	push	r29
   11c1a:	cf 93       	push	r28
   11c1c:	8a e4       	ldi	r24, 0x4A	; 74
   11c1e:	92 e1       	ldi	r25, 0x12	; 18
   11c20:	1f 92       	push	r1
   11c22:	9f 93       	push	r25
   11c24:	8f 93       	push	r24
   11c26:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11c2a:	8d b7       	in	r24, 0x3d	; 61
   11c2c:	9e b7       	in	r25, 0x3e	; 62
   11c2e:	07 96       	adiw	r24, 0x07	; 7
   11c30:	0f b6       	in	r0, 0x3f	; 63
   11c32:	f8 94       	cli
   11c34:	9e bf       	out	0x3e, r25	; 62
   11c36:	0f be       	out	0x3f, r0	; 63
   11c38:	8d bf       	out	0x3d, r24	; 61
   11c3a:	df 91       	pop	r29
   11c3c:	cf 91       	pop	r28
   11c3e:	08 95       	ret

00011c40 <gpib_disable_PPR>:
   11c40:	cf 93       	push	r28
   11c42:	df 93       	push	r29
   11c44:	ec 01       	movw	r28, r24
   11c46:	88 30       	cpi	r24, 0x08	; 8
   11c48:	91 05       	cpc	r25, r1
   11c4a:	78 f0       	brcs	.+30     	; 0x11c6a <gpib_disable_PPR+0x2a>
   11c4c:	df 93       	push	r29
   11c4e:	cf 93       	push	r28
   11c50:	83 e2       	ldi	r24, 0x23	; 35
   11c52:	92 e1       	ldi	r25, 0x12	; 18
   11c54:	1f 92       	push	r1
   11c56:	9f 93       	push	r25
   11c58:	8f 93       	push	r24
   11c5a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11c5e:	0f 90       	pop	r0
   11c60:	0f 90       	pop	r0
   11c62:	0f 90       	pop	r0
   11c64:	0f 90       	pop	r0
   11c66:	0f 90       	pop	r0
   11c68:	19 c0       	rjmp	.+50     	; 0x11c9c <gpib_disable_PPR+0x5c>
   11c6a:	c3 dd       	rcall	.-1146   	; 0x117f2 <ppr_bit_clr>
   11c6c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c70:	81 ff       	sbrs	r24, 1
   11c72:	14 c0       	rjmp	.+40     	; 0x11c9c <gpib_disable_PPR+0x5c>
   11c74:	9c dd       	rcall	.-1224   	; 0x117ae <ppr_reg>
   11c76:	1f 92       	push	r1
   11c78:	8f 93       	push	r24
   11c7a:	df 93       	push	r29
   11c7c:	cf 93       	push	r28
   11c7e:	88 e0       	ldi	r24, 0x08	; 8
   11c80:	92 e1       	ldi	r25, 0x12	; 18
   11c82:	1f 92       	push	r1
   11c84:	9f 93       	push	r25
   11c86:	8f 93       	push	r24
   11c88:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11c8c:	8d b7       	in	r24, 0x3d	; 61
   11c8e:	9e b7       	in	r25, 0x3e	; 62
   11c90:	07 96       	adiw	r24, 0x07	; 7
   11c92:	0f b6       	in	r0, 0x3f	; 63
   11c94:	f8 94       	cli
   11c96:	9e bf       	out	0x3e, r25	; 62
   11c98:	0f be       	out	0x3f, r0	; 63
   11c9a:	8d bf       	out	0x3d, r24	; 61
   11c9c:	df 91       	pop	r29
   11c9e:	cf 91       	pop	r28
   11ca0:	08 95       	ret

00011ca2 <gpib_assert_ifc>:
   11ca2:	5c 98       	cbi	0x0b, 4	; 11
   11ca4:	54 9a       	sbi	0x0a, 4	; 10
   11ca6:	6a ef       	ldi	r22, 0xFA	; 250
   11ca8:	70 e0       	ldi	r23, 0x00	; 0
   11caa:	80 e0       	ldi	r24, 0x00	; 0
   11cac:	90 e0       	ldi	r25, 0x00	; 0
   11cae:	0e 94 3b 2a 	call	0x5476	; 0x5476 <delayus>
   11cb2:	54 98       	cbi	0x0a, 4	; 10
   11cb4:	6a ef       	ldi	r22, 0xFA	; 250
   11cb6:	70 e0       	ldi	r23, 0x00	; 0
   11cb8:	80 e0       	ldi	r24, 0x00	; 0
   11cba:	90 e0       	ldi	r25, 0x00	; 0
   11cbc:	0e 94 3b 2a 	call	0x5476	; 0x5476 <delayus>
   11cc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11cc4:	82 ff       	sbrs	r24, 2
   11cc6:	0a c0       	rjmp	.+20     	; 0x11cdc <gpib_assert_ifc+0x3a>
   11cc8:	89 ed       	ldi	r24, 0xD9	; 217
   11cca:	91 e1       	ldi	r25, 0x11	; 17
   11ccc:	1f 92       	push	r1
   11cce:	9f 93       	push	r25
   11cd0:	8f 93       	push	r24
   11cd2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11cd6:	0f 90       	pop	r0
   11cd8:	0f 90       	pop	r0
   11cda:	0f 90       	pop	r0
   11cdc:	08 95       	ret

00011cde <gpib_unread>:
   11cde:	cf 93       	push	r28
   11ce0:	df 93       	push	r29
   11ce2:	ec 01       	movw	r28, r24
   11ce4:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <gpib_unread_f>
   11ce8:	81 11       	cpse	r24, r1
   11cea:	08 c0       	rjmp	.+16     	; 0x11cfc <gpib_unread+0x1e>
   11cec:	d0 93 f6 1e 	sts	0x1EF6, r29	; 0x801ef6 <gpib_unread_data+0x1>
   11cf0:	c0 93 f5 1e 	sts	0x1EF5, r28	; 0x801ef5 <gpib_unread_data>
   11cf4:	81 e0       	ldi	r24, 0x01	; 1
   11cf6:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <gpib_unread_f>
   11cfa:	12 c0       	rjmp	.+36     	; 0x11d20 <gpib_unread+0x42>
   11cfc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d00:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d04:	85 70       	andi	r24, 0x05	; 5
   11d06:	99 27       	eor	r25, r25
   11d08:	89 2b       	or	r24, r25
   11d0a:	51 f0       	breq	.+20     	; 0x11d20 <gpib_unread+0x42>
   11d0c:	86 e9       	ldi	r24, 0x96	; 150
   11d0e:	91 e1       	ldi	r25, 0x11	; 17
   11d10:	1f 92       	push	r1
   11d12:	9f 93       	push	r25
   11d14:	8f 93       	push	r24
   11d16:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11d1a:	0f 90       	pop	r0
   11d1c:	0f 90       	pop	r0
   11d1e:	0f 90       	pop	r0
   11d20:	ce 01       	movw	r24, r28
   11d22:	df 91       	pop	r29
   11d24:	cf 91       	pop	r28
   11d26:	08 95       	ret

00011d28 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11d28:	11 b8       	out	0x01, r1	; 1
   11d2a:	80 b1       	in	r24, 0x00	; 0
   11d2c:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   11d2e:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   11d30:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11d32:	08 95       	ret

00011d34 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11d34:	4e 99       	sbic	0x09, 6	; 9
   11d36:	03 c0       	rjmp	.+6      	; 0x11d3e <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11d38:	80 e0       	ldi	r24, 0x00	; 0
   11d3a:	94 e0       	ldi	r25, 0x04	; 4
   11d3c:	02 c0       	rjmp	.+4      	; 0x11d42 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   11d3e:	80 e0       	ldi	r24, 0x00	; 0
   11d40:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11d42:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11d44:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11d46:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11d48:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11d4a:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11d4c:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   11d4e:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11d50:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11d52:	08 95       	ret

00011d54 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11d54:	19 99       	sbic	0x03, 1	; 3
   11d56:	03 c0       	rjmp	.+6      	; 0x11d5e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11d58:	80 e0       	ldi	r24, 0x00	; 0
   11d5a:	90 e2       	ldi	r25, 0x20	; 32
   11d5c:	02 c0       	rjmp	.+4      	; 0x11d62 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   11d5e:	80 e0       	ldi	r24, 0x00	; 0
   11d60:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11d62:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11d64:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11d66:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11d68:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11d6a:	08 95       	ret

00011d6c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11d6c:	2f 92       	push	r2
   11d6e:	3f 92       	push	r3
   11d70:	4f 92       	push	r4
   11d72:	6f 92       	push	r6
   11d74:	7f 92       	push	r7
   11d76:	8f 92       	push	r8
   11d78:	cf 92       	push	r12
   11d7a:	df 92       	push	r13
   11d7c:	ef 92       	push	r14
   11d7e:	1f 93       	push	r17
   11d80:	cf 93       	push	r28
   11d82:	df 93       	push	r29
   11d84:	cd b7       	in	r28, 0x3d	; 61
   11d86:	de b7       	in	r29, 0x3e	; 62
   11d88:	28 97       	sbiw	r28, 0x08	; 8
   11d8a:	0f b6       	in	r0, 0x3f	; 63
   11d8c:	f8 94       	cli
   11d8e:	de bf       	out	0x3e, r29	; 62
   11d90:	0f be       	out	0x3f, r0	; 63
   11d92:	cd bf       	out	0x3d, r28	; 61
   11d94:	98 87       	std	Y+8, r25	; 0x08
   11d96:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11d98:	80 e0       	ldi	r24, 0x00	; 0
   11d9a:	90 e0       	ldi	r25, 0x00	; 0
   11d9c:	ad de       	rcall	.-678    	; 0x11af8 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11d9e:	64 ef       	ldi	r22, 0xF4	; 244
   11da0:	71 e0       	ldi	r23, 0x01	; 1
   11da2:	80 e0       	ldi	r24, 0x00	; 0
   11da4:	90 e0       	ldi	r25, 0x00	; 0
   11da6:	9e de       	rcall	.-708    	; 0x11ae4 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11da8:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11daa:	84 e0       	ldi	r24, 0x04	; 4
   11dac:	91 e1       	ldi	r25, 0x11	; 17
   11dae:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11db0:	8e e1       	ldi	r24, 0x1E	; 30
   11db2:	91 e1       	ldi	r25, 0x11	; 17
   11db4:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11db6:	89 e3       	ldi	r24, 0x39	; 57
   11db8:	91 e1       	ldi	r25, 0x11	; 17
   11dba:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11dbc:	84 e5       	ldi	r24, 0x54	; 84
   11dbe:	91 e1       	ldi	r25, 0x11	; 17
   11dc0:	9c 01       	movw	r18, r24
   11dc2:	40 e0       	ldi	r20, 0x00	; 0
   11dc4:	29 83       	std	Y+1, r18	; 0x01
   11dc6:	3a 83       	std	Y+2, r19	; 0x02
   11dc8:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11dca:	8c e7       	ldi	r24, 0x7C	; 124
   11dcc:	91 e1       	ldi	r25, 0x11	; 17
   11dce:	9c 01       	movw	r18, r24
   11dd0:	40 e0       	ldi	r20, 0x00	; 0
   11dd2:	2c 83       	std	Y+4, r18	; 0x04
   11dd4:	3d 83       	std	Y+5, r19	; 0x05
   11dd6:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11dd8:	80 e0       	ldi	r24, 0x00	; 0
   11dda:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   11dde:	89 2b       	or	r24, r25
   11de0:	09 f0       	breq	.+2      	; 0x11de4 <gpib_write_byte+0x78>
   11de2:	17 c1       	rjmp	.+558    	; 0x12012 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11de4:	4c 99       	sbic	0x09, 4	; 9
   11de6:	07 c0       	rjmp	.+14     	; 0x11df6 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11de8:	8f 81       	ldd	r24, Y+7	; 0x07
   11dea:	98 85       	ldd	r25, Y+8	; 0x08
   11dec:	90 61       	ori	r25, 0x10	; 16
   11dee:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11df0:	8f 83       	std	Y+7, r24	; 0x07
   11df2:	a5 de       	rcall	.-694    	; 0x11b3e <gpib_bus_init>
            break;
   11df4:	0e c1       	rjmp	.+540    	; 0x12012 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11df6:	81 2f       	mov	r24, r17
   11df8:	90 e0       	ldi	r25, 0x00	; 0
   11dfa:	8a 30       	cpi	r24, 0x0A	; 10
   11dfc:	91 05       	cpc	r25, r1
   11dfe:	08 f0       	brcs	.+2      	; 0x11e02 <gpib_write_byte+0x96>
   11e00:	fe c0       	rjmp	.+508    	; 0x11ffe <gpib_write_byte+0x292>
   11e02:	fc 01       	movw	r30, r24
   11e04:	e3 54       	subi	r30, 0x43	; 67
   11e06:	ff 4f       	sbci	r31, 0xFF	; 255
   11e08:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11e0c:	19 9b       	sbis	0x03, 1	; 3
   11e0e:	12 c0       	rjmp	.+36     	; 0x11e34 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11e10:	42 9a       	sbi	0x08, 2	; 8
   11e12:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11e14:	44 98       	cbi	0x08, 4	; 8
   11e16:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11e18:	2f 81       	ldd	r18, Y+7	; 0x07
   11e1a:	38 85       	ldd	r19, Y+8	; 0x08
   11e1c:	32 ff       	sbrs	r19, 2
   11e1e:	03 c0       	rjmp	.+6      	; 0x11e26 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11e20:	5e 98       	cbi	0x0b, 6	; 11
   11e22:	56 9a       	sbi	0x0a, 6	; 10
   11e24:	01 c0       	rjmp	.+2      	; 0x11e28 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11e26:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11e28:	64 ef       	ldi	r22, 0xF4	; 244
   11e2a:	71 e0       	ldi	r23, 0x01	; 1
   11e2c:	80 e0       	ldi	r24, 0x00	; 0
   11e2e:	90 e0       	ldi	r25, 0x00	; 0
   11e30:	59 de       	rcall	.-846    	; 0x11ae4 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11e32:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11e34:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11e38:	88 23       	and	r24, r24
   11e3a:	71 f2       	breq	.-100    	; 0x11dd8 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11e3c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e40:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e44:	85 70       	andi	r24, 0x05	; 5
   11e46:	99 27       	eor	r25, r25
   11e48:	89 2b       	or	r24, r25
   11e4a:	39 f1       	breq	.+78     	; 0x11e9a <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11e4c:	1f 92       	push	r1
   11e4e:	3d 81       	ldd	r19, Y+5	; 0x05
   11e50:	3f 93       	push	r19
   11e52:	4c 81       	ldd	r20, Y+4	; 0x04
   11e54:	4f 93       	push	r20
   11e56:	1c c0       	rjmp	.+56     	; 0x11e90 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11e58:	4a 9b       	sbis	0x09, 2	; 9
   11e5a:	08 c0       	rjmp	.+16     	; 0x11e6c <gpib_write_byte+0x100>
   11e5c:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11e5e:	06 c0       	rjmp	.+12     	; 0x11e6c <gpib_write_byte+0x100>
   11e60:	64 ef       	ldi	r22, 0xF4	; 244
   11e62:	71 e0       	ldi	r23, 0x01	; 1
   11e64:	80 e0       	ldi	r24, 0x00	; 0
   11e66:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11e68:	3d de       	rcall	.-902    	; 0x11ae4 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11e6a:	12 e0       	ldi	r17, 0x02	; 2
   11e6c:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11e70:	88 23       	and	r24, r24
   11e72:	09 f4       	brne	.+2      	; 0x11e76 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11e74:	b1 cf       	rjmp	.-158    	; 0x11dd8 <gpib_write_byte+0x6c>
   11e76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e7a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e7e:	85 70       	andi	r24, 0x05	; 5
   11e80:	99 27       	eor	r25, r25
   11e82:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11e84:	51 f0       	breq	.+20     	; 0x11e9a <gpib_write_byte+0x12e>
   11e86:	1f 92       	push	r1
   11e88:	9a 81       	ldd	r25, Y+2	; 0x02
   11e8a:	9f 93       	push	r25
   11e8c:	29 81       	ldd	r18, Y+1	; 0x01
   11e8e:	2f 93       	push	r18
   11e90:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11e94:	0f 90       	pop	r0
   11e96:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11e98:	0f 90       	pop	r0
   11e9a:	8f 81       	ldd	r24, Y+7	; 0x07
   11e9c:	98 85       	ldd	r25, Y+8	; 0x08
   11e9e:	90 64       	ori	r25, 0x40	; 64
   11ea0:	98 87       	std	Y+8, r25	; 0x08
   11ea2:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11ea4:	b4 c0       	rjmp	.+360    	; 0x1200e <gpib_write_byte+0x2a2>
   11ea6:	2f 81       	ldd	r18, Y+7	; 0x07
   11ea8:	38 85       	ldd	r19, Y+8	; 0x08
   11eaa:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11eac:	03 c0       	rjmp	.+6      	; 0x11eb4 <gpib_write_byte+0x148>
   11eae:	28 98       	cbi	0x05, 0	; 5
   11eb0:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11eb2:	01 c0       	rjmp	.+2      	; 0x11eb6 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11eb4:	20 98       	cbi	0x04, 0	; 4
   11eb6:	8f ef       	ldi	r24, 0xFF	; 255
   11eb8:	81 b9       	out	0x01, r24	; 1
   11eba:	8f 81       	ldd	r24, Y+7	; 0x07
   11ebc:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11ebe:	82 b9       	out	0x02, r24	; 2
   11ec0:	43 9a       	sbi	0x08, 3	; 8
   11ec2:	3b 9a       	sbi	0x07, 3	; 7
   11ec4:	3d e0       	ldi	r19, 0x0D	; 13
   11ec6:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11ec8:	f1 f7       	brne	.-4      	; 0x11ec6 <gpib_write_byte+0x15a>
   11eca:	00 00       	nop
   11ecc:	64 ef       	ldi	r22, 0xF4	; 244
   11ece:	71 e0       	ldi	r23, 0x01	; 1
   11ed0:	80 e0       	ldi	r24, 0x00	; 0
   11ed2:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11ed4:	07 de       	rcall	.-1010   	; 0x11ae4 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11ed6:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11ed8:	7f cf       	rjmp	.-258    	; 0x11dd8 <gpib_write_byte+0x6c>
   11eda:	29 98       	cbi	0x05, 1	; 5
   11edc:	21 9a       	sbi	0x04, 1	; 4
   11ede:	64 ef       	ldi	r22, 0xF4	; 244
   11ee0:	71 e0       	ldi	r23, 0x01	; 1
   11ee2:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11ee4:	90 e0       	ldi	r25, 0x00	; 0
   11ee6:	fe dd       	rcall	.-1028   	; 0x11ae4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11ee8:	14 e0       	ldi	r17, 0x04	; 4
   11eea:	76 cf       	rjmp	.-276    	; 0x11dd8 <gpib_write_byte+0x6c>
   11eec:	4a 99       	sbic	0x09, 2	; 9
   11eee:	07 c0       	rjmp	.+14     	; 0x11efe <gpib_write_byte+0x192>
   11ef0:	64 ef       	ldi	r22, 0xF4	; 244
   11ef2:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11ef4:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11ef6:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11ef8:	f5 dd       	rcall	.-1046   	; 0x11ae4 <gpib_timeout_set>
   11efa:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11efc:	6d cf       	rjmp	.-294    	; 0x11dd8 <gpib_write_byte+0x6c>
   11efe:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11f02:	88 23       	and	r24, r24
   11f04:	09 f4       	brne	.+2      	; 0x11f08 <gpib_write_byte+0x19c>
   11f06:	68 cf       	rjmp	.-304    	; 0x11dd8 <gpib_write_byte+0x6c>
   11f08:	8f 81       	ldd	r24, Y+7	; 0x07
   11f0a:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11f0c:	90 64       	ori	r25, 0x40	; 64
   11f0e:	98 87       	std	Y+8, r25	; 0x08
   11f10:	8f 83       	std	Y+7, r24	; 0x07
   11f12:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f16:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f1a:	85 70       	andi	r24, 0x05	; 5
   11f1c:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11f1e:	89 2b       	or	r24, r25
   11f20:	09 f4       	brne	.+2      	; 0x11f24 <gpib_write_byte+0x1b8>
   11f22:	75 c0       	rjmp	.+234    	; 0x1200e <gpib_write_byte+0x2a2>
   11f24:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11f26:	3f 92       	push	r3
   11f28:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11f2a:	3f c0       	rjmp	.+126    	; 0x11faa <gpib_write_byte+0x23e>
   11f2c:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11f2e:	6b c0       	rjmp	.+214    	; 0x12006 <gpib_write_byte+0x29a>
   11f30:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11f34:	88 23       	and	r24, r24
   11f36:	09 f4       	brne	.+2      	; 0x11f3a <gpib_write_byte+0x1ce>
   11f38:	4f cf       	rjmp	.-354    	; 0x11dd8 <gpib_write_byte+0x6c>
   11f3a:	2f 81       	ldd	r18, Y+7	; 0x07
   11f3c:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11f3e:	30 64       	ori	r19, 0x40	; 64
   11f40:	38 87       	std	Y+8, r19	; 0x08
   11f42:	2f 83       	std	Y+7, r18	; 0x07
   11f44:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f48:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f4c:	85 70       	andi	r24, 0x05	; 5
   11f4e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11f50:	89 2b       	or	r24, r25
   11f52:	09 f4       	brne	.+2      	; 0x11f56 <gpib_write_byte+0x1ea>
   11f54:	5c c0       	rjmp	.+184    	; 0x1200e <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11f56:	1f 92       	push	r1
   11f58:	7f 92       	push	r7
   11f5a:	6f 92       	push	r6
   11f5c:	26 c0       	rjmp	.+76     	; 0x11faa <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   11f5e:	21 98       	cbi	0x04, 1	; 4
   11f60:	3d e0       	ldi	r19, 0x0D	; 13
   11f62:	3a 95       	dec	r19
   11f64:	f1 f7       	brne	.-4      	; 0x11f62 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11f66:	00 00       	nop
   11f68:	80 e0       	ldi	r24, 0x00	; 0
   11f6a:	90 e0       	ldi	r25, 0x00	; 0
   11f6c:	c5 dd       	rcall	.-1142   	; 0x11af8 <gpib_bus_read_init>
   11f6e:	64 ef       	ldi	r22, 0xF4	; 244
   11f70:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11f72:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11f74:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11f76:	b6 dd       	rcall	.-1172   	; 0x11ae4 <gpib_timeout_set>
   11f78:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11f7a:	2e cf       	rjmp	.-420    	; 0x11dd8 <gpib_write_byte+0x6c>
   11f7c:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11f7e:	45 c0       	rjmp	.+138    	; 0x1200a <gpib_write_byte+0x29e>
   11f80:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11f84:	88 23       	and	r24, r24
   11f86:	09 f4       	brne	.+2      	; 0x11f8a <gpib_write_byte+0x21e>
   11f88:	27 cf       	rjmp	.-434    	; 0x11dd8 <gpib_write_byte+0x6c>
   11f8a:	8f 81       	ldd	r24, Y+7	; 0x07
   11f8c:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11f8e:	90 64       	ori	r25, 0x40	; 64
   11f90:	98 87       	std	Y+8, r25	; 0x08
   11f92:	8f 83       	std	Y+7, r24	; 0x07
   11f94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f98:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f9c:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11f9e:	99 27       	eor	r25, r25
   11fa0:	89 2b       	or	r24, r25
   11fa2:	a9 f1       	breq	.+106    	; 0x1200e <gpib_write_byte+0x2a2>
   11fa4:	1f 92       	push	r1
   11fa6:	df 92       	push	r13
   11fa8:	cf 92       	push	r12
   11faa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11fae:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11fb0:	0f 90       	pop	r0
   11fb2:	0f 90       	pop	r0
   11fb4:	2c c0       	rjmp	.+88     	; 0x1200e <gpib_write_byte+0x2a2>
   11fb6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fba:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fbe:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11fc0:	99 27       	eor	r25, r25
   11fc2:	89 2b       	or	r24, r25
   11fc4:	c1 f0       	breq	.+48     	; 0x11ff6 <gpib_write_byte+0x28a>
   11fc6:	99 b1       	in	r25, 0x09	; 9
   11fc8:	89 b1       	in	r24, 0x09	; 9
   11fca:	93 fb       	bst	r25, 3
   11fcc:	99 27       	eor	r25, r25
   11fce:	90 f9       	bld	r25, 0
   11fd0:	1f 92       	push	r1
   11fd2:	9f 93       	push	r25
   11fd4:	82 fb       	bst	r24, 2
   11fd6:	88 27       	eor	r24, r24
   11fd8:	80 f9       	bld	r24, 0
   11fda:	1f 92       	push	r1
   11fdc:	8f 93       	push	r24
   11fde:	81 ef       	ldi	r24, 0xF1	; 241
   11fe0:	90 e1       	ldi	r25, 0x10	; 16
   11fe2:	1f 92       	push	r1
   11fe4:	9f 93       	push	r25
   11fe6:	8f 93       	push	r24
   11fe8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   11fec:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11fee:	f8 94       	cli
   11ff0:	de bf       	out	0x3e, r29	; 62
   11ff2:	0f be       	out	0x3f, r0	; 63
   11ff4:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   11ff6:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11ff8:	90 e0       	ldi	r25, 0x00	; 0
   11ffa:	7e dd       	rcall	.-1284   	; 0x11af8 <gpib_bus_read_init>
   11ffc:	0a c0       	rjmp	.+20     	; 0x12012 <gpib_write_byte+0x2a6>
   11ffe:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   12000:	09 f0       	breq	.+2      	; 0x12004 <gpib_write_byte+0x298>
   12002:	ea ce       	rjmp	.-556    	; 0x11dd8 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   12004:	06 c0       	rjmp	.+12     	; 0x12012 <gpib_write_byte+0x2a6>
   12006:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   12008:	e7 ce       	rjmp	.-562    	; 0x11dd8 <gpib_write_byte+0x6c>
   1200a:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1200c:	e5 ce       	rjmp	.-566    	; 0x11dd8 <gpib_write_byte+0x6c>
   1200e:	19 e0       	ldi	r17, 0x09	; 9
   12010:	e3 ce       	rjmp	.-570    	; 0x11dd8 <gpib_write_byte+0x6c>
   12012:	8f 81       	ldd	r24, Y+7	; 0x07
   12014:	98 85       	ldd	r25, Y+8	; 0x08
   12016:	28 96       	adiw	r28, 0x08	; 8
   12018:	0f b6       	in	r0, 0x3f	; 63
   1201a:	f8 94       	cli
   1201c:	de bf       	out	0x3e, r29	; 62
   1201e:	0f be       	out	0x3f, r0	; 63
   12020:	cd bf       	out	0x3d, r28	; 61
   12022:	df 91       	pop	r29
   12024:	cf 91       	pop	r28
   12026:	1f 91       	pop	r17
   12028:	ef 90       	pop	r14
   1202a:	df 90       	pop	r13
   1202c:	cf 90       	pop	r12
   1202e:	8f 90       	pop	r8
   12030:	7f 90       	pop	r7
   12032:	6f 90       	pop	r6
   12034:	4f 90       	pop	r4
   12036:	3f 90       	pop	r3
   12038:	2f 90       	pop	r2
   1203a:	08 95       	ret

0001203c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1203c:	cf 93       	push	r28
   1203e:	df 93       	push	r29
   12040:	ec 01       	movw	r28, r24
    if(fo == NULL)
   12042:	89 2b       	or	r24, r25
   12044:	21 f4       	brne	.+8      	; 0x1204e <gpib_decode_header+0x12>
        fo = stdout;
   12046:	c0 91 c4 1c 	lds	r28, 0x1CC4	; 0x801cc4 <__iob+0x2>
   1204a:	d0 91 c5 1c 	lds	r29, 0x1CC5	; 0x801cc5 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   1204e:	be 01       	movw	r22, r28
   12050:	86 e8       	ldi	r24, 0x86	; 134
   12052:	9b e0       	ldi	r25, 0x0B	; 11
   12054:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"GPIB bus state\n");
   12058:	be 01       	movw	r22, r28
   1205a:	83 eb       	ldi	r24, 0xB3	; 179
   1205c:	9b e0       	ldi	r25, 0x0B	; 11
   1205e:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   12062:	be 01       	movw	r22, r28
   12064:	83 ec       	ldi	r24, 0xC3	; 195
   12066:	9b e0       	ldi	r25, 0x0B	; 11
   12068:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1206c:	be 01       	movw	r22, r28
   1206e:	87 ed       	ldi	r24, 0xD7	; 215
   12070:	9b e0       	ldi	r25, 0x0B	; 11
   12072:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   12076:	be 01       	movw	r22, r28
   12078:	8a ef       	ldi	r24, 0xFA	; 250
   1207a:	9b e0       	ldi	r25, 0x0B	; 11
   1207c:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"     A = ATN\n");
   12080:	be 01       	movw	r22, r28
   12082:	84 e2       	ldi	r24, 0x24	; 36
   12084:	9c e0       	ldi	r25, 0x0C	; 12
   12086:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"      E = EOI\n");
   1208a:	be 01       	movw	r22, r28
   1208c:	82 e3       	ldi	r24, 0x32	; 50
   1208e:	9c e0       	ldi	r25, 0x0C	; 12
   12090:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"       S = SRQ\n");
   12094:	be 01       	movw	r22, r28
   12096:	81 e4       	ldi	r24, 0x41	; 65
   12098:	9c e0       	ldi	r25, 0x0C	; 12
   1209a:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"        R = REN\n");
   1209e:	be 01       	movw	r22, r28
   120a0:	81 e5       	ldi	r24, 0x51	; 81
   120a2:	9c e0       	ldi	r25, 0x0C	; 12
   120a4:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"         I = IFC\n");
   120a8:	be 01       	movw	r22, r28
   120aa:	82 e6       	ldi	r24, 0x62	; 98
   120ac:	9c e0       	ldi	r25, 0x0C	; 12
   120ae:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   120b2:	be 01       	movw	r22, r28
   120b4:	84 e7       	ldi	r24, 0x74	; 116
   120b6:	9c e0       	ldi	r25, 0x0C	; 12
   120b8:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   120bc:	be 01       	movw	r22, r28
   120be:	86 e9       	ldi	r24, 0x96	; 150
   120c0:	9c e0       	ldi	r25, 0x0C	; 12
   120c2:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   120c6:	be 01       	movw	r22, r28
   120c8:	8e ea       	ldi	r24, 0xAE	; 174
   120ca:	9c e0       	ldi	r25, 0x0C	; 12
   120cc:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
    fprintf(fo,"              GPIB commands\n");
   120d0:	be 01       	movw	r22, r28
   120d2:	89 ec       	ldi	r24, 0xC9	; 201
   120d4:	9c e0       	ldi	r25, 0x0C	; 12
   120d6:	0e 94 f7 7a 	call	0xf5ee	; 0xf5ee <fputs>
}
   120da:	df 91       	pop	r29
   120dc:	cf 91       	pop	r28
   120de:	08 95       	ret

000120e0 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   120e0:	a0 e8       	ldi	r26, 0x80	; 128
   120e2:	b0 e0       	ldi	r27, 0x00	; 0
   120e4:	e6 e7       	ldi	r30, 0x76	; 118
   120e6:	f0 e9       	ldi	r31, 0x90	; 144
   120e8:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   120ec:	8c 01       	movw	r16, r24
   120ee:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   120f0:	19 82       	std	Y+1, r1	; 0x01
   120f2:	4c 01       	movw	r8, r24
   120f4:	88 24       	eor	r8, r8
   120f6:	44 e0       	ldi	r20, 0x04	; 4
   120f8:	94 22       	and	r9, r20
   120fa:	ce 01       	movw	r24, r28
   120fc:	01 96       	adiw	r24, 0x01	; 1
   120fe:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   12100:	62 30       	cpi	r22, 0x02	; 2
   12102:	71 05       	cpc	r23, r1
   12104:	f0 f4       	brcc	.+60     	; 0x12142 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   12106:	81 14       	cp	r8, r1
   12108:	91 04       	cpc	r9, r1
   1210a:	29 f4       	brne	.+10     	; 0x12116 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1210c:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1210e:	90 ee       	ldi	r25, 0xE0	; 224
   12110:	90 0f       	add	r25, r16
   12112:	9f 35       	cpi	r25, 0x5F	; 95
   12114:	08 f0       	brcs	.+2      	; 0x12118 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   12116:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   12118:	1f 92       	push	r1
   1211a:	8f 93       	push	r24
   1211c:	c8 01       	movw	r24, r16
   1211e:	99 27       	eor	r25, r25
   12120:	9f 93       	push	r25
   12122:	8f 93       	push	r24
   12124:	88 ee       	ldi	r24, 0xE8	; 232
   12126:	90 e1       	ldi	r25, 0x10	; 16
   12128:	1f 92       	push	r1
   1212a:	9f 93       	push	r25
   1212c:	8f 93       	push	r24
   1212e:	df 92       	push	r13
   12130:	cf 92       	push	r12
   12132:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
   12136:	0f b6       	in	r0, 0x3f	; 63
   12138:	f8 94       	cli
   1213a:	de bf       	out	0x3e, r29	; 62
   1213c:	0f be       	out	0x3f, r0	; 63
   1213e:	cd bf       	out	0x3d, r28	; 61
   12140:	0e c0       	rjmp	.+28     	; 0x1215e <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   12142:	82 ee       	ldi	r24, 0xE2	; 226
   12144:	90 e1       	ldi	r25, 0x10	; 16
   12146:	1f 92       	push	r1
   12148:	9f 93       	push	r25
   1214a:	8f 93       	push	r24
   1214c:	df 92       	push	r13
   1214e:	cf 92       	push	r12
   12150:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
   12154:	0f 90       	pop	r0
   12156:	0f 90       	pop	r0
   12158:	0f 90       	pop	r0
   1215a:	0f 90       	pop	r0
   1215c:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   1215e:	f6 01       	movw	r30, r12
   12160:	01 90       	ld	r0, Z+
   12162:	00 20       	and	r0, r0
   12164:	e9 f7       	brne	.-6      	; 0x12160 <gpib_trace_display+0x80>
   12166:	31 97       	sbiw	r30, 0x01	; 1
   12168:	cf 01       	movw	r24, r30
   1216a:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1216c:	81 14       	cp	r8, r1
   1216e:	91 04       	cpc	r9, r1
   12170:	11 f0       	breq	.+4      	; 0x12176 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   12172:	21 e4       	ldi	r18, 0x41	; 65
   12174:	01 c0       	rjmp	.+2      	; 0x12178 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   12176:	2d e2       	ldi	r18, 0x2D	; 45
   12178:	20 83       	st	Z, r18
   1217a:	dc 01       	movw	r26, r24
   1217c:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   1217e:	10 ff       	sbrs	r17, 0
   12180:	02 c0       	rjmp	.+4      	; 0x12186 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   12182:	25 e4       	ldi	r18, 0x45	; 69
   12184:	01 c0       	rjmp	.+2      	; 0x12188 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   12186:	2d e2       	ldi	r18, 0x2D	; 45
   12188:	fc 01       	movw	r30, r24
   1218a:	20 83       	st	Z, r18
   1218c:	fd 01       	movw	r30, r26
   1218e:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   12190:	11 ff       	sbrs	r17, 1
   12192:	02 c0       	rjmp	.+4      	; 0x12198 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   12194:	83 e5       	ldi	r24, 0x53	; 83
   12196:	01 c0       	rjmp	.+2      	; 0x1219a <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   12198:	8d e2       	ldi	r24, 0x2D	; 45
   1219a:	8c 93       	st	X, r24
   1219c:	df 01       	movw	r26, r30
   1219e:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   121a0:	13 ff       	sbrs	r17, 3
   121a2:	02 c0       	rjmp	.+4      	; 0x121a8 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   121a4:	82 e5       	ldi	r24, 0x52	; 82
   121a6:	01 c0       	rjmp	.+2      	; 0x121aa <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   121a8:	8d e2       	ldi	r24, 0x2D	; 45
   121aa:	80 83       	st	Z, r24
   121ac:	fd 01       	movw	r30, r26
   121ae:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   121b0:	14 ff       	sbrs	r17, 4
   121b2:	02 c0       	rjmp	.+4      	; 0x121b8 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   121b4:	89 e4       	ldi	r24, 0x49	; 73
   121b6:	01 c0       	rjmp	.+2      	; 0x121ba <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   121b8:	8d e2       	ldi	r24, 0x2D	; 45
   121ba:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   121bc:	a1 14       	cp	r10, r1
   121be:	b1 04       	cpc	r11, r1
   121c0:	d1 f4       	brne	.+52     	; 0x121f6 <gpib_trace_display+0x116>
   121c2:	df 01       	movw	r26, r30
   121c4:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   121c6:	15 ff       	sbrs	r17, 5
   121c8:	02 c0       	rjmp	.+4      	; 0x121ce <gpib_trace_display+0xee>
            *tmp++ = 'P';
   121ca:	80 e5       	ldi	r24, 0x50	; 80
   121cc:	01 c0       	rjmp	.+2      	; 0x121d0 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   121ce:	8d e2       	ldi	r24, 0x2D	; 45
   121d0:	80 83       	st	Z, r24
   121d2:	fd 01       	movw	r30, r26
   121d4:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   121d6:	16 ff       	sbrs	r17, 6
   121d8:	02 c0       	rjmp	.+4      	; 0x121de <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   121da:	84 e5       	ldi	r24, 0x54	; 84
   121dc:	01 c0       	rjmp	.+2      	; 0x121e0 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   121de:	8d e2       	ldi	r24, 0x2D	; 45
   121e0:	8c 93       	st	X, r24
   121e2:	cf 01       	movw	r24, r30
   121e4:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   121e6:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   121e8:	17 ff       	sbrs	r17, 7
   121ea:	02 c0       	rjmp	.+4      	; 0x121f0 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   121ec:	82 e4       	ldi	r24, 0x42	; 66
   121ee:	01 c0       	rjmp	.+2      	; 0x121f2 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   121f0:	8d e2       	ldi	r24, 0x2D	; 45
   121f2:	80 83       	st	Z, r24
   121f4:	08 c0       	rjmp	.+16     	; 0x12206 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   121f6:	8d e2       	ldi	r24, 0x2D	; 45
   121f8:	80 83       	st	Z, r24
        *tmp++ = '-';
   121fa:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   121fc:	7f 01       	movw	r14, r30
   121fe:	43 e0       	ldi	r20, 0x03	; 3
   12200:	e4 0e       	add	r14, r20
   12202:	f1 1c       	adc	r15, r1
   12204:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   12206:	f7 01       	movw	r30, r14
   12208:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1220a:	f1 e0       	ldi	r31, 0x01	; 1
   1220c:	af 1a       	sub	r10, r31
   1220e:	b1 08       	sbc	r11, r1
   12210:	42 e0       	ldi	r20, 0x02	; 2
   12212:	a4 16       	cp	r10, r20
   12214:	b1 04       	cpc	r11, r1
   12216:	f0 f4       	brcc	.+60     	; 0x12254 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   12218:	15 ff       	sbrs	r17, 5
   1221a:	03 c0       	rjmp	.+6      	; 0x12222 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   1221c:	66 ee       	ldi	r22, 0xE6	; 230
   1221e:	7c e0       	ldi	r23, 0x0C	; 12
   12220:	02 c0       	rjmp	.+4      	; 0x12226 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   12222:	66 e1       	ldi	r22, 0x16	; 22
   12224:	78 e0       	ldi	r23, 0x08	; 8
   12226:	c6 01       	movw	r24, r12
   12228:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
        if(status & NRFD_FLAG)
   1222c:	16 ff       	sbrs	r17, 6
   1222e:	03 c0       	rjmp	.+6      	; 0x12236 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   12230:	6c ee       	ldi	r22, 0xEC	; 236
   12232:	7c e0       	ldi	r23, 0x0C	; 12
   12234:	02 c0       	rjmp	.+4      	; 0x1223a <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   12236:	66 e1       	ldi	r22, 0x16	; 22
   12238:	78 e0       	ldi	r23, 0x08	; 8
   1223a:	c6 01       	movw	r24, r12
   1223c:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
        if(status & NDAC_FLAG)
   12240:	17 ff       	sbrs	r17, 7
   12242:	03 c0       	rjmp	.+6      	; 0x1224a <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   12244:	62 ef       	ldi	r22, 0xF2	; 242
   12246:	7c e0       	ldi	r23, 0x0C	; 12
   12248:	02 c0       	rjmp	.+4      	; 0x1224e <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1224a:	66 e1       	ldi	r22, 0x16	; 22
   1224c:	78 e0       	ldi	r23, 0x08	; 8
   1224e:	c6 01       	movw	r24, r12
   12250:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
    }

    if( (status & ATN_FLAG) )
   12254:	81 14       	cp	r8, r1
   12256:	91 04       	cpc	r9, r1
   12258:	09 f4       	brne	.+2      	; 0x1225c <gpib_trace_display+0x17c>
   1225a:	58 c0       	rjmp	.+176    	; 0x1230c <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   1225c:	c8 01       	movw	r24, r16
   1225e:	8f 77       	andi	r24, 0x7F	; 127
   12260:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   12262:	9c 01       	movw	r18, r24
   12264:	20 52       	subi	r18, 0x20	; 32
   12266:	31 09       	sbc	r19, r1
   12268:	2f 31       	cpi	r18, 0x1F	; 31
   1226a:	31 05       	cpc	r19, r1
   1226c:	38 f4       	brcc	.+14     	; 0x1227c <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1226e:	0f 71       	andi	r16, 0x1F	; 31
   12270:	11 27       	eor	r17, r17
   12272:	1f 93       	push	r17
   12274:	0f 93       	push	r16
   12276:	87 ed       	ldi	r24, 0xD7	; 215
   12278:	90 e1       	ldi	r25, 0x10	; 16
   1227a:	0c c0       	rjmp	.+24     	; 0x12294 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1227c:	9c 01       	movw	r18, r24
   1227e:	20 54       	subi	r18, 0x40	; 64
   12280:	31 09       	sbc	r19, r1
   12282:	2f 30       	cpi	r18, 0x0F	; 15
   12284:	31 05       	cpc	r19, r1
   12286:	98 f4       	brcc	.+38     	; 0x122ae <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   12288:	0f 71       	andi	r16, 0x1F	; 31
   1228a:	11 27       	eor	r17, r17
   1228c:	1f 93       	push	r17
   1228e:	0f 93       	push	r16
   12290:	8c ec       	ldi	r24, 0xCC	; 204
   12292:	90 e1       	ldi	r25, 0x10	; 16
   12294:	1f 92       	push	r1
   12296:	9f 93       	push	r25
   12298:	8f 93       	push	r24
   1229a:	ff 92       	push	r15
   1229c:	ef 92       	push	r14
   1229e:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
   122a2:	0f b6       	in	r0, 0x3f	; 63
   122a4:	f8 94       	cli
   122a6:	de bf       	out	0x3e, r29	; 62
   122a8:	0f be       	out	0x3f, r0	; 63
   122aa:	cd bf       	out	0x3d, r28	; 61
   122ac:	2f c0       	rjmp	.+94     	; 0x1230c <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   122ae:	9c 01       	movw	r18, r24
   122b0:	20 56       	subi	r18, 0x60	; 96
   122b2:	31 09       	sbc	r19, r1
   122b4:	20 31       	cpi	r18, 0x10	; 16
   122b6:	31 05       	cpc	r19, r1
   122b8:	28 f0       	brcs	.+10     	; 0x122c4 <gpib_trace_display+0x1e4>
   122ba:	e9 e8       	ldi	r30, 0x89	; 137
   122bc:	f1 e0       	ldi	r31, 0x01	; 1
   122be:	00 e0       	ldi	r16, 0x00	; 0
   122c0:	10 e0       	ldi	r17, 0x00	; 0
   122c2:	09 c0       	rjmp	.+18     	; 0x122d6 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   122c4:	0f 71       	andi	r16, 0x1F	; 31
   122c6:	11 27       	eor	r17, r17
   122c8:	1f 93       	push	r17
   122ca:	0f 93       	push	r16
   122cc:	81 ec       	ldi	r24, 0xC1	; 193
   122ce:	90 e1       	ldi	r25, 0x10	; 16
   122d0:	e1 cf       	rjmp	.-62     	; 0x12294 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   122d2:	0f 5f       	subi	r16, 0xFF	; 255
   122d4:	1f 4f       	sbci	r17, 0xFF	; 255
   122d6:	20 81       	ld	r18, Z
   122d8:	31 81       	ldd	r19, Z+1	; 0x01
   122da:	2f 3f       	cpi	r18, 0xFF	; 255
   122dc:	4f ef       	ldi	r20, 0xFF	; 255
   122de:	34 07       	cpc	r19, r20
   122e0:	a9 f0       	breq	.+42     	; 0x1230c <gpib_trace_display+0x22c>
   122e2:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   122e4:	82 17       	cp	r24, r18
   122e6:	93 07       	cpc	r25, r19
   122e8:	a1 f7       	brne	.-24     	; 0x122d2 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   122ea:	6a e1       	ldi	r22, 0x1A	; 26
   122ec:	78 e0       	ldi	r23, 0x08	; 8
   122ee:	c7 01       	movw	r24, r14
   122f0:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   122f4:	00 0f       	add	r16, r16
   122f6:	11 1f       	adc	r17, r17
   122f8:	00 0f       	add	r16, r16
   122fa:	11 1f       	adc	r17, r17
   122fc:	f8 01       	movw	r30, r16
   122fe:	e7 57       	subi	r30, 0x77	; 119
   12300:	fe 4f       	sbci	r31, 0xFE	; 254
   12302:	62 81       	ldd	r22, Z+2	; 0x02
   12304:	73 81       	ldd	r23, Z+3	; 0x03
   12306:	c7 01       	movw	r24, r14
   12308:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1230c:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   12310:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   12314:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   12318:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   1231c:	23 2b       	or	r18, r19
   1231e:	21 f4       	brne	.+8      	; 0x12328 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   12320:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   12324:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   12328:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   1232c:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   12330:	82 17       	cp	r24, r18
   12332:	93 07       	cpc	r25, r19
   12334:	19 f0       	breq	.+6      	; 0x1233c <gpib_trace_display+0x25c>
        puts(str);
   12336:	c6 01       	movw	r24, r12
   12338:	0e 94 0f 7b 	call	0xf61e	; 0xf61e <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1233c:	df 92       	push	r13
   1233e:	cf 92       	push	r12
   12340:	88 ef       	ldi	r24, 0xF8	; 248
   12342:	9c e0       	ldi	r25, 0x0C	; 12
   12344:	9f 93       	push	r25
   12346:	8f 93       	push	r24
   12348:	80 91 69 19 	lds	r24, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   1234c:	8f 93       	push	r24
   1234e:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   12352:	8f 93       	push	r24
   12354:	0e 94 c0 83 	call	0x10780	; 0x10780 <fprintf>
}
   12358:	0f 90       	pop	r0
   1235a:	0f 90       	pop	r0
   1235c:	0f 90       	pop	r0
   1235e:	0f 90       	pop	r0
   12360:	0f 90       	pop	r0
   12362:	0f 90       	pop	r0
   12364:	c0 58       	subi	r28, 0x80	; 128
   12366:	df 4f       	sbci	r29, 0xFF	; 255
   12368:	ec e0       	ldi	r30, 0x0C	; 12
   1236a:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

0001236e <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1236e:	af 92       	push	r10
   12370:	bf 92       	push	r11
   12372:	cf 92       	push	r12
   12374:	df 92       	push	r13
   12376:	ff 92       	push	r15
   12378:	0f 93       	push	r16
   1237a:	1f 93       	push	r17
   1237c:	cf 93       	push	r28
   1237e:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   12380:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <gpib_unread_f>
   12384:	22 23       	and	r18, r18
   12386:	39 f0       	breq	.+14     	; 0x12396 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   12388:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
        return(gpib_unread_data);
   1238c:	80 91 f5 1e 	lds	r24, 0x1EF5	; 0x801ef5 <gpib_unread_data>
   12390:	90 91 f6 1e 	lds	r25, 0x1EF6	; 0x801ef6 <gpib_unread_data+0x1>
   12394:	b8 c0       	rjmp	.+368    	; 0x12506 <gpib_read_byte+0x198>
   12396:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   12398:	81 e0       	ldi	r24, 0x01	; 1
   1239a:	90 e0       	ldi	r25, 0x00	; 0
   1239c:	ad db       	rcall	.-2214   	; 0x11af8 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1239e:	c1 14       	cp	r12, r1
   123a0:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   123a2:	51 f0       	breq	.+20     	; 0x123b8 <gpib_read_byte+0x4a>
   123a4:	c7 dc       	rcall	.-1650   	; 0x11d34 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   123a6:	8c 01       	movw	r16, r24
   123a8:	d5 dc       	rcall	.-1622   	; 0x11d54 <gpib_handshake_pin_read>
   123aa:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   123ac:	19 2b       	or	r17, r25
   123ae:	62 e0       	ldi	r22, 0x02	; 2
   123b0:	70 e0       	ldi	r23, 0x00	; 0
   123b2:	c8 01       	movw	r24, r16
   123b4:	95 de       	rcall	.-726    	; 0x120e0 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   123b6:	02 c0       	rjmp	.+4      	; 0x123bc <gpib_read_byte+0x4e>
   123b8:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   123ba:	10 e0       	ldi	r17, 0x00	; 0
   123bc:	f1 2c       	mov	r15, r1
   123be:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   123c0:	d0 e0       	ldi	r29, 0x00	; 0
   123c2:	80 e0       	ldi	r24, 0x00	; 0
   123c4:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   123c8:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   123ca:	09 f0       	breq	.+2      	; 0x123ce <gpib_read_byte+0x60>
   123cc:	78 c0       	rjmp	.+240    	; 0x124be <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   123ce:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   123d0:	03 c0       	rjmp	.+6      	; 0x123d8 <gpib_read_byte+0x6a>
   123d2:	d0 61       	ori	r29, 0x10	; 16
   123d4:	b4 db       	rcall	.-2200   	; 0x11b3e <gpib_bus_init>
            break;
        }


        switch(rx_state)
   123d6:	73 c0       	rjmp	.+230    	; 0x124be <gpib_read_byte+0x150>
   123d8:	8f 2d       	mov	r24, r15
   123da:	90 e0       	ldi	r25, 0x00	; 0
   123dc:	89 30       	cpi	r24, 0x09	; 9
   123de:	91 05       	cpc	r25, r1
   123e0:	08 f0       	brcs	.+2      	; 0x123e4 <gpib_read_byte+0x76>
   123e2:	51 c0       	rjmp	.+162    	; 0x12486 <gpib_read_byte+0x118>
   123e4:	fc 01       	movw	r30, r24
   123e6:	e9 53       	subi	r30, 0x39	; 57
   123e8:	ff 4f       	sbci	r31, 0xFF	; 255
   123ea:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
   123ee:	52 98       	cbi	0x0a, 2	; 10
   123f0:	8d e0       	ldi	r24, 0x0D	; 13
   123f2:	8a 95       	dec	r24
   123f4:	f1 f7       	brne	.-4      	; 0x123f2 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   123f6:	00 00       	nop
   123f8:	ff 24       	eor	r15, r15
   123fa:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   123fc:	7f c0       	rjmp	.+254    	; 0x124fc <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   123fe:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   12400:	7d c0       	rjmp	.+250    	; 0x124fc <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   12402:	62 e0       	ldi	r22, 0x02	; 2
   12404:	f6 2e       	mov	r15, r22
   12406:	7a c0       	rjmp	.+244    	; 0x124fc <gpib_read_byte+0x18e>
   12408:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   1240a:	52 9a       	sbi	0x0a, 2	; 10
   1240c:	8d dc       	rcall	.-1766   	; 0x11d28 <gpib_bus_read>
   1240e:	a8 2e       	mov	r10, r24
   12410:	b1 2c       	mov	r11, r1
                ch |= control_last;
   12412:	90 dc       	rcall	.-1760   	; 0x11d34 <gpib_control_pin_read>
   12414:	8c 01       	movw	r16, r24

                if(trace)
   12416:	c8 2b       	or	r28, r24
   12418:	d9 2b       	or	r29, r25
   1241a:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1241c:	db 29       	or	r29, r11
   1241e:	c1 14       	cp	r12, r1
   12420:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   12422:	49 f0       	breq	.+18     	; 0x12436 <gpib_read_byte+0xc8>
   12424:	97 dc       	rcall	.-1746   	; 0x11d54 <gpib_handshake_pin_read>
   12426:	08 2b       	or	r16, r24
   12428:	19 2b       	or	r17, r25
   1242a:	61 e0       	ldi	r22, 0x01	; 1
   1242c:	70 e0       	ldi	r23, 0x00	; 0
   1242e:	c5 01       	movw	r24, r10
   12430:	80 2b       	or	r24, r16
   12432:	91 2b       	or	r25, r17
   12434:	55 de       	rcall	.-854    	; 0x120e0 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   12436:	53 98       	cbi	0x0a, 3	; 10
   12438:	8d e0       	ldi	r24, 0x0D	; 13
   1243a:	8a 95       	dec	r24
   1243c:	f1 f7       	brne	.-4      	; 0x1243a <gpib_read_byte+0xcc>
   1243e:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12440:	64 ef       	ldi	r22, 0xF4	; 244
   12442:	71 e0       	ldi	r23, 0x01	; 1
   12444:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   12446:	90 e0       	ldi	r25, 0x00	; 0
   12448:	4d db       	rcall	.-2406   	; 0x11ae4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1244a:	54 e0       	ldi	r21, 0x04	; 4
   1244c:	f5 2e       	mov	r15, r21
   1244e:	56 c0       	rjmp	.+172    	; 0x124fc <gpib_read_byte+0x18e>
   12450:	4b 9b       	sbis	0x09, 3	; 9
   12452:	0c c0       	rjmp	.+24     	; 0x1246c <gpib_read_byte+0xfe>
   12454:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12456:	71 e0       	ldi	r23, 0x01	; 1
   12458:	80 e0       	ldi	r24, 0x00	; 0
   1245a:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1245c:	43 db       	rcall	.-2426   	; 0x11ae4 <gpib_timeout_set>
   1245e:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   12460:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   12462:	04 c0       	rjmp	.+8      	; 0x1246c <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   12464:	19 9b       	sbis	0x03, 1	; 3
   12466:	02 c0       	rjmp	.+4      	; 0x1246c <gpib_read_byte+0xfe>
   12468:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   1246a:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1246c:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
   12470:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   12472:	09 f4       	brne	.+2      	; 0x12476 <gpib_read_byte+0x108>
   12474:	43 c0       	rjmp	.+134    	; 0x124fc <gpib_read_byte+0x18e>
   12476:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   12478:	27 e0       	ldi	r18, 0x07	; 7
   1247a:	f2 2e       	mov	r15, r18
   1247c:	3f c0       	rjmp	.+126    	; 0x124fc <gpib_read_byte+0x18e>
   1247e:	81 e0       	ldi	r24, 0x01	; 1
   12480:	90 e0       	ldi	r25, 0x00	; 0
   12482:	3a db       	rcall	.-2444   	; 0x11af8 <gpib_bus_read_init>
   12484:	04 c0       	rjmp	.+8      	; 0x1248e <gpib_read_byte+0x120>
   12486:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   12488:	d1 04       	cpc	r13, r1
   1248a:	99 f0       	breq	.+38     	; 0x124b2 <gpib_read_byte+0x144>
   1248c:	05 c0       	rjmp	.+10     	; 0x12498 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1248e:	c1 14       	cp	r12, r1
   12490:	d1 04       	cpc	r13, r1
   12492:	a9 f0       	breq	.+42     	; 0x124be <gpib_read_byte+0x150>
   12494:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   12496:	f9 2e       	mov	r15, r25
   12498:	4d dc       	rcall	.-1894   	; 0x11d34 <gpib_control_pin_read>
   1249a:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1249c:	5b dc       	rcall	.-1866   	; 0x11d54 <gpib_handshake_pin_read>
   1249e:	a8 2a       	or	r10, r24
   124a0:	b9 2a       	or	r11, r25
   124a2:	a0 16       	cp	r10, r16
   124a4:	b1 06       	cpc	r11, r17
   124a6:	31 f0       	breq	.+12     	; 0x124b4 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   124a8:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   124aa:	70 e0       	ldi	r23, 0x00	; 0
   124ac:	c5 01       	movw	r24, r10
   124ae:	18 de       	rcall	.-976    	; 0x120e0 <gpib_trace_display>
   124b0:	01 c0       	rjmp	.+2      	; 0x124b4 <gpib_read_byte+0x146>
   124b2:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   124b4:	88 e0       	ldi	r24, 0x08	; 8
   124b6:	f8 16       	cp	r15, r24
   124b8:	11 f0       	breq	.+4      	; 0x124be <gpib_read_byte+0x150>
   124ba:	85 01       	movw	r16, r10
   124bc:	82 cf       	rjmp	.-252    	; 0x123c2 <gpib_read_byte+0x54>
   124be:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <current>
   124c2:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   124c6:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <lastcmd+0x1>
   124ca:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <lastcmd>
   124ce:	ce 01       	movw	r24, r28
   124d0:	88 27       	eor	r24, r24
        current = 0;
   124d2:	90 7d       	andi	r25, 0xD0	; 208
   124d4:	89 2b       	or	r24, r25
   124d6:	11 f4       	brne	.+4      	; 0x124dc <gpib_read_byte+0x16e>
   124d8:	d2 fd       	sbrc	r29, 2
   124da:	05 c0       	rjmp	.+10     	; 0x124e6 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   124dc:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <current+0x1>
   124e0:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <current>
   124e4:	07 c0       	rjmp	.+14     	; 0x124f4 <gpib_read_byte+0x186>
   124e6:	ce 01       	movw	r24, r28
   124e8:	8f 77       	andi	r24, 0x7F	; 127
   124ea:	99 27       	eor	r25, r25
   124ec:	90 93 f0 1e 	sts	0x1EF0, r25	; 0x801ef0 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   124f0:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   124f4:	ce 01       	movw	r24, r28
   124f6:	07 c0       	rjmp	.+14     	; 0x12506 <gpib_read_byte+0x198>
   124f8:	86 e0       	ldi	r24, 0x06	; 6
   124fa:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   124fc:	c1 14       	cp	r12, r1
   124fe:	d1 04       	cpc	r13, r1
   12500:	09 f4       	brne	.+2      	; 0x12504 <gpib_read_byte+0x196>
   12502:	5f cf       	rjmp	.-322    	; 0x123c2 <gpib_read_byte+0x54>
   12504:	c9 cf       	rjmp	.-110    	; 0x12498 <gpib_read_byte+0x12a>
   12506:	df 91       	pop	r29
   12508:	cf 91       	pop	r28
   1250a:	1f 91       	pop	r17
   1250c:	0f 91       	pop	r16
   1250e:	ff 90       	pop	r15
   12510:	df 90       	pop	r13
   12512:	cf 90       	pop	r12
   12514:	bf 90       	pop	r11
   12516:	af 90       	pop	r10
   12518:	08 95       	ret

0001251a <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1251a:	60 e0       	ldi	r22, 0x00	; 0
   1251c:	70 e0       	ldi	r23, 0x00	; 0
   1251e:	e0 cd       	rjmp	.-1088   	; 0x120e0 <gpib_trace_display>
   12520:	08 95       	ret

00012522 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   12522:	a0 e0       	ldi	r26, 0x00	; 0
   12524:	b0 e0       	ldi	r27, 0x00	; 0
   12526:	e7 e9       	ldi	r30, 0x97	; 151
   12528:	f2 e9       	ldi	r31, 0x92	; 146
   1252a:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   1252e:	5b 01       	movw	r10, r22
   12530:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   12532:	fa 01       	movw	r30, r20
   12534:	20 81       	ld	r18, Z
   12536:	31 81       	ldd	r19, Z+1	; 0x01
   12538:	22 27       	eor	r18, r18
   1253a:	31 83       	std	Z+1, r19	; 0x01
   1253c:	20 83       	st	Z, r18

    if(!size)
   1253e:	67 2b       	or	r22, r23
   12540:	21 f0       	breq	.+8      	; 0x1254a <gpib_read_str+0x28>
   12542:	7c 01       	movw	r14, r24
   12544:	c0 e0       	ldi	r28, 0x00	; 0
   12546:	d0 e0       	ldi	r29, 0x00	; 0
   12548:	28 c0       	rjmp	.+80     	; 0x1259a <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1254a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1254e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12552:	85 70       	andi	r24, 0x05	; 5
   12554:	99 27       	eor	r25, r25
   12556:	89 2b       	or	r24, r25
   12558:	09 f4       	brne	.+2      	; 0x1255c <gpib_read_str+0x3a>
   1255a:	89 c0       	rjmp	.+274    	; 0x1266e <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1255c:	88 ea       	ldi	r24, 0xA8	; 168
   1255e:	90 e1       	ldi	r25, 0x10	; 16
   12560:	1f 92       	push	r1
   12562:	9f 93       	push	r25
   12564:	8f 93       	push	r24
   12566:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1256a:	0f 90       	pop	r0
   1256c:	0f 90       	pop	r0
   1256e:	0f 90       	pop	r0
   12570:	7e c0       	rjmp	.+252    	; 0x1266e <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   12572:	80 27       	eor	r24, r16
   12574:	91 27       	eor	r25, r17
   12576:	92 fd       	sbrc	r25, 2
   12578:	2e c0       	rjmp	.+92     	; 0x125d6 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1257a:	c8 01       	movw	r24, r16
   1257c:	88 27       	eor	r24, r24
   1257e:	94 70       	andi	r25, 0x04	; 4
   12580:	12 ff       	sbrs	r17, 2
   12582:	49 c0       	rjmp	.+146    	; 0x12616 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   12584:	20 2f       	mov	r18, r16
   12586:	2f 77       	andi	r18, 0x7F	; 127
   12588:	f7 01       	movw	r30, r14
   1258a:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   1258c:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1258e:	89 2b       	or	r24, r25
   12590:	09 f4       	brne	.+2      	; 0x12594 <gpib_read_str+0x72>
   12592:	44 c0       	rjmp	.+136    	; 0x1261c <gpib_read_str+0xfa>
   12594:	ff ef       	ldi	r31, 0xFF	; 255
   12596:	ef 1a       	sub	r14, r31
   12598:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1259a:	ca 15       	cp	r28, r10
   1259c:	db 05       	cpc	r29, r11
   1259e:	0c f0       	brlt	.+2      	; 0x125a2 <gpib_read_str+0x80>
   125a0:	47 c0       	rjmp	.+142    	; 0x12630 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   125a2:	80 e0       	ldi	r24, 0x00	; 0
   125a4:	90 e0       	ldi	r25, 0x00	; 0
   125a6:	e3 de       	rcall	.-570    	; 0x1236e <gpib_read_byte>
   125a8:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   125aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   125ae:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   125b2:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   125b4:	02 c0       	rjmp	.+4      	; 0x125ba <gpib_read_str+0x98>
   125b6:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   125b8:	b0 df       	rcall	.-160    	; 0x1251a <gpib_decode>
   125ba:	98 01       	movw	r18, r16
   125bc:	22 27       	eor	r18, r18
   125be:	30 7d       	andi	r19, 0xD0	; 208
   125c0:	f6 01       	movw	r30, r12
   125c2:	80 81       	ld	r24, Z
   125c4:	91 81       	ldd	r25, Z+1	; 0x01
   125c6:	21 15       	cp	r18, r1
   125c8:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   125ca:	99 f2       	breq	.-90     	; 0x12572 <gpib_read_str+0x50>
   125cc:	82 2b       	or	r24, r18
   125ce:	93 2b       	or	r25, r19
   125d0:	91 83       	std	Z+1, r25	; 0x01
            break;
   125d2:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   125d4:	30 c0       	rjmp	.+96     	; 0x12636 <gpib_read_str+0x114>
   125d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   125da:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   125de:	85 70       	andi	r24, 0x05	; 5
   125e0:	99 27       	eor	r25, r25
   125e2:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   125e4:	a9 f0       	breq	.+42     	; 0x12610 <gpib_read_str+0xee>
   125e6:	c8 01       	movw	r24, r16
   125e8:	99 27       	eor	r25, r25
   125ea:	9f 93       	push	r25
   125ec:	8f 93       	push	r24
   125ee:	df 93       	push	r29
   125f0:	cf 93       	push	r28
   125f2:	8b e7       	ldi	r24, 0x7B	; 123
   125f4:	90 e1       	ldi	r25, 0x10	; 16
   125f6:	1f 92       	push	r1
   125f8:	9f 93       	push	r25
   125fa:	8f 93       	push	r24
   125fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12600:	ed b7       	in	r30, 0x3d	; 61
   12602:	fe b7       	in	r31, 0x3e	; 62
   12604:	37 96       	adiw	r30, 0x07	; 7
   12606:	0f b6       	in	r0, 0x3f	; 63
   12608:	f8 94       	cli
   1260a:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   1260c:	0f be       	out	0x3f, r0	; 63
   1260e:	ed bf       	out	0x3d, r30	; 61
   12610:	c8 01       	movw	r24, r16
            break;
   12612:	65 db       	rcall	.-2358   	; 0x11cde <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   12614:	10 c0       	rjmp	.+32     	; 0x12636 <gpib_read_str+0x114>
   12616:	f7 01       	movw	r30, r14
   12618:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1261a:	b8 cf       	rjmp	.-144    	; 0x1258c <gpib_read_str+0x6a>
   1261c:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   1261e:	ba cf       	rjmp	.-140    	; 0x12594 <gpib_read_str+0x72>
   12620:	f6 01       	movw	r30, r12
   12622:	80 81       	ld	r24, Z
   12624:	91 81       	ldd	r25, Z+1	; 0x01
   12626:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   12628:	24 c0       	rjmp	.+72     	; 0x12672 <gpib_read_str+0x150>
   1262a:	91 60       	ori	r25, 0x01	; 1
   1262c:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1262e:	80 83       	st	Z, r24
   12630:	ca 15       	cp	r28, r10
   12632:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   12634:	f1 f0       	breq	.+60     	; 0x12672 <gpib_read_str+0x150>
   12636:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1263a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1263e:	85 70       	andi	r24, 0x05	; 5
   12640:	99 27       	eor	r25, r25
   12642:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   12644:	b1 f0       	breq	.+44     	; 0x12672 <gpib_read_str+0x150>
   12646:	bf 92       	push	r11
   12648:	af 92       	push	r10
   1264a:	df 93       	push	r29
   1264c:	cf 93       	push	r28
   1264e:	84 e5       	ldi	r24, 0x54	; 84
   12650:	90 e1       	ldi	r25, 0x10	; 16
   12652:	1f 92       	push	r1
   12654:	9f 93       	push	r25
   12656:	8f 93       	push	r24
   12658:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1265c:	ed b7       	in	r30, 0x3d	; 61
   1265e:	fe b7       	in	r31, 0x3e	; 62
   12660:	37 96       	adiw	r30, 0x07	; 7
   12662:	0f b6       	in	r0, 0x3f	; 63
   12664:	f8 94       	cli
   12666:	fe bf       	out	0x3e, r31	; 62
   12668:	0f be       	out	0x3f, r0	; 63
   1266a:	ed bf       	out	0x3d, r30	; 61
   1266c:	02 c0       	rjmp	.+4      	; 0x12672 <gpib_read_str+0x150>
   1266e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   12670:	d0 e0       	ldi	r29, 0x00	; 0
   12672:	ce 01       	movw	r24, r28
   12674:	cd b7       	in	r28, 0x3d	; 61
   12676:	de b7       	in	r29, 0x3e	; 62
   12678:	ea e0       	ldi	r30, 0x0A	; 10
   1267a:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0001267e <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1267e:	a0 e0       	ldi	r26, 0x00	; 0
   12680:	b0 e0       	ldi	r27, 0x00	; 0
   12682:	e5 e4       	ldi	r30, 0x45	; 69
   12684:	f3 e9       	ldi	r31, 0x93	; 147
   12686:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   1268a:	8b 01       	movw	r16, r22
   1268c:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1268e:	fa 01       	movw	r30, r20
   12690:	20 81       	ld	r18, Z
   12692:	31 81       	ldd	r19, Z+1	; 0x01
   12694:	22 27       	eor	r18, r18
   12696:	31 83       	std	Z+1, r19	; 0x01
   12698:	20 83       	st	Z, r18

    if(!size)
   1269a:	67 2b       	or	r22, r23
   1269c:	21 f0       	breq	.+8      	; 0x126a6 <gpib_write_str+0x28>
   1269e:	6c 01       	movw	r12, r24
   126a0:	c0 e0       	ldi	r28, 0x00	; 0
   126a2:	d0 e0       	ldi	r29, 0x00	; 0
   126a4:	35 c0       	rjmp	.+106    	; 0x12710 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   126a6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   126aa:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   126ae:	85 70       	andi	r24, 0x05	; 5
   126b0:	99 27       	eor	r25, r25
   126b2:	89 2b       	or	r24, r25
   126b4:	09 f4       	brne	.+2      	; 0x126b8 <gpib_write_str+0x3a>
   126b6:	54 c0       	rjmp	.+168    	; 0x12760 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   126b8:	8a e3       	ldi	r24, 0x3A	; 58
   126ba:	90 e1       	ldi	r25, 0x10	; 16
   126bc:	1f 92       	push	r1
   126be:	9f 93       	push	r25
   126c0:	8f 93       	push	r24
   126c2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   126c6:	0f 90       	pop	r0
   126c8:	0f 90       	pop	r0
   126ca:	0f 90       	pop	r0
   126cc:	49 c0       	rjmp	.+146    	; 0x12760 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   126ce:	21 96       	adiw	r28, 0x01	; 1
   126d0:	f6 01       	movw	r30, r12
   126d2:	81 91       	ld	r24, Z+
   126d4:	6f 01       	movw	r12, r30
   126d6:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   126d8:	f7 01       	movw	r30, r14
   126da:	20 81       	ld	r18, Z
   126dc:	31 81       	ldd	r19, Z+1	; 0x01
   126de:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   126e0:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   126e2:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   126e4:	19 c0       	rjmp	.+50     	; 0x12718 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   126e6:	42 db       	rcall	.-2428   	; 0x11d6c <gpib_write_byte>
   126e8:	5c 01       	movw	r10, r24
   126ea:	aa 24       	eor	r10, r10
   126ec:	f0 ed       	ldi	r31, 0xD0	; 208
   126ee:	bf 22       	and	r11, r31
   126f0:	f7 01       	movw	r30, r14
   126f2:	20 81       	ld	r18, Z
   126f4:	31 81       	ldd	r19, Z+1	; 0x01
   126f6:	2a 29       	or	r18, r10
   126f8:	3b 29       	or	r19, r11
   126fa:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   126fc:	20 83       	st	Z, r18
   126fe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12702:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   12706:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   12708:	08 df       	rcall	.-496    	; 0x1251a <gpib_decode>
   1270a:	a1 14       	cp	r10, r1
   1270c:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   1270e:	49 f4       	brne	.+18     	; 0x12722 <gpib_write_str+0xa4>
   12710:	c0 17       	cp	r28, r16
   12712:	d1 07       	cpc	r29, r17
   12714:	e4 f2       	brlt	.-72     	; 0x126ce <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   12716:	05 c0       	rjmp	.+10     	; 0x12722 <gpib_write_str+0xa4>
   12718:	0c 17       	cp	r16, r28
   1271a:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1271c:	21 f7       	brne	.-56     	; 0x126e6 <gpib_write_str+0x68>
   1271e:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   12720:	e2 cf       	rjmp	.-60     	; 0x126e6 <gpib_write_str+0x68>
   12722:	c0 17       	cp	r28, r16
   12724:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   12726:	f1 f0       	breq	.+60     	; 0x12764 <gpib_write_str+0xe6>
   12728:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1272c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12730:	85 70       	andi	r24, 0x05	; 5
   12732:	99 27       	eor	r25, r25
   12734:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   12736:	b1 f0       	breq	.+44     	; 0x12764 <gpib_write_str+0xe6>
   12738:	1f 93       	push	r17
   1273a:	0f 93       	push	r16
   1273c:	df 93       	push	r29
   1273e:	cf 93       	push	r28
   12740:	82 e1       	ldi	r24, 0x12	; 18
   12742:	90 e1       	ldi	r25, 0x10	; 16
   12744:	1f 92       	push	r1
   12746:	9f 93       	push	r25
   12748:	8f 93       	push	r24
   1274a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1274e:	8d b7       	in	r24, 0x3d	; 61
   12750:	9e b7       	in	r25, 0x3e	; 62
   12752:	07 96       	adiw	r24, 0x07	; 7
   12754:	0f b6       	in	r0, 0x3f	; 63
   12756:	f8 94       	cli
   12758:	9e bf       	out	0x3e, r25	; 62
   1275a:	0f be       	out	0x3f, r0	; 63
   1275c:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1275e:	02 c0       	rjmp	.+4      	; 0x12764 <gpib_write_str+0xe6>
   12760:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   12762:	d0 e0       	ldi	r29, 0x00	; 0
   12764:	ce 01       	movw	r24, r28
   12766:	cd b7       	in	r28, 0x3d	; 61
   12768:	de b7       	in	r29, 0x3e	; 62
   1276a:	ea e0       	ldi	r30, 0x0A	; 10
   1276c:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00012770 <gpib_file_init>:
   12770:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   12774:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   12778:	8f eb       	ldi	r24, 0xBF	; 191
   1277a:	91 e0       	ldi	r25, 0x01	; 1
   1277c:	0e 94 0b ba 	call	0x17416	; 0x17416 <POSIX_Read_Config>
   12780:	9f 93       	push	r25
   12782:	8f 93       	push	r24
   12784:	8f eb       	ldi	r24, 0xBF	; 191
   12786:	91 e0       	ldi	r25, 0x01	; 1
   12788:	9f 93       	push	r25
   1278a:	8f 93       	push	r24
   1278c:	80 e5       	ldi	r24, 0x50	; 80
   1278e:	95 e1       	ldi	r25, 0x15	; 21
   12790:	1f 92       	push	r1
   12792:	9f 93       	push	r25
   12794:	8f 93       	push	r24
   12796:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1279a:	0e 94 0a ba 	call	0x17414	; 0x17414 <set_Config_Defaults>
   1279e:	0e 94 95 74 	call	0xe92a	; 0xe92a <mmc_wp_status>
   127a2:	2d b7       	in	r18, 0x3d	; 61
   127a4:	3e b7       	in	r19, 0x3e	; 62
   127a6:	29 5f       	subi	r18, 0xF9	; 249
   127a8:	3f 4f       	sbci	r19, 0xFF	; 255
   127aa:	0f b6       	in	r0, 0x3f	; 63
   127ac:	f8 94       	cli
   127ae:	3e bf       	out	0x3e, r19	; 62
   127b0:	0f be       	out	0x3f, r0	; 63
   127b2:	2d bf       	out	0x3d, r18	; 61
   127b4:	89 2b       	or	r24, r25
   127b6:	51 f0       	breq	.+20     	; 0x127cc <gpib_file_init+0x5c>
   127b8:	87 e3       	ldi	r24, 0x37	; 55
   127ba:	95 e1       	ldi	r25, 0x15	; 21
   127bc:	1f 92       	push	r1
   127be:	9f 93       	push	r25
   127c0:	8f 93       	push	r24
   127c2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   127c6:	0f 90       	pop	r0
   127c8:	0f 90       	pop	r0
   127ca:	0f 90       	pop	r0
   127cc:	08 95       	ret

000127ce <SS80_is_MLA>:
   127ce:	40 e2       	ldi	r20, 0x20	; 32
   127d0:	50 e0       	ldi	r21, 0x00	; 0
   127d2:	bc 01       	movw	r22, r24
   127d4:	82 e0       	ldi	r24, 0x02	; 2
   127d6:	90 e0       	ldi	r25, 0x00	; 0
   127d8:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   127dc:	8f 3f       	cpi	r24, 0xFF	; 255
   127de:	2f ef       	ldi	r18, 0xFF	; 255
   127e0:	92 07       	cpc	r25, r18
   127e2:	19 f0       	breq	.+6      	; 0x127ea <SS80_is_MLA+0x1c>
   127e4:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   127e8:	08 95       	ret
   127ea:	80 e0       	ldi	r24, 0x00	; 0
   127ec:	90 e0       	ldi	r25, 0x00	; 0
   127ee:	08 95       	ret

000127f0 <SS80_is_MTA>:
   127f0:	40 e4       	ldi	r20, 0x40	; 64
   127f2:	50 e0       	ldi	r21, 0x00	; 0
   127f4:	bc 01       	movw	r22, r24
   127f6:	82 e0       	ldi	r24, 0x02	; 2
   127f8:	90 e0       	ldi	r25, 0x00	; 0
   127fa:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   127fe:	8f 3f       	cpi	r24, 0xFF	; 255
   12800:	2f ef       	ldi	r18, 0xFF	; 255
   12802:	92 07       	cpc	r25, r18
   12804:	19 f0       	breq	.+6      	; 0x1280c <SS80_is_MTA+0x1c>
   12806:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   1280a:	08 95       	ret
   1280c:	80 e0       	ldi	r24, 0x00	; 0
   1280e:	90 e0       	ldi	r25, 0x00	; 0
   12810:	08 95       	ret

00012812 <SS80_is_MSA>:
   12812:	40 e6       	ldi	r20, 0x60	; 96
   12814:	50 e0       	ldi	r21, 0x00	; 0
   12816:	bc 01       	movw	r22, r24
   12818:	82 e0       	ldi	r24, 0x02	; 2
   1281a:	90 e0       	ldi	r25, 0x00	; 0
   1281c:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   12820:	8f 3f       	cpi	r24, 0xFF	; 255
   12822:	2f ef       	ldi	r18, 0xFF	; 255
   12824:	92 07       	cpc	r25, r18
   12826:	19 f0       	breq	.+6      	; 0x1282e <SS80_is_MSA+0x1c>
   12828:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   1282c:	08 95       	ret
   1282e:	80 e0       	ldi	r24, 0x00	; 0
   12830:	90 e0       	ldi	r25, 0x00	; 0
   12832:	08 95       	ret

00012834 <AMIGO_is_MLA>:
   12834:	40 e2       	ldi	r20, 0x20	; 32
   12836:	50 e0       	ldi	r21, 0x00	; 0
   12838:	bc 01       	movw	r22, r24
   1283a:	81 e0       	ldi	r24, 0x01	; 1
   1283c:	90 e0       	ldi	r25, 0x00	; 0
   1283e:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   12842:	8f 3f       	cpi	r24, 0xFF	; 255
   12844:	2f ef       	ldi	r18, 0xFF	; 255
   12846:	92 07       	cpc	r25, r18
   12848:	19 f0       	breq	.+6      	; 0x12850 <AMIGO_is_MLA+0x1c>
   1284a:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   1284e:	08 95       	ret
   12850:	80 e0       	ldi	r24, 0x00	; 0
   12852:	90 e0       	ldi	r25, 0x00	; 0
   12854:	08 95       	ret

00012856 <AMIGO_is_MTA>:
   12856:	40 e4       	ldi	r20, 0x40	; 64
   12858:	50 e0       	ldi	r21, 0x00	; 0
   1285a:	bc 01       	movw	r22, r24
   1285c:	81 e0       	ldi	r24, 0x01	; 1
   1285e:	90 e0       	ldi	r25, 0x00	; 0
   12860:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   12864:	8f 3f       	cpi	r24, 0xFF	; 255
   12866:	2f ef       	ldi	r18, 0xFF	; 255
   12868:	92 07       	cpc	r25, r18
   1286a:	19 f0       	breq	.+6      	; 0x12872 <AMIGO_is_MTA+0x1c>
   1286c:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   12870:	08 95       	ret
   12872:	80 e0       	ldi	r24, 0x00	; 0
   12874:	90 e0       	ldi	r25, 0x00	; 0
   12876:	08 95       	ret

00012878 <AMIGO_is_MSA>:
   12878:	40 e6       	ldi	r20, 0x60	; 96
   1287a:	50 e0       	ldi	r21, 0x00	; 0
   1287c:	bc 01       	movw	r22, r24
   1287e:	81 e0       	ldi	r24, 0x01	; 1
   12880:	90 e0       	ldi	r25, 0x00	; 0
   12882:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   12886:	8f 3f       	cpi	r24, 0xFF	; 255
   12888:	2f ef       	ldi	r18, 0xFF	; 255
   1288a:	92 07       	cpc	r25, r18
   1288c:	19 f0       	breq	.+6      	; 0x12894 <AMIGO_is_MSA+0x1c>
   1288e:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   12892:	08 95       	ret
   12894:	80 e0       	ldi	r24, 0x00	; 0
   12896:	90 e0       	ldi	r25, 0x00	; 0
   12898:	08 95       	ret

0001289a <PRINTER_is_MLA>:
   1289a:	40 e2       	ldi	r20, 0x20	; 32
   1289c:	50 e0       	ldi	r21, 0x00	; 0
   1289e:	bc 01       	movw	r22, r24
   128a0:	83 e0       	ldi	r24, 0x03	; 3
   128a2:	90 e0       	ldi	r25, 0x00	; 0
   128a4:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   128a8:	8f 3f       	cpi	r24, 0xFF	; 255
   128aa:	2f ef       	ldi	r18, 0xFF	; 255
   128ac:	92 07       	cpc	r25, r18
   128ae:	19 f0       	breq	.+6      	; 0x128b6 <PRINTER_is_MLA+0x1c>
   128b0:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   128b4:	08 95       	ret
   128b6:	80 e0       	ldi	r24, 0x00	; 0
   128b8:	90 e0       	ldi	r25, 0x00	; 0
   128ba:	08 95       	ret

000128bc <PRINTER_is_MTA>:
   128bc:	40 e4       	ldi	r20, 0x40	; 64
   128be:	50 e0       	ldi	r21, 0x00	; 0
   128c0:	bc 01       	movw	r22, r24
   128c2:	83 e0       	ldi	r24, 0x03	; 3
   128c4:	90 e0       	ldi	r25, 0x00	; 0
   128c6:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   128ca:	8f 3f       	cpi	r24, 0xFF	; 255
   128cc:	2f ef       	ldi	r18, 0xFF	; 255
   128ce:	92 07       	cpc	r25, r18
   128d0:	19 f0       	breq	.+6      	; 0x128d8 <PRINTER_is_MTA+0x1c>
   128d2:	0c 94 8c b7 	jmp	0x16f18	; 0x16f18 <set_active_device>
   128d6:	08 95       	ret
   128d8:	80 e0       	ldi	r24, 0x00	; 0
   128da:	90 e0       	ldi	r25, 0x00	; 0
   128dc:	08 95       	ret

000128de <gpib_init_devices>:
   128de:	2f d9       	rcall	.-3490   	; 0x11b3e <gpib_bus_init>
   128e0:	0e 94 2a a4 	call	0x14854	; 0x14854 <SS80_init>
   128e4:	0e 94 ae a9 	call	0x1535c	; 0x1535c <amigo_init>
   128e8:	0c 94 96 b4 	jmp	0x1692c	; 0x1692c <printer_close>
   128ec:	08 95       	ret

000128ee <gpib_trace_task>:
   128ee:	0f 93       	push	r16
   128f0:	1f 93       	push	r17
   128f2:	cf 93       	push	r28
   128f4:	df 93       	push	r29
   128f6:	eb 01       	movw	r28, r22
   128f8:	00 97       	sbiw	r24, 0x00	; 0
   128fa:	09 f4       	brne	.+2      	; 0x128fe <gpib_trace_task+0x10>
   128fc:	42 c0       	rjmp	.+132    	; 0x12982 <gpib_trace_task+0x94>
   128fe:	fc 01       	movw	r30, r24
   12900:	20 81       	ld	r18, Z
   12902:	22 23       	and	r18, r18
   12904:	f1 f1       	breq	.+124    	; 0x12982 <gpib_trace_task+0x94>
   12906:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
   1290a:	8c 01       	movw	r16, r24
   1290c:	1f 93       	push	r17
   1290e:	8f 93       	push	r24
   12910:	8d e1       	ldi	r24, 0x1D	; 29
   12912:	95 e1       	ldi	r25, 0x15	; 21
   12914:	1f 92       	push	r1
   12916:	9f 93       	push	r25
   12918:	8f 93       	push	r24
   1291a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1291e:	0f 90       	pop	r0
   12920:	0f 90       	pop	r0
   12922:	0f 90       	pop	r0
   12924:	0f 90       	pop	r0
   12926:	0f 90       	pop	r0
   12928:	20 97       	sbiw	r28, 0x00	; 0
   1292a:	51 f0       	breq	.+20     	; 0x12940 <gpib_trace_task+0x52>
   1292c:	82 ef       	ldi	r24, 0xF2	; 242
   1292e:	94 e1       	ldi	r25, 0x14	; 20
   12930:	1f 92       	push	r1
   12932:	9f 93       	push	r25
   12934:	8f 93       	push	r24
   12936:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1293a:	0f 90       	pop	r0
   1293c:	0f 90       	pop	r0
   1293e:	0f 90       	pop	r0
   12940:	8b ed       	ldi	r24, 0xDB	; 219
   12942:	94 e1       	ldi	r25, 0x14	; 20
   12944:	1f 92       	push	r1
   12946:	9f 93       	push	r25
   12948:	8f 93       	push	r24
   1294a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1294e:	6e e7       	ldi	r22, 0x7E	; 126
   12950:	78 e0       	ldi	r23, 0x08	; 8
   12952:	c8 01       	movw	r24, r16
   12954:	0e 94 b3 83 	call	0x10766	; 0x10766 <fopen>
   12958:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   1295c:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
   12960:	0f 90       	pop	r0
   12962:	0f 90       	pop	r0
   12964:	0f 90       	pop	r0
   12966:	89 2b       	or	r24, r25
   12968:	a1 f4       	brne	.+40     	; 0x12992 <gpib_trace_task+0xa4>
   1296a:	8c e2       	ldi	r24, 0x2C	; 44
   1296c:	9d e0       	ldi	r25, 0x0D	; 13
   1296e:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <perror>
   12972:	8f ec       	ldi	r24, 0xCF	; 207
   12974:	94 e1       	ldi	r25, 0x14	; 20
   12976:	1f 92       	push	r1
   12978:	9f 93       	push	r25
   1297a:	8f 93       	push	r24
   1297c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12980:	3b c0       	rjmp	.+118    	; 0x129f8 <gpib_trace_task+0x10a>
   12982:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   12986:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   1298a:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   1298e:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
   12992:	fd d8       	rcall	.-3590   	; 0x11b8e <gpib_state_init>
   12994:	a4 df       	rcall	.-184    	; 0x128de <gpib_init_devices>
   12996:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   1299a:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   1299e:	4e db       	rcall	.-2404   	; 0x1203c <gpib_decode_header>
   129a0:	80 e0       	ldi	r24, 0x00	; 0
   129a2:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   129a6:	89 2b       	or	r24, r25
   129a8:	31 f4       	brne	.+12     	; 0x129b6 <gpib_trace_task+0xc8>
   129aa:	ce 01       	movw	r24, r28
   129ac:	e0 dc       	rcall	.-1600   	; 0x1236e <gpib_read_byte>
   129ae:	20 97       	sbiw	r28, 0x00	; 0
   129b0:	b9 f7       	brne	.-18     	; 0x129a0 <gpib_trace_task+0xb2>
   129b2:	b3 dd       	rcall	.-1178   	; 0x1251a <gpib_decode>
   129b4:	f5 cf       	rjmp	.-22     	; 0x129a0 <gpib_trace_task+0xb2>
   129b6:	89 ec       	ldi	r24, 0xC9	; 201
   129b8:	94 e1       	ldi	r25, 0x14	; 20
   129ba:	1f 92       	push	r1
   129bc:	9f 93       	push	r25
   129be:	8f 93       	push	r24
   129c0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   129c4:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   129c8:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   129cc:	0f 90       	pop	r0
   129ce:	0f 90       	pop	r0
   129d0:	0f 90       	pop	r0
   129d2:	00 97       	sbiw	r24, 0x00	; 0
   129d4:	a1 f0       	breq	.+40     	; 0x129fe <gpib_trace_task+0x110>
   129d6:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
   129da:	87 eb       	ldi	r24, 0xB7	; 183
   129dc:	94 e1       	ldi	r25, 0x14	; 20
   129de:	1f 92       	push	r1
   129e0:	9f 93       	push	r25
   129e2:	8f 93       	push	r24
   129e4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   129e8:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   129ec:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   129f0:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   129f4:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
   129f8:	0f 90       	pop	r0
   129fa:	0f 90       	pop	r0
   129fc:	0f 90       	pop	r0
   129fe:	df 91       	pop	r29
   12a00:	cf 91       	pop	r28
   12a02:	1f 91       	pop	r17
   12a04:	0f 91       	pop	r16
   12a06:	08 95       	ret

00012a08 <gpib_error_test>:
   12a08:	ef 92       	push	r14
   12a0a:	ff 92       	push	r15
   12a0c:	0f 93       	push	r16
   12a0e:	1f 93       	push	r17
   12a10:	cf 93       	push	r28
   12a12:	df 93       	push	r29
   12a14:	7c 01       	movw	r14, r24
   12a16:	ec 01       	movw	r28, r24
   12a18:	cc 27       	eor	r28, r28
   12a1a:	d0 7d       	andi	r29, 0xD0	; 208
   12a1c:	20 97       	sbiw	r28, 0x00	; 0
   12a1e:	61 f0       	breq	.+24     	; 0x12a38 <gpib_error_test+0x30>
   12a20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12a24:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12a28:	8e 72       	andi	r24, 0x2E	; 46
   12a2a:	99 27       	eor	r25, r25
   12a2c:	87 01       	movw	r16, r14
   12a2e:	00 27       	eor	r16, r16
   12a30:	10 71       	andi	r17, 0x10	; 16
   12a32:	89 2b       	or	r24, r25
   12a34:	59 f4       	brne	.+22     	; 0x12a4c <gpib_error_test+0x44>
   12a36:	17 c0       	rjmp	.+46     	; 0x12a66 <gpib_error_test+0x5e>
   12a38:	80 e0       	ldi	r24, 0x00	; 0
   12a3a:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   12a3e:	89 2b       	or	r24, r25
   12a40:	79 f7       	brne	.-34     	; 0x12a20 <gpib_error_test+0x18>
   12a42:	0e 94 92 74 	call	0xe924	; 0xe924 <mmc_ins_status>
   12a46:	01 97       	sbiw	r24, 0x01	; 1
   12a48:	59 f7       	brne	.-42     	; 0x12a20 <gpib_error_test+0x18>
   12a4a:	62 c0       	rjmp	.+196    	; 0x12b10 <gpib_error_test+0x108>
   12a4c:	01 15       	cp	r16, r1
   12a4e:	11 05       	cpc	r17, r1
   12a50:	51 f0       	breq	.+20     	; 0x12a66 <gpib_error_test+0x5e>
   12a52:	80 eb       	ldi	r24, 0xB0	; 176
   12a54:	94 e1       	ldi	r25, 0x14	; 20
   12a56:	1f 92       	push	r1
   12a58:	9f 93       	push	r25
   12a5a:	8f 93       	push	r24
   12a5c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12a60:	0f 90       	pop	r0
   12a62:	0f 90       	pop	r0
   12a64:	0f 90       	pop	r0
   12a66:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12a6a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12a6e:	85 70       	andi	r24, 0x05	; 5
   12a70:	99 27       	eor	r25, r25
   12a72:	89 2b       	or	r24, r25
   12a74:	c1 f0       	breq	.+48     	; 0x12aa6 <gpib_error_test+0x9e>
   12a76:	f6 fe       	sbrs	r15, 6
   12a78:	0a c0       	rjmp	.+20     	; 0x12a8e <gpib_error_test+0x86>
   12a7a:	85 ea       	ldi	r24, 0xA5	; 165
   12a7c:	94 e1       	ldi	r25, 0x14	; 20
   12a7e:	1f 92       	push	r1
   12a80:	9f 93       	push	r25
   12a82:	8f 93       	push	r24
   12a84:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12a88:	0f 90       	pop	r0
   12a8a:	0f 90       	pop	r0
   12a8c:	0f 90       	pop	r0
   12a8e:	d7 ff       	sbrs	r29, 7
   12a90:	0a c0       	rjmp	.+20     	; 0x12aa6 <gpib_error_test+0x9e>
   12a92:	8e e9       	ldi	r24, 0x9E	; 158
   12a94:	94 e1       	ldi	r25, 0x14	; 20
   12a96:	1f 92       	push	r1
   12a98:	9f 93       	push	r25
   12a9a:	8f 93       	push	r24
   12a9c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12aa0:	0f 90       	pop	r0
   12aa2:	0f 90       	pop	r0
   12aa4:	0f 90       	pop	r0
   12aa6:	80 e0       	ldi	r24, 0x00	; 0
   12aa8:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   12aac:	89 2b       	or	r24, r25
   12aae:	51 f0       	breq	.+20     	; 0x12ac4 <gpib_error_test+0xbc>
   12ab0:	81 e9       	ldi	r24, 0x91	; 145
   12ab2:	94 e1       	ldi	r25, 0x14	; 20
   12ab4:	1f 92       	push	r1
   12ab6:	9f 93       	push	r25
   12ab8:	8f 93       	push	r24
   12aba:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12abe:	0f 90       	pop	r0
   12ac0:	0f 90       	pop	r0
   12ac2:	0f 90       	pop	r0
   12ac4:	0e 94 92 74 	call	0xe924	; 0xe924 <mmc_ins_status>
   12ac8:	01 97       	sbiw	r24, 0x01	; 1
   12aca:	51 f0       	breq	.+20     	; 0x12ae0 <gpib_error_test+0xd8>
   12acc:	80 e8       	ldi	r24, 0x80	; 128
   12ace:	94 e1       	ldi	r25, 0x14	; 20
   12ad0:	1f 92       	push	r1
   12ad2:	9f 93       	push	r25
   12ad4:	8f 93       	push	r24
   12ad6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12ada:	0f 90       	pop	r0
   12adc:	0f 90       	pop	r0
   12ade:	0f 90       	pop	r0
   12ae0:	01 15       	cp	r16, r1
   12ae2:	11 05       	cpc	r17, r1
   12ae4:	09 f0       	breq	.+2      	; 0x12ae8 <gpib_error_test+0xe0>
   12ae6:	fb de       	rcall	.-522    	; 0x128de <gpib_init_devices>
   12ae8:	80 e0       	ldi	r24, 0x00	; 0
   12aea:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   12aee:	89 2b       	or	r24, r25
   12af0:	11 f0       	breq	.+4      	; 0x12af6 <gpib_error_test+0xee>
   12af2:	f5 de       	rcall	.-534    	; 0x128de <gpib_init_devices>
   12af4:	0b c0       	rjmp	.+22     	; 0x12b0c <gpib_error_test+0x104>
   12af6:	0e 94 92 74 	call	0xe924	; 0xe924 <mmc_ins_status>
   12afa:	01 97       	sbiw	r24, 0x01	; 1
   12afc:	39 f4       	brne	.+14     	; 0x12b0c <gpib_error_test+0x104>
   12afe:	01 15       	cp	r16, r1
   12b00:	11 05       	cpc	r17, r1
   12b02:	31 f0       	breq	.+12     	; 0x12b10 <gpib_error_test+0x108>
   12b04:	54 98       	cbi	0x0a, 4	; 10
   12b06:	4c 9b       	sbis	0x09, 4	; 9
   12b08:	fd cf       	rjmp	.-6      	; 0x12b04 <gpib_error_test+0xfc>
   12b0a:	02 c0       	rjmp	.+4      	; 0x12b10 <gpib_error_test+0x108>
   12b0c:	c1 e0       	ldi	r28, 0x01	; 1
   12b0e:	d0 e0       	ldi	r29, 0x00	; 0
   12b10:	ce 01       	movw	r24, r28
   12b12:	cd b7       	in	r28, 0x3d	; 61
   12b14:	de b7       	in	r29, 0x3e	; 62
   12b16:	e6 e0       	ldi	r30, 0x06	; 6
   12b18:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00012b1c <GPIB_COMMANDS>:
   12b1c:	1f 93       	push	r17
   12b1e:	cf 93       	push	r28
   12b20:	df 93       	push	r29
   12b22:	ec 01       	movw	r28, r24
   12b24:	16 2f       	mov	r17, r22
   12b26:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12b2a:	8f 35       	cpi	r24, 0x5F	; 95
   12b2c:	91 f0       	breq	.+36     	; 0x12b52 <GPIB_COMMANDS+0x36>
   12b2e:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12b32:	90 e0       	ldi	r25, 0x00	; 0
   12b34:	7f de       	rcall	.-770    	; 0x12834 <AMIGO_is_MLA>
   12b36:	89 2b       	or	r24, r25
   12b38:	c9 f4       	brne	.+50     	; 0x12b6c <GPIB_COMMANDS+0x50>
   12b3a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12b3e:	90 e0       	ldi	r25, 0x00	; 0
   12b40:	46 de       	rcall	.-884    	; 0x127ce <SS80_is_MLA>
   12b42:	89 2b       	or	r24, r25
   12b44:	11 f5       	brne	.+68     	; 0x12b8a <GPIB_COMMANDS+0x6e>
   12b46:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12b4a:	90 e0       	ldi	r25, 0x00	; 0
   12b4c:	a6 de       	rcall	.-692    	; 0x1289a <PRINTER_is_MLA>
   12b4e:	89 2b       	or	r24, r25
   12b50:	59 f5       	brne	.+86     	; 0x12ba8 <GPIB_COMMANDS+0x8c>
   12b52:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12b56:	8f 33       	cpi	r24, 0x3F	; 63
   12b58:	19 f4       	brne	.+6      	; 0x12b60 <GPIB_COMMANDS+0x44>
   12b5a:	80 e0       	ldi	r24, 0x00	; 0
   12b5c:	90 e0       	ldi	r25, 0x00	; 0
   12b5e:	2e c0       	rjmp	.+92     	; 0x12bbc <GPIB_COMMANDS+0xa0>
   12b60:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12b64:	90 e0       	ldi	r25, 0x00	; 0
   12b66:	77 de       	rcall	.-786    	; 0x12856 <AMIGO_is_MTA>
   12b68:	89 2b       	or	r24, r25
   12b6a:	49 f0       	breq	.+18     	; 0x12b7e <GPIB_COMMANDS+0x62>
   12b6c:	11 23       	and	r17, r17
   12b6e:	11 f0       	breq	.+4      	; 0x12b74 <GPIB_COMMANDS+0x58>
   12b70:	ce 01       	movw	r24, r28
   12b72:	b5 d8       	rcall	.-3734   	; 0x11cde <gpib_unread>
   12b74:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
   12b78:	0e 94 97 b3 	call	0x1672e	; 0x1672e <AMIGO_COMMANDS>
   12b7c:	1d c0       	rjmp	.+58     	; 0x12bb8 <GPIB_COMMANDS+0x9c>
   12b7e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12b82:	90 e0       	ldi	r25, 0x00	; 0
   12b84:	35 de       	rcall	.-918    	; 0x127f0 <SS80_is_MTA>
   12b86:	89 2b       	or	r24, r25
   12b88:	49 f0       	breq	.+18     	; 0x12b9c <GPIB_COMMANDS+0x80>
   12b8a:	11 23       	and	r17, r17
   12b8c:	11 f0       	breq	.+4      	; 0x12b92 <GPIB_COMMANDS+0x76>
   12b8e:	ce 01       	movw	r24, r28
   12b90:	a6 d8       	rcall	.-3764   	; 0x11cde <gpib_unread>
   12b92:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
   12b96:	0e 94 08 a8 	call	0x15010	; 0x15010 <SS80_COMMANDS>
   12b9a:	0e c0       	rjmp	.+28     	; 0x12bb8 <GPIB_COMMANDS+0x9c>
   12b9c:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12ba0:	90 e0       	ldi	r25, 0x00	; 0
   12ba2:	8c de       	rcall	.-744    	; 0x128bc <PRINTER_is_MTA>
   12ba4:	89 2b       	or	r24, r25
   12ba6:	c9 f2       	breq	.-78     	; 0x12b5a <GPIB_COMMANDS+0x3e>
   12ba8:	11 23       	and	r17, r17
   12baa:	11 f0       	breq	.+4      	; 0x12bb0 <GPIB_COMMANDS+0x94>
   12bac:	ce 01       	movw	r24, r28
   12bae:	97 d8       	rcall	.-3794   	; 0x11cde <gpib_unread>
   12bb0:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
   12bb4:	0e 94 f7 b5 	call	0x16bee	; 0x16bee <PRINTER_COMMANDS>
   12bb8:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
   12bbc:	df 91       	pop	r29
   12bbe:	cf 91       	pop	r28
   12bc0:	1f 91       	pop	r17
   12bc2:	08 95       	ret

00012bc4 <Send_Identify>:
   12bc4:	a4 e0       	ldi	r26, 0x04	; 4
   12bc6:	b0 e0       	ldi	r27, 0x00	; 0
   12bc8:	e8 ee       	ldi	r30, 0xE8	; 232
   12bca:	f5 e9       	ldi	r31, 0x95	; 149
   12bcc:	0c 94 26 eb 	jmp	0x1d64c	; 0x1d64c <__prologue_saves__+0x16>
   12bd0:	d8 2e       	mov	r13, r24
   12bd2:	7b 01       	movw	r14, r22
   12bd4:	80 e0       	ldi	r24, 0x00	; 0
   12bd6:	91 e0       	ldi	r25, 0x01	; 1
   12bd8:	9c 83       	std	Y+4, r25	; 0x04
   12bda:	8b 83       	std	Y+3, r24	; 0x03
   12bdc:	8b 01       	movw	r16, r22
   12bde:	20 e0       	ldi	r18, 0x00	; 0
   12be0:	30 e0       	ldi	r19, 0x00	; 0
   12be2:	42 e0       	ldi	r20, 0x02	; 2
   12be4:	50 e0       	ldi	r21, 0x00	; 0
   12be6:	60 e0       	ldi	r22, 0x00	; 0
   12be8:	70 e0       	ldi	r23, 0x00	; 0
   12bea:	ce 01       	movw	r24, r28
   12bec:	01 96       	adiw	r24, 0x01	; 1
   12bee:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   12bf2:	ae 01       	movw	r20, r28
   12bf4:	4d 5f       	subi	r20, 0xFD	; 253
   12bf6:	5f 4f       	sbci	r21, 0xFF	; 255
   12bf8:	62 e0       	ldi	r22, 0x02	; 2
   12bfa:	70 e0       	ldi	r23, 0x00	; 0
   12bfc:	ce 01       	movw	r24, r28
   12bfe:	01 96       	adiw	r24, 0x01	; 1
   12c00:	3e dd       	rcall	.-1412   	; 0x1267e <gpib_write_str>
   12c02:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12c06:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12c0a:	02 97       	sbiw	r24, 0x02	; 2
   12c0c:	59 f0       	breq	.+22     	; 0x12c24 <Send_Identify+0x60>
   12c0e:	25 70       	andi	r18, 0x05	; 5
   12c10:	33 27       	eor	r19, r19
   12c12:	23 2b       	or	r18, r19
   12c14:	c9 f0       	breq	.+50     	; 0x12c48 <Send_Identify+0x84>
   12c16:	ff 92       	push	r15
   12c18:	ef 92       	push	r14
   12c1a:	1f 92       	push	r1
   12c1c:	df 92       	push	r13
   12c1e:	8f e5       	ldi	r24, 0x5F	; 95
   12c20:	94 e1       	ldi	r25, 0x14	; 20
   12c22:	08 c0       	rjmp	.+16     	; 0x12c34 <Send_Identify+0x70>
   12c24:	22 ff       	sbrs	r18, 2
   12c26:	10 c0       	rjmp	.+32     	; 0x12c48 <Send_Identify+0x84>
   12c28:	ff 92       	push	r15
   12c2a:	ef 92       	push	r14
   12c2c:	1f 92       	push	r1
   12c2e:	df 92       	push	r13
   12c30:	85 e4       	ldi	r24, 0x45	; 69
   12c32:	94 e1       	ldi	r25, 0x14	; 20
   12c34:	1f 92       	push	r1
   12c36:	9f 93       	push	r25
   12c38:	8f 93       	push	r24
   12c3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12c3e:	0f b6       	in	r0, 0x3f	; 63
   12c40:	f8 94       	cli
   12c42:	de bf       	out	0x3e, r29	; 62
   12c44:	0f be       	out	0x3f, r0	; 63
   12c46:	cd bf       	out	0x3d, r28	; 61
   12c48:	8b 81       	ldd	r24, Y+3	; 0x03
   12c4a:	9c 81       	ldd	r25, Y+4	; 0x04
   12c4c:	88 27       	eor	r24, r24
   12c4e:	90 7d       	andi	r25, 0xD0	; 208
   12c50:	24 96       	adiw	r28, 0x04	; 4
   12c52:	e7 e0       	ldi	r30, 0x07	; 7
   12c54:	0c 94 42 eb 	jmp	0x1d684	; 0x1d684 <__epilogue_restores__+0x16>

00012c58 <GPIB>:
   12c58:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12c5c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12c60:	85 30       	cpi	r24, 0x05	; 5
   12c62:	89 f4       	brne	.+34     	; 0x12c86 <GPIB+0x2e>
   12c64:	24 71       	andi	r18, 0x14	; 20
   12c66:	33 27       	eor	r19, r19
   12c68:	23 2b       	or	r18, r19
   12c6a:	51 f0       	breq	.+20     	; 0x12c80 <GPIB+0x28>
   12c6c:	82 e3       	ldi	r24, 0x32	; 50
   12c6e:	94 e1       	ldi	r25, 0x14	; 20
   12c70:	1f 92       	push	r1
   12c72:	9f 93       	push	r25
   12c74:	8f 93       	push	r24
   12c76:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12c7a:	0f 90       	pop	r0
   12c7c:	0f 90       	pop	r0
   12c7e:	0f 90       	pop	r0
   12c80:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <spoll>
   12c84:	9d c0       	rjmp	.+314    	; 0x12dc0 <GPIB+0x168>
   12c86:	85 31       	cpi	r24, 0x15	; 21
   12c88:	39 f4       	brne	.+14     	; 0x12c98 <GPIB+0x40>
   12c8a:	24 71       	andi	r18, 0x14	; 20
   12c8c:	33 27       	eor	r19, r19
   12c8e:	23 2b       	or	r18, r19
   12c90:	b9 f3       	breq	.-18     	; 0x12c80 <GPIB+0x28>
   12c92:	8f e1       	ldi	r24, 0x1F	; 31
   12c94:	94 e1       	ldi	r25, 0x14	; 20
   12c96:	ec cf       	rjmp	.-40     	; 0x12c70 <GPIB+0x18>
   12c98:	88 31       	cpi	r24, 0x18	; 24
   12c9a:	c9 f4       	brne	.+50     	; 0x12cce <GPIB+0x76>
   12c9c:	22 ff       	sbrs	r18, 2
   12c9e:	0a c0       	rjmp	.+20     	; 0x12cb4 <GPIB+0x5c>
   12ca0:	88 e1       	ldi	r24, 0x18	; 24
   12ca2:	94 e1       	ldi	r25, 0x14	; 20
   12ca4:	1f 92       	push	r1
   12ca6:	9f 93       	push	r25
   12ca8:	8f 93       	push	r24
   12caa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12cae:	0f 90       	pop	r0
   12cb0:	0f 90       	pop	r0
   12cb2:	0f 90       	pop	r0
   12cb4:	81 e0       	ldi	r24, 0x01	; 1
   12cb6:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <spoll>
   12cba:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12cbe:	90 e0       	ldi	r25, 0x00	; 0
   12cc0:	97 dd       	rcall	.-1234   	; 0x127f0 <SS80_is_MTA>
   12cc2:	89 2b       	or	r24, r25
   12cc4:	09 f4       	brne	.+2      	; 0x12cc8 <GPIB+0x70>
   12cc6:	7c c0       	rjmp	.+248    	; 0x12dc0 <GPIB+0x168>
   12cc8:	0c 94 bd a3 	jmp	0x1477a	; 0x1477a <SS80_Report>
   12ccc:	08 95       	ret
   12cce:	89 31       	cpi	r24, 0x19	; 25
   12cd0:	29 f4       	brne	.+10     	; 0x12cdc <GPIB+0x84>
   12cd2:	22 ff       	sbrs	r18, 2
   12cd4:	d5 cf       	rjmp	.-86     	; 0x12c80 <GPIB+0x28>
   12cd6:	81 e1       	ldi	r24, 0x11	; 17
   12cd8:	94 e1       	ldi	r25, 0x14	; 20
   12cda:	ca cf       	rjmp	.-108    	; 0x12c70 <GPIB+0x18>
   12cdc:	84 30       	cpi	r24, 0x04	; 4
   12cde:	09 f0       	breq	.+2      	; 0x12ce2 <GPIB+0x8a>
   12ce0:	48 c0       	rjmp	.+144    	; 0x12d72 <GPIB+0x11a>
   12ce2:	22 ff       	sbrs	r18, 2
   12ce4:	0a c0       	rjmp	.+20     	; 0x12cfa <GPIB+0xa2>
   12ce6:	8a e0       	ldi	r24, 0x0A	; 10
   12ce8:	94 e1       	ldi	r25, 0x14	; 20
   12cea:	1f 92       	push	r1
   12cec:	9f 93       	push	r25
   12cee:	8f 93       	push	r24
   12cf0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12cf4:	0f 90       	pop	r0
   12cf6:	0f 90       	pop	r0
   12cf8:	0f 90       	pop	r0
   12cfa:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12cfe:	90 e0       	ldi	r25, 0x00	; 0
   12d00:	66 dd       	rcall	.-1332   	; 0x127ce <SS80_is_MLA>
   12d02:	89 2b       	or	r24, r25
   12d04:	d9 f0       	breq	.+54     	; 0x12d3c <GPIB+0xe4>
   12d06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12d0a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12d0e:	84 72       	andi	r24, 0x24	; 36
   12d10:	99 27       	eor	r25, r25
   12d12:	89 2b       	or	r24, r25
   12d14:	51 f0       	breq	.+20     	; 0x12d2a <GPIB+0xd2>
   12d16:	8e ef       	ldi	r24, 0xFE	; 254
   12d18:	93 e1       	ldi	r25, 0x13	; 19
   12d1a:	1f 92       	push	r1
   12d1c:	9f 93       	push	r25
   12d1e:	8f 93       	push	r24
   12d20:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12d24:	0f 90       	pop	r0
   12d26:	0f 90       	pop	r0
   12d28:	0f 90       	pop	r0
   12d2a:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   12d2e:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   12d32:	85 81       	ldd	r24, Z+5	; 0x05
   12d34:	90 e0       	ldi	r25, 0x00	; 0
   12d36:	0c 94 8a a4 	jmp	0x14914	; 0x14914 <SS80_Selected_Device_Clear>
   12d3a:	08 95       	ret
   12d3c:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12d40:	90 e0       	ldi	r25, 0x00	; 0
   12d42:	78 dd       	rcall	.-1296   	; 0x12834 <AMIGO_is_MLA>
   12d44:	89 2b       	or	r24, r25
   12d46:	e1 f1       	breq	.+120    	; 0x12dc0 <GPIB+0x168>
   12d48:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12d4c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12d50:	84 72       	andi	r24, 0x24	; 36
   12d52:	99 27       	eor	r25, r25
   12d54:	89 2b       	or	r24, r25
   12d56:	51 f0       	breq	.+20     	; 0x12d6c <GPIB+0x114>
   12d58:	81 ef       	ldi	r24, 0xF1	; 241
   12d5a:	93 e1       	ldi	r25, 0x13	; 19
   12d5c:	1f 92       	push	r1
   12d5e:	9f 93       	push	r25
   12d60:	8f 93       	push	r24
   12d62:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12d66:	0f 90       	pop	r0
   12d68:	0f 90       	pop	r0
   12d6a:	0f 90       	pop	r0
   12d6c:	0c 94 6a ae 	jmp	0x15cd4	; 0x15cd4 <amigo_cmd_clear>
   12d70:	08 95       	ret
   12d72:	84 31       	cpi	r24, 0x14	; 20
   12d74:	99 f4       	brne	.+38     	; 0x12d9c <GPIB+0x144>
   12d76:	22 ff       	sbrs	r18, 2
   12d78:	0a c0       	rjmp	.+20     	; 0x12d8e <GPIB+0x136>
   12d7a:	8a ee       	ldi	r24, 0xEA	; 234
   12d7c:	93 e1       	ldi	r25, 0x13	; 19
   12d7e:	1f 92       	push	r1
   12d80:	9f 93       	push	r25
   12d82:	8f 93       	push	r24
   12d84:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12d88:	0f 90       	pop	r0
   12d8a:	0f 90       	pop	r0
   12d8c:	0f 90       	pop	r0
   12d8e:	0e 94 7c a4 	call	0x148f8	; 0x148f8 <SS80_Universal_Device_Clear>
   12d92:	0e 94 6a ae 	call	0x15cd4	; 0x15cd4 <amigo_cmd_clear>
   12d96:	0e 94 96 b4 	call	0x1692c	; 0x1692c <printer_close>
   12d9a:	12 c0       	rjmp	.+36     	; 0x12dc0 <GPIB+0x168>
   12d9c:	25 71       	andi	r18, 0x15	; 21
   12d9e:	33 27       	eor	r19, r19
   12da0:	23 2b       	or	r18, r19
   12da2:	71 f0       	breq	.+28     	; 0x12dc0 <GPIB+0x168>
   12da4:	1f 92       	push	r1
   12da6:	8f 93       	push	r24
   12da8:	8e ec       	ldi	r24, 0xCE	; 206
   12daa:	93 e1       	ldi	r25, 0x13	; 19
   12dac:	1f 92       	push	r1
   12dae:	9f 93       	push	r25
   12db0:	8f 93       	push	r24
   12db2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12db6:	0f 90       	pop	r0
   12db8:	0f 90       	pop	r0
   12dba:	0f 90       	pop	r0
   12dbc:	0f 90       	pop	r0
   12dbe:	0f 90       	pop	r0
   12dc0:	80 e0       	ldi	r24, 0x00	; 0
   12dc2:	90 e0       	ldi	r25, 0x00	; 0
   12dc4:	08 95       	ret

00012dc6 <GPIB_TALK>:
   12dc6:	0f 93       	push	r16
   12dc8:	1f 93       	push	r17
   12dca:	cf 93       	push	r28
   12dcc:	c8 2f       	mov	r28, r24
   12dce:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12dd2:	80 93 f4 1e 	sts	0x1EF4, r24	; 0x801ef4 <talking_last>
   12dd6:	c0 93 f1 1e 	sts	0x1EF1, r28	; 0x801ef1 <talking>
   12dda:	cf 35       	cpi	r28, 0x5F	; 95
   12ddc:	79 f4       	brne	.+30     	; 0x12dfc <GPIB_TALK+0x36>
   12dde:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12de2:	82 ff       	sbrs	r24, 2
   12de4:	7f c0       	rjmp	.+254    	; 0x12ee4 <GPIB_TALK+0x11e>
   12de6:	8b e7       	ldi	r24, 0x7B	; 123
   12de8:	93 e1       	ldi	r25, 0x13	; 19
   12dea:	1f 92       	push	r1
   12dec:	9f 93       	push	r25
   12dee:	8f 93       	push	r24
   12df0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12df4:	0f 90       	pop	r0
   12df6:	0f 90       	pop	r0
   12df8:	0f 90       	pop	r0
   12dfa:	74 c0       	rjmp	.+232    	; 0x12ee4 <GPIB_TALK+0x11e>
   12dfc:	0c 2f       	mov	r16, r28
   12dfe:	10 e0       	ldi	r17, 0x00	; 0
   12e00:	c8 01       	movw	r24, r16
   12e02:	f6 dc       	rcall	.-1556   	; 0x127f0 <SS80_is_MTA>
   12e04:	89 2b       	or	r24, r25
   12e06:	f1 f0       	breq	.+60     	; 0x12e44 <GPIB_TALK+0x7e>
   12e08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e0c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e10:	84 72       	andi	r24, 0x24	; 36
   12e12:	99 27       	eor	r25, r25
   12e14:	89 2b       	or	r24, r25
   12e16:	71 f0       	breq	.+28     	; 0x12e34 <GPIB_TALK+0x6e>
   12e18:	1f 92       	push	r1
   12e1a:	cf 93       	push	r28
   12e1c:	8a e6       	ldi	r24, 0x6A	; 106
   12e1e:	93 e1       	ldi	r25, 0x13	; 19
   12e20:	1f 92       	push	r1
   12e22:	9f 93       	push	r25
   12e24:	8f 93       	push	r24
   12e26:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12e2a:	0f 90       	pop	r0
   12e2c:	0f 90       	pop	r0
   12e2e:	0f 90       	pop	r0
   12e30:	0f 90       	pop	r0
   12e32:	0f 90       	pop	r0
   12e34:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <spoll>
   12e38:	88 23       	and	r24, r24
   12e3a:	09 f4       	brne	.+2      	; 0x12e3e <GPIB_TALK+0x78>
   12e3c:	53 c0       	rjmp	.+166    	; 0x12ee4 <GPIB_TALK+0x11e>
   12e3e:	0e 94 bd a3 	call	0x1477a	; 0x1477a <SS80_Report>
   12e42:	50 c0       	rjmp	.+160    	; 0x12ee4 <GPIB_TALK+0x11e>
   12e44:	c8 01       	movw	r24, r16
   12e46:	07 dd       	rcall	.-1522   	; 0x12856 <AMIGO_is_MTA>
   12e48:	89 2b       	or	r24, r25
   12e4a:	71 f0       	breq	.+28     	; 0x12e68 <GPIB_TALK+0xa2>
   12e4c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e50:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e54:	84 72       	andi	r24, 0x24	; 36
   12e56:	99 27       	eor	r25, r25
   12e58:	89 2b       	or	r24, r25
   12e5a:	09 f4       	brne	.+2      	; 0x12e5e <GPIB_TALK+0x98>
   12e5c:	43 c0       	rjmp	.+134    	; 0x12ee4 <GPIB_TALK+0x11e>
   12e5e:	1f 92       	push	r1
   12e60:	cf 93       	push	r28
   12e62:	88 e5       	ldi	r24, 0x58	; 88
   12e64:	93 e1       	ldi	r25, 0x13	; 19
   12e66:	34 c0       	rjmp	.+104    	; 0x12ed0 <GPIB_TALK+0x10a>
   12e68:	c8 01       	movw	r24, r16
   12e6a:	28 dd       	rcall	.-1456   	; 0x128bc <PRINTER_is_MTA>
   12e6c:	89 2b       	or	r24, r25
   12e6e:	69 f0       	breq	.+26     	; 0x12e8a <GPIB_TALK+0xc4>
   12e70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e74:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e78:	84 72       	andi	r24, 0x24	; 36
   12e7a:	99 27       	eor	r25, r25
   12e7c:	89 2b       	or	r24, r25
   12e7e:	91 f1       	breq	.+100    	; 0x12ee4 <GPIB_TALK+0x11e>
   12e80:	1f 92       	push	r1
   12e82:	cf 93       	push	r28
   12e84:	84 e4       	ldi	r24, 0x44	; 68
   12e86:	93 e1       	ldi	r25, 0x13	; 19
   12e88:	23 c0       	rjmp	.+70     	; 0x12ed0 <GPIB_TALK+0x10a>
   12e8a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12e8e:	90 e0       	ldi	r25, 0x00	; 0
   12e90:	04 dd       	rcall	.-1528   	; 0x1289a <PRINTER_is_MLA>
   12e92:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12e96:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e9a:	89 2b       	or	r24, r25
   12e9c:	99 f0       	breq	.+38     	; 0x12ec4 <GPIB_TALK+0xfe>
   12e9e:	24 72       	andi	r18, 0x24	; 36
   12ea0:	33 27       	eor	r19, r19
   12ea2:	23 2b       	or	r18, r19
   12ea4:	51 f0       	breq	.+20     	; 0x12eba <GPIB_TALK+0xf4>
   12ea6:	84 e3       	ldi	r24, 0x34	; 52
   12ea8:	93 e1       	ldi	r25, 0x13	; 19
   12eaa:	1f 92       	push	r1
   12eac:	9f 93       	push	r25
   12eae:	8f 93       	push	r24
   12eb0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12eb4:	0f 90       	pop	r0
   12eb6:	0f 90       	pop	r0
   12eb8:	0f 90       	pop	r0
   12eba:	80 e0       	ldi	r24, 0x00	; 0
   12ebc:	90 e0       	ldi	r25, 0x00	; 0
   12ebe:	0e 94 e3 b4 	call	0x169c6	; 0x169c6 <printer_open>
   12ec2:	10 c0       	rjmp	.+32     	; 0x12ee4 <GPIB_TALK+0x11e>
   12ec4:	22 ff       	sbrs	r18, 2
   12ec6:	0e c0       	rjmp	.+28     	; 0x12ee4 <GPIB_TALK+0x11e>
   12ec8:	1f 92       	push	r1
   12eca:	cf 93       	push	r28
   12ecc:	88 e2       	ldi	r24, 0x28	; 40
   12ece:	93 e1       	ldi	r25, 0x13	; 19
   12ed0:	1f 92       	push	r1
   12ed2:	9f 93       	push	r25
   12ed4:	8f 93       	push	r24
   12ed6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12eda:	0f 90       	pop	r0
   12edc:	0f 90       	pop	r0
   12ede:	0f 90       	pop	r0
   12ee0:	0f 90       	pop	r0
   12ee2:	0f 90       	pop	r0
   12ee4:	80 e0       	ldi	r24, 0x00	; 0
   12ee6:	90 e0       	ldi	r25, 0x00	; 0
   12ee8:	cf 91       	pop	r28
   12eea:	1f 91       	pop	r17
   12eec:	0f 91       	pop	r16
   12eee:	08 95       	ret

00012ef0 <GPIB_SECONDARY_ADDRESS>:
   12ef0:	0f 93       	push	r16
   12ef2:	1f 93       	push	r17
   12ef4:	cf 93       	push	r28
   12ef6:	c8 2f       	mov	r28, r24
   12ef8:	08 2f       	mov	r16, r24
   12efa:	10 e0       	ldi	r17, 0x00	; 0
   12efc:	c8 01       	movw	r24, r16
   12efe:	89 dc       	rcall	.-1774   	; 0x12812 <SS80_is_MSA>
   12f00:	89 2b       	or	r24, r25
   12f02:	19 f1       	breq	.+70     	; 0x12f4a <GPIB_SECONDARY_ADDRESS+0x5a>
   12f04:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12f08:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f0c:	84 72       	andi	r24, 0x24	; 36
   12f0e:	99 27       	eor	r25, r25
   12f10:	89 2b       	or	r24, r25
   12f12:	71 f0       	breq	.+28     	; 0x12f30 <GPIB_SECONDARY_ADDRESS+0x40>
   12f14:	1f 92       	push	r1
   12f16:	cf 93       	push	r28
   12f18:	87 e1       	ldi	r24, 0x17	; 23
   12f1a:	93 e1       	ldi	r25, 0x13	; 19
   12f1c:	1f 92       	push	r1
   12f1e:	9f 93       	push	r25
   12f20:	8f 93       	push	r24
   12f22:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12f26:	0f 90       	pop	r0
   12f28:	0f 90       	pop	r0
   12f2a:	0f 90       	pop	r0
   12f2c:	0f 90       	pop	r0
   12f2e:	0f 90       	pop	r0
   12f30:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   12f34:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   12f38:	81 81       	ldd	r24, Z+1	; 0x01
   12f3a:	90 e0       	ldi	r25, 0x00	; 0
   12f3c:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   12f40:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   12f44:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   12f48:	27 c0       	rjmp	.+78     	; 0x12f98 <GPIB_SECONDARY_ADDRESS+0xa8>
   12f4a:	c8 01       	movw	r24, r16
   12f4c:	95 dc       	rcall	.-1750   	; 0x12878 <AMIGO_is_MSA>
   12f4e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12f52:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f56:	89 2b       	or	r24, r25
   12f58:	21 f1       	breq	.+72     	; 0x12fa2 <GPIB_SECONDARY_ADDRESS+0xb2>
   12f5a:	c9 01       	movw	r24, r18
   12f5c:	84 72       	andi	r24, 0x24	; 36
   12f5e:	99 27       	eor	r25, r25
   12f60:	89 2b       	or	r24, r25
   12f62:	71 f0       	breq	.+28     	; 0x12f80 <GPIB_SECONDARY_ADDRESS+0x90>
   12f64:	1f 92       	push	r1
   12f66:	cf 93       	push	r28
   12f68:	85 e0       	ldi	r24, 0x05	; 5
   12f6a:	93 e1       	ldi	r25, 0x13	; 19
   12f6c:	1f 92       	push	r1
   12f6e:	9f 93       	push	r25
   12f70:	8f 93       	push	r24
   12f72:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12f76:	0f 90       	pop	r0
   12f78:	0f 90       	pop	r0
   12f7a:	0f 90       	pop	r0
   12f7c:	0f 90       	pop	r0
   12f7e:	0f 90       	pop	r0
   12f80:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   12f84:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   12f88:	81 81       	ldd	r24, Z+1	; 0x01
   12f8a:	90 e0       	ldi	r25, 0x00	; 0
   12f8c:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   12f90:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   12f94:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   12f98:	63 a1       	ldd	r22, Z+35	; 0x23
   12f9a:	74 a1       	ldd	r23, Z+36	; 0x24
   12f9c:	8c 2f       	mov	r24, r28
   12f9e:	12 de       	rcall	.-988    	; 0x12bc4 <Send_Identify>
   12fa0:	20 c0       	rjmp	.+64     	; 0x12fe2 <GPIB_SECONDARY_ADDRESS+0xf2>
   12fa2:	c9 01       	movw	r24, r18
   12fa4:	84 72       	andi	r24, 0x24	; 36
   12fa6:	99 27       	eor	r25, r25
   12fa8:	00 97       	sbiw	r24, 0x00	; 0
   12faa:	d9 f0       	breq	.+54     	; 0x12fe2 <GPIB_SECONDARY_ADDRESS+0xf2>
   12fac:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   12fb0:	1f 92       	push	r1
   12fb2:	8f 93       	push	r24
   12fb4:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12fb8:	1f 92       	push	r1
   12fba:	8f 93       	push	r24
   12fbc:	1f 92       	push	r1
   12fbe:	cf 93       	push	r28
   12fc0:	8f ed       	ldi	r24, 0xDF	; 223
   12fc2:	92 e1       	ldi	r25, 0x12	; 18
   12fc4:	1f 92       	push	r1
   12fc6:	9f 93       	push	r25
   12fc8:	8f 93       	push	r24
   12fca:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   12fce:	8d b7       	in	r24, 0x3d	; 61
   12fd0:	9e b7       	in	r25, 0x3e	; 62
   12fd2:	09 96       	adiw	r24, 0x09	; 9
   12fd4:	0f b6       	in	r0, 0x3f	; 63
   12fd6:	f8 94       	cli
   12fd8:	9e bf       	out	0x3e, r25	; 62
   12fda:	0f be       	out	0x3f, r0	; 63
   12fdc:	8d bf       	out	0x3d, r24	; 61
   12fde:	80 e0       	ldi	r24, 0x00	; 0
   12fe0:	90 e0       	ldi	r25, 0x00	; 0
   12fe2:	cf 91       	pop	r28
   12fe4:	1f 91       	pop	r17
   12fe6:	0f 91       	pop	r16
   12fe8:	08 95       	ret

00012fea <listen_cleanup>:
   12fea:	60 91 ed 1e 	lds	r22, 0x1EED	; 0x801eed <listening_last>
   12fee:	66 23       	and	r22, r22
   12ff0:	e9 f0       	breq	.+58     	; 0x1302c <listen_cleanup+0x42>
   12ff2:	70 e0       	ldi	r23, 0x00	; 0
   12ff4:	40 e2       	ldi	r20, 0x20	; 32
   12ff6:	50 e0       	ldi	r21, 0x00	; 0
   12ff8:	83 e0       	ldi	r24, 0x03	; 3
   12ffa:	90 e0       	ldi	r25, 0x00	; 0
   12ffc:	0e 94 62 b7 	call	0x16ec4	; 0x16ec4 <find_device>
   13000:	01 96       	adiw	r24, 0x01	; 1
   13002:	a1 f0       	breq	.+40     	; 0x1302c <listen_cleanup+0x42>
   13004:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13008:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1300c:	84 72       	andi	r24, 0x24	; 36
   1300e:	99 27       	eor	r25, r25
   13010:	89 2b       	or	r24, r25
   13012:	51 f0       	breq	.+20     	; 0x13028 <listen_cleanup+0x3e>
   13014:	8e ec       	ldi	r24, 0xCE	; 206
   13016:	92 e1       	ldi	r25, 0x12	; 18
   13018:	1f 92       	push	r1
   1301a:	9f 93       	push	r25
   1301c:	8f 93       	push	r24
   1301e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13022:	0f 90       	pop	r0
   13024:	0f 90       	pop	r0
   13026:	0f 90       	pop	r0
   13028:	0c 94 96 b4 	jmp	0x1692c	; 0x1692c <printer_close>
   1302c:	08 95       	ret

0001302e <GPIB_LISTEN>:
   1302e:	0f 93       	push	r16
   13030:	1f 93       	push	r17
   13032:	cf 93       	push	r28
   13034:	c8 2f       	mov	r28, r24
   13036:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1303a:	80 93 ed 1e 	sts	0x1EED, r24	; 0x801eed <listening_last>
   1303e:	c0 93 f3 1e 	sts	0x1EF3, r28	; 0x801ef3 <listening>
   13042:	d3 df       	rcall	.-90     	; 0x12fea <listen_cleanup>
   13044:	cf 33       	cpi	r28, 0x3F	; 63
   13046:	19 f5       	brne	.+70     	; 0x1308e <GPIB_LISTEN+0x60>
   13048:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <listening>
   1304c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13050:	82 ff       	sbrs	r24, 2
   13052:	75 c0       	rjmp	.+234    	; 0x1313e <GPIB_LISTEN+0x110>
   13054:	87 ec       	ldi	r24, 0xC7	; 199
   13056:	93 e1       	ldi	r25, 0x13	; 19
   13058:	1f 92       	push	r1
   1305a:	9f 93       	push	r25
   1305c:	8f 93       	push	r24
   1305e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13062:	0f 90       	pop	r0
   13064:	0f 90       	pop	r0
   13066:	0f 90       	pop	r0
   13068:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <lastcmd>
   1306c:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <lastcmd+0x1>
   13070:	8f 35       	cpi	r24, 0x5F	; 95
   13072:	91 05       	cpc	r25, r1
   13074:	09 f0       	breq	.+2      	; 0x13078 <GPIB_LISTEN+0x4a>
   13076:	63 c0       	rjmp	.+198    	; 0x1313e <GPIB_LISTEN+0x110>
   13078:	85 ec       	ldi	r24, 0xC5	; 197
   1307a:	93 e1       	ldi	r25, 0x13	; 19
   1307c:	1f 92       	push	r1
   1307e:	9f 93       	push	r25
   13080:	8f 93       	push	r24
   13082:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13086:	0f 90       	pop	r0
   13088:	0f 90       	pop	r0
   1308a:	0f 90       	pop	r0
   1308c:	58 c0       	rjmp	.+176    	; 0x1313e <GPIB_LISTEN+0x110>
   1308e:	0c 2f       	mov	r16, r28
   13090:	10 e0       	ldi	r17, 0x00	; 0
   13092:	c8 01       	movw	r24, r16
   13094:	cf db       	rcall	.-2146   	; 0x12834 <AMIGO_is_MLA>
   13096:	89 2b       	or	r24, r25
   13098:	71 f0       	breq	.+28     	; 0x130b6 <GPIB_LISTEN+0x88>
   1309a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1309e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   130a2:	84 72       	andi	r24, 0x24	; 36
   130a4:	99 27       	eor	r25, r25
   130a6:	89 2b       	or	r24, r25
   130a8:	09 f4       	brne	.+2      	; 0x130ac <GPIB_LISTEN+0x7e>
   130aa:	49 c0       	rjmp	.+146    	; 0x1313e <GPIB_LISTEN+0x110>
   130ac:	1f 92       	push	r1
   130ae:	cf 93       	push	r28
   130b0:	83 eb       	ldi	r24, 0xB3	; 179
   130b2:	93 e1       	ldi	r25, 0x13	; 19
   130b4:	3a c0       	rjmp	.+116    	; 0x1312a <GPIB_LISTEN+0xfc>
   130b6:	c8 01       	movw	r24, r16
   130b8:	8a db       	rcall	.-2284   	; 0x127ce <SS80_is_MLA>
   130ba:	89 2b       	or	r24, r25
   130bc:	69 f0       	breq	.+26     	; 0x130d8 <GPIB_LISTEN+0xaa>
   130be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   130c2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   130c6:	84 72       	andi	r24, 0x24	; 36
   130c8:	99 27       	eor	r25, r25
   130ca:	89 2b       	or	r24, r25
   130cc:	c1 f1       	breq	.+112    	; 0x1313e <GPIB_LISTEN+0x110>
   130ce:	1f 92       	push	r1
   130d0:	cf 93       	push	r28
   130d2:	82 ea       	ldi	r24, 0xA2	; 162
   130d4:	93 e1       	ldi	r25, 0x13	; 19
   130d6:	29 c0       	rjmp	.+82     	; 0x1312a <GPIB_LISTEN+0xfc>
   130d8:	c8 01       	movw	r24, r16
   130da:	df db       	rcall	.-2114   	; 0x1289a <PRINTER_is_MLA>
   130dc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   130e0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   130e4:	89 2b       	or	r24, r25
   130e6:	d9 f0       	breq	.+54     	; 0x1311e <GPIB_LISTEN+0xf0>
   130e8:	24 72       	andi	r18, 0x24	; 36
   130ea:	33 27       	eor	r19, r19
   130ec:	23 2b       	or	r18, r19
   130ee:	71 f0       	breq	.+28     	; 0x1310c <GPIB_LISTEN+0xde>
   130f0:	1f 92       	push	r1
   130f2:	cf 93       	push	r28
   130f4:	8e e8       	ldi	r24, 0x8E	; 142
   130f6:	93 e1       	ldi	r25, 0x13	; 19
   130f8:	1f 92       	push	r1
   130fa:	9f 93       	push	r25
   130fc:	8f 93       	push	r24
   130fe:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13102:	0f 90       	pop	r0
   13104:	0f 90       	pop	r0
   13106:	0f 90       	pop	r0
   13108:	0f 90       	pop	r0
   1310a:	0f 90       	pop	r0
   1310c:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   13110:	8f 35       	cpi	r24, 0x5F	; 95
   13112:	a9 f0       	breq	.+42     	; 0x1313e <GPIB_LISTEN+0x110>
   13114:	80 e0       	ldi	r24, 0x00	; 0
   13116:	90 e0       	ldi	r25, 0x00	; 0
   13118:	0e 94 e3 b4 	call	0x169c6	; 0x169c6 <printer_open>
   1311c:	10 c0       	rjmp	.+32     	; 0x1313e <GPIB_LISTEN+0x110>
   1311e:	22 ff       	sbrs	r18, 2
   13120:	0e c0       	rjmp	.+28     	; 0x1313e <GPIB_LISTEN+0x110>
   13122:	1f 92       	push	r1
   13124:	cf 93       	push	r28
   13126:	82 e8       	ldi	r24, 0x82	; 130
   13128:	93 e1       	ldi	r25, 0x13	; 19
   1312a:	1f 92       	push	r1
   1312c:	9f 93       	push	r25
   1312e:	8f 93       	push	r24
   13130:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13134:	0f 90       	pop	r0
   13136:	0f 90       	pop	r0
   13138:	0f 90       	pop	r0
   1313a:	0f 90       	pop	r0
   1313c:	0f 90       	pop	r0
   1313e:	80 e0       	ldi	r24, 0x00	; 0
   13140:	90 e0       	ldi	r25, 0x00	; 0
   13142:	cf 91       	pop	r28
   13144:	1f 91       	pop	r17
   13146:	0f 91       	pop	r16
   13148:	08 95       	ret

0001314a <gpib_task>:
   1314a:	cf 93       	push	r28
   1314c:	df 93       	push	r29
   1314e:	0e 94 c7 8d 	call	0x11b8e	; 0x11b8e <gpib_state_init>
   13152:	c5 db       	rcall	.-2166   	; 0x128de <gpib_init_devices>
   13154:	10 92 69 19 	sts	0x1969, r1	; 0x801969 <gpib_log_fp+0x1>
   13158:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <gpib_log_fp>
   1315c:	80 e0       	ldi	r24, 0x00	; 0
   1315e:	90 e0       	ldi	r25, 0x00	; 0
   13160:	06 d9       	rcall	.-3572   	; 0x1236e <gpib_read_byte>
   13162:	ec 01       	movw	r28, r24
   13164:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13168:	83 ff       	sbrs	r24, 3
   1316a:	02 c0       	rjmp	.+4      	; 0x13170 <gpib_task+0x26>
   1316c:	ce 01       	movw	r24, r28
   1316e:	d5 d9       	rcall	.-3158   	; 0x1251a <gpib_decode>
   13170:	ce 01       	movw	r24, r28
   13172:	4a dc       	rcall	.-1900   	; 0x12a08 <gpib_error_test>
   13174:	9c 01       	movw	r18, r24
   13176:	23 70       	andi	r18, 0x03	; 3
   13178:	33 27       	eor	r19, r19
   1317a:	23 2b       	or	r18, r19
   1317c:	09 f0       	breq	.+2      	; 0x13180 <gpib_task+0x36>
   1317e:	43 c0       	rjmp	.+134    	; 0x13206 <gpib_task+0xbc>
   13180:	89 2b       	or	r24, r25
   13182:	61 f7       	brne	.-40     	; 0x1315c <gpib_task+0x12>
   13184:	d2 ff       	sbrs	r29, 2
   13186:	26 c0       	rjmp	.+76     	; 0x131d4 <gpib_task+0x8a>
   13188:	8c 2f       	mov	r24, r28
   1318a:	8f 77       	andi	r24, 0x7F	; 127
   1318c:	80 32       	cpi	r24, 0x20	; 32
   1318e:	10 f4       	brcc	.+4      	; 0x13194 <gpib_task+0x4a>
   13190:	63 dd       	rcall	.-1338   	; 0x12c58 <GPIB>
   13192:	e4 cf       	rjmp	.-56     	; 0x1315c <gpib_task+0x12>
   13194:	90 ee       	ldi	r25, 0xE0	; 224
   13196:	98 0f       	add	r25, r24
   13198:	90 32       	cpi	r25, 0x20	; 32
   1319a:	10 f4       	brcc	.+4      	; 0x131a0 <gpib_task+0x56>
   1319c:	48 df       	rcall	.-368    	; 0x1302e <GPIB_LISTEN>
   1319e:	de cf       	rjmp	.-68     	; 0x1315c <gpib_task+0x12>
   131a0:	90 ec       	ldi	r25, 0xC0	; 192
   131a2:	98 0f       	add	r25, r24
   131a4:	90 32       	cpi	r25, 0x20	; 32
   131a6:	10 f4       	brcc	.+4      	; 0x131ac <gpib_task+0x62>
   131a8:	0e de       	rcall	.-996    	; 0x12dc6 <GPIB_TALK>
   131aa:	d8 cf       	rjmp	.-80     	; 0x1315c <gpib_task+0x12>
   131ac:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <listening>
   131b0:	99 23       	and	r25, r25
   131b2:	59 f0       	breq	.+22     	; 0x131ca <gpib_task+0x80>
   131b4:	20 91 eb 1c 	lds	r18, 0x1CEB	; 0x801ceb <lastcmd>
   131b8:	30 91 ec 1c 	lds	r19, 0x1CEC	; 0x801cec <lastcmd+0x1>
   131bc:	2f 35       	cpi	r18, 0x5F	; 95
   131be:	31 05       	cpc	r19, r1
   131c0:	21 f4       	brne	.+8      	; 0x131ca <gpib_task+0x80>
   131c2:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
   131c6:	94 de       	rcall	.-728    	; 0x12ef0 <GPIB_SECONDARY_ADDRESS>
   131c8:	c9 cf       	rjmp	.-110    	; 0x1315c <gpib_task+0x12>
   131ca:	80 93 f2 1e 	sts	0x1EF2, r24	; 0x801ef2 <secondary>
   131ce:	60 e0       	ldi	r22, 0x00	; 0
   131d0:	90 e0       	ldi	r25, 0x00	; 0
   131d2:	12 c0       	rjmp	.+36     	; 0x131f8 <gpib_task+0xae>
   131d4:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   131d8:	90 e0       	ldi	r25, 0x00	; 0
   131da:	5f db       	rcall	.-2370   	; 0x1289a <PRINTER_is_MLA>
   131dc:	89 2b       	or	r24, r25
   131de:	29 f0       	breq	.+10     	; 0x131ea <gpib_task+0xa0>
   131e0:	ce 01       	movw	r24, r28
   131e2:	99 27       	eor	r25, r25
   131e4:	0e 94 84 b5 	call	0x16b08	; 0x16b08 <printer_buffer>
   131e8:	b9 cf       	rjmp	.-142    	; 0x1315c <gpib_task+0x12>
   131ea:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
   131ee:	88 23       	and	r24, r24
   131f0:	09 f4       	brne	.+2      	; 0x131f4 <gpib_task+0xaa>
   131f2:	b4 cf       	rjmp	.-152    	; 0x1315c <gpib_task+0x12>
   131f4:	61 e0       	ldi	r22, 0x01	; 1
   131f6:	ce 01       	movw	r24, r28
   131f8:	91 dc       	rcall	.-1758   	; 0x12b1c <GPIB_COMMANDS>
   131fa:	06 dc       	rcall	.-2036   	; 0x12a08 <gpib_error_test>
   131fc:	83 70       	andi	r24, 0x03	; 3
   131fe:	99 27       	eor	r25, r25
   13200:	89 2b       	or	r24, r25
   13202:	09 f4       	brne	.+2      	; 0x13206 <gpib_task+0xbc>
   13204:	ab cf       	rjmp	.-170    	; 0x1315c <gpib_task+0x12>
   13206:	df 91       	pop	r29
   13208:	cf 91       	pop	r28
   1320a:	08 95       	ret

0001320c <talk_cleanup>:
   1320c:	08 95       	ret

0001320e <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   1320e:	cf 93       	push	r28
   13210:	df 93       	push	r29
   13212:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   13214:	80 e1       	ldi	r24, 0x10	; 16
   13216:	98 e1       	ldi	r25, 0x18	; 24
   13218:	1f 92       	push	r1
   1321a:	9f 93       	push	r25
   1321c:	8f 93       	push	r24
   1321e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    if(full)
   13222:	0f 90       	pop	r0
   13224:	0f 90       	pop	r0
   13226:	0f 90       	pop	r0
   13228:	cd 2b       	or	r28, r29
   1322a:	51 f0       	breq	.+20     	; 0x13240 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   1322c:	8f e8       	ldi	r24, 0x8F	; 143
   1322e:	96 e1       	ldi	r25, 0x16	; 22
   13230:	1f 92       	push	r1
   13232:	9f 93       	push	r25
   13234:	8f 93       	push	r24
   13236:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1323a:	0f 90       	pop	r0
   1323c:	0f 90       	pop	r0
   1323e:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   13240:	df 91       	pop	r29
   13242:	cf 91       	pop	r28
   13244:	08 95       	ret

00013246 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   13246:	ef 92       	push	r14
   13248:	ff 92       	push	r15
   1324a:	0f 93       	push	r16
   1324c:	1f 93       	push	r17
   1324e:	cf 93       	push	r28
   13250:	df 93       	push	r29
   13252:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   13254:	fb 01       	movw	r30, r22
   13256:	80 81       	ld	r24, Z
   13258:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1325a:	00 97       	sbiw	r24, 0x00	; 0
   1325c:	19 f4       	brne	.+6      	; 0x13264 <gpib_tests+0x1e>
        return(0);
   1325e:	80 e0       	ldi	r24, 0x00	; 0
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	e5 c2       	rjmp	.+1482   	; 0x1382e <gpib_tests+0x5e8>
   13264:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   13266:	68 e3       	ldi	r22, 0x38	; 56
   13268:	7d e0       	ldi	r23, 0x0D	; 13
   1326a:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1326e:	89 2b       	or	r24, r25
   13270:	b1 f3       	breq	.-20     	; 0x1325e <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   13272:	0a 81       	ldd	r16, Y+2	; 0x02
   13274:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   13276:	01 15       	cp	r16, r1
   13278:	11 05       	cpc	r17, r1
   1327a:	21 f4       	brne	.+8      	; 0x13284 <gpib_tests+0x3e>
    {
        gpib_help(1);
   1327c:	81 e0       	ldi	r24, 0x01	; 1
   1327e:	90 e0       	ldi	r25, 0x00	; 0
   13280:	c6 df       	rcall	.-116    	; 0x1320e <gpib_help>
   13282:	d3 c2       	rjmp	.+1446   	; 0x1382a <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   13284:	6e e1       	ldi	r22, 0x1E	; 30
   13286:	76 e1       	ldi	r23, 0x16	; 22
   13288:	c8 01       	movw	r24, r16
   1328a:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1328e:	89 2b       	or	r24, r25
   13290:	a9 f7       	brne	.-22     	; 0x1327c <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   13292:	97 01       	movw	r18, r14
   13294:	42 e0       	ldi	r20, 0x02	; 2
   13296:	50 e0       	ldi	r21, 0x00	; 0
   13298:	6d e3       	ldi	r22, 0x3D	; 61
   1329a:	7d e0       	ldi	r23, 0x0D	; 13
   1329c:	c8 01       	movw	r24, r16
   1329e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   132a2:	89 2b       	or	r24, r25
   132a4:	19 f0       	breq	.+6      	; 0x132ac <gpib_tests+0x66>
    {
        display_Addresses();
   132a6:	0e 94 15 c3 	call	0x1862a	; 0x1862a <display_Addresses>
   132aa:	bf c2       	rjmp	.+1406   	; 0x1382a <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   132ac:	97 01       	movw	r18, r14
   132ae:	42 e0       	ldi	r20, 0x02	; 2
   132b0:	50 e0       	ldi	r21, 0x00	; 0
   132b2:	67 e4       	ldi	r22, 0x47	; 71
   132b4:	7d e0       	ldi	r23, 0x0D	; 13
   132b6:	c8 01       	movw	r24, r16
   132b8:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   132bc:	89 2b       	or	r24, r25
   132be:	19 f0       	breq	.+6      	; 0x132c6 <gpib_tests+0x80>
    {
        display_Config();
   132c0:	0e 94 10 c4 	call	0x18820	; 0x18820 <display_Config>
   132c4:	b2 c2       	rjmp	.+1380   	; 0x1382a <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   132c6:	97 01       	movw	r18, r14
   132c8:	43 e0       	ldi	r20, 0x03	; 3
   132ca:	50 e0       	ldi	r21, 0x00	; 0
   132cc:	6e e4       	ldi	r22, 0x4E	; 78
   132ce:	7d e0       	ldi	r23, 0x0D	; 13
   132d0:	c8 01       	movw	r24, r16
   132d2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   132d6:	89 2b       	or	r24, r25
   132d8:	69 f0       	breq	.+26     	; 0x132f4 <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   132da:	8c 81       	ldd	r24, Y+4	; 0x04
   132dc:	9d 81       	ldd	r25, Y+5	; 0x05
   132de:	0e 94 c4 33 	call	0x6788	; 0x6788 <get_value>
   132e2:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   132e6:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   132ea:	7f 93       	push	r23
   132ec:	6f 93       	push	r22
   132ee:	82 e8       	ldi	r24, 0x82	; 130
   132f0:	96 e1       	ldi	r25, 0x16	; 22
   132f2:	b9 c1       	rjmp	.+882    	; 0x13666 <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   132f4:	97 01       	movw	r18, r14
   132f6:	42 e0       	ldi	r20, 0x02	; 2
   132f8:	50 e0       	ldi	r21, 0x00	; 0
   132fa:	64 e5       	ldi	r22, 0x54	; 84
   132fc:	7d e0       	ldi	r23, 0x0D	; 13
   132fe:	c8 01       	movw	r24, r16
   13300:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13304:	89 2b       	or	r24, r25
   13306:	19 f0       	breq	.+6      	; 0x1330e <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   13308:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   1330c:	8e c2       	rjmp	.+1308   	; 0x1382a <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1330e:	97 01       	movw	r18, r14
   13310:	42 e0       	ldi	r20, 0x02	; 2
   13312:	50 e0       	ldi	r21, 0x00	; 0
   13314:	62 e6       	ldi	r22, 0x62	; 98
   13316:	7d e0       	ldi	r23, 0x0D	; 13
   13318:	c8 01       	movw	r24, r16
   1331a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1331e:	89 2b       	or	r24, r25
   13320:	29 f0       	breq	.+10     	; 0x1332c <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   13322:	8a e6       	ldi	r24, 0x6A	; 106
   13324:	9d e0       	ldi	r25, 0x0D	; 13
   13326:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   1332a:	7f c2       	rjmp	.+1278   	; 0x1382a <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   1332c:	97 01       	movw	r18, r14
   1332e:	42 e0       	ldi	r20, 0x02	; 2
   13330:	50 e0       	ldi	r21, 0x00	; 0
   13332:	68 e7       	ldi	r22, 0x78	; 120
   13334:	7d e0       	ldi	r23, 0x0D	; 13
   13336:	c8 01       	movw	r24, r16
   13338:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1333c:	89 2b       	or	r24, r25
    {
        gpib_task();
   1333e:	11 f0       	breq	.+4      	; 0x13344 <gpib_tests+0xfe>
   13340:	04 df       	rcall	.-504    	; 0x1314a <gpib_task>
   13342:	73 c2       	rjmp	.+1254   	; 0x1382a <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   13344:	97 01       	movw	r18, r14
   13346:	43 e0       	ldi	r20, 0x03	; 3
   13348:	50 e0       	ldi	r21, 0x00	; 0
   1334a:	6d e7       	ldi	r22, 0x7D	; 125
   1334c:	7d e0       	ldi	r23, 0x0D	; 13
   1334e:	c8 01       	movw	r24, r16
   13350:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13354:	89 2b       	or	r24, r25
   13356:	a1 f0       	breq	.+40     	; 0x13380 <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   13358:	8e 81       	ldd	r24, Y+6	; 0x06
   1335a:	9f 81       	ldd	r25, Y+7	; 0x07
   1335c:	00 97       	sbiw	r24, 0x00	; 0
   1335e:	51 f0       	breq	.+20     	; 0x13374 <gpib_tests+0x12e>
   13360:	63 e8       	ldi	r22, 0x83	; 131
   13362:	7d e0       	ldi	r23, 0x0D	; 13
   13364:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   13368:	61 e0       	ldi	r22, 0x01	; 1
   1336a:	70 e0       	ldi	r23, 0x00	; 0
   1336c:	89 2b       	or	r24, r25
   1336e:	21 f4       	brne	.+8      	; 0x13378 <gpib_tests+0x132>
   13370:	60 e0       	ldi	r22, 0x00	; 0
   13372:	02 c0       	rjmp	.+4      	; 0x13378 <gpib_tests+0x132>
   13374:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   13376:	70 e0       	ldi	r23, 0x00	; 0
   13378:	8c 81       	ldd	r24, Y+4	; 0x04
   1337a:	9d 81       	ldd	r25, Y+5	; 0x05
   1337c:	b8 da       	rcall	.-2704   	; 0x128ee <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   1337e:	55 c2       	rjmp	.+1194   	; 0x1382a <gpib_tests+0x5e4>
   13380:	97 01       	movw	r18, r14
   13382:	42 e0       	ldi	r20, 0x02	; 2
   13384:	50 e0       	ldi	r21, 0x00	; 0
   13386:	67 e8       	ldi	r22, 0x87	; 135
   13388:	7d e0       	ldi	r23, 0x0D	; 13
   1338a:	c8 01       	movw	r24, r16
   1338c:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13390:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   13392:	19 f0       	breq	.+6      	; 0x1339a <gpib_tests+0x154>
   13394:	0e 94 51 8e 	call	0x11ca2	; 0x11ca2 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   13398:	48 c2       	rjmp	.+1168   	; 0x1382a <gpib_tests+0x5e4>
   1339a:	97 01       	movw	r18, r14
   1339c:	43 e0       	ldi	r20, 0x03	; 3
   1339e:	50 e0       	ldi	r21, 0x00	; 0
   133a0:	6b e8       	ldi	r22, 0x8B	; 139
   133a2:	7d e0       	ldi	r23, 0x0D	; 13
   133a4:	c8 01       	movw	r24, r16
   133a6:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   133aa:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   133ac:	39 f0       	breq	.+14     	; 0x133bc <gpib_tests+0x176>
   133ae:	8c 81       	ldd	r24, Y+4	; 0x04
   133b0:	9d 81       	ldd	r25, Y+5	; 0x05
   133b2:	0e 94 42 47 	call	0x8e84	; 0x8e84 <atoi>
   133b6:	0e 94 26 b6 	call	0x16c4c	; 0x16c4c <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   133ba:	37 c2       	rjmp	.+1134   	; 0x1382a <gpib_tests+0x5e4>
   133bc:	97 01       	movw	r18, r14
   133be:	43 e0       	ldi	r20, 0x03	; 3
   133c0:	50 e0       	ldi	r21, 0x00	; 0
   133c2:	65 e9       	ldi	r22, 0x95	; 149
   133c4:	7d e0       	ldi	r23, 0x0D	; 13
   133c6:	c8 01       	movw	r24, r16
   133c8:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   133cc:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   133ce:	41 f0       	breq	.+16     	; 0x133e0 <gpib_tests+0x19a>
   133d0:	8c 81       	ldd	r24, Y+4	; 0x04
   133d2:	9d 81       	ldd	r25, Y+5	; 0x05
   133d4:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <atoh>
   133d8:	86 2f       	mov	r24, r22
   133da:	0e 94 f9 8b 	call	0x117f2	; 0x117f2 <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   133de:	25 c2       	rjmp	.+1098   	; 0x1382a <gpib_tests+0x5e4>
   133e0:	97 01       	movw	r18, r14
   133e2:	43 e0       	ldi	r20, 0x03	; 3
   133e4:	50 e0       	ldi	r21, 0x00	; 0
   133e6:	61 ea       	ldi	r22, 0xA1	; 161
   133e8:	7d e0       	ldi	r23, 0x0D	; 13
   133ea:	c8 01       	movw	r24, r16
   133ec:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   133f0:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   133f2:	41 f0       	breq	.+16     	; 0x13404 <gpib_tests+0x1be>
   133f4:	8c 81       	ldd	r24, Y+4	; 0x04
   133f6:	9d 81       	ldd	r25, Y+5	; 0x05
   133f8:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <atoh>
   133fc:	86 2f       	mov	r24, r22
   133fe:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   13402:	13 c2       	rjmp	.+1062   	; 0x1382a <gpib_tests+0x5e4>
   13404:	97 01       	movw	r18, r14
   13406:	43 e0       	ldi	r20, 0x03	; 3
   13408:	50 e0       	ldi	r21, 0x00	; 0
   1340a:	6d ea       	ldi	r22, 0xAD	; 173
   1340c:	7d e0       	ldi	r23, 0x0D	; 13
   1340e:	c8 01       	movw	r24, r16
   13410:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13414:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   13416:	41 f0       	breq	.+16     	; 0x13428 <gpib_tests+0x1e2>
   13418:	8c 81       	ldd	r24, Y+4	; 0x04
   1341a:	9d 81       	ldd	r25, Y+5	; 0x05
   1341c:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <atoh>
   13420:	86 2f       	mov	r24, r22
   13422:	0e 94 cd 8b 	call	0x1179a	; 0x1179a <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   13426:	01 c2       	rjmp	.+1026   	; 0x1382a <gpib_tests+0x5e4>
   13428:	97 01       	movw	r18, r14
   1342a:	42 e0       	ldi	r20, 0x02	; 2
   1342c:	50 e0       	ldi	r21, 0x00	; 0
   1342e:	65 eb       	ldi	r22, 0xB5	; 181
   13430:	7d e0       	ldi	r23, 0x0D	; 13
   13432:	c8 01       	movw	r24, r16
   13434:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13438:	89 2b       	or	r24, r25
    {
        ppr_init();
   1343a:	19 f0       	breq	.+6      	; 0x13442 <gpib_tests+0x1fc>
   1343c:	0e 94 db 8b 	call	0x117b6	; 0x117b6 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   13440:	f4 c1       	rjmp	.+1000   	; 0x1382a <gpib_tests+0x5e4>
   13442:	97 01       	movw	r18, r14
   13444:	45 e0       	ldi	r20, 0x05	; 5
   13446:	50 e0       	ldi	r21, 0x00	; 0
   13448:	6e eb       	ldi	r22, 0xBE	; 190
   1344a:	7d e0       	ldi	r23, 0x0D	; 13
   1344c:	c8 01       	movw	r24, r16
   1344e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   13452:	89 2b       	or	r24, r25
   13454:	09 f4       	brne	.+2      	; 0x13458 <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   13456:	12 c1       	rjmp	.+548    	; 0x1367c <gpib_tests+0x436>
   13458:	63 ec       	ldi	r22, 0xC3	; 195
   1345a:	7d e0       	ldi	r23, 0x0D	; 13
   1345c:	8c 81       	ldd	r24, Y+4	; 0x04
   1345e:	9d 81       	ldd	r25, Y+5	; 0x05
   13460:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13464:	89 2b       	or	r24, r25
   13466:	09 f4       	brne	.+2      	; 0x1346a <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   13468:	09 c1       	rjmp	.+530    	; 0x1367c <gpib_tests+0x436>
   1346a:	68 ec       	ldi	r22, 0xC8	; 200
   1346c:	7d e0       	ldi	r23, 0x0D	; 13
   1346e:	8e 81       	ldd	r24, Y+6	; 0x06
   13470:	9f 81       	ldd	r25, Y+7	; 0x07
   13472:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13476:	89 2b       	or	r24, r25
   13478:	09 f4       	brne	.+2      	; 0x1347c <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   1347a:	4c c0       	rjmp	.+152    	; 0x13514 <gpib_tests+0x2ce>
   1347c:	60 ec       	ldi	r22, 0xC0	; 192
   1347e:	73 e1       	ldi	r23, 0x13	; 19
   13480:	88 85       	ldd	r24, Y+8	; 0x08
   13482:	99 85       	ldd	r25, Y+9	; 0x09
   13484:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13488:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   1348a:	59 f0       	breq	.+22     	; 0x134a2 <gpib_tests+0x25c>
   1348c:	e2 b1       	in	r30, 0x02	; 2
   1348e:	83 e0       	ldi	r24, 0x03	; 3
   13490:	e8 9f       	mul	r30, r24
   13492:	f0 01       	movw	r30, r0
   13494:	11 24       	eor	r1, r1
   13496:	80 a1       	ldd	r24, Z+32	; 0x20
   13498:	1f 92       	push	r1
   1349a:	8f 93       	push	r24
   1349c:	8a e6       	ldi	r24, 0x6A	; 106
   1349e:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   134a0:	e2 c0       	rjmp	.+452    	; 0x13666 <gpib_tests+0x420>
   134a2:	6d ec       	ldi	r22, 0xCD	; 205
   134a4:	7d e0       	ldi	r23, 0x0D	; 13
   134a6:	88 85       	ldd	r24, Y+8	; 0x08
   134a8:	99 85       	ldd	r25, Y+9	; 0x09
   134aa:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   134ae:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   134b0:	59 f0       	breq	.+22     	; 0x134c8 <gpib_tests+0x282>
   134b2:	e5 b1       	in	r30, 0x05	; 5
   134b4:	83 e0       	ldi	r24, 0x03	; 3
   134b6:	e8 9f       	mul	r30, r24
   134b8:	f0 01       	movw	r30, r0
   134ba:	11 24       	eor	r1, r1
   134bc:	80 a1       	ldd	r24, Z+32	; 0x20
   134be:	1f 92       	push	r1
   134c0:	8f 93       	push	r24
   134c2:	82 e5       	ldi	r24, 0x52	; 82
   134c4:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   134c6:	cf c0       	rjmp	.+414    	; 0x13666 <gpib_tests+0x420>
   134c8:	66 ef       	ldi	r22, 0xF6	; 246
   134ca:	7c e0       	ldi	r23, 0x0C	; 12
   134cc:	88 85       	ldd	r24, Y+8	; 0x08
   134ce:	99 85       	ldd	r25, Y+9	; 0x09
   134d0:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   134d4:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   134d6:	59 f0       	breq	.+22     	; 0x134ee <gpib_tests+0x2a8>
   134d8:	e8 b1       	in	r30, 0x08	; 8
   134da:	83 e0       	ldi	r24, 0x03	; 3
   134dc:	e8 9f       	mul	r30, r24
   134de:	f0 01       	movw	r30, r0
   134e0:	11 24       	eor	r1, r1
   134e2:	80 a1       	ldd	r24, Z+32	; 0x20
   134e4:	1f 92       	push	r1
   134e6:	8f 93       	push	r24
   134e8:	8a e3       	ldi	r24, 0x3A	; 58
   134ea:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   134ec:	bc c0       	rjmp	.+376    	; 0x13666 <gpib_tests+0x420>
   134ee:	63 e5       	ldi	r22, 0x53	; 83
   134f0:	77 e0       	ldi	r23, 0x07	; 7
   134f2:	88 85       	ldd	r24, Y+8	; 0x08
   134f4:	99 85       	ldd	r25, Y+9	; 0x09
   134f6:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   134fa:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   134fc:	59 f0       	breq	.+22     	; 0x13514 <gpib_tests+0x2ce>
   134fe:	eb b1       	in	r30, 0x0b	; 11
   13500:	83 e0       	ldi	r24, 0x03	; 3
   13502:	e8 9f       	mul	r30, r24
   13504:	f0 01       	movw	r30, r0
   13506:	11 24       	eor	r1, r1
   13508:	80 a1       	ldd	r24, Z+32	; 0x20
   1350a:	1f 92       	push	r1
   1350c:	8f 93       	push	r24
   1350e:	82 e2       	ldi	r24, 0x22	; 34
   13510:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   13512:	a9 c0       	rjmp	.+338    	; 0x13666 <gpib_tests+0x420>
   13514:	6f ec       	ldi	r22, 0xCF	; 207
   13516:	7d e0       	ldi	r23, 0x0D	; 13
   13518:	8e 81       	ldd	r24, Y+6	; 0x06
   1351a:	9f 81       	ldd	r25, Y+7	; 0x07
   1351c:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13520:	89 2b       	or	r24, r25
   13522:	09 f4       	brne	.+2      	; 0x13526 <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13524:	4c c0       	rjmp	.+152    	; 0x135be <gpib_tests+0x378>
   13526:	60 ec       	ldi	r22, 0xC0	; 192
   13528:	73 e1       	ldi	r23, 0x13	; 19
   1352a:	88 85       	ldd	r24, Y+8	; 0x08
   1352c:	99 85       	ldd	r25, Y+9	; 0x09
   1352e:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13532:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   13534:	59 f0       	breq	.+22     	; 0x1354c <gpib_tests+0x306>
   13536:	e2 b1       	in	r30, 0x02	; 2
   13538:	83 e0       	ldi	r24, 0x03	; 3
   1353a:	e8 9f       	mul	r30, r24
   1353c:	f0 01       	movw	r30, r0
   1353e:	11 24       	eor	r1, r1
   13540:	82 a1       	ldd	r24, Z+34	; 0x22
   13542:	1f 92       	push	r1
   13544:	8f 93       	push	r24
   13546:	89 e0       	ldi	r24, 0x09	; 9
   13548:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1354a:	8d c0       	rjmp	.+282    	; 0x13666 <gpib_tests+0x420>
   1354c:	6d ec       	ldi	r22, 0xCD	; 205
   1354e:	7d e0       	ldi	r23, 0x0D	; 13
   13550:	88 85       	ldd	r24, Y+8	; 0x08
   13552:	99 85       	ldd	r25, Y+9	; 0x09
   13554:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13558:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   1355a:	59 f0       	breq	.+22     	; 0x13572 <gpib_tests+0x32c>
   1355c:	e5 b1       	in	r30, 0x05	; 5
   1355e:	83 e0       	ldi	r24, 0x03	; 3
   13560:	e8 9f       	mul	r30, r24
   13562:	f0 01       	movw	r30, r0
   13564:	11 24       	eor	r1, r1
   13566:	82 a1       	ldd	r24, Z+34	; 0x22
   13568:	1f 92       	push	r1
   1356a:	8f 93       	push	r24
   1356c:	80 ef       	ldi	r24, 0xF0	; 240
   1356e:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13570:	7a c0       	rjmp	.+244    	; 0x13666 <gpib_tests+0x420>
   13572:	66 ef       	ldi	r22, 0xF6	; 246
   13574:	7c e0       	ldi	r23, 0x0C	; 12
   13576:	88 85       	ldd	r24, Y+8	; 0x08
   13578:	99 85       	ldd	r25, Y+9	; 0x09
   1357a:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1357e:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   13580:	59 f0       	breq	.+22     	; 0x13598 <gpib_tests+0x352>
   13582:	e8 b1       	in	r30, 0x08	; 8
   13584:	83 e0       	ldi	r24, 0x03	; 3
   13586:	e8 9f       	mul	r30, r24
   13588:	f0 01       	movw	r30, r0
   1358a:	11 24       	eor	r1, r1
   1358c:	82 a1       	ldd	r24, Z+34	; 0x22
   1358e:	1f 92       	push	r1
   13590:	8f 93       	push	r24
   13592:	87 ed       	ldi	r24, 0xD7	; 215
   13594:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13596:	67 c0       	rjmp	.+206    	; 0x13666 <gpib_tests+0x420>
   13598:	63 e5       	ldi	r22, 0x53	; 83
   1359a:	77 e0       	ldi	r23, 0x07	; 7
   1359c:	88 85       	ldd	r24, Y+8	; 0x08
   1359e:	99 85       	ldd	r25, Y+9	; 0x09
   135a0:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   135a4:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   135a6:	59 f0       	breq	.+22     	; 0x135be <gpib_tests+0x378>
   135a8:	eb b1       	in	r30, 0x0b	; 11
   135aa:	83 e0       	ldi	r24, 0x03	; 3
   135ac:	e8 9f       	mul	r30, r24
   135ae:	f0 01       	movw	r30, r0
   135b0:	11 24       	eor	r1, r1
   135b2:	82 a1       	ldd	r24, Z+34	; 0x22
   135b4:	1f 92       	push	r1
   135b6:	8f 93       	push	r24
   135b8:	8e eb       	ldi	r24, 0xBE	; 190
   135ba:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   135bc:	54 c0       	rjmp	.+168    	; 0x13666 <gpib_tests+0x420>
   135be:	65 ed       	ldi	r22, 0xD5	; 213
   135c0:	7d e0       	ldi	r23, 0x0D	; 13
   135c2:	8e 81       	ldd	r24, Y+6	; 0x06
   135c4:	9f 81       	ldd	r25, Y+7	; 0x07
   135c6:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   135ca:	89 2b       	or	r24, r25
   135cc:	09 f4       	brne	.+2      	; 0x135d0 <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   135ce:	56 c0       	rjmp	.+172    	; 0x1367c <gpib_tests+0x436>
   135d0:	60 ec       	ldi	r22, 0xC0	; 192
   135d2:	73 e1       	ldi	r23, 0x13	; 19
   135d4:	88 85       	ldd	r24, Y+8	; 0x08
   135d6:	99 85       	ldd	r25, Y+9	; 0x09
   135d8:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   135dc:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   135de:	59 f0       	breq	.+22     	; 0x135f6 <gpib_tests+0x3b0>
   135e0:	e2 b1       	in	r30, 0x02	; 2
   135e2:	83 e0       	ldi	r24, 0x03	; 3
   135e4:	e8 9f       	mul	r30, r24
   135e6:	f0 01       	movw	r30, r0
   135e8:	11 24       	eor	r1, r1
   135ea:	81 a1       	ldd	r24, Z+33	; 0x21
   135ec:	1f 92       	push	r1
   135ee:	8f 93       	push	r24
   135f0:	87 ea       	ldi	r24, 0xA7	; 167
   135f2:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   135f4:	38 c0       	rjmp	.+112    	; 0x13666 <gpib_tests+0x420>
   135f6:	6d ec       	ldi	r22, 0xCD	; 205
   135f8:	7d e0       	ldi	r23, 0x0D	; 13
   135fa:	88 85       	ldd	r24, Y+8	; 0x08
   135fc:	99 85       	ldd	r25, Y+9	; 0x09
   135fe:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13602:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   13604:	59 f0       	breq	.+22     	; 0x1361c <gpib_tests+0x3d6>
   13606:	e5 b1       	in	r30, 0x05	; 5
   13608:	83 e0       	ldi	r24, 0x03	; 3
   1360a:	e8 9f       	mul	r30, r24
   1360c:	f0 01       	movw	r30, r0
   1360e:	11 24       	eor	r1, r1
   13610:	81 a1       	ldd	r24, Z+33	; 0x21
   13612:	1f 92       	push	r1
   13614:	8f 93       	push	r24
   13616:	80 e9       	ldi	r24, 0x90	; 144
   13618:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1361a:	25 c0       	rjmp	.+74     	; 0x13666 <gpib_tests+0x420>
   1361c:	66 ef       	ldi	r22, 0xF6	; 246
   1361e:	7c e0       	ldi	r23, 0x0C	; 12
   13620:	88 85       	ldd	r24, Y+8	; 0x08
   13622:	99 85       	ldd	r25, Y+9	; 0x09
   13624:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13628:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   1362a:	59 f0       	breq	.+22     	; 0x13642 <gpib_tests+0x3fc>
   1362c:	e8 b1       	in	r30, 0x08	; 8
   1362e:	83 e0       	ldi	r24, 0x03	; 3
   13630:	e8 9f       	mul	r30, r24
   13632:	f0 01       	movw	r30, r0
   13634:	11 24       	eor	r1, r1
   13636:	81 a1       	ldd	r24, Z+33	; 0x21
   13638:	1f 92       	push	r1
   1363a:	8f 93       	push	r24
   1363c:	89 e7       	ldi	r24, 0x79	; 121
   1363e:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13640:	12 c0       	rjmp	.+36     	; 0x13666 <gpib_tests+0x420>
   13642:	63 e5       	ldi	r22, 0x53	; 83
   13644:	77 e0       	ldi	r23, 0x07	; 7
   13646:	88 85       	ldd	r24, Y+8	; 0x08
   13648:	99 85       	ldd	r25, Y+9	; 0x09
   1364a:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1364e:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   13650:	a9 f0       	breq	.+42     	; 0x1367c <gpib_tests+0x436>
   13652:	eb b1       	in	r30, 0x0b	; 11
   13654:	83 e0       	ldi	r24, 0x03	; 3
   13656:	e8 9f       	mul	r30, r24
   13658:	f0 01       	movw	r30, r0
   1365a:	11 24       	eor	r1, r1
   1365c:	81 a1       	ldd	r24, Z+33	; 0x21
   1365e:	1f 92       	push	r1
   13660:	8f 93       	push	r24
   13662:	82 e6       	ldi	r24, 0x62	; 98
   13664:	95 e1       	ldi	r25, 0x15	; 21
   13666:	1f 92       	push	r1
   13668:	9f 93       	push	r25
   1366a:	8f 93       	push	r24
   1366c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
					return (1);
   13670:	0f 90       	pop	r0
   13672:	0f 90       	pop	r0
   13674:	0f 90       	pop	r0
   13676:	0f 90       	pop	r0
   13678:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   1367a:	d7 c0       	rjmp	.+430    	; 0x1382a <gpib_tests+0x5e4>
   1367c:	97 01       	movw	r18, r14
   1367e:	46 e0       	ldi	r20, 0x06	; 6
   13680:	50 e0       	ldi	r21, 0x00	; 0
   13682:	6e eb       	ldi	r22, 0xBE	; 190
   13684:	7d e0       	ldi	r23, 0x0D	; 13
   13686:	c8 01       	movw	r24, r16
   13688:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1368c:	89 2b       	or	r24, r25
   1368e:	09 f4       	brne	.+2      	; 0x13692 <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   13690:	e6 cd       	rjmp	.-1076   	; 0x1325e <gpib_tests+0x18>
   13692:	6b e2       	ldi	r22, 0x2B	; 43
   13694:	73 e1       	ldi	r23, 0x13	; 19
   13696:	8c 81       	ldd	r24, Y+4	; 0x04
   13698:	9d 81       	ldd	r25, Y+5	; 0x05
   1369a:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1369e:	89 2b       	or	r24, r25
   136a0:	09 f4       	brne	.+2      	; 0x136a4 <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   136a2:	dd cd       	rjmp	.-1094   	; 0x1325e <gpib_tests+0x18>
   136a4:	68 ec       	ldi	r22, 0xC8	; 200
   136a6:	7d e0       	ldi	r23, 0x0D	; 13
   136a8:	8e 81       	ldd	r24, Y+6	; 0x06
   136aa:	9f 81       	ldd	r25, Y+7	; 0x07
   136ac:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   136b0:	89 2b       	or	r24, r25
   136b2:	09 f4       	brne	.+2      	; 0x136b6 <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   136b4:	45 c0       	rjmp	.+138    	; 0x13740 <gpib_tests+0x4fa>
   136b6:	8a 85       	ldd	r24, Y+10	; 0x0a
   136b8:	9b 85       	ldd	r25, Y+11	; 0x0b
   136ba:	0e 94 c4 33 	call	0x6788	; 0x6788 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   136be:	16 2f       	mov	r17, r22
   136c0:	60 ec       	ldi	r22, 0xC0	; 192
   136c2:	73 e1       	ldi	r23, 0x13	; 19
   136c4:	88 85       	ldd	r24, Y+8	; 0x08
   136c6:	99 85       	ldd	r25, Y+9	; 0x09
   136c8:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   136cc:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   136ce:	41 f0       	breq	.+16     	; 0x136e0 <gpib_tests+0x49a>
   136d0:	e2 b1       	in	r30, 0x02	; 2
   136d2:	83 e0       	ldi	r24, 0x03	; 3
   136d4:	e8 9f       	mul	r30, r24
   136d6:	f0 01       	movw	r30, r0
   136d8:	11 24       	eor	r1, r1
   136da:	8f ef       	ldi	r24, 0xFF	; 255
   136dc:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   136de:	45 c0       	rjmp	.+138    	; 0x1376a <gpib_tests+0x524>
   136e0:	6d ec       	ldi	r22, 0xCD	; 205
   136e2:	7d e0       	ldi	r23, 0x0D	; 13
   136e4:	88 85       	ldd	r24, Y+8	; 0x08
   136e6:	99 85       	ldd	r25, Y+9	; 0x09
   136e8:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   136ec:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   136ee:	41 f0       	breq	.+16     	; 0x13700 <gpib_tests+0x4ba>
   136f0:	e5 b1       	in	r30, 0x05	; 5
   136f2:	83 e0       	ldi	r24, 0x03	; 3
   136f4:	e8 9f       	mul	r30, r24
   136f6:	f0 01       	movw	r30, r0
   136f8:	11 24       	eor	r1, r1
   136fa:	8f ef       	ldi	r24, 0xFF	; 255
   136fc:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   136fe:	3f c0       	rjmp	.+126    	; 0x1377e <gpib_tests+0x538>
   13700:	66 ef       	ldi	r22, 0xF6	; 246
   13702:	7c e0       	ldi	r23, 0x0C	; 12
   13704:	88 85       	ldd	r24, Y+8	; 0x08
   13706:	99 85       	ldd	r25, Y+9	; 0x09
   13708:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1370c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   1370e:	41 f0       	breq	.+16     	; 0x13720 <gpib_tests+0x4da>
   13710:	e8 b1       	in	r30, 0x08	; 8
   13712:	83 e0       	ldi	r24, 0x03	; 3
   13714:	e8 9f       	mul	r30, r24
   13716:	f0 01       	movw	r30, r0
   13718:	11 24       	eor	r1, r1
   1371a:	8f ef       	ldi	r24, 0xFF	; 255
   1371c:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1371e:	39 c0       	rjmp	.+114    	; 0x13792 <gpib_tests+0x54c>
   13720:	63 e5       	ldi	r22, 0x53	; 83
   13722:	77 e0       	ldi	r23, 0x07	; 7
   13724:	88 85       	ldd	r24, Y+8	; 0x08
   13726:	99 85       	ldd	r25, Y+9	; 0x09
   13728:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1372c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   1372e:	41 f0       	breq	.+16     	; 0x13740 <gpib_tests+0x4fa>
   13730:	eb b1       	in	r30, 0x0b	; 11
   13732:	83 e0       	ldi	r24, 0x03	; 3
   13734:	e8 9f       	mul	r30, r24
   13736:	f0 01       	movw	r30, r0
   13738:	11 24       	eor	r1, r1
   1373a:	8f ef       	ldi	r24, 0xFF	; 255
   1373c:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   1373e:	33 c0       	rjmp	.+102    	; 0x137a6 <gpib_tests+0x560>
   13740:	6f ec       	ldi	r22, 0xCF	; 207
   13742:	7d e0       	ldi	r23, 0x0D	; 13
   13744:	8e 81       	ldd	r24, Y+6	; 0x06
   13746:	9f 81       	ldd	r25, Y+7	; 0x07
   13748:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1374c:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   1374e:	91 f1       	breq	.+100    	; 0x137b4 <gpib_tests+0x56e>
   13750:	8a 85       	ldd	r24, Y+10	; 0x0a
   13752:	9b 85       	ldd	r25, Y+11	; 0x0b
   13754:	0e 94 c4 33 	call	0x6788	; 0x6788 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13758:	16 2f       	mov	r17, r22
   1375a:	60 ec       	ldi	r22, 0xC0	; 192
   1375c:	73 e1       	ldi	r23, 0x13	; 19
   1375e:	88 85       	ldd	r24, Y+8	; 0x08
   13760:	99 85       	ldd	r25, Y+9	; 0x09
   13762:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13766:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   13768:	11 f0       	breq	.+4      	; 0x1376e <gpib_tests+0x528>
   1376a:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1376c:	1d c0       	rjmp	.+58     	; 0x137a8 <gpib_tests+0x562>
   1376e:	6d ec       	ldi	r22, 0xCD	; 205
   13770:	7d e0       	ldi	r23, 0x0D	; 13
   13772:	88 85       	ldd	r24, Y+8	; 0x08
   13774:	99 85       	ldd	r25, Y+9	; 0x09
   13776:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1377a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   1377c:	11 f0       	breq	.+4      	; 0x13782 <gpib_tests+0x53c>
   1377e:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13780:	13 c0       	rjmp	.+38     	; 0x137a8 <gpib_tests+0x562>
   13782:	66 ef       	ldi	r22, 0xF6	; 246
   13784:	7c e0       	ldi	r23, 0x0C	; 12
   13786:	88 85       	ldd	r24, Y+8	; 0x08
   13788:	99 85       	ldd	r25, Y+9	; 0x09
   1378a:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   1378e:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   13790:	11 f0       	breq	.+4      	; 0x13796 <gpib_tests+0x550>
   13792:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13794:	09 c0       	rjmp	.+18     	; 0x137a8 <gpib_tests+0x562>
   13796:	63 e5       	ldi	r22, 0x53	; 83
   13798:	77 e0       	ldi	r23, 0x07	; 7
   1379a:	88 85       	ldd	r24, Y+8	; 0x08
   1379c:	99 85       	ldd	r25, Y+9	; 0x09
   1379e:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   137a2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   137a4:	39 f0       	breq	.+14     	; 0x137b4 <gpib_tests+0x56e>
   137a6:	eb b1       	in	r30, 0x0b	; 11
   137a8:	83 e0       	ldi	r24, 0x03	; 3
   137aa:	e8 9f       	mul	r30, r24
   137ac:	f0 01       	movw	r30, r0
   137ae:	11 24       	eor	r1, r1
   137b0:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   137b2:	3b c0       	rjmp	.+118    	; 0x1382a <gpib_tests+0x5e4>
   137b4:	65 ed       	ldi	r22, 0xD5	; 213
   137b6:	7d e0       	ldi	r23, 0x0D	; 13
   137b8:	8e 81       	ldd	r24, Y+6	; 0x06
   137ba:	9f 81       	ldd	r25, Y+7	; 0x07
   137bc:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   137c0:	89 2b       	or	r24, r25
   137c2:	09 f4       	brne	.+2      	; 0x137c6 <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   137c4:	4c cd       	rjmp	.-1384   	; 0x1325e <gpib_tests+0x18>
   137c6:	8a 85       	ldd	r24, Y+10	; 0x0a
   137c8:	9b 85       	ldd	r25, Y+11	; 0x0b
   137ca:	0e 94 c4 33 	call	0x6788	; 0x6788 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   137ce:	16 2f       	mov	r17, r22
   137d0:	60 ec       	ldi	r22, 0xC0	; 192
   137d2:	73 e1       	ldi	r23, 0x13	; 19
   137d4:	88 85       	ldd	r24, Y+8	; 0x08
   137d6:	99 85       	ldd	r25, Y+9	; 0x09
   137d8:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   137dc:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   137de:	11 f0       	breq	.+4      	; 0x137e4 <gpib_tests+0x59e>
   137e0:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   137e2:	1e c0       	rjmp	.+60     	; 0x13820 <gpib_tests+0x5da>
   137e4:	6d ec       	ldi	r22, 0xCD	; 205
   137e6:	7d e0       	ldi	r23, 0x0D	; 13
   137e8:	88 85       	ldd	r24, Y+8	; 0x08
   137ea:	99 85       	ldd	r25, Y+9	; 0x09
   137ec:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   137f0:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   137f2:	11 f0       	breq	.+4      	; 0x137f8 <gpib_tests+0x5b2>
   137f4:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   137f6:	14 c0       	rjmp	.+40     	; 0x13820 <gpib_tests+0x5da>
   137f8:	66 ef       	ldi	r22, 0xF6	; 246
   137fa:	7c e0       	ldi	r23, 0x0C	; 12
   137fc:	88 85       	ldd	r24, Y+8	; 0x08
   137fe:	99 85       	ldd	r25, Y+9	; 0x09
   13800:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13804:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   13806:	11 f0       	breq	.+4      	; 0x1380c <gpib_tests+0x5c6>
   13808:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1380a:	0a c0       	rjmp	.+20     	; 0x13820 <gpib_tests+0x5da>
   1380c:	63 e5       	ldi	r22, 0x53	; 83
   1380e:	77 e0       	ldi	r23, 0x07	; 7
   13810:	88 85       	ldd	r24, Y+8	; 0x08
   13812:	99 85       	ldd	r25, Y+9	; 0x09
   13814:	0e 94 0e 33 	call	0x661c	; 0x661c <MATCHI>
   13818:	89 2b       	or	r24, r25
   1381a:	09 f4       	brne	.+2      	; 0x1381e <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   1381c:	20 cd       	rjmp	.-1472   	; 0x1325e <gpib_tests+0x18>
   1381e:	eb b1       	in	r30, 0x0b	; 11
   13820:	83 e0       	ldi	r24, 0x03	; 3
   13822:	e8 9f       	mul	r30, r24
   13824:	f0 01       	movw	r30, r0
   13826:	11 24       	eor	r1, r1
					return (1);
   13828:	11 a3       	std	Z+33, r17	; 0x21
   1382a:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   1382c:	90 e0       	ldi	r25, 0x00	; 0
   1382e:	cd b7       	in	r28, 0x3d	; 61
   13830:	de b7       	in	r29, 0x3e	; 62
   13832:	e6 e0       	ldi	r30, 0x06	; 6
   13834:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00013838 <SS80ControllerPack>:
   13838:	0f 93       	push	r16
   1383a:	1f 93       	push	r17
   1383c:	25 e0       	ldi	r18, 0x05	; 5
   1383e:	30 e0       	ldi	r19, 0x00	; 0
   13840:	fc 01       	movw	r30, r24
   13842:	31 83       	std	Z+1, r19	; 0x01
   13844:	20 83       	st	Z, r18
   13846:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   1384a:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1384e:	05 a1       	ldd	r16, Z+37	; 0x25
   13850:	16 a1       	ldd	r17, Z+38	; 0x26
   13852:	20 e0       	ldi	r18, 0x00	; 0
   13854:	30 e0       	ldi	r19, 0x00	; 0
   13856:	42 e0       	ldi	r20, 0x02	; 2
   13858:	50 e0       	ldi	r21, 0x00	; 0
   1385a:	60 e0       	ldi	r22, 0x00	; 0
   1385c:	70 e0       	ldi	r23, 0x00	; 0
   1385e:	8a e8       	ldi	r24, 0x8A	; 138
   13860:	99 e1       	ldi	r25, 0x19	; 25
   13862:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13866:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   1386a:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1386e:	07 a1       	ldd	r16, Z+39	; 0x27
   13870:	10 a5       	ldd	r17, Z+40	; 0x28
   13872:	20 e0       	ldi	r18, 0x00	; 0
   13874:	30 e0       	ldi	r19, 0x00	; 0
   13876:	42 e0       	ldi	r20, 0x02	; 2
   13878:	50 e0       	ldi	r21, 0x00	; 0
   1387a:	61 e0       	ldi	r22, 0x01	; 1
   1387c:	70 e0       	ldi	r23, 0x00	; 0
   1387e:	8a e8       	ldi	r24, 0x8A	; 138
   13880:	99 e1       	ldi	r25, 0x19	; 25
   13882:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13886:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   1388a:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1388e:	01 a5       	ldd	r16, Z+41	; 0x29
   13890:	10 e0       	ldi	r17, 0x00	; 0
   13892:	20 e0       	ldi	r18, 0x00	; 0
   13894:	30 e0       	ldi	r19, 0x00	; 0
   13896:	41 e0       	ldi	r20, 0x01	; 1
   13898:	50 e0       	ldi	r21, 0x00	; 0
   1389a:	64 e0       	ldi	r22, 0x04	; 4
   1389c:	70 e0       	ldi	r23, 0x00	; 0
   1389e:	8a e8       	ldi	r24, 0x8A	; 138
   138a0:	99 e1       	ldi	r25, 0x19	; 25
   138a2:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   138a6:	8a e8       	ldi	r24, 0x8A	; 138
   138a8:	99 e1       	ldi	r25, 0x19	; 25
   138aa:	1f 91       	pop	r17
   138ac:	0f 91       	pop	r16
   138ae:	08 95       	ret

000138b0 <SS80UnitPack>:
   138b0:	0f 93       	push	r16
   138b2:	1f 93       	push	r17
   138b4:	23 e1       	ldi	r18, 0x13	; 19
   138b6:	30 e0       	ldi	r19, 0x00	; 0
   138b8:	fc 01       	movw	r30, r24
   138ba:	31 83       	std	Z+1, r19	; 0x01
   138bc:	20 83       	st	Z, r18
   138be:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   138c2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   138c6:	02 a5       	ldd	r16, Z+42	; 0x2a
   138c8:	10 e0       	ldi	r17, 0x00	; 0
   138ca:	20 e0       	ldi	r18, 0x00	; 0
   138cc:	30 e0       	ldi	r19, 0x00	; 0
   138ce:	41 e0       	ldi	r20, 0x01	; 1
   138d0:	50 e0       	ldi	r21, 0x00	; 0
   138d2:	60 e0       	ldi	r22, 0x00	; 0
   138d4:	70 e0       	ldi	r23, 0x00	; 0
   138d6:	87 e7       	ldi	r24, 0x77	; 119
   138d8:	99 e1       	ldi	r25, 0x19	; 25
   138da:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   138de:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   138e2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   138e6:	03 a5       	ldd	r16, Z+43	; 0x2b
   138e8:	14 a5       	ldd	r17, Z+44	; 0x2c
   138ea:	25 a5       	ldd	r18, Z+45	; 0x2d
   138ec:	36 a5       	ldd	r19, Z+46	; 0x2e
   138ee:	43 e0       	ldi	r20, 0x03	; 3
   138f0:	50 e0       	ldi	r21, 0x00	; 0
   138f2:	61 e0       	ldi	r22, 0x01	; 1
   138f4:	70 e0       	ldi	r23, 0x00	; 0
   138f6:	87 e7       	ldi	r24, 0x77	; 119
   138f8:	99 e1       	ldi	r25, 0x19	; 25
   138fa:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   138fe:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13902:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13906:	07 a5       	ldd	r16, Z+47	; 0x2f
   13908:	10 a9       	ldd	r17, Z+48	; 0x30
   1390a:	20 e0       	ldi	r18, 0x00	; 0
   1390c:	30 e0       	ldi	r19, 0x00	; 0
   1390e:	42 e0       	ldi	r20, 0x02	; 2
   13910:	50 e0       	ldi	r21, 0x00	; 0
   13912:	64 e0       	ldi	r22, 0x04	; 4
   13914:	70 e0       	ldi	r23, 0x00	; 0
   13916:	87 e7       	ldi	r24, 0x77	; 119
   13918:	99 e1       	ldi	r25, 0x19	; 25
   1391a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1391e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13922:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13926:	01 a9       	ldd	r16, Z+49	; 0x31
   13928:	10 e0       	ldi	r17, 0x00	; 0
   1392a:	20 e0       	ldi	r18, 0x00	; 0
   1392c:	30 e0       	ldi	r19, 0x00	; 0
   1392e:	41 e0       	ldi	r20, 0x01	; 1
   13930:	50 e0       	ldi	r21, 0x00	; 0
   13932:	66 e0       	ldi	r22, 0x06	; 6
   13934:	70 e0       	ldi	r23, 0x00	; 0
   13936:	87 e7       	ldi	r24, 0x77	; 119
   13938:	99 e1       	ldi	r25, 0x19	; 25
   1393a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1393e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13942:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13946:	02 a9       	ldd	r16, Z+50	; 0x32
   13948:	10 e0       	ldi	r17, 0x00	; 0
   1394a:	20 e0       	ldi	r18, 0x00	; 0
   1394c:	30 e0       	ldi	r19, 0x00	; 0
   1394e:	41 e0       	ldi	r20, 0x01	; 1
   13950:	50 e0       	ldi	r21, 0x00	; 0
   13952:	67 e0       	ldi	r22, 0x07	; 7
   13954:	70 e0       	ldi	r23, 0x00	; 0
   13956:	87 e7       	ldi	r24, 0x77	; 119
   13958:	99 e1       	ldi	r25, 0x19	; 25
   1395a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1395e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13962:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13966:	03 a9       	ldd	r16, Z+51	; 0x33
   13968:	14 a9       	ldd	r17, Z+52	; 0x34
   1396a:	20 e0       	ldi	r18, 0x00	; 0
   1396c:	30 e0       	ldi	r19, 0x00	; 0
   1396e:	42 e0       	ldi	r20, 0x02	; 2
   13970:	50 e0       	ldi	r21, 0x00	; 0
   13972:	68 e0       	ldi	r22, 0x08	; 8
   13974:	70 e0       	ldi	r23, 0x00	; 0
   13976:	87 e7       	ldi	r24, 0x77	; 119
   13978:	99 e1       	ldi	r25, 0x19	; 25
   1397a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1397e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13982:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13986:	05 a9       	ldd	r16, Z+53	; 0x35
   13988:	16 a9       	ldd	r17, Z+54	; 0x36
   1398a:	20 e0       	ldi	r18, 0x00	; 0
   1398c:	30 e0       	ldi	r19, 0x00	; 0
   1398e:	42 e0       	ldi	r20, 0x02	; 2
   13990:	50 e0       	ldi	r21, 0x00	; 0
   13992:	6a e0       	ldi	r22, 0x0A	; 10
   13994:	70 e0       	ldi	r23, 0x00	; 0
   13996:	87 e7       	ldi	r24, 0x77	; 119
   13998:	99 e1       	ldi	r25, 0x19	; 25
   1399a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1399e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   139a2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   139a6:	07 a9       	ldd	r16, Z+55	; 0x37
   139a8:	10 ad       	ldd	r17, Z+56	; 0x38
   139aa:	20 e0       	ldi	r18, 0x00	; 0
   139ac:	30 e0       	ldi	r19, 0x00	; 0
   139ae:	42 e0       	ldi	r20, 0x02	; 2
   139b0:	50 e0       	ldi	r21, 0x00	; 0
   139b2:	6c e0       	ldi	r22, 0x0C	; 12
   139b4:	70 e0       	ldi	r23, 0x00	; 0
   139b6:	87 e7       	ldi	r24, 0x77	; 119
   139b8:	99 e1       	ldi	r25, 0x19	; 25
   139ba:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   139be:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   139c2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   139c6:	01 ad       	ldd	r16, Z+57	; 0x39
   139c8:	12 ad       	ldd	r17, Z+58	; 0x3a
   139ca:	20 e0       	ldi	r18, 0x00	; 0
   139cc:	30 e0       	ldi	r19, 0x00	; 0
   139ce:	42 e0       	ldi	r20, 0x02	; 2
   139d0:	50 e0       	ldi	r21, 0x00	; 0
   139d2:	6e e0       	ldi	r22, 0x0E	; 14
   139d4:	70 e0       	ldi	r23, 0x00	; 0
   139d6:	87 e7       	ldi	r24, 0x77	; 119
   139d8:	99 e1       	ldi	r25, 0x19	; 25
   139da:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   139de:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   139e2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   139e6:	03 ad       	ldd	r16, Z+59	; 0x3b
   139e8:	10 e0       	ldi	r17, 0x00	; 0
   139ea:	20 e0       	ldi	r18, 0x00	; 0
   139ec:	30 e0       	ldi	r19, 0x00	; 0
   139ee:	41 e0       	ldi	r20, 0x01	; 1
   139f0:	50 e0       	ldi	r21, 0x00	; 0
   139f2:	60 e1       	ldi	r22, 0x10	; 16
   139f4:	70 e0       	ldi	r23, 0x00	; 0
   139f6:	87 e7       	ldi	r24, 0x77	; 119
   139f8:	99 e1       	ldi	r25, 0x19	; 25
   139fa:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   139fe:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13a02:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13a06:	04 ad       	ldd	r16, Z+60	; 0x3c
   13a08:	10 e0       	ldi	r17, 0x00	; 0
   13a0a:	20 e0       	ldi	r18, 0x00	; 0
   13a0c:	30 e0       	ldi	r19, 0x00	; 0
   13a0e:	41 e0       	ldi	r20, 0x01	; 1
   13a10:	50 e0       	ldi	r21, 0x00	; 0
   13a12:	61 e1       	ldi	r22, 0x11	; 17
   13a14:	70 e0       	ldi	r23, 0x00	; 0
   13a16:	87 e7       	ldi	r24, 0x77	; 119
   13a18:	99 e1       	ldi	r25, 0x19	; 25
   13a1a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13a1e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13a22:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13a26:	05 ad       	ldd	r16, Z+61	; 0x3d
   13a28:	10 e0       	ldi	r17, 0x00	; 0
   13a2a:	20 e0       	ldi	r18, 0x00	; 0
   13a2c:	30 e0       	ldi	r19, 0x00	; 0
   13a2e:	41 e0       	ldi	r20, 0x01	; 1
   13a30:	50 e0       	ldi	r21, 0x00	; 0
   13a32:	62 e1       	ldi	r22, 0x12	; 18
   13a34:	70 e0       	ldi	r23, 0x00	; 0
   13a36:	87 e7       	ldi	r24, 0x77	; 119
   13a38:	99 e1       	ldi	r25, 0x19	; 25
   13a3a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13a3e:	87 e7       	ldi	r24, 0x77	; 119
   13a40:	99 e1       	ldi	r25, 0x19	; 25
   13a42:	1f 91       	pop	r17
   13a44:	0f 91       	pop	r16
   13a46:	08 95       	ret

00013a48 <SS80VolumePack>:
   13a48:	0f 93       	push	r16
   13a4a:	1f 93       	push	r17
   13a4c:	2d e0       	ldi	r18, 0x0D	; 13
   13a4e:	30 e0       	ldi	r19, 0x00	; 0
   13a50:	fc 01       	movw	r30, r24
   13a52:	31 83       	std	Z+1, r19	; 0x01
   13a54:	20 83       	st	Z, r18
   13a56:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13a5a:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13a5e:	fe 96       	adiw	r30, 0x3e	; 62
   13a60:	00 81       	ld	r16, Z
   13a62:	11 81       	ldd	r17, Z+1	; 0x01
   13a64:	22 81       	ldd	r18, Z+2	; 0x02
   13a66:	33 81       	ldd	r19, Z+3	; 0x03
   13a68:	43 e0       	ldi	r20, 0x03	; 3
   13a6a:	50 e0       	ldi	r21, 0x00	; 0
   13a6c:	60 e0       	ldi	r22, 0x00	; 0
   13a6e:	70 e0       	ldi	r23, 0x00	; 0
   13a70:	8a e6       	ldi	r24, 0x6A	; 106
   13a72:	99 e1       	ldi	r25, 0x19	; 25
   13a74:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13a78:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13a7c:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13a80:	ee 5b       	subi	r30, 0xBE	; 190
   13a82:	ff 4f       	sbci	r31, 0xFF	; 255
   13a84:	00 81       	ld	r16, Z
   13a86:	10 e0       	ldi	r17, 0x00	; 0
   13a88:	20 e0       	ldi	r18, 0x00	; 0
   13a8a:	30 e0       	ldi	r19, 0x00	; 0
   13a8c:	41 e0       	ldi	r20, 0x01	; 1
   13a8e:	50 e0       	ldi	r21, 0x00	; 0
   13a90:	63 e0       	ldi	r22, 0x03	; 3
   13a92:	70 e0       	ldi	r23, 0x00	; 0
   13a94:	8a e6       	ldi	r24, 0x6A	; 106
   13a96:	99 e1       	ldi	r25, 0x19	; 25
   13a98:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13a9c:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13aa0:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13aa4:	ed 5b       	subi	r30, 0xBD	; 189
   13aa6:	ff 4f       	sbci	r31, 0xFF	; 255
   13aa8:	00 81       	ld	r16, Z
   13aaa:	11 81       	ldd	r17, Z+1	; 0x01
   13aac:	20 e0       	ldi	r18, 0x00	; 0
   13aae:	30 e0       	ldi	r19, 0x00	; 0
   13ab0:	42 e0       	ldi	r20, 0x02	; 2
   13ab2:	50 e0       	ldi	r21, 0x00	; 0
   13ab4:	64 e0       	ldi	r22, 0x04	; 4
   13ab6:	70 e0       	ldi	r23, 0x00	; 0
   13ab8:	8a e6       	ldi	r24, 0x6A	; 106
   13aba:	99 e1       	ldi	r25, 0x19	; 25
   13abc:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13ac0:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13ac4:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13ac8:	eb 5b       	subi	r30, 0xBB	; 187
   13aca:	ff 4f       	sbci	r31, 0xFF	; 255
   13acc:	00 81       	ld	r16, Z
   13ace:	11 81       	ldd	r17, Z+1	; 0x01
   13ad0:	22 81       	ldd	r18, Z+2	; 0x02
   13ad2:	33 81       	ldd	r19, Z+3	; 0x03
   13ad4:	46 e0       	ldi	r20, 0x06	; 6
   13ad6:	50 e0       	ldi	r21, 0x00	; 0
   13ad8:	66 e0       	ldi	r22, 0x06	; 6
   13ada:	70 e0       	ldi	r23, 0x00	; 0
   13adc:	8a e6       	ldi	r24, 0x6A	; 106
   13ade:	99 e1       	ldi	r25, 0x19	; 25
   13ae0:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13ae4:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13ae8:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13aec:	e7 5b       	subi	r30, 0xB7	; 183
   13aee:	ff 4f       	sbci	r31, 0xFF	; 255
   13af0:	00 81       	ld	r16, Z
   13af2:	10 e0       	ldi	r17, 0x00	; 0
   13af4:	20 e0       	ldi	r18, 0x00	; 0
   13af6:	30 e0       	ldi	r19, 0x00	; 0
   13af8:	41 e0       	ldi	r20, 0x01	; 1
   13afa:	50 e0       	ldi	r21, 0x00	; 0
   13afc:	6c e0       	ldi	r22, 0x0C	; 12
   13afe:	70 e0       	ldi	r23, 0x00	; 0
   13b00:	8a e6       	ldi	r24, 0x6A	; 106
   13b02:	99 e1       	ldi	r25, 0x19	; 25
   13b04:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13b08:	8a e6       	ldi	r24, 0x6A	; 106
   13b0a:	99 e1       	ldi	r25, 0x19	; 25
   13b0c:	1f 91       	pop	r17
   13b0e:	0f 91       	pop	r16
   13b10:	08 95       	ret

00013b12 <SS80_test_extended_status>:
   13b12:	9b 01       	movw	r18, r22
   13b14:	43 e0       	ldi	r20, 0x03	; 3
   13b16:	35 95       	asr	r19
   13b18:	27 95       	ror	r18
   13b1a:	4a 95       	dec	r20
   13b1c:	e1 f7       	brne	.-8      	; 0x13b16 <SS80_test_extended_status+0x4>
   13b1e:	82 0f       	add	r24, r18
   13b20:	93 1f       	adc	r25, r19
   13b22:	67 70       	andi	r22, 0x07	; 7
   13b24:	77 27       	eor	r23, r23
   13b26:	20 e8       	ldi	r18, 0x80	; 128
   13b28:	30 e0       	ldi	r19, 0x00	; 0
   13b2a:	02 c0       	rjmp	.+4      	; 0x13b30 <SS80_test_extended_status+0x1e>
   13b2c:	35 95       	asr	r19
   13b2e:	27 95       	ror	r18
   13b30:	6a 95       	dec	r22
   13b32:	e2 f7       	brpl	.-8      	; 0x13b2c <SS80_test_extended_status+0x1a>
   13b34:	fc 01       	movw	r30, r24
   13b36:	80 81       	ld	r24, Z
   13b38:	28 23       	and	r18, r24
   13b3a:	81 e0       	ldi	r24, 0x01	; 1
   13b3c:	90 e0       	ldi	r25, 0x00	; 0
   13b3e:	11 f4       	brne	.+4      	; 0x13b44 <SS80_test_extended_status+0x32>
   13b40:	80 e0       	ldi	r24, 0x00	; 0
   13b42:	90 e0       	ldi	r25, 0x00	; 0
   13b44:	08 95       	ret

00013b46 <SS80_display_extended_status>:
   13b46:	6f 92       	push	r6
   13b48:	7f 92       	push	r7
   13b4a:	8f 92       	push	r8
   13b4c:	ef 92       	push	r14
   13b4e:	ff 92       	push	r15
   13b50:	0f 93       	push	r16
   13b52:	1f 93       	push	r17
   13b54:	cf 93       	push	r28
   13b56:	df 93       	push	r29
   13b58:	fc 01       	movw	r30, r24
   13b5a:	ac 01       	movw	r20, r24
   13b5c:	48 5f       	subi	r20, 0xF8	; 248
   13b5e:	5f 4f       	sbci	r21, 0xFF	; 255
   13b60:	20 e0       	ldi	r18, 0x00	; 0
   13b62:	30 e0       	ldi	r19, 0x00	; 0
   13b64:	a1 91       	ld	r26, Z+
   13b66:	aa 23       	and	r26, r26
   13b68:	11 f0       	breq	.+4      	; 0x13b6e <SS80_display_extended_status+0x28>
   13b6a:	21 e0       	ldi	r18, 0x01	; 1
   13b6c:	30 e0       	ldi	r19, 0x00	; 0
   13b6e:	e4 17       	cp	r30, r20
   13b70:	f5 07       	cpc	r31, r21
   13b72:	c1 f7       	brne	.-16     	; 0x13b64 <SS80_display_extended_status+0x1e>
   13b74:	23 2b       	or	r18, r19
   13b76:	a1 f1       	breq	.+104    	; 0x13be0 <SS80_display_extended_status+0x9a>
   13b78:	8c 01       	movw	r16, r24
   13b7a:	7f 93       	push	r23
   13b7c:	6f 93       	push	r22
   13b7e:	81 e7       	ldi	r24, 0x71	; 113
   13b80:	9e e1       	ldi	r25, 0x1E	; 30
   13b82:	1f 92       	push	r1
   13b84:	9f 93       	push	r25
   13b86:	8f 93       	push	r24
   13b88:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13b8c:	cb ec       	ldi	r28, 0xCB	; 203
   13b8e:	d1 e0       	ldi	r29, 0x01	; 1
   13b90:	0f 90       	pop	r0
   13b92:	0f 90       	pop	r0
   13b94:	0f 90       	pop	r0
   13b96:	0f 90       	pop	r0
   13b98:	0f 90       	pop	r0
   13b9a:	86 e6       	ldi	r24, 0x66	; 102
   13b9c:	9e e1       	ldi	r25, 0x1E	; 30
   13b9e:	3c 01       	movw	r6, r24
   13ba0:	e8 80       	ld	r14, Y
   13ba2:	f9 80       	ldd	r15, Y+1	; 0x01
   13ba4:	9f ef       	ldi	r25, 0xFF	; 255
   13ba6:	e9 16       	cp	r14, r25
   13ba8:	f9 06       	cpc	r15, r25
   13baa:	d1 f0       	breq	.+52     	; 0x13be0 <SS80_display_extended_status+0x9a>
   13bac:	b7 01       	movw	r22, r14
   13bae:	c8 01       	movw	r24, r16
   13bb0:	b0 df       	rcall	.-160    	; 0x13b12 <SS80_test_extended_status>
   13bb2:	89 2b       	or	r24, r25
   13bb4:	99 f0       	breq	.+38     	; 0x13bdc <SS80_display_extended_status+0x96>
   13bb6:	8b 81       	ldd	r24, Y+3	; 0x03
   13bb8:	8f 93       	push	r24
   13bba:	8a 81       	ldd	r24, Y+2	; 0x02
   13bbc:	8f 93       	push	r24
   13bbe:	ff 92       	push	r15
   13bc0:	ef 92       	push	r14
   13bc2:	1f 92       	push	r1
   13bc4:	7f 92       	push	r7
   13bc6:	6f 92       	push	r6
   13bc8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13bcc:	8d b7       	in	r24, 0x3d	; 61
   13bce:	9e b7       	in	r25, 0x3e	; 62
   13bd0:	07 96       	adiw	r24, 0x07	; 7
   13bd2:	0f b6       	in	r0, 0x3f	; 63
   13bd4:	f8 94       	cli
   13bd6:	9e bf       	out	0x3e, r25	; 62
   13bd8:	0f be       	out	0x3f, r0	; 63
   13bda:	8d bf       	out	0x3d, r24	; 61
   13bdc:	24 96       	adiw	r28, 0x04	; 4
   13bde:	e0 cf       	rjmp	.-64     	; 0x13ba0 <SS80_display_extended_status+0x5a>
   13be0:	df 91       	pop	r29
   13be2:	cf 91       	pop	r28
   13be4:	1f 91       	pop	r17
   13be6:	0f 91       	pop	r16
   13be8:	ff 90       	pop	r15
   13bea:	ef 90       	pop	r14
   13bec:	8f 90       	pop	r8
   13bee:	7f 90       	pop	r7
   13bf0:	6f 90       	pop	r6
   13bf2:	08 95       	ret

00013bf4 <SS80_send_status>:
   13bf4:	a6 e1       	ldi	r26, 0x16	; 22
   13bf6:	b0 e0       	ldi	r27, 0x00	; 0
   13bf8:	e0 e0       	ldi	r30, 0x00	; 0
   13bfa:	fe e9       	ldi	r31, 0x9E	; 158
   13bfc:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
   13c00:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13c04:	85 ff       	sbrs	r24, 5
   13c06:	0a c0       	rjmp	.+20     	; 0x13c1c <SS80_send_status+0x28>
   13c08:	82 e5       	ldi	r24, 0x52	; 82
   13c0a:	9e e1       	ldi	r25, 0x1E	; 30
   13c0c:	1f 92       	push	r1
   13c0e:	9f 93       	push	r25
   13c10:	8f 93       	push	r24
   13c12:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13c16:	0f 90       	pop	r0
   13c18:	0f 90       	pop	r0
   13c1a:	0f 90       	pop	r0
   13c1c:	ce 01       	movw	r24, r28
   13c1e:	01 96       	adiw	r24, 0x01	; 1
   13c20:	7c 01       	movw	r14, r24
   13c22:	84 e1       	ldi	r24, 0x14	; 20
   13c24:	f7 01       	movw	r30, r14
   13c26:	11 92       	st	Z+, r1
   13c28:	8a 95       	dec	r24
   13c2a:	e9 f7       	brne	.-6      	; 0x13c26 <SS80_send_status+0x32>
   13c2c:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13c30:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13c34:	86 81       	ldd	r24, Z+6	; 0x06
   13c36:	20 e1       	ldi	r18, 0x10	; 16
   13c38:	82 9f       	mul	r24, r18
   13c3a:	c0 01       	movw	r24, r0
   13c3c:	11 24       	eor	r1, r1
   13c3e:	95 81       	ldd	r25, Z+5	; 0x05
   13c40:	9f 70       	andi	r25, 0x0F	; 15
   13c42:	89 2b       	or	r24, r25
   13c44:	89 83       	std	Y+1, r24	; 0x01
   13c46:	8f ef       	ldi	r24, 0xFF	; 255
   13c48:	8a 83       	std	Y+2, r24	; 0x02
   13c4a:	83 81       	ldd	r24, Z+3	; 0x03
   13c4c:	86 ff       	sbrs	r24, 6
   13c4e:	02 c0       	rjmp	.+4      	; 0x13c54 <SS80_send_status+0x60>
   13c50:	92 e0       	ldi	r25, 0x02	; 2
   13c52:	9b 83       	std	Y+3, r25	; 0x03
   13c54:	82 ff       	sbrs	r24, 2
   13c56:	03 c0       	rjmp	.+6      	; 0x13c5e <SS80_send_status+0x6a>
   13c58:	9b 81       	ldd	r25, Y+3	; 0x03
   13c5a:	91 60       	ori	r25, 0x01	; 1
   13c5c:	9b 83       	std	Y+3, r25	; 0x03
   13c5e:	80 ff       	sbrs	r24, 0
   13c60:	02 c0       	rjmp	.+4      	; 0x13c66 <SS80_send_status+0x72>
   13c62:	82 e0       	ldi	r24, 0x02	; 2
   13c64:	8d 83       	std	Y+5, r24	; 0x05
   13c66:	83 81       	ldd	r24, Z+3	; 0x03
   13c68:	81 ff       	sbrs	r24, 1
   13c6a:	03 c0       	rjmp	.+6      	; 0x13c72 <SS80_send_status+0x7e>
   13c6c:	8d 81       	ldd	r24, Y+5	; 0x05
   13c6e:	82 60       	ori	r24, 0x02	; 2
   13c70:	8d 83       	std	Y+5, r24	; 0x05
   13c72:	83 81       	ldd	r24, Z+3	; 0x03
   13c74:	83 ff       	sbrs	r24, 3
   13c76:	02 c0       	rjmp	.+4      	; 0x13c7c <SS80_send_status+0x88>
   13c78:	88 e0       	ldi	r24, 0x08	; 8
   13c7a:	8f 83       	std	Y+7, r24	; 0x07
   13c7c:	83 81       	ldd	r24, Z+3	; 0x03
   13c7e:	94 81       	ldd	r25, Z+4	; 0x04
   13c80:	89 2b       	or	r24, r25
   13c82:	59 f4       	brne	.+22     	; 0x13c9a <SS80_send_status+0xa6>
   13c84:	07 81       	ldd	r16, Z+7	; 0x07
   13c86:	10 85       	ldd	r17, Z+8	; 0x08
   13c88:	21 85       	ldd	r18, Z+9	; 0x09
   13c8a:	32 85       	ldd	r19, Z+10	; 0x0a
   13c8c:	46 e0       	ldi	r20, 0x06	; 6
   13c8e:	50 e0       	ldi	r21, 0x00	; 0
   13c90:	6a e0       	ldi	r22, 0x0A	; 10
   13c92:	70 e0       	ldi	r23, 0x00	; 0
   13c94:	c7 01       	movw	r24, r14
   13c96:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   13c9a:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13c9e:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13ca2:	83 81       	ldd	r24, Z+3	; 0x03
   13ca4:	94 81       	ldd	r25, Z+4	; 0x04
   13ca6:	89 2b       	or	r24, r25
   13ca8:	11 f0       	breq	.+4      	; 0x13cae <SS80_send_status+0xba>
   13caa:	81 e0       	ldi	r24, 0x01	; 1
   13cac:	82 83       	std	Z+2, r24	; 0x02
   13cae:	80 e0       	ldi	r24, 0x00	; 0
   13cb0:	91 e0       	ldi	r25, 0x01	; 1
   13cb2:	9e 8b       	std	Y+22, r25	; 0x16
   13cb4:	8d 8b       	std	Y+21, r24	; 0x15
   13cb6:	ae 01       	movw	r20, r28
   13cb8:	4b 5e       	subi	r20, 0xEB	; 235
   13cba:	5f 4f       	sbci	r21, 0xFF	; 255
   13cbc:	64 e1       	ldi	r22, 0x14	; 20
   13cbe:	70 e0       	ldi	r23, 0x00	; 0
   13cc0:	c7 01       	movw	r24, r14
   13cc2:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   13cc6:	44 97       	sbiw	r24, 0x14	; 20
   13cc8:	71 f0       	breq	.+28     	; 0x13ce6 <SS80_send_status+0xf2>
   13cca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13cce:	80 ff       	sbrs	r24, 0
   13cd0:	0a c0       	rjmp	.+20     	; 0x13ce6 <SS80_send_status+0xf2>
   13cd2:	87 e3       	ldi	r24, 0x37	; 55
   13cd4:	9e e1       	ldi	r25, 0x1E	; 30
   13cd6:	1f 92       	push	r1
   13cd8:	9f 93       	push	r25
   13cda:	8f 93       	push	r24
   13cdc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13ce0:	0f 90       	pop	r0
   13ce2:	0f 90       	pop	r0
   13ce4:	0f 90       	pop	r0
   13ce6:	8d 89       	ldd	r24, Y+21	; 0x15
   13ce8:	9e 89       	ldd	r25, Y+22	; 0x16
   13cea:	88 27       	eor	r24, r24
   13cec:	90 7d       	andi	r25, 0xD0	; 208
   13cee:	66 96       	adiw	r28, 0x16	; 22
   13cf0:	e6 e0       	ldi	r30, 0x06	; 6
   13cf2:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00013cf6 <SS80_describe>:
   13cf6:	a4 e0       	ldi	r26, 0x04	; 4
   13cf8:	b0 e0       	ldi	r27, 0x00	; 0
   13cfa:	e1 e8       	ldi	r30, 0x81	; 129
   13cfc:	fe e9       	ldi	r31, 0x9E	; 158
   13cfe:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   13d02:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d06:	85 ff       	sbrs	r24, 5
   13d08:	0a c0       	rjmp	.+20     	; 0x13d1e <SS80_describe+0x28>
   13d0a:	86 e2       	ldi	r24, 0x26	; 38
   13d0c:	9e e1       	ldi	r25, 0x1E	; 30
   13d0e:	1f 92       	push	r1
   13d10:	9f 93       	push	r25
   13d12:	8f 93       	push	r24
   13d14:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13d18:	0f 90       	pop	r0
   13d1a:	0f 90       	pop	r0
   13d1c:	0f 90       	pop	r0
   13d1e:	1c 82       	std	Y+4, r1	; 0x04
   13d20:	1b 82       	std	Y+3, r1	; 0x03
   13d22:	ce 01       	movw	r24, r28
   13d24:	01 96       	adiw	r24, 0x01	; 1
   13d26:	88 dd       	rcall	.-1264   	; 0x13838 <SS80ControllerPack>
   13d28:	69 81       	ldd	r22, Y+1	; 0x01
   13d2a:	7a 81       	ldd	r23, Y+2	; 0x02
   13d2c:	ae 01       	movw	r20, r28
   13d2e:	4d 5f       	subi	r20, 0xFD	; 253
   13d30:	5f 4f       	sbci	r21, 0xFF	; 255
   13d32:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   13d36:	29 81       	ldd	r18, Y+1	; 0x01
   13d38:	3a 81       	ldd	r19, Y+2	; 0x02
   13d3a:	82 17       	cp	r24, r18
   13d3c:	93 07       	cpc	r25, r19
   13d3e:	39 f0       	breq	.+14     	; 0x13d4e <SS80_describe+0x58>
   13d40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d44:	80 ff       	sbrs	r24, 0
   13d46:	3c c0       	rjmp	.+120    	; 0x13dc0 <SS80_describe+0xca>
   13d48:	83 e0       	ldi	r24, 0x03	; 3
   13d4a:	9e e1       	ldi	r25, 0x1E	; 30
   13d4c:	31 c0       	rjmp	.+98     	; 0x13db0 <SS80_describe+0xba>
   13d4e:	1c 82       	std	Y+4, r1	; 0x04
   13d50:	1b 82       	std	Y+3, r1	; 0x03
   13d52:	ce 01       	movw	r24, r28
   13d54:	01 96       	adiw	r24, 0x01	; 1
   13d56:	ac dd       	rcall	.-1192   	; 0x138b0 <SS80UnitPack>
   13d58:	69 81       	ldd	r22, Y+1	; 0x01
   13d5a:	7a 81       	ldd	r23, Y+2	; 0x02
   13d5c:	ae 01       	movw	r20, r28
   13d5e:	4d 5f       	subi	r20, 0xFD	; 253
   13d60:	5f 4f       	sbci	r21, 0xFF	; 255
   13d62:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   13d66:	29 81       	ldd	r18, Y+1	; 0x01
   13d68:	3a 81       	ldd	r19, Y+2	; 0x02
   13d6a:	82 17       	cp	r24, r18
   13d6c:	93 07       	cpc	r25, r19
   13d6e:	39 f0       	breq	.+14     	; 0x13d7e <SS80_describe+0x88>
   13d70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d74:	80 ff       	sbrs	r24, 0
   13d76:	24 c0       	rjmp	.+72     	; 0x13dc0 <SS80_describe+0xca>
   13d78:	86 ee       	ldi	r24, 0xE6	; 230
   13d7a:	9d e1       	ldi	r25, 0x1D	; 29
   13d7c:	19 c0       	rjmp	.+50     	; 0x13db0 <SS80_describe+0xba>
   13d7e:	80 e0       	ldi	r24, 0x00	; 0
   13d80:	91 e0       	ldi	r25, 0x01	; 1
   13d82:	9c 83       	std	Y+4, r25	; 0x04
   13d84:	8b 83       	std	Y+3, r24	; 0x03
   13d86:	ce 01       	movw	r24, r28
   13d88:	01 96       	adiw	r24, 0x01	; 1
   13d8a:	5e de       	rcall	.-836    	; 0x13a48 <SS80VolumePack>
   13d8c:	69 81       	ldd	r22, Y+1	; 0x01
   13d8e:	7a 81       	ldd	r23, Y+2	; 0x02
   13d90:	ae 01       	movw	r20, r28
   13d92:	4d 5f       	subi	r20, 0xFD	; 253
   13d94:	5f 4f       	sbci	r21, 0xFF	; 255
   13d96:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   13d9a:	29 81       	ldd	r18, Y+1	; 0x01
   13d9c:	3a 81       	ldd	r19, Y+2	; 0x02
   13d9e:	82 17       	cp	r24, r18
   13da0:	93 07       	cpc	r25, r19
   13da2:	99 f0       	breq	.+38     	; 0x13dca <SS80_describe+0xd4>
   13da4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13da8:	80 ff       	sbrs	r24, 0
   13daa:	0a c0       	rjmp	.+20     	; 0x13dc0 <SS80_describe+0xca>
   13dac:	87 ec       	ldi	r24, 0xC7	; 199
   13dae:	9d e1       	ldi	r25, 0x1D	; 29
   13db0:	1f 92       	push	r1
   13db2:	9f 93       	push	r25
   13db4:	8f 93       	push	r24
   13db6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13dba:	0f 90       	pop	r0
   13dbc:	0f 90       	pop	r0
   13dbe:	0f 90       	pop	r0
   13dc0:	8b 81       	ldd	r24, Y+3	; 0x03
   13dc2:	9c 81       	ldd	r25, Y+4	; 0x04
   13dc4:	88 27       	eor	r24, r24
   13dc6:	90 7d       	andi	r25, 0xD0	; 208
   13dc8:	02 c0       	rjmp	.+4      	; 0x13dce <SS80_describe+0xd8>
   13dca:	80 e0       	ldi	r24, 0x00	; 0
   13dcc:	90 e0       	ldi	r25, 0x00	; 0
   13dce:	24 96       	adiw	r28, 0x04	; 4
   13dd0:	e2 e0       	ldi	r30, 0x02	; 2
   13dd2:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00013dd6 <SS80_Check_Unit>:
   13dd6:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13dda:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13dde:	88 23       	and	r24, r24
   13de0:	d1 f0       	breq	.+52     	; 0x13e16 <SS80_Check_Unit+0x40>
   13de2:	8f 30       	cpi	r24, 0x0F	; 15
   13de4:	c1 f0       	breq	.+48     	; 0x13e16 <SS80_Check_Unit+0x40>
   13de6:	23 81       	ldd	r18, Z+3	; 0x03
   13de8:	34 81       	ldd	r19, Z+4	; 0x04
   13dea:	20 64       	ori	r18, 0x40	; 64
   13dec:	34 83       	std	Z+4, r19	; 0x04
   13dee:	23 83       	std	Z+3, r18	; 0x03
   13df0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13df4:	90 ff       	sbrs	r25, 0
   13df6:	10 c0       	rjmp	.+32     	; 0x13e18 <SS80_Check_Unit+0x42>
   13df8:	1f 92       	push	r1
   13dfa:	8f 93       	push	r24
   13dfc:	8f ea       	ldi	r24, 0xAF	; 175
   13dfe:	9d e1       	ldi	r25, 0x1D	; 29
   13e00:	1f 92       	push	r1
   13e02:	9f 93       	push	r25
   13e04:	8f 93       	push	r24
   13e06:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13e0a:	0f 90       	pop	r0
   13e0c:	0f 90       	pop	r0
   13e0e:	0f 90       	pop	r0
   13e10:	0f 90       	pop	r0
   13e12:	0f 90       	pop	r0
   13e14:	08 95       	ret
   13e16:	85 83       	std	Z+5, r24	; 0x05
   13e18:	08 95       	ret

00013e1a <SS80_Check_Volume>:
   13e1a:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13e1e:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13e22:	88 23       	and	r24, r24
   13e24:	c1 f0       	breq	.+48     	; 0x13e56 <SS80_Check_Volume+0x3c>
   13e26:	23 81       	ldd	r18, Z+3	; 0x03
   13e28:	34 81       	ldd	r19, Z+4	; 0x04
   13e2a:	20 64       	ori	r18, 0x40	; 64
   13e2c:	34 83       	std	Z+4, r19	; 0x04
   13e2e:	23 83       	std	Z+3, r18	; 0x03
   13e30:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13e34:	90 ff       	sbrs	r25, 0
   13e36:	10 c0       	rjmp	.+32     	; 0x13e58 <SS80_Check_Volume+0x3e>
   13e38:	1f 92       	push	r1
   13e3a:	8f 93       	push	r24
   13e3c:	85 e9       	ldi	r24, 0x95	; 149
   13e3e:	9d e1       	ldi	r25, 0x1D	; 29
   13e40:	1f 92       	push	r1
   13e42:	9f 93       	push	r25
   13e44:	8f 93       	push	r24
   13e46:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13e4a:	0f 90       	pop	r0
   13e4c:	0f 90       	pop	r0
   13e4e:	0f 90       	pop	r0
   13e50:	0f 90       	pop	r0
   13e52:	0f 90       	pop	r0
   13e54:	08 95       	ret
   13e56:	16 82       	std	Z+6, r1	; 0x06
   13e58:	08 95       	ret

00013e5a <SS80_Command_State>:
   13e5a:	2f 92       	push	r2
   13e5c:	3f 92       	push	r3
   13e5e:	4f 92       	push	r4
   13e60:	6f 92       	push	r6
   13e62:	7f 92       	push	r7
   13e64:	8f 92       	push	r8
   13e66:	af 92       	push	r10
   13e68:	bf 92       	push	r11
   13e6a:	cf 92       	push	r12
   13e6c:	df 92       	push	r13
   13e6e:	ef 92       	push	r14
   13e70:	ff 92       	push	r15
   13e72:	0f 93       	push	r16
   13e74:	1f 93       	push	r17
   13e76:	cf 93       	push	r28
   13e78:	df 93       	push	r29
   13e7a:	cd b7       	in	r28, 0x3d	; 61
   13e7c:	de b7       	in	r29, 0x3e	; 62
   13e7e:	60 97       	sbiw	r28, 0x10	; 16
   13e80:	0f b6       	in	r0, 0x3f	; 63
   13e82:	f8 94       	cli
   13e84:	de bf       	out	0x3e, r29	; 62
   13e86:	0f be       	out	0x3f, r0	; 63
   13e88:	cd bf       	out	0x3d, r28	; 61
   13e8a:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   13e8e:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   13e92:	81 81       	ldd	r24, Z+1	; 0x01
   13e94:	90 e0       	ldi	r25, 0x00	; 0
   13e96:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   13e9a:	80 e0       	ldi	r24, 0x00	; 0
   13e9c:	91 e0       	ldi	r25, 0x01	; 1
   13e9e:	9a 83       	std	Y+2, r25	; 0x02
   13ea0:	89 83       	std	Y+1, r24	; 0x01
   13ea2:	ae 01       	movw	r20, r28
   13ea4:	4f 5f       	subi	r20, 0xFF	; 255
   13ea6:	5f 4f       	sbci	r21, 0xFF	; 255
   13ea8:	60 e0       	ldi	r22, 0x00	; 0
   13eaa:	72 e0       	ldi	r23, 0x02	; 2
   13eac:	8d ee       	ldi	r24, 0xED	; 237
   13eae:	9c e1       	ldi	r25, 0x1C	; 28
   13eb0:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   13eb4:	6c 01       	movw	r12, r24
   13eb6:	89 81       	ldd	r24, Y+1	; 0x01
   13eb8:	9a 81       	ldd	r25, Y+2	; 0x02
   13eba:	9c 01       	movw	r18, r24
   13ebc:	22 27       	eor	r18, r18
   13ebe:	30 7d       	andi	r19, 0xD0	; 208
   13ec0:	23 2b       	or	r18, r19
   13ec2:	79 f0       	breq	.+30     	; 0x13ee2 <SS80_Command_State+0x88>
   13ec4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13ec8:	80 ff       	sbrs	r24, 0
   13eca:	21 c2       	rjmp	.+1090   	; 0x1430e <SS80_Command_State+0x4b4>
   13ecc:	8f e6       	ldi	r24, 0x6F	; 111
   13ece:	9d e1       	ldi	r25, 0x1D	; 29
   13ed0:	1f 92       	push	r1
   13ed2:	9f 93       	push	r25
   13ed4:	8f 93       	push	r24
   13ed6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13eda:	0f 90       	pop	r0
   13edc:	0f 90       	pop	r0
   13ede:	0f 90       	pop	r0
   13ee0:	16 c2       	rjmp	.+1068   	; 0x1430e <SS80_Command_State+0x4b4>
   13ee2:	c1 14       	cp	r12, r1
   13ee4:	d1 04       	cpc	r13, r1
   13ee6:	09 f4       	brne	.+2      	; 0x13eea <SS80_Command_State+0x90>
   13ee8:	17 c2       	rjmp	.+1070   	; 0x14318 <SS80_Command_State+0x4be>
   13eea:	90 fd       	sbrc	r25, 0
   13eec:	0e c0       	rjmp	.+28     	; 0x13f0a <SS80_Command_State+0xb0>
   13eee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13ef2:	80 ff       	sbrs	r24, 0
   13ef4:	0a c0       	rjmp	.+20     	; 0x13f0a <SS80_Command_State+0xb0>
   13ef6:	86 e5       	ldi	r24, 0x56	; 86
   13ef8:	9d e1       	ldi	r25, 0x1D	; 29
   13efa:	1f 92       	push	r1
   13efc:	9f 93       	push	r25
   13efe:	8f 93       	push	r24
   13f00:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13f04:	0f 90       	pop	r0
   13f06:	0f 90       	pop	r0
   13f08:	0f 90       	pop	r0
   13f0a:	e1 2c       	mov	r14, r1
   13f0c:	f1 2c       	mov	r15, r1
   13f0e:	8a e5       	ldi	r24, 0x5A	; 90
   13f10:	9c e1       	ldi	r25, 0x1C	; 28
   13f12:	9c 01       	movw	r18, r24
   13f14:	40 e0       	ldi	r20, 0x00	; 0
   13f16:	2d 83       	std	Y+5, r18	; 0x05
   13f18:	3e 83       	std	Y+6, r19	; 0x06
   13f1a:	4f 83       	std	Y+7, r20	; 0x07
   13f1c:	8f e7       	ldi	r24, 0x7F	; 127
   13f1e:	9c e1       	ldi	r25, 0x1C	; 28
   13f20:	9c 01       	movw	r18, r24
   13f22:	40 e0       	ldi	r20, 0x00	; 0
   13f24:	28 87       	std	Y+8, r18	; 0x08
   13f26:	39 87       	std	Y+9, r19	; 0x09
   13f28:	4a 87       	std	Y+10, r20	; 0x0a
   13f2a:	89 e9       	ldi	r24, 0x99	; 153
   13f2c:	9c e1       	ldi	r25, 0x1C	; 28
   13f2e:	9c 01       	movw	r18, r24
   13f30:	40 e0       	ldi	r20, 0x00	; 0
   13f32:	2b 87       	std	Y+11, r18	; 0x0b
   13f34:	3c 87       	std	Y+12, r19	; 0x0c
   13f36:	4d 87       	std	Y+13, r20	; 0x0d
   13f38:	8f ea       	ldi	r24, 0xAF	; 175
   13f3a:	9c e1       	ldi	r25, 0x1C	; 28
   13f3c:	3c 01       	movw	r6, r24
   13f3e:	8d eb       	ldi	r24, 0xBD	; 189
   13f40:	9c e1       	ldi	r25, 0x1C	; 28
   13f42:	9c 01       	movw	r18, r24
   13f44:	40 e0       	ldi	r20, 0x00	; 0
   13f46:	2e 87       	std	Y+14, r18	; 0x0e
   13f48:	3f 87       	std	Y+15, r19	; 0x0f
   13f4a:	48 8b       	std	Y+16, r20	; 0x10
   13f4c:	89 ed       	ldi	r24, 0xD9	; 217
   13f4e:	9c e1       	ldi	r25, 0x1C	; 28
   13f50:	1c 01       	movw	r2, r24
   13f52:	87 e2       	ldi	r24, 0x27	; 39
   13f54:	a8 2e       	mov	r10, r24
   13f56:	8d e1       	ldi	r24, 0x1D	; 29
   13f58:	b8 2e       	mov	r11, r24
   13f5a:	87 01       	movw	r16, r14
   13f5c:	ec 14       	cp	r14, r12
   13f5e:	fd 04       	cpc	r15, r13
   13f60:	0c f0       	brlt	.+2      	; 0x13f64 <SS80_Command_State+0x10a>
   13f62:	b6 c1       	rjmp	.+876    	; 0x142d0 <SS80_Command_State+0x476>
   13f64:	0f 5f       	subi	r16, 0xFF	; 255
   13f66:	1f 4f       	sbci	r17, 0xFF	; 255
   13f68:	f7 01       	movw	r30, r14
   13f6a:	e3 51       	subi	r30, 0x13	; 19
   13f6c:	f3 4e       	sbci	r31, 0xE3	; 227
   13f6e:	80 81       	ld	r24, Z
   13f70:	28 2f       	mov	r18, r24
   13f72:	30 e0       	ldi	r19, 0x00	; 0
   13f74:	a9 01       	movw	r20, r18
   13f76:	40 52       	subi	r20, 0x20	; 32
   13f78:	51 09       	sbc	r21, r1
   13f7a:	40 31       	cpi	r20, 0x10	; 16
   13f7c:	51 05       	cpc	r21, r1
   13f7e:	80 f4       	brcc	.+32     	; 0x13fa0 <SS80_Command_State+0x146>
   13f80:	80 52       	subi	r24, 0x20	; 32
   13f82:	29 df       	rcall	.-430    	; 0x13dd6 <SS80_Check_Unit>
   13f84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13f88:	85 ff       	sbrs	r24, 5
   13f8a:	a0 c1       	rjmp	.+832    	; 0x142cc <SS80_Command_State+0x472>
   13f8c:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13f90:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13f94:	85 81       	ldd	r24, Z+5	; 0x05
   13f96:	1f 92       	push	r1
   13f98:	8f 93       	push	r24
   13f9a:	80 e4       	ldi	r24, 0x40	; 64
   13f9c:	9d e1       	ldi	r25, 0x1D	; 29
   13f9e:	14 c0       	rjmp	.+40     	; 0x13fc8 <SS80_Command_State+0x16e>
   13fa0:	a9 01       	movw	r20, r18
   13fa2:	40 54       	subi	r20, 0x40	; 64
   13fa4:	51 09       	sbc	r21, r1
   13fa6:	40 31       	cpi	r20, 0x10	; 16
   13fa8:	51 05       	cpc	r21, r1
   13faa:	c8 f4       	brcc	.+50     	; 0x13fde <SS80_Command_State+0x184>
   13fac:	80 54       	subi	r24, 0x40	; 64
   13fae:	35 df       	rcall	.-406    	; 0x13e1a <SS80_Check_Volume>
   13fb0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13fb4:	85 ff       	sbrs	r24, 5
   13fb6:	8a c1       	rjmp	.+788    	; 0x142cc <SS80_Command_State+0x472>
   13fb8:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13fbc:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13fc0:	86 81       	ldd	r24, Z+6	; 0x06
   13fc2:	1f 92       	push	r1
   13fc4:	8f 93       	push	r24
   13fc6:	c5 01       	movw	r24, r10
   13fc8:	1f 92       	push	r1
   13fca:	9f 93       	push	r25
   13fcc:	8f 93       	push	r24
   13fce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   13fd2:	0f 90       	pop	r0
   13fd4:	0f 90       	pop	r0
   13fd6:	0f 90       	pop	r0
   13fd8:	0f 90       	pop	r0
   13fda:	0f 90       	pop	r0
   13fdc:	77 c1       	rjmp	.+750    	; 0x142cc <SS80_Command_State+0x472>
   13fde:	21 15       	cp	r18, r1
   13fe0:	31 05       	cpc	r19, r1
   13fe2:	79 f4       	brne	.+30     	; 0x14002 <SS80_Command_State+0x1a8>
   13fe4:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   13fe8:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   13fec:	81 e0       	ldi	r24, 0x01	; 1
   13fee:	90 e0       	ldi	r25, 0x00	; 0
   13ff0:	91 83       	std	Z+1, r25	; 0x01
   13ff2:	80 83       	st	Z, r24
   13ff4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13ff8:	85 ff       	sbrs	r24, 5
   13ffa:	6a c1       	rjmp	.+724    	; 0x142d0 <SS80_Command_State+0x476>
   13ffc:	8f e0       	ldi	r24, 0x0F	; 15
   13ffe:	9d e1       	ldi	r25, 0x1D	; 29
   14000:	0f c0       	rjmp	.+30     	; 0x14020 <SS80_Command_State+0x1c6>
   14002:	22 30       	cpi	r18, 0x02	; 2
   14004:	31 05       	cpc	r19, r1
   14006:	a9 f4       	brne	.+42     	; 0x14032 <SS80_Command_State+0x1d8>
   14008:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1400c:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14010:	31 83       	std	Z+1, r19	; 0x01
   14012:	20 83       	st	Z, r18
   14014:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14018:	85 ff       	sbrs	r24, 5
   1401a:	5a c1       	rjmp	.+692    	; 0x142d0 <SS80_Command_State+0x476>
   1401c:	86 ef       	ldi	r24, 0xF6	; 246
   1401e:	9c e1       	ldi	r25, 0x1C	; 28
   14020:	1f 92       	push	r1
   14022:	9f 93       	push	r25
   14024:	8f 93       	push	r24
   14026:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1402a:	0f 90       	pop	r0
   1402c:	0f 90       	pop	r0
   1402e:	0f 90       	pop	r0
   14030:	4f c1       	rjmp	.+670    	; 0x142d0 <SS80_Command_State+0x476>
   14032:	20 31       	cpi	r18, 0x10	; 16
   14034:	31 05       	cpc	r19, r1
   14036:	a1 f5       	brne	.+104    	; 0x140a0 <SS80_Command_State+0x246>
   14038:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <SS80s>
   1403c:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14040:	9c 83       	std	Y+4, r25	; 0x04
   14042:	8b 83       	std	Y+3, r24	; 0x03
   14044:	46 e0       	ldi	r20, 0x06	; 6
   14046:	50 e0       	ldi	r21, 0x00	; 0
   14048:	b8 01       	movw	r22, r16
   1404a:	8d ee       	ldi	r24, 0xED	; 237
   1404c:	9c e1       	ldi	r25, 0x1C	; 28
   1404e:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   14052:	eb 81       	ldd	r30, Y+3	; 0x03
   14054:	fc 81       	ldd	r31, Y+4	; 0x04
   14056:	67 83       	std	Z+7, r22	; 0x07
   14058:	70 87       	std	Z+8, r23	; 0x08
   1405a:	81 87       	std	Z+9, r24	; 0x09
   1405c:	92 87       	std	Z+10, r25	; 0x0a
   1405e:	87 01       	movw	r16, r14
   14060:	09 5f       	subi	r16, 0xF9	; 249
   14062:	1f 4f       	sbci	r17, 0xFF	; 255
   14064:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14068:	85 ff       	sbrs	r24, 5
   1406a:	30 c1       	rjmp	.+608    	; 0x142cc <SS80_Command_State+0x472>
   1406c:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14070:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14074:	a0 91 a4 19 	lds	r26, 0x19A4	; 0x8019a4 <SS80p>
   14078:	b0 91 a5 19 	lds	r27, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1407c:	9f 96       	adiw	r26, 0x2f	; 47
   1407e:	0d 90       	ld	r0, X+
   14080:	bc 91       	ld	r27, X
   14082:	a0 2d       	mov	r26, r0
   14084:	27 81       	ldd	r18, Z+7	; 0x07
   14086:	30 85       	ldd	r19, Z+8	; 0x08
   14088:	41 85       	ldd	r20, Z+9	; 0x09
   1408a:	52 85       	ldd	r21, Z+10	; 0x0a
   1408c:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
   14090:	9f 93       	push	r25
   14092:	8f 93       	push	r24
   14094:	7f 93       	push	r23
   14096:	6f 93       	push	r22
   14098:	1f 92       	push	r1
   1409a:	3f 92       	push	r3
   1409c:	2f 92       	push	r2
   1409e:	2e c0       	rjmp	.+92     	; 0x140fc <SS80_Command_State+0x2a2>
   140a0:	28 31       	cpi	r18, 0x18	; 24
   140a2:	31 05       	cpc	r19, r1
   140a4:	99 f5       	brne	.+102    	; 0x1410c <SS80_Command_State+0x2b2>
   140a6:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <SS80s>
   140aa:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <SS80s+0x1>
   140ae:	9c 83       	std	Y+4, r25	; 0x04
   140b0:	8b 83       	std	Y+3, r24	; 0x03
   140b2:	44 e0       	ldi	r20, 0x04	; 4
   140b4:	50 e0       	ldi	r21, 0x00	; 0
   140b6:	b8 01       	movw	r22, r16
   140b8:	8d ee       	ldi	r24, 0xED	; 237
   140ba:	9c e1       	ldi	r25, 0x1C	; 28
   140bc:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   140c0:	eb 81       	ldd	r30, Y+3	; 0x03
   140c2:	fc 81       	ldd	r31, Y+4	; 0x04
   140c4:	63 87       	std	Z+11, r22	; 0x0b
   140c6:	74 87       	std	Z+12, r23	; 0x0c
   140c8:	85 87       	std	Z+13, r24	; 0x0d
   140ca:	96 87       	std	Z+14, r25	; 0x0e
   140cc:	87 01       	movw	r16, r14
   140ce:	0b 5f       	subi	r16, 0xFB	; 251
   140d0:	1f 4f       	sbci	r17, 0xFF	; 255
   140d2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   140d6:	85 ff       	sbrs	r24, 5
   140d8:	f9 c0       	rjmp	.+498    	; 0x142cc <SS80_Command_State+0x472>
   140da:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   140de:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   140e2:	86 85       	ldd	r24, Z+14	; 0x0e
   140e4:	8f 93       	push	r24
   140e6:	85 85       	ldd	r24, Z+13	; 0x0d
   140e8:	8f 93       	push	r24
   140ea:	84 85       	ldd	r24, Z+12	; 0x0c
   140ec:	8f 93       	push	r24
   140ee:	83 85       	ldd	r24, Z+11	; 0x0b
   140f0:	8f 93       	push	r24
   140f2:	1f 92       	push	r1
   140f4:	ff 85       	ldd	r31, Y+15	; 0x0f
   140f6:	ff 93       	push	r31
   140f8:	2e 85       	ldd	r18, Y+14	; 0x0e
   140fa:	2f 93       	push	r18
   140fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14100:	0f b6       	in	r0, 0x3f	; 63
   14102:	f8 94       	cli
   14104:	de bf       	out	0x3e, r29	; 62
   14106:	0f be       	out	0x3f, r0	; 63
   14108:	cd bf       	out	0x3d, r28	; 61
   1410a:	e0 c0       	rjmp	.+448    	; 0x142cc <SS80_Command_State+0x472>
   1410c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14110:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   14114:	24 33       	cpi	r18, 0x34	; 52
   14116:	31 05       	cpc	r19, r1
   14118:	31 f4       	brne	.+12     	; 0x14126 <SS80_Command_State+0x2cc>
   1411a:	85 ff       	sbrs	r24, 5
   1411c:	d7 c0       	rjmp	.+430    	; 0x142cc <SS80_Command_State+0x472>
   1411e:	1f 92       	push	r1
   14120:	7f 92       	push	r7
   14122:	6f 92       	push	r6
   14124:	2c c0       	rjmp	.+88     	; 0x1417e <SS80_Command_State+0x324>
   14126:	29 33       	cpi	r18, 0x39	; 57
   14128:	31 05       	cpc	r19, r1
   1412a:	59 f4       	brne	.+22     	; 0x14142 <SS80_Command_State+0x2e8>
   1412c:	87 01       	movw	r16, r14
   1412e:	0d 5f       	subi	r16, 0xFD	; 253
   14130:	1f 4f       	sbci	r17, 0xFF	; 255
   14132:	85 ff       	sbrs	r24, 5
   14134:	cb c0       	rjmp	.+406    	; 0x142cc <SS80_Command_State+0x472>
   14136:	1f 92       	push	r1
   14138:	9c 85       	ldd	r25, Y+12	; 0x0c
   1413a:	9f 93       	push	r25
   1413c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1413e:	ef 93       	push	r30
   14140:	1e c0       	rjmp	.+60     	; 0x1417e <SS80_Command_State+0x324>
   14142:	2b 33       	cpi	r18, 0x3B	; 59
   14144:	31 05       	cpc	r19, r1
   14146:	59 f4       	brne	.+22     	; 0x1415e <SS80_Command_State+0x304>
   14148:	87 01       	movw	r16, r14
   1414a:	0e 5f       	subi	r16, 0xFE	; 254
   1414c:	1f 4f       	sbci	r17, 0xFF	; 255
   1414e:	85 ff       	sbrs	r24, 5
   14150:	bd c0       	rjmp	.+378    	; 0x142cc <SS80_Command_State+0x472>
   14152:	1f 92       	push	r1
   14154:	f9 85       	ldd	r31, Y+9	; 0x09
   14156:	ff 93       	push	r31
   14158:	28 85       	ldd	r18, Y+8	; 0x08
   1415a:	2f 93       	push	r18
   1415c:	10 c0       	rjmp	.+32     	; 0x1417e <SS80_Command_State+0x324>
   1415e:	28 34       	cpi	r18, 0x48	; 72
   14160:	31 05       	cpc	r19, r1
   14162:	99 f4       	brne	.+38     	; 0x1418a <SS80_Command_State+0x330>
   14164:	87 01       	movw	r16, r14
   14166:	0e 5f       	subi	r16, 0xFE	; 254
   14168:	1f 4f       	sbci	r17, 0xFF	; 255
   1416a:	80 73       	andi	r24, 0x30	; 48
   1416c:	99 27       	eor	r25, r25
   1416e:	89 2b       	or	r24, r25
   14170:	09 f4       	brne	.+2      	; 0x14174 <SS80_Command_State+0x31a>
   14172:	ac c0       	rjmp	.+344    	; 0x142cc <SS80_Command_State+0x472>
   14174:	1f 92       	push	r1
   14176:	3e 81       	ldd	r19, Y+6	; 0x06
   14178:	3f 93       	push	r19
   1417a:	4d 81       	ldd	r20, Y+5	; 0x05
   1417c:	4f 93       	push	r20
   1417e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14182:	0f 90       	pop	r0
   14184:	0f 90       	pop	r0
   14186:	0f 90       	pop	r0
   14188:	a1 c0       	rjmp	.+322    	; 0x142cc <SS80_Command_State+0x472>
   1418a:	24 30       	cpi	r18, 0x04	; 4
   1418c:	31 05       	cpc	r19, r1
   1418e:	41 f4       	brne	.+16     	; 0x141a0 <SS80_Command_State+0x346>
   14190:	80 73       	andi	r24, 0x30	; 48
   14192:	99 27       	eor	r25, r25
   14194:	89 2b       	or	r24, r25
   14196:	09 f4       	brne	.+2      	; 0x1419a <SS80_Command_State+0x340>
   14198:	9b c0       	rjmp	.+310    	; 0x142d0 <SS80_Command_State+0x476>
   1419a:	89 e3       	ldi	r24, 0x39	; 57
   1419c:	9c e1       	ldi	r25, 0x1C	; 28
   1419e:	40 cf       	rjmp	.-384    	; 0x14020 <SS80_Command_State+0x1c6>
   141a0:	2e 30       	cpi	r18, 0x0E	; 14
   141a2:	31 05       	cpc	r19, r1
   141a4:	29 f4       	brne	.+10     	; 0x141b0 <SS80_Command_State+0x356>
   141a6:	85 ff       	sbrs	r24, 5
   141a8:	93 c0       	rjmp	.+294    	; 0x142d0 <SS80_Command_State+0x476>
   141aa:	83 e2       	ldi	r24, 0x23	; 35
   141ac:	9c e1       	ldi	r25, 0x1C	; 28
   141ae:	38 cf       	rjmp	.-400    	; 0x14020 <SS80_Command_State+0x1c6>
   141b0:	2f 30       	cpi	r18, 0x0F	; 15
   141b2:	31 05       	cpc	r19, r1
   141b4:	29 f4       	brne	.+10     	; 0x141c0 <SS80_Command_State+0x366>
   141b6:	85 ff       	sbrs	r24, 5
   141b8:	8b c0       	rjmp	.+278    	; 0x142d0 <SS80_Command_State+0x476>
   141ba:	86 e0       	ldi	r24, 0x06	; 6
   141bc:	9c e1       	ldi	r25, 0x1C	; 28
   141be:	30 cf       	rjmp	.-416    	; 0x14020 <SS80_Command_State+0x1c6>
   141c0:	21 33       	cpi	r18, 0x31	; 49
   141c2:	31 05       	cpc	r19, r1
   141c4:	41 f4       	brne	.+16     	; 0x141d6 <SS80_Command_State+0x37c>
   141c6:	87 01       	movw	r16, r14
   141c8:	0d 5f       	subi	r16, 0xFD	; 253
   141ca:	1f 4f       	sbci	r17, 0xFF	; 255
   141cc:	85 ff       	sbrs	r24, 5
   141ce:	80 c0       	rjmp	.+256    	; 0x142d0 <SS80_Command_State+0x476>
   141d0:	8a ee       	ldi	r24, 0xEA	; 234
   141d2:	9b e1       	ldi	r25, 0x1B	; 27
   141d4:	25 cf       	rjmp	.-438    	; 0x14020 <SS80_Command_State+0x1c6>
   141d6:	25 33       	cpi	r18, 0x35	; 53
   141d8:	31 05       	cpc	r19, r1
   141da:	69 f4       	brne	.+26     	; 0x141f6 <SS80_Command_State+0x39c>
   141dc:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   141e0:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   141e4:	24 e0       	ldi	r18, 0x04	; 4
   141e6:	30 e0       	ldi	r19, 0x00	; 0
   141e8:	31 83       	std	Z+1, r19	; 0x01
   141ea:	20 83       	st	Z, r18
   141ec:	85 ff       	sbrs	r24, 5
   141ee:	70 c0       	rjmp	.+224    	; 0x142d0 <SS80_Command_State+0x476>
   141f0:	89 ed       	ldi	r24, 0xD9	; 217
   141f2:	9b e1       	ldi	r25, 0x1B	; 27
   141f4:	15 cf       	rjmp	.-470    	; 0x14020 <SS80_Command_State+0x1c6>
   141f6:	27 33       	cpi	r18, 0x37	; 55
   141f8:	31 05       	cpc	r19, r1
   141fa:	59 f4       	brne	.+22     	; 0x14212 <SS80_Command_State+0x3b8>
   141fc:	87 01       	movw	r16, r14
   141fe:	0d 5f       	subi	r16, 0xFD	; 253
   14200:	1f 4f       	sbci	r17, 0xFF	; 255
   14202:	80 73       	andi	r24, 0x30	; 48
   14204:	99 27       	eor	r25, r25
   14206:	89 2b       	or	r24, r25
   14208:	09 f4       	brne	.+2      	; 0x1420c <SS80_Command_State+0x3b2>
   1420a:	62 c0       	rjmp	.+196    	; 0x142d0 <SS80_Command_State+0x476>
   1420c:	8b eb       	ldi	r24, 0xBB	; 187
   1420e:	9b e1       	ldi	r25, 0x1B	; 27
   14210:	07 cf       	rjmp	.-498    	; 0x14020 <SS80_Command_State+0x1c6>
   14212:	2e 33       	cpi	r18, 0x3E	; 62
   14214:	31 05       	cpc	r19, r1
   14216:	c1 f4       	brne	.+48     	; 0x14248 <SS80_Command_State+0x3ee>
   14218:	80 73       	andi	r24, 0x30	; 48
   1421a:	99 27       	eor	r25, r25
   1421c:	89 2b       	or	r24, r25
   1421e:	81 f0       	breq	.+32     	; 0x14240 <SS80_Command_State+0x3e6>
   14220:	8c e9       	ldi	r24, 0x9C	; 156
   14222:	9b e1       	ldi	r25, 0x1B	; 27
   14224:	1f 92       	push	r1
   14226:	9f 93       	push	r25
   14228:	8f 93       	push	r24
   1422a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1422e:	69 ed       	ldi	r22, 0xD9	; 217
   14230:	7d e0       	ldi	r23, 0x0D	; 13
   14232:	c8 01       	movw	r24, r16
   14234:	83 51       	subi	r24, 0x13	; 19
   14236:	93 4e       	sbci	r25, 0xE3	; 227
   14238:	86 dc       	rcall	.-1780   	; 0x13b46 <SS80_display_extended_status>
   1423a:	0f 90       	pop	r0
   1423c:	0f 90       	pop	r0
   1423e:	0f 90       	pop	r0
   14240:	87 01       	movw	r16, r14
   14242:	07 5f       	subi	r16, 0xF7	; 247
   14244:	1f 4f       	sbci	r17, 0xFF	; 255
   14246:	44 c0       	rjmp	.+136    	; 0x142d0 <SS80_Command_State+0x476>
   14248:	2c 34       	cpi	r18, 0x4C	; 76
   1424a:	31 05       	cpc	r19, r1
   1424c:	39 f4       	brne	.+14     	; 0x1425c <SS80_Command_State+0x402>
   1424e:	80 73       	andi	r24, 0x30	; 48
   14250:	99 27       	eor	r25, r25
   14252:	89 2b       	or	r24, r25
   14254:	e9 f1       	breq	.+122    	; 0x142d0 <SS80_Command_State+0x476>
   14256:	81 e8       	ldi	r24, 0x81	; 129
   14258:	9b e1       	ldi	r25, 0x1B	; 27
   1425a:	e2 ce       	rjmp	.-572    	; 0x14020 <SS80_Command_State+0x1c6>
   1425c:	2d 34       	cpi	r18, 0x4D	; 77
   1425e:	31 05       	cpc	r19, r1
   14260:	39 f4       	brne	.+14     	; 0x14270 <SS80_Command_State+0x416>
   14262:	80 73       	andi	r24, 0x30	; 48
   14264:	99 27       	eor	r25, r25
   14266:	89 2b       	or	r24, r25
   14268:	99 f1       	breq	.+102    	; 0x142d0 <SS80_Command_State+0x476>
   1426a:	88 e6       	ldi	r24, 0x68	; 104
   1426c:	9b e1       	ldi	r25, 0x1B	; 27
   1426e:	d8 ce       	rjmp	.-592    	; 0x14020 <SS80_Command_State+0x1c6>
   14270:	2d 30       	cpi	r18, 0x0D	; 13
   14272:	31 05       	cpc	r19, r1
   14274:	69 f4       	brne	.+26     	; 0x14290 <SS80_Command_State+0x436>
   14276:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1427a:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1427e:	23 e0       	ldi	r18, 0x03	; 3
   14280:	30 e0       	ldi	r19, 0x00	; 0
   14282:	31 83       	std	Z+1, r19	; 0x01
   14284:	20 83       	st	Z, r18
   14286:	85 ff       	sbrs	r24, 5
   14288:	23 c0       	rjmp	.+70     	; 0x142d0 <SS80_Command_State+0x476>
   1428a:	81 e5       	ldi	r24, 0x51	; 81
   1428c:	9b e1       	ldi	r25, 0x1B	; 27
   1428e:	c8 ce       	rjmp	.-624    	; 0x14020 <SS80_Command_State+0x1c6>
   14290:	23 33       	cpi	r18, 0x33	; 51
   14292:	31 05       	cpc	r19, r1
   14294:	51 f4       	brne	.+20     	; 0x142aa <SS80_Command_State+0x450>
   14296:	87 01       	movw	r16, r14
   14298:	0c 5f       	subi	r16, 0xFC	; 252
   1429a:	1f 4f       	sbci	r17, 0xFF	; 255
   1429c:	80 73       	andi	r24, 0x30	; 48
   1429e:	99 27       	eor	r25, r25
   142a0:	89 2b       	or	r24, r25
   142a2:	b1 f0       	breq	.+44     	; 0x142d0 <SS80_Command_State+0x476>
   142a4:	80 e3       	ldi	r24, 0x30	; 48
   142a6:	9b e1       	ldi	r25, 0x1B	; 27
   142a8:	bb ce       	rjmp	.-650    	; 0x14020 <SS80_Command_State+0x1c6>
   142aa:	80 ff       	sbrs	r24, 0
   142ac:	28 c0       	rjmp	.+80     	; 0x142fe <SS80_Command_State+0x4a4>
   142ae:	3f 93       	push	r19
   142b0:	2f 93       	push	r18
   142b2:	80 e1       	ldi	r24, 0x10	; 16
   142b4:	9b e1       	ldi	r25, 0x1B	; 27
   142b6:	1f 92       	push	r1
   142b8:	9f 93       	push	r25
   142ba:	8f 93       	push	r24
   142bc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   142c0:	0f 90       	pop	r0
   142c2:	0f 90       	pop	r0
   142c4:	0f 90       	pop	r0
   142c6:	0f 90       	pop	r0
   142c8:	0f 90       	pop	r0
   142ca:	02 c0       	rjmp	.+4      	; 0x142d0 <SS80_Command_State+0x476>
   142cc:	78 01       	movw	r14, r16
   142ce:	45 ce       	rjmp	.-886    	; 0x13f5a <SS80_Command_State+0x100>
   142d0:	0c 15       	cp	r16, r12
   142d2:	1d 05       	cpc	r17, r13
   142d4:	a1 f0       	breq	.+40     	; 0x142fe <SS80_Command_State+0x4a4>
   142d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   142da:	80 ff       	sbrs	r24, 0
   142dc:	10 c0       	rjmp	.+32     	; 0x142fe <SS80_Command_State+0x4a4>
   142de:	df 92       	push	r13
   142e0:	cf 92       	push	r12
   142e2:	1f 93       	push	r17
   142e4:	0f 93       	push	r16
   142e6:	88 ed       	ldi	r24, 0xD8	; 216
   142e8:	9a e1       	ldi	r25, 0x1A	; 26
   142ea:	1f 92       	push	r1
   142ec:	9f 93       	push	r25
   142ee:	8f 93       	push	r24
   142f0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   142f4:	0f b6       	in	r0, 0x3f	; 63
   142f6:	f8 94       	cli
   142f8:	de bf       	out	0x3e, r29	; 62
   142fa:	0f be       	out	0x3f, r0	; 63
   142fc:	cd bf       	out	0x3d, r28	; 61
   142fe:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14302:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14306:	81 81       	ldd	r24, Z+1	; 0x01
   14308:	90 e0       	ldi	r25, 0x00	; 0
   1430a:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1430e:	89 81       	ldd	r24, Y+1	; 0x01
   14310:	9a 81       	ldd	r25, Y+2	; 0x02
   14312:	88 27       	eor	r24, r24
   14314:	90 7d       	andi	r25, 0xD0	; 208
   14316:	02 c0       	rjmp	.+4      	; 0x1431c <SS80_Command_State+0x4c2>
   14318:	80 e0       	ldi	r24, 0x00	; 0
   1431a:	90 e0       	ldi	r25, 0x00	; 0
   1431c:	60 96       	adiw	r28, 0x10	; 16
   1431e:	0f b6       	in	r0, 0x3f	; 63
   14320:	f8 94       	cli
   14322:	de bf       	out	0x3e, r29	; 62
   14324:	0f be       	out	0x3f, r0	; 63
   14326:	cd bf       	out	0x3d, r28	; 61
   14328:	df 91       	pop	r29
   1432a:	cf 91       	pop	r28
   1432c:	1f 91       	pop	r17
   1432e:	0f 91       	pop	r16
   14330:	ff 90       	pop	r15
   14332:	ef 90       	pop	r14
   14334:	df 90       	pop	r13
   14336:	cf 90       	pop	r12
   14338:	bf 90       	pop	r11
   1433a:	af 90       	pop	r10
   1433c:	8f 90       	pop	r8
   1433e:	7f 90       	pop	r7
   14340:	6f 90       	pop	r6
   14342:	4f 90       	pop	r4
   14344:	3f 90       	pop	r3
   14346:	2f 90       	pop	r2
   14348:	08 95       	ret

0001434a <SS80_cmd_seek>:
   1434a:	a0 e0       	ldi	r26, 0x00	; 0
   1434c:	b0 e0       	ldi	r27, 0x00	; 0
   1434e:	eb ea       	ldi	r30, 0xAB	; 171
   14350:	f1 ea       	ldi	r31, 0xA1	; 161
   14352:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
   14356:	c0 91 a2 19 	lds	r28, 0x19A2	; 0x8019a2 <SS80s>
   1435a:	d0 91 a3 19 	lds	r29, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1435e:	8f 80       	ldd	r8, Y+7	; 0x07
   14360:	98 84       	ldd	r9, Y+8	; 0x08
   14362:	a9 84       	ldd	r10, Y+9	; 0x09
   14364:	ba 84       	ldd	r11, Y+10	; 0x0a
   14366:	00 91 a4 19 	lds	r16, 0x19A4	; 0x8019a4 <SS80p>
   1436a:	10 91 a5 19 	lds	r17, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1436e:	f8 01       	movw	r30, r16
   14370:	c7 a4       	ldd	r12, Z+47	; 0x2f
   14372:	d0 a8       	ldd	r13, Z+48	; 0x30
   14374:	e1 2c       	mov	r14, r1
   14376:	f1 2c       	mov	r15, r1
   14378:	6b 85       	ldd	r22, Y+11	; 0x0b
   1437a:	7c 85       	ldd	r23, Y+12	; 0x0c
   1437c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1437e:	9e 85       	ldd	r25, Y+14	; 0x0e
   14380:	a7 01       	movw	r20, r14
   14382:	96 01       	movw	r18, r12
   14384:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
   14388:	da 01       	movw	r26, r20
   1438a:	c9 01       	movw	r24, r18
   1438c:	88 0d       	add	r24, r8
   1438e:	99 1d       	adc	r25, r9
   14390:	aa 1d       	adc	r26, r10
   14392:	bb 1d       	adc	r27, r11
   14394:	f8 01       	movw	r30, r16
   14396:	eb 5b       	subi	r30, 0xBB	; 187
   14398:	ff 4f       	sbci	r31, 0xFF	; 255
   1439a:	40 80       	ld	r4, Z
   1439c:	51 80       	ldd	r5, Z+1	; 0x01
   1439e:	62 80       	ldd	r6, Z+2	; 0x02
   143a0:	73 80       	ldd	r7, Z+3	; 0x03
   143a2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   143a6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   143aa:	48 16       	cp	r4, r24
   143ac:	59 06       	cpc	r5, r25
   143ae:	6a 06       	cpc	r6, r26
   143b0:	7b 06       	cpc	r7, r27
   143b2:	20 f5       	brcc	.+72     	; 0x143fc <SS80_cmd_seek+0xb2>
   143b4:	81 e0       	ldi	r24, 0x01	; 1
   143b6:	8a 83       	std	Y+2, r24	; 0x02
   143b8:	8b 81       	ldd	r24, Y+3	; 0x03
   143ba:	9c 81       	ldd	r25, Y+4	; 0x04
   143bc:	84 60       	ori	r24, 0x04	; 4
   143be:	9c 83       	std	Y+4, r25	; 0x04
   143c0:	8b 83       	std	Y+3, r24	; 0x03
   143c2:	40 ff       	sbrs	r20, 0
   143c4:	3c c0       	rjmp	.+120    	; 0x1443e <SS80_cmd_seek+0xf4>
   143c6:	f8 01       	movw	r30, r16
   143c8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   143ca:	b0 a9       	ldd	r27, Z+48	; 0x30
   143cc:	a5 01       	movw	r20, r10
   143ce:	94 01       	movw	r18, r8
   143d0:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
   143d4:	9f 93       	push	r25
   143d6:	8f 93       	push	r24
   143d8:	7f 93       	push	r23
   143da:	6f 93       	push	r22
   143dc:	85 e9       	ldi	r24, 0x95	; 149
   143de:	99 e1       	ldi	r25, 0x19	; 25
   143e0:	1f 92       	push	r1
   143e2:	9f 93       	push	r25
   143e4:	8f 93       	push	r24
   143e6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   143ea:	8d b7       	in	r24, 0x3d	; 61
   143ec:	9e b7       	in	r25, 0x3e	; 62
   143ee:	07 96       	adiw	r24, 0x07	; 7
   143f0:	0f b6       	in	r0, 0x3f	; 63
   143f2:	f8 94       	cli
   143f4:	9e bf       	out	0x3e, r25	; 62
   143f6:	0f be       	out	0x3f, r0	; 63
   143f8:	8d bf       	out	0x3d, r24	; 61
   143fa:	21 c0       	rjmp	.+66     	; 0x1443e <SS80_cmd_seek+0xf4>
   143fc:	ca 01       	movw	r24, r20
   143fe:	80 72       	andi	r24, 0x20	; 32
   14400:	99 27       	eor	r25, r25
   14402:	45 ff       	sbrs	r20, 5
   14404:	1e c0       	rjmp	.+60     	; 0x14442 <SS80_cmd_seek+0xf8>
   14406:	a5 01       	movw	r20, r10
   14408:	94 01       	movw	r18, r8
   1440a:	c7 01       	movw	r24, r14
   1440c:	b6 01       	movw	r22, r12
   1440e:	0e 94 6c ea 	call	0x1d4d8	; 0x1d4d8 <__mulsi3>
   14412:	9f 93       	push	r25
   14414:	8f 93       	push	r24
   14416:	7f 93       	push	r23
   14418:	6f 93       	push	r22
   1441a:	81 e8       	ldi	r24, 0x81	; 129
   1441c:	99 e1       	ldi	r25, 0x19	; 25
   1441e:	1f 92       	push	r1
   14420:	9f 93       	push	r25
   14422:	8f 93       	push	r24
   14424:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14428:	ed b7       	in	r30, 0x3d	; 61
   1442a:	fe b7       	in	r31, 0x3e	; 62
   1442c:	37 96       	adiw	r30, 0x07	; 7
   1442e:	0f b6       	in	r0, 0x3f	; 63
   14430:	f8 94       	cli
   14432:	fe bf       	out	0x3e, r31	; 62
   14434:	0f be       	out	0x3f, r0	; 63
   14436:	ed bf       	out	0x3d, r30	; 61
   14438:	80 e0       	ldi	r24, 0x00	; 0
   1443a:	90 e0       	ldi	r25, 0x00	; 0
   1443c:	02 c0       	rjmp	.+4      	; 0x14442 <SS80_cmd_seek+0xf8>
   1443e:	81 e0       	ldi	r24, 0x01	; 1
   14440:	90 e0       	ldi	r25, 0x00	; 0
   14442:	cd b7       	in	r28, 0x3d	; 61
   14444:	de b7       	in	r29, 0x3e	; 62
   14446:	e0 e1       	ldi	r30, 0x10	; 16
   14448:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

0001444c <SS80_locate_and_write>:
   1444c:	a8 e0       	ldi	r26, 0x08	; 8
   1444e:	b0 e0       	ldi	r27, 0x00	; 0
   14450:	ec e2       	ldi	r30, 0x2C	; 44
   14452:	f2 ea       	ldi	r31, 0xA2	; 162
   14454:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   14458:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1445c:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14460:	a0 91 a4 19 	lds	r26, 0x19A4	; 0x8019a4 <SS80p>
   14464:	b0 91 a5 19 	lds	r27, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14468:	9f 96       	adiw	r26, 0x2f	; 47
   1446a:	0d 90       	ld	r0, X+
   1446c:	bc 91       	ld	r27, X
   1446e:	a0 2d       	mov	r26, r0
   14470:	27 81       	ldd	r18, Z+7	; 0x07
   14472:	30 85       	ldd	r19, Z+8	; 0x08
   14474:	41 85       	ldd	r20, Z+9	; 0x09
   14476:	52 85       	ldd	r21, Z+10	; 0x0a
   14478:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
   1447c:	4b 01       	movw	r8, r22
   1447e:	5c 01       	movw	r10, r24
   14480:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14484:	85 ff       	sbrs	r24, 5
   14486:	18 c0       	rjmp	.+48     	; 0x144b8 <SS80_locate_and_write+0x6c>
   14488:	86 85       	ldd	r24, Z+14	; 0x0e
   1448a:	8f 93       	push	r24
   1448c:	85 85       	ldd	r24, Z+13	; 0x0d
   1448e:	8f 93       	push	r24
   14490:	84 85       	ldd	r24, Z+12	; 0x0c
   14492:	8f 93       	push	r24
   14494:	83 85       	ldd	r24, Z+11	; 0x0b
   14496:	8f 93       	push	r24
   14498:	bf 92       	push	r11
   1449a:	af 92       	push	r10
   1449c:	9f 92       	push	r9
   1449e:	8f 92       	push	r8
   144a0:	86 e1       	ldi	r24, 0x16	; 22
   144a2:	9f e1       	ldi	r25, 0x1F	; 31
   144a4:	1f 92       	push	r1
   144a6:	9f 93       	push	r25
   144a8:	8f 93       	push	r24
   144aa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   144ae:	0f b6       	in	r0, 0x3f	; 63
   144b0:	f8 94       	cli
   144b2:	de bf       	out	0x3e, r29	; 62
   144b4:	0f be       	out	0x3f, r0	; 63
   144b6:	cd bf       	out	0x3d, r28	; 61
   144b8:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   144bc:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   144c0:	12 82       	std	Z+2, r1	; 0x02
   144c2:	54 98       	cbi	0x0a, 4	; 10
   144c4:	4c 99       	sbic	0x09, 4	; 9
   144c6:	03 c0       	rjmp	.+6      	; 0x144ce <SS80_locate_and_write+0x82>
   144c8:	80 e0       	ldi	r24, 0x00	; 0
   144ca:	90 e1       	ldi	r25, 0x10	; 16
   144cc:	52 c1       	rjmp	.+676    	; 0x14772 <SS80_locate_and_write+0x326>
   144ce:	3d df       	rcall	.-390    	; 0x1434a <SS80_cmd_seek>
   144d0:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   144d4:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   144d8:	89 2b       	or	r24, r25
   144da:	41 f0       	breq	.+16     	; 0x144ec <SS80_locate_and_write+0xa0>
   144dc:	83 81       	ldd	r24, Z+3	; 0x03
   144de:	94 81       	ldd	r25, Z+4	; 0x04
   144e0:	82 60       	ori	r24, 0x02	; 2
   144e2:	94 83       	std	Z+4, r25	; 0x04
   144e4:	83 83       	std	Z+3, r24	; 0x03
   144e6:	01 e0       	ldi	r16, 0x01	; 1
   144e8:	10 e0       	ldi	r17, 0x00	; 0
   144ea:	02 c0       	rjmp	.+4      	; 0x144f0 <SS80_locate_and_write+0xa4>
   144ec:	00 e0       	ldi	r16, 0x00	; 0
   144ee:	10 e0       	ldi	r17, 0x00	; 0
   144f0:	23 84       	ldd	r2, Z+11	; 0x0b
   144f2:	34 84       	ldd	r3, Z+12	; 0x0c
   144f4:	1a 82       	std	Y+2, r1	; 0x02
   144f6:	19 82       	std	Y+1, r1	; 0x01
   144f8:	41 2c       	mov	r4, r1
   144fa:	51 2c       	mov	r5, r1
   144fc:	32 01       	movw	r6, r4
   144fe:	89 ec       	ldi	r24, 0xC9	; 201
   14500:	9e e1       	ldi	r25, 0x1E	; 30
   14502:	9c 01       	movw	r18, r24
   14504:	40 e0       	ldi	r20, 0x00	; 0
   14506:	2b 83       	std	Y+3, r18	; 0x03
   14508:	3c 83       	std	Y+4, r19	; 0x04
   1450a:	4d 83       	std	Y+5, r20	; 0x05
   1450c:	8f ee       	ldi	r24, 0xEF	; 239
   1450e:	9e e1       	ldi	r25, 0x1E	; 30
   14510:	9c 01       	movw	r18, r24
   14512:	40 e0       	ldi	r20, 0x00	; 0
   14514:	2e 83       	std	Y+6, r18	; 0x06
   14516:	3f 83       	std	Y+7, r19	; 0x07
   14518:	48 87       	std	Y+8, r20	; 0x08
   1451a:	12 14       	cp	r1, r2
   1451c:	13 04       	cpc	r1, r3
   1451e:	0c f0       	brlt	.+2      	; 0x14522 <SS80_locate_and_write+0xd6>
   14520:	f6 c0       	rjmp	.+492    	; 0x1470e <SS80_locate_and_write+0x2c2>
   14522:	54 98       	cbi	0x0a, 4	; 10
   14524:	4c 9b       	sbis	0x09, 4	; 9
   14526:	d0 cf       	rjmp	.-96     	; 0x144c8 <SS80_locate_and_write+0x7c>
   14528:	71 01       	movw	r14, r2
   1452a:	31 e0       	ldi	r19, 0x01	; 1
   1452c:	23 16       	cp	r2, r19
   1452e:	33 06       	cpc	r3, r19
   14530:	1c f0       	brlt	.+6      	; 0x14538 <SS80_locate_and_write+0xec>
   14532:	e1 2c       	mov	r14, r1
   14534:	ff 24       	eor	r15, r15
   14536:	f3 94       	inc	r15
   14538:	ed ee       	ldi	r30, 0xED	; 237
   1453a:	fc e1       	ldi	r31, 0x1C	; 28
   1453c:	20 e0       	ldi	r18, 0x00	; 0
   1453e:	32 e0       	ldi	r19, 0x02	; 2
   14540:	11 92       	st	Z+, r1
   14542:	21 50       	subi	r18, 0x01	; 1
   14544:	30 40       	sbci	r19, 0x00	; 0
   14546:	e1 f7       	brne	.-8      	; 0x14540 <SS80_locate_and_write+0xf4>
   14548:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1454c:	87 fd       	sbrc	r24, 7
   1454e:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   14552:	ae 01       	movw	r20, r28
   14554:	4f 5f       	subi	r20, 0xFF	; 255
   14556:	5f 4f       	sbci	r21, 0xFF	; 255
   14558:	b7 01       	movw	r22, r14
   1455a:	8d ee       	ldi	r24, 0xED	; 237
   1455c:	9c e1       	ldi	r25, 0x1C	; 28
   1455e:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   14562:	6c 01       	movw	r12, r24
   14564:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14568:	87 ff       	sbrs	r24, 7
   1456a:	04 c0       	rjmp	.+8      	; 0x14574 <SS80_locate_and_write+0x128>
   1456c:	85 ef       	ldi	r24, 0xF5	; 245
   1456e:	9d e0       	ldi	r25, 0x0D	; 13
   14570:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   14574:	ce 14       	cp	r12, r14
   14576:	df 04       	cpc	r13, r15
   14578:	39 f1       	breq	.+78     	; 0x145c8 <SS80_locate_and_write+0x17c>
   1457a:	89 81       	ldd	r24, Y+1	; 0x01
   1457c:	9a 81       	ldd	r25, Y+2	; 0x02
   1457e:	9c 01       	movw	r18, r24
   14580:	22 27       	eor	r18, r18
   14582:	30 7d       	andi	r19, 0xD0	; 208
   14584:	23 2b       	or	r18, r19
   14586:	d1 f0       	breq	.+52     	; 0x145bc <SS80_locate_and_write+0x170>
   14588:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1458c:	80 ff       	sbrs	r24, 0
   1458e:	0a c0       	rjmp	.+20     	; 0x145a4 <SS80_locate_and_write+0x158>
   14590:	83 e0       	ldi	r24, 0x03	; 3
   14592:	9f e1       	ldi	r25, 0x1F	; 31
   14594:	1f 92       	push	r1
   14596:	9f 93       	push	r25
   14598:	8f 93       	push	r24
   1459a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1459e:	0f 90       	pop	r0
   145a0:	0f 90       	pop	r0
   145a2:	0f 90       	pop	r0
   145a4:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   145a8:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   145ac:	83 81       	ldd	r24, Z+3	; 0x03
   145ae:	94 81       	ldd	r25, Z+4	; 0x04
   145b0:	82 60       	ori	r24, 0x02	; 2
   145b2:	94 83       	std	Z+4, r25	; 0x04
   145b4:	83 83       	std	Z+3, r24	; 0x03
   145b6:	81 e0       	ldi	r24, 0x01	; 1
   145b8:	82 83       	std	Z+2, r24	; 0x02
   145ba:	9a c0       	rjmp	.+308    	; 0x146f0 <SS80_locate_and_write+0x2a4>
   145bc:	c1 14       	cp	r12, r1
   145be:	d1 04       	cpc	r13, r1
   145c0:	09 f0       	breq	.+2      	; 0x145c4 <SS80_locate_and_write+0x178>
   145c2:	d3 c0       	rjmp	.+422    	; 0x1476a <SS80_locate_and_write+0x31e>
   145c4:	90 fd       	sbrc	r25, 0
   145c6:	94 c0       	rjmp	.+296    	; 0x146f0 <SS80_locate_and_write+0x2a4>
   145c8:	01 15       	cp	r16, r1
   145ca:	11 05       	cpc	r17, r1
   145cc:	09 f0       	breq	.+2      	; 0x145d0 <SS80_locate_and_write+0x184>
   145ce:	85 c0       	rjmp	.+266    	; 0x146da <SS80_locate_and_write+0x28e>
   145d0:	c1 14       	cp	r12, r1
   145d2:	d1 04       	cpc	r13, r1
   145d4:	09 f4       	brne	.+2      	; 0x145d8 <SS80_locate_and_write+0x18c>
   145d6:	83 c0       	rjmp	.+262    	; 0x146de <SS80_locate_and_write+0x292>
   145d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   145dc:	86 fd       	sbrc	r24, 6
   145de:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   145e2:	e0 90 a2 19 	lds	r14, 0x19A2	; 0x8019a2 <SS80s>
   145e6:	f0 90 a3 19 	lds	r15, 0x19A3	; 0x8019a3 <SS80s+0x1>
   145ea:	33 e0       	ldi	r19, 0x03	; 3
   145ec:	e3 0e       	add	r14, r19
   145ee:	f1 1c       	adc	r15, r1
   145f0:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <SS80p>
   145f4:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <SS80p+0x1>
   145f8:	86 01       	movw	r16, r12
   145fa:	2d ee       	ldi	r18, 0xED	; 237
   145fc:	3c e1       	ldi	r19, 0x1C	; 28
   145fe:	b5 01       	movw	r22, r10
   14600:	a4 01       	movw	r20, r8
   14602:	02 96       	adiw	r24, 0x02	; 2
   14604:	0e 94 e0 8c 	call	0x119c0	; 0x119c0 <dbf_open_write>
   14608:	7c 01       	movw	r14, r24
   1460a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1460e:	86 ff       	sbrs	r24, 6
   14610:	04 c0       	rjmp	.+8      	; 0x1461a <SS80_locate_and_write+0x1ce>
   14612:	8f ef       	ldi	r24, 0xFF	; 255
   14614:	9d e0       	ldi	r25, 0x0D	; 13
   14616:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   1461a:	ce 14       	cp	r12, r14
   1461c:	df 04       	cpc	r13, r15
   1461e:	39 f1       	breq	.+78     	; 0x1466e <SS80_locate_and_write+0x222>
   14620:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14624:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14628:	83 81       	ldd	r24, Z+3	; 0x03
   1462a:	94 81       	ldd	r25, Z+4	; 0x04
   1462c:	82 60       	ori	r24, 0x02	; 2
   1462e:	94 83       	std	Z+4, r25	; 0x04
   14630:	83 83       	std	Z+3, r24	; 0x03
   14632:	0e 94 95 74 	call	0xe92a	; 0xe92a <mmc_wp_status>
   14636:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1463a:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1463e:	89 2b       	or	r24, r25
   14640:	29 f0       	breq	.+10     	; 0x1464c <SS80_locate_and_write+0x200>
   14642:	83 81       	ldd	r24, Z+3	; 0x03
   14644:	94 81       	ldd	r25, Z+4	; 0x04
   14646:	88 60       	ori	r24, 0x08	; 8
   14648:	94 83       	std	Z+4, r25	; 0x04
   1464a:	83 83       	std	Z+3, r24	; 0x03
   1464c:	41 e0       	ldi	r20, 0x01	; 1
   1464e:	42 83       	std	Z+2, r20	; 0x02
   14650:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14654:	80 ff       	sbrs	r24, 0
   14656:	29 c0       	rjmp	.+82     	; 0x146aa <SS80_locate_and_write+0x25e>
   14658:	1f 92       	push	r1
   1465a:	8f 81       	ldd	r24, Y+7	; 0x07
   1465c:	8f 93       	push	r24
   1465e:	9e 81       	ldd	r25, Y+6	; 0x06
   14660:	9f 93       	push	r25
   14662:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14666:	0f 90       	pop	r0
   14668:	0f 90       	pop	r0
   1466a:	0f 90       	pop	r0
   1466c:	1e c0       	rjmp	.+60     	; 0x146aa <SS80_locate_and_write+0x25e>
   1466e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14672:	85 ff       	sbrs	r24, 5
   14674:	0e c0       	rjmp	.+28     	; 0x14692 <SS80_locate_and_write+0x246>
   14676:	df 92       	push	r13
   14678:	cf 92       	push	r12
   1467a:	1f 92       	push	r1
   1467c:	ec 81       	ldd	r30, Y+4	; 0x04
   1467e:	ef 93       	push	r30
   14680:	fb 81       	ldd	r31, Y+3	; 0x03
   14682:	ff 93       	push	r31
   14684:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14688:	0f 90       	pop	r0
   1468a:	0f 90       	pop	r0
   1468c:	0f 90       	pop	r0
   1468e:	0f 90       	pop	r0
   14690:	0f 90       	pop	r0
   14692:	c6 01       	movw	r24, r12
   14694:	0d 2c       	mov	r0, r13
   14696:	00 0c       	add	r0, r0
   14698:	aa 0b       	sbc	r26, r26
   1469a:	bb 0b       	sbc	r27, r27
   1469c:	88 0e       	add	r8, r24
   1469e:	99 1e       	adc	r9, r25
   146a0:	aa 1e       	adc	r10, r26
   146a2:	bb 1e       	adc	r11, r27
   146a4:	00 e0       	ldi	r16, 0x00	; 0
   146a6:	10 e0       	ldi	r17, 0x00	; 0
   146a8:	05 c0       	rjmp	.+10     	; 0x146b4 <SS80_locate_and_write+0x268>
   146aa:	ec 14       	cp	r14, r12
   146ac:	fd 04       	cpc	r15, r13
   146ae:	64 f0       	brlt	.+24     	; 0x146c8 <SS80_locate_and_write+0x27c>
   146b0:	01 e0       	ldi	r16, 0x01	; 1
   146b2:	10 e0       	ldi	r17, 0x00	; 0
   146b4:	c7 01       	movw	r24, r14
   146b6:	0f 2c       	mov	r0, r15
   146b8:	00 0c       	add	r0, r0
   146ba:	aa 0b       	sbc	r26, r26
   146bc:	bb 0b       	sbc	r27, r27
   146be:	48 0e       	add	r4, r24
   146c0:	59 1e       	adc	r5, r25
   146c2:	6a 1e       	adc	r6, r26
   146c4:	7b 1e       	adc	r7, r27
   146c6:	0b c0       	rjmp	.+22     	; 0x146de <SS80_locate_and_write+0x292>
   146c8:	c6 01       	movw	r24, r12
   146ca:	0d 2c       	mov	r0, r13
   146cc:	00 0c       	add	r0, r0
   146ce:	aa 0b       	sbc	r26, r26
   146d0:	bb 0b       	sbc	r27, r27
   146d2:	48 0e       	add	r4, r24
   146d4:	59 1e       	adc	r5, r25
   146d6:	6a 1e       	adc	r6, r26
   146d8:	7b 1e       	adc	r7, r27
   146da:	01 e0       	ldi	r16, 0x01	; 1
   146dc:	10 e0       	ldi	r17, 0x00	; 0
   146de:	2c 18       	sub	r2, r12
   146e0:	3d 08       	sbc	r3, r13
   146e2:	89 81       	ldd	r24, Y+1	; 0x01
   146e4:	9a 81       	ldd	r25, Y+2	; 0x02
   146e6:	90 ff       	sbrs	r25, 0
   146e8:	18 cf       	rjmp	.-464    	; 0x1451a <SS80_locate_and_write+0xce>
   146ea:	12 14       	cp	r1, r2
   146ec:	13 04       	cpc	r1, r3
   146ee:	7c f4       	brge	.+30     	; 0x1470e <SS80_locate_and_write+0x2c2>
   146f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   146f4:	80 ff       	sbrs	r24, 0
   146f6:	1f c0       	rjmp	.+62     	; 0x14736 <SS80_locate_and_write+0x2ea>
   146f8:	81 ea       	ldi	r24, 0xA1	; 161
   146fa:	9e e1       	ldi	r25, 0x1E	; 30
   146fc:	1f 92       	push	r1
   146fe:	9f 93       	push	r25
   14700:	8f 93       	push	r24
   14702:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14706:	0f 90       	pop	r0
   14708:	0f 90       	pop	r0
   1470a:	0f 90       	pop	r0
   1470c:	14 c0       	rjmp	.+40     	; 0x14736 <SS80_locate_and_write+0x2ea>
   1470e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14712:	85 ff       	sbrs	r24, 5
   14714:	10 c0       	rjmp	.+32     	; 0x14736 <SS80_locate_and_write+0x2ea>
   14716:	7f 92       	push	r7
   14718:	6f 92       	push	r6
   1471a:	5f 92       	push	r5
   1471c:	4f 92       	push	r4
   1471e:	86 e7       	ldi	r24, 0x76	; 118
   14720:	9e e1       	ldi	r25, 0x1E	; 30
   14722:	1f 92       	push	r1
   14724:	9f 93       	push	r25
   14726:	8f 93       	push	r24
   14728:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1472c:	0f b6       	in	r0, 0x3f	; 63
   1472e:	f8 94       	cli
   14730:	de bf       	out	0x3e, r29	; 62
   14732:	0f be       	out	0x3f, r0	; 63
   14734:	cd bf       	out	0x3d, r28	; 61
   14736:	00 91 a2 19 	lds	r16, 0x19A2	; 0x8019a2 <SS80s>
   1473a:	10 91 a3 19 	lds	r17, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1473e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14742:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14746:	27 a5       	ldd	r18, Z+47	; 0x2f
   14748:	30 a9       	ldd	r19, Z+48	; 0x30
   1474a:	40 e0       	ldi	r20, 0x00	; 0
   1474c:	50 e0       	ldi	r21, 0x00	; 0
   1474e:	c5 01       	movw	r24, r10
   14750:	b4 01       	movw	r22, r8
   14752:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
   14756:	f8 01       	movw	r30, r16
   14758:	27 83       	std	Z+7, r18	; 0x07
   1475a:	30 87       	std	Z+8, r19	; 0x08
   1475c:	41 87       	std	Z+9, r20	; 0x09
   1475e:	52 87       	std	Z+10, r21	; 0x0a
   14760:	89 81       	ldd	r24, Y+1	; 0x01
   14762:	9a 81       	ldd	r25, Y+2	; 0x02
   14764:	88 27       	eor	r24, r24
   14766:	90 7d       	andi	r25, 0xD0	; 208
   14768:	04 c0       	rjmp	.+8      	; 0x14772 <SS80_locate_and_write+0x326>
   1476a:	01 2b       	or	r16, r17
   1476c:	09 f4       	brne	.+2      	; 0x14770 <SS80_locate_and_write+0x324>
   1476e:	34 cf       	rjmp	.-408    	; 0x145d8 <SS80_locate_and_write+0x18c>
   14770:	b4 cf       	rjmp	.-152    	; 0x146da <SS80_locate_and_write+0x28e>
   14772:	28 96       	adiw	r28, 0x08	; 8
   14774:	e2 e1       	ldi	r30, 0x12	; 18
   14776:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001477a <SS80_Report>:
   1477a:	a3 e0       	ldi	r26, 0x03	; 3
   1477c:	b0 e0       	ldi	r27, 0x00	; 0
   1477e:	e3 ec       	ldi	r30, 0xC3	; 195
   14780:	f3 ea       	ldi	r31, 0xA3	; 163
   14782:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   14786:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1478a:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1478e:	82 81       	ldd	r24, Z+2	; 0x02
   14790:	8b 83       	std	Y+3, r24	; 0x03
   14792:	80 e0       	ldi	r24, 0x00	; 0
   14794:	91 e0       	ldi	r25, 0x01	; 1
   14796:	9a 83       	std	Y+2, r25	; 0x02
   14798:	89 83       	std	Y+1, r24	; 0x01
   1479a:	ae 01       	movw	r20, r28
   1479c:	4f 5f       	subi	r20, 0xFF	; 255
   1479e:	5f 4f       	sbci	r21, 0xFF	; 255
   147a0:	61 e0       	ldi	r22, 0x01	; 1
   147a2:	70 e0       	ldi	r23, 0x00	; 0
   147a4:	ce 01       	movw	r24, r28
   147a6:	03 96       	adiw	r24, 0x03	; 3
   147a8:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   147ac:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   147b0:	01 97       	sbiw	r24, 0x01	; 1
   147b2:	89 f0       	breq	.+34     	; 0x147d6 <SS80_Report+0x5c>
   147b4:	20 ff       	sbrs	r18, 0
   147b6:	0a c0       	rjmp	.+20     	; 0x147cc <SS80_Report+0x52>
   147b8:	87 e6       	ldi	r24, 0x67	; 103
   147ba:	99 e1       	ldi	r25, 0x19	; 25
   147bc:	1f 92       	push	r1
   147be:	9f 93       	push	r25
   147c0:	8f 93       	push	r24
   147c2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   147c6:	0f 90       	pop	r0
   147c8:	0f 90       	pop	r0
   147ca:	0f 90       	pop	r0
   147cc:	89 81       	ldd	r24, Y+1	; 0x01
   147ce:	9a 81       	ldd	r25, Y+2	; 0x02
   147d0:	88 27       	eor	r24, r24
   147d2:	90 7d       	andi	r25, 0xD0	; 208
   147d4:	1c c0       	rjmp	.+56     	; 0x1480e <SS80_Report+0x94>
   147d6:	25 ff       	sbrs	r18, 5
   147d8:	13 c0       	rjmp	.+38     	; 0x14800 <SS80_Report+0x86>
   147da:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   147de:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   147e2:	82 81       	ldd	r24, Z+2	; 0x02
   147e4:	1f 92       	push	r1
   147e6:	8f 93       	push	r24
   147e8:	84 e5       	ldi	r24, 0x54	; 84
   147ea:	99 e1       	ldi	r25, 0x19	; 25
   147ec:	1f 92       	push	r1
   147ee:	9f 93       	push	r25
   147f0:	8f 93       	push	r24
   147f2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   147f6:	0f 90       	pop	r0
   147f8:	0f 90       	pop	r0
   147fa:	0f 90       	pop	r0
   147fc:	0f 90       	pop	r0
   147fe:	0f 90       	pop	r0
   14800:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14804:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14808:	12 82       	std	Z+2, r1	; 0x02
   1480a:	80 e0       	ldi	r24, 0x00	; 0
   1480c:	90 e0       	ldi	r25, 0x00	; 0
   1480e:	23 96       	adiw	r28, 0x03	; 3
   14810:	e2 e0       	ldi	r30, 0x02	; 2
   14812:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00014816 <Clear_Common>:
   14816:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1481a:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   1481e:	25 81       	ldd	r18, Z+5	; 0x05
   14820:	30 e0       	ldi	r19, 0x00	; 0
   14822:	28 17       	cp	r18, r24
   14824:	39 07       	cpc	r19, r25
   14826:	19 f0       	breq	.+6      	; 0x1482e <Clear_Common+0x18>
   14828:	0f 97       	sbiw	r24, 0x0f	; 15
   1482a:	99 f4       	brne	.+38     	; 0x14852 <Clear_Common+0x3c>
   1482c:	03 c0       	rjmp	.+6      	; 0x14834 <Clear_Common+0x1e>
   1482e:	2f 30       	cpi	r18, 0x0F	; 15
   14830:	31 05       	cpc	r19, r1
   14832:	09 f4       	brne	.+2      	; 0x14836 <Clear_Common+0x20>
   14834:	15 82       	std	Z+5, r1	; 0x05
   14836:	16 82       	std	Z+6, r1	; 0x06
   14838:	17 82       	std	Z+7, r1	; 0x07
   1483a:	10 86       	std	Z+8, r1	; 0x08
   1483c:	11 86       	std	Z+9, r1	; 0x09
   1483e:	12 86       	std	Z+10, r1	; 0x0a
   14840:	13 86       	std	Z+11, r1	; 0x0b
   14842:	14 86       	std	Z+12, r1	; 0x0c
   14844:	15 86       	std	Z+13, r1	; 0x0d
   14846:	16 86       	std	Z+14, r1	; 0x0e
   14848:	11 82       	std	Z+1, r1	; 0x01
   1484a:	10 82       	st	Z, r1
   1484c:	14 82       	std	Z+4, r1	; 0x04
   1484e:	13 82       	std	Z+3, r1	; 0x03
   14850:	12 82       	std	Z+2, r1	; 0x02
   14852:	08 95       	ret

00014854 <SS80_init>:
   14854:	a0 e0       	ldi	r26, 0x00	; 0
   14856:	b0 e0       	ldi	r27, 0x00	; 0
   14858:	e0 e3       	ldi	r30, 0x30	; 48
   1485a:	f4 ea       	ldi	r31, 0xA4	; 164
   1485c:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   14860:	07 ef       	ldi	r16, 0xF7	; 247
   14862:	1e e1       	ldi	r17, 0x1E	; 30
   14864:	c7 e0       	ldi	r28, 0x07	; 7
   14866:	d0 e0       	ldi	r29, 0x00	; 0
   14868:	8f e1       	ldi	r24, 0x1F	; 31
   1486a:	90 e2       	ldi	r25, 0x20	; 32
   1486c:	6c 01       	movw	r12, r24
   1486e:	e1 2c       	mov	r14, r1
   14870:	f8 01       	movw	r30, r16
   14872:	f1 a8       	ldd	r15, Z+49	; 0x31
   14874:	f2 e0       	ldi	r31, 0x02	; 2
   14876:	ff 12       	cpse	r15, r31
   14878:	27 c0       	rjmp	.+78     	; 0x148c8 <SS80_init+0x74>
   1487a:	ce 01       	movw	r24, r28
   1487c:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <set_active_device>
   14880:	89 2b       	or	r24, r25
   14882:	11 f1       	breq	.+68     	; 0x148c8 <SS80_init+0x74>
   14884:	8f e0       	ldi	r24, 0x0F	; 15
   14886:	90 e0       	ldi	r25, 0x00	; 0
   14888:	c6 df       	rcall	.-116    	; 0x14816 <Clear_Common>
   1488a:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   1488e:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14892:	f2 82       	std	Z+2, r15	; 0x02
   14894:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14898:	85 ff       	sbrs	r24, 5
   1489a:	0e c0       	rjmp	.+28     	; 0x148b8 <SS80_init+0x64>
   1489c:	f8 01       	movw	r30, r16
   1489e:	82 a9       	ldd	r24, Z+50	; 0x32
   148a0:	1f 92       	push	r1
   148a2:	8f 93       	push	r24
   148a4:	1f 92       	push	r1
   148a6:	df 92       	push	r13
   148a8:	cf 92       	push	r12
   148aa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   148ae:	0f 90       	pop	r0
   148b0:	0f 90       	pop	r0
   148b2:	0f 90       	pop	r0
   148b4:	0f 90       	pop	r0
   148b6:	0f 90       	pop	r0
   148b8:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   148bc:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   148c0:	81 81       	ldd	r24, Z+1	; 0x01
   148c2:	90 e0       	ldi	r25, 0x00	; 0
   148c4:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   148c8:	21 97       	sbiw	r28, 0x01	; 1
   148ca:	07 50       	subi	r16, 0x07	; 7
   148cc:	11 09       	sbc	r17, r1
   148ce:	cf 3f       	cpi	r28, 0xFF	; 255
   148d0:	ff ef       	ldi	r31, 0xFF	; 255
   148d2:	df 07       	cpc	r29, r31
   148d4:	69 f6       	brne	.-102    	; 0x14870 <SS80_init+0x1c>
   148d6:	cd b7       	in	r28, 0x3d	; 61
   148d8:	de b7       	in	r29, 0x3e	; 62
   148da:	e8 e0       	ldi	r30, 0x08	; 8
   148dc:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

000148e0 <SS80_Channel_Independent_Clear>:
   148e0:	9a df       	rcall	.-204    	; 0x14816 <Clear_Common>
   148e2:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   148e6:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   148ea:	81 81       	ldd	r24, Z+1	; 0x01
   148ec:	90 e0       	ldi	r25, 0x00	; 0
   148ee:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   148f2:	80 e0       	ldi	r24, 0x00	; 0
   148f4:	90 e0       	ldi	r25, 0x00	; 0
   148f6:	08 95       	ret

000148f8 <SS80_Universal_Device_Clear>:
   148f8:	8f e0       	ldi	r24, 0x0F	; 15
   148fa:	90 e0       	ldi	r25, 0x00	; 0
   148fc:	8c df       	rcall	.-232    	; 0x14816 <Clear_Common>
   148fe:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14902:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14906:	81 81       	ldd	r24, Z+1	; 0x01
   14908:	90 e0       	ldi	r25, 0x00	; 0
   1490a:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1490e:	80 e0       	ldi	r24, 0x00	; 0
   14910:	90 e0       	ldi	r25, 0x00	; 0
   14912:	08 95       	ret

00014914 <SS80_Selected_Device_Clear>:
   14914:	cf 93       	push	r28
   14916:	df 93       	push	r29
   14918:	ec 01       	movw	r28, r24
   1491a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1491e:	85 ff       	sbrs	r24, 5
   14920:	0a c0       	rjmp	.+20     	; 0x14936 <SS80_Selected_Device_Clear+0x22>
   14922:	88 e4       	ldi	r24, 0x48	; 72
   14924:	99 e1       	ldi	r25, 0x19	; 25
   14926:	1f 92       	push	r1
   14928:	9f 93       	push	r25
   1492a:	8f 93       	push	r24
   1492c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14930:	0f 90       	pop	r0
   14932:	0f 90       	pop	r0
   14934:	0f 90       	pop	r0
   14936:	ce 01       	movw	r24, r28
   14938:	6e df       	rcall	.-292    	; 0x14816 <Clear_Common>
   1493a:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   1493e:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14942:	81 81       	ldd	r24, Z+1	; 0x01
   14944:	90 e0       	ldi	r25, 0x00	; 0
   14946:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1494a:	80 e0       	ldi	r24, 0x00	; 0
   1494c:	90 e0       	ldi	r25, 0x00	; 0
   1494e:	df 91       	pop	r29
   14950:	cf 91       	pop	r28
   14952:	08 95       	ret

00014954 <SS80_Amigo_Clear>:
   14954:	a3 e0       	ldi	r26, 0x03	; 3
   14956:	b0 e0       	ldi	r27, 0x00	; 0
   14958:	e0 eb       	ldi	r30, 0xB0	; 176
   1495a:	f4 ea       	ldi	r31, 0xA4	; 164
   1495c:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   14960:	1a 82       	std	Y+2, r1	; 0x02
   14962:	19 82       	std	Y+1, r1	; 0x01
   14964:	ae 01       	movw	r20, r28
   14966:	4f 5f       	subi	r20, 0xFF	; 255
   14968:	5f 4f       	sbci	r21, 0xFF	; 255
   1496a:	61 e0       	ldi	r22, 0x01	; 1
   1496c:	70 e0       	ldi	r23, 0x00	; 0
   1496e:	ce 01       	movw	r24, r28
   14970:	03 96       	adiw	r24, 0x03	; 3
   14972:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   14976:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1497a:	01 97       	sbiw	r24, 0x01	; 1
   1497c:	89 f0       	breq	.+34     	; 0x149a0 <SS80_Amigo_Clear+0x4c>
   1497e:	20 ff       	sbrs	r18, 0
   14980:	0a c0       	rjmp	.+20     	; 0x14996 <SS80_Amigo_Clear+0x42>
   14982:	85 e3       	ldi	r24, 0x35	; 53
   14984:	99 e1       	ldi	r25, 0x19	; 25
   14986:	1f 92       	push	r1
   14988:	9f 93       	push	r25
   1498a:	8f 93       	push	r24
   1498c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14990:	0f 90       	pop	r0
   14992:	0f 90       	pop	r0
   14994:	0f 90       	pop	r0
   14996:	89 81       	ldd	r24, Y+1	; 0x01
   14998:	9a 81       	ldd	r25, Y+2	; 0x02
   1499a:	88 27       	eor	r24, r24
   1499c:	90 7d       	andi	r25, 0xD0	; 208
   1499e:	19 c0       	rjmp	.+50     	; 0x149d2 <SS80_Amigo_Clear+0x7e>
   149a0:	25 ff       	sbrs	r18, 5
   149a2:	0a c0       	rjmp	.+20     	; 0x149b8 <SS80_Amigo_Clear+0x64>
   149a4:	86 e2       	ldi	r24, 0x26	; 38
   149a6:	99 e1       	ldi	r25, 0x19	; 25
   149a8:	1f 92       	push	r1
   149aa:	9f 93       	push	r25
   149ac:	8f 93       	push	r24
   149ae:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   149b2:	0f 90       	pop	r0
   149b4:	0f 90       	pop	r0
   149b6:	0f 90       	pop	r0
   149b8:	8f e0       	ldi	r24, 0x0F	; 15
   149ba:	90 e0       	ldi	r25, 0x00	; 0
   149bc:	2c df       	rcall	.-424    	; 0x14816 <Clear_Common>
   149be:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   149c2:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   149c6:	81 81       	ldd	r24, Z+1	; 0x01
   149c8:	90 e0       	ldi	r25, 0x00	; 0
   149ca:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   149ce:	80 e0       	ldi	r24, 0x00	; 0
   149d0:	90 e0       	ldi	r25, 0x00	; 0
   149d2:	23 96       	adiw	r28, 0x03	; 3
   149d4:	e2 e0       	ldi	r30, 0x02	; 2
   149d6:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

000149da <SS80_Cancel>:
   149da:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   149de:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   149e2:	11 82       	std	Z+1, r1	; 0x01
   149e4:	10 82       	st	Z, r1
   149e6:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   149ea:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   149ee:	81 81       	ldd	r24, Z+1	; 0x01
   149f0:	90 e0       	ldi	r25, 0x00	; 0
   149f2:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   149f6:	80 e0       	ldi	r24, 0x00	; 0
   149f8:	90 e0       	ldi	r25, 0x00	; 0
   149fa:	08 95       	ret

000149fc <SS80_Transparent_State>:
   149fc:	a2 e0       	ldi	r26, 0x02	; 2
   149fe:	b0 e0       	ldi	r27, 0x00	; 0
   14a00:	e4 e0       	ldi	r30, 0x04	; 4
   14a02:	f5 ea       	ldi	r31, 0xA5	; 165
   14a04:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   14a08:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14a0c:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14a10:	81 81       	ldd	r24, Z+1	; 0x01
   14a12:	90 e0       	ldi	r25, 0x00	; 0
   14a14:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   14a18:	80 e0       	ldi	r24, 0x00	; 0
   14a1a:	91 e0       	ldi	r25, 0x01	; 1
   14a1c:	9a 83       	std	Y+2, r25	; 0x02
   14a1e:	89 83       	std	Y+1, r24	; 0x01
   14a20:	ae 01       	movw	r20, r28
   14a22:	4f 5f       	subi	r20, 0xFF	; 255
   14a24:	5f 4f       	sbci	r21, 0xFF	; 255
   14a26:	60 e0       	ldi	r22, 0x00	; 0
   14a28:	72 e0       	ldi	r23, 0x02	; 2
   14a2a:	8d ee       	ldi	r24, 0xED	; 237
   14a2c:	9c e1       	ldi	r25, 0x1C	; 28
   14a2e:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   14a32:	7c 01       	movw	r14, r24
   14a34:	89 81       	ldd	r24, Y+1	; 0x01
   14a36:	9a 81       	ldd	r25, Y+2	; 0x02
   14a38:	9c 01       	movw	r18, r24
   14a3a:	22 27       	eor	r18, r18
   14a3c:	30 7d       	andi	r19, 0xD0	; 208
   14a3e:	23 2b       	or	r18, r19
   14a40:	79 f0       	breq	.+30     	; 0x14a60 <SS80_Transparent_State+0x64>
   14a42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14a46:	80 ff       	sbrs	r24, 0
   14a48:	e0 c0       	rjmp	.+448    	; 0x14c0a <SS80_Transparent_State+0x20e>
   14a4a:	85 ec       	ldi	r24, 0xC5	; 197
   14a4c:	9a e1       	ldi	r25, 0x1A	; 26
   14a4e:	1f 92       	push	r1
   14a50:	9f 93       	push	r25
   14a52:	8f 93       	push	r24
   14a54:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14a58:	0f 90       	pop	r0
   14a5a:	0f 90       	pop	r0
   14a5c:	0f 90       	pop	r0
   14a5e:	d5 c0       	rjmp	.+426    	; 0x14c0a <SS80_Transparent_State+0x20e>
   14a60:	e1 14       	cp	r14, r1
   14a62:	f1 04       	cpc	r15, r1
   14a64:	09 f4       	brne	.+2      	; 0x14a68 <SS80_Transparent_State+0x6c>
   14a66:	d6 c0       	rjmp	.+428    	; 0x14c14 <SS80_Transparent_State+0x218>
   14a68:	90 fd       	sbrc	r25, 0
   14a6a:	0e c0       	rjmp	.+28     	; 0x14a88 <SS80_Transparent_State+0x8c>
   14a6c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14a70:	80 ff       	sbrs	r24, 0
   14a72:	0a c0       	rjmp	.+20     	; 0x14a88 <SS80_Transparent_State+0x8c>
   14a74:	8c ea       	ldi	r24, 0xAC	; 172
   14a76:	9a e1       	ldi	r25, 0x1A	; 26
   14a78:	1f 92       	push	r1
   14a7a:	9f 93       	push	r25
   14a7c:	8f 93       	push	r24
   14a7e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14a82:	0f 90       	pop	r0
   14a84:	0f 90       	pop	r0
   14a86:	0f 90       	pop	r0
   14a88:	8d ee       	ldi	r24, 0xED	; 237
   14a8a:	a8 2e       	mov	r10, r24
   14a8c:	8c e1       	ldi	r24, 0x1C	; 28
   14a8e:	b8 2e       	mov	r11, r24
   14a90:	00 e0       	ldi	r16, 0x00	; 0
   14a92:	10 e0       	ldi	r17, 0x00	; 0
   14a94:	0e 15       	cp	r16, r14
   14a96:	1f 05       	cpc	r17, r15
   14a98:	0c f0       	brlt	.+2      	; 0x14a9c <SS80_Transparent_State+0xa0>
   14a9a:	a0 c0       	rjmp	.+320    	; 0x14bdc <SS80_Transparent_State+0x1e0>
   14a9c:	68 01       	movw	r12, r16
   14a9e:	8f ef       	ldi	r24, 0xFF	; 255
   14aa0:	c8 1a       	sub	r12, r24
   14aa2:	d8 0a       	sbc	r13, r24
   14aa4:	f5 01       	movw	r30, r10
   14aa6:	81 91       	ld	r24, Z+
   14aa8:	5f 01       	movw	r10, r30
   14aaa:	28 2f       	mov	r18, r24
   14aac:	30 e0       	ldi	r19, 0x00	; 0
   14aae:	a9 01       	movw	r20, r18
   14ab0:	40 52       	subi	r20, 0x20	; 32
   14ab2:	51 09       	sbc	r21, r1
   14ab4:	40 31       	cpi	r20, 0x10	; 16
   14ab6:	51 05       	cpc	r21, r1
   14ab8:	20 f4       	brcc	.+8      	; 0x14ac2 <SS80_Transparent_State+0xc6>
   14aba:	80 52       	subi	r24, 0x20	; 32
   14abc:	8c d9       	rcall	.-3304   	; 0x13dd6 <SS80_Check_Unit>
   14abe:	86 01       	movw	r16, r12
   14ac0:	e9 cf       	rjmp	.-46     	; 0x14a94 <SS80_Transparent_State+0x98>
   14ac2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14ac6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   14aca:	21 30       	cpi	r18, 0x01	; 1
   14acc:	31 05       	cpc	r19, r1
   14ace:	c9 f4       	brne	.+50     	; 0x14b02 <SS80_Transparent_State+0x106>
   14ad0:	0e 5f       	subi	r16, 0xFE	; 254
   14ad2:	1f 4f       	sbci	r17, 0xFF	; 255
   14ad4:	80 73       	andi	r24, 0x30	; 48
   14ad6:	99 27       	eor	r25, r25
   14ad8:	89 2b       	or	r24, r25
   14ada:	51 f0       	breq	.+20     	; 0x14af0 <SS80_Transparent_State+0xf4>
   14adc:	87 e8       	ldi	r24, 0x87	; 135
   14ade:	9a e1       	ldi	r25, 0x1A	; 26
   14ae0:	1f 92       	push	r1
   14ae2:	9f 93       	push	r25
   14ae4:	8f 93       	push	r24
   14ae6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14aea:	0f 90       	pop	r0
   14aec:	0f 90       	pop	r0
   14aee:	0f 90       	pop	r0
   14af0:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14af4:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14af8:	81 81       	ldd	r24, Z+1	; 0x01
   14afa:	90 e0       	ldi	r25, 0x00	; 0
   14afc:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   14b00:	6d c0       	rjmp	.+218    	; 0x14bdc <SS80_Transparent_State+0x1e0>
   14b02:	22 30       	cpi	r18, 0x02	; 2
   14b04:	31 05       	cpc	r19, r1
   14b06:	51 f4       	brne	.+20     	; 0x14b1c <SS80_Transparent_State+0x120>
   14b08:	0b 5f       	subi	r16, 0xFB	; 251
   14b0a:	1f 4f       	sbci	r17, 0xFF	; 255
   14b0c:	80 73       	andi	r24, 0x30	; 48
   14b0e:	99 27       	eor	r25, r25
   14b10:	89 2b       	or	r24, r25
   14b12:	09 f4       	brne	.+2      	; 0x14b16 <SS80_Transparent_State+0x11a>
   14b14:	63 c0       	rjmp	.+198    	; 0x14bdc <SS80_Transparent_State+0x1e0>
   14b16:	8a e6       	ldi	r24, 0x6A	; 106
   14b18:	9a e1       	ldi	r25, 0x1A	; 26
   14b1a:	0c c0       	rjmp	.+24     	; 0x14b34 <SS80_Transparent_State+0x138>
   14b1c:	23 30       	cpi	r18, 0x03	; 3
   14b1e:	31 05       	cpc	r19, r1
   14b20:	91 f4       	brne	.+36     	; 0x14b46 <SS80_Transparent_State+0x14a>
   14b22:	0b 5f       	subi	r16, 0xFB	; 251
   14b24:	1f 4f       	sbci	r17, 0xFF	; 255
   14b26:	80 73       	andi	r24, 0x30	; 48
   14b28:	99 27       	eor	r25, r25
   14b2a:	89 2b       	or	r24, r25
   14b2c:	09 f4       	brne	.+2      	; 0x14b30 <SS80_Transparent_State+0x134>
   14b2e:	56 c0       	rjmp	.+172    	; 0x14bdc <SS80_Transparent_State+0x1e0>
   14b30:	8c e4       	ldi	r24, 0x4C	; 76
   14b32:	9a e1       	ldi	r25, 0x1A	; 26
   14b34:	1f 92       	push	r1
   14b36:	9f 93       	push	r25
   14b38:	8f 93       	push	r24
   14b3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14b3e:	0f 90       	pop	r0
   14b40:	0f 90       	pop	r0
   14b42:	0f 90       	pop	r0
   14b44:	4b c0       	rjmp	.+150    	; 0x14bdc <SS80_Transparent_State+0x1e0>
   14b46:	28 30       	cpi	r18, 0x08	; 8
   14b48:	31 05       	cpc	r19, r1
   14b4a:	e9 f4       	brne	.+58     	; 0x14b86 <SS80_Transparent_State+0x18a>
   14b4c:	85 ff       	sbrs	r24, 5
   14b4e:	13 c0       	rjmp	.+38     	; 0x14b76 <SS80_Transparent_State+0x17a>
   14b50:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14b54:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14b58:	85 81       	ldd	r24, Z+5	; 0x05
   14b5a:	1f 92       	push	r1
   14b5c:	8f 93       	push	r24
   14b5e:	85 e2       	ldi	r24, 0x25	; 37
   14b60:	9a e1       	ldi	r25, 0x1A	; 26
   14b62:	1f 92       	push	r1
   14b64:	9f 93       	push	r25
   14b66:	8f 93       	push	r24
   14b68:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	0f 90       	pop	r0
   14b72:	0f 90       	pop	r0
   14b74:	0f 90       	pop	r0
   14b76:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14b7a:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14b7e:	85 81       	ldd	r24, Z+5	; 0x05
   14b80:	90 e0       	ldi	r25, 0x00	; 0
   14b82:	ae de       	rcall	.-676    	; 0x148e0 <SS80_Channel_Independent_Clear>
   14b84:	49 c0       	rjmp	.+146    	; 0x14c18 <SS80_Transparent_State+0x21c>
   14b86:	29 30       	cpi	r18, 0x09	; 9
   14b88:	31 05       	cpc	r19, r1
   14b8a:	b9 f4       	brne	.+46     	; 0x14bba <SS80_Transparent_State+0x1be>
   14b8c:	85 ff       	sbrs	r24, 5
   14b8e:	13 c0       	rjmp	.+38     	; 0x14bb6 <SS80_Transparent_State+0x1ba>
   14b90:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14b94:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14b98:	85 81       	ldd	r24, Z+5	; 0x05
   14b9a:	1f 92       	push	r1
   14b9c:	8f 93       	push	r24
   14b9e:	81 e1       	ldi	r24, 0x11	; 17
   14ba0:	9a e1       	ldi	r25, 0x1A	; 26
   14ba2:	1f 92       	push	r1
   14ba4:	9f 93       	push	r25
   14ba6:	8f 93       	push	r24
   14ba8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14bac:	0f 90       	pop	r0
   14bae:	0f 90       	pop	r0
   14bb0:	0f 90       	pop	r0
   14bb2:	0f 90       	pop	r0
   14bb4:	0f 90       	pop	r0
   14bb6:	11 df       	rcall	.-478    	; 0x149da <SS80_Cancel>
   14bb8:	2f c0       	rjmp	.+94     	; 0x14c18 <SS80_Transparent_State+0x21c>
   14bba:	80 ff       	sbrs	r24, 0
   14bbc:	26 c0       	rjmp	.+76     	; 0x14c0a <SS80_Transparent_State+0x20e>
   14bbe:	3f 93       	push	r19
   14bc0:	2f 93       	push	r18
   14bc2:	81 ef       	ldi	r24, 0xF1	; 241
   14bc4:	99 e1       	ldi	r25, 0x19	; 25
   14bc6:	1f 92       	push	r1
   14bc8:	9f 93       	push	r25
   14bca:	8f 93       	push	r24
   14bcc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14bd0:	0f 90       	pop	r0
   14bd2:	0f 90       	pop	r0
   14bd4:	0f 90       	pop	r0
   14bd6:	0f 90       	pop	r0
   14bd8:	0f 90       	pop	r0
   14bda:	86 01       	movw	r16, r12
   14bdc:	0e 15       	cp	r16, r14
   14bde:	1f 05       	cpc	r17, r15
   14be0:	a1 f0       	breq	.+40     	; 0x14c0a <SS80_Transparent_State+0x20e>
   14be2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14be6:	80 ff       	sbrs	r24, 0
   14be8:	10 c0       	rjmp	.+32     	; 0x14c0a <SS80_Transparent_State+0x20e>
   14bea:	ff 92       	push	r15
   14bec:	ef 92       	push	r14
   14bee:	1f 93       	push	r17
   14bf0:	0f 93       	push	r16
   14bf2:	85 eb       	ldi	r24, 0xB5	; 181
   14bf4:	99 e1       	ldi	r25, 0x19	; 25
   14bf6:	1f 92       	push	r1
   14bf8:	9f 93       	push	r25
   14bfa:	8f 93       	push	r24
   14bfc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14c00:	0f b6       	in	r0, 0x3f	; 63
   14c02:	f8 94       	cli
   14c04:	de bf       	out	0x3e, r29	; 62
   14c06:	0f be       	out	0x3f, r0	; 63
   14c08:	cd bf       	out	0x3d, r28	; 61
   14c0a:	89 81       	ldd	r24, Y+1	; 0x01
   14c0c:	9a 81       	ldd	r25, Y+2	; 0x02
   14c0e:	88 27       	eor	r24, r24
   14c10:	90 7d       	andi	r25, 0xD0	; 208
   14c12:	02 c0       	rjmp	.+4      	; 0x14c18 <SS80_Transparent_State+0x21c>
   14c14:	80 e0       	ldi	r24, 0x00	; 0
   14c16:	90 e0       	ldi	r25, 0x00	; 0
   14c18:	22 96       	adiw	r28, 0x02	; 2
   14c1a:	ea e0       	ldi	r30, 0x0A	; 10
   14c1c:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00014c20 <SS80_error_return>:
   14c20:	a3 e0       	ldi	r26, 0x03	; 3
   14c22:	b0 e0       	ldi	r27, 0x00	; 0
   14c24:	e6 e1       	ldi	r30, 0x16	; 22
   14c26:	f6 ea       	ldi	r31, 0xA6	; 166
   14c28:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   14c2c:	80 e0       	ldi	r24, 0x00	; 0
   14c2e:	91 e0       	ldi	r25, 0x01	; 1
   14c30:	9a 83       	std	Y+2, r25	; 0x02
   14c32:	89 83       	std	Y+1, r24	; 0x01
   14c34:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14c38:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14c3c:	81 e0       	ldi	r24, 0x01	; 1
   14c3e:	82 83       	std	Z+2, r24	; 0x02
   14c40:	8b 83       	std	Y+3, r24	; 0x03
   14c42:	ae 01       	movw	r20, r28
   14c44:	4f 5f       	subi	r20, 0xFF	; 255
   14c46:	5f 4f       	sbci	r21, 0xFF	; 255
   14c48:	61 e0       	ldi	r22, 0x01	; 1
   14c4a:	70 e0       	ldi	r23, 0x00	; 0
   14c4c:	ce 01       	movw	r24, r28
   14c4e:	03 96       	adiw	r24, 0x03	; 3
   14c50:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   14c54:	01 97       	sbiw	r24, 0x01	; 1
   14c56:	99 f0       	breq	.+38     	; 0x14c7e <SS80_error_return+0x5e>
   14c58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14c5c:	80 ff       	sbrs	r24, 0
   14c5e:	0a c0       	rjmp	.+20     	; 0x14c74 <SS80_error_return+0x54>
   14c60:	87 ee       	ldi	r24, 0xE7	; 231
   14c62:	98 e1       	ldi	r25, 0x18	; 24
   14c64:	1f 92       	push	r1
   14c66:	9f 93       	push	r25
   14c68:	8f 93       	push	r24
   14c6a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14c6e:	0f 90       	pop	r0
   14c70:	0f 90       	pop	r0
   14c72:	0f 90       	pop	r0
   14c74:	89 81       	ldd	r24, Y+1	; 0x01
   14c76:	9a 81       	ldd	r25, Y+2	; 0x02
   14c78:	88 27       	eor	r24, r24
   14c7a:	90 7d       	andi	r25, 0xD0	; 208
   14c7c:	07 c0       	rjmp	.+14     	; 0x14c8c <SS80_error_return+0x6c>
   14c7e:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14c82:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14c86:	12 82       	std	Z+2, r1	; 0x02
   14c88:	80 e0       	ldi	r24, 0x00	; 0
   14c8a:	90 e0       	ldi	r25, 0x00	; 0
   14c8c:	23 96       	adiw	r28, 0x03	; 3
   14c8e:	e2 e0       	ldi	r30, 0x02	; 2
   14c90:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00014c94 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   14c94:	ac e0       	ldi	r26, 0x0C	; 12
   14c96:	b0 e0       	ldi	r27, 0x00	; 0
   14c98:	e0 e5       	ldi	r30, 0x50	; 80
   14c9a:	f6 ea       	ldi	r31, 0xA6	; 166
   14c9c:	0c 94 1c eb 	jmp	0x1d638	; 0x1d638 <__prologue_saves__+0x2>
   14ca0:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14ca4:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14ca8:	27 81       	ldd	r18, Z+7	; 0x07
   14caa:	30 85       	ldd	r19, Z+8	; 0x08
   14cac:	41 85       	ldd	r20, Z+9	; 0x09
   14cae:	52 85       	ldd	r21, Z+10	; 0x0a
   14cb0:	a0 91 a4 19 	lds	r26, 0x19A4	; 0x8019a4 <SS80p>
   14cb4:	b0 91 a5 19 	lds	r27, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14cb8:	9f 96       	adiw	r26, 0x2f	; 47
   14cba:	0d 90       	ld	r0, X+
   14cbc:	bc 91       	ld	r27, X
   14cbe:	a0 2d       	mov	r26, r0
   14cc0:	12 82       	std	Z+2, r1	; 0x02
   14cc2:	1a 82       	std	Y+2, r1	; 0x02
   14cc4:	19 82       	std	Y+1, r1	; 0x01
   14cc6:	54 98       	cbi	0x0a, 4	; 10
   14cc8:	4c 99       	sbic	0x09, 4	; 9
   14cca:	03 c0       	rjmp	.+6      	; 0x14cd2 <SS80_locate_and_read+0x3e>
   14ccc:	80 e0       	ldi	r24, 0x00	; 0
   14cce:	90 e1       	ldi	r25, 0x10	; 16
   14cd0:	45 c1       	rjmp	.+650    	; 0x14f5c <SS80_locate_and_read+0x2c8>
   14cd2:	0e 94 fb ea 	call	0x1d5f6	; 0x1d5f6 <__muluhisi3>
   14cd6:	4b 01       	movw	r8, r22
   14cd8:	5c 01       	movw	r10, r24
   14cda:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14cde:	85 ff       	sbrs	r24, 5
   14ce0:	1c c0       	rjmp	.+56     	; 0x14d1a <SS80_locate_and_read+0x86>
   14ce2:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14ce6:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14cea:	86 85       	ldd	r24, Z+14	; 0x0e
   14cec:	8f 93       	push	r24
   14cee:	85 85       	ldd	r24, Z+13	; 0x0d
   14cf0:	8f 93       	push	r24
   14cf2:	84 85       	ldd	r24, Z+12	; 0x0c
   14cf4:	8f 93       	push	r24
   14cf6:	83 85       	ldd	r24, Z+11	; 0x0b
   14cf8:	8f 93       	push	r24
   14cfa:	bf 92       	push	r11
   14cfc:	af 92       	push	r10
   14cfe:	9f 92       	push	r9
   14d00:	8f 92       	push	r8
   14d02:	8b ed       	ldi	r24, 0xDB	; 219
   14d04:	9f e1       	ldi	r25, 0x1F	; 31
   14d06:	1f 92       	push	r1
   14d08:	9f 93       	push	r25
   14d0a:	8f 93       	push	r24
   14d0c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14d10:	0f b6       	in	r0, 0x3f	; 63
   14d12:	f8 94       	cli
   14d14:	de bf       	out	0x3e, r29	; 62
   14d16:	0f be       	out	0x3f, r0	; 63
   14d18:	cd bf       	out	0x3d, r28	; 61
   14d1a:	17 db       	rcall	.-2514   	; 0x1434a <SS80_cmd_seek>
   14d1c:	89 2b       	or	r24, r25
   14d1e:	09 f0       	breq	.+2      	; 0x14d22 <SS80_locate_and_read+0x8e>
   14d20:	af c0       	rjmp	.+350    	; 0x14e80 <SS80_locate_and_read+0x1ec>
   14d22:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14d26:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14d2a:	43 84       	ldd	r4, Z+11	; 0x0b
   14d2c:	54 84       	ldd	r5, Z+12	; 0x0c
   14d2e:	65 84       	ldd	r6, Z+13	; 0x0d
   14d30:	76 84       	ldd	r7, Z+14	; 0x0e
   14d32:	1b 82       	std	Y+3, r1	; 0x03
   14d34:	1c 82       	std	Y+4, r1	; 0x04
   14d36:	1d 82       	std	Y+5, r1	; 0x05
   14d38:	1e 82       	std	Y+6, r1	; 0x06
   14d3a:	8d eb       	ldi	r24, 0xBD	; 189
   14d3c:	9f e1       	ldi	r25, 0x1F	; 31
   14d3e:	9c 01       	movw	r18, r24
   14d40:	40 e0       	ldi	r20, 0x00	; 0
   14d42:	2f 83       	std	Y+7, r18	; 0x07
   14d44:	38 87       	std	Y+8, r19	; 0x08
   14d46:	49 87       	std	Y+9, r20	; 0x09
   14d48:	33 24       	eor	r3, r3
   14d4a:	33 94       	inc	r3
   14d4c:	8c e8       	ldi	r24, 0x8C	; 140
   14d4e:	9f e1       	ldi	r25, 0x1F	; 31
   14d50:	9c 01       	movw	r18, r24
   14d52:	40 e0       	ldi	r20, 0x00	; 0
   14d54:	2a 87       	std	Y+10, r18	; 0x0a
   14d56:	3b 87       	std	Y+11, r19	; 0x0b
   14d58:	4c 87       	std	Y+12, r20	; 0x0c
   14d5a:	34 c0       	rjmp	.+104    	; 0x14dc4 <SS80_locate_and_read+0x130>
   14d5c:	86 fd       	sbrc	r24, 6
   14d5e:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   14d62:	ae 01       	movw	r20, r28
   14d64:	4f 5f       	subi	r20, 0xFF	; 255
   14d66:	5f 4f       	sbci	r21, 0xFF	; 255
   14d68:	b6 01       	movw	r22, r12
   14d6a:	8d ee       	ldi	r24, 0xED	; 237
   14d6c:	9c e1       	ldi	r25, 0x1C	; 28
   14d6e:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   14d72:	8c 01       	movw	r16, r24
   14d74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14d78:	86 ff       	sbrs	r24, 6
   14d7a:	04 c0       	rjmp	.+8      	; 0x14d84 <SS80_locate_and_read+0xf0>
   14d7c:	84 e1       	ldi	r24, 0x14	; 20
   14d7e:	9e e0       	ldi	r25, 0x0E	; 14
   14d80:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   14d84:	c0 16       	cp	r12, r16
   14d86:	d1 06       	cpc	r13, r17
   14d88:	09 f0       	breq	.+2      	; 0x14d8c <SS80_locate_and_read+0xf8>
   14d8a:	83 c0       	rjmp	.+262    	; 0x14e92 <SS80_locate_and_read+0x1fe>
   14d8c:	0d 2c       	mov	r0, r13
   14d8e:	00 0c       	add	r0, r0
   14d90:	ee 08       	sbc	r14, r14
   14d92:	ff 08       	sbc	r15, r15
   14d94:	8c 0c       	add	r8, r12
   14d96:	9d 1c       	adc	r9, r13
   14d98:	ae 1c       	adc	r10, r14
   14d9a:	bf 1c       	adc	r11, r15
   14d9c:	01 2e       	mov	r0, r17
   14d9e:	00 0c       	add	r0, r0
   14da0:	22 0b       	sbc	r18, r18
   14da2:	33 0b       	sbc	r19, r19
   14da4:	8b 81       	ldd	r24, Y+3	; 0x03
   14da6:	9c 81       	ldd	r25, Y+4	; 0x04
   14da8:	ad 81       	ldd	r26, Y+5	; 0x05
   14daa:	be 81       	ldd	r27, Y+6	; 0x06
   14dac:	80 0f       	add	r24, r16
   14dae:	91 1f       	adc	r25, r17
   14db0:	a2 1f       	adc	r26, r18
   14db2:	b3 1f       	adc	r27, r19
   14db4:	8b 83       	std	Y+3, r24	; 0x03
   14db6:	9c 83       	std	Y+4, r25	; 0x04
   14db8:	ad 83       	std	Y+5, r26	; 0x05
   14dba:	be 83       	std	Y+6, r27	; 0x06
   14dbc:	40 1a       	sub	r4, r16
   14dbe:	51 0a       	sbc	r5, r17
   14dc0:	62 0a       	sbc	r6, r18
   14dc2:	73 0a       	sbc	r7, r19
   14dc4:	41 14       	cp	r4, r1
   14dc6:	51 04       	cpc	r5, r1
   14dc8:	61 04       	cpc	r6, r1
   14dca:	71 04       	cpc	r7, r1
   14dcc:	09 f4       	brne	.+2      	; 0x14dd0 <SS80_locate_and_read+0x13c>
   14dce:	93 c0       	rjmp	.+294    	; 0x14ef6 <SS80_locate_and_read+0x262>
   14dd0:	54 98       	cbi	0x0a, 4	; 10
   14dd2:	4c 9b       	sbis	0x09, 4	; 9
   14dd4:	7b cf       	rjmp	.-266    	; 0x14ccc <SS80_locate_and_read+0x38>
   14dd6:	31 e0       	ldi	r19, 0x01	; 1
   14dd8:	43 16       	cp	r4, r19
   14dda:	53 06       	cpc	r5, r19
   14ddc:	61 04       	cpc	r6, r1
   14dde:	71 04       	cpc	r7, r1
   14de0:	08 f4       	brcc	.+2      	; 0x14de4 <SS80_locate_and_read+0x150>
   14de2:	50 c0       	rjmp	.+160    	; 0x14e84 <SS80_locate_and_read+0x1f0>
   14de4:	1a 82       	std	Y+2, r1	; 0x02
   14de6:	19 82       	std	Y+1, r1	; 0x01
   14de8:	c1 2c       	mov	r12, r1
   14dea:	dd 24       	eor	r13, r13
   14dec:	d3 94       	inc	r13
   14dee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14df2:	86 fd       	sbrc	r24, 6
   14df4:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   14df8:	e0 90 a2 19 	lds	r14, 0x19A2	; 0x8019a2 <SS80s>
   14dfc:	f0 90 a3 19 	lds	r15, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14e00:	43 e0       	ldi	r20, 0x03	; 3
   14e02:	e4 0e       	add	r14, r20
   14e04:	f1 1c       	adc	r15, r1
   14e06:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <SS80p>
   14e0a:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14e0e:	86 01       	movw	r16, r12
   14e10:	2d ee       	ldi	r18, 0xED	; 237
   14e12:	3c e1       	ldi	r19, 0x1C	; 28
   14e14:	b5 01       	movw	r22, r10
   14e16:	a4 01       	movw	r20, r8
   14e18:	02 96       	adiw	r24, 0x02	; 2
   14e1a:	0e 94 89 8c 	call	0x11912	; 0x11912 <dbf_open_read>
   14e1e:	8c 01       	movw	r16, r24
   14e20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e24:	86 ff       	sbrs	r24, 6
   14e26:	04 c0       	rjmp	.+8      	; 0x14e30 <SS80_locate_and_read+0x19c>
   14e28:	8a e0       	ldi	r24, 0x0A	; 10
   14e2a:	9e e0       	ldi	r25, 0x0E	; 14
   14e2c:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   14e30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e34:	85 ff       	sbrs	r24, 5
   14e36:	0e c0       	rjmp	.+28     	; 0x14e54 <SS80_locate_and_read+0x1c0>
   14e38:	1f 93       	push	r17
   14e3a:	0f 93       	push	r16
   14e3c:	1f 92       	push	r1
   14e3e:	88 85       	ldd	r24, Y+8	; 0x08
   14e40:	8f 93       	push	r24
   14e42:	9f 81       	ldd	r25, Y+7	; 0x07
   14e44:	9f 93       	push	r25
   14e46:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14e4a:	0f 90       	pop	r0
   14e4c:	0f 90       	pop	r0
   14e4e:	0f 90       	pop	r0
   14e50:	0f 90       	pop	r0
   14e52:	0f 90       	pop	r0
   14e54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e58:	17 ff       	sbrs	r17, 7
   14e5a:	80 cf       	rjmp	.-256    	; 0x14d5c <SS80_locate_and_read+0xc8>
   14e5c:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14e60:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14e64:	91 e0       	ldi	r25, 0x01	; 1
   14e66:	92 83       	std	Z+2, r25	; 0x02
   14e68:	80 ff       	sbrs	r24, 0
   14e6a:	0a c0       	rjmp	.+20     	; 0x14e80 <SS80_locate_and_read+0x1ec>
   14e6c:	85 ea       	ldi	r24, 0xA5	; 165
   14e6e:	9f e1       	ldi	r25, 0x1F	; 31
   14e70:	1f 92       	push	r1
   14e72:	9f 93       	push	r25
   14e74:	8f 93       	push	r24
   14e76:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14e7a:	0f 90       	pop	r0
   14e7c:	0f 90       	pop	r0
   14e7e:	0f 90       	pop	r0
   14e80:	cf de       	rcall	.-610    	; 0x14c20 <SS80_error_return>
   14e82:	6c c0       	rjmp	.+216    	; 0x14f5c <SS80_locate_and_read+0x2c8>
   14e84:	62 01       	movw	r12, r4
   14e86:	89 81       	ldd	r24, Y+1	; 0x01
   14e88:	9a 81       	ldd	r25, Y+2	; 0x02
   14e8a:	91 60       	ori	r25, 0x01	; 1
   14e8c:	9a 83       	std	Y+2, r25	; 0x02
   14e8e:	89 83       	std	Y+1, r24	; 0x01
   14e90:	ae cf       	rjmp	.-164    	; 0x14dee <SS80_locate_and_read+0x15a>
   14e92:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14e96:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14e9a:	32 82       	std	Z+2, r3	; 0x02
   14e9c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14ea0:	80 ff       	sbrs	r24, 0
   14ea2:	0a c0       	rjmp	.+20     	; 0x14eb8 <SS80_locate_and_read+0x224>
   14ea4:	1f 92       	push	r1
   14ea6:	ab 85       	ldd	r26, Y+11	; 0x0b
   14ea8:	af 93       	push	r26
   14eaa:	ba 85       	ldd	r27, Y+10	; 0x0a
   14eac:	bf 93       	push	r27
   14eae:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14eb2:	0f 90       	pop	r0
   14eb4:	0f 90       	pop	r0
   14eb6:	0f 90       	pop	r0
   14eb8:	89 81       	ldd	r24, Y+1	; 0x01
   14eba:	9a 81       	ldd	r25, Y+2	; 0x02
   14ebc:	88 27       	eor	r24, r24
   14ebe:	90 7d       	andi	r25, 0xD0	; 208
   14ec0:	89 2b       	or	r24, r25
   14ec2:	09 f4       	brne	.+2      	; 0x14ec6 <SS80_locate_and_read+0x232>
   14ec4:	63 cf       	rjmp	.-314    	; 0x14d8c <SS80_locate_and_read+0xf8>
   14ec6:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14eca:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14ece:	83 81       	ldd	r24, Z+3	; 0x03
   14ed0:	94 81       	ldd	r25, Z+4	; 0x04
   14ed2:	80 62       	ori	r24, 0x20	; 32
   14ed4:	94 83       	std	Z+4, r25	; 0x04
   14ed6:	83 83       	std	Z+3, r24	; 0x03
   14ed8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14edc:	80 ff       	sbrs	r24, 0
   14ede:	23 c0       	rjmp	.+70     	; 0x14f26 <SS80_locate_and_read+0x292>
   14ee0:	87 e6       	ldi	r24, 0x67	; 103
   14ee2:	9f e1       	ldi	r25, 0x1F	; 31
   14ee4:	1f 92       	push	r1
   14ee6:	9f 93       	push	r25
   14ee8:	8f 93       	push	r24
   14eea:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14eee:	0f 90       	pop	r0
   14ef0:	0f 90       	pop	r0
   14ef2:	0f 90       	pop	r0
   14ef4:	18 c0       	rjmp	.+48     	; 0x14f26 <SS80_locate_and_read+0x292>
   14ef6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14efa:	85 ff       	sbrs	r24, 5
   14efc:	14 c0       	rjmp	.+40     	; 0x14f26 <SS80_locate_and_read+0x292>
   14efe:	9e 81       	ldd	r25, Y+6	; 0x06
   14f00:	9f 93       	push	r25
   14f02:	ad 81       	ldd	r26, Y+5	; 0x05
   14f04:	af 93       	push	r26
   14f06:	bc 81       	ldd	r27, Y+4	; 0x04
   14f08:	bf 93       	push	r27
   14f0a:	eb 81       	ldd	r30, Y+3	; 0x03
   14f0c:	ef 93       	push	r30
   14f0e:	8f e3       	ldi	r24, 0x3F	; 63
   14f10:	9f e1       	ldi	r25, 0x1F	; 31
   14f12:	1f 92       	push	r1
   14f14:	9f 93       	push	r25
   14f16:	8f 93       	push	r24
   14f18:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14f1c:	0f b6       	in	r0, 0x3f	; 63
   14f1e:	f8 94       	cli
   14f20:	de bf       	out	0x3e, r29	; 62
   14f22:	0f be       	out	0x3f, r0	; 63
   14f24:	cd bf       	out	0x3d, r28	; 61
   14f26:	00 91 a2 19 	lds	r16, 0x19A2	; 0x8019a2 <SS80s>
   14f2a:	10 91 a3 19 	lds	r17, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14f2e:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14f32:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14f36:	27 a5       	ldd	r18, Z+47	; 0x2f
   14f38:	30 a9       	ldd	r19, Z+48	; 0x30
   14f3a:	40 e0       	ldi	r20, 0x00	; 0
   14f3c:	50 e0       	ldi	r21, 0x00	; 0
   14f3e:	c5 01       	movw	r24, r10
   14f40:	b4 01       	movw	r22, r8
   14f42:	0e 94 ae ea 	call	0x1d55c	; 0x1d55c <__udivmodsi4>
   14f46:	d8 01       	movw	r26, r16
   14f48:	17 96       	adiw	r26, 0x07	; 7
   14f4a:	2d 93       	st	X+, r18
   14f4c:	3d 93       	st	X+, r19
   14f4e:	4d 93       	st	X+, r20
   14f50:	5c 93       	st	X, r21
   14f52:	1a 97       	sbiw	r26, 0x0a	; 10
   14f54:	89 81       	ldd	r24, Y+1	; 0x01
   14f56:	9a 81       	ldd	r25, Y+2	; 0x02
   14f58:	88 27       	eor	r24, r24
   14f5a:	90 7d       	andi	r25, 0xD0	; 208
   14f5c:	2c 96       	adiw	r28, 0x0c	; 12
   14f5e:	e1 e1       	ldi	r30, 0x11	; 17
   14f60:	0c 94 38 eb 	jmp	0x1d670	; 0x1d670 <__epilogue_restores__+0x2>

00014f64 <SS80_Execute_State>:
   14f64:	cf 93       	push	r28
   14f66:	df 93       	push	r29
   14f68:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14f6c:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   14f70:	81 81       	ldd	r24, Z+1	; 0x01
   14f72:	90 e0       	ldi	r25, 0x00	; 0
   14f74:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   14f78:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14f7c:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14f80:	80 81       	ld	r24, Z
   14f82:	91 81       	ldd	r25, Z+1	; 0x01
   14f84:	82 30       	cpi	r24, 0x02	; 2
   14f86:	91 05       	cpc	r25, r1
   14f88:	89 f0       	breq	.+34     	; 0x14fac <SS80_Execute_State+0x48>
   14f8a:	3c f4       	brge	.+14     	; 0x14f9a <SS80_Execute_State+0x36>
   14f8c:	00 97       	sbiw	r24, 0x00	; 0
   14f8e:	91 f1       	breq	.+100    	; 0x14ff4 <SS80_Execute_State+0x90>
   14f90:	81 30       	cpi	r24, 0x01	; 1
   14f92:	91 05       	cpc	r25, r1
   14f94:	b9 f4       	brne	.+46     	; 0x14fc4 <SS80_Execute_State+0x60>
   14f96:	7e de       	rcall	.-772    	; 0x14c94 <SS80_locate_and_read>
   14f98:	0d c0       	rjmp	.+26     	; 0x14fb4 <SS80_Execute_State+0x50>
   14f9a:	83 30       	cpi	r24, 0x03	; 3
   14f9c:	91 05       	cpc	r25, r1
   14f9e:	41 f0       	breq	.+16     	; 0x14fb0 <SS80_Execute_State+0x4c>
   14fa0:	84 30       	cpi	r24, 0x04	; 4
   14fa2:	91 05       	cpc	r25, r1
   14fa4:	79 f4       	brne	.+30     	; 0x14fc4 <SS80_Execute_State+0x60>
   14fa6:	0e 94 7b 9e 	call	0x13cf6	; 0x13cf6 <SS80_describe>
   14faa:	04 c0       	rjmp	.+8      	; 0x14fb4 <SS80_Execute_State+0x50>
   14fac:	4f da       	rcall	.-2914   	; 0x1444c <SS80_locate_and_write>
   14fae:	02 c0       	rjmp	.+4      	; 0x14fb4 <SS80_Execute_State+0x50>
   14fb0:	0e 94 fa 9d 	call	0x13bf4	; 0x13bf4 <SS80_send_status>
   14fb4:	ec 01       	movw	r28, r24
   14fb6:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14fba:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14fbe:	11 82       	std	Z+1, r1	; 0x01
   14fc0:	10 82       	st	Z, r1
   14fc2:	1a c0       	rjmp	.+52     	; 0x14ff8 <SS80_Execute_State+0x94>
   14fc4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   14fc8:	20 ff       	sbrs	r18, 0
   14fca:	0e c0       	rjmp	.+28     	; 0x14fe8 <SS80_Execute_State+0x84>
   14fcc:	9f 93       	push	r25
   14fce:	8f 93       	push	r24
   14fd0:	83 e0       	ldi	r24, 0x03	; 3
   14fd2:	90 e2       	ldi	r25, 0x20	; 32
   14fd4:	1f 92       	push	r1
   14fd6:	9f 93       	push	r25
   14fd8:	8f 93       	push	r24
   14fda:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   14fde:	0f 90       	pop	r0
   14fe0:	0f 90       	pop	r0
   14fe2:	0f 90       	pop	r0
   14fe4:	0f 90       	pop	r0
   14fe6:	0f 90       	pop	r0
   14fe8:	e0 91 a2 19 	lds	r30, 0x19A2	; 0x8019a2 <SS80s>
   14fec:	f0 91 a3 19 	lds	r31, 0x19A3	; 0x8019a3 <SS80s+0x1>
   14ff0:	11 82       	std	Z+1, r1	; 0x01
   14ff2:	10 82       	st	Z, r1
   14ff4:	c0 e0       	ldi	r28, 0x00	; 0
   14ff6:	d0 e0       	ldi	r29, 0x00	; 0
   14ff8:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   14ffc:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   15000:	81 81       	ldd	r24, Z+1	; 0x01
   15002:	90 e0       	ldi	r25, 0x00	; 0
   15004:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   15008:	ce 01       	movw	r24, r28
   1500a:	df 91       	pop	r29
   1500c:	cf 91       	pop	r28
   1500e:	08 95       	ret

00015010 <SS80_COMMANDS>:
   15010:	1f 93       	push	r17
   15012:	cf 93       	push	r28
   15014:	df 93       	push	r29
   15016:	18 2f       	mov	r17, r24
   15018:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   1501c:	90 e0       	ldi	r25, 0x00	; 0
   1501e:	0e 94 f8 93 	call	0x127f0	; 0x127f0 <SS80_is_MTA>
   15022:	89 2b       	or	r24, r25
   15024:	19 f0       	breq	.+6      	; 0x1502c <SS80_COMMANDS+0x1c>
   15026:	15 36       	cpi	r17, 0x65	; 101
   15028:	19 f5       	brne	.+70     	; 0x15070 <SS80_COMMANDS+0x60>
   1502a:	09 c0       	rjmp	.+18     	; 0x1503e <SS80_COMMANDS+0x2e>
   1502c:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15030:	90 e0       	ldi	r25, 0x00	; 0
   15032:	0e 94 e7 93 	call	0x127ce	; 0x127ce <SS80_is_MLA>
   15036:	ec 01       	movw	r28, r24
   15038:	89 2b       	or	r24, r25
   1503a:	a9 f7       	brne	.-22     	; 0x15026 <SS80_COMMANDS+0x16>
   1503c:	ae c0       	rjmp	.+348    	; 0x1519a <SS80_COMMANDS+0x18a>
   1503e:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15042:	90 e0       	ldi	r25, 0x00	; 0
   15044:	0e 94 e7 93 	call	0x127ce	; 0x127ce <SS80_is_MLA>
   15048:	89 2b       	or	r24, r25
   1504a:	09 f4       	brne	.+2      	; 0x1504e <SS80_COMMANDS+0x3e>
   1504c:	a3 c0       	rjmp	.+326    	; 0x15194 <SS80_COMMANDS+0x184>
   1504e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15052:	85 ff       	sbrs	r24, 5
   15054:	0a c0       	rjmp	.+20     	; 0x1506a <SS80_COMMANDS+0x5a>
   15056:	81 ed       	ldi	r24, 0xD1	; 209
   15058:	98 e1       	ldi	r25, 0x18	; 24
   1505a:	1f 92       	push	r1
   1505c:	9f 93       	push	r25
   1505e:	8f 93       	push	r24
   15060:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15064:	0f 90       	pop	r0
   15066:	0f 90       	pop	r0
   15068:	0f 90       	pop	r0
   1506a:	0e 94 2d 9f 	call	0x13e5a	; 0x13e5a <SS80_Command_State>
   1506e:	73 c0       	rjmp	.+230    	; 0x15156 <SS80_COMMANDS+0x146>
   15070:	1e 36       	cpi	r17, 0x6E	; 110
   15072:	01 f5       	brne	.+64     	; 0x150b4 <SS80_COMMANDS+0xa4>
   15074:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15078:	90 e0       	ldi	r25, 0x00	; 0
   1507a:	0e 94 e7 93 	call	0x127ce	; 0x127ce <SS80_is_MLA>
   1507e:	89 2b       	or	r24, r25
   15080:	79 f0       	breq	.+30     	; 0x150a0 <SS80_COMMANDS+0x90>
   15082:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15086:	85 ff       	sbrs	r24, 5
   15088:	13 c0       	rjmp	.+38     	; 0x150b0 <SS80_COMMANDS+0xa0>
   1508a:	8b eb       	ldi	r24, 0xBB	; 187
   1508c:	98 e1       	ldi	r25, 0x18	; 24
   1508e:	1f 92       	push	r1
   15090:	9f 93       	push	r25
   15092:	8f 93       	push	r24
   15094:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15098:	0f 90       	pop	r0
   1509a:	0f 90       	pop	r0
   1509c:	0f 90       	pop	r0
   1509e:	08 c0       	rjmp	.+16     	; 0x150b0 <SS80_COMMANDS+0xa0>
   150a0:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   150a4:	90 e0       	ldi	r25, 0x00	; 0
   150a6:	0e 94 f8 93 	call	0x127f0	; 0x127f0 <SS80_is_MTA>
   150aa:	89 2b       	or	r24, r25
   150ac:	51 f7       	brne	.-44     	; 0x15082 <SS80_COMMANDS+0x72>
   150ae:	72 c0       	rjmp	.+228    	; 0x15194 <SS80_COMMANDS+0x184>
   150b0:	59 df       	rcall	.-334    	; 0x14f64 <SS80_Execute_State>
   150b2:	51 c0       	rjmp	.+162    	; 0x15156 <SS80_COMMANDS+0x146>
   150b4:	10 37       	cpi	r17, 0x70	; 112
   150b6:	b9 f5       	brne	.+110    	; 0x15126 <SS80_COMMANDS+0x116>
   150b8:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   150bc:	90 e0       	ldi	r25, 0x00	; 0
   150be:	0e 94 f8 93 	call	0x127f0	; 0x127f0 <SS80_is_MTA>
   150c2:	89 2b       	or	r24, r25
   150c4:	81 f0       	breq	.+32     	; 0x150e6 <SS80_COMMANDS+0xd6>
   150c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   150ca:	85 ff       	sbrs	r24, 5
   150cc:	0a c0       	rjmp	.+20     	; 0x150e2 <SS80_COMMANDS+0xd2>
   150ce:	86 ea       	ldi	r24, 0xA6	; 166
   150d0:	98 e1       	ldi	r25, 0x18	; 24
   150d2:	1f 92       	push	r1
   150d4:	9f 93       	push	r25
   150d6:	8f 93       	push	r24
   150d8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   150dc:	0f 90       	pop	r0
   150de:	0f 90       	pop	r0
   150e0:	0f 90       	pop	r0
   150e2:	4b db       	rcall	.-2410   	; 0x1477a <SS80_Report>
   150e4:	38 c0       	rjmp	.+112    	; 0x15156 <SS80_COMMANDS+0x146>
   150e6:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   150ea:	90 e0       	ldi	r25, 0x00	; 0
   150ec:	0e 94 e7 93 	call	0x127ce	; 0x127ce <SS80_is_MLA>
   150f0:	89 2b       	or	r24, r25
   150f2:	09 f4       	brne	.+2      	; 0x150f6 <SS80_COMMANDS+0xe6>
   150f4:	4f c0       	rjmp	.+158    	; 0x15194 <SS80_COMMANDS+0x184>
   150f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   150fa:	85 ff       	sbrs	r24, 5
   150fc:	0a c0       	rjmp	.+20     	; 0x15112 <SS80_COMMANDS+0x102>
   150fe:	87 e9       	ldi	r24, 0x97	; 151
   15100:	98 e1       	ldi	r25, 0x18	; 24
   15102:	1f 92       	push	r1
   15104:	9f 93       	push	r25
   15106:	8f 93       	push	r24
   15108:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1510c:	0f 90       	pop	r0
   1510e:	0f 90       	pop	r0
   15110:	0f 90       	pop	r0
   15112:	e0 91 a4 19 	lds	r30, 0x19A4	; 0x8019a4 <SS80p>
   15116:	f0 91 a5 19 	lds	r31, 0x19A5	; 0x8019a5 <SS80p+0x1>
   1511a:	81 81       	ldd	r24, Z+1	; 0x01
   1511c:	90 e0       	ldi	r25, 0x00	; 0
   1511e:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   15122:	18 dc       	rcall	.-2000   	; 0x14954 <SS80_Amigo_Clear>
   15124:	18 c0       	rjmp	.+48     	; 0x15156 <SS80_COMMANDS+0x146>
   15126:	12 37       	cpi	r17, 0x72	; 114
   15128:	c1 f4       	brne	.+48     	; 0x1515a <SS80_COMMANDS+0x14a>
   1512a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1512e:	90 e0       	ldi	r25, 0x00	; 0
   15130:	0e 94 e7 93 	call	0x127ce	; 0x127ce <SS80_is_MLA>
   15134:	89 2b       	or	r24, r25
   15136:	89 f0       	breq	.+34     	; 0x1515a <SS80_COMMANDS+0x14a>
   15138:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1513c:	85 ff       	sbrs	r24, 5
   1513e:	0a c0       	rjmp	.+20     	; 0x15154 <SS80_COMMANDS+0x144>
   15140:	83 e8       	ldi	r24, 0x83	; 131
   15142:	98 e1       	ldi	r25, 0x18	; 24
   15144:	1f 92       	push	r1
   15146:	9f 93       	push	r25
   15148:	8f 93       	push	r24
   1514a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1514e:	0f 90       	pop	r0
   15150:	0f 90       	pop	r0
   15152:	0f 90       	pop	r0
   15154:	53 dc       	rcall	.-1882   	; 0x149fc <SS80_Transparent_State>
   15156:	ec 01       	movw	r28, r24
   15158:	3d c0       	rjmp	.+122    	; 0x151d4 <SS80_COMMANDS+0x1c4>
   1515a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   1515e:	80 ff       	sbrs	r24, 0
   15160:	19 c0       	rjmp	.+50     	; 0x15194 <SS80_COMMANDS+0x184>
   15162:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15166:	1f 92       	push	r1
   15168:	8f 93       	push	r24
   1516a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1516e:	1f 92       	push	r1
   15170:	8f 93       	push	r24
   15172:	1f 92       	push	r1
   15174:	1f 93       	push	r17
   15176:	8f e4       	ldi	r24, 0x4F	; 79
   15178:	98 e1       	ldi	r25, 0x18	; 24
   1517a:	1f 92       	push	r1
   1517c:	9f 93       	push	r25
   1517e:	8f 93       	push	r24
   15180:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15184:	8d b7       	in	r24, 0x3d	; 61
   15186:	9e b7       	in	r25, 0x3e	; 62
   15188:	09 96       	adiw	r24, 0x09	; 9
   1518a:	0f b6       	in	r0, 0x3f	; 63
   1518c:	f8 94       	cli
   1518e:	9e bf       	out	0x3e, r25	; 62
   15190:	0f be       	out	0x3f, r0	; 63
   15192:	8d bf       	out	0x3d, r24	; 61
   15194:	c0 e0       	ldi	r28, 0x00	; 0
   15196:	d0 e0       	ldi	r29, 0x00	; 0
   15198:	1d c0       	rjmp	.+58     	; 0x151d4 <SS80_COMMANDS+0x1c4>
   1519a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1519e:	80 ff       	sbrs	r24, 0
   151a0:	f9 cf       	rjmp	.-14     	; 0x15194 <SS80_COMMANDS+0x184>
   151a2:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   151a6:	1f 92       	push	r1
   151a8:	8f 93       	push	r24
   151aa:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   151ae:	1f 92       	push	r1
   151b0:	8f 93       	push	r24
   151b2:	1f 92       	push	r1
   151b4:	1f 93       	push	r17
   151b6:	8b e1       	ldi	r24, 0x1B	; 27
   151b8:	98 e1       	ldi	r25, 0x18	; 24
   151ba:	1f 92       	push	r1
   151bc:	9f 93       	push	r25
   151be:	8f 93       	push	r24
   151c0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   151c4:	8d b7       	in	r24, 0x3d	; 61
   151c6:	9e b7       	in	r25, 0x3e	; 62
   151c8:	09 96       	adiw	r24, 0x09	; 9
   151ca:	0f b6       	in	r0, 0x3f	; 63
   151cc:	f8 94       	cli
   151ce:	9e bf       	out	0x3e, r25	; 62
   151d0:	0f be       	out	0x3f, r0	; 63
   151d2:	8d bf       	out	0x3d, r24	; 61
   151d4:	ce 01       	movw	r24, r28
   151d6:	df 91       	pop	r29
   151d8:	cf 91       	pop	r28
   151da:	1f 91       	pop	r17
   151dc:	08 95       	ret

000151de <amigo_overflow_check>:
   151de:	cf 92       	push	r12
   151e0:	df 92       	push	r13
   151e2:	ef 92       	push	r14
   151e4:	0f 93       	push	r16
   151e6:	1f 93       	push	r17
   151e8:	cf 93       	push	r28
   151ea:	df 93       	push	r29
   151ec:	ec 01       	movw	r28, r24
   151ee:	8b 01       	movw	r16, r22
   151f0:	80 e0       	ldi	r24, 0x00	; 0
   151f2:	90 e0       	ldi	r25, 0x00	; 0
   151f4:	22 ef       	ldi	r18, 0xF2	; 242
   151f6:	37 e2       	ldi	r19, 0x27	; 39
   151f8:	69 01       	movw	r12, r18
   151fa:	2d 81       	ldd	r18, Y+5	; 0x05
   151fc:	30 e0       	ldi	r19, 0x00	; 0
   151fe:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15202:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15206:	47 a1       	ldd	r20, Z+39	; 0x27
   15208:	50 a5       	ldd	r21, Z+40	; 0x28
   1520a:	24 17       	cp	r18, r20
   1520c:	35 07       	cpc	r19, r21
   1520e:	7c f1       	brlt	.+94     	; 0x1526e <amigo_overflow_check+0x90>
   15210:	1d 82       	std	Y+5, r1	; 0x05
   15212:	2c 81       	ldd	r18, Y+4	; 0x04
   15214:	2f 5f       	subi	r18, 0xFF	; 255
   15216:	2c 83       	std	Y+4, r18	; 0x04
   15218:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   1521c:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15220:	2c 81       	ldd	r18, Y+4	; 0x04
   15222:	30 e0       	ldi	r19, 0x00	; 0
   15224:	41 a5       	ldd	r20, Z+41	; 0x29
   15226:	52 a5       	ldd	r21, Z+42	; 0x2a
   15228:	24 17       	cp	r18, r20
   1522a:	35 07       	cpc	r19, r21
   1522c:	34 f3       	brlt	.-52     	; 0x151fa <amigo_overflow_check+0x1c>
   1522e:	1c 82       	std	Y+4, r1	; 0x04
   15230:	2b 81       	ldd	r18, Y+3	; 0x03
   15232:	2f 5f       	subi	r18, 0xFF	; 255
   15234:	2b 83       	std	Y+3, r18	; 0x03
   15236:	30 e0       	ldi	r19, 0x00	; 0
   15238:	43 a5       	ldd	r20, Z+43	; 0x2b
   1523a:	54 a5       	ldd	r21, Z+44	; 0x2c
   1523c:	24 17       	cp	r18, r20
   1523e:	35 07       	cpc	r19, r21
   15240:	5c f3       	brlt	.-42     	; 0x15218 <amigo_overflow_check+0x3a>
   15242:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15246:	80 ff       	sbrs	r24, 0
   15248:	0f c0       	rjmp	.+30     	; 0x15268 <amigo_overflow_check+0x8a>
   1524a:	01 15       	cp	r16, r1
   1524c:	11 05       	cpc	r17, r1
   1524e:	61 f0       	breq	.+24     	; 0x15268 <amigo_overflow_check+0x8a>
   15250:	1f 93       	push	r17
   15252:	0f 93       	push	r16
   15254:	1f 92       	push	r1
   15256:	df 92       	push	r13
   15258:	cf 92       	push	r12
   1525a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1525e:	0f 90       	pop	r0
   15260:	0f 90       	pop	r0
   15262:	0f 90       	pop	r0
   15264:	0f 90       	pop	r0
   15266:	0f 90       	pop	r0
   15268:	81 e0       	ldi	r24, 0x01	; 1
   1526a:	90 e0       	ldi	r25, 0x00	; 0
   1526c:	d5 cf       	rjmp	.-86     	; 0x15218 <amigo_overflow_check+0x3a>
   1526e:	df 91       	pop	r29
   15270:	cf 91       	pop	r28
   15272:	1f 91       	pop	r17
   15274:	0f 91       	pop	r16
   15276:	ef 90       	pop	r14
   15278:	df 90       	pop	r13
   1527a:	cf 90       	pop	r12
   1527c:	08 95       	ret

0001527e <amigo_chs_to_logical>:
   1527e:	a0 e0       	ldi	r26, 0x00	; 0
   15280:	b0 e0       	ldi	r27, 0x00	; 0
   15282:	e5 e4       	ldi	r30, 0x45	; 69
   15284:	f9 ea       	ldi	r31, 0xA9	; 169
   15286:	0c 94 24 eb 	jmp	0x1d648	; 0x1d648 <__prologue_saves__+0x12>
   1528a:	dc 01       	movw	r26, r24
   1528c:	d6 2f       	mov	r29, r22
   1528e:	17 2f       	mov	r17, r23
   15290:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15294:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15298:	87 a1       	ldd	r24, Z+39	; 0x27
   1529a:	90 a5       	ldd	r25, Z+40	; 0x28
   1529c:	14 96       	adiw	r26, 0x04	; 4
   1529e:	cc 91       	ld	r28, X
   152a0:	14 97       	sbiw	r26, 0x04	; 4
   152a2:	c8 9f       	mul	r28, r24
   152a4:	90 01       	movw	r18, r0
   152a6:	c9 9f       	mul	r28, r25
   152a8:	30 0d       	add	r19, r0
   152aa:	11 24       	eor	r1, r1
   152ac:	a9 01       	movw	r20, r18
   152ae:	33 0f       	add	r19, r19
   152b0:	66 0b       	sbc	r22, r22
   152b2:	77 0b       	sbc	r23, r23
   152b4:	13 96       	adiw	r26, 0x03	; 3
   152b6:	0c 91       	ld	r16, X
   152b8:	13 97       	sbiw	r26, 0x03	; 3
   152ba:	21 a5       	ldd	r18, Z+41	; 0x29
   152bc:	32 a5       	ldd	r19, Z+42	; 0x2a
   152be:	82 9f       	mul	r24, r18
   152c0:	70 01       	movw	r14, r0
   152c2:	83 9f       	mul	r24, r19
   152c4:	f0 0c       	add	r15, r0
   152c6:	92 9f       	mul	r25, r18
   152c8:	f0 0c       	add	r15, r0
   152ca:	11 24       	eor	r1, r1
   152cc:	0e 9d       	mul	r16, r14
   152ce:	90 01       	movw	r18, r0
   152d0:	0f 9d       	mul	r16, r15
   152d2:	30 0d       	add	r19, r0
   152d4:	11 24       	eor	r1, r1
   152d6:	69 01       	movw	r12, r18
   152d8:	33 0f       	add	r19, r19
   152da:	ee 08       	sbc	r14, r14
   152dc:	ff 08       	sbc	r15, r15
   152de:	4c 0d       	add	r20, r12
   152e0:	5d 1d       	adc	r21, r13
   152e2:	6e 1d       	adc	r22, r14
   152e4:	7f 1d       	adc	r23, r15
   152e6:	15 96       	adiw	r26, 0x05	; 5
   152e8:	bc 90       	ld	r11, X
   152ea:	9a 01       	movw	r18, r20
   152ec:	ab 01       	movw	r20, r22
   152ee:	2b 0d       	add	r18, r11
   152f0:	31 1d       	adc	r19, r1
   152f2:	41 1d       	adc	r20, r1
   152f4:	51 1d       	adc	r21, r1
   152f6:	a5 a1       	ldd	r26, Z+37	; 0x25
   152f8:	b6 a1       	ldd	r27, Z+38	; 0x26
   152fa:	0e 94 05 eb 	call	0x1d60a	; 0x1d60a <__mulshisi3>
   152fe:	6b 01       	movw	r12, r22
   15300:	7c 01       	movw	r14, r24
   15302:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15306:	85 ff       	sbrs	r24, 5
   15308:	22 c0       	rjmp	.+68     	; 0x1534e <amigo_chs_to_logical+0xd0>
   1530a:	1f 92       	push	r1
   1530c:	bf 92       	push	r11
   1530e:	1f 92       	push	r1
   15310:	cf 93       	push	r28
   15312:	1f 92       	push	r1
   15314:	0f 93       	push	r16
   15316:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1531a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   1531e:	81 81       	ldd	r24, Z+1	; 0x01
   15320:	1f 92       	push	r1
   15322:	8f 93       	push	r24
   15324:	ff 92       	push	r15
   15326:	ef 92       	push	r14
   15328:	df 92       	push	r13
   1532a:	cf 92       	push	r12
   1532c:	1f 93       	push	r17
   1532e:	df 93       	push	r29
   15330:	8f e9       	ldi	r24, 0x9F	; 159
   15332:	97 e2       	ldi	r25, 0x27	; 39
   15334:	1f 92       	push	r1
   15336:	9f 93       	push	r25
   15338:	8f 93       	push	r24
   1533a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1533e:	8d b7       	in	r24, 0x3d	; 61
   15340:	9e b7       	in	r25, 0x3e	; 62
   15342:	41 96       	adiw	r24, 0x11	; 17
   15344:	0f b6       	in	r0, 0x3f	; 63
   15346:	f8 94       	cli
   15348:	9e bf       	out	0x3e, r25	; 62
   1534a:	0f be       	out	0x3f, r0	; 63
   1534c:	8d bf       	out	0x3d, r24	; 61
   1534e:	b6 01       	movw	r22, r12
   15350:	c7 01       	movw	r24, r14
   15352:	cd b7       	in	r28, 0x3d	; 61
   15354:	de b7       	in	r29, 0x3e	; 62
   15356:	e9 e0       	ldi	r30, 0x09	; 9
   15358:	0c 94 40 eb 	jmp	0x1d680	; 0x1d680 <__epilogue_restores__+0x12>

0001535c <amigo_init>:
   1535c:	ef 92       	push	r14
   1535e:	ff 92       	push	r15
   15360:	0f 93       	push	r16
   15362:	1f 93       	push	r17
   15364:	cf 93       	push	r28
   15366:	df 93       	push	r29
   15368:	07 ef       	ldi	r16, 0xF7	; 247
   1536a:	1e e1       	ldi	r17, 0x1E	; 30
   1536c:	c7 e0       	ldi	r28, 0x07	; 7
   1536e:	d0 e0       	ldi	r29, 0x00	; 0
   15370:	84 e0       	ldi	r24, 0x04	; 4
   15372:	f8 2e       	mov	r15, r24
   15374:	92 e0       	ldi	r25, 0x02	; 2
   15376:	e9 2e       	mov	r14, r25
   15378:	d8 01       	movw	r26, r16
   1537a:	d1 96       	adiw	r26, 0x31	; 49
   1537c:	8c 91       	ld	r24, X
   1537e:	81 30       	cpi	r24, 0x01	; 1
   15380:	31 f5       	brne	.+76     	; 0x153ce <amigo_init+0x72>
   15382:	ce 01       	movw	r24, r28
   15384:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <set_active_device>
   15388:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1538c:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15390:	10 82       	st	Z, r1
   15392:	9f 01       	movw	r18, r30
   15394:	27 5f       	subi	r18, 0xF7	; 247
   15396:	3f 4f       	sbci	r19, 0xFF	; 255
   15398:	d9 01       	movw	r26, r18
   1539a:	8f 2d       	mov	r24, r15
   1539c:	1d 92       	st	X+, r1
   1539e:	8a 95       	dec	r24
   153a0:	e9 f7       	brne	.-6      	; 0x1539c <amigo_init+0x40>
   153a2:	2c 5f       	subi	r18, 0xFC	; 252
   153a4:	3f 4f       	sbci	r19, 0xFF	; 255
   153a6:	d9 01       	movw	r26, r18
   153a8:	8f 2d       	mov	r24, r15
   153aa:	1d 92       	st	X+, r1
   153ac:	8a 95       	dec	r24
   153ae:	e9 f7       	brne	.-6      	; 0x153aa <amigo_init+0x4e>
   153b0:	11 82       	std	Z+1, r1	; 0x01
   153b2:	15 82       	std	Z+5, r1	; 0x05
   153b4:	14 82       	std	Z+4, r1	; 0x04
   153b6:	13 82       	std	Z+3, r1	; 0x03
   153b8:	e6 82       	std	Z+6, r14	; 0x06
   153ba:	10 86       	std	Z+8, r1	; 0x08
   153bc:	17 82       	std	Z+7, r1	; 0x07
   153be:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   153c2:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   153c6:	81 81       	ldd	r24, Z+1	; 0x01
   153c8:	90 e0       	ldi	r25, 0x00	; 0
   153ca:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
   153ce:	21 97       	sbiw	r28, 0x01	; 1
   153d0:	07 50       	subi	r16, 0x07	; 7
   153d2:	11 09       	sbc	r17, r1
   153d4:	cf 3f       	cpi	r28, 0xFF	; 255
   153d6:	af ef       	ldi	r26, 0xFF	; 255
   153d8:	da 07       	cpc	r29, r26
   153da:	71 f6       	brne	.-100    	; 0x15378 <amigo_init+0x1c>
   153dc:	cd b7       	in	r28, 0x3d	; 61
   153de:	de b7       	in	r29, 0x3e	; 62
   153e0:	e6 e0       	ldi	r30, 0x06	; 6
   153e2:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

000153e6 <amigo_request_logical_address>:
   153e6:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   153ea:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   153ee:	15 86       	std	Z+13, r1	; 0x0d
   153f0:	83 81       	ldd	r24, Z+3	; 0x03
   153f2:	86 87       	std	Z+14, r24	; 0x0e
   153f4:	84 81       	ldd	r24, Z+4	; 0x04
   153f6:	87 87       	std	Z+15, r24	; 0x0f
   153f8:	85 81       	ldd	r24, Z+5	; 0x05
   153fa:	80 8b       	std	Z+16, r24	; 0x10
   153fc:	80 e0       	ldi	r24, 0x00	; 0
   153fe:	90 e0       	ldi	r25, 0x00	; 0
   15400:	08 95       	ret

00015402 <amigo_request_status>:
   15402:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15406:	85 ff       	sbrs	r24, 5
   15408:	0a c0       	rjmp	.+20     	; 0x1541e <amigo_request_status+0x1c>
   1540a:	82 e7       	ldi	r24, 0x72	; 114
   1540c:	98 e2       	ldi	r25, 0x28	; 40
   1540e:	1f 92       	push	r1
   15410:	9f 93       	push	r25
   15412:	8f 93       	push	r24
   15414:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15418:	0f 90       	pop	r0
   1541a:	0f 90       	pop	r0
   1541c:	0f 90       	pop	r0
   1541e:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15422:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15426:	11 86       	std	Z+9, r1	; 0x09
   15428:	81 81       	ldd	r24, Z+1	; 0x01
   1542a:	82 87       	std	Z+10, r24	; 0x0a
   1542c:	8d e0       	ldi	r24, 0x0D	; 13
   1542e:	83 87       	std	Z+11, r24	; 0x0b
   15430:	14 86       	std	Z+12, r1	; 0x0c
   15432:	0e 94 95 74 	call	0xe92a	; 0xe92a <mmc_wp_status>
   15436:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1543a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   1543e:	89 2b       	or	r24, r25
   15440:	19 f0       	breq	.+6      	; 0x15448 <amigo_request_status+0x46>
   15442:	84 85       	ldd	r24, Z+12	; 0x0c
   15444:	80 66       	ori	r24, 0x60	; 96
   15446:	84 87       	std	Z+12, r24	; 0x0c
   15448:	86 81       	ldd	r24, Z+6	; 0x06
   1544a:	82 30       	cpi	r24, 0x02	; 2
   1544c:	31 f4       	brne	.+12     	; 0x1545a <amigo_request_status+0x58>
   1544e:	83 e1       	ldi	r24, 0x13	; 19
   15450:	81 87       	std	Z+9, r24	; 0x09
   15452:	84 85       	ldd	r24, Z+12	; 0x0c
   15454:	88 60       	ori	r24, 0x08	; 8
   15456:	84 87       	std	Z+12, r24	; 0x0c
   15458:	21 c0       	rjmp	.+66     	; 0x1549c <amigo_request_status+0x9a>
   1545a:	27 81       	ldd	r18, Z+7	; 0x07
   1545c:	30 85       	ldd	r19, Z+8	; 0x08
   1545e:	21 15       	cp	r18, r1
   15460:	31 05       	cpc	r19, r1
   15462:	11 f4       	brne	.+4      	; 0x15468 <amigo_request_status+0x66>
   15464:	81 30       	cpi	r24, 0x01	; 1
   15466:	d1 f4       	brne	.+52     	; 0x1549c <amigo_request_status+0x9a>
   15468:	26 fd       	sbrc	r18, 6
   1546a:	0c c0       	rjmp	.+24     	; 0x15484 <amigo_request_status+0x82>
   1546c:	25 ff       	sbrs	r18, 5
   1546e:	03 c0       	rjmp	.+6      	; 0x15476 <amigo_request_status+0x74>
   15470:	8a e0       	ldi	r24, 0x0A	; 10
   15472:	81 87       	std	Z+9, r24	; 0x09
   15474:	0d c0       	rjmp	.+26     	; 0x15490 <amigo_request_status+0x8e>
   15476:	84 85       	ldd	r24, Z+12	; 0x0c
   15478:	24 ff       	sbrs	r18, 4
   1547a:	02 c0       	rjmp	.+4      	; 0x15480 <amigo_request_status+0x7e>
   1547c:	83 60       	ori	r24, 0x03	; 3
   1547e:	07 c0       	rjmp	.+14     	; 0x1548e <amigo_request_status+0x8c>
   15480:	21 ff       	sbrs	r18, 1
   15482:	02 c0       	rjmp	.+4      	; 0x15488 <amigo_request_status+0x86>
   15484:	83 e1       	ldi	r24, 0x13	; 19
   15486:	f5 cf       	rjmp	.-22     	; 0x15472 <amigo_request_status+0x70>
   15488:	22 ff       	sbrs	r18, 2
   1548a:	02 c0       	rjmp	.+4      	; 0x15490 <amigo_request_status+0x8e>
   1548c:	84 60       	ori	r24, 0x04	; 4
   1548e:	84 87       	std	Z+12, r24	; 0x0c
   15490:	84 85       	ldd	r24, Z+12	; 0x0c
   15492:	80 61       	ori	r24, 0x10	; 16
   15494:	84 87       	std	Z+12, r24	; 0x0c
   15496:	83 85       	ldd	r24, Z+11	; 0x0b
   15498:	80 68       	ori	r24, 0x80	; 128
   1549a:	83 87       	std	Z+11, r24	; 0x0b
   1549c:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   154a0:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   154a4:	81 81       	ldd	r24, Z+1	; 0x01
   154a6:	90 e0       	ldi	r25, 0x00	; 0
   154a8:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   154ac:	80 e0       	ldi	r24, 0x00	; 0
   154ae:	90 e0       	ldi	r25, 0x00	; 0
   154b0:	08 95       	ret

000154b2 <amigo_send_logical_address>:
   154b2:	a2 e0       	ldi	r26, 0x02	; 2
   154b4:	b0 e0       	ldi	r27, 0x00	; 0
   154b6:	ef e5       	ldi	r30, 0x5F	; 95
   154b8:	fa ea       	ldi	r31, 0xAA	; 170
   154ba:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   154be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   154c2:	85 ff       	sbrs	r24, 5
   154c4:	0a c0       	rjmp	.+20     	; 0x154da <amigo_send_logical_address+0x28>
   154c6:	84 e5       	ldi	r24, 0x54	; 84
   154c8:	98 e2       	ldi	r25, 0x28	; 40
   154ca:	1f 92       	push	r1
   154cc:	9f 93       	push	r25
   154ce:	8f 93       	push	r24
   154d0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   154d4:	0f 90       	pop	r0
   154d6:	0f 90       	pop	r0
   154d8:	0f 90       	pop	r0
   154da:	80 e0       	ldi	r24, 0x00	; 0
   154dc:	91 e0       	ldi	r25, 0x01	; 1
   154de:	9a 83       	std	Y+2, r25	; 0x02
   154e0:	89 83       	std	Y+1, r24	; 0x01
   154e2:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   154e6:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   154ea:	ae 01       	movw	r20, r28
   154ec:	4f 5f       	subi	r20, 0xFF	; 255
   154ee:	5f 4f       	sbci	r21, 0xFF	; 255
   154f0:	64 e0       	ldi	r22, 0x04	; 4
   154f2:	70 e0       	ldi	r23, 0x00	; 0
   154f4:	0d 96       	adiw	r24, 0x0d	; 13
   154f6:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   154fa:	29 81       	ldd	r18, Y+1	; 0x01
   154fc:	3a 81       	ldd	r19, Y+2	; 0x02
   154fe:	22 27       	eor	r18, r18
   15500:	30 7d       	andi	r19, 0xD0	; 208
   15502:	23 2b       	or	r18, r19
   15504:	49 f0       	breq	.+18     	; 0x15518 <amigo_send_logical_address+0x66>
   15506:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1550a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   1550e:	27 81       	ldd	r18, Z+7	; 0x07
   15510:	30 85       	ldd	r19, Z+8	; 0x08
   15512:	20 62       	ori	r18, 0x20	; 32
   15514:	30 87       	std	Z+8, r19	; 0x08
   15516:	27 83       	std	Z+7, r18	; 0x07
   15518:	04 97       	sbiw	r24, 0x04	; 4
   1551a:	c9 f0       	breq	.+50     	; 0x1554e <amigo_send_logical_address+0x9c>
   1551c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15520:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15524:	87 81       	ldd	r24, Z+7	; 0x07
   15526:	90 85       	ldd	r25, Z+8	; 0x08
   15528:	80 62       	ori	r24, 0x20	; 32
   1552a:	90 87       	std	Z+8, r25	; 0x08
   1552c:	87 83       	std	Z+7, r24	; 0x07
   1552e:	81 e0       	ldi	r24, 0x01	; 1
   15530:	86 83       	std	Z+6, r24	; 0x06
   15532:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15536:	80 ff       	sbrs	r24, 0
   15538:	0a c0       	rjmp	.+20     	; 0x1554e <amigo_send_logical_address+0x9c>
   1553a:	8a e3       	ldi	r24, 0x3A	; 58
   1553c:	98 e2       	ldi	r25, 0x28	; 40
   1553e:	1f 92       	push	r1
   15540:	9f 93       	push	r25
   15542:	8f 93       	push	r24
   15544:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15548:	0f 90       	pop	r0
   1554a:	0f 90       	pop	r0
   1554c:	0f 90       	pop	r0
   1554e:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15552:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15556:	81 81       	ldd	r24, Z+1	; 0x01
   15558:	90 e0       	ldi	r25, 0x00	; 0
   1555a:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1555e:	89 81       	ldd	r24, Y+1	; 0x01
   15560:	9a 81       	ldd	r25, Y+2	; 0x02
   15562:	88 27       	eor	r24, r24
   15564:	90 7d       	andi	r25, 0xD0	; 208
   15566:	22 96       	adiw	r28, 0x02	; 2
   15568:	e2 e0       	ldi	r30, 0x02	; 2
   1556a:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0001556e <amigo_send_status>:
   1556e:	a2 e0       	ldi	r26, 0x02	; 2
   15570:	b0 e0       	ldi	r27, 0x00	; 0
   15572:	ed eb       	ldi	r30, 0xBD	; 189
   15574:	fa ea       	ldi	r31, 0xAA	; 170
   15576:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   1557a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1557e:	85 ff       	sbrs	r24, 5
   15580:	0a c0       	rjmp	.+20     	; 0x15596 <amigo_send_status+0x28>
   15582:	85 e2       	ldi	r24, 0x25	; 37
   15584:	98 e2       	ldi	r25, 0x28	; 40
   15586:	1f 92       	push	r1
   15588:	9f 93       	push	r25
   1558a:	8f 93       	push	r24
   1558c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15590:	0f 90       	pop	r0
   15592:	0f 90       	pop	r0
   15594:	0f 90       	pop	r0
   15596:	80 e0       	ldi	r24, 0x00	; 0
   15598:	91 e0       	ldi	r25, 0x01	; 1
   1559a:	9a 83       	std	Y+2, r25	; 0x02
   1559c:	89 83       	std	Y+1, r24	; 0x01
   1559e:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   155a2:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   155a6:	ae 01       	movw	r20, r28
   155a8:	4f 5f       	subi	r20, 0xFF	; 255
   155aa:	5f 4f       	sbci	r21, 0xFF	; 255
   155ac:	64 e0       	ldi	r22, 0x04	; 4
   155ae:	70 e0       	ldi	r23, 0x00	; 0
   155b0:	09 96       	adiw	r24, 0x09	; 9
   155b2:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   155b6:	29 81       	ldd	r18, Y+1	; 0x01
   155b8:	3a 81       	ldd	r19, Y+2	; 0x02
   155ba:	22 27       	eor	r18, r18
   155bc:	30 7d       	andi	r19, 0xD0	; 208
   155be:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   155c2:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   155c6:	23 2b       	or	r18, r19
   155c8:	29 f0       	breq	.+10     	; 0x155d4 <amigo_send_status+0x66>
   155ca:	27 81       	ldd	r18, Z+7	; 0x07
   155cc:	30 85       	ldd	r19, Z+8	; 0x08
   155ce:	20 62       	ori	r18, 0x20	; 32
   155d0:	30 87       	std	Z+8, r19	; 0x08
   155d2:	27 83       	std	Z+7, r18	; 0x07
   155d4:	04 97       	sbiw	r24, 0x04	; 4
   155d6:	b1 f0       	breq	.+44     	; 0x15604 <amigo_send_status+0x96>
   155d8:	87 81       	ldd	r24, Z+7	; 0x07
   155da:	90 85       	ldd	r25, Z+8	; 0x08
   155dc:	80 62       	ori	r24, 0x20	; 32
   155de:	90 87       	std	Z+8, r25	; 0x08
   155e0:	87 83       	std	Z+7, r24	; 0x07
   155e2:	81 e0       	ldi	r24, 0x01	; 1
   155e4:	86 83       	std	Z+6, r24	; 0x06
   155e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155ea:	80 ff       	sbrs	r24, 0
   155ec:	0e c0       	rjmp	.+28     	; 0x1560a <amigo_send_status+0x9c>
   155ee:	8b e0       	ldi	r24, 0x0B	; 11
   155f0:	98 e2       	ldi	r25, 0x28	; 40
   155f2:	1f 92       	push	r1
   155f4:	9f 93       	push	r25
   155f6:	8f 93       	push	r24
   155f8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   155fc:	0f 90       	pop	r0
   155fe:	0f 90       	pop	r0
   15600:	0f 90       	pop	r0
   15602:	03 c0       	rjmp	.+6      	; 0x1560a <amigo_send_status+0x9c>
   15604:	10 86       	std	Z+8, r1	; 0x08
   15606:	17 82       	std	Z+7, r1	; 0x07
   15608:	16 82       	std	Z+6, r1	; 0x06
   1560a:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   1560e:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15612:	81 81       	ldd	r24, Z+1	; 0x01
   15614:	90 e0       	ldi	r25, 0x00	; 0
   15616:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1561a:	89 81       	ldd	r24, Y+1	; 0x01
   1561c:	9a 81       	ldd	r25, Y+2	; 0x02
   1561e:	88 27       	eor	r24, r24
   15620:	90 7d       	andi	r25, 0xD0	; 208
   15622:	22 96       	adiw	r28, 0x02	; 2
   15624:	e2 e0       	ldi	r30, 0x02	; 2
   15626:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0001562a <amigo_increment>:
   1562a:	a1 e1       	ldi	r26, 0x11	; 17
   1562c:	b0 e0       	ldi	r27, 0x00	; 0
   1562e:	eb e1       	ldi	r30, 0x1B	; 27
   15630:	fb ea       	ldi	r31, 0xAB	; 171
   15632:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   15636:	bc 01       	movw	r22, r24
   15638:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1563c:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15640:	91 e1       	ldi	r25, 0x11	; 17
   15642:	de 01       	movw	r26, r28
   15644:	11 96       	adiw	r26, 0x01	; 1
   15646:	01 90       	ld	r0, Z+
   15648:	0d 92       	st	X+, r0
   1564a:	9a 95       	dec	r25
   1564c:	e1 f7       	brne	.-8      	; 0x15646 <amigo_increment+0x1c>
   1564e:	9e 81       	ldd	r25, Y+6	; 0x06
   15650:	9f 5f       	subi	r25, 0xFF	; 255
   15652:	9e 83       	std	Y+6, r25	; 0x06
   15654:	ce 01       	movw	r24, r28
   15656:	01 96       	adiw	r24, 0x01	; 1
   15658:	c2 dd       	rcall	.-1148   	; 0x151de <amigo_overflow_check>
   1565a:	00 97       	sbiw	r24, 0x00	; 0
   1565c:	59 f4       	brne	.+22     	; 0x15674 <amigo_increment+0x4a>
   1565e:	a0 91 9e 19 	lds	r26, 0x199E	; 0x80199e <AMIGOs>
   15662:	b0 91 9f 19 	lds	r27, 0x199F	; 0x80199f <AMIGOs+0x1>
   15666:	21 e1       	ldi	r18, 0x11	; 17
   15668:	fe 01       	movw	r30, r28
   1566a:	31 96       	adiw	r30, 0x01	; 1
   1566c:	01 90       	ld	r0, Z+
   1566e:	0d 92       	st	X+, r0
   15670:	2a 95       	dec	r18
   15672:	e1 f7       	brne	.-8      	; 0x1566c <amigo_increment+0x42>
   15674:	61 96       	adiw	r28, 0x11	; 17
   15676:	e2 e0       	ldi	r30, 0x02	; 2
   15678:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

0001567c <amigo_seek>:
   1567c:	0f 93       	push	r16
   1567e:	1f 93       	push	r17
   15680:	cf 93       	push	r28
   15682:	df 93       	push	r29
   15684:	ec 01       	movw	r28, r24
   15686:	60 ef       	ldi	r22, 0xF0	; 240
   15688:	72 e1       	ldi	r23, 0x12	; 18
   1568a:	a9 dd       	rcall	.-1198   	; 0x151de <amigo_overflow_check>
   1568c:	8c 01       	movw	r16, r24
   1568e:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15692:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15696:	89 2b       	or	r24, r25
   15698:	41 f0       	breq	.+16     	; 0x156aa <amigo_seek+0x2e>
   1569a:	81 e0       	ldi	r24, 0x01	; 1
   1569c:	86 83       	std	Z+6, r24	; 0x06
   1569e:	87 81       	ldd	r24, Z+7	; 0x07
   156a0:	90 85       	ldd	r25, Z+8	; 0x08
   156a2:	84 60       	ori	r24, 0x04	; 4
   156a4:	90 87       	std	Z+8, r25	; 0x08
   156a6:	87 83       	std	Z+7, r24	; 0x07
   156a8:	06 c0       	rjmp	.+12     	; 0x156b6 <amigo_seek+0x3a>
   156aa:	8d 81       	ldd	r24, Y+5	; 0x05
   156ac:	85 83       	std	Z+5, r24	; 0x05
   156ae:	8c 81       	ldd	r24, Y+4	; 0x04
   156b0:	84 83       	std	Z+4, r24	; 0x04
   156b2:	8b 81       	ldd	r24, Y+3	; 0x03
   156b4:	83 83       	std	Z+3, r24	; 0x03
   156b6:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   156ba:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   156be:	81 81       	ldd	r24, Z+1	; 0x01
   156c0:	90 e0       	ldi	r25, 0x00	; 0
   156c2:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   156c6:	c8 01       	movw	r24, r16
   156c8:	df 91       	pop	r29
   156ca:	cf 91       	pop	r28
   156cc:	1f 91       	pop	r17
   156ce:	0f 91       	pop	r16
   156d0:	08 95       	ret

000156d2 <amigo_verify>:
   156d2:	8f 92       	push	r8
   156d4:	9f 92       	push	r9
   156d6:	af 92       	push	r10
   156d8:	bf 92       	push	r11
   156da:	ef 92       	push	r14
   156dc:	ff 92       	push	r15
   156de:	0f 93       	push	r16
   156e0:	1f 93       	push	r17
   156e2:	cf 93       	push	r28
   156e4:	df 93       	push	r29
   156e6:	7c 01       	movw	r14, r24
   156e8:	65 ef       	ldi	r22, 0xF5	; 245
   156ea:	72 e1       	ldi	r23, 0x12	; 18
   156ec:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   156f0:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   156f4:	c4 dd       	rcall	.-1144   	; 0x1527e <amigo_chs_to_logical>
   156f6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   156fa:	25 ff       	sbrs	r18, 5
   156fc:	15 c0       	rjmp	.+42     	; 0x15728 <amigo_verify+0x56>
   156fe:	ff 92       	push	r15
   15700:	ef 92       	push	r14
   15702:	9f 93       	push	r25
   15704:	8f 93       	push	r24
   15706:	7f 93       	push	r23
   15708:	6f 93       	push	r22
   1570a:	8a ec       	ldi	r24, 0xCA	; 202
   1570c:	97 e2       	ldi	r25, 0x27	; 39
   1570e:	1f 92       	push	r1
   15710:	9f 93       	push	r25
   15712:	8f 93       	push	r24
   15714:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15718:	8d b7       	in	r24, 0x3d	; 61
   1571a:	9e b7       	in	r25, 0x3e	; 62
   1571c:	09 96       	adiw	r24, 0x09	; 9
   1571e:	0f b6       	in	r0, 0x3f	; 63
   15720:	f8 94       	cli
   15722:	9e bf       	out	0x3e, r25	; 62
   15724:	0f be       	out	0x3f, r0	; 63
   15726:	8d bf       	out	0x3d, r24	; 61
   15728:	e7 01       	movw	r28, r14
   1572a:	20 97       	sbiw	r28, 0x00	; 0
   1572c:	09 f4       	brne	.+2      	; 0x15730 <amigo_verify+0x5e>
   1572e:	49 c0       	rjmp	.+146    	; 0x157c2 <amigo_verify+0xf0>
   15730:	62 e0       	ldi	r22, 0x02	; 2
   15732:	73 e1       	ldi	r23, 0x13	; 19
   15734:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   15738:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   1573c:	a0 dd       	rcall	.-1216   	; 0x1527e <amigo_chs_to_logical>
   1573e:	4b 01       	movw	r8, r22
   15740:	5c 01       	movw	r10, r24
   15742:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15746:	86 fd       	sbrc	r24, 6
   15748:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   1574c:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <AMIGOp>
   15750:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15754:	e0 90 9e 19 	lds	r14, 0x199E	; 0x80199e <AMIGOs>
   15758:	f0 90 9f 19 	lds	r15, 0x199F	; 0x80199f <AMIGOs+0x1>
   1575c:	e7 e0       	ldi	r30, 0x07	; 7
   1575e:	ee 0e       	add	r14, r30
   15760:	f1 1c       	adc	r15, r1
   15762:	fc 01       	movw	r30, r24
   15764:	05 a1       	ldd	r16, Z+37	; 0x25
   15766:	16 a1       	ldd	r17, Z+38	; 0x26
   15768:	2d ee       	ldi	r18, 0xED	; 237
   1576a:	3c e1       	ldi	r19, 0x1C	; 28
   1576c:	b5 01       	movw	r22, r10
   1576e:	a4 01       	movw	r20, r8
   15770:	02 96       	adiw	r24, 0x02	; 2
   15772:	0e 94 89 8c 	call	0x11912	; 0x11912 <dbf_open_read>
   15776:	7c 01       	movw	r14, r24
   15778:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1577c:	86 ff       	sbrs	r24, 6
   1577e:	04 c0       	rjmp	.+8      	; 0x15788 <amigo_verify+0xb6>
   15780:	8a e0       	ldi	r24, 0x0A	; 10
   15782:	9e e0       	ldi	r25, 0x0E	; 14
   15784:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   15788:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   1578c:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15790:	85 a1       	ldd	r24, Z+37	; 0x25
   15792:	96 a1       	ldd	r25, Z+38	; 0x26
   15794:	e8 16       	cp	r14, r24
   15796:	f9 06       	cpc	r15, r25
   15798:	61 f0       	breq	.+24     	; 0x157b2 <amigo_verify+0xe0>
   1579a:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1579e:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   157a2:	81 e0       	ldi	r24, 0x01	; 1
   157a4:	86 83       	std	Z+6, r24	; 0x06
   157a6:	87 81       	ldd	r24, Z+7	; 0x07
   157a8:	90 85       	ldd	r25, Z+8	; 0x08
   157aa:	81 60       	ori	r24, 0x01	; 1
   157ac:	90 87       	std	Z+8, r25	; 0x08
   157ae:	87 83       	std	Z+7, r24	; 0x07
   157b0:	0b c0       	rjmp	.+22     	; 0x157c8 <amigo_verify+0xf6>
   157b2:	8a e0       	ldi	r24, 0x0A	; 10
   157b4:	93 e1       	ldi	r25, 0x13	; 19
   157b6:	39 df       	rcall	.-398    	; 0x1562a <amigo_increment>
   157b8:	21 97       	sbiw	r28, 0x01	; 1
   157ba:	89 2b       	or	r24, r25
   157bc:	09 f4       	brne	.+2      	; 0x157c0 <amigo_verify+0xee>
   157be:	b5 cf       	rjmp	.-150    	; 0x1572a <amigo_verify+0x58>
   157c0:	03 c0       	rjmp	.+6      	; 0x157c8 <amigo_verify+0xf6>
   157c2:	c0 e0       	ldi	r28, 0x00	; 0
   157c4:	d0 e0       	ldi	r29, 0x00	; 0
   157c6:	02 c0       	rjmp	.+4      	; 0x157cc <amigo_verify+0xfa>
   157c8:	c1 e0       	ldi	r28, 0x01	; 1
   157ca:	d0 e0       	ldi	r29, 0x00	; 0
   157cc:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   157d0:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   157d4:	81 81       	ldd	r24, Z+1	; 0x01
   157d6:	90 e0       	ldi	r25, 0x00	; 0
   157d8:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   157dc:	ce 01       	movw	r24, r28
   157de:	df 91       	pop	r29
   157e0:	cf 91       	pop	r28
   157e2:	1f 91       	pop	r17
   157e4:	0f 91       	pop	r16
   157e6:	ff 90       	pop	r15
   157e8:	ef 90       	pop	r14
   157ea:	bf 90       	pop	r11
   157ec:	af 90       	pop	r10
   157ee:	9f 90       	pop	r9
   157f0:	8f 90       	pop	r8
   157f2:	08 95       	ret

000157f4 <amigo_format>:
   157f4:	ef 92       	push	r14
   157f6:	ff 92       	push	r15
   157f8:	0f 93       	push	r16
   157fa:	1f 93       	push	r17
   157fc:	cf 93       	push	r28
   157fe:	df 93       	push	r29
   15800:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15804:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15808:	15 82       	std	Z+5, r1	; 0x05
   1580a:	14 82       	std	Z+4, r1	; 0x04
   1580c:	13 82       	std	Z+3, r1	; 0x03
   1580e:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15812:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15816:	45 a1       	ldd	r20, Z+37	; 0x25
   15818:	56 a1       	ldd	r21, Z+38	; 0x26
   1581a:	68 2f       	mov	r22, r24
   1581c:	70 e0       	ldi	r23, 0x00	; 0
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   1581e:	8d ee       	ldi	r24, 0xED	; 237
   15820:	9c e1       	ldi	r25, 0x1C	; 28
   15822:	0e 94 f6 ef 	call	0x1dfec	; 0x1dfec <memset>
   15826:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1582a:	85 ff       	sbrs	r24, 5
   1582c:	0a c0       	rjmp	.+20     	; 0x15842 <amigo_format+0x4e>
   1582e:	8f e8       	ldi	r24, 0x8F	; 143
   15830:	97 e2       	ldi	r25, 0x27	; 39
   15832:	1f 92       	push	r1
   15834:	9f 93       	push	r25
   15836:	8f 93       	push	r24
   15838:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1583c:	0f 90       	pop	r0
   1583e:	0f 90       	pop	r0
   15840:	0f 90       	pop	r0
   15842:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15846:	86 fd       	sbrc	r24, 6
   15848:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   1584c:	61 e1       	ldi	r22, 0x11	; 17
   1584e:	73 e1       	ldi	r23, 0x13	; 19
   15850:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   15854:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   15858:	12 dd       	rcall	.-1500   	; 0x1527e <amigo_chs_to_logical>
   1585a:	ab 01       	movw	r20, r22
   1585c:	bc 01       	movw	r22, r24
   1585e:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <AMIGOp>
   15862:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15866:	e0 90 9e 19 	lds	r14, 0x199E	; 0x80199e <AMIGOs>
   1586a:	f0 90 9f 19 	lds	r15, 0x199F	; 0x80199f <AMIGOs+0x1>
   1586e:	27 e0       	ldi	r18, 0x07	; 7
   15870:	e2 0e       	add	r14, r18
   15872:	f1 1c       	adc	r15, r1
   15874:	fc 01       	movw	r30, r24
   15876:	05 a1       	ldd	r16, Z+37	; 0x25
   15878:	16 a1       	ldd	r17, Z+38	; 0x26
   1587a:	2d ee       	ldi	r18, 0xED	; 237
   1587c:	3c e1       	ldi	r19, 0x1C	; 28
   1587e:	02 96       	adiw	r24, 0x02	; 2
   15880:	0e 94 e0 8c 	call	0x119c0	; 0x119c0 <dbf_open_write>
   15884:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15888:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   1588c:	25 a1       	ldd	r18, Z+37	; 0x25
   1588e:	36 a1       	ldd	r19, Z+38	; 0x26
   15890:	82 17       	cp	r24, r18
   15892:	93 07       	cpc	r25, r19
   15894:	71 f0       	breq	.+28     	; 0x158b2 <amigo_format+0xbe>
   15896:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1589a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   1589e:	87 81       	ldd	r24, Z+7	; 0x07
   158a0:	90 85       	ldd	r25, Z+8	; 0x08
   158a2:	82 60       	ori	r24, 0x02	; 2
   158a4:	90 87       	std	Z+8, r25	; 0x08
   158a6:	87 83       	std	Z+7, r24	; 0x07
   158a8:	81 e0       	ldi	r24, 0x01	; 1
   158aa:	86 83       	std	Z+6, r24	; 0x06
   158ac:	c1 e0       	ldi	r28, 0x01	; 1
   158ae:	d0 e0       	ldi	r29, 0x00	; 0
   158b0:	0f c0       	rjmp	.+30     	; 0x158d0 <amigo_format+0xdc>
   158b2:	80 e0       	ldi	r24, 0x00	; 0
   158b4:	90 e0       	ldi	r25, 0x00	; 0
   158b6:	b9 de       	rcall	.-654    	; 0x1562a <amigo_increment>
   158b8:	89 2b       	or	r24, r25
    return ( uart_rx_count( uart ) );
   158ba:	41 f2       	breq	.-112    	; 0x1584c <amigo_format+0x58>
}
   158bc:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   158c0:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   158c4:	15 82       	std	Z+5, r1	; 0x05
   158c6:	14 82       	std	Z+4, r1	; 0x04
   158c8:	13 82       	std	Z+3, r1	; 0x03
   158ca:	16 82       	std	Z+6, r1	; 0x06
   158cc:	c0 e0       	ldi	r28, 0x00	; 0
   158ce:	d0 e0       	ldi	r29, 0x00	; 0
   158d0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   158d4:	86 ff       	sbrs	r24, 6
   158d6:	04 c0       	rjmp	.+8      	; 0x158e0 <amigo_format+0xec>
   158d8:	81 e1       	ldi	r24, 0x11	; 17
   158da:	93 e1       	ldi	r25, 0x13	; 19
   158dc:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   158e0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   158e4:	85 ff       	sbrs	r24, 5
   158e6:	0a c0       	rjmp	.+20     	; 0x158fc <amigo_format+0x108>
   158e8:	8a e7       	ldi	r24, 0x7A	; 122
   158ea:	97 e2       	ldi	r25, 0x27	; 39
   158ec:	1f 92       	push	r1
   158ee:	9f 93       	push	r25
   158f0:	8f 93       	push	r24
   158f2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   158f6:	0f 90       	pop	r0
   158f8:	0f 90       	pop	r0
   158fa:	0f 90       	pop	r0
   158fc:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15900:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15904:	81 81       	ldd	r24, Z+1	; 0x01
   15906:	90 e0       	ldi	r25, 0x00	; 0
   15908:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   1590c:	ce 01       	movw	r24, r28
   1590e:	cd b7       	in	r28, 0x3d	; 61
   15910:	de b7       	in	r29, 0x3e	; 62
   15912:	e6 e0       	ldi	r30, 0x06	; 6
   15914:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00015918 <amigo_buffered_read>:
   15918:	8f 92       	push	r8
   1591a:	9f 92       	push	r9
   1591c:	af 92       	push	r10
   1591e:	bf 92       	push	r11
   15920:	ef 92       	push	r14
   15922:	ff 92       	push	r15
   15924:	0f 93       	push	r16
   15926:	1f 93       	push	r17
   15928:	cf 93       	push	r28
   1592a:	df 93       	push	r29
   1592c:	00 d0       	rcall	.+0      	; 0x1592e <amigo_buffered_read+0x16>
   1592e:	cd b7       	in	r28, 0x3d	; 61
   15930:	de b7       	in	r29, 0x3e	; 62
   15932:	68 e1       	ldi	r22, 0x18	; 24
   15934:	73 e1       	ldi	r23, 0x13	; 19
   15936:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   1593a:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   1593e:	9f dc       	rcall	.-1730   	; 0x1527e <amigo_chs_to_logical>
   15940:	4b 01       	movw	r8, r22
   15942:	5c 01       	movw	r10, r24
   15944:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15948:	86 fd       	sbrc	r24, 6
   1594a:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   1594e:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <AMIGOp>
   15952:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15956:	e0 90 9e 19 	lds	r14, 0x199E	; 0x80199e <AMIGOs>
   1595a:	f0 90 9f 19 	lds	r15, 0x199F	; 0x80199f <AMIGOs+0x1>
   1595e:	27 e0       	ldi	r18, 0x07	; 7
   15960:	e2 0e       	add	r14, r18
   15962:	f1 1c       	adc	r15, r1
   15964:	fc 01       	movw	r30, r24
   15966:	05 a1       	ldd	r16, Z+37	; 0x25
   15968:	16 a1       	ldd	r17, Z+38	; 0x26
   1596a:	2d ee       	ldi	r18, 0xED	; 237
   1596c:	3c e1       	ldi	r19, 0x1C	; 28
   1596e:	b5 01       	movw	r22, r10
   15970:	a4 01       	movw	r20, r8
   15972:	02 96       	adiw	r24, 0x02	; 2
   15974:	0e 94 89 8c 	call	0x11912	; 0x11912 <dbf_open_read>
   15978:	7c 01       	movw	r14, r24
   1597a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1597e:	86 ff       	sbrs	r24, 6
   15980:	04 c0       	rjmp	.+8      	; 0x1598a <amigo_buffered_read+0x72>
   15982:	8a e0       	ldi	r24, 0x0A	; 10
   15984:	9e e0       	ldi	r25, 0x0E	; 14
   15986:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   1598a:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   1598e:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15992:	85 a1       	ldd	r24, Z+37	; 0x25
   15994:	96 a1       	ldd	r25, Z+38	; 0x26
   15996:	e8 16       	cp	r14, r24
   15998:	f9 06       	cpc	r15, r25
   1599a:	39 f0       	breq	.+14     	; 0x159aa <amigo_buffered_read+0x92>
   1599c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   159a0:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   159a4:	81 e0       	ldi	r24, 0x01	; 1
   159a6:	86 83       	std	Z+6, r24	; 0x06
   159a8:	6c c0       	rjmp	.+216    	; 0x15a82 <amigo_buffered_read+0x16a>
   159aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159ae:	87 fd       	sbrc	r24, 7
   159b0:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   159b4:	80 e0       	ldi	r24, 0x00	; 0
   159b6:	91 e0       	ldi	r25, 0x01	; 1
   159b8:	9a 83       	std	Y+2, r25	; 0x02
   159ba:	89 83       	std	Y+1, r24	; 0x01
   159bc:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   159c0:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   159c4:	65 a1       	ldd	r22, Z+37	; 0x25
   159c6:	76 a1       	ldd	r23, Z+38	; 0x26
   159c8:	ae 01       	movw	r20, r28
   159ca:	4f 5f       	subi	r20, 0xFF	; 255
   159cc:	5f 4f       	sbci	r21, 0xFF	; 255
   159ce:	8d ee       	ldi	r24, 0xED	; 237
   159d0:	9c e1       	ldi	r25, 0x1C	; 28
   159d2:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   159d6:	7c 01       	movw	r14, r24
   159d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159dc:	87 ff       	sbrs	r24, 7
   159de:	04 c0       	rjmp	.+8      	; 0x159e8 <amigo_buffered_read+0xd0>
   159e0:	86 e2       	ldi	r24, 0x26	; 38
   159e2:	93 e1       	ldi	r25, 0x13	; 19
   159e4:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   159e8:	89 81       	ldd	r24, Y+1	; 0x01
   159ea:	9a 81       	ldd	r25, Y+2	; 0x02
   159ec:	88 27       	eor	r24, r24
   159ee:	90 7d       	andi	r25, 0xD0	; 208
   159f0:	89 2b       	or	r24, r25
   159f2:	49 f4       	brne	.+18     	; 0x15a06 <amigo_buffered_read+0xee>
   159f4:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   159f8:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   159fc:	85 a1       	ldd	r24, Z+37	; 0x25
   159fe:	96 a1       	ldd	r25, Z+38	; 0x26
   15a00:	e8 16       	cp	r14, r24
   15a02:	f9 06       	cpc	r15, r25
   15a04:	31 f1       	breq	.+76     	; 0x15a52 <amigo_buffered_read+0x13a>
   15a06:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15a0a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15a0e:	81 e0       	ldi	r24, 0x01	; 1
   15a10:	86 83       	std	Z+6, r24	; 0x06
   15a12:	87 81       	ldd	r24, Z+7	; 0x07
   15a14:	90 85       	ldd	r25, Z+8	; 0x08
   15a16:	80 62       	ori	r24, 0x20	; 32
   15a18:	90 87       	std	Z+8, r25	; 0x08
   15a1a:	87 83       	std	Z+7, r24	; 0x07
   15a1c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a20:	80 ff       	sbrs	r24, 0
   15a22:	0a c0       	rjmp	.+20     	; 0x15a38 <amigo_buffered_read+0x120>
   15a24:	80 e6       	ldi	r24, 0x60	; 96
   15a26:	97 e2       	ldi	r25, 0x27	; 39
   15a28:	1f 92       	push	r1
   15a2a:	9f 93       	push	r25
   15a2c:	8f 93       	push	r24
   15a2e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15a32:	0f 90       	pop	r0
   15a34:	0f 90       	pop	r0
   15a36:	0f 90       	pop	r0
   15a38:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15a3c:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15a40:	81 81       	ldd	r24, Z+1	; 0x01
   15a42:	90 e0       	ldi	r25, 0x00	; 0
   15a44:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   15a48:	89 81       	ldd	r24, Y+1	; 0x01
   15a4a:	9a 81       	ldd	r25, Y+2	; 0x02
   15a4c:	88 27       	eor	r24, r24
   15a4e:	90 7d       	andi	r25, 0xD0	; 208
   15a50:	1a c0       	rjmp	.+52     	; 0x15a86 <amigo_buffered_read+0x16e>
   15a52:	88 e1       	ldi	r24, 0x18	; 24
   15a54:	93 e1       	ldi	r25, 0x13	; 19
   15a56:	e9 dd       	rcall	.-1070   	; 0x1562a <amigo_increment>
   15a58:	89 2b       	or	r24, r25
   15a5a:	59 f0       	breq	.+22     	; 0x15a72 <amigo_buffered_read+0x15a>
   15a5c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15a60:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15a64:	81 e0       	ldi	r24, 0x01	; 1
   15a66:	86 83       	std	Z+6, r24	; 0x06
   15a68:	87 81       	ldd	r24, Z+7	; 0x07
   15a6a:	90 85       	ldd	r25, Z+8	; 0x08
   15a6c:	84 60       	ori	r24, 0x04	; 4
   15a6e:	90 87       	std	Z+8, r25	; 0x08
   15a70:	87 83       	std	Z+7, r24	; 0x07
   15a72:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15a76:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15a7a:	81 81       	ldd	r24, Z+1	; 0x01
   15a7c:	90 e0       	ldi	r25, 0x00	; 0
   15a7e:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   15a82:	80 e0       	ldi	r24, 0x00	; 0
   15a84:	90 e0       	ldi	r25, 0x00	; 0
   15a86:	0f 90       	pop	r0
   15a88:	0f 90       	pop	r0
   15a8a:	df 91       	pop	r29
   15a8c:	cf 91       	pop	r28
   15a8e:	1f 91       	pop	r17
   15a90:	0f 91       	pop	r16
   15a92:	ff 90       	pop	r15
   15a94:	ef 90       	pop	r14
   15a96:	bf 90       	pop	r11
   15a98:	af 90       	pop	r10
   15a9a:	9f 90       	pop	r9
   15a9c:	8f 90       	pop	r8
   15a9e:	08 95       	ret

00015aa0 <amigo_buffered_write>:
   15aa0:	8f 92       	push	r8
   15aa2:	9f 92       	push	r9
   15aa4:	af 92       	push	r10
   15aa6:	bf 92       	push	r11
   15aa8:	ef 92       	push	r14
   15aaa:	ff 92       	push	r15
   15aac:	0f 93       	push	r16
   15aae:	1f 93       	push	r17
   15ab0:	cf 93       	push	r28
   15ab2:	df 93       	push	r29
   15ab4:	00 d0       	rcall	.+0      	; 0x15ab6 <amigo_buffered_write+0x16>
   15ab6:	cd b7       	in	r28, 0x3d	; 61
   15ab8:	de b7       	in	r29, 0x3e	; 62
   15aba:	61 e3       	ldi	r22, 0x31	; 49
   15abc:	73 e1       	ldi	r23, 0x13	; 19
   15abe:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <AMIGOs>
   15ac2:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <AMIGOs+0x1>
   15ac6:	db db       	rcall	.-2122   	; 0x1527e <amigo_chs_to_logical>
   15ac8:	4b 01       	movw	r8, r22
   15aca:	5c 01       	movw	r10, r24
   15acc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ad0:	87 fd       	sbrc	r24, 7
   15ad2:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   15ad6:	1a 82       	std	Y+2, r1	; 0x02
   15ad8:	19 82       	std	Y+1, r1	; 0x01
   15ada:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15ade:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15ae2:	65 a1       	ldd	r22, Z+37	; 0x25
   15ae4:	76 a1       	ldd	r23, Z+38	; 0x26
   15ae6:	ae 01       	movw	r20, r28
   15ae8:	4f 5f       	subi	r20, 0xFF	; 255
   15aea:	5f 4f       	sbci	r21, 0xFF	; 255
   15aec:	8d ee       	ldi	r24, 0xED	; 237
   15aee:	9c e1       	ldi	r25, 0x1C	; 28
   15af0:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   15af4:	7c 01       	movw	r14, r24
   15af6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15afa:	87 ff       	sbrs	r24, 7
   15afc:	04 c0       	rjmp	.+8      	; 0x15b06 <amigo_buffered_write+0x66>
   15afe:	80 e4       	ldi	r24, 0x40	; 64
   15b00:	93 e1       	ldi	r25, 0x13	; 19
   15b02:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   15b06:	89 81       	ldd	r24, Y+1	; 0x01
   15b08:	9a 81       	ldd	r25, Y+2	; 0x02
   15b0a:	88 27       	eor	r24, r24
   15b0c:	90 7d       	andi	r25, 0xD0	; 208
   15b0e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15b12:	89 2b       	or	r24, r25
   15b14:	49 f4       	brne	.+18     	; 0x15b28 <amigo_buffered_write+0x88>
   15b16:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15b1a:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15b1e:	85 a1       	ldd	r24, Z+37	; 0x25
   15b20:	96 a1       	ldd	r25, Z+38	; 0x26
   15b22:	e8 16       	cp	r14, r24
   15b24:	f9 06       	cpc	r15, r25
   15b26:	c1 f0       	breq	.+48     	; 0x15b58 <amigo_buffered_write+0xb8>
   15b28:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15b2c:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15b30:	81 e0       	ldi	r24, 0x01	; 1
   15b32:	86 83       	std	Z+6, r24	; 0x06
   15b34:	87 81       	ldd	r24, Z+7	; 0x07
   15b36:	90 85       	ldd	r25, Z+8	; 0x08
   15b38:	80 62       	ori	r24, 0x20	; 32
   15b3a:	90 87       	std	Z+8, r25	; 0x08
   15b3c:	87 83       	std	Z+7, r24	; 0x07
   15b3e:	20 ff       	sbrs	r18, 0
   15b40:	4e c0       	rjmp	.+156    	; 0x15bde <amigo_buffered_write+0x13e>
   15b42:	81 e4       	ldi	r24, 0x41	; 65
   15b44:	97 e2       	ldi	r25, 0x27	; 39
   15b46:	1f 92       	push	r1
   15b48:	9f 93       	push	r25
   15b4a:	8f 93       	push	r24
   15b4c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15b50:	0f 90       	pop	r0
   15b52:	0f 90       	pop	r0
   15b54:	0f 90       	pop	r0
   15b56:	43 c0       	rjmp	.+134    	; 0x15bde <amigo_buffered_write+0x13e>
   15b58:	26 fd       	sbrc	r18, 6
   15b5a:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
   15b5e:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <AMIGOp>
   15b62:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15b66:	e0 90 9e 19 	lds	r14, 0x199E	; 0x80199e <AMIGOs>
   15b6a:	f0 90 9f 19 	lds	r15, 0x199F	; 0x80199f <AMIGOs+0x1>
   15b6e:	27 e0       	ldi	r18, 0x07	; 7
   15b70:	e2 0e       	add	r14, r18
   15b72:	f1 1c       	adc	r15, r1
   15b74:	fc 01       	movw	r30, r24
   15b76:	05 a1       	ldd	r16, Z+37	; 0x25
   15b78:	16 a1       	ldd	r17, Z+38	; 0x26
   15b7a:	2d ee       	ldi	r18, 0xED	; 237
   15b7c:	3c e1       	ldi	r19, 0x1C	; 28
   15b7e:	b5 01       	movw	r22, r10
   15b80:	a4 01       	movw	r20, r8
   15b82:	02 96       	adiw	r24, 0x02	; 2
   15b84:	0e 94 e0 8c 	call	0x119c0	; 0x119c0 <dbf_open_write>
   15b88:	7c 01       	movw	r14, r24
   15b8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b8e:	86 ff       	sbrs	r24, 6
   15b90:	04 c0       	rjmp	.+8      	; 0x15b9a <amigo_buffered_write+0xfa>
   15b92:	8f ef       	ldi	r24, 0xFF	; 255
   15b94:	9d e0       	ldi	r25, 0x0D	; 13
   15b96:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
   15b9a:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15b9e:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15ba2:	85 a1       	ldd	r24, Z+37	; 0x25
   15ba4:	96 a1       	ldd	r25, Z+38	; 0x26
   15ba6:	e8 16       	cp	r14, r24
   15ba8:	f9 06       	cpc	r15, r25
   15baa:	49 f0       	breq	.+18     	; 0x15bbe <amigo_buffered_write+0x11e>
   15bac:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15bb0:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15bb4:	81 e0       	ldi	r24, 0x01	; 1
   15bb6:	86 83       	std	Z+6, r24	; 0x06
   15bb8:	80 e0       	ldi	r24, 0x00	; 0
   15bba:	90 e0       	ldi	r25, 0x00	; 0
   15bbc:	1c c0       	rjmp	.+56     	; 0x15bf6 <amigo_buffered_write+0x156>
   15bbe:	81 e3       	ldi	r24, 0x31	; 49
   15bc0:	93 e1       	ldi	r25, 0x13	; 19
   15bc2:	33 dd       	rcall	.-1434   	; 0x1562a <amigo_increment>
   15bc4:	89 2b       	or	r24, r25
   15bc6:	59 f0       	breq	.+22     	; 0x15bde <amigo_buffered_write+0x13e>
   15bc8:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15bcc:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15bd0:	81 e0       	ldi	r24, 0x01	; 1
   15bd2:	86 83       	std	Z+6, r24	; 0x06
   15bd4:	87 81       	ldd	r24, Z+7	; 0x07
   15bd6:	90 85       	ldd	r25, Z+8	; 0x08
   15bd8:	84 60       	ori	r24, 0x04	; 4
   15bda:	90 87       	std	Z+8, r25	; 0x08
   15bdc:	87 83       	std	Z+7, r24	; 0x07
   15bde:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15be2:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15be6:	81 81       	ldd	r24, Z+1	; 0x01
   15be8:	90 e0       	ldi	r25, 0x00	; 0
   15bea:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   15bee:	89 81       	ldd	r24, Y+1	; 0x01
   15bf0:	9a 81       	ldd	r25, Y+2	; 0x02
   15bf2:	88 27       	eor	r24, r24
   15bf4:	90 7d       	andi	r25, 0xD0	; 208
   15bf6:	0f 90       	pop	r0
   15bf8:	0f 90       	pop	r0
   15bfa:	df 91       	pop	r29
   15bfc:	cf 91       	pop	r28
   15bfe:	1f 91       	pop	r17
   15c00:	0f 91       	pop	r16
   15c02:	ff 90       	pop	r15
   15c04:	ef 90       	pop	r14
   15c06:	bf 90       	pop	r11
   15c08:	af 90       	pop	r10
   15c0a:	9f 90       	pop	r9
   15c0c:	8f 90       	pop	r8
   15c0e:	08 95       	ret

00015c10 <amigo_cmd_dsj>:
   15c10:	a3 e0       	ldi	r26, 0x03	; 3
   15c12:	b0 e0       	ldi	r27, 0x00	; 0
   15c14:	ee e0       	ldi	r30, 0x0E	; 14
   15c16:	fe ea       	ldi	r31, 0xAE	; 174
   15c18:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   15c1c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15c20:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15c24:	86 81       	ldd	r24, Z+6	; 0x06
   15c26:	8b 83       	std	Y+3, r24	; 0x03
   15c28:	80 e0       	ldi	r24, 0x00	; 0
   15c2a:	91 e0       	ldi	r25, 0x01	; 1
   15c2c:	9a 83       	std	Y+2, r25	; 0x02
   15c2e:	89 83       	std	Y+1, r24	; 0x01
   15c30:	ae 01       	movw	r20, r28
   15c32:	4f 5f       	subi	r20, 0xFF	; 255
   15c34:	5f 4f       	sbci	r21, 0xFF	; 255
   15c36:	61 e0       	ldi	r22, 0x01	; 1
   15c38:	70 e0       	ldi	r23, 0x00	; 0
   15c3a:	ce 01       	movw	r24, r28
   15c3c:	03 96       	adiw	r24, 0x03	; 3
   15c3e:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   15c42:	29 81       	ldd	r18, Y+1	; 0x01
   15c44:	3a 81       	ldd	r19, Y+2	; 0x02
   15c46:	22 27       	eor	r18, r18
   15c48:	30 7d       	andi	r19, 0xD0	; 208
   15c4a:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15c4e:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15c52:	23 2b       	or	r18, r19
   15c54:	29 f0       	breq	.+10     	; 0x15c60 <amigo_cmd_dsj+0x50>
   15c56:	27 81       	ldd	r18, Z+7	; 0x07
   15c58:	30 85       	ldd	r19, Z+8	; 0x08
   15c5a:	20 62       	ori	r18, 0x20	; 32
   15c5c:	30 87       	std	Z+8, r19	; 0x08
   15c5e:	27 83       	std	Z+7, r18	; 0x07
   15c60:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15c64:	01 97       	sbiw	r24, 0x01	; 1
   15c66:	c1 f0       	breq	.+48     	; 0x15c98 <amigo_cmd_dsj+0x88>
   15c68:	81 e0       	ldi	r24, 0x01	; 1
   15c6a:	86 83       	std	Z+6, r24	; 0x06
   15c6c:	87 81       	ldd	r24, Z+7	; 0x07
   15c6e:	90 85       	ldd	r25, Z+8	; 0x08
   15c70:	80 62       	ori	r24, 0x20	; 32
   15c72:	90 87       	std	Z+8, r25	; 0x08
   15c74:	87 83       	std	Z+7, r24	; 0x07
   15c76:	20 ff       	sbrs	r18, 0
   15c78:	0a c0       	rjmp	.+20     	; 0x15c8e <amigo_cmd_dsj+0x7e>
   15c7a:	87 e2       	ldi	r24, 0x27	; 39
   15c7c:	97 e2       	ldi	r25, 0x27	; 39
   15c7e:	1f 92       	push	r1
   15c80:	9f 93       	push	r25
   15c82:	8f 93       	push	r24
   15c84:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15c88:	0f 90       	pop	r0
   15c8a:	0f 90       	pop	r0
   15c8c:	0f 90       	pop	r0
   15c8e:	89 81       	ldd	r24, Y+1	; 0x01
   15c90:	9a 81       	ldd	r25, Y+2	; 0x02
   15c92:	88 27       	eor	r24, r24
   15c94:	90 7d       	andi	r25, 0xD0	; 208
   15c96:	1a c0       	rjmp	.+52     	; 0x15ccc <amigo_cmd_dsj+0xbc>
   15c98:	25 ff       	sbrs	r18, 5
   15c9a:	0f c0       	rjmp	.+30     	; 0x15cba <amigo_cmd_dsj+0xaa>
   15c9c:	86 81       	ldd	r24, Z+6	; 0x06
   15c9e:	1f 92       	push	r1
   15ca0:	8f 93       	push	r24
   15ca2:	8a e1       	ldi	r24, 0x1A	; 26
   15ca4:	97 e2       	ldi	r25, 0x27	; 39
   15ca6:	1f 92       	push	r1
   15ca8:	9f 93       	push	r25
   15caa:	8f 93       	push	r24
   15cac:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15cb0:	0f 90       	pop	r0
   15cb2:	0f 90       	pop	r0
   15cb4:	0f 90       	pop	r0
   15cb6:	0f 90       	pop	r0
   15cb8:	0f 90       	pop	r0
   15cba:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15cbe:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15cc2:	16 82       	std	Z+6, r1	; 0x06
   15cc4:	10 86       	std	Z+8, r1	; 0x08
   15cc6:	17 82       	std	Z+7, r1	; 0x07
   15cc8:	80 e0       	ldi	r24, 0x00	; 0
   15cca:	90 e0       	ldi	r25, 0x00	; 0
   15ccc:	23 96       	adiw	r28, 0x03	; 3
   15cce:	e2 e0       	ldi	r30, 0x02	; 2
   15cd0:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00015cd4 <amigo_cmd_clear>:
   15cd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15cd8:	85 ff       	sbrs	r24, 5
   15cda:	0a c0       	rjmp	.+20     	; 0x15cf0 <amigo_cmd_clear+0x1c>
   15cdc:	81 ee       	ldi	r24, 0xE1	; 225
   15cde:	96 e2       	ldi	r25, 0x26	; 38
   15ce0:	1f 92       	push	r1
   15ce2:	9f 93       	push	r25
   15ce4:	8f 93       	push	r24
   15ce6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15cea:	0f 90       	pop	r0
   15cec:	0f 90       	pop	r0
   15cee:	0f 90       	pop	r0
   15cf0:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15cf4:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15cf8:	15 82       	std	Z+5, r1	; 0x05
   15cfa:	14 82       	std	Z+4, r1	; 0x04
   15cfc:	13 82       	std	Z+3, r1	; 0x03
   15cfe:	16 82       	std	Z+6, r1	; 0x06
   15d00:	10 86       	std	Z+8, r1	; 0x08
   15d02:	17 82       	std	Z+7, r1	; 0x07
   15d04:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15d08:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15d0c:	81 81       	ldd	r24, Z+1	; 0x01
   15d0e:	90 e0       	ldi	r25, 0x00	; 0
   15d10:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
   15d14:	80 e0       	ldi	r24, 0x00	; 0
   15d16:	90 e0       	ldi	r25, 0x00	; 0
   15d18:	08 95       	ret

00015d1a <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   15d1a:	0f 93       	push	r16
   15d1c:	1f 93       	push	r17
   15d1e:	cf 93       	push	r28
   15d20:	df 93       	push	r29
   15d22:	c8 2f       	mov	r28, r24
   15d24:	d6 2f       	mov	r29, r22
   15d26:	14 2f       	mov	r17, r20
   15d28:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   15d2a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15d2e:	90 e0       	ldi	r25, 0x00	; 0
   15d30:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   15d34:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   15d38:	89 2b       	or	r24, r25
   15d3a:	19 f1       	breq	.+70     	; 0x15d82 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15d3c:	1f 92       	push	r1
   15d3e:	2f 93       	push	r18
   15d40:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15d44:	1f 92       	push	r1
   15d46:	8f 93       	push	r24
   15d48:	0f 93       	push	r16
   15d4a:	1f 93       	push	r17
   15d4c:	1f 92       	push	r1
   15d4e:	df 93       	push	r29
   15d50:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15d54:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15d58:	80 81       	ld	r24, Z
   15d5a:	1f 92       	push	r1
   15d5c:	8f 93       	push	r24
   15d5e:	1f 92       	push	r1
   15d60:	cf 93       	push	r28
   15d62:	8a e7       	ldi	r24, 0x7A	; 122
   15d64:	96 e2       	ldi	r25, 0x26	; 38
   15d66:	1f 92       	push	r1
   15d68:	9f 93       	push	r25
   15d6a:	8f 93       	push	r24
   15d6c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15d70:	8d b7       	in	r24, 0x3d	; 61
   15d72:	9e b7       	in	r25, 0x3e	; 62
   15d74:	0f 96       	adiw	r24, 0x0f	; 15
   15d76:	0f b6       	in	r0, 0x3f	; 63
   15d78:	f8 94       	cli
   15d7a:	9e bf       	out	0x3e, r25	; 62
   15d7c:	0f be       	out	0x3f, r0	; 63
   15d7e:	8d bf       	out	0x3d, r24	; 61
   15d80:	66 c0       	rjmp	.+204    	; 0x15e4e <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   15d82:	82 2f       	mov	r24, r18
   15d84:	90 e0       	ldi	r25, 0x00	; 0
   15d86:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   15d8a:	30 91 f3 1e 	lds	r19, 0x1EF3	; 0x801ef3 <listening>
   15d8e:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   15d92:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15d96:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15d9a:	89 2b       	or	r24, r25
   15d9c:	e9 f0       	breq	.+58     	; 0x15dd8 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15d9e:	1f 92       	push	r1
   15da0:	2f 93       	push	r18
   15da2:	1f 92       	push	r1
   15da4:	3f 93       	push	r19
   15da6:	0f 93       	push	r16
   15da8:	1f 93       	push	r17
   15daa:	1f 92       	push	r1
   15dac:	df 93       	push	r29
   15dae:	80 81       	ld	r24, Z
   15db0:	1f 92       	push	r1
   15db2:	8f 93       	push	r24
   15db4:	1f 92       	push	r1
   15db6:	cf 93       	push	r28
   15db8:	83 e1       	ldi	r24, 0x13	; 19
   15dba:	96 e2       	ldi	r25, 0x26	; 38
   15dbc:	1f 92       	push	r1
   15dbe:	9f 93       	push	r25
   15dc0:	8f 93       	push	r24
   15dc2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15dc6:	8d b7       	in	r24, 0x3d	; 61
   15dc8:	9e b7       	in	r25, 0x3e	; 62
   15dca:	0f 96       	adiw	r24, 0x0f	; 15
   15dcc:	0f b6       	in	r0, 0x3f	; 63
   15dce:	f8 94       	cli
   15dd0:	9e bf       	out	0x3e, r25	; 62
   15dd2:	0f be       	out	0x3f, r0	; 63
   15dd4:	8d bf       	out	0x3d, r24	; 61
   15dd6:	3b c0       	rjmp	.+118    	; 0x15e4e <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15dd8:	2f 35       	cpi	r18, 0x5F	; 95
   15dda:	e9 f4       	brne	.+58     	; 0x15e16 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15ddc:	1f 92       	push	r1
   15dde:	2f 93       	push	r18
   15de0:	1f 92       	push	r1
   15de2:	3f 93       	push	r19
   15de4:	0f 93       	push	r16
   15de6:	1f 93       	push	r17
   15de8:	1f 92       	push	r1
   15dea:	df 93       	push	r29
   15dec:	80 81       	ld	r24, Z
   15dee:	1f 92       	push	r1
   15df0:	8f 93       	push	r24
   15df2:	1f 92       	push	r1
   15df4:	cf 93       	push	r28
   15df6:	8c ea       	ldi	r24, 0xAC	; 172
   15df8:	95 e2       	ldi	r25, 0x25	; 37
   15dfa:	1f 92       	push	r1
   15dfc:	9f 93       	push	r25
   15dfe:	8f 93       	push	r24
   15e00:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15e04:	8d b7       	in	r24, 0x3d	; 61
   15e06:	9e b7       	in	r25, 0x3e	; 62
   15e08:	0f 96       	adiw	r24, 0x0f	; 15
   15e0a:	0f b6       	in	r0, 0x3f	; 63
   15e0c:	f8 94       	cli
   15e0e:	9e bf       	out	0x3e, r25	; 62
   15e10:	0f be       	out	0x3f, r0	; 63
   15e12:	8d bf       	out	0x3d, r24	; 61
   15e14:	1c c0       	rjmp	.+56     	; 0x15e4e <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15e16:	1f 92       	push	r1
   15e18:	2f 93       	push	r18
   15e1a:	1f 92       	push	r1
   15e1c:	3f 93       	push	r19
   15e1e:	0f 93       	push	r16
   15e20:	1f 93       	push	r17
   15e22:	1f 92       	push	r1
   15e24:	df 93       	push	r29
   15e26:	80 81       	ld	r24, Z
   15e28:	1f 92       	push	r1
   15e2a:	8f 93       	push	r24
   15e2c:	1f 92       	push	r1
   15e2e:	cf 93       	push	r28
   15e30:	87 e4       	ldi	r24, 0x47	; 71
   15e32:	95 e2       	ldi	r25, 0x25	; 37
   15e34:	1f 92       	push	r1
   15e36:	9f 93       	push	r25
   15e38:	8f 93       	push	r24
   15e3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15e3e:	8d b7       	in	r24, 0x3d	; 61
   15e40:	9e b7       	in	r25, 0x3e	; 62
   15e42:	0f 96       	adiw	r24, 0x0f	; 15
   15e44:	0f b6       	in	r0, 0x3f	; 63
   15e46:	f8 94       	cli
   15e48:	9e bf       	out	0x3e, r25	; 62
   15e4a:	0f be       	out	0x3f, r0	; 63
   15e4c:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15e4e:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15e52:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15e56:	81 81       	ldd	r24, Z+1	; 0x01
   15e58:	90 e0       	ldi	r25, 0x00	; 0
   15e5a:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
    return(0);
}
   15e5e:	80 e0       	ldi	r24, 0x00	; 0
   15e60:	90 e0       	ldi	r25, 0x00	; 0
   15e62:	df 91       	pop	r29
   15e64:	cf 91       	pop	r28
   15e66:	1f 91       	pop	r17
   15e68:	0f 91       	pop	r16
   15e6a:	08 95       	ret

00015e6c <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15e6c:	cf 93       	push	r28
   15e6e:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15e70:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15e74:	90 e0       	ldi	r25, 0x00	; 0
   15e76:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   15e7a:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   15e7e:	89 2b       	or	r24, r25
   15e80:	f9 f0       	breq	.+62     	; 0x15ec0 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15e82:	1f 92       	push	r1
   15e84:	2f 93       	push	r18
   15e86:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15e8a:	1f 92       	push	r1
   15e8c:	8f 93       	push	r24
   15e8e:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15e92:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15e96:	80 81       	ld	r24, Z
   15e98:	1f 92       	push	r1
   15e9a:	8f 93       	push	r24
   15e9c:	1f 92       	push	r1
   15e9e:	cf 93       	push	r28
   15ea0:	87 ef       	ldi	r24, 0xF7	; 247
   15ea2:	94 e2       	ldi	r25, 0x24	; 36
   15ea4:	1f 92       	push	r1
   15ea6:	9f 93       	push	r25
   15ea8:	8f 93       	push	r24
   15eaa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15eae:	8d b7       	in	r24, 0x3d	; 61
   15eb0:	9e b7       	in	r25, 0x3e	; 62
   15eb2:	0b 96       	adiw	r24, 0x0b	; 11
   15eb4:	0f b6       	in	r0, 0x3f	; 63
   15eb6:	f8 94       	cli
   15eb8:	9e bf       	out	0x3e, r25	; 62
   15eba:	0f be       	out	0x3f, r0	; 63
   15ebc:	8d bf       	out	0x3d, r24	; 61
   15ebe:	5a c0       	rjmp	.+180    	; 0x15f74 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15ec0:	82 2f       	mov	r24, r18
   15ec2:	90 e0       	ldi	r25, 0x00	; 0
   15ec4:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   15ec8:	30 91 f3 1e 	lds	r19, 0x1EF3	; 0x801ef3 <listening>
   15ecc:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   15ed0:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15ed4:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15ed8:	89 2b       	or	r24, r25
   15eda:	c9 f0       	breq	.+50     	; 0x15f0e <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15edc:	1f 92       	push	r1
   15ede:	2f 93       	push	r18
   15ee0:	1f 92       	push	r1
   15ee2:	3f 93       	push	r19
   15ee4:	80 81       	ld	r24, Z
   15ee6:	1f 92       	push	r1
   15ee8:	8f 93       	push	r24
   15eea:	1f 92       	push	r1
   15eec:	cf 93       	push	r28
   15eee:	87 ea       	ldi	r24, 0xA7	; 167
   15ef0:	94 e2       	ldi	r25, 0x24	; 36
   15ef2:	1f 92       	push	r1
   15ef4:	9f 93       	push	r25
   15ef6:	8f 93       	push	r24
   15ef8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15efc:	8d b7       	in	r24, 0x3d	; 61
   15efe:	9e b7       	in	r25, 0x3e	; 62
   15f00:	0b 96       	adiw	r24, 0x0b	; 11
   15f02:	0f b6       	in	r0, 0x3f	; 63
   15f04:	f8 94       	cli
   15f06:	9e bf       	out	0x3e, r25	; 62
   15f08:	0f be       	out	0x3f, r0	; 63
   15f0a:	8d bf       	out	0x3d, r24	; 61
   15f0c:	33 c0       	rjmp	.+102    	; 0x15f74 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15f0e:	2f 35       	cpi	r18, 0x5F	; 95
   15f10:	c9 f4       	brne	.+50     	; 0x15f44 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f12:	1f 92       	push	r1
   15f14:	2f 93       	push	r18
   15f16:	1f 92       	push	r1
   15f18:	3f 93       	push	r19
   15f1a:	80 81       	ld	r24, Z
   15f1c:	1f 92       	push	r1
   15f1e:	8f 93       	push	r24
   15f20:	1f 92       	push	r1
   15f22:	cf 93       	push	r28
   15f24:	87 e5       	ldi	r24, 0x57	; 87
   15f26:	94 e2       	ldi	r25, 0x24	; 36
   15f28:	1f 92       	push	r1
   15f2a:	9f 93       	push	r25
   15f2c:	8f 93       	push	r24
   15f2e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15f32:	8d b7       	in	r24, 0x3d	; 61
   15f34:	9e b7       	in	r25, 0x3e	; 62
   15f36:	0b 96       	adiw	r24, 0x0b	; 11
   15f38:	0f b6       	in	r0, 0x3f	; 63
   15f3a:	f8 94       	cli
   15f3c:	9e bf       	out	0x3e, r25	; 62
   15f3e:	0f be       	out	0x3f, r0	; 63
   15f40:	8d bf       	out	0x3d, r24	; 61
   15f42:	18 c0       	rjmp	.+48     	; 0x15f74 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f44:	1f 92       	push	r1
   15f46:	2f 93       	push	r18
   15f48:	1f 92       	push	r1
   15f4a:	3f 93       	push	r19
   15f4c:	80 81       	ld	r24, Z
   15f4e:	1f 92       	push	r1
   15f50:	8f 93       	push	r24
   15f52:	1f 92       	push	r1
   15f54:	cf 93       	push	r28
   15f56:	86 e0       	ldi	r24, 0x06	; 6
   15f58:	94 e2       	ldi	r25, 0x24	; 36
   15f5a:	1f 92       	push	r1
   15f5c:	9f 93       	push	r25
   15f5e:	8f 93       	push	r24
   15f60:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15f64:	8d b7       	in	r24, 0x3d	; 61
   15f66:	9e b7       	in	r25, 0x3e	; 62
   15f68:	0b 96       	adiw	r24, 0x0b	; 11
   15f6a:	0f b6       	in	r0, 0x3f	; 63
   15f6c:	f8 94       	cli
   15f6e:	9e bf       	out	0x3e, r25	; 62
   15f70:	0f be       	out	0x3f, r0	; 63
   15f72:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15f74:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   15f78:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   15f7c:	81 81       	ldd	r24, Z+1	; 0x01
   15f7e:	90 e0       	ldi	r25, 0x00	; 0
   15f80:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
    return(0);
}
   15f84:	80 e0       	ldi	r24, 0x00	; 0
   15f86:	90 e0       	ldi	r25, 0x00	; 0
   15f88:	cf 91       	pop	r28
   15f8a:	08 95       	ret

00015f8c <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   15f8c:	8f 30       	cpi	r24, 0x0F	; 15
   15f8e:	29 f0       	breq	.+10     	; 0x15f9a <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   15f90:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15f94:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15f98:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   15f9a:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   15f9e:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   15fa2:	81 81       	ldd	r24, Z+1	; 0x01
   15fa4:	88 23       	and	r24, r24
   15fa6:	29 f0       	breq	.+10     	; 0x15fb2 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   15fa8:	87 81       	ldd	r24, Z+7	; 0x07
   15faa:	90 85       	ldd	r25, Z+8	; 0x08
   15fac:	80 64       	ori	r24, 0x40	; 64
   15fae:	90 87       	std	Z+8, r25	; 0x08
   15fb0:	87 83       	std	Z+7, r24	; 0x07
   15fb2:	08 95       	ret

00015fb4 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   15fb4:	a3 e1       	ldi	r26, 0x13	; 19
   15fb6:	b0 e0       	ldi	r27, 0x00	; 0
   15fb8:	e0 ee       	ldi	r30, 0xE0	; 224
   15fba:	ff ea       	ldi	r31, 0xAF	; 175
   15fbc:	0c 94 27 eb 	jmp	0x1d64e	; 0x1d64e <__prologue_saves__+0x18>
   15fc0:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   15fc2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15fc6:	85 ff       	sbrs	r24, 5
   15fc8:	16 c0       	rjmp	.+44     	; 0x15ff6 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   15fca:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15fce:	1f 92       	push	r1
   15fd0:	8f 93       	push	r24
   15fd2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15fd6:	1f 92       	push	r1
   15fd8:	8f 93       	push	r24
   15fda:	ff 92       	push	r15
   15fdc:	ef 92       	push	r14
   15fde:	84 ed       	ldi	r24, 0xD4	; 212
   15fe0:	93 e2       	ldi	r25, 0x23	; 35
   15fe2:	1f 92       	push	r1
   15fe4:	9f 93       	push	r25
   15fe6:	8f 93       	push	r24
   15fe8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   15fec:	0f b6       	in	r0, 0x3f	; 63
   15fee:	f8 94       	cli
   15ff0:	de bf       	out	0x3e, r29	; 62
   15ff2:	0f be       	out	0x3f, r0	; 63
   15ff4:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   15ff6:	9e e7       	ldi	r25, 0x7E	; 126
   15ff8:	e9 16       	cp	r14, r25
   15ffa:	f1 04       	cpc	r15, r1
   15ffc:	f1 f5       	brne	.+124    	; 0x1607a <Amigo_Command+0xc6>
   15ffe:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16002:	90 e0       	ldi	r25, 0x00	; 0
   16004:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   16008:	89 2b       	or	r24, r25
   1600a:	09 f4       	brne	.+2      	; 0x1600e <Amigo_Command+0x5a>
   1600c:	86 c0       	rjmp	.+268    	; 0x1611a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1600e:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   16012:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   16016:	81 81       	ldd	r24, Z+1	; 0x01
   16018:	90 e0       	ldi	r25, 0x00	; 0
   1601a:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
        status = EOI_FLAG;
   1601e:	80 e0       	ldi	r24, 0x00	; 0
   16020:	91 e0       	ldi	r25, 0x01	; 1
   16022:	9b 8b       	std	Y+19, r25	; 0x13
   16024:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16026:	ae 01       	movw	r20, r28
   16028:	4e 5e       	subi	r20, 0xEE	; 238
   1602a:	5f 4f       	sbci	r21, 0xFF	; 255
   1602c:	60 e0       	ldi	r22, 0x00	; 0
   1602e:	72 e0       	ldi	r23, 0x02	; 2
   16030:	8d ee       	ldi	r24, 0xED	; 237
   16032:	9c e1       	ldi	r25, 0x1C	; 28
   16034:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16038:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   1603c:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   16040:	81 81       	ldd	r24, Z+1	; 0x01
   16042:	90 e0       	ldi	r25, 0x00	; 0
   16044:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16048:	8a 89       	ldd	r24, Y+18	; 0x12
   1604a:	9b 89       	ldd	r25, Y+19	; 0x13
   1604c:	88 27       	eor	r24, r24
   1604e:	90 7d       	andi	r25, 0xD0	; 208
   16050:	89 2b       	or	r24, r25
   16052:	09 f4       	brne	.+2      	; 0x16056 <Amigo_Command+0xa2>
   16054:	89 c2       	rjmp	.+1298   	; 0x16568 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16056:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1605a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   1605e:	81 e0       	ldi	r24, 0x01	; 1
   16060:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16062:	87 81       	ldd	r24, Z+7	; 0x07
   16064:	90 85       	ldd	r25, Z+8	; 0x08
   16066:	80 62       	ori	r24, 0x20	; 32
   16068:	90 87       	std	Z+8, r25	; 0x08
   1606a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1606c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16070:	80 ff       	sbrs	r24, 0
   16072:	7a c2       	rjmp	.+1268   	; 0x16568 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16074:	82 eb       	ldi	r24, 0xB2	; 178
   16076:	93 e2       	ldi	r25, 0x23	; 35
   16078:	8e c0       	rjmp	.+284    	; 0x16196 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   1607a:	8f e7       	ldi	r24, 0x7F	; 127
   1607c:	e8 16       	cp	r14, r24
   1607e:	f1 04       	cpc	r15, r1
   16080:	09 f0       	breq	.+2      	; 0x16084 <Amigo_Command+0xd0>
   16082:	4b c0       	rjmp	.+150    	; 0x1611a <Amigo_Command+0x166>
   16084:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16088:	90 e0       	ldi	r25, 0x00	; 0
   1608a:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   1608e:	89 2b       	or	r24, r25
   16090:	09 f4       	brne	.+2      	; 0x16094 <Amigo_Command+0xe0>
   16092:	43 c0       	rjmp	.+134    	; 0x1611a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16094:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   16098:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   1609c:	81 81       	ldd	r24, Z+1	; 0x01
   1609e:	90 e0       	ldi	r25, 0x00	; 0
   160a0:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   160a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160a8:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   160aa:	0e 94 37 8d 	call	0x11a6e	; 0x11a6e <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   160ae:	80 e0       	ldi	r24, 0x00	; 0
   160b0:	91 e0       	ldi	r25, 0x01	; 1
   160b2:	9b 8b       	std	Y+19, r25	; 0x13
   160b4:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   160b6:	ae 01       	movw	r20, r28
   160b8:	4e 5e       	subi	r20, 0xEE	; 238
   160ba:	5f 4f       	sbci	r21, 0xFF	; 255
   160bc:	60 e0       	ldi	r22, 0x00	; 0
   160be:	72 e0       	ldi	r23, 0x02	; 2
   160c0:	8d ee       	ldi	r24, 0xED	; 237
   160c2:	9c e1       	ldi	r25, 0x1C	; 28
   160c4:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   160c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160cc:	87 ff       	sbrs	r24, 7
   160ce:	04 c0       	rjmp	.+8      	; 0x160d8 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   160d0:	80 e4       	ldi	r24, 0x40	; 64
   160d2:	93 e1       	ldi	r25, 0x13	; 19
   160d4:	0e 94 49 8d 	call	0x11a92	; 0x11a92 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   160d8:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   160dc:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   160e0:	81 81       	ldd	r24, Z+1	; 0x01
   160e2:	90 e0       	ldi	r25, 0x00	; 0
   160e4:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
        if(status & ERROR_MASK)
   160e8:	8a 89       	ldd	r24, Y+18	; 0x12
   160ea:	9b 89       	ldd	r25, Y+19	; 0x13
   160ec:	88 27       	eor	r24, r24
   160ee:	90 7d       	andi	r25, 0xD0	; 208
   160f0:	89 2b       	or	r24, r25
   160f2:	09 f4       	brne	.+2      	; 0x160f6 <Amigo_Command+0x142>
   160f4:	39 c2       	rjmp	.+1138   	; 0x16568 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   160f6:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   160fa:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   160fe:	81 e0       	ldi	r24, 0x01	; 1
   16100:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16102:	87 81       	ldd	r24, Z+7	; 0x07
   16104:	90 85       	ldd	r25, Z+8	; 0x08
   16106:	80 62       	ori	r24, 0x20	; 32
   16108:	90 87       	std	Z+8, r25	; 0x08
   1610a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1610c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16110:	80 ff       	sbrs	r24, 0
   16112:	2a c2       	rjmp	.+1108   	; 0x16568 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16114:	81 e9       	ldi	r24, 0x91	; 145
   16116:	93 e2       	ldi	r25, 0x23	; 35
   16118:	3e c0       	rjmp	.+124    	; 0x16196 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1611a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1611e:	90 e0       	ldi	r25, 0x00	; 0
   16120:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   16124:	89 2b       	or	r24, r25
   16126:	19 f4       	brne	.+6      	; 0x1612e <Amigo_Command+0x17a>
        return(0);
   16128:	80 e0       	ldi	r24, 0x00	; 0
   1612a:	90 e0       	ldi	r25, 0x00	; 0
   1612c:	25 c2       	rjmp	.+1098   	; 0x16578 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1612e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16132:	90 e0       	ldi	r25, 0x00	; 0
   16134:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   16138:	89 2b       	or	r24, r25
   1613a:	b1 f7       	brne	.-20     	; 0x16128 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1613c:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   16140:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   16144:	81 81       	ldd	r24, Z+1	; 0x01
   16146:	90 e0       	ldi	r25, 0x00	; 0
   16148:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   1614c:	80 e0       	ldi	r24, 0x00	; 0
   1614e:	91 e0       	ldi	r25, 0x01	; 1
   16150:	9b 8b       	std	Y+19, r25	; 0x13
   16152:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16154:	ae 01       	movw	r20, r28
   16156:	4e 5e       	subi	r20, 0xEE	; 238
   16158:	5f 4f       	sbci	r21, 0xFF	; 255
   1615a:	60 e0       	ldi	r22, 0x00	; 0
   1615c:	72 e0       	ldi	r23, 0x02	; 2
   1615e:	8d ee       	ldi	r24, 0xED	; 237
   16160:	9c e1       	ldi	r25, 0x1C	; 28
   16162:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   16166:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16168:	8a 89       	ldd	r24, Y+18	; 0x12
   1616a:	9b 89       	ldd	r25, Y+19	; 0x13
   1616c:	88 27       	eor	r24, r24
   1616e:	90 7d       	andi	r25, 0xD0	; 208
   16170:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16174:	89 2b       	or	r24, r25
   16176:	c1 f0       	breq	.+48     	; 0x161a8 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16178:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1617c:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16180:	81 e0       	ldi	r24, 0x01	; 1
   16182:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16184:	87 81       	ldd	r24, Z+7	; 0x07
   16186:	90 85       	ldd	r25, Z+8	; 0x08
   16188:	80 62       	ori	r24, 0x20	; 32
   1618a:	90 87       	std	Z+8, r25	; 0x08
   1618c:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   1618e:	20 ff       	sbrs	r18, 0
   16190:	eb c1       	rjmp	.+982    	; 0x16568 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16192:	80 e7       	ldi	r24, 0x70	; 112
   16194:	93 e2       	ldi	r25, 0x23	; 35
   16196:	1f 92       	push	r1
   16198:	9f 93       	push	r25
   1619a:	8f 93       	push	r24
   1619c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   161a0:	0f 90       	pop	r0
   161a2:	0f 90       	pop	r0
   161a4:	0f 90       	pop	r0
   161a6:	e0 c1       	rjmp	.+960    	; 0x16568 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   161a8:	25 ff       	sbrs	r18, 5
   161aa:	10 c0       	rjmp	.+32     	; 0x161cc <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   161ac:	1f 93       	push	r17
   161ae:	0f 93       	push	r16
   161b0:	ff 92       	push	r15
   161b2:	ef 92       	push	r14
   161b4:	81 e4       	ldi	r24, 0x41	; 65
   161b6:	93 e2       	ldi	r25, 0x23	; 35
   161b8:	1f 92       	push	r1
   161ba:	9f 93       	push	r25
   161bc:	8f 93       	push	r24
   161be:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   161c2:	0f b6       	in	r0, 0x3f	; 63
   161c4:	f8 94       	cli
   161c6:	de bf       	out	0x3e, r29	; 62
   161c8:	0f be       	out	0x3f, r0	; 63
   161ca:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   161cc:	01 15       	cp	r16, r1
   161ce:	11 05       	cpc	r17, r1
   161d0:	61 f4       	brne	.+24     	; 0x161ea <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   161d2:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   161d6:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   161da:	81 e0       	ldi	r24, 0x01	; 1
   161dc:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   161de:	87 81       	ldd	r24, Z+7	; 0x07
   161e0:	90 85       	ldd	r25, Z+8	; 0x08
   161e2:	80 62       	ori	r24, 0x20	; 32
   161e4:	90 87       	std	Z+8, r25	; 0x08
   161e6:	87 83       	std	Z+7, r24	; 0x07
   161e8:	bf c1       	rjmp	.+894    	; 0x16568 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   161ea:	60 91 ed 1c 	lds	r22, 0x1CED	; 0x801ced <gpib_iobuff>

    if (secondary == 0x68)
   161ee:	98 e6       	ldi	r25, 0x68	; 104
   161f0:	e9 16       	cp	r14, r25
   161f2:	f1 04       	cpc	r15, r1
   161f4:	09 f0       	breq	.+2      	; 0x161f8 <Amigo_Command+0x244>
   161f6:	28 c1       	rjmp	.+592    	; 0x16448 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   161f8:	61 11       	cpse	r22, r1
   161fa:	2e c0       	rjmp	.+92     	; 0x16258 <Amigo_Command+0x2a4>
   161fc:	02 30       	cpi	r16, 0x02	; 2
   161fe:	11 05       	cpc	r17, r1
   16200:	09 f0       	breq	.+2      	; 0x16204 <Amigo_Command+0x250>
   16202:	b7 c1       	rjmp	.+878    	; 0x16572 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   16204:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16208:	85 ff       	sbrs	r24, 5
   1620a:	0a c0       	rjmp	.+20     	; 0x16220 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   1620c:	81 e2       	ldi	r24, 0x21	; 33
   1620e:	93 e2       	ldi	r25, 0x23	; 35
   16210:	1f 92       	push	r1
   16212:	9f 93       	push	r25
   16214:	8f 93       	push	r24
   16216:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1621a:	0f 90       	pop	r0
   1621c:	0f 90       	pop	r0
   1621e:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16220:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16224:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16228:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   1622a:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   1622c:	10 86       	std	Z+8, r1	; 0x08
   1622e:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   16230:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16232:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   16236:	98 2f       	mov	r25, r24
   16238:	92 95       	swap	r25
   1623a:	96 95       	lsr	r25
   1623c:	96 95       	lsr	r25
   1623e:	93 70       	andi	r25, 0x03	; 3
   16240:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   16242:	8f 73       	andi	r24, 0x3F	; 63
   16244:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16246:	ce 01       	movw	r24, r28
   16248:	01 96       	adiw	r24, 0x01	; 1
   1624a:	18 da       	rcall	.-3024   	; 0x1567c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   1624c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16250:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16254:	85 e0       	ldi	r24, 0x05	; 5
   16256:	5c c1       	rjmp	.+696    	; 0x16510 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16258:	62 30       	cpi	r22, 0x02	; 2
   1625a:	09 f0       	breq	.+2      	; 0x1625e <Amigo_Command+0x2aa>
   1625c:	3f c0       	rjmp	.+126    	; 0x162dc <Amigo_Command+0x328>
   1625e:	05 30       	cpi	r16, 0x05	; 5
   16260:	11 05       	cpc	r17, r1
   16262:	d1 f4       	brne	.+52     	; 0x16298 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   16264:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16268:	85 ff       	sbrs	r24, 5
   1626a:	0a c0       	rjmp	.+20     	; 0x16280 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   1626c:	8d e0       	ldi	r24, 0x0D	; 13
   1626e:	93 e2       	ldi	r25, 0x23	; 35
   16270:	1f 92       	push	r1
   16272:	9f 93       	push	r25
   16274:	8f 93       	push	r24
   16276:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1627a:	0f 90       	pop	r0
   1627c:	0f 90       	pop	r0
   1627e:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16280:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   16284:	83 de       	rcall	.-762    	; 0x15f8c <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16286:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x2>
   1628a:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   1628c:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   16290:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   16292:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
   16296:	1d c0       	rjmp	.+58     	; 0x162d2 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16298:	06 30       	cpi	r16, 0x06	; 6
   1629a:	11 05       	cpc	r17, r1
   1629c:	09 f0       	breq	.+2      	; 0x162a0 <Amigo_Command+0x2ec>
   1629e:	69 c1       	rjmp	.+722    	; 0x16572 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   162a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162a4:	85 ff       	sbrs	r24, 5
   162a6:	0a c0       	rjmp	.+20     	; 0x162bc <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   162a8:	89 ef       	ldi	r24, 0xF9	; 249
   162aa:	92 e2       	ldi	r25, 0x22	; 34
   162ac:	1f 92       	push	r1
   162ae:	9f 93       	push	r25
   162b0:	8f 93       	push	r24
   162b2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   162b6:	0f 90       	pop	r0
   162b8:	0f 90       	pop	r0
   162ba:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   162bc:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   162c0:	65 de       	rcall	.-822    	; 0x15f8c <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   162c2:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   162c6:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   162c8:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
   162cc:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   162ce:	80 91 f2 1c 	lds	r24, 0x1CF2	; 0x801cf2 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   162d2:	8e 83       	std	Y+6, r24	; 0x06
   162d4:	ce 01       	movw	r24, r28
   162d6:	01 96       	adiw	r24, 0x01	; 1
   162d8:	d1 d9       	rcall	.-3166   	; 0x1567c <amigo_seek>
   162da:	1b c1       	rjmp	.+566    	; 0x16512 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   162dc:	63 30       	cpi	r22, 0x03	; 3
   162de:	e9 f4       	brne	.+58     	; 0x1631a <Amigo_Command+0x366>
   162e0:	02 30       	cpi	r16, 0x02	; 2
   162e2:	11 05       	cpc	r17, r1
   162e4:	09 f0       	breq	.+2      	; 0x162e8 <Amigo_Command+0x334>
   162e6:	45 c1       	rjmp	.+650    	; 0x16572 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   162e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162ec:	85 ff       	sbrs	r24, 5
   162ee:	0a c0       	rjmp	.+20     	; 0x16304 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   162f0:	80 ed       	ldi	r24, 0xD0	; 208
   162f2:	92 e2       	ldi	r25, 0x22	; 34
   162f4:	1f 92       	push	r1
   162f6:	9f 93       	push	r25
   162f8:	8f 93       	push	r24
   162fa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   162fe:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16300:	0f 90       	pop	r0
   16302:	0f 90       	pop	r0
   16304:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            amigo_request_status();
   16308:	41 de       	rcall	.-894    	; 0x15f8c <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   1630a:	7b d8       	rcall	.-3850   	; 0x15402 <amigo_request_status>
   1630c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16310:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16314:	83 e0       	ldi	r24, 0x03	; 3
   16316:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16318:	27 c1       	rjmp	.+590    	; 0x16568 <Amigo_Command+0x5b4>
   1631a:	65 30       	cpi	r22, 0x05	; 5
   1631c:	d9 f4       	brne	.+54     	; 0x16354 <Amigo_Command+0x3a0>
   1631e:	02 30       	cpi	r16, 0x02	; 2
   16320:	11 05       	cpc	r17, r1
   16322:	09 f0       	breq	.+2      	; 0x16326 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   16324:	26 c1       	rjmp	.+588    	; 0x16572 <Amigo_Command+0x5be>
   16326:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1632a:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   1632c:	0a c0       	rjmp	.+20     	; 0x16342 <Amigo_Command+0x38e>
   1632e:	8f ea       	ldi	r24, 0xAF	; 175
   16330:	92 e2       	ldi	r25, 0x22	; 34
   16332:	1f 92       	push	r1
   16334:	9f 93       	push	r25
   16336:	8f 93       	push	r24
   16338:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1633c:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1633e:	0f 90       	pop	r0
   16340:	0f 90       	pop	r0
   16342:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16346:	22 de       	rcall	.-956    	; 0x15f8c <amigo_check_unit>
   16348:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1634c:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16350:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   16352:	de c0       	rjmp	.+444    	; 0x16510 <Amigo_Command+0x55c>
   16354:	67 30       	cpi	r22, 0x07	; 7
   16356:	f9 f4       	brne	.+62     	; 0x16396 <Amigo_Command+0x3e2>
   16358:	04 30       	cpi	r16, 0x04	; 4
   1635a:	11 05       	cpc	r17, r1
   1635c:	09 f0       	breq	.+2      	; 0x16360 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   1635e:	09 c1       	rjmp	.+530    	; 0x16572 <Amigo_Command+0x5be>
   16360:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16364:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   16366:	0a c0       	rjmp	.+20     	; 0x1637c <Amigo_Command+0x3c8>
   16368:	8f e9       	ldi	r24, 0x9F	; 159
   1636a:	92 e2       	ldi	r25, 0x22	; 34
   1636c:	1f 92       	push	r1
   1636e:	9f 93       	push	r25
   16370:	8f 93       	push	r24
   16372:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16376:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16378:	0f 90       	pop	r0
   1637a:	0f 90       	pop	r0
   1637c:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   16380:	05 de       	rcall	.-1014   	; 0x15f8c <amigo_check_unit>
   16382:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16386:	90 e0       	ldi	r25, 0x00	; 0
   16388:	98 2f       	mov	r25, r24
   1638a:	88 27       	eor	r24, r24
   1638c:	20 91 f0 1c 	lds	r18, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   16390:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   16392:	9f d9       	rcall	.-3266   	; 0x156d2 <amigo_verify>
   16394:	f1 c0       	rjmp	.+482    	; 0x16578 <Amigo_Command+0x5c4>
   16396:	68 30       	cpi	r22, 0x08	; 8
   16398:	d9 f4       	brne	.+54     	; 0x163d0 <Amigo_Command+0x41c>
   1639a:	02 30       	cpi	r16, 0x02	; 2
   1639c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1639e:	09 f0       	breq	.+2      	; 0x163a2 <Amigo_Command+0x3ee>
   163a0:	e8 c0       	rjmp	.+464    	; 0x16572 <Amigo_Command+0x5be>
   163a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   163a6:	85 ff       	sbrs	r24, 5
   163a8:	0a c0       	rjmp	.+20     	; 0x163be <Amigo_Command+0x40a>
   163aa:	8d e7       	ldi	r24, 0x7D	; 125
   163ac:	92 e2       	ldi	r25, 0x22	; 34
   163ae:	1f 92       	push	r1
   163b0:	9f 93       	push	r25
   163b2:	8f 93       	push	r24
   163b4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   163b8:	0f 90       	pop	r0
   163ba:	0f 90       	pop	r0
   163bc:	0f 90       	pop	r0
   163be:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   163c2:	e4 dd       	rcall	.-1080   	; 0x15f8c <amigo_check_unit>
   163c4:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   163c8:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   163cc:	88 e0       	ldi	r24, 0x08	; 8
   163ce:	a0 c0       	rjmp	.+320    	; 0x16510 <Amigo_Command+0x55c>
   163d0:	86 2f       	mov	r24, r22
   163d2:	8f 7d       	andi	r24, 0xDF	; 223
   163d4:	8b 30       	cpi	r24, 0x0B	; 11
   163d6:	d9 f4       	brne	.+54     	; 0x1640e <Amigo_Command+0x45a>
   163d8:	02 30       	cpi	r16, 0x02	; 2
   163da:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   163dc:	09 f0       	breq	.+2      	; 0x163e0 <Amigo_Command+0x42c>
   163de:	c9 c0       	rjmp	.+402    	; 0x16572 <Amigo_Command+0x5be>
   163e0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   163e4:	85 ff       	sbrs	r24, 5
   163e6:	0a c0       	rjmp	.+20     	; 0x163fc <Amigo_Command+0x448>
   163e8:	81 e6       	ldi	r24, 0x61	; 97
   163ea:	92 e2       	ldi	r25, 0x22	; 34
   163ec:	1f 92       	push	r1
   163ee:	9f 93       	push	r25
   163f0:	8f 93       	push	r24
   163f2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   163f6:	0f 90       	pop	r0
   163f8:	0f 90       	pop	r0
   163fa:	0f 90       	pop	r0
   163fc:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   16400:	c5 dd       	rcall	.-1142   	; 0x15f8c <amigo_check_unit>
   16402:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16406:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1640a:	8a e0       	ldi	r24, 0x0A	; 10
   1640c:	81 c0       	rjmp	.+258    	; 0x16510 <Amigo_Command+0x55c>
   1640e:	64 31       	cpi	r22, 0x14	; 20
   16410:	09 f0       	breq	.+2      	; 0x16414 <Amigo_Command+0x460>
   16412:	af c0       	rjmp	.+350    	; 0x16572 <Amigo_Command+0x5be>
   16414:	02 30       	cpi	r16, 0x02	; 2
   16416:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16418:	09 f0       	breq	.+2      	; 0x1641c <Amigo_Command+0x468>
   1641a:	ab c0       	rjmp	.+342    	; 0x16572 <Amigo_Command+0x5be>
   1641c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   16420:	85 ff       	sbrs	r24, 5
   16422:	0a c0       	rjmp	.+20     	; 0x16438 <Amigo_Command+0x484>
   16424:	88 e3       	ldi	r24, 0x38	; 56
   16426:	92 e2       	ldi	r25, 0x22	; 34
   16428:	1f 92       	push	r1
   1642a:	9f 93       	push	r25
   1642c:	8f 93       	push	r24
   1642e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16432:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   16434:	0f 90       	pop	r0
   16436:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   16438:	0e 94 f3 a9 	call	0x153e6	; 0x153e6 <amigo_request_logical_address>
   1643c:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16440:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16444:	84 e0       	ldi	r24, 0x04	; 4
   16446:	64 c0       	rjmp	.+200    	; 0x16510 <Amigo_Command+0x55c>
   16448:	89 e6       	ldi	r24, 0x69	; 105
   1644a:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   1644c:	f1 04       	cpc	r15, r1
   1644e:	f1 f4       	brne	.+60     	; 0x1648c <Amigo_Command+0x4d8>
   16450:	68 30       	cpi	r22, 0x08	; 8
   16452:	09 f0       	breq	.+2      	; 0x16456 <Amigo_Command+0x4a2>
   16454:	8e c0       	rjmp	.+284    	; 0x16572 <Amigo_Command+0x5be>
   16456:	02 30       	cpi	r16, 0x02	; 2
   16458:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1645a:	09 f0       	breq	.+2      	; 0x1645e <Amigo_Command+0x4aa>
   1645c:	8a c0       	rjmp	.+276    	; 0x16572 <Amigo_Command+0x5be>
   1645e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   16462:	85 ff       	sbrs	r24, 5
   16464:	0a c0       	rjmp	.+20     	; 0x1647a <Amigo_Command+0x4c6>
   16466:	88 e1       	ldi	r24, 0x18	; 24
   16468:	92 e2       	ldi	r25, 0x22	; 34
   1646a:	1f 92       	push	r1
   1646c:	9f 93       	push	r25
   1646e:	8f 93       	push	r24
   16470:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16474:	0f 90       	pop	r0
   16476:	0f 90       	pop	r0
   16478:	0f 90       	pop	r0
   1647a:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   1647e:	86 dd       	rcall	.-1268   	; 0x15f8c <amigo_check_unit>
   16480:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   16484:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   16488:	89 e0       	ldi	r24, 0x09	; 9
   1648a:	42 c0       	rjmp	.+132    	; 0x16510 <Amigo_Command+0x55c>
   1648c:	9a e6       	ldi	r25, 0x6A	; 106
   1648e:	e9 16       	cp	r14, r25
   16490:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   16492:	09 f0       	breq	.+2      	; 0x16496 <Amigo_Command+0x4e2>
   16494:	47 c0       	rjmp	.+142    	; 0x16524 <Amigo_Command+0x570>
   16496:	68 30       	cpi	r22, 0x08	; 8
   16498:	f1 f4       	brne	.+60     	; 0x164d6 <Amigo_Command+0x522>
   1649a:	02 30       	cpi	r16, 0x02	; 2
   1649c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1649e:	09 f0       	breq	.+2      	; 0x164a2 <Amigo_Command+0x4ee>
   164a0:	68 c0       	rjmp	.+208    	; 0x16572 <Amigo_Command+0x5be>
   164a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   164a6:	85 ff       	sbrs	r24, 5
   164a8:	0a c0       	rjmp	.+20     	; 0x164be <Amigo_Command+0x50a>
   164aa:	8d ee       	ldi	r24, 0xED	; 237
   164ac:	91 e2       	ldi	r25, 0x21	; 33
   164ae:	1f 92       	push	r1
   164b0:	9f 93       	push	r25
   164b2:	8f 93       	push	r24
   164b4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   164b8:	0f 90       	pop	r0
   164ba:	0f 90       	pop	r0
   164bc:	0f 90       	pop	r0
   164be:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   164c2:	64 dd       	rcall	.-1336   	; 0x15f8c <amigo_check_unit>
   164c4:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   164c8:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            amigo_request_status();
   164cc:	82 e0       	ldi	r24, 0x02	; 2
   164ce:	80 83       	st	Z, r24
   164d0:	0e 94 01 aa 	call	0x15402	; 0x15402 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   164d4:	49 c0       	rjmp	.+146    	; 0x16568 <Amigo_Command+0x5b4>
   164d6:	65 30       	cpi	r22, 0x05	; 5
   164d8:	09 f0       	breq	.+2      	; 0x164dc <Amigo_Command+0x528>
   164da:	4b c0       	rjmp	.+150    	; 0x16572 <Amigo_Command+0x5be>
   164dc:	02 30       	cpi	r16, 0x02	; 2
   164de:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   164e0:	09 f0       	breq	.+2      	; 0x164e4 <Amigo_Command+0x530>
   164e2:	47 c0       	rjmp	.+142    	; 0x16572 <Amigo_Command+0x5be>
   164e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   164e8:	85 ff       	sbrs	r24, 5
   164ea:	0a c0       	rjmp	.+20     	; 0x16500 <Amigo_Command+0x54c>
   164ec:	8e ec       	ldi	r24, 0xCE	; 206
   164ee:	91 e2       	ldi	r25, 0x21	; 33
   164f0:	1f 92       	push	r1
   164f2:	9f 93       	push	r25
   164f4:	8f 93       	push	r24
   164f6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   164fa:	0f 90       	pop	r0
   164fc:	0f 90       	pop	r0
   164fe:	0f 90       	pop	r0
   16500:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   16504:	43 dd       	rcall	.-1402   	; 0x15f8c <amigo_check_unit>
   16506:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1650a:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1650e:	87 e0       	ldi	r24, 0x07	; 7
   16510:	80 83       	st	Z, r24
   16512:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   16516:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   1651a:	81 81       	ldd	r24, Z+1	; 0x01
   1651c:	90 e0       	ldi	r25, 0x00	; 0
   1651e:	0e 94 ef 8d 	call	0x11bde	; 0x11bde <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   16522:	22 c0       	rjmp	.+68     	; 0x16568 <Amigo_Command+0x5b4>
   16524:	8c e6       	ldi	r24, 0x6C	; 108
   16526:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   16528:	f1 04       	cpc	r15, r1
   1652a:	d1 f4       	brne	.+52     	; 0x16560 <Amigo_Command+0x5ac>
   1652c:	68 31       	cpi	r22, 0x18	; 24
   1652e:	09 f5       	brne	.+66     	; 0x16572 <Amigo_Command+0x5be>
   16530:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   16532:	11 05       	cpc	r17, r1
   16534:	f1 f4       	brne	.+60     	; 0x16572 <Amigo_Command+0x5be>
   16536:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   1653a:	85 ff       	sbrs	r24, 5
   1653c:	0a c0       	rjmp	.+20     	; 0x16552 <Amigo_Command+0x59e>
   1653e:	8e eb       	ldi	r24, 0xBE	; 190
   16540:	91 e2       	ldi	r25, 0x21	; 33
   16542:	1f 92       	push	r1
   16544:	9f 93       	push	r25
   16546:	8f 93       	push	r24
   16548:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1654c:	0f 90       	pop	r0
   1654e:	0f 90       	pop	r0
   16550:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   16552:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   16556:	1a dd       	rcall	.-1484   	; 0x15f8c <amigo_check_unit>
   16558:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1655c:	4b d9       	rcall	.-3434   	; 0x157f4 <amigo_format>
   1655e:	04 c0       	rjmp	.+8      	; 0x16568 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   16560:	90 e7       	ldi	r25, 0x70	; 112
   16562:	e9 16       	cp	r14, r25
   16564:	f1 04       	cpc	r15, r1
   16566:	29 f4       	brne	.+10     	; 0x16572 <Amigo_Command+0x5be>
   16568:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   1656a:	9b 89       	ldd	r25, Y+19	; 0x13
   1656c:	88 27       	eor	r24, r24
   1656e:	90 7d       	andi	r25, 0xD0	; 208
   16570:	03 c0       	rjmp	.+6      	; 0x16578 <Amigo_Command+0x5c4>
}
   16572:	a8 01       	movw	r20, r16
   16574:	8e 2d       	mov	r24, r14
   16576:	d1 db       	rcall	.-2142   	; 0x15d1a <amigo_todo_op>
   16578:	63 96       	adiw	r28, 0x13	; 19
   1657a:	e6 e0       	ldi	r30, 0x06	; 6
   1657c:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00016580 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   16580:	cf 93       	push	r28
   16582:	df 93       	push	r29
   16584:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   16586:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1658a:	85 ff       	sbrs	r24, 5
   1658c:	19 c0       	rjmp	.+50     	; 0x165c0 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1658e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16592:	1f 92       	push	r1
   16594:	8f 93       	push	r24
   16596:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1659a:	1f 92       	push	r1
   1659c:	8f 93       	push	r24
   1659e:	df 93       	push	r29
   165a0:	cf 93       	push	r28
   165a2:	8c e8       	ldi	r24, 0x8C	; 140
   165a4:	91 e2       	ldi	r25, 0x21	; 33
   165a6:	1f 92       	push	r1
   165a8:	9f 93       	push	r25
   165aa:	8f 93       	push	r24
   165ac:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   165b0:	8d b7       	in	r24, 0x3d	; 61
   165b2:	9e b7       	in	r25, 0x3e	; 62
   165b4:	09 96       	adiw	r24, 0x09	; 9
   165b6:	0f b6       	in	r0, 0x3f	; 63
   165b8:	f8 94       	cli
   165ba:	9e bf       	out	0x3e, r25	; 62
   165bc:	0f be       	out	0x3f, r0	; 63
   165be:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   165c0:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   165c4:	8f 35       	cpi	r24, 0x5F	; 95
   165c6:	09 f4       	brne	.+2      	; 0x165ca <Amigo_Execute+0x4a>
   165c8:	ad c0       	rjmp	.+346    	; 0x16724 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   165ca:	90 e0       	ldi	r25, 0x00	; 0
   165cc:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   165d0:	89 2b       	or	r24, r25
   165d2:	39 f0       	breq	.+14     	; 0x165e2 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   165d4:	ce 01       	movw	r24, r28
   165d6:	87 7f       	andi	r24, 0xF7	; 247
   165d8:	80 36       	cpi	r24, 0x60	; 96
   165da:	91 05       	cpc	r25, r1
   165dc:	09 f0       	breq	.+2      	; 0x165e0 <Amigo_Execute+0x60>
   165de:	a2 c0       	rjmp	.+324    	; 0x16724 <Amigo_Execute+0x1a4>
   165e0:	08 c0       	rjmp	.+16     	; 0x165f2 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   165e2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   165e6:	90 e0       	ldi	r25, 0x00	; 0
   165e8:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   165ec:	89 2b       	or	r24, r25
   165ee:	91 f7       	brne	.-28     	; 0x165d4 <Amigo_Execute+0x54>
   165f0:	99 c0       	rjmp	.+306    	; 0x16724 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   165f2:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   165f6:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   165fa:	81 81       	ldd	r24, Z+1	; 0x01
   165fc:	90 e0       	ldi	r25, 0x00	; 0
   165fe:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>

    if(secondary == 0x60)
   16602:	c0 36       	cpi	r28, 0x60	; 96
   16604:	d1 05       	cpc	r29, r1
   16606:	09 f0       	breq	.+2      	; 0x1660a <Amigo_Execute+0x8a>
   16608:	4e c0       	rjmp	.+156    	; 0x166a6 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   1660a:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   1660e:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   16612:	e0 81       	ld	r30, Z
   16614:	8e 2f       	mov	r24, r30
   16616:	90 e0       	ldi	r25, 0x00	; 0
   16618:	8b 30       	cpi	r24, 0x0B	; 11
   1661a:	91 05       	cpc	r25, r1
   1661c:	08 f0       	brcs	.+2      	; 0x16620 <Amigo_Execute+0xa0>
   1661e:	41 c0       	rjmp	.+130    	; 0x166a2 <Amigo_Execute+0x122>
   16620:	fc 01       	movw	r30, r24
   16622:	e0 53       	subi	r30, 0x30	; 48
   16624:	ff 4f       	sbci	r31, 0xFF	; 255
   16626:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   1662a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1662e:	85 ff       	sbrs	r24, 5
   16630:	18 c0       	rjmp	.+48     	; 0x16662 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   16632:	8c e6       	ldi	r24, 0x6C	; 108
   16634:	91 e2       	ldi	r25, 0x21	; 33
   16636:	0d c0       	rjmp	.+26     	; 0x16652 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16638:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1663c:	85 ff       	sbrs	r24, 5
   1663e:	11 c0       	rjmp	.+34     	; 0x16662 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   16640:	8b e4       	ldi	r24, 0x4B	; 75
   16642:	91 e2       	ldi	r25, 0x21	; 33
   16644:	06 c0       	rjmp	.+12     	; 0x16652 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16646:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1664a:	85 ff       	sbrs	r24, 5
   1664c:	0a c0       	rjmp	.+20     	; 0x16662 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   1664e:	8c e2       	ldi	r24, 0x2C	; 44
   16650:	91 e2       	ldi	r25, 0x21	; 33
   16652:	1f 92       	push	r1
   16654:	9f 93       	push	r25
   16656:	8f 93       	push	r24
   16658:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1665c:	0f 90       	pop	r0
   1665e:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   16660:	0f 90       	pop	r0
   16662:	5a d9       	rcall	.-3404   	; 0x15918 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16664:	61 c0       	rjmp	.+194    	; 0x16728 <Amigo_Execute+0x1a8>
   16666:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1666a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   1666c:	18 c0       	rjmp	.+48     	; 0x1669e <Amigo_Execute+0x11e>
   1666e:	8a e0       	ldi	r24, 0x0A	; 10
   16670:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   16672:	0d c0       	rjmp	.+26     	; 0x1668e <Amigo_Execute+0x10e>
   16674:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16678:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   1667a:	11 c0       	rjmp	.+34     	; 0x1669e <Amigo_Execute+0x11e>
   1667c:	8e ee       	ldi	r24, 0xEE	; 238
   1667e:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16680:	06 c0       	rjmp	.+12     	; 0x1668e <Amigo_Execute+0x10e>
   16682:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16686:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   16688:	0a c0       	rjmp	.+20     	; 0x1669e <Amigo_Execute+0x11e>
   1668a:	8e ec       	ldi	r24, 0xCE	; 206
   1668c:	90 e2       	ldi	r25, 0x20	; 32
   1668e:	1f 92       	push	r1
   16690:	9f 93       	push	r25
   16692:	8f 93       	push	r24
   16694:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16698:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   1669a:	0f 90       	pop	r0
   1669c:	0f 90       	pop	r0
   1669e:	00 da       	rcall	.-3072   	; 0x15aa0 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   166a0:	43 c0       	rjmp	.+134    	; 0x16728 <Amigo_Execute+0x1a8>
   166a2:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   166a4:	3d c0       	rjmp	.+122    	; 0x16720 <Amigo_Execute+0x1a0>
   166a6:	c8 36       	cpi	r28, 0x68	; 104
   166a8:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   166aa:	e1 f5       	brne	.+120    	; 0x16724 <Amigo_Execute+0x1a4>
   166ac:	e0 91 9e 19 	lds	r30, 0x199E	; 0x80199e <AMIGOs>
   166b0:	f0 91 9f 19 	lds	r31, 0x199F	; 0x80199f <AMIGOs+0x1>
   166b4:	80 81       	ld	r24, Z
   166b6:	82 30       	cpi	r24, 0x02	; 2
   166b8:	81 f0       	breq	.+32     	; 0x166da <Amigo_Execute+0x15a>
   166ba:	18 f4       	brcc	.+6      	; 0x166c2 <Amigo_Execute+0x142>
   166bc:	88 23       	and	r24, r24
   166be:	91 f1       	breq	.+100    	; 0x16724 <Amigo_Execute+0x1a4>
   166c0:	2e c0       	rjmp	.+92     	; 0x1671e <Amigo_Execute+0x19e>
   166c2:	83 30       	cpi	r24, 0x03	; 3
   166c4:	19 f0       	breq	.+6      	; 0x166cc <Amigo_Execute+0x14c>
   166c6:	84 30       	cpi	r24, 0x04	; 4
   166c8:	c9 f0       	breq	.+50     	; 0x166fc <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   166ca:	29 c0       	rjmp	.+82     	; 0x1671e <Amigo_Execute+0x19e>
   166cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166d0:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   166d2:	11 c0       	rjmp	.+34     	; 0x166f6 <Amigo_Execute+0x176>
   166d4:	85 ea       	ldi	r24, 0xA5	; 165
   166d6:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   166d8:	06 c0       	rjmp	.+12     	; 0x166e6 <Amigo_Execute+0x166>
   166da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166de:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   166e0:	0a c0       	rjmp	.+20     	; 0x166f6 <Amigo_Execute+0x176>
   166e2:	8a e7       	ldi	r24, 0x7A	; 122
   166e4:	90 e2       	ldi	r25, 0x20	; 32
   166e6:	1f 92       	push	r1
   166e8:	9f 93       	push	r25
   166ea:	8f 93       	push	r24
   166ec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   166f0:	0f 90       	pop	r0
   166f2:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   166f4:	0f 90       	pop	r0
   166f6:	0e 94 b7 aa 	call	0x1556e	; 0x1556e <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   166fa:	16 c0       	rjmp	.+44     	; 0x16728 <Amigo_Execute+0x1a8>
   166fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16700:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   16702:	0a c0       	rjmp	.+20     	; 0x16718 <Amigo_Execute+0x198>
   16704:	81 e5       	ldi	r24, 0x51	; 81
   16706:	90 e2       	ldi	r25, 0x20	; 32
   16708:	1f 92       	push	r1
   1670a:	9f 93       	push	r25
   1670c:	8f 93       	push	r24
   1670e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16712:	0f 90       	pop	r0
   16714:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   16716:	0f 90       	pop	r0
   16718:	0e 94 59 aa 	call	0x154b2	; 0x154b2 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   1671c:	05 c0       	rjmp	.+10     	; 0x16728 <Amigo_Execute+0x1a8>
   1671e:	88 e6       	ldi	r24, 0x68	; 104
   16720:	a5 db       	rcall	.-2230   	; 0x15e6c <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   16722:	02 c0       	rjmp	.+4      	; 0x16728 <Amigo_Execute+0x1a8>
   16724:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   16726:	90 e0       	ldi	r25, 0x00	; 0
   16728:	df 91       	pop	r29
   1672a:	cf 91       	pop	r28
   1672c:	08 95       	ret

0001672e <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1672e:	cf 93       	push	r28
   16730:	df 93       	push	r29
   16732:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16734:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16738:	90 e0       	ldi	r25, 0x00	; 0
   1673a:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   1673e:	89 2b       	or	r24, r25
   16740:	51 f0       	breq	.+20     	; 0x16756 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   16742:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16746:	8f 35       	cpi	r24, 0x5F	; 95
   16748:	71 f4       	brne	.+28     	; 0x16766 <AMIGO_COMMANDS+0x38>
   1674a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1674e:	90 e0       	ldi	r25, 0x00	; 0
   16750:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   16754:	08 c0       	rjmp	.+16     	; 0x16766 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16756:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1675a:	90 e0       	ldi	r25, 0x00	; 0
   1675c:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   16760:	89 2b       	or	r24, r25
   16762:	79 f7       	brne	.-34     	; 0x16742 <AMIGO_COMMANDS+0x14>
   16764:	76 c0       	rjmp	.+236    	; 0x16852 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   16766:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1676a:	81 11       	cpse	r24, r1
   1676c:	05 c0       	rjmp	.+10     	; 0x16778 <AMIGO_COMMANDS+0x4a>
   1676e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16772:	90 e0       	ldi	r25, 0x00	; 0
   16774:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   16778:	c0 36       	cpi	r28, 0x60	; 96
   1677a:	99 f4       	brne	.+38     	; 0x167a2 <AMIGO_COMMANDS+0x74>
   1677c:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16780:	90 e0       	ldi	r25, 0x00	; 0
   16782:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   16786:	89 2b       	or	r24, r25
   16788:	19 f0       	breq	.+6      	; 0x16790 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   1678a:	80 e6       	ldi	r24, 0x60	; 96
   1678c:	90 e0       	ldi	r25, 0x00	; 0
   1678e:	14 c0       	rjmp	.+40     	; 0x167b8 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   16790:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16794:	90 e0       	ldi	r25, 0x00	; 0
   16796:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   1679a:	89 2b       	or	r24, r25
   1679c:	09 f4       	brne	.+2      	; 0x167a0 <AMIGO_COMMANDS+0x72>
   1679e:	59 c0       	rjmp	.+178    	; 0x16852 <AMIGO_COMMANDS+0x124>
   167a0:	f4 cf       	rjmp	.-24     	; 0x1678a <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   167a2:	c8 36       	cpi	r28, 0x68	; 104
   167a4:	c1 f4       	brne	.+48     	; 0x167d6 <AMIGO_COMMANDS+0xa8>
   167a6:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   167aa:	90 e0       	ldi	r25, 0x00	; 0
   167ac:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   167b0:	89 2b       	or	r24, r25
   167b2:	21 f0       	breq	.+8      	; 0x167bc <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   167b4:	88 e6       	ldi	r24, 0x68	; 104
   167b6:	90 e0       	ldi	r25, 0x00	; 0
   167b8:	e3 de       	rcall	.-570    	; 0x16580 <Amigo_Execute>
   167ba:	0b c0       	rjmp	.+22     	; 0x167d2 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   167bc:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   167c0:	90 e0       	ldi	r25, 0x00	; 0
   167c2:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   167c6:	89 2b       	or	r24, r25
   167c8:	09 f4       	brne	.+2      	; 0x167cc <AMIGO_COMMANDS+0x9e>
   167ca:	43 c0       	rjmp	.+134    	; 0x16852 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   167cc:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   167ce:	90 e0       	ldi	r25, 0x00	; 0
   167d0:	f1 db       	rcall	.-2078   	; 0x15fb4 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   167d2:	ec 01       	movw	r28, r24
   167d4:	40 c0       	rjmp	.+128    	; 0x16856 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   167d6:	c9 36       	cpi	r28, 0x69	; 105
   167d8:	51 f4       	brne	.+20     	; 0x167ee <AMIGO_COMMANDS+0xc0>
   167da:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   167de:	90 e0       	ldi	r25, 0x00	; 0
   167e0:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   167e4:	89 2b       	or	r24, r25
   167e6:	a9 f1       	breq	.+106    	; 0x16852 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   167e8:	89 e6       	ldi	r24, 0x69	; 105
   167ea:	90 e0       	ldi	r25, 0x00	; 0
   167ec:	f1 cf       	rjmp	.-30     	; 0x167d0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   167ee:	ca 36       	cpi	r28, 0x6A	; 106
   167f0:	51 f4       	brne	.+20     	; 0x16806 <AMIGO_COMMANDS+0xd8>
   167f2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   167f6:	90 e0       	ldi	r25, 0x00	; 0
   167f8:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   167fc:	89 2b       	or	r24, r25
   167fe:	49 f1       	breq	.+82     	; 0x16852 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16800:	8a e6       	ldi	r24, 0x6A	; 106
   16802:	90 e0       	ldi	r25, 0x00	; 0
   16804:	e5 cf       	rjmp	.-54     	; 0x167d0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   16806:	cc 36       	cpi	r28, 0x6C	; 108
   16808:	51 f4       	brne	.+20     	; 0x1681e <AMIGO_COMMANDS+0xf0>
   1680a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1680e:	90 e0       	ldi	r25, 0x00	; 0
   16810:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   16814:	89 2b       	or	r24, r25
   16816:	e9 f0       	breq	.+58     	; 0x16852 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16818:	8c e6       	ldi	r24, 0x6C	; 108
   1681a:	90 e0       	ldi	r25, 0x00	; 0
   1681c:	d9 cf       	rjmp	.-78     	; 0x167d0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   1681e:	c0 37       	cpi	r28, 0x70	; 112
   16820:	c1 f4       	brne	.+48     	; 0x16852 <AMIGO_COMMANDS+0x124>
   16822:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16826:	90 e0       	ldi	r25, 0x00	; 0
   16828:	0e 94 2b 94 	call	0x12856	; 0x12856 <AMIGO_is_MTA>
   1682c:	ec 01       	movw	r28, r24
   1682e:	89 2b       	or	r24, r25
   16830:	51 f0       	breq	.+20     	; 0x16846 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16832:	e0 91 a0 19 	lds	r30, 0x19A0	; 0x8019a0 <AMIGOp>
   16836:	f0 91 a1 19 	lds	r31, 0x19A1	; 0x8019a1 <AMIGOp+0x1>
   1683a:	81 81       	ldd	r24, Z+1	; 0x01
   1683c:	90 e0       	ldi	r25, 0x00	; 0
   1683e:	0e 94 20 8e 	call	0x11c40	; 0x11c40 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   16842:	e6 d9       	rcall	.-3124   	; 0x15c10 <amigo_cmd_dsj>
   16844:	c6 cf       	rjmp	.-116    	; 0x167d2 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   16846:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1684a:	90 e0       	ldi	r25, 0x00	; 0
   1684c:	0e 94 1a 94 	call	0x12834	; 0x12834 <AMIGO_is_MLA>
   16850:	02 c0       	rjmp	.+4      	; 0x16856 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   16852:	c0 e0       	ldi	r28, 0x00	; 0
   16854:	d0 e0       	ldi	r29, 0x00	; 0
}
   16856:	ce 01       	movw	r24, r28
   16858:	df 91       	pop	r29
   1685a:	cf 91       	pop	r28
   1685c:	08 95       	ret

0001685e <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1685e:	ef e8       	ldi	r30, 0x8F	; 143
   16860:	f9 e1       	ldi	r31, 0x19	; 25
   16862:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   16864:	10 82       	st	Z, r1
   16866:	11 82       	std	Z+1, r1	; 0x01
   16868:	12 82       	std	Z+2, r1	; 0x02
   1686a:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   1686c:	15 82       	std	Z+5, r1	; 0x05
   1686e:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   16870:	12 86       	std	Z+10, r1	; 0x0a
   16872:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   16874:	14 86       	std	Z+12, r1	; 0x0c
   16876:	13 86       	std	Z+11, r1	; 0x0b
   16878:	08 95       	ret

0001687a <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   1687a:	cf 93       	push	r28
   1687c:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1687e:	20 91 98 19 	lds	r18, 0x1998	; 0x801998 <plot+0x9>
   16882:	30 91 99 19 	lds	r19, 0x1999	; 0x801999 <plot+0xa>
   16886:	21 15       	cp	r18, r1
   16888:	31 05       	cpc	r19, r1
   1688a:	09 f4       	brne	.+2      	; 0x1688e <receive_plot_flush+0x14>
   1688c:	4a c0       	rjmp	.+148    	; 0x16922 <receive_plot_flush+0xa8>
   1688e:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot+0x4>
   16892:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x5>
   16896:	00 97       	sbiw	r24, 0x00	; 0
   16898:	09 f4       	brne	.+2      	; 0x1689c <receive_plot_flush+0x22>
   1689a:	45 c0       	rjmp	.+138    	; 0x16926 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   1689c:	ac 01       	movw	r20, r24
   1689e:	61 e0       	ldi	r22, 0x01	; 1
   168a0:	70 e0       	ldi	r23, 0x00	; 0
   168a2:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot+0xb>
   168a6:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <plot+0xc>
   168aa:	0e 94 db 81 	call	0x103b6	; 0x103b6 <fwrite>
   168ae:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   168b0:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot+0x4>
   168b4:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x5>
   168b8:	c8 17       	cp	r28, r24
   168ba:	d9 07       	cpc	r29, r25
   168bc:	31 f1       	breq	.+76     	; 0x1690a <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   168be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168c2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   168c6:	81 72       	andi	r24, 0x21	; 33
   168c8:	99 27       	eor	r25, r25
   168ca:	89 2b       	or	r24, r25
   168cc:	d9 f0       	breq	.+54     	; 0x16904 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   168ce:	8e e4       	ldi	r24, 0x4E	; 78
   168d0:	93 e1       	ldi	r25, 0x13	; 19
   168d2:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   168d6:	df 93       	push	r29
   168d8:	cf 93       	push	r28
   168da:	80 91 94 19 	lds	r24, 0x1994	; 0x801994 <plot+0x5>
   168de:	8f 93       	push	r24
   168e0:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot+0x4>
   168e4:	8f 93       	push	r24
   168e6:	85 e1       	ldi	r24, 0x15	; 21
   168e8:	99 e2       	ldi	r25, 0x29	; 41
   168ea:	1f 92       	push	r1
   168ec:	9f 93       	push	r25
   168ee:	8f 93       	push	r24
   168f0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   168f4:	8d b7       	in	r24, 0x3d	; 61
   168f6:	9e b7       	in	r25, 0x3e	; 62
   168f8:	07 96       	adiw	r24, 0x07	; 7
   168fa:	0f b6       	in	r0, 0x3f	; 63
   168fc:	f8 94       	cli
   168fe:	9e bf       	out	0x3e, r25	; 62
   16900:	0f be       	out	0x3f, r0	; 63
   16902:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   16904:	8f ef       	ldi	r24, 0xFF	; 255
   16906:	9f ef       	ldi	r25, 0xFF	; 255
   16908:	0e c0       	rjmp	.+28     	; 0x16926 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   1690a:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x9>
   1690e:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0xa>
   16912:	0e 94 26 7b 	call	0xf64c	; 0xf64c <fileno>
    if(fno < 0)
   16916:	97 fd       	sbrc	r25, 7
   16918:	f5 cf       	rjmp	.-22     	; 0x16904 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   1691a:	0e 94 25 81 	call	0x1024a	; 0x1024a <syncfs>
    return (ret);
   1691e:	ce 01       	movw	r24, r28
   16920:	02 c0       	rjmp	.+4      	; 0x16926 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   16922:	80 e0       	ldi	r24, 0x00	; 0
   16924:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   16926:	df 91       	pop	r29
   16928:	cf 91       	pop	r28
   1692a:	08 95       	ret

0001692c <printer_close>:
   1692c:	a6 df       	rcall	.-180    	; 0x1687a <receive_plot_flush>
   1692e:	97 ff       	sbrs	r25, 7
   16930:	03 c0       	rjmp	.+6      	; 0x16938 <printer_close+0xc>
   16932:	81 e0       	ldi	r24, 0x01	; 1
   16934:	80 93 97 19 	sts	0x1997, r24	; 0x801997 <plot+0x8>
   16938:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1693c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16940:	81 72       	andi	r24, 0x21	; 33
   16942:	99 27       	eor	r25, r25
   16944:	89 2b       	or	r24, r25
   16946:	71 f0       	breq	.+28     	; 0x16964 <printer_close+0x38>
   16948:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x8>
   1694c:	88 23       	and	r24, r24
   1694e:	51 f0       	breq	.+20     	; 0x16964 <printer_close+0x38>
   16950:	84 e4       	ldi	r24, 0x44	; 68
   16952:	99 e2       	ldi	r25, 0x29	; 41
   16954:	1f 92       	push	r1
   16956:	9f 93       	push	r25
   16958:	8f 93       	push	r24
   1695a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1695e:	0f 90       	pop	r0
   16960:	0f 90       	pop	r0
   16962:	0f 90       	pop	r0
   16964:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x9>
   16968:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0xa>
   1696c:	00 97       	sbiw	r24, 0x00	; 0
   1696e:	09 f1       	breq	.+66     	; 0x169b2 <printer_close+0x86>
   16970:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
   16974:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16978:	85 ff       	sbrs	r24, 5
   1697a:	1b c0       	rjmp	.+54     	; 0x169b2 <printer_close+0x86>
   1697c:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <plot+0x3>
   16980:	8f 93       	push	r24
   16982:	80 91 91 19 	lds	r24, 0x1991	; 0x801991 <plot+0x2>
   16986:	8f 93       	push	r24
   16988:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <plot+0x1>
   1698c:	8f 93       	push	r24
   1698e:	80 91 8f 19 	lds	r24, 0x198F	; 0x80198f <plot>
   16992:	8f 93       	push	r24
   16994:	86 e3       	ldi	r24, 0x36	; 54
   16996:	99 e2       	ldi	r25, 0x29	; 41
   16998:	1f 92       	push	r1
   1699a:	9f 93       	push	r25
   1699c:	8f 93       	push	r24
   1699e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   169a2:	8d b7       	in	r24, 0x3d	; 61
   169a4:	9e b7       	in	r25, 0x3e	; 62
   169a6:	07 96       	adiw	r24, 0x07	; 7
   169a8:	0f b6       	in	r0, 0x3f	; 63
   169aa:	f8 94       	cli
   169ac:	9e bf       	out	0x3e, r25	; 62
   169ae:	0f be       	out	0x3f, r0	; 63
   169b0:	8d bf       	out	0x3d, r24	; 61
   169b2:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot+0xb>
   169b6:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <plot+0xc>
   169ba:	00 97       	sbiw	r24, 0x00	; 0
   169bc:	11 f0       	breq	.+4      	; 0x169c2 <printer_close+0x96>
   169be:	0e 94 11 2a 	call	0x5422	; 0x5422 <safefree>
   169c2:	4d cf       	rjmp	.-358    	; 0x1685e <printer_init>
   169c4:	08 95       	ret

000169c6 <printer_open>:
   169c6:	ac e4       	ldi	r26, 0x4C	; 76
   169c8:	b0 e0       	ldi	r27, 0x00	; 0
   169ca:	e9 ee       	ldi	r30, 0xE9	; 233
   169cc:	f4 eb       	ldi	r31, 0xB4	; 180
   169ce:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   169d2:	8c 01       	movw	r16, r24
   169d4:	89 2b       	or	r24, r25
   169d6:	09 f0       	breq	.+2      	; 0x169da <printer_open+0x14>
   169d8:	4b c0       	rjmp	.+150    	; 0x16a70 <printer_open+0xaa>
   169da:	be 01       	movw	r22, r28
   169dc:	6f 5b       	subi	r22, 0xBF	; 191
   169de:	7f 4f       	sbci	r23, 0xFF	; 255
   169e0:	80 e0       	ldi	r24, 0x00	; 0
   169e2:	90 e0       	ldi	r25, 0x00	; 0
   169e4:	0e 94 34 34 	call	0x6868	; 0x6868 <clock_gettime>
   169e8:	25 96       	adiw	r28, 0x05	; 5
   169ea:	8c ad       	ldd	r24, Y+60	; 0x3c
   169ec:	9d ad       	ldd	r25, Y+61	; 0x3d
   169ee:	ae ad       	ldd	r26, Y+62	; 0x3e
   169f0:	bf ad       	ldd	r27, Y+63	; 0x3f
   169f2:	25 97       	sbiw	r28, 0x05	; 5
   169f4:	2d 96       	adiw	r28, 0x0d	; 13
   169f6:	8c af       	std	Y+60, r24	; 0x3c
   169f8:	9d af       	std	Y+61, r25	; 0x3d
   169fa:	ae af       	std	Y+62, r26	; 0x3e
   169fc:	bf af       	std	Y+63, r27	; 0x3f
   169fe:	2d 97       	sbiw	r28, 0x0d	; 13
   16a00:	ce 01       	movw	r24, r28
   16a02:	87 5b       	subi	r24, 0xB7	; 183
   16a04:	9f 4f       	sbci	r25, 0xFF	; 255
   16a06:	0e 94 04 38 	call	0x7008	; 0x7008 <gmtime>
   16a0a:	8c 01       	movw	r16, r24
   16a0c:	fc 01       	movw	r30, r24
   16a0e:	90 80       	ld	r9, Z
   16a10:	81 80       	ldd	r8, Z+1	; 0x01
   16a12:	b2 80       	ldd	r11, Z+2	; 0x02
   16a14:	a3 80       	ldd	r10, Z+3	; 0x03
   16a16:	d4 80       	ldd	r13, Z+4	; 0x04
   16a18:	c5 80       	ldd	r12, Z+5	; 0x05
   16a1a:	e2 84       	ldd	r14, Z+10	; 0x0a
   16a1c:	f3 84       	ldd	r15, Z+11	; 0x0b
   16a1e:	f4 e9       	ldi	r31, 0x94	; 148
   16a20:	ef 1a       	sub	r14, r31
   16a22:	f8 ef       	ldi	r31, 0xF8	; 248
   16a24:	ff 0a       	sbc	r15, r31
   16a26:	fc 01       	movw	r30, r24
   16a28:	80 85       	ldd	r24, Z+8	; 0x08
   16a2a:	91 85       	ldd	r25, Z+9	; 0x09
   16a2c:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <tm_mon_to_ascii>
   16a30:	8f 92       	push	r8
   16a32:	9f 92       	push	r9
   16a34:	af 92       	push	r10
   16a36:	bf 92       	push	r11
   16a38:	cf 92       	push	r12
   16a3a:	df 92       	push	r13
   16a3c:	ff 92       	push	r15
   16a3e:	ef 92       	push	r14
   16a40:	9f 93       	push	r25
   16a42:	8f 93       	push	r24
   16a44:	f8 01       	movw	r30, r16
   16a46:	87 81       	ldd	r24, Z+7	; 0x07
   16a48:	8f 93       	push	r24
   16a4a:	86 81       	ldd	r24, Z+6	; 0x06
   16a4c:	8f 93       	push	r24
   16a4e:	8b e7       	ldi	r24, 0x7B	; 123
   16a50:	99 e2       	ldi	r25, 0x29	; 41
   16a52:	1f 92       	push	r1
   16a54:	9f 93       	push	r25
   16a56:	8f 93       	push	r24
   16a58:	8e 01       	movw	r16, r28
   16a5a:	0f 5f       	subi	r16, 0xFF	; 255
   16a5c:	1f 4f       	sbci	r17, 0xFF	; 255
   16a5e:	1f 93       	push	r17
   16a60:	0f 93       	push	r16
   16a62:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
   16a66:	0f b6       	in	r0, 0x3f	; 63
   16a68:	f8 94       	cli
   16a6a:	de bf       	out	0x3e, r29	; 62
   16a6c:	0f be       	out	0x3f, r0	; 63
   16a6e:	cd bf       	out	0x3d, r28	; 61
   16a70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a74:	85 ff       	sbrs	r24, 5
   16a76:	0e c0       	rjmp	.+28     	; 0x16a94 <printer_open+0xce>
   16a78:	1f 93       	push	r17
   16a7a:	0f 93       	push	r16
   16a7c:	85 e6       	ldi	r24, 0x65	; 101
   16a7e:	99 e2       	ldi	r25, 0x29	; 41
   16a80:	1f 92       	push	r1
   16a82:	9f 93       	push	r25
   16a84:	8f 93       	push	r24
   16a86:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16a8a:	0f 90       	pop	r0
   16a8c:	0f 90       	pop	r0
   16a8e:	0f 90       	pop	r0
   16a90:	0f 90       	pop	r0
   16a92:	0f 90       	pop	r0
   16a94:	6e e7       	ldi	r22, 0x7E	; 126
   16a96:	78 e0       	ldi	r23, 0x08	; 8
   16a98:	c8 01       	movw	r24, r16
   16a9a:	0e 94 b3 83 	call	0x10766	; 0x10766 <fopen>
   16a9e:	90 93 99 19 	sts	0x1999, r25	; 0x801999 <plot+0xa>
   16aa2:	80 93 98 19 	sts	0x1998, r24	; 0x801998 <plot+0x9>
   16aa6:	89 2b       	or	r24, r25
   16aa8:	b9 f4       	brne	.+46     	; 0x16ad8 <printer_open+0x112>
   16aaa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16aae:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16ab2:	81 72       	andi	r24, 0x21	; 33
   16ab4:	99 27       	eor	r25, r25
   16ab6:	89 2b       	or	r24, r25
   16ab8:	11 f1       	breq	.+68     	; 0x16afe <printer_open+0x138>
   16aba:	8c e2       	ldi	r24, 0x2C	; 44
   16abc:	9d e0       	ldi	r25, 0x0D	; 13
   16abe:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <perror>
   16ac2:	89 e5       	ldi	r24, 0x59	; 89
   16ac4:	99 e2       	ldi	r25, 0x29	; 41
   16ac6:	1f 92       	push	r1
   16ac8:	9f 93       	push	r25
   16aca:	8f 93       	push	r24
   16acc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16ad0:	0f 90       	pop	r0
   16ad2:	0f 90       	pop	r0
   16ad4:	0f 90       	pop	r0
   16ad6:	13 c0       	rjmp	.+38     	; 0x16afe <printer_open+0x138>
   16ad8:	61 e0       	ldi	r22, 0x01	; 1
   16ada:	70 e0       	ldi	r23, 0x00	; 0
   16adc:	81 e0       	ldi	r24, 0x01	; 1
   16ade:	92 e0       	ldi	r25, 0x02	; 2
   16ae0:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   16ae4:	90 93 9b 19 	sts	0x199B, r25	; 0x80199b <plot+0xc>
   16ae8:	80 93 9a 19 	sts	0x199A, r24	; 0x80199a <plot+0xb>
   16aec:	89 2b       	or	r24, r25
   16aee:	09 f4       	brne	.+2      	; 0x16af2 <printer_open+0x12c>
   16af0:	1d df       	rcall	.-454    	; 0x1692c <printer_close>
   16af2:	80 e0       	ldi	r24, 0x00	; 0
   16af4:	92 e0       	ldi	r25, 0x02	; 2
   16af6:	90 93 96 19 	sts	0x1996, r25	; 0x801996 <plot+0x7>
   16afa:	80 93 95 19 	sts	0x1995, r24	; 0x801995 <plot+0x6>
   16afe:	c4 5b       	subi	r28, 0xB4	; 180
   16b00:	df 4f       	sbci	r29, 0xFF	; 255
   16b02:	ec e0       	ldi	r30, 0x0C	; 12
   16b04:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

00016b08 <printer_buffer>:
   16b08:	cf 93       	push	r28
   16b0a:	df 93       	push	r29
   16b0c:	ec 01       	movw	r28, r24
   16b0e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b12:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16b16:	81 72       	andi	r24, 0x21	; 33
   16b18:	99 27       	eor	r25, r25
   16b1a:	89 2b       	or	r24, r25
   16b1c:	e9 f0       	breq	.+58     	; 0x16b58 <printer_buffer+0x50>
   16b1e:	80 91 8f 19 	lds	r24, 0x198F	; 0x80198f <plot>
   16b22:	90 91 90 19 	lds	r25, 0x1990	; 0x801990 <plot+0x1>
   16b26:	20 91 91 19 	lds	r18, 0x1991	; 0x801991 <plot+0x2>
   16b2a:	30 91 92 19 	lds	r19, 0x1992	; 0x801992 <plot+0x3>
   16b2e:	81 11       	cpse	r24, r1
   16b30:	13 c0       	rjmp	.+38     	; 0x16b58 <printer_buffer+0x50>
   16b32:	3f 93       	push	r19
   16b34:	2f 93       	push	r18
   16b36:	9f 93       	push	r25
   16b38:	8f 93       	push	r24
   16b3a:	8e e0       	ldi	r24, 0x0E	; 14
   16b3c:	99 e2       	ldi	r25, 0x29	; 41
   16b3e:	1f 92       	push	r1
   16b40:	9f 93       	push	r25
   16b42:	8f 93       	push	r24
   16b44:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16b48:	8d b7       	in	r24, 0x3d	; 61
   16b4a:	9e b7       	in	r25, 0x3e	; 62
   16b4c:	07 96       	adiw	r24, 0x07	; 7
   16b4e:	0f b6       	in	r0, 0x3f	; 63
   16b50:	f8 94       	cli
   16b52:	9e bf       	out	0x3e, r25	; 62
   16b54:	0f be       	out	0x3f, r0	; 63
   16b56:	8d bf       	out	0x3d, r24	; 61
   16b58:	ce 01       	movw	r24, r28
   16b5a:	88 27       	eor	r24, r24
   16b5c:	97 7f       	andi	r25, 0xF7	; 247
   16b5e:	89 2b       	or	r24, r25
   16b60:	41 f0       	breq	.+16     	; 0x16b72 <printer_buffer+0x6a>
   16b62:	8b de       	rcall	.-746    	; 0x1687a <receive_plot_flush>
   16b64:	89 2b       	or	r24, r25
   16b66:	09 f4       	brne	.+2      	; 0x16b6a <printer_buffer+0x62>
   16b68:	3f c0       	rjmp	.+126    	; 0x16be8 <printer_buffer+0xe0>
   16b6a:	81 e0       	ldi	r24, 0x01	; 1
   16b6c:	80 93 97 19 	sts	0x1997, r24	; 0x801997 <plot+0x8>
   16b70:	3b c0       	rjmp	.+118    	; 0x16be8 <printer_buffer+0xe0>
   16b72:	20 91 9a 19 	lds	r18, 0x199A	; 0x80199a <plot+0xb>
   16b76:	30 91 9b 19 	lds	r19, 0x199B	; 0x80199b <plot+0xc>
   16b7a:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot+0x4>
   16b7e:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x5>
   16b82:	ac 01       	movw	r20, r24
   16b84:	4f 5f       	subi	r20, 0xFF	; 255
   16b86:	5f 4f       	sbci	r21, 0xFF	; 255
   16b88:	50 93 94 19 	sts	0x1994, r21	; 0x801994 <plot+0x5>
   16b8c:	40 93 93 19 	sts	0x1993, r20	; 0x801993 <plot+0x4>
   16b90:	f9 01       	movw	r30, r18
   16b92:	e8 0f       	add	r30, r24
   16b94:	f9 1f       	adc	r31, r25
   16b96:	c0 83       	st	Z, r28
   16b98:	80 91 8f 19 	lds	r24, 0x198F	; 0x80198f <plot>
   16b9c:	90 91 90 19 	lds	r25, 0x1990	; 0x801990 <plot+0x1>
   16ba0:	a0 91 91 19 	lds	r26, 0x1991	; 0x801991 <plot+0x2>
   16ba4:	b0 91 92 19 	lds	r27, 0x1992	; 0x801992 <plot+0x3>
   16ba8:	01 96       	adiw	r24, 0x01	; 1
   16baa:	a1 1d       	adc	r26, r1
   16bac:	b1 1d       	adc	r27, r1
   16bae:	80 93 8f 19 	sts	0x198F, r24	; 0x80198f <plot>
   16bb2:	90 93 90 19 	sts	0x1990, r25	; 0x801990 <plot+0x1>
   16bb6:	a0 93 91 19 	sts	0x1991, r26	; 0x801991 <plot+0x2>
   16bba:	b0 93 92 19 	sts	0x1992, r27	; 0x801992 <plot+0x3>
   16bbe:	20 91 93 19 	lds	r18, 0x1993	; 0x801993 <plot+0x4>
   16bc2:	30 91 94 19 	lds	r19, 0x1994	; 0x801994 <plot+0x5>
   16bc6:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <plot+0x6>
   16bca:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <plot+0x7>
   16bce:	28 17       	cp	r18, r24
   16bd0:	39 07       	cpc	r19, r25
   16bd2:	54 f0       	brlt	.+20     	; 0x16be8 <printer_buffer+0xe0>
   16bd4:	52 de       	rcall	.-860    	; 0x1687a <receive_plot_flush>
   16bd6:	97 ff       	sbrs	r25, 7
   16bd8:	03 c0       	rjmp	.+6      	; 0x16be0 <printer_buffer+0xd8>
   16bda:	81 e0       	ldi	r24, 0x01	; 1
   16bdc:	80 93 97 19 	sts	0x1997, r24	; 0x801997 <plot+0x8>
   16be0:	10 92 94 19 	sts	0x1994, r1	; 0x801994 <plot+0x5>
   16be4:	10 92 93 19 	sts	0x1993, r1	; 0x801993 <plot+0x4>
   16be8:	df 91       	pop	r29
   16bea:	cf 91       	pop	r28
   16bec:	08 95       	ret

00016bee <PRINTER_COMMANDS>:
   16bee:	cf 93       	push	r28
   16bf0:	c8 2f       	mov	r28, r24
   16bf2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16bf6:	90 e0       	ldi	r25, 0x00	; 0
   16bf8:	0e 94 4d 94 	call	0x1289a	; 0x1289a <PRINTER_is_MLA>
   16bfc:	89 2b       	or	r24, r25
   16bfe:	49 f0       	breq	.+18     	; 0x16c12 <PRINTER_COMMANDS+0x24>
   16c00:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c04:	85 ff       	sbrs	r24, 5
   16c06:	1e c0       	rjmp	.+60     	; 0x16c44 <PRINTER_COMMANDS+0x56>
   16c08:	1f 92       	push	r1
   16c0a:	cf 93       	push	r28
   16c0c:	82 ef       	ldi	r24, 0xF2	; 242
   16c0e:	98 e2       	ldi	r25, 0x28	; 40
   16c10:	0f c0       	rjmp	.+30     	; 0x16c30 <PRINTER_COMMANDS+0x42>
   16c12:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16c16:	90 e0       	ldi	r25, 0x00	; 0
   16c18:	0e 94 5e 94 	call	0x128bc	; 0x128bc <PRINTER_is_MTA>
   16c1c:	89 2b       	or	r24, r25
   16c1e:	91 f0       	breq	.+36     	; 0x16c44 <PRINTER_COMMANDS+0x56>
   16c20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c24:	85 ff       	sbrs	r24, 5
   16c26:	0e c0       	rjmp	.+28     	; 0x16c44 <PRINTER_COMMANDS+0x56>
   16c28:	1f 92       	push	r1
   16c2a:	cf 93       	push	r28
   16c2c:	88 ed       	ldi	r24, 0xD8	; 216
   16c2e:	98 e2       	ldi	r25, 0x28	; 40
   16c30:	1f 92       	push	r1
   16c32:	9f 93       	push	r25
   16c34:	8f 93       	push	r24
   16c36:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16c3a:	0f 90       	pop	r0
   16c3c:	0f 90       	pop	r0
   16c3e:	0f 90       	pop	r0
   16c40:	0f 90       	pop	r0
   16c42:	0f 90       	pop	r0
   16c44:	80 e0       	ldi	r24, 0x00	; 0
   16c46:	90 e0       	ldi	r25, 0x00	; 0
   16c48:	cf 91       	pop	r28
   16c4a:	08 95       	ret

00016c4c <plot_echo>:
   16c4c:	cf 92       	push	r12
   16c4e:	df 92       	push	r13
   16c50:	ff 92       	push	r15
   16c52:	0f 93       	push	r16
   16c54:	1f 93       	push	r17
   16c56:	cf 93       	push	r28
   16c58:	df 93       	push	r29
   16c5a:	cd b7       	in	r28, 0x3d	; 61
   16c5c:	de b7       	in	r29, 0x3e	; 62
   16c5e:	da 95       	dec	r29
   16c60:	0f b6       	in	r0, 0x3f	; 63
   16c62:	f8 94       	cli
   16c64:	de bf       	out	0x3e, r29	; 62
   16c66:	0f be       	out	0x3f, r0	; 63
   16c68:	cd bf       	out	0x3d, r28	; 61
   16c6a:	f8 2e       	mov	r15, r24
   16c6c:	83 e0       	ldi	r24, 0x03	; 3
   16c6e:	90 e0       	ldi	r25, 0x00	; 0
   16c70:	e9 d0       	rcall	.+466    	; 0x16e44 <find_type>
   16c72:	8c 01       	movw	r16, r24
   16c74:	0f 3f       	cpi	r16, 0xFF	; 255
   16c76:	8f ef       	ldi	r24, 0xFF	; 255
   16c78:	18 07       	cpc	r17, r24
   16c7a:	59 f4       	brne	.+22     	; 0x16c92 <plot_echo+0x46>
   16c7c:	83 ec       	ldi	r24, 0xC3	; 195
   16c7e:	98 e2       	ldi	r25, 0x28	; 40
   16c80:	1f 92       	push	r1
   16c82:	9f 93       	push	r25
   16c84:	8f 93       	push	r24
   16c86:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16c8a:	0f 90       	pop	r0
   16c8c:	0f 90       	pop	r0
   16c8e:	0f 90       	pop	r0
   16c90:	63 c0       	rjmp	.+198    	; 0x16d58 <plot_echo+0x10c>
   16c92:	4c de       	rcall	.-872    	; 0x1692c <printer_close>
   16c94:	80 e0       	ldi	r24, 0x00	; 0
   16c96:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   16c9a:	89 2b       	or	r24, r25
   16c9c:	31 f0       	breq	.+12     	; 0x16caa <plot_echo+0x5e>
   16c9e:	80 e0       	ldi	r24, 0x00	; 0
   16ca0:	0e 94 0d 2c 	call	0x581a	; 0x581a <uart_rx_byte>
   16ca4:	0e 94 bd 7a 	call	0xf57a	; 0xf57a <putchar>
   16ca8:	f5 cf       	rjmp	.-22     	; 0x16c94 <plot_echo+0x48>
   16caa:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   16cae:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   16cb2:	0e 94 1e 90 	call	0x1203c	; 0x1203c <gpib_decode_header>
   16cb6:	20 e0       	ldi	r18, 0x00	; 0
   16cb8:	30 e0       	ldi	r19, 0x00	; 0
   16cba:	41 e6       	ldi	r20, 0x61	; 97
   16cbc:	53 e1       	ldi	r21, 0x13	; 19
   16cbe:	6f 2d       	mov	r22, r15
   16cc0:	80 2f       	mov	r24, r16
   16cc2:	0e 94 a3 c7 	call	0x18f46	; 0x18f46 <controller_send_str>
   16cc6:	20 e0       	ldi	r18, 0x00	; 0
   16cc8:	31 e0       	ldi	r19, 0x01	; 1
   16cca:	ce 01       	movw	r24, r28
   16ccc:	01 96       	adiw	r24, 0x01	; 1
   16cce:	6c 01       	movw	r12, r24
   16cd0:	ac 01       	movw	r20, r24
   16cd2:	60 2f       	mov	r22, r16
   16cd4:	8f 2d       	mov	r24, r15
   16cd6:	0e 94 e6 c7 	call	0x18fcc	; 0x18fcc <controller_read_str>
   16cda:	df 92       	push	r13
   16cdc:	cf 92       	push	r12
   16cde:	9f 93       	push	r25
   16ce0:	8f 93       	push	r24
   16ce2:	81 eb       	ldi	r24, 0xB1	; 177
   16ce4:	98 e2       	ldi	r25, 0x28	; 40
   16ce6:	1f 92       	push	r1
   16ce8:	9f 93       	push	r25
   16cea:	8f 93       	push	r24
   16cec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16cf0:	20 e0       	ldi	r18, 0x00	; 0
   16cf2:	30 e0       	ldi	r19, 0x00	; 0
   16cf4:	48 e6       	ldi	r20, 0x68	; 104
   16cf6:	53 e1       	ldi	r21, 0x13	; 19
   16cf8:	6f 2d       	mov	r22, r15
   16cfa:	80 2f       	mov	r24, r16
   16cfc:	0e 94 a3 c7 	call	0x18f46	; 0x18f46 <controller_send_str>
   16d00:	20 e0       	ldi	r18, 0x00	; 0
   16d02:	31 e0       	ldi	r19, 0x01	; 1
   16d04:	a6 01       	movw	r20, r12
   16d06:	60 2f       	mov	r22, r16
   16d08:	8f 2d       	mov	r24, r15
   16d0a:	0e 94 e6 c7 	call	0x18fcc	; 0x18fcc <controller_read_str>
   16d0e:	df 92       	push	r13
   16d10:	cf 92       	push	r12
   16d12:	9f 93       	push	r25
   16d14:	8f 93       	push	r24
   16d16:	8f e9       	ldi	r24, 0x9F	; 159
   16d18:	98 e2       	ldi	r25, 0x28	; 40
   16d1a:	1f 92       	push	r1
   16d1c:	9f 93       	push	r25
   16d1e:	8f 93       	push	r24
   16d20:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16d24:	20 e0       	ldi	r18, 0x00	; 0
   16d26:	30 e0       	ldi	r19, 0x00	; 0
   16d28:	4b e7       	ldi	r20, 0x7B	; 123
   16d2a:	53 e1       	ldi	r21, 0x13	; 19
   16d2c:	6f 2d       	mov	r22, r15
   16d2e:	80 2f       	mov	r24, r16
   16d30:	0e 94 a3 c7 	call	0x18f46	; 0x18f46 <controller_send_str>
   16d34:	60 2f       	mov	r22, r16
   16d36:	8f 2d       	mov	r24, r15
   16d38:	0e 94 2c c8 	call	0x19058	; 0x19058 <controller_read_trace>
   16d3c:	9f 93       	push	r25
   16d3e:	8f 93       	push	r24
   16d40:	8a e8       	ldi	r24, 0x8A	; 138
   16d42:	98 e2       	ldi	r25, 0x28	; 40
   16d44:	1f 92       	push	r1
   16d46:	9f 93       	push	r25
   16d48:	8f 93       	push	r24
   16d4a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16d4e:	0f b6       	in	r0, 0x3f	; 63
   16d50:	f8 94       	cli
   16d52:	de bf       	out	0x3e, r29	; 62
   16d54:	0f be       	out	0x3f, r0	; 63
   16d56:	cd bf       	out	0x3d, r28	; 61
   16d58:	d3 95       	inc	r29
   16d5a:	0f b6       	in	r0, 0x3f	; 63
   16d5c:	f8 94       	cli
   16d5e:	de bf       	out	0x3e, r29	; 62
   16d60:	0f be       	out	0x3f, r0	; 63
   16d62:	cd bf       	out	0x3d, r28	; 61
   16d64:	df 91       	pop	r29
   16d66:	cf 91       	pop	r28
   16d68:	1f 91       	pop	r17
   16d6a:	0f 91       	pop	r16
   16d6c:	ff 90       	pop	r15
   16d6e:	df 90       	pop	r13
   16d70:	cf 90       	pop	r12
   16d72:	08 95       	ret

00016d74 <V2B_MSB>:
   16d74:	0f 93       	push	r16
   16d76:	1f 93       	push	r17
   16d78:	da 01       	movw	r26, r20
   16d7a:	11 97       	sbiw	r26, 0x01	; 1
   16d7c:	b7 fd       	sbrc	r27, 7
   16d7e:	0b c0       	rjmp	.+22     	; 0x16d96 <V2B_MSB+0x22>
   16d80:	fd 01       	movw	r30, r26
   16d82:	e6 0f       	add	r30, r22
   16d84:	f7 1f       	adc	r31, r23
   16d86:	e8 0f       	add	r30, r24
   16d88:	f9 1f       	adc	r31, r25
   16d8a:	00 83       	st	Z, r16
   16d8c:	01 2f       	mov	r16, r17
   16d8e:	12 2f       	mov	r17, r18
   16d90:	23 2f       	mov	r18, r19
   16d92:	33 27       	eor	r19, r19
   16d94:	f2 cf       	rjmp	.-28     	; 0x16d7a <V2B_MSB+0x6>
   16d96:	1f 91       	pop	r17
   16d98:	0f 91       	pop	r16
   16d9a:	08 95       	ret

00016d9c <V2B_LSB>:
   16d9c:	0f 93       	push	r16
   16d9e:	1f 93       	push	r17
   16da0:	fc 01       	movw	r30, r24
   16da2:	e6 0f       	add	r30, r22
   16da4:	f7 1f       	adc	r31, r23
   16da6:	bf 01       	movw	r22, r30
   16da8:	cf 01       	movw	r24, r30
   16daa:	86 1b       	sub	r24, r22
   16dac:	97 0b       	sbc	r25, r23
   16dae:	84 17       	cp	r24, r20
   16db0:	95 07       	cpc	r25, r21
   16db2:	34 f4       	brge	.+12     	; 0x16dc0 <V2B_LSB+0x24>
   16db4:	01 93       	st	Z+, r16
   16db6:	01 2f       	mov	r16, r17
   16db8:	12 2f       	mov	r17, r18
   16dba:	23 2f       	mov	r18, r19
   16dbc:	33 27       	eor	r19, r19
   16dbe:	f4 cf       	rjmp	.-24     	; 0x16da8 <V2B_LSB+0xc>
   16dc0:	1f 91       	pop	r17
   16dc2:	0f 91       	pop	r16
   16dc4:	08 95       	ret

00016dc6 <B2V_MSB>:
   16dc6:	cf 92       	push	r12
   16dc8:	df 92       	push	r13
   16dca:	ef 92       	push	r14
   16dcc:	ff 92       	push	r15
   16dce:	fc 01       	movw	r30, r24
   16dd0:	e6 0f       	add	r30, r22
   16dd2:	f7 1f       	adc	r31, r23
   16dd4:	60 e0       	ldi	r22, 0x00	; 0
   16dd6:	70 e0       	ldi	r23, 0x00	; 0
   16dd8:	cb 01       	movw	r24, r22
   16dda:	df 01       	movw	r26, r30
   16ddc:	9f 01       	movw	r18, r30
   16dde:	2a 1b       	sub	r18, r26
   16de0:	3b 0b       	sbc	r19, r27
   16de2:	24 17       	cp	r18, r20
   16de4:	35 07       	cpc	r19, r21
   16de6:	4c f4       	brge	.+18     	; 0x16dfa <B2V_MSB+0x34>
   16de8:	cc 24       	eor	r12, r12
   16dea:	d6 2e       	mov	r13, r22
   16dec:	e7 2e       	mov	r14, r23
   16dee:	f8 2e       	mov	r15, r24
   16df0:	21 91       	ld	r18, Z+
   16df2:	c7 01       	movw	r24, r14
   16df4:	b6 01       	movw	r22, r12
   16df6:	62 2b       	or	r22, r18
   16df8:	f1 cf       	rjmp	.-30     	; 0x16ddc <B2V_MSB+0x16>
   16dfa:	ff 90       	pop	r15
   16dfc:	ef 90       	pop	r14
   16dfe:	df 90       	pop	r13
   16e00:	cf 90       	pop	r12
   16e02:	08 95       	ret

00016e04 <B2V_LSB>:
   16e04:	cf 92       	push	r12
   16e06:	df 92       	push	r13
   16e08:	ef 92       	push	r14
   16e0a:	ff 92       	push	r15
   16e0c:	9c 01       	movw	r18, r24
   16e0e:	db 01       	movw	r26, r22
   16e10:	60 e0       	ldi	r22, 0x00	; 0
   16e12:	70 e0       	ldi	r23, 0x00	; 0
   16e14:	cb 01       	movw	r24, r22
   16e16:	41 50       	subi	r20, 0x01	; 1
   16e18:	51 09       	sbc	r21, r1
   16e1a:	57 fd       	sbrc	r21, 7
   16e1c:	0e c0       	rjmp	.+28     	; 0x16e3a <B2V_LSB+0x36>
   16e1e:	cc 24       	eor	r12, r12
   16e20:	d6 2e       	mov	r13, r22
   16e22:	e7 2e       	mov	r14, r23
   16e24:	f8 2e       	mov	r15, r24
   16e26:	fa 01       	movw	r30, r20
   16e28:	ea 0f       	add	r30, r26
   16e2a:	fb 1f       	adc	r31, r27
   16e2c:	e2 0f       	add	r30, r18
   16e2e:	f3 1f       	adc	r31, r19
   16e30:	e0 81       	ld	r30, Z
   16e32:	c7 01       	movw	r24, r14
   16e34:	b6 01       	movw	r22, r12
   16e36:	6e 2b       	or	r22, r30
   16e38:	ee cf       	rjmp	.-36     	; 0x16e16 <B2V_LSB+0x12>
   16e3a:	ff 90       	pop	r15
   16e3c:	ef 90       	pop	r14
   16e3e:	df 90       	pop	r13
   16e40:	cf 90       	pop	r12
   16e42:	08 95       	ret

00016e44 <find_type>:
   16e44:	e7 ef       	ldi	r30, 0xF7	; 247
   16e46:	fe e1       	ldi	r31, 0x1E	; 30
   16e48:	20 e0       	ldi	r18, 0x00	; 0
   16e4a:	30 e0       	ldi	r19, 0x00	; 0
   16e4c:	40 81       	ld	r20, Z
   16e4e:	50 e0       	ldi	r21, 0x00	; 0
   16e50:	48 17       	cp	r20, r24
   16e52:	59 07       	cpc	r21, r25
   16e54:	49 f0       	breq	.+18     	; 0x16e68 <find_type+0x24>
   16e56:	2f 5f       	subi	r18, 0xFF	; 255
   16e58:	3f 4f       	sbci	r19, 0xFF	; 255
   16e5a:	37 96       	adiw	r30, 0x07	; 7
   16e5c:	28 30       	cpi	r18, 0x08	; 8
   16e5e:	31 05       	cpc	r19, r1
   16e60:	a9 f7       	brne	.-22     	; 0x16e4c <find_type+0x8>
   16e62:	8f ef       	ldi	r24, 0xFF	; 255
   16e64:	9f ef       	ldi	r25, 0xFF	; 255
   16e66:	08 95       	ret
   16e68:	c9 01       	movw	r24, r18
   16e6a:	08 95       	ret

00016e6c <count_drive_types>:
   16e6c:	28 2f       	mov	r18, r24
   16e6e:	e7 ef       	ldi	r30, 0xF7	; 247
   16e70:	fe e1       	ldi	r31, 0x1E	; 30
   16e72:	80 e0       	ldi	r24, 0x00	; 0
   16e74:	90 e0       	ldi	r25, 0x00	; 0
   16e76:	30 81       	ld	r19, Z
   16e78:	32 13       	cpse	r19, r18
   16e7a:	01 c0       	rjmp	.+2      	; 0x16e7e <count_drive_types+0x12>
   16e7c:	01 96       	adiw	r24, 0x01	; 1
   16e7e:	37 96       	adiw	r30, 0x07	; 7
   16e80:	3f e1       	ldi	r19, 0x1F	; 31
   16e82:	ef 32       	cpi	r30, 0x2F	; 47
   16e84:	f3 07       	cpc	r31, r19
   16e86:	b9 f7       	brne	.-18     	; 0x16e76 <count_drive_types+0xa>
   16e88:	08 95       	ret

00016e8a <type_to_str>:
   16e8a:	00 97       	sbiw	r24, 0x00	; 0
   16e8c:	59 f0       	breq	.+22     	; 0x16ea4 <type_to_str+0x1a>
   16e8e:	81 30       	cpi	r24, 0x01	; 1
   16e90:	91 05       	cpc	r25, r1
   16e92:	59 f0       	breq	.+22     	; 0x16eaa <type_to_str+0x20>
   16e94:	82 30       	cpi	r24, 0x02	; 2
   16e96:	91 05       	cpc	r25, r1
   16e98:	59 f0       	breq	.+22     	; 0x16eb0 <type_to_str+0x26>
   16e9a:	03 97       	sbiw	r24, 0x03	; 3
   16e9c:	61 f0       	breq	.+24     	; 0x16eb6 <type_to_str+0x2c>
   16e9e:	81 eb       	ldi	r24, 0xB1	; 177
   16ea0:	93 e1       	ldi	r25, 0x13	; 19
   16ea2:	08 95       	ret
   16ea4:	87 e8       	ldi	r24, 0x87	; 135
   16ea6:	93 e1       	ldi	r25, 0x13	; 19
   16ea8:	08 95       	ret
   16eaa:	8f e8       	ldi	r24, 0x8F	; 143
   16eac:	93 e1       	ldi	r25, 0x13	; 19
   16eae:	08 95       	ret
   16eb0:	87 ea       	ldi	r24, 0xA7	; 167
   16eb2:	93 e1       	ldi	r25, 0x13	; 19
   16eb4:	08 95       	ret
   16eb6:	8a e9       	ldi	r24, 0x9A	; 154
   16eb8:	93 e1       	ldi	r25, 0x13	; 19
   16eba:	08 95       	ret

00016ebc <find_free>:
   16ebc:	80 e0       	ldi	r24, 0x00	; 0
   16ebe:	90 e0       	ldi	r25, 0x00	; 0
   16ec0:	c1 cf       	rjmp	.-126    	; 0x16e44 <find_type>
   16ec2:	08 95       	ret

00016ec4 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   16ec4:	9b 01       	movw	r18, r22
   16ec6:	20 52       	subi	r18, 0x20	; 32
   16ec8:	31 09       	sbc	r19, r1
   16eca:	2f 35       	cpi	r18, 0x5F	; 95
   16ecc:	31 05       	cpc	r19, r1
   16ece:	f8 f4       	brcc	.+62     	; 0x16f0e <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   16ed0:	64 17       	cp	r22, r20
   16ed2:	75 07       	cpc	r23, r21
   16ed4:	e4 f0       	brlt	.+56     	; 0x16f0e <find_device+0x4a>
   16ed6:	9a 01       	movw	r18, r20
   16ed8:	22 5e       	subi	r18, 0xE2	; 226
   16eda:	3f 4f       	sbci	r19, 0xFF	; 255
   16edc:	26 17       	cp	r18, r22
   16ede:	37 07       	cpc	r19, r23
   16ee0:	b4 f0       	brlt	.+44     	; 0x16f0e <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   16ee2:	64 1b       	sub	r22, r20
   16ee4:	75 0b       	sbc	r23, r21
   16ee6:	e7 ef       	ldi	r30, 0xF7	; 247
   16ee8:	fe e1       	ldi	r31, 0x1E	; 30

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16eea:	20 e0       	ldi	r18, 0x00	; 0
   16eec:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   16eee:	40 81       	ld	r20, Z
   16ef0:	50 e0       	ldi	r21, 0x00	; 0
   16ef2:	48 17       	cp	r20, r24
   16ef4:	59 07       	cpc	r21, r25
   16ef6:	29 f4       	brne	.+10     	; 0x16f02 <find_device+0x3e>
   16ef8:	41 81       	ldd	r20, Z+1	; 0x01
   16efa:	50 e0       	ldi	r21, 0x00	; 0
   16efc:	64 17       	cp	r22, r20
   16efe:	75 07       	cpc	r23, r21
   16f00:	49 f0       	breq	.+18     	; 0x16f14 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16f02:	2f 5f       	subi	r18, 0xFF	; 255
   16f04:	3f 4f       	sbci	r19, 0xFF	; 255
   16f06:	37 96       	adiw	r30, 0x07	; 7
   16f08:	28 30       	cpi	r18, 0x08	; 8
   16f0a:	31 05       	cpc	r19, r1
   16f0c:	81 f7       	brne	.-32     	; 0x16eee <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   16f0e:	8f ef       	ldi	r24, 0xFF	; 255
   16f10:	9f ef       	ldi	r25, 0xFF	; 255
   16f12:	08 95       	ret
   16f14:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   16f16:	08 95       	ret

00016f18 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   16f18:	1f 93       	push	r17
   16f1a:	cf 93       	push	r28
   16f1c:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   16f1e:	8f 3f       	cpi	r24, 0xFF	; 255
   16f20:	2f ef       	ldi	r18, 0xFF	; 255
   16f22:	92 07       	cpc	r25, r18
   16f24:	09 f4       	brne	.+2      	; 0x16f28 <set_active_device+0x10>
   16f26:	fc c0       	rjmp	.+504    	; 0x17120 <set_active_device+0x208>
   16f28:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   16f2a:	08 97       	sbiw	r24, 0x08	; 8
   16f2c:	c0 f0       	brcs	.+48     	; 0x16f5e <set_active_device+0x46>
    {
        if(debuglevel & 1)
   16f2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f32:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16f36:	9c 01       	movw	r18, r24
   16f38:	21 70       	andi	r18, 0x01	; 1
   16f3a:	33 27       	eor	r19, r19
   16f3c:	80 ff       	sbrs	r24, 0
   16f3e:	f2 c0       	rjmp	.+484    	; 0x17124 <set_active_device+0x20c>
            printf("set_active_device:(%d) out of range\n", index);
   16f40:	df 93       	push	r29
   16f42:	cf 93       	push	r28
   16f44:	87 e0       	ldi	r24, 0x07	; 7
   16f46:	92 e3       	ldi	r25, 0x32	; 50
   16f48:	1f 92       	push	r1
   16f4a:	9f 93       	push	r25
   16f4c:	8f 93       	push	r24
   16f4e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16f52:	0f 90       	pop	r0
   16f54:	0f 90       	pop	r0
   16f56:	0f 90       	pop	r0
   16f58:	0f 90       	pop	r0
   16f5a:	0f 90       	pop	r0
   16f5c:	e1 c0       	rjmp	.+450    	; 0x17120 <set_active_device+0x208>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   16f5e:	87 e0       	ldi	r24, 0x07	; 7
   16f60:	8c 9f       	mul	r24, r28
   16f62:	f0 01       	movw	r30, r0
   16f64:	8d 9f       	mul	r24, r29
   16f66:	f0 0d       	add	r31, r0
   16f68:	11 24       	eor	r1, r1
   16f6a:	e9 50       	subi	r30, 0x09	; 9
   16f6c:	f1 4e       	sbci	r31, 0xE1	; 225
   16f6e:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   16f70:	8f 31       	cpi	r24, 0x1F	; 31
   16f72:	e8 f0       	brcs	.+58     	; 0x16fae <set_active_device+0x96>
    {
        if(debuglevel & 1)
   16f74:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   16f78:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   16f7c:	9a 01       	movw	r18, r20
   16f7e:	21 70       	andi	r18, 0x01	; 1
   16f80:	33 27       	eor	r19, r19
   16f82:	40 ff       	sbrs	r20, 0
   16f84:	cf c0       	rjmp	.+414    	; 0x17124 <set_active_device+0x20c>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   16f86:	1f 92       	push	r1
   16f88:	8f 93       	push	r24
   16f8a:	df 93       	push	r29
   16f8c:	cf 93       	push	r28
   16f8e:	8e ec       	ldi	r24, 0xCE	; 206
   16f90:	91 e3       	ldi	r25, 0x31	; 49
   16f92:	1f 92       	push	r1
   16f94:	9f 93       	push	r25
   16f96:	8f 93       	push	r24
   16f98:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16f9c:	8d b7       	in	r24, 0x3d	; 61
   16f9e:	9e b7       	in	r25, 0x3e	; 62
   16fa0:	07 96       	adiw	r24, 0x07	; 7
   16fa2:	0f b6       	in	r0, 0x3f	; 63
   16fa4:	f8 94       	cli
   16fa6:	9e bf       	out	0x3e, r25	; 62
   16fa8:	0f be       	out	0x3f, r0	; 63
   16faa:	8d bf       	out	0x3d, r24	; 61
   16fac:	b9 c0       	rjmp	.+370    	; 0x17120 <set_active_device+0x208>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   16fae:	10 81       	ld	r17, Z
   16fb0:	81 2f       	mov	r24, r17
   16fb2:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   16fb4:	23 81       	ldd	r18, Z+3	; 0x03
   16fb6:	34 81       	ldd	r19, Z+4	; 0x04
   16fb8:	21 15       	cp	r18, r1
   16fba:	31 05       	cpc	r19, r1
   16fbc:	01 f5       	brne	.+64     	; 0x16ffe <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   16fbe:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   16fc2:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   16fc6:	9a 01       	movw	r18, r20
   16fc8:	21 70       	andi	r18, 0x01	; 1
   16fca:	33 27       	eor	r19, r19
   16fcc:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   16fce:	aa c0       	rjmp	.+340    	; 0x17124 <set_active_device+0x20c>
   16fd0:	5c df       	rcall	.-328    	; 0x16e8a <type_to_str>
   16fd2:	9f 93       	push	r25
   16fd4:	8f 93       	push	r24
   16fd6:	1f 92       	push	r1
   16fd8:	1f 93       	push	r17
   16fda:	df 93       	push	r29
   16fdc:	cf 93       	push	r28
   16fde:	89 e9       	ldi	r24, 0x99	; 153
   16fe0:	91 e3       	ldi	r25, 0x31	; 49
   16fe2:	1f 92       	push	r1
   16fe4:	9f 93       	push	r25
   16fe6:	8f 93       	push	r24
   16fe8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   16fec:	8d b7       	in	r24, 0x3d	; 61
   16fee:	9e b7       	in	r25, 0x3e	; 62
   16ff0:	09 96       	adiw	r24, 0x09	; 9
   16ff2:	0f b6       	in	r0, 0x3f	; 63
   16ff4:	f8 94       	cli
   16ff6:	9e bf       	out	0x3e, r25	; 62
   16ff8:	0f be       	out	0x3f, r0	; 63
   16ffa:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   16ffc:	91 c0       	rjmp	.+290    	; 0x17120 <set_active_device+0x208>
   16ffe:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   17000:	11 f5       	brne	.+68     	; 0x17046 <set_active_device+0x12e>
   17002:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17006:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1700a:	9c 01       	movw	r18, r24
   1700c:	21 70       	andi	r18, 0x01	; 1
   1700e:	33 27       	eor	r19, r19
   17010:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   17012:	88 c0       	rjmp	.+272    	; 0x17124 <set_active_device+0x20c>
   17014:	80 e0       	ldi	r24, 0x00	; 0
   17016:	90 e0       	ldi	r25, 0x00	; 0
   17018:	38 df       	rcall	.-400    	; 0x16e8a <type_to_str>
   1701a:	9f 93       	push	r25
   1701c:	8f 93       	push	r24
   1701e:	1f 92       	push	r1
   17020:	1f 92       	push	r1
   17022:	df 93       	push	r29
   17024:	cf 93       	push	r28
   17026:	84 e6       	ldi	r24, 0x64	; 100
   17028:	91 e3       	ldi	r25, 0x31	; 49
   1702a:	1f 92       	push	r1
   1702c:	9f 93       	push	r25
   1702e:	8f 93       	push	r24
   17030:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   17034:	8d b7       	in	r24, 0x3d	; 61
   17036:	9e b7       	in	r25, 0x3e	; 62
   17038:	09 96       	adiw	r24, 0x09	; 9
   1703a:	0f b6       	in	r0, 0x3f	; 63
   1703c:	f8 94       	cli
   1703e:	9e bf       	out	0x3e, r25	; 62
   17040:	0f be       	out	0x3f, r0	; 63
   17042:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   17044:	6d c0       	rjmp	.+218    	; 0x17120 <set_active_device+0x208>
   17046:	83 30       	cpi	r24, 0x03	; 3
   17048:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1704a:	29 f4       	brne	.+10     	; 0x17056 <set_active_device+0x13e>
   1704c:	30 93 a7 19 	sts	0x19A7, r19	; 0x8019a7 <PRINTERp+0x1>
   17050:	20 93 a6 19 	sts	0x19A6, r18	; 0x8019a6 <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   17054:	43 c0       	rjmp	.+134    	; 0x170dc <set_active_device+0x1c4>
   17056:	ac 01       	movw	r20, r24
   17058:	41 50       	subi	r20, 0x01	; 1
   1705a:	51 09       	sbc	r21, r1
   1705c:	42 30       	cpi	r20, 0x02	; 2
   1705e:	51 05       	cpc	r21, r1
   17060:	08 f0       	brcs	.+2      	; 0x17064 <set_active_device+0x14c>
    {
        if(Devices[index].state == NULL)
   17062:	3f c0       	rjmp	.+126    	; 0x170e2 <set_active_device+0x1ca>
   17064:	45 81       	ldd	r20, Z+5	; 0x05
   17066:	56 81       	ldd	r21, Z+6	; 0x06
   17068:	41 15       	cp	r20, r1
   1706a:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   1706c:	01 f5       	brne	.+64     	; 0x170ae <set_active_device+0x196>
   1706e:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   17072:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   17076:	9a 01       	movw	r18, r20
   17078:	21 70       	andi	r18, 0x01	; 1
   1707a:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   1707c:	40 ff       	sbrs	r20, 0
   1707e:	52 c0       	rjmp	.+164    	; 0x17124 <set_active_device+0x20c>
   17080:	04 df       	rcall	.-504    	; 0x16e8a <type_to_str>
   17082:	9f 93       	push	r25
   17084:	8f 93       	push	r24
   17086:	1f 92       	push	r1
   17088:	1f 93       	push	r17
   1708a:	df 93       	push	r29
   1708c:	cf 93       	push	r28
   1708e:	8c e2       	ldi	r24, 0x2C	; 44
   17090:	91 e3       	ldi	r25, 0x31	; 49
   17092:	1f 92       	push	r1
   17094:	9f 93       	push	r25
   17096:	8f 93       	push	r24
   17098:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1709c:	8d b7       	in	r24, 0x3d	; 61
   1709e:	9e b7       	in	r25, 0x3e	; 62
   170a0:	09 96       	adiw	r24, 0x09	; 9
   170a2:	0f b6       	in	r0, 0x3f	; 63
   170a4:	f8 94       	cli
   170a6:	9e bf       	out	0x3e, r25	; 62
   170a8:	0f be       	out	0x3f, r0	; 63
   170aa:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   170ac:	39 c0       	rjmp	.+114    	; 0x17120 <set_active_device+0x208>
   170ae:	81 30       	cpi	r24, 0x01	; 1
   170b0:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   170b2:	49 f4       	brne	.+18     	; 0x170c6 <set_active_device+0x1ae>
   170b4:	30 93 a1 19 	sts	0x19A1, r19	; 0x8019a1 <AMIGOp+0x1>
   170b8:	20 93 a0 19 	sts	0x19A0, r18	; 0x8019a0 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   170bc:	50 93 9f 19 	sts	0x199F, r21	; 0x80199f <AMIGOs+0x1>
   170c0:	40 93 9e 19 	sts	0x199E, r20	; 0x80199e <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   170c4:	0b c0       	rjmp	.+22     	; 0x170dc <set_active_device+0x1c4>
   170c6:	82 30       	cpi	r24, 0x02	; 2
   170c8:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   170ca:	59 f4       	brne	.+22     	; 0x170e2 <set_active_device+0x1ca>
   170cc:	30 93 a5 19 	sts	0x19A5, r19	; 0x8019a5 <SS80p+0x1>
   170d0:	20 93 a4 19 	sts	0x19A4, r18	; 0x8019a4 <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   170d4:	50 93 a3 19 	sts	0x19A3, r21	; 0x8019a3 <SS80s+0x1>
   170d8:	40 93 a2 19 	sts	0x19A2, r20	; 0x8019a2 <SS80s>
            return(1);
   170dc:	21 e0       	ldi	r18, 0x01	; 1
   170de:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   170e0:	21 c0       	rjmp	.+66     	; 0x17124 <set_active_device+0x20c>
   170e2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   170e6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   170ea:	9a 01       	movw	r18, r20
   170ec:	21 70       	andi	r18, 0x01	; 1
   170ee:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   170f0:	40 ff       	sbrs	r20, 0
   170f2:	18 c0       	rjmp	.+48     	; 0x17124 <set_active_device+0x20c>
   170f4:	ca de       	rcall	.-620    	; 0x16e8a <type_to_str>
   170f6:	9f 93       	push	r25
   170f8:	8f 93       	push	r24
   170fa:	1f 92       	push	r1
   170fc:	1f 93       	push	r17
   170fe:	df 93       	push	r29
   17100:	cf 93       	push	r28
   17102:	81 e0       	ldi	r24, 0x01	; 1
   17104:	91 e3       	ldi	r25, 0x31	; 49
   17106:	1f 92       	push	r1
   17108:	9f 93       	push	r25
   1710a:	8f 93       	push	r24
   1710c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   17110:	8d b7       	in	r24, 0x3d	; 61
   17112:	9e b7       	in	r25, 0x3e	; 62
   17114:	09 96       	adiw	r24, 0x09	; 9
   17116:	0f b6       	in	r0, 0x3f	; 63
   17118:	f8 94       	cli
   1711a:	9e bf       	out	0x3e, r25	; 62
   1711c:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   1711e:	8d bf       	out	0x3d, r24	; 61
   17120:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   17122:	30 e0       	ldi	r19, 0x00	; 0
   17124:	c9 01       	movw	r24, r18
   17126:	df 91       	pop	r29
   17128:	cf 91       	pop	r28
   1712a:	1f 91       	pop	r17
   1712c:	08 95       	ret

0001712e <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   1712e:	0f 93       	push	r16
   17130:	1f 93       	push	r17
   17132:	cf 93       	push	r28
   17134:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   17136:	ec 01       	movw	r28, r24
   17138:	c1 de       	rcall	.-638    	; 0x16ebc <find_free>
    if(ind == -1)
   1713a:	8c 01       	movw	r16, r24
   1713c:	0f 3f       	cpi	r16, 0xFF	; 255
   1713e:	8f ef       	ldi	r24, 0xFF	; 255
   17140:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   17142:	99 f4       	brne	.+38     	; 0x1716a <alloc_device+0x3c>
   17144:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17148:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   1714a:	7b c0       	rjmp	.+246    	; 0x17242 <alloc_device+0x114>
   1714c:	df 93       	push	r29
   1714e:	cf 93       	push	r28
   17150:	8d ed       	ldi	r24, 0xDD	; 221
   17152:	90 e3       	ldi	r25, 0x30	; 48
   17154:	1f 92       	push	r1
   17156:	9f 93       	push	r25
   17158:	8f 93       	push	r24
   1715a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1715e:	0f 90       	pop	r0
   17160:	0f 90       	pop	r0
   17162:	0f 90       	pop	r0
   17164:	0f 90       	pop	r0
   17166:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   17168:	6c c0       	rjmp	.+216    	; 0x17242 <alloc_device+0x114>
   1716a:	c2 30       	cpi	r28, 0x02	; 2
   1716c:	d1 05       	cpc	r29, r1
   1716e:	f1 f0       	breq	.+60     	; 0x171ac <alloc_device+0x7e>
   17170:	c3 30       	cpi	r28, 0x03	; 3
   17172:	d1 05       	cpc	r29, r1
   17174:	b1 f1       	breq	.+108    	; 0x171e2 <alloc_device+0xb4>
   17176:	c1 30       	cpi	r28, 0x01	; 1
   17178:	d1 05       	cpc	r29, r1
   1717a:	09 f0       	breq	.+2      	; 0x1717e <alloc_device+0x50>
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
            index = ind;
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   1717c:	47 c0       	rjmp	.+142    	; 0x1720c <alloc_device+0xde>
   1717e:	87 e0       	ldi	r24, 0x07	; 7
   17180:	80 9f       	mul	r24, r16
   17182:	e0 01       	movw	r28, r0
   17184:	81 9f       	mul	r24, r17
   17186:	d0 0d       	add	r29, r0
   17188:	11 24       	eor	r1, r1
   1718a:	c9 50       	subi	r28, 0x09	; 9
   1718c:	d1 4e       	sbci	r29, 0xE1	; 225
   1718e:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   17190:	88 83       	st	Y, r24
   17192:	61 e0       	ldi	r22, 0x01	; 1
   17194:	70 e0       	ldi	r23, 0x00	; 0
   17196:	84 e3       	ldi	r24, 0x34	; 52
   17198:	90 e0       	ldi	r25, 0x00	; 0
   1719a:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   1719e:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   171a0:	8b 83       	std	Y+3, r24	; 0x03
   171a2:	61 e0       	ldi	r22, 0x01	; 1
   171a4:	70 e0       	ldi	r23, 0x00	; 0
   171a6:	88 e1       	ldi	r24, 0x18	; 24
   171a8:	90 e0       	ldi	r25, 0x00	; 0
    }

    switch(type)
    {
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   171aa:	16 c0       	rjmp	.+44     	; 0x171d8 <alloc_device+0xaa>
   171ac:	87 e0       	ldi	r24, 0x07	; 7
   171ae:	80 9f       	mul	r24, r16
   171b0:	e0 01       	movw	r28, r0
   171b2:	81 9f       	mul	r24, r17
   171b4:	d0 0d       	add	r29, r0
   171b6:	11 24       	eor	r1, r1
   171b8:	c9 50       	subi	r28, 0x09	; 9
   171ba:	d1 4e       	sbci	r29, 0xE1	; 225
   171bc:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   171be:	88 83       	st	Y, r24
   171c0:	61 e0       	ldi	r22, 0x01	; 1
   171c2:	70 e0       	ldi	r23, 0x00	; 0
   171c4:	81 e5       	ldi	r24, 0x51	; 81
   171c6:	90 e0       	ldi	r25, 0x00	; 0
   171c8:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   171cc:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   171ce:	8b 83       	std	Y+3, r24	; 0x03
   171d0:	61 e0       	ldi	r22, 0x01	; 1
   171d2:	70 e0       	ldi	r23, 0x00	; 0
   171d4:	86 e1       	ldi	r24, 0x16	; 22
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   171d6:	90 e0       	ldi	r25, 0x00	; 0
   171d8:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   171dc:	9e 83       	std	Y+6, r25	; 0x06
            index = ind;
            break;
   171de:	8d 83       	std	Y+5, r24	; 0x05
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   171e0:	30 c0       	rjmp	.+96     	; 0x17242 <alloc_device+0x114>
   171e2:	87 e0       	ldi	r24, 0x07	; 7
   171e4:	80 9f       	mul	r24, r16
   171e6:	e0 01       	movw	r28, r0
   171e8:	81 9f       	mul	r24, r17
   171ea:	d0 0d       	add	r29, r0
   171ec:	11 24       	eor	r1, r1
   171ee:	c9 50       	subi	r28, 0x09	; 9
   171f0:	d1 4e       	sbci	r29, 0xE1	; 225
   171f2:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   171f4:	88 83       	st	Y, r24
   171f6:	61 e0       	ldi	r22, 0x01	; 1
   171f8:	70 e0       	ldi	r23, 0x00	; 0
   171fa:	8a e2       	ldi	r24, 0x2A	; 42
   171fc:	90 e0       	ldi	r25, 0x00	; 0
   171fe:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   17202:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = NULL;
   17204:	8b 83       	std	Y+3, r24	; 0x03
   17206:	1e 82       	std	Y+6, r1	; 0x06
            index = ind;
            break;
   17208:	1d 82       	std	Y+5, r1	; 0x05
        default:
            if(debuglevel & 1)
   1720a:	1b c0       	rjmp	.+54     	; 0x17242 <alloc_device+0x114>
   1720c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   17210:	80 ff       	sbrs	r24, 0
   17212:	15 c0       	rjmp	.+42     	; 0x1723e <alloc_device+0x110>
   17214:	ce 01       	movw	r24, r28
   17216:	39 de       	rcall	.-910    	; 0x16e8a <type_to_str>
   17218:	9f 93       	push	r25
   1721a:	8f 93       	push	r24
   1721c:	df 93       	push	r29
   1721e:	cf 93       	push	r28
   17220:	8b eb       	ldi	r24, 0xBB	; 187
   17222:	90 e3       	ldi	r25, 0x30	; 48
   17224:	1f 92       	push	r1
   17226:	9f 93       	push	r25
   17228:	8f 93       	push	r24
   1722a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1722e:	8d b7       	in	r24, 0x3d	; 61
   17230:	9e b7       	in	r25, 0x3e	; 62
   17232:	07 96       	adiw	r24, 0x07	; 7
   17234:	0f b6       	in	r0, 0x3f	; 63
   17236:	f8 94       	cli
   17238:	9e bf       	out	0x3e, r25	; 62
   1723a:	0f be       	out	0x3f, r0	; 63
   1723c:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   1723e:	0f ef       	ldi	r16, 0xFF	; 255
   17240:	1f ef       	ldi	r17, 0xFF	; 255
   17242:	c8 01       	movw	r24, r16
   17244:	df 91       	pop	r29
   17246:	cf 91       	pop	r28
   17248:	1f 91       	pop	r17
   1724a:	0f 91       	pop	r16
   1724c:	08 95       	ret

0001724e <init_Devices>:
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
   1724e:	10 92 b3 19 	sts	0x19B3, r1	; 0x8019b3 <stack_ind+0x1>
   17252:	10 92 b2 19 	sts	0x19B2, r1	; 0x8019b2 <stack_ind>
   17256:	e7 ef       	ldi	r30, 0xF7	; 247
   17258:	fe e1       	ldi	r31, 0x1E	; 30
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   1725a:	8f ef       	ldi	r24, 0xFF	; 255
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   1725c:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   1725e:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   17260:	82 83       	std	Z+2, r24	; 0x02
        Devices[i].dev = NULL;
   17262:	14 82       	std	Z+4, r1	; 0x04
   17264:	13 82       	std	Z+3, r1	; 0x03
        Devices[i].state = NULL;
   17266:	16 82       	std	Z+6, r1	; 0x06
   17268:	15 82       	std	Z+5, r1	; 0x05
   1726a:	37 96       	adiw	r30, 0x07	; 7
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   1726c:	9f e1       	ldi	r25, 0x1F	; 31
   1726e:	ef 32       	cpi	r30, 0x2F	; 47
   17270:	f9 07       	cpc	r31, r25
   17272:	a1 f7       	brne	.-24     	; 0x1725c <init_Devices+0xe>
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   17274:	08 95       	ret

00017276 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   17276:	20 91 b2 19 	lds	r18, 0x19B2	; 0x8019b2 <stack_ind>
   1727a:	30 91 b3 19 	lds	r19, 0x19B3	; 0x8019b3 <stack_ind+0x1>
   1727e:	25 30       	cpi	r18, 0x05	; 5
   17280:	31 05       	cpc	r19, r1
   17282:	7c f4       	brge	.+30     	; 0x172a2 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   17284:	a9 01       	movw	r20, r18
   17286:	4f 5f       	subi	r20, 0xFF	; 255
   17288:	5f 4f       	sbci	r21, 0xFF	; 255
   1728a:	50 93 b3 19 	sts	0x19B3, r21	; 0x8019b3 <stack_ind+0x1>
   1728e:	40 93 b2 19 	sts	0x19B2, r20	; 0x8019b2 <stack_ind>
   17292:	22 0f       	add	r18, r18
   17294:	33 1f       	adc	r19, r19
   17296:	f9 01       	movw	r30, r18
   17298:	e8 55       	subi	r30, 0x58	; 88
   1729a:	f6 4e       	sbci	r31, 0xE6	; 230
   1729c:	80 83       	st	Z, r24
   1729e:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   172a0:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   172a2:	80 e0       	ldi	r24, 0x00	; 0
   172a4:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   172a6:	08 95       	ret

000172a8 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   172a8:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <stack_ind>
   172ac:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <stack_ind+0x1>
   172b0:	18 16       	cp	r1, r24
   172b2:	19 06       	cpc	r1, r25
   172b4:	6c f4       	brge	.+26     	; 0x172d0 <pop_state+0x28>
        return(stack_p[--stack_ind]);
   172b6:	01 97       	sbiw	r24, 0x01	; 1
   172b8:	90 93 b3 19 	sts	0x19B3, r25	; 0x8019b3 <stack_ind+0x1>
   172bc:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <stack_ind>
   172c0:	88 0f       	add	r24, r24
   172c2:	99 1f       	adc	r25, r25
   172c4:	fc 01       	movw	r30, r24
   172c6:	e8 55       	subi	r30, 0x58	; 88
   172c8:	f6 4e       	sbci	r31, 0xE6	; 230
   172ca:	80 81       	ld	r24, Z
   172cc:	91 81       	ldd	r25, Z+1	; 0x01
   172ce:	08 95       	ret
    else
        return(START_STATE);
   172d0:	80 e0       	ldi	r24, 0x00	; 0
   172d2:	90 e0       	ldi	r25, 0x00	; 0
}
   172d4:	08 95       	ret

000172d6 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
uint32_t assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   172d6:	a0 e0       	ldi	r26, 0x00	; 0
   172d8:	b0 e0       	ldi	r27, 0x00	; 0
   172da:	e1 e7       	ldi	r30, 0x71	; 113
   172dc:	f9 eb       	ldi	r31, 0xB9	; 185
   172de:	0c 94 1d eb 	jmp	0x1d63a	; 0x1d63a <__prologue_saves__+0x4>
   172e2:	2a 01       	movw	r4, r20
   172e4:	3b 01       	movw	r6, r22
   172e6:	48 01       	movw	r8, r16
   172e8:	59 01       	movw	r10, r18
   172ea:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   172ec:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
   172f0:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   172f2:	88 81       	ld	r24, Y
   172f4:	8d 33       	cpi	r24, 0x3D	; 61
   172f6:	29 f4       	brne	.+10     	; 0x17302 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   172f8:	ce 01       	movw	r24, r28
   172fa:	01 96       	adiw	r24, 0x01	; 1
   172fc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
   17300:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   17302:	88 81       	ld	r24, Y
   17304:	81 11       	cpse	r24, r1
   17306:	17 c0       	rjmp	.+46     	; 0x17336 <assign_value+0x60>
    {
        if(debuglevel & 1)
   17308:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1730c:	80 ff       	sbrs	r24, 0
   1730e:	7a c0       	rjmp	.+244    	; 0x17404 <assign_value+0x12e>
            printf("line:%d, missing value\n", lines);
   17310:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   17314:	8f 93       	push	r24
   17316:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   1731a:	8f 93       	push	r24
   1731c:	83 ea       	ldi	r24, 0xA3	; 163
   1731e:	90 e3       	ldi	r25, 0x30	; 48
   17320:	1f 92       	push	r1
   17322:	9f 93       	push	r25
   17324:	8f 93       	push	r24
   17326:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1732a:	0f 90       	pop	r0
   1732c:	0f 90       	pop	r0
   1732e:	0f 90       	pop	r0
   17330:	0f 90       	pop	r0
   17332:	0f 90       	pop	r0
   17334:	67 c0       	rjmp	.+206    	; 0x17404 <assign_value+0x12e>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   17336:	ce 01       	movw	r24, r28
   17338:	0e 94 c4 33 	call	0x6788	; 0x6788 <get_value>
   1733c:	6b 01       	movw	r12, r22
   1733e:	7c 01       	movw	r14, r24
        *val = tmp;
   17340:	f8 01       	movw	r30, r16
   17342:	60 83       	st	Z, r22
   17344:	71 83       	std	Z+1, r23	; 0x01
   17346:	82 83       	std	Z+2, r24	; 0x02
   17348:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   1734a:	41 14       	cp	r4, r1
   1734c:	51 04       	cpc	r5, r1
   1734e:	61 04       	cpc	r6, r1
   17350:	71 04       	cpc	r7, r1
   17352:	39 f1       	breq	.+78     	; 0x173a2 <assign_value+0xcc>
   17354:	c4 14       	cp	r12, r4
   17356:	d5 04       	cpc	r13, r5
   17358:	e6 04       	cpc	r14, r6
   1735a:	f7 04       	cpc	r15, r7
   1735c:	10 f5       	brcc	.+68     	; 0x173a2 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   1735e:	5f 92       	push	r5
   17360:	4f 92       	push	r4
   17362:	df 93       	push	r29
   17364:	cf 93       	push	r28
   17366:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1736a:	8f 93       	push	r24
   1736c:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   17370:	8f 93       	push	r24
   17372:	84 e8       	ldi	r24, 0x84	; 132
   17374:	90 e3       	ldi	r25, 0x30	; 48
   17376:	1f 92       	push	r1
   17378:	9f 93       	push	r25
   1737a:	8f 93       	push	r24
   1737c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   17380:	ed b7       	in	r30, 0x3d	; 61
   17382:	fe b7       	in	r31, 0x3e	; 62
   17384:	39 96       	adiw	r30, 0x09	; 9
   17386:	0f b6       	in	r0, 0x3f	; 63
   17388:	f8 94       	cli
   1738a:	fe bf       	out	0x3e, r31	; 62
   1738c:	0f be       	out	0x3f, r0	; 63
   1738e:	ed bf       	out	0x3d, r30	; 61
   17390:	ff ef       	ldi	r31, 0xFF	; 255
   17392:	8f 16       	cp	r8, r31
   17394:	9f 06       	cpc	r9, r31
   17396:	af 06       	cpc	r10, r31
   17398:	bf 06       	cpc	r11, r31
   1739a:	a1 f1       	breq	.+104    	; 0x17404 <assign_value+0x12e>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   1739c:	61 e0       	ldi	r22, 0x01	; 1
   1739e:	70 e0       	ldi	r23, 0x00	; 0
   173a0:	08 c0       	rjmp	.+16     	; 0x173b2 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   173a2:	ff ef       	ldi	r31, 0xFF	; 255
   173a4:	8f 16       	cp	r8, r31
   173a6:	9f 06       	cpc	r9, r31
   173a8:	af 06       	cpc	r10, r31
   173aa:	bf 06       	cpc	r11, r31
   173ac:	31 f1       	breq	.+76     	; 0x173fa <assign_value+0x124>
   173ae:	60 e0       	ldi	r22, 0x00	; 0
   173b0:	70 e0       	ldi	r23, 0x00	; 0
   173b2:	8c 14       	cp	r8, r12
   173b4:	9d 04       	cpc	r9, r13
   173b6:	ae 04       	cpc	r10, r14
   173b8:	bf 04       	cpc	r11, r15
   173ba:	d0 f4       	brcc	.+52     	; 0x173f0 <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   173bc:	9f 92       	push	r9
   173be:	8f 92       	push	r8
   173c0:	df 93       	push	r29
   173c2:	cf 93       	push	r28
   173c4:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   173c8:	8f 93       	push	r24
   173ca:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   173ce:	8f 93       	push	r24
   173d0:	85 e6       	ldi	r24, 0x65	; 101
   173d2:	90 e3       	ldi	r25, 0x30	; 48
   173d4:	1f 92       	push	r1
   173d6:	9f 93       	push	r25
   173d8:	8f 93       	push	r24
   173da:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   173de:	ed b7       	in	r30, 0x3d	; 61
   173e0:	fe b7       	in	r31, 0x3e	; 62
   173e2:	39 96       	adiw	r30, 0x09	; 9
   173e4:	0f b6       	in	r0, 0x3f	; 63
   173e6:	f8 94       	cli
   173e8:	fe bf       	out	0x3e, r31	; 62
   173ea:	0f be       	out	0x3f, r0	; 63
   173ec:	ed bf       	out	0x3d, r30	; 61
   173ee:	0a c0       	rjmp	.+20     	; 0x17404 <assign_value+0x12e>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   173f0:	f1 e0       	ldi	r31, 0x01	; 1
   173f2:	6f 27       	eor	r22, r31
   173f4:	80 e0       	ldi	r24, 0x00	; 0
   173f6:	90 e0       	ldi	r25, 0x00	; 0
   173f8:	08 c0       	rjmp	.+16     	; 0x1740a <assign_value+0x134>
    return(1);
   173fa:	61 e0       	ldi	r22, 0x01	; 1
   173fc:	70 e0       	ldi	r23, 0x00	; 0
   173fe:	80 e0       	ldi	r24, 0x00	; 0
   17400:	90 e0       	ldi	r25, 0x00	; 0
   17402:	03 c0       	rjmp	.+6      	; 0x1740a <assign_value+0x134>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   17404:	60 e0       	ldi	r22, 0x00	; 0
   17406:	70 e0       	ldi	r23, 0x00	; 0
   17408:	cb 01       	movw	r24, r22
    return(1);
}
   1740a:	cd b7       	in	r28, 0x3d	; 61
   1740c:	de b7       	in	r29, 0x3e	; 62
   1740e:	e0 e1       	ldi	r30, 0x10	; 16
   17410:	0c 94 39 eb 	jmp	0x1d672	; 0x1d672 <__epilogue_restores__+0x4>

00017414 <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   17414:	08 95       	ret

00017416 <POSIX_Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int POSIX_Read_Config(char *name)
{
   17416:	aa e9       	ldi	r26, 0x9A	; 154
   17418:	b0 e0       	ldi	r27, 0x00	; 0
   1741a:	e1 e1       	ldi	r30, 0x11	; 17
   1741c:	fa eb       	ldi	r31, 0xBA	; 186
   1741e:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   17422:	d8 2e       	mov	r13, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   17424:	c9 2e       	mov	r12, r25

    lines = 0;
   17426:	13 df       	rcall	.-474    	; 0x1724e <init_Devices>
   17428:	10 92 9d 19 	sts	0x199D, r1	; 0x80199d <lines+0x1>
   1742c:	10 92 9c 19 	sts	0x199C, r1	; 0x80199c <lines>

    printf("Reading: %s\n", name);
   17430:	cf 92       	push	r12
   17432:	df 92       	push	r13
   17434:	88 e5       	ldi	r24, 0x58	; 88
   17436:	90 e3       	ldi	r25, 0x30	; 48
   17438:	1f 92       	push	r1
   1743a:	9f 93       	push	r25
   1743c:	8f 93       	push	r24
   1743e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    cfg = fopen(name, "rb");
   17442:	60 e7       	ldi	r22, 0x70	; 112
   17444:	78 e0       	ldi	r23, 0x08	; 8
   17446:	8d 2d       	mov	r24, r13
   17448:	9c 2d       	mov	r25, r12
   1744a:	0e 94 b3 83 	call	0x10766	; 0x10766 <fopen>
   1744e:	c9 57       	subi	r28, 0x79	; 121
   17450:	df 4f       	sbci	r29, 0xFF	; 255
   17452:	99 83       	std	Y+1, r25	; 0x01
   17454:	88 83       	st	Y, r24
   17456:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   17458:	d0 40       	sbci	r29, 0x00	; 0
   1745a:	0f 90       	pop	r0
   1745c:	0f 90       	pop	r0
   1745e:	0f 90       	pop	r0
   17460:	0f 90       	pop	r0
   17462:	0f 90       	pop	r0
   17464:	89 2b       	or	r24, r25
   17466:	09 f4       	brne	.+2      	; 0x1746a <POSIX_Read_Config+0x54>
   17468:	53 c0       	rjmp	.+166    	; 0x17510 <POSIX_Read_Config+0xfa>
   1746a:	21 2c       	mov	r2, r1
   1746c:	31 2c       	mov	r3, r1
   1746e:	41 2c       	mov	r4, r1
   17470:	51 2c       	mov	r5, r1
   17472:	cb 57       	subi	r28, 0x7B	; 123
   17474:	df 4f       	sbci	r29, 0xFF	; 255
   17476:	19 82       	std	Y+1, r1	; 0x01
   17478:	18 82       	st	Y, r1
   1747a:	c5 58       	subi	r28, 0x85	; 133
   1747c:	d0 40       	sbci	r29, 0x00	; 0
   1747e:	61 2c       	mov	r6, r1
   17480:	71 2c       	mov	r7, r1
   17482:	a1 2c       	mov	r10, r1
   17484:	b1 2c       	mov	r11, r1
   17486:	81 2c       	mov	r8, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   17488:	91 2c       	mov	r9, r1
   1748a:	81 e9       	ldi	r24, 0x91	; 145
   1748c:	9d e2       	ldi	r25, 0x2D	; 45
   1748e:	9c 01       	movw	r18, r24
   17490:	40 e0       	ldi	r20, 0x00	; 0
   17492:	c7 57       	subi	r28, 0x77	; 119
   17494:	df 4f       	sbci	r29, 0xFF	; 255
   17496:	28 83       	st	Y, r18
   17498:	39 83       	std	Y+1, r19	; 0x01
   1749a:	4a 83       	std	Y+2, r20	; 0x02
   1749c:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1749e:	d0 40       	sbci	r29, 0x00	; 0
   174a0:	83 eb       	ldi	r24, 0xB3	; 179
   174a2:	9d e2       	ldi	r25, 0x2D	; 45
   174a4:	9c 01       	movw	r18, r24
   174a6:	40 e0       	ldi	r20, 0x00	; 0
   174a8:	c4 57       	subi	r28, 0x74	; 116
   174aa:	df 4f       	sbci	r29, 0xFF	; 255
   174ac:	28 83       	st	Y, r18
   174ae:	39 83       	std	Y+1, r19	; 0x01
   174b0:	4a 83       	std	Y+2, r20	; 0x02
   174b2:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   174b4:	d0 40       	sbci	r29, 0x00	; 0
   174b6:	83 ee       	ldi	r24, 0xE3	; 227
   174b8:	9d e2       	ldi	r25, 0x2D	; 45
   174ba:	9c 01       	movw	r18, r24
   174bc:	40 e0       	ldi	r20, 0x00	; 0
   174be:	c1 57       	subi	r28, 0x71	; 113
   174c0:	df 4f       	sbci	r29, 0xFF	; 255
   174c2:	28 83       	st	Y, r18
   174c4:	39 83       	std	Y+1, r19	; 0x01
   174c6:	4a 83       	std	Y+2, r20	; 0x02
   174c8:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   174ca:	d0 40       	sbci	r29, 0x00	; 0
   174cc:	82 e1       	ldi	r24, 0x12	; 18
   174ce:	9e e2       	ldi	r25, 0x2E	; 46
   174d0:	9c 01       	movw	r18, r24
   174d2:	40 e0       	ldi	r20, 0x00	; 0
   174d4:	ce 56       	subi	r28, 0x6E	; 110
   174d6:	df 4f       	sbci	r29, 0xFF	; 255
   174d8:	28 83       	st	Y, r18
   174da:	39 83       	std	Y+1, r19	; 0x01
   174dc:	4a 83       	std	Y+2, r20	; 0x02
   174de:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   174e0:	d0 40       	sbci	r29, 0x00	; 0
   174e2:	82 e4       	ldi	r24, 0x42	; 66
   174e4:	9e e2       	ldi	r25, 0x2E	; 46
   174e6:	9c 01       	movw	r18, r24
   174e8:	40 e0       	ldi	r20, 0x00	; 0
   174ea:	cb 56       	subi	r28, 0x6B	; 107
   174ec:	df 4f       	sbci	r29, 0xFF	; 255
   174ee:	28 83       	st	Y, r18
   174f0:	39 83       	std	Y+1, r19	; 0x01
   174f2:	4a 83       	std	Y+2, r20	; 0x02
   174f4:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   174f6:	d0 40       	sbci	r29, 0x00	; 0
   174f8:	8b e5       	ldi	r24, 0x5B	; 91
   174fa:	9e e2       	ldi	r25, 0x2E	; 46
   174fc:	9c 01       	movw	r18, r24
   174fe:	40 e0       	ldi	r20, 0x00	; 0
   17500:	c8 56       	subi	r28, 0x68	; 104
   17502:	df 4f       	sbci	r29, 0xFF	; 255
   17504:	28 83       	st	Y, r18
   17506:	39 83       	std	Y+1, r19	; 0x01
   17508:	4a 83       	std	Y+2, r20	; 0x02
   1750a:	c8 59       	subi	r28, 0x98	; 152
   1750c:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   1750e:	2f c0       	rjmp	.+94     	; 0x1756e <POSIX_Read_Config+0x158>
   17510:	89 ed       	ldi	r24, 0xD9	; 217
   17512:	93 e1       	ldi	r25, 0x13	; 19
   17514:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   17518:	cf 92       	push	r12
   1751a:	df 92       	push	r13
   1751c:	8a e3       	ldi	r24, 0x3A	; 58
   1751e:	90 e3       	ldi	r25, 0x30	; 48
   17520:	1f 92       	push	r1
   17522:	9f 93       	push	r25
   17524:	8f 93       	push	r24
   17526:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        set_Config_Defaults();
        return(errors);
   1752a:	0f 90       	pop	r0
   1752c:	0f 90       	pop	r0
   1752e:	0f 90       	pop	r0
   17530:	0f 90       	pop	r0
   17532:	0f 90       	pop	r0
   17534:	81 e0       	ldi	r24, 0x01	; 1
   17536:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   17538:	db c7       	rjmp	.+4022   	; 0x184f0 <POSIX_Read_Config+0x10da>
   1753a:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   1753e:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <lines+0x1>
   17542:	01 96       	adiw	r24, 0x01	; 1
   17544:	90 93 9d 19 	sts	0x199D, r25	; 0x80199d <lines+0x1>
   17548:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <lines>

        ptr = str;

        trim_tail(ptr);
   1754c:	ce 01       	movw	r24, r28
   1754e:	01 96       	adiw	r24, 0x01	; 1
   17550:	0e 94 4a 32 	call	0x6494	; 0x6494 <trim_tail>
        ptr = skipspaces(ptr);
   17554:	ce 01       	movw	r24, r28
   17556:	01 96       	adiw	r24, 0x01	; 1
   17558:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
        len = strlen(ptr);
   1755c:	6c 01       	movw	r12, r24
   1755e:	fc 01       	movw	r30, r24
   17560:	01 90       	ld	r0, Z+
   17562:	00 20       	and	r0, r0
   17564:	e9 f7       	brne	.-6      	; 0x17560 <POSIX_Read_Config+0x14a>
        if(!len)
   17566:	31 97       	sbiw	r30, 0x01	; 1
   17568:	8e 17       	cp	r24, r30
   1756a:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1756c:	79 f4       	brne	.+30     	; 0x1758c <POSIX_Read_Config+0x176>
   1756e:	c9 57       	subi	r28, 0x79	; 121
   17570:	df 4f       	sbci	r29, 0xFF	; 255
   17572:	48 81       	ld	r20, Y
   17574:	59 81       	ldd	r21, Y+1	; 0x01
   17576:	c7 58       	subi	r28, 0x87	; 135
   17578:	d0 40       	sbci	r29, 0x00	; 0
   1757a:	6e e7       	ldi	r22, 0x7E	; 126
   1757c:	70 e0       	ldi	r23, 0x00	; 0
   1757e:	ce 01       	movw	r24, r28
   17580:	01 96       	adiw	r24, 0x01	; 1
   17582:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
   17586:	89 2b       	or	r24, r25
   17588:	c1 f6       	brne	.-80     	; 0x1753a <POSIX_Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   1758a:	65 c7       	rjmp	.+3786   	; 0x18456 <POSIX_Read_Config+0x1040>
   1758c:	dc 01       	movw	r26, r24
   1758e:	8c 91       	ld	r24, X
   17590:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   17592:	69 f3       	breq	.-38     	; 0x1756e <POSIX_Read_Config+0x158>
   17594:	6c ee       	ldi	r22, 0xEC	; 236
   17596:	73 e1       	ldi	r23, 0x13	; 19
   17598:	c6 01       	movw	r24, r12
   1759a:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
        {
            state = pop_state();
   1759e:	89 2b       	or	r24, r25
   175a0:	19 f0       	breq	.+6      	; 0x175a8 <POSIX_Read_Config+0x192>
   175a2:	82 de       	rcall	.-764    	; 0x172a8 <pop_state>
            continue;
   175a4:	4c 01       	movw	r8, r24
        }

        switch(state)
   175a6:	e3 cf       	rjmp	.-58     	; 0x1756e <POSIX_Read_Config+0x158>
   175a8:	bd e0       	ldi	r27, 0x0D	; 13
   175aa:	8b 16       	cp	r8, r27
   175ac:	91 04       	cpc	r9, r1
   175ae:	08 f0       	brcs	.+2      	; 0x175b2 <POSIX_Read_Config+0x19c>
   175b0:	32 c7       	rjmp	.+3684   	; 0x18416 <POSIX_Read_Config+0x1000>
   175b2:	f4 01       	movw	r30, r8
   175b4:	e5 52       	subi	r30, 0x25	; 37
   175b6:	ff 4f       	sbci	r31, 0xFF	; 255
   175b8:	0c 94 ec ea 	jmp	0x1d5d8	; 0x1d5d8 <__tablejump2__>
        {
        case START_STATE:
            if(token(ptr,"SS80"))
   175bc:	60 ef       	ldi	r22, 0xF0	; 240
   175be:	73 e1       	ldi	r23, 0x13	; 19
   175c0:	c6 01       	movw	r24, r12
   175c2:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            {
                push_state(state);
   175c6:	89 2b       	or	r24, r25
   175c8:	b9 f0       	breq	.+46     	; 0x175f8 <POSIX_Read_Config+0x1e2>
                state = SS80_STATE;
                index = alloc_device(SS80_TYPE);
   175ca:	80 e0       	ldi	r24, 0x00	; 0
   175cc:	90 e0       	ldi	r25, 0x00	; 0
   175ce:	53 de       	rcall	.-858    	; 0x17276 <push_state>
   175d0:	82 e0       	ldi	r24, 0x02	; 2
   175d2:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   175d4:	ac dd       	rcall	.-1192   	; 0x1712e <alloc_device>
   175d6:	3c 01       	movw	r6, r24
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
   175d8:	01 96       	adiw	r24, 0x01	; 1
   175da:	49 f2       	breq	.-110    	; 0x1756e <POSIX_Read_Config+0x158>
   175dc:	87 e0       	ldi	r24, 0x07	; 7
   175de:	86 9d       	mul	r24, r6
   175e0:	f0 01       	movw	r30, r0
   175e2:	87 9d       	mul	r24, r7
   175e4:	f0 0d       	add	r31, r0
   175e6:	11 24       	eor	r1, r1
   175e8:	e9 50       	subi	r30, 0x09	; 9
   175ea:	f1 4e       	sbci	r31, 0xE1	; 225
        {
        case START_STATE:
            if(token(ptr,"SS80"))
            {
                push_state(state);
                state = SS80_STATE;
   175ec:	43 80       	ldd	r4, Z+3	; 0x03
   175ee:	54 80       	ldd	r5, Z+4	; 0x04
   175f0:	88 24       	eor	r8, r8
   175f2:	83 94       	inc	r8
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
   175f4:	91 2c       	mov	r9, r1
   175f6:	bb cf       	rjmp	.-138    	; 0x1756e <POSIX_Read_Config+0x158>
   175f8:	65 ef       	ldi	r22, 0xF5	; 245
   175fa:	73 e1       	ldi	r23, 0x13	; 19
   175fc:	c6 01       	movw	r24, r12
   175fe:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            {
                push_state(state);
   17602:	89 2b       	or	r24, r25
   17604:	c1 f0       	breq	.+48     	; 0x17636 <POSIX_Read_Config+0x220>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   17606:	80 e0       	ldi	r24, 0x00	; 0
   17608:	90 e0       	ldi	r25, 0x00	; 0
   1760a:	35 de       	rcall	.-918    	; 0x17276 <push_state>
   1760c:	81 e0       	ldi	r24, 0x01	; 1
   1760e:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   17610:	8e dd       	rcall	.-1252   	; 0x1712e <alloc_device>
   17612:	3c 01       	movw	r6, r24
   17614:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   17616:	09 f4       	brne	.+2      	; 0x1761a <POSIX_Read_Config+0x204>
   17618:	aa cf       	rjmp	.-172    	; 0x1756e <POSIX_Read_Config+0x158>
   1761a:	87 e0       	ldi	r24, 0x07	; 7
   1761c:	86 9d       	mul	r24, r6
   1761e:	f0 01       	movw	r30, r0
   17620:	87 9d       	mul	r24, r7
   17622:	f0 0d       	add	r31, r0
   17624:	11 24       	eor	r1, r1
   17626:	e9 50       	subi	r30, 0x09	; 9
   17628:	f1 4e       	sbci	r31, 0xE1	; 225
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
            {
                push_state(state);
                state = AMIGO_STATE;
   1762a:	23 80       	ldd	r2, Z+3	; 0x03
   1762c:	34 80       	ldd	r3, Z+4	; 0x04
   1762e:	a7 e0       	ldi	r26, 0x07	; 7
   17630:	8a 2e       	mov	r8, r26
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;

            }
#endif
            else if(token(ptr,"PRINTER"))
   17632:	91 2c       	mov	r9, r1
   17634:	9c cf       	rjmp	.-200    	; 0x1756e <POSIX_Read_Config+0x158>
   17636:	6b ef       	ldi	r22, 0xFB	; 251
   17638:	73 e1       	ldi	r23, 0x13	; 19
   1763a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1763c:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17640:	89 2b       	or	r24, r25
   17642:	f1 f0       	breq	.+60     	; 0x17680 <POSIX_Read_Config+0x26a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   17644:	80 e0       	ldi	r24, 0x00	; 0
   17646:	90 e0       	ldi	r25, 0x00	; 0
   17648:	16 de       	rcall	.-980    	; 0x17276 <push_state>
   1764a:	83 e0       	ldi	r24, 0x03	; 3
   1764c:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1764e:	6f dd       	rcall	.-1314   	; 0x1712e <alloc_device>
   17650:	3c 01       	movw	r6, r24
   17652:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   17654:	09 f4       	brne	.+2      	; 0x17658 <POSIX_Read_Config+0x242>
   17656:	8b cf       	rjmp	.-234    	; 0x1756e <POSIX_Read_Config+0x158>
   17658:	87 e0       	ldi	r24, 0x07	; 7
   1765a:	86 9d       	mul	r24, r6
   1765c:	f0 01       	movw	r30, r0
   1765e:	87 9d       	mul	r24, r7
   17660:	f0 0d       	add	r31, r0
   17662:	11 24       	eor	r1, r1
   17664:	e9 50       	subi	r30, 0x09	; 9
   17666:	f1 4e       	sbci	r31, 0xE1	; 225
   17668:	83 81       	ldd	r24, Z+3	; 0x03
   1766a:	94 81       	ldd	r25, Z+4	; 0x04
   1766c:	cb 57       	subi	r28, 0x7B	; 123
   1766e:	df 4f       	sbci	r29, 0xFF	; 255
   17670:	99 83       	std	Y+1, r25	; 0x01
   17672:	88 83       	st	Y, r24
            }
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   17674:	c5 58       	subi	r28, 0x85	; 133
   17676:	d0 40       	sbci	r29, 0x00	; 0
   17678:	fb e0       	ldi	r31, 0x0B	; 11
   1767a:	8f 2e       	mov	r8, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1767c:	91 2c       	mov	r9, r1
   1767e:	77 cf       	rjmp	.-274    	; 0x1756e <POSIX_Read_Config+0x158>
   17680:	63 e0       	ldi	r22, 0x03	; 3
   17682:	74 e1       	ldi	r23, 0x14	; 20
   17684:	c6 01       	movw	r24, r12
   17686:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   1768a:	00 97       	sbiw	r24, 0x00	; 0
   1768c:	f1 f0       	breq	.+60     	; 0x176ca <POSIX_Read_Config+0x2b4>
   1768e:	de 01       	movw	r26, r28
   17690:	af 57       	subi	r26, 0x7F	; 127
   17692:	bf 4f       	sbci	r27, 0xFF	; 255
   17694:	7d 01       	movw	r14, r26
   17696:	0f ef       	ldi	r16, 0xFF	; 255
   17698:	1f ef       	ldi	r17, 0xFF	; 255
   1769a:	20 e0       	ldi	r18, 0x00	; 0
   1769c:	30 e0       	ldi	r19, 0x00	; 0
   1769e:	40 e0       	ldi	r20, 0x00	; 0
   176a0:	50 e0       	ldi	r21, 0x00	; 0
   176a2:	ba 01       	movw	r22, r20
   176a4:	8c 0d       	add	r24, r12
   176a6:	9d 1d       	adc	r25, r13
   176a8:	16 de       	rcall	.-980    	; 0x172d6 <assign_value>
   176aa:	67 2b       	or	r22, r23
   176ac:	68 2b       	or	r22, r24
   176ae:	69 2b       	or	r22, r25
                    debuglevel = val;
   176b0:	09 f4       	brne	.+2      	; 0x176b4 <POSIX_Read_Config+0x29e>
   176b2:	5d cf       	rjmp	.-326    	; 0x1756e <POSIX_Read_Config+0x158>
   176b4:	cf 57       	subi	r28, 0x7F	; 127
   176b6:	df 4f       	sbci	r29, 0xFF	; 255
   176b8:	88 81       	ld	r24, Y
   176ba:	99 81       	ldd	r25, Y+1	; 0x01
   176bc:	c1 58       	subi	r28, 0x81	; 129
   176be:	d0 40       	sbci	r29, 0x00	; 0
   176c0:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   176c4:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   176c8:	52 cf       	rjmp	.-348    	; 0x1756e <POSIX_Read_Config+0x158>
   176ca:	69 e0       	ldi	r22, 0x09	; 9
   176cc:	74 e1       	ldi	r23, 0x14	; 20
   176ce:	c6 01       	movw	r24, r12
   176d0:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   176d4:	30 91 9d 19 	lds	r19, 0x199D	; 0x80199d <lines+0x1>
   176d8:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   176dc:	00 97       	sbiw	r24, 0x00	; 0
   176de:	61 f0       	breq	.+24     	; 0x176f8 <POSIX_Read_Config+0x2e2>
   176e0:	3f 93       	push	r19
   176e2:	2f 93       	push	r18
   176e4:	c8 0e       	add	r12, r24
   176e6:	d9 1e       	adc	r13, r25
   176e8:	df 92       	push	r13
   176ea:	cf 92       	push	r12
   176ec:	81 e2       	ldi	r24, 0x21	; 33
   176ee:	90 e3       	ldi	r25, 0x30	; 48
   176f0:	1f 92       	push	r1
   176f2:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   176f4:	8f 93       	push	r24
   176f6:	00 c5       	rjmp	.+2560   	; 0x180f8 <POSIX_Read_Config+0xce2>
   176f8:	3f 93       	push	r19
   176fa:	2f 93       	push	r18
   176fc:	df 92       	push	r13
   176fe:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   17700:	89 ef       	ldi	r24, 0xF9	; 249
   17702:	9f e2       	ldi	r25, 0x2F	; 47
   17704:	b5 c0       	rjmp	.+362    	; 0x17870 <POSIX_Read_Config+0x45a>
   17706:	61 e2       	ldi	r22, 0x21	; 33
   17708:	74 e1       	ldi	r23, 0x14	; 20
   1770a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1770c:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17710:	89 2b       	or	r24, r25
   17712:	39 f0       	breq	.+14     	; 0x17722 <POSIX_Read_Config+0x30c>
                state = PRINTER_CONFIG;
   17714:	8b e0       	ldi	r24, 0x0B	; 11
   17716:	90 e0       	ldi	r25, 0x00	; 0
   17718:	ae dd       	rcall	.-1188   	; 0x17276 <push_state>
   1771a:	ec e0       	ldi	r30, 0x0C	; 12
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1771c:	8e 2e       	mov	r8, r30
   1771e:	91 2c       	mov	r9, r1
   17720:	26 cf       	rjmp	.-436    	; 0x1756e <POSIX_Read_Config+0x158>
   17722:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   17726:	8f 93       	push	r24
   17728:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   1772c:	8f 93       	push	r24
   1772e:	df 92       	push	r13
   17730:	cf 92       	push	r12
   17732:	8f ec       	ldi	r24, 0xCF	; 207
   17734:	9f e2       	ldi	r25, 0x2F	; 47
   17736:	1f 92       	push	r1
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   17738:	9f 93       	push	r25
   1773a:	8f 93       	push	r24
   1773c:	aa c5       	rjmp	.+2900   	; 0x18292 <POSIX_Read_Config+0xe7c>
   1773e:	69 e1       	ldi	r22, 0x19	; 25
   17740:	74 e1       	ldi	r23, 0x14	; 20
   17742:	c6 01       	movw	r24, r12
   17744:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   17748:	00 97       	sbiw	r24, 0x00	; 0
   1774a:	79 f1       	breq	.+94     	; 0x177aa <POSIX_Read_Config+0x394>
   1774c:	de 01       	movw	r26, r28
   1774e:	af 57       	subi	r26, 0x7F	; 127
   17750:	bf 4f       	sbci	r27, 0xFF	; 255
   17752:	7d 01       	movw	r14, r26
   17754:	0e e0       	ldi	r16, 0x0E	; 14
   17756:	10 e0       	ldi	r17, 0x00	; 0
   17758:	20 e0       	ldi	r18, 0x00	; 0
   1775a:	30 e0       	ldi	r19, 0x00	; 0
   1775c:	40 e0       	ldi	r20, 0x00	; 0
   1775e:	50 e0       	ldi	r21, 0x00	; 0
   17760:	ba 01       	movw	r22, r20
   17762:	8c 0d       	add	r24, r12
   17764:	9d 1d       	adc	r25, r13
   17766:	b7 dd       	rcall	.-1170   	; 0x172d6 <assign_value>
   17768:	67 2b       	or	r22, r23
                    ++errors;
   1776a:	68 2b       	or	r22, r24
   1776c:	69 2b       	or	r22, r25
   1776e:	29 f4       	brne	.+10     	; 0x1777a <POSIX_Read_Config+0x364>
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   17770:	bf ef       	ldi	r27, 0xFF	; 255
   17772:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   17774:	bb 0a       	sbc	r11, r27
   17776:	8f ef       	ldi	r24, 0xFF	; 255
   17778:	05 c0       	rjmp	.+10     	; 0x17784 <POSIX_Read_Config+0x36e>
   1777a:	cf 57       	subi	r28, 0x7F	; 127
   1777c:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   1777e:	88 81       	ld	r24, Y
   17780:	c1 58       	subi	r28, 0x81	; 129
   17782:	d0 40       	sbci	r29, 0x00	; 0
   17784:	97 e0       	ldi	r25, 0x07	; 7
   17786:	96 9d       	mul	r25, r6
   17788:	f0 01       	movw	r30, r0
   1778a:	97 9d       	mul	r25, r7
   1778c:	f0 0d       	add	r31, r0
   1778e:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = tmp;
   17790:	e9 50       	subi	r30, 0x09	; 9
   17792:	f1 4e       	sbci	r31, 0xE1	; 225
   17794:	81 83       	std	Z+1, r24	; 0x01
   17796:	cb 57       	subi	r28, 0x7B	; 123
   17798:	df 4f       	sbci	r29, 0xFF	; 255
   1779a:	a8 81       	ld	r26, Y
   1779c:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   1779e:	c5 58       	subi	r28, 0x85	; 133
   177a0:	d0 40       	sbci	r29, 0x00	; 0
   177a2:	8c 93       	st	X, r24
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   177a4:	8f ef       	ldi	r24, 0xFF	; 255
   177a6:	82 83       	std	Z+2, r24	; 0x02
   177a8:	c2 c0       	rjmp	.+388    	; 0x1792e <POSIX_Read_Config+0x518>
   177aa:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   177ae:	8f 93       	push	r24
   177b0:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   177b4:	8f 93       	push	r24
   177b6:	df 92       	push	r13
   177b8:	cf 92       	push	r12
   177ba:	8e e9       	ldi	r24, 0x9E	; 158
   177bc:	9f e2       	ldi	r25, 0x2F	; 47
   177be:	1f 92       	push	r1
   177c0:	9f 93       	push	r25
                ++errors;
   177c2:	8f 93       	push	r24
   177c4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   177c8:	bf ef       	ldi	r27, 0xFF	; 255
   177ca:	ab 1a       	sub	r10, r27
   177cc:	bb 0a       	sbc	r11, r27
   177ce:	3d c6       	rjmp	.+3194   	; 0x1844a <POSIX_Read_Config+0x1034>
   177d0:	68 e2       	ldi	r22, 0x28	; 40
   177d2:	74 e1       	ldi	r23, 0x14	; 20
   177d4:	c6 01       	movw	r24, r12
            {
                push_state(state);
   177d6:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   177da:	89 2b       	or	r24, r25
   177dc:	39 f0       	breq	.+14     	; 0x177ec <POSIX_Read_Config+0x3d6>
                state = SS80_HEADER;
   177de:	81 e0       	ldi	r24, 0x01	; 1
   177e0:	90 e0       	ldi	r25, 0x00	; 0
   177e2:	49 dd       	rcall	.-1390   	; 0x17276 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   177e4:	72 e0       	ldi	r23, 0x02	; 2
   177e6:	87 2e       	mov	r8, r23
   177e8:	91 2c       	mov	r9, r1
   177ea:	c1 ce       	rjmp	.-638    	; 0x1756e <POSIX_Read_Config+0x158>
   177ec:	61 e2       	ldi	r22, 0x21	; 33
   177ee:	74 e1       	ldi	r23, 0x14	; 20
   177f0:	c6 01       	movw	r24, r12
            {
                push_state(state);
   177f2:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   177f6:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   177f8:	39 f0       	breq	.+14     	; 0x17808 <POSIX_Read_Config+0x3f2>
   177fa:	81 e0       	ldi	r24, 0x01	; 1
   177fc:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"CONTROLLER"))
   177fe:	3b dd       	rcall	.-1418   	; 0x17276 <push_state>
   17800:	63 e0       	ldi	r22, 0x03	; 3
   17802:	86 2e       	mov	r8, r22
   17804:	91 2c       	mov	r9, r1
   17806:	b3 ce       	rjmp	.-666    	; 0x1756e <POSIX_Read_Config+0x158>
   17808:	6f e2       	ldi	r22, 0x2F	; 47
   1780a:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   1780c:	c6 01       	movw	r24, r12
   1780e:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
                state = SS80_CONTROLLER;
   17812:	89 2b       	or	r24, r25
   17814:	39 f0       	breq	.+14     	; 0x17824 <POSIX_Read_Config+0x40e>
   17816:	81 e0       	ldi	r24, 0x01	; 1
   17818:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"UNIT"))
   1781a:	2d dd       	rcall	.-1446   	; 0x17276 <push_state>
   1781c:	54 e0       	ldi	r21, 0x04	; 4
   1781e:	85 2e       	mov	r8, r21
   17820:	91 2c       	mov	r9, r1
   17822:	a5 ce       	rjmp	.-694    	; 0x1756e <POSIX_Read_Config+0x158>
   17824:	6a e3       	ldi	r22, 0x3A	; 58
   17826:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17828:	c6 01       	movw	r24, r12
   1782a:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
                state = SS80_UNIT;
   1782e:	89 2b       	or	r24, r25
   17830:	39 f0       	breq	.+14     	; 0x17840 <POSIX_Read_Config+0x42a>
   17832:	81 e0       	ldi	r24, 0x01	; 1
   17834:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"VOLUME"))
   17836:	1f dd       	rcall	.-1474   	; 0x17276 <push_state>
   17838:	45 e0       	ldi	r20, 0x05	; 5
   1783a:	84 2e       	mov	r8, r20
   1783c:	91 2c       	mov	r9, r1
   1783e:	97 ce       	rjmp	.-722    	; 0x1756e <POSIX_Read_Config+0x158>
   17840:	6f e3       	ldi	r22, 0x3F	; 63
   17842:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17844:	c6 01       	movw	r24, r12
   17846:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   1784a:	89 2b       	or	r24, r25
                state = SS80_VOLUME;
   1784c:	39 f0       	breq	.+14     	; 0x1785c <POSIX_Read_Config+0x446>
   1784e:	81 e0       	ldi	r24, 0x01	; 1
   17850:	90 e0       	ldi	r25, 0x00	; 0
   17852:	11 dd       	rcall	.-1502   	; 0x17276 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   17854:	36 e0       	ldi	r19, 0x06	; 6
   17856:	83 2e       	mov	r8, r19
   17858:	91 2c       	mov	r9, r1
   1785a:	89 ce       	rjmp	.-750    	; 0x1756e <POSIX_Read_Config+0x158>
   1785c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   17860:	8f 93       	push	r24
   17862:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   17866:	8f 93       	push	r24
   17868:	df 92       	push	r13
   1786a:	cf 92       	push	r12
   1786c:	81 e7       	ldi	r24, 0x71	; 113
   1786e:	9f e2       	ldi	r25, 0x2F	; 47
                ++errors;
            }
            break;

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   17870:	1f 92       	push	r1
   17872:	9f 93       	push	r25
   17874:	8f 93       	push	r24
   17876:	c9 c5       	rjmp	.+2962   	; 0x1840a <POSIX_Read_Config+0xff4>
   17878:	69 e1       	ldi	r22, 0x19	; 25
   1787a:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   1787c:	c6 01       	movw	r24, r12
   1787e:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17882:	00 97       	sbiw	r24, 0x00	; 0
   17884:	39 f1       	breq	.+78     	; 0x178d4 <POSIX_Read_Config+0x4be>
   17886:	de 01       	movw	r26, r28
   17888:	af 57       	subi	r26, 0x7F	; 127
   1788a:	bf 4f       	sbci	r27, 0xFF	; 255
   1788c:	7d 01       	movw	r14, r26
   1788e:	0e e1       	ldi	r16, 0x1E	; 30
   17890:	10 e0       	ldi	r17, 0x00	; 0
   17892:	20 e0       	ldi	r18, 0x00	; 0
   17894:	30 e0       	ldi	r19, 0x00	; 0
   17896:	40 e0       	ldi	r20, 0x00	; 0
   17898:	50 e0       	ldi	r21, 0x00	; 0
   1789a:	ba 01       	movw	r22, r20
   1789c:	8c 0d       	add	r24, r12
   1789e:	9d 1d       	adc	r25, r13
   178a0:	1a dd       	rcall	.-1484   	; 0x172d6 <assign_value>
                    ++errors;
   178a2:	67 2b       	or	r22, r23
   178a4:	68 2b       	or	r22, r24
   178a6:	69 2b       	or	r22, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   178a8:	29 f4       	brne	.+10     	; 0x178b4 <POSIX_Read_Config+0x49e>
   178aa:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   178ac:	ab 1a       	sub	r10, r27
   178ae:	bb 0a       	sbc	r11, r27
   178b0:	8f ef       	ldi	r24, 0xFF	; 255
   178b2:	05 c0       	rjmp	.+10     	; 0x178be <POSIX_Read_Config+0x4a8>
   178b4:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   178b6:	df 4f       	sbci	r29, 0xFF	; 255
   178b8:	88 81       	ld	r24, Y
   178ba:	c1 58       	subi	r28, 0x81	; 129
   178bc:	d0 40       	sbci	r29, 0x00	; 0
   178be:	97 e0       	ldi	r25, 0x07	; 7
   178c0:	96 9d       	mul	r25, r6
   178c2:	f0 01       	movw	r30, r0
   178c4:	97 9d       	mul	r25, r7
   178c6:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   178c8:	11 24       	eor	r1, r1
   178ca:	e9 50       	subi	r30, 0x09	; 9
            }
            else if( (ind = token(ptr,"PPR")) )
   178cc:	f1 4e       	sbci	r31, 0xE1	; 225
   178ce:	81 83       	std	Z+1, r24	; 0x01
   178d0:	f2 01       	movw	r30, r4
   178d2:	42 c4       	rjmp	.+2180   	; 0x18158 <POSIX_Read_Config+0xd42>
   178d4:	66 e4       	ldi	r22, 0x46	; 70
   178d6:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   178d8:	c6 01       	movw	r24, r12
   178da:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   178de:	00 97       	sbiw	r24, 0x00	; 0
   178e0:	49 f1       	breq	.+82     	; 0x17934 <POSIX_Read_Config+0x51e>
   178e2:	9e 01       	movw	r18, r28
   178e4:	2f 57       	subi	r18, 0x7F	; 127
   178e6:	3f 4f       	sbci	r19, 0xFF	; 255
   178e8:	79 01       	movw	r14, r18
   178ea:	07 e0       	ldi	r16, 0x07	; 7
   178ec:	10 e0       	ldi	r17, 0x00	; 0
   178ee:	20 e0       	ldi	r18, 0x00	; 0
   178f0:	30 e0       	ldi	r19, 0x00	; 0
   178f2:	40 e0       	ldi	r20, 0x00	; 0
   178f4:	50 e0       	ldi	r21, 0x00	; 0
   178f6:	ba 01       	movw	r22, r20
   178f8:	8c 0d       	add	r24, r12
   178fa:	9d 1d       	adc	r25, r13
   178fc:	ec dc       	rcall	.-1576   	; 0x172d6 <assign_value>
                    ++errors;
   178fe:	67 2b       	or	r22, r23
   17900:	68 2b       	or	r22, r24
   17902:	69 2b       	or	r22, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17904:	29 f4       	brne	.+10     	; 0x17910 <POSIX_Read_Config+0x4fa>
   17906:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   17908:	a3 1a       	sub	r10, r19
   1790a:	b3 0a       	sbc	r11, r19
   1790c:	8f ef       	ldi	r24, 0xFF	; 255
   1790e:	05 c0       	rjmp	.+10     	; 0x1791a <POSIX_Read_Config+0x504>
   17910:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   17912:	df 4f       	sbci	r29, 0xFF	; 255
   17914:	88 81       	ld	r24, Y
   17916:	c1 58       	subi	r28, 0x81	; 129
   17918:	d0 40       	sbci	r29, 0x00	; 0
   1791a:	97 e0       	ldi	r25, 0x07	; 7
   1791c:	96 9d       	mul	r25, r6
   1791e:	f0 01       	movw	r30, r0
   17920:	97 9d       	mul	r25, r7
   17922:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   17924:	11 24       	eor	r1, r1
   17926:	e9 50       	subi	r30, 0x09	; 9
   17928:	f1 4e       	sbci	r31, 0xE1	; 225
   1792a:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   1792c:	d2 01       	movw	r26, r4
   1792e:	11 96       	adiw	r26, 0x01	; 1
   17930:	8c 93       	st	X, r24
   17932:	1d ce       	rjmp	.-966    	; 0x1756e <POSIX_Read_Config+0x158>
   17934:	6a e4       	ldi	r22, 0x4A	; 74
   17936:	74 e1       	ldi	r23, 0x14	; 20
   17938:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   1793a:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   1793e:	00 97       	sbiw	r24, 0x00	; 0
   17940:	a1 f0       	breq	.+40     	; 0x1796a <POSIX_Read_Config+0x554>
                if(*ptr == '=')
   17942:	8c 0d       	add	r24, r12
   17944:	9d 1d       	adc	r25, r13
   17946:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   1794a:	fc 01       	movw	r30, r24
   1794c:	20 81       	ld	r18, Z
   1794e:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   17950:	19 f4       	brne	.+6      	; 0x17958 <POSIX_Read_Config+0x542>
   17952:	01 96       	adiw	r24, 0x01	; 1
   17954:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
   17958:	4f e1       	ldi	r20, 0x1F	; 31
   1795a:	50 e0       	ldi	r21, 0x00	; 0
   1795c:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   1795e:	c2 01       	movw	r24, r4
   17960:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17962:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <strncpy>
   17966:	d2 01       	movw	r26, r4
   17968:	41 c4       	rjmp	.+2178   	; 0x181ec <POSIX_Read_Config+0xdd6>
   1796a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1796e:	8f 93       	push	r24
   17970:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   17974:	8f 93       	push	r24
   17976:	df 92       	push	r13
                ++errors;
            }
            break;
        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17978:	cf 92       	push	r12
   1797a:	83 e4       	ldi	r24, 0x43	; 67
   1797c:	9f e2       	ldi	r25, 0x2F	; 47
   1797e:	1f cf       	rjmp	.-450    	; 0x177be <POSIX_Read_Config+0x3a8>
   17980:	6f e4       	ldi	r22, 0x4F	; 79
   17982:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17984:	c6 01       	movw	r24, r12
   17986:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   1798a:	00 97       	sbiw	r24, 0x00	; 0
   1798c:	09 f1       	breq	.+66     	; 0x179d0 <POSIX_Read_Config+0x5ba>
   1798e:	9e 01       	movw	r18, r28
   17990:	2f 57       	subi	r18, 0x7F	; 127
   17992:	3f 4f       	sbci	r19, 0xFF	; 255
   17994:	79 01       	movw	r14, r18
   17996:	0f ef       	ldi	r16, 0xFF	; 255
   17998:	1f ef       	ldi	r17, 0xFF	; 255
   1799a:	20 e0       	ldi	r18, 0x00	; 0
   1799c:	30 e0       	ldi	r19, 0x00	; 0
   1799e:	40 e0       	ldi	r20, 0x00	; 0
   179a0:	50 e0       	ldi	r21, 0x00	; 0
   179a2:	ba 01       	movw	r22, r20
   179a4:	8c 0d       	add	r24, r12
   179a6:	9d 1d       	adc	r25, r13
   179a8:	96 dc       	rcall	.-1748   	; 0x172d6 <assign_value>
                    ++errors;
   179aa:	67 2b       	or	r22, r23
   179ac:	68 2b       	or	r22, r24
   179ae:	69 2b       	or	r22, r25
                SS80p->CONFIG.ID = val;
   179b0:	19 f4       	brne	.+6      	; 0x179b8 <POSIX_Read_Config+0x5a2>
   179b2:	3f ef       	ldi	r19, 0xFF	; 255
   179b4:	a3 1a       	sub	r10, r19
   179b6:	b3 0a       	sbc	r11, r19
   179b8:	cf 57       	subi	r28, 0x7F	; 127
   179ba:	df 4f       	sbci	r29, 0xFF	; 255
   179bc:	88 81       	ld	r24, Y
   179be:	99 81       	ldd	r25, Y+1	; 0x01
   179c0:	c1 58       	subi	r28, 0x81	; 129
   179c2:	d0 40       	sbci	r29, 0x00	; 0
   179c4:	d2 01       	movw	r26, r4
   179c6:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   179c8:	9c 93       	st	X, r25
   179ca:	8e 93       	st	-X, r24
   179cc:	93 97       	sbiw	r26, 0x23	; 35
   179ce:	cf cd       	rjmp	.-1122   	; 0x1756e <POSIX_Read_Config+0x158>
   179d0:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   179d4:	8f 93       	push	r24
   179d6:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   179da:	8f 93       	push	r24
   179dc:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   179de:	cf 92       	push	r12
   179e0:	85 e1       	ldi	r24, 0x15	; 21
   179e2:	9f e2       	ldi	r25, 0x2F	; 47
   179e4:	ec ce       	rjmp	.-552    	; 0x177be <POSIX_Read_Config+0x3a8>
   179e6:	62 e5       	ldi	r22, 0x52	; 82
   179e8:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   179ea:	c6 01       	movw	r24, r12
   179ec:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   179f0:	00 97       	sbiw	r24, 0x00	; 0
   179f2:	09 f1       	breq	.+66     	; 0x17a36 <POSIX_Read_Config+0x620>
   179f4:	9e 01       	movw	r18, r28
   179f6:	2f 57       	subi	r18, 0x7F	; 127
   179f8:	3f 4f       	sbci	r19, 0xFF	; 255
   179fa:	79 01       	movw	r14, r18
   179fc:	0f ef       	ldi	r16, 0xFF	; 255
   179fe:	1f ef       	ldi	r17, 0xFF	; 255
   17a00:	20 e0       	ldi	r18, 0x00	; 0
   17a02:	30 e0       	ldi	r19, 0x00	; 0
   17a04:	40 e0       	ldi	r20, 0x00	; 0
   17a06:	50 e0       	ldi	r21, 0x00	; 0
   17a08:	ba 01       	movw	r22, r20
   17a0a:	8c 0d       	add	r24, r12
   17a0c:	9d 1d       	adc	r25, r13
   17a0e:	63 dc       	rcall	.-1850   	; 0x172d6 <assign_value>
                    ++errors;
   17a10:	67 2b       	or	r22, r23
   17a12:	68 2b       	or	r22, r24
   17a14:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   17a16:	19 f4       	brne	.+6      	; 0x17a1e <POSIX_Read_Config+0x608>
   17a18:	3f ef       	ldi	r19, 0xFF	; 255
   17a1a:	a3 1a       	sub	r10, r19
   17a1c:	b3 0a       	sbc	r11, r19
   17a1e:	cf 57       	subi	r28, 0x7F	; 127
   17a20:	df 4f       	sbci	r29, 0xFF	; 255
   17a22:	88 81       	ld	r24, Y
   17a24:	99 81       	ldd	r25, Y+1	; 0x01
   17a26:	c1 58       	subi	r28, 0x81	; 129
   17a28:	d0 40       	sbci	r29, 0x00	; 0
   17a2a:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   17a2c:	96 96       	adiw	r26, 0x26	; 38
   17a2e:	9c 93       	st	X, r25
   17a30:	8e 93       	st	-X, r24
   17a32:	95 97       	sbiw	r26, 0x25	; 37
   17a34:	9c cd       	rjmp	.-1224   	; 0x1756e <POSIX_Read_Config+0x158>
   17a36:	6a eb       	ldi	r22, 0xBA	; 186
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17a38:	74 e1       	ldi	r23, 0x14	; 20
   17a3a:	c6 01       	movw	r24, r12
   17a3c:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17a40:	00 97       	sbiw	r24, 0x00	; 0
   17a42:	e9 f0       	breq	.+58     	; 0x17a7e <POSIX_Read_Config+0x668>
   17a44:	fe 01       	movw	r30, r28
   17a46:	ef 57       	subi	r30, 0x7F	; 127
   17a48:	ff 4f       	sbci	r31, 0xFF	; 255
   17a4a:	7f 01       	movw	r14, r30
   17a4c:	0f ef       	ldi	r16, 0xFF	; 255
   17a4e:	1f ef       	ldi	r17, 0xFF	; 255
   17a50:	20 e0       	ldi	r18, 0x00	; 0
   17a52:	30 e0       	ldi	r19, 0x00	; 0
   17a54:	40 e0       	ldi	r20, 0x00	; 0
   17a56:	50 e0       	ldi	r21, 0x00	; 0
   17a58:	ba 01       	movw	r22, r20
   17a5a:	8c 0d       	add	r24, r12
   17a5c:	9d 1d       	adc	r25, r13
                    ++errors;
   17a5e:	3b dc       	rcall	.-1930   	; 0x172d6 <assign_value>
   17a60:	67 2b       	or	r22, r23
   17a62:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   17a64:	69 2b       	or	r22, r25
   17a66:	19 f4       	brne	.+6      	; 0x17a6e <POSIX_Read_Config+0x658>
   17a68:	ff ef       	ldi	r31, 0xFF	; 255
   17a6a:	af 1a       	sub	r10, r31
   17a6c:	bf 0a       	sbc	r11, r31
   17a6e:	cf 57       	subi	r28, 0x7F	; 127
   17a70:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"TYPE")) )
   17a72:	88 81       	ld	r24, Y
   17a74:	99 81       	ldd	r25, Y+1	; 0x01
   17a76:	c1 58       	subi	r28, 0x81	; 129
   17a78:	d0 40       	sbci	r29, 0x00	; 0
   17a7a:	d2 01       	movw	r26, r4
   17a7c:	5a c4       	rjmp	.+2228   	; 0x18332 <POSIX_Read_Config+0xf1c>
   17a7e:	69 eb       	ldi	r22, 0xB9	; 185
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17a80:	73 e1       	ldi	r23, 0x13	; 19
   17a82:	c6 01       	movw	r24, r12
   17a84:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17a88:	00 97       	sbiw	r24, 0x00	; 0
   17a8a:	f1 f0       	breq	.+60     	; 0x17ac8 <POSIX_Read_Config+0x6b2>
   17a8c:	fe 01       	movw	r30, r28
   17a8e:	ef 57       	subi	r30, 0x7F	; 127
   17a90:	ff 4f       	sbci	r31, 0xFF	; 255
   17a92:	7f 01       	movw	r14, r30
   17a94:	0f ef       	ldi	r16, 0xFF	; 255
   17a96:	1f ef       	ldi	r17, 0xFF	; 255
   17a98:	20 e0       	ldi	r18, 0x00	; 0
   17a9a:	30 e0       	ldi	r19, 0x00	; 0
   17a9c:	40 e0       	ldi	r20, 0x00	; 0
   17a9e:	50 e0       	ldi	r21, 0x00	; 0
   17aa0:	ba 01       	movw	r22, r20
   17aa2:	8c 0d       	add	r24, r12
   17aa4:	9d 1d       	adc	r25, r13
                    ++errors;
   17aa6:	17 dc       	rcall	.-2002   	; 0x172d6 <assign_value>
   17aa8:	67 2b       	or	r22, r23
   17aaa:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TYPE = val;
   17aac:	69 2b       	or	r22, r25
   17aae:	19 f4       	brne	.+6      	; 0x17ab6 <POSIX_Read_Config+0x6a0>
   17ab0:	ff ef       	ldi	r31, 0xFF	; 255
   17ab2:	af 1a       	sub	r10, r31
   17ab4:	bf 0a       	sbc	r11, r31
   17ab6:	cf 57       	subi	r28, 0x7F	; 127
   17ab8:	df 4f       	sbci	r29, 0xFF	; 255
   17aba:	88 81       	ld	r24, Y
   17abc:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   17abe:	d0 40       	sbci	r29, 0x00	; 0
   17ac0:	d2 01       	movw	r26, r4
   17ac2:	99 96       	adiw	r26, 0x29	; 41
   17ac4:	8c 93       	st	X, r24
   17ac6:	53 cd       	rjmp	.-1370   	; 0x1756e <POSIX_Read_Config+0x158>
   17ac8:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   17acc:	8f 93       	push	r24
   17ace:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
                ++errors;
            }
            break;

        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   17ad2:	8f 93       	push	r24
   17ad4:	df 92       	push	r13
   17ad6:	cf 92       	push	r12
   17ad8:	83 ee       	ldi	r24, 0xE3	; 227
   17ada:	9e e2       	ldi	r25, 0x2E	; 46
   17adc:	70 ce       	rjmp	.-800    	; 0x177be <POSIX_Read_Config+0x3a8>
   17ade:	62 e6       	ldi	r22, 0x62	; 98
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17ae0:	74 e1       	ldi	r23, 0x14	; 20
   17ae2:	c6 01       	movw	r24, r12
   17ae4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17ae8:	00 97       	sbiw	r24, 0x00	; 0
   17aea:	f1 f0       	breq	.+60     	; 0x17b28 <POSIX_Read_Config+0x712>
   17aec:	9e 01       	movw	r18, r28
   17aee:	2f 57       	subi	r18, 0x7F	; 127
   17af0:	3f 4f       	sbci	r19, 0xFF	; 255
   17af2:	79 01       	movw	r14, r18
   17af4:	0f ef       	ldi	r16, 0xFF	; 255
   17af6:	1f ef       	ldi	r17, 0xFF	; 255
   17af8:	20 e0       	ldi	r18, 0x00	; 0
   17afa:	30 e0       	ldi	r19, 0x00	; 0
   17afc:	40 e0       	ldi	r20, 0x00	; 0
   17afe:	50 e0       	ldi	r21, 0x00	; 0
   17b00:	ba 01       	movw	r22, r20
   17b02:	8c 0d       	add	r24, r12
   17b04:	9d 1d       	adc	r25, r13
                    ++errors;
   17b06:	e7 db       	rcall	.-2098   	; 0x172d6 <assign_value>
   17b08:	67 2b       	or	r22, r23
   17b0a:	68 2b       	or	r22, r24
                SS80p->UNIT.UNIT_TYPE = val;
   17b0c:	69 2b       	or	r22, r25
   17b0e:	19 f4       	brne	.+6      	; 0x17b16 <POSIX_Read_Config+0x700>
   17b10:	3f ef       	ldi	r19, 0xFF	; 255
   17b12:	a3 1a       	sub	r10, r19
   17b14:	b3 0a       	sbc	r11, r19
   17b16:	cf 57       	subi	r28, 0x7F	; 127
   17b18:	df 4f       	sbci	r29, 0xFF	; 255
   17b1a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   17b1c:	c1 58       	subi	r28, 0x81	; 129
   17b1e:	d0 40       	sbci	r29, 0x00	; 0
   17b20:	d2 01       	movw	r26, r4
   17b22:	9a 96       	adiw	r26, 0x2a	; 42
   17b24:	8c 93       	st	X, r24
   17b26:	23 cd       	rjmp	.-1466   	; 0x1756e <POSIX_Read_Config+0x158>
   17b28:	6c e6       	ldi	r22, 0x6C	; 108
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   17b2a:	74 e1       	ldi	r23, 0x14	; 20
   17b2c:	c6 01       	movw	r24, r12
   17b2e:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17b32:	00 97       	sbiw	r24, 0x00	; 0
   17b34:	11 f1       	breq	.+68     	; 0x17b7a <POSIX_Read_Config+0x764>
   17b36:	fe 01       	movw	r30, r28
   17b38:	ef 57       	subi	r30, 0x7F	; 127
   17b3a:	ff 4f       	sbci	r31, 0xFF	; 255
   17b3c:	7f 01       	movw	r14, r30
   17b3e:	0f ef       	ldi	r16, 0xFF	; 255
   17b40:	1f ef       	ldi	r17, 0xFF	; 255
   17b42:	98 01       	movw	r18, r16
   17b44:	40 e0       	ldi	r20, 0x00	; 0
   17b46:	50 e0       	ldi	r21, 0x00	; 0
   17b48:	ba 01       	movw	r22, r20
   17b4a:	8c 0d       	add	r24, r12
   17b4c:	9d 1d       	adc	r25, r13
                    ++errors;
   17b4e:	c3 db       	rcall	.-2170   	; 0x172d6 <assign_value>
   17b50:	67 2b       	or	r22, r23
   17b52:	68 2b       	or	r22, r24
                SS80p->UNIT.DEVICE_NUMBER = val;
   17b54:	69 2b       	or	r22, r25
   17b56:	19 f4       	brne	.+6      	; 0x17b5e <POSIX_Read_Config+0x748>
   17b58:	ff ef       	ldi	r31, 0xFF	; 255
   17b5a:	af 1a       	sub	r10, r31
   17b5c:	bf 0a       	sbc	r11, r31
   17b5e:	cf 57       	subi	r28, 0x7F	; 127
   17b60:	df 4f       	sbci	r29, 0xFF	; 255
   17b62:	88 81       	ld	r24, Y
   17b64:	99 81       	ldd	r25, Y+1	; 0x01
   17b66:	aa 81       	ldd	r26, Y+2	; 0x02
   17b68:	bb 81       	ldd	r27, Y+3	; 0x03
   17b6a:	c1 58       	subi	r28, 0x81	; 129
   17b6c:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   17b6e:	f2 01       	movw	r30, r4
   17b70:	83 a7       	std	Z+43, r24	; 0x2b
   17b72:	94 a7       	std	Z+44, r25	; 0x2c
   17b74:	a5 a7       	std	Z+45, r26	; 0x2d
   17b76:	b6 a7       	std	Z+46, r27	; 0x2e
   17b78:	fa cc       	rjmp	.-1548   	; 0x1756e <POSIX_Read_Config+0x158>
   17b7a:	6a e7       	ldi	r22, 0x7A	; 122
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   17b7c:	74 e1       	ldi	r23, 0x14	; 20
   17b7e:	c6 01       	movw	r24, r12
   17b80:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17b84:	00 97       	sbiw	r24, 0x00	; 0
   17b86:	09 f1       	breq	.+66     	; 0x17bca <POSIX_Read_Config+0x7b4>
   17b88:	9e 01       	movw	r18, r28
   17b8a:	2f 57       	subi	r18, 0x7F	; 127
   17b8c:	3f 4f       	sbci	r19, 0xFF	; 255
   17b8e:	79 01       	movw	r14, r18
   17b90:	00 e0       	ldi	r16, 0x00	; 0
   17b92:	10 e1       	ldi	r17, 0x10	; 16
   17b94:	20 e0       	ldi	r18, 0x00	; 0
   17b96:	30 e0       	ldi	r19, 0x00	; 0
   17b98:	40 e0       	ldi	r20, 0x00	; 0
   17b9a:	50 e0       	ldi	r21, 0x00	; 0
   17b9c:	ba 01       	movw	r22, r20
   17b9e:	8c 0d       	add	r24, r12
   17ba0:	9d 1d       	adc	r25, r13
                    ++errors;
   17ba2:	99 db       	rcall	.-2254   	; 0x172d6 <assign_value>
   17ba4:	67 2b       	or	r22, r23
   17ba6:	68 2b       	or	r22, r24
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   17ba8:	69 2b       	or	r22, r25
   17baa:	19 f4       	brne	.+6      	; 0x17bb2 <POSIX_Read_Config+0x79c>
   17bac:	3f ef       	ldi	r19, 0xFF	; 255
   17bae:	a3 1a       	sub	r10, r19
   17bb0:	b3 0a       	sbc	r11, r19
   17bb2:	cf 57       	subi	r28, 0x7F	; 127
   17bb4:	df 4f       	sbci	r29, 0xFF	; 255
   17bb6:	88 81       	ld	r24, Y
   17bb8:	99 81       	ldd	r25, Y+1	; 0x01
   17bba:	c1 58       	subi	r28, 0x81	; 129
   17bbc:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   17bbe:	d2 01       	movw	r26, r4
   17bc0:	d0 96       	adiw	r26, 0x30	; 48
   17bc2:	9c 93       	st	X, r25
   17bc4:	8e 93       	st	-X, r24
   17bc6:	9f 97       	sbiw	r26, 0x2f	; 47
   17bc8:	d2 cc       	rjmp	.-1628   	; 0x1756e <POSIX_Read_Config+0x158>
   17bca:	6a e8       	ldi	r22, 0x8A	; 138
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   17bcc:	74 e1       	ldi	r23, 0x14	; 20
   17bce:	c6 01       	movw	r24, r12
   17bd0:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17bd4:	00 97       	sbiw	r24, 0x00	; 0
   17bd6:	f9 f0       	breq	.+62     	; 0x17c16 <POSIX_Read_Config+0x800>
   17bd8:	fe 01       	movw	r30, r28
   17bda:	ef 57       	subi	r30, 0x7F	; 127
   17bdc:	ff 4f       	sbci	r31, 0xFF	; 255
   17bde:	7f 01       	movw	r14, r30
   17be0:	01 e0       	ldi	r16, 0x01	; 1
   17be2:	10 e0       	ldi	r17, 0x00	; 0
   17be4:	20 e0       	ldi	r18, 0x00	; 0
   17be6:	30 e0       	ldi	r19, 0x00	; 0
   17be8:	41 e0       	ldi	r20, 0x01	; 1
   17bea:	50 e0       	ldi	r21, 0x00	; 0
   17bec:	60 e0       	ldi	r22, 0x00	; 0
   17bee:	70 e0       	ldi	r23, 0x00	; 0
   17bf0:	8c 0d       	add	r24, r12
   17bf2:	9d 1d       	adc	r25, r13
                    ++errors;
   17bf4:	70 db       	rcall	.-2336   	; 0x172d6 <assign_value>
   17bf6:	67 2b       	or	r22, r23
   17bf8:	68 2b       	or	r22, r24
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   17bfa:	69 2b       	or	r22, r25
   17bfc:	19 f4       	brne	.+6      	; 0x17c04 <POSIX_Read_Config+0x7ee>
   17bfe:	ff ef       	ldi	r31, 0xFF	; 255
   17c00:	af 1a       	sub	r10, r31
   17c02:	bf 0a       	sbc	r11, r31
   17c04:	cf 57       	subi	r28, 0x7F	; 127
   17c06:	df 4f       	sbci	r29, 0xFF	; 255
   17c08:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   17c0a:	c1 58       	subi	r28, 0x81	; 129
   17c0c:	d0 40       	sbci	r29, 0x00	; 0
   17c0e:	d2 01       	movw	r26, r4
   17c10:	d1 96       	adiw	r26, 0x31	; 49
   17c12:	8c 93       	st	X, r24
   17c14:	ac cc       	rjmp	.-1704   	; 0x1756e <POSIX_Read_Config+0x158>
   17c16:	6a e9       	ldi	r22, 0x9A	; 154
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   17c18:	74 e1       	ldi	r23, 0x14	; 20
   17c1a:	c6 01       	movw	r24, r12
   17c1c:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17c20:	00 97       	sbiw	r24, 0x00	; 0
   17c22:	e9 f0       	breq	.+58     	; 0x17c5e <POSIX_Read_Config+0x848>
   17c24:	fe 01       	movw	r30, r28
   17c26:	ef 57       	subi	r30, 0x7F	; 127
   17c28:	ff 4f       	sbci	r31, 0xFF	; 255
   17c2a:	7f 01       	movw	r14, r30
   17c2c:	00 e0       	ldi	r16, 0x00	; 0
   17c2e:	10 e0       	ldi	r17, 0x00	; 0
   17c30:	98 01       	movw	r18, r16
   17c32:	40 e0       	ldi	r20, 0x00	; 0
   17c34:	50 e0       	ldi	r21, 0x00	; 0
   17c36:	ba 01       	movw	r22, r20
   17c38:	8c 0d       	add	r24, r12
   17c3a:	9d 1d       	adc	r25, r13
                    ++errors;
   17c3c:	4c db       	rcall	.-2408   	; 0x172d6 <assign_value>
   17c3e:	67 2b       	or	r22, r23
   17c40:	68 2b       	or	r22, r24
                SS80p->UNIT.BURST_SIZE = val;
   17c42:	69 2b       	or	r22, r25
   17c44:	19 f4       	brne	.+6      	; 0x17c4c <POSIX_Read_Config+0x836>
   17c46:	ff ef       	ldi	r31, 0xFF	; 255
   17c48:	af 1a       	sub	r10, r31
   17c4a:	bf 0a       	sbc	r11, r31
   17c4c:	cf 57       	subi	r28, 0x7F	; 127
   17c4e:	df 4f       	sbci	r29, 0xFF	; 255
   17c50:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   17c52:	c1 58       	subi	r28, 0x81	; 129
   17c54:	d0 40       	sbci	r29, 0x00	; 0
   17c56:	d2 01       	movw	r26, r4
   17c58:	d2 96       	adiw	r26, 0x32	; 50
   17c5a:	8c 93       	st	X, r24
   17c5c:	88 cc       	rjmp	.-1776   	; 0x1756e <POSIX_Read_Config+0x158>
   17c5e:	65 ea       	ldi	r22, 0xA5	; 165
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17c60:	74 e1       	ldi	r23, 0x14	; 20
   17c62:	c6 01       	movw	r24, r12
   17c64:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17c68:	00 97       	sbiw	r24, 0x00	; 0
   17c6a:	09 f1       	breq	.+66     	; 0x17cae <POSIX_Read_Config+0x898>
   17c6c:	fe 01       	movw	r30, r28
   17c6e:	ef 57       	subi	r30, 0x7F	; 127
   17c70:	ff 4f       	sbci	r31, 0xFF	; 255
   17c72:	7f 01       	movw	r14, r30
   17c74:	0f ef       	ldi	r16, 0xFF	; 255
   17c76:	1f ef       	ldi	r17, 0xFF	; 255
   17c78:	20 e0       	ldi	r18, 0x00	; 0
   17c7a:	30 e0       	ldi	r19, 0x00	; 0
   17c7c:	40 e0       	ldi	r20, 0x00	; 0
   17c7e:	50 e0       	ldi	r21, 0x00	; 0
   17c80:	ba 01       	movw	r22, r20
   17c82:	8c 0d       	add	r24, r12
   17c84:	9d 1d       	adc	r25, r13
                    ++errors;
   17c86:	27 db       	rcall	.-2482   	; 0x172d6 <assign_value>
   17c88:	67 2b       	or	r22, r23
   17c8a:	68 2b       	or	r22, r24
                SS80p->UNIT.BLOCK_TIME = val;
   17c8c:	69 2b       	or	r22, r25
   17c8e:	19 f4       	brne	.+6      	; 0x17c96 <POSIX_Read_Config+0x880>
   17c90:	ff ef       	ldi	r31, 0xFF	; 255
   17c92:	af 1a       	sub	r10, r31
   17c94:	bf 0a       	sbc	r11, r31
   17c96:	cf 57       	subi	r28, 0x7F	; 127
   17c98:	df 4f       	sbci	r29, 0xFF	; 255
   17c9a:	88 81       	ld	r24, Y
   17c9c:	99 81       	ldd	r25, Y+1	; 0x01
   17c9e:	c1 58       	subi	r28, 0x81	; 129
   17ca0:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   17ca2:	d2 01       	movw	r26, r4
   17ca4:	d4 96       	adiw	r26, 0x34	; 52
   17ca6:	9c 93       	st	X, r25
   17ca8:	8e 93       	st	-X, r24
   17caa:	d3 97       	sbiw	r26, 0x33	; 51
   17cac:	60 cc       	rjmp	.-1856   	; 0x1756e <POSIX_Read_Config+0x158>
   17cae:	60 eb       	ldi	r22, 0xB0	; 176
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17cb0:	74 e1       	ldi	r23, 0x14	; 20
   17cb2:	c6 01       	movw	r24, r12
   17cb4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17cb8:	00 97       	sbiw	r24, 0x00	; 0
   17cba:	09 f1       	breq	.+66     	; 0x17cfe <POSIX_Read_Config+0x8e8>
   17cbc:	fe 01       	movw	r30, r28
   17cbe:	ef 57       	subi	r30, 0x7F	; 127
   17cc0:	ff 4f       	sbci	r31, 0xFF	; 255
   17cc2:	7f 01       	movw	r14, r30
   17cc4:	0f ef       	ldi	r16, 0xFF	; 255
   17cc6:	1f ef       	ldi	r17, 0xFF	; 255
   17cc8:	20 e0       	ldi	r18, 0x00	; 0
   17cca:	30 e0       	ldi	r19, 0x00	; 0
   17ccc:	40 e0       	ldi	r20, 0x00	; 0
   17cce:	50 e0       	ldi	r21, 0x00	; 0
   17cd0:	ba 01       	movw	r22, r20
   17cd2:	8c 0d       	add	r24, r12
   17cd4:	9d 1d       	adc	r25, r13
                    ++errors;
   17cd6:	ff da       	rcall	.-2562   	; 0x172d6 <assign_value>
   17cd8:	67 2b       	or	r22, r23
   17cda:	68 2b       	or	r22, r24
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   17cdc:	69 2b       	or	r22, r25
   17cde:	19 f4       	brne	.+6      	; 0x17ce6 <POSIX_Read_Config+0x8d0>
   17ce0:	ff ef       	ldi	r31, 0xFF	; 255
   17ce2:	af 1a       	sub	r10, r31
   17ce4:	bf 0a       	sbc	r11, r31
   17ce6:	cf 57       	subi	r28, 0x7F	; 127
   17ce8:	df 4f       	sbci	r29, 0xFF	; 255
   17cea:	88 81       	ld	r24, Y
   17cec:	99 81       	ldd	r25, Y+1	; 0x01
   17cee:	c1 58       	subi	r28, 0x81	; 129
   17cf0:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   17cf2:	d2 01       	movw	r26, r4
   17cf4:	d6 96       	adiw	r26, 0x36	; 54
   17cf6:	9c 93       	st	X, r25
   17cf8:	8e 93       	st	-X, r24
   17cfa:	d5 97       	sbiw	r26, 0x35	; 53
   17cfc:	38 cc       	rjmp	.-1936   	; 0x1756e <POSIX_Read_Config+0x158>
   17cfe:	68 ec       	ldi	r22, 0xC8	; 200
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17d00:	74 e1       	ldi	r23, 0x14	; 20
   17d02:	c6 01       	movw	r24, r12
   17d04:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17d08:	00 97       	sbiw	r24, 0x00	; 0
   17d0a:	09 f1       	breq	.+66     	; 0x17d4e <POSIX_Read_Config+0x938>
   17d0c:	fe 01       	movw	r30, r28
   17d0e:	ef 57       	subi	r30, 0x7F	; 127
   17d10:	ff 4f       	sbci	r31, 0xFF	; 255
   17d12:	7f 01       	movw	r14, r30
   17d14:	0f ef       	ldi	r16, 0xFF	; 255
   17d16:	1f ef       	ldi	r17, 0xFF	; 255
   17d18:	20 e0       	ldi	r18, 0x00	; 0
   17d1a:	30 e0       	ldi	r19, 0x00	; 0
   17d1c:	40 e0       	ldi	r20, 0x00	; 0
   17d1e:	50 e0       	ldi	r21, 0x00	; 0
   17d20:	ba 01       	movw	r22, r20
   17d22:	8c 0d       	add	r24, r12
   17d24:	9d 1d       	adc	r25, r13
                    ++errors;
   17d26:	d7 da       	rcall	.-2642   	; 0x172d6 <assign_value>
   17d28:	67 2b       	or	r22, r23
   17d2a:	68 2b       	or	r22, r24
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   17d2c:	69 2b       	or	r22, r25
   17d2e:	19 f4       	brne	.+6      	; 0x17d36 <POSIX_Read_Config+0x920>
   17d30:	ff ef       	ldi	r31, 0xFF	; 255
   17d32:	af 1a       	sub	r10, r31
   17d34:	bf 0a       	sbc	r11, r31
   17d36:	cf 57       	subi	r28, 0x7F	; 127
   17d38:	df 4f       	sbci	r29, 0xFF	; 255
   17d3a:	88 81       	ld	r24, Y
   17d3c:	99 81       	ldd	r25, Y+1	; 0x01
   17d3e:	c1 58       	subi	r28, 0x81	; 129
   17d40:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   17d42:	d2 01       	movw	r26, r4
   17d44:	d8 96       	adiw	r26, 0x38	; 56
   17d46:	9c 93       	st	X, r25
   17d48:	8e 93       	st	-X, r24
   17d4a:	d7 97       	sbiw	r26, 0x37	; 55
   17d4c:	10 cc       	rjmp	.-2016   	; 0x1756e <POSIX_Read_Config+0x158>
   17d4e:	6b ed       	ldi	r22, 0xDB	; 219
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17d50:	74 e1       	ldi	r23, 0x14	; 20
   17d52:	c6 01       	movw	r24, r12
   17d54:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17d58:	00 97       	sbiw	r24, 0x00	; 0
   17d5a:	09 f1       	breq	.+66     	; 0x17d9e <POSIX_Read_Config+0x988>
   17d5c:	fe 01       	movw	r30, r28
   17d5e:	ef 57       	subi	r30, 0x7F	; 127
   17d60:	ff 4f       	sbci	r31, 0xFF	; 255
   17d62:	7f 01       	movw	r14, r30
   17d64:	0f ef       	ldi	r16, 0xFF	; 255
   17d66:	1f ef       	ldi	r17, 0xFF	; 255
   17d68:	20 e0       	ldi	r18, 0x00	; 0
   17d6a:	30 e0       	ldi	r19, 0x00	; 0
   17d6c:	40 e0       	ldi	r20, 0x00	; 0
   17d6e:	50 e0       	ldi	r21, 0x00	; 0
   17d70:	ba 01       	movw	r22, r20
   17d72:	8c 0d       	add	r24, r12
   17d74:	9d 1d       	adc	r25, r13
                    ++errors;
   17d76:	af da       	rcall	.-2722   	; 0x172d6 <assign_value>
   17d78:	67 2b       	or	r22, r23
                SS80p->UNIT.ACCESS_TIME = val;
   17d7a:	68 2b       	or	r22, r24
   17d7c:	69 2b       	or	r22, r25
   17d7e:	19 f4       	brne	.+6      	; 0x17d86 <POSIX_Read_Config+0x970>
   17d80:	ff ef       	ldi	r31, 0xFF	; 255
   17d82:	af 1a       	sub	r10, r31
   17d84:	bf 0a       	sbc	r11, r31
   17d86:	cf 57       	subi	r28, 0x7F	; 127
   17d88:	df 4f       	sbci	r29, 0xFF	; 255
   17d8a:	88 81       	ld	r24, Y
   17d8c:	99 81       	ldd	r25, Y+1	; 0x01
   17d8e:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   17d90:	d0 40       	sbci	r29, 0x00	; 0
   17d92:	d2 01       	movw	r26, r4
   17d94:	da 96       	adiw	r26, 0x3a	; 58
   17d96:	9c 93       	st	X, r25
   17d98:	8e 93       	st	-X, r24
   17d9a:	d9 97       	sbiw	r26, 0x39	; 57
   17d9c:	e8 cb       	rjmp	.-2096   	; 0x1756e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17d9e:	67 ee       	ldi	r22, 0xE7	; 231
   17da0:	74 e1       	ldi	r23, 0x14	; 20
   17da2:	c6 01       	movw	r24, r12
   17da4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17da8:	00 97       	sbiw	r24, 0x00	; 0
   17daa:	f1 f0       	breq	.+60     	; 0x17de8 <POSIX_Read_Config+0x9d2>
   17dac:	fe 01       	movw	r30, r28
   17dae:	ef 57       	subi	r30, 0x7F	; 127
   17db0:	ff 4f       	sbci	r31, 0xFF	; 255
   17db2:	7f 01       	movw	r14, r30
   17db4:	0f ef       	ldi	r16, 0xFF	; 255
   17db6:	10 e0       	ldi	r17, 0x00	; 0
   17db8:	20 e0       	ldi	r18, 0x00	; 0
   17dba:	30 e0       	ldi	r19, 0x00	; 0
   17dbc:	40 e0       	ldi	r20, 0x00	; 0
   17dbe:	50 e0       	ldi	r21, 0x00	; 0
   17dc0:	ba 01       	movw	r22, r20
                    ++errors;
   17dc2:	8c 0d       	add	r24, r12
   17dc4:	9d 1d       	adc	r25, r13
   17dc6:	87 da       	rcall	.-2802   	; 0x172d6 <assign_value>
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   17dc8:	67 2b       	or	r22, r23
   17dca:	68 2b       	or	r22, r24
   17dcc:	69 2b       	or	r22, r25
   17dce:	19 f4       	brne	.+6      	; 0x17dd6 <POSIX_Read_Config+0x9c0>
   17dd0:	ff ef       	ldi	r31, 0xFF	; 255
   17dd2:	af 1a       	sub	r10, r31
   17dd4:	bf 0a       	sbc	r11, r31
   17dd6:	cf 57       	subi	r28, 0x7F	; 127
   17dd8:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   17dda:	88 81       	ld	r24, Y
   17ddc:	c1 58       	subi	r28, 0x81	; 129
   17dde:	d0 40       	sbci	r29, 0x00	; 0
   17de0:	d2 01       	movw	r26, r4
   17de2:	db 96       	adiw	r26, 0x3b	; 59
   17de4:	8c 93       	st	X, r24
   17de6:	c3 cb       	rjmp	.-2170   	; 0x1756e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17de8:	6a ef       	ldi	r22, 0xFA	; 250
   17dea:	74 e1       	ldi	r23, 0x14	; 20
   17dec:	c6 01       	movw	r24, r12
   17dee:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17df2:	00 97       	sbiw	r24, 0x00	; 0
   17df4:	f1 f0       	breq	.+60     	; 0x17e32 <POSIX_Read_Config+0xa1c>
   17df6:	fe 01       	movw	r30, r28
   17df8:	ef 57       	subi	r30, 0x7F	; 127
   17dfa:	ff 4f       	sbci	r31, 0xFF	; 255
   17dfc:	7f 01       	movw	r14, r30
   17dfe:	0f ef       	ldi	r16, 0xFF	; 255
   17e00:	10 e0       	ldi	r17, 0x00	; 0
   17e02:	20 e0       	ldi	r18, 0x00	; 0
   17e04:	30 e0       	ldi	r19, 0x00	; 0
   17e06:	40 e0       	ldi	r20, 0x00	; 0
   17e08:	50 e0       	ldi	r21, 0x00	; 0
   17e0a:	ba 01       	movw	r22, r20
                    ++errors;
   17e0c:	8c 0d       	add	r24, r12
   17e0e:	9d 1d       	adc	r25, r13
   17e10:	62 da       	rcall	.-2876   	; 0x172d6 <assign_value>
                SS80p->UNIT.FIXED_VOLUMES = val;
   17e12:	67 2b       	or	r22, r23
   17e14:	68 2b       	or	r22, r24
   17e16:	69 2b       	or	r22, r25
   17e18:	19 f4       	brne	.+6      	; 0x17e20 <POSIX_Read_Config+0xa0a>
   17e1a:	ff ef       	ldi	r31, 0xFF	; 255
   17e1c:	af 1a       	sub	r10, r31
   17e1e:	bf 0a       	sbc	r11, r31
   17e20:	cf 57       	subi	r28, 0x7F	; 127
   17e22:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   17e24:	88 81       	ld	r24, Y
   17e26:	c1 58       	subi	r28, 0x81	; 129
   17e28:	d0 40       	sbci	r29, 0x00	; 0
   17e2a:	d2 01       	movw	r26, r4
   17e2c:	dc 96       	adiw	r26, 0x3c	; 60
   17e2e:	8c 93       	st	X, r24
   17e30:	9e cb       	rjmp	.-2244   	; 0x1756e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17e32:	68 e0       	ldi	r22, 0x08	; 8
   17e34:	75 e1       	ldi	r23, 0x15	; 21
   17e36:	c6 01       	movw	r24, r12
   17e38:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17e3c:	00 97       	sbiw	r24, 0x00	; 0
   17e3e:	f1 f0       	breq	.+60     	; 0x17e7c <POSIX_Read_Config+0xa66>
   17e40:	fe 01       	movw	r30, r28
   17e42:	ef 57       	subi	r30, 0x7F	; 127
   17e44:	ff 4f       	sbci	r31, 0xFF	; 255
   17e46:	7f 01       	movw	r14, r30
   17e48:	0f ef       	ldi	r16, 0xFF	; 255
   17e4a:	10 e0       	ldi	r17, 0x00	; 0
   17e4c:	20 e0       	ldi	r18, 0x00	; 0
   17e4e:	30 e0       	ldi	r19, 0x00	; 0
   17e50:	40 e0       	ldi	r20, 0x00	; 0
   17e52:	50 e0       	ldi	r21, 0x00	; 0
   17e54:	ba 01       	movw	r22, r20
   17e56:	8c 0d       	add	r24, r12
                    ++errors;
   17e58:	9d 1d       	adc	r25, r13
   17e5a:	3d da       	rcall	.-2950   	; 0x172d6 <assign_value>
   17e5c:	67 2b       	or	r22, r23
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   17e5e:	68 2b       	or	r22, r24
   17e60:	69 2b       	or	r22, r25
   17e62:	19 f4       	brne	.+6      	; 0x17e6a <POSIX_Read_Config+0xa54>
   17e64:	ff ef       	ldi	r31, 0xFF	; 255
   17e66:	af 1a       	sub	r10, r31
   17e68:	bf 0a       	sbc	r11, r31
   17e6a:	cf 57       	subi	r28, 0x7F	; 127
   17e6c:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   17e6e:	88 81       	ld	r24, Y
   17e70:	c1 58       	subi	r28, 0x81	; 129
   17e72:	d0 40       	sbci	r29, 0x00	; 0
   17e74:	d2 01       	movw	r26, r4
   17e76:	dd 96       	adiw	r26, 0x3d	; 61
   17e78:	8c 93       	st	X, r24
   17e7a:	79 cb       	rjmp	.-2318   	; 0x1756e <POSIX_Read_Config+0x158>
   17e7c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   17e80:	8f 93       	push	r24
   17e82:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   17e86:	8f 93       	push	r24
   17e88:	df 92       	push	r13
   17e8a:	cf 92       	push	r12
   17e8c:	87 eb       	ldi	r24, 0xB7	; 183
   17e8e:	9e e2       	ldi	r25, 0x2E	; 46
   17e90:	96 cc       	rjmp	.-1748   	; 0x177be <POSIX_Read_Config+0x3a8>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17e92:	6a e1       	ldi	r22, 0x1A	; 26
   17e94:	75 e1       	ldi	r23, 0x15	; 21
   17e96:	c6 01       	movw	r24, r12
   17e98:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17e9c:	00 97       	sbiw	r24, 0x00	; 0
   17e9e:	f9 f0       	breq	.+62     	; 0x17ede <POSIX_Read_Config+0xac8>
   17ea0:	9e 01       	movw	r18, r28
   17ea2:	2f 57       	subi	r18, 0x7F	; 127
   17ea4:	3f 4f       	sbci	r19, 0xFF	; 255
   17ea6:	79 01       	movw	r14, r18
   17ea8:	0f ef       	ldi	r16, 0xFF	; 255
   17eaa:	1f ef       	ldi	r17, 0xFF	; 255
   17eac:	98 01       	movw	r18, r16
   17eae:	40 e0       	ldi	r20, 0x00	; 0
   17eb0:	50 e0       	ldi	r21, 0x00	; 0
   17eb2:	ba 01       	movw	r22, r20
                    ++errors;
   17eb4:	8c 0d       	add	r24, r12
   17eb6:	9d 1d       	adc	r25, r13
   17eb8:	0e da       	rcall	.-3044   	; 0x172d6 <assign_value>
                SS80p->VOLUME.MAX_CYLINDER = val;
   17eba:	67 2b       	or	r22, r23
   17ebc:	68 2b       	or	r22, r24
   17ebe:	69 2b       	or	r22, r25
   17ec0:	19 f4       	brne	.+6      	; 0x17ec8 <POSIX_Read_Config+0xab2>
   17ec2:	3f ef       	ldi	r19, 0xFF	; 255
   17ec4:	a3 1a       	sub	r10, r19
   17ec6:	b3 0a       	sbc	r11, r19
   17ec8:	cf 57       	subi	r28, 0x7F	; 127
   17eca:	df 4f       	sbci	r29, 0xFF	; 255
   17ecc:	88 81       	ld	r24, Y
   17ece:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   17ed0:	aa 81       	ldd	r26, Y+2	; 0x02
   17ed2:	bb 81       	ldd	r27, Y+3	; 0x03
   17ed4:	c1 58       	subi	r28, 0x81	; 129
   17ed6:	d0 40       	sbci	r29, 0x00	; 0
   17ed8:	f2 01       	movw	r30, r4
   17eda:	fe 96       	adiw	r30, 0x3e	; 62
   17edc:	73 c0       	rjmp	.+230    	; 0x17fc4 <POSIX_Read_Config+0xbae>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17ede:	67 e2       	ldi	r22, 0x27	; 39
   17ee0:	75 e1       	ldi	r23, 0x15	; 21
   17ee2:	c6 01       	movw	r24, r12
   17ee4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17ee8:	00 97       	sbiw	r24, 0x00	; 0
   17eea:	f1 f0       	breq	.+60     	; 0x17f28 <POSIX_Read_Config+0xb12>
   17eec:	de 01       	movw	r26, r28
   17eee:	af 57       	subi	r26, 0x7F	; 127
   17ef0:	bf 4f       	sbci	r27, 0xFF	; 255
   17ef2:	7d 01       	movw	r14, r26
   17ef4:	0f ef       	ldi	r16, 0xFF	; 255
   17ef6:	10 e0       	ldi	r17, 0x00	; 0
   17ef8:	20 e0       	ldi	r18, 0x00	; 0
   17efa:	30 e0       	ldi	r19, 0x00	; 0
   17efc:	40 e0       	ldi	r20, 0x00	; 0
   17efe:	50 e0       	ldi	r21, 0x00	; 0
   17f00:	ba 01       	movw	r22, r20
                    ++errors;
   17f02:	8c 0d       	add	r24, r12
   17f04:	9d 1d       	adc	r25, r13
   17f06:	e7 d9       	rcall	.-3122   	; 0x172d6 <assign_value>
                SS80p->VOLUME.MAX_HEAD = val;
   17f08:	67 2b       	or	r22, r23
   17f0a:	68 2b       	or	r22, r24
   17f0c:	69 2b       	or	r22, r25
   17f0e:	19 f4       	brne	.+6      	; 0x17f16 <POSIX_Read_Config+0xb00>
   17f10:	bf ef       	ldi	r27, 0xFF	; 255
   17f12:	ab 1a       	sub	r10, r27
   17f14:	bb 0a       	sbc	r11, r27
   17f16:	cf 57       	subi	r28, 0x7F	; 127
   17f18:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   17f1a:	88 81       	ld	r24, Y
   17f1c:	c1 58       	subi	r28, 0x81	; 129
   17f1e:	d0 40       	sbci	r29, 0x00	; 0
   17f20:	f2 01       	movw	r30, r4
   17f22:	ee 5b       	subi	r30, 0xBE	; 190
   17f24:	ff 4f       	sbci	r31, 0xFF	; 255
   17f26:	18 c1       	rjmp	.+560    	; 0x18158 <POSIX_Read_Config+0xd42>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17f28:	60 e3       	ldi	r22, 0x30	; 48
   17f2a:	75 e1       	ldi	r23, 0x15	; 21
   17f2c:	c6 01       	movw	r24, r12
   17f2e:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17f32:	00 97       	sbiw	r24, 0x00	; 0
   17f34:	09 f1       	breq	.+66     	; 0x17f78 <POSIX_Read_Config+0xb62>
   17f36:	fe 01       	movw	r30, r28
   17f38:	ef 57       	subi	r30, 0x7F	; 127
   17f3a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f3c:	7f 01       	movw	r14, r30
   17f3e:	0f ef       	ldi	r16, 0xFF	; 255
   17f40:	1f ef       	ldi	r17, 0xFF	; 255
   17f42:	20 e0       	ldi	r18, 0x00	; 0
   17f44:	30 e0       	ldi	r19, 0x00	; 0
   17f46:	40 e0       	ldi	r20, 0x00	; 0
   17f48:	50 e0       	ldi	r21, 0x00	; 0
   17f4a:	ba 01       	movw	r22, r20
                    ++errors;
   17f4c:	8c 0d       	add	r24, r12
   17f4e:	9d 1d       	adc	r25, r13
   17f50:	c2 d9       	rcall	.-3196   	; 0x172d6 <assign_value>
                SS80p->VOLUME.MAX_SECTOR = val;
   17f52:	67 2b       	or	r22, r23
   17f54:	68 2b       	or	r22, r24
   17f56:	69 2b       	or	r22, r25
   17f58:	19 f4       	brne	.+6      	; 0x17f60 <POSIX_Read_Config+0xb4a>
   17f5a:	ff ef       	ldi	r31, 0xFF	; 255
   17f5c:	af 1a       	sub	r10, r31
   17f5e:	bf 0a       	sbc	r11, r31
   17f60:	cf 57       	subi	r28, 0x7F	; 127
   17f62:	df 4f       	sbci	r29, 0xFF	; 255
   17f64:	88 81       	ld	r24, Y
   17f66:	99 81       	ldd	r25, Y+1	; 0x01
   17f68:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   17f6a:	d0 40       	sbci	r29, 0x00	; 0
   17f6c:	f2 01       	movw	r30, r4
   17f6e:	ed 5b       	subi	r30, 0xBD	; 189
   17f70:	ff 4f       	sbci	r31, 0xFF	; 255
   17f72:	91 83       	std	Z+1, r25	; 0x01
   17f74:	80 83       	st	Z, r24
   17f76:	fb ca       	rjmp	.-2570   	; 0x1756e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17f78:	6b e3       	ldi	r22, 0x3B	; 59
   17f7a:	75 e1       	ldi	r23, 0x15	; 21
   17f7c:	c6 01       	movw	r24, r12
   17f7e:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17f82:	00 97       	sbiw	r24, 0x00	; 0
   17f84:	21 f1       	breq	.+72     	; 0x17fce <POSIX_Read_Config+0xbb8>
   17f86:	9e 01       	movw	r18, r28
   17f88:	2f 57       	subi	r18, 0x7F	; 127
   17f8a:	3f 4f       	sbci	r19, 0xFF	; 255
   17f8c:	79 01       	movw	r14, r18
   17f8e:	0f ef       	ldi	r16, 0xFF	; 255
   17f90:	1f ef       	ldi	r17, 0xFF	; 255
   17f92:	98 01       	movw	r18, r16
   17f94:	40 e0       	ldi	r20, 0x00	; 0
   17f96:	50 e0       	ldi	r21, 0x00	; 0
   17f98:	ba 01       	movw	r22, r20
                    ++errors;
   17f9a:	8c 0d       	add	r24, r12
   17f9c:	9d 1d       	adc	r25, r13
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   17f9e:	9b d9       	rcall	.-3274   	; 0x172d6 <assign_value>
   17fa0:	67 2b       	or	r22, r23
   17fa2:	68 2b       	or	r22, r24
   17fa4:	69 2b       	or	r22, r25
   17fa6:	19 f4       	brne	.+6      	; 0x17fae <POSIX_Read_Config+0xb98>
   17fa8:	3f ef       	ldi	r19, 0xFF	; 255
   17faa:	a3 1a       	sub	r10, r19
   17fac:	b3 0a       	sbc	r11, r19
   17fae:	cf 57       	subi	r28, 0x7F	; 127
   17fb0:	df 4f       	sbci	r29, 0xFF	; 255
   17fb2:	88 81       	ld	r24, Y
   17fb4:	99 81       	ldd	r25, Y+1	; 0x01
   17fb6:	aa 81       	ldd	r26, Y+2	; 0x02
   17fb8:	bb 81       	ldd	r27, Y+3	; 0x03
   17fba:	c1 58       	subi	r28, 0x81	; 129
   17fbc:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   17fbe:	f2 01       	movw	r30, r4
   17fc0:	eb 5b       	subi	r30, 0xBB	; 187
   17fc2:	ff 4f       	sbci	r31, 0xFF	; 255
   17fc4:	80 83       	st	Z, r24
   17fc6:	91 83       	std	Z+1, r25	; 0x01
   17fc8:	a2 83       	std	Z+2, r26	; 0x02
   17fca:	b3 83       	std	Z+3, r27	; 0x03
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17fcc:	d0 ca       	rjmp	.-2656   	; 0x1756e <POSIX_Read_Config+0x158>
   17fce:	6f ee       	ldi	r22, 0xEF	; 239
   17fd0:	74 e1       	ldi	r23, 0x14	; 20
   17fd2:	c6 01       	movw	r24, r12
   17fd4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   17fd8:	00 97       	sbiw	r24, 0x00	; 0
   17fda:	f1 f0       	breq	.+60     	; 0x18018 <POSIX_Read_Config+0xc02>
   17fdc:	de 01       	movw	r26, r28
   17fde:	af 57       	subi	r26, 0x7F	; 127
   17fe0:	bf 4f       	sbci	r27, 0xFF	; 255
   17fe2:	7d 01       	movw	r14, r26
   17fe4:	0f ef       	ldi	r16, 0xFF	; 255
   17fe6:	10 e0       	ldi	r17, 0x00	; 0
   17fe8:	20 e0       	ldi	r18, 0x00	; 0
   17fea:	30 e0       	ldi	r19, 0x00	; 0
   17fec:	40 e0       	ldi	r20, 0x00	; 0
   17fee:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17ff0:	ba 01       	movw	r22, r20
   17ff2:	8c 0d       	add	r24, r12
                SS80p->VOLUME.INTERLEAVE = val;
   17ff4:	9d 1d       	adc	r25, r13
   17ff6:	6f d9       	rcall	.-3362   	; 0x172d6 <assign_value>
   17ff8:	67 2b       	or	r22, r23
   17ffa:	68 2b       	or	r22, r24
   17ffc:	69 2b       	or	r22, r25
   17ffe:	19 f4       	brne	.+6      	; 0x18006 <POSIX_Read_Config+0xbf0>
   18000:	bf ef       	ldi	r27, 0xFF	; 255
   18002:	ab 1a       	sub	r10, r27
   18004:	bb 0a       	sbc	r11, r27
            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   18006:	cf 57       	subi	r28, 0x7F	; 127
   18008:	df 4f       	sbci	r29, 0xFF	; 255
   1800a:	88 81       	ld	r24, Y
   1800c:	c1 58       	subi	r28, 0x81	; 129
   1800e:	d0 40       	sbci	r29, 0x00	; 0
   18010:	f2 01       	movw	r30, r4
   18012:	e7 5b       	subi	r30, 0xB7	; 183
   18014:	ff 4f       	sbci	r31, 0xFF	; 255
   18016:	a0 c0       	rjmp	.+320    	; 0x18158 <POSIX_Read_Config+0xd42>
   18018:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1801c:	8f 93       	push	r24
   1801e:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
                ++errors;
   18022:	8f 93       	push	r24
   18024:	df 92       	push	r13
   18026:	cf 92       	push	r12
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   18028:	89 e8       	ldi	r24, 0x89	; 137
   1802a:	9e e2       	ldi	r25, 0x2E	; 46
   1802c:	1f 92       	push	r1
   1802e:	9f 93       	push	r25
   18030:	8f 93       	push	r24
   18032:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            {
                push_state(state);
   18036:	ef ef       	ldi	r30, 0xFF	; 255
   18038:	ae 1a       	sub	r10, r30
   1803a:	be 0a       	sbc	r11, r30
   1803c:	06 c2       	rjmp	.+1036   	; 0x1844a <POSIX_Read_Config+0x1034>
                state = AMIGO_HEADER;
   1803e:	68 e2       	ldi	r22, 0x28	; 40
   18040:	74 e1       	ldi	r23, 0x14	; 20
   18042:	c6 01       	movw	r24, r12
   18044:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            }
            else if(token(ptr,"CONFIG"))
   18048:	89 2b       	or	r24, r25
   1804a:	39 f0       	breq	.+14     	; 0x1805a <POSIX_Read_Config+0xc44>
   1804c:	87 e0       	ldi	r24, 0x07	; 7
   1804e:	90 e0       	ldi	r25, 0x00	; 0
   18050:	12 d9       	rcall	.-3548   	; 0x17276 <push_state>
   18052:	28 e0       	ldi	r18, 0x08	; 8
            {
                push_state(state);
   18054:	82 2e       	mov	r8, r18
   18056:	91 2c       	mov	r9, r1
   18058:	8a ca       	rjmp	.-2796   	; 0x1756e <POSIX_Read_Config+0x158>
   1805a:	61 e2       	ldi	r22, 0x21	; 33
                state = AMIGO_CONFIG;
   1805c:	74 e1       	ldi	r23, 0x14	; 20
   1805e:	c6 01       	movw	r24, r12
   18060:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
            }
            else if(token(ptr,"GEOMETRY"))
   18064:	89 2b       	or	r24, r25
   18066:	39 f0       	breq	.+14     	; 0x18076 <POSIX_Read_Config+0xc60>
   18068:	87 e0       	ldi	r24, 0x07	; 7
   1806a:	90 e0       	ldi	r25, 0x00	; 0
   1806c:	04 d9       	rcall	.-3576   	; 0x17276 <push_state>
   1806e:	99 e0       	ldi	r25, 0x09	; 9
   18070:	89 2e       	mov	r8, r25
            {
                push_state(state);
   18072:	91 2c       	mov	r9, r1
   18074:	7c ca       	rjmp	.-2824   	; 0x1756e <POSIX_Read_Config+0x158>
   18076:	6c e4       	ldi	r22, 0x4C	; 76
   18078:	75 e1       	ldi	r23, 0x15	; 21
                state = AMIGO_GEOMETRY;
   1807a:	c6 01       	movw	r24, r12
   1807c:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18080:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   18082:	39 f0       	breq	.+14     	; 0x18092 <POSIX_Read_Config+0xc7c>
   18084:	87 e0       	ldi	r24, 0x07	; 7
   18086:	90 e0       	ldi	r25, 0x00	; 0
   18088:	f6 d8       	rcall	.-3604   	; 0x17276 <push_state>
   1808a:	8a e0       	ldi	r24, 0x0A	; 10
   1808c:	88 2e       	mov	r8, r24
   1808e:	91 2c       	mov	r9, r1
   18090:	6e ca       	rjmp	.-2852   	; 0x1756e <POSIX_Read_Config+0x158>
   18092:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   18096:	8f 93       	push	r24
   18098:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   1809c:	8f 93       	push	r24
   1809e:	df 92       	push	r13
   180a0:	cf 92       	push	r12
   180a2:	1f 92       	push	r1
   180a4:	c7 56       	subi	r28, 0x67	; 103
   180a6:	df 4f       	sbci	r29, 0xFF	; 255
   180a8:	38 81       	ld	r19, Y
   180aa:	c9 59       	subi	r28, 0x99	; 153
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   180ac:	d0 40       	sbci	r29, 0x00	; 0
   180ae:	3f 93       	push	r19
   180b0:	c8 56       	subi	r28, 0x68	; 104
   180b2:	df 4f       	sbci	r29, 0xFF	; 255
   180b4:	48 81       	ld	r20, Y
   180b6:	c8 59       	subi	r28, 0x98	; 152
   180b8:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   180ba:	c1 c1       	rjmp	.+898    	; 0x1843e <POSIX_Read_Config+0x1028>
   180bc:	65 e5       	ldi	r22, 0x55	; 85
   180be:	75 e1       	ldi	r23, 0x15	; 21
   180c0:	c6 01       	movw	r24, r12
   180c2:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   180c6:	00 97       	sbiw	r24, 0x00	; 0
   180c8:	d1 f0       	breq	.+52     	; 0x180fe <POSIX_Read_Config+0xce8>
   180ca:	20 91 9d 19 	lds	r18, 0x199D	; 0x80199d <lines+0x1>
   180ce:	2f 93       	push	r18
   180d0:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <lines>
   180d4:	2f 93       	push	r18
   180d6:	c8 0e       	add	r12, r24
   180d8:	d9 1e       	adc	r13, r25
   180da:	df 92       	push	r13
   180dc:	cf 92       	push	r12
   180de:	1f 92       	push	r1
   180e0:	ca 56       	subi	r28, 0x6A	; 106
   180e2:	df 4f       	sbci	r29, 0xFF	; 255
   180e4:	b8 81       	ld	r27, Y
   180e6:	c6 59       	subi	r28, 0x96	; 150
   180e8:	d0 40       	sbci	r29, 0x00	; 0
   180ea:	bf 93       	push	r27
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   180ec:	cb 56       	subi	r28, 0x6B	; 107
   180ee:	df 4f       	sbci	r29, 0xFF	; 255
   180f0:	e8 81       	ld	r30, Y
   180f2:	c5 59       	subi	r28, 0x95	; 149
   180f4:	d0 40       	sbci	r29, 0x00	; 0
   180f6:	ef 93       	push	r30
   180f8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   180fc:	a6 c1       	rjmp	.+844    	; 0x1844a <POSIX_Read_Config+0x1034>
   180fe:	69 e1       	ldi	r22, 0x19	; 25
   18100:	74 e1       	ldi	r23, 0x14	; 20
   18102:	c6 01       	movw	r24, r12
   18104:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18108:	00 97       	sbiw	r24, 0x00	; 0
   1810a:	41 f1       	breq	.+80     	; 0x1815c <POSIX_Read_Config+0xd46>
   1810c:	de 01       	movw	r26, r28
   1810e:	af 57       	subi	r26, 0x7F	; 127
   18110:	bf 4f       	sbci	r27, 0xFF	; 255
   18112:	7d 01       	movw	r14, r26
   18114:	0e e0       	ldi	r16, 0x0E	; 14
   18116:	10 e0       	ldi	r17, 0x00	; 0
   18118:	20 e0       	ldi	r18, 0x00	; 0
   1811a:	30 e0       	ldi	r19, 0x00	; 0
   1811c:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   1811e:	50 e0       	ldi	r21, 0x00	; 0
   18120:	ba 01       	movw	r22, r20
   18122:	8c 0d       	add	r24, r12
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   18124:	9d 1d       	adc	r25, r13
   18126:	d7 d8       	rcall	.-3666   	; 0x172d6 <assign_value>
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   18128:	67 2b       	or	r22, r23
   1812a:	68 2b       	or	r22, r24
   1812c:	69 2b       	or	r22, r25
   1812e:	29 f4       	brne	.+10     	; 0x1813a <POSIX_Read_Config+0xd24>
   18130:	bf ef       	ldi	r27, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   18132:	ab 1a       	sub	r10, r27
   18134:	bb 0a       	sbc	r11, r27
   18136:	8f ef       	ldi	r24, 0xFF	; 255
   18138:	05 c0       	rjmp	.+10     	; 0x18144 <POSIX_Read_Config+0xd2e>
   1813a:	cf 57       	subi	r28, 0x7F	; 127
   1813c:	df 4f       	sbci	r29, 0xFF	; 255
   1813e:	88 81       	ld	r24, Y
   18140:	c1 58       	subi	r28, 0x81	; 129
   18142:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   18144:	97 e0       	ldi	r25, 0x07	; 7
   18146:	96 9d       	mul	r25, r6
   18148:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   1814a:	97 9d       	mul	r25, r7
   1814c:	f0 0d       	add	r31, r0
   1814e:	11 24       	eor	r1, r1
   18150:	e9 50       	subi	r30, 0x09	; 9
   18152:	f1 4e       	sbci	r31, 0xE1	; 225
   18154:	81 83       	std	Z+1, r24	; 0x01
   18156:	f1 01       	movw	r30, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   18158:	80 83       	st	Z, r24
   1815a:	09 ca       	rjmp	.-3054   	; 0x1756e <POSIX_Read_Config+0x158>
   1815c:	66 e4       	ldi	r22, 0x46	; 70
   1815e:	74 e1       	ldi	r23, 0x14	; 20
   18160:	c6 01       	movw	r24, r12
   18162:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18166:	00 97       	sbiw	r24, 0x00	; 0
   18168:	39 f1       	breq	.+78     	; 0x181b8 <POSIX_Read_Config+0xda2>
   1816a:	9e 01       	movw	r18, r28
   1816c:	2f 57       	subi	r18, 0x7F	; 127
   1816e:	3f 4f       	sbci	r19, 0xFF	; 255
   18170:	79 01       	movw	r14, r18
   18172:	07 e0       	ldi	r16, 0x07	; 7
   18174:	10 e0       	ldi	r17, 0x00	; 0
   18176:	20 e0       	ldi	r18, 0x00	; 0
   18178:	30 e0       	ldi	r19, 0x00	; 0
   1817a:	40 e0       	ldi	r20, 0x00	; 0
   1817c:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   1817e:	ba 01       	movw	r22, r20
   18180:	8c 0d       	add	r24, r12
   18182:	9d 1d       	adc	r25, r13
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   18184:	a8 d8       	rcall	.-3760   	; 0x172d6 <assign_value>
   18186:	67 2b       	or	r22, r23
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   18188:	68 2b       	or	r22, r24
   1818a:	69 2b       	or	r22, r25
   1818c:	29 f4       	brne	.+10     	; 0x18198 <POSIX_Read_Config+0xd82>
   1818e:	3f ef       	ldi	r19, 0xFF	; 255
   18190:	a3 1a       	sub	r10, r19
                Devices[index].PPR = tmp;
   18192:	b3 0a       	sbc	r11, r19
   18194:	8f ef       	ldi	r24, 0xFF	; 255
   18196:	05 c0       	rjmp	.+10     	; 0x181a2 <POSIX_Read_Config+0xd8c>
   18198:	cf 57       	subi	r28, 0x7F	; 127
   1819a:	df 4f       	sbci	r29, 0xFF	; 255
   1819c:	88 81       	ld	r24, Y
   1819e:	c1 58       	subi	r28, 0x81	; 129
   181a0:	d0 40       	sbci	r29, 0x00	; 0
   181a2:	97 e0       	ldi	r25, 0x07	; 7
                AMIGOp->HEADER.PPR = tmp;
   181a4:	96 9d       	mul	r25, r6
   181a6:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"FILE")) )
   181a8:	97 9d       	mul	r25, r7
   181aa:	f0 0d       	add	r31, r0
   181ac:	11 24       	eor	r1, r1
   181ae:	e9 50       	subi	r30, 0x09	; 9
   181b0:	f1 4e       	sbci	r31, 0xE1	; 225
   181b2:	82 83       	std	Z+2, r24	; 0x02
   181b4:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   181b6:	bb cb       	rjmp	.-2186   	; 0x1792e <POSIX_Read_Config+0x518>
   181b8:	6a e4       	ldi	r22, 0x4A	; 74
   181ba:	74 e1       	ldi	r23, 0x14	; 20
   181bc:	c6 01       	movw	r24, r12
                if(*ptr == '=')
   181be:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   181c2:	00 97       	sbiw	r24, 0x00	; 0
   181c4:	b1 f0       	breq	.+44     	; 0x181f2 <POSIX_Read_Config+0xddc>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   181c6:	8c 0d       	add	r24, r12
   181c8:	9d 1d       	adc	r25, r13
   181ca:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
                }
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   181ce:	fc 01       	movw	r30, r24
   181d0:	20 81       	ld	r18, Z
   181d2:	2d 33       	cpi	r18, 0x3D	; 61
   181d4:	19 f4       	brne	.+6      	; 0x181dc <POSIX_Read_Config+0xdc6>
   181d6:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   181d8:	0e 94 58 32 	call	0x64b0	; 0x64b0 <skipspaces>
   181dc:	4f e1       	ldi	r20, 0x1F	; 31
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   181de:	50 e0       	ldi	r21, 0x00	; 0
   181e0:	bc 01       	movw	r22, r24
   181e2:	c1 01       	movw	r24, r2
   181e4:	02 96       	adiw	r24, 0x02	; 2
   181e6:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <strncpy>
   181ea:	d1 01       	movw	r26, r2
   181ec:	91 96       	adiw	r26, 0x21	; 33
   181ee:	1c 92       	st	X, r1
   181f0:	be c9       	rjmp	.-3204   	; 0x1756e <POSIX_Read_Config+0x158>
   181f2:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   181f6:	8f 93       	push	r24
   181f8:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   181fc:	8f 93       	push	r24
   181fe:	df 92       	push	r13
   18200:	cf 92       	push	r12
   18202:	1f 92       	push	r1
   18204:	cd 56       	subi	r28, 0x6D	; 109
   18206:	df 4f       	sbci	r29, 0xFF	; 255
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   18208:	b8 81       	ld	r27, Y
   1820a:	c3 59       	subi	r28, 0x93	; 147
   1820c:	d0 40       	sbci	r29, 0x00	; 0
   1820e:	bf 93       	push	r27
   18210:	ce 56       	subi	r28, 0x6E	; 110
   18212:	df 4f       	sbci	r29, 0xFF	; 255
   18214:	e8 81       	ld	r30, Y
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   18216:	c2 59       	subi	r28, 0x92	; 146
   18218:	d0 40       	sbci	r29, 0x00	; 0
   1821a:	f6 c0       	rjmp	.+492    	; 0x18408 <POSIX_Read_Config+0xff2>
   1821c:	6f e4       	ldi	r22, 0x4F	; 79
   1821e:	74 e1       	ldi	r23, 0x14	; 20
   18220:	c6 01       	movw	r24, r12
   18222:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18226:	00 97       	sbiw	r24, 0x00	; 0
   18228:	f9 f0       	breq	.+62     	; 0x18268 <POSIX_Read_Config+0xe52>
   1822a:	de 01       	movw	r26, r28
   1822c:	af 57       	subi	r26, 0x7F	; 127
   1822e:	bf 4f       	sbci	r27, 0xFF	; 255
   18230:	7d 01       	movw	r14, r26
   18232:	0f ef       	ldi	r16, 0xFF	; 255
   18234:	1f ef       	ldi	r17, 0xFF	; 255
   18236:	20 e0       	ldi	r18, 0x00	; 0
   18238:	30 e0       	ldi	r19, 0x00	; 0
   1823a:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   1823c:	50 e0       	ldi	r21, 0x00	; 0
   1823e:	ba 01       	movw	r22, r20
   18240:	8c 0d       	add	r24, r12
                AMIGOp->CONFIG.ID = val;
   18242:	9d 1d       	adc	r25, r13
   18244:	48 d8       	rcall	.-3952   	; 0x172d6 <assign_value>
   18246:	67 2b       	or	r22, r23
   18248:	68 2b       	or	r22, r24
   1824a:	69 2b       	or	r22, r25
   1824c:	19 f4       	brne	.+6      	; 0x18254 <POSIX_Read_Config+0xe3e>
   1824e:	bf ef       	ldi	r27, 0xFF	; 255
   18250:	ab 1a       	sub	r10, r27
   18252:	bb 0a       	sbc	r11, r27
   18254:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   18256:	df 4f       	sbci	r29, 0xFF	; 255
   18258:	88 81       	ld	r24, Y
   1825a:	99 81       	ldd	r25, Y+1	; 0x01
   1825c:	c1 58       	subi	r28, 0x81	; 129
   1825e:	d0 40       	sbci	r29, 0x00	; 0
   18260:	f1 01       	movw	r30, r2
   18262:	94 a3       	std	Z+36, r25	; 0x24
   18264:	83 a3       	std	Z+35, r24	; 0x23
   18266:	83 c9       	rjmp	.-3322   	; 0x1756e <POSIX_Read_Config+0x158>
   18268:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1826c:	8f 93       	push	r24
   1826e:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   18272:	8f 93       	push	r24
   18274:	df 92       	push	r13
   18276:	cf 92       	push	r12
   18278:	1f 92       	push	r1
   1827a:	c0 57       	subi	r28, 0x70	; 112
   1827c:	df 4f       	sbci	r29, 0xFF	; 255
   1827e:	f8 81       	ld	r31, Y
   18280:	c0 59       	subi	r28, 0x90	; 144
                ++errors;
   18282:	d0 40       	sbci	r29, 0x00	; 0
   18284:	ff 93       	push	r31
   18286:	c1 57       	subi	r28, 0x71	; 113
   18288:	df 4f       	sbci	r29, 0xFF	; 255
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   1828a:	28 81       	ld	r18, Y
   1828c:	cf 58       	subi	r28, 0x8F	; 143
   1828e:	d0 40       	sbci	r29, 0x00	; 0
   18290:	2f 93       	push	r18
   18292:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18296:	3f ef       	ldi	r19, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   18298:	a3 1a       	sub	r10, r19
   1829a:	b3 0a       	sbc	r11, r19
   1829c:	d6 c0       	rjmp	.+428    	; 0x1844a <POSIX_Read_Config+0x1034>
   1829e:	6b e5       	ldi	r22, 0x5B	; 91
   182a0:	75 e1       	ldi	r23, 0x15	; 21
   182a2:	c6 01       	movw	r24, r12
   182a4:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   182a8:	00 97       	sbiw	r24, 0x00	; 0
   182aa:	f9 f0       	breq	.+62     	; 0x182ea <POSIX_Read_Config+0xed4>
   182ac:	de 01       	movw	r26, r28
   182ae:	af 57       	subi	r26, 0x7F	; 127
   182b0:	bf 4f       	sbci	r27, 0xFF	; 255
   182b2:	7d 01       	movw	r14, r26
   182b4:	00 e0       	ldi	r16, 0x00	; 0
   182b6:	10 e1       	ldi	r17, 0x10	; 16
   182b8:	20 e0       	ldi	r18, 0x00	; 0
   182ba:	30 e0       	ldi	r19, 0x00	; 0
   182bc:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   182be:	50 e0       	ldi	r21, 0x00	; 0
   182c0:	ba 01       	movw	r22, r20
   182c2:	8c 0d       	add	r24, r12
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   182c4:	9d 1d       	adc	r25, r13
   182c6:	07 d8       	rcall	.-4082   	; 0x172d6 <assign_value>
   182c8:	67 2b       	or	r22, r23
   182ca:	68 2b       	or	r22, r24
   182cc:	69 2b       	or	r22, r25
   182ce:	19 f4       	brne	.+6      	; 0x182d6 <POSIX_Read_Config+0xec0>
   182d0:	bf ef       	ldi	r27, 0xFF	; 255
   182d2:	ab 1a       	sub	r10, r27
   182d4:	bb 0a       	sbc	r11, r27
   182d6:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   182d8:	df 4f       	sbci	r29, 0xFF	; 255
   182da:	88 81       	ld	r24, Y
   182dc:	99 81       	ldd	r25, Y+1	; 0x01
   182de:	c1 58       	subi	r28, 0x81	; 129
   182e0:	d0 40       	sbci	r29, 0x00	; 0
   182e2:	f1 01       	movw	r30, r2
   182e4:	96 a3       	std	Z+38, r25	; 0x26
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   182e6:	85 a3       	std	Z+37, r24	; 0x25
   182e8:	42 c9       	rjmp	.-3452   	; 0x1756e <POSIX_Read_Config+0x158>
   182ea:	6c e6       	ldi	r22, 0x6C	; 108
   182ec:	75 e1       	ldi	r23, 0x15	; 21
   182ee:	c6 01       	movw	r24, r12
   182f0:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   182f4:	00 97       	sbiw	r24, 0x00	; 0
   182f6:	11 f1       	breq	.+68     	; 0x1833c <POSIX_Read_Config+0xf26>
   182f8:	9e 01       	movw	r18, r28
   182fa:	2f 57       	subi	r18, 0x7F	; 127
   182fc:	3f 4f       	sbci	r19, 0xFF	; 255
   182fe:	79 01       	movw	r14, r18
   18300:	0f ef       	ldi	r16, 0xFF	; 255
   18302:	10 e0       	ldi	r17, 0x00	; 0
   18304:	20 e0       	ldi	r18, 0x00	; 0
   18306:	30 e0       	ldi	r19, 0x00	; 0
   18308:	40 e0       	ldi	r20, 0x00	; 0
   1830a:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   1830c:	ba 01       	movw	r22, r20
   1830e:	8c 0d       	add	r24, r12
   18310:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   18312:	0e 94 6b b9 	call	0x172d6	; 0x172d6 <assign_value>
   18316:	67 2b       	or	r22, r23
   18318:	68 2b       	or	r22, r24
   1831a:	69 2b       	or	r22, r25
   1831c:	19 f4       	brne	.+6      	; 0x18324 <POSIX_Read_Config+0xf0e>
   1831e:	3f ef       	ldi	r19, 0xFF	; 255
   18320:	a3 1a       	sub	r10, r19
   18322:	b3 0a       	sbc	r11, r19
   18324:	cf 57       	subi	r28, 0x7F	; 127
   18326:	df 4f       	sbci	r29, 0xFF	; 255
   18328:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   1832a:	99 81       	ldd	r25, Y+1	; 0x01
   1832c:	c1 58       	subi	r28, 0x81	; 129
   1832e:	d0 40       	sbci	r29, 0x00	; 0
   18330:	d1 01       	movw	r26, r2
   18332:	98 96       	adiw	r26, 0x28	; 40
   18334:	9c 93       	st	X, r25
   18336:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18338:	97 97       	sbiw	r26, 0x27	; 39
   1833a:	19 c9       	rjmp	.-3534   	; 0x1756e <POSIX_Read_Config+0x158>
   1833c:	6e e7       	ldi	r22, 0x7E	; 126
   1833e:	75 e1       	ldi	r23, 0x15	; 21
   18340:	c6 01       	movw	r24, r12
   18342:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18346:	00 97       	sbiw	r24, 0x00	; 0
   18348:	11 f1       	breq	.+68     	; 0x1838e <POSIX_Read_Config+0xf78>
   1834a:	fe 01       	movw	r30, r28
   1834c:	ef 57       	subi	r30, 0x7F	; 127
   1834e:	ff 4f       	sbci	r31, 0xFF	; 255
   18350:	7f 01       	movw	r14, r30
   18352:	0f ef       	ldi	r16, 0xFF	; 255
   18354:	10 e0       	ldi	r17, 0x00	; 0
   18356:	20 e0       	ldi	r18, 0x00	; 0
   18358:	30 e0       	ldi	r19, 0x00	; 0
   1835a:	40 e0       	ldi	r20, 0x00	; 0
   1835c:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   1835e:	ba 01       	movw	r22, r20
   18360:	8c 0d       	add	r24, r12
   18362:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.HEADS = val;
   18364:	0e 94 6b b9 	call	0x172d6	; 0x172d6 <assign_value>
   18368:	67 2b       	or	r22, r23
   1836a:	68 2b       	or	r22, r24
   1836c:	69 2b       	or	r22, r25
   1836e:	19 f4       	brne	.+6      	; 0x18376 <POSIX_Read_Config+0xf60>
   18370:	ff ef       	ldi	r31, 0xFF	; 255
   18372:	af 1a       	sub	r10, r31
   18374:	bf 0a       	sbc	r11, r31
   18376:	cf 57       	subi	r28, 0x7F	; 127
   18378:	df 4f       	sbci	r29, 0xFF	; 255
   1837a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   1837c:	99 81       	ldd	r25, Y+1	; 0x01
   1837e:	c1 58       	subi	r28, 0x81	; 129
   18380:	d0 40       	sbci	r29, 0x00	; 0
   18382:	d1 01       	movw	r26, r2
   18384:	9a 96       	adiw	r26, 0x2a	; 42
   18386:	9c 93       	st	X, r25
   18388:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1838a:	99 97       	sbiw	r26, 0x29	; 41
   1838c:	f0 c8       	rjmp	.-3616   	; 0x1756e <POSIX_Read_Config+0x158>
   1838e:	64 e8       	ldi	r22, 0x84	; 132
   18390:	75 e1       	ldi	r23, 0x15	; 21
   18392:	c6 01       	movw	r24, r12
   18394:	0e 94 98 33 	call	0x6730	; 0x6730 <token>
   18398:	00 97       	sbiw	r24, 0x00	; 0
   1839a:	11 f1       	breq	.+68     	; 0x183e0 <POSIX_Read_Config+0xfca>
   1839c:	fe 01       	movw	r30, r28
   1839e:	ef 57       	subi	r30, 0x7F	; 127
   183a0:	ff 4f       	sbci	r31, 0xFF	; 255
   183a2:	7f 01       	movw	r14, r30
   183a4:	0f ef       	ldi	r16, 0xFF	; 255
   183a6:	10 e0       	ldi	r17, 0x00	; 0
   183a8:	20 e0       	ldi	r18, 0x00	; 0
   183aa:	30 e0       	ldi	r19, 0x00	; 0
   183ac:	40 e0       	ldi	r20, 0x00	; 0
   183ae:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   183b0:	ba 01       	movw	r22, r20
   183b2:	8c 0d       	add	r24, r12
   183b4:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.CYLINDERS = val;
   183b6:	0e 94 6b b9 	call	0x172d6	; 0x172d6 <assign_value>
   183ba:	67 2b       	or	r22, r23
   183bc:	68 2b       	or	r22, r24
   183be:	69 2b       	or	r22, r25
   183c0:	19 f4       	brne	.+6      	; 0x183c8 <POSIX_Read_Config+0xfb2>
   183c2:	ff ef       	ldi	r31, 0xFF	; 255
   183c4:	af 1a       	sub	r10, r31
   183c6:	bf 0a       	sbc	r11, r31
   183c8:	cf 57       	subi	r28, 0x7F	; 127
   183ca:	df 4f       	sbci	r29, 0xFF	; 255
   183cc:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   183ce:	99 81       	ldd	r25, Y+1	; 0x01
   183d0:	c1 58       	subi	r28, 0x81	; 129
   183d2:	d0 40       	sbci	r29, 0x00	; 0
   183d4:	d1 01       	movw	r26, r2
   183d6:	9c 96       	adiw	r26, 0x2c	; 44
   183d8:	9c 93       	st	X, r25
   183da:	8e 93       	st	-X, r24
   183dc:	9b 97       	sbiw	r26, 0x2b	; 43
   183de:	c7 c8       	rjmp	.-3698   	; 0x1756e <POSIX_Read_Config+0x158>
   183e0:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   183e4:	8f 93       	push	r24
   183e6:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   183ea:	8f 93       	push	r24
   183ec:	df 92       	push	r13
   183ee:	cf 92       	push	r12
   183f0:	1f 92       	push	r1
   183f2:	c3 57       	subi	r28, 0x73	; 115
   183f4:	df 4f       	sbci	r29, 0xFF	; 255
   183f6:	b8 81       	ld	r27, Y
   183f8:	cd 58       	subi	r28, 0x8D	; 141
   183fa:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   183fc:	bf 93       	push	r27
   183fe:	c4 57       	subi	r28, 0x74	; 116
   18400:	df 4f       	sbci	r29, 0xFF	; 255
   18402:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   18404:	cc 58       	subi	r28, 0x8C	; 140
   18406:	d0 40       	sbci	r29, 0x00	; 0
   18408:	ef 93       	push	r30
   1840a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1840e:	ff ef       	ldi	r31, 0xFF	; 255
   18410:	af 1a       	sub	r10, r31
   18412:	bf 0a       	sbc	r11, r31
   18414:	1a c0       	rjmp	.+52     	; 0x1844a <POSIX_Read_Config+0x1034>
   18416:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1841a:	8f 93       	push	r24
   1841c:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
   18420:	8f 93       	push	r24
   18422:	df 92       	push	r13
   18424:	cf 92       	push	r12
   18426:	1f 92       	push	r1
   18428:	c6 57       	subi	r28, 0x76	; 118
   1842a:	df 4f       	sbci	r29, 0xFF	; 255
   1842c:	38 81       	ld	r19, Y
   1842e:	ca 58       	subi	r28, 0x8A	; 138
   18430:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   18432:	3f 93       	push	r19
   18434:	c7 57       	subi	r28, 0x77	; 119
   18436:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   18438:	48 81       	ld	r20, Y
   1843a:	c9 58       	subi	r28, 0x89	; 137
   1843c:	d0 40       	sbci	r29, 0x00	; 0
   1843e:	4f 93       	push	r20
   18440:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   18444:	8f ef       	ldi	r24, 0xFF	; 255
   18446:	a8 1a       	sub	r10, r24
   18448:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   1844a:	0f b6       	in	r0, 0x3f	; 63
   1844c:	f8 94       	cli
   1844e:	de bf       	out	0x3e, r29	; 62
   18450:	0f be       	out	0x3f, r0	; 63
   18452:	cd bf       	out	0x3d, r28	; 61
   18454:	8c c8       	rjmp	.-3816   	; 0x1756e <POSIX_Read_Config+0x158>
   18456:	81 14       	cp	r8, r1
   18458:	91 04       	cpc	r9, r1
   1845a:	a9 f0       	breq	.+42     	; 0x18486 <POSIX_Read_Config+0x1070>
   1845c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   18460:	8f 93       	push	r24
   18462:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
        ++errors;
   18466:	8f 93       	push	r24
   18468:	8f e6       	ldi	r24, 0x6F	; 111
   1846a:	9d e2       	ldi	r25, 0x2D	; 45
   1846c:	1f 92       	push	r1
   1846e:	9f 93       	push	r25
   18470:	8f 93       	push	r24
   18472:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   18476:	bf ef       	ldi	r27, 0xFF	; 255
   18478:	ab 1a       	sub	r10, r27
   1847a:	bb 0a       	sbc	r11, r27
   1847c:	0f 90       	pop	r0
   1847e:	0f 90       	pop	r0
   18480:	0f 90       	pop	r0
   18482:	0f 90       	pop	r0
   18484:	0f 90       	pop	r0
   18486:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <lines+0x1>
   1848a:	8f 93       	push	r24
   1848c:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <lines>
    if(errors)
   18490:	8f 93       	push	r24
   18492:	82 e5       	ldi	r24, 0x52	; 82
   18494:	9d e2       	ldi	r25, 0x2D	; 45
   18496:	1f 92       	push	r1
   18498:	9f 93       	push	r25
   1849a:	8f 93       	push	r24
   1849c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   184a0:	0f 90       	pop	r0
   184a2:	0f 90       	pop	r0
   184a4:	0f 90       	pop	r0
   184a6:	0f 90       	pop	r0
   184a8:	0f 90       	pop	r0
   184aa:	a1 14       	cp	r10, r1
   184ac:	b1 04       	cpc	r11, r1
   184ae:	71 f0       	breq	.+28     	; 0x184cc <POSIX_Read_Config+0x10b6>
   184b0:	bf 92       	push	r11
   184b2:	af 92       	push	r10
   184b4:	8b e2       	ldi	r24, 0x2B	; 43
   184b6:	9d e2       	ldi	r25, 0x2D	; 45
   184b8:	1f 92       	push	r1

    ret = fclose(cfg);
   184ba:	9f 93       	push	r25
   184bc:	8f 93       	push	r24
   184be:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   184c2:	0f 90       	pop	r0
   184c4:	0f 90       	pop	r0
   184c6:	0f 90       	pop	r0
   184c8:	0f 90       	pop	r0
    if(ret == EOF)
   184ca:	0f 90       	pop	r0
   184cc:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   184ce:	df 4f       	sbci	r29, 0xFF	; 255
   184d0:	88 81       	ld	r24, Y
   184d2:	99 81       	ldd	r25, Y+1	; 0x01
   184d4:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   184d6:	d0 40       	sbci	r29, 0x00	; 0
   184d8:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
   184dc:	01 96       	adiw	r24, 0x01	; 1
    }

    return(errors);
}
   184de:	39 f4       	brne	.+14     	; 0x184ee <POSIX_Read_Config+0x10d8>
   184e0:	8e e8       	ldi	r24, 0x8E	; 142
   184e2:	95 e1       	ldi	r25, 0x15	; 21
   184e4:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <perror>
   184e8:	c5 01       	movw	r24, r10
   184ea:	01 96       	adiw	r24, 0x01	; 1
   184ec:	01 c0       	rjmp	.+2      	; 0x184f0 <POSIX_Read_Config+0x10da>
   184ee:	c5 01       	movw	r24, r10
   184f0:	c6 56       	subi	r28, 0x66	; 102
   184f2:	df 4f       	sbci	r29, 0xFF	; 255
   184f4:	e2 e1       	ldi	r30, 0x12	; 18
   184f6:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

000184fa <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   184fa:	cf 92       	push	r12
   184fc:	df 92       	push	r13
   184fe:	ef 92       	push	r14
   18500:	0f 93       	push	r16
   18502:	1f 93       	push	r17
   18504:	cf 93       	push	r28
   18506:	df 93       	push	r29
   18508:	cd b7       	in	r28, 0x3d	; 61
   1850a:	de b7       	in	r29, 0x3e	; 62
   1850c:	c0 54       	subi	r28, 0x40	; 64
   1850e:	d1 09       	sbc	r29, r1
   18510:	0f b6       	in	r0, 0x3f	; 63
   18512:	f8 94       	cli
   18514:	de bf       	out	0x3e, r29	; 62
   18516:	0f be       	out	0x3f, r0	; 63
   18518:	cd bf       	out	0x3d, r28	; 61
   1851a:	6b 01       	movw	r12, r22
   1851c:	e8 2e       	mov	r14, r24
   1851e:	75 2f       	mov	r23, r21
   18520:	de 01       	movw	r26, r28
   18522:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   18524:	80 e0       	ldi	r24, 0x00	; 0
   18526:	90 e0       	ldi	r25, 0x00	; 0
   18528:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   1852a:	f6 01       	movw	r30, r12
   1852c:	5e 2d       	mov	r21, r14
   1852e:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
   18532:	66 23       	and	r22, r22
   18534:	51 f0       	breq	.+20     	; 0x1854a <print_var_P+0x50>
   18536:	8e 33       	cpi	r24, 0x3E	; 62
   18538:	91 05       	cpc	r25, r1
   1853a:	39 f0       	breq	.+14     	; 0x1854a <print_var_P+0x50>
        tmp[i++] = *str++;
   1853c:	01 96       	adiw	r24, 0x01	; 1
   1853e:	5f ef       	ldi	r21, 0xFF	; 255
   18540:	c5 1a       	sub	r12, r21
   18542:	d5 0a       	sbc	r13, r21
   18544:	e5 0a       	sbc	r14, r21
   18546:	6d 93       	st	X+, r22
   18548:	f0 cf       	rjmp	.-32     	; 0x1852a <print_var_P+0x30>
    tmp[i++] = 0;
   1854a:	f8 01       	movw	r30, r16
   1854c:	e8 0f       	add	r30, r24
   1854e:	f9 1f       	adc	r31, r25
   18550:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   18552:	7f 93       	push	r23
   18554:	4f 93       	push	r20
   18556:	3f 93       	push	r19
   18558:	2f 93       	push	r18
   1855a:	7f 93       	push	r23
   1855c:	4f 93       	push	r20
   1855e:	3f 93       	push	r19
   18560:	2f 93       	push	r18
   18562:	1f 93       	push	r17
   18564:	0f 93       	push	r16
   18566:	82 e1       	ldi	r24, 0x12	; 18
   18568:	9d e2       	ldi	r25, 0x2D	; 45
   1856a:	1f 92       	push	r1
   1856c:	9f 93       	push	r25
   1856e:	8f 93       	push	r24
   18570:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   18574:	0f b6       	in	r0, 0x3f	; 63
   18576:	f8 94       	cli
   18578:	de bf       	out	0x3e, r29	; 62
   1857a:	0f be       	out	0x3f, r0	; 63
   1857c:	cd bf       	out	0x3d, r28	; 61
   1857e:	c0 5c       	subi	r28, 0xC0	; 192
   18580:	df 4f       	sbci	r29, 0xFF	; 255
   18582:	0f b6       	in	r0, 0x3f	; 63
   18584:	f8 94       	cli
   18586:	de bf       	out	0x3e, r29	; 62
   18588:	0f be       	out	0x3f, r0	; 63
   1858a:	cd bf       	out	0x3d, r28	; 61
   1858c:	df 91       	pop	r29
   1858e:	cf 91       	pop	r28
   18590:	1f 91       	pop	r17
   18592:	0f 91       	pop	r16
   18594:	ef 90       	pop	r14
   18596:	df 90       	pop	r13
   18598:	cf 90       	pop	r12
   1859a:	08 95       	ret

0001859c <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   1859c:	cf 92       	push	r12
   1859e:	df 92       	push	r13
   185a0:	ef 92       	push	r14
   185a2:	cf 93       	push	r28
   185a4:	df 93       	push	r29
   185a6:	cd b7       	in	r28, 0x3d	; 61
   185a8:	de b7       	in	r29, 0x3e	; 62
   185aa:	c0 54       	subi	r28, 0x40	; 64
   185ac:	d1 09       	sbc	r29, r1
   185ae:	0f b6       	in	r0, 0x3f	; 63
   185b0:	f8 94       	cli
   185b2:	de bf       	out	0x3e, r29	; 62
   185b4:	0f be       	out	0x3f, r0	; 63
   185b6:	cd bf       	out	0x3d, r28	; 61
   185b8:	6b 01       	movw	r12, r22
   185ba:	e8 2e       	mov	r14, r24
   185bc:	75 2f       	mov	r23, r21
   185be:	de 01       	movw	r26, r28
   185c0:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   185c2:	80 e0       	ldi	r24, 0x00	; 0
   185c4:	90 e0       	ldi	r25, 0x00	; 0
   185c6:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   185c8:	f6 01       	movw	r30, r12
   185ca:	5e 2d       	mov	r21, r14
   185cc:	0e 94 52 eb 	call	0x1d6a4	; 0x1d6a4 <__xload_1>
   185d0:	66 23       	and	r22, r22
   185d2:	51 f0       	breq	.+20     	; 0x185e8 <print_str_P+0x4c>
   185d4:	8e 33       	cpi	r24, 0x3E	; 62
   185d6:	91 05       	cpc	r25, r1
   185d8:	39 f0       	breq	.+14     	; 0x185e8 <print_str_P+0x4c>
        tmp[i++] = *str++;
   185da:	01 96       	adiw	r24, 0x01	; 1
   185dc:	5f ef       	ldi	r21, 0xFF	; 255
   185de:	c5 1a       	sub	r12, r21
   185e0:	d5 0a       	sbc	r13, r21
   185e2:	e5 0a       	sbc	r14, r21
   185e4:	6d 93       	st	X+, r22
   185e6:	f0 cf       	rjmp	.-32     	; 0x185c8 <print_str_P+0x2c>
    tmp[i++] = 0;
   185e8:	f9 01       	movw	r30, r18
   185ea:	e8 0f       	add	r30, r24
   185ec:	f9 1f       	adc	r31, r25
   185ee:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   185f0:	7f 93       	push	r23
   185f2:	4f 93       	push	r20
   185f4:	3f 93       	push	r19
   185f6:	2f 93       	push	r18
   185f8:	80 e0       	ldi	r24, 0x00	; 0
   185fa:	9d e2       	ldi	r25, 0x2D	; 45
   185fc:	1f 92       	push	r1
   185fe:	9f 93       	push	r25
   18600:	8f 93       	push	r24
   18602:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   18606:	0f b6       	in	r0, 0x3f	; 63
   18608:	f8 94       	cli
   1860a:	de bf       	out	0x3e, r29	; 62
   1860c:	0f be       	out	0x3f, r0	; 63
   1860e:	cd bf       	out	0x3d, r28	; 61
   18610:	c0 5c       	subi	r28, 0xC0	; 192
   18612:	df 4f       	sbci	r29, 0xFF	; 255
   18614:	0f b6       	in	r0, 0x3f	; 63
   18616:	f8 94       	cli
   18618:	de bf       	out	0x3e, r29	; 62
   1861a:	0f be       	out	0x3f, r0	; 63
   1861c:	cd bf       	out	0x3d, r28	; 61
   1861e:	df 91       	pop	r29
   18620:	cf 91       	pop	r28
   18622:	ef 90       	pop	r14
   18624:	df 90       	pop	r13
   18626:	cf 90       	pop	r12
   18628:	08 95       	ret

0001862a <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   1862a:	2f 92       	push	r2
   1862c:	3f 92       	push	r3
   1862e:	4f 92       	push	r4
   18630:	6f 92       	push	r6
   18632:	7f 92       	push	r7
   18634:	8f 92       	push	r8
   18636:	af 92       	push	r10
   18638:	bf 92       	push	r11
   1863a:	cf 92       	push	r12
   1863c:	df 92       	push	r13
   1863e:	ef 92       	push	r14
   18640:	0f 93       	push	r16
   18642:	1f 93       	push	r17
   18644:	cf 93       	push	r28
   18646:	df 93       	push	r29
   18648:	cd b7       	in	r28, 0x3d	; 61
   1864a:	de b7       	in	r29, 0x3e	; 62
   1864c:	2b 97       	sbiw	r28, 0x0b	; 11
   1864e:	0f b6       	in	r0, 0x3f	; 63
   18650:	f8 94       	cli
   18652:	de bf       	out	0x3e, r29	; 62
   18654:	0f be       	out	0x3f, r0	; 63
   18656:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   18658:	8e ed       	ldi	r24, 0xDE	; 222
   1865a:	9c e2       	ldi	r25, 0x2C	; 44
   1865c:	1f 92       	push	r1
   1865e:	9f 93       	push	r25
   18660:	8f 93       	push	r24
   18662:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18666:	07 ef       	ldi	r16, 0xF7	; 247
   18668:	1e e1       	ldi	r17, 0x1E	; 30
   1866a:	0f 90       	pop	r0
   1866c:	0f 90       	pop	r0
   1866e:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18670:	8d e3       	ldi	r24, 0x3D	; 61
   18672:	9c e2       	ldi	r25, 0x2C	; 44
   18674:	9c 01       	movw	r18, r24
   18676:	40 e0       	ldi	r20, 0x00	; 0
   18678:	29 83       	std	Y+1, r18	; 0x01
   1867a:	3a 83       	std	Y+2, r19	; 0x02
   1867c:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1867e:	86 e2       	ldi	r24, 0x26	; 38
   18680:	9c e2       	ldi	r25, 0x2C	; 44
   18682:	9c 01       	movw	r18, r24
   18684:	40 e0       	ldi	r20, 0x00	; 0
   18686:	2c 83       	std	Y+4, r18	; 0x04
   18688:	3d 83       	std	Y+5, r19	; 0x05
   1868a:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   1868c:	8f e0       	ldi	r24, 0x0F	; 15
   1868e:	9c e2       	ldi	r25, 0x2C	; 44
   18690:	9c 01       	movw	r18, r24
   18692:	40 e0       	ldi	r20, 0x00	; 0
   18694:	2f 83       	std	Y+7, r18	; 0x07
   18696:	38 87       	std	Y+8, r19	; 0x08
   18698:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   1869a:	82 e8       	ldi	r24, 0x82	; 130
   1869c:	9c e2       	ldi	r25, 0x2C	; 44
   1869e:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   186a0:	8b e6       	ldi	r24, 0x6B	; 107
   186a2:	9c e2       	ldi	r25, 0x2C	; 44
   186a4:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   186a6:	84 e5       	ldi	r24, 0x54	; 84
   186a8:	9c e2       	ldi	r25, 0x2C	; 44
   186aa:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   186ac:	87 ec       	ldi	r24, 0xC7	; 199
   186ae:	a8 2e       	mov	r10, r24
   186b0:	8c e2       	ldi	r24, 0x2C	; 44
   186b2:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   186b4:	f8 01       	movw	r30, r16
   186b6:	80 81       	ld	r24, Z
   186b8:	88 23       	and	r24, r24
   186ba:	09 f4       	brne	.+2      	; 0x186be <display_Addresses+0x94>
   186bc:	8a c0       	rjmp	.+276    	; 0x187d2 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   186be:	f1 81       	ldd	r31, Z+1	; 0x01
   186c0:	2f 2f       	mov	r18, r31
   186c2:	30 e0       	ldi	r19, 0x00	; 0
   186c4:	3b 87       	std	Y+11, r19	; 0x0b
   186c6:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   186c8:	82 30       	cpi	r24, 0x02	; 2
   186ca:	49 f5       	brne	.+82     	; 0x1871e <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   186cc:	c9 01       	movw	r24, r18
   186ce:	80 96       	adiw	r24, 0x20	; 32
   186d0:	9f 93       	push	r25
   186d2:	8f 93       	push	r24
   186d4:	c5 01       	movw	r24, r10
   186d6:	1f 92       	push	r1
   186d8:	9f 93       	push	r25
   186da:	af 92       	push	r10
   186dc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   186e0:	8a 85       	ldd	r24, Y+10	; 0x0a
   186e2:	9b 85       	ldd	r25, Y+11	; 0x0b
   186e4:	80 5c       	subi	r24, 0xC0	; 192
   186e6:	9f 4f       	sbci	r25, 0xFF	; 255
   186e8:	9f 93       	push	r25
   186ea:	8f 93       	push	r24
   186ec:	80 eb       	ldi	r24, 0xB0	; 176
   186ee:	9c e2       	ldi	r25, 0x2C	; 44
   186f0:	1f 92       	push	r1
   186f2:	9f 93       	push	r25
   186f4:	8f 93       	push	r24
   186f6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   186fa:	8a 85       	ldd	r24, Y+10	; 0x0a
   186fc:	9b 85       	ldd	r25, Y+11	; 0x0b
   186fe:	80 5a       	subi	r24, 0xA0	; 160
   18700:	9f 4f       	sbci	r25, 0xFF	; 255
   18702:	9f 93       	push	r25
   18704:	8f 93       	push	r24
   18706:	89 e9       	ldi	r24, 0x99	; 153
   18708:	9c e2       	ldi	r25, 0x2C	; 44
   1870a:	1f 92       	push	r1
   1870c:	9f 93       	push	r25
   1870e:	8f 93       	push	r24
   18710:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18714:	0f b6       	in	r0, 0x3f	; 63
   18716:	f8 94       	cli
   18718:	de bf       	out	0x3e, r29	; 62
   1871a:	0f be       	out	0x3f, r0	; 63
   1871c:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1871e:	f8 01       	movw	r30, r16
   18720:	80 81       	ld	r24, Z
   18722:	81 30       	cpi	r24, 0x01	; 1
   18724:	29 f5       	brne	.+74     	; 0x18770 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18726:	8a 85       	ldd	r24, Y+10	; 0x0a
   18728:	9b 85       	ldd	r25, Y+11	; 0x0b
   1872a:	80 96       	adiw	r24, 0x20	; 32
   1872c:	9f 93       	push	r25
   1872e:	8f 93       	push	r24
   18730:	1f 92       	push	r1
   18732:	df 92       	push	r13
   18734:	cf 92       	push	r12
   18736:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1873a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1873c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1873e:	80 5c       	subi	r24, 0xC0	; 192
   18740:	9f 4f       	sbci	r25, 0xFF	; 255
   18742:	9f 93       	push	r25
   18744:	8f 93       	push	r24
   18746:	1f 92       	push	r1
   18748:	7f 92       	push	r7
   1874a:	6f 92       	push	r6
   1874c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   18750:	8a 85       	ldd	r24, Y+10	; 0x0a
   18752:	9b 85       	ldd	r25, Y+11	; 0x0b
   18754:	80 5a       	subi	r24, 0xA0	; 160
   18756:	9f 4f       	sbci	r25, 0xFF	; 255
   18758:	9f 93       	push	r25
   1875a:	8f 93       	push	r24
   1875c:	1f 92       	push	r1
   1875e:	3f 92       	push	r3
   18760:	2f 92       	push	r2
   18762:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18766:	0f b6       	in	r0, 0x3f	; 63
   18768:	f8 94       	cli
   1876a:	de bf       	out	0x3e, r29	; 62
   1876c:	0f be       	out	0x3f, r0	; 63
   1876e:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   18770:	f8 01       	movw	r30, r16
   18772:	80 81       	ld	r24, Z
   18774:	83 30       	cpi	r24, 0x03	; 3
   18776:	69 f5       	brne	.+90     	; 0x187d2 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18778:	8a 85       	ldd	r24, Y+10	; 0x0a
   1877a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1877c:	80 96       	adiw	r24, 0x20	; 32
   1877e:	9f 93       	push	r25
   18780:	8f 93       	push	r24
   18782:	1f 92       	push	r1
   18784:	fa 81       	ldd	r31, Y+2	; 0x02
   18786:	ff 93       	push	r31
   18788:	29 81       	ldd	r18, Y+1	; 0x01
   1878a:	2f 93       	push	r18
   1878c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   18790:	8a 85       	ldd	r24, Y+10	; 0x0a
   18792:	9b 85       	ldd	r25, Y+11	; 0x0b
   18794:	80 5c       	subi	r24, 0xC0	; 192
   18796:	9f 4f       	sbci	r25, 0xFF	; 255
   18798:	9f 93       	push	r25
   1879a:	8f 93       	push	r24
   1879c:	1f 92       	push	r1
   1879e:	3d 81       	ldd	r19, Y+5	; 0x05
   187a0:	3f 93       	push	r19
   187a2:	4c 81       	ldd	r20, Y+4	; 0x04
   187a4:	4f 93       	push	r20
   187a6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   187aa:	8a 85       	ldd	r24, Y+10	; 0x0a
   187ac:	9b 85       	ldd	r25, Y+11	; 0x0b
   187ae:	80 5a       	subi	r24, 0xA0	; 160
   187b0:	9f 4f       	sbci	r25, 0xFF	; 255
   187b2:	9b 87       	std	Y+11, r25	; 0x0b
   187b4:	8a 87       	std	Y+10, r24	; 0x0a
   187b6:	9f 93       	push	r25
   187b8:	8f 93       	push	r24
   187ba:	1f 92       	push	r1
   187bc:	98 85       	ldd	r25, Y+8	; 0x08
   187be:	9f 93       	push	r25
   187c0:	ef 81       	ldd	r30, Y+7	; 0x07
   187c2:	ef 93       	push	r30
   187c4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   187c8:	0f b6       	in	r0, 0x3f	; 63
   187ca:	f8 94       	cli
   187cc:	de bf       	out	0x3e, r29	; 62
   187ce:	0f be       	out	0x3f, r0	; 63
   187d0:	cd bf       	out	0x3d, r28	; 61
   187d2:	09 5f       	subi	r16, 0xF9	; 249
   187d4:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   187d6:	3f e1       	ldi	r19, 0x1F	; 31
   187d8:	0f 32       	cpi	r16, 0x2F	; 47
   187da:	13 07       	cpc	r17, r19
   187dc:	09 f0       	breq	.+2      	; 0x187e0 <display_Addresses+0x1b6>
   187de:	6a cf       	rjmp	.-300    	; 0x186b4 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   187e0:	8d e0       	ldi	r24, 0x0D	; 13
   187e2:	9c e2       	ldi	r25, 0x2C	; 44
   187e4:	1f 92       	push	r1
   187e6:	9f 93       	push	r25
   187e8:	8f 93       	push	r24
   187ea:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   187ee:	0f 90       	pop	r0
   187f0:	0f 90       	pop	r0
   187f2:	0f 90       	pop	r0
   187f4:	2b 96       	adiw	r28, 0x0b	; 11
   187f6:	0f b6       	in	r0, 0x3f	; 63
   187f8:	f8 94       	cli
   187fa:	de bf       	out	0x3e, r29	; 62
   187fc:	0f be       	out	0x3f, r0	; 63
   187fe:	cd bf       	out	0x3d, r28	; 61
   18800:	df 91       	pop	r29
   18802:	cf 91       	pop	r28
   18804:	1f 91       	pop	r17
   18806:	0f 91       	pop	r16
   18808:	ef 90       	pop	r14
   1880a:	df 90       	pop	r13
   1880c:	cf 90       	pop	r12
   1880e:	bf 90       	pop	r11
   18810:	af 90       	pop	r10
   18812:	8f 90       	pop	r8
   18814:	7f 90       	pop	r7
   18816:	6f 90       	pop	r6
   18818:	4f 90       	pop	r4
   1881a:	3f 90       	pop	r3
   1881c:	2f 90       	pop	r2
   1881e:	08 95       	ret

00018820 <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   18820:	2f 92       	push	r2
   18822:	3f 92       	push	r3
   18824:	4f 92       	push	r4
   18826:	6f 92       	push	r6
   18828:	7f 92       	push	r7
   1882a:	8f 92       	push	r8
   1882c:	af 92       	push	r10
   1882e:	bf 92       	push	r11
   18830:	cf 92       	push	r12
   18832:	df 92       	push	r13
   18834:	ef 92       	push	r14
   18836:	0f 93       	push	r16
   18838:	1f 93       	push	r17
   1883a:	cf 93       	push	r28
   1883c:	df 93       	push	r29
   1883e:	cd b7       	in	r28, 0x3d	; 61
   18840:	de b7       	in	r29, 0x3e	; 62
   18842:	2b 97       	sbiw	r28, 0x0b	; 11
   18844:	0f b6       	in	r0, 0x3f	; 63
   18846:	f8 94       	cli
   18848:	de bf       	out	0x3e, r29	; 62
   1884a:	0f be       	out	0x3f, r0	; 63
   1884c:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1884e:	8d ee       	ldi	r24, 0xED	; 237
   18850:	9b e2       	ldi	r25, 0x2B	; 43
   18852:	1f 92       	push	r1
   18854:	9f 93       	push	r25
   18856:	8f 93       	push	r24
   18858:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1885c:	07 ef       	ldi	r16, 0xF7	; 247
   1885e:	1e e1       	ldi	r17, 0x1E	; 30
   18860:	0f 90       	pop	r0
   18862:	0f 90       	pop	r0
   18864:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   18866:	8c ef       	ldi	r24, 0xFC	; 252
   18868:	99 e2       	ldi	r25, 0x29	; 41
   1886a:	9c 01       	movw	r18, r24
   1886c:	40 e0       	ldi	r20, 0x00	; 0
   1886e:	29 83       	std	Y+1, r18	; 0x01
   18870:	3a 83       	std	Y+2, r19	; 0x02
   18872:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   18874:	80 e1       	ldi	r24, 0x10	; 16
   18876:	9a e2       	ldi	r25, 0x2A	; 42
   18878:	9c 01       	movw	r18, r24
   1887a:	40 e0       	ldi	r20, 0x00	; 0
   1887c:	2c 83       	std	Y+4, r18	; 0x04
   1887e:	3d 83       	std	Y+5, r19	; 0x05
   18880:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   18882:	86 e0       	ldi	r24, 0x06	; 6
   18884:	9a e2       	ldi	r25, 0x2A	; 42
   18886:	9c 01       	movw	r18, r24
   18888:	40 e0       	ldi	r20, 0x00	; 0
   1888a:	2f 83       	std	Y+7, r18	; 0x07
   1888c:	38 87       	std	Y+8, r19	; 0x08
   1888e:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18890:	8e ef       	ldi	r24, 0xFE	; 254
   18892:	99 e2       	ldi	r25, 0x29	; 41
   18894:	3c 01       	movw	r6, r24
   18896:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   18898:	80 e8       	ldi	r24, 0x80	; 128
   1889a:	9a e2       	ldi	r25, 0x2A	; 42
   1889c:	1c 01       	movw	r2, r24
            printf("  HEADER\n");
   1889e:	86 e7       	ldi	r24, 0x76	; 118
   188a0:	9a e2       	ldi	r25, 0x2A	; 42
   188a2:	6c 01       	movw	r12, r24
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   188a4:	8e e6       	ldi	r24, 0x6E	; 110
   188a6:	a8 2e       	mov	r10, r24
   188a8:	8a e2       	ldi	r24, 0x2A	; 42
   188aa:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   188ac:	f8 01       	movw	r30, r16
   188ae:	80 81       	ld	r24, Z
   188b0:	88 23       	and	r24, r24
   188b2:	09 f4       	brne	.+2      	; 0x188b6 <display_Config+0x96>
   188b4:	d8 c1       	rjmp	.+944    	; 0x18c66 <display_Config+0x446>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   188b6:	82 30       	cpi	r24, 0x02	; 2
   188b8:	09 f0       	breq	.+2      	; 0x188bc <display_Config+0x9c>
   188ba:	2b c1       	rjmp	.+598    	; 0x18b12 <display_Config+0x2f2>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   188bc:	23 81       	ldd	r18, Z+3	; 0x03
   188be:	34 81       	ldd	r19, Z+4	; 0x04
   188c0:	3b 87       	std	Y+11, r19	; 0x0b
   188c2:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   188c4:	87 ee       	ldi	r24, 0xE7	; 231
   188c6:	9b e2       	ldi	r25, 0x2B	; 43
   188c8:	1f 92       	push	r1
   188ca:	9f 93       	push	r25
   188cc:	8f 93       	push	r24
   188ce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            printf("  CONFIG\n");
   188d2:	8d ed       	ldi	r24, 0xDD	; 221
   188d4:	9b e2       	ldi	r25, 0x2B	; 43
   188d6:	1f 92       	push	r1
   188d8:	9f 93       	push	r25
   188da:	8f 93       	push	r24
   188dc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   188e0:	ea 85       	ldd	r30, Y+10	; 0x0a
   188e2:	fb 85       	ldd	r31, Y+11	; 0x0b
   188e4:	20 81       	ld	r18, Z
   188e6:	30 e0       	ldi	r19, 0x00	; 0
   188e8:	40 e0       	ldi	r20, 0x00	; 0
   188ea:	50 e0       	ldi	r21, 0x00	; 0
   188ec:	65 ed       	ldi	r22, 0xD5	; 213
   188ee:	7b e2       	ldi	r23, 0x2B	; 43
   188f0:	80 e0       	ldi	r24, 0x00	; 0
   188f2:	03 de       	rcall	.-1018   	; 0x184fa <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   188f4:	ea 85       	ldd	r30, Y+10	; 0x0a
   188f6:	fb 85       	ldd	r31, Y+11	; 0x0b
   188f8:	21 81       	ldd	r18, Z+1	; 0x01
   188fa:	30 e0       	ldi	r19, 0x00	; 0
   188fc:	40 e0       	ldi	r20, 0x00	; 0
   188fe:	50 e0       	ldi	r21, 0x00	; 0
   18900:	61 ed       	ldi	r22, 0xD1	; 209
   18902:	7b e2       	ldi	r23, 0x2B	; 43
   18904:	80 e0       	ldi	r24, 0x00	; 0
   18906:	f9 dd       	rcall	.-1038   	; 0x184fa <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   18908:	4a 85       	ldd	r20, Y+10	; 0x0a
   1890a:	5b 85       	ldd	r21, Y+11	; 0x0b
   1890c:	4e 5f       	subi	r20, 0xFE	; 254
   1890e:	5f 4f       	sbci	r21, 0xFF	; 255
   18910:	6c ec       	ldi	r22, 0xCC	; 204
   18912:	7b e2       	ldi	r23, 0x2B	; 43
   18914:	80 e0       	ldi	r24, 0x00	; 0
   18916:	42 de       	rcall	.-892    	; 0x1859c <print_str_P>
            printf("  HEADER\n");
   18918:	82 ec       	ldi	r24, 0xC2	; 194
   1891a:	9b e2       	ldi	r25, 0x2B	; 43
   1891c:	1f 92       	push	r1
   1891e:	9f 93       	push	r25
   18920:	8f 93       	push	r24
   18922:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   18926:	ea 85       	ldd	r30, Y+10	; 0x0a
   18928:	fb 85       	ldd	r31, Y+11	; 0x0b
   1892a:	23 a1       	ldd	r18, Z+35	; 0x23
   1892c:	34 a1       	ldd	r19, Z+36	; 0x24
   1892e:	40 e0       	ldi	r20, 0x00	; 0
   18930:	50 e0       	ldi	r21, 0x00	; 0
   18932:	6f eb       	ldi	r22, 0xBF	; 191
   18934:	7b e2       	ldi	r23, 0x2B	; 43
   18936:	80 e0       	ldi	r24, 0x00	; 0
   18938:	e0 dd       	rcall	.-1088   	; 0x184fa <print_var_P>
            printf("  CONTROLLER\n");
   1893a:	81 eb       	ldi	r24, 0xB1	; 177
   1893c:	9b e2       	ldi	r25, 0x2B	; 43
   1893e:	1f 92       	push	r1
   18940:	9f 93       	push	r25
   18942:	8f 93       	push	r24
   18944:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18948:	ea 85       	ldd	r30, Y+10	; 0x0a
   1894a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1894c:	25 a1       	ldd	r18, Z+37	; 0x25
   1894e:	36 a1       	ldd	r19, Z+38	; 0x26
   18950:	40 e0       	ldi	r20, 0x00	; 0
   18952:	50 e0       	ldi	r21, 0x00	; 0
   18954:	61 ea       	ldi	r22, 0xA1	; 161
   18956:	7b e2       	ldi	r23, 0x2B	; 43
   18958:	80 e0       	ldi	r24, 0x00	; 0
   1895a:	cf dd       	rcall	.-1122   	; 0x184fa <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   1895c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1895e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18960:	27 a1       	ldd	r18, Z+39	; 0x27
   18962:	30 a5       	ldd	r19, Z+40	; 0x28
   18964:	40 e0       	ldi	r20, 0x00	; 0
   18966:	50 e0       	ldi	r21, 0x00	; 0
   18968:	63 e9       	ldi	r22, 0x93	; 147
   1896a:	7b e2       	ldi	r23, 0x2B	; 43
   1896c:	80 e0       	ldi	r24, 0x00	; 0
   1896e:	c5 dd       	rcall	.-1142   	; 0x184fa <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   18970:	ea 85       	ldd	r30, Y+10	; 0x0a
   18972:	fb 85       	ldd	r31, Y+11	; 0x0b
   18974:	21 a5       	ldd	r18, Z+41	; 0x29
   18976:	30 e0       	ldi	r19, 0x00	; 0
   18978:	40 e0       	ldi	r20, 0x00	; 0
   1897a:	50 e0       	ldi	r21, 0x00	; 0
   1897c:	6e e8       	ldi	r22, 0x8E	; 142
   1897e:	7b e2       	ldi	r23, 0x2B	; 43
   18980:	80 e0       	ldi	r24, 0x00	; 0
   18982:	bb dd       	rcall	.-1162   	; 0x184fa <print_var_P>
            printf("  UNIT\n");
   18984:	86 e8       	ldi	r24, 0x86	; 134
   18986:	9b e2       	ldi	r25, 0x2B	; 43
   18988:	1f 92       	push	r1
   1898a:	9f 93       	push	r25
   1898c:	8f 93       	push	r24
   1898e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   18992:	ea 85       	ldd	r30, Y+10	; 0x0a
   18994:	fb 85       	ldd	r31, Y+11	; 0x0b
   18996:	22 a5       	ldd	r18, Z+42	; 0x2a
   18998:	30 e0       	ldi	r19, 0x00	; 0
   1899a:	40 e0       	ldi	r20, 0x00	; 0
   1899c:	50 e0       	ldi	r21, 0x00	; 0
   1899e:	6c e7       	ldi	r22, 0x7C	; 124
   189a0:	7b e2       	ldi	r23, 0x2B	; 43
   189a2:	80 e0       	ldi	r24, 0x00	; 0
   189a4:	aa dd       	rcall	.-1196   	; 0x184fa <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   189a6:	ea 85       	ldd	r30, Y+10	; 0x0a
   189a8:	fb 85       	ldd	r31, Y+11	; 0x0b
   189aa:	23 a5       	ldd	r18, Z+43	; 0x2b
   189ac:	34 a5       	ldd	r19, Z+44	; 0x2c
   189ae:	45 a5       	ldd	r20, Z+45	; 0x2d
   189b0:	56 a5       	ldd	r21, Z+46	; 0x2e
   189b2:	6e e6       	ldi	r22, 0x6E	; 110
   189b4:	7b e2       	ldi	r23, 0x2B	; 43
   189b6:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   189b8:	a0 dd       	rcall	.-1216   	; 0x184fa <print_var_P>
   189ba:	ea 85       	ldd	r30, Y+10	; 0x0a
   189bc:	fb 85       	ldd	r31, Y+11	; 0x0b
   189be:	27 a5       	ldd	r18, Z+47	; 0x2f
   189c0:	30 a9       	ldd	r19, Z+48	; 0x30
   189c2:	40 e0       	ldi	r20, 0x00	; 0
   189c4:	50 e0       	ldi	r21, 0x00	; 0
   189c6:	6e e5       	ldi	r22, 0x5E	; 94
   189c8:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   189ca:	80 e0       	ldi	r24, 0x00	; 0
   189cc:	96 dd       	rcall	.-1236   	; 0x184fa <print_var_P>
   189ce:	ea 85       	ldd	r30, Y+10	; 0x0a
   189d0:	fb 85       	ldd	r31, Y+11	; 0x0b
   189d2:	21 a9       	ldd	r18, Z+49	; 0x31
   189d4:	30 e0       	ldi	r19, 0x00	; 0
   189d6:	40 e0       	ldi	r20, 0x00	; 0
   189d8:	50 e0       	ldi	r21, 0x00	; 0
   189da:	6e e4       	ldi	r22, 0x4E	; 78
   189dc:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   189de:	80 e0       	ldi	r24, 0x00	; 0
   189e0:	8c dd       	rcall	.-1256   	; 0x184fa <print_var_P>
   189e2:	ea 85       	ldd	r30, Y+10	; 0x0a
   189e4:	fb 85       	ldd	r31, Y+11	; 0x0b
   189e6:	22 a9       	ldd	r18, Z+50	; 0x32
   189e8:	30 e0       	ldi	r19, 0x00	; 0
   189ea:	40 e0       	ldi	r20, 0x00	; 0
   189ec:	50 e0       	ldi	r21, 0x00	; 0
   189ee:	63 e4       	ldi	r22, 0x43	; 67
   189f0:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   189f2:	80 e0       	ldi	r24, 0x00	; 0
   189f4:	82 dd       	rcall	.-1276   	; 0x184fa <print_var_P>
   189f6:	ea 85       	ldd	r30, Y+10	; 0x0a
   189f8:	fb 85       	ldd	r31, Y+11	; 0x0b
   189fa:	23 a9       	ldd	r18, Z+51	; 0x33
   189fc:	34 a9       	ldd	r19, Z+52	; 0x34
   189fe:	40 e0       	ldi	r20, 0x00	; 0
   18a00:	50 e0       	ldi	r21, 0x00	; 0
   18a02:	68 e3       	ldi	r22, 0x38	; 56
   18a04:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   18a06:	80 e0       	ldi	r24, 0x00	; 0
   18a08:	78 dd       	rcall	.-1296   	; 0x184fa <print_var_P>
   18a0a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a0c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a0e:	25 a9       	ldd	r18, Z+53	; 0x35
   18a10:	36 a9       	ldd	r19, Z+54	; 0x36
   18a12:	40 e0       	ldi	r20, 0x00	; 0
   18a14:	50 e0       	ldi	r21, 0x00	; 0
   18a16:	60 e2       	ldi	r22, 0x20	; 32
   18a18:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   18a1a:	80 e0       	ldi	r24, 0x00	; 0
   18a1c:	6e dd       	rcall	.-1316   	; 0x184fa <print_var_P>
   18a1e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a20:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a22:	27 a9       	ldd	r18, Z+55	; 0x37
   18a24:	30 ad       	ldd	r19, Z+56	; 0x38
   18a26:	40 e0       	ldi	r20, 0x00	; 0
   18a28:	50 e0       	ldi	r21, 0x00	; 0
   18a2a:	6d e0       	ldi	r22, 0x0D	; 13
   18a2c:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   18a2e:	80 e0       	ldi	r24, 0x00	; 0
   18a30:	64 dd       	rcall	.-1336   	; 0x184fa <print_var_P>
   18a32:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a34:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a36:	21 ad       	ldd	r18, Z+57	; 0x39
   18a38:	32 ad       	ldd	r19, Z+58	; 0x3a
   18a3a:	40 e0       	ldi	r20, 0x00	; 0
   18a3c:	50 e0       	ldi	r21, 0x00	; 0
   18a3e:	61 e0       	ldi	r22, 0x01	; 1
   18a40:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   18a42:	80 e0       	ldi	r24, 0x00	; 0
   18a44:	5a dd       	rcall	.-1356   	; 0x184fa <print_var_P>
   18a46:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a48:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a4a:	23 ad       	ldd	r18, Z+59	; 0x3b
   18a4c:	30 e0       	ldi	r19, 0x00	; 0
   18a4e:	40 e0       	ldi	r20, 0x00	; 0
   18a50:	50 e0       	ldi	r21, 0x00	; 0
   18a52:	6e ee       	ldi	r22, 0xEE	; 238
   18a54:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18a56:	80 e0       	ldi	r24, 0x00	; 0
   18a58:	50 dd       	rcall	.-1376   	; 0x184fa <print_var_P>
   18a5a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a5c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a5e:	24 ad       	ldd	r18, Z+60	; 0x3c
   18a60:	30 e0       	ldi	r19, 0x00	; 0
   18a62:	40 e0       	ldi	r20, 0x00	; 0
   18a64:	50 e0       	ldi	r21, 0x00	; 0
   18a66:	60 ee       	ldi	r22, 0xE0	; 224
   18a68:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   18a6a:	80 e0       	ldi	r24, 0x00	; 0
   18a6c:	46 dd       	rcall	.-1396   	; 0x184fa <print_var_P>
   18a6e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a70:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a72:	25 ad       	ldd	r18, Z+61	; 0x3d
   18a74:	30 e0       	ldi	r19, 0x00	; 0
   18a76:	40 e0       	ldi	r20, 0x00	; 0
   18a78:	50 e0       	ldi	r21, 0x00	; 0
   18a7a:	6e ec       	ldi	r22, 0xCE	; 206
   18a7c:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  VOLUME\n");
   18a7e:	80 e0       	ldi	r24, 0x00	; 0
   18a80:	3c dd       	rcall	.-1416   	; 0x184fa <print_var_P>
   18a82:	84 ec       	ldi	r24, 0xC4	; 196
   18a84:	9a e2       	ldi	r25, 0x2A	; 42
   18a86:	1f 92       	push	r1
   18a88:	9f 93       	push	r25
   18a8a:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   18a8c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18a90:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a92:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a94:	fe 96       	adiw	r30, 0x3e	; 62
   18a96:	20 81       	ld	r18, Z
   18a98:	31 81       	ldd	r19, Z+1	; 0x01
   18a9a:	42 81       	ldd	r20, Z+2	; 0x02
   18a9c:	53 81       	ldd	r21, Z+3	; 0x03
   18a9e:	67 eb       	ldi	r22, 0xB7	; 183
   18aa0:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   18aa2:	80 e0       	ldi	r24, 0x00	; 0
   18aa4:	2a dd       	rcall	.-1452   	; 0x184fa <print_var_P>
   18aa6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18aa8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18aaa:	ee 5b       	subi	r30, 0xBE	; 190
   18aac:	ff 4f       	sbci	r31, 0xFF	; 255
   18aae:	20 81       	ld	r18, Z
   18ab0:	30 e0       	ldi	r19, 0x00	; 0
   18ab2:	40 e0       	ldi	r20, 0x00	; 0
   18ab4:	50 e0       	ldi	r21, 0x00	; 0
   18ab6:	6e ea       	ldi	r22, 0xAE	; 174
   18ab8:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   18aba:	80 e0       	ldi	r24, 0x00	; 0
   18abc:	1e dd       	rcall	.-1476   	; 0x184fa <print_var_P>
   18abe:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ac0:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ac2:	ed 5b       	subi	r30, 0xBD	; 189
   18ac4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ac6:	20 81       	ld	r18, Z
   18ac8:	31 81       	ldd	r19, Z+1	; 0x01
   18aca:	40 e0       	ldi	r20, 0x00	; 0
   18acc:	50 e0       	ldi	r21, 0x00	; 0
   18ace:	63 ea       	ldi	r22, 0xA3	; 163
   18ad0:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   18ad2:	80 e0       	ldi	r24, 0x00	; 0
   18ad4:	12 dd       	rcall	.-1500   	; 0x184fa <print_var_P>
   18ad6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ad8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ada:	eb 5b       	subi	r30, 0xBB	; 187
   18adc:	ff 4f       	sbci	r31, 0xFF	; 255
   18ade:	20 81       	ld	r18, Z
   18ae0:	31 81       	ldd	r19, Z+1	; 0x01
   18ae2:	42 81       	ldd	r20, Z+2	; 0x02
   18ae4:	53 81       	ldd	r21, Z+3	; 0x03
   18ae6:	62 e9       	ldi	r22, 0x92	; 146
   18ae8:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   18aea:	80 e0       	ldi	r24, 0x00	; 0
   18aec:	06 dd       	rcall	.-1524   	; 0x184fa <print_var_P>
   18aee:	2a 85       	ldd	r18, Y+10	; 0x0a
   18af0:	3b 85       	ldd	r19, Y+11	; 0x0b
   18af2:	27 5b       	subi	r18, 0xB7	; 183
   18af4:	3f 4f       	sbci	r19, 0xFF	; 255
   18af6:	f9 01       	movw	r30, r18
   18af8:	20 81       	ld	r18, Z
   18afa:	30 e0       	ldi	r19, 0x00	; 0
   18afc:	40 e0       	ldi	r20, 0x00	; 0
   18afe:	50 e0       	ldi	r21, 0x00	; 0
   18b00:	67 e8       	ldi	r22, 0x87	; 135
   18b02:	7a e2       	ldi	r23, 0x2A	; 42
   18b04:	80 e0       	ldi	r24, 0x00	; 0
   18b06:	f9 dc       	rcall	.-1550   	; 0x184fa <print_var_P>
   18b08:	0f b6       	in	r0, 0x3f	; 63
   18b0a:	f8 94       	cli
   18b0c:	de bf       	out	0x3e, r29	; 62
   18b0e:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18b10:	cd bf       	out	0x3d, r28	; 61
   18b12:	f8 01       	movw	r30, r16
   18b14:	80 81       	ld	r24, Z
   18b16:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18b18:	09 f0       	breq	.+2      	; 0x18b1c <display_Config+0x2fc>
   18b1a:	76 c0       	rjmp	.+236    	; 0x18c08 <display_Config+0x3e8>
   18b1c:	23 81       	ldd	r18, Z+3	; 0x03
   18b1e:	34 81       	ldd	r19, Z+4	; 0x04

            printf("AMIGO\n");
   18b20:	3b 87       	std	Y+11, r19	; 0x0b
   18b22:	2a 87       	std	Y+10, r18	; 0x0a
   18b24:	1f 92       	push	r1
   18b26:	3f 92       	push	r3
            printf("  HEADER\n");
   18b28:	2f 92       	push	r2
   18b2a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18b2e:	1f 92       	push	r1
   18b30:	df 92       	push	r13
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18b32:	cf 92       	push	r12
   18b34:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18b38:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b3a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b3c:	20 81       	ld	r18, Z
   18b3e:	30 e0       	ldi	r19, 0x00	; 0
   18b40:	40 e0       	ldi	r20, 0x00	; 0
   18b42:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18b44:	b5 01       	movw	r22, r10
   18b46:	80 e0       	ldi	r24, 0x00	; 0
   18b48:	d8 dc       	rcall	.-1616   	; 0x184fa <print_var_P>
   18b4a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b4c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b4e:	21 81       	ldd	r18, Z+1	; 0x01
   18b50:	30 e0       	ldi	r19, 0x00	; 0
   18b52:	40 e0       	ldi	r20, 0x00	; 0
   18b54:	50 e0       	ldi	r21, 0x00	; 0
   18b56:	6a e6       	ldi	r22, 0x6A	; 106
                print_str("FILE", AMIGOp->HEADER.NAME);
   18b58:	7a e2       	ldi	r23, 0x2A	; 42
   18b5a:	80 e0       	ldi	r24, 0x00	; 0
   18b5c:	ce dc       	rcall	.-1636   	; 0x184fa <print_var_P>
   18b5e:	4a 85       	ldd	r20, Y+10	; 0x0a
   18b60:	5b 85       	ldd	r21, Y+11	; 0x0b
   18b62:	4e 5f       	subi	r20, 0xFE	; 254
   18b64:	5f 4f       	sbci	r21, 0xFF	; 255
   18b66:	65 e6       	ldi	r22, 0x65	; 101
   18b68:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   18b6a:	80 e0       	ldi	r24, 0x00	; 0
   18b6c:	17 dd       	rcall	.-1490   	; 0x1859c <print_str_P>
   18b6e:	8b e5       	ldi	r24, 0x5B	; 91
   18b70:	9a e2       	ldi	r25, 0x2A	; 42
   18b72:	1f 92       	push	r1
   18b74:	9f 93       	push	r25
   18b76:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18b78:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18b7c:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b7e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b80:	23 a1       	ldd	r18, Z+35	; 0x23
   18b82:	34 a1       	ldd	r19, Z+36	; 0x24
   18b84:	40 e0       	ldi	r20, 0x00	; 0
   18b86:	50 e0       	ldi	r21, 0x00	; 0
   18b88:	68 e5       	ldi	r22, 0x58	; 88
   18b8a:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  GEOMETRY\n");
   18b8c:	80 e0       	ldi	r24, 0x00	; 0
   18b8e:	b5 dc       	rcall	.-1686   	; 0x184fa <print_var_P>
   18b90:	8c e4       	ldi	r24, 0x4C	; 76
   18b92:	9a e2       	ldi	r25, 0x2A	; 42
   18b94:	1f 92       	push	r1
   18b96:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   18b98:	8f 93       	push	r24
   18b9a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18b9e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ba0:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ba2:	25 a1       	ldd	r18, Z+37	; 0x25
   18ba4:	36 a1       	ldd	r19, Z+38	; 0x26
   18ba6:	03 2e       	mov	r0, r19
   18ba8:	00 0c       	add	r0, r0
   18baa:	44 0b       	sbc	r20, r20
   18bac:	55 0b       	sbc	r21, r21
   18bae:	6b e3       	ldi	r22, 0x3B	; 59
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   18bb0:	7a e2       	ldi	r23, 0x2A	; 42
   18bb2:	80 e0       	ldi	r24, 0x00	; 0
   18bb4:	a2 dc       	rcall	.-1724   	; 0x184fa <print_var_P>
   18bb6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bb8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bba:	27 a1       	ldd	r18, Z+39	; 0x27
   18bbc:	30 a5       	ldd	r19, Z+40	; 0x28
   18bbe:	03 2e       	mov	r0, r19
   18bc0:	00 0c       	add	r0, r0
   18bc2:	44 0b       	sbc	r20, r20
   18bc4:	55 0b       	sbc	r21, r21
   18bc6:	69 e2       	ldi	r22, 0x29	; 41
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   18bc8:	7a e2       	ldi	r23, 0x2A	; 42
   18bca:	80 e0       	ldi	r24, 0x00	; 0
   18bcc:	96 dc       	rcall	.-1748   	; 0x184fa <print_var_P>
   18bce:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bd0:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bd2:	21 a5       	ldd	r18, Z+41	; 0x29
   18bd4:	32 a5       	ldd	r19, Z+42	; 0x2a
   18bd6:	03 2e       	mov	r0, r19
   18bd8:	00 0c       	add	r0, r0
   18bda:	44 0b       	sbc	r20, r20
   18bdc:	55 0b       	sbc	r21, r21
   18bde:	63 e2       	ldi	r22, 0x23	; 35
   18be0:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   18be2:	80 e0       	ldi	r24, 0x00	; 0
   18be4:	8a dc       	rcall	.-1772   	; 0x184fa <print_var_P>
   18be6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18be8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bea:	23 a5       	ldd	r18, Z+43	; 0x2b
   18bec:	34 a5       	ldd	r19, Z+44	; 0x2c
   18bee:	03 2e       	mov	r0, r19
   18bf0:	00 0c       	add	r0, r0
   18bf2:	44 0b       	sbc	r20, r20
   18bf4:	55 0b       	sbc	r21, r21
   18bf6:	69 e1       	ldi	r22, 0x19	; 25
   18bf8:	7a e2       	ldi	r23, 0x2A	; 42
   18bfa:	80 e0       	ldi	r24, 0x00	; 0
   18bfc:	7e dc       	rcall	.-1796   	; 0x184fa <print_var_P>
   18bfe:	0f b6       	in	r0, 0x3f	; 63
   18c00:	f8 94       	cli
   18c02:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   18c04:	0f be       	out	0x3f, r0	; 63
   18c06:	cd bf       	out	0x3d, r28	; 61
   18c08:	f8 01       	movw	r30, r16
   18c0a:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   18c0c:	83 30       	cpi	r24, 0x03	; 3
   18c0e:	09 f5       	brne	.+66     	; 0x18c52 <display_Config+0x432>
   18c10:	23 81       	ldd	r18, Z+3	; 0x03
   18c12:	34 81       	ldd	r19, Z+4	; 0x04

            printf("PRINTER\n");
   18c14:	3b 87       	std	Y+11, r19	; 0x0b
   18c16:	2a 87       	std	Y+10, r18	; 0x0a
   18c18:	1f 92       	push	r1
   18c1a:	3d 81       	ldd	r19, Y+5	; 0x05
   18c1c:	3f 93       	push	r19
   18c1e:	4c 81       	ldd	r20, Y+4	; 0x04
   18c20:	4f 93       	push	r20
            printf("  CONFIG\n");
   18c22:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18c26:	1f 92       	push	r1
   18c28:	88 85       	ldd	r24, Y+8	; 0x08
   18c2a:	8f 93       	push	r24
   18c2c:	9f 81       	ldd	r25, Y+7	; 0x07
   18c2e:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18c30:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18c34:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c36:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c38:	20 81       	ld	r18, Z
   18c3a:	30 e0       	ldi	r19, 0x00	; 0
   18c3c:	40 e0       	ldi	r20, 0x00	; 0
   18c3e:	50 e0       	ldi	r21, 0x00	; 0
   18c40:	88 2d       	mov	r24, r8
   18c42:	b3 01       	movw	r22, r6
   18c44:	5a dc       	rcall	.-1868   	; 0x184fa <print_var_P>
   18c46:	0f 90       	pop	r0
   18c48:	0f 90       	pop	r0
   18c4a:	0f 90       	pop	r0
   18c4c:	0f 90       	pop	r0
   18c4e:	0f 90       	pop	r0
        }
        printf("\n");
   18c50:	0f 90       	pop	r0
   18c52:	1f 92       	push	r1
   18c54:	fa 81       	ldd	r31, Y+2	; 0x02
   18c56:	ff 93       	push	r31
   18c58:	29 81       	ldd	r18, Y+1	; 0x01
   18c5a:	2f 93       	push	r18
   18c5c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   18c60:	0f 90       	pop	r0
   18c62:	0f 90       	pop	r0
   18c64:	0f 90       	pop	r0
   18c66:	09 5f       	subi	r16, 0xF9	; 249
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18c68:	1f 4f       	sbci	r17, 0xFF	; 255
   18c6a:	3f e1       	ldi	r19, 0x1F	; 31
   18c6c:	0f 32       	cpi	r16, 0x2F	; 47
   18c6e:	13 07       	cpc	r17, r19
   18c70:	09 f0       	breq	.+2      	; 0x18c74 <display_Config+0x454>
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18c72:	1c ce       	rjmp	.-968    	; 0x188ac <display_Config+0x8c>
   18c74:	87 ef       	ldi	r24, 0xF7	; 247
   18c76:	99 e2       	ldi	r25, 0x29	; 41
   18c78:	1f 92       	push	r1
   18c7a:	9f 93       	push	r25
   18c7c:	8f 93       	push	r24
   18c7e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("\n");
   18c82:	85 ef       	ldi	r24, 0xF5	; 245
   18c84:	99 e2       	ldi	r25, 0x29	; 41
   18c86:	1f 92       	push	r1
   18c88:	9f 93       	push	r25
   18c8a:	8f 93       	push	r24
   18c8c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("\n");
   18c90:	83 ef       	ldi	r24, 0xF3	; 243
   18c92:	99 e2       	ldi	r25, 0x29	; 41
   18c94:	1f 92       	push	r1
   18c96:	9f 93       	push	r25
   18c98:	8f 93       	push	r24
   18c9a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   18c9e:	0f b6       	in	r0, 0x3f	; 63
   18ca0:	f8 94       	cli
   18ca2:	de bf       	out	0x3e, r29	; 62
   18ca4:	0f be       	out	0x3f, r0	; 63
   18ca6:	cd bf       	out	0x3d, r28	; 61
   18ca8:	2b 96       	adiw	r28, 0x0b	; 11
   18caa:	0f b6       	in	r0, 0x3f	; 63
   18cac:	f8 94       	cli
   18cae:	de bf       	out	0x3e, r29	; 62
   18cb0:	0f be       	out	0x3f, r0	; 63
   18cb2:	cd bf       	out	0x3d, r28	; 61
   18cb4:	df 91       	pop	r29
   18cb6:	cf 91       	pop	r28
   18cb8:	1f 91       	pop	r17
   18cba:	0f 91       	pop	r16
   18cbc:	ef 90       	pop	r14
   18cbe:	df 90       	pop	r13
   18cc0:	cf 90       	pop	r12
   18cc2:	bf 90       	pop	r11
   18cc4:	af 90       	pop	r10
   18cc6:	8f 90       	pop	r8
   18cc8:	7f 90       	pop	r7
   18cca:	6f 90       	pop	r6
   18ccc:	4f 90       	pop	r4
   18cce:	3f 90       	pop	r3
   18cd0:	2f 90       	pop	r2
   18cd2:	08 95       	ret

00018cd4 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   18cd4:	2f 92       	push	r2
   18cd6:	3f 92       	push	r3
   18cd8:	4f 92       	push	r4
   18cda:	5f 92       	push	r5
   18cdc:	6f 92       	push	r6
   18cde:	7f 92       	push	r7
   18ce0:	8f 92       	push	r8
   18ce2:	af 92       	push	r10
   18ce4:	bf 92       	push	r11
   18ce6:	cf 92       	push	r12
   18ce8:	df 92       	push	r13
   18cea:	ef 92       	push	r14
   18cec:	ff 92       	push	r15
   18cee:	0f 93       	push	r16
   18cf0:	1f 93       	push	r17
   18cf2:	cf 93       	push	r28
   18cf4:	df 93       	push	r29
   18cf6:	cd b7       	in	r28, 0x3d	; 61
   18cf8:	de b7       	in	r29, 0x3e	; 62
   18cfa:	cd 55       	subi	r28, 0x5D	; 93
   18cfc:	d1 09       	sbc	r29, r1
   18cfe:	0f b6       	in	r0, 0x3f	; 63
   18d00:	f8 94       	cli
   18d02:	de bf       	out	0x3e, r29	; 62
   18d04:	0f be       	out	0x3f, r0	; 63
   18d06:	cd bf       	out	0x3d, r28	; 61
   18d08:	87 ef       	ldi	r24, 0xF7	; 247
   18d0a:	a8 2e       	mov	r10, r24
   18d0c:	8e e1       	ldi	r24, 0x1E	; 30
   18d0e:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   18d10:	21 e0       	ldi	r18, 0x01	; 1
   18d12:	30 e0       	ldi	r19, 0x00	; 0
   18d14:	65 96       	adiw	r28, 0x15	; 21
   18d16:	3f af       	std	Y+63, r19	; 0x3f
   18d18:	2e af       	std	Y+62, r18	; 0x3e
   18d1a:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   18d1c:	81 e0       	ldi	r24, 0x01	; 1
   18d1e:	90 e0       	ldi	r25, 0x00	; 0
   18d20:	63 96       	adiw	r28, 0x13	; 19
   18d22:	9f af       	std	Y+63, r25	; 0x3f
   18d24:	8e af       	std	Y+62, r24	; 0x3e
   18d26:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   18d28:	8f e9       	ldi	r24, 0x9F	; 159
   18d2a:	99 e2       	ldi	r25, 0x29	; 41
   18d2c:	9c 01       	movw	r18, r24
   18d2e:	40 e0       	ldi	r20, 0x00	; 0
   18d30:	68 96       	adiw	r28, 0x18	; 24
   18d32:	2d af       	std	Y+61, r18	; 0x3d
   18d34:	3e af       	std	Y+62, r19	; 0x3e
   18d36:	4f af       	std	Y+63, r20	; 0x3f
   18d38:	68 97       	sbiw	r28, 0x18	; 24
   18d3a:	2e 01       	movw	r4, r28
   18d3c:	31 e3       	ldi	r19, 0x31	; 49
   18d3e:	43 0e       	add	r4, r19
   18d40:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18d42:	87 ea       	ldi	r24, 0xA7	; 167
   18d44:	99 e2       	ldi	r25, 0x29	; 41
   18d46:	9c 01       	movw	r18, r24
   18d48:	40 e0       	ldi	r20, 0x00	; 0
   18d4a:	6b 96       	adiw	r28, 0x1b	; 27
   18d4c:	2d af       	std	Y+61, r18	; 0x3d
   18d4e:	3e af       	std	Y+62, r19	; 0x3e
   18d50:	4f af       	std	Y+63, r20	; 0x3f
   18d52:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   18d54:	89 ec       	ldi	r24, 0xC9	; 201
   18d56:	99 e2       	ldi	r25, 0x29	; 41
   18d58:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18d5a:	81 ed       	ldi	r24, 0xD1	; 209
   18d5c:	99 e2       	ldi	r25, 0x29	; 41
   18d5e:	9c 01       	movw	r18, r24
   18d60:	40 e0       	ldi	r20, 0x00	; 0
   18d62:	6e 96       	adiw	r28, 0x1e	; 30
   18d64:	2d af       	std	Y+61, r18	; 0x3d
   18d66:	3e af       	std	Y+62, r19	; 0x3e
   18d68:	4f af       	std	Y+63, r20	; 0x3f
   18d6a:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18d6c:	f5 01       	movw	r30, r10
   18d6e:	80 81       	ld	r24, Z
   18d70:	88 23       	and	r24, r24
   18d72:	09 f4       	brne	.+2      	; 0x18d76 <format_drives+0xa2>
   18d74:	bc c0       	rjmp	.+376    	; 0x18eee <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18d76:	82 30       	cpi	r24, 0x02	; 2
   18d78:	09 f0       	breq	.+2      	; 0x18d7c <format_drives+0xa8>
   18d7a:	4c c0       	rjmp	.+152    	; 0x18e14 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18d7c:	03 81       	ldd	r16, Z+3	; 0x03
   18d7e:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   18d80:	18 01       	movw	r2, r16
   18d82:	f2 e0       	ldi	r31, 0x02	; 2
   18d84:	2f 0e       	add	r2, r31
   18d86:	31 1c       	adc	r3, r1
   18d88:	be 01       	movw	r22, r28
   18d8a:	6f 5f       	subi	r22, 0xFF	; 255
   18d8c:	7f 4f       	sbci	r23, 0xFF	; 255
   18d8e:	c1 01       	movw	r24, r2
   18d90:	0e 94 c7 7e 	call	0xfd8e	; 0xfd8e <stat>
   18d94:	01 96       	adiw	r24, 0x01	; 1
   18d96:	a1 f5       	brne	.+104    	; 0x18e00 <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   18d98:	f8 01       	movw	r30, r16
   18d9a:	87 a5       	ldd	r24, Z+47	; 0x2f
   18d9c:	90 a9       	ldd	r25, Z+48	; 0x30
   18d9e:	81 15       	cp	r24, r1
   18da0:	91 40       	sbci	r25, 0x01	; 1
   18da2:	49 f0       	breq	.+18     	; 0x18db6 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   18da4:	1f 92       	push	r1
   18da6:	6d 96       	adiw	r28, 0x1d	; 29
   18da8:	2f ad       	ldd	r18, Y+63	; 0x3f
   18daa:	6d 97       	sbiw	r28, 0x1d	; 29
   18dac:	2f 93       	push	r18
   18dae:	6c 96       	adiw	r28, 0x1c	; 28
   18db0:	3f ad       	ldd	r19, Y+63	; 0x3f
   18db2:	6c 97       	sbiw	r28, 0x1c	; 28
   18db4:	51 c0       	rjmp	.+162    	; 0x18e58 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   18db6:	f8 01       	movw	r30, r16
   18db8:	eb 5b       	subi	r30, 0xBB	; 187
   18dba:	ff 4f       	sbci	r31, 0xFF	; 255
   18dbc:	c0 80       	ld	r12, Z
   18dbe:	d1 80       	ldd	r13, Z+1	; 0x01
   18dc0:	e2 80       	ldd	r14, Z+2	; 0x02
   18dc2:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   18dc4:	63 96       	adiw	r28, 0x13	; 19
   18dc6:	4f ad       	ldd	r20, Y+63	; 0x3f
   18dc8:	63 97       	sbiw	r28, 0x13	; 19
   18dca:	4f 93       	push	r20
   18dcc:	62 96       	adiw	r28, 0x12	; 18
   18dce:	8f ad       	ldd	r24, Y+63	; 0x3f
   18dd0:	62 97       	sbiw	r28, 0x12	; 18
   18dd2:	8f 93       	push	r24
   18dd4:	1f 92       	push	r1
   18dd6:	7f 92       	push	r7
   18dd8:	6f 92       	push	r6
   18dda:	5f 92       	push	r5
   18ddc:	4f 92       	push	r4
   18dde:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   18de2:	87 01       	movw	r16, r14
   18de4:	76 01       	movw	r14, r12
   18de6:	20 e8       	ldi	r18, 0x80	; 128
   18de8:	30 e0       	ldi	r19, 0x00	; 0
   18dea:	40 e0       	ldi	r20, 0x00	; 0
   18dec:	50 e0       	ldi	r21, 0x00	; 0
   18dee:	b2 01       	movw	r22, r4
   18df0:	c1 01       	movw	r24, r2
   18df2:	0e 94 b3 e5 	call	0x1cb66	; 0x1cb66 <lif_create_image>
   18df6:	0f b6       	in	r0, 0x3f	; 63
   18df8:	f8 94       	cli
   18dfa:	de bf       	out	0x3e, r29	; 62
   18dfc:	0f be       	out	0x3f, r0	; 63
   18dfe:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   18e00:	63 96       	adiw	r28, 0x13	; 19
   18e02:	2e ad       	ldd	r18, Y+62	; 0x3e
   18e04:	3f ad       	ldd	r19, Y+63	; 0x3f
   18e06:	63 97       	sbiw	r28, 0x13	; 19
   18e08:	2f 5f       	subi	r18, 0xFF	; 255
   18e0a:	3f 4f       	sbci	r19, 0xFF	; 255
   18e0c:	63 96       	adiw	r28, 0x13	; 19
   18e0e:	3f af       	std	Y+63, r19	; 0x3f
   18e10:	2e af       	std	Y+62, r18	; 0x3e
   18e12:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18e14:	f5 01       	movw	r30, r10
   18e16:	80 81       	ld	r24, Z
   18e18:	81 30       	cpi	r24, 0x01	; 1
   18e1a:	09 f0       	breq	.+2      	; 0x18e1e <format_drives+0x14a>
   18e1c:	68 c0       	rjmp	.+208    	; 0x18eee <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18e1e:	03 81       	ldd	r16, Z+3	; 0x03
   18e20:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   18e22:	68 01       	movw	r12, r16
   18e24:	f2 e0       	ldi	r31, 0x02	; 2
   18e26:	cf 0e       	add	r12, r31
   18e28:	d1 1c       	adc	r13, r1
   18e2a:	be 01       	movw	r22, r28
   18e2c:	6f 5f       	subi	r22, 0xFF	; 255
   18e2e:	7f 4f       	sbci	r23, 0xFF	; 255
   18e30:	c6 01       	movw	r24, r12
   18e32:	0e 94 c7 7e 	call	0xfd8e	; 0xfd8e <stat>
   18e36:	01 96       	adiw	r24, 0x01	; 1
   18e38:	09 f0       	breq	.+2      	; 0x18e3c <format_drives+0x168>
   18e3a:	50 c0       	rjmp	.+160    	; 0x18edc <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   18e3c:	f8 01       	movw	r30, r16
   18e3e:	85 a1       	ldd	r24, Z+37	; 0x25
   18e40:	96 a1       	ldd	r25, Z+38	; 0x26
   18e42:	81 15       	cp	r24, r1
   18e44:	91 40       	sbci	r25, 0x01	; 1
   18e46:	79 f0       	breq	.+30     	; 0x18e66 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   18e48:	1f 92       	push	r1
   18e4a:	6a 96       	adiw	r28, 0x1a	; 26
   18e4c:	2f ad       	ldd	r18, Y+63	; 0x3f
   18e4e:	6a 97       	sbiw	r28, 0x1a	; 26
   18e50:	2f 93       	push	r18
   18e52:	69 96       	adiw	r28, 0x19	; 25
   18e54:	3f ad       	ldd	r19, Y+63	; 0x3f
   18e56:	69 97       	sbiw	r28, 0x19	; 25
   18e58:	3f 93       	push	r19
   18e5a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                    continue;
   18e5e:	0f 90       	pop	r0
   18e60:	0f 90       	pop	r0
   18e62:	0f 90       	pop	r0
   18e64:	44 c0       	rjmp	.+136    	; 0x18eee <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   18e66:	f8 01       	movw	r30, r16
   18e68:	47 a1       	ldd	r20, Z+39	; 0x27
   18e6a:	50 a5       	ldd	r21, Z+40	; 0x28
   18e6c:	81 a5       	ldd	r24, Z+41	; 0x29
   18e6e:	92 a5       	ldd	r25, Z+42	; 0x2a
   18e70:	48 9f       	mul	r20, r24
   18e72:	90 01       	movw	r18, r0
   18e74:	49 9f       	mul	r20, r25
   18e76:	30 0d       	add	r19, r0
   18e78:	58 9f       	mul	r21, r24
   18e7a:	30 0d       	add	r19, r0
   18e7c:	11 24       	eor	r1, r1
   18e7e:	83 a5       	ldd	r24, Z+43	; 0x2b
   18e80:	94 a5       	ldd	r25, Z+44	; 0x2c
   18e82:	28 9f       	mul	r18, r24
   18e84:	70 01       	movw	r14, r0
   18e86:	29 9f       	mul	r18, r25
   18e88:	f0 0c       	add	r15, r0
   18e8a:	38 9f       	mul	r19, r24
   18e8c:	f0 0c       	add	r15, r0
   18e8e:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   18e90:	65 96       	adiw	r28, 0x15	; 21
   18e92:	ff ad       	ldd	r31, Y+63	; 0x3f
   18e94:	65 97       	sbiw	r28, 0x15	; 21
   18e96:	ff 93       	push	r31
   18e98:	64 96       	adiw	r28, 0x14	; 20
   18e9a:	2f ad       	ldd	r18, Y+63	; 0x3f
   18e9c:	64 97       	sbiw	r28, 0x14	; 20
   18e9e:	2f 93       	push	r18
   18ea0:	1f 92       	push	r1
   18ea2:	67 96       	adiw	r28, 0x17	; 23
   18ea4:	3f ad       	ldd	r19, Y+63	; 0x3f
   18ea6:	67 97       	sbiw	r28, 0x17	; 23
   18ea8:	3f 93       	push	r19
   18eaa:	66 96       	adiw	r28, 0x16	; 22
   18eac:	4f ad       	ldd	r20, Y+63	; 0x3f
   18eae:	66 97       	sbiw	r28, 0x16	; 22
   18eb0:	4f 93       	push	r20
   18eb2:	5f 92       	push	r5
   18eb4:	4f 92       	push	r4
   18eb6:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   18eba:	0f 2c       	mov	r0, r15
   18ebc:	00 0c       	add	r0, r0
   18ebe:	00 0b       	sbc	r16, r16
   18ec0:	11 0b       	sbc	r17, r17
   18ec2:	2f e0       	ldi	r18, 0x0F	; 15
   18ec4:	30 e0       	ldi	r19, 0x00	; 0
   18ec6:	40 e0       	ldi	r20, 0x00	; 0
   18ec8:	50 e0       	ldi	r21, 0x00	; 0
   18eca:	b2 01       	movw	r22, r4
   18ecc:	c6 01       	movw	r24, r12
   18ece:	0e 94 b3 e5 	call	0x1cb66	; 0x1cb66 <lif_create_image>
   18ed2:	0f b6       	in	r0, 0x3f	; 63
   18ed4:	f8 94       	cli
   18ed6:	de bf       	out	0x3e, r29	; 62
   18ed8:	0f be       	out	0x3f, r0	; 63
   18eda:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   18edc:	65 96       	adiw	r28, 0x15	; 21
   18ede:	ee ad       	ldd	r30, Y+62	; 0x3e
   18ee0:	ff ad       	ldd	r31, Y+63	; 0x3f
   18ee2:	65 97       	sbiw	r28, 0x15	; 21
   18ee4:	31 96       	adiw	r30, 0x01	; 1
   18ee6:	65 96       	adiw	r28, 0x15	; 21
   18ee8:	ff af       	std	Y+63, r31	; 0x3f
   18eea:	ee af       	std	Y+62, r30	; 0x3e
   18eec:	65 97       	sbiw	r28, 0x15	; 21
   18eee:	f7 e0       	ldi	r31, 0x07	; 7
   18ef0:	af 0e       	add	r10, r31
   18ef2:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   18ef4:	2f e2       	ldi	r18, 0x2F	; 47
   18ef6:	3f e1       	ldi	r19, 0x1F	; 31
   18ef8:	2a 15       	cp	r18, r10
   18efa:	3b 05       	cpc	r19, r11
   18efc:	09 f0       	breq	.+2      	; 0x18f00 <format_drives+0x22c>
   18efe:	36 cf       	rjmp	.-404    	; 0x18d6c <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   18f00:	8d e9       	ldi	r24, 0x9D	; 157
   18f02:	99 e2       	ldi	r25, 0x29	; 41
   18f04:	1f 92       	push	r1
   18f06:	9f 93       	push	r25
   18f08:	8f 93       	push	r24
   18f0a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   18f0e:	0f 90       	pop	r0
   18f10:	0f 90       	pop	r0
   18f12:	0f 90       	pop	r0
   18f14:	c3 5a       	subi	r28, 0xA3	; 163
   18f16:	df 4f       	sbci	r29, 0xFF	; 255
   18f18:	0f b6       	in	r0, 0x3f	; 63
   18f1a:	f8 94       	cli
   18f1c:	de bf       	out	0x3e, r29	; 62
   18f1e:	0f be       	out	0x3f, r0	; 63
   18f20:	cd bf       	out	0x3d, r28	; 61
   18f22:	df 91       	pop	r29
   18f24:	cf 91       	pop	r28
   18f26:	1f 91       	pop	r17
   18f28:	0f 91       	pop	r16
   18f2a:	ff 90       	pop	r15
   18f2c:	ef 90       	pop	r14
   18f2e:	df 90       	pop	r13
   18f30:	cf 90       	pop	r12
   18f32:	bf 90       	pop	r11
   18f34:	af 90       	pop	r10
   18f36:	8f 90       	pop	r8
   18f38:	7f 90       	pop	r7
   18f3a:	6f 90       	pop	r6
   18f3c:	5f 90       	pop	r5
   18f3e:	4f 90       	pop	r4
   18f40:	3f 90       	pop	r3
   18f42:	2f 90       	pop	r2
   18f44:	08 95       	ret

00018f46 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   18f46:	a2 e0       	ldi	r26, 0x02	; 2
   18f48:	b0 e0       	ldi	r27, 0x00	; 0
   18f4a:	e9 ea       	ldi	r30, 0xA9	; 169
   18f4c:	f7 ec       	ldi	r31, 0xC7	; 199
   18f4e:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   18f52:	e8 2e       	mov	r14, r24
   18f54:	f6 2e       	mov	r15, r22
   18f56:	6a 01       	movw	r12, r20
   18f58:	89 01       	movw	r16, r18
    uint16_t status = 0;
   18f5a:	1a 82       	std	Y+2, r1	; 0x02
   18f5c:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   18f5e:	23 2b       	or	r18, r19
   18f60:	41 f4       	brne	.+16     	; 0x18f72 <controller_send_str+0x2c>
        len = strlen((char *)str);
   18f62:	fa 01       	movw	r30, r20
   18f64:	01 90       	ld	r0, Z+
   18f66:	00 20       	and	r0, r0
   18f68:	e9 f7       	brne	.-6      	; 0x18f64 <controller_send_str+0x1e>
   18f6a:	31 97       	sbiw	r30, 0x01	; 1
   18f6c:	8f 01       	movw	r16, r30
   18f6e:	04 1b       	sub	r16, r20
   18f70:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18f72:	8f e5       	ldi	r24, 0x5F	; 95
   18f74:	94 e0       	ldi	r25, 0x04	; 4
   18f76:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18f7a:	8f e3       	ldi	r24, 0x3F	; 63
   18f7c:	94 e0       	ldi	r25, 0x04	; 4
   18f7e:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   18f82:	8e 2d       	mov	r24, r14
   18f84:	80 64       	ori	r24, 0x40	; 64
   18f86:	90 e0       	ldi	r25, 0x00	; 0
   18f88:	94 60       	ori	r25, 0x04	; 4
   18f8a:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   18f8e:	8f 2d       	mov	r24, r15
   18f90:	80 62       	ori	r24, 0x20	; 32
   18f92:	90 e0       	ldi	r25, 0x00	; 0
   18f94:	94 60       	ori	r25, 0x04	; 4
   18f96:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>

    status = EOI_FLAG;
   18f9a:	80 e0       	ldi	r24, 0x00	; 0
   18f9c:	91 e0       	ldi	r25, 0x01	; 1
   18f9e:	9a 83       	std	Y+2, r25	; 0x02
   18fa0:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   18fa2:	ae 01       	movw	r20, r28
   18fa4:	4f 5f       	subi	r20, 0xFF	; 255
   18fa6:	5f 4f       	sbci	r21, 0xFF	; 255
   18fa8:	b8 01       	movw	r22, r16
   18faa:	c6 01       	movw	r24, r12
   18fac:	0e 94 3f 93 	call	0x1267e	; 0x1267e <gpib_write_str>
   18fb0:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18fb2:	8f e5       	ldi	r24, 0x5F	; 95
   18fb4:	94 e0       	ldi	r25, 0x04	; 4
   18fb6:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18fba:	8f e3       	ldi	r24, 0x3F	; 63
   18fbc:	94 e0       	ldi	r25, 0x04	; 4
   18fbe:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    return(size);
}
   18fc2:	c8 01       	movw	r24, r16
   18fc4:	22 96       	adiw	r28, 0x02	; 2
   18fc6:	e8 e0       	ldi	r30, 0x08	; 8
   18fc8:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00018fcc <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   18fcc:	a2 e0       	ldi	r26, 0x02	; 2
   18fce:	b0 e0       	ldi	r27, 0x00	; 0
   18fd0:	ec ee       	ldi	r30, 0xEC	; 236
   18fd2:	f7 ec       	ldi	r31, 0xC7	; 199
   18fd4:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   18fd8:	c8 2e       	mov	r12, r24
   18fda:	d6 2e       	mov	r13, r22
   18fdc:	7a 01       	movw	r14, r20
   18fde:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18fe0:	8f e5       	ldi	r24, 0x5F	; 95
   18fe2:	94 e0       	ldi	r25, 0x04	; 4
   18fe4:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18fe8:	8f e3       	ldi	r24, 0x3F	; 63
   18fea:	94 e0       	ldi	r25, 0x04	; 4
   18fec:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18ff0:	8c 2d       	mov	r24, r12
   18ff2:	80 64       	ori	r24, 0x40	; 64
   18ff4:	90 e0       	ldi	r25, 0x00	; 0
   18ff6:	94 60       	ori	r25, 0x04	; 4
   18ff8:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18ffc:	8d 2d       	mov	r24, r13
   18ffe:	80 62       	ori	r24, 0x20	; 32
   19000:	90 e0       	ldi	r25, 0x00	; 0
   19002:	94 60       	ori	r25, 0x04	; 4
   19004:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>

    status = EOI_FLAG;
   19008:	80 e0       	ldi	r24, 0x00	; 0
   1900a:	91 e0       	ldi	r25, 0x01	; 1
   1900c:	9a 83       	std	Y+2, r25	; 0x02
   1900e:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   19010:	ae 01       	movw	r20, r28
   19012:	4f 5f       	subi	r20, 0xFF	; 255
   19014:	5f 4f       	sbci	r21, 0xFF	; 255
   19016:	b8 01       	movw	r22, r16
   19018:	c7 01       	movw	r24, r14
   1901a:	0e 94 91 92 	call	0x12522	; 0x12522 <gpib_read_str>
   1901e:	6c 01       	movw	r12, r24
    if(size > 0)
   19020:	18 16       	cp	r1, r24
   19022:	19 06       	cpc	r1, r25
   19024:	64 f4       	brge	.+24     	; 0x1903e <controller_read_str+0x72>
    {
        if(size < len)
   19026:	80 17       	cp	r24, r16
   19028:	91 07       	cpc	r25, r17
   1902a:	24 f4       	brge	.+8      	; 0x19034 <controller_read_str+0x68>
            str[size] = 0;
   1902c:	f7 01       	movw	r30, r14
   1902e:	e8 0f       	add	r30, r24
   19030:	f9 1f       	adc	r31, r25
   19032:	04 c0       	rjmp	.+8      	; 0x1903c <controller_read_str+0x70>
        else
            str[len-1] = 0;
   19034:	0e 0d       	add	r16, r14
   19036:	1f 1d       	adc	r17, r15
   19038:	f8 01       	movw	r30, r16
   1903a:	31 97       	sbiw	r30, 0x01	; 1
   1903c:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   1903e:	8f e5       	ldi	r24, 0x5F	; 95
   19040:	94 e0       	ldi	r25, 0x04	; 4
   19042:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19046:	8f e3       	ldi	r24, 0x3F	; 63
   19048:	94 e0       	ldi	r25, 0x04	; 4
   1904a:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    return(size);
}
   1904e:	c6 01       	movw	r24, r12
   19050:	22 96       	adiw	r28, 0x02	; 2
   19052:	e8 e0       	ldi	r30, 0x08	; 8
   19054:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

00019058 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   19058:	cf 92       	push	r12
   1905a:	df 92       	push	r13
   1905c:	ef 92       	push	r14
   1905e:	ff 92       	push	r15
   19060:	cf 93       	push	r28
   19062:	df 93       	push	r29
   19064:	d8 2f       	mov	r29, r24
   19066:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   19068:	8f e5       	ldi	r24, 0x5F	; 95
   1906a:	94 e0       	ldi	r25, 0x04	; 4
   1906c:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19070:	8f e3       	ldi	r24, 0x3F	; 63
   19072:	94 e0       	ldi	r25, 0x04	; 4
   19074:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   19078:	d0 64       	ori	r29, 0x40	; 64
   1907a:	8d 2f       	mov	r24, r29
   1907c:	90 e0       	ldi	r25, 0x00	; 0
   1907e:	94 60       	ori	r25, 0x04	; 4
   19080:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   19084:	c0 62       	ori	r28, 0x20	; 32
   19086:	8c 2f       	mov	r24, r28
   19088:	90 e0       	ldi	r25, 0x00	; 0
   1908a:	94 60       	ori	r25, 0x04	; 4
   1908c:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   19090:	c1 2c       	mov	r12, r1
   19092:	d1 2c       	mov	r13, r1
   19094:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   19096:	80 e0       	ldi	r24, 0x00	; 0
   19098:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <uart_keyhit>
   1909c:	89 2b       	or	r24, r25
   1909e:	79 f4       	brne	.+30     	; 0x190be <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   190a0:	80 e0       	ldi	r24, 0x00	; 0
   190a2:	90 e0       	ldi	r25, 0x00	; 0
   190a4:	0e 94 b7 91 	call	0x1236e	; 0x1236e <gpib_read_byte>
   190a8:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   190aa:	0e 94 8d 92 	call	0x1251a	; 0x1251a <gpib_decode>
       if(ch & EOI_FLAG)
   190ae:	d0 fd       	sbrc	r29, 0
   190b0:	06 c0       	rjmp	.+12     	; 0x190be <controller_read_trace+0x66>
            break;
        ++len;
   190b2:	8f ef       	ldi	r24, 0xFF	; 255
   190b4:	c8 1a       	sub	r12, r24
   190b6:	d8 0a       	sbc	r13, r24
   190b8:	e8 0a       	sbc	r14, r24
   190ba:	f8 0a       	sbc	r15, r24
    }
   190bc:	ec cf       	rjmp	.-40     	; 0x19096 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   190be:	8f e5       	ldi	r24, 0x5F	; 95
   190c0:	94 e0       	ldi	r25, 0x04	; 4
   190c2:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   190c6:	8f e3       	ldi	r24, 0x3F	; 63
   190c8:	94 e0       	ldi	r25, 0x04	; 4
   190ca:	0e 94 b6 8e 	call	0x11d6c	; 0x11d6c <gpib_write_byte>
    return(len);
}
   190ce:	c6 01       	movw	r24, r12
   190d0:	df 91       	pop	r29
   190d2:	cf 91       	pop	r28
   190d4:	ff 90       	pop	r15
   190d6:	ef 90       	pop	r14
   190d8:	df 90       	pop	r13
   190da:	cf 90       	pop	r12
   190dc:	08 95       	ret

000190de <lif_help>:
   190de:	cf 93       	push	r28
   190e0:	df 93       	push	r29
   190e2:	ec 01       	movw	r28, r24
   190e4:	8e e7       	ldi	r24, 0x7E	; 126
   190e6:	95 e4       	ldi	r25, 0x45	; 69
   190e8:	1f 92       	push	r1
   190ea:	9f 93       	push	r25
   190ec:	8f 93       	push	r24
   190ee:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   190f2:	0f 90       	pop	r0
   190f4:	0f 90       	pop	r0
   190f6:	0f 90       	pop	r0
   190f8:	cd 2b       	or	r28, r29
   190fa:	51 f0       	breq	.+20     	; 0x19110 <lif_help+0x32>
   190fc:	89 ed       	ldi	r24, 0xD9	; 217
   190fe:	93 e4       	ldi	r25, 0x43	; 67
   19100:	1f 92       	push	r1
   19102:	9f 93       	push	r25
   19104:	8f 93       	push	r24
   19106:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1910a:	0f 90       	pop	r0
   1910c:	0f 90       	pop	r0
   1910e:	0f 90       	pop	r0
   19110:	df 91       	pop	r29
   19112:	cf 91       	pop	r28
   19114:	08 95       	ret

00019116 <lif_calloc>:
   19116:	ef 92       	push	r14
   19118:	ff 92       	push	r15
   1911a:	0f 93       	push	r16
   1911c:	1f 93       	push	r17
   1911e:	cf 93       	push	r28
   19120:	df 93       	push	r29
   19122:	16 2f       	mov	r17, r22
   19124:	07 2f       	mov	r16, r23
   19126:	f8 2e       	mov	r15, r24
   19128:	e9 2e       	mov	r14, r25
   1912a:	61 e0       	ldi	r22, 0x01	; 1
   1912c:	70 e0       	ldi	r23, 0x00	; 0
   1912e:	81 2f       	mov	r24, r17
   19130:	90 2f       	mov	r25, r16
   19132:	0e 94 c8 29 	call	0x5390	; 0x5390 <safecalloc>
   19136:	ec 01       	movw	r28, r24
   19138:	89 2b       	or	r24, r25
   1913a:	99 f4       	brne	.+38     	; 0x19162 <lif_calloc+0x4c>
   1913c:	ef 92       	push	r14
   1913e:	ff 92       	push	r15
   19140:	0f 93       	push	r16
   19142:	1f 93       	push	r17
   19144:	80 eb       	ldi	r24, 0xB0	; 176
   19146:	93 e4       	ldi	r25, 0x43	; 67
   19148:	1f 92       	push	r1
   1914a:	9f 93       	push	r25
   1914c:	8f 93       	push	r24
   1914e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19152:	8d b7       	in	r24, 0x3d	; 61
   19154:	9e b7       	in	r25, 0x3e	; 62
   19156:	07 96       	adiw	r24, 0x07	; 7
   19158:	0f b6       	in	r0, 0x3f	; 63
   1915a:	f8 94       	cli
   1915c:	9e bf       	out	0x3e, r25	; 62
   1915e:	0f be       	out	0x3f, r0	; 63
   19160:	8d bf       	out	0x3d, r24	; 61
   19162:	ce 01       	movw	r24, r28
   19164:	cd b7       	in	r28, 0x3d	; 61
   19166:	de b7       	in	r29, 0x3e	; 62
   19168:	e6 e0       	ldi	r30, 0x06	; 6
   1916a:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0001916e <lif_free>:
   1916e:	00 97       	sbiw	r24, 0x00	; 0
   19170:	59 f4       	brne	.+22     	; 0x19188 <lif_free+0x1a>
   19172:	88 e9       	ldi	r24, 0x98	; 152
   19174:	93 e4       	ldi	r25, 0x43	; 67
   19176:	1f 92       	push	r1
   19178:	9f 93       	push	r25
   1917a:	8f 93       	push	r24
   1917c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19180:	0f 90       	pop	r0
   19182:	0f 90       	pop	r0
   19184:	0f 90       	pop	r0
   19186:	08 95       	ret
   19188:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <safefree>
   1918c:	08 95       	ret

0001918e <lif_stralloc>:
   1918e:	0f 93       	push	r16
   19190:	1f 93       	push	r17
   19192:	cf 93       	push	r28
   19194:	df 93       	push	r29
   19196:	ec 01       	movw	r28, r24
   19198:	fc 01       	movw	r30, r24
   1919a:	01 90       	ld	r0, Z+
   1919c:	00 20       	and	r0, r0
   1919e:	e9 f7       	brne	.-6      	; 0x1919a <lif_stralloc+0xc>
   191a0:	bf 01       	movw	r22, r30
   191a2:	68 1b       	sub	r22, r24
   191a4:	79 0b       	sbc	r23, r25
   191a6:	6d 5f       	subi	r22, 0xFD	; 253
   191a8:	7f 4f       	sbci	r23, 0xFF	; 255
   191aa:	07 2e       	mov	r0, r23
   191ac:	00 0c       	add	r0, r0
   191ae:	88 0b       	sbc	r24, r24
   191b0:	99 0b       	sbc	r25, r25
   191b2:	b1 df       	rcall	.-158    	; 0x19116 <lif_calloc>
   191b4:	8c 01       	movw	r16, r24
   191b6:	00 97       	sbiw	r24, 0x00	; 0
   191b8:	19 f0       	breq	.+6      	; 0x191c0 <lif_stralloc+0x32>
   191ba:	be 01       	movw	r22, r28
   191bc:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcpy>
   191c0:	c8 01       	movw	r24, r16
   191c2:	df 91       	pop	r29
   191c4:	cf 91       	pop	r28
   191c6:	1f 91       	pop	r17
   191c8:	0f 91       	pop	r16
   191ca:	08 95       	ret

000191cc <lif_open>:
   191cc:	ef 92       	push	r14
   191ce:	ff 92       	push	r15
   191d0:	0f 93       	push	r16
   191d2:	1f 93       	push	r17
   191d4:	cf 93       	push	r28
   191d6:	df 93       	push	r29
   191d8:	18 2f       	mov	r17, r24
   191da:	09 2f       	mov	r16, r25
   191dc:	f6 2e       	mov	r15, r22
   191de:	e7 2e       	mov	r14, r23
   191e0:	0e 94 b3 83 	call	0x10766	; 0x10766 <fopen>
   191e4:	ec 01       	movw	r28, r24
   191e6:	89 2b       	or	r24, r25
   191e8:	99 f4       	brne	.+38     	; 0x19210 <lif_open+0x44>
   191ea:	ef 92       	push	r14
   191ec:	ff 92       	push	r15
   191ee:	0f 93       	push	r16
   191f0:	1f 93       	push	r17
   191f2:	83 e7       	ldi	r24, 0x73	; 115
   191f4:	93 e4       	ldi	r25, 0x43	; 67
   191f6:	1f 92       	push	r1
   191f8:	9f 93       	push	r25
   191fa:	8f 93       	push	r24
   191fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19200:	8d b7       	in	r24, 0x3d	; 61
   19202:	9e b7       	in	r25, 0x3e	; 62
   19204:	07 96       	adiw	r24, 0x07	; 7
   19206:	0f b6       	in	r0, 0x3f	; 63
   19208:	f8 94       	cli
   1920a:	9e bf       	out	0x3e, r25	; 62
   1920c:	0f be       	out	0x3f, r0	; 63
   1920e:	8d bf       	out	0x3d, r24	; 61
   19210:	ce 01       	movw	r24, r28
   19212:	cd b7       	in	r28, 0x3d	; 61
   19214:	de b7       	in	r29, 0x3e	; 62
   19216:	e6 e0       	ldi	r30, 0x06	; 6
   19218:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0001921c <lif_stat>:
   1921c:	0f 93       	push	r16
   1921e:	1f 93       	push	r17
   19220:	cf 93       	push	r28
   19222:	df 93       	push	r29
   19224:	18 2f       	mov	r17, r24
   19226:	09 2f       	mov	r16, r25
   19228:	d6 2f       	mov	r29, r22
   1922a:	c7 2f       	mov	r28, r23
   1922c:	0e 94 c7 7e 	call	0xfd8e	; 0xfd8e <stat>
   19230:	97 ff       	sbrs	r25, 7
   19232:	11 c0       	rjmp	.+34     	; 0x19256 <lif_stat+0x3a>
   19234:	0f 93       	push	r16
   19236:	1f 93       	push	r17
   19238:	8a e5       	ldi	r24, 0x5A	; 90
   1923a:	93 e4       	ldi	r25, 0x43	; 67
   1923c:	1f 92       	push	r1
   1923e:	9f 93       	push	r25
   19240:	8f 93       	push	r24
   19242:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19246:	0f 90       	pop	r0
   19248:	0f 90       	pop	r0
   1924a:	0f 90       	pop	r0
   1924c:	0f 90       	pop	r0
   1924e:	0f 90       	pop	r0
   19250:	80 e0       	ldi	r24, 0x00	; 0
   19252:	90 e0       	ldi	r25, 0x00	; 0
   19254:	02 c0       	rjmp	.+4      	; 0x1925a <lif_stat+0x3e>
   19256:	8d 2f       	mov	r24, r29
   19258:	9c 2f       	mov	r25, r28
   1925a:	df 91       	pop	r29
   1925c:	cf 91       	pop	r28
   1925e:	1f 91       	pop	r17
   19260:	0f 91       	pop	r16
   19262:	08 95       	ret

00019264 <lif_seek_msg>:
   19264:	a0 e0       	ldi	r26, 0x00	; 0
   19266:	b0 e0       	ldi	r27, 0x00	; 0
   19268:	e8 e3       	ldi	r30, 0x38	; 56
   1926a:	f9 ec       	ldi	r31, 0xC9	; 201
   1926c:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   19270:	ec 01       	movw	r28, r24
   19272:	6a 01       	movw	r12, r20
   19274:	7b 01       	movw	r14, r22
   19276:	12 2f       	mov	r17, r18
   19278:	03 2f       	mov	r16, r19
   1927a:	0e 94 f3 7f 	call	0xffe6	; 0xffe6 <ftell>
   1927e:	6c 15       	cp	r22, r12
   19280:	7d 05       	cpc	r23, r13
   19282:	8e 05       	cpc	r24, r14
   19284:	9f 05       	cpc	r25, r15
   19286:	19 f4       	brne	.+6      	; 0x1928e <lif_seek_msg+0x2a>
   19288:	81 e0       	ldi	r24, 0x01	; 1
   1928a:	90 e0       	ldi	r25, 0x00	; 0
   1928c:	20 c0       	rjmp	.+64     	; 0x192ce <lif_seek_msg+0x6a>
   1928e:	20 e0       	ldi	r18, 0x00	; 0
   19290:	30 e0       	ldi	r19, 0x00	; 0
   19292:	b7 01       	movw	r22, r14
   19294:	a6 01       	movw	r20, r12
   19296:	ce 01       	movw	r24, r28
   19298:	0e 94 75 80 	call	0x100ea	; 0x100ea <fseek>
   1929c:	97 ff       	sbrs	r25, 7
   1929e:	f4 cf       	rjmp	.-24     	; 0x19288 <lif_seek_msg+0x24>
   192a0:	ff 92       	push	r15
   192a2:	ef 92       	push	r14
   192a4:	df 92       	push	r13
   192a6:	cf 92       	push	r12
   192a8:	0f 93       	push	r16
   192aa:	1f 93       	push	r17
   192ac:	89 e3       	ldi	r24, 0x39	; 57
   192ae:	93 e4       	ldi	r25, 0x43	; 67
   192b0:	1f 92       	push	r1
   192b2:	9f 93       	push	r25
   192b4:	8f 93       	push	r24
   192b6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   192ba:	8d b7       	in	r24, 0x3d	; 61
   192bc:	9e b7       	in	r25, 0x3e	; 62
   192be:	09 96       	adiw	r24, 0x09	; 9
   192c0:	0f b6       	in	r0, 0x3f	; 63
   192c2:	f8 94       	cli
   192c4:	9e bf       	out	0x3e, r25	; 62
   192c6:	0f be       	out	0x3f, r0	; 63
   192c8:	8d bf       	out	0x3d, r24	; 61
   192ca:	80 e0       	ldi	r24, 0x00	; 0
   192cc:	90 e0       	ldi	r25, 0x00	; 0
   192ce:	cd b7       	in	r28, 0x3d	; 61
   192d0:	de b7       	in	r29, 0x3e	; 62
   192d2:	e8 e0       	ldi	r30, 0x08	; 8
   192d4:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

000192d8 <lif_read>:
   192d8:	a0 e0       	ldi	r26, 0x00	; 0
   192da:	b0 e0       	ldi	r27, 0x00	; 0
   192dc:	e2 e7       	ldi	r30, 0x72	; 114
   192de:	f9 ec       	ldi	r31, 0xC9	; 201
   192e0:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   192e4:	ec 01       	movw	r28, r24
   192e6:	7b 01       	movw	r14, r22
   192e8:	b2 2e       	mov	r11, r18
   192ea:	a3 2e       	mov	r10, r19
   192ec:	94 2e       	mov	r9, r20
   192ee:	85 2e       	mov	r8, r21
   192f0:	28 81       	ld	r18, Y
   192f2:	39 81       	ldd	r19, Y+1	; 0x01
   192f4:	4b 2d       	mov	r20, r11
   192f6:	5a 2d       	mov	r21, r10
   192f8:	69 2d       	mov	r22, r9
   192fa:	78 2d       	mov	r23, r8
   192fc:	8a 81       	ldd	r24, Y+2	; 0x02
   192fe:	9b 81       	ldd	r25, Y+3	; 0x03
   19300:	b1 df       	rcall	.-158    	; 0x19264 <lif_seek_msg>
   19302:	89 2b       	or	r24, r25
   19304:	b9 f1       	breq	.+110    	; 0x19374 <lif_read+0x9c>
   19306:	2a 81       	ldd	r18, Y+2	; 0x02
   19308:	3b 81       	ldd	r19, Y+3	; 0x03
   1930a:	a8 01       	movw	r20, r16
   1930c:	61 e0       	ldi	r22, 0x01	; 1
   1930e:	70 e0       	ldi	r23, 0x00	; 0
   19310:	c7 01       	movw	r24, r14
   19312:	0e 94 09 81 	call	0x10212	; 0x10212 <fread>
   19316:	6c 01       	movw	r12, r24
   19318:	e1 2c       	mov	r14, r1
   1931a:	f1 2c       	mov	r15, r1
   1931c:	b8 01       	movw	r22, r16
   1931e:	01 2e       	mov	r0, r17
   19320:	00 0c       	add	r0, r0
   19322:	88 0b       	sbc	r24, r24
   19324:	99 0b       	sbc	r25, r25
   19326:	c6 16       	cp	r12, r22
   19328:	d7 06       	cpc	r13, r23
   1932a:	e8 06       	cpc	r14, r24
   1932c:	f9 06       	cpc	r15, r25
   1932e:	41 f1       	breq	.+80     	; 0x19380 <lif_read+0xa8>
   19330:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19334:	80 ff       	sbrs	r24, 0
   19336:	22 c0       	rjmp	.+68     	; 0x1937c <lif_read+0xa4>
   19338:	1f 93       	push	r17
   1933a:	0f 93       	push	r16
   1933c:	1f 92       	push	r1
   1933e:	1f 92       	push	r1
   19340:	df 92       	push	r13
   19342:	cf 92       	push	r12
   19344:	8f 92       	push	r8
   19346:	9f 92       	push	r9
   19348:	af 92       	push	r10
   1934a:	bf 92       	push	r11
   1934c:	89 81       	ldd	r24, Y+1	; 0x01
   1934e:	8f 93       	push	r24
   19350:	88 81       	ld	r24, Y
   19352:	8f 93       	push	r24
   19354:	8d ef       	ldi	r24, 0xFD	; 253
   19356:	92 e4       	ldi	r25, 0x42	; 66
   19358:	1f 92       	push	r1
   1935a:	9f 93       	push	r25
   1935c:	8f 93       	push	r24
   1935e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19362:	8d b7       	in	r24, 0x3d	; 61
   19364:	9e b7       	in	r25, 0x3e	; 62
   19366:	0f 96       	adiw	r24, 0x0f	; 15
   19368:	0f b6       	in	r0, 0x3f	; 63
   1936a:	f8 94       	cli
   1936c:	9e bf       	out	0x3e, r25	; 62
   1936e:	0f be       	out	0x3f, r0	; 63
   19370:	8d bf       	out	0x3d, r24	; 61
   19372:	04 c0       	rjmp	.+8      	; 0x1937c <lif_read+0xa4>
   19374:	60 e0       	ldi	r22, 0x00	; 0
   19376:	70 e0       	ldi	r23, 0x00	; 0
   19378:	cb 01       	movw	r24, r22
   1937a:	02 c0       	rjmp	.+4      	; 0x19380 <lif_read+0xa8>
   1937c:	c7 01       	movw	r24, r14
   1937e:	b6 01       	movw	r22, r12
   19380:	cd b7       	in	r28, 0x3d	; 61
   19382:	de b7       	in	r29, 0x3e	; 62
   19384:	ec e0       	ldi	r30, 0x0C	; 12
   19386:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

0001938a <lif_write>:
   1938a:	a0 e0       	ldi	r26, 0x00	; 0
   1938c:	b0 e0       	ldi	r27, 0x00	; 0
   1938e:	eb ec       	ldi	r30, 0xCB	; 203
   19390:	f9 ec       	ldi	r31, 0xC9	; 201
   19392:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   19396:	7c 01       	movw	r14, r24
   19398:	eb 01       	movw	r28, r22
   1939a:	d2 2e       	mov	r13, r18
   1939c:	c3 2e       	mov	r12, r19
   1939e:	b4 2e       	mov	r11, r20
   193a0:	a5 2e       	mov	r10, r21
   193a2:	fc 01       	movw	r30, r24
   193a4:	20 81       	ld	r18, Z
   193a6:	31 81       	ldd	r19, Z+1	; 0x01
   193a8:	4d 2d       	mov	r20, r13
   193aa:	5c 2d       	mov	r21, r12
   193ac:	6b 2d       	mov	r22, r11
   193ae:	7a 2d       	mov	r23, r10
   193b0:	82 81       	ldd	r24, Z+2	; 0x02
   193b2:	93 81       	ldd	r25, Z+3	; 0x03
   193b4:	57 df       	rcall	.-338    	; 0x19264 <lif_seek_msg>
   193b6:	00 97       	sbiw	r24, 0x00	; 0
   193b8:	89 f1       	breq	.+98     	; 0x1941c <lif_write+0x92>
   193ba:	f7 01       	movw	r30, r14
   193bc:	22 81       	ldd	r18, Z+2	; 0x02
   193be:	33 81       	ldd	r19, Z+3	; 0x03
   193c0:	a8 01       	movw	r20, r16
   193c2:	61 e0       	ldi	r22, 0x01	; 1
   193c4:	70 e0       	ldi	r23, 0x00	; 0
   193c6:	ce 01       	movw	r24, r28
   193c8:	0e 94 db 81 	call	0x103b6	; 0x103b6 <fwrite>
   193cc:	ec 01       	movw	r28, r24
   193ce:	08 17       	cp	r16, r24
   193d0:	19 07       	cpc	r17, r25
   193d2:	09 f1       	breq	.+66     	; 0x19416 <lif_write+0x8c>
   193d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   193d8:	80 ff       	sbrs	r24, 0
   193da:	1f c0       	rjmp	.+62     	; 0x1941a <lif_write+0x90>
   193dc:	1f 93       	push	r17
   193de:	0f 93       	push	r16
   193e0:	df 93       	push	r29
   193e2:	cf 93       	push	r28
   193e4:	af 92       	push	r10
   193e6:	bf 92       	push	r11
   193e8:	cf 92       	push	r12
   193ea:	df 92       	push	r13
   193ec:	f7 01       	movw	r30, r14
   193ee:	81 81       	ldd	r24, Z+1	; 0x01
   193f0:	8f 93       	push	r24
   193f2:	80 81       	ld	r24, Z
   193f4:	8f 93       	push	r24
   193f6:	80 ec       	ldi	r24, 0xC0	; 192
   193f8:	92 e4       	ldi	r25, 0x42	; 66
   193fa:	1f 92       	push	r1
   193fc:	9f 93       	push	r25
   193fe:	8f 93       	push	r24
   19400:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19404:	8d b7       	in	r24, 0x3d	; 61
   19406:	9e b7       	in	r25, 0x3e	; 62
   19408:	0d 96       	adiw	r24, 0x0d	; 13
   1940a:	0f b6       	in	r0, 0x3f	; 63
   1940c:	f8 94       	cli
   1940e:	9e bf       	out	0x3e, r25	; 62
   19410:	0f be       	out	0x3f, r0	; 63
   19412:	8d bf       	out	0x3d, r24	; 61
   19414:	02 c0       	rjmp	.+4      	; 0x1941a <lif_write+0x90>
   19416:	c8 01       	movw	r24, r16
   19418:	01 c0       	rjmp	.+2      	; 0x1941c <lif_write+0x92>
   1941a:	ce 01       	movw	r24, r28
   1941c:	cd b7       	in	r28, 0x3d	; 61
   1941e:	de b7       	in	r29, 0x3e	; 62
   19420:	ea e0       	ldi	r30, 0x0A	; 10
   19422:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00019426 <lif_chars>:
   19426:	80 32       	cpi	r24, 0x20	; 32
   19428:	91 05       	cpc	r25, r1
   1942a:	e1 f0       	breq	.+56     	; 0x19464 <lif_chars+0x3e>
   1942c:	9c 01       	movw	r18, r24
   1942e:	21 56       	subi	r18, 0x61	; 97
   19430:	31 09       	sbc	r19, r1
   19432:	2a 31       	cpi	r18, 0x1A	; 26
   19434:	31 05       	cpc	r19, r1
   19436:	10 f4       	brcc	.+4      	; 0x1943c <lif_chars+0x16>
   19438:	80 97       	sbiw	r24, 0x20	; 32
   1943a:	08 95       	ret
   1943c:	9c 01       	movw	r18, r24
   1943e:	21 54       	subi	r18, 0x41	; 65
   19440:	31 09       	sbc	r19, r1
   19442:	2a 31       	cpi	r18, 0x1A	; 26
   19444:	31 05       	cpc	r19, r1
   19446:	c8 f0       	brcs	.+50     	; 0x1947a <lif_chars+0x54>
   19448:	16 16       	cp	r1, r22
   1944a:	17 06       	cpc	r1, r23
   1944c:	74 f4       	brge	.+28     	; 0x1946a <lif_chars+0x44>
   1944e:	2f 5e       	subi	r18, 0xEF	; 239
   19450:	3f 4f       	sbci	r19, 0xFF	; 255
   19452:	2a 30       	cpi	r18, 0x0A	; 10
   19454:	31 05       	cpc	r19, r1
   19456:	88 f0       	brcs	.+34     	; 0x1947a <lif_chars+0x54>
   19458:	8f 35       	cpi	r24, 0x5F	; 95
   1945a:	91 05       	cpc	r25, r1
   1945c:	49 f0       	breq	.+18     	; 0x19470 <lif_chars+0x4a>
   1945e:	8d 97       	sbiw	r24, 0x2d	; 45
   19460:	21 f4       	brne	.+8      	; 0x1946a <lif_chars+0x44>
   19462:	09 c0       	rjmp	.+18     	; 0x19476 <lif_chars+0x50>
   19464:	80 e2       	ldi	r24, 0x20	; 32
   19466:	90 e0       	ldi	r25, 0x00	; 0
   19468:	08 95       	ret
   1946a:	80 e0       	ldi	r24, 0x00	; 0
   1946c:	90 e0       	ldi	r25, 0x00	; 0
   1946e:	08 95       	ret
   19470:	8f e5       	ldi	r24, 0x5F	; 95
   19472:	90 e0       	ldi	r25, 0x00	; 0
   19474:	08 95       	ret
   19476:	8d e2       	ldi	r24, 0x2D	; 45
   19478:	90 e0       	ldi	r25, 0x00	; 0
   1947a:	08 95       	ret

0001947c <lif_B2S>:
   1947c:	a0 e0       	ldi	r26, 0x00	; 0
   1947e:	b0 e0       	ldi	r27, 0x00	; 0
   19480:	e4 e4       	ldi	r30, 0x44	; 68
   19482:	fa ec       	ldi	r31, 0xCA	; 202
   19484:	0c 94 21 eb 	jmp	0x1d642	; 0x1d642 <__prologue_saves__+0xc>
   19488:	5c 01       	movw	r10, r24
   1948a:	6b 01       	movw	r12, r22
   1948c:	ea 01       	movw	r28, r20
   1948e:	4c 01       	movw	r8, r24
   19490:	ee 24       	eor	r14, r14
   19492:	e3 94       	inc	r14
   19494:	f1 2c       	mov	r15, r1
   19496:	00 e0       	ldi	r16, 0x00	; 0
   19498:	10 e0       	ldi	r17, 0x00	; 0
   1949a:	0c 17       	cp	r16, r28
   1949c:	1d 07       	cpc	r17, r29
   1949e:	6c f4       	brge	.+26     	; 0x194ba <lif_B2S+0x3e>
   194a0:	f4 01       	movw	r30, r8
   194a2:	81 91       	ld	r24, Z+
   194a4:	4f 01       	movw	r8, r30
   194a6:	b8 01       	movw	r22, r16
   194a8:	90 e0       	ldi	r25, 0x00	; 0
   194aa:	bd df       	rcall	.-134    	; 0x19426 <lif_chars>
   194ac:	89 2b       	or	r24, r25
   194ae:	11 f4       	brne	.+4      	; 0x194b4 <lif_B2S+0x38>
   194b0:	e1 2c       	mov	r14, r1
   194b2:	f1 2c       	mov	r15, r1
   194b4:	0f 5f       	subi	r16, 0xFF	; 255
   194b6:	1f 4f       	sbci	r17, 0xFF	; 255
   194b8:	f0 cf       	rjmp	.-32     	; 0x1949a <lif_B2S+0x1e>
   194ba:	d6 01       	movw	r26, r12
   194bc:	f5 01       	movw	r30, r10
   194be:	cf 01       	movw	r24, r30
   194c0:	8a 19       	sub	r24, r10
   194c2:	9b 09       	sbc	r25, r11
   194c4:	8c 17       	cp	r24, r28
   194c6:	9d 07       	cpc	r25, r29
   194c8:	1c f4       	brge	.+6      	; 0x194d0 <lif_B2S+0x54>
   194ca:	81 91       	ld	r24, Z+
   194cc:	8d 93       	st	X+, r24
   194ce:	f7 cf       	rjmp	.-18     	; 0x194be <lif_B2S+0x42>
   194d0:	d7 ff       	sbrs	r29, 7
   194d2:	02 c0       	rjmp	.+4      	; 0x194d8 <lif_B2S+0x5c>
   194d4:	c0 e0       	ldi	r28, 0x00	; 0
   194d6:	d0 e0       	ldi	r29, 0x00	; 0
   194d8:	cc 0d       	add	r28, r12
   194da:	dd 1d       	adc	r29, r13
   194dc:	18 82       	st	Y, r1
   194de:	c6 01       	movw	r24, r12
   194e0:	0e 94 4a 32 	call	0x6494	; 0x6494 <trim_tail>
   194e4:	c7 01       	movw	r24, r14
   194e6:	cd b7       	in	r28, 0x3d	; 61
   194e8:	de b7       	in	r29, 0x3e	; 62
   194ea:	ec e0       	ldi	r30, 0x0C	; 12
   194ec:	0c 94 3d eb 	jmp	0x1d67a	; 0x1d67a <__epilogue_restores__+0xc>

000194f0 <lif_checkname>:
   194f0:	ef 92       	push	r14
   194f2:	ff 92       	push	r15
   194f4:	0f 93       	push	r16
   194f6:	1f 93       	push	r17
   194f8:	cf 93       	push	r28
   194fa:	df 93       	push	r29
   194fc:	7c 01       	movw	r14, r24
   194fe:	ec 01       	movw	r28, r24
   19500:	01 e0       	ldi	r16, 0x01	; 1
   19502:	10 e0       	ldi	r17, 0x00	; 0
   19504:	be 01       	movw	r22, r28
   19506:	6e 19       	sub	r22, r14
   19508:	7f 09       	sbc	r23, r15
   1950a:	89 91       	ld	r24, Y+
   1950c:	88 23       	and	r24, r24
   1950e:	39 f0       	breq	.+14     	; 0x1951e <lif_checkname+0x2e>
   19510:	90 e0       	ldi	r25, 0x00	; 0
   19512:	89 df       	rcall	.-238    	; 0x19426 <lif_chars>
   19514:	89 2b       	or	r24, r25
   19516:	b1 f7       	brne	.-20     	; 0x19504 <lif_checkname+0x14>
   19518:	00 e0       	ldi	r16, 0x00	; 0
   1951a:	10 e0       	ldi	r17, 0x00	; 0
   1951c:	f3 cf       	rjmp	.-26     	; 0x19504 <lif_checkname+0x14>
   1951e:	c8 01       	movw	r24, r16
   19520:	cd b7       	in	r28, 0x3d	; 61
   19522:	de b7       	in	r29, 0x3e	; 62
   19524:	e6 e0       	ldi	r30, 0x06	; 6
   19526:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0001952a <lif_S2B>:
   1952a:	fb 01       	movw	r30, r22
   1952c:	dc 01       	movw	r26, r24
   1952e:	20 e0       	ldi	r18, 0x00	; 0
   19530:	30 e0       	ldi	r19, 0x00	; 0
   19532:	61 91       	ld	r22, Z+
   19534:	61 11       	cpse	r22, r1
   19536:	05 c0       	rjmp	.+10     	; 0x19542 <lif_S2B+0x18>
   19538:	fc 01       	movw	r30, r24
   1953a:	e2 0f       	add	r30, r18
   1953c:	f3 1f       	adc	r31, r19
   1953e:	60 e2       	ldi	r22, 0x20	; 32
   19540:	08 c0       	rjmp	.+16     	; 0x19552 <lif_S2B+0x28>
   19542:	24 17       	cp	r18, r20
   19544:	35 07       	cpc	r19, r21
   19546:	24 f4       	brge	.+8      	; 0x19550 <lif_S2B+0x26>
   19548:	6d 93       	st	X+, r22
   1954a:	2f 5f       	subi	r18, 0xFF	; 255
   1954c:	3f 4f       	sbci	r19, 0xFF	; 255
   1954e:	f1 cf       	rjmp	.-30     	; 0x19532 <lif_S2B+0x8>
   19550:	08 95       	ret
   19552:	9f 01       	movw	r18, r30
   19554:	28 1b       	sub	r18, r24
   19556:	39 0b       	sbc	r19, r25
   19558:	24 17       	cp	r18, r20
   1955a:	35 07       	cpc	r19, r21
   1955c:	14 f4       	brge	.+4      	; 0x19562 <lif_S2B+0x38>
   1955e:	61 93       	st	Z+, r22
   19560:	f8 cf       	rjmp	.-16     	; 0x19552 <lif_S2B+0x28>
   19562:	08 95       	ret

00019564 <lif_fixname>:
   19564:	a0 e0       	ldi	r26, 0x00	; 0
   19566:	b0 e0       	ldi	r27, 0x00	; 0
   19568:	e8 eb       	ldi	r30, 0xB8	; 184
   1956a:	fa ec       	ldi	r31, 0xCA	; 202
   1956c:	0c 94 24 eb 	jmp	0x1d648	; 0x1d648 <__prologue_saves__+0x12>
   19570:	8c 01       	movw	r16, r24
   19572:	cb 01       	movw	r24, r22
   19574:	7a 01       	movw	r14, r20
   19576:	0e 94 29 7c 	call	0xf852	; 0xf852 <basename>
   1957a:	6c 01       	movw	r12, r24
   1957c:	e8 01       	movw	r28, r16
   1957e:	80 e2       	ldi	r24, 0x20	; 32
   19580:	b8 2e       	mov	r11, r24
   19582:	be 01       	movw	r22, r28
   19584:	60 1b       	sub	r22, r16
   19586:	71 0b       	sbc	r23, r17
   19588:	f6 01       	movw	r30, r12
   1958a:	81 91       	ld	r24, Z+
   1958c:	6f 01       	movw	r12, r30
   1958e:	81 11       	cpse	r24, r1
   19590:	02 c0       	rjmp	.+4      	; 0x19596 <lif_fixname+0x32>
   19592:	20 e2       	ldi	r18, 0x20	; 32
   19594:	0e c0       	rjmp	.+28     	; 0x195b2 <lif_fixname+0x4e>
   19596:	1e 14       	cp	r1, r14
   19598:	1f 04       	cpc	r1, r15
   1959a:	dc f7       	brge	.-10     	; 0x19592 <lif_fixname+0x2e>
   1959c:	8e 32       	cpi	r24, 0x2E	; 46
   1959e:	c9 f3       	breq	.-14     	; 0x19592 <lif_fixname+0x2e>
   195a0:	90 e0       	ldi	r25, 0x00	; 0
   195a2:	41 df       	rcall	.-382    	; 0x19426 <lif_chars>
   195a4:	88 23       	and	r24, r24
   195a6:	11 f0       	breq	.+4      	; 0x195ac <lif_fixname+0x48>
   195a8:	88 83       	st	Y, r24
   195aa:	01 c0       	rjmp	.+2      	; 0x195ae <lif_fixname+0x4a>
   195ac:	b8 82       	st	Y, r11
   195ae:	21 96       	adiw	r28, 0x01	; 1
   195b0:	e8 cf       	rjmp	.-48     	; 0x19582 <lif_fixname+0x1e>
   195b2:	ce 01       	movw	r24, r28
   195b4:	80 1b       	sub	r24, r16
   195b6:	91 0b       	sbc	r25, r17
   195b8:	8e 15       	cp	r24, r14
   195ba:	9f 05       	cpc	r25, r15
   195bc:	14 f4       	brge	.+4      	; 0x195c2 <lif_fixname+0x5e>
   195be:	29 93       	st	Y+, r18
   195c0:	f8 cf       	rjmp	.-16     	; 0x195b2 <lif_fixname+0x4e>
   195c2:	18 82       	st	Y, r1
   195c4:	f8 01       	movw	r30, r16
   195c6:	01 90       	ld	r0, Z+
   195c8:	00 20       	and	r0, r0
   195ca:	e9 f7       	brne	.-6      	; 0x195c6 <lif_fixname+0x62>
   195cc:	cf 01       	movw	r24, r30
   195ce:	01 97       	sbiw	r24, 0x01	; 1
   195d0:	80 1b       	sub	r24, r16
   195d2:	91 0b       	sbc	r25, r17
   195d4:	cd b7       	in	r28, 0x3d	; 61
   195d6:	de b7       	in	r29, 0x3e	; 62
   195d8:	e9 e0       	ldi	r30, 0x09	; 9
   195da:	0c 94 40 eb 	jmp	0x1d680	; 0x1d680 <__epilogue_restores__+0x12>

000195de <lif_vol2str>:
   195de:	ef 92       	push	r14
   195e0:	ff 92       	push	r15
   195e2:	0f 93       	push	r16
   195e4:	1f 93       	push	r17
   195e6:	cf 93       	push	r28
   195e8:	df 93       	push	r29
   195ea:	7c 01       	movw	r14, r24
   195ec:	eb 01       	movw	r28, r22
   195ee:	fc 01       	movw	r30, r24
   195f0:	04 a1       	ldd	r16, Z+36	; 0x24
   195f2:	15 a1       	ldd	r17, Z+37	; 0x25
   195f4:	20 e0       	ldi	r18, 0x00	; 0
   195f6:	30 e0       	ldi	r19, 0x00	; 0
   195f8:	42 e0       	ldi	r20, 0x02	; 2
   195fa:	50 e0       	ldi	r21, 0x00	; 0
   195fc:	60 e0       	ldi	r22, 0x00	; 0
   195fe:	70 e0       	ldi	r23, 0x00	; 0
   19600:	ce 01       	movw	r24, r28
   19602:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19606:	b7 01       	movw	r22, r14
   19608:	6a 5d       	subi	r22, 0xDA	; 218
   1960a:	7f 4f       	sbci	r23, 0xFF	; 255
   1960c:	46 e0       	ldi	r20, 0x06	; 6
   1960e:	50 e0       	ldi	r21, 0x00	; 0
   19610:	ce 01       	movw	r24, r28
   19612:	02 96       	adiw	r24, 0x02	; 2
   19614:	8a df       	rcall	.-236    	; 0x1952a <lif_S2B>
   19616:	f7 01       	movw	r30, r14
   19618:	05 a5       	ldd	r16, Z+45	; 0x2d
   1961a:	16 a5       	ldd	r17, Z+46	; 0x2e
   1961c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1961e:	30 a9       	ldd	r19, Z+48	; 0x30
   19620:	44 e0       	ldi	r20, 0x04	; 4
   19622:	50 e0       	ldi	r21, 0x00	; 0
   19624:	68 e0       	ldi	r22, 0x08	; 8
   19626:	70 e0       	ldi	r23, 0x00	; 0
   19628:	ce 01       	movw	r24, r28
   1962a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1962e:	f7 01       	movw	r30, r14
   19630:	01 a9       	ldd	r16, Z+49	; 0x31
   19632:	12 a9       	ldd	r17, Z+50	; 0x32
   19634:	20 e0       	ldi	r18, 0x00	; 0
   19636:	30 e0       	ldi	r19, 0x00	; 0
   19638:	42 e0       	ldi	r20, 0x02	; 2
   1963a:	50 e0       	ldi	r21, 0x00	; 0
   1963c:	6c e0       	ldi	r22, 0x0C	; 12
   1963e:	70 e0       	ldi	r23, 0x00	; 0
   19640:	ce 01       	movw	r24, r28
   19642:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19646:	00 e0       	ldi	r16, 0x00	; 0
   19648:	10 e0       	ldi	r17, 0x00	; 0
   1964a:	98 01       	movw	r18, r16
   1964c:	42 e0       	ldi	r20, 0x02	; 2
   1964e:	50 e0       	ldi	r21, 0x00	; 0
   19650:	6e e0       	ldi	r22, 0x0E	; 14
   19652:	70 e0       	ldi	r23, 0x00	; 0
   19654:	ce 01       	movw	r24, r28
   19656:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1965a:	f7 01       	movw	r30, r14
   1965c:	05 a9       	ldd	r16, Z+53	; 0x35
   1965e:	16 a9       	ldd	r17, Z+54	; 0x36
   19660:	27 a9       	ldd	r18, Z+55	; 0x37
   19662:	30 ad       	ldd	r19, Z+56	; 0x38
   19664:	44 e0       	ldi	r20, 0x04	; 4
   19666:	50 e0       	ldi	r21, 0x00	; 0
   19668:	60 e1       	ldi	r22, 0x10	; 16
   1966a:	70 e0       	ldi	r23, 0x00	; 0
   1966c:	ce 01       	movw	r24, r28
   1966e:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19672:	f7 01       	movw	r30, r14
   19674:	01 ad       	ldd	r16, Z+57	; 0x39
   19676:	12 ad       	ldd	r17, Z+58	; 0x3a
   19678:	20 e0       	ldi	r18, 0x00	; 0
   1967a:	30 e0       	ldi	r19, 0x00	; 0
   1967c:	42 e0       	ldi	r20, 0x02	; 2
   1967e:	50 e0       	ldi	r21, 0x00	; 0
   19680:	64 e1       	ldi	r22, 0x14	; 20
   19682:	70 e0       	ldi	r23, 0x00	; 0
   19684:	ce 01       	movw	r24, r28
   19686:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1968a:	00 e0       	ldi	r16, 0x00	; 0
   1968c:	10 e0       	ldi	r17, 0x00	; 0
   1968e:	98 01       	movw	r18, r16
   19690:	42 e0       	ldi	r20, 0x02	; 2
   19692:	50 e0       	ldi	r21, 0x00	; 0
   19694:	66 e1       	ldi	r22, 0x16	; 22
   19696:	70 e0       	ldi	r23, 0x00	; 0
   19698:	ce 01       	movw	r24, r28
   1969a:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   1969e:	f7 01       	movw	r30, r14
   196a0:	fd 96       	adiw	r30, 0x3d	; 61
   196a2:	00 81       	ld	r16, Z
   196a4:	11 81       	ldd	r17, Z+1	; 0x01
   196a6:	22 81       	ldd	r18, Z+2	; 0x02
   196a8:	33 81       	ldd	r19, Z+3	; 0x03
   196aa:	44 e0       	ldi	r20, 0x04	; 4
   196ac:	50 e0       	ldi	r21, 0x00	; 0
   196ae:	68 e1       	ldi	r22, 0x18	; 24
   196b0:	70 e0       	ldi	r23, 0x00	; 0
   196b2:	ce 01       	movw	r24, r28
   196b4:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   196b8:	f7 01       	movw	r30, r14
   196ba:	ef 5b       	subi	r30, 0xBF	; 191
   196bc:	ff 4f       	sbci	r31, 0xFF	; 255
   196be:	00 81       	ld	r16, Z
   196c0:	11 81       	ldd	r17, Z+1	; 0x01
   196c2:	22 81       	ldd	r18, Z+2	; 0x02
   196c4:	33 81       	ldd	r19, Z+3	; 0x03
   196c6:	44 e0       	ldi	r20, 0x04	; 4
   196c8:	50 e0       	ldi	r21, 0x00	; 0
   196ca:	6c e1       	ldi	r22, 0x1C	; 28
   196cc:	70 e0       	ldi	r23, 0x00	; 0
   196ce:	ce 01       	movw	r24, r28
   196d0:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   196d4:	f7 01       	movw	r30, r14
   196d6:	eb 5b       	subi	r30, 0xBB	; 187
   196d8:	ff 4f       	sbci	r31, 0xFF	; 255
   196da:	00 81       	ld	r16, Z
   196dc:	11 81       	ldd	r17, Z+1	; 0x01
   196de:	22 81       	ldd	r18, Z+2	; 0x02
   196e0:	33 81       	ldd	r19, Z+3	; 0x03
   196e2:	44 e0       	ldi	r20, 0x04	; 4
   196e4:	50 e0       	ldi	r21, 0x00	; 0
   196e6:	60 e2       	ldi	r22, 0x20	; 32
   196e8:	70 e0       	ldi	r23, 0x00	; 0
   196ea:	ce 01       	movw	r24, r28
   196ec:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   196f0:	de 01       	movw	r26, r28
   196f2:	94 96       	adiw	r26, 0x24	; 36
   196f4:	f7 01       	movw	r30, r14
   196f6:	e7 5b       	subi	r30, 0xB7	; 183
   196f8:	ff 4f       	sbci	r31, 0xFF	; 255
   196fa:	86 e0       	ldi	r24, 0x06	; 6
   196fc:	01 90       	ld	r0, Z+
   196fe:	0d 92       	st	X+, r0
   19700:	8a 95       	dec	r24
   19702:	e1 f7       	brne	.-8      	; 0x196fc <lif_vol2str+0x11e>
   19704:	cd b7       	in	r28, 0x3d	; 61
   19706:	de b7       	in	r29, 0x3e	; 62
   19708:	e6 e0       	ldi	r30, 0x06	; 6
   1970a:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

0001970e <lif_str2vol>:
   1970e:	0f 93       	push	r16
   19710:	1f 93       	push	r17
   19712:	cf 93       	push	r28
   19714:	df 93       	push	r29
   19716:	8c 01       	movw	r16, r24
   19718:	eb 01       	movw	r28, r22
   1971a:	42 e0       	ldi	r20, 0x02	; 2
   1971c:	50 e0       	ldi	r21, 0x00	; 0
   1971e:	60 e0       	ldi	r22, 0x00	; 0
   19720:	70 e0       	ldi	r23, 0x00	; 0
   19722:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19726:	7d a3       	std	Y+37, r23	; 0x25
   19728:	6c a3       	std	Y+36, r22	; 0x24
   1972a:	be 01       	movw	r22, r28
   1972c:	6a 5d       	subi	r22, 0xDA	; 218
   1972e:	7f 4f       	sbci	r23, 0xFF	; 255
   19730:	46 e0       	ldi	r20, 0x06	; 6
   19732:	50 e0       	ldi	r21, 0x00	; 0
   19734:	c8 01       	movw	r24, r16
   19736:	02 96       	adiw	r24, 0x02	; 2
   19738:	a1 de       	rcall	.-702    	; 0x1947c <lif_B2S>
   1973a:	44 e0       	ldi	r20, 0x04	; 4
   1973c:	50 e0       	ldi	r21, 0x00	; 0
   1973e:	68 e0       	ldi	r22, 0x08	; 8
   19740:	70 e0       	ldi	r23, 0x00	; 0
   19742:	c8 01       	movw	r24, r16
   19744:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19748:	6d a7       	std	Y+45, r22	; 0x2d
   1974a:	7e a7       	std	Y+46, r23	; 0x2e
   1974c:	8f a7       	std	Y+47, r24	; 0x2f
   1974e:	98 ab       	std	Y+48, r25	; 0x30
   19750:	42 e0       	ldi	r20, 0x02	; 2
   19752:	50 e0       	ldi	r21, 0x00	; 0
   19754:	6c e0       	ldi	r22, 0x0C	; 12
   19756:	70 e0       	ldi	r23, 0x00	; 0
   19758:	c8 01       	movw	r24, r16
   1975a:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   1975e:	7a ab       	std	Y+50, r23	; 0x32
   19760:	69 ab       	std	Y+49, r22	; 0x31
   19762:	42 e0       	ldi	r20, 0x02	; 2
   19764:	50 e0       	ldi	r21, 0x00	; 0
   19766:	6e e0       	ldi	r22, 0x0E	; 14
   19768:	70 e0       	ldi	r23, 0x00	; 0
   1976a:	c8 01       	movw	r24, r16
   1976c:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19770:	7c ab       	std	Y+52, r23	; 0x34
   19772:	6b ab       	std	Y+51, r22	; 0x33
   19774:	44 e0       	ldi	r20, 0x04	; 4
   19776:	50 e0       	ldi	r21, 0x00	; 0
   19778:	60 e1       	ldi	r22, 0x10	; 16
   1977a:	70 e0       	ldi	r23, 0x00	; 0
   1977c:	c8 01       	movw	r24, r16
   1977e:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19782:	6d ab       	std	Y+53, r22	; 0x35
   19784:	7e ab       	std	Y+54, r23	; 0x36
   19786:	8f ab       	std	Y+55, r24	; 0x37
   19788:	98 af       	std	Y+56, r25	; 0x38
   1978a:	42 e0       	ldi	r20, 0x02	; 2
   1978c:	50 e0       	ldi	r21, 0x00	; 0
   1978e:	64 e1       	ldi	r22, 0x14	; 20
   19790:	70 e0       	ldi	r23, 0x00	; 0
   19792:	c8 01       	movw	r24, r16
   19794:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19798:	7a af       	std	Y+58, r23	; 0x3a
   1979a:	69 af       	std	Y+57, r22	; 0x39
   1979c:	42 e0       	ldi	r20, 0x02	; 2
   1979e:	50 e0       	ldi	r21, 0x00	; 0
   197a0:	66 e1       	ldi	r22, 0x16	; 22
   197a2:	70 e0       	ldi	r23, 0x00	; 0
   197a4:	c8 01       	movw	r24, r16
   197a6:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   197aa:	7c af       	std	Y+60, r23	; 0x3c
   197ac:	6b af       	std	Y+59, r22	; 0x3b
   197ae:	44 e0       	ldi	r20, 0x04	; 4
   197b0:	50 e0       	ldi	r21, 0x00	; 0
   197b2:	68 e1       	ldi	r22, 0x18	; 24
   197b4:	70 e0       	ldi	r23, 0x00	; 0
   197b6:	c8 01       	movw	r24, r16
   197b8:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   197bc:	fe 01       	movw	r30, r28
   197be:	fd 96       	adiw	r30, 0x3d	; 61
   197c0:	60 83       	st	Z, r22
   197c2:	71 83       	std	Z+1, r23	; 0x01
   197c4:	82 83       	std	Z+2, r24	; 0x02
   197c6:	93 83       	std	Z+3, r25	; 0x03
   197c8:	44 e0       	ldi	r20, 0x04	; 4
   197ca:	50 e0       	ldi	r21, 0x00	; 0
   197cc:	6c e1       	ldi	r22, 0x1C	; 28
   197ce:	70 e0       	ldi	r23, 0x00	; 0
   197d0:	c8 01       	movw	r24, r16
   197d2:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   197d6:	fe 01       	movw	r30, r28
   197d8:	ef 5b       	subi	r30, 0xBF	; 191
   197da:	ff 4f       	sbci	r31, 0xFF	; 255
   197dc:	60 83       	st	Z, r22
   197de:	71 83       	std	Z+1, r23	; 0x01
   197e0:	82 83       	std	Z+2, r24	; 0x02
   197e2:	93 83       	std	Z+3, r25	; 0x03
   197e4:	44 e0       	ldi	r20, 0x04	; 4
   197e6:	50 e0       	ldi	r21, 0x00	; 0
   197e8:	60 e2       	ldi	r22, 0x20	; 32
   197ea:	70 e0       	ldi	r23, 0x00	; 0
   197ec:	c8 01       	movw	r24, r16
   197ee:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   197f2:	fe 01       	movw	r30, r28
   197f4:	eb 5b       	subi	r30, 0xBB	; 187
   197f6:	ff 4f       	sbci	r31, 0xFF	; 255
   197f8:	60 83       	st	Z, r22
   197fa:	71 83       	std	Z+1, r23	; 0x01
   197fc:	82 83       	std	Z+2, r24	; 0x02
   197fe:	93 83       	std	Z+3, r25	; 0x03
   19800:	de 01       	movw	r26, r28
   19802:	a7 5b       	subi	r26, 0xB7	; 183
   19804:	bf 4f       	sbci	r27, 0xFF	; 255
   19806:	f8 01       	movw	r30, r16
   19808:	b4 96       	adiw	r30, 0x24	; 36
   1980a:	86 e0       	ldi	r24, 0x06	; 6
   1980c:	01 90       	ld	r0, Z+
   1980e:	0d 92       	st	X+, r0
   19810:	8a 95       	dec	r24
   19812:	e1 f7       	brne	.-8      	; 0x1980c <lif_str2vol+0xfe>
   19814:	df 91       	pop	r29
   19816:	cf 91       	pop	r28
   19818:	1f 91       	pop	r17
   1981a:	0f 91       	pop	r16
   1981c:	08 95       	ret

0001981e <lif_dir2str>:
   1981e:	ef 92       	push	r14
   19820:	ff 92       	push	r15
   19822:	0f 93       	push	r16
   19824:	1f 93       	push	r17
   19826:	cf 93       	push	r28
   19828:	df 93       	push	r29
   1982a:	ec 01       	movw	r28, r24
   1982c:	7b 01       	movw	r14, r22
   1982e:	bc 01       	movw	r22, r24
   19830:	61 5b       	subi	r22, 0xB1	; 177
   19832:	7f 4f       	sbci	r23, 0xFF	; 255
   19834:	4a e0       	ldi	r20, 0x0A	; 10
   19836:	50 e0       	ldi	r21, 0x00	; 0
   19838:	c7 01       	movw	r24, r14
   1983a:	77 de       	rcall	.-786    	; 0x1952a <lif_S2B>
   1983c:	fe 01       	movw	r30, r28
   1983e:	e6 5a       	subi	r30, 0xA6	; 166
   19840:	ff 4f       	sbci	r31, 0xFF	; 255
   19842:	00 81       	ld	r16, Z
   19844:	11 81       	ldd	r17, Z+1	; 0x01
   19846:	20 e0       	ldi	r18, 0x00	; 0
   19848:	30 e0       	ldi	r19, 0x00	; 0
   1984a:	42 e0       	ldi	r20, 0x02	; 2
   1984c:	50 e0       	ldi	r21, 0x00	; 0
   1984e:	6a e0       	ldi	r22, 0x0A	; 10
   19850:	70 e0       	ldi	r23, 0x00	; 0
   19852:	c7 01       	movw	r24, r14
   19854:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19858:	fe 01       	movw	r30, r28
   1985a:	e4 5a       	subi	r30, 0xA4	; 164
   1985c:	ff 4f       	sbci	r31, 0xFF	; 255
   1985e:	00 81       	ld	r16, Z
   19860:	11 81       	ldd	r17, Z+1	; 0x01
   19862:	22 81       	ldd	r18, Z+2	; 0x02
   19864:	33 81       	ldd	r19, Z+3	; 0x03
   19866:	44 e0       	ldi	r20, 0x04	; 4
   19868:	50 e0       	ldi	r21, 0x00	; 0
   1986a:	6c e0       	ldi	r22, 0x0C	; 12
   1986c:	70 e0       	ldi	r23, 0x00	; 0
   1986e:	c7 01       	movw	r24, r14
   19870:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19874:	fe 01       	movw	r30, r28
   19876:	e0 5a       	subi	r30, 0xA0	; 160
   19878:	ff 4f       	sbci	r31, 0xFF	; 255
   1987a:	00 81       	ld	r16, Z
   1987c:	11 81       	ldd	r17, Z+1	; 0x01
   1987e:	22 81       	ldd	r18, Z+2	; 0x02
   19880:	33 81       	ldd	r19, Z+3	; 0x03
   19882:	44 e0       	ldi	r20, 0x04	; 4
   19884:	50 e0       	ldi	r21, 0x00	; 0
   19886:	60 e1       	ldi	r22, 0x10	; 16
   19888:	70 e0       	ldi	r23, 0x00	; 0
   1988a:	c7 01       	movw	r24, r14
   1988c:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   19890:	d7 01       	movw	r26, r14
   19892:	54 96       	adiw	r26, 0x14	; 20
   19894:	fe 01       	movw	r30, r28
   19896:	ec 59       	subi	r30, 0x9C	; 156
   19898:	ff 4f       	sbci	r31, 0xFF	; 255
   1989a:	86 e0       	ldi	r24, 0x06	; 6
   1989c:	01 90       	ld	r0, Z+
   1989e:	0d 92       	st	X+, r0
   198a0:	8a 95       	dec	r24
   198a2:	e1 f7       	brne	.-8      	; 0x1989c <lif_dir2str+0x7e>
   198a4:	fe 01       	movw	r30, r28
   198a6:	e6 59       	subi	r30, 0x96	; 150
   198a8:	ff 4f       	sbci	r31, 0xFF	; 255
   198aa:	00 81       	ld	r16, Z
   198ac:	11 81       	ldd	r17, Z+1	; 0x01
   198ae:	20 e0       	ldi	r18, 0x00	; 0
   198b0:	30 e0       	ldi	r19, 0x00	; 0
   198b2:	42 e0       	ldi	r20, 0x02	; 2
   198b4:	50 e0       	ldi	r21, 0x00	; 0
   198b6:	6a e1       	ldi	r22, 0x1A	; 26
   198b8:	70 e0       	ldi	r23, 0x00	; 0
   198ba:	c7 01       	movw	r24, r14
   198bc:	0e 94 ba b6 	call	0x16d74	; 0x16d74 <V2B_MSB>
   198c0:	fe 01       	movw	r30, r28
   198c2:	e4 59       	subi	r30, 0x94	; 148
   198c4:	ff 4f       	sbci	r31, 0xFF	; 255
   198c6:	00 81       	ld	r16, Z
   198c8:	11 81       	ldd	r17, Z+1	; 0x01
   198ca:	20 e0       	ldi	r18, 0x00	; 0
   198cc:	30 e0       	ldi	r19, 0x00	; 0
   198ce:	42 e0       	ldi	r20, 0x02	; 2
   198d0:	50 e0       	ldi	r21, 0x00	; 0
   198d2:	6c e1       	ldi	r22, 0x1C	; 28
   198d4:	70 e0       	ldi	r23, 0x00	; 0
   198d6:	c7 01       	movw	r24, r14
   198d8:	0e 94 ce b6 	call	0x16d9c	; 0x16d9c <V2B_LSB>
   198dc:	c2 59       	subi	r28, 0x92	; 146
   198de:	df 4f       	sbci	r29, 0xFF	; 255
   198e0:	08 81       	ld	r16, Y
   198e2:	19 81       	ldd	r17, Y+1	; 0x01
   198e4:	20 e0       	ldi	r18, 0x00	; 0
   198e6:	30 e0       	ldi	r19, 0x00	; 0
   198e8:	42 e0       	ldi	r20, 0x02	; 2
   198ea:	50 e0       	ldi	r21, 0x00	; 0
   198ec:	6e e1       	ldi	r22, 0x1E	; 30
   198ee:	70 e0       	ldi	r23, 0x00	; 0
   198f0:	c7 01       	movw	r24, r14
   198f2:	0e 94 ce b6 	call	0x16d9c	; 0x16d9c <V2B_LSB>
   198f6:	cd b7       	in	r28, 0x3d	; 61
   198f8:	de b7       	in	r29, 0x3e	; 62
   198fa:	e6 e0       	ldi	r30, 0x06	; 6
   198fc:	0c 94 43 eb 	jmp	0x1d686	; 0x1d686 <__epilogue_restores__+0x18>

00019900 <lif_str2dir>:
   19900:	0f 93       	push	r16
   19902:	1f 93       	push	r17
   19904:	cf 93       	push	r28
   19906:	df 93       	push	r29
   19908:	8c 01       	movw	r16, r24
   1990a:	eb 01       	movw	r28, r22
   1990c:	61 5b       	subi	r22, 0xB1	; 177
   1990e:	7f 4f       	sbci	r23, 0xFF	; 255
   19910:	4a e0       	ldi	r20, 0x0A	; 10
   19912:	50 e0       	ldi	r21, 0x00	; 0
   19914:	b3 dd       	rcall	.-1178   	; 0x1947c <lif_B2S>
   19916:	42 e0       	ldi	r20, 0x02	; 2
   19918:	50 e0       	ldi	r21, 0x00	; 0
   1991a:	6a e0       	ldi	r22, 0x0A	; 10
   1991c:	70 e0       	ldi	r23, 0x00	; 0
   1991e:	c8 01       	movw	r24, r16
   19920:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19924:	fe 01       	movw	r30, r28
   19926:	e6 5a       	subi	r30, 0xA6	; 166
   19928:	ff 4f       	sbci	r31, 0xFF	; 255
   1992a:	71 83       	std	Z+1, r23	; 0x01
   1992c:	60 83       	st	Z, r22
   1992e:	44 e0       	ldi	r20, 0x04	; 4
   19930:	50 e0       	ldi	r21, 0x00	; 0
   19932:	6c e0       	ldi	r22, 0x0C	; 12
   19934:	70 e0       	ldi	r23, 0x00	; 0
   19936:	c8 01       	movw	r24, r16
   19938:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   1993c:	fe 01       	movw	r30, r28
   1993e:	e4 5a       	subi	r30, 0xA4	; 164
   19940:	ff 4f       	sbci	r31, 0xFF	; 255
   19942:	60 83       	st	Z, r22
   19944:	71 83       	std	Z+1, r23	; 0x01
   19946:	82 83       	std	Z+2, r24	; 0x02
   19948:	93 83       	std	Z+3, r25	; 0x03
   1994a:	44 e0       	ldi	r20, 0x04	; 4
   1994c:	50 e0       	ldi	r21, 0x00	; 0
   1994e:	60 e1       	ldi	r22, 0x10	; 16
   19950:	70 e0       	ldi	r23, 0x00	; 0
   19952:	c8 01       	movw	r24, r16
   19954:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19958:	fe 01       	movw	r30, r28
   1995a:	e0 5a       	subi	r30, 0xA0	; 160
   1995c:	ff 4f       	sbci	r31, 0xFF	; 255
   1995e:	60 83       	st	Z, r22
   19960:	71 83       	std	Z+1, r23	; 0x01
   19962:	82 83       	std	Z+2, r24	; 0x02
   19964:	93 83       	std	Z+3, r25	; 0x03
   19966:	de 01       	movw	r26, r28
   19968:	ac 59       	subi	r26, 0x9C	; 156
   1996a:	bf 4f       	sbci	r27, 0xFF	; 255
   1996c:	f8 01       	movw	r30, r16
   1996e:	74 96       	adiw	r30, 0x14	; 20
   19970:	86 e0       	ldi	r24, 0x06	; 6
   19972:	01 90       	ld	r0, Z+
   19974:	0d 92       	st	X+, r0
   19976:	8a 95       	dec	r24
   19978:	e1 f7       	brne	.-8      	; 0x19972 <lif_str2dir+0x72>
   1997a:	42 e0       	ldi	r20, 0x02	; 2
   1997c:	50 e0       	ldi	r21, 0x00	; 0
   1997e:	6a e1       	ldi	r22, 0x1A	; 26
   19980:	70 e0       	ldi	r23, 0x00	; 0
   19982:	c8 01       	movw	r24, r16
   19984:	0e 94 e3 b6 	call	0x16dc6	; 0x16dc6 <B2V_MSB>
   19988:	fe 01       	movw	r30, r28
   1998a:	e6 59       	subi	r30, 0x96	; 150
   1998c:	ff 4f       	sbci	r31, 0xFF	; 255
   1998e:	71 83       	std	Z+1, r23	; 0x01
   19990:	60 83       	st	Z, r22
   19992:	42 e0       	ldi	r20, 0x02	; 2
   19994:	50 e0       	ldi	r21, 0x00	; 0
   19996:	6c e1       	ldi	r22, 0x1C	; 28
   19998:	70 e0       	ldi	r23, 0x00	; 0
   1999a:	c8 01       	movw	r24, r16
   1999c:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <B2V_LSB>
   199a0:	fe 01       	movw	r30, r28
   199a2:	e4 59       	subi	r30, 0x94	; 148
   199a4:	ff 4f       	sbci	r31, 0xFF	; 255
   199a6:	71 83       	std	Z+1, r23	; 0x01
   199a8:	60 83       	st	Z, r22
   199aa:	42 e0       	ldi	r20, 0x02	; 2
   199ac:	50 e0       	ldi	r21, 0x00	; 0
   199ae:	6e e1       	ldi	r22, 0x1E	; 30
   199b0:	70 e0       	ldi	r23, 0x00	; 0
   199b2:	c8 01       	movw	r24, r16
   199b4:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <B2V_LSB>
   199b8:	c2 59       	subi	r28, 0x92	; 146
   199ba:	df 4f       	sbci	r29, 0xFF	; 255
   199bc:	79 83       	std	Y+1, r23	; 0x01
   199be:	68 83       	st	Y, r22
   199c0:	df 91       	pop	r29
   199c2:	cf 91       	pop	r28
   199c4:	1f 91       	pop	r17
   199c6:	0f 91       	pop	r16
   199c8:	08 95       	ret

000199ca <lif_BIN2BCD>:
   199ca:	6a e0       	ldi	r22, 0x0A	; 10
   199cc:	0e 94 7b ea 	call	0x1d4f6	; 0x1d4f6 <__udivmodqi4>
   199d0:	82 95       	swap	r24
   199d2:	80 7f       	andi	r24, 0xF0	; 240
   199d4:	89 2b       	or	r24, r25
   199d6:	08 95       	ret

000199d8 <lif_BCD2BIN>:
   199d8:	28 2f       	mov	r18, r24
   199da:	22 95       	swap	r18
   199dc:	2f 70       	andi	r18, 0x0F	; 15
   199de:	8f 70       	andi	r24, 0x0F	; 15
   199e0:	90 e0       	ldi	r25, 0x00	; 0
   199e2:	3a e0       	ldi	r19, 0x0A	; 10
   199e4:	23 9f       	mul	r18, r19
   199e6:	80 0d       	add	r24, r0
   199e8:	91 1d       	adc	r25, r1
   199ea:	11 24       	eor	r1, r1
   199ec:	08 95       	ret

000199ee <lif_time2lifbcd>:
   199ee:	aa e1       	ldi	r26, 0x1A	; 26
   199f0:	b0 e0       	ldi	r27, 0x00	; 0
   199f2:	ed ef       	ldi	r30, 0xFD	; 253
   199f4:	fc ec       	ldi	r31, 0xCC	; 204
   199f6:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
   199fa:	8b 01       	movw	r16, r22
   199fc:	9c 01       	movw	r18, r24
   199fe:	6f 8b       	std	Y+23, r22	; 0x17
   19a00:	78 8f       	std	Y+24, r23	; 0x18
   19a02:	89 8f       	std	Y+25, r24	; 0x19
   19a04:	9a 8f       	std	Y+26, r25	; 0x1a
   19a06:	67 2b       	or	r22, r23
   19a08:	68 2b       	or	r22, r24
   19a0a:	69 2b       	or	r22, r25
   19a0c:	41 f4       	brne	.+16     	; 0x19a1e <lif_time2lifbcd+0x30>
   19a0e:	fa 01       	movw	r30, r20
   19a10:	ca 01       	movw	r24, r20
   19a12:	06 96       	adiw	r24, 0x06	; 6
   19a14:	11 92       	st	Z+, r1
   19a16:	e8 17       	cp	r30, r24
   19a18:	f9 07       	cpc	r31, r25
   19a1a:	e1 f7       	brne	.-8      	; 0x19a14 <lif_time2lifbcd+0x26>
   19a1c:	26 c0       	rjmp	.+76     	; 0x19a6a <lif_time2lifbcd+0x7c>
   19a1e:	8a 01       	movw	r16, r20
   19a20:	be 01       	movw	r22, r28
   19a22:	6f 5f       	subi	r22, 0xFF	; 255
   19a24:	7f 4f       	sbci	r23, 0xFF	; 255
   19a26:	ce 01       	movw	r24, r28
   19a28:	47 96       	adiw	r24, 0x17	; 23
   19a2a:	0e 94 ef 37 	call	0x6fde	; 0x6fde <gmtime_r>
   19a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
   19a30:	9c 85       	ldd	r25, Y+12	; 0x0c
   19a32:	64 e6       	ldi	r22, 0x64	; 100
   19a34:	70 e0       	ldi	r23, 0x00	; 0
   19a36:	0e 94 9b ea 	call	0x1d536	; 0x1d536 <__divmodhi4>
   19a3a:	c7 df       	rcall	.-114    	; 0x199ca <lif_BIN2BCD>
   19a3c:	f8 01       	movw	r30, r16
   19a3e:	80 83       	st	Z, r24
   19a40:	89 85       	ldd	r24, Y+9	; 0x09
   19a42:	8f 5f       	subi	r24, 0xFF	; 255
   19a44:	c2 df       	rcall	.-124    	; 0x199ca <lif_BIN2BCD>
   19a46:	f8 01       	movw	r30, r16
   19a48:	81 83       	std	Z+1, r24	; 0x01
   19a4a:	8f 81       	ldd	r24, Y+7	; 0x07
   19a4c:	be df       	rcall	.-132    	; 0x199ca <lif_BIN2BCD>
   19a4e:	f8 01       	movw	r30, r16
   19a50:	82 83       	std	Z+2, r24	; 0x02
   19a52:	8d 81       	ldd	r24, Y+5	; 0x05
   19a54:	ba df       	rcall	.-140    	; 0x199ca <lif_BIN2BCD>
   19a56:	f8 01       	movw	r30, r16
   19a58:	83 83       	std	Z+3, r24	; 0x03
   19a5a:	8b 81       	ldd	r24, Y+3	; 0x03
   19a5c:	b6 df       	rcall	.-148    	; 0x199ca <lif_BIN2BCD>
   19a5e:	f8 01       	movw	r30, r16
   19a60:	84 83       	std	Z+4, r24	; 0x04
   19a62:	89 81       	ldd	r24, Y+1	; 0x01
   19a64:	b2 df       	rcall	.-156    	; 0x199ca <lif_BIN2BCD>
   19a66:	f8 01       	movw	r30, r16
   19a68:	85 83       	std	Z+5, r24	; 0x05
   19a6a:	6a 96       	adiw	r28, 0x1a	; 26
   19a6c:	e4 e0       	ldi	r30, 0x04	; 4
   19a6e:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

00019a72 <lif_lifbcd2time>:
   19a72:	a6 e1       	ldi	r26, 0x16	; 22
   19a74:	b0 e0       	ldi	r27, 0x00	; 0
   19a76:	ef e3       	ldi	r30, 0x3F	; 63
   19a78:	fd ec       	ldi	r31, 0xCD	; 205
   19a7a:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   19a7e:	8c 01       	movw	r16, r24
   19a80:	7c 01       	movw	r14, r24
   19a82:	5c 01       	movw	r10, r24
   19a84:	26 e0       	ldi	r18, 0x06	; 6
   19a86:	a2 0e       	add	r10, r18
   19a88:	b1 1c       	adc	r11, r1
   19a8a:	cc 24       	eor	r12, r12
   19a8c:	c3 94       	inc	r12
   19a8e:	d1 2c       	mov	r13, r1
   19a90:	f7 01       	movw	r30, r14
   19a92:	81 91       	ld	r24, Z+
   19a94:	7f 01       	movw	r14, r30
   19a96:	a0 df       	rcall	.-192    	; 0x199d8 <lif_BCD2BIN>
   19a98:	89 2b       	or	r24, r25
   19a9a:	11 f0       	breq	.+4      	; 0x19aa0 <lif_lifbcd2time+0x2e>
   19a9c:	c1 2c       	mov	r12, r1
   19a9e:	d1 2c       	mov	r13, r1
   19aa0:	ea 14       	cp	r14, r10
   19aa2:	fb 04       	cpc	r15, r11
   19aa4:	a9 f7       	brne	.-22     	; 0x19a90 <lif_lifbcd2time+0x1e>
   19aa6:	c1 14       	cp	r12, r1
   19aa8:	d1 04       	cpc	r13, r1
   19aaa:	61 f5       	brne	.+88     	; 0x19b04 <lif_lifbcd2time+0x92>
   19aac:	f8 01       	movw	r30, r16
   19aae:	80 81       	ld	r24, Z
   19ab0:	93 df       	rcall	.-218    	; 0x199d8 <lif_BCD2BIN>
   19ab2:	7c 01       	movw	r14, r24
   19ab4:	f8 01       	movw	r30, r16
   19ab6:	81 81       	ldd	r24, Z+1	; 0x01
   19ab8:	8f df       	rcall	.-226    	; 0x199d8 <lif_BCD2BIN>
   19aba:	01 97       	sbiw	r24, 0x01	; 1
   19abc:	f6 e4       	ldi	r31, 0x46	; 70
   19abe:	ef 16       	cp	r14, r31
   19ac0:	f1 04       	cpc	r15, r1
   19ac2:	1c f4       	brge	.+6      	; 0x19aca <lif_lifbcd2time+0x58>
   19ac4:	24 e6       	ldi	r18, 0x64	; 100
   19ac6:	e2 0e       	add	r14, r18
   19ac8:	f1 1c       	adc	r15, r1
   19aca:	fc 86       	std	Y+12, r15	; 0x0c
   19acc:	eb 86       	std	Y+11, r14	; 0x0b
   19ace:	9a 87       	std	Y+10, r25	; 0x0a
   19ad0:	89 87       	std	Y+9, r24	; 0x09
   19ad2:	f8 01       	movw	r30, r16
   19ad4:	82 81       	ldd	r24, Z+2	; 0x02
   19ad6:	80 df       	rcall	.-256    	; 0x199d8 <lif_BCD2BIN>
   19ad8:	98 87       	std	Y+8, r25	; 0x08
   19ada:	8f 83       	std	Y+7, r24	; 0x07
   19adc:	f8 01       	movw	r30, r16
   19ade:	83 81       	ldd	r24, Z+3	; 0x03
   19ae0:	7b df       	rcall	.-266    	; 0x199d8 <lif_BCD2BIN>
   19ae2:	9e 83       	std	Y+6, r25	; 0x06
   19ae4:	8d 83       	std	Y+5, r24	; 0x05
   19ae6:	f8 01       	movw	r30, r16
   19ae8:	84 81       	ldd	r24, Z+4	; 0x04
   19aea:	76 df       	rcall	.-276    	; 0x199d8 <lif_BCD2BIN>
   19aec:	9c 83       	std	Y+4, r25	; 0x04
   19aee:	8b 83       	std	Y+3, r24	; 0x03
   19af0:	f8 01       	movw	r30, r16
   19af2:	85 81       	ldd	r24, Z+5	; 0x05
   19af4:	71 df       	rcall	.-286    	; 0x199d8 <lif_BCD2BIN>
   19af6:	9a 83       	std	Y+2, r25	; 0x02
   19af8:	89 83       	std	Y+1, r24	; 0x01
   19afa:	ce 01       	movw	r24, r28
   19afc:	01 96       	adiw	r24, 0x01	; 1
   19afe:	0e 94 c4 3a 	call	0x7588	; 0x7588 <timegm>
   19b02:	03 c0       	rjmp	.+6      	; 0x19b0a <lif_lifbcd2time+0x98>
   19b04:	60 e0       	ldi	r22, 0x00	; 0
   19b06:	70 e0       	ldi	r23, 0x00	; 0
   19b08:	cb 01       	movw	r24, r22
   19b0a:	66 96       	adiw	r28, 0x16	; 22
   19b0c:	ea e0       	ldi	r30, 0x0A	; 10
   19b0e:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

00019b12 <lif_ctime_gmt>:
   19b12:	a6 e1       	ldi	r26, 0x16	; 22
   19b14:	b0 e0       	ldi	r27, 0x00	; 0
   19b16:	ef e8       	ldi	r30, 0x8F	; 143
   19b18:	fd ec       	ldi	r31, 0xCD	; 205
   19b1a:	0c 94 29 eb 	jmp	0x1d652	; 0x1d652 <__prologue_saves__+0x1c>
   19b1e:	20 e2       	ldi	r18, 0x20	; 32
   19b20:	e4 ed       	ldi	r30, 0xD4	; 212
   19b22:	f9 e1       	ldi	r31, 0x19	; 25
   19b24:	df 01       	movw	r26, r30
   19b26:	1d 92       	st	X+, r1
   19b28:	2a 95       	dec	r18
   19b2a:	e9 f7       	brne	.-6      	; 0x19b26 <lif_ctime_gmt+0x14>
   19b2c:	be 01       	movw	r22, r28
   19b2e:	6f 5f       	subi	r22, 0xFF	; 255
   19b30:	7f 4f       	sbci	r23, 0xFF	; 255
   19b32:	0e 94 ef 37 	call	0x6fde	; 0x6fde <gmtime_r>
   19b36:	64 ed       	ldi	r22, 0xD4	; 212
   19b38:	79 e1       	ldi	r23, 0x19	; 25
   19b3a:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <asctime_r>
   19b3e:	8c 01       	movw	r16, r24
   19b40:	0e 94 4a 32 	call	0x6494	; 0x6494 <trim_tail>
   19b44:	c8 01       	movw	r24, r16
   19b46:	66 96       	adiw	r28, 0x16	; 22
   19b48:	e4 e0       	ldi	r30, 0x04	; 4
   19b4a:	0c 94 45 eb 	jmp	0x1d68a	; 0x1d68a <__epilogue_restores__+0x1c>

00019b4e <lif_lifbcd2timestr>:
   19b4e:	a4 e0       	ldi	r26, 0x04	; 4
   19b50:	b0 e0       	ldi	r27, 0x00	; 0
   19b52:	ed ea       	ldi	r30, 0xAD	; 173
   19b54:	fd ec       	ldi	r31, 0xCD	; 205
   19b56:	0c 94 2b eb 	jmp	0x1d656	; 0x1d656 <__prologue_saves__+0x20>
   19b5a:	20 e2       	ldi	r18, 0x20	; 32
   19b5c:	e4 eb       	ldi	r30, 0xB4	; 180
   19b5e:	f9 e1       	ldi	r31, 0x19	; 25
   19b60:	df 01       	movw	r26, r30
   19b62:	1d 92       	st	X+, r1
   19b64:	2a 95       	dec	r18
   19b66:	e9 f7       	brne	.-6      	; 0x19b62 <lif_lifbcd2timestr+0x14>
   19b68:	84 df       	rcall	.-248    	; 0x19a72 <lif_lifbcd2time>
   19b6a:	69 83       	std	Y+1, r22	; 0x01
   19b6c:	7a 83       	std	Y+2, r23	; 0x02
   19b6e:	8b 83       	std	Y+3, r24	; 0x03
   19b70:	9c 83       	std	Y+4, r25	; 0x04
   19b72:	67 2b       	or	r22, r23
   19b74:	68 2b       	or	r22, r24
   19b76:	69 2b       	or	r22, r25
   19b78:	29 f0       	breq	.+10     	; 0x19b84 <lif_lifbcd2timestr+0x36>
   19b7a:	ce 01       	movw	r24, r28
   19b7c:	01 96       	adiw	r24, 0x01	; 1
   19b7e:	c9 df       	rcall	.-110    	; 0x19b12 <lif_ctime_gmt>
   19b80:	bc 01       	movw	r22, r24
   19b82:	02 c0       	rjmp	.+4      	; 0x19b88 <lif_lifbcd2timestr+0x3a>
   19b84:	68 ea       	ldi	r22, 0xA8	; 168
   19b86:	75 e1       	ldi	r23, 0x15	; 21
   19b88:	84 eb       	ldi	r24, 0xB4	; 180
   19b8a:	99 e1       	ldi	r25, 0x19	; 25
   19b8c:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <strcpy>
   19b90:	84 eb       	ldi	r24, 0xB4	; 180
   19b92:	99 e1       	ldi	r25, 0x19	; 25
   19b94:	24 96       	adiw	r28, 0x04	; 4
   19b96:	e2 e0       	ldi	r30, 0x02	; 2
   19b98:	0c 94 47 eb 	jmp	0x1d68e	; 0x1d68e <__epilogue_restores__+0x20>

00019b9c <lif_image_clear>:
   19b9c:	20 e7       	ldi	r18, 0x70	; 112
   19b9e:	fc 01       	movw	r30, r24
   19ba0:	11 92       	st	Z+, r1
   19ba2:	2a 95       	dec	r18
   19ba4:	e9 f7       	brne	.-6      	; 0x19ba0 <lif_image_clear+0x4>
   19ba6:	08 95       	ret

00019ba8 <lif_dir_clear>:
   19ba8:	81 5b       	subi	r24, 0xB1	; 177
   19baa:	9f 4f       	sbci	r25, 0xFF	; 255
   19bac:	21 e2       	ldi	r18, 0x21	; 33
   19bae:	fc 01       	movw	r30, r24
   19bb0:	11 92       	st	Z+, r1
   19bb2:	2a 95       	dec	r18
   19bb4:	e9 f7       	brne	.-6      	; 0x19bb0 <lif_dir_clear+0x8>
   19bb6:	08 95       	ret

00019bb8 <lif_vol_clear>:
   19bb8:	84 96       	adiw	r24, 0x24	; 36
   19bba:	2b e2       	ldi	r18, 0x2B	; 43
   19bbc:	fc 01       	movw	r30, r24
   19bbe:	11 92       	st	Z+, r1
   19bc0:	2a 95       	dec	r18
   19bc2:	e9 f7       	brne	.-6      	; 0x19bbe <lif_vol_clear+0x6>
   19bc4:	08 95       	ret

00019bc6 <lif_dump_vol>:
   19bc6:	cf 93       	push	r28
   19bc8:	df 93       	push	r29
   19bca:	ec 01       	movw	r28, r24
   19bcc:	7f 93       	push	r23
   19bce:	6f 93       	push	r22
   19bd0:	8b eb       	ldi	r24, 0xBB	; 187
   19bd2:	92 e4       	ldi	r25, 0x42	; 66
   19bd4:	1f 92       	push	r1
   19bd6:	9f 93       	push	r25
   19bd8:	8f 93       	push	r24
   19bda:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19bde:	89 81       	ldd	r24, Y+1	; 0x01
   19be0:	8f 93       	push	r24
   19be2:	88 81       	ld	r24, Y
   19be4:	8f 93       	push	r24
   19be6:	81 ea       	ldi	r24, 0xA1	; 161
   19be8:	92 e4       	ldi	r25, 0x42	; 66
   19bea:	1f 92       	push	r1
   19bec:	9f 93       	push	r25
   19bee:	8f 93       	push	r24
   19bf0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19bf4:	8f 81       	ldd	r24, Y+7	; 0x07
   19bf6:	8f 93       	push	r24
   19bf8:	8e 81       	ldd	r24, Y+6	; 0x06
   19bfa:	8f 93       	push	r24
   19bfc:	8d 81       	ldd	r24, Y+5	; 0x05
   19bfe:	8f 93       	push	r24
   19c00:	8c 81       	ldd	r24, Y+4	; 0x04
   19c02:	8f 93       	push	r24
   19c04:	84 e8       	ldi	r24, 0x84	; 132
   19c06:	92 e4       	ldi	r25, 0x42	; 66
   19c08:	1f 92       	push	r1
   19c0a:	9f 93       	push	r25
   19c0c:	8f 93       	push	r24
   19c0e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19c12:	8b 85       	ldd	r24, Y+11	; 0x0b
   19c14:	8f 93       	push	r24
   19c16:	8a 85       	ldd	r24, Y+10	; 0x0a
   19c18:	8f 93       	push	r24
   19c1a:	89 85       	ldd	r24, Y+9	; 0x09
   19c1c:	8f 93       	push	r24
   19c1e:	88 85       	ldd	r24, Y+8	; 0x08
   19c20:	8f 93       	push	r24
   19c22:	87 e6       	ldi	r24, 0x67	; 103
   19c24:	92 e4       	ldi	r25, 0x42	; 66
   19c26:	1f 92       	push	r1
   19c28:	9f 93       	push	r25
   19c2a:	8f 93       	push	r24
   19c2c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19c30:	8f 85       	ldd	r24, Y+15	; 0x0f
   19c32:	8f 93       	push	r24
   19c34:	8e 85       	ldd	r24, Y+14	; 0x0e
   19c36:	8f 93       	push	r24
   19c38:	8d 85       	ldd	r24, Y+13	; 0x0d
   19c3a:	8f 93       	push	r24
   19c3c:	8c 85       	ldd	r24, Y+12	; 0x0c
   19c3e:	8f 93       	push	r24
   19c40:	8a e4       	ldi	r24, 0x4A	; 74
   19c42:	92 e4       	ldi	r25, 0x42	; 66
   19c44:	1f 92       	push	r1
   19c46:	9f 93       	push	r25
   19c48:	8f 93       	push	r24
   19c4a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19c4e:	8b 89       	ldd	r24, Y+19	; 0x13
   19c50:	8f 93       	push	r24
   19c52:	8a 89       	ldd	r24, Y+18	; 0x12
   19c54:	8f 93       	push	r24
   19c56:	89 89       	ldd	r24, Y+17	; 0x11
   19c58:	8f 93       	push	r24
   19c5a:	88 89       	ldd	r24, Y+16	; 0x10
   19c5c:	8f 93       	push	r24
   19c5e:	8d e2       	ldi	r24, 0x2D	; 45
   19c60:	92 e4       	ldi	r25, 0x42	; 66
   19c62:	1f 92       	push	r1
   19c64:	9f 93       	push	r25
   19c66:	8f 93       	push	r24
   19c68:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19c6c:	8d b7       	in	r24, 0x3d	; 61
   19c6e:	9e b7       	in	r25, 0x3e	; 62
   19c70:	86 96       	adiw	r24, 0x26	; 38
   19c72:	0f b6       	in	r0, 0x3f	; 63
   19c74:	f8 94       	cli
   19c76:	9e bf       	out	0x3e, r25	; 62
   19c78:	0f be       	out	0x3f, r0	; 63
   19c7a:	8d bf       	out	0x3d, r24	; 61
   19c7c:	8f 89       	ldd	r24, Y+23	; 0x17
   19c7e:	8f 93       	push	r24
   19c80:	8e 89       	ldd	r24, Y+22	; 0x16
   19c82:	8f 93       	push	r24
   19c84:	8d 89       	ldd	r24, Y+21	; 0x15
   19c86:	8f 93       	push	r24
   19c88:	8c 89       	ldd	r24, Y+20	; 0x14
   19c8a:	8f 93       	push	r24
   19c8c:	80 e1       	ldi	r24, 0x10	; 16
   19c8e:	92 e4       	ldi	r25, 0x42	; 66
   19c90:	1f 92       	push	r1
   19c92:	9f 93       	push	r25
   19c94:	8f 93       	push	r24
   19c96:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19c9c:	8f 93       	push	r24
   19c9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19ca0:	8f 93       	push	r24
   19ca2:	89 8d       	ldd	r24, Y+25	; 0x19
   19ca4:	8f 93       	push	r24
   19ca6:	88 8d       	ldd	r24, Y+24	; 0x18
   19ca8:	8f 93       	push	r24
   19caa:	83 ef       	ldi	r24, 0xF3	; 243
   19cac:	91 e4       	ldi	r25, 0x41	; 65
   19cae:	1f 92       	push	r1
   19cb0:	9f 93       	push	r25
   19cb2:	8f 93       	push	r24
   19cb4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19cb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19cba:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19cbc:	09 2e       	mov	r0, r25
   19cbe:	00 0c       	add	r0, r0
   19cc0:	aa 0b       	sbc	r26, r26
   19cc2:	bb 0b       	sbc	r27, r27
   19cc4:	bf 93       	push	r27
   19cc6:	af 93       	push	r26
   19cc8:	9f 93       	push	r25
   19cca:	8f 93       	push	r24
   19ccc:	86 ed       	ldi	r24, 0xD6	; 214
   19cce:	91 e4       	ldi	r25, 0x41	; 65
   19cd0:	1f 92       	push	r1
   19cd2:	9f 93       	push	r25
   19cd4:	8f 93       	push	r24
   19cd6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19cda:	8e 8d       	ldd	r24, Y+30	; 0x1e
   19cdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
   19cde:	09 2e       	mov	r0, r25
   19ce0:	00 0c       	add	r0, r0
   19ce2:	aa 0b       	sbc	r26, r26
   19ce4:	bb 0b       	sbc	r27, r27
   19ce6:	bf 93       	push	r27
   19ce8:	af 93       	push	r26
   19cea:	9f 93       	push	r25
   19cec:	8f 93       	push	r24
   19cee:	89 eb       	ldi	r24, 0xB9	; 185
   19cf0:	91 e4       	ldi	r25, 0x41	; 65
   19cf2:	1f 92       	push	r1
   19cf4:	9f 93       	push	r25
   19cf6:	8f 93       	push	r24
   19cf8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19cfc:	ce 01       	movw	r24, r28
   19cfe:	86 96       	adiw	r24, 0x26	; 38
   19d00:	9f 93       	push	r25
   19d02:	8f 93       	push	r24
   19d04:	8f e9       	ldi	r24, 0x9F	; 159
   19d06:	91 e4       	ldi	r25, 0x41	; 65
   19d08:	1f 92       	push	r1
   19d0a:	9f 93       	push	r25
   19d0c:	8f 93       	push	r24
   19d0e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19d12:	8d b7       	in	r24, 0x3d	; 61
   19d14:	9e b7       	in	r25, 0x3e	; 62
   19d16:	81 96       	adiw	r24, 0x21	; 33
   19d18:	0f b6       	in	r0, 0x3f	; 63
   19d1a:	f8 94       	cli
   19d1c:	9e bf       	out	0x3e, r25	; 62
   19d1e:	0f be       	out	0x3f, r0	; 63
   19d20:	8d bf       	out	0x3d, r24	; 61
   19d22:	8d a1       	ldd	r24, Y+37	; 0x25
   19d24:	8f 93       	push	r24
   19d26:	8c a1       	ldd	r24, Y+36	; 0x24
   19d28:	8f 93       	push	r24
   19d2a:	83 e8       	ldi	r24, 0x83	; 131
   19d2c:	91 e4       	ldi	r25, 0x41	; 65
   19d2e:	1f 92       	push	r1
   19d30:	9f 93       	push	r25
   19d32:	8f 93       	push	r24
   19d34:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19d38:	88 a9       	ldd	r24, Y+48	; 0x30
   19d3a:	8f 93       	push	r24
   19d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
   19d3e:	8f 93       	push	r24
   19d40:	8e a5       	ldd	r24, Y+46	; 0x2e
   19d42:	8f 93       	push	r24
   19d44:	8d a5       	ldd	r24, Y+45	; 0x2d
   19d46:	8f 93       	push	r24
   19d48:	86 e6       	ldi	r24, 0x66	; 102
   19d4a:	91 e4       	ldi	r25, 0x41	; 65
   19d4c:	1f 92       	push	r1
   19d4e:	9f 93       	push	r25
   19d50:	8f 93       	push	r24
   19d52:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19d56:	88 ad       	ldd	r24, Y+56	; 0x38
   19d58:	8f 93       	push	r24
   19d5a:	8f a9       	ldd	r24, Y+55	; 0x37
   19d5c:	8f 93       	push	r24
   19d5e:	8e a9       	ldd	r24, Y+54	; 0x36
   19d60:	8f 93       	push	r24
   19d62:	8d a9       	ldd	r24, Y+53	; 0x35
   19d64:	8f 93       	push	r24
   19d66:	89 e4       	ldi	r24, 0x49	; 73
   19d68:	91 e4       	ldi	r25, 0x41	; 65
   19d6a:	1f 92       	push	r1
   19d6c:	9f 93       	push	r25
   19d6e:	8f 93       	push	r24
   19d70:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19d74:	8a a9       	ldd	r24, Y+50	; 0x32
   19d76:	8f 93       	push	r24
   19d78:	89 a9       	ldd	r24, Y+49	; 0x31
   19d7a:	8f 93       	push	r24
   19d7c:	8d e2       	ldi	r24, 0x2D	; 45
   19d7e:	91 e4       	ldi	r25, 0x41	; 65
   19d80:	1f 92       	push	r1
   19d82:	9f 93       	push	r25
   19d84:	8f 93       	push	r24
   19d86:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19d8a:	8a ad       	ldd	r24, Y+58	; 0x3a
   19d8c:	8f 93       	push	r24
   19d8e:	89 ad       	ldd	r24, Y+57	; 0x39
   19d90:	8f 93       	push	r24
   19d92:	81 e1       	ldi	r24, 0x11	; 17
   19d94:	91 e4       	ldi	r25, 0x41	; 65
   19d96:	1f 92       	push	r1
   19d98:	9f 93       	push	r25
   19d9a:	8f 93       	push	r24
   19d9c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19da0:	ce 01       	movw	r24, r28
   19da2:	87 5b       	subi	r24, 0xB7	; 183
   19da4:	9f 4f       	sbci	r25, 0xFF	; 255
   19da6:	d3 de       	rcall	.-602    	; 0x19b4e <lif_lifbcd2timestr>
   19da8:	9f 93       	push	r25
   19daa:	8f 93       	push	r24
   19dac:	87 ef       	ldi	r24, 0xF7	; 247
   19dae:	90 e4       	ldi	r25, 0x40	; 64
   19db0:	1f 92       	push	r1
   19db2:	9f 93       	push	r25
   19db4:	8f 93       	push	r24
   19db6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19dba:	8d b7       	in	r24, 0x3d	; 61
   19dbc:	9e b7       	in	r25, 0x3e	; 62
   19dbe:	82 96       	adiw	r24, 0x22	; 34
   19dc0:	0f b6       	in	r0, 0x3f	; 63
   19dc2:	f8 94       	cli
   19dc4:	9e bf       	out	0x3e, r25	; 62
   19dc6:	0f be       	out	0x3f, r0	; 63
   19dc8:	8d bf       	out	0x3d, r24	; 61
   19dca:	ce 01       	movw	r24, r28
   19dcc:	81 5b       	subi	r24, 0xB1	; 177
   19dce:	9f 4f       	sbci	r25, 0xFF	; 255
   19dd0:	9f 93       	push	r25
   19dd2:	8f 93       	push	r24
   19dd4:	8d ed       	ldi	r24, 0xDD	; 221
   19dd6:	90 e4       	ldi	r25, 0x40	; 64
   19dd8:	1f 92       	push	r1
   19dda:	9f 93       	push	r25
   19ddc:	8f 93       	push	r24
   19dde:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19de2:	fe 01       	movw	r30, r28
   19de4:	e6 5a       	subi	r30, 0xA6	; 166
   19de6:	ff 4f       	sbci	r31, 0xFF	; 255
   19de8:	81 81       	ldd	r24, Z+1	; 0x01
   19dea:	8f 93       	push	r24
   19dec:	80 81       	ld	r24, Z
   19dee:	8f 93       	push	r24
   19df0:	81 ec       	ldi	r24, 0xC1	; 193
   19df2:	90 e4       	ldi	r25, 0x40	; 64
   19df4:	1f 92       	push	r1
   19df6:	9f 93       	push	r25
   19df8:	8f 93       	push	r24
   19dfa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19dfe:	fe 01       	movw	r30, r28
   19e00:	e6 59       	subi	r30, 0x96	; 150
   19e02:	ff 4f       	sbci	r31, 0xFF	; 255
   19e04:	81 81       	ldd	r24, Z+1	; 0x01
   19e06:	8f 93       	push	r24
   19e08:	80 81       	ld	r24, Z
   19e0a:	8f 93       	push	r24
   19e0c:	85 ea       	ldi	r24, 0xA5	; 165
   19e0e:	90 e4       	ldi	r25, 0x40	; 64
   19e10:	1f 92       	push	r1
   19e12:	9f 93       	push	r25
   19e14:	8f 93       	push	r24
   19e16:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19e1a:	fe 01       	movw	r30, r28
   19e1c:	e4 5a       	subi	r30, 0xA4	; 164
   19e1e:	ff 4f       	sbci	r31, 0xFF	; 255
   19e20:	83 81       	ldd	r24, Z+3	; 0x03
   19e22:	8f 93       	push	r24
   19e24:	82 81       	ldd	r24, Z+2	; 0x02
   19e26:	8f 93       	push	r24
   19e28:	81 81       	ldd	r24, Z+1	; 0x01
   19e2a:	8f 93       	push	r24
   19e2c:	80 81       	ld	r24, Z
   19e2e:	8f 93       	push	r24
   19e30:	88 e8       	ldi	r24, 0x88	; 136
   19e32:	90 e4       	ldi	r25, 0x40	; 64
   19e34:	1f 92       	push	r1
   19e36:	9f 93       	push	r25
   19e38:	8f 93       	push	r24
   19e3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19e3e:	fe 01       	movw	r30, r28
   19e40:	e0 5a       	subi	r30, 0xA0	; 160
   19e42:	ff 4f       	sbci	r31, 0xFF	; 255
   19e44:	83 81       	ldd	r24, Z+3	; 0x03
   19e46:	8f 93       	push	r24
   19e48:	82 81       	ldd	r24, Z+2	; 0x02
   19e4a:	8f 93       	push	r24
   19e4c:	81 81       	ldd	r24, Z+1	; 0x01
   19e4e:	8f 93       	push	r24
   19e50:	80 81       	ld	r24, Z
   19e52:	8f 93       	push	r24
   19e54:	8b e6       	ldi	r24, 0x6B	; 107
   19e56:	90 e4       	ldi	r25, 0x40	; 64
   19e58:	1f 92       	push	r1
   19e5a:	9f 93       	push	r25
   19e5c:	8f 93       	push	r24
   19e5e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19e62:	fe 01       	movw	r30, r28
   19e64:	e4 59       	subi	r30, 0x94	; 148
   19e66:	ff 4f       	sbci	r31, 0xFF	; 255
   19e68:	80 81       	ld	r24, Z
   19e6a:	91 81       	ldd	r25, Z+1	; 0x01
   19e6c:	1f 92       	push	r1
   19e6e:	1f 92       	push	r1
   19e70:	9f 93       	push	r25
   19e72:	8f 93       	push	r24
   19e74:	8e e4       	ldi	r24, 0x4E	; 78
   19e76:	90 e4       	ldi	r25, 0x40	; 64
   19e78:	1f 92       	push	r1
   19e7a:	9f 93       	push	r25
   19e7c:	8f 93       	push	r24
   19e7e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19e82:	8d b7       	in	r24, 0x3d	; 61
   19e84:	9e b7       	in	r25, 0x3e	; 62
   19e86:	84 96       	adiw	r24, 0x24	; 36
   19e88:	0f b6       	in	r0, 0x3f	; 63
   19e8a:	f8 94       	cli
   19e8c:	9e bf       	out	0x3e, r25	; 62
   19e8e:	0f be       	out	0x3f, r0	; 63
   19e90:	8d bf       	out	0x3d, r24	; 61
   19e92:	fe 01       	movw	r30, r28
   19e94:	e2 59       	subi	r30, 0x92	; 146
   19e96:	ff 4f       	sbci	r31, 0xFF	; 255
   19e98:	81 81       	ldd	r24, Z+1	; 0x01
   19e9a:	8f 93       	push	r24
   19e9c:	80 81       	ld	r24, Z
   19e9e:	8f 93       	push	r24
   19ea0:	82 e3       	ldi	r24, 0x32	; 50
   19ea2:	90 e4       	ldi	r25, 0x40	; 64
   19ea4:	1f 92       	push	r1
   19ea6:	9f 93       	push	r25
   19ea8:	8f 93       	push	r24
   19eaa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19eae:	ce 01       	movw	r24, r28
   19eb0:	8c 59       	subi	r24, 0x9C	; 156
   19eb2:	9f 4f       	sbci	r25, 0xFF	; 255
   19eb4:	4c de       	rcall	.-872    	; 0x19b4e <lif_lifbcd2timestr>
   19eb6:	9f 93       	push	r25
   19eb8:	8f 93       	push	r24
   19eba:	88 e1       	ldi	r24, 0x18	; 24
   19ebc:	90 e4       	ldi	r25, 0x40	; 64
   19ebe:	1f 92       	push	r1
   19ec0:	9f 93       	push	r25
   19ec2:	8f 93       	push	r24
   19ec4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19ec8:	86 e1       	ldi	r24, 0x16	; 22
   19eca:	90 e4       	ldi	r25, 0x40	; 64
   19ecc:	1f 92       	push	r1
   19ece:	9f 93       	push	r25
   19ed0:	8f 93       	push	r24
   19ed2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19ed6:	8d b7       	in	r24, 0x3d	; 61
   19ed8:	9e b7       	in	r25, 0x3e	; 62
   19eda:	0d 96       	adiw	r24, 0x0d	; 13
   19edc:	0f b6       	in	r0, 0x3f	; 63
   19ede:	f8 94       	cli
   19ee0:	9e bf       	out	0x3e, r25	; 62
   19ee2:	0f be       	out	0x3f, r0	; 63
   19ee4:	8d bf       	out	0x3d, r24	; 61
   19ee6:	df 91       	pop	r29
   19ee8:	cf 91       	pop	r28
   19eea:	08 95       	ret

00019eec <lif_check_volume>:
   19eec:	0f 93       	push	r16
   19eee:	1f 93       	push	r17
   19ef0:	cf 93       	push	r28
   19ef2:	df 93       	push	r29
   19ef4:	ec 01       	movw	r28, r24
   19ef6:	86 96       	adiw	r24, 0x26	; 38
   19ef8:	fb da       	rcall	.-2570   	; 0x194f0 <lif_checkname>
   19efa:	89 2b       	or	r24, r25
   19efc:	79 f4       	brne	.+30     	; 0x19f1c <lif_check_volume+0x30>
   19efe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19f02:	80 ff       	sbrs	r24, 0
   19f04:	0e c0       	rjmp	.+28     	; 0x19f22 <lif_check_volume+0x36>
   19f06:	87 ef       	ldi	r24, 0xF7	; 247
   19f08:	9f e3       	ldi	r25, 0x3F	; 63
   19f0a:	1f 92       	push	r1
   19f0c:	9f 93       	push	r25
   19f0e:	8f 93       	push	r24
   19f10:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19f14:	0f 90       	pop	r0
   19f16:	0f 90       	pop	r0
   19f18:	0f 90       	pop	r0
   19f1a:	03 c0       	rjmp	.+6      	; 0x19f22 <lif_check_volume+0x36>
   19f1c:	81 e0       	ldi	r24, 0x01	; 1
   19f1e:	90 e0       	ldi	r25, 0x00	; 0
   19f20:	02 c0       	rjmp	.+4      	; 0x19f26 <lif_check_volume+0x3a>
   19f22:	80 e0       	ldi	r24, 0x00	; 0
   19f24:	90 e0       	ldi	r25, 0x00	; 0
   19f26:	29 a9       	ldd	r18, Y+49	; 0x31
   19f28:	3a a9       	ldd	r19, Y+50	; 0x32
   19f2a:	21 15       	cp	r18, r1
   19f2c:	40 e1       	ldi	r20, 0x10	; 16
   19f2e:	34 07       	cpc	r19, r20
   19f30:	a1 f0       	breq	.+40     	; 0x19f5a <lif_check_volume+0x6e>
   19f32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19f36:	80 ff       	sbrs	r24, 0
   19f38:	0e c0       	rjmp	.+28     	; 0x19f56 <lif_check_volume+0x6a>
   19f3a:	3f 93       	push	r19
   19f3c:	2f 93       	push	r18
   19f3e:	8e eb       	ldi	r24, 0xBE	; 190
   19f40:	9f e3       	ldi	r25, 0x3F	; 63
   19f42:	1f 92       	push	r1
   19f44:	9f 93       	push	r25
   19f46:	8f 93       	push	r24
   19f48:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19f4c:	0f 90       	pop	r0
   19f4e:	0f 90       	pop	r0
   19f50:	0f 90       	pop	r0
   19f52:	0f 90       	pop	r0
   19f54:	0f 90       	pop	r0
   19f56:	80 e0       	ldi	r24, 0x00	; 0
   19f58:	90 e0       	ldi	r25, 0x00	; 0
   19f5a:	29 ad       	ldd	r18, Y+57	; 0x39
   19f5c:	3a ad       	ldd	r19, Y+58	; 0x3a
   19f5e:	22 30       	cpi	r18, 0x02	; 2
   19f60:	31 05       	cpc	r19, r1
   19f62:	a0 f0       	brcs	.+40     	; 0x19f8c <lif_check_volume+0xa0>
   19f64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19f68:	80 ff       	sbrs	r24, 0
   19f6a:	0e c0       	rjmp	.+28     	; 0x19f88 <lif_check_volume+0x9c>
   19f6c:	3f 93       	push	r19
   19f6e:	2f 93       	push	r18
   19f70:	86 ea       	ldi	r24, 0xA6	; 166
   19f72:	9f e3       	ldi	r25, 0x3F	; 63
   19f74:	1f 92       	push	r1
   19f76:	9f 93       	push	r25
   19f78:	8f 93       	push	r24
   19f7a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19f7e:	0f 90       	pop	r0
   19f80:	0f 90       	pop	r0
   19f82:	0f 90       	pop	r0
   19f84:	0f 90       	pop	r0
   19f86:	0f 90       	pop	r0
   19f88:	80 e0       	ldi	r24, 0x00	; 0
   19f8a:	90 e0       	ldi	r25, 0x00	; 0
   19f8c:	2b a9       	ldd	r18, Y+51	; 0x33
   19f8e:	3c a9       	ldd	r19, Y+52	; 0x34
   19f90:	23 2b       	or	r18, r19
   19f92:	81 f0       	breq	.+32     	; 0x19fb4 <lif_check_volume+0xc8>
   19f94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19f98:	80 ff       	sbrs	r24, 0
   19f9a:	0a c0       	rjmp	.+20     	; 0x19fb0 <lif_check_volume+0xc4>
   19f9c:	8d e6       	ldi	r24, 0x6D	; 109
   19f9e:	9f e3       	ldi	r25, 0x3F	; 63
   19fa0:	1f 92       	push	r1
   19fa2:	9f 93       	push	r25
   19fa4:	8f 93       	push	r24
   19fa6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19faa:	0f 90       	pop	r0
   19fac:	0f 90       	pop	r0
   19fae:	0f 90       	pop	r0
   19fb0:	80 e0       	ldi	r24, 0x00	; 0
   19fb2:	90 e0       	ldi	r25, 0x00	; 0
   19fb4:	2b ad       	ldd	r18, Y+59	; 0x3b
   19fb6:	3c ad       	ldd	r19, Y+60	; 0x3c
   19fb8:	23 2b       	or	r18, r19
   19fba:	81 f0       	breq	.+32     	; 0x19fdc <lif_check_volume+0xf0>
   19fbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19fc0:	80 ff       	sbrs	r24, 0
   19fc2:	0a c0       	rjmp	.+20     	; 0x19fd8 <lif_check_volume+0xec>
   19fc4:	84 e3       	ldi	r24, 0x34	; 52
   19fc6:	9f e3       	ldi	r25, 0x3F	; 63
   19fc8:	1f 92       	push	r1
   19fca:	9f 93       	push	r25
   19fcc:	8f 93       	push	r24
   19fce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   19fd2:	0f 90       	pop	r0
   19fd4:	0f 90       	pop	r0
   19fd6:	0f 90       	pop	r0
   19fd8:	80 e0       	ldi	r24, 0x00	; 0
   19fda:	90 e0       	ldi	r25, 0x00	; 0
   19fdc:	4d a5       	ldd	r20, Y+45	; 0x2d
   19fde:	5e a5       	ldd	r21, Y+46	; 0x2e
   19fe0:	6f a5       	ldd	r22, Y+47	; 0x2f
   19fe2:	78 a9       	ldd	r23, Y+48	; 0x30
   19fe4:	45 2b       	or	r20, r21
   19fe6:	46 2b       	or	r20, r22
   19fe8:	47 2b       	or	r20, r23
   19fea:	c9 f4       	brne	.+50     	; 0x1a01e <lif_check_volume+0x132>
   19fec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19ff0:	80 ff       	sbrs	r24, 0
   19ff2:	13 c0       	rjmp	.+38     	; 0x1a01a <lif_check_volume+0x12e>
   19ff4:	1f 92       	push	r1
   19ff6:	1f 92       	push	r1
   19ff8:	1f 92       	push	r1
   19ffa:	1f 92       	push	r1
   19ffc:	8f e0       	ldi	r24, 0x0F	; 15
   19ffe:	9f e3       	ldi	r25, 0x3F	; 63
   1a000:	1f 92       	push	r1
   1a002:	9f 93       	push	r25
   1a004:	8f 93       	push	r24
   1a006:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a00a:	8d b7       	in	r24, 0x3d	; 61
   1a00c:	9e b7       	in	r25, 0x3e	; 62
   1a00e:	07 96       	adiw	r24, 0x07	; 7
   1a010:	0f b6       	in	r0, 0x3f	; 63
   1a012:	f8 94       	cli
   1a014:	9e bf       	out	0x3e, r25	; 62
   1a016:	0f be       	out	0x3f, r0	; 63
   1a018:	8d bf       	out	0x3d, r24	; 61
   1a01a:	80 e0       	ldi	r24, 0x00	; 0
   1a01c:	90 e0       	ldi	r25, 0x00	; 0
   1a01e:	4d a9       	ldd	r20, Y+53	; 0x35
   1a020:	5e a9       	ldd	r21, Y+54	; 0x36
   1a022:	6f a9       	ldd	r22, Y+55	; 0x37
   1a024:	78 ad       	ldd	r23, Y+56	; 0x38
   1a026:	45 2b       	or	r20, r21
   1a028:	46 2b       	or	r20, r22
   1a02a:	47 2b       	or	r20, r23
   1a02c:	81 f4       	brne	.+32     	; 0x1a04e <lif_check_volume+0x162>
   1a02e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a032:	80 ff       	sbrs	r24, 0
   1a034:	0a c0       	rjmp	.+20     	; 0x1a04a <lif_check_volume+0x15e>
   1a036:	80 ee       	ldi	r24, 0xE0	; 224
   1a038:	9e e3       	ldi	r25, 0x3E	; 62
   1a03a:	1f 92       	push	r1
   1a03c:	9f 93       	push	r25
   1a03e:	8f 93       	push	r24
   1a040:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a044:	0f 90       	pop	r0
   1a046:	0f 90       	pop	r0
   1a048:	0f 90       	pop	r0
   1a04a:	80 e0       	ldi	r24, 0x00	; 0
   1a04c:	90 e0       	ldi	r25, 0x00	; 0
   1a04e:	0d a5       	ldd	r16, Y+45	; 0x2d
   1a050:	1e a5       	ldd	r17, Y+46	; 0x2e
   1a052:	2f a5       	ldd	r18, Y+47	; 0x2f
   1a054:	38 a9       	ldd	r19, Y+48	; 0x30
   1a056:	4d a9       	ldd	r20, Y+53	; 0x35
   1a058:	5e a9       	ldd	r21, Y+54	; 0x36
   1a05a:	6f a9       	ldd	r22, Y+55	; 0x37
   1a05c:	78 ad       	ldd	r23, Y+56	; 0x38
   1a05e:	40 0f       	add	r20, r16
   1a060:	51 1f       	adc	r21, r17
   1a062:	62 1f       	adc	r22, r18
   1a064:	73 1f       	adc	r23, r19
   1a066:	0c 81       	ldd	r16, Y+4	; 0x04
   1a068:	1d 81       	ldd	r17, Y+5	; 0x05
   1a06a:	2e 81       	ldd	r18, Y+6	; 0x06
   1a06c:	3f 81       	ldd	r19, Y+7	; 0x07
   1a06e:	04 17       	cp	r16, r20
   1a070:	15 07       	cpc	r17, r21
   1a072:	26 07       	cpc	r18, r22
   1a074:	37 07       	cpc	r19, r23
   1a076:	80 f4       	brcc	.+32     	; 0x1a098 <lif_check_volume+0x1ac>
   1a078:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a07c:	80 ff       	sbrs	r24, 0
   1a07e:	0a c0       	rjmp	.+20     	; 0x1a094 <lif_check_volume+0x1a8>
   1a080:	84 eb       	ldi	r24, 0xB4	; 180
   1a082:	9e e3       	ldi	r25, 0x3E	; 62
   1a084:	1f 92       	push	r1
   1a086:	9f 93       	push	r25
   1a088:	8f 93       	push	r24
   1a08a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a08e:	0f 90       	pop	r0
   1a090:	0f 90       	pop	r0
   1a092:	0f 90       	pop	r0
   1a094:	80 e0       	ldi	r24, 0x00	; 0
   1a096:	90 e0       	ldi	r25, 0x00	; 0
   1a098:	df 91       	pop	r29
   1a09a:	cf 91       	pop	r28
   1a09c:	1f 91       	pop	r17
   1a09e:	0f 91       	pop	r16
   1a0a0:	08 95       	ret

0001a0a2 <lif_check_dir>:
   1a0a2:	a4 e0       	ldi	r26, 0x04	; 4
   1a0a4:	b0 e0       	ldi	r27, 0x00	; 0
   1a0a6:	e7 e5       	ldi	r30, 0x57	; 87
   1a0a8:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0aa:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1a0ae:	6c 01       	movw	r12, r24
   1a0b0:	2a e5       	ldi	r18, 0x5A	; 90
   1a0b2:	c2 0e       	add	r12, r18
   1a0b4:	d1 1c       	adc	r13, r1
   1a0b6:	f6 01       	movw	r30, r12
   1a0b8:	20 81       	ld	r18, Z
   1a0ba:	31 81       	ldd	r19, Z+1	; 0x01
   1a0bc:	21 50       	subi	r18, 0x01	; 1
   1a0be:	31 09       	sbc	r19, r1
   1a0c0:	2e 3f       	cpi	r18, 0xFE	; 254
   1a0c2:	3f 4f       	sbci	r19, 0xFF	; 255
   1a0c4:	08 f0       	brcs	.+2      	; 0x1a0c8 <lif_check_dir+0x26>
   1a0c6:	98 c1       	rjmp	.+816    	; 0x1a3f8 <lif_check_dir+0x356>
   1a0c8:	9c 83       	std	Y+4, r25	; 0x04
   1a0ca:	8b 83       	std	Y+3, r24	; 0x03
   1a0cc:	8c 01       	movw	r16, r24
   1a0ce:	01 5b       	subi	r16, 0xB1	; 177
   1a0d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0d2:	c8 01       	movw	r24, r16
   1a0d4:	0d da       	rcall	.-3046   	; 0x194f0 <lif_checkname>
   1a0d6:	89 2b       	or	r24, r25
   1a0d8:	99 f4       	brne	.+38     	; 0x1a100 <lif_check_dir+0x5e>
   1a0da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a0de:	80 ff       	sbrs	r24, 0
   1a0e0:	12 c0       	rjmp	.+36     	; 0x1a106 <lif_check_dir+0x64>
   1a0e2:	1f 93       	push	r17
   1a0e4:	0f 93       	push	r16
   1a0e6:	83 e9       	ldi	r24, 0x93	; 147
   1a0e8:	9e e3       	ldi	r25, 0x3E	; 62
   1a0ea:	1f 92       	push	r1
   1a0ec:	9f 93       	push	r25
   1a0ee:	8f 93       	push	r24
   1a0f0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a0f4:	0f 90       	pop	r0
   1a0f6:	0f 90       	pop	r0
   1a0f8:	0f 90       	pop	r0
   1a0fa:	0f 90       	pop	r0
   1a0fc:	0f 90       	pop	r0
   1a0fe:	03 c0       	rjmp	.+6      	; 0x1a106 <lif_check_dir+0x64>
   1a100:	ee 24       	eor	r14, r14
   1a102:	e3 94       	inc	r14
   1a104:	01 c0       	rjmp	.+2      	; 0x1a108 <lif_check_dir+0x66>
   1a106:	e1 2c       	mov	r14, r1
   1a108:	f1 2c       	mov	r15, r1
   1a10a:	eb 81       	ldd	r30, Y+3	; 0x03
   1a10c:	fc 81       	ldd	r31, Y+4	; 0x04
   1a10e:	84 85       	ldd	r24, Z+12	; 0x0c
   1a110:	95 85       	ldd	r25, Z+13	; 0x0d
   1a112:	a6 85       	ldd	r26, Z+14	; 0x0e
   1a114:	b7 85       	ldd	r27, Z+15	; 0x0f
   1a116:	00 97       	sbiw	r24, 0x00	; 0
   1a118:	a1 05       	cpc	r26, r1
   1a11a:	b1 05       	cpc	r27, r1
   1a11c:	39 f1       	breq	.+78     	; 0x1a16c <lif_check_dir+0xca>
   1a11e:	e4 5a       	subi	r30, 0xA4	; 164
   1a120:	ff 4f       	sbci	r31, 0xFF	; 255
   1a122:	40 81       	ld	r20, Z
   1a124:	51 81       	ldd	r21, Z+1	; 0x01
   1a126:	62 81       	ldd	r22, Z+2	; 0x02
   1a128:	73 81       	ldd	r23, Z+3	; 0x03
   1a12a:	48 17       	cp	r20, r24
   1a12c:	59 07       	cpc	r21, r25
   1a12e:	6a 07       	cpc	r22, r26
   1a130:	7b 07       	cpc	r23, r27
   1a132:	e0 f4       	brcc	.+56     	; 0x1a16c <lif_check_dir+0xca>
   1a134:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a138:	20 ff       	sbrs	r18, 0
   1a13a:	16 c0       	rjmp	.+44     	; 0x1a168 <lif_check_dir+0xc6>
   1a13c:	bf 93       	push	r27
   1a13e:	af 93       	push	r26
   1a140:	9f 93       	push	r25
   1a142:	8f 93       	push	r24
   1a144:	7f 93       	push	r23
   1a146:	6f 93       	push	r22
   1a148:	5f 93       	push	r21
   1a14a:	4f 93       	push	r20
   1a14c:	1f 93       	push	r17
   1a14e:	0f 93       	push	r16
   1a150:	8f e4       	ldi	r24, 0x4F	; 79
   1a152:	9e e3       	ldi	r25, 0x3E	; 62
   1a154:	1f 92       	push	r1
   1a156:	9f 93       	push	r25
   1a158:	8f 93       	push	r24
   1a15a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a15e:	0f b6       	in	r0, 0x3f	; 63
   1a160:	f8 94       	cli
   1a162:	de bf       	out	0x3e, r29	; 62
   1a164:	0f be       	out	0x3f, r0	; 63
   1a166:	cd bf       	out	0x3d, r28	; 61
   1a168:	e1 2c       	mov	r14, r1
   1a16a:	f1 2c       	mov	r15, r1
   1a16c:	eb 81       	ldd	r30, Y+3	; 0x03
   1a16e:	fc 81       	ldd	r31, Y+4	; 0x04
   1a170:	44 81       	ldd	r20, Z+4	; 0x04
   1a172:	55 81       	ldd	r21, Z+5	; 0x05
   1a174:	66 81       	ldd	r22, Z+6	; 0x06
   1a176:	77 81       	ldd	r23, Z+7	; 0x07
   1a178:	41 15       	cp	r20, r1
   1a17a:	51 05       	cpc	r21, r1
   1a17c:	61 05       	cpc	r22, r1
   1a17e:	71 05       	cpc	r23, r1
   1a180:	99 f1       	breq	.+102    	; 0x1a1e8 <lif_check_dir+0x146>
   1a182:	e4 5a       	subi	r30, 0xA4	; 164
   1a184:	ff 4f       	sbci	r31, 0xFF	; 255
   1a186:	80 80       	ld	r8, Z
   1a188:	91 80       	ldd	r9, Z+1	; 0x01
   1a18a:	a2 80       	ldd	r10, Z+2	; 0x02
   1a18c:	b3 80       	ldd	r11, Z+3	; 0x03
   1a18e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a190:	fc 81       	ldd	r31, Y+4	; 0x04
   1a192:	e0 5a       	subi	r30, 0xA0	; 160
   1a194:	ff 4f       	sbci	r31, 0xFF	; 255
   1a196:	80 81       	ld	r24, Z
   1a198:	91 81       	ldd	r25, Z+1	; 0x01
   1a19a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a19c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a19e:	88 0d       	add	r24, r8
   1a1a0:	99 1d       	adc	r25, r9
   1a1a2:	aa 1d       	adc	r26, r10
   1a1a4:	bb 1d       	adc	r27, r11
   1a1a6:	48 17       	cp	r20, r24
   1a1a8:	59 07       	cpc	r21, r25
   1a1aa:	6a 07       	cpc	r22, r26
   1a1ac:	7b 07       	cpc	r23, r27
   1a1ae:	e0 f4       	brcc	.+56     	; 0x1a1e8 <lif_check_dir+0x146>
   1a1b0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a1b4:	20 ff       	sbrs	r18, 0
   1a1b6:	16 c0       	rjmp	.+44     	; 0x1a1e4 <lif_check_dir+0x142>
   1a1b8:	7f 93       	push	r23
   1a1ba:	6f 93       	push	r22
   1a1bc:	5f 93       	push	r21
   1a1be:	4f 93       	push	r20
   1a1c0:	bf 93       	push	r27
   1a1c2:	af 93       	push	r26
   1a1c4:	9f 93       	push	r25
   1a1c6:	8f 93       	push	r24
   1a1c8:	1f 93       	push	r17
   1a1ca:	0f 93       	push	r16
   1a1cc:	8e e0       	ldi	r24, 0x0E	; 14
   1a1ce:	9e e3       	ldi	r25, 0x3E	; 62
   1a1d0:	1f 92       	push	r1
   1a1d2:	9f 93       	push	r25
   1a1d4:	8f 93       	push	r24
   1a1d6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a1da:	0f b6       	in	r0, 0x3f	; 63
   1a1dc:	f8 94       	cli
   1a1de:	de bf       	out	0x3e, r29	; 62
   1a1e0:	0f be       	out	0x3f, r0	; 63
   1a1e2:	cd bf       	out	0x3d, r28	; 61
   1a1e4:	e1 2c       	mov	r14, r1
   1a1e6:	f1 2c       	mov	r15, r1
   1a1e8:	eb 81       	ldd	r30, Y+3	; 0x03
   1a1ea:	fc 81       	ldd	r31, Y+4	; 0x04
   1a1ec:	e6 59       	subi	r30, 0x96	; 150
   1a1ee:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1f0:	80 81       	ld	r24, Z
   1a1f2:	91 81       	ldd	r25, Z+1	; 0x01
   1a1f4:	81 30       	cpi	r24, 0x01	; 1
   1a1f6:	30 e8       	ldi	r19, 0x80	; 128
   1a1f8:	93 07       	cpc	r25, r19
   1a1fa:	b1 f0       	breq	.+44     	; 0x1a228 <lif_check_dir+0x186>
   1a1fc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a200:	20 ff       	sbrs	r18, 0
   1a202:	10 c0       	rjmp	.+32     	; 0x1a224 <lif_check_dir+0x182>
   1a204:	9f 93       	push	r25
   1a206:	8f 93       	push	r24
   1a208:	1f 93       	push	r17
   1a20a:	0f 93       	push	r16
   1a20c:	80 ee       	ldi	r24, 0xE0	; 224
   1a20e:	9d e3       	ldi	r25, 0x3D	; 61
   1a210:	1f 92       	push	r1
   1a212:	9f 93       	push	r25
   1a214:	8f 93       	push	r24
   1a216:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a21a:	0f b6       	in	r0, 0x3f	; 63
   1a21c:	f8 94       	cli
   1a21e:	de bf       	out	0x3e, r29	; 62
   1a220:	0f be       	out	0x3f, r0	; 63
   1a222:	cd bf       	out	0x3d, r28	; 61
   1a224:	e1 2c       	mov	r14, r1
   1a226:	f1 2c       	mov	r15, r1
   1a228:	f6 01       	movw	r30, r12
   1a22a:	80 81       	ld	r24, Z
   1a22c:	91 81       	ldd	r25, Z+1	; 0x01
   1a22e:	8c 7f       	andi	r24, 0xFC	; 252
   1a230:	80 31       	cpi	r24, 0x10	; 16
   1a232:	90 4e       	sbci	r25, 0xE0	; 224
   1a234:	09 f0       	breq	.+2      	; 0x1a238 <lif_check_dir+0x196>
   1a236:	b3 c0       	rjmp	.+358    	; 0x1a39e <lif_check_dir+0x2fc>
   1a238:	cb 80       	ldd	r12, Y+3	; 0x03
   1a23a:	dc 80       	ldd	r13, Y+4	; 0x04
   1a23c:	2c e6       	ldi	r18, 0x6C	; 108
   1a23e:	c2 0e       	add	r12, r18
   1a240:	d1 1c       	adc	r13, r1
   1a242:	f6 01       	movw	r30, r12
   1a244:	20 81       	ld	r18, Z
   1a246:	31 81       	ldd	r19, Z+1	; 0x01
   1a248:	21 15       	cp	r18, r1
   1a24a:	31 05       	cpc	r19, r1
   1a24c:	09 f4       	brne	.+2      	; 0x1a250 <lif_check_dir+0x1ae>
   1a24e:	a7 c0       	rjmp	.+334    	; 0x1a39e <lif_check_dir+0x2fc>
   1a250:	49 01       	movw	r8, r18
   1a252:	a1 2c       	mov	r10, r1
   1a254:	b1 2c       	mov	r11, r1
   1a256:	bb 27       	eor	r27, r27
   1a258:	ab 2d       	mov	r26, r11
   1a25a:	9a 2d       	mov	r25, r10
   1a25c:	89 2d       	mov	r24, r9
   1a25e:	33 27       	eor	r19, r19
   1a260:	2c 01       	movw	r4, r24
   1a262:	3d 01       	movw	r6, r26
   1a264:	21 15       	cp	r18, r1
   1a266:	31 05       	cpc	r19, r1
   1a268:	29 f0       	breq	.+10     	; 0x1a274 <lif_check_dir+0x1d2>
   1a26a:	ff ef       	ldi	r31, 0xFF	; 255
   1a26c:	4f 1a       	sub	r4, r31
   1a26e:	5f 0a       	sbc	r5, r31
   1a270:	6f 0a       	sbc	r6, r31
   1a272:	7f 0a       	sbc	r7, r31
   1a274:	2b 80       	ldd	r2, Y+3	; 0x03
   1a276:	3c 80       	ldd	r3, Y+4	; 0x04
   1a278:	40 e6       	ldi	r20, 0x60	; 96
   1a27a:	24 0e       	add	r2, r20
   1a27c:	31 1c       	adc	r3, r1
   1a27e:	f1 01       	movw	r30, r2
   1a280:	40 81       	ld	r20, Z
   1a282:	51 81       	ldd	r21, Z+1	; 0x01
   1a284:	62 81       	ldd	r22, Z+2	; 0x02
   1a286:	73 81       	ldd	r23, Z+3	; 0x03
   1a288:	44 15       	cp	r20, r4
   1a28a:	55 05       	cpc	r21, r5
   1a28c:	66 05       	cpc	r22, r6
   1a28e:	77 05       	cpc	r23, r7
   1a290:	28 f5       	brcc	.+74     	; 0x1a2dc <lif_check_dir+0x23a>
   1a292:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   1a296:	e0 ff       	sbrs	r30, 0
   1a298:	1f c0       	rjmp	.+62     	; 0x1a2d8 <lif_check_dir+0x236>
   1a29a:	23 2b       	or	r18, r19
   1a29c:	19 f0       	breq	.+6      	; 0x1a2a4 <lif_check_dir+0x202>
   1a29e:	01 96       	adiw	r24, 0x01	; 1
   1a2a0:	a1 1d       	adc	r26, r1
   1a2a2:	b1 1d       	adc	r27, r1
   1a2a4:	7f 93       	push	r23
   1a2a6:	6f 93       	push	r22
   1a2a8:	5f 93       	push	r21
   1a2aa:	4f 93       	push	r20
   1a2ac:	bf 93       	push	r27
   1a2ae:	af 93       	push	r26
   1a2b0:	9f 93       	push	r25
   1a2b2:	8f 93       	push	r24
   1a2b4:	1f 92       	push	r1
   1a2b6:	1f 92       	push	r1
   1a2b8:	9f 92       	push	r9
   1a2ba:	8f 92       	push	r8
   1a2bc:	1f 93       	push	r17
   1a2be:	0f 93       	push	r16
   1a2c0:	85 e9       	ldi	r24, 0x95	; 149
   1a2c2:	9d e3       	ldi	r25, 0x3D	; 61
   1a2c4:	1f 92       	push	r1
   1a2c6:	9f 93       	push	r25
   1a2c8:	8f 93       	push	r24
   1a2ca:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a2ce:	0f b6       	in	r0, 0x3f	; 63
   1a2d0:	f8 94       	cli
   1a2d2:	de bf       	out	0x3e, r29	; 62
   1a2d4:	0f be       	out	0x3f, r0	; 63
   1a2d6:	cd bf       	out	0x3d, r28	; 61
   1a2d8:	e1 2c       	mov	r14, r1
   1a2da:	f1 2c       	mov	r15, r1
   1a2dc:	f6 01       	movw	r30, r12
   1a2de:	20 81       	ld	r18, Z
   1a2e0:	31 81       	ldd	r19, Z+1	; 0x01
   1a2e2:	49 01       	movw	r8, r18
   1a2e4:	a1 2c       	mov	r10, r1
   1a2e6:	b1 2c       	mov	r11, r1
   1a2e8:	bb 27       	eor	r27, r27
   1a2ea:	ab 2d       	mov	r26, r11
   1a2ec:	9a 2d       	mov	r25, r10
   1a2ee:	89 2d       	mov	r24, r9
   1a2f0:	a9 01       	movw	r20, r18
   1a2f2:	55 27       	eor	r21, r21
   1a2f4:	5a 83       	std	Y+2, r21	; 0x02
   1a2f6:	49 83       	std	Y+1, r20	; 0x01
   1a2f8:	2c 01       	movw	r4, r24
   1a2fa:	3d 01       	movw	r6, r26
   1a2fc:	45 2b       	or	r20, r21
   1a2fe:	29 f0       	breq	.+10     	; 0x1a30a <lif_check_dir+0x268>
   1a300:	5f ef       	ldi	r21, 0xFF	; 255
   1a302:	45 1a       	sub	r4, r21
   1a304:	55 0a       	sbc	r5, r21
   1a306:	65 0a       	sbc	r6, r21
   1a308:	75 0a       	sbc	r7, r21
   1a30a:	f1 01       	movw	r30, r2
   1a30c:	40 81       	ld	r20, Z
   1a30e:	51 81       	ldd	r21, Z+1	; 0x01
   1a310:	62 81       	ldd	r22, Z+2	; 0x02
   1a312:	73 81       	ldd	r23, Z+3	; 0x03
   1a314:	44 16       	cp	r4, r20
   1a316:	55 06       	cpc	r5, r21
   1a318:	66 06       	cpc	r6, r22
   1a31a:	77 06       	cpc	r7, r23
   1a31c:	38 f5       	brcc	.+78     	; 0x1a36c <lif_check_dir+0x2ca>
   1a31e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a322:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a326:	32 ff       	sbrs	r19, 2
   1a328:	21 c0       	rjmp	.+66     	; 0x1a36c <lif_check_dir+0x2ca>
   1a32a:	29 81       	ldd	r18, Y+1	; 0x01
   1a32c:	3a 81       	ldd	r19, Y+2	; 0x02
   1a32e:	23 2b       	or	r18, r19
   1a330:	19 f0       	breq	.+6      	; 0x1a338 <lif_check_dir+0x296>
   1a332:	01 96       	adiw	r24, 0x01	; 1
   1a334:	a1 1d       	adc	r26, r1
   1a336:	b1 1d       	adc	r27, r1
   1a338:	7f 93       	push	r23
   1a33a:	6f 93       	push	r22
   1a33c:	5f 93       	push	r21
   1a33e:	4f 93       	push	r20
   1a340:	bf 93       	push	r27
   1a342:	af 93       	push	r26
   1a344:	9f 93       	push	r25
   1a346:	8f 93       	push	r24
   1a348:	1f 92       	push	r1
   1a34a:	1f 92       	push	r1
   1a34c:	9f 92       	push	r9
   1a34e:	8f 92       	push	r8
   1a350:	1f 93       	push	r17
   1a352:	0f 93       	push	r16
   1a354:	8a e4       	ldi	r24, 0x4A	; 74
   1a356:	9d e3       	ldi	r25, 0x3D	; 61
   1a358:	1f 92       	push	r1
   1a35a:	9f 93       	push	r25
   1a35c:	8f 93       	push	r24
   1a35e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a362:	0f b6       	in	r0, 0x3f	; 63
   1a364:	f8 94       	cli
   1a366:	de bf       	out	0x3e, r29	; 62
   1a368:	0f be       	out	0x3f, r0	; 63
   1a36a:	cd bf       	out	0x3d, r28	; 61
   1a36c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a370:	80 ff       	sbrs	r24, 0
   1a372:	15 c0       	rjmp	.+42     	; 0x1a39e <lif_check_dir+0x2fc>
   1a374:	f6 01       	movw	r30, r12
   1a376:	80 81       	ld	r24, Z
   1a378:	91 81       	ldd	r25, Z+1	; 0x01
   1a37a:	89 2b       	or	r24, r25
   1a37c:	81 f4       	brne	.+32     	; 0x1a39e <lif_check_dir+0x2fc>
   1a37e:	1f 93       	push	r17
   1a380:	0f 93       	push	r16
   1a382:	8f e1       	ldi	r24, 0x1F	; 31
   1a384:	9d e3       	ldi	r25, 0x3D	; 61
   1a386:	1f 92       	push	r1
   1a388:	9f 93       	push	r25
   1a38a:	8f 93       	push	r24
   1a38c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a390:	0f 90       	pop	r0
   1a392:	0f 90       	pop	r0
   1a394:	0f 90       	pop	r0
   1a396:	0f 90       	pop	r0
   1a398:	0f 90       	pop	r0
   1a39a:	e1 2c       	mov	r14, r1
   1a39c:	f1 2c       	mov	r15, r1
   1a39e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3a0:	fc 81       	ldd	r31, Y+4	; 0x04
   1a3a2:	e2 59       	subi	r30, 0x92	; 146
   1a3a4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3a6:	20 81       	ld	r18, Z
   1a3a8:	31 81       	ldd	r19, Z+1	; 0x01
   1a3aa:	21 15       	cp	r18, r1
   1a3ac:	f1 e0       	ldi	r31, 0x01	; 1
   1a3ae:	3f 07       	cpc	r19, r31
   1a3b0:	31 f1       	breq	.+76     	; 0x1a3fe <lif_check_dir+0x35c>
   1a3b2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a3b6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a3ba:	ca 01       	movw	r24, r20
   1a3bc:	81 70       	andi	r24, 0x01	; 1
   1a3be:	99 27       	eor	r25, r25
   1a3c0:	40 ff       	sbrs	r20, 0
   1a3c2:	1e c0       	rjmp	.+60     	; 0x1a400 <lif_check_dir+0x35e>
   1a3c4:	c9 01       	movw	r24, r18
   1a3c6:	1f 92       	push	r1
   1a3c8:	1f 92       	push	r1
   1a3ca:	9f 93       	push	r25
   1a3cc:	2f 93       	push	r18
   1a3ce:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3d0:	fc 81       	ldd	r31, Y+4	; 0x04
   1a3d2:	81 81       	ldd	r24, Z+1	; 0x01
   1a3d4:	8f 93       	push	r24
   1a3d6:	80 81       	ld	r24, Z
   1a3d8:	8f 93       	push	r24
   1a3da:	83 ef       	ldi	r24, 0xF3	; 243
   1a3dc:	9c e3       	ldi	r25, 0x3C	; 60
   1a3de:	1f 92       	push	r1
   1a3e0:	9f 93       	push	r25
   1a3e2:	8f 93       	push	r24
   1a3e4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a3e8:	0f b6       	in	r0, 0x3f	; 63
   1a3ea:	f8 94       	cli
   1a3ec:	de bf       	out	0x3e, r29	; 62
   1a3ee:	0f be       	out	0x3f, r0	; 63
   1a3f0:	cd bf       	out	0x3d, r28	; 61
   1a3f2:	80 e0       	ldi	r24, 0x00	; 0
   1a3f4:	90 e0       	ldi	r25, 0x00	; 0
   1a3f6:	04 c0       	rjmp	.+8      	; 0x1a400 <lif_check_dir+0x35e>
   1a3f8:	81 e0       	ldi	r24, 0x01	; 1
   1a3fa:	90 e0       	ldi	r25, 0x00	; 0
   1a3fc:	01 c0       	rjmp	.+2      	; 0x1a400 <lif_check_dir+0x35e>
   1a3fe:	c7 01       	movw	r24, r14
   1a400:	24 96       	adiw	r28, 0x04	; 4
   1a402:	e2 e1       	ldi	r30, 0x12	; 18
   1a404:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001a408 <lif_close_volume>:
   1a408:	cf 93       	push	r28
   1a40a:	df 93       	push	r29
   1a40c:	00 97       	sbiw	r24, 0x00	; 0
   1a40e:	f9 f0       	breq	.+62     	; 0x1a44e <lif_close_volume+0x46>
   1a410:	ec 01       	movw	r28, r24
   1a412:	8a 81       	ldd	r24, Y+2	; 0x02
   1a414:	9b 81       	ldd	r25, Y+3	; 0x03
   1a416:	00 97       	sbiw	r24, 0x00	; 0
   1a418:	79 f0       	breq	.+30     	; 0x1a438 <lif_close_volume+0x30>
   1a41a:	22 e0       	ldi	r18, 0x02	; 2
   1a41c:	30 e0       	ldi	r19, 0x00	; 0
   1a41e:	40 e0       	ldi	r20, 0x00	; 0
   1a420:	50 e0       	ldi	r21, 0x00	; 0
   1a422:	ba 01       	movw	r22, r20
   1a424:	0e 94 75 80 	call	0x100ea	; 0x100ea <fseek>
   1a428:	8a 81       	ldd	r24, Y+2	; 0x02
   1a42a:	9b 81       	ldd	r25, Y+3	; 0x03
   1a42c:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
   1a430:	1b 82       	std	Y+3, r1	; 0x03
   1a432:	1a 82       	std	Y+2, r1	; 0x02
   1a434:	0e 94 58 81 	call	0x102b0	; 0x102b0 <sync>
   1a438:	88 81       	ld	r24, Y
   1a43a:	99 81       	ldd	r25, Y+1	; 0x01
   1a43c:	00 97       	sbiw	r24, 0x00	; 0
   1a43e:	11 f0       	breq	.+4      	; 0x1a444 <lif_close_volume+0x3c>
   1a440:	0e 94 b7 c8 	call	0x1916e	; 0x1916e <lif_free>
   1a444:	ce 01       	movw	r24, r28
   1a446:	b8 db       	rcall	.-2192   	; 0x19bb8 <lif_vol_clear>
   1a448:	ce 01       	movw	r24, r28
   1a44a:	0e 94 b7 c8 	call	0x1916e	; 0x1916e <lif_free>
   1a44e:	df 91       	pop	r29
   1a450:	cf 91       	pop	r28
   1a452:	08 95       	ret

0001a454 <lif_checkdirindex>:
   1a454:	a0 e0       	ldi	r26, 0x00	; 0
   1a456:	b0 e0       	ldi	r27, 0x00	; 0
   1a458:	e0 e3       	ldi	r30, 0x30	; 48
   1a45a:	f2 ed       	ldi	r31, 0xD2	; 210
   1a45c:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   1a460:	77 fd       	sbrc	r23, 7
   1a462:	26 c0       	rjmp	.+76     	; 0x1a4b0 <lif_checkdirindex+0x5c>
   1a464:	8b 01       	movw	r16, r22
   1a466:	07 2e       	mov	r0, r23
   1a468:	00 0c       	add	r0, r0
   1a46a:	22 0b       	sbc	r18, r18
   1a46c:	33 0b       	sbc	r19, r19
   1a46e:	45 e0       	ldi	r20, 0x05	; 5
   1a470:	00 0f       	add	r16, r16
   1a472:	11 1f       	adc	r17, r17
   1a474:	22 1f       	adc	r18, r18
   1a476:	33 1f       	adc	r19, r19
   1a478:	4a 95       	dec	r20
   1a47a:	d1 f7       	brne	.-12     	; 0x1a470 <lif_checkdirindex+0x1c>
   1a47c:	c1 2e       	mov	r12, r17
   1a47e:	d2 2e       	mov	r13, r18
   1a480:	e3 2e       	mov	r14, r19
   1a482:	ff 24       	eor	r15, r15
   1a484:	11 27       	eor	r17, r17
   1a486:	22 27       	eor	r18, r18
   1a488:	33 27       	eor	r19, r19
   1a48a:	01 2b       	or	r16, r17
   1a48c:	02 2b       	or	r16, r18
   1a48e:	03 2b       	or	r16, r19
   1a490:	29 f0       	breq	.+10     	; 0x1a49c <lif_checkdirindex+0x48>
   1a492:	2f ef       	ldi	r18, 0xFF	; 255
   1a494:	c2 1a       	sub	r12, r18
   1a496:	d2 0a       	sbc	r13, r18
   1a498:	e2 0a       	sbc	r14, r18
   1a49a:	f2 0a       	sbc	r15, r18
   1a49c:	fc 01       	movw	r30, r24
   1a49e:	05 a9       	ldd	r16, Z+53	; 0x35
   1a4a0:	16 a9       	ldd	r17, Z+54	; 0x36
   1a4a2:	27 a9       	ldd	r18, Z+55	; 0x37
   1a4a4:	30 ad       	ldd	r19, Z+56	; 0x38
   1a4a6:	0c 15       	cp	r16, r12
   1a4a8:	1d 05       	cpc	r17, r13
   1a4aa:	2e 05       	cpc	r18, r14
   1a4ac:	3f 05       	cpc	r19, r15
   1a4ae:	30 f5       	brcc	.+76     	; 0x1a4fc <lif_checkdirindex+0xa8>
   1a4b0:	ec 01       	movw	r28, r24
   1a4b2:	7f 93       	push	r23
   1a4b4:	6f 93       	push	r22
   1a4b6:	89 81       	ldd	r24, Y+1	; 0x01
   1a4b8:	8f 93       	push	r24
   1a4ba:	88 81       	ld	r24, Y
   1a4bc:	8f 93       	push	r24
   1a4be:	89 e8       	ldi	r24, 0x89	; 137
   1a4c0:	9c e3       	ldi	r25, 0x3C	; 60
   1a4c2:	1f 92       	push	r1
   1a4c4:	9f 93       	push	r25
   1a4c6:	8f 93       	push	r24
   1a4c8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a4cc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a4d0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a4d4:	8d b7       	in	r24, 0x3d	; 61
   1a4d6:	9e b7       	in	r25, 0x3e	; 62
   1a4d8:	07 96       	adiw	r24, 0x07	; 7
   1a4da:	0f b6       	in	r0, 0x3f	; 63
   1a4dc:	f8 94       	cli
   1a4de:	9e bf       	out	0x3e, r25	; 62
   1a4e0:	0f be       	out	0x3f, r0	; 63
   1a4e2:	8d bf       	out	0x3d, r24	; 61
   1a4e4:	c9 01       	movw	r24, r18
   1a4e6:	88 27       	eor	r24, r24
   1a4e8:	94 70       	andi	r25, 0x04	; 4
   1a4ea:	32 ff       	sbrs	r19, 2
   1a4ec:	09 c0       	rjmp	.+18     	; 0x1a500 <lif_checkdirindex+0xac>
   1a4ee:	60 eb       	ldi	r22, 0xB0	; 176
   1a4f0:	75 e1       	ldi	r23, 0x15	; 21
   1a4f2:	ce 01       	movw	r24, r28
   1a4f4:	68 db       	rcall	.-2352   	; 0x19bc6 <lif_dump_vol>
   1a4f6:	80 e0       	ldi	r24, 0x00	; 0
   1a4f8:	90 e0       	ldi	r25, 0x00	; 0
   1a4fa:	02 c0       	rjmp	.+4      	; 0x1a500 <lif_checkdirindex+0xac>
   1a4fc:	81 e0       	ldi	r24, 0x01	; 1
   1a4fe:	90 e0       	ldi	r25, 0x00	; 0
   1a500:	cd b7       	in	r28, 0x3d	; 61
   1a502:	de b7       	in	r29, 0x3e	; 62
   1a504:	e8 e0       	ldi	r30, 0x08	; 8
   1a506:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0001a50a <lif_readdirindex>:
   1a50a:	a0 e2       	ldi	r26, 0x20	; 32
   1a50c:	b0 e0       	ldi	r27, 0x00	; 0
   1a50e:	eb e8       	ldi	r30, 0x8B	; 139
   1a510:	f2 ed       	ldi	r31, 0xD2	; 210
   1a512:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   1a516:	7c 01       	movw	r14, r24
   1a518:	6b 01       	movw	r12, r22
   1a51a:	9c df       	rcall	.-200    	; 0x1a454 <lif_checkdirindex>
   1a51c:	89 2b       	or	r24, r25
   1a51e:	19 f4       	brne	.+6      	; 0x1a526 <lif_readdirindex+0x1c>
   1a520:	00 e0       	ldi	r16, 0x00	; 0
   1a522:	10 e0       	ldi	r17, 0x00	; 0
   1a524:	56 c0       	rjmp	.+172    	; 0x1a5d2 <lif_readdirindex+0xc8>
   1a526:	f7 01       	movw	r30, r14
   1a528:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a52a:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a52c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a52e:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a530:	44 27       	eor	r20, r20
   1a532:	58 2f       	mov	r21, r24
   1a534:	69 2f       	mov	r22, r25
   1a536:	7a 2f       	mov	r23, r26
   1a538:	c6 01       	movw	r24, r12
   1a53a:	0d 2c       	mov	r0, r13
   1a53c:	00 0c       	add	r0, r0
   1a53e:	aa 0b       	sbc	r26, r26
   1a540:	bb 0b       	sbc	r27, r27
   1a542:	35 e0       	ldi	r19, 0x05	; 5
   1a544:	88 0f       	add	r24, r24
   1a546:	99 1f       	adc	r25, r25
   1a548:	aa 1f       	adc	r26, r26
   1a54a:	bb 1f       	adc	r27, r27
   1a54c:	3a 95       	dec	r19
   1a54e:	d1 f7       	brne	.-12     	; 0x1a544 <lif_readdirindex+0x3a>
   1a550:	9a 01       	movw	r18, r20
   1a552:	ab 01       	movw	r20, r22
   1a554:	28 0f       	add	r18, r24
   1a556:	39 1f       	adc	r19, r25
   1a558:	4a 1f       	adc	r20, r26
   1a55a:	5b 1f       	adc	r21, r27
   1a55c:	00 e2       	ldi	r16, 0x20	; 32
   1a55e:	10 e0       	ldi	r17, 0x00	; 0
   1a560:	be 01       	movw	r22, r28
   1a562:	6f 5f       	subi	r22, 0xFF	; 255
   1a564:	7f 4f       	sbci	r23, 0xFF	; 255
   1a566:	c7 01       	movw	r24, r14
   1a568:	0e 94 6c c9 	call	0x192d8	; 0x192d8 <lif_read>
   1a56c:	60 32       	cpi	r22, 0x20	; 32
   1a56e:	71 05       	cpc	r23, r1
   1a570:	81 05       	cpc	r24, r1
   1a572:	91 05       	cpc	r25, r1
   1a574:	a8 f2       	brcs	.-86     	; 0x1a520 <lif_readdirindex+0x16>
   1a576:	b7 01       	movw	r22, r14
   1a578:	ce 01       	movw	r24, r28
   1a57a:	01 96       	adiw	r24, 0x01	; 1
   1a57c:	c1 d9       	rcall	.-3198   	; 0x19900 <lif_str2dir>
   1a57e:	f7 01       	movw	r30, r14
   1a580:	e6 5a       	subi	r30, 0xA6	; 166
   1a582:	ff 4f       	sbci	r31, 0xFF	; 255
   1a584:	80 81       	ld	r24, Z
   1a586:	91 81       	ldd	r25, Z+1	; 0x01
   1a588:	01 96       	adiw	r24, 0x01	; 1
   1a58a:	19 f4       	brne	.+6      	; 0x1a592 <lif_readdirindex+0x88>
   1a58c:	f7 01       	movw	r30, r14
   1a58e:	d3 a2       	std	Z+35, r13	; 0x23
   1a590:	c2 a2       	std	Z+34, r12	; 0x22
   1a592:	c7 01       	movw	r24, r14
   1a594:	86 dd       	rcall	.-1268   	; 0x1a0a2 <lif_check_dir>
   1a596:	8c 01       	movw	r16, r24
   1a598:	89 2b       	or	r24, r25
   1a59a:	c9 f4       	brne	.+50     	; 0x1a5ce <lif_readdirindex+0xc4>
   1a59c:	df 92       	push	r13
   1a59e:	cf 92       	push	r12
   1a5a0:	89 e6       	ldi	r24, 0x69	; 105
   1a5a2:	9c e3       	ldi	r25, 0x3C	; 60
   1a5a4:	1f 92       	push	r1
   1a5a6:	9f 93       	push	r25
   1a5a8:	8f 93       	push	r24
   1a5aa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a5ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a5b2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a5b6:	0f 90       	pop	r0
   1a5b8:	0f 90       	pop	r0
   1a5ba:	0f 90       	pop	r0
   1a5bc:	0f 90       	pop	r0
   1a5be:	0f 90       	pop	r0
   1a5c0:	92 ff       	sbrs	r25, 2
   1a5c2:	ae cf       	rjmp	.-164    	; 0x1a520 <lif_readdirindex+0x16>
   1a5c4:	61 ec       	ldi	r22, 0xC1	; 193
   1a5c6:	75 e1       	ldi	r23, 0x15	; 21
   1a5c8:	c7 01       	movw	r24, r14
   1a5ca:	fd da       	rcall	.-2566   	; 0x19bc6 <lif_dump_vol>
   1a5cc:	02 c0       	rjmp	.+4      	; 0x1a5d2 <lif_readdirindex+0xc8>
   1a5ce:	01 e0       	ldi	r16, 0x01	; 1
   1a5d0:	10 e0       	ldi	r17, 0x00	; 0
   1a5d2:	c8 01       	movw	r24, r16
   1a5d4:	a0 96       	adiw	r28, 0x20	; 32
   1a5d6:	e8 e0       	ldi	r30, 0x08	; 8
   1a5d8:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0001a5dc <lif_writedirindex>:
   1a5dc:	a0 e2       	ldi	r26, 0x20	; 32
   1a5de:	b0 e0       	ldi	r27, 0x00	; 0
   1a5e0:	e4 ef       	ldi	r30, 0xF4	; 244
   1a5e2:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5e4:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   1a5e8:	5c 01       	movw	r10, r24
   1a5ea:	6b 01       	movw	r12, r22
   1a5ec:	5a dd       	rcall	.-1356   	; 0x1a0a2 <lif_check_dir>
   1a5ee:	7c 01       	movw	r14, r24
   1a5f0:	89 2b       	or	r24, r25
   1a5f2:	71 f4       	brne	.+28     	; 0x1a610 <lif_writedirindex+0x34>
   1a5f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a5f8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a5fc:	92 fd       	sbrc	r25, 2
   1a5fe:	03 c0       	rjmp	.+6      	; 0x1a606 <lif_writedirindex+0x2a>
   1a600:	e1 2c       	mov	r14, r1
   1a602:	f1 2c       	mov	r15, r1
   1a604:	42 c0       	rjmp	.+132    	; 0x1a68a <lif_writedirindex+0xae>
   1a606:	62 ed       	ldi	r22, 0xD2	; 210
   1a608:	75 e1       	ldi	r23, 0x15	; 21
   1a60a:	c5 01       	movw	r24, r10
   1a60c:	dc da       	rcall	.-2632   	; 0x19bc6 <lif_dump_vol>
   1a60e:	3d c0       	rjmp	.+122    	; 0x1a68a <lif_writedirindex+0xae>
   1a610:	b6 01       	movw	r22, r12
   1a612:	c5 01       	movw	r24, r10
   1a614:	1f df       	rcall	.-450    	; 0x1a454 <lif_checkdirindex>
   1a616:	89 2b       	or	r24, r25
   1a618:	99 f3       	breq	.-26     	; 0x1a600 <lif_writedirindex+0x24>
   1a61a:	f5 01       	movw	r30, r10
   1a61c:	e6 5a       	subi	r30, 0xA6	; 166
   1a61e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a620:	80 81       	ld	r24, Z
   1a622:	91 81       	ldd	r25, Z+1	; 0x01
   1a624:	01 96       	adiw	r24, 0x01	; 1
   1a626:	19 f4       	brne	.+6      	; 0x1a62e <lif_writedirindex+0x52>
   1a628:	f5 01       	movw	r30, r10
   1a62a:	d3 a2       	std	Z+35, r13	; 0x23
   1a62c:	c2 a2       	std	Z+34, r12	; 0x22
   1a62e:	f5 01       	movw	r30, r10
   1a630:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a632:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a634:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a636:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a638:	ba 2f       	mov	r27, r26
   1a63a:	a9 2f       	mov	r26, r25
   1a63c:	98 2f       	mov	r25, r24
   1a63e:	88 27       	eor	r24, r24
   1a640:	0d 2c       	mov	r0, r13
   1a642:	00 0c       	add	r0, r0
   1a644:	ee 08       	sbc	r14, r14
   1a646:	ff 08       	sbc	r15, r15
   1a648:	35 e0       	ldi	r19, 0x05	; 5
   1a64a:	cc 0c       	add	r12, r12
   1a64c:	dd 1c       	adc	r13, r13
   1a64e:	ee 1c       	adc	r14, r14
   1a650:	ff 1c       	adc	r15, r15
   1a652:	3a 95       	dec	r19
   1a654:	d1 f7       	brne	.-12     	; 0x1a64a <lif_writedirindex+0x6e>
   1a656:	c8 0e       	add	r12, r24
   1a658:	d9 1e       	adc	r13, r25
   1a65a:	ea 1e       	adc	r14, r26
   1a65c:	fb 1e       	adc	r15, r27
   1a65e:	be 01       	movw	r22, r28
   1a660:	6f 5f       	subi	r22, 0xFF	; 255
   1a662:	7f 4f       	sbci	r23, 0xFF	; 255
   1a664:	c5 01       	movw	r24, r10
   1a666:	db d8       	rcall	.-3658   	; 0x1981e <lif_dir2str>
   1a668:	00 e2       	ldi	r16, 0x20	; 32
   1a66a:	10 e0       	ldi	r17, 0x00	; 0
   1a66c:	a7 01       	movw	r20, r14
   1a66e:	96 01       	movw	r18, r12
   1a670:	be 01       	movw	r22, r28
   1a672:	6f 5f       	subi	r22, 0xFF	; 255
   1a674:	7f 4f       	sbci	r23, 0xFF	; 255
   1a676:	c5 01       	movw	r24, r10
   1a678:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
   1a67c:	31 e0       	ldi	r19, 0x01	; 1
   1a67e:	20 e0       	ldi	r18, 0x00	; 0
   1a680:	80 97       	sbiw	r24, 0x20	; 32
   1a682:	0c f4       	brge	.+2      	; 0x1a686 <lif_writedirindex+0xaa>
   1a684:	30 e0       	ldi	r19, 0x00	; 0
   1a686:	e3 2e       	mov	r14, r19
   1a688:	f2 2e       	mov	r15, r18
   1a68a:	c7 01       	movw	r24, r14
   1a68c:	a0 96       	adiw	r28, 0x20	; 32
   1a68e:	ea e0       	ldi	r30, 0x0A	; 10
   1a690:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0001a694 <lif_writedirEOF>:
   1a694:	0f 93       	push	r16
   1a696:	1f 93       	push	r17
   1a698:	cf 93       	push	r28
   1a69a:	df 93       	push	r29
   1a69c:	ec 01       	movw	r28, r24
   1a69e:	8b 01       	movw	r16, r22
   1a6a0:	83 da       	rcall	.-2810   	; 0x19ba8 <lif_dir_clear>
   1a6a2:	fe 01       	movw	r30, r28
   1a6a4:	e6 5a       	subi	r30, 0xA6	; 166
   1a6a6:	ff 4f       	sbci	r31, 0xFF	; 255
   1a6a8:	8f ef       	ldi	r24, 0xFF	; 255
   1a6aa:	9f ef       	ldi	r25, 0xFF	; 255
   1a6ac:	91 83       	std	Z+1, r25	; 0x01
   1a6ae:	80 83       	st	Z, r24
   1a6b0:	1b a3       	std	Y+35, r17	; 0x23
   1a6b2:	0a a3       	std	Y+34, r16	; 0x22
   1a6b4:	b8 01       	movw	r22, r16
   1a6b6:	ce 01       	movw	r24, r28
   1a6b8:	91 df       	rcall	.-222    	; 0x1a5dc <lif_writedirindex>
   1a6ba:	df 91       	pop	r29
   1a6bc:	cf 91       	pop	r28
   1a6be:	1f 91       	pop	r17
   1a6c0:	0f 91       	pop	r16
   1a6c2:	08 95       	ret

0001a6c4 <lif_updatefree>:
   1a6c4:	2f 92       	push	r2
   1a6c6:	3f 92       	push	r3
   1a6c8:	4f 92       	push	r4
   1a6ca:	5f 92       	push	r5
   1a6cc:	6f 92       	push	r6
   1a6ce:	7f 92       	push	r7
   1a6d0:	8f 92       	push	r8
   1a6d2:	af 92       	push	r10
   1a6d4:	bf 92       	push	r11
   1a6d6:	cf 92       	push	r12
   1a6d8:	df 92       	push	r13
   1a6da:	ef 92       	push	r14
   1a6dc:	ff 92       	push	r15
   1a6de:	0f 93       	push	r16
   1a6e0:	1f 93       	push	r17
   1a6e2:	cf 93       	push	r28
   1a6e4:	df 93       	push	r29
   1a6e6:	cd b7       	in	r28, 0x3d	; 61
   1a6e8:	de b7       	in	r29, 0x3e	; 62
   1a6ea:	28 97       	sbiw	r28, 0x08	; 8
   1a6ec:	0f b6       	in	r0, 0x3f	; 63
   1a6ee:	f8 94       	cli
   1a6f0:	de bf       	out	0x3e, r29	; 62
   1a6f2:	0f be       	out	0x3f, r0	; 63
   1a6f4:	cd bf       	out	0x3d, r28	; 61
   1a6f6:	98 87       	std	Y+8, r25	; 0x08
   1a6f8:	8f 83       	std	Y+7, r24	; 0x07
   1a6fa:	fc 01       	movw	r30, r24
   1a6fc:	24 84       	ldd	r2, Z+12	; 0x0c
   1a6fe:	35 84       	ldd	r3, Z+13	; 0x0d
   1a700:	46 84       	ldd	r4, Z+14	; 0x0e
   1a702:	57 84       	ldd	r5, Z+15	; 0x0f
   1a704:	80 89       	ldd	r24, Z+16	; 0x10
   1a706:	91 89       	ldd	r25, Z+17	; 0x11
   1a708:	a2 89       	ldd	r26, Z+18	; 0x12
   1a70a:	b3 89       	ldd	r27, Z+19	; 0x13
   1a70c:	80 8f       	std	Z+24, r24	; 0x18
   1a70e:	91 8f       	std	Z+25, r25	; 0x19
   1a710:	a2 8f       	std	Z+26, r26	; 0x1a
   1a712:	b3 8f       	std	Z+27, r27	; 0x1b
   1a714:	14 8a       	std	Z+20, r1	; 0x14
   1a716:	15 8a       	std	Z+21, r1	; 0x15
   1a718:	16 8a       	std	Z+22, r1	; 0x16
   1a71a:	17 8a       	std	Z+23, r1	; 0x17
   1a71c:	17 8e       	std	Z+31, r1	; 0x1f
   1a71e:	16 8e       	std	Z+30, r1	; 0x1e
   1a720:	15 8e       	std	Z+29, r1	; 0x1d
   1a722:	14 8e       	std	Z+28, r1	; 0x1c
   1a724:	11 a2       	std	Z+33, r1	; 0x21
   1a726:	10 a2       	std	Z+32, r1	; 0x20
   1a728:	13 a2       	std	Z+35, r1	; 0x23
   1a72a:	12 a2       	std	Z+34, r1	; 0x22
   1a72c:	cc 24       	eor	r12, r12
   1a72e:	c3 94       	inc	r12
   1a730:	d1 2c       	mov	r13, r1
   1a732:	0f ef       	ldi	r16, 0xFF	; 255
   1a734:	1f ef       	ldi	r17, 0xFF	; 255
   1a736:	e6 5a       	subi	r30, 0xA6	; 166
   1a738:	ff 4f       	sbci	r31, 0xFF	; 255
   1a73a:	fc 83       	std	Y+4, r31	; 0x04
   1a73c:	eb 83       	std	Y+3, r30	; 0x03
   1a73e:	af 80       	ldd	r10, Y+7	; 0x07
   1a740:	b8 84       	ldd	r11, Y+8	; 0x08
   1a742:	fc e5       	ldi	r31, 0x5C	; 92
   1a744:	af 0e       	add	r10, r31
   1a746:	b1 1c       	adc	r11, r1
   1a748:	8f 81       	ldd	r24, Y+7	; 0x07
   1a74a:	98 85       	ldd	r25, Y+8	; 0x08
   1a74c:	80 5a       	subi	r24, 0xA0	; 160
   1a74e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a750:	9e 83       	std	Y+6, r25	; 0x06
   1a752:	8d 83       	std	Y+5, r24	; 0x05
   1a754:	ef 81       	ldd	r30, Y+7	; 0x07
   1a756:	f8 85       	ldd	r31, Y+8	; 0x08
   1a758:	e1 5b       	subi	r30, 0xB1	; 177
   1a75a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a75c:	fa 83       	std	Y+2, r31	; 0x02
   1a75e:	e9 83       	std	Y+1, r30	; 0x01
   1a760:	8c e1       	ldi	r24, 0x1C	; 28
   1a762:	9c e3       	ldi	r25, 0x3C	; 60
   1a764:	3c 01       	movw	r6, r24
   1a766:	76 01       	movw	r14, r12
   1a768:	21 e0       	ldi	r18, 0x01	; 1
   1a76a:	e2 1a       	sub	r14, r18
   1a76c:	f1 08       	sbc	r15, r1
   1a76e:	b7 01       	movw	r22, r14
   1a770:	8f 81       	ldd	r24, Y+7	; 0x07
   1a772:	98 85       	ldd	r25, Y+8	; 0x08
   1a774:	ca de       	rcall	.-620    	; 0x1a50a <lif_readdirindex>
   1a776:	89 2b       	or	r24, r25
   1a778:	19 f4       	brne	.+6      	; 0x1a780 <lif_updatefree+0xbc>
   1a77a:	80 e0       	ldi	r24, 0x00	; 0
   1a77c:	90 e0       	ldi	r25, 0x00	; 0
   1a77e:	92 c0       	rjmp	.+292    	; 0x1a8a4 <lif_updatefree+0x1e0>
   1a780:	eb 81       	ldd	r30, Y+3	; 0x03
   1a782:	fc 81       	ldd	r31, Y+4	; 0x04
   1a784:	80 81       	ld	r24, Z
   1a786:	91 81       	ldd	r25, Z+1	; 0x01
   1a788:	8f 3f       	cpi	r24, 0xFF	; 255
   1a78a:	ff ef       	ldi	r31, 0xFF	; 255
   1a78c:	9f 07       	cpc	r25, r31
   1a78e:	c1 f4       	brne	.+48     	; 0x1a7c0 <lif_updatefree+0xfc>
   1a790:	ef 81       	ldd	r30, Y+7	; 0x07
   1a792:	f8 85       	ldd	r31, Y+8	; 0x08
   1a794:	0f 3f       	cpi	r16, 0xFF	; 255
   1a796:	2f ef       	ldi	r18, 0xFF	; 255
   1a798:	12 07       	cpc	r17, r18
   1a79a:	09 f4       	brne	.+2      	; 0x1a79e <lif_updatefree+0xda>
   1a79c:	79 c0       	rjmp	.+242    	; 0x1a890 <lif_updatefree+0x1cc>
   1a79e:	13 a3       	std	Z+35, r17	; 0x23
   1a7a0:	02 a3       	std	Z+34, r16	; 0x22
   1a7a2:	e0 1a       	sub	r14, r16
   1a7a4:	f1 0a       	sbc	r15, r17
   1a7a6:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a7a8:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a7aa:	8e 19       	sub	r24, r14
   1a7ac:	9f 09       	sbc	r25, r15
   1a7ae:	97 8f       	std	Z+31, r25	; 0x1f
   1a7b0:	86 8f       	std	Z+30, r24	; 0x1e
   1a7b2:	b8 01       	movw	r22, r16
   1a7b4:	cf 01       	movw	r24, r30
   1a7b6:	6e df       	rcall	.-292    	; 0x1a694 <lif_writedirEOF>
   1a7b8:	89 2b       	or	r24, r25
   1a7ba:	09 f0       	breq	.+2      	; 0x1a7be <lif_updatefree+0xfa>
   1a7bc:	6b c0       	rjmp	.+214    	; 0x1a894 <lif_updatefree+0x1d0>
   1a7be:	dd cf       	rjmp	.-70     	; 0x1a77a <lif_updatefree+0xb6>
   1a7c0:	89 2b       	or	r24, r25
   1a7c2:	81 f4       	brne	.+32     	; 0x1a7e4 <lif_updatefree+0x120>
   1a7c4:	0f 3f       	cpi	r16, 0xFF	; 255
   1a7c6:	ff ef       	ldi	r31, 0xFF	; 255
   1a7c8:	1f 07       	cpc	r17, r31
   1a7ca:	09 f4       	brne	.+2      	; 0x1a7ce <lif_updatefree+0x10a>
   1a7cc:	87 01       	movw	r16, r14
   1a7ce:	ef 81       	ldd	r30, Y+7	; 0x07
   1a7d0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a7d2:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a7d4:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a7d6:	01 96       	adiw	r24, 0x01	; 1
   1a7d8:	97 8f       	std	Z+31, r25	; 0x1f
   1a7da:	86 8f       	std	Z+30, r24	; 0x1e
   1a7dc:	ff ef       	ldi	r31, 0xFF	; 255
   1a7de:	cf 1a       	sub	r12, r31
   1a7e0:	df 0a       	sbc	r13, r31
   1a7e2:	c1 cf       	rjmp	.-126    	; 0x1a766 <lif_updatefree+0xa2>
   1a7e4:	f5 01       	movw	r30, r10
   1a7e6:	80 81       	ld	r24, Z
   1a7e8:	91 81       	ldd	r25, Z+1	; 0x01
   1a7ea:	a2 81       	ldd	r26, Z+2	; 0x02
   1a7ec:	b3 81       	ldd	r27, Z+3	; 0x03
   1a7ee:	82 15       	cp	r24, r2
   1a7f0:	93 05       	cpc	r25, r3
   1a7f2:	a4 05       	cpc	r26, r4
   1a7f4:	b5 05       	cpc	r27, r5
   1a7f6:	c0 f4       	brcc	.+48     	; 0x1a828 <lif_updatefree+0x164>
   1a7f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a7fc:	80 ff       	sbrs	r24, 0
   1a7fe:	14 c0       	rjmp	.+40     	; 0x1a828 <lif_updatefree+0x164>
   1a800:	fa 81       	ldd	r31, Y+2	; 0x02
   1a802:	ff 93       	push	r31
   1a804:	29 81       	ldd	r18, Y+1	; 0x01
   1a806:	2f 93       	push	r18
   1a808:	ef 81       	ldd	r30, Y+7	; 0x07
   1a80a:	f8 85       	ldd	r31, Y+8	; 0x08
   1a80c:	81 81       	ldd	r24, Z+1	; 0x01
   1a80e:	8f 93       	push	r24
   1a810:	80 81       	ld	r24, Z
   1a812:	8f 93       	push	r24
   1a814:	1f 92       	push	r1
   1a816:	7f 92       	push	r7
   1a818:	6f 92       	push	r6
   1a81a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1a81e:	0f b6       	in	r0, 0x3f	; 63
   1a820:	f8 94       	cli
   1a822:	de bf       	out	0x3e, r29	; 62
   1a824:	0f be       	out	0x3f, r0	; 63
   1a826:	cd bf       	out	0x3d, r28	; 61
   1a828:	ed 81       	ldd	r30, Y+5	; 0x05
   1a82a:	fe 81       	ldd	r31, Y+6	; 0x06
   1a82c:	80 81       	ld	r24, Z
   1a82e:	91 81       	ldd	r25, Z+1	; 0x01
   1a830:	a2 81       	ldd	r26, Z+2	; 0x02
   1a832:	b3 81       	ldd	r27, Z+3	; 0x03
   1a834:	ef 81       	ldd	r30, Y+7	; 0x07
   1a836:	f8 85       	ldd	r31, Y+8	; 0x08
   1a838:	44 89       	ldd	r20, Z+20	; 0x14
   1a83a:	55 89       	ldd	r21, Z+21	; 0x15
   1a83c:	66 89       	ldd	r22, Z+22	; 0x16
   1a83e:	77 89       	ldd	r23, Z+23	; 0x17
   1a840:	48 0f       	add	r20, r24
   1a842:	59 1f       	adc	r21, r25
   1a844:	6a 1f       	adc	r22, r26
   1a846:	7b 1f       	adc	r23, r27
   1a848:	44 8b       	std	Z+20, r20	; 0x14
   1a84a:	55 8b       	std	Z+21, r21	; 0x15
   1a84c:	66 8b       	std	Z+22, r22	; 0x16
   1a84e:	77 8b       	std	Z+23, r23	; 0x17
   1a850:	40 8d       	ldd	r20, Z+24	; 0x18
   1a852:	51 8d       	ldd	r21, Z+25	; 0x19
   1a854:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a856:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a858:	48 1b       	sub	r20, r24
   1a85a:	59 0b       	sbc	r21, r25
   1a85c:	6a 0b       	sbc	r22, r26
   1a85e:	7b 0b       	sbc	r23, r27
   1a860:	40 8f       	std	Z+24, r20	; 0x18
   1a862:	51 8f       	std	Z+25, r21	; 0x19
   1a864:	62 8f       	std	Z+26, r22	; 0x1a
   1a866:	73 8f       	std	Z+27, r23	; 0x1b
   1a868:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a86a:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a86c:	2f 5f       	subi	r18, 0xFF	; 255
   1a86e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a870:	35 8f       	std	Z+29, r19	; 0x1d
   1a872:	24 8f       	std	Z+28, r18	; 0x1c
   1a874:	f5 01       	movw	r30, r10
   1a876:	40 81       	ld	r20, Z
   1a878:	51 81       	ldd	r21, Z+1	; 0x01
   1a87a:	62 81       	ldd	r22, Z+2	; 0x02
   1a87c:	73 81       	ldd	r23, Z+3	; 0x03
   1a87e:	1c 01       	movw	r2, r24
   1a880:	2d 01       	movw	r4, r26
   1a882:	24 0e       	add	r2, r20
   1a884:	35 1e       	adc	r3, r21
   1a886:	46 1e       	adc	r4, r22
   1a888:	57 1e       	adc	r5, r23
   1a88a:	0f ef       	ldi	r16, 0xFF	; 255
   1a88c:	1f ef       	ldi	r17, 0xFF	; 255
   1a88e:	a6 cf       	rjmp	.-180    	; 0x1a7dc <lif_updatefree+0x118>
   1a890:	f3 a2       	std	Z+35, r15	; 0x23
   1a892:	e2 a2       	std	Z+34, r14	; 0x22
   1a894:	8f ef       	ldi	r24, 0xFF	; 255
   1a896:	9f ef       	ldi	r25, 0xFF	; 255
   1a898:	ef 81       	ldd	r30, Y+7	; 0x07
   1a89a:	f8 85       	ldd	r31, Y+8	; 0x08
   1a89c:	91 a3       	std	Z+33, r25	; 0x21
   1a89e:	80 a3       	std	Z+32, r24	; 0x20
   1a8a0:	8f 81       	ldd	r24, Y+7	; 0x07
   1a8a2:	98 85       	ldd	r25, Y+8	; 0x08
   1a8a4:	28 96       	adiw	r28, 0x08	; 8
   1a8a6:	0f b6       	in	r0, 0x3f	; 63
   1a8a8:	f8 94       	cli
   1a8aa:	de bf       	out	0x3e, r29	; 62
   1a8ac:	0f be       	out	0x3f, r0	; 63
   1a8ae:	cd bf       	out	0x3d, r28	; 61
   1a8b0:	df 91       	pop	r29
   1a8b2:	cf 91       	pop	r28
   1a8b4:	1f 91       	pop	r17
   1a8b6:	0f 91       	pop	r16
   1a8b8:	ff 90       	pop	r15
   1a8ba:	ef 90       	pop	r14
   1a8bc:	df 90       	pop	r13
   1a8be:	cf 90       	pop	r12
   1a8c0:	bf 90       	pop	r11
   1a8c2:	af 90       	pop	r10
   1a8c4:	8f 90       	pop	r8
   1a8c6:	7f 90       	pop	r7
   1a8c8:	6f 90       	pop	r6
   1a8ca:	5f 90       	pop	r5
   1a8cc:	4f 90       	pop	r4
   1a8ce:	3f 90       	pop	r3
   1a8d0:	2f 90       	pop	r2
   1a8d2:	08 95       	ret

0001a8d4 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1a8d4:	a4 e1       	ldi	r26, 0x14	; 20
   1a8d6:	b1 e0       	ldi	r27, 0x01	; 1
   1a8d8:	e0 e7       	ldi	r30, 0x70	; 112
   1a8da:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8dc:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1a8e0:	4c 01       	movw	r8, r24
   1a8e2:	3b 01       	movw	r6, r22
   1a8e4:	19 01       	movw	r2, r18
   1a8e6:	2a 01       	movw	r4, r20
   1a8e8:	cf 5e       	subi	r28, 0xEF	; 239
   1a8ea:	de 4f       	sbci	r29, 0xFE	; 254
   1a8ec:	e8 82       	st	Y, r14
   1a8ee:	f9 82       	std	Y+1, r15	; 0x01
   1a8f0:	0a 83       	std	Y+2, r16	; 0x02
   1a8f2:	1b 83       	std	Y+3, r17	; 0x03
   1a8f4:	c1 51       	subi	r28, 0x11	; 17
   1a8f6:	d1 40       	sbci	r29, 0x01	; 1
   1a8f8:	c3 5f       	subi	r28, 0xF3	; 243
   1a8fa:	de 4f       	sbci	r29, 0xFE	; 254
   1a8fc:	a8 82       	st	Y, r10
   1a8fe:	b9 82       	std	Y+1, r11	; 0x01
   1a900:	ca 82       	std	Y+2, r12	; 0x02
   1a902:	db 82       	std	Y+3, r13	; 0x03
   1a904:	cd 50       	subi	r28, 0x0D	; 13
   1a906:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1a908:	80 e0       	ldi	r24, 0x00	; 0
   1a90a:	90 e0       	ldi	r25, 0x00	; 0
   1a90c:	0e 94 5f 38 	call	0x70be	; 0x70be <time>
   1a910:	5b 01       	movw	r10, r22
   1a912:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1a914:	64 e7       	ldi	r22, 0x74	; 116
   1a916:	70 e0       	ldi	r23, 0x00	; 0
   1a918:	80 e0       	ldi	r24, 0x00	; 0
   1a91a:	90 e0       	ldi	r25, 0x00	; 0
   1a91c:	0e 94 8b c8 	call	0x19116	; 0x19116 <lif_calloc>
   1a920:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1a922:	00 97       	sbiw	r24, 0x00	; 0
   1a924:	09 f4       	brne	.+2      	; 0x1a928 <lif_create_volume+0x54>
        return(NULL);
    
    lif_image_clear(LIF);
   1a926:	a5 c2       	rjmp	.+1354   	; 0x1ae72 <lif_create_volume+0x59e>

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1a928:	39 d9       	rcall	.-3470   	; 0x19b9c <lif_image_clear>
   1a92a:	80 e0       	ldi	r24, 0x00	; 0
   1a92c:	90 e8       	ldi	r25, 0x80	; 128
   1a92e:	d7 01       	movw	r26, r14
   1a930:	95 96       	adiw	r26, 0x25	; 37
   1a932:	9c 93       	st	X, r25
   1a934:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1a936:	94 97       	sbiw	r26, 0x24	; 36
   1a938:	46 e0       	ldi	r20, 0x06	; 6
   1a93a:	50 e0       	ldi	r21, 0x00	; 0
   1a93c:	b3 01       	movw	r22, r6
   1a93e:	c7 01       	movw	r24, r14
   1a940:	86 96       	adiw	r24, 0x26	; 38
   1a942:	0e 94 b2 ca 	call	0x19564	; 0x19564 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1a946:	f7 01       	movw	r30, r14
   1a948:	25 a6       	std	Z+45, r2	; 0x2d
   1a94a:	36 a6       	std	Z+46, r3	; 0x2e
   1a94c:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1a94e:	50 aa       	std	Z+48, r5	; 0x30
   1a950:	cf 5e       	subi	r28, 0xEF	; 239
   1a952:	de 4f       	sbci	r29, 0xFE	; 254
   1a954:	28 81       	ld	r18, Y
   1a956:	39 81       	ldd	r19, Y+1	; 0x01
   1a958:	4a 81       	ldd	r20, Y+2	; 0x02
   1a95a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a95c:	c1 51       	subi	r28, 0x11	; 17
   1a95e:	d1 40       	sbci	r29, 0x01	; 1
   1a960:	25 ab       	std	Z+53, r18	; 0x35
   1a962:	36 ab       	std	Z+54, r19	; 0x36
   1a964:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1a966:	50 af       	std	Z+56, r21	; 0x38
   1a968:	80 e0       	ldi	r24, 0x00	; 0
   1a96a:	90 e1       	ldi	r25, 0x10	; 16
   1a96c:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1a96e:	81 ab       	std	Z+49, r24	; 0x31
   1a970:	fd 96       	adiw	r30, 0x3d	; 61
   1a972:	10 82       	st	Z, r1
   1a974:	11 82       	std	Z+1, r1	; 0x01
   1a976:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1a978:	13 82       	std	Z+3, r1	; 0x03
   1a97a:	34 96       	adiw	r30, 0x04	; 4
   1a97c:	10 82       	st	Z, r1
   1a97e:	11 82       	std	Z+1, r1	; 0x01
   1a980:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1a982:	13 82       	std	Z+3, r1	; 0x03
   1a984:	34 96       	adiw	r30, 0x04	; 4
   1a986:	10 82       	st	Z, r1
   1a988:	11 82       	std	Z+1, r1	; 0x01
   1a98a:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1a98c:	13 82       	std	Z+3, r1	; 0x03
   1a98e:	a7 01       	movw	r20, r14
   1a990:	47 5b       	subi	r20, 0xB7	; 183
   1a992:	5f 4f       	sbci	r21, 0xFF	; 255
   1a994:	c6 01       	movw	r24, r12
   1a996:	b5 01       	movw	r22, r10

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1a998:	2a d8       	rcall	.-4012   	; 0x199ee <lif_time2lifbcd>
   1a99a:	c4 01       	movw	r24, r8
   1a99c:	0e 94 c7 c8 	call	0x1918e	; 0x1918e <lif_stralloc>
   1a9a0:	f7 01       	movw	r30, r14
   1a9a2:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1a9a4:	80 83       	st	Z, r24
   1a9a6:	89 2b       	or	r24, r25
   1a9a8:	09 f4       	brne	.+2      	; 0x1a9ac <lif_create_volume+0xd8>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1a9aa:	58 c2       	rjmp	.+1200   	; 0x1ae5c <lif_create_volume+0x588>
   1a9ac:	c3 5f       	subi	r28, 0xF3	; 243
   1a9ae:	de 4f       	sbci	r29, 0xFE	; 254
   1a9b0:	28 81       	ld	r18, Y
   1a9b2:	39 81       	ldd	r19, Y+1	; 0x01
   1a9b4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9b6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9b8:	cd 50       	subi	r28, 0x0D	; 13
   1a9ba:	d1 40       	sbci	r29, 0x01	; 1
   1a9bc:	20 8b       	std	Z+16, r18	; 0x10
   1a9be:	31 8b       	std	Z+17, r19	; 0x11
   1a9c0:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1a9c2:	53 8b       	std	Z+19, r21	; 0x13
   1a9c4:	cf 5e       	subi	r28, 0xEF	; 239
   1a9c6:	de 4f       	sbci	r29, 0xFE	; 254
   1a9c8:	88 81       	ld	r24, Y
   1a9ca:	99 81       	ldd	r25, Y+1	; 0x01
   1a9cc:	aa 81       	ldd	r26, Y+2	; 0x02
   1a9ce:	bb 81       	ldd	r27, Y+3	; 0x03
   1a9d0:	c1 51       	subi	r28, 0x11	; 17
   1a9d2:	d1 40       	sbci	r29, 0x01	; 1
   1a9d4:	82 0d       	add	r24, r2
   1a9d6:	93 1d       	adc	r25, r3
   1a9d8:	a4 1d       	adc	r26, r4
   1a9da:	b5 1d       	adc	r27, r5
   1a9dc:	f7 01       	movw	r30, r14
   1a9de:	84 87       	std	Z+12, r24	; 0x0c
   1a9e0:	95 87       	std	Z+13, r25	; 0x0d
   1a9e2:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1a9e4:	b7 87       	std	Z+15, r27	; 0x0f
   1a9e6:	82 0f       	add	r24, r18
   1a9e8:	93 1f       	adc	r25, r19
   1a9ea:	a4 1f       	adc	r26, r20
   1a9ec:	b5 1f       	adc	r27, r21
   1a9ee:	84 83       	std	Z+4, r24	; 0x04
   1a9f0:	95 83       	std	Z+5, r25	; 0x05
   1a9f2:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1a9f4:	b7 83       	std	Z+7, r27	; 0x07
   1a9f6:	ba 2f       	mov	r27, r26
   1a9f8:	a9 2f       	mov	r26, r25
   1a9fa:	98 2f       	mov	r25, r24
   1a9fc:	88 27       	eor	r24, r24
   1a9fe:	80 87       	std	Z+8, r24	; 0x08
   1aa00:	91 87       	std	Z+9, r25	; 0x09
   1aa02:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1aa04:	b3 87       	std	Z+11, r27	; 0x0b
   1aa06:	20 8f       	std	Z+24, r18	; 0x18
   1aa08:	31 8f       	std	Z+25, r19	; 0x19
   1aa0a:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1aa0c:	53 8f       	std	Z+27, r21	; 0x1b
   1aa0e:	14 8a       	std	Z+20, r1	; 0x14
   1aa10:	15 8a       	std	Z+21, r1	; 0x15
   1aa12:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1aa14:	17 8a       	std	Z+23, r1	; 0x17
   1aa16:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1aa18:	14 8e       	std	Z+28, r1	; 0x1c
   1aa1a:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1aa1c:	16 8e       	std	Z+30, r1	; 0x1e
   1aa1e:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1aa20:	10 a2       	std	Z+32, r1	; 0x20
   1aa22:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1aa24:	12 a2       	std	Z+34, r1	; 0x22
   1aa26:	61 2c       	mov	r6, r1
   1aa28:	77 24       	eor	r7, r7
   1aa2a:	73 94       	inc	r7
   1aa2c:	9e 01       	movw	r18, r28
   1aa2e:	2f 5f       	subi	r18, 0xFF	; 255
   1aa30:	3f 4f       	sbci	r19, 0xFF	; 255
   1aa32:	49 01       	movw	r8, r18
   1aa34:	d9 01       	movw	r26, r18
   1aa36:	f3 01       	movw	r30, r6
   1aa38:	1d 92       	st	X+, r1
   1aa3a:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1aa3c:	e9 f7       	brne	.-6      	; 0x1aa38 <lif_create_volume+0x164>
   1aa3e:	b9 01       	movw	r22, r18
   1aa40:	c7 01       	movw	r24, r14
   1aa42:	0e 94 ef ca 	call	0x195de	; 0x195de <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1aa46:	68 e8       	ldi	r22, 0x88	; 136
   1aa48:	78 e0       	ldi	r23, 0x08	; 8
   1aa4a:	d7 01       	movw	r26, r14
   1aa4c:	8d 91       	ld	r24, X+
   1aa4e:	9c 91       	ld	r25, X
   1aa50:	0e 94 e6 c8 	call	0x191cc	; 0x191cc <lif_open>
   1aa54:	f7 01       	movw	r30, r14
   1aa56:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1aa58:	82 83       	std	Z+2, r24	; 0x02
   1aa5a:	89 2b       	or	r24, r25
   1aa5c:	09 f4       	brne	.+2      	; 0x1aa60 <lif_create_volume+0x18c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1aa5e:	fe c1       	rjmp	.+1020   	; 0x1ae5c <lif_create_volume+0x588>
   1aa60:	00 e0       	ldi	r16, 0x00	; 0
   1aa62:	11 e0       	ldi	r17, 0x01	; 1
   1aa64:	20 e0       	ldi	r18, 0x00	; 0
   1aa66:	30 e0       	ldi	r19, 0x00	; 0
   1aa68:	a9 01       	movw	r20, r18
   1aa6a:	b4 01       	movw	r22, r8
   1aa6c:	c7 01       	movw	r24, r14
   1aa6e:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
   1aa72:	9c 01       	movw	r18, r24
   1aa74:	99 0f       	add	r25, r25
   1aa76:	44 0b       	sbc	r20, r20
   1aa78:	55 0b       	sbc	r21, r21
   1aa7a:	cb 5f       	subi	r28, 0xFB	; 251
   1aa7c:	de 4f       	sbci	r29, 0xFE	; 254
   1aa7e:	28 83       	st	Y, r18
   1aa80:	39 83       	std	Y+1, r19	; 0x01
   1aa82:	4a 83       	std	Y+2, r20	; 0x02
   1aa84:	5b 83       	std	Y+3, r21	; 0x03
   1aa86:	c5 50       	subi	r28, 0x05	; 5

    if(size < LIF_SECTOR_SIZE)
   1aa88:	d1 40       	sbci	r29, 0x01	; 1
   1aa8a:	2f 3f       	cpi	r18, 0xFF	; 255
   1aa8c:	31 05       	cpc	r19, r1
   1aa8e:	41 05       	cpc	r20, r1
   1aa90:	51 05       	cpc	r21, r1
   1aa92:	09 f0       	breq	.+2      	; 0x1aa96 <lif_create_volume+0x1c2>
   1aa94:	0c f4       	brge	.+2      	; 0x1aa98 <lif_create_volume+0x1c4>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1aa96:	e2 c1       	rjmp	.+964    	; 0x1ae5c <lif_create_volume+0x588>
   1aa98:	d4 01       	movw	r26, r8
   1aa9a:	f3 01       	movw	r30, r6
   1aa9c:	1d 92       	st	X+, r1
   1aa9e:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1aaa0:	e9 f7       	brne	.-6      	; 0x1aa9c <lif_create_volume+0x1c8>
   1aaa2:	21 e0       	ldi	r18, 0x01	; 1
   1aaa4:	30 e0       	ldi	r19, 0x00	; 0
   1aaa6:	40 e0       	ldi	r20, 0x00	; 0
   1aaa8:	50 e0       	ldi	r21, 0x00	; 0
   1aaaa:	cf 5f       	subi	r28, 0xFF	; 255
   1aaac:	de 4f       	sbci	r29, 0xFE	; 254
   1aaae:	28 83       	st	Y, r18
   1aab0:	39 83       	std	Y+1, r19	; 0x01
   1aab2:	4a 83       	std	Y+2, r20	; 0x02
   1aab4:	5b 83       	std	Y+3, r21	; 0x03
   1aab6:	c1 50       	subi	r28, 0x01	; 1
   1aab8:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1aaba:	64 01       	movw	r12, r8
   1aabc:	87 ee       	ldi	r24, 0xE7	; 231
   1aabe:	9c e3       	ldi	r25, 0x3C	; 60
   1aac0:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1aac2:	81 2c       	mov	r8, r1
   1aac4:	cf 5f       	subi	r28, 0xFF	; 255
   1aac6:	de 4f       	sbci	r29, 0xFE	; 254
   1aac8:	88 81       	ld	r24, Y
   1aaca:	99 81       	ldd	r25, Y+1	; 0x01
   1aacc:	aa 81       	ldd	r26, Y+2	; 0x02
   1aace:	bb 81       	ldd	r27, Y+3	; 0x03
   1aad0:	c1 50       	subi	r28, 0x01	; 1
   1aad2:	d1 40       	sbci	r29, 0x01	; 1
   1aad4:	82 15       	cp	r24, r2
   1aad6:	93 05       	cpc	r25, r3
   1aad8:	a4 05       	cpc	r26, r4
   1aada:	b5 05       	cpc	r27, r5
   1aadc:	0c f0       	brlt	.+2      	; 0x1aae0 <lif_create_volume+0x20c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1aade:	64 c0       	rjmp	.+200    	; 0x1aba8 <lif_create_volume+0x2d4>
   1aae0:	00 e0       	ldi	r16, 0x00	; 0
   1aae2:	11 e0       	ldi	r17, 0x01	; 1
   1aae4:	cb 5f       	subi	r28, 0xFB	; 251
   1aae6:	de 4f       	sbci	r29, 0xFE	; 254
   1aae8:	28 81       	ld	r18, Y
   1aaea:	39 81       	ldd	r19, Y+1	; 0x01
   1aaec:	4a 81       	ldd	r20, Y+2	; 0x02
   1aaee:	5b 81       	ldd	r21, Y+3	; 0x03
   1aaf0:	c5 50       	subi	r28, 0x05	; 5
   1aaf2:	d1 40       	sbci	r29, 0x01	; 1
   1aaf4:	b6 01       	movw	r22, r12
   1aaf6:	c7 01       	movw	r24, r14
   1aaf8:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
   1aafc:	09 2e       	mov	r0, r25
   1aafe:	00 0c       	add	r0, r0
   1ab00:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ab02:	bb 0b       	sbc	r27, r27
   1ab04:	8f 3f       	cpi	r24, 0xFF	; 255
   1ab06:	91 05       	cpc	r25, r1
   1ab08:	a1 05       	cpc	r26, r1
   1ab0a:	b1 05       	cpc	r27, r1
   1ab0c:	09 f0       	breq	.+2      	; 0x1ab10 <lif_create_volume+0x23c>
   1ab0e:	0c f4       	brge	.+2      	; 0x1ab12 <lif_create_volume+0x23e>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ab10:	a5 c1       	rjmp	.+842    	; 0x1ae5c <lif_create_volume+0x588>
   1ab12:	cb 5f       	subi	r28, 0xFB	; 251
   1ab14:	de 4f       	sbci	r29, 0xFE	; 254
   1ab16:	28 81       	ld	r18, Y
   1ab18:	39 81       	ldd	r19, Y+1	; 0x01
   1ab1a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab1c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab1e:	c5 50       	subi	r28, 0x05	; 5
   1ab20:	d1 40       	sbci	r29, 0x01	; 1
   1ab22:	28 0f       	add	r18, r24
   1ab24:	39 1f       	adc	r19, r25
   1ab26:	4a 1f       	adc	r20, r26
   1ab28:	5b 1f       	adc	r21, r27
   1ab2a:	cb 5f       	subi	r28, 0xFB	; 251
   1ab2c:	de 4f       	sbci	r29, 0xFE	; 254
   1ab2e:	28 83       	st	Y, r18
   1ab30:	39 83       	std	Y+1, r19	; 0x01
   1ab32:	4a 83       	std	Y+2, r20	; 0x02
   1ab34:	5b 83       	std	Y+3, r21	; 0x03
   1ab36:	c5 50       	subi	r28, 0x05	; 5
            printf("Wrote: %ld\r", count);
   1ab38:	d1 40       	sbci	r29, 0x01	; 1
   1ab3a:	cc 5f       	subi	r28, 0xFC	; 252
   1ab3c:	de 4f       	sbci	r29, 0xFE	; 254
   1ab3e:	38 81       	ld	r19, Y
   1ab40:	c4 50       	subi	r28, 0x04	; 4
   1ab42:	d1 40       	sbci	r29, 0x01	; 1
   1ab44:	3f 93       	push	r19
   1ab46:	cd 5f       	subi	r28, 0xFD	; 253
   1ab48:	de 4f       	sbci	r29, 0xFE	; 254
   1ab4a:	48 81       	ld	r20, Y
   1ab4c:	c3 50       	subi	r28, 0x03	; 3
   1ab4e:	d1 40       	sbci	r29, 0x01	; 1
   1ab50:	4f 93       	push	r20
   1ab52:	ce 5f       	subi	r28, 0xFE	; 254
   1ab54:	de 4f       	sbci	r29, 0xFE	; 254
   1ab56:	58 81       	ld	r21, Y
   1ab58:	c2 50       	subi	r28, 0x02	; 2
   1ab5a:	d1 40       	sbci	r29, 0x01	; 1
   1ab5c:	5f 93       	push	r21
   1ab5e:	cf 5f       	subi	r28, 0xFF	; 255
   1ab60:	de 4f       	sbci	r29, 0xFE	; 254
   1ab62:	88 81       	ld	r24, Y
   1ab64:	c1 50       	subi	r28, 0x01	; 1
   1ab66:	d1 40       	sbci	r29, 0x01	; 1
   1ab68:	8f 93       	push	r24
   1ab6a:	1f 92       	push	r1
   1ab6c:	7f 92       	push	r7
   1ab6e:	6f 92       	push	r6
   1ab70:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1ab74:	cf 5f       	subi	r28, 0xFF	; 255
   1ab76:	de 4f       	sbci	r29, 0xFE	; 254
   1ab78:	28 81       	ld	r18, Y
   1ab7a:	39 81       	ldd	r19, Y+1	; 0x01
   1ab7c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab7e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab80:	c1 50       	subi	r28, 0x01	; 1
   1ab82:	d1 40       	sbci	r29, 0x01	; 1
   1ab84:	2f 5f       	subi	r18, 0xFF	; 255
   1ab86:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab88:	4f 4f       	sbci	r20, 0xFF	; 255
   1ab8a:	5f 4f       	sbci	r21, 0xFF	; 255
   1ab8c:	cf 5f       	subi	r28, 0xFF	; 255
   1ab8e:	de 4f       	sbci	r29, 0xFE	; 254
   1ab90:	28 83       	st	Y, r18
   1ab92:	39 83       	std	Y+1, r19	; 0x01
   1ab94:	4a 83       	std	Y+2, r20	; 0x02
   1ab96:	5b 83       	std	Y+3, r21	; 0x03
   1ab98:	c1 50       	subi	r28, 0x01	; 1
   1ab9a:	d1 40       	sbci	r29, 0x01	; 1
   1ab9c:	0f b6       	in	r0, 0x3f	; 63
   1ab9e:	f8 94       	cli
   1aba0:	de bf       	out	0x3e, r29	; 62
   1aba2:	0f be       	out	0x3f, r0	; 63
   1aba4:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1aba6:	8e cf       	rjmp	.-228    	; 0x1aac4 <lif_create_volume+0x1f0>
   1aba8:	c7 01       	movw	r24, r14
   1abaa:	0e 94 d4 cd 	call	0x19ba8	; 0x19ba8 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1abae:	8f ef       	ldi	r24, 0xFF	; 255
   1abb0:	9f ef       	ldi	r25, 0xFF	; 255
   1abb2:	f7 01       	movw	r30, r14
   1abb4:	e6 5a       	subi	r30, 0xA6	; 166
   1abb6:	ff 4f       	sbci	r31, 0xFF	; 255
   1abb8:	91 83       	std	Z+1, r25	; 0x01
   1abba:	80 83       	st	Z, r24
   1abbc:	46 01       	movw	r8, r12
   1abbe:	6e 01       	movw	r12, r28
   1abc0:	91 e0       	ldi	r25, 0x01	; 1
   1abc2:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1abc4:	d9 1e       	adc	r13, r25
   1abc6:	b4 01       	movw	r22, r8
   1abc8:	c7 01       	movw	r24, r14
   1abca:	0e 94 0f cc 	call	0x1981e	; 0x1981e <lif_dir2str>
   1abce:	a0 e2       	ldi	r26, 0x20	; 32
   1abd0:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1abd2:	91 1c       	adc	r9, r1
   1abd4:	c8 14       	cp	r12, r8
   1abd6:	d9 04       	cpc	r13, r9
   1abd8:	b1 f7       	brne	.-20     	; 0x1abc6 <lif_create_volume+0x2f2>
   1abda:	81 2c       	mov	r8, r1
   1abdc:	91 2c       	mov	r9, r1
   1abde:	54 01       	movw	r10, r8
   1abe0:	fe 01       	movw	r30, r28
   1abe2:	31 96       	adiw	r30, 0x01	; 1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1abe4:	6f 01       	movw	r12, r30
   1abe6:	8b ed       	ldi	r24, 0xDB	; 219
   1abe8:	9c e3       	ldi	r25, 0x3C	; 60
   1abea:	2c 01       	movw	r4, r24
   1abec:	61 2c       	mov	r6, r1
   1abee:	cf 5f       	subi	r28, 0xFF	; 255
   1abf0:	de 4f       	sbci	r29, 0xFE	; 254
   1abf2:	28 81       	ld	r18, Y
   1abf4:	39 81       	ldd	r19, Y+1	; 0x01
   1abf6:	4a 81       	ldd	r20, Y+2	; 0x02
   1abf8:	5b 81       	ldd	r21, Y+3	; 0x03
   1abfa:	c1 50       	subi	r28, 0x01	; 1
   1abfc:	d1 40       	sbci	r29, 0x01	; 1
   1abfe:	28 0d       	add	r18, r8
   1ac00:	39 1d       	adc	r19, r9
   1ac02:	4a 1d       	adc	r20, r10
   1ac04:	5b 1d       	adc	r21, r11
   1ac06:	c7 5f       	subi	r28, 0xF7	; 247
   1ac08:	de 4f       	sbci	r29, 0xFE	; 254
   1ac0a:	28 83       	st	Y, r18
   1ac0c:	39 83       	std	Y+1, r19	; 0x01
   1ac0e:	4a 83       	std	Y+2, r20	; 0x02
   1ac10:	5b 83       	std	Y+3, r21	; 0x03
   1ac12:	c9 50       	subi	r28, 0x09	; 9
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1ac14:	d1 40       	sbci	r29, 0x01	; 1
   1ac16:	cf 5e       	subi	r28, 0xEF	; 239
   1ac18:	de 4f       	sbci	r29, 0xFE	; 254
   1ac1a:	88 81       	ld	r24, Y
   1ac1c:	99 81       	ldd	r25, Y+1	; 0x01
   1ac1e:	aa 81       	ldd	r26, Y+2	; 0x02
   1ac20:	bb 81       	ldd	r27, Y+3	; 0x03
   1ac22:	c1 51       	subi	r28, 0x11	; 17
   1ac24:	d1 40       	sbci	r29, 0x01	; 1
   1ac26:	88 16       	cp	r8, r24
   1ac28:	99 06       	cpc	r9, r25
   1ac2a:	aa 06       	cpc	r10, r26
   1ac2c:	bb 06       	cpc	r11, r27
   1ac2e:	0c f0       	brlt	.+2      	; 0x1ac32 <lif_create_volume+0x35e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ac30:	67 c0       	rjmp	.+206    	; 0x1ad00 <lif_create_volume+0x42c>
   1ac32:	00 e0       	ldi	r16, 0x00	; 0
   1ac34:	11 e0       	ldi	r17, 0x01	; 1
   1ac36:	cb 5f       	subi	r28, 0xFB	; 251
   1ac38:	de 4f       	sbci	r29, 0xFE	; 254
   1ac3a:	28 81       	ld	r18, Y
   1ac3c:	39 81       	ldd	r19, Y+1	; 0x01
   1ac3e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac40:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac42:	c5 50       	subi	r28, 0x05	; 5
   1ac44:	d1 40       	sbci	r29, 0x01	; 1
   1ac46:	b6 01       	movw	r22, r12
   1ac48:	c7 01       	movw	r24, r14
   1ac4a:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
   1ac4e:	09 2e       	mov	r0, r25
   1ac50:	00 0c       	add	r0, r0
   1ac52:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ac54:	bb 0b       	sbc	r27, r27
   1ac56:	8f 3f       	cpi	r24, 0xFF	; 255
   1ac58:	91 05       	cpc	r25, r1
   1ac5a:	a1 05       	cpc	r26, r1
   1ac5c:	b1 05       	cpc	r27, r1
   1ac5e:	09 f0       	breq	.+2      	; 0x1ac62 <lif_create_volume+0x38e>
   1ac60:	0c f4       	brge	.+2      	; 0x1ac64 <lif_create_volume+0x390>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ac62:	fc c0       	rjmp	.+504    	; 0x1ae5c <lif_create_volume+0x588>
   1ac64:	cb 5f       	subi	r28, 0xFB	; 251
   1ac66:	de 4f       	sbci	r29, 0xFE	; 254
   1ac68:	28 81       	ld	r18, Y
   1ac6a:	39 81       	ldd	r19, Y+1	; 0x01
   1ac6c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac6e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac70:	c5 50       	subi	r28, 0x05	; 5
   1ac72:	d1 40       	sbci	r29, 0x01	; 1
   1ac74:	28 0f       	add	r18, r24
   1ac76:	39 1f       	adc	r19, r25
   1ac78:	4a 1f       	adc	r20, r26
   1ac7a:	5b 1f       	adc	r21, r27
   1ac7c:	cb 5f       	subi	r28, 0xFB	; 251
   1ac7e:	de 4f       	sbci	r29, 0xFE	; 254
   1ac80:	28 83       	st	Y, r18
   1ac82:	39 83       	std	Y+1, r19	; 0x01
   1ac84:	4a 83       	std	Y+2, r20	; 0x02
   1ac86:	5b 83       	std	Y+3, r21	; 0x03
   1ac88:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1ac8a:	d1 40       	sbci	r29, 0x01	; 1
   1ac8c:	c7 5f       	subi	r28, 0xF7	; 247
   1ac8e:	de 4f       	sbci	r29, 0xFE	; 254
   1ac90:	68 81       	ld	r22, Y
   1ac92:	79 81       	ldd	r23, Y+1	; 0x01
   1ac94:	8a 81       	ldd	r24, Y+2	; 0x02
   1ac96:	9b 81       	ldd	r25, Y+3	; 0x03
   1ac98:	c9 50       	subi	r28, 0x09	; 9
   1ac9a:	d1 40       	sbci	r29, 0x01	; 1
   1ac9c:	24 e6       	ldi	r18, 0x64	; 100
   1ac9e:	30 e0       	ldi	r19, 0x00	; 0
   1aca0:	40 e0       	ldi	r20, 0x00	; 0
   1aca2:	50 e0       	ldi	r21, 0x00	; 0
   1aca4:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
   1aca8:	67 2b       	or	r22, r23
   1acaa:	68 2b       	or	r22, r24
   1acac:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1acae:	11 f5       	brne	.+68     	; 0x1acf4 <lif_create_volume+0x420>
   1acb0:	c4 5f       	subi	r28, 0xF4	; 244
   1acb2:	de 4f       	sbci	r29, 0xFE	; 254
   1acb4:	38 81       	ld	r19, Y
   1acb6:	cc 50       	subi	r28, 0x0C	; 12
   1acb8:	d1 40       	sbci	r29, 0x01	; 1
   1acba:	3f 93       	push	r19
   1acbc:	c5 5f       	subi	r28, 0xF5	; 245
   1acbe:	de 4f       	sbci	r29, 0xFE	; 254
   1acc0:	48 81       	ld	r20, Y
   1acc2:	cb 50       	subi	r28, 0x0B	; 11
   1acc4:	d1 40       	sbci	r29, 0x01	; 1
   1acc6:	4f 93       	push	r20
   1acc8:	c6 5f       	subi	r28, 0xF6	; 246
   1acca:	de 4f       	sbci	r29, 0xFE	; 254
   1accc:	58 81       	ld	r21, Y
   1acce:	ca 50       	subi	r28, 0x0A	; 10
   1acd0:	d1 40       	sbci	r29, 0x01	; 1
   1acd2:	5f 93       	push	r21
   1acd4:	c7 5f       	subi	r28, 0xF7	; 247
   1acd6:	de 4f       	sbci	r29, 0xFE	; 254
   1acd8:	88 81       	ld	r24, Y
   1acda:	c9 50       	subi	r28, 0x09	; 9
   1acdc:	d1 40       	sbci	r29, 0x01	; 1
   1acde:	8f 93       	push	r24
   1ace0:	1f 92       	push	r1
   1ace2:	5f 92       	push	r5
   1ace4:	4f 92       	push	r4
   1ace6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1acea:	0f b6       	in	r0, 0x3f	; 63
   1acec:	f8 94       	cli
   1acee:	de bf       	out	0x3e, r29	; 62
   1acf0:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1acf2:	cd bf       	out	0x3d, r28	; 61
   1acf4:	bf ef       	ldi	r27, 0xFF	; 255
   1acf6:	8b 1a       	sub	r8, r27
   1acf8:	9b 0a       	sbc	r9, r27
   1acfa:	ab 0a       	sbc	r10, r27
   1acfc:	bb 0a       	sbc	r11, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1acfe:	77 cf       	rjmp	.-274    	; 0x1abee <lif_create_volume+0x31a>
   1ad00:	80 e0       	ldi	r24, 0x00	; 0
   1ad02:	91 e0       	ldi	r25, 0x01	; 1
   1ad04:	d6 01       	movw	r26, r12
   1ad06:	fc 01       	movw	r30, r24
   1ad08:	1d 92       	st	X+, r1
   1ad0a:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1ad0c:	e9 f7       	brne	.-6      	; 0x1ad08 <lif_create_volume+0x434>
   1ad0e:	41 2c       	mov	r4, r1
   1ad10:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1ad12:	32 01       	movw	r6, r4
   1ad14:	8f ec       	ldi	r24, 0xCF	; 207
   1ad16:	9c e3       	ldi	r25, 0x3C	; 60
   1ad18:	9c 01       	movw	r18, r24
   1ad1a:	40 e0       	ldi	r20, 0x00	; 0
   1ad1c:	cf 5f       	subi	r28, 0xFF	; 255
   1ad1e:	de 4f       	sbci	r29, 0xFE	; 254
   1ad20:	28 83       	st	Y, r18
   1ad22:	39 83       	std	Y+1, r19	; 0x01
   1ad24:	4a 83       	std	Y+2, r20	; 0x02
   1ad26:	c1 50       	subi	r28, 0x01	; 1
   1ad28:	d1 40       	sbci	r29, 0x01	; 1
   1ad2a:	c7 5f       	subi	r28, 0xF7	; 247
   1ad2c:	de 4f       	sbci	r29, 0xFE	; 254
   1ad2e:	88 80       	ld	r8, Y
   1ad30:	99 80       	ldd	r9, Y+1	; 0x01
   1ad32:	aa 80       	ldd	r10, Y+2	; 0x02
   1ad34:	bb 80       	ldd	r11, Y+3	; 0x03
   1ad36:	c9 50       	subi	r28, 0x09	; 9
   1ad38:	d1 40       	sbci	r29, 0x01	; 1
   1ad3a:	84 0c       	add	r8, r4
   1ad3c:	95 1c       	adc	r9, r5
   1ad3e:	a6 1c       	adc	r10, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1ad40:	b7 1c       	adc	r11, r7
   1ad42:	c3 5f       	subi	r28, 0xF3	; 243
   1ad44:	de 4f       	sbci	r29, 0xFE	; 254
   1ad46:	28 81       	ld	r18, Y
   1ad48:	39 81       	ldd	r19, Y+1	; 0x01
   1ad4a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad4c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad4e:	cd 50       	subi	r28, 0x0D	; 13
   1ad50:	d1 40       	sbci	r29, 0x01	; 1
   1ad52:	42 16       	cp	r4, r18
   1ad54:	53 06       	cpc	r5, r19
   1ad56:	64 06       	cpc	r6, r20
   1ad58:	75 06       	cpc	r7, r21
   1ad5a:	0c f0       	brlt	.+2      	; 0x1ad5e <lif_create_volume+0x48a>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ad5c:	59 c0       	rjmp	.+178    	; 0x1ae10 <lif_create_volume+0x53c>
   1ad5e:	00 e0       	ldi	r16, 0x00	; 0
   1ad60:	11 e0       	ldi	r17, 0x01	; 1
   1ad62:	cb 5f       	subi	r28, 0xFB	; 251
   1ad64:	de 4f       	sbci	r29, 0xFE	; 254
   1ad66:	28 81       	ld	r18, Y
   1ad68:	39 81       	ldd	r19, Y+1	; 0x01
   1ad6a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad6c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad6e:	c5 50       	subi	r28, 0x05	; 5
   1ad70:	d1 40       	sbci	r29, 0x01	; 1
   1ad72:	be 01       	movw	r22, r28
   1ad74:	6f 5f       	subi	r22, 0xFF	; 255
   1ad76:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad78:	c7 01       	movw	r24, r14
   1ad7a:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
   1ad7e:	09 2e       	mov	r0, r25
   1ad80:	00 0c       	add	r0, r0
   1ad82:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ad84:	bb 0b       	sbc	r27, r27
   1ad86:	8f 3f       	cpi	r24, 0xFF	; 255
   1ad88:	91 05       	cpc	r25, r1
   1ad8a:	a1 05       	cpc	r26, r1
   1ad8c:	b1 05       	cpc	r27, r1
   1ad8e:	09 f0       	breq	.+2      	; 0x1ad92 <lif_create_volume+0x4be>
   1ad90:	0c f4       	brge	.+2      	; 0x1ad94 <lif_create_volume+0x4c0>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ad92:	64 c0       	rjmp	.+200    	; 0x1ae5c <lif_create_volume+0x588>
   1ad94:	cb 5f       	subi	r28, 0xFB	; 251
   1ad96:	de 4f       	sbci	r29, 0xFE	; 254
   1ad98:	28 81       	ld	r18, Y
   1ad9a:	39 81       	ldd	r19, Y+1	; 0x01
   1ad9c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad9e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ada0:	c5 50       	subi	r28, 0x05	; 5
   1ada2:	d1 40       	sbci	r29, 0x01	; 1
   1ada4:	28 0f       	add	r18, r24
   1ada6:	39 1f       	adc	r19, r25
   1ada8:	4a 1f       	adc	r20, r26
   1adaa:	5b 1f       	adc	r21, r27
   1adac:	cb 5f       	subi	r28, 0xFB	; 251
   1adae:	de 4f       	sbci	r29, 0xFE	; 254
   1adb0:	28 83       	st	Y, r18
   1adb2:	39 83       	std	Y+1, r19	; 0x01
   1adb4:	4a 83       	std	Y+2, r20	; 0x02
   1adb6:	5b 83       	std	Y+3, r21	; 0x03
   1adb8:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1adba:	d1 40       	sbci	r29, 0x01	; 1
   1adbc:	c5 01       	movw	r24, r10
   1adbe:	b4 01       	movw	r22, r8
   1adc0:	24 e6       	ldi	r18, 0x64	; 100
   1adc2:	30 e0       	ldi	r19, 0x00	; 0
   1adc4:	40 e0       	ldi	r20, 0x00	; 0
   1adc6:	50 e0       	ldi	r21, 0x00	; 0
   1adc8:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
   1adcc:	67 2b       	or	r22, r23
   1adce:	68 2b       	or	r22, r24
   1add0:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1add2:	c1 f4       	brne	.+48     	; 0x1ae04 <lif_create_volume+0x530>
   1add4:	bf 92       	push	r11
   1add6:	af 92       	push	r10
   1add8:	9f 92       	push	r9
   1adda:	8f 92       	push	r8
   1addc:	1f 92       	push	r1
   1adde:	ce 5f       	subi	r28, 0xFE	; 254
   1ade0:	de 4f       	sbci	r29, 0xFE	; 254
   1ade2:	38 81       	ld	r19, Y
   1ade4:	c2 50       	subi	r28, 0x02	; 2
   1ade6:	d1 40       	sbci	r29, 0x01	; 1
   1ade8:	3f 93       	push	r19
   1adea:	cf 5f       	subi	r28, 0xFF	; 255
   1adec:	de 4f       	sbci	r29, 0xFE	; 254
   1adee:	48 81       	ld	r20, Y
   1adf0:	c1 50       	subi	r28, 0x01	; 1
   1adf2:	d1 40       	sbci	r29, 0x01	; 1
   1adf4:	4f 93       	push	r20
   1adf6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1adfa:	0f b6       	in	r0, 0x3f	; 63
   1adfc:	f8 94       	cli
   1adfe:	de bf       	out	0x3e, r29	; 62
   1ae00:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1ae02:	cd bf       	out	0x3d, r28	; 61
   1ae04:	9f ef       	ldi	r25, 0xFF	; 255
   1ae06:	49 1a       	sub	r4, r25
   1ae08:	59 0a       	sbc	r5, r25
   1ae0a:	69 0a       	sbc	r6, r25
   1ae0c:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    if(debuglevel & 0x400)
   1ae0e:	8d cf       	rjmp	.-230    	; 0x1ad2a <lif_create_volume+0x456>
   1ae10:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ae14:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ae18:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_create_volume");
   1ae1a:	05 c0       	rjmp	.+10     	; 0x1ae26 <lif_create_volume+0x552>
   1ae1c:	64 ee       	ldi	r22, 0xE4	; 228
   1ae1e:	75 e1       	ldi	r23, 0x15	; 21
   1ae20:	c7 01       	movw	r24, r14
   1ae22:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <lif_dump_vol>
    printf("Wrote: %ld\n", count);
   1ae26:	bf 92       	push	r11
   1ae28:	af 92       	push	r10
   1ae2a:	9f 92       	push	r9
   1ae2c:	8f 92       	push	r8
   1ae2e:	83 ec       	ldi	r24, 0xC3	; 195
   1ae30:	9c e3       	ldi	r25, 0x3C	; 60
   1ae32:	1f 92       	push	r1
   1ae34:	9f 93       	push	r25
   1ae36:	8f 93       	push	r24
   1ae38:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1ae3c:	8f ef       	ldi	r24, 0xFF	; 255
   1ae3e:	9f ef       	ldi	r25, 0xFF	; 255
   1ae40:	d7 01       	movw	r26, r14
   1ae42:	91 96       	adiw	r26, 0x21	; 33
   1ae44:	9c 93       	st	X, r25
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1ae46:	8e 93       	st	-X, r24
   1ae48:	90 97       	sbiw	r26, 0x20	; 32
   1ae4a:	c7 01       	movw	r24, r14
   1ae4c:	4f d8       	rcall	.-3938   	; 0x19eec <lif_check_volume>
   1ae4e:	0f b6       	in	r0, 0x3f	; 63
   1ae50:	f8 94       	cli
   1ae52:	de bf       	out	0x3e, r29	; 62
   1ae54:	0f be       	out	0x3f, r0	; 63
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae56:	cd bf       	out	0x3d, r28	; 61
   1ae58:	89 2b       	or	r24, r25
   1ae5a:	19 f4       	brne	.+6      	; 0x1ae62 <lif_create_volume+0x58e>
   1ae5c:	c7 01       	movw	r24, r14
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1ae5e:	d4 da       	rcall	.-2648   	; 0x1a408 <lif_close_volume>
   1ae60:	08 c0       	rjmp	.+16     	; 0x1ae72 <lif_create_volume+0x59e>
   1ae62:	c7 01       	movw	r24, r14
   1ae64:	2f dc       	rcall	.-1954   	; 0x1a6c4 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae66:	6c 01       	movw	r12, r24
   1ae68:	89 2b       	or	r24, r25
   1ae6a:	31 f4       	brne	.+12     	; 0x1ae78 <lif_create_volume+0x5a4>

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1ae6c:	c7 01       	movw	r24, r14

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1ae6e:	cc da       	rcall	.-2664   	; 0x1a408 <lif_close_volume>
   1ae70:	04 c0       	rjmp	.+8      	; 0x1ae7a <lif_create_volume+0x5a6>
   1ae72:	c1 2c       	mov	r12, r1
   1ae74:	d1 2c       	mov	r13, r1
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1ae76:	01 c0       	rjmp	.+2      	; 0x1ae7a <lif_create_volume+0x5a6>
   1ae78:	67 01       	movw	r12, r14
   1ae7a:	c6 01       	movw	r24, r12
   1ae7c:	cc 5e       	subi	r28, 0xEC	; 236
   1ae7e:	de 4f       	sbci	r29, 0xFE	; 254
   1ae80:	e2 e1       	ldi	r30, 0x12	; 18
   1ae82:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001ae86 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1ae86:	ac e0       	ldi	r26, 0x0C	; 12
   1ae88:	b0 e0       	ldi	r27, 0x00	; 0
   1ae8a:	e9 e4       	ldi	r30, 0x49	; 73
   1ae8c:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae8e:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1ae92:	9c 87       	std	Y+12, r25	; 0x0c
   1ae94:	8b 87       	std	Y+11, r24	; 0x0b
   1ae96:	6a 01       	movw	r12, r20
   1ae98:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1ae9a:	fc 01       	movw	r30, r24
   1ae9c:	84 84       	ldd	r8, Z+12	; 0x0c
   1ae9e:	95 84       	ldd	r9, Z+13	; 0x0d
   1aea0:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1aea2:	b7 84       	ldd	r11, Z+15	; 0x0f
   1aea4:	0f dc       	rcall	.-2018   	; 0x1a6c4 <lif_updatefree>
   1aea6:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1aea8:	b1 f4       	brne	.+44     	; 0x1aed6 <lif_newdir+0x50>
   1aeaa:	ff 92       	push	r15
   1aeac:	ef 92       	push	r14
   1aeae:	df 92       	push	r13
   1aeb0:	cf 92       	push	r12
   1aeb2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aeb4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aeb6:	83 8d       	ldd	r24, Z+27	; 0x1b
   1aeb8:	8f 93       	push	r24
   1aeba:	82 8d       	ldd	r24, Z+26	; 0x1a
   1aebc:	8f 93       	push	r24
   1aebe:	81 8d       	ldd	r24, Z+25	; 0x19
   1aec0:	8f 93       	push	r24
   1aec2:	80 8d       	ldd	r24, Z+24	; 0x18
   1aec4:	8f 93       	push	r24
   1aec6:	84 ee       	ldi	r24, 0xE4	; 228
   1aec8:	9b e3       	ldi	r25, 0x3B	; 59
   1aeca:	1f 92       	push	r1
   1aecc:	9f 93       	push	r25
   1aece:	8f 93       	push	r24
   1aed0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1aed4:	2c c0       	rjmp	.+88     	; 0x1af2e <lif_newdir+0xa8>
   1aed6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aed8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aeda:	80 8d       	ldd	r24, Z+24	; 0x18
   1aedc:	91 8d       	ldd	r25, Z+25	; 0x19
   1aede:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1aee0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1aee2:	8c 15       	cp	r24, r12
   1aee4:	9d 05       	cpc	r25, r13
   1aee6:	ae 05       	cpc	r26, r14
   1aee8:	bf 05       	cpc	r27, r15
   1aeea:	b4 f0       	brlt	.+44     	; 0x1af18 <lif_newdir+0x92>
   1aeec:	44 24       	eor	r4, r4
   1aeee:	43 94       	inc	r4
   1aef0:	51 2c       	mov	r5, r1
   1aef2:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1aef4:	71 2c       	mov	r7, r1
   1aef6:	e6 5a       	subi	r30, 0xA6	; 166
   1aef8:	ff 4f       	sbci	r31, 0xFF	; 255
   1aefa:	fc 83       	std	Y+4, r31	; 0x04
   1aefc:	eb 83       	std	Y+3, r30	; 0x03
   1aefe:	8b 85       	ldd	r24, Y+11	; 0x0b
   1af00:	9c 85       	ldd	r25, Y+12	; 0x0c
   1af02:	84 5a       	subi	r24, 0xA4	; 164
   1af04:	9f 4f       	sbci	r25, 0xFF	; 255
   1af06:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1af08:	89 83       	std	Y+1, r24	; 0x01
   1af0a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1af0c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1af0e:	e0 5a       	subi	r30, 0xA0	; 160
   1af10:	ff 4f       	sbci	r31, 0xFF	; 255
   1af12:	fe 83       	std	Y+6, r31	; 0x06
   1af14:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1af16:	23 c0       	rjmp	.+70     	; 0x1af5e <lif_newdir+0xd8>
   1af18:	bf 93       	push	r27
   1af1a:	af 93       	push	r26
   1af1c:	9f 93       	push	r25
   1af1e:	8f 93       	push	r24
   1af20:	8b eb       	ldi	r24, 0xBB	; 187
   1af22:	9b e3       	ldi	r25, 0x3B	; 59
   1af24:	1f 92       	push	r1
   1af26:	9f 93       	push	r25
   1af28:	8f 93       	push	r24
   1af2a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1af2e:	0f b6       	in	r0, 0x3f	; 63
   1af30:	f8 94       	cli
   1af32:	de bf       	out	0x3e, r29	; 62
   1af34:	0f be       	out	0x3f, r0	; 63
   1af36:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1af38:	05 c1       	rjmp	.+522    	; 0x1b144 <lif_newdir+0x2be>
   1af3a:	eb 81       	ldd	r30, Y+3	; 0x03
   1af3c:	fc 81       	ldd	r31, Y+4	; 0x04
   1af3e:	80 81       	ld	r24, Z
   1af40:	91 81       	ldd	r25, Z+1	; 0x01
   1af42:	8f 3f       	cpi	r24, 0xFF	; 255
   1af44:	ff ef       	ldi	r31, 0xFF	; 255
   1af46:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1af48:	a1 f0       	breq	.+40     	; 0x1af72 <lif_newdir+0xec>
   1af4a:	89 2b       	or	r24, r25
   1af4c:	09 f0       	breq	.+2      	; 0x1af50 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1af4e:	d0 c0       	rjmp	.+416    	; 0x1b0f0 <lif_newdir+0x26a>
   1af50:	61 14       	cp	r6, r1
   1af52:	71 04       	cpc	r7, r1
   1af54:	09 f4       	brne	.+2      	; 0x1af58 <lif_newdir+0xd2>
   1af56:	c3 c0       	rjmp	.+390    	; 0x1b0de <lif_newdir+0x258>
   1af58:	9f ef       	ldi	r25, 0xFF	; 255
   1af5a:	49 1a       	sub	r4, r25
   1af5c:	59 0a       	sbc	r5, r25
   1af5e:	82 01       	movw	r16, r4
   1af60:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1af62:	11 09       	sbc	r17, r1
   1af64:	b8 01       	movw	r22, r16
   1af66:	8b 85       	ldd	r24, Y+11	; 0x0b
   1af68:	9c 85       	ldd	r25, Y+12	; 0x0c
   1af6a:	cf da       	rcall	.-2658   	; 0x1a50a <lif_readdirindex>
   1af6c:	89 2b       	or	r24, r25
   1af6e:	29 f7       	brne	.-54     	; 0x1af3a <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1af70:	e9 c0       	rjmp	.+466    	; 0x1b144 <lif_newdir+0x2be>
   1af72:	22 e0       	ldi	r18, 0x02	; 2
   1af74:	62 16       	cp	r6, r18
   1af76:	71 04       	cpc	r7, r1
   1af78:	09 f0       	breq	.+2      	; 0x1af7c <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1af7a:	46 c0       	rjmp	.+140    	; 0x1b008 <lif_newdir+0x182>
   1af7c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1af7e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1af80:	0e 94 d4 cd 	call	0x19ba8	; 0x19ba8 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1af84:	eb 85       	ldd	r30, Y+11	; 0x0b
   1af86:	fc 85       	ldd	r31, Y+12	; 0x0c
   1af88:	e4 5a       	subi	r30, 0xA4	; 164
   1af8a:	ff 4f       	sbci	r31, 0xFF	; 255
   1af8c:	8f 81       	ldd	r24, Y+7	; 0x07
   1af8e:	80 83       	st	Z, r24
   1af90:	98 85       	ldd	r25, Y+8	; 0x08
   1af92:	91 83       	std	Z+1, r25	; 0x01
   1af94:	29 85       	ldd	r18, Y+9	; 0x09
   1af96:	22 83       	std	Z+2, r18	; 0x02
   1af98:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1af9a:	83 83       	std	Z+3, r24	; 0x03
   1af9c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1af9e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1afa0:	e0 5a       	subi	r30, 0xA0	; 160
   1afa2:	ff 4f       	sbci	r31, 0xFF	; 255
   1afa4:	c0 82       	st	Z, r12
   1afa6:	d1 82       	std	Z+1, r13	; 0x01
   1afa8:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1afaa:	f3 82       	std	Z+3, r15	; 0x03
   1afac:	eb 85       	ldd	r30, Y+11	; 0x0b
   1afae:	fc 85       	ldd	r31, Y+12	; 0x0c
   1afb0:	84 89       	ldd	r24, Z+20	; 0x14
   1afb2:	95 89       	ldd	r25, Z+21	; 0x15
   1afb4:	a6 89       	ldd	r26, Z+22	; 0x16
   1afb6:	b7 89       	ldd	r27, Z+23	; 0x17
   1afb8:	8c 0d       	add	r24, r12
   1afba:	9d 1d       	adc	r25, r13
   1afbc:	ae 1d       	adc	r26, r14
   1afbe:	bf 1d       	adc	r27, r15
   1afc0:	84 8b       	std	Z+20, r24	; 0x14
   1afc2:	95 8b       	std	Z+21, r25	; 0x15
   1afc4:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1afc6:	b7 8b       	std	Z+23, r27	; 0x17
   1afc8:	80 8d       	ldd	r24, Z+24	; 0x18
   1afca:	91 8d       	ldd	r25, Z+25	; 0x19
   1afcc:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1afce:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1afd0:	8c 19       	sub	r24, r12
   1afd2:	9d 09       	sbc	r25, r13
   1afd4:	ae 09       	sbc	r26, r14
   1afd6:	bf 09       	sbc	r27, r15
   1afd8:	80 8f       	std	Z+24, r24	; 0x18
   1afda:	91 8f       	std	Z+25, r25	; 0x19
   1afdc:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1afde:	b3 8f       	std	Z+27, r27	; 0x1b
   1afe0:	84 8d       	ldd	r24, Z+28	; 0x1c
   1afe2:	95 8d       	ldd	r25, Z+29	; 0x1d
   1afe4:	01 96       	adiw	r24, 0x01	; 1
   1afe6:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1afe8:	84 8f       	std	Z+28, r24	; 0x1c
   1afea:	86 8d       	ldd	r24, Z+30	; 0x1e
   1afec:	97 8d       	ldd	r25, Z+31	; 0x1f
   1afee:	01 97       	sbiw	r24, 0x01	; 1
   1aff0:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1aff2:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1aff4:	20 a2       	std	Z+32, r2	; 0x20
   1aff6:	31 a2       	std	Z+33, r3	; 0x21
   1aff8:	b1 01       	movw	r22, r2
   1affa:	cf 01       	movw	r24, r30
   1affc:	ef da       	rcall	.-2594   	; 0x1a5dc <lif_writedirindex>
   1affe:	89 2b       	or	r24, r25
   1b000:	09 f4       	brne	.+2      	; 0x1b004 <lif_newdir+0x17e>
   1b002:	a0 c0       	rjmp	.+320    	; 0x1b144 <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1b004:	c1 01       	movw	r24, r2
   1b006:	a0 c0       	rjmp	.+320    	; 0x1b148 <lif_newdir+0x2c2>
   1b008:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b00c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1b010:	92 ff       	sbrs	r25, 2
   1b012:	20 c0       	rjmp	.+64     	; 0x1b054 <lif_newdir+0x1ce>
   1b014:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b016:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b018:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b01a:	8f 93       	push	r24
   1b01c:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b01e:	8f 93       	push	r24
   1b020:	81 8d       	ldd	r24, Z+25	; 0x19
   1b022:	8f 93       	push	r24
   1b024:	80 8d       	ldd	r24, Z+24	; 0x18
   1b026:	8f 93       	push	r24
   1b028:	ff 92       	push	r15
   1b02a:	ef 92       	push	r14
   1b02c:	df 92       	push	r13
   1b02e:	cf 92       	push	r12
   1b030:	bf 92       	push	r11
   1b032:	af 92       	push	r10
   1b034:	9f 92       	push	r9
   1b036:	8f 92       	push	r8
   1b038:	1f 93       	push	r17
   1b03a:	0f 93       	push	r16
   1b03c:	8a e6       	ldi	r24, 0x6A	; 106
   1b03e:	9b e3       	ldi	r25, 0x3B	; 59
   1b040:	1f 92       	push	r1
   1b042:	9f 93       	push	r25
   1b044:	8f 93       	push	r24
   1b046:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b04a:	0f b6       	in	r0, 0x3f	; 63
   1b04c:	f8 94       	cli
   1b04e:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1b050:	0f be       	out	0x3f, r0	; 63
   1b052:	cd bf       	out	0x3d, r28	; 61
   1b054:	b8 01       	movw	r22, r16
   1b056:	6f 5f       	subi	r22, 0xFF	; 255
   1b058:	7f 4f       	sbci	r23, 0xFF	; 255
   1b05a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b05c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b05e:	1a db       	rcall	.-2508   	; 0x1a694 <lif_writedirEOF>
   1b060:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1b062:	09 f4       	brne	.+2      	; 0x1b066 <lif_newdir+0x1e0>
   1b064:	6f c0       	rjmp	.+222    	; 0x1b144 <lif_newdir+0x2be>
   1b066:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b068:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1b06a:	0e 94 d4 cd 	call	0x19ba8	; 0x19ba8 <lif_dir_clear>
   1b06e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b070:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b072:	e4 5a       	subi	r30, 0xA4	; 164
   1b074:	ff 4f       	sbci	r31, 0xFF	; 255
   1b076:	80 82       	st	Z, r8
   1b078:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1b07a:	a2 82       	std	Z+2, r10	; 0x02
   1b07c:	b3 82       	std	Z+3, r11	; 0x03
   1b07e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b080:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b082:	e0 5a       	subi	r30, 0xA0	; 160
   1b084:	ff 4f       	sbci	r31, 0xFF	; 255
   1b086:	c0 82       	st	Z, r12
   1b088:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1b08a:	e2 82       	std	Z+2, r14	; 0x02
   1b08c:	f3 82       	std	Z+3, r15	; 0x03
   1b08e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b090:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b092:	84 89       	ldd	r24, Z+20	; 0x14
   1b094:	95 89       	ldd	r25, Z+21	; 0x15
   1b096:	a6 89       	ldd	r26, Z+22	; 0x16
   1b098:	b7 89       	ldd	r27, Z+23	; 0x17
   1b09a:	8c 0d       	add	r24, r12
   1b09c:	9d 1d       	adc	r25, r13
   1b09e:	ae 1d       	adc	r26, r14
   1b0a0:	bf 1d       	adc	r27, r15
   1b0a2:	84 8b       	std	Z+20, r24	; 0x14
   1b0a4:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1b0a6:	a6 8b       	std	Z+22, r26	; 0x16
   1b0a8:	b7 8b       	std	Z+23, r27	; 0x17
   1b0aa:	80 8d       	ldd	r24, Z+24	; 0x18
   1b0ac:	91 8d       	ldd	r25, Z+25	; 0x19
   1b0ae:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b0b0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b0b2:	8c 19       	sub	r24, r12
   1b0b4:	9d 09       	sbc	r25, r13
   1b0b6:	ae 09       	sbc	r26, r14
   1b0b8:	bf 09       	sbc	r27, r15
   1b0ba:	80 8f       	std	Z+24, r24	; 0x18
   1b0bc:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1b0be:	a2 8f       	std	Z+26, r26	; 0x1a
   1b0c0:	b3 8f       	std	Z+27, r27	; 0x1b
   1b0c2:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b0c4:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1b0c6:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1b0c8:	95 8f       	std	Z+29, r25	; 0x1d
   1b0ca:	84 8f       	std	Z+28, r24	; 0x1c
   1b0cc:	11 a3       	std	Z+33, r17	; 0x21
   1b0ce:	00 a3       	std	Z+32, r16	; 0x20
   1b0d0:	b8 01       	movw	r22, r16
   1b0d2:	cf 01       	movw	r24, r30
   1b0d4:	83 da       	rcall	.-2810   	; 0x1a5dc <lif_writedirindex>
   1b0d6:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1b0d8:	a9 f1       	breq	.+106    	; 0x1b144 <lif_newdir+0x2be>
   1b0da:	c8 01       	movw	r24, r16
   1b0dc:	35 c0       	rjmp	.+106    	; 0x1b148 <lif_newdir+0x2c2>
   1b0de:	8f 82       	std	Y+7, r8	; 0x07
   1b0e0:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1b0e2:	a9 86       	std	Y+9, r10	; 0x09
   1b0e4:	ba 86       	std	Y+10, r11	; 0x0a
   1b0e6:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1b0e8:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1b0ea:	63 94       	inc	r6
   1b0ec:	71 2c       	mov	r7, r1
   1b0ee:	34 cf       	rjmp	.-408    	; 0x1af58 <lif_newdir+0xd2>
   1b0f0:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1b0f2:	6f 16       	cp	r6, r31
   1b0f4:	71 04       	cpc	r7, r1
   1b0f6:	a9 f4       	brne	.+42     	; 0x1b122 <lif_newdir+0x29c>
   1b0f8:	e9 81       	ldd	r30, Y+1	; 0x01
   1b0fa:	fa 81       	ldd	r31, Y+2	; 0x02
   1b0fc:	80 81       	ld	r24, Z
   1b0fe:	91 81       	ldd	r25, Z+1	; 0x01
   1b100:	a2 81       	ldd	r26, Z+2	; 0x02
   1b102:	b3 81       	ldd	r27, Z+3	; 0x03
   1b104:	88 19       	sub	r24, r8
   1b106:	99 09       	sbc	r25, r9
   1b108:	aa 09       	sbc	r26, r10
   1b10a:	bb 09       	sbc	r27, r11
   1b10c:	8c 15       	cp	r24, r12
   1b10e:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1b110:	ae 05       	cpc	r26, r14
   1b112:	bf 05       	cpc	r27, r15
   1b114:	1c f4       	brge	.+6      	; 0x1b11c <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1b116:	61 2c       	mov	r6, r1
   1b118:	71 2c       	mov	r7, r1
   1b11a:	03 c0       	rjmp	.+6      	; 0x1b122 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1b11c:	82 e0       	ldi	r24, 0x02	; 2
   1b11e:	68 2e       	mov	r6, r24
   1b120:	71 2c       	mov	r7, r1
   1b122:	e9 81       	ldd	r30, Y+1	; 0x01
   1b124:	fa 81       	ldd	r31, Y+2	; 0x02
   1b126:	80 80       	ld	r8, Z
   1b128:	91 80       	ldd	r9, Z+1	; 0x01
   1b12a:	a2 80       	ldd	r10, Z+2	; 0x02
   1b12c:	b3 80       	ldd	r11, Z+3	; 0x03
   1b12e:	ed 81       	ldd	r30, Y+5	; 0x05
   1b130:	fe 81       	ldd	r31, Y+6	; 0x06
   1b132:	80 81       	ld	r24, Z
   1b134:	91 81       	ldd	r25, Z+1	; 0x01
   1b136:	a2 81       	ldd	r26, Z+2	; 0x02
   1b138:	b3 81       	ldd	r27, Z+3	; 0x03
   1b13a:	88 0e       	add	r8, r24
   1b13c:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1b13e:	aa 1e       	adc	r10, r26
   1b140:	bb 1e       	adc	r11, r27
}
   1b142:	0a cf       	rjmp	.-492    	; 0x1af58 <lif_newdir+0xd2>
   1b144:	8f ef       	ldi	r24, 0xFF	; 255
   1b146:	9f ef       	ldi	r25, 0xFF	; 255
   1b148:	2c 96       	adiw	r28, 0x0c	; 12
   1b14a:	e2 e1       	ldi	r30, 0x12	; 18
   1b14c:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001b150 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1b150:	a0 e3       	ldi	r26, 0x30	; 48
   1b152:	b1 e0       	ldi	r27, 0x01	; 1
   1b154:	ee ea       	ldi	r30, 0xAE	; 174
   1b156:	f8 ed       	ldi	r31, 0xD8	; 216
   1b158:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   1b15c:	b8 2e       	mov	r11, r24
   1b15e:	a9 2e       	mov	r10, r25
   1b160:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1b162:	be 01       	movw	r22, r28
   1b164:	6f 5f       	subi	r22, 0xFF	; 255
   1b166:	7e 4f       	sbci	r23, 0xFE	; 254
   1b168:	0e 94 0e c9 	call	0x1921c	; 0x1921c <lif_stat>
   1b16c:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1b16e:	00 97       	sbiw	r24, 0x00	; 0
   1b170:	09 f4       	brne	.+2      	; 0x1b174 <lif_open_volume+0x24>
   1b172:	92 c0       	rjmp	.+292    	; 0x1b298 <lif_open_volume+0x148>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1b174:	fc 01       	movw	r30, r24
   1b176:	80 8d       	ldd	r24, Z+24	; 0x18
   1b178:	91 8d       	ldd	r25, Z+25	; 0x19
   1b17a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b17c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b17e:	81 15       	cp	r24, r1
   1b180:	f2 e0       	ldi	r31, 0x02	; 2
   1b182:	9f 07       	cpc	r25, r31
   1b184:	a1 05       	cpc	r26, r1
   1b186:	b1 05       	cpc	r27, r1
   1b188:	b8 f4       	brcc	.+46     	; 0x1b1b8 <lif_open_volume+0x68>
    {
        if(debuglevel & 1)
   1b18a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b18e:	20 ff       	sbrs	r18, 0
   1b190:	83 c0       	rjmp	.+262    	; 0x1b298 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1b192:	bf 93       	push	r27
   1b194:	af 93       	push	r26
   1b196:	9f 93       	push	r25
   1b198:	8f 93       	push	r24
   1b19a:	af 92       	push	r10
   1b19c:	bf 92       	push	r11
   1b19e:	8b e2       	ldi	r24, 0x2B	; 43
   1b1a0:	9b e3       	ldi	r25, 0x3B	; 59
   1b1a2:	1f 92       	push	r1
   1b1a4:	9f 93       	push	r25
   1b1a6:	8f 93       	push	r24
   1b1a8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b1ac:	0f b6       	in	r0, 0x3f	; 63
   1b1ae:	f8 94       	cli
   1b1b0:	de bf       	out	0x3e, r29	; 62
   1b1b2:	0f be       	out	0x3f, r0	; 63
   1b1b4:	cd bf       	out	0x3d, r28	; 61
   1b1b6:	70 c0       	rjmp	.+224    	; 0x1b298 <lif_open_volume+0x148>
        return(NULL);
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1b1b8:	64 e7       	ldi	r22, 0x74	; 116
   1b1ba:	70 e0       	ldi	r23, 0x00	; 0
   1b1bc:	80 e0       	ldi	r24, 0x00	; 0
   1b1be:	90 e0       	ldi	r25, 0x00	; 0
   1b1c0:	0e 94 8b c8 	call	0x19116	; 0x19116 <lif_calloc>
   1b1c4:	7c 01       	movw	r14, r24
    if(!LIF)
   1b1c6:	89 2b       	or	r24, r25
   1b1c8:	09 f4       	brne	.+2      	; 0x1b1cc <lif_open_volume+0x7c>
   1b1ca:	66 c0       	rjmp	.+204    	; 0x1b298 <lif_open_volume+0x148>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1b1cc:	8b 2d       	mov	r24, r11
   1b1ce:	9a 2d       	mov	r25, r10
   1b1d0:	0e 94 c7 c8 	call	0x1918e	; 0x1918e <lif_stralloc>
   1b1d4:	f7 01       	movw	r30, r14
   1b1d6:	91 83       	std	Z+1, r25	; 0x01
   1b1d8:	80 83       	st	Z, r24
    if(!LIF->name)
   1b1da:	00 97       	sbiw	r24, 0x00	; 0
   1b1dc:	09 f4       	brne	.+2      	; 0x1b1e0 <lif_open_volume+0x90>
   1b1de:	5a c0       	rjmp	.+180    	; 0x1b294 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1b1e0:	f8 01       	movw	r30, r16
   1b1e2:	00 8d       	ldd	r16, Z+24	; 0x18
   1b1e4:	11 8d       	ldd	r17, Z+25	; 0x19
   1b1e6:	22 8d       	ldd	r18, Z+26	; 0x1a
   1b1e8:	33 8d       	ldd	r19, Z+27	; 0x1b
   1b1ea:	f7 01       	movw	r30, r14
   1b1ec:	00 87       	std	Z+8, r16	; 0x08
   1b1ee:	11 87       	std	Z+9, r17	; 0x09
   1b1f0:	22 87       	std	Z+10, r18	; 0x0a
   1b1f2:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b1f4:	77 27       	eor	r23, r23
   1b1f6:	63 2f       	mov	r22, r19
   1b1f8:	52 2f       	mov	r21, r18
   1b1fa:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b1fc:	00 23       	and	r16, r16
   1b1fe:	21 f0       	breq	.+8      	; 0x1b208 <lif_open_volume+0xb8>
        ++sectors;
   1b200:	4f 5f       	subi	r20, 0xFF	; 255
   1b202:	5f 4f       	sbci	r21, 0xFF	; 255
   1b204:	6f 4f       	sbci	r22, 0xFF	; 255
   1b206:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1b208:	f7 01       	movw	r30, r14
   1b20a:	44 83       	std	Z+4, r20	; 0x04
   1b20c:	55 83       	std	Z+5, r21	; 0x05
   1b20e:	66 83       	std	Z+6, r22	; 0x06
   1b210:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1b212:	b6 01       	movw	r22, r12
   1b214:	0e 94 e6 c8 	call	0x191cc	; 0x191cc <lif_open>
   1b218:	f7 01       	movw	r30, r14
   1b21a:	93 83       	std	Z+3, r25	; 0x03
   1b21c:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1b21e:	89 2b       	or	r24, r25
   1b220:	c9 f1       	breq	.+114    	; 0x1b294 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1b222:	00 e0       	ldi	r16, 0x00	; 0
   1b224:	11 e0       	ldi	r17, 0x01	; 1
   1b226:	20 e0       	ldi	r18, 0x00	; 0
   1b228:	30 e0       	ldi	r19, 0x00	; 0
   1b22a:	a9 01       	movw	r20, r18
   1b22c:	be 01       	movw	r22, r28
   1b22e:	6f 5f       	subi	r22, 0xFF	; 255
   1b230:	7f 4f       	sbci	r23, 0xFF	; 255
   1b232:	c7 01       	movw	r24, r14
   1b234:	0e 94 6c c9 	call	0x192d8	; 0x192d8 <lif_read>
   1b238:	6f 3f       	cpi	r22, 0xFF	; 255
   1b23a:	71 05       	cpc	r23, r1
   1b23c:	81 05       	cpc	r24, r1
   1b23e:	91 05       	cpc	r25, r1
   1b240:	09 f0       	breq	.+2      	; 0x1b244 <lif_open_volume+0xf4>
   1b242:	4c f4       	brge	.+18     	; 0x1b256 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1b244:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b248:	80 ff       	sbrs	r24, 0
   1b24a:	24 c0       	rjmp	.+72     	; 0x1b294 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1b24c:	af 92       	push	r10
   1b24e:	bf 92       	push	r11
   1b250:	85 ef       	ldi	r24, 0xF5	; 245
   1b252:	9a e3       	ldi	r25, 0x3A	; 58
   1b254:	15 c0       	rjmp	.+42     	; 0x1b280 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1b256:	b7 01       	movw	r22, r14
   1b258:	ce 01       	movw	r24, r28
   1b25a:	01 96       	adiw	r24, 0x01	; 1
   1b25c:	0e 94 87 cb 	call	0x1970e	; 0x1970e <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1b260:	c7 01       	movw	r24, r14
   1b262:	0e 94 76 cf 	call	0x19eec	; 0x19eec <lif_check_volume>
   1b266:	89 2b       	or	r24, r25
   1b268:	d1 f4       	brne	.+52     	; 0x1b29e <lif_open_volume+0x14e>
    {
        if(debuglevel & 1)
   1b26a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b26e:	80 ff       	sbrs	r24, 0
   1b270:	11 c0       	rjmp	.+34     	; 0x1b294 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1b272:	f7 01       	movw	r30, r14
   1b274:	81 81       	ldd	r24, Z+1	; 0x01
   1b276:	8f 93       	push	r24
   1b278:	80 81       	ld	r24, Z
   1b27a:	8f 93       	push	r24
   1b27c:	82 ec       	ldi	r24, 0xC2	; 194
   1b27e:	9a e3       	ldi	r25, 0x3A	; 58
   1b280:	1f 92       	push	r1
   1b282:	9f 93       	push	r25
   1b284:	8f 93       	push	r24
   1b286:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b28a:	0f 90       	pop	r0
   1b28c:	0f 90       	pop	r0
   1b28e:	0f 90       	pop	r0
   1b290:	0f 90       	pop	r0
   1b292:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b294:	c7 01       	movw	r24, r14
   1b296:	b8 d8       	rcall	.-3728   	; 0x1a408 <lif_close_volume>
    if( !lif_check_volume(LIF) )
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b298:	00 e0       	ldi	r16, 0x00	; 0
   1b29a:	10 e0       	ldi	r17, 0x00	; 0
   1b29c:	4b c0       	rjmp	.+150    	; 0x1b334 <lif_open_volume+0x1e4>
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1b29e:	f7 01       	movw	r30, r14
   1b2a0:	45 a5       	ldd	r20, Z+45	; 0x2d
   1b2a2:	56 a5       	ldd	r21, Z+46	; 0x2e
   1b2a4:	67 a5       	ldd	r22, Z+47	; 0x2f
   1b2a6:	70 a9       	ldd	r23, Z+48	; 0x30
   1b2a8:	85 a9       	ldd	r24, Z+53	; 0x35
   1b2aa:	96 a9       	ldd	r25, Z+54	; 0x36
   1b2ac:	a7 a9       	ldd	r26, Z+55	; 0x37
   1b2ae:	b0 ad       	ldd	r27, Z+56	; 0x38
   1b2b0:	48 0f       	add	r20, r24
   1b2b2:	59 1f       	adc	r21, r25
   1b2b4:	6a 1f       	adc	r22, r26
   1b2b6:	7b 1f       	adc	r23, r27
   1b2b8:	44 87       	std	Z+12, r20	; 0x0c
   1b2ba:	55 87       	std	Z+13, r21	; 0x0d
   1b2bc:	66 87       	std	Z+14, r22	; 0x0e
   1b2be:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1b2c0:	84 81       	ldd	r24, Z+4	; 0x04
   1b2c2:	95 81       	ldd	r25, Z+5	; 0x05
   1b2c4:	a6 81       	ldd	r26, Z+6	; 0x06
   1b2c6:	b7 81       	ldd	r27, Z+7	; 0x07
   1b2c8:	84 1b       	sub	r24, r20
   1b2ca:	95 0b       	sbc	r25, r21
   1b2cc:	a6 0b       	sbc	r26, r22
   1b2ce:	b7 0b       	sbc	r27, r23
   1b2d0:	80 8b       	std	Z+16, r24	; 0x10
   1b2d2:	91 8b       	std	Z+17, r25	; 0x11
   1b2d4:	a2 8b       	std	Z+18, r26	; 0x12
   1b2d6:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1b2d8:	80 8f       	std	Z+24, r24	; 0x18
   1b2da:	91 8f       	std	Z+25, r25	; 0x19
   1b2dc:	a2 8f       	std	Z+26, r26	; 0x1a
   1b2de:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1b2e0:	14 8a       	std	Z+20, r1	; 0x14
   1b2e2:	15 8a       	std	Z+21, r1	; 0x15
   1b2e4:	16 8a       	std	Z+22, r1	; 0x16
   1b2e6:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1b2e8:	17 8e       	std	Z+31, r1	; 0x1f
   1b2ea:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1b2ec:	15 8e       	std	Z+29, r1	; 0x1d
   1b2ee:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1b2f0:	11 a2       	std	Z+33, r1	; 0x21
   1b2f2:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1b2f4:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1b2f6:	12 a2       	std	Z+34, r1	; 0x22
   1b2f8:	c7 01       	movw	r24, r14
   1b2fa:	e4 d9       	rcall	.-3128   	; 0x1a6c4 <lif_updatefree>
   1b2fc:	8c 01       	movw	r16, r24
   1b2fe:	89 2b       	or	r24, r25
    {
        if(debuglevel & 1)
   1b300:	c1 f4       	brne	.+48     	; 0x1b332 <lif_open_volume+0x1e2>
   1b302:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b306:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1b308:	11 c0       	rjmp	.+34     	; 0x1b32c <lif_open_volume+0x1dc>
   1b30a:	f7 01       	movw	r30, r14
   1b30c:	81 81       	ldd	r24, Z+1	; 0x01
   1b30e:	8f 93       	push	r24
   1b310:	80 81       	ld	r24, Z
   1b312:	8f 93       	push	r24
   1b314:	8f e8       	ldi	r24, 0x8F	; 143
   1b316:	9a e3       	ldi	r25, 0x3A	; 58
   1b318:	1f 92       	push	r1
   1b31a:	9f 93       	push	r25
   1b31c:	8f 93       	push	r24
   1b31e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b322:	0f 90       	pop	r0
   1b324:	0f 90       	pop	r0
   1b326:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b328:	0f 90       	pop	r0
   1b32a:	0f 90       	pop	r0
   1b32c:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b32e:	6c d8       	rcall	.-3880   	; 0x1a408 <lif_close_volume>
   1b330:	01 c0       	rjmp	.+2      	; 0x1b334 <lif_open_volume+0x1e4>
    }

    return( LIF );
}
   1b332:	87 01       	movw	r16, r14
   1b334:	c8 01       	movw	r24, r16
   1b336:	c0 5d       	subi	r28, 0xD0	; 208
   1b338:	de 4f       	sbci	r29, 0xFE	; 254
   1b33a:	ea e0       	ldi	r30, 0x0A	; 10
   1b33c:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0001b340 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1b340:	a1 e1       	ldi	r26, 0x11	; 17
   1b342:	b0 e0       	ldi	r27, 0x00	; 0
   1b344:	e6 ea       	ldi	r30, 0xA6	; 166
   1b346:	f9 ed       	ldi	r31, 0xD9	; 217
   1b348:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1b34c:	6a e7       	ldi	r22, 0x7A	; 122
   1b34e:	78 e0       	ldi	r23, 0x08	; 8
   1b350:	ff de       	rcall	.-514    	; 0x1b150 <lif_open_volume>
   1b352:	99 8b       	std	Y+17, r25	; 0x11
   1b354:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1b356:	00 97       	sbiw	r24, 0x00	; 0
   1b358:	09 f4       	brne	.+2      	; 0x1b35c <lif_dir+0x1c>
   1b35a:	5b c1       	rjmp	.+694    	; 0x1b612 <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1b35c:	fc 01       	movw	r30, r24
   1b35e:	86 a1       	ldd	r24, Z+38	; 0x26
   1b360:	88 23       	and	r24, r24
   1b362:	21 f0       	breq	.+8      	; 0x1b36c <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1b364:	8f 01       	movw	r16, r30
   1b366:	0a 5d       	subi	r16, 0xDA	; 218
   1b368:	1f 4f       	sbci	r17, 0xFF	; 255
   1b36a:	02 c0       	rjmp	.+4      	; 0x1b370 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1b36c:	08 ea       	ldi	r16, 0xA8	; 168
   1b36e:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1b370:	88 89       	ldd	r24, Y+16	; 0x10
   1b372:	99 89       	ldd	r25, Y+17	; 0x11
   1b374:	87 5b       	subi	r24, 0xB7	; 183
   1b376:	9f 4f       	sbci	r25, 0xFF	; 255
   1b378:	0e 94 a7 cd 	call	0x19b4e	; 0x19b4e <lif_lifbcd2timestr>
   1b37c:	9f 93       	push	r25
   1b37e:	8f 93       	push	r24
   1b380:	1f 93       	push	r17
   1b382:	0f 93       	push	r16
   1b384:	88 e7       	ldi	r24, 0x78	; 120
   1b386:	9a e3       	ldi	r25, 0x3A	; 58
   1b388:	1f 92       	push	r1
   1b38a:	9f 93       	push	r25
   1b38c:	8f 93       	push	r24
   1b38e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1b392:	88 e3       	ldi	r24, 0x38	; 56
   1b394:	9a e3       	ldi	r25, 0x3A	; 58
   1b396:	1f 92       	push	r1
   1b398:	9f 93       	push	r25
   1b39a:	8f 93       	push	r24
   1b39c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b3a0:	0f b6       	in	r0, 0x3f	; 63
   1b3a2:	f8 94       	cli
   1b3a4:	de bf       	out	0x3e, r29	; 62
   1b3a6:	0f be       	out	0x3f, r0	; 63
   1b3a8:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1b3aa:	60 e2       	ldi	r22, 0x20	; 32
   1b3ac:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1b3ae:	00 e0       	ldi	r16, 0x00	; 0
   1b3b0:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b3b2:	88 89       	ldd	r24, Y+16	; 0x10
   1b3b4:	99 89       	ldd	r25, Y+17	; 0x11
   1b3b6:	86 5a       	subi	r24, 0xA6	; 166
   1b3b8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b3ba:	9c 83       	std	Y+4, r25	; 0x04
   1b3bc:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b3be:	e8 89       	ldd	r30, Y+16	; 0x10
   1b3c0:	f9 89       	ldd	r31, Y+17	; 0x11
   1b3c2:	e0 5a       	subi	r30, 0xA0	; 160
   1b3c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b3c6:	fb 87       	std	Y+11, r31	; 0x0b
   1b3c8:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b3ca:	28 89       	ldd	r18, Y+16	; 0x10
   1b3cc:	39 89       	ldd	r19, Y+17	; 0x11
   1b3ce:	24 59       	subi	r18, 0x94	; 148
   1b3d0:	3f 4f       	sbci	r19, 0xFF	; 255
   1b3d2:	3d 87       	std	Y+13, r19	; 0x0d
   1b3d4:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b3d6:	88 89       	ldd	r24, Y+16	; 0x10
   1b3d8:	99 89       	ldd	r25, Y+17	; 0x11
   1b3da:	81 5b       	subi	r24, 0xB1	; 177
   1b3dc:	9f 4f       	sbci	r25, 0xFF	; 255
   1b3de:	9a 83       	std	Y+2, r25	; 0x02
   1b3e0:	89 83       	std	Y+1, r24	; 0x01
   1b3e2:	8c ee       	ldi	r24, 0xEC	; 236
   1b3e4:	99 e3       	ldi	r25, 0x39	; 57
   1b3e6:	3c 01       	movw	r6, r24
   1b3e8:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b3ea:	e8 89       	ldd	r30, Y+16	; 0x10
   1b3ec:	f9 89       	ldd	r31, Y+17	; 0x11
   1b3ee:	ec 59       	subi	r30, 0x9C	; 156
   1b3f0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b3f2:	ff 87       	std	Y+15, r31	; 0x0f
   1b3f4:	ee 87       	std	Y+14, r30	; 0x0e
   1b3f6:	28 89       	ldd	r18, Y+16	; 0x10
   1b3f8:	39 89       	ldd	r19, Y+17	; 0x11
   1b3fa:	22 59       	subi	r18, 0x92	; 146
   1b3fc:	3f 4f       	sbci	r19, 0xFF	; 255
   1b3fe:	3e 83       	std	Y+6, r19	; 0x06
   1b400:	2d 83       	std	Y+5, r18	; 0x05
   1b402:	a8 88       	ldd	r10, Y+16	; 0x10
   1b404:	b9 88       	ldd	r11, Y+17	; 0x11
   1b406:	3c e5       	ldi	r19, 0x5C	; 92
   1b408:	a3 0e       	add	r10, r19
   1b40a:	b1 1c       	adc	r11, r1
   1b40c:	8c eb       	ldi	r24, 0xBC	; 188
   1b40e:	99 e3       	ldi	r25, 0x39	; 57
   1b410:	9c 01       	movw	r18, r24
   1b412:	40 e0       	ldi	r20, 0x00	; 0
   1b414:	2f 83       	std	Y+7, r18	; 0x07
   1b416:	38 87       	std	Y+8, r19	; 0x08
   1b418:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b41a:	b8 01       	movw	r22, r16
   1b41c:	88 89       	ldd	r24, Y+16	; 0x10
   1b41e:	99 89       	ldd	r25, Y+17	; 0x11
   1b420:	74 d8       	rcall	.-3864   	; 0x1a50a <lif_readdirindex>
   1b422:	89 2b       	or	r24, r25
   1b424:	09 f4       	brne	.+2      	; 0x1b428 <lif_dir+0xe8>
   1b426:	9d c0       	rjmp	.+314    	; 0x1b562 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b428:	eb 81       	ldd	r30, Y+3	; 0x03
   1b42a:	fc 81       	ldd	r31, Y+4	; 0x04
   1b42c:	20 81       	ld	r18, Z
   1b42e:	31 81       	ldd	r19, Z+1	; 0x01
   1b430:	2f 3f       	cpi	r18, 0xFF	; 255
   1b432:	ff ef       	ldi	r31, 0xFF	; 255
   1b434:	3f 07       	cpc	r19, r31
   1b436:	09 f4       	brne	.+2      	; 0x1b43a <lif_dir+0xfa>
   1b438:	94 c0       	rjmp	.+296    	; 0x1b562 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b43a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b43c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b43e:	80 81       	ld	r24, Z
   1b440:	91 81       	ldd	r25, Z+1	; 0x01
   1b442:	a2 81       	ldd	r26, Z+2	; 0x02
   1b444:	b3 81       	ldd	r27, Z+3	; 0x03
   1b446:	cc 24       	eor	r12, r12
   1b448:	d8 2e       	mov	r13, r24
   1b44a:	e9 2e       	mov	r14, r25
   1b44c:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b44e:	2c 7f       	andi	r18, 0xFC	; 252
   1b450:	20 31       	cpi	r18, 0x10	; 16
   1b452:	30 4e       	sbci	r19, 0xE0	; 224
   1b454:	09 f0       	breq	.+2      	; 0x1b458 <lif_dir+0x118>
   1b456:	4b c0       	rjmp	.+150    	; 0x1b4ee <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b458:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b45a:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b45c:	20 81       	ld	r18, Z
   1b45e:	31 81       	ldd	r19, Z+1	; 0x01
   1b460:	21 15       	cp	r18, r1
   1b462:	31 05       	cpc	r19, r1
   1b464:	a9 f0       	breq	.+42     	; 0x1b490 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b466:	19 01       	movw	r2, r18
   1b468:	41 2c       	mov	r4, r1
   1b46a:	51 2c       	mov	r5, r1
   1b46c:	77 27       	eor	r23, r23
   1b46e:	65 2d       	mov	r22, r5
   1b470:	54 2d       	mov	r21, r4
   1b472:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b474:	22 23       	and	r18, r18
   1b476:	21 f0       	breq	.+8      	; 0x1b480 <lif_dir+0x140>
        ++sectors;
   1b478:	4f 5f       	subi	r20, 0xFF	; 255
   1b47a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b47c:	6f 4f       	sbci	r22, 0xFF	; 255
   1b47e:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b480:	84 17       	cp	r24, r20
   1b482:	95 07       	cpc	r25, r21
   1b484:	a6 07       	cpc	r26, r22
   1b486:	b7 07       	cpc	r27, r23
   1b488:	19 f4       	brne	.+6      	; 0x1b490 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b48a:	72 01       	movw	r14, r4
   1b48c:	61 01       	movw	r12, r2
   1b48e:	2f c0       	rjmp	.+94     	; 0x1b4ee <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b490:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1b494:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b498:	52 ff       	sbrs	r21, 2
   1b49a:	27 c0       	rjmp	.+78     	; 0x1b4ea <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b49c:	19 01       	movw	r2, r18
   1b49e:	41 2c       	mov	r4, r1
   1b4a0:	51 2c       	mov	r5, r1
   1b4a2:	77 27       	eor	r23, r23
   1b4a4:	65 2d       	mov	r22, r5
   1b4a6:	54 2d       	mov	r21, r4
   1b4a8:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b4aa:	22 23       	and	r18, r18
   1b4ac:	21 f0       	breq	.+8      	; 0x1b4b6 <lif_dir+0x176>
        ++sectors;
   1b4ae:	4f 5f       	subi	r20, 0xFF	; 255
   1b4b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b4b2:	6f 4f       	sbci	r22, 0xFF	; 255
   1b4b4:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b4b6:	bf 93       	push	r27
   1b4b8:	af 93       	push	r26
   1b4ba:	9f 93       	push	r25
   1b4bc:	8f 93       	push	r24
   1b4be:	7f 93       	push	r23
   1b4c0:	6f 93       	push	r22
   1b4c2:	5f 93       	push	r21
   1b4c4:	4f 93       	push	r20
   1b4c6:	1f 92       	push	r1
   1b4c8:	1f 92       	push	r1
   1b4ca:	3f 92       	push	r3
   1b4cc:	2f 92       	push	r2
   1b4ce:	fa 81       	ldd	r31, Y+2	; 0x02
   1b4d0:	ff 93       	push	r31
   1b4d2:	29 81       	ldd	r18, Y+1	; 0x01
   1b4d4:	2f 93       	push	r18
   1b4d6:	1f 92       	push	r1
   1b4d8:	7f 92       	push	r7
   1b4da:	6f 92       	push	r6
   1b4dc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b4e0:	0f b6       	in	r0, 0x3f	; 63
   1b4e2:	f8 94       	cli
   1b4e4:	de bf       	out	0x3e, r29	; 62
   1b4e6:	0f be       	out	0x3f, r0	; 63
   1b4e8:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b4ea:	81 e2       	ldi	r24, 0x21	; 33
   1b4ec:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b4ee:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b4f0:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b4f2:	0e 94 a7 cd 	call	0x19b4e	; 0x19b4e <lif_lifbcd2timestr>
   1b4f6:	ed 81       	ldd	r30, Y+5	; 0x05
   1b4f8:	fe 81       	ldd	r31, Y+6	; 0x06
   1b4fa:	a0 81       	ld	r26, Z
   1b4fc:	b1 81       	ldd	r27, Z+1	; 0x01
   1b4fe:	f5 01       	movw	r30, r10
   1b500:	60 81       	ld	r22, Z
   1b502:	71 81       	ldd	r23, Z+1	; 0x01
   1b504:	52 80       	ldd	r5, Z+2	; 0x02
   1b506:	43 80       	ldd	r4, Z+3	; 0x03
   1b508:	eb 81       	ldd	r30, Y+3	; 0x03
   1b50a:	fc 81       	ldd	r31, Y+4	; 0x04
   1b50c:	40 81       	ld	r20, Z
   1b50e:	51 81       	ldd	r21, Z+1	; 0x01
   1b510:	41 15       	cp	r20, r1
   1b512:	51 05       	cpc	r21, r1
   1b514:	19 f0       	breq	.+6      	; 0x1b51c <lif_dir+0x1dc>
   1b516:	29 81       	ldd	r18, Y+1	; 0x01
   1b518:	3a 81       	ldd	r19, Y+2	; 0x02
   1b51a:	02 c0       	rjmp	.+4      	; 0x1b520 <lif_dir+0x1e0>
   1b51c:	26 ef       	ldi	r18, 0xF6	; 246
   1b51e:	35 e1       	ldi	r19, 0x15	; 21
   1b520:	9f 93       	push	r25
   1b522:	8f 93       	push	r24
   1b524:	bf 93       	push	r27
   1b526:	af 93       	push	r26
   1b528:	1f 92       	push	r1
   1b52a:	9f 92       	push	r9
   1b52c:	ff 92       	push	r15
   1b52e:	ef 92       	push	r14
   1b530:	df 92       	push	r13
   1b532:	cf 92       	push	r12
   1b534:	4f 92       	push	r4
   1b536:	5f 92       	push	r5
   1b538:	7f 93       	push	r23
   1b53a:	6f 93       	push	r22
   1b53c:	5f 93       	push	r21
   1b53e:	4f 93       	push	r20
   1b540:	3f 93       	push	r19
   1b542:	2f 93       	push	r18
   1b544:	1f 92       	push	r1
   1b546:	f8 85       	ldd	r31, Y+8	; 0x08
   1b548:	ff 93       	push	r31
   1b54a:	2f 81       	ldd	r18, Y+7	; 0x07
   1b54c:	2f 93       	push	r18
   1b54e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b552:	0f 5f       	subi	r16, 0xFF	; 255
   1b554:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b556:	0f b6       	in	r0, 0x3f	; 63
   1b558:	f8 94       	cli
   1b55a:	de bf       	out	0x3e, r29	; 62
   1b55c:	0f be       	out	0x3f, r0	; 63
   1b55e:	cd bf       	out	0x3d, r28	; 61
   1b560:	5c cf       	rjmp	.-328    	; 0x1b41a <lif_dir+0xda>

    printf("\n");
   1b562:	8a eb       	ldi	r24, 0xBA	; 186
   1b564:	99 e3       	ldi	r25, 0x39	; 57
   1b566:	1f 92       	push	r1
   1b568:	9f 93       	push	r25
   1b56a:	8f 93       	push	r24
   1b56c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b570:	e8 89       	ldd	r30, Y+16	; 0x10
   1b572:	f9 89       	ldd	r31, Y+17	; 0x11
   1b574:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b576:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b578:	09 2e       	mov	r0, r25
   1b57a:	00 0c       	add	r0, r0
   1b57c:	aa 0b       	sbc	r26, r26
   1b57e:	bb 0b       	sbc	r27, r27
   1b580:	bf 93       	push	r27
   1b582:	af 93       	push	r26
   1b584:	9f 93       	push	r25
   1b586:	8f 93       	push	r24
   1b588:	8e ea       	ldi	r24, 0xAE	; 174
   1b58a:	99 e3       	ldi	r25, 0x39	; 57
   1b58c:	1f 92       	push	r1
   1b58e:	9f 93       	push	r25
   1b590:	8f 93       	push	r24
   1b592:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b596:	e8 89       	ldd	r30, Y+16	; 0x10
   1b598:	f9 89       	ldd	r31, Y+17	; 0x11
   1b59a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b59c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b59e:	09 2e       	mov	r0, r25
   1b5a0:	00 0c       	add	r0, r0
   1b5a2:	aa 0b       	sbc	r26, r26
   1b5a4:	bb 0b       	sbc	r27, r27
   1b5a6:	bf 93       	push	r27
   1b5a8:	af 93       	push	r26
   1b5aa:	9f 93       	push	r25
   1b5ac:	8f 93       	push	r24
   1b5ae:	81 ea       	ldi	r24, 0xA1	; 161
   1b5b0:	99 e3       	ldi	r25, 0x39	; 57
   1b5b2:	1f 92       	push	r1
   1b5b4:	9f 93       	push	r25
   1b5b6:	8f 93       	push	r24
   1b5b8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b5bc:	e8 89       	ldd	r30, Y+16	; 0x10
   1b5be:	f9 89       	ldd	r31, Y+17	; 0x11
   1b5c0:	87 89       	ldd	r24, Z+23	; 0x17
   1b5c2:	8f 93       	push	r24
   1b5c4:	86 89       	ldd	r24, Z+22	; 0x16
   1b5c6:	8f 93       	push	r24
   1b5c8:	85 89       	ldd	r24, Z+21	; 0x15
   1b5ca:	8f 93       	push	r24
   1b5cc:	84 89       	ldd	r24, Z+20	; 0x14
   1b5ce:	8f 93       	push	r24
   1b5d0:	8e e8       	ldi	r24, 0x8E	; 142
   1b5d2:	99 e3       	ldi	r25, 0x39	; 57
   1b5d4:	1f 92       	push	r1
   1b5d6:	9f 93       	push	r25
   1b5d8:	8f 93       	push	r24
   1b5da:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b5de:	e8 89       	ldd	r30, Y+16	; 0x10
   1b5e0:	f9 89       	ldd	r31, Y+17	; 0x11
   1b5e2:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b5e4:	8f 93       	push	r24
   1b5e6:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b5e8:	8f 93       	push	r24
   1b5ea:	81 8d       	ldd	r24, Z+25	; 0x19
   1b5ec:	8f 93       	push	r24
   1b5ee:	80 8d       	ldd	r24, Z+24	; 0x18
   1b5f0:	8f 93       	push	r24
   1b5f2:	8b e7       	ldi	r24, 0x7B	; 123
   1b5f4:	99 e3       	ldi	r25, 0x39	; 57
   1b5f6:	1f 92       	push	r1
   1b5f8:	9f 93       	push	r25
   1b5fa:	8f 93       	push	r24
   1b5fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b600:	88 89       	ldd	r24, Y+16	; 0x10
   1b602:	99 89       	ldd	r25, Y+17	; 0x11
   1b604:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1b608:	0f b6       	in	r0, 0x3f	; 63
   1b60a:	f8 94       	cli
   1b60c:	de bf       	out	0x3e, r29	; 62
   1b60e:	0f be       	out	0x3f, r0	; 63
   1b610:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b612:	61 96       	adiw	r28, 0x11	; 17
   1b614:	e2 e1       	ldi	r30, 0x12	; 18
   1b616:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001b61a <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b61a:	a0 e0       	ldi	r26, 0x00	; 0
   1b61c:	b0 e0       	ldi	r27, 0x00	; 0
   1b61e:	e3 e1       	ldi	r30, 0x13	; 19
   1b620:	fb ed       	ldi	r31, 0xDB	; 219
   1b622:	0c 94 23 eb 	jmp	0x1d646	; 0x1d646 <__prologue_saves__+0x10>
   1b626:	7c 01       	movw	r14, r24
   1b628:	16 2f       	mov	r17, r22
   1b62a:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b62c:	86 2f       	mov	r24, r22
   1b62e:	97 2f       	mov	r25, r23
   1b630:	0e 94 78 ca 	call	0x194f0	; 0x194f0 <lif_checkname>
   1b634:	89 2b       	or	r24, r25
   1b636:	49 f4       	brne	.+18     	; 0x1b64a <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b638:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b63c:	80 ff       	sbrs	r24, 0
   1b63e:	48 c0       	rjmp	.+144    	; 0x1b6d0 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b640:	0f 93       	push	r16
   1b642:	1f 93       	push	r17
   1b644:	84 e5       	ldi	r24, 0x54	; 84
   1b646:	99 e3       	ldi	r25, 0x39	; 57
   1b648:	13 c0       	rjmp	.+38     	; 0x1b670 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b64a:	a1 2f       	mov	r26, r17
   1b64c:	b0 2f       	mov	r27, r16
   1b64e:	fd 01       	movw	r30, r26
   1b650:	01 90       	ld	r0, Z+
   1b652:	00 20       	and	r0, r0
   1b654:	e9 f7       	brne	.-6      	; 0x1b650 <lif_find_file+0x36>
   1b656:	31 97       	sbiw	r30, 0x01	; 1
   1b658:	ea 1b       	sub	r30, r26
   1b65a:	fb 0b       	sbc	r31, r27
   1b65c:	3b 97       	sbiw	r30, 0x0b	; 11
   1b65e:	98 f0       	brcs	.+38     	; 0x1b686 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b660:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b664:	80 ff       	sbrs	r24, 0
   1b666:	34 c0       	rjmp	.+104    	; 0x1b6d0 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b668:	0f 93       	push	r16
   1b66a:	1f 93       	push	r17
   1b66c:	8f e2       	ldi	r24, 0x2F	; 47
   1b66e:	99 e3       	ldi	r25, 0x39	; 57
   1b670:	1f 92       	push	r1
   1b672:	9f 93       	push	r25
   1b674:	8f 93       	push	r24
   1b676:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b67a:	0f 90       	pop	r0
   1b67c:	0f 90       	pop	r0
   1b67e:	0f 90       	pop	r0
   1b680:	0f 90       	pop	r0
   1b682:	0f 90       	pop	r0
   1b684:	25 c0       	rjmp	.+74     	; 0x1b6d0 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b686:	e1 14       	cp	r14, r1
   1b688:	f1 04       	cpc	r15, r1
   1b68a:	11 f1       	breq	.+68     	; 0x1b6d0 <lif_find_file+0xb6>
   1b68c:	c0 e0       	ldi	r28, 0x00	; 0
   1b68e:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b690:	67 01       	movw	r12, r14
   1b692:	2a e5       	ldi	r18, 0x5A	; 90
   1b694:	c2 0e       	add	r12, r18
   1b696:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b698:	57 01       	movw	r10, r14
   1b69a:	8f e4       	ldi	r24, 0x4F	; 79
   1b69c:	a8 0e       	add	r10, r24
   1b69e:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b6a0:	be 01       	movw	r22, r28
   1b6a2:	c7 01       	movw	r24, r14
   1b6a4:	0e 94 85 d2 	call	0x1a50a	; 0x1a50a <lif_readdirindex>
   1b6a8:	89 2b       	or	r24, r25
   1b6aa:	91 f0       	breq	.+36     	; 0x1b6d0 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b6ac:	f6 01       	movw	r30, r12
   1b6ae:	80 81       	ld	r24, Z
   1b6b0:	91 81       	ldd	r25, Z+1	; 0x01
   1b6b2:	8f 3f       	cpi	r24, 0xFF	; 255
   1b6b4:	ff ef       	ldi	r31, 0xFF	; 255
   1b6b6:	9f 07       	cpc	r25, r31
   1b6b8:	59 f0       	breq	.+22     	; 0x1b6d0 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b6ba:	89 2b       	or	r24, r25
   1b6bc:	39 f0       	breq	.+14     	; 0x1b6cc <lif_find_file+0xb2>
   1b6be:	61 2f       	mov	r22, r17
   1b6c0:	70 2f       	mov	r23, r16
   1b6c2:	c5 01       	movw	r24, r10
   1b6c4:	0e 94 84 32 	call	0x6508	; 0x6508 <strcasecmp>
   1b6c8:	89 2b       	or	r24, r25
   1b6ca:	29 f0       	breq	.+10     	; 0x1b6d6 <lif_find_file+0xbc>
            break;
        ++index;
   1b6cc:	21 96       	adiw	r28, 0x01	; 1
   1b6ce:	e8 cf       	rjmp	.-48     	; 0x1b6a0 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b6d0:	8f ef       	ldi	r24, 0xFF	; 255
   1b6d2:	9f ef       	ldi	r25, 0xFF	; 255
   1b6d4:	01 c0       	rjmp	.+2      	; 0x1b6d8 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b6d6:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b6d8:	cd b7       	in	r28, 0x3d	; 61
   1b6da:	de b7       	in	r29, 0x3e	; 62
   1b6dc:	ea e0       	ldi	r30, 0x0A	; 10
   1b6de:	0c 94 3f eb 	jmp	0x1d67e	; 0x1d67e <__epilogue_restores__+0x10>

0001b6e2 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b6e2:	a0 e0       	ldi	r26, 0x00	; 0
   1b6e4:	b0 e0       	ldi	r27, 0x00	; 0
   1b6e6:	e7 e7       	ldi	r30, 0x77	; 119
   1b6e8:	fb ed       	ldi	r31, 0xDB	; 219
   1b6ea:	0c 94 25 eb 	jmp	0x1d64a	; 0x1d64a <__prologue_saves__+0x14>
   1b6ee:	6b 01       	movw	r12, r22
   1b6f0:	7c 01       	movw	r14, r24
   1b6f2:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b6f4:	20 e0       	ldi	r18, 0x00	; 0
   1b6f6:	31 e0       	ldi	r19, 0x01	; 1
   1b6f8:	40 e0       	ldi	r20, 0x00	; 0
   1b6fa:	50 e0       	ldi	r21, 0x00	; 0
   1b6fc:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    if(!pos)
   1b700:	61 15       	cp	r22, r1
   1b702:	71 05       	cpc	r23, r1
   1b704:	e1 f1       	breq	.+120    	; 0x1b77e <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b706:	c0 e0       	ldi	r28, 0x00	; 0
   1b708:	d1 e0       	ldi	r29, 0x01	; 1
   1b70a:	c6 1b       	sub	r28, r22
   1b70c:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b70e:	f8 01       	movw	r30, r16
   1b710:	8f ee       	ldi	r24, 0xEF	; 239
   1b712:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b714:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b716:	cf 01       	movw	r24, r30
   1b718:	80 1b       	sub	r24, r16
   1b71a:	91 0b       	sbc	r25, r17
   1b71c:	8c 17       	cp	r24, r28
   1b71e:	9d 07       	cpc	r25, r29
   1b720:	14 f4       	brge	.+4      	; 0x1b726 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b722:	21 93       	st	Z+, r18
   1b724:	f8 cf       	rjmp	.-16     	; 0x1b716 <lif_e010_pad_sector+0x34>
   1b726:	1c 16       	cp	r1, r28
   1b728:	1d 06       	cpc	r1, r29
   1b72a:	14 f0       	brlt	.+4      	; 0x1b730 <lif_e010_pad_sector+0x4e>
   1b72c:	c1 e0       	ldi	r28, 0x01	; 1
   1b72e:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b730:	ce 01       	movw	r24, r28
   1b732:	0d 2e       	mov	r0, r29
   1b734:	00 0c       	add	r0, r0
   1b736:	aa 0b       	sbc	r26, r26
   1b738:	bb 0b       	sbc	r27, r27
   1b73a:	bc 01       	movw	r22, r24
   1b73c:	cd 01       	movw	r24, r26
   1b73e:	6c 0d       	add	r22, r12
   1b740:	7d 1d       	adc	r23, r13
   1b742:	8e 1d       	adc	r24, r14
   1b744:	9f 1d       	adc	r25, r15
   1b746:	20 e0       	ldi	r18, 0x00	; 0
   1b748:	31 e0       	ldi	r19, 0x01	; 1
   1b74a:	40 e0       	ldi	r20, 0x00	; 0
   1b74c:	50 e0       	ldi	r21, 0x00	; 0
   1b74e:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b752:	61 15       	cp	r22, r1
   1b754:	71 05       	cpc	r23, r1
   1b756:	b1 f0       	breq	.+44     	; 0x1b784 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b758:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b75c:	20 ff       	sbrs	r18, 0
   1b75e:	14 c0       	rjmp	.+40     	; 0x1b788 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b760:	7f 93       	push	r23
   1b762:	6f 93       	push	r22
   1b764:	86 ef       	ldi	r24, 0xF6	; 246
   1b766:	98 e3       	ldi	r25, 0x38	; 56
   1b768:	1f 92       	push	r1
   1b76a:	9f 93       	push	r25
   1b76c:	8f 93       	push	r24
   1b76e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b772:	0f 90       	pop	r0
   1b774:	0f 90       	pop	r0
   1b776:	0f 90       	pop	r0
   1b778:	0f 90       	pop	r0
   1b77a:	0f 90       	pop	r0
   1b77c:	05 c0       	rjmp	.+10     	; 0x1b788 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b77e:	80 e0       	ldi	r24, 0x00	; 0
   1b780:	90 e0       	ldi	r25, 0x00	; 0
   1b782:	04 c0       	rjmp	.+8      	; 0x1b78c <lif_e010_pad_sector+0xaa>
   1b784:	ce 01       	movw	r24, r28
   1b786:	02 c0       	rjmp	.+4      	; 0x1b78c <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b788:	8f ef       	ldi	r24, 0xFF	; 255
   1b78a:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b78c:	cd b7       	in	r28, 0x3d	; 61
   1b78e:	de b7       	in	r29, 0x3e	; 62
   1b790:	e8 e0       	ldi	r30, 0x08	; 8
   1b792:	0c 94 41 eb 	jmp	0x1d682	; 0x1d682 <__epilogue_restores__+0x14>

0001b796 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b796:	a0 e0       	ldi	r26, 0x00	; 0
   1b798:	b0 e0       	ldi	r27, 0x00	; 0
   1b79a:	e1 ed       	ldi	r30, 0xD1	; 209
   1b79c:	fb ed       	ldi	r31, 0xDB	; 219
   1b79e:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1b7a2:	ec 01       	movw	r28, r24
   1b7a4:	4a 01       	movw	r8, r20
   1b7a6:	5b 01       	movw	r10, r22
   1b7a8:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b7aa:	fc 01       	movw	r30, r24
   1b7ac:	01 90       	ld	r0, Z+
   1b7ae:	00 20       	and	r0, r0
   1b7b0:	e9 f7       	brne	.-6      	; 0x1b7ac <lif_ascii_string_to_e010+0x16>
   1b7b2:	31 97       	sbiw	r30, 0x01	; 1
   1b7b4:	6f 01       	movw	r12, r30
   1b7b6:	c8 1a       	sub	r12, r24
   1b7b8:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b7ba:	41 2c       	mov	r4, r1
   1b7bc:	51 2c       	mov	r5, r1
   1b7be:	32 01       	movw	r6, r4
   1b7c0:	53 94       	inc	r5
   1b7c2:	cb 01       	movw	r24, r22
   1b7c4:	ba 01       	movw	r22, r20
   1b7c6:	a3 01       	movw	r20, r6
   1b7c8:	92 01       	movw	r18, r4
   1b7ca:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
   1b7ce:	21 2c       	mov	r2, r1
   1b7d0:	33 24       	eor	r3, r3
   1b7d2:	33 94       	inc	r3
   1b7d4:	c1 01       	movw	r24, r2
   1b7d6:	86 1b       	sub	r24, r22
   1b7d8:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1b7da:	86 30       	cpi	r24, 0x06	; 6
   1b7dc:	91 05       	cpc	r25, r1
   1b7de:	20 f0       	brcs	.+8      	; 0x1b7e8 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b7e0:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1b7e2:	00 e0       	ldi	r16, 0x00	; 0
   1b7e4:	10 e0       	ldi	r17, 0x00	; 0
   1b7e6:	17 c0       	rjmp	.+46     	; 0x1b816 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1b7e8:	a7 01       	movw	r20, r14
   1b7ea:	c5 01       	movw	r24, r10
   1b7ec:	b4 01       	movw	r22, r8
   1b7ee:	79 df       	rcall	.-270    	; 0x1b6e2 <lif_e010_pad_sector>
   1b7f0:	8c 01       	movw	r16, r24
        if(ind < 0)
   1b7f2:	97 fd       	sbrc	r25, 7
   1b7f4:	84 c0       	rjmp	.+264    	; 0x1b8fe <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1b7f6:	09 2e       	mov	r0, r25
   1b7f8:	00 0c       	add	r0, r0
   1b7fa:	aa 0b       	sbc	r26, r26
   1b7fc:	bb 0b       	sbc	r27, r27
   1b7fe:	bc 01       	movw	r22, r24
   1b800:	cd 01       	movw	r24, r26
   1b802:	68 0d       	add	r22, r8
   1b804:	79 1d       	adc	r23, r9
   1b806:	8a 1d       	adc	r24, r10
   1b808:	9b 1d       	adc	r25, r11
   1b80a:	a3 01       	movw	r20, r6
   1b80c:	92 01       	movw	r18, r4
   1b80e:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
   1b812:	26 1a       	sub	r2, r22
   1b814:	37 0a       	sbc	r3, r23
   1b816:	f7 01       	movw	r30, r14
   1b818:	e0 0f       	add	r30, r16
   1b81a:	f1 1f       	adc	r31, r17
   1b81c:	0d 5f       	subi	r16, 0xFD	; 253
   1b81e:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1b820:	c6 01       	movw	r24, r12
   1b822:	02 96       	adiw	r24, 0x02	; 2
   1b824:	82 15       	cp	r24, r2
   1b826:	93 05       	cpc	r25, r3
   1b828:	84 f4       	brge	.+32     	; 0x1b84a <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1b82a:	8f ed       	ldi	r24, 0xDF	; 223
   1b82c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b82e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1b830:	d2 82       	std	Z+2, r13	; 0x02
   1b832:	f7 01       	movw	r30, r14
   1b834:	e0 0f       	add	r30, r16
   1b836:	f1 1f       	adc	r31, r17
   1b838:	cf 01       	movw	r24, r30
   1b83a:	8e 19       	sub	r24, r14
   1b83c:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b83e:	29 91       	ld	r18, Y+
   1b840:	22 23       	and	r18, r18
   1b842:	09 f4       	brne	.+2      	; 0x1b846 <lif_ascii_string_to_e010+0xb0>
   1b844:	5c c0       	rjmp	.+184    	; 0x1b8fe <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b846:	21 93       	st	Z+, r18
   1b848:	f7 cf       	rjmp	.-18     	; 0x1b838 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1b84a:	8f ec       	ldi	r24, 0xCF	; 207
   1b84c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b84e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1b850:	d2 82       	std	Z+2, r13	; 0x02
   1b852:	d7 01       	movw	r26, r14
   1b854:	a0 0f       	add	r26, r16
   1b856:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b858:	fe 01       	movw	r30, r28
   1b85a:	81 91       	ld	r24, Z+
   1b85c:	81 11       	cpse	r24, r1
   1b85e:	0e c0       	rjmp	.+28     	; 0x1b87c <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1b860:	c8 01       	movw	r24, r16
   1b862:	01 2e       	mov	r0, r17
   1b864:	00 0c       	add	r0, r0
   1b866:	aa 0b       	sbc	r26, r26
   1b868:	bb 0b       	sbc	r27, r27
   1b86a:	bc 01       	movw	r22, r24
   1b86c:	cd 01       	movw	r24, r26
   1b86e:	68 0d       	add	r22, r8
   1b870:	79 1d       	adc	r23, r9
   1b872:	8a 1d       	adc	r24, r10
   1b874:	9b 1d       	adc	r25, r11
   1b876:	61 11       	cpse	r22, r1
   1b878:	09 c0       	rjmp	.+18     	; 0x1b88c <lif_ascii_string_to_e010+0xf6>
   1b87a:	21 c0       	rjmp	.+66     	; 0x1b8be <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b87c:	02 15       	cp	r16, r2
   1b87e:	13 05       	cpc	r17, r3
   1b880:	7c f7       	brge	.-34     	; 0x1b860 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1b882:	0f 5f       	subi	r16, 0xFF	; 255
   1b884:	1f 4f       	sbci	r17, 0xFF	; 255
   1b886:	8d 93       	st	X+, r24
   1b888:	ef 01       	movw	r28, r30
   1b88a:	e6 cf       	rjmp	.-52     	; 0x1b858 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1b88c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b890:	20 ff       	sbrs	r18, 0
   1b892:	33 c0       	rjmp	.+102    	; 0x1b8fa <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1b894:	20 e0       	ldi	r18, 0x00	; 0
   1b896:	31 e0       	ldi	r19, 0x01	; 1
   1b898:	40 e0       	ldi	r20, 0x00	; 0
   1b89a:	50 e0       	ldi	r21, 0x00	; 0
   1b89c:	0e 94 d0 ea 	call	0x1d5a0	; 0x1d5a0 <__divmodsi4>
   1b8a0:	7f 93       	push	r23
   1b8a2:	6f 93       	push	r22
   1b8a4:	82 ed       	ldi	r24, 0xD2	; 210
   1b8a6:	98 e3       	ldi	r25, 0x38	; 56
   1b8a8:	1f 92       	push	r1
   1b8aa:	9f 93       	push	r25
   1b8ac:	8f 93       	push	r24
   1b8ae:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1b8b2:	0f 90       	pop	r0
   1b8b4:	0f 90       	pop	r0
   1b8b6:	0f 90       	pop	r0
   1b8b8:	0f 90       	pop	r0
   1b8ba:	0f 90       	pop	r0
   1b8bc:	1e c0       	rjmp	.+60     	; 0x1b8fa <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1b8be:	fe 01       	movw	r30, r28
   1b8c0:	01 90       	ld	r0, Z+
   1b8c2:	00 20       	and	r0, r0
   1b8c4:	e9 f7       	brne	.-6      	; 0x1b8c0 <lif_ascii_string_to_e010+0x12a>
   1b8c6:	31 97       	sbiw	r30, 0x01	; 1
   1b8c8:	ec 1b       	sub	r30, r28
   1b8ca:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1b8cc:	d7 01       	movw	r26, r14
   1b8ce:	a0 0f       	add	r26, r16
   1b8d0:	b1 1f       	adc	r27, r17
   1b8d2:	8f e6       	ldi	r24, 0x6F	; 111
   1b8d4:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1b8d6:	11 96       	adiw	r26, 0x01	; 1
   1b8d8:	ec 93       	st	X, r30
   1b8da:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1b8dc:	12 96       	adiw	r26, 0x02	; 2
   1b8de:	fc 93       	st	X, r31
   1b8e0:	0d 5f       	subi	r16, 0xFD	; 253
   1b8e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1b8e4:	f7 01       	movw	r30, r14
   1b8e6:	e0 0f       	add	r30, r16
   1b8e8:	f1 1f       	adc	r31, r17
   1b8ea:	cf 01       	movw	r24, r30
   1b8ec:	8e 19       	sub	r24, r14
   1b8ee:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b8f0:	29 91       	ld	r18, Y+
   1b8f2:	22 23       	and	r18, r18
   1b8f4:	21 f0       	breq	.+8      	; 0x1b8fe <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b8f6:	21 93       	st	Z+, r18
   1b8f8:	f8 cf       	rjmp	.-16     	; 0x1b8ea <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1b8fa:	8f ef       	ldi	r24, 0xFF	; 255
   1b8fc:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1b8fe:	cd b7       	in	r28, 0x3d	; 61
   1b900:	de b7       	in	r29, 0x3e	; 62
   1b902:	e2 e1       	ldi	r30, 0x12	; 18
   1b904:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001b908 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1b908:	a6 e0       	ldi	r26, 0x06	; 6
   1b90a:	b3 e0       	ldi	r27, 0x03	; 3
   1b90c:	ea e8       	ldi	r30, 0x8A	; 138
   1b90e:	fc ed       	ldi	r31, 0xDC	; 220
   1b910:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1b914:	7c 01       	movw	r14, r24
   1b916:	4a 01       	movw	r8, r20
   1b918:	5b 01       	movw	r10, r22
   1b91a:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1b91c:	60 e7       	ldi	r22, 0x70	; 112
   1b91e:	78 e0       	ldi	r23, 0x08	; 8
   1b920:	0e 94 e6 c8 	call	0x191cc	; 0x191cc <lif_open>
   1b924:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1b926:	89 2b       	or	r24, r25
   1b928:	09 f4       	brne	.+2      	; 0x1b92c <lif_add_ascii_file_as_e010_wrapper+0x24>
   1b92a:	6b c0       	rjmp	.+214    	; 0x1ba02 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1b92c:	21 2c       	mov	r2, r1
   1b92e:	31 2c       	mov	r3, r1
   1b930:	41 2c       	mov	r4, r1
   1b932:	51 2c       	mov	r5, r1
   1b934:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1b936:	85 ec       	ldi	r24, 0xC5	; 197
   1b938:	98 e3       	ldi	r25, 0x38	; 56
   1b93a:	9c 01       	movw	r18, r24
   1b93c:	40 e0       	ldi	r20, 0x00	; 0
   1b93e:	cc 5f       	subi	r28, 0xFC	; 252
   1b940:	dc 4f       	sbci	r29, 0xFC	; 252
   1b942:	28 83       	st	Y, r18
   1b944:	39 83       	std	Y+1, r19	; 0x01
   1b946:	4a 83       	std	Y+2, r20	; 0x02
   1b948:	c4 50       	subi	r28, 0x04	; 4
   1b94a:	d3 40       	sbci	r29, 0x03	; 3
   1b94c:	1a c0       	rjmp	.+52     	; 0x1b982 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1b94e:	ce 5f       	subi	r28, 0xFE	; 254
   1b950:	dc 4f       	sbci	r29, 0xFC	; 252
   1b952:	28 81       	ld	r18, Y
   1b954:	39 81       	ldd	r19, Y+1	; 0x01
   1b956:	c2 50       	subi	r28, 0x02	; 2
   1b958:	d3 40       	sbci	r29, 0x03	; 3
   1b95a:	c9 01       	movw	r24, r18
   1b95c:	03 2e       	mov	r0, r19
   1b95e:	00 0c       	add	r0, r0
   1b960:	aa 0b       	sbc	r26, r26
   1b962:	bb 0b       	sbc	r27, r27
   1b964:	88 0e       	add	r8, r24
   1b966:	99 1e       	adc	r9, r25
   1b968:	aa 1e       	adc	r10, r26
   1b96a:	bb 1e       	adc	r11, r27
        bytes += size;
   1b96c:	48 0e       	add	r4, r24
   1b96e:	59 1e       	adc	r5, r25
   1b970:	6a 1e       	adc	r6, r26
   1b972:	7b 1e       	adc	r7, r27
        count += size;
   1b974:	22 0e       	add	r2, r18
   1b976:	33 1e       	adc	r3, r19

        if(count > 256)
   1b978:	31 e0       	ldi	r19, 0x01	; 1
   1b97a:	23 16       	cp	r2, r19
   1b97c:	33 06       	cpc	r3, r19
   1b97e:	0c f0       	brlt	.+2      	; 0x1b982 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1b980:	45 c0       	rjmp	.+138    	; 0x1ba0c <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1b982:	a6 01       	movw	r20, r12
   1b984:	6d ef       	ldi	r22, 0xFD	; 253
   1b986:	70 e0       	ldi	r23, 0x00	; 0
   1b988:	ce 01       	movw	r24, r28
   1b98a:	8f 5f       	subi	r24, 0xFF	; 255
   1b98c:	9d 4f       	sbci	r25, 0xFD	; 253
   1b98e:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
   1b992:	89 2b       	or	r24, r25
   1b994:	09 f4       	brne	.+2      	; 0x1b998 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1b996:	58 c0       	rjmp	.+176    	; 0x1ba48 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1b998:	ce 01       	movw	r24, r28
   1b99a:	8f 5f       	subi	r24, 0xFF	; 255
   1b99c:	9d 4f       	sbci	r25, 0xFD	; 253
   1b99e:	0e 94 4a 32 	call	0x6494	; 0x6494 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1b9a2:	6f ef       	ldi	r22, 0xFF	; 255
   1b9a4:	75 e1       	ldi	r23, 0x15	; 21
   1b9a6:	ce 01       	movw	r24, r28
   1b9a8:	8f 5f       	subi	r24, 0xFF	; 255
   1b9aa:	9d 4f       	sbci	r25, 0xFD	; 253
   1b9ac:	0e 94 11 32 	call	0x6422	; 0x6422 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1b9b0:	9e 01       	movw	r18, r28
   1b9b2:	2f 5f       	subi	r18, 0xFF	; 255
   1b9b4:	3f 4f       	sbci	r19, 0xFF	; 255
   1b9b6:	b5 01       	movw	r22, r10
   1b9b8:	a4 01       	movw	r20, r8
   1b9ba:	ce 01       	movw	r24, r28
   1b9bc:	8f 5f       	subi	r24, 0xFF	; 255
   1b9be:	9d 4f       	sbci	r25, 0xFD	; 253
   1b9c0:	ea de       	rcall	.-556    	; 0x1b796 <lif_ascii_string_to_e010>
   1b9c2:	ce 5f       	subi	r28, 0xFE	; 254
   1b9c4:	dc 4f       	sbci	r29, 0xFC	; 252
   1b9c6:	99 83       	std	Y+1, r25	; 0x01
   1b9c8:	88 83       	st	Y, r24
   1b9ca:	c2 50       	subi	r28, 0x02	; 2
   1b9cc:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1b9ce:	e1 14       	cp	r14, r1
   1b9d0:	f1 04       	cpc	r15, r1
   1b9d2:	09 f4       	brne	.+2      	; 0x1b9d6 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1b9d4:	bc cf       	rjmp	.-136    	; 0x1b94e <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1b9d6:	8c 01       	movw	r16, r24
   1b9d8:	a5 01       	movw	r20, r10
   1b9da:	94 01       	movw	r18, r8
   1b9dc:	be 01       	movw	r22, r28
   1b9de:	6f 5f       	subi	r22, 0xFF	; 255
   1b9e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9e2:	c7 01       	movw	r24, r14
   1b9e4:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
            if(len < size)
   1b9e8:	ce 5f       	subi	r28, 0xFE	; 254
   1b9ea:	dc 4f       	sbci	r29, 0xFC	; 252
   1b9ec:	08 81       	ld	r16, Y
   1b9ee:	19 81       	ldd	r17, Y+1	; 0x01
   1b9f0:	c2 50       	subi	r28, 0x02	; 2
   1b9f2:	d3 40       	sbci	r29, 0x03	; 3
   1b9f4:	80 17       	cp	r24, r16
   1b9f6:	91 07       	cpc	r25, r17
   1b9f8:	0c f0       	brlt	.+2      	; 0x1b9fc <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1b9fa:	a9 cf       	rjmp	.-174    	; 0x1b94e <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1b9fc:	c6 01       	movw	r24, r12
   1b9fe:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
                return(-1);
   1ba02:	6f ef       	ldi	r22, 0xFF	; 255
   1ba04:	7f ef       	ldi	r23, 0xFF	; 255
   1ba06:	8f ef       	ldi	r24, 0xFF	; 255
   1ba08:	9f ef       	ldi	r25, 0xFF	; 255
   1ba0a:	86 c0       	rjmp	.+268    	; 0x1bb18 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ba0c:	e1 14       	cp	r14, r1
   1ba0e:	f1 04       	cpc	r15, r1
   1ba10:	c1 f0       	breq	.+48     	; 0x1ba42 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1ba12:	7f 92       	push	r7
   1ba14:	6f 92       	push	r6
   1ba16:	5f 92       	push	r5
   1ba18:	4f 92       	push	r4
   1ba1a:	1f 92       	push	r1
   1ba1c:	cb 5f       	subi	r28, 0xFB	; 251
   1ba1e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ba20:	48 81       	ld	r20, Y
   1ba22:	c5 50       	subi	r28, 0x05	; 5
   1ba24:	d3 40       	sbci	r29, 0x03	; 3
   1ba26:	4f 93       	push	r20
   1ba28:	cc 5f       	subi	r28, 0xFC	; 252
   1ba2a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ba2c:	88 81       	ld	r24, Y
   1ba2e:	c4 50       	subi	r28, 0x04	; 4
   1ba30:	d3 40       	sbci	r29, 0x03	; 3
   1ba32:	8f 93       	push	r24
   1ba34:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1ba38:	0f b6       	in	r0, 0x3f	; 63
   1ba3a:	f8 94       	cli
   1ba3c:	de bf       	out	0x3e, r29	; 62
   1ba3e:	0f be       	out	0x3f, r0	; 63
   1ba40:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ba42:	21 2c       	mov	r2, r1
   1ba44:	31 2c       	mov	r3, r1
   1ba46:	9d cf       	rjmp	.-198    	; 0x1b982 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ba48:	c6 01       	movw	r24, r12
   1ba4a:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>

    // Write EOF
    str[0] = 0;
   1ba4e:	cf 5f       	subi	r28, 0xFF	; 255
   1ba50:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba52:	18 82       	st	Y, r1
   1ba54:	c1 50       	subi	r28, 0x01	; 1
   1ba56:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ba58:	9e 01       	movw	r18, r28
   1ba5a:	2f 5f       	subi	r18, 0xFF	; 255
   1ba5c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ba5e:	b5 01       	movw	r22, r10
   1ba60:	a4 01       	movw	r20, r8
   1ba62:	ce 01       	movw	r24, r28
   1ba64:	8f 5f       	subi	r24, 0xFF	; 255
   1ba66:	9d 4f       	sbci	r25, 0xFD	; 253
   1ba68:	96 de       	rcall	.-724    	; 0x1b796 <lif_ascii_string_to_e010>
   1ba6a:	6c 01       	movw	r12, r24

    if(LIF)
   1ba6c:	e1 14       	cp	r14, r1
   1ba6e:	f1 04       	cpc	r15, r1
   1ba70:	b9 f4       	brne	.+46     	; 0x1baa0 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ba72:	c6 01       	movw	r24, r12
   1ba74:	dd 0c       	add	r13, r13
   1ba76:	aa 0b       	sbc	r26, r26
   1ba78:	bb 0b       	sbc	r27, r27
   1ba7a:	48 0e       	add	r4, r24
   1ba7c:	59 1e       	adc	r5, r25
   1ba7e:	6a 1e       	adc	r6, r26
   1ba80:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ba82:	88 0e       	add	r8, r24
   1ba84:	99 1e       	adc	r9, r25
   1ba86:	aa 1e       	adc	r10, r26
   1ba88:	bb 1e       	adc	r11, r27
   1ba8a:	ae 01       	movw	r20, r28
   1ba8c:	4f 5f       	subi	r20, 0xFF	; 255
   1ba8e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba90:	c5 01       	movw	r24, r10
   1ba92:	b4 01       	movw	r22, r8
   1ba94:	26 de       	rcall	.-948    	; 0x1b6e2 <lif_e010_pad_sector>
   1ba96:	6c 01       	movw	r12, r24
    if(LIF)
   1ba98:	e1 14       	cp	r14, r1
   1ba9a:	f1 04       	cpc	r15, r1
   1ba9c:	f1 f4       	brne	.+60     	; 0x1bada <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1ba9e:	3a c0       	rjmp	.+116    	; 0x1bb14 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1baa0:	7f 92       	push	r7
   1baa2:	6f 92       	push	r6
   1baa4:	5f 92       	push	r5
   1baa6:	4f 92       	push	r4
   1baa8:	88 eb       	ldi	r24, 0xB8	; 184
   1baaa:	98 e3       	ldi	r25, 0x38	; 56
   1baac:	1f 92       	push	r1
   1baae:	9f 93       	push	r25
   1bab0:	8f 93       	push	r24
   1bab2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1bab6:	86 01       	movw	r16, r12
   1bab8:	a5 01       	movw	r20, r10
   1baba:	94 01       	movw	r18, r8
   1babc:	be 01       	movw	r22, r28
   1babe:	6f 5f       	subi	r22, 0xFF	; 255
   1bac0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bac2:	c7 01       	movw	r24, r14
   1bac4:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
        if(len < size)
   1bac8:	0f b6       	in	r0, 0x3f	; 63
   1baca:	f8 94       	cli
   1bacc:	de bf       	out	0x3e, r29	; 62
   1bace:	0f be       	out	0x3f, r0	; 63
   1bad0:	cd bf       	out	0x3d, r28	; 61
   1bad2:	8c 15       	cp	r24, r12
   1bad4:	9d 05       	cpc	r25, r13
   1bad6:	6c f6       	brge	.-102    	; 0x1ba72 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1bad8:	94 cf       	rjmp	.-216    	; 0x1ba02 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1bada:	8c 01       	movw	r16, r24
   1badc:	a5 01       	movw	r20, r10
   1bade:	94 01       	movw	r18, r8
   1bae0:	be 01       	movw	r22, r28
   1bae2:	6f 5f       	subi	r22, 0xFF	; 255
   1bae4:	7f 4f       	sbci	r23, 0xFF	; 255
   1bae6:	c7 01       	movw	r24, r14
   1bae8:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
        if(len < size)
   1baec:	8c 15       	cp	r24, r12
   1baee:	9d 05       	cpc	r25, r13
   1baf0:	0c f4       	brge	.+2      	; 0x1baf4 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1baf2:	87 cf       	rjmp	.-242    	; 0x1ba02 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1baf4:	7f 92       	push	r7
   1baf6:	6f 92       	push	r6
   1baf8:	5f 92       	push	r5
   1bafa:	4f 92       	push	r4
   1bafc:	8b ea       	ldi	r24, 0xAB	; 171
   1bafe:	98 e3       	ldi	r25, 0x38	; 56
   1bb00:	1f 92       	push	r1
   1bb02:	9f 93       	push	r25
   1bb04:	8f 93       	push	r24
   1bb06:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1bb0a:	0f b6       	in	r0, 0x3f	; 63
   1bb0c:	f8 94       	cli
   1bb0e:	de bf       	out	0x3e, r29	; 62
   1bb10:	0f be       	out	0x3f, r0	; 63
   1bb12:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1bb14:	b2 01       	movw	r22, r4
   1bb16:	c3 01       	movw	r24, r6
}
   1bb18:	ca 5f       	subi	r28, 0xFA	; 250
   1bb1a:	dc 4f       	sbci	r29, 0xFC	; 252
   1bb1c:	e2 e1       	ldi	r30, 0x12	; 18
   1bb1e:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001bb22 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1bb22:	a2 e3       	ldi	r26, 0x32	; 50
   1bb24:	b0 e0       	ldi	r27, 0x00	; 0
   1bb26:	e7 e9       	ldi	r30, 0x97	; 151
   1bb28:	fd ed       	ldi	r31, 0xDD	; 221
   1bb2a:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1bb2e:	6c 01       	movw	r12, r24
   1bb30:	1b 01       	movw	r2, r22
   1bb32:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1bb34:	fc 01       	movw	r30, r24
   1bb36:	80 81       	ld	r24, Z
   1bb38:	81 11       	cpse	r24, r1
   1bb3a:	03 c0       	rjmp	.+6      	; 0x1bb42 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1bb3c:	88 e7       	ldi	r24, 0x78	; 120
   1bb3e:	98 e3       	ldi	r25, 0x38	; 56
   1bb40:	1a c0       	rjmp	.+52     	; 0x1bb76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1bb42:	fb 01       	movw	r30, r22
   1bb44:	80 81       	ld	r24, Z
   1bb46:	81 11       	cpse	r24, r1
   1bb48:	03 c0       	rjmp	.+6      	; 0x1bb50 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1bb4a:	8a e4       	ldi	r24, 0x4A	; 74
   1bb4c:	98 e3       	ldi	r25, 0x38	; 56
   1bb4e:	13 c0       	rjmp	.+38     	; 0x1bb76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1bb50:	fa 01       	movw	r30, r20
   1bb52:	80 81       	ld	r24, Z
   1bb54:	81 11       	cpse	r24, r1
   1bb56:	03 c0       	rjmp	.+6      	; 0x1bb5e <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1bb58:	8b e1       	ldi	r24, 0x1B	; 27
   1bb5a:	98 e3       	ldi	r25, 0x38	; 56
   1bb5c:	0c c0       	rjmp	.+24     	; 0x1bb76 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1bb5e:	be 01       	movw	r22, r28
   1bb60:	6f 5f       	subi	r22, 0xFF	; 255
   1bb62:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb64:	ca 01       	movw	r24, r20
   1bb66:	0e 94 0e c9 	call	0x1921c	; 0x1921c <lif_stat>
   1bb6a:	9a ab       	std	Y+50, r25	; 0x32
   1bb6c:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1bb6e:	89 2b       	or	r24, r25
   1bb70:	59 f4       	brne	.+22     	; 0x1bb88 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1bb72:	8b ee       	ldi	r24, 0xEB	; 235
   1bb74:	97 e3       	ldi	r25, 0x37	; 55
   1bb76:	1f 92       	push	r1
   1bb78:	9f 93       	push	r25
   1bb7a:	8f 93       	push	r24
   1bb7c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1bb80:	0f 90       	pop	r0
   1bb82:	0f 90       	pop	r0
   1bb84:	0f 90       	pop	r0
   1bb86:	fe c0       	rjmp	.+508    	; 0x1bd84 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1bb88:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bb8c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bb90:	92 ff       	sbrs	r25, 2
   1bb92:	12 c0       	rjmp	.+36     	; 0x1bbb8 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1bb94:	ff 92       	push	r15
   1bb96:	ef 92       	push	r14
   1bb98:	3f 92       	push	r3
   1bb9a:	2f 92       	push	r2
   1bb9c:	df 92       	push	r13
   1bb9e:	cf 92       	push	r12
   1bba0:	8c eb       	ldi	r24, 0xBC	; 188
   1bba2:	97 e3       	ldi	r25, 0x37	; 55
   1bba4:	1f 92       	push	r1
   1bba6:	9f 93       	push	r25
   1bba8:	8f 93       	push	r24
   1bbaa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1bbae:	0f b6       	in	r0, 0x3f	; 63
   1bbb0:	f8 94       	cli
   1bbb2:	de bf       	out	0x3e, r29	; 62
   1bbb4:	0f be       	out	0x3f, r0	; 63
   1bbb6:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1bbb8:	97 01       	movw	r18, r14
   1bbba:	40 e0       	ldi	r20, 0x00	; 0
   1bbbc:	50 e0       	ldi	r21, 0x00	; 0
   1bbbe:	ba 01       	movw	r22, r20
   1bbc0:	80 e0       	ldi	r24, 0x00	; 0
   1bbc2:	90 e0       	ldi	r25, 0x00	; 0
   1bbc4:	a1 de       	rcall	.-702    	; 0x1b908 <lif_add_ascii_file_as_e010_wrapper>
   1bbc6:	4b 01       	movw	r8, r22
   1bbc8:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1bbca:	47 2e       	mov	r4, r23
   1bbcc:	58 2e       	mov	r5, r24
   1bbce:	69 2e       	mov	r6, r25
   1bbd0:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1bbd2:	66 23       	and	r22, r22
   1bbd4:	29 f0       	breq	.+10     	; 0x1bbe0 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1bbd6:	9f ef       	ldi	r25, 0xFF	; 255
   1bbd8:	49 1a       	sub	r4, r25
   1bbda:	59 0a       	sbc	r5, r25
   1bbdc:	69 0a       	sbc	r6, r25
   1bbde:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1bbe0:	63 e7       	ldi	r22, 0x73	; 115
   1bbe2:	78 e0       	ldi	r23, 0x08	; 8
   1bbe4:	c6 01       	movw	r24, r12
   1bbe6:	b4 da       	rcall	.-2712   	; 0x1b150 <lif_open_volume>
   1bbe8:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1bbea:	00 97       	sbiw	r24, 0x00	; 0
   1bbec:	09 f4       	brne	.+2      	; 0x1bbf0 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1bbee:	ca c0       	rjmp	.+404    	; 0x1bd84 <lif_add_ascii_file_as_e010+0x262>
   1bbf0:	b3 01       	movw	r22, r6
   1bbf2:	a2 01       	movw	r20, r4
   1bbf4:	48 d9       	rcall	.-3440   	; 0x1ae86 <lif_newdir>
    if(index == -1)
   1bbf6:	3c 01       	movw	r6, r24
   1bbf8:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1bbfa:	a1 f4       	brne	.+40     	; 0x1bc24 <lif_add_ascii_file_as_e010+0x102>
   1bbfc:	ff 92       	push	r15
   1bbfe:	ef 92       	push	r14
   1bc00:	df 92       	push	r13
   1bc02:	cf 92       	push	r12
   1bc04:	8c e8       	ldi	r24, 0x8C	; 140
   1bc06:	97 e3       	ldi	r25, 0x37	; 55
   1bc08:	1f 92       	push	r1
   1bc0a:	9f 93       	push	r25
   1bc0c:	8f 93       	push	r24
   1bc0e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc12:	c8 01       	movw	r24, r16
   1bc14:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1bc18:	0f b6       	in	r0, 0x3f	; 63
   1bc1a:	f8 94       	cli
   1bc1c:	de bf       	out	0x3e, r29	; 62
   1bc1e:	0f be       	out	0x3f, r0	; 63
   1bc20:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1bc22:	b0 c0       	rjmp	.+352    	; 0x1bd84 <lif_add_ascii_file_as_e010+0x262>
   1bc24:	68 01       	movw	r12, r16
   1bc26:	9f e4       	ldi	r25, 0x4F	; 79
   1bc28:	c9 0e       	add	r12, r25
   1bc2a:	d1 1c       	adc	r13, r1
   1bc2c:	4a e0       	ldi	r20, 0x0A	; 10
   1bc2e:	50 e0       	ldi	r21, 0x00	; 0
   1bc30:	b1 01       	movw	r22, r2
   1bc32:	c6 01       	movw	r24, r12
   1bc34:	0e 94 b2 ca 	call	0x19564	; 0x19564 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1bc38:	80 e1       	ldi	r24, 0x10	; 16
   1bc3a:	90 ee       	ldi	r25, 0xE0	; 224
   1bc3c:	f8 01       	movw	r30, r16
   1bc3e:	e6 5a       	subi	r30, 0xA6	; 166
   1bc40:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc42:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1bc44:	80 83       	st	Z, r24
   1bc46:	e9 a9       	ldd	r30, Y+49	; 0x31
   1bc48:	fa a9       	ldd	r31, Y+50	; 0x32
   1bc4a:	60 a5       	ldd	r22, Z+40	; 0x28
   1bc4c:	71 a5       	ldd	r23, Z+41	; 0x29
   1bc4e:	82 a5       	ldd	r24, Z+42	; 0x2a
   1bc50:	93 a5       	ldd	r25, Z+43	; 0x2b
   1bc52:	a8 01       	movw	r20, r16
   1bc54:	4c 59       	subi	r20, 0x9C	; 156
   1bc56:	5f 4f       	sbci	r21, 0xFF	; 255
   1bc58:	0e 94 f7 cc 	call	0x199ee	; 0x199ee <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1bc5c:	81 e0       	ldi	r24, 0x01	; 1
   1bc5e:	90 e8       	ldi	r25, 0x80	; 128
   1bc60:	f8 01       	movw	r30, r16
   1bc62:	e6 59       	subi	r30, 0x96	; 150
   1bc64:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc66:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1bc68:	80 83       	st	Z, r24
   1bc6a:	32 96       	adiw	r30, 0x02	; 2
   1bc6c:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1bc6e:	80 82       	st	Z, r8
   1bc70:	80 e0       	ldi	r24, 0x00	; 0
   1bc72:	91 e0       	ldi	r25, 0x01	; 1
   1bc74:	32 96       	adiw	r30, 0x02	; 2
   1bc76:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bc78:	80 83       	st	Z, r24
   1bc7a:	58 01       	movw	r10, r16
   1bc7c:	fc e5       	ldi	r31, 0x5C	; 92
   1bc7e:	af 0e       	add	r10, r31
   1bc80:	b1 1c       	adc	r11, r1
   1bc82:	f5 01       	movw	r30, r10
   1bc84:	80 81       	ld	r24, Z
   1bc86:	91 81       	ldd	r25, Z+1	; 0x01
   1bc88:	a2 81       	ldd	r26, Z+2	; 0x02
   1bc8a:	b3 81       	ldd	r27, Z+3	; 0x03
   1bc8c:	22 24       	eor	r2, r2
   1bc8e:	38 2e       	mov	r3, r24
   1bc90:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1bc92:	5a 2e       	mov	r5, r26
   1bc94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bc98:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bc9c:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1bc9e:	05 c0       	rjmp	.+10     	; 0x1bcaa <lif_add_ascii_file_as_e010+0x188>
   1bca0:	61 e0       	ldi	r22, 0x01	; 1
   1bca2:	76 e1       	ldi	r23, 0x16	; 22
   1bca4:	c8 01       	movw	r24, r16
   1bca6:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1bcaa:	97 01       	movw	r18, r14
   1bcac:	b2 01       	movw	r22, r4
   1bcae:	a1 01       	movw	r20, r2
   1bcb0:	c8 01       	movw	r24, r16
   1bcb2:	2a de       	rcall	.-940    	; 0x1b908 <lif_add_ascii_file_as_e010_wrapper>
   1bcb4:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1bcb6:	7c 01       	movw	r14, r24
   1bcb8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bcbc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bcc0:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1bcc2:	40 c0       	rjmp	.+128    	; 0x1bd44 <lif_add_ascii_file_as_e010+0x222>
   1bcc4:	85 e6       	ldi	r24, 0x65	; 101
   1bcc6:	97 e3       	ldi	r25, 0x37	; 55
   1bcc8:	1f 92       	push	r1
   1bcca:	9f 93       	push	r25
   1bccc:	8f 93       	push	r24
   1bcce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1bcd2:	df 92       	push	r13
   1bcd4:	cf 92       	push	r12
   1bcd6:	8e e4       	ldi	r24, 0x4E	; 78
   1bcd8:	97 e3       	ldi	r25, 0x37	; 55
   1bcda:	1f 92       	push	r1
   1bcdc:	9f 93       	push	r25
   1bcde:	8f 93       	push	r24
   1bce0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1bce4:	7f 92       	push	r7
   1bce6:	6f 92       	push	r6
   1bce8:	87 e3       	ldi	r24, 0x37	; 55
   1bcea:	97 e3       	ldi	r25, 0x37	; 55
   1bcec:	1f 92       	push	r1
   1bcee:	9f 93       	push	r25
   1bcf0:	8f 93       	push	r24
   1bcf2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1bcf6:	f5 01       	movw	r30, r10
   1bcf8:	83 81       	ldd	r24, Z+3	; 0x03
   1bcfa:	8f 93       	push	r24
   1bcfc:	82 81       	ldd	r24, Z+2	; 0x02
   1bcfe:	8f 93       	push	r24
   1bd00:	81 81       	ldd	r24, Z+1	; 0x01
   1bd02:	8f 93       	push	r24
   1bd04:	80 81       	ld	r24, Z
   1bd06:	8f 93       	push	r24
   1bd08:	8e e1       	ldi	r24, 0x1E	; 30
   1bd0a:	97 e3       	ldi	r25, 0x37	; 55
   1bd0c:	1f 92       	push	r1
   1bd0e:	9f 93       	push	r25
   1bd10:	8f 93       	push	r24
   1bd12:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1bd16:	f8 01       	movw	r30, r16
   1bd18:	e0 5a       	subi	r30, 0xA0	; 160
   1bd1a:	ff 4f       	sbci	r31, 0xFF	; 255
   1bd1c:	83 81       	ldd	r24, Z+3	; 0x03
   1bd1e:	8f 93       	push	r24
   1bd20:	82 81       	ldd	r24, Z+2	; 0x02
   1bd22:	8f 93       	push	r24
   1bd24:	81 81       	ldd	r24, Z+1	; 0x01
   1bd26:	8f 93       	push	r24
   1bd28:	80 81       	ld	r24, Z
   1bd2a:	8f 93       	push	r24
   1bd2c:	85 e0       	ldi	r24, 0x05	; 5
   1bd2e:	97 e3       	ldi	r25, 0x37	; 55
   1bd30:	1f 92       	push	r1
   1bd32:	9f 93       	push	r25
   1bd34:	8f 93       	push	r24
   1bd36:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1bd3a:	0f b6       	in	r0, 0x3f	; 63
   1bd3c:	f8 94       	cli
   1bd3e:	de bf       	out	0x3e, r29	; 62
   1bd40:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1bd42:	cd bf       	out	0x3d, r28	; 61
   1bd44:	b3 01       	movw	r22, r6
   1bd46:	c8 01       	movw	r24, r16
   1bd48:	0e 94 ee d2 	call	0x1a5dc	; 0x1a5dc <lif_writedirindex>
   1bd4c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd4e:	21 f4       	brne	.+8      	; 0x1bd58 <lif_add_ascii_file_as_e010+0x236>
   1bd50:	c8 01       	movw	r24, r16
   1bd52:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1bd56:	16 c0       	rjmp	.+44     	; 0x1bd84 <lif_add_ascii_file_as_e010+0x262>
   1bd58:	c8 01       	movw	r24, r16
   1bd5a:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1bd5e:	ff 92       	push	r15
   1bd60:	ef 92       	push	r14
   1bd62:	9f 92       	push	r9
   1bd64:	8f 92       	push	r8
   1bd66:	88 ef       	ldi	r24, 0xF8	; 248
   1bd68:	96 e3       	ldi	r25, 0x36	; 54
   1bd6a:	1f 92       	push	r1
   1bd6c:	9f 93       	push	r25
   1bd6e:	8f 93       	push	r24
   1bd70:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    // Return file size
    return(bytes);
   1bd74:	0f b6       	in	r0, 0x3f	; 63
   1bd76:	f8 94       	cli
   1bd78:	de bf       	out	0x3e, r29	; 62
   1bd7a:	0f be       	out	0x3f, r0	; 63
   1bd7c:	cd bf       	out	0x3d, r28	; 61
   1bd7e:	b4 01       	movw	r22, r8
   1bd80:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1bd82:	04 c0       	rjmp	.+8      	; 0x1bd8c <lif_add_ascii_file_as_e010+0x26a>
   1bd84:	6f ef       	ldi	r22, 0xFF	; 255
   1bd86:	7f ef       	ldi	r23, 0xFF	; 255
   1bd88:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1bd8a:	9f ef       	ldi	r25, 0xFF	; 255
   1bd8c:	e2 96       	adiw	r28, 0x32	; 50
   1bd8e:	e2 e1       	ldi	r30, 0x12	; 18
   1bd90:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001bd94 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1bd94:	ac e2       	ldi	r26, 0x2C	; 44
   1bd96:	b2 e0       	ldi	r27, 0x02	; 2
   1bd98:	e0 ed       	ldi	r30, 0xD0	; 208
   1bd9a:	fe ed       	ldi	r31, 0xDE	; 222
   1bd9c:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1bda0:	f8 2e       	mov	r15, r24
   1bda2:	b9 2e       	mov	r11, r25
   1bda4:	16 2f       	mov	r17, r22
   1bda6:	07 2f       	mov	r16, r23
   1bda8:	c4 5e       	subi	r28, 0xE4	; 228
   1bdaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdac:	48 83       	st	Y, r20
   1bdae:	cc 51       	subi	r28, 0x1C	; 28
   1bdb0:	d2 40       	sbci	r29, 0x02	; 2
   1bdb2:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1bdb4:	6b e2       	ldi	r22, 0x2B	; 43
   1bdb6:	77 e0       	ldi	r23, 0x07	; 7
   1bdb8:	cb d9       	rcall	.-3178   	; 0x1b150 <lif_open_volume>
   1bdba:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1bdbc:	00 97       	sbiw	r24, 0x00	; 0
   1bdbe:	51 f4       	brne	.+20     	; 0x1bdd4 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1bdc0:	bf 92       	push	r11
   1bdc2:	ff 92       	push	r15
   1bdc4:	80 ee       	ldi	r24, 0xE0	; 224
   1bdc6:	96 e3       	ldi	r25, 0x36	; 54
   1bdc8:	1f 92       	push	r1
   1bdca:	9f 93       	push	r25
   1bdcc:	8f 93       	push	r24
   1bdce:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1bdd2:	11 c0       	rjmp	.+34     	; 0x1bdf6 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1bdd4:	61 2f       	mov	r22, r17
   1bdd6:	70 2f       	mov	r23, r16
   1bdd8:	20 dc       	rcall	.-1984   	; 0x1b61a <lif_find_file>
    if(index == -1)
   1bdda:	01 96       	adiw	r24, 0x01	; 1
   1bddc:	a1 f4       	brne	.+40     	; 0x1be06 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1bdde:	0f 93       	push	r16
   1bde0:	1f 93       	push	r17
   1bde2:	89 ec       	ldi	r24, 0xC9	; 201
   1bde4:	96 e3       	ldi	r25, 0x36	; 54
   1bde6:	1f 92       	push	r1
   1bde8:	9f 93       	push	r25
   1bdea:	8f 93       	push	r24
   1bdec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bdf0:	c6 01       	movw	r24, r12
   1bdf2:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1bdf6:	0f 90       	pop	r0
   1bdf8:	0f 90       	pop	r0
   1bdfa:	0f 90       	pop	r0
   1bdfc:	0f 90       	pop	r0
   1bdfe:	0f 90       	pop	r0
   1be00:	80 e0       	ldi	r24, 0x00	; 0
   1be02:	90 e0       	ldi	r25, 0x00	; 0
   1be04:	ae c2       	rjmp	.+1372   	; 0x1c362 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1be06:	f6 01       	movw	r30, r12
   1be08:	e6 5a       	subi	r30, 0xA6	; 166
   1be0a:	ff 4f       	sbci	r31, 0xFF	; 255
   1be0c:	80 81       	ld	r24, Z
   1be0e:	91 81       	ldd	r25, Z+1	; 0x01
   1be10:	9c 01       	movw	r18, r24
   1be12:	2c 7f       	andi	r18, 0xFC	; 252
   1be14:	20 31       	cpi	r18, 0x10	; 16
   1be16:	30 4e       	sbci	r19, 0xE0	; 224
   1be18:	c9 f0       	breq	.+50     	; 0x1be4c <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1be1a:	9f 93       	push	r25
   1be1c:	8f 93       	push	r24
   1be1e:	ef 92       	push	r14
   1be20:	c4 5e       	subi	r28, 0xE4	; 228
   1be22:	dd 4f       	sbci	r29, 0xFD	; 253
   1be24:	58 81       	ld	r21, Y
   1be26:	cc 51       	subi	r28, 0x1C	; 28
   1be28:	d2 40       	sbci	r29, 0x02	; 2
   1be2a:	5f 93       	push	r21
   1be2c:	81 e9       	ldi	r24, 0x91	; 145
   1be2e:	96 e3       	ldi	r25, 0x36	; 54
   1be30:	1f 92       	push	r1
   1be32:	9f 93       	push	r25
   1be34:	8f 93       	push	r24
   1be36:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be3a:	c6 01       	movw	r24, r12
   1be3c:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1be40:	0f b6       	in	r0, 0x3f	; 63
   1be42:	f8 94       	cli
   1be44:	de bf       	out	0x3e, r29	; 62
   1be46:	0f be       	out	0x3f, r0	; 63
   1be48:	cd bf       	out	0x3d, r28	; 61
   1be4a:	da cf       	rjmp	.-76     	; 0x1be00 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1be4c:	f6 01       	movw	r30, r12
   1be4e:	e4 5a       	subi	r30, 0xA4	; 164
   1be50:	ff 4f       	sbci	r31, 0xFF	; 255
   1be52:	80 80       	ld	r8, Z
   1be54:	91 80       	ldd	r9, Z+1	; 0x01
   1be56:	a2 80       	ldd	r10, Z+2	; 0x02
   1be58:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1be5a:	34 96       	adiw	r30, 0x04	; 4
   1be5c:	80 81       	ld	r24, Z
   1be5e:	91 81       	ldd	r25, Z+1	; 0x01
   1be60:	a2 81       	ldd	r26, Z+2	; 0x02
   1be62:	b3 81       	ldd	r27, Z+3	; 0x03
   1be64:	a5 01       	movw	r20, r10
   1be66:	94 01       	movw	r18, r8
   1be68:	28 0f       	add	r18, r24
   1be6a:	39 1f       	adc	r19, r25
   1be6c:	4a 1f       	adc	r20, r26
   1be6e:	5b 1f       	adc	r21, r27
   1be70:	c9 5d       	subi	r28, 0xD9	; 217
   1be72:	dd 4f       	sbci	r29, 0xFD	; 253
   1be74:	28 83       	st	Y, r18
   1be76:	39 83       	std	Y+1, r19	; 0x01
   1be78:	4a 83       	std	Y+2, r20	; 0x02
   1be7a:	5b 83       	std	Y+3, r21	; 0x03
   1be7c:	c7 52       	subi	r28, 0x27	; 39
   1be7e:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1be80:	c6 01       	movw	r24, r12
   1be82:	8c 59       	subi	r24, 0x9C	; 156
   1be84:	9f 4f       	sbci	r25, 0xFF	; 255
   1be86:	0e 94 39 cd 	call	0x19a72	; 0x19a72 <lif_lifbcd2time>
   1be8a:	c3 5e       	subi	r28, 0xE3	; 227
   1be8c:	dd 4f       	sbci	r29, 0xFD	; 253
   1be8e:	68 83       	st	Y, r22
   1be90:	79 83       	std	Y+1, r23	; 0x01
   1be92:	8a 83       	std	Y+2, r24	; 0x02
   1be94:	9b 83       	std	Y+3, r25	; 0x03
   1be96:	cd 51       	subi	r28, 0x1D	; 29
   1be98:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1be9a:	ba 2d       	mov	r27, r10
   1be9c:	a9 2d       	mov	r26, r9
   1be9e:	98 2d       	mov	r25, r8
   1bea0:	88 27       	eor	r24, r24
   1bea2:	cf 5e       	subi	r28, 0xEF	; 239
   1bea4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bea6:	88 83       	st	Y, r24
   1bea8:	99 83       	std	Y+1, r25	; 0x01
   1beaa:	aa 83       	std	Y+2, r26	; 0x02
   1beac:	bb 83       	std	Y+3, r27	; 0x03
   1beae:	c1 51       	subi	r28, 0x11	; 17
   1beb0:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1beb2:	6e e7       	ldi	r22, 0x7E	; 126
   1beb4:	78 e0       	ldi	r23, 0x08	; 8
   1beb6:	c4 5e       	subi	r28, 0xE4	; 228
   1beb8:	dd 4f       	sbci	r29, 0xFD	; 253
   1beba:	88 81       	ld	r24, Y
   1bebc:	cc 51       	subi	r28, 0x1C	; 28
   1bebe:	d2 40       	sbci	r29, 0x02	; 2
   1bec0:	9e 2d       	mov	r25, r14
   1bec2:	0e 94 e6 c8 	call	0x191cc	; 0x191cc <lif_open>
   1bec6:	c6 5e       	subi	r28, 0xE6	; 230
   1bec8:	dd 4f       	sbci	r29, 0xFD	; 253
   1beca:	99 83       	std	Y+1, r25	; 0x01
   1becc:	88 83       	st	Y, r24
   1bece:	ca 51       	subi	r28, 0x1A	; 26
   1bed0:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1bed2:	89 2b       	or	r24, r25
   1bed4:	21 f4       	brne	.+8      	; 0x1bede <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bed6:	c6 01       	movw	r24, r12
   1bed8:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1bedc:	91 cf       	rjmp	.-222    	; 0x1be00 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1bede:	ef 92       	push	r14
   1bee0:	c4 5e       	subi	r28, 0xE4	; 228
   1bee2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bee4:	98 81       	ld	r25, Y
   1bee6:	cc 51       	subi	r28, 0x1C	; 28
   1bee8:	d2 40       	sbci	r29, 0x02	; 2
   1beea:	9f 93       	push	r25
   1beec:	81 e8       	ldi	r24, 0x81	; 129
   1beee:	96 e3       	ldi	r25, 0x36	; 54
   1bef0:	1f 92       	push	r1
   1bef2:	9f 93       	push	r25
   1bef4:	8f 93       	push	r24
   1bef6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1befa:	0f 90       	pop	r0
   1befc:	0f 90       	pop	r0
   1befe:	0f 90       	pop	r0
   1bf00:	0f 90       	pop	r0
   1bf02:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1bf04:	81 2c       	mov	r8, r1
   1bf06:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1bf08:	c8 5e       	subi	r28, 0xE8	; 232
   1bf0a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf0c:	19 82       	std	Y+1, r1	; 0x01
   1bf0e:	18 82       	st	Y, r1
   1bf10:	c8 51       	subi	r28, 0x18	; 24
   1bf12:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1bf14:	a1 e0       	ldi	r26, 0x01	; 1
   1bf16:	cb 5e       	subi	r28, 0xEB	; 235
   1bf18:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf1a:	a8 83       	st	Y, r26
   1bf1c:	c5 51       	subi	r28, 0x15	; 21
   1bf1e:	d2 40       	sbci	r29, 0x02	; 2
   1bf20:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1bf22:	41 2c       	mov	r4, r1
   1bf24:	51 2c       	mov	r5, r1
   1bf26:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1bf28:	81 ec       	ldi	r24, 0xC1	; 193
   1bf2a:	95 e3       	ldi	r25, 0x35	; 53
   1bf2c:	9c 01       	movw	r18, r24
   1bf2e:	40 e0       	ldi	r20, 0x00	; 0
   1bf30:	cf 5d       	subi	r28, 0xDF	; 223
   1bf32:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf34:	28 83       	st	Y, r18
   1bf36:	39 83       	std	Y+1, r19	; 0x01
   1bf38:	4a 83       	std	Y+2, r20	; 0x02
   1bf3a:	c1 52       	subi	r28, 0x21	; 33
   1bf3c:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bf3e:	8e ec       	ldi	r24, 0xCE	; 206
   1bf40:	95 e3       	ldi	r25, 0x35	; 53
   1bf42:	9c 01       	movw	r18, r24
   1bf44:	40 e0       	ldi	r20, 0x00	; 0
   1bf46:	cc 5d       	subi	r28, 0xDC	; 220
   1bf48:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf4a:	28 83       	st	Y, r18
   1bf4c:	39 83       	std	Y+1, r19	; 0x01
   1bf4e:	4a 83       	std	Y+2, r20	; 0x02
   1bf50:	c4 52       	subi	r28, 0x24	; 36
   1bf52:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bf54:	cf 5e       	subi	r28, 0xEF	; 239
   1bf56:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf58:	28 81       	ld	r18, Y
   1bf5a:	39 81       	ldd	r19, Y+1	; 0x01
   1bf5c:	4a 81       	ldd	r20, Y+2	; 0x02
   1bf5e:	5b 81       	ldd	r21, Y+3	; 0x03
   1bf60:	c1 51       	subi	r28, 0x11	; 17
   1bf62:	d2 40       	sbci	r29, 0x02	; 2
   1bf64:	bb 27       	eor	r27, r27
   1bf66:	a5 2f       	mov	r26, r21
   1bf68:	94 2f       	mov	r25, r20
   1bf6a:	83 2f       	mov	r24, r19
   1bf6c:	c9 5d       	subi	r28, 0xD9	; 217
   1bf6e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf70:	28 81       	ld	r18, Y
   1bf72:	39 81       	ldd	r19, Y+1	; 0x01
   1bf74:	4a 81       	ldd	r20, Y+2	; 0x02
   1bf76:	5b 81       	ldd	r21, Y+3	; 0x03
   1bf78:	c7 52       	subi	r28, 0x27	; 39
   1bf7a:	d2 40       	sbci	r29, 0x02	; 2
   1bf7c:	28 17       	cp	r18, r24
   1bf7e:	39 07       	cpc	r19, r25
   1bf80:	4a 07       	cpc	r20, r26
   1bf82:	5b 07       	cpc	r21, r27
   1bf84:	08 f4       	brcc	.+2      	; 0x1bf88 <lif_extract_e010_as_ascii+0x1f4>
   1bf86:	76 c1       	rjmp	.+748    	; 0x1c274 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bf88:	00 e0       	ldi	r16, 0x00	; 0
   1bf8a:	11 e0       	ldi	r17, 0x01	; 1
   1bf8c:	cf 5e       	subi	r28, 0xEF	; 239
   1bf8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf90:	28 81       	ld	r18, Y
   1bf92:	39 81       	ldd	r19, Y+1	; 0x01
   1bf94:	4a 81       	ldd	r20, Y+2	; 0x02
   1bf96:	5b 81       	ldd	r21, Y+3	; 0x03
   1bf98:	c1 51       	subi	r28, 0x11	; 17
   1bf9a:	d2 40       	sbci	r29, 0x02	; 2
   1bf9c:	be 01       	movw	r22, r28
   1bf9e:	6b 5f       	subi	r22, 0xFB	; 251
   1bfa0:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfa2:	c6 01       	movw	r24, r12
   1bfa4:	0e 94 6c c9 	call	0x192d8	; 0x192d8 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bfa8:	6f 3f       	cpi	r22, 0xFF	; 255
   1bfaa:	71 05       	cpc	r23, r1
   1bfac:	09 f0       	breq	.+2      	; 0x1bfb0 <lif_extract_e010_as_ascii+0x21c>
   1bfae:	0c f4       	brge	.+2      	; 0x1bfb2 <lif_extract_e010_as_ascii+0x21e>
   1bfb0:	5b c1       	rjmp	.+694    	; 0x1c268 <lif_extract_e010_as_ascii+0x4d4>
   1bfb2:	00 e0       	ldi	r16, 0x00	; 0
   1bfb4:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bfb6:	c8 5e       	subi	r28, 0xE8	; 232
   1bfb8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfba:	a8 81       	ld	r26, Y
   1bfbc:	b9 81       	ldd	r27, Y+1	; 0x01
   1bfbe:	c8 51       	subi	r28, 0x18	; 24
   1bfc0:	d2 40       	sbci	r29, 0x02	; 2
   1bfc2:	ab 2b       	or	r26, r27
   1bfc4:	09 f0       	breq	.+2      	; 0x1bfc8 <lif_extract_e010_as_ascii+0x234>
   1bfc6:	3c c1       	rjmp	.+632    	; 0x1c240 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1bfc8:	e5 e0       	ldi	r30, 0x05	; 5
   1bfca:	f1 e0       	ldi	r31, 0x01	; 1
   1bfcc:	ec 0f       	add	r30, r28
   1bfce:	fd 1f       	adc	r31, r29
   1bfd0:	e0 0f       	add	r30, r16
   1bfd2:	f1 1f       	adc	r31, r17
   1bfd4:	80 81       	ld	r24, Z
   1bfd6:	98 2f       	mov	r25, r24
   1bfd8:	9f 7e       	andi	r25, 0xEF	; 239
   1bfda:	9f 3c       	cpi	r25, 0xCF	; 207
   1bfdc:	11 f0       	breq	.+4      	; 0x1bfe2 <lif_extract_e010_as_ascii+0x24e>
   1bfde:	8f 36       	cpi	r24, 0x6F	; 111
   1bfe0:	d9 f5       	brne	.+118    	; 0x1c058 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1bfe2:	e5 e0       	ldi	r30, 0x05	; 5
   1bfe4:	f1 e0       	ldi	r31, 0x01	; 1
   1bfe6:	ec 0f       	add	r30, r28
   1bfe8:	fd 1f       	adc	r31, r29
   1bfea:	e0 0f       	add	r30, r16
   1bfec:	f1 1f       	adc	r31, r17
   1bfee:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1bff0:	f8 01       	movw	r30, r16
   1bff2:	32 96       	adiw	r30, 0x02	; 2
   1bff4:	45 e0       	ldi	r20, 0x05	; 5
   1bff6:	51 e0       	ldi	r21, 0x01	; 1
   1bff8:	4c 0f       	add	r20, r28
   1bffa:	5d 1f       	adc	r21, r29
   1bffc:	e4 0f       	add	r30, r20
   1bffe:	f5 1f       	adc	r31, r21
   1c000:	0d 5f       	subi	r16, 0xFD	; 253
   1c002:	1f 4f       	sbci	r17, 0xFF	; 255
   1c004:	80 81       	ld	r24, Z
   1c006:	31 2c       	mov	r3, r1
   1c008:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1c00a:	21 14       	cp	r2, r1
   1c00c:	31 04       	cpc	r3, r1
   1c00e:	09 f4       	brne	.+2      	; 0x1c012 <lif_extract_e010_as_ascii+0x27e>
   1c010:	0f c1       	rjmp	.+542    	; 0x1c230 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1c012:	5f ef       	ldi	r21, 0xFF	; 255
   1c014:	25 16       	cp	r2, r21
   1c016:	31 04       	cpc	r3, r1
   1c018:	09 f0       	breq	.+2      	; 0x1c01c <lif_extract_e010_as_ascii+0x288>
   1c01a:	7c f4       	brge	.+30     	; 0x1c03a <lif_extract_e010_as_ascii+0x2a6>
   1c01c:	ca 5e       	subi	r28, 0xEA	; 234
   1c01e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c020:	19 82       	std	Y+1, r1	; 0x01
   1c022:	18 82       	st	Y, r1
   1c024:	c6 51       	subi	r28, 0x16	; 22
   1c026:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1c028:	c1 01       	movw	r24, r2
   1c02a:	01 97       	sbiw	r24, 0x01	; 1
   1c02c:	c5 5d       	subi	r28, 0xD5	; 213
   1c02e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c030:	99 83       	std	Y+1, r25	; 0x01
   1c032:	88 83       	st	Y, r24
   1c034:	cb 52       	subi	r28, 0x2B	; 43
   1c036:	d2 40       	sbci	r29, 0x02	; 2
   1c038:	7b c0       	rjmp	.+246    	; 0x1c130 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1c03a:	3f 92       	push	r3
   1c03c:	2f 92       	push	r2
   1c03e:	8c e4       	ldi	r24, 0x4C	; 76
   1c040:	96 e3       	ldi	r25, 0x36	; 54
   1c042:	1f 92       	push	r1
   1c044:	9f 93       	push	r25
   1c046:	8f 93       	push	r24
   1c048:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1c04c:	0f 90       	pop	r0
   1c04e:	0f 90       	pop	r0
   1c050:	0f 90       	pop	r0
   1c052:	0f 90       	pop	r0
   1c054:	0f 90       	pop	r0
   1c056:	2b c0       	rjmp	.+86     	; 0x1c0ae <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1c058:	8f 3e       	cpi	r24, 0xEF	; 239
   1c05a:	09 f4       	brne	.+2      	; 0x1c05e <lif_extract_e010_as_ascii+0x2ca>
   1c05c:	f1 c0       	rjmp	.+482    	; 0x1c240 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1c05e:	1f 93       	push	r17
   1c060:	0f 93       	push	r16
   1c062:	cc 5e       	subi	r28, 0xEC	; 236
   1c064:	dd 4f       	sbci	r29, 0xFD	; 253
   1c066:	b8 81       	ld	r27, Y
   1c068:	c4 51       	subi	r28, 0x14	; 20
   1c06a:	d2 40       	sbci	r29, 0x02	; 2
   1c06c:	bf 93       	push	r27
   1c06e:	cd 5e       	subi	r28, 0xED	; 237
   1c070:	dd 4f       	sbci	r29, 0xFD	; 253
   1c072:	28 81       	ld	r18, Y
   1c074:	c3 51       	subi	r28, 0x13	; 19
   1c076:	d2 40       	sbci	r29, 0x02	; 2
   1c078:	2f 93       	push	r18
   1c07a:	ce 5e       	subi	r28, 0xEE	; 238
   1c07c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c07e:	38 81       	ld	r19, Y
   1c080:	c2 51       	subi	r28, 0x12	; 18
   1c082:	d2 40       	sbci	r29, 0x02	; 2
   1c084:	3f 93       	push	r19
   1c086:	cf 5e       	subi	r28, 0xEF	; 239
   1c088:	dd 4f       	sbci	r29, 0xFD	; 253
   1c08a:	48 81       	ld	r20, Y
   1c08c:	c1 51       	subi	r28, 0x11	; 17
   1c08e:	d2 40       	sbci	r29, 0x02	; 2
   1c090:	4f 93       	push	r20
   1c092:	1f 92       	push	r1
   1c094:	8f 93       	push	r24
   1c096:	86 ef       	ldi	r24, 0xF6	; 246
   1c098:	95 e3       	ldi	r25, 0x35	; 53
   1c09a:	1f 92       	push	r1
   1c09c:	9f 93       	push	r25
   1c09e:	8f 93       	push	r24
   1c0a0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                status = 0;
                done = 1;
                break;
   1c0a4:	0f b6       	in	r0, 0x3f	; 63
   1c0a6:	f8 94       	cli
   1c0a8:	de bf       	out	0x3e, r29	; 62
   1c0aa:	0f be       	out	0x3f, r0	; 63
   1c0ac:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1c0ae:	a1 e0       	ldi	r26, 0x01	; 1
   1c0b0:	b0 e0       	ldi	r27, 0x00	; 0
   1c0b2:	c8 5e       	subi	r28, 0xE8	; 232
   1c0b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0b6:	b9 83       	std	Y+1, r27	; 0x01
   1c0b8:	a8 83       	st	Y, r26
   1c0ba:	c8 51       	subi	r28, 0x18	; 24
   1c0bc:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1c0be:	cb 5e       	subi	r28, 0xEB	; 235
   1c0c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0c2:	18 82       	st	Y, r1
   1c0c4:	c5 51       	subi	r28, 0x15	; 21
   1c0c6:	d2 40       	sbci	r29, 0x02	; 2
   1c0c8:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1c0ca:	ba c0       	rjmp	.+372    	; 0x1c240 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c0cc:	0f 3f       	cpi	r16, 0xFF	; 255
   1c0ce:	11 05       	cpc	r17, r1
   1c0d0:	11 f0       	breq	.+4      	; 0x1c0d6 <lif_extract_e010_as_ascii+0x342>
   1c0d2:	0c f0       	brlt	.+2      	; 0x1c0d6 <lif_extract_e010_as_ascii+0x342>
   1c0d4:	b5 c0       	rjmp	.+362    	; 0x1c240 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c0d6:	e5 e0       	ldi	r30, 0x05	; 5
   1c0d8:	f1 e0       	ldi	r31, 0x01	; 1
   1c0da:	ec 0f       	add	r30, r28
   1c0dc:	fd 1f       	adc	r31, r29
   1c0de:	e0 0f       	add	r30, r16
   1c0e0:	f1 1f       	adc	r31, r17
   1c0e2:	20 81       	ld	r18, Z
   1c0e4:	a4 01       	movw	r20, r8
   1c0e6:	4f 5f       	subi	r20, 0xFF	; 255
   1c0e8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c0ea:	5a 01       	movw	r10, r20
   1c0ec:	2d 30       	cpi	r18, 0x0D	; 13
   1c0ee:	51 f1       	breq	.+84     	; 0x1c144 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c0f0:	9a 2d       	mov	r25, r10
   1c0f2:	8b 2d       	mov	r24, r11
   1c0f4:	0f 5f       	subi	r16, 0xFF	; 255
   1c0f6:	1f 4f       	sbci	r17, 0xFF	; 255
   1c0f8:	e1 e0       	ldi	r30, 0x01	; 1
   1c0fa:	f0 e0       	ldi	r31, 0x00	; 0
   1c0fc:	ec 0f       	add	r30, r28
   1c0fe:	fd 1f       	adc	r31, r29
   1c100:	e8 0d       	add	r30, r8
   1c102:	f9 1d       	adc	r31, r9
   1c104:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1c106:	2f ef       	ldi	r18, 0xFF	; 255
   1c108:	a2 16       	cp	r10, r18
   1c10a:	b1 04       	cpc	r11, r1
   1c10c:	09 f0       	breq	.+2      	; 0x1c110 <lif_extract_e010_as_ascii+0x37c>
   1c10e:	ac f5       	brge	.+106    	; 0x1c17a <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c110:	ca 5e       	subi	r28, 0xEA	; 234
   1c112:	dd 4f       	sbci	r29, 0xFD	; 253
   1c114:	48 81       	ld	r20, Y
   1c116:	59 81       	ldd	r21, Y+1	; 0x01
   1c118:	c6 51       	subi	r28, 0x16	; 22
   1c11a:	d2 40       	sbci	r29, 0x02	; 2
   1c11c:	4f 5f       	subi	r20, 0xFF	; 255
   1c11e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c120:	ca 5e       	subi	r28, 0xEA	; 234
   1c122:	dd 4f       	sbci	r29, 0xFD	; 253
   1c124:	59 83       	std	Y+1, r21	; 0x01
   1c126:	48 83       	st	Y, r20
   1c128:	c6 51       	subi	r28, 0x16	; 22
   1c12a:	d2 40       	sbci	r29, 0x02	; 2
   1c12c:	89 2e       	mov	r8, r25
   1c12e:	98 2e       	mov	r9, r24
   1c130:	ca 5e       	subi	r28, 0xEA	; 234
   1c132:	dd 4f       	sbci	r29, 0xFD	; 253
   1c134:	88 81       	ld	r24, Y
   1c136:	99 81       	ldd	r25, Y+1	; 0x01
   1c138:	c6 51       	subi	r28, 0x16	; 22
   1c13a:	d2 40       	sbci	r29, 0x02	; 2
   1c13c:	82 15       	cp	r24, r2
   1c13e:	93 05       	cpc	r25, r3
   1c140:	2c f2       	brlt	.-118    	; 0x1c0cc <lif_extract_e010_as_ascii+0x338>
   1c142:	70 c0       	rjmp	.+224    	; 0x1c224 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c144:	ca 5e       	subi	r28, 0xEA	; 234
   1c146:	dd 4f       	sbci	r29, 0xFD	; 253
   1c148:	88 81       	ld	r24, Y
   1c14a:	99 81       	ldd	r25, Y+1	; 0x01
   1c14c:	c6 51       	subi	r28, 0x16	; 22
   1c14e:	d2 40       	sbci	r29, 0x02	; 2
   1c150:	c5 5d       	subi	r28, 0xD5	; 213
   1c152:	dd 4f       	sbci	r29, 0xFD	; 253
   1c154:	a8 81       	ld	r26, Y
   1c156:	b9 81       	ldd	r27, Y+1	; 0x01
   1c158:	cb 52       	subi	r28, 0x2B	; 43
   1c15a:	d2 40       	sbci	r29, 0x02	; 2
   1c15c:	8a 17       	cp	r24, r26
   1c15e:	9b 07       	cpc	r25, r27
   1c160:	39 f6       	brne	.-114    	; 0x1c0f0 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1c162:	e1 e0       	ldi	r30, 0x01	; 1
   1c164:	f0 e0       	ldi	r31, 0x00	; 0
   1c166:	ec 0f       	add	r30, r28
   1c168:	fd 1f       	adc	r31, r29
   1c16a:	e8 0d       	add	r30, r8
   1c16c:	f9 1d       	adc	r31, r9
   1c16e:	ba e0       	ldi	r27, 0x0A	; 10
   1c170:	b0 83       	st	Z, r27
                    ++ind;
   1c172:	0f 5f       	subi	r16, 0xFF	; 255
   1c174:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1c176:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1c178:	55 c0       	rjmp	.+170    	; 0x1c224 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1c17a:	c6 5e       	subi	r28, 0xE6	; 230
   1c17c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c17e:	28 81       	ld	r18, Y
   1c180:	39 81       	ldd	r19, Y+1	; 0x01
   1c182:	ca 51       	subi	r28, 0x1A	; 26
   1c184:	d2 40       	sbci	r29, 0x02	; 2
   1c186:	a5 01       	movw	r20, r10
   1c188:	61 e0       	ldi	r22, 0x01	; 1
   1c18a:	70 e0       	ldi	r23, 0x00	; 0
   1c18c:	ce 01       	movw	r24, r28
   1c18e:	01 96       	adiw	r24, 0x01	; 1
   1c190:	0e 94 db 81 	call	0x103b6	; 0x103b6 <fwrite>
                    if(size < wind)
   1c194:	8a 15       	cp	r24, r10
   1c196:	9b 05       	cpc	r25, r11
   1c198:	14 f5       	brge	.+68     	; 0x1c1de <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1c19a:	1f 92       	push	r1
   1c19c:	cb 5d       	subi	r28, 0xDB	; 219
   1c19e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1a0:	38 81       	ld	r19, Y
   1c1a2:	c5 52       	subi	r28, 0x25	; 37
   1c1a4:	d2 40       	sbci	r29, 0x02	; 2
   1c1a6:	3f 93       	push	r19
   1c1a8:	cc 5d       	subi	r28, 0xDC	; 220
   1c1aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1ac:	48 81       	ld	r20, Y
   1c1ae:	c4 52       	subi	r28, 0x24	; 36
   1c1b0:	d2 40       	sbci	r29, 0x02	; 2
   1c1b2:	4f 93       	push	r20
   1c1b4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1c1b8:	0f 90       	pop	r0
   1c1ba:	0f 90       	pop	r0
   1c1bc:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c1be:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1c1c0:	81 e0       	ldi	r24, 0x01	; 1
   1c1c2:	90 e0       	ldi	r25, 0x00	; 0
   1c1c4:	c8 5e       	subi	r28, 0xE8	; 232
   1c1c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1c8:	99 83       	std	Y+1, r25	; 0x01
   1c1ca:	88 83       	st	Y, r24
   1c1cc:	c8 51       	subi	r28, 0x18	; 24
   1c1ce:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1c1d0:	cb 5e       	subi	r28, 0xEB	; 235
   1c1d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1d4:	18 82       	st	Y, r1
   1c1d6:	c5 51       	subi	r28, 0x15	; 21
   1c1d8:	d2 40       	sbci	r29, 0x02	; 2
   1c1da:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1c1dc:	23 c0       	rjmp	.+70     	; 0x1c224 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1c1de:	09 2e       	mov	r0, r25
   1c1e0:	00 0c       	add	r0, r0
   1c1e2:	aa 0b       	sbc	r26, r26
   1c1e4:	bb 0b       	sbc	r27, r27
   1c1e6:	48 0e       	add	r4, r24
   1c1e8:	59 1e       	adc	r5, r25
   1c1ea:	6a 1e       	adc	r6, r26
   1c1ec:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1c1ee:	7f 92       	push	r7
   1c1f0:	6f 92       	push	r6
   1c1f2:	5f 92       	push	r5
   1c1f4:	4f 92       	push	r4
   1c1f6:	1f 92       	push	r1
   1c1f8:	ce 5d       	subi	r28, 0xDE	; 222
   1c1fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1fc:	98 81       	ld	r25, Y
   1c1fe:	c2 52       	subi	r28, 0x22	; 34
   1c200:	d2 40       	sbci	r29, 0x02	; 2
   1c202:	9f 93       	push	r25
   1c204:	cf 5d       	subi	r28, 0xDF	; 223
   1c206:	dd 4f       	sbci	r29, 0xFD	; 253
   1c208:	a8 81       	ld	r26, Y
   1c20a:	c1 52       	subi	r28, 0x21	; 33
   1c20c:	d2 40       	sbci	r29, 0x02	; 2
   1c20e:	af 93       	push	r26
   1c210:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1c214:	0f b6       	in	r0, 0x3f	; 63
   1c216:	f8 94       	cli
   1c218:	de bf       	out	0x3e, r29	; 62
   1c21a:	0f be       	out	0x3f, r0	; 63
   1c21c:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1c21e:	90 e0       	ldi	r25, 0x00	; 0
   1c220:	80 e0       	ldi	r24, 0x00	; 0
   1c222:	76 cf       	rjmp	.-276    	; 0x1c110 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1c224:	0f 3f       	cpi	r16, 0xFF	; 255
   1c226:	11 05       	cpc	r17, r1
   1c228:	09 f0       	breq	.+2      	; 0x1c22c <lif_extract_e010_as_ascii+0x498>
   1c22a:	0c f4       	brge	.+2      	; 0x1c22e <lif_extract_e010_as_ascii+0x49a>
   1c22c:	c4 ce       	rjmp	.-632    	; 0x1bfb6 <lif_extract_e010_as_ascii+0x222>
   1c22e:	08 c0       	rjmp	.+16     	; 0x1c240 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1c230:	21 e0       	ldi	r18, 0x01	; 1
   1c232:	30 e0       	ldi	r19, 0x00	; 0
   1c234:	c8 5e       	subi	r28, 0xE8	; 232
   1c236:	dd 4f       	sbci	r29, 0xFD	; 253
   1c238:	39 83       	std	Y+1, r19	; 0x01
   1c23a:	28 83       	st	Y, r18
   1c23c:	c8 51       	subi	r28, 0x18	; 24
   1c23e:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1c240:	cf 5e       	subi	r28, 0xEF	; 239
   1c242:	dd 4f       	sbci	r29, 0xFD	; 253
   1c244:	88 81       	ld	r24, Y
   1c246:	99 81       	ldd	r25, Y+1	; 0x01
   1c248:	aa 81       	ldd	r26, Y+2	; 0x02
   1c24a:	bb 81       	ldd	r27, Y+3	; 0x03
   1c24c:	c1 51       	subi	r28, 0x11	; 17
   1c24e:	d2 40       	sbci	r29, 0x02	; 2
   1c250:	9f 5f       	subi	r25, 0xFF	; 255
   1c252:	af 4f       	sbci	r26, 0xFF	; 255
   1c254:	bf 4f       	sbci	r27, 0xFF	; 255
   1c256:	cf 5e       	subi	r28, 0xEF	; 239
   1c258:	dd 4f       	sbci	r29, 0xFD	; 253
   1c25a:	88 83       	st	Y, r24
   1c25c:	99 83       	std	Y+1, r25	; 0x01
   1c25e:	aa 83       	std	Y+2, r26	; 0x02
   1c260:	bb 83       	std	Y+3, r27	; 0x03
   1c262:	c1 51       	subi	r28, 0x11	; 17
   1c264:	d2 40       	sbci	r29, 0x02	; 2
   1c266:	76 ce       	rjmp	.-788    	; 0x1bf54 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1c268:	cb 5e       	subi	r28, 0xEB	; 235
   1c26a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c26c:	18 82       	st	Y, r1
   1c26e:	c5 51       	subi	r28, 0x15	; 21
   1c270:	d2 40       	sbci	r29, 0x02	; 2
   1c272:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c274:	c6 01       	movw	r24, r12
   1c276:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1c27a:	81 14       	cp	r8, r1
   1c27c:	91 04       	cpc	r9, r1
   1c27e:	51 f1       	breq	.+84     	; 0x1c2d4 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1c280:	c6 5e       	subi	r28, 0xE6	; 230
   1c282:	dd 4f       	sbci	r29, 0xFD	; 253
   1c284:	28 81       	ld	r18, Y
   1c286:	39 81       	ldd	r19, Y+1	; 0x01
   1c288:	ca 51       	subi	r28, 0x1A	; 26
   1c28a:	d2 40       	sbci	r29, 0x02	; 2
   1c28c:	a4 01       	movw	r20, r8
   1c28e:	61 e0       	ldi	r22, 0x01	; 1
   1c290:	70 e0       	ldi	r23, 0x00	; 0
   1c292:	ce 01       	movw	r24, r28
   1c294:	01 96       	adiw	r24, 0x01	; 1
   1c296:	0e 94 db 81 	call	0x103b6	; 0x103b6 <fwrite>
   1c29a:	8c 01       	movw	r16, r24
        if(size < wind)
   1c29c:	88 15       	cp	r24, r8
   1c29e:	99 05       	cpc	r25, r9
   1c2a0:	84 f4       	brge	.+32     	; 0x1c2c2 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1c2a2:	89 e9       	ldi	r24, 0x99	; 153
   1c2a4:	95 e3       	ldi	r25, 0x35	; 53
   1c2a6:	1f 92       	push	r1
   1c2a8:	9f 93       	push	r25
   1c2aa:	8f 93       	push	r24
   1c2ac:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1c2b0:	0f 90       	pop	r0
   1c2b2:	0f 90       	pop	r0
   1c2b4:	0f 90       	pop	r0
            status = 0;
   1c2b6:	cb 5e       	subi	r28, 0xEB	; 235
   1c2b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2ba:	18 82       	st	Y, r1
   1c2bc:	c5 51       	subi	r28, 0x15	; 21
   1c2be:	d2 40       	sbci	r29, 0x02	; 2
   1c2c0:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1c2c2:	c8 01       	movw	r24, r16
   1c2c4:	01 2e       	mov	r0, r17
   1c2c6:	00 0c       	add	r0, r0
   1c2c8:	aa 0b       	sbc	r26, r26
   1c2ca:	bb 0b       	sbc	r27, r27
   1c2cc:	48 0e       	add	r4, r24
   1c2ce:	59 1e       	adc	r5, r25
   1c2d0:	6a 1e       	adc	r6, r26
   1c2d2:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1c2d4:	c6 5e       	subi	r28, 0xE6	; 230
   1c2d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2d8:	88 81       	ld	r24, Y
   1c2da:	99 81       	ldd	r25, Y+1	; 0x01
   1c2dc:	ca 51       	subi	r28, 0x1A	; 26
   1c2de:	d2 40       	sbci	r29, 0x02	; 2
   1c2e0:	0e 94 5d 82 	call	0x104ba	; 0x104ba <fclose>
    if(t)
   1c2e4:	c3 5e       	subi	r28, 0xE3	; 227
   1c2e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2e8:	88 81       	ld	r24, Y
   1c2ea:	99 81       	ldd	r25, Y+1	; 0x01
   1c2ec:	aa 81       	ldd	r26, Y+2	; 0x02
   1c2ee:	bb 81       	ldd	r27, Y+3	; 0x03
   1c2f0:	cd 51       	subi	r28, 0x1D	; 29
   1c2f2:	d2 40       	sbci	r29, 0x02	; 2
   1c2f4:	00 97       	sbiw	r24, 0x00	; 0
   1c2f6:	a1 05       	cpc	r26, r1
   1c2f8:	b1 05       	cpc	r27, r1
   1c2fa:	d9 f0       	breq	.+54     	; 0x1c332 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1c2fc:	c3 5f       	subi	r28, 0xF3	; 243
   1c2fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1c300:	88 83       	st	Y, r24
   1c302:	99 83       	std	Y+1, r25	; 0x01
   1c304:	aa 83       	std	Y+2, r26	; 0x02
   1c306:	bb 83       	std	Y+3, r27	; 0x03
   1c308:	cd 50       	subi	r28, 0x0D	; 13
   1c30a:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1c30c:	c7 5f       	subi	r28, 0xF7	; 247
   1c30e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c310:	88 83       	st	Y, r24
   1c312:	99 83       	std	Y+1, r25	; 0x01
   1c314:	aa 83       	std	Y+2, r26	; 0x02
   1c316:	bb 83       	std	Y+3, r27	; 0x03
   1c318:	c9 50       	subi	r28, 0x09	; 9
   1c31a:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1c31c:	be 01       	movw	r22, r28
   1c31e:	67 5f       	subi	r22, 0xF7	; 247
   1c320:	7d 4f       	sbci	r23, 0xFD	; 253
   1c322:	c4 5e       	subi	r28, 0xE4	; 228
   1c324:	dd 4f       	sbci	r29, 0xFD	; 253
   1c326:	88 81       	ld	r24, Y
   1c328:	cc 51       	subi	r28, 0x1C	; 28
   1c32a:	d2 40       	sbci	r29, 0x02	; 2
   1c32c:	9e 2d       	mov	r25, r14
   1c32e:	0e 94 9b 7f 	call	0xff36	; 0xff36 <utime>
    }
    sync();
   1c332:	0e 94 58 81 	call	0x102b0	; 0x102b0 <sync>
    printf("Wrote: %8ld\n", bytes);
   1c336:	7f 92       	push	r7
   1c338:	6f 92       	push	r6
   1c33a:	5f 92       	push	r5
   1c33c:	4f 92       	push	r4
   1c33e:	8c e8       	ldi	r24, 0x8C	; 140
   1c340:	95 e3       	ldi	r25, 0x35	; 53
   1c342:	1f 92       	push	r1
   1c344:	9f 93       	push	r25
   1c346:	8f 93       	push	r24
   1c348:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(status);
   1c34c:	0f b6       	in	r0, 0x3f	; 63
   1c34e:	f8 94       	cli
   1c350:	de bf       	out	0x3e, r29	; 62
   1c352:	0f be       	out	0x3f, r0	; 63
   1c354:	cd bf       	out	0x3d, r28	; 61
   1c356:	cb 5e       	subi	r28, 0xEB	; 235
   1c358:	dd 4f       	sbci	r29, 0xFD	; 253
   1c35a:	88 81       	ld	r24, Y
   1c35c:	c5 51       	subi	r28, 0x15	; 21
   1c35e:	d2 40       	sbci	r29, 0x02	; 2
   1c360:	9f 2d       	mov	r25, r15
}
   1c362:	c4 5d       	subi	r28, 0xD4	; 212
   1c364:	dd 4f       	sbci	r29, 0xFD	; 253
   1c366:	e2 e1       	ldi	r30, 0x12	; 18
   1c368:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001c36c <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1c36c:	ad e0       	ldi	r26, 0x0D	; 13
   1c36e:	b1 e0       	ldi	r27, 0x01	; 1
   1c370:	ec eb       	ldi	r30, 0xBC	; 188
   1c372:	f1 ee       	ldi	r31, 0xE1	; 225
   1c374:	0c 94 1b eb 	jmp	0x1d636	; 0x1d636 <__prologue_saves__>
   1c378:	f8 2e       	mov	r15, r24
   1c37a:	e9 2e       	mov	r14, r25
   1c37c:	16 2f       	mov	r17, r22
   1c37e:	07 2f       	mov	r16, r23
   1c380:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1c382:	6b e2       	ldi	r22, 0x2B	; 43
   1c384:	77 e0       	ldi	r23, 0x07	; 7
   1c386:	0e 94 a8 d8 	call	0x1b150	; 0x1b150 <lif_open_volume>
   1c38a:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1c38c:	00 97       	sbiw	r24, 0x00	; 0
   1c38e:	51 f4       	brne	.+20     	; 0x1c3a4 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c390:	ef 92       	push	r14
   1c392:	ff 92       	push	r15
   1c394:	84 e7       	ldi	r24, 0x74	; 116
   1c396:	95 e3       	ldi	r25, 0x35	; 53
   1c398:	1f 92       	push	r1
   1c39a:	9f 93       	push	r25
   1c39c:	8f 93       	push	r24
   1c39e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1c3a2:	11 c0       	rjmp	.+34     	; 0x1c3c6 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c3a4:	61 2f       	mov	r22, r17
   1c3a6:	70 2f       	mov	r23, r16
   1c3a8:	38 d9       	rcall	.-3472   	; 0x1b61a <lif_find_file>
    if(index == -1)
   1c3aa:	01 96       	adiw	r24, 0x01	; 1
   1c3ac:	a1 f4       	brne	.+40     	; 0x1c3d6 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1c3ae:	0f 93       	push	r16
   1c3b0:	1f 93       	push	r17
   1c3b2:	81 e6       	ldi	r24, 0x61	; 97
   1c3b4:	95 e3       	ldi	r25, 0x35	; 53
   1c3b6:	1f 92       	push	r1
   1c3b8:	9f 93       	push	r25
   1c3ba:	8f 93       	push	r24
   1c3bc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c3c0:	c4 01       	movw	r24, r8
   1c3c2:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c3c6:	0f 90       	pop	r0
   1c3c8:	0f 90       	pop	r0
   1c3ca:	0f 90       	pop	r0
   1c3cc:	0f 90       	pop	r0
   1c3ce:	0f 90       	pop	r0
   1c3d0:	00 e0       	ldi	r16, 0x00	; 0
   1c3d2:	10 e0       	ldi	r17, 0x00	; 0
   1c3d4:	0c c1       	rjmp	.+536    	; 0x1c5ee <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1c3d6:	a4 01       	movw	r20, r8
   1c3d8:	40 5a       	subi	r20, 0xA0	; 160
   1c3da:	5f 4f       	sbci	r21, 0xFF	; 255
   1c3dc:	c4 5f       	subi	r28, 0xF4	; 244
   1c3de:	de 4f       	sbci	r29, 0xFE	; 254
   1c3e0:	59 83       	std	Y+1, r21	; 0x01
   1c3e2:	48 83       	st	Y, r20
   1c3e4:	cc 50       	subi	r28, 0x0C	; 12
   1c3e6:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c3e8:	da 01       	movw	r26, r20
   1c3ea:	ad 90       	ld	r10, X+
   1c3ec:	bc 90       	ld	r11, X
   1c3ee:	0b 2c       	mov	r0, r11
   1c3f0:	00 0c       	add	r0, r0
   1c3f2:	cc 08       	sbc	r12, r12
   1c3f4:	dd 08       	sbc	r13, r13
   1c3f6:	e1 2c       	mov	r14, r1
   1c3f8:	f1 2c       	mov	r15, r1
   1c3fa:	87 01       	movw	r16, r14
   1c3fc:	e3 94       	inc	r14
   1c3fe:	21 e0       	ldi	r18, 0x01	; 1
   1c400:	30 e0       	ldi	r19, 0x00	; 0
   1c402:	40 e0       	ldi	r20, 0x00	; 0
   1c404:	50 e0       	ldi	r21, 0x00	; 0
   1c406:	66 e1       	ldi	r22, 0x16	; 22
   1c408:	76 e1       	ldi	r23, 0x16	; 22
   1c40a:	c3 01       	movw	r24, r6
   1c40c:	0e 94 6a d4 	call	0x1a8d4	; 0x1a8d4 <lif_create_volume>
   1c410:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c412:	89 2b       	or	r24, r25
   1c414:	11 f4       	brne	.+4      	; 0x1c41a <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c416:	c4 01       	movw	r24, r8
   1c418:	cf c0       	rjmp	.+414    	; 0x1c5b8 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c41a:	81 e2       	ldi	r24, 0x21	; 33
   1c41c:	f4 01       	movw	r30, r8
   1c41e:	e1 5b       	subi	r30, 0xB1	; 177
   1c420:	ff 4f       	sbci	r31, 0xFF	; 255
   1c422:	d5 01       	movw	r26, r10
   1c424:	a1 5b       	subi	r26, 0xB1	; 177
   1c426:	bf 4f       	sbci	r27, 0xFF	; 255
   1c428:	01 90       	ld	r0, Z+
   1c42a:	0d 92       	st	X+, r0
   1c42c:	8a 95       	dec	r24
   1c42e:	e1 f7       	brne	.-8      	; 0x1c428 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c430:	82 e0       	ldi	r24, 0x02	; 2
   1c432:	90 e0       	ldi	r25, 0x00	; 0
   1c434:	a0 e0       	ldi	r26, 0x00	; 0
   1c436:	b0 e0       	ldi	r27, 0x00	; 0
   1c438:	f5 01       	movw	r30, r10
   1c43a:	e4 5a       	subi	r30, 0xA4	; 164
   1c43c:	ff 4f       	sbci	r31, 0xFF	; 255
   1c43e:	80 83       	st	Z, r24
   1c440:	91 83       	std	Z+1, r25	; 0x01
   1c442:	a2 83       	std	Z+2, r26	; 0x02
   1c444:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c446:	c4 5f       	subi	r28, 0xF4	; 244
   1c448:	de 4f       	sbci	r29, 0xFE	; 254
   1c44a:	e8 81       	ld	r30, Y
   1c44c:	f9 81       	ldd	r31, Y+1	; 0x01
   1c44e:	cc 50       	subi	r28, 0x0C	; 12
   1c450:	d1 40       	sbci	r29, 0x01	; 1
   1c452:	80 81       	ld	r24, Z
   1c454:	91 81       	ldd	r25, Z+1	; 0x01
   1c456:	a2 81       	ldd	r26, Z+2	; 0x02
   1c458:	b3 81       	ldd	r27, Z+3	; 0x03
   1c45a:	f5 01       	movw	r30, r10
   1c45c:	80 8b       	std	Z+16, r24	; 0x10
   1c45e:	91 8b       	std	Z+17, r25	; 0x11
   1c460:	a2 8b       	std	Z+18, r26	; 0x12
   1c462:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c464:	60 e0       	ldi	r22, 0x00	; 0
   1c466:	70 e0       	ldi	r23, 0x00	; 0
   1c468:	c5 01       	movw	r24, r10
   1c46a:	0e 94 ee d2 	call	0x1a5dc	; 0x1a5dc <lif_writedirindex>
   1c46e:	8c 01       	movw	r16, r24
   1c470:	89 2b       	or	r24, r25
   1c472:	41 f0       	breq	.+16     	; 0x1c484 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c474:	61 e0       	ldi	r22, 0x01	; 1
   1c476:	70 e0       	ldi	r23, 0x00	; 0
   1c478:	c5 01       	movw	r24, r10
   1c47a:	0e 94 4a d3 	call	0x1a694	; 0x1a694 <lif_writedirEOF>
   1c47e:	8c 01       	movw	r16, r24
   1c480:	89 2b       	or	r24, r25
   1c482:	39 f4       	brne	.+14     	; 0x1c492 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c484:	c4 01       	movw	r24, r8
   1c486:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c48a:	c5 01       	movw	r24, r10
   1c48c:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c490:	ae c0       	rjmp	.+348    	; 0x1c5ee <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c492:	d5 01       	movw	r26, r10
   1c494:	1c 96       	adiw	r26, 0x0c	; 12
   1c496:	cd 90       	ld	r12, X+
   1c498:	dd 90       	ld	r13, X+
   1c49a:	ed 90       	ld	r14, X+
   1c49c:	fc 90       	ld	r15, X
   1c49e:	1f 97       	sbiw	r26, 0x0f	; 15
   1c4a0:	fe 2c       	mov	r15, r14
   1c4a2:	ed 2c       	mov	r14, r13
   1c4a4:	dc 2c       	mov	r13, r12
   1c4a6:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c4a8:	f4 01       	movw	r30, r8
   1c4aa:	e4 5a       	subi	r30, 0xA4	; 164
   1c4ac:	ff 4f       	sbci	r31, 0xFF	; 255
   1c4ae:	80 81       	ld	r24, Z
   1c4b0:	91 81       	ldd	r25, Z+1	; 0x01
   1c4b2:	a2 81       	ldd	r26, Z+2	; 0x02
   1c4b4:	b3 81       	ldd	r27, Z+3	; 0x03
   1c4b6:	22 27       	eor	r18, r18
   1c4b8:	38 2f       	mov	r19, r24
   1c4ba:	49 2f       	mov	r20, r25
   1c4bc:	5a 2f       	mov	r21, r26
   1c4be:	cb 5f       	subi	r28, 0xFB	; 251
   1c4c0:	de 4f       	sbci	r29, 0xFE	; 254
   1c4c2:	28 83       	st	Y, r18
   1c4c4:	39 83       	std	Y+1, r19	; 0x01
   1c4c6:	4a 83       	std	Y+2, r20	; 0x02
   1c4c8:	5b 83       	std	Y+3, r21	; 0x03
   1c4ca:	c5 50       	subi	r28, 0x05	; 5
   1c4cc:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c4ce:	21 2c       	mov	r2, r1
   1c4d0:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c4d2:	84 e5       	ldi	r24, 0x54	; 84
   1c4d4:	95 e3       	ldi	r25, 0x35	; 53
   1c4d6:	9c 01       	movw	r18, r24
   1c4d8:	40 e0       	ldi	r20, 0x00	; 0
   1c4da:	c7 5f       	subi	r28, 0xF7	; 247
   1c4dc:	de 4f       	sbci	r29, 0xFE	; 254
   1c4de:	28 83       	st	Y, r18
   1c4e0:	39 83       	std	Y+1, r19	; 0x01
   1c4e2:	4a 83       	std	Y+2, r20	; 0x02
   1c4e4:	c9 50       	subi	r28, 0x09	; 9
   1c4e6:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c4e8:	41 c0       	rjmp	.+130    	; 0x1c56c <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c4ea:	00 e0       	ldi	r16, 0x00	; 0
   1c4ec:	11 e0       	ldi	r17, 0x01	; 1
   1c4ee:	a7 01       	movw	r20, r14
   1c4f0:	96 01       	movw	r18, r12
   1c4f2:	be 01       	movw	r22, r28
   1c4f4:	6f 5f       	subi	r22, 0xFF	; 255
   1c4f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4f8:	c5 01       	movw	r24, r10
   1c4fa:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c4fe:	05 2c       	mov	r0, r5
   1c500:	00 0c       	add	r0, r0
   1c502:	66 08       	sbc	r6, r6
   1c504:	77 08       	sbc	r7, r7
   1c506:	c4 0c       	add	r12, r4
   1c508:	d5 1c       	adc	r13, r5
   1c50a:	e6 1c       	adc	r14, r6
   1c50c:	f7 1c       	adc	r15, r7
        offset += size;
   1c50e:	cb 5f       	subi	r28, 0xFB	; 251
   1c510:	de 4f       	sbci	r29, 0xFE	; 254
   1c512:	88 81       	ld	r24, Y
   1c514:	99 81       	ldd	r25, Y+1	; 0x01
   1c516:	aa 81       	ldd	r26, Y+2	; 0x02
   1c518:	bb 81       	ldd	r27, Y+3	; 0x03
   1c51a:	c5 50       	subi	r28, 0x05	; 5
   1c51c:	d1 40       	sbci	r29, 0x01	; 1
   1c51e:	84 0d       	add	r24, r4
   1c520:	95 1d       	adc	r25, r5
   1c522:	a6 1d       	adc	r26, r6
   1c524:	b7 1d       	adc	r27, r7
   1c526:	cb 5f       	subi	r28, 0xFB	; 251
   1c528:	de 4f       	sbci	r29, 0xFE	; 254
   1c52a:	88 83       	st	Y, r24
   1c52c:	99 83       	std	Y+1, r25	; 0x01
   1c52e:	aa 83       	std	Y+2, r26	; 0x02
   1c530:	bb 83       	std	Y+3, r27	; 0x03
   1c532:	c5 50       	subi	r28, 0x05	; 5
   1c534:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c536:	ff 92       	push	r15
   1c538:	ef 92       	push	r14
   1c53a:	df 92       	push	r13
   1c53c:	cf 92       	push	r12
   1c53e:	1f 92       	push	r1
   1c540:	c6 5f       	subi	r28, 0xF6	; 246
   1c542:	de 4f       	sbci	r29, 0xFE	; 254
   1c544:	98 81       	ld	r25, Y
   1c546:	ca 50       	subi	r28, 0x0A	; 10
   1c548:	d1 40       	sbci	r29, 0x01	; 1
   1c54a:	9f 93       	push	r25
   1c54c:	c7 5f       	subi	r28, 0xF7	; 247
   1c54e:	de 4f       	sbci	r29, 0xFE	; 254
   1c550:	a8 81       	ld	r26, Y
   1c552:	c9 50       	subi	r28, 0x09	; 9
   1c554:	d1 40       	sbci	r29, 0x01	; 1
   1c556:	af 93       	push	r26
   1c558:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c55c:	bf ef       	ldi	r27, 0xFF	; 255
   1c55e:	2b 1a       	sub	r2, r27
   1c560:	3b 0a       	sbc	r3, r27
   1c562:	0f b6       	in	r0, 0x3f	; 63
   1c564:	f8 94       	cli
   1c566:	de bf       	out	0x3e, r29	; 62
   1c568:	0f be       	out	0x3f, r0	; 63
   1c56a:	cd bf       	out	0x3d, r28	; 61
   1c56c:	c4 5f       	subi	r28, 0xF4	; 244
   1c56e:	de 4f       	sbci	r29, 0xFE	; 254
   1c570:	a8 81       	ld	r26, Y
   1c572:	b9 81       	ldd	r27, Y+1	; 0x01
   1c574:	cc 50       	subi	r28, 0x0C	; 12
   1c576:	d1 40       	sbci	r29, 0x01	; 1
   1c578:	8d 91       	ld	r24, X+
   1c57a:	9c 91       	ld	r25, X
   1c57c:	28 16       	cp	r2, r24
   1c57e:	39 06       	cpc	r3, r25
   1c580:	f4 f4       	brge	.+60     	; 0x1c5be <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c582:	00 e0       	ldi	r16, 0x00	; 0
   1c584:	11 e0       	ldi	r17, 0x01	; 1
   1c586:	cb 5f       	subi	r28, 0xFB	; 251
   1c588:	de 4f       	sbci	r29, 0xFE	; 254
   1c58a:	28 81       	ld	r18, Y
   1c58c:	39 81       	ldd	r19, Y+1	; 0x01
   1c58e:	4a 81       	ldd	r20, Y+2	; 0x02
   1c590:	5b 81       	ldd	r21, Y+3	; 0x03
   1c592:	c5 50       	subi	r28, 0x05	; 5
   1c594:	d1 40       	sbci	r29, 0x01	; 1
   1c596:	be 01       	movw	r22, r28
   1c598:	6f 5f       	subi	r22, 0xFF	; 255
   1c59a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c59c:	c4 01       	movw	r24, r8
   1c59e:	0e 94 6c c9 	call	0x192d8	; 0x192d8 <lif_read>
   1c5a2:	2b 01       	movw	r4, r22
   1c5a4:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c5a6:	6f 3f       	cpi	r22, 0xFF	; 255
   1c5a8:	71 05       	cpc	r23, r1
   1c5aa:	11 f0       	breq	.+4      	; 0x1c5b0 <lif_extract_lif_as_lif+0x244>
   1c5ac:	0c f0       	brlt	.+2      	; 0x1c5b0 <lif_extract_lif_as_lif+0x244>
   1c5ae:	9d cf       	rjmp	.-198    	; 0x1c4ea <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c5b0:	c4 01       	movw	r24, r8
   1c5b2:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c5b6:	c5 01       	movw	r24, r10
   1c5b8:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c5bc:	09 cf       	rjmp	.-494    	; 0x1c3d0 <lif_extract_lif_as_lif+0x64>
   1c5be:	c4 01       	movw	r24, r8
   1c5c0:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c5c4:	c5 01       	movw	r24, r10
   1c5c6:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c5ca:	ff 92       	push	r15
   1c5cc:	ef 92       	push	r14
   1c5ce:	df 92       	push	r13
   1c5d0:	cf 92       	push	r12
   1c5d2:	87 e4       	ldi	r24, 0x47	; 71
   1c5d4:	95 e3       	ldi	r25, 0x35	; 53
   1c5d6:	1f 92       	push	r1
   1c5d8:	9f 93       	push	r25
   1c5da:	8f 93       	push	r24
   1c5dc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(1);
   1c5e0:	0f b6       	in	r0, 0x3f	; 63
   1c5e2:	f8 94       	cli
   1c5e4:	de bf       	out	0x3e, r29	; 62
   1c5e6:	0f be       	out	0x3f, r0	; 63
   1c5e8:	cd bf       	out	0x3d, r28	; 61
   1c5ea:	01 e0       	ldi	r16, 0x01	; 1
   1c5ec:	10 e0       	ldi	r17, 0x00	; 0
}
   1c5ee:	c8 01       	movw	r24, r16
   1c5f0:	c3 5f       	subi	r28, 0xF3	; 243
   1c5f2:	de 4f       	sbci	r29, 0xFE	; 254
   1c5f4:	e2 e1       	ldi	r30, 0x12	; 18
   1c5f6:	0c 94 37 eb 	jmp	0x1d66e	; 0x1d66e <__epilogue_restores__>

0001c5fa <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c5fa:	2f 92       	push	r2
   1c5fc:	3f 92       	push	r3
   1c5fe:	4f 92       	push	r4
   1c600:	5f 92       	push	r5
   1c602:	6f 92       	push	r6
   1c604:	8f 92       	push	r8
   1c606:	9f 92       	push	r9
   1c608:	af 92       	push	r10
   1c60a:	bf 92       	push	r11
   1c60c:	cf 92       	push	r12
   1c60e:	df 92       	push	r13
   1c610:	ef 92       	push	r14
   1c612:	ff 92       	push	r15
   1c614:	0f 93       	push	r16
   1c616:	1f 93       	push	r17
   1c618:	cf 93       	push	r28
   1c61a:	df 93       	push	r29
   1c61c:	cd b7       	in	r28, 0x3d	; 61
   1c61e:	de b7       	in	r29, 0x3e	; 62
   1c620:	c4 51       	subi	r28, 0x14	; 20
   1c622:	d1 40       	sbci	r29, 0x01	; 1
   1c624:	0f b6       	in	r0, 0x3f	; 63
   1c626:	f8 94       	cli
   1c628:	de bf       	out	0x3e, r29	; 62
   1c62a:	0f be       	out	0x3f, r0	; 63
   1c62c:	cd bf       	out	0x3d, r28	; 61
   1c62e:	7c 01       	movw	r14, r24
   1c630:	5b 01       	movw	r10, r22
   1c632:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c634:	dc 01       	movw	r26, r24
   1c636:	8c 91       	ld	r24, X
   1c638:	81 11       	cpse	r24, r1
   1c63a:	03 c0       	rjmp	.+6      	; 0x1c642 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c63c:	87 e2       	ldi	r24, 0x27	; 39
   1c63e:	95 e3       	ldi	r25, 0x35	; 53
   1c640:	06 c0       	rjmp	.+12     	; 0x1c64e <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c642:	fb 01       	movw	r30, r22
   1c644:	80 81       	ld	r24, Z
   1c646:	81 11       	cpse	r24, r1
   1c648:	0b c0       	rjmp	.+22     	; 0x1c660 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c64a:	8c e0       	ldi	r24, 0x0C	; 12
   1c64c:	95 e3       	ldi	r25, 0x35	; 53
   1c64e:	1f 92       	push	r1
   1c650:	9f 93       	push	r25
   1c652:	8f 93       	push	r24
   1c654:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1c658:	0f 90       	pop	r0
   1c65a:	0f 90       	pop	r0
   1c65c:	0f 90       	pop	r0
   1c65e:	32 c1       	rjmp	.+612    	; 0x1c8c4 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c660:	da 01       	movw	r26, r20
   1c662:	8c 91       	ld	r24, X
   1c664:	81 11       	cpse	r24, r1
   1c666:	03 c0       	rjmp	.+6      	; 0x1c66e <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c668:	80 ef       	ldi	r24, 0xF0	; 240
   1c66a:	94 e3       	ldi	r25, 0x34	; 52
   1c66c:	f0 cf       	rjmp	.-32     	; 0x1c64e <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c66e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c672:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c676:	92 ff       	sbrs	r25, 2
   1c678:	12 c0       	rjmp	.+36     	; 0x1c69e <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c67a:	df 92       	push	r13
   1c67c:	4f 93       	push	r20
   1c67e:	bf 92       	push	r11
   1c680:	6f 93       	push	r22
   1c682:	ff 92       	push	r15
   1c684:	ef 92       	push	r14
   1c686:	81 ec       	ldi	r24, 0xC1	; 193
   1c688:	94 e3       	ldi	r25, 0x34	; 52
   1c68a:	1f 92       	push	r1
   1c68c:	9f 93       	push	r25
   1c68e:	8f 93       	push	r24
   1c690:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1c694:	0f b6       	in	r0, 0x3f	; 63
   1c696:	f8 94       	cli
   1c698:	de bf       	out	0x3e, r29	; 62
   1c69a:	0f be       	out	0x3f, r0	; 63
   1c69c:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c69e:	6a e7       	ldi	r22, 0x7A	; 122
   1c6a0:	78 e0       	ldi	r23, 0x08	; 8
   1c6a2:	c6 01       	movw	r24, r12
   1c6a4:	0e 94 a8 d8 	call	0x1b150	; 0x1b150 <lif_open_volume>
   1c6a8:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c6aa:	00 97       	sbiw	r24, 0x00	; 0
   1c6ac:	09 f4       	brne	.+2      	; 0x1c6b0 <lif_add_lif_file+0xb6>
   1c6ae:	0a c1       	rjmp	.+532    	; 0x1c8c4 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c6b0:	b5 01       	movw	r22, r10
   1c6b2:	0e 94 0d db 	call	0x1b61a	; 0x1b61a <lif_find_file>
    if(index == -1)
   1c6b6:	01 96       	adiw	r24, 0x01	; 1
   1c6b8:	b1 f4       	brne	.+44     	; 0x1c6e6 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c6ba:	bf 92       	push	r11
   1c6bc:	af 92       	push	r10
   1c6be:	8e ea       	ldi	r24, 0xAE	; 174
   1c6c0:	94 e3       	ldi	r25, 0x34	; 52
   1c6c2:	1f 92       	push	r1
   1c6c4:	9f 93       	push	r25
   1c6c6:	8f 93       	push	r24
   1c6c8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c6cc:	c4 01       	movw	r24, r8
   1c6ce:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c6d2:	0f 90       	pop	r0
   1c6d4:	0f 90       	pop	r0
   1c6d6:	0f 90       	pop	r0
   1c6d8:	0f 90       	pop	r0
   1c6da:	0f 90       	pop	r0
   1c6dc:	60 e0       	ldi	r22, 0x00	; 0
   1c6de:	70 e0       	ldi	r23, 0x00	; 0
   1c6e0:	80 e0       	ldi	r24, 0x00	; 0
   1c6e2:	90 e0       	ldi	r25, 0x00	; 0
   1c6e4:	09 c1       	rjmp	.+530    	; 0x1c8f8 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c6e6:	6a e7       	ldi	r22, 0x7A	; 122
   1c6e8:	78 e0       	ldi	r23, 0x08	; 8
   1c6ea:	c7 01       	movw	r24, r14
   1c6ec:	0e 94 a8 d8 	call	0x1b150	; 0x1b150 <lif_open_volume>
   1c6f0:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c6f2:	00 97       	sbiw	r24, 0x00	; 0
   1c6f4:	09 f4       	brne	.+2      	; 0x1c6f8 <lif_add_lif_file+0xfe>
   1c6f6:	e6 c0       	rjmp	.+460    	; 0x1c8c4 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c6f8:	f4 01       	movw	r30, r8
   1c6fa:	e0 5a       	subi	r30, 0xA0	; 160
   1c6fc:	ff 4f       	sbci	r31, 0xFF	; 255
   1c6fe:	40 81       	ld	r20, Z
   1c700:	51 81       	ldd	r21, Z+1	; 0x01
   1c702:	62 81       	ldd	r22, Z+2	; 0x02
   1c704:	73 81       	ldd	r23, Z+3	; 0x03
   1c706:	0e 94 43 d7 	call	0x1ae86	; 0x1ae86 <lif_newdir>
   1c70a:	c3 5f       	subi	r28, 0xF3	; 243
   1c70c:	de 4f       	sbci	r29, 0xFE	; 254
   1c70e:	99 83       	std	Y+1, r25	; 0x01
   1c710:	88 83       	st	Y, r24
   1c712:	cd 50       	subi	r28, 0x0D	; 13
   1c714:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c716:	01 96       	adiw	r24, 0x01	; 1
   1c718:	b9 f4       	brne	.+46     	; 0x1c748 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c71a:	df 92       	push	r13
   1c71c:	cf 92       	push	r12
   1c71e:	ff 92       	push	r15
   1c720:	ef 92       	push	r14
   1c722:	8e e7       	ldi	r24, 0x7E	; 126
   1c724:	94 e3       	ldi	r25, 0x34	; 52
   1c726:	1f 92       	push	r1
   1c728:	9f 93       	push	r25
   1c72a:	8f 93       	push	r24
   1c72c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c730:	c5 01       	movw	r24, r10
   1c732:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c736:	c4 01       	movw	r24, r8
   1c738:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c73c:	0f b6       	in	r0, 0x3f	; 63
   1c73e:	f8 94       	cli
   1c740:	de bf       	out	0x3e, r29	; 62
   1c742:	0f be       	out	0x3f, r0	; 63
   1c744:	cd bf       	out	0x3d, r28	; 61
   1c746:	be c0       	rjmp	.+380    	; 0x1c8c4 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c748:	c5 01       	movw	r24, r10
   1c74a:	84 5a       	subi	r24, 0xA4	; 164
   1c74c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c74e:	dc 01       	movw	r26, r24
   1c750:	4d 91       	ld	r20, X+
   1c752:	5d 91       	ld	r21, X+
   1c754:	6d 91       	ld	r22, X+
   1c756:	7c 91       	ld	r23, X
   1c758:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c75a:	21 e2       	ldi	r18, 0x21	; 33
   1c75c:	f4 01       	movw	r30, r8
   1c75e:	e1 5b       	subi	r30, 0xB1	; 177
   1c760:	ff 4f       	sbci	r31, 0xFF	; 255
   1c762:	1d 97       	sbiw	r26, 0x0d	; 13
   1c764:	01 90       	ld	r0, Z+
   1c766:	0d 92       	st	X+, r0
   1c768:	2a 95       	dec	r18
   1c76a:	e1 f7       	brne	.-8      	; 0x1c764 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c76c:	fc 01       	movw	r30, r24
   1c76e:	40 83       	st	Z, r20
   1c770:	51 83       	std	Z+1, r21	; 0x01
   1c772:	62 83       	std	Z+2, r22	; 0x02
   1c774:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c776:	b6 2f       	mov	r27, r22
   1c778:	a5 2f       	mov	r26, r21
   1c77a:	94 2f       	mov	r25, r20
   1c77c:	88 27       	eor	r24, r24
   1c77e:	cb 5f       	subi	r28, 0xFB	; 251
   1c780:	de 4f       	sbci	r29, 0xFE	; 254
   1c782:	88 83       	st	Y, r24
   1c784:	99 83       	std	Y+1, r25	; 0x01
   1c786:	aa 83       	std	Y+2, r26	; 0x02
   1c788:	bb 83       	std	Y+3, r27	; 0x03
   1c78a:	c5 50       	subi	r28, 0x05	; 5
   1c78c:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c78e:	f4 01       	movw	r30, r8
   1c790:	e4 5a       	subi	r30, 0xA4	; 164
   1c792:	ff 4f       	sbci	r31, 0xFF	; 255
   1c794:	80 81       	ld	r24, Z
   1c796:	91 81       	ldd	r25, Z+1	; 0x01
   1c798:	a2 81       	ldd	r26, Z+2	; 0x02
   1c79a:	b3 81       	ldd	r27, Z+3	; 0x03
   1c79c:	22 27       	eor	r18, r18
   1c79e:	38 2f       	mov	r19, r24
   1c7a0:	49 2f       	mov	r20, r25
   1c7a2:	5a 2f       	mov	r21, r26
   1c7a4:	c7 5f       	subi	r28, 0xF7	; 247
   1c7a6:	de 4f       	sbci	r29, 0xFE	; 254
   1c7a8:	28 83       	st	Y, r18
   1c7aa:	39 83       	std	Y+1, r19	; 0x01
   1c7ac:	4a 83       	std	Y+2, r20	; 0x02
   1c7ae:	5b 83       	std	Y+3, r21	; 0x03
   1c7b0:	c9 50       	subi	r28, 0x09	; 9
   1c7b2:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c7b4:	21 2c       	mov	r2, r1
   1c7b6:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c7b8:	c1 2c       	mov	r12, r1
   1c7ba:	d1 2c       	mov	r13, r1
   1c7bc:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c7be:	a5 01       	movw	r20, r10
   1c7c0:	40 5a       	subi	r20, 0xA0	; 160
   1c7c2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7c4:	cd 5e       	subi	r28, 0xED	; 237
   1c7c6:	de 4f       	sbci	r29, 0xFE	; 254
   1c7c8:	59 83       	std	Y+1, r21	; 0x01
   1c7ca:	48 83       	st	Y, r20
   1c7cc:	c3 51       	subi	r28, 0x13	; 19
   1c7ce:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1c7d0:	81 e7       	ldi	r24, 0x71	; 113
   1c7d2:	94 e3       	ldi	r25, 0x34	; 52
   1c7d4:	2c 01       	movw	r4, r24
   1c7d6:	c7 5f       	subi	r28, 0xF7	; 247
   1c7d8:	de 4f       	sbci	r29, 0xFE	; 254
   1c7da:	28 81       	ld	r18, Y
   1c7dc:	39 81       	ldd	r19, Y+1	; 0x01
   1c7de:	4a 81       	ldd	r20, Y+2	; 0x02
   1c7e0:	5b 81       	ldd	r21, Y+3	; 0x03
   1c7e2:	c9 50       	subi	r28, 0x09	; 9
   1c7e4:	d1 40       	sbci	r29, 0x01	; 1
   1c7e6:	2c 0d       	add	r18, r12
   1c7e8:	3d 1d       	adc	r19, r13
   1c7ea:	4e 1d       	adc	r20, r14
   1c7ec:	5f 1d       	adc	r21, r15
   1c7ee:	cb 5f       	subi	r28, 0xFB	; 251
   1c7f0:	de 4f       	sbci	r29, 0xFE	; 254
   1c7f2:	88 81       	ld	r24, Y
   1c7f4:	99 81       	ldd	r25, Y+1	; 0x01
   1c7f6:	aa 81       	ldd	r26, Y+2	; 0x02
   1c7f8:	bb 81       	ldd	r27, Y+3	; 0x03
   1c7fa:	c5 50       	subi	r28, 0x05	; 5
   1c7fc:	d1 40       	sbci	r29, 0x01	; 1
   1c7fe:	8c 0d       	add	r24, r12
   1c800:	9d 1d       	adc	r25, r13
   1c802:	ae 1d       	adc	r26, r14
   1c804:	bf 1d       	adc	r27, r15
   1c806:	c1 5f       	subi	r28, 0xF1	; 241
   1c808:	de 4f       	sbci	r29, 0xFE	; 254
   1c80a:	88 83       	st	Y, r24
   1c80c:	99 83       	std	Y+1, r25	; 0x01
   1c80e:	aa 83       	std	Y+2, r26	; 0x02
   1c810:	bb 83       	std	Y+3, r27	; 0x03
   1c812:	cf 50       	subi	r28, 0x0F	; 15
   1c814:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c816:	cd 5e       	subi	r28, 0xED	; 237
   1c818:	de 4f       	sbci	r29, 0xFE	; 254
   1c81a:	a8 81       	ld	r26, Y
   1c81c:	b9 81       	ldd	r27, Y+1	; 0x01
   1c81e:	c3 51       	subi	r28, 0x13	; 19
   1c820:	d1 40       	sbci	r29, 0x01	; 1
   1c822:	8d 91       	ld	r24, X+
   1c824:	9c 91       	ld	r25, X
   1c826:	28 16       	cp	r2, r24
   1c828:	39 06       	cpc	r3, r25
   1c82a:	dc f5       	brge	.+118    	; 0x1c8a2 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1c82c:	00 e0       	ldi	r16, 0x00	; 0
   1c82e:	11 e0       	ldi	r17, 0x01	; 1
   1c830:	be 01       	movw	r22, r28
   1c832:	6f 5f       	subi	r22, 0xFF	; 255
   1c834:	7f 4f       	sbci	r23, 0xFF	; 255
   1c836:	c4 01       	movw	r24, r8
   1c838:	0e 94 6c c9 	call	0x192d8	; 0x192d8 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c83c:	6f 3f       	cpi	r22, 0xFF	; 255
   1c83e:	71 05       	cpc	r23, r1
   1c840:	a9 f0       	breq	.+42     	; 0x1c86c <lif_add_lif_file+0x272>
   1c842:	a4 f0       	brlt	.+40     	; 0x1c86c <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c844:	00 e0       	ldi	r16, 0x00	; 0
   1c846:	11 e0       	ldi	r17, 0x01	; 1
   1c848:	c1 5f       	subi	r28, 0xF1	; 241
   1c84a:	de 4f       	sbci	r29, 0xFE	; 254
   1c84c:	28 81       	ld	r18, Y
   1c84e:	39 81       	ldd	r19, Y+1	; 0x01
   1c850:	4a 81       	ldd	r20, Y+2	; 0x02
   1c852:	5b 81       	ldd	r21, Y+3	; 0x03
   1c854:	cf 50       	subi	r28, 0x0F	; 15
   1c856:	d1 40       	sbci	r29, 0x01	; 1
   1c858:	be 01       	movw	r22, r28
   1c85a:	6f 5f       	subi	r22, 0xFF	; 255
   1c85c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c85e:	c5 01       	movw	r24, r10
   1c860:	0e 94 c5 c9 	call	0x1938a	; 0x1938a <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1c864:	8f 3f       	cpi	r24, 0xFF	; 255
   1c866:	91 05       	cpc	r25, r1
   1c868:	09 f0       	breq	.+2      	; 0x1c86c <lif_add_lif_file+0x272>
   1c86a:	2c f4       	brge	.+10     	; 0x1c876 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c86c:	c5 01       	movw	r24, r10
   1c86e:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1c872:	c4 01       	movw	r24, r8
   1c874:	25 c0       	rjmp	.+74     	; 0x1c8c0 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1c876:	5f ef       	ldi	r21, 0xFF	; 255
   1c878:	d5 1a       	sub	r13, r21
   1c87a:	e5 0a       	sbc	r14, r21
   1c87c:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1c87e:	ff 92       	push	r15
   1c880:	ef 92       	push	r14
   1c882:	df 92       	push	r13
   1c884:	cf 92       	push	r12
   1c886:	1f 92       	push	r1
   1c888:	5f 92       	push	r5
   1c88a:	4f 92       	push	r4
   1c88c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c890:	8f ef       	ldi	r24, 0xFF	; 255
   1c892:	28 1a       	sub	r2, r24
   1c894:	38 0a       	sbc	r3, r24
   1c896:	0f b6       	in	r0, 0x3f	; 63
   1c898:	f8 94       	cli
   1c89a:	de bf       	out	0x3e, r29	; 62
   1c89c:	0f be       	out	0x3f, r0	; 63
   1c89e:	cd bf       	out	0x3d, r28	; 61
   1c8a0:	9a cf       	rjmp	.-204    	; 0x1c7d6 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8a2:	c4 01       	movw	r24, r8
   1c8a4:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1c8a8:	c3 5f       	subi	r28, 0xF3	; 243
   1c8aa:	de 4f       	sbci	r29, 0xFE	; 254
   1c8ac:	68 81       	ld	r22, Y
   1c8ae:	79 81       	ldd	r23, Y+1	; 0x01
   1c8b0:	cd 50       	subi	r28, 0x0D	; 13
   1c8b2:	d1 40       	sbci	r29, 0x01	; 1
   1c8b4:	c5 01       	movw	r24, r10
   1c8b6:	0e 94 ee d2 	call	0x1a5dc	; 0x1a5dc <lif_writedirindex>
   1c8ba:	89 2b       	or	r24, r25
   1c8bc:	41 f4       	brne	.+16     	; 0x1c8ce <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8be:	c5 01       	movw	r24, r10
   1c8c0:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1c8c4:	6f ef       	ldi	r22, 0xFF	; 255
   1c8c6:	7f ef       	ldi	r23, 0xFF	; 255
   1c8c8:	8f ef       	ldi	r24, 0xFF	; 255
   1c8ca:	9f ef       	ldi	r25, 0xFF	; 255
   1c8cc:	15 c0       	rjmp	.+42     	; 0x1c8f8 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8ce:	c5 01       	movw	r24, r10
   1c8d0:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1c8d4:	ff 92       	push	r15
   1c8d6:	ef 92       	push	r14
   1c8d8:	df 92       	push	r13
   1c8da:	cf 92       	push	r12
   1c8dc:	84 e6       	ldi	r24, 0x64	; 100
   1c8de:	94 e3       	ldi	r25, 0x34	; 52
   1c8e0:	1f 92       	push	r1
   1c8e2:	9f 93       	push	r25
   1c8e4:	8f 93       	push	r24
   1c8e6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(bytes);
   1c8ea:	0f b6       	in	r0, 0x3f	; 63
   1c8ec:	f8 94       	cli
   1c8ee:	de bf       	out	0x3e, r29	; 62
   1c8f0:	0f be       	out	0x3f, r0	; 63
   1c8f2:	cd bf       	out	0x3d, r28	; 61
   1c8f4:	b6 01       	movw	r22, r12
   1c8f6:	c7 01       	movw	r24, r14
}
   1c8f8:	cc 5e       	subi	r28, 0xEC	; 236
   1c8fa:	de 4f       	sbci	r29, 0xFE	; 254
   1c8fc:	0f b6       	in	r0, 0x3f	; 63
   1c8fe:	f8 94       	cli
   1c900:	de bf       	out	0x3e, r29	; 62
   1c902:	0f be       	out	0x3f, r0	; 63
   1c904:	cd bf       	out	0x3d, r28	; 61
   1c906:	df 91       	pop	r29
   1c908:	cf 91       	pop	r28
   1c90a:	1f 91       	pop	r17
   1c90c:	0f 91       	pop	r16
   1c90e:	ff 90       	pop	r15
   1c910:	ef 90       	pop	r14
   1c912:	df 90       	pop	r13
   1c914:	cf 90       	pop	r12
   1c916:	bf 90       	pop	r11
   1c918:	af 90       	pop	r10
   1c91a:	9f 90       	pop	r9
   1c91c:	8f 90       	pop	r8
   1c91e:	6f 90       	pop	r6
   1c920:	5f 90       	pop	r5
   1c922:	4f 90       	pop	r4
   1c924:	3f 90       	pop	r3
   1c926:	2f 90       	pop	r2
   1c928:	08 95       	ret

0001c92a <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1c92a:	ef 92       	push	r14
   1c92c:	ff 92       	push	r15
   1c92e:	0f 93       	push	r16
   1c930:	1f 93       	push	r17
   1c932:	cf 93       	push	r28
   1c934:	df 93       	push	r29
   1c936:	7c 01       	movw	r14, r24
   1c938:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1c93a:	fc 01       	movw	r30, r24
   1c93c:	80 81       	ld	r24, Z
   1c93e:	81 11       	cpse	r24, r1
   1c940:	03 c0       	rjmp	.+6      	; 0x1c948 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1c942:	8f e3       	ldi	r24, 0x3F	; 63
   1c944:	94 e3       	ldi	r25, 0x34	; 52
   1c946:	06 c0       	rjmp	.+12     	; 0x1c954 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1c948:	fb 01       	movw	r30, r22
   1c94a:	80 81       	ld	r24, Z
   1c94c:	81 11       	cpse	r24, r1
   1c94e:	0b c0       	rjmp	.+22     	; 0x1c966 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1c950:	8f e1       	ldi	r24, 0x1F	; 31
   1c952:	94 e3       	ldi	r25, 0x34	; 52
   1c954:	1f 92       	push	r1
   1c956:	9f 93       	push	r25
   1c958:	8f 93       	push	r24
   1c95a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1c95e:	0f 90       	pop	r0
   1c960:	0f 90       	pop	r0
   1c962:	0f 90       	pop	r0
   1c964:	74 c0       	rjmp	.+232    	; 0x1ca4e <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1c966:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c96a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c96e:	92 ff       	sbrs	r25, 2
   1c970:	13 c0       	rjmp	.+38     	; 0x1c998 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1c972:	1f 93       	push	r17
   1c974:	6f 93       	push	r22
   1c976:	ff 92       	push	r15
   1c978:	ef 92       	push	r14
   1c97a:	80 e0       	ldi	r24, 0x00	; 0
   1c97c:	94 e3       	ldi	r25, 0x34	; 52
   1c97e:	1f 92       	push	r1
   1c980:	9f 93       	push	r25
   1c982:	8f 93       	push	r24
   1c984:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1c988:	8d b7       	in	r24, 0x3d	; 61
   1c98a:	9e b7       	in	r25, 0x3e	; 62
   1c98c:	07 96       	adiw	r24, 0x07	; 7
   1c98e:	0f b6       	in	r0, 0x3f	; 63
   1c990:	f8 94       	cli
   1c992:	9e bf       	out	0x3e, r25	; 62
   1c994:	0f be       	out	0x3f, r0	; 63
   1c996:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1c998:	6a e7       	ldi	r22, 0x7A	; 122
   1c99a:	78 e0       	ldi	r23, 0x08	; 8
   1c99c:	c7 01       	movw	r24, r14
   1c99e:	0e 94 a8 d8 	call	0x1b150	; 0x1b150 <lif_open_volume>
   1c9a2:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c9a4:	00 97       	sbiw	r24, 0x00	; 0
   1c9a6:	09 f4       	brne	.+2      	; 0x1c9aa <lif_del_file+0x80>
   1c9a8:	52 c0       	rjmp	.+164    	; 0x1ca4e <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1c9aa:	b8 01       	movw	r22, r16
   1c9ac:	0e 94 0d db 	call	0x1b61a	; 0x1b61a <lif_find_file>
    if(index == -1)
   1c9b0:	8f 3f       	cpi	r24, 0xFF	; 255
   1c9b2:	ef ef       	ldi	r30, 0xFF	; 255
   1c9b4:	9e 07       	cpc	r25, r30
   1c9b6:	c9 f4       	brne	.+50     	; 0x1c9ea <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c9b8:	ce 01       	movw	r24, r28
   1c9ba:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1c9be:	1f 93       	push	r17
   1c9c0:	0f 93       	push	r16
   1c9c2:	ff 92       	push	r15
   1c9c4:	ef 92       	push	r14
   1c9c6:	88 ed       	ldi	r24, 0xD8	; 216
   1c9c8:	93 e3       	ldi	r25, 0x33	; 51
   1c9ca:	1f 92       	push	r1
   1c9cc:	9f 93       	push	r25
   1c9ce:	8f 93       	push	r24
   1c9d0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(0);
   1c9d4:	8d b7       	in	r24, 0x3d	; 61
   1c9d6:	9e b7       	in	r25, 0x3e	; 62
   1c9d8:	07 96       	adiw	r24, 0x07	; 7
   1c9da:	0f b6       	in	r0, 0x3f	; 63
   1c9dc:	f8 94       	cli
   1c9de:	9e bf       	out	0x3e, r25	; 62
   1c9e0:	0f be       	out	0x3f, r0	; 63
   1c9e2:	8d bf       	out	0x3d, r24	; 61
   1c9e4:	80 e0       	ldi	r24, 0x00	; 0
   1c9e6:	90 e0       	ldi	r25, 0x00	; 0
   1c9e8:	34 c0       	rjmp	.+104    	; 0x1ca52 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1c9ea:	2a a1       	ldd	r18, Y+34	; 0x22
   1c9ec:	3b a1       	ldd	r19, Y+35	; 0x23
   1c9ee:	21 50       	subi	r18, 0x01	; 1
   1c9f0:	31 09       	sbc	r19, r1
   1c9f2:	fe 01       	movw	r30, r28
   1c9f4:	e6 5a       	subi	r30, 0xA6	; 166
   1c9f6:	ff 4f       	sbci	r31, 0xFF	; 255
   1c9f8:	82 17       	cp	r24, r18
   1c9fa:	93 07       	cpc	r25, r19
   1c9fc:	2c f0       	brlt	.+10     	; 0x1ca08 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1c9fe:	2f ef       	ldi	r18, 0xFF	; 255
   1ca00:	3f ef       	ldi	r19, 0xFF	; 255
   1ca02:	31 83       	std	Z+1, r19	; 0x01
   1ca04:	20 83       	st	Z, r18
   1ca06:	02 c0       	rjmp	.+4      	; 0x1ca0c <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1ca08:	11 82       	std	Z+1, r1	; 0x01
   1ca0a:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1ca0c:	bc 01       	movw	r22, r24
   1ca0e:	ce 01       	movw	r24, r28
   1ca10:	0e 94 ee d2 	call	0x1a5dc	; 0x1a5dc <lif_writedirindex>
   1ca14:	89 2b       	or	r24, r25
   1ca16:	21 f4       	brne	.+8      	; 0x1ca20 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ca18:	ce 01       	movw	r24, r28
   1ca1a:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1ca1e:	17 c0       	rjmp	.+46     	; 0x1ca4e <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1ca20:	ce 01       	movw	r24, r28
   1ca22:	0e 94 62 d3 	call	0x1a6c4	; 0x1a6c4 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ca26:	ce 01       	movw	r24, r28
   1ca28:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1ca2c:	1f 93       	push	r17
   1ca2e:	0f 93       	push	r16
   1ca30:	89 ec       	ldi	r24, 0xC9	; 201
   1ca32:	93 e3       	ldi	r25, 0x33	; 51
   1ca34:	1f 92       	push	r1
   1ca36:	9f 93       	push	r25
   1ca38:	8f 93       	push	r24
   1ca3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    return(1);
   1ca3e:	0f 90       	pop	r0
   1ca40:	0f 90       	pop	r0
   1ca42:	0f 90       	pop	r0
   1ca44:	0f 90       	pop	r0
   1ca46:	0f 90       	pop	r0
   1ca48:	81 e0       	ldi	r24, 0x01	; 1
   1ca4a:	90 e0       	ldi	r25, 0x00	; 0
   1ca4c:	02 c0       	rjmp	.+4      	; 0x1ca52 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1ca4e:	8f ef       	ldi	r24, 0xFF	; 255
   1ca50:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1ca52:	cd b7       	in	r28, 0x3d	; 61
   1ca54:	de b7       	in	r29, 0x3e	; 62
   1ca56:	e6 e0       	ldi	r30, 0x06	; 6
   1ca58:	16 c6       	rjmp	.+3116   	; 0x1d686 <__epilogue_restores__+0x18>

0001ca5a <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1ca5a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca5c:	b0 e0       	ldi	r27, 0x00	; 0
   1ca5e:	e2 e3       	ldi	r30, 0x32	; 50
   1ca60:	f5 ee       	ldi	r31, 0xE5	; 229
   1ca62:	f1 c5       	rjmp	.+3042   	; 0x1d646 <__prologue_saves__+0x10>
   1ca64:	6c 01       	movw	r12, r24
   1ca66:	8b 01       	movw	r16, r22
   1ca68:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1ca6a:	fc 01       	movw	r30, r24
   1ca6c:	80 81       	ld	r24, Z
   1ca6e:	81 11       	cpse	r24, r1
   1ca70:	03 c0       	rjmp	.+6      	; 0x1ca78 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1ca72:	81 ea       	ldi	r24, 0xA1	; 161
   1ca74:	93 e3       	ldi	r25, 0x33	; 51
   1ca76:	06 c0       	rjmp	.+12     	; 0x1ca84 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1ca78:	fb 01       	movw	r30, r22
   1ca7a:	80 81       	ld	r24, Z
   1ca7c:	81 11       	cpse	r24, r1
   1ca7e:	0b c0       	rjmp	.+22     	; 0x1ca96 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1ca80:	8a e7       	ldi	r24, 0x7A	; 122
   1ca82:	93 e3       	ldi	r25, 0x33	; 51
   1ca84:	1f 92       	push	r1
   1ca86:	9f 93       	push	r25
   1ca88:	8f 93       	push	r24
   1ca8a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1ca8e:	0f 90       	pop	r0
   1ca90:	0f 90       	pop	r0
   1ca92:	0f 90       	pop	r0
   1ca94:	62 c0       	rjmp	.+196    	; 0x1cb5a <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1ca96:	fa 01       	movw	r30, r20
   1ca98:	80 81       	ld	r24, Z
   1ca9a:	81 11       	cpse	r24, r1
   1ca9c:	03 c0       	rjmp	.+6      	; 0x1caa4 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1ca9e:	83 e5       	ldi	r24, 0x53	; 83
   1caa0:	93 e3       	ldi	r25, 0x33	; 51
   1caa2:	f0 cf       	rjmp	.-32     	; 0x1ca84 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1caa4:	ca 01       	movw	r24, r20
   1caa6:	0e 94 78 ca 	call	0x194f0	; 0x194f0 <lif_checkname>
   1caaa:	89 2b       	or	r24, r25
   1caac:	19 f4       	brne	.+6      	; 0x1cab4 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1caae:	8d e1       	ldi	r24, 0x1D	; 29
   1cab0:	93 e3       	ldi	r25, 0x33	; 51
   1cab2:	e8 cf       	rjmp	.-48     	; 0x1ca84 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1cab4:	6a e7       	ldi	r22, 0x7A	; 122
   1cab6:	78 e0       	ldi	r23, 0x08	; 8
   1cab8:	c6 01       	movw	r24, r12
   1caba:	0e 94 a8 d8 	call	0x1b150	; 0x1b150 <lif_open_volume>
   1cabe:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1cac0:	00 97       	sbiw	r24, 0x00	; 0
   1cac2:	09 f4       	brne	.+2      	; 0x1cac6 <lif_rename_file+0x6c>
   1cac4:	4a c0       	rjmp	.+148    	; 0x1cb5a <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1cac6:	b8 01       	movw	r22, r16
   1cac8:	0e 94 0d db 	call	0x1b61a	; 0x1b61a <lif_find_file>
   1cacc:	5c 01       	movw	r10, r24
    if(index == -1)
   1cace:	01 96       	adiw	r24, 0x01	; 1
   1cad0:	c9 f4       	brne	.+50     	; 0x1cb04 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1cad2:	1f 93       	push	r17
   1cad4:	0f 93       	push	r16
   1cad6:	df 92       	push	r13
   1cad8:	cf 92       	push	r12
   1cada:	84 ef       	ldi	r24, 0xF4	; 244
   1cadc:	92 e3       	ldi	r25, 0x32	; 50
   1cade:	1f 92       	push	r1
   1cae0:	9f 93       	push	r25
   1cae2:	8f 93       	push	r24
   1cae4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cae8:	ce 01       	movw	r24, r28
   1caea:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1caee:	8d b7       	in	r24, 0x3d	; 61
   1caf0:	9e b7       	in	r25, 0x3e	; 62
   1caf2:	07 96       	adiw	r24, 0x07	; 7
   1caf4:	0f b6       	in	r0, 0x3f	; 63
   1caf6:	f8 94       	cli
   1caf8:	9e bf       	out	0x3e, r25	; 62
   1cafa:	0f be       	out	0x3f, r0	; 63
   1cafc:	8d bf       	out	0x3d, r24	; 61
   1cafe:	80 e0       	ldi	r24, 0x00	; 0
   1cb00:	90 e0       	ldi	r25, 0x00	; 0
   1cb02:	2d c0       	rjmp	.+90     	; 0x1cb5e <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1cb04:	4a e0       	ldi	r20, 0x0A	; 10
   1cb06:	50 e0       	ldi	r21, 0x00	; 0
   1cb08:	b7 01       	movw	r22, r14
   1cb0a:	ce 01       	movw	r24, r28
   1cb0c:	81 5b       	subi	r24, 0xB1	; 177
   1cb0e:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb10:	0e 94 b2 ca 	call	0x19564	; 0x19564 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1cb14:	b5 01       	movw	r22, r10
   1cb16:	ce 01       	movw	r24, r28
   1cb18:	0e 94 ee d2 	call	0x1a5dc	; 0x1a5dc <lif_writedirindex>
   1cb1c:	89 2b       	or	r24, r25
   1cb1e:	21 f4       	brne	.+8      	; 0x1cb28 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cb20:	ce 01       	movw	r24, r28
   1cb22:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
   1cb26:	19 c0       	rjmp	.+50     	; 0x1cb5a <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1cb28:	ff 92       	push	r15
   1cb2a:	ef 92       	push	r14
   1cb2c:	1f 93       	push	r17
   1cb2e:	0f 93       	push	r16
   1cb30:	8d ed       	ldi	r24, 0xDD	; 221
   1cb32:	92 e3       	ldi	r25, 0x32	; 50
   1cb34:	1f 92       	push	r1
   1cb36:	9f 93       	push	r25
   1cb38:	8f 93       	push	r24
   1cb3a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cb3e:	ce 01       	movw	r24, r28
   1cb40:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1cb44:	ed b7       	in	r30, 0x3d	; 61
   1cb46:	fe b7       	in	r31, 0x3e	; 62
   1cb48:	37 96       	adiw	r30, 0x07	; 7
   1cb4a:	0f b6       	in	r0, 0x3f	; 63
   1cb4c:	f8 94       	cli
   1cb4e:	fe bf       	out	0x3e, r31	; 62
   1cb50:	0f be       	out	0x3f, r0	; 63
   1cb52:	ed bf       	out	0x3d, r30	; 61
   1cb54:	81 e0       	ldi	r24, 0x01	; 1
   1cb56:	90 e0       	ldi	r25, 0x00	; 0
   1cb58:	02 c0       	rjmp	.+4      	; 0x1cb5e <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1cb5a:	8f ef       	ldi	r24, 0xFF	; 255
   1cb5c:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1cb5e:	cd b7       	in	r28, 0x3d	; 61
   1cb60:	de b7       	in	r29, 0x3e	; 62
   1cb62:	ea e0       	ldi	r30, 0x0A	; 10
   1cb64:	8c c5       	rjmp	.+2840   	; 0x1d67e <__epilogue_restores__+0x10>

0001cb66 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1cb66:	4f 92       	push	r4
   1cb68:	5f 92       	push	r5
   1cb6a:	6f 92       	push	r6
   1cb6c:	7f 92       	push	r7
   1cb6e:	af 92       	push	r10
   1cb70:	bf 92       	push	r11
   1cb72:	cf 92       	push	r12
   1cb74:	df 92       	push	r13
   1cb76:	ef 92       	push	r14
   1cb78:	ff 92       	push	r15
   1cb7a:	0f 93       	push	r16
   1cb7c:	1f 93       	push	r17
   1cb7e:	cf 93       	push	r28
   1cb80:	df 93       	push	r29
   1cb82:	27 01       	movw	r4, r14
   1cb84:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1cb86:	dc 01       	movw	r26, r24
   1cb88:	ec 91       	ld	r30, X
   1cb8a:	e1 11       	cpse	r30, r1
   1cb8c:	03 c0       	rjmp	.+6      	; 0x1cb94 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1cb8e:	84 eb       	ldi	r24, 0xB4	; 180
   1cb90:	92 e3       	ldi	r25, 0x32	; 50
   1cb92:	16 c0       	rjmp	.+44     	; 0x1cbc0 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1cb94:	db 01       	movw	r26, r22
   1cb96:	ec 91       	ld	r30, X
   1cb98:	e1 11       	cpse	r30, r1
   1cb9a:	03 c0       	rjmp	.+6      	; 0x1cba2 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1cb9c:	8f e8       	ldi	r24, 0x8F	; 143
   1cb9e:	92 e3       	ldi	r25, 0x32	; 50
   1cba0:	0f c0       	rjmp	.+30     	; 0x1cbc0 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1cba2:	21 15       	cp	r18, r1
   1cba4:	31 05       	cpc	r19, r1
   1cba6:	41 05       	cpc	r20, r1
   1cba8:	51 05       	cpc	r21, r1
   1cbaa:	19 f4       	brne	.+6      	; 0x1cbb2 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1cbac:	8c e6       	ldi	r24, 0x6C	; 108
   1cbae:	92 e3       	ldi	r25, 0x32	; 50
   1cbb0:	07 c0       	rjmp	.+14     	; 0x1cbc0 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1cbb2:	e1 14       	cp	r14, r1
   1cbb4:	f1 04       	cpc	r15, r1
   1cbb6:	01 05       	cpc	r16, r1
   1cbb8:	11 05       	cpc	r17, r1
   1cbba:	59 f4       	brne	.+22     	; 0x1cbd2 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1cbbc:	8c e4       	ldi	r24, 0x4C	; 76
   1cbbe:	92 e3       	ldi	r25, 0x32	; 50
   1cbc0:	1f 92       	push	r1
   1cbc2:	9f 93       	push	r25
   1cbc4:	8f 93       	push	r24
   1cbc6:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
        return(-1);
   1cbca:	0f 90       	pop	r0
   1cbcc:	0f 90       	pop	r0
   1cbce:	0f 90       	pop	r0
   1cbd0:	30 c0       	rjmp	.+96     	; 0x1cc32 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1cbd2:	67 01       	movw	r12, r14
   1cbd4:	78 01       	movw	r14, r16
   1cbd6:	b2 e0       	ldi	r27, 0x02	; 2
   1cbd8:	cb 1a       	sub	r12, r27
   1cbda:	d1 08       	sbc	r13, r1
   1cbdc:	e1 08       	sbc	r14, r1
   1cbde:	f1 08       	sbc	r15, r1
   1cbe0:	56 01       	movw	r10, r12
   1cbe2:	67 01       	movw	r12, r14
   1cbe4:	a2 1a       	sub	r10, r18
   1cbe6:	b3 0a       	sbc	r11, r19
   1cbe8:	c4 0a       	sbc	r12, r20
   1cbea:	d5 0a       	sbc	r13, r21
   1cbec:	79 01       	movw	r14, r18
   1cbee:	8a 01       	movw	r16, r20
   1cbf0:	22 e0       	ldi	r18, 0x02	; 2
   1cbf2:	30 e0       	ldi	r19, 0x00	; 0
   1cbf4:	40 e0       	ldi	r20, 0x00	; 0
   1cbf6:	50 e0       	ldi	r21, 0x00	; 0
   1cbf8:	0e 94 6a d4 	call	0x1a8d4	; 0x1a8d4 <lif_create_volume>
    if(LIF == NULL)
   1cbfc:	00 97       	sbiw	r24, 0x00	; 0
   1cbfe:	c9 f0       	breq	.+50     	; 0x1cc32 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1cc00:	0e 94 04 d2 	call	0x1a408	; 0x1a408 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1cc04:	82 01       	movw	r16, r4
   1cc06:	d6 2d       	mov	r29, r6
   1cc08:	c7 2d       	mov	r28, r7
   1cc0a:	7f 92       	push	r7
   1cc0c:	6f 92       	push	r6
   1cc0e:	5f 92       	push	r5
   1cc10:	4f 92       	push	r4
   1cc12:	8c e2       	ldi	r24, 0x2C	; 44
   1cc14:	92 e3       	ldi	r25, 0x32	; 50
   1cc16:	1f 92       	push	r1
   1cc18:	9f 93       	push	r25
   1cc1a:	8f 93       	push	r24
   1cc1c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    return(end);
   1cc20:	8d b7       	in	r24, 0x3d	; 61
   1cc22:	9e b7       	in	r25, 0x3e	; 62
   1cc24:	07 96       	adiw	r24, 0x07	; 7
   1cc26:	0f b6       	in	r0, 0x3f	; 63
   1cc28:	f8 94       	cli
   1cc2a:	9e bf       	out	0x3e, r25	; 62
   1cc2c:	0f be       	out	0x3f, r0	; 63
   1cc2e:	8d bf       	out	0x3d, r24	; 61
   1cc30:	04 c0       	rjmp	.+8      	; 0x1cc3a <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1cc32:	0f ef       	ldi	r16, 0xFF	; 255
   1cc34:	1f ef       	ldi	r17, 0xFF	; 255
   1cc36:	df ef       	ldi	r29, 0xFF	; 255
   1cc38:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1cc3a:	b8 01       	movw	r22, r16
   1cc3c:	8d 2f       	mov	r24, r29
   1cc3e:	9c 2f       	mov	r25, r28
   1cc40:	df 91       	pop	r29
   1cc42:	cf 91       	pop	r28
   1cc44:	1f 91       	pop	r17
   1cc46:	0f 91       	pop	r16
   1cc48:	ff 90       	pop	r15
   1cc4a:	ef 90       	pop	r14
   1cc4c:	df 90       	pop	r13
   1cc4e:	cf 90       	pop	r12
   1cc50:	bf 90       	pop	r11
   1cc52:	af 90       	pop	r10
   1cc54:	7f 90       	pop	r7
   1cc56:	6f 90       	pop	r6
   1cc58:	5f 90       	pop	r5
   1cc5a:	4f 90       	pop	r4
   1cc5c:	08 95       	ret

0001cc5e <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1cc5e:	a0 e0       	ldi	r26, 0x00	; 0
   1cc60:	b0 e0       	ldi	r27, 0x00	; 0
   1cc62:	e4 e3       	ldi	r30, 0x34	; 52
   1cc64:	f6 ee       	ldi	r31, 0xE6	; 230
   1cc66:	ed c4       	rjmp	.+2522   	; 0x1d642 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1cc68:	fb 01       	movw	r30, r22
   1cc6a:	20 81       	ld	r18, Z
   1cc6c:	31 81       	ldd	r19, Z+1	; 0x01
   1cc6e:	23 2b       	or	r18, r19
   1cc70:	59 f0       	breq	.+22     	; 0x1cc88 <lif_tests+0x2a>
   1cc72:	8b 01       	movw	r16, r22
   1cc74:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1cc76:	fb 01       	movw	r30, r22
   1cc78:	a2 80       	ldd	r10, Z+2	; 0x02
   1cc7a:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1cc7c:	02 97       	sbiw	r24, 0x02	; 2
   1cc7e:	3c f4       	brge	.+14     	; 0x1cc8e <lif_tests+0x30>
    {
        lif_help(1);
   1cc80:	81 e0       	ldi	r24, 0x01	; 1
   1cc82:	90 e0       	ldi	r25, 0x00	; 0
   1cc84:	0e 94 6f c8 	call	0x190de	; 0x190de <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1cc88:	80 e0       	ldi	r24, 0x00	; 0
   1cc8a:	90 e0       	ldi	r25, 0x00	; 0
   1cc8c:	0a c1       	rjmp	.+532    	; 0x1cea2 <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1cc8e:	a1 14       	cp	r10, r1
   1cc90:	b1 04       	cpc	r11, r1
   1cc92:	b1 f3       	breq	.-20     	; 0x1cc80 <lif_tests+0x22>
   1cc94:	6e e1       	ldi	r22, 0x1E	; 30
   1cc96:	76 e1       	ldi	r23, 0x16	; 22
   1cc98:	c5 01       	movw	r24, r10
   1cc9a:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1cc9e:	89 2b       	or	r24, r25
   1cca0:	79 f7       	brne	.-34     	; 0x1cc80 <lif_tests+0x22>
   1cca2:	6d e1       	ldi	r22, 0x1D	; 29
   1cca4:	76 e1       	ldi	r23, 0x16	; 22
   1cca6:	c5 01       	movw	r24, r10
   1cca8:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1ccac:	89 2b       	or	r24, r25
   1ccae:	41 f7       	brne	.-48     	; 0x1cc80 <lif_tests+0x22>
   1ccb0:	63 e2       	ldi	r22, 0x23	; 35
   1ccb2:	76 e1       	ldi	r23, 0x16	; 22
   1ccb4:	c5 01       	movw	r24, r10
   1ccb6:	0e 94 cb 32 	call	0x6596	; 0x6596 <MATCH>
   1ccba:	89 2b       	or	r24, r25
   1ccbc:	09 f7       	brne	.-62     	; 0x1cc80 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1ccbe:	94 01       	movw	r18, r8
   1ccc0:	42 e0       	ldi	r20, 0x02	; 2
   1ccc2:	50 e0       	ldi	r21, 0x00	; 0
   1ccc4:	66 e2       	ldi	r22, 0x26	; 38
   1ccc6:	76 e1       	ldi	r23, 0x16	; 22
   1ccc8:	c5 01       	movw	r24, r10
   1ccca:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1ccce:	89 2b       	or	r24, r25
   1ccd0:	69 f0       	breq	.+26     	; 0x1ccec <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1ccd2:	8f ef       	ldi	r24, 0xFF	; 255
   1ccd4:	9f ef       	ldi	r25, 0xFF	; 255
   1ccd6:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1ccda:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1ccde:	f8 01       	movw	r30, r16
   1cce0:	a4 80       	ldd	r10, Z+4	; 0x04
   1cce2:	b5 80       	ldd	r11, Z+5	; 0x05
   1cce4:	f3 e0       	ldi	r31, 0x03	; 3
   1cce6:	ef 2e       	mov	r14, r31
   1cce8:	f1 2c       	mov	r15, r1
   1ccea:	03 c0       	rjmp	.+6      	; 0x1ccf2 <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1ccec:	e2 e0       	ldi	r30, 0x02	; 2
   1ccee:	ee 2e       	mov	r14, r30
   1ccf0:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1ccf2:	67 01       	movw	r12, r14
   1ccf4:	f3 e0       	ldi	r31, 0x03	; 3
   1ccf6:	cf 0e       	add	r12, r31
   1ccf8:	d1 1c       	adc	r13, r1
   1ccfa:	94 01       	movw	r18, r8
   1ccfc:	a6 01       	movw	r20, r12
   1ccfe:	69 e2       	ldi	r22, 0x29	; 41
   1cd00:	76 e1       	ldi	r23, 0x16	; 22
   1cd02:	c5 01       	movw	r24, r10
   1cd04:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1cd08:	e7 01       	movw	r28, r14
   1cd0a:	22 96       	adiw	r28, 0x02	; 2
   1cd0c:	89 2b       	or	r24, r25
   1cd0e:	79 f0       	breq	.+30     	; 0x1cd2e <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1cd10:	cc 0f       	add	r28, r28
   1cd12:	dd 1f       	adc	r29, r29
   1cd14:	c0 0f       	add	r28, r16
   1cd16:	d1 1f       	adc	r29, r17
   1cd18:	48 81       	ld	r20, Y
   1cd1a:	59 81       	ldd	r21, Y+1	; 0x01
   1cd1c:	fe 01       	movw	r30, r28
   1cd1e:	32 97       	sbiw	r30, 0x02	; 2
   1cd20:	60 81       	ld	r22, Z
   1cd22:	71 81       	ldd	r23, Z+1	; 0x01
   1cd24:	24 97       	sbiw	r28, 0x04	; 4
   1cd26:	88 81       	ld	r24, Y
   1cd28:	99 81       	ldd	r25, Y+1	; 0x01
   1cd2a:	67 dc       	rcall	.-1842   	; 0x1c5fa <lif_add_lif_file>
   1cd2c:	b8 c0       	rjmp	.+368    	; 0x1ce9e <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1cd2e:	94 01       	movw	r18, r8
   1cd30:	a6 01       	movw	r20, r12
   1cd32:	60 e3       	ldi	r22, 0x30	; 48
   1cd34:	76 e1       	ldi	r23, 0x16	; 22
   1cd36:	c5 01       	movw	r24, r10
   1cd38:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1cd3c:	89 2b       	or	r24, r25
   1cd3e:	81 f0       	breq	.+32     	; 0x1cd60 <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1cd40:	cc 0f       	add	r28, r28
   1cd42:	dd 1f       	adc	r29, r29
   1cd44:	c0 0f       	add	r28, r16
   1cd46:	d1 1f       	adc	r29, r17
   1cd48:	48 81       	ld	r20, Y
   1cd4a:	59 81       	ldd	r21, Y+1	; 0x01
   1cd4c:	fe 01       	movw	r30, r28
   1cd4e:	32 97       	sbiw	r30, 0x02	; 2
   1cd50:	60 81       	ld	r22, Z
   1cd52:	71 81       	ldd	r23, Z+1	; 0x01
   1cd54:	24 97       	sbiw	r28, 0x04	; 4
   1cd56:	88 81       	ld	r24, Y
   1cd58:	99 81       	ldd	r25, Y+1	; 0x01
   1cd5a:	0e 94 91 dd 	call	0x1bb22	; 0x1bb22 <lif_add_ascii_file_as_e010>
   1cd5e:	9f c0       	rjmp	.+318    	; 0x1ce9e <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1cd60:	94 01       	movw	r18, r8
   1cd62:	ae 01       	movw	r20, r28
   1cd64:	64 e3       	ldi	r22, 0x34	; 52
   1cd66:	76 e1       	ldi	r23, 0x16	; 22
   1cd68:	c5 01       	movw	r24, r10
   1cd6a:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1cd6e:	89 2b       	or	r24, r25
   1cd70:	71 f0       	breq	.+28     	; 0x1cd8e <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1cd72:	c7 01       	movw	r24, r14
   1cd74:	01 96       	adiw	r24, 0x01	; 1
   1cd76:	88 0f       	add	r24, r24
   1cd78:	99 1f       	adc	r25, r25
   1cd7a:	e8 01       	movw	r28, r16
   1cd7c:	c8 0f       	add	r28, r24
   1cd7e:	d9 1f       	adc	r29, r25
   1cd80:	68 81       	ld	r22, Y
   1cd82:	79 81       	ldd	r23, Y+1	; 0x01
   1cd84:	22 97       	sbiw	r28, 0x02	; 2
   1cd86:	88 81       	ld	r24, Y
   1cd88:	99 81       	ldd	r25, Y+1	; 0x01
   1cd8a:	cf dd       	rcall	.-1122   	; 0x1c92a <lif_del_file>
   1cd8c:	88 c0       	rjmp	.+272    	; 0x1ce9e <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1cd8e:	94 01       	movw	r18, r8
   1cd90:	a7 01       	movw	r20, r14
   1cd92:	4c 5f       	subi	r20, 0xFC	; 252
   1cd94:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd96:	68 e3       	ldi	r22, 0x38	; 56
   1cd98:	76 e1       	ldi	r23, 0x16	; 22
   1cd9a:	c5 01       	movw	r24, r10
   1cd9c:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1cda0:	89 2b       	or	r24, r25
   1cda2:	f1 f0       	breq	.+60     	; 0x1cde0 <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1cda4:	e6 01       	movw	r28, r12
   1cda6:	cc 0f       	add	r28, r28
   1cda8:	dd 1f       	adc	r29, r29
   1cdaa:	c0 0f       	add	r28, r16
   1cdac:	d1 1f       	adc	r29, r17
   1cdae:	88 81       	ld	r24, Y
   1cdb0:	99 81       	ldd	r25, Y+1	; 0x01
   1cdb2:	0e 94 49 47 	call	0x8e92	; 0x8e92 <atol>
   1cdb6:	6b 01       	movw	r12, r22
   1cdb8:	7c 01       	movw	r14, r24
   1cdba:	fe 01       	movw	r30, r28
   1cdbc:	32 97       	sbiw	r30, 0x02	; 2
   1cdbe:	80 81       	ld	r24, Z
   1cdc0:	91 81       	ldd	r25, Z+1	; 0x01
   1cdc2:	0e 94 49 47 	call	0x8e92	; 0x8e92 <atol>
   1cdc6:	9b 01       	movw	r18, r22
   1cdc8:	ac 01       	movw	r20, r24
   1cdca:	fe 01       	movw	r30, r28
   1cdcc:	34 97       	sbiw	r30, 0x04	; 4
   1cdce:	60 81       	ld	r22, Z
   1cdd0:	71 81       	ldd	r23, Z+1	; 0x01
   1cdd2:	26 97       	sbiw	r28, 0x06	; 6
   1cdd4:	87 01       	movw	r16, r14
   1cdd6:	76 01       	movw	r14, r12
   1cdd8:	88 81       	ld	r24, Y
   1cdda:	99 81       	ldd	r25, Y+1	; 0x01
   1cddc:	c4 de       	rcall	.-632    	; 0x1cb66 <lif_create_image>
   1cdde:	5f c0       	rjmp	.+190    	; 0x1ce9e <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1cde0:	94 01       	movw	r18, r8
   1cde2:	a7 01       	movw	r20, r14
   1cde4:	4f 5f       	subi	r20, 0xFF	; 255
   1cde6:	5f 4f       	sbci	r21, 0xFF	; 255
   1cde8:	6d e4       	ldi	r22, 0x4D	; 77
   1cdea:	7b e0       	ldi	r23, 0x0B	; 11
   1cdec:	c5 01       	movw	r24, r10
   1cdee:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1cdf2:	89 2b       	or	r24, r25
   1cdf4:	59 f0       	breq	.+22     	; 0x1ce0c <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1cdf6:	c7 01       	movw	r24, r14
   1cdf8:	88 0f       	add	r24, r24
   1cdfa:	99 1f       	adc	r25, r25
   1cdfc:	e8 01       	movw	r28, r16
   1cdfe:	c8 0f       	add	r28, r24
   1ce00:	d9 1f       	adc	r29, r25
   1ce02:	88 81       	ld	r24, Y
   1ce04:	99 81       	ldd	r25, Y+1	; 0x01
   1ce06:	0e 94 a0 d9 	call	0x1b340	; 0x1b340 <lif_dir>
   1ce0a:	49 c0       	rjmp	.+146    	; 0x1ce9e <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1ce0c:	94 01       	movw	r18, r8
   1ce0e:	a6 01       	movw	r20, r12
   1ce10:	6f e3       	ldi	r22, 0x3F	; 63
   1ce12:	76 e1       	ldi	r23, 0x16	; 22
   1ce14:	c5 01       	movw	r24, r10
   1ce16:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1ce1a:	89 2b       	or	r24, r25
   1ce1c:	79 f0       	breq	.+30     	; 0x1ce3c <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1ce1e:	cc 0f       	add	r28, r28
   1ce20:	dd 1f       	adc	r29, r29
   1ce22:	c0 0f       	add	r28, r16
   1ce24:	d1 1f       	adc	r29, r17
   1ce26:	48 81       	ld	r20, Y
   1ce28:	59 81       	ldd	r21, Y+1	; 0x01
   1ce2a:	fe 01       	movw	r30, r28
   1ce2c:	32 97       	sbiw	r30, 0x02	; 2
   1ce2e:	60 81       	ld	r22, Z
   1ce30:	71 81       	ldd	r23, Z+1	; 0x01
   1ce32:	24 97       	sbiw	r28, 0x04	; 4
   1ce34:	88 81       	ld	r24, Y
   1ce36:	99 81       	ldd	r25, Y+1	; 0x01
   1ce38:	99 da       	rcall	.-2766   	; 0x1c36c <lif_extract_lif_as_lif>
   1ce3a:	31 c0       	rjmp	.+98     	; 0x1ce9e <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1ce3c:	94 01       	movw	r18, r8
   1ce3e:	a6 01       	movw	r20, r12
   1ce40:	6a e4       	ldi	r22, 0x4A	; 74
   1ce42:	76 e1       	ldi	r23, 0x16	; 22
   1ce44:	c5 01       	movw	r24, r10
   1ce46:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1ce4a:	89 2b       	or	r24, r25
   1ce4c:	81 f0       	breq	.+32     	; 0x1ce6e <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1ce4e:	cc 0f       	add	r28, r28
   1ce50:	dd 1f       	adc	r29, r29
   1ce52:	c0 0f       	add	r28, r16
   1ce54:	d1 1f       	adc	r29, r17
   1ce56:	48 81       	ld	r20, Y
   1ce58:	59 81       	ldd	r21, Y+1	; 0x01
   1ce5a:	fe 01       	movw	r30, r28
   1ce5c:	32 97       	sbiw	r30, 0x02	; 2
   1ce5e:	60 81       	ld	r22, Z
   1ce60:	71 81       	ldd	r23, Z+1	; 0x01
   1ce62:	24 97       	sbiw	r28, 0x04	; 4
   1ce64:	88 81       	ld	r24, Y
   1ce66:	99 81       	ldd	r25, Y+1	; 0x01
   1ce68:	0e 94 ca de 	call	0x1bd94	; 0x1bd94 <lif_extract_e010_as_ascii>
   1ce6c:	18 c0       	rjmp	.+48     	; 0x1ce9e <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1ce6e:	94 01       	movw	r18, r8
   1ce70:	a6 01       	movw	r20, r12
   1ce72:	6a e5       	ldi	r22, 0x5A	; 90
   1ce74:	7b e0       	ldi	r23, 0x0B	; 11
   1ce76:	c5 01       	movw	r24, r10
   1ce78:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1ce7c:	89 2b       	or	r24, r25
   1ce7e:	09 f4       	brne	.+2      	; 0x1ce82 <lif_tests+0x224>
   1ce80:	03 cf       	rjmp	.-506    	; 0x1cc88 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1ce82:	cc 0f       	add	r28, r28
   1ce84:	dd 1f       	adc	r29, r29
   1ce86:	c0 0f       	add	r28, r16
   1ce88:	d1 1f       	adc	r29, r17
   1ce8a:	48 81       	ld	r20, Y
   1ce8c:	59 81       	ldd	r21, Y+1	; 0x01
   1ce8e:	fe 01       	movw	r30, r28
   1ce90:	32 97       	sbiw	r30, 0x02	; 2
   1ce92:	60 81       	ld	r22, Z
   1ce94:	71 81       	ldd	r23, Z+1	; 0x01
   1ce96:	24 97       	sbiw	r28, 0x04	; 4
   1ce98:	88 81       	ld	r24, Y
   1ce9a:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1ce9c:	de dd       	rcall	.-1092   	; 0x1ca5a <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1ce9e:	81 e0       	ldi	r24, 0x01	; 1
   1cea0:	90 e0       	ldi	r25, 0x00	; 0
   1cea2:	cd b7       	in	r28, 0x3d	; 61
   1cea4:	de b7       	in	r29, 0x3e	; 62
   1cea6:	ec e0       	ldi	r30, 0x0C	; 12
   1cea8:	e8 c3       	rjmp	.+2000   	; 0x1d67a <__epilogue_restores__+0xc>

0001ceaa <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1ceaa:	81 ef       	ldi	r24, 0xF1	; 241
   1ceac:	98 e4       	ldi	r25, 0x48	; 72
   1ceae:	1f 92       	push	r1
   1ceb0:	9f 93       	push	r25
   1ceb2:	8f 93       	push	r24
   1ceb4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1ceb8:	82 ed       	ldi	r24, 0xD2	; 210
   1ceba:	98 e4       	ldi	r25, 0x48	; 72
   1cebc:	1f 92       	push	r1
   1cebe:	9f 93       	push	r25
   1cec0:	8f 93       	push	r24
   1cec2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1cec6:	85 eb       	ldi	r24, 0xB5	; 181
   1cec8:	98 e4       	ldi	r25, 0x48	; 72
   1ceca:	1f 92       	push	r1
   1cecc:	9f 93       	push	r25
   1cece:	8f 93       	push	r24
   1ced0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf(" GNU version 3\n");
   1ced4:	85 ea       	ldi	r24, 0xA5	; 165
   1ced6:	98 e4       	ldi	r25, 0x48	; 72
   1ced8:	1f 92       	push	r1
   1ceda:	9f 93       	push	r25
   1cedc:	8f 93       	push	r24
   1cede:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cee2:	8e e7       	ldi	r24, 0x7E	; 126
   1cee4:	98 e4       	ldi	r25, 0x48	; 72
   1cee6:	1f 92       	push	r1
   1cee8:	9f 93       	push	r25
   1ceea:	8f 93       	push	r24
   1ceec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1cef0:	82 e5       	ldi	r24, 0x52	; 82
   1cef2:	96 e1       	ldi	r25, 0x16	; 22
   1cef4:	9f 93       	push	r25
   1cef6:	8f 93       	push	r24
   1cef8:	84 e6       	ldi	r24, 0x64	; 100
   1cefa:	98 e4       	ldi	r25, 0x48	; 72
   1cefc:	1f 92       	push	r1
   1cefe:	9f 93       	push	r25
   1cf00:	8f 93       	push	r24
   1cf02:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1cf06:	86 e7       	ldi	r24, 0x76	; 118
   1cf08:	96 e1       	ldi	r25, 0x16	; 22
   1cf0a:	9f 93       	push	r25
   1cf0c:	8f 93       	push	r24
   1cf0e:	8a e4       	ldi	r24, 0x4A	; 74
   1cf10:	98 e4       	ldi	r25, 0x48	; 72
   1cf12:	1f 92       	push	r1
   1cf14:	9f 93       	push	r25
   1cf16:	8f 93       	push	r24
   1cf18:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
    printf("\n");
   1cf1c:	88 e4       	ldi	r24, 0x48	; 72
   1cf1e:	98 e4       	ldi	r25, 0x48	; 72
   1cf20:	1f 92       	push	r1
   1cf22:	9f 93       	push	r25
   1cf24:	8f 93       	push	r24
   1cf26:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
}
   1cf2a:	8d b7       	in	r24, 0x3d	; 61
   1cf2c:	9e b7       	in	r25, 0x3e	; 62
   1cf2e:	4c 96       	adiw	r24, 0x1c	; 28
   1cf30:	0f b6       	in	r0, 0x3f	; 63
   1cf32:	f8 94       	cli
   1cf34:	9e bf       	out	0x3e, r25	; 62
   1cf36:	0f be       	out	0x3f, r0	; 63
   1cf38:	8d bf       	out	0x3d, r24	; 61
   1cf3a:	08 95       	ret

0001cf3c <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1cf3c:	89 e3       	ldi	r24, 0x39	; 57
   1cf3e:	98 e4       	ldi	r25, 0x48	; 72
   1cf40:	1f 92       	push	r1
   1cf42:	9f 93       	push	r25
   1cf44:	8f 93       	push	r24
   1cf46:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    clock_elapsed_begin();
   1cf4a:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1cf4e:	8a e9       	ldi	r24, 0x9A	; 154
   1cf50:	96 e1       	ldi	r25, 0x16	; 22
   1cf52:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    clock_elapsed_begin();
   1cf56:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
   1cf5a:	83 ef       	ldi	r24, 0xF3	; 243
   1cf5c:	91 e0       	ldi	r25, 0x01	; 1
   1cf5e:	01 97       	sbiw	r24, 0x01	; 1
   1cf60:	f1 f7       	brne	.-4      	; 0x1cf5e <delay_tests+0x22>
   1cf62:	00 c0       	rjmp	.+0      	; 0x1cf64 <delay_tests+0x28>
   1cf64:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1cf66:	81 eb       	ldi	r24, 0xB1	; 177
   1cf68:	96 e1       	ldi	r25, 0x16	; 22
   1cf6a:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    clock_elapsed_begin();
   1cf6e:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
   1cf72:	83 ec       	ldi	r24, 0xC3	; 195
   1cf74:	99 e0       	ldi	r25, 0x09	; 9
   1cf76:	01 97       	sbiw	r24, 0x01	; 1
   1cf78:	f1 f7       	brne	.-4      	; 0x1cf76 <delay_tests+0x3a>
   1cf7a:	00 c0       	rjmp	.+0      	; 0x1cf7c <delay_tests+0x40>
   1cf7c:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1cf7e:	80 ec       	ldi	r24, 0xC0	; 192
   1cf80:	96 e1       	ldi	r25, 0x16	; 22
   1cf82:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    printf("My delays\n");
   1cf86:	8e e2       	ldi	r24, 0x2E	; 46
   1cf88:	98 e4       	ldi	r25, 0x48	; 72
   1cf8a:	1f 92       	push	r1
   1cf8c:	9f 93       	push	r25
   1cf8e:	8f 93       	push	r24
   1cf90:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>

    clock_elapsed_begin();
   1cf94:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
    delayus(100U);
   1cf98:	64 e6       	ldi	r22, 0x64	; 100
   1cf9a:	70 e0       	ldi	r23, 0x00	; 0
   1cf9c:	80 e0       	ldi	r24, 0x00	; 0
   1cf9e:	90 e0       	ldi	r25, 0x00	; 0
   1cfa0:	0e 94 3b 2a 	call	0x5476	; 0x5476 <delayus>
    clock_elapsed_end("delayus(100)");
   1cfa4:	8f ec       	ldi	r24, 0xCF	; 207
   1cfa6:	96 e1       	ldi	r25, 0x16	; 22
   1cfa8:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    clock_elapsed_begin();
   1cfac:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
    delayus(500U);
   1cfb0:	64 ef       	ldi	r22, 0xF4	; 244
   1cfb2:	71 e0       	ldi	r23, 0x01	; 1
   1cfb4:	80 e0       	ldi	r24, 0x00	; 0
   1cfb6:	90 e0       	ldi	r25, 0x00	; 0
   1cfb8:	0e 94 3b 2a 	call	0x5476	; 0x5476 <delayus>
    clock_elapsed_end("delayus(500)");
   1cfbc:	8c ed       	ldi	r24, 0xDC	; 220
   1cfbe:	96 e1       	ldi	r25, 0x16	; 22
   1cfc0:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    clock_elapsed_begin();
   1cfc4:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
    delayus(1100);
   1cfc8:	6c e4       	ldi	r22, 0x4C	; 76
   1cfca:	74 e0       	ldi	r23, 0x04	; 4
   1cfcc:	80 e0       	ldi	r24, 0x00	; 0
   1cfce:	90 e0       	ldi	r25, 0x00	; 0
   1cfd0:	0e 94 3b 2a 	call	0x5476	; 0x5476 <delayus>
    clock_elapsed_end("delayus(1100)");
   1cfd4:	89 ee       	ldi	r24, 0xE9	; 233
   1cfd6:	96 e1       	ldi	r25, 0x16	; 22
   1cfd8:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>

    clock_elapsed_begin();
   1cfdc:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <clock_elapsed_begin>
    delayms(1000);
   1cfe0:	68 ee       	ldi	r22, 0xE8	; 232
   1cfe2:	73 e0       	ldi	r23, 0x03	; 3
   1cfe4:	80 e0       	ldi	r24, 0x00	; 0
   1cfe6:	90 e0       	ldi	r25, 0x00	; 0
   1cfe8:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <delayms>
    clock_elapsed_end("delayms(1100)");
   1cfec:	87 ef       	ldi	r24, 0xF7	; 247
   1cfee:	96 e1       	ldi	r25, 0x16	; 22
   1cff0:	0e 94 d6 35 	call	0x6bac	; 0x6bac <clock_elapsed_end>
}
   1cff4:	0f 90       	pop	r0
   1cff6:	0f 90       	pop	r0
   1cff8:	0f 90       	pop	r0
   1cffa:	0f 90       	pop	r0
   1cffc:	0f 90       	pop	r0
   1cffe:	0f 90       	pop	r0
   1d000:	08 95       	ret

0001d002 <help>:
   1d002:	53 df       	rcall	.-346    	; 0x1ceaa <copyright>
   1d004:	80 e0       	ldi	r24, 0x00	; 0
   1d006:	90 e0       	ldi	r25, 0x00	; 0
   1d008:	0e 94 98 77 	call	0xef30	; 0xef30 <fatfs_help>
   1d00c:	80 e0       	ldi	r24, 0x00	; 0
   1d00e:	90 e0       	ldi	r25, 0x00	; 0
   1d010:	0e 94 e0 83 	call	0x107c0	; 0x107c0 <posix_help>
   1d014:	80 e0       	ldi	r24, 0x00	; 0
   1d016:	90 e0       	ldi	r25, 0x00	; 0
   1d018:	0e 94 6f c8 	call	0x190de	; 0x190de <lif_help>
   1d01c:	80 e0       	ldi	r24, 0x00	; 0
   1d01e:	90 e0       	ldi	r25, 0x00	; 0
   1d020:	0e 94 07 99 	call	0x1320e	; 0x1320e <gpib_help>
   1d024:	8f e0       	ldi	r24, 0x0F	; 15
   1d026:	98 e4       	ldi	r25, 0x48	; 72
   1d028:	1f 92       	push	r1
   1d02a:	9f 93       	push	r25
   1d02c:	8f 93       	push	r24
   1d02e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d032:	0f 90       	pop	r0
   1d034:	0f 90       	pop	r0
   1d036:	0f 90       	pop	r0
   1d038:	08 95       	ret

0001d03a <task>:
   1d03a:	a4 ee       	ldi	r26, 0xE4	; 228
   1d03c:	b0 e0       	ldi	r27, 0x00	; 0
   1d03e:	e2 e2       	ldi	r30, 0x22	; 34
   1d040:	f8 ee       	ldi	r31, 0xE8	; 232
   1d042:	05 c3       	rjmp	.+1546   	; 0x1d64e <__prologue_saves__+0x18>
   1d044:	81 11       	cpse	r24, r1
   1d046:	0e 94 a5 98 	call	0x1314a	; 0x1314a <gpib_task>
   1d04a:	80 e0       	ldi	r24, 0x00	; 0
   1d04c:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <uart_rx_count>
   1d050:	89 2b       	or	r24, r25
   1d052:	09 f4       	brne	.+2      	; 0x1d056 <task+0x1c>
   1d054:	a0 c0       	rjmp	.+320    	; 0x1d196 <task+0x15c>
   1d056:	8c e0       	ldi	r24, 0x0C	; 12
   1d058:	98 e4       	ldi	r25, 0x48	; 72
   1d05a:	1f 92       	push	r1
   1d05c:	9f 93       	push	r25
   1d05e:	8f 93       	push	r24
   1d060:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d064:	40 91 c2 1c 	lds	r20, 0x1CC2	; 0x801cc2 <__iob>
   1d068:	50 91 c3 1c 	lds	r21, 0x1CC3	; 0x801cc3 <__iob+0x1>
   1d06c:	6e e7       	ldi	r22, 0x7E	; 126
   1d06e:	70 e0       	ldi	r23, 0x00	; 0
   1d070:	ce 01       	movw	r24, r28
   1d072:	01 96       	adiw	r24, 0x01	; 1
   1d074:	0e 94 c3 7a 	call	0xf586	; 0xf586 <fgets>
   1d078:	42 e3       	ldi	r20, 0x32	; 50
   1d07a:	50 e0       	ldi	r21, 0x00	; 0
   1d07c:	be 01       	movw	r22, r28
   1d07e:	6f 57       	subi	r22, 0x7F	; 127
   1d080:	7f 4f       	sbci	r23, 0xFF	; 255
   1d082:	ce 01       	movw	r24, r28
   1d084:	01 96       	adiw	r24, 0x01	; 1
   1d086:	0e 94 3c 33 	call	0x6678	; 0x6678 <split_args>
   1d08a:	8c 01       	movw	r16, r24
   1d08c:	cf 57       	subi	r28, 0x7F	; 127
   1d08e:	df 4f       	sbci	r29, 0xFF	; 255
   1d090:	e8 80       	ld	r14, Y
   1d092:	f9 80       	ldd	r15, Y+1	; 0x01
   1d094:	c1 58       	subi	r28, 0x81	; 129
   1d096:	d0 40       	sbci	r29, 0x00	; 0
   1d098:	0f 90       	pop	r0
   1d09a:	0f 90       	pop	r0
   1d09c:	0f 90       	pop	r0
   1d09e:	e1 14       	cp	r14, r1
   1d0a0:	f1 04       	cpc	r15, r1
   1d0a2:	09 f4       	brne	.+2      	; 0x1d0a6 <task+0x6c>
   1d0a4:	78 c0       	rjmp	.+240    	; 0x1d196 <task+0x15c>
   1d0a6:	9c 01       	movw	r18, r24
   1d0a8:	41 e0       	ldi	r20, 0x01	; 1
   1d0aa:	50 e0       	ldi	r21, 0x00	; 0
   1d0ac:	65 e0       	ldi	r22, 0x05	; 5
   1d0ae:	77 e1       	ldi	r23, 0x17	; 23
   1d0b0:	c7 01       	movw	r24, r14
   1d0b2:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d0b6:	89 2b       	or	r24, r25
   1d0b8:	11 f0       	breq	.+4      	; 0x1d0be <task+0x84>
   1d0ba:	40 df       	rcall	.-384    	; 0x1cf3c <delay_tests>
   1d0bc:	6c c0       	rjmp	.+216    	; 0x1d196 <task+0x15c>
   1d0be:	98 01       	movw	r18, r16
   1d0c0:	41 e0       	ldi	r20, 0x01	; 1
   1d0c2:	50 e0       	ldi	r21, 0x00	; 0
   1d0c4:	61 e1       	ldi	r22, 0x11	; 17
   1d0c6:	77 e1       	ldi	r23, 0x17	; 23
   1d0c8:	c7 01       	movw	r24, r14
   1d0ca:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d0ce:	89 2b       	or	r24, r25
   1d0d0:	61 f4       	brne	.+24     	; 0x1d0ea <task+0xb0>
   1d0d2:	98 01       	movw	r18, r16
   1d0d4:	41 e0       	ldi	r20, 0x01	; 1
   1d0d6:	50 e0       	ldi	r21, 0x00	; 0
   1d0d8:	66 e1       	ldi	r22, 0x16	; 22
   1d0da:	77 e1       	ldi	r23, 0x17	; 23
   1d0dc:	c7 01       	movw	r24, r14
   1d0de:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d0e2:	89 2b       	or	r24, r25
   1d0e4:	29 f0       	breq	.+10     	; 0x1d0f0 <task+0xb6>
   1d0e6:	0e 94 df 3b 	call	0x77be	; 0x77be <setdate>
   1d0ea:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <display_clock>
   1d0ee:	53 c0       	rjmp	.+166    	; 0x1d196 <task+0x15c>
   1d0f0:	98 01       	movw	r18, r16
   1d0f2:	41 e0       	ldi	r20, 0x01	; 1
   1d0f4:	50 e0       	ldi	r21, 0x00	; 0
   1d0f6:	6e e1       	ldi	r22, 0x1E	; 30
   1d0f8:	77 e1       	ldi	r23, 0x17	; 23
   1d0fa:	c7 01       	movw	r24, r14
   1d0fc:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d100:	89 2b       	or	r24, r25
   1d102:	19 f0       	breq	.+6      	; 0x1d10a <task+0xd0>
   1d104:	0e 94 45 29 	call	0x528a	; 0x528a <PrintFree>
   1d108:	46 c0       	rjmp	.+140    	; 0x1d196 <task+0x15c>
   1d10a:	98 01       	movw	r18, r16
   1d10c:	41 e0       	ldi	r20, 0x01	; 1
   1d10e:	50 e0       	ldi	r21, 0x00	; 0
   1d110:	6e e1       	ldi	r22, 0x1E	; 30
   1d112:	76 e1       	ldi	r23, 0x16	; 22
   1d114:	c7 01       	movw	r24, r14
   1d116:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d11a:	89 2b       	or	r24, r25
   1d11c:	11 f0       	breq	.+4      	; 0x1d122 <task+0xe8>
   1d11e:	71 df       	rcall	.-286    	; 0x1d002 <help>
   1d120:	3a c0       	rjmp	.+116    	; 0x1d196 <task+0x15c>
   1d122:	98 01       	movw	r18, r16
   1d124:	41 e0       	ldi	r20, 0x01	; 1
   1d126:	50 e0       	ldi	r21, 0x00	; 0
   1d128:	64 e2       	ldi	r22, 0x24	; 36
   1d12a:	76 e1       	ldi	r23, 0x16	; 22
   1d12c:	c7 01       	movw	r24, r14
   1d12e:	0e 94 df 32 	call	0x65be	; 0x65be <MATCHARGS>
   1d132:	89 2b       	or	r24, r25
   1d134:	a1 f7       	brne	.-24     	; 0x1d11e <task+0xe4>
   1d136:	be 01       	movw	r22, r28
   1d138:	6f 57       	subi	r22, 0x7F	; 127
   1d13a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d13c:	c8 01       	movw	r24, r16
   1d13e:	0e 94 23 99 	call	0x13246	; 0x13246 <gpib_tests>
   1d142:	89 2b       	or	r24, r25
   1d144:	19 f0       	breq	.+6      	; 0x1d14c <task+0x112>
   1d146:	0e 94 6f 94 	call	0x128de	; 0x128de <gpib_init_devices>
   1d14a:	25 c0       	rjmp	.+74     	; 0x1d196 <task+0x15c>
   1d14c:	be 01       	movw	r22, r28
   1d14e:	6f 57       	subi	r22, 0x7F	; 127
   1d150:	7f 4f       	sbci	r23, 0xFF	; 255
   1d152:	c8 01       	movw	r24, r16
   1d154:	0e 94 6f 89 	call	0x112de	; 0x112de <posix_tests>
   1d158:	89 2b       	or	r24, r25
   1d15a:	e9 f4       	brne	.+58     	; 0x1d196 <task+0x15c>
   1d15c:	be 01       	movw	r22, r28
   1d15e:	6f 57       	subi	r22, 0x7F	; 127
   1d160:	7f 4f       	sbci	r23, 0xFF	; 255
   1d162:	c8 01       	movw	r24, r16
   1d164:	0e 94 b3 78 	call	0xf166	; 0xf166 <fatfs_tests>
   1d168:	89 2b       	or	r24, r25
   1d16a:	a9 f4       	brne	.+42     	; 0x1d196 <task+0x15c>
   1d16c:	be 01       	movw	r22, r28
   1d16e:	6f 57       	subi	r22, 0x7F	; 127
   1d170:	7f 4f       	sbci	r23, 0xFF	; 255
   1d172:	c8 01       	movw	r24, r16
   1d174:	74 dd       	rcall	.-1304   	; 0x1cc5e <lif_tests>
   1d176:	89 2b       	or	r24, r25
   1d178:	71 f4       	brne	.+28     	; 0x1d196 <task+0x15c>
   1d17a:	ff 92       	push	r15
   1d17c:	ef 92       	push	r14
   1d17e:	80 e0       	ldi	r24, 0x00	; 0
   1d180:	98 e4       	ldi	r25, 0x48	; 72
   1d182:	1f 92       	push	r1
   1d184:	9f 93       	push	r25
   1d186:	8f 93       	push	r24
   1d188:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d18c:	0f 90       	pop	r0
   1d18e:	0f 90       	pop	r0
   1d190:	0f 90       	pop	r0
   1d192:	0f 90       	pop	r0
   1d194:	0f 90       	pop	r0
   1d196:	cc 51       	subi	r28, 0x1C	; 28
   1d198:	df 4f       	sbci	r29, 0xFF	; 255
   1d19a:	e6 e0       	ldi	r30, 0x06	; 6
   1d19c:	74 c2       	rjmp	.+1256   	; 0x1d686 <__epilogue_restores__+0x18>

0001d19e <main>:
   1d19e:	a8 e0       	ldi	r26, 0x08	; 8
   1d1a0:	b0 e0       	ldi	r27, 0x00	; 0
   1d1a2:	e4 ed       	ldi	r30, 0xD4	; 212
   1d1a4:	f8 ee       	ldi	r31, 0xE8	; 232
   1d1a6:	52 c2       	rjmp	.+1188   	; 0x1d64c <__prologue_saves__+0x16>
   1d1a8:	0e 94 9f 8d 	call	0x11b3e	; 0x11b3e <gpib_bus_init>
   1d1ac:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <init_timers>
   1d1b0:	40 e0       	ldi	r20, 0x00	; 0
   1d1b2:	52 ec       	ldi	r21, 0xC2	; 194
   1d1b4:	61 e0       	ldi	r22, 0x01	; 1
   1d1b6:	70 e0       	ldi	r23, 0x00	; 0
   1d1b8:	80 e0       	ldi	r24, 0x00	; 0
   1d1ba:	0e 94 4a 2b 	call	0x5694	; 0x5694 <uart_init>
   1d1be:	06 2f       	mov	r16, r22
   1d1c0:	f7 2e       	mov	r15, r23
   1d1c2:	e8 2e       	mov	r14, r24
   1d1c4:	d9 2e       	mov	r13, r25
   1d1c6:	68 ec       	ldi	r22, 0xC8	; 200
   1d1c8:	70 e0       	ldi	r23, 0x00	; 0
   1d1ca:	80 e0       	ldi	r24, 0x00	; 0
   1d1cc:	90 e0       	ldi	r25, 0x00	; 0
   1d1ce:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <delayms>
   1d1d2:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d1d6:	89 ef       	ldi	r24, 0xF9	; 249
   1d1d8:	97 e4       	ldi	r25, 0x47	; 71
   1d1da:	1f 92       	push	r1
   1d1dc:	9f 93       	push	r25
   1d1de:	8f 93       	push	r24
   1d1e0:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d1e4:	11 e0       	ldi	r17, 0x01	; 1
   1d1e6:	1f 93       	push	r17
   1d1e8:	81 e3       	ldi	r24, 0x31	; 49
   1d1ea:	8f 93       	push	r24
   1d1ec:	8d e2       	ldi	r24, 0x2D	; 45
   1d1ee:	8f 93       	push	r24
   1d1f0:	1f 92       	push	r1
   1d1f2:	88 ee       	ldi	r24, 0xE8	; 232
   1d1f4:	97 e4       	ldi	r25, 0x47	; 71
   1d1f6:	1f 92       	push	r1
   1d1f8:	9f 93       	push	r25
   1d1fa:	8f 93       	push	r24
   1d1fc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d200:	df 92       	push	r13
   1d202:	ef 92       	push	r14
   1d204:	ff 92       	push	r15
   1d206:	0f 93       	push	r16
   1d208:	1f 92       	push	r1
   1d20a:	1f 93       	push	r17
   1d20c:	82 ec       	ldi	r24, 0xC2	; 194
   1d20e:	8f 93       	push	r24
   1d210:	1f 92       	push	r1
   1d212:	81 ec       	ldi	r24, 0xC1	; 193
   1d214:	97 e4       	ldi	r25, 0x47	; 71
   1d216:	1f 92       	push	r1
   1d218:	9f 93       	push	r25
   1d21a:	8f 93       	push	r24
   1d21c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d220:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d224:	82 ea       	ldi	r24, 0xA2	; 162
   1d226:	97 e4       	ldi	r25, 0x47	; 71
   1d228:	1f 92       	push	r1
   1d22a:	9f 93       	push	r25
   1d22c:	8f 93       	push	r24
   1d22e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d232:	85 e8       	ldi	r24, 0x85	; 133
   1d234:	97 e4       	ldi	r25, 0x47	; 71
   1d236:	1f 92       	push	r1
   1d238:	9f 93       	push	r25
   1d23a:	8f 93       	push	r24
   1d23c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d240:	85 e7       	ldi	r24, 0x75	; 117
   1d242:	97 e4       	ldi	r25, 0x47	; 71
   1d244:	1f 92       	push	r1
   1d246:	9f 93       	push	r25
   1d248:	8f 93       	push	r24
   1d24a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d24e:	8e e4       	ldi	r24, 0x4E	; 78
   1d250:	97 e4       	ldi	r25, 0x47	; 71
   1d252:	1f 92       	push	r1
   1d254:	9f 93       	push	r25
   1d256:	8f 93       	push	r24
   1d258:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d25c:	0f b6       	in	r0, 0x3f	; 63
   1d25e:	f8 94       	cli
   1d260:	de bf       	out	0x3e, r29	; 62
   1d262:	0f be       	out	0x3f, r0	; 63
   1d264:	cd bf       	out	0x3d, r28	; 61
   1d266:	82 e5       	ldi	r24, 0x52	; 82
   1d268:	96 e1       	ldi	r25, 0x16	; 22
   1d26a:	9f 93       	push	r25
   1d26c:	8f 93       	push	r24
   1d26e:	84 e3       	ldi	r24, 0x34	; 52
   1d270:	97 e4       	ldi	r25, 0x47	; 71
   1d272:	1f 92       	push	r1
   1d274:	9f 93       	push	r25
   1d276:	8f 93       	push	r24
   1d278:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d27c:	86 e7       	ldi	r24, 0x76	; 118
   1d27e:	96 e1       	ldi	r25, 0x16	; 22
   1d280:	9f 93       	push	r25
   1d282:	8f 93       	push	r24
   1d284:	8a e1       	ldi	r24, 0x1A	; 26
   1d286:	97 e4       	ldi	r25, 0x47	; 71
   1d288:	1f 92       	push	r1
   1d28a:	9f 93       	push	r25
   1d28c:	8f 93       	push	r24
   1d28e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d292:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d296:	0e 94 45 29 	call	0x528a	; 0x528a <PrintFree>
   1d29a:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d29e:	68 ec       	ldi	r22, 0xC8	; 200
   1d2a0:	70 e0       	ldi	r23, 0x00	; 0
   1d2a2:	80 e0       	ldi	r24, 0x00	; 0
   1d2a4:	90 e0       	ldi	r25, 0x00	; 0
   1d2a6:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <delayms>
   1d2aa:	84 e0       	ldi	r24, 0x04	; 4
   1d2ac:	97 e4       	ldi	r25, 0x47	; 71
   1d2ae:	1f 92       	push	r1
   1d2b0:	9f 93       	push	r25
   1d2b2:	8f 93       	push	r24
   1d2b4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d2b8:	4b e0       	ldi	r20, 0x0B	; 11
   1d2ba:	50 e0       	ldi	r21, 0x00	; 0
   1d2bc:	60 e2       	ldi	r22, 0x20	; 32
   1d2be:	71 ea       	ldi	r23, 0xA1	; 161
   1d2c0:	87 e0       	ldi	r24, 0x07	; 7
   1d2c2:	90 e0       	ldi	r25, 0x00	; 0
   1d2c4:	0e 94 c1 28 	call	0x5182	; 0x5182 <spi_init>
   1d2c8:	8e ee       	ldi	r24, 0xEE	; 238
   1d2ca:	96 e4       	ldi	r25, 0x46	; 70
   1d2cc:	1f 92       	push	r1
   1d2ce:	9f 93       	push	r25
   1d2d0:	8f 93       	push	r24
   1d2d2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d2d6:	61 e1       	ldi	r22, 0x11	; 17
   1d2d8:	81 e0       	ldi	r24, 0x01	; 1
   1d2da:	0e 94 67 2d 	call	0x5ace	; 0x5ace <TWI_Init>
   1d2de:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d2e2:	8c ed       	ldi	r24, 0xDC	; 220
   1d2e4:	96 e4       	ldi	r25, 0x46	; 70
   1d2e6:	1f 92       	push	r1
   1d2e8:	9f 93       	push	r25
   1d2ea:	8f 93       	push	r24
   1d2ec:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d2f0:	0e 94 18 36 	call	0x6c30	; 0x6c30 <clock_clear>
   1d2f4:	8d ec       	ldi	r24, 0xCD	; 205
   1d2f6:	96 e4       	ldi	r25, 0x46	; 70
   1d2f8:	1f 92       	push	r1
   1d2fa:	9f 93       	push	r25
   1d2fc:	8f 93       	push	r24
   1d2fe:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d302:	be 01       	movw	r22, r28
   1d304:	6f 5f       	subi	r22, 0xFF	; 255
   1d306:	7f 4f       	sbci	r23, 0xFF	; 255
   1d308:	80 e0       	ldi	r24, 0x00	; 0
   1d30a:	90 e0       	ldi	r25, 0x00	; 0
   1d30c:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <clock_getres>
   1d310:	88 85       	ldd	r24, Y+8	; 0x08
   1d312:	8f 93       	push	r24
   1d314:	8f 81       	ldd	r24, Y+7	; 0x07
   1d316:	8f 93       	push	r24
   1d318:	8e 81       	ldd	r24, Y+6	; 0x06
   1d31a:	8f 93       	push	r24
   1d31c:	8d 81       	ldd	r24, Y+5	; 0x05
   1d31e:	8f 93       	push	r24
   1d320:	80 eb       	ldi	r24, 0xB0	; 176
   1d322:	96 e4       	ldi	r25, 0x46	; 70
   1d324:	1f 92       	push	r1
   1d326:	9f 93       	push	r25
   1d328:	8f 93       	push	r24
   1d32a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d32e:	8c e2       	ldi	r24, 0x2C	; 44
   1d330:	91 e0       	ldi	r25, 0x01	; 1
   1d332:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <initialize_clock>
   1d336:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <display_clock>
   1d33a:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d33e:	82 e9       	ldi	r24, 0x92	; 146
   1d340:	96 e4       	ldi	r25, 0x46	; 70
   1d342:	1f 92       	push	r1
   1d344:	9f 93       	push	r25
   1d346:	8f 93       	push	r24
   1d348:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d34c:	0f b6       	in	r0, 0x3f	; 63
   1d34e:	f8 94       	cli
   1d350:	de bf       	out	0x3e, r29	; 62
   1d352:	0f be       	out	0x3f, r0	; 63
   1d354:	cd bf       	out	0x3d, r28	; 61
   1d356:	84 ee       	ldi	r24, 0xE4	; 228
   1d358:	0e 94 de 30 	call	0x61bc	; 0x61bc <LCD_init>
   1d35c:	89 2b       	or	r24, r25
   1d35e:	e9 f0       	breq	.+58     	; 0x1d39a <main+0x1fc>
   1d360:	60 e0       	ldi	r22, 0x00	; 0
   1d362:	80 e0       	ldi	r24, 0x00	; 0
   1d364:	0e 94 a8 30 	call	0x6150	; 0x6150 <LCD_pos>
   1d368:	82 e2       	ldi	r24, 0x22	; 34
   1d36a:	97 e1       	ldi	r25, 0x17	; 23
   1d36c:	9f 93       	push	r25
   1d36e:	8f 93       	push	r24
   1d370:	0e 94 97 31 	call	0x632e	; 0x632e <lcd_printf>
   1d374:	81 e3       	ldi	r24, 0x31	; 49
   1d376:	97 e1       	ldi	r25, 0x17	; 23
   1d378:	9f 93       	push	r25
   1d37a:	8f 93       	push	r24
   1d37c:	0e 94 97 31 	call	0x632e	; 0x632e <lcd_printf>
   1d380:	85 e7       	ldi	r24, 0x75	; 117
   1d382:	96 e4       	ldi	r25, 0x46	; 70
   1d384:	1f 92       	push	r1
   1d386:	9f 93       	push	r25
   1d388:	8f 93       	push	r24
   1d38a:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d38e:	0f b6       	in	r0, 0x3f	; 63
   1d390:	f8 94       	cli
   1d392:	de bf       	out	0x3e, r29	; 62
   1d394:	0f be       	out	0x3f, r0	; 63
   1d396:	cd bf       	out	0x3d, r28	; 61
   1d398:	0a c0       	rjmp	.+20     	; 0x1d3ae <main+0x210>
   1d39a:	8b e5       	ldi	r24, 0x5B	; 91
   1d39c:	96 e4       	ldi	r25, 0x46	; 70
   1d39e:	1f 92       	push	r1
   1d3a0:	9f 93       	push	r25
   1d3a2:	8f 93       	push	r24
   1d3a4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d3a8:	0f 90       	pop	r0
   1d3aa:	0f 90       	pop	r0
   1d3ac:	0f 90       	pop	r0
   1d3ae:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d3b2:	83 e4       	ldi	r24, 0x43	; 67
   1d3b4:	96 e4       	ldi	r25, 0x46	; 70
   1d3b6:	1f 92       	push	r1
   1d3b8:	9f 93       	push	r25
   1d3ba:	8f 93       	push	r24
   1d3bc:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d3c0:	81 e0       	ldi	r24, 0x01	; 1
   1d3c2:	90 e0       	ldi	r25, 0x00	; 0
   1d3c4:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <mmc_init>
   1d3c8:	82 e3       	ldi	r24, 0x32	; 50
   1d3ca:	96 e4       	ldi	r25, 0x46	; 70
   1d3cc:	1f 92       	push	r1
   1d3ce:	9f 93       	push	r25
   1d3d0:	8f 93       	push	r24
   1d3d2:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d3d6:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d3da:	0e 94 9f 8d 	call	0x11b3e	; 0x11b3e <gpib_bus_init>
   1d3de:	8c e1       	ldi	r24, 0x1C	; 28
   1d3e0:	96 e4       	ldi	r25, 0x46	; 70
   1d3e2:	1f 92       	push	r1
   1d3e4:	9f 93       	push	r25
   1d3e6:	8f 93       	push	r24
   1d3e8:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d3ec:	0e 94 2f b4 	call	0x1685e	; 0x1685e <printer_init>
   1d3f0:	87 e0       	ldi	r24, 0x07	; 7
   1d3f2:	96 e4       	ldi	r25, 0x46	; 70
   1d3f4:	1f 92       	push	r1
   1d3f6:	9f 93       	push	r25
   1d3f8:	8f 93       	push	r24
   1d3fa:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d3fe:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d402:	85 ef       	ldi	r24, 0xF5	; 245
   1d404:	95 e4       	ldi	r25, 0x45	; 69
   1d406:	1f 92       	push	r1
   1d408:	9f 93       	push	r25
   1d40a:	8f 93       	push	r24
   1d40c:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d410:	0e 94 af 8b 	call	0x1175e	; 0x1175e <gpib_timer_init>
   1d414:	8d ed       	ldi	r24, 0xDD	; 221
   1d416:	95 e4       	ldi	r25, 0x45	; 69
   1d418:	1f 92       	push	r1
   1d41a:	9f 93       	push	r25
   1d41c:	8f 93       	push	r24
   1d41e:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d422:	0e 94 b8 93 	call	0x12770	; 0x12770 <gpib_file_init>
   1d426:	88 ec       	ldi	r24, 0xC8	; 200
   1d428:	95 e4       	ldi	r25, 0x45	; 69
   1d42a:	1f 92       	push	r1
   1d42c:	9f 93       	push	r25
   1d42e:	8f 93       	push	r24
   1d430:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d434:	0e 94 c7 8d 	call	0x11b8e	; 0x11b8e <gpib_state_init>
   1d438:	82 eb       	ldi	r24, 0xB2	; 178
   1d43a:	95 e4       	ldi	r25, 0x45	; 69
   1d43c:	1f 92       	push	r1
   1d43e:	9f 93       	push	r25
   1d440:	8f 93       	push	r24
   1d442:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d446:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d44a:	0e 94 10 c4 	call	0x18820	; 0x18820 <display_Config>
   1d44e:	0e 94 6a c6 	call	0x18cd4	; 0x18cd4 <format_drives>
   1d452:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d456:	0e 94 15 c3 	call	0x1862a	; 0x1862a <display_Addresses>
   1d45a:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d45e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1d462:	8f 93       	push	r24
   1d464:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1d468:	8f 93       	push	r24
   1d46a:	8c e9       	ldi	r24, 0x9C	; 156
   1d46c:	95 e4       	ldi	r25, 0x45	; 69
   1d46e:	1f 92       	push	r1
   1d470:	9f 93       	push	r25
   1d472:	8f 93       	push	r24
   1d474:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d478:	60 e0       	ldi	r22, 0x00	; 0
   1d47a:	80 e0       	ldi	r24, 0x00	; 0
   1d47c:	0e 94 a8 30 	call	0x6150	; 0x6150 <LCD_pos>
   1d480:	82 e0       	ldi	r24, 0x02	; 2
   1d482:	0e 94 36 b7 	call	0x16e6c	; 0x16e6c <count_drive_types>
   1d486:	9f 93       	push	r25
   1d488:	8f 93       	push	r24
   1d48a:	8f e3       	ldi	r24, 0x3F	; 63
   1d48c:	97 e1       	ldi	r25, 0x17	; 23
   1d48e:	9f 93       	push	r25
   1d490:	8f 93       	push	r24
   1d492:	0e 94 97 31 	call	0x632e	; 0x632e <lcd_printf>
   1d496:	0f b6       	in	r0, 0x3f	; 63
   1d498:	f8 94       	cli
   1d49a:	de bf       	out	0x3e, r29	; 62
   1d49c:	0f be       	out	0x3f, r0	; 63
   1d49e:	cd bf       	out	0x3d, r28	; 61
   1d4a0:	81 e0       	ldi	r24, 0x01	; 1
   1d4a2:	0e 94 36 b7 	call	0x16e6c	; 0x16e6c <count_drive_types>
   1d4a6:	9f 93       	push	r25
   1d4a8:	8f 93       	push	r24
   1d4aa:	8f e4       	ldi	r24, 0x4F	; 79
   1d4ac:	97 e1       	ldi	r25, 0x17	; 23
   1d4ae:	9f 93       	push	r25
   1d4b0:	8f 93       	push	r24
   1d4b2:	0e 94 97 31 	call	0x632e	; 0x632e <lcd_printf>
   1d4b6:	0e 94 b5 31 	call	0x636a	; 0x636a <sep>
   1d4ba:	88 e8       	ldi	r24, 0x88	; 136
   1d4bc:	95 e4       	ldi	r25, 0x45	; 69
   1d4be:	1f 92       	push	r1
   1d4c0:	9f 93       	push	r25
   1d4c2:	8f 93       	push	r24
   1d4c4:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <printf_P>
   1d4c8:	0f b6       	in	r0, 0x3f	; 63
   1d4ca:	f8 94       	cli
   1d4cc:	de bf       	out	0x3e, r29	; 62
   1d4ce:	0f be       	out	0x3f, r0	; 63
   1d4d0:	cd bf       	out	0x3d, r28	; 61
   1d4d2:	81 e0       	ldi	r24, 0x01	; 1
   1d4d4:	b2 dd       	rcall	.-1180   	; 0x1d03a <task>
   1d4d6:	fd cf       	rjmp	.-6      	; 0x1d4d2 <main+0x334>

0001d4d8 <__mulsi3>:
   1d4d8:	db 01       	movw	r26, r22
   1d4da:	8f 93       	push	r24
   1d4dc:	9f 93       	push	r25
   1d4de:	8b d0       	rcall	.+278    	; 0x1d5f6 <__muluhisi3>
   1d4e0:	bf 91       	pop	r27
   1d4e2:	af 91       	pop	r26
   1d4e4:	a2 9f       	mul	r26, r18
   1d4e6:	80 0d       	add	r24, r0
   1d4e8:	91 1d       	adc	r25, r1
   1d4ea:	a3 9f       	mul	r26, r19
   1d4ec:	90 0d       	add	r25, r0
   1d4ee:	b2 9f       	mul	r27, r18
   1d4f0:	90 0d       	add	r25, r0
   1d4f2:	11 24       	eor	r1, r1
   1d4f4:	08 95       	ret

0001d4f6 <__udivmodqi4>:
   1d4f6:	99 1b       	sub	r25, r25
   1d4f8:	79 e0       	ldi	r23, 0x09	; 9
   1d4fa:	04 c0       	rjmp	.+8      	; 0x1d504 <__udivmodqi4_ep>

0001d4fc <__udivmodqi4_loop>:
   1d4fc:	99 1f       	adc	r25, r25
   1d4fe:	96 17       	cp	r25, r22
   1d500:	08 f0       	brcs	.+2      	; 0x1d504 <__udivmodqi4_ep>
   1d502:	96 1b       	sub	r25, r22

0001d504 <__udivmodqi4_ep>:
   1d504:	88 1f       	adc	r24, r24
   1d506:	7a 95       	dec	r23
   1d508:	c9 f7       	brne	.-14     	; 0x1d4fc <__udivmodqi4_loop>
   1d50a:	80 95       	com	r24
   1d50c:	08 95       	ret

0001d50e <__udivmodhi4>:
   1d50e:	aa 1b       	sub	r26, r26
   1d510:	bb 1b       	sub	r27, r27
   1d512:	51 e1       	ldi	r21, 0x11	; 17
   1d514:	07 c0       	rjmp	.+14     	; 0x1d524 <__udivmodhi4_ep>

0001d516 <__udivmodhi4_loop>:
   1d516:	aa 1f       	adc	r26, r26
   1d518:	bb 1f       	adc	r27, r27
   1d51a:	a6 17       	cp	r26, r22
   1d51c:	b7 07       	cpc	r27, r23
   1d51e:	10 f0       	brcs	.+4      	; 0x1d524 <__udivmodhi4_ep>
   1d520:	a6 1b       	sub	r26, r22
   1d522:	b7 0b       	sbc	r27, r23

0001d524 <__udivmodhi4_ep>:
   1d524:	88 1f       	adc	r24, r24
   1d526:	99 1f       	adc	r25, r25
   1d528:	5a 95       	dec	r21
   1d52a:	a9 f7       	brne	.-22     	; 0x1d516 <__udivmodhi4_loop>
   1d52c:	80 95       	com	r24
   1d52e:	90 95       	com	r25
   1d530:	bc 01       	movw	r22, r24
   1d532:	cd 01       	movw	r24, r26
   1d534:	08 95       	ret

0001d536 <__divmodhi4>:
   1d536:	97 fb       	bst	r25, 7
   1d538:	07 2e       	mov	r0, r23
   1d53a:	16 f4       	brtc	.+4      	; 0x1d540 <__divmodhi4+0xa>
   1d53c:	00 94       	com	r0
   1d53e:	06 d0       	rcall	.+12     	; 0x1d54c <__divmodhi4_neg1>
   1d540:	77 fd       	sbrc	r23, 7
   1d542:	08 d0       	rcall	.+16     	; 0x1d554 <__divmodhi4_neg2>
   1d544:	e4 df       	rcall	.-56     	; 0x1d50e <__udivmodhi4>
   1d546:	07 fc       	sbrc	r0, 7
   1d548:	05 d0       	rcall	.+10     	; 0x1d554 <__divmodhi4_neg2>
   1d54a:	3e f4       	brtc	.+14     	; 0x1d55a <__divmodhi4_exit>

0001d54c <__divmodhi4_neg1>:
   1d54c:	90 95       	com	r25
   1d54e:	81 95       	neg	r24
   1d550:	9f 4f       	sbci	r25, 0xFF	; 255
   1d552:	08 95       	ret

0001d554 <__divmodhi4_neg2>:
   1d554:	70 95       	com	r23
   1d556:	61 95       	neg	r22
   1d558:	7f 4f       	sbci	r23, 0xFF	; 255

0001d55a <__divmodhi4_exit>:
   1d55a:	08 95       	ret

0001d55c <__udivmodsi4>:
   1d55c:	a1 e2       	ldi	r26, 0x21	; 33
   1d55e:	1a 2e       	mov	r1, r26
   1d560:	aa 1b       	sub	r26, r26
   1d562:	bb 1b       	sub	r27, r27
   1d564:	fd 01       	movw	r30, r26
   1d566:	0d c0       	rjmp	.+26     	; 0x1d582 <__udivmodsi4_ep>

0001d568 <__udivmodsi4_loop>:
   1d568:	aa 1f       	adc	r26, r26
   1d56a:	bb 1f       	adc	r27, r27
   1d56c:	ee 1f       	adc	r30, r30
   1d56e:	ff 1f       	adc	r31, r31
   1d570:	a2 17       	cp	r26, r18
   1d572:	b3 07       	cpc	r27, r19
   1d574:	e4 07       	cpc	r30, r20
   1d576:	f5 07       	cpc	r31, r21
   1d578:	20 f0       	brcs	.+8      	; 0x1d582 <__udivmodsi4_ep>
   1d57a:	a2 1b       	sub	r26, r18
   1d57c:	b3 0b       	sbc	r27, r19
   1d57e:	e4 0b       	sbc	r30, r20
   1d580:	f5 0b       	sbc	r31, r21

0001d582 <__udivmodsi4_ep>:
   1d582:	66 1f       	adc	r22, r22
   1d584:	77 1f       	adc	r23, r23
   1d586:	88 1f       	adc	r24, r24
   1d588:	99 1f       	adc	r25, r25
   1d58a:	1a 94       	dec	r1
   1d58c:	69 f7       	brne	.-38     	; 0x1d568 <__udivmodsi4_loop>
   1d58e:	60 95       	com	r22
   1d590:	70 95       	com	r23
   1d592:	80 95       	com	r24
   1d594:	90 95       	com	r25
   1d596:	9b 01       	movw	r18, r22
   1d598:	ac 01       	movw	r20, r24
   1d59a:	bd 01       	movw	r22, r26
   1d59c:	cf 01       	movw	r24, r30
   1d59e:	08 95       	ret

0001d5a0 <__divmodsi4>:
   1d5a0:	05 2e       	mov	r0, r21
   1d5a2:	97 fb       	bst	r25, 7
   1d5a4:	16 f4       	brtc	.+4      	; 0x1d5aa <__divmodsi4+0xa>
   1d5a6:	00 94       	com	r0
   1d5a8:	0f d0       	rcall	.+30     	; 0x1d5c8 <__negsi2>
   1d5aa:	57 fd       	sbrc	r21, 7
   1d5ac:	05 d0       	rcall	.+10     	; 0x1d5b8 <__divmodsi4_neg2>
   1d5ae:	d6 df       	rcall	.-84     	; 0x1d55c <__udivmodsi4>
   1d5b0:	07 fc       	sbrc	r0, 7
   1d5b2:	02 d0       	rcall	.+4      	; 0x1d5b8 <__divmodsi4_neg2>
   1d5b4:	46 f4       	brtc	.+16     	; 0x1d5c6 <__divmodsi4_exit>
   1d5b6:	08 c0       	rjmp	.+16     	; 0x1d5c8 <__negsi2>

0001d5b8 <__divmodsi4_neg2>:
   1d5b8:	50 95       	com	r21
   1d5ba:	40 95       	com	r20
   1d5bc:	30 95       	com	r19
   1d5be:	21 95       	neg	r18
   1d5c0:	3f 4f       	sbci	r19, 0xFF	; 255
   1d5c2:	4f 4f       	sbci	r20, 0xFF	; 255
   1d5c4:	5f 4f       	sbci	r21, 0xFF	; 255

0001d5c6 <__divmodsi4_exit>:
   1d5c6:	08 95       	ret

0001d5c8 <__negsi2>:
   1d5c8:	90 95       	com	r25
   1d5ca:	80 95       	com	r24
   1d5cc:	70 95       	com	r23
   1d5ce:	61 95       	neg	r22
   1d5d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d5d2:	8f 4f       	sbci	r24, 0xFF	; 255
   1d5d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d5d6:	08 95       	ret

0001d5d8 <__tablejump2__>:
   1d5d8:	ee 0f       	add	r30, r30
   1d5da:	ff 1f       	adc	r31, r31
   1d5dc:	00 24       	eor	r0, r0
   1d5de:	00 1c       	adc	r0, r0
   1d5e0:	0b be       	out	0x3b, r0	; 59
   1d5e2:	07 90       	elpm	r0, Z+
   1d5e4:	f6 91       	elpm	r31, Z
   1d5e6:	e0 2d       	mov	r30, r0
   1d5e8:	09 94       	ijmp

0001d5ea <__usmulhisi3>:
   1d5ea:	6f d0       	rcall	.+222    	; 0x1d6ca <__umulhisi3>

0001d5ec <__usmulhisi3_tail>:
   1d5ec:	b7 ff       	sbrs	r27, 7
   1d5ee:	08 95       	ret
   1d5f0:	82 1b       	sub	r24, r18
   1d5f2:	93 0b       	sbc	r25, r19
   1d5f4:	08 95       	ret

0001d5f6 <__muluhisi3>:
   1d5f6:	69 d0       	rcall	.+210    	; 0x1d6ca <__umulhisi3>
   1d5f8:	a5 9f       	mul	r26, r21
   1d5fa:	90 0d       	add	r25, r0
   1d5fc:	b4 9f       	mul	r27, r20
   1d5fe:	90 0d       	add	r25, r0
   1d600:	a4 9f       	mul	r26, r20
   1d602:	80 0d       	add	r24, r0
   1d604:	91 1d       	adc	r25, r1
   1d606:	11 24       	eor	r1, r1
   1d608:	08 95       	ret

0001d60a <__mulshisi3>:
   1d60a:	b7 ff       	sbrs	r27, 7
   1d60c:	f4 cf       	rjmp	.-24     	; 0x1d5f6 <__muluhisi3>

0001d60e <__mulohisi3>:
   1d60e:	f3 df       	rcall	.-26     	; 0x1d5f6 <__muluhisi3>
   1d610:	82 1b       	sub	r24, r18
   1d612:	93 0b       	sbc	r25, r19
   1d614:	08 95       	ret

0001d616 <__negdi2>:
   1d616:	60 95       	com	r22
   1d618:	70 95       	com	r23
   1d61a:	80 95       	com	r24
   1d61c:	90 95       	com	r25
   1d61e:	30 95       	com	r19
   1d620:	40 95       	com	r20
   1d622:	50 95       	com	r21
   1d624:	21 95       	neg	r18
   1d626:	3f 4f       	sbci	r19, 0xFF	; 255
   1d628:	4f 4f       	sbci	r20, 0xFF	; 255
   1d62a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d62c:	6f 4f       	sbci	r22, 0xFF	; 255
   1d62e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d630:	8f 4f       	sbci	r24, 0xFF	; 255
   1d632:	9f 4f       	sbci	r25, 0xFF	; 255
   1d634:	08 95       	ret

0001d636 <__prologue_saves__>:
   1d636:	2f 92       	push	r2
   1d638:	3f 92       	push	r3
   1d63a:	4f 92       	push	r4
   1d63c:	5f 92       	push	r5
   1d63e:	6f 92       	push	r6
   1d640:	7f 92       	push	r7
   1d642:	8f 92       	push	r8
   1d644:	9f 92       	push	r9
   1d646:	af 92       	push	r10
   1d648:	bf 92       	push	r11
   1d64a:	cf 92       	push	r12
   1d64c:	df 92       	push	r13
   1d64e:	ef 92       	push	r14
   1d650:	ff 92       	push	r15
   1d652:	0f 93       	push	r16
   1d654:	1f 93       	push	r17
   1d656:	cf 93       	push	r28
   1d658:	df 93       	push	r29
   1d65a:	cd b7       	in	r28, 0x3d	; 61
   1d65c:	de b7       	in	r29, 0x3e	; 62
   1d65e:	ca 1b       	sub	r28, r26
   1d660:	db 0b       	sbc	r29, r27
   1d662:	0f b6       	in	r0, 0x3f	; 63
   1d664:	f8 94       	cli
   1d666:	de bf       	out	0x3e, r29	; 62
   1d668:	0f be       	out	0x3f, r0	; 63
   1d66a:	cd bf       	out	0x3d, r28	; 61
   1d66c:	09 94       	ijmp

0001d66e <__epilogue_restores__>:
   1d66e:	2a 88       	ldd	r2, Y+18	; 0x12
   1d670:	39 88       	ldd	r3, Y+17	; 0x11
   1d672:	48 88       	ldd	r4, Y+16	; 0x10
   1d674:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d676:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d678:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d67a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d67c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d67e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d680:	b9 84       	ldd	r11, Y+9	; 0x09
   1d682:	c8 84       	ldd	r12, Y+8	; 0x08
   1d684:	df 80       	ldd	r13, Y+7	; 0x07
   1d686:	ee 80       	ldd	r14, Y+6	; 0x06
   1d688:	fd 80       	ldd	r15, Y+5	; 0x05
   1d68a:	0c 81       	ldd	r16, Y+4	; 0x04
   1d68c:	1b 81       	ldd	r17, Y+3	; 0x03
   1d68e:	aa 81       	ldd	r26, Y+2	; 0x02
   1d690:	b9 81       	ldd	r27, Y+1	; 0x01
   1d692:	ce 0f       	add	r28, r30
   1d694:	d1 1d       	adc	r29, r1
   1d696:	0f b6       	in	r0, 0x3f	; 63
   1d698:	f8 94       	cli
   1d69a:	de bf       	out	0x3e, r29	; 62
   1d69c:	0f be       	out	0x3f, r0	; 63
   1d69e:	cd bf       	out	0x3d, r28	; 61
   1d6a0:	ed 01       	movw	r28, r26
   1d6a2:	08 95       	ret

0001d6a4 <__xload_1>:
   1d6a4:	57 fd       	sbrc	r21, 7
   1d6a6:	03 c0       	rjmp	.+6      	; 0x1d6ae <__xload_1+0xa>
   1d6a8:	5b bf       	out	0x3b, r21	; 59
   1d6aa:	67 91       	elpm	r22, Z+
   1d6ac:	08 95       	ret
   1d6ae:	60 81       	ld	r22, Z
   1d6b0:	08 95       	ret

0001d6b2 <__cmpdi2_s8>:
   1d6b2:	00 24       	eor	r0, r0
   1d6b4:	a7 fd       	sbrc	r26, 7
   1d6b6:	00 94       	com	r0
   1d6b8:	2a 17       	cp	r18, r26
   1d6ba:	30 05       	cpc	r19, r0
   1d6bc:	40 05       	cpc	r20, r0
   1d6be:	50 05       	cpc	r21, r0
   1d6c0:	60 05       	cpc	r22, r0
   1d6c2:	70 05       	cpc	r23, r0
   1d6c4:	80 05       	cpc	r24, r0
   1d6c6:	90 05       	cpc	r25, r0
   1d6c8:	08 95       	ret

0001d6ca <__umulhisi3>:
   1d6ca:	a2 9f       	mul	r26, r18
   1d6cc:	b0 01       	movw	r22, r0
   1d6ce:	b3 9f       	mul	r27, r19
   1d6d0:	c0 01       	movw	r24, r0
   1d6d2:	a3 9f       	mul	r26, r19
   1d6d4:	70 0d       	add	r23, r0
   1d6d6:	81 1d       	adc	r24, r1
   1d6d8:	11 24       	eor	r1, r1
   1d6da:	91 1d       	adc	r25, r1
   1d6dc:	b2 9f       	mul	r27, r18
   1d6de:	70 0d       	add	r23, r0
   1d6e0:	81 1d       	adc	r24, r1
   1d6e2:	11 24       	eor	r1, r1
   1d6e4:	91 1d       	adc	r25, r1
   1d6e6:	08 95       	ret

0001d6e8 <__subsf3>:
   1d6e8:	50 58       	subi	r21, 0x80	; 128

0001d6ea <__addsf3>:
   1d6ea:	bb 27       	eor	r27, r27
   1d6ec:	aa 27       	eor	r26, r26
   1d6ee:	0e d0       	rcall	.+28     	; 0x1d70c <__addsf3x>
   1d6f0:	75 c1       	rjmp	.+746    	; 0x1d9dc <__fp_round>
   1d6f2:	66 d1       	rcall	.+716    	; 0x1d9c0 <__fp_pscA>
   1d6f4:	30 f0       	brcs	.+12     	; 0x1d702 <__addsf3+0x18>
   1d6f6:	6b d1       	rcall	.+726    	; 0x1d9ce <__fp_pscB>
   1d6f8:	20 f0       	brcs	.+8      	; 0x1d702 <__addsf3+0x18>
   1d6fa:	31 f4       	brne	.+12     	; 0x1d708 <__addsf3+0x1e>
   1d6fc:	9f 3f       	cpi	r25, 0xFF	; 255
   1d6fe:	11 f4       	brne	.+4      	; 0x1d704 <__addsf3+0x1a>
   1d700:	1e f4       	brtc	.+6      	; 0x1d708 <__addsf3+0x1e>
   1d702:	5b c1       	rjmp	.+694    	; 0x1d9ba <__fp_nan>
   1d704:	0e f4       	brtc	.+2      	; 0x1d708 <__addsf3+0x1e>
   1d706:	e0 95       	com	r30
   1d708:	e7 fb       	bst	r30, 7
   1d70a:	51 c1       	rjmp	.+674    	; 0x1d9ae <__fp_inf>

0001d70c <__addsf3x>:
   1d70c:	e9 2f       	mov	r30, r25
   1d70e:	77 d1       	rcall	.+750    	; 0x1d9fe <__fp_split3>
   1d710:	80 f3       	brcs	.-32     	; 0x1d6f2 <__addsf3+0x8>
   1d712:	ba 17       	cp	r27, r26
   1d714:	62 07       	cpc	r22, r18
   1d716:	73 07       	cpc	r23, r19
   1d718:	84 07       	cpc	r24, r20
   1d71a:	95 07       	cpc	r25, r21
   1d71c:	18 f0       	brcs	.+6      	; 0x1d724 <__addsf3x+0x18>
   1d71e:	71 f4       	brne	.+28     	; 0x1d73c <__addsf3x+0x30>
   1d720:	9e f5       	brtc	.+102    	; 0x1d788 <__addsf3x+0x7c>
   1d722:	8f c1       	rjmp	.+798    	; 0x1da42 <__fp_zero>
   1d724:	0e f4       	brtc	.+2      	; 0x1d728 <__addsf3x+0x1c>
   1d726:	e0 95       	com	r30
   1d728:	0b 2e       	mov	r0, r27
   1d72a:	ba 2f       	mov	r27, r26
   1d72c:	a0 2d       	mov	r26, r0
   1d72e:	0b 01       	movw	r0, r22
   1d730:	b9 01       	movw	r22, r18
   1d732:	90 01       	movw	r18, r0
   1d734:	0c 01       	movw	r0, r24
   1d736:	ca 01       	movw	r24, r20
   1d738:	a0 01       	movw	r20, r0
   1d73a:	11 24       	eor	r1, r1
   1d73c:	ff 27       	eor	r31, r31
   1d73e:	59 1b       	sub	r21, r25
   1d740:	99 f0       	breq	.+38     	; 0x1d768 <__addsf3x+0x5c>
   1d742:	59 3f       	cpi	r21, 0xF9	; 249
   1d744:	50 f4       	brcc	.+20     	; 0x1d75a <__addsf3x+0x4e>
   1d746:	50 3e       	cpi	r21, 0xE0	; 224
   1d748:	68 f1       	brcs	.+90     	; 0x1d7a4 <__addsf3x+0x98>
   1d74a:	1a 16       	cp	r1, r26
   1d74c:	f0 40       	sbci	r31, 0x00	; 0
   1d74e:	a2 2f       	mov	r26, r18
   1d750:	23 2f       	mov	r18, r19
   1d752:	34 2f       	mov	r19, r20
   1d754:	44 27       	eor	r20, r20
   1d756:	58 5f       	subi	r21, 0xF8	; 248
   1d758:	f3 cf       	rjmp	.-26     	; 0x1d740 <__addsf3x+0x34>
   1d75a:	46 95       	lsr	r20
   1d75c:	37 95       	ror	r19
   1d75e:	27 95       	ror	r18
   1d760:	a7 95       	ror	r26
   1d762:	f0 40       	sbci	r31, 0x00	; 0
   1d764:	53 95       	inc	r21
   1d766:	c9 f7       	brne	.-14     	; 0x1d75a <__addsf3x+0x4e>
   1d768:	7e f4       	brtc	.+30     	; 0x1d788 <__addsf3x+0x7c>
   1d76a:	1f 16       	cp	r1, r31
   1d76c:	ba 0b       	sbc	r27, r26
   1d76e:	62 0b       	sbc	r22, r18
   1d770:	73 0b       	sbc	r23, r19
   1d772:	84 0b       	sbc	r24, r20
   1d774:	ba f0       	brmi	.+46     	; 0x1d7a4 <__addsf3x+0x98>
   1d776:	91 50       	subi	r25, 0x01	; 1
   1d778:	a1 f0       	breq	.+40     	; 0x1d7a2 <__addsf3x+0x96>
   1d77a:	ff 0f       	add	r31, r31
   1d77c:	bb 1f       	adc	r27, r27
   1d77e:	66 1f       	adc	r22, r22
   1d780:	77 1f       	adc	r23, r23
   1d782:	88 1f       	adc	r24, r24
   1d784:	c2 f7       	brpl	.-16     	; 0x1d776 <__addsf3x+0x6a>
   1d786:	0e c0       	rjmp	.+28     	; 0x1d7a4 <__addsf3x+0x98>
   1d788:	ba 0f       	add	r27, r26
   1d78a:	62 1f       	adc	r22, r18
   1d78c:	73 1f       	adc	r23, r19
   1d78e:	84 1f       	adc	r24, r20
   1d790:	48 f4       	brcc	.+18     	; 0x1d7a4 <__addsf3x+0x98>
   1d792:	87 95       	ror	r24
   1d794:	77 95       	ror	r23
   1d796:	67 95       	ror	r22
   1d798:	b7 95       	ror	r27
   1d79a:	f7 95       	ror	r31
   1d79c:	9e 3f       	cpi	r25, 0xFE	; 254
   1d79e:	08 f0       	brcs	.+2      	; 0x1d7a2 <__addsf3x+0x96>
   1d7a0:	b3 cf       	rjmp	.-154    	; 0x1d708 <__addsf3+0x1e>
   1d7a2:	93 95       	inc	r25
   1d7a4:	88 0f       	add	r24, r24
   1d7a6:	08 f0       	brcs	.+2      	; 0x1d7aa <__addsf3x+0x9e>
   1d7a8:	99 27       	eor	r25, r25
   1d7aa:	ee 0f       	add	r30, r30
   1d7ac:	97 95       	ror	r25
   1d7ae:	87 95       	ror	r24
   1d7b0:	08 95       	ret

0001d7b2 <__cmpsf2>:
   1d7b2:	d9 d0       	rcall	.+434    	; 0x1d966 <__fp_cmp>
   1d7b4:	08 f4       	brcc	.+2      	; 0x1d7b8 <__cmpsf2+0x6>
   1d7b6:	81 e0       	ldi	r24, 0x01	; 1
   1d7b8:	08 95       	ret

0001d7ba <__divsf3>:
   1d7ba:	0c d0       	rcall	.+24     	; 0x1d7d4 <__divsf3x>
   1d7bc:	0f c1       	rjmp	.+542    	; 0x1d9dc <__fp_round>
   1d7be:	07 d1       	rcall	.+526    	; 0x1d9ce <__fp_pscB>
   1d7c0:	40 f0       	brcs	.+16     	; 0x1d7d2 <__divsf3+0x18>
   1d7c2:	fe d0       	rcall	.+508    	; 0x1d9c0 <__fp_pscA>
   1d7c4:	30 f0       	brcs	.+12     	; 0x1d7d2 <__divsf3+0x18>
   1d7c6:	21 f4       	brne	.+8      	; 0x1d7d0 <__divsf3+0x16>
   1d7c8:	5f 3f       	cpi	r21, 0xFF	; 255
   1d7ca:	19 f0       	breq	.+6      	; 0x1d7d2 <__divsf3+0x18>
   1d7cc:	f0 c0       	rjmp	.+480    	; 0x1d9ae <__fp_inf>
   1d7ce:	51 11       	cpse	r21, r1
   1d7d0:	39 c1       	rjmp	.+626    	; 0x1da44 <__fp_szero>
   1d7d2:	f3 c0       	rjmp	.+486    	; 0x1d9ba <__fp_nan>

0001d7d4 <__divsf3x>:
   1d7d4:	14 d1       	rcall	.+552    	; 0x1d9fe <__fp_split3>
   1d7d6:	98 f3       	brcs	.-26     	; 0x1d7be <__divsf3+0x4>

0001d7d8 <__divsf3_pse>:
   1d7d8:	99 23       	and	r25, r25
   1d7da:	c9 f3       	breq	.-14     	; 0x1d7ce <__divsf3+0x14>
   1d7dc:	55 23       	and	r21, r21
   1d7de:	b1 f3       	breq	.-20     	; 0x1d7cc <__divsf3+0x12>
   1d7e0:	95 1b       	sub	r25, r21
   1d7e2:	55 0b       	sbc	r21, r21
   1d7e4:	bb 27       	eor	r27, r27
   1d7e6:	aa 27       	eor	r26, r26
   1d7e8:	62 17       	cp	r22, r18
   1d7ea:	73 07       	cpc	r23, r19
   1d7ec:	84 07       	cpc	r24, r20
   1d7ee:	38 f0       	brcs	.+14     	; 0x1d7fe <__divsf3_pse+0x26>
   1d7f0:	9f 5f       	subi	r25, 0xFF	; 255
   1d7f2:	5f 4f       	sbci	r21, 0xFF	; 255
   1d7f4:	22 0f       	add	r18, r18
   1d7f6:	33 1f       	adc	r19, r19
   1d7f8:	44 1f       	adc	r20, r20
   1d7fa:	aa 1f       	adc	r26, r26
   1d7fc:	a9 f3       	breq	.-22     	; 0x1d7e8 <__divsf3_pse+0x10>
   1d7fe:	33 d0       	rcall	.+102    	; 0x1d866 <__divsf3_pse+0x8e>
   1d800:	0e 2e       	mov	r0, r30
   1d802:	3a f0       	brmi	.+14     	; 0x1d812 <__divsf3_pse+0x3a>
   1d804:	e0 e8       	ldi	r30, 0x80	; 128
   1d806:	30 d0       	rcall	.+96     	; 0x1d868 <__divsf3_pse+0x90>
   1d808:	91 50       	subi	r25, 0x01	; 1
   1d80a:	50 40       	sbci	r21, 0x00	; 0
   1d80c:	e6 95       	lsr	r30
   1d80e:	00 1c       	adc	r0, r0
   1d810:	ca f7       	brpl	.-14     	; 0x1d804 <__divsf3_pse+0x2c>
   1d812:	29 d0       	rcall	.+82     	; 0x1d866 <__divsf3_pse+0x8e>
   1d814:	fe 2f       	mov	r31, r30
   1d816:	27 d0       	rcall	.+78     	; 0x1d866 <__divsf3_pse+0x8e>
   1d818:	66 0f       	add	r22, r22
   1d81a:	77 1f       	adc	r23, r23
   1d81c:	88 1f       	adc	r24, r24
   1d81e:	bb 1f       	adc	r27, r27
   1d820:	26 17       	cp	r18, r22
   1d822:	37 07       	cpc	r19, r23
   1d824:	48 07       	cpc	r20, r24
   1d826:	ab 07       	cpc	r26, r27
   1d828:	b0 e8       	ldi	r27, 0x80	; 128
   1d82a:	09 f0       	breq	.+2      	; 0x1d82e <__divsf3_pse+0x56>
   1d82c:	bb 0b       	sbc	r27, r27
   1d82e:	80 2d       	mov	r24, r0
   1d830:	bf 01       	movw	r22, r30
   1d832:	ff 27       	eor	r31, r31
   1d834:	93 58       	subi	r25, 0x83	; 131
   1d836:	5f 4f       	sbci	r21, 0xFF	; 255
   1d838:	2a f0       	brmi	.+10     	; 0x1d844 <__divsf3_pse+0x6c>
   1d83a:	9e 3f       	cpi	r25, 0xFE	; 254
   1d83c:	51 05       	cpc	r21, r1
   1d83e:	68 f0       	brcs	.+26     	; 0x1d85a <__divsf3_pse+0x82>
   1d840:	b6 c0       	rjmp	.+364    	; 0x1d9ae <__fp_inf>
   1d842:	00 c1       	rjmp	.+512    	; 0x1da44 <__fp_szero>
   1d844:	5f 3f       	cpi	r21, 0xFF	; 255
   1d846:	ec f3       	brlt	.-6      	; 0x1d842 <__divsf3_pse+0x6a>
   1d848:	98 3e       	cpi	r25, 0xE8	; 232
   1d84a:	dc f3       	brlt	.-10     	; 0x1d842 <__divsf3_pse+0x6a>
   1d84c:	86 95       	lsr	r24
   1d84e:	77 95       	ror	r23
   1d850:	67 95       	ror	r22
   1d852:	b7 95       	ror	r27
   1d854:	f7 95       	ror	r31
   1d856:	9f 5f       	subi	r25, 0xFF	; 255
   1d858:	c9 f7       	brne	.-14     	; 0x1d84c <__divsf3_pse+0x74>
   1d85a:	88 0f       	add	r24, r24
   1d85c:	91 1d       	adc	r25, r1
   1d85e:	96 95       	lsr	r25
   1d860:	87 95       	ror	r24
   1d862:	97 f9       	bld	r25, 7
   1d864:	08 95       	ret
   1d866:	e1 e0       	ldi	r30, 0x01	; 1
   1d868:	66 0f       	add	r22, r22
   1d86a:	77 1f       	adc	r23, r23
   1d86c:	88 1f       	adc	r24, r24
   1d86e:	bb 1f       	adc	r27, r27
   1d870:	62 17       	cp	r22, r18
   1d872:	73 07       	cpc	r23, r19
   1d874:	84 07       	cpc	r24, r20
   1d876:	ba 07       	cpc	r27, r26
   1d878:	20 f0       	brcs	.+8      	; 0x1d882 <__divsf3_pse+0xaa>
   1d87a:	62 1b       	sub	r22, r18
   1d87c:	73 0b       	sbc	r23, r19
   1d87e:	84 0b       	sbc	r24, r20
   1d880:	ba 0b       	sbc	r27, r26
   1d882:	ee 1f       	adc	r30, r30
   1d884:	88 f7       	brcc	.-30     	; 0x1d868 <__divsf3_pse+0x90>
   1d886:	e0 95       	com	r30
   1d888:	08 95       	ret

0001d88a <__fixsfsi>:
   1d88a:	04 d0       	rcall	.+8      	; 0x1d894 <__fixunssfsi>
   1d88c:	68 94       	set
   1d88e:	b1 11       	cpse	r27, r1
   1d890:	d9 c0       	rjmp	.+434    	; 0x1da44 <__fp_szero>
   1d892:	08 95       	ret

0001d894 <__fixunssfsi>:
   1d894:	bc d0       	rcall	.+376    	; 0x1da0e <__fp_splitA>
   1d896:	88 f0       	brcs	.+34     	; 0x1d8ba <__fixunssfsi+0x26>
   1d898:	9f 57       	subi	r25, 0x7F	; 127
   1d89a:	90 f0       	brcs	.+36     	; 0x1d8c0 <__fixunssfsi+0x2c>
   1d89c:	b9 2f       	mov	r27, r25
   1d89e:	99 27       	eor	r25, r25
   1d8a0:	b7 51       	subi	r27, 0x17	; 23
   1d8a2:	a0 f0       	brcs	.+40     	; 0x1d8cc <__fixunssfsi+0x38>
   1d8a4:	d1 f0       	breq	.+52     	; 0x1d8da <__fixunssfsi+0x46>
   1d8a6:	66 0f       	add	r22, r22
   1d8a8:	77 1f       	adc	r23, r23
   1d8aa:	88 1f       	adc	r24, r24
   1d8ac:	99 1f       	adc	r25, r25
   1d8ae:	1a f0       	brmi	.+6      	; 0x1d8b6 <__fixunssfsi+0x22>
   1d8b0:	ba 95       	dec	r27
   1d8b2:	c9 f7       	brne	.-14     	; 0x1d8a6 <__fixunssfsi+0x12>
   1d8b4:	12 c0       	rjmp	.+36     	; 0x1d8da <__fixunssfsi+0x46>
   1d8b6:	b1 30       	cpi	r27, 0x01	; 1
   1d8b8:	81 f0       	breq	.+32     	; 0x1d8da <__fixunssfsi+0x46>
   1d8ba:	c3 d0       	rcall	.+390    	; 0x1da42 <__fp_zero>
   1d8bc:	b1 e0       	ldi	r27, 0x01	; 1
   1d8be:	08 95       	ret
   1d8c0:	c0 c0       	rjmp	.+384    	; 0x1da42 <__fp_zero>
   1d8c2:	67 2f       	mov	r22, r23
   1d8c4:	78 2f       	mov	r23, r24
   1d8c6:	88 27       	eor	r24, r24
   1d8c8:	b8 5f       	subi	r27, 0xF8	; 248
   1d8ca:	39 f0       	breq	.+14     	; 0x1d8da <__fixunssfsi+0x46>
   1d8cc:	b9 3f       	cpi	r27, 0xF9	; 249
   1d8ce:	cc f3       	brlt	.-14     	; 0x1d8c2 <__fixunssfsi+0x2e>
   1d8d0:	86 95       	lsr	r24
   1d8d2:	77 95       	ror	r23
   1d8d4:	67 95       	ror	r22
   1d8d6:	b3 95       	inc	r27
   1d8d8:	d9 f7       	brne	.-10     	; 0x1d8d0 <__fixunssfsi+0x3c>
   1d8da:	3e f4       	brtc	.+14     	; 0x1d8ea <__fixunssfsi+0x56>
   1d8dc:	90 95       	com	r25
   1d8de:	80 95       	com	r24
   1d8e0:	70 95       	com	r23
   1d8e2:	61 95       	neg	r22
   1d8e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d8e6:	8f 4f       	sbci	r24, 0xFF	; 255
   1d8e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1d8ea:	08 95       	ret

0001d8ec <__floatunsisf>:
   1d8ec:	e8 94       	clt
   1d8ee:	09 c0       	rjmp	.+18     	; 0x1d902 <__floatsisf+0x12>

0001d8f0 <__floatsisf>:
   1d8f0:	97 fb       	bst	r25, 7
   1d8f2:	3e f4       	brtc	.+14     	; 0x1d902 <__floatsisf+0x12>
   1d8f4:	90 95       	com	r25
   1d8f6:	80 95       	com	r24
   1d8f8:	70 95       	com	r23
   1d8fa:	61 95       	neg	r22
   1d8fc:	7f 4f       	sbci	r23, 0xFF	; 255
   1d8fe:	8f 4f       	sbci	r24, 0xFF	; 255
   1d900:	9f 4f       	sbci	r25, 0xFF	; 255
   1d902:	99 23       	and	r25, r25
   1d904:	a9 f0       	breq	.+42     	; 0x1d930 <__floatsisf+0x40>
   1d906:	f9 2f       	mov	r31, r25
   1d908:	96 e9       	ldi	r25, 0x96	; 150
   1d90a:	bb 27       	eor	r27, r27
   1d90c:	93 95       	inc	r25
   1d90e:	f6 95       	lsr	r31
   1d910:	87 95       	ror	r24
   1d912:	77 95       	ror	r23
   1d914:	67 95       	ror	r22
   1d916:	b7 95       	ror	r27
   1d918:	f1 11       	cpse	r31, r1
   1d91a:	f8 cf       	rjmp	.-16     	; 0x1d90c <__floatsisf+0x1c>
   1d91c:	fa f4       	brpl	.+62     	; 0x1d95c <__floatsisf+0x6c>
   1d91e:	bb 0f       	add	r27, r27
   1d920:	11 f4       	brne	.+4      	; 0x1d926 <__floatsisf+0x36>
   1d922:	60 ff       	sbrs	r22, 0
   1d924:	1b c0       	rjmp	.+54     	; 0x1d95c <__floatsisf+0x6c>
   1d926:	6f 5f       	subi	r22, 0xFF	; 255
   1d928:	7f 4f       	sbci	r23, 0xFF	; 255
   1d92a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d92c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d92e:	16 c0       	rjmp	.+44     	; 0x1d95c <__floatsisf+0x6c>
   1d930:	88 23       	and	r24, r24
   1d932:	11 f0       	breq	.+4      	; 0x1d938 <__floatsisf+0x48>
   1d934:	96 e9       	ldi	r25, 0x96	; 150
   1d936:	11 c0       	rjmp	.+34     	; 0x1d95a <__floatsisf+0x6a>
   1d938:	77 23       	and	r23, r23
   1d93a:	21 f0       	breq	.+8      	; 0x1d944 <__floatsisf+0x54>
   1d93c:	9e e8       	ldi	r25, 0x8E	; 142
   1d93e:	87 2f       	mov	r24, r23
   1d940:	76 2f       	mov	r23, r22
   1d942:	05 c0       	rjmp	.+10     	; 0x1d94e <__floatsisf+0x5e>
   1d944:	66 23       	and	r22, r22
   1d946:	71 f0       	breq	.+28     	; 0x1d964 <__floatsisf+0x74>
   1d948:	96 e8       	ldi	r25, 0x86	; 134
   1d94a:	86 2f       	mov	r24, r22
   1d94c:	70 e0       	ldi	r23, 0x00	; 0
   1d94e:	60 e0       	ldi	r22, 0x00	; 0
   1d950:	2a f0       	brmi	.+10     	; 0x1d95c <__floatsisf+0x6c>
   1d952:	9a 95       	dec	r25
   1d954:	66 0f       	add	r22, r22
   1d956:	77 1f       	adc	r23, r23
   1d958:	88 1f       	adc	r24, r24
   1d95a:	da f7       	brpl	.-10     	; 0x1d952 <__floatsisf+0x62>
   1d95c:	88 0f       	add	r24, r24
   1d95e:	96 95       	lsr	r25
   1d960:	87 95       	ror	r24
   1d962:	97 f9       	bld	r25, 7
   1d964:	08 95       	ret

0001d966 <__fp_cmp>:
   1d966:	99 0f       	add	r25, r25
   1d968:	00 08       	sbc	r0, r0
   1d96a:	55 0f       	add	r21, r21
   1d96c:	aa 0b       	sbc	r26, r26
   1d96e:	e0 e8       	ldi	r30, 0x80	; 128
   1d970:	fe ef       	ldi	r31, 0xFE	; 254
   1d972:	16 16       	cp	r1, r22
   1d974:	17 06       	cpc	r1, r23
   1d976:	e8 07       	cpc	r30, r24
   1d978:	f9 07       	cpc	r31, r25
   1d97a:	c0 f0       	brcs	.+48     	; 0x1d9ac <__fp_cmp+0x46>
   1d97c:	12 16       	cp	r1, r18
   1d97e:	13 06       	cpc	r1, r19
   1d980:	e4 07       	cpc	r30, r20
   1d982:	f5 07       	cpc	r31, r21
   1d984:	98 f0       	brcs	.+38     	; 0x1d9ac <__fp_cmp+0x46>
   1d986:	62 1b       	sub	r22, r18
   1d988:	73 0b       	sbc	r23, r19
   1d98a:	84 0b       	sbc	r24, r20
   1d98c:	95 0b       	sbc	r25, r21
   1d98e:	39 f4       	brne	.+14     	; 0x1d99e <__fp_cmp+0x38>
   1d990:	0a 26       	eor	r0, r26
   1d992:	61 f0       	breq	.+24     	; 0x1d9ac <__fp_cmp+0x46>
   1d994:	23 2b       	or	r18, r19
   1d996:	24 2b       	or	r18, r20
   1d998:	25 2b       	or	r18, r21
   1d99a:	21 f4       	brne	.+8      	; 0x1d9a4 <__fp_cmp+0x3e>
   1d99c:	08 95       	ret
   1d99e:	0a 26       	eor	r0, r26
   1d9a0:	09 f4       	brne	.+2      	; 0x1d9a4 <__fp_cmp+0x3e>
   1d9a2:	a1 40       	sbci	r26, 0x01	; 1
   1d9a4:	a6 95       	lsr	r26
   1d9a6:	8f ef       	ldi	r24, 0xFF	; 255
   1d9a8:	81 1d       	adc	r24, r1
   1d9aa:	81 1d       	adc	r24, r1
   1d9ac:	08 95       	ret

0001d9ae <__fp_inf>:
   1d9ae:	97 f9       	bld	r25, 7
   1d9b0:	9f 67       	ori	r25, 0x7F	; 127
   1d9b2:	80 e8       	ldi	r24, 0x80	; 128
   1d9b4:	70 e0       	ldi	r23, 0x00	; 0
   1d9b6:	60 e0       	ldi	r22, 0x00	; 0
   1d9b8:	08 95       	ret

0001d9ba <__fp_nan>:
   1d9ba:	9f ef       	ldi	r25, 0xFF	; 255
   1d9bc:	80 ec       	ldi	r24, 0xC0	; 192
   1d9be:	08 95       	ret

0001d9c0 <__fp_pscA>:
   1d9c0:	00 24       	eor	r0, r0
   1d9c2:	0a 94       	dec	r0
   1d9c4:	16 16       	cp	r1, r22
   1d9c6:	17 06       	cpc	r1, r23
   1d9c8:	18 06       	cpc	r1, r24
   1d9ca:	09 06       	cpc	r0, r25
   1d9cc:	08 95       	ret

0001d9ce <__fp_pscB>:
   1d9ce:	00 24       	eor	r0, r0
   1d9d0:	0a 94       	dec	r0
   1d9d2:	12 16       	cp	r1, r18
   1d9d4:	13 06       	cpc	r1, r19
   1d9d6:	14 06       	cpc	r1, r20
   1d9d8:	05 06       	cpc	r0, r21
   1d9da:	08 95       	ret

0001d9dc <__fp_round>:
   1d9dc:	09 2e       	mov	r0, r25
   1d9de:	03 94       	inc	r0
   1d9e0:	00 0c       	add	r0, r0
   1d9e2:	11 f4       	brne	.+4      	; 0x1d9e8 <__fp_round+0xc>
   1d9e4:	88 23       	and	r24, r24
   1d9e6:	52 f0       	brmi	.+20     	; 0x1d9fc <__fp_round+0x20>
   1d9e8:	bb 0f       	add	r27, r27
   1d9ea:	40 f4       	brcc	.+16     	; 0x1d9fc <__fp_round+0x20>
   1d9ec:	bf 2b       	or	r27, r31
   1d9ee:	11 f4       	brne	.+4      	; 0x1d9f4 <__fp_round+0x18>
   1d9f0:	60 ff       	sbrs	r22, 0
   1d9f2:	04 c0       	rjmp	.+8      	; 0x1d9fc <__fp_round+0x20>
   1d9f4:	6f 5f       	subi	r22, 0xFF	; 255
   1d9f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9f8:	8f 4f       	sbci	r24, 0xFF	; 255
   1d9fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1d9fc:	08 95       	ret

0001d9fe <__fp_split3>:
   1d9fe:	57 fd       	sbrc	r21, 7
   1da00:	90 58       	subi	r25, 0x80	; 128
   1da02:	44 0f       	add	r20, r20
   1da04:	55 1f       	adc	r21, r21
   1da06:	59 f0       	breq	.+22     	; 0x1da1e <__fp_splitA+0x10>
   1da08:	5f 3f       	cpi	r21, 0xFF	; 255
   1da0a:	71 f0       	breq	.+28     	; 0x1da28 <__fp_splitA+0x1a>
   1da0c:	47 95       	ror	r20

0001da0e <__fp_splitA>:
   1da0e:	88 0f       	add	r24, r24
   1da10:	97 fb       	bst	r25, 7
   1da12:	99 1f       	adc	r25, r25
   1da14:	61 f0       	breq	.+24     	; 0x1da2e <__fp_splitA+0x20>
   1da16:	9f 3f       	cpi	r25, 0xFF	; 255
   1da18:	79 f0       	breq	.+30     	; 0x1da38 <__fp_splitA+0x2a>
   1da1a:	87 95       	ror	r24
   1da1c:	08 95       	ret
   1da1e:	12 16       	cp	r1, r18
   1da20:	13 06       	cpc	r1, r19
   1da22:	14 06       	cpc	r1, r20
   1da24:	55 1f       	adc	r21, r21
   1da26:	f2 cf       	rjmp	.-28     	; 0x1da0c <__fp_split3+0xe>
   1da28:	46 95       	lsr	r20
   1da2a:	f1 df       	rcall	.-30     	; 0x1da0e <__fp_splitA>
   1da2c:	08 c0       	rjmp	.+16     	; 0x1da3e <__fp_splitA+0x30>
   1da2e:	16 16       	cp	r1, r22
   1da30:	17 06       	cpc	r1, r23
   1da32:	18 06       	cpc	r1, r24
   1da34:	99 1f       	adc	r25, r25
   1da36:	f1 cf       	rjmp	.-30     	; 0x1da1a <__fp_splitA+0xc>
   1da38:	86 95       	lsr	r24
   1da3a:	71 05       	cpc	r23, r1
   1da3c:	61 05       	cpc	r22, r1
   1da3e:	08 94       	sec
   1da40:	08 95       	ret

0001da42 <__fp_zero>:
   1da42:	e8 94       	clt

0001da44 <__fp_szero>:
   1da44:	bb 27       	eor	r27, r27
   1da46:	66 27       	eor	r22, r22
   1da48:	77 27       	eor	r23, r23
   1da4a:	cb 01       	movw	r24, r22
   1da4c:	97 f9       	bld	r25, 7
   1da4e:	08 95       	ret

0001da50 <__gesf2>:
   1da50:	8a df       	rcall	.-236    	; 0x1d966 <__fp_cmp>
   1da52:	08 f4       	brcc	.+2      	; 0x1da56 <__gesf2+0x6>
   1da54:	8f ef       	ldi	r24, 0xFF	; 255
   1da56:	08 95       	ret

0001da58 <__mulsf3>:
   1da58:	0b d0       	rcall	.+22     	; 0x1da70 <__mulsf3x>
   1da5a:	c0 cf       	rjmp	.-128    	; 0x1d9dc <__fp_round>
   1da5c:	b1 df       	rcall	.-158    	; 0x1d9c0 <__fp_pscA>
   1da5e:	28 f0       	brcs	.+10     	; 0x1da6a <__mulsf3+0x12>
   1da60:	b6 df       	rcall	.-148    	; 0x1d9ce <__fp_pscB>
   1da62:	18 f0       	brcs	.+6      	; 0x1da6a <__mulsf3+0x12>
   1da64:	95 23       	and	r25, r21
   1da66:	09 f0       	breq	.+2      	; 0x1da6a <__mulsf3+0x12>
   1da68:	a2 cf       	rjmp	.-188    	; 0x1d9ae <__fp_inf>
   1da6a:	a7 cf       	rjmp	.-178    	; 0x1d9ba <__fp_nan>
   1da6c:	11 24       	eor	r1, r1
   1da6e:	ea cf       	rjmp	.-44     	; 0x1da44 <__fp_szero>

0001da70 <__mulsf3x>:
   1da70:	c6 df       	rcall	.-116    	; 0x1d9fe <__fp_split3>
   1da72:	a0 f3       	brcs	.-24     	; 0x1da5c <__mulsf3+0x4>

0001da74 <__mulsf3_pse>:
   1da74:	95 9f       	mul	r25, r21
   1da76:	d1 f3       	breq	.-12     	; 0x1da6c <__mulsf3+0x14>
   1da78:	95 0f       	add	r25, r21
   1da7a:	50 e0       	ldi	r21, 0x00	; 0
   1da7c:	55 1f       	adc	r21, r21
   1da7e:	62 9f       	mul	r22, r18
   1da80:	f0 01       	movw	r30, r0
   1da82:	72 9f       	mul	r23, r18
   1da84:	bb 27       	eor	r27, r27
   1da86:	f0 0d       	add	r31, r0
   1da88:	b1 1d       	adc	r27, r1
   1da8a:	63 9f       	mul	r22, r19
   1da8c:	aa 27       	eor	r26, r26
   1da8e:	f0 0d       	add	r31, r0
   1da90:	b1 1d       	adc	r27, r1
   1da92:	aa 1f       	adc	r26, r26
   1da94:	64 9f       	mul	r22, r20
   1da96:	66 27       	eor	r22, r22
   1da98:	b0 0d       	add	r27, r0
   1da9a:	a1 1d       	adc	r26, r1
   1da9c:	66 1f       	adc	r22, r22
   1da9e:	82 9f       	mul	r24, r18
   1daa0:	22 27       	eor	r18, r18
   1daa2:	b0 0d       	add	r27, r0
   1daa4:	a1 1d       	adc	r26, r1
   1daa6:	62 1f       	adc	r22, r18
   1daa8:	73 9f       	mul	r23, r19
   1daaa:	b0 0d       	add	r27, r0
   1daac:	a1 1d       	adc	r26, r1
   1daae:	62 1f       	adc	r22, r18
   1dab0:	83 9f       	mul	r24, r19
   1dab2:	a0 0d       	add	r26, r0
   1dab4:	61 1d       	adc	r22, r1
   1dab6:	22 1f       	adc	r18, r18
   1dab8:	74 9f       	mul	r23, r20
   1daba:	33 27       	eor	r19, r19
   1dabc:	a0 0d       	add	r26, r0
   1dabe:	61 1d       	adc	r22, r1
   1dac0:	23 1f       	adc	r18, r19
   1dac2:	84 9f       	mul	r24, r20
   1dac4:	60 0d       	add	r22, r0
   1dac6:	21 1d       	adc	r18, r1
   1dac8:	82 2f       	mov	r24, r18
   1daca:	76 2f       	mov	r23, r22
   1dacc:	6a 2f       	mov	r22, r26
   1dace:	11 24       	eor	r1, r1
   1dad0:	9f 57       	subi	r25, 0x7F	; 127
   1dad2:	50 40       	sbci	r21, 0x00	; 0
   1dad4:	8a f0       	brmi	.+34     	; 0x1daf8 <__mulsf3_pse+0x84>
   1dad6:	e1 f0       	breq	.+56     	; 0x1db10 <__mulsf3_pse+0x9c>
   1dad8:	88 23       	and	r24, r24
   1dada:	4a f0       	brmi	.+18     	; 0x1daee <__mulsf3_pse+0x7a>
   1dadc:	ee 0f       	add	r30, r30
   1dade:	ff 1f       	adc	r31, r31
   1dae0:	bb 1f       	adc	r27, r27
   1dae2:	66 1f       	adc	r22, r22
   1dae4:	77 1f       	adc	r23, r23
   1dae6:	88 1f       	adc	r24, r24
   1dae8:	91 50       	subi	r25, 0x01	; 1
   1daea:	50 40       	sbci	r21, 0x00	; 0
   1daec:	a9 f7       	brne	.-22     	; 0x1dad8 <__mulsf3_pse+0x64>
   1daee:	9e 3f       	cpi	r25, 0xFE	; 254
   1daf0:	51 05       	cpc	r21, r1
   1daf2:	70 f0       	brcs	.+28     	; 0x1db10 <__mulsf3_pse+0x9c>
   1daf4:	5c cf       	rjmp	.-328    	; 0x1d9ae <__fp_inf>
   1daf6:	a6 cf       	rjmp	.-180    	; 0x1da44 <__fp_szero>
   1daf8:	5f 3f       	cpi	r21, 0xFF	; 255
   1dafa:	ec f3       	brlt	.-6      	; 0x1daf6 <__mulsf3_pse+0x82>
   1dafc:	98 3e       	cpi	r25, 0xE8	; 232
   1dafe:	dc f3       	brlt	.-10     	; 0x1daf6 <__mulsf3_pse+0x82>
   1db00:	86 95       	lsr	r24
   1db02:	77 95       	ror	r23
   1db04:	67 95       	ror	r22
   1db06:	b7 95       	ror	r27
   1db08:	f7 95       	ror	r31
   1db0a:	e7 95       	ror	r30
   1db0c:	9f 5f       	subi	r25, 0xFF	; 255
   1db0e:	c1 f7       	brne	.-16     	; 0x1db00 <__mulsf3_pse+0x8c>
   1db10:	fe 2b       	or	r31, r30
   1db12:	88 0f       	add	r24, r24
   1db14:	91 1d       	adc	r25, r1
   1db16:	96 95       	lsr	r25
   1db18:	87 95       	ror	r24
   1db1a:	97 f9       	bld	r25, 7
   1db1c:	08 95       	ret

0001db1e <round>:
   1db1e:	77 df       	rcall	.-274    	; 0x1da0e <__fp_splitA>
   1db20:	e0 f0       	brcs	.+56     	; 0x1db5a <round+0x3c>
   1db22:	9e 37       	cpi	r25, 0x7E	; 126
   1db24:	d8 f0       	brcs	.+54     	; 0x1db5c <round+0x3e>
   1db26:	96 39       	cpi	r25, 0x96	; 150
   1db28:	b8 f4       	brcc	.+46     	; 0x1db58 <round+0x3a>
   1db2a:	9e 38       	cpi	r25, 0x8E	; 142
   1db2c:	48 f4       	brcc	.+18     	; 0x1db40 <round+0x22>
   1db2e:	67 2f       	mov	r22, r23
   1db30:	78 2f       	mov	r23, r24
   1db32:	88 27       	eor	r24, r24
   1db34:	98 5f       	subi	r25, 0xF8	; 248
   1db36:	f9 cf       	rjmp	.-14     	; 0x1db2a <round+0xc>
   1db38:	86 95       	lsr	r24
   1db3a:	77 95       	ror	r23
   1db3c:	67 95       	ror	r22
   1db3e:	93 95       	inc	r25
   1db40:	95 39       	cpi	r25, 0x95	; 149
   1db42:	d0 f3       	brcs	.-12     	; 0x1db38 <round+0x1a>
   1db44:	b6 2f       	mov	r27, r22
   1db46:	b1 70       	andi	r27, 0x01	; 1
   1db48:	6b 0f       	add	r22, r27
   1db4a:	71 1d       	adc	r23, r1
   1db4c:	81 1d       	adc	r24, r1
   1db4e:	20 f4       	brcc	.+8      	; 0x1db58 <round+0x3a>
   1db50:	87 95       	ror	r24
   1db52:	77 95       	ror	r23
   1db54:	67 95       	ror	r22
   1db56:	93 95       	inc	r25
   1db58:	02 c0       	rjmp	.+4      	; 0x1db5e <__fp_mintl>
   1db5a:	1c c0       	rjmp	.+56     	; 0x1db94 <__fp_mpack>
   1db5c:	73 cf       	rjmp	.-282    	; 0x1da44 <__fp_szero>

0001db5e <__fp_mintl>:
   1db5e:	88 23       	and	r24, r24
   1db60:	71 f4       	brne	.+28     	; 0x1db7e <__fp_mintl+0x20>
   1db62:	77 23       	and	r23, r23
   1db64:	21 f0       	breq	.+8      	; 0x1db6e <__fp_mintl+0x10>
   1db66:	98 50       	subi	r25, 0x08	; 8
   1db68:	87 2b       	or	r24, r23
   1db6a:	76 2f       	mov	r23, r22
   1db6c:	07 c0       	rjmp	.+14     	; 0x1db7c <__fp_mintl+0x1e>
   1db6e:	66 23       	and	r22, r22
   1db70:	11 f4       	brne	.+4      	; 0x1db76 <__fp_mintl+0x18>
   1db72:	99 27       	eor	r25, r25
   1db74:	0d c0       	rjmp	.+26     	; 0x1db90 <__fp_mintl+0x32>
   1db76:	90 51       	subi	r25, 0x10	; 16
   1db78:	86 2b       	or	r24, r22
   1db7a:	70 e0       	ldi	r23, 0x00	; 0
   1db7c:	60 e0       	ldi	r22, 0x00	; 0
   1db7e:	2a f0       	brmi	.+10     	; 0x1db8a <__fp_mintl+0x2c>
   1db80:	9a 95       	dec	r25
   1db82:	66 0f       	add	r22, r22
   1db84:	77 1f       	adc	r23, r23
   1db86:	88 1f       	adc	r24, r24
   1db88:	da f7       	brpl	.-10     	; 0x1db80 <__fp_mintl+0x22>
   1db8a:	88 0f       	add	r24, r24
   1db8c:	96 95       	lsr	r25
   1db8e:	87 95       	ror	r24
   1db90:	97 f9       	bld	r25, 7
   1db92:	08 95       	ret

0001db94 <__fp_mpack>:
   1db94:	9f 3f       	cpi	r25, 0xFF	; 255
   1db96:	31 f0       	breq	.+12     	; 0x1dba4 <__fp_mpack_finite+0xc>

0001db98 <__fp_mpack_finite>:
   1db98:	91 50       	subi	r25, 0x01	; 1
   1db9a:	20 f4       	brcc	.+8      	; 0x1dba4 <__fp_mpack_finite+0xc>
   1db9c:	87 95       	ror	r24
   1db9e:	77 95       	ror	r23
   1dba0:	67 95       	ror	r22
   1dba2:	b7 95       	ror	r27
   1dba4:	88 0f       	add	r24, r24
   1dba6:	91 1d       	adc	r25, r1
   1dba8:	96 95       	lsr	r25
   1dbaa:	87 95       	ror	r24
   1dbac:	97 f9       	bld	r25, 7
   1dbae:	08 95       	ret

0001dbb0 <calloc>:
   1dbb0:	0f 93       	push	r16
   1dbb2:	1f 93       	push	r17
   1dbb4:	cf 93       	push	r28
   1dbb6:	df 93       	push	r29
   1dbb8:	86 9f       	mul	r24, r22
   1dbba:	80 01       	movw	r16, r0
   1dbbc:	87 9f       	mul	r24, r23
   1dbbe:	10 0d       	add	r17, r0
   1dbc0:	96 9f       	mul	r25, r22
   1dbc2:	10 0d       	add	r17, r0
   1dbc4:	11 24       	eor	r1, r1
   1dbc6:	c8 01       	movw	r24, r16
   1dbc8:	0d d0       	rcall	.+26     	; 0x1dbe4 <malloc>
   1dbca:	ec 01       	movw	r28, r24
   1dbcc:	00 97       	sbiw	r24, 0x00	; 0
   1dbce:	21 f0       	breq	.+8      	; 0x1dbd8 <calloc+0x28>
   1dbd0:	a8 01       	movw	r20, r16
   1dbd2:	60 e0       	ldi	r22, 0x00	; 0
   1dbd4:	70 e0       	ldi	r23, 0x00	; 0
   1dbd6:	0a d2       	rcall	.+1044   	; 0x1dfec <memset>
   1dbd8:	ce 01       	movw	r24, r28
   1dbda:	df 91       	pop	r29
   1dbdc:	cf 91       	pop	r28
   1dbde:	1f 91       	pop	r17
   1dbe0:	0f 91       	pop	r16
   1dbe2:	08 95       	ret

0001dbe4 <malloc>:
   1dbe4:	0f 93       	push	r16
   1dbe6:	1f 93       	push	r17
   1dbe8:	cf 93       	push	r28
   1dbea:	df 93       	push	r29
   1dbec:	82 30       	cpi	r24, 0x02	; 2
   1dbee:	91 05       	cpc	r25, r1
   1dbf0:	10 f4       	brcc	.+4      	; 0x1dbf6 <malloc+0x12>
   1dbf2:	82 e0       	ldi	r24, 0x02	; 2
   1dbf4:	90 e0       	ldi	r25, 0x00	; 0
   1dbf6:	e0 91 31 1f 	lds	r30, 0x1F31	; 0x801f31 <__flp>
   1dbfa:	f0 91 32 1f 	lds	r31, 0x1F32	; 0x801f32 <__flp+0x1>
   1dbfe:	20 e0       	ldi	r18, 0x00	; 0
   1dc00:	30 e0       	ldi	r19, 0x00	; 0
   1dc02:	a0 e0       	ldi	r26, 0x00	; 0
   1dc04:	b0 e0       	ldi	r27, 0x00	; 0
   1dc06:	30 97       	sbiw	r30, 0x00	; 0
   1dc08:	19 f1       	breq	.+70     	; 0x1dc50 <malloc+0x6c>
   1dc0a:	40 81       	ld	r20, Z
   1dc0c:	51 81       	ldd	r21, Z+1	; 0x01
   1dc0e:	02 81       	ldd	r16, Z+2	; 0x02
   1dc10:	13 81       	ldd	r17, Z+3	; 0x03
   1dc12:	48 17       	cp	r20, r24
   1dc14:	59 07       	cpc	r21, r25
   1dc16:	c8 f0       	brcs	.+50     	; 0x1dc4a <malloc+0x66>
   1dc18:	84 17       	cp	r24, r20
   1dc1a:	95 07       	cpc	r25, r21
   1dc1c:	69 f4       	brne	.+26     	; 0x1dc38 <malloc+0x54>
   1dc1e:	10 97       	sbiw	r26, 0x00	; 0
   1dc20:	31 f0       	breq	.+12     	; 0x1dc2e <malloc+0x4a>
   1dc22:	12 96       	adiw	r26, 0x02	; 2
   1dc24:	0c 93       	st	X, r16
   1dc26:	12 97       	sbiw	r26, 0x02	; 2
   1dc28:	13 96       	adiw	r26, 0x03	; 3
   1dc2a:	1c 93       	st	X, r17
   1dc2c:	27 c0       	rjmp	.+78     	; 0x1dc7c <malloc+0x98>
   1dc2e:	00 93 31 1f 	sts	0x1F31, r16	; 0x801f31 <__flp>
   1dc32:	10 93 32 1f 	sts	0x1F32, r17	; 0x801f32 <__flp+0x1>
   1dc36:	22 c0       	rjmp	.+68     	; 0x1dc7c <malloc+0x98>
   1dc38:	21 15       	cp	r18, r1
   1dc3a:	31 05       	cpc	r19, r1
   1dc3c:	19 f0       	breq	.+6      	; 0x1dc44 <malloc+0x60>
   1dc3e:	42 17       	cp	r20, r18
   1dc40:	53 07       	cpc	r21, r19
   1dc42:	18 f4       	brcc	.+6      	; 0x1dc4a <malloc+0x66>
   1dc44:	9a 01       	movw	r18, r20
   1dc46:	bd 01       	movw	r22, r26
   1dc48:	ef 01       	movw	r28, r30
   1dc4a:	df 01       	movw	r26, r30
   1dc4c:	f8 01       	movw	r30, r16
   1dc4e:	db cf       	rjmp	.-74     	; 0x1dc06 <malloc+0x22>
   1dc50:	21 15       	cp	r18, r1
   1dc52:	31 05       	cpc	r19, r1
   1dc54:	f9 f0       	breq	.+62     	; 0x1dc94 <malloc+0xb0>
   1dc56:	28 1b       	sub	r18, r24
   1dc58:	39 0b       	sbc	r19, r25
   1dc5a:	24 30       	cpi	r18, 0x04	; 4
   1dc5c:	31 05       	cpc	r19, r1
   1dc5e:	80 f4       	brcc	.+32     	; 0x1dc80 <malloc+0x9c>
   1dc60:	8a 81       	ldd	r24, Y+2	; 0x02
   1dc62:	9b 81       	ldd	r25, Y+3	; 0x03
   1dc64:	61 15       	cp	r22, r1
   1dc66:	71 05       	cpc	r23, r1
   1dc68:	21 f0       	breq	.+8      	; 0x1dc72 <malloc+0x8e>
   1dc6a:	fb 01       	movw	r30, r22
   1dc6c:	93 83       	std	Z+3, r25	; 0x03
   1dc6e:	82 83       	std	Z+2, r24	; 0x02
   1dc70:	04 c0       	rjmp	.+8      	; 0x1dc7a <malloc+0x96>
   1dc72:	90 93 32 1f 	sts	0x1F32, r25	; 0x801f32 <__flp+0x1>
   1dc76:	80 93 31 1f 	sts	0x1F31, r24	; 0x801f31 <__flp>
   1dc7a:	fe 01       	movw	r30, r28
   1dc7c:	32 96       	adiw	r30, 0x02	; 2
   1dc7e:	44 c0       	rjmp	.+136    	; 0x1dd08 <malloc+0x124>
   1dc80:	fe 01       	movw	r30, r28
   1dc82:	e2 0f       	add	r30, r18
   1dc84:	f3 1f       	adc	r31, r19
   1dc86:	81 93       	st	Z+, r24
   1dc88:	91 93       	st	Z+, r25
   1dc8a:	22 50       	subi	r18, 0x02	; 2
   1dc8c:	31 09       	sbc	r19, r1
   1dc8e:	39 83       	std	Y+1, r19	; 0x01
   1dc90:	28 83       	st	Y, r18
   1dc92:	3a c0       	rjmp	.+116    	; 0x1dd08 <malloc+0x124>
   1dc94:	20 91 2f 1f 	lds	r18, 0x1F2F	; 0x801f2f <__brkval>
   1dc98:	30 91 30 1f 	lds	r19, 0x1F30	; 0x801f30 <__brkval+0x1>
   1dc9c:	23 2b       	or	r18, r19
   1dc9e:	41 f4       	brne	.+16     	; 0x1dcb0 <malloc+0xcc>
   1dca0:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1dca4:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1dca8:	30 93 30 1f 	sts	0x1F30, r19	; 0x801f30 <__brkval+0x1>
   1dcac:	20 93 2f 1f 	sts	0x1F2F, r18	; 0x801f2f <__brkval>
   1dcb0:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1dcb4:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1dcb8:	21 15       	cp	r18, r1
   1dcba:	31 05       	cpc	r19, r1
   1dcbc:	41 f4       	brne	.+16     	; 0x1dcce <malloc+0xea>
   1dcbe:	2d b7       	in	r18, 0x3d	; 61
   1dcc0:	3e b7       	in	r19, 0x3e	; 62
   1dcc2:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1dcc6:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1dcca:	24 1b       	sub	r18, r20
   1dccc:	35 0b       	sbc	r19, r21
   1dcce:	e0 91 2f 1f 	lds	r30, 0x1F2F	; 0x801f2f <__brkval>
   1dcd2:	f0 91 30 1f 	lds	r31, 0x1F30	; 0x801f30 <__brkval+0x1>
   1dcd6:	e2 17       	cp	r30, r18
   1dcd8:	f3 07       	cpc	r31, r19
   1dcda:	a0 f4       	brcc	.+40     	; 0x1dd04 <malloc+0x120>
   1dcdc:	2e 1b       	sub	r18, r30
   1dcde:	3f 0b       	sbc	r19, r31
   1dce0:	28 17       	cp	r18, r24
   1dce2:	39 07       	cpc	r19, r25
   1dce4:	78 f0       	brcs	.+30     	; 0x1dd04 <malloc+0x120>
   1dce6:	ac 01       	movw	r20, r24
   1dce8:	4e 5f       	subi	r20, 0xFE	; 254
   1dcea:	5f 4f       	sbci	r21, 0xFF	; 255
   1dcec:	24 17       	cp	r18, r20
   1dcee:	35 07       	cpc	r19, r21
   1dcf0:	48 f0       	brcs	.+18     	; 0x1dd04 <malloc+0x120>
   1dcf2:	4e 0f       	add	r20, r30
   1dcf4:	5f 1f       	adc	r21, r31
   1dcf6:	50 93 30 1f 	sts	0x1F30, r21	; 0x801f30 <__brkval+0x1>
   1dcfa:	40 93 2f 1f 	sts	0x1F2F, r20	; 0x801f2f <__brkval>
   1dcfe:	81 93       	st	Z+, r24
   1dd00:	91 93       	st	Z+, r25
   1dd02:	02 c0       	rjmp	.+4      	; 0x1dd08 <malloc+0x124>
   1dd04:	e0 e0       	ldi	r30, 0x00	; 0
   1dd06:	f0 e0       	ldi	r31, 0x00	; 0
   1dd08:	cf 01       	movw	r24, r30
   1dd0a:	df 91       	pop	r29
   1dd0c:	cf 91       	pop	r28
   1dd0e:	1f 91       	pop	r17
   1dd10:	0f 91       	pop	r16
   1dd12:	08 95       	ret

0001dd14 <free>:
   1dd14:	cf 93       	push	r28
   1dd16:	df 93       	push	r29
   1dd18:	00 97       	sbiw	r24, 0x00	; 0
   1dd1a:	09 f4       	brne	.+2      	; 0x1dd1e <free+0xa>
   1dd1c:	81 c0       	rjmp	.+258    	; 0x1de20 <free+0x10c>
   1dd1e:	fc 01       	movw	r30, r24
   1dd20:	32 97       	sbiw	r30, 0x02	; 2
   1dd22:	13 82       	std	Z+3, r1	; 0x03
   1dd24:	12 82       	std	Z+2, r1	; 0x02
   1dd26:	a0 91 31 1f 	lds	r26, 0x1F31	; 0x801f31 <__flp>
   1dd2a:	b0 91 32 1f 	lds	r27, 0x1F32	; 0x801f32 <__flp+0x1>
   1dd2e:	10 97       	sbiw	r26, 0x00	; 0
   1dd30:	81 f4       	brne	.+32     	; 0x1dd52 <free+0x3e>
   1dd32:	20 81       	ld	r18, Z
   1dd34:	31 81       	ldd	r19, Z+1	; 0x01
   1dd36:	82 0f       	add	r24, r18
   1dd38:	93 1f       	adc	r25, r19
   1dd3a:	20 91 2f 1f 	lds	r18, 0x1F2F	; 0x801f2f <__brkval>
   1dd3e:	30 91 30 1f 	lds	r19, 0x1F30	; 0x801f30 <__brkval+0x1>
   1dd42:	28 17       	cp	r18, r24
   1dd44:	39 07       	cpc	r19, r25
   1dd46:	51 f5       	brne	.+84     	; 0x1dd9c <free+0x88>
   1dd48:	f0 93 30 1f 	sts	0x1F30, r31	; 0x801f30 <__brkval+0x1>
   1dd4c:	e0 93 2f 1f 	sts	0x1F2F, r30	; 0x801f2f <__brkval>
   1dd50:	67 c0       	rjmp	.+206    	; 0x1de20 <free+0x10c>
   1dd52:	ed 01       	movw	r28, r26
   1dd54:	20 e0       	ldi	r18, 0x00	; 0
   1dd56:	30 e0       	ldi	r19, 0x00	; 0
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1dd58:	ce 17       	cp	r28, r30
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1dd5a:	df 07       	cpc	r29, r31
   1dd5c:	40 f4       	brcc	.+16     	; 0x1dd6e <free+0x5a>
   1dd5e:	4a 81       	ldd	r20, Y+2	; 0x02
   1dd60:	5b 81       	ldd	r21, Y+3	; 0x03
   1dd62:	9e 01       	movw	r18, r28
   1dd64:	41 15       	cp	r20, r1
   1dd66:	51 05       	cpc	r21, r1
   1dd68:	f1 f0       	breq	.+60     	; 0x1dda6 <free+0x92>
   1dd6a:	ea 01       	movw	r28, r20
   1dd6c:	f5 cf       	rjmp	.-22     	; 0x1dd58 <free+0x44>
   1dd6e:	d3 83       	std	Z+3, r29	; 0x03
   1dd70:	c2 83       	std	Z+2, r28	; 0x02
   1dd72:	40 81       	ld	r20, Z
   1dd74:	51 81       	ldd	r21, Z+1	; 0x01
   1dd76:	84 0f       	add	r24, r20
   1dd78:	95 1f       	adc	r25, r21
   1dd7a:	c8 17       	cp	r28, r24
   1dd7c:	d9 07       	cpc	r29, r25
   1dd7e:	59 f4       	brne	.+22     	; 0x1dd96 <free+0x82>
   1dd80:	88 81       	ld	r24, Y
   1dd82:	99 81       	ldd	r25, Y+1	; 0x01
   1dd84:	84 0f       	add	r24, r20
   1dd86:	95 1f       	adc	r25, r21
   1dd88:	02 96       	adiw	r24, 0x02	; 2
   1dd8a:	91 83       	std	Z+1, r25	; 0x01
   1dd8c:	80 83       	st	Z, r24
   1dd8e:	8a 81       	ldd	r24, Y+2	; 0x02
   1dd90:	9b 81       	ldd	r25, Y+3	; 0x03
   1dd92:	93 83       	std	Z+3, r25	; 0x03
   1dd94:	82 83       	std	Z+2, r24	; 0x02
   1dd96:	21 15       	cp	r18, r1
   1dd98:	31 05       	cpc	r19, r1
   1dd9a:	29 f4       	brne	.+10     	; 0x1dda6 <free+0x92>
   1dd9c:	f0 93 32 1f 	sts	0x1F32, r31	; 0x801f32 <__flp+0x1>
   1dda0:	e0 93 31 1f 	sts	0x1F31, r30	; 0x801f31 <__flp>
   1dda4:	3d c0       	rjmp	.+122    	; 0x1de20 <free+0x10c>
   1dda6:	e9 01       	movw	r28, r18
   1dda8:	fb 83       	std	Y+3, r31	; 0x03
   1ddaa:	ea 83       	std	Y+2, r30	; 0x02
   1ddac:	49 91       	ld	r20, Y+
   1ddae:	59 91       	ld	r21, Y+
   1ddb0:	c4 0f       	add	r28, r20
   1ddb2:	d5 1f       	adc	r29, r21
   1ddb4:	ec 17       	cp	r30, r28
   1ddb6:	fd 07       	cpc	r31, r29
   1ddb8:	61 f4       	brne	.+24     	; 0x1ddd2 <free+0xbe>
   1ddba:	80 81       	ld	r24, Z
   1ddbc:	91 81       	ldd	r25, Z+1	; 0x01
   1ddbe:	84 0f       	add	r24, r20
   1ddc0:	95 1f       	adc	r25, r21
   1ddc2:	02 96       	adiw	r24, 0x02	; 2
   1ddc4:	e9 01       	movw	r28, r18
   1ddc6:	99 83       	std	Y+1, r25	; 0x01
   1ddc8:	88 83       	st	Y, r24
   1ddca:	82 81       	ldd	r24, Z+2	; 0x02
   1ddcc:	93 81       	ldd	r25, Z+3	; 0x03
   1ddce:	9b 83       	std	Y+3, r25	; 0x03
   1ddd0:	8a 83       	std	Y+2, r24	; 0x02
   1ddd2:	e0 e0       	ldi	r30, 0x00	; 0
   1ddd4:	f0 e0       	ldi	r31, 0x00	; 0
   1ddd6:	12 96       	adiw	r26, 0x02	; 2
   1ddd8:	8d 91       	ld	r24, X+
   1ddda:	9c 91       	ld	r25, X
   1dddc:	13 97       	sbiw	r26, 0x03	; 3
   1ddde:	00 97       	sbiw	r24, 0x00	; 0
   1dde0:	19 f0       	breq	.+6      	; 0x1dde8 <free+0xd4>
   1dde2:	fd 01       	movw	r30, r26
   1dde4:	dc 01       	movw	r26, r24
   1dde6:	f7 cf       	rjmp	.-18     	; 0x1ddd6 <free+0xc2>
   1dde8:	8d 91       	ld	r24, X+
   1ddea:	9c 91       	ld	r25, X
   1ddec:	11 97       	sbiw	r26, 0x01	; 1
   1ddee:	9d 01       	movw	r18, r26
   1ddf0:	2e 5f       	subi	r18, 0xFE	; 254
   1ddf2:	3f 4f       	sbci	r19, 0xFF	; 255
   1ddf4:	82 0f       	add	r24, r18
   1ddf6:	93 1f       	adc	r25, r19
   1ddf8:	20 91 2f 1f 	lds	r18, 0x1F2F	; 0x801f2f <__brkval>
   1ddfc:	30 91 30 1f 	lds	r19, 0x1F30	; 0x801f30 <__brkval+0x1>
   1de00:	28 17       	cp	r18, r24
   1de02:	39 07       	cpc	r19, r25
   1de04:	69 f4       	brne	.+26     	; 0x1de20 <free+0x10c>
   1de06:	30 97       	sbiw	r30, 0x00	; 0
   1de08:	29 f4       	brne	.+10     	; 0x1de14 <free+0x100>
   1de0a:	10 92 32 1f 	sts	0x1F32, r1	; 0x801f32 <__flp+0x1>
   1de0e:	10 92 31 1f 	sts	0x1F31, r1	; 0x801f31 <__flp>
   1de12:	02 c0       	rjmp	.+4      	; 0x1de18 <free+0x104>
   1de14:	13 82       	std	Z+3, r1	; 0x03
   1de16:	12 82       	std	Z+2, r1	; 0x02
   1de18:	b0 93 30 1f 	sts	0x1F30, r27	; 0x801f30 <__brkval+0x1>
   1de1c:	a0 93 2f 1f 	sts	0x1F2F, r26	; 0x801f2f <__brkval>
   1de20:	df 91       	pop	r29
   1de22:	cf 91       	pop	r28
   1de24:	08 95       	ret

0001de26 <__ftoa_engine>:
   1de26:	28 30       	cpi	r18, 0x08	; 8
   1de28:	08 f0       	brcs	.+2      	; 0x1de2c <__ftoa_engine+0x6>
   1de2a:	27 e0       	ldi	r18, 0x07	; 7
   1de2c:	33 27       	eor	r19, r19
   1de2e:	da 01       	movw	r26, r20
   1de30:	99 0f       	add	r25, r25
   1de32:	31 1d       	adc	r19, r1
   1de34:	87 fd       	sbrc	r24, 7
   1de36:	91 60       	ori	r25, 0x01	; 1
   1de38:	00 96       	adiw	r24, 0x00	; 0
   1de3a:	61 05       	cpc	r22, r1
   1de3c:	71 05       	cpc	r23, r1
   1de3e:	39 f4       	brne	.+14     	; 0x1de4e <__ftoa_engine+0x28>
   1de40:	32 60       	ori	r19, 0x02	; 2
   1de42:	2e 5f       	subi	r18, 0xFE	; 254
   1de44:	3d 93       	st	X+, r19
   1de46:	30 e3       	ldi	r19, 0x30	; 48
   1de48:	2a 95       	dec	r18
   1de4a:	e1 f7       	brne	.-8      	; 0x1de44 <__ftoa_engine+0x1e>
   1de4c:	08 95       	ret
   1de4e:	9f 3f       	cpi	r25, 0xFF	; 255
   1de50:	30 f0       	brcs	.+12     	; 0x1de5e <__ftoa_engine+0x38>
   1de52:	80 38       	cpi	r24, 0x80	; 128
   1de54:	71 05       	cpc	r23, r1
   1de56:	61 05       	cpc	r22, r1
   1de58:	09 f0       	breq	.+2      	; 0x1de5c <__ftoa_engine+0x36>
   1de5a:	3c 5f       	subi	r19, 0xFC	; 252
   1de5c:	3c 5f       	subi	r19, 0xFC	; 252
   1de5e:	3d 93       	st	X+, r19
   1de60:	91 30       	cpi	r25, 0x01	; 1
   1de62:	08 f0       	brcs	.+2      	; 0x1de66 <__ftoa_engine+0x40>
   1de64:	80 68       	ori	r24, 0x80	; 128
   1de66:	91 1d       	adc	r25, r1
   1de68:	df 93       	push	r29
   1de6a:	cf 93       	push	r28
   1de6c:	1f 93       	push	r17
   1de6e:	0f 93       	push	r16
   1de70:	ff 92       	push	r15
   1de72:	ef 92       	push	r14
   1de74:	19 2f       	mov	r17, r25
   1de76:	98 7f       	andi	r25, 0xF8	; 248
   1de78:	96 95       	lsr	r25
   1de7a:	e9 2f       	mov	r30, r25
   1de7c:	96 95       	lsr	r25
   1de7e:	96 95       	lsr	r25
   1de80:	e9 0f       	add	r30, r25
   1de82:	ff 27       	eor	r31, r31
   1de84:	ee 5c       	subi	r30, 0xCE	; 206
   1de86:	fd 4f       	sbci	r31, 0xFD	; 253
   1de88:	99 27       	eor	r25, r25
   1de8a:	33 27       	eor	r19, r19
   1de8c:	ee 24       	eor	r14, r14
   1de8e:	ff 24       	eor	r15, r15
   1de90:	a7 01       	movw	r20, r14
   1de92:	e7 01       	movw	r28, r14
   1de94:	05 90       	lpm	r0, Z+
   1de96:	08 94       	sec
   1de98:	07 94       	ror	r0
   1de9a:	28 f4       	brcc	.+10     	; 0x1dea6 <__ftoa_engine+0x80>
   1de9c:	36 0f       	add	r19, r22
   1de9e:	e7 1e       	adc	r14, r23
   1dea0:	f8 1e       	adc	r15, r24
   1dea2:	49 1f       	adc	r20, r25
   1dea4:	51 1d       	adc	r21, r1
   1dea6:	66 0f       	add	r22, r22
   1dea8:	77 1f       	adc	r23, r23
   1deaa:	88 1f       	adc	r24, r24
   1deac:	99 1f       	adc	r25, r25
   1deae:	06 94       	lsr	r0
   1deb0:	a1 f7       	brne	.-24     	; 0x1de9a <__ftoa_engine+0x74>
   1deb2:	05 90       	lpm	r0, Z+
   1deb4:	07 94       	ror	r0
   1deb6:	28 f4       	brcc	.+10     	; 0x1dec2 <__ftoa_engine+0x9c>
   1deb8:	e7 0e       	add	r14, r23
   1deba:	f8 1e       	adc	r15, r24
   1debc:	49 1f       	adc	r20, r25
   1debe:	56 1f       	adc	r21, r22
   1dec0:	c1 1d       	adc	r28, r1
   1dec2:	77 0f       	add	r23, r23
   1dec4:	88 1f       	adc	r24, r24
   1dec6:	99 1f       	adc	r25, r25
   1dec8:	66 1f       	adc	r22, r22
   1deca:	06 94       	lsr	r0
   1decc:	a1 f7       	brne	.-24     	; 0x1deb6 <__ftoa_engine+0x90>
   1dece:	05 90       	lpm	r0, Z+
   1ded0:	07 94       	ror	r0
   1ded2:	28 f4       	brcc	.+10     	; 0x1dede <__ftoa_engine+0xb8>
   1ded4:	f8 0e       	add	r15, r24
   1ded6:	49 1f       	adc	r20, r25
   1ded8:	56 1f       	adc	r21, r22
   1deda:	c7 1f       	adc	r28, r23
   1dedc:	d1 1d       	adc	r29, r1
   1dede:	88 0f       	add	r24, r24
   1dee0:	99 1f       	adc	r25, r25
   1dee2:	66 1f       	adc	r22, r22
   1dee4:	77 1f       	adc	r23, r23
   1dee6:	06 94       	lsr	r0
   1dee8:	a1 f7       	brne	.-24     	; 0x1ded2 <__ftoa_engine+0xac>
   1deea:	05 90       	lpm	r0, Z+
   1deec:	07 94       	ror	r0
   1deee:	20 f4       	brcc	.+8      	; 0x1def8 <__ftoa_engine+0xd2>
   1def0:	49 0f       	add	r20, r25
   1def2:	56 1f       	adc	r21, r22
   1def4:	c7 1f       	adc	r28, r23
   1def6:	d8 1f       	adc	r29, r24
   1def8:	99 0f       	add	r25, r25
   1defa:	66 1f       	adc	r22, r22
   1defc:	77 1f       	adc	r23, r23
   1defe:	88 1f       	adc	r24, r24
   1df00:	06 94       	lsr	r0
   1df02:	a9 f7       	brne	.-22     	; 0x1deee <__ftoa_engine+0xc8>
   1df04:	84 91       	lpm	r24, Z
   1df06:	10 95       	com	r17
   1df08:	17 70       	andi	r17, 0x07	; 7
   1df0a:	41 f0       	breq	.+16     	; 0x1df1c <__ftoa_engine+0xf6>
   1df0c:	d6 95       	lsr	r29
   1df0e:	c7 95       	ror	r28
   1df10:	57 95       	ror	r21
   1df12:	47 95       	ror	r20
   1df14:	f7 94       	ror	r15
   1df16:	e7 94       	ror	r14
   1df18:	1a 95       	dec	r17
   1df1a:	c1 f7       	brne	.-16     	; 0x1df0c <__ftoa_engine+0xe6>
   1df1c:	e8 ed       	ldi	r30, 0xD8	; 216
   1df1e:	f1 e0       	ldi	r31, 0x01	; 1
   1df20:	68 94       	set
   1df22:	15 90       	lpm	r1, Z+
   1df24:	15 91       	lpm	r17, Z+
   1df26:	35 91       	lpm	r19, Z+
   1df28:	65 91       	lpm	r22, Z+
   1df2a:	95 91       	lpm	r25, Z+
   1df2c:	05 90       	lpm	r0, Z+
   1df2e:	7f e2       	ldi	r23, 0x2F	; 47
   1df30:	73 95       	inc	r23
   1df32:	e1 18       	sub	r14, r1
   1df34:	f1 0a       	sbc	r15, r17
   1df36:	43 0b       	sbc	r20, r19
   1df38:	56 0b       	sbc	r21, r22
   1df3a:	c9 0b       	sbc	r28, r25
   1df3c:	d0 09       	sbc	r29, r0
   1df3e:	c0 f7       	brcc	.-16     	; 0x1df30 <__ftoa_engine+0x10a>
   1df40:	e1 0c       	add	r14, r1
   1df42:	f1 1e       	adc	r15, r17
   1df44:	43 1f       	adc	r20, r19
   1df46:	56 1f       	adc	r21, r22
   1df48:	c9 1f       	adc	r28, r25
   1df4a:	d0 1d       	adc	r29, r0
   1df4c:	7e f4       	brtc	.+30     	; 0x1df6c <__ftoa_engine+0x146>
   1df4e:	70 33       	cpi	r23, 0x30	; 48
   1df50:	11 f4       	brne	.+4      	; 0x1df56 <__ftoa_engine+0x130>
   1df52:	8a 95       	dec	r24
   1df54:	e6 cf       	rjmp	.-52     	; 0x1df22 <__ftoa_engine+0xfc>
   1df56:	e8 94       	clt
   1df58:	01 50       	subi	r16, 0x01	; 1
   1df5a:	30 f0       	brcs	.+12     	; 0x1df68 <__ftoa_engine+0x142>
   1df5c:	08 0f       	add	r16, r24
   1df5e:	0a f4       	brpl	.+2      	; 0x1df62 <__ftoa_engine+0x13c>
   1df60:	00 27       	eor	r16, r16
   1df62:	02 17       	cp	r16, r18
   1df64:	08 f4       	brcc	.+2      	; 0x1df68 <__ftoa_engine+0x142>
   1df66:	20 2f       	mov	r18, r16
   1df68:	23 95       	inc	r18
   1df6a:	02 2f       	mov	r16, r18
   1df6c:	7a 33       	cpi	r23, 0x3A	; 58
   1df6e:	28 f0       	brcs	.+10     	; 0x1df7a <__ftoa_engine+0x154>
   1df70:	79 e3       	ldi	r23, 0x39	; 57
   1df72:	7d 93       	st	X+, r23
   1df74:	2a 95       	dec	r18
   1df76:	e9 f7       	brne	.-6      	; 0x1df72 <__ftoa_engine+0x14c>
   1df78:	10 c0       	rjmp	.+32     	; 0x1df9a <__ftoa_engine+0x174>
   1df7a:	7d 93       	st	X+, r23
   1df7c:	2a 95       	dec	r18
   1df7e:	89 f6       	brne	.-94     	; 0x1df22 <__ftoa_engine+0xfc>
   1df80:	06 94       	lsr	r0
   1df82:	97 95       	ror	r25
   1df84:	67 95       	ror	r22
   1df86:	37 95       	ror	r19
   1df88:	17 95       	ror	r17
   1df8a:	17 94       	ror	r1
   1df8c:	e1 18       	sub	r14, r1
   1df8e:	f1 0a       	sbc	r15, r17
   1df90:	43 0b       	sbc	r20, r19
   1df92:	56 0b       	sbc	r21, r22
   1df94:	c9 0b       	sbc	r28, r25
   1df96:	d0 09       	sbc	r29, r0
   1df98:	98 f0       	brcs	.+38     	; 0x1dfc0 <__ftoa_engine+0x19a>
   1df9a:	23 95       	inc	r18
   1df9c:	7e 91       	ld	r23, -X
   1df9e:	73 95       	inc	r23
   1dfa0:	7a 33       	cpi	r23, 0x3A	; 58
   1dfa2:	08 f0       	brcs	.+2      	; 0x1dfa6 <__ftoa_engine+0x180>
   1dfa4:	70 e3       	ldi	r23, 0x30	; 48
   1dfa6:	7c 93       	st	X, r23
   1dfa8:	20 13       	cpse	r18, r16
   1dfaa:	b8 f7       	brcc	.-18     	; 0x1df9a <__ftoa_engine+0x174>
   1dfac:	7e 91       	ld	r23, -X
   1dfae:	70 61       	ori	r23, 0x10	; 16
   1dfb0:	7d 93       	st	X+, r23
   1dfb2:	30 f0       	brcs	.+12     	; 0x1dfc0 <__ftoa_engine+0x19a>
   1dfb4:	83 95       	inc	r24
   1dfb6:	71 e3       	ldi	r23, 0x31	; 49
   1dfb8:	7d 93       	st	X+, r23
   1dfba:	70 e3       	ldi	r23, 0x30	; 48
   1dfbc:	2a 95       	dec	r18
   1dfbe:	e1 f7       	brne	.-8      	; 0x1dfb8 <__ftoa_engine+0x192>
   1dfc0:	11 24       	eor	r1, r1
   1dfc2:	ef 90       	pop	r14
   1dfc4:	ff 90       	pop	r15
   1dfc6:	0f 91       	pop	r16
   1dfc8:	1f 91       	pop	r17
   1dfca:	cf 91       	pop	r28
   1dfcc:	df 91       	pop	r29
   1dfce:	99 27       	eor	r25, r25
   1dfd0:	87 fd       	sbrc	r24, 7
   1dfd2:	90 95       	com	r25
   1dfd4:	08 95       	ret

0001dfd6 <strnlen_P>:
   1dfd6:	fc 01       	movw	r30, r24
   1dfd8:	05 90       	lpm	r0, Z+
   1dfda:	61 50       	subi	r22, 0x01	; 1
   1dfdc:	70 40       	sbci	r23, 0x00	; 0
   1dfde:	01 10       	cpse	r0, r1
   1dfe0:	d8 f7       	brcc	.-10     	; 0x1dfd8 <strnlen_P+0x2>
   1dfe2:	80 95       	com	r24
   1dfe4:	90 95       	com	r25
   1dfe6:	8e 0f       	add	r24, r30
   1dfe8:	9f 1f       	adc	r25, r31
   1dfea:	08 95       	ret

0001dfec <memset>:
   1dfec:	dc 01       	movw	r26, r24
   1dfee:	01 c0       	rjmp	.+2      	; 0x1dff2 <memset+0x6>
   1dff0:	6d 93       	st	X+, r22
   1dff2:	41 50       	subi	r20, 0x01	; 1
   1dff4:	50 40       	sbci	r21, 0x00	; 0
   1dff6:	e0 f7       	brcc	.-8      	; 0x1dff0 <memset+0x4>
   1dff8:	08 95       	ret

0001dffa <strnlen>:
   1dffa:	fc 01       	movw	r30, r24
   1dffc:	61 50       	subi	r22, 0x01	; 1
   1dffe:	70 40       	sbci	r23, 0x00	; 0
   1e000:	01 90       	ld	r0, Z+
   1e002:	01 10       	cpse	r0, r1
   1e004:	d8 f7       	brcc	.-10     	; 0x1dffc <strnlen+0x2>
   1e006:	80 95       	com	r24
   1e008:	90 95       	com	r25
   1e00a:	8e 0f       	add	r24, r30
   1e00c:	9f 1f       	adc	r25, r31
   1e00e:	08 95       	ret

0001e010 <__ultoa_invert>:
   1e010:	fa 01       	movw	r30, r20
   1e012:	aa 27       	eor	r26, r26
   1e014:	28 30       	cpi	r18, 0x08	; 8
   1e016:	51 f1       	breq	.+84     	; 0x1e06c <__ultoa_invert+0x5c>
   1e018:	20 31       	cpi	r18, 0x10	; 16
   1e01a:	81 f1       	breq	.+96     	; 0x1e07c <__ultoa_invert+0x6c>
   1e01c:	e8 94       	clt
   1e01e:	6f 93       	push	r22
   1e020:	6e 7f       	andi	r22, 0xFE	; 254
   1e022:	6e 5f       	subi	r22, 0xFE	; 254
   1e024:	7f 4f       	sbci	r23, 0xFF	; 255
   1e026:	8f 4f       	sbci	r24, 0xFF	; 255
   1e028:	9f 4f       	sbci	r25, 0xFF	; 255
   1e02a:	af 4f       	sbci	r26, 0xFF	; 255
   1e02c:	b1 e0       	ldi	r27, 0x01	; 1
   1e02e:	3e d0       	rcall	.+124    	; 0x1e0ac <__ultoa_invert+0x9c>
   1e030:	b4 e0       	ldi	r27, 0x04	; 4
   1e032:	3c d0       	rcall	.+120    	; 0x1e0ac <__ultoa_invert+0x9c>
   1e034:	67 0f       	add	r22, r23
   1e036:	78 1f       	adc	r23, r24
   1e038:	89 1f       	adc	r24, r25
   1e03a:	9a 1f       	adc	r25, r26
   1e03c:	a1 1d       	adc	r26, r1
   1e03e:	68 0f       	add	r22, r24
   1e040:	79 1f       	adc	r23, r25
   1e042:	8a 1f       	adc	r24, r26
   1e044:	91 1d       	adc	r25, r1
   1e046:	a1 1d       	adc	r26, r1
   1e048:	6a 0f       	add	r22, r26
   1e04a:	71 1d       	adc	r23, r1
   1e04c:	81 1d       	adc	r24, r1
   1e04e:	91 1d       	adc	r25, r1
   1e050:	a1 1d       	adc	r26, r1
   1e052:	20 d0       	rcall	.+64     	; 0x1e094 <__ultoa_invert+0x84>
   1e054:	09 f4       	brne	.+2      	; 0x1e058 <__ultoa_invert+0x48>
   1e056:	68 94       	set
   1e058:	3f 91       	pop	r19
   1e05a:	2a e0       	ldi	r18, 0x0A	; 10
   1e05c:	26 9f       	mul	r18, r22
   1e05e:	11 24       	eor	r1, r1
   1e060:	30 19       	sub	r19, r0
   1e062:	30 5d       	subi	r19, 0xD0	; 208
   1e064:	31 93       	st	Z+, r19
   1e066:	de f6       	brtc	.-74     	; 0x1e01e <__ultoa_invert+0xe>
   1e068:	cf 01       	movw	r24, r30
   1e06a:	08 95       	ret
   1e06c:	46 2f       	mov	r20, r22
   1e06e:	47 70       	andi	r20, 0x07	; 7
   1e070:	40 5d       	subi	r20, 0xD0	; 208
   1e072:	41 93       	st	Z+, r20
   1e074:	b3 e0       	ldi	r27, 0x03	; 3
   1e076:	0f d0       	rcall	.+30     	; 0x1e096 <__ultoa_invert+0x86>
   1e078:	c9 f7       	brne	.-14     	; 0x1e06c <__ultoa_invert+0x5c>
   1e07a:	f6 cf       	rjmp	.-20     	; 0x1e068 <__ultoa_invert+0x58>
   1e07c:	46 2f       	mov	r20, r22
   1e07e:	4f 70       	andi	r20, 0x0F	; 15
   1e080:	40 5d       	subi	r20, 0xD0	; 208
   1e082:	4a 33       	cpi	r20, 0x3A	; 58
   1e084:	18 f0       	brcs	.+6      	; 0x1e08c <__ultoa_invert+0x7c>
   1e086:	49 5d       	subi	r20, 0xD9	; 217
   1e088:	31 fd       	sbrc	r19, 1
   1e08a:	40 52       	subi	r20, 0x20	; 32
   1e08c:	41 93       	st	Z+, r20
   1e08e:	02 d0       	rcall	.+4      	; 0x1e094 <__ultoa_invert+0x84>
   1e090:	a9 f7       	brne	.-22     	; 0x1e07c <__ultoa_invert+0x6c>
   1e092:	ea cf       	rjmp	.-44     	; 0x1e068 <__ultoa_invert+0x58>
   1e094:	b4 e0       	ldi	r27, 0x04	; 4
   1e096:	a6 95       	lsr	r26
   1e098:	97 95       	ror	r25
   1e09a:	87 95       	ror	r24
   1e09c:	77 95       	ror	r23
   1e09e:	67 95       	ror	r22
   1e0a0:	ba 95       	dec	r27
   1e0a2:	c9 f7       	brne	.-14     	; 0x1e096 <__ultoa_invert+0x86>
   1e0a4:	00 97       	sbiw	r24, 0x00	; 0
   1e0a6:	61 05       	cpc	r22, r1
   1e0a8:	71 05       	cpc	r23, r1
   1e0aa:	08 95       	ret
   1e0ac:	9b 01       	movw	r18, r22
   1e0ae:	ac 01       	movw	r20, r24
   1e0b0:	0a 2e       	mov	r0, r26
   1e0b2:	06 94       	lsr	r0
   1e0b4:	57 95       	ror	r21
   1e0b6:	47 95       	ror	r20
   1e0b8:	37 95       	ror	r19
   1e0ba:	27 95       	ror	r18
   1e0bc:	ba 95       	dec	r27
   1e0be:	c9 f7       	brne	.-14     	; 0x1e0b2 <__ultoa_invert+0xa2>
   1e0c0:	62 0f       	add	r22, r18
   1e0c2:	73 1f       	adc	r23, r19
   1e0c4:	84 1f       	adc	r24, r20
   1e0c6:	95 1f       	adc	r25, r21
   1e0c8:	a0 1d       	adc	r26, r0
   1e0ca:	08 95       	ret

0001e0cc <_exit>:
   1e0cc:	f8 94       	cli

0001e0ce <__stop_program>:
   1e0ce:	ff cf       	rjmp	.-2      	; 0x1e0ce <__stop_program>
