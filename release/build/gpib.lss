
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001656  00800100  0001cf38  0001cfcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001cf38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b61  00801756  00801756  0001e622  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016e0  00000000  00000000  0001e674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000287b6  00000000  00000000  0001fd54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000609d  00000000  00000000  0004850a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012219  00000000  00000000  0004e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000050fc  00000000  00000000  000607c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004829  00000000  00000000  000658bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023ffb  00000000  00000000  0006a0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016e0  00000000  00000000  0008e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801756 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
00801756 l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000690e l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017ce l     O .bss	00000016 t.3676
008017e4 l     O .bss	00000002 p.3677
008017b0 l     O .bss	00000008 ts.3755
008017b8 l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
00801806 l     O .bss	00000020 buf.3654
008017e6 l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d218 l     F .text	00000004 xchg_spi
0000d21c l     F .text	0000000c deselect
0000d228 l     F .text	00000046 rcvr_datablock
0000d292 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d2d6 l     F .text	00000086 send_cmd
0000d35c l     F .text	0000004e xmit_datablock
0080182b l     O .bss	00000001 CardType
0080182d l     O .bss	00000001 Timer1
0080182c l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000baf l     O .text	00000018 __c.3594
00000b97 l     O .text	00000018 __c.3601
0000ea9e l     F .text	0000001a _fprintf_putc
00801a37 l     O .bss	0000002e _dp
00801838 l     O .bss	000001ff _de
00000b83 l     O .text	00000008 __c.3917
00000b7f l     O .text	00000004 __c.3919
00000b8b l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e49 l     O .text	0000000c __c.3618
00000d83 l     O .text	000000c6 __c.3620
00000cec l     O .text	0000000c __c.3684
00000cdc l     O .text	00000010 __c.3686
00000ccf l     O .text	0000000d __c.3688
00000cbf l     O .text	00000010 __c.3690
00000cb2 l     O .text	0000000d __c.3692
00000c96 l     O .text	0000000f __c.3697
00000ca5 l     O .text	0000000d __c.3694
00000c83 l     O .text	00000013 __c.3701
00800180 l     O .data	00000002 _pagesize
00000c7c l     O .text	00000007 __c.3711
00000c7a l     O .text	00000002 __c.3713
00000d05 l     O .text	00000010 __c.3666
00000d03 l     O .text	00000002 __c.3671
00000cf8 l     O .text	0000000b __c.3673
00000c68 l     O .text	00000012 __c.3725
00000c64 l     O .text	00000004 __c.3727
00000c4a l     O .text	0000001a __c.3732
00000c29 l     O .text	00000021 __c.3745
00000c1b l     O .text	0000000e __c.3747
00000c05 l     O .text	00000016 __c.3749
00000bd2 l     O .text	00000023 __c.3757
00000bf5 l     O .text	00000010 __c.3754
00000bc7 l     O .text	0000000b __c.3761
00000d72 l     O .text	00000011 __c.3636
00000d5a l     O .text	00000018 __c.3640
00000d49 l     O .text	00000011 __c.3647
00000d45 l     O .text	00000004 __c.3650
00000d34 l     O .text	00000011 __c.3652
00000d26 l     O .text	0000000e __c.3654
00000d15 l     O .text	00000011 __c.3656
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001226 l     O .text	00000011 __c.4223
00001213 l     O .text	00000013 __c.4236
000011ed l     O .text	00000026 __c.4241
000011d2 l     O .text	0000001b __c.4243
000011ab l     O .text	00000027 __c.4248
00001190 l     O .text	0000001b __c.4250
00001162 l     O .text	0000002e __c.4268
0000103e l     O .text	0000002f __c.4301
0000106d l     O .text	0000003c __c.4297
000010e5 l     O .text	0000003f __c.4291
000010a9 l     O .text	0000003c __c.4293
00001143 l     O .text	0000001f __c.4283
00001124 l     O .text	0000001f __c.4286
0000102b l     O .text	00000013 __c.4306
00000fea l     O .text	00000009 __c.4350
00000fe4 l     O .text	00000006 __c.4352
00000fd9 l     O .text	0000000b __c.4356
00000fce l     O .text	0000000b __c.4358
00000fc3 l     O .text	0000000b __c.4360
00001011 l     O .text	0000001a __c.4321
00000ff3 l     O .text	0000001e __c.4324
00000faa l     O .text	00000019 __c.4376
00000f7d l     O .text	0000002d __c.4379
00000f56 l     O .text	00000027 __c.4383
00000f3c l     O .text	0000001a __c.4393
00000f0e l     O .text	0000002e __c.4395
00000ef4 l     O .text	0000001a __c.4400
00000ecc l     O .text	00000028 __c.4408
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014d9 l     O .text	00000012 __c.4231
000014c8 l     O .text	00000011 __c.4233
000014af l     O .text	00000019 __c.4235
00001495 l     O .text	0000001a __c.4281
0000146a l     O .text	0000002b __c.4283
00001453 l     O .text	00000017 __c.4285
00001447 l     O .text	0000000c __c.4287
00001441 l     O .text	00000006 __c.4291
0000142f l     O .text	00000012 __c.4293
00001428 l     O .text	00000007 __c.4298
0000141d l     O .text	0000000b __c.4300
00001416 l     O .text	00000007 __c.4302
00001409 l     O .text	0000000d __c.4304
000013f8 l     O .text	00000011 __c.4306
000013d7 l     O .text	00000021 __c.4333
000013bd l     O .text	0000001a __c.4335
000013a5 l     O .text	00000018 __c.4340
0000138d l     O .text	00000018 __c.4342
00001386 l     O .text	00000007 __c.4344
0000137f l     O .text	00000007 __c.4346
00001378 l     O .text	00000007 __c.4348
0000136c l     O .text	0000000c __c.4350
0000135f l     O .text	0000000d __c.4352
00001358 l     O .text	00000007 __c.4354
00001337 l     O .text	00000021 __c.4356
000012e4 l     O .text	00000007 __c.4376
000012d3 l     O .text	00000011 __c.4378
000012c1 l     O .text	00000012 __c.4380
000012ad l     O .text	00000014 __c.4382
0000129d l     O .text	00000010 __c.4384
00001291 l     O .text	0000000c __c.4386
00001280 l     O .text	00000011 __c.4391
0000126e l     O .text	00000012 __c.4393
00001248 l     O .text	00000026 __c.4395
00001237 l     O .text	00000011 __c.4400
00001330 l     O .text	00000007 __c.4361
0000132e l     O .text	00000002 __c.4363
0000131c l     O .text	00000012 __c.4365
0000130b l     O .text	00000011 __c.4367
000012f7 l     O .text	00000014 __c.4369
000012eb l     O .text	0000000c __c.4371
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001d9e l     O .text	00000015 __c.4450
00001d92 l     O .text	0000000c __c.4461
00001d8e l     O .text	00000004 __c.4471
00001a58 l     O .text	00000012 __c.4615
00001a3a l     O .text	00000002 __c.4624
00001a3c l     O .text	00000009 __c.4622
00001a45 l     O .text	0000000a __c.4620
00001a4f l     O .text	00000009 __c.4618
00001a38 l     O .text	00000002 __c.4629
00001a18 l     O .text	00000020 __c.4638
0000199d l     O .text	00000002 __c.4653
000019d2 l     O .text	0000000a __c.4647
000019b3 l     O .text	0000001f __c.4649
0000199f l     O .text	00000014 __c.4651
00001a0f l     O .text	00000009 __c.4641
000019f0 l     O .text	0000001f __c.4643
000019dc l     O .text	00000014 __c.4645
0000199b l     O .text	00000002 __c.4658
00001976 l     O .text	00000025 __c.4697
0000193d l     O .text	00000039 __c.4699
00001908 l     O .text	00000035 __c.4701
000018d3 l     O .text	00000035 __c.4703
0000189b l     O .text	00000038 __c.4705
00001870 l     O .text	0000002b __c.4707
0000184c l     O .text	00000024 __c.4720
0000182a l     O .text	00000022 __c.4728
00801a7d l     O .bss	00000002 stack_ind
00801a73 l     O .bss	0000000a stack_p
0000180b l     O .text	0000001f __c.4764
0000179e l     O .text	00000037 __c.4779
000017d5 l     O .text	00000036 __c.4777
00001d81 l     O .text	0000000d __c.4490
00001ad0 l     O .text	00000022 __c.4601
00001af2 l     O .text	00000030 __c.4598
00001b22 l     O .text	0000002f __c.4589
00001b51 l     O .text	00000030 __c.4586
00001b81 l     O .text	0000002e __c.4577
00001baf l     O .text	0000002e __c.4569
00001d63 l     O .text	0000001e __c.4492
00001d41 l     O .text	00000022 __c.4495
00001d1f l     O .text	00000022 __c.4506
00001cf5 l     O .text	0000002a __c.4510
00001cc4 l     O .text	00000031 __c.4513
00001c97 l     O .text	0000002d __c.4523
00001c69 l     O .text	0000002e __c.4531
00001c3b l     O .text	0000002e __c.4534
00001c09 l     O .text	00000032 __c.4542
00001bdd l     O .text	0000002c __c.4559
00001aae l     O .text	00000022 __c.4605
00001a91 l     O .text	0000001d __c.4607
00001a6a l     O .text	00000027 __c.4609
0000171e l     O .text	0000001a __c.4804
00001716 l     O .text	00000008 __c.4806
00001738 l     O .text	00000022 __c.4802
00001762 l     O .text	0000001a __c.4798
0000175a l     O .text	00000008 __c.4800
0000177c l     O .text	00000022 __c.4796
000016ce l     O .text	00000011 __c.4832
000016df l     O .text	00000014 __c.4830
000016f3 l     O .text	00000014 __c.4828
000016cc l     O .text	00000002 __c.4837
00001707 l     O .text	0000000f __c.4816
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801a9f l     O .bss	00000005 B.4236
00801a8c l     O .bss	00000013 B.4240
00801a7f l     O .bss	0000000d B.4244
00002424 l     O .text	00000005 __c.4347
00002419 l     O .text	0000000b __c.4349
00002405 l     O .text	00000014 __c.4359
000023ea l     O .text	0000001b __c.4361
000023d9 l     O .text	00000011 __c.4369
000023b6 l     O .text	00000023 __c.4371
00002399 l     O .text	0000001d __c.4373
0000237a l     O .text	0000001f __c.4375
00002362 l     O .text	00000018 __c.4380
00002348 l     O .text	0000001a __c.4385
00002322 l     O .text	00000026 __c.4394
00002309 l     O .text	00000019 __c.4396
0000220d l     O .text	00000025 __c.4418
00002232 l     O .text	0000001a __c.4416
0000224c l     O .text	00000016 __c.4414
00002262 l     O .text	0000000e __c.4412
00002270 l     O .text	0000001c __c.4410
0000228c l     O .text	0000001d __c.4408
000022f3 l     O .text	00000016 __c.4398
000022da l     O .text	00000019 __c.4401
000022c2 l     O .text	00000018 __c.4403
000022a9 l     O .text	00000019 __c.4406
000021ec l     O .text	00000021 __c.4420
000021d6 l     O .text	00000016 __c.4422
000021b9 l     O .text	0000001d __c.4424
0000219d l     O .text	0000001c __c.4426
0000218c l     O .text	00000011 __c.4428
0000216e l     O .text	0000001e __c.4430
0000214f l     O .text	0000001f __c.4432
00002134 l     O .text	0000001b __c.4434
0000211b l     O .text	00000019 __c.4436
00002104 l     O .text	00000017 __c.4438
000020e1 l     O .text	00000023 __c.4440
000020c1 l     O .text	00000020 __c.4442
00002089 l     O .text	00000038 __c.4445
00001f46 l     O .text	00000020 __c.4478
00001f32 l     O .text	00000014 __c.4480
000024c9 l     O .text	00000029 __c.4308
0000247c l     O .text	00000026 __c.4316
000024a2 l     O .text	00000014 __c.4314
000024b6 l     O .text	00000013 __c.4310
00002454 l     O .text	00000028 __c.4320
00002429 l     O .text	0000002b __c.4322
00001f18 l     O .text	0000001a __c.4487
00001f05 l     O .text	00000013 __c.4489
000025d2 l     O .text	00000013 __c.4250
00001ef9 l     O .text	0000000c __c.4503
00001ee6 l     O .text	00000013 __c.4510
00001ed7 l     O .text	0000000f __c.4512
00002076 l     O .text	00000013 __c.4454
0000205d l     O .text	00000019 __c.4456
00002038 l     O .text	00000025 __c.4459
0000201b l     O .text	0000001d __c.4462
00001ffd l     O .text	0000001e __c.4464
00001fd6 l     O .text	00000027 __c.4466
00001fc2 l     O .text	00000014 __c.4468
00001fa2 l     O .text	00000020 __c.4470
00001f66 l     O .text	0000003c __c.4473
00001eb4 l     O .text	00000023 __c.4526
0000258e l     O .text	00000028 __c.4283
00002570 l     O .text	0000001e __c.4285
0000253f l     O .text	00000019 __c.4289
00002558 l     O .text	00000018 __c.4287
0000251a l     O .text	00000025 __c.4294
000024f2 l     O .text	00000028 __c.4296
000025b6 l     O .text	0000001c __c.4266
00001e9e l     O .text	00000016 __c.4531
00001e88 l     O .text	00000016 __c.4533
00001e73 l     O .text	00000015 __c.4535
00001e64 l     O .text	0000000f __c.4537
00001e50 l     O .text	00000014 __c.4539
00001e1c l     O .text	00000034 __c.4541
00001de8 l     O .text	00000034 __c.4543
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801af1 l     O .bss	00000002 lcd_display_time
000047d1 l     O .text	00000030 __c.4449
000047b2 l     O .text	0000001f __c.4451
00004795 l     O .text	0000001d __c.4453
00004785 l     O .text	00000010 __c.4455
0000475e l     O .text	00000027 __c.4457
00004744 l     O .text	0000001a __c.4459
0000472a l     O .text	0000001a __c.4461
00004728 l     O .text	00000002 __c.4463
00004712 l     O .text	00000016 __c.4477
000046f8 l     O .text	0000001a __c.4483
000046da l     O .text	0000001e __c.4489
000046c4 l     O .text	00000016 __c.4491
000046be l     O .text	00000006 __c.4493
000046b8 l     O .text	00000006 __c.4495
0000469e l     O .text	0000001a __c.4497
00004698 l     O .text	00000006 __c.4504
00004692 l     O .text	00000006 __c.4506
000045ea l     O .text	000000a8 __c.4513
0001bf2c l     F .text	000002e2 user_task.part.1
000045e7 l     O .text	00000003 __c.4525
000045d2 l     O .text	00000015 __c.4527
000045c9 l     O .text	00000009 __c.4529
000045b4 l     O .text	00000015 __c.4534
000045b0 l     O .text	00000004 __c.4537
00004594 l     O .text	0000001c __c.4539
0000458b l     O .text	00000009 __c.4541
00004584 l     O .text	00000007 __c.4553
00004573 l     O .text	00000011 __c.4555
0000454c l     O .text	00000027 __c.4557
0000452d l     O .text	0000001f __c.4559
00004510 l     O .text	0000001d __c.4561
00004500 l     O .text	00000010 __c.4563
000044d9 l     O .text	00000027 __c.4565
000044bf l     O .text	0000001a __c.4567
000044a5 l     O .text	0000001a __c.4569
0000448f l     O .text	00000016 __c.4571
00004479 l     O .text	00000016 __c.4573
00004467 l     O .text	00000012 __c.4575
00004458 l     O .text	0000000f __c.4577
0000442a l     O .text	0000002e __c.4579
00004412 l     O .text	00000018 __c.4581
00004401 l     O .text	00000011 __c.4583
000043eb l     O .text	00000016 __c.4585
000043d6 l     O .text	00000015 __c.4587
000043c4 l     O .text	00000012 __c.4589
000043ac l     O .text	00000018 __c.4591
00004397 l     O .text	00000015 __c.4593
00004381 l     O .text	00000016 __c.4595
0000436b l     O .text	00000016 __c.4597
0000435a l     O .text	00000011 __c.4599
00004354 l     O .text	00000006 __c.4601
0000434e l     O .text	00000006 __c.4603
00004334 l     O .text	0000001a __c.4605
00004320 l     O .text	00000014 __c.4607
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
0080175d l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005790 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007882 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008b7c l     F .text	0000002a ld_dword
00008ba6 l     F .text	0000000c st_dword
00008bb2 l     F .text	00000012 mem_set
00008bc4 l     F .text	0000001e mem_cmp
00008be2 l     F .text	0000010c tchar2uni
00008cee l     F .text	00000050 clst2sect
00008d3e l     F .text	00000078 clmt_clust
00008db6 l     F .text	0000001e sum_sfn
00008dd4 l     F .text	00000058 get_ldnumber
00801826 l     O .bss	00000001 CurrVol
00008e2c l     F .text	00000058 validate
00008e84 l     F .text	00000016 mem_cpy.part.0
00008e9a l     F .text	0000015a put_utf
00008ff4 l     F .text	00000220 get_fileinfo
00009214 l     F .text	0000002a ld_clust.isra.4
0000923e l     F .text	0000001a st_clust.isra.5
00009258 l     F .text	000000a6 sync_window.part.6
000092fe l     F .text	000000e4 sync_fs
000093e2 l     F .text	00000150 dir_clear
00009532 l     F .text	00000076 move_window
000095a8 l     F .text	00000080 check_fs
00009628 l     F .text	000004b4 mount_volume
00801829 l     O .bss	00000002 FatFs
00801827 l     O .bss	00000002 Fsid
00009adc l     F .text	000001f6 put_fat
00009cd2 l     F .text	00000168 get_fat.isra.10
00009e3a l     F .text	00000182 dir_sdi
00009fbc l     F .text	0000024c create_chain
0000a208 l     F .text	00000122 remove_chain
0000a32a l     F .text	000001d0 dir_next
0000a4fa l     F .text	00000072 dir_alloc
0000a56c l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a6fe l     F .text	00000090 dir_remove
0000a78e l     F .text	0000021c dir_find
0000a9aa l     F .text	0000031c dir_register
0000acc6 l     F .text	00000462 follow_path
0080046b l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000dc86 l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3635
0080182e l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3637
000007d7 l     O .text	00000013 __c.3639
000007cb l     O .text	0000000c __c.3641
000007ba l     O .text	00000011 __c.3643
0000079c l     O .text	0000001e __c.3646
00000787 l     O .text	00000015 __c.3648
00000779 l     O .text	0000000e __c.3650
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a37 l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a26 l     O .text	00000011 __c.3632
00000a08 l     O .text	0000001e __c.3634
000009e9 l     O .text	0000001f __c.3636
000009cb l     O .text	0000001e __c.3638
000009ad l     O .text	0000001e __c.3640
0000098e l     O .text	0000001f __c.3642
0000096f l     O .text	0000001f __c.3644
00000950 l     O .text	0000001f __c.3646
00000931 l     O .text	0000001f __c.3648
00000912 l     O .text	0000001f __c.3650
000008f4 l     O .text	0000001e __c.3652
000008cf l     O .text	00000025 __c.3654
00000882 l     O .text	0000004d __c.3656
00000867 l     O .text	0000001b __c.3662
00000845 l     O .text	00000022 __c.3664
00000843 l     O .text	00000002 __c.3666
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b73 l     O .text	0000000c __c.3587
00000afc l     O .text	00000077 __c.3589
00000a7c l     O .text	0000000e __c.3626
00000a53 l     O .text	00000029 __c.3630
00000a3e l     O .text	00000015 __c.3632
00000adc l     O .text	00000020 __c.3605
00000acc l     O .text	00000010 __c.3607
00000ab8 l     O .text	00000014 __c.3609
00000aaa l     O .text	0000000e __c.3611
00000a8a l     O .text	00000020 __c.3613
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000016c1 l     O .text	0000000b __c.4416
000014f8 l     O .text	000001c9 __c.4418
000014eb l     O .text	0000000d __c.4426
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001dc4 l     O .text	00000007 __c.3641
00001dcb l     O .text	0000001d __c.3637
00001db3 l     O .text	00000011 __c.3643
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00015fee l     F .text	000000ac amigo_overflow_check
00002da0 l     O .text	00000019 __c.4173
0001609a l     F .text	000000e8 amigo_chs_to_logical
00002d4d l     O .text	0000002b __c.4166
00002e20 l     O .text	00000018 __c.4143
00002e02 l     O .text	0000001e __c.4149
00002de8 l     O .text	0000001a __c.4151
00002dd3 l     O .text	00000015 __c.4157
00002db9 l     O .text	0000001a __c.4159
00002d78 l     O .text	00000028 __c.4196
00002d3d l     O .text	00000010 __c.4207
00002d28 l     O .text	00000015 __c.4211
00002d16 l     O .text	00000012 __c.4217
00002cfc l     O .text	0000001a __c.4223
00002cea l     O .text	00000012 __c.4230
00002ccb l     O .text	0000001f __c.4232
00002cab l     O .text	00000020 __c.4234
00002c91 l     O .text	0000001a __c.4241
00002c84 l     O .text	0000000d __c.4243
00002c75 l     O .text	0000000f __c.4256
00002c0e l     O .text	00000067 __c.4263
00002ba7 l     O .text	00000067 __c.4265
00002b40 l     O .text	00000067 __c.4267
00002adb l     O .text	00000065 __c.4269
00002a8b l     O .text	00000050 __c.4274
00002a3b l     O .text	00000050 __c.4276
000029eb l     O .text	00000050 __c.4278
0000299a l     O .text	00000051 __c.4280
00002968 l     O .text	00000032 __c.4292
00002946 l     O .text	00000022 __c.4294
00002925 l     O .text	00000021 __c.4296
00002904 l     O .text	00000021 __c.4298
000028d5 l     O .text	0000002f __c.4300
000028b5 l     O .text	00000020 __c.4303
000028a1 l     O .text	00000014 __c.4306
0000288d l     O .text	00000014 __c.4309
00002864 l     O .text	00000029 __c.4311
00002843 l     O .text	00000021 __c.4313
00002833 l     O .text	00000010 __c.4316
00002811 l     O .text	00000022 __c.4318
000027f5 l     O .text	0000001c __c.4320
000027cc l     O .text	00000029 __c.4322
000027ac l     O .text	00000020 __c.4324
00002781 l     O .text	0000002b __c.4326
00002762 l     O .text	0000001f __c.4328
00002752 l     O .text	00000010 __c.4331
00002720 l     O .text	00000032 __c.4336
00002700 l     O .text	00000020 __c.4340
000026df l     O .text	00000021 __c.4343
000026c0 l     O .text	0000001f __c.4346
0000269e l     O .text	00000022 __c.4349
00002682 l     O .text	0000001c __c.4352
00002662 l     O .text	00000020 __c.4355
00002639 l     O .text	00000029 __c.4360
0000260e l     O .text	0000002b __c.4363
000025e5 l     O .text	00000029 __c.4366
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002e75 l     O .text	00000021 __c.4115
00002ea4 l     O .text	00000015 __c.4107
00002e96 l     O .text	0000000e __c.4109
00002edb l     O .text	00000022 __c.4097
00002ec5 l     O .text	00000016 __c.4099
00002eb9 l     O .text	0000000c __c.4101
00002e6e l     O .text	00000007 __c.4121
00002e52 l     O .text	0000001c __c.4126
00002e38 l     O .text	0000001a __c.4128
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004316 l     O .text	0000000a __c.3845
00004152 l     O .text	000001c4 __c.3847
00004108 l     O .text	00000029 __c.3866
000040f0 l     O .text	00000018 __c.3871
000040cb l     O .text	00000025 __c.3883
000040b2 l     O .text	00000019 __c.3889
00004091 l     O .text	00000021 __c.3896
00004055 l     O .text	0000003c __c.3905
00004018 l     O .text	0000003d __c.3914
00801ad1 l     O .bss	00000020 _lif_ctime_buf.4017
00801ab1 l     O .bss	00000020 _timestr.4022
00004013 l     O .text	00000005 __c.4037
00003ff9 l     O .text	0000001a __c.4039
00003fdc l     O .text	0000001d __c.4041
00003fbf l     O .text	0000001d __c.4043
00003fa2 l     O .text	0000001d __c.4045
00003f85 l     O .text	0000001d __c.4047
00003f68 l     O .text	0000001d __c.4049
00003f4b l     O .text	0000001d __c.4051
00003f2e l     O .text	0000001d __c.4053
00003f11 l     O .text	0000001d __c.4055
00003ef7 l     O .text	0000001a __c.4057
00003edb l     O .text	0000001c __c.4059
00003ebe l     O .text	0000001d __c.4061
00003ea1 l     O .text	0000001d __c.4063
00003e85 l     O .text	0000001c __c.4065
00003e69 l     O .text	0000001c __c.4067
00003e4f l     O .text	0000001a __c.4069
00003e35 l     O .text	0000001a __c.4071
00003e19 l     O .text	0000001c __c.4073
00003dfd l     O .text	0000001c __c.4075
00003de0 l     O .text	0000001d __c.4077
00003dc3 l     O .text	0000001d __c.4079
00003da6 l     O .text	0000001d __c.4081
00003d8a l     O .text	0000001c __c.4083
00003d70 l     O .text	0000001a __c.4085
00003d6e l     O .text	00000002 __c.4087
00003d4f l     O .text	0000001f __c.4094
00003d16 l     O .text	00000039 __c.4096
00003cfe l     O .text	00000018 __c.4098
00003cc5 l     O .text	00000039 __c.4100
00003c8c l     O .text	00000039 __c.4102
00003c67 l     O .text	00000025 __c.4104
00003c38 l     O .text	0000002f __c.4106
00003c0c l     O .text	0000002c __c.4108
00003beb l     O .text	00000021 __c.4114
00003ba7 l     O .text	00000044 __c.4116
00003b66 l     O .text	00000041 __c.4118
00003b38 l     O .text	0000002e __c.4120
00003aed l     O .text	0000004b __c.4122
00003aa2 l     O .text	0000004b __c.4124
00003a77 l     O .text	0000002b __c.4126
00003a4b l     O .text	0000002c __c.4128
00003988 l     O .text	0000003a __c.4183
00003968 l     O .text	00000020 __c.4192
0000391b l     O .text	0000004d __c.4217
000039f6 l     O .text	00000055 __c.4144
000039e9 l     O .text	0000000d __c.4146
000039dc l     O .text	0000000d __c.4154
000039cf l     O .text	0000000d __c.4159
000039c2 l     O .text	0000000d __c.4164
000038e3 l     O .text	00000038 __c.4229
000038ba l     O .text	00000029 __c.4231
00003869 l     O .text	00000051 __c.4234
0000382a l     O .text	0000003f __c.4247
000037f4 l     O .text	00000036 __c.4249
000037c1 l     O .text	00000033 __c.4251
0000378e l     O .text	00000033 __c.4253
00003777 l     O .text	00000017 __c.4263
00003737 l     O .text	00000040 __c.4265
000036eb l     O .text	0000004c __c.4268
000036bb l     O .text	00000030 __c.4270
000036b9 l     O .text	00000002 __c.4273
000036ad l     O .text	0000000c __c.4275
000036a0 l     O .text	0000000d __c.4277
0000368f l     O .text	00000011 __c.4279
0000367c l     O .text	00000013 __c.4281
00003669 l     O .text	00000013 __c.4283
00003656 l     O .text	00000013 __c.4285
0000362f l     O .text	00000027 __c.4292
0000360a l     O .text	00000025 __c.4294
000035d1 l     O .text	00000039 __c.4308
000035ad l     O .text	00000024 __c.4325
0000359f l     O .text	0000000e __c.4342
00003591 l     O .text	0000000e __c.4347
00003583 l     O .text	0000000e __c.4349
00003550 l     O .text	00000033 __c.4363
00003522 l     O .text	0000002e __c.4365
000034f3 l     O .text	0000002f __c.4367
000034c3 l     O .text	00000030 __c.4369
00003494 l     O .text	0000002f __c.4371
00003464 l     O .text	00000030 __c.4373
0000343d l     O .text	00000027 __c.4375
00003426 l     O .text	00000017 __c.4377
0000340f l     O .text	00000017 __c.4379
000033f6 l     O .text	00000019 __c.4381
000033dd l     O .text	00000019 __c.4383
000033cf l     O .text	0000000e __c.4385
000033b7 l     O .text	00000018 __c.4409
000033a0 l     O .text	00000017 __c.4411
00003368 l     O .text	00000038 __c.4413
00003358 l     O .text	00000010 __c.4415
00003297 l     O .text	0000000e __c.4426
000032a5 l     O .text	00000028 __c.4424
00003323 l     O .text	00000035 __c.4419
000032cd l     O .text	00000056 __c.4421
0000326f l     O .text	00000028 __c.4434
00003261 l     O .text	0000000e __c.4437
00003249 l     O .text	00000018 __c.4454
00003236 l     O .text	00000013 __c.4456
00003228 l     O .text	0000000e __c.4458
0000321a l     O .text	0000000e __c.4463
000031fa l     O .text	00000020 __c.4480
000031df l     O .text	0000001b __c.4482
000031c3 l     O .text	0000001c __c.4484
00003194 l     O .text	0000002f __c.4486
00003181 l     O .text	00000013 __c.4488
00003151 l     O .text	00000030 __c.4490
00003143 l     O .text	0000000e __c.4492
00003135 l     O .text	0000000e __c.4497
00003110 l     O .text	00000025 __c.4505
000030f0 l     O .text	00000020 __c.4507
000030d1 l     O .text	0000001f __c.4509
000030a9 l     O .text	00000028 __c.4511
0000309a l     O .text	0000000f __c.4513
00003072 l     O .text	00000028 __c.4522
0000304b l     O .text	00000027 __c.4524
00003024 l     O .text	00000027 __c.4526
00002fee l     O .text	00000036 __c.4528
00002fc5 l     O .text	00000029 __c.4530
00002fae l     O .text	00000017 __c.4532
00002f85 l     O .text	00000029 __c.4545
00002f60 l     O .text	00000025 __c.4547
00002f3d l     O .text	00000023 __c.4549
00002f1d l     O .text	00000020 __c.4551
00002efd l     O .text	00000020 __c.4553
00004131 l     O .text	00000021 __c.3860
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801759 l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
00801757 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006510 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
0080178c l     O .bss	00000020 _ts_to_str
00801784 l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017ac l     O .bss	00000002 timers_configured
008017ae l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eaf l     O .text	0000001d __c.3746
00801a65 l     O .bss	00000001 _ppr_reg
00000e9c l     O .text	00000013 __c.3764
00000e8b l     O .text	00000011 __c.3778
00000e7e l     O .text	0000000d __c.3787
00000e70 l     O .text	0000000e __c.3796
00000e63 l     O .text	0000000d __c.3803
00000e55 l     O .text	0000000e __c.3809
00000000 l    df *ABS*	00000000 _clear_bss.o
00004832 l       .text	00000000 .do_clear_bss_start
00004830 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c604 l       .text	00000000 __udivmodqi4_ep
0001c5fc l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c624 l       .text	00000000 __udivmodhi4_ep
0001c616 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c64c l       .text	00000000 __divmodhi4_neg1
0001c654 l       .text	00000000 __divmodhi4_neg2
0001c65a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c682 l       .text	00000000 __udivmodsi4_ep
0001c668 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c6b8 l       .text	00000000 __divmodsi4_neg2
0001c6c6 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001cf36 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
00015724 g     F .text	0000004a SS80_Selected_Device_Clear
0001c6ea g       .text	00000002 .hidden __usmulhisi3
0000eac4 g     F .text	0000000c putchar
0001175c g     F .text	00000022 SS80_is_MTA
000063ac g     F .text	000000ea clock_gettime
00005a66 g     F .text	000000d4 i2c_display_task_errors
00005dfe g     F .text	00000084 rtc_init
00011a9a g     F .text	000000a8 GPIB_COMMANDS
00004840  w      .text	00000000 __vector_22
00010b74 g     F .text	00000054 gpib_unread
00004a24 g     F .text	0000000a set_error
00014914 g     F .text	00000034 SS80_test_extended_status
00005eb2  w    F .text	00000016 strcpy
00007660 g     F .text	00000008 asctime
00006938 g     F .text	00000020 tm_mon_to_ascii
00801b87 g     O .bss	00000235 Fatfs
0000ebf8 g     F .text	0000004a mctime
00004840  w      .text	00000000 __vector_28
0000dbe6 g     F .text	0000001a mmc_fast
00005c3e g     F .text	0000008c rtc_write
0000565e g     F .text	00000058 i2c_fn
00015816 g     F .text	00000218 SS80_Transparent_State
00801a66 g     O .bss	00000001 gpib_unread_f
0000490e g     F .text	00000004 spi_RX_buffer
000121e0 g     F .text	00000042 gpib_help
0001558c g     F .text	0000009a SS80_Report
0000f728 g     F .text	0000006a free_file_descriptor
0000e8b8 g     F .text	00000096 fatfs_putc
0001c7ca g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004840  w      .text	00000000 __vector_1
00011c08 g     F .text	00000184 GPIB
0000e476 g     F .text	00000042 fatfs_help
00006602 g     F .text	00000016 delete_all_timers
00005240 g     F .text	0000000c SPI0_TXRX_Byte
0001cc98 g       .text	00000000 __fp_mpack_finite
0000f26e g     F .text	00000086 utime
00801b57 g     O .bss	00000008 __clock
0001bc3e g     F .text	0000007c lcd_time
00012d02 g     F .text	00000054 find_device
0000748e g     F .text	00000128 set_dst
0000ef8c g     F .text	00000096 fdevopen
0001177e g     F .text	00000022 SS80_is_MSA
000048aa g     F .text	00000060 spi_end
0001836c g     F .text	000000d6 lif_dir2str
0001cc1e g     F .text	00000040 round
00013010 g     F .text	0000017e alloc_device
00004c20 g     F .text	0000006a safefree
00011d8c g     F .text	00000130 GPIB_TALK
00004840  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c8ba g     F .text	00000004 __divsf3
0001c76e g       .text	00000036 .hidden __epilogue_restores__
00004ff4 g     F .text	00000018 uart_rx_count
00014286 g     F .text	0000003a lif_dir_count
00801de6 g     O .bss	00000009 gpib_timer
00011ebc g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
000186ee g     F .text	0000000e lif_vol_clear
00006496 g     F .text	0000007a clock_task
00010f3a g     F .text	00000284 gpib_trace_display
0001b672 g     F .text	000000fe lif_rename_file
000134a0 g     F .text	00000850 Read_Config
00012c82 g     F .text	00000028 find_type
0001cadc g     F .text	00000022 __fp_round
00012caa g     F .text	0000001e count_drive_types
00006958 g     F .text	00000042 Days_Per_Month
000067f2 g     F .text	00000028 execute_timers
0000fe3e g     F .text	00000176 ls_info
00004840  w      .text	00000000 __vector_34
0000dba0 g     F .text	0000001a mmc_spi_begin
0001c98a g     F .text	0000000a __fixsfsi
0000670c g     F .text	0000000c clock_elapsed_begin
00005f1a  w    F .text	00000032 reverse
0000d4f4 g     F .text	00000006 mmc_disk_status
0001cafe g     F .text	00000044 __fp_split3
0001095e g     F .text	00000014 gpib_timeout_set
0001c60e g       .text	00000028 .hidden __udivmodhi4
000048a6 g     F .text	00000004 chip_select_init
0000669a g     F .text	00000072 ts_to_str
00008b70 g     F .text	0000000c atol
000079e2 g     F .text	000000aa p_ntoa
0000de56 g     F .text	000000d8 tm_to_fat
00004a66 g     F .text	00000122 PrintFree
00016aee g     F .text	000000b8 amigo_cmd_dsj
0000d26e g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
00013238 g     F .text	0000011c hpdir_set_device
0001ca66 g     F .text	00000048 __fp_cmp
0001153a g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801dc4 g     O .bss	00000002 errno
000157f4 g     F .text	00000022 SS80_Cancel
0001cf38 g       .text	00000000 _etext
0000d6a4 g     F .text	00000488 mmc_disk_ioctl
000060a2 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
000191b2 g     F .text	000000b8 lif_writedirindex
000050fe g     F .text	000000ce SPI0_Speed
00005598 g     F .text	000000c6 i2c_task_run
00006718 g     F .text	0000007c clock_elapsed_end
0000d0e8 g     F .text	000000c4 ff_wtoupper
0001c7e8 g     F .text	0000000a __subsf3
0001b234 g     F .text	00000312 lif_add_lif_file
00801def g     O .bss	00000002 lastcmd
00004840  w      .text	00000000 __vector_24
00013236 g     F .text	00000002 set_Config_Defaults
00005bd0 g     F .text	00000062 i2c_rtc_read
0000608e g     F .text	00000014 skipspaces
0000bcbc g     F .text	0000026c f_getcwd
00004840  w      .text	00000000 __vector_12
0001059a g     F .text	00000032 gpib_timer_init
000105fc g     F .text	0000002c ppr_init
0000ead0 g     F .text	00000068 fgets
0000500c g     F .text	0000004c uart_get_tail
00004bdc g     F .text	00000044 safemalloc
0001b546 g     F .text	0000012c lif_del_file
00007850 g     F .text	00000032 _putc_buffer_fn
0001a46c g     F .text	00000172 lif_ascii_string_to_e010
0000dc6c g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
00018684 g     F .text	0000004e lif_lifbcd2timestr
00801df1 g     O .bss	00000200 gpib_iobuff
00017b42 g     F .text	00000028 V2B_MSB
00018524 g     F .text	00000084 lif_time2lifbcd
00012cfa g     F .text	00000008 find_free
00005536 g     F .text	00000024 i2c_done
00018c5e g     F .text	0000036a lif_check_dir
00004840 g       .text	00000000 __bad_interrupt
00004ce4 g     F .text	00000090 delayms
000156f0 g     F .text	00000018 SS80_Channel_Independent_Clear
0000fd66 g     F .text	000000d8 cat
000089e0 g     F .text	00000028 snprintf_P
00016bf6 g     F .text	00000132 amigo_todo_op
0001576e g     F .text	00000086 SS80_Amigo_Clear
0000ef02 g     F .text	0000008a perror
0001bec6 g     F .text	00000024 gpib_user_task
0001e58e g       *ABS*	00000000 __data_load_end
0000d1b8 g     F .text	0000000c disk_initialize
00801aa4 g     O .bss	0000000d plot
0001090c g     F .text	00000006 gpib_timer_elapsed_end
00017cc0 g     F .text	0000002a lif_free
0000eb68 g     F .text	0000002e puts
0000fb3a g     F .text	000001bc copy
000068fe g     F .text	00000010 clock_settime
00017cea g     F .text	0000003e lif_stralloc
00005e82  w    F .text	00000016 islower
00004a38 g     F .text	0000002e freeRam
0001620a g     F .text	0000001c amigo_request_logical_address
000056b6 g     F .text	0000001c i2c_send_stop
0000cb9e g     F .text	0000022a f_rename
00004840  w      .text	00000000 __vector_6
000108ee g     F .text	0000001e gpib_timer_reset
000194ae g     F .text	000005d4 lif_create_volume
0001cce4 g     F .text	00000130 malloc
00004932 g     F .text	00000040 spi_init
0000faf8 g     F .text	00000042 posix_help
00004840  w      .text	00000000 __vector_31
0001065e g     F .text	00000046 dbf_open
0001bb7c g     F .text	000000c2 copyright
0000bc06 g     F .text	000000b6 f_chdir
0001c8b2 g       .text	00000000 __lesf2
00004876 g     F .text	00000030 chip_deselect
00017acc g     F .text	00000076 PRINTER_COMMANDS
00006794 g     F .text	00000036 clock_clear
0000768a g     F .text	000000ee initialize_clock
0000dc6a g     F .text	00000002 mmc_power_off
00013fe2 g     F .text	00000124 display_mounts
0000de50 g     F .text	00000006 mmc_wp_status
0000e7b2 g     F .text	00000106 fatfs_getc
00801ff1 g     O .bss	00000001 listening_last
0000d1ac g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
000068d4 g     F .text	0000002a clock_getres
0080177e g     O .bss	00000004 i2c_task
0001a5de g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
000080ae  w    F .text	00000038 strlen_X
0001850e g     F .text	00000016 lif_BCD2BIN
00017d28 g     F .text	00000054 lif_open
00007778 g     F .text	000000d8 display_clock
00010628 g     F .text	0000001a ppr_bit_set
00004840  w      .text	00000000 __vector_3
000105f4 g     F .text	00000008 ppr_reg
000113ee g     F .text	00000008 gpib_decode
00004d74 g     F .text	00000022 uart_rx_flush
0000ee10 g     F .text	00000004 rmdir
0000658c g     F .text	00000076 set_timers
00801b7b g     O .bss	0000000c dst
0000ee86 g     F .text	0000007c readdir
0001cb42 g     F .text	0000000e __fp_zero
0000c582 g     F .text	0000002a f_closedir
0001bd08 g     F .text	00000148 lcd_setup
0000d204 g     F .text	00000014 disk_ioctl
0001b87e g     F .text	000002ea lif_tests
00007f72 g     F .text	00000084 _puts_pad
00004912 g     F .text	00000020 spi_TX
00801af3 g     O .bss	00000001 debug_input
000186fc g     F .text	0000038c lif_dump_vol
00011fb2 g     F .text	0000004c listen_cleanup
000185a8 g     F .text	000000a0 lif_lifbcd2time
00018442 g     F .text	000000be lif_str2dir
000052ce g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001c8b2 g       .text	00000000 __nesf2
00013354 g     F .text	00000020 hpdir_set_parameters
00005b3a g     F .text	0000000e BINtoBCD
0000f354 g     F .text	000000d0 lseek
00004840  w      .text	00000000 __vector_23
0001cf38 g       *ABS*	00000000 __data_load_start
00801832 g     O .bss	00000004 _mmc_clock
00004802 g       .text	00000000 __dtors_end
0001184a g     F .text	00000012 gpib_init_devices
00005fbe  w    F .text	00000050 strncasecmp
008022b7 g       .bss	00000000 __bss_end
00017f9c g     F .text	00000056 lif_chars
0001c6f6 g       .text	00000014 .hidden __muluhisi3
0001250a g     F .text	0000006a print_tok_str
00004840  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00013cf0 g     F .text	000002f2 format_drives
00004840  w      .text	00000000 __vector_25
008022b3 g     O .bss	00000002 __brkval
00006b56 g     F .text	0000002a gmtime_r
0000ec9c g     F .text	00000052 chmod
0000681a g     F .text	000000ba init_timers
000117e4 g     F .text	00000022 AMIGO_is_MSA
00019014 g     F .text	000000d0 lif_checkdirindex
0000c870 g     F .text	0000014e f_unlink
00010bd4 g     F .text	00000020 gpib_control_pin_read
0001078c g     F .text	000000ae dbf_open_read
00005b5a g     F .text	00000076 i2c_rtc_write
0000dc68 g     F .text	00000002 mmc_power_on
00008aa6 g     F .text	000000bc strtol
000108e8 g     F .text	00000006 gpib_timer_elapsed_begin
00004d96 g     F .text	00000134 uart_ubr
0000d058 g     F .text	00000066 ff_uni2oem
00005350 g     F .text	0000009e i2c_check_op
0001a3b6 g     F .text	000000b6 lif_e010_pad_sector
00017c12 g     F .text	00000042 lif_help
0000617a g     F .text	000000b8 split_args
0000ed94 g     F .text	0000003e rename
00010752 g     F .text	0000003a dbf_close
00017726 g     F .text	000000be receive_plot_flush
0001c8d4 g     F .text	000000dc __divsf3x
00004840  w      .text	00000000 __vector_11
00801ff2 g     O .bss	00000001 spoll
0000ec42 g     F .text	0000001c basename
00014948 g     F .text	000000c6 SS80_display_extended_status
000175da g     F .text	00000130 AMIGO_COMMANDS
000180da g     F .text	0000007a lif_fixname
0000d5bc g     F .text	000000e8 mmc_disk_write
00004802  w      .text	00000000 __init
0001ccb0 g     F .text	00000034 calloc
0001afc4 g     F .text	00000270 lif_extract_lif_as_lif
00006338 g     F .text	00000026 install_timers_isr
00013374 g     F .text	0000012c Post_Config
000105cc g     F .text	00000014 reverse_8bits
00014b10 g     F .text	000000e0 SS80_describe
00005090 g     F .text	0000002c uart_getchar
00007a8c g     F .text	0000020e p_ftoa
0000f614 g     F .text	000000dc write
00017ff2 g     F .text	00000074 lif_B2S
0001cb50 g       .text	00000000 __gtsf2
0000fab8 g     F .text	00000040 fprintf
00010e96 g     F .text	000000a4 gpib_decode_header
000111be g     F .text	00000230 gpib_read_byte
00012408 g     F .text	00000044 tok_index
00015708 g     F .text	0000001c SS80_Universal_Device_Clear
0001a7ee g     F .text	00000278 lif_add_ascii_file_as_e010
0000635e g     F .text	0000004e __vector_13
00005ef4  w    F .text	00000026 strcat
00801af6 g     O .bss	00000057 uarts
00004a2e g     F .text	0000000a clear_error
0001cb74 g       .text	00000000 __mulsf3_pse
00004840  w      .text	00000000 __vector_17
00004a02 g     F .text	00000022 spi_TXRX
0001caba g     F .text	00000006 __fp_nan
00012d56 g     F .text	000001c6 set_active_device
00004840  w      .text	00000000 __vector_19
000062b8 g     F .text	0000007c get_value
000052a6 g     F .text	00000028 SPI0_TX
00018066 g     F .text	0000003a lif_checkname
0000ec5e g     F .text	0000003e chdir
00004840  w      .text	00000000 __vector_7
0001686a g     F .text	000000b6 amigo_buffered_read_execute
0000dcce g     F .text	00000182 mmc_init
0000e4b8 g     F .text	000001a0 fatfs_ls
0001caae g     F .text	0000000c __fp_inf
00008a08 g     F .text	00000028 sprintf_P
0001c7b2 g       .text	00000018 .hidden __cmpdi2_s8
0000f022 g     F .text	00000088 fat_time_to_unix
0000f424 g     F .text	0000004e fseek
00801dbc g     O .bss	00000004 AccSize
000186d2 g     F .text	0000000c lif_image_clear
0000dc12 g     F .text	0000000e mmc_set_ms_timeout
00006334 g     F .text	00000004 enable_system_task
0000dc06 g     F .text	00000006 mmc_spi_RX_buffer
0000555a g     F .text	00000024 i2c_task_done
00006c76 g     F .text	00000058 is_dst
00004eca g     F .text	0000008e uart_init
0001464c g     F .text	00000078 SS80ControllerPack
00801ffb g     O .bss	00000204 Devices
00004828 g       .text	00000010 .hidden __do_clear_bss
000051cc g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
00019d42 g     F .text	00000200 lif_open_volume
0000fcf6 g     F .text	00000070 testpage
000179da g     F .text	000000f2 printer_buffer
0000bbd4 g     F .text	00000032 f_close
0001cb70 g     F .text	000000d2 __mulsf3x
0001770a g     F .text	0000001c printer_init
0000dbc2 g     F .text	0000001a mmc_slow
0000604e g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
000105e0 g     F .text	00000014 ppr_set
00016620 g     F .text	00000130 amigo_format
0000f472 g     F .text	000000da read
0001926a g     F .text	00000030 lif_writedirEOF
0000dbba g     F .text	00000008 mmc_spi_end
0001c9f0 g       .text	00000000 __floatsisf
00016ba6 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
0001929a g     F .text	00000214 lif_updatefree
000052fa g     F .text	0000002a SPI0_RX
0000b510 g     F .text	00000296 f_read
00801af4 g     O .bss	00000002 rtc_ok
00010a1e g     F .text	00000024 gpib_tx_init
0001173a g     F .text	00000022 SS80_is_MLA
00004f58 g     F .text	00000048 uart_rx_interrupt
000050bc g     F .text	00000006 uart0_getchar
00004840  w      .text	00000000 __vector_27
00010b08 g     F .text	0000006c gpib_disable_PPR
0000df7e g     F .text	000000e0 fatfs_scan_files
00004844 g     F .text	00000032 chip_select
00801756 g       .data	00000000 __data_end
00010718 g     F .text	0000003a dbf_lseek
00015e1a g     F .text	000001d4 SS80_COMMANDS
0000600e g     F .text	00000040 stralloc
0000c5ac g     F .text	00000088 f_readdir
00801ff3 g     O .bss	00000002 current
00014c42 g     F .text	0000004e SS80_Check_Volume
0000db68 g     F .text	00000038 mmc_install_timer
000079ac g     F .text	00000036 pch
00008a6a g     F .text	0000003c atodigit
0001c5d8 g       .text	0000001e .hidden __mulsi3
00005ec8  w    F .text	0000002c strncpy
0000edd2 g     F .text	0000003e unlink
0000f5ea g     F .text	0000002a sync
00015664 g     F .text	0000008c SS80_init
0001c8b2 g       .text	00000000 __eqsf2
0000f804 g     F .text	0000008a new_file_descriptor
00005f80  w    F .text	0000003e strcasecmp
0001c716 g       .text	00000020 .hidden __negdi2
00017bd2 g     F .text	00000040 B2V_LSB
0000e370 g     F .text	00000106 fatfs_filinfo_list
0000cdc8 g     F .text	0000009a f_chmod
00801b5f g     O .bss	00000018 timer_irq
0000557e g     F .text	0000001a i2c_send_start
00012cc8 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c636 g       .text	00000026 .hidden __divmodhi4
000146c4 g     F .text	00000198 SS80UnitPack
0001083a g     F .text	000000ae dbf_open_write
00004840  w      .text	00000000 __vector_5
0000db2c g     F .text	0000003c mmc_disk_timerproc
00801b4d g     O .bss	0000000a i2c
00007382 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004840  w      .text	00000000 __vector_33
0001244c g     F .text	0000003e tok_name
000113f6 g     F .text	00000144 gpib_read_str
00019f42 g     F .text	000003aa lif_dir
00016920 g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014a0e g     F .text	00000102 SS80_send_status
0001c6d8 g       .text	00000012 .hidden __tablejump2__
0001185c g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f1de g     F .text	00000090 unix_time_to_fat
00004802 g       .text	00000000 __ctors_start
0000d3aa g     F .text	0000014a mmc_disk_initialize
00801b77 g     O .bss	00000004 __tzone
0000df2e g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f54c g     F .text	00000038 fread
000186de g     F .text	00000010 lif_dir_clear
0001643c g     F .text	00000052 amigo_increment
00011ffe g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
00801836 g     O .bss	00000002 _mmc_timeout
0000480e g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000f9cc g     F .text	000000d4 posix_fopen_modes_to_open
00017b94 g     F .text	0000003e B2V_MSB
00801782 g     O .bss	00000002 i2c_callback
00018500 g     F .text	0000000e lif_BIN2BCD
0001cc5e g     F .text	00000036 __fp_mintl
0001c8b2 g     F .text	00000008 __cmpsf2
0001c7a4 g       .text	0000000e .hidden __xload_1
000109e2 g     F .text	0000003c gpib_rx_init
00006bd8 g     F .text	0000005c gettimeofday
0001cace g     F .text	0000000e __fp_pscB
0001cb0e g       .text	00000000 __fp_splitA
00018648 g     F .text	0000003c lif_ctime_gmt
00017e30 g     F .text	000000a6 lif_read
0000faa0 g     F .text	00000018 fopen
00801756 g       .bss	00000000 __bss_start
000075b6 g     F .text	000000aa asctime_r
00006d66 g     F .text	00000008 localtime
0001cf26 g     F .text	0000000e memset
00016d28 g     F .text	00000108 amigo_todo
000131d6 g     F .text	00000032 push_state
00007340 g     F .text	00000042 setdate
0001c222 g     F .text	000003b6 main
008002f5 g     O .data	00000015 _line2
000121de g     F .text	00000002 talk_cleanup
00005d70 g     F .text	0000008e rtc_run
0000f31e g     F .text	00000036 ftell
00801ff5 g     O .bss	00000001 talking
0000bad4 g     F .text	00000100 f_sync
00801a69 g     O .bss	00000002 AMIGOs
0001c8b2 g       .text	00000000 __ltsf2
000050fa g     F .text	00000004 uart_keyhit
0001318e g     F .text	00000048 init_Devices
00004840  w      .text	00000000 __vector_4
00018fc8 g     F .text	0000004c lif_close_volume
0000dbdc g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
000190e4 g     F .text	000000ce lif_readdirindex
00016e58 g     F .text	000005cc Amigo_Command
0000f7f4 g     F .text	00000010 fclose
0000eab8 g     F .text	0000000c getchar
0001638a g     F .text	000000b2 amigo_send_status
00016182 g     F .text	00000088 amigo_init
00800136 g     O .data	0000004a sys_errlist
00006c34 g     F .text	00000042 time
0000ee4a g     F .text	0000003c opendir
0001cc94 g     F .text	0000001c __fp_mpack
00012f1c g     F .text	000000f4 SS80_Set_Defaults
00005c32 g     F .text	0000000c i2c_rtc_init
00006bb4 g     F .text	00000024 settimezone
0000b128 g     F .text	00000078 f_mount
0000e07c g     F .text	000002f4 fatfs_status
000117c2 g     F .text	00000022 AMIGO_is_MTA
0001c6c8 g       .text	00000010 .hidden __negsi2
0000c4a0 g     F .text	000000e2 f_opendir
00015626 g     F .text	0000003e Clear_Common
0001beea g     F .text	00000042 help
00010a9c g     F .text	0000006c gpib_enable_PPR
00014106 g     F .text	00000084 mount
000164e4 g     F .text	0000013c amigo_verify
0001cb58 g     F .text	00000004 __mulsf3
00006232 g     F .text	00000086 get_token
00016226 g     F .text	000000ba amigo_request_status
000125c0 g     F .text	000001b6 display_Addresses
0000f2f4 g     F .text	0000002a fileno_to_fatfs
0000d0be g     F .text	0000002a ff_oem2uni
00005f66  w    F .text	0000001a strcmp
00010a42 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010912 g     F .text	0000004c gpib_timer_task
00004c8a g     F .text	0000005a delayus
00013208 g     F .text	0000002e pop_state
00004840  w      .text	00000000 __vector_9
0000ecee g     F .text	0000004a getcwd
00004840  w      .text	00000000 __vector_2
000060ca g     F .text	00000028 MATCHI
00016e30 g     F .text	00000028 amigo_check_unit
0001c80c g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000bf28 g     F .text	00000578 f_lseek
0000e94e g     F .text	000000ac fgetc
00801ff6 g     O .bss	00000001 secondary
00008994 g     F .text	0000004c vsnprintf_P
00007668 g     F .text	00000022 ctime_gm
0001cb50 g     F .text	00000008 __gesf2
0001418a g     F .text	000000fc hpdir_init
000162e0 g     F .text	000000aa amigo_send_logical_address
00014bf0 g     F .text	00000052 SS80_Check_Unit
000116a0 g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
00801a67 g     O .bss	00000002 gpib_log_fp
00004840  w      .text	00000000 __vector_21
00004840  w      .text	00000000 __vector_15
00007c9a g     F .text	000002d8 p_etoa
00012574 g     F .text	0000004c print_tok
0080175e g     O .bss	00000020 i2c_task_op
00015aa2 g     F .text	000002c4 SS80_locate_and_read
0000546c g     F .text	000000ca i2c_init
00012222 g     F .text	000001e6 gpib_tests
00801dc0 g     O .bss	00000002 AccDirs
0000d052 g     F .text	00000006 ff_memfree
00801a71 g     O .bss	00000002 PRINTERp
0001cac0 g     F .text	0000000e __fp_pscA
0001c5f6 g       .text	00000018 .hidden __udivmodqi4
00801ff7 g     O .bss	00000001 listening
00011980 g     F .text	0000011a gpib_error_test
00801a6d g     O .bss	00000002 SS80s
0000c634 g     F .text	0000007c f_stat
00010972 g     F .text	00000070 gpib_bus_init
00005324 g     F .text	0000002c i2c_timer
0000e9fa g     F .text	000000a4 fputc
00004840  w      .text	00000000 __vector_29
000050e6 g     F .text	00000014 uart0_putchar
00008a30 g     F .text	0000003a printf_P
0001c70e g       .text	00000008 .hidden __mulohisi3
00015d66 g     F .text	000000b4 SS80_Execute_State
000070fe g     F .text	00000008 timegm
00014c90 g     F .text	000004ee SS80_Command_State
00006b96 g     F .text	0000001e gettimezone
008022b7 g       .comment	00000000 __heap_start
0000606e g     F .text	00000020 trim_tail
00010c0c g     F .text	0000028a gpib_write_byte
000177e4 g     F .text	000000b0 printer_close
00005418 g     F .text	00000054 i2c_task_op_add
00018a88 g     F .text	000001d6 lif_check_volume
00006cce g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801dc2 g     O .bss	00000002 AccFiles
00005cca g     F .text	000000a6 rtc_read
00004802 g       .text	00000000 __dtors_start
00004802 g       .text	00000000 __ctors_end
0001c6a0 g       .text	00000028 .hidden __divmodsi4
00010bc8 g     F .text	0000000c gpib_bus_read
0000f0aa g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f584 g     F .text	00000066 syncfs
00017c54 g     F .text	0000006c lif_calloc
0000f6f0 g     F .text	00000038 fwrite
00011b42 g     F .text	000000c6 Send_Identify
00801830 g     O .bss	00000002 _mmc_pre
0000dc0c g     F .text	00000006 mmc_spi_TXRX
00801756 g       .data	00000000 _edata
0000ce62 g     F .text	000000b2 f_utime
00012776 g     F .text	0000050c display_Config
0001c6ec g       .text	0000000a .hidden __usmulhisi3_tail
008022b7 g       .comment	00000000 _end
00017dc6 g     F .text	0000006a lif_seek_msg
00004972 g     F .text	00000090 spi_begin
00017894 g     F .text	00000146 printer_open
0000b7a6 g     F .text	0000032e f_write
00004840  w      .text	00000000 __vector_8
0001a2ec g     F .text	000000ca lif_find_file
000057a4 g     F .text	000001d4 __vector_26
0000789a g     F .text	00000112 bin2num
0001c8d8 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00007ff6 g     F .text	000000b8 _puts_pad_X
00801a6b g     O .bss	00000002 AMIGOp
0000dc00 g     F .text	00000006 mmc_spi_TX_buffer
0000b1a0 g     F .text	00000370 f_open
00018154 g     F .text	0000011c lif_vol2str
0000d1e4 g     F .text	00000020 disk_write
0000ffb4 g     F .text	00000228 ls
0001cf34  w      .text	00000000 .hidden exit
00012120 g     F .text	000000be gpib_task
000056d2 g     F .text	000000be i2c_task_next_op
0001c9ec g     F .text	0000007a __floatunsisf
00016750 g     F .text	0000011a amigo_buffered_read_command
00006618 g     F .text	00000082 subtract_timespec
0001c636 g       .text	00000000 .hidden _div
00005978 g     F .text	000000ee i2c_print_error
00017424 g     F .text	000001b6 Amigo_Execute
00005f4c  w    F .text	0000001a strupper
008022b5 g     O .bss	00000002 __flp
0001248a g     F .text	00000080 print_tok_val
0001c65c g       .text	00000044 .hidden __udivmodsi4
00011828 g     F .text	00000022 PRINTER_is_MTA
00019a82 g     F .text	000002c0 lif_newdir
000142c0 g     F .text	0000038c hpdir_find_drive
00011806 g     F .text	00000022 PRINTER_is_MLA
00008b62 g     F .text	0000000e atoi
0000699a g     F .text	000001bc time_to_tm
0000df54 g     F .text	0000002a put_rc
0000eb96 g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
0000524c g     F .text	0000005a SPI0_Init
0000c9be g     F .text	000001e0 f_mkdir
0001c994 g     F .text	00000058 __fixunssfsi
008021ff g     O .bss	000000b4 hpdir
00007106 g     F .text	0000023a setdate_r
000060f2 g     F .text	00000054 MATCHARGS
0000490a g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001cf34 g       .text	00000000 .hidden _exit
00017ed6 g     F .text	000000c6 lif_write
000180a0 g     F .text	0000003a lif_S2B
0001c20e g     F .text	00000014 user_task
00801ff8 g     O .bss	00000001 talking_last
000106a4 g     F .text	0000003a dbf_read
00005b48 g     F .text	00000012 BCDtoBIN
0001be50 g     F .text	00000076 i2c_lcd_task
00006d6e g     F .text	00000390 normalize
00006b80 g     F .text	00000016 gmtime
00004840  w      .text	00000000 __vector_14
0000e6d4 g     F .text	000000de fatfs_tests
0001b770 g     F .text	0000010e lif_create_image
0000d1c4 g     F .text	00000020 disk_read
0000f88e g     F .text	0000013e open
00005e98  w    F .text	0000001a toupper
00015268 g     F .text	00000324 SS80_locate_and_write
0001bb68 g     F .text	00000014 lcd_task
000080e6 g     F .text	000008ae _printf_fn
00004840  w      .text	00000000 __vector_10
00010642 g     F .text	0000001c ppr_bit_clr
00801dc6 g     O .bss	00000020 __iob
0000cf14 g     F .text	00000138 f_getlabel
00018270 g     F .text	000000fc lif_str2vol
0000c6b0 g     F .text	000001c0 f_getfree
0000eb38 g     F .text	00000030 fputs
00004840  w      .text	00000000 __vector_16
00006146 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004b88 g     F .text	00000054 safecalloc
0000ebce g     F .text	0000002a fileno_to_stream
0001517e g     F .text	000000ea SS80_cmd_seek
0000ee14 g     F .text	00000036 closedir
00004840  w      .text	00000000 __vector_18
000053ee g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
0001485c g     F .text	000000b8 SS80VolumePack
0000d4fa g     F .text	000000c2 mmc_disk_read
0000e658 g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00017d7c g     F .text	0000004a lif_stat
00005058 g     F .text	00000006 uart_rx_byte
00015a2e g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00004fa0 g     F .text	00000054 __vector_20
0000ed38 g     F .text	0000005c mkdir
0001bcba g     F .text	0000004e lcd_backlight
000050c2 g     F .text	00000024 uart_putchar
000101dc g     F .text	000003be posix_tests
00801ff9 g     O .bss	00000002 gpib_unread_data
0000f792 g     F .text	00000062 close
0001c7ea g       .text	00000000 __addsf3
0001c736 g       .text	00000038 .hidden __prologue_saves__
000117a0 g     F .text	00000022 AMIGO_is_MLA
0000dc20 g     F .text	00000048 mmc_test_timeout
0001aa66 g     F .text	0000055e lif_extract_e010_as_ascii
0001648e g     F .text	00000056 amigo_seek
00010bf4 g     F .text	00000018 gpib_handshake_pin_read
000067ca g     F .text	00000028 enable_timers
0000e05e g     F .text	0000001e fatfs_fstype
00017b6a g     F .text	0000002a V2B_LSB
000106de g     F .text	0000003a dbf_write
00801a6f g     O .bss	00000002 SS80p
0000d04c g     F .text	00000006 ff_memalloc
0001ce14 g     F .text	00000112 free
0001cb44 g       .text	00000000 __fp_szero
0000505e g     F .text	00000032 uart_tx_byte
0001c70a g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 24 	jmp	0x4802	; 0x4802 <__ctors_end>
       4:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
       8:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
       c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      10:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      14:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      18:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      1c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      20:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      24:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      28:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      2c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      30:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      34:	0c 94 af 31 	jmp	0x635e	; 0x635e <__vector_13>
      38:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      3c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      40:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      44:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      48:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      4c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      50:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__vector_20>
      54:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      58:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      5c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      60:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      64:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      68:	0c 94 d2 2b 	jmp	0x57a4	; 0x57a4 <__vector_26>
      6c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      70:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      74:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      78:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      7c:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      80:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      84:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      88:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__bad_interrupt>
      8c:	df 41       	sbci	r29, 0x1F	; 31
      8e:	2f 43       	sbci	r18, 0x3F	; 63
      90:	17 42       	sbci	r17, 0x27	; 39
      92:	02 43       	sbci	r16, 0x32	; 50
      94:	02 43       	sbci	r16, 0x32	; 50
      96:	2f 43       	sbci	r18, 0x3F	; 63
      98:	2f 43       	sbci	r18, 0x3F	; 63
      9a:	2f 43       	sbci	r18, 0x3F	; 63
      9c:	2f 43       	sbci	r18, 0x3F	; 63
      9e:	2f 43       	sbci	r18, 0x3F	; 63
      a0:	2f 43       	sbci	r18, 0x3F	; 63
      a2:	2f 43       	sbci	r18, 0x3F	; 63
      a4:	2f 43       	sbci	r18, 0x3F	; 63
      a6:	df 41       	sbci	r29, 0x1F	; 31
      a8:	dc 41       	sbci	r29, 0x1C	; 28
      aa:	2f 43       	sbci	r18, 0x3F	; 63
      ac:	2f 43       	sbci	r18, 0x3F	; 63
      ae:	25 43       	sbci	r18, 0x35	; 53
      b0:	2f 43       	sbci	r18, 0x3F	; 63
      b2:	11 42       	sbci	r17, 0x21	; 33
      b4:	2f 43       	sbci	r18, 0x3F	; 63
      b6:	2f 43       	sbci	r18, 0x3F	; 63
      b8:	df 41       	sbci	r29, 0x1F	; 31
      ba:	2f 43       	sbci	r18, 0x3F	; 63
      bc:	2f 43       	sbci	r18, 0x3F	; 63
      be:	2f 43       	sbci	r18, 0x3F	; 63
      c0:	2f 43       	sbci	r18, 0x3F	; 63
      c2:	2f 43       	sbci	r18, 0x3F	; 63
      c4:	2f 43       	sbci	r18, 0x3F	; 63
      c6:	2f 43       	sbci	r18, 0x3F	; 63
      c8:	2f 43       	sbci	r18, 0x3F	; 63
      ca:	2f 43       	sbci	r18, 0x3F	; 63
      cc:	df 41       	sbci	r29, 0x1F	; 31
      ce:	2a 43       	sbci	r18, 0x3A	; 58
      d0:	17 42       	sbci	r17, 0x27	; 39
      d2:	02 43       	sbci	r16, 0x32	; 50
      d4:	02 43       	sbci	r16, 0x32	; 50
      d6:	2f 43       	sbci	r18, 0x3F	; 63
      d8:	2f 43       	sbci	r18, 0x3F	; 63
      da:	2f 43       	sbci	r18, 0x3F	; 63
      dc:	2f 43       	sbci	r18, 0x3F	; 63
      de:	2f 43       	sbci	r18, 0x3F	; 63
      e0:	2f 43       	sbci	r18, 0x3F	; 63
      e2:	2f 43       	sbci	r18, 0x3F	; 63
      e4:	2f 43       	sbci	r18, 0x3F	; 63
      e6:	df 41       	sbci	r29, 0x1F	; 31
      e8:	dc 41       	sbci	r29, 0x1C	; 28
      ea:	2f 43       	sbci	r18, 0x3F	; 63
      ec:	2f 43       	sbci	r18, 0x3F	; 63
      ee:	20 43       	sbci	r18, 0x30	; 48
      f0:	2f 43       	sbci	r18, 0x3F	; 63
      f2:	11 42       	sbci	r17, 0x21	; 33
      f4:	2f 43       	sbci	r18, 0x3F	; 63
      f6:	2f 43       	sbci	r18, 0x3F	; 63
      f8:	df 41       	sbci	r29, 0x1F	; 31
      fa:	54 43       	sbci	r21, 0x34	; 52
      fc:	95 44       	sbci	r25, 0x45	; 69
      fe:	47 43       	sbci	r20, 0x37	; 55
     100:	af 43       	sbci	r26, 0x3F	; 63
     102:	93 43       	sbci	r25, 0x33	; 51
     104:	95 44       	sbci	r25, 0x45	; 69
     106:	95 44       	sbci	r25, 0x45	; 69
     108:	95 44       	sbci	r25, 0x45	; 69
     10a:	95 44       	sbci	r25, 0x45	; 69
     10c:	95 44       	sbci	r25, 0x45	; 69
     10e:	95 44       	sbci	r25, 0x45	; 69
     110:	95 44       	sbci	r25, 0x45	; 69
     112:	95 44       	sbci	r25, 0x45	; 69
     114:	61 43       	sbci	r22, 0x31	; 49
     116:	75 43       	sbci	r23, 0x35	; 53
     118:	95 44       	sbci	r25, 0x45	; 69
     11a:	95 44       	sbci	r25, 0x45	; 69
     11c:	3b 44       	sbci	r19, 0x4B	; 75
     11e:	95 44       	sbci	r25, 0x45	; 69
     120:	43 43       	sbci	r20, 0x33	; 51
     122:	95 44       	sbci	r25, 0x45	; 69
     124:	95 44       	sbci	r25, 0x45	; 69
     126:	75 43       	sbci	r23, 0x35	; 53
     128:	95 44       	sbci	r25, 0x45	; 69
     12a:	95 44       	sbci	r25, 0x45	; 69
     12c:	95 44       	sbci	r25, 0x45	; 69
     12e:	95 44       	sbci	r25, 0x45	; 69
     130:	95 44       	sbci	r25, 0x45	; 69
     132:	95 44       	sbci	r25, 0x45	; 69
     134:	95 44       	sbci	r25, 0x45	; 69
     136:	95 44       	sbci	r25, 0x45	; 69
     138:	95 44       	sbci	r25, 0x45	; 69
     13a:	54 43       	sbci	r21, 0x34	; 52
     13c:	e3 43       	sbci	r30, 0x33	; 51
     13e:	47 43       	sbci	r20, 0x37	; 55
     140:	af 43       	sbci	r26, 0x3F	; 63
     142:	93 43       	sbci	r25, 0x33	; 51
     144:	95 44       	sbci	r25, 0x45	; 69
     146:	95 44       	sbci	r25, 0x45	; 69
     148:	95 44       	sbci	r25, 0x45	; 69
     14a:	95 44       	sbci	r25, 0x45	; 69
     14c:	95 44       	sbci	r25, 0x45	; 69
     14e:	95 44       	sbci	r25, 0x45	; 69
     150:	95 44       	sbci	r25, 0x45	; 69
     152:	95 44       	sbci	r25, 0x45	; 69
     154:	61 43       	sbci	r22, 0x31	; 49
     156:	75 43       	sbci	r23, 0x35	; 53
     158:	95 44       	sbci	r25, 0x45	; 69
     15a:	95 44       	sbci	r25, 0x45	; 69
     15c:	e3 43       	sbci	r30, 0x33	; 51
     15e:	95 44       	sbci	r25, 0x45	; 69
     160:	43 43       	sbci	r20, 0x33	; 51
     162:	95 44       	sbci	r25, 0x45	; 69
     164:	95 44       	sbci	r25, 0x45	; 69
     166:	75 43       	sbci	r23, 0x35	; 53
     168:	a4 68       	ori	r26, 0x84	; 132
     16a:	ae 68       	ori	r26, 0x8E	; 142
     16c:	b6 68       	ori	r27, 0x86	; 134
     16e:	b9 68       	ori	r27, 0x89	; 137
     170:	bc 68       	ori	r27, 0x8C	; 140
     172:	bf 68       	ori	r27, 0x8F	; 143
     174:	c2 68       	ori	r28, 0x82	; 130
     176:	c5 68       	ori	r28, 0x85	; 133
     178:	c8 68       	ori	r28, 0x88	; 136
     17a:	72 86       	std	Z+10, r7	; 0x0a
     17c:	7b 86       	std	Y+11, r7	; 0x0b
     17e:	ac 86       	std	Y+12, r10	; 0x0c
     180:	c5 86       	std	Z+13, r12	; 0x0d
     182:	e1 86       	std	Z+9, r14	; 0x09
     184:	ee 86       	std	Y+14, r14	; 0x0e
     186:	0a 87       	std	Y+10, r16	; 0x0a
     188:	34 87       	std	Z+12, r19	; 0x0c
     18a:	17 87       	std	Z+15, r17	; 0x0f
     18c:	44 9b       	sbis	0x08, 4	; 8
     18e:	16 9c       	mul	r1, r6
     190:	52 9c       	mul	r5, r2
     192:	81 9c       	mul	r8, r1
     194:	91 9c       	mul	r9, r1
     196:	ae 9c       	mul	r10, r14
     198:	0e 9d       	mul	r16, r14
     19a:	1d 9e       	mul	r1, r29
     19c:	1d 9e       	mul	r1, r29
     19e:	1d 9e       	mul	r1, r29
     1a0:	42 9d       	mul	r20, r2
     1a2:	6e 9d       	mul	r22, r14
     1a4:	bc 9d       	mul	r27, r12
     1a6:	d8 9d       	mul	r29, r8
     1a8:	e1 9b       	sbis	0x1c, 1	; 28
     1aa:	f4 9b       	sbis	0x1e, 4	; 30
     1ac:	e5 ba       	out	0x15, r14	; 21
     1ae:	a4 ba       	out	0x14, r10	; 20
     1b0:	a4 ba       	out	0x14, r10	; 20
     1b2:	a4 ba       	out	0x14, r10	; 20
     1b4:	a4 ba       	out	0x14, r10	; 20
     1b6:	68 ba       	out	0x18, r6	; 24
     1b8:	6f ba       	out	0x1f, r6	; 31
     1ba:	76 ba       	out	0x16, r7	; 22
     1bc:	86 ba       	out	0x16, r8	; 22
     1be:	94 ba       	out	0x14, r9	; 20
     1c0:	8d ba       	out	0x1d, r8	; 29

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3666>:
     843:	0a 00                                               ..

00000845 <__c.3664>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3662>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3656>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3654>:
     8cf:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8df:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8ef:	30 34 58 0a 00                                      04X..

000008f4 <__c.3652>:
     8f4:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     904:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000912 <__c.3650>:
     912:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     922:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000931 <__c.3648>:
     931:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     941:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000950 <__c.3646>:
     950:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     960:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000096f <__c.3644>:
     96f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     97f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

0000098e <__c.3642>:
     98e:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     99e:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ad <__c.3640>:
     9ad:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9bd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009cb <__c.3638>:
     9cb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9db:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009e9 <__c.3636>:
     9e9:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9f9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a08 <__c.3634>:
     a08:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a18:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a26 <__c.3632>:
     a26:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a37 <__c.3596>:
     a37:	72 63 3d 25 75 0a 00                                rc=%u..

00000a3e <__c.3632>:
     a3e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a4e:	72 65 65 0a 00                                      ree..

00000a53 <__c.3630>:
     a53:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a63:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a73:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a7c <__c.3626>:
     a7c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a8a <__c.3613>:
     a8a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a9a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aaa <__c.3611>:
     aaa:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ab8 <__c.3609>:
     ab8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ac8:	73 74 0a 00                                         st..

00000acc <__c.3607>:
     acc:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000adc <__c.3605>:
     adc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000afc <__c.3589>:
     afc:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b0c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b1c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b2c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b3c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b4c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b5c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b6c:	61 74 75 73 0a 0a 00                                atus...

00000b73 <__c.3587>:
     b73:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b7f <__c.3919>:
     b7f:	25 73 0a 00                                         %s..

00000b83 <__c.3917>:
     b83:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b8b <__c.3672>:
     b8b:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b97 <__c.3601>:
     b97:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     ba7:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000baf <__c.3594>:
     baf:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bbf:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bc7 <__c.3761>:
     bc7:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bd2 <__c.3757>:
     bd2:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     be2:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bf2:	68 0a 00                                            h..

00000bf5 <__c.3754>:
     bf5:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c05 <__c.3749>:
     c05:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c15:	5b 25 73 5d 0a 00                                   [%s]..

00000c1b <__c.3747>:
     c1b:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c29 <__c.3745>:
     c29:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c39:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c4a <__c.3732>:
     c4a:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c5a:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c64 <__c.3727>:
     c64:	25 73 0a 00                                         %s..

00000c68 <__c.3725>:
     c68:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c78:	0a 00                                               ..

00000c7a <__c.3713>:
     c7a:	0d 00                                               ..

00000c7c <__c.3711>:
     c7c:	4d 6f 72 65 2e 2e 00                                More...

00000c83 <__c.3701>:
     c83:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c93:	2e 0a 00                                            ...

00000c96 <__c.3697>:
     c96:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000ca5 <__c.3694>:
     ca5:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cb2 <__c.3692>:
     cb2:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cbf <__c.3690>:
     cbf:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ccf <__c.3688>:
     ccf:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cdc <__c.3686>:
     cdc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cec <__c.3684>:
     cec:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000cf8 <__c.3673>:
     cf8:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d03 <__c.3671>:
     d03:	0a 00                                               ..

00000d05 <__c.3666>:
     d05:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d15 <__c.3656>:
     d15:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d26 <__c.3654>:
     d26:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d34 <__c.3652>:
     d34:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d45 <__c.3650>:
     d45:	25 73 0a 00                                         %s..

00000d49 <__c.3647>:
     d49:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d5a <__c.3640>:
     d5a:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d6a:	74 20 23 20 25 64 0a 00                             t # %d..

00000d72 <__c.3636>:
     d72:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d83 <__c.3620>:
     d83:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d93:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     da3:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     db3:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dc3:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dd3:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     de3:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     df3:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e03:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e13:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e23:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e33:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e43:	6e 65 77 0a 0a 00                                   new...

00000e49 <__c.3618>:
     e49:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e55 <__c.3809>:
     e55:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e63 <__c.3803>:
     e63:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e70 <__c.3796>:
     e70:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e7e <__c.3787>:
     e7e:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e8b <__c.3778>:
     e8b:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e9c <__c.3764>:
     e9c:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     eac:	5d 0a 00                                            ]..

00000eaf <__c.3746>:
     eaf:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ebf:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ecc <__c.4408>:
     ecc:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     edc:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     eec:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ef4 <__c.4400>:
     ef4:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f04:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f0e <__c.4395>:
     f0e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f1e:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f2e:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f3c <__c.4393>:
     f3c:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f4c:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f56 <__c.4383>:
     f56:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f66:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f76:	28 25 64 29 5d 0a 00                                (%d)]..

00000f7d <__c.4379>:
     f7d:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f8d:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f9d:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000faa <__c.4376>:
     faa:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fba:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fc3 <__c.4360>:
     fc3:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fce <__c.4358>:
     fce:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fd9 <__c.4356>:
     fd9:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fe4 <__c.4352>:
     fe4:	20 20 20 20 20 00                                        .

00000fea <__c.4350>:
     fea:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ff3 <__c.4324>:
     ff3:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1003:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001011 <__c.4321>:
    1011:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1021:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

0000102b <__c.4306>:
    102b:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    103b:	3e 0a 00                                            >..

0000103e <__c.4301>:
    103e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    104e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    105e:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000106d <__c.4297>:
    106d:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    107d:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    108d:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    109d:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010a9 <__c.4293>:
    10a9:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10b9:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10c9:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10d9:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010e5 <__c.4291>:
    10e5:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f5:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1105:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1115:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001124 <__c.4286>:
    1124:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1134:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001143 <__c.4283>:
    1143:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1153:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

00001162 <__c.4268>:
    1162:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1172:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1182:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001190 <__c.4250>:
    1190:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11a0:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ab <__c.4248>:
    11ab:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11bb:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11cb:	72 61 6e 67 65 0a 00                                range..

000011d2 <__c.4243>:
    11d2:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e2:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ed <__c.4241>:
    11ed:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fd:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120d:	61 6e 67 65 0a 00                                   ange..

00001213 <__c.4236>:
    1213:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1223:	5d 0a 00                                            ]..

00001226 <__c.4223>:
    1226:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001237 <__c.4400>:
    1237:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001248 <__c.4395>:
    1248:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1258:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1268:	32 58 48 5d 0a 00                                   2XH]..

0000126e <__c.4393>:
    126e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127e:	0a 00                                               ..

00001280 <__c.4391>:
    1280:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001291 <__c.4386>:
    1291:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129d <__c.4384>:
    129d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012ad <__c.4382>:
    12ad:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12bd:	52 5d 0a 00                                         R]..

000012c1 <__c.4380>:
    12c1:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12d1:	0a 00                                               ..

000012d3 <__c.4378>:
    12d3:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e4 <__c.4376>:
    12e4:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012eb <__c.4371>:
    12eb:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f7 <__c.4369>:
    12f7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1307:	52 5d 0a 00                                         R]..

0000130b <__c.4367>:
    130b:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000131c <__c.4365>:
    131c:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    132c:	0a 00                                               ..

0000132e <__c.4363>:
    132e:	0a 00                                               ..

00001330 <__c.4361>:
    1330:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001337 <__c.4356>:
    1337:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1347:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001358 <__c.4354>:
    1358:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135f <__c.4352>:
    135f:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000136c <__c.4350>:
    136c:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001378 <__c.4348>:
    1378:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137f <__c.4346>:
    137f:	5b 53 50 44 5d 0a 00                                [SPD]..

00001386 <__c.4344>:
    1386:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138d <__c.4342>:
    138d:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139d:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a5 <__c.4340>:
    13a5:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b5:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013bd <__c.4335>:
    13bd:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13cd:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d7 <__c.4333>:
    13d7:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e7:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f8 <__c.4306>:
    13f8:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001409 <__c.4304>:
    1409:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001416 <__c.4302>:
    1416:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141d <__c.4300>:
    141d:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001428 <__c.4298>:
    1428:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142f <__c.4293>:
    142f:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143f:	0a 00                                               ..

00001441 <__c.4291>:
    1441:	44 6f 6e 65 0a 00                                   Done..

00001447 <__c.4287>:
    1447:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001453 <__c.4285>:
    1453:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1463:	20 65 78 69 74 0a 00                                 exit..

0000146a <__c.4283>:
    146a:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    147a:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    148a:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001495 <__c.4281>:
    1495:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a5:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014af <__c.4235>:
    14af:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bf:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c8 <__c.4233>:
    14c8:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d9 <__c.4231>:
    14d9:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e9:	0a 00                                               ..

000014eb <__c.4426>:
    14eb:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f8 <__c.4418>:
    14f8:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1508:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1518:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1528:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1538:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1548:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1558:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1568:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1578:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1588:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1598:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a8:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b8:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c8:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d8:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e8:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f8:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1608:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1618:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1628:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1638:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1648:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1658:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1668:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1678:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1688:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1698:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a8:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b8:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016c1 <__c.4416>:
    16c1:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000016cc <__c.4837>:
    16cc:	0a 00                                               ..

000016ce <__c.4832>:
    16ce:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

000016df <__c.4830>:
    16df:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    16ef:	25 73 0a 00                                         %s..

000016f3 <__c.4828>:
    16f3:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1703:	25 73 0a 00                                         %s..

00001707 <__c.4816>:
    1707:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001716 <__c.4806>:
    1716:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000171e <__c.4804>:
    171e:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    172e:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001738 <__c.4802>:
    1738:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1748:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1758:	0a 00                                               ..

0000175a <__c.4800>:
    175a:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001762 <__c.4798>:
    1762:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1772:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000177c <__c.4796>:
    177c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    178c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    179c:	0a 00                                               ..

0000179e <__c.4779>:
    179e:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17ae:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17be:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    17ce:	6f 20 32 35 36 0a 00                                o 256..

000017d5 <__c.4777>:
    17d5:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17e5:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17f5:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1805:	20 32 35 36 0a 00                                    256..

0000180b <__c.4764>:
    180b:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    181b:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000182a <__c.4728>:
    182a:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    183a:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    184a:	0a 00                                               ..

0000184c <__c.4720>:
    184c:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    185c:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    186c:	6c 6c 0a 00                                         ll..

00001870 <__c.4707>:
    1870:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1880:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1890:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000189b <__c.4705>:
    189b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18ab:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18bb:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    18cb:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000018d3 <__c.4703>:
    18d3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18e3:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18f3:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1903:	3a 25 73 0a 00                                      :%s..

00001908 <__c.4701>:
    1908:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1918:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1928:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1938:	55 4c 4c 0a 00                                      ULL..

0000193d <__c.4699>:
    193d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    194d:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    195d:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    196d:	66 20 72 61 6e 67 65 0a 00                          f range..

00001976 <__c.4697>:
    1976:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1986:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1996:	6e 67 65 0a 00                                      nge..

0000199b <__c.4658>:
    199b:	0a 00                                               ..

0000199d <__c.4653>:
    199d:	0a 00                                               ..

0000199f <__c.4651>:
    199f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19af:	6c 64 0a 00                                         ld..

000019b3 <__c.4649>:
    19b3:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19c3:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019d2 <__c.4647>:
    19d2:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019dc <__c.4645>:
    19dc:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19ec:	6c 64 0a 00                                         ld..

000019f0 <__c.4643>:
    19f0:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a00:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a0f <__c.4641>:
    1a0f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a18 <__c.4638>:
    1a18:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a28:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a38 <__c.4629>:
    1a38:	0a 00                                               ..

00001a3a <__c.4624>:
    1a3a:	0a 00                                               ..

00001a3c <__c.4622>:
    1a3c:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a45 <__c.4620>:
    1a45:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a4f <__c.4618>:
    1a4f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a58 <__c.4615>:
    1a58:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a68:	0a 00                                               ..

00001a6a <__c.4609>:
    1a6a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a7a:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a8a:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a91 <__c.4607>:
    1a91:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1aa1:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aae <__c.4605>:
    1aae:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1abe:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1ace:	0a 00                                               ..

00001ad0 <__c.4601>:
    1ad0:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1ae0:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1af0:	0a 00                                               ..

00001af2 <__c.4598>:
    1af2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b02:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b12:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b22 <__c.4589>:
    1b22:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b32:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b42:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b51 <__c.4586>:
    1b51:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b61:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b71:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b81 <__c.4577>:
    1b81:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b91:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ba1:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001baf <__c.4569>:
    1baf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bbf:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1bcf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bdd <__c.4559>:
    1bdd:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bed:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bfd:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c09 <__c.4542>:
    1c09:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c19:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c29:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c39:	0a 00                                               ..

00001c3b <__c.4534>:
    1c3b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c4b:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c5b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c69 <__c.4531>:
    1c69:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c79:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c89:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c97 <__c.4523>:
    1c97:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ca7:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cb7:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cc4 <__c.4513>:
    1cc4:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cd4:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1ce4:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001cf5 <__c.4510>:
    1cf5:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d05:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d15:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d1f <__c.4506>:
    1d1f:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d2f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d3f:	0a 00                                               ..

00001d41 <__c.4495>:
    1d41:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d51:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d61:	0a 00                                               ..

00001d63 <__c.4492>:
    1d63:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d73:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d81 <__c.4490>:
    1d81:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d8e <__c.4471>:
    1d8e:	25 73 0a 00                                         %s..

00001d92 <__c.4461>:
    1d92:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d9e <__c.4450>:
    1d9e:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1dae:	6c 64 29 0a 00                                      ld)..

00001db3 <__c.3643>:
    1db3:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001dc4 <__c.3641>:
    1dc4:	25 73 20 25 73 0a 00                                %s %s..

00001dcb <__c.3637>:
    1dcb:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1ddb:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001de8 <__c.4543>:
    1de8:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1df8:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e08:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e18:	48 5d 0a 00                                         H]..

00001e1c <__c.4541>:
    1e1c:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e2c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e3c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e4c:	48 5d 0a 00                                         H]..

00001e50 <__c.4539>:
    1e50:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e60:	74 5d 0a 00                                         t]..

00001e64 <__c.4537>:
    1e64:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e73 <__c.4535>:
    1e73:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e83:	74 65 5d 0a 00                                      te]..

00001e88 <__c.4533>:
    1e88:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e98:	61 74 65 5d 0a 00                                   ate]..

00001e9e <__c.4531>:
    1e9e:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1eae:	61 74 65 5d 0a 00                                   ate]..

00001eb4 <__c.4526>:
    1eb4:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1ec4:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1ed4:	5d 0a 00                                            ]..

00001ed7 <__c.4512>:
    1ed7:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ee6 <__c.4510>:
    1ee6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ef6:	5d 0a 00                                            ]..

00001ef9 <__c.4503>:
    1ef9:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f05 <__c.4489>:
    1f05:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f15:	5d 0a 00                                            ]..

00001f18 <__c.4487>:
    1f18:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f28:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f32 <__c.4480>:
    1f32:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f42:	48 5d 0a 00                                         H]..

00001f46 <__c.4478>:
    1f46:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f56:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f66 <__c.4473>:
    1f66:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f76:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f86:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f96:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fa2 <__c.4470>:
    1fa2:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1fb2:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001fc2 <__c.4468>:
    1fc2:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1fd2:	29 5d 0a 00                                         )]..

00001fd6 <__c.4466>:
    1fd6:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1fe6:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1ff6:	28 25 64 29 5d 0a 00                                (%d)]..

00001ffd <__c.4464>:
    1ffd:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    200d:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000201b <__c.4462>:
    201b:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    202b:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002038 <__c.4459>:
    2038:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2048:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2058:	44 4f 5d 0a 00                                      DO]..

0000205d <__c.4456>:
    205d:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    206d:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002076 <__c.4454>:
    2076:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2086:	5d 0a 00                                            ]..

00002089 <__c.4445>:
    2089:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2099:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20a9:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20b9:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020c1 <__c.4442>:
    20c1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    20d1:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000020e1 <__c.4440>:
    20e1:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20f1:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2101:	5d 0a 00                                            ]..

00002104 <__c.4438>:
    2104:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2114:	61 74 75 73 5d 0a 00                                atus]..

0000211b <__c.4436>:
    211b:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    212b:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002134 <__c.4434>:
    2134:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2144:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000214f <__c.4432>:
    214f:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    215f:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000216e <__c.4430>:
    216e:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    217e:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000218c <__c.4428>:
    218c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000219d <__c.4426>:
    219d:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21ad:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021b9 <__c.4424>:
    21b9:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    21c9:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000021d6 <__c.4422>:
    21d6:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    21e6:	2d 4f 50 5d 0a 00                                   -OP]..

000021ec <__c.4420>:
    21ec:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21fc:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000220d <__c.4418>:
    220d:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    221d:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    222d:	44 4f 5d 0a 00                                      DO]..

00002232 <__c.4416>:
    2232:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2242:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000224c <__c.4414>:
    224c:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    225c:	2d 4f 50 5d 0a 00                                   -OP]..

00002262 <__c.4412>:
    2262:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002270 <__c.4410>:
    2270:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2280:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000228c <__c.4408>:
    228c:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    229c:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022a9 <__c.4406>:
    22a9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22b9:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022c2 <__c.4403>:
    22c2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22d2:	20 52 65 61 64 5d 0a 00                              Read]..

000022da <__c.4401>:
    22da:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    22ea:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022f3 <__c.4398>:
    22f3:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2303:	25 64 29 5d 0a 00                                   %d)]..

00002309 <__c.4396>:
    2309:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2319:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002322 <__c.4394>:
    2322:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2332:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2342:	52 4f 52 5d 0a 00                                   ROR]..

00002348 <__c.4385>:
    2348:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2358:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002362 <__c.4380>:
    2362:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2372:	76 61 6c 69 64 5d 0a 00                             valid]..

0000237a <__c.4375>:
    237a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    238a:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002399 <__c.4373>:
    2399:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23a9:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023b6 <__c.4371>:
    23b6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23c6:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    23d6:	5d 0a 00                                            ]..

000023d9 <__c.4369>:
    23d9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000023ea <__c.4361>:
    23ea:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23fa:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002405 <__c.4359>:
    2405:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2415:	73 5d 0a 00                                         s]..

00002419 <__c.4349>:
    2419:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002424 <__c.4347>:
    2424:	25 73 3a 0a 00                                      %s:..

00002429 <__c.4322>:
    2429:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2439:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2449:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002454 <__c.4320>:
    2454:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2464:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2474:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000247c <__c.4316>:
    247c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    248c:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    249c:	58 48 29 5d 0a 00                                   XH)]..

000024a2 <__c.4314>:
    24a2:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24b2:	72 5d 0a 00                                         r]..

000024b6 <__c.4310>:
    24b6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24c6:	5d 0a 00                                            ]..

000024c9 <__c.4308>:
    24c9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24d9:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    24e9:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024f2 <__c.4296>:
    24f2:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2502:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2512:	62 79 74 65 73 5d 0a 00                             bytes]..

0000251a <__c.4294>:
    251a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    252a:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    253a:	53 48 5d 0a 00                                      SH]..

0000253f <__c.4289>:
    253f:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    254f:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002558 <__c.4287>:
    2558:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2568:	45 72 72 6f 72 5d 0a 00                             Error]..

00002570 <__c.4285>:
    2570:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2580:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000258e <__c.4283>:
    258e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    259e:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25ae:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025b6 <__c.4266>:
    25b6:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25c6:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000025d2 <__c.4250>:
    25d2:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    25e2:	5d 0a 00                                            ]..

000025e5 <__c.4366>:
    25e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25f5:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2605:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000260e <__c.4363>:
    260e:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    261e:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    262e:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002639 <__c.4360>:
    2639:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2649:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2659:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002662 <__c.4355>:
    2662:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2672:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002682 <__c.4352>:
    2682:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2692:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000269e <__c.4349>:
    269e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ae:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26be:	0a 00                                               ..

000026c0 <__c.4346>:
    26c0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26d0:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000026df <__c.4343>:
    26df:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26ef:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002700 <__c.4340>:
    2700:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2710:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002720 <__c.4336>:
    2720:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2730:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2740:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2750:	0a 00                                               ..

00002752 <__c.4331>:
    2752:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002762 <__c.4328>:
    2762:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2772:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002781 <__c.4326>:
    2781:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2791:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27a1:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027ac <__c.4324>:
    27ac:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27bc:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

000027cc <__c.4322>:
    27cc:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    27dc:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    27ec:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027f5 <__c.4320>:
    27f5:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2805:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002811 <__c.4318>:
    2811:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2821:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2831:	0a 00                                               ..

00002833 <__c.4316>:
    2833:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002843 <__c.4313>:
    2843:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2853:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002864 <__c.4311>:
    2864:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2874:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2884:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000288d <__c.4309>:
    288d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    289d:	36 5d 0a 00                                         6]..

000028a1 <__c.4306>:
    28a1:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28b1:	35 5d 0a 00                                         5]..

000028b5 <__c.4303>:
    28b5:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28c5:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

000028d5 <__c.4300>:
    28d5:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28e5:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28f5:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002904 <__c.4298>:
    2904:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2914:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002925 <__c.4296>:
    2925:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2935:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002946 <__c.4294>:
    2946:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2956:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2966:	0a 00                                               ..

00002968 <__c.4292>:
    2968:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2978:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2988:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2998:	0a 00                                               ..

0000299a <__c.4280>:
    299a:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29aa:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29ba:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    29ca:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    29da:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

000029eb <__c.4278>:
    29eb:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29fb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a0b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a1b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a2b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a3b <__c.4276>:
    2a3b:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a4b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a5b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a6b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a7b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a8b <__c.4274>:
    2a8b:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a9b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aab:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2abb:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2acb:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002adb <__c.4269>:
    2adb:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2aeb:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2afb:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b0b:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b1b:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b2b:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b3b:	58 48 5d 0a 00                                      XH]..

00002b40 <__c.4267>:
    2b40:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b50:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b60:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b70:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b80:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b90:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ba0:	30 32 58 48 5d 0a 00                                02XH]..

00002ba7 <__c.4265>:
    2ba7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bb7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bc7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bd7:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2be7:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bf7:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c07:	30 32 58 48 5d 0a 00                                02XH]..

00002c0e <__c.4263>:
    2c0e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c1e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c2e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c3e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c4e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c5e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c6e:	30 32 58 48 5d 0a 00                                02XH]..

00002c75 <__c.4256>:
    2c75:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c84 <__c.4243>:
    2c84:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c91 <__c.4241>:
    2c91:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ca1:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002cab <__c.4234>:
    2cab:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cbb:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002ccb <__c.4232>:
    2ccb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cdb:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002cea <__c.4230>:
    2cea:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2cfa:	0a 00                                               ..

00002cfc <__c.4223>:
    2cfc:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d16 <__c.4217>:
    2d16:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d26:	0a 00                                               ..

00002d28 <__c.4211>:
    2d28:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d38:	6e 65 5d 0a 00                                      ne]..

00002d3d <__c.4207>:
    2d3d:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d4d <__c.4166>:
    2d4d:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d5d:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d6d:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d78 <__c.4196>:
    2d78:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d88:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d98:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002da0 <__c.4173>:
    2da0:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2db0:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002db9 <__c.4159>:
    2db9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2dc9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dd3 <__c.4157>:
    2dd3:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2de3:	75 73 5d 0a 00                                      us]..

00002de8 <__c.4151>:
    2de8:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2df8:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e02 <__c.4149>:
    2e02:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e12:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e20 <__c.4143>:
    2e20:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e30:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e38 <__c.4128>:
    2e38:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e48:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e52 <__c.4126>:
    2e52:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e62:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e6e <__c.4121>:
    2e6e:	25 30 38 6c 64 0d 00                                %08ld..

00002e75 <__c.4115>:
    2e75:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e85:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e96 <__c.4109>:
    2e96:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ea4 <__c.4107>:
    2ea4:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2eb4:	69 74 65 0a 00                                      ite..

00002eb9 <__c.4101>:
    2eb9:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ec5 <__c.4099>:
    2ec5:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2ed5:	6f 3a 25 73 0a 00                                   o:%s..

00002edb <__c.4097>:
    2edb:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2eeb:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2efb:	74 00                                               t.

00002efd <__c.4553>:
    2efd:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f0d:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f1d <__c.4551>:
    2f1d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f2d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f3d <__c.4549>:
    2f3d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f4d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f5d:	30 0a 00                                            0..

00002f60 <__c.4547>:
    2f60:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f70:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f80:	70 74 79 0a 00                                      pty..

00002f85 <__c.4545>:
    2f85:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f95:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fa5:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fae <__c.4532>:
    2fae:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fbe:	20 25 31 30 73 0a 00                                 %10s..

00002fc5 <__c.4530>:
    2fc5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fd5:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2fe5:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fee <__c.4528>:
    2fee:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2ffe:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    300e:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    301e:	74 65 72 73 0a 00                                   ters..

00003024 <__c.4526>:
    3024:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3034:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3044:	65 6d 70 74 79 0a 00                                empty..

0000304b <__c.4524>:
    304b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    305b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    306b:	65 6d 70 74 79 0a 00                                empty..

00003072 <__c.4522>:
    3072:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3082:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3092:	20 65 6d 70 74 79 0a 00                              empty..

0000309a <__c.4513>:
    309a:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030a9 <__c.4511>:
    30a9:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30b9:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30c9:	20 66 6f 75 6e 64 0a 00                              found..

000030d1 <__c.4509>:
    30d1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30e1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030f0 <__c.4507>:
    30f0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3100:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003110 <__c.4505>:
    3110:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3120:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3130:	70 74 79 0a 00                                      pty..

00003135 <__c.4497>:
    3135:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003143 <__c.4492>:
    3143:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003151 <__c.4490>:
    3151:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3161:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3171:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003181 <__c.4488>:
    3181:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3191:	73 0a 00                                            s..

00003194 <__c.4486>:
    3194:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031c3 <__c.4484>:
    31c3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31d3:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031df <__c.4482>:
    31df:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31ef:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031fa <__c.4480>:
    31fa:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    320a:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000321a <__c.4463>:
    321a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003228 <__c.4458>:
    3228:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003236 <__c.4456>:
    3236:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3246:	73 0a 00                                            s..

00003249 <__c.4454>:
    3249:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3259:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003261 <__c.4437>:
    3261:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000326f <__c.4434>:
    326f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    327f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    328f:	20 65 72 72 6f 72 0a 00                              error..

00003297 <__c.4426>:
    3297:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032a5 <__c.4424>:
    32a5:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32b5:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32c5:	20 65 72 72 6f 72 0a 00                              error..

000032cd <__c.4421>:
    32cd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32dd:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32ed:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32fd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    330d:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    331d:	30 32 58 48 0a 00                                   02XH..

00003323 <__c.4419>:
    3323:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3333:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3343:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3353:	20 25 64 0a 00                                       %d..

00003358 <__c.4415>:
    3358:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003368 <__c.4413>:
    3368:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3378:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3388:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3398:	30 78 45 30 31 33 0a 00                             0xE013..

000033a0 <__c.4411>:
    33a0:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33b0:	6e 64 3a 25 73 0a 00                                nd:%s..

000033b7 <__c.4409>:
    33b7:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33c7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033cf <__c.4385>:
    33cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033dd <__c.4383>:
    33dd:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33ed:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033f6 <__c.4381>:
    33f6:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3406:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000340f <__c.4379>:
    340f:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    341f:	20 20 25 34 64 0a 00                                  %4d..

00003426 <__c.4377>:
    3426:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3436:	20 20 20 25 73 0a 00                                   %s..

0000343d <__c.4375>:
    343d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    344d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    345d:	77 72 69 74 65 0a 00                                write..

00003464 <__c.4373>:
    3464:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3474:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3484:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003494 <__c.4371>:
    3494:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034c3 <__c.4369>:
    34c3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34d3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34e3:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034f3 <__c.4367>:
    34f3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3503:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3513:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003522 <__c.4365>:
    3522:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3532:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3542:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003550 <__c.4363>:
    3550:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3560:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3570:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3580:	79 0a 00                                            y..

00003583 <__c.4349>:
    3583:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003591 <__c.4347>:
    3591:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000359f <__c.4342>:
    359f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ad <__c.4325>:
    35ad:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35bd:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35cd:	25 64 0a 00                                         %d..

000035d1 <__c.4308>:
    35d1:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35e1:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35f1:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3601:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000360a <__c.4294>:
    360a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    361a:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    362a:	62 69 67 0a 00                                      big..

0000362f <__c.4292>:
    362f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    363f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    364f:	63 74 65 72 73 0a 00                                cters..

00003656 <__c.4285>:
    3656:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3666:	73 0a 00                                            s..

00003669 <__c.4283>:
    3669:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3679:	73 0a 00                                            s..

0000367c <__c.4281>:
    367c:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    368c:	73 0a 00                                            s..

0000368f <__c.4279>:
    368f:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036a0 <__c.4277>:
    36a0:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036ad <__c.4275>:
    36ad:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036b9 <__c.4273>:
    36b9:	0a 00                                               ..

000036bb <__c.4270>:
    36bb:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36cb:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36db:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000036eb <__c.4268>:
    36eb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36fb:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    370b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    371b:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    372b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003737 <__c.4265>:
    3737:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3747:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3757:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3767:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003777 <__c.4263>:
    3777:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3787:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000378e <__c.4253>:
    378e:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    379e:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37ae:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37be:	64 0a 00                                            d..

000037c1 <__c.4251>:
    37c1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37d1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37e1:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37f1:	64 0a 00                                            d..

000037f4 <__c.4249>:
    37f4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3804:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3814:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3824:	69 6c 65 64 0a 00                                   iled..

0000382a <__c.4247>:
    382a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    383a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    384a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    385a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003869 <__c.4234>:
    3869:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3879:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3889:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3899:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38a9:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038ba <__c.4231>:
    38ba:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38ca:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38da:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038e3 <__c.4229>:
    38e3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38f3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3903:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3913:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000391b <__c.4217>:
    391b:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    392b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    393b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    394b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    395b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003968 <__c.4192>:
    3968:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3978:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003988 <__c.4183>:
    3988:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3998:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39a8:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39b8:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039c2 <__c.4164>:
    39c2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039cf <__c.4159>:
    39cf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039dc <__c.4154>:
    39dc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039e9 <__c.4146>:
    39e9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039f6 <__c.4144>:
    39f6:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a06:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a16:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a26:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a36:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a46:	25 6c 64 0a 00                                      %ld..

00003a4b <__c.4128>:
    3a4b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a5b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a6b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a77 <__c.4126>:
    3a77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a87:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a97:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003aa2 <__c.4124>:
    3aa2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ab2:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ac2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ad2:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ae2:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003aed <__c.4122>:
    3aed:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3afd:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b0d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b1d:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b2d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b38 <__c.4120>:
    3b38:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b48:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b58:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b66 <__c.4118>:
    3b66:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b76:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b86:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b96:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ba7 <__c.4116>:
    3ba7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3bc7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bd7:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3be7:	58 68 0a 00                                         Xh..

00003beb <__c.4114>:
    3beb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bfb:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c0c <__c.4108>:
    3c0c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c1c:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c2c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c38 <__c.4106>:
    3c38:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c48:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c58:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c67 <__c.4104>:
    3c67:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c77:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c87:	25 6c 64 0a 00                                      %ld..

00003c8c <__c.4102>:
    3c8c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c9c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cac:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cbc:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cc5 <__c.4100>:
    3cc5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cd5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ce5:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3cf5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cfe <__c.4098>:
    3cfe:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d0e:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d16 <__c.4096>:
    3d16:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d26:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d36:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d46:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d4f <__c.4094>:
    3d4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d5f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d6e <__c.4087>:
    3d6e:	0a 00                                               ..

00003d70 <__c.4085>:
    3d70:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d80:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d8a <__c.4083>:
    3d8a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d9a:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003da6 <__c.4081>:
    3da6:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3db6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dc3 <__c.4079>:
    3dc3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dd3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003de0 <__c.4077>:
    3de0:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3df0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dfd <__c.4075>:
    3dfd:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e0d:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e19 <__c.4073>:
    3e19:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e29:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e35 <__c.4071>:
    3e35:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e45:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e4f <__c.4069>:
    3e4f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e5f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e69 <__c.4067>:
    3e69:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e79:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e85 <__c.4065>:
    3e85:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e95:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ea1 <__c.4063>:
    3ea1:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3eb1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ebe <__c.4061>:
    3ebe:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ece:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003edb <__c.4059>:
    3edb:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3eeb:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ef7 <__c.4057>:
    3ef7:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f07:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f11 <__c.4055>:
    3f11:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f21:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f2e <__c.4053>:
    3f2e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f3e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f4b <__c.4051>:
    3f4b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f5b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f68 <__c.4049>:
    3f68:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f78:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f85 <__c.4047>:
    3f85:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f95:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fa2 <__c.4045>:
    3fa2:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fb2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fbf <__c.4043>:
    3fbf:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fcf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fdc <__c.4041>:
    3fdc:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3fec:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ff9 <__c.4039>:
    3ff9:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4009:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004013 <__c.4037>:
    4013:	0a 25 73 0a 00                                      .%s..

00004018 <__c.3914>:
    4018:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4028:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4038:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4048:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004055 <__c.3905>:
    4055:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4065:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4075:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4085:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004091 <__c.3896>:
    4091:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40a1:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040b2 <__c.3889>:
    40b2:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40c2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040cb <__c.3883>:
    40cb:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40db:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    40eb:	25 73 5d 0a 00                                      %s]..

000040f0 <__c.3871>:
    40f0:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4100:	6f 69 6e 74 65 72 0a 00                             ointer..

00004108 <__c.3866>:
    4108:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4118:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4128:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004131 <__c.3860>:
    4131:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4141:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004152 <__c.3847>:
    4152:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4162:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4172:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4182:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4192:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41a2:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41b2:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41c2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41d2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41e2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    41f2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4202:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4212:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4222:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4232:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4242:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4252:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4262:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4272:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4282:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4292:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42a2:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42b2:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42c2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42d2:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    42e2:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    42f2:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4302:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4312:	67 0a 0a 00                                         g...

00004316 <__c.3845>:
    4316:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004320 <__c.4607>:
    4320:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4330:	53 4b 0a 00                                         SK..

00004334 <__c.4605>:
    4334:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4344:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000434e <__c.4603>:
    434e:	25 2d 31 36 73 00                                   %-16s.

00004354 <__c.4601>:
    4354:	25 2d 31 36 73 00                                   %-16s.

0000435a <__c.4599>:
    435a:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000436b <__c.4597>:
    436b:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    437b:	30 34 78 48 0a 00                                   04xH..

00004381 <__c.4595>:
    4381:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4391:	64 6f 6e 65 0a 00                                   done..

00004397 <__c.4593>:
    4397:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    43a7:	6f 6e 65 0a 00                                      one..

000043ac <__c.4591>:
    43ac:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43bc:	61 6c 69 7a 65 64 0a 00                             alized..

000043c4 <__c.4589>:
    43c4:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43d4:	0a 00                                               ..

000043d6 <__c.4587>:
    43d6:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    43e6:	7a 65 64 0a 00                                      zed..

000043eb <__c.4585>:
    43eb:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    43fb:	69 7a 65 64 0a 00                                   ized..

00004401 <__c.4583>:
    4401:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004412 <__c.4581>:
    4412:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4422:	20 73 74 61 72 74 0a 00                              start..

0000442a <__c.4579>:
    442a:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    443a:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    444a:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004458 <__c.4577>:
    4458:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004467 <__c.4575>:
    4467:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4477:	0a 00                                               ..

00004479 <__c.4573>:
    4479:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4489:	20 62 75 73 0a 00                                    bus..

0000448f <__c.4571>:
    448f:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    449f:	20 62 75 73 0a 00                                    bus..

000044a5 <__c.4569>:
    44a5:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44b5:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044bf <__c.4567>:
    44bf:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44cf:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044d9 <__c.4565>:
    44d9:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    44e9:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    44f9:	35 64 69 73 6b 0a 00                                5disk..

00004500 <__c.4563>:
    4500:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004510 <__c.4561>:
    4510:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4520:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000452d <__c.4559>:
    452d:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    453d:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000454c <__c.4557>:
    454c:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    455c:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    456c:	3a 20 25 6c 64 0a 00                                : %ld..

00004573 <__c.4555>:
    4573:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004584 <__c.4553>:
    4584:	53 74 61 72 74 0a 00                                Start..

0000458b <__c.4541>:
    458b:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

00004594 <__c.4539>:
    4594:	45 72 72 6f 72 3a 20 41 72 67 75 6d 65 6e 74 20     Error: Argument 
    45a4:	63 6f 75 6e 74 20 3d 20 25 64 0a 00                 count = %d..

000045b0 <__c.4537>:
    45b0:	4f 4b 0a 00                                         OK..

000045b4 <__c.4534>:
    45b4:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    45c4:	20 25 73 0a 00                                       %s..

000045c9 <__c.4529>:
    45c9:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000045d2 <__c.4527>:
    45d2:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    45e2:	20 25 64 0a 00                                       %d..

000045e7 <__c.4525>:
    45e7:	0a 3e 00                                            .>.

000045ea <__c.4513>:
    45ea:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    45fa:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 0a 20 20     BB.help.input.  
    460a:	20 2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20      - toggle input 
    461a:	64 65 62 75 67 67 69 6e 67 0a 6d 65 6d 0a 20 20     debugging.mem.  
    462a:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    463a:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 0a 20 20 20     memory.reset.   
    464a:	2d 20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72     - reset emulator
    465a:	0a 73 65 74 64 61 74 65 0a 20 20 20 2d 20 73 65     .setdate.   - se
    466a:	74 20 64 61 74 65 0a 74 69 6d 65 0a 20 20 20 2d     t date.time.   -
    467a:	20 64 69 73 70 6c 61 79 20 63 75 72 72 65 6e 74      display current
    468a:	20 74 69 6d 65 0a 0a 00                              time...

00004692 <__c.4506>:
    4692:	25 2d 31 36 73 00                                   %-16s.

00004698 <__c.4504>:
    4698:	25 2d 31 36 73 00                                   %-16s.

0000469e <__c.4497>:
    469e:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46ae:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046b8 <__c.4495>:
    46b8:	25 2d 31 36 73 00                                   %-16s.

000046be <__c.4493>:
    46be:	25 2d 31 36 73 00                                   %-16s.

000046c4 <__c.4491>:
    46c4:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    46d4:	69 6c 65 64 0a 00                                   iled..

000046da <__c.4489>:
    46da:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46ea:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000046f8 <__c.4483>:
    46f8:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4708:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004712 <__c.4477>:
    4712:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4722:	3a 25 30 32 64 00                                   :%02d.

00004728 <__c.4463>:
    4728:	0a 00                                               ..

0000472a <__c.4461>:
    472a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    473a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004744 <__c.4459>:
    4744:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4754:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000475e <__c.4457>:
    475e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    476e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    477e:	35 64 69 73 6b 0a 00                                5disk..

00004785 <__c.4455>:
    4785:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004795 <__c.4453>:
    4795:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    47a5:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047b2 <__c.4451>:
    47b2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47c2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047d1 <__c.4449>:
    47d1:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    47e1:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    47f1:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004802 <__ctors_end>:
    4802:	11 24       	eor	r1, r1
    4804:	1f be       	out	0x3f, r1	; 63
    4806:	cf ef       	ldi	r28, 0xFF	; 255
    4808:	d0 e4       	ldi	r29, 0x40	; 64
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	cd bf       	out	0x3d, r28	; 61

0000480e <__do_copy_data>:
    480e:	17 e1       	ldi	r17, 0x17	; 23
    4810:	a0 e0       	ldi	r26, 0x00	; 0
    4812:	b1 e0       	ldi	r27, 0x01	; 1
    4814:	e8 e3       	ldi	r30, 0x38	; 56
    4816:	ff ec       	ldi	r31, 0xCF	; 207
    4818:	01 e0       	ldi	r16, 0x01	; 1
    481a:	0b bf       	out	0x3b, r16	; 59
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <__do_copy_data+0x14>
    481e:	07 90       	elpm	r0, Z+
    4820:	0d 92       	st	X+, r0
    4822:	a6 35       	cpi	r26, 0x56	; 86
    4824:	b1 07       	cpc	r27, r17
    4826:	d9 f7       	brne	.-10     	; 0x481e <__do_copy_data+0x10>

00004828 <__do_clear_bss>:
    4828:	22 e2       	ldi	r18, 0x22	; 34
    482a:	a6 e5       	ldi	r26, 0x56	; 86
    482c:	b7 e1       	ldi	r27, 0x17	; 23
    482e:	01 c0       	rjmp	.+2      	; 0x4832 <.do_clear_bss_start>

00004830 <.do_clear_bss_loop>:
    4830:	1d 92       	st	X+, r1

00004832 <.do_clear_bss_start>:
    4832:	a7 3b       	cpi	r26, 0xB7	; 183
    4834:	b2 07       	cpc	r27, r18
    4836:	e1 f7       	brne	.-8      	; 0x4830 <.do_clear_bss_loop>
    4838:	0e 94 11 e1 	call	0x1c222	; 0x1c222 <main>
    483c:	0c 94 9a e7 	jmp	0x1cf34	; 0x1cf34 <_exit>

00004840 <__bad_interrupt>:
    4840:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004844 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4844:	e8 2f       	mov	r30, r24
    4846:	e6 95       	lsr	r30
    4848:	e6 95       	lsr	r30
    484a:	e6 95       	lsr	r30
    484c:	93 e0       	ldi	r25, 0x03	; 3
    484e:	e9 9f       	mul	r30, r25
    4850:	f0 01       	movw	r30, r0
    4852:	11 24       	eor	r1, r1
    4854:	32 a1       	ldd	r19, Z+34	; 0x22
    4856:	28 2f       	mov	r18, r24
    4858:	27 70       	andi	r18, 0x07	; 7
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <chip_select+0x1e>
    4860:	88 0f       	add	r24, r24
    4862:	2a 95       	dec	r18
    4864:	ea f7       	brpl	.-6      	; 0x4860 <chip_select+0x1c>
    4866:	98 2f       	mov	r25, r24
    4868:	90 95       	com	r25
    486a:	93 23       	and	r25, r19
    486c:	92 a3       	std	Z+34, r25	; 0x22
    486e:	91 a1       	ldd	r25, Z+33	; 0x21
    4870:	89 2b       	or	r24, r25
    4872:	81 a3       	std	Z+33, r24	; 0x21
    4874:	08 95       	ret

00004876 <chip_deselect>:
    4876:	e8 2f       	mov	r30, r24
    4878:	e6 95       	lsr	r30
    487a:	e6 95       	lsr	r30
    487c:	e6 95       	lsr	r30
    487e:	93 e0       	ldi	r25, 0x03	; 3
    4880:	e9 9f       	mul	r30, r25
    4882:	f0 01       	movw	r30, r0
    4884:	11 24       	eor	r1, r1
    4886:	32 a1       	ldd	r19, Z+34	; 0x22
    4888:	28 2f       	mov	r18, r24
    488a:	27 70       	andi	r18, 0x07	; 7
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	01 c0       	rjmp	.+2      	; 0x4894 <chip_deselect+0x1e>
    4892:	88 0f       	add	r24, r24
    4894:	2a 95       	dec	r18
    4896:	ea f7       	brpl	.-6      	; 0x4892 <chip_deselect+0x1c>
    4898:	93 2f       	mov	r25, r19
    489a:	98 2b       	or	r25, r24
    489c:	92 a3       	std	Z+34, r25	; 0x22
    489e:	91 a1       	ldd	r25, Z+33	; 0x21
    48a0:	89 2b       	or	r24, r25
    48a2:	81 a3       	std	Z+33, r24	; 0x21
    48a4:	08 95       	ret

000048a6 <chip_select_init>:
    48a6:	e7 cf       	rjmp	.-50     	; 0x4876 <chip_deselect>
    48a8:	08 95       	ret

000048aa <spi_end>:
    48aa:	cf 93       	push	r28
    48ac:	ad b7       	in	r26, 0x3d	; 61
    48ae:	be b7       	in	r27, 0x3e	; 62
    48b0:	17 97       	sbiw	r26, 0x07	; 7
    48b2:	0f b6       	in	r0, 0x3f	; 63
    48b4:	f8 94       	cli
    48b6:	be bf       	out	0x3e, r27	; 62
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	ad bf       	out	0x3d, r26	; 61
    48bc:	c8 2f       	mov	r28, r24
    48be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    48c2:	8c 17       	cp	r24, r28
    48c4:	99 f0       	breq	.+38     	; 0x48ec <spi_end+0x42>
    48c6:	8f 3f       	cpi	r24, 0xFF	; 255
    48c8:	89 f0       	breq	.+34     	; 0x48ec <spi_end+0x42>
    48ca:	2c 2f       	mov	r18, r28
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	ed b7       	in	r30, 0x3d	; 61
    48d0:	fe b7       	in	r31, 0x3e	; 62
    48d2:	37 83       	std	Z+7, r19	; 0x07
    48d4:	26 83       	std	Z+6, r18	; 0x06
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	95 83       	std	Z+5, r25	; 0x05
    48da:	84 83       	std	Z+4, r24	; 0x04
    48dc:	82 ec       	ldi	r24, 0xC2	; 194
    48de:	91 e0       	ldi	r25, 0x01	; 1
    48e0:	a0 e0       	ldi	r26, 0x00	; 0
    48e2:	81 83       	std	Z+1, r24	; 0x01
    48e4:	92 83       	std	Z+2, r25	; 0x02
    48e6:	a3 83       	std	Z+3, r26	; 0x03
    48e8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    48ec:	8c 2f       	mov	r24, r28
    48ee:	c3 df       	rcall	.-122    	; 0x4876 <chip_deselect>
    48f0:	8f ef       	ldi	r24, 0xFF	; 255
    48f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    48f6:	ad b7       	in	r26, 0x3d	; 61
    48f8:	be b7       	in	r27, 0x3e	; 62
    48fa:	17 96       	adiw	r26, 0x07	; 7
    48fc:	0f b6       	in	r0, 0x3f	; 63
    48fe:	f8 94       	cli
    4900:	be bf       	out	0x3e, r27	; 62
    4902:	0f be       	out	0x3f, r0	; 63
    4904:	ad bf       	out	0x3d, r26	; 61
    4906:	cf 91       	pop	r28
    4908:	08 95       	ret

0000490a <spi_TX_buffer>:
    490a:	cd c4       	rjmp	.+2458   	; 0x52a6 <SPI0_TX>
    490c:	08 95       	ret

0000490e <spi_RX_buffer>:
    490e:	f5 c4       	rjmp	.+2538   	; 0x52fa <SPI0_RX>
    4910:	08 95       	ret

00004912 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4912:	a1 e0       	ldi	r26, 0x01	; 1
    4914:	b0 e0       	ldi	r27, 0x00	; 0
    4916:	ef e8       	ldi	r30, 0x8F	; 143
    4918:	f4 e2       	ldi	r31, 0x24	; 36
    491a:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    491e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4920:	61 e0       	ldi	r22, 0x01	; 1
    4922:	70 e0       	ldi	r23, 0x00	; 0
    4924:	ce 01       	movw	r24, r28
    4926:	01 96       	adiw	r24, 0x01	; 1
    4928:	be d4       	rcall	.+2428   	; 0x52a6 <SPI0_TX>
#endif
}
    492a:	21 96       	adiw	r28, 0x01	; 1
    492c:	e2 e0       	ldi	r30, 0x02	; 2
    492e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00004932 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4932:	cf 92       	push	r12
    4934:	df 92       	push	r13
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	6b 01       	movw	r12, r22
    493c:	7c 01       	movw	r14, r24
    493e:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4940:	9a df       	rcall	.-204    	; 0x4876 <chip_deselect>
    _cs_pin = 0xff;
    4942:	8f ef       	ldi	r24, 0xFF	; 255
    4944:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4948:	c7 01       	movw	r24, r14
    494a:	b6 01       	movw	r22, r12
    494c:	7f d4       	rcall	.+2302   	; 0x524c <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4952:	3c d4       	rcall	.+2168   	; 0x51cc <SPI0_Mode>
    4954:	8f ef       	ldi	r24, 0xFF	; 255
    4956:	dd df       	rcall	.-70     	; 0x4912 <spi_TX>
    _spi_clock = clock;
    4958:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    495c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4960:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4964:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4968:	ff 90       	pop	r15
    496a:	ef 90       	pop	r14
    496c:	df 90       	pop	r13
    496e:	cf 90       	pop	r12
    4970:	08 95       	ret

00004972 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4972:	cf 92       	push	r12
    4974:	df 92       	push	r13
    4976:	ef 92       	push	r14
    4978:	ff 92       	push	r15
    497a:	cf 93       	push	r28
    497c:	df 93       	push	r29
    497e:	ad b7       	in	r26, 0x3d	; 61
    4980:	be b7       	in	r27, 0x3e	; 62
    4982:	17 97       	sbiw	r26, 0x07	; 7
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	be bf       	out	0x3e, r27	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	ad bf       	out	0x3d, r26	; 61
    498e:	6b 01       	movw	r12, r22
    4990:	7c 01       	movw	r14, r24
    4992:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4994:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4998:	8f 3f       	cpi	r24, 0xFF	; 255
    499a:	79 f0       	breq	.+30     	; 0x49ba <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    499c:	ed b7       	in	r30, 0x3d	; 61
    499e:	fe b7       	in	r31, 0x3e	; 62
    49a0:	46 83       	std	Z+6, r20	; 0x06
    49a2:	d7 83       	std	Z+7, r29	; 0x07
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	95 83       	std	Z+5, r25	; 0x05
    49a8:	84 83       	std	Z+4, r24	; 0x04
    49aa:	80 ee       	ldi	r24, 0xE0	; 224
    49ac:	91 e0       	ldi	r25, 0x01	; 1
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	81 83       	std	Z+1, r24	; 0x01
    49b2:	92 83       	std	Z+2, r25	; 0x02
    49b4:	a3 83       	std	Z+3, r26	; 0x03
    49b6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    49ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    49be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    49c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    49c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    49ca:	8c 15       	cp	r24, r12
    49cc:	9d 05       	cpc	r25, r13
    49ce:	ae 05       	cpc	r26, r14
    49d0:	bf 05       	cpc	r27, r15
    49d2:	21 f0       	breq	.+8      	; 0x49dc <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    49d4:	ae 01       	movw	r20, r28
    49d6:	c7 01       	movw	r24, r14
    49d8:	b6 01       	movw	r22, r12
    49da:	ab df       	rcall	.-170    	; 0x4932 <spi_init>
    }

    chip_select(pin);
    49dc:	8c 2f       	mov	r24, r28
    49de:	32 df       	rcall	.-412    	; 0x4844 <chip_select>
    _cs_pin = pin;
    49e0:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    49e4:	ad b7       	in	r26, 0x3d	; 61
    49e6:	be b7       	in	r27, 0x3e	; 62
    49e8:	17 96       	adiw	r26, 0x07	; 7
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	f8 94       	cli
    49ee:	be bf       	out	0x3e, r27	; 62
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	ad bf       	out	0x3d, r26	; 61
    49f4:	df 91       	pop	r29
    49f6:	cf 91       	pop	r28
    49f8:	ff 90       	pop	r15
    49fa:	ef 90       	pop	r14
    49fc:	df 90       	pop	r13
    49fe:	cf 90       	pop	r12
    4a00:	08 95       	ret

00004a02 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4a02:	a1 e0       	ldi	r26, 0x01	; 1
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	e7 e0       	ldi	r30, 0x07	; 7
    4a08:	f5 e2       	ldi	r31, 0x25	; 37
    4a0a:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    4a0e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4a10:	61 e0       	ldi	r22, 0x01	; 1
    4a12:	70 e0       	ldi	r23, 0x00	; 0
    4a14:	ce 01       	movw	r24, r28
    4a16:	01 96       	adiw	r24, 0x01	; 1
    4a18:	5a d4       	rcall	.+2228   	; 0x52ce <SPI0_TXRX>
#endif
    return(data);
}
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	21 96       	adiw	r28, 0x01	; 1
    4a1e:	e2 e0       	ldi	r30, 0x02	; 2
    4a20:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00004a24 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4a24:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <__data_end>
    GPIO_PIN_HI(LED2);
    4a28:	2c 9a       	sbi	0x05, 4	; 5
    4a2a:	24 9a       	sbi	0x04, 4	; 4
    4a2c:	08 95       	ret

00004a2e <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4a2e:	10 92 56 17 	sts	0x1756, r1	; 0x801756 <__data_end>
    GPIO_PIN_LOW(LED2);
    4a32:	2c 98       	cbi	0x05, 4	; 5
    4a34:	24 9a       	sbi	0x04, 4	; 4
    4a36:	08 95       	ret

00004a38 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4a38:	a2 e0       	ldi	r26, 0x02	; 2
    4a3a:	b0 e0       	ldi	r27, 0x00	; 0
    4a3c:	e2 e2       	ldi	r30, 0x22	; 34
    4a3e:	f5 e2       	ldi	r31, 0x25	; 37
    4a40:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4a44:	20 91 b3 22 	lds	r18, 0x22B3	; 0x8022b3 <__brkval>
    4a48:	30 91 b4 22 	lds	r19, 0x22B4	; 0x8022b4 <__brkval+0x1>
    4a4c:	21 15       	cp	r18, r1
    4a4e:	31 05       	cpc	r19, r1
    4a50:	11 f4       	brne	.+4      	; 0x4a56 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a52:	27 eb       	ldi	r18, 0xB7	; 183
    4a54:	32 e2       	ldi	r19, 0x22	; 34

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4a56:	ce 01       	movw	r24, r28
    4a58:	01 96       	adiw	r24, 0x01	; 1
    4a5a:	82 1b       	sub	r24, r18
    4a5c:	93 0b       	sbc	r25, r19
    4a5e:	22 96       	adiw	r28, 0x02	; 2
    4a60:	e2 e0       	ldi	r30, 0x02	; 2
    4a62:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00004a66 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4a66:	a9 e0       	ldi	r26, 0x09	; 9
    4a68:	b0 e0       	ldi	r27, 0x00	; 0
    4a6a:	e9 e3       	ldi	r30, 0x39	; 57
    4a6c:	f5 e2       	ldi	r31, 0x25	; 37
    4a6e:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4a72:	e2 df       	rcall	.-60     	; 0x4a38 <freeRam>
    4a74:	99 87       	std	Y+9, r25	; 0x09
    4a76:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4a78:	ed b7       	in	r30, 0x3d	; 61
    4a7a:	fe b7       	in	r31, 0x3e	; 62
    4a7c:	95 83       	std	Z+5, r25	; 0x05
    4a7e:	84 83       	std	Z+4, r24	; 0x04
    4a80:	87 e0       	ldi	r24, 0x07	; 7
    4a82:	93 e0       	ldi	r25, 0x03	; 3
    4a84:	a0 e0       	ldi	r26, 0x00	; 0
    4a86:	81 83       	std	Z+1, r24	; 0x01
    4a88:	92 83       	std	Z+2, r25	; 0x02
    4a8a:	a3 83       	std	Z+3, r26	; 0x03
    4a8c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4a90:	8f ef       	ldi	r24, 0xFF	; 255
    4a92:	90 e4       	ldi	r25, 0x40	; 64
    4a94:	ed b7       	in	r30, 0x3d	; 61
    4a96:	fe b7       	in	r31, 0x3e	; 62
    4a98:	95 83       	std	Z+5, r25	; 0x05
    4a9a:	84 83       	std	Z+4, r24	; 0x04
    4a9c:	84 ef       	ldi	r24, 0xF4	; 244
    4a9e:	92 e0       	ldi	r25, 0x02	; 2
    4aa0:	a0 e0       	ldi	r26, 0x00	; 0
    4aa2:	81 83       	std	Z+1, r24	; 0x01
    4aa4:	92 83       	std	Z+2, r25	; 0x02
    4aa6:	a3 83       	std	Z+3, r26	; 0x03
    4aa8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4aac:	ce 01       	movw	r24, r28
    4aae:	08 96       	adiw	r24, 0x08	; 8
    4ab0:	ed b7       	in	r30, 0x3d	; 61
    4ab2:	fe b7       	in	r31, 0x3e	; 62
    4ab4:	95 83       	std	Z+5, r25	; 0x05
    4ab6:	84 83       	std	Z+4, r24	; 0x04
    4ab8:	81 ee       	ldi	r24, 0xE1	; 225
    4aba:	92 e0       	ldi	r25, 0x02	; 2
    4abc:	a0 e0       	ldi	r26, 0x00	; 0
    4abe:	81 83       	std	Z+1, r24	; 0x01
    4ac0:	92 83       	std	Z+2, r25	; 0x02
    4ac2:	a3 83       	std	Z+3, r26	; 0x03
    4ac4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ac8:	87 eb       	ldi	r24, 0xB7	; 183
    4aca:	92 e2       	ldi	r25, 0x22	; 34
    4acc:	ed b7       	in	r30, 0x3d	; 61
    4ace:	fe b7       	in	r31, 0x3e	; 62
    4ad0:	97 83       	std	Z+7, r25	; 0x07
    4ad2:	86 83       	std	Z+6, r24	; 0x06
    4ad4:	86 e5       	ldi	r24, 0x56	; 86
    4ad6:	97 e1       	ldi	r25, 0x17	; 23
    4ad8:	95 83       	std	Z+5, r25	; 0x05
    4ada:	84 83       	std	Z+4, r24	; 0x04
    4adc:	83 ec       	ldi	r24, 0xC3	; 195
    4ade:	92 e0       	ldi	r25, 0x02	; 2
    4ae0:	a0 e0       	ldi	r26, 0x00	; 0
    4ae2:	81 83       	std	Z+1, r24	; 0x01
    4ae4:	92 83       	std	Z+2, r25	; 0x02
    4ae6:	a3 83       	std	Z+3, r26	; 0x03
    4ae8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4aec:	86 e5       	ldi	r24, 0x56	; 86
    4aee:	97 e1       	ldi	r25, 0x17	; 23
    4af0:	ed b7       	in	r30, 0x3d	; 61
    4af2:	fe b7       	in	r31, 0x3e	; 62
    4af4:	97 83       	std	Z+7, r25	; 0x07
    4af6:	86 83       	std	Z+6, r24	; 0x06
    4af8:	80 e0       	ldi	r24, 0x00	; 0
    4afa:	91 e0       	ldi	r25, 0x01	; 1
    4afc:	95 83       	std	Z+5, r25	; 0x05
    4afe:	84 83       	std	Z+4, r24	; 0x04
    4b00:	85 ea       	ldi	r24, 0xA5	; 165
    4b02:	92 e0       	ldi	r25, 0x02	; 2
    4b04:	a0 e0       	ldi	r26, 0x00	; 0
    4b06:	81 83       	std	Z+1, r24	; 0x01
    4b08:	92 83       	std	Z+2, r25	; 0x02
    4b0a:	a3 83       	std	Z+3, r26	; 0x03
    4b0c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	ed b7       	in	r30, 0x3d	; 61
    4b16:	fe b7       	in	r31, 0x3e	; 62
    4b18:	97 83       	std	Z+7, r25	; 0x07
    4b1a:	86 83       	std	Z+6, r24	; 0x06
    4b1c:	87 eb       	ldi	r24, 0xB7	; 183
    4b1e:	92 e2       	ldi	r25, 0x22	; 34
    4b20:	95 83       	std	Z+5, r25	; 0x05
    4b22:	84 83       	std	Z+4, r24	; 0x04
    4b24:	87 e8       	ldi	r24, 0x87	; 135
    4b26:	92 e0       	ldi	r25, 0x02	; 2
    4b28:	a0 e0       	ldi	r26, 0x00	; 0
    4b2a:	81 83       	std	Z+1, r24	; 0x01
    4b2c:	92 83       	std	Z+2, r25	; 0x02
    4b2e:	a3 83       	std	Z+3, r26	; 0x03
    4b30:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4b34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4b38:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4b3c:	ed b7       	in	r30, 0x3d	; 61
    4b3e:	fe b7       	in	r31, 0x3e	; 62
    4b40:	97 83       	std	Z+7, r25	; 0x07
    4b42:	86 83       	std	Z+6, r24	; 0x06
    4b44:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4b48:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b4c:	95 83       	std	Z+5, r25	; 0x05
    4b4e:	84 83       	std	Z+4, r24	; 0x04
    4b50:	89 e6       	ldi	r24, 0x69	; 105
    4b52:	92 e0       	ldi	r25, 0x02	; 2
    4b54:	a0 e0       	ldi	r26, 0x00	; 0
    4b56:	81 83       	std	Z+1, r24	; 0x01
    4b58:	92 83       	std	Z+2, r25	; 0x02
    4b5a:	a3 83       	std	Z+3, r26	; 0x03
    4b5c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4b60:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <__brkval>
    4b64:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <__brkval+0x1>
    4b68:	ed b7       	in	r30, 0x3d	; 61
    4b6a:	fe b7       	in	r31, 0x3e	; 62
    4b6c:	95 83       	std	Z+5, r25	; 0x05
    4b6e:	84 83       	std	Z+4, r24	; 0x04
    4b70:	85 e5       	ldi	r24, 0x55	; 85
    4b72:	92 e0       	ldi	r25, 0x02	; 2
    4b74:	a0 e0       	ldi	r26, 0x00	; 0
    4b76:	81 83       	std	Z+1, r24	; 0x01
    4b78:	92 83       	std	Z+2, r25	; 0x02
    4b7a:	a3 83       	std	Z+3, r26	; 0x03
    4b7c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

}
    4b80:	29 96       	adiw	r28, 0x09	; 9
    4b82:	e2 e0       	ldi	r30, 0x02	; 2
    4b84:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00004b88 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4b88:	ef 92       	push	r14
    4b8a:	ff 92       	push	r15
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	ad b7       	in	r26, 0x3d	; 61
    4b96:	be b7       	in	r27, 0x3e	; 62
    4b98:	17 97       	sbiw	r26, 0x07	; 7
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	be bf       	out	0x3e, r27	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	ad bf       	out	0x3d, r26	; 61
    4ba4:	8c 01       	movw	r16, r24
    4ba6:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4ba8:	0e 94 58 e6 	call	0x1ccb0	; 0x1ccb0 <calloc>
    4bac:	ec 01       	movw	r28, r24
    if(!p)
    4bae:	89 2b       	or	r24, r25
    4bb0:	71 f4       	brne	.+28     	; 0x4bce <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4bb2:	ed b7       	in	r30, 0x3d	; 61
    4bb4:	fe b7       	in	r31, 0x3e	; 62
    4bb6:	f7 82       	std	Z+7, r15	; 0x07
    4bb8:	e6 82       	std	Z+6, r14	; 0x06
    4bba:	15 83       	std	Z+5, r17	; 0x05
    4bbc:	04 83       	std	Z+4, r16	; 0x04
    4bbe:	8a e3       	ldi	r24, 0x3A	; 58
    4bc0:	92 e0       	ldi	r25, 0x02	; 2
    4bc2:	a0 e0       	ldi	r26, 0x00	; 0
    4bc4:	81 83       	std	Z+1, r24	; 0x01
    4bc6:	92 83       	std	Z+2, r25	; 0x02
    4bc8:	a3 83       	std	Z+3, r26	; 0x03
    4bca:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
    return(p);
}
    4bce:	ce 01       	movw	r24, r28
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	27 96       	adiw	r28, 0x07	; 7
    4bd6:	e6 e0       	ldi	r30, 0x06	; 6
    4bd8:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00004bdc <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4bdc:	0f 93       	push	r16
    4bde:	1f 93       	push	r17
    4be0:	cf 93       	push	r28
    4be2:	df 93       	push	r29
    4be4:	00 d0       	rcall	.+0      	; 0x4be6 <safemalloc+0xa>
    4be6:	00 d0       	rcall	.+0      	; 0x4be8 <safemalloc+0xc>
    4be8:	1f 92       	push	r1
    4bea:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4bec:	61 e0       	ldi	r22, 0x01	; 1
    4bee:	70 e0       	ldi	r23, 0x00	; 0
    4bf0:	0e 94 58 e6 	call	0x1ccb0	; 0x1ccb0 <calloc>
    4bf4:	ec 01       	movw	r28, r24
    if(!p)
    4bf6:	89 2b       	or	r24, r25
    4bf8:	61 f4       	brne	.+24     	; 0x4c12 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4bfa:	ed b7       	in	r30, 0x3d	; 61
    4bfc:	fe b7       	in	r31, 0x3e	; 62
    4bfe:	15 83       	std	Z+5, r17	; 0x05
    4c00:	04 83       	std	Z+4, r16	; 0x04
    4c02:	82 e2       	ldi	r24, 0x22	; 34
    4c04:	92 e0       	ldi	r25, 0x02	; 2
    4c06:	a0 e0       	ldi	r26, 0x00	; 0
    4c08:	81 83       	std	Z+1, r24	; 0x01
    4c0a:	92 83       	std	Z+2, r25	; 0x02
    4c0c:	a3 83       	std	Z+3, r26	; 0x03
    4c0e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
    return(p);
}
    4c12:	ce 01       	movw	r24, r28
    4c14:	cd b7       	in	r28, 0x3d	; 61
    4c16:	de b7       	in	r29, 0x3e	; 62
    4c18:	25 96       	adiw	r28, 0x05	; 5
    4c1a:	e4 e0       	ldi	r30, 0x04	; 4
    4c1c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00004c20 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4c20:	ad b7       	in	r26, 0x3d	; 61
    4c22:	be b7       	in	r27, 0x3e	; 62
    4c24:	17 97       	sbiw	r26, 0x07	; 7
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	be bf       	out	0x3e, r27	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4c30:	00 97       	sbiw	r24, 0x00	; 0
    4c32:	11 f1       	breq	.+68     	; 0x4c78 <safefree+0x58>
        return;

    if(__brkval)
    4c34:	20 91 b3 22 	lds	r18, 0x22B3	; 0x8022b3 <__brkval>
    4c38:	30 91 b4 22 	lds	r19, 0x22B4	; 0x8022b4 <__brkval+0x1>
    4c3c:	21 15       	cp	r18, r1
    4c3e:	31 05       	cpc	r19, r1
    4c40:	11 f4       	brne	.+4      	; 0x4c46 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4c42:	27 eb       	ldi	r18, 0xB7	; 183
    4c44:	32 e2       	ldi	r19, 0x22	; 34

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4c46:	42 e2       	ldi	r20, 0x22	; 34
    4c48:	87 3b       	cpi	r24, 0xB7	; 183
    4c4a:	94 07       	cpc	r25, r20
    4c4c:	30 f0       	brcs	.+12     	; 0x4c5a <safefree+0x3a>
    4c4e:	28 17       	cp	r18, r24
    4c50:	39 07       	cpc	r19, r25
    4c52:	18 f0       	brcs	.+6      	; 0x4c5a <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4c54:	0e 94 0a e7 	call	0x1ce14	; 0x1ce14 <free>
        return;
    4c58:	0f c0       	rjmp	.+30     	; 0x4c78 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4c5a:	ed b7       	in	r30, 0x3d	; 61
    4c5c:	fe b7       	in	r31, 0x3e	; 62
    4c5e:	37 83       	std	Z+7, r19	; 0x07
    4c60:	26 83       	std	Z+6, r18	; 0x06
    4c62:	95 83       	std	Z+5, r25	; 0x05
    4c64:	84 83       	std	Z+4, r24	; 0x04
    4c66:	8d ef       	ldi	r24, 0xFD	; 253
    4c68:	91 e0       	ldi	r25, 0x01	; 1
    4c6a:	a0 e0       	ldi	r26, 0x00	; 0
    4c6c:	81 83       	std	Z+1, r24	; 0x01
    4c6e:	92 83       	std	Z+2, r25	; 0x02
    4c70:	a3 83       	std	Z+3, r26	; 0x03
    4c72:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    PrintFree();
    4c76:	f7 de       	rcall	.-530    	; 0x4a66 <PrintFree>
}
    4c78:	ad b7       	in	r26, 0x3d	; 61
    4c7a:	be b7       	in	r27, 0x3e	; 62
    4c7c:	17 96       	adiw	r26, 0x07	; 7
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	be bf       	out	0x3e, r27	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	ad bf       	out	0x3d, r26	; 61
    4c88:	08 95       	ret

00004c8a <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4c8a:	64 36       	cpi	r22, 0x64	; 100
    4c8c:	71 05       	cpc	r23, r1
    4c8e:	81 05       	cpc	r24, r1
    4c90:	91 05       	cpc	r25, r1
    4c92:	58 f0       	brcs	.+22     	; 0x4caa <delayus+0x20>
    {
        us -= 100U;
    4c94:	64 56       	subi	r22, 0x64	; 100
    4c96:	71 09       	sbc	r23, r1
    4c98:	81 09       	sbc	r24, r1
    4c9a:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c9c:	e3 ef       	ldi	r30, 0xF3	; 243
    4c9e:	f1 e0       	ldi	r31, 0x01	; 1
    4ca0:	31 97       	sbiw	r30, 0x01	; 1
    4ca2:	f1 f7       	brne	.-4      	; 0x4ca0 <delayus+0x16>
    4ca4:	00 c0       	rjmp	.+0      	; 0x4ca6 <delayus+0x1c>
    4ca6:	00 00       	nop
    4ca8:	f0 cf       	rjmp	.-32     	; 0x4c8a <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4caa:	6a 30       	cpi	r22, 0x0A	; 10
    4cac:	71 05       	cpc	r23, r1
    4cae:	81 05       	cpc	r24, r1
    4cb0:	91 05       	cpc	r25, r1
    4cb2:	48 f0       	brcs	.+18     	; 0x4cc6 <delayus+0x3c>
    {
        us -= 10U;
    4cb4:	6a 50       	subi	r22, 0x0A	; 10
    4cb6:	71 09       	sbc	r23, r1
    4cb8:	81 09       	sbc	r24, r1
    4cba:	91 09       	sbc	r25, r1
    4cbc:	f2 e4       	ldi	r31, 0x42	; 66
    4cbe:	fa 95       	dec	r31
    4cc0:	f1 f7       	brne	.-4      	; 0x4cbe <delayus+0x34>
    4cc2:	00 c0       	rjmp	.+0      	; 0x4cc4 <delayus+0x3a>
    4cc4:	f2 cf       	rjmp	.-28     	; 0x4caa <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4cc6:	61 15       	cp	r22, r1
    4cc8:	71 05       	cpc	r23, r1
    4cca:	81 05       	cpc	r24, r1
    4ccc:	91 05       	cpc	r25, r1
    4cce:	49 f0       	breq	.+18     	; 0x4ce2 <delayus+0x58>
    {
        --us;
    4cd0:	61 50       	subi	r22, 0x01	; 1
    4cd2:	71 09       	sbc	r23, r1
    4cd4:	81 09       	sbc	r24, r1
    4cd6:	91 09       	sbc	r25, r1
    4cd8:	26 e0       	ldi	r18, 0x06	; 6
    4cda:	2a 95       	dec	r18
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <delayus+0x50>
    4cde:	00 c0       	rjmp	.+0      	; 0x4ce0 <delayus+0x56>
    4ce0:	f2 cf       	rjmp	.-28     	; 0x4cc6 <delayus+0x3c>
        _delay_us(1);
    }
}
    4ce2:	08 95       	ret

00004ce4 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4ce4:	61 15       	cp	r22, r1
    4ce6:	71 05       	cpc	r23, r1
    4ce8:	81 05       	cpc	r24, r1
    4cea:	91 05       	cpc	r25, r1
    4cec:	09 f4       	brne	.+2      	; 0x4cf0 <delayms+0xc>
    4cee:	41 c0       	rjmp	.+130    	; 0x4d72 <delayms+0x8e>
    4cf0:	e3 ef       	ldi	r30, 0xF3	; 243
    4cf2:	f1 e0       	ldi	r31, 0x01	; 1
    4cf4:	31 97       	sbiw	r30, 0x01	; 1
    4cf6:	f1 f7       	brne	.-4      	; 0x4cf4 <delayms+0x10>
    4cf8:	00 c0       	rjmp	.+0      	; 0x4cfa <delayms+0x16>
    4cfa:	00 00       	nop
    4cfc:	e3 ef       	ldi	r30, 0xF3	; 243
    4cfe:	f1 e0       	ldi	r31, 0x01	; 1
    4d00:	31 97       	sbiw	r30, 0x01	; 1
    4d02:	f1 f7       	brne	.-4      	; 0x4d00 <delayms+0x1c>
    4d04:	00 c0       	rjmp	.+0      	; 0x4d06 <delayms+0x22>
    4d06:	00 00       	nop
    4d08:	e3 ef       	ldi	r30, 0xF3	; 243
    4d0a:	f1 e0       	ldi	r31, 0x01	; 1
    4d0c:	31 97       	sbiw	r30, 0x01	; 1
    4d0e:	f1 f7       	brne	.-4      	; 0x4d0c <delayms+0x28>
    4d10:	00 c0       	rjmp	.+0      	; 0x4d12 <delayms+0x2e>
    4d12:	00 00       	nop
    4d14:	e3 ef       	ldi	r30, 0xF3	; 243
    4d16:	f1 e0       	ldi	r31, 0x01	; 1
    4d18:	31 97       	sbiw	r30, 0x01	; 1
    4d1a:	f1 f7       	brne	.-4      	; 0x4d18 <delayms+0x34>
    4d1c:	00 c0       	rjmp	.+0      	; 0x4d1e <delayms+0x3a>
    4d1e:	00 00       	nop
    4d20:	e3 ef       	ldi	r30, 0xF3	; 243
    4d22:	f1 e0       	ldi	r31, 0x01	; 1
    4d24:	31 97       	sbiw	r30, 0x01	; 1
    4d26:	f1 f7       	brne	.-4      	; 0x4d24 <delayms+0x40>
    4d28:	00 c0       	rjmp	.+0      	; 0x4d2a <delayms+0x46>
    4d2a:	00 00       	nop
    4d2c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d2e:	f1 e0       	ldi	r31, 0x01	; 1
    4d30:	31 97       	sbiw	r30, 0x01	; 1
    4d32:	f1 f7       	brne	.-4      	; 0x4d30 <delayms+0x4c>
    4d34:	00 c0       	rjmp	.+0      	; 0x4d36 <delayms+0x52>
    4d36:	00 00       	nop
    4d38:	e3 ef       	ldi	r30, 0xF3	; 243
    4d3a:	f1 e0       	ldi	r31, 0x01	; 1
    4d3c:	31 97       	sbiw	r30, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <delayms+0x58>
    4d40:	00 c0       	rjmp	.+0      	; 0x4d42 <delayms+0x5e>
    4d42:	00 00       	nop
    4d44:	e3 ef       	ldi	r30, 0xF3	; 243
    4d46:	f1 e0       	ldi	r31, 0x01	; 1
    4d48:	31 97       	sbiw	r30, 0x01	; 1
    4d4a:	f1 f7       	brne	.-4      	; 0x4d48 <delayms+0x64>
    4d4c:	00 c0       	rjmp	.+0      	; 0x4d4e <delayms+0x6a>
    4d4e:	00 00       	nop
    4d50:	e3 ef       	ldi	r30, 0xF3	; 243
    4d52:	f1 e0       	ldi	r31, 0x01	; 1
    4d54:	31 97       	sbiw	r30, 0x01	; 1
    4d56:	f1 f7       	brne	.-4      	; 0x4d54 <delayms+0x70>
    4d58:	00 c0       	rjmp	.+0      	; 0x4d5a <delayms+0x76>
    4d5a:	00 00       	nop
    4d5c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d5e:	f1 e0       	ldi	r31, 0x01	; 1
    4d60:	31 97       	sbiw	r30, 0x01	; 1
    4d62:	f1 f7       	brne	.-4      	; 0x4d60 <delayms+0x7c>
    4d64:	00 c0       	rjmp	.+0      	; 0x4d66 <delayms+0x82>
    4d66:	00 00       	nop
    4d68:	61 50       	subi	r22, 0x01	; 1
    4d6a:	71 09       	sbc	r23, r1
    4d6c:	81 09       	sbc	r24, r1
    4d6e:	91 09       	sbc	r25, r1
    4d70:	b9 cf       	rjmp	.-142    	; 0x4ce4 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4d72:	08 95       	ret

00004d74 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4d74:	81 11       	cpse	r24, r1
    4d76:	0e c0       	rjmp	.+28     	; 0x4d94 <uart_rx_flush+0x20>
    4d78:	f8 94       	cli
    4d7a:	10 92 fa 1a 	sts	0x1AFA, r1	; 0x801afa <uarts+0x4>
    4d7e:	10 92 f9 1a 	sts	0x1AF9, r1	; 0x801af9 <uarts+0x3>
    4d82:	10 92 f6 1a 	sts	0x1AF6, r1	; 0x801af6 <uarts>
    4d86:	10 92 f7 1a 	sts	0x1AF7, r1	; 0x801af7 <uarts+0x1>
    4d8a:	10 92 f8 1a 	sts	0x1AF8, r1	; 0x801af8 <uarts+0x2>
    4d8e:	10 92 fb 1a 	sts	0x1AFB, r1	; 0x801afb <uarts+0x5>
    4d92:	78 94       	sei
    4d94:	08 95       	ret

00004d96 <uart_ubr>:
    4d96:	4f 92       	push	r4
    4d98:	5f 92       	push	r5
    4d9a:	6f 92       	push	r6
    4d9c:	7f 92       	push	r7
    4d9e:	8f 92       	push	r8
    4da0:	9f 92       	push	r9
    4da2:	af 92       	push	r10
    4da4:	bf 92       	push	r11
    4da6:	cf 92       	push	r12
    4da8:	df 92       	push	r13
    4daa:	ef 92       	push	r14
    4dac:	ff 92       	push	r15
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	5a 01       	movw	r10, r20
    4db4:	e9 01       	movw	r28, r18
    4db6:	0e 94 f6 e4 	call	0x1c9ec	; 0x1c9ec <__floatunsisf>
    4dba:	2b 01       	movw	r4, r22
    4dbc:	3c 01       	movw	r6, r24
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e0       	ldi	r20, 0x00	; 0
    4dc4:	51 e4       	ldi	r21, 0x41	; 65
    4dc6:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    4dca:	9b 01       	movw	r18, r22
    4dcc:	ac 01       	movw	r20, r24
    4dce:	60 e8       	ldi	r22, 0x80	; 128
    4dd0:	76 e9       	ldi	r23, 0x96	; 150
    4dd2:	88 e9       	ldi	r24, 0x98	; 152
    4dd4:	9b e4       	ldi	r25, 0x4B	; 75
    4dd6:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	40 e8       	ldi	r20, 0x80	; 128
    4de0:	5f e3       	ldi	r21, 0x3F	; 63
    4de2:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    4de6:	0e 94 0f e6 	call	0x1cc1e	; 0x1cc1e <round>
    4dea:	0e 94 ca e4 	call	0x1c994	; 0x1c994 <__fixunssfsi>
    4dee:	6b 01       	movw	r12, r22
    4df0:	7c 01       	movw	r14, r24
    4df2:	c1 14       	cp	r12, r1
    4df4:	80 e1       	ldi	r24, 0x10	; 16
    4df6:	d8 06       	cpc	r13, r24
    4df8:	e1 04       	cpc	r14, r1
    4dfa:	f1 04       	cpc	r15, r1
    4dfc:	58 f4       	brcc	.+22     	; 0x4e14 <uart_ubr+0x7e>
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	f5 01       	movw	r30, r10
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	80 83       	st	Z, r24
    4e08:	81 2c       	mov	r8, r1
    4e0a:	91 2c       	mov	r9, r1
    4e0c:	a1 2c       	mov	r10, r1
    4e0e:	21 e4       	ldi	r18, 0x41	; 65
    4e10:	b2 2e       	mov	r11, r18
    4e12:	31 c0       	rjmp	.+98     	; 0x4e76 <uart_ubr+0xe0>
    4e14:	f5 01       	movw	r30, r10
    4e16:	11 82       	std	Z+1, r1	; 0x01
    4e18:	10 82       	st	Z, r1
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e8       	ldi	r20, 0x80	; 128
    4e20:	51 e4       	ldi	r21, 0x41	; 65
    4e22:	c3 01       	movw	r24, r6
    4e24:	b2 01       	movw	r22, r4
    4e26:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    4e2a:	9b 01       	movw	r18, r22
    4e2c:	ac 01       	movw	r20, r24
    4e2e:	60 e8       	ldi	r22, 0x80	; 128
    4e30:	76 e9       	ldi	r23, 0x96	; 150
    4e32:	88 e9       	ldi	r24, 0x98	; 152
    4e34:	9b e4       	ldi	r25, 0x4B	; 75
    4e36:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	40 e8       	ldi	r20, 0x80	; 128
    4e40:	5f e3       	ldi	r21, 0x3F	; 63
    4e42:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    4e46:	0e 94 0f e6 	call	0x1cc1e	; 0x1cc1e <round>
    4e4a:	0e 94 ca e4 	call	0x1c994	; 0x1c994 <__fixunssfsi>
    4e4e:	6b 01       	movw	r12, r22
    4e50:	7c 01       	movw	r14, r24
    4e52:	81 2c       	mov	r8, r1
    4e54:	91 2c       	mov	r9, r1
    4e56:	90 e8       	ldi	r25, 0x80	; 128
    4e58:	a9 2e       	mov	r10, r25
    4e5a:	91 e4       	ldi	r25, 0x41	; 65
    4e5c:	b9 2e       	mov	r11, r25
    4e5e:	c1 14       	cp	r12, r1
    4e60:	f0 e1       	ldi	r31, 0x10	; 16
    4e62:	df 06       	cpc	r13, r31
    4e64:	e1 04       	cpc	r14, r1
    4e66:	f1 04       	cpc	r15, r1
    4e68:	30 f0       	brcs	.+12     	; 0x4e76 <uart_ubr+0xe0>
    4e6a:	cc 24       	eor	r12, r12
    4e6c:	ca 94       	dec	r12
    4e6e:	8f e0       	ldi	r24, 0x0F	; 15
    4e70:	d8 2e       	mov	r13, r24
    4e72:	e1 2c       	mov	r14, r1
    4e74:	f1 2c       	mov	r15, r1
    4e76:	c7 01       	movw	r24, r14
    4e78:	b6 01       	movw	r22, r12
    4e7a:	6f 5f       	subi	r22, 0xFF	; 255
    4e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e80:	9f 4f       	sbci	r25, 0xFF	; 255
    4e82:	0e 94 f6 e4 	call	0x1c9ec	; 0x1c9ec <__floatunsisf>
    4e86:	a5 01       	movw	r20, r10
    4e88:	94 01       	movw	r18, r8
    4e8a:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    4e8e:	9b 01       	movw	r18, r22
    4e90:	ac 01       	movw	r20, r24
    4e92:	60 e8       	ldi	r22, 0x80	; 128
    4e94:	76 e9       	ldi	r23, 0x96	; 150
    4e96:	88 e9       	ldi	r24, 0x98	; 152
    4e98:	9b e4       	ldi	r25, 0x4B	; 75
    4e9a:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    4e9e:	0e 94 ca e4 	call	0x1c994	; 0x1c994 <__fixunssfsi>
    4ea2:	68 83       	st	Y, r22
    4ea4:	79 83       	std	Y+1, r23	; 0x01
    4ea6:	8a 83       	std	Y+2, r24	; 0x02
    4ea8:	9b 83       	std	Y+3, r25	; 0x03
    4eaa:	c6 01       	movw	r24, r12
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	ff 90       	pop	r15
    4eb2:	ef 90       	pop	r14
    4eb4:	df 90       	pop	r13
    4eb6:	cf 90       	pop	r12
    4eb8:	bf 90       	pop	r11
    4eba:	af 90       	pop	r10
    4ebc:	9f 90       	pop	r9
    4ebe:	8f 90       	pop	r8
    4ec0:	7f 90       	pop	r7
    4ec2:	6f 90       	pop	r6
    4ec4:	5f 90       	pop	r5
    4ec6:	4f 90       	pop	r4
    4ec8:	08 95       	ret

00004eca <uart_init>:
    4eca:	a6 e0       	ldi	r26, 0x06	; 6
    4ecc:	b0 e0       	ldi	r27, 0x00	; 0
    4ece:	eb e6       	ldi	r30, 0x6B	; 107
    4ed0:	f7 e2       	ldi	r31, 0x27	; 39
    4ed2:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    4ed6:	1e 82       	std	Y+6, r1	; 0x06
    4ed8:	1d 82       	std	Y+5, r1	; 0x05
    4eda:	81 11       	cpse	r24, r1
    4edc:	36 c0       	rjmp	.+108    	; 0x4f4a <uart_init+0x80>
    4ede:	cb 01       	movw	r24, r22
    4ee0:	ba 01       	movw	r22, r20
    4ee2:	9e 01       	movw	r18, r28
    4ee4:	2f 5f       	subi	r18, 0xFF	; 255
    4ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee8:	ae 01       	movw	r20, r28
    4eea:	4b 5f       	subi	r20, 0xFB	; 251
    4eec:	5f 4f       	sbci	r21, 0xFF	; 255
    4eee:	53 df       	rcall	.-346    	; 0x4d96 <uart_ubr>
    4ef0:	f8 94       	cli
    4ef2:	10 92 fa 1a 	sts	0x1AFA, r1	; 0x801afa <uarts+0x4>
    4ef6:	10 92 f9 1a 	sts	0x1AF9, r1	; 0x801af9 <uarts+0x3>
    4efa:	10 92 f6 1a 	sts	0x1AF6, r1	; 0x801af6 <uarts>
    4efe:	10 92 f7 1a 	sts	0x1AF7, r1	; 0x801af7 <uarts+0x1>
    4f02:	10 92 f8 1a 	sts	0x1AF8, r1	; 0x801af8 <uarts+0x2>
    4f06:	10 92 fb 1a 	sts	0x1AFB, r1	; 0x801afb <uarts+0x5>
    4f0a:	78 94       	sei
    4f0c:	f8 94       	cli
    4f0e:	58 9a       	sbi	0x0b, 0	; 11
    4f10:	59 9a       	sbi	0x0b, 1	; 11
    4f12:	50 98       	cbi	0x0a, 0	; 10
    4f14:	51 9a       	sbi	0x0a, 1	; 10
    4f16:	28 e9       	ldi	r18, 0x98	; 152
    4f18:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f20:	23 2b       	or	r18, r19
    4f22:	19 f0       	breq	.+6      	; 0x4f2a <uart_init+0x60>
    4f24:	22 e0       	ldi	r18, 0x02	; 2
    4f26:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f2a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4f2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4f32:	78 94       	sei
    4f34:	6e e5       	ldi	r22, 0x5E	; 94
    4f36:	78 e2       	ldi	r23, 0x28	; 40
    4f38:	83 e7       	ldi	r24, 0x73	; 115
    4f3a:	98 e2       	ldi	r25, 0x28	; 40
    4f3c:	0e 94 c6 77 	call	0xef8c	; 0xef8c <fdevopen>
    4f40:	69 81       	ldd	r22, Y+1	; 0x01
    4f42:	7a 81       	ldd	r23, Y+2	; 0x02
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	9c 81       	ldd	r25, Y+4	; 0x04
    4f48:	03 c0       	rjmp	.+6      	; 0x4f50 <uart_init+0x86>
    4f4a:	60 e0       	ldi	r22, 0x00	; 0
    4f4c:	70 e0       	ldi	r23, 0x00	; 0
    4f4e:	cb 01       	movw	r24, r22
    4f50:	26 96       	adiw	r28, 0x06	; 6
    4f52:	e2 e0       	ldi	r30, 0x02	; 2
    4f54:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00004f58 <uart_rx_interrupt>:
    4f58:	cf 93       	push	r28
    4f5a:	df 93       	push	r29
    4f5c:	27 e5       	ldi	r18, 0x57	; 87
    4f5e:	82 9f       	mul	r24, r18
    4f60:	c0 01       	movw	r24, r0
    4f62:	11 24       	eor	r1, r1
    4f64:	fc 01       	movw	r30, r24
    4f66:	ea 50       	subi	r30, 0x0A	; 10
    4f68:	f5 4e       	sbci	r31, 0xE5	; 229
    4f6a:	83 81       	ldd	r24, Z+3	; 0x03
    4f6c:	94 81       	ldd	r25, Z+4	; 0x04
    4f6e:	80 35       	cpi	r24, 0x50	; 80
    4f70:	91 05       	cpc	r25, r1
    4f72:	84 f4       	brge	.+32     	; 0x4f94 <uart_rx_interrupt+0x3c>
    4f74:	30 81       	ld	r19, Z
    4f76:	21 e0       	ldi	r18, 0x01	; 1
    4f78:	23 0f       	add	r18, r19
    4f7a:	20 83       	st	Z, r18
    4f7c:	ef 01       	movw	r28, r30
    4f7e:	c3 0f       	add	r28, r19
    4f80:	d1 1d       	adc	r29, r1
    4f82:	6f 77       	andi	r22, 0x7F	; 127
    4f84:	6e 83       	std	Y+6, r22	; 0x06
    4f86:	01 96       	adiw	r24, 0x01	; 1
    4f88:	94 83       	std	Z+4, r25	; 0x04
    4f8a:	83 83       	std	Z+3, r24	; 0x03
    4f8c:	20 35       	cpi	r18, 0x50	; 80
    4f8e:	28 f0       	brcs	.+10     	; 0x4f9a <uart_rx_interrupt+0x42>
    4f90:	10 82       	st	Z, r1
    4f92:	03 c0       	rjmp	.+6      	; 0x4f9a <uart_rx_interrupt+0x42>
    4f94:	85 81       	ldd	r24, Z+5	; 0x05
    4f96:	81 60       	ori	r24, 0x01	; 1
    4f98:	85 83       	std	Z+5, r24	; 0x05
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	08 95       	ret

00004fa0 <__vector_20>:
    4fa0:	1f 92       	push	r1
    4fa2:	0f 92       	push	r0
    4fa4:	0f b6       	in	r0, 0x3f	; 63
    4fa6:	0f 92       	push	r0
    4fa8:	11 24       	eor	r1, r1
    4faa:	0b b6       	in	r0, 0x3b	; 59
    4fac:	0f 92       	push	r0
    4fae:	2f 93       	push	r18
    4fb0:	3f 93       	push	r19
    4fb2:	4f 93       	push	r20
    4fb4:	5f 93       	push	r21
    4fb6:	6f 93       	push	r22
    4fb8:	7f 93       	push	r23
    4fba:	8f 93       	push	r24
    4fbc:	9f 93       	push	r25
    4fbe:	af 93       	push	r26
    4fc0:	bf 93       	push	r27
    4fc2:	ef 93       	push	r30
    4fc4:	ff 93       	push	r31
    4fc6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	c5 df       	rcall	.-118    	; 0x4f58 <uart_rx_interrupt>
    4fce:	ff 91       	pop	r31
    4fd0:	ef 91       	pop	r30
    4fd2:	bf 91       	pop	r27
    4fd4:	af 91       	pop	r26
    4fd6:	9f 91       	pop	r25
    4fd8:	8f 91       	pop	r24
    4fda:	7f 91       	pop	r23
    4fdc:	6f 91       	pop	r22
    4fde:	5f 91       	pop	r21
    4fe0:	4f 91       	pop	r20
    4fe2:	3f 91       	pop	r19
    4fe4:	2f 91       	pop	r18
    4fe6:	0f 90       	pop	r0
    4fe8:	0b be       	out	0x3b, r0	; 59
    4fea:	0f 90       	pop	r0
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	0f 90       	pop	r0
    4ff0:	1f 90       	pop	r1
    4ff2:	18 95       	reti

00004ff4 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4ff4:	81 11       	cpse	r24, r1
    4ff6:	07 c0       	rjmp	.+14     	; 0x5006 <uart_rx_count+0x12>
        return(EOF);

    cli();
    4ff8:	f8 94       	cli

    count = uarts[uart].rx_count;
    4ffa:	80 91 f9 1a 	lds	r24, 0x1AF9	; 0x801af9 <uarts+0x3>
    4ffe:	90 91 fa 1a 	lds	r25, 0x1AFA	; 0x801afa <uarts+0x4>

    sei();
    5002:	78 94       	sei

    return (count );
    5004:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5006:	8f ef       	ldi	r24, 0xFF	; 255
    5008:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    500a:	08 95       	ret

0000500c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    500c:	81 11       	cpse	r24, r1
    500e:	21 c0       	rjmp	.+66     	; 0x5052 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	f0 df       	rcall	.-32     	; 0x4ff4 <uart_rx_count>
    5014:	18 16       	cp	r1, r24
    5016:	19 06       	cpc	r1, r25
    5018:	dc f7       	brge	.-10     	; 0x5010 <uart_get_tail+0x4>
        ;

    cli();
    501a:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    501c:	e0 91 f7 1a 	lds	r30, 0x1AF7	; 0x801af7 <uarts+0x1>
    5020:	91 e0       	ldi	r25, 0x01	; 1
    5022:	9e 0f       	add	r25, r30
    5024:	90 93 f7 1a 	sts	0x1AF7, r25	; 0x801af7 <uarts+0x1>
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	ea 50       	subi	r30, 0x0A	; 10
    502c:	f5 4e       	sbci	r31, 0xE5	; 229
    502e:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5030:	90 35       	cpi	r25, 0x50	; 80
    5032:	10 f0       	brcs	.+4      	; 0x5038 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5034:	10 92 f7 1a 	sts	0x1AF7, r1	; 0x801af7 <uarts+0x1>
    uarts[uart].rx_count--;
    5038:	20 91 f9 1a 	lds	r18, 0x1AF9	; 0x801af9 <uarts+0x3>
    503c:	30 91 fa 1a 	lds	r19, 0x1AFA	; 0x801afa <uarts+0x4>
    5040:	21 50       	subi	r18, 0x01	; 1
    5042:	31 09       	sbc	r19, r1
    5044:	30 93 fa 1a 	sts	0x1AFA, r19	; 0x801afa <uarts+0x4>
    5048:	20 93 f9 1a 	sts	0x1AF9, r18	; 0x801af9 <uarts+0x3>
    sei();
    504c:	78 94       	sei

    return (c & 0xff);
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5052:	8f ef       	ldi	r24, 0xFF	; 255
    5054:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5056:	08 95       	ret

00005058 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5058:	d9 df       	rcall	.-78     	; 0x500c <uart_get_tail>
}
    505a:	99 27       	eor	r25, r25
    505c:	08 95       	ret

0000505e <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    505e:	61 11       	cpse	r22, r1
    5060:	09 c0       	rjmp	.+18     	; 0x5074 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5062:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5066:	25 ff       	sbrs	r18, 5
    5068:	fc cf       	rjmp	.-8      	; 0x5062 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    506a:	28 2f       	mov	r18, r24
    506c:	2f 77       	andi	r18, 0x7F	; 127
    506e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5072:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    5074:	61 30       	cpi	r22, 0x01	; 1
    5076:	49 f4       	brne	.+18     	; 0x508a <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5078:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    507c:	25 ff       	sbrs	r18, 5
    507e:	fc cf       	rjmp	.-8      	; 0x5078 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5080:	28 2f       	mov	r18, r24
    5082:	2f 77       	andi	r18, 0x7F	; 127
    5084:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5088:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	9f ef       	ldi	r25, 0xFF	; 255
}
    508e:	08 95       	ret

00005090 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5090:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5092:	81 11       	cpse	r24, r1
    5094:	0f c0       	rjmp	.+30     	; 0x50b4 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    5096:	e0 df       	rcall	.-64     	; 0x5058 <uart_rx_byte>
    5098:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    509a:	60 e0       	ldi	r22, 0x00	; 0
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	df df       	rcall	.-66     	; 0x505e <uart_tx_byte>
    if(c == '\r')
    50a0:	cd 30       	cpi	r28, 0x0D	; 13
    50a2:	29 f4       	brne	.+10     	; 0x50ae <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    50a4:	60 e0       	ldi	r22, 0x00	; 0
    50a6:	8a e0       	ldi	r24, 0x0A	; 10
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	d9 df       	rcall	.-78     	; 0x505e <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    50ac:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    50ae:	8c 2f       	mov	r24, r28
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	02 c0       	rjmp	.+4      	; 0x50b8 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    50b4:	8f ef       	ldi	r24, 0xFF	; 255
    50b6:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    50b8:	cf 91       	pop	r28
    50ba:	08 95       	ret

000050bc <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	e8 cf       	rjmp	.-48     	; 0x5090 <uart_getchar>
}
    50c0:	08 95       	ret

000050c2 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    50c2:	1f 93       	push	r17
    50c4:	cf 93       	push	r28
    50c6:	df 93       	push	r29
    50c8:	ec 01       	movw	r28, r24
    50ca:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    50cc:	c8 df       	rcall	.-112    	; 0x505e <uart_tx_byte>

    if( c == '\n' )
    50ce:	ca 30       	cpi	r28, 0x0A	; 10
    50d0:	d1 05       	cpc	r29, r1
    50d2:	21 f4       	brne	.+8      	; 0x50dc <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    50d4:	61 2f       	mov	r22, r17
    50d6:	8d e0       	ldi	r24, 0x0D	; 13
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	c1 df       	rcall	.-126    	; 0x505e <uart_tx_byte>

    return(c);
}
    50dc:	ce 01       	movw	r24, r28
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	08 95       	ret

000050e6 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    50ec:	60 e0       	ldi	r22, 0x00	; 0
    50ee:	70 e0       	ldi	r23, 0x00	; 0
    50f0:	e8 df       	rcall	.-48     	; 0x50c2 <uart_putchar>
    return(c);
}
    50f2:	ce 01       	movw	r24, r28
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	08 95       	ret

000050fa <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    50fa:	7c cf       	rjmp	.-264    	; 0x4ff4 <uart_rx_count>
}
    50fc:	08 95       	ret

000050fe <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    50fe:	cf 92       	push	r12
    5100:	df 92       	push	r13
    5102:	ef 92       	push	r14
    5104:	ff 92       	push	r15
    5106:	6b 01       	movw	r12, r22
    5108:	7c 01       	movw	r14, r24
    510a:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <SPI0_Speed_value>
    510e:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <SPI0_Speed_value+0x1>
    5112:	a0 91 5b 17 	lds	r26, 0x175B	; 0x80175b <SPI0_Speed_value+0x2>
    5116:	b0 91 5c 17 	lds	r27, 0x175C	; 0x80175c <SPI0_Speed_value+0x3>
    511a:	8c 15       	cp	r24, r12
    511c:	9d 05       	cpc	r25, r13
    511e:	ae 05       	cpc	r26, r14
    5120:	bf 05       	cpc	r27, r15
    5122:	09 f4       	brne	.+2      	; 0x5126 <SPI0_Speed+0x28>
    5124:	4e c0       	rjmp	.+156    	; 0x51c2 <SPI0_Speed+0xc4>
    5126:	60 e0       	ldi	r22, 0x00	; 0
    5128:	7d e2       	ldi	r23, 0x2D	; 45
    512a:	81 e3       	ldi	r24, 0x31	; 49
    512c:	91 e0       	ldi	r25, 0x01	; 1
    512e:	a7 01       	movw	r20, r14
    5130:	96 01       	movw	r18, r12
    5132:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    5136:	20 38       	cpi	r18, 0x80	; 128
    5138:	31 05       	cpc	r19, r1
    513a:	41 05       	cpc	r20, r1
    513c:	51 05       	cpc	r21, r1
    513e:	28 f4       	brcc	.+10     	; 0x514a <SPI0_Speed+0x4c>
    5140:	20 34       	cpi	r18, 0x40	; 64
    5142:	31 05       	cpc	r19, r1
    5144:	41 05       	cpc	r20, r1
    5146:	51 05       	cpc	r21, r1
    5148:	30 f0       	brcs	.+12     	; 0x5156 <SPI0_Speed+0x58>
    514a:	8d b5       	in	r24, 0x2d	; 45
    514c:	8e 7f       	andi	r24, 0xFE	; 254
    514e:	8d bd       	out	0x2d, r24	; 45
    5150:	8c b5       	in	r24, 0x2c	; 44
    5152:	82 60       	ori	r24, 0x02	; 2
    5154:	1b c0       	rjmp	.+54     	; 0x518c <SPI0_Speed+0x8e>
    5156:	8d b5       	in	r24, 0x2d	; 45
    5158:	20 32       	cpi	r18, 0x20	; 32
    515a:	31 05       	cpc	r19, r1
    515c:	41 05       	cpc	r20, r1
    515e:	51 05       	cpc	r21, r1
    5160:	28 f0       	brcs	.+10     	; 0x516c <SPI0_Speed+0x6e>
    5162:	81 60       	ori	r24, 0x01	; 1
    5164:	8d bd       	out	0x2d, r24	; 45
    5166:	8c b5       	in	r24, 0x2c	; 44
    5168:	82 60       	ori	r24, 0x02	; 2
    516a:	1f c0       	rjmp	.+62     	; 0x51aa <SPI0_Speed+0xac>
    516c:	20 31       	cpi	r18, 0x10	; 16
    516e:	31 05       	cpc	r19, r1
    5170:	41 05       	cpc	r20, r1
    5172:	51 05       	cpc	r21, r1
    5174:	10 f0       	brcs	.+4      	; 0x517a <SPI0_Speed+0x7c>
    5176:	8e 7f       	andi	r24, 0xFE	; 254
    5178:	06 c0       	rjmp	.+12     	; 0x5186 <SPI0_Speed+0x88>
    517a:	28 30       	cpi	r18, 0x08	; 8
    517c:	31 05       	cpc	r19, r1
    517e:	41 05       	cpc	r20, r1
    5180:	51 05       	cpc	r21, r1
    5182:	40 f0       	brcs	.+16     	; 0x5194 <SPI0_Speed+0x96>
    5184:	81 60       	ori	r24, 0x01	; 1
    5186:	8d bd       	out	0x2d, r24	; 45
    5188:	8c b5       	in	r24, 0x2c	; 44
    518a:	8d 7f       	andi	r24, 0xFD	; 253
    518c:	8c bd       	out	0x2c, r24	; 44
    518e:	8c b5       	in	r24, 0x2c	; 44
    5190:	81 60       	ori	r24, 0x01	; 1
    5192:	0e c0       	rjmp	.+28     	; 0x51b0 <SPI0_Speed+0xb2>
    5194:	24 30       	cpi	r18, 0x04	; 4
    5196:	31 05       	cpc	r19, r1
    5198:	41 05       	cpc	r20, r1
    519a:	51 05       	cpc	r21, r1
    519c:	10 f0       	brcs	.+4      	; 0x51a2 <SPI0_Speed+0xa4>
    519e:	8e 7f       	andi	r24, 0xFE	; 254
    51a0:	01 c0       	rjmp	.+2      	; 0x51a4 <SPI0_Speed+0xa6>
    51a2:	81 60       	ori	r24, 0x01	; 1
    51a4:	8d bd       	out	0x2d, r24	; 45
    51a6:	8c b5       	in	r24, 0x2c	; 44
    51a8:	8d 7f       	andi	r24, 0xFD	; 253
    51aa:	8c bd       	out	0x2c, r24	; 44
    51ac:	8c b5       	in	r24, 0x2c	; 44
    51ae:	8e 7f       	andi	r24, 0xFE	; 254
    51b0:	8c bd       	out	0x2c, r24	; 44
    51b2:	c0 92 59 17 	sts	0x1759, r12	; 0x801759 <SPI0_Speed_value>
    51b6:	d0 92 5a 17 	sts	0x175A, r13	; 0x80175a <SPI0_Speed_value+0x1>
    51ba:	e0 92 5b 17 	sts	0x175B, r14	; 0x80175b <SPI0_Speed_value+0x2>
    51be:	f0 92 5c 17 	sts	0x175C, r15	; 0x80175c <SPI0_Speed_value+0x3>
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	df 90       	pop	r13
    51c8:	cf 90       	pop	r12
    51ca:	08 95       	ret

000051cc <SPI0_Mode>:
    51cc:	cf 93       	push	r28
    51ce:	df 93       	push	r29
    51d0:	00 d0       	rcall	.+0      	; 0x51d2 <SPI0_Mode+0x6>
    51d2:	00 d0       	rcall	.+0      	; 0x51d4 <SPI0_Mode+0x8>
    51d4:	1f 92       	push	r1
    51d6:	ec 01       	movw	r28, r24
    51d8:	81 30       	cpi	r24, 0x01	; 1
    51da:	91 05       	cpc	r25, r1
    51dc:	71 f0       	breq	.+28     	; 0x51fa <SPI0_Mode+0x2e>
    51de:	2c f4       	brge	.+10     	; 0x51ea <SPI0_Mode+0x1e>
    51e0:	89 2b       	or	r24, r25
    51e2:	c1 f4       	brne	.+48     	; 0x5214 <SPI0_Mode+0x48>
    51e4:	8c b5       	in	r24, 0x2c	; 44
    51e6:	87 7f       	andi	r24, 0xF7	; 247
    51e8:	11 c0       	rjmp	.+34     	; 0x520c <SPI0_Mode+0x40>
    51ea:	82 30       	cpi	r24, 0x02	; 2
    51ec:	91 05       	cpc	r25, r1
    51ee:	61 f0       	breq	.+24     	; 0x5208 <SPI0_Mode+0x3c>
    51f0:	03 97       	sbiw	r24, 0x03	; 3
    51f2:	81 f4       	brne	.+32     	; 0x5214 <SPI0_Mode+0x48>
    51f4:	8c b5       	in	r24, 0x2c	; 44
    51f6:	88 60       	ori	r24, 0x08	; 8
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <SPI0_Mode+0x32>
    51fa:	8c b5       	in	r24, 0x2c	; 44
    51fc:	87 7f       	andi	r24, 0xF7	; 247
    51fe:	8c bd       	out	0x2c, r24	; 44
    5200:	8c b5       	in	r24, 0x2c	; 44
    5202:	84 60       	ori	r24, 0x04	; 4
    5204:	8c bd       	out	0x2c, r24	; 44
    5206:	12 c0       	rjmp	.+36     	; 0x522c <SPI0_Mode+0x60>
    5208:	8c b5       	in	r24, 0x2c	; 44
    520a:	88 60       	ori	r24, 0x08	; 8
    520c:	8c bd       	out	0x2c, r24	; 44
    520e:	8c b5       	in	r24, 0x2c	; 44
    5210:	8b 7f       	andi	r24, 0xFB	; 251
    5212:	f8 cf       	rjmp	.-16     	; 0x5204 <SPI0_Mode+0x38>
    5214:	ed b7       	in	r30, 0x3d	; 61
    5216:	fe b7       	in	r31, 0x3e	; 62
    5218:	d5 83       	std	Z+5, r29	; 0x05
    521a:	c4 83       	std	Z+4, r28	; 0x04
    521c:	84 e1       	ldi	r24, 0x14	; 20
    521e:	93 e0       	ldi	r25, 0x03	; 3
    5220:	a0 e0       	ldi	r26, 0x00	; 0
    5222:	81 83       	std	Z+1, r24	; 0x01
    5224:	92 83       	std	Z+2, r25	; 0x02
    5226:	a3 83       	std	Z+3, r26	; 0x03
    5228:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    522c:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <SPI0_Mode_value+0x1>
    5230:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <SPI0_Mode_value>
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
    5238:	25 96       	adiw	r28, 0x05	; 5
    523a:	e2 e0       	ldi	r30, 0x02	; 2
    523c:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00005240 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5240:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5242:	0d b4       	in	r0, 0x2d	; 45
    5244:	07 fe       	sbrs	r0, 7
    5246:	fd cf       	rjmp	.-6      	; 0x5242 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5248:	8e b5       	in	r24, 0x2e	; 46
}
    524a:	08 95       	ret

0000524c <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    524c:	cf 92       	push	r12
    524e:	df 92       	push	r13
    5250:	ef 92       	push	r14
    5252:	ff 92       	push	r15
    5254:	cf 93       	push	r28
    5256:	df 93       	push	r29
    5258:	1f 92       	push	r1
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
    525e:	6b 01       	movw	r12, r22
    5260:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5262:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5264:	2f 9a       	sbi	0x05, 7	; 5
    5266:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5268:	2d 9a       	sbi	0x05, 5	; 5
    526a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    526c:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    526e:	2c 98       	cbi	0x05, 4	; 5
    5270:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5272:	8c b5       	in	r24, 0x2c	; 44
    5274:	80 61       	ori	r24, 0x10	; 16
    5276:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5278:	8c b5       	in	r24, 0x2c	; 44
    527a:	80 64       	ori	r24, 0x40	; 64
    527c:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    527e:	8d b5       	in	r24, 0x2d	; 45
    5280:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5282:	8e b5       	in	r24, 0x2e	; 46
    5284:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	a0 df       	rcall	.-192    	; 0x51cc <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    528c:	c7 01       	movw	r24, r14
    528e:	b6 01       	movw	r22, r12
    5290:	36 df       	rcall	.-404    	; 0x50fe <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5292:	8f ef       	ldi	r24, 0xFF	; 255
    5294:	d5 df       	rcall	.-86     	; 0x5240 <SPI0_TXRX_Byte>
    5296:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    5298:	df 91       	pop	r29
    529a:	cf 91       	pop	r28
    529c:	ff 90       	pop	r15
    529e:	ef 90       	pop	r14
    52a0:	df 90       	pop	r13
    52a2:	cf 90       	pop	r12
    52a4:	08 95       	ret

000052a6 <SPI0_TX>:
    52a6:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    52a8:	1f 93       	push	r17
    52aa:	cf 93       	push	r28
    52ac:	df 93       	push	r29
    52ae:	8c 01       	movw	r16, r24
    52b0:	eb 01       	movw	r28, r22

    while(count > 0)
    52b2:	1c 16       	cp	r1, r28
    52b4:	1d 06       	cpc	r1, r29
    52b6:	34 f4       	brge	.+12     	; 0x52c4 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    52b8:	f8 01       	movw	r30, r16
    52ba:	81 91       	ld	r24, Z+
    52bc:	8f 01       	movw	r16, r30
    52be:	c0 df       	rcall	.-128    	; 0x5240 <SPI0_TXRX_Byte>
        ++data;
        --count;
    52c0:	21 97       	sbiw	r28, 0x01	; 1
    52c2:	f7 cf       	rjmp	.-18     	; 0x52b2 <SPI0_TX+0xc>
    }
}
    52c4:	df 91       	pop	r29
    52c6:	cf 91       	pop	r28
    52c8:	1f 91       	pop	r17
    52ca:	0f 91       	pop	r16
    52cc:	08 95       	ret

000052ce <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    52ce:	0f 93       	push	r16
    52d0:	1f 93       	push	r17
    52d2:	cf 93       	push	r28
    52d4:	df 93       	push	r29
    52d6:	8c 01       	movw	r16, r24
    52d8:	eb 01       	movw	r28, r22

    while(count > 0)
    52da:	1c 16       	cp	r1, r28
    52dc:	1d 06       	cpc	r1, r29
    52de:	44 f4       	brge	.+16     	; 0x52f0 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    52e0:	f8 01       	movw	r30, r16
    52e2:	80 81       	ld	r24, Z
    52e4:	ad df       	rcall	.-166    	; 0x5240 <SPI0_TXRX_Byte>
    52e6:	f8 01       	movw	r30, r16
    52e8:	81 93       	st	Z+, r24
    52ea:	8f 01       	movw	r16, r30
        ++data;
        --count;
    52ec:	21 97       	sbiw	r28, 0x01	; 1
    52ee:	f5 cf       	rjmp	.-22     	; 0x52da <SPI0_TXRX+0xc>
    }
}
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	08 95       	ret

000052fa <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    52fa:	0f 93       	push	r16
    52fc:	1f 93       	push	r17
    52fe:	cf 93       	push	r28
    5300:	df 93       	push	r29
    5302:	8c 01       	movw	r16, r24
    5304:	eb 01       	movw	r28, r22

    while(count > 0)
    5306:	1c 16       	cp	r1, r28
    5308:	1d 06       	cpc	r1, r29
    530a:	3c f4       	brge	.+14     	; 0x531a <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    530c:	8f ef       	ldi	r24, 0xFF	; 255
    530e:	98 df       	rcall	.-208    	; 0x5240 <SPI0_TXRX_Byte>
    5310:	f8 01       	movw	r30, r16
    5312:	81 93       	st	Z+, r24
    5314:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5316:	21 97       	sbiw	r28, 0x01	; 1
    5318:	f6 cf       	rjmp	.-20     	; 0x5306 <SPI0_RX+0xc>
    }
}
    531a:	df 91       	pop	r29
    531c:	cf 91       	pop	r28
    531e:	1f 91       	pop	r17
    5320:	0f 91       	pop	r16
    5322:	08 95       	ret

00005324 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5324:	2f b7       	in	r18, 0x3f	; 63
    5326:	80 91 4e 1b 	lds	r24, 0x1B4E	; 0x801b4e <i2c+0x1>
    532a:	81 11       	cpse	r24, r1
    532c:	04 c0       	rjmp	.+8      	; 0x5336 <i2c_timer+0x12>
    532e:	80 91 4f 1b 	lds	r24, 0x1B4F	; 0x801b4f <i2c+0x2>
    5332:	81 11       	cpse	r24, r1
    5334:	0b c0       	rjmp	.+22     	; 0x534c <i2c_timer+0x28>
    5336:	80 91 51 1b 	lds	r24, 0x1B51	; 0x801b51 <i2c+0x4>
    533a:	90 91 52 1b 	lds	r25, 0x1B52	; 0x801b52 <i2c+0x5>
    533e:	00 97       	sbiw	r24, 0x00	; 0
    5340:	29 f0       	breq	.+10     	; 0x534c <i2c_timer+0x28>
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	90 93 52 1b 	sts	0x1B52, r25	; 0x801b52 <i2c+0x5>
    5348:	80 93 51 1b 	sts	0x1B51, r24	; 0x801b51 <i2c+0x4>
    534c:	2f bf       	out	0x3f, r18	; 63
    534e:	08 95       	ret

00005350 <i2c_check_op>:
    5350:	ad b7       	in	r26, 0x3d	; 61
    5352:	be b7       	in	r27, 0x3e	; 62
    5354:	17 97       	sbiw	r26, 0x07	; 7
    5356:	0f b6       	in	r0, 0x3f	; 63
    5358:	f8 94       	cli
    535a:	be bf       	out	0x3e, r27	; 62
    535c:	0f be       	out	0x3f, r0	; 63
    535e:	ad bf       	out	0x3d, r26	; 61
    5360:	28 2f       	mov	r18, r24
    5362:	08 2e       	mov	r0, r24
    5364:	00 0c       	add	r0, r0
    5366:	33 0b       	sbc	r19, r19
    5368:	80 31       	cpi	r24, 0x10	; 16
    536a:	88 f0       	brcs	.+34     	; 0x538e <i2c_check_op+0x3e>
    536c:	80 e1       	ldi	r24, 0x10	; 16
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	ed b7       	in	r30, 0x3d	; 61
    5372:	fe b7       	in	r31, 0x3e	; 62
    5374:	97 83       	std	Z+7, r25	; 0x07
    5376:	86 83       	std	Z+6, r24	; 0x06
    5378:	35 83       	std	Z+5, r19	; 0x05
    537a:	24 83       	std	Z+4, r18	; 0x04
    537c:	89 e2       	ldi	r24, 0x29	; 41
    537e:	94 e0       	ldi	r25, 0x04	; 4
    5380:	a0 e0       	ldi	r26, 0x00	; 0
    5382:	81 83       	std	Z+1, r24	; 0x01
    5384:	92 83       	std	Z+2, r25	; 0x02
    5386:	a3 83       	std	Z+3, r26	; 0x03
    5388:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    538c:	24 c0       	rjmp	.+72     	; 0x53d6 <i2c_check_op+0x86>
    538e:	f9 01       	movw	r30, r18
    5390:	ee 0f       	add	r30, r30
    5392:	ff 1f       	adc	r31, r31
    5394:	e2 5a       	subi	r30, 0xA2	; 162
    5396:	f8 4e       	sbci	r31, 0xE8	; 232
    5398:	01 90       	ld	r0, Z+
    539a:	f0 81       	ld	r31, Z
    539c:	e0 2d       	mov	r30, r0
    539e:	30 97       	sbiw	r30, 0x00	; 0
    53a0:	d1 f0       	breq	.+52     	; 0x53d6 <i2c_check_op+0x86>
    53a2:	80 85       	ldd	r24, Z+8	; 0x08
    53a4:	91 85       	ldd	r25, Z+9	; 0x09
    53a6:	89 2b       	or	r24, r25
    53a8:	39 f4       	brne	.+14     	; 0x53b8 <i2c_check_op+0x68>
    53aa:	ed b7       	in	r30, 0x3d	; 61
    53ac:	fe b7       	in	r31, 0x3e	; 62
    53ae:	35 83       	std	Z+5, r19	; 0x05
    53b0:	24 83       	std	Z+4, r18	; 0x04
    53b2:	80 e1       	ldi	r24, 0x10	; 16
    53b4:	94 e0       	ldi	r25, 0x04	; 4
    53b6:	09 c0       	rjmp	.+18     	; 0x53ca <i2c_check_op+0x7a>
    53b8:	86 81       	ldd	r24, Z+6	; 0x06
    53ba:	81 11       	cpse	r24, r1
    53bc:	0e c0       	rjmp	.+28     	; 0x53da <i2c_check_op+0x8a>
    53be:	ed b7       	in	r30, 0x3d	; 61
    53c0:	fe b7       	in	r31, 0x3e	; 62
    53c2:	35 83       	std	Z+5, r19	; 0x05
    53c4:	24 83       	std	Z+4, r18	; 0x04
    53c6:	8a ef       	ldi	r24, 0xFA	; 250
    53c8:	93 e0       	ldi	r25, 0x03	; 3
    53ca:	a0 e0       	ldi	r26, 0x00	; 0
    53cc:	81 83       	std	Z+1, r24	; 0x01
    53ce:	92 83       	std	Z+2, r25	; 0x02
    53d0:	a3 83       	std	Z+3, r26	; 0x03
    53d2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    53d6:	80 e0       	ldi	r24, 0x00	; 0
    53d8:	01 c0       	rjmp	.+2      	; 0x53dc <i2c_check_op+0x8c>
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	ad b7       	in	r26, 0x3d	; 61
    53de:	be b7       	in	r27, 0x3e	; 62
    53e0:	17 96       	adiw	r26, 0x07	; 7
    53e2:	0f b6       	in	r0, 0x3f	; 63
    53e4:	f8 94       	cli
    53e6:	be bf       	out	0x3e, r27	; 62
    53e8:	0f be       	out	0x3f, r0	; 63
    53ea:	ad bf       	out	0x3d, r26	; 61
    53ec:	08 95       	ret

000053ee <i2c_task_init>:
    53ee:	8f b7       	in	r24, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	ee e5       	ldi	r30, 0x5E	; 94
    53f4:	f7 e1       	ldi	r31, 0x17	; 23
    53f6:	11 92       	st	Z+, r1
    53f8:	11 92       	st	Z+, r1
    53fa:	97 e1       	ldi	r25, 0x17	; 23
    53fc:	ee 37       	cpi	r30, 0x7E	; 126
    53fe:	f9 07       	cpc	r31, r25
    5400:	d1 f7       	brne	.-12     	; 0x53f6 <i2c_task_init+0x8>
    5402:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    5406:	91 e0       	ldi	r25, 0x01	; 1
    5408:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <i2c_task+0x2>
    540c:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>
    5410:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
    5414:	8f bf       	out	0x3f, r24	; 63
    5416:	08 95       	ret

00005418 <i2c_task_op_add>:
    5418:	ef 92       	push	r14
    541a:	ff 92       	push	r15
    541c:	0f 93       	push	r16
    541e:	1f 93       	push	r17
    5420:	cf 93       	push	r28
    5422:	df 93       	push	r29
    5424:	d8 2f       	mov	r29, r24
    5426:	c6 2f       	mov	r28, r22
    5428:	7a 01       	movw	r14, r20
    542a:	02 2f       	mov	r16, r18
    542c:	1f b7       	in	r17, 0x3f	; 63
    542e:	6a e0       	ldi	r22, 0x0A	; 10
    5430:	70 e0       	ldi	r23, 0x00	; 0
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	a8 db       	rcall	.-2224   	; 0x4b88 <safecalloc>
    5438:	fc 01       	movw	r30, r24
    543a:	89 2b       	or	r24, r25
    543c:	89 f0       	breq	.+34     	; 0x5460 <i2c_task_op_add+0x48>
    543e:	f8 94       	cli
    5440:	11 82       	std	Z+1, r1	; 0x01
    5442:	12 82       	std	Z+2, r1	; 0x02
    5444:	dd 0f       	add	r29, r29
    5446:	c1 70       	andi	r28, 0x01	; 1
    5448:	cd 2b       	or	r28, r29
    544a:	c0 83       	st	Z, r28
    544c:	8a e0       	ldi	r24, 0x0A	; 10
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	95 83       	std	Z+5, r25	; 0x05
    5452:	84 83       	std	Z+4, r24	; 0x04
    5454:	13 82       	std	Z+3, r1	; 0x03
    5456:	06 83       	std	Z+6, r16	; 0x06
    5458:	17 82       	std	Z+7, r1	; 0x07
    545a:	f1 86       	std	Z+9, r15	; 0x09
    545c:	e0 86       	std	Z+8, r14	; 0x08
    545e:	1f bf       	out	0x3f, r17	; 63
    5460:	cf 01       	movw	r24, r30
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
    5466:	e6 e0       	ldi	r30, 0x06	; 6
    5468:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0000546c <i2c_init>:
    546c:	cf 93       	push	r28
    546e:	00 d0       	rcall	.+0      	; 0x5470 <i2c_init+0x4>
    5470:	1f 92       	push	r1
    5472:	9b 01       	movw	r18, r22
    5474:	ac 01       	movw	r20, r24
    5476:	cf b7       	in	r28, 0x3f	; 63
    5478:	60 e0       	ldi	r22, 0x00	; 0
    547a:	7d e2       	ldi	r23, 0x2D	; 45
    547c:	81 e3       	ldi	r24, 0x31	; 49
    547e:	91 e0       	ldi	r25, 0x01	; 1
    5480:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    5484:	da 01       	movw	r26, r20
    5486:	c9 01       	movw	r24, r18
    5488:	40 97       	sbiw	r24, 0x10	; 16
    548a:	a1 09       	sbc	r26, r1
    548c:	b1 09       	sbc	r27, r1
    548e:	ac 01       	movw	r20, r24
    5490:	bd 01       	movw	r22, r26
    5492:	76 95       	lsr	r23
    5494:	67 95       	ror	r22
    5496:	57 95       	ror	r21
    5498:	47 95       	ror	r20
    549a:	ca 01       	movw	r24, r20
    549c:	88 27       	eor	r24, r24
    549e:	89 2b       	or	r24, r25
    54a0:	59 f0       	breq	.+22     	; 0x54b8 <i2c_init+0x4c>
    54a2:	8e ed       	ldi	r24, 0xDE	; 222
    54a4:	93 e0       	ldi	r25, 0x03	; 3
    54a6:	a0 e0       	ldi	r26, 0x00	; 0
    54a8:	ed b7       	in	r30, 0x3d	; 61
    54aa:	fe b7       	in	r31, 0x3e	; 62
    54ac:	81 83       	std	Z+1, r24	; 0x01
    54ae:	92 83       	std	Z+2, r25	; 0x02
    54b0:	a3 83       	std	Z+3, r26	; 0x03
    54b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    54b6:	3a c0       	rjmp	.+116    	; 0x552c <i2c_init+0xc0>
    54b8:	f8 94       	cli
    54ba:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    54be:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
    54c8:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    54cc:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
    54d0:	40 9a       	sbi	0x08, 0	; 8
    54d2:	41 9a       	sbi	0x08, 1	; 8
    54d4:	84 e8       	ldi	r24, 0x84	; 132
    54d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54da:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    54de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54e2:	8c 7f       	andi	r24, 0xFC	; 252
    54e4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54e8:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <i2c_init_status>
    54ec:	81 11       	cpse	r24, r1
    54ee:	1d c0       	rjmp	.+58     	; 0x552a <i2c_init+0xbe>
    54f0:	ee e5       	ldi	r30, 0x5E	; 94
    54f2:	f7 e1       	ldi	r31, 0x17	; 23
    54f4:	11 92       	st	Z+, r1
    54f6:	11 92       	st	Z+, r1
    54f8:	27 e1       	ldi	r18, 0x17	; 23
    54fa:	ee 37       	cpi	r30, 0x7E	; 126
    54fc:	f2 07       	cpc	r31, r18
    54fe:	d1 f7       	brne	.-12     	; 0x54f4 <i2c_init+0x88>
    5500:	61 e0       	ldi	r22, 0x01	; 1
    5502:	70 e0       	ldi	r23, 0x00	; 0
    5504:	82 e9       	ldi	r24, 0x92	; 146
    5506:	99 e2       	ldi	r25, 0x29	; 41
    5508:	0e 94 c6 32 	call	0x658c	; 0x658c <set_timers>
    550c:	01 96       	adiw	r24, 0x01	; 1
    550e:	51 f4       	brne	.+20     	; 0x5524 <i2c_init+0xb8>
    5510:	87 ec       	ldi	r24, 0xC7	; 199
    5512:	93 e0       	ldi	r25, 0x03	; 3
    5514:	a0 e0       	ldi	r26, 0x00	; 0
    5516:	ed b7       	in	r30, 0x3d	; 61
    5518:	fe b7       	in	r31, 0x3e	; 62
    551a:	81 83       	std	Z+1, r24	; 0x01
    551c:	92 83       	std	Z+2, r25	; 0x02
    551e:	a3 83       	std	Z+3, r26	; 0x03
    5520:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <i2c_init_status>
    552a:	cf bf       	out	0x3f, r28	; 63
    552c:	0f 90       	pop	r0
    552e:	0f 90       	pop	r0
    5530:	0f 90       	pop	r0
    5532:	cf 91       	pop	r28
    5534:	08 95       	ret

00005536 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5536:	61 e0       	ldi	r22, 0x01	; 1
    5538:	70 e0       	ldi	r23, 0x00	; 0
    553a:	80 e0       	ldi	r24, 0x00	; 0
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	a5 db       	rcall	.-2230   	; 0x4c8a <delayus>
	if(!i2c.enable || i2c.done )
    5540:	80 91 4e 1b 	lds	r24, 0x1B4E	; 0x801b4e <i2c+0x1>
    5544:	88 23       	and	r24, r24
    5546:	39 f0       	breq	.+14     	; 0x5556 <i2c_done+0x20>
		return(1);
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 91 4f 1b 	lds	r25, 0x1B4F	; 0x801b4f <i2c+0x2>
    554e:	91 11       	cpse	r25, r1
    5550:	03 c0       	rjmp	.+6      	; 0x5558 <i2c_done+0x22>
    5552:	80 e0       	ldi	r24, 0x00	; 0
    5554:	08 95       	ret
    5556:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5558:	08 95       	ret

0000555a <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    555a:	61 e0       	ldi	r22, 0x01	; 1
    555c:	70 e0       	ldi	r23, 0x00	; 0
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	93 db       	rcall	.-2266   	; 0x4c8a <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5564:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    5568:	88 23       	and	r24, r24
    556a:	39 f0       	breq	.+14     	; 0x557a <i2c_task_done+0x20>
		return(1);
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <i2c_task+0x2>
    5572:	91 11       	cpse	r25, r1
    5574:	03 c0       	rjmp	.+6      	; 0x557c <i2c_task_done+0x22>
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	08 95       	ret
    557a:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    557c:	08 95       	ret

0000557e <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    557e:	ed e4       	ldi	r30, 0x4D	; 77
    5580:	fb e1       	ldi	r31, 0x1B	; 27
    5582:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5588:	8a e0       	ldi	r24, 0x0A	; 10
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	95 83       	std	Z+5, r25	; 0x05
    558e:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5590:	85 ea       	ldi	r24, 0xA5	; 165
    5592:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5596:	08 95       	ret

00005598 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5598:	ef 92       	push	r14
    559a:	ff 92       	push	r15
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
	uint8_t sreg = SREG;
    55a4:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    55a6:	f8 94       	cli
	i2c_task.done = 0;
    55a8:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>
	i2c_task.error = 0;
    55ac:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
	i2c_task.ind = 0;
    55b0:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55b4:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    55b6:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    55b8:	ee 24       	eor	r14, r14
    55ba:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    55bc:	0a e0       	ldi	r16, 0x0A	; 10
    55be:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55c0:	8c 2f       	mov	r24, r28
    55c2:	c6 de       	rcall	.-628    	; 0x5350 <i2c_check_op>
    55c4:	88 23       	and	r24, r24
    55c6:	d1 f0       	breq	.+52     	; 0x55fc <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    55c8:	ec 2f       	mov	r30, r28
    55ca:	ee 0f       	add	r30, r30
    55cc:	ff 0b       	sbc	r31, r31
    55ce:	e2 5a       	subi	r30, 0xA2	; 162
    55d0:	f8 4e       	sbci	r31, 0xE8	; 232
    55d2:	01 90       	ld	r0, Z+
    55d4:	f0 81       	ld	r31, Z
    55d6:	e0 2d       	mov	r30, r0
		o->enable = 1;
    55d8:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    55da:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    55dc:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    55de:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    55e0:	15 83       	std	Z+5, r17	; 0x05
    55e2:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    55e4:	d1 11       	cpse	r29, r1
    55e6:	07 c0       	rjmp	.+14     	; 0x55f6 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    55e8:	8a e0       	ldi	r24, 0x0A	; 10
    55ea:	ad e4       	ldi	r26, 0x4D	; 77
    55ec:	bb e1       	ldi	r27, 0x1B	; 27
    55ee:	01 90       	ld	r0, Z+
    55f0:	0d 92       	st	X+, r0
    55f2:	8a 95       	dec	r24
    55f4:	e1 f7       	brne	.-8      	; 0x55ee <i2c_task_run+0x56>
    55f6:	cf 5f       	subi	r28, 0xFF	; 255
    55f8:	d1 e0       	ldi	r29, 0x01	; 1
    55fa:	e2 cf       	rjmp	.-60     	; 0x55c0 <i2c_task_run+0x28>
		}
	}

	if(run)
    55fc:	dd 23       	and	r29, r29
    55fe:	91 f0       	breq	.+36     	; 0x5624 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5600:	89 e6       	ldi	r24, 0x69	; 105
    5602:	9b e2       	ldi	r25, 0x2B	; 43
    5604:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <i2c_callback+0x1>
    5608:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <i2c_callback>

		i2c_task.enable = 1;
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <i2c_task>
		i2c_task.done = 0;
    5612:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5616:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    561a:	8c 7f       	andi	r24, 0xFC	; 252
    561c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5620:	ae df       	rcall	.-164    	; 0x557e <i2c_send_start>
    5622:	15 c0       	rjmp	.+42     	; 0x564e <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5624:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    5628:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    562c:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5636:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
        i2c.enable = 0;
    563a:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    563e:	84 e8       	ldi	r24, 0x84	; 132
    5640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5644:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5648:	8c 7f       	andi	r24, 0xFC	; 252
    564a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    564e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5652:	ff be       	out	0x3f, r15	; 63

}
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
    5658:	e6 e0       	ldi	r30, 0x06	; 6
    565a:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0000565e <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    565e:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5660:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5662:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    5666:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

	i2c.enable = 1; // Enabled
    566a:	31 e0       	ldi	r19, 0x01	; 1
    566c:	30 93 4e 1b 	sts	0x1B4E, r19	; 0x801b4e <i2c+0x1>
	i2c.done = 0;
    5670:	10 92 4f 1b 	sts	0x1B4F, r1	; 0x801b4f <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5674:	88 0f       	add	r24, r24
    5676:	61 70       	andi	r22, 0x01	; 1
    5678:	68 2b       	or	r22, r24
    567a:	60 93 4d 1b 	sts	0x1B4D, r22	; 0x801b4d <i2c>
	i2c.flags = 0;
    567e:	10 92 50 1b 	sts	0x1B50, r1	; 0x801b50 <i2c+0x3>
    i2c.len = len;
    5682:	20 93 53 1b 	sts	0x1B53, r18	; 0x801b53 <i2c+0x6>
    i2c.ind = 0;
    5686:	10 92 54 1b 	sts	0x1B54, r1	; 0x801b54 <i2c+0x7>
    i2c.buf = buf;
    568a:	50 93 56 1b 	sts	0x1B56, r21	; 0x801b56 <i2c+0x9>
    568e:	40 93 55 1b 	sts	0x1B55, r20	; 0x801b55 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5692:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5696:	8c 7f       	andi	r24, 0xFC	; 252
    5698:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    569c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    56a0:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    56a2:	6d df       	rcall	.-294    	; 0x557e <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    56a4:	48 df       	rcall	.-368    	; 0x5536 <i2c_done>
    56a6:	88 23       	and	r24, r24
    56a8:	e9 f3       	breq	.-6      	; 0x56a4 <i2c_fn+0x46>
    56aa:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    56ac:	90 91 50 1b 	lds	r25, 0x1B50	; 0x801b50 <i2c+0x3>
    56b0:	91 11       	cpse	r25, r1
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	08 95       	ret

000056b6 <i2c_send_stop>:
}
    56b6:	ed e4       	ldi	r30, 0x4D	; 77
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    56b8:	fb e1       	ldi	r31, 0x1B	; 27
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    56be:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    56c0:	84 e9       	ldi	r24, 0x94	; 148
    56c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    56c6:	6a e0       	ldi	r22, 0x0A	; 10
    56c8:	70 e0       	ldi	r23, 0x00	; 0
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	dd ca       	rjmp	.-2630   	; 0x4c8a <delayus>
    56d0:	08 95       	ret

000056d2 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    56d6:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    56da:	88 23       	and	r24, r24
    56dc:	09 f4       	brne	.+2      	; 0x56e0 <i2c_task_next_op+0xe>
    56de:	46 c0       	rjmp	.+140    	; 0x576c <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    56e0:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    56e4:	35 de       	rcall	.-918    	; 0x5350 <i2c_check_op>
    56e6:	88 23       	and	r24, r24
    56e8:	b1 f0       	breq	.+44     	; 0x5716 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    56ea:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    56ee:	ee 0f       	add	r30, r30
    56f0:	ff 0b       	sbc	r31, r31
    56f2:	e2 5a       	subi	r30, 0xA2	; 162
    56f4:	f8 4e       	sbci	r31, 0xE8	; 232
    56f6:	c0 81       	ld	r28, Z
    56f8:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    56fa:	8a e0       	ldi	r24, 0x0A	; 10
    56fc:	ed e4       	ldi	r30, 0x4D	; 77
    56fe:	fb e1       	ldi	r31, 0x1B	; 27
    5700:	de 01       	movw	r26, r28
    5702:	01 90       	ld	r0, Z+
    5704:	0d 92       	st	X+, r0
    5706:	8a 95       	dec	r24
    5708:	e1 f7       	brne	.-8      	; 0x5702 <i2c_task_next_op+0x30>
			if(o->flags)
    570a:	8b 81       	ldd	r24, Y+3	; 0x03
    570c:	88 23       	and	r24, r24
    570e:	19 f0       	breq	.+6      	; 0x5716 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5716:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    571a:	8f 5f       	subi	r24, 0xFF	; 255
    571c:	19 de       	rcall	.-974    	; 0x5350 <i2c_check_op>
    571e:	88 23       	and	r24, r24
    5720:	29 f1       	breq	.+74     	; 0x576c <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5722:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5726:	ef 5f       	subi	r30, 0xFF	; 255
    5728:	e0 93 7f 17 	sts	0x177F, r30	; 0x80177f <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    572c:	ee 0f       	add	r30, r30
    572e:	ff 0b       	sbc	r31, r31
    5730:	e2 5a       	subi	r30, 0xA2	; 162
    5732:	f8 4e       	sbci	r31, 0xE8	; 232
    5734:	01 90       	ld	r0, Z+
    5736:	f0 81       	ld	r31, Z
    5738:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    573a:	81 81       	ldd	r24, Z+1	; 0x01
    573c:	81 30       	cpi	r24, 0x01	; 1
    573e:	19 f0       	breq	.+6      	; 0x5746 <i2c_task_next_op+0x74>
    5740:	82 81       	ldd	r24, Z+2	; 0x02
    5742:	81 11       	cpse	r24, r1
    5744:	13 c0       	rjmp	.+38     	; 0x576c <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5746:	8a e0       	ldi	r24, 0x0A	; 10
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	95 83       	std	Z+5, r25	; 0x05
    574c:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    574e:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5750:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5756:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5758:	8a e0       	ldi	r24, 0x0A	; 10
    575a:	ad e4       	ldi	r26, 0x4D	; 77
    575c:	bb e1       	ldi	r27, 0x1B	; 27
    575e:	01 90       	ld	r0, Z+
    5760:	0d 92       	st	X+, r0
    5762:	8a 95       	dec	r24

				i2c_send_start();
    5764:	e1 f7       	brne	.-8      	; 0x575e <i2c_task_next_op+0x8c>
    5766:	0b df       	rcall	.-490    	; 0x557e <i2c_send_start>

				return(1);
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	0f c0       	rjmp	.+30     	; 0x578a <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    576c:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
	i2c_task.done = 1;
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5776:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
	i2c.enable = 0;
    577a:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
	i2c.flags = 0;
    577e:	10 92 50 1b 	sts	0x1B50, r1	; 0x801b50 <i2c+0x3>
	i2c.ind = 0;
    5782:	10 92 54 1b 	sts	0x1B54, r1	; 0x801b54 <i2c+0x7>

	i2c_send_stop();
    5786:	97 df       	rcall	.-210    	; 0x56b6 <i2c_send_stop>

	return(0);
    5788:	80 e0       	ldi	r24, 0x00	; 0
}
    578a:	df 91       	pop	r29
    578c:	cf 91       	pop	r28
    578e:	08 95       	ret

00005790 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5790:	e0 91 82 17 	lds	r30, 0x1782	; 0x801782 <i2c_callback>
    5794:	f0 91 83 17 	lds	r31, 0x1783	; 0x801783 <i2c_callback+0x1>
    5798:	30 97       	sbiw	r30, 0x00	; 0
    579a:	11 f0       	breq	.+4      	; 0x57a0 <i2c_next+0x10>
	    i2c_callback();
    579c:	09 95       	icall
    579e:	08 95       	ret
	else
		i2c_send_stop();
    57a0:	8a cf       	rjmp	.-236    	; 0x56b6 <i2c_send_stop>
    57a2:	08 95       	ret

000057a4 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    57a4:	1f 92       	push	r1
    57a6:	0f 92       	push	r0
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	0f 92       	push	r0
    57ac:	11 24       	eor	r1, r1
    57ae:	0b b6       	in	r0, 0x3b	; 59
    57b0:	0f 92       	push	r0
    57b2:	2f 93       	push	r18
    57b4:	3f 93       	push	r19
    57b6:	4f 93       	push	r20
    57b8:	5f 93       	push	r21
    57ba:	6f 93       	push	r22
    57bc:	7f 93       	push	r23
    57be:	8f 93       	push	r24
    57c0:	9f 93       	push	r25
    57c2:	af 93       	push	r26
    57c4:	bf 93       	push	r27
    57c6:	ef 93       	push	r30
    57c8:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    57ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    57ce:	90 91 4e 1b 	lds	r25, 0x1B4E	; 0x801b4e <i2c+0x1>
    57d2:	99 23       	and	r25, r25
    57d4:	09 f1       	breq	.+66     	; 0x5818 <__vector_26+0x74>
    57d6:	90 91 4f 1b 	lds	r25, 0x1B4F	; 0x801b4f <i2c+0x2>
    57da:	91 11       	cpse	r25, r1
    57dc:	1d c0       	rjmp	.+58     	; 0x5818 <__vector_26+0x74>
    57de:	20 91 55 1b 	lds	r18, 0x1B55	; 0x801b55 <i2c+0x8>
    57e2:	30 91 56 1b 	lds	r19, 0x1B56	; 0x801b56 <i2c+0x9>
    57e6:	21 15       	cp	r18, r1
    57e8:	31 05       	cpc	r19, r1
    57ea:	b1 f0       	breq	.+44     	; 0x5818 <__vector_26+0x74>
    57ec:	90 91 53 1b 	lds	r25, 0x1B53	; 0x801b53 <i2c+0x6>
    57f0:	99 23       	and	r25, r25
    57f2:	91 f0       	breq	.+36     	; 0x5818 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    57f4:	40 91 51 1b 	lds	r20, 0x1B51	; 0x801b51 <i2c+0x4>
    57f8:	50 91 52 1b 	lds	r21, 0x1B52	; 0x801b52 <i2c+0x5>
    57fc:	45 2b       	or	r20, r21
    57fe:	71 f4       	brne	.+28     	; 0x581c <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5800:	80 91 50 1b 	lds	r24, 0x1B50	; 0x801b50 <i2c+0x3>
    5804:	81 60       	ori	r24, 0x01	; 1
    5806:	80 93 50 1b 	sts	0x1B50, r24	; 0x801b50 <i2c+0x3>
		i2c_task.enable = 0;
    580a:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
		i2c_task.error = 1;
    5814:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		i2c_send_stop();
    5818:	4e df       	rcall	.-356    	; 0x56b6 <i2c_send_stop>
		return;
    581a:	9b c0       	rjmp	.+310    	; 0x5952 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    581c:	88 7f       	andi	r24, 0xF8	; 248
    581e:	80 33       	cpi	r24, 0x30	; 48
    5820:	09 f4       	brne	.+2      	; 0x5824 <__vector_26+0x80>
    5822:	83 c0       	rjmp	.+262    	; 0x592a <__vector_26+0x186>
    5824:	70 f4       	brcc	.+28     	; 0x5842 <__vector_26+0x9e>
    5826:	88 31       	cpi	r24, 0x18	; 24
    5828:	09 f1       	breq	.+66     	; 0x586c <__vector_26+0xc8>
    582a:	28 f4       	brcc	.+10     	; 0x5836 <__vector_26+0x92>
    582c:	88 30       	cpi	r24, 0x08	; 8
    582e:	c9 f0       	breq	.+50     	; 0x5862 <__vector_26+0xbe>
    5830:	80 31       	cpi	r24, 0x10	; 16
    5832:	b9 f0       	breq	.+46     	; 0x5862 <__vector_26+0xbe>
    5834:	83 c0       	rjmp	.+262    	; 0x593c <__vector_26+0x198>
    5836:	80 32       	cpi	r24, 0x20	; 32
    5838:	09 f4       	brne	.+2      	; 0x583c <__vector_26+0x98>
    583a:	65 c0       	rjmp	.+202    	; 0x5906 <__vector_26+0x162>
    583c:	88 32       	cpi	r24, 0x28	; 40
    583e:	b1 f0       	breq	.+44     	; 0x586c <__vector_26+0xc8>
    5840:	7d c0       	rjmp	.+250    	; 0x593c <__vector_26+0x198>
    5842:	88 34       	cpi	r24, 0x48	; 72
    5844:	09 f4       	brne	.+2      	; 0x5848 <__vector_26+0xa4>
    5846:	68 c0       	rjmp	.+208    	; 0x5918 <__vector_26+0x174>
    5848:	38 f4       	brcc	.+14     	; 0x5858 <__vector_26+0xb4>
    584a:	88 33       	cpi	r24, 0x38	; 56
    584c:	09 f4       	brne	.+2      	; 0x5850 <__vector_26+0xac>
    584e:	57 c0       	rjmp	.+174    	; 0x58fe <__vector_26+0x15a>
    5850:	80 34       	cpi	r24, 0x40	; 64
    5852:	09 f4       	brne	.+2      	; 0x5856 <__vector_26+0xb2>
    5854:	42 c0       	rjmp	.+132    	; 0x58da <__vector_26+0x136>
    5856:	72 c0       	rjmp	.+228    	; 0x593c <__vector_26+0x198>
    5858:	80 35       	cpi	r24, 0x50	; 80
    585a:	79 f1       	breq	.+94     	; 0x58ba <__vector_26+0x116>
    585c:	88 35       	cpi	r24, 0x58	; 88
    585e:	b9 f0       	breq	.+46     	; 0x588e <__vector_26+0xea>
    5860:	6d c0       	rjmp	.+218    	; 0x593c <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5862:	10 92 54 1b 	sts	0x1B54, r1	; 0x801b54 <i2c+0x7>
			TWDR = i2c.address;
    5866:	80 91 4d 1b 	lds	r24, 0x1B4D	; 0x801b4d <i2c>
    586a:	0e c0       	rjmp	.+28     	; 0x5888 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    586c:	80 91 54 1b 	lds	r24, 0x1B54	; 0x801b54 <i2c+0x7>
    5870:	89 17       	cp	r24, r25
    5872:	ec f4       	brge	.+58     	; 0x58ae <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5874:	91 e0       	ldi	r25, 0x01	; 1
    5876:	98 0f       	add	r25, r24
    5878:	90 93 54 1b 	sts	0x1B54, r25	; 0x801b54 <i2c+0x7>
    587c:	f9 01       	movw	r30, r18
    587e:	e8 0f       	add	r30, r24
    5880:	f1 1d       	adc	r31, r1
    5882:	87 fd       	sbrc	r24, 7
    5884:	fa 95       	dec	r31
    5886:	80 81       	ld	r24, Z
    5888:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    588c:	36 c0       	rjmp	.+108    	; 0x58fa <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    588e:	80 91 54 1b 	lds	r24, 0x1B54	; 0x801b54 <i2c+0x7>
    5892:	89 17       	cp	r24, r25
    5894:	64 f4       	brge	.+24     	; 0x58ae <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5896:	91 e0       	ldi	r25, 0x01	; 1
    5898:	98 0f       	add	r25, r24
    589a:	90 93 54 1b 	sts	0x1B54, r25	; 0x801b54 <i2c+0x7>
    589e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58a2:	f9 01       	movw	r30, r18
    58a4:	e8 0f       	add	r30, r24
    58a6:	f1 1d       	adc	r31, r1
    58a8:	87 fd       	sbrc	r24, 7
    58aa:	fa 95       	dec	r31
    58ac:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
				i2c.enable = 0;
    58b4:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
    58b8:	4b c0       	rjmp	.+150    	; 0x5950 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    58ba:	80 91 54 1b 	lds	r24, 0x1B54	; 0x801b54 <i2c+0x7>
    58be:	89 17       	cp	r24, r25
    58c0:	64 f4       	brge	.+24     	; 0x58da <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    58c2:	91 e0       	ldi	r25, 0x01	; 1
    58c4:	98 0f       	add	r25, r24
    58c6:	90 93 54 1b 	sts	0x1B54, r25	; 0x801b54 <i2c+0x7>
    58ca:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58ce:	f9 01       	movw	r30, r18
    58d0:	e8 0f       	add	r30, r24
    58d2:	f1 1d       	adc	r31, r1
    58d4:	87 fd       	sbrc	r24, 7
    58d6:	fa 95       	dec	r31
    58d8:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    58da:	80 91 54 1b 	lds	r24, 0x1B54	; 0x801b54 <i2c+0x7>
    58de:	08 2e       	mov	r0, r24
    58e0:	00 0c       	add	r0, r0
    58e2:	99 0b       	sbc	r25, r25
    58e4:	01 96       	adiw	r24, 0x01	; 1
    58e6:	20 91 53 1b 	lds	r18, 0x1B53	; 0x801b53 <i2c+0x6>
    58ea:	02 2e       	mov	r0, r18
    58ec:	00 0c       	add	r0, r0
    58ee:	33 0b       	sbc	r19, r19
    58f0:	82 17       	cp	r24, r18
    58f2:	93 07       	cpc	r25, r19
    58f4:	14 f4       	brge	.+4      	; 0x58fa <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    58f6:	85 ec       	ldi	r24, 0xC5	; 197
    58f8:	03 c0       	rjmp	.+6      	; 0x5900 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    58fa:	85 e8       	ldi	r24, 0x85	; 133
    58fc:	01 c0       	rjmp	.+2      	; 0x5900 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    58fe:	85 ea       	ldi	r24, 0xA5	; 165
    5900:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5904:	26 c0       	rjmp	.+76     	; 0x5952 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
			i2c.enable = 0;
    590c:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5910:	80 91 50 1b 	lds	r24, 0x1B50	; 0x801b50 <i2c+0x3>
    5914:	88 60       	ori	r24, 0x08	; 8
    5916:	1a c0       	rjmp	.+52     	; 0x594c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
			i2c.enable = 0;
    591e:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5922:	80 91 50 1b 	lds	r24, 0x1B50	; 0x801b50 <i2c+0x3>
    5926:	80 61       	ori	r24, 0x10	; 16
    5928:	11 c0       	rjmp	.+34     	; 0x594c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
			i2c.enable = 0;
    5930:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5934:	80 91 50 1b 	lds	r24, 0x1B50	; 0x801b50 <i2c+0x3>
    5938:	80 62       	ori	r24, 0x20	; 32
    593a:	08 c0       	rjmp	.+16     	; 0x594c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <i2c+0x2>
			i2c.enable = 0;
    5942:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5946:	80 91 50 1b 	lds	r24, 0x1B50	; 0x801b50 <i2c+0x3>
    594a:	80 64       	ori	r24, 0x40	; 64
    594c:	80 93 50 1b 	sts	0x1B50, r24	; 0x801b50 <i2c+0x3>
			i2c_next();
    5950:	1f df       	rcall	.-450    	; 0x5790 <i2c_next>
			break;
	}
}
    5952:	ff 91       	pop	r31
    5954:	ef 91       	pop	r30
    5956:	bf 91       	pop	r27
    5958:	af 91       	pop	r26
    595a:	9f 91       	pop	r25
    595c:	8f 91       	pop	r24
    595e:	7f 91       	pop	r23
    5960:	6f 91       	pop	r22
    5962:	5f 91       	pop	r21
    5964:	4f 91       	pop	r20
    5966:	3f 91       	pop	r19
    5968:	2f 91       	pop	r18
    596a:	0f 90       	pop	r0
    596c:	0b be       	out	0x3b, r0	; 59
    596e:	0f 90       	pop	r0
    5970:	0f be       	out	0x3f, r0	; 63
    5972:	0f 90       	pop	r0
    5974:	1f 90       	pop	r1
    5976:	18 95       	reti

00005978 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5978:	cf 93       	push	r28
    597a:	00 d0       	rcall	.+0      	; 0x597c <i2c_print_error+0x4>
    597c:	00 d0       	rcall	.+0      	; 0x597e <i2c_print_error+0x6>
    597e:	1f 92       	push	r1
    int flags = o->flags;
    5980:	fc 01       	movw	r30, r24
    5982:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5984:	cc 23       	and	r28, r28
    5986:	09 f4       	brne	.+2      	; 0x598a <i2c_print_error+0x12>
    5988:	67 c0       	rjmp	.+206    	; 0x5a58 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    598a:	80 91 4f 1b 	lds	r24, 0x1B4F	; 0x801b4f <i2c+0x2>
    598e:	81 11       	cpse	r24, r1
    5990:	03 c0       	rjmp	.+6      	; 0x5998 <i2c_print_error+0x20>
    5992:	88 e2       	ldi	r24, 0x28	; 40
    5994:	93 e0       	ldi	r25, 0x03	; 3
    5996:	02 c0       	rjmp	.+4      	; 0x599c <i2c_print_error+0x24>
    5998:	83 e2       	ldi	r24, 0x23	; 35
    599a:	93 e0       	ldi	r25, 0x03	; 3
    599c:	ed b7       	in	r30, 0x3d	; 61
    599e:	fe b7       	in	r31, 0x3e	; 62
    59a0:	95 83       	std	Z+5, r25	; 0x05
    59a2:	84 83       	std	Z+4, r24	; 0x04
    59a4:	81 ec       	ldi	r24, 0xC1	; 193
    59a6:	93 e0       	ldi	r25, 0x03	; 3
    59a8:	a0 e0       	ldi	r26, 0x00	; 0
    59aa:	81 83       	std	Z+1, r24	; 0x01
    59ac:	92 83       	std	Z+2, r25	; 0x02
    59ae:	a3 83       	std	Z+3, r26	; 0x03
    59b0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    59b4:	c0 ff       	sbrs	r28, 0
    59b6:	0a c0       	rjmp	.+20     	; 0x59cc <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    59b8:	83 eb       	ldi	r24, 0xB3	; 179
    59ba:	93 e0       	ldi	r25, 0x03	; 3
    59bc:	a0 e0       	ldi	r26, 0x00	; 0
    59be:	ed b7       	in	r30, 0x3d	; 61
    59c0:	fe b7       	in	r31, 0x3e	; 62
    59c2:	81 83       	std	Z+1, r24	; 0x01
    59c4:	92 83       	std	Z+2, r25	; 0x02
    59c6:	a3 83       	std	Z+3, r26	; 0x03
    59c8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_OP_LEN)
    59cc:	c1 ff       	sbrs	r28, 1
    59ce:	0a c0       	rjmp	.+20     	; 0x59e4 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    59d0:	89 ea       	ldi	r24, 0xA9	; 169
    59d2:	93 e0       	ldi	r25, 0x03	; 3
    59d4:	a0 e0       	ldi	r26, 0x00	; 0
    59d6:	ed b7       	in	r30, 0x3d	; 61
    59d8:	fe b7       	in	r31, 0x3e	; 62
    59da:	81 83       	std	Z+1, r24	; 0x01
    59dc:	92 83       	std	Z+2, r25	; 0x02
    59de:	a3 83       	std	Z+3, r26	; 0x03
    59e0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_OP_ERROR)
    59e4:	c2 ff       	sbrs	r28, 2
    59e6:	0a c0       	rjmp	.+20     	; 0x59fc <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    59e8:	8d e9       	ldi	r24, 0x9D	; 157
    59ea:	93 e0       	ldi	r25, 0x03	; 3
    59ec:	a0 e0       	ldi	r26, 0x00	; 0
    59ee:	ed b7       	in	r30, 0x3d	; 61
    59f0:	fe b7       	in	r31, 0x3e	; 62
    59f2:	81 83       	std	Z+1, r24	; 0x01
    59f4:	92 83       	std	Z+2, r25	; 0x02
    59f6:	a3 83       	std	Z+3, r26	; 0x03
    59f8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    59fc:	c4 ff       	sbrs	r28, 4
    59fe:	0a c0       	rjmp	.+20     	; 0x5a14 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5a00:	8b e8       	ldi	r24, 0x8B	; 139
    5a02:	93 e0       	ldi	r25, 0x03	; 3
    5a04:	a0 e0       	ldi	r26, 0x00	; 0
    5a06:	ed b7       	in	r30, 0x3d	; 61
    5a08:	fe b7       	in	r31, 0x3e	; 62
    5a0a:	81 83       	std	Z+1, r24	; 0x01
    5a0c:	92 83       	std	Z+2, r25	; 0x02
    5a0e:	a3 83       	std	Z+3, r26	; 0x03
    5a10:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5a14:	c3 ff       	sbrs	r28, 3
    5a16:	0a c0       	rjmp	.+20     	; 0x5a2c <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5a18:	89 e7       	ldi	r24, 0x79	; 121
    5a1a:	93 e0       	ldi	r25, 0x03	; 3
    5a1c:	a0 e0       	ldi	r26, 0x00	; 0
    5a1e:	ed b7       	in	r30, 0x3d	; 61
    5a20:	fe b7       	in	r31, 0x3e	; 62
    5a22:	81 83       	std	Z+1, r24	; 0x01
    5a24:	92 83       	std	Z+2, r25	; 0x02
    5a26:	a3 83       	std	Z+3, r26	; 0x03
    5a28:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5a2c:	c5 ff       	sbrs	r28, 5
    5a2e:	0a c0       	rjmp	.+20     	; 0x5a44 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5a30:	86 e6       	ldi	r24, 0x66	; 102
    5a32:	93 e0       	ldi	r25, 0x03	; 3
    5a34:	a0 e0       	ldi	r26, 0x00	; 0
    5a36:	ed b7       	in	r30, 0x3d	; 61
    5a38:	fe b7       	in	r31, 0x3e	; 62
    5a3a:	81 83       	std	Z+1, r24	; 0x01
    5a3c:	92 83       	std	Z+2, r25	; 0x02
    5a3e:	a3 83       	std	Z+3, r26	; 0x03
    5a40:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		printf("\n");
    5a44:	84 e6       	ldi	r24, 0x64	; 100
    5a46:	93 e0       	ldi	r25, 0x03	; 3
    5a48:	a0 e0       	ldi	r26, 0x00	; 0
    5a4a:	ed b7       	in	r30, 0x3d	; 61
    5a4c:	fe b7       	in	r31, 0x3e	; 62
    5a4e:	81 83       	std	Z+1, r24	; 0x01
    5a50:	92 83       	std	Z+2, r25	; 0x02
    5a52:	a3 83       	std	Z+3, r26	; 0x03
    5a54:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
	}
}
    5a58:	0f 90       	pop	r0
    5a5a:	0f 90       	pop	r0
    5a5c:	0f 90       	pop	r0
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	cf 91       	pop	r28
    5a64:	08 95       	ret

00005a66 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5a66:	6f 92       	push	r6
    5a68:	7f 92       	push	r7
    5a6a:	8f 92       	push	r8
    5a6c:	af 92       	push	r10
    5a6e:	bf 92       	push	r11
    5a70:	cf 92       	push	r12
    5a72:	df 92       	push	r13
    5a74:	ef 92       	push	r14
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	00 d0       	rcall	.+0      	; 0x5a80 <i2c_display_task_errors+0x1a>
    5a80:	00 d0       	rcall	.+0      	; 0x5a82 <i2c_display_task_errors+0x1c>
    5a82:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5a84:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	ed b7       	in	r30, 0x3d	; 61
    5a8c:	fe b7       	in	r31, 0x3e	; 62
    5a8e:	95 83       	std	Z+5, r25	; 0x05
    5a90:	84 83       	std	Z+4, r24	; 0x04
    5a92:	81 e5       	ldi	r24, 0x51	; 81
    5a94:	93 e0       	ldi	r25, 0x03	; 3
    5a96:	a0 e0       	ldi	r26, 0x00	; 0
    5a98:	81 83       	std	Z+1, r24	; 0x01
    5a9a:	92 83       	std	Z+2, r25	; 0x02
    5a9c:	a3 83       	std	Z+3, r26	; 0x03
    5a9e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5aa2:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	ed b7       	in	r30, 0x3d	; 61
    5aaa:	fe b7       	in	r31, 0x3e	; 62
    5aac:	95 83       	std	Z+5, r25	; 0x05
    5aae:	84 83       	std	Z+4, r24	; 0x04
    5ab0:	8d e3       	ldi	r24, 0x3D	; 61
    5ab2:	93 e0       	ldi	r25, 0x03	; 3
    5ab4:	a0 e0       	ldi	r26, 0x00	; 0
    5ab6:	81 83       	std	Z+1, r24	; 0x01
    5ab8:	92 83       	std	Z+2, r25	; 0x02
    5aba:	a3 83       	std	Z+3, r26	; 0x03
    5abc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5ac0:	ce e5       	ldi	r28, 0x5E	; 94
    5ac2:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ac4:	00 e0       	ldi	r16, 0x00	; 0
    5ac6:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ac8:	83 e3       	ldi	r24, 0x33	; 51
    5aca:	93 e0       	ldi	r25, 0x03	; 3
    5acc:	6c 01       	movw	r12, r24
    5ace:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5ad0:	81 e3       	ldi	r24, 0x31	; 49
    5ad2:	93 e0       	ldi	r25, 0x03	; 3
    5ad4:	3c 01       	movw	r6, r24
    5ad6:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ad8:	30 2f       	mov	r19, r16
    5ada:	21 2f       	mov	r18, r17
    5adc:	5e 01       	movw	r10, r28
    5ade:	0f 5f       	subi	r16, 0xFF	; 255
    5ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae2:	88 81       	ld	r24, Y
    5ae4:	99 81       	ldd	r25, Y+1	; 0x01
    5ae6:	89 2b       	or	r24, r25
    5ae8:	b1 f0       	breq	.+44     	; 0x5b16 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5aea:	ed b7       	in	r30, 0x3d	; 61
    5aec:	fe b7       	in	r31, 0x3e	; 62
    5aee:	34 83       	std	Z+4, r19	; 0x04
    5af0:	25 83       	std	Z+5, r18	; 0x05
    5af2:	c1 82       	std	Z+1, r12	; 0x01
    5af4:	d2 82       	std	Z+2, r13	; 0x02
    5af6:	e3 82       	std	Z+3, r14	; 0x03
    5af8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5afc:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5afe:	f5 01       	movw	r30, r10
    5b00:	80 81       	ld	r24, Z
    5b02:	91 81       	ldd	r25, Z+1	; 0x01
    5b04:	39 df       	rcall	.-398    	; 0x5978 <i2c_print_error>
		printf("\n");
    5b06:	ed b7       	in	r30, 0x3d	; 61
    5b08:	fe b7       	in	r31, 0x3e	; 62
    5b0a:	61 82       	std	Z+1, r6	; 0x01
    5b0c:	72 82       	std	Z+2, r7	; 0x02
    5b0e:	83 82       	std	Z+3, r8	; 0x03
    5b10:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5b14:	e1 cf       	rjmp	.-62     	; 0x5ad8 <i2c_display_task_errors+0x72>
	}
}
    5b16:	0f 90       	pop	r0
    5b18:	0f 90       	pop	r0
    5b1a:	0f 90       	pop	r0
    5b1c:	0f 90       	pop	r0
    5b1e:	0f 90       	pop	r0
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	0f 91       	pop	r16
    5b28:	ef 90       	pop	r14
    5b2a:	df 90       	pop	r13
    5b2c:	cf 90       	pop	r12
    5b2e:	bf 90       	pop	r11
    5b30:	af 90       	pop	r10
    5b32:	8f 90       	pop	r8
    5b34:	7f 90       	pop	r7
    5b36:	6f 90       	pop	r6
    5b38:	08 95       	ret

00005b3a <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5b3a:	6a e0       	ldi	r22, 0x0A	; 10
    5b3c:	0e 94 fb e2 	call	0x1c5f6	; 0x1c5f6 <__udivmodqi4>
    5b40:	82 95       	swap	r24
    5b42:	80 7f       	andi	r24, 0xF0	; 240
    5b44:	89 2b       	or	r24, r25
    5b46:	08 95       	ret

00005b48 <BCDtoBIN>:
    5b48:	98 2f       	mov	r25, r24
    5b4a:	92 95       	swap	r25
    5b4c:	9f 70       	andi	r25, 0x0F	; 15
    5b4e:	8f 70       	andi	r24, 0x0F	; 15
    5b50:	2a e0       	ldi	r18, 0x0A	; 10
    5b52:	92 9f       	mul	r25, r18
    5b54:	80 0d       	add	r24, r0
    5b56:	11 24       	eor	r1, r1
    5b58:	08 95       	ret

00005b5a <i2c_rtc_write>:
    5b5a:	ac e0       	ldi	r26, 0x0C	; 12
    5b5c:	b0 e0       	ldi	r27, 0x00	; 0
    5b5e:	e3 eb       	ldi	r30, 0xB3	; 179
    5b60:	fd e2       	ldi	r31, 0x2D	; 45
    5b62:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    5b66:	9f ef       	ldi	r25, 0xFF	; 255
    5b68:	92 0f       	add	r25, r18
    5b6a:	98 30       	cpi	r25, 0x08	; 8
    5b6c:	50 f5       	brcc	.+84     	; 0x5bc2 <i2c_rtc_write+0x68>
    5b6e:	6c 83       	std	Y+4, r22	; 0x04
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	02 2f       	mov	r16, r18
    5b74:	10 e0       	ldi	r17, 0x00	; 0
    5b76:	69 2f       	mov	r22, r25
    5b78:	09 2e       	mov	r0, r25
    5b7a:	00 0c       	add	r0, r0
    5b7c:	77 0b       	sbc	r23, r23
    5b7e:	60 17       	cp	r22, r16
    5b80:	71 07       	cpc	r23, r17
    5b82:	6c f4       	brge	.+26     	; 0x5b9e <i2c_rtc_write+0x44>
    5b84:	a5 e0       	ldi	r26, 0x05	; 5
    5b86:	b0 e0       	ldi	r27, 0x00	; 0
    5b88:	ac 0f       	add	r26, r28
    5b8a:	bd 1f       	adc	r27, r29
    5b8c:	a6 0f       	add	r26, r22
    5b8e:	b7 1f       	adc	r27, r23
    5b90:	64 0f       	add	r22, r20
    5b92:	75 1f       	adc	r23, r21
    5b94:	fb 01       	movw	r30, r22
    5b96:	30 81       	ld	r19, Z
    5b98:	3c 93       	st	X, r19
    5b9a:	9f 5f       	subi	r25, 0xFF	; 255
    5b9c:	ec cf       	rjmp	.-40     	; 0x5b76 <i2c_rtc_write+0x1c>
    5b9e:	2f 5f       	subi	r18, 0xFF	; 255
    5ba0:	ae 01       	movw	r20, r28
    5ba2:	4c 5f       	subi	r20, 0xFC	; 252
    5ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba6:	60 e0       	ldi	r22, 0x00	; 0
    5ba8:	5a dd       	rcall	.-1356   	; 0x565e <i2c_fn>
    5baa:	81 11       	cpse	r24, r1
    5bac:	0c c0       	rjmp	.+24     	; 0x5bc6 <i2c_rtc_write+0x6c>
    5bae:	8e ed       	ldi	r24, 0xDE	; 222
    5bb0:	94 e0       	ldi	r25, 0x04	; 4
    5bb2:	a0 e0       	ldi	r26, 0x00	; 0
    5bb4:	ed b7       	in	r30, 0x3d	; 61
    5bb6:	fe b7       	in	r31, 0x3e	; 62
    5bb8:	81 83       	std	Z+1, r24	; 0x01
    5bba:	92 83       	std	Z+2, r25	; 0x02
    5bbc:	a3 83       	std	Z+3, r26	; 0x03
    5bbe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	01 c0       	rjmp	.+2      	; 0x5bc8 <i2c_rtc_write+0x6e>
    5bc6:	81 e0       	ldi	r24, 0x01	; 1
    5bc8:	2c 96       	adiw	r28, 0x0c	; 12
    5bca:	e4 e0       	ldi	r30, 0x04	; 4
    5bcc:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00005bd0 <i2c_rtc_read>:
    5bd0:	a4 e0       	ldi	r26, 0x04	; 4
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	ee ee       	ldi	r30, 0xEE	; 238
    5bd6:	fd e2       	ldi	r31, 0x2D	; 45
    5bd8:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    5bdc:	6c 83       	std	Y+4, r22	; 0x04
    5bde:	9f ef       	ldi	r25, 0xFF	; 255
    5be0:	92 0f       	add	r25, r18
    5be2:	98 30       	cpi	r25, 0x08	; 8
    5be4:	f8 f4       	brcc	.+62     	; 0x5c24 <i2c_rtc_read+0x54>
    5be6:	02 2f       	mov	r16, r18
    5be8:	7a 01       	movw	r14, r20
    5bea:	18 2f       	mov	r17, r24
    5bec:	21 e0       	ldi	r18, 0x01	; 1
    5bee:	ae 01       	movw	r20, r28
    5bf0:	4c 5f       	subi	r20, 0xFC	; 252
    5bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf4:	60 e0       	ldi	r22, 0x00	; 0
    5bf6:	33 dd       	rcall	.-1434   	; 0x565e <i2c_fn>
    5bf8:	81 11       	cpse	r24, r1
    5bfa:	03 c0       	rjmp	.+6      	; 0x5c02 <i2c_rtc_read+0x32>
    5bfc:	82 ec       	ldi	r24, 0xC2	; 194
    5bfe:	94 e0       	ldi	r25, 0x04	; 4
    5c00:	09 c0       	rjmp	.+18     	; 0x5c14 <i2c_rtc_read+0x44>
    5c02:	20 2f       	mov	r18, r16
    5c04:	a7 01       	movw	r20, r14
    5c06:	61 e0       	ldi	r22, 0x01	; 1
    5c08:	81 2f       	mov	r24, r17
    5c0a:	29 dd       	rcall	.-1454   	; 0x565e <i2c_fn>
    5c0c:	81 11       	cpse	r24, r1
    5c0e:	0c c0       	rjmp	.+24     	; 0x5c28 <i2c_rtc_read+0x58>
    5c10:	89 ea       	ldi	r24, 0xA9	; 169
    5c12:	94 e0       	ldi	r25, 0x04	; 4
    5c14:	a0 e0       	ldi	r26, 0x00	; 0
    5c16:	ed b7       	in	r30, 0x3d	; 61
    5c18:	fe b7       	in	r31, 0x3e	; 62
    5c1a:	81 83       	std	Z+1, r24	; 0x01
    5c1c:	92 83       	std	Z+2, r25	; 0x02
    5c1e:	a3 83       	std	Z+3, r26	; 0x03
    5c20:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5c24:	80 e0       	ldi	r24, 0x00	; 0
    5c26:	01 c0       	rjmp	.+2      	; 0x5c2a <i2c_rtc_read+0x5a>
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	24 96       	adiw	r28, 0x04	; 4
    5c2c:	e6 e0       	ldi	r30, 0x06	; 6
    5c2e:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00005c32 <i2c_rtc_init>:
    5c32:	60 ea       	ldi	r22, 0xA0	; 160
    5c34:	76 e8       	ldi	r23, 0x86	; 134
    5c36:	81 e0       	ldi	r24, 0x01	; 1
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	18 cc       	rjmp	.-2000   	; 0x546c <i2c_init>
    5c3c:	08 95       	ret

00005c3e <rtc_write>:
    5c3e:	ab e0       	ldi	r26, 0x0B	; 11
    5c40:	b0 e0       	ldi	r27, 0x00	; 0
    5c42:	e5 e2       	ldi	r30, 0x25	; 37
    5c44:	fe e2       	ldi	r31, 0x2E	; 46
    5c46:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    5c4a:	8c 01       	movw	r16, r24
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	80 81       	ld	r24, Z
    5c50:	74 df       	rcall	.-280    	; 0x5b3a <BINtoBCD>
    5c52:	8f 77       	andi	r24, 0x7F	; 127
    5c54:	8c 83       	std	Y+4, r24	; 0x04
    5c56:	f8 01       	movw	r30, r16
    5c58:	82 81       	ldd	r24, Z+2	; 0x02
    5c5a:	6f df       	rcall	.-290    	; 0x5b3a <BINtoBCD>
    5c5c:	8f 77       	andi	r24, 0x7F	; 127
    5c5e:	8d 83       	std	Y+5, r24	; 0x05
    5c60:	f8 01       	movw	r30, r16
    5c62:	84 81       	ldd	r24, Z+4	; 0x04
    5c64:	6a df       	rcall	.-300    	; 0x5b3a <BINtoBCD>
    5c66:	8f 73       	andi	r24, 0x3F	; 63
    5c68:	8e 83       	std	Y+6, r24	; 0x06
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	84 85       	ldd	r24, Z+12	; 0x0c
    5c6e:	87 70       	andi	r24, 0x07	; 7
    5c70:	8f 5f       	subi	r24, 0xFF	; 255
    5c72:	8f 83       	std	Y+7, r24	; 0x07
    5c74:	86 81       	ldd	r24, Z+6	; 0x06
    5c76:	61 df       	rcall	.-318    	; 0x5b3a <BINtoBCD>
    5c78:	8f 73       	andi	r24, 0x3F	; 63
    5c7a:	88 87       	std	Y+8, r24	; 0x08
    5c7c:	f8 01       	movw	r30, r16
    5c7e:	80 85       	ldd	r24, Z+8	; 0x08
    5c80:	8f 5f       	subi	r24, 0xFF	; 255
    5c82:	5b df       	rcall	.-330    	; 0x5b3a <BINtoBCD>
    5c84:	8f 71       	andi	r24, 0x1F	; 31
    5c86:	89 87       	std	Y+9, r24	; 0x09
    5c88:	f8 01       	movw	r30, r16
    5c8a:	82 85       	ldd	r24, Z+10	; 0x0a
    5c8c:	84 56       	subi	r24, 0x64	; 100
    5c8e:	55 df       	rcall	.-342    	; 0x5b3a <BINtoBCD>
    5c90:	8a 87       	std	Y+10, r24	; 0x0a
    5c92:	83 e9       	ldi	r24, 0x93	; 147
    5c94:	8b 87       	std	Y+11, r24	; 0x0b
    5c96:	28 e0       	ldi	r18, 0x08	; 8
    5c98:	ae 01       	movw	r20, r28
    5c9a:	4c 5f       	subi	r20, 0xFC	; 252
    5c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c9e:	60 e0       	ldi	r22, 0x00	; 0
    5ca0:	88 e6       	ldi	r24, 0x68	; 104
    5ca2:	5b df       	rcall	.-330    	; 0x5b5a <i2c_rtc_write>
    5ca4:	81 11       	cpse	r24, r1
    5ca6:	0c c0       	rjmp	.+24     	; 0x5cc0 <rtc_write+0x82>
    5ca8:	88 e9       	ldi	r24, 0x98	; 152
    5caa:	94 e0       	ldi	r25, 0x04	; 4
    5cac:	a0 e0       	ldi	r26, 0x00	; 0
    5cae:	ed b7       	in	r30, 0x3d	; 61
    5cb0:	fe b7       	in	r31, 0x3e	; 62
    5cb2:	81 83       	std	Z+1, r24	; 0x01
    5cb4:	92 83       	std	Z+2, r25	; 0x02
    5cb6:	a3 83       	std	Z+3, r26	; 0x03
    5cb8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5cbc:	80 e0       	ldi	r24, 0x00	; 0
    5cbe:	01 c0       	rjmp	.+2      	; 0x5cc2 <rtc_write+0x84>
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	2b 96       	adiw	r28, 0x0b	; 11
    5cc4:	e4 e0       	ldi	r30, 0x04	; 4
    5cc6:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00005cca <rtc_read>:
    5cca:	ab e0       	ldi	r26, 0x0B	; 11
    5ccc:	b0 e0       	ldi	r27, 0x00	; 0
    5cce:	eb e6       	ldi	r30, 0x6B	; 107
    5cd0:	fe e2       	ldi	r31, 0x2E	; 46
    5cd2:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    5cd6:	8c 01       	movw	r16, r24
    5cd8:	28 e0       	ldi	r18, 0x08	; 8
    5cda:	ae 01       	movw	r20, r28
    5cdc:	4c 5f       	subi	r20, 0xFC	; 252
    5cde:	5f 4f       	sbci	r21, 0xFF	; 255
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	88 e6       	ldi	r24, 0x68	; 104
    5ce4:	75 df       	rcall	.-278    	; 0x5bd0 <i2c_rtc_read>
    5ce6:	81 11       	cpse	r24, r1
    5ce8:	0c c0       	rjmp	.+24     	; 0x5d02 <rtc_read+0x38>
    5cea:	88 e8       	ldi	r24, 0x88	; 136
    5cec:	94 e0       	ldi	r25, 0x04	; 4
    5cee:	a0 e0       	ldi	r26, 0x00	; 0
    5cf0:	ed b7       	in	r30, 0x3d	; 61
    5cf2:	fe b7       	in	r31, 0x3e	; 62
    5cf4:	81 83       	std	Z+1, r24	; 0x01
    5cf6:	92 83       	std	Z+2, r25	; 0x02
    5cf8:	a3 83       	std	Z+3, r26	; 0x03
    5cfa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	33 c0       	rjmp	.+102    	; 0x5d68 <rtc_read+0x9e>
    5d02:	8c 81       	ldd	r24, Y+4	; 0x04
    5d04:	8f 77       	andi	r24, 0x7F	; 127
    5d06:	20 df       	rcall	.-448    	; 0x5b48 <BCDtoBIN>
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	f8 01       	movw	r30, r16
    5d0c:	91 83       	std	Z+1, r25	; 0x01
    5d0e:	80 83       	st	Z, r24
    5d10:	8d 81       	ldd	r24, Y+5	; 0x05
    5d12:	8f 77       	andi	r24, 0x7F	; 127
    5d14:	19 df       	rcall	.-462    	; 0x5b48 <BCDtoBIN>
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	f8 01       	movw	r30, r16
    5d1a:	93 83       	std	Z+3, r25	; 0x03
    5d1c:	82 83       	std	Z+2, r24	; 0x02
    5d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d20:	8f 73       	andi	r24, 0x3F	; 63
    5d22:	12 df       	rcall	.-476    	; 0x5b48 <BCDtoBIN>
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	f8 01       	movw	r30, r16
    5d28:	95 83       	std	Z+5, r25	; 0x05
    5d2a:	84 83       	std	Z+4, r24	; 0x04
    5d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    5d2e:	87 70       	andi	r24, 0x07	; 7
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	01 97       	sbiw	r24, 0x01	; 1
    5d34:	95 87       	std	Z+13, r25	; 0x0d
    5d36:	84 87       	std	Z+12, r24	; 0x0c
    5d38:	88 85       	ldd	r24, Y+8	; 0x08
    5d3a:	8f 73       	andi	r24, 0x3F	; 63
    5d3c:	05 df       	rcall	.-502    	; 0x5b48 <BCDtoBIN>
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	f8 01       	movw	r30, r16
    5d42:	97 83       	std	Z+7, r25	; 0x07
    5d44:	86 83       	std	Z+6, r24	; 0x06
    5d46:	89 85       	ldd	r24, Y+9	; 0x09
    5d48:	8f 71       	andi	r24, 0x1F	; 31
    5d4a:	fe de       	rcall	.-516    	; 0x5b48 <BCDtoBIN>
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	01 97       	sbiw	r24, 0x01	; 1
    5d50:	f8 01       	movw	r30, r16
    5d52:	91 87       	std	Z+9, r25	; 0x09
    5d54:	80 87       	std	Z+8, r24	; 0x08
    5d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d58:	f7 de       	rcall	.-530    	; 0x5b48 <BCDtoBIN>
    5d5a:	90 e0       	ldi	r25, 0x00	; 0
    5d5c:	8c 59       	subi	r24, 0x9C	; 156
    5d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d60:	f8 01       	movw	r30, r16
    5d62:	93 87       	std	Z+11, r25	; 0x0b
    5d64:	82 87       	std	Z+10, r24	; 0x0a
    5d66:	81 e0       	ldi	r24, 0x01	; 1
    5d68:	2b 96       	adiw	r28, 0x0b	; 11
    5d6a:	e4 e0       	ldi	r30, 0x04	; 4
    5d6c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00005d70 <rtc_run>:
    5d70:	a4 e0       	ldi	r26, 0x04	; 4
    5d72:	b0 e0       	ldi	r27, 0x00	; 0
    5d74:	ee eb       	ldi	r30, 0xBE	; 190
    5d76:	fe e2       	ldi	r31, 0x2E	; 46
    5d78:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    5d7c:	8c 01       	movw	r16, r24
    5d7e:	21 e0       	ldi	r18, 0x01	; 1
    5d80:	ae 01       	movw	r20, r28
    5d82:	4c 5f       	subi	r20, 0xFC	; 252
    5d84:	5f 4f       	sbci	r21, 0xFF	; 255
    5d86:	60 e0       	ldi	r22, 0x00	; 0
    5d88:	88 e6       	ldi	r24, 0x68	; 104
    5d8a:	22 df       	rcall	.-444    	; 0x5bd0 <i2c_rtc_read>
    5d8c:	81 11       	cpse	r24, r1
    5d8e:	03 c0       	rjmp	.+6      	; 0x5d96 <rtc_run+0x26>
    5d90:	84 e7       	ldi	r24, 0x74	; 116
    5d92:	94 e0       	ldi	r25, 0x04	; 4
    5d94:	24 c0       	rjmp	.+72     	; 0x5dde <rtc_run+0x6e>
    5d96:	8c 81       	ldd	r24, Y+4	; 0x04
    5d98:	0f 3f       	cpi	r16, 0xFF	; 255
    5d9a:	ff ef       	ldi	r31, 0xFF	; 255
    5d9c:	1f 07       	cpc	r17, r31
    5d9e:	59 f4       	brne	.+22     	; 0x5db6 <rtc_run+0x46>
    5da0:	08 2e       	mov	r0, r24
    5da2:	00 0c       	add	r0, r0
    5da4:	99 0b       	sbc	r25, r25
    5da6:	80 95       	com	r24
    5da8:	90 95       	com	r25
    5daa:	89 2f       	mov	r24, r25
    5dac:	88 1f       	adc	r24, r24
    5dae:	88 27       	eor	r24, r24
    5db0:	88 1f       	adc	r24, r24
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	20 c0       	rjmp	.+64     	; 0x5df6 <rtc_run+0x86>
    5db6:	8f 77       	andi	r24, 0x7F	; 127
    5db8:	01 15       	cp	r16, r1
    5dba:	11 05       	cpc	r17, r1
    5dbc:	11 f4       	brne	.+4      	; 0x5dc2 <rtc_run+0x52>
    5dbe:	90 e8       	ldi	r25, 0x80	; 128
    5dc0:	01 c0       	rjmp	.+2      	; 0x5dc4 <rtc_run+0x54>
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	89 2b       	or	r24, r25
    5dc6:	8c 83       	std	Y+4, r24	; 0x04
    5dc8:	21 e0       	ldi	r18, 0x01	; 1
    5dca:	ae 01       	movw	r20, r28
    5dcc:	4c 5f       	subi	r20, 0xFC	; 252
    5dce:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd0:	60 e0       	ldi	r22, 0x00	; 0
    5dd2:	88 e6       	ldi	r24, 0x68	; 104
    5dd4:	c2 de       	rcall	.-636    	; 0x5b5a <i2c_rtc_write>
    5dd6:	81 11       	cpse	r24, r1
    5dd8:	0d c0       	rjmp	.+26     	; 0x5df4 <rtc_run+0x84>
    5dda:	8f e5       	ldi	r24, 0x5F	; 95
    5ddc:	94 e0       	ldi	r25, 0x04	; 4
    5dde:	a0 e0       	ldi	r26, 0x00	; 0
    5de0:	ed b7       	in	r30, 0x3d	; 61
    5de2:	fe b7       	in	r31, 0x3e	; 62
    5de4:	81 83       	std	Z+1, r24	; 0x01
    5de6:	92 83       	std	Z+2, r25	; 0x02
    5de8:	a3 83       	std	Z+3, r26	; 0x03
    5dea:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5dee:	8f ef       	ldi	r24, 0xFF	; 255
    5df0:	9f ef       	ldi	r25, 0xFF	; 255
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <rtc_run+0x86>
    5df4:	c8 01       	movw	r24, r16
    5df6:	24 96       	adiw	r28, 0x04	; 4
    5df8:	e4 e0       	ldi	r30, 0x04	; 4
    5dfa:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00005dfe <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5dfe:	a7 e0       	ldi	r26, 0x07	; 7
    5e00:	b0 e0       	ldi	r27, 0x00	; 0
    5e02:	e5 e0       	ldi	r30, 0x05	; 5
    5e04:	ff e2       	ldi	r31, 0x2F	; 47
    5e06:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    5e0a:	8c 01       	movw	r16, r24
    5e0c:	4c 83       	std	Y+4, r20	; 0x04
    5e0e:	5d 83       	std	Y+5, r21	; 0x05
    5e10:	6e 83       	std	Y+6, r22	; 0x06
    5e12:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5e14:	0e df       	rcall	.-484    	; 0x5c32 <i2c_rtc_init>

    if(!force)
    5e16:	01 15       	cp	r16, r1
    5e18:	11 05       	cpc	r17, r1
    5e1a:	39 f4       	brne	.+14     	; 0x5e2a <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5e1c:	8f ef       	ldi	r24, 0xFF	; 255
    5e1e:	9f ef       	ldi	r25, 0xFF	; 255
    5e20:	a7 df       	rcall	.-178    	; 0x5d70 <rtc_run>
        if(state < 0)
    5e22:	87 fd       	sbrc	r24, 7
    5e24:	16 c0       	rjmp	.+44     	; 0x5e52 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5e26:	81 11       	cpse	r24, r1
    5e28:	22 c0       	rjmp	.+68     	; 0x5e6e <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e2a:	80 e0       	ldi	r24, 0x00	; 0
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	a0 df       	rcall	.-192    	; 0x5d70 <rtc_run>
    5e30:	97 fd       	sbrc	r25, 7
    5e32:	0f c0       	rjmp	.+30     	; 0x5e52 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5e34:	ce 01       	movw	r24, r28
    5e36:	04 96       	adiw	r24, 0x04	; 4
    5e38:	a3 d6       	rcall	.+3398   	; 0x6b80 <gmtime>
    5e3a:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5e3c:	81 f4       	brne	.+32     	; 0x5e5e <rtc_init+0x60>
    5e3e:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5e40:	94 e0       	ldi	r25, 0x04	; 4
    5e42:	a0 e0       	ldi	r26, 0x00	; 0
    5e44:	ed b7       	in	r30, 0x3d	; 61
    5e46:	fe b7       	in	r31, 0x3e	; 62
    5e48:	81 83       	std	Z+1, r24	; 0x01
    5e4a:	92 83       	std	Z+2, r25	; 0x02
    5e4c:	a3 83       	std	Z+3, r26	; 0x03
    5e4e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    5e52:	10 92 f5 1a 	sts	0x1AF5, r1	; 0x801af5 <rtc_ok+0x1>
            rtc_ok = 0;
    5e56:	10 92 f4 1a 	sts	0x1AF4, r1	; 0x801af4 <rtc_ok>
            return 0;
    5e5a:	80 e0       	ldi	r24, 0x00	; 0
    5e5c:	0e c0       	rjmp	.+28     	; 0x5e7a <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5e5e:	ef de       	rcall	.-546    	; 0x5c3e <rtc_write>
    5e60:	88 23       	and	r24, r24
    5e62:	69 f3       	breq	.-38     	; 0x5e3e <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	83 df       	rcall	.-250    	; 0x5d70 <rtc_run>
    5e6a:	97 fd       	sbrc	r25, 7
    5e6c:	f2 cf       	rjmp	.-28     	; 0x5e52 <rtc_init+0x54>
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	90 93 f5 1a 	sts	0x1AF5, r25	; 0x801af5 <rtc_ok+0x1>
    5e76:	80 93 f4 1a 	sts	0x1AF4, r24	; 0x801af4 <rtc_ok>
    5e7a:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5e7c:	e4 e0       	ldi	r30, 0x04	; 4
    5e7e:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00005e82 <islower>:
    5e82:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5e84:	21 56       	subi	r18, 0x61	; 97
    5e86:	31 09       	sbc	r19, r1
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	2a 31       	cpi	r18, 0x1A	; 26
    5e8e:	31 05       	cpc	r19, r1
    5e90:	10 f0       	brcs	.+4      	; 0x5e96 <islower+0x14>
    5e92:	80 e0       	ldi	r24, 0x00	; 0
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	08 95       	ret

00005e98 <toupper>:
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	ec 01       	movw	r28, r24
    5e9e:	f1 df       	rcall	.-30     	; 0x5e82 <islower>
    5ea0:	89 2b       	or	r24, r25
    5ea2:	19 f0       	breq	.+6      	; 0x5eaa <toupper+0x12>
    5ea4:	ce 01       	movw	r24, r28
    5ea6:	80 97       	sbiw	r24, 0x20	; 32
    5ea8:	01 c0       	rjmp	.+2      	; 0x5eac <toupper+0x14>
    5eaa:	ce 01       	movw	r24, r28
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <strcpy>:
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	db 01       	movw	r26, r22
    5eb6:	2d 91       	ld	r18, X+
    5eb8:	bd 01       	movw	r22, r26
    5eba:	01 96       	adiw	r24, 0x01	; 1
    5ebc:	22 23       	and	r18, r18
    5ebe:	11 f0       	breq	.+4      	; 0x5ec4 <strcpy+0x12>
    5ec0:	20 83       	st	Z, r18
    5ec2:	f7 cf       	rjmp	.-18     	; 0x5eb2 <strcpy>
    5ec4:	10 82       	st	Z, r1
    5ec6:	08 95       	ret

00005ec8 <strncpy>:
    5ec8:	db 01       	movw	r26, r22
    5eca:	fc 01       	movw	r30, r24
    5ecc:	2d 91       	ld	r18, X+
    5ece:	21 11       	cpse	r18, r1
    5ed0:	03 c0       	rjmp	.+6      	; 0x5ed8 <strncpy+0x10>
    5ed2:	4e 0f       	add	r20, r30
    5ed4:	5f 1f       	adc	r21, r31
    5ed6:	08 c0       	rjmp	.+16     	; 0x5ee8 <strncpy+0x20>
    5ed8:	41 15       	cp	r20, r1
    5eda:	51 05       	cpc	r21, r1
    5edc:	21 f0       	breq	.+8      	; 0x5ee6 <strncpy+0x1e>
    5ede:	21 93       	st	Z+, r18
    5ee0:	41 50       	subi	r20, 0x01	; 1
    5ee2:	51 09       	sbc	r21, r1
    5ee4:	f3 cf       	rjmp	.-26     	; 0x5ecc <strncpy+0x4>
    5ee6:	08 95       	ret
    5ee8:	4e 17       	cp	r20, r30
    5eea:	5f 07       	cpc	r21, r31
    5eec:	11 f0       	breq	.+4      	; 0x5ef2 <strncpy+0x2a>
    5eee:	11 92       	st	Z+, r1
    5ef0:	fb cf       	rjmp	.-10     	; 0x5ee8 <strncpy+0x20>
    5ef2:	08 95       	ret

00005ef4 <strcat>:
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	d8 2f       	mov	r29, r24
    5efa:	c9 2f       	mov	r28, r25
    5efc:	28 2f       	mov	r18, r24
    5efe:	39 2f       	mov	r19, r25
    5f00:	c9 01       	movw	r24, r18
    5f02:	2f 5f       	subi	r18, 0xFF	; 255
    5f04:	3f 4f       	sbci	r19, 0xFF	; 255
    5f06:	fc 01       	movw	r30, r24
    5f08:	40 81       	ld	r20, Z
    5f0a:	41 11       	cpse	r20, r1
    5f0c:	f9 cf       	rjmp	.-14     	; 0x5f00 <strcat+0xc>
    5f0e:	d1 df       	rcall	.-94     	; 0x5eb2 <strcpy>
    5f10:	8d 2f       	mov	r24, r29
    5f12:	9c 2f       	mov	r25, r28
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	08 95       	ret

00005f1a <reverse>:
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	01 90       	ld	r0, Z+
    5f1e:	00 20       	and	r0, r0
    5f20:	e9 f7       	brne	.-6      	; 0x5f1c <reverse+0x2>
    5f22:	31 97       	sbiw	r30, 0x01	; 1
    5f24:	e8 1b       	sub	r30, r24
    5f26:	f9 0b       	sbc	r31, r25
    5f28:	af 01       	movw	r20, r30
    5f2a:	55 95       	asr	r21
    5f2c:	47 95       	ror	r20
    5f2e:	e8 0f       	add	r30, r24
    5f30:	f9 1f       	adc	r31, r25
    5f32:	dc 01       	movw	r26, r24
    5f34:	9d 01       	movw	r18, r26
    5f36:	28 1b       	sub	r18, r24
    5f38:	39 0b       	sbc	r19, r25
    5f3a:	24 17       	cp	r18, r20
    5f3c:	35 07       	cpc	r19, r21
    5f3e:	2c f4       	brge	.+10     	; 0x5f4a <reverse+0x30>
    5f40:	22 91       	ld	r18, -Z
    5f42:	3c 91       	ld	r19, X
    5f44:	30 83       	st	Z, r19
    5f46:	2d 93       	st	X+, r18
    5f48:	f5 cf       	rjmp	.-22     	; 0x5f34 <reverse+0x1a>
    5f4a:	08 95       	ret

00005f4c <strupper>:
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	ec 01       	movw	r28, r24
    5f52:	88 81       	ld	r24, Y
    5f54:	88 23       	and	r24, r24
    5f56:	21 f0       	breq	.+8      	; 0x5f60 <strupper+0x14>
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	9e df       	rcall	.-196    	; 0x5e98 <toupper>
    5f5c:	89 93       	st	Y+, r24
    5f5e:	f9 cf       	rjmp	.-14     	; 0x5f52 <strupper+0x6>
    5f60:	df 91       	pop	r29
    5f62:	cf 91       	pop	r28
    5f64:	08 95       	ret

00005f66 <strcmp>:
    5f66:	dc 01       	movw	r26, r24
    5f68:	fb 01       	movw	r30, r22
    5f6a:	2d 91       	ld	r18, X+
    5f6c:	41 91       	ld	r20, Z+
    5f6e:	50 e0       	ldi	r21, 0x00	; 0
    5f70:	30 e0       	ldi	r19, 0x00	; 0
    5f72:	c9 01       	movw	r24, r18
    5f74:	84 1b       	sub	r24, r20
    5f76:	95 0b       	sbc	r25, r21
    5f78:	11 f4       	brne	.+4      	; 0x5f7e <strcmp+0x18>
    5f7a:	45 2b       	or	r20, r21
    5f7c:	b1 f7       	brne	.-20     	; 0x5f6a <strcmp+0x4>
    5f7e:	08 95       	ret

00005f80 <strcasecmp>:
    5f80:	ef 92       	push	r14
    5f82:	ff 92       	push	r15
    5f84:	0f 93       	push	r16
    5f86:	1f 93       	push	r17
    5f88:	cf 93       	push	r28
    5f8a:	df 93       	push	r29
    5f8c:	7c 01       	movw	r14, r24
    5f8e:	8b 01       	movw	r16, r22
    5f90:	f7 01       	movw	r30, r14
    5f92:	81 91       	ld	r24, Z+
    5f94:	7f 01       	movw	r14, r30
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	7f df       	rcall	.-258    	; 0x5e98 <toupper>
    5f9a:	ec 01       	movw	r28, r24
    5f9c:	f8 01       	movw	r30, r16
    5f9e:	81 91       	ld	r24, Z+
    5fa0:	8f 01       	movw	r16, r30
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	79 df       	rcall	.-270    	; 0x5e98 <toupper>
    5fa6:	9c 01       	movw	r18, r24
    5fa8:	ce 01       	movw	r24, r28
    5faa:	82 1b       	sub	r24, r18
    5fac:	93 0b       	sbc	r25, r19
    5fae:	11 f4       	brne	.+4      	; 0x5fb4 <strcasecmp+0x34>
    5fb0:	23 2b       	or	r18, r19
    5fb2:	71 f7       	brne	.-36     	; 0x5f90 <strcasecmp+0x10>
    5fb4:	cd b7       	in	r28, 0x3d	; 61
    5fb6:	de b7       	in	r29, 0x3e	; 62
    5fb8:	e6 e0       	ldi	r30, 0x06	; 6
    5fba:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00005fbe <strncasecmp>:
    5fbe:	a0 e0       	ldi	r26, 0x00	; 0
    5fc0:	b0 e0       	ldi	r27, 0x00	; 0
    5fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    5fc4:	ff e2       	ldi	r31, 0x2F	; 47
    5fc6:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    5fca:	8c 01       	movw	r16, r24
    5fcc:	7b 01       	movw	r14, r22
    5fce:	6c 01       	movw	r12, r24
    5fd0:	c4 0e       	add	r12, r20
    5fd2:	d5 1e       	adc	r13, r21
    5fd4:	0c 15       	cp	r16, r12
    5fd6:	1d 05       	cpc	r17, r13
    5fd8:	99 f0       	breq	.+38     	; 0x6000 <strncasecmp+0x42>
    5fda:	f8 01       	movw	r30, r16
    5fdc:	81 91       	ld	r24, Z+
    5fde:	8f 01       	movw	r16, r30
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	5a df       	rcall	.-332    	; 0x5e98 <toupper>
    5fe4:	ec 01       	movw	r28, r24
    5fe6:	f7 01       	movw	r30, r14
    5fe8:	81 91       	ld	r24, Z+
    5fea:	7f 01       	movw	r14, r30
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	54 df       	rcall	.-344    	; 0x5e98 <toupper>
    5ff0:	9c 01       	movw	r18, r24
    5ff2:	ce 01       	movw	r24, r28
    5ff4:	82 1b       	sub	r24, r18
    5ff6:	93 0b       	sbc	r25, r19
    5ff8:	29 f4       	brne	.+10     	; 0x6004 <strncasecmp+0x46>
    5ffa:	23 2b       	or	r18, r19
    5ffc:	59 f7       	brne	.-42     	; 0x5fd4 <strncasecmp+0x16>
    5ffe:	02 c0       	rjmp	.+4      	; 0x6004 <strncasecmp+0x46>
    6000:	80 e0       	ldi	r24, 0x00	; 0
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	cd b7       	in	r28, 0x3d	; 61
    6006:	de b7       	in	r29, 0x3e	; 62
    6008:	e8 e0       	ldi	r30, 0x08	; 8
    600a:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000600e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    600e:	0f 93       	push	r16
    6010:	1f 93       	push	r17
    6012:	cf 93       	push	r28
    6014:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6016:	00 97       	sbiw	r24, 0x00	; 0
    6018:	99 f0       	breq	.+38     	; 0x6040 <stralloc+0x32>
    601a:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    601c:	fc 01       	movw	r30, r24
    601e:	01 90       	ld	r0, Z+
    6020:	00 20       	and	r0, r0
    6022:	e9 f7       	brne	.-6      	; 0x601e <stralloc+0x10>
    6024:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6026:	61 e0       	ldi	r22, 0x01	; 1
    6028:	70 e0       	ldi	r23, 0x00	; 0
    602a:	8c 1b       	sub	r24, r28
    602c:	9d 0b       	sbc	r25, r29
    602e:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
    6032:	8c 01       	movw	r16, r24
    if(!ptr)
    6034:	00 97       	sbiw	r24, 0x00	; 0
    6036:	21 f0       	breq	.+8      	; 0x6040 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6038:	be 01       	movw	r22, r28
    603a:	3b df       	rcall	.-394    	; 0x5eb2 <strcpy>
    return(ptr);
    603c:	c8 01       	movw	r24, r16
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <stralloc+0x36>
    6040:	80 e0       	ldi	r24, 0x00	; 0
    6042:	90 e0       	ldi	r25, 0x00	; 0
}
    6044:	df 91       	pop	r29
    6046:	cf 91       	pop	r28
    6048:	1f 91       	pop	r17
    604a:	0f 91       	pop	r16
    604c:	08 95       	ret

0000604e <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    604e:	00 d0       	rcall	.+0      	; 0x6050 <sep+0x2>
    6050:	1f 92       	push	r1
    6052:	8e e1       	ldi	r24, 0x1E	; 30
    6054:	95 e0       	ldi	r25, 0x05	; 5
    6056:	a0 e0       	ldi	r26, 0x00	; 0
    6058:	ed b7       	in	r30, 0x3d	; 61
    605a:	fe b7       	in	r31, 0x3e	; 62
    605c:	81 83       	std	Z+1, r24	; 0x01
    605e:	92 83       	std	Z+2, r25	; 0x02
    6060:	a3 83       	std	Z+3, r26	; 0x03
    6062:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    6066:	0f 90       	pop	r0
    6068:	0f 90       	pop	r0
    606a:	0f 90       	pop	r0
    606c:	08 95       	ret

0000606e <trim_tail>:
    606e:	00 97       	sbiw	r24, 0x00	; 0
    6070:	69 f0       	breq	.+26     	; 0x608c <trim_tail+0x1e>
    6072:	fc 01       	movw	r30, r24
    6074:	01 90       	ld	r0, Z+
    6076:	00 20       	and	r0, r0
    6078:	e9 f7       	brne	.-6      	; 0x6074 <trim_tail+0x6>
    607a:	31 97       	sbiw	r30, 0x01	; 1
    607c:	e8 17       	cp	r30, r24
    607e:	f9 07       	cpc	r31, r25
    6080:	29 f0       	breq	.+10     	; 0x608c <trim_tail+0x1e>
    6082:	22 91       	ld	r18, -Z
    6084:	21 32       	cpi	r18, 0x21	; 33
    6086:	10 f4       	brcc	.+4      	; 0x608c <trim_tail+0x1e>
    6088:	10 82       	st	Z, r1
    608a:	f8 cf       	rjmp	.-16     	; 0x607c <trim_tail+0xe>
    608c:	08 95       	ret

0000608e <skipspaces>:
    608e:	00 97       	sbiw	r24, 0x00	; 0
    6090:	39 f0       	breq	.+14     	; 0x60a0 <skipspaces+0x12>
    6092:	fc 01       	movw	r30, r24
    6094:	cf 01       	movw	r24, r30
    6096:	21 91       	ld	r18, Z+
    6098:	20 32       	cpi	r18, 0x20	; 32
    609a:	e1 f3       	breq	.-8      	; 0x6094 <skipspaces+0x6>
    609c:	29 30       	cpi	r18, 0x09	; 9
    609e:	d1 f3       	breq	.-12     	; 0x6094 <skipspaces+0x6>
    60a0:	08 95       	ret

000060a2 <MATCH>:
    60a2:	cf 93       	push	r28
    60a4:	df 93       	push	r29
    60a6:	fb 01       	movw	r30, r22
    60a8:	01 90       	ld	r0, Z+
    60aa:	00 20       	and	r0, r0
    60ac:	e9 f7       	brne	.-6      	; 0x60a8 <MATCH+0x6>
    60ae:	31 97       	sbiw	r30, 0x01	; 1
    60b0:	ef 01       	movw	r28, r30
    60b2:	c6 1b       	sub	r28, r22
    60b4:	d7 0b       	sbc	r29, r23
    60b6:	57 df       	rcall	.-338    	; 0x5f66 <strcmp>
    60b8:	89 2b       	or	r24, r25
    60ba:	11 f4       	brne	.+4      	; 0x60c0 <MATCH+0x1e>
    60bc:	ce 01       	movw	r24, r28
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <MATCH+0x22>
    60c0:	80 e0       	ldi	r24, 0x00	; 0
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	df 91       	pop	r29
    60c6:	cf 91       	pop	r28
    60c8:	08 95       	ret

000060ca <MATCHI>:
    60ca:	cf 93       	push	r28
    60cc:	df 93       	push	r29
    60ce:	fb 01       	movw	r30, r22
    60d0:	01 90       	ld	r0, Z+
    60d2:	00 20       	and	r0, r0
    60d4:	e9 f7       	brne	.-6      	; 0x60d0 <MATCHI+0x6>
    60d6:	31 97       	sbiw	r30, 0x01	; 1
    60d8:	ef 01       	movw	r28, r30
    60da:	c6 1b       	sub	r28, r22
    60dc:	d7 0b       	sbc	r29, r23
    60de:	50 df       	rcall	.-352    	; 0x5f80 <strcasecmp>
    60e0:	89 2b       	or	r24, r25
    60e2:	11 f4       	brne	.+4      	; 0x60e8 <MATCHI+0x1e>
    60e4:	ce 01       	movw	r24, r28
    60e6:	02 c0       	rjmp	.+4      	; 0x60ec <MATCHI+0x22>
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	df 91       	pop	r29
    60ee:	cf 91       	pop	r28
    60f0:	08 95       	ret

000060f2 <MATCHARGS>:
    60f2:	a9 e0       	ldi	r26, 0x09	; 9
    60f4:	b0 e0       	ldi	r27, 0x00	; 0
    60f6:	ef e7       	ldi	r30, 0x7F	; 127
    60f8:	f0 e3       	ldi	r31, 0x30	; 48
    60fa:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    60fe:	eb 01       	movw	r28, r22
    6100:	8a 01       	movw	r16, r20
    6102:	79 01       	movw	r14, r18
    6104:	e2 df       	rcall	.-60     	; 0x60ca <MATCHI>
    6106:	00 97       	sbiw	r24, 0x00	; 0
    6108:	c1 f0       	breq	.+48     	; 0x613a <MATCHARGS+0x48>
    610a:	e0 16       	cp	r14, r16
    610c:	f1 06       	cpc	r15, r17
    610e:	9c f4       	brge	.+38     	; 0x6136 <MATCHARGS+0x44>
    6110:	ed b7       	in	r30, 0x3d	; 61
    6112:	fe b7       	in	r31, 0x3e	; 62
    6114:	f1 86       	std	Z+9, r15	; 0x09
    6116:	e0 86       	std	Z+8, r14	; 0x08
    6118:	17 83       	std	Z+7, r17	; 0x07
    611a:	06 83       	std	Z+6, r16	; 0x06
    611c:	d5 83       	std	Z+5, r29	; 0x05
    611e:	c4 83       	std	Z+4, r28	; 0x04
    6120:	88 ef       	ldi	r24, 0xF8	; 248
    6122:	94 e0       	ldi	r25, 0x04	; 4
    6124:	a0 e0       	ldi	r26, 0x00	; 0
    6126:	81 83       	std	Z+1, r24	; 0x01
    6128:	92 83       	std	Z+2, r25	; 0x02
    612a:	a3 83       	std	Z+3, r26	; 0x03
    612c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    6130:	80 e0       	ldi	r24, 0x00	; 0
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	02 c0       	rjmp	.+4      	; 0x613a <MATCHARGS+0x48>
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	cd b7       	in	r28, 0x3d	; 61
    613c:	de b7       	in	r29, 0x3e	; 62
    613e:	29 96       	adiw	r28, 0x09	; 9
    6140:	e6 e0       	ldi	r30, 0x06	; 6
    6142:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00006146 <MATCHI_LEN>:
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
    614a:	00 97       	sbiw	r24, 0x00	; 0
    614c:	89 f0       	breq	.+34     	; 0x6170 <MATCHI_LEN+0x2a>
    614e:	61 15       	cp	r22, r1
    6150:	71 05       	cpc	r23, r1
    6152:	71 f0       	breq	.+28     	; 0x6170 <MATCHI_LEN+0x2a>
    6154:	eb 01       	movw	r28, r22
    6156:	09 90       	ld	r0, Y+
    6158:	00 20       	and	r0, r0
    615a:	e9 f7       	brne	.-6      	; 0x6156 <MATCHI_LEN+0x10>
    615c:	21 97       	sbiw	r28, 0x01	; 1
    615e:	c6 1b       	sub	r28, r22
    6160:	d7 0b       	sbc	r29, r23
    6162:	31 f0       	breq	.+12     	; 0x6170 <MATCHI_LEN+0x2a>
    6164:	ae 01       	movw	r20, r28
    6166:	2b df       	rcall	.-426    	; 0x5fbe <strncasecmp>
    6168:	89 2b       	or	r24, r25
    616a:	11 f4       	brne	.+4      	; 0x6170 <MATCHI_LEN+0x2a>
    616c:	ce 01       	movw	r24, r28
    616e:	02 c0       	rjmp	.+4      	; 0x6174 <MATCHI_LEN+0x2e>
    6170:	80 e0       	ldi	r24, 0x00	; 0
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	df 91       	pop	r29
    6176:	cf 91       	pop	r28
    6178:	08 95       	ret

0000617a <split_args>:
    617a:	a0 e0       	ldi	r26, 0x00	; 0
    617c:	b0 e0       	ldi	r27, 0x00	; 0
    617e:	e3 ec       	ldi	r30, 0xC3	; 195
    6180:	f0 e3       	ldi	r31, 0x30	; 48
    6182:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    6186:	dc 01       	movw	r26, r24
    6188:	6a 01       	movw	r12, r20
    618a:	8b 01       	movw	r16, r22
    618c:	fb 01       	movw	r30, r22
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	8c 15       	cp	r24, r12
    6194:	9d 05       	cpc	r25, r13
    6196:	24 f4       	brge	.+8      	; 0x61a0 <split_args+0x26>
    6198:	11 92       	st	Z+, r1
    619a:	11 92       	st	Z+, r1
    619c:	01 96       	adiw	r24, 0x01	; 1
    619e:	f9 cf       	rjmp	.-14     	; 0x6192 <split_args+0x18>
    61a0:	c1 14       	cp	r12, r1
    61a2:	d1 04       	cpc	r13, r1
    61a4:	d9 f1       	breq	.+118    	; 0x621c <split_args+0xa2>
    61a6:	10 97       	sbiw	r26, 0x00	; 0
    61a8:	c9 f1       	breq	.+114    	; 0x621c <split_args+0xa2>
    61aa:	ee 24       	eor	r14, r14
    61ac:	e3 94       	inc	r14
    61ae:	f1 2c       	mov	r15, r1
    61b0:	c0 e0       	ldi	r28, 0x00	; 0
    61b2:	d0 e0       	ldi	r29, 0x00	; 0
    61b4:	8c 91       	ld	r24, X
    61b6:	88 23       	and	r24, r24
    61b8:	b1 f1       	breq	.+108    	; 0x6226 <split_args+0xac>
    61ba:	cc 15       	cp	r28, r12
    61bc:	dd 05       	cpc	r29, r13
    61be:	9c f5       	brge	.+102    	; 0x6226 <split_args+0xac>
    61c0:	cd 01       	movw	r24, r26
    61c2:	65 df       	rcall	.-310    	; 0x608e <skipspaces>
    61c4:	dc 01       	movw	r26, r24
    61c6:	2c 91       	ld	r18, X
    61c8:	22 23       	and	r18, r18
    61ca:	69 f1       	breq	.+90     	; 0x6226 <split_args+0xac>
    61cc:	22 32       	cpi	r18, 0x22	; 34
    61ce:	79 f4       	brne	.+30     	; 0x61ee <split_args+0x74>
    61d0:	fc 01       	movw	r30, r24
    61d2:	31 96       	adiw	r30, 0x01	; 1
    61d4:	d8 01       	movw	r26, r16
    61d6:	ed 93       	st	X+, r30
    61d8:	fc 93       	st	X, r31
    61da:	df 01       	movw	r26, r30
    61dc:	80 81       	ld	r24, Z
    61de:	31 96       	adiw	r30, 0x01	; 1
    61e0:	88 23       	and	r24, r24
    61e2:	a9 f0       	breq	.+42     	; 0x620e <split_args+0x94>
    61e4:	82 32       	cpi	r24, 0x22	; 34
    61e6:	c9 f7       	brne	.-14     	; 0x61da <split_args+0x60>
    61e8:	1c 92       	st	X, r1
    61ea:	df 01       	movw	r26, r30
    61ec:	10 c0       	rjmp	.+32     	; 0x620e <split_args+0x94>
    61ee:	f8 01       	movw	r30, r16
    61f0:	91 83       	std	Z+1, r25	; 0x01
    61f2:	80 83       	st	Z, r24
    61f4:	fc 01       	movw	r30, r24
    61f6:	2e 2f       	mov	r18, r30
    61f8:	9f 2f       	mov	r25, r31
    61fa:	81 91       	ld	r24, Z+
    61fc:	3f ed       	ldi	r19, 0xDF	; 223
    61fe:	38 0f       	add	r19, r24
    6200:	3e 35       	cpi	r19, 0x5E	; 94
    6202:	c8 f3       	brcs	.-14     	; 0x61f6 <split_args+0x7c>
    6204:	88 23       	and	r24, r24
    6206:	69 f0       	breq	.+26     	; 0x6222 <split_args+0xa8>
    6208:	a2 2f       	mov	r26, r18
    620a:	b9 2f       	mov	r27, r25
    620c:	1d 92       	st	X+, r1
    620e:	21 96       	adiw	r28, 0x01	; 1
    6210:	ff ef       	ldi	r31, 0xFF	; 255
    6212:	ef 1a       	sub	r14, r31
    6214:	ff 0a       	sbc	r15, r31
    6216:	0e 5f       	subi	r16, 0xFE	; 254
    6218:	1f 4f       	sbci	r17, 0xFF	; 255
    621a:	cc cf       	rjmp	.-104    	; 0x61b4 <split_args+0x3a>
    621c:	80 e0       	ldi	r24, 0x00	; 0
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <split_args+0xae>
    6222:	c7 01       	movw	r24, r14
    6224:	01 c0       	rjmp	.+2      	; 0x6228 <split_args+0xae>
    6226:	ce 01       	movw	r24, r28
    6228:	cd b7       	in	r28, 0x3d	; 61
    622a:	de b7       	in	r29, 0x3e	; 62
    622c:	e8 e0       	ldi	r30, 0x08	; 8
    622e:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

00006232 <get_token>:
    6232:	ef 92       	push	r14
    6234:	ff 92       	push	r15
    6236:	0f 93       	push	r16
    6238:	1f 93       	push	r17
    623a:	cf 93       	push	r28
    623c:	df 93       	push	r29
    623e:	eb 01       	movw	r28, r22
    6240:	8a 01       	movw	r16, r20
    6242:	18 82       	st	Y, r1
    6244:	00 97       	sbiw	r24, 0x00	; 0
    6246:	89 f1       	breq	.+98     	; 0x62aa <get_token+0x78>
    6248:	fc 01       	movw	r30, r24
    624a:	20 81       	ld	r18, Z
    624c:	22 23       	and	r18, r18
    624e:	79 f1       	breq	.+94     	; 0x62ae <get_token+0x7c>
    6250:	1e df       	rcall	.-452    	; 0x608e <skipspaces>
    6252:	7c 01       	movw	r14, r24
    6254:	0c df       	rcall	.-488    	; 0x606e <trim_tail>
    6256:	f7 01       	movw	r30, r14
    6258:	cf 01       	movw	r24, r30
    625a:	21 91       	ld	r18, Z+
    625c:	21 32       	cpi	r18, 0x21	; 33
    625e:	e0 f0       	brcs	.+56     	; 0x6298 <get_token+0x66>
    6260:	10 16       	cp	r1, r16
    6262:	11 06       	cpc	r1, r17
    6264:	cc f4       	brge	.+50     	; 0x6298 <get_token+0x66>
    6266:	22 32       	cpi	r18, 0x22	; 34
    6268:	79 f4       	brne	.+30     	; 0x6288 <get_token+0x56>
    626a:	fc 01       	movw	r30, r24
    626c:	31 96       	adiw	r30, 0x01	; 1
    626e:	0c 0f       	add	r16, r28
    6270:	1d 1f       	adc	r17, r29
    6272:	cf 01       	movw	r24, r30
    6274:	21 91       	ld	r18, Z+
    6276:	22 23       	and	r18, r18
    6278:	79 f0       	breq	.+30     	; 0x6298 <get_token+0x66>
    627a:	22 32       	cpi	r18, 0x22	; 34
    627c:	59 f0       	breq	.+22     	; 0x6294 <get_token+0x62>
    627e:	c0 17       	cp	r28, r16
    6280:	d1 07       	cpc	r29, r17
    6282:	51 f0       	breq	.+20     	; 0x6298 <get_token+0x66>
    6284:	29 93       	st	Y+, r18
    6286:	f5 cf       	rjmp	.-22     	; 0x6272 <get_token+0x40>
    6288:	2c 32       	cpi	r18, 0x2C	; 44
    628a:	31 f0       	breq	.+12     	; 0x6298 <get_token+0x66>
    628c:	29 93       	st	Y+, r18
    628e:	01 50       	subi	r16, 0x01	; 1
    6290:	11 09       	sbc	r17, r1
    6292:	e2 cf       	rjmp	.-60     	; 0x6258 <get_token+0x26>
    6294:	cf 01       	movw	r24, r30
    6296:	18 82       	st	Y, r1
    6298:	fa de       	rcall	.-524    	; 0x608e <skipspaces>
    629a:	fc 01       	movw	r30, r24
    629c:	80 81       	ld	r24, Z
    629e:	8c 32       	cpi	r24, 0x2C	; 44
    62a0:	09 f4       	brne	.+2      	; 0x62a4 <get_token+0x72>
    62a2:	31 96       	adiw	r30, 0x01	; 1
    62a4:	18 82       	st	Y, r1
    62a6:	cf 01       	movw	r24, r30
    62a8:	02 c0       	rjmp	.+4      	; 0x62ae <get_token+0x7c>
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	e6 e0       	ldi	r30, 0x06	; 6
    62b4:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

000062b8 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    62b8:	a2 e0       	ldi	r26, 0x02	; 2
    62ba:	b0 e0       	ldi	r27, 0x00	; 0
    62bc:	e2 e6       	ldi	r30, 0x62	; 98
    62be:	f1 e3       	ldi	r31, 0x31	; 49
    62c0:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    62c4:	00 97       	sbiw	r24, 0x00	; 0
    62c6:	79 f1       	breq	.+94     	; 0x6326 <get_value+0x6e>
    62c8:	fc 01       	movw	r30, r24
    62ca:	20 81       	ld	r18, Z
    62cc:	22 23       	and	r18, r18
    62ce:	59 f1       	breq	.+86     	; 0x6326 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    62d0:	de de       	rcall	.-580    	; 0x608e <skipspaces>
    62d2:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    62d4:	6f e2       	ldi	r22, 0x2F	; 47
    62d6:	73 e0       	ldi	r23, 0x03	; 3
    62d8:	36 df       	rcall	.-404    	; 0x6146 <MATCHI_LEN>
    62da:	00 97       	sbiw	r24, 0x00	; 0
    62dc:	29 f0       	breq	.+10     	; 0x62e8 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    62de:	08 0f       	add	r16, r24
    62e0:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    62e2:	40 e1       	ldi	r20, 0x10	; 16
    62e4:	50 e0       	ldi	r21, 0x00	; 0
    62e6:	18 c0       	rjmp	.+48     	; 0x6318 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    62e8:	62 e3       	ldi	r22, 0x32	; 50
    62ea:	73 e0       	ldi	r23, 0x03	; 3
    62ec:	c8 01       	movw	r24, r16
    62ee:	2b df       	rcall	.-426    	; 0x6146 <MATCHI_LEN>
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	29 f0       	breq	.+10     	; 0x62fe <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    62f4:	08 0f       	add	r16, r24
    62f6:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    62f8:	48 e0       	ldi	r20, 0x08	; 8
    62fa:	50 e0       	ldi	r21, 0x00	; 0
    62fc:	0d c0       	rjmp	.+26     	; 0x6318 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    62fe:	65 e3       	ldi	r22, 0x35	; 53
    6300:	73 e0       	ldi	r23, 0x03	; 3
    6302:	c8 01       	movw	r24, r16
    6304:	20 df       	rcall	.-448    	; 0x6146 <MATCHI_LEN>
    6306:	00 97       	sbiw	r24, 0x00	; 0
    6308:	29 f0       	breq	.+10     	; 0x6314 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    630a:	08 0f       	add	r16, r24
    630c:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    630e:	42 e0       	ldi	r20, 0x02	; 2
    6310:	50 e0       	ldi	r21, 0x00	; 0
    6312:	02 c0       	rjmp	.+4      	; 0x6318 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6314:	4a e0       	ldi	r20, 0x0A	; 10
    6316:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6318:	be 01       	movw	r22, r28
    631a:	6f 5f       	subi	r22, 0xFF	; 255
    631c:	7f 4f       	sbci	r23, 0xFF	; 255
    631e:	c8 01       	movw	r24, r16
    6320:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    6324:	03 c0       	rjmp	.+6      	; 0x632c <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6326:	60 e0       	ldi	r22, 0x00	; 0
    6328:	70 e0       	ldi	r23, 0x00	; 0
    632a:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    632c:	22 96       	adiw	r28, 0x02	; 2
    632e:	e4 e0       	ldi	r30, 0x04	; 4
    6330:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00006334 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6334:	78 94       	sei
    6336:	08 95       	ret

00006338 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6338:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    633a:	89 e0       	ldi	r24, 0x09	; 9
    633c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6340:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6344:	8f e1       	ldi	r24, 0x1F	; 31
    6346:	9e e4       	ldi	r25, 0x4E	; 78
    6348:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    634c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6350:	ef e6       	ldi	r30, 0x6F	; 111
    6352:	f0 e0       	ldi	r31, 0x00	; 0
    6354:	80 81       	ld	r24, Z
    6356:	82 60       	ori	r24, 0x02	; 2
    6358:	80 83       	st	Z, r24
    sei();
    635a:	78 94       	sei
    635c:	08 95       	ret

0000635e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    635e:	1f 92       	push	r1
    6360:	0f 92       	push	r0
    6362:	0f b6       	in	r0, 0x3f	; 63
    6364:	0f 92       	push	r0
    6366:	11 24       	eor	r1, r1
    6368:	0b b6       	in	r0, 0x3b	; 59
    636a:	0f 92       	push	r0
    636c:	2f 93       	push	r18
    636e:	3f 93       	push	r19
    6370:	4f 93       	push	r20
    6372:	5f 93       	push	r21
    6374:	6f 93       	push	r22
    6376:	7f 93       	push	r23
    6378:	8f 93       	push	r24
    637a:	9f 93       	push	r25
    637c:	af 93       	push	r26
    637e:	bf 93       	push	r27
    6380:	ef 93       	push	r30
    6382:	ff 93       	push	r31
    execute_timers();
    6384:	36 d2       	rcall	.+1132   	; 0x67f2 <execute_timers>
}
    6386:	ff 91       	pop	r31
    6388:	ef 91       	pop	r30
    638a:	bf 91       	pop	r27
    638c:	af 91       	pop	r26
    638e:	9f 91       	pop	r25
    6390:	8f 91       	pop	r24
    6392:	7f 91       	pop	r23
    6394:	6f 91       	pop	r22
    6396:	5f 91       	pop	r21
    6398:	4f 91       	pop	r20
    639a:	3f 91       	pop	r19
    639c:	2f 91       	pop	r18
    639e:	0f 90       	pop	r0
    63a0:	0b be       	out	0x3b, r0	; 59
    63a2:	0f 90       	pop	r0
    63a4:	0f be       	out	0x3f, r0	; 63
    63a6:	0f 90       	pop	r0
    63a8:	1f 90       	pop	r1
    63aa:	18 95       	reti

000063ac <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    63ac:	0f 93       	push	r16
    63ae:	1f 93       	push	r17
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    63b6:	f8 94       	cli

    count1 = TCNT1;
    63b8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63bc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    63c0:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <__clock>
    63c4:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <__clock+0x1>
    63c8:	a0 91 59 1b 	lds	r26, 0x1B59	; 0x801b59 <__clock+0x2>
    63cc:	b0 91 5a 1b 	lds	r27, 0x1B5A	; 0x801b5a <__clock+0x3>
    63d0:	80 83       	st	Z, r24
    63d2:	91 83       	std	Z+1, r25	; 0x01
    63d4:	a2 83       	std	Z+2, r26	; 0x02
    63d6:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    63d8:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <__clock+0x4>
    63dc:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <__clock+0x5>
    63e0:	a0 91 5d 1b 	lds	r26, 0x1B5D	; 0x801b5d <__clock+0x6>
    63e4:	b0 91 5e 1b 	lds	r27, 0x1B5E	; 0x801b5e <__clock+0x7>
    63e8:	84 83       	std	Z+4, r24	; 0x04
    63ea:	95 83       	std	Z+5, r25	; 0x05
    63ec:	a6 83       	std	Z+6, r26	; 0x06
    63ee:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    63f0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63f4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    63f8:	b1 9b       	sbis	0x16, 1	; 22
    63fa:	03 c0       	rjmp	.+6      	; 0x6402 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    63fc:	c0 e0       	ldi	r28, 0x00	; 0
    63fe:	d0 e0       	ldi	r29, 0x00	; 0
    6400:	3f c0       	rjmp	.+126    	; 0x6480 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6402:	82 17       	cp	r24, r18
    6404:	93 07       	cpc	r25, r19
    6406:	d0 f1       	brcs	.+116    	; 0x647c <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6408:	c0 e0       	ldi	r28, 0x00	; 0
    640a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    640c:	40 e0       	ldi	r20, 0x00	; 0
    640e:	50 e0       	ldi	r21, 0x00	; 0
    6410:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6412:	9a 01       	movw	r18, r20
    6414:	ab 01       	movw	r20, r22
    6416:	28 0f       	add	r18, r24
    6418:	39 1f       	adc	r19, r25
    641a:	41 1d       	adc	r20, r1
    641c:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    641e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6420:	a2 e3       	ldi	r26, 0x32	; 50
    6422:	b0 e0       	ldi	r27, 0x00	; 0
    6424:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    6428:	04 81       	ldd	r16, Z+4	; 0x04
    642a:	15 81       	ldd	r17, Z+5	; 0x05
    642c:	26 81       	ldd	r18, Z+6	; 0x06
    642e:	37 81       	ldd	r19, Z+7	; 0x07
    6430:	dc 01       	movw	r26, r24
    6432:	cb 01       	movw	r24, r22
    6434:	80 0f       	add	r24, r16
    6436:	91 1f       	adc	r25, r17
    6438:	a2 1f       	adc	r26, r18
    643a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    643c:	81 15       	cp	r24, r1
    643e:	2a ec       	ldi	r18, 0xCA	; 202
    6440:	92 07       	cpc	r25, r18
    6442:	2a e9       	ldi	r18, 0x9A	; 154
    6444:	a2 07       	cpc	r26, r18
    6446:	2b e3       	ldi	r18, 0x3B	; 59
    6448:	b2 07       	cpc	r27, r18
    644a:	2c f4       	brge	.+10     	; 0x6456 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    644c:	84 83       	std	Z+4, r24	; 0x04
    644e:	95 83       	std	Z+5, r25	; 0x05
    6450:	a6 83       	std	Z+6, r26	; 0x06
    6452:	b7 83       	std	Z+7, r27	; 0x07
    6454:	1a c0       	rjmp	.+52     	; 0x648a <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6456:	9a 5c       	subi	r25, 0xCA	; 202
    6458:	aa 49       	sbci	r26, 0x9A	; 154
    645a:	bb 43       	sbci	r27, 0x3B	; 59
    645c:	84 83       	std	Z+4, r24	; 0x04
    645e:	95 83       	std	Z+5, r25	; 0x05
    6460:	a6 83       	std	Z+6, r26	; 0x06
    6462:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6464:	80 81       	ld	r24, Z
    6466:	91 81       	ldd	r25, Z+1	; 0x01
    6468:	a2 81       	ldd	r26, Z+2	; 0x02
    646a:	b3 81       	ldd	r27, Z+3	; 0x03
    646c:	01 96       	adiw	r24, 0x01	; 1
    646e:	a1 1d       	adc	r26, r1
    6470:	b1 1d       	adc	r27, r1
    6472:	80 83       	st	Z, r24
    6474:	91 83       	std	Z+1, r25	; 0x01
    6476:	a2 83       	std	Z+2, r26	; 0x02
    6478:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    647a:	07 c0       	rjmp	.+14     	; 0x648a <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    647c:	cf ef       	ldi	r28, 0xFF	; 255
    647e:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6480:	40 e2       	ldi	r20, 0x20	; 32
    6482:	5e e4       	ldi	r21, 0x4E	; 78
    6484:	60 e0       	ldi	r22, 0x00	; 0
    6486:	70 e0       	ldi	r23, 0x00	; 0
    6488:	c4 cf       	rjmp	.-120    	; 0x6412 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    648a:	ce 01       	movw	r24, r28
    648c:	df 91       	pop	r29
    648e:	cf 91       	pop	r28
    6490:	1f 91       	pop	r17
    6492:	0f 91       	pop	r16
    6494:	08 95       	ret

00006496 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6496:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <__clock+0x4>
    649a:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <__clock+0x5>
    649e:	a0 91 5d 1b 	lds	r26, 0x1B5D	; 0x801b5d <__clock+0x6>
    64a2:	b0 91 5e 1b 	lds	r27, 0x1B5E	; 0x801b5e <__clock+0x7>
    64a6:	80 5c       	subi	r24, 0xC0	; 192
    64a8:	9d 4b       	sbci	r25, 0xBD	; 189
    64aa:	a0 4f       	sbci	r26, 0xF0	; 240
    64ac:	bf 4f       	sbci	r27, 0xFF	; 255
    64ae:	80 93 5b 1b 	sts	0x1B5B, r24	; 0x801b5b <__clock+0x4>
    64b2:	90 93 5c 1b 	sts	0x1B5C, r25	; 0x801b5c <__clock+0x5>
    64b6:	a0 93 5d 1b 	sts	0x1B5D, r26	; 0x801b5d <__clock+0x6>
    64ba:	b0 93 5e 1b 	sts	0x1B5E, r27	; 0x801b5e <__clock+0x7>
    64be:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <__clock+0x4>
    64c2:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <__clock+0x5>
    64c6:	a0 91 5d 1b 	lds	r26, 0x1B5D	; 0x801b5d <__clock+0x6>
    64ca:	b0 91 5e 1b 	lds	r27, 0x1B5E	; 0x801b5e <__clock+0x7>
    64ce:	81 15       	cp	r24, r1
    64d0:	9a 4c       	sbci	r25, 0xCA	; 202
    64d2:	aa 49       	sbci	r26, 0x9A	; 154
    64d4:	bb 43       	sbci	r27, 0x3B	; 59
    64d6:	dc f0       	brlt	.+54     	; 0x650e <clock_task+0x78>
    64d8:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <__clock>
    64dc:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <__clock+0x1>
    64e0:	a0 91 59 1b 	lds	r26, 0x1B59	; 0x801b59 <__clock+0x2>
    64e4:	b0 91 5a 1b 	lds	r27, 0x1B5A	; 0x801b5a <__clock+0x3>
    64e8:	01 96       	adiw	r24, 0x01	; 1
    64ea:	a1 1d       	adc	r26, r1
    64ec:	b1 1d       	adc	r27, r1
    64ee:	80 93 57 1b 	sts	0x1B57, r24	; 0x801b57 <__clock>
    64f2:	90 93 58 1b 	sts	0x1B58, r25	; 0x801b58 <__clock+0x1>
    64f6:	a0 93 59 1b 	sts	0x1B59, r26	; 0x801b59 <__clock+0x2>
    64fa:	b0 93 5a 1b 	sts	0x1B5A, r27	; 0x801b5a <__clock+0x3>
    64fe:	10 92 5b 1b 	sts	0x1B5B, r1	; 0x801b5b <__clock+0x4>
    6502:	10 92 5c 1b 	sts	0x1B5C, r1	; 0x801b5c <__clock+0x5>
    6506:	10 92 5d 1b 	sts	0x1B5D, r1	; 0x801b5d <__clock+0x6>
    650a:	10 92 5e 1b 	sts	0x1B5E, r1	; 0x801b5e <__clock+0x7>
    650e:	08 95       	ret

00006510 <clock_settime.part.2>:
    6510:	fc 01       	movw	r30, r24
    6512:	84 81       	ldd	r24, Z+4	; 0x04
    6514:	95 81       	ldd	r25, Z+5	; 0x05
    6516:	a6 81       	ldd	r26, Z+6	; 0x06
    6518:	b7 81       	ldd	r27, Z+7	; 0x07
    651a:	80 93 5b 1b 	sts	0x1B5B, r24	; 0x801b5b <__clock+0x4>
    651e:	90 93 5c 1b 	sts	0x1B5C, r25	; 0x801b5c <__clock+0x5>
    6522:	a0 93 5d 1b 	sts	0x1B5D, r26	; 0x801b5d <__clock+0x6>
    6526:	b0 93 5e 1b 	sts	0x1B5E, r27	; 0x801b5e <__clock+0x7>
    652a:	80 81       	ld	r24, Z
    652c:	91 81       	ldd	r25, Z+1	; 0x01
    652e:	a2 81       	ldd	r26, Z+2	; 0x02
    6530:	b3 81       	ldd	r27, Z+3	; 0x03
    6532:	80 93 57 1b 	sts	0x1B57, r24	; 0x801b57 <__clock>
    6536:	90 93 58 1b 	sts	0x1B58, r25	; 0x801b58 <__clock+0x1>
    653a:	a0 93 59 1b 	sts	0x1B59, r26	; 0x801b59 <__clock+0x2>
    653e:	b0 93 5a 1b 	sts	0x1B5A, r27	; 0x801b5a <__clock+0x3>
    6542:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <__clock+0x4>
    6546:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <__clock+0x5>
    654a:	a0 91 5d 1b 	lds	r26, 0x1B5D	; 0x801b5d <__clock+0x6>
    654e:	b0 91 5e 1b 	lds	r27, 0x1B5E	; 0x801b5e <__clock+0x7>
    6552:	44 81       	ldd	r20, Z+4	; 0x04
    6554:	55 81       	ldd	r21, Z+5	; 0x05
    6556:	66 81       	ldd	r22, Z+6	; 0x06
    6558:	77 81       	ldd	r23, Z+7	; 0x07
    655a:	48 17       	cp	r20, r24
    655c:	59 07       	cpc	r21, r25
    655e:	6a 07       	cpc	r22, r26
    6560:	7b 07       	cpc	r23, r27
    6562:	b9 f6       	brne	.-82     	; 0x6512 <clock_settime.part.2+0x2>
    6564:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <__clock>
    6568:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <__clock+0x1>
    656c:	a0 91 59 1b 	lds	r26, 0x1B59	; 0x801b59 <__clock+0x2>
    6570:	b0 91 5a 1b 	lds	r27, 0x1B5A	; 0x801b5a <__clock+0x3>
    6574:	40 81       	ld	r20, Z
    6576:	51 81       	ldd	r21, Z+1	; 0x01
    6578:	62 81       	ldd	r22, Z+2	; 0x02
    657a:	73 81       	ldd	r23, Z+3	; 0x03
    657c:	48 17       	cp	r20, r24
    657e:	59 07       	cpc	r21, r25
    6580:	6a 07       	cpc	r22, r26
    6582:	7b 07       	cpc	r23, r27
    6584:	31 f6       	brne	.-116    	; 0x6512 <clock_settime.part.2+0x2>
    6586:	80 e0       	ldi	r24, 0x00	; 0
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	08 95       	ret

0000658c <set_timers>:
    658c:	00 d0       	rcall	.+0      	; 0x658e <set_timers+0x2>
    658e:	1f 92       	push	r1
    6590:	00 97       	sbiw	r24, 0x00	; 0
    6592:	79 f1       	breq	.+94     	; 0x65f2 <set_timers+0x66>
    6594:	ef e5       	ldi	r30, 0x5F	; 95
    6596:	fb e1       	ldi	r31, 0x1B	; 27
    6598:	4f ef       	ldi	r20, 0xFF	; 255
    659a:	5f ef       	ldi	r21, 0xFF	; 255
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	60 81       	ld	r22, Z
    65a2:	71 81       	ldd	r23, Z+1	; 0x01
    65a4:	86 17       	cp	r24, r22
    65a6:	97 07       	cpc	r25, r23
    65a8:	79 f0       	breq	.+30     	; 0x65c8 <set_timers+0x3c>
    65aa:	67 2b       	or	r22, r23
    65ac:	71 f4       	brne	.+28     	; 0x65ca <set_timers+0x3e>
    65ae:	f9 01       	movw	r30, r18
    65b0:	ee 0f       	add	r30, r30
    65b2:	ff 1f       	adc	r31, r31
    65b4:	e2 0f       	add	r30, r18
    65b6:	f3 1f       	adc	r31, r19
    65b8:	e1 5a       	subi	r30, 0xA1	; 161
    65ba:	f4 4e       	sbci	r31, 0xE4	; 228
    65bc:	91 83       	std	Z+1, r25	; 0x01
    65be:	80 83       	st	Z, r24
    65c0:	81 e0       	ldi	r24, 0x01	; 1
    65c2:	82 83       	std	Z+2, r24	; 0x02
    65c4:	c9 01       	movw	r24, r18
    65c6:	19 c0       	rjmp	.+50     	; 0x65fa <set_timers+0x6e>
    65c8:	a9 01       	movw	r20, r18
    65ca:	2f 5f       	subi	r18, 0xFF	; 255
    65cc:	3f 4f       	sbci	r19, 0xFF	; 255
    65ce:	33 96       	adiw	r30, 0x03	; 3
    65d0:	28 30       	cpi	r18, 0x08	; 8
    65d2:	31 05       	cpc	r19, r1
    65d4:	29 f7       	brne	.-54     	; 0x65a0 <set_timers+0x14>
    65d6:	4f 3f       	cpi	r20, 0xFF	; 255
    65d8:	8f ef       	ldi	r24, 0xFF	; 255
    65da:	58 07       	cpc	r21, r24
    65dc:	69 f4       	brne	.+26     	; 0x65f8 <set_timers+0x6c>
    65de:	8d ec       	ldi	r24, 0xCD	; 205
    65e0:	95 e0       	ldi	r25, 0x05	; 5
    65e2:	a0 e0       	ldi	r26, 0x00	; 0
    65e4:	ed b7       	in	r30, 0x3d	; 61
    65e6:	fe b7       	in	r31, 0x3e	; 62
    65e8:	81 83       	std	Z+1, r24	; 0x01
    65ea:	92 83       	std	Z+2, r25	; 0x02
    65ec:	a3 83       	std	Z+3, r26	; 0x03
    65ee:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    65f2:	8f ef       	ldi	r24, 0xFF	; 255
    65f4:	9f ef       	ldi	r25, 0xFF	; 255
    65f6:	01 c0       	rjmp	.+2      	; 0x65fa <set_timers+0x6e>
    65f8:	ca 01       	movw	r24, r20
    65fa:	0f 90       	pop	r0
    65fc:	0f 90       	pop	r0
    65fe:	0f 90       	pop	r0
    6600:	08 95       	ret

00006602 <delete_all_timers>:
    6602:	ef e5       	ldi	r30, 0x5F	; 95
    6604:	fb e1       	ldi	r31, 0x1B	; 27
    6606:	12 82       	std	Z+2, r1	; 0x02
    6608:	11 82       	std	Z+1, r1	; 0x01
    660a:	10 82       	st	Z, r1
    660c:	33 96       	adiw	r30, 0x03	; 3
    660e:	8b e1       	ldi	r24, 0x1B	; 27
    6610:	e7 37       	cpi	r30, 0x77	; 119
    6612:	f8 07       	cpc	r31, r24
    6614:	c1 f7       	brne	.-16     	; 0x6606 <delete_all_timers+0x4>
    6616:	08 95       	ret

00006618 <subtract_timespec>:
    6618:	0f 93       	push	r16
    661a:	1f 93       	push	r17
    661c:	cf 93       	push	r28
    661e:	df 93       	push	r29
    6620:	fc 01       	movw	r30, r24
    6622:	84 81       	ldd	r24, Z+4	; 0x04
    6624:	95 81       	ldd	r25, Z+5	; 0x05
    6626:	a6 81       	ldd	r26, Z+6	; 0x06
    6628:	b7 81       	ldd	r27, Z+7	; 0x07
    662a:	eb 01       	movw	r28, r22
    662c:	0c 81       	ldd	r16, Y+4	; 0x04
    662e:	1d 81       	ldd	r17, Y+5	; 0x05
    6630:	2e 81       	ldd	r18, Y+6	; 0x06
    6632:	3f 81       	ldd	r19, Y+7	; 0x07
    6634:	80 1b       	sub	r24, r16
    6636:	91 0b       	sbc	r25, r17
    6638:	a2 0b       	sbc	r26, r18
    663a:	b3 0b       	sbc	r27, r19
    663c:	b7 fd       	sbrc	r27, 7
    663e:	05 c0       	rjmp	.+10     	; 0x664a <subtract_timespec+0x32>
    6640:	84 83       	std	Z+4, r24	; 0x04
    6642:	95 83       	std	Z+5, r25	; 0x05
    6644:	a6 83       	std	Z+6, r26	; 0x06
    6646:	b7 83       	std	Z+7, r27	; 0x07
    6648:	12 c0       	rjmp	.+36     	; 0x666e <subtract_timespec+0x56>
    664a:	96 53       	subi	r25, 0x36	; 54
    664c:	a5 46       	sbci	r26, 0x65	; 101
    664e:	b4 4c       	sbci	r27, 0xC4	; 196
    6650:	84 83       	std	Z+4, r24	; 0x04
    6652:	95 83       	std	Z+5, r25	; 0x05
    6654:	a6 83       	std	Z+6, r26	; 0x06
    6656:	b7 83       	std	Z+7, r27	; 0x07
    6658:	80 81       	ld	r24, Z
    665a:	91 81       	ldd	r25, Z+1	; 0x01
    665c:	a2 81       	ldd	r26, Z+2	; 0x02
    665e:	b3 81       	ldd	r27, Z+3	; 0x03
    6660:	01 97       	sbiw	r24, 0x01	; 1
    6662:	a1 09       	sbc	r26, r1
    6664:	b1 09       	sbc	r27, r1
    6666:	80 83       	st	Z, r24
    6668:	91 83       	std	Z+1, r25	; 0x01
    666a:	a2 83       	std	Z+2, r26	; 0x02
    666c:	b3 83       	std	Z+3, r27	; 0x03
    666e:	80 81       	ld	r24, Z
    6670:	91 81       	ldd	r25, Z+1	; 0x01
    6672:	a2 81       	ldd	r26, Z+2	; 0x02
    6674:	b3 81       	ldd	r27, Z+3	; 0x03
    6676:	eb 01       	movw	r28, r22
    6678:	48 81       	ld	r20, Y
    667a:	59 81       	ldd	r21, Y+1	; 0x01
    667c:	6a 81       	ldd	r22, Y+2	; 0x02
    667e:	7b 81       	ldd	r23, Y+3	; 0x03
    6680:	84 1b       	sub	r24, r20
    6682:	95 0b       	sbc	r25, r21
    6684:	a6 0b       	sbc	r26, r22
    6686:	b7 0b       	sbc	r27, r23
    6688:	80 83       	st	Z, r24
    668a:	91 83       	std	Z+1, r25	; 0x01
    668c:	a2 83       	std	Z+2, r26	; 0x02
    668e:	b3 83       	std	Z+3, r27	; 0x03
    6690:	df 91       	pop	r29
    6692:	cf 91       	pop	r28
    6694:	1f 91       	pop	r17
    6696:	0f 91       	pop	r16
    6698:	08 95       	ret

0000669a <ts_to_str>:
    669a:	ad b7       	in	r26, 0x3d	; 61
    669c:	be b7       	in	r27, 0x3e	; 62
    669e:	1f 97       	sbiw	r26, 0x0f	; 15
    66a0:	0f b6       	in	r0, 0x3f	; 63
    66a2:	f8 94       	cli
    66a4:	be bf       	out	0x3e, r27	; 62
    66a6:	0f be       	out	0x3f, r0	; 63
    66a8:	ad bf       	out	0x3d, r26	; 61
    66aa:	fc 01       	movw	r30, r24
    66ac:	44 81       	ldd	r20, Z+4	; 0x04
    66ae:	55 81       	ldd	r21, Z+5	; 0x05
    66b0:	66 81       	ldd	r22, Z+6	; 0x06
    66b2:	77 81       	ldd	r23, Z+7	; 0x07
    66b4:	ed b7       	in	r30, 0x3d	; 61
    66b6:	fe b7       	in	r31, 0x3e	; 62
    66b8:	44 87       	std	Z+12, r20	; 0x0c
    66ba:	55 87       	std	Z+13, r21	; 0x0d
    66bc:	66 87       	std	Z+14, r22	; 0x0e
    66be:	77 87       	std	Z+15, r23	; 0x0f
    66c0:	fc 01       	movw	r30, r24
    66c2:	80 81       	ld	r24, Z
    66c4:	91 81       	ldd	r25, Z+1	; 0x01
    66c6:	a2 81       	ldd	r26, Z+2	; 0x02
    66c8:	b3 81       	ldd	r27, Z+3	; 0x03
    66ca:	ed b7       	in	r30, 0x3d	; 61
    66cc:	fe b7       	in	r31, 0x3e	; 62
    66ce:	80 87       	std	Z+8, r24	; 0x08
    66d0:	91 87       	std	Z+9, r25	; 0x09
    66d2:	a2 87       	std	Z+10, r26	; 0x0a
    66d4:	b3 87       	std	Z+11, r27	; 0x0b
    66d6:	83 ec       	ldi	r24, 0xC3	; 195
    66d8:	95 e0       	ldi	r25, 0x05	; 5
    66da:	a0 e0       	ldi	r26, 0x00	; 0
    66dc:	85 83       	std	Z+5, r24	; 0x05
    66de:	96 83       	std	Z+6, r25	; 0x06
    66e0:	a7 83       	std	Z+7, r26	; 0x07
    66e2:	8f e1       	ldi	r24, 0x1F	; 31
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	94 83       	std	Z+4, r25	; 0x04
    66e8:	83 83       	std	Z+3, r24	; 0x03
    66ea:	8c e8       	ldi	r24, 0x8C	; 140
    66ec:	97 e1       	ldi	r25, 0x17	; 23
    66ee:	92 83       	std	Z+2, r25	; 0x02
    66f0:	81 83       	std	Z+1, r24	; 0x01
    66f2:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <snprintf_P>
    66f6:	8c e8       	ldi	r24, 0x8C	; 140
    66f8:	97 e1       	ldi	r25, 0x17	; 23
    66fa:	ad b7       	in	r26, 0x3d	; 61
    66fc:	be b7       	in	r27, 0x3e	; 62
    66fe:	1f 96       	adiw	r26, 0x0f	; 15
    6700:	0f b6       	in	r0, 0x3f	; 63
    6702:	f8 94       	cli
    6704:	be bf       	out	0x3e, r27	; 62
    6706:	0f be       	out	0x3f, r0	; 63
    6708:	ad bf       	out	0x3d, r26	; 61
    670a:	08 95       	ret

0000670c <clock_elapsed_begin>:
    670c:	64 e8       	ldi	r22, 0x84	; 132
    670e:	77 e1       	ldi	r23, 0x17	; 23
    6710:	80 e0       	ldi	r24, 0x00	; 0
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	4b ce       	rjmp	.-874    	; 0x63ac <clock_gettime>
    6716:	08 95       	ret

00006718 <clock_elapsed_end>:
    6718:	af e0       	ldi	r26, 0x0F	; 15
    671a:	b0 e0       	ldi	r27, 0x00	; 0
    671c:	e2 e9       	ldi	r30, 0x92	; 146
    671e:	f3 e3       	ldi	r31, 0x33	; 51
    6720:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    6724:	8c 01       	movw	r16, r24
    6726:	be 01       	movw	r22, r28
    6728:	68 5f       	subi	r22, 0xF8	; 248
    672a:	7f 4f       	sbci	r23, 0xFF	; 255
    672c:	80 e0       	ldi	r24, 0x00	; 0
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	3d de       	rcall	.-902    	; 0x63ac <clock_gettime>
    6732:	64 e8       	ldi	r22, 0x84	; 132
    6734:	77 e1       	ldi	r23, 0x17	; 23
    6736:	ce 01       	movw	r24, r28
    6738:	08 96       	adiw	r24, 0x08	; 8
    673a:	6e df       	rcall	.-292    	; 0x6618 <subtract_timespec>
    673c:	01 15       	cp	r16, r1
    673e:	11 05       	cpc	r17, r1
    6740:	b1 f0       	breq	.+44     	; 0x676e <clock_elapsed_end+0x56>
    6742:	f8 01       	movw	r30, r16
    6744:	80 81       	ld	r24, Z
    6746:	88 23       	and	r24, r24
    6748:	91 f0       	breq	.+36     	; 0x676e <clock_elapsed_end+0x56>
    674a:	ce 01       	movw	r24, r28
    674c:	08 96       	adiw	r24, 0x08	; 8
    674e:	a5 df       	rcall	.-182    	; 0x669a <ts_to_str>
    6750:	ed b7       	in	r30, 0x3d	; 61
    6752:	fe b7       	in	r31, 0x3e	; 62
    6754:	97 83       	std	Z+7, r25	; 0x07
    6756:	86 83       	std	Z+6, r24	; 0x06
    6758:	15 83       	std	Z+5, r17	; 0x05
    675a:	04 83       	std	Z+4, r16	; 0x04
    675c:	85 eb       	ldi	r24, 0xB5	; 181
    675e:	95 e0       	ldi	r25, 0x05	; 5
    6760:	a0 e0       	ldi	r26, 0x00	; 0
    6762:	81 83       	std	Z+1, r24	; 0x01
    6764:	92 83       	std	Z+2, r25	; 0x02
    6766:	a3 83       	std	Z+3, r26	; 0x03
    6768:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    676c:	0f c0       	rjmp	.+30     	; 0x678c <clock_elapsed_end+0x74>
    676e:	ce 01       	movw	r24, r28
    6770:	08 96       	adiw	r24, 0x08	; 8
    6772:	93 df       	rcall	.-218    	; 0x669a <ts_to_str>
    6774:	ed b7       	in	r30, 0x3d	; 61
    6776:	fe b7       	in	r31, 0x3e	; 62
    6778:	95 83       	std	Z+5, r25	; 0x05
    677a:	84 83       	std	Z+4, r24	; 0x04
    677c:	8a ea       	ldi	r24, 0xAA	; 170
    677e:	95 e0       	ldi	r25, 0x05	; 5
    6780:	a0 e0       	ldi	r26, 0x00	; 0
    6782:	81 83       	std	Z+1, r24	; 0x01
    6784:	92 83       	std	Z+2, r25	; 0x02
    6786:	a3 83       	std	Z+3, r26	; 0x03
    6788:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    678c:	2f 96       	adiw	r28, 0x0f	; 15
    678e:	e4 e0       	ldi	r30, 0x04	; 4
    6790:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00006794 <clock_clear>:
    6794:	a8 e0       	ldi	r26, 0x08	; 8
    6796:	b0 e0       	ldi	r27, 0x00	; 0
    6798:	e0 ed       	ldi	r30, 0xD0	; 208
    679a:	f3 e3       	ldi	r31, 0x33	; 51
    679c:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    67a0:	1d 82       	std	Y+5, r1	; 0x05
    67a2:	1e 82       	std	Y+6, r1	; 0x06
    67a4:	1f 82       	std	Y+7, r1	; 0x07
    67a6:	18 86       	std	Y+8, r1	; 0x08
    67a8:	19 82       	std	Y+1, r1	; 0x01
    67aa:	1a 82       	std	Y+2, r1	; 0x02
    67ac:	1b 82       	std	Y+3, r1	; 0x03
    67ae:	1c 82       	std	Y+4, r1	; 0x04
    67b0:	ce 01       	movw	r24, r28
    67b2:	01 96       	adiw	r24, 0x01	; 1
    67b4:	ad de       	rcall	.-678    	; 0x6510 <clock_settime.part.2>
    67b6:	e7 e7       	ldi	r30, 0x77	; 119
    67b8:	fb e1       	ldi	r31, 0x1B	; 27
    67ba:	11 82       	std	Z+1, r1	; 0x01
    67bc:	10 82       	st	Z, r1
    67be:	13 82       	std	Z+3, r1	; 0x03
    67c0:	12 82       	std	Z+2, r1	; 0x02
    67c2:	28 96       	adiw	r28, 0x08	; 8
    67c4:	e2 e0       	ldi	r30, 0x02	; 2
    67c6:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000067ca <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    67ca:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    67ce:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    67d2:	89 2b       	or	r24, r25
    67d4:	69 f0       	breq	.+26     	; 0x67f0 <enable_timers+0x26>
    67d6:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <timers_enabled>
    67da:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <timers_enabled+0x1>
    67de:	89 2b       	or	r24, r25
    67e0:	39 f4       	brne	.+14     	; 0x67f0 <enable_timers+0x26>
    {
        enable_system_task();
    67e2:	a8 dd       	rcall	.-1200   	; 0x6334 <enable_system_task>
        timers_enabled = 1;
    67e4:	81 e0       	ldi	r24, 0x01	; 1
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <timers_enabled+0x1>
    67ec:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <timers_enabled>
    67f0:	08 95       	ret

000067f2 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	cf e5       	ldi	r28, 0x5F	; 95
    67f8:	db e1       	ldi	r29, 0x1B	; 27
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    67fa:	8a 81       	ldd	r24, Y+2	; 0x02
    67fc:	88 23       	and	r24, r24
    67fe:	29 f0       	breq	.+10     	; 0x680a <execute_timers+0x18>
    6800:	e8 81       	ld	r30, Y
    6802:	f9 81       	ldd	r31, Y+1	; 0x01
    6804:	30 97       	sbiw	r30, 0x00	; 0
    6806:	09 f0       	breq	.+2      	; 0x680a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6808:	09 95       	icall
    680a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    680c:	8b e1       	ldi	r24, 0x1B	; 27
    680e:	c7 37       	cpi	r28, 0x77	; 119
    6810:	d8 07       	cpc	r29, r24
    6812:	99 f7       	brne	.-26     	; 0x67fa <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6814:	df 91       	pop	r29
    6816:	cf 91       	pop	r28
    6818:	08 95       	ret

0000681a <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    681a:	00 d0       	rcall	.+0      	; 0x681c <init_timers+0x2>
    681c:	1f 92       	push	r1
    printf("Timers init called\n");
    681e:	86 e9       	ldi	r24, 0x96	; 150
    6820:	95 e0       	ldi	r25, 0x05	; 5
    6822:	a0 e0       	ldi	r26, 0x00	; 0
    6824:	ed b7       	in	r30, 0x3d	; 61
    6826:	fe b7       	in	r31, 0x3e	; 62
    6828:	81 83       	std	Z+1, r24	; 0x01
    682a:	92 83       	std	Z+2, r25	; 0x02
    682c:	a3 83       	std	Z+3, r26	; 0x03
    682e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    if(!timers_configured)
    6832:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6836:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    683a:	89 2b       	or	r24, r25
    683c:	a9 f4       	brne	.+42     	; 0x6868 <init_timers+0x4e>
    {
        install_timers_isr();
    683e:	7c dd       	rcall	.-1288   	; 0x6338 <install_timers_isr>
        timers_configured = 1;
    6840:	81 e0       	ldi	r24, 0x01	; 1
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <timers_configured+0x1>
    6848:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <timers_configured>
        timers_enabled = 0;
    684c:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <timers_enabled+0x1>
    6850:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <timers_enabled>
        printf("Timers configured\n");
    6854:	83 e8       	ldi	r24, 0x83	; 131
    6856:	95 e0       	ldi	r25, 0x05	; 5
    6858:	a0 e0       	ldi	r26, 0x00	; 0
    685a:	ed b7       	in	r30, 0x3d	; 61
    685c:	fe b7       	in	r31, 0x3e	; 62
    685e:	81 83       	std	Z+1, r24	; 0x01
    6860:	92 83       	std	Z+2, r25	; 0x02
    6862:	a3 83       	std	Z+3, r26	; 0x03
    6864:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6868:	cc de       	rcall	.-616    	; 0x6602 <delete_all_timers>
    686a:	94 df       	rcall	.-216    	; 0x6794 <clock_clear>
    printf("Clock Init\n");
    686c:	87 e7       	ldi	r24, 0x77	; 119
    686e:	95 e0       	ldi	r25, 0x05	; 5
    6870:	a0 e0       	ldi	r26, 0x00	; 0
    6872:	ed b7       	in	r30, 0x3d	; 61
    6874:	fe b7       	in	r31, 0x3e	; 62
    6876:	81 83       	std	Z+1, r24	; 0x01
    6878:	92 83       	std	Z+2, r25	; 0x02
    687a:	a3 83       	std	Z+3, r26	; 0x03
    687c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6880:	61 e0       	ldi	r22, 0x01	; 1
    6882:	70 e0       	ldi	r23, 0x00	; 0
    6884:	8b e4       	ldi	r24, 0x4B	; 75
    6886:	92 e3       	ldi	r25, 0x32	; 50
    6888:	81 de       	rcall	.-766    	; 0x658c <set_timers>
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	51 f4       	brne	.+20     	; 0x68a2 <init_timers+0x88>
        printf("Clock task init failed\n");
    688e:	8f e5       	ldi	r24, 0x5F	; 95
    6890:	95 e0       	ldi	r25, 0x05	; 5
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	ed b7       	in	r30, 0x3d	; 61
    6896:	fe b7       	in	r31, 0x3e	; 62
    6898:	81 83       	std	Z+1, r24	; 0x01
    689a:	92 83       	std	Z+2, r25	; 0x02
    689c:	a3 83       	std	Z+3, r26	; 0x03
    689e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Clock Installed\n");
    68a2:	8e e4       	ldi	r24, 0x4E	; 78
    68a4:	95 e0       	ldi	r25, 0x05	; 5
    68a6:	a0 e0       	ldi	r26, 0x00	; 0
    68a8:	ed b7       	in	r30, 0x3d	; 61
    68aa:	fe b7       	in	r31, 0x3e	; 62
    68ac:	81 83       	std	Z+1, r24	; 0x01
    68ae:	92 83       	std	Z+2, r25	; 0x02
    68b0:	a3 83       	std	Z+3, r26	; 0x03
    68b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    enable_timers();
    68b6:	89 df       	rcall	.-238    	; 0x67ca <enable_timers>

    printf("Timers enabled\n");
    68b8:	8e e3       	ldi	r24, 0x3E	; 62
    68ba:	95 e0       	ldi	r25, 0x05	; 5
    68bc:	a0 e0       	ldi	r26, 0x00	; 0
    68be:	ed b7       	in	r30, 0x3d	; 61
    68c0:	fe b7       	in	r31, 0x3e	; 62
    68c2:	81 83       	std	Z+1, r24	; 0x01
    68c4:	92 83       	std	Z+2, r25	; 0x02
    68c6:	a3 83       	std	Z+3, r26	; 0x03
    68c8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
    68cc:	0f 90       	pop	r0
    68ce:	0f 90       	pop	r0
    68d0:	0f 90       	pop	r0
    68d2:	08 95       	ret

000068d4 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    68d4:	89 2b       	or	r24, r25
    68d6:	81 f4       	brne	.+32     	; 0x68f8 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    68d8:	fb 01       	movw	r30, r22
    68da:	10 82       	st	Z, r1
    68dc:	11 82       	std	Z+1, r1	; 0x01
    68de:	12 82       	std	Z+2, r1	; 0x02
    68e0:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    68e2:	80 e4       	ldi	r24, 0x40	; 64
    68e4:	92 e4       	ldi	r25, 0x42	; 66
    68e6:	af e0       	ldi	r26, 0x0F	; 15
    68e8:	b0 e0       	ldi	r27, 0x00	; 0
    68ea:	84 83       	std	Z+4, r24	; 0x04
    68ec:	95 83       	std	Z+5, r25	; 0x05
    68ee:	a6 83       	std	Z+6, r26	; 0x06
    68f0:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    68f2:	80 e0       	ldi	r24, 0x00	; 0
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    68f8:	8f ef       	ldi	r24, 0xFF	; 255
    68fa:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    68fc:	08 95       	ret

000068fe <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    68fe:	89 2b       	or	r24, r25
    6900:	19 f4       	brne	.+6      	; 0x6908 <clock_settime+0xa>
    6902:	cb 01       	movw	r24, r22
    6904:	05 ce       	rjmp	.-1014   	; 0x6510 <clock_settime.part.2>
    6906:	08 95       	ret
        return(-1);
    6908:	8f ef       	ldi	r24, 0xFF	; 255
    690a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    690c:	08 95       	ret

0000690e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    690e:	9c 01       	movw	r18, r24
    6910:	83 70       	andi	r24, 0x03	; 3
    6912:	99 27       	eor	r25, r25
    6914:	00 97       	sbiw	r24, 0x00	; 0
    6916:	69 f4       	brne	.+26     	; 0x6932 <IS_Leap+0x24>
    6918:	2c 36       	cpi	r18, 0x6C	; 108
    691a:	47 e0       	ldi	r20, 0x07	; 7
    691c:	34 07       	cpc	r19, r20
    691e:	59 f0       	breq	.+22     	; 0x6936 <IS_Leap+0x28>
    6920:	51 e0       	ldi	r21, 0x01	; 1
    6922:	40 e0       	ldi	r20, 0x00	; 0
    6924:	24 33       	cpi	r18, 0x34	; 52
    6926:	38 40       	sbci	r19, 0x08	; 8
    6928:	09 f4       	brne	.+2      	; 0x692c <IS_Leap+0x1e>
    692a:	50 e0       	ldi	r21, 0x00	; 0
    692c:	85 2f       	mov	r24, r21
    692e:	94 2f       	mov	r25, r20
    6930:	08 95       	ret
    6932:	80 e0       	ldi	r24, 0x00	; 0
    6934:	90 e0       	ldi	r25, 0x00	; 0
    6936:	08 95       	ret

00006938 <tm_mon_to_ascii>:
    6938:	8c 30       	cpi	r24, 0x0C	; 12
    693a:	91 05       	cpc	r25, r1
    693c:	40 f4       	brcc	.+16     	; 0x694e <tm_mon_to_ascii+0x16>
    693e:	88 0f       	add	r24, r24
    6940:	99 1f       	adc	r25, r25
    6942:	fc 01       	movw	r30, r24
    6944:	e5 5f       	subi	r30, 0xF5	; 245
    6946:	fe 4f       	sbci	r31, 0xFE	; 254
    6948:	80 81       	ld	r24, Z
    694a:	91 81       	ldd	r25, Z+1	; 0x01
    694c:	08 95       	ret
    694e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6952:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6956:	08 95       	ret

00006958 <Days_Per_Month>:
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
    695c:	8c 30       	cpi	r24, 0x0C	; 12
    695e:	91 05       	cpc	r25, r1
    6960:	24 f0       	brlt	.+8      	; 0x696a <Days_Per_Month+0x12>
    6962:	6f 5f       	subi	r22, 0xFF	; 255
    6964:	7f 4f       	sbci	r23, 0xFF	; 255
    6966:	0c 97       	sbiw	r24, 0x0c	; 12
    6968:	f9 cf       	rjmp	.-14     	; 0x695c <Days_Per_Month+0x4>
    696a:	97 ff       	sbrs	r25, 7
    696c:	04 c0       	rjmp	.+8      	; 0x6976 <Days_Per_Month+0x1e>
    696e:	61 50       	subi	r22, 0x01	; 1
    6970:	71 09       	sbc	r23, r1
    6972:	0c 96       	adiw	r24, 0x0c	; 12
    6974:	fa cf       	rjmp	.-12     	; 0x696a <Days_Per_Month+0x12>
    6976:	fc 01       	movw	r30, r24
    6978:	ee 0f       	add	r30, r30
    697a:	ff 1f       	adc	r31, r31
    697c:	e8 57       	subi	r30, 0x78	; 120
    697e:	fc 4f       	sbci	r31, 0xFC	; 252
    6980:	c0 81       	ld	r28, Z
    6982:	d1 81       	ldd	r29, Z+1	; 0x01
    6984:	01 97       	sbiw	r24, 0x01	; 1
    6986:	29 f4       	brne	.+10     	; 0x6992 <Days_Per_Month+0x3a>
    6988:	cb 01       	movw	r24, r22
    698a:	c1 df       	rcall	.-126    	; 0x690e <IS_Leap>
    698c:	89 2b       	or	r24, r25
    698e:	09 f0       	breq	.+2      	; 0x6992 <Days_Per_Month+0x3a>
    6990:	21 96       	adiw	r28, 0x01	; 1
    6992:	ce 01       	movw	r24, r28
    6994:	df 91       	pop	r29
    6996:	cf 91       	pop	r28
    6998:	08 95       	ret

0000699a <time_to_tm>:
    699a:	a0 e0       	ldi	r26, 0x00	; 0
    699c:	b0 e0       	ldi	r27, 0x00	; 0
    699e:	e3 ed       	ldi	r30, 0xD3	; 211
    69a0:	f4 e3       	ldi	r31, 0x34	; 52
    69a2:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    69a6:	e8 01       	movw	r28, r16
    69a8:	e6 e1       	ldi	r30, 0x16	; 22
    69aa:	d8 01       	movw	r26, r16
    69ac:	1d 92       	st	X+, r1
    69ae:	ea 95       	dec	r30
    69b0:	e9 f7       	brne	.-6      	; 0x69ac <time_to_tm+0x12>
    69b2:	61 15       	cp	r22, r1
    69b4:	bd e5       	ldi	r27, 0x5D	; 93
    69b6:	7b 07       	cpc	r23, r27
    69b8:	bd ef       	ldi	r27, 0xFD	; 253
    69ba:	8b 07       	cpc	r24, r27
    69bc:	bf ef       	ldi	r27, 0xFF	; 255
    69be:	9b 07       	cpc	r25, r27
    69c0:	08 f0       	brcs	.+2      	; 0x69c4 <time_to_tm+0x2a>
    69c2:	c0 c0       	rjmp	.+384    	; 0x6b44 <time_to_tm+0x1aa>
    69c4:	6b 01       	movw	r12, r22
    69c6:	7c 01       	movw	r14, r24
    69c8:	c2 1a       	sub	r12, r18
    69ca:	d3 0a       	sbc	r13, r19
    69cc:	e4 0a       	sbc	r14, r20
    69ce:	f5 0a       	sbc	r15, r21
    69d0:	46 01       	movw	r8, r12
    69d2:	57 01       	movw	r10, r14
    69d4:	e0 e8       	ldi	r30, 0x80	; 128
    69d6:	ce 16       	cp	r12, r30
    69d8:	ee ea       	ldi	r30, 0xAE	; 174
    69da:	de 06       	cpc	r13, r30
    69dc:	ee ef       	ldi	r30, 0xFE	; 254
    69de:	ee 06       	cpc	r14, r30
    69e0:	ef ef       	ldi	r30, 0xFF	; 255
    69e2:	fe 06       	cpc	r15, r30
    69e4:	50 f0       	brcs	.+20     	; 0x69fa <time_to_tm+0x60>
    69e6:	80 e8       	ldi	r24, 0x80	; 128
    69e8:	88 0e       	add	r8, r24
    69ea:	81 e5       	ldi	r24, 0x51	; 81
    69ec:	98 1e       	adc	r9, r24
    69ee:	81 e0       	ldi	r24, 0x01	; 1
    69f0:	a8 1e       	adc	r10, r24
    69f2:	b1 1c       	adc	r11, r1
    69f4:	01 e0       	ldi	r16, 0x01	; 1
    69f6:	10 e0       	ldi	r17, 0x00	; 0
    69f8:	02 c0       	rjmp	.+4      	; 0x69fe <time_to_tm+0x64>
    69fa:	00 e0       	ldi	r16, 0x00	; 0
    69fc:	10 e0       	ldi	r17, 0x00	; 0
    69fe:	8c e3       	ldi	r24, 0x3C	; 60
    6a00:	48 2e       	mov	r4, r24
    6a02:	51 2c       	mov	r5, r1
    6a04:	61 2c       	mov	r6, r1
    6a06:	71 2c       	mov	r7, r1
    6a08:	c5 01       	movw	r24, r10
    6a0a:	b4 01       	movw	r22, r8
    6a0c:	a3 01       	movw	r20, r6
    6a0e:	92 01       	movw	r18, r4
    6a10:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    6a14:	79 83       	std	Y+1, r23	; 0x01
    6a16:	68 83       	st	Y, r22
    6a18:	ca 01       	movw	r24, r20
    6a1a:	b9 01       	movw	r22, r18
    6a1c:	a3 01       	movw	r20, r6
    6a1e:	92 01       	movw	r18, r4
    6a20:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    6a24:	7b 83       	std	Y+3, r23	; 0x03
    6a26:	6a 83       	std	Y+2, r22	; 0x02
    6a28:	c5 01       	movw	r24, r10
    6a2a:	b4 01       	movw	r22, r8
    6a2c:	20 e1       	ldi	r18, 0x10	; 16
    6a2e:	3e e0       	ldi	r19, 0x0E	; 14
    6a30:	40 e0       	ldi	r20, 0x00	; 0
    6a32:	50 e0       	ldi	r21, 0x00	; 0
    6a34:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    6a38:	ca 01       	movw	r24, r20
    6a3a:	b9 01       	movw	r22, r18
    6a3c:	28 e1       	ldi	r18, 0x18	; 24
    6a3e:	30 e0       	ldi	r19, 0x00	; 0
    6a40:	40 e0       	ldi	r20, 0x00	; 0
    6a42:	50 e0       	ldi	r21, 0x00	; 0
    6a44:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    6a48:	7d 83       	std	Y+5, r23	; 0x05
    6a4a:	6c 83       	std	Y+4, r22	; 0x04
    6a4c:	01 15       	cp	r16, r1
    6a4e:	11 05       	cpc	r17, r1
    6a50:	89 f0       	breq	.+34     	; 0x6a74 <time_to_tm+0xda>
    6a52:	85 e4       	ldi	r24, 0x45	; 69
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	9b 87       	std	Y+11, r25	; 0x0b
    6a58:	8a 87       	std	Y+10, r24	; 0x0a
    6a5a:	8b e0       	ldi	r24, 0x0B	; 11
    6a5c:	90 e0       	ldi	r25, 0x00	; 0
    6a5e:	99 87       	std	Y+9, r25	; 0x09
    6a60:	88 87       	std	Y+8, r24	; 0x08
    6a62:	8f e1       	ldi	r24, 0x1F	; 31
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	9f 83       	std	Y+7, r25	; 0x07
    6a68:	8e 83       	std	Y+6, r24	; 0x06
    6a6a:	83 e0       	ldi	r24, 0x03	; 3
    6a6c:	90 e0       	ldi	r25, 0x00	; 0
    6a6e:	9d 87       	std	Y+13, r25	; 0x0d
    6a70:	8c 87       	std	Y+12, r24	; 0x0c
    6a72:	65 c0       	rjmp	.+202    	; 0x6b3e <time_to_tm+0x1a4>
    6a74:	c5 01       	movw	r24, r10
    6a76:	b4 01       	movw	r22, r8
    6a78:	20 e8       	ldi	r18, 0x80	; 128
    6a7a:	31 e5       	ldi	r19, 0x51	; 81
    6a7c:	41 e0       	ldi	r20, 0x01	; 1
    6a7e:	50 e0       	ldi	r21, 0x00	; 0
    6a80:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    6a84:	49 01       	movw	r8, r18
    6a86:	5a 01       	movw	r10, r20
    6a88:	ca 01       	movw	r24, r20
    6a8a:	b9 01       	movw	r22, r18
    6a8c:	6c 5f       	subi	r22, 0xFC	; 252
    6a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a90:	8f 4f       	sbci	r24, 0xFF	; 255
    6a92:	9f 4f       	sbci	r25, 0xFF	; 255
    6a94:	27 e0       	ldi	r18, 0x07	; 7
    6a96:	30 e0       	ldi	r19, 0x00	; 0
    6a98:	40 e0       	ldi	r20, 0x00	; 0
    6a9a:	50 e0       	ldi	r21, 0x00	; 0
    6a9c:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
    6aa0:	7d 87       	std	Y+13, r23	; 0x0d
    6aa2:	6c 87       	std	Y+12, r22	; 0x0c
    6aa4:	02 eb       	ldi	r16, 0xB2	; 178
    6aa6:	17 e0       	ldi	r17, 0x07	; 7
    6aa8:	c8 01       	movw	r24, r16
    6aaa:	31 df       	rcall	.-414    	; 0x690e <IS_Leap>
    6aac:	00 97       	sbiw	r24, 0x00	; 0
    6aae:	19 f4       	brne	.+6      	; 0x6ab6 <time_to_tm+0x11c>
    6ab0:	4d e6       	ldi	r20, 0x6D	; 109
    6ab2:	51 e0       	ldi	r21, 0x01	; 1
    6ab4:	02 c0       	rjmp	.+4      	; 0x6aba <time_to_tm+0x120>
    6ab6:	4e e6       	ldi	r20, 0x6E	; 110
    6ab8:	51 e0       	ldi	r21, 0x01	; 1
    6aba:	05 2e       	mov	r0, r21
    6abc:	00 0c       	add	r0, r0
    6abe:	66 0b       	sbc	r22, r22
    6ac0:	77 0b       	sbc	r23, r23
    6ac2:	84 16       	cp	r8, r20
    6ac4:	95 06       	cpc	r9, r21
    6ac6:	a6 06       	cpc	r10, r22
    6ac8:	b7 06       	cpc	r11, r23
    6aca:	3c f0       	brlt	.+14     	; 0x6ada <time_to_tm+0x140>
    6acc:	0f 5f       	subi	r16, 0xFF	; 255
    6ace:	1f 4f       	sbci	r17, 0xFF	; 255
    6ad0:	84 1a       	sub	r8, r20
    6ad2:	95 0a       	sbc	r9, r21
    6ad4:	a6 0a       	sbc	r10, r22
    6ad6:	b7 0a       	sbc	r11, r23
    6ad8:	e7 cf       	rjmp	.-50     	; 0x6aa8 <time_to_tm+0x10e>
    6ada:	0c 56       	subi	r16, 0x6C	; 108
    6adc:	17 40       	sbci	r17, 0x07	; 7
    6ade:	1b 87       	std	Y+11, r17	; 0x0b
    6ae0:	0a 87       	std	Y+10, r16	; 0x0a
    6ae2:	9f 86       	std	Y+15, r9	; 0x0f
    6ae4:	8e 86       	std	Y+14, r8	; 0x0e
    6ae6:	e8 e8       	ldi	r30, 0x88	; 136
    6ae8:	f3 e0       	ldi	r31, 0x03	; 3
    6aea:	20 e0       	ldi	r18, 0x00	; 0
    6aec:	30 e0       	ldi	r19, 0x00	; 0
    6aee:	18 14       	cp	r1, r8
    6af0:	19 04       	cpc	r1, r9
    6af2:	1a 04       	cpc	r1, r10
    6af4:	1b 04       	cpc	r1, r11
    6af6:	e4 f4       	brge	.+56     	; 0x6b30 <time_to_tm+0x196>
    6af8:	2c 30       	cpi	r18, 0x0C	; 12
    6afa:	31 05       	cpc	r19, r1
    6afc:	c9 f0       	breq	.+50     	; 0x6b30 <time_to_tm+0x196>
    6afe:	41 91       	ld	r20, Z+
    6b00:	51 91       	ld	r21, Z+
    6b02:	21 30       	cpi	r18, 0x01	; 1
    6b04:	31 05       	cpc	r19, r1
    6b06:	21 f4       	brne	.+8      	; 0x6b10 <time_to_tm+0x176>
    6b08:	00 97       	sbiw	r24, 0x00	; 0
    6b0a:	11 f0       	breq	.+4      	; 0x6b10 <time_to_tm+0x176>
    6b0c:	4f 5f       	subi	r20, 0xFF	; 255
    6b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b10:	05 2e       	mov	r0, r21
    6b12:	00 0c       	add	r0, r0
    6b14:	66 0b       	sbc	r22, r22
    6b16:	77 0b       	sbc	r23, r23
    6b18:	84 16       	cp	r8, r20
    6b1a:	95 06       	cpc	r9, r21
    6b1c:	a6 06       	cpc	r10, r22
    6b1e:	b7 06       	cpc	r11, r23
    6b20:	3c f0       	brlt	.+14     	; 0x6b30 <time_to_tm+0x196>
    6b22:	84 1a       	sub	r8, r20
    6b24:	95 0a       	sbc	r9, r21
    6b26:	a6 0a       	sbc	r10, r22
    6b28:	b7 0a       	sbc	r11, r23
    6b2a:	2f 5f       	subi	r18, 0xFF	; 255
    6b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b2e:	df cf       	rjmp	.-66     	; 0x6aee <time_to_tm+0x154>
    6b30:	39 87       	std	Y+9, r19	; 0x09
    6b32:	28 87       	std	Y+8, r18	; 0x08
    6b34:	af ef       	ldi	r26, 0xFF	; 255
    6b36:	8a 1a       	sub	r8, r26
    6b38:	9a 0a       	sbc	r9, r26
    6b3a:	9f 82       	std	Y+7, r9	; 0x07
    6b3c:	8e 82       	std	Y+6, r8	; 0x06
    6b3e:	b6 01       	movw	r22, r12
    6b40:	c7 01       	movw	r24, r14
    6b42:	04 c0       	rjmp	.+8      	; 0x6b4c <time_to_tm+0x1b2>
    6b44:	6f ef       	ldi	r22, 0xFF	; 255
    6b46:	7f ef       	ldi	r23, 0xFF	; 255
    6b48:	8f ef       	ldi	r24, 0xFF	; 255
    6b4a:	9f ef       	ldi	r25, 0xFF	; 255
    6b4c:	cd b7       	in	r28, 0x3d	; 61
    6b4e:	de b7       	in	r29, 0x3e	; 62
    6b50:	e0 e1       	ldi	r30, 0x10	; 16
    6b52:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

00006b56 <gmtime_r>:
    6b56:	0f 93       	push	r16
    6b58:	1f 93       	push	r17
    6b5a:	cf 93       	push	r28
    6b5c:	df 93       	push	r29
    6b5e:	eb 01       	movw	r28, r22
    6b60:	fc 01       	movw	r30, r24
    6b62:	60 81       	ld	r22, Z
    6b64:	71 81       	ldd	r23, Z+1	; 0x01
    6b66:	82 81       	ldd	r24, Z+2	; 0x02
    6b68:	93 81       	ldd	r25, Z+3	; 0x03
    6b6a:	8e 01       	movw	r16, r28
    6b6c:	20 e0       	ldi	r18, 0x00	; 0
    6b6e:	30 e0       	ldi	r19, 0x00	; 0
    6b70:	a9 01       	movw	r20, r18
    6b72:	13 df       	rcall	.-474    	; 0x699a <time_to_tm>
    6b74:	ce 01       	movw	r24, r28
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	1f 91       	pop	r17
    6b7c:	0f 91       	pop	r16
    6b7e:	08 95       	ret

00006b80 <gmtime>:
    6b80:	2e ec       	ldi	r18, 0xCE	; 206
    6b82:	37 e1       	ldi	r19, 0x17	; 23
    6b84:	30 93 e5 17 	sts	0x17E5, r19	; 0x8017e5 <p.3677+0x1>
    6b88:	20 93 e4 17 	sts	0x17E4, r18	; 0x8017e4 <p.3677>
    6b8c:	b9 01       	movw	r22, r18
    6b8e:	e3 df       	rcall	.-58     	; 0x6b56 <gmtime_r>
    6b90:	8e ec       	ldi	r24, 0xCE	; 206
    6b92:	97 e1       	ldi	r25, 0x17	; 23
    6b94:	08 95       	ret

00006b96 <gettimezone>:
    6b96:	e7 e7       	ldi	r30, 0x77	; 119
    6b98:	fb e1       	ldi	r31, 0x1B	; 27
    6b9a:	20 81       	ld	r18, Z
    6b9c:	31 81       	ldd	r19, Z+1	; 0x01
    6b9e:	dc 01       	movw	r26, r24
    6ba0:	2d 93       	st	X+, r18
    6ba2:	3c 93       	st	X, r19
    6ba4:	22 81       	ldd	r18, Z+2	; 0x02
    6ba6:	33 81       	ldd	r19, Z+3	; 0x03
    6ba8:	fc 01       	movw	r30, r24
    6baa:	33 83       	std	Z+3, r19	; 0x03
    6bac:	22 83       	std	Z+2, r18	; 0x02
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	08 95       	ret

00006bb4 <settimezone>:
    6bb4:	cf 93       	push	r28
    6bb6:	df 93       	push	r29
    6bb8:	ec 01       	movw	r28, r24
    6bba:	28 81       	ld	r18, Y
    6bbc:	39 81       	ldd	r19, Y+1	; 0x01
    6bbe:	e7 e7       	ldi	r30, 0x77	; 119
    6bc0:	fb e1       	ldi	r31, 0x1B	; 27
    6bc2:	31 83       	std	Z+1, r19	; 0x01
    6bc4:	20 83       	st	Z, r18
    6bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bca:	93 83       	std	Z+3, r25	; 0x03
    6bcc:	82 83       	std	Z+2, r24	; 0x02
    6bce:	80 e0       	ldi	r24, 0x00	; 0
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	df 91       	pop	r29
    6bd4:	cf 91       	pop	r28
    6bd6:	08 95       	ret

00006bd8 <gettimeofday>:
    6bd8:	a8 e0       	ldi	r26, 0x08	; 8
    6bda:	b0 e0       	ldi	r27, 0x00	; 0
    6bdc:	e2 ef       	ldi	r30, 0xF2	; 242
    6bde:	f5 e3       	ldi	r31, 0x35	; 53
    6be0:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    6be4:	8c 01       	movw	r16, r24
    6be6:	7b 01       	movw	r14, r22
    6be8:	be 01       	movw	r22, r28
    6bea:	6f 5f       	subi	r22, 0xFF	; 255
    6bec:	7f 4f       	sbci	r23, 0xFF	; 255
    6bee:	80 e0       	ldi	r24, 0x00	; 0
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	dc db       	rcall	.-2120   	; 0x63ac <clock_gettime>
    6bf4:	89 81       	ldd	r24, Y+1	; 0x01
    6bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf8:	ab 81       	ldd	r26, Y+3	; 0x03
    6bfa:	bc 81       	ldd	r27, Y+4	; 0x04
    6bfc:	f8 01       	movw	r30, r16
    6bfe:	80 83       	st	Z, r24
    6c00:	91 83       	std	Z+1, r25	; 0x01
    6c02:	a2 83       	std	Z+2, r26	; 0x02
    6c04:	b3 83       	std	Z+3, r27	; 0x03
    6c06:	6d 81       	ldd	r22, Y+5	; 0x05
    6c08:	7e 81       	ldd	r23, Y+6	; 0x06
    6c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    6c0c:	98 85       	ldd	r25, Y+8	; 0x08
    6c0e:	28 ee       	ldi	r18, 0xE8	; 232
    6c10:	33 e0       	ldi	r19, 0x03	; 3
    6c12:	40 e0       	ldi	r20, 0x00	; 0
    6c14:	50 e0       	ldi	r21, 0x00	; 0
    6c16:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
    6c1a:	f8 01       	movw	r30, r16
    6c1c:	24 83       	std	Z+4, r18	; 0x04
    6c1e:	35 83       	std	Z+5, r19	; 0x05
    6c20:	46 83       	std	Z+6, r20	; 0x06
    6c22:	57 83       	std	Z+7, r21	; 0x07
    6c24:	c7 01       	movw	r24, r14
    6c26:	b7 df       	rcall	.-146    	; 0x6b96 <gettimezone>
    6c28:	80 e0       	ldi	r24, 0x00	; 0
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	28 96       	adiw	r28, 0x08	; 8
    6c2e:	e6 e0       	ldi	r30, 0x06	; 6
    6c30:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00006c34 <time>:
    6c34:	cf 93       	push	r28
    6c36:	df 93       	push	r29
    6c38:	ec 01       	movw	r28, r24
    6c3a:	60 eb       	ldi	r22, 0xB0	; 176
    6c3c:	77 e1       	ldi	r23, 0x17	; 23
    6c3e:	80 e0       	ldi	r24, 0x00	; 0
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	b4 db       	rcall	.-2200   	; 0x63ac <clock_gettime>
    6c44:	20 97       	sbiw	r28, 0x00	; 0
    6c46:	61 f0       	breq	.+24     	; 0x6c60 <time+0x2c>
    6c48:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <ts.3755>
    6c4c:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6c50:	a0 91 b2 17 	lds	r26, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6c54:	b0 91 b3 17 	lds	r27, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    6c58:	88 83       	st	Y, r24
    6c5a:	99 83       	std	Y+1, r25	; 0x01
    6c5c:	aa 83       	std	Y+2, r26	; 0x02
    6c5e:	bb 83       	std	Y+3, r27	; 0x03
    6c60:	60 91 b0 17 	lds	r22, 0x17B0	; 0x8017b0 <ts.3755>
    6c64:	70 91 b1 17 	lds	r23, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6c68:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6c6c:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    6c70:	df 91       	pop	r29
    6c72:	cf 91       	pop	r28
    6c74:	08 95       	ret

00006c76 <is_dst>:
    6c76:	cf 92       	push	r12
    6c78:	df 92       	push	r13
    6c7a:	ef 92       	push	r14
    6c7c:	ff 92       	push	r15
    6c7e:	6b 01       	movw	r12, r22
    6c80:	7c 01       	movw	r14, r24
    6c82:	05 d4       	rcall	.+2058   	; 0x748e <set_dst>
    6c84:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <dst>
    6c88:	90 91 7c 1b 	lds	r25, 0x1B7C	; 0x801b7c <dst+0x1>
    6c8c:	a0 91 7d 1b 	lds	r26, 0x1B7D	; 0x801b7d <dst+0x2>
    6c90:	b0 91 7e 1b 	lds	r27, 0x1B7E	; 0x801b7e <dst+0x3>
    6c94:	c8 16       	cp	r12, r24
    6c96:	d9 06       	cpc	r13, r25
    6c98:	ea 06       	cpc	r14, r26
    6c9a:	fb 06       	cpc	r15, r27
    6c9c:	88 f0       	brcs	.+34     	; 0x6cc0 <is_dst+0x4a>
    6c9e:	81 e0       	ldi	r24, 0x01	; 1
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	40 91 7f 1b 	lds	r20, 0x1B7F	; 0x801b7f <dst+0x4>
    6ca6:	50 91 80 1b 	lds	r21, 0x1B80	; 0x801b80 <dst+0x5>
    6caa:	60 91 81 1b 	lds	r22, 0x1B81	; 0x801b81 <dst+0x6>
    6cae:	70 91 82 1b 	lds	r23, 0x1B82	; 0x801b82 <dst+0x7>
    6cb2:	4c 15       	cp	r20, r12
    6cb4:	5d 05       	cpc	r21, r13
    6cb6:	6e 05       	cpc	r22, r14
    6cb8:	7f 05       	cpc	r23, r15
    6cba:	20 f4       	brcc	.+8      	; 0x6cc4 <is_dst+0x4e>
    6cbc:	80 e0       	ldi	r24, 0x00	; 0
    6cbe:	02 c0       	rjmp	.+4      	; 0x6cc4 <is_dst+0x4e>
    6cc0:	80 e0       	ldi	r24, 0x00	; 0
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
    6cc4:	ff 90       	pop	r15
    6cc6:	ef 90       	pop	r14
    6cc8:	df 90       	pop	r13
    6cca:	cf 90       	pop	r12
    6ccc:	08 95       	ret

00006cce <localtime_r>:
    6cce:	4f 92       	push	r4
    6cd0:	5f 92       	push	r5
    6cd2:	6f 92       	push	r6
    6cd4:	7f 92       	push	r7
    6cd6:	af 92       	push	r10
    6cd8:	bf 92       	push	r11
    6cda:	cf 92       	push	r12
    6cdc:	df 92       	push	r13
    6cde:	ef 92       	push	r14
    6ce0:	ff 92       	push	r15
    6ce2:	0f 93       	push	r16
    6ce4:	1f 93       	push	r17
    6ce6:	cf 93       	push	r28
    6ce8:	df 93       	push	r29
    6cea:	00 d0       	rcall	.+0      	; 0x6cec <localtime_r+0x1e>
    6cec:	00 d0       	rcall	.+0      	; 0x6cee <localtime_r+0x20>
    6cee:	cd b7       	in	r28, 0x3d	; 61
    6cf0:	de b7       	in	r29, 0x3e	; 62
    6cf2:	5b 01       	movw	r10, r22
    6cf4:	fc 01       	movw	r30, r24
    6cf6:	40 80       	ld	r4, Z
    6cf8:	51 80       	ldd	r5, Z+1	; 0x01
    6cfa:	62 80       	ldd	r6, Z+2	; 0x02
    6cfc:	73 80       	ldd	r7, Z+3	; 0x03
    6cfe:	ce 01       	movw	r24, r28
    6d00:	01 96       	adiw	r24, 0x01	; 1
    6d02:	49 df       	rcall	.-366    	; 0x6b96 <gettimezone>
    6d04:	a9 81       	ldd	r26, Y+1	; 0x01
    6d06:	ba 81       	ldd	r27, Y+2	; 0x02
    6d08:	2c e3       	ldi	r18, 0x3C	; 60
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__usmulhisi3>
    6d10:	6b 01       	movw	r12, r22
    6d12:	7c 01       	movw	r14, r24
    6d14:	c3 01       	movw	r24, r6
    6d16:	b2 01       	movw	r22, r4
    6d18:	6c 19       	sub	r22, r12
    6d1a:	7d 09       	sbc	r23, r13
    6d1c:	8e 09       	sbc	r24, r14
    6d1e:	9f 09       	sbc	r25, r15
    6d20:	aa df       	rcall	.-172    	; 0x6c76 <is_dst>
    6d22:	89 2b       	or	r24, r25
    6d24:	31 f0       	breq	.+12     	; 0x6d32 <localtime_r+0x64>
    6d26:	f0 e1       	ldi	r31, 0x10	; 16
    6d28:	cf 1a       	sub	r12, r31
    6d2a:	fe e0       	ldi	r31, 0x0E	; 14
    6d2c:	df 0a       	sbc	r13, r31
    6d2e:	e1 08       	sbc	r14, r1
    6d30:	f1 08       	sbc	r15, r1
    6d32:	85 01       	movw	r16, r10
    6d34:	a7 01       	movw	r20, r14
    6d36:	96 01       	movw	r18, r12
    6d38:	c3 01       	movw	r24, r6
    6d3a:	b2 01       	movw	r22, r4
    6d3c:	2e de       	rcall	.-932    	; 0x699a <time_to_tm>
    6d3e:	c5 01       	movw	r24, r10
    6d40:	0f 90       	pop	r0
    6d42:	0f 90       	pop	r0
    6d44:	0f 90       	pop	r0
    6d46:	0f 90       	pop	r0
    6d48:	df 91       	pop	r29
    6d4a:	cf 91       	pop	r28
    6d4c:	1f 91       	pop	r17
    6d4e:	0f 91       	pop	r16
    6d50:	ff 90       	pop	r15
    6d52:	ef 90       	pop	r14
    6d54:	df 90       	pop	r13
    6d56:	cf 90       	pop	r12
    6d58:	bf 90       	pop	r11
    6d5a:	af 90       	pop	r10
    6d5c:	7f 90       	pop	r7
    6d5e:	6f 90       	pop	r6
    6d60:	5f 90       	pop	r5
    6d62:	4f 90       	pop	r4
    6d64:	08 95       	ret

00006d66 <localtime>:
    6d66:	68 eb       	ldi	r22, 0xB8	; 184
    6d68:	77 e1       	ldi	r23, 0x17	; 23
    6d6a:	b1 cf       	rjmp	.-158    	; 0x6cce <localtime_r>
    6d6c:	08 95       	ret

00006d6e <normalize>:
    6d6e:	aa e0       	ldi	r26, 0x0A	; 10
    6d70:	b0 e0       	ldi	r27, 0x00	; 0
    6d72:	ed eb       	ldi	r30, 0xBD	; 189
    6d74:	f6 e3       	ldi	r31, 0x36	; 54
    6d76:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    6d7a:	7c 01       	movw	r14, r24
    6d7c:	7a 87       	std	Y+10, r23	; 0x0a
    6d7e:	69 87       	std	Y+9, r22	; 0x09
    6d80:	f7 01       	movw	r30, r14
    6d82:	80 81       	ld	r24, Z
    6d84:	91 81       	ldd	r25, Z+1	; 0x01
    6d86:	8c 33       	cpi	r24, 0x3C	; 60
    6d88:	91 05       	cpc	r25, r1
    6d8a:	5c f0       	brlt	.+22     	; 0x6da2 <normalize+0x34>
    6d8c:	f7 01       	movw	r30, r14
    6d8e:	22 81       	ldd	r18, Z+2	; 0x02
    6d90:	33 81       	ldd	r19, Z+3	; 0x03
    6d92:	2f 5f       	subi	r18, 0xFF	; 255
    6d94:	3f 4f       	sbci	r19, 0xFF	; 255
    6d96:	33 83       	std	Z+3, r19	; 0x03
    6d98:	22 83       	std	Z+2, r18	; 0x02
    6d9a:	cc 97       	sbiw	r24, 0x3c	; 60
    6d9c:	91 83       	std	Z+1, r25	; 0x01
    6d9e:	80 83       	st	Z, r24
    6da0:	ef cf       	rjmp	.-34     	; 0x6d80 <normalize+0x12>
    6da2:	f7 01       	movw	r30, r14
    6da4:	01 90       	ld	r0, Z+
    6da6:	f0 81       	ld	r31, Z
    6da8:	e0 2d       	mov	r30, r0
    6daa:	fe 83       	std	Y+6, r31	; 0x06
    6dac:	ed 83       	std	Y+5, r30	; 0x05
    6dae:	f7 ff       	sbrs	r31, 7
    6db0:	0d c0       	rjmp	.+26     	; 0x6dcc <normalize+0x5e>
    6db2:	f7 01       	movw	r30, r14
    6db4:	82 81       	ldd	r24, Z+2	; 0x02
    6db6:	93 81       	ldd	r25, Z+3	; 0x03
    6db8:	01 97       	sbiw	r24, 0x01	; 1
    6dba:	93 83       	std	Z+3, r25	; 0x03
    6dbc:	82 83       	std	Z+2, r24	; 0x02
    6dbe:	6d 81       	ldd	r22, Y+5	; 0x05
    6dc0:	7e 81       	ldd	r23, Y+6	; 0x06
    6dc2:	64 5c       	subi	r22, 0xC4	; 196
    6dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6dc6:	71 83       	std	Z+1, r23	; 0x01
    6dc8:	60 83       	st	Z, r22
    6dca:	eb cf       	rjmp	.-42     	; 0x6da2 <normalize+0x34>
    6dcc:	f7 01       	movw	r30, r14
    6dce:	82 81       	ldd	r24, Z+2	; 0x02
    6dd0:	93 81       	ldd	r25, Z+3	; 0x03
    6dd2:	8c 33       	cpi	r24, 0x3C	; 60
    6dd4:	91 05       	cpc	r25, r1
    6dd6:	5c f0       	brlt	.+22     	; 0x6dee <normalize+0x80>
    6dd8:	f7 01       	movw	r30, r14
    6dda:	24 81       	ldd	r18, Z+4	; 0x04
    6ddc:	35 81       	ldd	r19, Z+5	; 0x05
    6dde:	2f 5f       	subi	r18, 0xFF	; 255
    6de0:	3f 4f       	sbci	r19, 0xFF	; 255
    6de2:	35 83       	std	Z+5, r19	; 0x05
    6de4:	24 83       	std	Z+4, r18	; 0x04
    6de6:	cc 97       	sbiw	r24, 0x3c	; 60
    6de8:	93 83       	std	Z+3, r25	; 0x03
    6dea:	82 83       	std	Z+2, r24	; 0x02
    6dec:	ef cf       	rjmp	.-34     	; 0x6dcc <normalize+0x5e>
    6dee:	f7 01       	movw	r30, r14
    6df0:	22 80       	ldd	r2, Z+2	; 0x02
    6df2:	33 80       	ldd	r3, Z+3	; 0x03
    6df4:	37 fe       	sbrs	r3, 7
    6df6:	0d c0       	rjmp	.+26     	; 0x6e12 <normalize+0xa4>
    6df8:	f7 01       	movw	r30, r14
    6dfa:	84 81       	ldd	r24, Z+4	; 0x04
    6dfc:	95 81       	ldd	r25, Z+5	; 0x05
    6dfe:	01 97       	sbiw	r24, 0x01	; 1
    6e00:	95 83       	std	Z+5, r25	; 0x05
    6e02:	84 83       	std	Z+4, r24	; 0x04
    6e04:	fc e3       	ldi	r31, 0x3C	; 60
    6e06:	2f 0e       	add	r2, r31
    6e08:	31 1c       	adc	r3, r1
    6e0a:	f7 01       	movw	r30, r14
    6e0c:	33 82       	std	Z+3, r3	; 0x03
    6e0e:	22 82       	std	Z+2, r2	; 0x02
    6e10:	ee cf       	rjmp	.-36     	; 0x6dee <normalize+0x80>
    6e12:	f7 01       	movw	r30, r14
    6e14:	84 81       	ldd	r24, Z+4	; 0x04
    6e16:	95 81       	ldd	r25, Z+5	; 0x05
    6e18:	88 31       	cpi	r24, 0x18	; 24
    6e1a:	91 05       	cpc	r25, r1
    6e1c:	5c f0       	brlt	.+22     	; 0x6e34 <normalize+0xc6>
    6e1e:	f7 01       	movw	r30, r14
    6e20:	26 81       	ldd	r18, Z+6	; 0x06
    6e22:	37 81       	ldd	r19, Z+7	; 0x07
    6e24:	2f 5f       	subi	r18, 0xFF	; 255
    6e26:	3f 4f       	sbci	r19, 0xFF	; 255
    6e28:	37 83       	std	Z+7, r19	; 0x07
    6e2a:	26 83       	std	Z+6, r18	; 0x06
    6e2c:	48 97       	sbiw	r24, 0x18	; 24
    6e2e:	95 83       	std	Z+5, r25	; 0x05
    6e30:	84 83       	std	Z+4, r24	; 0x04
    6e32:	ef cf       	rjmp	.-34     	; 0x6e12 <normalize+0xa4>
    6e34:	f7 01       	movw	r30, r14
    6e36:	04 81       	ldd	r16, Z+4	; 0x04
    6e38:	15 81       	ldd	r17, Z+5	; 0x05
    6e3a:	17 ff       	sbrs	r17, 7
    6e3c:	0b c0       	rjmp	.+22     	; 0x6e54 <normalize+0xe6>
    6e3e:	f7 01       	movw	r30, r14
    6e40:	86 81       	ldd	r24, Z+6	; 0x06
    6e42:	97 81       	ldd	r25, Z+7	; 0x07
    6e44:	01 97       	sbiw	r24, 0x01	; 1
    6e46:	97 83       	std	Z+7, r25	; 0x07
    6e48:	86 83       	std	Z+6, r24	; 0x06
    6e4a:	08 5e       	subi	r16, 0xE8	; 232
    6e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e4e:	15 83       	std	Z+5, r17	; 0x05
    6e50:	04 83       	std	Z+4, r16	; 0x04
    6e52:	f0 cf       	rjmp	.-32     	; 0x6e34 <normalize+0xc6>
    6e54:	f7 01       	movw	r30, r14
    6e56:	80 85       	ldd	r24, Z+8	; 0x08
    6e58:	91 85       	ldd	r25, Z+9	; 0x09
    6e5a:	8c 30       	cpi	r24, 0x0C	; 12
    6e5c:	91 05       	cpc	r25, r1
    6e5e:	5c f0       	brlt	.+22     	; 0x6e76 <normalize+0x108>
    6e60:	f7 01       	movw	r30, r14
    6e62:	22 85       	ldd	r18, Z+10	; 0x0a
    6e64:	33 85       	ldd	r19, Z+11	; 0x0b
    6e66:	2f 5f       	subi	r18, 0xFF	; 255
    6e68:	3f 4f       	sbci	r19, 0xFF	; 255
    6e6a:	33 87       	std	Z+11, r19	; 0x0b
    6e6c:	22 87       	std	Z+10, r18	; 0x0a
    6e6e:	0c 97       	sbiw	r24, 0x0c	; 12
    6e70:	91 87       	std	Z+9, r25	; 0x09
    6e72:	80 87       	std	Z+8, r24	; 0x08
    6e74:	ef cf       	rjmp	.-34     	; 0x6e54 <normalize+0xe6>
    6e76:	f7 01       	movw	r30, r14
    6e78:	80 85       	ldd	r24, Z+8	; 0x08
    6e7a:	91 85       	ldd	r25, Z+9	; 0x09
    6e7c:	97 ff       	sbrs	r25, 7
    6e7e:	2d c0       	rjmp	.+90     	; 0x6eda <normalize+0x16c>
    6e80:	f7 01       	movw	r30, r14
    6e82:	22 85       	ldd	r18, Z+10	; 0x0a
    6e84:	33 85       	ldd	r19, Z+11	; 0x0b
    6e86:	21 50       	subi	r18, 0x01	; 1
    6e88:	31 09       	sbc	r19, r1
    6e8a:	33 87       	std	Z+11, r19	; 0x0b
    6e8c:	22 87       	std	Z+10, r18	; 0x0a
    6e8e:	0c 96       	adiw	r24, 0x0c	; 12
    6e90:	91 87       	std	Z+9, r25	; 0x09
    6e92:	80 87       	std	Z+8, r24	; 0x08
    6e94:	f0 cf       	rjmp	.-32     	; 0x6e76 <normalize+0x108>
    6e96:	f7 01       	movw	r30, r14
    6e98:	c6 80       	ldd	r12, Z+6	; 0x06
    6e9a:	d7 80       	ldd	r13, Z+7	; 0x07
    6e9c:	a0 84       	ldd	r10, Z+8	; 0x08
    6e9e:	b1 84       	ldd	r11, Z+9	; 0x09
    6ea0:	b4 01       	movw	r22, r8
    6ea2:	c5 01       	movw	r24, r10
    6ea4:	59 dd       	rcall	.-1358   	; 0x6958 <Days_Per_Month>
    6ea6:	8c 15       	cp	r24, r12
    6ea8:	9d 05       	cpc	r25, r13
    6eaa:	84 f5       	brge	.+96     	; 0x6f0c <normalize+0x19e>
    6eac:	c8 1a       	sub	r12, r24
    6eae:	d9 0a       	sbc	r13, r25
    6eb0:	f7 01       	movw	r30, r14
    6eb2:	d7 82       	std	Z+7, r13	; 0x07
    6eb4:	c6 82       	std	Z+6, r12	; 0x06
    6eb6:	c5 01       	movw	r24, r10
    6eb8:	01 96       	adiw	r24, 0x01	; 1
    6eba:	91 87       	std	Z+9, r25	; 0x09
    6ebc:	80 87       	std	Z+8, r24	; 0x08
    6ebe:	0c 97       	sbiw	r24, 0x0c	; 12
    6ec0:	54 f3       	brlt	.-44     	; 0x6e96 <normalize+0x128>
    6ec2:	fb e0       	ldi	r31, 0x0B	; 11
    6ec4:	af 1a       	sub	r10, r31
    6ec6:	b1 08       	sbc	r11, r1
    6ec8:	f7 01       	movw	r30, r14
    6eca:	b1 86       	std	Z+9, r11	; 0x09
    6ecc:	a0 86       	std	Z+8, r10	; 0x08
    6ece:	ff ef       	ldi	r31, 0xFF	; 255
    6ed0:	8f 1a       	sub	r8, r31
    6ed2:	9f 0a       	sbc	r9, r31
    6ed4:	f7 01       	movw	r30, r14
    6ed6:	93 86       	std	Z+11, r9	; 0x0b
    6ed8:	82 86       	std	Z+10, r8	; 0x0a
    6eda:	f7 01       	movw	r30, r14
    6edc:	82 84       	ldd	r8, Z+10	; 0x0a
    6ede:	93 84       	ldd	r9, Z+11	; 0x0b
    6ee0:	da cf       	rjmp	.-76     	; 0x6e96 <normalize+0x128>
    6ee2:	f7 01       	movw	r30, r14
    6ee4:	80 85       	ldd	r24, Z+8	; 0x08
    6ee6:	91 85       	ldd	r25, Z+9	; 0x09
    6ee8:	9c 01       	movw	r18, r24
    6eea:	21 50       	subi	r18, 0x01	; 1
    6eec:	31 09       	sbc	r19, r1
    6eee:	37 fd       	sbrc	r19, 7
    6ef0:	16 c0       	rjmp	.+44     	; 0x6f1e <normalize+0x1b0>
    6ef2:	31 87       	std	Z+9, r19	; 0x09
    6ef4:	20 87       	std	Z+8, r18	; 0x08
    6ef6:	f7 01       	movw	r30, r14
    6ef8:	62 85       	ldd	r22, Z+10	; 0x0a
    6efa:	73 85       	ldd	r23, Z+11	; 0x0b
    6efc:	80 85       	ldd	r24, Z+8	; 0x08
    6efe:	91 85       	ldd	r25, Z+9	; 0x09
    6f00:	2b dd       	rcall	.-1450   	; 0x6958 <Days_Per_Month>
    6f02:	88 0d       	add	r24, r8
    6f04:	99 1d       	adc	r25, r9
    6f06:	f7 01       	movw	r30, r14
    6f08:	97 83       	std	Z+7, r25	; 0x07
    6f0a:	86 83       	std	Z+6, r24	; 0x06
    6f0c:	f7 01       	movw	r30, r14
    6f0e:	86 80       	ldd	r8, Z+6	; 0x06
    6f10:	97 80       	ldd	r9, Z+7	; 0x07
    6f12:	a2 84       	ldd	r10, Z+10	; 0x0a
    6f14:	b3 84       	ldd	r11, Z+11	; 0x0b
    6f16:	18 14       	cp	r1, r8
    6f18:	19 04       	cpc	r1, r9
    6f1a:	1c f7       	brge	.-58     	; 0x6ee2 <normalize+0x174>
    6f1c:	0b c0       	rjmp	.+22     	; 0x6f34 <normalize+0x1c6>
    6f1e:	0b 96       	adiw	r24, 0x0b	; 11
    6f20:	f7 01       	movw	r30, r14
    6f22:	91 87       	std	Z+9, r25	; 0x09
    6f24:	80 87       	std	Z+8, r24	; 0x08
    6f26:	f1 e0       	ldi	r31, 0x01	; 1
    6f28:	af 1a       	sub	r10, r31
    6f2a:	b1 08       	sbc	r11, r1
    6f2c:	f7 01       	movw	r30, r14
    6f2e:	b3 86       	std	Z+11, r11	; 0x0b
    6f30:	a2 86       	std	Z+10, r10	; 0x0a
    6f32:	e1 cf       	rjmp	.-62     	; 0x6ef6 <normalize+0x188>
    6f34:	a5 01       	movw	r20, r10
    6f36:	44 59       	subi	r20, 0x94	; 148
    6f38:	58 4f       	sbci	r21, 0xF8	; 248
    6f3a:	58 87       	std	Y+8, r21	; 0x08
    6f3c:	4f 83       	std	Y+7, r20	; 0x07
    6f3e:	35 01       	movw	r6, r10
    6f40:	56 e4       	ldi	r21, 0x46	; 70
    6f42:	65 1a       	sub	r6, r21
    6f44:	71 08       	sbc	r7, r1
    6f46:	89 e8       	ldi	r24, 0x89	; 137
    6f48:	68 16       	cp	r6, r24
    6f4a:	71 04       	cpc	r7, r1
    6f4c:	08 f0       	brcs	.+2      	; 0x6f50 <normalize+0x1e2>
    6f4e:	9b c0       	rjmp	.+310    	; 0x7086 <normalize+0x318>
    6f50:	c0 84       	ldd	r12, Z+8	; 0x08
    6f52:	d1 84       	ldd	r13, Z+9	; 0x09
    6f54:	9c e0       	ldi	r25, 0x0C	; 12
    6f56:	c9 16       	cp	r12, r25
    6f58:	d1 04       	cpc	r13, r1
    6f5a:	08 f0       	brcs	.+2      	; 0x6f5e <normalize+0x1f0>
    6f5c:	94 c0       	rjmp	.+296    	; 0x7086 <normalize+0x318>
    6f5e:	24 01       	movw	r4, r8
    6f60:	e1 e0       	ldi	r30, 0x01	; 1
    6f62:	4e 1a       	sub	r4, r30
    6f64:	51 08       	sbc	r5, r1
    6f66:	6f 81       	ldd	r22, Y+7	; 0x07
    6f68:	78 85       	ldd	r23, Y+8	; 0x08
    6f6a:	c6 01       	movw	r24, r12
    6f6c:	f5 dc       	rcall	.-1558   	; 0x6958 <Days_Per_Month>
    6f6e:	48 16       	cp	r4, r24
    6f70:	59 06       	cpc	r5, r25
    6f72:	0c f0       	brlt	.+2      	; 0x6f76 <normalize+0x208>
    6f74:	88 c0       	rjmp	.+272    	; 0x7086 <normalize+0x318>
    6f76:	08 31       	cpi	r16, 0x18	; 24
    6f78:	11 05       	cpc	r17, r1
    6f7a:	0c f0       	brlt	.+2      	; 0x6f7e <normalize+0x210>
    6f7c:	84 c0       	rjmp	.+264    	; 0x7086 <normalize+0x318>
    6f7e:	fc e3       	ldi	r31, 0x3C	; 60
    6f80:	2f 16       	cp	r2, r31
    6f82:	31 04       	cpc	r3, r1
    6f84:	0c f0       	brlt	.+2      	; 0x6f88 <normalize+0x21a>
    6f86:	7f c0       	rjmp	.+254    	; 0x7086 <normalize+0x318>
    6f88:	4d 81       	ldd	r20, Y+5	; 0x05
    6f8a:	5e 81       	ldd	r21, Y+6	; 0x06
    6f8c:	4c 33       	cpi	r20, 0x3C	; 60
    6f8e:	51 05       	cpc	r21, r1
    6f90:	0c f0       	brlt	.+2      	; 0x6f94 <normalize+0x226>
    6f92:	79 c0       	rjmp	.+242    	; 0x7086 <normalize+0x318>
    6f94:	2d e6       	ldi	r18, 0x6D	; 109
    6f96:	31 e0       	ldi	r19, 0x01	; 1
    6f98:	d3 01       	movw	r26, r6
    6f9a:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__usmulhisi3>
    6f9e:	f6 01       	movw	r30, r12
    6fa0:	ee 0f       	add	r30, r30
    6fa2:	ff 1f       	adc	r31, r31
    6fa4:	e0 56       	subi	r30, 0x60	; 96
    6fa6:	fc 4f       	sbci	r31, 0xFC	; 252
    6fa8:	20 81       	ld	r18, Z
    6faa:	31 81       	ldd	r19, Z+1	; 0x01
    6fac:	dc 01       	movw	r26, r24
    6fae:	cb 01       	movw	r24, r22
    6fb0:	82 0f       	add	r24, r18
    6fb2:	93 1f       	adc	r25, r19
    6fb4:	a1 1d       	adc	r26, r1
    6fb6:	b1 1d       	adc	r27, r1
    6fb8:	05 2c       	mov	r0, r5
    6fba:	00 0c       	add	r0, r0
    6fbc:	66 08       	sbc	r6, r6
    6fbe:	77 08       	sbc	r7, r7
    6fc0:	48 0e       	add	r4, r24
    6fc2:	59 1e       	adc	r5, r25
    6fc4:	6a 1e       	adc	r6, r26
    6fc6:	7b 1e       	adc	r7, r27
    6fc8:	1a 14       	cp	r1, r10
    6fca:	1b 04       	cpc	r1, r11
    6fcc:	1c f4       	brge	.+6      	; 0x6fd4 <normalize+0x266>
    6fce:	51 e0       	ldi	r21, 0x01	; 1
    6fd0:	a5 1a       	sub	r10, r21
    6fd2:	b1 08       	sbc	r11, r1
    6fd4:	45 01       	movw	r8, r10
    6fd6:	95 94       	asr	r9
    6fd8:	87 94       	ror	r8
    6fda:	95 94       	asr	r9
    6fdc:	87 94       	ror	r8
    6fde:	88 ec       	ldi	r24, 0xC8	; 200
    6fe0:	a8 16       	cp	r10, r24
    6fe2:	b1 04       	cpc	r11, r1
    6fe4:	1c f0       	brlt	.+6      	; 0x6fec <normalize+0x27e>
    6fe6:	91 e0       	ldi	r25, 0x01	; 1
    6fe8:	89 1a       	sub	r8, r25
    6fea:	91 08       	sbc	r9, r1
    6fec:	09 2c       	mov	r0, r9
    6fee:	00 0c       	add	r0, r0
    6ff0:	aa 08       	sbc	r10, r10
    6ff2:	bb 08       	sbc	r11, r11
    6ff4:	84 0c       	add	r8, r4
    6ff6:	95 1c       	adc	r9, r5
    6ff8:	a6 1c       	adc	r10, r6
    6ffa:	b7 1c       	adc	r11, r7
    6ffc:	24 01       	movw	r4, r8
    6ffe:	35 01       	movw	r6, r10
    7000:	e1 e1       	ldi	r30, 0x11	; 17
    7002:	4e 1a       	sub	r4, r30
    7004:	51 08       	sbc	r5, r1
    7006:	61 08       	sbc	r6, r1
    7008:	71 08       	sbc	r7, r1
    700a:	f2 e0       	ldi	r31, 0x02	; 2
    700c:	cf 16       	cp	r12, r31
    700e:	d1 04       	cpc	r13, r1
    7010:	64 f0       	brlt	.+24     	; 0x702a <normalize+0x2bc>
    7012:	8f 81       	ldd	r24, Y+7	; 0x07
    7014:	98 85       	ldd	r25, Y+8	; 0x08
    7016:	7b dc       	rcall	.-1802   	; 0x690e <IS_Leap>
    7018:	89 2b       	or	r24, r25
    701a:	39 f0       	breq	.+14     	; 0x702a <normalize+0x2bc>
    701c:	24 01       	movw	r4, r8
    701e:	35 01       	movw	r6, r10
    7020:	40 e1       	ldi	r20, 0x10	; 16
    7022:	44 1a       	sub	r4, r20
    7024:	51 08       	sbc	r5, r1
    7026:	61 08       	sbc	r6, r1
    7028:	71 08       	sbc	r7, r1
    702a:	a8 e1       	ldi	r26, 0x18	; 24
    702c:	b0 e0       	ldi	r27, 0x00	; 0
    702e:	a3 01       	movw	r20, r6
    7030:	92 01       	movw	r18, r4
    7032:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    7036:	01 2e       	mov	r0, r17
    7038:	00 0c       	add	r0, r0
    703a:	22 0b       	sbc	r18, r18
    703c:	33 0b       	sbc	r19, r19
    703e:	a9 01       	movw	r20, r18
    7040:	98 01       	movw	r18, r16
    7042:	26 0f       	add	r18, r22
    7044:	37 1f       	adc	r19, r23
    7046:	48 1f       	adc	r20, r24
    7048:	59 1f       	adc	r21, r25
    704a:	ac e3       	ldi	r26, 0x3C	; 60
    704c:	b0 e0       	ldi	r27, 0x00	; 0
    704e:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    7052:	81 01       	movw	r16, r2
    7054:	03 2c       	mov	r0, r3
    7056:	00 0c       	add	r0, r0
    7058:	22 0b       	sbc	r18, r18
    705a:	33 0b       	sbc	r19, r19
    705c:	a9 01       	movw	r20, r18
    705e:	98 01       	movw	r18, r16
    7060:	26 0f       	add	r18, r22
    7062:	37 1f       	adc	r19, r23
    7064:	48 1f       	adc	r20, r24
    7066:	59 1f       	adc	r21, r25
    7068:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    706c:	ed 81       	ldd	r30, Y+5	; 0x05
    706e:	fe 81       	ldd	r31, Y+6	; 0x06
    7070:	8f 01       	movw	r16, r30
    7072:	ff 0f       	add	r31, r31
    7074:	22 0b       	sbc	r18, r18
    7076:	33 0b       	sbc	r19, r19
    7078:	48 01       	movw	r8, r16
    707a:	59 01       	movw	r10, r18
    707c:	86 0e       	add	r8, r22
    707e:	97 1e       	adc	r9, r23
    7080:	a8 1e       	adc	r10, r24
    7082:	b9 1e       	adc	r11, r25
    7084:	04 c0       	rjmp	.+8      	; 0x708e <normalize+0x320>
    7086:	88 24       	eor	r8, r8
    7088:	8a 94       	dec	r8
    708a:	98 2c       	mov	r9, r8
    708c:	54 01       	movw	r10, r8
    708e:	49 85       	ldd	r20, Y+9	; 0x09
    7090:	5a 85       	ldd	r21, Y+10	; 0x0a
    7092:	45 2b       	or	r20, r21
    7094:	e9 f0       	breq	.+58     	; 0x70d0 <normalize+0x362>
    7096:	ce 01       	movw	r24, r28
    7098:	01 96       	adiw	r24, 0x01	; 1
    709a:	7d dd       	rcall	.-1286   	; 0x6b96 <gettimezone>
    709c:	a9 81       	ldd	r26, Y+1	; 0x01
    709e:	ba 81       	ldd	r27, Y+2	; 0x02
    70a0:	2c e3       	ldi	r18, 0x3C	; 60
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    70a4:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__usmulhisi3>
    70a8:	2b 01       	movw	r4, r22
    70aa:	3c 01       	movw	r6, r24
    70ac:	c5 01       	movw	r24, r10
    70ae:	b4 01       	movw	r22, r8
    70b0:	e2 dd       	rcall	.-1084   	; 0x6c76 <is_dst>
    70b2:	89 2b       	or	r24, r25
    70b4:	51 f0       	breq	.+20     	; 0x70ca <normalize+0x35c>
    70b6:	50 e1       	ldi	r21, 0x10	; 16
    70b8:	45 1a       	sub	r4, r21
    70ba:	5e e0       	ldi	r21, 0x0E	; 14
    70bc:	55 0a       	sbc	r5, r21
    70be:	61 08       	sbc	r6, r1
    70c0:	71 08       	sbc	r7, r1
    70c2:	cc 24       	eor	r12, r12
    70c4:	c3 94       	inc	r12
    70c6:	d1 2c       	mov	r13, r1
    70c8:	08 c0       	rjmp	.+16     	; 0x70da <normalize+0x36c>
    70ca:	c1 2c       	mov	r12, r1
    70cc:	d1 2c       	mov	r13, r1
    70ce:	05 c0       	rjmp	.+10     	; 0x70da <normalize+0x36c>
    70d0:	c1 2c       	mov	r12, r1
    70d2:	d1 2c       	mov	r13, r1
    70d4:	41 2c       	mov	r4, r1
    70d6:	51 2c       	mov	r5, r1
    70d8:	32 01       	movw	r6, r4
    70da:	87 01       	movw	r16, r14
    70dc:	a3 01       	movw	r20, r6
    70de:	92 01       	movw	r18, r4
    70e0:	c5 01       	movw	r24, r10
    70e2:	b4 01       	movw	r22, r8
    70e4:	5a dc       	rcall	.-1868   	; 0x699a <time_to_tm>
    70e6:	c1 14       	cp	r12, r1
    70e8:	d1 04       	cpc	r13, r1
    70ea:	29 f0       	breq	.+10     	; 0x70f6 <normalize+0x388>
    70ec:	21 e0       	ldi	r18, 0x01	; 1
    70ee:	30 e0       	ldi	r19, 0x00	; 0
    70f0:	f7 01       	movw	r30, r14
    70f2:	31 8b       	std	Z+17, r19	; 0x11
    70f4:	20 8b       	std	Z+16, r18	; 0x10
    70f6:	2a 96       	adiw	r28, 0x0a	; 10
    70f8:	e2 e1       	ldi	r30, 0x12	; 18
    70fa:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

000070fe <timegm>:
    70fe:	60 e0       	ldi	r22, 0x00	; 0
    7100:	70 e0       	ldi	r23, 0x00	; 0
    7102:	35 ce       	rjmp	.-918    	; 0x6d6e <normalize>
    7104:	08 95       	ret

00007106 <setdate_r>:
    7106:	cf 92       	push	r12
    7108:	df 92       	push	r13
    710a:	ef 92       	push	r14
    710c:	ff 92       	push	r15
    710e:	cf 93       	push	r28
    7110:	df 93       	push	r29
    7112:	cd b7       	in	r28, 0x3d	; 61
    7114:	de b7       	in	r29, 0x3e	; 62
    7116:	a5 97       	sbiw	r28, 0x25	; 37
    7118:	0f b6       	in	r0, 0x3f	; 63
    711a:	f8 94       	cli
    711c:	de bf       	out	0x3e, r29	; 62
    711e:	0f be       	out	0x3f, r0	; 63
    7120:	cd bf       	out	0x3d, r28	; 61
    7122:	9d a3       	std	Y+37, r25	; 0x25
    7124:	8c a3       	std	Y+36, r24	; 0x24
    7126:	1f 82       	std	Y+7, r1	; 0x07
    7128:	1e 82       	std	Y+6, r1	; 0x06
    712a:	19 86       	std	Y+9, r1	; 0x09
    712c:	18 86       	std	Y+8, r1	; 0x08
    712e:	1b 86       	std	Y+11, r1	; 0x0b
    7130:	1a 86       	std	Y+10, r1	; 0x0a
    7132:	1d 86       	std	Y+13, r1	; 0x0d
    7134:	1c 86       	std	Y+12, r1	; 0x0c
    7136:	1f 86       	std	Y+15, r1	; 0x0f
    7138:	1e 86       	std	Y+14, r1	; 0x0e
    713a:	19 8a       	std	Y+17, r1	; 0x11
    713c:	18 8a       	std	Y+16, r1	; 0x10
    713e:	8c a1       	ldd	r24, Y+36	; 0x24
    7140:	9d a1       	ldd	r25, Y+37	; 0x25
    7142:	fc 01       	movw	r30, r24
    7144:	20 81       	ld	r18, Z
    7146:	20 32       	cpi	r18, 0x20	; 32
    7148:	21 f4       	brne	.+8      	; 0x7152 <setdate_r+0x4c>
    714a:	01 96       	adiw	r24, 0x01	; 1
    714c:	9d a3       	std	Y+37, r25	; 0x25
    714e:	8c a3       	std	Y+36, r24	; 0x24
    7150:	f6 cf       	rjmp	.-20     	; 0x713e <setdate_r+0x38>
    7152:	4a e0       	ldi	r20, 0x0A	; 10
    7154:	50 e0       	ldi	r21, 0x00	; 0
    7156:	be 01       	movw	r22, r28
    7158:	6c 5d       	subi	r22, 0xDC	; 220
    715a:	7f 4f       	sbci	r23, 0xFF	; 255
    715c:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    7160:	79 8b       	std	Y+17, r23	; 0x11
    7162:	68 8b       	std	Y+16, r22	; 0x10
    7164:	8c a1       	ldd	r24, Y+36	; 0x24
    7166:	9d a1       	ldd	r25, Y+37	; 0x25
    7168:	fc 01       	movw	r30, r24
    716a:	20 81       	ld	r18, Z
    716c:	20 32       	cpi	r18, 0x20	; 32
    716e:	21 f4       	brne	.+8      	; 0x7178 <setdate_r+0x72>
    7170:	01 96       	adiw	r24, 0x01	; 1
    7172:	9d a3       	std	Y+37, r25	; 0x25
    7174:	8c a3       	std	Y+36, r24	; 0x24
    7176:	f6 cf       	rjmp	.-20     	; 0x7164 <setdate_r+0x5e>
    7178:	4a e0       	ldi	r20, 0x0A	; 10
    717a:	50 e0       	ldi	r21, 0x00	; 0
    717c:	be 01       	movw	r22, r28
    717e:	6c 5d       	subi	r22, 0xDC	; 220
    7180:	7f 4f       	sbci	r23, 0xFF	; 255
    7182:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    7186:	7f 87       	std	Y+15, r23	; 0x0f
    7188:	6e 87       	std	Y+14, r22	; 0x0e
    718a:	8c a1       	ldd	r24, Y+36	; 0x24
    718c:	9d a1       	ldd	r25, Y+37	; 0x25
    718e:	fc 01       	movw	r30, r24
    7190:	20 81       	ld	r18, Z
    7192:	20 32       	cpi	r18, 0x20	; 32
    7194:	21 f4       	brne	.+8      	; 0x719e <setdate_r+0x98>
    7196:	01 96       	adiw	r24, 0x01	; 1
    7198:	9d a3       	std	Y+37, r25	; 0x25
    719a:	8c a3       	std	Y+36, r24	; 0x24
    719c:	f6 cf       	rjmp	.-20     	; 0x718a <setdate_r+0x84>
    719e:	4a e0       	ldi	r20, 0x0A	; 10
    71a0:	50 e0       	ldi	r21, 0x00	; 0
    71a2:	be 01       	movw	r22, r28
    71a4:	6c 5d       	subi	r22, 0xDC	; 220
    71a6:	7f 4f       	sbci	r23, 0xFF	; 255
    71a8:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    71ac:	7d 87       	std	Y+13, r23	; 0x0d
    71ae:	6c 87       	std	Y+12, r22	; 0x0c
    71b0:	8c a1       	ldd	r24, Y+36	; 0x24
    71b2:	9d a1       	ldd	r25, Y+37	; 0x25
    71b4:	fc 01       	movw	r30, r24
    71b6:	20 81       	ld	r18, Z
    71b8:	20 32       	cpi	r18, 0x20	; 32
    71ba:	21 f4       	brne	.+8      	; 0x71c4 <setdate_r+0xbe>
    71bc:	01 96       	adiw	r24, 0x01	; 1
    71be:	9d a3       	std	Y+37, r25	; 0x25
    71c0:	8c a3       	std	Y+36, r24	; 0x24
    71c2:	f6 cf       	rjmp	.-20     	; 0x71b0 <setdate_r+0xaa>
    71c4:	4a e0       	ldi	r20, 0x0A	; 10
    71c6:	50 e0       	ldi	r21, 0x00	; 0
    71c8:	be 01       	movw	r22, r28
    71ca:	6c 5d       	subi	r22, 0xDC	; 220
    71cc:	7f 4f       	sbci	r23, 0xFF	; 255
    71ce:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    71d2:	7b 87       	std	Y+11, r23	; 0x0b
    71d4:	6a 87       	std	Y+10, r22	; 0x0a
    71d6:	ec a1       	ldd	r30, Y+36	; 0x24
    71d8:	fd a1       	ldd	r31, Y+37	; 0x25
    71da:	80 81       	ld	r24, Z
    71dc:	88 23       	and	r24, r24
    71de:	39 f0       	breq	.+14     	; 0x71ee <setdate_r+0xe8>
    71e0:	80 32       	cpi	r24, 0x20	; 32
    71e2:	11 f0       	breq	.+4      	; 0x71e8 <setdate_r+0xe2>
    71e4:	8a 33       	cpi	r24, 0x3A	; 58
    71e6:	19 f4       	brne	.+6      	; 0x71ee <setdate_r+0xe8>
    71e8:	31 96       	adiw	r30, 0x01	; 1
    71ea:	fd a3       	std	Y+37, r31	; 0x25
    71ec:	ec a3       	std	Y+36, r30	; 0x24
    71ee:	4a e0       	ldi	r20, 0x0A	; 10
    71f0:	50 e0       	ldi	r21, 0x00	; 0
    71f2:	be 01       	movw	r22, r28
    71f4:	6c 5d       	subi	r22, 0xDC	; 220
    71f6:	7f 4f       	sbci	r23, 0xFF	; 255
    71f8:	8c a1       	ldd	r24, Y+36	; 0x24
    71fa:	9d a1       	ldd	r25, Y+37	; 0x25
    71fc:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    7200:	79 87       	std	Y+9, r23	; 0x09
    7202:	68 87       	std	Y+8, r22	; 0x08
    7204:	ec a1       	ldd	r30, Y+36	; 0x24
    7206:	fd a1       	ldd	r31, Y+37	; 0x25
    7208:	80 81       	ld	r24, Z
    720a:	88 23       	and	r24, r24
    720c:	39 f0       	breq	.+14     	; 0x721c <setdate_r+0x116>
    720e:	80 32       	cpi	r24, 0x20	; 32
    7210:	11 f0       	breq	.+4      	; 0x7216 <setdate_r+0x110>
    7212:	8a 33       	cpi	r24, 0x3A	; 58
    7214:	19 f4       	brne	.+6      	; 0x721c <setdate_r+0x116>
    7216:	31 96       	adiw	r30, 0x01	; 1
    7218:	fd a3       	std	Y+37, r31	; 0x25
    721a:	ec a3       	std	Y+36, r30	; 0x24
    721c:	4a e0       	ldi	r20, 0x0A	; 10
    721e:	50 e0       	ldi	r21, 0x00	; 0
    7220:	be 01       	movw	r22, r28
    7222:	6c 5d       	subi	r22, 0xDC	; 220
    7224:	7f 4f       	sbci	r23, 0xFF	; 255
    7226:	8c a1       	ldd	r24, Y+36	; 0x24
    7228:	9d a1       	ldd	r25, Y+37	; 0x25
    722a:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
    722e:	7f 83       	std	Y+7, r23	; 0x07
    7230:	6e 83       	std	Y+6, r22	; 0x06
    7232:	2e 85       	ldd	r18, Y+14	; 0x0e
    7234:	3f 85       	ldd	r19, Y+15	; 0x0f
    7236:	21 50       	subi	r18, 0x01	; 1
    7238:	31 09       	sbc	r19, r1
    723a:	3f 87       	std	Y+15, r19	; 0x0f
    723c:	2e 87       	std	Y+14, r18	; 0x0e
    723e:	88 89       	ldd	r24, Y+16	; 0x10
    7240:	99 89       	ldd	r25, Y+17	; 0x11
    7242:	ac 01       	movw	r20, r24
    7244:	42 5b       	subi	r20, 0xB2	; 178
    7246:	57 40       	sbci	r21, 0x07	; 7
    7248:	45 34       	cpi	r20, 0x45	; 69
    724a:	51 05       	cpc	r21, r1
    724c:	38 f0       	brcs	.+14     	; 0x725c <setdate_r+0x156>
    724e:	ed b7       	in	r30, 0x3d	; 61
    7250:	fe b7       	in	r31, 0x3e	; 62
    7252:	95 83       	std	Z+5, r25	; 0x05
    7254:	84 83       	std	Z+4, r24	; 0x04
    7256:	89 e1       	ldi	r24, 0x19	; 25
    7258:	97 e0       	ldi	r25, 0x07	; 7
    725a:	34 c0       	rjmp	.+104    	; 0x72c4 <setdate_r+0x1be>
    725c:	8c 56       	subi	r24, 0x6C	; 108
    725e:	97 40       	sbci	r25, 0x07	; 7
    7260:	99 8b       	std	Y+17, r25	; 0x11
    7262:	88 8b       	std	Y+16, r24	; 0x10
    7264:	2c 30       	cpi	r18, 0x0C	; 12
    7266:	31 05       	cpc	r19, r1
    7268:	38 f0       	brcs	.+14     	; 0x7278 <setdate_r+0x172>
    726a:	ed b7       	in	r30, 0x3d	; 61
    726c:	fe b7       	in	r31, 0x3e	; 62
    726e:	95 83       	std	Z+5, r25	; 0x05
    7270:	84 83       	std	Z+4, r24	; 0x04
    7272:	88 e0       	ldi	r24, 0x08	; 8
    7274:	97 e0       	ldi	r25, 0x07	; 7
    7276:	26 c0       	rjmp	.+76     	; 0x72c4 <setdate_r+0x1be>
    7278:	8c 85       	ldd	r24, Y+12	; 0x0c
    727a:	9d 85       	ldd	r25, Y+13	; 0x0d
    727c:	9c 01       	movw	r18, r24
    727e:	21 50       	subi	r18, 0x01	; 1
    7280:	31 09       	sbc	r19, r1
    7282:	2f 31       	cpi	r18, 0x1F	; 31
    7284:	31 05       	cpc	r19, r1
    7286:	38 f0       	brcs	.+14     	; 0x7296 <setdate_r+0x190>
    7288:	ed b7       	in	r30, 0x3d	; 61
    728a:	fe b7       	in	r31, 0x3e	; 62
    728c:	95 83       	std	Z+5, r25	; 0x05
    728e:	84 83       	std	Z+4, r24	; 0x04
    7290:	87 ef       	ldi	r24, 0xF7	; 247
    7292:	96 e0       	ldi	r25, 0x06	; 6
    7294:	17 c0       	rjmp	.+46     	; 0x72c4 <setdate_r+0x1be>
    7296:	8a 85       	ldd	r24, Y+10	; 0x0a
    7298:	9b 85       	ldd	r25, Y+11	; 0x0b
    729a:	88 31       	cpi	r24, 0x18	; 24
    729c:	91 05       	cpc	r25, r1
    729e:	38 f0       	brcs	.+14     	; 0x72ae <setdate_r+0x1a8>
    72a0:	ed b7       	in	r30, 0x3d	; 61
    72a2:	fe b7       	in	r31, 0x3e	; 62
    72a4:	95 83       	std	Z+5, r25	; 0x05
    72a6:	84 83       	std	Z+4, r24	; 0x04
    72a8:	85 ee       	ldi	r24, 0xE5	; 229
    72aa:	96 e0       	ldi	r25, 0x06	; 6
    72ac:	0b c0       	rjmp	.+22     	; 0x72c4 <setdate_r+0x1be>
    72ae:	88 85       	ldd	r24, Y+8	; 0x08
    72b0:	99 85       	ldd	r25, Y+9	; 0x09
    72b2:	8c 33       	cpi	r24, 0x3C	; 60
    72b4:	91 05       	cpc	r25, r1
    72b6:	68 f0       	brcs	.+26     	; 0x72d2 <setdate_r+0x1cc>
    72b8:	ed b7       	in	r30, 0x3d	; 61
    72ba:	fe b7       	in	r31, 0x3e	; 62
    72bc:	95 83       	std	Z+5, r25	; 0x05
    72be:	84 83       	std	Z+4, r24	; 0x04
    72c0:	84 ed       	ldi	r24, 0xD4	; 212
    72c2:	96 e0       	ldi	r25, 0x06	; 6
    72c4:	a0 e0       	ldi	r26, 0x00	; 0
    72c6:	81 83       	std	Z+1, r24	; 0x01
    72c8:	92 83       	std	Z+2, r25	; 0x02
    72ca:	a3 83       	std	Z+3, r26	; 0x03
    72cc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    72d0:	25 c0       	rjmp	.+74     	; 0x731c <setdate_r+0x216>
    72d2:	ce 01       	movw	r24, r28
    72d4:	06 96       	adiw	r24, 0x06	; 6
    72d6:	13 df       	rcall	.-474    	; 0x70fe <timegm>
    72d8:	6b 01       	movw	r12, r22
    72da:	7c 01       	movw	r14, r24
    72dc:	6c 8f       	std	Y+28, r22	; 0x1c
    72de:	7d 8f       	std	Y+29, r23	; 0x1d
    72e0:	8e 8f       	std	Y+30, r24	; 0x1e
    72e2:	9f 8f       	std	Y+31, r25	; 0x1f
    72e4:	18 a2       	std	Y+32, r1	; 0x20
    72e6:	19 a2       	std	Y+33, r1	; 0x21
    72e8:	1a a2       	std	Y+34, r1	; 0x22
    72ea:	1b a2       	std	Y+35, r1	; 0x23
    72ec:	be 01       	movw	r22, r28
    72ee:	64 5e       	subi	r22, 0xE4	; 228
    72f0:	7f 4f       	sbci	r23, 0xFF	; 255
    72f2:	80 e0       	ldi	r24, 0x00	; 0
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	03 db       	rcall	.-2554   	; 0x68fe <clock_settime>
    72f8:	b7 01       	movw	r22, r14
    72fa:	a6 01       	movw	r20, r12
    72fc:	81 e0       	ldi	r24, 0x01	; 1
    72fe:	90 e0       	ldi	r25, 0x00	; 0
    7300:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <rtc_init>
    7304:	81 11       	cpse	r24, r1
    7306:	0d c0       	rjmp	.+26     	; 0x7322 <setdate_r+0x21c>
    7308:	8d eb       	ldi	r24, 0xBD	; 189
    730a:	96 e0       	ldi	r25, 0x06	; 6
    730c:	a0 e0       	ldi	r26, 0x00	; 0
    730e:	ed b7       	in	r30, 0x3d	; 61
    7310:	fe b7       	in	r31, 0x3e	; 62
    7312:	81 83       	std	Z+1, r24	; 0x01
    7314:	92 83       	std	Z+2, r25	; 0x02
    7316:	a3 83       	std	Z+3, r26	; 0x03
    7318:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    731c:	8f ef       	ldi	r24, 0xFF	; 255
    731e:	9f ef       	ldi	r25, 0xFF	; 255
    7320:	02 c0       	rjmp	.+4      	; 0x7326 <setdate_r+0x220>
    7322:	80 e0       	ldi	r24, 0x00	; 0
    7324:	90 e0       	ldi	r25, 0x00	; 0
    7326:	a5 96       	adiw	r28, 0x25	; 37
    7328:	0f b6       	in	r0, 0x3f	; 63
    732a:	f8 94       	cli
    732c:	de bf       	out	0x3e, r29	; 62
    732e:	0f be       	out	0x3f, r0	; 63
    7330:	cd bf       	out	0x3d, r28	; 61
    7332:	df 91       	pop	r29
    7334:	cf 91       	pop	r28
    7336:	ff 90       	pop	r15
    7338:	ef 90       	pop	r14
    733a:	df 90       	pop	r13
    733c:	cf 90       	pop	r12
    733e:	08 95       	ret

00007340 <setdate>:
    7340:	ab e2       	ldi	r26, 0x2B	; 43
    7342:	b0 e0       	ldi	r27, 0x00	; 0
    7344:	e6 ea       	ldi	r30, 0xA6	; 166
    7346:	f9 e3       	ldi	r31, 0x39	; 57
    7348:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    734c:	8b e2       	ldi	r24, 0x2B	; 43
    734e:	97 e0       	ldi	r25, 0x07	; 7
    7350:	a0 e0       	ldi	r26, 0x00	; 0
    7352:	ed b7       	in	r30, 0x3d	; 61
    7354:	fe b7       	in	r31, 0x3e	; 62
    7356:	81 83       	std	Z+1, r24	; 0x01
    7358:	92 83       	std	Z+2, r25	; 0x02
    735a:	a3 83       	std	Z+3, r26	; 0x03
    735c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    7360:	40 91 c6 1d 	lds	r20, 0x1DC6	; 0x801dc6 <__iob>
    7364:	50 91 c7 1d 	lds	r21, 0x1DC7	; 0x801dc7 <__iob+0x1>
    7368:	66 e2       	ldi	r22, 0x26	; 38
    736a:	70 e0       	ldi	r23, 0x00	; 0
    736c:	ce 01       	movw	r24, r28
    736e:	04 96       	adiw	r24, 0x04	; 4
    7370:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
    7374:	ce 01       	movw	r24, r28
    7376:	04 96       	adiw	r24, 0x04	; 4
    7378:	c6 de       	rcall	.-628    	; 0x7106 <setdate_r>
    737a:	ab 96       	adiw	r28, 0x2b	; 43
    737c:	e2 e0       	ldi	r30, 0x02	; 2
    737e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00007382 <find_dst>:
    7382:	a8 e2       	ldi	r26, 0x28	; 40
    7384:	b0 e0       	ldi	r27, 0x00	; 0
    7386:	e7 ec       	ldi	r30, 0xC7	; 199
    7388:	f9 e3       	ldi	r31, 0x39	; 57
    738a:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    738e:	3c 01       	movw	r6, r24
    7390:	1a 01       	movw	r2, r20
    7392:	2b 01       	movw	r4, r22
    7394:	49 01       	movw	r8, r18
    7396:	1c a3       	std	Y+36, r17	; 0x24
    7398:	0b a3       	std	Y+35, r16	; 0x23
    739a:	de a2       	std	Y+38, r13	; 0x26
    739c:	cd a2       	std	Y+37, r12	; 0x25
    739e:	b8 a6       	std	Y+40, r11	; 0x28
    73a0:	af a2       	std	Y+39, r10	; 0x27
    73a2:	be 01       	movw	r22, r28
    73a4:	61 5e       	subi	r22, 0xE1	; 225
    73a6:	7f 4f       	sbci	r23, 0xFF	; 255
    73a8:	ce 01       	movw	r24, r28
    73aa:	47 96       	adiw	r24, 0x17	; 23
    73ac:	15 dc       	rcall	.-2006   	; 0x6bd8 <gettimeofday>
    73ae:	af 8d       	ldd	r26, Y+31	; 0x1f
    73b0:	b8 a1       	ldd	r27, Y+32	; 0x20
    73b2:	2c e3       	ldi	r18, 0x3C	; 60
    73b4:	30 e0       	ldi	r19, 0x00	; 0
    73b6:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__usmulhisi3>
    73ba:	5b 01       	movw	r10, r22
    73bc:	6c 01       	movw	r12, r24
    73be:	61 14       	cp	r6, r1
    73c0:	71 04       	cpc	r7, r1
    73c2:	31 f0       	breq	.+12     	; 0x73d0 <find_dst+0x4e>
    73c4:	20 e1       	ldi	r18, 0x10	; 16
    73c6:	a2 1a       	sub	r10, r18
    73c8:	2e e0       	ldi	r18, 0x0E	; 14
    73ca:	b2 0a       	sbc	r11, r18
    73cc:	c1 08       	sbc	r12, r1
    73ce:	d1 08       	sbc	r13, r1
    73d0:	81 14       	cp	r8, r1
    73d2:	91 04       	cpc	r9, r1
    73d4:	39 f0       	breq	.+14     	; 0x73e4 <find_dst+0x62>
    73d6:	4c e6       	ldi	r20, 0x6C	; 108
    73d8:	84 1a       	sub	r8, r20
    73da:	47 e0       	ldi	r20, 0x07	; 7
    73dc:	94 0a       	sbc	r9, r20
    73de:	9c 86       	std	Y+12, r9	; 0x0c
    73e0:	8b 86       	std	Y+11, r8	; 0x0b
    73e2:	11 c0       	rjmp	.+34     	; 0x7406 <find_dst+0x84>
    73e4:	21 14       	cp	r2, r1
    73e6:	31 04       	cpc	r3, r1
    73e8:	41 04       	cpc	r4, r1
    73ea:	51 04       	cpc	r5, r1
    73ec:	21 f4       	brne	.+8      	; 0x73f6 <find_dst+0x74>
    73ee:	2f 88       	ldd	r2, Y+23	; 0x17
    73f0:	38 8c       	ldd	r3, Y+24	; 0x18
    73f2:	49 8c       	ldd	r4, Y+25	; 0x19
    73f4:	5a 8c       	ldd	r5, Y+26	; 0x1a
    73f6:	8e 01       	movw	r16, r28
    73f8:	0f 5f       	subi	r16, 0xFF	; 255
    73fa:	1f 4f       	sbci	r17, 0xFF	; 255
    73fc:	a6 01       	movw	r20, r12
    73fe:	95 01       	movw	r18, r10
    7400:	c2 01       	movw	r24, r4
    7402:	b1 01       	movw	r22, r2
    7404:	ca da       	rcall	.-2668   	; 0x699a <time_to_tm>
    7406:	8b a1       	ldd	r24, Y+35	; 0x23
    7408:	9c a1       	ldd	r25, Y+36	; 0x24
    740a:	01 97       	sbiw	r24, 0x01	; 1
    740c:	9a 87       	std	Y+10, r25	; 0x0a
    740e:	89 87       	std	Y+9, r24	; 0x09
    7410:	81 e0       	ldi	r24, 0x01	; 1
    7412:	90 e0       	ldi	r25, 0x00	; 0
    7414:	98 87       	std	Y+8, r25	; 0x08
    7416:	8f 83       	std	Y+7, r24	; 0x07
    7418:	8f a1       	ldd	r24, Y+39	; 0x27
    741a:	98 a5       	ldd	r25, Y+40	; 0x28
    741c:	9e 83       	std	Y+6, r25	; 0x06
    741e:	8d 83       	std	Y+5, r24	; 0x05
    7420:	1c 82       	std	Y+4, r1	; 0x04
    7422:	1b 82       	std	Y+3, r1	; 0x03
    7424:	1a 82       	std	Y+2, r1	; 0x02
    7426:	19 82       	std	Y+1, r1	; 0x01
    7428:	ce 01       	movw	r24, r28
    742a:	01 96       	adiw	r24, 0x01	; 1
    742c:	68 de       	rcall	.-816    	; 0x70fe <timegm>
    742e:	45 01       	movw	r8, r10
    7430:	56 01       	movw	r10, r12
    7432:	86 0e       	add	r8, r22
    7434:	97 1e       	adc	r9, r23
    7436:	a8 1e       	adc	r10, r24
    7438:	b9 1e       	adc	r11, r25
    743a:	8e 01       	movw	r16, r28
    743c:	0f 5f       	subi	r16, 0xFF	; 255
    743e:	1f 4f       	sbci	r17, 0xFF	; 255
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	30 e0       	ldi	r19, 0x00	; 0
    7444:	a9 01       	movw	r20, r18
    7446:	c5 01       	movw	r24, r10
    7448:	b4 01       	movw	r22, r8
    744a:	a7 da       	rcall	.-2738   	; 0x699a <time_to_tm>
    744c:	2d 85       	ldd	r18, Y+13	; 0x0d
    744e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7450:	e7 e0       	ldi	r30, 0x07	; 7
    7452:	f0 e0       	ldi	r31, 0x00	; 0
    7454:	c9 01       	movw	r24, r18
    7456:	bf 01       	movw	r22, r30
    7458:	0e 94 1b e3 	call	0x1c636	; 0x1c636 <__divmodhi4>
    745c:	4d a1       	ldd	r20, Y+37	; 0x25
    745e:	5e a1       	ldd	r21, Y+38	; 0x26
    7460:	48 17       	cp	r20, r24
    7462:	59 07       	cpc	r21, r25
    7464:	21 f4       	brne	.+8      	; 0x746e <find_dst+0xec>
    7466:	51 e0       	ldi	r21, 0x01	; 1
    7468:	e5 1a       	sub	r14, r21
    746a:	f1 08       	sbc	r15, r1
    746c:	51 f0       	breq	.+20     	; 0x7482 <find_dst+0x100>
    746e:	80 e8       	ldi	r24, 0x80	; 128
    7470:	88 0e       	add	r8, r24
    7472:	81 e5       	ldi	r24, 0x51	; 81
    7474:	98 1e       	adc	r9, r24
    7476:	81 e0       	ldi	r24, 0x01	; 1
    7478:	a8 1e       	adc	r10, r24
    747a:	b1 1c       	adc	r11, r1
    747c:	2f 5f       	subi	r18, 0xFF	; 255
    747e:	3f 4f       	sbci	r19, 0xFF	; 255
    7480:	e9 cf       	rjmp	.-46     	; 0x7454 <find_dst+0xd2>
    7482:	c5 01       	movw	r24, r10
    7484:	b4 01       	movw	r22, r8
    7486:	a8 96       	adiw	r28, 0x28	; 40
    7488:	e2 e1       	ldi	r30, 0x12	; 18
    748a:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000748e <set_dst>:
    748e:	4f 92       	push	r4
    7490:	5f 92       	push	r5
    7492:	6f 92       	push	r6
    7494:	7f 92       	push	r7
    7496:	af 92       	push	r10
    7498:	bf 92       	push	r11
    749a:	cf 92       	push	r12
    749c:	df 92       	push	r13
    749e:	ef 92       	push	r14
    74a0:	ff 92       	push	r15
    74a2:	0f 93       	push	r16
    74a4:	1f 93       	push	r17
    74a6:	cf 93       	push	r28
    74a8:	df 93       	push	r29
    74aa:	cd b7       	in	r28, 0x3d	; 61
    74ac:	de b7       	in	r29, 0x3e	; 62
    74ae:	2c 97       	sbiw	r28, 0x0c	; 12
    74b0:	0f b6       	in	r0, 0x3f	; 63
    74b2:	f8 94       	cli
    74b4:	de bf       	out	0x3e, r29	; 62
    74b6:	0f be       	out	0x3f, r0	; 63
    74b8:	cd bf       	out	0x3d, r28	; 61
    74ba:	2b 01       	movw	r4, r22
    74bc:	3c 01       	movw	r6, r24
    74be:	67 2b       	or	r22, r23
    74c0:	68 2b       	or	r22, r24
    74c2:	69 2b       	or	r22, r25
    74c4:	51 f4       	brne	.+20     	; 0x74da <set_dst+0x4c>
    74c6:	be 01       	movw	r22, r28
    74c8:	67 5f       	subi	r22, 0xF7	; 247
    74ca:	7f 4f       	sbci	r23, 0xFF	; 255
    74cc:	ce 01       	movw	r24, r28
    74ce:	01 96       	adiw	r24, 0x01	; 1
    74d0:	83 db       	rcall	.-2298   	; 0x6bd8 <gettimeofday>
    74d2:	49 80       	ldd	r4, Y+1	; 0x01
    74d4:	5a 80       	ldd	r5, Y+2	; 0x02
    74d6:	6b 80       	ldd	r6, Y+3	; 0x03
    74d8:	7c 80       	ldd	r7, Y+4	; 0x04
    74da:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <dst+0x8>
    74de:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <dst+0x9>
    74e2:	a0 91 85 1b 	lds	r26, 0x1B85	; 0x801b85 <dst+0xa>
    74e6:	b0 91 86 1b 	lds	r27, 0x1B86	; 0x801b86 <dst+0xb>
    74ea:	84 15       	cp	r24, r4
    74ec:	95 05       	cpc	r25, r5
    74ee:	a6 05       	cpc	r26, r6
    74f0:	b7 05       	cpc	r27, r7
    74f2:	50 f0       	brcs	.+20     	; 0x7508 <set_dst+0x7a>
    74f4:	84 19       	sub	r24, r4
    74f6:	95 09       	sbc	r25, r5
    74f8:	a6 09       	sbc	r26, r6
    74fa:	b7 09       	sbc	r27, r7
    74fc:	80 38       	cpi	r24, 0x80	; 128
    74fe:	91 45       	sbci	r25, 0x51	; 81
    7500:	a1 40       	sbci	r26, 0x01	; 1
    7502:	b1 05       	cpc	r27, r1
    7504:	70 f4       	brcc	.+28     	; 0x7522 <set_dst+0x94>
    7506:	42 c0       	rjmp	.+132    	; 0x758c <set_dst+0xfe>
    7508:	a3 01       	movw	r20, r6
    750a:	92 01       	movw	r18, r4
    750c:	28 1b       	sub	r18, r24
    750e:	39 0b       	sbc	r19, r25
    7510:	4a 0b       	sbc	r20, r26
    7512:	5b 0b       	sbc	r21, r27
    7514:	da 01       	movw	r26, r20
    7516:	c9 01       	movw	r24, r18
    7518:	80 38       	cpi	r24, 0x80	; 128
    751a:	91 45       	sbci	r25, 0x51	; 81
    751c:	a1 40       	sbci	r26, 0x01	; 1
    751e:	b1 05       	cpc	r27, r1
    7520:	a8 f1       	brcs	.+106    	; 0x758c <set_dst+0xfe>
    7522:	40 92 83 1b 	sts	0x1B83, r4	; 0x801b83 <dst+0x8>
    7526:	50 92 84 1b 	sts	0x1B84, r5	; 0x801b84 <dst+0x9>
    752a:	60 92 85 1b 	sts	0x1B85, r6	; 0x801b85 <dst+0xa>
    752e:	70 92 86 1b 	sts	0x1B86, r7	; 0x801b86 <dst+0xb>
    7532:	82 e0       	ldi	r24, 0x02	; 2
    7534:	a8 2e       	mov	r10, r24
    7536:	b1 2c       	mov	r11, r1
    7538:	c1 2c       	mov	r12, r1
    753a:	d1 2c       	mov	r13, r1
    753c:	92 e0       	ldi	r25, 0x02	; 2
    753e:	e9 2e       	mov	r14, r25
    7540:	f1 2c       	mov	r15, r1
    7542:	03 e0       	ldi	r16, 0x03	; 3
    7544:	10 e0       	ldi	r17, 0x00	; 0
    7546:	20 e0       	ldi	r18, 0x00	; 0
    7548:	30 e0       	ldi	r19, 0x00	; 0
    754a:	b3 01       	movw	r22, r6
    754c:	a2 01       	movw	r20, r4
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	17 df       	rcall	.-466    	; 0x7382 <find_dst>
    7554:	60 93 7b 1b 	sts	0x1B7B, r22	; 0x801b7b <dst>
    7558:	70 93 7c 1b 	sts	0x1B7C, r23	; 0x801b7c <dst+0x1>
    755c:	80 93 7d 1b 	sts	0x1B7D, r24	; 0x801b7d <dst+0x2>
    7560:	90 93 7e 1b 	sts	0x1B7E, r25	; 0x801b7e <dst+0x3>
    7564:	ee 24       	eor	r14, r14
    7566:	e3 94       	inc	r14
    7568:	f1 2c       	mov	r15, r1
    756a:	0b e0       	ldi	r16, 0x0B	; 11
    756c:	10 e0       	ldi	r17, 0x00	; 0
    756e:	20 e0       	ldi	r18, 0x00	; 0
    7570:	30 e0       	ldi	r19, 0x00	; 0
    7572:	b3 01       	movw	r22, r6
    7574:	a2 01       	movw	r20, r4
    7576:	81 e0       	ldi	r24, 0x01	; 1
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	03 df       	rcall	.-506    	; 0x7382 <find_dst>
    757c:	60 93 7f 1b 	sts	0x1B7F, r22	; 0x801b7f <dst+0x4>
    7580:	70 93 80 1b 	sts	0x1B80, r23	; 0x801b80 <dst+0x5>
    7584:	80 93 81 1b 	sts	0x1B81, r24	; 0x801b81 <dst+0x6>
    7588:	90 93 82 1b 	sts	0x1B82, r25	; 0x801b82 <dst+0x7>
    758c:	2c 96       	adiw	r28, 0x0c	; 12
    758e:	0f b6       	in	r0, 0x3f	; 63
    7590:	f8 94       	cli
    7592:	de bf       	out	0x3e, r29	; 62
    7594:	0f be       	out	0x3f, r0	; 63
    7596:	cd bf       	out	0x3d, r28	; 61
    7598:	df 91       	pop	r29
    759a:	cf 91       	pop	r28
    759c:	1f 91       	pop	r17
    759e:	0f 91       	pop	r16
    75a0:	ff 90       	pop	r15
    75a2:	ef 90       	pop	r14
    75a4:	df 90       	pop	r13
    75a6:	cf 90       	pop	r12
    75a8:	bf 90       	pop	r11
    75aa:	af 90       	pop	r10
    75ac:	7f 90       	pop	r7
    75ae:	6f 90       	pop	r6
    75b0:	5f 90       	pop	r5
    75b2:	4f 90       	pop	r4
    75b4:	08 95       	ret

000075b6 <asctime_r>:
    75b6:	a5 e1       	ldi	r26, 0x15	; 21
    75b8:	b0 e0       	ldi	r27, 0x00	; 0
    75ba:	e1 ee       	ldi	r30, 0xE1	; 225
    75bc:	fa e3       	ldi	r31, 0x3A	; 58
    75be:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    75c2:	ec 01       	movw	r28, r24
    75c4:	8b 01       	movw	r16, r22
    75c6:	60 e0       	ldi	r22, 0x00	; 0
    75c8:	70 e0       	ldi	r23, 0x00	; 0
    75ca:	d1 db       	rcall	.-2142   	; 0x6d6e <normalize>
    75cc:	80 e2       	ldi	r24, 0x20	; 32
    75ce:	f8 01       	movw	r30, r16
    75d0:	11 92       	st	Z+, r1
    75d2:	8a 95       	dec	r24
    75d4:	e9 f7       	brne	.-6      	; 0x75d0 <asctime_r+0x1a>
    75d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    75d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    75da:	84 59       	subi	r24, 0x94	; 148
    75dc:	98 4f       	sbci	r25, 0xF8	; 248
    75de:	ed b7       	in	r30, 0x3d	; 61
    75e0:	fe b7       	in	r31, 0x3e	; 62
    75e2:	95 8b       	std	Z+21, r25	; 0x15
    75e4:	84 8b       	std	Z+20, r24	; 0x14
    75e6:	88 81       	ld	r24, Y
    75e8:	99 81       	ldd	r25, Y+1	; 0x01
    75ea:	93 8b       	std	Z+19, r25	; 0x13
    75ec:	82 8b       	std	Z+18, r24	; 0x12
    75ee:	8a 81       	ldd	r24, Y+2	; 0x02
    75f0:	9b 81       	ldd	r25, Y+3	; 0x03
    75f2:	91 8b       	std	Z+17, r25	; 0x11
    75f4:	80 8b       	std	Z+16, r24	; 0x10
    75f6:	8c 81       	ldd	r24, Y+4	; 0x04
    75f8:	9d 81       	ldd	r25, Y+5	; 0x05
    75fa:	97 87       	std	Z+15, r25	; 0x0f
    75fc:	86 87       	std	Z+14, r24	; 0x0e
    75fe:	8e 81       	ldd	r24, Y+6	; 0x06
    7600:	9f 81       	ldd	r25, Y+7	; 0x07
    7602:	95 87       	std	Z+13, r25	; 0x0d
    7604:	84 87       	std	Z+12, r24	; 0x0c
    7606:	e8 85       	ldd	r30, Y+8	; 0x08
    7608:	f9 85       	ldd	r31, Y+9	; 0x09
    760a:	ee 0f       	add	r30, r30
    760c:	ff 1f       	adc	r31, r31
    760e:	e5 5f       	subi	r30, 0xF5	; 245
    7610:	fe 4f       	sbci	r31, 0xFE	; 254
    7612:	80 81       	ld	r24, Z
    7614:	91 81       	ldd	r25, Z+1	; 0x01
    7616:	ed b7       	in	r30, 0x3d	; 61
    7618:	fe b7       	in	r31, 0x3e	; 62
    761a:	93 87       	std	Z+11, r25	; 0x0b
    761c:	82 87       	std	Z+10, r24	; 0x0a
    761e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7620:	fd 85       	ldd	r31, Y+13	; 0x0d
    7622:	ee 0f       	add	r30, r30
    7624:	ff 1f       	adc	r31, r31
    7626:	eb 5d       	subi	r30, 0xDB	; 219
    7628:	fe 4f       	sbci	r31, 0xFE	; 254
    762a:	80 81       	ld	r24, Z
    762c:	91 81       	ldd	r25, Z+1	; 0x01
    762e:	ed b7       	in	r30, 0x3d	; 61
    7630:	fe b7       	in	r31, 0x3e	; 62
    7632:	91 87       	std	Z+9, r25	; 0x09
    7634:	80 87       	std	Z+8, r24	; 0x08
    7636:	8c e4       	ldi	r24, 0x4C	; 76
    7638:	97 e0       	ldi	r25, 0x07	; 7
    763a:	a0 e0       	ldi	r26, 0x00	; 0
    763c:	85 83       	std	Z+5, r24	; 0x05
    763e:	96 83       	std	Z+6, r25	; 0x06
    7640:	a7 83       	std	Z+7, r26	; 0x07
    7642:	80 e2       	ldi	r24, 0x20	; 32
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	94 83       	std	Z+4, r25	; 0x04
    7648:	83 83       	std	Z+3, r24	; 0x03
    764a:	12 83       	std	Z+2, r17	; 0x02
    764c:	01 83       	std	Z+1, r16	; 0x01
    764e:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <snprintf_P>
    7652:	c8 01       	movw	r24, r16
    7654:	cd b7       	in	r28, 0x3d	; 61
    7656:	de b7       	in	r29, 0x3e	; 62
    7658:	65 96       	adiw	r28, 0x15	; 21
    765a:	e4 e0       	ldi	r30, 0x04	; 4
    765c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00007660 <asctime>:
    7660:	66 e0       	ldi	r22, 0x06	; 6
    7662:	78 e1       	ldi	r23, 0x18	; 24
    7664:	a8 cf       	rjmp	.-176    	; 0x75b6 <asctime_r>
    7666:	08 95       	ret

00007668 <ctime_gm>:
    7668:	a6 e1       	ldi	r26, 0x16	; 22
    766a:	b0 e0       	ldi	r27, 0x00	; 0
    766c:	ea e3       	ldi	r30, 0x3A	; 58
    766e:	fb e3       	ldi	r31, 0x3B	; 59
    7670:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    7674:	be 01       	movw	r22, r28
    7676:	6f 5f       	subi	r22, 0xFF	; 255
    7678:	7f 4f       	sbci	r23, 0xFF	; 255
    767a:	6d da       	rcall	.-2854   	; 0x6b56 <gmtime_r>
    767c:	66 ee       	ldi	r22, 0xE6	; 230
    767e:	77 e1       	ldi	r23, 0x17	; 23
    7680:	9a df       	rcall	.-204    	; 0x75b6 <asctime_r>
    7682:	66 96       	adiw	r28, 0x16	; 22
    7684:	e2 e0       	ldi	r30, 0x02	; 2
    7686:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000768a <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    768a:	a5 e2       	ldi	r26, 0x25	; 37
    768c:	b0 e0       	ldi	r27, 0x00	; 0
    768e:	eb e4       	ldi	r30, 0x4B	; 75
    7690:	fb e3       	ldi	r31, 0x3B	; 59
    7692:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    7696:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7698:	40 e0       	ldi	r20, 0x00	; 0
    769a:	50 e0       	ldi	r21, 0x00	; 0
    769c:	ba 01       	movw	r22, r20
    769e:	80 e0       	ldi	r24, 0x00	; 0
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <rtc_init>
    76a6:	81 11       	cpse	r24, r1
    76a8:	27 c0       	rjmp	.+78     	; 0x76f8 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    76aa:	8b ea       	ldi	r24, 0xAB	; 171
    76ac:	96 e0       	ldi	r25, 0x06	; 6
    76ae:	a0 e0       	ldi	r26, 0x00	; 0
    76b0:	ed b7       	in	r30, 0x3d	; 61
    76b2:	fe b7       	in	r31, 0x3e	; 62
    76b4:	81 83       	std	Z+1, r24	; 0x01
    76b6:	92 83       	std	Z+2, r25	; 0x02
    76b8:	a3 83       	std	Z+3, r26	; 0x03
    76ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("attempting rtc init\n");
    76be:	86 e9       	ldi	r24, 0x96	; 150
    76c0:	96 e0       	ldi	r25, 0x06	; 6
    76c2:	a0 e0       	ldi	r26, 0x00	; 0
    76c4:	ed b7       	in	r30, 0x3d	; 61
    76c6:	fe b7       	in	r31, 0x3e	; 62
    76c8:	81 83       	std	Z+1, r24	; 0x01
    76ca:	92 83       	std	Z+2, r25	; 0x02
    76cc:	a3 83       	std	Z+3, r26	; 0x03
    76ce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    76d2:	40 e0       	ldi	r20, 0x00	; 0
    76d4:	50 e0       	ldi	r21, 0x00	; 0
    76d6:	ba 01       	movw	r22, r20
    76d8:	81 e0       	ldi	r24, 0x01	; 1
    76da:	90 e0       	ldi	r25, 0x00	; 0
    76dc:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <rtc_init>
    76e0:	81 11       	cpse	r24, r1
    76e2:	0a c0       	rjmp	.+20     	; 0x76f8 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    76e4:	8f e7       	ldi	r24, 0x7F	; 127
    76e6:	96 e0       	ldi	r25, 0x06	; 6
    76e8:	a0 e0       	ldi	r26, 0x00	; 0
    76ea:	ed b7       	in	r30, 0x3d	; 61
    76ec:	fe b7       	in	r31, 0x3e	; 62
    76ee:	81 83       	std	Z+1, r24	; 0x01
    76f0:	92 83       	std	Z+2, r25	; 0x02
    76f2:	a3 83       	std	Z+3, r26	; 0x03
    76f4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        }
    }

    if(rtc_read(&tc))
    76f8:	ce 01       	movw	r24, r28
    76fa:	04 96       	adiw	r24, 0x04	; 4
    76fc:	0e 94 65 2e 	call	0x5cca	; 0x5cca <rtc_read>
    7700:	88 23       	and	r24, r24
    7702:	51 f0       	breq	.+20     	; 0x7718 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7704:	ce 01       	movw	r24, r28
    7706:	04 96       	adiw	r24, 0x04	; 4
    7708:	fa dc       	rcall	.-1548   	; 0x70fe <timegm>
    770a:	6b 01       	movw	r12, r22
    770c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    770e:	67 2b       	or	r22, r23
    7710:	68 2b       	or	r22, r24
    7712:	69 2b       	or	r22, r25
    7714:	c1 f4       	brne	.+48     	; 0x7746 <initialize_clock+0xbc>
    7716:	0a c0       	rjmp	.+20     	; 0x772c <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7718:	85 e6       	ldi	r24, 0x65	; 101
    771a:	96 e0       	ldi	r25, 0x06	; 6
    771c:	a0 e0       	ldi	r26, 0x00	; 0
    771e:	ed b7       	in	r30, 0x3d	; 61
    7720:	fe b7       	in	r31, 0x3e	; 62
    7722:	81 83       	std	Z+1, r24	; 0x01
    7724:	92 83       	std	Z+2, r25	; 0x02
    7726:	a3 83       	std	Z+3, r26	; 0x03
    7728:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    772c:	81 e4       	ldi	r24, 0x41	; 65
    772e:	96 e0       	ldi	r25, 0x06	; 6
    7730:	a0 e0       	ldi	r26, 0x00	; 0
    7732:	ed b7       	in	r30, 0x3d	; 61
    7734:	fe b7       	in	r31, 0x3e	; 62
    7736:	81 83       	std	Z+1, r24	; 0x01
    7738:	92 83       	std	Z+2, r25	; 0x02
    773a:	a3 83       	std	Z+3, r26	; 0x03
    773c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    7740:	c1 2c       	mov	r12, r1
    7742:	d1 2c       	mov	r13, r1
    7744:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7746:	1b a3       	std	Y+35, r17	; 0x23
    7748:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    774a:	1d a2       	std	Y+37, r1	; 0x25
    774c:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    774e:	ce 01       	movw	r24, r28
    7750:	82 96       	adiw	r24, 0x22	; 34
    7752:	30 da       	rcall	.-2976   	; 0x6bb4 <settimezone>

    ts.tv_sec = seconds;
    7754:	ca 8e       	std	Y+26, r12	; 0x1a
    7756:	db 8e       	std	Y+27, r13	; 0x1b
    7758:	ec 8e       	std	Y+28, r14	; 0x1c
    775a:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    775c:	1e 8e       	std	Y+30, r1	; 0x1e
    775e:	1f 8e       	std	Y+31, r1	; 0x1f
    7760:	18 a2       	std	Y+32, r1	; 0x20
    7762:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7764:	be 01       	movw	r22, r28
    7766:	66 5e       	subi	r22, 0xE6	; 230
    7768:	7f 4f       	sbci	r23, 0xFF	; 255
    776a:	80 e0       	ldi	r24, 0x00	; 0
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	c7 d8       	rcall	.-3698   	; 0x68fe <clock_settime>
}
    7770:	a5 96       	adiw	r28, 0x25	; 37
    7772:	e8 e0       	ldi	r30, 0x08	; 8
    7774:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

00007778 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7778:	a9 e2       	ldi	r26, 0x29	; 41
    777a:	b0 e0       	ldi	r27, 0x00	; 0
    777c:	e2 ec       	ldi	r30, 0xC2	; 194
    777e:	fb e3       	ldi	r31, 0x3B	; 59
    7780:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7784:	ce 01       	movw	r24, r28
    7786:	08 96       	adiw	r24, 0x08	; 8
    7788:	0e 94 65 2e 	call	0x5cca	; 0x5cca <rtc_read>
    778c:	88 23       	and	r24, r24
    778e:	29 f1       	breq	.+74     	; 0x77da <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7790:	ce 01       	movw	r24, r28
    7792:	08 96       	adiw	r24, 0x08	; 8
    7794:	b4 dc       	rcall	.-1688   	; 0x70fe <timegm>
    7796:	6e a3       	std	Y+38, r22	; 0x26
    7798:	7f a3       	std	Y+39, r23	; 0x27
    779a:	88 a7       	std	Y+40, r24	; 0x28
    779c:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    779e:	ed b7       	in	r30, 0x3d	; 61
    77a0:	fe b7       	in	r31, 0x3e	; 62
    77a2:	64 83       	std	Z+4, r22	; 0x04
    77a4:	75 83       	std	Z+5, r23	; 0x05
    77a6:	86 83       	std	Z+6, r24	; 0x06
    77a8:	97 83       	std	Z+7, r25	; 0x07
    77aa:	8f e2       	ldi	r24, 0x2F	; 47
    77ac:	96 e0       	ldi	r25, 0x06	; 6
    77ae:	a0 e0       	ldi	r26, 0x00	; 0
    77b0:	81 83       	std	Z+1, r24	; 0x01
    77b2:	92 83       	std	Z+2, r25	; 0x02
    77b4:	a3 83       	std	Z+3, r26	; 0x03
    77b6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    77ba:	ce 01       	movw	r24, r28
    77bc:	08 96       	adiw	r24, 0x08	; 8
    77be:	50 df       	rcall	.-352    	; 0x7660 <asctime>
    77c0:	ed b7       	in	r30, 0x3d	; 61
    77c2:	fe b7       	in	r31, 0x3e	; 62
    77c4:	95 83       	std	Z+5, r25	; 0x05
    77c6:	84 83       	std	Z+4, r24	; 0x04
    77c8:	8e e1       	ldi	r24, 0x1E	; 30
    77ca:	96 e0       	ldi	r25, 0x06	; 6
    77cc:	a0 e0       	ldi	r26, 0x00	; 0
    77ce:	81 83       	std	Z+1, r24	; 0x01
    77d0:	92 83       	std	Z+2, r25	; 0x02
    77d2:	a3 83       	std	Z+3, r26	; 0x03
    77d4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    77d8:	0a c0       	rjmp	.+20     	; 0x77ee <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    77da:	8d e0       	ldi	r24, 0x0D	; 13
    77dc:	96 e0       	ldi	r25, 0x06	; 6
    77de:	a0 e0       	ldi	r26, 0x00	; 0
    77e0:	ed b7       	in	r30, 0x3d	; 61
    77e2:	fe b7       	in	r31, 0x3e	; 62
    77e4:	81 83       	std	Z+1, r24	; 0x01
    77e6:	92 83       	std	Z+2, r25	; 0x02
    77e8:	a3 83       	std	Z+3, r26	; 0x03
    77ea:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    77ee:	be 01       	movw	r22, r28
    77f0:	62 5e       	subi	r22, 0xE2	; 226
    77f2:	7f 4f       	sbci	r23, 0xFF	; 255
    77f4:	80 e0       	ldi	r24, 0x00	; 0
    77f6:	90 e0       	ldi	r25, 0x00	; 0
    77f8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <clock_gettime>
    seconds = ts.tv_sec;
    77fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    77fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7800:	a8 a1       	ldd	r26, Y+32	; 0x20
    7802:	b9 a1       	ldd	r27, Y+33	; 0x21
    7804:	8e a3       	std	Y+38, r24	; 0x26
    7806:	9f a3       	std	Y+39, r25	; 0x27
    7808:	a8 a7       	std	Y+40, r26	; 0x28
    780a:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    780c:	ed b7       	in	r30, 0x3d	; 61
    780e:	fe b7       	in	r31, 0x3e	; 62
    7810:	84 83       	std	Z+4, r24	; 0x04
    7812:	95 83       	std	Z+5, r25	; 0x05
    7814:	a6 83       	std	Z+6, r26	; 0x06
    7816:	b7 83       	std	Z+7, r27	; 0x07
    7818:	8b ef       	ldi	r24, 0xFB	; 251
    781a:	95 e0       	ldi	r25, 0x05	; 5
    781c:	a0 e0       	ldi	r26, 0x00	; 0
    781e:	81 83       	std	Z+1, r24	; 0x01
    7820:	92 83       	std	Z+2, r25	; 0x02
    7822:	a3 83       	std	Z+3, r26	; 0x03
    7824:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7828:	ce 01       	movw	r24, r28
    782a:	86 96       	adiw	r24, 0x26	; 38
    782c:	a9 d9       	rcall	.-3246   	; 0x6b80 <gmtime>
    782e:	18 df       	rcall	.-464    	; 0x7660 <asctime>
    7830:	ed b7       	in	r30, 0x3d	; 61
    7832:	fe b7       	in	r31, 0x3e	; 62
    7834:	95 83       	std	Z+5, r25	; 0x05
    7836:	84 83       	std	Z+4, r24	; 0x04
    7838:	8a ee       	ldi	r24, 0xEA	; 234
    783a:	95 e0       	ldi	r25, 0x05	; 5
    783c:	a0 e0       	ldi	r26, 0x00	; 0
    783e:	81 83       	std	Z+1, r24	; 0x01
    7840:	92 83       	std	Z+2, r25	; 0x02
    7842:	a3 83       	std	Z+3, r26	; 0x03
    7844:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
    7848:	a9 96       	adiw	r28, 0x29	; 41
    784a:	e2 e0       	ldi	r30, 0x02	; 2
    784c:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00007850 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7850:	fc 01       	movw	r30, r24
    7852:	84 81       	ldd	r24, Z+4	; 0x04
    7854:	95 81       	ldd	r25, Z+5	; 0x05
    7856:	00 97       	sbiw	r24, 0x00	; 0
    7858:	79 f0       	breq	.+30     	; 0x7878 <_putc_buffer_fn+0x28>
    785a:	66 23       	and	r22, r22
    785c:	69 f0       	breq	.+26     	; 0x7878 <_putc_buffer_fn+0x28>
    785e:	01 97       	sbiw	r24, 0x01	; 1
    7860:	95 83       	std	Z+5, r25	; 0x05
    7862:	84 83       	std	Z+4, r24	; 0x04
    7864:	86 81       	ldd	r24, Z+6	; 0x06
    7866:	97 81       	ldd	r25, Z+7	; 0x07
    7868:	01 96       	adiw	r24, 0x01	; 1
    786a:	97 83       	std	Z+7, r25	; 0x07
    786c:	86 83       	std	Z+6, r24	; 0x06
    786e:	a2 81       	ldd	r26, Z+2	; 0x02
    7870:	b3 81       	ldd	r27, Z+3	; 0x03
    7872:	6d 93       	st	X+, r22
    7874:	b3 83       	std	Z+3, r27	; 0x03
    7876:	a2 83       	std	Z+2, r26	; 0x02
    7878:	02 80       	ldd	r0, Z+2	; 0x02
    787a:	f3 81       	ldd	r31, Z+3	; 0x03
    787c:	e0 2d       	mov	r30, r0
    787e:	10 82       	st	Z, r1
    7880:	08 95       	ret

00007882 <_putc_fn>:
    7882:	fc 01       	movw	r30, r24
    7884:	26 81       	ldd	r18, Z+6	; 0x06
    7886:	37 81       	ldd	r19, Z+7	; 0x07
    7888:	2f 5f       	subi	r18, 0xFF	; 255
    788a:	3f 4f       	sbci	r19, 0xFF	; 255
    788c:	37 83       	std	Z+7, r19	; 0x07
    788e:	26 83       	std	Z+6, r18	; 0x06
    7890:	86 2f       	mov	r24, r22
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	0c 94 62 75 	jmp	0xeac4	; 0xeac4 <putchar>
    7898:	08 95       	ret

0000789a <bin2num>:
    789a:	a0 e0       	ldi	r26, 0x00	; 0
    789c:	b0 e0       	ldi	r27, 0x00	; 0
    789e:	e3 e5       	ldi	r30, 0x53	; 83
    78a0:	fc e3       	ldi	r31, 0x3C	; 60
    78a2:	0c 94 a2 e3 	jmp	0x1c744	; 0x1c744 <__prologue_saves__+0xe>
    78a6:	ea 01       	movw	r28, r20
    78a8:	53 e0       	ldi	r21, 0x03	; 3
    78aa:	ee 0c       	add	r14, r14
    78ac:	ff 1c       	adc	r15, r15
    78ae:	5a 95       	dec	r21
    78b0:	e1 f7       	brne	.-8      	; 0x78aa <bin2num+0x10>
    78b2:	fc 01       	movw	r30, r24
    78b4:	af 01       	movw	r20, r30
    78b6:	48 1b       	sub	r20, r24
    78b8:	59 0b       	sbc	r21, r25
    78ba:	c4 17       	cp	r28, r20
    78bc:	d5 07       	cpc	r29, r21
    78be:	14 f0       	brlt	.+4      	; 0x78c4 <bin2num+0x2a>
    78c0:	11 92       	st	Z+, r1
    78c2:	f8 cf       	rjmp	.-16     	; 0x78b4 <bin2num+0x1a>
    78c4:	41 e0       	ldi	r20, 0x01	; 1
    78c6:	e4 1a       	sub	r14, r20
    78c8:	f1 08       	sbc	r15, r1
    78ca:	5b 01       	movw	r10, r22
    78cc:	42 e0       	ldi	r20, 0x02	; 2
    78ce:	a4 1a       	sub	r10, r20
    78d0:	b1 08       	sbc	r11, r1
    78d2:	f7 fc       	sbrc	r15, 7
    78d4:	3b c0       	rjmp	.+118    	; 0x794c <bin2num+0xb2>
    78d6:	f7 01       	movw	r30, r14
    78d8:	43 e0       	ldi	r20, 0x03	; 3
    78da:	f5 95       	asr	r31
    78dc:	e7 95       	ror	r30
    78de:	4a 95       	dec	r20
    78e0:	e1 f7       	brne	.-8      	; 0x78da <bin2num+0x40>
    78e2:	e0 0f       	add	r30, r16
    78e4:	f1 1f       	adc	r31, r17
    78e6:	40 81       	ld	r20, Z
    78e8:	50 e0       	ldi	r21, 0x00	; 0
    78ea:	f7 01       	movw	r30, r14
    78ec:	e7 70       	andi	r30, 0x07	; 7
    78ee:	ff 27       	eor	r31, r31
    78f0:	02 c0       	rjmp	.+4      	; 0x78f6 <bin2num+0x5c>
    78f2:	55 95       	asr	r21
    78f4:	47 95       	ror	r20
    78f6:	ea 95       	dec	r30
    78f8:	e2 f7       	brpl	.-8      	; 0x78f2 <bin2num+0x58>
    78fa:	41 70       	andi	r20, 0x01	; 1
    78fc:	55 27       	eor	r21, r21
    78fe:	dc 01       	movw	r26, r24
    7900:	e0 e0       	ldi	r30, 0x00	; 0
    7902:	f0 e0       	ldi	r31, 0x00	; 0
    7904:	ec 17       	cp	r30, r28
    7906:	fd 07       	cpc	r31, r29
    7908:	ec f4       	brge	.+58     	; 0x7944 <bin2num+0xaa>
    790a:	ea 15       	cp	r30, r10
    790c:	fb 05       	cpc	r31, r11
    790e:	4c f0       	brlt	.+18     	; 0x7922 <bin2num+0x88>
    7910:	dc 01       	movw	r26, r24
    7912:	ae 0f       	add	r26, r30
    7914:	bf 1f       	adc	r27, r31
    7916:	1c 92       	st	X, r1
    7918:	41 e0       	ldi	r20, 0x01	; 1
    791a:	e4 1a       	sub	r14, r20
    791c:	f1 08       	sbc	r15, r1
    791e:	ef 01       	movw	r28, r30
    7920:	d8 cf       	rjmp	.-80     	; 0x78d2 <bin2num+0x38>
    7922:	9c 90       	ld	r9, X
    7924:	99 0c       	add	r9, r9
    7926:	94 2a       	or	r9, r20
    7928:	49 2d       	mov	r20, r9
    792a:	50 e0       	ldi	r21, 0x00	; 0
    792c:	42 17       	cp	r20, r18
    792e:	53 07       	cpc	r21, r19
    7930:	24 f0       	brlt	.+8      	; 0x793a <bin2num+0xa0>
    7932:	92 1a       	sub	r9, r18
    7934:	41 e0       	ldi	r20, 0x01	; 1
    7936:	50 e0       	ldi	r21, 0x00	; 0
    7938:	02 c0       	rjmp	.+4      	; 0x793e <bin2num+0xa4>
    793a:	40 e0       	ldi	r20, 0x00	; 0
    793c:	50 e0       	ldi	r21, 0x00	; 0
    793e:	9d 92       	st	X+, r9
    7940:	31 96       	adiw	r30, 0x01	; 1
    7942:	e0 cf       	rjmp	.-64     	; 0x7904 <bin2num+0x6a>
    7944:	41 15       	cp	r20, r1
    7946:	51 05       	cpc	r21, r1
    7948:	01 f7       	brne	.-64     	; 0x790a <bin2num+0x70>
    794a:	e2 cf       	rjmp	.-60     	; 0x7910 <bin2num+0x76>
    794c:	fc 01       	movw	r30, r24
    794e:	9f 01       	movw	r18, r30
    7950:	28 1b       	sub	r18, r24
    7952:	39 0b       	sbc	r19, r25
    7954:	2c 17       	cp	r18, r28
    7956:	3d 07       	cpc	r19, r29
    7958:	4c f4       	brge	.+18     	; 0x796c <bin2num+0xd2>
    795a:	20 81       	ld	r18, Z
    795c:	2a 30       	cpi	r18, 0x0A	; 10
    795e:	10 f4       	brcc	.+4      	; 0x7964 <bin2num+0xca>
    7960:	20 5d       	subi	r18, 0xD0	; 208
    7962:	01 c0       	rjmp	.+2      	; 0x7966 <bin2num+0xcc>
    7964:	29 5a       	subi	r18, 0xA9	; 169
    7966:	20 83       	st	Z, r18
    7968:	31 96       	adiw	r30, 0x01	; 1
    796a:	f1 cf       	rjmp	.-30     	; 0x794e <bin2num+0xb4>
    796c:	9e 01       	movw	r18, r28
    796e:	d7 ff       	sbrs	r29, 7
    7970:	02 c0       	rjmp	.+4      	; 0x7976 <bin2num+0xdc>
    7972:	20 e0       	ldi	r18, 0x00	; 0
    7974:	30 e0       	ldi	r19, 0x00	; 0
    7976:	c1 14       	cp	r12, r1
    7978:	d1 04       	cpc	r13, r1
    797a:	61 f0       	breq	.+24     	; 0x7994 <bin2num+0xfa>
    797c:	61 50       	subi	r22, 0x01	; 1
    797e:	71 09       	sbc	r23, r1
    7980:	26 17       	cp	r18, r22
    7982:	37 07       	cpc	r19, r23
    7984:	3c f4       	brge	.+14     	; 0x7994 <bin2num+0xfa>
    7986:	fc 01       	movw	r30, r24
    7988:	e2 0f       	add	r30, r18
    798a:	f3 1f       	adc	r31, r19
    798c:	c0 82       	st	Z, r12
    798e:	21 96       	adiw	r28, 0x01	; 1
    7990:	2f 5f       	subi	r18, 0xFF	; 255
    7992:	3f 4f       	sbci	r19, 0xFF	; 255
    7994:	fc 01       	movw	r30, r24
    7996:	e2 0f       	add	r30, r18
    7998:	f3 1f       	adc	r31, r19
    799a:	10 82       	st	Z, r1
    799c:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <reverse>
    79a0:	ce 01       	movw	r24, r28
    79a2:	cd b7       	in	r28, 0x3d	; 61
    79a4:	de b7       	in	r29, 0x3e	; 62
    79a6:	eb e0       	ldi	r30, 0x0B	; 11
    79a8:	0c 94 be e3 	jmp	0x1c77c	; 0x1c77c <__epilogue_restores__+0xe>

000079ac <pch>:
    79ac:	fc 01       	movw	r30, r24
    79ae:	22 81       	ldd	r18, Z+2	; 0x02
    79b0:	33 81       	ldd	r19, Z+3	; 0x03
    79b2:	44 81       	ldd	r20, Z+4	; 0x04
    79b4:	55 81       	ldd	r21, Z+5	; 0x05
    79b6:	80 81       	ld	r24, Z
    79b8:	91 81       	ldd	r25, Z+1	; 0x01
    79ba:	24 17       	cp	r18, r20
    79bc:	35 07       	cpc	r19, r21
    79be:	54 f4       	brge	.+20     	; 0x79d4 <pch+0x28>
    79c0:	a9 01       	movw	r20, r18
    79c2:	4f 5f       	subi	r20, 0xFF	; 255
    79c4:	5f 4f       	sbci	r21, 0xFF	; 255
    79c6:	53 83       	std	Z+3, r21	; 0x03
    79c8:	42 83       	std	Z+2, r20	; 0x02
    79ca:	dc 01       	movw	r26, r24
    79cc:	a2 0f       	add	r26, r18
    79ce:	b3 1f       	adc	r27, r19
    79d0:	6c 93       	st	X, r22
    79d2:	04 c0       	rjmp	.+8      	; 0x79dc <pch+0x30>
    79d4:	dc 01       	movw	r26, r24
    79d6:	a2 0f       	add	r26, r18
    79d8:	b3 1f       	adc	r27, r19
    79da:	1c 92       	st	X, r1
    79dc:	82 81       	ldd	r24, Z+2	; 0x02
    79de:	93 81       	ldd	r25, Z+3	; 0x03
    79e0:	08 95       	ret

000079e2 <p_ntoa>:
    79e2:	af 92       	push	r10
    79e4:	cf 92       	push	r12
    79e6:	df 92       	push	r13
    79e8:	ef 92       	push	r14
    79ea:	ff 92       	push	r15
    79ec:	0f 93       	push	r16
    79ee:	1f 93       	push	r17
    79f0:	cf 93       	push	r28
    79f2:	df 93       	push	r29
    79f4:	dc 01       	movw	r26, r24
    79f6:	eb 01       	movw	r28, r22
    79f8:	fa 01       	movw	r30, r20
    79fa:	b9 01       	movw	r22, r18
    79fc:	98 01       	movw	r18, r16
    79fe:	a6 01       	movw	r20, r12
    7a00:	9a 2d       	mov	r25, r10
    7a02:	a5 fa       	bst	r10, 5
    7a04:	cc 24       	eor	r12, r12
    7a06:	c0 f8       	bld	r12, 0
    7a08:	a6 fc       	sbrc	r10, 6
    7a0a:	07 c0       	rjmp	.+14     	; 0x7a1a <p_ntoa+0x38>
    7a0c:	a2 fc       	sbrc	r10, 2
    7a0e:	08 c0       	rjmp	.+16     	; 0x7a20 <p_ntoa+0x3e>
    7a10:	a4 fe       	sbrs	r10, 4
    7a12:	09 c0       	rjmp	.+18     	; 0x7a26 <p_ntoa+0x44>
    7a14:	00 e2       	ldi	r16, 0x20	; 32
    7a16:	10 e0       	ldi	r17, 0x00	; 0
    7a18:	08 c0       	rjmp	.+16     	; 0x7a2a <p_ntoa+0x48>
    7a1a:	0d e2       	ldi	r16, 0x2D	; 45
    7a1c:	10 e0       	ldi	r17, 0x00	; 0
    7a1e:	05 c0       	rjmp	.+10     	; 0x7a2a <p_ntoa+0x48>
    7a20:	0b e2       	ldi	r16, 0x2B	; 43
    7a22:	10 e0       	ldi	r17, 0x00	; 0
    7a24:	02 c0       	rjmp	.+4      	; 0x7a2a <p_ntoa+0x48>
    7a26:	00 e0       	ldi	r16, 0x00	; 0
    7a28:	10 e0       	ldi	r17, 0x00	; 0
    7a2a:	95 ff       	sbrs	r25, 5
    7a2c:	04 c0       	rjmp	.+8      	; 0x7a36 <p_ntoa+0x54>
    7a2e:	89 2f       	mov	r24, r25
    7a30:	8a 70       	andi	r24, 0x0A	; 10
    7a32:	09 f0       	breq	.+2      	; 0x7a36 <p_ntoa+0x54>
    7a34:	c1 2c       	mov	r12, r1
    7a36:	c0 fa       	bst	r12, 0
    7a38:	95 f9       	bld	r25, 5
    7a3a:	89 2f       	mov	r24, r25
    7a3c:	82 70       	andi	r24, 0x02	; 2
    7a3e:	c8 2e       	mov	r12, r24
    7a40:	91 fd       	sbrc	r25, 1
    7a42:	02 c0       	rjmp	.+4      	; 0x7a48 <p_ntoa+0x66>
    7a44:	40 e0       	ldi	r20, 0x00	; 0
    7a46:	50 e0       	ldi	r21, 0x00	; 0
    7a48:	89 2f       	mov	r24, r25
    7a4a:	83 70       	andi	r24, 0x03	; 3
    7a4c:	11 f4       	brne	.+4      	; 0x7a52 <p_ntoa+0x70>
    7a4e:	41 e0       	ldi	r20, 0x01	; 1
    7a50:	50 e0       	ldi	r21, 0x00	; 0
    7a52:	90 ff       	sbrs	r25, 0
    7a54:	0c c0       	rjmp	.+24     	; 0x7a6e <p_ntoa+0x8c>
    7a56:	95 fd       	sbrc	r25, 5
    7a58:	05 c0       	rjmp	.+10     	; 0x7a64 <p_ntoa+0x82>
    7a5a:	c1 10       	cpse	r12, r1
    7a5c:	08 c0       	rjmp	.+16     	; 0x7a6e <p_ntoa+0x8c>
    7a5e:	41 e0       	ldi	r20, 0x01	; 1
    7a60:	50 e0       	ldi	r21, 0x00	; 0
    7a62:	05 c0       	rjmp	.+10     	; 0x7a6e <p_ntoa+0x8c>
    7a64:	94 75       	andi	r25, 0x54	; 84
    7a66:	a7 01       	movw	r20, r14
    7a68:	11 f0       	breq	.+4      	; 0x7a6e <p_ntoa+0x8c>
    7a6a:	41 50       	subi	r20, 0x01	; 1
    7a6c:	51 09       	sbc	r21, r1
    7a6e:	68 01       	movw	r12, r16
    7a70:	7e 01       	movw	r14, r28
    7a72:	8d 01       	movw	r16, r26
    7a74:	cf 01       	movw	r24, r30
    7a76:	11 df       	rcall	.-478    	; 0x789a <bin2num>
    7a78:	df 91       	pop	r29
    7a7a:	cf 91       	pop	r28
    7a7c:	1f 91       	pop	r17
    7a7e:	0f 91       	pop	r16
    7a80:	ff 90       	pop	r15
    7a82:	ef 90       	pop	r14
    7a84:	df 90       	pop	r13
    7a86:	cf 90       	pop	r12
    7a88:	af 90       	pop	r10
    7a8a:	08 95       	ret

00007a8c <p_ftoa>:
    7a8c:	aa e0       	ldi	r26, 0x0A	; 10
    7a8e:	b0 e0       	ldi	r27, 0x00	; 0
    7a90:	ec e4       	ldi	r30, 0x4C	; 76
    7a92:	fd e3       	ldi	r31, 0x3D	; 61
    7a94:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    7a98:	4b 01       	movw	r8, r22
    7a9a:	5c 01       	movw	r10, r24
    7a9c:	1a 01       	movw	r2, r20
    7a9e:	28 01       	movw	r4, r16
    7aa0:	c6 fa       	bst	r12, 6
    7aa2:	11 27       	eor	r17, r17
    7aa4:	10 f9       	bld	r17, 0
    7aa6:	5a 83       	std	Y+2, r21	; 0x02
    7aa8:	49 83       	std	Y+1, r20	; 0x01
    7aaa:	1c 82       	std	Y+4, r1	; 0x04
    7aac:	1b 82       	std	Y+3, r1	; 0x03
    7aae:	21 50       	subi	r18, 0x01	; 1
    7ab0:	31 09       	sbc	r19, r1
    7ab2:	3e 83       	std	Y+6, r19	; 0x06
    7ab4:	2d 83       	std	Y+5, r18	; 0x05
    7ab6:	fa 01       	movw	r30, r20
    7ab8:	10 82       	st	Z, r1
    7aba:	20 e0       	ldi	r18, 0x00	; 0
    7abc:	30 e0       	ldi	r19, 0x00	; 0
    7abe:	a9 01       	movw	r20, r18
    7ac0:	0e 94 59 e4 	call	0x1c8b2	; 0x1c8b2 <__cmpsf2>
    7ac4:	87 ff       	sbrs	r24, 7
    7ac6:	05 c0       	rjmp	.+10     	; 0x7ad2 <p_ftoa+0x46>
    7ac8:	b7 fa       	bst	r11, 7
    7aca:	b0 94       	com	r11
    7acc:	b7 f8       	bld	r11, 7
    7ace:	b0 94       	com	r11
    7ad0:	11 e0       	ldi	r17, 0x01	; 1
    7ad2:	10 fb       	bst	r17, 0
    7ad4:	c6 f8       	bld	r12, 6
    7ad6:	c6 fe       	sbrs	r12, 6
    7ad8:	02 c0       	rjmp	.+4      	; 0x7ade <p_ftoa+0x52>
    7ada:	6d e2       	ldi	r22, 0x2D	; 45
    7adc:	07 c0       	rjmp	.+14     	; 0x7aec <p_ftoa+0x60>
    7ade:	c2 fe       	sbrs	r12, 2
    7ae0:	02 c0       	rjmp	.+4      	; 0x7ae6 <p_ftoa+0x5a>
    7ae2:	6b e2       	ldi	r22, 0x2B	; 43
    7ae4:	03 c0       	rjmp	.+6      	; 0x7aec <p_ftoa+0x60>
    7ae6:	c4 fe       	sbrs	r12, 4
    7ae8:	04 c0       	rjmp	.+8      	; 0x7af2 <p_ftoa+0x66>
    7aea:	60 e2       	ldi	r22, 0x20	; 32
    7aec:	ce 01       	movw	r24, r28
    7aee:	01 96       	adiw	r24, 0x01	; 1
    7af0:	5d df       	rcall	.-326    	; 0x79ac <pch>
    7af2:	37 01       	movw	r6, r14
    7af4:	f7 fe       	sbrs	r15, 7
    7af6:	02 c0       	rjmp	.+4      	; 0x7afc <p_ftoa+0x70>
    7af8:	61 2c       	mov	r6, r1
    7afa:	71 2c       	mov	r7, r1
    7afc:	20 e0       	ldi	r18, 0x00	; 0
    7afe:	30 e0       	ldi	r19, 0x00	; 0
    7b00:	a9 01       	movw	r20, r18
    7b02:	c5 01       	movw	r24, r10
    7b04:	b4 01       	movw	r22, r8
    7b06:	0e 94 59 e4 	call	0x1c8b2	; 0x1c8b2 <__cmpsf2>
    7b0a:	88 23       	and	r24, r24
    7b0c:	d1 f1       	breq	.+116    	; 0x7b82 <p_ftoa+0xf6>
    7b0e:	c1 fe       	sbrs	r12, 1
    7b10:	11 c0       	rjmp	.+34     	; 0x7b34 <p_ftoa+0xa8>
    7b12:	83 01       	movw	r16, r6
    7b14:	60 e0       	ldi	r22, 0x00	; 0
    7b16:	70 e0       	ldi	r23, 0x00	; 0
    7b18:	80 e0       	ldi	r24, 0x00	; 0
    7b1a:	9f e3       	ldi	r25, 0x3F	; 63
    7b1c:	01 15       	cp	r16, r1
    7b1e:	11 05       	cpc	r17, r1
    7b20:	69 f0       	breq	.+26     	; 0x7b3c <p_ftoa+0xb0>
    7b22:	20 e0       	ldi	r18, 0x00	; 0
    7b24:	30 e0       	ldi	r19, 0x00	; 0
    7b26:	40 e2       	ldi	r20, 0x20	; 32
    7b28:	51 e4       	ldi	r21, 0x41	; 65
    7b2a:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    7b2e:	01 50       	subi	r16, 0x01	; 1
    7b30:	11 09       	sbc	r17, r1
    7b32:	f4 cf       	rjmp	.-24     	; 0x7b1c <p_ftoa+0x90>
    7b34:	60 e0       	ldi	r22, 0x00	; 0
    7b36:	70 e0       	ldi	r23, 0x00	; 0
    7b38:	80 e0       	ldi	r24, 0x00	; 0
    7b3a:	9f e3       	ldi	r25, 0x3F	; 63
    7b3c:	9b 01       	movw	r18, r22
    7b3e:	ac 01       	movw	r20, r24
    7b40:	c5 01       	movw	r24, r10
    7b42:	b4 01       	movw	r22, r8
    7b44:	0e 94 f5 e3 	call	0x1c7ea	; 0x1c7ea <__addsf3>
    7b48:	4b 01       	movw	r8, r22
    7b4a:	5c 01       	movw	r10, r24
    7b4c:	ee 24       	eor	r14, r14
    7b4e:	e3 94       	inc	r14
    7b50:	f1 2c       	mov	r15, r1
    7b52:	20 e0       	ldi	r18, 0x00	; 0
    7b54:	30 e0       	ldi	r19, 0x00	; 0
    7b56:	40 e2       	ldi	r20, 0x20	; 32
    7b58:	51 e4       	ldi	r21, 0x41	; 65
    7b5a:	c5 01       	movw	r24, r10
    7b5c:	b4 01       	movw	r22, r8
    7b5e:	0e 94 a8 e5 	call	0x1cb50	; 0x1cb50 <__gesf2>
    7b62:	87 fd       	sbrc	r24, 7
    7b64:	11 c0       	rjmp	.+34     	; 0x7b88 <p_ftoa+0xfc>
    7b66:	ff ef       	ldi	r31, 0xFF	; 255
    7b68:	ef 1a       	sub	r14, r31
    7b6a:	ff 0a       	sbc	r15, r31
    7b6c:	20 e0       	ldi	r18, 0x00	; 0
    7b6e:	30 e0       	ldi	r19, 0x00	; 0
    7b70:	40 e2       	ldi	r20, 0x20	; 32
    7b72:	51 e4       	ldi	r21, 0x41	; 65
    7b74:	c5 01       	movw	r24, r10
    7b76:	b4 01       	movw	r22, r8
    7b78:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    7b7c:	4b 01       	movw	r8, r22
    7b7e:	5c 01       	movw	r10, r24
    7b80:	e8 cf       	rjmp	.-48     	; 0x7b52 <p_ftoa+0xc6>
    7b82:	ee 24       	eor	r14, r14
    7b84:	e3 94       	inc	r14
    7b86:	f1 2c       	mov	r15, r1
    7b88:	8c 2d       	mov	r24, r12
    7b8a:	88 72       	andi	r24, 0x28	; 40
    7b8c:	80 32       	cpi	r24, 0x20	; 32
    7b8e:	c1 f4       	brne	.+48     	; 0x7bc0 <p_ftoa+0x134>
    7b90:	82 01       	movw	r16, r4
    7b92:	0e 19       	sub	r16, r14
    7b94:	1f 09       	sbc	r17, r15
    7b96:	8b 81       	ldd	r24, Y+3	; 0x03
    7b98:	9c 81       	ldd	r25, Y+4	; 0x04
    7b9a:	08 1b       	sub	r16, r24
    7b9c:	19 0b       	sbc	r17, r25
    7b9e:	c1 fe       	sbrs	r12, 1
    7ba0:	07 c0       	rjmp	.+14     	; 0x7bb0 <p_ftoa+0x124>
    7ba2:	61 14       	cp	r6, r1
    7ba4:	71 04       	cpc	r7, r1
    7ba6:	21 f0       	breq	.+8      	; 0x7bb0 <p_ftoa+0x124>
    7ba8:	06 19       	sub	r16, r6
    7baa:	17 09       	sbc	r17, r7
    7bac:	01 50       	subi	r16, 0x01	; 1
    7bae:	11 09       	sbc	r17, r1
    7bb0:	10 16       	cp	r1, r16
    7bb2:	11 06       	cpc	r1, r17
    7bb4:	2c f4       	brge	.+10     	; 0x7bc0 <p_ftoa+0x134>
    7bb6:	60 e3       	ldi	r22, 0x30	; 48
    7bb8:	ce 01       	movw	r24, r28
    7bba:	01 96       	adiw	r24, 0x01	; 1
    7bbc:	f7 de       	rcall	.-530    	; 0x79ac <pch>
    7bbe:	f6 cf       	rjmp	.-20     	; 0x7bac <p_ftoa+0x120>
    7bc0:	c5 01       	movw	r24, r10
    7bc2:	b4 01       	movw	r22, r8
    7bc4:	0e 94 c5 e4 	call	0x1c98a	; 0x1c98a <__fixsfsi>
    7bc8:	6f 83       	std	Y+7, r22	; 0x07
    7bca:	78 87       	std	Y+8, r23	; 0x08
    7bcc:	89 87       	std	Y+9, r24	; 0x09
    7bce:	9a 87       	std	Y+10, r25	; 0x0a
    7bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    7bd2:	60 5d       	subi	r22, 0xD0	; 208
    7bd4:	ce 01       	movw	r24, r28
    7bd6:	01 96       	adiw	r24, 0x01	; 1
    7bd8:	e9 de       	rcall	.-558    	; 0x79ac <pch>
    7bda:	2f 81       	ldd	r18, Y+7	; 0x07
    7bdc:	38 85       	ldd	r19, Y+8	; 0x08
    7bde:	b9 01       	movw	r22, r18
    7be0:	33 0f       	add	r19, r19
    7be2:	88 0b       	sbc	r24, r24
    7be4:	99 0b       	sbc	r25, r25
    7be6:	0e 94 f8 e4 	call	0x1c9f0	; 0x1c9f0 <__floatsisf>
    7bea:	9b 01       	movw	r18, r22
    7bec:	ac 01       	movw	r20, r24
    7bee:	c5 01       	movw	r24, r10
    7bf0:	b4 01       	movw	r22, r8
    7bf2:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    7bf6:	31 e0       	ldi	r19, 0x01	; 1
    7bf8:	e3 1a       	sub	r14, r19
    7bfa:	f1 08       	sbc	r15, r1
    7bfc:	20 e0       	ldi	r18, 0x00	; 0
    7bfe:	30 e0       	ldi	r19, 0x00	; 0
    7c00:	40 e2       	ldi	r20, 0x20	; 32
    7c02:	51 e4       	ldi	r21, 0x41	; 65
    7c04:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    7c08:	4b 01       	movw	r8, r22
    7c0a:	5c 01       	movw	r10, r24
    7c0c:	e1 14       	cp	r14, r1
    7c0e:	f1 04       	cpc	r15, r1
    7c10:	b9 f6       	brne	.-82     	; 0x7bc0 <p_ftoa+0x134>
    7c12:	c1 fc       	sbrc	r12, 1
    7c14:	10 c0       	rjmp	.+32     	; 0x7c36 <p_ftoa+0x1aa>
    7c16:	60 e0       	ldi	r22, 0x00	; 0
    7c18:	ce 01       	movw	r24, r28
    7c1a:	01 96       	adiw	r24, 0x01	; 1
    7c1c:	c7 de       	rcall	.-626    	; 0x79ac <pch>
    7c1e:	f1 01       	movw	r30, r2
    7c20:	01 90       	ld	r0, Z+
    7c22:	00 20       	and	r0, r0
    7c24:	e9 f7       	brne	.-6      	; 0x7c20 <p_ftoa+0x194>
    7c26:	31 97       	sbiw	r30, 0x01	; 1
    7c28:	cf 01       	movw	r24, r30
    7c2a:	82 19       	sub	r24, r2
    7c2c:	93 09       	sbc	r25, r3
    7c2e:	2a 96       	adiw	r28, 0x0a	; 10
    7c30:	e2 e1       	ldi	r30, 0x12	; 18
    7c32:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>
    7c36:	61 14       	cp	r6, r1
    7c38:	71 04       	cpc	r7, r1
    7c3a:	69 f3       	breq	.-38     	; 0x7c16 <p_ftoa+0x18a>
    7c3c:	6e e2       	ldi	r22, 0x2E	; 46
    7c3e:	ce 01       	movw	r24, r28
    7c40:	01 96       	adiw	r24, 0x01	; 1
    7c42:	b4 de       	rcall	.-664    	; 0x79ac <pch>
    7c44:	c5 01       	movw	r24, r10
    7c46:	b4 01       	movw	r22, r8
    7c48:	0e 94 c5 e4 	call	0x1c98a	; 0x1c98a <__fixsfsi>
    7c4c:	6b 01       	movw	r12, r22
    7c4e:	7c 01       	movw	r14, r24
    7c50:	07 2e       	mov	r0, r23
    7c52:	00 0c       	add	r0, r0
    7c54:	88 0b       	sbc	r24, r24
    7c56:	99 0b       	sbc	r25, r25
    7c58:	0e 94 f8 e4 	call	0x1c9f0	; 0x1c9f0 <__floatsisf>
    7c5c:	9b 01       	movw	r18, r22
    7c5e:	ac 01       	movw	r20, r24
    7c60:	c5 01       	movw	r24, r10
    7c62:	b4 01       	movw	r22, r8
    7c64:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    7c68:	4b 01       	movw	r8, r22
    7c6a:	5c 01       	movw	r10, r24
    7c6c:	b6 01       	movw	r22, r12
    7c6e:	60 5d       	subi	r22, 0xD0	; 208
    7c70:	7f 4f       	sbci	r23, 0xFF	; 255
    7c72:	ce 01       	movw	r24, r28
    7c74:	01 96       	adiw	r24, 0x01	; 1
    7c76:	9a de       	rcall	.-716    	; 0x79ac <pch>
    7c78:	81 e0       	ldi	r24, 0x01	; 1
    7c7a:	68 1a       	sub	r6, r24
    7c7c:	71 08       	sbc	r7, r1
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	40 e2       	ldi	r20, 0x20	; 32
    7c84:	51 e4       	ldi	r21, 0x41	; 65
    7c86:	c5 01       	movw	r24, r10
    7c88:	b4 01       	movw	r22, r8
    7c8a:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    7c8e:	4b 01       	movw	r8, r22
    7c90:	5c 01       	movw	r10, r24
    7c92:	61 14       	cp	r6, r1
    7c94:	71 04       	cpc	r7, r1
    7c96:	b1 f6       	brne	.-84     	; 0x7c44 <p_ftoa+0x1b8>
    7c98:	be cf       	rjmp	.-132    	; 0x7c16 <p_ftoa+0x18a>

00007c9a <p_etoa>:
    7c9a:	a3 e1       	ldi	r26, 0x13	; 19
    7c9c:	b0 e0       	ldi	r27, 0x00	; 0
    7c9e:	e3 e5       	ldi	r30, 0x53	; 83
    7ca0:	fe e3       	ldi	r31, 0x3E	; 62
    7ca2:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    7ca6:	4b 01       	movw	r8, r22
    7ca8:	5c 01       	movw	r10, r24
    7caa:	59 8b       	std	Y+17, r21	; 0x11
    7cac:	48 8b       	std	Y+16, r20	; 0x10
    7cae:	1b 8b       	std	Y+19, r17	; 0x13
    7cb0:	0a 8b       	std	Y+18, r16	; 0x12
    7cb2:	3c 2c       	mov	r3, r12
    7cb4:	c6 fa       	bst	r12, 6
    7cb6:	11 27       	eor	r17, r17
    7cb8:	10 f9       	bld	r17, 0
    7cba:	59 87       	std	Y+9, r21	; 0x09
    7cbc:	48 87       	std	Y+8, r20	; 0x08
    7cbe:	1b 86       	std	Y+11, r1	; 0x0b
    7cc0:	1a 86       	std	Y+10, r1	; 0x0a
    7cc2:	21 50       	subi	r18, 0x01	; 1
    7cc4:	31 09       	sbc	r19, r1
    7cc6:	3d 87       	std	Y+13, r19	; 0x0d
    7cc8:	2c 87       	std	Y+12, r18	; 0x0c
    7cca:	fa 01       	movw	r30, r20
    7ccc:	10 82       	st	Z, r1
    7cce:	20 e0       	ldi	r18, 0x00	; 0
    7cd0:	30 e0       	ldi	r19, 0x00	; 0
    7cd2:	a9 01       	movw	r20, r18
    7cd4:	0e 94 59 e4 	call	0x1c8b2	; 0x1c8b2 <__cmpsf2>
    7cd8:	87 ff       	sbrs	r24, 7
    7cda:	05 c0       	rjmp	.+10     	; 0x7ce6 <p_etoa+0x4c>
    7cdc:	b7 fa       	bst	r11, 7
    7cde:	b0 94       	com	r11
    7ce0:	b7 f8       	bld	r11, 7
    7ce2:	b0 94       	com	r11
    7ce4:	11 e0       	ldi	r17, 0x01	; 1
    7ce6:	10 fb       	bst	r17, 0
    7ce8:	36 f8       	bld	r3, 6
    7cea:	36 fe       	sbrs	r3, 6
    7cec:	02 c0       	rjmp	.+4      	; 0x7cf2 <p_etoa+0x58>
    7cee:	6d e2       	ldi	r22, 0x2D	; 45
    7cf0:	07 c0       	rjmp	.+14     	; 0x7d00 <p_etoa+0x66>
    7cf2:	32 fe       	sbrs	r3, 2
    7cf4:	02 c0       	rjmp	.+4      	; 0x7cfa <p_etoa+0x60>
    7cf6:	6b e2       	ldi	r22, 0x2B	; 43
    7cf8:	03 c0       	rjmp	.+6      	; 0x7d00 <p_etoa+0x66>
    7cfa:	34 fe       	sbrs	r3, 4
    7cfc:	04 c0       	rjmp	.+8      	; 0x7d06 <p_etoa+0x6c>
    7cfe:	60 e2       	ldi	r22, 0x20	; 32
    7d00:	ce 01       	movw	r24, r28
    7d02:	08 96       	adiw	r24, 0x08	; 8
    7d04:	53 de       	rcall	.-858    	; 0x79ac <pch>
    7d06:	37 01       	movw	r6, r14
    7d08:	f7 fe       	sbrs	r15, 7
    7d0a:	02 c0       	rjmp	.+4      	; 0x7d10 <p_etoa+0x76>
    7d0c:	61 2c       	mov	r6, r1
    7d0e:	71 2c       	mov	r7, r1
    7d10:	1f 86       	std	Y+15, r1	; 0x0f
    7d12:	1e 86       	std	Y+14, r1	; 0x0e
    7d14:	20 e0       	ldi	r18, 0x00	; 0
    7d16:	30 e0       	ldi	r19, 0x00	; 0
    7d18:	a9 01       	movw	r20, r18
    7d1a:	c5 01       	movw	r24, r10
    7d1c:	b4 01       	movw	r22, r8
    7d1e:	0e 94 59 e4 	call	0x1c8b2	; 0x1c8b2 <__cmpsf2>
    7d22:	f3 2d       	mov	r31, r3
    7d24:	f2 70       	andi	r31, 0x02	; 2
    7d26:	2f 2e       	mov	r2, r31
    7d28:	88 23       	and	r24, r24
    7d2a:	09 f4       	brne	.+2      	; 0x7d2e <p_etoa+0x94>
    7d2c:	70 c0       	rjmp	.+224    	; 0x7e0e <p_etoa+0x174>
    7d2e:	ff 23       	and	r31, r31
    7d30:	b1 f0       	breq	.+44     	; 0x7d5e <p_etoa+0xc4>
    7d32:	83 01       	movw	r16, r6
    7d34:	c1 2c       	mov	r12, r1
    7d36:	d1 2c       	mov	r13, r1
    7d38:	e1 2c       	mov	r14, r1
    7d3a:	2f e3       	ldi	r18, 0x3F	; 63
    7d3c:	f2 2e       	mov	r15, r18
    7d3e:	01 15       	cp	r16, r1
    7d40:	11 05       	cpc	r17, r1
    7d42:	91 f0       	breq	.+36     	; 0x7d68 <p_etoa+0xce>
    7d44:	20 e0       	ldi	r18, 0x00	; 0
    7d46:	30 e0       	ldi	r19, 0x00	; 0
    7d48:	40 e2       	ldi	r20, 0x20	; 32
    7d4a:	51 e4       	ldi	r21, 0x41	; 65
    7d4c:	c7 01       	movw	r24, r14
    7d4e:	b6 01       	movw	r22, r12
    7d50:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    7d54:	6b 01       	movw	r12, r22
    7d56:	7c 01       	movw	r14, r24
    7d58:	01 50       	subi	r16, 0x01	; 1
    7d5a:	11 09       	sbc	r17, r1
    7d5c:	f0 cf       	rjmp	.-32     	; 0x7d3e <p_etoa+0xa4>
    7d5e:	c1 2c       	mov	r12, r1
    7d60:	d1 2c       	mov	r13, r1
    7d62:	e1 2c       	mov	r14, r1
    7d64:	9f e3       	ldi	r25, 0x3F	; 63
    7d66:	f9 2e       	mov	r15, r25
    7d68:	41 2c       	mov	r4, r1
    7d6a:	51 2c       	mov	r5, r1
    7d6c:	82 01       	movw	r16, r4
    7d6e:	01 50       	subi	r16, 0x01	; 1
    7d70:	11 09       	sbc	r17, r1
    7d72:	20 e0       	ldi	r18, 0x00	; 0
    7d74:	30 e0       	ldi	r19, 0x00	; 0
    7d76:	40 e8       	ldi	r20, 0x80	; 128
    7d78:	5f e3       	ldi	r21, 0x3F	; 63
    7d7a:	c5 01       	movw	r24, r10
    7d7c:	b4 01       	movw	r22, r8
    7d7e:	0e 94 59 e4 	call	0x1c8b2	; 0x1c8b2 <__cmpsf2>
    7d82:	87 ff       	sbrs	r24, 7
    7d84:	0c c0       	rjmp	.+24     	; 0x7d9e <p_etoa+0x104>
    7d86:	20 e0       	ldi	r18, 0x00	; 0
    7d88:	30 e0       	ldi	r19, 0x00	; 0
    7d8a:	40 e2       	ldi	r20, 0x20	; 32
    7d8c:	51 e4       	ldi	r21, 0x41	; 65
    7d8e:	c5 01       	movw	r24, r10
    7d90:	b4 01       	movw	r22, r8
    7d92:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    7d96:	4b 01       	movw	r8, r22
    7d98:	5c 01       	movw	r10, r24
    7d9a:	28 01       	movw	r4, r16
    7d9c:	e7 cf       	rjmp	.-50     	; 0x7d6c <p_etoa+0xd2>
    7d9e:	82 01       	movw	r16, r4
    7da0:	0f 5f       	subi	r16, 0xFF	; 255
    7da2:	1f 4f       	sbci	r17, 0xFF	; 255
    7da4:	20 e0       	ldi	r18, 0x00	; 0
    7da6:	30 e0       	ldi	r19, 0x00	; 0
    7da8:	40 e2       	ldi	r20, 0x20	; 32
    7daa:	51 e4       	ldi	r21, 0x41	; 65
    7dac:	c5 01       	movw	r24, r10
    7dae:	b4 01       	movw	r22, r8
    7db0:	0e 94 a8 e5 	call	0x1cb50	; 0x1cb50 <__gesf2>
    7db4:	87 fd       	sbrc	r24, 7
    7db6:	0c c0       	rjmp	.+24     	; 0x7dd0 <p_etoa+0x136>
    7db8:	20 e0       	ldi	r18, 0x00	; 0
    7dba:	30 e0       	ldi	r19, 0x00	; 0
    7dbc:	40 e2       	ldi	r20, 0x20	; 32
    7dbe:	51 e4       	ldi	r21, 0x41	; 65
    7dc0:	c5 01       	movw	r24, r10
    7dc2:	b4 01       	movw	r22, r8
    7dc4:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    7dc8:	4b 01       	movw	r8, r22
    7dca:	5c 01       	movw	r10, r24
    7dcc:	28 01       	movw	r4, r16
    7dce:	e7 cf       	rjmp	.-50     	; 0x7d9e <p_etoa+0x104>
    7dd0:	a7 01       	movw	r20, r14
    7dd2:	96 01       	movw	r18, r12
    7dd4:	c5 01       	movw	r24, r10
    7dd6:	b4 01       	movw	r22, r8
    7dd8:	0e 94 f5 e3 	call	0x1c7ea	; 0x1c7ea <__addsf3>
    7ddc:	4b 01       	movw	r8, r22
    7dde:	5c 01       	movw	r10, r24
    7de0:	82 01       	movw	r16, r4
    7de2:	2f ef       	ldi	r18, 0xFF	; 255
    7de4:	42 1a       	sub	r4, r18
    7de6:	52 0a       	sbc	r5, r18
    7de8:	20 e0       	ldi	r18, 0x00	; 0
    7dea:	30 e0       	ldi	r19, 0x00	; 0
    7dec:	40 e2       	ldi	r20, 0x20	; 32
    7dee:	51 e4       	ldi	r21, 0x41	; 65
    7df0:	0e 94 a8 e5 	call	0x1cb50	; 0x1cb50 <__gesf2>
    7df4:	87 fd       	sbrc	r24, 7
    7df6:	09 c0       	rjmp	.+18     	; 0x7e0a <p_etoa+0x170>
    7df8:	20 e0       	ldi	r18, 0x00	; 0
    7dfa:	30 e0       	ldi	r19, 0x00	; 0
    7dfc:	40 e2       	ldi	r20, 0x20	; 32
    7dfe:	51 e4       	ldi	r21, 0x41	; 65
    7e00:	c5 01       	movw	r24, r10
    7e02:	b4 01       	movw	r22, r8
    7e04:	0e 94 5d e4 	call	0x1c8ba	; 0x1c8ba <__divsf3>
    7e08:	e9 cf       	rjmp	.-46     	; 0x7ddc <p_etoa+0x142>
    7e0a:	0e 87       	std	Y+14, r16	; 0x0e
    7e0c:	1f 87       	std	Y+15, r17	; 0x0f
    7e0e:	85 e6       	ldi	r24, 0x65	; 101
    7e10:	89 83       	std	Y+1, r24	; 0x01
    7e12:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e14:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e16:	97 ff       	sbrs	r25, 7
    7e18:	08 c0       	rjmp	.+16     	; 0x7e2a <p_etoa+0x190>
    7e1a:	91 95       	neg	r25
    7e1c:	81 95       	neg	r24
    7e1e:	91 09       	sbc	r25, r1
    7e20:	9f 87       	std	Y+15, r25	; 0x0f
    7e22:	8e 87       	std	Y+14, r24	; 0x0e
    7e24:	8d e2       	ldi	r24, 0x2D	; 45
    7e26:	90 e0       	ldi	r25, 0x00	; 0
    7e28:	02 c0       	rjmp	.+4      	; 0x7e2e <p_etoa+0x194>
    7e2a:	8b e2       	ldi	r24, 0x2B	; 43
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	6c 01       	movw	r12, r24
    7e30:	82 e0       	ldi	r24, 0x02	; 2
    7e32:	e8 2e       	mov	r14, r24
    7e34:	f1 2c       	mov	r15, r1
    7e36:	8e 01       	movw	r16, r28
    7e38:	02 5f       	subi	r16, 0xF2	; 242
    7e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e3c:	2a e0       	ldi	r18, 0x0A	; 10
    7e3e:	30 e0       	ldi	r19, 0x00	; 0
    7e40:	42 e0       	ldi	r20, 0x02	; 2
    7e42:	50 e0       	ldi	r21, 0x00	; 0
    7e44:	65 e0       	ldi	r22, 0x05	; 5
    7e46:	70 e0       	ldi	r23, 0x00	; 0
    7e48:	ce 01       	movw	r24, r28
    7e4a:	02 96       	adiw	r24, 0x02	; 2
    7e4c:	26 dd       	rcall	.-1460   	; 0x789a <bin2num>
    7e4e:	9c 01       	movw	r18, r24
    7e50:	93 2d       	mov	r25, r3
    7e52:	98 72       	andi	r25, 0x28	; 40
    7e54:	90 32       	cpi	r25, 0x20	; 32
    7e56:	71 f0       	breq	.+28     	; 0x7e74 <p_etoa+0x1da>
    7e58:	c5 01       	movw	r24, r10
    7e5a:	b4 01       	movw	r22, r8
    7e5c:	0e 94 c5 e4 	call	0x1c98a	; 0x1c98a <__fixsfsi>
    7e60:	6b 01       	movw	r12, r22
    7e62:	7c 01       	movw	r14, r24
    7e64:	60 e3       	ldi	r22, 0x30	; 48
    7e66:	6c 0d       	add	r22, r12
    7e68:	ce 01       	movw	r24, r28
    7e6a:	08 96       	adiw	r24, 0x08	; 8
    7e6c:	9f dd       	rcall	.-1218   	; 0x79ac <pch>
    7e6e:	21 10       	cpse	r2, r1
    7e70:	20 c0       	rjmp	.+64     	; 0x7eb2 <p_etoa+0x218>
    7e72:	63 c0       	rjmp	.+198    	; 0x7f3a <p_etoa+0x2a0>
    7e74:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e76:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e78:	0a 89       	ldd	r16, Y+18	; 0x12
    7e7a:	1b 89       	ldd	r17, Y+19	; 0x13
    7e7c:	08 1b       	sub	r16, r24
    7e7e:	19 0b       	sbc	r17, r25
    7e80:	22 20       	and	r2, r2
    7e82:	41 f0       	breq	.+16     	; 0x7e94 <p_etoa+0x1fa>
    7e84:	61 14       	cp	r6, r1
    7e86:	71 04       	cpc	r7, r1
    7e88:	29 f0       	breq	.+10     	; 0x7e94 <p_etoa+0x1fa>
    7e8a:	06 19       	sub	r16, r6
    7e8c:	17 09       	sbc	r17, r7
    7e8e:	06 50       	subi	r16, 0x06	; 6
    7e90:	11 09       	sbc	r17, r1
    7e92:	02 c0       	rjmp	.+4      	; 0x7e98 <p_etoa+0x1fe>
    7e94:	05 50       	subi	r16, 0x05	; 5
    7e96:	11 09       	sbc	r17, r1
    7e98:	24 30       	cpi	r18, 0x04	; 4
    7e9a:	31 05       	cpc	r19, r1
    7e9c:	14 f0       	brlt	.+4      	; 0x7ea2 <p_etoa+0x208>
    7e9e:	01 50       	subi	r16, 0x01	; 1
    7ea0:	11 09       	sbc	r17, r1
    7ea2:	10 16       	cp	r1, r16
    7ea4:	11 06       	cpc	r1, r17
    7ea6:	c4 f6       	brge	.-80     	; 0x7e58 <p_etoa+0x1be>
    7ea8:	60 e3       	ldi	r22, 0x30	; 48
    7eaa:	ce 01       	movw	r24, r28
    7eac:	08 96       	adiw	r24, 0x08	; 8
    7eae:	7e dd       	rcall	.-1284   	; 0x79ac <pch>
    7eb0:	f6 cf       	rjmp	.-20     	; 0x7e9e <p_etoa+0x204>
    7eb2:	61 14       	cp	r6, r1
    7eb4:	71 04       	cpc	r7, r1
    7eb6:	09 f4       	brne	.+2      	; 0x7eba <p_etoa+0x220>
    7eb8:	40 c0       	rjmp	.+128    	; 0x7f3a <p_etoa+0x2a0>
    7eba:	b6 01       	movw	r22, r12
    7ebc:	dd 0c       	add	r13, r13
    7ebe:	88 0b       	sbc	r24, r24
    7ec0:	99 0b       	sbc	r25, r25
    7ec2:	0e 94 f8 e4 	call	0x1c9f0	; 0x1c9f0 <__floatsisf>
    7ec6:	9b 01       	movw	r18, r22
    7ec8:	ac 01       	movw	r20, r24
    7eca:	c5 01       	movw	r24, r10
    7ecc:	b4 01       	movw	r22, r8
    7ece:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    7ed2:	20 e0       	ldi	r18, 0x00	; 0
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
    7ed6:	40 e2       	ldi	r20, 0x20	; 32
    7ed8:	51 e4       	ldi	r21, 0x41	; 65
    7eda:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    7ede:	4b 01       	movw	r8, r22
    7ee0:	5c 01       	movw	r10, r24
    7ee2:	6e e2       	ldi	r22, 0x2E	; 46
    7ee4:	ce 01       	movw	r24, r28
    7ee6:	08 96       	adiw	r24, 0x08	; 8
    7ee8:	61 dd       	rcall	.-1342   	; 0x79ac <pch>
    7eea:	c5 01       	movw	r24, r10
    7eec:	b4 01       	movw	r22, r8
    7eee:	0e 94 c5 e4 	call	0x1c98a	; 0x1c98a <__fixsfsi>
    7ef2:	6b 01       	movw	r12, r22
    7ef4:	7c 01       	movw	r14, r24
    7ef6:	07 2e       	mov	r0, r23
    7ef8:	00 0c       	add	r0, r0
    7efa:	88 0b       	sbc	r24, r24
    7efc:	99 0b       	sbc	r25, r25
    7efe:	0e 94 f8 e4 	call	0x1c9f0	; 0x1c9f0 <__floatsisf>
    7f02:	9b 01       	movw	r18, r22
    7f04:	ac 01       	movw	r20, r24
    7f06:	c5 01       	movw	r24, r10
    7f08:	b4 01       	movw	r22, r8
    7f0a:	0e 94 f4 e3 	call	0x1c7e8	; 0x1c7e8 <__subsf3>
    7f0e:	4b 01       	movw	r8, r22
    7f10:	5c 01       	movw	r10, r24
    7f12:	b6 01       	movw	r22, r12
    7f14:	60 5d       	subi	r22, 0xD0	; 208
    7f16:	7f 4f       	sbci	r23, 0xFF	; 255
    7f18:	ce 01       	movw	r24, r28
    7f1a:	08 96       	adiw	r24, 0x08	; 8
    7f1c:	47 dd       	rcall	.-1394   	; 0x79ac <pch>
    7f1e:	20 e0       	ldi	r18, 0x00	; 0
    7f20:	30 e0       	ldi	r19, 0x00	; 0
    7f22:	40 e2       	ldi	r20, 0x20	; 32
    7f24:	51 e4       	ldi	r21, 0x41	; 65
    7f26:	c5 01       	movw	r24, r10
    7f28:	b4 01       	movw	r22, r8
    7f2a:	0e 94 ac e5 	call	0x1cb58	; 0x1cb58 <__mulsf3>
    7f2e:	4b 01       	movw	r8, r22
    7f30:	5c 01       	movw	r10, r24
    7f32:	31 e0       	ldi	r19, 0x01	; 1
    7f34:	63 1a       	sub	r6, r19
    7f36:	71 08       	sbc	r7, r1
    7f38:	c1 f6       	brne	.-80     	; 0x7eea <p_etoa+0x250>
    7f3a:	8e 01       	movw	r16, r28
    7f3c:	0f 5f       	subi	r16, 0xFF	; 255
    7f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f40:	f8 01       	movw	r30, r16
    7f42:	61 91       	ld	r22, Z+
    7f44:	8f 01       	movw	r16, r30
    7f46:	ce 01       	movw	r24, r28
    7f48:	08 96       	adiw	r24, 0x08	; 8
    7f4a:	66 23       	and	r22, r22
    7f4c:	11 f0       	breq	.+4      	; 0x7f52 <p_etoa+0x2b8>
    7f4e:	2e dd       	rcall	.-1444   	; 0x79ac <pch>
    7f50:	f7 cf       	rjmp	.-18     	; 0x7f40 <p_etoa+0x2a6>
    7f52:	2c dd       	rcall	.-1448   	; 0x79ac <pch>
    7f54:	e8 89       	ldd	r30, Y+16	; 0x10
    7f56:	f9 89       	ldd	r31, Y+17	; 0x11
    7f58:	01 90       	ld	r0, Z+
    7f5a:	00 20       	and	r0, r0
    7f5c:	e9 f7       	brne	.-6      	; 0x7f58 <p_etoa+0x2be>
    7f5e:	cf 01       	movw	r24, r30
    7f60:	01 97       	sbiw	r24, 0x01	; 1
    7f62:	28 89       	ldd	r18, Y+16	; 0x10
    7f64:	39 89       	ldd	r19, Y+17	; 0x11
    7f66:	82 1b       	sub	r24, r18
    7f68:	93 0b       	sbc	r25, r19
    7f6a:	63 96       	adiw	r28, 0x13	; 19
    7f6c:	e2 e1       	ldi	r30, 0x12	; 18
    7f6e:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00007f72 <_puts_pad>:
    7f72:	a0 e0       	ldi	r26, 0x00	; 0
    7f74:	b0 e0       	ldi	r27, 0x00	; 0
    7f76:	ef eb       	ldi	r30, 0xBF	; 191
    7f78:	ff e3       	ldi	r31, 0x3F	; 63
    7f7a:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
    7f7e:	6c 01       	movw	r12, r24
    7f80:	4b 01       	movw	r8, r22
    7f82:	79 01       	movw	r14, r18
    7f84:	24 17       	cp	r18, r20
    7f86:	35 07       	cpc	r19, r21
    7f88:	24 f4       	brge	.+8      	; 0x7f92 <_puts_pad+0x20>
    7f8a:	ea 01       	movw	r28, r20
    7f8c:	c2 1b       	sub	r28, r18
    7f8e:	d3 0b       	sbc	r29, r19
    7f90:	02 c0       	rjmp	.+4      	; 0x7f96 <_puts_pad+0x24>
    7f92:	c0 e0       	ldi	r28, 0x00	; 0
    7f94:	d0 e0       	ldi	r29, 0x00	; 0
    7f96:	01 15       	cp	r16, r1
    7f98:	11 05       	cpc	r17, r1
    7f9a:	49 f4       	brne	.+18     	; 0x7fae <_puts_pad+0x3c>
    7f9c:	21 97       	sbiw	r28, 0x01	; 1
    7f9e:	38 f0       	brcs	.+14     	; 0x7fae <_puts_pad+0x3c>
    7fa0:	d6 01       	movw	r26, r12
    7fa2:	ed 91       	ld	r30, X+
    7fa4:	fc 91       	ld	r31, X
    7fa6:	60 e2       	ldi	r22, 0x20	; 32
    7fa8:	c6 01       	movw	r24, r12
    7faa:	09 95       	icall
    7fac:	f7 cf       	rjmp	.-18     	; 0x7f9c <_puts_pad+0x2a>
    7fae:	54 01       	movw	r10, r8
    7fb0:	f5 01       	movw	r30, r10
    7fb2:	61 91       	ld	r22, Z+
    7fb4:	5f 01       	movw	r10, r30
    7fb6:	66 23       	and	r22, r22
    7fb8:	61 f0       	breq	.+24     	; 0x7fd2 <_puts_pad+0x60>
    7fba:	e1 14       	cp	r14, r1
    7fbc:	f1 04       	cpc	r15, r1
    7fbe:	49 f0       	breq	.+18     	; 0x7fd2 <_puts_pad+0x60>
    7fc0:	d6 01       	movw	r26, r12
    7fc2:	ed 91       	ld	r30, X+
    7fc4:	fc 91       	ld	r31, X
    7fc6:	c6 01       	movw	r24, r12
    7fc8:	09 95       	icall
    7fca:	b1 e0       	ldi	r27, 0x01	; 1
    7fcc:	eb 1a       	sub	r14, r27
    7fce:	f1 08       	sbc	r15, r1
    7fd0:	ef cf       	rjmp	.-34     	; 0x7fb0 <_puts_pad+0x3e>
    7fd2:	01 15       	cp	r16, r1
    7fd4:	11 05       	cpc	r17, r1
    7fd6:	51 f0       	breq	.+20     	; 0x7fec <_puts_pad+0x7a>
    7fd8:	20 97       	sbiw	r28, 0x00	; 0
    7fda:	41 f0       	breq	.+16     	; 0x7fec <_puts_pad+0x7a>
    7fdc:	d6 01       	movw	r26, r12
    7fde:	ed 91       	ld	r30, X+
    7fe0:	fc 91       	ld	r31, X
    7fe2:	60 e2       	ldi	r22, 0x20	; 32
    7fe4:	c6 01       	movw	r24, r12
    7fe6:	09 95       	icall
    7fe8:	21 97       	sbiw	r28, 0x01	; 1
    7fea:	f6 cf       	rjmp	.-20     	; 0x7fd8 <_puts_pad+0x66>
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
    7ff0:	ec e0       	ldi	r30, 0x0C	; 12
    7ff2:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

00007ff6 <_puts_pad_X>:
    7ff6:	2f 92       	push	r2
    7ff8:	3f 92       	push	r3
    7ffa:	4f 92       	push	r4
    7ffc:	6f 92       	push	r6
    7ffe:	7f 92       	push	r7
    8000:	8f 92       	push	r8
    8002:	cf 92       	push	r12
    8004:	df 92       	push	r13
    8006:	ef 92       	push	r14
    8008:	ff 92       	push	r15
    800a:	0f 93       	push	r16
    800c:	1f 93       	push	r17
    800e:	cf 93       	push	r28
    8010:	df 93       	push	r29
    8012:	6c 01       	movw	r12, r24
    8014:	3a 01       	movw	r6, r20
    8016:	86 2e       	mov	r8, r22
    8018:	02 17       	cp	r16, r18
    801a:	13 07       	cpc	r17, r19
    801c:	24 f4       	brge	.+8      	; 0x8026 <_puts_pad_X+0x30>
    801e:	e9 01       	movw	r28, r18
    8020:	c0 1b       	sub	r28, r16
    8022:	d1 0b       	sbc	r29, r17
    8024:	02 c0       	rjmp	.+4      	; 0x802a <_puts_pad_X+0x34>
    8026:	c0 e0       	ldi	r28, 0x00	; 0
    8028:	d0 e0       	ldi	r29, 0x00	; 0
    802a:	e1 14       	cp	r14, r1
    802c:	f1 04       	cpc	r15, r1
    802e:	49 f4       	brne	.+18     	; 0x8042 <_puts_pad_X+0x4c>
    8030:	21 97       	sbiw	r28, 0x01	; 1
    8032:	38 f0       	brcs	.+14     	; 0x8042 <_puts_pad_X+0x4c>
    8034:	d6 01       	movw	r26, r12
    8036:	ed 91       	ld	r30, X+
    8038:	fc 91       	ld	r31, X
    803a:	60 e2       	ldi	r22, 0x20	; 32
    803c:	c6 01       	movw	r24, r12
    803e:	09 95       	icall
    8040:	f7 cf       	rjmp	.-18     	; 0x8030 <_puts_pad_X+0x3a>
    8042:	13 01       	movw	r2, r6
    8044:	48 2c       	mov	r4, r8
    8046:	20 0e       	add	r2, r16
    8048:	31 1e       	adc	r3, r17
    804a:	41 1c       	adc	r4, r1
    804c:	17 fd       	sbrc	r17, 7
    804e:	4a 94       	dec	r4
    8050:	f3 01       	movw	r30, r6
    8052:	58 2d       	mov	r21, r8
    8054:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8058:	66 23       	and	r22, r22
    805a:	71 f0       	breq	.+28     	; 0x8078 <_puts_pad_X+0x82>
    805c:	62 14       	cp	r6, r2
    805e:	73 04       	cpc	r7, r3
    8060:	84 04       	cpc	r8, r4
    8062:	51 f0       	breq	.+20     	; 0x8078 <_puts_pad_X+0x82>
    8064:	d6 01       	movw	r26, r12
    8066:	ed 91       	ld	r30, X+
    8068:	fc 91       	ld	r31, X
    806a:	c6 01       	movw	r24, r12
    806c:	09 95       	icall
    806e:	bf ef       	ldi	r27, 0xFF	; 255
    8070:	6b 1a       	sub	r6, r27
    8072:	7b 0a       	sbc	r7, r27
    8074:	8b 0a       	sbc	r8, r27
    8076:	ec cf       	rjmp	.-40     	; 0x8050 <_puts_pad_X+0x5a>
    8078:	ef 28       	or	r14, r15
    807a:	51 f0       	breq	.+20     	; 0x8090 <_puts_pad_X+0x9a>
    807c:	20 97       	sbiw	r28, 0x00	; 0
    807e:	41 f0       	breq	.+16     	; 0x8090 <_puts_pad_X+0x9a>
    8080:	d6 01       	movw	r26, r12
    8082:	ed 91       	ld	r30, X+
    8084:	fc 91       	ld	r31, X
    8086:	60 e2       	ldi	r22, 0x20	; 32
    8088:	c6 01       	movw	r24, r12
    808a:	09 95       	icall
    808c:	21 97       	sbiw	r28, 0x01	; 1
    808e:	f6 cf       	rjmp	.-20     	; 0x807c <_puts_pad_X+0x86>
    8090:	df 91       	pop	r29
    8092:	cf 91       	pop	r28
    8094:	1f 91       	pop	r17
    8096:	0f 91       	pop	r16
    8098:	ff 90       	pop	r15
    809a:	ef 90       	pop	r14
    809c:	df 90       	pop	r13
    809e:	cf 90       	pop	r12
    80a0:	8f 90       	pop	r8
    80a2:	7f 90       	pop	r7
    80a4:	6f 90       	pop	r6
    80a6:	4f 90       	pop	r4
    80a8:	3f 90       	pop	r3
    80aa:	2f 90       	pop	r2
    80ac:	08 95       	ret

000080ae <strlen_X>:
    80ae:	cf 92       	push	r12
    80b0:	df 92       	push	r13
    80b2:	ef 92       	push	r14
    80b4:	9b 01       	movw	r18, r22
    80b6:	48 2f       	mov	r20, r24
    80b8:	80 e0       	ldi	r24, 0x00	; 0
    80ba:	90 e0       	ldi	r25, 0x00	; 0
    80bc:	2f 5f       	subi	r18, 0xFF	; 255
    80be:	3f 4f       	sbci	r19, 0xFF	; 255
    80c0:	4f 4f       	sbci	r20, 0xFF	; 255
    80c2:	69 01       	movw	r12, r18
    80c4:	e4 2e       	mov	r14, r20
    80c6:	51 e0       	ldi	r21, 0x01	; 1
    80c8:	c5 1a       	sub	r12, r21
    80ca:	d1 08       	sbc	r13, r1
    80cc:	e1 08       	sbc	r14, r1
    80ce:	f6 01       	movw	r30, r12
    80d0:	5e 2d       	mov	r21, r14
    80d2:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    80d6:	66 23       	and	r22, r22
    80d8:	11 f0       	breq	.+4      	; 0x80de <strlen_X+0x30>
    80da:	01 96       	adiw	r24, 0x01	; 1
    80dc:	ef cf       	rjmp	.-34     	; 0x80bc <strlen_X+0xe>
    80de:	ef 90       	pop	r14
    80e0:	df 90       	pop	r13
    80e2:	cf 90       	pop	r12
    80e4:	08 95       	ret

000080e6 <_printf_fn>:
    80e6:	ae e6       	ldi	r26, 0x6E	; 110
    80e8:	b0 e0       	ldi	r27, 0x00	; 0
    80ea:	e9 e7       	ldi	r30, 0x79	; 121
    80ec:	f0 e4       	ldi	r31, 0x40	; 64
    80ee:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    80f2:	a5 96       	adiw	r28, 0x25	; 37
    80f4:	9f af       	std	Y+63, r25	; 0x3f
    80f6:	8e af       	std	Y+62, r24	; 0x3e
    80f8:	a5 97       	sbiw	r28, 0x25	; 37
    80fa:	6a 01       	movw	r12, r20
    80fc:	e6 2e       	mov	r14, r22
    80fe:	19 01       	movw	r2, r18
    8100:	a9 96       	adiw	r28, 0x29	; 41
    8102:	1c ae       	std	Y+60, r1	; 0x3c
    8104:	1d ae       	std	Y+61, r1	; 0x3d
    8106:	1e ae       	std	Y+62, r1	; 0x3e
    8108:	1f ae       	std	Y+63, r1	; 0x3f
    810a:	a9 97       	sbiw	r28, 0x29	; 41
    810c:	8a e1       	ldi	r24, 0x1A	; 26
    810e:	94 e0       	ldi	r25, 0x04	; 4
    8110:	9c 01       	movw	r18, r24
    8112:	40 e8       	ldi	r20, 0x80	; 128
    8114:	ae 96       	adiw	r28, 0x2e	; 46
    8116:	2d af       	std	Y+61, r18	; 0x3d
    8118:	3e af       	std	Y+62, r19	; 0x3e
    811a:	4f af       	std	Y+63, r20	; 0x3f
    811c:	ae 97       	sbiw	r28, 0x2e	; 46
    811e:	ae 01       	movw	r20, r28
    8120:	4f 5a       	subi	r20, 0xAF	; 175
    8122:	5f 4f       	sbci	r21, 0xFF	; 255
    8124:	67 96       	adiw	r28, 0x17	; 23
    8126:	5f af       	std	Y+63, r21	; 0x3f
    8128:	4e af       	std	Y+62, r20	; 0x3e
    812a:	67 97       	sbiw	r28, 0x17	; 23
    812c:	ce 01       	movw	r24, r28
    812e:	8d 5b       	subi	r24, 0xBD	; 189
    8130:	9f 4f       	sbci	r25, 0xFF	; 255
    8132:	69 96       	adiw	r28, 0x19	; 25
    8134:	9f af       	std	Y+63, r25	; 0x3f
    8136:	8e af       	std	Y+62, r24	; 0x3e
    8138:	69 97       	sbiw	r28, 0x19	; 25
    813a:	de 01       	movw	r26, r28
    813c:	a5 5b       	subi	r26, 0xB5	; 181
    813e:	bf 4f       	sbci	r27, 0xFF	; 255
    8140:	6b 96       	adiw	r28, 0x1b	; 27
    8142:	bf af       	std	Y+63, r27	; 0x3f
    8144:	ae af       	std	Y+62, r26	; 0x3e
    8146:	6b 97       	sbiw	r28, 0x1b	; 27
    8148:	fe 01       	movw	r30, r28
    814a:	ed 5a       	subi	r30, 0xAD	; 173
    814c:	ff 4f       	sbci	r31, 0xFF	; 255
    814e:	6d 96       	adiw	r28, 0x1d	; 29
    8150:	ff af       	std	Y+63, r31	; 0x3f
    8152:	ee af       	std	Y+62, r30	; 0x3e
    8154:	6d 97       	sbiw	r28, 0x1d	; 29
    8156:	f6 01       	movw	r30, r12
    8158:	5e 2d       	mov	r21, r14
    815a:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    815e:	66 23       	and	r22, r22
    8160:	09 f4       	brne	.+2      	; 0x8164 <_printf_fn+0x7e>
    8162:	13 c4       	rjmp	.+2086   	; 0x898a <_printf_fn+0x8a4>
    8164:	ae 2d       	mov	r26, r14
    8166:	c6 01       	movw	r24, r12
    8168:	01 96       	adiw	r24, 0x01	; 1
    816a:	a1 1d       	adc	r26, r1
    816c:	3c 01       	movw	r6, r24
    816e:	8a 2e       	mov	r8, r26
    8170:	65 32       	cpi	r22, 0x25	; 37
    8172:	51 f0       	breq	.+20     	; 0x8188 <_printf_fn+0xa2>
    8174:	a5 96       	adiw	r28, 0x25	; 37
    8176:	ae ad       	ldd	r26, Y+62	; 0x3e
    8178:	bf ad       	ldd	r27, Y+63	; 0x3f
    817a:	a5 97       	sbiw	r28, 0x25	; 37
    817c:	ed 91       	ld	r30, X+
    817e:	fc 91       	ld	r31, X
    8180:	11 97       	sbiw	r26, 0x01	; 1
    8182:	cd 01       	movw	r24, r26
    8184:	09 95       	icall
    8186:	d5 c3       	rjmp	.+1962   	; 0x8932 <_printf_fn+0x84c>
    8188:	91 2c       	mov	r9, r1
    818a:	f3 01       	movw	r30, r6
    818c:	58 2d       	mov	r21, r8
    818e:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8192:	63 32       	cpi	r22, 0x23	; 35
    8194:	19 f4       	brne	.+6      	; 0x819c <_printf_fn+0xb6>
    8196:	68 94       	set
    8198:	97 f8       	bld	r9, 7
    819a:	04 c0       	rjmp	.+8      	; 0x81a4 <_printf_fn+0xbe>
    819c:	6b 32       	cpi	r22, 0x2B	; 43
    819e:	39 f4       	brne	.+14     	; 0x81ae <_printf_fn+0xc8>
    81a0:	68 94       	set
    81a2:	92 f8       	bld	r9, 2
    81a4:	bf ef       	ldi	r27, 0xFF	; 255
    81a6:	6b 1a       	sub	r6, r27
    81a8:	7b 0a       	sbc	r7, r27
    81aa:	8b 0a       	sbc	r8, r27
    81ac:	ee cf       	rjmp	.-36     	; 0x818a <_printf_fn+0xa4>
    81ae:	6d 32       	cpi	r22, 0x2D	; 45
    81b0:	a9 f4       	brne	.+42     	; 0x81dc <_printf_fn+0xf6>
    81b2:	93 fc       	sbrc	r9, 3
    81b4:	05 c0       	rjmp	.+10     	; 0x81c0 <_printf_fn+0xda>
    81b6:	6d 32       	cpi	r22, 0x2D	; 45
    81b8:	19 f4       	brne	.+6      	; 0x81c0 <_printf_fn+0xda>
    81ba:	68 94       	set
    81bc:	93 f8       	bld	r9, 3
    81be:	f2 cf       	rjmp	.-28     	; 0x81a4 <_printf_fn+0xbe>
    81c0:	94 fc       	sbrc	r9, 4
    81c2:	05 c0       	rjmp	.+10     	; 0x81ce <_printf_fn+0xe8>
    81c4:	60 32       	cpi	r22, 0x20	; 32
    81c6:	19 f4       	brne	.+6      	; 0x81ce <_printf_fn+0xe8>
    81c8:	68 94       	set
    81ca:	94 f8       	bld	r9, 4
    81cc:	eb cf       	rjmp	.-42     	; 0x81a4 <_printf_fn+0xbe>
    81ce:	95 fc       	sbrc	r9, 5
    81d0:	e9 cf       	rjmp	.-46     	; 0x81a4 <_printf_fn+0xbe>
    81d2:	60 33       	cpi	r22, 0x30	; 48
    81d4:	39 f7       	brne	.-50     	; 0x81a4 <_printf_fn+0xbe>
    81d6:	68 94       	set
    81d8:	95 f8       	bld	r9, 5
    81da:	e4 cf       	rjmp	.-56     	; 0x81a4 <_printf_fn+0xbe>
    81dc:	86 2f       	mov	r24, r22
    81de:	8f 7e       	andi	r24, 0xEF	; 239
    81e0:	80 32       	cpi	r24, 0x20	; 32
    81e2:	39 f3       	breq	.-50     	; 0x81b2 <_printf_fn+0xcc>
    81e4:	70 e0       	ldi	r23, 0x00	; 0
    81e6:	60 53       	subi	r22, 0x30	; 48
    81e8:	71 09       	sbc	r23, r1
    81ea:	6f 96       	adiw	r28, 0x1f	; 31
    81ec:	1f ae       	std	Y+63, r1	; 0x3f
    81ee:	1e ae       	std	Y+62, r1	; 0x3e
    81f0:	6f 97       	sbiw	r28, 0x1f	; 31
    81f2:	6a 30       	cpi	r22, 0x0A	; 10
    81f4:	71 05       	cpc	r23, r1
    81f6:	10 f5       	brcc	.+68     	; 0x823c <_printf_fn+0x156>
    81f8:	2a e0       	ldi	r18, 0x0A	; 10
    81fa:	f3 01       	movw	r30, r6
    81fc:	58 2d       	mov	r21, r8
    81fe:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8202:	70 e0       	ldi	r23, 0x00	; 0
    8204:	cb 01       	movw	r24, r22
    8206:	c0 97       	sbiw	r24, 0x30	; 48
    8208:	0a 97       	sbiw	r24, 0x0a	; 10
    820a:	b0 f4       	brcc	.+44     	; 0x8238 <_printf_fn+0x152>
    820c:	ef ef       	ldi	r30, 0xFF	; 255
    820e:	6e 1a       	sub	r6, r30
    8210:	7e 0a       	sbc	r7, r30
    8212:	8e 0a       	sbc	r8, r30
    8214:	6f 96       	adiw	r28, 0x1f	; 31
    8216:	4e ad       	ldd	r20, Y+62	; 0x3e
    8218:	5f ad       	ldd	r21, Y+63	; 0x3f
    821a:	6f 97       	sbiw	r28, 0x1f	; 31
    821c:	24 9f       	mul	r18, r20
    821e:	c0 01       	movw	r24, r0
    8220:	25 9f       	mul	r18, r21
    8222:	90 0d       	add	r25, r0
    8224:	11 24       	eor	r1, r1
    8226:	68 0f       	add	r22, r24
    8228:	79 1f       	adc	r23, r25
    822a:	cb 01       	movw	r24, r22
    822c:	c0 97       	sbiw	r24, 0x30	; 48
    822e:	6f 96       	adiw	r28, 0x1f	; 31
    8230:	9f af       	std	Y+63, r25	; 0x3f
    8232:	8e af       	std	Y+62, r24	; 0x3e
    8234:	6f 97       	sbiw	r28, 0x1f	; 31
    8236:	e1 cf       	rjmp	.-62     	; 0x81fa <_printf_fn+0x114>
    8238:	68 94       	set
    823a:	90 f8       	bld	r9, 0
    823c:	f3 01       	movw	r30, r6
    823e:	58 2d       	mov	r21, r8
    8240:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8244:	6e 32       	cpi	r22, 0x2E	; 46
    8246:	61 f5       	brne	.+88     	; 0x82a0 <_printf_fn+0x1ba>
    8248:	9f ef       	ldi	r25, 0xFF	; 255
    824a:	69 1a       	sub	r6, r25
    824c:	79 0a       	sbc	r7, r25
    824e:	89 0a       	sbc	r8, r25
    8250:	a1 96       	adiw	r28, 0x21	; 33
    8252:	1f ae       	std	Y+63, r1	; 0x3f
    8254:	1e ae       	std	Y+62, r1	; 0x3e
    8256:	a1 97       	sbiw	r28, 0x21	; 33
    8258:	2a e0       	ldi	r18, 0x0A	; 10
    825a:	f3 01       	movw	r30, r6
    825c:	58 2d       	mov	r21, r8
    825e:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8262:	70 e0       	ldi	r23, 0x00	; 0
    8264:	cb 01       	movw	r24, r22
    8266:	c0 97       	sbiw	r24, 0x30	; 48
    8268:	0a 97       	sbiw	r24, 0x0a	; 10
    826a:	b8 f4       	brcc	.+46     	; 0x829a <_printf_fn+0x1b4>
    826c:	af ef       	ldi	r26, 0xFF	; 255
    826e:	6a 1a       	sub	r6, r26
    8270:	7a 0a       	sbc	r7, r26
    8272:	8a 0a       	sbc	r8, r26
    8274:	a1 96       	adiw	r28, 0x21	; 33
    8276:	ee ad       	ldd	r30, Y+62	; 0x3e
    8278:	ff ad       	ldd	r31, Y+63	; 0x3f
    827a:	a1 97       	sbiw	r28, 0x21	; 33
    827c:	2e 9f       	mul	r18, r30
    827e:	c0 01       	movw	r24, r0
    8280:	2f 9f       	mul	r18, r31
    8282:	90 0d       	add	r25, r0
    8284:	11 24       	eor	r1, r1
    8286:	68 0f       	add	r22, r24
    8288:	79 1f       	adc	r23, r25
    828a:	ab 01       	movw	r20, r22
    828c:	40 53       	subi	r20, 0x30	; 48
    828e:	51 09       	sbc	r21, r1
    8290:	a1 96       	adiw	r28, 0x21	; 33
    8292:	5f af       	std	Y+63, r21	; 0x3f
    8294:	4e af       	std	Y+62, r20	; 0x3e
    8296:	a1 97       	sbiw	r28, 0x21	; 33
    8298:	e0 cf       	rjmp	.-64     	; 0x825a <_printf_fn+0x174>
    829a:	68 94       	set
    829c:	91 f8       	bld	r9, 1
    829e:	04 c0       	rjmp	.+8      	; 0x82a8 <_printf_fn+0x1c2>
    82a0:	a1 96       	adiw	r28, 0x21	; 33
    82a2:	1f ae       	std	Y+63, r1	; 0x3f
    82a4:	1e ae       	std	Y+62, r1	; 0x3e
    82a6:	a1 97       	sbiw	r28, 0x21	; 33
    82a8:	f3 01       	movw	r30, r6
    82aa:	58 2d       	mov	r21, r8
    82ac:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    82b0:	69 34       	cpi	r22, 0x49	; 73
    82b2:	91 f5       	brne	.+100    	; 0x8318 <_printf_fn+0x232>
    82b4:	5f ef       	ldi	r21, 0xFF	; 255
    82b6:	65 1a       	sub	r6, r21
    82b8:	75 0a       	sbc	r7, r21
    82ba:	85 0a       	sbc	r8, r21
    82bc:	41 2c       	mov	r4, r1
    82be:	51 2c       	mov	r5, r1
    82c0:	2a e0       	ldi	r18, 0x0A	; 10
    82c2:	f3 01       	movw	r30, r6
    82c4:	58 2d       	mov	r21, r8
    82c6:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    82ca:	70 e0       	ldi	r23, 0x00	; 0
    82cc:	cb 01       	movw	r24, r22
    82ce:	c0 97       	sbiw	r24, 0x30	; 48
    82d0:	0a 97       	sbiw	r24, 0x0a	; 10
    82d2:	80 f4       	brcc	.+32     	; 0x82f4 <_printf_fn+0x20e>
    82d4:	8f ef       	ldi	r24, 0xFF	; 255
    82d6:	68 1a       	sub	r6, r24
    82d8:	78 0a       	sbc	r7, r24
    82da:	88 0a       	sbc	r8, r24
    82dc:	24 9d       	mul	r18, r4
    82de:	c0 01       	movw	r24, r0
    82e0:	25 9d       	mul	r18, r5
    82e2:	90 0d       	add	r25, r0
    82e4:	11 24       	eor	r1, r1
    82e6:	68 0f       	add	r22, r24
    82e8:	79 1f       	adc	r23, r25
    82ea:	2b 01       	movw	r4, r22
    82ec:	90 e3       	ldi	r25, 0x30	; 48
    82ee:	49 1a       	sub	r4, r25
    82f0:	51 08       	sbc	r5, r1
    82f2:	e7 cf       	rjmp	.-50     	; 0x82c2 <_printf_fn+0x1dc>
    82f4:	41 14       	cp	r4, r1
    82f6:	51 04       	cpc	r5, r1
    82f8:	09 f4       	brne	.+2      	; 0x82fc <_printf_fn+0x216>
    82fa:	40 c0       	rjmp	.+128    	; 0x837c <_printf_fn+0x296>
    82fc:	c2 01       	movw	r24, r4
    82fe:	87 70       	andi	r24, 0x07	; 7
    8300:	99 27       	eor	r25, r25
    8302:	89 2b       	or	r24, r25
    8304:	c9 f5       	brne	.+114    	; 0x8378 <_printf_fn+0x292>
    8306:	63 e0       	ldi	r22, 0x03	; 3
    8308:	55 94       	asr	r5
    830a:	47 94       	ror	r4
    830c:	6a 95       	dec	r22
    830e:	e1 f7       	brne	.-8      	; 0x8308 <_printf_fn+0x222>
    8310:	41 14       	cp	r4, r1
    8312:	51 04       	cpc	r5, r1
    8314:	99 f1       	breq	.+102    	; 0x837c <_printf_fn+0x296>
    8316:	21 c0       	rjmp	.+66     	; 0x835a <_printf_fn+0x274>
    8318:	68 36       	cpi	r22, 0x68	; 104
    831a:	29 f4       	brne	.+10     	; 0x8326 <_printf_fn+0x240>
    831c:	af ef       	ldi	r26, 0xFF	; 255
    831e:	6a 1a       	sub	r6, r26
    8320:	7a 0a       	sbc	r7, r26
    8322:	8a 0a       	sbc	r8, r26
    8324:	09 c3       	rjmp	.+1554   	; 0x8938 <_printf_fn+0x852>
    8326:	6c 36       	cpi	r22, 0x6C	; 108
    8328:	09 f0       	breq	.+2      	; 0x832c <_printf_fn+0x246>
    832a:	06 c3       	rjmp	.+1548   	; 0x8938 <_printf_fn+0x852>
    832c:	a8 2d       	mov	r26, r8
    832e:	c3 01       	movw	r24, r6
    8330:	01 96       	adiw	r24, 0x01	; 1
    8332:	a1 1d       	adc	r26, r1
    8334:	fc 01       	movw	r30, r24
    8336:	5a 2f       	mov	r21, r26
    8338:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    833c:	6c 36       	cpi	r22, 0x6C	; 108
    833e:	31 f0       	breq	.+12     	; 0x834c <_printf_fn+0x266>
    8340:	3c 01       	movw	r6, r24
    8342:	8a 2e       	mov	r8, r26
    8344:	54 e0       	ldi	r21, 0x04	; 4
    8346:	45 2e       	mov	r4, r21
    8348:	51 2c       	mov	r5, r1
    834a:	07 c0       	rjmp	.+14     	; 0x835a <_printf_fn+0x274>
    834c:	b2 e0       	ldi	r27, 0x02	; 2
    834e:	6b 0e       	add	r6, r27
    8350:	71 1c       	adc	r7, r1
    8352:	81 1c       	adc	r8, r1
    8354:	48 e0       	ldi	r20, 0x08	; 8
    8356:	44 2e       	mov	r4, r20
    8358:	51 2c       	mov	r5, r1
    835a:	f3 01       	movw	r30, r6
    835c:	58 2d       	mov	r21, r8
    835e:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    8362:	e6 2f       	mov	r30, r22
    8364:	f0 e0       	ldi	r31, 0x00	; 0
    8366:	a3 96       	adiw	r28, 0x23	; 35
    8368:	ff af       	std	Y+63, r31	; 0x3f
    836a:	ee af       	std	Y+62, r30	; 0x3e
    836c:	a3 97       	sbiw	r28, 0x23	; 35
    836e:	e4 36       	cpi	r30, 0x64	; 100
    8370:	f1 05       	cpc	r31, r1
    8372:	09 f4       	brne	.+2      	; 0x8376 <_printf_fn+0x290>
    8374:	e5 c2       	rjmp	.+1482   	; 0x8940 <_printf_fn+0x85a>
    8376:	06 c0       	rjmp	.+12     	; 0x8384 <_printf_fn+0x29e>
    8378:	41 2c       	mov	r4, r1
    837a:	51 2c       	mov	r5, r1
    837c:	a3 96       	adiw	r28, 0x23	; 35
    837e:	1f ae       	std	Y+63, r1	; 0x3f
    8380:	1e ae       	std	Y+62, r1	; 0x3e
    8382:	a3 97       	sbiw	r28, 0x23	; 35
    8384:	31 e0       	ldi	r19, 0x01	; 1
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	a3 96       	adiw	r28, 0x23	; 35
    838a:	4e ad       	ldd	r20, Y+62	; 0x3e
    838c:	5f ad       	ldd	r21, Y+63	; 0x3f
    838e:	a3 97       	sbiw	r28, 0x23	; 35
    8390:	44 34       	cpi	r20, 0x44	; 68
    8392:	51 05       	cpc	r21, r1
    8394:	09 f0       	breq	.+2      	; 0x8398 <_printf_fn+0x2b2>
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	83 2f       	mov	r24, r19
    839a:	92 2f       	mov	r25, r18
    839c:	a3 96       	adiw	r28, 0x23	; 35
    839e:	ee ad       	ldd	r30, Y+62	; 0x3e
    83a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    83a2:	a3 97       	sbiw	r28, 0x23	; 35
    83a4:	e2 54       	subi	r30, 0x42	; 66
    83a6:	f1 09       	sbc	r31, r1
    83a8:	e7 33       	cpi	r30, 0x37	; 55
    83aa:	f1 05       	cpc	r31, r1
    83ac:	08 f0       	brcs	.+2      	; 0x83b0 <_printf_fn+0x2ca>
    83ae:	57 c1       	rjmp	.+686    	; 0x865e <_printf_fn+0x578>
    83b0:	ea 5b       	subi	r30, 0xBA	; 186
    83b2:	ff 4f       	sbci	r31, 0xFF	; 255
    83b4:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
    83b8:	32 e0       	ldi	r19, 0x02	; 2
    83ba:	43 2e       	mov	r4, r19
    83bc:	51 2c       	mov	r5, r1
    83be:	29 2d       	mov	r18, r9
    83c0:	28 72       	andi	r18, 0x28	; 40
    83c2:	28 32       	cpi	r18, 0x28	; 40
    83c4:	11 f4       	brne	.+4      	; 0x83ca <_printf_fn+0x2e4>
    83c6:	e8 94       	clt
    83c8:	95 f8       	bld	r9, 5
    83ca:	29 2d       	mov	r18, r9
    83cc:	22 72       	andi	r18, 0x22	; 34
    83ce:	22 32       	cpi	r18, 0x22	; 34
    83d0:	11 f4       	brne	.+4      	; 0x83d6 <_printf_fn+0x2f0>
    83d2:	e8 94       	clt
    83d4:	95 f8       	bld	r9, 5
    83d6:	29 2d       	mov	r18, r9
    83d8:	21 72       	andi	r18, 0x21	; 33
    83da:	21 32       	cpi	r18, 0x21	; 33
    83dc:	79 f4       	brne	.+30     	; 0x83fc <_printf_fn+0x316>
    83de:	a1 96       	adiw	r28, 0x21	; 33
    83e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    83e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    83e4:	a1 97       	sbiw	r28, 0x21	; 33
    83e6:	6f 96       	adiw	r28, 0x1f	; 31
    83e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    83ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    83ec:	6f 97       	sbiw	r28, 0x1f	; 31
    83ee:	ae 17       	cp	r26, r30
    83f0:	bf 07       	cpc	r27, r31
    83f2:	24 f4       	brge	.+8      	; 0x83fc <_printf_fn+0x316>
    83f4:	a1 96       	adiw	r28, 0x21	; 33
    83f6:	ff af       	std	Y+63, r31	; 0x3f
    83f8:	ee af       	std	Y+62, r30	; 0x3e
    83fa:	a1 97       	sbiw	r28, 0x21	; 33
    83fc:	29 2d       	mov	r18, r9
    83fe:	23 72       	andi	r18, 0x23	; 35
    8400:	23 32       	cpi	r18, 0x23	; 35
    8402:	79 f4       	brne	.+30     	; 0x8422 <_printf_fn+0x33c>
    8404:	a1 96       	adiw	r28, 0x21	; 33
    8406:	2e ad       	ldd	r18, Y+62	; 0x3e
    8408:	3f ad       	ldd	r19, Y+63	; 0x3f
    840a:	a1 97       	sbiw	r28, 0x21	; 33
    840c:	6f 96       	adiw	r28, 0x1f	; 31
    840e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8410:	5f ad       	ldd	r21, Y+63	; 0x3f
    8412:	6f 97       	sbiw	r28, 0x1f	; 31
    8414:	24 17       	cp	r18, r20
    8416:	35 07       	cpc	r19, r21
    8418:	24 f4       	brge	.+8      	; 0x8422 <_printf_fn+0x33c>
    841a:	a1 96       	adiw	r28, 0x21	; 33
    841c:	5f af       	std	Y+63, r21	; 0x3f
    841e:	4e af       	std	Y+62, r20	; 0x3e
    8420:	a1 97       	sbiw	r28, 0x21	; 33
    8422:	e8 94       	clt
    8424:	94 f8       	bld	r9, 4
    8426:	e8 94       	clt
    8428:	92 f8       	bld	r9, 2
    842a:	e8 94       	clt
    842c:	96 f8       	bld	r9, 6
    842e:	52 e0       	ldi	r21, 0x02	; 2
    8430:	45 16       	cp	r4, r21
    8432:	51 04       	cpc	r5, r1
    8434:	f9 f4       	brne	.+62     	; 0x8474 <_printf_fn+0x38e>
    8436:	51 01       	movw	r10, r2
    8438:	82 e0       	ldi	r24, 0x02	; 2
    843a:	a8 0e       	add	r10, r24
    843c:	b1 1c       	adc	r11, r1
    843e:	d1 01       	movw	r26, r2
    8440:	8d 91       	ld	r24, X+
    8442:	9c 91       	ld	r25, X
    8444:	65 96       	adiw	r28, 0x15	; 21
    8446:	9f af       	std	Y+63, r25	; 0x3f
    8448:	8e af       	std	Y+62, r24	; 0x3e
    844a:	65 97       	sbiw	r28, 0x15	; 21
    844c:	a3 96       	adiw	r28, 0x23	; 35
    844e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8450:	ff ad       	ldd	r31, Y+63	; 0x3f
    8452:	a3 97       	sbiw	r28, 0x23	; 35
    8454:	e4 34       	cpi	r30, 0x44	; 68
    8456:	f1 05       	cpc	r31, r1
    8458:	09 f0       	breq	.+2      	; 0x845c <_printf_fn+0x376>
    845a:	ac c0       	rjmp	.+344    	; 0x85b4 <_printf_fn+0x4ce>
    845c:	97 ff       	sbrs	r25, 7
    845e:	a7 c0       	rjmp	.+334    	; 0x85ae <_printf_fn+0x4c8>
    8460:	68 94       	set
    8462:	96 f8       	bld	r9, 6
    8464:	91 95       	neg	r25
    8466:	81 95       	neg	r24
    8468:	91 09       	sbc	r25, r1
    846a:	65 96       	adiw	r28, 0x15	; 21
    846c:	9f af       	std	Y+63, r25	; 0x3f
    846e:	8e af       	std	Y+62, r24	; 0x3e
    8470:	65 97       	sbiw	r28, 0x15	; 21
    8472:	9d c0       	rjmp	.+314    	; 0x85ae <_printf_fn+0x4c8>
    8474:	f4 e0       	ldi	r31, 0x04	; 4
    8476:	4f 16       	cp	r4, r31
    8478:	51 04       	cpc	r5, r1
    847a:	59 f5       	brne	.+86     	; 0x84d2 <_printf_fn+0x3ec>
    847c:	51 01       	movw	r10, r2
    847e:	24 e0       	ldi	r18, 0x04	; 4
    8480:	a2 0e       	add	r10, r18
    8482:	b1 1c       	adc	r11, r1
    8484:	f1 01       	movw	r30, r2
    8486:	80 81       	ld	r24, Z
    8488:	91 81       	ldd	r25, Z+1	; 0x01
    848a:	a2 81       	ldd	r26, Z+2	; 0x02
    848c:	b3 81       	ldd	r27, Z+3	; 0x03
    848e:	2f 96       	adiw	r28, 0x0f	; 15
    8490:	8c af       	std	Y+60, r24	; 0x3c
    8492:	9d af       	std	Y+61, r25	; 0x3d
    8494:	ae af       	std	Y+62, r26	; 0x3e
    8496:	bf af       	std	Y+63, r27	; 0x3f
    8498:	2f 97       	sbiw	r28, 0x0f	; 15
    849a:	a3 96       	adiw	r28, 0x23	; 35
    849c:	2e ad       	ldd	r18, Y+62	; 0x3e
    849e:	3f ad       	ldd	r19, Y+63	; 0x3f
    84a0:	a3 97       	sbiw	r28, 0x23	; 35
    84a2:	24 34       	cpi	r18, 0x44	; 68
    84a4:	31 05       	cpc	r19, r1
    84a6:	09 f0       	breq	.+2      	; 0x84aa <_printf_fn+0x3c4>
    84a8:	8f c0       	rjmp	.+286    	; 0x85c8 <_printf_fn+0x4e2>
    84aa:	b7 ff       	sbrs	r27, 7
    84ac:	8a c0       	rjmp	.+276    	; 0x85c2 <_printf_fn+0x4dc>
    84ae:	68 94       	set
    84b0:	96 f8       	bld	r9, 6
    84b2:	b0 95       	com	r27
    84b4:	a0 95       	com	r26
    84b6:	90 95       	com	r25
    84b8:	81 95       	neg	r24
    84ba:	9f 4f       	sbci	r25, 0xFF	; 255
    84bc:	af 4f       	sbci	r26, 0xFF	; 255
    84be:	bf 4f       	sbci	r27, 0xFF	; 255
    84c0:	2f 96       	adiw	r28, 0x0f	; 15
    84c2:	8c af       	std	Y+60, r24	; 0x3c
    84c4:	9d af       	std	Y+61, r25	; 0x3d
    84c6:	ae af       	std	Y+62, r26	; 0x3e
    84c8:	bf af       	std	Y+63, r27	; 0x3f
    84ca:	2f 97       	sbiw	r28, 0x0f	; 15
    84cc:	7a c0       	rjmp	.+244    	; 0x85c2 <_printf_fn+0x4dc>
    84ce:	81 e0       	ldi	r24, 0x01	; 1
    84d0:	90 e0       	ldi	r25, 0x00	; 0
    84d2:	51 01       	movw	r10, r2
    84d4:	38 e0       	ldi	r19, 0x08	; 8
    84d6:	43 16       	cp	r4, r19
    84d8:	51 04       	cpc	r5, r1
    84da:	09 f0       	breq	.+2      	; 0x84de <_printf_fn+0x3f8>
    84dc:	7c c0       	rjmp	.+248    	; 0x85d6 <_printf_fn+0x4f0>
    84de:	48 e0       	ldi	r20, 0x08	; 8
    84e0:	a4 0e       	add	r10, r20
    84e2:	b1 1c       	adc	r11, r1
    84e4:	d1 01       	movw	r26, r2
    84e6:	fc 90       	ld	r15, X
    84e8:	f1 01       	movw	r30, r2
    84ea:	01 81       	ldd	r16, Z+1	; 0x01
    84ec:	12 81       	ldd	r17, Z+2	; 0x02
    84ee:	f3 81       	ldd	r31, Z+3	; 0x03
    84f0:	aa 96       	adiw	r28, 0x2a	; 42
    84f2:	ff af       	std	Y+63, r31	; 0x3f
    84f4:	aa 97       	sbiw	r28, 0x2a	; 42
    84f6:	f1 01       	movw	r30, r2
    84f8:	f4 81       	ldd	r31, Z+4	; 0x04
    84fa:	ab 96       	adiw	r28, 0x2b	; 43
    84fc:	ff af       	std	Y+63, r31	; 0x3f
    84fe:	ab 97       	sbiw	r28, 0x2b	; 43
    8500:	f1 01       	movw	r30, r2
    8502:	b5 81       	ldd	r27, Z+5	; 0x05
    8504:	f6 81       	ldd	r31, Z+6	; 0x06
    8506:	af 96       	adiw	r28, 0x2f	; 47
    8508:	ff af       	std	Y+63, r31	; 0x3f
    850a:	af 97       	sbiw	r28, 0x2f	; 47
    850c:	f1 01       	movw	r30, r2
    850e:	37 80       	ldd	r3, Z+7	; 0x07
    8510:	24 96       	adiw	r28, 0x04	; 4
    8512:	ff ae       	std	Y+63, r15	; 0x3f
    8514:	24 97       	sbiw	r28, 0x04	; 4
    8516:	25 96       	adiw	r28, 0x05	; 5
    8518:	0f af       	std	Y+63, r16	; 0x3f
    851a:	25 97       	sbiw	r28, 0x05	; 5
    851c:	26 96       	adiw	r28, 0x06	; 6
    851e:	1f af       	std	Y+63, r17	; 0x3f
    8520:	26 97       	sbiw	r28, 0x06	; 6
    8522:	aa 96       	adiw	r28, 0x2a	; 42
    8524:	ff ad       	ldd	r31, Y+63	; 0x3f
    8526:	aa 97       	sbiw	r28, 0x2a	; 42
    8528:	27 96       	adiw	r28, 0x07	; 7
    852a:	ff af       	std	Y+63, r31	; 0x3f
    852c:	27 97       	sbiw	r28, 0x07	; 7
    852e:	ab 96       	adiw	r28, 0x2b	; 43
    8530:	ef ad       	ldd	r30, Y+63	; 0x3f
    8532:	ab 97       	sbiw	r28, 0x2b	; 43
    8534:	28 96       	adiw	r28, 0x08	; 8
    8536:	ef af       	std	Y+63, r30	; 0x3f
    8538:	28 97       	sbiw	r28, 0x08	; 8
    853a:	29 96       	adiw	r28, 0x09	; 9
    853c:	bf af       	std	Y+63, r27	; 0x3f
    853e:	29 97       	sbiw	r28, 0x09	; 9
    8540:	af 96       	adiw	r28, 0x2f	; 47
    8542:	ff ad       	ldd	r31, Y+63	; 0x3f
    8544:	af 97       	sbiw	r28, 0x2f	; 47
    8546:	2a 96       	adiw	r28, 0x0a	; 10
    8548:	ff af       	std	Y+63, r31	; 0x3f
    854a:	2a 97       	sbiw	r28, 0x0a	; 10
    854c:	2b 96       	adiw	r28, 0x0b	; 11
    854e:	3f ae       	std	Y+63, r3	; 0x3f
    8550:	2b 97       	sbiw	r28, 0x0b	; 11
    8552:	89 2b       	or	r24, r25
    8554:	09 f4       	brne	.+2      	; 0x8558 <_printf_fn+0x472>
    8556:	4a c0       	rjmp	.+148    	; 0x85ec <_printf_fn+0x506>
    8558:	2f 2d       	mov	r18, r15
    855a:	30 2f       	mov	r19, r16
    855c:	41 2f       	mov	r20, r17
    855e:	aa 96       	adiw	r28, 0x2a	; 42
    8560:	5f ad       	ldd	r21, Y+63	; 0x3f
    8562:	aa 97       	sbiw	r28, 0x2a	; 42
    8564:	6e 2f       	mov	r22, r30
    8566:	7b 2f       	mov	r23, r27
    8568:	8f 2f       	mov	r24, r31
    856a:	93 2d       	mov	r25, r3
    856c:	a0 e0       	ldi	r26, 0x00	; 0
    856e:	0e 94 d9 e3 	call	0x1c7b2	; 0x1c7b2 <__cmpdi2_s8>
    8572:	e4 f5       	brge	.+120    	; 0x85ec <_printf_fn+0x506>
    8574:	68 94       	set
    8576:	96 f8       	bld	r9, 6
    8578:	0e 94 8b e3 	call	0x1c716	; 0x1c716 <__negdi2>
    857c:	24 96       	adiw	r28, 0x04	; 4
    857e:	2f af       	std	Y+63, r18	; 0x3f
    8580:	24 97       	sbiw	r28, 0x04	; 4
    8582:	25 96       	adiw	r28, 0x05	; 5
    8584:	3f af       	std	Y+63, r19	; 0x3f
    8586:	25 97       	sbiw	r28, 0x05	; 5
    8588:	26 96       	adiw	r28, 0x06	; 6
    858a:	4f af       	std	Y+63, r20	; 0x3f
    858c:	26 97       	sbiw	r28, 0x06	; 6
    858e:	27 96       	adiw	r28, 0x07	; 7
    8590:	5f af       	std	Y+63, r21	; 0x3f
    8592:	27 97       	sbiw	r28, 0x07	; 7
    8594:	28 96       	adiw	r28, 0x08	; 8
    8596:	6f af       	std	Y+63, r22	; 0x3f
    8598:	28 97       	sbiw	r28, 0x08	; 8
    859a:	29 96       	adiw	r28, 0x09	; 9
    859c:	7f af       	std	Y+63, r23	; 0x3f
    859e:	29 97       	sbiw	r28, 0x09	; 9
    85a0:	2a 96       	adiw	r28, 0x0a	; 10
    85a2:	8f af       	std	Y+63, r24	; 0x3f
    85a4:	2a 97       	sbiw	r28, 0x0a	; 10
    85a6:	2b 96       	adiw	r28, 0x0b	; 11
    85a8:	9f af       	std	Y+63, r25	; 0x3f
    85aa:	2b 97       	sbiw	r28, 0x0b	; 11
    85ac:	1f c0       	rjmp	.+62     	; 0x85ec <_printf_fn+0x506>
    85ae:	22 e0       	ldi	r18, 0x02	; 2
    85b0:	42 2e       	mov	r4, r18
    85b2:	51 2c       	mov	r5, r1
    85b4:	6c 96       	adiw	r28, 0x1c	; 28
    85b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    85b8:	6c 97       	sbiw	r28, 0x1c	; 28
    85ba:	6d 96       	adiw	r28, 0x1d	; 29
    85bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    85be:	6d 97       	sbiw	r28, 0x1d	; 29
    85c0:	1b c0       	rjmp	.+54     	; 0x85f8 <_printf_fn+0x512>
    85c2:	94 e0       	ldi	r25, 0x04	; 4
    85c4:	49 2e       	mov	r4, r25
    85c6:	51 2c       	mov	r5, r1
    85c8:	6a 96       	adiw	r28, 0x1a	; 26
    85ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    85cc:	6a 97       	sbiw	r28, 0x1a	; 26
    85ce:	6b 96       	adiw	r28, 0x1b	; 27
    85d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    85d2:	6b 97       	sbiw	r28, 0x1b	; 27
    85d4:	11 c0       	rjmp	.+34     	; 0x85f8 <_printf_fn+0x512>
    85d6:	66 96       	adiw	r28, 0x16	; 22
    85d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    85da:	66 97       	sbiw	r28, 0x16	; 22
    85dc:	67 96       	adiw	r28, 0x17	; 23
    85de:	9f ad       	ldd	r25, Y+63	; 0x3f
    85e0:	67 97       	sbiw	r28, 0x17	; 23
    85e2:	a3 96       	adiw	r28, 0x23	; 35
    85e4:	1f ae       	std	Y+63, r1	; 0x3f
    85e6:	1e ae       	std	Y+62, r1	; 0x3e
    85e8:	a3 97       	sbiw	r28, 0x23	; 35
    85ea:	06 c0       	rjmp	.+12     	; 0x85f8 <_printf_fn+0x512>
    85ec:	68 96       	adiw	r28, 0x18	; 24
    85ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    85f0:	68 97       	sbiw	r28, 0x18	; 24
    85f2:	69 96       	adiw	r28, 0x19	; 25
    85f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    85f6:	69 97       	sbiw	r28, 0x19	; 25
    85f8:	2f ef       	ldi	r18, 0xFF	; 255
    85fa:	62 1a       	sub	r6, r18
    85fc:	72 0a       	sbc	r7, r18
    85fe:	82 0a       	sbc	r8, r18
    8600:	15 01       	movw	r2, r10
    8602:	33 c0       	rjmp	.+102    	; 0x866a <_printf_fn+0x584>
    8604:	91 fc       	sbrc	r9, 1
    8606:	08 c0       	rjmp	.+16     	; 0x8618 <_printf_fn+0x532>
    8608:	68 94       	set
    860a:	91 f8       	bld	r9, 1
    860c:	46 e0       	ldi	r20, 0x06	; 6
    860e:	50 e0       	ldi	r21, 0x00	; 0
    8610:	a1 96       	adiw	r28, 0x21	; 33
    8612:	5f af       	std	Y+63, r21	; 0x3f
    8614:	4e af       	std	Y+62, r20	; 0x3e
    8616:	a1 97       	sbiw	r28, 0x21	; 33
    8618:	d1 01       	movw	r26, r2
    861a:	8d 91       	ld	r24, X+
    861c:	9d 91       	ld	r25, X+
    861e:	0d 90       	ld	r0, X+
    8620:	bc 91       	ld	r27, X
    8622:	a0 2d       	mov	r26, r0
    8624:	a9 96       	adiw	r28, 0x29	; 41
    8626:	8c af       	std	Y+60, r24	; 0x3c
    8628:	9d af       	std	Y+61, r25	; 0x3d
    862a:	ae af       	std	Y+62, r26	; 0x3e
    862c:	bf af       	std	Y+63, r27	; 0x3f
    862e:	a9 97       	sbiw	r28, 0x29	; 41
    8630:	bf ef       	ldi	r27, 0xFF	; 255
    8632:	6b 1a       	sub	r6, r27
    8634:	7b 0a       	sbc	r7, r27
    8636:	8b 0a       	sbc	r8, r27
    8638:	f1 01       	movw	r30, r2
    863a:	34 96       	adiw	r30, 0x04	; 4
    863c:	1f 01       	movw	r2, r30
    863e:	0f c0       	rjmp	.+30     	; 0x865e <_printf_fn+0x578>
    8640:	ff ef       	ldi	r31, 0xFF	; 255
    8642:	6f 1a       	sub	r6, r31
    8644:	7f 0a       	sbc	r7, r31
    8646:	8f 0a       	sbc	r8, r31
    8648:	c5 c0       	rjmp	.+394    	; 0x87d4 <_printf_fn+0x6ee>
    864a:	2f ef       	ldi	r18, 0xFF	; 255
    864c:	62 1a       	sub	r6, r18
    864e:	72 0a       	sbc	r7, r18
    8650:	82 0a       	sbc	r8, r18
    8652:	11 c1       	rjmp	.+546    	; 0x8876 <_printf_fn+0x790>
    8654:	3f ef       	ldi	r19, 0xFF	; 255
    8656:	63 1a       	sub	r6, r19
    8658:	73 0a       	sbc	r7, r19
    865a:	83 0a       	sbc	r8, r19
    865c:	c8 c0       	rjmp	.+400    	; 0x87ee <_printf_fn+0x708>
    865e:	66 96       	adiw	r28, 0x16	; 22
    8660:	8f ad       	ldd	r24, Y+63	; 0x3f
    8662:	66 97       	sbiw	r28, 0x16	; 22
    8664:	67 96       	adiw	r28, 0x17	; 23
    8666:	9f ad       	ldd	r25, Y+63	; 0x3f
    8668:	67 97       	sbiw	r28, 0x17	; 23
    866a:	a3 96       	adiw	r28, 0x23	; 35
    866c:	ee ad       	ldd	r30, Y+62	; 0x3e
    866e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8670:	a3 97       	sbiw	r28, 0x23	; 35
    8672:	e2 54       	subi	r30, 0x42	; 66
    8674:	f1 09       	sbc	r31, r1
    8676:	e7 33       	cpi	r30, 0x37	; 55
    8678:	f1 05       	cpc	r31, r1
    867a:	08 f0       	brcs	.+2      	; 0x867e <_printf_fn+0x598>
    867c:	56 c1       	rjmp	.+684    	; 0x892a <_printf_fn+0x844>
    867e:	e3 58       	subi	r30, 0x83	; 131
    8680:	ff 4f       	sbci	r31, 0xFF	; 255
    8682:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
    8686:	e8 94       	clt
    8688:	94 f8       	bld	r9, 4
    868a:	e8 94       	clt
    868c:	92 f8       	bld	r9, 2
    868e:	a9 2c       	mov	r10, r9
    8690:	b1 2c       	mov	r11, r1
    8692:	a1 96       	adiw	r28, 0x21	; 33
    8694:	ce ac       	ldd	r12, Y+62	; 0x3e
    8696:	df ac       	ldd	r13, Y+63	; 0x3f
    8698:	a1 97       	sbiw	r28, 0x21	; 33
    869a:	6f 96       	adiw	r28, 0x1f	; 31
    869c:	ee ac       	ldd	r14, Y+62	; 0x3e
    869e:	ff ac       	ldd	r15, Y+63	; 0x3f
    86a0:	6f 97       	sbiw	r28, 0x1f	; 31
    86a2:	0a e0       	ldi	r16, 0x0A	; 10
    86a4:	10 e0       	ldi	r17, 0x00	; 0
    86a6:	19 c0       	rjmp	.+50     	; 0x86da <_printf_fn+0x5f4>
    86a8:	a9 2c       	mov	r10, r9
    86aa:	b1 2c       	mov	r11, r1
    86ac:	a1 96       	adiw	r28, 0x21	; 33
    86ae:	ce ac       	ldd	r12, Y+62	; 0x3e
    86b0:	df ac       	ldd	r13, Y+63	; 0x3f
    86b2:	a1 97       	sbiw	r28, 0x21	; 33
    86b4:	6f 96       	adiw	r28, 0x1f	; 31
    86b6:	ee ac       	ldd	r14, Y+62	; 0x3e
    86b8:	ff ac       	ldd	r15, Y+63	; 0x3f
    86ba:	6f 97       	sbiw	r28, 0x1f	; 31
    86bc:	02 e0       	ldi	r16, 0x02	; 2
    86be:	10 e0       	ldi	r17, 0x00	; 0
    86c0:	0c c0       	rjmp	.+24     	; 0x86da <_printf_fn+0x5f4>
    86c2:	a9 2c       	mov	r10, r9
    86c4:	b1 2c       	mov	r11, r1
    86c6:	a1 96       	adiw	r28, 0x21	; 33
    86c8:	ce ac       	ldd	r12, Y+62	; 0x3e
    86ca:	df ac       	ldd	r13, Y+63	; 0x3f
    86cc:	a1 97       	sbiw	r28, 0x21	; 33
    86ce:	6f 96       	adiw	r28, 0x1f	; 31
    86d0:	ee ac       	ldd	r14, Y+62	; 0x3e
    86d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    86d4:	6f 97       	sbiw	r28, 0x1f	; 31
    86d6:	08 e0       	ldi	r16, 0x08	; 8
    86d8:	10 e0       	ldi	r17, 0x00	; 0
    86da:	22 e4       	ldi	r18, 0x42	; 66
    86dc:	30 e0       	ldi	r19, 0x00	; 0
    86de:	ae 01       	movw	r20, r28
    86e0:	4f 5f       	subi	r20, 0xFF	; 255
    86e2:	5f 4f       	sbci	r21, 0xFF	; 255
    86e4:	b2 01       	movw	r22, r4
    86e6:	7d d9       	rcall	.-3334   	; 0x79e2 <p_ntoa>
    86e8:	34 c0       	rjmp	.+104    	; 0x8752 <_printf_fn+0x66c>
    86ea:	a9 2c       	mov	r10, r9
    86ec:	b1 2c       	mov	r11, r1
    86ee:	a1 96       	adiw	r28, 0x21	; 33
    86f0:	ce ac       	ldd	r12, Y+62	; 0x3e
    86f2:	df ac       	ldd	r13, Y+63	; 0x3f
    86f4:	a1 97       	sbiw	r28, 0x21	; 33
    86f6:	6f 96       	adiw	r28, 0x1f	; 31
    86f8:	ee ac       	ldd	r14, Y+62	; 0x3e
    86fa:	ff ac       	ldd	r15, Y+63	; 0x3f
    86fc:	6f 97       	sbiw	r28, 0x1f	; 31
    86fe:	00 e1       	ldi	r16, 0x10	; 16
    8700:	10 e0       	ldi	r17, 0x00	; 0
    8702:	22 e4       	ldi	r18, 0x42	; 66
    8704:	30 e0       	ldi	r19, 0x00	; 0
    8706:	ae 01       	movw	r20, r28
    8708:	4f 5f       	subi	r20, 0xFF	; 255
    870a:	5f 4f       	sbci	r21, 0xFF	; 255
    870c:	b2 01       	movw	r22, r4
    870e:	69 d9       	rcall	.-3374   	; 0x79e2 <p_ntoa>
    8710:	6c 01       	movw	r12, r24
    8712:	a3 96       	adiw	r28, 0x23	; 35
    8714:	6e ad       	ldd	r22, Y+62	; 0x3e
    8716:	7f ad       	ldd	r23, Y+63	; 0x3f
    8718:	a3 97       	sbiw	r28, 0x23	; 35
    871a:	67 7f       	andi	r22, 0xF7	; 247
    871c:	60 35       	cpi	r22, 0x50	; 80
    871e:	71 05       	cpc	r23, r1
    8720:	09 f0       	breq	.+2      	; 0x8724 <_printf_fn+0x63e>
    8722:	3f c0       	rjmp	.+126    	; 0x87a2 <_printf_fn+0x6bc>
    8724:	3a c0       	rjmp	.+116    	; 0x879a <_printf_fn+0x6b4>
    8726:	c9 2c       	mov	r12, r9
    8728:	d1 2c       	mov	r13, r1
    872a:	a1 96       	adiw	r28, 0x21	; 33
    872c:	ee ac       	ldd	r14, Y+62	; 0x3e
    872e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8730:	a1 97       	sbiw	r28, 0x21	; 33
    8732:	6f 96       	adiw	r28, 0x1f	; 31
    8734:	0e ad       	ldd	r16, Y+62	; 0x3e
    8736:	1f ad       	ldd	r17, Y+63	; 0x3f
    8738:	6f 97       	sbiw	r28, 0x1f	; 31
    873a:	22 e4       	ldi	r18, 0x42	; 66
    873c:	30 e0       	ldi	r19, 0x00	; 0
    873e:	ae 01       	movw	r20, r28
    8740:	4f 5f       	subi	r20, 0xFF	; 255
    8742:	5f 4f       	sbci	r21, 0xFF	; 255
    8744:	a9 96       	adiw	r28, 0x29	; 41
    8746:	6c ad       	ldd	r22, Y+60	; 0x3c
    8748:	7d ad       	ldd	r23, Y+61	; 0x3d
    874a:	8e ad       	ldd	r24, Y+62	; 0x3e
    874c:	9f ad       	ldd	r25, Y+63	; 0x3f
    874e:	a9 97       	sbiw	r28, 0x29	; 41
    8750:	9d d9       	rcall	.-3270   	; 0x7a8c <p_ftoa>
    8752:	93 fa       	bst	r9, 3
    8754:	00 27       	eor	r16, r16
    8756:	00 f9       	bld	r16, 0
    8758:	10 e0       	ldi	r17, 0x00	; 0
    875a:	9c 01       	movw	r18, r24
    875c:	27 c0       	rjmp	.+78     	; 0x87ac <_printf_fn+0x6c6>
    875e:	c9 2c       	mov	r12, r9
    8760:	d1 2c       	mov	r13, r1
    8762:	a1 96       	adiw	r28, 0x21	; 33
    8764:	ee ac       	ldd	r14, Y+62	; 0x3e
    8766:	ff ac       	ldd	r15, Y+63	; 0x3f
    8768:	a1 97       	sbiw	r28, 0x21	; 33
    876a:	6f 96       	adiw	r28, 0x1f	; 31
    876c:	0e ad       	ldd	r16, Y+62	; 0x3e
    876e:	1f ad       	ldd	r17, Y+63	; 0x3f
    8770:	6f 97       	sbiw	r28, 0x1f	; 31
    8772:	22 e4       	ldi	r18, 0x42	; 66
    8774:	30 e0       	ldi	r19, 0x00	; 0
    8776:	ae 01       	movw	r20, r28
    8778:	4f 5f       	subi	r20, 0xFF	; 255
    877a:	5f 4f       	sbci	r21, 0xFF	; 255
    877c:	a9 96       	adiw	r28, 0x29	; 41
    877e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8780:	7d ad       	ldd	r23, Y+61	; 0x3d
    8782:	8e ad       	ldd	r24, Y+62	; 0x3e
    8784:	9f ad       	ldd	r25, Y+63	; 0x3f
    8786:	a9 97       	sbiw	r28, 0x29	; 41
    8788:	88 da       	rcall	.-2800   	; 0x7c9a <p_etoa>
    878a:	6c 01       	movw	r12, r24
    878c:	a3 96       	adiw	r28, 0x23	; 35
    878e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8790:	5f ad       	ldd	r21, Y+63	; 0x3f
    8792:	a3 97       	sbiw	r28, 0x23	; 35
    8794:	45 34       	cpi	r20, 0x45	; 69
    8796:	51 05       	cpc	r21, r1
    8798:	21 f4       	brne	.+8      	; 0x87a2 <_printf_fn+0x6bc>
    879a:	ce 01       	movw	r24, r28
    879c:	01 96       	adiw	r24, 0x01	; 1
    879e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <strupper>
    87a2:	93 fa       	bst	r9, 3
    87a4:	00 27       	eor	r16, r16
    87a6:	00 f9       	bld	r16, 0
    87a8:	10 e0       	ldi	r17, 0x00	; 0
    87aa:	96 01       	movw	r18, r12
    87ac:	6f 96       	adiw	r28, 0x1f	; 31
    87ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    87b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b2:	6f 97       	sbiw	r28, 0x1f	; 31
    87b4:	be 01       	movw	r22, r28
    87b6:	6f 5f       	subi	r22, 0xFF	; 255
    87b8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ba:	a5 96       	adiw	r28, 0x25	; 37
    87bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    87be:	9f ad       	ldd	r25, Y+63	; 0x3f
    87c0:	a5 97       	sbiw	r28, 0x25	; 37
    87c2:	d7 db       	rcall	.-2130   	; 0x7f72 <_puts_pad>
    87c4:	b6 c0       	rjmp	.+364    	; 0x8932 <_printf_fn+0x84c>
    87c6:	a3 96       	adiw	r28, 0x23	; 35
    87c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    87ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    87cc:	a3 97       	sbiw	r28, 0x23	; 35
    87ce:	83 37       	cpi	r24, 0x73	; 115
    87d0:	91 05       	cpc	r25, r1
    87d2:	69 f4       	brne	.+26     	; 0x87ee <_printf_fn+0x708>
    87d4:	61 01       	movw	r12, r2
    87d6:	92 e0       	ldi	r25, 0x02	; 2
    87d8:	c9 0e       	add	r12, r25
    87da:	d1 1c       	adc	r13, r1
    87dc:	d1 01       	movw	r26, r2
    87de:	6d 91       	ld	r22, X+
    87e0:	7c 91       	ld	r23, X
    87e2:	61 15       	cp	r22, r1
    87e4:	71 05       	cpc	r23, r1
    87e6:	91 f4       	brne	.+36     	; 0x880c <_printf_fn+0x726>
    87e8:	6a e1       	ldi	r22, 0x1A	; 26
    87ea:	74 e0       	ldi	r23, 0x04	; 4
    87ec:	0f c0       	rjmp	.+30     	; 0x880c <_printf_fn+0x726>
    87ee:	61 01       	movw	r12, r2
    87f0:	b2 e0       	ldi	r27, 0x02	; 2
    87f2:	cb 0e       	add	r12, r27
    87f4:	d1 1c       	adc	r13, r1
    87f6:	f1 01       	movw	r30, r2
    87f8:	80 81       	ld	r24, Z
    87fa:	60 96       	adiw	r28, 0x10	; 16
    87fc:	8f af       	std	Y+63, r24	; 0x3f
    87fe:	60 97       	sbiw	r28, 0x10	; 16
    8800:	61 96       	adiw	r28, 0x11	; 17
    8802:	1f ae       	std	Y+63, r1	; 0x3f
    8804:	61 97       	sbiw	r28, 0x11	; 17
    8806:	be 01       	movw	r22, r28
    8808:	61 5b       	subi	r22, 0xB1	; 177
    880a:	7f 4f       	sbci	r23, 0xFF	; 255
    880c:	fb 01       	movw	r30, r22
    880e:	01 90       	ld	r0, Z+
    8810:	00 20       	and	r0, r0
    8812:	e9 f7       	brne	.-6      	; 0x880e <_printf_fn+0x728>
    8814:	31 97       	sbiw	r30, 0x01	; 1
    8816:	e6 1b       	sub	r30, r22
    8818:	f7 0b       	sbc	r31, r23
    881a:	a1 96       	adiw	r28, 0x21	; 33
    881c:	2e ad       	ldd	r18, Y+62	; 0x3e
    881e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8820:	a1 97       	sbiw	r28, 0x21	; 33
    8822:	23 2b       	or	r18, r19
    8824:	21 f4       	brne	.+8      	; 0x882e <_printf_fn+0x748>
    8826:	a1 96       	adiw	r28, 0x21	; 33
    8828:	ff af       	std	Y+63, r31	; 0x3f
    882a:	ee af       	std	Y+62, r30	; 0x3e
    882c:	a1 97       	sbiw	r28, 0x21	; 33
    882e:	6f 96       	adiw	r28, 0x1f	; 31
    8830:	4e ad       	ldd	r20, Y+62	; 0x3e
    8832:	5f ad       	ldd	r21, Y+63	; 0x3f
    8834:	6f 97       	sbiw	r28, 0x1f	; 31
    8836:	a1 96       	adiw	r28, 0x21	; 33
    8838:	8e ad       	ldd	r24, Y+62	; 0x3e
    883a:	9f ad       	ldd	r25, Y+63	; 0x3f
    883c:	a1 97       	sbiw	r28, 0x21	; 33
    883e:	48 17       	cp	r20, r24
    8840:	59 07       	cpc	r21, r25
    8842:	3c f4       	brge	.+14     	; 0x8852 <_printf_fn+0x76c>
    8844:	41 15       	cp	r20, r1
    8846:	51 05       	cpc	r21, r1
    8848:	21 f0       	breq	.+8      	; 0x8852 <_printf_fn+0x76c>
    884a:	a1 96       	adiw	r28, 0x21	; 33
    884c:	5f af       	std	Y+63, r21	; 0x3f
    884e:	4e af       	std	Y+62, r20	; 0x3e
    8850:	a1 97       	sbiw	r28, 0x21	; 33
    8852:	93 fa       	bst	r9, 3
    8854:	00 27       	eor	r16, r16
    8856:	00 f9       	bld	r16, 0
    8858:	10 e0       	ldi	r17, 0x00	; 0
    885a:	a1 96       	adiw	r28, 0x21	; 33
    885c:	2e ad       	ldd	r18, Y+62	; 0x3e
    885e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8860:	a1 97       	sbiw	r28, 0x21	; 33
    8862:	6f 96       	adiw	r28, 0x1f	; 31
    8864:	4e ad       	ldd	r20, Y+62	; 0x3e
    8866:	5f ad       	ldd	r21, Y+63	; 0x3f
    8868:	6f 97       	sbiw	r28, 0x1f	; 31
    886a:	a5 96       	adiw	r28, 0x25	; 37
    886c:	8e ad       	ldd	r24, Y+62	; 0x3e
    886e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8870:	a5 97       	sbiw	r28, 0x25	; 37
    8872:	7f db       	rcall	.-2306   	; 0x7f72 <_puts_pad>
    8874:	45 c0       	rjmp	.+138    	; 0x8900 <_printf_fn+0x81a>
    8876:	61 01       	movw	r12, r2
    8878:	92 e0       	ldi	r25, 0x02	; 2
    887a:	c9 0e       	add	r12, r25
    887c:	d1 1c       	adc	r13, r1
    887e:	d1 01       	movw	r26, r2
    8880:	2d 90       	ld	r2, X+
    8882:	3c 90       	ld	r3, X
    8884:	41 2c       	mov	r4, r1
    8886:	21 14       	cp	r2, r1
    8888:	31 04       	cpc	r3, r1
    888a:	41 04       	cpc	r4, r1
    888c:	29 f4       	brne	.+10     	; 0x8898 <_printf_fn+0x7b2>
    888e:	ae 96       	adiw	r28, 0x2e	; 46
    8890:	2d ac       	ldd	r2, Y+61	; 0x3d
    8892:	3e ac       	ldd	r3, Y+62	; 0x3e
    8894:	4f ac       	ldd	r4, Y+63	; 0x3f
    8896:	ae 97       	sbiw	r28, 0x2e	; 46
    8898:	84 2d       	mov	r24, r4
    889a:	b1 01       	movw	r22, r2
    889c:	08 dc       	rcall	.-2032   	; 0x80ae <strlen_X>
    889e:	a1 96       	adiw	r28, 0x21	; 33
    88a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    88a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    88a4:	a1 97       	sbiw	r28, 0x21	; 33
    88a6:	ef 2b       	or	r30, r31
    88a8:	31 f4       	brne	.+12     	; 0x88b6 <_printf_fn+0x7d0>
    88aa:	a0 96       	adiw	r28, 0x20	; 32
    88ac:	8f af       	std	Y+63, r24	; 0x3f
    88ae:	a0 97       	sbiw	r28, 0x20	; 32
    88b0:	a1 96       	adiw	r28, 0x21	; 33
    88b2:	9f af       	std	Y+63, r25	; 0x3f
    88b4:	a1 97       	sbiw	r28, 0x21	; 33
    88b6:	6f 96       	adiw	r28, 0x1f	; 31
    88b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    88bc:	6f 97       	sbiw	r28, 0x1f	; 31
    88be:	a1 96       	adiw	r28, 0x21	; 33
    88c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    88c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    88c4:	a1 97       	sbiw	r28, 0x21	; 33
    88c6:	24 17       	cp	r18, r20
    88c8:	35 07       	cpc	r19, r21
    88ca:	3c f4       	brge	.+14     	; 0x88da <_printf_fn+0x7f4>
    88cc:	21 15       	cp	r18, r1
    88ce:	31 05       	cpc	r19, r1
    88d0:	21 f0       	breq	.+8      	; 0x88da <_printf_fn+0x7f4>
    88d2:	a1 96       	adiw	r28, 0x21	; 33
    88d4:	3f af       	std	Y+63, r19	; 0x3f
    88d6:	2e af       	std	Y+62, r18	; 0x3e
    88d8:	a1 97       	sbiw	r28, 0x21	; 33
    88da:	93 fa       	bst	r9, 3
    88dc:	ee 24       	eor	r14, r14
    88de:	e0 f8       	bld	r14, 0
    88e0:	f1 2c       	mov	r15, r1
    88e2:	a1 96       	adiw	r28, 0x21	; 33
    88e4:	0e ad       	ldd	r16, Y+62	; 0x3e
    88e6:	1f ad       	ldd	r17, Y+63	; 0x3f
    88e8:	a1 97       	sbiw	r28, 0x21	; 33
    88ea:	6f 96       	adiw	r28, 0x1f	; 31
    88ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    88ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    88f0:	6f 97       	sbiw	r28, 0x1f	; 31
    88f2:	64 2d       	mov	r22, r4
    88f4:	a1 01       	movw	r20, r2
    88f6:	a5 96       	adiw	r28, 0x25	; 37
    88f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    88fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    88fc:	a5 97       	sbiw	r28, 0x25	; 37
    88fe:	7b db       	rcall	.-2314   	; 0x7ff6 <_puts_pad_X>
    8900:	16 01       	movw	r2, r12
    8902:	17 c0       	rjmp	.+46     	; 0x8932 <_printf_fn+0x84c>
    8904:	f6 01       	movw	r30, r12
    8906:	5e 2d       	mov	r21, r14
    8908:	0e 94 d2 e3 	call	0x1c7a4	; 0x1c7a4 <__xload_1>
    890c:	66 23       	and	r22, r22
    890e:	89 f0       	breq	.+34     	; 0x8932 <_printf_fn+0x84c>
    8910:	5f ef       	ldi	r21, 0xFF	; 255
    8912:	c5 1a       	sub	r12, r21
    8914:	d5 0a       	sbc	r13, r21
    8916:	e5 0a       	sbc	r14, r21
    8918:	a5 96       	adiw	r28, 0x25	; 37
    891a:	ae ad       	ldd	r26, Y+62	; 0x3e
    891c:	bf ad       	ldd	r27, Y+63	; 0x3f
    891e:	a5 97       	sbiw	r28, 0x25	; 37
    8920:	ed 91       	ld	r30, X+
    8922:	fc 91       	ld	r31, X
    8924:	11 97       	sbiw	r26, 0x01	; 1
    8926:	cd 01       	movw	r24, r26
    8928:	09 95       	icall
    892a:	6c 14       	cp	r6, r12
    892c:	7d 04       	cpc	r7, r13
    892e:	8e 04       	cpc	r8, r14
    8930:	48 f7       	brcc	.-46     	; 0x8904 <_printf_fn+0x81e>
    8932:	e8 2c       	mov	r14, r8
    8934:	63 01       	movw	r12, r6
    8936:	0f cc       	rjmp	.-2018   	; 0x8156 <_printf_fn+0x70>
    8938:	82 e0       	ldi	r24, 0x02	; 2
    893a:	48 2e       	mov	r4, r24
    893c:	51 2c       	mov	r5, r1
    893e:	0d cd       	rjmp	.-1510   	; 0x835a <_printf_fn+0x274>
    8940:	f2 e0       	ldi	r31, 0x02	; 2
    8942:	4f 16       	cp	r4, r31
    8944:	51 04       	cpc	r5, r1
    8946:	61 f4       	brne	.+24     	; 0x8960 <_printf_fn+0x87a>
    8948:	51 01       	movw	r10, r2
    894a:	b2 e0       	ldi	r27, 0x02	; 2
    894c:	ab 0e       	add	r10, r27
    894e:	b1 1c       	adc	r11, r1
    8950:	f1 01       	movw	r30, r2
    8952:	80 81       	ld	r24, Z
    8954:	91 81       	ldd	r25, Z+1	; 0x01
    8956:	65 96       	adiw	r28, 0x15	; 21
    8958:	9f af       	std	Y+63, r25	; 0x3f
    895a:	8e af       	std	Y+62, r24	; 0x3e
    895c:	65 97       	sbiw	r28, 0x15	; 21
    895e:	7e cd       	rjmp	.-1284   	; 0x845c <_printf_fn+0x376>
    8960:	f4 e0       	ldi	r31, 0x04	; 4
    8962:	4f 16       	cp	r4, r31
    8964:	51 04       	cpc	r5, r1
    8966:	09 f0       	breq	.+2      	; 0x896a <_printf_fn+0x884>
    8968:	b2 cd       	rjmp	.-1180   	; 0x84ce <_printf_fn+0x3e8>
    896a:	51 01       	movw	r10, r2
    896c:	24 e0       	ldi	r18, 0x04	; 4
    896e:	a2 0e       	add	r10, r18
    8970:	b1 1c       	adc	r11, r1
    8972:	f1 01       	movw	r30, r2
    8974:	80 81       	ld	r24, Z
    8976:	91 81       	ldd	r25, Z+1	; 0x01
    8978:	a2 81       	ldd	r26, Z+2	; 0x02
    897a:	b3 81       	ldd	r27, Z+3	; 0x03
    897c:	2f 96       	adiw	r28, 0x0f	; 15
    897e:	8c af       	std	Y+60, r24	; 0x3c
    8980:	9d af       	std	Y+61, r25	; 0x3d
    8982:	ae af       	std	Y+62, r26	; 0x3e
    8984:	bf af       	std	Y+63, r27	; 0x3f
    8986:	2f 97       	sbiw	r28, 0x0f	; 15
    8988:	90 cd       	rjmp	.-1248   	; 0x84aa <_printf_fn+0x3c4>
    898a:	c2 59       	subi	r28, 0x92	; 146
    898c:	df 4f       	sbci	r29, 0xFF	; 255
    898e:	e2 e1       	ldi	r30, 0x12	; 18
    8990:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00008994 <vsnprintf_P>:
    8994:	a8 e0       	ldi	r26, 0x08	; 8
    8996:	b0 e0       	ldi	r27, 0x00	; 0
    8998:	e0 ed       	ldi	r30, 0xD0	; 208
    899a:	f4 e4       	ldi	r31, 0x44	; 68
    899c:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    89a0:	7c 01       	movw	r14, r24
    89a2:	cb 01       	movw	r24, r22
    89a4:	64 2f       	mov	r22, r20
    89a6:	a9 01       	movw	r20, r18
    89a8:	98 01       	movw	r18, r16
    89aa:	f7 01       	movw	r30, r14
    89ac:	10 82       	st	Z, r1
    89ae:	e8 e2       	ldi	r30, 0x28	; 40
    89b0:	fc e3       	ldi	r31, 0x3C	; 60
    89b2:	fa 83       	std	Y+2, r31	; 0x02
    89b4:	e9 83       	std	Y+1, r30	; 0x01
    89b6:	9e 83       	std	Y+6, r25	; 0x06
    89b8:	8d 83       	std	Y+5, r24	; 0x05
    89ba:	18 86       	std	Y+8, r1	; 0x08
    89bc:	1f 82       	std	Y+7, r1	; 0x07
    89be:	fc 82       	std	Y+4, r15	; 0x04
    89c0:	eb 82       	std	Y+3, r14	; 0x03
    89c2:	ce 01       	movw	r24, r28
    89c4:	01 96       	adiw	r24, 0x01	; 1
    89c6:	8f db       	rcall	.-2274   	; 0x80e6 <_printf_fn>
    89c8:	f7 01       	movw	r30, r14
    89ca:	01 90       	ld	r0, Z+
    89cc:	00 20       	and	r0, r0
    89ce:	e9 f7       	brne	.-6      	; 0x89ca <vsnprintf_P+0x36>
    89d0:	cf 01       	movw	r24, r30
    89d2:	01 97       	sbiw	r24, 0x01	; 1
    89d4:	8e 19       	sub	r24, r14
    89d6:	9f 09       	sbc	r25, r15
    89d8:	28 96       	adiw	r28, 0x08	; 8
    89da:	e6 e0       	ldi	r30, 0x06	; 6
    89dc:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

000089e0 <snprintf_P>:
    89e0:	a0 e0       	ldi	r26, 0x00	; 0
    89e2:	b0 e0       	ldi	r27, 0x00	; 0
    89e4:	e6 ef       	ldi	r30, 0xF6	; 246
    89e6:	f4 e4       	ldi	r31, 0x44	; 68
    89e8:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    89ec:	8e 01       	movw	r16, r28
    89ee:	02 5f       	subi	r16, 0xF2	; 242
    89f0:	1f 4f       	sbci	r17, 0xFF	; 255
    89f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    89f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    89f6:	4d 85       	ldd	r20, Y+13	; 0x0d
    89f8:	69 85       	ldd	r22, Y+9	; 0x09
    89fa:	7a 85       	ldd	r23, Y+10	; 0x0a
    89fc:	8f 81       	ldd	r24, Y+7	; 0x07
    89fe:	98 85       	ldd	r25, Y+8	; 0x08
    8a00:	c9 df       	rcall	.-110    	; 0x8994 <vsnprintf_P>
    8a02:	e4 e0       	ldi	r30, 0x04	; 4
    8a04:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00008a08 <sprintf_P>:
    8a08:	a0 e0       	ldi	r26, 0x00	; 0
    8a0a:	b0 e0       	ldi	r27, 0x00	; 0
    8a0c:	ea e0       	ldi	r30, 0x0A	; 10
    8a0e:	f5 e4       	ldi	r31, 0x45	; 69
    8a10:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    8a14:	8e 01       	movw	r16, r28
    8a16:	04 5f       	subi	r16, 0xF4	; 244
    8a18:	1f 4f       	sbci	r17, 0xFF	; 255
    8a1a:	29 85       	ldd	r18, Y+9	; 0x09
    8a1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a20:	60 e0       	ldi	r22, 0x00	; 0
    8a22:	74 e0       	ldi	r23, 0x04	; 4
    8a24:	8f 81       	ldd	r24, Y+7	; 0x07
    8a26:	98 85       	ldd	r25, Y+8	; 0x08
    8a28:	b5 df       	rcall	.-150    	; 0x8994 <vsnprintf_P>
    8a2a:	e4 e0       	ldi	r30, 0x04	; 4
    8a2c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00008a30 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8a30:	a8 e0       	ldi	r26, 0x08	; 8
    8a32:	b0 e0       	ldi	r27, 0x00	; 0
    8a34:	ee e1       	ldi	r30, 0x1E	; 30
    8a36:	f5 e4       	ldi	r31, 0x45	; 69
    8a38:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    8a3c:	9e 01       	movw	r18, r28
    8a3e:	23 5f       	subi	r18, 0xF3	; 243
    8a40:	3f 4f       	sbci	r19, 0xFF	; 255
    8a42:	f9 01       	movw	r30, r18
    8a44:	41 91       	ld	r20, Z+
    8a46:	51 91       	ld	r21, Z+
    8a48:	61 91       	ld	r22, Z+
    8a4a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a4c:	81 e4       	ldi	r24, 0x41	; 65
    8a4e:	9c e3       	ldi	r25, 0x3C	; 60
    8a50:	9a 83       	std	Y+2, r25	; 0x02
    8a52:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a54:	18 86       	std	Y+8, r1	; 0x08
    8a56:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a58:	ce 01       	movw	r24, r28
    8a5a:	01 96       	adiw	r24, 0x01	; 1
    8a5c:	44 db       	rcall	.-2424   	; 0x80e6 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    8a60:	98 85       	ldd	r25, Y+8	; 0x08
    8a62:	28 96       	adiw	r28, 0x08	; 8
    8a64:	e2 e0       	ldi	r30, 0x02	; 2
    8a66:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00008a6a <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a6a:	9c 01       	movw	r18, r24
    8a6c:	20 53       	subi	r18, 0x30	; 48
    8a6e:	31 09       	sbc	r19, r1
    8a70:	2a 30       	cpi	r18, 0x0A	; 10
    8a72:	31 05       	cpc	r19, r1
    8a74:	10 f4       	brcc	.+4      	; 0x8a7a <atodigit+0x10>
    8a76:	c9 01       	movw	r24, r18
    8a78:	10 c0       	rjmp	.+32     	; 0x8a9a <atodigit+0x30>
    8a7a:	9c 01       	movw	r18, r24
    8a7c:	21 54       	subi	r18, 0x41	; 65
    8a7e:	31 09       	sbc	r19, r1
    8a80:	26 30       	cpi	r18, 0x06	; 6
    8a82:	31 05       	cpc	r19, r1
    8a84:	10 f4       	brcc	.+4      	; 0x8a8a <atodigit+0x20>
    8a86:	c7 97       	sbiw	r24, 0x37	; 55
    8a88:	08 c0       	rjmp	.+16     	; 0x8a9a <atodigit+0x30>
    8a8a:	9c 01       	movw	r18, r24
    8a8c:	21 56       	subi	r18, 0x61	; 97
    8a8e:	31 09       	sbc	r19, r1
    8a90:	26 30       	cpi	r18, 0x06	; 6
    8a92:	31 05       	cpc	r19, r1
    8a94:	28 f4       	brcc	.+10     	; 0x8aa0 <atodigit+0x36>
    8a96:	87 55       	subi	r24, 0x57	; 87
    8a98:	91 09       	sbc	r25, r1
    8a9a:	86 17       	cp	r24, r22
    8a9c:	97 07       	cpc	r25, r23
    8a9e:	14 f0       	brlt	.+4      	; 0x8aa4 <atodigit+0x3a>
    8aa0:	8f ef       	ldi	r24, 0xFF	; 255
    8aa2:	9f ef       	ldi	r25, 0xFF	; 255
    8aa4:	08 95       	ret

00008aa6 <strtol>:
    8aa6:	a0 e0       	ldi	r26, 0x00	; 0
    8aa8:	b0 e0       	ldi	r27, 0x00	; 0
    8aaa:	e9 e5       	ldi	r30, 0x59	; 89
    8aac:	f5 e4       	ldi	r31, 0x45	; 69
    8aae:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    8ab2:	2b 01       	movw	r4, r22
    8ab4:	8a 01       	movw	r16, r20
    8ab6:	ec 01       	movw	r28, r24
    8ab8:	28 81       	ld	r18, Y
    8aba:	01 96       	adiw	r24, 0x01	; 1
    8abc:	20 32       	cpi	r18, 0x20	; 32
    8abe:	d9 f3       	breq	.-10     	; 0x8ab6 <strtol+0x10>
    8ac0:	29 30       	cpi	r18, 0x09	; 9
    8ac2:	c9 f3       	breq	.-14     	; 0x8ab6 <strtol+0x10>
    8ac4:	2d 32       	cpi	r18, 0x2D	; 45
    8ac6:	29 f4       	brne	.+10     	; 0x8ad2 <strtol+0x2c>
    8ac8:	ec 01       	movw	r28, r24
    8aca:	66 24       	eor	r6, r6
    8acc:	63 94       	inc	r6
    8ace:	71 2c       	mov	r7, r1
    8ad0:	05 c0       	rjmp	.+10     	; 0x8adc <strtol+0x36>
    8ad2:	2b 32       	cpi	r18, 0x2B	; 43
    8ad4:	09 f4       	brne	.+2      	; 0x8ad8 <strtol+0x32>
    8ad6:	ec 01       	movw	r28, r24
    8ad8:	61 2c       	mov	r6, r1
    8ada:	71 2c       	mov	r7, r1
    8adc:	9e 01       	movw	r18, r28
    8ade:	2f 5f       	subi	r18, 0xFF	; 255
    8ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ae2:	88 81       	ld	r24, Y
    8ae4:	80 33       	cpi	r24, 0x30	; 48
    8ae6:	11 f4       	brne	.+4      	; 0x8aec <strtol+0x46>
    8ae8:	e9 01       	movw	r28, r18
    8aea:	f8 cf       	rjmp	.-16     	; 0x8adc <strtol+0x36>
    8aec:	c1 2c       	mov	r12, r1
    8aee:	d1 2c       	mov	r13, r1
    8af0:	76 01       	movw	r14, r12
    8af2:	48 01       	movw	r8, r16
    8af4:	01 2e       	mov	r0, r17
    8af6:	00 0c       	add	r0, r0
    8af8:	aa 08       	sbc	r10, r10
    8afa:	bb 08       	sbc	r11, r11
    8afc:	3c 2e       	mov	r3, r28
    8afe:	2d 2e       	mov	r2, r29
    8b00:	89 91       	ld	r24, Y+
    8b02:	88 23       	and	r24, r24
    8b04:	31 f0       	breq	.+12     	; 0x8b12 <strtol+0x6c>
    8b06:	b8 01       	movw	r22, r16
    8b08:	90 e0       	ldi	r25, 0x00	; 0
    8b0a:	af df       	rcall	.-162    	; 0x8a6a <atodigit>
    8b0c:	fc 01       	movw	r30, r24
    8b0e:	97 ff       	sbrs	r25, 7
    8b10:	0c c0       	rjmp	.+24     	; 0x8b2a <strtol+0x84>
    8b12:	61 14       	cp	r6, r1
    8b14:	71 04       	cpc	r7, r1
    8b16:	c1 f0       	breq	.+48     	; 0x8b48 <strtol+0xa2>
    8b18:	f0 94       	com	r15
    8b1a:	e0 94       	com	r14
    8b1c:	d0 94       	com	r13
    8b1e:	c0 94       	com	r12
    8b20:	c1 1c       	adc	r12, r1
    8b22:	d1 1c       	adc	r13, r1
    8b24:	e1 1c       	adc	r14, r1
    8b26:	f1 1c       	adc	r15, r1
    8b28:	0f c0       	rjmp	.+30     	; 0x8b48 <strtol+0xa2>
    8b2a:	a5 01       	movw	r20, r10
    8b2c:	94 01       	movw	r18, r8
    8b2e:	c7 01       	movw	r24, r14
    8b30:	b6 01       	movw	r22, r12
    8b32:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
    8b36:	6f 01       	movw	r12, r30
    8b38:	ff 0f       	add	r31, r31
    8b3a:	ee 08       	sbc	r14, r14
    8b3c:	ff 08       	sbc	r15, r15
    8b3e:	c6 0e       	add	r12, r22
    8b40:	d7 1e       	adc	r13, r23
    8b42:	e8 1e       	adc	r14, r24
    8b44:	f9 1e       	adc	r15, r25
    8b46:	da cf       	rjmp	.-76     	; 0x8afc <strtol+0x56>
    8b48:	41 14       	cp	r4, r1
    8b4a:	51 04       	cpc	r5, r1
    8b4c:	19 f0       	breq	.+6      	; 0x8b54 <strtol+0xae>
    8b4e:	f2 01       	movw	r30, r4
    8b50:	30 82       	st	Z, r3
    8b52:	21 82       	std	Z+1, r2	; 0x01
    8b54:	c7 01       	movw	r24, r14
    8b56:	b6 01       	movw	r22, r12
    8b58:	cd b7       	in	r28, 0x3d	; 61
    8b5a:	de b7       	in	r29, 0x3e	; 62
    8b5c:	e2 e1       	ldi	r30, 0x12	; 18
    8b5e:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00008b62 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b62:	4a e0       	ldi	r20, 0x0A	; 10
    8b64:	50 e0       	ldi	r21, 0x00	; 0
    8b66:	60 e0       	ldi	r22, 0x00	; 0
    8b68:	70 e0       	ldi	r23, 0x00	; 0
    8b6a:	9d df       	rcall	.-198    	; 0x8aa6 <strtol>
    return((int)num);
}
    8b6c:	cb 01       	movw	r24, r22
    8b6e:	08 95       	ret

00008b70 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b70:	4a e0       	ldi	r20, 0x0A	; 10
    8b72:	50 e0       	ldi	r21, 0x00	; 0
    8b74:	60 e0       	ldi	r22, 0x00	; 0
    8b76:	70 e0       	ldi	r23, 0x00	; 0
    8b78:	96 cf       	rjmp	.-212    	; 0x8aa6 <strtol>
    return(num);
}
    8b7a:	08 95       	ret

00008b7c <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8b7c:	fc 01       	movw	r30, r24
    8b7e:	62 81       	ldd	r22, Z+2	; 0x02
    8b80:	73 81       	ldd	r23, Z+3	; 0x03
    8b82:	cb 01       	movw	r24, r22
    8b84:	a0 e0       	ldi	r26, 0x00	; 0
    8b86:	b0 e0       	ldi	r27, 0x00	; 0
    8b88:	ba 2f       	mov	r27, r26
    8b8a:	a9 2f       	mov	r26, r25
    8b8c:	98 2f       	mov	r25, r24
    8b8e:	88 27       	eor	r24, r24
    8b90:	21 81       	ldd	r18, Z+1	; 0x01
    8b92:	82 2b       	or	r24, r18
    8b94:	ba 2f       	mov	r27, r26
    8b96:	a9 2f       	mov	r26, r25
    8b98:	98 2f       	mov	r25, r24
    8b9a:	88 27       	eor	r24, r24
    8b9c:	20 81       	ld	r18, Z
    8b9e:	bc 01       	movw	r22, r24
    8ba0:	cd 01       	movw	r24, r26
    8ba2:	62 2b       	or	r22, r18
    8ba4:	08 95       	ret

00008ba6 <st_dword>:
    8ba6:	fc 01       	movw	r30, r24
    8ba8:	40 83       	st	Z, r20
    8baa:	51 83       	std	Z+1, r21	; 0x01
    8bac:	62 83       	std	Z+2, r22	; 0x02
    8bae:	73 83       	std	Z+3, r23	; 0x03
    8bb0:	08 95       	ret

00008bb2 <mem_set>:
    8bb2:	48 0f       	add	r20, r24
    8bb4:	59 1f       	adc	r21, r25
    8bb6:	fc 01       	movw	r30, r24
    8bb8:	61 93       	st	Z+, r22
    8bba:	cf 01       	movw	r24, r30
    8bbc:	e4 17       	cp	r30, r20
    8bbe:	f5 07       	cpc	r31, r21
    8bc0:	d1 f7       	brne	.-12     	; 0x8bb6 <mem_set+0x4>
    8bc2:	08 95       	ret

00008bc4 <mem_cmp>:
    8bc4:	dc 01       	movw	r26, r24
    8bc6:	fb 01       	movw	r30, r22
    8bc8:	2d 91       	ld	r18, X+
    8bca:	81 91       	ld	r24, Z+
    8bcc:	30 e0       	ldi	r19, 0x00	; 0
    8bce:	b9 01       	movw	r22, r18
    8bd0:	68 1b       	sub	r22, r24
    8bd2:	71 09       	sbc	r23, r1
    8bd4:	cb 01       	movw	r24, r22
    8bd6:	41 50       	subi	r20, 0x01	; 1
    8bd8:	51 09       	sbc	r21, r1
    8bda:	11 f0       	breq	.+4      	; 0x8be0 <mem_cmp+0x1c>
    8bdc:	00 97       	sbiw	r24, 0x00	; 0
    8bde:	a1 f3       	breq	.-24     	; 0x8bc8 <mem_cmp+0x4>
    8be0:	08 95       	ret

00008be2 <tchar2uni>:
    8be2:	0f 93       	push	r16
    8be4:	1f 93       	push	r17
    8be6:	fc 01       	movw	r30, r24
    8be8:	a0 81       	ld	r26, Z
    8bea:	b1 81       	ldd	r27, Z+1	; 0x01
    8bec:	fd 01       	movw	r30, r26
    8bee:	31 96       	adiw	r30, 0x01	; 1
    8bf0:	4c 91       	ld	r20, X
    8bf2:	47 fd       	sbrc	r20, 7
    8bf4:	04 c0       	rjmp	.+8      	; 0x8bfe <tchar2uni+0x1c>
    8bf6:	50 e0       	ldi	r21, 0x00	; 0
    8bf8:	60 e0       	ldi	r22, 0x00	; 0
    8bfa:	70 e0       	ldi	r23, 0x00	; 0
    8bfc:	68 c0       	rjmp	.+208    	; 0x8cce <tchar2uni+0xec>
    8bfe:	24 2f       	mov	r18, r20
    8c00:	20 7e       	andi	r18, 0xE0	; 224
    8c02:	20 3c       	cpi	r18, 0xC0	; 192
    8c04:	39 f4       	brne	.+14     	; 0x8c14 <tchar2uni+0x32>
    8c06:	4f 71       	andi	r20, 0x1F	; 31
    8c08:	50 e0       	ldi	r21, 0x00	; 0
    8c0a:	60 e0       	ldi	r22, 0x00	; 0
    8c0c:	70 e0       	ldi	r23, 0x00	; 0
    8c0e:	21 e0       	ldi	r18, 0x01	; 1
    8c10:	30 e0       	ldi	r19, 0x00	; 0
    8c12:	16 c0       	rjmp	.+44     	; 0x8c40 <tchar2uni+0x5e>
    8c14:	24 2f       	mov	r18, r20
    8c16:	20 7f       	andi	r18, 0xF0	; 240
    8c18:	20 3e       	cpi	r18, 0xE0	; 224
    8c1a:	39 f4       	brne	.+14     	; 0x8c2a <tchar2uni+0x48>
    8c1c:	4f 70       	andi	r20, 0x0F	; 15
    8c1e:	50 e0       	ldi	r21, 0x00	; 0
    8c20:	60 e0       	ldi	r22, 0x00	; 0
    8c22:	70 e0       	ldi	r23, 0x00	; 0
    8c24:	22 e0       	ldi	r18, 0x02	; 2
    8c26:	30 e0       	ldi	r19, 0x00	; 0
    8c28:	0b c0       	rjmp	.+22     	; 0x8c40 <tchar2uni+0x5e>
    8c2a:	24 2f       	mov	r18, r20
    8c2c:	28 7f       	andi	r18, 0xF8	; 248
    8c2e:	20 3f       	cpi	r18, 0xF0	; 240
    8c30:	09 f0       	breq	.+2      	; 0x8c34 <tchar2uni+0x52>
    8c32:	54 c0       	rjmp	.+168    	; 0x8cdc <tchar2uni+0xfa>
    8c34:	47 70       	andi	r20, 0x07	; 7
    8c36:	50 e0       	ldi	r21, 0x00	; 0
    8c38:	60 e0       	ldi	r22, 0x00	; 0
    8c3a:	70 e0       	ldi	r23, 0x00	; 0
    8c3c:	23 e0       	ldi	r18, 0x03	; 3
    8c3e:	30 e0       	ldi	r19, 0x00	; 0
    8c40:	31 96       	adiw	r30, 0x01	; 1
    8c42:	df 01       	movw	r26, r30
    8c44:	11 97       	sbiw	r26, 0x01	; 1
    8c46:	ac 91       	ld	r26, X
    8c48:	ba 2f       	mov	r27, r26
    8c4a:	b0 7c       	andi	r27, 0xC0	; 192
    8c4c:	b0 38       	cpi	r27, 0x80	; 128
    8c4e:	09 f0       	breq	.+2      	; 0x8c52 <tchar2uni+0x70>
    8c50:	45 c0       	rjmp	.+138    	; 0x8cdc <tchar2uni+0xfa>
    8c52:	b6 e0       	ldi	r27, 0x06	; 6
    8c54:	44 0f       	add	r20, r20
    8c56:	55 1f       	adc	r21, r21
    8c58:	66 1f       	adc	r22, r22
    8c5a:	77 1f       	adc	r23, r23
    8c5c:	ba 95       	dec	r27
    8c5e:	d1 f7       	brne	.-12     	; 0x8c54 <tchar2uni+0x72>
    8c60:	af 73       	andi	r26, 0x3F	; 63
    8c62:	4a 2b       	or	r20, r26
    8c64:	21 50       	subi	r18, 0x01	; 1
    8c66:	31 09       	sbc	r19, r1
    8c68:	59 f7       	brne	.-42     	; 0x8c40 <tchar2uni+0x5e>
    8c6a:	8a 01       	movw	r16, r20
    8c6c:	9b 01       	movw	r18, r22
    8c6e:	00 58       	subi	r16, 0x80	; 128
    8c70:	11 09       	sbc	r17, r1
    8c72:	21 09       	sbc	r18, r1
    8c74:	31 09       	sbc	r19, r1
    8c76:	00 38       	cpi	r16, 0x80	; 128
    8c78:	1f 4f       	sbci	r17, 0xFF	; 255
    8c7a:	20 41       	sbci	r18, 0x10	; 16
    8c7c:	31 05       	cpc	r19, r1
    8c7e:	70 f5       	brcc	.+92     	; 0x8cdc <tchar2uni+0xfa>
    8c80:	8a 01       	movw	r16, r20
    8c82:	9b 01       	movw	r18, r22
    8c84:	18 5d       	subi	r17, 0xD8	; 216
    8c86:	21 09       	sbc	r18, r1
    8c88:	31 09       	sbc	r19, r1
    8c8a:	01 15       	cp	r16, r1
    8c8c:	18 40       	sbci	r17, 0x08	; 8
    8c8e:	21 05       	cpc	r18, r1
    8c90:	31 05       	cpc	r19, r1
    8c92:	20 f1       	brcs	.+72     	; 0x8cdc <tchar2uni+0xfa>
    8c94:	41 15       	cp	r20, r1
    8c96:	51 05       	cpc	r21, r1
    8c98:	21 e0       	ldi	r18, 0x01	; 1
    8c9a:	62 07       	cpc	r22, r18
    8c9c:	71 05       	cpc	r23, r1
    8c9e:	b8 f0       	brcs	.+46     	; 0x8cce <tchar2uni+0xec>
    8ca0:	8a 01       	movw	r16, r20
    8ca2:	9b 01       	movw	r18, r22
    8ca4:	21 50       	subi	r18, 0x01	; 1
    8ca6:	31 09       	sbc	r19, r1
    8ca8:	a6 e0       	ldi	r26, 0x06	; 6
    8caa:	00 0f       	add	r16, r16
    8cac:	11 1f       	adc	r17, r17
    8cae:	22 1f       	adc	r18, r18
    8cb0:	33 1f       	adc	r19, r19
    8cb2:	aa 95       	dec	r26
    8cb4:	d1 f7       	brne	.-12     	; 0x8caa <tchar2uni+0xc8>
    8cb6:	00 27       	eor	r16, r16
    8cb8:	11 27       	eor	r17, r17
    8cba:	33 70       	andi	r19, 0x03	; 3
    8cbc:	53 70       	andi	r21, 0x03	; 3
    8cbe:	66 27       	eor	r22, r22
    8cc0:	77 27       	eor	r23, r23
    8cc2:	5c 6d       	ori	r21, 0xDC	; 220
    8cc4:	78 6d       	ori	r23, 0xD8	; 216
    8cc6:	40 2b       	or	r20, r16
    8cc8:	51 2b       	or	r21, r17
    8cca:	62 2b       	or	r22, r18
    8ccc:	73 2b       	or	r23, r19
    8cce:	dc 01       	movw	r26, r24
    8cd0:	ed 93       	st	X+, r30
    8cd2:	fc 93       	st	X, r31
    8cd4:	34 2f       	mov	r19, r20
    8cd6:	25 2f       	mov	r18, r21
    8cd8:	cb 01       	movw	r24, r22
    8cda:	04 c0       	rjmp	.+8      	; 0x8ce4 <tchar2uni+0x102>
    8cdc:	3f ef       	ldi	r19, 0xFF	; 255
    8cde:	2f ef       	ldi	r18, 0xFF	; 255
    8ce0:	8f ef       	ldi	r24, 0xFF	; 255
    8ce2:	9f ef       	ldi	r25, 0xFF	; 255
    8ce4:	63 2f       	mov	r22, r19
    8ce6:	72 2f       	mov	r23, r18
    8ce8:	1f 91       	pop	r17
    8cea:	0f 91       	pop	r16
    8cec:	08 95       	ret

00008cee <clst2sect>:
    8cee:	0f 93       	push	r16
    8cf0:	1f 93       	push	r17
    8cf2:	fc 01       	movw	r30, r24
    8cf4:	9a 01       	movw	r18, r20
    8cf6:	ab 01       	movw	r20, r22
    8cf8:	22 50       	subi	r18, 0x02	; 2
    8cfa:	31 09       	sbc	r19, r1
    8cfc:	41 09       	sbc	r20, r1
    8cfe:	51 09       	sbc	r21, r1
    8d00:	81 8d       	ldd	r24, Z+25	; 0x19
    8d02:	92 8d       	ldd	r25, Z+26	; 0x1a
    8d04:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8d06:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8d08:	02 97       	sbiw	r24, 0x02	; 2
    8d0a:	a1 09       	sbc	r26, r1
    8d0c:	b1 09       	sbc	r27, r1
    8d0e:	28 17       	cp	r18, r24
    8d10:	39 07       	cpc	r19, r25
    8d12:	4a 07       	cpc	r20, r26
    8d14:	5b 07       	cpc	r21, r27
    8d16:	68 f4       	brcc	.+26     	; 0x8d32 <clst2sect+0x44>
    8d18:	a1 85       	ldd	r26, Z+9	; 0x09
    8d1a:	b2 85       	ldd	r27, Z+10	; 0x0a
    8d1c:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    8d20:	05 a5       	ldd	r16, Z+45	; 0x2d
    8d22:	16 a5       	ldd	r17, Z+46	; 0x2e
    8d24:	27 a5       	ldd	r18, Z+47	; 0x2f
    8d26:	30 a9       	ldd	r19, Z+48	; 0x30
    8d28:	60 0f       	add	r22, r16
    8d2a:	71 1f       	adc	r23, r17
    8d2c:	82 1f       	adc	r24, r18
    8d2e:	93 1f       	adc	r25, r19
    8d30:	03 c0       	rjmp	.+6      	; 0x8d38 <clst2sect+0x4a>
    8d32:	60 e0       	ldi	r22, 0x00	; 0
    8d34:	70 e0       	ldi	r23, 0x00	; 0
    8d36:	cb 01       	movw	r24, r22
    8d38:	1f 91       	pop	r17
    8d3a:	0f 91       	pop	r16
    8d3c:	08 95       	ret

00008d3e <clmt_clust>:
    8d3e:	cf 93       	push	r28
    8d40:	df 93       	push	r29
    8d42:	fc 01       	movw	r30, r24
    8d44:	c2 a1       	ldd	r28, Z+34	; 0x22
    8d46:	d3 a1       	ldd	r29, Z+35	; 0x23
    8d48:	24 96       	adiw	r28, 0x04	; 4
    8d4a:	cb 01       	movw	r24, r22
    8d4c:	ba 01       	movw	r22, r20
    8d4e:	29 e0       	ldi	r18, 0x09	; 9
    8d50:	96 95       	lsr	r25
    8d52:	87 95       	ror	r24
    8d54:	77 95       	ror	r23
    8d56:	67 95       	ror	r22
    8d58:	2a 95       	dec	r18
    8d5a:	d1 f7       	brne	.-12     	; 0x8d50 <clmt_clust+0x12>
    8d5c:	01 90       	ld	r0, Z+
    8d5e:	f0 81       	ld	r31, Z
    8d60:	e0 2d       	mov	r30, r0
    8d62:	21 85       	ldd	r18, Z+9	; 0x09
    8d64:	32 85       	ldd	r19, Z+10	; 0x0a
    8d66:	40 e0       	ldi	r20, 0x00	; 0
    8d68:	50 e0       	ldi	r21, 0x00	; 0
    8d6a:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    8d6e:	88 81       	ld	r24, Y
    8d70:	99 81       	ldd	r25, Y+1	; 0x01
    8d72:	aa 81       	ldd	r26, Y+2	; 0x02
    8d74:	bb 81       	ldd	r27, Y+3	; 0x03
    8d76:	00 97       	sbiw	r24, 0x00	; 0
    8d78:	a1 05       	cpc	r26, r1
    8d7a:	b1 05       	cpc	r27, r1
    8d7c:	b1 f0       	breq	.+44     	; 0x8daa <clmt_clust+0x6c>
    8d7e:	28 17       	cp	r18, r24
    8d80:	39 07       	cpc	r19, r25
    8d82:	4a 07       	cpc	r20, r26
    8d84:	5b 07       	cpc	r21, r27
    8d86:	30 f0       	brcs	.+12     	; 0x8d94 <clmt_clust+0x56>
    8d88:	28 1b       	sub	r18, r24
    8d8a:	39 0b       	sbc	r19, r25
    8d8c:	4a 0b       	sbc	r20, r26
    8d8e:	5b 0b       	sbc	r21, r27
    8d90:	28 96       	adiw	r28, 0x08	; 8
    8d92:	ed cf       	rjmp	.-38     	; 0x8d6e <clmt_clust+0x30>
    8d94:	8c 81       	ldd	r24, Y+4	; 0x04
    8d96:	9d 81       	ldd	r25, Y+5	; 0x05
    8d98:	ae 81       	ldd	r26, Y+6	; 0x06
    8d9a:	bf 81       	ldd	r27, Y+7	; 0x07
    8d9c:	bc 01       	movw	r22, r24
    8d9e:	cd 01       	movw	r24, r26
    8da0:	62 0f       	add	r22, r18
    8da2:	73 1f       	adc	r23, r19
    8da4:	84 1f       	adc	r24, r20
    8da6:	95 1f       	adc	r25, r21
    8da8:	03 c0       	rjmp	.+6      	; 0x8db0 <clmt_clust+0x72>
    8daa:	60 e0       	ldi	r22, 0x00	; 0
    8dac:	70 e0       	ldi	r23, 0x00	; 0
    8dae:	cb 01       	movw	r24, r22
    8db0:	df 91       	pop	r29
    8db2:	cf 91       	pop	r28
    8db4:	08 95       	ret

00008db6 <sum_sfn>:
    8db6:	fc 01       	movw	r30, r24
    8db8:	9c 01       	movw	r18, r24
    8dba:	25 5f       	subi	r18, 0xF5	; 245
    8dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    8dbe:	80 e0       	ldi	r24, 0x00	; 0
    8dc0:	98 2f       	mov	r25, r24
    8dc2:	90 fb       	bst	r25, 0
    8dc4:	97 95       	ror	r25
    8dc6:	97 f9       	bld	r25, 7
    8dc8:	81 91       	ld	r24, Z+
    8dca:	89 0f       	add	r24, r25
    8dcc:	e2 17       	cp	r30, r18
    8dce:	f3 07       	cpc	r31, r19
    8dd0:	b9 f7       	brne	.-18     	; 0x8dc0 <sum_sfn+0xa>
    8dd2:	08 95       	ret

00008dd4 <get_ldnumber>:
    8dd4:	cf 93       	push	r28
    8dd6:	df 93       	push	r29
    8dd8:	dc 01       	movw	r26, r24
    8dda:	ed 91       	ld	r30, X+
    8ddc:	fc 91       	ld	r31, X
    8dde:	11 97       	sbiw	r26, 0x01	; 1
    8de0:	30 97       	sbiw	r30, 0x00	; 0
    8de2:	f9 f0       	breq	.+62     	; 0x8e22 <get_ldnumber+0x4e>
    8de4:	9f 01       	movw	r18, r30
    8de6:	2f 5f       	subi	r18, 0xFF	; 255
    8de8:	3f 4f       	sbci	r19, 0xFF	; 255
    8dea:	e9 01       	movw	r28, r18
    8dec:	21 97       	sbiw	r28, 0x01	; 1
    8dee:	88 81       	ld	r24, Y
    8df0:	80 32       	cpi	r24, 0x20	; 32
    8df2:	18 f0       	brcs	.+6      	; 0x8dfa <get_ldnumber+0x26>
    8df4:	8a 33       	cpi	r24, 0x3A	; 58
    8df6:	b9 f7       	brne	.-18     	; 0x8de6 <get_ldnumber+0x12>
    8df8:	04 c0       	rjmp	.+8      	; 0x8e02 <get_ldnumber+0x2e>
    8dfa:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <CurrVol>
    8dfe:	90 e0       	ldi	r25, 0x00	; 0
    8e00:	12 c0       	rjmp	.+36     	; 0x8e26 <get_ldnumber+0x52>
    8e02:	90 81       	ld	r25, Z
    8e04:	80 ed       	ldi	r24, 0xD0	; 208
    8e06:	89 0f       	add	r24, r25
    8e08:	8a 30       	cpi	r24, 0x0A	; 10
    8e0a:	58 f4       	brcc	.+22     	; 0x8e22 <get_ldnumber+0x4e>
    8e0c:	32 96       	adiw	r30, 0x02	; 2
    8e0e:	2e 17       	cp	r18, r30
    8e10:	3f 07       	cpc	r19, r31
    8e12:	39 f4       	brne	.+14     	; 0x8e22 <get_ldnumber+0x4e>
    8e14:	90 33       	cpi	r25, 0x30	; 48
    8e16:	29 f4       	brne	.+10     	; 0x8e22 <get_ldnumber+0x4e>
    8e18:	2d 93       	st	X+, r18
    8e1a:	3c 93       	st	X, r19
    8e1c:	80 e0       	ldi	r24, 0x00	; 0
    8e1e:	90 e0       	ldi	r25, 0x00	; 0
    8e20:	02 c0       	rjmp	.+4      	; 0x8e26 <get_ldnumber+0x52>
    8e22:	8f ef       	ldi	r24, 0xFF	; 255
    8e24:	9f ef       	ldi	r25, 0xFF	; 255
    8e26:	df 91       	pop	r29
    8e28:	cf 91       	pop	r28
    8e2a:	08 95       	ret

00008e2c <validate>:
    8e2c:	0f 93       	push	r16
    8e2e:	1f 93       	push	r17
    8e30:	cf 93       	push	r28
    8e32:	df 93       	push	r29
    8e34:	ec 01       	movw	r28, r24
    8e36:	8b 01       	movw	r16, r22
    8e38:	89 2b       	or	r24, r25
    8e3a:	f9 f0       	breq	.+62     	; 0x8e7a <validate+0x4e>
    8e3c:	e8 81       	ld	r30, Y
    8e3e:	f9 81       	ldd	r31, Y+1	; 0x01
    8e40:	30 97       	sbiw	r30, 0x00	; 0
    8e42:	d9 f0       	breq	.+54     	; 0x8e7a <validate+0x4e>
    8e44:	80 81       	ld	r24, Z
    8e46:	88 23       	and	r24, r24
    8e48:	c1 f0       	breq	.+48     	; 0x8e7a <validate+0x4e>
    8e4a:	2a 81       	ldd	r18, Y+2	; 0x02
    8e4c:	3b 81       	ldd	r19, Y+3	; 0x03
    8e4e:	85 81       	ldd	r24, Z+5	; 0x05
    8e50:	96 81       	ldd	r25, Z+6	; 0x06
    8e52:	28 17       	cp	r18, r24
    8e54:	39 07       	cpc	r19, r25
    8e56:	89 f4       	brne	.+34     	; 0x8e7a <validate+0x4e>
    8e58:	81 81       	ldd	r24, Z+1	; 0x01
    8e5a:	0e 94 d6 68 	call	0xd1ac	; 0xd1ac <disk_status>
    8e5e:	80 fd       	sbrc	r24, 0
    8e60:	0c c0       	rjmp	.+24     	; 0x8e7a <validate+0x4e>
    8e62:	28 81       	ld	r18, Y
    8e64:	39 81       	ldd	r19, Y+1	; 0x01
    8e66:	80 e0       	ldi	r24, 0x00	; 0
    8e68:	90 e0       	ldi	r25, 0x00	; 0
    8e6a:	f8 01       	movw	r30, r16
    8e6c:	31 83       	std	Z+1, r19	; 0x01
    8e6e:	20 83       	st	Z, r18
    8e70:	df 91       	pop	r29
    8e72:	cf 91       	pop	r28
    8e74:	1f 91       	pop	r17
    8e76:	0f 91       	pop	r16
    8e78:	08 95       	ret
    8e7a:	89 e0       	ldi	r24, 0x09	; 9
    8e7c:	90 e0       	ldi	r25, 0x00	; 0
    8e7e:	20 e0       	ldi	r18, 0x00	; 0
    8e80:	30 e0       	ldi	r19, 0x00	; 0
    8e82:	f3 cf       	rjmp	.-26     	; 0x8e6a <validate+0x3e>

00008e84 <mem_cpy.part.0>:
    8e84:	fb 01       	movw	r30, r22
    8e86:	48 0f       	add	r20, r24
    8e88:	59 1f       	adc	r21, r25
    8e8a:	21 91       	ld	r18, Z+
    8e8c:	dc 01       	movw	r26, r24
    8e8e:	2d 93       	st	X+, r18
    8e90:	cd 01       	movw	r24, r26
    8e92:	a4 17       	cp	r26, r20
    8e94:	b5 07       	cpc	r27, r21
    8e96:	c9 f7       	brne	.-14     	; 0x8e8a <mem_cpy.part.0+0x6>
    8e98:	08 95       	ret

00008e9a <put_utf>:
    8e9a:	0f 93       	push	r16
    8e9c:	1f 93       	push	r17
    8e9e:	fa 01       	movw	r30, r20
    8ea0:	60 38       	cpi	r22, 0x80	; 128
    8ea2:	71 05       	cpc	r23, r1
    8ea4:	81 05       	cpc	r24, r1
    8ea6:	91 05       	cpc	r25, r1
    8ea8:	30 f4       	brcc	.+12     	; 0x8eb6 <put_utf+0x1c>
    8eaa:	23 2b       	or	r18, r19
    8eac:	09 f4       	brne	.+2      	; 0x8eb0 <put_utf+0x16>
    8eae:	9e c0       	rjmp	.+316    	; 0x8fec <put_utf+0x152>
    8eb0:	60 83       	st	Z, r22
    8eb2:	81 e0       	ldi	r24, 0x01	; 1
    8eb4:	9c c0       	rjmp	.+312    	; 0x8fee <put_utf+0x154>
    8eb6:	61 15       	cp	r22, r1
    8eb8:	48 e0       	ldi	r20, 0x08	; 8
    8eba:	74 07       	cpc	r23, r20
    8ebc:	81 05       	cpc	r24, r1
    8ebe:	91 05       	cpc	r25, r1
    8ec0:	a0 f4       	brcc	.+40     	; 0x8eea <put_utf+0x50>
    8ec2:	22 30       	cpi	r18, 0x02	; 2
    8ec4:	31 05       	cpc	r19, r1
    8ec6:	08 f4       	brcc	.+2      	; 0x8eca <put_utf+0x30>
    8ec8:	91 c0       	rjmp	.+290    	; 0x8fec <put_utf+0x152>
    8eca:	8b 01       	movw	r16, r22
    8ecc:	9c 01       	movw	r18, r24
    8ece:	76 e0       	ldi	r23, 0x06	; 6
    8ed0:	36 95       	lsr	r19
    8ed2:	27 95       	ror	r18
    8ed4:	17 95       	ror	r17
    8ed6:	07 95       	ror	r16
    8ed8:	7a 95       	dec	r23
    8eda:	d1 f7       	brne	.-12     	; 0x8ed0 <put_utf+0x36>
    8edc:	00 6c       	ori	r16, 0xC0	; 192
    8ede:	00 83       	st	Z, r16
    8ee0:	6f 73       	andi	r22, 0x3F	; 63
    8ee2:	60 68       	ori	r22, 0x80	; 128
    8ee4:	61 83       	std	Z+1, r22	; 0x01
    8ee6:	82 e0       	ldi	r24, 0x02	; 2
    8ee8:	82 c0       	rjmp	.+260    	; 0x8fee <put_utf+0x154>
    8eea:	61 15       	cp	r22, r1
    8eec:	71 05       	cpc	r23, r1
    8eee:	41 e0       	ldi	r20, 0x01	; 1
    8ef0:	84 07       	cpc	r24, r20
    8ef2:	91 05       	cpc	r25, r1
    8ef4:	58 f5       	brcc	.+86     	; 0x8f4c <put_utf+0xb2>
    8ef6:	23 30       	cpi	r18, 0x03	; 3
    8ef8:	31 05       	cpc	r19, r1
    8efa:	08 f4       	brcc	.+2      	; 0x8efe <put_utf+0x64>
    8efc:	77 c0       	rjmp	.+238    	; 0x8fec <put_utf+0x152>
    8efe:	8b 01       	movw	r16, r22
    8f00:	9c 01       	movw	r18, r24
    8f02:	18 5d       	subi	r17, 0xD8	; 216
    8f04:	21 09       	sbc	r18, r1
    8f06:	31 09       	sbc	r19, r1
    8f08:	01 15       	cp	r16, r1
    8f0a:	18 40       	sbci	r17, 0x08	; 8
    8f0c:	21 05       	cpc	r18, r1
    8f0e:	31 05       	cpc	r19, r1
    8f10:	08 f4       	brcc	.+2      	; 0x8f14 <put_utf+0x7a>
    8f12:	6c c0       	rjmp	.+216    	; 0x8fec <put_utf+0x152>
    8f14:	8b 01       	movw	r16, r22
    8f16:	9c 01       	movw	r18, r24
    8f18:	4c e0       	ldi	r20, 0x0C	; 12
    8f1a:	36 95       	lsr	r19
    8f1c:	27 95       	ror	r18
    8f1e:	17 95       	ror	r17
    8f20:	07 95       	ror	r16
    8f22:	4a 95       	dec	r20
    8f24:	d1 f7       	brne	.-12     	; 0x8f1a <put_utf+0x80>
    8f26:	00 6e       	ori	r16, 0xE0	; 224
    8f28:	00 83       	st	Z, r16
    8f2a:	8b 01       	movw	r16, r22
    8f2c:	9c 01       	movw	r18, r24
    8f2e:	56 e0       	ldi	r21, 0x06	; 6
    8f30:	36 95       	lsr	r19
    8f32:	27 95       	ror	r18
    8f34:	17 95       	ror	r17
    8f36:	07 95       	ror	r16
    8f38:	5a 95       	dec	r21
    8f3a:	d1 f7       	brne	.-12     	; 0x8f30 <put_utf+0x96>
    8f3c:	0f 73       	andi	r16, 0x3F	; 63
    8f3e:	00 68       	ori	r16, 0x80	; 128
    8f40:	01 83       	std	Z+1, r16	; 0x01
    8f42:	6f 73       	andi	r22, 0x3F	; 63
    8f44:	60 68       	ori	r22, 0x80	; 128
    8f46:	62 83       	std	Z+2, r22	; 0x02
    8f48:	83 e0       	ldi	r24, 0x03	; 3
    8f4a:	51 c0       	rjmp	.+162    	; 0x8fee <put_utf+0x154>
    8f4c:	24 30       	cpi	r18, 0x04	; 4
    8f4e:	31 05       	cpc	r19, r1
    8f50:	08 f4       	brcc	.+2      	; 0x8f54 <put_utf+0xba>
    8f52:	4c c0       	rjmp	.+152    	; 0x8fec <put_utf+0x152>
    8f54:	8b 01       	movw	r16, r22
    8f56:	9c 01       	movw	r18, r24
    8f58:	00 27       	eor	r16, r16
    8f5a:	11 27       	eor	r17, r17
    8f5c:	38 5d       	subi	r19, 0xD8	; 216
    8f5e:	b6 e0       	ldi	r27, 0x06	; 6
    8f60:	36 95       	lsr	r19
    8f62:	27 95       	ror	r18
    8f64:	17 95       	ror	r17
    8f66:	07 95       	ror	r16
    8f68:	ba 95       	dec	r27
    8f6a:	d1 f7       	brne	.-12     	; 0x8f60 <put_utf+0xc6>
    8f6c:	01 15       	cp	r16, r1
    8f6e:	11 05       	cpc	r17, r1
    8f70:	40 e1       	ldi	r20, 0x10	; 16
    8f72:	24 07       	cpc	r18, r20
    8f74:	31 05       	cpc	r19, r1
    8f76:	d0 f5       	brcc	.+116    	; 0x8fec <put_utf+0x152>
    8f78:	dc 01       	movw	r26, r24
    8f7a:	cb 01       	movw	r24, r22
    8f7c:	aa 27       	eor	r26, r26
    8f7e:	bb 27       	eor	r27, r27
    8f80:	9c 5d       	subi	r25, 0xDC	; 220
    8f82:	a1 09       	sbc	r26, r1
    8f84:	b1 09       	sbc	r27, r1
    8f86:	81 15       	cp	r24, r1
    8f88:	44 e0       	ldi	r20, 0x04	; 4
    8f8a:	94 07       	cpc	r25, r20
    8f8c:	a1 05       	cpc	r26, r1
    8f8e:	b1 05       	cpc	r27, r1
    8f90:	68 f5       	brcc	.+90     	; 0x8fec <put_utf+0x152>
    8f92:	80 2b       	or	r24, r16
    8f94:	91 2b       	or	r25, r17
    8f96:	a2 2b       	or	r26, r18
    8f98:	b3 2b       	or	r27, r19
    8f9a:	11 96       	adiw	r26, 0x01	; 1
    8f9c:	ac 01       	movw	r20, r24
    8f9e:	bd 01       	movw	r22, r26
    8fa0:	22 e1       	ldi	r18, 0x12	; 18
    8fa2:	76 95       	lsr	r23
    8fa4:	67 95       	ror	r22
    8fa6:	57 95       	ror	r21
    8fa8:	47 95       	ror	r20
    8faa:	2a 95       	dec	r18
    8fac:	d1 f7       	brne	.-12     	; 0x8fa2 <put_utf+0x108>
    8fae:	40 6f       	ori	r20, 0xF0	; 240
    8fb0:	40 83       	st	Z, r20
    8fb2:	ac 01       	movw	r20, r24
    8fb4:	bd 01       	movw	r22, r26
    8fb6:	3c e0       	ldi	r19, 0x0C	; 12
    8fb8:	76 95       	lsr	r23
    8fba:	67 95       	ror	r22
    8fbc:	57 95       	ror	r21
    8fbe:	47 95       	ror	r20
    8fc0:	3a 95       	dec	r19
    8fc2:	d1 f7       	brne	.-12     	; 0x8fb8 <put_utf+0x11e>
    8fc4:	4f 73       	andi	r20, 0x3F	; 63
    8fc6:	40 68       	ori	r20, 0x80	; 128
    8fc8:	41 83       	std	Z+1, r20	; 0x01
    8fca:	ac 01       	movw	r20, r24
    8fcc:	bd 01       	movw	r22, r26
    8fce:	a6 e0       	ldi	r26, 0x06	; 6
    8fd0:	76 95       	lsr	r23
    8fd2:	67 95       	ror	r22
    8fd4:	57 95       	ror	r21
    8fd6:	47 95       	ror	r20
    8fd8:	aa 95       	dec	r26
    8fda:	d1 f7       	brne	.-12     	; 0x8fd0 <put_utf+0x136>
    8fdc:	4f 73       	andi	r20, 0x3F	; 63
    8fde:	40 68       	ori	r20, 0x80	; 128
    8fe0:	42 83       	std	Z+2, r20	; 0x02
    8fe2:	8f 73       	andi	r24, 0x3F	; 63
    8fe4:	80 68       	ori	r24, 0x80	; 128
    8fe6:	83 83       	std	Z+3, r24	; 0x03
    8fe8:	84 e0       	ldi	r24, 0x04	; 4
    8fea:	01 c0       	rjmp	.+2      	; 0x8fee <put_utf+0x154>
    8fec:	80 e0       	ldi	r24, 0x00	; 0
    8fee:	1f 91       	pop	r17
    8ff0:	0f 91       	pop	r16
    8ff2:	08 95       	ret

00008ff4 <get_fileinfo>:
    8ff4:	a0 e0       	ldi	r26, 0x00	; 0
    8ff6:	b0 e0       	ldi	r27, 0x00	; 0
    8ff8:	e0 e0       	ldi	r30, 0x00	; 0
    8ffa:	f8 e4       	ldi	r31, 0x48	; 72
    8ffc:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    9000:	fc 01       	movw	r30, r24
    9002:	60 80       	ld	r6, Z
    9004:	71 80       	ldd	r7, Z+1	; 0x01
    9006:	fb 01       	movw	r30, r22
    9008:	16 8a       	std	Z+22, r1	; 0x16
    900a:	fc 01       	movw	r30, r24
    900c:	06 89       	ldd	r16, Z+22	; 0x16
    900e:	17 89       	ldd	r17, Z+23	; 0x17
    9010:	20 8d       	ldd	r18, Z+24	; 0x18
    9012:	31 8d       	ldd	r19, Z+25	; 0x19
    9014:	01 15       	cp	r16, r1
    9016:	11 05       	cpc	r17, r1
    9018:	21 05       	cpc	r18, r1
    901a:	31 05       	cpc	r19, r1
    901c:	09 f4       	brne	.+2      	; 0x9020 <get_fileinfo+0x2c>
    901e:	f5 c0       	rjmp	.+490    	; 0x920a <get_fileinfo+0x216>
    9020:	eb 01       	movw	r28, r22
    9022:	8c 01       	movw	r16, r24
    9024:	80 a5       	ldd	r24, Z+40	; 0x28
    9026:	91 a5       	ldd	r25, Z+41	; 0x29
    9028:	a2 a5       	ldd	r26, Z+42	; 0x2a
    902a:	b3 a5       	ldd	r27, Z+43	; 0x2b
    902c:	8f 3f       	cpi	r24, 0xFF	; 255
    902e:	9f 4f       	sbci	r25, 0xFF	; 255
    9030:	af 4f       	sbci	r26, 0xFF	; 255
    9032:	bf 4f       	sbci	r27, 0xFF	; 255
    9034:	09 f4       	brne	.+2      	; 0x9038 <get_fileinfo+0x44>
    9036:	48 c0       	rjmp	.+144    	; 0x90c8 <get_fileinfo+0xd4>
    9038:	a1 2c       	mov	r10, r1
    903a:	b1 2c       	mov	r11, r1
    903c:	c1 2c       	mov	r12, r1
    903e:	d1 2c       	mov	r13, r1
    9040:	e1 2c       	mov	r14, r1
    9042:	f1 2c       	mov	r15, r1
    9044:	88 24       	eor	r8, r8
    9046:	8a 94       	dec	r8
    9048:	91 2c       	mov	r9, r1
    904a:	f3 01       	movw	r30, r6
    904c:	83 85       	ldd	r24, Z+11	; 0x0b
    904e:	94 85       	ldd	r25, Z+12	; 0x0c
    9050:	fc 01       	movw	r30, r24
    9052:	ea 0d       	add	r30, r10
    9054:	fb 1d       	adc	r31, r11
    9056:	80 81       	ld	r24, Z
    9058:	91 81       	ldd	r25, Z+1	; 0x01
    905a:	00 97       	sbiw	r24, 0x00	; 0
    905c:	69 f1       	breq	.+90     	; 0x90b8 <get_fileinfo+0xc4>
    905e:	c1 14       	cp	r12, r1
    9060:	d1 04       	cpc	r13, r1
    9062:	29 f4       	brne	.+10     	; 0x906e <get_fileinfo+0x7a>
    9064:	9c 01       	movw	r18, r24
    9066:	38 5d       	subi	r19, 0xD8	; 216
    9068:	21 15       	cp	r18, r1
    906a:	38 40       	sbci	r19, 0x08	; 8
    906c:	f0 f0       	brcs	.+60     	; 0x90aa <get_fileinfo+0xb6>
    906e:	a7 01       	movw	r20, r14
    9070:	4a 5e       	subi	r20, 0xEA	; 234
    9072:	5f 4f       	sbci	r21, 0xFF	; 255
    9074:	4c 0f       	add	r20, r28
    9076:	5d 1f       	adc	r21, r29
    9078:	16 01       	movw	r2, r12
    907a:	41 2c       	mov	r4, r1
    907c:	51 2c       	mov	r5, r1
    907e:	21 01       	movw	r4, r2
    9080:	33 24       	eor	r3, r3
    9082:	22 24       	eor	r2, r2
    9084:	a0 e0       	ldi	r26, 0x00	; 0
    9086:	b0 e0       	ldi	r27, 0x00	; 0
    9088:	bc 01       	movw	r22, r24
    908a:	cd 01       	movw	r24, r26
    908c:	62 29       	or	r22, r2
    908e:	73 29       	or	r23, r3
    9090:	84 29       	or	r24, r4
    9092:	95 29       	or	r25, r5
    9094:	94 01       	movw	r18, r8
    9096:	2e 19       	sub	r18, r14
    9098:	3f 09       	sbc	r19, r15
    909a:	ff de       	rcall	.-514    	; 0x8e9a <put_utf>
    909c:	90 e0       	ldi	r25, 0x00	; 0
    909e:	00 97       	sbiw	r24, 0x00	; 0
    90a0:	49 f0       	breq	.+18     	; 0x90b4 <get_fileinfo+0xc0>
    90a2:	e8 0e       	add	r14, r24
    90a4:	f9 1e       	adc	r15, r25
    90a6:	80 e0       	ldi	r24, 0x00	; 0
    90a8:	90 e0       	ldi	r25, 0x00	; 0
    90aa:	e2 e0       	ldi	r30, 0x02	; 2
    90ac:	ae 0e       	add	r10, r30
    90ae:	b1 1c       	adc	r11, r1
    90b0:	6c 01       	movw	r12, r24
    90b2:	cb cf       	rjmp	.-106    	; 0x904a <get_fileinfo+0x56>
    90b4:	e1 2c       	mov	r14, r1
    90b6:	f1 2c       	mov	r15, r1
    90b8:	cd 28       	or	r12, r13
    90ba:	11 f0       	breq	.+4      	; 0x90c0 <get_fileinfo+0xcc>
    90bc:	e1 2c       	mov	r14, r1
    90be:	f1 2c       	mov	r15, r1
    90c0:	fe 01       	movw	r30, r28
    90c2:	ee 0d       	add	r30, r14
    90c4:	ff 1d       	adc	r31, r15
    90c6:	16 8a       	std	Z+22, r1	; 0x16
    90c8:	e1 2c       	mov	r14, r1
    90ca:	f1 2c       	mov	r15, r1
    90cc:	80 e0       	ldi	r24, 0x00	; 0
    90ce:	90 e0       	ldi	r25, 0x00	; 0
    90d0:	2c e0       	ldi	r18, 0x0C	; 12
    90d2:	a2 2e       	mov	r10, r18
    90d4:	b1 2c       	mov	r11, r1
    90d6:	3e e2       	ldi	r19, 0x2E	; 46
    90d8:	93 2e       	mov	r9, r19
    90da:	6c 01       	movw	r12, r24
    90dc:	ff ef       	ldi	r31, 0xFF	; 255
    90de:	cf 1a       	sub	r12, r31
    90e0:	df 0a       	sbc	r13, r31
    90e2:	f8 01       	movw	r30, r16
    90e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    90e6:	33 8d       	ldd	r19, Z+27	; 0x1b
    90e8:	f9 01       	movw	r30, r18
    90ea:	e8 0f       	add	r30, r24
    90ec:	f9 1f       	adc	r31, r25
    90ee:	80 81       	ld	r24, Z
    90f0:	90 e0       	ldi	r25, 0x00	; 0
    90f2:	80 32       	cpi	r24, 0x20	; 32
    90f4:	91 05       	cpc	r25, r1
    90f6:	71 f1       	breq	.+92     	; 0x9154 <get_fileinfo+0x160>
    90f8:	85 30       	cpi	r24, 0x05	; 5
    90fa:	91 05       	cpc	r25, r1
    90fc:	11 f4       	brne	.+4      	; 0x9102 <get_fileinfo+0x10e>
    90fe:	85 ee       	ldi	r24, 0xE5	; 229
    9100:	90 e0       	ldi	r25, 0x00	; 0
    9102:	f9 e0       	ldi	r31, 0x09	; 9
    9104:	cf 16       	cp	r12, r31
    9106:	d1 04       	cpc	r13, r1
    9108:	59 f4       	brne	.+22     	; 0x9120 <get_fileinfo+0x12c>
    910a:	2c e0       	ldi	r18, 0x0C	; 12
    910c:	e2 16       	cp	r14, r18
    910e:	f1 04       	cpc	r15, r1
    9110:	38 f4       	brcc	.+14     	; 0x9120 <get_fileinfo+0x12c>
    9112:	fe 01       	movw	r30, r28
    9114:	ee 0d       	add	r30, r14
    9116:	ff 1d       	adc	r31, r15
    9118:	91 86       	std	Z+9, r9	; 0x09
    911a:	f7 01       	movw	r30, r14
    911c:	31 96       	adiw	r30, 0x01	; 1
    911e:	7f 01       	movw	r14, r30
    9120:	65 eb       	ldi	r22, 0xB5	; 181
    9122:	71 e0       	ldi	r23, 0x01	; 1
    9124:	0e 94 5f 68 	call	0xd0be	; 0xd0be <ff_oem2uni>
    9128:	00 97       	sbiw	r24, 0x00	; 0
    912a:	19 f4       	brne	.+6      	; 0x9132 <get_fileinfo+0x13e>
    912c:	e1 2c       	mov	r14, r1
    912e:	f1 2c       	mov	r15, r1
    9130:	16 c0       	rjmp	.+44     	; 0x915e <get_fileinfo+0x16a>
    9132:	a7 01       	movw	r20, r14
    9134:	47 5f       	subi	r20, 0xF7	; 247
    9136:	5f 4f       	sbci	r21, 0xFF	; 255
    9138:	4c 0f       	add	r20, r28
    913a:	5d 1f       	adc	r21, r29
    913c:	bc 01       	movw	r22, r24
    913e:	80 e0       	ldi	r24, 0x00	; 0
    9140:	90 e0       	ldi	r25, 0x00	; 0
    9142:	95 01       	movw	r18, r10
    9144:	2e 19       	sub	r18, r14
    9146:	3f 09       	sbc	r19, r15
    9148:	a8 de       	rcall	.-688    	; 0x8e9a <put_utf>
    914a:	90 e0       	ldi	r25, 0x00	; 0
    914c:	00 97       	sbiw	r24, 0x00	; 0
    914e:	71 f3       	breq	.-36     	; 0x912c <get_fileinfo+0x138>
    9150:	e8 0e       	add	r14, r24
    9152:	f9 1e       	adc	r15, r25
    9154:	c6 01       	movw	r24, r12
    9156:	8b 30       	cpi	r24, 0x0B	; 11
    9158:	91 05       	cpc	r25, r1
    915a:	09 f0       	breq	.+2      	; 0x915e <get_fileinfo+0x16a>
    915c:	be cf       	rjmp	.-132    	; 0x90da <get_fileinfo+0xe6>
    915e:	fe 01       	movw	r30, r28
    9160:	ee 0d       	add	r30, r14
    9162:	ff 1d       	adc	r31, r15
    9164:	11 86       	std	Z+9, r1	; 0x09
    9166:	8e 89       	ldd	r24, Y+22	; 0x16
    9168:	81 11       	cpse	r24, r1
    916a:	36 c0       	rjmp	.+108    	; 0x91d8 <get_fileinfo+0x1e4>
    916c:	e1 14       	cp	r14, r1
    916e:	f1 04       	cpc	r15, r1
    9170:	31 f0       	breq	.+12     	; 0x917e <get_fileinfo+0x18a>
    9172:	de 01       	movw	r26, r28
    9174:	19 96       	adiw	r26, 0x09	; 9
    9176:	58 e0       	ldi	r21, 0x08	; 8
    9178:	20 e0       	ldi	r18, 0x00	; 0
    917a:	30 e0       	ldi	r19, 0x00	; 0
    917c:	14 c0       	rjmp	.+40     	; 0x91a6 <get_fileinfo+0x1b2>
    917e:	8f e3       	ldi	r24, 0x3F	; 63
    9180:	8e 8b       	std	Y+22, r24	; 0x16
    9182:	21 e0       	ldi	r18, 0x01	; 1
    9184:	30 e0       	ldi	r19, 0x00	; 0
    9186:	1c c0       	rjmp	.+56     	; 0x91c0 <get_fileinfo+0x1cc>
    9188:	90 e0       	ldi	r25, 0x00	; 0
    918a:	8e 32       	cpi	r24, 0x2E	; 46
    918c:	91 05       	cpc	r25, r1
    918e:	09 f4       	brne	.+2      	; 0x9192 <get_fileinfo+0x19e>
    9190:	50 e1       	ldi	r21, 0x10	; 16
    9192:	bc 01       	movw	r22, r24
    9194:	61 54       	subi	r22, 0x41	; 65
    9196:	71 09       	sbc	r23, r1
    9198:	6a 31       	cpi	r22, 0x1A	; 26
    919a:	71 05       	cpc	r23, r1
    919c:	40 f0       	brcs	.+16     	; 0x91ae <get_fileinfo+0x1ba>
    919e:	fd 01       	movw	r30, r26
    91a0:	84 87       	std	Z+12, r24	; 0x0c
    91a2:	2f 5f       	subi	r18, 0xFF	; 255
    91a4:	3f 4f       	sbci	r19, 0xFF	; 255
    91a6:	8d 91       	ld	r24, X+
    91a8:	81 11       	cpse	r24, r1
    91aa:	ee cf       	rjmp	.-36     	; 0x9188 <get_fileinfo+0x194>
    91ac:	09 c0       	rjmp	.+18     	; 0x91c0 <get_fileinfo+0x1cc>
    91ae:	f8 01       	movw	r30, r16
    91b0:	62 8d       	ldd	r22, Z+26	; 0x1a
    91b2:	73 8d       	ldd	r23, Z+27	; 0x1b
    91b4:	fb 01       	movw	r30, r22
    91b6:	44 85       	ldd	r20, Z+12	; 0x0c
    91b8:	45 23       	and	r20, r21
    91ba:	89 f3       	breq	.-30     	; 0x919e <get_fileinfo+0x1aa>
    91bc:	80 96       	adiw	r24, 0x20	; 32
    91be:	ef cf       	rjmp	.-34     	; 0x919e <get_fileinfo+0x1aa>
    91c0:	fe 01       	movw	r30, r28
    91c2:	e2 0f       	add	r30, r18
    91c4:	f3 1f       	adc	r31, r19
    91c6:	16 8a       	std	Z+22, r1	; 0x16
    91c8:	f8 01       	movw	r30, r16
    91ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    91cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    91ce:	fc 01       	movw	r30, r24
    91d0:	84 85       	ldd	r24, Z+12	; 0x0c
    91d2:	81 11       	cpse	r24, r1
    91d4:	01 c0       	rjmp	.+2      	; 0x91d8 <get_fileinfo+0x1e4>
    91d6:	19 86       	std	Y+9, r1	; 0x09
    91d8:	f8 01       	movw	r30, r16
    91da:	82 8d       	ldd	r24, Z+26	; 0x1a
    91dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    91de:	fc 01       	movw	r30, r24
    91e0:	83 85       	ldd	r24, Z+11	; 0x0b
    91e2:	88 87       	std	Y+8, r24	; 0x08
    91e4:	f8 01       	movw	r30, r16
    91e6:	02 8d       	ldd	r16, Z+26	; 0x1a
    91e8:	13 8d       	ldd	r17, Z+27	; 0x1b
    91ea:	c8 01       	movw	r24, r16
    91ec:	4c 96       	adiw	r24, 0x1c	; 28
    91ee:	c6 dc       	rcall	.-1652   	; 0x8b7c <ld_dword>
    91f0:	68 83       	st	Y, r22
    91f2:	79 83       	std	Y+1, r23	; 0x01
    91f4:	8a 83       	std	Y+2, r24	; 0x02
    91f6:	9b 83       	std	Y+3, r25	; 0x03
    91f8:	f8 01       	movw	r30, r16
    91fa:	86 89       	ldd	r24, Z+22	; 0x16
    91fc:	97 89       	ldd	r25, Z+23	; 0x17
    91fe:	9f 83       	std	Y+7, r25	; 0x07
    9200:	8e 83       	std	Y+6, r24	; 0x06
    9202:	80 8d       	ldd	r24, Z+24	; 0x18
    9204:	91 8d       	ldd	r25, Z+25	; 0x19
    9206:	9d 83       	std	Y+5, r25	; 0x05
    9208:	8c 83       	std	Y+4, r24	; 0x04
    920a:	cd b7       	in	r28, 0x3d	; 61
    920c:	de b7       	in	r29, 0x3e	; 62
    920e:	e2 e1       	ldi	r30, 0x12	; 18
    9210:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00009214 <ld_clust.isra.4>:
    9214:	fb 01       	movw	r30, r22
    9216:	42 8d       	ldd	r20, Z+26	; 0x1a
    9218:	53 8d       	ldd	r21, Z+27	; 0x1b
    921a:	60 e0       	ldi	r22, 0x00	; 0
    921c:	70 e0       	ldi	r23, 0x00	; 0
    921e:	83 30       	cpi	r24, 0x03	; 3
    9220:	59 f4       	brne	.+22     	; 0x9238 <ld_clust.isra.4+0x24>
    9222:	84 89       	ldd	r24, Z+20	; 0x14
    9224:	95 89       	ldd	r25, Z+21	; 0x15
    9226:	a0 e0       	ldi	r26, 0x00	; 0
    9228:	b0 e0       	ldi	r27, 0x00	; 0
    922a:	dc 01       	movw	r26, r24
    922c:	99 27       	eor	r25, r25
    922e:	88 27       	eor	r24, r24
    9230:	48 2b       	or	r20, r24
    9232:	59 2b       	or	r21, r25
    9234:	6a 2b       	or	r22, r26
    9236:	7b 2b       	or	r23, r27
    9238:	cb 01       	movw	r24, r22
    923a:	ba 01       	movw	r22, r20
    923c:	08 95       	ret

0000923e <st_clust.isra.5>:
    923e:	fb 01       	movw	r30, r22
    9240:	22 8f       	std	Z+26, r18	; 0x1a
    9242:	33 8f       	std	Z+27, r19	; 0x1b
    9244:	dc 01       	movw	r26, r24
    9246:	8c 91       	ld	r24, X
    9248:	83 30       	cpi	r24, 0x03	; 3
    924a:	29 f4       	brne	.+10     	; 0x9256 <st_clust.isra.5+0x18>
    924c:	ca 01       	movw	r24, r20
    924e:	aa 27       	eor	r26, r26
    9250:	bb 27       	eor	r27, r27
    9252:	84 8b       	std	Z+20, r24	; 0x14
    9254:	95 8b       	std	Z+21, r25	; 0x15
    9256:	08 95       	ret

00009258 <sync_window.part.6>:
    9258:	8f 92       	push	r8
    925a:	9f 92       	push	r9
    925c:	af 92       	push	r10
    925e:	bf 92       	push	r11
    9260:	ef 92       	push	r14
    9262:	ff 92       	push	r15
    9264:	0f 93       	push	r16
    9266:	1f 93       	push	r17
    9268:	cf 93       	push	r28
    926a:	df 93       	push	r29
    926c:	ec 01       	movw	r28, r24
    926e:	7c 01       	movw	r14, r24
    9270:	45 e3       	ldi	r20, 0x35	; 53
    9272:	e4 0e       	add	r14, r20
    9274:	f1 1c       	adc	r15, r1
    9276:	29 a9       	ldd	r18, Y+49	; 0x31
    9278:	3a a9       	ldd	r19, Y+50	; 0x32
    927a:	4b a9       	ldd	r20, Y+51	; 0x33
    927c:	5c a9       	ldd	r21, Y+52	; 0x34
    927e:	01 e0       	ldi	r16, 0x01	; 1
    9280:	10 e0       	ldi	r17, 0x00	; 0
    9282:	b7 01       	movw	r22, r14
    9284:	89 81       	ldd	r24, Y+1	; 0x01
    9286:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    928a:	89 2b       	or	r24, r25
    928c:	41 f5       	brne	.+80     	; 0x92de <sync_window.part.6+0x86>
    928e:	1b 82       	std	Y+3, r1	; 0x03
    9290:	09 a9       	ldd	r16, Y+49	; 0x31
    9292:	1a a9       	ldd	r17, Y+50	; 0x32
    9294:	2b a9       	ldd	r18, Y+51	; 0x33
    9296:	3c a9       	ldd	r19, Y+52	; 0x34
    9298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    929a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    929c:	af 8d       	ldd	r26, Y+31	; 0x1f
    929e:	b8 a1       	ldd	r27, Y+32	; 0x20
    92a0:	8d a0       	ldd	r8, Y+37	; 0x25
    92a2:	9e a0       	ldd	r9, Y+38	; 0x26
    92a4:	af a0       	ldd	r10, Y+39	; 0x27
    92a6:	b8 a4       	ldd	r11, Y+40	; 0x28
    92a8:	b9 01       	movw	r22, r18
    92aa:	a8 01       	movw	r20, r16
    92ac:	48 19       	sub	r20, r8
    92ae:	59 09       	sbc	r21, r9
    92b0:	6a 09       	sbc	r22, r10
    92b2:	7b 09       	sbc	r23, r11
    92b4:	48 17       	cp	r20, r24
    92b6:	59 07       	cpc	r21, r25
    92b8:	6a 07       	cpc	r22, r26
    92ba:	7b 07       	cpc	r23, r27
    92bc:	98 f4       	brcc	.+38     	; 0x92e4 <sync_window.part.6+0x8c>
    92be:	6a 81       	ldd	r22, Y+2	; 0x02
    92c0:	62 30       	cpi	r22, 0x02	; 2
    92c2:	81 f4       	brne	.+32     	; 0x92e4 <sync_window.part.6+0x8c>
    92c4:	a9 01       	movw	r20, r18
    92c6:	98 01       	movw	r18, r16
    92c8:	28 0f       	add	r18, r24
    92ca:	39 1f       	adc	r19, r25
    92cc:	4a 1f       	adc	r20, r26
    92ce:	5b 1f       	adc	r21, r27
    92d0:	01 e0       	ldi	r16, 0x01	; 1
    92d2:	10 e0       	ldi	r17, 0x00	; 0
    92d4:	b7 01       	movw	r22, r14
    92d6:	89 81       	ldd	r24, Y+1	; 0x01
    92d8:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    92dc:	03 c0       	rjmp	.+6      	; 0x92e4 <sync_window.part.6+0x8c>
    92de:	81 e0       	ldi	r24, 0x01	; 1
    92e0:	90 e0       	ldi	r25, 0x00	; 0
    92e2:	02 c0       	rjmp	.+4      	; 0x92e8 <sync_window.part.6+0x90>
    92e4:	80 e0       	ldi	r24, 0x00	; 0
    92e6:	90 e0       	ldi	r25, 0x00	; 0
    92e8:	df 91       	pop	r29
    92ea:	cf 91       	pop	r28
    92ec:	1f 91       	pop	r17
    92ee:	0f 91       	pop	r16
    92f0:	ff 90       	pop	r15
    92f2:	ef 90       	pop	r14
    92f4:	bf 90       	pop	r11
    92f6:	af 90       	pop	r10
    92f8:	9f 90       	pop	r9
    92fa:	8f 90       	pop	r8
    92fc:	08 95       	ret

000092fe <sync_fs>:
    92fe:	ef 92       	push	r14
    9300:	ff 92       	push	r15
    9302:	0f 93       	push	r16
    9304:	1f 93       	push	r17
    9306:	cf 93       	push	r28
    9308:	df 93       	push	r29
    930a:	ec 01       	movw	r28, r24
    930c:	8b 81       	ldd	r24, Y+3	; 0x03
    930e:	81 11       	cpse	r24, r1
    9310:	05 c0       	rjmp	.+10     	; 0x931c <sync_fs+0x1e>
    9312:	88 81       	ld	r24, Y
    9314:	83 30       	cpi	r24, 0x03	; 3
    9316:	09 f0       	breq	.+2      	; 0x931a <sync_fs+0x1c>
    9318:	52 c0       	rjmp	.+164    	; 0x93be <sync_fs+0xc0>
    931a:	06 c0       	rjmp	.+12     	; 0x9328 <sync_fs+0x2a>
    931c:	ce 01       	movw	r24, r28
    931e:	9c df       	rcall	.-200    	; 0x9258 <sync_window.part.6>
    9320:	00 97       	sbiw	r24, 0x00	; 0
    9322:	09 f0       	breq	.+2      	; 0x9326 <sync_fs+0x28>
    9324:	59 c0       	rjmp	.+178    	; 0x93d8 <sync_fs+0xda>
    9326:	f5 cf       	rjmp	.-22     	; 0x9312 <sync_fs+0x14>
    9328:	8c 81       	ldd	r24, Y+4	; 0x04
    932a:	81 30       	cpi	r24, 0x01	; 1
    932c:	09 f0       	breq	.+2      	; 0x9330 <sync_fs+0x32>
    932e:	47 c0       	rjmp	.+142    	; 0x93be <sync_fs+0xc0>
    9330:	40 e0       	ldi	r20, 0x00	; 0
    9332:	52 e0       	ldi	r21, 0x02	; 2
    9334:	60 e0       	ldi	r22, 0x00	; 0
    9336:	70 e0       	ldi	r23, 0x00	; 0
    9338:	7e 01       	movw	r14, r28
    933a:	85 e3       	ldi	r24, 0x35	; 53
    933c:	e8 0e       	add	r14, r24
    933e:	f1 1c       	adc	r15, r1
    9340:	c7 01       	movw	r24, r14
    9342:	37 dc       	rcall	.-1938   	; 0x8bb2 <mem_set>
    9344:	85 e5       	ldi	r24, 0x55	; 85
    9346:	fe 01       	movw	r30, r28
    9348:	ed 5c       	subi	r30, 0xCD	; 205
    934a:	fd 4f       	sbci	r31, 0xFD	; 253
    934c:	80 83       	st	Z, r24
    934e:	8a ea       	ldi	r24, 0xAA	; 170
    9350:	31 96       	adiw	r30, 0x01	; 1
    9352:	80 83       	st	Z, r24
    9354:	82 e5       	ldi	r24, 0x52	; 82
    9356:	8d ab       	std	Y+53, r24	; 0x35
    9358:	8e ab       	std	Y+54, r24	; 0x36
    935a:	81 e6       	ldi	r24, 0x61	; 97
    935c:	8f ab       	std	Y+55, r24	; 0x37
    935e:	91 e4       	ldi	r25, 0x41	; 65
    9360:	98 af       	std	Y+56, r25	; 0x38
    9362:	22 e7       	ldi	r18, 0x72	; 114
    9364:	7b 97       	sbiw	r30, 0x1b	; 27
    9366:	20 83       	st	Z, r18
    9368:	31 96       	adiw	r30, 0x01	; 1
    936a:	20 83       	st	Z, r18
    936c:	31 96       	adiw	r30, 0x01	; 1
    936e:	90 83       	st	Z, r25
    9370:	31 96       	adiw	r30, 0x01	; 1
    9372:	80 83       	st	Z, r24
    9374:	49 89       	ldd	r20, Y+17	; 0x11
    9376:	5a 89       	ldd	r21, Y+18	; 0x12
    9378:	6b 89       	ldd	r22, Y+19	; 0x13
    937a:	7c 89       	ldd	r23, Y+20	; 0x14
    937c:	ce 01       	movw	r24, r28
    937e:	83 5e       	subi	r24, 0xE3	; 227
    9380:	9d 4f       	sbci	r25, 0xFD	; 253
    9382:	11 dc       	rcall	.-2014   	; 0x8ba6 <st_dword>
    9384:	4d 85       	ldd	r20, Y+13	; 0x0d
    9386:	5e 85       	ldd	r21, Y+14	; 0x0e
    9388:	6f 85       	ldd	r22, Y+15	; 0x0f
    938a:	78 89       	ldd	r23, Y+16	; 0x10
    938c:	ce 01       	movw	r24, r28
    938e:	8f 5d       	subi	r24, 0xDF	; 223
    9390:	9d 4f       	sbci	r25, 0xFD	; 253
    9392:	09 dc       	rcall	.-2030   	; 0x8ba6 <st_dword>
    9394:	89 a1       	ldd	r24, Y+33	; 0x21
    9396:	9a a1       	ldd	r25, Y+34	; 0x22
    9398:	ab a1       	ldd	r26, Y+35	; 0x23
    939a:	bc a1       	ldd	r27, Y+36	; 0x24
    939c:	9c 01       	movw	r18, r24
    939e:	ad 01       	movw	r20, r26
    93a0:	2f 5f       	subi	r18, 0xFF	; 255
    93a2:	3f 4f       	sbci	r19, 0xFF	; 255
    93a4:	4f 4f       	sbci	r20, 0xFF	; 255
    93a6:	5f 4f       	sbci	r21, 0xFF	; 255
    93a8:	29 ab       	std	Y+49, r18	; 0x31
    93aa:	3a ab       	std	Y+50, r19	; 0x32
    93ac:	4b ab       	std	Y+51, r20	; 0x33
    93ae:	5c ab       	std	Y+52, r21	; 0x34
    93b0:	01 e0       	ldi	r16, 0x01	; 1
    93b2:	10 e0       	ldi	r17, 0x00	; 0
    93b4:	b7 01       	movw	r22, r14
    93b6:	89 81       	ldd	r24, Y+1	; 0x01
    93b8:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    93bc:	1c 82       	std	Y+4, r1	; 0x04
    93be:	40 e0       	ldi	r20, 0x00	; 0
    93c0:	50 e0       	ldi	r21, 0x00	; 0
    93c2:	60 e0       	ldi	r22, 0x00	; 0
    93c4:	89 81       	ldd	r24, Y+1	; 0x01
    93c6:	0e 94 02 69 	call	0xd204	; 0xd204 <disk_ioctl>
    93ca:	31 e0       	ldi	r19, 0x01	; 1
    93cc:	20 e0       	ldi	r18, 0x00	; 0
    93ce:	89 2b       	or	r24, r25
    93d0:	09 f4       	brne	.+2      	; 0x93d4 <sync_fs+0xd6>
    93d2:	30 e0       	ldi	r19, 0x00	; 0
    93d4:	83 2f       	mov	r24, r19
    93d6:	92 2f       	mov	r25, r18
    93d8:	cd b7       	in	r28, 0x3d	; 61
    93da:	de b7       	in	r29, 0x3e	; 62
    93dc:	e6 e0       	ldi	r30, 0x06	; 6
    93de:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

000093e2 <dir_clear>:
    93e2:	4f 92       	push	r4
    93e4:	5f 92       	push	r5
    93e6:	6f 92       	push	r6
    93e8:	7f 92       	push	r7
    93ea:	af 92       	push	r10
    93ec:	bf 92       	push	r11
    93ee:	cf 92       	push	r12
    93f0:	df 92       	push	r13
    93f2:	ef 92       	push	r14
    93f4:	ff 92       	push	r15
    93f6:	0f 93       	push	r16
    93f8:	1f 93       	push	r17
    93fa:	cf 93       	push	r28
    93fc:	df 93       	push	r29
    93fe:	ec 01       	movw	r28, r24
    9400:	6a 01       	movw	r12, r20
    9402:	7b 01       	movw	r14, r22
    9404:	8b 81       	ldd	r24, Y+3	; 0x03
    9406:	81 11       	cpse	r24, r1
    9408:	28 c0       	rjmp	.+80     	; 0x945a <dir_clear+0x78>
    940a:	b7 01       	movw	r22, r14
    940c:	a6 01       	movw	r20, r12
    940e:	ce 01       	movw	r24, r28
    9410:	6e dc       	rcall	.-1828   	; 0x8cee <clst2sect>
    9412:	2b 01       	movw	r4, r22
    9414:	3c 01       	movw	r6, r24
    9416:	69 ab       	std	Y+49, r22	; 0x31
    9418:	7a ab       	std	Y+50, r23	; 0x32
    941a:	8b ab       	std	Y+51, r24	; 0x33
    941c:	9c ab       	std	Y+52, r25	; 0x34
    941e:	5e 01       	movw	r10, r28
    9420:	25 e3       	ldi	r18, 0x35	; 53
    9422:	a2 0e       	add	r10, r18
    9424:	b1 1c       	adc	r11, r1
    9426:	40 e0       	ldi	r20, 0x00	; 0
    9428:	52 e0       	ldi	r21, 0x02	; 2
    942a:	60 e0       	ldi	r22, 0x00	; 0
    942c:	70 e0       	ldi	r23, 0x00	; 0
    942e:	c5 01       	movw	r24, r10
    9430:	c0 db       	rcall	.-2176   	; 0x8bb2 <mem_set>
    9432:	09 85       	ldd	r16, Y+9	; 0x09
    9434:	1a 85       	ldd	r17, Y+10	; 0x0a
    9436:	c8 01       	movw	r24, r16
    9438:	a0 e0       	ldi	r26, 0x00	; 0
    943a:	b0 e0       	ldi	r27, 0x00	; 0
    943c:	39 e0       	ldi	r19, 0x09	; 9
    943e:	88 0f       	add	r24, r24
    9440:	99 1f       	adc	r25, r25
    9442:	aa 1f       	adc	r26, r26
    9444:	bb 1f       	adc	r27, r27
    9446:	3a 95       	dec	r19
    9448:	d1 f7       	brne	.-12     	; 0x943e <dir_clear+0x5c>
    944a:	81 15       	cp	r24, r1
    944c:	90 48       	sbci	r25, 0x80	; 128
    944e:	a1 05       	cpc	r26, r1
    9450:	b1 05       	cpc	r27, r1
    9452:	50 f0       	brcs	.+20     	; 0x9468 <dir_clear+0x86>
    9454:	00 e0       	ldi	r16, 0x00	; 0
    9456:	10 e8       	ldi	r17, 0x80	; 128
    9458:	14 c0       	rjmp	.+40     	; 0x9482 <dir_clear+0xa0>
    945a:	ce 01       	movw	r24, r28
    945c:	fd de       	rcall	.-518    	; 0x9258 <sync_window.part.6>
    945e:	89 2b       	or	r24, r25
    9460:	a1 f2       	breq	.-88     	; 0x940a <dir_clear+0x28>
    9462:	81 e0       	ldi	r24, 0x01	; 1
    9464:	90 e0       	ldi	r25, 0x00	; 0
    9466:	56 c0       	rjmp	.+172    	; 0x9514 <dir_clear+0x132>
    9468:	10 2f       	mov	r17, r16
    946a:	00 27       	eor	r16, r16
    946c:	11 0f       	add	r17, r17
    946e:	09 c0       	rjmp	.+18     	; 0x9482 <dir_clear+0xa0>
    9470:	c8 01       	movw	r24, r16
    9472:	0e 94 26 68 	call	0xd04c	; 0xd04c <ff_memalloc>
    9476:	6c 01       	movw	r12, r24
    9478:	00 97       	sbiw	r24, 0x00	; 0
    947a:	09 f0       	breq	.+2      	; 0x947e <dir_clear+0x9c>
    947c:	40 c0       	rjmp	.+128    	; 0x94fe <dir_clear+0x11c>
    947e:	16 95       	lsr	r17
    9480:	07 95       	ror	r16
    9482:	01 30       	cpi	r16, 0x01	; 1
    9484:	82 e0       	ldi	r24, 0x02	; 2
    9486:	18 07       	cpc	r17, r24
    9488:	98 f7       	brcc	.-26     	; 0x9470 <dir_clear+0x8e>
    948a:	e1 2c       	mov	r14, r1
    948c:	f1 2c       	mov	r15, r1
    948e:	11 c0       	rjmp	.+34     	; 0x94b2 <dir_clear+0xd0>
    9490:	01 e0       	ldi	r16, 0x01	; 1
    9492:	10 e0       	ldi	r17, 0x00	; 0
    9494:	a3 01       	movw	r20, r6
    9496:	92 01       	movw	r18, r4
    9498:	2e 0d       	add	r18, r14
    949a:	3f 1d       	adc	r19, r15
    949c:	41 1d       	adc	r20, r1
    949e:	51 1d       	adc	r21, r1
    94a0:	b5 01       	movw	r22, r10
    94a2:	89 81       	ldd	r24, Y+1	; 0x01
    94a4:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    94a8:	89 2b       	or	r24, r25
    94aa:	01 f5       	brne	.+64     	; 0x94ec <dir_clear+0x10a>
    94ac:	2f ef       	ldi	r18, 0xFF	; 255
    94ae:	e2 1a       	sub	r14, r18
    94b0:	f2 0a       	sbc	r15, r18
    94b2:	89 85       	ldd	r24, Y+9	; 0x09
    94b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    94b6:	e8 16       	cp	r14, r24
    94b8:	f9 06       	cpc	r15, r25
    94ba:	50 f3       	brcs	.-44     	; 0x9490 <dir_clear+0xae>
    94bc:	17 c0       	rjmp	.+46     	; 0x94ec <dir_clear+0x10a>
    94be:	85 01       	movw	r16, r10
    94c0:	a3 01       	movw	r20, r6
    94c2:	92 01       	movw	r18, r4
    94c4:	2e 0d       	add	r18, r14
    94c6:	3f 1d       	adc	r19, r15
    94c8:	41 1d       	adc	r20, r1
    94ca:	51 1d       	adc	r21, r1
    94cc:	b6 01       	movw	r22, r12
    94ce:	89 81       	ldd	r24, Y+1	; 0x01
    94d0:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    94d4:	89 2b       	or	r24, r25
    94d6:	39 f4       	brne	.+14     	; 0x94e6 <dir_clear+0x104>
    94d8:	ea 0c       	add	r14, r10
    94da:	fb 1c       	adc	r15, r11
    94dc:	89 85       	ldd	r24, Y+9	; 0x09
    94de:	9a 85       	ldd	r25, Y+10	; 0x0a
    94e0:	e8 16       	cp	r14, r24
    94e2:	f9 06       	cpc	r15, r25
    94e4:	60 f3       	brcs	.-40     	; 0x94be <dir_clear+0xdc>
    94e6:	c6 01       	movw	r24, r12
    94e8:	0e 94 29 68 	call	0xd052	; 0xd052 <ff_memfree>
    94ec:	81 e0       	ldi	r24, 0x01	; 1
    94ee:	90 e0       	ldi	r25, 0x00	; 0
    94f0:	29 85       	ldd	r18, Y+9	; 0x09
    94f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    94f4:	2e 15       	cp	r18, r14
    94f6:	3f 05       	cpc	r19, r15
    94f8:	69 f4       	brne	.+26     	; 0x9514 <dir_clear+0x132>
    94fa:	80 e0       	ldi	r24, 0x00	; 0
    94fc:	0b c0       	rjmp	.+22     	; 0x9514 <dir_clear+0x132>
    94fe:	a8 01       	movw	r20, r16
    9500:	60 e0       	ldi	r22, 0x00	; 0
    9502:	70 e0       	ldi	r23, 0x00	; 0
    9504:	56 db       	rcall	.-2388   	; 0x8bb2 <mem_set>
    9506:	58 01       	movw	r10, r16
    9508:	ab 2c       	mov	r10, r11
    950a:	bb 24       	eor	r11, r11
    950c:	a6 94       	lsr	r10
    950e:	e1 2c       	mov	r14, r1
    9510:	f1 2c       	mov	r15, r1
    9512:	e4 cf       	rjmp	.-56     	; 0x94dc <dir_clear+0xfa>
    9514:	df 91       	pop	r29
    9516:	cf 91       	pop	r28
    9518:	1f 91       	pop	r17
    951a:	0f 91       	pop	r16
    951c:	ff 90       	pop	r15
    951e:	ef 90       	pop	r14
    9520:	df 90       	pop	r13
    9522:	cf 90       	pop	r12
    9524:	bf 90       	pop	r11
    9526:	af 90       	pop	r10
    9528:	7f 90       	pop	r7
    952a:	6f 90       	pop	r6
    952c:	5f 90       	pop	r5
    952e:	4f 90       	pop	r4
    9530:	08 95       	ret

00009532 <move_window>:
    9532:	a0 e0       	ldi	r26, 0x00	; 0
    9534:	b0 e0       	ldi	r27, 0x00	; 0
    9536:	ef e9       	ldi	r30, 0x9F	; 159
    9538:	fa e4       	ldi	r31, 0x4A	; 74
    953a:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    953e:	ec 01       	movw	r28, r24
    9540:	6a 01       	movw	r12, r20
    9542:	7b 01       	movw	r14, r22
    9544:	89 a9       	ldd	r24, Y+49	; 0x31
    9546:	9a a9       	ldd	r25, Y+50	; 0x32
    9548:	ab a9       	ldd	r26, Y+51	; 0x33
    954a:	bc a9       	ldd	r27, Y+52	; 0x34
    954c:	84 17       	cp	r24, r20
    954e:	95 07       	cpc	r25, r21
    9550:	a6 07       	cpc	r26, r22
    9552:	b7 07       	cpc	r27, r23
    9554:	11 f1       	breq	.+68     	; 0x959a <move_window+0x68>
    9556:	8b 81       	ldd	r24, Y+3	; 0x03
    9558:	81 11       	cpse	r24, r1
    955a:	13 c0       	rjmp	.+38     	; 0x9582 <move_window+0x50>
    955c:	01 e0       	ldi	r16, 0x01	; 1
    955e:	10 e0       	ldi	r17, 0x00	; 0
    9560:	a7 01       	movw	r20, r14
    9562:	96 01       	movw	r18, r12
    9564:	be 01       	movw	r22, r28
    9566:	6b 5c       	subi	r22, 0xCB	; 203
    9568:	7f 4f       	sbci	r23, 0xFF	; 255
    956a:	89 81       	ldd	r24, Y+1	; 0x01
    956c:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    9570:	89 2b       	or	r24, r25
    9572:	61 f0       	breq	.+24     	; 0x958c <move_window+0x5a>
    9574:	81 e0       	ldi	r24, 0x01	; 1
    9576:	90 e0       	ldi	r25, 0x00	; 0
    9578:	cc 24       	eor	r12, r12
    957a:	ca 94       	dec	r12
    957c:	dc 2c       	mov	r13, r12
    957e:	76 01       	movw	r14, r12
    9580:	07 c0       	rjmp	.+14     	; 0x9590 <move_window+0x5e>
    9582:	ce 01       	movw	r24, r28
    9584:	69 de       	rcall	.-814    	; 0x9258 <sync_window.part.6>
    9586:	00 97       	sbiw	r24, 0x00	; 0
    9588:	51 f4       	brne	.+20     	; 0x959e <move_window+0x6c>
    958a:	e8 cf       	rjmp	.-48     	; 0x955c <move_window+0x2a>
    958c:	80 e0       	ldi	r24, 0x00	; 0
    958e:	90 e0       	ldi	r25, 0x00	; 0
    9590:	c9 aa       	std	Y+49, r12	; 0x31
    9592:	da aa       	std	Y+50, r13	; 0x32
    9594:	eb aa       	std	Y+51, r14	; 0x33
    9596:	fc aa       	std	Y+52, r15	; 0x34
    9598:	02 c0       	rjmp	.+4      	; 0x959e <move_window+0x6c>
    959a:	80 e0       	ldi	r24, 0x00	; 0
    959c:	90 e0       	ldi	r25, 0x00	; 0
    959e:	cd b7       	in	r28, 0x3d	; 61
    95a0:	de b7       	in	r29, 0x3e	; 62
    95a2:	e8 e0       	ldi	r30, 0x08	; 8
    95a4:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

000095a8 <check_fs>:
    95a8:	cf 93       	push	r28
    95aa:	df 93       	push	r29
    95ac:	ec 01       	movw	r28, r24
    95ae:	1b 82       	std	Y+3, r1	; 0x03
    95b0:	8f ef       	ldi	r24, 0xFF	; 255
    95b2:	9f ef       	ldi	r25, 0xFF	; 255
    95b4:	dc 01       	movw	r26, r24
    95b6:	89 ab       	std	Y+49, r24	; 0x31
    95b8:	9a ab       	std	Y+50, r25	; 0x32
    95ba:	ab ab       	std	Y+51, r26	; 0x33
    95bc:	bc ab       	std	Y+52, r27	; 0x34
    95be:	ce 01       	movw	r24, r28
    95c0:	b8 df       	rcall	.-144    	; 0x9532 <move_window>
    95c2:	89 2b       	or	r24, r25
    95c4:	19 f5       	brne	.+70     	; 0x960c <check_fs+0x64>
    95c6:	fe 01       	movw	r30, r28
    95c8:	ed 5c       	subi	r30, 0xCD	; 205
    95ca:	fd 4f       	sbci	r31, 0xFD	; 253
    95cc:	80 81       	ld	r24, Z
    95ce:	91 81       	ldd	r25, Z+1	; 0x01
    95d0:	85 35       	cpi	r24, 0x55	; 85
    95d2:	9a 4a       	sbci	r25, 0xAA	; 170
    95d4:	f1 f4       	brne	.+60     	; 0x9612 <check_fs+0x6a>
    95d6:	8d a9       	ldd	r24, Y+53	; 0x35
    95d8:	8b 3e       	cpi	r24, 0xEB	; 235
    95da:	19 f0       	breq	.+6      	; 0x95e2 <check_fs+0x3a>
    95dc:	88 5e       	subi	r24, 0xE8	; 232
    95de:	82 30       	cpi	r24, 0x02	; 2
    95e0:	f0 f4       	brcc	.+60     	; 0x961e <check_fs+0x76>
    95e2:	43 e0       	ldi	r20, 0x03	; 3
    95e4:	50 e0       	ldi	r21, 0x00	; 0
    95e6:	66 ec       	ldi	r22, 0xC6	; 198
    95e8:	78 e0       	ldi	r23, 0x08	; 8
    95ea:	ce 01       	movw	r24, r28
    95ec:	85 59       	subi	r24, 0x95	; 149
    95ee:	9f 4f       	sbci	r25, 0xFF	; 255
    95f0:	e9 da       	rcall	.-2606   	; 0x8bc4 <mem_cmp>
    95f2:	89 2b       	or	r24, r25
    95f4:	89 f0       	breq	.+34     	; 0x9618 <check_fs+0x70>
    95f6:	45 e0       	ldi	r20, 0x05	; 5
    95f8:	50 e0       	ldi	r21, 0x00	; 0
    95fa:	61 e2       	ldi	r22, 0x21	; 33
    95fc:	74 e0       	ldi	r23, 0x04	; 4
    95fe:	ce 01       	movw	r24, r28
    9600:	89 57       	subi	r24, 0x79	; 121
    9602:	9f 4f       	sbci	r25, 0xFF	; 255
    9604:	df da       	rcall	.-2626   	; 0x8bc4 <mem_cmp>
    9606:	89 2b       	or	r24, r25
    9608:	51 f4       	brne	.+20     	; 0x961e <check_fs+0x76>
    960a:	06 c0       	rjmp	.+12     	; 0x9618 <check_fs+0x70>
    960c:	84 e0       	ldi	r24, 0x04	; 4
    960e:	90 e0       	ldi	r25, 0x00	; 0
    9610:	08 c0       	rjmp	.+16     	; 0x9622 <check_fs+0x7a>
    9612:	83 e0       	ldi	r24, 0x03	; 3
    9614:	90 e0       	ldi	r25, 0x00	; 0
    9616:	05 c0       	rjmp	.+10     	; 0x9622 <check_fs+0x7a>
    9618:	80 e0       	ldi	r24, 0x00	; 0
    961a:	90 e0       	ldi	r25, 0x00	; 0
    961c:	02 c0       	rjmp	.+4      	; 0x9622 <check_fs+0x7a>
    961e:	82 e0       	ldi	r24, 0x02	; 2
    9620:	90 e0       	ldi	r25, 0x00	; 0
    9622:	df 91       	pop	r29
    9624:	cf 91       	pop	r28
    9626:	08 95       	ret

00009628 <mount_volume>:
    9628:	a0 e2       	ldi	r26, 0x20	; 32
    962a:	b0 e0       	ldi	r27, 0x00	; 0
    962c:	ea e1       	ldi	r30, 0x1A	; 26
    962e:	fb e4       	ldi	r31, 0x4B	; 75
    9630:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    9634:	5b 01       	movw	r10, r22
    9636:	f4 2e       	mov	r15, r20
    9638:	db 01       	movw	r26, r22
    963a:	1d 92       	st	X+, r1
    963c:	1c 92       	st	X, r1
    963e:	ca db       	rcall	.-2156   	; 0x8dd4 <get_ldnumber>
    9640:	6c 01       	movw	r12, r24
    9642:	97 fd       	sbrc	r25, 7
    9644:	39 c2       	rjmp	.+1138   	; 0x9ab8 <mount_volume+0x490>
    9646:	fc 01       	movw	r30, r24
    9648:	ee 0f       	add	r30, r30
    964a:	ff 1f       	adc	r31, r31
    964c:	e7 5d       	subi	r30, 0xD7	; 215
    964e:	f7 4e       	sbci	r31, 0xE7	; 231
    9650:	00 81       	ld	r16, Z
    9652:	11 81       	ldd	r17, Z+1	; 0x01
    9654:	01 15       	cp	r16, r1
    9656:	11 05       	cpc	r17, r1
    9658:	09 f4       	brne	.+2      	; 0x965c <mount_volume+0x34>
    965a:	31 c2       	rjmp	.+1122   	; 0x9abe <mount_volume+0x496>
    965c:	f5 01       	movw	r30, r10
    965e:	11 83       	std	Z+1, r17	; 0x01
    9660:	00 83       	st	Z, r16
    9662:	ff 2d       	mov	r31, r15
    9664:	fe 7f       	andi	r31, 0xFE	; 254
    9666:	ff 2e       	mov	r15, r31
    9668:	d8 01       	movw	r26, r16
    966a:	8c 91       	ld	r24, X
    966c:	88 23       	and	r24, r24
    966e:	71 f0       	breq	.+28     	; 0x968c <mount_volume+0x64>
    9670:	f8 01       	movw	r30, r16
    9672:	81 81       	ldd	r24, Z+1	; 0x01
    9674:	0e 94 d6 68 	call	0xd1ac	; 0xd1ac <disk_status>
    9678:	80 fd       	sbrc	r24, 0
    967a:	08 c0       	rjmp	.+16     	; 0x968c <mount_volume+0x64>
    967c:	ff 20       	and	r15, r15
    967e:	09 f4       	brne	.+2      	; 0x9682 <mount_volume+0x5a>
    9680:	21 c2       	rjmp	.+1090   	; 0x9ac4 <mount_volume+0x49c>
    9682:	82 ff       	sbrs	r24, 2
    9684:	1f c2       	rjmp	.+1086   	; 0x9ac4 <mount_volume+0x49c>
    9686:	8a e0       	ldi	r24, 0x0A	; 10
    9688:	90 e0       	ldi	r25, 0x00	; 0
    968a:	24 c2       	rjmp	.+1096   	; 0x9ad4 <mount_volume+0x4ac>
    968c:	d8 01       	movw	r26, r16
    968e:	1c 92       	st	X, r1
    9690:	f8 01       	movw	r30, r16
    9692:	c1 82       	std	Z+1, r12	; 0x01
    9694:	8c 2d       	mov	r24, r12
    9696:	0e 94 dc 68 	call	0xd1b8	; 0xd1b8 <disk_initialize>
    969a:	80 fd       	sbrc	r24, 0
    969c:	16 c2       	rjmp	.+1068   	; 0x9aca <mount_volume+0x4a2>
    969e:	ff 20       	and	r15, r15
    96a0:	11 f0       	breq	.+4      	; 0x96a6 <mount_volume+0x7e>
    96a2:	82 fd       	sbrc	r24, 2
    96a4:	f0 cf       	rjmp	.-32     	; 0x9686 <mount_volume+0x5e>
    96a6:	40 e0       	ldi	r20, 0x00	; 0
    96a8:	50 e0       	ldi	r21, 0x00	; 0
    96aa:	ba 01       	movw	r22, r20
    96ac:	c8 01       	movw	r24, r16
    96ae:	7c df       	rcall	.-264    	; 0x95a8 <check_fs>
    96b0:	82 30       	cpi	r24, 0x02	; 2
    96b2:	91 05       	cpc	r25, r1
    96b4:	b9 f5       	brne	.+110    	; 0x9724 <mount_volume+0xfc>
    96b6:	68 01       	movw	r12, r16
    96b8:	f5 e0       	ldi	r31, 0x05	; 5
    96ba:	cf 1a       	sub	r12, r31
    96bc:	fe ef       	ldi	r31, 0xFE	; 254
    96be:	df 0a       	sbc	r13, r31
    96c0:	9e 01       	movw	r18, r28
    96c2:	2f 5f       	subi	r18, 0xFF	; 255
    96c4:	3f 4f       	sbci	r19, 0xFF	; 255
    96c6:	79 01       	movw	r14, r18
    96c8:	48 01       	movw	r8, r16
    96ca:	35 ec       	ldi	r19, 0xC5	; 197
    96cc:	83 1a       	sub	r8, r19
    96ce:	3d ef       	ldi	r19, 0xFD	; 253
    96d0:	93 0a       	sbc	r9, r19
    96d2:	57 01       	movw	r10, r14
    96d4:	c6 01       	movw	r24, r12
    96d6:	52 da       	rcall	.-2908   	; 0x8b7c <ld_dword>
    96d8:	d5 01       	movw	r26, r10
    96da:	6d 93       	st	X+, r22
    96dc:	7d 93       	st	X+, r23
    96de:	8d 93       	st	X+, r24
    96e0:	9d 93       	st	X+, r25
    96e2:	5d 01       	movw	r10, r26
    96e4:	b0 e1       	ldi	r27, 0x10	; 16
    96e6:	cb 0e       	add	r12, r27
    96e8:	d1 1c       	adc	r13, r1
    96ea:	c8 14       	cp	r12, r8
    96ec:	d9 04       	cpc	r13, r9
    96ee:	91 f7       	brne	.-28     	; 0x96d4 <mount_volume+0xac>
    96f0:	6e 01       	movw	r12, r28
    96f2:	e1 e1       	ldi	r30, 0x11	; 17
    96f4:	ce 0e       	add	r12, r30
    96f6:	d1 1c       	adc	r13, r1
    96f8:	d7 01       	movw	r26, r14
    96fa:	4d 91       	ld	r20, X+
    96fc:	5d 91       	ld	r21, X+
    96fe:	6d 91       	ld	r22, X+
    9700:	7d 91       	ld	r23, X+
    9702:	7d 01       	movw	r14, r26
    9704:	41 15       	cp	r20, r1
    9706:	51 05       	cpc	r21, r1
    9708:	61 05       	cpc	r22, r1
    970a:	71 05       	cpc	r23, r1
    970c:	31 f0       	breq	.+12     	; 0x971a <mount_volume+0xf2>
    970e:	c8 01       	movw	r24, r16
    9710:	4b df       	rcall	.-362    	; 0x95a8 <check_fs>
    9712:	82 30       	cpi	r24, 0x02	; 2
    9714:	91 05       	cpc	r25, r1
    9716:	18 f4       	brcc	.+6      	; 0x971e <mount_volume+0xf6>
    9718:	05 c0       	rjmp	.+10     	; 0x9724 <mount_volume+0xfc>
    971a:	83 e0       	ldi	r24, 0x03	; 3
    971c:	90 e0       	ldi	r25, 0x00	; 0
    971e:	ce 14       	cp	r12, r14
    9720:	df 04       	cpc	r13, r15
    9722:	51 f7       	brne	.-44     	; 0x96f8 <mount_volume+0xd0>
    9724:	84 30       	cpi	r24, 0x04	; 4
    9726:	91 05       	cpc	r25, r1
    9728:	09 f4       	brne	.+2      	; 0x972c <mount_volume+0x104>
    972a:	d2 c1       	rjmp	.+932    	; 0x9ad0 <mount_volume+0x4a8>
    972c:	02 97       	sbiw	r24, 0x02	; 2
    972e:	18 f0       	brcs	.+6      	; 0x9736 <mount_volume+0x10e>
    9730:	8d e0       	ldi	r24, 0x0D	; 13
    9732:	90 e0       	ldi	r25, 0x00	; 0
    9734:	cf c1       	rjmp	.+926    	; 0x9ad4 <mount_volume+0x4ac>
    9736:	f8 01       	movw	r30, r16
    9738:	e0 5c       	subi	r30, 0xC0	; 192
    973a:	ff 4f       	sbci	r31, 0xFF	; 255
    973c:	80 81       	ld	r24, Z
    973e:	91 81       	ldd	r25, Z+1	; 0x01
    9740:	81 15       	cp	r24, r1
    9742:	92 40       	sbci	r25, 0x02	; 2
    9744:	a9 f7       	brne	.-22     	; 0x9730 <mount_volume+0x108>
    9746:	3b 96       	adiw	r30, 0x0b	; 11
    9748:	40 80       	ld	r4, Z
    974a:	51 80       	ldd	r5, Z+1	; 0x01
    974c:	41 14       	cp	r4, r1
    974e:	51 04       	cpc	r5, r1
    9750:	19 f0       	breq	.+6      	; 0x9758 <mount_volume+0x130>
    9752:	61 2c       	mov	r6, r1
    9754:	71 2c       	mov	r7, r1
    9756:	06 c0       	rjmp	.+12     	; 0x9764 <mount_volume+0x13c>
    9758:	c8 01       	movw	r24, r16
    975a:	87 5a       	subi	r24, 0xA7	; 167
    975c:	9f 4f       	sbci	r25, 0xFF	; 255
    975e:	0e da       	rcall	.-3044   	; 0x8b7c <ld_dword>
    9760:	2b 01       	movw	r4, r22
    9762:	3c 01       	movw	r6, r24
    9764:	f8 01       	movw	r30, r16
    9766:	21 a9       	ldd	r18, Z+49	; 0x31
    9768:	32 a9       	ldd	r19, Z+50	; 0x32
    976a:	43 a9       	ldd	r20, Z+51	; 0x33
    976c:	54 a9       	ldd	r21, Z+52	; 0x34
    976e:	29 8b       	std	Y+17, r18	; 0x11
    9770:	3a 8b       	std	Y+18, r19	; 0x12
    9772:	4b 8b       	std	Y+19, r20	; 0x13
    9774:	5c 8b       	std	Y+20, r21	; 0x14
    9776:	45 8e       	std	Z+29, r4	; 0x1d
    9778:	56 8e       	std	Z+30, r5	; 0x1e
    977a:	67 8e       	std	Z+31, r6	; 0x1f
    977c:	70 a2       	std	Z+32, r7	; 0x20
    977e:	eb 5b       	subi	r30, 0xBB	; 187
    9780:	ff 4f       	sbci	r31, 0xFF	; 255
    9782:	a0 80       	ld	r10, Z
    9784:	f8 01       	movw	r30, r16
    9786:	a2 82       	std	Z+2, r10	; 0x02
    9788:	8f ef       	ldi	r24, 0xFF	; 255
    978a:	8a 0d       	add	r24, r10
    978c:	82 30       	cpi	r24, 0x02	; 2
    978e:	80 f6       	brcc	.-96     	; 0x9730 <mount_volume+0x108>
    9790:	ee 5b       	subi	r30, 0xBE	; 190
    9792:	ff 4f       	sbci	r31, 0xFF	; 255
    9794:	b0 80       	ld	r11, Z
    9796:	8b 2d       	mov	r24, r11
    9798:	90 e0       	ldi	r25, 0x00	; 0
    979a:	f8 01       	movw	r30, r16
    979c:	92 87       	std	Z+10, r25	; 0x0a
    979e:	81 87       	std	Z+9, r24	; 0x09
    97a0:	00 97       	sbiw	r24, 0x00	; 0
    97a2:	31 f2       	breq	.-116    	; 0x9730 <mount_volume+0x108>
    97a4:	9c 01       	movw	r18, r24
    97a6:	21 50       	subi	r18, 0x01	; 1
    97a8:	31 09       	sbc	r19, r1
    97aa:	82 23       	and	r24, r18
    97ac:	93 23       	and	r25, r19
    97ae:	89 2b       	or	r24, r25
    97b0:	09 f0       	breq	.+2      	; 0x97b4 <mount_volume+0x18c>
    97b2:	be cf       	rjmp	.-132    	; 0x9730 <mount_volume+0x108>
    97b4:	ea 5b       	subi	r30, 0xBA	; 186
    97b6:	ff 4f       	sbci	r31, 0xFF	; 255
    97b8:	80 80       	ld	r8, Z
    97ba:	91 80       	ldd	r9, Z+1	; 0x01
    97bc:	f8 01       	movw	r30, r16
    97be:	90 86       	std	Z+8, r9	; 0x08
    97c0:	87 82       	std	Z+7, r8	; 0x07
    97c2:	c4 01       	movw	r24, r8
    97c4:	8f 70       	andi	r24, 0x0F	; 15
    97c6:	99 27       	eor	r25, r25
    97c8:	89 2b       	or	r24, r25
    97ca:	09 f0       	breq	.+2      	; 0x97ce <mount_volume+0x1a6>
    97cc:	b1 cf       	rjmp	.-158    	; 0x9730 <mount_volume+0x108>
    97ce:	e8 5b       	subi	r30, 0xB8	; 184
    97d0:	ff 4f       	sbci	r31, 0xFF	; 255
    97d2:	80 81       	ld	r24, Z
    97d4:	91 81       	ldd	r25, Z+1	; 0x01
    97d6:	6c 01       	movw	r12, r24
    97d8:	e1 2c       	mov	r14, r1
    97da:	f1 2c       	mov	r15, r1
    97dc:	89 2b       	or	r24, r25
    97de:	31 f4       	brne	.+12     	; 0x97ec <mount_volume+0x1c4>
    97e0:	c8 01       	movw	r24, r16
    97e2:	8b 5a       	subi	r24, 0xAB	; 171
    97e4:	9f 4f       	sbci	r25, 0xFF	; 255
    97e6:	ca d9       	rcall	.-3180   	; 0x8b7c <ld_dword>
    97e8:	6b 01       	movw	r12, r22
    97ea:	7c 01       	movw	r14, r24
    97ec:	f8 01       	movw	r30, r16
    97ee:	ed 5b       	subi	r30, 0xBD	; 189
    97f0:	ff 4f       	sbci	r31, 0xFF	; 255
    97f2:	01 90       	ld	r0, Z+
    97f4:	f0 81       	ld	r31, Z
    97f6:	e0 2d       	mov	r30, r0
    97f8:	30 97       	sbiw	r30, 0x00	; 0
    97fa:	09 f4       	brne	.+2      	; 0x97fe <mount_volume+0x1d6>
    97fc:	99 cf       	rjmp	.-206    	; 0x9730 <mount_volume+0x108>
    97fe:	aa 2d       	mov	r26, r10
    9800:	b0 e0       	ldi	r27, 0x00	; 0
    9802:	a3 01       	movw	r20, r6
    9804:	92 01       	movw	r18, r4
    9806:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    980a:	69 8f       	std	Y+25, r22	; 0x19
    980c:	7a 8f       	std	Y+26, r23	; 0x1a
    980e:	8b 8f       	std	Y+27, r24	; 0x1b
    9810:	9c 8f       	std	Y+28, r25	; 0x1c
    9812:	9f 01       	movw	r18, r30
    9814:	40 e0       	ldi	r20, 0x00	; 0
    9816:	50 e0       	ldi	r21, 0x00	; 0
    9818:	2d 8f       	std	Y+29, r18	; 0x1d
    981a:	3e 8f       	std	Y+30, r19	; 0x1e
    981c:	4f 8f       	std	Y+31, r20	; 0x1f
    981e:	58 a3       	std	Y+32, r21	; 0x20
    9820:	c4 01       	movw	r24, r8
    9822:	f4 e0       	ldi	r31, 0x04	; 4
    9824:	96 95       	lsr	r25
    9826:	87 95       	ror	r24
    9828:	fa 95       	dec	r31
    982a:	e1 f7       	brne	.-8      	; 0x9824 <mount_volume+0x1fc>
    982c:	28 0f       	add	r18, r24
    982e:	39 1f       	adc	r19, r25
    9830:	41 1d       	adc	r20, r1
    9832:	51 1d       	adc	r21, r1
    9834:	da 01       	movw	r26, r20
    9836:	c9 01       	movw	r24, r18
    9838:	29 8d       	ldd	r18, Y+25	; 0x19
    983a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    983c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    983e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9840:	28 0f       	add	r18, r24
    9842:	39 1f       	adc	r19, r25
    9844:	4a 1f       	adc	r20, r26
    9846:	5b 1f       	adc	r21, r27
    9848:	2d 8b       	std	Y+21, r18	; 0x15
    984a:	3e 8b       	std	Y+22, r19	; 0x16
    984c:	4f 8b       	std	Y+23, r20	; 0x17
    984e:	58 8f       	std	Y+24, r21	; 0x18
    9850:	c2 16       	cp	r12, r18
    9852:	d3 06       	cpc	r13, r19
    9854:	e4 06       	cpc	r14, r20
    9856:	f5 06       	cpc	r15, r21
    9858:	08 f4       	brcc	.+2      	; 0x985c <mount_volume+0x234>
    985a:	6a cf       	rjmp	.-300    	; 0x9730 <mount_volume+0x108>
    985c:	c7 01       	movw	r24, r14
    985e:	b6 01       	movw	r22, r12
    9860:	62 1b       	sub	r22, r18
    9862:	73 0b       	sbc	r23, r19
    9864:	84 0b       	sbc	r24, r20
    9866:	95 0b       	sbc	r25, r21
    9868:	2b 2d       	mov	r18, r11
    986a:	30 e0       	ldi	r19, 0x00	; 0
    986c:	40 e0       	ldi	r20, 0x00	; 0
    986e:	50 e0       	ldi	r21, 0x00	; 0
    9870:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    9874:	da 01       	movw	r26, r20
    9876:	c9 01       	movw	r24, r18
    9878:	01 97       	sbiw	r24, 0x01	; 1
    987a:	a1 09       	sbc	r26, r1
    987c:	b1 09       	sbc	r27, r1
    987e:	85 3f       	cpi	r24, 0xF5	; 245
    9880:	9f 4f       	sbci	r25, 0xFF	; 255
    9882:	af 4f       	sbci	r26, 0xFF	; 255
    9884:	bf 40       	sbci	r27, 0x0F	; 15
    9886:	08 f0       	brcs	.+2      	; 0x988a <mount_volume+0x262>
    9888:	53 cf       	rjmp	.-346    	; 0x9730 <mount_volume+0x108>
    988a:	26 3f       	cpi	r18, 0xF6	; 246
    988c:	8f ef       	ldi	r24, 0xFF	; 255
    988e:	38 07       	cpc	r19, r24
    9890:	41 05       	cpc	r20, r1
    9892:	51 05       	cpc	r21, r1
    9894:	50 f4       	brcc	.+20     	; 0x98aa <mount_volume+0x282>
    9896:	26 3f       	cpi	r18, 0xF6	; 246
    9898:	9f e0       	ldi	r25, 0x0F	; 15
    989a:	39 07       	cpc	r19, r25
    989c:	41 05       	cpc	r20, r1
    989e:	51 05       	cpc	r21, r1
    98a0:	40 f4       	brcc	.+16     	; 0x98b2 <mount_volume+0x28a>
    98a2:	aa 24       	eor	r10, r10
    98a4:	a3 94       	inc	r10
    98a6:	b1 2c       	mov	r11, r1
    98a8:	07 c0       	rjmp	.+14     	; 0x98b8 <mount_volume+0x290>
    98aa:	73 e0       	ldi	r23, 0x03	; 3
    98ac:	a7 2e       	mov	r10, r23
    98ae:	b1 2c       	mov	r11, r1
    98b0:	03 c0       	rjmp	.+6      	; 0x98b8 <mount_volume+0x290>
    98b2:	62 e0       	ldi	r22, 0x02	; 2
    98b4:	a6 2e       	mov	r10, r22
    98b6:	b1 2c       	mov	r11, r1
    98b8:	69 01       	movw	r12, r18
    98ba:	7a 01       	movw	r14, r20
    98bc:	a2 e0       	ldi	r26, 0x02	; 2
    98be:	ca 0e       	add	r12, r26
    98c0:	d1 1c       	adc	r13, r1
    98c2:	e1 1c       	adc	r14, r1
    98c4:	f1 1c       	adc	r15, r1
    98c6:	f8 01       	movw	r30, r16
    98c8:	c1 8e       	std	Z+25, r12	; 0x19
    98ca:	d2 8e       	std	Z+26, r13	; 0x1a
    98cc:	e3 8e       	std	Z+27, r14	; 0x1b
    98ce:	f4 8e       	std	Z+28, r15	; 0x1c
    98d0:	29 89       	ldd	r18, Y+17	; 0x11
    98d2:	3a 89       	ldd	r19, Y+18	; 0x12
    98d4:	4b 89       	ldd	r20, Y+19	; 0x13
    98d6:	5c 89       	ldd	r21, Y+20	; 0x14
    98d8:	21 a3       	std	Z+33, r18	; 0x21
    98da:	32 a3       	std	Z+34, r19	; 0x22
    98dc:	43 a3       	std	Z+35, r20	; 0x23
    98de:	54 a3       	std	Z+36, r21	; 0x24
    98e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    98e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    98e4:	af 8d       	ldd	r26, Y+31	; 0x1f
    98e6:	b8 a1       	ldd	r27, Y+32	; 0x20
    98e8:	28 0f       	add	r18, r24
    98ea:	39 1f       	adc	r19, r25
    98ec:	4a 1f       	adc	r20, r26
    98ee:	5b 1f       	adc	r21, r27
    98f0:	2d 8f       	std	Y+29, r18	; 0x1d
    98f2:	3e 8f       	std	Y+30, r19	; 0x1e
    98f4:	4f 8f       	std	Y+31, r20	; 0x1f
    98f6:	58 a3       	std	Y+32, r21	; 0x20
    98f8:	25 a3       	std	Z+37, r18	; 0x25
    98fa:	36 a3       	std	Z+38, r19	; 0x26
    98fc:	47 a3       	std	Z+39, r20	; 0x27
    98fe:	50 a7       	std	Z+40, r21	; 0x28
    9900:	49 89       	ldd	r20, Y+17	; 0x11
    9902:	5a 89       	ldd	r21, Y+18	; 0x12
    9904:	6b 89       	ldd	r22, Y+19	; 0x13
    9906:	7c 89       	ldd	r23, Y+20	; 0x14
    9908:	8d 89       	ldd	r24, Y+21	; 0x15
    990a:	9e 89       	ldd	r25, Y+22	; 0x16
    990c:	af 89       	ldd	r26, Y+23	; 0x17
    990e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9910:	48 0f       	add	r20, r24
    9912:	59 1f       	adc	r21, r25
    9914:	6a 1f       	adc	r22, r26
    9916:	7b 1f       	adc	r23, r27
    9918:	45 a7       	std	Z+45, r20	; 0x2d
    991a:	56 a7       	std	Z+46, r21	; 0x2e
    991c:	67 a7       	std	Z+47, r22	; 0x2f
    991e:	70 ab       	std	Z+48, r23	; 0x30
    9920:	f3 e0       	ldi	r31, 0x03	; 3
    9922:	af 16       	cp	r10, r31
    9924:	b1 04       	cpc	r11, r1
    9926:	e9 f4       	brne	.+58     	; 0x9962 <mount_volume+0x33a>
    9928:	f8 01       	movw	r30, r16
    992a:	e1 5a       	subi	r30, 0xA1	; 161
    992c:	ff 4f       	sbci	r31, 0xFF	; 255
    992e:	80 81       	ld	r24, Z
    9930:	91 81       	ldd	r25, Z+1	; 0x01
    9932:	89 2b       	or	r24, r25
    9934:	09 f0       	breq	.+2      	; 0x9938 <mount_volume+0x310>
    9936:	fc ce       	rjmp	.-520    	; 0x9730 <mount_volume+0x108>
    9938:	81 14       	cp	r8, r1
    993a:	91 04       	cpc	r9, r1
    993c:	09 f0       	breq	.+2      	; 0x9940 <mount_volume+0x318>
    993e:	f8 ce       	rjmp	.-528    	; 0x9730 <mount_volume+0x108>
    9940:	c8 01       	movw	r24, r16
    9942:	8f 59       	subi	r24, 0x9F	; 159
    9944:	9f 4f       	sbci	r25, 0xFF	; 255
    9946:	1a d9       	rcall	.-3532   	; 0x8b7c <ld_dword>
    9948:	f8 01       	movw	r30, r16
    994a:	61 a7       	std	Z+41, r22	; 0x29
    994c:	72 a7       	std	Z+42, r23	; 0x2a
    994e:	83 a7       	std	Z+43, r24	; 0x2b
    9950:	94 a7       	std	Z+44, r25	; 0x2c
    9952:	42 e0       	ldi	r20, 0x02	; 2
    9954:	cc 0c       	add	r12, r12
    9956:	dd 1c       	adc	r13, r13
    9958:	ee 1c       	adc	r14, r14
    995a:	ff 1c       	adc	r15, r15
    995c:	4a 95       	dec	r20
    995e:	d1 f7       	brne	.-12     	; 0x9954 <mount_volume+0x32c>
    9960:	33 c0       	rjmp	.+102    	; 0x99c8 <mount_volume+0x3a0>
    9962:	81 14       	cp	r8, r1
    9964:	91 04       	cpc	r9, r1
    9966:	09 f4       	brne	.+2      	; 0x996a <mount_volume+0x342>
    9968:	e3 ce       	rjmp	.-570    	; 0x9730 <mount_volume+0x108>
    996a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    996c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    996e:	af 8d       	ldd	r26, Y+31	; 0x1f
    9970:	b8 a1       	ldd	r27, Y+32	; 0x20
    9972:	29 8d       	ldd	r18, Y+25	; 0x19
    9974:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9976:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9978:	5c 8d       	ldd	r21, Y+28	; 0x1c
    997a:	82 0f       	add	r24, r18
    997c:	93 1f       	adc	r25, r19
    997e:	a4 1f       	adc	r26, r20
    9980:	b5 1f       	adc	r27, r21
    9982:	f8 01       	movw	r30, r16
    9984:	81 a7       	std	Z+41, r24	; 0x29
    9986:	92 a7       	std	Z+42, r25	; 0x2a
    9988:	a3 a7       	std	Z+43, r26	; 0x2b
    998a:	b4 a7       	std	Z+44, r27	; 0x2c
    998c:	f2 e0       	ldi	r31, 0x02	; 2
    998e:	af 16       	cp	r10, r31
    9990:	b1 04       	cpc	r11, r1
    9992:	29 f4       	brne	.+10     	; 0x999e <mount_volume+0x376>
    9994:	cc 0c       	add	r12, r12
    9996:	dd 1c       	adc	r13, r13
    9998:	ee 1c       	adc	r14, r14
    999a:	ff 1c       	adc	r15, r15
    999c:	15 c0       	rjmp	.+42     	; 0x99c8 <mount_volume+0x3a0>
    999e:	a3 e0       	ldi	r26, 0x03	; 3
    99a0:	b0 e0       	ldi	r27, 0x00	; 0
    99a2:	a7 01       	movw	r20, r14
    99a4:	96 01       	movw	r18, r12
    99a6:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    99aa:	dc 01       	movw	r26, r24
    99ac:	cb 01       	movw	r24, r22
    99ae:	b6 95       	lsr	r27
    99b0:	a7 95       	ror	r26
    99b2:	97 95       	ror	r25
    99b4:	87 95       	ror	r24
    99b6:	21 e0       	ldi	r18, 0x01	; 1
    99b8:	c2 22       	and	r12, r18
    99ba:	dd 24       	eor	r13, r13
    99bc:	ee 24       	eor	r14, r14
    99be:	ff 24       	eor	r15, r15
    99c0:	c8 0e       	add	r12, r24
    99c2:	d9 1e       	adc	r13, r25
    99c4:	ea 1e       	adc	r14, r26
    99c6:	fb 1e       	adc	r15, r27
    99c8:	3f ef       	ldi	r19, 0xFF	; 255
    99ca:	c3 0e       	add	r12, r19
    99cc:	31 e0       	ldi	r19, 0x01	; 1
    99ce:	d3 1e       	adc	r13, r19
    99d0:	e1 1c       	adc	r14, r1
    99d2:	f1 1c       	adc	r15, r1
    99d4:	89 e0       	ldi	r24, 0x09	; 9
    99d6:	f6 94       	lsr	r15
    99d8:	e7 94       	ror	r14
    99da:	d7 94       	ror	r13
    99dc:	c7 94       	ror	r12
    99de:	8a 95       	dec	r24
    99e0:	d1 f7       	brne	.-12     	; 0x99d6 <mount_volume+0x3ae>
    99e2:	4c 14       	cp	r4, r12
    99e4:	5d 04       	cpc	r5, r13
    99e6:	6e 04       	cpc	r6, r14
    99e8:	7f 04       	cpc	r7, r15
    99ea:	08 f4       	brcc	.+2      	; 0x99ee <mount_volume+0x3c6>
    99ec:	a1 ce       	rjmp	.-702    	; 0x9730 <mount_volume+0x108>
    99ee:	8f ef       	ldi	r24, 0xFF	; 255
    99f0:	9f ef       	ldi	r25, 0xFF	; 255
    99f2:	dc 01       	movw	r26, r24
    99f4:	f8 01       	movw	r30, r16
    99f6:	81 8b       	std	Z+17, r24	; 0x11
    99f8:	92 8b       	std	Z+18, r25	; 0x12
    99fa:	a3 8b       	std	Z+19, r26	; 0x13
    99fc:	b4 8b       	std	Z+20, r27	; 0x14
    99fe:	85 87       	std	Z+13, r24	; 0x0d
    9a00:	96 87       	std	Z+14, r25	; 0x0e
    9a02:	a7 87       	std	Z+15, r26	; 0x0f
    9a04:	b0 8b       	std	Z+16, r27	; 0x10
    9a06:	80 e8       	ldi	r24, 0x80	; 128
    9a08:	84 83       	std	Z+4, r24	; 0x04
    9a0a:	f3 e0       	ldi	r31, 0x03	; 3
    9a0c:	af 16       	cp	r10, r31
    9a0e:	b1 04       	cpc	r11, r1
    9a10:	09 f0       	breq	.+2      	; 0x9a14 <mount_volume+0x3ec>
    9a12:	3f c0       	rjmp	.+126    	; 0x9a92 <mount_volume+0x46a>
    9a14:	f8 01       	movw	r30, r16
    9a16:	eb 59       	subi	r30, 0x9B	; 155
    9a18:	ff 4f       	sbci	r31, 0xFF	; 255
    9a1a:	80 81       	ld	r24, Z
    9a1c:	91 81       	ldd	r25, Z+1	; 0x01
    9a1e:	01 97       	sbiw	r24, 0x01	; 1
    9a20:	c1 f5       	brne	.+112    	; 0x9a92 <mount_volume+0x46a>
    9a22:	49 89       	ldd	r20, Y+17	; 0x11
    9a24:	5a 89       	ldd	r21, Y+18	; 0x12
    9a26:	6b 89       	ldd	r22, Y+19	; 0x13
    9a28:	7c 89       	ldd	r23, Y+20	; 0x14
    9a2a:	4f 5f       	subi	r20, 0xFF	; 255
    9a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    9a2e:	6f 4f       	sbci	r22, 0xFF	; 255
    9a30:	7f 4f       	sbci	r23, 0xFF	; 255
    9a32:	c8 01       	movw	r24, r16
    9a34:	7e dd       	rcall	.-1284   	; 0x9532 <move_window>
    9a36:	89 2b       	or	r24, r25
    9a38:	61 f5       	brne	.+88     	; 0x9a92 <mount_volume+0x46a>
    9a3a:	f8 01       	movw	r30, r16
    9a3c:	14 82       	std	Z+4, r1	; 0x04
    9a3e:	ed 5c       	subi	r30, 0xCD	; 205
    9a40:	fd 4f       	sbci	r31, 0xFD	; 253
    9a42:	80 81       	ld	r24, Z
    9a44:	91 81       	ldd	r25, Z+1	; 0x01
    9a46:	85 35       	cpi	r24, 0x55	; 85
    9a48:	9a 4a       	sbci	r25, 0xAA	; 170
    9a4a:	19 f5       	brne	.+70     	; 0x9a92 <mount_volume+0x46a>
    9a4c:	c8 01       	movw	r24, r16
    9a4e:	c5 96       	adiw	r24, 0x35	; 53
    9a50:	95 d8       	rcall	.-3798   	; 0x8b7c <ld_dword>
    9a52:	62 35       	cpi	r22, 0x52	; 82
    9a54:	72 45       	sbci	r23, 0x52	; 82
    9a56:	81 46       	sbci	r24, 0x61	; 97
    9a58:	91 44       	sbci	r25, 0x41	; 65
    9a5a:	d9 f4       	brne	.+54     	; 0x9a92 <mount_volume+0x46a>
    9a5c:	c8 01       	movw	r24, r16
    9a5e:	87 5e       	subi	r24, 0xE7	; 231
    9a60:	9d 4f       	sbci	r25, 0xFD	; 253
    9a62:	8c d8       	rcall	.-3816   	; 0x8b7c <ld_dword>
    9a64:	62 37       	cpi	r22, 0x72	; 114
    9a66:	72 47       	sbci	r23, 0x72	; 114
    9a68:	81 44       	sbci	r24, 0x41	; 65
    9a6a:	91 46       	sbci	r25, 0x61	; 97
    9a6c:	91 f4       	brne	.+36     	; 0x9a92 <mount_volume+0x46a>
    9a6e:	c8 01       	movw	r24, r16
    9a70:	83 5e       	subi	r24, 0xE3	; 227
    9a72:	9d 4f       	sbci	r25, 0xFD	; 253
    9a74:	83 d8       	rcall	.-3834   	; 0x8b7c <ld_dword>
    9a76:	f8 01       	movw	r30, r16
    9a78:	61 8b       	std	Z+17, r22	; 0x11
    9a7a:	72 8b       	std	Z+18, r23	; 0x12
    9a7c:	83 8b       	std	Z+19, r24	; 0x13
    9a7e:	94 8b       	std	Z+20, r25	; 0x14
    9a80:	c8 01       	movw	r24, r16
    9a82:	8f 5d       	subi	r24, 0xDF	; 223
    9a84:	9d 4f       	sbci	r25, 0xFD	; 253
    9a86:	7a d8       	rcall	.-3852   	; 0x8b7c <ld_dword>
    9a88:	f8 01       	movw	r30, r16
    9a8a:	65 87       	std	Z+13, r22	; 0x0d
    9a8c:	76 87       	std	Z+14, r23	; 0x0e
    9a8e:	87 87       	std	Z+15, r24	; 0x0f
    9a90:	90 8b       	std	Z+16, r25	; 0x10
    9a92:	d8 01       	movw	r26, r16
    9a94:	ac 92       	st	X, r10
    9a96:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <Fsid>
    9a9a:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <Fsid+0x1>
    9a9e:	01 96       	adiw	r24, 0x01	; 1
    9aa0:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <Fsid+0x1>
    9aa4:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <Fsid>
    9aa8:	f8 01       	movw	r30, r16
    9aaa:	96 83       	std	Z+6, r25	; 0x06
    9aac:	85 83       	std	Z+5, r24	; 0x05
    9aae:	15 8a       	std	Z+21, r1	; 0x15
    9ab0:	16 8a       	std	Z+22, r1	; 0x16
    9ab2:	17 8a       	std	Z+23, r1	; 0x17
    9ab4:	10 8e       	std	Z+24, r1	; 0x18
    9ab6:	06 c0       	rjmp	.+12     	; 0x9ac4 <mount_volume+0x49c>
    9ab8:	8b e0       	ldi	r24, 0x0B	; 11
    9aba:	90 e0       	ldi	r25, 0x00	; 0
    9abc:	0b c0       	rjmp	.+22     	; 0x9ad4 <mount_volume+0x4ac>
    9abe:	8c e0       	ldi	r24, 0x0C	; 12
    9ac0:	90 e0       	ldi	r25, 0x00	; 0
    9ac2:	08 c0       	rjmp	.+16     	; 0x9ad4 <mount_volume+0x4ac>
    9ac4:	80 e0       	ldi	r24, 0x00	; 0
    9ac6:	90 e0       	ldi	r25, 0x00	; 0
    9ac8:	05 c0       	rjmp	.+10     	; 0x9ad4 <mount_volume+0x4ac>
    9aca:	83 e0       	ldi	r24, 0x03	; 3
    9acc:	90 e0       	ldi	r25, 0x00	; 0
    9ace:	02 c0       	rjmp	.+4      	; 0x9ad4 <mount_volume+0x4ac>
    9ad0:	81 e0       	ldi	r24, 0x01	; 1
    9ad2:	90 e0       	ldi	r25, 0x00	; 0
    9ad4:	a0 96       	adiw	r28, 0x20	; 32
    9ad6:	e0 e1       	ldi	r30, 0x10	; 16
    9ad8:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

00009adc <put_fat>:
    9adc:	a6 e0       	ldi	r26, 0x06	; 6
    9ade:	b0 e0       	ldi	r27, 0x00	; 0
    9ae0:	e4 e7       	ldi	r30, 0x74	; 116
    9ae2:	fd e4       	ldi	r31, 0x4D	; 77
    9ae4:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    9ae8:	42 30       	cpi	r20, 0x02	; 2
    9aea:	51 05       	cpc	r21, r1
    9aec:	61 05       	cpc	r22, r1
    9aee:	71 05       	cpc	r23, r1
    9af0:	08 f4       	brcc	.+2      	; 0x9af4 <put_fat+0x18>
    9af2:	e7 c0       	rjmp	.+462    	; 0x9cc2 <put_fat+0x1e6>
    9af4:	fc 01       	movw	r30, r24
    9af6:	c1 8c       	ldd	r12, Z+25	; 0x19
    9af8:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9afa:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9afc:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9afe:	4c 15       	cp	r20, r12
    9b00:	5d 05       	cpc	r21, r13
    9b02:	6e 05       	cpc	r22, r14
    9b04:	7f 05       	cpc	r23, r15
    9b06:	08 f0       	brcs	.+2      	; 0x9b0a <put_fat+0x2e>
    9b08:	dc c0       	rjmp	.+440    	; 0x9cc2 <put_fat+0x1e6>
    9b0a:	28 01       	movw	r4, r16
    9b0c:	39 01       	movw	r6, r18
    9b0e:	6a 01       	movw	r12, r20
    9b10:	7b 01       	movw	r14, r22
    9b12:	9e 83       	std	Y+6, r25	; 0x06
    9b14:	8d 83       	std	Y+5, r24	; 0x05
    9b16:	80 81       	ld	r24, Z
    9b18:	82 30       	cpi	r24, 0x02	; 2
    9b1a:	09 f4       	brne	.+2      	; 0x9b1e <put_fat+0x42>
    9b1c:	73 c0       	rjmp	.+230    	; 0x9c04 <put_fat+0x128>
    9b1e:	83 30       	cpi	r24, 0x03	; 3
    9b20:	09 f4       	brne	.+2      	; 0x9b24 <put_fat+0x48>
    9b22:	92 c0       	rjmp	.+292    	; 0x9c48 <put_fat+0x16c>
    9b24:	81 30       	cpi	r24, 0x01	; 1
    9b26:	09 f0       	breq	.+2      	; 0x9b2a <put_fat+0x4e>
    9b28:	cc c0       	rjmp	.+408    	; 0x9cc2 <put_fat+0x1e6>
    9b2a:	4a 01       	movw	r8, r20
    9b2c:	96 94       	lsr	r9
    9b2e:	87 94       	ror	r8
    9b30:	84 0e       	add	r8, r20
    9b32:	95 1e       	adc	r9, r21
    9b34:	c4 01       	movw	r24, r8
    9b36:	89 2f       	mov	r24, r25
    9b38:	99 27       	eor	r25, r25
    9b3a:	86 95       	lsr	r24
    9b3c:	45 a1       	ldd	r20, Z+37	; 0x25
    9b3e:	56 a1       	ldd	r21, Z+38	; 0x26
    9b40:	67 a1       	ldd	r22, Z+39	; 0x27
    9b42:	70 a5       	ldd	r23, Z+40	; 0x28
    9b44:	48 0f       	add	r20, r24
    9b46:	59 1f       	adc	r21, r25
    9b48:	61 1d       	adc	r22, r1
    9b4a:	71 1d       	adc	r23, r1
    9b4c:	cf 01       	movw	r24, r30
    9b4e:	f1 dc       	rcall	.-1566   	; 0x9532 <move_window>
    9b50:	5c 01       	movw	r10, r24
    9b52:	89 2b       	or	r24, r25
    9b54:	09 f0       	breq	.+2      	; 0x9b58 <put_fat+0x7c>
    9b56:	b8 c0       	rjmp	.+368    	; 0x9cc8 <put_fat+0x1ec>
    9b58:	2d 80       	ldd	r2, Y+5	; 0x05
    9b5a:	3e 80       	ldd	r3, Y+6	; 0x06
    9b5c:	f5 e3       	ldi	r31, 0x35	; 53
    9b5e:	2f 0e       	add	r2, r31
    9b60:	31 1c       	adc	r3, r1
    9b62:	84 01       	movw	r16, r8
    9b64:	0f 5f       	subi	r16, 0xFF	; 255
    9b66:	1f 4f       	sbci	r17, 0xFF	; 255
    9b68:	21 e0       	ldi	r18, 0x01	; 1
    9b6a:	92 22       	and	r9, r18
    9b6c:	f1 01       	movw	r30, r2
    9b6e:	e8 0d       	add	r30, r8
    9b70:	f9 1d       	adc	r31, r9
    9b72:	d7 01       	movw	r26, r14
    9b74:	c6 01       	movw	r24, r12
    9b76:	81 70       	andi	r24, 0x01	; 1
    9b78:	99 27       	eor	r25, r25
    9b7a:	aa 27       	eor	r26, r26
    9b7c:	bb 27       	eor	r27, r27
    9b7e:	89 83       	std	Y+1, r24	; 0x01
    9b80:	9a 83       	std	Y+2, r25	; 0x02
    9b82:	ab 83       	std	Y+3, r26	; 0x03
    9b84:	bc 83       	std	Y+4, r27	; 0x04
    9b86:	c0 fe       	sbrs	r12, 0
    9b88:	09 c0       	rjmp	.+18     	; 0x9b9c <put_fat+0xc0>
    9b8a:	80 81       	ld	r24, Z
    9b8c:	28 2f       	mov	r18, r24
    9b8e:	2f 70       	andi	r18, 0x0F	; 15
    9b90:	a0 e1       	ldi	r26, 0x10	; 16
    9b92:	4a 9e       	mul	r4, r26
    9b94:	c0 01       	movw	r24, r0
    9b96:	11 24       	eor	r1, r1
    9b98:	82 2b       	or	r24, r18
    9b9a:	01 c0       	rjmp	.+2      	; 0x9b9e <put_fat+0xc2>
    9b9c:	84 2d       	mov	r24, r4
    9b9e:	80 83       	st	Z, r24
    9ba0:	81 e0       	ldi	r24, 0x01	; 1
    9ba2:	ed 81       	ldd	r30, Y+5	; 0x05
    9ba4:	fe 81       	ldd	r31, Y+6	; 0x06
    9ba6:	83 83       	std	Z+3, r24	; 0x03
    9ba8:	45 a1       	ldd	r20, Z+37	; 0x25
    9baa:	56 a1       	ldd	r21, Z+38	; 0x26
    9bac:	67 a1       	ldd	r22, Z+39	; 0x27
    9bae:	70 a5       	ldd	r23, Z+40	; 0x28
    9bb0:	c8 01       	movw	r24, r16
    9bb2:	89 2f       	mov	r24, r25
    9bb4:	99 27       	eor	r25, r25
    9bb6:	86 95       	lsr	r24
    9bb8:	48 0f       	add	r20, r24
    9bba:	59 1f       	adc	r21, r25
    9bbc:	61 1d       	adc	r22, r1
    9bbe:	71 1d       	adc	r23, r1
    9bc0:	cf 01       	movw	r24, r30
    9bc2:	b7 dc       	rcall	.-1682   	; 0x9532 <move_window>
    9bc4:	5c 01       	movw	r10, r24
    9bc6:	89 2b       	or	r24, r25
    9bc8:	09 f0       	breq	.+2      	; 0x9bcc <put_fat+0xf0>
    9bca:	7e c0       	rjmp	.+252    	; 0x9cc8 <put_fat+0x1ec>
    9bcc:	11 70       	andi	r17, 0x01	; 1
    9bce:	f1 01       	movw	r30, r2
    9bd0:	e0 0f       	add	r30, r16
    9bd2:	f1 1f       	adc	r31, r17
    9bd4:	89 81       	ldd	r24, Y+1	; 0x01
    9bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    9bd8:	ab 81       	ldd	r26, Y+3	; 0x03
    9bda:	bc 81       	ldd	r27, Y+4	; 0x04
    9bdc:	89 2b       	or	r24, r25
    9bde:	8a 2b       	or	r24, r26
    9be0:	8b 2b       	or	r24, r27
    9be2:	41 f0       	breq	.+16     	; 0x9bf4 <put_fat+0x118>
    9be4:	54 e0       	ldi	r21, 0x04	; 4
    9be6:	76 94       	lsr	r7
    9be8:	67 94       	ror	r6
    9bea:	57 94       	ror	r5
    9bec:	47 94       	ror	r4
    9bee:	5a 95       	dec	r21
    9bf0:	d1 f7       	brne	.-12     	; 0x9be6 <put_fat+0x10a>
    9bf2:	06 c0       	rjmp	.+12     	; 0x9c00 <put_fat+0x124>
    9bf4:	00 81       	ld	r16, Z
    9bf6:	00 7f       	andi	r16, 0xF0	; 240
    9bf8:	85 2d       	mov	r24, r5
    9bfa:	8f 70       	andi	r24, 0x0F	; 15
    9bfc:	40 2e       	mov	r4, r16
    9bfe:	48 2a       	or	r4, r24
    9c00:	40 82       	st	Z, r4
    9c02:	5a c0       	rjmp	.+180    	; 0x9cb8 <put_fat+0x1dc>
    9c04:	77 27       	eor	r23, r23
    9c06:	6f 2d       	mov	r22, r15
    9c08:	5e 2d       	mov	r21, r14
    9c0a:	4d 2d       	mov	r20, r13
    9c0c:	ed 81       	ldd	r30, Y+5	; 0x05
    9c0e:	fe 81       	ldd	r31, Y+6	; 0x06
    9c10:	85 a1       	ldd	r24, Z+37	; 0x25
    9c12:	96 a1       	ldd	r25, Z+38	; 0x26
    9c14:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c16:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c18:	48 0f       	add	r20, r24
    9c1a:	59 1f       	adc	r21, r25
    9c1c:	6a 1f       	adc	r22, r26
    9c1e:	7b 1f       	adc	r23, r27
    9c20:	cf 01       	movw	r24, r30
    9c22:	87 dc       	rcall	.-1778   	; 0x9532 <move_window>
    9c24:	5c 01       	movw	r10, r24
    9c26:	89 2b       	or	r24, r25
    9c28:	09 f0       	breq	.+2      	; 0x9c2c <put_fat+0x150>
    9c2a:	4e c0       	rjmp	.+156    	; 0x9cc8 <put_fat+0x1ec>
    9c2c:	ed 81       	ldd	r30, Y+5	; 0x05
    9c2e:	fe 81       	ldd	r31, Y+6	; 0x06
    9c30:	f5 96       	adiw	r30, 0x35	; 53
    9c32:	cc 0c       	add	r12, r12
    9c34:	dd 1c       	adc	r13, r13
    9c36:	e8 94       	clt
    9c38:	c0 f8       	bld	r12, 0
    9c3a:	21 e0       	ldi	r18, 0x01	; 1
    9c3c:	d2 22       	and	r13, r18
    9c3e:	ec 0d       	add	r30, r12
    9c40:	fd 1d       	adc	r31, r13
    9c42:	40 82       	st	Z, r4
    9c44:	51 82       	std	Z+1, r5	; 0x01
    9c46:	38 c0       	rjmp	.+112    	; 0x9cb8 <put_fat+0x1dc>
    9c48:	ed 81       	ldd	r30, Y+5	; 0x05
    9c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    9c4c:	85 a1       	ldd	r24, Z+37	; 0x25
    9c4e:	96 a1       	ldd	r25, Z+38	; 0x26
    9c50:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c52:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c54:	27 e0       	ldi	r18, 0x07	; 7
    9c56:	76 95       	lsr	r23
    9c58:	67 95       	ror	r22
    9c5a:	57 95       	ror	r21
    9c5c:	47 95       	ror	r20
    9c5e:	2a 95       	dec	r18
    9c60:	d1 f7       	brne	.-12     	; 0x9c56 <put_fat+0x17a>
    9c62:	48 0f       	add	r20, r24
    9c64:	59 1f       	adc	r21, r25
    9c66:	6a 1f       	adc	r22, r26
    9c68:	7b 1f       	adc	r23, r27
    9c6a:	cf 01       	movw	r24, r30
    9c6c:	62 dc       	rcall	.-1852   	; 0x9532 <move_window>
    9c6e:	5c 01       	movw	r10, r24
    9c70:	89 2b       	or	r24, r25
    9c72:	51 f5       	brne	.+84     	; 0x9cc8 <put_fat+0x1ec>
    9c74:	4d 81       	ldd	r20, Y+5	; 0x05
    9c76:	5e 81       	ldd	r21, Y+6	; 0x06
    9c78:	4b 5c       	subi	r20, 0xCB	; 203
    9c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    9c7c:	cc 0c       	add	r12, r12
    9c7e:	dd 1c       	adc	r13, r13
    9c80:	cc 0c       	add	r12, r12
    9c82:	dd 1c       	adc	r13, r13
    9c84:	fc ef       	ldi	r31, 0xFC	; 252
    9c86:	cf 22       	and	r12, r31
    9c88:	f1 e0       	ldi	r31, 0x01	; 1
    9c8a:	df 22       	and	r13, r31
    9c8c:	c4 0e       	add	r12, r20
    9c8e:	d5 1e       	adc	r13, r21
    9c90:	c6 01       	movw	r24, r12
    9c92:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <ld_dword>
    9c96:	2f e0       	ldi	r18, 0x0F	; 15
    9c98:	72 22       	and	r7, r18
    9c9a:	dc 01       	movw	r26, r24
    9c9c:	cb 01       	movw	r24, r22
    9c9e:	88 27       	eor	r24, r24
    9ca0:	99 27       	eor	r25, r25
    9ca2:	aa 27       	eor	r26, r26
    9ca4:	b0 7f       	andi	r27, 0xF0	; 240
    9ca6:	b3 01       	movw	r22, r6
    9ca8:	a2 01       	movw	r20, r4
    9caa:	48 2b       	or	r20, r24
    9cac:	59 2b       	or	r21, r25
    9cae:	6a 2b       	or	r22, r26
    9cb0:	7b 2b       	or	r23, r27
    9cb2:	c6 01       	movw	r24, r12
    9cb4:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
    9cb8:	81 e0       	ldi	r24, 0x01	; 1
    9cba:	ed 81       	ldd	r30, Y+5	; 0x05
    9cbc:	fe 81       	ldd	r31, Y+6	; 0x06
    9cbe:	83 83       	std	Z+3, r24	; 0x03
    9cc0:	03 c0       	rjmp	.+6      	; 0x9cc8 <put_fat+0x1ec>
    9cc2:	82 e0       	ldi	r24, 0x02	; 2
    9cc4:	a8 2e       	mov	r10, r24
    9cc6:	b1 2c       	mov	r11, r1
    9cc8:	c5 01       	movw	r24, r10
    9cca:	26 96       	adiw	r28, 0x06	; 6
    9ccc:	e2 e1       	ldi	r30, 0x12	; 18
    9cce:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00009cd2 <get_fat.isra.10>:
    9cd2:	a0 e0       	ldi	r26, 0x00	; 0
    9cd4:	b0 e0       	ldi	r27, 0x00	; 0
    9cd6:	ef e6       	ldi	r30, 0x6F	; 111
    9cd8:	fe e4       	ldi	r31, 0x4E	; 78
    9cda:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
    9cde:	42 30       	cpi	r20, 0x02	; 2
    9ce0:	51 05       	cpc	r21, r1
    9ce2:	61 05       	cpc	r22, r1
    9ce4:	71 05       	cpc	r23, r1
    9ce6:	08 f4       	brcc	.+2      	; 0x9cea <get_fat.isra.10+0x18>
    9ce8:	9f c0       	rjmp	.+318    	; 0x9e28 <get_fat.isra.10+0x156>
    9cea:	fc 01       	movw	r30, r24
    9cec:	01 8d       	ldd	r16, Z+25	; 0x19
    9cee:	12 8d       	ldd	r17, Z+26	; 0x1a
    9cf0:	23 8d       	ldd	r18, Z+27	; 0x1b
    9cf2:	34 8d       	ldd	r19, Z+28	; 0x1c
    9cf4:	40 17       	cp	r20, r16
    9cf6:	51 07       	cpc	r21, r17
    9cf8:	62 07       	cpc	r22, r18
    9cfa:	73 07       	cpc	r23, r19
    9cfc:	08 f0       	brcs	.+2      	; 0x9d00 <get_fat.isra.10+0x2e>
    9cfe:	94 c0       	rjmp	.+296    	; 0x9e28 <get_fat.isra.10+0x156>
    9d00:	6a 01       	movw	r12, r20
    9d02:	7b 01       	movw	r14, r22
    9d04:	8c 01       	movw	r16, r24
    9d06:	80 81       	ld	r24, Z
    9d08:	82 30       	cpi	r24, 0x02	; 2
    9d0a:	09 f4       	brne	.+2      	; 0x9d0e <get_fat.isra.10+0x3c>
    9d0c:	4b c0       	rjmp	.+150    	; 0x9da4 <get_fat.isra.10+0xd2>
    9d0e:	83 30       	cpi	r24, 0x03	; 3
    9d10:	09 f4       	brne	.+2      	; 0x9d14 <get_fat.isra.10+0x42>
    9d12:	67 c0       	rjmp	.+206    	; 0x9de2 <get_fat.isra.10+0x110>
    9d14:	81 30       	cpi	r24, 0x01	; 1
    9d16:	09 f0       	breq	.+2      	; 0x9d1a <get_fat.isra.10+0x48>
    9d18:	87 c0       	rjmp	.+270    	; 0x9e28 <get_fat.isra.10+0x156>
    9d1a:	ea 01       	movw	r28, r20
    9d1c:	d6 95       	lsr	r29
    9d1e:	c7 95       	ror	r28
    9d20:	cc 0d       	add	r28, r12
    9d22:	dd 1d       	adc	r29, r13
    9d24:	ce 01       	movw	r24, r28
    9d26:	89 2f       	mov	r24, r25
    9d28:	99 27       	eor	r25, r25
    9d2a:	86 95       	lsr	r24
    9d2c:	45 a1       	ldd	r20, Z+37	; 0x25
    9d2e:	56 a1       	ldd	r21, Z+38	; 0x26
    9d30:	67 a1       	ldd	r22, Z+39	; 0x27
    9d32:	70 a5       	ldd	r23, Z+40	; 0x28
    9d34:	48 0f       	add	r20, r24
    9d36:	59 1f       	adc	r21, r25
    9d38:	61 1d       	adc	r22, r1
    9d3a:	71 1d       	adc	r23, r1
    9d3c:	cf 01       	movw	r24, r30
    9d3e:	f9 db       	rcall	.-2062   	; 0x9532 <move_window>
    9d40:	89 2b       	or	r24, r25
    9d42:	21 f0       	breq	.+8      	; 0x9d4c <get_fat.isra.10+0x7a>
    9d44:	6f ef       	ldi	r22, 0xFF	; 255
    9d46:	7f ef       	ldi	r23, 0xFF	; 255
    9d48:	cb 01       	movw	r24, r22
    9d4a:	72 c0       	rjmp	.+228    	; 0x9e30 <get_fat.isra.10+0x15e>
    9d4c:	5e 01       	movw	r10, r28
    9d4e:	ff ef       	ldi	r31, 0xFF	; 255
    9d50:	af 1a       	sub	r10, r31
    9d52:	bf 0a       	sbc	r11, r31
    9d54:	d1 70       	andi	r29, 0x01	; 1
    9d56:	c0 0f       	add	r28, r16
    9d58:	d1 1f       	adc	r29, r17
    9d5a:	cd a9       	ldd	r28, Y+53	; 0x35
    9d5c:	c5 01       	movw	r24, r10
    9d5e:	89 2f       	mov	r24, r25
    9d60:	99 27       	eor	r25, r25
    9d62:	86 95       	lsr	r24
    9d64:	f8 01       	movw	r30, r16
    9d66:	45 a1       	ldd	r20, Z+37	; 0x25
    9d68:	56 a1       	ldd	r21, Z+38	; 0x26
    9d6a:	67 a1       	ldd	r22, Z+39	; 0x27
    9d6c:	70 a5       	ldd	r23, Z+40	; 0x28
    9d6e:	48 0f       	add	r20, r24
    9d70:	59 1f       	adc	r21, r25
    9d72:	61 1d       	adc	r22, r1
    9d74:	71 1d       	adc	r23, r1
    9d76:	c8 01       	movw	r24, r16
    9d78:	dc db       	rcall	.-2120   	; 0x9532 <move_window>
    9d7a:	89 2b       	or	r24, r25
    9d7c:	19 f7       	brne	.-58     	; 0x9d44 <get_fat.isra.10+0x72>
    9d7e:	f1 e0       	ldi	r31, 0x01	; 1
    9d80:	bf 22       	and	r11, r31
    9d82:	f8 01       	movw	r30, r16
    9d84:	ea 0d       	add	r30, r10
    9d86:	fb 1d       	adc	r31, r11
    9d88:	85 a9       	ldd	r24, Z+53	; 0x35
    9d8a:	6c 2f       	mov	r22, r28
    9d8c:	70 e0       	ldi	r23, 0x00	; 0
    9d8e:	78 2b       	or	r23, r24
    9d90:	c0 fe       	sbrs	r12, 0
    9d92:	06 c0       	rjmp	.+12     	; 0x9da0 <get_fat.isra.10+0xce>
    9d94:	54 e0       	ldi	r21, 0x04	; 4
    9d96:	76 95       	lsr	r23
    9d98:	67 95       	ror	r22
    9d9a:	5a 95       	dec	r21
    9d9c:	e1 f7       	brne	.-8      	; 0x9d96 <get_fat.isra.10+0xc4>
    9d9e:	1e c0       	rjmp	.+60     	; 0x9ddc <get_fat.isra.10+0x10a>
    9da0:	7f 70       	andi	r23, 0x0F	; 15
    9da2:	1c c0       	rjmp	.+56     	; 0x9ddc <get_fat.isra.10+0x10a>
    9da4:	77 27       	eor	r23, r23
    9da6:	6f 2d       	mov	r22, r15
    9da8:	5e 2d       	mov	r21, r14
    9daa:	4d 2d       	mov	r20, r13
    9dac:	85 a1       	ldd	r24, Z+37	; 0x25
    9dae:	96 a1       	ldd	r25, Z+38	; 0x26
    9db0:	a7 a1       	ldd	r26, Z+39	; 0x27
    9db2:	b0 a5       	ldd	r27, Z+40	; 0x28
    9db4:	48 0f       	add	r20, r24
    9db6:	59 1f       	adc	r21, r25
    9db8:	6a 1f       	adc	r22, r26
    9dba:	7b 1f       	adc	r23, r27
    9dbc:	cf 01       	movw	r24, r30
    9dbe:	b9 db       	rcall	.-2190   	; 0x9532 <move_window>
    9dc0:	89 2b       	or	r24, r25
    9dc2:	09 f0       	breq	.+2      	; 0x9dc6 <get_fat.isra.10+0xf4>
    9dc4:	bf cf       	rjmp	.-130    	; 0x9d44 <get_fat.isra.10+0x72>
    9dc6:	cc 0c       	add	r12, r12
    9dc8:	dd 1c       	adc	r13, r13
    9dca:	e8 94       	clt
    9dcc:	c0 f8       	bld	r12, 0
    9dce:	f1 e0       	ldi	r31, 0x01	; 1
    9dd0:	df 22       	and	r13, r31
    9dd2:	f8 01       	movw	r30, r16
    9dd4:	ec 0d       	add	r30, r12
    9dd6:	fd 1d       	adc	r31, r13
    9dd8:	65 a9       	ldd	r22, Z+53	; 0x35
    9dda:	76 a9       	ldd	r23, Z+54	; 0x36
    9ddc:	80 e0       	ldi	r24, 0x00	; 0
    9dde:	90 e0       	ldi	r25, 0x00	; 0
    9de0:	27 c0       	rjmp	.+78     	; 0x9e30 <get_fat.isra.10+0x15e>
    9de2:	85 a1       	ldd	r24, Z+37	; 0x25
    9de4:	96 a1       	ldd	r25, Z+38	; 0x26
    9de6:	a7 a1       	ldd	r26, Z+39	; 0x27
    9de8:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dea:	27 e0       	ldi	r18, 0x07	; 7
    9dec:	76 95       	lsr	r23
    9dee:	67 95       	ror	r22
    9df0:	57 95       	ror	r21
    9df2:	47 95       	ror	r20
    9df4:	2a 95       	dec	r18
    9df6:	d1 f7       	brne	.-12     	; 0x9dec <get_fat.isra.10+0x11a>
    9df8:	48 0f       	add	r20, r24
    9dfa:	59 1f       	adc	r21, r25
    9dfc:	6a 1f       	adc	r22, r26
    9dfe:	7b 1f       	adc	r23, r27
    9e00:	cf 01       	movw	r24, r30
    9e02:	97 db       	rcall	.-2258   	; 0x9532 <move_window>
    9e04:	89 2b       	or	r24, r25
    9e06:	09 f0       	breq	.+2      	; 0x9e0a <get_fat.isra.10+0x138>
    9e08:	9d cf       	rjmp	.-198    	; 0x9d44 <get_fat.isra.10+0x72>
    9e0a:	0b 5c       	subi	r16, 0xCB	; 203
    9e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e0e:	cc 0c       	add	r12, r12
    9e10:	dd 1c       	adc	r13, r13
    9e12:	cc 0c       	add	r12, r12
    9e14:	dd 1c       	adc	r13, r13
    9e16:	c6 01       	movw	r24, r12
    9e18:	8c 7f       	andi	r24, 0xFC	; 252
    9e1a:	91 70       	andi	r25, 0x01	; 1
    9e1c:	80 0f       	add	r24, r16
    9e1e:	91 1f       	adc	r25, r17
    9e20:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <ld_dword>
    9e24:	9f 70       	andi	r25, 0x0F	; 15
    9e26:	04 c0       	rjmp	.+8      	; 0x9e30 <get_fat.isra.10+0x15e>
    9e28:	61 e0       	ldi	r22, 0x01	; 1
    9e2a:	70 e0       	ldi	r23, 0x00	; 0
    9e2c:	80 e0       	ldi	r24, 0x00	; 0
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	cd b7       	in	r28, 0x3d	; 61
    9e32:	de b7       	in	r29, 0x3e	; 62
    9e34:	ea e0       	ldi	r30, 0x0A	; 10
    9e36:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

00009e3a <dir_sdi>:
    9e3a:	a0 e0       	ldi	r26, 0x00	; 0
    9e3c:	b0 e0       	ldi	r27, 0x00	; 0
    9e3e:	e3 e2       	ldi	r30, 0x23	; 35
    9e40:	ff e4       	ldi	r31, 0x4F	; 79
    9e42:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    9e46:	ec 01       	movw	r28, r24
    9e48:	6a 01       	movw	r12, r20
    9e4a:	7b 01       	movw	r14, r22
    9e4c:	41 15       	cp	r20, r1
    9e4e:	51 05       	cpc	r21, r1
    9e50:	80 e2       	ldi	r24, 0x20	; 32
    9e52:	68 07       	cpc	r22, r24
    9e54:	71 05       	cpc	r23, r1
    9e56:	18 f0       	brcs	.+6      	; 0x9e5e <dir_sdi+0x24>
    9e58:	82 e0       	ldi	r24, 0x02	; 2
    9e5a:	90 e0       	ldi	r25, 0x00	; 0
    9e5c:	aa c0       	rjmp	.+340    	; 0x9fb2 <dir_sdi+0x178>
    9e5e:	db 01       	movw	r26, r22
    9e60:	ca 01       	movw	r24, r20
    9e62:	8f 71       	andi	r24, 0x1F	; 31
    9e64:	99 27       	eor	r25, r25
    9e66:	aa 27       	eor	r26, r26
    9e68:	bb 27       	eor	r27, r27
    9e6a:	89 2b       	or	r24, r25
    9e6c:	8a 2b       	or	r24, r26
    9e6e:	8b 2b       	or	r24, r27
    9e70:	99 f7       	brne	.-26     	; 0x9e58 <dir_sdi+0x1e>
    9e72:	08 81       	ld	r16, Y
    9e74:	19 81       	ldd	r17, Y+1	; 0x01
    9e76:	4e 87       	std	Y+14, r20	; 0x0e
    9e78:	5f 87       	std	Y+15, r21	; 0x0f
    9e7a:	68 8b       	std	Y+16, r22	; 0x10
    9e7c:	79 8b       	std	Y+17, r23	; 0x11
    9e7e:	8e 80       	ldd	r8, Y+6	; 0x06
    9e80:	9f 80       	ldd	r9, Y+7	; 0x07
    9e82:	a8 84       	ldd	r10, Y+8	; 0x08
    9e84:	b9 84       	ldd	r11, Y+9	; 0x09
    9e86:	81 14       	cp	r8, r1
    9e88:	91 04       	cpc	r9, r1
    9e8a:	a1 04       	cpc	r10, r1
    9e8c:	b1 04       	cpc	r11, r1
    9e8e:	51 f5       	brne	.+84     	; 0x9ee4 <dir_sdi+0xaa>
    9e90:	f8 01       	movw	r30, r16
    9e92:	80 81       	ld	r24, Z
    9e94:	83 30       	cpi	r24, 0x03	; 3
    9e96:	40 f0       	brcs	.+16     	; 0x9ea8 <dir_sdi+0x6e>
    9e98:	81 a5       	ldd	r24, Z+41	; 0x29
    9e9a:	92 a5       	ldd	r25, Z+42	; 0x2a
    9e9c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9e9e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ea0:	00 97       	sbiw	r24, 0x00	; 0
    9ea2:	a1 05       	cpc	r26, r1
    9ea4:	b1 05       	cpc	r27, r1
    9ea6:	e1 f4       	brne	.+56     	; 0x9ee0 <dir_sdi+0xa6>
    9ea8:	f8 01       	movw	r30, r16
    9eaa:	87 81       	ldd	r24, Z+7	; 0x07
    9eac:	90 85       	ldd	r25, Z+8	; 0x08
    9eae:	a0 e0       	ldi	r26, 0x00	; 0
    9eb0:	b0 e0       	ldi	r27, 0x00	; 0
    9eb2:	b7 01       	movw	r22, r14
    9eb4:	a6 01       	movw	r20, r12
    9eb6:	25 e0       	ldi	r18, 0x05	; 5
    9eb8:	76 95       	lsr	r23
    9eba:	67 95       	ror	r22
    9ebc:	57 95       	ror	r21
    9ebe:	47 95       	ror	r20
    9ec0:	2a 95       	dec	r18
    9ec2:	d1 f7       	brne	.-12     	; 0x9eb8 <dir_sdi+0x7e>
    9ec4:	48 17       	cp	r20, r24
    9ec6:	59 07       	cpc	r21, r25
    9ec8:	6a 07       	cpc	r22, r26
    9eca:	7b 07       	cpc	r23, r27
    9ecc:	28 f6       	brcc	.-118    	; 0x9e58 <dir_sdi+0x1e>
    9ece:	81 a5       	ldd	r24, Z+41	; 0x29
    9ed0:	92 a5       	ldd	r25, Z+42	; 0x2a
    9ed2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ed4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ed6:	8e 8b       	std	Y+22, r24	; 0x16
    9ed8:	9f 8b       	std	Y+23, r25	; 0x17
    9eda:	a8 8f       	std	Y+24, r26	; 0x18
    9edc:	b9 8f       	std	Y+25, r27	; 0x19
    9ede:	3e c0       	rjmp	.+124    	; 0x9f5c <dir_sdi+0x122>
    9ee0:	4c 01       	movw	r8, r24
    9ee2:	5d 01       	movw	r10, r26
    9ee4:	f8 01       	movw	r30, r16
    9ee6:	41 84       	ldd	r4, Z+9	; 0x09
    9ee8:	52 84       	ldd	r5, Z+10	; 0x0a
    9eea:	61 2c       	mov	r6, r1
    9eec:	71 2c       	mov	r7, r1
    9eee:	39 e0       	ldi	r19, 0x09	; 9
    9ef0:	44 0c       	add	r4, r4
    9ef2:	55 1c       	adc	r5, r5
    9ef4:	66 1c       	adc	r6, r6
    9ef6:	77 1c       	adc	r7, r7
    9ef8:	3a 95       	dec	r19
    9efa:	d1 f7       	brne	.-12     	; 0x9ef0 <dir_sdi+0xb6>
    9efc:	b5 01       	movw	r22, r10
    9efe:	a4 01       	movw	r20, r8
    9f00:	c4 14       	cp	r12, r4
    9f02:	d5 04       	cpc	r13, r5
    9f04:	e6 04       	cpc	r14, r6
    9f06:	f7 04       	cpc	r15, r7
    9f08:	10 f1       	brcs	.+68     	; 0x9f4e <dir_sdi+0x114>
    9f0a:	88 81       	ld	r24, Y
    9f0c:	99 81       	ldd	r25, Y+1	; 0x01
    9f0e:	e1 de       	rcall	.-574    	; 0x9cd2 <get_fat.isra.10>
    9f10:	4b 01       	movw	r8, r22
    9f12:	5c 01       	movw	r10, r24
    9f14:	6f 3f       	cpi	r22, 0xFF	; 255
    9f16:	7f 4f       	sbci	r23, 0xFF	; 255
    9f18:	8f 4f       	sbci	r24, 0xFF	; 255
    9f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    9f1c:	09 f4       	brne	.+2      	; 0x9f20 <dir_sdi+0xe6>
    9f1e:	47 c0       	rjmp	.+142    	; 0x9fae <dir_sdi+0x174>
    9f20:	82 e0       	ldi	r24, 0x02	; 2
    9f22:	88 16       	cp	r8, r24
    9f24:	91 04       	cpc	r9, r1
    9f26:	a1 04       	cpc	r10, r1
    9f28:	b1 04       	cpc	r11, r1
    9f2a:	08 f4       	brcc	.+2      	; 0x9f2e <dir_sdi+0xf4>
    9f2c:	95 cf       	rjmp	.-214    	; 0x9e58 <dir_sdi+0x1e>
    9f2e:	f8 01       	movw	r30, r16
    9f30:	81 8d       	ldd	r24, Z+25	; 0x19
    9f32:	92 8d       	ldd	r25, Z+26	; 0x1a
    9f34:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9f36:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9f38:	88 16       	cp	r8, r24
    9f3a:	99 06       	cpc	r9, r25
    9f3c:	aa 06       	cpc	r10, r26
    9f3e:	bb 06       	cpc	r11, r27
    9f40:	08 f0       	brcs	.+2      	; 0x9f44 <dir_sdi+0x10a>
    9f42:	8a cf       	rjmp	.-236    	; 0x9e58 <dir_sdi+0x1e>
    9f44:	c4 18       	sub	r12, r4
    9f46:	d5 08       	sbc	r13, r5
    9f48:	e6 08       	sbc	r14, r6
    9f4a:	f7 08       	sbc	r15, r7
    9f4c:	d7 cf       	rjmp	.-82     	; 0x9efc <dir_sdi+0xc2>
    9f4e:	c8 01       	movw	r24, r16
    9f50:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    9f54:	6e 8b       	std	Y+22, r22	; 0x16
    9f56:	7f 8b       	std	Y+23, r23	; 0x17
    9f58:	88 8f       	std	Y+24, r24	; 0x18
    9f5a:	99 8f       	std	Y+25, r25	; 0x19
    9f5c:	8a 8a       	std	Y+18, r8	; 0x12
    9f5e:	9b 8a       	std	Y+19, r9	; 0x13
    9f60:	ac 8a       	std	Y+20, r10	; 0x14
    9f62:	bd 8a       	std	Y+21, r11	; 0x15
    9f64:	8e 89       	ldd	r24, Y+22	; 0x16
    9f66:	9f 89       	ldd	r25, Y+23	; 0x17
    9f68:	a8 8d       	ldd	r26, Y+24	; 0x18
    9f6a:	b9 8d       	ldd	r27, Y+25	; 0x19
    9f6c:	00 97       	sbiw	r24, 0x00	; 0
    9f6e:	a1 05       	cpc	r26, r1
    9f70:	b1 05       	cpc	r27, r1
    9f72:	09 f4       	brne	.+2      	; 0x9f76 <dir_sdi+0x13c>
    9f74:	71 cf       	rjmp	.-286    	; 0x9e58 <dir_sdi+0x1e>
    9f76:	b7 01       	movw	r22, r14
    9f78:	a6 01       	movw	r20, r12
    9f7a:	29 e0       	ldi	r18, 0x09	; 9
    9f7c:	76 95       	lsr	r23
    9f7e:	67 95       	ror	r22
    9f80:	57 95       	ror	r21
    9f82:	47 95       	ror	r20
    9f84:	2a 95       	dec	r18
    9f86:	d1 f7       	brne	.-12     	; 0x9f7c <dir_sdi+0x142>
    9f88:	84 0f       	add	r24, r20
    9f8a:	95 1f       	adc	r25, r21
    9f8c:	a6 1f       	adc	r26, r22
    9f8e:	b7 1f       	adc	r27, r23
    9f90:	8e 8b       	std	Y+22, r24	; 0x16
    9f92:	9f 8b       	std	Y+23, r25	; 0x17
    9f94:	a8 8f       	std	Y+24, r26	; 0x18
    9f96:	b9 8f       	std	Y+25, r27	; 0x19
    9f98:	0b 5c       	subi	r16, 0xCB	; 203
    9f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    9f9c:	f1 e0       	ldi	r31, 0x01	; 1
    9f9e:	df 22       	and	r13, r31
    9fa0:	c0 0e       	add	r12, r16
    9fa2:	d1 1e       	adc	r13, r17
    9fa4:	db 8e       	std	Y+27, r13	; 0x1b
    9fa6:	ca 8e       	std	Y+26, r12	; 0x1a
    9fa8:	80 e0       	ldi	r24, 0x00	; 0
    9faa:	90 e0       	ldi	r25, 0x00	; 0
    9fac:	02 c0       	rjmp	.+4      	; 0x9fb2 <dir_sdi+0x178>
    9fae:	81 e0       	ldi	r24, 0x01	; 1
    9fb0:	90 e0       	ldi	r25, 0x00	; 0
    9fb2:	cd b7       	in	r28, 0x3d	; 61
    9fb4:	de b7       	in	r29, 0x3e	; 62
    9fb6:	e0 e1       	ldi	r30, 0x10	; 16
    9fb8:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

00009fbc <create_chain>:
    9fbc:	a0 e0       	ldi	r26, 0x00	; 0
    9fbe:	b0 e0       	ldi	r27, 0x00	; 0
    9fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    9fc2:	ff e4       	ldi	r31, 0x4F	; 79
    9fc4:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    9fc8:	8c 01       	movw	r16, r24
    9fca:	2a 01       	movw	r4, r20
    9fcc:	3b 01       	movw	r6, r22
    9fce:	fc 01       	movw	r30, r24
    9fd0:	c0 81       	ld	r28, Z
    9fd2:	d1 81       	ldd	r29, Z+1	; 0x01
    9fd4:	41 15       	cp	r20, r1
    9fd6:	51 05       	cpc	r21, r1
    9fd8:	61 05       	cpc	r22, r1
    9fda:	71 05       	cpc	r23, r1
    9fdc:	99 f4       	brne	.+38     	; 0xa004 <create_chain+0x48>
    9fde:	8d 84       	ldd	r8, Y+13	; 0x0d
    9fe0:	9e 84       	ldd	r9, Y+14	; 0x0e
    9fe2:	af 84       	ldd	r10, Y+15	; 0x0f
    9fe4:	b8 88       	ldd	r11, Y+16	; 0x10
    9fe6:	81 14       	cp	r8, r1
    9fe8:	91 04       	cpc	r9, r1
    9fea:	a1 04       	cpc	r10, r1
    9fec:	b1 04       	cpc	r11, r1
    9fee:	51 f1       	breq	.+84     	; 0xa044 <create_chain+0x88>
    9ff0:	89 8d       	ldd	r24, Y+25	; 0x19
    9ff2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ff4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ff6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ff8:	88 16       	cp	r8, r24
    9ffa:	99 06       	cpc	r9, r25
    9ffc:	aa 06       	cpc	r10, r26
    9ffe:	bb 06       	cpc	r11, r27
    a000:	28 f1       	brcs	.+74     	; 0xa04c <create_chain+0x90>
    a002:	20 c0       	rjmp	.+64     	; 0xa044 <create_chain+0x88>
    a004:	ce 01       	movw	r24, r28
    a006:	65 de       	rcall	.-822    	; 0x9cd2 <get_fat.isra.10>
    a008:	62 30       	cpi	r22, 0x02	; 2
    a00a:	71 05       	cpc	r23, r1
    a00c:	81 05       	cpc	r24, r1
    a00e:	91 05       	cpc	r25, r1
    a010:	08 f4       	brcc	.+2      	; 0xa014 <create_chain+0x58>
    a012:	ea c0       	rjmp	.+468    	; 0xa1e8 <create_chain+0x22c>
    a014:	6f 3f       	cpi	r22, 0xFF	; 255
    a016:	ff ef       	ldi	r31, 0xFF	; 255
    a018:	7f 07       	cpc	r23, r31
    a01a:	8f 07       	cpc	r24, r31
    a01c:	9f 07       	cpc	r25, r31
    a01e:	29 f4       	brne	.+10     	; 0xa02a <create_chain+0x6e>
    a020:	4f ef       	ldi	r20, 0xFF	; 255
    a022:	3f ef       	ldi	r19, 0xFF	; 255
    a024:	2f ef       	ldi	r18, 0xFF	; 255
    a026:	9f ef       	ldi	r25, 0xFF	; 255
    a028:	e7 c0       	rjmp	.+462    	; 0xa1f8 <create_chain+0x23c>
    a02a:	c9 8c       	ldd	r12, Y+25	; 0x19
    a02c:	da 8c       	ldd	r13, Y+26	; 0x1a
    a02e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a030:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a032:	6c 15       	cp	r22, r12
    a034:	7d 05       	cpc	r23, r13
    a036:	8e 05       	cpc	r24, r14
    a038:	9f 05       	cpc	r25, r15
    a03a:	08 f4       	brcc	.+2      	; 0xa03e <create_chain+0x82>
    a03c:	da c0       	rjmp	.+436    	; 0xa1f2 <create_chain+0x236>
    a03e:	53 01       	movw	r10, r6
    a040:	42 01       	movw	r8, r4
    a042:	04 c0       	rjmp	.+8      	; 0xa04c <create_chain+0x90>
    a044:	81 2c       	mov	r8, r1
    a046:	91 2c       	mov	r9, r1
    a048:	54 01       	movw	r10, r8
    a04a:	83 94       	inc	r8
    a04c:	89 89       	ldd	r24, Y+17	; 0x11
    a04e:	9a 89       	ldd	r25, Y+18	; 0x12
    a050:	ab 89       	ldd	r26, Y+19	; 0x13
    a052:	bc 89       	ldd	r27, Y+20	; 0x14
    a054:	89 2b       	or	r24, r25
    a056:	8a 2b       	or	r24, r26
    a058:	8b 2b       	or	r24, r27
    a05a:	11 f4       	brne	.+4      	; 0xa060 <create_chain+0xa4>
    a05c:	40 e0       	ldi	r20, 0x00	; 0
    a05e:	c5 c0       	rjmp	.+394    	; 0xa1ea <create_chain+0x22e>
    a060:	84 14       	cp	r8, r4
    a062:	95 04       	cpc	r9, r5
    a064:	a6 04       	cpc	r10, r6
    a066:	b7 04       	cpc	r11, r7
    a068:	09 f0       	breq	.+2      	; 0xa06c <create_chain+0xb0>
    a06a:	46 c0       	rjmp	.+140    	; 0xa0f8 <create_chain+0x13c>
    a06c:	75 01       	movw	r14, r10
    a06e:	64 01       	movw	r12, r8
    a070:	2f ef       	ldi	r18, 0xFF	; 255
    a072:	c2 1a       	sub	r12, r18
    a074:	d2 0a       	sbc	r13, r18
    a076:	e2 0a       	sbc	r14, r18
    a078:	f2 0a       	sbc	r15, r18
    a07a:	89 8d       	ldd	r24, Y+25	; 0x19
    a07c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a07e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a080:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a082:	c8 16       	cp	r12, r24
    a084:	d9 06       	cpc	r13, r25
    a086:	ea 06       	cpc	r14, r26
    a088:	fb 06       	cpc	r15, r27
    a08a:	28 f0       	brcs	.+10     	; 0xa096 <create_chain+0xda>
    a08c:	92 e0       	ldi	r25, 0x02	; 2
    a08e:	c9 2e       	mov	r12, r25
    a090:	d1 2c       	mov	r13, r1
    a092:	e1 2c       	mov	r14, r1
    a094:	f1 2c       	mov	r15, r1
    a096:	b7 01       	movw	r22, r14
    a098:	a6 01       	movw	r20, r12
    a09a:	f8 01       	movw	r30, r16
    a09c:	80 81       	ld	r24, Z
    a09e:	91 81       	ldd	r25, Z+1	; 0x01
    a0a0:	18 de       	rcall	.-976    	; 0x9cd2 <get_fat.isra.10>
    a0a2:	61 30       	cpi	r22, 0x01	; 1
    a0a4:	71 05       	cpc	r23, r1
    a0a6:	81 05       	cpc	r24, r1
    a0a8:	91 05       	cpc	r25, r1
    a0aa:	09 f4       	brne	.+2      	; 0xa0ae <create_chain+0xf2>
    a0ac:	9d c0       	rjmp	.+314    	; 0xa1e8 <create_chain+0x22c>
    a0ae:	6f 3f       	cpi	r22, 0xFF	; 255
    a0b0:	ff ef       	ldi	r31, 0xFF	; 255
    a0b2:	7f 07       	cpc	r23, r31
    a0b4:	8f 07       	cpc	r24, r31
    a0b6:	9f 07       	cpc	r25, r31
    a0b8:	09 f4       	brne	.+2      	; 0xa0bc <create_chain+0x100>
    a0ba:	b2 cf       	rjmp	.-156    	; 0xa020 <create_chain+0x64>
    a0bc:	67 2b       	or	r22, r23
    a0be:	68 2b       	or	r22, r24
    a0c0:	69 2b       	or	r22, r25
    a0c2:	a9 f0       	breq	.+42     	; 0xa0ee <create_chain+0x132>
    a0c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    a0c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    a0c8:	af 85       	ldd	r26, Y+15	; 0x0f
    a0ca:	b8 89       	ldd	r27, Y+16	; 0x10
    a0cc:	82 30       	cpi	r24, 0x02	; 2
    a0ce:	91 05       	cpc	r25, r1
    a0d0:	a1 05       	cpc	r26, r1
    a0d2:	b1 05       	cpc	r27, r1
    a0d4:	88 f0       	brcs	.+34     	; 0xa0f8 <create_chain+0x13c>
    a0d6:	49 8d       	ldd	r20, Y+25	; 0x19
    a0d8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0de:	84 17       	cp	r24, r20
    a0e0:	95 07       	cpc	r25, r21
    a0e2:	a6 07       	cpc	r26, r22
    a0e4:	b7 07       	cpc	r27, r23
    a0e6:	40 f4       	brcc	.+16     	; 0xa0f8 <create_chain+0x13c>
    a0e8:	4c 01       	movw	r8, r24
    a0ea:	5d 01       	movw	r10, r26
    a0ec:	05 c0       	rjmp	.+10     	; 0xa0f8 <create_chain+0x13c>
    a0ee:	c1 14       	cp	r12, r1
    a0f0:	d1 04       	cpc	r13, r1
    a0f2:	e1 04       	cpc	r14, r1
    a0f4:	f1 04       	cpc	r15, r1
    a0f6:	c9 f5       	brne	.+114    	; 0xa16a <create_chain+0x1ae>
    a0f8:	75 01       	movw	r14, r10
    a0fa:	64 01       	movw	r12, r8
    a0fc:	2f ef       	ldi	r18, 0xFF	; 255
    a0fe:	c2 1a       	sub	r12, r18
    a100:	d2 0a       	sbc	r13, r18
    a102:	e2 0a       	sbc	r14, r18
    a104:	f2 0a       	sbc	r15, r18
    a106:	89 8d       	ldd	r24, Y+25	; 0x19
    a108:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a10a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a10c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a10e:	c8 16       	cp	r12, r24
    a110:	d9 06       	cpc	r13, r25
    a112:	ea 06       	cpc	r14, r26
    a114:	fb 06       	cpc	r15, r27
    a116:	60 f0       	brcs	.+24     	; 0xa130 <create_chain+0x174>
    a118:	82 e0       	ldi	r24, 0x02	; 2
    a11a:	88 16       	cp	r8, r24
    a11c:	91 04       	cpc	r9, r1
    a11e:	a1 04       	cpc	r10, r1
    a120:	b1 04       	cpc	r11, r1
    a122:	08 f4       	brcc	.+2      	; 0xa126 <create_chain+0x16a>
    a124:	9b cf       	rjmp	.-202    	; 0xa05c <create_chain+0xa0>
    a126:	82 e0       	ldi	r24, 0x02	; 2
    a128:	c8 2e       	mov	r12, r24
    a12a:	d1 2c       	mov	r13, r1
    a12c:	e1 2c       	mov	r14, r1
    a12e:	f1 2c       	mov	r15, r1
    a130:	b7 01       	movw	r22, r14
    a132:	a6 01       	movw	r20, r12
    a134:	f8 01       	movw	r30, r16
    a136:	80 81       	ld	r24, Z
    a138:	91 81       	ldd	r25, Z+1	; 0x01
    a13a:	cb dd       	rcall	.-1130   	; 0x9cd2 <get_fat.isra.10>
    a13c:	61 15       	cp	r22, r1
    a13e:	71 05       	cpc	r23, r1
    a140:	81 05       	cpc	r24, r1
    a142:	91 05       	cpc	r25, r1
    a144:	91 f0       	breq	.+36     	; 0xa16a <create_chain+0x1ae>
    a146:	61 30       	cpi	r22, 0x01	; 1
    a148:	71 05       	cpc	r23, r1
    a14a:	81 05       	cpc	r24, r1
    a14c:	91 05       	cpc	r25, r1
    a14e:	09 f4       	brne	.+2      	; 0xa152 <create_chain+0x196>
    a150:	4b c0       	rjmp	.+150    	; 0xa1e8 <create_chain+0x22c>
    a152:	6f 3f       	cpi	r22, 0xFF	; 255
    a154:	7f 4f       	sbci	r23, 0xFF	; 255
    a156:	8f 4f       	sbci	r24, 0xFF	; 255
    a158:	9f 4f       	sbci	r25, 0xFF	; 255
    a15a:	09 f4       	brne	.+2      	; 0xa15e <create_chain+0x1a2>
    a15c:	61 cf       	rjmp	.-318    	; 0xa020 <create_chain+0x64>
    a15e:	c8 14       	cp	r12, r8
    a160:	d9 04       	cpc	r13, r9
    a162:	ea 04       	cpc	r14, r10
    a164:	fb 04       	cpc	r15, r11
    a166:	51 f6       	brne	.-108    	; 0xa0fc <create_chain+0x140>
    a168:	79 cf       	rjmp	.-270    	; 0xa05c <create_chain+0xa0>
    a16a:	0f ef       	ldi	r16, 0xFF	; 255
    a16c:	1f ef       	ldi	r17, 0xFF	; 255
    a16e:	98 01       	movw	r18, r16
    a170:	b7 01       	movw	r22, r14
    a172:	a6 01       	movw	r20, r12
    a174:	ce 01       	movw	r24, r28
    a176:	b2 dc       	rcall	.-1692   	; 0x9adc <put_fat>
    a178:	00 97       	sbiw	r24, 0x00	; 0
    a17a:	99 f5       	brne	.+102    	; 0xa1e2 <create_chain+0x226>
    a17c:	41 14       	cp	r4, r1
    a17e:	51 04       	cpc	r5, r1
    a180:	61 04       	cpc	r6, r1
    a182:	71 04       	cpc	r7, r1
    a184:	e9 f4       	brne	.+58     	; 0xa1c0 <create_chain+0x204>
    a186:	cd 86       	std	Y+13, r12	; 0x0d
    a188:	de 86       	std	Y+14, r13	; 0x0e
    a18a:	ef 86       	std	Y+15, r14	; 0x0f
    a18c:	f8 8a       	std	Y+16, r15	; 0x10
    a18e:	89 89       	ldd	r24, Y+17	; 0x11
    a190:	9a 89       	ldd	r25, Y+18	; 0x12
    a192:	ab 89       	ldd	r26, Y+19	; 0x13
    a194:	bc 89       	ldd	r27, Y+20	; 0x14
    a196:	49 8d       	ldd	r20, Y+25	; 0x19
    a198:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a19a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a19c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a19e:	42 50       	subi	r20, 0x02	; 2
    a1a0:	51 09       	sbc	r21, r1
    a1a2:	61 09       	sbc	r22, r1
    a1a4:	71 09       	sbc	r23, r1
    a1a6:	48 17       	cp	r20, r24
    a1a8:	59 07       	cpc	r21, r25
    a1aa:	6a 07       	cpc	r22, r26
    a1ac:	7b 07       	cpc	r23, r27
    a1ae:	88 f0       	brcs	.+34     	; 0xa1d2 <create_chain+0x216>
    a1b0:	01 97       	sbiw	r24, 0x01	; 1
    a1b2:	a1 09       	sbc	r26, r1
    a1b4:	b1 09       	sbc	r27, r1
    a1b6:	89 8b       	std	Y+17, r24	; 0x11
    a1b8:	9a 8b       	std	Y+18, r25	; 0x12
    a1ba:	ab 8b       	std	Y+19, r26	; 0x13
    a1bc:	bc 8b       	std	Y+20, r27	; 0x14
    a1be:	09 c0       	rjmp	.+18     	; 0xa1d2 <create_chain+0x216>
    a1c0:	97 01       	movw	r18, r14
    a1c2:	86 01       	movw	r16, r12
    a1c4:	b3 01       	movw	r22, r6
    a1c6:	a2 01       	movw	r20, r4
    a1c8:	ce 01       	movw	r24, r28
    a1ca:	88 dc       	rcall	.-1776   	; 0x9adc <put_fat>
    a1cc:	00 97       	sbiw	r24, 0x00	; 0
    a1ce:	d9 f2       	breq	.-74     	; 0xa186 <create_chain+0x1ca>
    a1d0:	08 c0       	rjmp	.+16     	; 0xa1e2 <create_chain+0x226>
    a1d2:	8c 81       	ldd	r24, Y+4	; 0x04
    a1d4:	81 60       	ori	r24, 0x01	; 1
    a1d6:	8c 83       	std	Y+4, r24	; 0x04
    a1d8:	4c 2d       	mov	r20, r12
    a1da:	3d 2d       	mov	r19, r13
    a1dc:	2e 2d       	mov	r18, r14
    a1de:	9f 2d       	mov	r25, r15
    a1e0:	0b c0       	rjmp	.+22     	; 0xa1f8 <create_chain+0x23c>
    a1e2:	01 97       	sbiw	r24, 0x01	; 1
    a1e4:	09 f4       	brne	.+2      	; 0xa1e8 <create_chain+0x22c>
    a1e6:	1c cf       	rjmp	.-456    	; 0xa020 <create_chain+0x64>
    a1e8:	41 e0       	ldi	r20, 0x01	; 1
    a1ea:	30 e0       	ldi	r19, 0x00	; 0
    a1ec:	20 e0       	ldi	r18, 0x00	; 0
    a1ee:	90 e0       	ldi	r25, 0x00	; 0
    a1f0:	03 c0       	rjmp	.+6      	; 0xa1f8 <create_chain+0x23c>
    a1f2:	46 2f       	mov	r20, r22
    a1f4:	37 2f       	mov	r19, r23
    a1f6:	28 2f       	mov	r18, r24
    a1f8:	64 2f       	mov	r22, r20
    a1fa:	73 2f       	mov	r23, r19
    a1fc:	82 2f       	mov	r24, r18
    a1fe:	cd b7       	in	r28, 0x3d	; 61
    a200:	de b7       	in	r29, 0x3e	; 62
    a202:	e0 e1       	ldi	r30, 0x10	; 16
    a204:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

0000a208 <remove_chain>:
    a208:	4f 92       	push	r4
    a20a:	5f 92       	push	r5
    a20c:	6f 92       	push	r6
    a20e:	7f 92       	push	r7
    a210:	af 92       	push	r10
    a212:	bf 92       	push	r11
    a214:	cf 92       	push	r12
    a216:	df 92       	push	r13
    a218:	ef 92       	push	r14
    a21a:	ff 92       	push	r15
    a21c:	0f 93       	push	r16
    a21e:	1f 93       	push	r17
    a220:	cf 93       	push	r28
    a222:	df 93       	push	r29
    a224:	5c 01       	movw	r10, r24
    a226:	6a 01       	movw	r12, r20
    a228:	7b 01       	movw	r14, r22
    a22a:	b9 01       	movw	r22, r18
    a22c:	a8 01       	movw	r20, r16
    a22e:	22 e0       	ldi	r18, 0x02	; 2
    a230:	c2 16       	cp	r12, r18
    a232:	d1 04       	cpc	r13, r1
    a234:	e1 04       	cpc	r14, r1
    a236:	f1 04       	cpc	r15, r1
    a238:	10 f4       	brcc	.+4      	; 0xa23e <remove_chain+0x36>
    a23a:	22 e0       	ldi	r18, 0x02	; 2
    a23c:	27 c0       	rjmp	.+78     	; 0xa28c <remove_chain+0x84>
    a23e:	fc 01       	movw	r30, r24
    a240:	c0 81       	ld	r28, Z
    a242:	d1 81       	ldd	r29, Z+1	; 0x01
    a244:	89 8d       	ldd	r24, Y+25	; 0x19
    a246:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a248:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a24a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a24c:	c8 16       	cp	r12, r24
    a24e:	d9 06       	cpc	r13, r25
    a250:	ea 06       	cpc	r14, r26
    a252:	fb 06       	cpc	r15, r27
    a254:	90 f7       	brcc	.-28     	; 0xa23a <remove_chain+0x32>
    a256:	41 15       	cp	r20, r1
    a258:	51 05       	cpc	r21, r1
    a25a:	61 05       	cpc	r22, r1
    a25c:	71 05       	cpc	r23, r1
    a25e:	41 f0       	breq	.+16     	; 0xa270 <remove_chain+0x68>
    a260:	0f ef       	ldi	r16, 0xFF	; 255
    a262:	1f ef       	ldi	r17, 0xFF	; 255
    a264:	98 01       	movw	r18, r16
    a266:	ce 01       	movw	r24, r28
    a268:	39 dc       	rcall	.-1934   	; 0x9adc <put_fat>
    a26a:	00 97       	sbiw	r24, 0x00	; 0
    a26c:	09 f0       	breq	.+2      	; 0xa270 <remove_chain+0x68>
    a26e:	4c c0       	rjmp	.+152    	; 0xa308 <remove_chain+0x100>
    a270:	b7 01       	movw	r22, r14
    a272:	a6 01       	movw	r20, r12
    a274:	f5 01       	movw	r30, r10
    a276:	80 81       	ld	r24, Z
    a278:	91 81       	ldd	r25, Z+1	; 0x01
    a27a:	2b dd       	rcall	.-1450   	; 0x9cd2 <get_fat.isra.10>
    a27c:	2b 01       	movw	r4, r22
    a27e:	3c 01       	movw	r6, r24
    a280:	61 15       	cp	r22, r1
    a282:	71 05       	cpc	r23, r1
    a284:	81 05       	cpc	r24, r1
    a286:	91 05       	cpc	r25, r1
    a288:	19 f4       	brne	.+6      	; 0xa290 <remove_chain+0x88>
    a28a:	20 e0       	ldi	r18, 0x00	; 0
    a28c:	90 e0       	ldi	r25, 0x00	; 0
    a28e:	3d c0       	rjmp	.+122    	; 0xa30a <remove_chain+0x102>
    a290:	61 30       	cpi	r22, 0x01	; 1
    a292:	71 05       	cpc	r23, r1
    a294:	81 05       	cpc	r24, r1
    a296:	91 05       	cpc	r25, r1
    a298:	81 f2       	breq	.-96     	; 0xa23a <remove_chain+0x32>
    a29a:	6f 3f       	cpi	r22, 0xFF	; 255
    a29c:	7f 4f       	sbci	r23, 0xFF	; 255
    a29e:	8f 4f       	sbci	r24, 0xFF	; 255
    a2a0:	9f 4f       	sbci	r25, 0xFF	; 255
    a2a2:	81 f1       	breq	.+96     	; 0xa304 <remove_chain+0xfc>
    a2a4:	00 e0       	ldi	r16, 0x00	; 0
    a2a6:	10 e0       	ldi	r17, 0x00	; 0
    a2a8:	98 01       	movw	r18, r16
    a2aa:	b7 01       	movw	r22, r14
    a2ac:	a6 01       	movw	r20, r12
    a2ae:	ce 01       	movw	r24, r28
    a2b0:	15 dc       	rcall	.-2006   	; 0x9adc <put_fat>
    a2b2:	00 97       	sbiw	r24, 0x00	; 0
    a2b4:	49 f5       	brne	.+82     	; 0xa308 <remove_chain+0x100>
    a2b6:	89 89       	ldd	r24, Y+17	; 0x11
    a2b8:	9a 89       	ldd	r25, Y+18	; 0x12
    a2ba:	ab 89       	ldd	r26, Y+19	; 0x13
    a2bc:	bc 89       	ldd	r27, Y+20	; 0x14
    a2be:	49 8d       	ldd	r20, Y+25	; 0x19
    a2c0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2c6:	6a 01       	movw	r12, r20
    a2c8:	7b 01       	movw	r14, r22
    a2ca:	e2 e0       	ldi	r30, 0x02	; 2
    a2cc:	ce 1a       	sub	r12, r30
    a2ce:	d1 08       	sbc	r13, r1
    a2d0:	e1 08       	sbc	r14, r1
    a2d2:	f1 08       	sbc	r15, r1
    a2d4:	8c 15       	cp	r24, r12
    a2d6:	9d 05       	cpc	r25, r13
    a2d8:	ae 05       	cpc	r26, r14
    a2da:	bf 05       	cpc	r27, r15
    a2dc:	50 f4       	brcc	.+20     	; 0xa2f2 <remove_chain+0xea>
    a2de:	01 96       	adiw	r24, 0x01	; 1
    a2e0:	a1 1d       	adc	r26, r1
    a2e2:	b1 1d       	adc	r27, r1
    a2e4:	89 8b       	std	Y+17, r24	; 0x11
    a2e6:	9a 8b       	std	Y+18, r25	; 0x12
    a2e8:	ab 8b       	std	Y+19, r26	; 0x13
    a2ea:	bc 8b       	std	Y+20, r27	; 0x14
    a2ec:	8c 81       	ldd	r24, Y+4	; 0x04
    a2ee:	81 60       	ori	r24, 0x01	; 1
    a2f0:	8c 83       	std	Y+4, r24	; 0x04
    a2f2:	73 01       	movw	r14, r6
    a2f4:	62 01       	movw	r12, r4
    a2f6:	44 16       	cp	r4, r20
    a2f8:	55 06       	cpc	r5, r21
    a2fa:	66 06       	cpc	r6, r22
    a2fc:	77 06       	cpc	r7, r23
    a2fe:	08 f4       	brcc	.+2      	; 0xa302 <remove_chain+0xfa>
    a300:	b7 cf       	rjmp	.-146    	; 0xa270 <remove_chain+0x68>
    a302:	c3 cf       	rjmp	.-122    	; 0xa28a <remove_chain+0x82>
    a304:	21 e0       	ldi	r18, 0x01	; 1
    a306:	c2 cf       	rjmp	.-124    	; 0xa28c <remove_chain+0x84>
    a308:	28 2f       	mov	r18, r24
    a30a:	82 2f       	mov	r24, r18
    a30c:	df 91       	pop	r29
    a30e:	cf 91       	pop	r28
    a310:	1f 91       	pop	r17
    a312:	0f 91       	pop	r16
    a314:	ff 90       	pop	r15
    a316:	ef 90       	pop	r14
    a318:	df 90       	pop	r13
    a31a:	cf 90       	pop	r12
    a31c:	bf 90       	pop	r11
    a31e:	af 90       	pop	r10
    a320:	7f 90       	pop	r7
    a322:	6f 90       	pop	r6
    a324:	5f 90       	pop	r5
    a326:	4f 90       	pop	r4
    a328:	08 95       	ret

0000a32a <dir_next>:
    a32a:	4f 92       	push	r4
    a32c:	5f 92       	push	r5
    a32e:	6f 92       	push	r6
    a330:	7f 92       	push	r7
    a332:	af 92       	push	r10
    a334:	bf 92       	push	r11
    a336:	cf 92       	push	r12
    a338:	df 92       	push	r13
    a33a:	ef 92       	push	r14
    a33c:	ff 92       	push	r15
    a33e:	0f 93       	push	r16
    a340:	1f 93       	push	r17
    a342:	cf 93       	push	r28
    a344:	df 93       	push	r29
    a346:	ec 01       	movw	r28, r24
    a348:	08 81       	ld	r16, Y
    a34a:	19 81       	ldd	r17, Y+1	; 0x01
    a34c:	ce 84       	ldd	r12, Y+14	; 0x0e
    a34e:	df 84       	ldd	r13, Y+15	; 0x0f
    a350:	e8 88       	ldd	r14, Y+16	; 0x10
    a352:	f9 88       	ldd	r15, Y+17	; 0x11
    a354:	80 e2       	ldi	r24, 0x20	; 32
    a356:	c8 0e       	add	r12, r24
    a358:	d1 1c       	adc	r13, r1
    a35a:	e1 1c       	adc	r14, r1
    a35c:	f1 1c       	adc	r15, r1
    a35e:	c1 14       	cp	r12, r1
    a360:	d1 04       	cpc	r13, r1
    a362:	e0 e2       	ldi	r30, 0x20	; 32
    a364:	ee 06       	cpc	r14, r30
    a366:	f1 04       	cpc	r15, r1
    a368:	20 f0       	brcs	.+8      	; 0xa372 <dir_next+0x48>
    a36a:	1e 8a       	std	Y+22, r1	; 0x16
    a36c:	1f 8a       	std	Y+23, r1	; 0x17
    a36e:	18 8e       	std	Y+24, r1	; 0x18
    a370:	19 8e       	std	Y+25, r1	; 0x19
    a372:	8e 89       	ldd	r24, Y+22	; 0x16
    a374:	9f 89       	ldd	r25, Y+23	; 0x17
    a376:	a8 8d       	ldd	r26, Y+24	; 0x18
    a378:	b9 8d       	ldd	r27, Y+25	; 0x19
    a37a:	00 97       	sbiw	r24, 0x00	; 0
    a37c:	a1 05       	cpc	r26, r1
    a37e:	b1 05       	cpc	r27, r1
    a380:	09 f4       	brne	.+2      	; 0xa384 <dir_next+0x5a>
    a382:	a7 c0       	rjmp	.+334    	; 0xa4d2 <dir_next+0x1a8>
    a384:	5b 01       	movw	r10, r22
    a386:	b7 01       	movw	r22, r14
    a388:	a6 01       	movw	r20, r12
    a38a:	51 70       	andi	r21, 0x01	; 1
    a38c:	66 27       	eor	r22, r22
    a38e:	77 27       	eor	r23, r23
    a390:	45 2b       	or	r20, r21
    a392:	46 2b       	or	r20, r22
    a394:	47 2b       	or	r20, r23
    a396:	09 f0       	breq	.+2      	; 0xa39a <dir_next+0x70>
    a398:	8d c0       	rjmp	.+282    	; 0xa4b4 <dir_next+0x18a>
    a39a:	01 96       	adiw	r24, 0x01	; 1
    a39c:	a1 1d       	adc	r26, r1
    a39e:	b1 1d       	adc	r27, r1
    a3a0:	8e 8b       	std	Y+22, r24	; 0x16
    a3a2:	9f 8b       	std	Y+23, r25	; 0x17
    a3a4:	a8 8f       	std	Y+24, r26	; 0x18
    a3a6:	b9 8f       	std	Y+25, r27	; 0x19
    a3a8:	4a 89       	ldd	r20, Y+18	; 0x12
    a3aa:	5b 89       	ldd	r21, Y+19	; 0x13
    a3ac:	6c 89       	ldd	r22, Y+20	; 0x14
    a3ae:	7d 89       	ldd	r23, Y+21	; 0x15
    a3b0:	f8 01       	movw	r30, r16
    a3b2:	41 15       	cp	r20, r1
    a3b4:	51 05       	cpc	r21, r1
    a3b6:	61 05       	cpc	r22, r1
    a3b8:	71 05       	cpc	r23, r1
    a3ba:	c1 f4       	brne	.+48     	; 0xa3ec <dir_next+0xc2>
    a3bc:	87 81       	ldd	r24, Z+7	; 0x07
    a3be:	90 85       	ldd	r25, Z+8	; 0x08
    a3c0:	a0 e0       	ldi	r26, 0x00	; 0
    a3c2:	b0 e0       	ldi	r27, 0x00	; 0
    a3c4:	b7 01       	movw	r22, r14
    a3c6:	a6 01       	movw	r20, r12
    a3c8:	35 e0       	ldi	r19, 0x05	; 5
    a3ca:	76 95       	lsr	r23
    a3cc:	67 95       	ror	r22
    a3ce:	57 95       	ror	r21
    a3d0:	47 95       	ror	r20
    a3d2:	3a 95       	dec	r19
    a3d4:	d1 f7       	brne	.-12     	; 0xa3ca <dir_next+0xa0>
    a3d6:	48 17       	cp	r20, r24
    a3d8:	59 07       	cpc	r21, r25
    a3da:	6a 07       	cpc	r22, r26
    a3dc:	7b 07       	cpc	r23, r27
    a3de:	08 f4       	brcc	.+2      	; 0xa3e2 <dir_next+0xb8>
    a3e0:	69 c0       	rjmp	.+210    	; 0xa4b4 <dir_next+0x18a>
    a3e2:	1e 8a       	std	Y+22, r1	; 0x16
    a3e4:	1f 8a       	std	Y+23, r1	; 0x17
    a3e6:	18 8e       	std	Y+24, r1	; 0x18
    a3e8:	19 8e       	std	Y+25, r1	; 0x19
    a3ea:	73 c0       	rjmp	.+230    	; 0xa4d2 <dir_next+0x1a8>
    a3ec:	81 85       	ldd	r24, Z+9	; 0x09
    a3ee:	92 85       	ldd	r25, Z+10	; 0x0a
    a3f0:	01 97       	sbiw	r24, 0x01	; 1
    a3f2:	a0 e0       	ldi	r26, 0x00	; 0
    a3f4:	b0 e0       	ldi	r27, 0x00	; 0
    a3f6:	26 01       	movw	r4, r12
    a3f8:	37 01       	movw	r6, r14
    a3fa:	29 e0       	ldi	r18, 0x09	; 9
    a3fc:	76 94       	lsr	r7
    a3fe:	67 94       	ror	r6
    a400:	57 94       	ror	r5
    a402:	47 94       	ror	r4
    a404:	2a 95       	dec	r18
    a406:	d1 f7       	brne	.-12     	; 0xa3fc <dir_next+0xd2>
    a408:	84 21       	and	r24, r4
    a40a:	95 21       	and	r25, r5
    a40c:	a6 21       	and	r26, r6
    a40e:	b7 21       	and	r27, r7
    a410:	89 2b       	or	r24, r25
    a412:	8a 2b       	or	r24, r26
    a414:	8b 2b       	or	r24, r27
    a416:	09 f0       	breq	.+2      	; 0xa41a <dir_next+0xf0>
    a418:	4d c0       	rjmp	.+154    	; 0xa4b4 <dir_next+0x18a>
    a41a:	c8 01       	movw	r24, r16
    a41c:	5a dc       	rcall	.-1868   	; 0x9cd2 <get_fat.isra.10>
    a41e:	2b 01       	movw	r4, r22
    a420:	3c 01       	movw	r6, r24
    a422:	62 30       	cpi	r22, 0x02	; 2
    a424:	71 05       	cpc	r23, r1
    a426:	81 05       	cpc	r24, r1
    a428:	91 05       	cpc	r25, r1
    a42a:	18 f4       	brcc	.+6      	; 0xa432 <dir_next+0x108>
    a42c:	82 e0       	ldi	r24, 0x02	; 2
    a42e:	90 e0       	ldi	r25, 0x00	; 0
    a430:	55 c0       	rjmp	.+170    	; 0xa4dc <dir_next+0x1b2>
    a432:	8f ef       	ldi	r24, 0xFF	; 255
    a434:	48 16       	cp	r4, r24
    a436:	58 06       	cpc	r5, r24
    a438:	68 06       	cpc	r6, r24
    a43a:	78 06       	cpc	r7, r24
    a43c:	19 f4       	brne	.+6      	; 0xa444 <dir_next+0x11a>
    a43e:	81 e0       	ldi	r24, 0x01	; 1
    a440:	90 e0       	ldi	r25, 0x00	; 0
    a442:	4c c0       	rjmp	.+152    	; 0xa4dc <dir_next+0x1b2>
    a444:	f8 01       	movw	r30, r16
    a446:	81 8d       	ldd	r24, Z+25	; 0x19
    a448:	92 8d       	ldd	r25, Z+26	; 0x1a
    a44a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a44c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a44e:	48 16       	cp	r4, r24
    a450:	59 06       	cpc	r5, r25
    a452:	6a 06       	cpc	r6, r26
    a454:	7b 06       	cpc	r7, r27
    a456:	08 f1       	brcs	.+66     	; 0xa49a <dir_next+0x170>
    a458:	ab 28       	or	r10, r11
    a45a:	19 f2       	breq	.-122    	; 0xa3e2 <dir_next+0xb8>
    a45c:	4a 89       	ldd	r20, Y+18	; 0x12
    a45e:	5b 89       	ldd	r21, Y+19	; 0x13
    a460:	6c 89       	ldd	r22, Y+20	; 0x14
    a462:	7d 89       	ldd	r23, Y+21	; 0x15
    a464:	ce 01       	movw	r24, r28
    a466:	aa dd       	rcall	.-1196   	; 0x9fbc <create_chain>
    a468:	2b 01       	movw	r4, r22
    a46a:	3c 01       	movw	r6, r24
    a46c:	61 15       	cp	r22, r1
    a46e:	71 05       	cpc	r23, r1
    a470:	81 05       	cpc	r24, r1
    a472:	91 05       	cpc	r25, r1
    a474:	89 f1       	breq	.+98     	; 0xa4d8 <dir_next+0x1ae>
    a476:	61 30       	cpi	r22, 0x01	; 1
    a478:	71 05       	cpc	r23, r1
    a47a:	81 05       	cpc	r24, r1
    a47c:	91 05       	cpc	r25, r1
    a47e:	b1 f2       	breq	.-84     	; 0xa42c <dir_next+0x102>
    a480:	8f ef       	ldi	r24, 0xFF	; 255
    a482:	48 16       	cp	r4, r24
    a484:	58 06       	cpc	r5, r24
    a486:	68 06       	cpc	r6, r24
    a488:	78 06       	cpc	r7, r24
    a48a:	c9 f2       	breq	.-78     	; 0xa43e <dir_next+0x114>
    a48c:	b3 01       	movw	r22, r6
    a48e:	a2 01       	movw	r20, r4
    a490:	c8 01       	movw	r24, r16
    a492:	0e 94 f1 49 	call	0x93e2	; 0x93e2 <dir_clear>
    a496:	89 2b       	or	r24, r25
    a498:	91 f6       	brne	.-92     	; 0xa43e <dir_next+0x114>
    a49a:	4a 8a       	std	Y+18, r4	; 0x12
    a49c:	5b 8a       	std	Y+19, r5	; 0x13
    a49e:	6c 8a       	std	Y+20, r6	; 0x14
    a4a0:	7d 8a       	std	Y+21, r7	; 0x15
    a4a2:	b3 01       	movw	r22, r6
    a4a4:	a2 01       	movw	r20, r4
    a4a6:	c8 01       	movw	r24, r16
    a4a8:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    a4ac:	6e 8b       	std	Y+22, r22	; 0x16
    a4ae:	7f 8b       	std	Y+23, r23	; 0x17
    a4b0:	88 8f       	std	Y+24, r24	; 0x18
    a4b2:	99 8f       	std	Y+25, r25	; 0x19
    a4b4:	ce 86       	std	Y+14, r12	; 0x0e
    a4b6:	df 86       	std	Y+15, r13	; 0x0f
    a4b8:	e8 8a       	std	Y+16, r14	; 0x10
    a4ba:	f9 8a       	std	Y+17, r15	; 0x11
    a4bc:	0b 5c       	subi	r16, 0xCB	; 203
    a4be:	1f 4f       	sbci	r17, 0xFF	; 255
    a4c0:	e1 e0       	ldi	r30, 0x01	; 1
    a4c2:	de 22       	and	r13, r30
    a4c4:	c0 0e       	add	r12, r16
    a4c6:	d1 1e       	adc	r13, r17
    a4c8:	db 8e       	std	Y+27, r13	; 0x1b
    a4ca:	ca 8e       	std	Y+26, r12	; 0x1a
    a4cc:	80 e0       	ldi	r24, 0x00	; 0
    a4ce:	90 e0       	ldi	r25, 0x00	; 0
    a4d0:	05 c0       	rjmp	.+10     	; 0xa4dc <dir_next+0x1b2>
    a4d2:	84 e0       	ldi	r24, 0x04	; 4
    a4d4:	90 e0       	ldi	r25, 0x00	; 0
    a4d6:	02 c0       	rjmp	.+4      	; 0xa4dc <dir_next+0x1b2>
    a4d8:	87 e0       	ldi	r24, 0x07	; 7
    a4da:	90 e0       	ldi	r25, 0x00	; 0
    a4dc:	df 91       	pop	r29
    a4de:	cf 91       	pop	r28
    a4e0:	1f 91       	pop	r17
    a4e2:	0f 91       	pop	r16
    a4e4:	ff 90       	pop	r15
    a4e6:	ef 90       	pop	r14
    a4e8:	df 90       	pop	r13
    a4ea:	cf 90       	pop	r12
    a4ec:	bf 90       	pop	r11
    a4ee:	af 90       	pop	r10
    a4f0:	7f 90       	pop	r7
    a4f2:	6f 90       	pop	r6
    a4f4:	5f 90       	pop	r5
    a4f6:	4f 90       	pop	r4
    a4f8:	08 95       	ret

0000a4fa <dir_alloc>:
    a4fa:	a0 e0       	ldi	r26, 0x00	; 0
    a4fc:	b0 e0       	ldi	r27, 0x00	; 0
    a4fe:	e3 e8       	ldi	r30, 0x83	; 131
    a500:	f2 e5       	ldi	r31, 0x52	; 82
    a502:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    a506:	ec 01       	movw	r28, r24
    a508:	6b 01       	movw	r12, r22
    a50a:	e8 80       	ld	r14, Y
    a50c:	f9 80       	ldd	r15, Y+1	; 0x01
    a50e:	40 e0       	ldi	r20, 0x00	; 0
    a510:	50 e0       	ldi	r21, 0x00	; 0
    a512:	ba 01       	movw	r22, r20
    a514:	92 dc       	rcall	.-1756   	; 0x9e3a <dir_sdi>
    a516:	00 97       	sbiw	r24, 0x00	; 0
    a518:	f9 f4       	brne	.+62     	; 0xa558 <dir_alloc+0x5e>
    a51a:	00 e0       	ldi	r16, 0x00	; 0
    a51c:	10 e0       	ldi	r17, 0x00	; 0
    a51e:	4e 89       	ldd	r20, Y+22	; 0x16
    a520:	5f 89       	ldd	r21, Y+23	; 0x17
    a522:	68 8d       	ldd	r22, Y+24	; 0x18
    a524:	79 8d       	ldd	r23, Y+25	; 0x19
    a526:	c7 01       	movw	r24, r14
    a528:	04 d8       	rcall	.-4088   	; 0x9532 <move_window>
    a52a:	00 97       	sbiw	r24, 0x00	; 0
    a52c:	a9 f4       	brne	.+42     	; 0xa558 <dir_alloc+0x5e>
    a52e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a530:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a532:	20 81       	ld	r18, Z
    a534:	25 3e       	cpi	r18, 0xE5	; 229
    a536:	11 f0       	breq	.+4      	; 0xa53c <dir_alloc+0x42>
    a538:	21 11       	cpse	r18, r1
    a53a:	06 c0       	rjmp	.+12     	; 0xa548 <dir_alloc+0x4e>
    a53c:	0f 5f       	subi	r16, 0xFF	; 255
    a53e:	1f 4f       	sbci	r17, 0xFF	; 255
    a540:	0c 15       	cp	r16, r12
    a542:	1d 05       	cpc	r17, r13
    a544:	19 f4       	brne	.+6      	; 0xa54c <dir_alloc+0x52>
    a546:	0d c0       	rjmp	.+26     	; 0xa562 <dir_alloc+0x68>
    a548:	00 e0       	ldi	r16, 0x00	; 0
    a54a:	10 e0       	ldi	r17, 0x00	; 0
    a54c:	61 e0       	ldi	r22, 0x01	; 1
    a54e:	70 e0       	ldi	r23, 0x00	; 0
    a550:	ce 01       	movw	r24, r28
    a552:	eb de       	rcall	.-554    	; 0xa32a <dir_next>
    a554:	00 97       	sbiw	r24, 0x00	; 0
    a556:	19 f3       	breq	.-58     	; 0xa51e <dir_alloc+0x24>
    a558:	84 30       	cpi	r24, 0x04	; 4
    a55a:	91 05       	cpc	r25, r1
    a55c:	11 f4       	brne	.+4      	; 0xa562 <dir_alloc+0x68>
    a55e:	87 e0       	ldi	r24, 0x07	; 7
    a560:	90 e0       	ldi	r25, 0x00	; 0
    a562:	cd b7       	in	r28, 0x3d	; 61
    a564:	de b7       	in	r29, 0x3e	; 62
    a566:	e8 e0       	ldi	r30, 0x08	; 8
    a568:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000a56c <dir_read>:
    a56c:	a0 e0       	ldi	r26, 0x00	; 0
    a56e:	b0 e0       	ldi	r27, 0x00	; 0
    a570:	ec eb       	ldi	r30, 0xBC	; 188
    a572:	f2 e5       	ldi	r31, 0x52	; 82
    a574:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
    a578:	ec 01       	movw	r28, r24
    a57a:	7b 01       	movw	r14, r22
    a57c:	a8 80       	ld	r10, Y
    a57e:	b9 80       	ldd	r11, Y+1	; 0x01
    a580:	dd 24       	eor	r13, r13
    a582:	da 94       	dec	r13
    a584:	1f ef       	ldi	r17, 0xFF	; 255
    a586:	84 e0       	ldi	r24, 0x04	; 4
    a588:	90 e0       	ldi	r25, 0x00	; 0
    a58a:	fd e0       	ldi	r31, 0x0D	; 13
    a58c:	cf 2e       	mov	r12, r31
    a58e:	4e 89       	ldd	r20, Y+22	; 0x16
    a590:	5f 89       	ldd	r21, Y+23	; 0x17
    a592:	68 8d       	ldd	r22, Y+24	; 0x18
    a594:	79 8d       	ldd	r23, Y+25	; 0x19
    a596:	41 15       	cp	r20, r1
    a598:	51 05       	cpc	r21, r1
    a59a:	61 05       	cpc	r22, r1
    a59c:	71 05       	cpc	r23, r1
    a59e:	09 f4       	brne	.+2      	; 0xa5a2 <dir_read+0x36>
    a5a0:	9a c0       	rjmp	.+308    	; 0xa6d6 <dir_read+0x16a>
    a5a2:	c5 01       	movw	r24, r10
    a5a4:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    a5a8:	00 97       	sbiw	r24, 0x00	; 0
    a5aa:	09 f0       	breq	.+2      	; 0xa5ae <dir_read+0x42>
    a5ac:	96 c0       	rjmp	.+300    	; 0xa6da <dir_read+0x16e>
    a5ae:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a5b0:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a5b2:	f4 01       	movw	r30, r8
    a5b4:	00 81       	ld	r16, Z
    a5b6:	00 23       	and	r16, r16
    a5b8:	09 f4       	brne	.+2      	; 0xa5bc <dir_read+0x50>
    a5ba:	97 c0       	rjmp	.+302    	; 0xa6ea <dir_read+0x17e>
    a5bc:	83 85       	ldd	r24, Z+11	; 0x0b
    a5be:	8f 73       	andi	r24, 0x3F	; 63
    a5c0:	8c 83       	std	Y+4, r24	; 0x04
    a5c2:	05 3e       	cpi	r16, 0xE5	; 229
    a5c4:	09 f4       	brne	.+2      	; 0xa5c8 <dir_read+0x5c>
    a5c6:	7e c0       	rjmp	.+252    	; 0xa6c4 <dir_read+0x158>
    a5c8:	0e 32       	cpi	r16, 0x2E	; 46
    a5ca:	09 f4       	brne	.+2      	; 0xa5ce <dir_read+0x62>
    a5cc:	7b c0       	rjmp	.+246    	; 0xa6c4 <dir_read+0x158>
    a5ce:	21 e0       	ldi	r18, 0x01	; 1
    a5d0:	30 e0       	ldi	r19, 0x00	; 0
    a5d2:	98 2f       	mov	r25, r24
    a5d4:	9f 71       	andi	r25, 0x1F	; 31
    a5d6:	98 30       	cpi	r25, 0x08	; 8
    a5d8:	11 f0       	breq	.+4      	; 0xa5de <dir_read+0x72>
    a5da:	20 e0       	ldi	r18, 0x00	; 0
    a5dc:	30 e0       	ldi	r19, 0x00	; 0
    a5de:	2e 15       	cp	r18, r14
    a5e0:	3f 05       	cpc	r19, r15
    a5e2:	09 f0       	breq	.+2      	; 0xa5e6 <dir_read+0x7a>
    a5e4:	6f c0       	rjmp	.+222    	; 0xa6c4 <dir_read+0x158>
    a5e6:	8f 30       	cpi	r24, 0x0F	; 15
    a5e8:	09 f0       	breq	.+2      	; 0xa5ec <dir_read+0x80>
    a5ea:	5c c0       	rjmp	.+184    	; 0xa6a4 <dir_read+0x138>
    a5ec:	06 ff       	sbrs	r16, 6
    a5ee:	0c c0       	rjmp	.+24     	; 0xa608 <dir_read+0x9c>
    a5f0:	f4 01       	movw	r30, r8
    a5f2:	85 85       	ldd	r24, Z+13	; 0x0d
    a5f4:	0f 7b       	andi	r16, 0xBF	; 191
    a5f6:	4e 85       	ldd	r20, Y+14	; 0x0e
    a5f8:	5f 85       	ldd	r21, Y+15	; 0x0f
    a5fa:	68 89       	ldd	r22, Y+16	; 0x10
    a5fc:	79 89       	ldd	r23, Y+17	; 0x11
    a5fe:	48 a7       	std	Y+40, r20	; 0x28
    a600:	59 a7       	std	Y+41, r21	; 0x29
    a602:	6a a7       	std	Y+42, r22	; 0x2a
    a604:	7b a7       	std	Y+43, r23	; 0x2b
    a606:	03 c0       	rjmp	.+6      	; 0xa60e <dir_read+0xa2>
    a608:	10 13       	cpse	r17, r16
    a60a:	5c c0       	rjmp	.+184    	; 0xa6c4 <dir_read+0x158>
    a60c:	8d 2d       	mov	r24, r13
    a60e:	f4 01       	movw	r30, r8
    a610:	d5 84       	ldd	r13, Z+13	; 0x0d
    a612:	d8 12       	cpse	r13, r24
    a614:	56 c0       	rjmp	.+172    	; 0xa6c2 <dir_read+0x156>
    a616:	82 8d       	ldd	r24, Z+26	; 0x1a
    a618:	93 8d       	ldd	r25, Z+27	; 0x1b
    a61a:	89 2b       	or	r24, r25
    a61c:	09 f0       	breq	.+2      	; 0xa620 <dir_read+0xb4>
    a61e:	52 c0       	rjmp	.+164    	; 0xa6c4 <dir_read+0x158>
    a620:	f5 01       	movw	r30, r10
    a622:	63 85       	ldd	r22, Z+11	; 0x0b
    a624:	74 85       	ldd	r23, Z+12	; 0x0c
    a626:	f4 01       	movw	r30, r8
    a628:	80 81       	ld	r24, Z
    a62a:	90 e0       	ldi	r25, 0x00	; 0
    a62c:	8f 7b       	andi	r24, 0xBF	; 191
    a62e:	01 97       	sbiw	r24, 0x01	; 1
    a630:	c8 9e       	mul	r12, r24
    a632:	90 01       	movw	r18, r0
    a634:	c9 9e       	mul	r12, r25
    a636:	30 0d       	add	r19, r0
    a638:	11 24       	eor	r1, r1
    a63a:	ab ee       	ldi	r26, 0xEB	; 235
    a63c:	b4 e0       	ldi	r27, 0x04	; 4
    a63e:	81 e0       	ldi	r24, 0x01	; 1
    a640:	90 e0       	ldi	r25, 0x00	; 0
    a642:	4d 91       	ld	r20, X+
    a644:	f4 01       	movw	r30, r8
    a646:	e4 0f       	add	r30, r20
    a648:	f1 1d       	adc	r31, r1
    a64a:	40 81       	ld	r20, Z
    a64c:	51 81       	ldd	r21, Z+1	; 0x01
    a64e:	00 97       	sbiw	r24, 0x00	; 0
    a650:	81 f0       	breq	.+32     	; 0xa672 <dir_read+0x106>
    a652:	2f 3f       	cpi	r18, 0xFF	; 255
    a654:	31 05       	cpc	r19, r1
    a656:	09 f0       	breq	.+2      	; 0xa65a <dir_read+0xee>
    a658:	a8 f5       	brcc	.+106    	; 0xa6c4 <dir_read+0x158>
    a65a:	c9 01       	movw	r24, r18
    a65c:	88 0f       	add	r24, r24
    a65e:	99 1f       	adc	r25, r25
    a660:	86 0f       	add	r24, r22
    a662:	97 1f       	adc	r25, r23
    a664:	fc 01       	movw	r30, r24
    a666:	51 83       	std	Z+1, r21	; 0x01
    a668:	40 83       	st	Z, r20
    a66a:	ca 01       	movw	r24, r20
    a66c:	2f 5f       	subi	r18, 0xFF	; 255
    a66e:	3f 4f       	sbci	r19, 0xFF	; 255
    a670:	03 c0       	rjmp	.+6      	; 0xa678 <dir_read+0x10c>
    a672:	4f 3f       	cpi	r20, 0xFF	; 255
    a674:	5f 4f       	sbci	r21, 0xFF	; 255
    a676:	31 f5       	brne	.+76     	; 0xa6c4 <dir_read+0x158>
    a678:	44 e0       	ldi	r20, 0x04	; 4
    a67a:	a8 3f       	cpi	r26, 0xF8	; 248
    a67c:	b4 07       	cpc	r27, r20
    a67e:	09 f7       	brne	.-62     	; 0xa642 <dir_read+0xd6>
    a680:	f4 01       	movw	r30, r8
    a682:	40 81       	ld	r20, Z
    a684:	46 ff       	sbrs	r20, 6
    a686:	2e c0       	rjmp	.+92     	; 0xa6e4 <dir_read+0x178>
    a688:	89 2b       	or	r24, r25
    a68a:	61 f1       	breq	.+88     	; 0xa6e4 <dir_read+0x178>
    a68c:	2f 3f       	cpi	r18, 0xFF	; 255
    a68e:	31 05       	cpc	r19, r1
    a690:	09 f0       	breq	.+2      	; 0xa694 <dir_read+0x128>
    a692:	c0 f4       	brcc	.+48     	; 0xa6c4 <dir_read+0x158>
    a694:	22 0f       	add	r18, r18
    a696:	33 1f       	adc	r19, r19
    a698:	fb 01       	movw	r30, r22
    a69a:	e2 0f       	add	r30, r18
    a69c:	f3 1f       	adc	r31, r19
    a69e:	11 82       	std	Z+1, r1	; 0x01
    a6a0:	10 82       	st	Z, r1
    a6a2:	20 c0       	rjmp	.+64     	; 0xa6e4 <dir_read+0x178>
    a6a4:	11 11       	cpse	r17, r1
    a6a6:	05 c0       	rjmp	.+10     	; 0xa6b2 <dir_read+0x146>
    a6a8:	c4 01       	movw	r24, r8
    a6aa:	0e 94 db 46 	call	0x8db6	; 0x8db6 <sum_sfn>
    a6ae:	d8 16       	cp	r13, r24
    a6b0:	f9 f0       	breq	.+62     	; 0xa6f0 <dir_read+0x184>
    a6b2:	8f ef       	ldi	r24, 0xFF	; 255
    a6b4:	9f ef       	ldi	r25, 0xFF	; 255
    a6b6:	dc 01       	movw	r26, r24
    a6b8:	88 a7       	std	Y+40, r24	; 0x28
    a6ba:	99 a7       	std	Y+41, r25	; 0x29
    a6bc:	aa a7       	std	Y+42, r26	; 0x2a
    a6be:	bb a7       	std	Y+43, r27	; 0x2b
    a6c0:	17 c0       	rjmp	.+46     	; 0xa6f0 <dir_read+0x184>
    a6c2:	d8 2e       	mov	r13, r24
    a6c4:	1f ef       	ldi	r17, 0xFF	; 255
    a6c6:	60 e0       	ldi	r22, 0x00	; 0
    a6c8:	70 e0       	ldi	r23, 0x00	; 0
    a6ca:	ce 01       	movw	r24, r28
    a6cc:	2e de       	rcall	.-932    	; 0xa32a <dir_next>
    a6ce:	00 97       	sbiw	r24, 0x00	; 0
    a6d0:	09 f4       	brne	.+2      	; 0xa6d4 <dir_read+0x168>
    a6d2:	5d cf       	rjmp	.-326    	; 0xa58e <dir_read+0x22>
    a6d4:	02 c0       	rjmp	.+4      	; 0xa6da <dir_read+0x16e>
    a6d6:	00 97       	sbiw	r24, 0x00	; 0
    a6d8:	59 f0       	breq	.+22     	; 0xa6f0 <dir_read+0x184>
    a6da:	1e 8a       	std	Y+22, r1	; 0x16
    a6dc:	1f 8a       	std	Y+23, r1	; 0x17
    a6de:	18 8e       	std	Y+24, r1	; 0x18
    a6e0:	19 8e       	std	Y+25, r1	; 0x19
    a6e2:	08 c0       	rjmp	.+16     	; 0xa6f4 <dir_read+0x188>
    a6e4:	1f ef       	ldi	r17, 0xFF	; 255
    a6e6:	10 0f       	add	r17, r16
    a6e8:	ee cf       	rjmp	.-36     	; 0xa6c6 <dir_read+0x15a>
    a6ea:	84 e0       	ldi	r24, 0x04	; 4
    a6ec:	90 e0       	ldi	r25, 0x00	; 0
    a6ee:	f5 cf       	rjmp	.-22     	; 0xa6da <dir_read+0x16e>
    a6f0:	80 e0       	ldi	r24, 0x00	; 0
    a6f2:	90 e0       	ldi	r25, 0x00	; 0
    a6f4:	cd b7       	in	r28, 0x3d	; 61
    a6f6:	de b7       	in	r29, 0x3e	; 62
    a6f8:	ec e0       	ldi	r30, 0x0C	; 12
    a6fa:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

0000a6fe <dir_remove>:
    a6fe:	a0 e0       	ldi	r26, 0x00	; 0
    a700:	b0 e0       	ldi	r27, 0x00	; 0
    a702:	e5 e8       	ldi	r30, 0x85	; 133
    a704:	f3 e5       	ldi	r31, 0x53	; 83
    a706:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
    a70a:	ec 01       	movw	r28, r24
    a70c:	08 81       	ld	r16, Y
    a70e:	19 81       	ldd	r17, Y+1	; 0x01
    a710:	ce 84       	ldd	r12, Y+14	; 0x0e
    a712:	df 84       	ldd	r13, Y+15	; 0x0f
    a714:	e8 88       	ldd	r14, Y+16	; 0x10
    a716:	f9 88       	ldd	r15, Y+17	; 0x11
    a718:	48 a5       	ldd	r20, Y+40	; 0x28
    a71a:	59 a5       	ldd	r21, Y+41	; 0x29
    a71c:	6a a5       	ldd	r22, Y+42	; 0x2a
    a71e:	7b a5       	ldd	r23, Y+43	; 0x2b
    a720:	4f 3f       	cpi	r20, 0xFF	; 255
    a722:	8f ef       	ldi	r24, 0xFF	; 255
    a724:	58 07       	cpc	r21, r24
    a726:	68 07       	cpc	r22, r24
    a728:	78 07       	cpc	r23, r24
    a72a:	29 f4       	brne	.+10     	; 0xa736 <dir_remove+0x38>
    a72c:	85 ee       	ldi	r24, 0xE5	; 229
    a72e:	b8 2e       	mov	r11, r24
    a730:	aa 24       	eor	r10, r10
    a732:	a3 94       	inc	r10
    a734:	19 c0       	rjmp	.+50     	; 0xa768 <dir_remove+0x6a>
    a736:	ce 01       	movw	r24, r28
    a738:	80 db       	rcall	.-2304   	; 0x9e3a <dir_sdi>
    a73a:	00 97       	sbiw	r24, 0x00	; 0
    a73c:	19 f5       	brne	.+70     	; 0xa784 <dir_remove+0x86>
    a73e:	f6 cf       	rjmp	.-20     	; 0xa72c <dir_remove+0x2e>
    a740:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a742:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a744:	b0 82       	st	Z, r11
    a746:	f8 01       	movw	r30, r16
    a748:	a3 82       	std	Z+3, r10	; 0x03
    a74a:	4e 85       	ldd	r20, Y+14	; 0x0e
    a74c:	5f 85       	ldd	r21, Y+15	; 0x0f
    a74e:	68 89       	ldd	r22, Y+16	; 0x10
    a750:	79 89       	ldd	r23, Y+17	; 0x11
    a752:	4c 15       	cp	r20, r12
    a754:	5d 05       	cpc	r21, r13
    a756:	6e 05       	cpc	r22, r14
    a758:	7f 05       	cpc	r23, r15
    a75a:	a0 f4       	brcc	.+40     	; 0xa784 <dir_remove+0x86>
    a75c:	60 e0       	ldi	r22, 0x00	; 0
    a75e:	70 e0       	ldi	r23, 0x00	; 0
    a760:	ce 01       	movw	r24, r28
    a762:	e3 dd       	rcall	.-1082   	; 0xa32a <dir_next>
    a764:	00 97       	sbiw	r24, 0x00	; 0
    a766:	49 f4       	brne	.+18     	; 0xa77a <dir_remove+0x7c>
    a768:	4e 89       	ldd	r20, Y+22	; 0x16
    a76a:	5f 89       	ldd	r21, Y+23	; 0x17
    a76c:	68 8d       	ldd	r22, Y+24	; 0x18
    a76e:	79 8d       	ldd	r23, Y+25	; 0x19
    a770:	c8 01       	movw	r24, r16
    a772:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    a776:	00 97       	sbiw	r24, 0x00	; 0
    a778:	19 f3       	breq	.-58     	; 0xa740 <dir_remove+0x42>
    a77a:	84 30       	cpi	r24, 0x04	; 4
    a77c:	91 05       	cpc	r25, r1
    a77e:	11 f4       	brne	.+4      	; 0xa784 <dir_remove+0x86>
    a780:	82 e0       	ldi	r24, 0x02	; 2
    a782:	90 e0       	ldi	r25, 0x00	; 0
    a784:	cd b7       	in	r28, 0x3d	; 61
    a786:	de b7       	in	r29, 0x3e	; 62
    a788:	ea e0       	ldi	r30, 0x0A	; 10
    a78a:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0000a78e <dir_find>:
    a78e:	ac e0       	ldi	r26, 0x0C	; 12
    a790:	b0 e0       	ldi	r27, 0x00	; 0
    a792:	ed ec       	ldi	r30, 0xCD	; 205
    a794:	f3 e5       	ldi	r31, 0x53	; 83
    a796:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    a79a:	9c 87       	std	Y+12, r25	; 0x0c
    a79c:	8b 87       	std	Y+11, r24	; 0x0b
    a79e:	fc 01       	movw	r30, r24
    a7a0:	01 90       	ld	r0, Z+
    a7a2:	f0 81       	ld	r31, Z
    a7a4:	e0 2d       	mov	r30, r0
    a7a6:	fc 83       	std	Y+4, r31	; 0x04
    a7a8:	eb 83       	std	Y+3, r30	; 0x03
    a7aa:	40 e0       	ldi	r20, 0x00	; 0
    a7ac:	50 e0       	ldi	r21, 0x00	; 0
    a7ae:	ba 01       	movw	r22, r20
    a7b0:	44 db       	rcall	.-2424   	; 0x9e3a <dir_sdi>
    a7b2:	00 97       	sbiw	r24, 0x00	; 0
    a7b4:	09 f0       	breq	.+2      	; 0xa7b8 <dir_find+0x2a>
    a7b6:	e7 c0       	rjmp	.+462    	; 0xa986 <dir_find+0x1f8>
    a7b8:	8f ef       	ldi	r24, 0xFF	; 255
    a7ba:	9f ef       	ldi	r25, 0xFF	; 255
    a7bc:	dc 01       	movw	r26, r24
    a7be:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7c2:	80 a7       	std	Z+40, r24	; 0x28
    a7c4:	91 a7       	std	Z+41, r25	; 0x29
    a7c6:	a2 a7       	std	Z+42, r26	; 0x2a
    a7c8:	b3 a7       	std	Z+43, r27	; 0x2b
    a7ca:	0f ef       	ldi	r16, 0xFF	; 255
    a7cc:	1f ef       	ldi	r17, 0xFF	; 255
    a7ce:	44 24       	eor	r4, r4
    a7d0:	4a 94       	dec	r4
    a7d2:	54 2c       	mov	r5, r4
    a7d4:	32 01       	movw	r6, r4
    a7d6:	7c 96       	adiw	r30, 0x1c	; 28
    a7d8:	fa 87       	std	Y+10, r31	; 0x0a
    a7da:	e9 87       	std	Y+9, r30	; 0x09
    a7dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7de:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7e0:	46 89       	ldd	r20, Z+22	; 0x16
    a7e2:	57 89       	ldd	r21, Z+23	; 0x17
    a7e4:	60 8d       	ldd	r22, Z+24	; 0x18
    a7e6:	71 8d       	ldd	r23, Z+25	; 0x19
    a7e8:	8b 81       	ldd	r24, Y+3	; 0x03
    a7ea:	9c 81       	ldd	r25, Y+4	; 0x04
    a7ec:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    a7f0:	00 97       	sbiw	r24, 0x00	; 0
    a7f2:	09 f0       	breq	.+2      	; 0xa7f6 <dir_find+0x68>
    a7f4:	c8 c0       	rjmp	.+400    	; 0xa986 <dir_find+0x1f8>
    a7f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7fa:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a7fc:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a7fe:	f7 01       	movw	r30, r14
    a800:	d0 80       	ld	r13, Z
    a802:	dd 20       	and	r13, r13
    a804:	09 f4       	brne	.+2      	; 0xa808 <dir_find+0x7a>
    a806:	c1 c0       	rjmp	.+386    	; 0xa98a <dir_find+0x1fc>
    a808:	93 85       	ldd	r25, Z+11	; 0x0b
    a80a:	89 2f       	mov	r24, r25
    a80c:	8f 73       	andi	r24, 0x3F	; 63
    a80e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a810:	fc 85       	ldd	r31, Y+12	; 0x0c
    a812:	84 83       	std	Z+4, r24	; 0x04
    a814:	f5 ee       	ldi	r31, 0xE5	; 229
    a816:	df 16       	cp	r13, r31
    a818:	09 f4       	brne	.+2      	; 0xa81c <dir_find+0x8e>
    a81a:	a6 c0       	rjmp	.+332    	; 0xa968 <dir_find+0x1da>
    a81c:	93 ff       	sbrs	r25, 3
    a81e:	04 c0       	rjmp	.+8      	; 0xa828 <dir_find+0x9a>
    a820:	8f 30       	cpi	r24, 0x0F	; 15
    a822:	09 f0       	breq	.+2      	; 0xa826 <dir_find+0x98>
    a824:	a1 c0       	rjmp	.+322    	; 0xa968 <dir_find+0x1da>
    a826:	03 c0       	rjmp	.+6      	; 0xa82e <dir_find+0xa0>
    a828:	8f 30       	cpi	r24, 0x0F	; 15
    a82a:	09 f0       	breq	.+2      	; 0xa82e <dir_find+0xa0>
    a82c:	88 c0       	rjmp	.+272    	; 0xa93e <dir_find+0x1b0>
    a82e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a830:	fc 85       	ldd	r31, Y+12	; 0x0c
    a832:	87 a1       	ldd	r24, Z+39	; 0x27
    a834:	86 fd       	sbrc	r24, 6
    a836:	9f c0       	rjmp	.+318    	; 0xa976 <dir_find+0x1e8>
    a838:	d6 fe       	sbrs	r13, 6
    a83a:	10 c0       	rjmp	.+32     	; 0xa85c <dir_find+0xce>
    a83c:	f7 01       	movw	r30, r14
    a83e:	05 85       	ldd	r16, Z+13	; 0x0d
    a840:	fd 2d       	mov	r31, r13
    a842:	ff 7b       	andi	r31, 0xBF	; 191
    a844:	df 2e       	mov	r13, r31
    a846:	eb 85       	ldd	r30, Y+11	; 0x0b
    a848:	fc 85       	ldd	r31, Y+12	; 0x0c
    a84a:	86 85       	ldd	r24, Z+14	; 0x0e
    a84c:	97 85       	ldd	r25, Z+15	; 0x0f
    a84e:	a0 89       	ldd	r26, Z+16	; 0x10
    a850:	b1 89       	ldd	r27, Z+17	; 0x11
    a852:	80 a7       	std	Z+40, r24	; 0x28
    a854:	91 a7       	std	Z+41, r25	; 0x29
    a856:	a2 a7       	std	Z+42, r26	; 0x2a
    a858:	b3 a7       	std	Z+43, r27	; 0x2b
    a85a:	02 c0       	rjmp	.+4      	; 0xa860 <dir_find+0xd2>
    a85c:	1d 11       	cpse	r17, r13
    a85e:	8a c0       	rjmp	.+276    	; 0xa974 <dir_find+0x1e6>
    a860:	f7 01       	movw	r30, r14
    a862:	c5 84       	ldd	r12, Z+13	; 0x0d
    a864:	c0 12       	cpse	r12, r16
    a866:	86 c0       	rjmp	.+268    	; 0xa974 <dir_find+0x1e6>
    a868:	82 8d       	ldd	r24, Z+26	; 0x1a
    a86a:	93 8d       	ldd	r25, Z+27	; 0x1b
    a86c:	89 2b       	or	r24, r25
    a86e:	09 f0       	breq	.+2      	; 0xa872 <dir_find+0xe4>
    a870:	91 c0       	rjmp	.+290    	; 0xa994 <dir_find+0x206>
    a872:	eb 81       	ldd	r30, Y+3	; 0x03
    a874:	fc 81       	ldd	r31, Y+4	; 0x04
    a876:	03 84       	ldd	r0, Z+11	; 0x0b
    a878:	f4 85       	ldd	r31, Z+12	; 0x0c
    a87a:	e0 2d       	mov	r30, r0
    a87c:	fe 83       	std	Y+6, r31	; 0x06
    a87e:	ed 83       	std	Y+5, r30	; 0x05
    a880:	f7 01       	movw	r30, r14
    a882:	80 81       	ld	r24, Z
    a884:	8f 73       	andi	r24, 0x3F	; 63
    a886:	90 e0       	ldi	r25, 0x00	; 0
    a888:	01 97       	sbiw	r24, 0x01	; 1
    a88a:	fd e0       	ldi	r31, 0x0D	; 13
    a88c:	f8 9f       	mul	r31, r24
    a88e:	80 01       	movw	r16, r0
    a890:	f9 9f       	mul	r31, r25
    a892:	10 0d       	add	r17, r0
    a894:	11 24       	eor	r1, r1
    a896:	2b ee       	ldi	r18, 0xEB	; 235
    a898:	34 e0       	ldi	r19, 0x04	; 4
    a89a:	3a 83       	std	Y+2, r19	; 0x02
    a89c:	29 83       	std	Y+1, r18	; 0x01
    a89e:	81 e0       	ldi	r24, 0x01	; 1
    a8a0:	90 e0       	ldi	r25, 0x00	; 0
    a8a2:	e9 81       	ldd	r30, Y+1	; 0x01
    a8a4:	fa 81       	ldd	r31, Y+2	; 0x02
    a8a6:	21 91       	ld	r18, Z+
    a8a8:	fa 83       	std	Y+2, r31	; 0x02
    a8aa:	e9 83       	std	Y+1, r30	; 0x01
    a8ac:	f7 01       	movw	r30, r14
    a8ae:	e2 0f       	add	r30, r18
    a8b0:	f1 1d       	adc	r31, r1
    a8b2:	20 80       	ld	r2, Z
    a8b4:	31 80       	ldd	r3, Z+1	; 0x01
    a8b6:	00 97       	sbiw	r24, 0x00	; 0
    a8b8:	39 f1       	breq	.+78     	; 0xa908 <dir_find+0x17a>
    a8ba:	0f 3f       	cpi	r16, 0xFF	; 255
    a8bc:	11 05       	cpc	r17, r1
    a8be:	11 f0       	breq	.+4      	; 0xa8c4 <dir_find+0x136>
    a8c0:	08 f0       	brcs	.+2      	; 0xa8c4 <dir_find+0x136>
    a8c2:	68 c0       	rjmp	.+208    	; 0xa994 <dir_find+0x206>
    a8c4:	b1 01       	movw	r22, r2
    a8c6:	80 e0       	ldi	r24, 0x00	; 0
    a8c8:	90 e0       	ldi	r25, 0x00	; 0
    a8ca:	0e 94 74 68 	call	0xd0e8	; 0xd0e8 <ff_wtoupper>
    a8ce:	4b 01       	movw	r8, r22
    a8d0:	5c 01       	movw	r10, r24
    a8d2:	98 01       	movw	r18, r16
    a8d4:	2f 5f       	subi	r18, 0xFF	; 255
    a8d6:	3f 4f       	sbci	r19, 0xFF	; 255
    a8d8:	38 87       	std	Y+8, r19	; 0x08
    a8da:	2f 83       	std	Y+7, r18	; 0x07
    a8dc:	00 0f       	add	r16, r16
    a8de:	11 1f       	adc	r17, r17
    a8e0:	ed 81       	ldd	r30, Y+5	; 0x05
    a8e2:	fe 81       	ldd	r31, Y+6	; 0x06
    a8e4:	e0 0f       	add	r30, r16
    a8e6:	f1 1f       	adc	r31, r17
    a8e8:	60 81       	ld	r22, Z
    a8ea:	71 81       	ldd	r23, Z+1	; 0x01
    a8ec:	80 e0       	ldi	r24, 0x00	; 0
    a8ee:	90 e0       	ldi	r25, 0x00	; 0
    a8f0:	0e 94 74 68 	call	0xd0e8	; 0xd0e8 <ff_wtoupper>
    a8f4:	86 16       	cp	r8, r22
    a8f6:	97 06       	cpc	r9, r23
    a8f8:	a8 06       	cpc	r10, r24
    a8fa:	b9 06       	cpc	r11, r25
    a8fc:	09 f0       	breq	.+2      	; 0xa900 <dir_find+0x172>
    a8fe:	4a c0       	rjmp	.+148    	; 0xa994 <dir_find+0x206>
    a900:	c1 01       	movw	r24, r2
    a902:	0f 81       	ldd	r16, Y+7	; 0x07
    a904:	18 85       	ldd	r17, Y+8	; 0x08
    a906:	05 c0       	rjmp	.+10     	; 0xa912 <dir_find+0x184>
    a908:	3f ef       	ldi	r19, 0xFF	; 255
    a90a:	23 16       	cp	r2, r19
    a90c:	33 06       	cpc	r3, r19
    a90e:	09 f0       	breq	.+2      	; 0xa912 <dir_find+0x184>
    a910:	41 c0       	rjmp	.+130    	; 0xa994 <dir_find+0x206>
    a912:	e9 81       	ldd	r30, Y+1	; 0x01
    a914:	fa 81       	ldd	r31, Y+2	; 0x02
    a916:	e8 5f       	subi	r30, 0xF8	; 248
    a918:	f4 40       	sbci	r31, 0x04	; 4
    a91a:	19 f6       	brne	.-122    	; 0xa8a2 <dir_find+0x114>
    a91c:	f7 01       	movw	r30, r14
    a91e:	20 81       	ld	r18, Z
    a920:	26 ff       	sbrs	r18, 6
    a922:	3a c0       	rjmp	.+116    	; 0xa998 <dir_find+0x20a>
    a924:	89 2b       	or	r24, r25
    a926:	c1 f1       	breq	.+112    	; 0xa998 <dir_find+0x20a>
    a928:	00 0f       	add	r16, r16
    a92a:	11 1f       	adc	r17, r17
    a92c:	ed 81       	ldd	r30, Y+5	; 0x05
    a92e:	fe 81       	ldd	r31, Y+6	; 0x06
    a930:	e0 0f       	add	r30, r16
    a932:	f1 1f       	adc	r31, r17
    a934:	80 81       	ld	r24, Z
    a936:	91 81       	ldd	r25, Z+1	; 0x01
    a938:	89 2b       	or	r24, r25
    a93a:	71 f1       	breq	.+92     	; 0xa998 <dir_find+0x20a>
    a93c:	2b c0       	rjmp	.+86     	; 0xa994 <dir_find+0x206>
    a93e:	11 11       	cpse	r17, r1
    a940:	05 c0       	rjmp	.+10     	; 0xa94c <dir_find+0x1be>
    a942:	c7 01       	movw	r24, r14
    a944:	0e 94 db 46 	call	0x8db6	; 0x8db6 <sum_sfn>
    a948:	08 17       	cp	r16, r24
    a94a:	09 f1       	breq	.+66     	; 0xa98e <dir_find+0x200>
    a94c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a94e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a950:	87 a1       	ldd	r24, Z+39	; 0x27
    a952:	80 fd       	sbrc	r24, 0
    a954:	09 c0       	rjmp	.+18     	; 0xa968 <dir_find+0x1da>
    a956:	4b e0       	ldi	r20, 0x0B	; 11
    a958:	50 e0       	ldi	r21, 0x00	; 0
    a95a:	69 85       	ldd	r22, Y+9	; 0x09
    a95c:	7a 85       	ldd	r23, Y+10	; 0x0a
    a95e:	c7 01       	movw	r24, r14
    a960:	0e 94 e2 45 	call	0x8bc4	; 0x8bc4 <mem_cmp>
    a964:	89 2b       	or	r24, r25
    a966:	99 f0       	breq	.+38     	; 0xa98e <dir_find+0x200>
    a968:	eb 85       	ldd	r30, Y+11	; 0x0b
    a96a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a96c:	40 a6       	std	Z+40, r4	; 0x28
    a96e:	51 a6       	std	Z+41, r5	; 0x29
    a970:	62 a6       	std	Z+42, r6	; 0x2a
    a972:	73 a6       	std	Z+43, r7	; 0x2b
    a974:	1f ef       	ldi	r17, 0xFF	; 255
    a976:	60 e0       	ldi	r22, 0x00	; 0
    a978:	70 e0       	ldi	r23, 0x00	; 0
    a97a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a97c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a97e:	d5 dc       	rcall	.-1622   	; 0xa32a <dir_next>
    a980:	00 97       	sbiw	r24, 0x00	; 0
    a982:	09 f4       	brne	.+2      	; 0xa986 <dir_find+0x1f8>
    a984:	2b cf       	rjmp	.-426    	; 0xa7dc <dir_find+0x4e>
    a986:	28 2f       	mov	r18, r24
    a988:	0b c0       	rjmp	.+22     	; 0xa9a0 <dir_find+0x212>
    a98a:	24 e0       	ldi	r18, 0x04	; 4
    a98c:	01 c0       	rjmp	.+2      	; 0xa990 <dir_find+0x202>
    a98e:	20 e0       	ldi	r18, 0x00	; 0
    a990:	90 e0       	ldi	r25, 0x00	; 0
    a992:	06 c0       	rjmp	.+12     	; 0xa9a0 <dir_find+0x212>
    a994:	0c 2d       	mov	r16, r12
    a996:	ee cf       	rjmp	.-36     	; 0xa974 <dir_find+0x1e6>
    a998:	1f ef       	ldi	r17, 0xFF	; 255
    a99a:	1d 0d       	add	r17, r13
    a99c:	0c 2d       	mov	r16, r12
    a99e:	eb cf       	rjmp	.-42     	; 0xa976 <dir_find+0x1e8>
    a9a0:	82 2f       	mov	r24, r18
    a9a2:	2c 96       	adiw	r28, 0x0c	; 12
    a9a4:	e2 e1       	ldi	r30, 0x12	; 18
    a9a6:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000a9aa <dir_register>:
    a9aa:	a6 e1       	ldi	r26, 0x16	; 22
    a9ac:	b0 e0       	ldi	r27, 0x00	; 0
    a9ae:	eb ed       	ldi	r30, 0xDB	; 219
    a9b0:	f4 e5       	ldi	r31, 0x54	; 84
    a9b2:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    a9b6:	fc 01       	movw	r30, r24
    a9b8:	27 a1       	ldd	r18, Z+39	; 0x27
    a9ba:	20 7a       	andi	r18, 0xA0	; 160
    a9bc:	09 f0       	breq	.+2      	; 0xa9c0 <dir_register+0x16>
    a9be:	53 c1       	rjmp	.+678    	; 0xac66 <dir_register+0x2bc>
    a9c0:	c0 80       	ld	r12, Z
    a9c2:	d1 80       	ldd	r13, Z+1	; 0x01
    a9c4:	f6 01       	movw	r30, r12
    a9c6:	a3 85       	ldd	r26, Z+11	; 0x0b
    a9c8:	b4 85       	ldd	r27, Z+12	; 0x0c
    a9ca:	81 2c       	mov	r8, r1
    a9cc:	91 2c       	mov	r9, r1
    a9ce:	2d 91       	ld	r18, X+
    a9d0:	3d 91       	ld	r19, X+
    a9d2:	23 2b       	or	r18, r19
    a9d4:	21 f0       	breq	.+8      	; 0xa9de <dir_register+0x34>
    a9d6:	ff ef       	ldi	r31, 0xFF	; 255
    a9d8:	8f 1a       	sub	r8, r31
    a9da:	9f 0a       	sbc	r9, r31
    a9dc:	f8 cf       	rjmp	.-16     	; 0xa9ce <dir_register+0x24>
    a9de:	8c 01       	movw	r16, r24
    a9e0:	5c 01       	movw	r10, r24
    a9e2:	2c e1       	ldi	r18, 0x1C	; 28
    a9e4:	a2 0e       	add	r10, r18
    a9e6:	b1 1c       	adc	r11, r1
    a9e8:	4c e0       	ldi	r20, 0x0C	; 12
    a9ea:	50 e0       	ldi	r21, 0x00	; 0
    a9ec:	b5 01       	movw	r22, r10
    a9ee:	ce 01       	movw	r24, r28
    a9f0:	01 96       	adiw	r24, 0x01	; 1
    a9f2:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    a9f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    a9f8:	80 ff       	sbrs	r24, 0
    a9fa:	94 c0       	rjmp	.+296    	; 0xab24 <dir_register+0x17a>
    a9fc:	80 e4       	ldi	r24, 0x40	; 64
    a9fe:	f8 01       	movw	r30, r16
    aa00:	87 a3       	std	Z+39, r24	; 0x27
    aa02:	41 2c       	mov	r4, r1
    aa04:	51 2c       	mov	r5, r1
    aa06:	32 01       	movw	r6, r4
    aa08:	43 94       	inc	r4
    aa0a:	72 01       	movw	r14, r4
    aa0c:	f6 01       	movw	r30, r12
    aa0e:	23 84       	ldd	r2, Z+11	; 0x0b
    aa10:	34 84       	ldd	r3, Z+12	; 0x0c
    aa12:	4b e0       	ldi	r20, 0x0B	; 11
    aa14:	50 e0       	ldi	r21, 0x00	; 0
    aa16:	be 01       	movw	r22, r28
    aa18:	6f 5f       	subi	r22, 0xFF	; 255
    aa1a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa1c:	c5 01       	movw	r24, r10
    aa1e:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    aa22:	f6 e0       	ldi	r31, 0x06	; 6
    aa24:	4f 16       	cp	r4, r31
    aa26:	51 04       	cpc	r5, r1
    aa28:	18 f1       	brcs	.+70     	; 0xaa70 <dir_register+0xc6>
    aa2a:	f1 01       	movw	r30, r2
    aa2c:	b3 01       	movw	r22, r6
    aa2e:	a2 01       	movw	r20, r4
    aa30:	81 91       	ld	r24, Z+
    aa32:	91 91       	ld	r25, Z+
    aa34:	00 97       	sbiw	r24, 0x00	; 0
    aa36:	d9 f0       	breq	.+54     	; 0xaa6e <dir_register+0xc4>
    aa38:	20 e1       	ldi	r18, 0x10	; 16
    aa3a:	30 e0       	ldi	r19, 0x00	; 0
    aa3c:	44 0f       	add	r20, r20
    aa3e:	55 1f       	adc	r21, r21
    aa40:	66 1f       	adc	r22, r22
    aa42:	77 1f       	adc	r23, r23
    aa44:	dc 01       	movw	r26, r24
    aa46:	a1 70       	andi	r26, 0x01	; 1
    aa48:	bb 27       	eor	r27, r27
    aa4a:	4a 0f       	add	r20, r26
    aa4c:	5b 1f       	adc	r21, r27
    aa4e:	61 1d       	adc	r22, r1
    aa50:	71 1d       	adc	r23, r1
    aa52:	96 95       	lsr	r25
    aa54:	87 95       	ror	r24
    aa56:	60 ff       	sbrs	r22, 0
    aa58:	06 c0       	rjmp	.+12     	; 0xaa66 <dir_register+0xbc>
    aa5a:	a1 e2       	ldi	r26, 0x21	; 33
    aa5c:	4a 27       	eor	r20, r26
    aa5e:	a0 e1       	ldi	r26, 0x10	; 16
    aa60:	5a 27       	eor	r21, r26
    aa62:	a1 e0       	ldi	r26, 0x01	; 1
    aa64:	6a 27       	eor	r22, r26
    aa66:	21 50       	subi	r18, 0x01	; 1
    aa68:	31 09       	sbc	r19, r1
    aa6a:	41 f7       	brne	.-48     	; 0xaa3c <dir_register+0x92>
    aa6c:	e1 cf       	rjmp	.-62     	; 0xaa30 <dir_register+0x86>
    aa6e:	7a 01       	movw	r14, r20
    aa70:	fe 01       	movw	r30, r28
    aa72:	75 96       	adiw	r30, 0x15	; 21
    aa74:	27 e0       	ldi	r18, 0x07	; 7
    aa76:	30 e0       	ldi	r19, 0x00	; 0
    aa78:	9e 2d       	mov	r25, r14
    aa7a:	9f 70       	andi	r25, 0x0F	; 15
    aa7c:	80 e3       	ldi	r24, 0x30	; 48
    aa7e:	89 0f       	add	r24, r25
    aa80:	8a 33       	cpi	r24, 0x3A	; 58
    aa82:	10 f0       	brcs	.+4      	; 0xaa88 <dir_register+0xde>
    aa84:	87 e3       	ldi	r24, 0x37	; 55
    aa86:	89 0f       	add	r24, r25
    aa88:	21 50       	subi	r18, 0x01	; 1
    aa8a:	31 09       	sbc	r19, r1
    aa8c:	82 93       	st	-Z, r24
    aa8e:	a4 e0       	ldi	r26, 0x04	; 4
    aa90:	f6 94       	lsr	r15
    aa92:	e7 94       	ror	r14
    aa94:	aa 95       	dec	r26
    aa96:	e1 f7       	brne	.-8      	; 0xaa90 <dir_register+0xe6>
    aa98:	e1 14       	cp	r14, r1
    aa9a:	f1 04       	cpc	r15, r1
    aa9c:	69 f7       	brne	.-38     	; 0xaa78 <dir_register+0xce>
    aa9e:	ed e0       	ldi	r30, 0x0D	; 13
    aaa0:	f0 e0       	ldi	r31, 0x00	; 0
    aaa2:	ec 0f       	add	r30, r28
    aaa4:	fd 1f       	adc	r31, r29
    aaa6:	e2 0f       	add	r30, r18
    aaa8:	f3 1f       	adc	r31, r19
    aaaa:	4e e7       	ldi	r20, 0x7E	; 126
    aaac:	40 83       	st	Z, r20
    aaae:	f5 01       	movw	r30, r10
    aab0:	80 e0       	ldi	r24, 0x00	; 0
    aab2:	90 e0       	ldi	r25, 0x00	; 0
    aab4:	28 17       	cp	r18, r24
    aab6:	39 07       	cpc	r19, r25
    aab8:	29 f0       	breq	.+10     	; 0xaac4 <dir_register+0x11a>
    aaba:	41 91       	ld	r20, Z+
    aabc:	40 32       	cpi	r20, 0x20	; 32
    aabe:	11 f0       	breq	.+4      	; 0xaac4 <dir_register+0x11a>
    aac0:	01 96       	adiw	r24, 0x01	; 1
    aac2:	f8 cf       	rjmp	.-16     	; 0xaab4 <dir_register+0x10a>
    aac4:	f5 01       	movw	r30, r10
    aac6:	e8 0f       	add	r30, r24
    aac8:	f9 1f       	adc	r31, r25
    aaca:	28 30       	cpi	r18, 0x08	; 8
    aacc:	31 05       	cpc	r19, r1
    aace:	50 f4       	brcc	.+20     	; 0xaae4 <dir_register+0x13a>
    aad0:	ad e0       	ldi	r26, 0x0D	; 13
    aad2:	b0 e0       	ldi	r27, 0x00	; 0
    aad4:	ac 0f       	add	r26, r28
    aad6:	bd 1f       	adc	r27, r29
    aad8:	a2 0f       	add	r26, r18
    aada:	b3 1f       	adc	r27, r19
    aadc:	8c 91       	ld	r24, X
    aade:	2f 5f       	subi	r18, 0xFF	; 255
    aae0:	3f 4f       	sbci	r19, 0xFF	; 255
    aae2:	01 c0       	rjmp	.+2      	; 0xaae6 <dir_register+0x13c>
    aae4:	80 e2       	ldi	r24, 0x20	; 32
    aae6:	81 93       	st	Z+, r24
    aae8:	cf 01       	movw	r24, r30
    aaea:	8a 19       	sub	r24, r10
    aaec:	9b 09       	sbc	r25, r11
    aaee:	08 97       	sbiw	r24, 0x08	; 8
    aaf0:	60 f3       	brcs	.-40     	; 0xaaca <dir_register+0x120>
    aaf2:	c8 01       	movw	r24, r16
    aaf4:	4c de       	rcall	.-872    	; 0xa78e <dir_find>
    aaf6:	00 97       	sbiw	r24, 0x00	; 0
    aaf8:	71 f4       	brne	.+28     	; 0xab16 <dir_register+0x16c>
    aafa:	8f ef       	ldi	r24, 0xFF	; 255
    aafc:	48 1a       	sub	r4, r24
    aafe:	58 0a       	sbc	r5, r24
    ab00:	68 0a       	sbc	r6, r24
    ab02:	78 0a       	sbc	r7, r24
    ab04:	94 e6       	ldi	r25, 0x64	; 100
    ab06:	49 16       	cp	r4, r25
    ab08:	51 04       	cpc	r5, r1
    ab0a:	61 04       	cpc	r6, r1
    ab0c:	71 04       	cpc	r7, r1
    ab0e:	09 f0       	breq	.+2      	; 0xab12 <dir_register+0x168>
    ab10:	7c cf       	rjmp	.-264    	; 0xaa0a <dir_register+0x60>
    ab12:	27 e0       	ldi	r18, 0x07	; 7
    ab14:	a9 c0       	rjmp	.+338    	; 0xac68 <dir_register+0x2be>
    ab16:	84 30       	cpi	r24, 0x04	; 4
    ab18:	91 05       	cpc	r25, r1
    ab1a:	09 f0       	breq	.+2      	; 0xab1e <dir_register+0x174>
    ab1c:	ce c0       	rjmp	.+412    	; 0xacba <dir_register+0x310>
    ab1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab20:	f8 01       	movw	r30, r16
    ab22:	87 a3       	std	Z+39, r24	; 0x27
    ab24:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab26:	81 ff       	sbrs	r24, 1
    ab28:	0b c0       	rjmp	.+22     	; 0xab40 <dir_register+0x196>
    ab2a:	c4 01       	movw	r24, r8
    ab2c:	0c 96       	adiw	r24, 0x0c	; 12
    ab2e:	6d e0       	ldi	r22, 0x0D	; 13
    ab30:	70 e0       	ldi	r23, 0x00	; 0
    ab32:	0e 94 07 e3 	call	0x1c60e	; 0x1c60e <__udivmodhi4>
    ab36:	7b 01       	movw	r14, r22
    ab38:	ff ef       	ldi	r31, 0xFF	; 255
    ab3a:	ef 1a       	sub	r14, r31
    ab3c:	ff 0a       	sbc	r15, r31
    ab3e:	03 c0       	rjmp	.+6      	; 0xab46 <dir_register+0x19c>
    ab40:	ee 24       	eor	r14, r14
    ab42:	e3 94       	inc	r14
    ab44:	f1 2c       	mov	r15, r1
    ab46:	b7 01       	movw	r22, r14
    ab48:	c8 01       	movw	r24, r16
    ab4a:	d7 dc       	rcall	.-1618   	; 0xa4fa <dir_alloc>
    ab4c:	00 97       	sbiw	r24, 0x00	; 0
    ab4e:	09 f0       	breq	.+2      	; 0xab52 <dir_register+0x1a8>
    ab50:	b4 c0       	rjmp	.+360    	; 0xacba <dir_register+0x310>
    ab52:	21 e0       	ldi	r18, 0x01	; 1
    ab54:	e2 1a       	sub	r14, r18
    ab56:	f1 08       	sbc	r15, r1
    ab58:	09 f4       	brne	.+2      	; 0xab5c <dir_register+0x1b2>
    ab5a:	88 c0       	rjmp	.+272    	; 0xac6c <dir_register+0x2c2>
    ab5c:	f8 01       	movw	r30, r16
    ab5e:	46 85       	ldd	r20, Z+14	; 0x0e
    ab60:	57 85       	ldd	r21, Z+15	; 0x0f
    ab62:	60 89       	ldd	r22, Z+16	; 0x10
    ab64:	71 89       	ldd	r23, Z+17	; 0x11
    ab66:	c7 01       	movw	r24, r14
    ab68:	e5 e0       	ldi	r30, 0x05	; 5
    ab6a:	88 0f       	add	r24, r24
    ab6c:	99 1f       	adc	r25, r25
    ab6e:	ea 95       	dec	r30
    ab70:	e1 f7       	brne	.-8      	; 0xab6a <dir_register+0x1c0>
    ab72:	48 1b       	sub	r20, r24
    ab74:	59 0b       	sbc	r21, r25
    ab76:	61 09       	sbc	r22, r1
    ab78:	71 09       	sbc	r23, r1
    ab7a:	c8 01       	movw	r24, r16
    ab7c:	5e d9       	rcall	.-3396   	; 0x9e3a <dir_sdi>
    ab7e:	00 97       	sbiw	r24, 0x00	; 0
    ab80:	09 f0       	breq	.+2      	; 0xab84 <dir_register+0x1da>
    ab82:	9b c0       	rjmp	.+310    	; 0xacba <dir_register+0x310>
    ab84:	c5 01       	movw	r24, r10
    ab86:	0e 94 db 46 	call	0x8db6	; 0x8db6 <sum_sfn>
    ab8a:	68 2e       	mov	r6, r24
    ab8c:	5f e0       	ldi	r21, 0x0F	; 15
    ab8e:	35 2e       	mov	r3, r21
    ab90:	6d e0       	ldi	r22, 0x0D	; 13
    ab92:	46 2e       	mov	r4, r22
    ab94:	78 ef       	ldi	r23, 0xF8	; 248
    ab96:	87 2e       	mov	r8, r23
    ab98:	74 e0       	ldi	r23, 0x04	; 4
    ab9a:	97 2e       	mov	r9, r23
    ab9c:	55 24       	eor	r5, r5
    ab9e:	53 94       	inc	r5
    aba0:	f8 01       	movw	r30, r16
    aba2:	46 89       	ldd	r20, Z+22	; 0x16
    aba4:	57 89       	ldd	r21, Z+23	; 0x17
    aba6:	60 8d       	ldd	r22, Z+24	; 0x18
    aba8:	71 8d       	ldd	r23, Z+25	; 0x19
    abaa:	c6 01       	movw	r24, r12
    abac:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    abb0:	00 97       	sbiw	r24, 0x00	; 0
    abb2:	09 f0       	breq	.+2      	; 0xabb6 <dir_register+0x20c>
    abb4:	82 c0       	rjmp	.+260    	; 0xacba <dir_register+0x310>
    abb6:	f6 01       	movw	r30, r12
    abb8:	63 85       	ldd	r22, Z+11	; 0x0b
    abba:	74 85       	ldd	r23, Z+12	; 0x0c
    abbc:	f8 01       	movw	r30, r16
    abbe:	02 8c       	ldd	r0, Z+26	; 0x1a
    abc0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    abc2:	e0 2d       	mov	r30, r0
    abc4:	fe 8b       	std	Y+22, r31	; 0x16
    abc6:	ed 8b       	std	Y+21, r30	; 0x15
    abc8:	7e 2c       	mov	r7, r14
    abca:	65 86       	std	Z+13, r6	; 0x0d
    abcc:	33 86       	std	Z+11, r3	; 0x0b
    abce:	14 86       	std	Z+12, r1	; 0x0c
    abd0:	12 8e       	std	Z+26, r1	; 0x1a
    abd2:	13 8e       	std	Z+27, r1	; 0x1b
    abd4:	97 01       	movw	r18, r14
    abd6:	33 27       	eor	r19, r19
    abd8:	21 50       	subi	r18, 0x01	; 1
    abda:	31 09       	sbc	r19, r1
    abdc:	42 9e       	mul	r4, r18
    abde:	c0 01       	movw	r24, r0
    abe0:	43 9e       	mul	r4, r19
    abe2:	90 0d       	add	r25, r0
    abe4:	11 24       	eor	r1, r1
    abe6:	ab ee       	ldi	r26, 0xEB	; 235
    abe8:	b4 e0       	ldi	r27, 0x04	; 4
    abea:	20 e0       	ldi	r18, 0x00	; 0
    abec:	30 e0       	ldi	r19, 0x00	; 0
    abee:	2f 3f       	cpi	r18, 0xFF	; 255
    abf0:	ff ef       	ldi	r31, 0xFF	; 255
    abf2:	3f 07       	cpc	r19, r31
    abf4:	49 f0       	breq	.+18     	; 0xac08 <dir_register+0x25e>
    abf6:	9c 01       	movw	r18, r24
    abf8:	22 0f       	add	r18, r18
    abfa:	33 1f       	adc	r19, r19
    abfc:	26 0f       	add	r18, r22
    abfe:	37 1f       	adc	r19, r23
    ac00:	f9 01       	movw	r30, r18
    ac02:	20 81       	ld	r18, Z
    ac04:	31 81       	ldd	r19, Z+1	; 0x01
    ac06:	01 96       	adiw	r24, 0x01	; 1
    ac08:	4d 91       	ld	r20, X+
    ac0a:	ed 89       	ldd	r30, Y+21	; 0x15
    ac0c:	fe 89       	ldd	r31, Y+22	; 0x16
    ac0e:	e4 0f       	add	r30, r20
    ac10:	f1 1d       	adc	r31, r1
    ac12:	20 83       	st	Z, r18
    ac14:	31 83       	std	Z+1, r19	; 0x01
    ac16:	21 15       	cp	r18, r1
    ac18:	31 05       	cpc	r19, r1
    ac1a:	11 f4       	brne	.+4      	; 0xac20 <dir_register+0x276>
    ac1c:	2f ef       	ldi	r18, 0xFF	; 255
    ac1e:	3f ef       	ldi	r19, 0xFF	; 255
    ac20:	8a 16       	cp	r8, r26
    ac22:	9b 06       	cpc	r9, r27
    ac24:	21 f7       	brne	.-56     	; 0xabee <dir_register+0x244>
    ac26:	2f 3f       	cpi	r18, 0xFF	; 255
    ac28:	3f 4f       	sbci	r19, 0xFF	; 255
    ac2a:	49 f0       	breq	.+18     	; 0xac3e <dir_register+0x294>
    ac2c:	88 0f       	add	r24, r24
    ac2e:	99 1f       	adc	r25, r25
    ac30:	db 01       	movw	r26, r22
    ac32:	a8 0f       	add	r26, r24
    ac34:	b9 1f       	adc	r27, r25
    ac36:	8d 91       	ld	r24, X+
    ac38:	9c 91       	ld	r25, X
    ac3a:	89 2b       	or	r24, r25
    ac3c:	19 f4       	brne	.+6      	; 0xac44 <dir_register+0x29a>
    ac3e:	27 2d       	mov	r18, r7
    ac40:	20 64       	ori	r18, 0x40	; 64
    ac42:	72 2e       	mov	r7, r18
    ac44:	ed 89       	ldd	r30, Y+21	; 0x15
    ac46:	fe 89       	ldd	r31, Y+22	; 0x16
    ac48:	70 82       	st	Z, r7
    ac4a:	f6 01       	movw	r30, r12
    ac4c:	53 82       	std	Z+3, r5	; 0x03
    ac4e:	60 e0       	ldi	r22, 0x00	; 0
    ac50:	70 e0       	ldi	r23, 0x00	; 0
    ac52:	c8 01       	movw	r24, r16
    ac54:	6a db       	rcall	.-2348   	; 0xa32a <dir_next>
    ac56:	00 97       	sbiw	r24, 0x00	; 0
    ac58:	81 f5       	brne	.+96     	; 0xacba <dir_register+0x310>
    ac5a:	f1 e0       	ldi	r31, 0x01	; 1
    ac5c:	ef 1a       	sub	r14, r31
    ac5e:	f1 08       	sbc	r15, r1
    ac60:	09 f0       	breq	.+2      	; 0xac64 <dir_register+0x2ba>
    ac62:	9e cf       	rjmp	.-196    	; 0xaba0 <dir_register+0x1f6>
    ac64:	03 c0       	rjmp	.+6      	; 0xac6c <dir_register+0x2c2>
    ac66:	26 e0       	ldi	r18, 0x06	; 6
    ac68:	90 e0       	ldi	r25, 0x00	; 0
    ac6a:	28 c0       	rjmp	.+80     	; 0xacbc <dir_register+0x312>
    ac6c:	f8 01       	movw	r30, r16
    ac6e:	46 89       	ldd	r20, Z+22	; 0x16
    ac70:	57 89       	ldd	r21, Z+23	; 0x17
    ac72:	60 8d       	ldd	r22, Z+24	; 0x18
    ac74:	71 8d       	ldd	r23, Z+25	; 0x19
    ac76:	c6 01       	movw	r24, r12
    ac78:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    ac7c:	00 97       	sbiw	r24, 0x00	; 0
    ac7e:	e9 f4       	brne	.+58     	; 0xacba <dir_register+0x310>
    ac80:	40 e2       	ldi	r20, 0x20	; 32
    ac82:	50 e0       	ldi	r21, 0x00	; 0
    ac84:	60 e0       	ldi	r22, 0x00	; 0
    ac86:	70 e0       	ldi	r23, 0x00	; 0
    ac88:	f8 01       	movw	r30, r16
    ac8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac8e:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <mem_set>
    ac92:	4b e0       	ldi	r20, 0x0B	; 11
    ac94:	50 e0       	ldi	r21, 0x00	; 0
    ac96:	b5 01       	movw	r22, r10
    ac98:	f8 01       	movw	r30, r16
    ac9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac9e:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    aca2:	f8 01       	movw	r30, r16
    aca4:	22 8d       	ldd	r18, Z+26	; 0x1a
    aca6:	33 8d       	ldd	r19, Z+27	; 0x1b
    aca8:	87 a1       	ldd	r24, Z+39	; 0x27
    acaa:	88 71       	andi	r24, 0x18	; 24
    acac:	f9 01       	movw	r30, r18
    acae:	84 87       	std	Z+12, r24	; 0x0c
    acb0:	81 e0       	ldi	r24, 0x01	; 1
    acb2:	f6 01       	movw	r30, r12
    acb4:	83 83       	std	Z+3, r24	; 0x03
    acb6:	20 e0       	ldi	r18, 0x00	; 0
    acb8:	d7 cf       	rjmp	.-82     	; 0xac68 <dir_register+0x2be>
    acba:	28 2f       	mov	r18, r24
    acbc:	82 2f       	mov	r24, r18
    acbe:	66 96       	adiw	r28, 0x16	; 22
    acc0:	e2 e1       	ldi	r30, 0x12	; 18
    acc2:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000acc6 <follow_path>:
    acc6:	aa e0       	ldi	r26, 0x0A	; 10
    acc8:	b0 e0       	ldi	r27, 0x00	; 0
    acca:	e9 e6       	ldi	r30, 0x69	; 105
    accc:	f6 e5       	ldi	r31, 0x56	; 86
    acce:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    acd2:	7c 01       	movw	r14, r24
    acd4:	3b 01       	movw	r6, r22
    acd6:	dc 01       	movw	r26, r24
    acd8:	0d 90       	ld	r0, X+
    acda:	bc 91       	ld	r27, X
    acdc:	a0 2d       	mov	r26, r0
    acde:	be 83       	std	Y+6, r27	; 0x06
    ace0:	ad 83       	std	Y+5, r26	; 0x05
    ace2:	fb 01       	movw	r30, r22
    ace4:	80 81       	ld	r24, Z
    ace6:	8f 32       	cpi	r24, 0x2F	; 47
    ace8:	11 f0       	breq	.+4      	; 0xacee <follow_path+0x28>
    acea:	8c 35       	cpi	r24, 0x5C	; 92
    acec:	11 f4       	brne	.+4      	; 0xacf2 <follow_path+0x2c>
    acee:	93 01       	movw	r18, r6
    acf0:	0c c0       	rjmp	.+24     	; 0xad0a <follow_path+0x44>
    acf2:	ed 81       	ldd	r30, Y+5	; 0x05
    acf4:	fe 81       	ldd	r31, Y+6	; 0x06
    acf6:	85 89       	ldd	r24, Z+21	; 0x15
    acf8:	96 89       	ldd	r25, Z+22	; 0x16
    acfa:	a7 89       	ldd	r26, Z+23	; 0x17
    acfc:	b0 8d       	ldd	r27, Z+24	; 0x18
    acfe:	f7 01       	movw	r30, r14
    ad00:	86 83       	std	Z+6, r24	; 0x06
    ad02:	97 83       	std	Z+7, r25	; 0x07
    ad04:	a0 87       	std	Z+8, r26	; 0x08
    ad06:	b1 87       	std	Z+9, r27	; 0x09
    ad08:	0e c0       	rjmp	.+28     	; 0xad26 <follow_path+0x60>
    ad0a:	39 01       	movw	r6, r18
    ad0c:	d9 01       	movw	r26, r18
    ad0e:	8c 91       	ld	r24, X
    ad10:	2f 5f       	subi	r18, 0xFF	; 255
    ad12:	3f 4f       	sbci	r19, 0xFF	; 255
    ad14:	8f 32       	cpi	r24, 0x2F	; 47
    ad16:	c9 f3       	breq	.-14     	; 0xad0a <follow_path+0x44>
    ad18:	8c 35       	cpi	r24, 0x5C	; 92
    ad1a:	b9 f3       	breq	.-18     	; 0xad0a <follow_path+0x44>
    ad1c:	f7 01       	movw	r30, r14
    ad1e:	16 82       	std	Z+6, r1	; 0x06
    ad20:	17 82       	std	Z+7, r1	; 0x07
    ad22:	10 86       	std	Z+8, r1	; 0x08
    ad24:	11 86       	std	Z+9, r1	; 0x09
    ad26:	d3 01       	movw	r26, r6
    ad28:	8c 91       	ld	r24, X
    ad2a:	80 32       	cpi	r24, 0x20	; 32
    ad2c:	58 f0       	brcs	.+22     	; 0xad44 <follow_path+0x7e>
    ad2e:	f7 01       	movw	r30, r14
    ad30:	7c 96       	adiw	r30, 0x1c	; 28
    ad32:	f8 87       	std	Y+8, r31	; 0x08
    ad34:	ef 83       	std	Y+7, r30	; 0x07
    ad36:	2d 81       	ldd	r18, Y+5	; 0x05
    ad38:	3e 81       	ldd	r19, Y+6	; 0x06
    ad3a:	2b 5c       	subi	r18, 0xCB	; 203
    ad3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ad3e:	3a 87       	std	Y+10, r19	; 0x0a
    ad40:	29 87       	std	Y+9, r18	; 0x09
    ad42:	96 c0       	rjmp	.+300    	; 0xae70 <follow_path+0x1aa>
    ad44:	80 e8       	ldi	r24, 0x80	; 128
    ad46:	f7 01       	movw	r30, r14
    ad48:	87 a3       	std	Z+39, r24	; 0x27
    ad4a:	40 e0       	ldi	r20, 0x00	; 0
    ad4c:	50 e0       	ldi	r21, 0x00	; 0
    ad4e:	ba 01       	movw	r22, r20
    ad50:	c7 01       	movw	r24, r14
    ad52:	73 d8       	rcall	.-3866   	; 0x9e3a <dir_sdi>
    ad54:	e5 c1       	rjmp	.+970    	; 0xb120 <follow_path+0x45a>
    ad56:	6c 35       	cpi	r22, 0x5C	; 92
    ad58:	71 05       	cpc	r23, r1
    ad5a:	b9 f1       	breq	.+110    	; 0xadca <follow_path+0x104>
    ad5c:	60 38       	cpi	r22, 0x80	; 128
    ad5e:	71 05       	cpc	r23, r1
    ad60:	28 f4       	brcc	.+10     	; 0xad6c <follow_path+0xa6>
    ad62:	e7 e2       	ldi	r30, 0x27	; 39
    ad64:	f4 e0       	ldi	r31, 0x04	; 4
    ad66:	41 91       	ld	r20, Z+
    ad68:	41 11       	cpse	r20, r1
    ad6a:	8c c0       	rjmp	.+280    	; 0xae84 <follow_path+0x1be>
    ad6c:	0f 3f       	cpi	r16, 0xFF	; 255
    ad6e:	11 05       	cpc	r17, r1
    ad70:	08 f0       	brcs	.+2      	; 0xad74 <follow_path+0xae>
    ad72:	b9 c1       	rjmp	.+882    	; 0xb0e6 <follow_path+0x420>
    ad74:	f8 01       	movw	r30, r16
    ad76:	ee 0f       	add	r30, r30
    ad78:	ff 1f       	adc	r31, r31
    ad7a:	ea 0d       	add	r30, r10
    ad7c:	fb 1d       	adc	r31, r11
    ad7e:	71 83       	std	Z+1, r23	; 0x01
    ad80:	60 83       	st	Z, r22
    ad82:	0f 5f       	subi	r16, 0xFF	; 255
    ad84:	1f 4f       	sbci	r17, 0xFF	; 255
    ad86:	ce 01       	movw	r24, r28
    ad88:	01 96       	adiw	r24, 0x01	; 1
    ad8a:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <tchar2uni>
    ad8e:	6f 3f       	cpi	r22, 0xFF	; 255
    ad90:	bf ef       	ldi	r27, 0xFF	; 255
    ad92:	7b 07       	cpc	r23, r27
    ad94:	8b 07       	cpc	r24, r27
    ad96:	9b 07       	cpc	r25, r27
    ad98:	09 f4       	brne	.+2      	; 0xad9c <follow_path+0xd6>
    ad9a:	a5 c1       	rjmp	.+842    	; 0xb0e6 <follow_path+0x420>
    ad9c:	61 15       	cp	r22, r1
    ad9e:	71 05       	cpc	r23, r1
    ada0:	e1 e0       	ldi	r30, 0x01	; 1
    ada2:	8e 07       	cpc	r24, r30
    ada4:	91 05       	cpc	r25, r1
    ada6:	48 f0       	brcs	.+18     	; 0xadba <follow_path+0xf4>
    ada8:	f8 01       	movw	r30, r16
    adaa:	ee 0f       	add	r30, r30
    adac:	ff 1f       	adc	r31, r31
    adae:	ea 0d       	add	r30, r10
    adb0:	fb 1d       	adc	r31, r11
    adb2:	91 83       	std	Z+1, r25	; 0x01
    adb4:	80 83       	st	Z, r24
    adb6:	0f 5f       	subi	r16, 0xFF	; 255
    adb8:	1f 4f       	sbci	r17, 0xFF	; 255
    adba:	9b 01       	movw	r18, r22
    adbc:	60 32       	cpi	r22, 0x20	; 32
    adbe:	71 05       	cpc	r23, r1
    adc0:	08 f4       	brcc	.+2      	; 0xadc4 <follow_path+0xfe>
    adc2:	6a c0       	rjmp	.+212    	; 0xae98 <follow_path+0x1d2>
    adc4:	6f 32       	cpi	r22, 0x2F	; 47
    adc6:	71 05       	cpc	r23, r1
    adc8:	31 f6       	brne	.-116    	; 0xad56 <follow_path+0x90>
    adca:	e9 81       	ldd	r30, Y+1	; 0x01
    adcc:	fa 81       	ldd	r31, Y+2	; 0x02
    adce:	80 81       	ld	r24, Z
    add0:	8f 32       	cpi	r24, 0x2F	; 47
    add2:	09 f4       	brne	.+2      	; 0xadd6 <follow_path+0x110>
    add4:	5d c0       	rjmp	.+186    	; 0xae90 <follow_path+0x1ca>
    add6:	8c 35       	cpi	r24, 0x5C	; 92
    add8:	09 f4       	brne	.+2      	; 0xaddc <follow_path+0x116>
    adda:	5a c0       	rjmp	.+180    	; 0xae90 <follow_path+0x1ca>
    addc:	1b 82       	std	Y+3, r1	; 0x03
    adde:	69 80       	ldd	r6, Y+1	; 0x01
    ade0:	7a 80       	ldd	r7, Y+2	; 0x02
    ade2:	98 01       	movw	r18, r16
    ade4:	22 0f       	add	r18, r18
    ade6:	33 1f       	adc	r19, r19
    ade8:	01 30       	cpi	r16, 0x01	; 1
    adea:	11 05       	cpc	r17, r1
    adec:	09 f0       	breq	.+2      	; 0xadf0 <follow_path+0x12a>
    adee:	57 c0       	rjmp	.+174    	; 0xae9e <follow_path+0x1d8>
    adf0:	d5 01       	movw	r26, r10
    adf2:	8d 91       	ld	r24, X+
    adf4:	9c 91       	ld	r25, X
    adf6:	8e 97       	sbiw	r24, 0x2e	; 46
    adf8:	09 f0       	breq	.+2      	; 0xadfc <follow_path+0x136>
    adfa:	5c c0       	rjmp	.+184    	; 0xaeb4 <follow_path+0x1ee>
    adfc:	f9 01       	movw	r30, r18
    adfe:	ea 0d       	add	r30, r10
    ae00:	fb 1d       	adc	r31, r11
    ae02:	11 82       	std	Z+1, r1	; 0x01
    ae04:	10 82       	st	Z, r1
    ae06:	f7 01       	movw	r30, r14
    ae08:	7c 96       	adiw	r30, 0x1c	; 28
    ae0a:	80 e0       	ldi	r24, 0x00	; 0
    ae0c:	90 e0       	ldi	r25, 0x00	; 0
    ae0e:	80 17       	cp	r24, r16
    ae10:	91 07       	cpc	r25, r17
    ae12:	08 f0       	brcs	.+2      	; 0xae16 <follow_path+0x150>
    ae14:	53 c0       	rjmp	.+166    	; 0xaebc <follow_path+0x1f6>
    ae16:	2e e2       	ldi	r18, 0x2E	; 46
    ae18:	21 93       	st	Z+, r18
    ae1a:	01 96       	adiw	r24, 0x01	; 1
    ae1c:	8b 30       	cpi	r24, 0x0B	; 11
    ae1e:	91 05       	cpc	r25, r1
    ae20:	b1 f7       	brne	.-20     	; 0xae0e <follow_path+0x148>
    ae22:	8b 81       	ldd	r24, Y+3	; 0x03
    ae24:	80 62       	ori	r24, 0x20	; 32
    ae26:	f7 01       	movw	r30, r14
    ae28:	87 a3       	std	Z+39, r24	; 0x27
    ae2a:	80 e0       	ldi	r24, 0x00	; 0
    ae2c:	90 e0       	ldi	r25, 0x00	; 0
    ae2e:	00 97       	sbiw	r24, 0x00	; 0
    ae30:	09 f0       	breq	.+2      	; 0xae34 <follow_path+0x16e>
    ae32:	76 c1       	rjmp	.+748    	; 0xb120 <follow_path+0x45a>
    ae34:	c7 01       	movw	r24, r14
    ae36:	ab dc       	rcall	.-1706   	; 0xa78e <dir_find>
    ae38:	f7 01       	movw	r30, r14
    ae3a:	27 a1       	ldd	r18, Z+39	; 0x27
    ae3c:	00 97       	sbiw	r24, 0x00	; 0
    ae3e:	09 f0       	breq	.+2      	; 0xae42 <follow_path+0x17c>
    ae40:	55 c1       	rjmp	.+682    	; 0xb0ec <follow_path+0x426>
    ae42:	22 fd       	sbrc	r18, 2
    ae44:	6d c1       	rjmp	.+730    	; 0xb120 <follow_path+0x45a>
    ae46:	f7 01       	movw	r30, r14
    ae48:	84 81       	ldd	r24, Z+4	; 0x04
    ae4a:	84 ff       	sbrs	r24, 4
    ae4c:	60 c1       	rjmp	.+704    	; 0xb10e <follow_path+0x448>
    ae4e:	66 85       	ldd	r22, Z+14	; 0x0e
    ae50:	77 85       	ldd	r23, Z+15	; 0x0f
    ae52:	71 70       	andi	r23, 0x01	; 1
    ae54:	29 85       	ldd	r18, Y+9	; 0x09
    ae56:	3a 85       	ldd	r19, Y+10	; 0x0a
    ae58:	62 0f       	add	r22, r18
    ae5a:	73 1f       	adc	r23, r19
    ae5c:	ad 81       	ldd	r26, Y+5	; 0x05
    ae5e:	be 81       	ldd	r27, Y+6	; 0x06
    ae60:	8c 91       	ld	r24, X
    ae62:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    ae66:	f7 01       	movw	r30, r14
    ae68:	66 83       	std	Z+6, r22	; 0x06
    ae6a:	77 83       	std	Z+7, r23	; 0x07
    ae6c:	80 87       	std	Z+8, r24	; 0x08
    ae6e:	91 87       	std	Z+9, r25	; 0x09
    ae70:	7a 82       	std	Y+2, r7	; 0x02
    ae72:	69 82       	std	Y+1, r6	; 0x01
    ae74:	d7 01       	movw	r26, r14
    ae76:	ed 91       	ld	r30, X+
    ae78:	fc 91       	ld	r31, X
    ae7a:	a3 84       	ldd	r10, Z+11	; 0x0b
    ae7c:	b4 84       	ldd	r11, Z+12	; 0x0c
    ae7e:	00 e0       	ldi	r16, 0x00	; 0
    ae80:	10 e0       	ldi	r17, 0x00	; 0
    ae82:	81 cf       	rjmp	.-254    	; 0xad86 <follow_path+0xc0>
    ae84:	50 e0       	ldi	r21, 0x00	; 0
    ae86:	24 17       	cp	r18, r20
    ae88:	35 07       	cpc	r19, r21
    ae8a:	09 f0       	breq	.+2      	; 0xae8e <follow_path+0x1c8>
    ae8c:	6c cf       	rjmp	.-296    	; 0xad66 <follow_path+0xa0>
    ae8e:	2b c1       	rjmp	.+598    	; 0xb0e6 <follow_path+0x420>
    ae90:	31 96       	adiw	r30, 0x01	; 1
    ae92:	fa 83       	std	Y+2, r31	; 0x02
    ae94:	e9 83       	std	Y+1, r30	; 0x01
    ae96:	99 cf       	rjmp	.-206    	; 0xadca <follow_path+0x104>
    ae98:	f4 e0       	ldi	r31, 0x04	; 4
    ae9a:	fb 83       	std	Y+3, r31	; 0x03
    ae9c:	a0 cf       	rjmp	.-192    	; 0xadde <follow_path+0x118>
    ae9e:	02 30       	cpi	r16, 0x02	; 2
    aea0:	11 05       	cpc	r17, r1
    aea2:	41 f4       	brne	.+16     	; 0xaeb4 <follow_path+0x1ee>
    aea4:	f5 01       	movw	r30, r10
    aea6:	82 81       	ldd	r24, Z+2	; 0x02
    aea8:	93 81       	ldd	r25, Z+3	; 0x03
    aeaa:	8e 97       	sbiw	r24, 0x2e	; 46
    aeac:	19 f4       	brne	.+6      	; 0xaeb4 <follow_path+0x1ee>
    aeae:	80 81       	ld	r24, Z
    aeb0:	91 81       	ldd	r25, Z+1	; 0x01
    aeb2:	a1 cf       	rjmp	.-190    	; 0xadf6 <follow_path+0x130>
    aeb4:	f9 01       	movw	r30, r18
    aeb6:	ea 0d       	add	r30, r10
    aeb8:	fb 1d       	adc	r31, r11
    aeba:	09 c0       	rjmp	.+18     	; 0xaece <follow_path+0x208>
    aebc:	20 e2       	ldi	r18, 0x20	; 32
    aebe:	ac cf       	rjmp	.-168    	; 0xae18 <follow_path+0x152>
    aec0:	92 91       	ld	r25, -Z
    aec2:	82 91       	ld	r24, -Z
    aec4:	80 32       	cpi	r24, 0x20	; 32
    aec6:	91 05       	cpc	r25, r1
    aec8:	31 f4       	brne	.+12     	; 0xaed6 <follow_path+0x210>
    aeca:	01 50       	subi	r16, 0x01	; 1
    aecc:	11 09       	sbc	r17, r1
    aece:	01 15       	cp	r16, r1
    aed0:	11 05       	cpc	r17, r1
    aed2:	b1 f7       	brne	.-20     	; 0xaec0 <follow_path+0x1fa>
    aed4:	02 c0       	rjmp	.+4      	; 0xaeda <follow_path+0x214>
    aed6:	8e 97       	sbiw	r24, 0x2e	; 46
    aed8:	c1 f3       	breq	.-16     	; 0xaeca <follow_path+0x204>
    aeda:	f8 01       	movw	r30, r16
    aedc:	ee 0f       	add	r30, r30
    aede:	ff 1f       	adc	r31, r31
    aee0:	ea 0d       	add	r30, r10
    aee2:	fb 1d       	adc	r31, r11
    aee4:	11 82       	std	Z+1, r1	; 0x01
    aee6:	10 82       	st	Z, r1
    aee8:	01 15       	cp	r16, r1
    aeea:	11 05       	cpc	r17, r1
    aeec:	09 f4       	brne	.+2      	; 0xaef0 <follow_path+0x22a>
    aeee:	fb c0       	rjmp	.+502    	; 0xb0e6 <follow_path+0x420>
    aef0:	d5 01       	movw	r26, r10
    aef2:	41 2c       	mov	r4, r1
    aef4:	51 2c       	mov	r5, r1
    aef6:	8d 91       	ld	r24, X+
    aef8:	9d 91       	ld	r25, X+
    aefa:	80 32       	cpi	r24, 0x20	; 32
    aefc:	91 05       	cpc	r25, r1
    aefe:	21 f4       	brne	.+8      	; 0xaf08 <follow_path+0x242>
    af00:	2f ef       	ldi	r18, 0xFF	; 255
    af02:	42 1a       	sub	r4, r18
    af04:	52 0a       	sbc	r5, r18
    af06:	f7 cf       	rjmp	.-18     	; 0xaef6 <follow_path+0x230>
    af08:	41 14       	cp	r4, r1
    af0a:	51 04       	cpc	r5, r1
    af0c:	11 f4       	brne	.+4      	; 0xaf12 <follow_path+0x24c>
    af0e:	8e 97       	sbiw	r24, 0x2e	; 46
    af10:	39 f4       	brne	.+14     	; 0xaf20 <follow_path+0x25a>
    af12:	3b 81       	ldd	r19, Y+3	; 0x03
    af14:	33 60       	ori	r19, 0x03	; 3
    af16:	3b 83       	std	Y+3, r19	; 0x03
    af18:	03 c0       	rjmp	.+6      	; 0xaf20 <follow_path+0x25a>
    af1a:	01 50       	subi	r16, 0x01	; 1
    af1c:	11 09       	sbc	r17, r1
    af1e:	21 f0       	breq	.+8      	; 0xaf28 <follow_path+0x262>
    af20:	92 91       	ld	r25, -Z
    af22:	82 91       	ld	r24, -Z
    af24:	8e 97       	sbiw	r24, 0x2e	; 46
    af26:	c9 f7       	brne	.-14     	; 0xaf1a <follow_path+0x254>
    af28:	4b e0       	ldi	r20, 0x0B	; 11
    af2a:	50 e0       	ldi	r21, 0x00	; 0
    af2c:	60 e2       	ldi	r22, 0x20	; 32
    af2e:	70 e0       	ldi	r23, 0x00	; 0
    af30:	8f 81       	ldd	r24, Y+7	; 0x07
    af32:	98 85       	ldd	r25, Y+8	; 0x08
    af34:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <mem_set>
    af38:	48 e0       	ldi	r20, 0x08	; 8
    af3a:	84 2e       	mov	r8, r20
    af3c:	91 2c       	mov	r9, r1
    af3e:	c1 2c       	mov	r12, r1
    af40:	d1 2c       	mov	r13, r1
    af42:	1c 82       	std	Y+4, r1	; 0x04
    af44:	12 01       	movw	r2, r4
    af46:	8f ef       	ldi	r24, 0xFF	; 255
    af48:	28 1a       	sub	r2, r24
    af4a:	38 0a       	sbc	r3, r24
    af4c:	44 0c       	add	r4, r4
    af4e:	55 1c       	adc	r5, r5
    af50:	f5 01       	movw	r30, r10
    af52:	e4 0d       	add	r30, r4
    af54:	f5 1d       	adc	r31, r5
    af56:	80 81       	ld	r24, Z
    af58:	91 81       	ldd	r25, Z+1	; 0x01
    af5a:	00 97       	sbiw	r24, 0x00	; 0
    af5c:	09 f4       	brne	.+2      	; 0xaf60 <follow_path+0x29a>
    af5e:	98 c0       	rjmp	.+304    	; 0xb090 <follow_path+0x3ca>
    af60:	80 32       	cpi	r24, 0x20	; 32
    af62:	91 05       	cpc	r25, r1
    af64:	31 f0       	breq	.+12     	; 0xaf72 <follow_path+0x2ac>
    af66:	8e 32       	cpi	r24, 0x2E	; 46
    af68:	91 05       	cpc	r25, r1
    af6a:	41 f4       	brne	.+16     	; 0xaf7c <follow_path+0x2b6>
    af6c:	20 16       	cp	r2, r16
    af6e:	31 06       	cpc	r3, r17
    af70:	61 f0       	breq	.+24     	; 0xaf8a <follow_path+0x2c4>
    af72:	9b 81       	ldd	r25, Y+3	; 0x03
    af74:	93 60       	ori	r25, 0x03	; 3
    af76:	9b 83       	std	Y+3, r25	; 0x03
    af78:	21 01       	movw	r4, r2
    af7a:	e4 cf       	rjmp	.-56     	; 0xaf44 <follow_path+0x27e>
    af7c:	c8 14       	cp	r12, r8
    af7e:	d9 04       	cpc	r13, r9
    af80:	40 f4       	brcc	.+16     	; 0xaf92 <follow_path+0x2cc>
    af82:	20 16       	cp	r2, r16
    af84:	31 06       	cpc	r3, r17
    af86:	31 f5       	brne	.+76     	; 0xafd4 <follow_path+0x30e>
    af88:	c5 c0       	rjmp	.+394    	; 0xb114 <follow_path+0x44e>
    af8a:	c8 14       	cp	r12, r8
    af8c:	d9 04       	cpc	r13, r9
    af8e:	08 f4       	brcc	.+2      	; 0xaf92 <follow_path+0x2cc>
    af90:	c1 c0       	rjmp	.+386    	; 0xb114 <follow_path+0x44e>
    af92:	ab e0       	ldi	r26, 0x0B	; 11
    af94:	8a 16       	cp	r8, r26
    af96:	91 04       	cpc	r9, r1
    af98:	39 f4       	brne	.+14     	; 0xafa8 <follow_path+0x2e2>
    af9a:	bb 81       	ldd	r27, Y+3	; 0x03
    af9c:	b3 60       	ori	r27, 0x03	; 3
    af9e:	bb 83       	std	Y+3, r27	; 0x03
    afa0:	2b e0       	ldi	r18, 0x0B	; 11
    afa2:	82 2e       	mov	r8, r18
    afa4:	91 2c       	mov	r9, r1
    afa6:	74 c0       	rjmp	.+232    	; 0xb090 <follow_path+0x3ca>
    afa8:	20 16       	cp	r2, r16
    afaa:	31 06       	cpc	r3, r17
    afac:	39 f0       	breq	.+14     	; 0xafbc <follow_path+0x2f6>
    afae:	eb 81       	ldd	r30, Y+3	; 0x03
    afb0:	e3 60       	ori	r30, 0x03	; 3
    afb2:	eb 83       	std	Y+3, r30	; 0x03
    afb4:	02 15       	cp	r16, r2
    afb6:	13 05       	cpc	r17, r3
    afb8:	08 f4       	brcc	.+2      	; 0xafbc <follow_path+0x2f6>
    afba:	6a c0       	rjmp	.+212    	; 0xb090 <follow_path+0x3ca>
    afbc:	fc 81       	ldd	r31, Y+4	; 0x04
    afbe:	ff 0f       	add	r31, r31
    afc0:	ff 0f       	add	r31, r31
    afc2:	fc 83       	std	Y+4, r31	; 0x04
    afc4:	18 01       	movw	r2, r16
    afc6:	8b e0       	ldi	r24, 0x0B	; 11
    afc8:	88 2e       	mov	r8, r24
    afca:	91 2c       	mov	r9, r1
    afcc:	98 e0       	ldi	r25, 0x08	; 8
    afce:	c9 2e       	mov	r12, r25
    afd0:	d1 2c       	mov	r13, r1
    afd2:	d2 cf       	rjmp	.-92     	; 0xaf78 <follow_path+0x2b2>
    afd4:	80 38       	cpi	r24, 0x80	; 128
    afd6:	91 05       	cpc	r25, r1
    afd8:	78 f1       	brcs	.+94     	; 0xb038 <follow_path+0x372>
    afda:	2b 81       	ldd	r18, Y+3	; 0x03
    afdc:	22 60       	ori	r18, 0x02	; 2
    afde:	52 2e       	mov	r5, r18
    afe0:	bc 01       	movw	r22, r24
    afe2:	80 e0       	ldi	r24, 0x00	; 0
    afe4:	90 e0       	ldi	r25, 0x00	; 0
    afe6:	45 eb       	ldi	r20, 0xB5	; 181
    afe8:	51 e0       	ldi	r21, 0x01	; 1
    afea:	0e 94 2c 68 	call	0xd058	; 0xd058 <ff_uni2oem>
    afee:	87 ff       	sbrs	r24, 7
    aff0:	08 c0       	rjmp	.+16     	; 0xb002 <follow_path+0x33c>
    aff2:	8f 77       	andi	r24, 0x7F	; 127
    aff4:	99 27       	eor	r25, r25
    aff6:	fc 01       	movw	r30, r24
    aff8:	e5 59       	subi	r30, 0x95	; 149
    affa:	fb 4f       	sbci	r31, 0xFB	; 251
    affc:	80 81       	ld	r24, Z
    affe:	90 e0       	ldi	r25, 0x00	; 0
    b000:	18 c0       	rjmp	.+48     	; 0xb032 <follow_path+0x36c>
    b002:	8f 3f       	cpi	r24, 0xFF	; 255
    b004:	91 05       	cpc	r25, r1
    b006:	a9 f0       	breq	.+42     	; 0xb032 <follow_path+0x36c>
    b008:	a0 f0       	brcs	.+40     	; 0xb032 <follow_path+0x36c>
    b00a:	94 01       	movw	r18, r8
    b00c:	21 50       	subi	r18, 0x01	; 1
    b00e:	31 09       	sbc	r19, r1
    b010:	c2 16       	cp	r12, r18
    b012:	d3 06       	cpc	r13, r19
    b014:	28 f0       	brcs	.+10     	; 0xb020 <follow_path+0x35a>
    b016:	3b 81       	ldd	r19, Y+3	; 0x03
    b018:	33 60       	ori	r19, 0x03	; 3
    b01a:	3b 83       	std	Y+3, r19	; 0x03
    b01c:	64 01       	movw	r12, r8
    b01e:	ac cf       	rjmp	.-168    	; 0xaf78 <follow_path+0x2b2>
    b020:	f7 01       	movw	r30, r14
    b022:	ec 0d       	add	r30, r12
    b024:	fd 1d       	adc	r31, r13
    b026:	94 8f       	std	Z+28, r25	; 0x1c
    b028:	d6 01       	movw	r26, r12
    b02a:	11 96       	adiw	r26, 0x01	; 1
    b02c:	6d 01       	movw	r12, r26
    b02e:	5b 82       	std	Y+3, r5	; 0x03
    b030:	26 c0       	rjmp	.+76     	; 0xb07e <follow_path+0x3b8>
    b032:	00 97       	sbiw	r24, 0x00	; 0
    b034:	59 f0       	breq	.+22     	; 0xb04c <follow_path+0x386>
    b036:	5b 82       	std	Y+3, r5	; 0x03
    b038:	e0 e3       	ldi	r30, 0x30	; 48
    b03a:	f4 e0       	ldi	r31, 0x04	; 4
    b03c:	21 91       	ld	r18, Z+
    b03e:	22 23       	and	r18, r18
    b040:	59 f0       	breq	.+22     	; 0xb058 <follow_path+0x392>
    b042:	30 e0       	ldi	r19, 0x00	; 0
    b044:	82 17       	cp	r24, r18
    b046:	93 07       	cpc	r25, r19
    b048:	c9 f7       	brne	.-14     	; 0xb03c <follow_path+0x376>
    b04a:	5b 80       	ldd	r5, Y+3	; 0x03
    b04c:	b5 2d       	mov	r27, r5
    b04e:	b3 60       	ori	r27, 0x03	; 3
    b050:	bb 83       	std	Y+3, r27	; 0x03
    b052:	8f e5       	ldi	r24, 0x5F	; 95
    b054:	90 e0       	ldi	r25, 0x00	; 0
    b056:	13 c0       	rjmp	.+38     	; 0xb07e <follow_path+0x3b8>
    b058:	9c 01       	movw	r18, r24
    b05a:	21 54       	subi	r18, 0x41	; 65
    b05c:	31 09       	sbc	r19, r1
    b05e:	2a 31       	cpi	r18, 0x1A	; 26
    b060:	31 05       	cpc	r19, r1
    b062:	18 f4       	brcc	.+6      	; 0xb06a <follow_path+0x3a4>
    b064:	ec 81       	ldd	r30, Y+4	; 0x04
    b066:	e2 60       	ori	r30, 0x02	; 2
    b068:	ec 83       	std	Y+4, r30	; 0x04
    b06a:	9c 01       	movw	r18, r24
    b06c:	21 56       	subi	r18, 0x61	; 97
    b06e:	31 09       	sbc	r19, r1
    b070:	2a 31       	cpi	r18, 0x1A	; 26
    b072:	31 05       	cpc	r19, r1
    b074:	20 f4       	brcc	.+8      	; 0xb07e <follow_path+0x3b8>
    b076:	fc 81       	ldd	r31, Y+4	; 0x04
    b078:	f1 60       	ori	r31, 0x01	; 1
    b07a:	fc 83       	std	Y+4, r31	; 0x04
    b07c:	80 97       	sbiw	r24, 0x20	; 32
    b07e:	f7 01       	movw	r30, r14
    b080:	ec 0d       	add	r30, r12
    b082:	fd 1d       	adc	r31, r13
    b084:	84 8f       	std	Z+28, r24	; 0x1c
    b086:	96 01       	movw	r18, r12
    b088:	2f 5f       	subi	r18, 0xFF	; 255
    b08a:	3f 4f       	sbci	r19, 0xFF	; 255
    b08c:	69 01       	movw	r12, r18
    b08e:	74 cf       	rjmp	.-280    	; 0xaf78 <follow_path+0x2b2>
    b090:	f7 01       	movw	r30, r14
    b092:	84 8d       	ldd	r24, Z+28	; 0x1c
    b094:	85 3e       	cpi	r24, 0xE5	; 229
    b096:	11 f4       	brne	.+4      	; 0xb09c <follow_path+0x3d6>
    b098:	25 e0       	ldi	r18, 0x05	; 5
    b09a:	24 8f       	std	Z+28, r18	; 0x1c
    b09c:	38 e0       	ldi	r19, 0x08	; 8
    b09e:	83 16       	cp	r8, r19
    b0a0:	91 04       	cpc	r9, r1
    b0a2:	21 f4       	brne	.+8      	; 0xb0ac <follow_path+0x3e6>
    b0a4:	8c 81       	ldd	r24, Y+4	; 0x04
    b0a6:	88 0f       	add	r24, r24
    b0a8:	88 0f       	add	r24, r24
    b0aa:	8c 83       	std	Y+4, r24	; 0x04
    b0ac:	8c 81       	ldd	r24, Y+4	; 0x04
    b0ae:	8c 70       	andi	r24, 0x0C	; 12
    b0b0:	8c 30       	cpi	r24, 0x0C	; 12
    b0b2:	21 f0       	breq	.+8      	; 0xb0bc <follow_path+0x3f6>
    b0b4:	8c 81       	ldd	r24, Y+4	; 0x04
    b0b6:	83 70       	andi	r24, 0x03	; 3
    b0b8:	83 30       	cpi	r24, 0x03	; 3
    b0ba:	19 f4       	brne	.+6      	; 0xb0c2 <follow_path+0x3fc>
    b0bc:	9b 81       	ldd	r25, Y+3	; 0x03
    b0be:	92 60       	ori	r25, 0x02	; 2
    b0c0:	9b 83       	std	Y+3, r25	; 0x03
    b0c2:	ab 81       	ldd	r26, Y+3	; 0x03
    b0c4:	a1 fd       	sbrc	r26, 1
    b0c6:	0b c0       	rjmp	.+22     	; 0xb0de <follow_path+0x418>
    b0c8:	bc 81       	ldd	r27, Y+4	; 0x04
    b0ca:	b0 ff       	sbrs	r27, 0
    b0cc:	02 c0       	rjmp	.+4      	; 0xb0d2 <follow_path+0x40c>
    b0ce:	a0 61       	ori	r26, 0x10	; 16
    b0d0:	ab 83       	std	Y+3, r26	; 0x03
    b0d2:	ec 81       	ldd	r30, Y+4	; 0x04
    b0d4:	e2 ff       	sbrs	r30, 2
    b0d6:	03 c0       	rjmp	.+6      	; 0xb0de <follow_path+0x418>
    b0d8:	fb 81       	ldd	r31, Y+3	; 0x03
    b0da:	f8 60       	ori	r31, 0x08	; 8
    b0dc:	fb 83       	std	Y+3, r31	; 0x03
    b0de:	2b 81       	ldd	r18, Y+3	; 0x03
    b0e0:	f7 01       	movw	r30, r14
    b0e2:	27 a3       	std	Z+39, r18	; 0x27
    b0e4:	a2 ce       	rjmp	.-700    	; 0xae2a <follow_path+0x164>
    b0e6:	86 e0       	ldi	r24, 0x06	; 6
    b0e8:	90 e0       	ldi	r25, 0x00	; 0
    b0ea:	a1 ce       	rjmp	.-702    	; 0xae2e <follow_path+0x168>
    b0ec:	84 30       	cpi	r24, 0x04	; 4
    b0ee:	91 05       	cpc	r25, r1
    b0f0:	b9 f4       	brne	.+46     	; 0xb120 <follow_path+0x45a>
    b0f2:	32 2f       	mov	r19, r18
    b0f4:	34 70       	andi	r19, 0x04	; 4
    b0f6:	25 ff       	sbrs	r18, 5
    b0f8:	08 c0       	rjmp	.+16     	; 0xb10a <follow_path+0x444>
    b0fa:	33 23       	and	r19, r19
    b0fc:	09 f4       	brne	.+2      	; 0xb100 <follow_path+0x43a>
    b0fe:	b8 ce       	rjmp	.-656    	; 0xae70 <follow_path+0x1aa>
    b100:	80 e8       	ldi	r24, 0x80	; 128
    b102:	87 a3       	std	Z+39, r24	; 0x27
    b104:	80 e0       	ldi	r24, 0x00	; 0
    b106:	90 e0       	ldi	r25, 0x00	; 0
    b108:	0b c0       	rjmp	.+22     	; 0xb120 <follow_path+0x45a>
    b10a:	31 11       	cpse	r19, r1
    b10c:	09 c0       	rjmp	.+18     	; 0xb120 <follow_path+0x45a>
    b10e:	85 e0       	ldi	r24, 0x05	; 5
    b110:	90 e0       	ldi	r25, 0x00	; 0
    b112:	06 c0       	rjmp	.+12     	; 0xb120 <follow_path+0x45a>
    b114:	fb e0       	ldi	r31, 0x0B	; 11
    b116:	8f 16       	cp	r8, r31
    b118:	91 04       	cpc	r9, r1
    b11a:	09 f0       	breq	.+2      	; 0xb11e <follow_path+0x458>
    b11c:	4f cf       	rjmp	.-354    	; 0xafbc <follow_path+0x2f6>
    b11e:	3d cf       	rjmp	.-390    	; 0xaf9a <follow_path+0x2d4>
    b120:	2a 96       	adiw	r28, 0x0a	; 10
    b122:	e2 e1       	ldi	r30, 0x12	; 18
    b124:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000b128 <f_mount>:
    b128:	a6 e0       	ldi	r26, 0x06	; 6
    b12a:	b0 e0       	ldi	r27, 0x00	; 0
    b12c:	ea e9       	ldi	r30, 0x9A	; 154
    b12e:	f8 e5       	ldi	r31, 0x58	; 88
    b130:	0c 94 aa e3 	jmp	0x1c754	; 0x1c754 <__prologue_saves__+0x1e>
    b134:	9c 83       	std	Y+4, r25	; 0x04
    b136:	8b 83       	std	Y+3, r24	; 0x03
    b138:	7e 83       	std	Y+6, r23	; 0x06
    b13a:	6d 83       	std	Y+5, r22	; 0x05
    b13c:	14 2f       	mov	r17, r20
    b13e:	7a 83       	std	Y+2, r23	; 0x02
    b140:	69 83       	std	Y+1, r22	; 0x01
    b142:	ce 01       	movw	r24, r28
    b144:	01 96       	adiw	r24, 0x01	; 1
    b146:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <get_ldnumber>
    b14a:	97 fd       	sbrc	r25, 7
    b14c:	20 c0       	rjmp	.+64     	; 0xb18e <f_mount+0x66>
    b14e:	88 0f       	add	r24, r24
    b150:	99 1f       	adc	r25, r25
    b152:	fc 01       	movw	r30, r24
    b154:	e7 5d       	subi	r30, 0xD7	; 215
    b156:	f7 4e       	sbci	r31, 0xE7	; 231
    b158:	01 90       	ld	r0, Z+
    b15a:	f0 81       	ld	r31, Z
    b15c:	e0 2d       	mov	r30, r0
    b15e:	30 97       	sbiw	r30, 0x00	; 0
    b160:	09 f0       	breq	.+2      	; 0xb164 <f_mount+0x3c>
    b162:	10 82       	st	Z, r1
    b164:	eb 81       	ldd	r30, Y+3	; 0x03
    b166:	fc 81       	ldd	r31, Y+4	; 0x04
    b168:	30 97       	sbiw	r30, 0x00	; 0
    b16a:	09 f0       	breq	.+2      	; 0xb16e <f_mount+0x46>
    b16c:	10 82       	st	Z, r1
    b16e:	dc 01       	movw	r26, r24
    b170:	a7 5d       	subi	r26, 0xD7	; 215
    b172:	b7 4e       	sbci	r27, 0xE7	; 231
    b174:	ed 93       	st	X+, r30
    b176:	fc 93       	st	X, r31
    b178:	11 23       	and	r17, r17
    b17a:	61 f0       	breq	.+24     	; 0xb194 <f_mount+0x6c>
    b17c:	40 e0       	ldi	r20, 0x00	; 0
    b17e:	be 01       	movw	r22, r28
    b180:	6d 5f       	subi	r22, 0xFD	; 253
    b182:	7f 4f       	sbci	r23, 0xFF	; 255
    b184:	ce 01       	movw	r24, r28
    b186:	05 96       	adiw	r24, 0x05	; 5
    b188:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    b18c:	05 c0       	rjmp	.+10     	; 0xb198 <f_mount+0x70>
    b18e:	8b e0       	ldi	r24, 0x0B	; 11
    b190:	90 e0       	ldi	r25, 0x00	; 0
    b192:	02 c0       	rjmp	.+4      	; 0xb198 <f_mount+0x70>
    b194:	80 e0       	ldi	r24, 0x00	; 0
    b196:	90 e0       	ldi	r25, 0x00	; 0
    b198:	26 96       	adiw	r28, 0x06	; 6
    b19a:	e3 e0       	ldi	r30, 0x03	; 3
    b19c:	0c 94 c6 e3 	jmp	0x1c78c	; 0x1c78c <__epilogue_restores__+0x1e>

0000b1a0 <f_open>:
    b1a0:	a6 e3       	ldi	r26, 0x36	; 54
    b1a2:	b0 e0       	ldi	r27, 0x00	; 0
    b1a4:	e6 ed       	ldi	r30, 0xD6	; 214
    b1a6:	f8 e5       	ldi	r31, 0x58	; 88
    b1a8:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    b1ac:	7a ab       	std	Y+50, r23	; 0x32
    b1ae:	69 ab       	std	Y+49, r22	; 0x31
    b1b0:	00 97       	sbiw	r24, 0x00	; 0
    b1b2:	09 f4       	brne	.+2      	; 0xb1b6 <f_open+0x16>
    b1b4:	93 c1       	rjmp	.+806    	; 0xb4dc <f_open+0x33c>
    b1b6:	74 2e       	mov	r7, r20
    b1b8:	7c 01       	movw	r14, r24
    b1ba:	24 2f       	mov	r18, r20
    b1bc:	2f 73       	andi	r18, 0x3F	; 63
    b1be:	32 2e       	mov	r3, r18
    b1c0:	42 2f       	mov	r20, r18
    b1c2:	be 01       	movw	r22, r28
    b1c4:	61 5d       	subi	r22, 0xD1	; 209
    b1c6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1c8:	ce 01       	movw	r24, r28
    b1ca:	c1 96       	adiw	r24, 0x31	; 49
    b1cc:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    b1d0:	00 97       	sbiw	r24, 0x00	; 0
    b1d2:	09 f0       	breq	.+2      	; 0xb1d6 <f_open+0x36>
    b1d4:	7d c1       	rjmp	.+762    	; 0xb4d0 <f_open+0x330>
    b1d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b1d8:	98 a9       	ldd	r25, Y+48	; 0x30
    b1da:	9a 83       	std	Y+2, r25	; 0x02
    b1dc:	89 83       	std	Y+1, r24	; 0x01
    b1de:	80 e0       	ldi	r24, 0x00	; 0
    b1e0:	92 e0       	ldi	r25, 0x02	; 2
    b1e2:	0e 94 26 68 	call	0xd04c	; 0xd04c <ff_memalloc>
    b1e6:	5c 01       	movw	r10, r24
    b1e8:	00 97       	sbiw	r24, 0x00	; 0
    b1ea:	09 f4       	brne	.+2      	; 0xb1ee <f_open+0x4e>
    b1ec:	79 c1       	rjmp	.+754    	; 0xb4e0 <f_open+0x340>
    b1ee:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1f0:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1f2:	94 87       	std	Z+12, r25	; 0x0c
    b1f4:	83 87       	std	Z+11, r24	; 0x0b
    b1f6:	69 a9       	ldd	r22, Y+49	; 0x31
    b1f8:	7a a9       	ldd	r23, Y+50	; 0x32
    b1fa:	ce 01       	movw	r24, r28
    b1fc:	01 96       	adiw	r24, 0x01	; 1
    b1fe:	63 dd       	rcall	.-1338   	; 0xacc6 <follow_path>
    b200:	8c 01       	movw	r16, r24
    b202:	89 2b       	or	r24, r25
    b204:	29 f4       	brne	.+10     	; 0xb210 <f_open+0x70>
    b206:	88 a5       	ldd	r24, Y+40	; 0x28
    b208:	87 ff       	sbrs	r24, 7
    b20a:	02 c0       	rjmp	.+4      	; 0xb210 <f_open+0x70>
    b20c:	06 e0       	ldi	r16, 0x06	; 6
    b20e:	10 e0       	ldi	r17, 0x00	; 0
    b210:	87 2d       	mov	r24, r7
    b212:	8c 71       	andi	r24, 0x1C	; 28
    b214:	09 f4       	brne	.+2      	; 0xb218 <f_open+0x78>
    b216:	75 c0       	rjmp	.+234    	; 0xb302 <f_open+0x162>
    b218:	01 15       	cp	r16, r1
    b21a:	11 05       	cpc	r17, r1
    b21c:	79 f0       	breq	.+30     	; 0xb23c <f_open+0x9c>
    b21e:	04 30       	cpi	r16, 0x04	; 4
    b220:	11 05       	cpc	r17, r1
    b222:	09 f0       	breq	.+2      	; 0xb226 <f_open+0x86>
    b224:	6d c1       	rjmp	.+730    	; 0xb500 <f_open+0x360>
    b226:	ce 01       	movw	r24, r28
    b228:	01 96       	adiw	r24, 0x01	; 1
    b22a:	bf db       	rcall	.-2178   	; 0xa9aa <dir_register>
    b22c:	8c 01       	movw	r16, r24
    b22e:	89 2b       	or	r24, r25
    b230:	09 f0       	breq	.+2      	; 0xb234 <f_open+0x94>
    b232:	66 c1       	rjmp	.+716    	; 0xb500 <f_open+0x360>
    b234:	33 2d       	mov	r19, r3
    b236:	38 60       	ori	r19, 0x08	; 8
    b238:	33 2e       	mov	r3, r19
    b23a:	06 c0       	rjmp	.+12     	; 0xb248 <f_open+0xa8>
    b23c:	8d 81       	ldd	r24, Y+5	; 0x05
    b23e:	81 71       	andi	r24, 0x11	; 17
    b240:	09 f0       	breq	.+2      	; 0xb244 <f_open+0xa4>
    b242:	5c c1       	rjmp	.+696    	; 0xb4fc <f_open+0x35c>
    b244:	72 fc       	sbrc	r7, 2
    b246:	51 c1       	rjmp	.+674    	; 0xb4ea <f_open+0x34a>
    b248:	33 fe       	sbrs	r3, 3
    b24a:	6b c0       	rjmp	.+214    	; 0xb322 <f_open+0x182>
    b24c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b24e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b250:	ef a5       	ldd	r30, Y+47	; 0x2f
    b252:	f8 a9       	ldd	r31, Y+48	; 0x30
    b254:	b8 01       	movw	r22, r16
    b256:	80 81       	ld	r24, Z
    b258:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    b25c:	2b 01       	movw	r4, r22
    b25e:	3c 01       	movw	r6, r24
    b260:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
    b264:	ab 01       	movw	r20, r22
    b266:	bc 01       	movw	r22, r24
    b268:	c8 01       	movw	r24, r16
    b26a:	0e 96       	adiw	r24, 0x0e	; 14
    b26c:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
    b270:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b272:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b274:	80 e2       	ldi	r24, 0x20	; 32
    b276:	83 87       	std	Z+11, r24	; 0x0b
    b278:	af a5       	ldd	r26, Y+47	; 0x2f
    b27a:	b8 a9       	ldd	r27, Y+48	; 0x30
    b27c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b27e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b280:	12 8e       	std	Z+26, r1	; 0x1a
    b282:	13 8e       	std	Z+27, r1	; 0x1b
    b284:	8c 91       	ld	r24, X
    b286:	83 30       	cpi	r24, 0x03	; 3
    b288:	11 f4       	brne	.+4      	; 0xb28e <f_open+0xee>
    b28a:	14 8a       	std	Z+20, r1	; 0x14
    b28c:	15 8a       	std	Z+21, r1	; 0x15
    b28e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b290:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b292:	14 8e       	std	Z+28, r1	; 0x1c
    b294:	15 8e       	std	Z+29, r1	; 0x1d
    b296:	16 8e       	std	Z+30, r1	; 0x1e
    b298:	17 8e       	std	Z+31, r1	; 0x1f
    b29a:	81 e0       	ldi	r24, 0x01	; 1
    b29c:	fd 01       	movw	r30, r26
    b29e:	83 83       	std	Z+3, r24	; 0x03
    b2a0:	41 14       	cp	r4, r1
    b2a2:	51 04       	cpc	r5, r1
    b2a4:	61 04       	cpc	r6, r1
    b2a6:	71 04       	cpc	r7, r1
    b2a8:	c9 f1       	breq	.+114    	; 0xb31c <f_open+0x17c>
    b2aa:	21 a9       	ldd	r18, Z+49	; 0x31
    b2ac:	32 a9       	ldd	r19, Z+50	; 0x32
    b2ae:	43 a9       	ldd	r20, Z+51	; 0x33
    b2b0:	54 a9       	ldd	r21, Z+52	; 0x34
    b2b2:	2b ab       	std	Y+51, r18	; 0x33
    b2b4:	3c ab       	std	Y+52, r19	; 0x34
    b2b6:	4d ab       	std	Y+53, r20	; 0x35
    b2b8:	5e ab       	std	Y+54, r21	; 0x36
    b2ba:	00 e0       	ldi	r16, 0x00	; 0
    b2bc:	10 e0       	ldi	r17, 0x00	; 0
    b2be:	98 01       	movw	r18, r16
    b2c0:	b3 01       	movw	r22, r6
    b2c2:	a2 01       	movw	r20, r4
    b2c4:	ce 01       	movw	r24, r28
    b2c6:	01 96       	adiw	r24, 0x01	; 1
    b2c8:	0e 94 04 51 	call	0xa208	; 0xa208 <remove_chain>
    b2cc:	8c 01       	movw	r16, r24
    b2ce:	89 2b       	or	r24, r25
    b2d0:	09 f0       	breq	.+2      	; 0xb2d4 <f_open+0x134>
    b2d2:	16 c1       	rjmp	.+556    	; 0xb500 <f_open+0x360>
    b2d4:	4b a9       	ldd	r20, Y+51	; 0x33
    b2d6:	5c a9       	ldd	r21, Y+52	; 0x34
    b2d8:	6d a9       	ldd	r22, Y+53	; 0x35
    b2da:	7e a9       	ldd	r23, Y+54	; 0x36
    b2dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2de:	98 a9       	ldd	r25, Y+48	; 0x30
    b2e0:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    b2e4:	8c 01       	movw	r16, r24
    b2e6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2e8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2ea:	21 e0       	ldi	r18, 0x01	; 1
    b2ec:	42 1a       	sub	r4, r18
    b2ee:	51 08       	sbc	r5, r1
    b2f0:	61 08       	sbc	r6, r1
    b2f2:	71 08       	sbc	r7, r1
    b2f4:	45 86       	std	Z+13, r4	; 0x0d
    b2f6:	56 86       	std	Z+14, r5	; 0x0e
    b2f8:	67 86       	std	Z+15, r6	; 0x0f
    b2fa:	70 8a       	std	Z+16, r7	; 0x10
    b2fc:	89 2b       	or	r24, r25
    b2fe:	61 f0       	breq	.+24     	; 0xb318 <f_open+0x178>
    b300:	ff c0       	rjmp	.+510    	; 0xb500 <f_open+0x360>
    b302:	01 15       	cp	r16, r1
    b304:	11 05       	cpc	r17, r1
    b306:	09 f0       	breq	.+2      	; 0xb30a <f_open+0x16a>
    b308:	fb c0       	rjmp	.+502    	; 0xb500 <f_open+0x360>
    b30a:	8d 81       	ldd	r24, Y+5	; 0x05
    b30c:	84 fd       	sbrc	r24, 4
    b30e:	f3 c0       	rjmp	.+486    	; 0xb4f6 <f_open+0x356>
    b310:	71 fe       	sbrs	r7, 1
    b312:	02 c0       	rjmp	.+4      	; 0xb318 <f_open+0x178>
    b314:	80 fd       	sbrc	r24, 0
    b316:	f2 c0       	rjmp	.+484    	; 0xb4fc <f_open+0x35c>
    b318:	33 fe       	sbrs	r3, 3
    b31a:	03 c0       	rjmp	.+6      	; 0xb322 <f_open+0x182>
    b31c:	33 2d       	mov	r19, r3
    b31e:	30 64       	ori	r19, 0x40	; 64
    b320:	33 2e       	mov	r3, r19
    b322:	0f a5       	ldd	r16, Y+47	; 0x2f
    b324:	18 a9       	ldd	r17, Y+48	; 0x30
    b326:	f8 01       	movw	r30, r16
    b328:	81 a9       	ldd	r24, Z+49	; 0x31
    b32a:	92 a9       	ldd	r25, Z+50	; 0x32
    b32c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b32e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b330:	f7 01       	movw	r30, r14
    b332:	84 8f       	std	Z+28, r24	; 0x1c
    b334:	95 8f       	std	Z+29, r25	; 0x1d
    b336:	a6 8f       	std	Z+30, r26	; 0x1e
    b338:	b7 8f       	std	Z+31, r27	; 0x1f
    b33a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b33c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b33e:	71 a2       	std	Z+33, r7	; 0x21
    b340:	60 a2       	std	Z+32, r6	; 0x20
    b342:	b3 01       	movw	r22, r6
    b344:	f8 01       	movw	r30, r16
    b346:	80 81       	ld	r24, Z
    b348:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    b34c:	f7 01       	movw	r30, r14
    b34e:	66 83       	std	Z+6, r22	; 0x06
    b350:	77 83       	std	Z+7, r23	; 0x07
    b352:	80 87       	std	Z+8, r24	; 0x08
    b354:	91 87       	std	Z+9, r25	; 0x09
    b356:	c3 01       	movw	r24, r6
    b358:	4c 96       	adiw	r24, 0x1c	; 28
    b35a:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <ld_dword>
    b35e:	f7 01       	movw	r30, r14
    b360:	62 87       	std	Z+10, r22	; 0x0a
    b362:	73 87       	std	Z+11, r23	; 0x0b
    b364:	84 87       	std	Z+12, r24	; 0x0c
    b366:	95 87       	std	Z+13, r25	; 0x0d
    b368:	13 a2       	std	Z+35, r1	; 0x23
    b36a:	12 a2       	std	Z+34, r1	; 0x22
    b36c:	11 83       	std	Z+1, r17	; 0x01
    b36e:	00 83       	st	Z, r16
    b370:	f8 01       	movw	r30, r16
    b372:	85 81       	ldd	r24, Z+5	; 0x05
    b374:	96 81       	ldd	r25, Z+6	; 0x06
    b376:	f7 01       	movw	r30, r14
    b378:	93 83       	std	Z+3, r25	; 0x03
    b37a:	82 83       	std	Z+2, r24	; 0x02
    b37c:	36 86       	std	Z+14, r3	; 0x0e
    b37e:	17 86       	std	Z+15, r1	; 0x0f
    b380:	10 8e       	std	Z+24, r1	; 0x18
    b382:	11 8e       	std	Z+25, r1	; 0x19
    b384:	12 8e       	std	Z+26, r1	; 0x1a
    b386:	13 8e       	std	Z+27, r1	; 0x1b
    b388:	10 8a       	std	Z+16, r1	; 0x10
    b38a:	11 8a       	std	Z+17, r1	; 0x11
    b38c:	12 8a       	std	Z+18, r1	; 0x12
    b38e:	13 8a       	std	Z+19, r1	; 0x13
    b390:	67 01       	movw	r12, r14
    b392:	f4 e2       	ldi	r31, 0x24	; 36
    b394:	cf 0e       	add	r12, r31
    b396:	d1 1c       	adc	r13, r1
    b398:	40 e0       	ldi	r20, 0x00	; 0
    b39a:	52 e0       	ldi	r21, 0x02	; 2
    b39c:	60 e0       	ldi	r22, 0x00	; 0
    b39e:	70 e0       	ldi	r23, 0x00	; 0
    b3a0:	c6 01       	movw	r24, r12
    b3a2:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <mem_set>
    b3a6:	35 fc       	sbrc	r3, 5
    b3a8:	03 c0       	rjmp	.+6      	; 0xb3b0 <f_open+0x210>
    b3aa:	00 e0       	ldi	r16, 0x00	; 0
    b3ac:	10 e0       	ldi	r17, 0x00	; 0
    b3ae:	89 c0       	rjmp	.+274    	; 0xb4c2 <f_open+0x322>
    b3b0:	f7 01       	movw	r30, r14
    b3b2:	62 84       	ldd	r6, Z+10	; 0x0a
    b3b4:	73 84       	ldd	r7, Z+11	; 0x0b
    b3b6:	84 84       	ldd	r8, Z+12	; 0x0c
    b3b8:	95 84       	ldd	r9, Z+13	; 0x0d
    b3ba:	61 14       	cp	r6, r1
    b3bc:	71 04       	cpc	r7, r1
    b3be:	81 04       	cpc	r8, r1
    b3c0:	91 04       	cpc	r9, r1
    b3c2:	99 f3       	breq	.-26     	; 0xb3aa <f_open+0x20a>
    b3c4:	60 8a       	std	Z+16, r6	; 0x10
    b3c6:	71 8a       	std	Z+17, r7	; 0x11
    b3c8:	82 8a       	std	Z+18, r8	; 0x12
    b3ca:	93 8a       	std	Z+19, r9	; 0x13
    b3cc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3ce:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3d0:	21 84       	ldd	r2, Z+9	; 0x09
    b3d2:	32 84       	ldd	r3, Z+10	; 0x0a
    b3d4:	c1 01       	movw	r24, r2
    b3d6:	a0 e0       	ldi	r26, 0x00	; 0
    b3d8:	b0 e0       	ldi	r27, 0x00	; 0
    b3da:	1c 01       	movw	r2, r24
    b3dc:	2d 01       	movw	r4, r26
    b3de:	59 e0       	ldi	r21, 0x09	; 9
    b3e0:	22 0c       	add	r2, r2
    b3e2:	33 1c       	adc	r3, r3
    b3e4:	44 1c       	adc	r4, r4
    b3e6:	55 1c       	adc	r5, r5
    b3e8:	5a 95       	dec	r21
    b3ea:	d1 f7       	brne	.-12     	; 0xb3e0 <f_open+0x240>
    b3ec:	f7 01       	movw	r30, r14
    b3ee:	46 81       	ldd	r20, Z+6	; 0x06
    b3f0:	57 81       	ldd	r21, Z+7	; 0x07
    b3f2:	60 85       	ldd	r22, Z+8	; 0x08
    b3f4:	71 85       	ldd	r23, Z+9	; 0x09
    b3f6:	26 14       	cp	r2, r6
    b3f8:	37 04       	cpc	r3, r7
    b3fa:	48 04       	cpc	r4, r8
    b3fc:	59 04       	cpc	r5, r9
    b3fe:	f0 f4       	brcc	.+60     	; 0xb43c <f_open+0x29c>
    b400:	f7 01       	movw	r30, r14
    b402:	80 81       	ld	r24, Z
    b404:	91 81       	ldd	r25, Z+1	; 0x01
    b406:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_fat.isra.10>
    b40a:	ab 01       	movw	r20, r22
    b40c:	bc 01       	movw	r22, r24
    b40e:	d4 01       	movw	r26, r8
    b410:	c3 01       	movw	r24, r6
    b412:	82 19       	sub	r24, r2
    b414:	93 09       	sbc	r25, r3
    b416:	a4 09       	sbc	r26, r4
    b418:	b5 09       	sbc	r27, r5
    b41a:	3c 01       	movw	r6, r24
    b41c:	4d 01       	movw	r8, r26
    b41e:	42 30       	cpi	r20, 0x02	; 2
    b420:	51 05       	cpc	r21, r1
    b422:	61 05       	cpc	r22, r1
    b424:	71 05       	cpc	r23, r1
    b426:	08 f4       	brcc	.+2      	; 0xb42a <f_open+0x28a>
    b428:	63 c0       	rjmp	.+198    	; 0xb4f0 <f_open+0x350>
    b42a:	4f 3f       	cpi	r20, 0xFF	; 255
    b42c:	ff ef       	ldi	r31, 0xFF	; 255
    b42e:	5f 07       	cpc	r21, r31
    b430:	6f 07       	cpc	r22, r31
    b432:	7f 07       	cpc	r23, r31
    b434:	01 f7       	brne	.-64     	; 0xb3f6 <f_open+0x256>
    b436:	01 e0       	ldi	r16, 0x01	; 1
    b438:	10 e0       	ldi	r17, 0x00	; 0
    b43a:	02 c0       	rjmp	.+4      	; 0xb440 <f_open+0x2a0>
    b43c:	00 e0       	ldi	r16, 0x00	; 0
    b43e:	10 e0       	ldi	r17, 0x00	; 0
    b440:	f7 01       	movw	r30, r14
    b442:	44 8b       	std	Z+20, r20	; 0x14
    b444:	55 8b       	std	Z+21, r21	; 0x15
    b446:	66 8b       	std	Z+22, r22	; 0x16
    b448:	77 8b       	std	Z+23, r23	; 0x17
    b44a:	01 15       	cp	r16, r1
    b44c:	11 05       	cpc	r17, r1
    b44e:	c9 f5       	brne	.+114    	; 0xb4c2 <f_open+0x322>
    b450:	d4 01       	movw	r26, r8
    b452:	c3 01       	movw	r24, r6
    b454:	91 70       	andi	r25, 0x01	; 1
    b456:	aa 27       	eor	r26, r26
    b458:	bb 27       	eor	r27, r27
    b45a:	89 2b       	or	r24, r25
    b45c:	8a 2b       	or	r24, r26
    b45e:	8b 2b       	or	r24, r27
    b460:	09 f4       	brne	.+2      	; 0xb464 <f_open+0x2c4>
    b462:	a3 cf       	rjmp	.-186    	; 0xb3aa <f_open+0x20a>
    b464:	4f a4       	ldd	r4, Y+47	; 0x2f
    b466:	58 a8       	ldd	r5, Y+48	; 0x30
    b468:	c2 01       	movw	r24, r4
    b46a:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    b46e:	61 15       	cp	r22, r1
    b470:	71 05       	cpc	r23, r1
    b472:	81 05       	cpc	r24, r1
    b474:	91 05       	cpc	r25, r1
    b476:	19 f1       	breq	.+70     	; 0xb4be <f_open+0x31e>
    b478:	94 01       	movw	r18, r8
    b47a:	83 01       	movw	r16, r6
    b47c:	49 e0       	ldi	r20, 0x09	; 9
    b47e:	36 95       	lsr	r19
    b480:	27 95       	ror	r18
    b482:	17 95       	ror	r17
    b484:	07 95       	ror	r16
    b486:	4a 95       	dec	r20
    b488:	d1 f7       	brne	.-12     	; 0xb47e <f_open+0x2de>
    b48a:	a9 01       	movw	r20, r18
    b48c:	98 01       	movw	r18, r16
    b48e:	26 0f       	add	r18, r22
    b490:	37 1f       	adc	r19, r23
    b492:	48 1f       	adc	r20, r24
    b494:	59 1f       	adc	r21, r25
    b496:	f7 01       	movw	r30, r14
    b498:	20 8f       	std	Z+24, r18	; 0x18
    b49a:	31 8f       	std	Z+25, r19	; 0x19
    b49c:	42 8f       	std	Z+26, r20	; 0x1a
    b49e:	53 8f       	std	Z+27, r21	; 0x1b
    b4a0:	01 e0       	ldi	r16, 0x01	; 1
    b4a2:	10 e0       	ldi	r17, 0x00	; 0
    b4a4:	b6 01       	movw	r22, r12
    b4a6:	f2 01       	movw	r30, r4
    b4a8:	81 81       	ldd	r24, Z+1	; 0x01
    b4aa:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    b4ae:	31 e0       	ldi	r19, 0x01	; 1
    b4b0:	20 e0       	ldi	r18, 0x00	; 0
    b4b2:	89 2b       	or	r24, r25
    b4b4:	09 f4       	brne	.+2      	; 0xb4b8 <f_open+0x318>
    b4b6:	30 e0       	ldi	r19, 0x00	; 0
    b4b8:	03 2f       	mov	r16, r19
    b4ba:	12 2f       	mov	r17, r18
    b4bc:	02 c0       	rjmp	.+4      	; 0xb4c2 <f_open+0x322>
    b4be:	02 e0       	ldi	r16, 0x02	; 2
    b4c0:	10 e0       	ldi	r17, 0x00	; 0
    b4c2:	c5 01       	movw	r24, r10
    b4c4:	0e 94 29 68 	call	0xd052	; 0xd052 <ff_memfree>
    b4c8:	01 15       	cp	r16, r1
    b4ca:	11 05       	cpc	r17, r1
    b4cc:	59 f0       	breq	.+22     	; 0xb4e4 <f_open+0x344>
    b4ce:	01 c0       	rjmp	.+2      	; 0xb4d2 <f_open+0x332>
    b4d0:	8c 01       	movw	r16, r24
    b4d2:	f7 01       	movw	r30, r14
    b4d4:	11 82       	std	Z+1, r1	; 0x01
    b4d6:	10 82       	st	Z, r1
    b4d8:	c8 01       	movw	r24, r16
    b4da:	16 c0       	rjmp	.+44     	; 0xb508 <f_open+0x368>
    b4dc:	89 e0       	ldi	r24, 0x09	; 9
    b4de:	03 c0       	rjmp	.+6      	; 0xb4e6 <f_open+0x346>
    b4e0:	81 e1       	ldi	r24, 0x11	; 17
    b4e2:	01 c0       	rjmp	.+2      	; 0xb4e6 <f_open+0x346>
    b4e4:	80 e0       	ldi	r24, 0x00	; 0
    b4e6:	90 e0       	ldi	r25, 0x00	; 0
    b4e8:	0f c0       	rjmp	.+30     	; 0xb508 <f_open+0x368>
    b4ea:	08 e0       	ldi	r16, 0x08	; 8
    b4ec:	10 e0       	ldi	r17, 0x00	; 0
    b4ee:	08 c0       	rjmp	.+16     	; 0xb500 <f_open+0x360>
    b4f0:	02 e0       	ldi	r16, 0x02	; 2
    b4f2:	10 e0       	ldi	r17, 0x00	; 0
    b4f4:	a5 cf       	rjmp	.-182    	; 0xb440 <f_open+0x2a0>
    b4f6:	04 e0       	ldi	r16, 0x04	; 4
    b4f8:	10 e0       	ldi	r17, 0x00	; 0
    b4fa:	02 c0       	rjmp	.+4      	; 0xb500 <f_open+0x360>
    b4fc:	07 e0       	ldi	r16, 0x07	; 7
    b4fe:	10 e0       	ldi	r17, 0x00	; 0
    b500:	c5 01       	movw	r24, r10
    b502:	0e 94 29 68 	call	0xd052	; 0xd052 <ff_memfree>
    b506:	e5 cf       	rjmp	.-54     	; 0xb4d2 <f_open+0x332>
    b508:	e6 96       	adiw	r28, 0x36	; 54
    b50a:	e2 e1       	ldi	r30, 0x12	; 18
    b50c:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000b510 <f_read>:
    b510:	a6 e0       	ldi	r26, 0x06	; 6
    b512:	b0 e0       	ldi	r27, 0x00	; 0
    b514:	ee e8       	ldi	r30, 0x8E	; 142
    b516:	fa e5       	ldi	r31, 0x5A	; 90
    b518:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    b51c:	7c 01       	movw	r14, r24
    b51e:	4b 01       	movw	r8, r22
    b520:	5a 01       	movw	r10, r20
    b522:	3e 83       	std	Y+6, r19	; 0x06
    b524:	2d 83       	std	Y+5, r18	; 0x05
    b526:	f9 01       	movw	r30, r18
    b528:	11 82       	std	Z+1, r1	; 0x01
    b52a:	10 82       	st	Z, r1
    b52c:	be 01       	movw	r22, r28
    b52e:	6f 5f       	subi	r22, 0xFF	; 255
    b530:	7f 4f       	sbci	r23, 0xFF	; 255
    b532:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    b536:	00 97       	sbiw	r24, 0x00	; 0
    b538:	09 f0       	breq	.+2      	; 0xb53c <f_read+0x2c>
    b53a:	31 c1       	rjmp	.+610    	; 0xb79e <f_read+0x28e>
    b53c:	f7 01       	movw	r30, r14
    b53e:	87 85       	ldd	r24, Z+15	; 0x0f
    b540:	90 e0       	ldi	r25, 0x00	; 0
    b542:	00 97       	sbiw	r24, 0x00	; 0
    b544:	09 f0       	breq	.+2      	; 0xb548 <f_read+0x38>
    b546:	2b c1       	rjmp	.+598    	; 0xb79e <f_read+0x28e>
    b548:	86 85       	ldd	r24, Z+14	; 0x0e
    b54a:	80 ff       	sbrs	r24, 0
    b54c:	26 c1       	rjmp	.+588    	; 0xb79a <f_read+0x28a>
    b54e:	82 85       	ldd	r24, Z+10	; 0x0a
    b550:	93 85       	ldd	r25, Z+11	; 0x0b
    b552:	a4 85       	ldd	r26, Z+12	; 0x0c
    b554:	b5 85       	ldd	r27, Z+13	; 0x0d
    b556:	40 89       	ldd	r20, Z+16	; 0x10
    b558:	51 89       	ldd	r21, Z+17	; 0x11
    b55a:	62 89       	ldd	r22, Z+18	; 0x12
    b55c:	73 89       	ldd	r23, Z+19	; 0x13
    b55e:	84 1b       	sub	r24, r20
    b560:	95 0b       	sbc	r25, r21
    b562:	a6 0b       	sbc	r26, r22
    b564:	b7 0b       	sbc	r27, r23
    b566:	a5 01       	movw	r20, r10
    b568:	60 e0       	ldi	r22, 0x00	; 0
    b56a:	70 e0       	ldi	r23, 0x00	; 0
    b56c:	84 17       	cp	r24, r20
    b56e:	95 07       	cpc	r25, r21
    b570:	a6 07       	cpc	r26, r22
    b572:	b7 07       	cpc	r27, r23
    b574:	08 f4       	brcc	.+2      	; 0xb578 <f_read+0x68>
    b576:	5c 01       	movw	r10, r24
    b578:	17 01       	movw	r2, r14
    b57a:	f4 e2       	ldi	r31, 0x24	; 36
    b57c:	2f 0e       	add	r2, r31
    b57e:	31 1c       	adc	r3, r1
    b580:	a1 14       	cp	r10, r1
    b582:	b1 04       	cpc	r11, r1
    b584:	09 f4       	brne	.+2      	; 0xb588 <f_read+0x78>
    b586:	07 c1       	rjmp	.+526    	; 0xb796 <f_read+0x286>
    b588:	f7 01       	movw	r30, r14
    b58a:	40 89       	ldd	r20, Z+16	; 0x10
    b58c:	51 89       	ldd	r21, Z+17	; 0x11
    b58e:	62 89       	ldd	r22, Z+18	; 0x12
    b590:	73 89       	ldd	r23, Z+19	; 0x13
    b592:	db 01       	movw	r26, r22
    b594:	ca 01       	movw	r24, r20
    b596:	91 70       	andi	r25, 0x01	; 1
    b598:	aa 27       	eor	r26, r26
    b59a:	bb 27       	eor	r27, r27
    b59c:	89 2b       	or	r24, r25
    b59e:	8a 2b       	or	r24, r26
    b5a0:	8b 2b       	or	r24, r27
    b5a2:	09 f0       	breq	.+2      	; 0xb5a6 <f_read+0x96>
    b5a4:	cb c0       	rjmp	.+406    	; 0xb73c <f_read+0x22c>
    b5a6:	e9 81       	ldd	r30, Y+1	; 0x01
    b5a8:	fa 81       	ldd	r31, Y+2	; 0x02
    b5aa:	01 85       	ldd	r16, Z+9	; 0x09
    b5ac:	12 85       	ldd	r17, Z+10	; 0x0a
    b5ae:	01 50       	subi	r16, 0x01	; 1
    b5b0:	11 09       	sbc	r17, r1
    b5b2:	db 01       	movw	r26, r22
    b5b4:	ca 01       	movw	r24, r20
    b5b6:	e9 e0       	ldi	r30, 0x09	; 9
    b5b8:	b6 95       	lsr	r27
    b5ba:	a7 95       	ror	r26
    b5bc:	97 95       	ror	r25
    b5be:	87 95       	ror	r24
    b5c0:	ea 95       	dec	r30
    b5c2:	d1 f7       	brne	.-12     	; 0xb5b8 <f_read+0xa8>
    b5c4:	08 23       	and	r16, r24
    b5c6:	19 23       	and	r17, r25
    b5c8:	01 15       	cp	r16, r1
    b5ca:	11 05       	cpc	r17, r1
    b5cc:	91 f5       	brne	.+100    	; 0xb632 <f_read+0x122>
    b5ce:	f7 01       	movw	r30, r14
    b5d0:	41 15       	cp	r20, r1
    b5d2:	51 05       	cpc	r21, r1
    b5d4:	61 05       	cpc	r22, r1
    b5d6:	71 05       	cpc	r23, r1
    b5d8:	29 f4       	brne	.+10     	; 0xb5e4 <f_read+0xd4>
    b5da:	66 81       	ldd	r22, Z+6	; 0x06
    b5dc:	77 81       	ldd	r23, Z+7	; 0x07
    b5de:	80 85       	ldd	r24, Z+8	; 0x08
    b5e0:	91 85       	ldd	r25, Z+9	; 0x09
    b5e2:	11 c0       	rjmp	.+34     	; 0xb606 <f_read+0xf6>
    b5e4:	82 a1       	ldd	r24, Z+34	; 0x22
    b5e6:	93 a1       	ldd	r25, Z+35	; 0x23
    b5e8:	89 2b       	or	r24, r25
    b5ea:	21 f0       	breq	.+8      	; 0xb5f4 <f_read+0xe4>
    b5ec:	c7 01       	movw	r24, r14
    b5ee:	0e 94 9f 46 	call	0x8d3e	; 0x8d3e <clmt_clust>
    b5f2:	09 c0       	rjmp	.+18     	; 0xb606 <f_read+0xf6>
    b5f4:	f7 01       	movw	r30, r14
    b5f6:	44 89       	ldd	r20, Z+20	; 0x14
    b5f8:	55 89       	ldd	r21, Z+21	; 0x15
    b5fa:	66 89       	ldd	r22, Z+22	; 0x16
    b5fc:	77 89       	ldd	r23, Z+23	; 0x17
    b5fe:	80 81       	ld	r24, Z
    b600:	91 81       	ldd	r25, Z+1	; 0x01
    b602:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_fat.isra.10>
    b606:	62 30       	cpi	r22, 0x02	; 2
    b608:	71 05       	cpc	r23, r1
    b60a:	81 05       	cpc	r24, r1
    b60c:	91 05       	cpc	r25, r1
    b60e:	10 f4       	brcc	.+4      	; 0xb614 <f_read+0x104>
    b610:	82 e0       	ldi	r24, 0x02	; 2
    b612:	07 c0       	rjmp	.+14     	; 0xb622 <f_read+0x112>
    b614:	6f 3f       	cpi	r22, 0xFF	; 255
    b616:	ff ef       	ldi	r31, 0xFF	; 255
    b618:	7f 07       	cpc	r23, r31
    b61a:	8f 07       	cpc	r24, r31
    b61c:	9f 07       	cpc	r25, r31
    b61e:	21 f4       	brne	.+8      	; 0xb628 <f_read+0x118>
    b620:	81 e0       	ldi	r24, 0x01	; 1
    b622:	f7 01       	movw	r30, r14
    b624:	87 87       	std	Z+15, r24	; 0x0f
    b626:	ba c0       	rjmp	.+372    	; 0xb79c <f_read+0x28c>
    b628:	f7 01       	movw	r30, r14
    b62a:	64 8b       	std	Z+20, r22	; 0x14
    b62c:	75 8b       	std	Z+21, r23	; 0x15
    b62e:	86 8b       	std	Z+22, r24	; 0x16
    b630:	97 8b       	std	Z+23, r25	; 0x17
    b632:	89 81       	ldd	r24, Y+1	; 0x01
    b634:	9a 81       	ldd	r25, Y+2	; 0x02
    b636:	9c 83       	std	Y+4, r25	; 0x04
    b638:	8b 83       	std	Y+3, r24	; 0x03
    b63a:	f7 01       	movw	r30, r14
    b63c:	44 89       	ldd	r20, Z+20	; 0x14
    b63e:	55 89       	ldd	r21, Z+21	; 0x15
    b640:	66 89       	ldd	r22, Z+22	; 0x16
    b642:	77 89       	ldd	r23, Z+23	; 0x17
    b644:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    b648:	61 15       	cp	r22, r1
    b64a:	71 05       	cpc	r23, r1
    b64c:	81 05       	cpc	r24, r1
    b64e:	91 05       	cpc	r25, r1
    b650:	f9 f2       	breq	.-66     	; 0xb610 <f_read+0x100>
    b652:	2b 01       	movw	r4, r22
    b654:	3c 01       	movw	r6, r24
    b656:	40 0e       	add	r4, r16
    b658:	51 1e       	adc	r5, r17
    b65a:	61 1c       	adc	r6, r1
    b65c:	71 1c       	adc	r7, r1
    b65e:	65 01       	movw	r12, r10
    b660:	cd 2c       	mov	r12, r13
    b662:	dd 24       	eor	r13, r13
    b664:	c6 94       	lsr	r12
    b666:	c1 14       	cp	r12, r1
    b668:	d1 04       	cpc	r13, r1
    b66a:	d1 f1       	breq	.+116    	; 0xb6e0 <f_read+0x1d0>
    b66c:	eb 81       	ldd	r30, Y+3	; 0x03
    b66e:	fc 81       	ldd	r31, Y+4	; 0x04
    b670:	81 85       	ldd	r24, Z+9	; 0x09
    b672:	92 85       	ldd	r25, Z+10	; 0x0a
    b674:	98 01       	movw	r18, r16
    b676:	2c 0d       	add	r18, r12
    b678:	3d 1d       	adc	r19, r13
    b67a:	82 17       	cp	r24, r18
    b67c:	93 07       	cpc	r25, r19
    b67e:	18 f4       	brcc	.+6      	; 0xb686 <f_read+0x176>
    b680:	6c 01       	movw	r12, r24
    b682:	c0 1a       	sub	r12, r16
    b684:	d1 0a       	sbc	r13, r17
    b686:	86 01       	movw	r16, r12
    b688:	a3 01       	movw	r20, r6
    b68a:	92 01       	movw	r18, r4
    b68c:	b4 01       	movw	r22, r8
    b68e:	eb 81       	ldd	r30, Y+3	; 0x03
    b690:	fc 81       	ldd	r31, Y+4	; 0x04
    b692:	81 81       	ldd	r24, Z+1	; 0x01
    b694:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    b698:	89 2b       	or	r24, r25
    b69a:	11 f6       	brne	.-124    	; 0xb620 <f_read+0x110>
    b69c:	f7 01       	movw	r30, r14
    b69e:	86 85       	ldd	r24, Z+14	; 0x0e
    b6a0:	87 ff       	sbrs	r24, 7
    b6a2:	1a c0       	rjmp	.+52     	; 0xb6d8 <f_read+0x1c8>
    b6a4:	80 8d       	ldd	r24, Z+24	; 0x18
    b6a6:	91 8d       	ldd	r25, Z+25	; 0x19
    b6a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6aa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6ac:	84 19       	sub	r24, r4
    b6ae:	95 09       	sbc	r25, r5
    b6b0:	a6 09       	sbc	r26, r6
    b6b2:	b7 09       	sbc	r27, r7
    b6b4:	a6 01       	movw	r20, r12
    b6b6:	60 e0       	ldi	r22, 0x00	; 0
    b6b8:	70 e0       	ldi	r23, 0x00	; 0
    b6ba:	84 17       	cp	r24, r20
    b6bc:	95 07       	cpc	r25, r21
    b6be:	a6 07       	cpc	r26, r22
    b6c0:	b7 07       	cpc	r27, r23
    b6c2:	50 f4       	brcc	.+20     	; 0xb6d8 <f_read+0x1c8>
    b6c4:	98 2f       	mov	r25, r24
    b6c6:	88 27       	eor	r24, r24
    b6c8:	99 0f       	add	r25, r25
    b6ca:	40 e0       	ldi	r20, 0x00	; 0
    b6cc:	52 e0       	ldi	r21, 0x02	; 2
    b6ce:	b1 01       	movw	r22, r2
    b6d0:	88 0d       	add	r24, r8
    b6d2:	99 1d       	adc	r25, r9
    b6d4:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    b6d8:	dc 2c       	mov	r13, r12
    b6da:	cc 24       	eor	r12, r12
    b6dc:	dd 0c       	add	r13, r13
    b6de:	41 c0       	rjmp	.+130    	; 0xb762 <f_read+0x252>
    b6e0:	f7 01       	movw	r30, r14
    b6e2:	20 8d       	ldd	r18, Z+24	; 0x18
    b6e4:	31 8d       	ldd	r19, Z+25	; 0x19
    b6e6:	42 8d       	ldd	r20, Z+26	; 0x1a
    b6e8:	53 8d       	ldd	r21, Z+27	; 0x1b
    b6ea:	42 16       	cp	r4, r18
    b6ec:	53 06       	cpc	r5, r19
    b6ee:	64 06       	cpc	r6, r20
    b6f0:	75 06       	cpc	r7, r21
    b6f2:	f9 f0       	breq	.+62     	; 0xb732 <f_read+0x222>
    b6f4:	86 85       	ldd	r24, Z+14	; 0x0e
    b6f6:	87 ff       	sbrs	r24, 7
    b6f8:	0f c0       	rjmp	.+30     	; 0xb718 <f_read+0x208>
    b6fa:	01 e0       	ldi	r16, 0x01	; 1
    b6fc:	10 e0       	ldi	r17, 0x00	; 0
    b6fe:	b1 01       	movw	r22, r2
    b700:	eb 81       	ldd	r30, Y+3	; 0x03
    b702:	fc 81       	ldd	r31, Y+4	; 0x04
    b704:	81 81       	ldd	r24, Z+1	; 0x01
    b706:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    b70a:	89 2b       	or	r24, r25
    b70c:	09 f0       	breq	.+2      	; 0xb710 <f_read+0x200>
    b70e:	88 cf       	rjmp	.-240    	; 0xb620 <f_read+0x110>
    b710:	f7 01       	movw	r30, r14
    b712:	86 85       	ldd	r24, Z+14	; 0x0e
    b714:	8f 77       	andi	r24, 0x7F	; 127
    b716:	86 87       	std	Z+14, r24	; 0x0e
    b718:	e9 81       	ldd	r30, Y+1	; 0x01
    b71a:	fa 81       	ldd	r31, Y+2	; 0x02
    b71c:	01 e0       	ldi	r16, 0x01	; 1
    b71e:	10 e0       	ldi	r17, 0x00	; 0
    b720:	a3 01       	movw	r20, r6
    b722:	92 01       	movw	r18, r4
    b724:	b1 01       	movw	r22, r2
    b726:	81 81       	ldd	r24, Z+1	; 0x01
    b728:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    b72c:	89 2b       	or	r24, r25
    b72e:	09 f0       	breq	.+2      	; 0xb732 <f_read+0x222>
    b730:	77 cf       	rjmp	.-274    	; 0xb620 <f_read+0x110>
    b732:	f7 01       	movw	r30, r14
    b734:	40 8e       	std	Z+24, r4	; 0x18
    b736:	51 8e       	std	Z+25, r5	; 0x19
    b738:	62 8e       	std	Z+26, r6	; 0x1a
    b73a:	73 8e       	std	Z+27, r7	; 0x1b
    b73c:	f7 01       	movw	r30, r14
    b73e:	60 89       	ldd	r22, Z+16	; 0x10
    b740:	71 89       	ldd	r23, Z+17	; 0x11
    b742:	71 70       	andi	r23, 0x01	; 1
    b744:	80 e0       	ldi	r24, 0x00	; 0
    b746:	92 e0       	ldi	r25, 0x02	; 2
    b748:	86 1b       	sub	r24, r22
    b74a:	97 0b       	sbc	r25, r23
    b74c:	65 01       	movw	r12, r10
    b74e:	8a 15       	cp	r24, r10
    b750:	9b 05       	cpc	r25, r11
    b752:	08 f4       	brcc	.+2      	; 0xb756 <f_read+0x246>
    b754:	6c 01       	movw	r12, r24
    b756:	62 0d       	add	r22, r2
    b758:	73 1d       	adc	r23, r3
    b75a:	a6 01       	movw	r20, r12
    b75c:	c4 01       	movw	r24, r8
    b75e:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    b762:	ac 18       	sub	r10, r12
    b764:	bd 08       	sbc	r11, r13
    b766:	ed 81       	ldd	r30, Y+5	; 0x05
    b768:	fe 81       	ldd	r31, Y+6	; 0x06
    b76a:	80 81       	ld	r24, Z
    b76c:	91 81       	ldd	r25, Z+1	; 0x01
    b76e:	8c 0d       	add	r24, r12
    b770:	9d 1d       	adc	r25, r13
    b772:	91 83       	std	Z+1, r25	; 0x01
    b774:	80 83       	st	Z, r24
    b776:	8c 0c       	add	r8, r12
    b778:	9d 1c       	adc	r9, r13
    b77a:	f7 01       	movw	r30, r14
    b77c:	80 89       	ldd	r24, Z+16	; 0x10
    b77e:	91 89       	ldd	r25, Z+17	; 0x11
    b780:	a2 89       	ldd	r26, Z+18	; 0x12
    b782:	b3 89       	ldd	r27, Z+19	; 0x13
    b784:	8c 0d       	add	r24, r12
    b786:	9d 1d       	adc	r25, r13
    b788:	a1 1d       	adc	r26, r1
    b78a:	b1 1d       	adc	r27, r1
    b78c:	80 8b       	std	Z+16, r24	; 0x10
    b78e:	91 8b       	std	Z+17, r25	; 0x11
    b790:	a2 8b       	std	Z+18, r26	; 0x12
    b792:	b3 8b       	std	Z+19, r27	; 0x13
    b794:	f5 ce       	rjmp	.-534    	; 0xb580 <f_read+0x70>
    b796:	80 e0       	ldi	r24, 0x00	; 0
    b798:	01 c0       	rjmp	.+2      	; 0xb79c <f_read+0x28c>
    b79a:	87 e0       	ldi	r24, 0x07	; 7
    b79c:	90 e0       	ldi	r25, 0x00	; 0
    b79e:	26 96       	adiw	r28, 0x06	; 6
    b7a0:	e2 e1       	ldi	r30, 0x12	; 18
    b7a2:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000b7a6 <f_write>:
    b7a6:	a8 e0       	ldi	r26, 0x08	; 8
    b7a8:	b0 e0       	ldi	r27, 0x00	; 0
    b7aa:	e9 ed       	ldi	r30, 0xD9	; 217
    b7ac:	fb e5       	ldi	r31, 0x5B	; 91
    b7ae:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    b7b2:	7c 01       	movw	r14, r24
    b7b4:	3b 01       	movw	r6, r22
    b7b6:	5a 01       	movw	r10, r20
    b7b8:	38 87       	std	Y+8, r19	; 0x08
    b7ba:	2f 83       	std	Y+7, r18	; 0x07
    b7bc:	f9 01       	movw	r30, r18
    b7be:	11 82       	std	Z+1, r1	; 0x01
    b7c0:	10 82       	st	Z, r1
    b7c2:	be 01       	movw	r22, r28
    b7c4:	6f 5f       	subi	r22, 0xFF	; 255
    b7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7c8:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    b7cc:	00 97       	sbiw	r24, 0x00	; 0
    b7ce:	09 f0       	breq	.+2      	; 0xb7d2 <f_write+0x2c>
    b7d0:	7d c1       	rjmp	.+762    	; 0xbacc <f_write+0x326>
    b7d2:	f7 01       	movw	r30, r14
    b7d4:	87 85       	ldd	r24, Z+15	; 0x0f
    b7d6:	90 e0       	ldi	r25, 0x00	; 0
    b7d8:	00 97       	sbiw	r24, 0x00	; 0
    b7da:	09 f0       	breq	.+2      	; 0xb7de <f_write+0x38>
    b7dc:	77 c1       	rjmp	.+750    	; 0xbacc <f_write+0x326>
    b7de:	86 85       	ldd	r24, Z+14	; 0x0e
    b7e0:	81 ff       	sbrs	r24, 1
    b7e2:	72 c1       	rjmp	.+740    	; 0xbac8 <f_write+0x322>
    b7e4:	80 89       	ldd	r24, Z+16	; 0x10
    b7e6:	91 89       	ldd	r25, Z+17	; 0x11
    b7e8:	a2 89       	ldd	r26, Z+18	; 0x12
    b7ea:	b3 89       	ldd	r27, Z+19	; 0x13
    b7ec:	ac 01       	movw	r20, r24
    b7ee:	bd 01       	movw	r22, r26
    b7f0:	4a 0d       	add	r20, r10
    b7f2:	5b 1d       	adc	r21, r11
    b7f4:	61 1d       	adc	r22, r1
    b7f6:	71 1d       	adc	r23, r1
    b7f8:	48 17       	cp	r20, r24
    b7fa:	59 07       	cpc	r21, r25
    b7fc:	6a 07       	cpc	r22, r26
    b7fe:	7b 07       	cpc	r23, r27
    b800:	18 f4       	brcc	.+6      	; 0xb808 <f_write+0x62>
    b802:	5c 01       	movw	r10, r24
    b804:	a0 94       	com	r10
    b806:	b0 94       	com	r11
    b808:	97 01       	movw	r18, r14
    b80a:	2c 5d       	subi	r18, 0xDC	; 220
    b80c:	3f 4f       	sbci	r19, 0xFF	; 255
    b80e:	3e 83       	std	Y+6, r19	; 0x06
    b810:	2d 83       	std	Y+5, r18	; 0x05
    b812:	a1 14       	cp	r10, r1
    b814:	b1 04       	cpc	r11, r1
    b816:	09 f4       	brne	.+2      	; 0xb81a <f_write+0x74>
    b818:	4d c0       	rjmp	.+154    	; 0xb8b4 <f_write+0x10e>
    b81a:	f7 01       	movw	r30, r14
    b81c:	40 89       	ldd	r20, Z+16	; 0x10
    b81e:	51 89       	ldd	r21, Z+17	; 0x11
    b820:	62 89       	ldd	r22, Z+18	; 0x12
    b822:	73 89       	ldd	r23, Z+19	; 0x13
    b824:	db 01       	movw	r26, r22
    b826:	ca 01       	movw	r24, r20
    b828:	91 70       	andi	r25, 0x01	; 1
    b82a:	aa 27       	eor	r26, r26
    b82c:	bb 27       	eor	r27, r27
    b82e:	89 2b       	or	r24, r25
    b830:	8a 2b       	or	r24, r26
    b832:	8b 2b       	or	r24, r27
    b834:	09 f0       	breq	.+2      	; 0xb838 <f_write+0x92>
    b836:	05 c1       	rjmp	.+522    	; 0xba42 <f_write+0x29c>
    b838:	e9 81       	ldd	r30, Y+1	; 0x01
    b83a:	fa 81       	ldd	r31, Y+2	; 0x02
    b83c:	81 84       	ldd	r8, Z+9	; 0x09
    b83e:	92 84       	ldd	r9, Z+10	; 0x0a
    b840:	f1 e0       	ldi	r31, 0x01	; 1
    b842:	8f 1a       	sub	r8, r31
    b844:	91 08       	sbc	r9, r1
    b846:	db 01       	movw	r26, r22
    b848:	ca 01       	movw	r24, r20
    b84a:	e9 e0       	ldi	r30, 0x09	; 9
    b84c:	b6 95       	lsr	r27
    b84e:	a7 95       	ror	r26
    b850:	97 95       	ror	r25
    b852:	87 95       	ror	r24
    b854:	ea 95       	dec	r30
    b856:	d1 f7       	brne	.-12     	; 0xb84c <f_write+0xa6>
    b858:	88 22       	and	r8, r24
    b85a:	99 22       	and	r9, r25
    b85c:	81 14       	cp	r8, r1
    b85e:	91 04       	cpc	r9, r1
    b860:	09 f0       	breq	.+2      	; 0xb864 <f_write+0xbe>
    b862:	51 c0       	rjmp	.+162    	; 0xb906 <f_write+0x160>
    b864:	f7 01       	movw	r30, r14
    b866:	41 15       	cp	r20, r1
    b868:	51 05       	cpc	r21, r1
    b86a:	61 05       	cpc	r22, r1
    b86c:	71 05       	cpc	r23, r1
    b86e:	69 f4       	brne	.+26     	; 0xb88a <f_write+0xe4>
    b870:	66 81       	ldd	r22, Z+6	; 0x06
    b872:	77 81       	ldd	r23, Z+7	; 0x07
    b874:	80 85       	ldd	r24, Z+8	; 0x08
    b876:	91 85       	ldd	r25, Z+9	; 0x09
    b878:	61 15       	cp	r22, r1
    b87a:	71 05       	cpc	r23, r1
    b87c:	81 05       	cpc	r24, r1
    b87e:	91 05       	cpc	r25, r1
    b880:	f9 f4       	brne	.+62     	; 0xb8c0 <f_write+0x11a>
    b882:	40 e0       	ldi	r20, 0x00	; 0
    b884:	50 e0       	ldi	r21, 0x00	; 0
    b886:	ba 01       	movw	r22, r20
    b888:	0d c0       	rjmp	.+26     	; 0xb8a4 <f_write+0xfe>
    b88a:	82 a1       	ldd	r24, Z+34	; 0x22
    b88c:	93 a1       	ldd	r25, Z+35	; 0x23
    b88e:	89 2b       	or	r24, r25
    b890:	21 f0       	breq	.+8      	; 0xb89a <f_write+0xf4>
    b892:	c7 01       	movw	r24, r14
    b894:	0e 94 9f 46 	call	0x8d3e	; 0x8d3e <clmt_clust>
    b898:	08 c0       	rjmp	.+16     	; 0xb8aa <f_write+0x104>
    b89a:	f7 01       	movw	r30, r14
    b89c:	44 89       	ldd	r20, Z+20	; 0x14
    b89e:	55 89       	ldd	r21, Z+21	; 0x15
    b8a0:	66 89       	ldd	r22, Z+22	; 0x16
    b8a2:	77 89       	ldd	r23, Z+23	; 0x17
    b8a4:	c7 01       	movw	r24, r14
    b8a6:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <create_chain>
    b8aa:	61 15       	cp	r22, r1
    b8ac:	71 05       	cpc	r23, r1
    b8ae:	81 05       	cpc	r24, r1
    b8b0:	91 05       	cpc	r25, r1
    b8b2:	31 f4       	brne	.+12     	; 0xb8c0 <f_write+0x11a>
    b8b4:	f7 01       	movw	r30, r14
    b8b6:	86 85       	ldd	r24, Z+14	; 0x0e
    b8b8:	80 64       	ori	r24, 0x40	; 64
    b8ba:	86 87       	std	Z+14, r24	; 0x0e
    b8bc:	80 e0       	ldi	r24, 0x00	; 0
    b8be:	05 c1       	rjmp	.+522    	; 0xbaca <f_write+0x324>
    b8c0:	61 30       	cpi	r22, 0x01	; 1
    b8c2:	71 05       	cpc	r23, r1
    b8c4:	81 05       	cpc	r24, r1
    b8c6:	91 05       	cpc	r25, r1
    b8c8:	11 f4       	brne	.+4      	; 0xb8ce <f_write+0x128>
    b8ca:	82 e0       	ldi	r24, 0x02	; 2
    b8cc:	07 c0       	rjmp	.+14     	; 0xb8dc <f_write+0x136>
    b8ce:	6f 3f       	cpi	r22, 0xFF	; 255
    b8d0:	ff ef       	ldi	r31, 0xFF	; 255
    b8d2:	7f 07       	cpc	r23, r31
    b8d4:	8f 07       	cpc	r24, r31
    b8d6:	9f 07       	cpc	r25, r31
    b8d8:	21 f4       	brne	.+8      	; 0xb8e2 <f_write+0x13c>
    b8da:	81 e0       	ldi	r24, 0x01	; 1
    b8dc:	f7 01       	movw	r30, r14
    b8de:	87 87       	std	Z+15, r24	; 0x0f
    b8e0:	f4 c0       	rjmp	.+488    	; 0xbaca <f_write+0x324>
    b8e2:	f7 01       	movw	r30, r14
    b8e4:	64 8b       	std	Z+20, r22	; 0x14
    b8e6:	75 8b       	std	Z+21, r23	; 0x15
    b8e8:	86 8b       	std	Z+22, r24	; 0x16
    b8ea:	97 8b       	std	Z+23, r25	; 0x17
    b8ec:	06 81       	ldd	r16, Z+6	; 0x06
    b8ee:	17 81       	ldd	r17, Z+7	; 0x07
    b8f0:	20 85       	ldd	r18, Z+8	; 0x08
    b8f2:	31 85       	ldd	r19, Z+9	; 0x09
    b8f4:	01 15       	cp	r16, r1
    b8f6:	11 05       	cpc	r17, r1
    b8f8:	21 05       	cpc	r18, r1
    b8fa:	31 05       	cpc	r19, r1
    b8fc:	21 f4       	brne	.+8      	; 0xb906 <f_write+0x160>
    b8fe:	66 83       	std	Z+6, r22	; 0x06
    b900:	77 83       	std	Z+7, r23	; 0x07
    b902:	80 87       	std	Z+8, r24	; 0x08
    b904:	91 87       	std	Z+9, r25	; 0x09
    b906:	f7 01       	movw	r30, r14
    b908:	86 85       	ldd	r24, Z+14	; 0x0e
    b90a:	87 ff       	sbrs	r24, 7
    b90c:	13 c0       	rjmp	.+38     	; 0xb934 <f_write+0x18e>
    b90e:	20 8d       	ldd	r18, Z+24	; 0x18
    b910:	31 8d       	ldd	r19, Z+25	; 0x19
    b912:	42 8d       	ldd	r20, Z+26	; 0x1a
    b914:	53 8d       	ldd	r21, Z+27	; 0x1b
    b916:	e9 81       	ldd	r30, Y+1	; 0x01
    b918:	fa 81       	ldd	r31, Y+2	; 0x02
    b91a:	01 e0       	ldi	r16, 0x01	; 1
    b91c:	10 e0       	ldi	r17, 0x00	; 0
    b91e:	6d 81       	ldd	r22, Y+5	; 0x05
    b920:	7e 81       	ldd	r23, Y+6	; 0x06
    b922:	81 81       	ldd	r24, Z+1	; 0x01
    b924:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    b928:	89 2b       	or	r24, r25
    b92a:	b9 f6       	brne	.-82     	; 0xb8da <f_write+0x134>
    b92c:	f7 01       	movw	r30, r14
    b92e:	86 85       	ldd	r24, Z+14	; 0x0e
    b930:	8f 77       	andi	r24, 0x7F	; 127
    b932:	86 87       	std	Z+14, r24	; 0x0e
    b934:	29 81       	ldd	r18, Y+1	; 0x01
    b936:	3a 81       	ldd	r19, Y+2	; 0x02
    b938:	3c 83       	std	Y+4, r19	; 0x04
    b93a:	2b 83       	std	Y+3, r18	; 0x03
    b93c:	f7 01       	movw	r30, r14
    b93e:	44 89       	ldd	r20, Z+20	; 0x14
    b940:	55 89       	ldd	r21, Z+21	; 0x15
    b942:	66 89       	ldd	r22, Z+22	; 0x16
    b944:	77 89       	ldd	r23, Z+23	; 0x17
    b946:	c9 01       	movw	r24, r18
    b948:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    b94c:	61 15       	cp	r22, r1
    b94e:	71 05       	cpc	r23, r1
    b950:	81 05       	cpc	r24, r1
    b952:	91 05       	cpc	r25, r1
    b954:	09 f4       	brne	.+2      	; 0xb958 <f_write+0x1b2>
    b956:	b9 cf       	rjmp	.-142    	; 0xb8ca <f_write+0x124>
    b958:	1b 01       	movw	r2, r22
    b95a:	2c 01       	movw	r4, r24
    b95c:	28 0c       	add	r2, r8
    b95e:	39 1c       	adc	r3, r9
    b960:	41 1c       	adc	r4, r1
    b962:	51 1c       	adc	r5, r1
    b964:	65 01       	movw	r12, r10
    b966:	cd 2c       	mov	r12, r13
    b968:	dd 24       	eor	r13, r13
    b96a:	c6 94       	lsr	r12
    b96c:	c1 14       	cp	r12, r1
    b96e:	d1 04       	cpc	r13, r1
    b970:	f1 f1       	breq	.+124    	; 0xb9ee <f_write+0x248>
    b972:	eb 81       	ldd	r30, Y+3	; 0x03
    b974:	fc 81       	ldd	r31, Y+4	; 0x04
    b976:	81 85       	ldd	r24, Z+9	; 0x09
    b978:	92 85       	ldd	r25, Z+10	; 0x0a
    b97a:	94 01       	movw	r18, r8
    b97c:	2c 0d       	add	r18, r12
    b97e:	3d 1d       	adc	r19, r13
    b980:	82 17       	cp	r24, r18
    b982:	93 07       	cpc	r25, r19
    b984:	18 f4       	brcc	.+6      	; 0xb98c <f_write+0x1e6>
    b986:	6c 01       	movw	r12, r24
    b988:	c8 18       	sub	r12, r8
    b98a:	d9 08       	sbc	r13, r9
    b98c:	86 01       	movw	r16, r12
    b98e:	a2 01       	movw	r20, r4
    b990:	91 01       	movw	r18, r2
    b992:	b3 01       	movw	r22, r6
    b994:	eb 81       	ldd	r30, Y+3	; 0x03
    b996:	fc 81       	ldd	r31, Y+4	; 0x04
    b998:	81 81       	ldd	r24, Z+1	; 0x01
    b99a:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    b99e:	89 2b       	or	r24, r25
    b9a0:	09 f0       	breq	.+2      	; 0xb9a4 <f_write+0x1fe>
    b9a2:	9b cf       	rjmp	.-202    	; 0xb8da <f_write+0x134>
    b9a4:	f7 01       	movw	r30, r14
    b9a6:	80 8d       	ldd	r24, Z+24	; 0x18
    b9a8:	91 8d       	ldd	r25, Z+25	; 0x19
    b9aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9ac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9ae:	82 19       	sub	r24, r2
    b9b0:	93 09       	sbc	r25, r3
    b9b2:	a4 09       	sbc	r26, r4
    b9b4:	b5 09       	sbc	r27, r5
    b9b6:	a6 01       	movw	r20, r12
    b9b8:	60 e0       	ldi	r22, 0x00	; 0
    b9ba:	70 e0       	ldi	r23, 0x00	; 0
    b9bc:	84 17       	cp	r24, r20
    b9be:	95 07       	cpc	r25, r21
    b9c0:	a6 07       	cpc	r26, r22
    b9c2:	b7 07       	cpc	r27, r23
    b9c4:	80 f4       	brcc	.+32     	; 0xb9e6 <f_write+0x240>
    b9c6:	98 2f       	mov	r25, r24
    b9c8:	88 27       	eor	r24, r24
    b9ca:	99 0f       	add	r25, r25
    b9cc:	b3 01       	movw	r22, r6
    b9ce:	68 0f       	add	r22, r24
    b9d0:	79 1f       	adc	r23, r25
    b9d2:	40 e0       	ldi	r20, 0x00	; 0
    b9d4:	52 e0       	ldi	r21, 0x02	; 2
    b9d6:	8d 81       	ldd	r24, Y+5	; 0x05
    b9d8:	9e 81       	ldd	r25, Y+6	; 0x06
    b9da:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    b9de:	f7 01       	movw	r30, r14
    b9e0:	86 85       	ldd	r24, Z+14	; 0x0e
    b9e2:	8f 77       	andi	r24, 0x7F	; 127
    b9e4:	86 87       	std	Z+14, r24	; 0x0e
    b9e6:	dc 2c       	mov	r13, r12
    b9e8:	cc 24       	eor	r12, r12
    b9ea:	dd 0c       	add	r13, r13
    b9ec:	43 c0       	rjmp	.+134    	; 0xba74 <f_write+0x2ce>
    b9ee:	f7 01       	movw	r30, r14
    b9f0:	80 8d       	ldd	r24, Z+24	; 0x18
    b9f2:	91 8d       	ldd	r25, Z+25	; 0x19
    b9f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9f6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9f8:	28 16       	cp	r2, r24
    b9fa:	39 06       	cpc	r3, r25
    b9fc:	4a 06       	cpc	r4, r26
    b9fe:	5b 06       	cpc	r5, r27
    ba00:	d9 f0       	breq	.+54     	; 0xba38 <f_write+0x292>
    ba02:	40 89       	ldd	r20, Z+16	; 0x10
    ba04:	51 89       	ldd	r21, Z+17	; 0x11
    ba06:	62 89       	ldd	r22, Z+18	; 0x12
    ba08:	73 89       	ldd	r23, Z+19	; 0x13
    ba0a:	82 85       	ldd	r24, Z+10	; 0x0a
    ba0c:	93 85       	ldd	r25, Z+11	; 0x0b
    ba0e:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba10:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba12:	48 17       	cp	r20, r24
    ba14:	59 07       	cpc	r21, r25
    ba16:	6a 07       	cpc	r22, r26
    ba18:	7b 07       	cpc	r23, r27
    ba1a:	70 f4       	brcc	.+28     	; 0xba38 <f_write+0x292>
    ba1c:	01 e0       	ldi	r16, 0x01	; 1
    ba1e:	10 e0       	ldi	r17, 0x00	; 0
    ba20:	a2 01       	movw	r20, r4
    ba22:	91 01       	movw	r18, r2
    ba24:	6d 81       	ldd	r22, Y+5	; 0x05
    ba26:	7e 81       	ldd	r23, Y+6	; 0x06
    ba28:	eb 81       	ldd	r30, Y+3	; 0x03
    ba2a:	fc 81       	ldd	r31, Y+4	; 0x04
    ba2c:	81 81       	ldd	r24, Z+1	; 0x01
    ba2e:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    ba32:	89 2b       	or	r24, r25
    ba34:	09 f0       	breq	.+2      	; 0xba38 <f_write+0x292>
    ba36:	51 cf       	rjmp	.-350    	; 0xb8da <f_write+0x134>
    ba38:	f7 01       	movw	r30, r14
    ba3a:	20 8e       	std	Z+24, r2	; 0x18
    ba3c:	31 8e       	std	Z+25, r3	; 0x19
    ba3e:	42 8e       	std	Z+26, r4	; 0x1a
    ba40:	53 8e       	std	Z+27, r5	; 0x1b
    ba42:	f7 01       	movw	r30, r14
    ba44:	80 89       	ldd	r24, Z+16	; 0x10
    ba46:	91 89       	ldd	r25, Z+17	; 0x11
    ba48:	91 70       	andi	r25, 0x01	; 1
    ba4a:	20 e0       	ldi	r18, 0x00	; 0
    ba4c:	32 e0       	ldi	r19, 0x02	; 2
    ba4e:	28 1b       	sub	r18, r24
    ba50:	39 0b       	sbc	r19, r25
    ba52:	65 01       	movw	r12, r10
    ba54:	2a 15       	cp	r18, r10
    ba56:	3b 05       	cpc	r19, r11
    ba58:	08 f4       	brcc	.+2      	; 0xba5c <f_write+0x2b6>
    ba5a:	69 01       	movw	r12, r18
    ba5c:	a6 01       	movw	r20, r12
    ba5e:	b3 01       	movw	r22, r6
    ba60:	2d 81       	ldd	r18, Y+5	; 0x05
    ba62:	3e 81       	ldd	r19, Y+6	; 0x06
    ba64:	82 0f       	add	r24, r18
    ba66:	93 1f       	adc	r25, r19
    ba68:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    ba6c:	f7 01       	movw	r30, r14
    ba6e:	86 85       	ldd	r24, Z+14	; 0x0e
    ba70:	80 68       	ori	r24, 0x80	; 128
    ba72:	86 87       	std	Z+14, r24	; 0x0e
    ba74:	ac 18       	sub	r10, r12
    ba76:	bd 08       	sbc	r11, r13
    ba78:	ef 81       	ldd	r30, Y+7	; 0x07
    ba7a:	f8 85       	ldd	r31, Y+8	; 0x08
    ba7c:	80 81       	ld	r24, Z
    ba7e:	91 81       	ldd	r25, Z+1	; 0x01
    ba80:	8c 0d       	add	r24, r12
    ba82:	9d 1d       	adc	r25, r13
    ba84:	91 83       	std	Z+1, r25	; 0x01
    ba86:	80 83       	st	Z, r24
    ba88:	6c 0c       	add	r6, r12
    ba8a:	7d 1c       	adc	r7, r13
    ba8c:	f7 01       	movw	r30, r14
    ba8e:	80 89       	ldd	r24, Z+16	; 0x10
    ba90:	91 89       	ldd	r25, Z+17	; 0x11
    ba92:	a2 89       	ldd	r26, Z+18	; 0x12
    ba94:	b3 89       	ldd	r27, Z+19	; 0x13
    ba96:	8c 0d       	add	r24, r12
    ba98:	9d 1d       	adc	r25, r13
    ba9a:	a1 1d       	adc	r26, r1
    ba9c:	b1 1d       	adc	r27, r1
    ba9e:	80 8b       	std	Z+16, r24	; 0x10
    baa0:	91 8b       	std	Z+17, r25	; 0x11
    baa2:	a2 8b       	std	Z+18, r26	; 0x12
    baa4:	b3 8b       	std	Z+19, r27	; 0x13
    baa6:	42 85       	ldd	r20, Z+10	; 0x0a
    baa8:	53 85       	ldd	r21, Z+11	; 0x0b
    baaa:	64 85       	ldd	r22, Z+12	; 0x0c
    baac:	75 85       	ldd	r23, Z+13	; 0x0d
    baae:	48 17       	cp	r20, r24
    bab0:	59 07       	cpc	r21, r25
    bab2:	6a 07       	cpc	r22, r26
    bab4:	7b 07       	cpc	r23, r27
    bab6:	10 f4       	brcc	.+4      	; 0xbabc <f_write+0x316>
    bab8:	ac 01       	movw	r20, r24
    baba:	bd 01       	movw	r22, r26
    babc:	f7 01       	movw	r30, r14
    babe:	42 87       	std	Z+10, r20	; 0x0a
    bac0:	53 87       	std	Z+11, r21	; 0x0b
    bac2:	64 87       	std	Z+12, r22	; 0x0c
    bac4:	75 87       	std	Z+13, r23	; 0x0d
    bac6:	a5 ce       	rjmp	.-694    	; 0xb812 <f_write+0x6c>
    bac8:	87 e0       	ldi	r24, 0x07	; 7
    baca:	90 e0       	ldi	r25, 0x00	; 0
    bacc:	28 96       	adiw	r28, 0x08	; 8
    bace:	e2 e1       	ldi	r30, 0x12	; 18
    bad0:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000bad4 <f_sync>:
    bad4:	8f 92       	push	r8
    bad6:	9f 92       	push	r9
    bad8:	af 92       	push	r10
    bada:	bf 92       	push	r11
    badc:	ef 92       	push	r14
    bade:	ff 92       	push	r15
    bae0:	0f 93       	push	r16
    bae2:	1f 93       	push	r17
    bae4:	cf 93       	push	r28
    bae6:	df 93       	push	r29
    bae8:	00 d0       	rcall	.+0      	; 0xbaea <f_sync+0x16>
    baea:	cd b7       	in	r28, 0x3d	; 61
    baec:	de b7       	in	r29, 0x3e	; 62
    baee:	7c 01       	movw	r14, r24
    baf0:	be 01       	movw	r22, r28
    baf2:	6f 5f       	subi	r22, 0xFF	; 255
    baf4:	7f 4f       	sbci	r23, 0xFF	; 255
    baf6:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    bafa:	00 97       	sbiw	r24, 0x00	; 0
    bafc:	09 f0       	breq	.+2      	; 0xbb00 <f_sync+0x2c>
    bafe:	5d c0       	rjmp	.+186    	; 0xbbba <f_sync+0xe6>
    bb00:	f7 01       	movw	r30, r14
    bb02:	86 85       	ldd	r24, Z+14	; 0x0e
    bb04:	86 ff       	sbrs	r24, 6
    bb06:	55 c0       	rjmp	.+170    	; 0xbbb2 <f_sync+0xde>
    bb08:	87 ff       	sbrs	r24, 7
    bb0a:	15 c0       	rjmp	.+42     	; 0xbb36 <f_sync+0x62>
    bb0c:	20 8d       	ldd	r18, Z+24	; 0x18
    bb0e:	31 8d       	ldd	r19, Z+25	; 0x19
    bb10:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb12:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb14:	e9 81       	ldd	r30, Y+1	; 0x01
    bb16:	fa 81       	ldd	r31, Y+2	; 0x02
    bb18:	01 e0       	ldi	r16, 0x01	; 1
    bb1a:	10 e0       	ldi	r17, 0x00	; 0
    bb1c:	b7 01       	movw	r22, r14
    bb1e:	6c 5d       	subi	r22, 0xDC	; 220
    bb20:	7f 4f       	sbci	r23, 0xFF	; 255
    bb22:	81 81       	ldd	r24, Z+1	; 0x01
    bb24:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    bb28:	89 2b       	or	r24, r25
    bb2a:	09 f0       	breq	.+2      	; 0xbb2e <f_sync+0x5a>
    bb2c:	44 c0       	rjmp	.+136    	; 0xbbb6 <f_sync+0xe2>
    bb2e:	f7 01       	movw	r30, r14
    bb30:	86 85       	ldd	r24, Z+14	; 0x0e
    bb32:	8f 77       	andi	r24, 0x7F	; 127
    bb34:	86 87       	std	Z+14, r24	; 0x0e
    bb36:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
    bb3a:	4b 01       	movw	r8, r22
    bb3c:	5c 01       	movw	r10, r24
    bb3e:	f7 01       	movw	r30, r14
    bb40:	44 8d       	ldd	r20, Z+28	; 0x1c
    bb42:	55 8d       	ldd	r21, Z+29	; 0x1d
    bb44:	66 8d       	ldd	r22, Z+30	; 0x1e
    bb46:	77 8d       	ldd	r23, Z+31	; 0x1f
    bb48:	89 81       	ldd	r24, Y+1	; 0x01
    bb4a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb4c:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    bb50:	00 97       	sbiw	r24, 0x00	; 0
    bb52:	99 f5       	brne	.+102    	; 0xbbba <f_sync+0xe6>
    bb54:	f7 01       	movw	r30, r14
    bb56:	00 a1       	ldd	r16, Z+32	; 0x20
    bb58:	11 a1       	ldd	r17, Z+33	; 0x21
    bb5a:	f8 01       	movw	r30, r16
    bb5c:	83 85       	ldd	r24, Z+11	; 0x0b
    bb5e:	80 62       	ori	r24, 0x20	; 32
    bb60:	83 87       	std	Z+11, r24	; 0x0b
    bb62:	f7 01       	movw	r30, r14
    bb64:	26 81       	ldd	r18, Z+6	; 0x06
    bb66:	37 81       	ldd	r19, Z+7	; 0x07
    bb68:	40 85       	ldd	r20, Z+8	; 0x08
    bb6a:	51 85       	ldd	r21, Z+9	; 0x09
    bb6c:	b8 01       	movw	r22, r16
    bb6e:	80 81       	ld	r24, Z
    bb70:	91 81       	ldd	r25, Z+1	; 0x01
    bb72:	0e 94 1f 49 	call	0x923e	; 0x923e <st_clust.isra.5>
    bb76:	f7 01       	movw	r30, r14
    bb78:	42 85       	ldd	r20, Z+10	; 0x0a
    bb7a:	53 85       	ldd	r21, Z+11	; 0x0b
    bb7c:	64 85       	ldd	r22, Z+12	; 0x0c
    bb7e:	75 85       	ldd	r23, Z+13	; 0x0d
    bb80:	c8 01       	movw	r24, r16
    bb82:	4c 96       	adiw	r24, 0x1c	; 28
    bb84:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
    bb88:	b5 01       	movw	r22, r10
    bb8a:	a4 01       	movw	r20, r8
    bb8c:	c8 01       	movw	r24, r16
    bb8e:	46 96       	adiw	r24, 0x16	; 22
    bb90:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
    bb94:	f8 01       	movw	r30, r16
    bb96:	12 8a       	std	Z+18, r1	; 0x12
    bb98:	13 8a       	std	Z+19, r1	; 0x13
    bb9a:	89 81       	ldd	r24, Y+1	; 0x01
    bb9c:	9a 81       	ldd	r25, Y+2	; 0x02
    bb9e:	21 e0       	ldi	r18, 0x01	; 1
    bba0:	fc 01       	movw	r30, r24
    bba2:	23 83       	std	Z+3, r18	; 0x03
    bba4:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    bba8:	f7 01       	movw	r30, r14
    bbaa:	26 85       	ldd	r18, Z+14	; 0x0e
    bbac:	2f 7b       	andi	r18, 0xBF	; 191
    bbae:	26 87       	std	Z+14, r18	; 0x0e
    bbb0:	04 c0       	rjmp	.+8      	; 0xbbba <f_sync+0xe6>
    bbb2:	80 e0       	ldi	r24, 0x00	; 0
    bbb4:	01 c0       	rjmp	.+2      	; 0xbbb8 <f_sync+0xe4>
    bbb6:	81 e0       	ldi	r24, 0x01	; 1
    bbb8:	90 e0       	ldi	r25, 0x00	; 0
    bbba:	0f 90       	pop	r0
    bbbc:	0f 90       	pop	r0
    bbbe:	df 91       	pop	r29
    bbc0:	cf 91       	pop	r28
    bbc2:	1f 91       	pop	r17
    bbc4:	0f 91       	pop	r16
    bbc6:	ff 90       	pop	r15
    bbc8:	ef 90       	pop	r14
    bbca:	bf 90       	pop	r11
    bbcc:	af 90       	pop	r10
    bbce:	9f 90       	pop	r9
    bbd0:	8f 90       	pop	r8
    bbd2:	08 95       	ret

0000bbd4 <f_close>:
    bbd4:	a2 e0       	ldi	r26, 0x02	; 2
    bbd6:	b0 e0       	ldi	r27, 0x00	; 0
    bbd8:	e0 ef       	ldi	r30, 0xF0	; 240
    bbda:	fd e5       	ldi	r31, 0x5D	; 93
    bbdc:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    bbe0:	8c 01       	movw	r16, r24
    bbe2:	78 df       	rcall	.-272    	; 0xbad4 <f_sync>
    bbe4:	00 97       	sbiw	r24, 0x00	; 0
    bbe6:	59 f4       	brne	.+22     	; 0xbbfe <f_close+0x2a>
    bbe8:	be 01       	movw	r22, r28
    bbea:	6f 5f       	subi	r22, 0xFF	; 255
    bbec:	7f 4f       	sbci	r23, 0xFF	; 255
    bbee:	c8 01       	movw	r24, r16
    bbf0:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    bbf4:	00 97       	sbiw	r24, 0x00	; 0
    bbf6:	19 f4       	brne	.+6      	; 0xbbfe <f_close+0x2a>
    bbf8:	f8 01       	movw	r30, r16
    bbfa:	11 82       	std	Z+1, r1	; 0x01
    bbfc:	10 82       	st	Z, r1
    bbfe:	22 96       	adiw	r28, 0x02	; 2
    bc00:	e4 e0       	ldi	r30, 0x04	; 4
    bc02:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0000bc06 <f_chdir>:
    bc06:	a2 e3       	ldi	r26, 0x32	; 50
    bc08:	b0 e0       	ldi	r27, 0x00	; 0
    bc0a:	e9 e0       	ldi	r30, 0x09	; 9
    bc0c:	fe e5       	ldi	r31, 0x5E	; 94
    bc0e:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    bc12:	9a ab       	std	Y+50, r25	; 0x32
    bc14:	89 ab       	std	Y+49, r24	; 0x31
    bc16:	40 e0       	ldi	r20, 0x00	; 0
    bc18:	be 01       	movw	r22, r28
    bc1a:	61 5d       	subi	r22, 0xD1	; 209
    bc1c:	7f 4f       	sbci	r23, 0xFF	; 255
    bc1e:	ce 01       	movw	r24, r28
    bc20:	c1 96       	adiw	r24, 0x31	; 49
    bc22:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    bc26:	00 97       	sbiw	r24, 0x00	; 0
    bc28:	09 f0       	breq	.+2      	; 0xbc2c <f_chdir+0x26>
    bc2a:	44 c0       	rjmp	.+136    	; 0xbcb4 <f_chdir+0xae>
    bc2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    bc2e:	98 a9       	ldd	r25, Y+48	; 0x30
    bc30:	9a 83       	std	Y+2, r25	; 0x02
    bc32:	89 83       	std	Y+1, r24	; 0x01
    bc34:	80 e0       	ldi	r24, 0x00	; 0
    bc36:	92 e0       	ldi	r25, 0x02	; 2
    bc38:	0e 94 26 68 	call	0xd04c	; 0xd04c <ff_memalloc>
    bc3c:	7c 01       	movw	r14, r24
    bc3e:	00 97       	sbiw	r24, 0x00	; 0
    bc40:	a9 f1       	breq	.+106    	; 0xbcac <f_chdir+0xa6>
    bc42:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc44:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc46:	94 87       	std	Z+12, r25	; 0x0c
    bc48:	83 87       	std	Z+11, r24	; 0x0b
    bc4a:	69 a9       	ldd	r22, Y+49	; 0x31
    bc4c:	7a a9       	ldd	r23, Y+50	; 0x32
    bc4e:	ce 01       	movw	r24, r28
    bc50:	01 96       	adiw	r24, 0x01	; 1
    bc52:	39 d8       	rcall	.-3982   	; 0xacc6 <follow_path>
    bc54:	8c 01       	movw	r16, r24
    bc56:	89 2b       	or	r24, r25
    bc58:	09 f5       	brne	.+66     	; 0xbc9c <f_chdir+0x96>
    bc5a:	88 a5       	ldd	r24, Y+40	; 0x28
    bc5c:	87 ff       	sbrs	r24, 7
    bc5e:	0b c0       	rjmp	.+22     	; 0xbc76 <f_chdir+0x70>
    bc60:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc62:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc64:	8f 81       	ldd	r24, Y+7	; 0x07
    bc66:	98 85       	ldd	r25, Y+8	; 0x08
    bc68:	a9 85       	ldd	r26, Y+9	; 0x09
    bc6a:	ba 85       	ldd	r27, Y+10	; 0x0a
    bc6c:	85 8b       	std	Z+21, r24	; 0x15
    bc6e:	96 8b       	std	Z+22, r25	; 0x16
    bc70:	a7 8b       	std	Z+23, r26	; 0x17
    bc72:	b0 8f       	std	Z+24, r27	; 0x18
    bc74:	13 c0       	rjmp	.+38     	; 0xbc9c <f_chdir+0x96>
    bc76:	8d 81       	ldd	r24, Y+5	; 0x05
    bc78:	84 ff       	sbrs	r24, 4
    bc7a:	0e c0       	rjmp	.+28     	; 0xbc98 <f_chdir+0x92>
    bc7c:	cf a4       	ldd	r12, Y+47	; 0x2f
    bc7e:	d8 a8       	ldd	r13, Y+48	; 0x30
    bc80:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bc82:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bc84:	f6 01       	movw	r30, r12
    bc86:	80 81       	ld	r24, Z
    bc88:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    bc8c:	f6 01       	movw	r30, r12
    bc8e:	65 8b       	std	Z+21, r22	; 0x15
    bc90:	76 8b       	std	Z+22, r23	; 0x16
    bc92:	87 8b       	std	Z+23, r24	; 0x17
    bc94:	90 8f       	std	Z+24, r25	; 0x18
    bc96:	02 c0       	rjmp	.+4      	; 0xbc9c <f_chdir+0x96>
    bc98:	05 e0       	ldi	r16, 0x05	; 5
    bc9a:	10 e0       	ldi	r17, 0x00	; 0
    bc9c:	c7 01       	movw	r24, r14
    bc9e:	0e 94 29 68 	call	0xd052	; 0xd052 <ff_memfree>
    bca2:	04 30       	cpi	r16, 0x04	; 4
    bca4:	11 05       	cpc	r17, r1
    bca6:	29 f4       	brne	.+10     	; 0xbcb2 <f_chdir+0xac>
    bca8:	85 e0       	ldi	r24, 0x05	; 5
    bcaa:	01 c0       	rjmp	.+2      	; 0xbcae <f_chdir+0xa8>
    bcac:	81 e1       	ldi	r24, 0x11	; 17
    bcae:	90 e0       	ldi	r25, 0x00	; 0
    bcb0:	01 c0       	rjmp	.+2      	; 0xbcb4 <f_chdir+0xae>
    bcb2:	c8 01       	movw	r24, r16
    bcb4:	e2 96       	adiw	r28, 0x32	; 50
    bcb6:	e8 e0       	ldi	r30, 0x08	; 8
    bcb8:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000bcbc <f_getcwd>:
    bcbc:	a8 e4       	ldi	r26, 0x48	; 72
    bcbe:	b1 e0       	ldi	r27, 0x01	; 1
    bcc0:	e4 e6       	ldi	r30, 0x64	; 100
    bcc2:	fe e5       	ldi	r31, 0x5E	; 94
    bcc4:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    bcc8:	c9 5b       	subi	r28, 0xB9	; 185
    bcca:	de 4f       	sbci	r29, 0xFE	; 254
    bccc:	99 83       	std	Y+1, r25	; 0x01
    bcce:	88 83       	st	Y, r24
    bcd0:	c7 54       	subi	r28, 0x47	; 71
    bcd2:	d1 40       	sbci	r29, 0x01	; 1
    bcd4:	4b 01       	movw	r8, r22
    bcd6:	7c 01       	movw	r14, r24
    bcd8:	fc 01       	movw	r30, r24
    bcda:	10 82       	st	Z, r1
    bcdc:	40 e0       	ldi	r20, 0x00	; 0
    bcde:	be 01       	movw	r22, r28
    bce0:	6b 5b       	subi	r22, 0xBB	; 187
    bce2:	7e 4f       	sbci	r23, 0xFE	; 254
    bce4:	ce 01       	movw	r24, r28
    bce6:	89 5b       	subi	r24, 0xB9	; 185
    bce8:	9e 4f       	sbci	r25, 0xFE	; 254
    bcea:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    bcee:	1c 01       	movw	r2, r24
    bcf0:	89 2b       	or	r24, r25
    bcf2:	09 f0       	breq	.+2      	; 0xbcf6 <f_getcwd+0x3a>
    bcf4:	03 c1       	rjmp	.+518    	; 0xbefc <f_getcwd+0x240>
    bcf6:	cb 5b       	subi	r28, 0xBB	; 187
    bcf8:	de 4f       	sbci	r29, 0xFE	; 254
    bcfa:	88 81       	ld	r24, Y
    bcfc:	99 81       	ldd	r25, Y+1	; 0x01
    bcfe:	c5 54       	subi	r28, 0x45	; 69
    bd00:	d1 40       	sbci	r29, 0x01	; 1
    bd02:	c9 5e       	subi	r28, 0xE9	; 233
    bd04:	de 4f       	sbci	r29, 0xFE	; 254
    bd06:	99 83       	std	Y+1, r25	; 0x01
    bd08:	88 83       	st	Y, r24
    bd0a:	c7 51       	subi	r28, 0x17	; 23
    bd0c:	d1 40       	sbci	r29, 0x01	; 1
    bd0e:	80 e0       	ldi	r24, 0x00	; 0
    bd10:	92 e0       	ldi	r25, 0x02	; 2
    bd12:	0e 94 26 68 	call	0xd04c	; 0xd04c <ff_memalloc>
    bd16:	5c 01       	movw	r10, r24
    bd18:	00 97       	sbiw	r24, 0x00	; 0
    bd1a:	09 f4       	brne	.+2      	; 0xbd1e <f_getcwd+0x62>
    bd1c:	f3 c0       	rjmp	.+486    	; 0xbf04 <f_getcwd+0x248>
    bd1e:	cb 5b       	subi	r28, 0xBB	; 187
    bd20:	de 4f       	sbci	r29, 0xFE	; 254
    bd22:	e8 81       	ld	r30, Y
    bd24:	f9 81       	ldd	r31, Y+1	; 0x01
    bd26:	c5 54       	subi	r28, 0x45	; 69
    bd28:	d1 40       	sbci	r29, 0x01	; 1
    bd2a:	94 87       	std	Z+12, r25	; 0x0c
    bd2c:	83 87       	std	Z+11, r24	; 0x0b
    bd2e:	85 89       	ldd	r24, Z+21	; 0x15
    bd30:	96 89       	ldd	r25, Z+22	; 0x16
    bd32:	a7 89       	ldd	r26, Z+23	; 0x17
    bd34:	b0 8d       	ldd	r27, Z+24	; 0x18
    bd36:	c3 5e       	subi	r28, 0xE3	; 227
    bd38:	de 4f       	sbci	r29, 0xFE	; 254
    bd3a:	88 83       	st	Y, r24
    bd3c:	99 83       	std	Y+1, r25	; 0x01
    bd3e:	aa 83       	std	Y+2, r26	; 0x02
    bd40:	bb 83       	std	Y+3, r27	; 0x03
    bd42:	cd 51       	subi	r28, 0x1D	; 29
    bd44:	d1 40       	sbci	r29, 0x01	; 1
    bd46:	84 01       	movw	r16, r8
    bd48:	ce 01       	movw	r24, r28
    bd4a:	01 96       	adiw	r24, 0x01	; 1
    bd4c:	6c 01       	movw	r12, r24
    bd4e:	c3 5e       	subi	r28, 0xE3	; 227
    bd50:	de 4f       	sbci	r29, 0xFE	; 254
    bd52:	48 80       	ld	r4, Y
    bd54:	59 80       	ldd	r5, Y+1	; 0x01
    bd56:	6a 80       	ldd	r6, Y+2	; 0x02
    bd58:	7b 80       	ldd	r7, Y+3	; 0x03
    bd5a:	cd 51       	subi	r28, 0x1D	; 29
    bd5c:	d1 40       	sbci	r29, 0x01	; 1
    bd5e:	41 14       	cp	r4, r1
    bd60:	51 04       	cpc	r5, r1
    bd62:	61 04       	cpc	r6, r1
    bd64:	71 04       	cpc	r7, r1
    bd66:	09 f4       	brne	.+2      	; 0xbd6a <f_getcwd+0xae>
    bd68:	a3 c0       	rjmp	.+326    	; 0xbeb0 <f_getcwd+0x1f4>
    bd6a:	40 e2       	ldi	r20, 0x20	; 32
    bd6c:	50 e0       	ldi	r21, 0x00	; 0
    bd6e:	60 e0       	ldi	r22, 0x00	; 0
    bd70:	70 e0       	ldi	r23, 0x00	; 0
    bd72:	ce 01       	movw	r24, r28
    bd74:	89 5e       	subi	r24, 0xE9	; 233
    bd76:	9e 4f       	sbci	r25, 0xFE	; 254
    bd78:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
    bd7c:	00 97       	sbiw	r24, 0x00	; 0
    bd7e:	09 f0       	breq	.+2      	; 0xbd82 <f_getcwd+0xc6>
    bd80:	c6 c0       	rjmp	.+396    	; 0xbf0e <f_getcwd+0x252>
    bd82:	c3 5d       	subi	r28, 0xD3	; 211
    bd84:	de 4f       	sbci	r29, 0xFE	; 254
    bd86:	48 81       	ld	r20, Y
    bd88:	59 81       	ldd	r21, Y+1	; 0x01
    bd8a:	6a 81       	ldd	r22, Y+2	; 0x02
    bd8c:	7b 81       	ldd	r23, Y+3	; 0x03
    bd8e:	cd 52       	subi	r28, 0x2D	; 45
    bd90:	d1 40       	sbci	r29, 0x01	; 1
    bd92:	cb 5b       	subi	r28, 0xBB	; 187
    bd94:	de 4f       	sbci	r29, 0xFE	; 254
    bd96:	88 81       	ld	r24, Y
    bd98:	99 81       	ldd	r25, Y+1	; 0x01
    bd9a:	c5 54       	subi	r28, 0x45	; 69
    bd9c:	d1 40       	sbci	r29, 0x01	; 1
    bd9e:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    bda2:	00 97       	sbiw	r24, 0x00	; 0
    bda4:	09 f0       	breq	.+2      	; 0xbda8 <f_getcwd+0xec>
    bda6:	b3 c0       	rjmp	.+358    	; 0xbf0e <f_getcwd+0x252>
    bda8:	cf 5c       	subi	r28, 0xCF	; 207
    bdaa:	de 4f       	sbci	r29, 0xFE	; 254
    bdac:	68 81       	ld	r22, Y
    bdae:	79 81       	ldd	r23, Y+1	; 0x01
    bdb0:	c1 53       	subi	r28, 0x31	; 49
    bdb2:	d1 40       	sbci	r29, 0x01	; 1
    bdb4:	cb 5b       	subi	r28, 0xBB	; 187
    bdb6:	de 4f       	sbci	r29, 0xFE	; 254
    bdb8:	e8 81       	ld	r30, Y
    bdba:	f9 81       	ldd	r31, Y+1	; 0x01
    bdbc:	c5 54       	subi	r28, 0x45	; 69
    bdbe:	d1 40       	sbci	r29, 0x01	; 1
    bdc0:	80 81       	ld	r24, Z
    bdc2:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    bdc6:	c3 5e       	subi	r28, 0xE3	; 227
    bdc8:	de 4f       	sbci	r29, 0xFE	; 254
    bdca:	68 83       	st	Y, r22
    bdcc:	79 83       	std	Y+1, r23	; 0x01
    bdce:	8a 83       	std	Y+2, r24	; 0x02
    bdd0:	9b 83       	std	Y+3, r25	; 0x03
    bdd2:	cd 51       	subi	r28, 0x1D	; 29
    bdd4:	d1 40       	sbci	r29, 0x01	; 1
    bdd6:	40 e0       	ldi	r20, 0x00	; 0
    bdd8:	50 e0       	ldi	r21, 0x00	; 0
    bdda:	ba 01       	movw	r22, r20
    bddc:	ce 01       	movw	r24, r28
    bdde:	89 5e       	subi	r24, 0xE9	; 233
    bde0:	9e 4f       	sbci	r25, 0xFE	; 254
    bde2:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
    bde6:	00 97       	sbiw	r24, 0x00	; 0
    bde8:	09 f0       	breq	.+2      	; 0xbdec <f_getcwd+0x130>
    bdea:	91 c0       	rjmp	.+290    	; 0xbf0e <f_getcwd+0x252>
    bdec:	60 e0       	ldi	r22, 0x00	; 0
    bdee:	70 e0       	ldi	r23, 0x00	; 0
    bdf0:	ce 01       	movw	r24, r28
    bdf2:	89 5e       	subi	r24, 0xE9	; 233
    bdf4:	9e 4f       	sbci	r25, 0xFE	; 254
    bdf6:	0e 94 b6 52 	call	0xa56c	; 0xa56c <dir_read>
    bdfa:	00 97       	sbiw	r24, 0x00	; 0
    bdfc:	09 f0       	breq	.+2      	; 0xbe00 <f_getcwd+0x144>
    bdfe:	89 c0       	rjmp	.+274    	; 0xbf12 <f_getcwd+0x256>
    be00:	cf 5c       	subi	r28, 0xCF	; 207
    be02:	de 4f       	sbci	r29, 0xFE	; 254
    be04:	68 81       	ld	r22, Y
    be06:	79 81       	ldd	r23, Y+1	; 0x01
    be08:	c1 53       	subi	r28, 0x31	; 49
    be0a:	d1 40       	sbci	r29, 0x01	; 1
    be0c:	cb 5b       	subi	r28, 0xBB	; 187
    be0e:	de 4f       	sbci	r29, 0xFE	; 254
    be10:	e8 81       	ld	r30, Y
    be12:	f9 81       	ldd	r31, Y+1	; 0x01
    be14:	c5 54       	subi	r28, 0x45	; 69
    be16:	d1 40       	sbci	r29, 0x01	; 1
    be18:	80 81       	ld	r24, Z
    be1a:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    be1e:	46 16       	cp	r4, r22
    be20:	57 06       	cpc	r5, r23
    be22:	68 06       	cpc	r6, r24
    be24:	79 06       	cpc	r7, r25
    be26:	41 f4       	brne	.+16     	; 0xbe38 <f_getcwd+0x17c>
    be28:	b6 01       	movw	r22, r12
    be2a:	ce 01       	movw	r24, r28
    be2c:	89 5e       	subi	r24, 0xE9	; 233
    be2e:	9e 4f       	sbci	r25, 0xFE	; 254
    be30:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <get_fileinfo>
    be34:	f6 01       	movw	r30, r12
    be36:	0a c0       	rjmp	.+20     	; 0xbe4c <f_getcwd+0x190>
    be38:	60 e0       	ldi	r22, 0x00	; 0
    be3a:	70 e0       	ldi	r23, 0x00	; 0
    be3c:	ce 01       	movw	r24, r28
    be3e:	89 5e       	subi	r24, 0xE9	; 233
    be40:	9e 4f       	sbci	r25, 0xFE	; 254
    be42:	0e 94 95 51 	call	0xa32a	; 0xa32a <dir_next>
    be46:	00 97       	sbiw	r24, 0x00	; 0
    be48:	89 f2       	breq	.-94     	; 0xbdec <f_getcwd+0x130>
    be4a:	63 c0       	rjmp	.+198    	; 0xbf12 <f_getcwd+0x256>
    be4c:	cf 01       	movw	r24, r30
    be4e:	8c 19       	sub	r24, r12
    be50:	9d 09       	sbc	r25, r13
    be52:	31 96       	adiw	r30, 0x01	; 1
    be54:	25 89       	ldd	r18, Z+21	; 0x15
    be56:	21 11       	cpse	r18, r1
    be58:	f9 cf       	rjmp	.-14     	; 0xbe4c <f_getcwd+0x190>
    be5a:	9c 01       	movw	r18, r24
    be5c:	2f 5f       	subi	r18, 0xFF	; 255
    be5e:	3f 4f       	sbci	r19, 0xFF	; 255
    be60:	02 17       	cp	r16, r18
    be62:	13 07       	cpc	r17, r19
    be64:	08 f4       	brcc	.+2      	; 0xbe68 <f_getcwd+0x1ac>
    be66:	51 c0       	rjmp	.+162    	; 0xbf0a <f_getcwd+0x24e>
    be68:	f6 01       	movw	r30, r12
    be6a:	e8 0f       	add	r30, r24
    be6c:	f9 1f       	adc	r31, r25
    be6e:	98 01       	movw	r18, r16
    be70:	ce 16       	cp	r12, r30
    be72:	df 06       	cpc	r13, r31
    be74:	71 f0       	breq	.+28     	; 0xbe92 <f_getcwd+0x1d6>
    be76:	21 50       	subi	r18, 0x01	; 1
    be78:	31 09       	sbc	r19, r1
    be7a:	45 89       	ldd	r20, Z+21	; 0x15
    be7c:	c9 5b       	subi	r28, 0xB9	; 185
    be7e:	de 4f       	sbci	r29, 0xFE	; 254
    be80:	a8 81       	ld	r26, Y
    be82:	b9 81       	ldd	r27, Y+1	; 0x01
    be84:	c7 54       	subi	r28, 0x47	; 71
    be86:	d1 40       	sbci	r29, 0x01	; 1
    be88:	a2 0f       	add	r26, r18
    be8a:	b3 1f       	adc	r27, r19
    be8c:	4c 93       	st	X, r20
    be8e:	31 97       	sbiw	r30, 0x01	; 1
    be90:	ef cf       	rjmp	.-34     	; 0xbe70 <f_getcwd+0x1b4>
    be92:	80 95       	com	r24
    be94:	90 95       	com	r25
    be96:	08 0f       	add	r16, r24
    be98:	19 1f       	adc	r17, r25
    be9a:	c9 5b       	subi	r28, 0xB9	; 185
    be9c:	de 4f       	sbci	r29, 0xFE	; 254
    be9e:	e8 81       	ld	r30, Y
    bea0:	f9 81       	ldd	r31, Y+1	; 0x01
    bea2:	c7 54       	subi	r28, 0x47	; 71
    bea4:	d1 40       	sbci	r29, 0x01	; 1
    bea6:	e0 0f       	add	r30, r16
    bea8:	f1 1f       	adc	r31, r17
    beaa:	9f e2       	ldi	r25, 0x2F	; 47
    beac:	90 83       	st	Z, r25
    beae:	4f cf       	rjmp	.-354    	; 0xbd4e <f_getcwd+0x92>
    beb0:	08 15       	cp	r16, r8
    beb2:	19 05       	cpc	r17, r9
    beb4:	61 f4       	brne	.+24     	; 0xbece <f_getcwd+0x212>
    beb6:	01 50       	subi	r16, 0x01	; 1
    beb8:	11 09       	sbc	r17, r1
    beba:	c9 5b       	subi	r28, 0xB9	; 185
    bebc:	de 4f       	sbci	r29, 0xFE	; 254
    bebe:	e8 81       	ld	r30, Y
    bec0:	f9 81       	ldd	r31, Y+1	; 0x01
    bec2:	c7 54       	subi	r28, 0x47	; 71
    bec4:	d1 40       	sbci	r29, 0x01	; 1
    bec6:	e0 0f       	add	r30, r16
    bec8:	f1 1f       	adc	r31, r17
    beca:	8f e2       	ldi	r24, 0x2F	; 47
    becc:	80 83       	st	Z, r24
    bece:	ef ef       	ldi	r30, 0xFF	; 255
    bed0:	ee 1a       	sub	r14, r30
    bed2:	fe 0a       	sbc	r15, r30
    bed4:	c9 5b       	subi	r28, 0xB9	; 185
    bed6:	de 4f       	sbci	r29, 0xFE	; 254
    bed8:	e8 81       	ld	r30, Y
    beda:	f9 81       	ldd	r31, Y+1	; 0x01
    bedc:	c7 54       	subi	r28, 0x47	; 71
    bede:	d1 40       	sbci	r29, 0x01	; 1
    bee0:	e0 0f       	add	r30, r16
    bee2:	f1 1f       	adc	r31, r17
    bee4:	80 81       	ld	r24, Z
    bee6:	f7 01       	movw	r30, r14
    bee8:	31 97       	sbiw	r30, 0x01	; 1
    beea:	80 83       	st	Z, r24
    beec:	0f 5f       	subi	r16, 0xFF	; 255
    beee:	1f 4f       	sbci	r17, 0xFF	; 255
    bef0:	08 15       	cp	r16, r8
    bef2:	19 05       	cpc	r17, r9
    bef4:	60 f3       	brcs	.-40     	; 0xbece <f_getcwd+0x212>
    bef6:	c5 01       	movw	r24, r10
    bef8:	0e 94 29 68 	call	0xd052	; 0xd052 <ff_memfree>
    befc:	f7 01       	movw	r30, r14
    befe:	10 82       	st	Z, r1
    bf00:	c1 01       	movw	r24, r2
    bf02:	0d c0       	rjmp	.+26     	; 0xbf1e <f_getcwd+0x262>
    bf04:	81 e1       	ldi	r24, 0x11	; 17
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	0a c0       	rjmp	.+20     	; 0xbf1e <f_getcwd+0x262>
    bf0a:	81 e1       	ldi	r24, 0x11	; 17
    bf0c:	90 e0       	ldi	r25, 0x00	; 0
    bf0e:	1c 01       	movw	r2, r24
    bf10:	f2 cf       	rjmp	.-28     	; 0xbef6 <f_getcwd+0x23a>
    bf12:	84 30       	cpi	r24, 0x04	; 4
    bf14:	91 05       	cpc	r25, r1
    bf16:	d9 f7       	brne	.-10     	; 0xbf0e <f_getcwd+0x252>
    bf18:	82 e0       	ldi	r24, 0x02	; 2
    bf1a:	90 e0       	ldi	r25, 0x00	; 0
    bf1c:	f8 cf       	rjmp	.-16     	; 0xbf0e <f_getcwd+0x252>
    bf1e:	c8 5b       	subi	r28, 0xB8	; 184
    bf20:	de 4f       	sbci	r29, 0xFE	; 254
    bf22:	e2 e1       	ldi	r30, 0x12	; 18
    bf24:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000bf28 <f_lseek>:
    bf28:	aa e0       	ldi	r26, 0x0A	; 10
    bf2a:	b0 e0       	ldi	r27, 0x00	; 0
    bf2c:	ea e9       	ldi	r30, 0x9A	; 154
    bf2e:	ff e5       	ldi	r31, 0x5F	; 95
    bf30:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    bf34:	1c 01       	movw	r2, r24
    bf36:	6a 01       	movw	r12, r20
    bf38:	7b 01       	movw	r14, r22
    bf3a:	be 01       	movw	r22, r28
    bf3c:	6f 5f       	subi	r22, 0xFF	; 255
    bf3e:	7f 4f       	sbci	r23, 0xFF	; 255
    bf40:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    bf44:	00 97       	sbiw	r24, 0x00	; 0
    bf46:	09 f0       	breq	.+2      	; 0xbf4a <f_lseek+0x22>
    bf48:	a7 c2       	rjmp	.+1358   	; 0xc498 <f_lseek+0x570>
    bf4a:	f1 01       	movw	r30, r2
    bf4c:	87 85       	ldd	r24, Z+15	; 0x0f
    bf4e:	90 e0       	ldi	r25, 0x00	; 0
    bf50:	00 97       	sbiw	r24, 0x00	; 0
    bf52:	09 f0       	breq	.+2      	; 0xbf56 <f_lseek+0x2e>
    bf54:	a1 c2       	rjmp	.+1346   	; 0xc498 <f_lseek+0x570>
    bf56:	22 a1       	ldd	r18, Z+34	; 0x22
    bf58:	33 a1       	ldd	r19, Z+35	; 0x23
    bf5a:	21 15       	cp	r18, r1
    bf5c:	31 05       	cpc	r19, r1
    bf5e:	09 f4       	brne	.+2      	; 0xbf62 <f_lseek+0x3a>
    bf60:	2e c1       	rjmp	.+604    	; 0xc1be <f_lseek+0x296>
    bf62:	ff ef       	ldi	r31, 0xFF	; 255
    bf64:	cf 16       	cp	r12, r31
    bf66:	df 06       	cpc	r13, r31
    bf68:	ef 06       	cpc	r14, r31
    bf6a:	ff 06       	cpc	r15, r31
    bf6c:	09 f0       	breq	.+2      	; 0xbf70 <f_lseek+0x48>
    bf6e:	9a c0       	rjmp	.+308    	; 0xc0a4 <f_lseek+0x17c>
    bf70:	89 01       	movw	r16, r18
    bf72:	0c 5f       	subi	r16, 0xFC	; 252
    bf74:	1f 4f       	sbci	r17, 0xFF	; 255
    bf76:	d9 01       	movw	r26, r18
    bf78:	4d 91       	ld	r20, X+
    bf7a:	5d 91       	ld	r21, X+
    bf7c:	6d 91       	ld	r22, X+
    bf7e:	7c 91       	ld	r23, X
    bf80:	4f 83       	std	Y+7, r20	; 0x07
    bf82:	58 87       	std	Y+8, r21	; 0x08
    bf84:	69 87       	std	Y+9, r22	; 0x09
    bf86:	7a 87       	std	Y+10, r23	; 0x0a
    bf88:	f1 01       	movw	r30, r2
    bf8a:	86 80       	ldd	r8, Z+6	; 0x06
    bf8c:	97 80       	ldd	r9, Z+7	; 0x07
    bf8e:	a0 84       	ldd	r10, Z+8	; 0x08
    bf90:	b1 84       	ldd	r11, Z+9	; 0x09
    bf92:	52 e0       	ldi	r21, 0x02	; 2
    bf94:	c5 2e       	mov	r12, r21
    bf96:	d1 2c       	mov	r13, r1
    bf98:	e1 2c       	mov	r14, r1
    bf9a:	f1 2c       	mov	r15, r1
    bf9c:	81 14       	cp	r8, r1
    bf9e:	91 04       	cpc	r9, r1
    bfa0:	a1 04       	cpc	r10, r1
    bfa2:	b1 04       	cpc	r11, r1
    bfa4:	09 f4       	brne	.+2      	; 0xbfa8 <f_lseek+0x80>
    bfa6:	65 c0       	rjmp	.+202    	; 0xc072 <f_lseek+0x14a>
    bfa8:	24 01       	movw	r4, r8
    bfaa:	35 01       	movw	r6, r10
    bfac:	1b 82       	std	Y+3, r1	; 0x03
    bfae:	1c 82       	std	Y+4, r1	; 0x04
    bfb0:	1d 82       	std	Y+5, r1	; 0x05
    bfb2:	1e 82       	std	Y+6, r1	; 0x06
    bfb4:	2b 81       	ldd	r18, Y+3	; 0x03
    bfb6:	3c 81       	ldd	r19, Y+4	; 0x04
    bfb8:	4d 81       	ldd	r20, Y+5	; 0x05
    bfba:	5e 81       	ldd	r21, Y+6	; 0x06
    bfbc:	2f 5f       	subi	r18, 0xFF	; 255
    bfbe:	3f 4f       	sbci	r19, 0xFF	; 255
    bfc0:	4f 4f       	sbci	r20, 0xFF	; 255
    bfc2:	5f 4f       	sbci	r21, 0xFF	; 255
    bfc4:	2b 83       	std	Y+3, r18	; 0x03
    bfc6:	3c 83       	std	Y+4, r19	; 0x04
    bfc8:	4d 83       	std	Y+5, r20	; 0x05
    bfca:	5e 83       	std	Y+6, r21	; 0x06
    bfcc:	b3 01       	movw	r22, r6
    bfce:	a2 01       	movw	r20, r4
    bfd0:	d1 01       	movw	r26, r2
    bfd2:	8d 91       	ld	r24, X+
    bfd4:	9c 91       	ld	r25, X
    bfd6:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_fat.isra.10>
    bfda:	62 30       	cpi	r22, 0x02	; 2
    bfdc:	71 05       	cpc	r23, r1
    bfde:	81 05       	cpc	r24, r1
    bfe0:	91 05       	cpc	r25, r1
    bfe2:	10 f4       	brcc	.+4      	; 0xbfe8 <f_lseek+0xc0>
    bfe4:	82 e0       	ldi	r24, 0x02	; 2
    bfe6:	07 c0       	rjmp	.+14     	; 0xbff6 <f_lseek+0xce>
    bfe8:	6f 3f       	cpi	r22, 0xFF	; 255
    bfea:	ff ef       	ldi	r31, 0xFF	; 255
    bfec:	7f 07       	cpc	r23, r31
    bfee:	8f 07       	cpc	r24, r31
    bff0:	9f 07       	cpc	r25, r31
    bff2:	29 f4       	brne	.+10     	; 0xbffe <f_lseek+0xd6>
    bff4:	81 e0       	ldi	r24, 0x01	; 1
    bff6:	f1 01       	movw	r30, r2
    bff8:	87 87       	std	Z+15, r24	; 0x0f
    bffa:	90 e0       	ldi	r25, 0x00	; 0
    bffc:	4d c2       	rjmp	.+1178   	; 0xc498 <f_lseek+0x570>
    bffe:	a3 01       	movw	r20, r6
    c000:	92 01       	movw	r18, r4
    c002:	2f 5f       	subi	r18, 0xFF	; 255
    c004:	3f 4f       	sbci	r19, 0xFF	; 255
    c006:	4f 4f       	sbci	r20, 0xFF	; 255
    c008:	5f 4f       	sbci	r21, 0xFF	; 255
    c00a:	2b 01       	movw	r4, r22
    c00c:	3c 01       	movw	r6, r24
    c00e:	62 17       	cp	r22, r18
    c010:	73 07       	cpc	r23, r19
    c012:	84 07       	cpc	r24, r20
    c014:	95 07       	cpc	r25, r21
    c016:	71 f2       	breq	.-100    	; 0xbfb4 <f_lseek+0x8c>
    c018:	f2 e0       	ldi	r31, 0x02	; 2
    c01a:	cf 0e       	add	r12, r31
    c01c:	d1 1c       	adc	r13, r1
    c01e:	e1 1c       	adc	r14, r1
    c020:	f1 1c       	adc	r15, r1
    c022:	2f 81       	ldd	r18, Y+7	; 0x07
    c024:	38 85       	ldd	r19, Y+8	; 0x08
    c026:	49 85       	ldd	r20, Y+9	; 0x09
    c028:	5a 85       	ldd	r21, Y+10	; 0x0a
    c02a:	2c 15       	cp	r18, r12
    c02c:	3d 05       	cpc	r19, r13
    c02e:	4e 05       	cpc	r20, r14
    c030:	5f 05       	cpc	r21, r15
    c032:	88 f0       	brcs	.+34     	; 0xc056 <f_lseek+0x12e>
    c034:	2b 81       	ldd	r18, Y+3	; 0x03
    c036:	3c 81       	ldd	r19, Y+4	; 0x04
    c038:	4d 81       	ldd	r20, Y+5	; 0x05
    c03a:	5e 81       	ldd	r21, Y+6	; 0x06
    c03c:	d8 01       	movw	r26, r16
    c03e:	2d 93       	st	X+, r18
    c040:	3d 93       	st	X+, r19
    c042:	4d 93       	st	X+, r20
    c044:	5c 93       	st	X, r21
    c046:	13 97       	sbiw	r26, 0x03	; 3
    c048:	f8 01       	movw	r30, r16
    c04a:	84 82       	std	Z+4, r8	; 0x04
    c04c:	95 82       	std	Z+5, r9	; 0x05
    c04e:	a6 82       	std	Z+6, r10	; 0x06
    c050:	b7 82       	std	Z+7, r11	; 0x07
    c052:	08 5f       	subi	r16, 0xF8	; 248
    c054:	1f 4f       	sbci	r17, 0xFF	; 255
    c056:	e9 81       	ldd	r30, Y+1	; 0x01
    c058:	fa 81       	ldd	r31, Y+2	; 0x02
    c05a:	81 8c       	ldd	r8, Z+25	; 0x19
    c05c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c05e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c060:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c062:	68 15       	cp	r22, r8
    c064:	79 05       	cpc	r23, r9
    c066:	8a 05       	cpc	r24, r10
    c068:	9b 05       	cpc	r25, r11
    c06a:	18 f4       	brcc	.+6      	; 0xc072 <f_lseek+0x14a>
    c06c:	4b 01       	movw	r8, r22
    c06e:	5c 01       	movw	r10, r24
    c070:	9b cf       	rjmp	.-202    	; 0xbfa8 <f_lseek+0x80>
    c072:	f1 01       	movw	r30, r2
    c074:	a2 a1       	ldd	r26, Z+34	; 0x22
    c076:	b3 a1       	ldd	r27, Z+35	; 0x23
    c078:	cd 92       	st	X+, r12
    c07a:	dd 92       	st	X+, r13
    c07c:	ed 92       	st	X+, r14
    c07e:	fc 92       	st	X, r15
    c080:	13 97       	sbiw	r26, 0x03	; 3
    c082:	2f 81       	ldd	r18, Y+7	; 0x07
    c084:	38 85       	ldd	r19, Y+8	; 0x08
    c086:	49 85       	ldd	r20, Y+9	; 0x09
    c088:	5a 85       	ldd	r21, Y+10	; 0x0a
    c08a:	2c 15       	cp	r18, r12
    c08c:	3d 05       	cpc	r19, r13
    c08e:	4e 05       	cpc	r20, r14
    c090:	5f 05       	cpc	r21, r15
    c092:	08 f4       	brcc	.+2      	; 0xc096 <f_lseek+0x16e>
    c094:	f8 c1       	rjmp	.+1008   	; 0xc486 <f_lseek+0x55e>
    c096:	d8 01       	movw	r26, r16
    c098:	1d 92       	st	X+, r1
    c09a:	1d 92       	st	X+, r1
    c09c:	1d 92       	st	X+, r1
    c09e:	1c 92       	st	X, r1
    c0a0:	13 97       	sbiw	r26, 0x03	; 3
    c0a2:	ef c1       	rjmp	.+990    	; 0xc482 <f_lseek+0x55a>
    c0a4:	f1 01       	movw	r30, r2
    c0a6:	82 85       	ldd	r24, Z+10	; 0x0a
    c0a8:	93 85       	ldd	r25, Z+11	; 0x0b
    c0aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    c0ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    c0ae:	46 01       	movw	r8, r12
    c0b0:	57 01       	movw	r10, r14
    c0b2:	8c 15       	cp	r24, r12
    c0b4:	9d 05       	cpc	r25, r13
    c0b6:	ae 05       	cpc	r26, r14
    c0b8:	bf 05       	cpc	r27, r15
    c0ba:	10 f4       	brcc	.+4      	; 0xc0c0 <f_lseek+0x198>
    c0bc:	4c 01       	movw	r8, r24
    c0be:	5d 01       	movw	r10, r26
    c0c0:	f1 01       	movw	r30, r2
    c0c2:	80 8a       	std	Z+16, r8	; 0x10
    c0c4:	91 8a       	std	Z+17, r9	; 0x11
    c0c6:	a2 8a       	std	Z+18, r10	; 0x12
    c0c8:	b3 8a       	std	Z+19, r11	; 0x13
    c0ca:	81 14       	cp	r8, r1
    c0cc:	91 04       	cpc	r9, r1
    c0ce:	a1 04       	cpc	r10, r1
    c0d0:	b1 04       	cpc	r11, r1
    c0d2:	09 f4       	brne	.+2      	; 0xc0d6 <f_lseek+0x1ae>
    c0d4:	d6 c1       	rjmp	.+940    	; 0xc482 <f_lseek+0x55a>
    c0d6:	24 01       	movw	r4, r8
    c0d8:	35 01       	movw	r6, r10
    c0da:	f1 e0       	ldi	r31, 0x01	; 1
    c0dc:	4f 1a       	sub	r4, r31
    c0de:	51 08       	sbc	r5, r1
    c0e0:	61 08       	sbc	r6, r1
    c0e2:	71 08       	sbc	r7, r1
    c0e4:	b3 01       	movw	r22, r6
    c0e6:	a2 01       	movw	r20, r4
    c0e8:	c1 01       	movw	r24, r2
    c0ea:	0e 94 9f 46 	call	0x8d3e	; 0x8d3e <clmt_clust>
    c0ee:	ab 01       	movw	r20, r22
    c0f0:	bc 01       	movw	r22, r24
    c0f2:	f1 01       	movw	r30, r2
    c0f4:	44 8b       	std	Z+20, r20	; 0x14
    c0f6:	55 8b       	std	Z+21, r21	; 0x15
    c0f8:	66 8b       	std	Z+22, r22	; 0x16
    c0fa:	77 8b       	std	Z+23, r23	; 0x17
    c0fc:	e9 80       	ldd	r14, Y+1	; 0x01
    c0fe:	fa 80       	ldd	r15, Y+2	; 0x02
    c100:	c7 01       	movw	r24, r14
    c102:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    c106:	61 15       	cp	r22, r1
    c108:	71 05       	cpc	r23, r1
    c10a:	81 05       	cpc	r24, r1
    c10c:	91 05       	cpc	r25, r1
    c10e:	09 f4       	brne	.+2      	; 0xc112 <f_lseek+0x1ea>
    c110:	69 cf       	rjmp	.-302    	; 0xbfe4 <f_lseek+0xbc>
    c112:	95 01       	movw	r18, r10
    c114:	84 01       	movw	r16, r8
    c116:	11 70       	andi	r17, 0x01	; 1
    c118:	22 27       	eor	r18, r18
    c11a:	33 27       	eor	r19, r19
    c11c:	01 15       	cp	r16, r1
    c11e:	11 05       	cpc	r17, r1
    c120:	21 05       	cpc	r18, r1
    c122:	31 05       	cpc	r19, r1
    c124:	09 f4       	brne	.+2      	; 0xc128 <f_lseek+0x200>
    c126:	ad c1       	rjmp	.+858    	; 0xc482 <f_lseek+0x55a>
    c128:	f7 01       	movw	r30, r14
    c12a:	81 84       	ldd	r8, Z+9	; 0x09
    c12c:	92 84       	ldd	r9, Z+10	; 0x0a
    c12e:	f1 e0       	ldi	r31, 0x01	; 1
    c130:	8f 1a       	sub	r8, r31
    c132:	91 08       	sbc	r9, r1
    c134:	a1 2c       	mov	r10, r1
    c136:	b1 2c       	mov	r11, r1
    c138:	49 e0       	ldi	r20, 0x09	; 9
    c13a:	76 94       	lsr	r7
    c13c:	67 94       	ror	r6
    c13e:	57 94       	ror	r5
    c140:	47 94       	ror	r4
    c142:	4a 95       	dec	r20
    c144:	d1 f7       	brne	.-12     	; 0xc13a <f_lseek+0x212>
    c146:	48 20       	and	r4, r8
    c148:	59 20       	and	r5, r9
    c14a:	6a 20       	and	r6, r10
    c14c:	7b 20       	and	r7, r11
    c14e:	53 01       	movw	r10, r6
    c150:	42 01       	movw	r8, r4
    c152:	86 0e       	add	r8, r22
    c154:	97 1e       	adc	r9, r23
    c156:	a8 1e       	adc	r10, r24
    c158:	b9 1e       	adc	r11, r25
    c15a:	f1 01       	movw	r30, r2
    c15c:	20 8d       	ldd	r18, Z+24	; 0x18
    c15e:	31 8d       	ldd	r19, Z+25	; 0x19
    c160:	42 8d       	ldd	r20, Z+26	; 0x1a
    c162:	53 8d       	ldd	r21, Z+27	; 0x1b
    c164:	82 16       	cp	r8, r18
    c166:	93 06       	cpc	r9, r19
    c168:	a4 06       	cpc	r10, r20
    c16a:	b5 06       	cpc	r11, r21
    c16c:	09 f4       	brne	.+2      	; 0xc170 <f_lseek+0x248>
    c16e:	89 c1       	rjmp	.+786    	; 0xc482 <f_lseek+0x55a>
    c170:	86 85       	ldd	r24, Z+14	; 0x0e
    c172:	b1 01       	movw	r22, r2
    c174:	6c 5d       	subi	r22, 0xDC	; 220
    c176:	7f 4f       	sbci	r23, 0xFF	; 255
    c178:	6b 01       	movw	r12, r22
    c17a:	87 ff       	sbrs	r24, 7
    c17c:	0d c0       	rjmp	.+26     	; 0xc198 <f_lseek+0x270>
    c17e:	01 e0       	ldi	r16, 0x01	; 1
    c180:	10 e0       	ldi	r17, 0x00	; 0
    c182:	f7 01       	movw	r30, r14
    c184:	81 81       	ldd	r24, Z+1	; 0x01
    c186:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <disk_write>
    c18a:	89 2b       	or	r24, r25
    c18c:	09 f0       	breq	.+2      	; 0xc190 <f_lseek+0x268>
    c18e:	32 cf       	rjmp	.-412    	; 0xbff4 <f_lseek+0xcc>
    c190:	f1 01       	movw	r30, r2
    c192:	86 85       	ldd	r24, Z+14	; 0x0e
    c194:	8f 77       	andi	r24, 0x7F	; 127
    c196:	86 87       	std	Z+14, r24	; 0x0e
    c198:	e9 81       	ldd	r30, Y+1	; 0x01
    c19a:	fa 81       	ldd	r31, Y+2	; 0x02
    c19c:	01 e0       	ldi	r16, 0x01	; 1
    c19e:	10 e0       	ldi	r17, 0x00	; 0
    c1a0:	a5 01       	movw	r20, r10
    c1a2:	94 01       	movw	r18, r8
    c1a4:	b6 01       	movw	r22, r12
    c1a6:	81 81       	ldd	r24, Z+1	; 0x01
    c1a8:	0e 94 e2 68 	call	0xd1c4	; 0xd1c4 <disk_read>
    c1ac:	89 2b       	or	r24, r25
    c1ae:	09 f0       	breq	.+2      	; 0xc1b2 <f_lseek+0x28a>
    c1b0:	21 cf       	rjmp	.-446    	; 0xbff4 <f_lseek+0xcc>
    c1b2:	f1 01       	movw	r30, r2
    c1b4:	80 8e       	std	Z+24, r8	; 0x18
    c1b6:	91 8e       	std	Z+25, r9	; 0x19
    c1b8:	a2 8e       	std	Z+26, r10	; 0x1a
    c1ba:	b3 8e       	std	Z+27, r11	; 0x1b
    c1bc:	62 c1       	rjmp	.+708    	; 0xc482 <f_lseek+0x55a>
    c1be:	f1 01       	movw	r30, r2
    c1c0:	82 85       	ldd	r24, Z+10	; 0x0a
    c1c2:	93 85       	ldd	r25, Z+11	; 0x0b
    c1c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1c8:	8c 15       	cp	r24, r12
    c1ca:	9d 05       	cpc	r25, r13
    c1cc:	ae 05       	cpc	r26, r14
    c1ce:	bf 05       	cpc	r27, r15
    c1d0:	28 f4       	brcc	.+10     	; 0xc1dc <f_lseek+0x2b4>
    c1d2:	26 85       	ldd	r18, Z+14	; 0x0e
    c1d4:	21 fd       	sbrc	r18, 1
    c1d6:	02 c0       	rjmp	.+4      	; 0xc1dc <f_lseek+0x2b4>
    c1d8:	6c 01       	movw	r12, r24
    c1da:	7d 01       	movw	r14, r26
    c1dc:	f1 01       	movw	r30, r2
    c1de:	40 88       	ldd	r4, Z+16	; 0x10
    c1e0:	51 88       	ldd	r5, Z+17	; 0x11
    c1e2:	62 88       	ldd	r6, Z+18	; 0x12
    c1e4:	73 88       	ldd	r7, Z+19	; 0x13
    c1e6:	10 8a       	std	Z+16, r1	; 0x10
    c1e8:	11 8a       	std	Z+17, r1	; 0x11
    c1ea:	12 8a       	std	Z+18, r1	; 0x12
    c1ec:	13 8a       	std	Z+19, r1	; 0x13
    c1ee:	c1 14       	cp	r12, r1
    c1f0:	d1 04       	cpc	r13, r1
    c1f2:	e1 04       	cpc	r14, r1
    c1f4:	f1 04       	cpc	r15, r1
    c1f6:	09 f4       	brne	.+2      	; 0xc1fa <f_lseek+0x2d2>
    c1f8:	48 c1       	rjmp	.+656    	; 0xc48a <f_lseek+0x562>
    c1fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c1fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c1fe:	81 84       	ldd	r8, Z+9	; 0x09
    c200:	92 84       	ldd	r9, Z+10	; 0x0a
    c202:	a1 2c       	mov	r10, r1
    c204:	b1 2c       	mov	r11, r1
    c206:	39 e0       	ldi	r19, 0x09	; 9
    c208:	88 0c       	add	r8, r8
    c20a:	99 1c       	adc	r9, r9
    c20c:	aa 1c       	adc	r10, r10
    c20e:	bb 1c       	adc	r11, r11
    c210:	3a 95       	dec	r19
    c212:	d1 f7       	brne	.-12     	; 0xc208 <f_lseek+0x2e0>
    c214:	41 14       	cp	r4, r1
    c216:	51 04       	cpc	r5, r1
    c218:	61 04       	cpc	r6, r1
    c21a:	71 04       	cpc	r7, r1
    c21c:	d9 f1       	breq	.+118    	; 0xc294 <f_lseek+0x36c>
    c21e:	f1 e0       	ldi	r31, 0x01	; 1
    c220:	4f 1a       	sub	r4, r31
    c222:	51 08       	sbc	r5, r1
    c224:	61 08       	sbc	r6, r1
    c226:	71 08       	sbc	r7, r1
    c228:	c7 01       	movw	r24, r14
    c22a:	b6 01       	movw	r22, r12
    c22c:	61 50       	subi	r22, 0x01	; 1
    c22e:	71 09       	sbc	r23, r1
    c230:	81 09       	sbc	r24, r1
    c232:	91 09       	sbc	r25, r1
    c234:	a5 01       	movw	r20, r10
    c236:	94 01       	movw	r18, r8
    c238:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    c23c:	2b 83       	std	Y+3, r18	; 0x03
    c23e:	3c 83       	std	Y+4, r19	; 0x04
    c240:	4d 83       	std	Y+5, r20	; 0x05
    c242:	5e 83       	std	Y+6, r21	; 0x06
    c244:	c3 01       	movw	r24, r6
    c246:	b2 01       	movw	r22, r4
    c248:	a5 01       	movw	r20, r10
    c24a:	94 01       	movw	r18, r8
    c24c:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
    c250:	6b 81       	ldd	r22, Y+3	; 0x03
    c252:	7c 81       	ldd	r23, Y+4	; 0x04
    c254:	8d 81       	ldd	r24, Y+5	; 0x05
    c256:	9e 81       	ldd	r25, Y+6	; 0x06
    c258:	62 17       	cp	r22, r18
    c25a:	73 07       	cpc	r23, r19
    c25c:	84 07       	cpc	r24, r20
    c25e:	95 07       	cpc	r25, r21
    c260:	c8 f0       	brcs	.+50     	; 0xc294 <f_lseek+0x36c>
    c262:	88 27       	eor	r24, r24
    c264:	99 27       	eor	r25, r25
    c266:	dc 01       	movw	r26, r24
    c268:	88 19       	sub	r24, r8
    c26a:	99 09       	sbc	r25, r9
    c26c:	aa 09       	sbc	r26, r10
    c26e:	bb 09       	sbc	r27, r11
    c270:	48 22       	and	r4, r24
    c272:	59 22       	and	r5, r25
    c274:	6a 22       	and	r6, r26
    c276:	7b 22       	and	r7, r27
    c278:	f1 01       	movw	r30, r2
    c27a:	40 8a       	std	Z+16, r4	; 0x10
    c27c:	51 8a       	std	Z+17, r5	; 0x11
    c27e:	62 8a       	std	Z+18, r6	; 0x12
    c280:	73 8a       	std	Z+19, r7	; 0x13
    c282:	c4 18       	sub	r12, r4
    c284:	d5 08       	sbc	r13, r5
    c286:	e6 08       	sbc	r14, r6
    c288:	f7 08       	sbc	r15, r7
    c28a:	44 89       	ldd	r20, Z+20	; 0x14
    c28c:	55 89       	ldd	r21, Z+21	; 0x15
    c28e:	66 89       	ldd	r22, Z+22	; 0x16
    c290:	77 89       	ldd	r23, Z+23	; 0x17
    c292:	29 c0       	rjmp	.+82     	; 0xc2e6 <f_lseek+0x3be>
    c294:	f1 01       	movw	r30, r2
    c296:	46 81       	ldd	r20, Z+6	; 0x06
    c298:	57 81       	ldd	r21, Z+7	; 0x07
    c29a:	60 85       	ldd	r22, Z+8	; 0x08
    c29c:	71 85       	ldd	r23, Z+9	; 0x09
    c29e:	41 15       	cp	r20, r1
    c2a0:	51 05       	cpc	r21, r1
    c2a2:	61 05       	cpc	r22, r1
    c2a4:	71 05       	cpc	r23, r1
    c2a6:	d1 f4       	brne	.+52     	; 0xc2dc <f_lseek+0x3b4>
    c2a8:	40 e0       	ldi	r20, 0x00	; 0
    c2aa:	50 e0       	ldi	r21, 0x00	; 0
    c2ac:	ba 01       	movw	r22, r20
    c2ae:	c1 01       	movw	r24, r2
    c2b0:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <create_chain>
    c2b4:	ab 01       	movw	r20, r22
    c2b6:	bc 01       	movw	r22, r24
    c2b8:	41 30       	cpi	r20, 0x01	; 1
    c2ba:	51 05       	cpc	r21, r1
    c2bc:	61 05       	cpc	r22, r1
    c2be:	71 05       	cpc	r23, r1
    c2c0:	09 f4       	brne	.+2      	; 0xc2c4 <f_lseek+0x39c>
    c2c2:	90 ce       	rjmp	.-736    	; 0xbfe4 <f_lseek+0xbc>
    c2c4:	4f 3f       	cpi	r20, 0xFF	; 255
    c2c6:	ff ef       	ldi	r31, 0xFF	; 255
    c2c8:	5f 07       	cpc	r21, r31
    c2ca:	6f 07       	cpc	r22, r31
    c2cc:	7f 07       	cpc	r23, r31
    c2ce:	09 f4       	brne	.+2      	; 0xc2d2 <f_lseek+0x3aa>
    c2d0:	91 ce       	rjmp	.-734    	; 0xbff4 <f_lseek+0xcc>
    c2d2:	f1 01       	movw	r30, r2
    c2d4:	46 83       	std	Z+6, r20	; 0x06
    c2d6:	57 83       	std	Z+7, r21	; 0x07
    c2d8:	60 87       	std	Z+8, r22	; 0x08
    c2da:	71 87       	std	Z+9, r23	; 0x09
    c2dc:	f1 01       	movw	r30, r2
    c2de:	44 8b       	std	Z+20, r20	; 0x14
    c2e0:	55 8b       	std	Z+21, r21	; 0x15
    c2e2:	66 8b       	std	Z+22, r22	; 0x16
    c2e4:	77 8b       	std	Z+23, r23	; 0x17
    c2e6:	41 15       	cp	r20, r1
    c2e8:	51 05       	cpc	r21, r1
    c2ea:	61 05       	cpc	r22, r1
    c2ec:	71 05       	cpc	r23, r1
    c2ee:	09 f0       	breq	.+2      	; 0xc2f2 <f_lseek+0x3ca>
    c2f0:	40 c0       	rjmp	.+128    	; 0xc372 <f_lseek+0x44a>
    c2f2:	c1 2c       	mov	r12, r1
    c2f4:	d1 2c       	mov	r13, r1
    c2f6:	76 01       	movw	r14, r12
    c2f8:	79 c0       	rjmp	.+242    	; 0xc3ec <f_lseek+0x4c4>
    c2fa:	c8 18       	sub	r12, r8
    c2fc:	d9 08       	sbc	r13, r9
    c2fe:	ea 08       	sbc	r14, r10
    c300:	fb 08       	sbc	r15, r11
    c302:	f1 01       	movw	r30, r2
    c304:	80 89       	ldd	r24, Z+16	; 0x10
    c306:	91 89       	ldd	r25, Z+17	; 0x11
    c308:	a2 89       	ldd	r26, Z+18	; 0x12
    c30a:	b3 89       	ldd	r27, Z+19	; 0x13
    c30c:	88 0d       	add	r24, r8
    c30e:	99 1d       	adc	r25, r9
    c310:	aa 1d       	adc	r26, r10
    c312:	bb 1d       	adc	r27, r11
    c314:	80 8b       	std	Z+16, r24	; 0x10
    c316:	91 8b       	std	Z+17, r25	; 0x11
    c318:	a2 8b       	std	Z+18, r26	; 0x12
    c31a:	b3 8b       	std	Z+19, r27	; 0x13
    c31c:	86 85       	ldd	r24, Z+14	; 0x0e
    c31e:	81 ff       	sbrs	r24, 1
    c320:	2f c0       	rjmp	.+94     	; 0xc380 <f_lseek+0x458>
    c322:	c1 01       	movw	r24, r2
    c324:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <create_chain>
    c328:	ab 01       	movw	r20, r22
    c32a:	bc 01       	movw	r22, r24
    c32c:	41 15       	cp	r20, r1
    c32e:	51 05       	cpc	r21, r1
    c330:	61 05       	cpc	r22, r1
    c332:	71 05       	cpc	r23, r1
    c334:	61 f1       	breq	.+88     	; 0xc38e <f_lseek+0x466>
    c336:	4f 3f       	cpi	r20, 0xFF	; 255
    c338:	bf ef       	ldi	r27, 0xFF	; 255
    c33a:	5b 07       	cpc	r21, r27
    c33c:	6b 07       	cpc	r22, r27
    c33e:	7b 07       	cpc	r23, r27
    c340:	09 f4       	brne	.+2      	; 0xc344 <f_lseek+0x41c>
    c342:	58 ce       	rjmp	.-848    	; 0xbff4 <f_lseek+0xcc>
    c344:	42 30       	cpi	r20, 0x02	; 2
    c346:	51 05       	cpc	r21, r1
    c348:	61 05       	cpc	r22, r1
    c34a:	71 05       	cpc	r23, r1
    c34c:	08 f4       	brcc	.+2      	; 0xc350 <f_lseek+0x428>
    c34e:	4a ce       	rjmp	.-876    	; 0xbfe4 <f_lseek+0xbc>
    c350:	e9 81       	ldd	r30, Y+1	; 0x01
    c352:	fa 81       	ldd	r31, Y+2	; 0x02
    c354:	81 8d       	ldd	r24, Z+25	; 0x19
    c356:	92 8d       	ldd	r25, Z+26	; 0x1a
    c358:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c35a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c35c:	48 17       	cp	r20, r24
    c35e:	59 07       	cpc	r21, r25
    c360:	6a 07       	cpc	r22, r26
    c362:	7b 07       	cpc	r23, r27
    c364:	08 f0       	brcs	.+2      	; 0xc368 <f_lseek+0x440>
    c366:	3e ce       	rjmp	.-900    	; 0xbfe4 <f_lseek+0xbc>
    c368:	f1 01       	movw	r30, r2
    c36a:	44 8b       	std	Z+20, r20	; 0x14
    c36c:	55 8b       	std	Z+21, r21	; 0x15
    c36e:	66 8b       	std	Z+22, r22	; 0x16
    c370:	77 8b       	std	Z+23, r23	; 0x17
    c372:	8c 14       	cp	r8, r12
    c374:	9d 04       	cpc	r9, r13
    c376:	ae 04       	cpc	r10, r14
    c378:	bf 04       	cpc	r11, r15
    c37a:	08 f4       	brcc	.+2      	; 0xc37e <f_lseek+0x456>
    c37c:	be cf       	rjmp	.-132    	; 0xc2fa <f_lseek+0x3d2>
    c37e:	0a c0       	rjmp	.+20     	; 0xc394 <f_lseek+0x46c>
    c380:	80 81       	ld	r24, Z
    c382:	91 81       	ldd	r25, Z+1	; 0x01
    c384:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_fat.isra.10>
    c388:	ab 01       	movw	r20, r22
    c38a:	bc 01       	movw	r22, r24
    c38c:	d4 cf       	rjmp	.-88     	; 0xc336 <f_lseek+0x40e>
    c38e:	c1 2c       	mov	r12, r1
    c390:	d1 2c       	mov	r13, r1
    c392:	76 01       	movw	r14, r12
    c394:	f1 01       	movw	r30, r2
    c396:	80 89       	ldd	r24, Z+16	; 0x10
    c398:	91 89       	ldd	r25, Z+17	; 0x11
    c39a:	a2 89       	ldd	r26, Z+18	; 0x12
    c39c:	b3 89       	ldd	r27, Z+19	; 0x13
    c39e:	8c 0d       	add	r24, r12
    c3a0:	9d 1d       	adc	r25, r13
    c3a2:	ae 1d       	adc	r26, r14
    c3a4:	bf 1d       	adc	r27, r15
    c3a6:	80 8b       	std	Z+16, r24	; 0x10
    c3a8:	91 8b       	std	Z+17, r25	; 0x11
    c3aa:	a2 8b       	std	Z+18, r26	; 0x12
    c3ac:	b3 8b       	std	Z+19, r27	; 0x13
    c3ae:	d7 01       	movw	r26, r14
    c3b0:	c6 01       	movw	r24, r12
    c3b2:	91 70       	andi	r25, 0x01	; 1
    c3b4:	aa 27       	eor	r26, r26
    c3b6:	bb 27       	eor	r27, r27
    c3b8:	89 2b       	or	r24, r25
    c3ba:	8a 2b       	or	r24, r26
    c3bc:	8b 2b       	or	r24, r27
    c3be:	09 f4       	brne	.+2      	; 0xc3c2 <f_lseek+0x49a>
    c3c0:	98 cf       	rjmp	.-208    	; 0xc2f2 <f_lseek+0x3ca>
    c3c2:	89 81       	ldd	r24, Y+1	; 0x01
    c3c4:	9a 81       	ldd	r25, Y+2	; 0x02
    c3c6:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    c3ca:	61 15       	cp	r22, r1
    c3cc:	71 05       	cpc	r23, r1
    c3ce:	81 05       	cpc	r24, r1
    c3d0:	91 05       	cpc	r25, r1
    c3d2:	09 f4       	brne	.+2      	; 0xc3d6 <f_lseek+0x4ae>
    c3d4:	07 ce       	rjmp	.-1010   	; 0xbfe4 <f_lseek+0xbc>
    c3d6:	29 e0       	ldi	r18, 0x09	; 9
    c3d8:	f6 94       	lsr	r15
    c3da:	e7 94       	ror	r14
    c3dc:	d7 94       	ror	r13
    c3de:	c7 94       	ror	r12
    c3e0:	2a 95       	dec	r18
    c3e2:	d1 f7       	brne	.-12     	; 0xc3d8 <f_lseek+0x4b0>
    c3e4:	c6 0e       	add	r12, r22
    c3e6:	d7 1e       	adc	r13, r23
    c3e8:	e8 1e       	adc	r14, r24
    c3ea:	f9 1e       	adc	r15, r25
    c3ec:	f1 01       	movw	r30, r2
    c3ee:	80 89       	ldd	r24, Z+16	; 0x10
    c3f0:	91 89       	ldd	r25, Z+17	; 0x11
    c3f2:	a2 89       	ldd	r26, Z+18	; 0x12
    c3f4:	b3 89       	ldd	r27, Z+19	; 0x13
    c3f6:	42 85       	ldd	r20, Z+10	; 0x0a
    c3f8:	53 85       	ldd	r21, Z+11	; 0x0b
    c3fa:	64 85       	ldd	r22, Z+12	; 0x0c
    c3fc:	75 85       	ldd	r23, Z+13	; 0x0d
    c3fe:	48 17       	cp	r20, r24
    c400:	59 07       	cpc	r21, r25
    c402:	6a 07       	cpc	r22, r26
    c404:	7b 07       	cpc	r23, r27
    c406:	38 f4       	brcc	.+14     	; 0xc416 <f_lseek+0x4ee>
    c408:	82 87       	std	Z+10, r24	; 0x0a
    c40a:	93 87       	std	Z+11, r25	; 0x0b
    c40c:	a4 87       	std	Z+12, r26	; 0x0c
    c40e:	b5 87       	std	Z+13, r27	; 0x0d
    c410:	26 85       	ldd	r18, Z+14	; 0x0e
    c412:	20 64       	ori	r18, 0x40	; 64
    c414:	26 87       	std	Z+14, r18	; 0x0e
    c416:	91 70       	andi	r25, 0x01	; 1
    c418:	aa 27       	eor	r26, r26
    c41a:	bb 27       	eor	r27, r27
    c41c:	89 2b       	or	r24, r25
    c41e:	8a 2b       	or	r24, r26
    c420:	8b 2b       	or	r24, r27
    c422:	79 f1       	breq	.+94     	; 0xc482 <f_lseek+0x55a>
    c424:	f1 01       	movw	r30, r2
    c426:	20 8d       	ldd	r18, Z+24	; 0x18
    c428:	31 8d       	ldd	r19, Z+25	; 0x19
    c42a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c42c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c42e:	2c 15       	cp	r18, r12
    c430:	3d 05       	cpc	r19, r13
    c432:	4e 05       	cpc	r20, r14
    c434:	5f 05       	cpc	r21, r15
    c436:	29 f1       	breq	.+74     	; 0xc482 <f_lseek+0x55a>
    c438:	86 85       	ldd	r24, Z+14	; 0x0e
    c43a:	b1 01       	movw	r22, r2
    c43c:	6c 5d       	subi	r22, 0xDC	; 220
    c43e:	7f 4f       	sbci	r23, 0xFF	; 255
    c440:	5b 01       	movw	r10, r22
    c442:	87 ff       	sbrs	r24, 7
    c444:	0d c0       	rjmp	.+26     	; 0xc460 <f_lseek+0x538>
    c446:	e9 81       	ldd	r30, Y+1	; 0x01
    c448:	fa 81       	ldd	r31, Y+2	; 0x02
    c44a:	01 e0       	ldi	r16, 0x01	; 1
    c44c:	10 e0       	ldi	r17, 0x00	; 0
    c44e:	81 81       	ldd	r24, Z+1	; 0x01
    c450:	c9 d6       	rcall	.+3474   	; 0xd1e4 <disk_write>
    c452:	89 2b       	or	r24, r25
    c454:	09 f0       	breq	.+2      	; 0xc458 <f_lseek+0x530>
    c456:	ce cd       	rjmp	.-1124   	; 0xbff4 <f_lseek+0xcc>
    c458:	f1 01       	movw	r30, r2
    c45a:	86 85       	ldd	r24, Z+14	; 0x0e
    c45c:	8f 77       	andi	r24, 0x7F	; 127
    c45e:	86 87       	std	Z+14, r24	; 0x0e
    c460:	e9 81       	ldd	r30, Y+1	; 0x01
    c462:	fa 81       	ldd	r31, Y+2	; 0x02
    c464:	01 e0       	ldi	r16, 0x01	; 1
    c466:	10 e0       	ldi	r17, 0x00	; 0
    c468:	a7 01       	movw	r20, r14
    c46a:	96 01       	movw	r18, r12
    c46c:	b5 01       	movw	r22, r10
    c46e:	81 81       	ldd	r24, Z+1	; 0x01
    c470:	a9 d6       	rcall	.+3410   	; 0xd1c4 <disk_read>
    c472:	89 2b       	or	r24, r25
    c474:	09 f0       	breq	.+2      	; 0xc478 <f_lseek+0x550>
    c476:	be cd       	rjmp	.-1156   	; 0xbff4 <f_lseek+0xcc>
    c478:	f1 01       	movw	r30, r2
    c47a:	c0 8e       	std	Z+24, r12	; 0x18
    c47c:	d1 8e       	std	Z+25, r13	; 0x19
    c47e:	e2 8e       	std	Z+26, r14	; 0x1a
    c480:	f3 8e       	std	Z+27, r15	; 0x1b
    c482:	80 e0       	ldi	r24, 0x00	; 0
    c484:	ba cd       	rjmp	.-1164   	; 0xbffa <f_lseek+0xd2>
    c486:	81 e1       	ldi	r24, 0x11	; 17
    c488:	b8 cd       	rjmp	.-1168   	; 0xbffa <f_lseek+0xd2>
    c48a:	80 e0       	ldi	r24, 0x00	; 0
    c48c:	90 e0       	ldi	r25, 0x00	; 0
    c48e:	dc 01       	movw	r26, r24
    c490:	c1 2c       	mov	r12, r1
    c492:	d1 2c       	mov	r13, r1
    c494:	76 01       	movw	r14, r12
    c496:	bf cf       	rjmp	.-130    	; 0xc416 <f_lseek+0x4ee>
    c498:	2a 96       	adiw	r28, 0x0a	; 10
    c49a:	e2 e1       	ldi	r30, 0x12	; 18
    c49c:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000c4a0 <f_opendir>:
    c4a0:	a4 e0       	ldi	r26, 0x04	; 4
    c4a2:	b0 e0       	ldi	r27, 0x00	; 0
    c4a4:	e6 e5       	ldi	r30, 0x56	; 86
    c4a6:	f2 e6       	ldi	r31, 0x62	; 98
    c4a8:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    c4ac:	7c 83       	std	Y+4, r23	; 0x04
    c4ae:	6b 83       	std	Y+3, r22	; 0x03
    c4b0:	00 97       	sbiw	r24, 0x00	; 0
    c4b2:	09 f4       	brne	.+2      	; 0xc4b6 <f_opendir+0x16>
    c4b4:	48 c0       	rjmp	.+144    	; 0xc546 <f_opendir+0xa6>
    c4b6:	8c 01       	movw	r16, r24
    c4b8:	40 e0       	ldi	r20, 0x00	; 0
    c4ba:	be 01       	movw	r22, r28
    c4bc:	6f 5f       	subi	r22, 0xFF	; 255
    c4be:	7f 4f       	sbci	r23, 0xFF	; 255
    c4c0:	ce 01       	movw	r24, r28
    c4c2:	03 96       	adiw	r24, 0x03	; 3
    c4c4:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    c4c8:	7c 01       	movw	r14, r24
    c4ca:	89 2b       	or	r24, r25
    c4cc:	b9 f5       	brne	.+110    	; 0xc53c <f_opendir+0x9c>
    c4ce:	89 81       	ldd	r24, Y+1	; 0x01
    c4d0:	9a 81       	ldd	r25, Y+2	; 0x02
    c4d2:	f8 01       	movw	r30, r16
    c4d4:	91 83       	std	Z+1, r25	; 0x01
    c4d6:	80 83       	st	Z, r24
    c4d8:	80 e0       	ldi	r24, 0x00	; 0
    c4da:	92 e0       	ldi	r25, 0x02	; 2
    c4dc:	b7 d5       	rcall	.+2926   	; 0xd04c <ff_memalloc>
    c4de:	6c 01       	movw	r12, r24
    c4e0:	00 97       	sbiw	r24, 0x00	; 0
    c4e2:	99 f1       	breq	.+102    	; 0xc54a <f_opendir+0xaa>
    c4e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c4e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c4e8:	94 87       	std	Z+12, r25	; 0x0c
    c4ea:	83 87       	std	Z+11, r24	; 0x0b
    c4ec:	6b 81       	ldd	r22, Y+3	; 0x03
    c4ee:	7c 81       	ldd	r23, Y+4	; 0x04
    c4f0:	c8 01       	movw	r24, r16
    c4f2:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    c4f6:	7c 01       	movw	r14, r24
    c4f8:	89 2b       	or	r24, r25
    c4fa:	b9 f4       	brne	.+46     	; 0xc52a <f_opendir+0x8a>
    c4fc:	f8 01       	movw	r30, r16
    c4fe:	87 a1       	ldd	r24, Z+39	; 0x27
    c500:	87 fd       	sbrc	r24, 7
    c502:	28 c0       	rjmp	.+80     	; 0xc554 <f_opendir+0xb4>
    c504:	84 81       	ldd	r24, Z+4	; 0x04
    c506:	84 ff       	sbrs	r24, 4
    c508:	0d c0       	rjmp	.+26     	; 0xc524 <f_opendir+0x84>
    c50a:	62 8d       	ldd	r22, Z+26	; 0x1a
    c50c:	73 8d       	ldd	r23, Z+27	; 0x1b
    c50e:	e9 81       	ldd	r30, Y+1	; 0x01
    c510:	fa 81       	ldd	r31, Y+2	; 0x02
    c512:	80 81       	ld	r24, Z
    c514:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    c518:	f8 01       	movw	r30, r16
    c51a:	66 83       	std	Z+6, r22	; 0x06
    c51c:	77 83       	std	Z+7, r23	; 0x07
    c51e:	80 87       	std	Z+8, r24	; 0x08
    c520:	91 87       	std	Z+9, r25	; 0x09
    c522:	18 c0       	rjmp	.+48     	; 0xc554 <f_opendir+0xb4>
    c524:	95 e0       	ldi	r25, 0x05	; 5
    c526:	e9 2e       	mov	r14, r25
    c528:	f1 2c       	mov	r15, r1
    c52a:	c6 01       	movw	r24, r12
    c52c:	92 d5       	rcall	.+2852   	; 0xd052 <ff_memfree>
    c52e:	f4 e0       	ldi	r31, 0x04	; 4
    c530:	ef 16       	cp	r14, r31
    c532:	f1 04       	cpc	r15, r1
    c534:	f1 f0       	breq	.+60     	; 0xc572 <f_opendir+0xd2>
    c536:	e1 14       	cp	r14, r1
    c538:	f1 04       	cpc	r15, r1
    c53a:	49 f0       	breq	.+18     	; 0xc54e <f_opendir+0xae>
    c53c:	f8 01       	movw	r30, r16
    c53e:	11 82       	std	Z+1, r1	; 0x01
    c540:	10 82       	st	Z, r1
    c542:	c7 01       	movw	r24, r14
    c544:	1a c0       	rjmp	.+52     	; 0xc57a <f_opendir+0xda>
    c546:	89 e0       	ldi	r24, 0x09	; 9
    c548:	03 c0       	rjmp	.+6      	; 0xc550 <f_opendir+0xb0>
    c54a:	81 e1       	ldi	r24, 0x11	; 17
    c54c:	01 c0       	rjmp	.+2      	; 0xc550 <f_opendir+0xb0>
    c54e:	80 e0       	ldi	r24, 0x00	; 0
    c550:	90 e0       	ldi	r25, 0x00	; 0
    c552:	13 c0       	rjmp	.+38     	; 0xc57a <f_opendir+0xda>
    c554:	e9 81       	ldd	r30, Y+1	; 0x01
    c556:	fa 81       	ldd	r31, Y+2	; 0x02
    c558:	85 81       	ldd	r24, Z+5	; 0x05
    c55a:	96 81       	ldd	r25, Z+6	; 0x06
    c55c:	f8 01       	movw	r30, r16
    c55e:	93 83       	std	Z+3, r25	; 0x03
    c560:	82 83       	std	Z+2, r24	; 0x02
    c562:	40 e0       	ldi	r20, 0x00	; 0
    c564:	50 e0       	ldi	r21, 0x00	; 0
    c566:	ba 01       	movw	r22, r20
    c568:	c8 01       	movw	r24, r16
    c56a:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
    c56e:	7c 01       	movw	r14, r24
    c570:	dc cf       	rjmp	.-72     	; 0xc52a <f_opendir+0x8a>
    c572:	85 e0       	ldi	r24, 0x05	; 5
    c574:	e8 2e       	mov	r14, r24
    c576:	f1 2c       	mov	r15, r1
    c578:	e1 cf       	rjmp	.-62     	; 0xc53c <f_opendir+0x9c>
    c57a:	24 96       	adiw	r28, 0x04	; 4
    c57c:	e8 e0       	ldi	r30, 0x08	; 8
    c57e:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000c582 <f_closedir>:
    c582:	a2 e0       	ldi	r26, 0x02	; 2
    c584:	b0 e0       	ldi	r27, 0x00	; 0
    c586:	e7 ec       	ldi	r30, 0xC7	; 199
    c588:	f2 e6       	ldi	r31, 0x62	; 98
    c58a:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    c58e:	8c 01       	movw	r16, r24
    c590:	be 01       	movw	r22, r28
    c592:	6f 5f       	subi	r22, 0xFF	; 255
    c594:	7f 4f       	sbci	r23, 0xFF	; 255
    c596:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    c59a:	00 97       	sbiw	r24, 0x00	; 0
    c59c:	19 f4       	brne	.+6      	; 0xc5a4 <f_closedir+0x22>
    c59e:	f8 01       	movw	r30, r16
    c5a0:	11 82       	std	Z+1, r1	; 0x01
    c5a2:	10 82       	st	Z, r1
    c5a4:	22 96       	adiw	r28, 0x02	; 2
    c5a6:	e4 e0       	ldi	r30, 0x04	; 4
    c5a8:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0000c5ac <f_readdir>:
    c5ac:	a2 e0       	ldi	r26, 0x02	; 2
    c5ae:	b0 e0       	ldi	r27, 0x00	; 0
    c5b0:	ec ed       	ldi	r30, 0xDC	; 220
    c5b2:	f2 e6       	ldi	r31, 0x62	; 98
    c5b4:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
    c5b8:	7c 01       	movw	r14, r24
    c5ba:	5b 01       	movw	r10, r22
    c5bc:	be 01       	movw	r22, r28
    c5be:	6f 5f       	subi	r22, 0xFF	; 255
    c5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c2:	0e 94 16 47 	call	0x8e2c	; 0x8e2c <validate>
    c5c6:	00 97       	sbiw	r24, 0x00	; 0
    c5c8:	89 f5       	brne	.+98     	; 0xc62c <f_readdir+0x80>
    c5ca:	a1 14       	cp	r10, r1
    c5cc:	b1 04       	cpc	r11, r1
    c5ce:	39 f4       	brne	.+14     	; 0xc5de <f_readdir+0x32>
    c5d0:	40 e0       	ldi	r20, 0x00	; 0
    c5d2:	50 e0       	ldi	r21, 0x00	; 0
    c5d4:	ba 01       	movw	r22, r20
    c5d6:	c7 01       	movw	r24, r14
    c5d8:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
    c5dc:	27 c0       	rjmp	.+78     	; 0xc62c <f_readdir+0x80>
    c5de:	80 e0       	ldi	r24, 0x00	; 0
    c5e0:	92 e0       	ldi	r25, 0x02	; 2
    c5e2:	34 d5       	rcall	.+2664   	; 0xd04c <ff_memalloc>
    c5e4:	6c 01       	movw	r12, r24
    c5e6:	00 97       	sbiw	r24, 0x00	; 0
    c5e8:	f9 f0       	breq	.+62     	; 0xc628 <f_readdir+0x7c>
    c5ea:	e9 81       	ldd	r30, Y+1	; 0x01
    c5ec:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ee:	94 87       	std	Z+12, r25	; 0x0c
    c5f0:	83 87       	std	Z+11, r24	; 0x0b
    c5f2:	60 e0       	ldi	r22, 0x00	; 0
    c5f4:	70 e0       	ldi	r23, 0x00	; 0
    c5f6:	c7 01       	movw	r24, r14
    c5f8:	0e 94 b6 52 	call	0xa56c	; 0xa56c <dir_read>
    c5fc:	8c 01       	movw	r16, r24
    c5fe:	8b 7f       	andi	r24, 0xFB	; 251
    c600:	89 2b       	or	r24, r25
    c602:	71 f4       	brne	.+28     	; 0xc620 <f_readdir+0x74>
    c604:	b5 01       	movw	r22, r10
    c606:	c7 01       	movw	r24, r14
    c608:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <get_fileinfo>
    c60c:	60 e0       	ldi	r22, 0x00	; 0
    c60e:	70 e0       	ldi	r23, 0x00	; 0
    c610:	c7 01       	movw	r24, r14
    c612:	0e 94 95 51 	call	0xa32a	; 0xa32a <dir_next>
    c616:	8c 01       	movw	r16, r24
    c618:	04 97       	sbiw	r24, 0x04	; 4
    c61a:	11 f4       	brne	.+4      	; 0xc620 <f_readdir+0x74>
    c61c:	00 e0       	ldi	r16, 0x00	; 0
    c61e:	10 e0       	ldi	r17, 0x00	; 0
    c620:	c6 01       	movw	r24, r12
    c622:	17 d5       	rcall	.+2606   	; 0xd052 <ff_memfree>
    c624:	c8 01       	movw	r24, r16
    c626:	02 c0       	rjmp	.+4      	; 0xc62c <f_readdir+0x80>
    c628:	81 e1       	ldi	r24, 0x11	; 17
    c62a:	90 e0       	ldi	r25, 0x00	; 0
    c62c:	22 96       	adiw	r28, 0x02	; 2
    c62e:	ea e0       	ldi	r30, 0x0A	; 10
    c630:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0000c634 <f_stat>:
    c634:	a0 e3       	ldi	r26, 0x30	; 48
    c636:	b0 e0       	ldi	r27, 0x00	; 0
    c638:	e0 e2       	ldi	r30, 0x20	; 32
    c63a:	f3 e6       	ldi	r31, 0x63	; 99
    c63c:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    c640:	98 ab       	std	Y+48, r25	; 0x30
    c642:	8f a7       	std	Y+47, r24	; 0x2f
    c644:	6b 01       	movw	r12, r22
    c646:	40 e0       	ldi	r20, 0x00	; 0
    c648:	be 01       	movw	r22, r28
    c64a:	6f 5f       	subi	r22, 0xFF	; 255
    c64c:	7f 4f       	sbci	r23, 0xFF	; 255
    c64e:	ce 01       	movw	r24, r28
    c650:	8f 96       	adiw	r24, 0x2f	; 47
    c652:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    c656:	00 97       	sbiw	r24, 0x00	; 0
    c658:	39 f5       	brne	.+78     	; 0xc6a8 <f_stat+0x74>
    c65a:	80 e0       	ldi	r24, 0x00	; 0
    c65c:	92 e0       	ldi	r25, 0x02	; 2
    c65e:	f6 d4       	rcall	.+2540   	; 0xd04c <ff_memalloc>
    c660:	7c 01       	movw	r14, r24
    c662:	00 97       	sbiw	r24, 0x00	; 0
    c664:	f9 f0       	breq	.+62     	; 0xc6a4 <f_stat+0x70>
    c666:	e9 81       	ldd	r30, Y+1	; 0x01
    c668:	fa 81       	ldd	r31, Y+2	; 0x02
    c66a:	94 87       	std	Z+12, r25	; 0x0c
    c66c:	83 87       	std	Z+11, r24	; 0x0b
    c66e:	6f a5       	ldd	r22, Y+47	; 0x2f
    c670:	78 a9       	ldd	r23, Y+48	; 0x30
    c672:	ce 01       	movw	r24, r28
    c674:	01 96       	adiw	r24, 0x01	; 1
    c676:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    c67a:	8c 01       	movw	r16, r24
    c67c:	89 2b       	or	r24, r25
    c67e:	71 f4       	brne	.+28     	; 0xc69c <f_stat+0x68>
    c680:	88 a5       	ldd	r24, Y+40	; 0x28
    c682:	87 fd       	sbrc	r24, 7
    c684:	09 c0       	rjmp	.+18     	; 0xc698 <f_stat+0x64>
    c686:	c1 14       	cp	r12, r1
    c688:	d1 04       	cpc	r13, r1
    c68a:	41 f0       	breq	.+16     	; 0xc69c <f_stat+0x68>
    c68c:	b6 01       	movw	r22, r12
    c68e:	ce 01       	movw	r24, r28
    c690:	01 96       	adiw	r24, 0x01	; 1
    c692:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <get_fileinfo>
    c696:	02 c0       	rjmp	.+4      	; 0xc69c <f_stat+0x68>
    c698:	06 e0       	ldi	r16, 0x06	; 6
    c69a:	10 e0       	ldi	r17, 0x00	; 0
    c69c:	c7 01       	movw	r24, r14
    c69e:	d9 d4       	rcall	.+2482   	; 0xd052 <ff_memfree>
    c6a0:	c8 01       	movw	r24, r16
    c6a2:	02 c0       	rjmp	.+4      	; 0xc6a8 <f_stat+0x74>
    c6a4:	81 e1       	ldi	r24, 0x11	; 17
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	e0 96       	adiw	r28, 0x30	; 48
    c6aa:	e8 e0       	ldi	r30, 0x08	; 8
    c6ac:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000c6b0 <f_getfree>:
    c6b0:	aa e0       	ldi	r26, 0x0A	; 10
    c6b2:	b0 e0       	ldi	r27, 0x00	; 0
    c6b4:	ee e5       	ldi	r30, 0x5E	; 94
    c6b6:	f3 e6       	ldi	r31, 0x63	; 99
    c6b8:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
    c6bc:	9c 83       	std	Y+4, r25	; 0x04
    c6be:	8b 83       	std	Y+3, r24	; 0x03
    c6c0:	7e 83       	std	Y+6, r23	; 0x06
    c6c2:	6d 83       	std	Y+5, r22	; 0x05
    c6c4:	7a 01       	movw	r14, r20
    c6c6:	40 e0       	ldi	r20, 0x00	; 0
    c6c8:	be 01       	movw	r22, r28
    c6ca:	6f 5f       	subi	r22, 0xFF	; 255
    c6cc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ce:	ce 01       	movw	r24, r28
    c6d0:	03 96       	adiw	r24, 0x03	; 3
    c6d2:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    c6d6:	8c 01       	movw	r16, r24
    c6d8:	89 2b       	or	r24, r25
    c6da:	09 f0       	breq	.+2      	; 0xc6de <f_getfree+0x2e>
    c6dc:	c4 c0       	rjmp	.+392    	; 0xc866 <f_getfree+0x1b6>
    c6de:	69 80       	ldd	r6, Y+1	; 0x01
    c6e0:	7a 80       	ldd	r7, Y+2	; 0x02
    c6e2:	d7 01       	movw	r26, r14
    c6e4:	6d 92       	st	X+, r6
    c6e6:	7c 92       	st	X, r7
    c6e8:	f3 01       	movw	r30, r6
    c6ea:	81 89       	ldd	r24, Z+17	; 0x11
    c6ec:	92 89       	ldd	r25, Z+18	; 0x12
    c6ee:	a3 89       	ldd	r26, Z+19	; 0x13
    c6f0:	b4 89       	ldd	r27, Z+20	; 0x14
    c6f2:	81 8c       	ldd	r8, Z+25	; 0x19
    c6f4:	92 8c       	ldd	r9, Z+26	; 0x1a
    c6f6:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c6f8:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c6fa:	b5 01       	movw	r22, r10
    c6fc:	a4 01       	movw	r20, r8
    c6fe:	42 50       	subi	r20, 0x02	; 2
    c700:	51 09       	sbc	r21, r1
    c702:	61 09       	sbc	r22, r1
    c704:	71 09       	sbc	r23, r1
    c706:	48 17       	cp	r20, r24
    c708:	59 07       	cpc	r21, r25
    c70a:	6a 07       	cpc	r22, r26
    c70c:	7b 07       	cpc	r23, r27
    c70e:	38 f0       	brcs	.+14     	; 0xc71e <f_getfree+0x6e>
    c710:	ed 81       	ldd	r30, Y+5	; 0x05
    c712:	fe 81       	ldd	r31, Y+6	; 0x06
    c714:	80 83       	st	Z, r24
    c716:	91 83       	std	Z+1, r25	; 0x01
    c718:	a2 83       	std	Z+2, r26	; 0x02
    c71a:	b3 83       	std	Z+3, r27	; 0x03
    c71c:	a4 c0       	rjmp	.+328    	; 0xc866 <f_getfree+0x1b6>
    c71e:	80 81       	ld	r24, Z
    c720:	81 30       	cpi	r24, 0x01	; 1
    c722:	a1 f5       	brne	.+104    	; 0xc78c <f_getfree+0xdc>
    c724:	82 e0       	ldi	r24, 0x02	; 2
    c726:	88 2e       	mov	r8, r24
    c728:	91 2c       	mov	r9, r1
    c72a:	a1 2c       	mov	r10, r1
    c72c:	b1 2c       	mov	r11, r1
    c72e:	c1 2c       	mov	r12, r1
    c730:	d1 2c       	mov	r13, r1
    c732:	76 01       	movw	r14, r12
    c734:	b5 01       	movw	r22, r10
    c736:	a4 01       	movw	r20, r8
    c738:	c3 01       	movw	r24, r6
    c73a:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <get_fat.isra.10>
    c73e:	6f 3f       	cpi	r22, 0xFF	; 255
    c740:	bf ef       	ldi	r27, 0xFF	; 255
    c742:	7b 07       	cpc	r23, r27
    c744:	8b 07       	cpc	r24, r27
    c746:	9b 07       	cpc	r25, r27
    c748:	09 f4       	brne	.+2      	; 0xc74c <f_getfree+0x9c>
    c74a:	76 c0       	rjmp	.+236    	; 0xc838 <f_getfree+0x188>
    c74c:	61 30       	cpi	r22, 0x01	; 1
    c74e:	71 05       	cpc	r23, r1
    c750:	81 05       	cpc	r24, r1
    c752:	91 05       	cpc	r25, r1
    c754:	09 f4       	brne	.+2      	; 0xc758 <f_getfree+0xa8>
    c756:	73 c0       	rjmp	.+230    	; 0xc83e <f_getfree+0x18e>
    c758:	67 2b       	or	r22, r23
    c75a:	68 2b       	or	r22, r24
    c75c:	69 2b       	or	r22, r25
    c75e:	29 f4       	brne	.+10     	; 0xc76a <f_getfree+0xba>
    c760:	ef ef       	ldi	r30, 0xFF	; 255
    c762:	ce 1a       	sub	r12, r30
    c764:	de 0a       	sbc	r13, r30
    c766:	ee 0a       	sbc	r14, r30
    c768:	fe 0a       	sbc	r15, r30
    c76a:	ff ef       	ldi	r31, 0xFF	; 255
    c76c:	8f 1a       	sub	r8, r31
    c76e:	9f 0a       	sbc	r9, r31
    c770:	af 0a       	sbc	r10, r31
    c772:	bf 0a       	sbc	r11, r31
    c774:	e9 81       	ldd	r30, Y+1	; 0x01
    c776:	fa 81       	ldd	r31, Y+2	; 0x02
    c778:	81 8d       	ldd	r24, Z+25	; 0x19
    c77a:	92 8d       	ldd	r25, Z+26	; 0x1a
    c77c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c77e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c780:	88 16       	cp	r8, r24
    c782:	99 06       	cpc	r9, r25
    c784:	aa 06       	cpc	r10, r26
    c786:	bb 06       	cpc	r11, r27
    c788:	a8 f2       	brcs	.-86     	; 0xc734 <f_getfree+0x84>
    c78a:	5d c0       	rjmp	.+186    	; 0xc846 <f_getfree+0x196>
    c78c:	f3 01       	movw	r30, r6
    c78e:	45 a0       	ldd	r4, Z+37	; 0x25
    c790:	56 a0       	ldd	r5, Z+38	; 0x26
    c792:	67 a0       	ldd	r6, Z+39	; 0x27
    c794:	70 a4       	ldd	r7, Z+40	; 0x28
    c796:	21 2c       	mov	r2, r1
    c798:	31 2c       	mov	r3, r1
    c79a:	c1 2c       	mov	r12, r1
    c79c:	d1 2c       	mov	r13, r1
    c79e:	76 01       	movw	r14, r12
    c7a0:	21 14       	cp	r2, r1
    c7a2:	31 04       	cpc	r3, r1
    c7a4:	b1 f4       	brne	.+44     	; 0xc7d2 <f_getfree+0x122>
    c7a6:	d3 01       	movw	r26, r6
    c7a8:	c2 01       	movw	r24, r4
    c7aa:	01 96       	adiw	r24, 0x01	; 1
    c7ac:	a1 1d       	adc	r26, r1
    c7ae:	b1 1d       	adc	r27, r1
    c7b0:	8f 83       	std	Y+7, r24	; 0x07
    c7b2:	98 87       	std	Y+8, r25	; 0x08
    c7b4:	a9 87       	std	Y+9, r26	; 0x09
    c7b6:	ba 87       	std	Y+10, r27	; 0x0a
    c7b8:	b3 01       	movw	r22, r6
    c7ba:	a2 01       	movw	r20, r4
    c7bc:	89 81       	ldd	r24, Y+1	; 0x01
    c7be:	9a 81       	ldd	r25, Y+2	; 0x02
    c7c0:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    c7c4:	00 97       	sbiw	r24, 0x00	; 0
    c7c6:	09 f0       	breq	.+2      	; 0xc7ca <f_getfree+0x11a>
    c7c8:	3d c0       	rjmp	.+122    	; 0xc844 <f_getfree+0x194>
    c7ca:	4f 80       	ldd	r4, Y+7	; 0x07
    c7cc:	58 84       	ldd	r5, Y+8	; 0x08
    c7ce:	69 84       	ldd	r6, Y+9	; 0x09
    c7d0:	7a 84       	ldd	r7, Y+10	; 0x0a
    c7d2:	e9 81       	ldd	r30, Y+1	; 0x01
    c7d4:	fa 81       	ldd	r31, Y+2	; 0x02
    c7d6:	80 81       	ld	r24, Z
    c7d8:	82 30       	cpi	r24, 0x02	; 2
    c7da:	79 f4       	brne	.+30     	; 0xc7fa <f_getfree+0x14a>
    c7dc:	e2 0d       	add	r30, r2
    c7de:	f3 1d       	adc	r31, r3
    c7e0:	85 a9       	ldd	r24, Z+53	; 0x35
    c7e2:	96 a9       	ldd	r25, Z+54	; 0x36
    c7e4:	89 2b       	or	r24, r25
    c7e6:	29 f4       	brne	.+10     	; 0xc7f2 <f_getfree+0x142>
    c7e8:	9f ef       	ldi	r25, 0xFF	; 255
    c7ea:	c9 1a       	sub	r12, r25
    c7ec:	d9 0a       	sbc	r13, r25
    c7ee:	e9 0a       	sbc	r14, r25
    c7f0:	f9 0a       	sbc	r15, r25
    c7f2:	a2 e0       	ldi	r26, 0x02	; 2
    c7f4:	2a 0e       	add	r2, r26
    c7f6:	31 1c       	adc	r3, r1
    c7f8:	15 c0       	rjmp	.+42     	; 0xc824 <f_getfree+0x174>
    c7fa:	cf 01       	movw	r24, r30
    c7fc:	c5 96       	adiw	r24, 0x35	; 53
    c7fe:	82 0d       	add	r24, r2
    c800:	93 1d       	adc	r25, r3
    c802:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <ld_dword>
    c806:	dc 01       	movw	r26, r24
    c808:	cb 01       	movw	r24, r22
    c80a:	bf 70       	andi	r27, 0x0F	; 15
    c80c:	89 2b       	or	r24, r25
    c80e:	8a 2b       	or	r24, r26
    c810:	8b 2b       	or	r24, r27
    c812:	29 f4       	brne	.+10     	; 0xc81e <f_getfree+0x16e>
    c814:	bf ef       	ldi	r27, 0xFF	; 255
    c816:	cb 1a       	sub	r12, r27
    c818:	db 0a       	sbc	r13, r27
    c81a:	eb 0a       	sbc	r14, r27
    c81c:	fb 0a       	sbc	r15, r27
    c81e:	e4 e0       	ldi	r30, 0x04	; 4
    c820:	2e 0e       	add	r2, r30
    c822:	31 1c       	adc	r3, r1
    c824:	f1 e0       	ldi	r31, 0x01	; 1
    c826:	3f 22       	and	r3, r31
    c828:	21 e0       	ldi	r18, 0x01	; 1
    c82a:	82 1a       	sub	r8, r18
    c82c:	91 08       	sbc	r9, r1
    c82e:	a1 08       	sbc	r10, r1
    c830:	b1 08       	sbc	r11, r1
    c832:	09 f0       	breq	.+2      	; 0xc836 <f_getfree+0x186>
    c834:	b5 cf       	rjmp	.-150    	; 0xc7a0 <f_getfree+0xf0>
    c836:	07 c0       	rjmp	.+14     	; 0xc846 <f_getfree+0x196>
    c838:	01 e0       	ldi	r16, 0x01	; 1
    c83a:	10 e0       	ldi	r17, 0x00	; 0
    c83c:	04 c0       	rjmp	.+8      	; 0xc846 <f_getfree+0x196>
    c83e:	02 e0       	ldi	r16, 0x02	; 2
    c840:	10 e0       	ldi	r17, 0x00	; 0
    c842:	01 c0       	rjmp	.+2      	; 0xc846 <f_getfree+0x196>
    c844:	8c 01       	movw	r16, r24
    c846:	ad 81       	ldd	r26, Y+5	; 0x05
    c848:	be 81       	ldd	r27, Y+6	; 0x06
    c84a:	cd 92       	st	X+, r12
    c84c:	dd 92       	st	X+, r13
    c84e:	ed 92       	st	X+, r14
    c850:	fc 92       	st	X, r15
    c852:	13 97       	sbiw	r26, 0x03	; 3
    c854:	e9 81       	ldd	r30, Y+1	; 0x01
    c856:	fa 81       	ldd	r31, Y+2	; 0x02
    c858:	c1 8a       	std	Z+17, r12	; 0x11
    c85a:	d2 8a       	std	Z+18, r13	; 0x12
    c85c:	e3 8a       	std	Z+19, r14	; 0x13
    c85e:	f4 8a       	std	Z+20, r15	; 0x14
    c860:	84 81       	ldd	r24, Z+4	; 0x04
    c862:	81 60       	ori	r24, 0x01	; 1
    c864:	84 83       	std	Z+4, r24	; 0x04
    c866:	c8 01       	movw	r24, r16
    c868:	2a 96       	adiw	r28, 0x0a	; 10
    c86a:	e2 e1       	ldi	r30, 0x12	; 18
    c86c:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0000c870 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c870:	a0 e6       	ldi	r26, 0x60	; 96
    c872:	b0 e0       	ldi	r27, 0x00	; 0
    c874:	ee e3       	ldi	r30, 0x3E	; 62
    c876:	f4 e6       	ldi	r31, 0x64	; 100
    c878:	0c 94 a2 e3 	jmp	0x1c744	; 0x1c744 <__prologue_saves__+0xe>
    c87c:	a1 96       	adiw	r28, 0x21	; 33
    c87e:	9f af       	std	Y+63, r25	; 0x3f
    c880:	8e af       	std	Y+62, r24	; 0x3e
    c882:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c884:	42 e0       	ldi	r20, 0x02	; 2
    c886:	be 01       	movw	r22, r28
    c888:	63 5a       	subi	r22, 0xA3	; 163
    c88a:	7f 4f       	sbci	r23, 0xFF	; 255
    c88c:	ce 01       	movw	r24, r28
    c88e:	81 5a       	subi	r24, 0xA1	; 161
    c890:	9f 4f       	sbci	r25, 0xFF	; 255
    c892:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
	if (res == FR_OK) {
    c896:	00 97       	sbiw	r24, 0x00	; 0
    c898:	09 f0       	breq	.+2      	; 0xc89c <f_unlink+0x2c>
    c89a:	8c c0       	rjmp	.+280    	; 0xc9b4 <f_unlink+0x144>
		dj.obj.fs = fs;
    c89c:	6f 96       	adiw	r28, 0x1f	; 31
    c89e:	8e ad       	ldd	r24, Y+62	; 0x3e
    c8a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    c8a2:	6f 97       	sbiw	r28, 0x1f	; 31
    c8a4:	98 ab       	std	Y+48, r25	; 0x30
    c8a6:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c8a8:	80 e0       	ldi	r24, 0x00	; 0
    c8aa:	92 e0       	ldi	r25, 0x02	; 2
    c8ac:	cf d3       	rcall	.+1950   	; 0xd04c <ff_memalloc>
    c8ae:	5c 01       	movw	r10, r24
    c8b0:	00 97       	sbiw	r24, 0x00	; 0
    c8b2:	09 f4       	brne	.+2      	; 0xc8b6 <f_unlink+0x46>
    c8b4:	49 c0       	rjmp	.+146    	; 0xc948 <f_unlink+0xd8>
    c8b6:	6f 96       	adiw	r28, 0x1f	; 31
    c8b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    c8ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    c8bc:	6f 97       	sbiw	r28, 0x1f	; 31
    c8be:	94 87       	std	Z+12, r25	; 0x0c
    c8c0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c8c2:	a1 96       	adiw	r28, 0x21	; 33
    c8c4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8c6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8c8:	a1 97       	sbiw	r28, 0x21	; 33
    c8ca:	ce 01       	movw	r24, r28
    c8cc:	8f 96       	adiw	r24, 0x2f	; 47
    c8ce:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    c8d2:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c8d4:	89 2b       	or	r24, r25
    c8d6:	a1 f5       	brne	.+104    	; 0xc940 <f_unlink+0xd0>
    c8d8:	67 96       	adiw	r28, 0x17	; 23
    c8da:	8f ad       	ldd	r24, Y+63	; 0x3f
    c8dc:	67 97       	sbiw	r28, 0x17	; 23
    c8de:	85 fd       	sbrc	r24, 5
    c8e0:	36 c0       	rjmp	.+108    	; 0xc94e <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c8e2:	87 fd       	sbrc	r24, 7
    c8e4:	34 c0       	rjmp	.+104    	; 0xc94e <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c8e6:	9b a8       	ldd	r9, Y+51	; 0x33
    c8e8:	90 fc       	sbrc	r9, 0
    c8ea:	40 c0       	rjmp	.+128    	; 0xc96c <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c8ec:	6f 96       	adiw	r28, 0x1f	; 31
    c8ee:	0e ad       	ldd	r16, Y+62	; 0x3e
    c8f0:	1f ad       	ldd	r17, Y+63	; 0x3f
    c8f2:	6f 97       	sbiw	r28, 0x1f	; 31
    c8f4:	2b 96       	adiw	r28, 0x0b	; 11
    c8f6:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8f8:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8fa:	2b 97       	sbiw	r28, 0x0b	; 11
    c8fc:	f8 01       	movw	r30, r16
    c8fe:	80 81       	ld	r24, Z
    c900:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    c904:	6b 01       	movw	r12, r22
    c906:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c908:	94 fe       	sbrs	r9, 4
    c90a:	33 c0       	rjmp	.+102    	; 0xc972 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c90c:	f8 01       	movw	r30, r16
    c90e:	85 89       	ldd	r24, Z+21	; 0x15
    c910:	96 89       	ldd	r25, Z+22	; 0x16
    c912:	a7 89       	ldd	r26, Z+23	; 0x17
    c914:	b0 8d       	ldd	r27, Z+24	; 0x18
    c916:	c8 16       	cp	r12, r24
    c918:	d9 06       	cpc	r13, r25
    c91a:	ea 06       	cpc	r14, r26
    c91c:	fb 06       	cpc	r15, r27
    c91e:	31 f1       	breq	.+76     	; 0xc96c <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c920:	1a 83       	std	Y+2, r17	; 0x02
    c922:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c924:	cf 82       	std	Y+7, r12	; 0x07
    c926:	d8 86       	std	Y+8, r13	; 0x08
    c928:	e9 86       	std	Y+9, r14	; 0x09
    c92a:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c92c:	40 e0       	ldi	r20, 0x00	; 0
    c92e:	50 e0       	ldi	r21, 0x00	; 0
    c930:	ba 01       	movw	r22, r20
    c932:	ce 01       	movw	r24, r28
    c934:	01 96       	adiw	r24, 0x01	; 1
    c936:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
    c93a:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c93c:	89 2b       	or	r24, r25
    c93e:	51 f0       	breq	.+20     	; 0xc954 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c940:	c5 01       	movw	r24, r10
    c942:	87 d3       	rcall	.+1806   	; 0xd052 <ff_memfree>
    c944:	c8 01       	movw	r24, r16
    c946:	36 c0       	rjmp	.+108    	; 0xc9b4 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c948:	81 e1       	ldi	r24, 0x11	; 17
    c94a:	90 e0       	ldi	r25, 0x00	; 0
    c94c:	33 c0       	rjmp	.+102    	; 0xc9b4 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c94e:	06 e0       	ldi	r16, 0x06	; 6
    c950:	10 e0       	ldi	r17, 0x00	; 0
    c952:	f6 cf       	rjmp	.-20     	; 0xc940 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c954:	60 e0       	ldi	r22, 0x00	; 0
    c956:	70 e0       	ldi	r23, 0x00	; 0
    c958:	ce 01       	movw	r24, r28
    c95a:	01 96       	adiw	r24, 0x01	; 1
    c95c:	0e 94 b6 52 	call	0xa56c	; 0xa56c <dir_read>
    c960:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c962:	00 97       	sbiw	r24, 0x00	; 0
    c964:	19 f0       	breq	.+6      	; 0xc96c <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c966:	04 97       	sbiw	r24, 0x04	; 4
    c968:	21 f0       	breq	.+8      	; 0xc972 <f_unlink+0x102>
    c96a:	ea cf       	rjmp	.-44     	; 0xc940 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c96c:	07 e0       	ldi	r16, 0x07	; 7
    c96e:	10 e0       	ldi	r17, 0x00	; 0
    c970:	e7 cf       	rjmp	.-50     	; 0xc940 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c972:	ce 01       	movw	r24, r28
    c974:	8f 96       	adiw	r24, 0x2f	; 47
    c976:	0e 94 7f 53 	call	0xa6fe	; 0xa6fe <dir_remove>
    c97a:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c97c:	89 2b       	or	r24, r25
    c97e:	01 f7       	brne	.-64     	; 0xc940 <f_unlink+0xd0>
    c980:	c1 14       	cp	r12, r1
    c982:	d1 04       	cpc	r13, r1
    c984:	e1 04       	cpc	r14, r1
    c986:	f1 04       	cpc	r15, r1
    c988:	41 f4       	brne	.+16     	; 0xc99a <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c98a:	6f 96       	adiw	r28, 0x1f	; 31
    c98c:	8e ad       	ldd	r24, Y+62	; 0x3e
    c98e:	9f ad       	ldd	r25, Y+63	; 0x3f
    c990:	6f 97       	sbiw	r28, 0x1f	; 31
    c992:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    c996:	8c 01       	movw	r16, r24
    c998:	d3 cf       	rjmp	.-90     	; 0xc940 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c99a:	00 e0       	ldi	r16, 0x00	; 0
    c99c:	10 e0       	ldi	r17, 0x00	; 0
    c99e:	98 01       	movw	r18, r16
    c9a0:	b7 01       	movw	r22, r14
    c9a2:	a6 01       	movw	r20, r12
    c9a4:	ce 01       	movw	r24, r28
    c9a6:	8f 96       	adiw	r24, 0x2f	; 47
    c9a8:	0e 94 04 51 	call	0xa208	; 0xa208 <remove_chain>
    c9ac:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c9ae:	89 2b       	or	r24, r25
    c9b0:	39 f6       	brne	.-114    	; 0xc940 <f_unlink+0xd0>
    c9b2:	eb cf       	rjmp	.-42     	; 0xc98a <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9b4:	c0 5a       	subi	r28, 0xA0	; 160
    c9b6:	df 4f       	sbci	r29, 0xFF	; 255
    c9b8:	eb e0       	ldi	r30, 0x0B	; 11
    c9ba:	0c 94 be e3 	jmp	0x1c77c	; 0x1c77c <__epilogue_restores__+0xe>

0000c9be <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c9be:	a0 e4       	ldi	r26, 0x40	; 64
    c9c0:	b0 e0       	ldi	r27, 0x00	; 0
    c9c2:	e5 ee       	ldi	r30, 0xE5	; 229
    c9c4:	f4 e6       	ldi	r31, 0x64	; 100
    c9c6:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    c9ca:	21 96       	adiw	r28, 0x01	; 1
    c9cc:	9f af       	std	Y+63, r25	; 0x3f
    c9ce:	8e af       	std	Y+62, r24	; 0x3e
    c9d0:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c9d2:	42 e0       	ldi	r20, 0x02	; 2
    c9d4:	be 01       	movw	r22, r28
    c9d6:	63 5c       	subi	r22, 0xC3	; 195
    c9d8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9da:	ce 01       	movw	r24, r28
    c9dc:	cf 96       	adiw	r24, 0x3f	; 63
    c9de:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
	if (res == FR_OK) {
    c9e2:	00 97       	sbiw	r24, 0x00	; 0
    c9e4:	09 f0       	breq	.+2      	; 0xc9e8 <f_mkdir+0x2a>
    c9e6:	d6 c0       	rjmp	.+428    	; 0xcb94 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c9e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9ec:	9a 83       	std	Y+2, r25	; 0x02
    c9ee:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c9f0:	80 e0       	ldi	r24, 0x00	; 0
    c9f2:	92 e0       	ldi	r25, 0x02	; 2
    c9f4:	2b d3       	rcall	.+1622   	; 0xd04c <ff_memalloc>
    c9f6:	6c 01       	movw	r12, r24
    c9f8:	00 97       	sbiw	r24, 0x00	; 0
    c9fa:	e9 f0       	breq	.+58     	; 0xca36 <f_mkdir+0x78>
    c9fc:	ed ad       	ldd	r30, Y+61	; 0x3d
    c9fe:	fe ad       	ldd	r31, Y+62	; 0x3e
    ca00:	94 87       	std	Z+12, r25	; 0x0c
    ca02:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    ca04:	21 96       	adiw	r28, 0x01	; 1
    ca06:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca08:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca0a:	21 97       	sbiw	r28, 0x01	; 1
    ca0c:	ce 01       	movw	r24, r28
    ca0e:	01 96       	adiw	r24, 0x01	; 1
    ca10:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    ca14:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ca16:	89 2b       	or	r24, r25
    ca18:	89 f0       	breq	.+34     	; 0xca3c <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ca1a:	84 e0       	ldi	r24, 0x04	; 4
    ca1c:	e8 16       	cp	r14, r24
    ca1e:	f1 04       	cpc	r15, r1
    ca20:	31 f4       	brne	.+12     	; 0xca2e <f_mkdir+0x70>
    ca22:	88 a5       	ldd	r24, Y+40	; 0x28
    ca24:	85 ff       	sbrs	r24, 5
    ca26:	0e c0       	rjmp	.+28     	; 0xca44 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ca28:	26 e0       	ldi	r18, 0x06	; 6
    ca2a:	e2 2e       	mov	r14, r18
    ca2c:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ca2e:	c6 01       	movw	r24, r12
    ca30:	10 d3       	rcall	.+1568   	; 0xd052 <ff_memfree>
    ca32:	c7 01       	movw	r24, r14
    ca34:	af c0       	rjmp	.+350    	; 0xcb94 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca36:	81 e1       	ldi	r24, 0x11	; 17
    ca38:	90 e0       	ldi	r25, 0x00	; 0
    ca3a:	ac c0       	rjmp	.+344    	; 0xcb94 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ca3c:	38 e0       	ldi	r19, 0x08	; 8
    ca3e:	e3 2e       	mov	r14, r19
    ca40:	f1 2c       	mov	r15, r1
    ca42:	f5 cf       	rjmp	.-22     	; 0xca2e <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ca44:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca46:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca48:	98 ab       	std	Y+48, r25	; 0x30
    ca4a:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ca4c:	40 e0       	ldi	r20, 0x00	; 0
    ca4e:	50 e0       	ldi	r21, 0x00	; 0
    ca50:	ba 01       	movw	r22, r20
    ca52:	ce 01       	movw	r24, r28
    ca54:	8f 96       	adiw	r24, 0x2f	; 47
    ca56:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <create_chain>
    ca5a:	4b 01       	movw	r8, r22
    ca5c:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ca5e:	67 2b       	or	r22, r23
    ca60:	68 2b       	or	r22, r24
    ca62:	69 2b       	or	r22, r25
    ca64:	09 f1       	breq	.+66     	; 0xcaa8 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca66:	e1 e0       	ldi	r30, 0x01	; 1
    ca68:	8e 16       	cp	r8, r30
    ca6a:	91 04       	cpc	r9, r1
    ca6c:	a1 04       	cpc	r10, r1
    ca6e:	b1 04       	cpc	r11, r1
    ca70:	61 f0       	breq	.+24     	; 0xca8a <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ca72:	ff ef       	ldi	r31, 0xFF	; 255
    ca74:	8f 16       	cp	r8, r31
    ca76:	9f 06       	cpc	r9, r31
    ca78:	af 06       	cpc	r10, r31
    ca7a:	bf 06       	cpc	r11, r31
    ca7c:	d9 f4       	brne	.+54     	; 0xcab4 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    ca7e:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
    ca82:	ee 24       	eor	r14, r14
    ca84:	e3 94       	inc	r14
    ca86:	f1 2c       	mov	r15, r1
    ca88:	05 c0       	rjmp	.+10     	; 0xca94 <f_mkdir+0xd6>
    ca8a:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca8e:	92 e0       	ldi	r25, 0x02	; 2
    ca90:	e9 2e       	mov	r14, r25
    ca92:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ca94:	00 e0       	ldi	r16, 0x00	; 0
    ca96:	10 e0       	ldi	r17, 0x00	; 0
    ca98:	98 01       	movw	r18, r16
    ca9a:	b5 01       	movw	r22, r10
    ca9c:	a4 01       	movw	r20, r8
    ca9e:	ce 01       	movw	r24, r28
    caa0:	8f 96       	adiw	r24, 0x2f	; 47
    caa2:	0e 94 04 51 	call	0xa208	; 0xa208 <remove_chain>
    caa6:	c3 cf       	rjmp	.-122    	; 0xca2e <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    caa8:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    caac:	87 e0       	ldi	r24, 0x07	; 7
    caae:	e8 2e       	mov	r14, r24
    cab0:	f1 2c       	mov	r15, r1
    cab2:	f0 cf       	rjmp	.-32     	; 0xca94 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cab4:	0e 94 97 6f 	call	0xdf2e	; 0xdf2e <get_fattime>
    cab8:	2b 01       	movw	r4, r22
    caba:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cabc:	b5 01       	movw	r22, r10
    cabe:	a4 01       	movw	r20, r8
    cac0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cac2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cac4:	0e 94 f1 49 	call	0x93e2	; 0x93e2 <dir_clear>
    cac8:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    caca:	89 2b       	or	r24, r25
    cacc:	19 f7       	brne	.-58     	; 0xca94 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cace:	8d ad       	ldd	r24, Y+61	; 0x3d
    cad0:	9e ad       	ldd	r25, Y+62	; 0x3e
    cad2:	4b e0       	ldi	r20, 0x0B	; 11
    cad4:	50 e0       	ldi	r21, 0x00	; 0
    cad6:	60 e2       	ldi	r22, 0x20	; 32
    cad8:	70 e0       	ldi	r23, 0x00	; 0
    cada:	c5 96       	adiw	r24, 0x35	; 53
    cadc:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <mem_set>
						fs->win[DIR_Name] = '.';
    cae0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cae2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cae4:	1e e2       	ldi	r17, 0x2E	; 46
    cae6:	fc 01       	movw	r30, r24
    cae8:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    caea:	e0 5c       	subi	r30, 0xC0	; 192
    caec:	ff 4f       	sbci	r31, 0xFF	; 255
    caee:	20 e1       	ldi	r18, 0x10	; 16
    caf0:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    caf2:	b3 01       	movw	r22, r6
    caf4:	a2 01       	movw	r20, r4
    caf6:	85 5b       	subi	r24, 0xB5	; 181
    caf8:	9f 4f       	sbci	r25, 0xFF	; 255
    cafa:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
						st_clust(fs, fs->win, dcl);
    cafe:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb00:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb02:	bc 01       	movw	r22, r24
    cb04:	6b 5c       	subi	r22, 0xCB	; 203
    cb06:	7f 4f       	sbci	r23, 0xFF	; 255
    cb08:	a5 01       	movw	r20, r10
    cb0a:	94 01       	movw	r18, r8
    cb0c:	0e 94 1f 49 	call	0x923e	; 0x923e <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cb10:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb12:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb14:	bc 01       	movw	r22, r24
    cb16:	6b 5c       	subi	r22, 0xCB	; 203
    cb18:	7f 4f       	sbci	r23, 0xFF	; 255
    cb1a:	40 e2       	ldi	r20, 0x20	; 32
    cb1c:	50 e0       	ldi	r21, 0x00	; 0
    cb1e:	8b 5a       	subi	r24, 0xAB	; 171
    cb20:	9f 4f       	sbci	r25, 0xFF	; 255
    cb22:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cb26:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb28:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb2a:	fc 01       	movw	r30, r24
    cb2c:	ea 5a       	subi	r30, 0xAA	; 170
    cb2e:	ff 4f       	sbci	r31, 0xFF	; 255
    cb30:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cb32:	2f 81       	ldd	r18, Y+7	; 0x07
    cb34:	38 85       	ldd	r19, Y+8	; 0x08
    cb36:	49 85       	ldd	r20, Y+9	; 0x09
    cb38:	5a 85       	ldd	r21, Y+10	; 0x0a
    cb3a:	bc 01       	movw	r22, r24
    cb3c:	6b 5a       	subi	r22, 0xAB	; 171
    cb3e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb40:	0e 94 1f 49 	call	0x923e	; 0x923e <st_clust.isra.5>
						fs->wflag = 1;
    cb44:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb46:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb48:	81 e0       	ldi	r24, 0x01	; 1
    cb4a:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cb4c:	ce 01       	movw	r24, r28
    cb4e:	01 96       	adiw	r24, 0x01	; 1
    cb50:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <dir_register>
    cb54:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cb56:	89 2b       	or	r24, r25
    cb58:	09 f0       	breq	.+2      	; 0xcb5c <f_mkdir+0x19e>
    cb5a:	9c cf       	rjmp	.-200    	; 0xca94 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cb5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cb5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cb60:	b3 01       	movw	r22, r6
    cb62:	a2 01       	movw	r20, r4
    cb64:	46 96       	adiw	r24, 0x16	; 22
    cb66:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cb6a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cb6c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cb6e:	a5 01       	movw	r20, r10
    cb70:	94 01       	movw	r18, r8
    cb72:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb74:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb76:	0e 94 1f 49 	call	0x923e	; 0x923e <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cb7a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cb7c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cb7e:	80 e1       	ldi	r24, 0x10	; 16
    cb80:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cb82:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb84:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb86:	21 e0       	ldi	r18, 0x01	; 1
    cb88:	fc 01       	movw	r30, r24
    cb8a:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cb8c:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    cb90:	7c 01       	movw	r14, r24
    cb92:	4d cf       	rjmp	.-358    	; 0xca2e <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb94:	c0 5c       	subi	r28, 0xC0	; 192
    cb96:	df 4f       	sbci	r29, 0xFF	; 255
    cb98:	e0 e1       	ldi	r30, 0x10	; 16
    cb9a:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

0000cb9e <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cb9e:	a2 e8       	ldi	r26, 0x82	; 130
    cba0:	b0 e0       	ldi	r27, 0x00	; 0
    cba2:	e5 ed       	ldi	r30, 0xD5	; 213
    cba4:	f5 e6       	ldi	r31, 0x65	; 101
    cba6:	0c 94 a4 e3 	jmp	0x1c748	; 0x1c748 <__prologue_saves__+0x12>
    cbaa:	c1 58       	subi	r28, 0x81	; 129
    cbac:	df 4f       	sbci	r29, 0xFF	; 255
    cbae:	99 83       	std	Y+1, r25	; 0x01
    cbb0:	88 83       	st	Y, r24
    cbb2:	cf 57       	subi	r28, 0x7F	; 127
    cbb4:	d0 40       	sbci	r29, 0x00	; 0
    cbb6:	cf 57       	subi	r28, 0x7F	; 127
    cbb8:	df 4f       	sbci	r29, 0xFF	; 255
    cbba:	79 83       	std	Y+1, r23	; 0x01
    cbbc:	68 83       	st	Y, r22
    cbbe:	c1 58       	subi	r28, 0x81	; 129
    cbc0:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cbc2:	ce 01       	movw	r24, r28
    cbc4:	8f 57       	subi	r24, 0x7F	; 127
    cbc6:	9f 4f       	sbci	r25, 0xFF	; 255
    cbc8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cbcc:	42 e0       	ldi	r20, 0x02	; 2
    cbce:	be 01       	movw	r22, r28
    cbd0:	63 58       	subi	r22, 0x83	; 131
    cbd2:	7f 4f       	sbci	r23, 0xFF	; 255
    cbd4:	ce 01       	movw	r24, r28
    cbd6:	81 58       	subi	r24, 0x81	; 129
    cbd8:	9f 4f       	sbci	r25, 0xFF	; 255
    cbda:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
	if (res == FR_OK) {
    cbde:	00 97       	sbiw	r24, 0x00	; 0
    cbe0:	09 f0       	breq	.+2      	; 0xcbe4 <f_rename+0x46>
    cbe2:	ed c0       	rjmp	.+474    	; 0xcdbe <f_rename+0x220>
		djo.obj.fs = fs;
    cbe4:	ef 96       	adiw	r28, 0x3f	; 63
    cbe6:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbe8:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbea:	ef 97       	sbiw	r28, 0x3f	; 63
    cbec:	98 ab       	std	Y+48, r25	; 0x30
    cbee:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cbf0:	80 e0       	ldi	r24, 0x00	; 0
    cbf2:	92 e0       	ldi	r25, 0x02	; 2
    cbf4:	2b d2       	rcall	.+1110   	; 0xd04c <ff_memalloc>
    cbf6:	6c 01       	movw	r12, r24
    cbf8:	00 97       	sbiw	r24, 0x00	; 0
    cbfa:	f1 f0       	breq	.+60     	; 0xcc38 <f_rename+0x9a>
    cbfc:	ef 96       	adiw	r28, 0x3f	; 63
    cbfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    cc00:	ff ad       	ldd	r31, Y+63	; 0x3f
    cc02:	ef 97       	sbiw	r28, 0x3f	; 63
    cc04:	94 87       	std	Z+12, r25	; 0x0c
    cc06:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cc08:	c1 58       	subi	r28, 0x81	; 129
    cc0a:	df 4f       	sbci	r29, 0xFF	; 255
    cc0c:	68 81       	ld	r22, Y
    cc0e:	79 81       	ldd	r23, Y+1	; 0x01
    cc10:	cf 57       	subi	r28, 0x7F	; 127
    cc12:	d0 40       	sbci	r29, 0x00	; 0
    cc14:	ce 01       	movw	r24, r28
    cc16:	8f 96       	adiw	r24, 0x2f	; 47
    cc18:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    cc1c:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cc1e:	89 2b       	or	r24, r25
    cc20:	39 f4       	brne	.+14     	; 0xcc30 <f_rename+0x92>
    cc22:	67 96       	adiw	r28, 0x17	; 23
    cc24:	8f ad       	ldd	r24, Y+63	; 0x3f
    cc26:	67 97       	sbiw	r28, 0x17	; 23
    cc28:	80 7a       	andi	r24, 0xA0	; 160
    cc2a:	49 f0       	breq	.+18     	; 0xcc3e <f_rename+0xa0>
    cc2c:	06 e0       	ldi	r16, 0x06	; 6
    cc2e:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cc30:	c6 01       	movw	r24, r12
    cc32:	0f d2       	rcall	.+1054   	; 0xd052 <ff_memfree>
    cc34:	c8 01       	movw	r24, r16
    cc36:	c3 c0       	rjmp	.+390    	; 0xcdbe <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc38:	81 e1       	ldi	r24, 0x11	; 17
    cc3a:	90 e0       	ldi	r25, 0x00	; 0
    cc3c:	c0 c0       	rjmp	.+384    	; 0xcdbe <f_rename+0x220>
    cc3e:	2b 96       	adiw	r28, 0x0b	; 11
    cc40:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc42:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc44:	2b 97       	sbiw	r28, 0x0b	; 11
    cc46:	40 e2       	ldi	r20, 0x20	; 32
    cc48:	50 e0       	ldi	r21, 0x00	; 0
    cc4a:	ce 01       	movw	r24, r28
    cc4c:	83 5a       	subi	r24, 0xA3	; 163
    cc4e:	9f 4f       	sbci	r25, 0xFF	; 255
    cc50:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
    cc54:	4e e2       	ldi	r20, 0x2E	; 46
    cc56:	50 e0       	ldi	r21, 0x00	; 0
    cc58:	be 01       	movw	r22, r28
    cc5a:	61 5d       	subi	r22, 0xD1	; 209
    cc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    cc5e:	ce 01       	movw	r24, r28
    cc60:	01 96       	adiw	r24, 0x01	; 1
    cc62:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cc66:	cf 57       	subi	r28, 0x7F	; 127
    cc68:	df 4f       	sbci	r29, 0xFF	; 255
    cc6a:	68 81       	ld	r22, Y
    cc6c:	79 81       	ldd	r23, Y+1	; 0x01
    cc6e:	c1 58       	subi	r28, 0x81	; 129
    cc70:	d0 40       	sbci	r29, 0x00	; 0
    cc72:	ce 01       	movw	r24, r28
    cc74:	01 96       	adiw	r24, 0x01	; 1
    cc76:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    cc7a:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cc7c:	89 2b       	or	r24, r25
    cc7e:	f9 f4       	brne	.+62     	; 0xccbe <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cc80:	4f 81       	ldd	r20, Y+7	; 0x07
    cc82:	58 85       	ldd	r21, Y+8	; 0x08
    cc84:	69 85       	ldd	r22, Y+9	; 0x09
    cc86:	7a 85       	ldd	r23, Y+10	; 0x0a
    cc88:	8d a9       	ldd	r24, Y+53	; 0x35
    cc8a:	9e a9       	ldd	r25, Y+54	; 0x36
    cc8c:	af a9       	ldd	r26, Y+55	; 0x37
    cc8e:	b8 ad       	ldd	r27, Y+56	; 0x38
    cc90:	48 17       	cp	r20, r24
    cc92:	59 07       	cpc	r21, r25
    cc94:	6a 07       	cpc	r22, r26
    cc96:	7b 07       	cpc	r23, r27
    cc98:	09 f0       	breq	.+2      	; 0xcc9c <f_rename+0xfe>
    cc9a:	8b c0       	rjmp	.+278    	; 0xcdb2 <f_rename+0x214>
    cc9c:	4f 85       	ldd	r20, Y+15	; 0x0f
    cc9e:	58 89       	ldd	r21, Y+16	; 0x10
    cca0:	69 89       	ldd	r22, Y+17	; 0x11
    cca2:	7a 89       	ldd	r23, Y+18	; 0x12
    cca4:	21 96       	adiw	r28, 0x01	; 1
    cca6:	8c ad       	ldd	r24, Y+60	; 0x3c
    cca8:	9d ad       	ldd	r25, Y+61	; 0x3d
    ccaa:	ae ad       	ldd	r26, Y+62	; 0x3e
    ccac:	bf ad       	ldd	r27, Y+63	; 0x3f
    ccae:	21 97       	sbiw	r28, 0x01	; 1
    ccb0:	48 17       	cp	r20, r24
    ccb2:	59 07       	cpc	r21, r25
    ccb4:	6a 07       	cpc	r22, r26
    ccb6:	7b 07       	cpc	r23, r27
    ccb8:	09 f0       	breq	.+2      	; 0xccbc <f_rename+0x11e>
    ccba:	7b c0       	rjmp	.+246    	; 0xcdb2 <f_rename+0x214>
    ccbc:	04 c0       	rjmp	.+8      	; 0xccc6 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ccbe:	04 30       	cpi	r16, 0x04	; 4
    ccc0:	11 05       	cpc	r17, r1
    ccc2:	09 f0       	breq	.+2      	; 0xccc6 <f_rename+0x128>
    ccc4:	b5 cf       	rjmp	.-150    	; 0xcc30 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ccc6:	ce 01       	movw	r24, r28
    ccc8:	01 96       	adiw	r24, 0x01	; 1
    ccca:	0e 94 d5 54 	call	0xa9aa	; 0xa9aa <dir_register>
    ccce:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ccd0:	89 2b       	or	r24, r25
    ccd2:	09 f0       	breq	.+2      	; 0xccd6 <f_rename+0x138>
    ccd4:	ad cf       	rjmp	.-166    	; 0xcc30 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ccd6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ccd8:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ccda:	6d e5       	ldi	r22, 0x5D	; 93
    ccdc:	70 e0       	ldi	r23, 0x00	; 0
    ccde:	6c 0f       	add	r22, r28
    cce0:	7d 1f       	adc	r23, r29
    cce2:	63 5f       	subi	r22, 0xF3	; 243
    cce4:	7f 4f       	sbci	r23, 0xFF	; 255
    cce6:	43 e1       	ldi	r20, 0x13	; 19
    cce8:	50 e0       	ldi	r21, 0x00	; 0
    ccea:	c8 01       	movw	r24, r16
    ccec:	0d 96       	adiw	r24, 0x0d	; 13
    ccee:	0e 94 42 47 	call	0x8e84	; 0x8e84 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ccf2:	a9 96       	adiw	r28, 0x29	; 41
    ccf4:	8f ad       	ldd	r24, Y+63	; 0x3f
    ccf6:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ccf8:	84 ff       	sbrs	r24, 4
    ccfa:	80 62       	ori	r24, 0x20	; 32
    ccfc:	f8 01       	movw	r30, r16
    ccfe:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cd00:	ef 96       	adiw	r28, 0x3f	; 63
    cd02:	ee ac       	ldd	r14, Y+62	; 0x3e
    cd04:	ff ac       	ldd	r15, Y+63	; 0x3f
    cd06:	ef 97       	sbiw	r28, 0x3f	; 63
    cd08:	bb 24       	eor	r11, r11
    cd0a:	b3 94       	inc	r11
    cd0c:	f7 01       	movw	r30, r14
    cd0e:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cd10:	f8 01       	movw	r30, r16
    cd12:	83 85       	ldd	r24, Z+11	; 0x0b
    cd14:	84 ff       	sbrs	r24, 4
    cd16:	3d c0       	rjmp	.+122    	; 0xcd92 <f_rename+0x1f4>
    cd18:	4d a9       	ldd	r20, Y+53	; 0x35
    cd1a:	5e a9       	ldd	r21, Y+54	; 0x36
    cd1c:	6f a9       	ldd	r22, Y+55	; 0x37
    cd1e:	78 ad       	ldd	r23, Y+56	; 0x38
    cd20:	8f 81       	ldd	r24, Y+7	; 0x07
    cd22:	98 85       	ldd	r25, Y+8	; 0x08
    cd24:	a9 85       	ldd	r26, Y+9	; 0x09
    cd26:	ba 85       	ldd	r27, Y+10	; 0x0a
    cd28:	48 17       	cp	r20, r24
    cd2a:	59 07       	cpc	r21, r25
    cd2c:	6a 07       	cpc	r22, r26
    cd2e:	7b 07       	cpc	r23, r27
    cd30:	81 f1       	breq	.+96     	; 0xcd92 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cd32:	b8 01       	movw	r22, r16
    cd34:	f7 01       	movw	r30, r14
    cd36:	80 81       	ld	r24, Z
    cd38:	0e 94 0a 49 	call	0x9214	; 0x9214 <ld_clust.isra.4>
    cd3c:	ab 01       	movw	r20, r22
    cd3e:	bc 01       	movw	r22, r24
    cd40:	c7 01       	movw	r24, r14
    cd42:	0e 94 77 46 	call	0x8cee	; 0x8cee <clst2sect>
    cd46:	ab 01       	movw	r20, r22
    cd48:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cd4a:	41 15       	cp	r20, r1
    cd4c:	51 05       	cpc	r21, r1
    cd4e:	61 05       	cpc	r22, r1
    cd50:	71 05       	cpc	r23, r1
    cd52:	91 f1       	breq	.+100    	; 0xcdb8 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cd54:	c7 01       	movw	r24, r14
    cd56:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    cd5a:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cd5c:	89 2b       	or	r24, r25
    cd5e:	09 f0       	breq	.+2      	; 0xcd62 <f_rename+0x1c4>
    cd60:	67 cf       	rjmp	.-306    	; 0xcc30 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd62:	ef 96       	adiw	r28, 0x3f	; 63
    cd64:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd66:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd68:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cd6a:	fc 01       	movw	r30, r24
    cd6c:	ea 5a       	subi	r30, 0xAA	; 170
    cd6e:	ff 4f       	sbci	r31, 0xFF	; 255
    cd70:	20 81       	ld	r18, Z
    cd72:	2e 32       	cpi	r18, 0x2E	; 46
    cd74:	71 f4       	brne	.+28     	; 0xcd92 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cd76:	2f 81       	ldd	r18, Y+7	; 0x07
    cd78:	38 85       	ldd	r19, Y+8	; 0x08
    cd7a:	49 85       	ldd	r20, Y+9	; 0x09
    cd7c:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd7e:	bc 01       	movw	r22, r24
    cd80:	6b 5a       	subi	r22, 0xAB	; 171
    cd82:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cd84:	0e 94 1f 49 	call	0x923e	; 0x923e <st_clust.isra.5>
									fs->wflag = 1;
    cd88:	ef 96       	adiw	r28, 0x3f	; 63
    cd8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd8e:	ef 97       	sbiw	r28, 0x3f	; 63
    cd90:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cd92:	ce 01       	movw	r24, r28
    cd94:	8f 96       	adiw	r24, 0x2f	; 47
    cd96:	0e 94 7f 53 	call	0xa6fe	; 0xa6fe <dir_remove>
    cd9a:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cd9c:	89 2b       	or	r24, r25
    cd9e:	09 f0       	breq	.+2      	; 0xcda2 <f_rename+0x204>
    cda0:	47 cf       	rjmp	.-370    	; 0xcc30 <f_rename+0x92>
					res = sync_fs(fs);
    cda2:	ef 96       	adiw	r28, 0x3f	; 63
    cda4:	8e ad       	ldd	r24, Y+62	; 0x3e
    cda6:	9f ad       	ldd	r25, Y+63	; 0x3f
    cda8:	ef 97       	sbiw	r28, 0x3f	; 63
    cdaa:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    cdae:	8c 01       	movw	r16, r24
    cdb0:	3f cf       	rjmp	.-386    	; 0xcc30 <f_rename+0x92>
    cdb2:	08 e0       	ldi	r16, 0x08	; 8
    cdb4:	10 e0       	ldi	r17, 0x00	; 0
    cdb6:	3c cf       	rjmp	.-392    	; 0xcc30 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cdb8:	02 e0       	ldi	r16, 0x02	; 2
    cdba:	10 e0       	ldi	r17, 0x00	; 0
    cdbc:	39 cf       	rjmp	.-398    	; 0xcc30 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cdbe:	ce 57       	subi	r28, 0x7E	; 126
    cdc0:	df 4f       	sbci	r29, 0xFF	; 255
    cdc2:	e9 e0       	ldi	r30, 0x09	; 9
    cdc4:	0c 94 c0 e3 	jmp	0x1c780	; 0x1c780 <__epilogue_restores__+0x12>

0000cdc8 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cdc8:	a2 e3       	ldi	r26, 0x32	; 50
    cdca:	b0 e0       	ldi	r27, 0x00	; 0
    cdcc:	ea ee       	ldi	r30, 0xEA	; 234
    cdce:	f6 e6       	ldi	r31, 0x66	; 102
    cdd0:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    cdd4:	9a ab       	std	Y+50, r25	; 0x32
    cdd6:	89 ab       	std	Y+49, r24	; 0x31
    cdd8:	e6 2e       	mov	r14, r22
    cdda:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cddc:	42 e0       	ldi	r20, 0x02	; 2
    cdde:	be 01       	movw	r22, r28
    cde0:	61 5d       	subi	r22, 0xD1	; 209
    cde2:	7f 4f       	sbci	r23, 0xFF	; 255
    cde4:	ce 01       	movw	r24, r28
    cde6:	c1 96       	adiw	r24, 0x31	; 49
    cde8:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
	if (res == FR_OK) {
    cdec:	00 97       	sbiw	r24, 0x00	; 0
    cdee:	a9 f5       	brne	.+106    	; 0xce5a <f_chmod+0x92>
		dj.obj.fs = fs;
    cdf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdf2:	98 a9       	ldd	r25, Y+48	; 0x30
    cdf4:	9a 83       	std	Y+2, r25	; 0x02
    cdf6:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cdf8:	80 e0       	ldi	r24, 0x00	; 0
    cdfa:	92 e0       	ldi	r25, 0x02	; 2
    cdfc:	27 d1       	rcall	.+590    	; 0xd04c <ff_memalloc>
    cdfe:	6c 01       	movw	r12, r24
    ce00:	00 97       	sbiw	r24, 0x00	; 0
    ce02:	b1 f0       	breq	.+44     	; 0xce30 <f_chmod+0x68>
    ce04:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce06:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce08:	94 87       	std	Z+12, r25	; 0x0c
    ce0a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ce0c:	69 a9       	ldd	r22, Y+49	; 0x31
    ce0e:	7a a9       	ldd	r23, Y+50	; 0x32
    ce10:	ce 01       	movw	r24, r28
    ce12:	01 96       	adiw	r24, 0x01	; 1
    ce14:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    ce18:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    ce1a:	89 2b       	or	r24, r25
    ce1c:	29 f4       	brne	.+10     	; 0xce28 <f_chmod+0x60>
    ce1e:	88 a5       	ldd	r24, Y+40	; 0x28
    ce20:	80 7a       	andi	r24, 0xA0	; 160
    ce22:	49 f0       	breq	.+18     	; 0xce36 <f_chmod+0x6e>
    ce24:	06 e0       	ldi	r16, 0x06	; 6
    ce26:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce28:	c6 01       	movw	r24, r12
    ce2a:	13 d1       	rcall	.+550    	; 0xd052 <ff_memfree>
    ce2c:	c8 01       	movw	r24, r16
    ce2e:	15 c0       	rjmp	.+42     	; 0xce5a <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce30:	81 e1       	ldi	r24, 0x11	; 17
    ce32:	90 e0       	ldi	r25, 0x00	; 0
    ce34:	12 c0       	rjmp	.+36     	; 0xce5a <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    ce36:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ce38:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ce3a:	83 85       	ldd	r24, Z+11	; 0x0b
    ce3c:	6e 2d       	mov	r22, r14
    ce3e:	68 27       	eor	r22, r24
    ce40:	6f 21       	and	r22, r15
    ce42:	67 72       	andi	r22, 0x27	; 39
    ce44:	68 27       	eor	r22, r24
    ce46:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    ce48:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce4a:	98 a9       	ldd	r25, Y+48	; 0x30
    ce4c:	21 e0       	ldi	r18, 0x01	; 1
    ce4e:	fc 01       	movw	r30, r24
    ce50:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    ce52:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    ce56:	8c 01       	movw	r16, r24
    ce58:	e7 cf       	rjmp	.-50     	; 0xce28 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce5a:	e2 96       	adiw	r28, 0x32	; 50
    ce5c:	e8 e0       	ldi	r30, 0x08	; 8
    ce5e:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000ce62 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ce62:	a2 e3       	ldi	r26, 0x32	; 50
    ce64:	b0 e0       	ldi	r27, 0x00	; 0
    ce66:	e7 e3       	ldi	r30, 0x37	; 55
    ce68:	f7 e6       	ldi	r31, 0x67	; 103
    ce6a:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    ce6e:	9a ab       	std	Y+50, r25	; 0x32
    ce70:	89 ab       	std	Y+49, r24	; 0x31
    ce72:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ce74:	42 e0       	ldi	r20, 0x02	; 2
    ce76:	be 01       	movw	r22, r28
    ce78:	61 5d       	subi	r22, 0xD1	; 209
    ce7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce7c:	ce 01       	movw	r24, r28
    ce7e:	c1 96       	adiw	r24, 0x31	; 49
    ce80:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
	if (res == FR_OK) {
    ce84:	00 97       	sbiw	r24, 0x00	; 0
    ce86:	09 f0       	breq	.+2      	; 0xce8a <f_utime+0x28>
    ce88:	41 c0       	rjmp	.+130    	; 0xcf0c <f_utime+0xaa>
		dj.obj.fs = fs;
    ce8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce8c:	98 a9       	ldd	r25, Y+48	; 0x30
    ce8e:	9a 83       	std	Y+2, r25	; 0x02
    ce90:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ce92:	80 e0       	ldi	r24, 0x00	; 0
    ce94:	92 e0       	ldi	r25, 0x02	; 2
    ce96:	da d0       	rcall	.+436    	; 0xd04c <ff_memalloc>
    ce98:	7c 01       	movw	r14, r24
    ce9a:	00 97       	sbiw	r24, 0x00	; 0
    ce9c:	b1 f0       	breq	.+44     	; 0xceca <f_utime+0x68>
    ce9e:	ef a5       	ldd	r30, Y+47	; 0x2f
    cea0:	f8 a9       	ldd	r31, Y+48	; 0x30
    cea2:	94 87       	std	Z+12, r25	; 0x0c
    cea4:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cea6:	69 a9       	ldd	r22, Y+49	; 0x31
    cea8:	7a a9       	ldd	r23, Y+50	; 0x32
    ceaa:	ce 01       	movw	r24, r28
    ceac:	01 96       	adiw	r24, 0x01	; 1
    ceae:	0e 94 63 56 	call	0xacc6	; 0xacc6 <follow_path>
    ceb2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    ceb4:	89 2b       	or	r24, r25
    ceb6:	29 f4       	brne	.+10     	; 0xcec2 <f_utime+0x60>
    ceb8:	88 a5       	ldd	r24, Y+40	; 0x28
    ceba:	80 7a       	andi	r24, 0xA0	; 160
    cebc:	49 f0       	breq	.+18     	; 0xced0 <f_utime+0x6e>
    cebe:	06 e0       	ldi	r16, 0x06	; 6
    cec0:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cec2:	c7 01       	movw	r24, r14
    cec4:	c6 d0       	rcall	.+396    	; 0xd052 <ff_memfree>
    cec6:	c8 01       	movw	r24, r16
    cec8:	21 c0       	rjmp	.+66     	; 0xcf0c <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ceca:	81 e1       	ldi	r24, 0x11	; 17
    cecc:	90 e0       	ldi	r25, 0x00	; 0
    cece:	1e c0       	rjmp	.+60     	; 0xcf0c <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    ced0:	f6 01       	movw	r30, r12
    ced2:	44 81       	ldd	r20, Z+4	; 0x04
    ced4:	55 81       	ldd	r21, Z+5	; 0x05
    ced6:	60 e0       	ldi	r22, 0x00	; 0
    ced8:	70 e0       	ldi	r23, 0x00	; 0
    ceda:	ba 01       	movw	r22, r20
    cedc:	55 27       	eor	r21, r21
    cede:	44 27       	eor	r20, r20
    cee0:	86 81       	ldd	r24, Z+6	; 0x06
    cee2:	97 81       	ldd	r25, Z+7	; 0x07
    cee4:	a0 e0       	ldi	r26, 0x00	; 0
    cee6:	b0 e0       	ldi	r27, 0x00	; 0
    cee8:	48 2b       	or	r20, r24
    ceea:	59 2b       	or	r21, r25
    ceec:	6a 2b       	or	r22, r26
    ceee:	7b 2b       	or	r23, r27
    cef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cef4:	46 96       	adiw	r24, 0x16	; 22
    cef6:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <st_dword>
				fs->wflag = 1;
    cefa:	8f a5       	ldd	r24, Y+47	; 0x2f
    cefc:	98 a9       	ldd	r25, Y+48	; 0x30
    cefe:	21 e0       	ldi	r18, 0x01	; 1
    cf00:	fc 01       	movw	r30, r24
    cf02:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cf04:	0e 94 7f 49 	call	0x92fe	; 0x92fe <sync_fs>
    cf08:	8c 01       	movw	r16, r24
    cf0a:	db cf       	rjmp	.-74     	; 0xcec2 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf0c:	e2 96       	adiw	r28, 0x32	; 50
    cf0e:	e8 e0       	ldi	r30, 0x08	; 8
    cf10:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000cf14 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cf14:	a2 e3       	ldi	r26, 0x32	; 50
    cf16:	b0 e0       	ldi	r27, 0x00	; 0
    cf18:	e0 e9       	ldi	r30, 0x90	; 144
    cf1a:	f7 e6       	ldi	r31, 0x67	; 103
    cf1c:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
    cf20:	9a ab       	std	Y+50, r25	; 0x32
    cf22:	89 ab       	std	Y+49, r24	; 0x31
    cf24:	6b 01       	movw	r12, r22
    cf26:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cf28:	40 e0       	ldi	r20, 0x00	; 0
    cf2a:	be 01       	movw	r22, r28
    cf2c:	61 5d       	subi	r22, 0xD1	; 209
    cf2e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf30:	ce 01       	movw	r24, r28
    cf32:	c1 96       	adiw	r24, 0x31	; 49
    cf34:	0e 94 14 4b 	call	0x9628	; 0x9628 <mount_volume>
    cf38:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cf3a:	89 2b       	or	r24, r25
    cf3c:	09 f0       	breq	.+2      	; 0xcf40 <f_getlabel+0x2c>
    cf3e:	81 c0       	rjmp	.+258    	; 0xd042 <f_getlabel+0x12e>
    cf40:	c1 14       	cp	r12, r1
    cf42:	d1 04       	cpc	r13, r1
    cf44:	09 f4       	brne	.+2      	; 0xcf48 <f_getlabel+0x34>
    cf46:	53 c0       	rjmp	.+166    	; 0xcfee <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cf48:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf4a:	98 a9       	ldd	r25, Y+48	; 0x30
    cf4c:	9a 83       	std	Y+2, r25	; 0x02
    cf4e:	89 83       	std	Y+1, r24	; 0x01
    cf50:	1f 82       	std	Y+7, r1	; 0x07
    cf52:	18 86       	std	Y+8, r1	; 0x08
    cf54:	19 86       	std	Y+9, r1	; 0x09
    cf56:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cf58:	40 e0       	ldi	r20, 0x00	; 0
    cf5a:	50 e0       	ldi	r21, 0x00	; 0
    cf5c:	ba 01       	movw	r22, r20
    cf5e:	ce 01       	movw	r24, r28
    cf60:	01 96       	adiw	r24, 0x01	; 1
    cf62:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <dir_sdi>
		if (res == FR_OK) {
    cf66:	00 97       	sbiw	r24, 0x00	; 0
    cf68:	e9 f5       	brne	.+122    	; 0xcfe4 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cf6a:	61 e0       	ldi	r22, 0x01	; 1
    cf6c:	70 e0       	ldi	r23, 0x00	; 0
    cf6e:	ce 01       	movw	r24, r28
    cf70:	01 96       	adiw	r24, 0x01	; 1
    cf72:	0e 94 b6 52 	call	0xa56c	; 0xa56c <dir_read>
		 	if (res == FR_OK) {
    cf76:	00 97       	sbiw	r24, 0x00	; 0
    cf78:	a9 f5       	brne	.+106    	; 0xcfe4 <f_getlabel+0xd0>
    cf7a:	00 e0       	ldi	r16, 0x00	; 0
    cf7c:	10 e0       	ldi	r17, 0x00	; 0
    cf7e:	80 e0       	ldi	r24, 0x00	; 0
    cf80:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cf82:	4c 01       	movw	r8, r24
    cf84:	2f ef       	ldi	r18, 0xFF	; 255
    cf86:	82 1a       	sub	r8, r18
    cf88:	92 0a       	sbc	r9, r18
    cf8a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cf8c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cf8e:	f9 01       	movw	r30, r18
    cf90:	e8 0f       	add	r30, r24
    cf92:	f9 1f       	adc	r31, r25
    cf94:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cf96:	65 eb       	ldi	r22, 0xB5	; 181
    cf98:	71 e0       	ldi	r23, 0x01	; 1
    cf9a:	90 e0       	ldi	r25, 0x00	; 0
    cf9c:	90 d0       	rcall	.+288    	; 0xd0be <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cf9e:	00 97       	sbiw	r24, 0x00	; 0
    cfa0:	19 f4       	brne	.+6      	; 0xcfa8 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cfa2:	00 e0       	ldi	r16, 0x00	; 0
    cfa4:	10 e0       	ldi	r17, 0x00	; 0
    cfa6:	13 c0       	rjmp	.+38     	; 0xcfce <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cfa8:	bc 01       	movw	r22, r24
    cfaa:	80 e0       	ldi	r24, 0x00	; 0
    cfac:	90 e0       	ldi	r25, 0x00	; 0
    cfae:	24 e0       	ldi	r18, 0x04	; 4
    cfb0:	30 e0       	ldi	r19, 0x00	; 0
    cfb2:	a6 01       	movw	r20, r12
    cfb4:	40 0f       	add	r20, r16
    cfb6:	51 1f       	adc	r21, r17
    cfb8:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <put_utf>
    cfbc:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    cfbe:	00 97       	sbiw	r24, 0x00	; 0
    cfc0:	81 f3       	breq	.-32     	; 0xcfa2 <f_getlabel+0x8e>
						di += wc;
    cfc2:	08 0f       	add	r16, r24
    cfc4:	19 1f       	adc	r17, r25
    cfc6:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cfc8:	8b 30       	cpi	r24, 0x0B	; 11
    cfca:	91 05       	cpc	r25, r1
    cfcc:	d1 f6       	brne	.-76     	; 0xcf82 <f_getlabel+0x6e>
    cfce:	f6 01       	movw	r30, r12
    cfd0:	e0 0f       	add	r30, r16
    cfd2:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cfd4:	10 82       	st	Z, r1
						if (di == 0) break;
    cfd6:	ce 16       	cp	r12, r30
    cfd8:	df 06       	cpc	r13, r31
    cfda:	49 f0       	breq	.+18     	; 0xcfee <f_getlabel+0xda>
					} while (label[--di] == ' ');
    cfdc:	82 91       	ld	r24, -Z
    cfde:	80 32       	cpi	r24, 0x20	; 32
    cfe0:	c9 f3       	breq	.-14     	; 0xcfd4 <f_getlabel+0xc0>
    cfe2:	05 c0       	rjmp	.+10     	; 0xcfee <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cfe4:	84 30       	cpi	r24, 0x04	; 4
    cfe6:	91 05       	cpc	r25, r1
    cfe8:	59 f5       	brne	.+86     	; 0xd040 <f_getlabel+0x12c>
			label[0] = 0;
    cfea:	f6 01       	movw	r30, r12
    cfec:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cfee:	a1 14       	cp	r10, r1
    cff0:	b1 04       	cpc	r11, r1
    cff2:	39 f1       	breq	.+78     	; 0xd042 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cff4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cff6:	98 a9       	ldd	r25, Y+48	; 0x30
    cff8:	fc 01       	movw	r30, r24
    cffa:	41 a1       	ldd	r20, Z+33	; 0x21
    cffc:	52 a1       	ldd	r21, Z+34	; 0x22
    cffe:	63 a1       	ldd	r22, Z+35	; 0x23
    d000:	74 a1       	ldd	r23, Z+36	; 0x24
    d002:	0e 94 99 4a 	call	0x9532	; 0x9532 <move_window>
    d006:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d008:	89 2b       	or	r24, r25
    d00a:	d9 f4       	brne	.+54     	; 0xd042 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d00c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d00e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d010:	80 81       	ld	r24, Z
    d012:	83 30       	cpi	r24, 0x03	; 3
    d014:	29 f0       	breq	.+10     	; 0xd020 <f_getlabel+0x10c>
    d016:	84 30       	cpi	r24, 0x04	; 4
    d018:	31 f0       	breq	.+12     	; 0xd026 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d01a:	87 e2       	ldi	r24, 0x27	; 39
    d01c:	90 e0       	ldi	r25, 0x00	; 0
    d01e:	05 c0       	rjmp	.+10     	; 0xd02a <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d020:	83 e4       	ldi	r24, 0x43	; 67
    d022:	90 e0       	ldi	r25, 0x00	; 0
    d024:	02 c0       	rjmp	.+4      	; 0xd02a <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d026:	84 e6       	ldi	r24, 0x64	; 100
    d028:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d02a:	f5 96       	adiw	r30, 0x35	; 53
    d02c:	8e 0f       	add	r24, r30
    d02e:	9f 1f       	adc	r25, r31
    d030:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <ld_dword>
    d034:	f5 01       	movw	r30, r10
    d036:	60 83       	st	Z, r22
    d038:	71 83       	std	Z+1, r23	; 0x01
    d03a:	82 83       	std	Z+2, r24	; 0x02
    d03c:	93 83       	std	Z+3, r25	; 0x03
    d03e:	01 c0       	rjmp	.+2      	; 0xd042 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d040:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d042:	c7 01       	movw	r24, r14
    d044:	e2 96       	adiw	r28, 0x32	; 50
    d046:	ec e0       	ldi	r30, 0x0C	; 12
    d048:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

0000d04c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d04c:	0c 94 ee 25 	jmp	0x4bdc	; 0x4bdc <safemalloc>
}
    d050:	08 95       	ret

0000d052 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d052:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <safefree>
    d056:	08 95       	ret

0000d058 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d058:	cf 92       	push	r12
    d05a:	df 92       	push	r13
    d05c:	ef 92       	push	r14
    d05e:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d060:	60 38       	cpi	r22, 0x80	; 128
    d062:	71 05       	cpc	r23, r1
    d064:	81 05       	cpc	r24, r1
    d066:	91 05       	cpc	r25, r1
    d068:	10 f4       	brcc	.+4      	; 0xd06e <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d06a:	cb 01       	movw	r24, r22
    d06c:	23 c0       	rjmp	.+70     	; 0xd0b4 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d06e:	61 15       	cp	r22, r1
    d070:	71 05       	cpc	r23, r1
    d072:	21 e0       	ldi	r18, 0x01	; 1
    d074:	82 07       	cpc	r24, r18
    d076:	91 05       	cpc	r25, r1
    d078:	d8 f4       	brcc	.+54     	; 0xd0b0 <ff_uni2oem+0x58>
    d07a:	45 3b       	cpi	r20, 0xB5	; 181
    d07c:	51 40       	sbci	r21, 0x01	; 1
    d07e:	c1 f4       	brne	.+48     	; 0xd0b0 <ff_uni2oem+0x58>
    d080:	e6 ea       	ldi	r30, 0xA6	; 166
    d082:	f7 e0       	ldi	r31, 0x07	; 7
    d084:	20 e0       	ldi	r18, 0x00	; 0
    d086:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d088:	c1 90       	ld	r12, Z+
    d08a:	d1 90       	ld	r13, Z+
    d08c:	e1 2c       	mov	r14, r1
    d08e:	f1 2c       	mov	r15, r1
    d090:	6c 15       	cp	r22, r12
    d092:	7d 05       	cpc	r23, r13
    d094:	8e 05       	cpc	r24, r14
    d096:	9f 05       	cpc	r25, r15
    d098:	29 f0       	breq	.+10     	; 0xd0a4 <ff_uni2oem+0x4c>
    d09a:	2f 5f       	subi	r18, 0xFF	; 255
    d09c:	3f 4f       	sbci	r19, 0xFF	; 255
    d09e:	20 38       	cpi	r18, 0x80	; 128
    d0a0:	31 05       	cpc	r19, r1
    d0a2:	91 f7       	brne	.-28     	; 0xd088 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d0a4:	b9 01       	movw	r22, r18
    d0a6:	60 58       	subi	r22, 0x80	; 128
    d0a8:	7f 4f       	sbci	r23, 0xFF	; 255
    d0aa:	cb 01       	movw	r24, r22
    d0ac:	99 27       	eor	r25, r25
    d0ae:	02 c0       	rjmp	.+4      	; 0xd0b4 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d0b0:	80 e0       	ldi	r24, 0x00	; 0
    d0b2:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d0b4:	ff 90       	pop	r15
    d0b6:	ef 90       	pop	r14
    d0b8:	df 90       	pop	r13
    d0ba:	cf 90       	pop	r12
    d0bc:	08 95       	ret

0000d0be <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d0be:	80 38       	cpi	r24, 0x80	; 128
    d0c0:	91 05       	cpc	r25, r1
    d0c2:	88 f0       	brcs	.+34     	; 0xd0e6 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d0c4:	65 3b       	cpi	r22, 0xB5	; 181
    d0c6:	71 40       	sbci	r23, 0x01	; 1
    d0c8:	61 f4       	brne	.+24     	; 0xd0e2 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d0ca:	8f 3f       	cpi	r24, 0xFF	; 255
    d0cc:	91 05       	cpc	r25, r1
    d0ce:	09 f0       	breq	.+2      	; 0xd0d2 <ff_oem2uni+0x14>
    d0d0:	40 f4       	brcc	.+16     	; 0xd0e2 <ff_oem2uni+0x24>
    d0d2:	88 0f       	add	r24, r24
    d0d4:	99 1f       	adc	r25, r25
    d0d6:	fc 01       	movw	r30, r24
    d0d8:	ea 55       	subi	r30, 0x5A	; 90
    d0da:	f9 4f       	sbci	r31, 0xF9	; 249
    d0dc:	80 81       	ld	r24, Z
    d0de:	91 81       	ldd	r25, Z+1	; 0x01
    d0e0:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d0e2:	80 e0       	ldi	r24, 0x00	; 0
    d0e4:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d0e6:	08 95       	ret

0000d0e8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d0e8:	61 15       	cp	r22, r1
    d0ea:	71 05       	cpc	r23, r1
    d0ec:	21 e0       	ldi	r18, 0x01	; 1
    d0ee:	82 07       	cpc	r24, r18
    d0f0:	91 05       	cpc	r25, r1
    d0f2:	08 f0       	brcs	.+2      	; 0xd0f6 <ff_wtoupper+0xe>
    d0f4:	5a c0       	rjmp	.+180    	; 0xd1aa <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d0f6:	61 15       	cp	r22, r1
    d0f8:	80 e1       	ldi	r24, 0x10	; 16
    d0fa:	78 07       	cpc	r23, r24
    d0fc:	18 f0       	brcs	.+6      	; 0xd104 <ff_wtoupper+0x1c>
    d0fe:	a8 ef       	ldi	r26, 0xF8	; 248
    d100:	b4 e0       	ldi	r27, 0x04	; 4
    d102:	02 c0       	rjmp	.+4      	; 0xd108 <ff_wtoupper+0x20>
    d104:	a4 eb       	ldi	r26, 0xB4	; 180
    d106:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d108:	2d 91       	ld	r18, X+
    d10a:	3c 91       	ld	r19, X
    d10c:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d10e:	21 15       	cp	r18, r1
    d110:	31 05       	cpc	r19, r1
    d112:	09 f4       	brne	.+2      	; 0xd116 <ff_wtoupper+0x2e>
    d114:	48 c0       	rjmp	.+144    	; 0xd1a6 <ff_wtoupper+0xbe>
    d116:	62 17       	cp	r22, r18
    d118:	73 07       	cpc	r23, r19
    d11a:	08 f4       	brcc	.+2      	; 0xd11e <ff_wtoupper+0x36>
    d11c:	44 c0       	rjmp	.+136    	; 0xd1a6 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d11e:	14 96       	adiw	r26, 0x04	; 4
    d120:	fd 01       	movw	r30, r26
    d122:	32 97       	sbiw	r30, 0x02	; 2
    d124:	80 81       	ld	r24, Z
    d126:	91 81       	ldd	r25, Z+1	; 0x01
    d128:	e9 2f       	mov	r30, r25
    d12a:	ff 27       	eor	r31, r31
    d12c:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d12e:	a9 01       	movw	r20, r18
    d130:	48 0f       	add	r20, r24
    d132:	59 1f       	adc	r21, r25
    d134:	64 17       	cp	r22, r20
    d136:	75 07       	cpc	r23, r21
    d138:	70 f5       	brcc	.+92     	; 0xd196 <ff_wtoupper+0xae>
				switch (cmd) {
    d13a:	e9 30       	cpi	r30, 0x09	; 9
    d13c:	f1 05       	cpc	r31, r1
    d13e:	98 f5       	brcc	.+102    	; 0xd1a6 <ff_wtoupper+0xbe>
    d140:	ec 54       	subi	r30, 0x4C	; 76
    d142:	ff 4f       	sbci	r31, 0xFF	; 255
    d144:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d148:	62 1b       	sub	r22, r18
    d14a:	73 0b       	sbc	r23, r19
    d14c:	fb 01       	movw	r30, r22
    d14e:	ee 0f       	add	r30, r30
    d150:	ff 1f       	adc	r31, r31
    d152:	ea 0f       	add	r30, r26
    d154:	fb 1f       	adc	r31, r27
    d156:	60 81       	ld	r22, Z
    d158:	71 81       	ldd	r23, Z+1	; 0x01
    d15a:	25 c0       	rjmp	.+74     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d15c:	cb 01       	movw	r24, r22
    d15e:	82 1b       	sub	r24, r18
    d160:	93 0b       	sbc	r25, r19
    d162:	81 70       	andi	r24, 0x01	; 1
    d164:	99 27       	eor	r25, r25
    d166:	68 1b       	sub	r22, r24
    d168:	79 0b       	sbc	r23, r25
    d16a:	1d c0       	rjmp	.+58     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d16c:	60 51       	subi	r22, 0x10	; 16
    d16e:	71 09       	sbc	r23, r1
    d170:	1a c0       	rjmp	.+52     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d172:	60 52       	subi	r22, 0x20	; 32
    d174:	71 09       	sbc	r23, r1
    d176:	17 c0       	rjmp	.+46     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d178:	60 53       	subi	r22, 0x30	; 48
    d17a:	71 09       	sbc	r23, r1
    d17c:	14 c0       	rjmp	.+40     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d17e:	6a 51       	subi	r22, 0x1A	; 26
    d180:	71 09       	sbc	r23, r1
    d182:	11 c0       	rjmp	.+34     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d184:	68 5f       	subi	r22, 0xF8	; 248
    d186:	7f 4f       	sbci	r23, 0xFF	; 255
    d188:	0e c0       	rjmp	.+28     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d18a:	60 55       	subi	r22, 0x50	; 80
    d18c:	71 09       	sbc	r23, r1
    d18e:	0b c0       	rjmp	.+22     	; 0xd1a6 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d190:	60 56       	subi	r22, 0x60	; 96
    d192:	7c 41       	sbci	r23, 0x1C	; 28
    d194:	08 c0       	rjmp	.+16     	; 0xd1a6 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d196:	ef 2b       	or	r30, r31
    d198:	09 f0       	breq	.+2      	; 0xd19c <ff_wtoupper+0xb4>
    d19a:	b6 cf       	rjmp	.-148    	; 0xd108 <ff_wtoupper+0x20>
    d19c:	88 0f       	add	r24, r24
    d19e:	99 1f       	adc	r25, r25
    d1a0:	a8 0f       	add	r26, r24
    d1a2:	b9 1f       	adc	r27, r25
    d1a4:	b1 cf       	rjmp	.-158    	; 0xd108 <ff_wtoupper+0x20>
		}
		uni = uc;
    d1a6:	80 e0       	ldi	r24, 0x00	; 0
    d1a8:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d1aa:	08 95       	ret

0000d1ac <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d1ac:	81 11       	cpse	r24, r1
    d1ae:	02 c0       	rjmp	.+4      	; 0xd1b4 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d1b0:	a1 c1       	rjmp	.+834    	; 0xd4f4 <mmc_disk_status>
    d1b2:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d1b4:	81 e0       	ldi	r24, 0x01	; 1
}
    d1b6:	08 95       	ret

0000d1b8 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d1b8:	81 11       	cpse	r24, r1
    d1ba:	02 c0       	rjmp	.+4      	; 0xd1c0 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d1bc:	f6 c0       	rjmp	.+492    	; 0xd3aa <mmc_disk_initialize>
    d1be:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d1c0:	81 e0       	ldi	r24, 0x01	; 1
}
    d1c2:	08 95       	ret

0000d1c4 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d1c4:	0f 93       	push	r16
    d1c6:	1f 93       	push	r17
    d1c8:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1ca:	81 11       	cpse	r24, r1
    d1cc:	06 c0       	rjmp	.+12     	; 0xd1da <disk_read+0x16>
    d1ce:	ba 01       	movw	r22, r20
    d1d0:	a9 01       	movw	r20, r18
    d1d2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d1d4:	98 01       	movw	r18, r16
    d1d6:	91 d1       	rcall	.+802    	; 0xd4fa <mmc_disk_read>
    d1d8:	02 c0       	rjmp	.+4      	; 0xd1de <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d1da:	84 e0       	ldi	r24, 0x04	; 4
    d1dc:	90 e0       	ldi	r25, 0x00	; 0
}
    d1de:	1f 91       	pop	r17
    d1e0:	0f 91       	pop	r16
    d1e2:	08 95       	ret

0000d1e4 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d1e4:	0f 93       	push	r16
    d1e6:	1f 93       	push	r17
    d1e8:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1ea:	81 11       	cpse	r24, r1
    d1ec:	06 c0       	rjmp	.+12     	; 0xd1fa <disk_write+0x16>
    d1ee:	ba 01       	movw	r22, r20
    d1f0:	a9 01       	movw	r20, r18
    d1f2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d1f4:	98 01       	movw	r18, r16
    d1f6:	e2 d1       	rcall	.+964    	; 0xd5bc <mmc_disk_write>
    d1f8:	02 c0       	rjmp	.+4      	; 0xd1fe <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d1fa:	84 e0       	ldi	r24, 0x04	; 4
    d1fc:	90 e0       	ldi	r25, 0x00	; 0
}
    d1fe:	1f 91       	pop	r17
    d200:	0f 91       	pop	r16
    d202:	08 95       	ret

0000d204 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d204:	96 2f       	mov	r25, r22
    switch (pdrv)
    d206:	81 11       	cpse	r24, r1
    d208:	04 c0       	rjmp	.+8      	; 0xd212 <disk_ioctl+0xe>
    d20a:	ba 01       	movw	r22, r20
    d20c:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d20e:	4a c2       	rjmp	.+1172   	; 0xd6a4 <mmc_disk_ioctl>
    d210:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d212:	84 e0       	ldi	r24, 0x04	; 4
    d214:	90 e0       	ldi	r25, 0x00	; 0
}
    d216:	08 95       	ret

0000d218 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d218:	f9 c4       	rjmp	.+2546   	; 0xdc0c <mmc_spi_TXRX>
    return dat;
}
    d21a:	08 95       	ret

0000d21c <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d21c:	ce d4       	rcall	.+2460   	; 0xdbba <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d21e:	8f ef       	ldi	r24, 0xFF	; 255
    d220:	fb df       	rcall	.-10     	; 0xd218 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d222:	8f ef       	ldi	r24, 0xFF	; 255
    d224:	f9 cf       	rjmp	.-14     	; 0xd218 <xchg_spi>
    d226:	08 95       	ret

0000d228 <rcvr_datablock>:
    d228:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d22a:	1f 93       	push	r17
    d22c:	cf 93       	push	r28
    d22e:	df 93       	push	r29
    d230:	ec 01       	movw	r28, r24
    d232:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d234:	88 ee       	ldi	r24, 0xE8	; 232
    d236:	93 e0       	ldi	r25, 0x03	; 3
    d238:	ec d4       	rcall	.+2520   	; 0xdc12 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d23a:	8f ef       	ldi	r24, 0xFF	; 255
    d23c:	e7 d4       	rcall	.+2510   	; 0xdc0c <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d23e:	8f 3f       	cpi	r24, 0xFF	; 255
    d240:	31 f4       	brne	.+12     	; 0xd24e <rcvr_datablock+0x26>
    d242:	ee d4       	rcall	.+2524   	; 0xdc20 <mmc_test_timeout>
    d244:	89 2b       	or	r24, r25
    d246:	c9 f3       	breq	.-14     	; 0xd23a <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d248:	80 e0       	ldi	r24, 0x00	; 0
    d24a:	90 e0       	ldi	r25, 0x00	; 0
    d24c:	0b c0       	rjmp	.+22     	; 0xd264 <rcvr_datablock+0x3c>
    d24e:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d250:	d9 f7       	brne	.-10     	; 0xd248 <rcvr_datablock+0x20>
    d252:	b8 01       	movw	r22, r16
    d254:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d256:	d7 d4       	rcall	.+2478   	; 0xdc06 <mmc_spi_RX_buffer>
    d258:	8f ef       	ldi	r24, 0xFF	; 255
    d25a:	de df       	rcall	.-68     	; 0xd218 <xchg_spi>
    xchg_spi(0xFF);
    d25c:	8f ef       	ldi	r24, 0xFF	; 255
    d25e:	dc df       	rcall	.-72     	; 0xd218 <xchg_spi>
    d260:	81 e0       	ldi	r24, 0x01	; 1
    d262:	90 e0       	ldi	r25, 0x00	; 0
    d264:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d266:	cf 91       	pop	r28
    d268:	1f 91       	pop	r17
    d26a:	0f 91       	pop	r16
    d26c:	08 95       	ret

0000d26e <wait_ready>:
    d26e:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d270:	d0 d4       	rcall	.+2464   	; 0xdc12 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d272:	8f ef       	ldi	r24, 0xFF	; 255
    d274:	cb d4       	rcall	.+2454   	; 0xdc0c <mmc_spi_TXRX>
    d276:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d278:	8f 3f       	cpi	r24, 0xFF	; 255
    d27a:	19 f0       	breq	.+6      	; 0xd282 <wait_ready+0x14>
    d27c:	d1 d4       	rcall	.+2466   	; 0xdc20 <mmc_test_timeout>
    d27e:	89 2b       	or	r24, r25
    d280:	c1 f3       	breq	.-16     	; 0xd272 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d282:	81 e0       	ldi	r24, 0x01	; 1
    d284:	90 e0       	ldi	r25, 0x00	; 0
    d286:	cf 3f       	cpi	r28, 0xFF	; 255
    d288:	11 f0       	breq	.+4      	; 0xd28e <wait_ready+0x20>
    d28a:	80 e0       	ldi	r24, 0x00	; 0
    d28c:	90 e0       	ldi	r25, 0x00	; 0
}
    d28e:	cf 91       	pop	r28
    d290:	08 95       	ret

0000d292 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d292:	cf 93       	push	r28
    d294:	df 93       	push	r29
    d296:	00 d0       	rcall	.+0      	; 0xd298 <select+0x6>
    d298:	1f 92       	push	r1
    CS_LOW();
    d29a:	82 d4       	rcall	.+2308   	; 0xdba0 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d29c:	8f ef       	ldi	r24, 0xFF	; 255
    d29e:	bc df       	rcall	.-136    	; 0xd218 <xchg_spi>

    if (wait_ready(1000))
    d2a0:	88 ee       	ldi	r24, 0xE8	; 232
    d2a2:	93 e0       	ldi	r25, 0x03	; 3
    d2a4:	e4 df       	rcall	.-56     	; 0xd26e <wait_ready>
    d2a6:	ec 01       	movw	r28, r24
    d2a8:	89 2b       	or	r24, r25
    d2aa:	61 f4       	brne	.+24     	; 0xd2c4 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d2ac:	89 e6       	ldi	r24, 0x69	; 105
    d2ae:	97 e0       	ldi	r25, 0x07	; 7
    d2b0:	a0 e0       	ldi	r26, 0x00	; 0
    d2b2:	ed b7       	in	r30, 0x3d	; 61
    d2b4:	fe b7       	in	r31, 0x3e	; 62
    d2b6:	81 83       	std	Z+1, r24	; 0x01
    d2b8:	92 83       	std	Z+2, r25	; 0x02
    d2ba:	a3 83       	std	Z+3, r26	; 0x03
    d2bc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    deselect();
    d2c0:	ad df       	rcall	.-166    	; 0xd21c <deselect>
    d2c2:	02 c0       	rjmp	.+4      	; 0xd2c8 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d2c4:	c1 e0       	ldi	r28, 0x01	; 1
    d2c6:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d2c8:	ce 01       	movw	r24, r28
    d2ca:	cd b7       	in	r28, 0x3d	; 61
    d2cc:	de b7       	in	r29, 0x3e	; 62
    d2ce:	23 96       	adiw	r28, 0x03	; 3
    d2d0:	e2 e0       	ldi	r30, 0x02	; 2
    d2d2:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000d2d6 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d2d6:	ff 92       	push	r15
    d2d8:	0f 93       	push	r16
    d2da:	1f 93       	push	r17
    d2dc:	cf 93       	push	r28
    d2de:	df 93       	push	r29
    d2e0:	c8 2f       	mov	r28, r24
    d2e2:	d4 2f       	mov	r29, r20
    d2e4:	15 2f       	mov	r17, r21
    d2e6:	06 2f       	mov	r16, r22
    d2e8:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d2ea:	87 ff       	sbrs	r24, 7
    d2ec:	08 c0       	rjmp	.+16     	; 0xd2fe <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d2ee:	40 e0       	ldi	r20, 0x00	; 0
    d2f0:	50 e0       	ldi	r21, 0x00	; 0
    d2f2:	ba 01       	movw	r22, r20
    d2f4:	87 e3       	ldi	r24, 0x37	; 55
    d2f6:	ef df       	rcall	.-34     	; 0xd2d6 <send_cmd>
        if (res > 1) return res;
    d2f8:	82 30       	cpi	r24, 0x02	; 2
    d2fa:	58 f5       	brcc	.+86     	; 0xd352 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d2fc:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d2fe:	cc 30       	cpi	r28, 0x0C	; 12
    d300:	71 f4       	brne	.+28     	; 0xd31e <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d302:	8c 2f       	mov	r24, r28
    d304:	80 64       	ori	r24, 0x40	; 64
    d306:	88 df       	rcall	.-240    	; 0xd218 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d308:	8f 2d       	mov	r24, r15
    d30a:	86 df       	rcall	.-244    	; 0xd218 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d30c:	80 2f       	mov	r24, r16
    d30e:	84 df       	rcall	.-248    	; 0xd218 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d310:	81 2f       	mov	r24, r17
    d312:	82 df       	rcall	.-252    	; 0xd218 <xchg_spi>
    d314:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d316:	80 df       	rcall	.-256    	; 0xd218 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d318:	cc 23       	and	r28, r28
    d31a:	c9 f0       	breq	.+50     	; 0xd34e <send_cmd+0x78>
    d31c:	06 c0       	rjmp	.+12     	; 0xd32a <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d31e:	7e df       	rcall	.-260    	; 0xd21c <deselect>
    d320:	b8 df       	rcall	.-144    	; 0xd292 <select>
        if (!select()) return 0xFF;
    d322:	89 2b       	or	r24, r25
    d324:	71 f7       	brne	.-36     	; 0xd302 <send_cmd+0x2c>
    d326:	8f ef       	ldi	r24, 0xFF	; 255
    d328:	14 c0       	rjmp	.+40     	; 0xd352 <send_cmd+0x7c>
    d32a:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d32c:	11 f4       	brne	.+4      	; 0xd332 <send_cmd+0x5c>
    d32e:	87 e8       	ldi	r24, 0x87	; 135
    d330:	01 c0       	rjmp	.+2      	; 0xd334 <send_cmd+0x5e>

    xchg_spi(n);
    d332:	81 e0       	ldi	r24, 0x01	; 1
    d334:	71 df       	rcall	.-286    	; 0xd218 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d336:	cc 30       	cpi	r28, 0x0C	; 12
    d338:	11 f4       	brne	.+4      	; 0xd33e <send_cmd+0x68>
    d33a:	8f ef       	ldi	r24, 0xFF	; 255
    d33c:	6d df       	rcall	.-294    	; 0xd218 <xchg_spi>
    d33e:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d340:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d342:	64 d4       	rcall	.+2248   	; 0xdc0c <mmc_spi_TXRX>
    d344:	87 ff       	sbrs	r24, 7
    d346:	05 c0       	rjmp	.+10     	; 0xd352 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d348:	c1 50       	subi	r28, 0x01	; 1
    d34a:	d1 f7       	brne	.-12     	; 0xd340 <send_cmd+0x6a>
    d34c:	02 c0       	rjmp	.+4      	; 0xd352 <send_cmd+0x7c>
    d34e:	85 e9       	ldi	r24, 0x95	; 149
    d350:	f5 cf       	rjmp	.-22     	; 0xd33c <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d352:	cd b7       	in	r28, 0x3d	; 61
    d354:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d356:	e5 e0       	ldi	r30, 0x05	; 5
    d358:	0c 94 c4 e3 	jmp	0x1c788	; 0x1c788 <__epilogue_restores__+0x1a>

0000d35c <xmit_datablock>:
    d35c:	0f 93       	push	r16
    d35e:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d360:	cf 93       	push	r28
    d362:	8c 01       	movw	r16, r24
    d364:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d366:	88 ee       	ldi	r24, 0xE8	; 232
    d368:	93 e0       	ldi	r25, 0x03	; 3
    d36a:	81 df       	rcall	.-254    	; 0xd26e <wait_ready>
    d36c:	00 97       	sbiw	r24, 0x00	; 0
    d36e:	c9 f0       	breq	.+50     	; 0xd3a2 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d370:	8c 2f       	mov	r24, r28
    d372:	52 df       	rcall	.-348    	; 0xd218 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d374:	cd 3f       	cpi	r28, 0xFD	; 253
    d376:	99 f0       	breq	.+38     	; 0xd39e <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d378:	60 e0       	ldi	r22, 0x00	; 0
    d37a:	72 e0       	ldi	r23, 0x02	; 2
    d37c:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d37e:	40 d4       	rcall	.+2176   	; 0xdc00 <mmc_spi_TX_buffer>
    d380:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d382:	4a df       	rcall	.-364    	; 0xd218 <xchg_spi>
    d384:	8f ef       	ldi	r24, 0xFF	; 255
    d386:	48 df       	rcall	.-368    	; 0xd218 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d388:	8f ef       	ldi	r24, 0xFF	; 255
    d38a:	40 d4       	rcall	.+2176   	; 0xdc0c <mmc_spi_TXRX>
    d38c:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d38e:	31 e0       	ldi	r19, 0x01	; 1
    d390:	20 e0       	ldi	r18, 0x00	; 0
    d392:	85 30       	cpi	r24, 0x05	; 5
    d394:	09 f0       	breq	.+2      	; 0xd398 <xmit_datablock+0x3c>
    d396:	30 e0       	ldi	r19, 0x00	; 0
    d398:	83 2f       	mov	r24, r19
    d39a:	92 2f       	mov	r25, r18
    d39c:	02 c0       	rjmp	.+4      	; 0xd3a2 <xmit_datablock+0x46>
    d39e:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d3a0:	90 e0       	ldi	r25, 0x00	; 0
    d3a2:	cf 91       	pop	r28
}
    d3a4:	1f 91       	pop	r17
    d3a6:	0f 91       	pop	r16
    d3a8:	08 95       	ret

0000d3aa <mmc_disk_initialize>:
    d3aa:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d3ac:	b0 e0       	ldi	r27, 0x00	; 0
    d3ae:	eb ed       	ldi	r30, 0xDB	; 219
    d3b0:	f9 e6       	ldi	r31, 0x69	; 105
    d3b2:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d3b6:	59 d4       	rcall	.+2226   	; 0xdc6a <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d3b8:	64 e6       	ldi	r22, 0x64	; 100
    d3ba:	70 e0       	ldi	r23, 0x00	; 0
    d3bc:	80 e0       	ldi	r24, 0x00	; 0
    d3be:	90 e0       	ldi	r25, 0x00	; 0
    d3c0:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d3c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3c8:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d3ca:	8e c0       	rjmp	.+284    	; 0xd4e8 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d3cc:	4d d4       	rcall	.+2202   	; 0xdc68 <mmc_power_on>
    d3ce:	f9 d3       	rcall	.+2034   	; 0xdbc2 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d3d0:	1a e0       	ldi	r17, 0x0A	; 10
    d3d2:	8f ef       	ldi	r24, 0xFF	; 255
    d3d4:	21 df       	rcall	.-446    	; 0xd218 <xchg_spi>
    d3d6:	11 50       	subi	r17, 0x01	; 1
    d3d8:	e1 f7       	brne	.-8      	; 0xd3d2 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d3da:	40 e0       	ldi	r20, 0x00	; 0
    d3dc:	50 e0       	ldi	r21, 0x00	; 0
    d3de:	ba 01       	movw	r22, r20
    d3e0:	80 e0       	ldi	r24, 0x00	; 0
    d3e2:	79 df       	rcall	.-270    	; 0xd2d6 <send_cmd>
    d3e4:	81 30       	cpi	r24, 0x01	; 1
    d3e6:	09 f0       	breq	.+2      	; 0xd3ea <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d3e8:	6f c0       	rjmp	.+222    	; 0xd4c8 <mmc_disk_initialize+0x11e>
    d3ea:	80 ed       	ldi	r24, 0xD0	; 208
    d3ec:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d3ee:	11 d4       	rcall	.+2082   	; 0xdc12 <mmc_set_ms_timeout>
    d3f0:	4a ea       	ldi	r20, 0xAA	; 170
    d3f2:	51 e0       	ldi	r21, 0x01	; 1
    d3f4:	60 e0       	ldi	r22, 0x00	; 0
    d3f6:	70 e0       	ldi	r23, 0x00	; 0
    d3f8:	88 e0       	ldi	r24, 0x08	; 8
    d3fa:	6d df       	rcall	.-294    	; 0xd2d6 <send_cmd>
    d3fc:	81 30       	cpi	r24, 0x01	; 1
    d3fe:	09 f0       	breq	.+2      	; 0xd402 <mmc_disk_initialize+0x58>
    d400:	3d c0       	rjmp	.+122    	; 0xd47c <mmc_disk_initialize+0xd2>
    d402:	8e 01       	movw	r16, r28
    d404:	0f 5f       	subi	r16, 0xFF	; 255
    d406:	1f 4f       	sbci	r17, 0xFF	; 255
    d408:	6e 01       	movw	r12, r28
    d40a:	85 e0       	ldi	r24, 0x05	; 5
    d40c:	c8 0e       	add	r12, r24
    d40e:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d410:	78 01       	movw	r14, r16
    d412:	8f ef       	ldi	r24, 0xFF	; 255
    d414:	fb d3       	rcall	.+2038   	; 0xdc0c <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d416:	f7 01       	movw	r30, r14
    d418:	81 93       	st	Z+, r24
    d41a:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d41c:	ce 16       	cp	r12, r30
    d41e:	df 06       	cpc	r13, r31
    d420:	c1 f7       	brne	.-16     	; 0xd412 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d422:	8b 81       	ldd	r24, Y+3	; 0x03
    d424:	81 30       	cpi	r24, 0x01	; 1
    d426:	09 f0       	breq	.+2      	; 0xd42a <mmc_disk_initialize+0x80>
    d428:	4f c0       	rjmp	.+158    	; 0xd4c8 <mmc_disk_initialize+0x11e>
    d42a:	8c 81       	ldd	r24, Y+4	; 0x04
    d42c:	8a 3a       	cpi	r24, 0xAA	; 170
    d42e:	09 f0       	breq	.+2      	; 0xd432 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d430:	4b c0       	rjmp	.+150    	; 0xd4c8 <mmc_disk_initialize+0x11e>
    d432:	f6 d3       	rcall	.+2028   	; 0xdc20 <mmc_test_timeout>
    d434:	89 2b       	or	r24, r25
    d436:	29 f0       	breq	.+10     	; 0xd442 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d438:	f3 d3       	rcall	.+2022   	; 0xdc20 <mmc_test_timeout>
    d43a:	89 2b       	or	r24, r25
    d43c:	09 f0       	breq	.+2      	; 0xd440 <mmc_disk_initialize+0x96>
    d43e:	44 c0       	rjmp	.+136    	; 0xd4c8 <mmc_disk_initialize+0x11e>
    d440:	09 c0       	rjmp	.+18     	; 0xd454 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d442:	40 e0       	ldi	r20, 0x00	; 0
    d444:	50 e0       	ldi	r21, 0x00	; 0
    d446:	60 e0       	ldi	r22, 0x00	; 0
    d448:	70 e4       	ldi	r23, 0x40	; 64
    d44a:	89 ea       	ldi	r24, 0xA9	; 169
    d44c:	44 df       	rcall	.-376    	; 0xd2d6 <send_cmd>
    d44e:	81 11       	cpse	r24, r1
    d450:	f0 cf       	rjmp	.-32     	; 0xd432 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d452:	f2 cf       	rjmp	.-28     	; 0xd438 <mmc_disk_initialize+0x8e>
    d454:	40 e0       	ldi	r20, 0x00	; 0
    d456:	50 e0       	ldi	r21, 0x00	; 0
    d458:	ba 01       	movw	r22, r20
    d45a:	8a e3       	ldi	r24, 0x3A	; 58
    d45c:	3c df       	rcall	.-392    	; 0xd2d6 <send_cmd>
    d45e:	81 11       	cpse	r24, r1
    d460:	33 c0       	rjmp	.+102    	; 0xd4c8 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d462:	8f ef       	ldi	r24, 0xFF	; 255
    d464:	d3 d3       	rcall	.+1958   	; 0xdc0c <mmc_spi_TXRX>
    d466:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d468:	81 93       	st	Z+, r24
    d46a:	8f 01       	movw	r16, r30
    d46c:	ce 16       	cp	r12, r30
    d46e:	df 06       	cpc	r13, r31
    d470:	c1 f7       	brne	.-16     	; 0xd462 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d472:	89 81       	ldd	r24, Y+1	; 0x01
    d474:	86 fd       	sbrc	r24, 6
    d476:	2a c0       	rjmp	.+84     	; 0xd4cc <mmc_disk_initialize+0x122>
    d478:	14 e0       	ldi	r17, 0x04	; 4
    d47a:	29 c0       	rjmp	.+82     	; 0xd4ce <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d47c:	80 ed       	ldi	r24, 0xD0	; 208
    d47e:	97 e0       	ldi	r25, 0x07	; 7
    d480:	c8 d3       	rcall	.+1936   	; 0xdc12 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d482:	40 e0       	ldi	r20, 0x00	; 0
    d484:	50 e0       	ldi	r21, 0x00	; 0
    d486:	ba 01       	movw	r22, r20
    d488:	89 ea       	ldi	r24, 0xA9	; 169
    d48a:	25 df       	rcall	.-438    	; 0xd2d6 <send_cmd>
    d48c:	82 30       	cpi	r24, 0x02	; 2
    d48e:	18 f0       	brcs	.+6      	; 0xd496 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d490:	11 e0       	ldi	r17, 0x01	; 1
    d492:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d494:	02 c0       	rjmp	.+4      	; 0xd49a <mmc_disk_initialize+0xf0>
    d496:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d498:	09 ea       	ldi	r16, 0xA9	; 169
    d49a:	c2 d3       	rcall	.+1924   	; 0xdc20 <mmc_test_timeout>
    d49c:	89 2b       	or	r24, r25
    d49e:	21 f0       	breq	.+8      	; 0xd4a8 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d4a0:	bf d3       	rcall	.+1918   	; 0xdc20 <mmc_test_timeout>
    d4a2:	89 2b       	or	r24, r25
    d4a4:	89 f4       	brne	.+34     	; 0xd4c8 <mmc_disk_initialize+0x11e>
    d4a6:	08 c0       	rjmp	.+16     	; 0xd4b8 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d4a8:	40 e0       	ldi	r20, 0x00	; 0
    d4aa:	50 e0       	ldi	r21, 0x00	; 0
    d4ac:	ba 01       	movw	r22, r20
    d4ae:	80 2f       	mov	r24, r16
    d4b0:	12 df       	rcall	.-476    	; 0xd2d6 <send_cmd>
    d4b2:	81 11       	cpse	r24, r1
    d4b4:	f2 cf       	rjmp	.-28     	; 0xd49a <mmc_disk_initialize+0xf0>
    d4b6:	f4 cf       	rjmp	.-24     	; 0xd4a0 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d4b8:	40 e0       	ldi	r20, 0x00	; 0
    d4ba:	52 e0       	ldi	r21, 0x02	; 2
    d4bc:	60 e0       	ldi	r22, 0x00	; 0
    d4be:	70 e0       	ldi	r23, 0x00	; 0
    d4c0:	80 e1       	ldi	r24, 0x10	; 16
    d4c2:	09 df       	rcall	.-494    	; 0xd2d6 <send_cmd>
    d4c4:	88 23       	and	r24, r24
                ty = 0;
    d4c6:	19 f0       	breq	.+6      	; 0xd4ce <mmc_disk_initialize+0x124>
    d4c8:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d4ca:	01 c0       	rjmp	.+2      	; 0xd4ce <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d4cc:	1c e0       	ldi	r17, 0x0C	; 12
    d4ce:	10 93 2b 18 	sts	0x182B, r17	; 0x80182b <CardType>
    deselect();
    d4d2:	a4 de       	rcall	.-696    	; 0xd21c <deselect>

    if (ty)                                       /* Initialization succeded */
    d4d4:	11 23       	and	r17, r17
    d4d6:	39 f0       	breq	.+14     	; 0xd4e6 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d4d8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4dc:	8e 7f       	andi	r24, 0xFE	; 254
    d4de:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d4e2:	81 d3       	rcall	.+1794   	; 0xdbe6 <mmc_fast>
    d4e4:	01 c0       	rjmp	.+2      	; 0xd4e8 <mmc_disk_initialize+0x13e>
    d4e6:	c1 d3       	rcall	.+1922   	; 0xdc6a <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d4e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d4ec:	24 96       	adiw	r28, 0x04	; 4
    d4ee:	e8 e0       	ldi	r30, 0x08	; 8
}
    d4f0:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000d4f4 <mmc_disk_status>:
    d4f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d4f8:	08 95       	ret

0000d4fa <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d4fa:	8f 92       	push	r8
    d4fc:	9f 92       	push	r9
    d4fe:	af 92       	push	r10
    d500:	bf 92       	push	r11
    d502:	ef 92       	push	r14
    d504:	ff 92       	push	r15
    d506:	1f 93       	push	r17
    d508:	cf 93       	push	r28
    d50a:	df 93       	push	r29
    d50c:	7c 01       	movw	r14, r24
    d50e:	4a 01       	movw	r8, r20
    d510:	5b 01       	movw	r10, r22
    d512:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d514:	20 97       	sbiw	r28, 0x00	; 0
    d516:	19 f4       	brne	.+6      	; 0xd51e <mmc_disk_read+0x24>
    {
        deselect();
    d518:	81 de       	rcall	.-766    	; 0xd21c <deselect>
        return RES_PARERR;
    d51a:	84 e0       	ldi	r24, 0x04	; 4
    d51c:	0d c0       	rjmp	.+26     	; 0xd538 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d51e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d522:	88 23       	and	r24, r24
    d524:	19 f0       	breq	.+6      	; 0xd52c <mmc_disk_read+0x32>
		set_error(1);
    d526:	81 e0       	ldi	r24, 0x01	; 1
    d528:	0e 94 12 25 	call	0x4a24	; 0x4a24 <set_error>

    if (Stat & STA_NOINIT)
    d52c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d530:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d532:	04 c0       	rjmp	.+8      	; 0xd53c <mmc_disk_read+0x42>
    d534:	73 de       	rcall	.-794    	; 0xd21c <deselect>
        return RES_NOTRDY;
    d536:	83 e0       	ldi	r24, 0x03	; 3
    d538:	90 e0       	ldi	r25, 0x00	; 0
    d53a:	36 c0       	rjmp	.+108    	; 0xd5a8 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d53c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d540:	81 fd       	sbrc	r24, 1
    d542:	f8 cf       	rjmp	.-16     	; 0xd534 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d544:	46 9a       	sbi	0x08, 6	; 8
    d546:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d548:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d54c:	83 fd       	sbrc	r24, 3
    d54e:	07 c0       	rjmp	.+14     	; 0xd55e <mmc_disk_read+0x64>
    d550:	89 e0       	ldi	r24, 0x09	; 9
    d552:	88 0c       	add	r8, r8
    d554:	99 1c       	adc	r9, r9
    d556:	aa 1c       	adc	r10, r10
    d558:	bb 1c       	adc	r11, r11
    d55a:	8a 95       	dec	r24
    d55c:	d1 f7       	brne	.-12     	; 0xd552 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d55e:	c2 30       	cpi	r28, 0x02	; 2
    d560:	d1 05       	cpc	r29, r1
    d562:	10 f4       	brcc	.+4      	; 0xd568 <mmc_disk_read+0x6e>
    d564:	11 e1       	ldi	r17, 0x11	; 17
    d566:	01 c0       	rjmp	.+2      	; 0xd56a <mmc_disk_read+0x70>
    d568:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d56a:	b5 01       	movw	r22, r10
    d56c:	a4 01       	movw	r20, r8
    d56e:	81 2f       	mov	r24, r17
    d570:	b2 de       	rcall	.-668    	; 0xd2d6 <send_cmd>
    d572:	81 11       	cpse	r24, r1
    d574:	11 c0       	rjmp	.+34     	; 0xd598 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d576:	60 e0       	ldi	r22, 0x00	; 0
    d578:	72 e0       	ldi	r23, 0x02	; 2
    d57a:	c7 01       	movw	r24, r14
    d57c:	55 de       	rcall	.-854    	; 0xd228 <rcvr_datablock>
    d57e:	89 2b       	or	r24, r25
    d580:	21 f0       	breq	.+8      	; 0xd58a <mmc_disk_read+0x90>
                break;
            buff += 512;
    d582:	8e ef       	ldi	r24, 0xFE	; 254
    d584:	f8 1a       	sub	r15, r24
        } while (--count);
    d586:	21 97       	sbiw	r28, 0x01	; 1
    d588:	b1 f7       	brne	.-20     	; 0xd576 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d58a:	12 31       	cpi	r17, 0x12	; 18
    d58c:	29 f4       	brne	.+10     	; 0xd598 <mmc_disk_read+0x9e>
    d58e:	40 e0       	ldi	r20, 0x00	; 0
    d590:	50 e0       	ldi	r21, 0x00	; 0
    d592:	ba 01       	movw	r22, r20
    d594:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d596:	9f de       	rcall	.-706    	; 0xd2d6 <send_cmd>
    d598:	41 de       	rcall	.-894    	; 0xd21c <deselect>
    GPIO_PIN_LOW(LED1);
    d59a:	46 98       	cbi	0x08, 6	; 8
    d59c:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d59e:	81 e0       	ldi	r24, 0x01	; 1
    d5a0:	90 e0       	ldi	r25, 0x00	; 0
    d5a2:	cd 2b       	or	r28, r29
    d5a4:	09 f4       	brne	.+2      	; 0xd5a8 <mmc_disk_read+0xae>
    d5a6:	80 e0       	ldi	r24, 0x00	; 0
}
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	ff 90       	pop	r15
    d5b0:	ef 90       	pop	r14
    d5b2:	bf 90       	pop	r11
    d5b4:	af 90       	pop	r10
    d5b6:	9f 90       	pop	r9
    d5b8:	8f 90       	pop	r8
    d5ba:	08 95       	ret

0000d5bc <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d5bc:	a0 e0       	ldi	r26, 0x00	; 0
    d5be:	b0 e0       	ldi	r27, 0x00	; 0
    d5c0:	e4 ee       	ldi	r30, 0xE4	; 228
    d5c2:	fa e6       	ldi	r31, 0x6A	; 106
    d5c4:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    d5c8:	8c 01       	movw	r16, r24
    d5ca:	6a 01       	movw	r12, r20
    d5cc:	7b 01       	movw	r14, r22
    d5ce:	e9 01       	movw	r28, r18
    if (!count)
    d5d0:	20 97       	sbiw	r28, 0x00	; 0
    d5d2:	19 f4       	brne	.+6      	; 0xd5da <mmc_disk_write+0x1e>
    {
        deselect();
    d5d4:	23 de       	rcall	.-954    	; 0xd21c <deselect>
        return RES_PARERR;
    d5d6:	84 e0       	ldi	r24, 0x04	; 4
    d5d8:	18 c0       	rjmp	.+48     	; 0xd60a <mmc_disk_write+0x4e>
    }

	if( Stat )
    d5da:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5de:	88 23       	and	r24, r24
    d5e0:	19 f0       	breq	.+6      	; 0xd5e8 <mmc_disk_write+0x2c>
		set_error(1);
    d5e2:	81 e0       	ldi	r24, 0x01	; 1
    d5e4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <set_error>

    if (Stat & STA_NOINIT)
    d5e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5ec:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d5ee:	03 c0       	rjmp	.+6      	; 0xd5f6 <mmc_disk_write+0x3a>
    d5f0:	15 de       	rcall	.-982    	; 0xd21c <deselect>
        return RES_NOTRDY;
    d5f2:	83 e0       	ldi	r24, 0x03	; 3
    d5f4:	0a c0       	rjmp	.+20     	; 0xd60a <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d5f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5fa:	81 fd       	sbrc	r24, 1
    d5fc:	f9 cf       	rjmp	.-14     	; 0xd5f0 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d5fe:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d602:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d604:	04 c0       	rjmp	.+8      	; 0xd60e <mmc_disk_write+0x52>
    d606:	0a de       	rcall	.-1004   	; 0xd21c <deselect>
        return RES_WRPRT;
    d608:	82 e0       	ldi	r24, 0x02	; 2
    d60a:	90 e0       	ldi	r25, 0x00	; 0
    d60c:	46 c0       	rjmp	.+140    	; 0xd69a <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d60e:	46 9a       	sbi	0x08, 6	; 8
    d610:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d612:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d616:	83 fd       	sbrc	r24, 3
    d618:	07 c0       	rjmp	.+14     	; 0xd628 <mmc_disk_write+0x6c>
    d61a:	99 e0       	ldi	r25, 0x09	; 9
    d61c:	cc 0c       	add	r12, r12
    d61e:	dd 1c       	adc	r13, r13
    d620:	ee 1c       	adc	r14, r14
    d622:	ff 1c       	adc	r15, r15
    d624:	9a 95       	dec	r25
    d626:	d1 f7       	brne	.-12     	; 0xd61c <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d628:	c1 30       	cpi	r28, 0x01	; 1
    d62a:	d1 05       	cpc	r29, r1
    d62c:	89 f4       	brne	.+34     	; 0xd650 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d62e:	b7 01       	movw	r22, r14
    d630:	a6 01       	movw	r20, r12
    d632:	88 e1       	ldi	r24, 0x18	; 24
    d634:	50 de       	rcall	.-864    	; 0xd2d6 <send_cmd>
    d636:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d638:	26 c0       	rjmp	.+76     	; 0xd686 <mmc_disk_write+0xca>
    d63a:	6e ef       	ldi	r22, 0xFE	; 254
    d63c:	c8 01       	movw	r24, r16
    d63e:	8e de       	rcall	.-740    	; 0xd35c <xmit_datablock>
    d640:	31 e0       	ldi	r19, 0x01	; 1
    d642:	20 e0       	ldi	r18, 0x00	; 0
    d644:	89 2b       	or	r24, r25
    d646:	09 f0       	breq	.+2      	; 0xd64a <mmc_disk_write+0x8e>
    d648:	30 e0       	ldi	r19, 0x00	; 0
    d64a:	c3 2f       	mov	r28, r19
    d64c:	d2 2f       	mov	r29, r18
    d64e:	1d c0       	rjmp	.+58     	; 0xd68a <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d650:	86 70       	andi	r24, 0x06	; 6
    d652:	29 f0       	breq	.+10     	; 0xd65e <mmc_disk_write+0xa2>
    d654:	ae 01       	movw	r20, r28
    d656:	60 e0       	ldi	r22, 0x00	; 0
    d658:	70 e0       	ldi	r23, 0x00	; 0
    d65a:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d65c:	3c de       	rcall	.-904    	; 0xd2d6 <send_cmd>
    d65e:	b7 01       	movw	r22, r14
    d660:	a6 01       	movw	r20, r12
    d662:	89 e1       	ldi	r24, 0x19	; 25
    d664:	38 de       	rcall	.-912    	; 0xd2d6 <send_cmd>
    d666:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d668:	10 c0       	rjmp	.+32     	; 0xd68a <mmc_disk_write+0xce>
    d66a:	6c ef       	ldi	r22, 0xFC	; 252
    d66c:	c8 01       	movw	r24, r16
    d66e:	76 de       	rcall	.-788    	; 0xd35c <xmit_datablock>
    d670:	89 2b       	or	r24, r25
                buff += 512;
    d672:	19 f0       	breq	.+6      	; 0xd67a <mmc_disk_write+0xbe>
            } while (--count);
    d674:	1e 5f       	subi	r17, 0xFE	; 254
    d676:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d678:	c1 f7       	brne	.-16     	; 0xd66a <mmc_disk_write+0xae>
    d67a:	6d ef       	ldi	r22, 0xFD	; 253
    d67c:	80 e0       	ldi	r24, 0x00	; 0
    d67e:	90 e0       	ldi	r25, 0x00	; 0
    d680:	6d de       	rcall	.-806    	; 0xd35c <xmit_datablock>
    d682:	89 2b       	or	r24, r25
                count = 1;
    d684:	11 f4       	brne	.+4      	; 0xd68a <mmc_disk_write+0xce>
    d686:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d688:	d0 e0       	ldi	r29, 0x00	; 0
    d68a:	c8 dd       	rcall	.-1136   	; 0xd21c <deselect>
    GPIO_PIN_LOW(LED1);
    d68c:	46 98       	cbi	0x08, 6	; 8
    d68e:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d690:	81 e0       	ldi	r24, 0x01	; 1
    d692:	90 e0       	ldi	r25, 0x00	; 0
    d694:	cd 2b       	or	r28, r29
    d696:	09 f4       	brne	.+2      	; 0xd69a <mmc_disk_write+0xde>
    d698:	80 e0       	ldi	r24, 0x00	; 0
}
    d69a:	cd b7       	in	r28, 0x3d	; 61
    d69c:	de b7       	in	r29, 0x3e	; 62
    d69e:	e8 e0       	ldi	r30, 0x08	; 8
    d6a0:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000d6a4 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d6a4:	a0 e1       	ldi	r26, 0x10	; 16
    d6a6:	b0 e0       	ldi	r27, 0x00	; 0
    d6a8:	e8 e5       	ldi	r30, 0x58	; 88
    d6aa:	fb e6       	ldi	r31, 0x6B	; 107
    d6ac:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d6b0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d6b4:	90 fd       	sbrc	r25, 0
    d6b6:	31 c2       	rjmp	.+1122   	; 0xdb1a <mmc_disk_ioctl+0x476>
    d6b8:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d6ba:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d6be:	91 ff       	sbrs	r25, 1
    d6c0:	02 c0       	rjmp	.+4      	; 0xd6c6 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d6c2:	ac dd       	rcall	.-1192   	; 0xd21c <deselect>
    d6c4:	2a c2       	rjmp	.+1108   	; 0xdb1a <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d6c6:	83 33       	cpi	r24, 0x33	; 51
    d6c8:	09 f4       	brne	.+2      	; 0xd6cc <mmc_disk_ioctl+0x28>
    d6ca:	01 c1       	rjmp	.+514    	; 0xd8ce <mmc_disk_ioctl+0x22a>
    d6cc:	a0 f4       	brcc	.+40     	; 0xd6f6 <mmc_disk_ioctl+0x52>
    d6ce:	83 30       	cpi	r24, 0x03	; 3
    d6d0:	09 f4       	brne	.+2      	; 0xd6d4 <mmc_disk_ioctl+0x30>
    d6d2:	85 c0       	rjmp	.+266    	; 0xd7de <mmc_disk_ioctl+0x13a>
    d6d4:	28 f4       	brcc	.+10     	; 0xd6e0 <mmc_disk_ioctl+0x3c>
    d6d6:	88 23       	and	r24, r24
    d6d8:	11 f1       	breq	.+68     	; 0xd71e <mmc_disk_ioctl+0x7a>
    d6da:	81 30       	cpi	r24, 0x01	; 1
    d6dc:	11 f1       	breq	.+68     	; 0xd722 <mmc_disk_ioctl+0x7e>
    d6de:	1f c2       	rjmp	.+1086   	; 0xdb1e <mmc_disk_ioctl+0x47a>
    d6e0:	87 30       	cpi	r24, 0x07	; 7
    d6e2:	09 f4       	brne	.+2      	; 0xd6e6 <mmc_disk_ioctl+0x42>
    d6e4:	2a c1       	rjmp	.+596    	; 0xd93a <mmc_disk_ioctl+0x296>
    d6e6:	82 33       	cpi	r24, 0x32	; 50
    d6e8:	09 f0       	breq	.+2      	; 0xd6ec <mmc_disk_ioctl+0x48>
    d6ea:	19 c2       	rjmp	.+1074   	; 0xdb1e <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d6ec:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d6f0:	fb 01       	movw	r30, r22
    d6f2:	80 83       	st	Z, r24
    d6f4:	28 c1       	rjmp	.+592    	; 0xd946 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d6f6:	86 33       	cpi	r24, 0x36	; 54
    d6f8:	09 f4       	brne	.+2      	; 0xd6fc <mmc_disk_ioctl+0x58>
    d6fa:	0c c1       	rjmp	.+536    	; 0xd914 <mmc_disk_ioctl+0x270>
    d6fc:	38 f4       	brcc	.+14     	; 0xd70c <mmc_disk_ioctl+0x68>
    d6fe:	84 33       	cpi	r24, 0x34	; 52
    d700:	09 f4       	brne	.+2      	; 0xd704 <mmc_disk_ioctl+0x60>
    d702:	ea c0       	rjmp	.+468    	; 0xd8d8 <mmc_disk_ioctl+0x234>
    d704:	85 33       	cpi	r24, 0x35	; 53
    d706:	09 f4       	brne	.+2      	; 0xd70a <mmc_disk_ioctl+0x66>
    d708:	f1 c0       	rjmp	.+482    	; 0xd8ec <mmc_disk_ioctl+0x248>
    d70a:	09 c2       	rjmp	.+1042   	; 0xdb1e <mmc_disk_ioctl+0x47a>
    d70c:	88 33       	cpi	r24, 0x38	; 56
    d70e:	09 f4       	brne	.+2      	; 0xd712 <mmc_disk_ioctl+0x6e>
    d710:	74 c1       	rjmp	.+744    	; 0xd9fa <mmc_disk_ioctl+0x356>
    d712:	08 f4       	brcc	.+2      	; 0xd716 <mmc_disk_ioctl+0x72>
    d714:	1a c1       	rjmp	.+564    	; 0xd94a <mmc_disk_ioctl+0x2a6>
    d716:	89 33       	cpi	r24, 0x39	; 57
    d718:	09 f4       	brne	.+2      	; 0xd71c <mmc_disk_ioctl+0x78>
    d71a:	bc c1       	rjmp	.+888    	; 0xda94 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d71c:	00 c2       	rjmp	.+1024   	; 0xdb1e <mmc_disk_ioctl+0x47a>
    d71e:	b9 dd       	rcall	.-1166   	; 0xd292 <select>
    d720:	06 c1       	rjmp	.+524    	; 0xd92e <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d722:	40 e0       	ldi	r20, 0x00	; 0
    d724:	50 e0       	ldi	r21, 0x00	; 0
    d726:	ba 01       	movw	r22, r20
    d728:	89 e0       	ldi	r24, 0x09	; 9
    d72a:	d5 dd       	rcall	.-1110   	; 0xd2d6 <send_cmd>
    d72c:	81 11       	cpse	r24, r1
    d72e:	f1 c1       	rjmp	.+994    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d730:	60 e1       	ldi	r22, 0x10	; 16
    d732:	70 e0       	ldi	r23, 0x00	; 0
    d734:	ce 01       	movw	r24, r28
    d736:	01 96       	adiw	r24, 0x01	; 1
    d738:	77 dd       	rcall	.-1298   	; 0xd228 <rcvr_datablock>
    d73a:	89 2b       	or	r24, r25
    d73c:	09 f4       	brne	.+2      	; 0xd740 <mmc_disk_ioctl+0x9c>
    d73e:	e9 c1       	rjmp	.+978    	; 0xdb12 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d740:	99 81       	ldd	r25, Y+1	; 0x01
    d742:	92 95       	swap	r25
    d744:	96 95       	lsr	r25
    d746:	96 95       	lsr	r25
    d748:	93 70       	andi	r25, 0x03	; 3
    d74a:	29 85       	ldd	r18, Y+9	; 0x09
    d74c:	4a 85       	ldd	r20, Y+10	; 0x0a
    d74e:	88 85       	ldd	r24, Y+8	; 0x08
    d750:	91 30       	cpi	r25, 0x01	; 1
    d752:	d9 f4       	brne	.+54     	; 0xd78a <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d754:	30 e0       	ldi	r19, 0x00	; 0
    d756:	32 2f       	mov	r19, r18
    d758:	22 27       	eor	r18, r18
    d75a:	24 0f       	add	r18, r20
    d75c:	31 1d       	adc	r19, r1
    d75e:	8f 73       	andi	r24, 0x3F	; 63
    d760:	90 e0       	ldi	r25, 0x00	; 0
    d762:	a0 e0       	ldi	r26, 0x00	; 0
    d764:	b0 e0       	ldi	r27, 0x00	; 0
    d766:	dc 01       	movw	r26, r24
    d768:	99 27       	eor	r25, r25
    d76a:	88 27       	eor	r24, r24
    d76c:	01 96       	adiw	r24, 0x01	; 1
    d76e:	a1 1d       	adc	r26, r1
    d770:	b1 1d       	adc	r27, r1
    d772:	82 0f       	add	r24, r18
    d774:	93 1f       	adc	r25, r19
    d776:	a1 1d       	adc	r26, r1
    d778:	b1 1d       	adc	r27, r1
    d77a:	fa e0       	ldi	r31, 0x0A	; 10
    d77c:	88 0f       	add	r24, r24
    d77e:	99 1f       	adc	r25, r25
    d780:	aa 1f       	adc	r26, r26
    d782:	bb 1f       	adc	r27, r27
    d784:	fa 95       	dec	r31
    d786:	d1 f7       	brne	.-12     	; 0xd77c <mmc_disk_ioctl+0xd8>
    d788:	9b c0       	rjmp	.+310    	; 0xd8c0 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d78a:	22 95       	swap	r18
    d78c:	26 95       	lsr	r18
    d78e:	26 95       	lsr	r18
    d790:	23 70       	andi	r18, 0x03	; 3
    d792:	f4 e0       	ldi	r31, 0x04	; 4
    d794:	8f 9f       	mul	r24, r31
    d796:	c0 01       	movw	r24, r0
    d798:	11 24       	eor	r1, r1
    d79a:	82 0f       	add	r24, r18
    d79c:	91 1d       	adc	r25, r1
    d79e:	01 96       	adiw	r24, 0x01	; 1
    d7a0:	2f 81       	ldd	r18, Y+7	; 0x07
    d7a2:	23 70       	andi	r18, 0x03	; 3
    d7a4:	30 e0       	ldi	r19, 0x00	; 0
    d7a6:	32 2f       	mov	r19, r18
    d7a8:	22 27       	eor	r18, r18
    d7aa:	33 0f       	add	r19, r19
    d7ac:	33 0f       	add	r19, r19
    d7ae:	82 0f       	add	r24, r18
    d7b0:	93 1f       	adc	r25, r19
    d7b2:	a0 e0       	ldi	r26, 0x00	; 0
    d7b4:	b0 e0       	ldi	r27, 0x00	; 0
    d7b6:	2e 81       	ldd	r18, Y+6	; 0x06
    d7b8:	32 2f       	mov	r19, r18
    d7ba:	3f 70       	andi	r19, 0x0F	; 15
    d7bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    d7be:	22 1f       	adc	r18, r18
    d7c0:	22 27       	eor	r18, r18
    d7c2:	22 1f       	adc	r18, r18
    d7c4:	23 0f       	add	r18, r19
    d7c6:	43 70       	andi	r20, 0x03	; 3
    d7c8:	44 0f       	add	r20, r20
    d7ca:	42 0f       	add	r20, r18
    d7cc:	47 50       	subi	r20, 0x07	; 7
    d7ce:	04 c0       	rjmp	.+8      	; 0xd7d8 <mmc_disk_ioctl+0x134>
    d7d0:	88 0f       	add	r24, r24
    d7d2:	99 1f       	adc	r25, r25
    d7d4:	aa 1f       	adc	r26, r26
    d7d6:	bb 1f       	adc	r27, r27
    d7d8:	4a 95       	dec	r20
    d7da:	d2 f7       	brpl	.-12     	; 0xd7d0 <mmc_disk_ioctl+0x12c>
    d7dc:	71 c0       	rjmp	.+226    	; 0xd8c0 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7de:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7e2:	40 e0       	ldi	r20, 0x00	; 0
    d7e4:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7e6:	ba 01       	movw	r22, r20
    d7e8:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7ea:	24 c0       	rjmp	.+72     	; 0xd834 <mmc_disk_ioctl+0x190>
    d7ec:	8d e8       	ldi	r24, 0x8D	; 141
    d7ee:	73 dd       	rcall	.-1306   	; 0xd2d6 <send_cmd>
    d7f0:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d7f2:	8f c1       	rjmp	.+798    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d7f4:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d7f6:	10 dd       	rcall	.-1504   	; 0xd218 <xchg_spi>
    d7f8:	60 e1       	ldi	r22, 0x10	; 16
    d7fa:	70 e0       	ldi	r23, 0x00	; 0
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	01 96       	adiw	r24, 0x01	; 1
    d800:	13 dd       	rcall	.-1498   	; 0xd228 <rcvr_datablock>
    d802:	89 2b       	or	r24, r25
    d804:	09 f4       	brne	.+2      	; 0xd808 <mmc_disk_ioctl+0x164>
    d806:	85 c1       	rjmp	.+778    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d808:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d80a:	f5 2e       	mov	r15, r21
    d80c:	8f ef       	ldi	r24, 0xFF	; 255
    d80e:	04 dd       	rcall	.-1528   	; 0xd218 <xchg_spi>
    d810:	fa 94       	dec	r15
    d812:	f1 10       	cpse	r15, r1
    d814:	fb cf       	rjmp	.-10     	; 0xd80c <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d816:	2b 85       	ldd	r18, Y+11	; 0x0b
    d818:	22 95       	swap	r18
    d81a:	2f 70       	andi	r18, 0x0F	; 15
    d81c:	80 e1       	ldi	r24, 0x10	; 16
    d81e:	90 e0       	ldi	r25, 0x00	; 0
    d820:	a0 e0       	ldi	r26, 0x00	; 0
    d822:	b0 e0       	ldi	r27, 0x00	; 0
    d824:	04 c0       	rjmp	.+8      	; 0xd82e <mmc_disk_ioctl+0x18a>
    d826:	88 0f       	add	r24, r24
    d828:	99 1f       	adc	r25, r25
    d82a:	aa 1f       	adc	r26, r26
    d82c:	bb 1f       	adc	r27, r27
    d82e:	2a 95       	dec	r18
    d830:	d2 f7       	brpl	.-12     	; 0xd826 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d832:	46 c0       	rjmp	.+140    	; 0xd8c0 <mmc_disk_ioctl+0x21c>
    d834:	89 e0       	ldi	r24, 0x09	; 9
    d836:	4f dd       	rcall	.-1378   	; 0xd2d6 <send_cmd>
    d838:	81 11       	cpse	r24, r1
    d83a:	6b c1       	rjmp	.+726    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d83c:	60 e1       	ldi	r22, 0x10	; 16
    d83e:	70 e0       	ldi	r23, 0x00	; 0
    d840:	ce 01       	movw	r24, r28
    d842:	01 96       	adiw	r24, 0x01	; 1
    d844:	f1 dc       	rcall	.-1566   	; 0xd228 <rcvr_datablock>
    d846:	89 2b       	or	r24, r25
    d848:	09 f4       	brne	.+2      	; 0xd84c <mmc_disk_ioctl+0x1a8>
    d84a:	63 c1       	rjmp	.+710    	; 0xdb12 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d84c:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <CardType>
    d850:	2b 85       	ldd	r18, Y+11	; 0x0b
    d852:	8c 85       	ldd	r24, Y+12	; 0x0c
    d854:	91 ff       	sbrs	r25, 1
    d856:	16 c0       	rjmp	.+44     	; 0xd884 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d858:	2f 73       	andi	r18, 0x3F	; 63
    d85a:	88 1f       	adc	r24, r24
    d85c:	88 27       	eor	r24, r24
    d85e:	88 1f       	adc	r24, r24
    d860:	90 e0       	ldi	r25, 0x00	; 0
    d862:	01 96       	adiw	r24, 0x01	; 1
    d864:	82 0f       	add	r24, r18
    d866:	91 1d       	adc	r25, r1
    d868:	82 0f       	add	r24, r18
    d86a:	91 1d       	adc	r25, r1
    d86c:	2e 85       	ldd	r18, Y+14	; 0x0e
    d86e:	22 95       	swap	r18
    d870:	26 95       	lsr	r18
    d872:	26 95       	lsr	r18
    d874:	23 70       	andi	r18, 0x03	; 3
    d876:	21 50       	subi	r18, 0x01	; 1
    d878:	02 c0       	rjmp	.+4      	; 0xd87e <mmc_disk_ioctl+0x1da>
    d87a:	88 0f       	add	r24, r24
    d87c:	99 1f       	adc	r25, r25
    d87e:	2a 95       	dec	r18
    d880:	e2 f7       	brpl	.-8      	; 0xd87a <mmc_disk_ioctl+0x1d6>
    d882:	1c c0       	rjmp	.+56     	; 0xd8bc <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d884:	38 2f       	mov	r19, r24
    d886:	33 70       	andi	r19, 0x03	; 3
    d888:	82 95       	swap	r24
    d88a:	86 95       	lsr	r24
    d88c:	87 70       	andi	r24, 0x07	; 7
    d88e:	90 e0       	ldi	r25, 0x00	; 0
    d890:	f8 e0       	ldi	r31, 0x08	; 8
    d892:	3f 9f       	mul	r19, r31
    d894:	80 0d       	add	r24, r0
    d896:	91 1d       	adc	r25, r1
    d898:	11 24       	eor	r1, r1
    d89a:	01 96       	adiw	r24, 0x01	; 1
    d89c:	2c 77       	andi	r18, 0x7C	; 124
    d89e:	30 e0       	ldi	r19, 0x00	; 0
    d8a0:	35 95       	asr	r19
    d8a2:	27 95       	ror	r18
    d8a4:	35 95       	asr	r19
    d8a6:	27 95       	ror	r18
    d8a8:	2f 5f       	subi	r18, 0xFF	; 255
    d8aa:	3f 4f       	sbci	r19, 0xFF	; 255
    d8ac:	82 9f       	mul	r24, r18
    d8ae:	a0 01       	movw	r20, r0
    d8b0:	83 9f       	mul	r24, r19
    d8b2:	50 0d       	add	r21, r0
    d8b4:	92 9f       	mul	r25, r18
    d8b6:	50 0d       	add	r21, r0
    d8b8:	11 24       	eor	r1, r1
    d8ba:	ca 01       	movw	r24, r20
    d8bc:	a0 e0       	ldi	r26, 0x00	; 0
    d8be:	b0 e0       	ldi	r27, 0x00	; 0
    d8c0:	f8 01       	movw	r30, r16
    d8c2:	80 83       	st	Z, r24
    d8c4:	91 83       	std	Z+1, r25	; 0x01
    d8c6:	a2 83       	std	Z+2, r26	; 0x02
    d8c8:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d8ca:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d8cc:	23 c1       	rjmp	.+582    	; 0xdb14 <mmc_disk_ioctl+0x470>
    d8ce:	40 e0       	ldi	r20, 0x00	; 0
    d8d0:	50 e0       	ldi	r21, 0x00	; 0
    d8d2:	ba 01       	movw	r22, r20
    d8d4:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d8d6:	04 c0       	rjmp	.+8      	; 0xd8e0 <mmc_disk_ioctl+0x23c>
    d8d8:	40 e0       	ldi	r20, 0x00	; 0
    d8da:	50 e0       	ldi	r21, 0x00	; 0
    d8dc:	ba 01       	movw	r22, r20
    d8de:	8a e0       	ldi	r24, 0x0A	; 10
    d8e0:	fa dc       	rcall	.-1548   	; 0xd2d6 <send_cmd>
    d8e2:	81 11       	cpse	r24, r1
    d8e4:	16 c1       	rjmp	.+556    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d8e6:	60 e1       	ldi	r22, 0x10	; 16
    d8e8:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d8ea:	1f c0       	rjmp	.+62     	; 0xd92a <mmc_disk_ioctl+0x286>
    d8ec:	40 e0       	ldi	r20, 0x00	; 0
    d8ee:	50 e0       	ldi	r21, 0x00	; 0
    d8f0:	ba 01       	movw	r22, r20
    d8f2:	8a e3       	ldi	r24, 0x3A	; 58
    d8f4:	f0 dc       	rcall	.-1568   	; 0xd2d6 <send_cmd>
    d8f6:	81 11       	cpse	r24, r1
    d8f8:	0c c1       	rjmp	.+536    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d8fa:	78 01       	movw	r14, r16
    d8fc:	f4 e0       	ldi	r31, 0x04	; 4
    d8fe:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d900:	f1 1c       	adc	r15, r1
    d902:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d904:	83 d1       	rcall	.+774    	; 0xdc0c <mmc_spi_TXRX>
    d906:	f8 01       	movw	r30, r16
    d908:	81 93       	st	Z+, r24
    d90a:	8f 01       	movw	r16, r30
    d90c:	ee 15       	cp	r30, r14
    d90e:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d910:	c1 f7       	brne	.-16     	; 0xd902 <mmc_disk_ioctl+0x25e>
    d912:	db cf       	rjmp	.-74     	; 0xd8ca <mmc_disk_ioctl+0x226>
    d914:	40 e0       	ldi	r20, 0x00	; 0
    d916:	50 e0       	ldi	r21, 0x00	; 0
    d918:	ba 01       	movw	r22, r20
    d91a:	8d e8       	ldi	r24, 0x8D	; 141
    d91c:	dc dc       	rcall	.-1608   	; 0xd2d6 <send_cmd>
            {
                xchg_spi(0xFF);
    d91e:	81 11       	cpse	r24, r1
    d920:	f8 c0       	rjmp	.+496    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d922:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d924:	79 dc       	rcall	.-1806   	; 0xd218 <xchg_spi>
    d926:	60 e4       	ldi	r22, 0x40	; 64
    d928:	70 e0       	ldi	r23, 0x00	; 0
    d92a:	c8 01       	movw	r24, r16
    d92c:	7d dc       	rcall	.-1798   	; 0xd228 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d92e:	01 e0       	ldi	r16, 0x01	; 1
    d930:	10 e0       	ldi	r17, 0x00	; 0
    d932:	89 2b       	or	r24, r25
    d934:	09 f4       	brne	.+2      	; 0xd938 <mmc_disk_ioctl+0x294>
    d936:	ef c0       	rjmp	.+478    	; 0xdb16 <mmc_disk_ioctl+0x472>
    d938:	ea c0       	rjmp	.+468    	; 0xdb0e <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d93a:	97 d1       	rcall	.+814    	; 0xdc6a <mmc_power_off>
    d93c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d940:	81 60       	ori	r24, 0x01	; 1
    d942:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d946:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d948:	eb c0       	rjmp	.+470    	; 0xdb20 <mmc_disk_ioctl+0x47c>
    d94a:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d94c:	43 81       	ldd	r20, Z+3	; 0x03
    d94e:	54 81       	ldd	r21, Z+4	; 0x04
    d950:	65 81       	ldd	r22, Z+5	; 0x05
    d952:	76 81       	ldd	r23, Z+6	; 0x06
    d954:	39 e0       	ldi	r19, 0x09	; 9
    d956:	44 0f       	add	r20, r20
    d958:	55 1f       	adc	r21, r21
    d95a:	66 1f       	adc	r22, r22
    d95c:	77 1f       	adc	r23, r23
    d95e:	3a 95       	dec	r19
    d960:	d1 f7       	brne	.-12     	; 0xd956 <mmc_disk_ioctl+0x2b2>
    d962:	70 68       	ori	r23, 0x80	; 128
    d964:	80 81       	ld	r24, Z
    d966:	90 e0       	ldi	r25, 0x00	; 0
    d968:	a0 e0       	ldi	r26, 0x00	; 0
    d96a:	b0 e0       	ldi	r27, 0x00	; 0
    d96c:	2c e1       	ldi	r18, 0x1C	; 28
    d96e:	88 0f       	add	r24, r24
    d970:	99 1f       	adc	r25, r25
    d972:	aa 1f       	adc	r26, r26
    d974:	bb 1f       	adc	r27, r27
    d976:	2a 95       	dec	r18
    d978:	d1 f7       	brne	.-12     	; 0xd96e <mmc_disk_ioctl+0x2ca>
    d97a:	48 2b       	or	r20, r24
    d97c:	59 2b       	or	r21, r25
    d97e:	6a 2b       	or	r22, r26
    d980:	7b 2b       	or	r23, r27
    d982:	81 81       	ldd	r24, Z+1	; 0x01
    d984:	92 81       	ldd	r25, Z+2	; 0x02
    d986:	01 97       	sbiw	r24, 0x01	; 1
    d988:	91 70       	andi	r25, 0x01	; 1
    d98a:	a0 e0       	ldi	r26, 0x00	; 0
    d98c:	b0 e0       	ldi	r27, 0x00	; 0
    d98e:	48 2b       	or	r20, r24
    d990:	59 2b       	or	r21, r25
    d992:	6a 2b       	or	r22, r26
    d994:	7b 2b       	or	r23, r27
    d996:	80 e3       	ldi	r24, 0x30	; 48
    d998:	9e dc       	rcall	.-1732   	; 0xd2d6 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d99a:	81 11       	cpse	r24, r1
    d99c:	ba c0       	rjmp	.+372    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    d99e:	88 ee       	ldi	r24, 0xE8	; 232
    d9a0:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9a2:	37 d1       	rcall	.+622    	; 0xdc12 <mmc_set_ms_timeout>
    d9a4:	8f ef       	ldi	r24, 0xFF	; 255
    d9a6:	32 d1       	rcall	.+612    	; 0xdc0c <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d9a8:	8f 3f       	cpi	r24, 0xFF	; 255
    d9aa:	21 f4       	brne	.+8      	; 0xd9b4 <mmc_disk_ioctl+0x310>
    d9ac:	39 d1       	rcall	.+626    	; 0xdc20 <mmc_test_timeout>
    d9ae:	89 2b       	or	r24, r25
    d9b0:	c9 f3       	breq	.-14     	; 0xd9a4 <mmc_disk_ioctl+0x300>
    d9b2:	af c0       	rjmp	.+350    	; 0xdb12 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d9b4:	8e 3f       	cpi	r24, 0xFE	; 254
    d9b6:	09 f0       	breq	.+2      	; 0xd9ba <mmc_disk_ioctl+0x316>
    d9b8:	ac c0       	rjmp	.+344    	; 0xdb12 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d9ba:	f8 01       	movw	r30, r16
    d9bc:	e7 80       	ldd	r14, Z+7	; 0x07
    d9be:	f0 84       	ldd	r15, Z+8	; 0x08
    d9c0:	c1 80       	ldd	r12, Z+1	; 0x01
    d9c2:	d2 80       	ldd	r13, Z+2	; 0x02
    d9c4:	ce 0c       	add	r12, r14
    d9c6:	df 1c       	adc	r13, r15
    d9c8:	ce 14       	cp	r12, r14
    d9ca:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9cc:	31 f0       	breq	.+12     	; 0xd9da <mmc_disk_ioctl+0x336>
    d9ce:	8f ef       	ldi	r24, 0xFF	; 255
    d9d0:	1d d1       	rcall	.+570    	; 0xdc0c <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d9d2:	f7 01       	movw	r30, r14
    d9d4:	81 93       	st	Z+, r24
    d9d6:	7f 01       	movw	r14, r30
    d9d8:	f7 cf       	rjmp	.-18     	; 0xd9c8 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d9da:	f8 01       	movw	r30, r16
    d9dc:	81 81       	ldd	r24, Z+1	; 0x01
    d9de:	92 81       	ldd	r25, Z+2	; 0x02
    d9e0:	02 e0       	ldi	r16, 0x02	; 2
    d9e2:	12 e0       	ldi	r17, 0x02	; 2
    d9e4:	08 1b       	sub	r16, r24
    d9e6:	19 0b       	sbc	r17, r25
    d9e8:	01 15       	cp	r16, r1
    d9ea:	11 05       	cpc	r17, r1
    d9ec:	09 f4       	brne	.+2      	; 0xd9f0 <mmc_disk_ioctl+0x34c>
    d9ee:	6d cf       	rjmp	.-294    	; 0xd8ca <mmc_disk_ioctl+0x226>
    d9f0:	8f ef       	ldi	r24, 0xFF	; 255
    d9f2:	12 dc       	rcall	.-2012   	; 0xd218 <xchg_spi>
    d9f4:	01 50       	subi	r16, 0x01	; 1
    d9f6:	11 09       	sbc	r17, r1
    d9f8:	f7 cf       	rjmp	.-18     	; 0xd9e8 <mmc_disk_ioctl+0x344>
    d9fa:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d9fc:	43 81       	ldd	r20, Z+3	; 0x03
    d9fe:	54 81       	ldd	r21, Z+4	; 0x04
    da00:	65 81       	ldd	r22, Z+5	; 0x05
    da02:	76 81       	ldd	r23, Z+6	; 0x06
    da04:	39 e0       	ldi	r19, 0x09	; 9
    da06:	44 0f       	add	r20, r20
    da08:	55 1f       	adc	r21, r21
    da0a:	66 1f       	adc	r22, r22
    da0c:	77 1f       	adc	r23, r23
    da0e:	3a 95       	dec	r19
    da10:	d1 f7       	brne	.-12     	; 0xda06 <mmc_disk_ioctl+0x362>
    da12:	70 68       	ori	r23, 0x80	; 128
    da14:	80 81       	ld	r24, Z
    da16:	90 e0       	ldi	r25, 0x00	; 0
    da18:	a0 e0       	ldi	r26, 0x00	; 0
    da1a:	b0 e0       	ldi	r27, 0x00	; 0
    da1c:	2c e1       	ldi	r18, 0x1C	; 28
    da1e:	88 0f       	add	r24, r24
    da20:	99 1f       	adc	r25, r25
    da22:	aa 1f       	adc	r26, r26
    da24:	bb 1f       	adc	r27, r27
    da26:	2a 95       	dec	r18
    da28:	d1 f7       	brne	.-12     	; 0xda1e <mmc_disk_ioctl+0x37a>
    da2a:	48 2b       	or	r20, r24
    da2c:	59 2b       	or	r21, r25
    da2e:	6a 2b       	or	r22, r26
    da30:	7b 2b       	or	r23, r27
    da32:	81 81       	ldd	r24, Z+1	; 0x01
    da34:	92 81       	ldd	r25, Z+2	; 0x02
    da36:	01 97       	sbiw	r24, 0x01	; 1
    da38:	91 70       	andi	r25, 0x01	; 1
    da3a:	a0 e0       	ldi	r26, 0x00	; 0
    da3c:	b0 e0       	ldi	r27, 0x00	; 0
    da3e:	48 2b       	or	r20, r24
    da40:	59 2b       	or	r21, r25
    da42:	6a 2b       	or	r22, r26
    da44:	7b 2b       	or	r23, r27
    da46:	81 e3       	ldi	r24, 0x31	; 49
    da48:	46 dc       	rcall	.-1908   	; 0xd2d6 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    da4a:	81 11       	cpse	r24, r1
    da4c:	62 c0       	rjmp	.+196    	; 0xdb12 <mmc_disk_ioctl+0x46e>
    da4e:	8f ef       	ldi	r24, 0xFF	; 255
    da50:	e3 db       	rcall	.-2106   	; 0xd218 <xchg_spi>
    da52:	8e ef       	ldi	r24, 0xFE	; 254
    da54:	e1 db       	rcall	.-2110   	; 0xd218 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    da56:	f8 01       	movw	r30, r16
    da58:	e7 80       	ldd	r14, Z+7	; 0x07
    da5a:	f0 84       	ldd	r15, Z+8	; 0x08
    da5c:	c1 80       	ldd	r12, Z+1	; 0x01
    da5e:	d2 80       	ldd	r13, Z+2	; 0x02
    da60:	ce 0c       	add	r12, r14
    da62:	df 1c       	adc	r13, r15
    da64:	ec 14       	cp	r14, r12
    da66:	fd 04       	cpc	r15, r13
    da68:	29 f0       	breq	.+10     	; 0xda74 <mmc_disk_ioctl+0x3d0>
    da6a:	f7 01       	movw	r30, r14
    da6c:	81 91       	ld	r24, Z+
    da6e:	7f 01       	movw	r14, r30
    da70:	d3 db       	rcall	.-2138   	; 0xd218 <xchg_spi>
    da72:	f8 cf       	rjmp	.-16     	; 0xda64 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    da74:	f8 01       	movw	r30, r16
    da76:	81 81       	ldd	r24, Z+1	; 0x01
    da78:	92 81       	ldd	r25, Z+2	; 0x02
    da7a:	02 e0       	ldi	r16, 0x02	; 2
    da7c:	12 e0       	ldi	r17, 0x02	; 2
    da7e:	08 1b       	sub	r16, r24
    da80:	19 0b       	sbc	r17, r25
    da82:	8f ef       	ldi	r24, 0xFF	; 255
    da84:	01 15       	cp	r16, r1
    da86:	11 05       	cpc	r17, r1
    da88:	09 f4       	brne	.+2      	; 0xda8c <mmc_disk_ioctl+0x3e8>
    da8a:	3b c0       	rjmp	.+118    	; 0xdb02 <mmc_disk_ioctl+0x45e>
    da8c:	c5 db       	rcall	.-2166   	; 0xd218 <xchg_spi>
    da8e:	01 50       	subi	r16, 0x01	; 1
    da90:	11 09       	sbc	r17, r1
    da92:	f7 cf       	rjmp	.-18     	; 0xda82 <mmc_disk_ioctl+0x3de>
    da94:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    da96:	43 81       	ldd	r20, Z+3	; 0x03
    da98:	54 81       	ldd	r21, Z+4	; 0x04
    da9a:	65 81       	ldd	r22, Z+5	; 0x05
    da9c:	76 81       	ldd	r23, Z+6	; 0x06
    da9e:	89 e0       	ldi	r24, 0x09	; 9
    daa0:	44 0f       	add	r20, r20
    daa2:	55 1f       	adc	r21, r21
    daa4:	66 1f       	adc	r22, r22
    daa6:	77 1f       	adc	r23, r23
    daa8:	8a 95       	dec	r24
    daaa:	d1 f7       	brne	.-12     	; 0xdaa0 <mmc_disk_ioctl+0x3fc>
    daac:	74 68       	ori	r23, 0x84	; 132
    daae:	80 81       	ld	r24, Z
    dab0:	90 e0       	ldi	r25, 0x00	; 0
    dab2:	a0 e0       	ldi	r26, 0x00	; 0
    dab4:	b0 e0       	ldi	r27, 0x00	; 0
    dab6:	2c e1       	ldi	r18, 0x1C	; 28
    dab8:	88 0f       	add	r24, r24
    daba:	99 1f       	adc	r25, r25
    dabc:	aa 1f       	adc	r26, r26
    dabe:	bb 1f       	adc	r27, r27
    dac0:	2a 95       	dec	r18
    dac2:	d1 f7       	brne	.-12     	; 0xdab8 <mmc_disk_ioctl+0x414>
    dac4:	48 2b       	or	r20, r24
    dac6:	59 2b       	or	r21, r25
    dac8:	6a 2b       	or	r22, r26
    daca:	7b 2b       	or	r23, r27
    dacc:	82 81       	ldd	r24, Z+2	; 0x02
    dace:	90 e0       	ldi	r25, 0x00	; 0
    dad0:	a0 e0       	ldi	r26, 0x00	; 0
    dad2:	b0 e0       	ldi	r27, 0x00	; 0
    dad4:	48 2b       	or	r20, r24
    dad6:	59 2b       	or	r21, r25
    dad8:	6a 2b       	or	r22, r26
    dada:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dadc:	81 e3       	ldi	r24, 0x31	; 49
    dade:	fb db       	rcall	.-2058   	; 0xd2d6 <send_cmd>
    dae0:	81 11       	cpse	r24, r1
    dae2:	17 c0       	rjmp	.+46     	; 0xdb12 <mmc_disk_ioctl+0x46e>
    dae4:	8f ef       	ldi	r24, 0xFF	; 255
    dae6:	98 db       	rcall	.-2256   	; 0xd218 <xchg_spi>
                xchg_spi(sdi->ndata);
    dae8:	8e ef       	ldi	r24, 0xFE	; 254
    daea:	96 db       	rcall	.-2260   	; 0xd218 <xchg_spi>
    daec:	f8 01       	movw	r30, r16
    daee:	81 81       	ldd	r24, Z+1	; 0x01
    daf0:	93 db       	rcall	.-2266   	; 0xd218 <xchg_spi>
    daf2:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    daf4:	12 e0       	ldi	r17, 0x02	; 2
    daf6:	8f ef       	ldi	r24, 0xFF	; 255
    daf8:	8f db       	rcall	.-2274   	; 0xd218 <xchg_spi>
    dafa:	01 50       	subi	r16, 0x01	; 1
    dafc:	11 09       	sbc	r17, r1
    dafe:	d9 f7       	brne	.-10     	; 0xdaf6 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db00:	8f ef       	ldi	r24, 0xFF	; 255
    db02:	84 d0       	rcall	.+264    	; 0xdc0c <mmc_spi_TXRX>
    db04:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    db06:	01 e0       	ldi	r16, 0x01	; 1
    db08:	10 e0       	ldi	r17, 0x00	; 0
    db0a:	85 30       	cpi	r24, 0x05	; 5
    db0c:	21 f4       	brne	.+8      	; 0xdb16 <mmc_disk_ioctl+0x472>
    db0e:	00 e0       	ldi	r16, 0x00	; 0
    db10:	02 c0       	rjmp	.+4      	; 0xdb16 <mmc_disk_ioctl+0x472>
    db12:	01 e0       	ldi	r16, 0x01	; 1
    db14:	10 e0       	ldi	r17, 0x00	; 0
    db16:	82 db       	rcall	.-2300   	; 0xd21c <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    db18:	04 c0       	rjmp	.+8      	; 0xdb22 <mmc_disk_ioctl+0x47e>
    db1a:	03 e0       	ldi	r16, 0x03	; 3
            break;
    db1c:	01 c0       	rjmp	.+2      	; 0xdb20 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    db1e:	04 e0       	ldi	r16, 0x04	; 4
    db20:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    db22:	c8 01       	movw	r24, r16
    db24:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    db26:	e8 e0       	ldi	r30, 0x08	; 8
    db28:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000db2c <mmc_disk_timerproc>:
    db2c:	cf 93       	push	r28
    db2e:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    db32:	88 23       	and	r24, r24
    db34:	19 f0       	breq	.+6      	; 0xdb3c <mmc_disk_timerproc+0x10>
    db36:	81 50       	subi	r24, 0x01	; 1
    db38:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Timer1>
    n = Timer2;
    db3c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <Timer2>
    if (n) Timer2 = --n;
    db40:	88 23       	and	r24, r24
    db42:	19 f0       	breq	.+6      	; 0xdb4a <mmc_disk_timerproc+0x1e>
    db44:	81 50       	subi	r24, 0x01	; 1
    db46:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <Timer2>

    s = Stat;
    db4a:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    db4e:	8e d0       	rcall	.+284    	; 0xdc6c <mmc_ins_status>
    db50:	89 2b       	or	r24, r25
    db52:	11 f0       	breq	.+4      	; 0xdb58 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    db54:	cd 7f       	andi	r28, 0xFD	; 253
    db56:	04 c0       	rjmp	.+8      	; 0xdb60 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    db58:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    db5a:	81 e0       	ldi	r24, 0x01	; 1
    db5c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    db60:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    db64:	cf 91       	pop	r28
    db66:	08 95       	ret

0000db68 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    db68:	00 d0       	rcall	.+0      	; 0xdb6a <mmc_install_timer+0x2>
    db6a:	1f 92       	push	r1
    db6c:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_timeout+0x1>
    db70:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_timeout>
    db74:	61 e0       	ldi	r22, 0x01	; 1
    db76:	70 e0       	ldi	r23, 0x00	; 0
    db78:	83 e4       	ldi	r24, 0x43	; 67
    db7a:	9e e6       	ldi	r25, 0x6E	; 110
    db7c:	0e 94 c6 32 	call	0x658c	; 0x658c <set_timers>
    db80:	01 96       	adiw	r24, 0x01	; 1
    db82:	51 f4       	brne	.+20     	; 0xdb98 <mmc_install_timer+0x30>
    db84:	87 e2       	ldi	r24, 0x27	; 39
    db86:	98 e0       	ldi	r25, 0x08	; 8
    db88:	a0 e0       	ldi	r26, 0x00	; 0
    db8a:	ed b7       	in	r30, 0x3d	; 61
    db8c:	fe b7       	in	r31, 0x3e	; 62
    db8e:	81 83       	std	Z+1, r24	; 0x01
    db90:	92 83       	std	Z+2, r25	; 0x02
    db92:	a3 83       	std	Z+3, r26	; 0x03
    db94:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    db98:	0f 90       	pop	r0
    db9a:	0f 90       	pop	r0
    db9c:	0f 90       	pop	r0
    db9e:	08 95       	ret

0000dba0 <mmc_spi_begin>:
    dba0:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <_mmc_clock>
    dba4:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <_mmc_clock+0x1>
    dba8:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <_mmc_clock+0x2>
    dbac:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <_mmc_clock+0x3>
    dbb0:	4b e0       	ldi	r20, 0x0B	; 11
    dbb2:	50 e0       	ldi	r21, 0x00	; 0
    dbb4:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <spi_begin>
    dbb8:	08 95       	ret

0000dbba <mmc_spi_end>:
    dbba:	8b e0       	ldi	r24, 0x0B	; 11
    dbbc:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <spi_end>
    dbc0:	08 95       	ret

0000dbc2 <mmc_slow>:
    dbc2:	80 e2       	ldi	r24, 0x20	; 32
    dbc4:	91 ea       	ldi	r25, 0xA1	; 161
    dbc6:	a7 e0       	ldi	r26, 0x07	; 7
    dbc8:	b0 e0       	ldi	r27, 0x00	; 0
    dbca:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    dbce:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    dbd2:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    dbd6:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    dbda:	08 95       	ret

0000dbdc <mmc_spi_init>:
    dbdc:	8b e0       	ldi	r24, 0x0B	; 11
    dbde:	0e 94 53 24 	call	0x48a6	; 0x48a6 <chip_select_init>
    dbe2:	ef cf       	rjmp	.-34     	; 0xdbc2 <mmc_slow>
    dbe4:	08 95       	ret

0000dbe6 <mmc_fast>:
    dbe6:	80 ea       	ldi	r24, 0xA0	; 160
    dbe8:	95 e2       	ldi	r25, 0x25	; 37
    dbea:	a6 e2       	ldi	r26, 0x26	; 38
    dbec:	b0 e0       	ldi	r27, 0x00	; 0
    dbee:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    dbf2:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    dbf6:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    dbfa:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    dbfe:	08 95       	ret

0000dc00 <mmc_spi_TX_buffer>:
    dc00:	0c 94 85 24 	jmp	0x490a	; 0x490a <spi_TX_buffer>
    dc04:	08 95       	ret

0000dc06 <mmc_spi_RX_buffer>:
    dc06:	0c 94 87 24 	jmp	0x490e	; 0x490e <spi_RX_buffer>
    dc0a:	08 95       	ret

0000dc0c <mmc_spi_TXRX>:
    dc0c:	0c 94 01 25 	jmp	0x4a02	; 0x4a02 <spi_TXRX>
    dc10:	08 95       	ret

0000dc12 <mmc_set_ms_timeout>:
    dc12:	f8 94       	cli
    dc14:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    dc18:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>
    dc1c:	78 94       	sei
    dc1e:	08 95       	ret

0000dc20 <mmc_test_timeout>:
    dc20:	00 d0       	rcall	.+0      	; 0xdc22 <mmc_test_timeout+0x2>
    dc22:	1f 92       	push	r1
    dc24:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc28:	81 fd       	sbrc	r24, 1
    dc2a:	15 c0       	rjmp	.+42     	; 0xdc56 <mmc_test_timeout+0x36>
    dc2c:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    dc30:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    dc34:	89 2b       	or	r24, r25
    dc36:	91 f4       	brne	.+36     	; 0xdc5c <mmc_test_timeout+0x3c>
    dc38:	8a e1       	ldi	r24, 0x1A	; 26
    dc3a:	98 e0       	ldi	r25, 0x08	; 8
    dc3c:	a0 e0       	ldi	r26, 0x00	; 0
    dc3e:	ed b7       	in	r30, 0x3d	; 61
    dc40:	fe b7       	in	r31, 0x3e	; 62
    dc42:	81 83       	std	Z+1, r24	; 0x01
    dc44:	92 83       	std	Z+2, r25	; 0x02
    dc46:	a3 83       	std	Z+3, r26	; 0x03
    dc48:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    dc4c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc50:	83 60       	ori	r24, 0x03	; 3
    dc52:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dc56:	81 e0       	ldi	r24, 0x01	; 1
    dc58:	90 e0       	ldi	r25, 0x00	; 0
    dc5a:	02 c0       	rjmp	.+4      	; 0xdc60 <mmc_test_timeout+0x40>
    dc5c:	80 e0       	ldi	r24, 0x00	; 0
    dc5e:	90 e0       	ldi	r25, 0x00	; 0
    dc60:	0f 90       	pop	r0
    dc62:	0f 90       	pop	r0
    dc64:	0f 90       	pop	r0
    dc66:	08 95       	ret

0000dc68 <mmc_power_on>:
    dc68:	08 95       	ret

0000dc6a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dc6a:	08 95       	ret

0000dc6c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dc6c:	3f 98       	cbi	0x07, 7	; 7
    dc6e:	86 b1       	in	r24, 0x06	; 6
    dc70:	08 2e       	mov	r0, r24
    dc72:	00 0c       	add	r0, r0
    dc74:	99 0b       	sbc	r25, r25
    dc76:	80 95       	com	r24
    dc78:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dc7a:	89 2f       	mov	r24, r25
    dc7c:	88 1f       	adc	r24, r24
    dc7e:	88 27       	eor	r24, r24
    dc80:	88 1f       	adc	r24, r24
    dc82:	90 e0       	ldi	r25, 0x00	; 0
    dc84:	08 95       	ret

0000dc86 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dc86:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    dc8a:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    dc8e:	00 97       	sbiw	r24, 0x00	; 0
    dc90:	29 f0       	breq	.+10     	; 0xdc9c <mmc_task+0x16>
        _mmc_timeout--;
    dc92:	01 97       	sbiw	r24, 0x01	; 1
    dc94:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    dc98:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dc9c:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_mmc_pre>
    dca0:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_mmc_pre+0x1>
    dca4:	8a 30       	cpi	r24, 0x0A	; 10
    dca6:	91 05       	cpc	r25, r1
    dca8:	30 f4       	brcc	.+12     	; 0xdcb6 <mmc_task+0x30>
    dcaa:	01 96       	adiw	r24, 0x01	; 1
    dcac:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <_mmc_pre+0x1>
    dcb0:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <_mmc_pre>
    dcb4:	08 95       	ret
        return;

    _mmc_pre = 0;
    dcb6:	10 92 31 18 	sts	0x1831, r1	; 0x801831 <_mmc_pre+0x1>
    dcba:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_mmc_pre>

	if(!mmc_ins_status())
    dcbe:	d6 df       	rcall	.-84     	; 0xdc6c <mmc_ins_status>
    dcc0:	89 2b       	or	r24, r25
    dcc2:	19 f4       	brne	.+6      	; 0xdcca <mmc_task+0x44>
		set_error(1);
    dcc4:	81 e0       	ldi	r24, 0x01	; 1
    dcc6:	0e 94 12 25 	call	0x4a24	; 0x4a24 <set_error>

    mmc_disk_timerproc();
    dcca:	30 cf       	rjmp	.-416    	; 0xdb2c <mmc_disk_timerproc>
    dccc:	08 95       	ret

0000dcce <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dcce:	ab e0       	ldi	r26, 0x0B	; 11
    dcd0:	b0 e0       	ldi	r27, 0x00	; 0
    dcd2:	ed e6       	ldi	r30, 0x6D	; 109
    dcd4:	fe e6       	ldi	r31, 0x6E	; 110
    dcd6:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    dcda:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dcdc:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dce0:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dce4:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dce6:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dce8:	79 df       	rcall	.-270    	; 0xdbdc <mmc_spi_init>

    if( verbose)
    dcea:	e1 14       	cp	r14, r1
    dcec:	f1 04       	cpc	r15, r1
    dcee:	51 f0       	breq	.+20     	; 0xdd04 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dcf0:	8a e0       	ldi	r24, 0x0A	; 10
    dcf2:	98 e0       	ldi	r25, 0x08	; 8
    dcf4:	a0 e0       	ldi	r26, 0x00	; 0
    dcf6:	ed b7       	in	r30, 0x3d	; 61
    dcf8:	fe b7       	in	r31, 0x3e	; 62
    dcfa:	81 83       	std	Z+1, r24	; 0x01
    dcfc:	92 83       	std	Z+2, r25	; 0x02
    dcfe:	a3 83       	std	Z+3, r26	; 0x03
    dd00:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dd04:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <mmc_init_flag>
    dd08:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <mmc_init_flag+0x1>
    dd0c:	89 2b       	or	r24, r25
        mmc_install_timer();
    dd0e:	09 f4       	brne	.+2      	; 0xdd12 <mmc_init+0x44>

	if(!mmc_ins_status())
    dd10:	2b df       	rcall	.-426    	; 0xdb68 <mmc_install_timer>
    dd12:	ac df       	rcall	.-168    	; 0xdc6c <mmc_ins_status>
    dd14:	89 2b       	or	r24, r25
    dd16:	61 f4       	brne	.+24     	; 0xdd30 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dd18:	8a ee       	ldi	r24, 0xEA	; 234
    dd1a:	97 e0       	ldi	r25, 0x07	; 7
    dd1c:	a0 e0       	ldi	r26, 0x00	; 0
    dd1e:	ed b7       	in	r30, 0x3d	; 61
    dd20:	fe b7       	in	r31, 0x3e	; 62
    dd22:	81 83       	std	Z+1, r24	; 0x01
    dd24:	92 83       	std	Z+2, r25	; 0x02
    dd26:	a3 83       	std	Z+3, r26	; 0x03
    dd28:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		return(RES_NOTRDY);	
    dd2c:	83 e0       	ldi	r24, 0x03	; 3
    dd2e:	8b c0       	rjmp	.+278    	; 0xde46 <mmc_init+0x178>
	}


    if( verbose)
    dd30:	e1 14       	cp	r14, r1
    dd32:	f1 04       	cpc	r15, r1
    dd34:	11 f1       	breq	.+68     	; 0xdd7a <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    dd36:	87 ed       	ldi	r24, 0xD7	; 215
    dd38:	97 e0       	ldi	r25, 0x07	; 7
    dd3a:	a0 e0       	ldi	r26, 0x00	; 0
    dd3c:	ed b7       	in	r30, 0x3d	; 61
    dd3e:	fe b7       	in	r31, 0x3e	; 62
    dd40:	81 83       	std	Z+1, r24	; 0x01
    dd42:	92 83       	std	Z+2, r25	; 0x02
    dd44:	a3 83       	std	Z+3, r26	; 0x03
    dd46:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dd4a:	8b ec       	ldi	r24, 0xCB	; 203
    dd4c:	97 e0       	ldi	r25, 0x07	; 7
    dd4e:	a0 e0       	ldi	r26, 0x00	; 0
    dd50:	ed b7       	in	r30, 0x3d	; 61
    dd52:	fe b7       	in	r31, 0x3e	; 62
    dd54:	81 83       	std	Z+1, r24	; 0x01
    dd56:	92 83       	std	Z+2, r25	; 0x02
    dd58:	a3 83       	std	Z+3, r26	; 0x03
    dd5a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dd5e:	85 eb       	ldi	r24, 0xB5	; 181
    dd60:	91 e0       	ldi	r25, 0x01	; 1
    dd62:	ed b7       	in	r30, 0x3d	; 61
    dd64:	fe b7       	in	r31, 0x3e	; 62
    dd66:	95 83       	std	Z+5, r25	; 0x05
    dd68:	84 83       	std	Z+4, r24	; 0x04
    dd6a:	8a eb       	ldi	r24, 0xBA	; 186
    dd6c:	97 e0       	ldi	r25, 0x07	; 7
    dd6e:	a0 e0       	ldi	r26, 0x00	; 0
    dd70:	81 83       	std	Z+1, r24	; 0x01
    dd72:	92 83       	std	Z+2, r25	; 0x02
    dd74:	a3 83       	std	Z+3, r26	; 0x03
    dd76:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dd7a:	80 e0       	ldi	r24, 0x00	; 0
    dd7c:	1d da       	rcall	.-3014   	; 0xd1b8 <disk_initialize>
    dd7e:	08 2f       	mov	r16, r24
    dd80:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dd82:	01 15       	cp	r16, r1
    dd84:	11 05       	cpc	r17, r1
        put_rc(rc);
    dd86:	19 f0       	breq	.+6      	; 0xdd8e <mmc_init+0xc0>
    dd88:	c8 01       	movw	r24, r16
    dd8a:	e4 d0       	rcall	.+456    	; 0xdf54 <put_rc>
    dd8c:	0e c0       	rjmp	.+28     	; 0xddaa <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dd8e:	40 e0       	ldi	r20, 0x00	; 0
    dd90:	66 ea       	ldi	r22, 0xA6	; 166
    dd92:	78 e0       	ldi	r23, 0x08	; 8
    dd94:	87 e8       	ldi	r24, 0x87	; 135
    dd96:	9b e1       	ldi	r25, 0x1B	; 27
    dd98:	0e 94 94 58 	call	0xb128	; 0xb128 <f_mount>
    dd9c:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dd9e:	89 2b       	or	r24, r25
    dda0:	21 f4       	brne	.+8      	; 0xddaa <mmc_init+0xdc>
    dda2:	e1 14       	cp	r14, r1
    dda4:	f1 04       	cpc	r15, r1
    dda6:	09 f4       	brne	.+2      	; 0xddaa <mmc_init+0xdc>
        put_rc( rc );
    dda8:	40 c0       	rjmp	.+128    	; 0xde2a <mmc_init+0x15c>
    ddaa:	c8 01       	movw	r24, r16
    ddac:	d3 d0       	rcall	.+422    	; 0xdf54 <put_rc>

    if (verbose )
    ddae:	e1 14       	cp	r14, r1
    ddb0:	f1 04       	cpc	r15, r1
    ddb2:	d9 f1       	breq	.+118    	; 0xde2a <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    ddb4:	18 86       	std	Y+8, r1	; 0x08
    ddb6:	19 86       	std	Y+9, r1	; 0x09
    ddb8:	1a 86       	std	Y+10, r1	; 0x0a
    ddba:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    ddbc:	01 15       	cp	r16, r1
    ddbe:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    ddc0:	51 f5       	brne	.+84     	; 0xde16 <mmc_init+0x148>
    ddc2:	ae 01       	movw	r20, r28
    ddc4:	48 5f       	subi	r20, 0xF8	; 248
    ddc6:	5f 4f       	sbci	r21, 0xFF	; 255
    ddc8:	63 e0       	ldi	r22, 0x03	; 3
    ddca:	80 e0       	ldi	r24, 0x00	; 0
    ddcc:	1b da       	rcall	.-3018   	; 0xd204 <disk_ioctl>
            if( rc != RES_OK)
    ddce:	8c 01       	movw	r16, r24
    ddd0:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    ddd2:	61 f0       	breq	.+24     	; 0xddec <mmc_init+0x11e>
    ddd4:	bf d0       	rcall	.+382    	; 0xdf54 <put_rc>
                printf("MMC Block Size - read failed\n");
    ddd6:	8c e9       	ldi	r24, 0x9C	; 156
    ddd8:	97 e0       	ldi	r25, 0x07	; 7
    ddda:	a0 e0       	ldi	r26, 0x00	; 0
    dddc:	ed b7       	in	r30, 0x3d	; 61
    ddde:	fe b7       	in	r31, 0x3e	; 62
    dde0:	81 83       	std	Z+1, r24	; 0x01
    dde2:	92 83       	std	Z+2, r25	; 0x02
    dde4:	a3 83       	std	Z+3, r26	; 0x03
    dde6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    ddea:	15 c0       	rjmp	.+42     	; 0xde16 <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    ddec:	88 85       	ldd	r24, Y+8	; 0x08
    ddee:	99 85       	ldd	r25, Y+9	; 0x09
    ddf0:	aa 85       	ldd	r26, Y+10	; 0x0a
    ddf2:	bb 85       	ldd	r27, Y+11	; 0x0b
    ddf4:	ed b7       	in	r30, 0x3d	; 61
    ddf6:	fe b7       	in	r31, 0x3e	; 62
    ddf8:	84 83       	std	Z+4, r24	; 0x04
    ddfa:	95 83       	std	Z+5, r25	; 0x05
    ddfc:	a6 83       	std	Z+6, r26	; 0x06
    ddfe:	b7 83       	std	Z+7, r27	; 0x07
    de00:	87 e8       	ldi	r24, 0x87	; 135
    de02:	97 e0       	ldi	r25, 0x07	; 7
    de04:	a0 e0       	ldi	r26, 0x00	; 0
    de06:	81 83       	std	Z+1, r24	; 0x01
    de08:	92 83       	std	Z+2, r25	; 0x02
    de0a:	a3 83       	std	Z+3, r26	; 0x03
    de0c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    de10:	86 ea       	ldi	r24, 0xA6	; 166
    de12:	98 e0       	ldi	r25, 0x08	; 8
    de14:	33 d1       	rcall	.+614    	; 0xe07c <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    de16:	89 e7       	ldi	r24, 0x79	; 121
    de18:	97 e0       	ldi	r25, 0x07	; 7
    de1a:	a0 e0       	ldi	r26, 0x00	; 0
    de1c:	ed b7       	in	r30, 0x3d	; 61
    de1e:	fe b7       	in	r31, 0x3e	; 62
    de20:	81 83       	std	Z+1, r24	; 0x01
    de22:	92 83       	std	Z+2, r25	; 0x02
    de24:	a3 83       	std	Z+3, r26	; 0x03
    de26:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
    mmc_init_flag = 1;
    de2a:	81 e0       	ldi	r24, 0x01	; 1
    de2c:	90 e0       	ldi	r25, 0x00	; 0
    de2e:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <mmc_init_flag+0x1>
    de32:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <mmc_init_flag>

	if(rc != RES_OK)
    de36:	01 15       	cp	r16, r1
    de38:	11 05       	cpc	r17, r1
    de3a:	21 f0       	breq	.+8      	; 0xde44 <mmc_init+0x176>
		set_error(1);
    de3c:	0e 94 12 25 	call	0x4a24	; 0x4a24 <set_error>
    de40:	c8 01       	movw	r24, r16
    de42:	02 c0       	rjmp	.+4      	; 0xde48 <mmc_init+0x17a>
    de44:	80 e0       	ldi	r24, 0x00	; 0
    de46:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    de48:	2b 96       	adiw	r28, 0x0b	; 11
    de4a:	e6 e0       	ldi	r30, 0x06	; 6
    de4c:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0000de50 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    de50:	80 e0       	ldi	r24, 0x00	; 0
    de52:	90 e0       	ldi	r25, 0x00	; 0
    de54:	08 95       	ret

0000de56 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    de56:	0f 93       	push	r16
    de58:	1f 93       	push	r17
    de5a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    de5c:	46 81       	ldd	r20, Z+6	; 0x06
    de5e:	57 81       	ldd	r21, Z+7	; 0x07
    de60:	05 2e       	mov	r0, r21
    de62:	00 0c       	add	r0, r0
    de64:	66 0b       	sbc	r22, r22
    de66:	77 0b       	sbc	r23, r23
    de68:	ba 01       	movw	r22, r20
    de6a:	55 27       	eor	r21, r21
    de6c:	44 27       	eor	r20, r20
    de6e:	84 81       	ldd	r24, Z+4	; 0x04
    de70:	95 81       	ldd	r25, Z+5	; 0x05
    de72:	09 2e       	mov	r0, r25
    de74:	00 0c       	add	r0, r0
    de76:	aa 0b       	sbc	r26, r26
    de78:	bb 0b       	sbc	r27, r27
    de7a:	2b e0       	ldi	r18, 0x0B	; 11
    de7c:	88 0f       	add	r24, r24
    de7e:	99 1f       	adc	r25, r25
    de80:	aa 1f       	adc	r26, r26
    de82:	bb 1f       	adc	r27, r27
    de84:	2a 95       	dec	r18
    de86:	d1 f7       	brne	.-12     	; 0xde7c <tm_to_fat+0x26>
    de88:	48 2b       	or	r20, r24
    de8a:	59 2b       	or	r21, r25
    de8c:	6a 2b       	or	r22, r26
    de8e:	7b 2b       	or	r23, r27
    de90:	82 81       	ldd	r24, Z+2	; 0x02
    de92:	93 81       	ldd	r25, Z+3	; 0x03
    de94:	09 2e       	mov	r0, r25
    de96:	00 0c       	add	r0, r0
    de98:	aa 0b       	sbc	r26, r26
    de9a:	bb 0b       	sbc	r27, r27
    de9c:	35 e0       	ldi	r19, 0x05	; 5
    de9e:	88 0f       	add	r24, r24
    dea0:	99 1f       	adc	r25, r25
    dea2:	aa 1f       	adc	r26, r26
    dea4:	bb 1f       	adc	r27, r27
    dea6:	3a 95       	dec	r19
    dea8:	d1 f7       	brne	.-12     	; 0xde9e <tm_to_fat+0x48>
    deaa:	48 2b       	or	r20, r24
    deac:	59 2b       	or	r21, r25
    deae:	6a 2b       	or	r22, r26
    deb0:	7b 2b       	or	r23, r27
    deb2:	80 81       	ld	r24, Z
    deb4:	91 81       	ldd	r25, Z+1	; 0x01
    deb6:	09 2e       	mov	r0, r25
    deb8:	00 0c       	add	r0, r0
    deba:	aa 0b       	sbc	r26, r26
    debc:	bb 0b       	sbc	r27, r27
    debe:	b6 95       	lsr	r27
    dec0:	a7 95       	ror	r26
    dec2:	97 95       	ror	r25
    dec4:	87 95       	ror	r24
    dec6:	84 2b       	or	r24, r20
    dec8:	95 2b       	or	r25, r21
    deca:	a6 2b       	or	r26, r22
    decc:	b7 2b       	or	r27, r23
    dece:	02 85       	ldd	r16, Z+10	; 0x0a
    ded0:	13 85       	ldd	r17, Z+11	; 0x0b
    ded2:	00 55       	subi	r16, 0x50	; 80
    ded4:	11 09       	sbc	r17, r1
    ded6:	01 2e       	mov	r0, r17
    ded8:	00 0c       	add	r0, r0
    deda:	22 0b       	sbc	r18, r18
    dedc:	33 0b       	sbc	r19, r19
    dede:	49 e1       	ldi	r20, 0x19	; 25
    dee0:	00 0f       	add	r16, r16
    dee2:	11 1f       	adc	r17, r17
    dee4:	22 1f       	adc	r18, r18
    dee6:	33 1f       	adc	r19, r19
    dee8:	4a 95       	dec	r20
    deea:	d1 f7       	brne	.-12     	; 0xdee0 <tm_to_fat+0x8a>
    deec:	ac 01       	movw	r20, r24
    deee:	bd 01       	movw	r22, r26
    def0:	40 2b       	or	r20, r16
    def2:	51 2b       	or	r21, r17
    def4:	62 2b       	or	r22, r18
    def6:	73 2b       	or	r23, r19
    def8:	80 85       	ldd	r24, Z+8	; 0x08
    defa:	91 85       	ldd	r25, Z+9	; 0x09
    defc:	09 2e       	mov	r0, r25
    defe:	00 0c       	add	r0, r0
    df00:	aa 0b       	sbc	r26, r26
    df02:	bb 0b       	sbc	r27, r27
    df04:	01 96       	adiw	r24, 0x01	; 1
    df06:	a1 1d       	adc	r26, r1
    df08:	b1 1d       	adc	r27, r1
    df0a:	e5 e1       	ldi	r30, 0x15	; 21
    df0c:	88 0f       	add	r24, r24
    df0e:	99 1f       	adc	r25, r25
    df10:	aa 1f       	adc	r26, r26
    df12:	bb 1f       	adc	r27, r27
    df14:	ea 95       	dec	r30
    df16:	d1 f7       	brne	.-12     	; 0xdf0c <tm_to_fat+0xb6>
    df18:	8a 01       	movw	r16, r20
    df1a:	9b 01       	movw	r18, r22
    df1c:	08 2b       	or	r16, r24
    df1e:	19 2b       	or	r17, r25
    df20:	2a 2b       	or	r18, r26
    df22:	3b 2b       	or	r19, r27
    df24:	c9 01       	movw	r24, r18
    df26:	b8 01       	movw	r22, r16
}
    df28:	1f 91       	pop	r17
    df2a:	0f 91       	pop	r16
    df2c:	08 95       	ret

0000df2e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    df2e:	a4 e0       	ldi	r26, 0x04	; 4
    df30:	b0 e0       	ldi	r27, 0x00	; 0
    df32:	ed e9       	ldi	r30, 0x9D	; 157
    df34:	ff e6       	ldi	r31, 0x6F	; 111
    df36:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    df3a:	ce 01       	movw	r24, r28
    df3c:	01 96       	adiw	r24, 0x01	; 1
    df3e:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <time>
    return( tm_to_fat(localtime(&t)));
    df42:	ce 01       	movw	r24, r28
    df44:	01 96       	adiw	r24, 0x01	; 1
    df46:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <localtime>
    df4a:	85 df       	rcall	.-246    	; 0xde56 <tm_to_fat>
}
    df4c:	24 96       	adiw	r28, 0x04	; 4
    df4e:	e2 e0       	ldi	r30, 0x02	; 2
    df50:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000df54 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    df54:	00 d0       	rcall	.+0      	; 0xdf56 <put_rc+0x2>
    df56:	00 d0       	rcall	.+0      	; 0xdf58 <put_rc+0x4>
    df58:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    df5a:	ed b7       	in	r30, 0x3d	; 61
    df5c:	fe b7       	in	r31, 0x3e	; 62
    df5e:	95 83       	std	Z+5, r25	; 0x05
    df60:	84 83       	std	Z+4, r24	; 0x04
    df62:	87 e3       	ldi	r24, 0x37	; 55
    df64:	9a e0       	ldi	r25, 0x0A	; 10
    df66:	a0 e0       	ldi	r26, 0x00	; 0
    df68:	81 83       	std	Z+1, r24	; 0x01
    df6a:	92 83       	std	Z+2, r25	; 0x02
    df6c:	a3 83       	std	Z+3, r26	; 0x03
    df6e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
}
    df72:	0f 90       	pop	r0
    df74:	0f 90       	pop	r0
    df76:	0f 90       	pop	r0
    df78:	0f 90       	pop	r0
    df7a:	0f 90       	pop	r0
    df7c:	08 95       	ret

0000df7e <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    df7e:	a4 e4       	ldi	r26, 0x44	; 68
    df80:	b1 e0       	ldi	r27, 0x01	; 1
    df82:	e5 ec       	ldi	r30, 0xC5	; 197
    df84:	ff e6       	ldi	r31, 0x6F	; 111
    df86:	0c 94 a6 e3 	jmp	0x1c74c	; 0x1c74c <__prologue_saves__+0x16>
    df8a:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    df8c:	bc 01       	movw	r22, r24
    df8e:	ce 01       	movw	r24, r28
    df90:	89 5e       	subi	r24, 0xE9	; 233
    df92:	9e 4f       	sbci	r25, 0xFE	; 254
    df94:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <f_opendir>
    if (fr == FR_OK)
    df98:	00 97       	sbiw	r24, 0x00	; 0
    df9a:	09 f0       	breq	.+2      	; 0xdf9e <fatfs_scan_files+0x20>
    df9c:	5b c0       	rjmp	.+182    	; 0xe054 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df9e:	8f e2       	ldi	r24, 0x2F	; 47
    dfa0:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    dfa2:	be 01       	movw	r22, r28
    dfa4:	6f 5f       	subi	r22, 0xFF	; 255
    dfa6:	7f 4f       	sbci	r23, 0xFF	; 255
    dfa8:	ce 01       	movw	r24, r28
    dfaa:	89 5e       	subi	r24, 0xE9	; 233
    dfac:	9e 4f       	sbci	r25, 0xFE	; 254
    dfae:	0e 94 d6 62 	call	0xc5ac	; 0xc5ac <f_readdir>
    dfb2:	00 97       	sbiw	r24, 0x00	; 0
    dfb4:	09 f0       	breq	.+2      	; 0xdfb8 <fatfs_scan_files+0x3a>
    dfb6:	4e c0       	rjmp	.+156    	; 0xe054 <fatfs_scan_files+0xd6>
    dfb8:	2f 89       	ldd	r18, Y+23	; 0x17
    dfba:	22 23       	and	r18, r18
    dfbc:	09 f4       	brne	.+2      	; 0xdfc0 <fatfs_scan_files+0x42>
    dfbe:	4a c0       	rjmp	.+148    	; 0xe054 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    dfc0:	89 85       	ldd	r24, Y+9	; 0x09
    dfc2:	84 ff       	sbrs	r24, 4
    dfc4:	25 c0       	rjmp	.+74     	; 0xe010 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    dfc6:	80 91 c0 1d 	lds	r24, 0x1DC0	; 0x801dc0 <AccDirs>
    dfca:	90 91 c1 1d 	lds	r25, 0x1DC1	; 0x801dc1 <AccDirs+0x1>
    dfce:	01 96       	adiw	r24, 0x01	; 1
    dfd0:	90 93 c1 1d 	sts	0x1DC1, r25	; 0x801dc1 <AccDirs+0x1>
    dfd4:	80 93 c0 1d 	sts	0x1DC0, r24	; 0x801dc0 <AccDirs>
                i = strlen(path);
    dfd8:	f8 01       	movw	r30, r16
    dfda:	01 90       	ld	r0, Z+
    dfdc:	00 20       	and	r0, r0
    dfde:	e9 f7       	brne	.-6      	; 0xdfda <fatfs_scan_files+0x5c>
    dfe0:	31 97       	sbiw	r30, 0x01	; 1
    dfe2:	e0 1b       	sub	r30, r16
    dfe4:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dfe6:	78 01       	movw	r14, r16
    dfe8:	ee 0e       	add	r14, r30
    dfea:	ff 1e       	adc	r15, r31
    dfec:	d7 01       	movw	r26, r14
    dfee:	dc 92       	st	X, r13
    dff0:	cf 01       	movw	r24, r30
    dff2:	01 96       	adiw	r24, 0x01	; 1
    dff4:	be 01       	movw	r22, r28
    dff6:	69 5e       	subi	r22, 0xE9	; 233
    dff8:	7f 4f       	sbci	r23, 0xFF	; 255
    dffa:	80 0f       	add	r24, r16
    dffc:	91 1f       	adc	r25, r17
    dffe:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <strcpy>
                fr = fatfs_scan_files(path);
    e002:	c8 01       	movw	r24, r16
    e004:	bc df       	rcall	.-136    	; 0xdf7e <fatfs_scan_files>
                path[i] = 0;
    e006:	f7 01       	movw	r30, r14
    e008:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e00a:	00 97       	sbiw	r24, 0x00	; 0
    e00c:	51 f2       	breq	.-108    	; 0xdfa2 <fatfs_scan_files+0x24>
    e00e:	22 c0       	rjmp	.+68     	; 0xe054 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e010:	80 91 c2 1d 	lds	r24, 0x1DC2	; 0x801dc2 <AccFiles>
    e014:	90 91 c3 1d 	lds	r25, 0x1DC3	; 0x801dc3 <AccFiles+0x1>
    e018:	01 96       	adiw	r24, 0x01	; 1
    e01a:	90 93 c3 1d 	sts	0x1DC3, r25	; 0x801dc3 <AccFiles+0x1>
    e01e:	80 93 c2 1d 	sts	0x1DC2, r24	; 0x801dc2 <AccFiles>
                AccSize += info.fsize;
    e022:	40 91 bc 1d 	lds	r20, 0x1DBC	; 0x801dbc <AccSize>
    e026:	50 91 bd 1d 	lds	r21, 0x1DBD	; 0x801dbd <AccSize+0x1>
    e02a:	60 91 be 1d 	lds	r22, 0x1DBE	; 0x801dbe <AccSize+0x2>
    e02e:	70 91 bf 1d 	lds	r23, 0x1DBF	; 0x801dbf <AccSize+0x3>
    e032:	89 81       	ldd	r24, Y+1	; 0x01
    e034:	9a 81       	ldd	r25, Y+2	; 0x02
    e036:	ab 81       	ldd	r26, Y+3	; 0x03
    e038:	bc 81       	ldd	r27, Y+4	; 0x04
    e03a:	84 0f       	add	r24, r20
    e03c:	95 1f       	adc	r25, r21
    e03e:	a6 1f       	adc	r26, r22
    e040:	b7 1f       	adc	r27, r23
    e042:	80 93 bc 1d 	sts	0x1DBC, r24	; 0x801dbc <AccSize>
    e046:	90 93 bd 1d 	sts	0x1DBD, r25	; 0x801dbd <AccSize+0x1>
    e04a:	a0 93 be 1d 	sts	0x1DBE, r26	; 0x801dbe <AccSize+0x2>
    e04e:	b0 93 bf 1d 	sts	0x1DBF, r27	; 0x801dbf <AccSize+0x3>
    e052:	a7 cf       	rjmp	.-178    	; 0xdfa2 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e054:	cc 5b       	subi	r28, 0xBC	; 188
    e056:	de 4f       	sbci	r29, 0xFE	; 254
    e058:	e7 e0       	ldi	r30, 0x07	; 7
    e05a:	0c 94 c2 e3 	jmp	0x1c784	; 0x1c784 <__epilogue_restores__+0x16>

0000e05e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e05e:	01 97       	sbiw	r24, 0x01	; 1
    e060:	84 30       	cpi	r24, 0x04	; 4
    e062:	91 05       	cpc	r25, r1
    e064:	40 f4       	brcc	.+16     	; 0xe076 <fatfs_fstype+0x18>
    e066:	88 0f       	add	r24, r24
    e068:	99 1f       	adc	r25, r25
    e06a:	fc 01       	movw	r30, r24
    e06c:	e6 53       	subi	r30, 0x36	; 54
    e06e:	f7 4f       	sbci	r31, 0xF7	; 247
    e070:	80 81       	ld	r24, Z
    e072:	91 81       	ldd	r25, Z+1	; 0x01
    e074:	08 95       	ret
    char *ptr;
    switch(type)
    e076:	88 ea       	ldi	r24, 0xA8	; 168
    e078:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e07a:	08 95       	ret

0000e07c <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e07c:	a7 e3       	ldi	r26, 0x37	; 55
    e07e:	b0 e0       	ldi	r27, 0x00	; 0
    e080:	e4 e4       	ldi	r30, 0x44	; 68
    e082:	f0 e7       	ldi	r31, 0x70	; 112
    e084:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    e088:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e08a:	fc 01       	movw	r30, r24
    e08c:	21 91       	ld	r18, Z+
    e08e:	cf 01       	movw	r24, r30
    e090:	20 32       	cpi	r18, 0x20	; 32
    e092:	d1 f3       	breq	.-12     	; 0xe088 <fatfs_status+0xc>
    e094:	29 30       	cpi	r18, 0x09	; 9
    e096:	c1 f3       	breq	.-16     	; 0xe088 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e098:	ed b7       	in	r30, 0x3d	; 61
    e09a:	fe b7       	in	r31, 0x3e	; 62
    e09c:	e4 82       	std	Z+4, r14	; 0x04
    e09e:	f5 82       	std	Z+5, r15	; 0x05
    e0a0:	86 e2       	ldi	r24, 0x26	; 38
    e0a2:	9a e0       	ldi	r25, 0x0A	; 10
    e0a4:	a0 e0       	ldi	r26, 0x00	; 0
    e0a6:	81 83       	std	Z+1, r24	; 0x01
    e0a8:	92 83       	std	Z+2, r25	; 0x02
    e0aa:	a3 83       	std	Z+3, r26	; 0x03
    e0ac:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e0b0:	ae 01       	movw	r20, r28
    e0b2:	4a 5c       	subi	r20, 0xCA	; 202
    e0b4:	5f 4f       	sbci	r21, 0xFF	; 255
    e0b6:	be 01       	movw	r22, r28
    e0b8:	6e 5c       	subi	r22, 0xCE	; 206
    e0ba:	7f 4f       	sbci	r23, 0xFF	; 255
    e0bc:	c7 01       	movw	r24, r14
    e0be:	0e 94 58 63 	call	0xc6b0	; 0xc6b0 <f_getfree>
    if (res)
    e0c2:	00 97       	sbiw	r24, 0x00	; 0
    e0c4:	09 f0       	breq	.+2      	; 0xe0c8 <fatfs_status+0x4c>
    e0c6:	f8 c0       	rjmp	.+496    	; 0xe2b8 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e0c8:	ee a9       	ldd	r30, Y+54	; 0x36
    e0ca:	ff a9       	ldd	r31, Y+55	; 0x37
    e0cc:	80 81       	ld	r24, Z
    e0ce:	90 e0       	ldi	r25, 0x00	; 0
    e0d0:	c6 df       	rcall	.-116    	; 0xe05e <fatfs_fstype>
    e0d2:	ed b7       	in	r30, 0x3d	; 61
    e0d4:	fe b7       	in	r31, 0x3e	; 62
    e0d6:	95 83       	std	Z+5, r25	; 0x05
    e0d8:	84 83       	std	Z+4, r24	; 0x04
    e0da:	88 e0       	ldi	r24, 0x08	; 8
    e0dc:	9a e0       	ldi	r25, 0x0A	; 10
    e0de:	a0 e0       	ldi	r26, 0x00	; 0
    e0e0:	81 83       	std	Z+1, r24	; 0x01
    e0e2:	92 83       	std	Z+2, r25	; 0x02
    e0e4:	a3 83       	std	Z+3, r26	; 0x03
    e0e6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e0ea:	ee a9       	ldd	r30, Y+54	; 0x36
    e0ec:	ff a9       	ldd	r31, Y+55	; 0x37
    e0ee:	81 85       	ldd	r24, Z+9	; 0x09
    e0f0:	92 85       	ldd	r25, Z+10	; 0x0a
    e0f2:	a0 e0       	ldi	r26, 0x00	; 0
    e0f4:	b0 e0       	ldi	r27, 0x00	; 0
    e0f6:	39 e0       	ldi	r19, 0x09	; 9
    e0f8:	88 0f       	add	r24, r24
    e0fa:	99 1f       	adc	r25, r25
    e0fc:	aa 1f       	adc	r26, r26
    e0fe:	bb 1f       	adc	r27, r27
    e100:	3a 95       	dec	r19
    e102:	d1 f7       	brne	.-12     	; 0xe0f8 <fatfs_status+0x7c>
    e104:	ed b7       	in	r30, 0x3d	; 61
    e106:	fe b7       	in	r31, 0x3e	; 62
    e108:	84 83       	std	Z+4, r24	; 0x04
    e10a:	95 83       	std	Z+5, r25	; 0x05
    e10c:	a6 83       	std	Z+6, r26	; 0x06
    e10e:	b7 83       	std	Z+7, r27	; 0x07
    e110:	89 ee       	ldi	r24, 0xE9	; 233
    e112:	99 e0       	ldi	r25, 0x09	; 9
    e114:	a0 e0       	ldi	r26, 0x00	; 0
    e116:	81 83       	std	Z+1, r24	; 0x01
    e118:	92 83       	std	Z+2, r25	; 0x02
    e11a:	a3 83       	std	Z+3, r26	; 0x03
    e11c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e120:	ee a9       	ldd	r30, Y+54	; 0x36
    e122:	ff a9       	ldd	r31, Y+55	; 0x37
    e124:	82 81       	ldd	r24, Z+2	; 0x02
    e126:	90 e0       	ldi	r25, 0x00	; 0
    e128:	ed b7       	in	r30, 0x3d	; 61
    e12a:	fe b7       	in	r31, 0x3e	; 62
    e12c:	95 83       	std	Z+5, r25	; 0x05
    e12e:	84 83       	std	Z+4, r24	; 0x04
    e130:	8b ec       	ldi	r24, 0xCB	; 203
    e132:	99 e0       	ldi	r25, 0x09	; 9
    e134:	a0 e0       	ldi	r26, 0x00	; 0
    e136:	81 83       	std	Z+1, r24	; 0x01
    e138:	92 83       	std	Z+2, r25	; 0x02
    e13a:	a3 83       	std	Z+3, r26	; 0x03
    e13c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e140:	ee a9       	ldd	r30, Y+54	; 0x36
    e142:	ff a9       	ldd	r31, Y+55	; 0x37
    e144:	87 81       	ldd	r24, Z+7	; 0x07
    e146:	90 85       	ldd	r25, Z+8	; 0x08
    e148:	ed b7       	in	r30, 0x3d	; 61
    e14a:	fe b7       	in	r31, 0x3e	; 62
    e14c:	95 83       	std	Z+5, r25	; 0x05
    e14e:	84 83       	std	Z+4, r24	; 0x04
    e150:	8d ea       	ldi	r24, 0xAD	; 173
    e152:	99 e0       	ldi	r25, 0x09	; 9
    e154:	a0 e0       	ldi	r26, 0x00	; 0
    e156:	81 83       	std	Z+1, r24	; 0x01
    e158:	92 83       	std	Z+2, r25	; 0x02
    e15a:	a3 83       	std	Z+3, r26	; 0x03
    e15c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e160:	ee a9       	ldd	r30, Y+54	; 0x36
    e162:	ff a9       	ldd	r31, Y+55	; 0x37
    e164:	85 8d       	ldd	r24, Z+29	; 0x1d
    e166:	96 8d       	ldd	r25, Z+30	; 0x1e
    e168:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e16a:	b0 a1       	ldd	r27, Z+32	; 0x20
    e16c:	ed b7       	in	r30, 0x3d	; 61
    e16e:	fe b7       	in	r31, 0x3e	; 62
    e170:	84 83       	std	Z+4, r24	; 0x04
    e172:	95 83       	std	Z+5, r25	; 0x05
    e174:	a6 83       	std	Z+6, r26	; 0x06
    e176:	b7 83       	std	Z+7, r27	; 0x07
    e178:	8e e8       	ldi	r24, 0x8E	; 142
    e17a:	99 e0       	ldi	r25, 0x09	; 9
    e17c:	a0 e0       	ldi	r26, 0x00	; 0
    e17e:	81 83       	std	Z+1, r24	; 0x01
    e180:	92 83       	std	Z+2, r25	; 0x02
    e182:	a3 83       	std	Z+3, r26	; 0x03
    e184:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e188:	ee a9       	ldd	r30, Y+54	; 0x36
    e18a:	ff a9       	ldd	r31, Y+55	; 0x37
    e18c:	81 8d       	ldd	r24, Z+25	; 0x19
    e18e:	92 8d       	ldd	r25, Z+26	; 0x1a
    e190:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e192:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e194:	02 97       	sbiw	r24, 0x02	; 2
    e196:	a1 09       	sbc	r26, r1
    e198:	b1 09       	sbc	r27, r1
    e19a:	ed b7       	in	r30, 0x3d	; 61
    e19c:	fe b7       	in	r31, 0x3e	; 62
    e19e:	84 83       	std	Z+4, r24	; 0x04
    e1a0:	95 83       	std	Z+5, r25	; 0x05
    e1a2:	a6 83       	std	Z+6, r26	; 0x06
    e1a4:	b7 83       	std	Z+7, r27	; 0x07
    e1a6:	8f e6       	ldi	r24, 0x6F	; 111
    e1a8:	99 e0       	ldi	r25, 0x09	; 9
    e1aa:	a0 e0       	ldi	r26, 0x00	; 0
    e1ac:	81 83       	std	Z+1, r24	; 0x01
    e1ae:	92 83       	std	Z+2, r25	; 0x02
    e1b0:	a3 83       	std	Z+3, r26	; 0x03
    e1b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e1b6:	ee a9       	ldd	r30, Y+54	; 0x36
    e1b8:	ff a9       	ldd	r31, Y+55	; 0x37
    e1ba:	85 a1       	ldd	r24, Z+37	; 0x25
    e1bc:	96 a1       	ldd	r25, Z+38	; 0x26
    e1be:	a7 a1       	ldd	r26, Z+39	; 0x27
    e1c0:	b0 a5       	ldd	r27, Z+40	; 0x28
    e1c2:	ed b7       	in	r30, 0x3d	; 61
    e1c4:	fe b7       	in	r31, 0x3e	; 62
    e1c6:	84 83       	std	Z+4, r24	; 0x04
    e1c8:	95 83       	std	Z+5, r25	; 0x05
    e1ca:	a6 83       	std	Z+6, r26	; 0x06
    e1cc:	b7 83       	std	Z+7, r27	; 0x07
    e1ce:	80 e5       	ldi	r24, 0x50	; 80
    e1d0:	99 e0       	ldi	r25, 0x09	; 9
    e1d2:	a0 e0       	ldi	r26, 0x00	; 0
    e1d4:	81 83       	std	Z+1, r24	; 0x01
    e1d6:	92 83       	std	Z+2, r25	; 0x02
    e1d8:	a3 83       	std	Z+3, r26	; 0x03
    e1da:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e1de:	ee a9       	ldd	r30, Y+54	; 0x36
    e1e0:	ff a9       	ldd	r31, Y+55	; 0x37
    e1e2:	81 a5       	ldd	r24, Z+41	; 0x29
    e1e4:	92 a5       	ldd	r25, Z+42	; 0x2a
    e1e6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e1e8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e1ea:	ed b7       	in	r30, 0x3d	; 61
    e1ec:	fe b7       	in	r31, 0x3e	; 62
    e1ee:	84 83       	std	Z+4, r24	; 0x04
    e1f0:	95 83       	std	Z+5, r25	; 0x05
    e1f2:	a6 83       	std	Z+6, r26	; 0x06
    e1f4:	b7 83       	std	Z+7, r27	; 0x07
    e1f6:	81 e3       	ldi	r24, 0x31	; 49
    e1f8:	99 e0       	ldi	r25, 0x09	; 9
    e1fa:	a0 e0       	ldi	r26, 0x00	; 0
    e1fc:	81 83       	std	Z+1, r24	; 0x01
    e1fe:	92 83       	std	Z+2, r25	; 0x02
    e200:	a3 83       	std	Z+3, r26	; 0x03
    e202:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e206:	ee a9       	ldd	r30, Y+54	; 0x36
    e208:	ff a9       	ldd	r31, Y+55	; 0x37
    e20a:	85 a5       	ldd	r24, Z+45	; 0x2d
    e20c:	96 a5       	ldd	r25, Z+46	; 0x2e
    e20e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e210:	b0 a9       	ldd	r27, Z+48	; 0x30
    e212:	ed b7       	in	r30, 0x3d	; 61
    e214:	fe b7       	in	r31, 0x3e	; 62
    e216:	84 83       	std	Z+4, r24	; 0x04
    e218:	95 83       	std	Z+5, r25	; 0x05
    e21a:	a6 83       	std	Z+6, r26	; 0x06
    e21c:	b7 83       	std	Z+7, r27	; 0x07
    e21e:	82 e1       	ldi	r24, 0x12	; 18
    e220:	99 e0       	ldi	r25, 0x09	; 9
    e222:	a0 e0       	ldi	r26, 0x00	; 0
    e224:	81 83       	std	Z+1, r24	; 0x01
    e226:	92 83       	std	Z+2, r25	; 0x02
    e228:	a3 83       	std	Z+3, r26	; 0x03
    e22a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e22e:	ae 01       	movw	r20, r28
    e230:	42 5d       	subi	r20, 0xD2	; 210
    e232:	5f 4f       	sbci	r21, 0xFF	; 255
    e234:	be 01       	movw	r22, r28
    e236:	6c 5e       	subi	r22, 0xEC	; 236
    e238:	7f 4f       	sbci	r23, 0xFF	; 255
    e23a:	c7 01       	movw	r24, r14
    e23c:	0e 94 8a 67 	call	0xcf14	; 0xcf14 <f_getlabel>
    if (res)
    e240:	00 97       	sbiw	r24, 0x00	; 0
    e242:	d1 f5       	brne	.+116    	; 0xe2b8 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e244:	8c 89       	ldd	r24, Y+20	; 0x14
    e246:	81 11       	cpse	r24, r1
    e248:	03 c0       	rjmp	.+6      	; 0xe250 <fatfs_status+0x1d4>
    e24a:	80 eb       	ldi	r24, 0xB0	; 176
    e24c:	98 e0       	ldi	r25, 0x08	; 8
    e24e:	02 c0       	rjmp	.+4      	; 0xe254 <fatfs_status+0x1d8>
    e250:	ce 01       	movw	r24, r28
    e252:	44 96       	adiw	r24, 0x14	; 20
    e254:	ed b7       	in	r30, 0x3d	; 61
    e256:	fe b7       	in	r31, 0x3e	; 62
    e258:	95 83       	std	Z+5, r25	; 0x05
    e25a:	84 83       	std	Z+4, r24	; 0x04
    e25c:	84 ef       	ldi	r24, 0xF4	; 244
    e25e:	98 e0       	ldi	r25, 0x08	; 8
    e260:	a0 e0       	ldi	r26, 0x00	; 0
    e262:	81 83       	std	Z+1, r24	; 0x01
    e264:	92 83       	std	Z+2, r25	; 0x02
    e266:	a3 83       	std	Z+3, r26	; 0x03
    e268:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e26c:	8e a5       	ldd	r24, Y+46	; 0x2e
    e26e:	9f a5       	ldd	r25, Y+47	; 0x2f
    e270:	a8 a9       	ldd	r26, Y+48	; 0x30
    e272:	b9 a9       	ldd	r27, Y+49	; 0x31
    e274:	ed b7       	in	r30, 0x3d	; 61
    e276:	fe b7       	in	r31, 0x3e	; 62
    e278:	97 83       	std	Z+7, r25	; 0x07
    e27a:	86 83       	std	Z+6, r24	; 0x06
    e27c:	b5 83       	std	Z+5, r27	; 0x05
    e27e:	a4 83       	std	Z+4, r26	; 0x04
    e280:	8f ec       	ldi	r24, 0xCF	; 207
    e282:	98 e0       	ldi	r25, 0x08	; 8
    e284:	a0 e0       	ldi	r26, 0x00	; 0
    e286:	81 83       	std	Z+1, r24	; 0x01
    e288:	92 83       	std	Z+2, r25	; 0x02
    e28a:	a3 83       	std	Z+3, r26	; 0x03
    e28c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e290:	10 92 c1 1d 	sts	0x1DC1, r1	; 0x801dc1 <AccDirs+0x1>
    e294:	10 92 c0 1d 	sts	0x1DC0, r1	; 0x801dc0 <AccDirs>
    e298:	10 92 c3 1d 	sts	0x1DC3, r1	; 0x801dc3 <AccFiles+0x1>
    e29c:	10 92 c2 1d 	sts	0x1DC2, r1	; 0x801dc2 <AccFiles>
    e2a0:	10 92 bc 1d 	sts	0x1DBC, r1	; 0x801dbc <AccSize>
    e2a4:	10 92 bd 1d 	sts	0x1DBD, r1	; 0x801dbd <AccSize+0x1>
    e2a8:	10 92 be 1d 	sts	0x1DBE, r1	; 0x801dbe <AccSize+0x2>
    e2ac:	10 92 bf 1d 	sts	0x1DBF, r1	; 0x801dbf <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e2b0:	c7 01       	movw	r24, r14
    e2b2:	65 de       	rcall	.-822    	; 0xdf7e <fatfs_scan_files>
    if (res)
    e2b4:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e2b6:	11 f0       	breq	.+4      	; 0xe2bc <fatfs_status+0x240>
    e2b8:	4d de       	rcall	.-870    	; 0xdf54 <put_rc>
        return;
    e2ba:	56 c0       	rjmp	.+172    	; 0xe368 <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e2bc:	0e a9       	ldd	r16, Y+54	; 0x36
    e2be:	1f a9       	ldd	r17, Y+55	; 0x37
    e2c0:	f8 01       	movw	r30, r16
    e2c2:	c1 84       	ldd	r12, Z+9	; 0x09
    e2c4:	d2 84       	ldd	r13, Z+10	; 0x0a
    e2c6:	e1 2c       	mov	r14, r1
    e2c8:	f1 2c       	mov	r15, r1
    e2ca:	6a a9       	ldd	r22, Y+50	; 0x32
    e2cc:	7b a9       	ldd	r23, Y+51	; 0x33
    e2ce:	8c a9       	ldd	r24, Y+52	; 0x34
    e2d0:	9d a9       	ldd	r25, Y+53	; 0x35
    e2d2:	a7 01       	movw	r20, r14
    e2d4:	96 01       	movw	r18, r12
    e2d6:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
    e2da:	22 e0       	ldi	r18, 0x02	; 2
    e2dc:	30 e0       	ldi	r19, 0x00	; 0
    e2de:	40 e0       	ldi	r20, 0x00	; 0
    e2e0:	50 e0       	ldi	r21, 0x00	; 0
    e2e2:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
    e2e6:	ed b7       	in	r30, 0x3d	; 61
    e2e8:	fe b7       	in	r31, 0x3e	; 62
    e2ea:	20 8b       	std	Z+16, r18	; 0x10
    e2ec:	31 8b       	std	Z+17, r19	; 0x11
    e2ee:	42 8b       	std	Z+18, r20	; 0x12
    e2f0:	53 8b       	std	Z+19, r21	; 0x13
    e2f2:	f8 01       	movw	r30, r16
    e2f4:	81 8d       	ldd	r24, Z+25	; 0x19
    e2f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2f8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2fa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2fc:	9c 01       	movw	r18, r24
    e2fe:	ad 01       	movw	r20, r26
    e300:	22 50       	subi	r18, 0x02	; 2
    e302:	31 09       	sbc	r19, r1
    e304:	41 09       	sbc	r20, r1
    e306:	51 09       	sbc	r21, r1
    e308:	c7 01       	movw	r24, r14
    e30a:	b6 01       	movw	r22, r12
    e30c:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
    e310:	dc 01       	movw	r26, r24
    e312:	cb 01       	movw	r24, r22
    e314:	b6 95       	lsr	r27
    e316:	a7 95       	ror	r26
    e318:	97 95       	ror	r25
    e31a:	87 95       	ror	r24
    e31c:	ed b7       	in	r30, 0x3d	; 61
    e31e:	fe b7       	in	r31, 0x3e	; 62
    e320:	84 87       	std	Z+12, r24	; 0x0c
    e322:	95 87       	std	Z+13, r25	; 0x0d
    e324:	a6 87       	std	Z+14, r26	; 0x0e
    e326:	b7 87       	std	Z+15, r27	; 0x0f
    e328:	80 91 c0 1d 	lds	r24, 0x1DC0	; 0x801dc0 <AccDirs>
    e32c:	90 91 c1 1d 	lds	r25, 0x1DC1	; 0x801dc1 <AccDirs+0x1>
    e330:	93 87       	std	Z+11, r25	; 0x0b
    e332:	82 87       	std	Z+10, r24	; 0x0a
    e334:	80 91 bc 1d 	lds	r24, 0x1DBC	; 0x801dbc <AccSize>
    e338:	90 91 bd 1d 	lds	r25, 0x1DBD	; 0x801dbd <AccSize+0x1>
    e33c:	a0 91 be 1d 	lds	r26, 0x1DBE	; 0x801dbe <AccSize+0x2>
    e340:	b0 91 bf 1d 	lds	r27, 0x1DBF	; 0x801dbf <AccSize+0x3>
    e344:	86 83       	std	Z+6, r24	; 0x06
    e346:	97 83       	std	Z+7, r25	; 0x07
    e348:	a0 87       	std	Z+8, r26	; 0x08
    e34a:	b1 87       	std	Z+9, r27	; 0x09
    e34c:	80 91 c2 1d 	lds	r24, 0x1DC2	; 0x801dc2 <AccFiles>
    e350:	90 91 c3 1d 	lds	r25, 0x1DC3	; 0x801dc3 <AccFiles+0x1>
    e354:	95 83       	std	Z+5, r25	; 0x05
    e356:	84 83       	std	Z+4, r24	; 0x04
    e358:	82 e8       	ldi	r24, 0x82	; 130
    e35a:	98 e0       	ldi	r25, 0x08	; 8
    e35c:	a0 e0       	ldi	r26, 0x00	; 0
    e35e:	81 83       	std	Z+1, r24	; 0x01
    e360:	92 83       	std	Z+2, r25	; 0x02
    e362:	a3 83       	std	Z+3, r26	; 0x03
    e364:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e368:	e7 96       	adiw	r28, 0x37	; 55
    e36a:	e8 e0       	ldi	r30, 0x08	; 8
    e36c:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000e370 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e370:	ab e1       	ldi	r26, 0x1B	; 27
    e372:	b0 e0       	ldi	r27, 0x00	; 0
    e374:	ee eb       	ldi	r30, 0xBE	; 190
    e376:	f1 e7       	ldi	r31, 0x71	; 113
    e378:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    e37c:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e37e:	fc 01       	movw	r30, r24
    e380:	86 89       	ldd	r24, Z+22	; 0x16
    e382:	81 11       	cpse	r24, r1
    e384:	03 c0       	rjmp	.+6      	; 0xe38c <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e386:	87 e6       	ldi	r24, 0x67	; 103
    e388:	98 e0       	ldi	r25, 0x08	; 8
    e38a:	69 c0       	rjmp	.+210    	; 0xe45e <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e38c:	fd 01       	movw	r30, r26
    e38e:	80 85       	ldd	r24, Z+8	; 0x08
    e390:	84 fd       	sbrc	r24, 4
    e392:	02 c0       	rjmp	.+4      	; 0xe398 <fatfs_filinfo_list+0x28>
    e394:	9d e2       	ldi	r25, 0x2D	; 45
    e396:	01 c0       	rjmp	.+2      	; 0xe39a <fatfs_filinfo_list+0x2a>
    e398:	94 e4       	ldi	r25, 0x44	; 68
    e39a:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e39c:	80 fd       	sbrc	r24, 0
    e39e:	02 c0       	rjmp	.+4      	; 0xe3a4 <fatfs_filinfo_list+0x34>
    e3a0:	9d e2       	ldi	r25, 0x2D	; 45
    e3a2:	01 c0       	rjmp	.+2      	; 0xe3a6 <fatfs_filinfo_list+0x36>
    e3a4:	92 e5       	ldi	r25, 0x52	; 82
    e3a6:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e3a8:	81 fd       	sbrc	r24, 1
    e3aa:	02 c0       	rjmp	.+4      	; 0xe3b0 <fatfs_filinfo_list+0x40>
    e3ac:	9d e2       	ldi	r25, 0x2D	; 45
    e3ae:	01 c0       	rjmp	.+2      	; 0xe3b2 <fatfs_filinfo_list+0x42>
    e3b0:	98 e4       	ldi	r25, 0x48	; 72
    e3b2:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e3b4:	82 fd       	sbrc	r24, 2
    e3b6:	02 c0       	rjmp	.+4      	; 0xe3bc <fatfs_filinfo_list+0x4c>
    e3b8:	9d e2       	ldi	r25, 0x2D	; 45
    e3ba:	01 c0       	rjmp	.+2      	; 0xe3be <fatfs_filinfo_list+0x4e>
    e3bc:	93 e5       	ldi	r25, 0x53	; 83
    e3be:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e3c0:	85 fd       	sbrc	r24, 5
    e3c2:	02 c0       	rjmp	.+4      	; 0xe3c8 <fatfs_filinfo_list+0x58>
    e3c4:	8d e2       	ldi	r24, 0x2D	; 45
    e3c6:	01 c0       	rjmp	.+2      	; 0xe3ca <fatfs_filinfo_list+0x5a>
    e3c8:	81 e4       	ldi	r24, 0x41	; 65
    e3ca:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e3cc:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e3ce:	fd 01       	movw	r30, r26
    e3d0:	24 81       	ldd	r18, Z+4	; 0x04
    e3d2:	35 81       	ldd	r19, Z+5	; 0x05
    e3d4:	46 81       	ldd	r20, Z+6	; 0x06
    e3d6:	57 81       	ldd	r21, Z+7	; 0x07
    e3d8:	cd 01       	movw	r24, r26
    e3da:	46 96       	adiw	r24, 0x16	; 22
    e3dc:	ed b7       	in	r30, 0x3d	; 61
    e3de:	fe b7       	in	r31, 0x3e	; 62
    e3e0:	95 8b       	std	Z+21, r25	; 0x15
    e3e2:	84 8b       	std	Z+20, r24	; 0x14
    e3e4:	8d 91       	ld	r24, X+
    e3e6:	9d 91       	ld	r25, X+
    e3e8:	0d 90       	ld	r0, X+
    e3ea:	bc 91       	ld	r27, X
    e3ec:	a0 2d       	mov	r26, r0
    e3ee:	80 8b       	std	Z+16, r24	; 0x10
    e3f0:	91 8b       	std	Z+17, r25	; 0x11
    e3f2:	a2 8b       	std	Z+18, r26	; 0x12
    e3f4:	b3 8b       	std	Z+19, r27	; 0x13
    e3f6:	ca 01       	movw	r24, r20
    e3f8:	45 e0       	ldi	r20, 0x05	; 5
    e3fa:	96 95       	lsr	r25
    e3fc:	87 95       	ror	r24
    e3fe:	4a 95       	dec	r20
    e400:	e1 f7       	brne	.-8      	; 0xe3fa <fatfs_filinfo_list+0x8a>
    e402:	8f 73       	andi	r24, 0x3F	; 63
    e404:	99 27       	eor	r25, r25
    e406:	97 87       	std	Z+15, r25	; 0x0f
    e408:	86 87       	std	Z+14, r24	; 0x0e
    e40a:	85 2f       	mov	r24, r21
    e40c:	86 95       	lsr	r24
    e40e:	86 95       	lsr	r24
    e410:	86 95       	lsr	r24
    e412:	84 87       	std	Z+12, r24	; 0x0c
    e414:	15 86       	std	Z+13, r1	; 0x0d
    e416:	c9 01       	movw	r24, r18
    e418:	8f 71       	andi	r24, 0x1F	; 31
    e41a:	99 27       	eor	r25, r25
    e41c:	93 87       	std	Z+11, r25	; 0x0b
    e41e:	82 87       	std	Z+10, r24	; 0x0a
    e420:	c9 01       	movw	r24, r18
    e422:	55 e0       	ldi	r21, 0x05	; 5
    e424:	96 95       	lsr	r25
    e426:	87 95       	ror	r24
    e428:	5a 95       	dec	r21
    e42a:	e1 f7       	brne	.-8      	; 0xe424 <fatfs_filinfo_list+0xb4>
    e42c:	8f 70       	andi	r24, 0x0F	; 15
    e42e:	99 27       	eor	r25, r25
    e430:	91 87       	std	Z+9, r25	; 0x09
    e432:	80 87       	std	Z+8, r24	; 0x08
    e434:	23 2f       	mov	r18, r19
    e436:	33 27       	eor	r19, r19
    e438:	26 95       	lsr	r18
    e43a:	24 54       	subi	r18, 0x44	; 68
    e43c:	38 4f       	sbci	r19, 0xF8	; 248
    e43e:	37 83       	std	Z+7, r19	; 0x07
    e440:	26 83       	std	Z+6, r18	; 0x06
    e442:	ce 01       	movw	r24, r28
    e444:	46 96       	adiw	r24, 0x16	; 22
    e446:	95 83       	std	Z+5, r25	; 0x05
    e448:	84 83       	std	Z+4, r24	; 0x04
    e44a:	85 e4       	ldi	r24, 0x45	; 69
    e44c:	98 e0       	ldi	r25, 0x08	; 8
    e44e:	a0 e0       	ldi	r26, 0x00	; 0
    e450:	81 83       	std	Z+1, r24	; 0x01
    e452:	92 83       	std	Z+2, r25	; 0x02
    e454:	a3 83       	std	Z+3, r26	; 0x03
    e456:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e45a:	83 e4       	ldi	r24, 0x43	; 67
    e45c:	98 e0       	ldi	r25, 0x08	; 8
    e45e:	a0 e0       	ldi	r26, 0x00	; 0
    e460:	ed b7       	in	r30, 0x3d	; 61
    e462:	fe b7       	in	r31, 0x3e	; 62
    e464:	81 83       	std	Z+1, r24	; 0x01
    e466:	92 83       	std	Z+2, r25	; 0x02
    e468:	a3 83       	std	Z+3, r26	; 0x03
    e46a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
    e46e:	6b 96       	adiw	r28, 0x1b	; 27
    e470:	e2 e0       	ldi	r30, 0x02	; 2
    e472:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000e476 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e476:	cf 93       	push	r28
    e478:	df 93       	push	r29
    e47a:	00 d0       	rcall	.+0      	; 0xe47c <fatfs_help+0x6>
    e47c:	1f 92       	push	r1
    e47e:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e480:	83 e7       	ldi	r24, 0x73	; 115
    e482:	9b e0       	ldi	r25, 0x0B	; 11
    e484:	a0 e0       	ldi	r26, 0x00	; 0
    e486:	ed b7       	in	r30, 0x3d	; 61
    e488:	fe b7       	in	r31, 0x3e	; 62
    e48a:	81 83       	std	Z+1, r24	; 0x01
    e48c:	92 83       	std	Z+2, r25	; 0x02
    e48e:	a3 83       	std	Z+3, r26	; 0x03
    e490:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    if(full)
    e494:	cd 2b       	or	r28, r29
    e496:	51 f0       	breq	.+20     	; 0xe4ac <fatfs_help+0x36>
    {
        printf(
    e498:	8c ef       	ldi	r24, 0xFC	; 252
    e49a:	9a e0       	ldi	r25, 0x0A	; 10
    e49c:	a0 e0       	ldi	r26, 0x00	; 0
    e49e:	ed b7       	in	r30, 0x3d	; 61
    e4a0:	fe b7       	in	r31, 0x3e	; 62
    e4a2:	81 83       	std	Z+1, r24	; 0x01
    e4a4:	92 83       	std	Z+2, r25	; 0x02
    e4a6:	a3 83       	std	Z+3, r26	; 0x03
    e4a8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    #endif
            "\n"
            );
    }

}
    e4ac:	cd b7       	in	r28, 0x3d	; 61
    e4ae:	de b7       	in	r29, 0x3e	; 62
    e4b0:	23 96       	adiw	r28, 0x03	; 3
    e4b2:	e2 e0       	ldi	r30, 0x02	; 2
    e4b4:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000e4b8 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e4b8:	a5 e5       	ldi	r26, 0x55	; 85
    e4ba:	b3 e0       	ldi	r27, 0x03	; 3
    e4bc:	e2 e6       	ldi	r30, 0x62	; 98
    e4be:	f2 e7       	ldi	r31, 0x72	; 114
    e4c0:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[512];

	memset(buff,0,sizeof(buff)-1);
    e4c4:	8e 01       	movw	r16, r28
    e4c6:	04 5f       	subi	r16, 0xF4	; 244
    e4c8:	1f 4f       	sbci	r17, 0xFF	; 255
    e4ca:	2f ef       	ldi	r18, 0xFF	; 255
    e4cc:	31 e0       	ldi	r19, 0x01	; 1
    e4ce:	f8 01       	movw	r30, r16
    e4d0:	a9 01       	movw	r20, r18
    e4d2:	11 92       	st	Z+, r1
    e4d4:	41 50       	subi	r20, 0x01	; 1
    e4d6:	50 40       	sbci	r21, 0x00	; 0
    e4d8:	e1 f7       	brne	.-8      	; 0xe4d2 <fatfs_ls+0x1a>

    if(!name || !*name)
    e4da:	00 97       	sbiw	r24, 0x00	; 0
    e4dc:	21 f0       	breq	.+8      	; 0xe4e6 <fatfs_ls+0x2e>
    e4de:	fc 01       	movw	r30, r24
    e4e0:	20 81       	ld	r18, Z
    e4e2:	21 11       	cpse	r18, r1
    e4e4:	03 c0       	rjmp	.+6      	; 0xe4ec <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e4e6:	6d ef       	ldi	r22, 0xFD	; 253
    e4e8:	72 e1       	ldi	r23, 0x12	; 18
    e4ea:	01 c0       	rjmp	.+2      	; 0xe4ee <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e4ec:	bc 01       	movw	r22, r24
    e4ee:	c8 01       	movw	r24, r16
    e4f0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e4f4:	ed b7       	in	r30, 0x3d	; 61
    e4f6:	fe b7       	in	r31, 0x3e	; 62
    e4f8:	15 83       	std	Z+5, r17	; 0x05
    e4fa:	04 83       	std	Z+4, r16	; 0x04
    e4fc:	8c e7       	ldi	r24, 0x7C	; 124
    e4fe:	9a e0       	ldi	r25, 0x0A	; 10
    e500:	a0 e0       	ldi	r26, 0x00	; 0
    e502:	81 83       	std	Z+1, r24	; 0x01
    e504:	92 83       	std	Z+2, r25	; 0x02
    e506:	a3 83       	std	Z+3, r26	; 0x03
    e508:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    res = f_opendir(&dirs, buff);
    e50c:	b8 01       	movw	r22, r16
    e50e:	ce 01       	movw	r24, r28
    e510:	8e 5d       	subi	r24, 0xDE	; 222
    e512:	9c 4f       	sbci	r25, 0xFC	; 252
    e514:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <f_opendir>
    if (res) { put_rc(res); return; }
    e518:	00 97       	sbiw	r24, 0x00	; 0
    e51a:	11 f0       	breq	.+4      	; 0xe520 <fatfs_ls+0x68>
    e51c:	1b dd       	rcall	.-1482   	; 0xdf54 <put_rc>
    e51e:	97 c0       	rjmp	.+302    	; 0xe64e <fatfs_ls+0x196>
    p1 = s1 = s2 = 0;
    e520:	c0 5b       	subi	r28, 0xB0	; 176
    e522:	dc 4f       	sbci	r29, 0xFC	; 252
    e524:	18 82       	st	Y, r1
    e526:	19 82       	std	Y+1, r1	; 0x01
    e528:	1a 82       	std	Y+2, r1	; 0x02
    e52a:	1b 82       	std	Y+3, r1	; 0x03
    e52c:	c0 55       	subi	r28, 0x50	; 80
    e52e:	d3 40       	sbci	r29, 0x03	; 3
    e530:	c1 2c       	mov	r12, r1
    e532:	d1 2c       	mov	r13, r1
    e534:	e1 2c       	mov	r14, r1
    e536:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e538:	be 01       	movw	r22, r28
    e53a:	64 5f       	subi	r22, 0xF4	; 244
    e53c:	7d 4f       	sbci	r23, 0xFD	; 253
    e53e:	ce 01       	movw	r24, r28
    e540:	8e 5d       	subi	r24, 0xDE	; 222
    e542:	9c 4f       	sbci	r25, 0xFC	; 252
    e544:	0e 94 d6 62 	call	0xc5ac	; 0xc5ac <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e548:	89 2b       	or	r24, r25
    e54a:	b1 f5       	brne	.+108    	; 0xe5b8 <fatfs_ls+0x100>
    e54c:	ce 5d       	subi	r28, 0xDE	; 222
    e54e:	dd 4f       	sbci	r29, 0xFD	; 253
    e550:	88 81       	ld	r24, Y
    e552:	c2 52       	subi	r28, 0x22	; 34
    e554:	d2 40       	sbci	r29, 0x02	; 2
    e556:	88 23       	and	r24, r24
    e558:	79 f1       	breq	.+94     	; 0xe5b8 <fatfs_ls+0x100>
        if (fno.fattrib & AM_DIR)
    e55a:	cc 5e       	subi	r28, 0xEC	; 236
    e55c:	dd 4f       	sbci	r29, 0xFD	; 253
    e55e:	88 81       	ld	r24, Y
    e560:	c4 51       	subi	r28, 0x14	; 20
    e562:	d2 40       	sbci	r29, 0x02	; 2
    e564:	84 ff       	sbrs	r24, 4
    e566:	04 c0       	rjmp	.+8      	; 0xe570 <fatfs_ls+0xb8>
        {
            s2++;
    e568:	ff ef       	ldi	r31, 0xFF	; 255
    e56a:	cf 1a       	sub	r12, r31
    e56c:	df 0a       	sbc	r13, r31
    e56e:	1f c0       	rjmp	.+62     	; 0xe5ae <fatfs_ls+0xf6>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e570:	4f ef       	ldi	r20, 0xFF	; 255
    e572:	e4 1a       	sub	r14, r20
    e574:	f4 0a       	sbc	r15, r20
    e576:	c4 5f       	subi	r28, 0xF4	; 244
    e578:	dd 4f       	sbci	r29, 0xFD	; 253
    e57a:	48 81       	ld	r20, Y
    e57c:	59 81       	ldd	r21, Y+1	; 0x01
    e57e:	6a 81       	ldd	r22, Y+2	; 0x02
    e580:	7b 81       	ldd	r23, Y+3	; 0x03
    e582:	cc 50       	subi	r28, 0x0C	; 12
    e584:	d2 40       	sbci	r29, 0x02	; 2
    e586:	c0 5b       	subi	r28, 0xB0	; 176
    e588:	dc 4f       	sbci	r29, 0xFC	; 252
    e58a:	88 81       	ld	r24, Y
    e58c:	99 81       	ldd	r25, Y+1	; 0x01
    e58e:	aa 81       	ldd	r26, Y+2	; 0x02
    e590:	bb 81       	ldd	r27, Y+3	; 0x03
    e592:	c0 55       	subi	r28, 0x50	; 80
    e594:	d3 40       	sbci	r29, 0x03	; 3
    e596:	84 0f       	add	r24, r20
    e598:	95 1f       	adc	r25, r21
    e59a:	a6 1f       	adc	r26, r22
    e59c:	b7 1f       	adc	r27, r23
    e59e:	c0 5b       	subi	r28, 0xB0	; 176
    e5a0:	dc 4f       	sbci	r29, 0xFC	; 252
    e5a2:	88 83       	st	Y, r24
    e5a4:	99 83       	std	Y+1, r25	; 0x01
    e5a6:	aa 83       	std	Y+2, r26	; 0x02
    e5a8:	bb 83       	std	Y+3, r27	; 0x03
    e5aa:	c0 55       	subi	r28, 0x50	; 80
    e5ac:	d3 40       	sbci	r29, 0x03	; 3
        }
        fatfs_filinfo_list(&fno);
    e5ae:	ce 01       	movw	r24, r28
    e5b0:	84 5f       	subi	r24, 0xF4	; 244
    e5b2:	9d 4f       	sbci	r25, 0xFD	; 253
    e5b4:	dd de       	rcall	.-582    	; 0xe370 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e5b6:	c0 cf       	rjmp	.-128    	; 0xe538 <fatfs_ls+0x80>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e5b8:	ed b7       	in	r30, 0x3d	; 61
    e5ba:	fe b7       	in	r31, 0x3e	; 62
    e5bc:	d3 86       	std	Z+11, r13	; 0x0b
    e5be:	c2 86       	std	Z+10, r12	; 0x0a
    e5c0:	c0 5b       	subi	r28, 0xB0	; 176
    e5c2:	dc 4f       	sbci	r29, 0xFC	; 252
    e5c4:	88 81       	ld	r24, Y
    e5c6:	99 81       	ldd	r25, Y+1	; 0x01
    e5c8:	aa 81       	ldd	r26, Y+2	; 0x02
    e5ca:	bb 81       	ldd	r27, Y+3	; 0x03
    e5cc:	c0 55       	subi	r28, 0x50	; 80
    e5ce:	d3 40       	sbci	r29, 0x03	; 3
    e5d0:	86 83       	std	Z+6, r24	; 0x06
    e5d2:	97 83       	std	Z+7, r25	; 0x07
    e5d4:	a0 87       	std	Z+8, r26	; 0x08
    e5d6:	b1 87       	std	Z+9, r27	; 0x09
    e5d8:	f5 82       	std	Z+5, r15	; 0x05
    e5da:	e4 82       	std	Z+4, r14	; 0x04
    e5dc:	83 e5       	ldi	r24, 0x53	; 83
    e5de:	9a e0       	ldi	r25, 0x0A	; 10
    e5e0:	a0 e0       	ldi	r26, 0x00	; 0
    e5e2:	81 83       	std	Z+1, r24	; 0x01
    e5e4:	92 83       	std	Z+2, r25	; 0x02
    e5e6:	a3 83       	std	Z+3, r26	; 0x03
    e5e8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e5ec:	ae 01       	movw	r20, r28
    e5ee:	4c 5a       	subi	r20, 0xAC	; 172
    e5f0:	5c 4f       	sbci	r21, 0xFC	; 252
    e5f2:	be 01       	movw	r22, r28
    e5f4:	60 5b       	subi	r22, 0xB0	; 176
    e5f6:	7c 4f       	sbci	r23, 0xFC	; 252
    e5f8:	c8 01       	movw	r24, r16
    e5fa:	0e 94 58 63 	call	0xc6b0	; 0xc6b0 <f_getfree>
    e5fe:	89 2b       	or	r24, r25
    e600:	31 f5       	brne	.+76     	; 0xe64e <fatfs_ls+0x196>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e602:	cc 5a       	subi	r28, 0xAC	; 172
    e604:	dc 4f       	sbci	r29, 0xFC	; 252
    e606:	e8 81       	ld	r30, Y
    e608:	f9 81       	ldd	r31, Y+1	; 0x01
    e60a:	c4 55       	subi	r28, 0x54	; 84
    e60c:	d3 40       	sbci	r29, 0x03	; 3
    e60e:	a1 85       	ldd	r26, Z+9	; 0x09
    e610:	b2 85       	ldd	r27, Z+10	; 0x0a
    e612:	c0 5b       	subi	r28, 0xB0	; 176
    e614:	dc 4f       	sbci	r29, 0xFC	; 252
    e616:	28 81       	ld	r18, Y
    e618:	39 81       	ldd	r19, Y+1	; 0x01
    e61a:	4a 81       	ldd	r20, Y+2	; 0x02
    e61c:	5b 81       	ldd	r21, Y+3	; 0x03
    e61e:	c0 55       	subi	r28, 0x50	; 80
    e620:	d3 40       	sbci	r29, 0x03	; 3
    e622:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
    e626:	22 e0       	ldi	r18, 0x02	; 2
    e628:	30 e0       	ldi	r19, 0x00	; 0
    e62a:	40 e0       	ldi	r20, 0x00	; 0
    e62c:	50 e0       	ldi	r21, 0x00	; 0
    e62e:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
    e632:	ed b7       	in	r30, 0x3d	; 61
    e634:	fe b7       	in	r31, 0x3e	; 62
    e636:	24 83       	std	Z+4, r18	; 0x04
    e638:	35 83       	std	Z+5, r19	; 0x05
    e63a:	46 83       	std	Z+6, r20	; 0x06
    e63c:	57 83       	std	Z+7, r21	; 0x07
    e63e:	8e e3       	ldi	r24, 0x3E	; 62
    e640:	9a e0       	ldi	r25, 0x0A	; 10
    e642:	a0 e0       	ldi	r26, 0x00	; 0
    e644:	81 83       	std	Z+1, r24	; 0x01
    e646:	92 83       	std	Z+2, r25	; 0x02
    e648:	a3 83       	std	Z+3, r26	; 0x03
    e64a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
    e64e:	cb 5a       	subi	r28, 0xAB	; 171
    e650:	dc 4f       	sbci	r29, 0xFC	; 252
    e652:	e8 e0       	ldi	r30, 0x08	; 8
    e654:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000e658 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e658:	00 d0       	rcall	.+0      	; 0xe65a <mmc_test+0x2>
    e65a:	1f 92       	push	r1
    printf("==============================\n");
    e65c:	8c ed       	ldi	r24, 0xDC	; 220
    e65e:	9a e0       	ldi	r25, 0x0A	; 10
    e660:	a0 e0       	ldi	r26, 0x00	; 0
    e662:	ed b7       	in	r30, 0x3d	; 61
    e664:	fe b7       	in	r31, 0x3e	; 62
    e666:	81 83       	std	Z+1, r24	; 0x01
    e668:	92 83       	std	Z+2, r25	; 0x02
    e66a:	a3 83       	std	Z+3, r26	; 0x03
    e66c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("START MMC TEST\n");
    e670:	8c ec       	ldi	r24, 0xCC	; 204
    e672:	9a e0       	ldi	r25, 0x0A	; 10
    e674:	a0 e0       	ldi	r26, 0x00	; 0
    e676:	ed b7       	in	r30, 0x3d	; 61
    e678:	fe b7       	in	r31, 0x3e	; 62
    e67a:	81 83       	std	Z+1, r24	; 0x01
    e67c:	92 83       	std	Z+2, r25	; 0x02
    e67e:	a3 83       	std	Z+3, r26	; 0x03
    e680:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fatfs_status("/");
    e684:	86 ea       	ldi	r24, 0xA6	; 166
    e686:	98 e0       	ldi	r25, 0x08	; 8
    e688:	f9 dc       	rcall	.-1550   	; 0xe07c <fatfs_status>
    printf("MMC Directory List\n");
    e68a:	88 eb       	ldi	r24, 0xB8	; 184
    e68c:	9a e0       	ldi	r25, 0x0A	; 10
    e68e:	a0 e0       	ldi	r26, 0x00	; 0
    e690:	ed b7       	in	r30, 0x3d	; 61
    e692:	fe b7       	in	r31, 0x3e	; 62
    e694:	81 83       	std	Z+1, r24	; 0x01
    e696:	92 83       	std	Z+2, r25	; 0x02
    e698:	a3 83       	std	Z+3, r26	; 0x03
    e69a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fatfs_ls("/");
    e69e:	86 ea       	ldi	r24, 0xA6	; 166
    e6a0:	98 e0       	ldi	r25, 0x08	; 8
    e6a2:	0a df       	rcall	.-492    	; 0xe4b8 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e6a4:	8a ea       	ldi	r24, 0xAA	; 170
    e6a6:	9a e0       	ldi	r25, 0x0A	; 10
    e6a8:	a0 e0       	ldi	r26, 0x00	; 0
    e6aa:	ed b7       	in	r30, 0x3d	; 61
    e6ac:	fe b7       	in	r31, 0x3e	; 62
    e6ae:	81 83       	std	Z+1, r24	; 0x01
    e6b0:	92 83       	std	Z+2, r25	; 0x02
    e6b2:	a3 83       	std	Z+3, r26	; 0x03
    e6b4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("==============================\n");
    e6b8:	8a e8       	ldi	r24, 0x8A	; 138
    e6ba:	9a e0       	ldi	r25, 0x0A	; 10
    e6bc:	a0 e0       	ldi	r26, 0x00	; 0
    e6be:	ed b7       	in	r30, 0x3d	; 61
    e6c0:	fe b7       	in	r31, 0x3e	; 62
    e6c2:	81 83       	std	Z+1, r24	; 0x01
    e6c4:	92 83       	std	Z+2, r25	; 0x02
    e6c6:	a3 83       	std	Z+3, r26	; 0x03
    e6c8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
    e6cc:	0f 90       	pop	r0
    e6ce:	0f 90       	pop	r0
    e6d0:	0f 90       	pop	r0
    e6d2:	08 95       	ret

0000e6d4 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e6d4:	ef 92       	push	r14
    e6d6:	ff 92       	push	r15
    e6d8:	0f 93       	push	r16
    e6da:	1f 93       	push	r17
    e6dc:	cf 93       	push	r28
    e6de:	df 93       	push	r29
    e6e0:	7c 01       	movw	r14, r24
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e6e2:	fb 01       	movw	r30, r22
    e6e4:	80 81       	ld	r24, Z
    e6e6:	91 81       	ldd	r25, Z+1	; 0x01

    if(!ptr)
    e6e8:	00 97       	sbiw	r24, 0x00	; 0
    e6ea:	19 f4       	brne	.+6      	; 0xe6f2 <fatfs_tests+0x1e>
        return(0);
    e6ec:	80 e0       	ldi	r24, 0x00	; 0
    e6ee:	90 e0       	ldi	r25, 0x00	; 0
    e6f0:	5b c0       	rjmp	.+182    	; 0xe7a8 <fatfs_tests+0xd4>
    e6f2:	eb 01       	movw	r28, r22

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e6f4:	62 ed       	ldi	r22, 0xD2	; 210
    e6f6:	78 e0       	ldi	r23, 0x08	; 8
    e6f8:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
    e6fc:	89 2b       	or	r24, r25
    e6fe:	b1 f3       	breq	.-20     	; 0xe6ec <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e700:	0a 81       	ldd	r16, Y+2	; 0x02
    e702:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e704:	01 15       	cp	r16, r1
    e706:	11 05       	cpc	r17, r1
    e708:	21 f4       	brne	.+8      	; 0xe712 <fatfs_tests+0x3e>
        {
            fatfs_help(1);
    e70a:	81 e0       	ldi	r24, 0x01	; 1
    e70c:	90 e0       	ldi	r25, 0x00	; 0
    e70e:	b3 de       	rcall	.-666    	; 0xe476 <fatfs_help>
    e710:	49 c0       	rjmp	.+146    	; 0xe7a4 <fatfs_tests+0xd0>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e712:	6d e7       	ldi	r22, 0x7D	; 125
    e714:	76 e1       	ldi	r23, 0x16	; 22
    e716:	c8 01       	movw	r24, r16
    e718:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
    e71c:	89 2b       	or	r24, r25
    e71e:	a9 f7       	brne	.-22     	; 0xe70a <fatfs_tests+0x36>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") )
    e720:	68 ed       	ldi	r22, 0xD8	; 216
    e722:	78 e0       	ldi	r23, 0x08	; 8
    e724:	c8 01       	movw	r24, r16
    e726:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
    e72a:	89 2b       	or	r24, r25
    e72c:	99 f0       	breq	.+38     	; 0xe754 <fatfs_tests+0x80>
    e72e:	24 96       	adiw	r28, 0x04	; 4
    e730:	02 e0       	ldi	r16, 0x02	; 2
    e732:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e734:	0e 15       	cp	r16, r14
    e736:	1f 05       	cpc	r17, r15
    e738:	34 f4       	brge	.+12     	; 0xe746 <fatfs_tests+0x72>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e73a:	89 91       	ld	r24, Y+
    e73c:	99 91       	ld	r25, Y+
    e73e:	bc de       	rcall	.-648    	; 0xe4b8 <fatfs_ls>
    if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e740:	0f 5f       	subi	r16, 0xFF	; 255
    e742:	1f 4f       	sbci	r17, 0xFF	; 255
    e744:	f7 cf       	rjmp	.-18     	; 0xe734 <fatfs_tests+0x60>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e746:	02 30       	cpi	r16, 0x02	; 2
    e748:	11 05       	cpc	r17, r1
    e74a:	61 f5       	brne	.+88     	; 0xe7a4 <fatfs_tests+0xd0>
        {
            fatfs_ls("");
    e74c:	8d e2       	ldi	r24, 0x2D	; 45
    e74e:	9c e0       	ldi	r25, 0x0C	; 12
    e750:	b3 de       	rcall	.-666    	; 0xe4b8 <fatfs_ls>
    e752:	28 c0       	rjmp	.+80     	; 0xe7a4 <fatfs_tests+0xd0>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e754:	97 01       	movw	r18, r14
    e756:	42 e0       	ldi	r20, 0x02	; 2
    e758:	50 e0       	ldi	r21, 0x00	; 0
    e75a:	6b ed       	ldi	r22, 0xDB	; 219
    e75c:	78 e0       	ldi	r23, 0x08	; 8
    e75e:	c8 01       	movw	r24, r16
    e760:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
    e764:	89 2b       	or	r24, r25
    {
        mmc_test();
    e766:	11 f0       	breq	.+4      	; 0xe76c <fatfs_tests+0x98>
    e768:	77 df       	rcall	.-274    	; 0xe658 <mmc_test>
    e76a:	1c c0       	rjmp	.+56     	; 0xe7a4 <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e76c:	97 01       	movw	r18, r14
    e76e:	42 e0       	ldi	r20, 0x02	; 2
    e770:	50 e0       	ldi	r21, 0x00	; 0
    e772:	64 ee       	ldi	r22, 0xE4	; 228
    e774:	78 e0       	ldi	r23, 0x08	; 8
    e776:	c8 01       	movw	r24, r16
    e778:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
    e77c:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e77e:	21 f0       	breq	.+8      	; 0xe788 <fatfs_tests+0xb4>
    e780:	81 e0       	ldi	r24, 0x01	; 1
    e782:	90 e0       	ldi	r25, 0x00	; 0
    e784:	a4 da       	rcall	.-2744   	; 0xdcce <mmc_init>
    e786:	0e c0       	rjmp	.+28     	; 0xe7a4 <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e788:	97 01       	movw	r18, r14
    e78a:	43 e0       	ldi	r20, 0x03	; 3
    e78c:	50 e0       	ldi	r21, 0x00	; 0
    e78e:	6d ee       	ldi	r22, 0xED	; 237
    e790:	78 e0       	ldi	r23, 0x08	; 8
    e792:	c8 01       	movw	r24, r16
    e794:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
    e798:	89 2b       	or	r24, r25
    e79a:	09 f4       	brne	.+2      	; 0xe79e <fatfs_tests+0xca>
    {
        fatfs_status(argv[ind]);
    e79c:	a7 cf       	rjmp	.-178    	; 0xe6ec <fatfs_tests+0x18>
    e79e:	8c 81       	ldd	r24, Y+4	; 0x04
    e7a0:	9d 81       	ldd	r25, Y+5	; 0x05
    e7a2:	6c dc       	rcall	.-1832   	; 0xe07c <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e7a4:	81 e0       	ldi	r24, 0x01	; 1
    e7a6:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e7a8:	cd b7       	in	r28, 0x3d	; 61
    e7aa:	de b7       	in	r29, 0x3e	; 62
    e7ac:	e6 e0       	ldi	r30, 0x06	; 6
    e7ae:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0000e7b2 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e7b2:	8f 92       	push	r8
    e7b4:	9f 92       	push	r9
    e7b6:	af 92       	push	r10
    e7b8:	bf 92       	push	r11
    e7ba:	ef 92       	push	r14
    e7bc:	ff 92       	push	r15
    e7be:	0f 93       	push	r16
    e7c0:	1f 93       	push	r17
    e7c2:	cf 93       	push	r28
    e7c4:	df 93       	push	r29
    e7c6:	00 d0       	rcall	.+0      	; 0xe7c8 <fatfs_getc+0x16>
    e7c8:	1f 92       	push	r1
    e7ca:	cd b7       	in	r28, 0x3d	; 61
    e7cc:	de b7       	in	r29, 0x3e	; 62
    e7ce:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    e7d2:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    e7d6:	00 97       	sbiw	r24, 0x00	; 0
    e7d8:	39 f4       	brne	.+14     	; 0xe7e8 <fatfs_getc+0x36>
    e7da:	89 e0       	ldi	r24, 0x09	; 9
    e7dc:	90 e0       	ldi	r25, 0x00	; 0
    e7de:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    e7e2:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    e7e6:	2f c0       	rjmp	.+94     	; 0xe846 <fatfs_getc+0x94>
    e7e8:	fc 01       	movw	r30, r24
    e7ea:	e4 84       	ldd	r14, Z+12	; 0x0c
    e7ec:	f5 84       	ldd	r15, Z+13	; 0x0d
    e7ee:	e1 14       	cp	r14, r1
    e7f0:	f1 04       	cpc	r15, r1
    e7f2:	99 f3       	breq	.-26     	; 0xe7da <fatfs_getc+0x28>
    e7f4:	8c 01       	movw	r16, r24
    e7f6:	9e 01       	movw	r18, r28
    e7f8:	2f 5f       	subi	r18, 0xFF	; 255
    e7fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e7fc:	41 e0       	ldi	r20, 0x01	; 1
    e7fe:	50 e0       	ldi	r21, 0x00	; 0
    e800:	be 01       	movw	r22, r28
    e802:	6d 5f       	subi	r22, 0xFD	; 253
    e804:	7f 4f       	sbci	r23, 0xFF	; 255
    e806:	c7 01       	movw	r24, r14
    e808:	0e 94 88 5a 	call	0xb510	; 0xb510 <f_read>
    e80c:	00 97       	sbiw	r24, 0x00	; 0
    e80e:	31 f4       	brne	.+12     	; 0xe81c <fatfs_getc+0x6a>
    e810:	29 81       	ldd	r18, Y+1	; 0x01
    e812:	3a 81       	ldd	r19, Y+2	; 0x02
    e814:	21 30       	cpi	r18, 0x01	; 1
    e816:	31 05       	cpc	r19, r1
    e818:	c9 f0       	breq	.+50     	; 0xe84c <fatfs_getc+0x9a>
    e81a:	03 c0       	rjmp	.+6      	; 0xe822 <fatfs_getc+0x70>
    e81c:	84 31       	cpi	r24, 0x14	; 20
    e81e:	91 05       	cpc	r25, r1
    e820:	40 f4       	brcc	.+16     	; 0xe832 <fatfs_getc+0x80>
    e822:	fc 01       	movw	r30, r24
    e824:	ea 55       	subi	r30, 0x5A	; 90
    e826:	f4 4f       	sbci	r31, 0xF4	; 244
    e828:	80 81       	ld	r24, Z
    e82a:	08 2e       	mov	r0, r24
    e82c:	00 0c       	add	r0, r0
    e82e:	99 0b       	sbc	r25, r25
    e830:	02 c0       	rjmp	.+4      	; 0xe836 <fatfs_getc+0x84>
    e832:	83 e2       	ldi	r24, 0x23	; 35
    e834:	90 e0       	ldi	r25, 0x00	; 0
    e836:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    e83a:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    e83e:	f8 01       	movw	r30, r16
    e840:	83 81       	ldd	r24, Z+3	; 0x03
    e842:	80 62       	ori	r24, 0x20	; 32
    e844:	83 83       	std	Z+3, r24	; 0x03
    e846:	8f ef       	ldi	r24, 0xFF	; 255
    e848:	9f ef       	ldi	r25, 0xFF	; 255
    e84a:	28 c0       	rjmp	.+80     	; 0xe89c <fatfs_getc+0xea>
    e84c:	8b 81       	ldd	r24, Y+3	; 0x03
    e84e:	8d 30       	cpi	r24, 0x0D	; 13
    e850:	01 f5       	brne	.+64     	; 0xe892 <fatfs_getc+0xe0>
    e852:	f7 01       	movw	r30, r14
    e854:	80 88       	ldd	r8, Z+16	; 0x10
    e856:	91 88       	ldd	r9, Z+17	; 0x11
    e858:	a2 88       	ldd	r10, Z+18	; 0x12
    e85a:	b3 88       	ldd	r11, Z+19	; 0x13
    e85c:	9e 01       	movw	r18, r28
    e85e:	2f 5f       	subi	r18, 0xFF	; 255
    e860:	3f 4f       	sbci	r19, 0xFF	; 255
    e862:	41 e0       	ldi	r20, 0x01	; 1
    e864:	50 e0       	ldi	r21, 0x00	; 0
    e866:	be 01       	movw	r22, r28
    e868:	6d 5f       	subi	r22, 0xFD	; 253
    e86a:	7f 4f       	sbci	r23, 0xFF	; 255
    e86c:	c7 01       	movw	r24, r14
    e86e:	0e 94 88 5a 	call	0xb510	; 0xb510 <f_read>
    e872:	89 2b       	or	r24, r25
    e874:	89 f4       	brne	.+34     	; 0xe898 <fatfs_getc+0xe6>
    e876:	89 81       	ldd	r24, Y+1	; 0x01
    e878:	9a 81       	ldd	r25, Y+2	; 0x02
    e87a:	01 97       	sbiw	r24, 0x01	; 1
    e87c:	69 f4       	brne	.+26     	; 0xe898 <fatfs_getc+0xe6>
    e87e:	8b 81       	ldd	r24, Y+3	; 0x03
    e880:	8a 30       	cpi	r24, 0x0A	; 10
    e882:	31 f0       	breq	.+12     	; 0xe890 <fatfs_getc+0xde>
    e884:	b5 01       	movw	r22, r10
    e886:	a4 01       	movw	r20, r8
    e888:	c7 01       	movw	r24, r14
    e88a:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <f_lseek>
    e88e:	04 c0       	rjmp	.+8      	; 0xe898 <fatfs_getc+0xe6>
    e890:	8b 83       	std	Y+3, r24	; 0x03
    e892:	8b 81       	ldd	r24, Y+3	; 0x03
    e894:	90 e0       	ldi	r25, 0x00	; 0
    e896:	02 c0       	rjmp	.+4      	; 0xe89c <fatfs_getc+0xea>
    e898:	8a e0       	ldi	r24, 0x0A	; 10
    e89a:	90 e0       	ldi	r25, 0x00	; 0
    e89c:	0f 90       	pop	r0
    e89e:	0f 90       	pop	r0
    e8a0:	0f 90       	pop	r0
    e8a2:	df 91       	pop	r29
    e8a4:	cf 91       	pop	r28
    e8a6:	1f 91       	pop	r17
    e8a8:	0f 91       	pop	r16
    e8aa:	ff 90       	pop	r15
    e8ac:	ef 90       	pop	r14
    e8ae:	bf 90       	pop	r11
    e8b0:	af 90       	pop	r10
    e8b2:	9f 90       	pop	r9
    e8b4:	8f 90       	pop	r8
    e8b6:	08 95       	ret

0000e8b8 <fatfs_putc>:
    e8b8:	a3 e0       	ldi	r26, 0x03	; 3
    e8ba:	b0 e0       	ldi	r27, 0x00	; 0
    e8bc:	e2 e6       	ldi	r30, 0x62	; 98
    e8be:	f4 e7       	ldi	r31, 0x74	; 116
    e8c0:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    e8c4:	8b 83       	std	Y+3, r24	; 0x03
    e8c6:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    e8ca:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    e8ce:	61 15       	cp	r22, r1
    e8d0:	71 05       	cpc	r23, r1
    e8d2:	39 f4       	brne	.+14     	; 0xe8e2 <fatfs_putc+0x2a>
    e8d4:	89 e0       	ldi	r24, 0x09	; 9
    e8d6:	90 e0       	ldi	r25, 0x00	; 0
    e8d8:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    e8dc:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    e8e0:	2d c0       	rjmp	.+90     	; 0xe93c <fatfs_putc+0x84>
    e8e2:	fb 01       	movw	r30, r22
    e8e4:	84 85       	ldd	r24, Z+12	; 0x0c
    e8e6:	95 85       	ldd	r25, Z+13	; 0x0d
    e8e8:	00 97       	sbiw	r24, 0x00	; 0
    e8ea:	a1 f3       	breq	.-24     	; 0xe8d4 <fatfs_putc+0x1c>
    e8ec:	8b 01       	movw	r16, r22
    e8ee:	9e 01       	movw	r18, r28
    e8f0:	2f 5f       	subi	r18, 0xFF	; 255
    e8f2:	3f 4f       	sbci	r19, 0xFF	; 255
    e8f4:	41 e0       	ldi	r20, 0x01	; 1
    e8f6:	50 e0       	ldi	r21, 0x00	; 0
    e8f8:	be 01       	movw	r22, r28
    e8fa:	6d 5f       	subi	r22, 0xFD	; 253
    e8fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e8fe:	0e 94 d3 5b 	call	0xb7a6	; 0xb7a6 <f_write>
    e902:	00 97       	sbiw	r24, 0x00	; 0
    e904:	31 f4       	brne	.+12     	; 0xe912 <fatfs_putc+0x5a>
    e906:	29 81       	ldd	r18, Y+1	; 0x01
    e908:	3a 81       	ldd	r19, Y+2	; 0x02
    e90a:	21 30       	cpi	r18, 0x01	; 1
    e90c:	31 05       	cpc	r19, r1
    e90e:	c9 f0       	breq	.+50     	; 0xe942 <fatfs_putc+0x8a>
    e910:	03 c0       	rjmp	.+6      	; 0xe918 <fatfs_putc+0x60>
    e912:	84 31       	cpi	r24, 0x14	; 20
    e914:	91 05       	cpc	r25, r1
    e916:	40 f4       	brcc	.+16     	; 0xe928 <fatfs_putc+0x70>
    e918:	fc 01       	movw	r30, r24
    e91a:	ea 55       	subi	r30, 0x5A	; 90
    e91c:	f4 4f       	sbci	r31, 0xF4	; 244
    e91e:	80 81       	ld	r24, Z
    e920:	08 2e       	mov	r0, r24
    e922:	00 0c       	add	r0, r0
    e924:	99 0b       	sbc	r25, r25
    e926:	02 c0       	rjmp	.+4      	; 0xe92c <fatfs_putc+0x74>
    e928:	83 e2       	ldi	r24, 0x23	; 35
    e92a:	90 e0       	ldi	r25, 0x00	; 0
    e92c:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    e930:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    e934:	f8 01       	movw	r30, r16
    e936:	83 81       	ldd	r24, Z+3	; 0x03
    e938:	80 62       	ori	r24, 0x20	; 32
    e93a:	83 83       	std	Z+3, r24	; 0x03
    e93c:	8f ef       	ldi	r24, 0xFF	; 255
    e93e:	9f ef       	ldi	r25, 0xFF	; 255
    e940:	02 c0       	rjmp	.+4      	; 0xe946 <fatfs_putc+0x8e>
    e942:	8b 81       	ldd	r24, Y+3	; 0x03
    e944:	90 e0       	ldi	r25, 0x00	; 0
    e946:	23 96       	adiw	r28, 0x03	; 3
    e948:	e4 e0       	ldi	r30, 0x04	; 4
    e94a:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0000e94e <fgetc>:
    e94e:	cf 93       	push	r28
    e950:	df 93       	push	r29
    e952:	00 d0       	rcall	.+0      	; 0xe954 <fgetc+0x6>
    e954:	1f 92       	push	r1
    e956:	ec 01       	movw	r28, r24
    e958:	00 97       	sbiw	r24, 0x00	; 0
    e95a:	39 f4       	brne	.+14     	; 0xe96a <fgetc+0x1c>
    e95c:	89 e0       	ldi	r24, 0x09	; 9
    e95e:	90 e0       	ldi	r25, 0x00	; 0
    e960:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    e964:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    e968:	40 c0       	rjmp	.+128    	; 0xe9ea <fgetc+0x9c>
    e96a:	2b 81       	ldd	r18, Y+3	; 0x03
    e96c:	20 ff       	sbrs	r18, 0
    e96e:	3d c0       	rjmp	.+122    	; 0xe9ea <fgetc+0x9c>
    e970:	26 ff       	sbrs	r18, 6
    e972:	0a c0       	rjmp	.+20     	; 0xe988 <fgetc+0x3a>
    e974:	2f 7b       	andi	r18, 0xBF	; 191
    e976:	2b 83       	std	Y+3, r18	; 0x03
    e978:	8e 81       	ldd	r24, Y+6	; 0x06
    e97a:	9f 81       	ldd	r25, Y+7	; 0x07
    e97c:	01 96       	adiw	r24, 0x01	; 1
    e97e:	9f 83       	std	Y+7, r25	; 0x07
    e980:	8e 83       	std	Y+6, r24	; 0x06
    e982:	8a 81       	ldd	r24, Y+2	; 0x02
    e984:	90 e0       	ldi	r25, 0x00	; 0
    e986:	33 c0       	rjmp	.+102    	; 0xe9ee <fgetc+0xa0>
    e988:	22 ff       	sbrs	r18, 2
    e98a:	0d c0       	rjmp	.+26     	; 0xe9a6 <fgetc+0x58>
    e98c:	e8 81       	ld	r30, Y
    e98e:	f9 81       	ldd	r31, Y+1	; 0x01
    e990:	80 81       	ld	r24, Z
    e992:	90 e0       	ldi	r25, 0x00	; 0
    e994:	00 97       	sbiw	r24, 0x00	; 0
    e996:	19 f4       	brne	.+6      	; 0xe99e <fgetc+0x50>
    e998:	20 62       	ori	r18, 0x20	; 32
    e99a:	2b 83       	std	Y+3, r18	; 0x03
    e99c:	26 c0       	rjmp	.+76     	; 0xe9ea <fgetc+0x9c>
    e99e:	31 96       	adiw	r30, 0x01	; 1
    e9a0:	f9 83       	std	Y+1, r31	; 0x01
    e9a2:	e8 83       	st	Y, r30
    e9a4:	1b c0       	rjmp	.+54     	; 0xe9dc <fgetc+0x8e>
    e9a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    e9a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    e9aa:	30 97       	sbiw	r30, 0x00	; 0
    e9ac:	59 f4       	brne	.+22     	; 0xe9c4 <fgetc+0x76>
    e9ae:	8f ea       	ldi	r24, 0xAF	; 175
    e9b0:	9b e0       	ldi	r25, 0x0B	; 11
    e9b2:	a0 e0       	ldi	r26, 0x00	; 0
    e9b4:	ed b7       	in	r30, 0x3d	; 61
    e9b6:	fe b7       	in	r31, 0x3e	; 62
    e9b8:	81 83       	std	Z+1, r24	; 0x01
    e9ba:	92 83       	std	Z+2, r25	; 0x02
    e9bc:	a3 83       	std	Z+3, r26	; 0x03
    e9be:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    e9c2:	13 c0       	rjmp	.+38     	; 0xe9ea <fgetc+0x9c>
    e9c4:	09 95       	icall
    e9c6:	97 ff       	sbrs	r25, 7
    e9c8:	09 c0       	rjmp	.+18     	; 0xe9dc <fgetc+0x8e>
    e9ca:	2b 81       	ldd	r18, Y+3	; 0x03
    e9cc:	02 96       	adiw	r24, 0x02	; 2
    e9ce:	11 f0       	breq	.+4      	; 0xe9d4 <fgetc+0x86>
    e9d0:	80 e2       	ldi	r24, 0x20	; 32
    e9d2:	01 c0       	rjmp	.+2      	; 0xe9d6 <fgetc+0x88>
    e9d4:	80 e1       	ldi	r24, 0x10	; 16
    e9d6:	82 2b       	or	r24, r18
    e9d8:	8b 83       	std	Y+3, r24	; 0x03
    e9da:	07 c0       	rjmp	.+14     	; 0xe9ea <fgetc+0x9c>
    e9dc:	2e 81       	ldd	r18, Y+6	; 0x06
    e9de:	3f 81       	ldd	r19, Y+7	; 0x07
    e9e0:	2f 5f       	subi	r18, 0xFF	; 255
    e9e2:	3f 4f       	sbci	r19, 0xFF	; 255
    e9e4:	3f 83       	std	Y+7, r19	; 0x07
    e9e6:	2e 83       	std	Y+6, r18	; 0x06
    e9e8:	02 c0       	rjmp	.+4      	; 0xe9ee <fgetc+0xa0>
    e9ea:	8f ef       	ldi	r24, 0xFF	; 255
    e9ec:	9f ef       	ldi	r25, 0xFF	; 255
    e9ee:	cd b7       	in	r28, 0x3d	; 61
    e9f0:	de b7       	in	r29, 0x3e	; 62
    e9f2:	23 96       	adiw	r28, 0x03	; 3
    e9f4:	e2 e0       	ldi	r30, 0x02	; 2
    e9f6:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000e9fa <fputc>:
    e9fa:	cf 93       	push	r28
    e9fc:	df 93       	push	r29
    e9fe:	00 d0       	rcall	.+0      	; 0xea00 <fputc+0x6>
    ea00:	1f 92       	push	r1
    ea02:	eb 01       	movw	r28, r22
    ea04:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ea08:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ea0c:	20 91 c8 1d 	lds	r18, 0x1DC8	; 0x801dc8 <__iob+0x2>
    ea10:	30 91 c9 1d 	lds	r19, 0x1DC9	; 0x801dc9 <__iob+0x3>
    ea14:	62 17       	cp	r22, r18
    ea16:	73 07       	cpc	r23, r19
    ea18:	49 f0       	breq	.+18     	; 0xea2c <fputc+0x32>
    ea1a:	20 91 ca 1d 	lds	r18, 0x1DCA	; 0x801dca <__iob+0x4>
    ea1e:	30 91 cb 1d 	lds	r19, 0x1DCB	; 0x801dcb <__iob+0x5>
    ea22:	62 17       	cp	r22, r18
    ea24:	73 07       	cpc	r23, r19
    ea26:	11 f0       	breq	.+4      	; 0xea2c <fputc+0x32>
    ea28:	47 df       	rcall	.-370    	; 0xe8b8 <fatfs_putc>
    ea2a:	33 c0       	rjmp	.+102    	; 0xea92 <fputc+0x98>
    ea2c:	2b 81       	ldd	r18, Y+3	; 0x03
    ea2e:	21 ff       	sbrs	r18, 1
    ea30:	2e c0       	rjmp	.+92     	; 0xea8e <fputc+0x94>
    ea32:	22 ff       	sbrs	r18, 2
    ea34:	10 c0       	rjmp	.+32     	; 0xea56 <fputc+0x5c>
    ea36:	4e 81       	ldd	r20, Y+6	; 0x06
    ea38:	5f 81       	ldd	r21, Y+7	; 0x07
    ea3a:	2c 81       	ldd	r18, Y+4	; 0x04
    ea3c:	3d 81       	ldd	r19, Y+5	; 0x05
    ea3e:	42 17       	cp	r20, r18
    ea40:	53 07       	cpc	r21, r19
    ea42:	f4 f4       	brge	.+60     	; 0xea80 <fputc+0x86>
    ea44:	e8 81       	ld	r30, Y
    ea46:	f9 81       	ldd	r31, Y+1	; 0x01
    ea48:	9f 01       	movw	r18, r30
    ea4a:	2f 5f       	subi	r18, 0xFF	; 255
    ea4c:	3f 4f       	sbci	r19, 0xFF	; 255
    ea4e:	39 83       	std	Y+1, r19	; 0x01
    ea50:	28 83       	st	Y, r18
    ea52:	80 83       	st	Z, r24
    ea54:	15 c0       	rjmp	.+42     	; 0xea80 <fputc+0x86>
    ea56:	e8 85       	ldd	r30, Y+8	; 0x08
    ea58:	f9 85       	ldd	r31, Y+9	; 0x09
    ea5a:	30 97       	sbiw	r30, 0x00	; 0
    ea5c:	59 f4       	brne	.+22     	; 0xea74 <fputc+0x7a>
    ea5e:	87 e9       	ldi	r24, 0x97	; 151
    ea60:	9b e0       	ldi	r25, 0x0B	; 11
    ea62:	a0 e0       	ldi	r26, 0x00	; 0
    ea64:	ed b7       	in	r30, 0x3d	; 61
    ea66:	fe b7       	in	r31, 0x3e	; 62
    ea68:	81 83       	std	Z+1, r24	; 0x01
    ea6a:	92 83       	std	Z+2, r25	; 0x02
    ea6c:	a3 83       	std	Z+3, r26	; 0x03
    ea6e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    ea72:	0d c0       	rjmp	.+26     	; 0xea8e <fputc+0x94>
    ea74:	be 01       	movw	r22, r28
    ea76:	09 95       	icall
    ea78:	8f 3f       	cpi	r24, 0xFF	; 255
    ea7a:	ff ef       	ldi	r31, 0xFF	; 255
    ea7c:	9f 07       	cpc	r25, r31
    ea7e:	39 f0       	breq	.+14     	; 0xea8e <fputc+0x94>
    ea80:	2e 81       	ldd	r18, Y+6	; 0x06
    ea82:	3f 81       	ldd	r19, Y+7	; 0x07
    ea84:	2f 5f       	subi	r18, 0xFF	; 255
    ea86:	3f 4f       	sbci	r19, 0xFF	; 255
    ea88:	3f 83       	std	Y+7, r19	; 0x07
    ea8a:	2e 83       	std	Y+6, r18	; 0x06
    ea8c:	02 c0       	rjmp	.+4      	; 0xea92 <fputc+0x98>
    ea8e:	8f ef       	ldi	r24, 0xFF	; 255
    ea90:	9f ef       	ldi	r25, 0xFF	; 255
    ea92:	cd b7       	in	r28, 0x3d	; 61
    ea94:	de b7       	in	r29, 0x3e	; 62
    ea96:	23 96       	adiw	r28, 0x03	; 3
    ea98:	e2 e0       	ldi	r30, 0x02	; 2
    ea9a:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000ea9e <_fprintf_putc>:
    ea9e:	fc 01       	movw	r30, r24
    eaa0:	86 2f       	mov	r24, r22
    eaa2:	26 81       	ldd	r18, Z+6	; 0x06
    eaa4:	37 81       	ldd	r19, Z+7	; 0x07
    eaa6:	2f 5f       	subi	r18, 0xFF	; 255
    eaa8:	3f 4f       	sbci	r19, 0xFF	; 255
    eaaa:	37 83       	std	Z+7, r19	; 0x07
    eaac:	26 83       	std	Z+6, r18	; 0x06
    eaae:	62 81       	ldd	r22, Z+2	; 0x02
    eab0:	73 81       	ldd	r23, Z+3	; 0x03
    eab2:	90 e0       	ldi	r25, 0x00	; 0
    eab4:	a2 cf       	rjmp	.-188    	; 0xe9fa <fputc>
    eab6:	08 95       	ret

0000eab8 <getchar>:
    eab8:	80 91 c6 1d 	lds	r24, 0x1DC6	; 0x801dc6 <__iob>
    eabc:	90 91 c7 1d 	lds	r25, 0x1DC7	; 0x801dc7 <__iob+0x1>
    eac0:	46 cf       	rjmp	.-372    	; 0xe94e <fgetc>
    eac2:	08 95       	ret

0000eac4 <putchar>:
    eac4:	60 91 c8 1d 	lds	r22, 0x1DC8	; 0x801dc8 <__iob+0x2>
    eac8:	70 91 c9 1d 	lds	r23, 0x1DC9	; 0x801dc9 <__iob+0x3>
    eacc:	96 cf       	rjmp	.-212    	; 0xe9fa <fputc>
    eace:	08 95       	ret

0000ead0 <fgets>:
    ead0:	a0 e0       	ldi	r26, 0x00	; 0
    ead2:	b0 e0       	ldi	r27, 0x00	; 0
    ead4:	ee e6       	ldi	r30, 0x6E	; 110
    ead6:	f5 e7       	ldi	r31, 0x75	; 117
    ead8:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    eadc:	7c 01       	movw	r14, r24
    eade:	6a 01       	movw	r12, r20
    eae0:	8b 01       	movw	r16, r22
    eae2:	c0 e0       	ldi	r28, 0x00	; 0
    eae4:	d0 e0       	ldi	r29, 0x00	; 0
    eae6:	01 15       	cp	r16, r1
    eae8:	11 05       	cpc	r17, r1
    eaea:	41 f0       	breq	.+16     	; 0xeafc <fgets+0x2c>
    eaec:	c6 01       	movw	r24, r12
    eaee:	2f df       	rcall	.-418    	; 0xe94e <fgetc>
    eaf0:	8f 3f       	cpi	r24, 0xFF	; 255
    eaf2:	2f ef       	ldi	r18, 0xFF	; 255
    eaf4:	92 07       	cpc	r25, r18
    eaf6:	39 f4       	brne	.+14     	; 0xeb06 <fgets+0x36>
    eaf8:	20 97       	sbiw	r28, 0x00	; 0
    eafa:	b9 f0       	breq	.+46     	; 0xeb2a <fgets+0x5a>
    eafc:	ce 0d       	add	r28, r14
    eafe:	df 1d       	adc	r29, r15
    eb00:	18 82       	st	Y, r1
    eb02:	c7 01       	movw	r24, r14
    eb04:	14 c0       	rjmp	.+40     	; 0xeb2e <fgets+0x5e>
    eb06:	8a 30       	cpi	r24, 0x0A	; 10
    eb08:	91 05       	cpc	r25, r1
    eb0a:	c1 f3       	breq	.-16     	; 0xeafc <fgets+0x2c>
    eb0c:	88 30       	cpi	r24, 0x08	; 8
    eb0e:	91 05       	cpc	r25, r1
    eb10:	21 f4       	brne	.+8      	; 0xeb1a <fgets+0x4a>
    eb12:	20 97       	sbiw	r28, 0x00	; 0
    eb14:	39 f0       	breq	.+14     	; 0xeb24 <fgets+0x54>
    eb16:	21 97       	sbiw	r28, 0x01	; 1
    eb18:	05 c0       	rjmp	.+10     	; 0xeb24 <fgets+0x54>
    eb1a:	f7 01       	movw	r30, r14
    eb1c:	ec 0f       	add	r30, r28
    eb1e:	fd 1f       	adc	r31, r29
    eb20:	80 83       	st	Z, r24
    eb22:	21 96       	adiw	r28, 0x01	; 1
    eb24:	01 50       	subi	r16, 0x01	; 1
    eb26:	11 09       	sbc	r17, r1
    eb28:	de cf       	rjmp	.-68     	; 0xeae6 <fgets+0x16>
    eb2a:	80 e0       	ldi	r24, 0x00	; 0
    eb2c:	90 e0       	ldi	r25, 0x00	; 0
    eb2e:	cd b7       	in	r28, 0x3d	; 61
    eb30:	de b7       	in	r29, 0x3e	; 62
    eb32:	e8 e0       	ldi	r30, 0x08	; 8
    eb34:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000eb38 <fputs>:
    eb38:	0f 93       	push	r16
    eb3a:	1f 93       	push	r17
    eb3c:	cf 93       	push	r28
    eb3e:	df 93       	push	r29
    eb40:	8b 01       	movw	r16, r22
    eb42:	ec 01       	movw	r28, r24
    eb44:	89 91       	ld	r24, Y+
    eb46:	88 23       	and	r24, r24
    eb48:	41 f0       	breq	.+16     	; 0xeb5a <fputs+0x22>
    eb4a:	b8 01       	movw	r22, r16
    eb4c:	90 e0       	ldi	r25, 0x00	; 0
    eb4e:	55 df       	rcall	.-342    	; 0xe9fa <fputc>
    eb50:	8f 3f       	cpi	r24, 0xFF	; 255
    eb52:	2f ef       	ldi	r18, 0xFF	; 255
    eb54:	92 07       	cpc	r25, r18
    eb56:	b1 f7       	brne	.-20     	; 0xeb44 <fputs+0xc>
    eb58:	02 c0       	rjmp	.+4      	; 0xeb5e <fputs+0x26>
    eb5a:	80 e0       	ldi	r24, 0x00	; 0
    eb5c:	90 e0       	ldi	r25, 0x00	; 0
    eb5e:	df 91       	pop	r29
    eb60:	cf 91       	pop	r28
    eb62:	1f 91       	pop	r17
    eb64:	0f 91       	pop	r16
    eb66:	08 95       	ret

0000eb68 <puts>:
    eb68:	cf 93       	push	r28
    eb6a:	df 93       	push	r29
    eb6c:	ec 01       	movw	r28, r24
    eb6e:	89 91       	ld	r24, Y+
    eb70:	60 91 c8 1d 	lds	r22, 0x1DC8	; 0x801dc8 <__iob+0x2>
    eb74:	70 91 c9 1d 	lds	r23, 0x1DC9	; 0x801dc9 <__iob+0x3>
    eb78:	88 23       	and	r24, r24
    eb7a:	39 f0       	breq	.+14     	; 0xeb8a <puts+0x22>
    eb7c:	90 e0       	ldi	r25, 0x00	; 0
    eb7e:	3d df       	rcall	.-390    	; 0xe9fa <fputc>
    eb80:	8f 3f       	cpi	r24, 0xFF	; 255
    eb82:	2f ef       	ldi	r18, 0xFF	; 255
    eb84:	92 07       	cpc	r25, r18
    eb86:	99 f7       	brne	.-26     	; 0xeb6e <puts+0x6>
    eb88:	03 c0       	rjmp	.+6      	; 0xeb90 <puts+0x28>
    eb8a:	8a e0       	ldi	r24, 0x0A	; 10
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	35 df       	rcall	.-406    	; 0xe9fa <fputc>
    eb90:	df 91       	pop	r29
    eb92:	cf 91       	pop	r28
    eb94:	08 95       	ret

0000eb96 <fileno>:
    eb96:	00 97       	sbiw	r24, 0x00	; 0
    eb98:	39 f4       	brne	.+14     	; 0xeba8 <fileno+0x12>
    eb9a:	89 e0       	ldi	r24, 0x09	; 9
    eb9c:	90 e0       	ldi	r25, 0x00	; 0
    eb9e:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    eba2:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    eba6:	0e c0       	rjmp	.+28     	; 0xebc4 <fileno+0x2e>
    eba8:	e6 ec       	ldi	r30, 0xC6	; 198
    ebaa:	fd e1       	ldi	r31, 0x1D	; 29
    ebac:	20 e0       	ldi	r18, 0x00	; 0
    ebae:	30 e0       	ldi	r19, 0x00	; 0
    ebb0:	41 91       	ld	r20, Z+
    ebb2:	51 91       	ld	r21, Z+
    ebb4:	84 17       	cp	r24, r20
    ebb6:	95 07       	cpc	r25, r21
    ebb8:	41 f0       	breq	.+16     	; 0xebca <fileno+0x34>
    ebba:	2f 5f       	subi	r18, 0xFF	; 255
    ebbc:	3f 4f       	sbci	r19, 0xFF	; 255
    ebbe:	20 31       	cpi	r18, 0x10	; 16
    ebc0:	31 05       	cpc	r19, r1
    ebc2:	b1 f7       	brne	.-20     	; 0xebb0 <fileno+0x1a>
    ebc4:	8f ef       	ldi	r24, 0xFF	; 255
    ebc6:	9f ef       	ldi	r25, 0xFF	; 255
    ebc8:	08 95       	ret
    ebca:	c9 01       	movw	r24, r18
    ebcc:	08 95       	ret

0000ebce <fileno_to_stream>:
    ebce:	80 31       	cpi	r24, 0x10	; 16
    ebd0:	91 05       	cpc	r25, r1
    ebd2:	48 f4       	brcc	.+18     	; 0xebe6 <fileno_to_stream+0x18>
    ebd4:	88 0f       	add	r24, r24
    ebd6:	99 1f       	adc	r25, r25
    ebd8:	fc 01       	movw	r30, r24
    ebda:	ea 53       	subi	r30, 0x3A	; 58
    ebdc:	f2 4e       	sbci	r31, 0xE2	; 226
    ebde:	80 81       	ld	r24, Z
    ebe0:	91 81       	ldd	r25, Z+1	; 0x01
    ebe2:	00 97       	sbiw	r24, 0x00	; 0
    ebe4:	41 f4       	brne	.+16     	; 0xebf6 <fileno_to_stream+0x28>
    ebe6:	89 e0       	ldi	r24, 0x09	; 9
    ebe8:	90 e0       	ldi	r25, 0x00	; 0
    ebea:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ebee:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ebf2:	80 e0       	ldi	r24, 0x00	; 0
    ebf4:	90 e0       	ldi	r25, 0x00	; 0
    ebf6:	08 95       	ret

0000ebf8 <mctime>:
    ebf8:	a4 e0       	ldi	r26, 0x04	; 4
    ebfa:	b0 e0       	ldi	r27, 0x00	; 0
    ebfc:	e2 e0       	ldi	r30, 0x02	; 2
    ebfe:	f6 e7       	ldi	r31, 0x76	; 118
    ec00:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    ec04:	69 83       	std	Y+1, r22	; 0x01
    ec06:	7a 83       	std	Y+2, r23	; 0x02
    ec08:	8b 83       	std	Y+3, r24	; 0x03
    ec0a:	9c 83       	std	Y+4, r25	; 0x04
    ec0c:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ec10:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ec14:	ce 01       	movw	r24, r28
    ec16:	01 96       	adiw	r24, 0x01	; 1
    ec18:	0e 94 34 3b 	call	0x7668	; 0x7668 <ctime_gm>
    ec1c:	fc 01       	movw	r30, r24
    ec1e:	01 90       	ld	r0, Z+
    ec20:	00 20       	and	r0, r0
    ec22:	e9 f7       	brne	.-6      	; 0xec1e <mctime+0x26>
    ec24:	31 97       	sbiw	r30, 0x01	; 1
    ec26:	e8 1b       	sub	r30, r24
    ec28:	f9 0b       	sbc	r31, r25
    ec2a:	39 f0       	breq	.+14     	; 0xec3a <mctime+0x42>
    ec2c:	31 97       	sbiw	r30, 0x01	; 1
    ec2e:	e8 0f       	add	r30, r24
    ec30:	f9 1f       	adc	r31, r25
    ec32:	20 81       	ld	r18, Z
    ec34:	2a 30       	cpi	r18, 0x0A	; 10
    ec36:	09 f4       	brne	.+2      	; 0xec3a <mctime+0x42>
    ec38:	10 82       	st	Z, r1
    ec3a:	24 96       	adiw	r28, 0x04	; 4
    ec3c:	e2 e0       	ldi	r30, 0x02	; 2
    ec3e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000ec42 <basename>:
    ec42:	00 97       	sbiw	r24, 0x00	; 0
    ec44:	49 f0       	breq	.+18     	; 0xec58 <basename+0x16>
    ec46:	fc 01       	movw	r30, r24
    ec48:	21 91       	ld	r18, Z+
    ec4a:	22 23       	and	r18, r18
    ec4c:	21 f0       	breq	.+8      	; 0xec56 <basename+0x14>
    ec4e:	2f 32       	cpi	r18, 0x2F	; 47
    ec50:	d9 f7       	brne	.-10     	; 0xec48 <basename+0x6>
    ec52:	cf 01       	movw	r24, r30
    ec54:	f9 cf       	rjmp	.-14     	; 0xec48 <basename+0x6>
    ec56:	08 95       	ret
    ec58:	8d e2       	ldi	r24, 0x2D	; 45
    ec5a:	9c e0       	ldi	r25, 0x0C	; 12
    ec5c:	08 95       	ret

0000ec5e <chdir>:
    ec5e:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ec62:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ec66:	0e 94 03 5e 	call	0xbc06	; 0xbc06 <f_chdir>
    ec6a:	00 97       	sbiw	r24, 0x00	; 0
    ec6c:	a1 f0       	breq	.+40     	; 0xec96 <chdir+0x38>
    ec6e:	84 31       	cpi	r24, 0x14	; 20
    ec70:	91 05       	cpc	r25, r1
    ec72:	40 f4       	brcc	.+16     	; 0xec84 <chdir+0x26>
    ec74:	fc 01       	movw	r30, r24
    ec76:	ea 55       	subi	r30, 0x5A	; 90
    ec78:	f4 4f       	sbci	r31, 0xF4	; 244
    ec7a:	80 81       	ld	r24, Z
    ec7c:	08 2e       	mov	r0, r24
    ec7e:	00 0c       	add	r0, r0
    ec80:	99 0b       	sbc	r25, r25
    ec82:	02 c0       	rjmp	.+4      	; 0xec88 <chdir+0x2a>
    ec84:	83 e2       	ldi	r24, 0x23	; 35
    ec86:	90 e0       	ldi	r25, 0x00	; 0
    ec88:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ec8c:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ec90:	8f ef       	ldi	r24, 0xFF	; 255
    ec92:	9f ef       	ldi	r25, 0xFF	; 255
    ec94:	08 95       	ret
    ec96:	80 e0       	ldi	r24, 0x00	; 0
    ec98:	90 e0       	ldi	r25, 0x00	; 0
    ec9a:	08 95       	ret

0000ec9c <chmod>:
    ec9c:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    eca0:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    eca4:	42 79       	andi	r20, 0x92	; 146
    eca6:	55 27       	eor	r21, r21
    eca8:	66 27       	eor	r22, r22
    ecaa:	77 27       	eor	r23, r23
    ecac:	45 2b       	or	r20, r21
    ecae:	46 2b       	or	r20, r22
    ecb0:	47 2b       	or	r20, r23
    ecb2:	19 f0       	breq	.+6      	; 0xecba <chmod+0x1e>
    ecb4:	80 e0       	ldi	r24, 0x00	; 0
    ecb6:	90 e0       	ldi	r25, 0x00	; 0
    ecb8:	08 95       	ret
    ecba:	41 e0       	ldi	r20, 0x01	; 1
    ecbc:	61 e0       	ldi	r22, 0x01	; 1
    ecbe:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <f_chmod>
    ecc2:	00 97       	sbiw	r24, 0x00	; 0
    ecc4:	b9 f3       	breq	.-18     	; 0xecb4 <chmod+0x18>
    ecc6:	84 31       	cpi	r24, 0x14	; 20
    ecc8:	91 05       	cpc	r25, r1
    ecca:	40 f4       	brcc	.+16     	; 0xecdc <chmod+0x40>
    eccc:	fc 01       	movw	r30, r24
    ecce:	ea 55       	subi	r30, 0x5A	; 90
    ecd0:	f4 4f       	sbci	r31, 0xF4	; 244
    ecd2:	80 81       	ld	r24, Z
    ecd4:	08 2e       	mov	r0, r24
    ecd6:	00 0c       	add	r0, r0
    ecd8:	99 0b       	sbc	r25, r25
    ecda:	02 c0       	rjmp	.+4      	; 0xece0 <chmod+0x44>
    ecdc:	83 e2       	ldi	r24, 0x23	; 35
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ece4:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ece8:	8f ef       	ldi	r24, 0xFF	; 255
    ecea:	9f ef       	ldi	r25, 0xFF	; 255
    ecec:	08 95       	ret

0000ecee <getcwd>:
    ecee:	cf 93       	push	r28
    ecf0:	df 93       	push	r29
    ecf2:	d8 2f       	mov	r29, r24
    ecf4:	c9 2f       	mov	r28, r25
    ecf6:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ecfa:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ecfe:	0e 94 5e 5e 	call	0xbcbc	; 0xbcbc <f_getcwd>
    ed02:	00 97       	sbiw	r24, 0x00	; 0
    ed04:	a1 f0       	breq	.+40     	; 0xed2e <getcwd+0x40>
    ed06:	84 31       	cpi	r24, 0x14	; 20
    ed08:	91 05       	cpc	r25, r1
    ed0a:	40 f4       	brcc	.+16     	; 0xed1c <getcwd+0x2e>
    ed0c:	fc 01       	movw	r30, r24
    ed0e:	ea 55       	subi	r30, 0x5A	; 90
    ed10:	f4 4f       	sbci	r31, 0xF4	; 244
    ed12:	80 81       	ld	r24, Z
    ed14:	08 2e       	mov	r0, r24
    ed16:	00 0c       	add	r0, r0
    ed18:	99 0b       	sbc	r25, r25
    ed1a:	02 c0       	rjmp	.+4      	; 0xed20 <getcwd+0x32>
    ed1c:	83 e2       	ldi	r24, 0x23	; 35
    ed1e:	90 e0       	ldi	r25, 0x00	; 0
    ed20:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ed24:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ed28:	80 e0       	ldi	r24, 0x00	; 0
    ed2a:	90 e0       	ldi	r25, 0x00	; 0
    ed2c:	02 c0       	rjmp	.+4      	; 0xed32 <getcwd+0x44>
    ed2e:	8d 2f       	mov	r24, r29
    ed30:	9c 2f       	mov	r25, r28
    ed32:	df 91       	pop	r29
    ed34:	cf 91       	pop	r28
    ed36:	08 95       	ret

0000ed38 <mkdir>:
    ed38:	cf 93       	push	r28
    ed3a:	df 93       	push	r29
    ed3c:	ec 01       	movw	r28, r24
    ed3e:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ed42:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ed46:	41 15       	cp	r20, r1
    ed48:	51 05       	cpc	r21, r1
    ed4a:	61 05       	cpc	r22, r1
    ed4c:	71 05       	cpc	r23, r1
    ed4e:	41 f4       	brne	.+16     	; 0xed60 <mkdir+0x28>
    ed50:	ce 01       	movw	r24, r28
    ed52:	0e 94 df 64 	call	0xc9be	; 0xc9be <f_mkdir>
    ed56:	00 97       	sbiw	r24, 0x00	; 0
    ed58:	39 f4       	brne	.+14     	; 0xed68 <mkdir+0x30>
    ed5a:	80 e0       	ldi	r24, 0x00	; 0
    ed5c:	90 e0       	ldi	r25, 0x00	; 0
    ed5e:	17 c0       	rjmp	.+46     	; 0xed8e <mkdir+0x56>
    ed60:	9d df       	rcall	.-198    	; 0xec9c <chmod>
    ed62:	89 2b       	or	r24, r25
    ed64:	a9 f3       	breq	.-22     	; 0xed50 <mkdir+0x18>
    ed66:	11 c0       	rjmp	.+34     	; 0xed8a <mkdir+0x52>
    ed68:	84 31       	cpi	r24, 0x14	; 20
    ed6a:	91 05       	cpc	r25, r1
    ed6c:	40 f4       	brcc	.+16     	; 0xed7e <mkdir+0x46>
    ed6e:	fc 01       	movw	r30, r24
    ed70:	ea 55       	subi	r30, 0x5A	; 90
    ed72:	f4 4f       	sbci	r31, 0xF4	; 244
    ed74:	80 81       	ld	r24, Z
    ed76:	08 2e       	mov	r0, r24
    ed78:	00 0c       	add	r0, r0
    ed7a:	99 0b       	sbc	r25, r25
    ed7c:	02 c0       	rjmp	.+4      	; 0xed82 <mkdir+0x4a>
    ed7e:	83 e2       	ldi	r24, 0x23	; 35
    ed80:	90 e0       	ldi	r25, 0x00	; 0
    ed82:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ed86:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ed8a:	8f ef       	ldi	r24, 0xFF	; 255
    ed8c:	9f ef       	ldi	r25, 0xFF	; 255
    ed8e:	df 91       	pop	r29
    ed90:	cf 91       	pop	r28
    ed92:	08 95       	ret

0000ed94 <rename>:
    ed94:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    ed98:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    ed9c:	0e 94 cf 65 	call	0xcb9e	; 0xcb9e <f_rename>
    eda0:	00 97       	sbiw	r24, 0x00	; 0
    eda2:	a1 f0       	breq	.+40     	; 0xedcc <rename+0x38>
    eda4:	84 31       	cpi	r24, 0x14	; 20
    eda6:	91 05       	cpc	r25, r1
    eda8:	40 f4       	brcc	.+16     	; 0xedba <rename+0x26>
    edaa:	fc 01       	movw	r30, r24
    edac:	ea 55       	subi	r30, 0x5A	; 90
    edae:	f4 4f       	sbci	r31, 0xF4	; 244
    edb0:	80 81       	ld	r24, Z
    edb2:	08 2e       	mov	r0, r24
    edb4:	00 0c       	add	r0, r0
    edb6:	99 0b       	sbc	r25, r25
    edb8:	02 c0       	rjmp	.+4      	; 0xedbe <rename+0x2a>
    edba:	83 e2       	ldi	r24, 0x23	; 35
    edbc:	90 e0       	ldi	r25, 0x00	; 0
    edbe:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    edc2:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    edc6:	8f ef       	ldi	r24, 0xFF	; 255
    edc8:	9f ef       	ldi	r25, 0xFF	; 255
    edca:	08 95       	ret
    edcc:	80 e0       	ldi	r24, 0x00	; 0
    edce:	90 e0       	ldi	r25, 0x00	; 0
    edd0:	08 95       	ret

0000edd2 <unlink>:
    edd2:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    edd6:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    edda:	0e 94 38 64 	call	0xc870	; 0xc870 <f_unlink>
    edde:	00 97       	sbiw	r24, 0x00	; 0
    ede0:	a1 f0       	breq	.+40     	; 0xee0a <unlink+0x38>
    ede2:	84 31       	cpi	r24, 0x14	; 20
    ede4:	91 05       	cpc	r25, r1
    ede6:	40 f4       	brcc	.+16     	; 0xedf8 <unlink+0x26>
    ede8:	fc 01       	movw	r30, r24
    edea:	ea 55       	subi	r30, 0x5A	; 90
    edec:	f4 4f       	sbci	r31, 0xF4	; 244
    edee:	80 81       	ld	r24, Z
    edf0:	08 2e       	mov	r0, r24
    edf2:	00 0c       	add	r0, r0
    edf4:	99 0b       	sbc	r25, r25
    edf6:	02 c0       	rjmp	.+4      	; 0xedfc <unlink+0x2a>
    edf8:	83 e2       	ldi	r24, 0x23	; 35
    edfa:	90 e0       	ldi	r25, 0x00	; 0
    edfc:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ee00:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ee04:	8f ef       	ldi	r24, 0xFF	; 255
    ee06:	9f ef       	ldi	r25, 0xFF	; 255
    ee08:	08 95       	ret
    ee0a:	80 e0       	ldi	r24, 0x00	; 0
    ee0c:	90 e0       	ldi	r25, 0x00	; 0
    ee0e:	08 95       	ret

0000ee10 <rmdir>:
    ee10:	e0 cf       	rjmp	.-64     	; 0xedd2 <unlink>
    ee12:	08 95       	ret

0000ee14 <closedir>:
    ee14:	0e 94 c1 62 	call	0xc582	; 0xc582 <f_closedir>
    ee18:	00 97       	sbiw	r24, 0x00	; 0
    ee1a:	a1 f0       	breq	.+40     	; 0xee44 <closedir+0x30>
    ee1c:	84 31       	cpi	r24, 0x14	; 20
    ee1e:	91 05       	cpc	r25, r1
    ee20:	40 f4       	brcc	.+16     	; 0xee32 <closedir+0x1e>
    ee22:	fc 01       	movw	r30, r24
    ee24:	ea 55       	subi	r30, 0x5A	; 90
    ee26:	f4 4f       	sbci	r31, 0xF4	; 244
    ee28:	80 81       	ld	r24, Z
    ee2a:	08 2e       	mov	r0, r24
    ee2c:	00 0c       	add	r0, r0
    ee2e:	99 0b       	sbc	r25, r25
    ee30:	02 c0       	rjmp	.+4      	; 0xee36 <closedir+0x22>
    ee32:	83 e2       	ldi	r24, 0x23	; 35
    ee34:	90 e0       	ldi	r25, 0x00	; 0
    ee36:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ee3a:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ee3e:	8f ef       	ldi	r24, 0xFF	; 255
    ee40:	9f ef       	ldi	r25, 0xFF	; 255
    ee42:	08 95       	ret
    ee44:	80 e0       	ldi	r24, 0x00	; 0
    ee46:	90 e0       	ldi	r25, 0x00	; 0
    ee48:	08 95       	ret

0000ee4a <opendir>:
    ee4a:	bc 01       	movw	r22, r24
    ee4c:	87 e3       	ldi	r24, 0x37	; 55
    ee4e:	9a e1       	ldi	r25, 0x1A	; 26
    ee50:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <f_opendir>
    ee54:	00 97       	sbiw	r24, 0x00	; 0
    ee56:	a1 f0       	breq	.+40     	; 0xee80 <opendir+0x36>
    ee58:	84 31       	cpi	r24, 0x14	; 20
    ee5a:	91 05       	cpc	r25, r1
    ee5c:	40 f4       	brcc	.+16     	; 0xee6e <opendir+0x24>
    ee5e:	fc 01       	movw	r30, r24
    ee60:	ea 55       	subi	r30, 0x5A	; 90
    ee62:	f4 4f       	sbci	r31, 0xF4	; 244
    ee64:	80 81       	ld	r24, Z
    ee66:	08 2e       	mov	r0, r24
    ee68:	00 0c       	add	r0, r0
    ee6a:	99 0b       	sbc	r25, r25
    ee6c:	02 c0       	rjmp	.+4      	; 0xee72 <opendir+0x28>
    ee6e:	83 e2       	ldi	r24, 0x23	; 35
    ee70:	90 e0       	ldi	r25, 0x00	; 0
    ee72:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    ee76:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    ee7a:	80 e0       	ldi	r24, 0x00	; 0
    ee7c:	90 e0       	ldi	r25, 0x00	; 0
    ee7e:	08 95       	ret
    ee80:	87 e3       	ldi	r24, 0x37	; 55
    ee82:	9a e1       	ldi	r25, 0x1A	; 26
    ee84:	08 95       	ret

0000ee86 <readdir>:
    ee86:	a6 e1       	ldi	r26, 0x16	; 22
    ee88:	b1 e0       	ldi	r27, 0x01	; 1
    ee8a:	e9 e4       	ldi	r30, 0x49	; 73
    ee8c:	f7 e7       	ldi	r31, 0x77	; 119
    ee8e:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    ee92:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_de>
    ee96:	be 01       	movw	r22, r28
    ee98:	6f 5f       	subi	r22, 0xFF	; 255
    ee9a:	7f 4f       	sbci	r23, 0xFF	; 255
    ee9c:	0e 94 d6 62 	call	0xc5ac	; 0xc5ac <f_readdir>
    eea0:	00 97       	sbiw	r24, 0x00	; 0
    eea2:	a1 f0       	breq	.+40     	; 0xeecc <readdir+0x46>
    eea4:	84 31       	cpi	r24, 0x14	; 20
    eea6:	91 05       	cpc	r25, r1
    eea8:	40 f4       	brcc	.+16     	; 0xeeba <readdir+0x34>
    eeaa:	fc 01       	movw	r30, r24
    eeac:	ea 55       	subi	r30, 0x5A	; 90
    eeae:	f4 4f       	sbci	r31, 0xF4	; 244
    eeb0:	80 81       	ld	r24, Z
    eeb2:	08 2e       	mov	r0, r24
    eeb4:	00 0c       	add	r0, r0
    eeb6:	99 0b       	sbc	r25, r25
    eeb8:	02 c0       	rjmp	.+4      	; 0xeebe <readdir+0x38>
    eeba:	83 e2       	ldi	r24, 0x23	; 35
    eebc:	90 e0       	ldi	r25, 0x00	; 0
    eebe:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    eec2:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    eec6:	80 e0       	ldi	r24, 0x00	; 0
    eec8:	90 e0       	ldi	r25, 0x00	; 0
    eeca:	16 c0       	rjmp	.+44     	; 0xeef8 <readdir+0x72>
    eecc:	be 01       	movw	r22, r28
    eece:	69 5e       	subi	r22, 0xE9	; 233
    eed0:	7f 4f       	sbci	r23, 0xFF	; 255
    eed2:	fb 01       	movw	r30, r22
    eed4:	01 90       	ld	r0, Z+
    eed6:	00 20       	and	r0, r0
    eed8:	e9 f7       	brne	.-6      	; 0xeed4 <readdir+0x4e>
    eeda:	31 97       	sbiw	r30, 0x01	; 1
    eedc:	8f 01       	movw	r16, r30
    eede:	06 1b       	sub	r16, r22
    eee0:	17 0b       	sbc	r17, r23
    eee2:	a8 01       	movw	r20, r16
    eee4:	88 e3       	ldi	r24, 0x38	; 56
    eee6:	98 e1       	ldi	r25, 0x18	; 24
    eee8:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <strncpy>
    eeec:	f8 01       	movw	r30, r16
    eeee:	e8 5c       	subi	r30, 0xC8	; 200
    eef0:	f7 4e       	sbci	r31, 0xE7	; 231
    eef2:	10 82       	st	Z, r1
    eef4:	88 e3       	ldi	r24, 0x38	; 56
    eef6:	98 e1       	ldi	r25, 0x18	; 24
    eef8:	ca 5e       	subi	r28, 0xEA	; 234
    eefa:	de 4f       	sbci	r29, 0xFE	; 254
    eefc:	e4 e0       	ldi	r30, 0x04	; 4
    eefe:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0000ef02 <perror>:
    ef02:	ad b7       	in	r26, 0x3d	; 61
    ef04:	be b7       	in	r27, 0x3e	; 62
    ef06:	17 97       	sbiw	r26, 0x07	; 7
    ef08:	0f b6       	in	r0, 0x3f	; 63
    ef0a:	f8 94       	cli
    ef0c:	be bf       	out	0x3e, r27	; 62
    ef0e:	0f be       	out	0x3f, r0	; 63
    ef10:	ad bf       	out	0x3d, r26	; 61
    ef12:	20 91 c4 1d 	lds	r18, 0x1DC4	; 0x801dc4 <errno>
    ef16:	30 91 c5 1d 	lds	r19, 0x1DC5	; 0x801dc5 <errno+0x1>
    ef1a:	23 32       	cpi	r18, 0x23	; 35
    ef1c:	31 05       	cpc	r19, r1
    ef1e:	40 f4       	brcc	.+16     	; 0xef30 <perror+0x2e>
    ef20:	22 0f       	add	r18, r18
    ef22:	33 1f       	adc	r19, r19
    ef24:	f9 01       	movw	r30, r18
    ef26:	ea 5c       	subi	r30, 0xCA	; 202
    ef28:	fe 4f       	sbci	r31, 0xFE	; 254
    ef2a:	20 81       	ld	r18, Z
    ef2c:	31 81       	ldd	r19, Z+1	; 0x01
    ef2e:	04 c0       	rjmp	.+8      	; 0xef38 <perror+0x36>
    ef30:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ef34:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ef38:	00 97       	sbiw	r24, 0x00	; 0
    ef3a:	99 f0       	breq	.+38     	; 0xef62 <perror+0x60>
    ef3c:	fc 01       	movw	r30, r24
    ef3e:	40 81       	ld	r20, Z
    ef40:	44 23       	and	r20, r20
    ef42:	79 f0       	breq	.+30     	; 0xef62 <perror+0x60>
    ef44:	ed b7       	in	r30, 0x3d	; 61
    ef46:	fe b7       	in	r31, 0x3e	; 62
    ef48:	37 83       	std	Z+7, r19	; 0x07
    ef4a:	26 83       	std	Z+6, r18	; 0x06
    ef4c:	95 83       	std	Z+5, r25	; 0x05
    ef4e:	84 83       	std	Z+4, r24	; 0x04
    ef50:	83 e8       	ldi	r24, 0x83	; 131
    ef52:	9b e0       	ldi	r25, 0x0B	; 11
    ef54:	a0 e0       	ldi	r26, 0x00	; 0
    ef56:	81 83       	std	Z+1, r24	; 0x01
    ef58:	92 83       	std	Z+2, r25	; 0x02
    ef5a:	a3 83       	std	Z+3, r26	; 0x03
    ef5c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    ef60:	0c c0       	rjmp	.+24     	; 0xef7a <perror+0x78>
    ef62:	ed b7       	in	r30, 0x3d	; 61
    ef64:	fe b7       	in	r31, 0x3e	; 62
    ef66:	35 83       	std	Z+5, r19	; 0x05
    ef68:	24 83       	std	Z+4, r18	; 0x04
    ef6a:	8f e7       	ldi	r24, 0x7F	; 127
    ef6c:	9b e0       	ldi	r25, 0x0B	; 11
    ef6e:	a0 e0       	ldi	r26, 0x00	; 0
    ef70:	81 83       	std	Z+1, r24	; 0x01
    ef72:	92 83       	std	Z+2, r25	; 0x02
    ef74:	a3 83       	std	Z+3, r26	; 0x03
    ef76:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    ef7a:	ad b7       	in	r26, 0x3d	; 61
    ef7c:	be b7       	in	r27, 0x3e	; 62
    ef7e:	17 96       	adiw	r26, 0x07	; 7
    ef80:	0f b6       	in	r0, 0x3f	; 63
    ef82:	f8 94       	cli
    ef84:	be bf       	out	0x3e, r27	; 62
    ef86:	0f be       	out	0x3f, r0	; 63
    ef88:	ad bf       	out	0x3d, r26	; 61
    ef8a:	08 95       	ret

0000ef8c <fdevopen>:
    ef8c:	0f 93       	push	r16
    ef8e:	1f 93       	push	r17
    ef90:	cf 93       	push	r28
    ef92:	df 93       	push	r29
    ef94:	00 97       	sbiw	r24, 0x00	; 0
    ef96:	31 f4       	brne	.+12     	; 0xefa4 <fdevopen+0x18>
    ef98:	61 15       	cp	r22, r1
    ef9a:	71 05       	cpc	r23, r1
    ef9c:	19 f4       	brne	.+6      	; 0xefa4 <fdevopen+0x18>
    ef9e:	80 e0       	ldi	r24, 0x00	; 0
    efa0:	90 e0       	ldi	r25, 0x00	; 0
    efa2:	3a c0       	rjmp	.+116    	; 0xf018 <fdevopen+0x8c>
    efa4:	8b 01       	movw	r16, r22
    efa6:	ec 01       	movw	r28, r24
    efa8:	6e e0       	ldi	r22, 0x0E	; 14
    efaa:	70 e0       	ldi	r23, 0x00	; 0
    efac:	81 e0       	ldi	r24, 0x01	; 1
    efae:	90 e0       	ldi	r25, 0x00	; 0
    efb0:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
    efb4:	fc 01       	movw	r30, r24
    efb6:	89 2b       	or	r24, r25
    efb8:	91 f3       	breq	.-28     	; 0xef9e <fdevopen+0x12>
    efba:	80 e8       	ldi	r24, 0x80	; 128
    efbc:	83 83       	std	Z+3, r24	; 0x03
    efbe:	01 15       	cp	r16, r1
    efc0:	11 05       	cpc	r17, r1
    efc2:	71 f0       	breq	.+28     	; 0xefe0 <fdevopen+0x54>
    efc4:	13 87       	std	Z+11, r17	; 0x0b
    efc6:	02 87       	std	Z+10, r16	; 0x0a
    efc8:	81 e8       	ldi	r24, 0x81	; 129
    efca:	83 83       	std	Z+3, r24	; 0x03
    efcc:	80 91 c6 1d 	lds	r24, 0x1DC6	; 0x801dc6 <__iob>
    efd0:	90 91 c7 1d 	lds	r25, 0x1DC7	; 0x801dc7 <__iob+0x1>
    efd4:	89 2b       	or	r24, r25
    efd6:	21 f4       	brne	.+8      	; 0xefe0 <fdevopen+0x54>
    efd8:	f0 93 c7 1d 	sts	0x1DC7, r31	; 0x801dc7 <__iob+0x1>
    efdc:	e0 93 c6 1d 	sts	0x1DC6, r30	; 0x801dc6 <__iob>
    efe0:	20 97       	sbiw	r28, 0x00	; 0
    efe2:	c9 f0       	breq	.+50     	; 0xf016 <fdevopen+0x8a>
    efe4:	d1 87       	std	Z+9, r29	; 0x09
    efe6:	c0 87       	std	Z+8, r28	; 0x08
    efe8:	83 81       	ldd	r24, Z+3	; 0x03
    efea:	82 60       	ori	r24, 0x02	; 2
    efec:	83 83       	std	Z+3, r24	; 0x03
    efee:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
    eff2:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
    eff6:	89 2b       	or	r24, r25
    eff8:	21 f4       	brne	.+8      	; 0xf002 <fdevopen+0x76>
    effa:	f0 93 c9 1d 	sts	0x1DC9, r31	; 0x801dc9 <__iob+0x3>
    effe:	e0 93 c8 1d 	sts	0x1DC8, r30	; 0x801dc8 <__iob+0x2>
    f002:	80 91 ca 1d 	lds	r24, 0x1DCA	; 0x801dca <__iob+0x4>
    f006:	90 91 cb 1d 	lds	r25, 0x1DCB	; 0x801dcb <__iob+0x5>
    f00a:	89 2b       	or	r24, r25
    f00c:	21 f4       	brne	.+8      	; 0xf016 <fdevopen+0x8a>
    f00e:	f0 93 cb 1d 	sts	0x1DCB, r31	; 0x801dcb <__iob+0x5>
    f012:	e0 93 ca 1d 	sts	0x1DCA, r30	; 0x801dca <__iob+0x4>
    f016:	cf 01       	movw	r24, r30
    f018:	df 91       	pop	r29
    f01a:	cf 91       	pop	r28
    f01c:	1f 91       	pop	r17
    f01e:	0f 91       	pop	r16
    f020:	08 95       	ret

0000f022 <fat_time_to_unix>:
    f022:	a6 e1       	ldi	r26, 0x16	; 22
    f024:	b0 e0       	ldi	r27, 0x00	; 0
    f026:	e7 e1       	ldi	r30, 0x17	; 23
    f028:	f8 e7       	ldi	r31, 0x78	; 120
    f02a:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    f02e:	fe 01       	movw	r30, r28
    f030:	31 96       	adiw	r30, 0x01	; 1
    f032:	26 e1       	ldi	r18, 0x16	; 22
    f034:	df 01       	movw	r26, r30
    f036:	1d 92       	st	X+, r1
    f038:	2a 95       	dec	r18
    f03a:	e9 f7       	brne	.-6      	; 0xf036 <fat_time_to_unix+0x14>
    f03c:	9b 01       	movw	r18, r22
    f03e:	22 0f       	add	r18, r18
    f040:	33 1f       	adc	r19, r19
    f042:	2e 73       	andi	r18, 0x3E	; 62
    f044:	33 27       	eor	r19, r19
    f046:	3a 83       	std	Y+2, r19	; 0x02
    f048:	29 83       	std	Y+1, r18	; 0x01
    f04a:	9b 01       	movw	r18, r22
    f04c:	55 e0       	ldi	r21, 0x05	; 5
    f04e:	36 95       	lsr	r19
    f050:	27 95       	ror	r18
    f052:	5a 95       	dec	r21
    f054:	e1 f7       	brne	.-8      	; 0xf04e <fat_time_to_unix+0x2c>
    f056:	2f 73       	andi	r18, 0x3F	; 63
    f058:	33 27       	eor	r19, r19
    f05a:	3c 83       	std	Y+4, r19	; 0x04
    f05c:	2b 83       	std	Y+3, r18	; 0x03
    f05e:	27 2f       	mov	r18, r23
    f060:	26 95       	lsr	r18
    f062:	26 95       	lsr	r18
    f064:	26 95       	lsr	r18
    f066:	2d 83       	std	Y+5, r18	; 0x05
    f068:	1e 82       	std	Y+6, r1	; 0x06
    f06a:	9c 01       	movw	r18, r24
    f06c:	2f 71       	andi	r18, 0x1F	; 31
    f06e:	33 27       	eor	r19, r19
    f070:	38 87       	std	Y+8, r19	; 0x08
    f072:	2f 83       	std	Y+7, r18	; 0x07
    f074:	9c 01       	movw	r18, r24
    f076:	65 e0       	ldi	r22, 0x05	; 5
    f078:	36 95       	lsr	r19
    f07a:	27 95       	ror	r18
    f07c:	6a 95       	dec	r22
    f07e:	e1 f7       	brne	.-8      	; 0xf078 <fat_time_to_unix+0x56>
    f080:	2f 70       	andi	r18, 0x0F	; 15
    f082:	33 27       	eor	r19, r19
    f084:	21 50       	subi	r18, 0x01	; 1
    f086:	31 09       	sbc	r19, r1
    f088:	3a 87       	std	Y+10, r19	; 0x0a
    f08a:	29 87       	std	Y+9, r18	; 0x09
    f08c:	9c 01       	movw	r18, r24
    f08e:	23 2f       	mov	r18, r19
    f090:	33 27       	eor	r19, r19
    f092:	26 95       	lsr	r18
    f094:	20 5b       	subi	r18, 0xB0	; 176
    f096:	3f 4f       	sbci	r19, 0xFF	; 255
    f098:	3c 87       	std	Y+12, r19	; 0x0c
    f09a:	2b 87       	std	Y+11, r18	; 0x0b
    f09c:	cf 01       	movw	r24, r30
    f09e:	0e 94 7f 38 	call	0x70fe	; 0x70fe <timegm>
    f0a2:	66 96       	adiw	r28, 0x16	; 22
    f0a4:	e2 e0       	ldi	r30, 0x02	; 2
    f0a6:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000f0aa <stat>:
    f0aa:	a6 e1       	ldi	r26, 0x16	; 22
    f0ac:	b1 e0       	ldi	r27, 0x01	; 1
    f0ae:	eb e5       	ldi	r30, 0x5B	; 91
    f0b0:	f8 e7       	ldi	r31, 0x78	; 120
    f0b2:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
    f0b6:	6c 01       	movw	r12, r24
    f0b8:	8b 01       	movw	r16, r22
    f0ba:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f0be:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    f0c2:	6c ef       	ldi	r22, 0xFC	; 252
    f0c4:	78 e0       	ldi	r23, 0x08	; 8
    f0c6:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
    f0ca:	89 2b       	or	r24, r25
    f0cc:	01 f1       	breq	.+64     	; 0xf10e <stat+0x64>
    f0ce:	f8 01       	movw	r30, r16
    f0d0:	14 a2       	std	Z+36, r1	; 0x24
    f0d2:	15 a2       	std	Z+37, r1	; 0x25
    f0d4:	16 a2       	std	Z+38, r1	; 0x26
    f0d6:	17 a2       	std	Z+39, r1	; 0x27
    f0d8:	10 a6       	std	Z+40, r1	; 0x28
    f0da:	11 a6       	std	Z+41, r1	; 0x29
    f0dc:	12 a6       	std	Z+42, r1	; 0x2a
    f0de:	13 a6       	std	Z+43, r1	; 0x2b
    f0e0:	14 a6       	std	Z+44, r1	; 0x2c
    f0e2:	15 a6       	std	Z+45, r1	; 0x2d
    f0e4:	16 a6       	std	Z+46, r1	; 0x2e
    f0e6:	17 a6       	std	Z+47, r1	; 0x2f
    f0e8:	11 8a       	std	Z+17, r1	; 0x11
    f0ea:	10 8a       	std	Z+16, r1	; 0x10
    f0ec:	13 8a       	std	Z+19, r1	; 0x13
    f0ee:	12 8a       	std	Z+18, r1	; 0x12
    f0f0:	10 8e       	std	Z+24, r1	; 0x18
    f0f2:	11 8e       	std	Z+25, r1	; 0x19
    f0f4:	12 8e       	std	Z+26, r1	; 0x1a
    f0f6:	13 8e       	std	Z+27, r1	; 0x1b
    f0f8:	80 e0       	ldi	r24, 0x00	; 0
    f0fa:	90 e4       	ldi	r25, 0x40	; 64
    f0fc:	a0 e0       	ldi	r26, 0x00	; 0
    f0fe:	b0 e0       	ldi	r27, 0x00	; 0
    f100:	80 87       	std	Z+8, r24	; 0x08
    f102:	91 87       	std	Z+9, r25	; 0x09
    f104:	a2 87       	std	Z+10, r26	; 0x0a
    f106:	b3 87       	std	Z+11, r27	; 0x0b
    f108:	e1 2c       	mov	r14, r1
    f10a:	f1 2c       	mov	r15, r1
    f10c:	62 c0       	rjmp	.+196    	; 0xf1d2 <stat+0x128>
    f10e:	66 ea       	ldi	r22, 0xA6	; 166
    f110:	78 e0       	ldi	r23, 0x08	; 8
    f112:	c6 01       	movw	r24, r12
    f114:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
    f118:	89 2b       	or	r24, r25
    f11a:	c9 f6       	brne	.-78     	; 0xf0ce <stat+0x24>
    f11c:	6d ef       	ldi	r22, 0xFD	; 253
    f11e:	72 e1       	ldi	r23, 0x12	; 18
    f120:	c6 01       	movw	r24, r12
    f122:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
    f126:	7c 01       	movw	r14, r24
    f128:	89 2b       	or	r24, r25
    f12a:	89 f6       	brne	.-94     	; 0xf0ce <stat+0x24>
    f12c:	be 01       	movw	r22, r28
    f12e:	6f 5f       	subi	r22, 0xFF	; 255
    f130:	7f 4f       	sbci	r23, 0xFF	; 255
    f132:	c6 01       	movw	r24, r12
    f134:	0e 94 1a 63 	call	0xc634	; 0xc634 <f_stat>
    f138:	00 97       	sbiw	r24, 0x00	; 0
    f13a:	a9 f0       	breq	.+42     	; 0xf166 <stat+0xbc>
    f13c:	84 31       	cpi	r24, 0x14	; 20
    f13e:	91 05       	cpc	r25, r1
    f140:	40 f4       	brcc	.+16     	; 0xf152 <stat+0xa8>
    f142:	fc 01       	movw	r30, r24
    f144:	ea 55       	subi	r30, 0x5A	; 90
    f146:	f4 4f       	sbci	r31, 0xF4	; 244
    f148:	80 81       	ld	r24, Z
    f14a:	08 2e       	mov	r0, r24
    f14c:	00 0c       	add	r0, r0
    f14e:	99 0b       	sbc	r25, r25
    f150:	02 c0       	rjmp	.+4      	; 0xf156 <stat+0xac>
    f152:	83 e2       	ldi	r24, 0x23	; 35
    f154:	90 e0       	ldi	r25, 0x00	; 0
    f156:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f15a:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f15e:	ee 24       	eor	r14, r14
    f160:	ea 94       	dec	r14
    f162:	fe 2c       	mov	r15, r14
    f164:	36 c0       	rjmp	.+108    	; 0xf1d2 <stat+0x128>
    f166:	89 81       	ldd	r24, Y+1	; 0x01
    f168:	9a 81       	ldd	r25, Y+2	; 0x02
    f16a:	ab 81       	ldd	r26, Y+3	; 0x03
    f16c:	bc 81       	ldd	r27, Y+4	; 0x04
    f16e:	f8 01       	movw	r30, r16
    f170:	80 8f       	std	Z+24, r24	; 0x18
    f172:	91 8f       	std	Z+25, r25	; 0x19
    f174:	a2 8f       	std	Z+26, r26	; 0x1a
    f176:	b3 8f       	std	Z+27, r27	; 0x1b
    f178:	6f 81       	ldd	r22, Y+7	; 0x07
    f17a:	78 85       	ldd	r23, Y+8	; 0x08
    f17c:	8d 81       	ldd	r24, Y+5	; 0x05
    f17e:	9e 81       	ldd	r25, Y+6	; 0x06
    f180:	50 df       	rcall	.-352    	; 0xf022 <fat_time_to_unix>
    f182:	f8 01       	movw	r30, r16
    f184:	64 a3       	std	Z+36, r22	; 0x24
    f186:	75 a3       	std	Z+37, r23	; 0x25
    f188:	86 a3       	std	Z+38, r24	; 0x26
    f18a:	97 a3       	std	Z+39, r25	; 0x27
    f18c:	60 a7       	std	Z+40, r22	; 0x28
    f18e:	71 a7       	std	Z+41, r23	; 0x29
    f190:	82 a7       	std	Z+42, r24	; 0x2a
    f192:	93 a7       	std	Z+43, r25	; 0x2b
    f194:	64 a7       	std	Z+44, r22	; 0x2c
    f196:	75 a7       	std	Z+45, r23	; 0x2d
    f198:	86 a7       	std	Z+46, r24	; 0x2e
    f19a:	97 a7       	std	Z+47, r25	; 0x2f
    f19c:	29 85       	ldd	r18, Y+9	; 0x09
    f19e:	20 fd       	sbrc	r18, 0
    f1a0:	03 c0       	rjmp	.+6      	; 0xf1a8 <stat+0xfe>
    f1a2:	8f ef       	ldi	r24, 0xFF	; 255
    f1a4:	91 e0       	ldi	r25, 0x01	; 1
    f1a6:	02 c0       	rjmp	.+4      	; 0xf1ac <stat+0x102>
    f1a8:	8d e6       	ldi	r24, 0x6D	; 109
    f1aa:	91 e0       	ldi	r25, 0x01	; 1
    f1ac:	48 ee       	ldi	r20, 0xE8	; 232
    f1ae:	53 e0       	ldi	r21, 0x03	; 3
    f1b0:	f8 01       	movw	r30, r16
    f1b2:	51 8b       	std	Z+17, r21	; 0x11
    f1b4:	40 8b       	std	Z+16, r20	; 0x10
    f1b6:	53 8b       	std	Z+19, r21	; 0x13
    f1b8:	42 8b       	std	Z+18, r20	; 0x12
    f1ba:	24 ff       	sbrs	r18, 4
    f1bc:	02 c0       	rjmp	.+4      	; 0xf1c2 <stat+0x118>
    f1be:	90 64       	ori	r25, 0x40	; 64
    f1c0:	01 c0       	rjmp	.+2      	; 0xf1c4 <stat+0x11a>
    f1c2:	90 68       	ori	r25, 0x80	; 128
    f1c4:	a0 e0       	ldi	r26, 0x00	; 0
    f1c6:	b0 e0       	ldi	r27, 0x00	; 0
    f1c8:	f8 01       	movw	r30, r16
    f1ca:	80 87       	std	Z+8, r24	; 0x08
    f1cc:	91 87       	std	Z+9, r25	; 0x09
    f1ce:	a2 87       	std	Z+10, r26	; 0x0a
    f1d0:	b3 87       	std	Z+11, r27	; 0x0b
    f1d2:	c7 01       	movw	r24, r14
    f1d4:	ca 5e       	subi	r28, 0xEA	; 234
    f1d6:	de 4f       	sbci	r29, 0xFE	; 254
    f1d8:	e8 e0       	ldi	r30, 0x08	; 8
    f1da:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0000f1de <unix_time_to_fat>:
    f1de:	a4 e0       	ldi	r26, 0x04	; 4
    f1e0:	b0 e0       	ldi	r27, 0x00	; 0
    f1e2:	e5 ef       	ldi	r30, 0xF5	; 245
    f1e4:	f8 e7       	ldi	r31, 0x78	; 120
    f1e6:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
    f1ea:	69 83       	std	Y+1, r22	; 0x01
    f1ec:	7a 83       	std	Y+2, r23	; 0x02
    f1ee:	8b 83       	std	Y+3, r24	; 0x03
    f1f0:	9c 83       	std	Y+4, r25	; 0x04
    f1f2:	7a 01       	movw	r14, r20
    f1f4:	89 01       	movw	r16, r18
    f1f6:	ce 01       	movw	r24, r28
    f1f8:	01 96       	adiw	r24, 0x01	; 1
    f1fa:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <gmtime>
    f1fe:	fc 01       	movw	r30, r24
    f200:	22 85       	ldd	r18, Z+10	; 0x0a
    f202:	33 85       	ldd	r19, Z+11	; 0x0b
    f204:	20 55       	subi	r18, 0x50	; 80
    f206:	31 09       	sbc	r19, r1
    f208:	c9 01       	movw	r24, r18
    f20a:	98 2f       	mov	r25, r24
    f20c:	88 27       	eor	r24, r24
    f20e:	99 0f       	add	r25, r25
    f210:	20 85       	ldd	r18, Z+8	; 0x08
    f212:	31 85       	ldd	r19, Z+9	; 0x09
    f214:	2f 5f       	subi	r18, 0xFF	; 255
    f216:	3f 4f       	sbci	r19, 0xFF	; 255
    f218:	45 e0       	ldi	r20, 0x05	; 5
    f21a:	22 0f       	add	r18, r18
    f21c:	33 1f       	adc	r19, r19
    f21e:	4a 95       	dec	r20
    f220:	e1 f7       	brne	.-8      	; 0xf21a <unix_time_to_fat+0x3c>
    f222:	28 2b       	or	r18, r24
    f224:	39 2b       	or	r19, r25
    f226:	86 81       	ldd	r24, Z+6	; 0x06
    f228:	97 81       	ldd	r25, Z+7	; 0x07
    f22a:	28 2b       	or	r18, r24
    f22c:	39 2b       	or	r19, r25
    f22e:	d7 01       	movw	r26, r14
    f230:	2d 93       	st	X+, r18
    f232:	3c 93       	st	X, r19
    f234:	84 81       	ldd	r24, Z+4	; 0x04
    f236:	20 e0       	ldi	r18, 0x00	; 0
    f238:	30 e0       	ldi	r19, 0x00	; 0
    f23a:	38 2f       	mov	r19, r24
    f23c:	33 0f       	add	r19, r19
    f23e:	33 0f       	add	r19, r19
    f240:	33 0f       	add	r19, r19
    f242:	82 81       	ldd	r24, Z+2	; 0x02
    f244:	93 81       	ldd	r25, Z+3	; 0x03
    f246:	55 e0       	ldi	r21, 0x05	; 5
    f248:	88 0f       	add	r24, r24
    f24a:	99 1f       	adc	r25, r25
    f24c:	5a 95       	dec	r21
    f24e:	e1 f7       	brne	.-8      	; 0xf248 <unix_time_to_fat+0x6a>
    f250:	82 2b       	or	r24, r18
    f252:	93 2b       	or	r25, r19
    f254:	20 81       	ld	r18, Z
    f256:	31 81       	ldd	r19, Z+1	; 0x01
    f258:	36 95       	lsr	r19
    f25a:	27 95       	ror	r18
    f25c:	82 2b       	or	r24, r18
    f25e:	93 2b       	or	r25, r19
    f260:	f8 01       	movw	r30, r16
    f262:	91 83       	std	Z+1, r25	; 0x01
    f264:	80 83       	st	Z, r24
    f266:	24 96       	adiw	r28, 0x04	; 4
    f268:	e6 e0       	ldi	r30, 0x06	; 6
    f26a:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0000f26e <utime>:
    f26e:	aa e1       	ldi	r26, 0x1A	; 26
    f270:	b1 e0       	ldi	r27, 0x01	; 1
    f272:	ed e3       	ldi	r30, 0x3D	; 61
    f274:	f9 e7       	ldi	r31, 0x79	; 121
    f276:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
    f27a:	8c 01       	movw	r16, r24
    f27c:	61 15       	cp	r22, r1
    f27e:	71 05       	cpc	r23, r1
    f280:	31 f0       	breq	.+12     	; 0xf28e <utime+0x20>
    f282:	fb 01       	movw	r30, r22
    f284:	64 81       	ldd	r22, Z+4	; 0x04
    f286:	75 81       	ldd	r23, Z+5	; 0x05
    f288:	86 81       	ldd	r24, Z+6	; 0x06
    f28a:	97 81       	ldd	r25, Z+7	; 0x07
    f28c:	04 c0       	rjmp	.+8      	; 0xf296 <utime+0x28>
    f28e:	80 e0       	ldi	r24, 0x00	; 0
    f290:	90 e0       	ldi	r25, 0x00	; 0
    f292:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <time>
    f296:	9e 01       	movw	r18, r28
    f298:	29 5e       	subi	r18, 0xE9	; 233
    f29a:	3e 4f       	sbci	r19, 0xFE	; 254
    f29c:	ae 01       	movw	r20, r28
    f29e:	47 5e       	subi	r20, 0xE7	; 231
    f2a0:	5e 4f       	sbci	r21, 0xFE	; 254
    f2a2:	9d df       	rcall	.-198    	; 0xf1de <unix_time_to_fat>
    f2a4:	c7 5e       	subi	r28, 0xE7	; 231
    f2a6:	de 4f       	sbci	r29, 0xFE	; 254
    f2a8:	88 81       	ld	r24, Y
    f2aa:	99 81       	ldd	r25, Y+1	; 0x01
    f2ac:	c9 51       	subi	r28, 0x19	; 25
    f2ae:	d1 40       	sbci	r29, 0x01	; 1
    f2b0:	9e 83       	std	Y+6, r25	; 0x06
    f2b2:	8d 83       	std	Y+5, r24	; 0x05
    f2b4:	c9 5e       	subi	r28, 0xE9	; 233
    f2b6:	de 4f       	sbci	r29, 0xFE	; 254
    f2b8:	88 81       	ld	r24, Y
    f2ba:	99 81       	ldd	r25, Y+1	; 0x01
    f2bc:	c7 51       	subi	r28, 0x17	; 23
    f2be:	d1 40       	sbci	r29, 0x01	; 1
    f2c0:	98 87       	std	Y+8, r25	; 0x08
    f2c2:	8f 83       	std	Y+7, r24	; 0x07
    f2c4:	be 01       	movw	r22, r28
    f2c6:	6f 5f       	subi	r22, 0xFF	; 255
    f2c8:	7f 4f       	sbci	r23, 0xFF	; 255
    f2ca:	c8 01       	movw	r24, r16
    f2cc:	0e 94 31 67 	call	0xce62	; 0xce62 <f_utime>
    f2d0:	84 31       	cpi	r24, 0x14	; 20
    f2d2:	91 05       	cpc	r25, r1
    f2d4:	40 f4       	brcc	.+16     	; 0xf2e6 <utime+0x78>
    f2d6:	fc 01       	movw	r30, r24
    f2d8:	ea 55       	subi	r30, 0x5A	; 90
    f2da:	f4 4f       	sbci	r31, 0xF4	; 244
    f2dc:	80 81       	ld	r24, Z
    f2de:	08 2e       	mov	r0, r24
    f2e0:	00 0c       	add	r0, r0
    f2e2:	99 0b       	sbc	r25, r25
    f2e4:	02 c0       	rjmp	.+4      	; 0xf2ea <utime+0x7c>
    f2e6:	83 e2       	ldi	r24, 0x23	; 35
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	c6 5e       	subi	r28, 0xE6	; 230
    f2ec:	de 4f       	sbci	r29, 0xFE	; 254
    f2ee:	e4 e0       	ldi	r30, 0x04	; 4
    f2f0:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0000f2f4 <fileno_to_fatfs>:
    f2f4:	83 30       	cpi	r24, 0x03	; 3
    f2f6:	91 05       	cpc	r25, r1
    f2f8:	48 f4       	brcc	.+18     	; 0xf30c <fileno_to_fatfs+0x18>
    f2fa:	89 e0       	ldi	r24, 0x09	; 9
    f2fc:	90 e0       	ldi	r25, 0x00	; 0
    f2fe:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f302:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f306:	80 e0       	ldi	r24, 0x00	; 0
    f308:	90 e0       	ldi	r25, 0x00	; 0
    f30a:	08 95       	ret
    f30c:	60 dc       	rcall	.-1856   	; 0xebce <fileno_to_stream>
    f30e:	00 97       	sbiw	r24, 0x00	; 0
    f310:	d1 f3       	breq	.-12     	; 0xf306 <fileno_to_fatfs+0x12>
    f312:	fc 01       	movw	r30, r24
    f314:	84 85       	ldd	r24, Z+12	; 0x0c
    f316:	95 85       	ldd	r25, Z+13	; 0x0d
    f318:	00 97       	sbiw	r24, 0x00	; 0
    f31a:	79 f3       	breq	.-34     	; 0xf2fa <fileno_to_fatfs+0x6>
    f31c:	08 95       	ret

0000f31e <ftell>:
    f31e:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f322:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    f326:	37 dc       	rcall	.-1938   	; 0xeb96 <fileno>
    f328:	83 30       	cpi	r24, 0x03	; 3
    f32a:	91 05       	cpc	r25, r1
    f32c:	48 f0       	brcs	.+18     	; 0xf340 <ftell+0x22>
    f32e:	e2 df       	rcall	.-60     	; 0xf2f4 <fileno_to_fatfs>
    f330:	00 97       	sbiw	r24, 0x00	; 0
    f332:	51 f4       	brne	.+20     	; 0xf348 <ftell+0x2a>
    f334:	89 e0       	ldi	r24, 0x09	; 9
    f336:	90 e0       	ldi	r25, 0x00	; 0
    f338:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f33c:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f340:	6f ef       	ldi	r22, 0xFF	; 255
    f342:	7f ef       	ldi	r23, 0xFF	; 255
    f344:	cb 01       	movw	r24, r22
    f346:	08 95       	ret
    f348:	fc 01       	movw	r30, r24
    f34a:	60 89       	ldd	r22, Z+16	; 0x10
    f34c:	71 89       	ldd	r23, Z+17	; 0x11
    f34e:	82 89       	ldd	r24, Z+18	; 0x12
    f350:	93 89       	ldd	r25, Z+19	; 0x13
    f352:	08 95       	ret

0000f354 <lseek>:
    f354:	a3 e0       	ldi	r26, 0x03	; 3
    f356:	b0 e0       	ldi	r27, 0x00	; 0
    f358:	e0 eb       	ldi	r30, 0xB0	; 176
    f35a:	f9 e7       	ldi	r31, 0x79	; 121
    f35c:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
    f360:	5c 01       	movw	r10, r24
    f362:	6a 01       	movw	r12, r20
    f364:	7b 01       	movw	r14, r22
    f366:	89 01       	movw	r16, r18
    f368:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f36c:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
    f370:	c1 df       	rcall	.-126    	; 0xf2f4 <fileno_to_fatfs>
    f372:	ec 01       	movw	r28, r24
    f374:	89 2b       	or	r24, r25
    f376:	19 f4       	brne	.+6      	; 0xf37e <lseek+0x2a>
    f378:	88 e1       	ldi	r24, 0x18	; 24
    f37a:	90 e0       	ldi	r25, 0x00	; 0
    f37c:	26 c0       	rjmp	.+76     	; 0xf3ca <lseek+0x76>
    f37e:	83 e0       	ldi	r24, 0x03	; 3
    f380:	a8 16       	cp	r10, r24
    f382:	b1 04       	cpc	r11, r1
    f384:	d0 f1       	brcs	.+116    	; 0xf3fa <lseek+0xa6>
    f386:	c5 01       	movw	r24, r10
    f388:	22 dc       	rcall	.-1980   	; 0xebce <fileno_to_stream>
    f38a:	fc 01       	movw	r30, r24
    f38c:	93 81       	ldd	r25, Z+3	; 0x03
    f38e:	90 64       	ori	r25, 0x40	; 64
    f390:	93 83       	std	Z+3, r25	; 0x03
    f392:	02 30       	cpi	r16, 0x02	; 2
    f394:	11 05       	cpc	r17, r1
    f396:	a9 f5       	brne	.+106    	; 0xf402 <lseek+0xae>
    f398:	8a 85       	ldd	r24, Y+10	; 0x0a
    f39a:	9b 85       	ldd	r25, Y+11	; 0x0b
    f39c:	ac 85       	ldd	r26, Y+12	; 0x0c
    f39e:	bd 85       	ldd	r27, Y+13	; 0x0d
    f3a0:	c8 0e       	add	r12, r24
    f3a2:	d9 1e       	adc	r13, r25
    f3a4:	ea 1e       	adc	r14, r26
    f3a6:	fb 1e       	adc	r15, r27
    f3a8:	b7 01       	movw	r22, r14
    f3aa:	a6 01       	movw	r20, r12
    f3ac:	ce 01       	movw	r24, r28
    f3ae:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <f_lseek>
    f3b2:	00 97       	sbiw	r24, 0x00	; 0
    f3b4:	79 f0       	breq	.+30     	; 0xf3d4 <lseek+0x80>
    f3b6:	84 31       	cpi	r24, 0x14	; 20
    f3b8:	91 05       	cpc	r25, r1
    f3ba:	58 f5       	brcc	.+86     	; 0xf412 <lseek+0xbe>
    f3bc:	fc 01       	movw	r30, r24
    f3be:	ea 55       	subi	r30, 0x5A	; 90
    f3c0:	f4 4f       	sbci	r31, 0xF4	; 244
    f3c2:	80 81       	ld	r24, Z
    f3c4:	08 2e       	mov	r0, r24
    f3c6:	00 0c       	add	r0, r0
    f3c8:	99 0b       	sbc	r25, r25
    f3ca:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f3ce:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f3d2:	13 c0       	rjmp	.+38     	; 0xf3fa <lseek+0xa6>
    f3d4:	68 89       	ldd	r22, Y+16	; 0x10
    f3d6:	79 89       	ldd	r23, Y+17	; 0x11
    f3d8:	8a 89       	ldd	r24, Y+18	; 0x12
    f3da:	9b 89       	ldd	r25, Y+19	; 0x13
    f3dc:	c6 16       	cp	r12, r22
    f3de:	d7 06       	cpc	r13, r23
    f3e0:	e8 06       	cpc	r14, r24
    f3e2:	f9 06       	cpc	r15, r25
    f3e4:	c9 f0       	breq	.+50     	; 0xf418 <lseek+0xc4>
    f3e6:	8b e8       	ldi	r24, 0x8B	; 139
    f3e8:	9b e0       	ldi	r25, 0x0B	; 11
    f3ea:	a0 e0       	ldi	r26, 0x00	; 0
    f3ec:	ed b7       	in	r30, 0x3d	; 61
    f3ee:	fe b7       	in	r31, 0x3e	; 62
    f3f0:	81 83       	std	Z+1, r24	; 0x01
    f3f2:	92 83       	std	Z+2, r25	; 0x02
    f3f4:	a3 83       	std	Z+3, r26	; 0x03
    f3f6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    f3fa:	6f ef       	ldi	r22, 0xFF	; 255
    f3fc:	7f ef       	ldi	r23, 0xFF	; 255
    f3fe:	cb 01       	movw	r24, r22
    f400:	0b c0       	rjmp	.+22     	; 0xf418 <lseek+0xc4>
    f402:	01 30       	cpi	r16, 0x01	; 1
    f404:	11 05       	cpc	r17, r1
    f406:	81 f6       	brne	.-96     	; 0xf3a8 <lseek+0x54>
    f408:	88 89       	ldd	r24, Y+16	; 0x10
    f40a:	99 89       	ldd	r25, Y+17	; 0x11
    f40c:	aa 89       	ldd	r26, Y+18	; 0x12
    f40e:	bb 89       	ldd	r27, Y+19	; 0x13
    f410:	c7 cf       	rjmp	.-114    	; 0xf3a0 <lseek+0x4c>
    f412:	83 e2       	ldi	r24, 0x23	; 35
    f414:	90 e0       	ldi	r25, 0x00	; 0
    f416:	d9 cf       	rjmp	.-78     	; 0xf3ca <lseek+0x76>
    f418:	cd b7       	in	r28, 0x3d	; 61
    f41a:	de b7       	in	r29, 0x3e	; 62
    f41c:	23 96       	adiw	r28, 0x03	; 3
    f41e:	ea e0       	ldi	r30, 0x0A	; 10
    f420:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0000f424 <fseek>:
    f424:	cf 92       	push	r12
    f426:	df 92       	push	r13
    f428:	ef 92       	push	r14
    f42a:	ff 92       	push	r15
    f42c:	cf 93       	push	r28
    f42e:	df 93       	push	r29
    f430:	6a 01       	movw	r12, r20
    f432:	7b 01       	movw	r14, r22
    f434:	e9 01       	movw	r28, r18
    f436:	af db       	rcall	.-2210   	; 0xeb96 <fileno>
    f438:	97 fd       	sbrc	r25, 7
    f43a:	12 c0       	rjmp	.+36     	; 0xf460 <fseek+0x3c>
    f43c:	9e 01       	movw	r18, r28
    f43e:	b7 01       	movw	r22, r14
    f440:	a6 01       	movw	r20, r12
    f442:	88 df       	rcall	.-240    	; 0xf354 <lseek>
    f444:	21 e0       	ldi	r18, 0x01	; 1
    f446:	30 e0       	ldi	r19, 0x00	; 0
    f448:	6f 3f       	cpi	r22, 0xFF	; 255
    f44a:	7f 4f       	sbci	r23, 0xFF	; 255
    f44c:	8f 4f       	sbci	r24, 0xFF	; 255
    f44e:	9f 4f       	sbci	r25, 0xFF	; 255
    f450:	11 f0       	breq	.+4      	; 0xf456 <fseek+0x32>
    f452:	20 e0       	ldi	r18, 0x00	; 0
    f454:	30 e0       	ldi	r19, 0x00	; 0
    f456:	88 27       	eor	r24, r24
    f458:	99 27       	eor	r25, r25
    f45a:	82 1b       	sub	r24, r18
    f45c:	93 0b       	sbc	r25, r19
    f45e:	02 c0       	rjmp	.+4      	; 0xf464 <fseek+0x40>
    f460:	8f ef       	ldi	r24, 0xFF	; 255
    f462:	9f ef       	ldi	r25, 0xFF	; 255
    f464:	df 91       	pop	r29
    f466:	cf 91       	pop	r28
    f468:	ff 90       	pop	r15
    f46a:	ef 90       	pop	r14
    f46c:	df 90       	pop	r13
    f46e:	cf 90       	pop	r12
    f470:	08 95       	ret

0000f472 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f472:	a2 e0       	ldi	r26, 0x02	; 2
    f474:	b0 e0       	ldi	r27, 0x00	; 0
    f476:	ef e3       	ldi	r30, 0x3F	; 63
    f478:	fa e7       	ldi	r31, 0x7A	; 122
    f47a:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
    f47e:	5c 01       	movw	r10, r24
    f480:	8b 01       	movw	r16, r22
    f482:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f484:	fb 01       	movw	r30, r22
    f486:	10 82       	st	Z, r1

    errno = 0;
    f488:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f48c:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f490:	9e db       	rcall	.-2244   	; 0xebce <fileno_to_stream>
    f492:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f494:	80 91 c6 1d 	lds	r24, 0x1DC6	; 0x801dc6 <__iob>
    f498:	90 91 c7 1d 	lds	r25, 0x1DC7	; 0x801dc7 <__iob+0x1>
    f49c:	e8 16       	cp	r14, r24
    f49e:	f9 06       	cpc	r15, r25
    f4a0:	c9 f4       	brne	.+50     	; 0xf4d4 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f4a2:	f7 01       	movw	r30, r14
    f4a4:	83 81       	ldd	r24, Z+3	; 0x03
    f4a6:	80 64       	ori	r24, 0x40	; 64
    f4a8:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f4aa:	1a 82       	std	Y+2, r1	; 0x02
    f4ac:	19 82       	std	Y+1, r1	; 0x01
    f4ae:	c0 0e       	add	r12, r16
    f4b0:	d1 1e       	adc	r13, r17
        while(count--)
    f4b2:	0c 15       	cp	r16, r12
    f4b4:	1d 05       	cpc	r17, r13
    f4b6:	09 f4       	brne	.+2      	; 0xf4ba <read+0x48>
    f4b8:	3d c0       	rjmp	.+122    	; 0xf534 <read+0xc2>
        {
            ret = fgetc(stream);
    f4ba:	c7 01       	movw	r24, r14
    f4bc:	48 da       	rcall	.-2928   	; 0xe94e <fgetc>
            if(ret < 0)
    f4be:	97 fd       	sbrc	r25, 7
    f4c0:	39 c0       	rjmp	.+114    	; 0xf534 <read+0xc2>
                break;

            *ptr++ = ret;
    f4c2:	f8 01       	movw	r30, r16
    f4c4:	81 93       	st	Z+, r24
    f4c6:	8f 01       	movw	r16, r30
            ++size;
    f4c8:	89 81       	ldd	r24, Y+1	; 0x01
    f4ca:	9a 81       	ldd	r25, Y+2	; 0x02
    f4cc:	01 96       	adiw	r24, 0x01	; 1
    f4ce:	9a 83       	std	Y+2, r25	; 0x02
    f4d0:	89 83       	std	Y+1, r24	; 0x01
    f4d2:	ef cf       	rjmp	.-34     	; 0xf4b2 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f4d4:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
    f4d8:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
    f4dc:	e8 16       	cp	r14, r24
    f4de:	f9 06       	cpc	r15, r25
    f4e0:	71 f1       	breq	.+92     	; 0xf53e <read+0xcc>
    f4e2:	80 91 ca 1d 	lds	r24, 0x1DCA	; 0x801dca <__iob+0x4>
    f4e6:	90 91 cb 1d 	lds	r25, 0x1DCB	; 0x801dcb <__iob+0x5>
    f4ea:	e8 16       	cp	r14, r24
    f4ec:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4ee:	39 f1       	breq	.+78     	; 0xf53e <read+0xcc>
    f4f0:	c5 01       	movw	r24, r10
    f4f2:	00 df       	rcall	.-512    	; 0xf2f4 <fileno_to_fatfs>
    if ( fh == NULL )
    f4f4:	00 97       	sbiw	r24, 0x00	; 0
    f4f6:	19 f4       	brne	.+6      	; 0xf4fe <read+0x8c>
    {
        errno = EBADF;
    f4f8:	89 e0       	ldi	r24, 0x09	; 9
    f4fa:	90 e0       	ldi	r25, 0x00	; 0
    f4fc:	16 c0       	rjmp	.+44     	; 0xf52a <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f4fe:	9e 01       	movw	r18, r28
    f500:	2f 5f       	subi	r18, 0xFF	; 255
    f502:	3f 4f       	sbci	r19, 0xFF	; 255
    f504:	a6 01       	movw	r20, r12
    f506:	b8 01       	movw	r22, r16
    f508:	0e 94 88 5a 	call	0xb510	; 0xb510 <f_read>
    if(res != FR_OK)
    f50c:	00 97       	sbiw	r24, 0x00	; 0
    f50e:	91 f0       	breq	.+36     	; 0xf534 <read+0xc2>
    f510:	84 31       	cpi	r24, 0x14	; 20
    f512:	91 05       	cpc	r25, r1
    f514:	40 f4       	brcc	.+16     	; 0xf526 <read+0xb4>
    f516:	fc 01       	movw	r30, r24
    f518:	ea 55       	subi	r30, 0x5A	; 90
    f51a:	f4 4f       	sbci	r31, 0xF4	; 244
    f51c:	80 81       	ld	r24, Z
    f51e:	08 2e       	mov	r0, r24
    f520:	00 0c       	add	r0, r0
    f522:	99 0b       	sbc	r25, r25
    f524:	02 c0       	rjmp	.+4      	; 0xf52a <read+0xb8>
    f526:	83 e2       	ldi	r24, 0x23	; 35
    f528:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f52a:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f52e:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f532:	05 c0       	rjmp	.+10     	; 0xf53e <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f534:	69 81       	ldd	r22, Y+1	; 0x01
    f536:	7a 81       	ldd	r23, Y+2	; 0x02
    f538:	80 e0       	ldi	r24, 0x00	; 0
    f53a:	90 e0       	ldi	r25, 0x00	; 0
    f53c:	03 c0       	rjmp	.+6      	; 0xf544 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f53e:	6f ef       	ldi	r22, 0xFF	; 255
    f540:	7f ef       	ldi	r23, 0xFF	; 255
    f542:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f544:	22 96       	adiw	r28, 0x02	; 2
    f546:	ea e0       	ldi	r30, 0x0A	; 10
    f548:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0000f54c <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f54c:	0f 93       	push	r16
    f54e:	1f 93       	push	r17
    f550:	cf 93       	push	r28
    f552:	df 93       	push	r29
    f554:	ec 01       	movw	r28, r24
    f556:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f558:	64 9f       	mul	r22, r20
    f55a:	80 01       	movw	r16, r0
    f55c:	65 9f       	mul	r22, r21
    f55e:	10 0d       	add	r17, r0
    f560:	74 9f       	mul	r23, r20
    f562:	10 0d       	add	r17, r0
    f564:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f566:	17 db       	rcall	.-2514   	; 0xeb96 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f568:	a8 01       	movw	r20, r16
    f56a:	be 01       	movw	r22, r28
    f56c:	82 df       	rcall	.-252    	; 0xf472 <read>
    if(ret < 0)
    f56e:	97 fd       	sbrc	r25, 7
    f570:	02 c0       	rjmp	.+4      	; 0xf576 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f572:	cb 01       	movw	r24, r22
    f574:	02 c0       	rjmp	.+4      	; 0xf57a <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f576:	80 e0       	ldi	r24, 0x00	; 0
    f578:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f57a:	df 91       	pop	r29
    f57c:	cf 91       	pop	r28
    f57e:	1f 91       	pop	r17
    f580:	0f 91       	pop	r16
    f582:	08 95       	ret

0000f584 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f584:	cf 93       	push	r28
    f586:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f588:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f58c:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f590:	83 30       	cpi	r24, 0x03	; 3
    f592:	91 05       	cpc	r25, r1
    f594:	18 f4       	brcc	.+6      	; 0xf59c <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f596:	89 e0       	ldi	r24, 0x09	; 9
    f598:	90 e0       	ldi	r25, 0x00	; 0
    f59a:	18 c0       	rjmp	.+48     	; 0xf5cc <syncfs+0x48>
    f59c:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f59e:	17 db       	rcall	.-2514   	; 0xebce <fileno_to_stream>
    f5a0:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f5a2:	93 81       	ldd	r25, Z+3	; 0x03
    f5a4:	90 64       	ori	r25, 0x40	; 64
    f5a6:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f5a8:	ce 01       	movw	r24, r28
    f5aa:	a4 de       	rcall	.-696    	; 0xf2f4 <fileno_to_fatfs>
    if(fh == NULL)
    f5ac:	00 97       	sbiw	r24, 0x00	; 0
    f5ae:	99 f3       	breq	.-26     	; 0xf596 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f5b0:	0e 94 6a 5d 	call	0xbad4	; 0xbad4 <f_sync>
    if (res != FR_OK)
    f5b4:	00 97       	sbiw	r24, 0x00	; 0
    f5b6:	a1 f0       	breq	.+40     	; 0xf5e0 <syncfs+0x5c>
    f5b8:	84 31       	cpi	r24, 0x14	; 20
    f5ba:	91 05       	cpc	r25, r1
    f5bc:	70 f4       	brcc	.+28     	; 0xf5da <syncfs+0x56>
    f5be:	fc 01       	movw	r30, r24
    f5c0:	ea 55       	subi	r30, 0x5A	; 90
    f5c2:	f4 4f       	sbci	r31, 0xF4	; 244
    f5c4:	80 81       	ld	r24, Z
    f5c6:	08 2e       	mov	r0, r24
    f5c8:	00 0c       	add	r0, r0
    f5ca:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f5cc:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f5d0:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
        return(-1);
    f5d4:	8f ef       	ldi	r24, 0xFF	; 255
    f5d6:	9f ef       	ldi	r25, 0xFF	; 255
    f5d8:	05 c0       	rjmp	.+10     	; 0xf5e4 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f5da:	83 e2       	ldi	r24, 0x23	; 35
    f5dc:	90 e0       	ldi	r25, 0x00	; 0
    f5de:	f6 cf       	rjmp	.-20     	; 0xf5cc <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f5e0:	80 e0       	ldi	r24, 0x00	; 0
    f5e2:	90 e0       	ldi	r25, 0x00	; 0
}
    f5e4:	df 91       	pop	r29
    f5e6:	cf 91       	pop	r28
    f5e8:	08 95       	ret

0000f5ea <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f5ea:	cf 93       	push	r28
    f5ec:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f5ee:	c0 e0       	ldi	r28, 0x00	; 0
    f5f0:	d0 e0       	ldi	r29, 0x00	; 0
    f5f2:	21 96       	adiw	r28, 0x01	; 1
    f5f4:	c0 31       	cpi	r28, 0x10	; 16
    f5f6:	d1 05       	cpc	r29, r1
    f5f8:	51 f0       	breq	.+20     	; 0xf60e <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5fa:	c3 30       	cpi	r28, 0x03	; 3
    f5fc:	d1 05       	cpc	r29, r1
    f5fe:	cc f3       	brlt	.-14     	; 0xf5f2 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f600:	ce 01       	movw	r24, r28
    f602:	78 de       	rcall	.-784    	; 0xf2f4 <fileno_to_fatfs>
        if(fh == NULL)
    f604:	89 2b       	or	r24, r25
    f606:	a9 f3       	breq	.-22     	; 0xf5f2 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f608:	ce 01       	movw	r24, r28
    f60a:	bc df       	rcall	.-136    	; 0xf584 <syncfs>
    f60c:	f2 cf       	rjmp	.-28     	; 0xf5f2 <sync+0x8>
    }
}
    f60e:	df 91       	pop	r29
    f610:	cf 91       	pop	r28
    f612:	08 95       	ret

0000f614 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f614:	a2 e0       	ldi	r26, 0x02	; 2
    f616:	b0 e0       	ldi	r27, 0x00	; 0
    f618:	e0 e1       	ldi	r30, 0x10	; 16
    f61a:	fb e7       	ldi	r31, 0x7B	; 123
    f61c:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
    f620:	8c 01       	movw	r16, r24
    f622:	b6 2e       	mov	r11, r22
    f624:	f7 2e       	mov	r15, r23
    f626:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f628:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f62c:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f630:	ce da       	rcall	.-2660   	; 0xebce <fileno_to_stream>
    f632:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f634:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
    f638:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
    f63c:	c8 16       	cp	r12, r24
    f63e:	d9 06       	cpc	r13, r25
    f640:	39 f0       	breq	.+14     	; 0xf650 <write+0x3c>
    f642:	80 91 ca 1d 	lds	r24, 0x1DCA	; 0x801dca <__iob+0x4>
    f646:	90 91 cb 1d 	lds	r25, 0x1DCB	; 0x801dcb <__iob+0x5>
    f64a:	c8 16       	cp	r12, r24
    f64c:	d9 06       	cpc	r13, r25
    f64e:	d1 f4       	brne	.+52     	; 0xf684 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f650:	1a 82       	std	Y+2, r1	; 0x02
    f652:	19 82       	std	Y+1, r1	; 0x01
    f654:	0b 2d       	mov	r16, r11
    f656:	1f 2d       	mov	r17, r15
    f658:	78 01       	movw	r14, r16
    f65a:	e8 0c       	add	r14, r8
    f65c:	f9 1c       	adc	r15, r9
        while(count--)
    f65e:	0e 15       	cp	r16, r14
    f660:	1f 05       	cpc	r17, r15
    f662:	d1 f1       	breq	.+116    	; 0xf6d8 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f664:	f8 01       	movw	r30, r16
    f666:	a1 90       	ld	r10, Z+
    f668:	8f 01       	movw	r16, r30
    f66a:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f66c:	b6 01       	movw	r22, r12
    f66e:	c5 01       	movw	r24, r10
    f670:	c4 d9       	rcall	.-3192   	; 0xe9fa <fputc>
            if(c != ret)
    f672:	a8 16       	cp	r10, r24
    f674:	b9 06       	cpc	r11, r25
    f676:	81 f5       	brne	.+96     	; 0xf6d8 <write+0xc4>
                break;

            ++size;
    f678:	89 81       	ldd	r24, Y+1	; 0x01
    f67a:	9a 81       	ldd	r25, Y+2	; 0x02
    f67c:	01 96       	adiw	r24, 0x01	; 1
    f67e:	9a 83       	std	Y+2, r25	; 0x02
    f680:	89 83       	std	Y+1, r24	; 0x01
    f682:	ed cf       	rjmp	.-38     	; 0xf65e <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f684:	80 91 c6 1d 	lds	r24, 0x1DC6	; 0x801dc6 <__iob>
    f688:	90 91 c7 1d 	lds	r25, 0x1DC7	; 0x801dc7 <__iob+0x1>
    f68c:	c8 16       	cp	r12, r24
    f68e:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f690:	41 f1       	breq	.+80     	; 0xf6e2 <write+0xce>
    f692:	c8 01       	movw	r24, r16
    f694:	2f de       	rcall	.-930    	; 0xf2f4 <fileno_to_fatfs>
    if ( fh == NULL )
    f696:	00 97       	sbiw	r24, 0x00	; 0
    f698:	19 f4       	brne	.+6      	; 0xf6a0 <write+0x8c>
    {
        errno = EBADF;
    f69a:	89 e0       	ldi	r24, 0x09	; 9
    f69c:	90 e0       	ldi	r25, 0x00	; 0
    f69e:	17 c0       	rjmp	.+46     	; 0xf6ce <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f6a0:	9e 01       	movw	r18, r28
    f6a2:	2f 5f       	subi	r18, 0xFF	; 255
    f6a4:	3f 4f       	sbci	r19, 0xFF	; 255
    f6a6:	a4 01       	movw	r20, r8
    f6a8:	6b 2d       	mov	r22, r11
    f6aa:	7f 2d       	mov	r23, r15
    f6ac:	0e 94 d3 5b 	call	0xb7a6	; 0xb7a6 <f_write>
    if(res != FR_OK)
    f6b0:	00 97       	sbiw	r24, 0x00	; 0
    f6b2:	91 f0       	breq	.+36     	; 0xf6d8 <write+0xc4>
    f6b4:	84 31       	cpi	r24, 0x14	; 20
    f6b6:	91 05       	cpc	r25, r1
    f6b8:	40 f4       	brcc	.+16     	; 0xf6ca <write+0xb6>
    f6ba:	fc 01       	movw	r30, r24
    f6bc:	ea 55       	subi	r30, 0x5A	; 90
    f6be:	f4 4f       	sbci	r31, 0xF4	; 244
    f6c0:	80 81       	ld	r24, Z
    f6c2:	08 2e       	mov	r0, r24
    f6c4:	00 0c       	add	r0, r0
    f6c6:	99 0b       	sbc	r25, r25
    f6c8:	02 c0       	rjmp	.+4      	; 0xf6ce <write+0xba>
    f6ca:	83 e2       	ldi	r24, 0x23	; 35
    f6cc:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f6ce:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f6d2:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f6d6:	05 c0       	rjmp	.+10     	; 0xf6e2 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f6d8:	69 81       	ldd	r22, Y+1	; 0x01
    f6da:	7a 81       	ldd	r23, Y+2	; 0x02
    f6dc:	80 e0       	ldi	r24, 0x00	; 0
    f6de:	90 e0       	ldi	r25, 0x00	; 0
    f6e0:	03 c0       	rjmp	.+6      	; 0xf6e8 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f6e2:	6f ef       	ldi	r22, 0xFF	; 255
    f6e4:	7f ef       	ldi	r23, 0xFF	; 255
    f6e6:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f6e8:	22 96       	adiw	r28, 0x02	; 2
    f6ea:	ec e0       	ldi	r30, 0x0C	; 12
    f6ec:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

0000f6f0 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f6f0:	0f 93       	push	r16
    f6f2:	1f 93       	push	r17
    f6f4:	cf 93       	push	r28
    f6f6:	df 93       	push	r29
    f6f8:	ec 01       	movw	r28, r24
    f6fa:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f6fc:	64 9f       	mul	r22, r20
    f6fe:	80 01       	movw	r16, r0
    f700:	65 9f       	mul	r22, r21
    f702:	10 0d       	add	r17, r0
    f704:	74 9f       	mul	r23, r20
    f706:	10 0d       	add	r17, r0
    f708:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f70a:	45 da       	rcall	.-2934   	; 0xeb96 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f70c:	a8 01       	movw	r20, r16
    f70e:	be 01       	movw	r22, r28
    f710:	81 df       	rcall	.-254    	; 0xf614 <write>

    if(ret < 0)
    f712:	97 fd       	sbrc	r25, 7
    f714:	02 c0       	rjmp	.+4      	; 0xf71a <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f716:	cb 01       	movw	r24, r22
    f718:	02 c0       	rjmp	.+4      	; 0xf71e <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f71a:	80 e0       	ldi	r24, 0x00	; 0
    f71c:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f71e:	df 91       	pop	r29
    f720:	cf 91       	pop	r28
    f722:	1f 91       	pop	r17
    f724:	0f 91       	pop	r16
    f726:	08 95       	ret

0000f728 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f728:	0f 93       	push	r16
    f72a:	1f 93       	push	r17
    f72c:	cf 93       	push	r28
    f72e:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f730:	83 30       	cpi	r24, 0x03	; 3
    f732:	91 05       	cpc	r25, r1
    f734:	48 f4       	brcc	.+18     	; 0xf748 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f736:	89 e0       	ldi	r24, 0x09	; 9
    f738:	90 e0       	ldi	r25, 0x00	; 0
    f73a:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f73e:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
        return(-1);
    f742:	8f ef       	ldi	r24, 0xFF	; 255
    f744:	9f ef       	ldi	r25, 0xFF	; 255
    f746:	20 c0       	rjmp	.+64     	; 0xf788 <free_file_descriptor+0x60>
    f748:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f74a:	41 da       	rcall	.-2942   	; 0xebce <fileno_to_stream>
    f74c:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f74e:	89 2b       	or	r24, r25
    f750:	c1 f3       	breq	.-16     	; 0xf742 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f752:	f8 01       	movw	r30, r16
    f754:	84 85       	ldd	r24, Z+12	; 0x0c
    f756:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f758:	00 97       	sbiw	r24, 0x00	; 0
    f75a:	11 f0       	breq	.+4      	; 0xf760 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f75c:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f760:	f8 01       	movw	r30, r16
    f762:	80 81       	ld	r24, Z
    f764:	91 81       	ldd	r25, Z+1	; 0x01
    f766:	00 97       	sbiw	r24, 0x00	; 0
    f768:	21 f0       	breq	.+8      	; 0xf772 <free_file_descriptor+0x4a>
    f76a:	23 81       	ldd	r18, Z+3	; 0x03
    f76c:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f76e:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
    }

    __iob[fileno]  = NULL;
    f772:	fe 01       	movw	r30, r28
    f774:	ee 0f       	add	r30, r30
    f776:	ff 1f       	adc	r31, r31
    f778:	ea 53       	subi	r30, 0x3A	; 58
    f77a:	f2 4e       	sbci	r31, 0xE2	; 226
    f77c:	11 82       	std	Z+1, r1	; 0x01
    f77e:	10 82       	st	Z, r1
    safefree(stream);
    f780:	c8 01       	movw	r24, r16
    f782:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
    return(fileno);
    f786:	ce 01       	movw	r24, r28
}
    f788:	df 91       	pop	r29
    f78a:	cf 91       	pop	r28
    f78c:	1f 91       	pop	r17
    f78e:	0f 91       	pop	r16
    f790:	08 95       	ret

0000f792 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f792:	0f 93       	push	r16
    f794:	1f 93       	push	r17
    f796:	cf 93       	push	r28
    f798:	df 93       	push	r29
    f79a:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f79c:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f7a0:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f7a4:	14 da       	rcall	.-3032   	; 0xebce <fileno_to_stream>
    if(stream == NULL)
    f7a6:	89 2b       	or	r24, r25
    f7a8:	d9 f0       	breq	.+54     	; 0xf7e0 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f7aa:	c8 01       	movw	r24, r16
    f7ac:	a3 dd       	rcall	.-1210   	; 0xf2f4 <fileno_to_fatfs>
    if(fh == NULL)
    f7ae:	00 97       	sbiw	r24, 0x00	; 0
    f7b0:	b9 f0       	breq	.+46     	; 0xf7e0 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f7b2:	0e 94 ea 5d 	call	0xbbd4	; 0xbbd4 <f_close>
    free_file_descriptor(fileno);
    f7b6:	ec 01       	movw	r28, r24
    f7b8:	c8 01       	movw	r24, r16
    f7ba:	b6 df       	rcall	.-148    	; 0xf728 <free_file_descriptor>
    if (res != FR_OK)
    f7bc:	20 97       	sbiw	r28, 0x00	; 0
    f7be:	99 f0       	breq	.+38     	; 0xf7e6 <close+0x54>
    f7c0:	c4 31       	cpi	r28, 0x14	; 20
    f7c2:	d1 05       	cpc	r29, r1
    f7c4:	38 f4       	brcc	.+14     	; 0xf7d4 <close+0x42>
    f7c6:	ca 55       	subi	r28, 0x5A	; 90
    f7c8:	d4 4f       	sbci	r29, 0xF4	; 244
    f7ca:	88 81       	ld	r24, Y
    f7cc:	08 2e       	mov	r0, r24
    f7ce:	00 0c       	add	r0, r0
    f7d0:	99 0b       	sbc	r25, r25
    f7d2:	02 c0       	rjmp	.+4      	; 0xf7d8 <close+0x46>
    f7d4:	83 e2       	ldi	r24, 0x23	; 35
    f7d6:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f7d8:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f7dc:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
        return(-1);
    f7e0:	8f ef       	ldi	r24, 0xFF	; 255
    f7e2:	9f ef       	ldi	r25, 0xFF	; 255
    f7e4:	02 c0       	rjmp	.+4      	; 0xf7ea <close+0x58>
    }
    return(0);
    f7e6:	80 e0       	ldi	r24, 0x00	; 0
    f7e8:	90 e0       	ldi	r25, 0x00	; 0
}
    f7ea:	df 91       	pop	r29
    f7ec:	cf 91       	pop	r28
    f7ee:	1f 91       	pop	r17
    f7f0:	0f 91       	pop	r16
    f7f2:	08 95       	ret

0000f7f4 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f7f4:	d0 d9       	rcall	.-3168   	; 0xeb96 <fileno>
    if(fn < 0)
    f7f6:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f7f8:	02 c0       	rjmp	.+4      	; 0xf7fe <fclose+0xa>
    f7fa:	cb cf       	rjmp	.-106    	; 0xf792 <close>
    f7fc:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f7fe:	8f ef       	ldi	r24, 0xFF	; 255
    f800:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f802:	08 95       	ret

0000f804 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f804:	0f 93       	push	r16
    f806:	1f 93       	push	r17
    f808:	cf 93       	push	r28
    f80a:	df 93       	push	r29
    f80c:	e6 ec       	ldi	r30, 0xC6	; 198
    f80e:	fd e1       	ldi	r31, 0x1D	; 29
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f810:	c0 e0       	ldi	r28, 0x00	; 0
    f812:	d0 e0       	ldi	r29, 0x00	; 0
    f814:	21 96       	adiw	r28, 0x01	; 1
    f816:	c0 31       	cpi	r28, 0x10	; 16
    f818:	d1 05       	cpc	r29, r1
    f81a:	49 f0       	breq	.+18     	; 0xf82e <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f81c:	c3 30       	cpi	r28, 0x03	; 3
    f81e:	d1 05       	cpc	r29, r1
    f820:	24 f0       	brlt	.+8      	; 0xf82a <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f822:	82 81       	ldd	r24, Z+2	; 0x02
    f824:	93 81       	ldd	r25, Z+3	; 0x03
    f826:	89 2b       	or	r24, r25
    f828:	59 f0       	breq	.+22     	; 0xf840 <new_file_descriptor+0x3c>
    f82a:	32 96       	adiw	r30, 0x02	; 2
    f82c:	f3 cf       	rjmp	.-26     	; 0xf814 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f82e:	87 e1       	ldi	r24, 0x17	; 23
    f830:	90 e0       	ldi	r25, 0x00	; 0
    f832:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f836:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    return(-1);
    f83a:	8f ef       	ldi	r24, 0xFF	; 255
    f83c:	9f ef       	ldi	r25, 0xFF	; 255
    f83e:	22 c0       	rjmp	.+68     	; 0xf884 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f840:	61 e0       	ldi	r22, 0x01	; 1
    f842:	70 e0       	ldi	r23, 0x00	; 0
    f844:	8e e0       	ldi	r24, 0x0E	; 14
    f846:	90 e0       	ldi	r25, 0x00	; 0
    f848:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
    f84c:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f84e:	89 2b       	or	r24, r25
    f850:	59 f0       	breq	.+22     	; 0xf868 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f852:	61 e0       	ldi	r22, 0x01	; 1
    f854:	70 e0       	ldi	r23, 0x00	; 0
    f856:	84 e2       	ldi	r24, 0x24	; 36
    f858:	92 e0       	ldi	r25, 0x02	; 2
    f85a:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
            if(fh == NULL)
    f85e:	00 97       	sbiw	r24, 0x00	; 0
    f860:	31 f4       	brne	.+12     	; 0xf86e <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f862:	c8 01       	movw	r24, r16
    f864:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
                errno = ENOMEM;
    f868:	8c e0       	ldi	r24, 0x0C	; 12
    f86a:	90 e0       	ldi	r25, 0x00	; 0
    f86c:	e2 cf       	rjmp	.-60     	; 0xf832 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f86e:	fe 01       	movw	r30, r28
    f870:	ee 0f       	add	r30, r30
    f872:	ff 1f       	adc	r31, r31
    f874:	ea 53       	subi	r30, 0x3A	; 58
    f876:	f2 4e       	sbci	r31, 0xE2	; 226
    f878:	11 83       	std	Z+1, r17	; 0x01
    f87a:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f87c:	f8 01       	movw	r30, r16
    f87e:	95 87       	std	Z+13, r25	; 0x0d
    f880:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f882:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f884:	df 91       	pop	r29
    f886:	cf 91       	pop	r28
    f888:	1f 91       	pop	r17
    f88a:	0f 91       	pop	r16
    f88c:	08 95       	ret

0000f88e <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f88e:	a0 e0       	ldi	r26, 0x00	; 0
    f890:	b0 e0       	ldi	r27, 0x00	; 0
    f892:	ed e4       	ldi	r30, 0x4D	; 77
    f894:	fc e7       	ldi	r31, 0x7C	; 124
    f896:	0c 94 9f e3 	jmp	0x1c73e	; 0x1c73e <__prologue_saves__+0x8>
    f89a:	5c 01       	movw	r10, r24
    f89c:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f89e:	10 92 c5 1d 	sts	0x1DC5, r1	; 0x801dc5 <errno+0x1>
    f8a2:	10 92 c4 1d 	sts	0x1DC4, r1	; 0x801dc4 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f8a6:	7b 01       	movw	r14, r22
    f8a8:	83 e0       	ldi	r24, 0x03	; 3
    f8aa:	e8 22       	and	r14, r24
    f8ac:	ff 24       	eor	r15, r15
    f8ae:	e2 e0       	ldi	r30, 0x02	; 2
    f8b0:	ee 16       	cp	r14, r30
    f8b2:	f1 04       	cpc	r15, r1
    f8b4:	31 f0       	breq	.+12     	; 0xf8c2 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f8b6:	e1 14       	cp	r14, r1
    f8b8:	f1 04       	cpc	r15, r1
    f8ba:	31 f0       	breq	.+12     	; 0xf8c8 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f8bc:	02 e0       	ldi	r16, 0x02	; 2
    f8be:	10 e0       	ldi	r17, 0x00	; 0
    f8c0:	05 c0       	rjmp	.+10     	; 0xf8cc <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f8c2:	03 e0       	ldi	r16, 0x03	; 3
    f8c4:	10 e0       	ldi	r17, 0x00	; 0
    f8c6:	02 c0       	rjmp	.+4      	; 0xf8cc <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f8c8:	01 e0       	ldi	r16, 0x01	; 1
    f8ca:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f8cc:	c6 fe       	sbrs	r12, 6
    f8ce:	05 c0       	rjmp	.+10     	; 0xf8da <open+0x4c>
    {
        if(flags & O_TRUNC)
    f8d0:	d1 fe       	sbrs	r13, 1
    f8d2:	02 c0       	rjmp	.+4      	; 0xf8d8 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f8d4:	08 60       	ori	r16, 0x08	; 8
    f8d6:	01 c0       	rjmp	.+2      	; 0xf8da <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f8d8:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f8da:	94 df       	rcall	.-216    	; 0xf804 <new_file_descriptor>
    f8dc:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8de:	77 d9       	rcall	.-3346   	; 0xebce <fileno_to_stream>
    f8e0:	ec 01       	movw	r28, r24
    f8e2:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f8e4:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f8e6:	09 f4       	brne	.+2      	; 0xf8ea <open+0x5c>
    f8e8:	48 c0       	rjmp	.+144    	; 0xf97a <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f8ea:	04 dd       	rcall	.-1528   	; 0xf2f4 <fileno_to_fatfs>
    f8ec:	4c 01       	movw	r8, r24
    f8ee:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f8f0:	59 f4       	brne	.+22     	; 0xf908 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f8f2:	c3 01       	movw	r24, r6
    f8f4:	19 df       	rcall	.-462    	; 0xf728 <free_file_descriptor>
    f8f6:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f8f8:	90 e0       	ldi	r25, 0x00	; 0
    f8fa:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    f8fe:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f902:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f904:	9f ef       	ldi	r25, 0xFF	; 255
    f906:	5d c0       	rjmp	.+186    	; 0xf9c2 <open+0x134>
    f908:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f90a:	b5 01       	movw	r22, r10
    f90c:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <f_open>
    f910:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f912:	91 f0       	breq	.+36     	; 0xf938 <open+0xaa>
    f914:	84 31       	cpi	r24, 0x14	; 20
    f916:	91 05       	cpc	r25, r1
    f918:	40 f4       	brcc	.+16     	; 0xf92a <open+0x9c>
    f91a:	fc 01       	movw	r30, r24
    f91c:	ea 55       	subi	r30, 0x5A	; 90
    f91e:	f4 4f       	sbci	r31, 0xF4	; 244
    f920:	80 81       	ld	r24, Z
    f922:	08 2e       	mov	r0, r24
    f924:	00 0c       	add	r0, r0
    f926:	99 0b       	sbc	r25, r25
    f928:	02 c0       	rjmp	.+4      	; 0xf92e <open+0xa0>
    f92a:	83 e2       	ldi	r24, 0x23	; 35
    f92c:	90 e0       	ldi	r25, 0x00	; 0
    f92e:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f932:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f936:	20 c0       	rjmp	.+64     	; 0xf978 <open+0xea>
    f938:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f93a:	21 c0       	rjmp	.+66     	; 0xf97e <open+0xf0>
    f93c:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f93e:	42 85       	ldd	r20, Z+10	; 0x0a
    f940:	53 85       	ldd	r21, Z+11	; 0x0b
    f942:	64 85       	ldd	r22, Z+12	; 0x0c
    f944:	75 85       	ldd	r23, Z+13	; 0x0d
    f946:	c4 01       	movw	r24, r8
    f948:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <f_lseek>
    f94c:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f94e:	b9 f0       	breq	.+46     	; 0xf97e <open+0xf0>
    f950:	84 31       	cpi	r24, 0x14	; 20
    f952:	91 05       	cpc	r25, r1
    f954:	40 f4       	brcc	.+16     	; 0xf966 <open+0xd8>
    f956:	fc 01       	movw	r30, r24
    f958:	ea 55       	subi	r30, 0x5A	; 90
    f95a:	f4 4f       	sbci	r31, 0xF4	; 244
    f95c:	80 81       	ld	r24, Z
    f95e:	08 2e       	mov	r0, r24
    f960:	00 0c       	add	r0, r0
    f962:	99 0b       	sbc	r25, r25
    f964:	02 c0       	rjmp	.+4      	; 0xf96a <open+0xdc>
    f966:	83 e2       	ldi	r24, 0x23	; 35
    f968:	90 e0       	ldi	r25, 0x00	; 0
    f96a:	90 93 c5 1d 	sts	0x1DC5, r25	; 0x801dc5 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f96e:	80 93 c4 1d 	sts	0x1DC4, r24	; 0x801dc4 <errno>
    f972:	c4 01       	movw	r24, r8
            f_close(fh);
    f974:	0e 94 ea 5d 	call	0xbbd4	; 0xbbd4 <f_close>
            free_file_descriptor(fileno);
    f978:	c3 01       	movw	r24, r6
    f97a:	d6 de       	rcall	.-596    	; 0xf728 <free_file_descriptor>
    f97c:	c2 cf       	rjmp	.-124    	; 0xf902 <open+0x74>
    f97e:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f980:	ef 16       	cp	r14, r31
    f982:	f1 04       	cpc	r15, r1
    f984:	51 f4       	brne	.+20     	; 0xf99a <open+0x10c>
    f986:	8c e5       	ldi	r24, 0x5C	; 92
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f988:	94 e7       	ldi	r25, 0x74	; 116
    f98a:	99 87       	std	Y+9, r25	; 0x09
    f98c:	88 87       	std	Y+8, r24	; 0x08
    f98e:	89 ed       	ldi	r24, 0xD9	; 217
        stream->get = fatfs_getc;
    f990:	93 e7       	ldi	r25, 0x73	; 115
    f992:	9b 87       	std	Y+11, r25	; 0x0b
    f994:	8a 87       	std	Y+10, r24	; 0x0a
    f996:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f998:	12 c0       	rjmp	.+36     	; 0xf9be <open+0x130>
    f99a:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f99c:	f1 04       	cpc	r15, r1
    f99e:	41 f4       	brne	.+16     	; 0xf9b0 <open+0x122>
    f9a0:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f9a2:	18 86       	std	Y+8, r1	; 0x08
    f9a4:	89 ed       	ldi	r24, 0xD9	; 217
        stream->get = fatfs_getc;
    f9a6:	93 e7       	ldi	r25, 0x73	; 115
    f9a8:	9b 87       	std	Y+11, r25	; 0x0b
    f9aa:	8a 87       	std	Y+10, r24	; 0x0a
    f9ac:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f9ae:	07 c0       	rjmp	.+14     	; 0xf9be <open+0x130>
    f9b0:	8c e5       	ldi	r24, 0x5C	; 92
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f9b2:	94 e7       	ldi	r25, 0x74	; 116
    f9b4:	99 87       	std	Y+9, r25	; 0x09
    f9b6:	88 87       	std	Y+8, r24	; 0x08
    f9b8:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f9ba:	1a 86       	std	Y+10, r1	; 0x0a
    f9bc:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f9be:	8b 83       	std	Y+3, r24	; 0x03
    f9c0:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f9c2:	cd b7       	in	r28, 0x3d	; 61
}
    f9c4:	de b7       	in	r29, 0x3e	; 62
    f9c6:	ee e0       	ldi	r30, 0x0E	; 14
    f9c8:	0c 94 bb e3 	jmp	0x1c776	; 0x1c776 <__epilogue_restores__+0x8>

0000f9cc <posix_fopen_modes_to_open>:
    f9cc:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f9ce:	df 93       	push	r29
    f9d0:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f9d2:	62 e4       	ldi	r22, 0x42	; 66
    f9d4:	73 e0       	ldi	r23, 0x03	; 3
    f9d6:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    f9da:	00 97       	sbiw	r24, 0x00	; 0
    f9dc:	09 f4       	brne	.+2      	; 0xf9e0 <posix_fopen_modes_to_open+0x14>
    f9de:	5d c0       	rjmp	.+186    	; 0xfa9a <posix_fopen_modes_to_open+0xce>
    f9e0:	6e ef       	ldi	r22, 0xFE	; 254
    f9e2:	78 e0       	ldi	r23, 0x08	; 8
    f9e4:	ce 01       	movw	r24, r28
    f9e6:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    f9ea:	00 97       	sbiw	r24, 0x00	; 0
    f9ec:	09 f4       	brne	.+2      	; 0xf9f0 <posix_fopen_modes_to_open+0x24>
    f9ee:	55 c0       	rjmp	.+170    	; 0xfa9a <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f9f0:	61 e0       	ldi	r22, 0x01	; 1
    f9f2:	79 e0       	ldi	r23, 0x09	; 9
    f9f4:	ce 01       	movw	r24, r28
    f9f6:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    f9fa:	89 2b       	or	r24, r25
    f9fc:	09 f4       	brne	.+2      	; 0xfa00 <posix_fopen_modes_to_open+0x34>
    f9fe:	42 c0       	rjmp	.+132    	; 0xfa84 <posix_fopen_modes_to_open+0xb8>
    fa00:	64 e0       	ldi	r22, 0x04	; 4
    fa02:	79 e0       	ldi	r23, 0x09	; 9
    fa04:	ce 01       	movw	r24, r28
    fa06:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa0a:	89 2b       	or	r24, r25
    fa0c:	d9 f1       	breq	.+118    	; 0xfa84 <posix_fopen_modes_to_open+0xb8>
    fa0e:	68 e0       	ldi	r22, 0x08	; 8
    fa10:	79 e0       	ldi	r23, 0x09	; 9
    fa12:	ce 01       	movw	r24, r28
    fa14:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa18:	89 2b       	or	r24, r25
    fa1a:	a1 f1       	breq	.+104    	; 0xfa84 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fa1c:	6d eb       	ldi	r22, 0xBD	; 189
    fa1e:	7a e0       	ldi	r23, 0x0A	; 10
    fa20:	ce 01       	movw	r24, r28
    fa22:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa26:	89 2b       	or	r24, r25
    fa28:	81 f1       	breq	.+96     	; 0xfa8a <posix_fopen_modes_to_open+0xbe>
    fa2a:	6c e0       	ldi	r22, 0x0C	; 12
    fa2c:	79 e0       	ldi	r23, 0x09	; 9
    fa2e:	ce 01       	movw	r24, r28
    fa30:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa34:	89 2b       	or	r24, r25
    fa36:	49 f1       	breq	.+82     	; 0xfa8a <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fa38:	6f e0       	ldi	r22, 0x0F	; 15
    fa3a:	79 e0       	ldi	r23, 0x09	; 9
    fa3c:	ce 01       	movw	r24, r28
    fa3e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa42:	89 2b       	or	r24, r25
    fa44:	29 f1       	breq	.+74     	; 0xfa90 <posix_fopen_modes_to_open+0xc4>
    fa46:	62 e1       	ldi	r22, 0x12	; 18
    fa48:	79 e0       	ldi	r23, 0x09	; 9
    fa4a:	ce 01       	movw	r24, r28
    fa4c:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa50:	89 2b       	or	r24, r25
    fa52:	f1 f0       	breq	.+60     	; 0xfa90 <posix_fopen_modes_to_open+0xc4>
    fa54:	66 e1       	ldi	r22, 0x16	; 22
    fa56:	79 e0       	ldi	r23, 0x09	; 9
    fa58:	ce 01       	movw	r24, r28
    fa5a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa5e:	89 2b       	or	r24, r25
    fa60:	b9 f0       	breq	.+46     	; 0xfa90 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fa62:	6e e2       	ldi	r22, 0x2E	; 46
    fa64:	73 e1       	ldi	r23, 0x13	; 19
    fa66:	ce 01       	movw	r24, r28
    fa68:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa6c:	89 2b       	or	r24, r25
    fa6e:	99 f0       	breq	.+38     	; 0xfa96 <posix_fopen_modes_to_open+0xca>
    fa70:	6a e1       	ldi	r22, 0x1A	; 26
    fa72:	79 e0       	ldi	r23, 0x09	; 9
    fa74:	ce 01       	movw	r24, r28
    fa76:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcmp>
    fa7a:	89 2b       	or	r24, r25
    fa7c:	61 f0       	breq	.+24     	; 0xfa96 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fa7e:	8f ef       	ldi	r24, 0xFF	; 255
    fa80:	9f ef       	ldi	r25, 0xFF	; 255
    fa82:	0b c0       	rjmp	.+22     	; 0xfa9a <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fa84:	82 e0       	ldi	r24, 0x02	; 2
    fa86:	92 e0       	ldi	r25, 0x02	; 2
    fa88:	08 c0       	rjmp	.+16     	; 0xfa9a <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fa8a:	81 e4       	ldi	r24, 0x41	; 65
    fa8c:	92 e0       	ldi	r25, 0x02	; 2
    fa8e:	05 c0       	rjmp	.+10     	; 0xfa9a <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fa90:	82 e4       	ldi	r24, 0x42	; 66
    fa92:	92 e0       	ldi	r25, 0x02	; 2
    fa94:	02 c0       	rjmp	.+4      	; 0xfa9a <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fa96:	81 e4       	ldi	r24, 0x41	; 65
    fa98:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fa9a:	df 91       	pop	r29
    fa9c:	cf 91       	pop	r28
    fa9e:	08 95       	ret

0000faa0 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    faa0:	cf 93       	push	r28
    faa2:	df 93       	push	r29
    faa4:	ec 01       	movw	r28, r24
    faa6:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    faa8:	91 df       	rcall	.-222    	; 0xf9cc <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    faaa:	bc 01       	movw	r22, r24
    faac:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    faae:	ef de       	rcall	.-546    	; 0xf88e <open>
    fab0:	8e d8       	rcall	.-3812   	; 0xebce <fileno_to_stream>
}
    fab2:	df 91       	pop	r29
    fab4:	cf 91       	pop	r28
    fab6:	08 95       	ret

0000fab8 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fab8:	a8 e0       	ldi	r26, 0x08	; 8
    faba:	b0 e0       	ldi	r27, 0x00	; 0
    fabc:	e2 e6       	ldi	r30, 0x62	; 98
    fabe:	fd e7       	ldi	r31, 0x7D	; 125
    fac0:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fac4:	8f e4       	ldi	r24, 0x4F	; 79
    fac6:	95 e7       	ldi	r25, 0x75	; 117
    fac8:	9a 83       	std	Y+2, r25	; 0x02
    faca:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    facc:	18 86       	std	Y+8, r1	; 0x08
    face:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    fad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    fad4:	9c 83       	std	Y+4, r25	; 0x04
    fad6:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fad8:	4f 85       	ldd	r20, Y+15	; 0x0f
    fada:	58 89       	ldd	r21, Y+16	; 0x10
    fadc:	60 e8       	ldi	r22, 0x80	; 128
    fade:	9e 01       	movw	r18, r28
    fae0:	2f 5e       	subi	r18, 0xEF	; 239
    fae2:	3f 4f       	sbci	r19, 0xFF	; 255
    fae4:	ce 01       	movw	r24, r28
    fae6:	01 96       	adiw	r24, 0x01	; 1
    fae8:	0e 94 73 40 	call	0x80e6	; 0x80e6 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    faec:	8f 81       	ldd	r24, Y+7	; 0x07
    faee:	98 85       	ldd	r25, Y+8	; 0x08
    faf0:	28 96       	adiw	r28, 0x08	; 8
    faf2:	e2 e0       	ldi	r30, 0x02	; 2
    faf4:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000faf8 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    faf8:	cf 93       	push	r28
    fafa:	df 93       	push	r29
    fafc:	00 d0       	rcall	.+0      	; 0xfafe <posix_help+0x6>
    fafe:	1f 92       	push	r1
    fb00:	ec 01       	movw	r28, r24
    fb02:	89 e4       	ldi	r24, 0x49	; 73
    fb04:	9e e0       	ldi	r25, 0x0E	; 14
    fb06:	a0 e0       	ldi	r26, 0x00	; 0
    fb08:	ed b7       	in	r30, 0x3d	; 61
    fb0a:	fe b7       	in	r31, 0x3e	; 62
    fb0c:	81 83       	std	Z+1, r24	; 0x01
    fb0e:	92 83       	std	Z+2, r25	; 0x02
    fb10:	a3 83       	std	Z+3, r26	; 0x03
    fb12:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fb16:	cd 2b       	or	r28, r29
    fb18:	51 f0       	breq	.+20     	; 0xfb2e <posix_help+0x36>
    fb1a:	83 e8       	ldi	r24, 0x83	; 131
    fb1c:	9d e0       	ldi	r25, 0x0D	; 13
    fb1e:	a0 e0       	ldi	r26, 0x00	; 0
    fb20:	ed b7       	in	r30, 0x3d	; 61
    fb22:	fe b7       	in	r31, 0x3e	; 62
    fb24:	81 83       	std	Z+1, r24	; 0x01
    fb26:	92 83       	std	Z+2, r25	; 0x02
    fb28:	a3 83       	std	Z+3, r26	; 0x03
    fb2a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fb2e:	cd b7       	in	r28, 0x3d	; 61
    fb30:	de b7       	in	r29, 0x3e	; 62
    fb32:	23 96       	adiw	r28, 0x03	; 3
    fb34:	e2 e0       	ldi	r30, 0x02	; 2
    fb36:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000fb3a <copy>:
    fb3a:	4f 92       	push	r4
    fb3c:	5f 92       	push	r5
    fb3e:	6f 92       	push	r6
    fb40:	8f 92       	push	r8
    fb42:	9f 92       	push	r9
    fb44:	af 92       	push	r10
    fb46:	bf 92       	push	r11
    fb48:	cf 92       	push	r12
    fb4a:	df 92       	push	r13
    fb4c:	ef 92       	push	r14
    fb4e:	ff 92       	push	r15
    fb50:	0f 93       	push	r16
    fb52:	1f 93       	push	r17
    fb54:	cf 93       	push	r28
    fb56:	df 93       	push	r29
    fb58:	ad b7       	in	r26, 0x3d	; 61
    fb5a:	be b7       	in	r27, 0x3e	; 62
    fb5c:	17 97       	sbiw	r26, 0x07	; 7
    fb5e:	0f b6       	in	r0, 0x3f	; 63
    fb60:	f8 94       	cli
    fb62:	be bf       	out	0x3e, r27	; 62
    fb64:	0f be       	out	0x3f, r0	; 63
    fb66:	ad bf       	out	0x3d, r26	; 61
    fb68:	8c 01       	movw	r16, r24
    fb6a:	eb 01       	movw	r28, r22
    fb6c:	ed b7       	in	r30, 0x3d	; 61
    fb6e:	fe b7       	in	r31, 0x3e	; 62
    fb70:	95 83       	std	Z+5, r25	; 0x05
    fb72:	84 83       	std	Z+4, r24	; 0x04
    fb74:	8c ee       	ldi	r24, 0xEC	; 236
    fb76:	9c e0       	ldi	r25, 0x0C	; 12
    fb78:	a0 e0       	ldi	r26, 0x00	; 0
    fb7a:	81 83       	std	Z+1, r24	; 0x01
    fb7c:	92 83       	std	Z+2, r25	; 0x02
    fb7e:	a3 83       	std	Z+3, r26	; 0x03
    fb80:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fb84:	6e ef       	ldi	r22, 0xFE	; 254
    fb86:	78 e0       	ldi	r23, 0x08	; 8
    fb88:	c8 01       	movw	r24, r16
    fb8a:	8a df       	rcall	.-236    	; 0xfaa0 <fopen>
    fb8c:	7c 01       	movw	r14, r24
    fb8e:	ed b7       	in	r30, 0x3d	; 61
    fb90:	fe b7       	in	r31, 0x3e	; 62
    fb92:	89 2b       	or	r24, r25
    fb94:	59 f4       	brne	.+22     	; 0xfbac <copy+0x72>
    fb96:	15 83       	std	Z+5, r17	; 0x05
    fb98:	04 83       	std	Z+4, r16	; 0x04
    fb9a:	8c ed       	ldi	r24, 0xDC	; 220
    fb9c:	9c e0       	ldi	r25, 0x0C	; 12
    fb9e:	a0 e0       	ldi	r26, 0x00	; 0
    fba0:	81 83       	std	Z+1, r24	; 0x01
    fba2:	92 83       	std	Z+2, r25	; 0x02
    fba4:	a3 83       	std	Z+3, r26	; 0x03
    fba6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fbaa:	20 c0       	rjmp	.+64     	; 0xfbec <copy+0xb2>
    fbac:	d5 83       	std	Z+5, r29	; 0x05
    fbae:	c4 83       	std	Z+4, r28	; 0x04
    fbb0:	8f ec       	ldi	r24, 0xCF	; 207
    fbb2:	9c e0       	ldi	r25, 0x0C	; 12
    fbb4:	a0 e0       	ldi	r26, 0x00	; 0
    fbb6:	81 83       	std	Z+1, r24	; 0x01
    fbb8:	92 83       	std	Z+2, r25	; 0x02
    fbba:	a3 83       	std	Z+3, r26	; 0x03
    fbbc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fbc0:	6c e0       	ldi	r22, 0x0C	; 12
    fbc2:	79 e0       	ldi	r23, 0x09	; 9
    fbc4:	ce 01       	movw	r24, r28
    fbc6:	6c df       	rcall	.-296    	; 0xfaa0 <fopen>
    fbc8:	8c 01       	movw	r16, r24
    fbca:	89 2b       	or	r24, r25
    fbcc:	a1 f4       	brne	.+40     	; 0xfbf6 <copy+0xbc>
    fbce:	ed b7       	in	r30, 0x3d	; 61
    fbd0:	fe b7       	in	r31, 0x3e	; 62
    fbd2:	d5 83       	std	Z+5, r29	; 0x05
    fbd4:	c4 83       	std	Z+4, r28	; 0x04
    fbd6:	8f eb       	ldi	r24, 0xBF	; 191
    fbd8:	9c e0       	ldi	r25, 0x0C	; 12
    fbda:	a0 e0       	ldi	r26, 0x00	; 0
    fbdc:	81 83       	std	Z+1, r24	; 0x01
    fbde:	92 83       	std	Z+2, r25	; 0x02
    fbe0:	a3 83       	std	Z+3, r26	; 0x03
    fbe2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fbe6:	80 e0       	ldi	r24, 0x00	; 0
    fbe8:	90 e0       	ldi	r25, 0x00	; 0
    fbea:	04 de       	rcall	.-1016   	; 0xf7f4 <fclose>
    fbec:	60 e0       	ldi	r22, 0x00	; 0
    fbee:	70 e0       	ldi	r23, 0x00	; 0
    fbf0:	80 e0       	ldi	r24, 0x00	; 0
    fbf2:	90 e0       	ldi	r25, 0x00	; 0
    fbf4:	68 c0       	rjmp	.+208    	; 0xfcc6 <copy+0x18c>
    fbf6:	61 e0       	ldi	r22, 0x01	; 1
    fbf8:	70 e0       	ldi	r23, 0x00	; 0
    fbfa:	80 e0       	ldi	r24, 0x00	; 0
    fbfc:	92 e0       	ldi	r25, 0x02	; 2
    fbfe:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
    fc02:	6c 01       	movw	r12, r24
    fc04:	89 2b       	or	r24, r25
    fc06:	21 f4       	brne	.+8      	; 0xfc10 <copy+0xd6>
    fc08:	c7 01       	movw	r24, r14
    fc0a:	f4 dd       	rcall	.-1048   	; 0xf7f4 <fclose>
    fc0c:	c8 01       	movw	r24, r16
    fc0e:	ed cf       	rjmp	.-38     	; 0xfbea <copy+0xb0>
    fc10:	82 eb       	ldi	r24, 0xB2	; 178
    fc12:	9c e0       	ldi	r25, 0x0C	; 12
    fc14:	a0 e0       	ldi	r26, 0x00	; 0
    fc16:	ed b7       	in	r30, 0x3d	; 61
    fc18:	fe b7       	in	r31, 0x3e	; 62
    fc1a:	81 83       	std	Z+1, r24	; 0x01
    fc1c:	92 83       	std	Z+2, r25	; 0x02
    fc1e:	a3 83       	std	Z+3, r26	; 0x03
    fc20:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fc24:	81 2c       	mov	r8, r1
    fc26:	91 2c       	mov	r9, r1
    fc28:	54 01       	movw	r10, r8
    fc2a:	86 e9       	ldi	r24, 0x96	; 150
    fc2c:	9c e0       	ldi	r25, 0x0C	; 12
    fc2e:	2c 01       	movw	r4, r24
    fc30:	61 2c       	mov	r6, r1
    fc32:	97 01       	movw	r18, r14
    fc34:	40 e0       	ldi	r20, 0x00	; 0
    fc36:	52 e0       	ldi	r21, 0x02	; 2
    fc38:	61 e0       	ldi	r22, 0x01	; 1
    fc3a:	70 e0       	ldi	r23, 0x00	; 0
    fc3c:	c6 01       	movw	r24, r12
    fc3e:	86 dc       	rcall	.-1780   	; 0xf54c <fread>
    fc40:	ec 01       	movw	r28, r24
    fc42:	18 16       	cp	r1, r24
    fc44:	19 06       	cpc	r1, r25
    fc46:	44 f5       	brge	.+80     	; 0xfc98 <copy+0x15e>
    fc48:	98 01       	movw	r18, r16
    fc4a:	ae 01       	movw	r20, r28
    fc4c:	61 e0       	ldi	r22, 0x01	; 1
    fc4e:	70 e0       	ldi	r23, 0x00	; 0
    fc50:	c6 01       	movw	r24, r12
    fc52:	4e dd       	rcall	.-1380   	; 0xf6f0 <fwrite>
    fc54:	8c 17       	cp	r24, r28
    fc56:	9d 07       	cpc	r25, r29
    fc58:	5c f4       	brge	.+22     	; 0xfc70 <copy+0x136>
    fc5a:	85 ea       	ldi	r24, 0xA5	; 165
    fc5c:	9c e0       	ldi	r25, 0x0C	; 12
    fc5e:	a0 e0       	ldi	r26, 0x00	; 0
    fc60:	ed b7       	in	r30, 0x3d	; 61
    fc62:	fe b7       	in	r31, 0x3e	; 62
    fc64:	81 83       	std	Z+1, r24	; 0x01
    fc66:	92 83       	std	Z+2, r25	; 0x02
    fc68:	a3 83       	std	Z+3, r26	; 0x03
    fc6a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fc6e:	14 c0       	rjmp	.+40     	; 0xfc98 <copy+0x15e>
    fc70:	ce 01       	movw	r24, r28
    fc72:	dd 0f       	add	r29, r29
    fc74:	aa 0b       	sbc	r26, r26
    fc76:	bb 0b       	sbc	r27, r27
    fc78:	88 0e       	add	r8, r24
    fc7a:	99 1e       	adc	r9, r25
    fc7c:	aa 1e       	adc	r10, r26
    fc7e:	bb 1e       	adc	r11, r27
    fc80:	ed b7       	in	r30, 0x3d	; 61
    fc82:	fe b7       	in	r31, 0x3e	; 62
    fc84:	84 82       	std	Z+4, r8	; 0x04
    fc86:	95 82       	std	Z+5, r9	; 0x05
    fc88:	a6 82       	std	Z+6, r10	; 0x06
    fc8a:	b7 82       	std	Z+7, r11	; 0x07
    fc8c:	41 82       	std	Z+1, r4	; 0x01
    fc8e:	52 82       	std	Z+2, r5	; 0x02
    fc90:	63 82       	std	Z+3, r6	; 0x03
    fc92:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fc96:	cd cf       	rjmp	.-102    	; 0xfc32 <copy+0xf8>
    fc98:	ed b7       	in	r30, 0x3d	; 61
    fc9a:	fe b7       	in	r31, 0x3e	; 62
    fc9c:	84 82       	std	Z+4, r8	; 0x04
    fc9e:	95 82       	std	Z+5, r9	; 0x05
    fca0:	a6 82       	std	Z+6, r10	; 0x06
    fca2:	b7 82       	std	Z+7, r11	; 0x07
    fca4:	83 e8       	ldi	r24, 0x83	; 131
    fca6:	9c e0       	ldi	r25, 0x0C	; 12
    fca8:	a0 e0       	ldi	r26, 0x00	; 0
    fcaa:	81 83       	std	Z+1, r24	; 0x01
    fcac:	92 83       	std	Z+2, r25	; 0x02
    fcae:	a3 83       	std	Z+3, r26	; 0x03
    fcb0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fcb4:	c6 01       	movw	r24, r12
    fcb6:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
    fcba:	c7 01       	movw	r24, r14
    fcbc:	9b dd       	rcall	.-1226   	; 0xf7f4 <fclose>
    fcbe:	c8 01       	movw	r24, r16
    fcc0:	99 dd       	rcall	.-1230   	; 0xf7f4 <fclose>
    fcc2:	b4 01       	movw	r22, r8
    fcc4:	c5 01       	movw	r24, r10
    fcc6:	ad b7       	in	r26, 0x3d	; 61
    fcc8:	be b7       	in	r27, 0x3e	; 62
    fcca:	17 96       	adiw	r26, 0x07	; 7
    fccc:	0f b6       	in	r0, 0x3f	; 63
    fcce:	f8 94       	cli
    fcd0:	be bf       	out	0x3e, r27	; 62
    fcd2:	0f be       	out	0x3f, r0	; 63
    fcd4:	ad bf       	out	0x3d, r26	; 61
    fcd6:	df 91       	pop	r29
    fcd8:	cf 91       	pop	r28
    fcda:	1f 91       	pop	r17
    fcdc:	0f 91       	pop	r16
    fcde:	ff 90       	pop	r15
    fce0:	ef 90       	pop	r14
    fce2:	df 90       	pop	r13
    fce4:	cf 90       	pop	r12
    fce6:	bf 90       	pop	r11
    fce8:	af 90       	pop	r10
    fcea:	9f 90       	pop	r9
    fcec:	8f 90       	pop	r8
    fcee:	6f 90       	pop	r6
    fcf0:	5f 90       	pop	r5
    fcf2:	4f 90       	pop	r4
    fcf4:	08 95       	ret

0000fcf6 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fcf6:	cf 93       	push	r28
    fcf8:	df 93       	push	r29
    fcfa:	00 d0       	rcall	.+0      	; 0xfcfc <testpage+0x6>
    fcfc:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fcfe:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fd02:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fd06:	82 17       	cp	r24, r18
    fd08:	93 07       	cpc	r25, r19
    fd0a:	3c f1       	brlt	.+78     	; 0xfd5a <testpage+0x64>
    {
        printf("More..");
    fd0c:	8c e7       	ldi	r24, 0x7C	; 124
    fd0e:	9c e0       	ldi	r25, 0x0C	; 12
    fd10:	a0 e0       	ldi	r26, 0x00	; 0
    fd12:	ed b7       	in	r30, 0x3d	; 61
    fd14:	fe b7       	in	r31, 0x3e	; 62
    fd16:	81 83       	std	Z+1, r24	; 0x01
    fd18:	92 83       	std	Z+2, r25	; 0x02
    fd1a:	a3 83       	std	Z+3, r26	; 0x03
    fd1c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fd20:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <getchar>
    fd24:	ec 01       	movw	r28, r24
        printf("\r");
    fd26:	8a e7       	ldi	r24, 0x7A	; 122
    fd28:	9c e0       	ldi	r25, 0x0C	; 12
    fd2a:	a0 e0       	ldi	r26, 0x00	; 0
    fd2c:	ed b7       	in	r30, 0x3d	; 61
    fd2e:	fe b7       	in	r31, 0x3e	; 62
    fd30:	81 83       	std	Z+1, r24	; 0x01
    fd32:	92 83       	std	Z+2, r25	; 0x02
    fd34:	a3 83       	std	Z+3, r26	; 0x03
    fd36:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        if(c == 'q')
    fd3a:	c1 37       	cpi	r28, 0x71	; 113
    fd3c:	d1 05       	cpc	r29, r1
    fd3e:	41 f0       	breq	.+16     	; 0xfd50 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fd40:	2a 97       	sbiw	r28, 0x0a	; 10
    fd42:	49 f4       	brne	.+18     	; 0xfd56 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fd44:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fd48:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fd4c:	01 97       	sbiw	r24, 0x01	; 1
    fd4e:	05 c0       	rjmp	.+10     	; 0xfd5a <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fd50:	8f ef       	ldi	r24, 0xFF	; 255
    fd52:	9f ef       	ldi	r25, 0xFF	; 255
    fd54:	02 c0       	rjmp	.+4      	; 0xfd5a <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fd56:	80 e0       	ldi	r24, 0x00	; 0
    fd58:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fd5a:	cd b7       	in	r28, 0x3d	; 61
    fd5c:	de b7       	in	r29, 0x3e	; 62
    fd5e:	23 96       	adiw	r28, 0x03	; 3
    fd60:	e2 e0       	ldi	r30, 0x02	; 2
    fd62:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0000fd66 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fd66:	a7 e0       	ldi	r26, 0x07	; 7
    fd68:	b1 e0       	ldi	r27, 0x01	; 1
    fd6a:	e9 eb       	ldi	r30, 0xB9	; 185
    fd6c:	fe e7       	ldi	r31, 0x7E	; 126
    fd6e:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
    fd72:	8c 01       	movw	r16, r24
    fd74:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fd76:	6e ef       	ldi	r22, 0xFE	; 254
    fd78:	78 e0       	ldi	r23, 0x08	; 8
    fd7a:	92 de       	rcall	.-732    	; 0xfaa0 <fopen>
    fd7c:	7c 01       	movw	r14, r24
    if (!fp)
    fd7e:	89 2b       	or	r24, r25
    fd80:	41 f0       	breq	.+16     	; 0xfd92 <cat+0x2c>
    fd82:	c1 2c       	mov	r12, r1
    fd84:	d1 2c       	mov	r13, r1
    fd86:	a1 2c       	mov	r10, r1
    fd88:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fd8a:	8e 01       	movw	r16, r28
    fd8c:	08 5f       	subi	r16, 0xF8	; 248
    fd8e:	1f 4f       	sbci	r17, 0xFF	; 255
    fd90:	22 c0       	rjmp	.+68     	; 0xfdd6 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fd92:	ed b7       	in	r30, 0x3d	; 61
    fd94:	fe b7       	in	r31, 0x3e	; 62
    fd96:	15 83       	std	Z+5, r17	; 0x05
    fd98:	04 83       	std	Z+4, r16	; 0x04
    fd9a:	85 e0       	ldi	r24, 0x05	; 5
    fd9c:	9d e0       	ldi	r25, 0x0D	; 13
    fd9e:	a0 e0       	ldi	r26, 0x00	; 0
    fda0:	81 83       	std	Z+1, r24	; 0x01
    fda2:	92 83       	std	Z+2, r25	; 0x02
    fda4:	a3 83       	std	Z+3, r26	; 0x03
    fda6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(0);
    fdaa:	c1 2c       	mov	r12, r1
    fdac:	d1 2c       	mov	r13, r1
    fdae:	76 01       	movw	r14, r12
    fdb0:	3f c0       	rjmp	.+126    	; 0xfe30 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fdb2:	c8 01       	movw	r24, r16
    fdb4:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>
        size += strlen(line);
    fdb8:	f8 01       	movw	r30, r16
    fdba:	01 90       	ld	r0, Z+
    fdbc:	00 20       	and	r0, r0
    fdbe:	e9 f7       	brne	.-6      	; 0xfdba <cat+0x54>
    fdc0:	31 97       	sbiw	r30, 0x01	; 1
    fdc2:	e0 1b       	sub	r30, r16
    fdc4:	f1 0b       	sbc	r31, r17
    fdc6:	ce 0e       	add	r12, r30
    fdc8:	df 1e       	adc	r13, r31
        puts(line);
    fdca:	c8 01       	movw	r24, r16
    fdcc:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <puts>
        if(dopage)
    fdd0:	81 14       	cp	r8, r1
    fdd2:	91 04       	cpc	r9, r1
    fdd4:	49 f4       	brne	.+18     	; 0xfde8 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fdd6:	a7 01       	movw	r20, r14
    fdd8:	6e ef       	ldi	r22, 0xFE	; 254
    fdda:	70 e0       	ldi	r23, 0x00	; 0
    fddc:	c8 01       	movw	r24, r16
    fdde:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
    fde2:	89 2b       	or	r24, r25
    fde4:	31 f7       	brne	.-52     	; 0xfdb2 <cat+0x4c>
    fde6:	06 c0       	rjmp	.+12     	; 0xfdf4 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fde8:	c5 01       	movw	r24, r10
    fdea:	01 96       	adiw	r24, 0x01	; 1
    fdec:	84 df       	rcall	.-248    	; 0xfcf6 <testpage>
    fdee:	5c 01       	movw	r10, r24
            if(count < 0)
    fdf0:	97 ff       	sbrs	r25, 7
    fdf2:	f1 cf       	rjmp	.-30     	; 0xfdd6 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fdf4:	83 e0       	ldi	r24, 0x03	; 3
    fdf6:	9d e0       	ldi	r25, 0x0D	; 13
    fdf8:	a0 e0       	ldi	r26, 0x00	; 0
    fdfa:	ed b7       	in	r30, 0x3d	; 61
    fdfc:	fe b7       	in	r31, 0x3e	; 62
    fdfe:	81 83       	std	Z+1, r24	; 0x01
    fe00:	92 83       	std	Z+2, r25	; 0x02
    fe02:	a3 83       	std	Z+3, r26	; 0x03
    fe04:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    fclose(fp);
    fe08:	c7 01       	movw	r24, r14
    fe0a:	f4 dc       	rcall	.-1560   	; 0xf7f4 <fclose>
    printf("%ld bytes\n", (long)size);
    fe0c:	0d 2c       	mov	r0, r13
    fe0e:	00 0c       	add	r0, r0
    fe10:	ee 08       	sbc	r14, r14
    fe12:	ff 08       	sbc	r15, r15
    fe14:	ed b7       	in	r30, 0x3d	; 61
    fe16:	fe b7       	in	r31, 0x3e	; 62
    fe18:	c4 82       	std	Z+4, r12	; 0x04
    fe1a:	d5 82       	std	Z+5, r13	; 0x05
    fe1c:	e6 82       	std	Z+6, r14	; 0x06
    fe1e:	f7 82       	std	Z+7, r15	; 0x07
    fe20:	88 ef       	ldi	r24, 0xF8	; 248
    fe22:	9c e0       	ldi	r25, 0x0C	; 12
    fe24:	a0 e0       	ldi	r26, 0x00	; 0
    fe26:	81 83       	std	Z+1, r24	; 0x01
    fe28:	92 83       	std	Z+2, r25	; 0x02
    fe2a:	a3 83       	std	Z+3, r26	; 0x03
    fe2c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(size);
}
    fe30:	c7 01       	movw	r24, r14
    fe32:	b6 01       	movw	r22, r12
    fe34:	c9 5f       	subi	r28, 0xF9	; 249
    fe36:	de 4f       	sbci	r29, 0xFE	; 254
    fe38:	ec e0       	ldi	r30, 0x0C	; 12
    fe3a:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

0000fe3e <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fe3e:	4f 92       	push	r4
    fe40:	5f 92       	push	r5
    fe42:	6f 92       	push	r6
    fe44:	7f 92       	push	r7
    fe46:	af 92       	push	r10
    fe48:	bf 92       	push	r11
    fe4a:	cf 92       	push	r12
    fe4c:	df 92       	push	r13
    fe4e:	ef 92       	push	r14
    fe50:	ff 92       	push	r15
    fe52:	0f 93       	push	r16
    fe54:	1f 93       	push	r17
    fe56:	cf 93       	push	r28
    fe58:	df 93       	push	r29
    fe5a:	cd b7       	in	r28, 0x3d	; 61
    fe5c:	de b7       	in	r29, 0x3e	; 62
    fe5e:	c9 54       	subi	r28, 0x49	; 73
    fe60:	d1 09       	sbc	r29, r1
    fe62:	0f b6       	in	r0, 0x3f	; 63
    fe64:	f8 94       	cli
    fe66:	de bf       	out	0x3e, r29	; 62
    fe68:	0f be       	out	0x3f, r0	; 63
    fe6a:	cd bf       	out	0x3d, r28	; 61
    fe6c:	8c 01       	movw	r16, r24
    fe6e:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fe70:	be 01       	movw	r22, r28
    fe72:	62 5f       	subi	r22, 0xF2	; 242
    fe74:	7f 4f       	sbci	r23, 0xFF	; 255
    fe76:	19 d9       	rcall	.-3534   	; 0xf0aa <stat>
    fe78:	01 96       	adiw	r24, 0x01	; 1
    fe7a:	79 f4       	brne	.+30     	; 0xfe9a <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fe7c:	ed b7       	in	r30, 0x3d	; 61
    fe7e:	fe b7       	in	r31, 0x3e	; 62
    fe80:	15 83       	std	Z+5, r17	; 0x05
    fe82:	04 83       	std	Z+4, r16	; 0x04
    fe84:	88 e6       	ldi	r24, 0x68	; 104
    fe86:	9c e0       	ldi	r25, 0x0C	; 12
    fe88:	a0 e0       	ldi	r26, 0x00	; 0
    fe8a:	81 83       	std	Z+1, r24	; 0x01
    fe8c:	92 83       	std	Z+2, r25	; 0x02
    fe8e:	a3 83       	std	Z+3, r26	; 0x03
    fe90:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(0);
    fe94:	80 e0       	ldi	r24, 0x00	; 0
    fe96:	90 e0       	ldi	r25, 0x00	; 0
    fe98:	77 c0       	rjmp	.+238    	; 0xff88 <__DATA_REGION_LENGTH__+0x88>
    }

    if(!verbose)
    fe9a:	ef 28       	or	r14, r15
    fe9c:	81 f4       	brne	.+32     	; 0xfebe <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fe9e:	c8 01       	movw	r24, r16
    fea0:	0e 94 21 76 	call	0xec42	; 0xec42 <basename>
    fea4:	ed b7       	in	r30, 0x3d	; 61
    fea6:	fe b7       	in	r31, 0x3e	; 62
    fea8:	95 83       	std	Z+5, r25	; 0x05
    feaa:	84 83       	std	Z+4, r24	; 0x04
    feac:	84 e6       	ldi	r24, 0x64	; 100
    feae:	9c e0       	ldi	r25, 0x0C	; 12
    feb0:	a0 e0       	ldi	r26, 0x00	; 0
    feb2:	81 83       	std	Z+1, r24	; 0x01
    feb4:	92 83       	std	Z+2, r25	; 0x02
    feb6:	a3 83       	std	Z+3, r26	; 0x03
    feb8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    febc:	63 c0       	rjmp	.+198    	; 0xff84 <__DATA_REGION_LENGTH__+0x84>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    febe:	4e 88       	ldd	r4, Y+22	; 0x16
    fec0:	5f 88       	ldd	r5, Y+23	; 0x17
    fec2:	68 8c       	ldd	r6, Y+24	; 0x18
    fec4:	79 8c       	ldd	r7, Y+25	; 0x19
    fec6:	d3 01       	movw	r26, r6
    fec8:	c2 01       	movw	r24, r4
    feca:	88 27       	eor	r24, r24
    fecc:	90 7f       	andi	r25, 0xF0	; 240
    fece:	aa 27       	eor	r26, r26
    fed0:	bb 27       	eor	r27, r27
    fed2:	81 15       	cp	r24, r1
    fed4:	90 44       	sbci	r25, 0x40	; 64
    fed6:	a1 05       	cpc	r26, r1
    fed8:	b1 05       	cpc	r27, r1
    feda:	11 f4       	brne	.+4      	; 0xfee0 <ls_info+0xa2>
        *p++ = 'd';
    fedc:	84 e6       	ldi	r24, 0x64	; 100
    fede:	01 c0       	rjmp	.+2      	; 0xfee2 <ls_info+0xa4>
    else
        *p++ = '-';
    fee0:	8d e2       	ldi	r24, 0x2D	; 45
    fee2:	8e af       	std	Y+62, r24	; 0x3e
    fee4:	fe 01       	movw	r30, r28
    fee6:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fee8:	e1 2c       	mov	r14, r1
    feea:	ff 24       	eor	r15, r15
    feec:	f3 94       	inc	r15
    feee:	20 e0       	ldi	r18, 0x00	; 0
    fef0:	30 e0       	ldi	r19, 0x00	; 0
    fef2:	be 2e       	mov	r11, r30
    fef4:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fef6:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fef8:	53 e0       	ldi	r21, 0x03	; 3
    fefa:	c5 2e       	mov	r12, r21
    fefc:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fefe:	c7 01       	movw	r24, r14
    ff00:	a0 e0       	ldi	r26, 0x00	; 0
    ff02:	b0 e0       	ldi	r27, 0x00	; 0
    ff04:	84 21       	and	r24, r4
    ff06:	95 21       	and	r25, r5
    ff08:	a6 21       	and	r26, r6
    ff0a:	b7 21       	and	r27, r7
    ff0c:	89 2b       	or	r24, r25
    ff0e:	8a 2b       	or	r24, r26
    ff10:	8b 2b       	or	r24, r27
    ff12:	51 f0       	breq	.+20     	; 0xff28 <__DATA_REGION_LENGTH__+0x28>
            *p++ = cm[ i % 3];
    ff14:	c9 01       	movw	r24, r18
    ff16:	b6 01       	movw	r22, r12
    ff18:	0e 94 1b e3 	call	0x1c636	; 0x1c636 <__divmodhi4>
    ff1c:	dc 01       	movw	r26, r24
    ff1e:	a6 54       	subi	r26, 0x46	; 70
    ff20:	b4 4f       	sbci	r27, 0xF4	; 244
    ff22:	8c 91       	ld	r24, X
    ff24:	81 83       	std	Z+1, r24	; 0x01
    ff26:	01 c0       	rjmp	.+2      	; 0xff2a <__DATA_REGION_LENGTH__+0x2a>
        else
            *p++ = '-';
    ff28:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    ff2a:	f6 94       	lsr	r15
    ff2c:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    ff2e:	2f 5f       	subi	r18, 0xFF	; 255
    ff30:	3f 4f       	sbci	r19, 0xFF	; 255
    ff32:	31 96       	adiw	r30, 0x01	; 1
    ff34:	29 30       	cpi	r18, 0x09	; 9
    ff36:	31 05       	cpc	r19, r1
    ff38:	11 f7       	brne	.-60     	; 0xfefe <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    ff3a:	29 96       	adiw	r28, 0x09	; 9
    ff3c:	1f ae       	std	Y+63, r1	; 0x3f
    ff3e:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    ff40:	4e a0       	ldd	r4, Y+38	; 0x26
    ff42:	5f a0       	ldd	r5, Y+39	; 0x27
    ff44:	68 a4       	ldd	r6, Y+40	; 0x28
    ff46:	79 a4       	ldd	r7, Y+41	; 0x29
    ff48:	6e a9       	ldd	r22, Y+54	; 0x36
    ff4a:	7f a9       	ldd	r23, Y+55	; 0x37
    ff4c:	88 ad       	ldd	r24, Y+56	; 0x38
    ff4e:	99 ad       	ldd	r25, Y+57	; 0x39
    ff50:	0e 94 fc 75 	call	0xebf8	; 0xebf8 <mctime>
    ff54:	7c 01       	movw	r14, r24
    ff56:	c8 01       	movw	r24, r16
    ff58:	0e 94 21 76 	call	0xec42	; 0xec42 <basename>
    ff5c:	ed b7       	in	r30, 0x3d	; 61
    ff5e:	fe b7       	in	r31, 0x3e	; 62
    ff60:	95 87       	std	Z+13, r25	; 0x0d
    ff62:	84 87       	std	Z+12, r24	; 0x0c
    ff64:	f3 86       	std	Z+11, r15	; 0x0b
    ff66:	e2 86       	std	Z+10, r14	; 0x0a
    ff68:	46 82       	std	Z+6, r4	; 0x06
    ff6a:	57 82       	std	Z+7, r5	; 0x07
    ff6c:	60 86       	std	Z+8, r6	; 0x08
    ff6e:	71 86       	std	Z+9, r7	; 0x09
    ff70:	b4 82       	std	Z+4, r11	; 0x04
    ff72:	a5 82       	std	Z+5, r10	; 0x05
    ff74:	8a e4       	ldi	r24, 0x4A	; 74
    ff76:	9c e0       	ldi	r25, 0x0C	; 12
    ff78:	a0 e0       	ldi	r26, 0x00	; 0
    ff7a:	81 83       	std	Z+1, r24	; 0x01
    ff7c:	92 83       	std	Z+2, r25	; 0x02
    ff7e:	a3 83       	std	Z+3, r26	; 0x03
    ff80:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    ff84:	81 e0       	ldi	r24, 0x01	; 1
    ff86:	90 e0       	ldi	r25, 0x00	; 0
}
    ff88:	c7 5b       	subi	r28, 0xB7	; 183
    ff8a:	df 4f       	sbci	r29, 0xFF	; 255
    ff8c:	0f b6       	in	r0, 0x3f	; 63
    ff8e:	f8 94       	cli
    ff90:	de bf       	out	0x3e, r29	; 62
    ff92:	0f be       	out	0x3f, r0	; 63
    ff94:	cd bf       	out	0x3d, r28	; 61
    ff96:	df 91       	pop	r29
    ff98:	cf 91       	pop	r28
    ff9a:	1f 91       	pop	r17
    ff9c:	0f 91       	pop	r16
    ff9e:	ff 90       	pop	r15
    ffa0:	ef 90       	pop	r14
    ffa2:	df 90       	pop	r13
    ffa4:	cf 90       	pop	r12
    ffa6:	bf 90       	pop	r11
    ffa8:	af 90       	pop	r10
    ffaa:	7f 90       	pop	r7
    ffac:	6f 90       	pop	r6
    ffae:	5f 90       	pop	r5
    ffb0:	4f 90       	pop	r4
    ffb2:	08 95       	ret

0000ffb4 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    ffb4:	2f 92       	push	r2
    ffb6:	3f 92       	push	r3
    ffb8:	4f 92       	push	r4
    ffba:	5f 92       	push	r5
    ffbc:	6f 92       	push	r6
    ffbe:	8f 92       	push	r8
    ffc0:	9f 92       	push	r9
    ffc2:	af 92       	push	r10
    ffc4:	bf 92       	push	r11
    ffc6:	cf 92       	push	r12
    ffc8:	df 92       	push	r13
    ffca:	ef 92       	push	r14
    ffcc:	ff 92       	push	r15
    ffce:	0f 93       	push	r16
    ffd0:	1f 93       	push	r17
    ffd2:	cf 93       	push	r28
    ffd4:	df 93       	push	r29
    ffd6:	cd b7       	in	r28, 0x3d	; 61
    ffd8:	de b7       	in	r29, 0x3e	; 62
    ffda:	c7 53       	subi	r28, 0x37	; 55
    ffdc:	d2 40       	sbci	r29, 0x02	; 2
    ffde:	0f b6       	in	r0, 0x3f	; 63
    ffe0:	f8 94       	cli
    ffe2:	de bf       	out	0x3e, r29	; 62
    ffe4:	0f be       	out	0x3f, r0	; 63
    ffe6:	cd bf       	out	0x3d, r28	; 61
    ffe8:	7c 01       	movw	r14, r24
    ffea:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    ffec:	1e 82       	std	Y+6, r1	; 0x06
    ffee:	8e 01       	movw	r16, r28
    fff0:	0a 5f       	subi	r16, 0xFA	; 250
    fff2:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fff4:	00 97       	sbiw	r24, 0x00	; 0
    fff6:	91 f4       	brne	.+36     	; 0x1001c <__EEPROM_REGION_LENGTH__+0x1c>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fff8:	6e ef       	ldi	r22, 0xFE	; 254
    fffa:	71 e0       	ldi	r23, 0x01	; 1
    fffc:	c8 01       	movw	r24, r16
    fffe:	0e 94 77 76 	call	0xecee	; 0xecee <getcwd>
   10002:	89 2b       	or	r24, r25
   10004:	d1 f4       	brne	.+52     	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
        {
            printf("ls: Can't get current directory\n");
   10006:	89 e2       	ldi	r24, 0x29	; 41
   10008:	9c e0       	ldi	r25, 0x0C	; 12
   1000a:	a0 e0       	ldi	r26, 0x00	; 0
   1000c:	ed b7       	in	r30, 0x3d	; 61
   1000e:	fe b7       	in	r31, 0x3e	; 62
   10010:	81 83       	std	Z+1, r24	; 0x01
   10012:	92 83       	std	Z+2, r25	; 0x02
   10014:	a3 83       	std	Z+3, r26	; 0x03
   10016:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1001a:	37 c0       	rjmp	.+110    	; 0x1008a <__EEPROM_REGION_LENGTH__+0x8a>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1001c:	fc 01       	movw	r30, r24
   1001e:	80 81       	ld	r24, Z
   10020:	88 23       	and	r24, r24
   10022:	51 f3       	breq	.-44     	; 0xfff8 <ls+0x44>
   10024:	6d ef       	ldi	r22, 0xFD	; 253
   10026:	72 e1       	ldi	r23, 0x12	; 18
   10028:	c7 01       	movw	r24, r14
   1002a:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1002e:	89 2b       	or	r24, r25
   10030:	19 f7       	brne	.-58     	; 0xfff8 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10032:	b7 01       	movw	r22, r14
   10034:	c8 01       	movw	r24, r16
   10036:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <strcpy>
    }
    len = strlen(fullpath);
   1003a:	f8 01       	movw	r30, r16
   1003c:	01 90       	ld	r0, Z+
   1003e:	00 20       	and	r0, r0
   10040:	e9 f7       	brne	.-6      	; 0x1003c <__EEPROM_REGION_LENGTH__+0x3c>
   10042:	31 97       	sbiw	r30, 0x01	; 1
   10044:	1f 01       	movw	r2, r30
   10046:	20 1a       	sub	r2, r16
   10048:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   1004a:	ed b7       	in	r30, 0x3d	; 61
   1004c:	fe b7       	in	r31, 0x3e	; 62
   1004e:	15 83       	std	Z+5, r17	; 0x05
   10050:	04 83       	std	Z+4, r16	; 0x04
   10052:	8b e1       	ldi	r24, 0x1B	; 27
   10054:	9c e0       	ldi	r25, 0x0C	; 12
   10056:	a0 e0       	ldi	r26, 0x00	; 0
   10058:	81 83       	std	Z+1, r24	; 0x01
   1005a:	92 83       	std	Z+2, r25	; 0x02
   1005c:	a3 83       	std	Z+3, r26	; 0x03
   1005e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    if (stat(fullpath, &st))
   10062:	be 01       	movw	r22, r28
   10064:	6a 5f       	subi	r22, 0xFA	; 250
   10066:	7d 4f       	sbci	r23, 0xFD	; 253
   10068:	c8 01       	movw	r24, r16
   1006a:	1f d8       	rcall	.-4034   	; 0xf0aa <stat>
   1006c:	7c 01       	movw	r14, r24
   1006e:	89 2b       	or	r24, r25
   10070:	79 f0       	breq	.+30     	; 0x10090 <__EEPROM_REGION_LENGTH__+0x90>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10072:	ed b7       	in	r30, 0x3d	; 61
   10074:	fe b7       	in	r31, 0x3e	; 62
   10076:	15 83       	std	Z+5, r17	; 0x05
   10078:	04 83       	std	Z+4, r16	; 0x04
   1007a:	85 e0       	ldi	r24, 0x05	; 5
   1007c:	9c e0       	ldi	r25, 0x0C	; 12
   1007e:	a0 e0       	ldi	r26, 0x00	; 0
   10080:	81 83       	std	Z+1, r24	; 0x01
   10082:	92 83       	std	Z+2, r25	; 0x02
   10084:	a3 83       	std	Z+3, r26	; 0x03
   10086:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(0);
   1008a:	e1 2c       	mov	r14, r1
   1008c:	f1 2c       	mov	r15, r1
   1008e:	8c c0       	rjmp	.+280    	; 0x101a8 <__EEPROM_REGION_LENGTH__+0x1a8>
    }

    switch (st.st_mode & S_IFMT)
   10090:	c2 5f       	subi	r28, 0xF2	; 242
   10092:	dd 4f       	sbci	r29, 0xFD	; 253
   10094:	88 81       	ld	r24, Y
   10096:	99 81       	ldd	r25, Y+1	; 0x01
   10098:	aa 81       	ldd	r26, Y+2	; 0x02
   1009a:	bb 81       	ldd	r27, Y+3	; 0x03
   1009c:	ce 50       	subi	r28, 0x0E	; 14
   1009e:	d2 40       	sbci	r29, 0x02	; 2
   100a0:	88 27       	eor	r24, r24
   100a2:	90 7f       	andi	r25, 0xF0	; 240
   100a4:	aa 27       	eor	r26, r26
   100a6:	bb 27       	eor	r27, r27
   100a8:	81 15       	cp	r24, r1
   100aa:	f0 e4       	ldi	r31, 0x40	; 64
   100ac:	9f 07       	cpc	r25, r31
   100ae:	a1 05       	cpc	r26, r1
   100b0:	b1 05       	cpc	r27, r1
   100b2:	59 f0       	breq	.+22     	; 0x100ca <__EEPROM_REGION_LENGTH__+0xca>
   100b4:	81 15       	cp	r24, r1
   100b6:	90 48       	sbci	r25, 0x80	; 128
   100b8:	a1 05       	cpc	r26, r1
   100ba:	b1 05       	cpc	r27, r1
   100bc:	09 f0       	breq	.+2      	; 0x100c0 <__EEPROM_REGION_LENGTH__+0xc0>
   100be:	66 c0       	rjmp	.+204    	; 0x1018c <__EEPROM_REGION_LENGTH__+0x18c>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   100c0:	b4 01       	movw	r22, r8
   100c2:	c8 01       	movw	r24, r16
   100c4:	bc de       	rcall	.-648    	; 0xfe3e <ls_info>
   100c6:	7c 01       	movw	r14, r24
            break;
   100c8:	63 c0       	rjmp	.+198    	; 0x10190 <__EEPROM_REGION_LENGTH__+0x190>
        case S_IFDIR:
            dirp = opendir(fullpath);
   100ca:	c8 01       	movw	r24, r16
   100cc:	0e 94 25 77 	call	0xee4a	; 0xee4a <opendir>
   100d0:	5c 01       	movw	r10, r24
            if(!dirp)
   100d2:	89 2b       	or	r24, r25
   100d4:	81 f0       	breq	.+32     	; 0x100f6 <__EEPROM_REGION_LENGTH__+0xf6>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   100d6:	e1 2c       	mov	r14, r1
   100d8:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   100da:	c8 01       	movw	r24, r16
   100dc:	82 0d       	add	r24, r2
   100de:	93 1d       	adc	r25, r3
   100e0:	ca 5c       	subi	r28, 0xCA	; 202
   100e2:	dd 4f       	sbci	r29, 0xFD	; 253
   100e4:	99 83       	std	Y+1, r25	; 0x01
   100e6:	88 83       	st	Y, r24
   100e8:	c6 53       	subi	r28, 0x36	; 54
   100ea:	d2 40       	sbci	r29, 0x02	; 2
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   100ec:	82 ed       	ldi	r24, 0xD2	; 210
   100ee:	9b e0       	ldi	r25, 0x0B	; 11
   100f0:	2c 01       	movw	r4, r24
   100f2:	61 2c       	mov	r6, r1
   100f4:	24 c0       	rjmp	.+72     	; 0x1013e <__EEPROM_REGION_LENGTH__+0x13e>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   100f6:	85 ef       	ldi	r24, 0xF5	; 245
   100f8:	9b e0       	ldi	r25, 0x0B	; 11
   100fa:	a0 e0       	ldi	r26, 0x00	; 0
   100fc:	ed b7       	in	r30, 0x3d	; 61
   100fe:	fe b7       	in	r31, 0x3e	; 62
   10100:	81 83       	std	Z+1, r24	; 0x01
   10102:	92 83       	std	Z+2, r25	; 0x02
   10104:	a3 83       	std	Z+3, r26	; 0x03
   10106:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                return(0);
   1010a:	4e c0       	rjmp	.+156    	; 0x101a8 <__EEPROM_REGION_LENGTH__+0x1a8>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   1010c:	f6 01       	movw	r30, r12
   1010e:	80 81       	ld	r24, Z
   10110:	88 23       	and	r24, r24
   10112:	d9 f0       	breq	.+54     	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10114:	f6 01       	movw	r30, r12
   10116:	01 90       	ld	r0, Z+
   10118:	00 20       	and	r0, r0
   1011a:	e9 f7       	brne	.-6      	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
   1011c:	31 97       	sbiw	r30, 0x01	; 1
   1011e:	ec 19       	sub	r30, r12
   10120:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10122:	e2 0d       	add	r30, r2
   10124:	f3 1d       	adc	r31, r3
   10126:	ef 3f       	cpi	r30, 0xFF	; 255
   10128:	f1 40       	sbci	r31, 0x01	; 1
   1012a:	9c f0       	brlt	.+38     	; 0x10152 <__EEPROM_REGION_LENGTH__+0x152>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1012c:	ed b7       	in	r30, 0x3d	; 61
   1012e:	fe b7       	in	r31, 0x3e	; 62
   10130:	d5 82       	std	Z+5, r13	; 0x05
   10132:	c4 82       	std	Z+4, r12	; 0x04
   10134:	41 82       	std	Z+1, r4	; 0x01
   10136:	52 82       	std	Z+2, r5	; 0x02
   10138:	63 82       	std	Z+3, r6	; 0x03
   1013a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   1013e:	c5 01       	movw	r24, r10
   10140:	0e 94 43 77 	call	0xee86	; 0xee86 <readdir>
   10144:	6c 01       	movw	r12, r24
   10146:	89 2b       	or	r24, r25
   10148:	09 f7       	brne	.-62     	; 0x1010c <__EEPROM_REGION_LENGTH__+0x10c>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1014a:	c5 01       	movw	r24, r10
   1014c:	0e 94 0a 77 	call	0xee14	; 0xee14 <closedir>
            break;
   10150:	1f c0       	rjmp	.+62     	; 0x10190 <__EEPROM_REGION_LENGTH__+0x190>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10152:	66 ea       	ldi	r22, 0xA6	; 166
   10154:	78 e0       	ldi	r23, 0x08	; 8
   10156:	c8 01       	movw	r24, r16
   10158:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1015c:	89 2b       	or	r24, r25
   1015e:	29 f4       	brne	.+10     	; 0x1016a <__EEPROM_REGION_LENGTH__+0x16a>
                {
                    strcat(fullpath,"/");
   10160:	66 ea       	ldi	r22, 0xA6	; 166
   10162:	78 e0       	ldi	r23, 0x08	; 8
   10164:	c8 01       	movw	r24, r16
   10166:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
                }
                strcat(fullpath,de->d_name);
   1016a:	b6 01       	movw	r22, r12
   1016c:	c8 01       	movw	r24, r16
   1016e:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
                files +=ls_info(fullpath,verbose);
   10172:	b4 01       	movw	r22, r8
   10174:	c8 01       	movw	r24, r16
   10176:	63 de       	rcall	.-826    	; 0xfe3e <ls_info>
   10178:	e8 0e       	add	r14, r24
   1017a:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1017c:	ca 5c       	subi	r28, 0xCA	; 202
   1017e:	dd 4f       	sbci	r29, 0xFD	; 253
   10180:	e8 81       	ld	r30, Y
   10182:	f9 81       	ldd	r31, Y+1	; 0x01
   10184:	c6 53       	subi	r28, 0x36	; 54
   10186:	d2 40       	sbci	r29, 0x02	; 2
   10188:	10 82       	st	Z, r1
   1018a:	d9 cf       	rjmp	.-78     	; 0x1013e <__EEPROM_REGION_LENGTH__+0x13e>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1018c:	e1 2c       	mov	r14, r1
   1018e:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10190:	ed b7       	in	r30, 0x3d	; 61
   10192:	fe b7       	in	r31, 0x3e	; 62
   10194:	f5 82       	std	Z+5, r15	; 0x05
   10196:	e4 82       	std	Z+4, r14	; 0x04
   10198:	87 ec       	ldi	r24, 0xC7	; 199
   1019a:	9b e0       	ldi	r25, 0x0B	; 11
   1019c:	a0 e0       	ldi	r26, 0x00	; 0
   1019e:	81 83       	std	Z+1, r24	; 0x01
   101a0:	92 83       	std	Z+2, r25	; 0x02
   101a2:	a3 83       	std	Z+3, r26	; 0x03
   101a4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(files);
}
   101a8:	c7 01       	movw	r24, r14
   101aa:	c9 5c       	subi	r28, 0xC9	; 201
   101ac:	dd 4f       	sbci	r29, 0xFD	; 253
   101ae:	0f b6       	in	r0, 0x3f	; 63
   101b0:	f8 94       	cli
   101b2:	de bf       	out	0x3e, r29	; 62
   101b4:	0f be       	out	0x3f, r0	; 63
   101b6:	cd bf       	out	0x3d, r28	; 61
   101b8:	df 91       	pop	r29
   101ba:	cf 91       	pop	r28
   101bc:	1f 91       	pop	r17
   101be:	0f 91       	pop	r16
   101c0:	ff 90       	pop	r15
   101c2:	ef 90       	pop	r14
   101c4:	df 90       	pop	r13
   101c6:	cf 90       	pop	r12
   101c8:	bf 90       	pop	r11
   101ca:	af 90       	pop	r10
   101cc:	9f 90       	pop	r9
   101ce:	8f 90       	pop	r8
   101d0:	6f 90       	pop	r6
   101d2:	5f 90       	pop	r5
   101d4:	4f 90       	pop	r4
   101d6:	3f 90       	pop	r3
   101d8:	2f 90       	pop	r2
   101da:	08 95       	ret

000101dc <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   101dc:	a7 e0       	ldi	r26, 0x07	; 7
   101de:	b1 e0       	ldi	r27, 0x01	; 1
   101e0:	e4 ef       	ldi	r30, 0xF4	; 244
   101e2:	f0 e8       	ldi	r31, 0x80	; 128
   101e4:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
	if(argc < 1)
   101e8:	18 16       	cp	r1, r24
   101ea:	19 06       	cpc	r1, r25
   101ec:	0c f0       	brlt	.+2      	; 0x101f0 <posix_tests+0x14>
   101ee:	a8 c1       	rjmp	.+848    	; 0x10540 <posix_tests+0x364>
		return(0);

    ptr = argv[ind++];
   101f0:	fb 01       	movw	r30, r22
   101f2:	c0 80       	ld	r12, Z
   101f4:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   101f6:	c1 14       	cp	r12, r1
   101f8:	d1 04       	cpc	r13, r1
   101fa:	09 f4       	brne	.+2      	; 0x101fe <posix_tests+0x22>
   101fc:	a1 c1       	rjmp	.+834    	; 0x10540 <posix_tests+0x364>
   101fe:	2b 01       	movw	r4, r22
   10200:	3c 01       	movw	r6, r24
        return(0);

    if( MATCH(ptr,"posix") )
   10202:	6e eb       	ldi	r22, 0xBE	; 190
   10204:	7b e0       	ldi	r23, 0x0B	; 11
   10206:	c6 01       	movw	r24, r12
   10208:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1020c:	89 2b       	or	r24, r25
   1020e:	a1 f0       	breq	.+40     	; 0x10238 <posix_tests+0x5c>
    {
        ptr = argv[ind++];
   10210:	f2 01       	movw	r30, r4
   10212:	c2 80       	ldd	r12, Z+2	; 0x02
   10214:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10216:	c1 14       	cp	r12, r1
   10218:	d1 04       	cpc	r13, r1
   1021a:	21 f4       	brne	.+8      	; 0x10224 <posix_tests+0x48>
        {
            posix_help(1);
   1021c:	81 e0       	ldi	r24, 0x01	; 1
   1021e:	90 e0       	ldi	r25, 0x00	; 0
   10220:	6b dc       	rcall	.-1834   	; 0xfaf8 <posix_help>
   10222:	31 c1       	rjmp	.+610    	; 0x10486 <posix_tests+0x2aa>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10224:	6d e7       	ldi	r22, 0x7D	; 125
   10226:	76 e1       	ldi	r23, 0x16	; 22
   10228:	c6 01       	movw	r24, r12
   1022a:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1022e:	89 2b       	or	r24, r25
   10230:	a9 f7       	brne	.-22     	; 0x1021c <posix_tests+0x40>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10232:	02 e0       	ldi	r16, 0x02	; 2
   10234:	10 e0       	ldi	r17, 0x00	; 0
   10236:	02 c0       	rjmp	.+4      	; 0x1023c <posix_tests+0x60>

    ind = 0;
	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10238:	01 e0       	ldi	r16, 0x01	; 1
   1023a:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1023c:	58 01       	movw	r10, r16
   1023e:	ff ef       	ldi	r31, 0xFF	; 255
   10240:	af 1a       	sub	r10, r31
   10242:	bf 0a       	sbc	r11, r31
   10244:	93 01       	movw	r18, r6
   10246:	a5 01       	movw	r20, r10
   10248:	64 ec       	ldi	r22, 0xC4	; 196
   1024a:	7b e0       	ldi	r23, 0x0B	; 11
   1024c:	c6 01       	movw	r24, r12
   1024e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   10252:	89 2b       	or	r24, r25
   10254:	99 f1       	breq	.+102    	; 0x102bc <posix_tests+0xe0>
   10256:	78 01       	movw	r14, r16
   10258:	ee 0c       	add	r14, r14
   1025a:	ff 1c       	adc	r15, r15
   1025c:	e4 0c       	add	r14, r4
   1025e:	f5 1c       	adc	r15, r5
   10260:	57 01       	movw	r10, r14
   10262:	47 01       	movw	r8, r14
   10264:	68 01       	movw	r12, r16
   10266:	41 2c       	mov	r4, r1
   10268:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1026a:	c6 14       	cp	r12, r6
   1026c:	d7 04       	cpc	r13, r7
   1026e:	14 f5       	brge	.+68     	; 0x102b4 <posix_tests+0xd8>
        {
            if(MATCH(argv[i],"-p"))
   10270:	68 ec       	ldi	r22, 0xC8	; 200
   10272:	7b e0       	ldi	r23, 0x0B	; 11
   10274:	f4 01       	movw	r30, r8
   10276:	81 91       	ld	r24, Z+
   10278:	91 91       	ld	r25, Z+
   1027a:	4f 01       	movw	r8, r30
   1027c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   10280:	89 2b       	or	r24, r25
   10282:	19 f0       	breq	.+6      	; 0x1028a <posix_tests+0xae>
                page = 1;
   10284:	44 24       	eor	r4, r4
   10286:	43 94       	inc	r4
   10288:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1028a:	ff ef       	ldi	r31, 0xFF	; 255
   1028c:	cf 1a       	sub	r12, r31
   1028e:	df 0a       	sbc	r13, r31
   10290:	ec cf       	rjmp	.-40     	; 0x1026a <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10292:	68 ec       	ldi	r22, 0xC8	; 200
   10294:	7b e0       	ldi	r23, 0x0B	; 11
   10296:	f5 01       	movw	r30, r10
   10298:	81 91       	ld	r24, Z+
   1029a:	91 91       	ld	r25, Z+
   1029c:	5f 01       	movw	r10, r30
   1029e:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   102a2:	89 2b       	or	r24, r25
   102a4:	29 f4       	brne	.+10     	; 0x102b0 <posix_tests+0xd4>
                cat(argv[ind], page);
   102a6:	b2 01       	movw	r22, r4
   102a8:	f7 01       	movw	r30, r14
   102aa:	80 81       	ld	r24, Z
   102ac:	91 81       	ldd	r25, Z+1	; 0x01
   102ae:	5b dd       	rcall	.-1354   	; 0xfd66 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   102b0:	0f 5f       	subi	r16, 0xFF	; 255
   102b2:	1f 4f       	sbci	r17, 0xFF	; 255
   102b4:	06 15       	cp	r16, r6
   102b6:	17 05       	cpc	r17, r7
   102b8:	64 f3       	brlt	.-40     	; 0x10292 <posix_tests+0xb6>
   102ba:	e5 c0       	rjmp	.+458    	; 0x10486 <posix_tests+0x2aa>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   102bc:	48 01       	movw	r8, r16
   102be:	f2 e0       	ldi	r31, 0x02	; 2
   102c0:	8f 0e       	add	r8, r31
   102c2:	91 1c       	adc	r9, r1
   102c4:	93 01       	movw	r18, r6
   102c6:	a4 01       	movw	r20, r8
   102c8:	6b ec       	ldi	r22, 0xCB	; 203
   102ca:	7b e0       	ldi	r23, 0x0B	; 11
   102cc:	c6 01       	movw	r24, r12
   102ce:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   102d2:	89 2b       	or	r24, r25
   102d4:	59 f0       	breq	.+22     	; 0x102ec <posix_tests+0x110>
    {
        copy(argv[ind],argv[ind+1]);
   102d6:	f8 01       	movw	r30, r16
   102d8:	ee 0f       	add	r30, r30
   102da:	ff 1f       	adc	r31, r31
   102dc:	e4 0d       	add	r30, r4
   102de:	f5 1d       	adc	r31, r5
   102e0:	62 81       	ldd	r22, Z+2	; 0x02
   102e2:	73 81       	ldd	r23, Z+3	; 0x03
   102e4:	80 81       	ld	r24, Z
   102e6:	91 81       	ldd	r25, Z+1	; 0x01
   102e8:	28 dc       	rcall	.-1968   	; 0xfb3a <copy>
   102ea:	cd c0       	rjmp	.+410    	; 0x10486 <posix_tests+0x2aa>
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   102ec:	93 01       	movw	r18, r6
   102ee:	a5 01       	movw	r20, r10
   102f0:	60 ed       	ldi	r22, 0xD0	; 208
   102f2:	7b e0       	ldi	r23, 0x0B	; 11
   102f4:	c6 01       	movw	r24, r12
   102f6:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   102fa:	89 2b       	or	r24, r25
   102fc:	b9 f0       	breq	.+46     	; 0x1032c <posix_tests+0x150>
    {
        if ( chdir(argv[ind]) != 0)
   102fe:	78 01       	movw	r14, r16
   10300:	ee 0c       	add	r14, r14
   10302:	ff 1c       	adc	r15, r15
   10304:	e4 0c       	add	r14, r4
   10306:	f5 1c       	adc	r15, r5
   10308:	f7 01       	movw	r30, r14
   1030a:	80 81       	ld	r24, Z
   1030c:	91 81       	ldd	r25, Z+1	; 0x01
   1030e:	0e 94 2f 76 	call	0xec5e	; 0xec5e <chdir>
   10312:	89 2b       	or	r24, r25
   10314:	09 f4       	brne	.+2      	; 0x10318 <posix_tests+0x13c>
   10316:	b7 c0       	rjmp	.+366    	; 0x10486 <posix_tests+0x2aa>
            printf("chdir %s failed\n", argv[ind]);
   10318:	f7 01       	movw	r30, r14
   1031a:	80 81       	ld	r24, Z
   1031c:	91 81       	ldd	r25, Z+1	; 0x01
   1031e:	ed b7       	in	r30, 0x3d	; 61
   10320:	fe b7       	in	r31, 0x3e	; 62
   10322:	95 83       	std	Z+5, r25	; 0x05
   10324:	84 83       	std	Z+4, r24	; 0x04
   10326:	82 e7       	ldi	r24, 0x72	; 114
   10328:	9d e0       	ldi	r25, 0x0D	; 13
   1032a:	a7 c0       	rjmp	.+334    	; 0x1047a <posix_tests+0x29e>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   1032c:	68 ed       	ldi	r22, 0xD8	; 216
   1032e:	78 e0       	ldi	r23, 0x08	; 8
   10330:	c6 01       	movw	r24, r12
   10332:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   10336:	7c 01       	movw	r14, r24
   10338:	89 2b       	or	r24, r25
   1033a:	e1 f1       	breq	.+120    	; 0x103b4 <posix_tests+0x1d8>
   1033c:	78 01       	movw	r14, r16
   1033e:	ee 0c       	add	r14, r14
   10340:	ff 1c       	adc	r15, r15
   10342:	e4 0c       	add	r14, r4
   10344:	f5 1c       	adc	r15, r5
   10346:	c1 2c       	mov	r12, r1
   10348:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   1034a:	8a e5       	ldi	r24, 0x5A	; 90
   1034c:	9d e0       	ldi	r25, 0x0D	; 13
   1034e:	4c 01       	movw	r8, r24
   10350:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10352:	06 15       	cp	r16, r6
   10354:	17 05       	cpc	r17, r7
   10356:	24 f5       	brge	.+72     	; 0x103a0 <posix_tests+0x1c4>
        {
			if(!argv[i])
   10358:	f7 01       	movw	r30, r14
   1035a:	80 81       	ld	r24, Z
   1035c:	91 81       	ldd	r25, Z+1	; 0x01
   1035e:	00 97       	sbiw	r24, 0x00	; 0
   10360:	51 f4       	brne	.+20     	; 0x10376 <posix_tests+0x19a>
			{
				printf("ls: null argument # %d\n", i);
   10362:	ed b7       	in	r30, 0x3d	; 61
   10364:	fe b7       	in	r31, 0x3e	; 62
   10366:	15 83       	std	Z+5, r17	; 0x05
   10368:	04 83       	std	Z+4, r16	; 0x04
   1036a:	81 82       	std	Z+1, r8	; 0x01
   1036c:	92 82       	std	Z+2, r9	; 0x02
   1036e:	a3 82       	std	Z+3, r10	; 0x03
   10370:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
				continue;
   10374:	0f c0       	rjmp	.+30     	; 0x10394 <posix_tests+0x1b8>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   10376:	63 ed       	ldi	r22, 0xD3	; 211
   10378:	7b e0       	ldi	r23, 0x0B	; 11
   1037a:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1037e:	89 2b       	or	r24, r25
   10380:	49 f4       	brne	.+18     	; 0x10394 <posix_tests+0x1b8>
				continue;
			ls(argv[i],1);
   10382:	61 e0       	ldi	r22, 0x01	; 1
   10384:	70 e0       	ldi	r23, 0x00	; 0
   10386:	f7 01       	movw	r30, r14
   10388:	80 81       	ld	r24, Z
   1038a:	91 81       	ldd	r25, Z+1	; 0x01
   1038c:	13 de       	rcall	.-986    	; 0xffb4 <ls>
            ++args;
   1038e:	ff ef       	ldi	r31, 0xFF	; 255
   10390:	cf 1a       	sub	r12, r31
   10392:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10394:	0f 5f       	subi	r16, 0xFF	; 255
   10396:	1f 4f       	sbci	r17, 0xFF	; 255
   10398:	82 e0       	ldi	r24, 0x02	; 2
   1039a:	e8 0e       	add	r14, r24
   1039c:	f1 1c       	adc	r15, r1
   1039e:	d9 cf       	rjmp	.-78     	; 0x10352 <posix_tests+0x176>
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
				continue;
			ls(argv[i],1);
            ++args;
        }
        if(!args)
   103a0:	c1 14       	cp	r12, r1
   103a2:	d1 04       	cpc	r13, r1
   103a4:	09 f0       	breq	.+2      	; 0x103a8 <posix_tests+0x1cc>
   103a6:	6f c0       	rjmp	.+222    	; 0x10486 <posix_tests+0x2aa>
        {
            ls("",1);
   103a8:	61 e0       	ldi	r22, 0x01	; 1
   103aa:	70 e0       	ldi	r23, 0x00	; 0
   103ac:	8d e2       	ldi	r24, 0x2D	; 45
   103ae:	9c e0       	ldi	r25, 0x0C	; 12
   103b0:	01 de       	rcall	.-1022   	; 0xffb4 <ls>
   103b2:	69 c0       	rjmp	.+210    	; 0x10486 <posix_tests+0x2aa>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   103b4:	93 01       	movw	r18, r6
   103b6:	a5 01       	movw	r20, r10
   103b8:	66 ed       	ldi	r22, 0xD6	; 214
   103ba:	7b e0       	ldi	r23, 0x0B	; 11
   103bc:	c6 01       	movw	r24, r12
   103be:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   103c2:	89 2b       	or	r24, r25
   103c4:	69 f1       	breq	.+90     	; 0x10420 <posix_tests+0x244>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   103c6:	a6 14       	cp	r10, r6
   103c8:	b7 04       	cpc	r11, r7
   103ca:	7c f4       	brge	.+30     	; 0x103ea <posix_tests+0x20e>
        {
            mode = strtol(argv[ind+1],NULL,8);
   103cc:	aa 0c       	add	r10, r10
   103ce:	bb 1c       	adc	r11, r11
   103d0:	f2 01       	movw	r30, r4
   103d2:	ea 0d       	add	r30, r10
   103d4:	fb 1d       	adc	r31, r11
   103d6:	48 e0       	ldi	r20, 0x08	; 8
   103d8:	50 e0       	ldi	r21, 0x00	; 0
   103da:	60 e0       	ldi	r22, 0x00	; 0
   103dc:	70 e0       	ldi	r23, 0x00	; 0
   103de:	80 81       	ld	r24, Z
   103e0:	91 81       	ldd	r25, Z+1	; 0x01
   103e2:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <strtol>
   103e6:	ab 01       	movw	r20, r22
   103e8:	02 c0       	rjmp	.+4      	; 0x103ee <posix_tests+0x212>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   103ea:	4f ef       	ldi	r20, 0xFF	; 255
   103ec:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   103ee:	00 0f       	add	r16, r16
   103f0:	11 1f       	adc	r17, r17
   103f2:	40 0e       	add	r4, r16
   103f4:	51 1e       	adc	r5, r17
   103f6:	05 2e       	mov	r0, r21
   103f8:	00 0c       	add	r0, r0
   103fa:	66 0b       	sbc	r22, r22
   103fc:	77 0b       	sbc	r23, r23
   103fe:	f2 01       	movw	r30, r4
   10400:	80 81       	ld	r24, Z
   10402:	91 81       	ldd	r25, Z+1	; 0x01
   10404:	0e 94 9c 76 	call	0xed38	; 0xed38 <mkdir>
   10408:	89 2b       	or	r24, r25
   1040a:	e9 f1       	breq	.+122    	; 0x10486 <posix_tests+0x2aa>
        {
            printf("mkdir %s failed\n", argv[ind]);
   1040c:	f2 01       	movw	r30, r4
   1040e:	80 81       	ld	r24, Z
   10410:	91 81       	ldd	r25, Z+1	; 0x01
   10412:	ed b7       	in	r30, 0x3d	; 61
   10414:	fe b7       	in	r31, 0x3e	; 62
   10416:	95 83       	std	Z+5, r25	; 0x05
   10418:	84 83       	std	Z+4, r24	; 0x04
   1041a:	89 e4       	ldi	r24, 0x49	; 73
   1041c:	9d e0       	ldi	r25, 0x0D	; 13
   1041e:	b1 c0       	rjmp	.+354    	; 0x10582 <posix_tests+0x3a6>
            return(0);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10420:	93 01       	movw	r18, r6
   10422:	a5 01       	movw	r20, r10
   10424:	6c ed       	ldi	r22, 0xDC	; 220
   10426:	7b e0       	ldi	r23, 0x0B	; 11
   10428:	c6 01       	movw	r24, r12
   1042a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1042e:	89 2b       	or	r24, r25
   10430:	71 f0       	breq	.+28     	; 0x1044e <posix_tests+0x272>
    {
        setpage(atoi(argv[ind]));
   10432:	00 0f       	add	r16, r16
   10434:	11 1f       	adc	r17, r17
   10436:	f2 01       	movw	r30, r4
   10438:	e0 0f       	add	r30, r16
   1043a:	f1 1f       	adc	r31, r17
   1043c:	80 81       	ld	r24, Z
   1043e:	91 81       	ldd	r25, Z+1	; 0x01
   10440:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10444:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10448:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   1044c:	1c c0       	rjmp	.+56     	; 0x10486 <posix_tests+0x2aa>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1044e:	93 01       	movw	r18, r6
   10450:	a8 01       	movw	r20, r16
   10452:	61 ee       	ldi	r22, 0xE1	; 225
   10454:	7b e0       	ldi	r23, 0x0B	; 11
   10456:	c6 01       	movw	r24, r12
   10458:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1045c:	7c 01       	movw	r14, r24
   1045e:	89 2b       	or	r24, r25
   10460:	b1 f0       	breq	.+44     	; 0x1048e <posix_tests+0x2b2>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10462:	6e ef       	ldi	r22, 0xFE	; 254
   10464:	70 e0       	ldi	r23, 0x00	; 0
   10466:	ce 01       	movw	r24, r28
   10468:	08 96       	adiw	r24, 0x08	; 8
   1046a:	0e 94 77 76 	call	0xecee	; 0xecee <getcwd>
   1046e:	ed b7       	in	r30, 0x3d	; 61
   10470:	fe b7       	in	r31, 0x3e	; 62
   10472:	95 83       	std	Z+5, r25	; 0x05
   10474:	84 83       	std	Z+4, r24	; 0x04
   10476:	85 e4       	ldi	r24, 0x45	; 69
   10478:	9d e0       	ldi	r25, 0x0D	; 13
   1047a:	a0 e0       	ldi	r26, 0x00	; 0
   1047c:	81 83       	std	Z+1, r24	; 0x01
   1047e:	92 83       	std	Z+2, r25	; 0x02
   10480:	a3 83       	std	Z+3, r26	; 0x03
   10482:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(1);
   10486:	ee 24       	eor	r14, r14
   10488:	e3 94       	inc	r14
   1048a:	f1 2c       	mov	r15, r1
   1048c:	80 c0       	rjmp	.+256    	; 0x1058e <posix_tests+0x3b2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1048e:	93 01       	movw	r18, r6
   10490:	a4 01       	movw	r20, r8
   10492:	65 ee       	ldi	r22, 0xE5	; 229
   10494:	7b e0       	ldi	r23, 0x0B	; 11
   10496:	c6 01       	movw	r24, r12
   10498:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1049c:	89 2b       	or	r24, r25
   1049e:	51 f1       	breq	.+84     	; 0x104f4 <posix_tests+0x318>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   104a0:	00 0f       	add	r16, r16
   104a2:	11 1f       	adc	r17, r17
   104a4:	62 01       	movw	r12, r4
   104a6:	c0 0e       	add	r12, r16
   104a8:	d1 1e       	adc	r13, r17
   104aa:	0e 5f       	subi	r16, 0xFE	; 254
   104ac:	1f 4f       	sbci	r17, 0xFF	; 255
   104ae:	40 0e       	add	r4, r16
   104b0:	51 1e       	adc	r5, r17
   104b2:	f2 01       	movw	r30, r4
   104b4:	60 81       	ld	r22, Z
   104b6:	71 81       	ldd	r23, Z+1	; 0x01
   104b8:	f6 01       	movw	r30, r12
   104ba:	80 81       	ld	r24, Z
   104bc:	91 81       	ldd	r25, Z+1	; 0x01
   104be:	0e 94 ca 76 	call	0xed94	; 0xed94 <rename>
   104c2:	89 2b       	or	r24, r25
   104c4:	01 f3       	breq	.-64     	; 0x10486 <posix_tests+0x2aa>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   104c6:	f2 01       	movw	r30, r4
   104c8:	80 81       	ld	r24, Z
   104ca:	91 81       	ldd	r25, Z+1	; 0x01
   104cc:	ed b7       	in	r30, 0x3d	; 61
   104ce:	fe b7       	in	r31, 0x3e	; 62
   104d0:	97 83       	std	Z+7, r25	; 0x07
   104d2:	86 83       	std	Z+6, r24	; 0x06
   104d4:	f6 01       	movw	r30, r12
   104d6:	80 81       	ld	r24, Z
   104d8:	91 81       	ldd	r25, Z+1	; 0x01
   104da:	ed b7       	in	r30, 0x3d	; 61
   104dc:	fe b7       	in	r31, 0x3e	; 62
   104de:	95 83       	std	Z+5, r25	; 0x05
   104e0:	84 83       	std	Z+4, r24	; 0x04
   104e2:	84 e3       	ldi	r24, 0x34	; 52
   104e4:	9d e0       	ldi	r25, 0x0D	; 13
   104e6:	a0 e0       	ldi	r26, 0x00	; 0
   104e8:	81 83       	std	Z+1, r24	; 0x01
   104ea:	92 83       	std	Z+2, r25	; 0x02
   104ec:	a3 83       	std	Z+3, r26	; 0x03
   104ee:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            return(0);
   104f2:	4d c0       	rjmp	.+154    	; 0x1058e <posix_tests+0x3b2>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   104f4:	93 01       	movw	r18, r6
   104f6:	a5 01       	movw	r20, r10
   104f8:	6c ee       	ldi	r22, 0xEC	; 236
   104fa:	7b e0       	ldi	r23, 0x0B	; 11
   104fc:	c6 01       	movw	r24, r12
   104fe:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   10502:	7c 01       	movw	r14, r24
   10504:	89 2b       	or	r24, r25
   10506:	f9 f0       	breq	.+62     	; 0x10546 <posix_tests+0x36a>
    {
        if ( unlink(argv[ind]) != 0)
   10508:	78 01       	movw	r14, r16
   1050a:	ee 0c       	add	r14, r14
   1050c:	ff 1c       	adc	r15, r15
   1050e:	e4 0c       	add	r14, r4
   10510:	f5 1c       	adc	r15, r5
   10512:	f7 01       	movw	r30, r14
   10514:	80 81       	ld	r24, Z
   10516:	91 81       	ldd	r25, Z+1	; 0x01
   10518:	0e 94 e9 76 	call	0xedd2	; 0xedd2 <unlink>
   1051c:	89 2b       	or	r24, r25
   1051e:	09 f4       	brne	.+2      	; 0x10522 <posix_tests+0x346>
   10520:	b2 cf       	rjmp	.-156    	; 0x10486 <posix_tests+0x2aa>
        {
            printf("rm %s failed\n", argv[ind]);
   10522:	f7 01       	movw	r30, r14
   10524:	80 81       	ld	r24, Z
   10526:	91 81       	ldd	r25, Z+1	; 0x01
   10528:	ed b7       	in	r30, 0x3d	; 61
   1052a:	fe b7       	in	r31, 0x3e	; 62
   1052c:	95 83       	std	Z+5, r25	; 0x05
   1052e:	84 83       	std	Z+4, r24	; 0x04
   10530:	86 e2       	ldi	r24, 0x26	; 38
   10532:	9d e0       	ldi	r25, 0x0D	; 13
   10534:	a0 e0       	ldi	r26, 0x00	; 0
   10536:	81 83       	std	Z+1, r24	; 0x01
   10538:	92 83       	std	Z+2, r25	; 0x02
   1053a:	a3 83       	std	Z+3, r26	; 0x03
   1053c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            return(0);
   10540:	e1 2c       	mov	r14, r1
   10542:	f1 2c       	mov	r15, r1
   10544:	24 c0       	rjmp	.+72     	; 0x1058e <posix_tests+0x3b2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10546:	93 01       	movw	r18, r6
   10548:	a5 01       	movw	r20, r10
   1054a:	6f ee       	ldi	r22, 0xEF	; 239
   1054c:	7b e0       	ldi	r23, 0x0B	; 11
   1054e:	c6 01       	movw	r24, r12
   10550:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   10554:	89 2b       	or	r24, r25
   10556:	a1 f3       	breq	.-24     	; 0x10540 <posix_tests+0x364>
    {
        if ( rmdir(argv[ind]) != 0)
   10558:	00 0f       	add	r16, r16
   1055a:	11 1f       	adc	r17, r17
   1055c:	40 0e       	add	r4, r16
   1055e:	51 1e       	adc	r5, r17
   10560:	f2 01       	movw	r30, r4
   10562:	80 81       	ld	r24, Z
   10564:	91 81       	ldd	r25, Z+1	; 0x01
   10566:	0e 94 08 77 	call	0xee10	; 0xee10 <rmdir>
   1056a:	89 2b       	or	r24, r25
   1056c:	09 f4       	brne	.+2      	; 0x10570 <posix_tests+0x394>
   1056e:	8b cf       	rjmp	.-234    	; 0x10486 <posix_tests+0x2aa>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10570:	f2 01       	movw	r30, r4
   10572:	80 81       	ld	r24, Z
   10574:	91 81       	ldd	r25, Z+1	; 0x01
   10576:	ed b7       	in	r30, 0x3d	; 61
   10578:	fe b7       	in	r31, 0x3e	; 62
   1057a:	95 83       	std	Z+5, r25	; 0x05
   1057c:	84 83       	std	Z+4, r24	; 0x04
   1057e:	85 e1       	ldi	r24, 0x15	; 21
   10580:	9d e0       	ldi	r25, 0x0D	; 13
   10582:	a0 e0       	ldi	r26, 0x00	; 0
   10584:	81 83       	std	Z+1, r24	; 0x01
   10586:	92 83       	std	Z+2, r25	; 0x02
   10588:	a3 83       	std	Z+3, r26	; 0x03
   1058a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   1058e:	c7 01       	movw	r24, r14
   10590:	c9 5f       	subi	r28, 0xF9	; 249
   10592:	de 4f       	sbci	r29, 0xFE	; 254
   10594:	e0 e1       	ldi	r30, 0x10	; 16
   10596:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

0001059a <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   1059a:	00 d0       	rcall	.+0      	; 0x1059c <gpib_timer_init+0x2>
   1059c:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1059e:	61 e0       	ldi	r22, 0x01	; 1
   105a0:	70 e0       	ldi	r23, 0x00	; 0
   105a2:	89 e8       	ldi	r24, 0x89	; 137
   105a4:	94 e8       	ldi	r25, 0x84	; 132
   105a6:	0e 94 c6 32 	call	0x658c	; 0x658c <set_timers>
   105aa:	01 96       	adiw	r24, 0x01	; 1
   105ac:	51 f4       	brne	.+20     	; 0x105c2 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   105ae:	8f ea       	ldi	r24, 0xAF	; 175
   105b0:	9e e0       	ldi	r25, 0x0E	; 14
   105b2:	a0 e0       	ldi	r26, 0x00	; 0
   105b4:	ed b7       	in	r30, 0x3d	; 61
   105b6:	fe b7       	in	r31, 0x3e	; 62
   105b8:	81 83       	std	Z+1, r24	; 0x01
   105ba:	92 83       	std	Z+2, r25	; 0x02
   105bc:	a3 83       	std	Z+3, r26	; 0x03
   105be:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    gpib_timer_reset();
   105c2:	95 d1       	rcall	.+810    	; 0x108ee <gpib_timer_reset>
}
   105c4:	0f 90       	pop	r0
   105c6:	0f 90       	pop	r0
   105c8:	0f 90       	pop	r0
   105ca:	08 95       	ret

000105cc <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   105cc:	28 2f       	mov	r18, r24
   105ce:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   105d0:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   105d2:	88 0f       	add	r24, r24
        if(mask & 1)
   105d4:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   105d6:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   105d8:	26 95       	lsr	r18
   105da:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   105dc:	d1 f7       	brne	.-12     	; 0x105d2 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   105de:	08 95       	ret

000105e0 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   105e0:	f5 df       	rcall	.-22     	; 0x105cc <reverse_8bits>
   105e2:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   105e6:	0e 94 20 29 	call	0x5240	; 0x5240 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   105ea:	2a 9a       	sbi	0x05, 2	; 5
   105ec:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   105ee:	2a 98       	cbi	0x05, 2	; 5
   105f0:	22 9a       	sbi	0x04, 2	; 4
   105f2:	08 95       	ret

000105f4 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   105f4:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <_ppr_reg>
   105f8:	e9 cf       	rjmp	.-46     	; 0x105cc <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   105fa:	08 95       	ret

000105fc <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   105fc:	00 d0       	rcall	.+0      	; 0x105fe <ppr_init+0x2>
   105fe:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10600:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10604:	81 ff       	sbrs	r24, 1
   10606:	0a c0       	rjmp	.+20     	; 0x1061c <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10608:	8c e9       	ldi	r24, 0x9C	; 156
   1060a:	9e e0       	ldi	r25, 0x0E	; 14
   1060c:	a0 e0       	ldi	r26, 0x00	; 0
   1060e:	ed b7       	in	r30, 0x3d	; 61
   10610:	fe b7       	in	r31, 0x3e	; 62
   10612:	81 83       	std	Z+1, r24	; 0x01
   10614:	92 83       	std	Z+2, r25	; 0x02
   10616:	a3 83       	std	Z+3, r26	; 0x03
   10618:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    ppr_set(0);
   1061c:	80 e0       	ldi	r24, 0x00	; 0
   1061e:	e0 df       	rcall	.-64     	; 0x105e0 <ppr_set>
}
   10620:	0f 90       	pop	r0
   10622:	0f 90       	pop	r0
   10624:	0f 90       	pop	r0
   10626:	08 95       	ret

00010628 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10628:	21 e0       	ldi	r18, 0x01	; 1
   1062a:	30 e0       	ldi	r19, 0x00	; 0
   1062c:	01 c0       	rjmp	.+2      	; 0x10630 <ppr_bit_set+0x8>
   1062e:	22 0f       	add	r18, r18
   10630:	8a 95       	dec	r24
   10632:	ea f7       	brpl	.-6      	; 0x1062e <ppr_bit_set+0x6>
   10634:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <_ppr_reg>
   10638:	82 2b       	or	r24, r18
   1063a:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <_ppr_reg>
    ppr_set(_ppr_reg);
   1063e:	d0 cf       	rjmp	.-96     	; 0x105e0 <ppr_set>
   10640:	08 95       	ret

00010642 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10642:	21 e0       	ldi	r18, 0x01	; 1
   10644:	30 e0       	ldi	r19, 0x00	; 0
   10646:	01 c0       	rjmp	.+2      	; 0x1064a <ppr_bit_clr+0x8>
   10648:	22 0f       	add	r18, r18
   1064a:	8a 95       	dec	r24
   1064c:	ea f7       	brpl	.-6      	; 0x10648 <ppr_bit_clr+0x6>
   1064e:	20 95       	com	r18
   10650:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <_ppr_reg>
   10654:	82 23       	and	r24, r18
   10656:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <_ppr_reg>
    ppr_set(_ppr_reg);
   1065a:	c2 cf       	rjmp	.-124    	; 0x105e0 <ppr_set>
   1065c:	08 95       	ret

0001065e <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1065e:	0f 93       	push	r16
   10660:	1f 93       	push	r17
   10662:	cf 93       	push	r28
   10664:	df 93       	push	r29
   10666:	00 d0       	rcall	.+0      	; 0x10668 <dbf_open+0xa>
   10668:	00 d0       	rcall	.+0      	; 0x1066a <dbf_open+0xc>
   1066a:	1f 92       	push	r1
   1066c:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1066e:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <f_open>
   10672:	ec 01       	movw	r28, r24
    if(rc)
   10674:	89 2b       	or	r24, r25
   10676:	79 f0       	breq	.+30     	; 0x10696 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10678:	ed b7       	in	r30, 0x3d	; 61
   1067a:	fe b7       	in	r31, 0x3e	; 62
   1067c:	15 83       	std	Z+5, r17	; 0x05
   1067e:	04 83       	std	Z+4, r16	; 0x04
   10680:	8b e8       	ldi	r24, 0x8B	; 139
   10682:	9e e0       	ldi	r25, 0x0E	; 14
   10684:	a0 e0       	ldi	r26, 0x00	; 0
   10686:	81 83       	std	Z+1, r24	; 0x01
   10688:	92 83       	std	Z+2, r25	; 0x02
   1068a:	a3 83       	std	Z+3, r26	; 0x03
   1068c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        put_rc(rc);
   10690:	ce 01       	movw	r24, r28
   10692:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <put_rc>
        return (rc);
    }
    return(0);
}
   10696:	ce 01       	movw	r24, r28
   10698:	cd b7       	in	r28, 0x3d	; 61
   1069a:	de b7       	in	r29, 0x3e	; 62
   1069c:	25 96       	adiw	r28, 0x05	; 5
   1069e:	e4 e0       	ldi	r30, 0x04	; 4
   106a0:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

000106a4 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   106a4:	cf 93       	push	r28
   106a6:	df 93       	push	r29
   106a8:	00 d0       	rcall	.+0      	; 0x106aa <dbf_read+0x6>
   106aa:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   106ac:	0e 94 88 5a 	call	0xb510	; 0xb510 <f_read>
   106b0:	ec 01       	movw	r28, r24
    if(rc)
   106b2:	89 2b       	or	r24, r25
   106b4:	69 f0       	breq	.+26     	; 0x106d0 <dbf_read+0x2c>
    {
        printf("Read error: ");
   106b6:	8e e7       	ldi	r24, 0x7E	; 126
   106b8:	9e e0       	ldi	r25, 0x0E	; 14
   106ba:	a0 e0       	ldi	r26, 0x00	; 0
   106bc:	ed b7       	in	r30, 0x3d	; 61
   106be:	fe b7       	in	r31, 0x3e	; 62
   106c0:	81 83       	std	Z+1, r24	; 0x01
   106c2:	92 83       	std	Z+2, r25	; 0x02
   106c4:	a3 83       	std	Z+3, r26	; 0x03
   106c6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        put_rc(rc);
   106ca:	ce 01       	movw	r24, r28
   106cc:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <put_rc>
        return (rc);
    }
    return(0);
}
   106d0:	ce 01       	movw	r24, r28
   106d2:	cd b7       	in	r28, 0x3d	; 61
   106d4:	de b7       	in	r29, 0x3e	; 62
   106d6:	23 96       	adiw	r28, 0x03	; 3
   106d8:	e2 e0       	ldi	r30, 0x02	; 2
   106da:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000106de <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   106de:	cf 93       	push	r28
   106e0:	df 93       	push	r29
   106e2:	00 d0       	rcall	.+0      	; 0x106e4 <dbf_write+0x6>
   106e4:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   106e6:	0e 94 d3 5b 	call	0xb7a6	; 0xb7a6 <f_write>
   106ea:	ec 01       	movw	r28, r24
    if(rc)
   106ec:	89 2b       	or	r24, r25
   106ee:	69 f0       	breq	.+26     	; 0x1070a <dbf_write+0x2c>
    {
        printf("Write error: ");
   106f0:	80 e7       	ldi	r24, 0x70	; 112
   106f2:	9e e0       	ldi	r25, 0x0E	; 14
   106f4:	a0 e0       	ldi	r26, 0x00	; 0
   106f6:	ed b7       	in	r30, 0x3d	; 61
   106f8:	fe b7       	in	r31, 0x3e	; 62
   106fa:	81 83       	std	Z+1, r24	; 0x01
   106fc:	92 83       	std	Z+2, r25	; 0x02
   106fe:	a3 83       	std	Z+3, r26	; 0x03
   10700:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        put_rc(rc);
   10704:	ce 01       	movw	r24, r28
   10706:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <put_rc>
        return (rc);
    }
    return(0);
}
   1070a:	ce 01       	movw	r24, r28
   1070c:	cd b7       	in	r28, 0x3d	; 61
   1070e:	de b7       	in	r29, 0x3e	; 62
   10710:	23 96       	adiw	r28, 0x03	; 3
   10712:	e2 e0       	ldi	r30, 0x02	; 2
   10714:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00010718 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10718:	cf 93       	push	r28
   1071a:	df 93       	push	r29
   1071c:	00 d0       	rcall	.+0      	; 0x1071e <dbf_lseek+0x6>
   1071e:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10720:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <f_lseek>
   10724:	ec 01       	movw	r28, r24
    if(rc)
   10726:	89 2b       	or	r24, r25
   10728:	69 f0       	breq	.+26     	; 0x10744 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   1072a:	83 e6       	ldi	r24, 0x63	; 99
   1072c:	9e e0       	ldi	r25, 0x0E	; 14
   1072e:	a0 e0       	ldi	r26, 0x00	; 0
   10730:	ed b7       	in	r30, 0x3d	; 61
   10732:	fe b7       	in	r31, 0x3e	; 62
   10734:	81 83       	std	Z+1, r24	; 0x01
   10736:	92 83       	std	Z+2, r25	; 0x02
   10738:	a3 83       	std	Z+3, r26	; 0x03
   1073a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        put_rc(rc);
   1073e:	ce 01       	movw	r24, r28
   10740:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <put_rc>
        return (rc);
    }
    return(0);
}
   10744:	ce 01       	movw	r24, r28
   10746:	cd b7       	in	r28, 0x3d	; 61
   10748:	de b7       	in	r29, 0x3e	; 62
   1074a:	23 96       	adiw	r28, 0x03	; 3
   1074c:	e2 e0       	ldi	r30, 0x02	; 2
   1074e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00010752 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10752:	cf 93       	push	r28
   10754:	df 93       	push	r29
   10756:	00 d0       	rcall	.+0      	; 0x10758 <dbf_close+0x6>
   10758:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   1075a:	0e 94 ea 5d 	call	0xbbd4	; 0xbbd4 <f_close>
   1075e:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10760:	89 2b       	or	r24, r25
   10762:	69 f0       	breq	.+26     	; 0x1077e <dbf_close+0x2c>
    {
        printf("Close error: ");
   10764:	85 e5       	ldi	r24, 0x55	; 85
   10766:	9e e0       	ldi	r25, 0x0E	; 14
   10768:	a0 e0       	ldi	r26, 0x00	; 0
   1076a:	ed b7       	in	r30, 0x3d	; 61
   1076c:	fe b7       	in	r31, 0x3e	; 62
   1076e:	81 83       	std	Z+1, r24	; 0x01
   10770:	92 83       	std	Z+2, r25	; 0x02
   10772:	a3 83       	std	Z+3, r26	; 0x03
   10774:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        put_rc(rc);
   10778:	ce 01       	movw	r24, r28
   1077a:	0e 94 aa 6f 	call	0xdf54	; 0xdf54 <put_rc>
        return (rc);
    }
    return(0);
}
   1077e:	ce 01       	movw	r24, r28
   10780:	cd b7       	in	r28, 0x3d	; 61
   10782:	de b7       	in	r29, 0x3e	; 62
   10784:	23 96       	adiw	r28, 0x03	; 3
   10786:	e2 e0       	ldi	r30, 0x02	; 2
   10788:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0001078c <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1078c:	a6 e2       	ldi	r26, 0x26	; 38
   1078e:	b2 e0       	ldi	r27, 0x02	; 2
   10790:	ec ec       	ldi	r30, 0xCC	; 204
   10792:	f3 e8       	ldi	r31, 0x83	; 131
   10794:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   10798:	4a 01       	movw	r8, r20
   1079a:	5b 01       	movw	r10, r22
   1079c:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1079e:	cb 5d       	subi	r28, 0xDB	; 219
   107a0:	dd 4f       	sbci	r29, 0xFD	; 253
   107a2:	19 82       	std	Y+1, r1	; 0x01
   107a4:	18 82       	st	Y, r1
   107a6:	c5 52       	subi	r28, 0x25	; 37
   107a8:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   107aa:	43 e0       	ldi	r20, 0x03	; 3
   107ac:	bc 01       	movw	r22, r24
   107ae:	ce 01       	movw	r24, r28
   107b0:	01 96       	adiw	r24, 0x01	; 1
   107b2:	55 df       	rcall	.-342    	; 0x1065e <dbf_open>
    if( rc != FR_OK)
   107b4:	89 2b       	or	r24, r25
   107b6:	19 f0       	breq	.+6      	; 0x107be <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   107b8:	81 e1       	ldi	r24, 0x11	; 17
   107ba:	90 e0       	ldi	r25, 0x00	; 0
   107bc:	2f c0       	rjmp	.+94     	; 0x1081c <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   107be:	b5 01       	movw	r22, r10
   107c0:	a4 01       	movw	r20, r8
   107c2:	ce 01       	movw	r24, r28
   107c4:	01 96       	adiw	r24, 0x01	; 1
   107c6:	a8 df       	rcall	.-176    	; 0x10718 <dbf_lseek>
    if( rc != FR_OK)
   107c8:	89 2b       	or	r24, r25
   107ca:	59 f0       	breq	.+22     	; 0x107e2 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   107cc:	85 e0       	ldi	r24, 0x05	; 5
   107ce:	90 e0       	ldi	r25, 0x00	; 0
   107d0:	f7 01       	movw	r30, r14
   107d2:	91 83       	std	Z+1, r25	; 0x01
   107d4:	80 83       	st	Z, r24
        dbf_close(&fp);
   107d6:	ce 01       	movw	r24, r28
   107d8:	01 96       	adiw	r24, 0x01	; 1
   107da:	bb df       	rcall	.-138    	; 0x10752 <dbf_close>
        return( -1 );
   107dc:	8f ef       	ldi	r24, 0xFF	; 255
   107de:	9f ef       	ldi	r25, 0xFF	; 255
   107e0:	27 c0       	rjmp	.+78     	; 0x10830 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   107e2:	9e 01       	movw	r18, r28
   107e4:	2b 5d       	subi	r18, 0xDB	; 219
   107e6:	3d 4f       	sbci	r19, 0xFD	; 253
   107e8:	a8 01       	movw	r20, r16
   107ea:	b6 01       	movw	r22, r12
   107ec:	ce 01       	movw	r24, r28
   107ee:	01 96       	adiw	r24, 0x01	; 1
   107f0:	59 df       	rcall	.-334    	; 0x106a4 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   107f2:	89 2b       	or	r24, r25
   107f4:	49 f4       	brne	.+18     	; 0x10808 <dbf_open_read+0x7c>
   107f6:	cb 5d       	subi	r28, 0xDB	; 219
   107f8:	dd 4f       	sbci	r29, 0xFD	; 253
   107fa:	88 81       	ld	r24, Y
   107fc:	99 81       	ldd	r25, Y+1	; 0x01
   107fe:	c5 52       	subi	r28, 0x25	; 37
   10800:	d2 40       	sbci	r29, 0x02	; 2
   10802:	08 17       	cp	r16, r24
   10804:	19 07       	cpc	r17, r25
   10806:	19 f0       	breq	.+6      	; 0x1080e <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10808:	81 e0       	ldi	r24, 0x01	; 1
   1080a:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1080c:	e1 cf       	rjmp	.-62     	; 0x107d0 <dbf_open_read+0x44>
   1080e:	ce 01       	movw	r24, r28
   10810:	01 96       	adiw	r24, 0x01	; 1
   10812:	9f df       	rcall	.-194    	; 0x10752 <dbf_close>
    if( rc != FR_OK)
   10814:	89 2b       	or	r24, r25
   10816:	31 f0       	breq	.+12     	; 0x10824 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10818:	80 e1       	ldi	r24, 0x10	; 16
   1081a:	90 e0       	ldi	r25, 0x00	; 0
   1081c:	f7 01       	movw	r30, r14
   1081e:	91 83       	std	Z+1, r25	; 0x01
   10820:	80 83       	st	Z, r24
   10822:	dc cf       	rjmp	.-72     	; 0x107dc <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10824:	cb 5d       	subi	r28, 0xDB	; 219
   10826:	dd 4f       	sbci	r29, 0xFD	; 253
   10828:	88 81       	ld	r24, Y
   1082a:	99 81       	ldd	r25, Y+1	; 0x01
   1082c:	c5 52       	subi	r28, 0x25	; 37
   1082e:	d2 40       	sbci	r29, 0x02	; 2
}
   10830:	ca 5d       	subi	r28, 0xDA	; 218
   10832:	dd 4f       	sbci	r29, 0xFD	; 253
   10834:	ec e0       	ldi	r30, 0x0C	; 12
   10836:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

0001083a <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1083a:	a6 e2       	ldi	r26, 0x26	; 38
   1083c:	b2 e0       	ldi	r27, 0x02	; 2
   1083e:	e3 e2       	ldi	r30, 0x23	; 35
   10840:	f4 e8       	ldi	r31, 0x84	; 132
   10842:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   10846:	4a 01       	movw	r8, r20
   10848:	5b 01       	movw	r10, r22
   1084a:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1084c:	cb 5d       	subi	r28, 0xDB	; 219
   1084e:	dd 4f       	sbci	r29, 0xFD	; 253
   10850:	19 82       	std	Y+1, r1	; 0x01
   10852:	18 82       	st	Y, r1
   10854:	c5 52       	subi	r28, 0x25	; 37
   10856:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10858:	43 e0       	ldi	r20, 0x03	; 3
   1085a:	bc 01       	movw	r22, r24
   1085c:	ce 01       	movw	r24, r28
   1085e:	01 96       	adiw	r24, 0x01	; 1
   10860:	fe de       	rcall	.-516    	; 0x1065e <dbf_open>
    if( rc != FR_OK)
   10862:	89 2b       	or	r24, r25
   10864:	19 f0       	breq	.+6      	; 0x1086c <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10866:	82 e1       	ldi	r24, 0x12	; 18
   10868:	90 e0       	ldi	r25, 0x00	; 0
   1086a:	2f c0       	rjmp	.+94     	; 0x108ca <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1086c:	b5 01       	movw	r22, r10
   1086e:	a4 01       	movw	r20, r8
   10870:	ce 01       	movw	r24, r28
   10872:	01 96       	adiw	r24, 0x01	; 1
   10874:	51 df       	rcall	.-350    	; 0x10718 <dbf_lseek>
    if( rc != FR_OK)
   10876:	89 2b       	or	r24, r25
   10878:	59 f0       	breq	.+22     	; 0x10890 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   1087a:	86 e0       	ldi	r24, 0x06	; 6
   1087c:	90 e0       	ldi	r25, 0x00	; 0
   1087e:	f7 01       	movw	r30, r14
   10880:	91 83       	std	Z+1, r25	; 0x01
   10882:	80 83       	st	Z, r24
        dbf_close(&fp);
   10884:	ce 01       	movw	r24, r28
   10886:	01 96       	adiw	r24, 0x01	; 1
   10888:	64 df       	rcall	.-312    	; 0x10752 <dbf_close>
        return( -1 );
   1088a:	8f ef       	ldi	r24, 0xFF	; 255
   1088c:	9f ef       	ldi	r25, 0xFF	; 255
   1088e:	27 c0       	rjmp	.+78     	; 0x108de <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10890:	9e 01       	movw	r18, r28
   10892:	2b 5d       	subi	r18, 0xDB	; 219
   10894:	3d 4f       	sbci	r19, 0xFD	; 253
   10896:	a8 01       	movw	r20, r16
   10898:	b6 01       	movw	r22, r12
   1089a:	ce 01       	movw	r24, r28
   1089c:	01 96       	adiw	r24, 0x01	; 1
   1089e:	1f df       	rcall	.-450    	; 0x106de <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   108a0:	89 2b       	or	r24, r25
   108a2:	49 f4       	brne	.+18     	; 0x108b6 <dbf_open_write+0x7c>
   108a4:	cb 5d       	subi	r28, 0xDB	; 219
   108a6:	dd 4f       	sbci	r29, 0xFD	; 253
   108a8:	88 81       	ld	r24, Y
   108aa:	99 81       	ldd	r25, Y+1	; 0x01
   108ac:	c5 52       	subi	r28, 0x25	; 37
   108ae:	d2 40       	sbci	r29, 0x02	; 2
   108b0:	08 17       	cp	r16, r24
   108b2:	19 07       	cpc	r17, r25
   108b4:	19 f0       	breq	.+6      	; 0x108bc <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   108b6:	82 e0       	ldi	r24, 0x02	; 2
   108b8:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   108ba:	e1 cf       	rjmp	.-62     	; 0x1087e <dbf_open_write+0x44>
   108bc:	ce 01       	movw	r24, r28
   108be:	01 96       	adiw	r24, 0x01	; 1
   108c0:	48 df       	rcall	.-368    	; 0x10752 <dbf_close>
    if( rc != FR_OK)
   108c2:	89 2b       	or	r24, r25
   108c4:	31 f0       	breq	.+12     	; 0x108d2 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   108c6:	80 e1       	ldi	r24, 0x10	; 16
   108c8:	90 e0       	ldi	r25, 0x00	; 0
   108ca:	f7 01       	movw	r30, r14
   108cc:	91 83       	std	Z+1, r25	; 0x01
   108ce:	80 83       	st	Z, r24
   108d0:	dc cf       	rjmp	.-72     	; 0x1088a <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   108d2:	cb 5d       	subi	r28, 0xDB	; 219
   108d4:	dd 4f       	sbci	r29, 0xFD	; 253
   108d6:	88 81       	ld	r24, Y
   108d8:	99 81       	ldd	r25, Y+1	; 0x01
   108da:	c5 52       	subi	r28, 0x25	; 37
   108dc:	d2 40       	sbci	r29, 0x02	; 2
}
   108de:	ca 5d       	subi	r28, 0xDA	; 218
   108e0:	dd 4f       	sbci	r29, 0xFD	; 253
   108e2:	ec e0       	ldi	r30, 0x0C	; 12
   108e4:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

000108e8 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   108e8:	0c 94 86 33 	jmp	0x670c	; 0x670c <clock_elapsed_begin>
   108ec:	08 95       	ret

000108ee <gpib_timer_reset>:
   108ee:	f8 94       	cli
   108f0:	e6 ee       	ldi	r30, 0xE6	; 230
   108f2:	fd e1       	ldi	r31, 0x1D	; 29
   108f4:	10 82       	st	Z, r1
   108f6:	11 82       	std	Z+1, r1	; 0x01
   108f8:	12 82       	std	Z+2, r1	; 0x02
   108fa:	13 82       	std	Z+3, r1	; 0x03
   108fc:	14 82       	std	Z+4, r1	; 0x04
   108fe:	15 82       	std	Z+5, r1	; 0x05
   10900:	16 82       	std	Z+6, r1	; 0x06
   10902:	17 82       	std	Z+7, r1	; 0x07
   10904:	81 e0       	ldi	r24, 0x01	; 1
   10906:	80 87       	std	Z+8, r24	; 0x08
   10908:	78 94       	sei
   1090a:	08 95       	ret

0001090c <gpib_timer_elapsed_end>:
   1090c:	0c 94 8c 33 	jmp	0x6718	; 0x6718 <clock_elapsed_end>
   10910:	08 95       	ret

00010912 <gpib_timer_task>:
   10912:	f8 94       	cli
   10914:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <gpib_timer+0x4>
   10918:	90 91 eb 1d 	lds	r25, 0x1DEB	; 0x801deb <gpib_timer+0x5>
   1091c:	a0 91 ec 1d 	lds	r26, 0x1DEC	; 0x801dec <gpib_timer+0x6>
   10920:	b0 91 ed 1d 	lds	r27, 0x1DED	; 0x801ded <gpib_timer+0x7>
   10924:	89 2b       	or	r24, r25
   10926:	8a 2b       	or	r24, r26
   10928:	8b 2b       	or	r24, r27
   1092a:	a1 f0       	breq	.+40     	; 0x10954 <gpib_timer_task+0x42>
   1092c:	80 91 ea 1d 	lds	r24, 0x1DEA	; 0x801dea <gpib_timer+0x4>
   10930:	90 91 eb 1d 	lds	r25, 0x1DEB	; 0x801deb <gpib_timer+0x5>
   10934:	a0 91 ec 1d 	lds	r26, 0x1DEC	; 0x801dec <gpib_timer+0x6>
   10938:	b0 91 ed 1d 	lds	r27, 0x1DED	; 0x801ded <gpib_timer+0x7>
   1093c:	01 97       	sbiw	r24, 0x01	; 1
   1093e:	a1 09       	sbc	r26, r1
   10940:	b1 09       	sbc	r27, r1
   10942:	80 93 ea 1d 	sts	0x1DEA, r24	; 0x801dea <gpib_timer+0x4>
   10946:	90 93 eb 1d 	sts	0x1DEB, r25	; 0x801deb <gpib_timer+0x5>
   1094a:	a0 93 ec 1d 	sts	0x1DEC, r26	; 0x801dec <gpib_timer+0x6>
   1094e:	b0 93 ed 1d 	sts	0x1DED, r27	; 0x801ded <gpib_timer+0x7>
   10952:	03 c0       	rjmp	.+6      	; 0x1095a <gpib_timer_task+0x48>
   10954:	81 e0       	ldi	r24, 0x01	; 1
   10956:	80 93 ee 1d 	sts	0x1DEE, r24	; 0x801dee <gpib_timer+0x8>
   1095a:	78 94       	sei
   1095c:	08 95       	ret

0001095e <gpib_timeout_set>:
   1095e:	f8 94       	cli
   10960:	e6 ee       	ldi	r30, 0xE6	; 230
   10962:	fd e1       	ldi	r31, 0x1D	; 29
   10964:	64 83       	std	Z+4, r22	; 0x04
   10966:	75 83       	std	Z+5, r23	; 0x05
   10968:	86 83       	std	Z+6, r24	; 0x06
   1096a:	97 83       	std	Z+7, r25	; 0x07
   1096c:	10 86       	std	Z+8, r1	; 0x08
   1096e:	78 94       	sei
   10970:	08 95       	ret

00010972 <gpib_bus_init>:
   10972:	00 d0       	rcall	.+0      	; 0x10974 <gpib_bus_init+0x2>
   10974:	1f 92       	push	r1
   10976:	8f b7       	in	r24, 0x3f	; 63
   10978:	f8 94       	cli
   1097a:	10 92 66 1a 	sts	0x1A66, r1	; 0x801a66 <gpib_unread_f>
   1097e:	11 b8       	out	0x01, r1	; 1
   10980:	9f ef       	ldi	r25, 0xFF	; 255
   10982:	92 b9       	out	0x02, r25	; 2
   10984:	21 98       	cbi	0x04, 1	; 4
   10986:	29 9a       	sbi	0x05, 1	; 5
   10988:	52 98       	cbi	0x0a, 2	; 10
   1098a:	5a 9a       	sbi	0x0b, 2	; 11
   1098c:	53 98       	cbi	0x0a, 3	; 10
   1098e:	5b 9a       	sbi	0x0b, 3	; 11
   10990:	56 98       	cbi	0x0a, 6	; 10
   10992:	5e 9a       	sbi	0x0b, 6	; 11
   10994:	54 98       	cbi	0x0a, 4	; 10
   10996:	5c 9a       	sbi	0x0b, 4	; 11
   10998:	57 98       	cbi	0x0a, 7	; 10
   1099a:	5f 9a       	sbi	0x0b, 7	; 11
   1099c:	55 98       	cbi	0x0a, 5	; 10
   1099e:	5d 9a       	sbi	0x0b, 5	; 11
   109a0:	20 98       	cbi	0x04, 0	; 4
   109a2:	28 9a       	sbi	0x05, 0	; 5
   109a4:	45 98       	cbi	0x08, 5	; 8
   109a6:	3d 9a       	sbi	0x07, 5	; 7
   109a8:	44 9a       	sbi	0x08, 4	; 8
   109aa:	3c 9a       	sbi	0x07, 4	; 7
   109ac:	43 98       	cbi	0x08, 3	; 8
   109ae:	3b 9a       	sbi	0x07, 3	; 7
   109b0:	42 98       	cbi	0x08, 2	; 8
   109b2:	3a 9a       	sbi	0x07, 2	; 7
   109b4:	9d e0       	ldi	r25, 0x0D	; 13
   109b6:	9a 95       	dec	r25
   109b8:	f1 f7       	brne	.-4      	; 0x109b6 <gpib_bus_init+0x44>
   109ba:	00 00       	nop
   109bc:	8f bf       	out	0x3f, r24	; 63
   109be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109c2:	82 ff       	sbrs	r24, 2
   109c4:	0a c0       	rjmp	.+20     	; 0x109da <gpib_bus_init+0x68>
   109c6:	86 e2       	ldi	r24, 0x26	; 38
   109c8:	92 e1       	ldi	r25, 0x12	; 18
   109ca:	a0 e0       	ldi	r26, 0x00	; 0
   109cc:	ed b7       	in	r30, 0x3d	; 61
   109ce:	fe b7       	in	r31, 0x3e	; 62
   109d0:	81 83       	std	Z+1, r24	; 0x01
   109d2:	92 83       	std	Z+2, r25	; 0x02
   109d4:	a3 83       	std	Z+3, r26	; 0x03
   109d6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   109da:	0f 90       	pop	r0
   109dc:	0f 90       	pop	r0
   109de:	0f 90       	pop	r0
   109e0:	08 95       	ret

000109e2 <gpib_rx_init>:
   109e2:	9f b7       	in	r25, 0x3f	; 63
   109e4:	f8 94       	cli
   109e6:	11 b8       	out	0x01, r1	; 1
   109e8:	2f ef       	ldi	r18, 0xFF	; 255
   109ea:	22 b9       	out	0x02, r18	; 2
   109ec:	21 98       	cbi	0x04, 1	; 4
   109ee:	29 9a       	sbi	0x05, 1	; 5
   109f0:	20 98       	cbi	0x04, 0	; 4
   109f2:	28 9a       	sbi	0x05, 0	; 5
   109f4:	4e 9b       	sbis	0x09, 6	; 9
   109f6:	09 c0       	rjmp	.+18     	; 0x10a0a <gpib_rx_init+0x28>
   109f8:	81 11       	cpse	r24, r1
   109fa:	07 c0       	rjmp	.+14     	; 0x10a0a <gpib_rx_init+0x28>
   109fc:	52 98       	cbi	0x0a, 2	; 10
   109fe:	5a 9a       	sbi	0x0b, 2	; 11
   10a00:	53 98       	cbi	0x0a, 3	; 10
   10a02:	5b 9a       	sbi	0x0b, 3	; 11
   10a04:	42 98       	cbi	0x08, 2	; 8
   10a06:	3a 9a       	sbi	0x07, 2	; 7
   10a08:	08 c0       	rjmp	.+16     	; 0x10a1a <gpib_rx_init+0x38>
   10a0a:	42 98       	cbi	0x08, 2	; 8
   10a0c:	3a 9a       	sbi	0x07, 2	; 7
   10a0e:	5b 98       	cbi	0x0b, 3	; 11
   10a10:	53 9a       	sbi	0x0a, 3	; 10
   10a12:	5a 98       	cbi	0x0b, 2	; 11
   10a14:	52 9a       	sbi	0x0a, 2	; 10
   10a16:	88 23       	and	r24, r24
   10a18:	89 f3       	breq	.-30     	; 0x109fc <gpib_rx_init+0x1a>
   10a1a:	9f bf       	out	0x3f, r25	; 63
   10a1c:	08 95       	ret

00010a1e <gpib_tx_init>:
   10a1e:	9f b7       	in	r25, 0x3f	; 63
   10a20:	f8 94       	cli
   10a22:	11 b8       	out	0x01, r1	; 1
   10a24:	8f ef       	ldi	r24, 0xFF	; 255
   10a26:	82 b9       	out	0x02, r24	; 2
   10a28:	21 98       	cbi	0x04, 1	; 4
   10a2a:	29 9a       	sbi	0x05, 1	; 5
   10a2c:	52 98       	cbi	0x0a, 2	; 10
   10a2e:	5a 9a       	sbi	0x0b, 2	; 11
   10a30:	53 98       	cbi	0x0a, 3	; 10
   10a32:	5b 9a       	sbi	0x0b, 3	; 11
   10a34:	20 98       	cbi	0x04, 0	; 4
   10a36:	28 9a       	sbi	0x05, 0	; 5
   10a38:	42 9a       	sbi	0x08, 2	; 8
   10a3a:	3a 9a       	sbi	0x07, 2	; 7
   10a3c:	81 b9       	out	0x01, r24	; 1
   10a3e:	9f bf       	out	0x3f, r25	; 63
   10a40:	08 95       	ret

00010a42 <gpib_state_init>:
   10a42:	00 d0       	rcall	.+0      	; 0x10a44 <gpib_state_init+0x2>
   10a44:	1f 92       	push	r1
   10a46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a4a:	82 ff       	sbrs	r24, 2
   10a4c:	0a c0       	rjmp	.+20     	; 0x10a62 <gpib_state_init+0x20>
   10a4e:	83 e1       	ldi	r24, 0x13	; 19
   10a50:	92 e1       	ldi	r25, 0x12	; 18
   10a52:	a0 e0       	ldi	r26, 0x00	; 0
   10a54:	ed b7       	in	r30, 0x3d	; 61
   10a56:	fe b7       	in	r31, 0x3e	; 62
   10a58:	81 83       	std	Z+1, r24	; 0x01
   10a5a:	92 83       	std	Z+2, r25	; 0x02
   10a5c:	a3 83       	std	Z+3, r26	; 0x03
   10a5e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10a62:	cc dd       	rcall	.-1128   	; 0x105fc <ppr_init>
   10a64:	0e 94 d9 8f 	call	0x11fb2	; 0x11fb2 <listen_cleanup>
   10a68:	0e 94 ef 90 	call	0x121de	; 0x121de <talk_cleanup>
   10a6c:	10 92 f2 1f 	sts	0x1FF2, r1	; 0x801ff2 <spoll>
   10a70:	10 92 f5 1f 	sts	0x1FF5, r1	; 0x801ff5 <talking>
   10a74:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <talking_last>
   10a78:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <listening>
   10a7c:	10 92 f1 1f 	sts	0x1FF1, r1	; 0x801ff1 <listening_last>
   10a80:	10 92 f0 1d 	sts	0x1DF0, r1	; 0x801df0 <lastcmd+0x1>
   10a84:	10 92 ef 1d 	sts	0x1DEF, r1	; 0x801def <lastcmd>
   10a88:	10 92 f4 1f 	sts	0x1FF4, r1	; 0x801ff4 <current+0x1>
   10a8c:	10 92 f3 1f 	sts	0x1FF3, r1	; 0x801ff3 <current>
   10a90:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <secondary>
   10a94:	0f 90       	pop	r0
   10a96:	0f 90       	pop	r0
   10a98:	0f 90       	pop	r0
   10a9a:	08 95       	ret

00010a9c <gpib_enable_PPR>:
   10a9c:	cf 93       	push	r28
   10a9e:	df 93       	push	r29
   10aa0:	ad b7       	in	r26, 0x3d	; 61
   10aa2:	be b7       	in	r27, 0x3e	; 62
   10aa4:	17 97       	sbiw	r26, 0x07	; 7
   10aa6:	0f b6       	in	r0, 0x3f	; 63
   10aa8:	f8 94       	cli
   10aaa:	be bf       	out	0x3e, r27	; 62
   10aac:	0f be       	out	0x3f, r0	; 63
   10aae:	ad bf       	out	0x3d, r26	; 61
   10ab0:	ec 01       	movw	r28, r24
   10ab2:	88 30       	cpi	r24, 0x08	; 8
   10ab4:	91 05       	cpc	r25, r1
   10ab6:	68 f0       	brcs	.+26     	; 0x10ad2 <gpib_enable_PPR+0x36>
   10ab8:	ed b7       	in	r30, 0x3d	; 61
   10aba:	fe b7       	in	r31, 0x3e	; 62
   10abc:	95 83       	std	Z+5, r25	; 0x05
   10abe:	84 83       	std	Z+4, r24	; 0x04
   10ac0:	8d ee       	ldi	r24, 0xED	; 237
   10ac2:	91 e1       	ldi	r25, 0x11	; 17
   10ac4:	a0 e0       	ldi	r26, 0x00	; 0
   10ac6:	81 83       	std	Z+1, r24	; 0x01
   10ac8:	92 83       	std	Z+2, r25	; 0x02
   10aca:	a3 83       	std	Z+3, r26	; 0x03
   10acc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10ad0:	15 c0       	rjmp	.+42     	; 0x10afc <gpib_enable_PPR+0x60>
   10ad2:	aa dd       	rcall	.-1196   	; 0x10628 <ppr_bit_set>
   10ad4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ad8:	81 ff       	sbrs	r24, 1
   10ada:	10 c0       	rjmp	.+32     	; 0x10afc <gpib_enable_PPR+0x60>
   10adc:	8b dd       	rcall	.-1258   	; 0x105f4 <ppr_reg>
   10ade:	90 e0       	ldi	r25, 0x00	; 0
   10ae0:	ed b7       	in	r30, 0x3d	; 61
   10ae2:	fe b7       	in	r31, 0x3e	; 62
   10ae4:	97 83       	std	Z+7, r25	; 0x07
   10ae6:	86 83       	std	Z+6, r24	; 0x06
   10ae8:	d5 83       	std	Z+5, r29	; 0x05
   10aea:	c4 83       	std	Z+4, r28	; 0x04
   10aec:	82 ed       	ldi	r24, 0xD2	; 210
   10aee:	91 e1       	ldi	r25, 0x11	; 17
   10af0:	a0 e0       	ldi	r26, 0x00	; 0
   10af2:	81 83       	std	Z+1, r24	; 0x01
   10af4:	92 83       	std	Z+2, r25	; 0x02
   10af6:	a3 83       	std	Z+3, r26	; 0x03
   10af8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10afc:	cd b7       	in	r28, 0x3d	; 61
   10afe:	de b7       	in	r29, 0x3e	; 62
   10b00:	27 96       	adiw	r28, 0x07	; 7
   10b02:	e2 e0       	ldi	r30, 0x02	; 2
   10b04:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00010b08 <gpib_disable_PPR>:
   10b08:	cf 93       	push	r28
   10b0a:	df 93       	push	r29
   10b0c:	ad b7       	in	r26, 0x3d	; 61
   10b0e:	be b7       	in	r27, 0x3e	; 62
   10b10:	17 97       	sbiw	r26, 0x07	; 7
   10b12:	0f b6       	in	r0, 0x3f	; 63
   10b14:	f8 94       	cli
   10b16:	be bf       	out	0x3e, r27	; 62
   10b18:	0f be       	out	0x3f, r0	; 63
   10b1a:	ad bf       	out	0x3d, r26	; 61
   10b1c:	ec 01       	movw	r28, r24
   10b1e:	88 30       	cpi	r24, 0x08	; 8
   10b20:	91 05       	cpc	r25, r1
   10b22:	68 f0       	brcs	.+26     	; 0x10b3e <gpib_disable_PPR+0x36>
   10b24:	ed b7       	in	r30, 0x3d	; 61
   10b26:	fe b7       	in	r31, 0x3e	; 62
   10b28:	95 83       	std	Z+5, r25	; 0x05
   10b2a:	84 83       	std	Z+4, r24	; 0x04
   10b2c:	8b ea       	ldi	r24, 0xAB	; 171
   10b2e:	91 e1       	ldi	r25, 0x11	; 17
   10b30:	a0 e0       	ldi	r26, 0x00	; 0
   10b32:	81 83       	std	Z+1, r24	; 0x01
   10b34:	92 83       	std	Z+2, r25	; 0x02
   10b36:	a3 83       	std	Z+3, r26	; 0x03
   10b38:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10b3c:	15 c0       	rjmp	.+42     	; 0x10b68 <gpib_disable_PPR+0x60>
   10b3e:	81 dd       	rcall	.-1278   	; 0x10642 <ppr_bit_clr>
   10b40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b44:	81 ff       	sbrs	r24, 1
   10b46:	10 c0       	rjmp	.+32     	; 0x10b68 <gpib_disable_PPR+0x60>
   10b48:	55 dd       	rcall	.-1366   	; 0x105f4 <ppr_reg>
   10b4a:	90 e0       	ldi	r25, 0x00	; 0
   10b4c:	ed b7       	in	r30, 0x3d	; 61
   10b4e:	fe b7       	in	r31, 0x3e	; 62
   10b50:	97 83       	std	Z+7, r25	; 0x07
   10b52:	86 83       	std	Z+6, r24	; 0x06
   10b54:	d5 83       	std	Z+5, r29	; 0x05
   10b56:	c4 83       	std	Z+4, r28	; 0x04
   10b58:	80 e9       	ldi	r24, 0x90	; 144
   10b5a:	91 e1       	ldi	r25, 0x11	; 17
   10b5c:	a0 e0       	ldi	r26, 0x00	; 0
   10b5e:	81 83       	std	Z+1, r24	; 0x01
   10b60:	92 83       	std	Z+2, r25	; 0x02
   10b62:	a3 83       	std	Z+3, r26	; 0x03
   10b64:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10b68:	cd b7       	in	r28, 0x3d	; 61
   10b6a:	de b7       	in	r29, 0x3e	; 62
   10b6c:	27 96       	adiw	r28, 0x07	; 7
   10b6e:	e2 e0       	ldi	r30, 0x02	; 2
   10b70:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00010b74 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10b74:	cf 93       	push	r28
   10b76:	df 93       	push	r29
   10b78:	00 d0       	rcall	.+0      	; 0x10b7a <gpib_unread+0x6>
   10b7a:	1f 92       	push	r1
   10b7c:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10b7e:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <gpib_unread_f>
   10b82:	81 11       	cpse	r24, r1
   10b84:	08 c0       	rjmp	.+16     	; 0x10b96 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10b86:	d0 93 fa 1f 	sts	0x1FFA, r29	; 0x801ffa <gpib_unread_data+0x1>
   10b8a:	c0 93 f9 1f 	sts	0x1FF9, r28	; 0x801ff9 <gpib_unread_data>
        gpib_unread_f = 1;
   10b8e:	81 e0       	ldi	r24, 0x01	; 1
   10b90:	80 93 66 1a 	sts	0x1A66, r24	; 0x801a66 <gpib_unread_f>
   10b94:	12 c0       	rjmp	.+36     	; 0x10bba <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10b9e:	85 70       	andi	r24, 0x05	; 5
   10ba0:	99 27       	eor	r25, r25
   10ba2:	89 2b       	or	r24, r25
   10ba4:	51 f0       	breq	.+20     	; 0x10bba <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10ba6:	82 e6       	ldi	r24, 0x62	; 98
   10ba8:	91 e1       	ldi	r25, 0x11	; 17
   10baa:	a0 e0       	ldi	r26, 0x00	; 0
   10bac:	ed b7       	in	r30, 0x3d	; 61
   10bae:	fe b7       	in	r31, 0x3e	; 62
   10bb0:	81 83       	std	Z+1, r24	; 0x01
   10bb2:	92 83       	std	Z+2, r25	; 0x02
   10bb4:	a3 83       	std	Z+3, r26	; 0x03
   10bb6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
    return(ch);
}
   10bba:	ce 01       	movw	r24, r28
   10bbc:	cd b7       	in	r28, 0x3d	; 61
   10bbe:	de b7       	in	r29, 0x3e	; 62
   10bc0:	23 96       	adiw	r28, 0x03	; 3
   10bc2:	e2 e0       	ldi	r30, 0x02	; 2
   10bc4:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00010bc8 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10bc8:	11 b8       	out	0x01, r1	; 1
   10bca:	80 b1       	in	r24, 0x00	; 0
   10bcc:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10bce:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10bd0:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10bd2:	08 95       	ret

00010bd4 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10bd4:	4e 99       	sbic	0x09, 6	; 9
   10bd6:	03 c0       	rjmp	.+6      	; 0x10bde <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10bd8:	80 e0       	ldi	r24, 0x00	; 0
   10bda:	94 e0       	ldi	r25, 0x04	; 4
   10bdc:	02 c0       	rjmp	.+4      	; 0x10be2 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10bde:	80 e0       	ldi	r24, 0x00	; 0
   10be0:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10be2:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10be4:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10be6:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10be8:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10bea:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10bec:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10bee:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10bf0:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10bf2:	08 95       	ret

00010bf4 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10bf4:	19 99       	sbic	0x03, 1	; 3
   10bf6:	03 c0       	rjmp	.+6      	; 0x10bfe <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10bf8:	80 e0       	ldi	r24, 0x00	; 0
   10bfa:	90 e2       	ldi	r25, 0x20	; 32
   10bfc:	02 c0       	rjmp	.+4      	; 0x10c02 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10bfe:	80 e0       	ldi	r24, 0x00	; 0
   10c00:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10c02:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10c04:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10c06:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10c08:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10c0a:	08 95       	ret

00010c0c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10c0c:	2f 92       	push	r2
   10c0e:	3f 92       	push	r3
   10c10:	4f 92       	push	r4
   10c12:	6f 92       	push	r6
   10c14:	7f 92       	push	r7
   10c16:	8f 92       	push	r8
   10c18:	af 92       	push	r10
   10c1a:	bf 92       	push	r11
   10c1c:	cf 92       	push	r12
   10c1e:	df 92       	push	r13
   10c20:	ef 92       	push	r14
   10c22:	1f 93       	push	r17
   10c24:	cf 93       	push	r28
   10c26:	df 93       	push	r29
   10c28:	cd b7       	in	r28, 0x3d	; 61
   10c2a:	de b7       	in	r29, 0x3e	; 62
   10c2c:	2a 97       	sbiw	r28, 0x0a	; 10
   10c2e:	0f b6       	in	r0, 0x3f	; 63
   10c30:	f8 94       	cli
   10c32:	de bf       	out	0x3e, r29	; 62
   10c34:	0f be       	out	0x3f, r0	; 63
   10c36:	cd bf       	out	0x3d, r28	; 61
   10c38:	9a 87       	std	Y+10, r25	; 0x0a
   10c3a:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10c3c:	64 ef       	ldi	r22, 0xF4	; 244
   10c3e:	71 e0       	ldi	r23, 0x01	; 1
   10c40:	80 e0       	ldi	r24, 0x00	; 0
   10c42:	90 e0       	ldi	r25, 0x00	; 0
   10c44:	8c de       	rcall	.-744    	; 0x1095e <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10c46:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10c48:	8e e3       	ldi	r24, 0x3E	; 62
   10c4a:	90 e1       	ldi	r25, 0x10	; 16
   10c4c:	6c 01       	movw	r12, r24
   10c4e:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c50:	8d e6       	ldi	r24, 0x6D	; 109
   10c52:	90 e1       	ldi	r25, 0x10	; 16
   10c54:	3c 01       	movw	r6, r24
   10c56:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10c58:	aa 24       	eor	r10, r10
   10c5a:	a3 94       	inc	r10
   10c5c:	b1 2c       	mov	r11, r1
   10c5e:	85 ee       	ldi	r24, 0xE5	; 229
   10c60:	90 e1       	ldi	r25, 0x10	; 16
   10c62:	1c 01       	movw	r2, r24
   10c64:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c66:	89 ea       	ldi	r24, 0xA9	; 169
   10c68:	90 e1       	ldi	r25, 0x10	; 16
   10c6a:	9c 01       	movw	r18, r24
   10c6c:	40 e0       	ldi	r20, 0x00	; 0
   10c6e:	2e 83       	std	Y+6, r18	; 0x06
   10c70:	3f 83       	std	Y+7, r19	; 0x07
   10c72:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10c74:	80 e0       	ldi	r24, 0x00	; 0
   10c76:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   10c7a:	89 2b       	or	r24, r25
   10c7c:	69 f0       	breq	.+26     	; 0x10c98 <gpib_write_byte+0x8c>
		{
			if(debuglevel & GPIB_ERR)
   10c7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c82:	80 ff       	sbrs	r24, 0
   10c84:	f1 c0       	rjmp	.+482    	; 0x10e68 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10c86:	81 2f       	mov	r24, r17
   10c88:	90 e0       	ldi	r25, 0x00	; 0
   10c8a:	ed b7       	in	r30, 0x3d	; 61
   10c8c:	fe b7       	in	r31, 0x3e	; 62
   10c8e:	95 83       	std	Z+5, r25	; 0x05
   10c90:	84 83       	std	Z+4, r24	; 0x04
   10c92:	83 e4       	ldi	r24, 0x43	; 67
   10c94:	91 e1       	ldi	r25, 0x11	; 17
   10c96:	14 c0       	rjmp	.+40     	; 0x10cc0 <gpib_write_byte+0xb4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10c98:	4c 99       	sbic	0x09, 4	; 9
   10c9a:	19 c0       	rjmp	.+50     	; 0x10cce <gpib_write_byte+0xc2>
        {
            ch |= IFC_FLAG;
   10c9c:	29 85       	ldd	r18, Y+9	; 0x09
   10c9e:	3a 85       	ldd	r19, Y+10	; 0x0a
   10ca0:	30 61       	ori	r19, 0x10	; 16
   10ca2:	3a 87       	std	Y+10, r19	; 0x0a
            gpib_bus_init();
   10ca4:	29 87       	std	Y+9, r18	; 0x09
   10ca6:	65 de       	rcall	.-822    	; 0x10972 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10ca8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cac:	80 ff       	sbrs	r24, 0
   10cae:	dc c0       	rjmp	.+440    	; 0x10e68 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10cb0:	81 2f       	mov	r24, r17
   10cb2:	90 e0       	ldi	r25, 0x00	; 0
   10cb4:	ed b7       	in	r30, 0x3d	; 61
   10cb6:	fe b7       	in	r31, 0x3e	; 62
   10cb8:	95 83       	std	Z+5, r25	; 0x05
   10cba:	84 83       	std	Z+4, r24	; 0x04
   10cbc:	84 e2       	ldi	r24, 0x24	; 36
   10cbe:	91 e1       	ldi	r25, 0x11	; 17
   10cc0:	a0 e0       	ldi	r26, 0x00	; 0
   10cc2:	81 83       	std	Z+1, r24	; 0x01
   10cc4:	92 83       	std	Z+2, r25	; 0x02
   10cc6:	a3 83       	std	Z+3, r26	; 0x03
   10cc8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10ccc:	cd c0       	rjmp	.+410    	; 0x10e68 <gpib_write_byte+0x25c>
            break;
        }

        switch(tx_state)
   10cce:	81 2f       	mov	r24, r17
   10cd0:	90 e0       	ldi	r25, 0x00	; 0
   10cd2:	89 30       	cpi	r24, 0x09	; 9
   10cd4:	91 05       	cpc	r25, r1
   10cd6:	08 f0       	brcs	.+2      	; 0x10cda <gpib_write_byte+0xce>
   10cd8:	bf c0       	rjmp	.+382    	; 0x10e58 <gpib_write_byte+0x24c>
   10cda:	fc 01       	movw	r30, r24
   10cdc:	e3 54       	subi	r30, 0x43	; 67
   10cde:	ff 4f       	sbci	r31, 0xFF	; 255
   10ce0:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init(0);
   10ce4:	80 e0       	ldi	r24, 0x00	; 0
   10ce6:	9b de       	rcall	.-714    	; 0x10a1e <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10ce8:	21 98       	cbi	0x04, 1	; 4
   10cea:	29 9a       	sbi	0x05, 1	; 5
   10cec:	fd e0       	ldi	r31, 0x0D	; 13
   10cee:	fa 95       	dec	r31
   10cf0:	f1 f7       	brne	.-4      	; 0x10cee <gpib_write_byte+0xe2>
   10cf2:	00 00       	nop
   10cf4:	06 c0       	rjmp	.+12     	; 0x10d02 <gpib_write_byte+0xf6>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10cf6:	4a 9b       	sbis	0x09, 2	; 9
   10cf8:	02 c0       	rjmp	.+4      	; 0x10cfe <gpib_write_byte+0xf2>
   10cfa:	4b 99       	sbic	0x09, 3	; 9
   10cfc:	17 c0       	rjmp	.+46     	; 0x10d2c <gpib_write_byte+0x120>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10cfe:	4e 9b       	sbis	0x09, 6	; 9
   10d00:	07 c0       	rjmp	.+14     	; 0x10d10 <gpib_write_byte+0x104>
					{
						gpib_timeout_set(HTIMEOUT);
   10d02:	64 ef       	ldi	r22, 0xF4	; 244
   10d04:	71 e0       	ldi	r23, 0x01	; 1
   10d06:	80 e0       	ldi	r24, 0x00	; 0
   10d08:	90 e0       	ldi	r25, 0x00	; 0
   10d0a:	29 de       	rcall	.-942    	; 0x1095e <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10d0c:	12 e0       	ldi	r17, 0x02	; 2
   10d0e:	b2 cf       	rjmp	.-156    	; 0x10c74 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10d10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d14:	80 ff       	sbrs	r24, 0
   10d16:	ae cf       	rjmp	.-164    	; 0x10c74 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10d18:	ed b7       	in	r30, 0x3d	; 61
   10d1a:	fe b7       	in	r31, 0x3e	; 62
   10d1c:	b5 82       	std	Z+5, r11	; 0x05
   10d1e:	a4 82       	std	Z+4, r10	; 0x04
   10d20:	21 82       	std	Z+1, r2	; 0x01
   10d22:	32 82       	std	Z+2, r3	; 0x02
   10d24:	43 82       	std	Z+3, r4	; 0x03
   10d26:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10d2a:	a4 cf       	rjmp	.-184    	; 0x10c74 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d2c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10d30:	88 23       	and	r24, r24
   10d32:	09 f4       	brne	.+2      	; 0x10d36 <gpib_write_byte+0x12a>
   10d34:	9f cf       	rjmp	.-194    	; 0x10c74 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d3e:	85 70       	andi	r24, 0x05	; 5
   10d40:	99 27       	eor	r25, r25
   10d42:	89 2b       	or	r24, r25
   10d44:	c1 f1       	breq	.+112    	; 0x10db6 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d46:	2e 81       	ldd	r18, Y+6	; 0x06
   10d48:	3f 81       	ldd	r19, Y+7	; 0x07
   10d4a:	48 85       	ldd	r20, Y+8	; 0x08
   10d4c:	ed b7       	in	r30, 0x3d	; 61
   10d4e:	fe b7       	in	r31, 0x3e	; 62
   10d50:	21 83       	std	Z+1, r18	; 0x01
   10d52:	32 83       	std	Z+2, r19	; 0x02
   10d54:	43 83       	std	Z+3, r20	; 0x03
   10d56:	2d c0       	rjmp	.+90     	; 0x10db2 <gpib_write_byte+0x1a6>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10d58:	89 85       	ldd	r24, Y+9	; 0x09
   10d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d5c:	90 ff       	sbrs	r25, 0
   10d5e:	03 c0       	rjmp	.+6      	; 0x10d66 <gpib_write_byte+0x15a>
                    GPIB_IO_LOW(EOI);
   10d60:	28 98       	cbi	0x05, 0	; 5
   10d62:	20 9a       	sbi	0x04, 0	; 4
   10d64:	02 c0       	rjmp	.+4      	; 0x10d6a <gpib_write_byte+0x15e>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10d66:	20 98       	cbi	0x04, 0	; 4
   10d68:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10d6a:	8f ef       	ldi	r24, 0xFF	; 255
   10d6c:	81 b9       	out	0x01, r24	; 1
   10d6e:	89 85       	ldd	r24, Y+9	; 0x09
   10d70:	80 95       	com	r24
   10d72:	82 b9       	out	0x02, r24	; 2
   10d74:	9d e0       	ldi	r25, 0x0D	; 13
   10d76:	9a 95       	dec	r25
   10d78:	f1 f7       	brne	.-4      	; 0x10d76 <gpib_write_byte+0x16a>
   10d7a:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10d7c:	64 ef       	ldi	r22, 0xF4	; 244
   10d7e:	71 e0       	ldi	r23, 0x01	; 1
   10d80:	80 e0       	ldi	r24, 0x00	; 0
   10d82:	90 e0       	ldi	r25, 0x00	; 0
   10d84:	ec dd       	rcall	.-1064   	; 0x1095e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10d86:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10d88:	75 cf       	rjmp	.-278    	; 0x10c74 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10d8a:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10d8c:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d8e:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10d92:	88 23       	and	r24, r24
   10d94:	09 f4       	brne	.+2      	; 0x10d98 <gpib_write_byte+0x18c>
   10d96:	6e cf       	rjmp	.-292    	; 0x10c74 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d9c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10da0:	85 70       	andi	r24, 0x05	; 5
   10da2:	99 27       	eor	r25, r25
   10da4:	89 2b       	or	r24, r25
   10da6:	39 f0       	breq	.+14     	; 0x10db6 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10da8:	ed b7       	in	r30, 0x3d	; 61
   10daa:	fe b7       	in	r31, 0x3e	; 62
   10dac:	61 82       	std	Z+1, r6	; 0x01
   10dae:	72 82       	std	Z+2, r7	; 0x02
   10db0:	83 82       	std	Z+3, r8	; 0x03
   10db2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10db6:	29 85       	ldd	r18, Y+9	; 0x09
   10db8:	3a 85       	ldd	r19, Y+10	; 0x0a
   10dba:	30 64       	ori	r19, 0x40	; 64
   10dbc:	3a 87       	std	Y+10, r19	; 0x0a
   10dbe:	29 87       	std	Y+9, r18	; 0x09
   10dc0:	51 c0       	rjmp	.+162    	; 0x10e64 <gpib_write_byte+0x258>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10dc2:	29 98       	cbi	0x05, 1	; 5
   10dc4:	21 9a       	sbi	0x04, 1	; 4
   10dc6:	3d e0       	ldi	r19, 0x0D	; 13
   10dc8:	3a 95       	dec	r19
   10dca:	f1 f7       	brne	.-4      	; 0x10dc8 <gpib_write_byte+0x1bc>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10dcc:	00 00       	nop
   10dce:	64 ef       	ldi	r22, 0xF4	; 244
   10dd0:	71 e0       	ldi	r23, 0x01	; 1
   10dd2:	80 e0       	ldi	r24, 0x00	; 0
   10dd4:	90 e0       	ldi	r25, 0x00	; 0
   10dd6:	c3 dd       	rcall	.-1146   	; 0x1095e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10dd8:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10dda:	4c cf       	rjmp	.-360    	; 0x10c74 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10ddc:	4b 99       	sbic	0x09, 3	; 9
   10dde:	40 c0       	rjmp	.+128    	; 0x10e60 <gpib_write_byte+0x254>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10de0:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10de4:	88 23       	and	r24, r24
   10de6:	09 f4       	brne	.+2      	; 0x10dea <gpib_write_byte+0x1de>
   10de8:	45 cf       	rjmp	.-374    	; 0x10c74 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10dea:	89 85       	ldd	r24, Y+9	; 0x09
   10dec:	9a 85       	ldd	r25, Y+10	; 0x0a
   10dee:	90 64       	ori	r25, 0x40	; 64
   10df0:	9a 87       	std	Y+10, r25	; 0x0a
   10df2:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10df4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10df8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10dfc:	85 70       	andi	r24, 0x05	; 5
   10dfe:	99 27       	eor	r25, r25
   10e00:	89 2b       	or	r24, r25
   10e02:	81 f1       	breq	.+96     	; 0x10e64 <gpib_write_byte+0x258>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e04:	ed b7       	in	r30, 0x3d	; 61
   10e06:	fe b7       	in	r31, 0x3e	; 62
   10e08:	c1 82       	std	Z+1, r12	; 0x01
   10e0a:	d2 82       	std	Z+2, r13	; 0x02
   10e0c:	e3 82       	std	Z+3, r14	; 0x03
   10e0e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10e12:	28 c0       	rjmp	.+80     	; 0x10e64 <gpib_write_byte+0x258>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10e14:	21 98       	cbi	0x04, 1	; 4
   10e16:	29 9a       	sbi	0x05, 1	; 5
   10e18:	fd e0       	ldi	r31, 0x0D	; 13
   10e1a:	fa 95       	dec	r31
   10e1c:	f1 f7       	brne	.-4      	; 0x10e1a <gpib_write_byte+0x20e>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10e1e:	00 00       	nop
   10e20:	64 ef       	ldi	r22, 0xF4	; 244
   10e22:	71 e0       	ldi	r23, 0x01	; 1
   10e24:	80 e0       	ldi	r24, 0x00	; 0
   10e26:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10e28:	9a dd       	rcall	.-1228   	; 0x1095e <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10e2a:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10e2c:	23 cf       	rjmp	.-442    	; 0x10c74 <gpib_write_byte+0x68>
   10e2e:	81 e0       	ldi	r24, 0x01	; 1
   10e30:	d8 dd       	rcall	.-1104   	; 0x109e2 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e36:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e3a:	85 70       	andi	r24, 0x05	; 5
   10e3c:	99 27       	eor	r25, r25
   10e3e:	89 2b       	or	r24, r25
   10e40:	99 f0       	breq	.+38     	; 0x10e68 <gpib_write_byte+0x25c>
                    printf("<GPIB TX TIMEOUT>\n");
   10e42:	8b e2       	ldi	r24, 0x2B	; 43
   10e44:	90 e1       	ldi	r25, 0x10	; 16
   10e46:	a0 e0       	ldi	r26, 0x00	; 0
   10e48:	ed b7       	in	r30, 0x3d	; 61
   10e4a:	fe b7       	in	r31, 0x3e	; 62
   10e4c:	81 83       	std	Z+1, r24	; 0x01
   10e4e:	92 83       	std	Z+2, r25	; 0x02
   10e50:	a3 83       	std	Z+3, r26	; 0x03
   10e52:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   10e56:	08 c0       	rjmp	.+16     	; 0x10e68 <gpib_write_byte+0x25c>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10e58:	19 30       	cpi	r17, 0x09	; 9
   10e5a:	09 f0       	breq	.+2      	; 0x10e5e <gpib_write_byte+0x252>
   10e5c:	0b cf       	rjmp	.-490    	; 0x10c74 <gpib_write_byte+0x68>
   10e5e:	04 c0       	rjmp	.+8      	; 0x10e68 <gpib_write_byte+0x25c>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10e60:	16 e0       	ldi	r17, 0x06	; 6
   10e62:	08 cf       	rjmp	.-496    	; 0x10c74 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10e64:	18 e0       	ldi	r17, 0x08	; 8
   10e66:	06 cf       	rjmp	.-500    	; 0x10c74 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10e68:	89 85       	ldd	r24, Y+9	; 0x09
   10e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e6c:	2a 96       	adiw	r28, 0x0a	; 10
   10e6e:	0f b6       	in	r0, 0x3f	; 63
   10e70:	f8 94       	cli
   10e72:	de bf       	out	0x3e, r29	; 62
   10e74:	0f be       	out	0x3f, r0	; 63
   10e76:	cd bf       	out	0x3d, r28	; 61
   10e78:	df 91       	pop	r29
   10e7a:	cf 91       	pop	r28
   10e7c:	1f 91       	pop	r17
   10e7e:	ef 90       	pop	r14
   10e80:	df 90       	pop	r13
   10e82:	cf 90       	pop	r12
   10e84:	bf 90       	pop	r11
   10e86:	af 90       	pop	r10
   10e88:	8f 90       	pop	r8
   10e8a:	7f 90       	pop	r7
   10e8c:	6f 90       	pop	r6
   10e8e:	4f 90       	pop	r4
   10e90:	3f 90       	pop	r3
   10e92:	2f 90       	pop	r2
   10e94:	08 95       	ret

00010e96 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10e96:	cf 93       	push	r28
   10e98:	df 93       	push	r29
   10e9a:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10e9c:	89 2b       	or	r24, r25
   10e9e:	21 f4       	brne	.+8      	; 0x10ea8 <gpib_decode_header+0x12>
        fo = stdout;
   10ea0:	c0 91 c8 1d 	lds	r28, 0x1DC8	; 0x801dc8 <__iob+0x2>
   10ea4:	d0 91 c9 1d 	lds	r29, 0x1DC9	; 0x801dc9 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10ea8:	be 01       	movw	r22, r28
   10eaa:	81 e0       	ldi	r24, 0x01	; 1
   10eac:	9c e0       	ldi	r25, 0x0C	; 12
   10eae:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10eb2:	be 01       	movw	r22, r28
   10eb4:	8e e2       	ldi	r24, 0x2E	; 46
   10eb6:	9c e0       	ldi	r25, 0x0C	; 12
   10eb8:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10ebc:	be 01       	movw	r22, r28
   10ebe:	8e e3       	ldi	r24, 0x3E	; 62
   10ec0:	9c e0       	ldi	r25, 0x0C	; 12
   10ec2:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10ec6:	be 01       	movw	r22, r28
   10ec8:	82 e5       	ldi	r24, 0x52	; 82
   10eca:	9c e0       	ldi	r25, 0x0C	; 12
   10ecc:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10ed0:	be 01       	movw	r22, r28
   10ed2:	85 e7       	ldi	r24, 0x75	; 117
   10ed4:	9c e0       	ldi	r25, 0x0C	; 12
   10ed6:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"     A = ATN\n");
   10eda:	be 01       	movw	r22, r28
   10edc:	8f e9       	ldi	r24, 0x9F	; 159
   10ede:	9c e0       	ldi	r25, 0x0C	; 12
   10ee0:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"      E = EOI\n");
   10ee4:	be 01       	movw	r22, r28
   10ee6:	8d ea       	ldi	r24, 0xAD	; 173
   10ee8:	9c e0       	ldi	r25, 0x0C	; 12
   10eea:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10eee:	be 01       	movw	r22, r28
   10ef0:	8c eb       	ldi	r24, 0xBC	; 188
   10ef2:	9c e0       	ldi	r25, 0x0C	; 12
   10ef4:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"        R = REN\n");
   10ef8:	be 01       	movw	r22, r28
   10efa:	8c ec       	ldi	r24, 0xCC	; 204
   10efc:	9c e0       	ldi	r25, 0x0C	; 12
   10efe:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"         I = IFC\n");
   10f02:	be 01       	movw	r22, r28
   10f04:	8d ed       	ldi	r24, 0xDD	; 221
   10f06:	9c e0       	ldi	r25, 0x0C	; 12
   10f08:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10f0c:	be 01       	movw	r22, r28
   10f0e:	8f ee       	ldi	r24, 0xEF	; 239
   10f10:	9c e0       	ldi	r25, 0x0C	; 12
   10f12:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10f16:	be 01       	movw	r22, r28
   10f18:	81 e1       	ldi	r24, 0x11	; 17
   10f1a:	9d e0       	ldi	r25, 0x0D	; 13
   10f1c:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10f20:	be 01       	movw	r22, r28
   10f22:	89 e2       	ldi	r24, 0x29	; 41
   10f24:	9d e0       	ldi	r25, 0x0D	; 13
   10f26:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10f2a:	be 01       	movw	r22, r28
   10f2c:	84 e4       	ldi	r24, 0x44	; 68
   10f2e:	9d e0       	ldi	r25, 0x0D	; 13
   10f30:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <fputs>
}
   10f34:	df 91       	pop	r29
   10f36:	cf 91       	pop	r28
   10f38:	08 95       	ret

00010f3a <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10f3a:	a9 e8       	ldi	r26, 0x89	; 137
   10f3c:	b0 e0       	ldi	r27, 0x00	; 0
   10f3e:	e3 ea       	ldi	r30, 0xA3	; 163
   10f40:	f7 e8       	ldi	r31, 0x87	; 135
   10f42:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   10f46:	8c 01       	movw	r16, r24
   10f48:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10f4a:	1a 86       	std	Y+10, r1	; 0x0a
   10f4c:	4c 01       	movw	r8, r24
   10f4e:	88 24       	eor	r8, r8
   10f50:	44 e0       	ldi	r20, 0x04	; 4
   10f52:	94 22       	and	r9, r20
   10f54:	ce 01       	movw	r24, r28
   10f56:	0a 96       	adiw	r24, 0x0a	; 10
   10f58:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10f5a:	62 30       	cpi	r22, 0x02	; 2
   10f5c:	71 05       	cpc	r23, r1
   10f5e:	e8 f4       	brcc	.+58     	; 0x10f9a <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f60:	81 14       	cp	r8, r1
   10f62:	91 04       	cpc	r9, r1
   10f64:	29 f4       	brne	.+10     	; 0x10f70 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10f66:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f68:	90 ee       	ldi	r25, 0xE0	; 224
   10f6a:	90 0f       	add	r25, r16
   10f6c:	9f 35       	cpi	r25, 0x5F	; 95
   10f6e:	08 f0       	brcs	.+2      	; 0x10f72 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10f70:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10f72:	90 e0       	ldi	r25, 0x00	; 0
   10f74:	ed b7       	in	r30, 0x3d	; 61
   10f76:	fe b7       	in	r31, 0x3e	; 62
   10f78:	91 87       	std	Z+9, r25	; 0x09
   10f7a:	80 87       	std	Z+8, r24	; 0x08
   10f7c:	c8 01       	movw	r24, r16
   10f7e:	99 27       	eor	r25, r25
   10f80:	97 83       	std	Z+7, r25	; 0x07
   10f82:	86 83       	std	Z+6, r24	; 0x06
   10f84:	8a ee       	ldi	r24, 0xEA	; 234
   10f86:	9f e0       	ldi	r25, 0x0F	; 15
   10f88:	a0 e0       	ldi	r26, 0x00	; 0
   10f8a:	83 83       	std	Z+3, r24	; 0x03
   10f8c:	94 83       	std	Z+4, r25	; 0x04
   10f8e:	a5 83       	std	Z+5, r26	; 0x05
   10f90:	f2 82       	std	Z+2, r15	; 0x02
   10f92:	e1 82       	std	Z+1, r14	; 0x01
   10f94:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
   10f98:	0c c0       	rjmp	.+24     	; 0x10fb2 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10f9a:	84 ee       	ldi	r24, 0xE4	; 228
   10f9c:	9f e0       	ldi	r25, 0x0F	; 15
   10f9e:	a0 e0       	ldi	r26, 0x00	; 0
   10fa0:	ed b7       	in	r30, 0x3d	; 61
   10fa2:	fe b7       	in	r31, 0x3e	; 62
   10fa4:	83 83       	std	Z+3, r24	; 0x03
   10fa6:	94 83       	std	Z+4, r25	; 0x04
   10fa8:	a5 83       	std	Z+5, r26	; 0x05
   10faa:	f2 82       	std	Z+2, r15	; 0x02
   10fac:	e1 82       	std	Z+1, r14	; 0x01
   10fae:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
    }

    tmp = str + strlen(str);
   10fb2:	f7 01       	movw	r30, r14
   10fb4:	01 90       	ld	r0, Z+
   10fb6:	00 20       	and	r0, r0
   10fb8:	e9 f7       	brne	.-6      	; 0x10fb4 <gpib_trace_display+0x7a>
   10fba:	31 97       	sbiw	r30, 0x01	; 1
   10fbc:	cf 01       	movw	r24, r30
   10fbe:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10fc0:	81 14       	cp	r8, r1
   10fc2:	91 04       	cpc	r9, r1
   10fc4:	11 f0       	breq	.+4      	; 0x10fca <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10fc6:	21 e4       	ldi	r18, 0x41	; 65
   10fc8:	01 c0       	rjmp	.+2      	; 0x10fcc <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10fca:	2d e2       	ldi	r18, 0x2D	; 45
   10fcc:	20 83       	st	Z, r18
   10fce:	dc 01       	movw	r26, r24
   10fd0:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10fd2:	10 ff       	sbrs	r17, 0
   10fd4:	02 c0       	rjmp	.+4      	; 0x10fda <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10fd6:	25 e4       	ldi	r18, 0x45	; 69
   10fd8:	01 c0       	rjmp	.+2      	; 0x10fdc <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10fda:	2d e2       	ldi	r18, 0x2D	; 45
   10fdc:	fc 01       	movw	r30, r24
   10fde:	20 83       	st	Z, r18
   10fe0:	fd 01       	movw	r30, r26
   10fe2:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10fe4:	11 ff       	sbrs	r17, 1
   10fe6:	02 c0       	rjmp	.+4      	; 0x10fec <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10fe8:	83 e5       	ldi	r24, 0x53	; 83
   10fea:	01 c0       	rjmp	.+2      	; 0x10fee <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10fec:	8d e2       	ldi	r24, 0x2D	; 45
   10fee:	8c 93       	st	X, r24
   10ff0:	df 01       	movw	r26, r30
   10ff2:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10ff4:	13 ff       	sbrs	r17, 3
   10ff6:	02 c0       	rjmp	.+4      	; 0x10ffc <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10ff8:	82 e5       	ldi	r24, 0x52	; 82
   10ffa:	01 c0       	rjmp	.+2      	; 0x10ffe <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10ffc:	8d e2       	ldi	r24, 0x2D	; 45
   10ffe:	80 83       	st	Z, r24
   11000:	fd 01       	movw	r30, r26
   11002:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11004:	14 ff       	sbrs	r17, 4
   11006:	02 c0       	rjmp	.+4      	; 0x1100c <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   11008:	89 e4       	ldi	r24, 0x49	; 73
   1100a:	01 c0       	rjmp	.+2      	; 0x1100e <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   1100c:	8d e2       	ldi	r24, 0x2D	; 45
   1100e:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11010:	a1 14       	cp	r10, r1
   11012:	b1 04       	cpc	r11, r1
   11014:	d1 f4       	brne	.+52     	; 0x1104a <gpib_trace_display+0x110>
   11016:	df 01       	movw	r26, r30
   11018:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   1101a:	15 ff       	sbrs	r17, 5
   1101c:	02 c0       	rjmp	.+4      	; 0x11022 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   1101e:	80 e5       	ldi	r24, 0x50	; 80
   11020:	01 c0       	rjmp	.+2      	; 0x11024 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11022:	8d e2       	ldi	r24, 0x2D	; 45
   11024:	80 83       	st	Z, r24
   11026:	fd 01       	movw	r30, r26
   11028:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1102a:	16 ff       	sbrs	r17, 6
   1102c:	02 c0       	rjmp	.+4      	; 0x11032 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   1102e:	84 e5       	ldi	r24, 0x54	; 84
   11030:	01 c0       	rjmp	.+2      	; 0x11034 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11032:	8d e2       	ldi	r24, 0x2D	; 45
   11034:	8c 93       	st	X, r24
   11036:	cf 01       	movw	r24, r30
   11038:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1103a:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1103c:	17 ff       	sbrs	r17, 7
   1103e:	02 c0       	rjmp	.+4      	; 0x11044 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11040:	82 e4       	ldi	r24, 0x42	; 66
   11042:	01 c0       	rjmp	.+2      	; 0x11046 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11044:	8d e2       	ldi	r24, 0x2D	; 45
   11046:	80 83       	st	Z, r24
   11048:	08 c0       	rjmp	.+16     	; 0x1105a <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   1104a:	8d e2       	ldi	r24, 0x2D	; 45
   1104c:	80 83       	st	Z, r24
        *tmp++ = '-';
   1104e:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11050:	6f 01       	movw	r12, r30
   11052:	43 e0       	ldi	r20, 0x03	; 3
   11054:	c4 0e       	add	r12, r20
   11056:	d1 1c       	adc	r13, r1
   11058:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1105a:	f6 01       	movw	r30, r12
   1105c:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1105e:	f1 e0       	ldi	r31, 0x01	; 1
   11060:	af 1a       	sub	r10, r31
   11062:	b1 08       	sbc	r11, r1
   11064:	42 e0       	ldi	r20, 0x02	; 2
   11066:	a4 16       	cp	r10, r20
   11068:	b1 04       	cpc	r11, r1
   1106a:	f0 f4       	brcc	.+60     	; 0x110a8 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1106c:	15 ff       	sbrs	r17, 5
   1106e:	03 c0       	rjmp	.+6      	; 0x11076 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11070:	61 e6       	ldi	r22, 0x61	; 97
   11072:	7d e0       	ldi	r23, 0x0D	; 13
   11074:	02 c0       	rjmp	.+4      	; 0x1107a <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11076:	65 e6       	ldi	r22, 0x65	; 101
   11078:	74 e0       	ldi	r23, 0x04	; 4
   1107a:	c7 01       	movw	r24, r14
   1107c:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
        if(status & NRFD_FLAG)
   11080:	16 ff       	sbrs	r17, 6
   11082:	03 c0       	rjmp	.+6      	; 0x1108a <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11084:	67 e6       	ldi	r22, 0x67	; 103
   11086:	7d e0       	ldi	r23, 0x0D	; 13
   11088:	02 c0       	rjmp	.+4      	; 0x1108e <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1108a:	65 e6       	ldi	r22, 0x65	; 101
   1108c:	74 e0       	ldi	r23, 0x04	; 4
   1108e:	c7 01       	movw	r24, r14
   11090:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
        if(status & NDAC_FLAG)
   11094:	17 ff       	sbrs	r17, 7
   11096:	03 c0       	rjmp	.+6      	; 0x1109e <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11098:	6d e6       	ldi	r22, 0x6D	; 109
   1109a:	7d e0       	ldi	r23, 0x0D	; 13
   1109c:	02 c0       	rjmp	.+4      	; 0x110a2 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1109e:	65 e6       	ldi	r22, 0x65	; 101
   110a0:	74 e0       	ldi	r23, 0x04	; 4
   110a2:	c7 01       	movw	r24, r14
   110a4:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
    }

    if( (status & ATN_FLAG) )
   110a8:	81 14       	cp	r8, r1
   110aa:	91 04       	cpc	r9, r1
   110ac:	09 f4       	brne	.+2      	; 0x110b0 <gpib_trace_display+0x176>
   110ae:	5a c0       	rjmp	.+180    	; 0x11164 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   110b0:	c8 01       	movw	r24, r16
   110b2:	8f 77       	andi	r24, 0x7F	; 127
   110b4:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   110b6:	9c 01       	movw	r18, r24
   110b8:	20 52       	subi	r18, 0x20	; 32
   110ba:	31 09       	sbc	r19, r1
   110bc:	2f 31       	cpi	r18, 0x1F	; 31
   110be:	31 05       	cpc	r19, r1
   110c0:	48 f4       	brcc	.+18     	; 0x110d4 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   110c2:	0f 71       	andi	r16, 0x1F	; 31
   110c4:	11 27       	eor	r17, r17
   110c6:	ed b7       	in	r30, 0x3d	; 61
   110c8:	fe b7       	in	r31, 0x3e	; 62
   110ca:	17 83       	std	Z+7, r17	; 0x07
   110cc:	06 83       	std	Z+6, r16	; 0x06
   110ce:	89 ed       	ldi	r24, 0xD9	; 217
   110d0:	9f e0       	ldi	r25, 0x0F	; 15
   110d2:	0e c0       	rjmp	.+28     	; 0x110f0 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   110d4:	9c 01       	movw	r18, r24
   110d6:	20 54       	subi	r18, 0x40	; 64
   110d8:	31 09       	sbc	r19, r1
   110da:	2f 30       	cpi	r18, 0x0F	; 15
   110dc:	31 05       	cpc	r19, r1
   110de:	88 f4       	brcc	.+34     	; 0x11102 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   110e0:	0f 71       	andi	r16, 0x1F	; 31
   110e2:	11 27       	eor	r17, r17
   110e4:	ed b7       	in	r30, 0x3d	; 61
   110e6:	fe b7       	in	r31, 0x3e	; 62
   110e8:	17 83       	std	Z+7, r17	; 0x07
   110ea:	06 83       	std	Z+6, r16	; 0x06
   110ec:	8e ec       	ldi	r24, 0xCE	; 206
   110ee:	9f e0       	ldi	r25, 0x0F	; 15
   110f0:	a0 e0       	ldi	r26, 0x00	; 0
   110f2:	83 83       	std	Z+3, r24	; 0x03
   110f4:	94 83       	std	Z+4, r25	; 0x04
   110f6:	a5 83       	std	Z+5, r26	; 0x05
   110f8:	d2 82       	std	Z+2, r13	; 0x02
   110fa:	c1 82       	std	Z+1, r12	; 0x01
   110fc:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
   11100:	31 c0       	rjmp	.+98     	; 0x11164 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11102:	9c 01       	movw	r18, r24
   11104:	20 56       	subi	r18, 0x60	; 96
   11106:	31 09       	sbc	r19, r1
   11108:	20 31       	cpi	r18, 0x10	; 16
   1110a:	31 05       	cpc	r19, r1
   1110c:	28 f0       	brcs	.+10     	; 0x11118 <gpib_trace_display+0x1de>
   1110e:	e2 e8       	ldi	r30, 0x82	; 130
   11110:	f1 e0       	ldi	r31, 0x01	; 1
   11112:	00 e0       	ldi	r16, 0x00	; 0
   11114:	10 e0       	ldi	r17, 0x00	; 0
   11116:	0b c0       	rjmp	.+22     	; 0x1112e <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11118:	0f 71       	andi	r16, 0x1F	; 31
   1111a:	11 27       	eor	r17, r17
   1111c:	ed b7       	in	r30, 0x3d	; 61
   1111e:	fe b7       	in	r31, 0x3e	; 62
   11120:	17 83       	std	Z+7, r17	; 0x07
   11122:	06 83       	std	Z+6, r16	; 0x06
   11124:	83 ec       	ldi	r24, 0xC3	; 195
   11126:	9f e0       	ldi	r25, 0x0F	; 15
   11128:	e3 cf       	rjmp	.-58     	; 0x110f0 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1112a:	0f 5f       	subi	r16, 0xFF	; 255
   1112c:	1f 4f       	sbci	r17, 0xFF	; 255
   1112e:	20 81       	ld	r18, Z
   11130:	31 81       	ldd	r19, Z+1	; 0x01
   11132:	2f 3f       	cpi	r18, 0xFF	; 255
   11134:	4f ef       	ldi	r20, 0xFF	; 255
   11136:	34 07       	cpc	r19, r20
   11138:	a9 f0       	breq	.+42     	; 0x11164 <gpib_trace_display+0x22a>
   1113a:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1113c:	82 17       	cp	r24, r18
   1113e:	93 07       	cpc	r25, r19
   11140:	a1 f7       	brne	.-24     	; 0x1112a <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11142:	69 e6       	ldi	r22, 0x69	; 105
   11144:	74 e0       	ldi	r23, 0x04	; 4
   11146:	c6 01       	movw	r24, r12
   11148:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1114c:	f8 01       	movw	r30, r16
   1114e:	ee 0f       	add	r30, r30
   11150:	ff 1f       	adc	r31, r31
   11152:	ee 0f       	add	r30, r30
   11154:	ff 1f       	adc	r31, r31
   11156:	ee 57       	subi	r30, 0x7E	; 126
   11158:	fe 4f       	sbci	r31, 0xFE	; 254
   1115a:	62 81       	ldd	r22, Z+2	; 0x02
   1115c:	73 81       	ldd	r23, Z+3	; 0x03
   1115e:	c6 01       	movw	r24, r12
   11160:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11164:	20 91 67 1a 	lds	r18, 0x1A67	; 0x801a67 <gpib_log_fp>
   11168:	30 91 68 1a 	lds	r19, 0x1A68	; 0x801a68 <gpib_log_fp+0x1>
   1116c:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
   11170:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
   11174:	23 2b       	or	r18, r19
   11176:	21 f4       	brne	.+8      	; 0x11180 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11178:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <gpib_log_fp+0x1>
   1117c:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11180:	20 91 67 1a 	lds	r18, 0x1A67	; 0x801a67 <gpib_log_fp>
   11184:	30 91 68 1a 	lds	r19, 0x1A68	; 0x801a68 <gpib_log_fp+0x1>
   11188:	82 17       	cp	r24, r18
   1118a:	93 07       	cpc	r25, r19
   1118c:	19 f0       	breq	.+6      	; 0x11194 <gpib_trace_display+0x25a>
        puts(str);
   1118e:	c7 01       	movw	r24, r14
   11190:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11194:	ed b7       	in	r30, 0x3d	; 61
   11196:	fe b7       	in	r31, 0x3e	; 62
   11198:	f6 82       	std	Z+6, r15	; 0x06
   1119a:	e5 82       	std	Z+5, r14	; 0x05
   1119c:	83 e7       	ldi	r24, 0x73	; 115
   1119e:	9d e0       	ldi	r25, 0x0D	; 13
   111a0:	94 83       	std	Z+4, r25	; 0x04
   111a2:	83 83       	std	Z+3, r24	; 0x03
   111a4:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <gpib_log_fp>
   111a8:	90 91 68 1a 	lds	r25, 0x1A68	; 0x801a68 <gpib_log_fp+0x1>
   111ac:	92 83       	std	Z+2, r25	; 0x02
   111ae:	81 83       	std	Z+1, r24	; 0x01
   111b0:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <fprintf>
}
   111b4:	c7 57       	subi	r28, 0x77	; 119
   111b6:	df 4f       	sbci	r29, 0xFF	; 255
   111b8:	ec e0       	ldi	r30, 0x0C	; 12
   111ba:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

000111be <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   111be:	af 92       	push	r10
   111c0:	bf 92       	push	r11
   111c2:	cf 92       	push	r12
   111c4:	df 92       	push	r13
   111c6:	ef 92       	push	r14
   111c8:	ff 92       	push	r15
   111ca:	0f 93       	push	r16
   111cc:	1f 93       	push	r17
   111ce:	cf 93       	push	r28
   111d0:	00 d0       	rcall	.+0      	; 0x111d2 <gpib_read_byte+0x14>
   111d2:	00 d0       	rcall	.+0      	; 0x111d4 <gpib_read_byte+0x16>
   111d4:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   111d6:	20 91 66 1a 	lds	r18, 0x1A66	; 0x801a66 <gpib_unread_f>
   111da:	22 23       	and	r18, r18
   111dc:	39 f0       	breq	.+14     	; 0x111ec <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   111de:	10 92 66 1a 	sts	0x1A66, r1	; 0x801a66 <gpib_unread_f>
        return(gpib_unread_data);
   111e2:	80 91 f9 1f 	lds	r24, 0x1FF9	; 0x801ff9 <gpib_unread_data>
   111e6:	90 91 fa 1f 	lds	r25, 0x1FFA	; 0x801ffa <gpib_unread_data+0x1>
   111ea:	f2 c0       	rjmp	.+484    	; 0x113d0 <gpib_read_byte+0x212>
   111ec:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   111ee:	81 e0       	ldi	r24, 0x01	; 1
   111f0:	f8 db       	rcall	.-2064   	; 0x109e2 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   111f2:	c1 14       	cp	r12, r1
   111f4:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   111f6:	51 f0       	breq	.+20     	; 0x1120c <gpib_read_byte+0x4e>
   111f8:	ed dc       	rcall	.-1574   	; 0x10bd4 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   111fa:	7c 01       	movw	r14, r24
   111fc:	fb dc       	rcall	.-1546   	; 0x10bf4 <gpib_handshake_pin_read>
   111fe:	e8 2a       	or	r14, r24
   11200:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11202:	62 e0       	ldi	r22, 0x02	; 2
   11204:	70 e0       	ldi	r23, 0x00	; 0
   11206:	c7 01       	movw	r24, r14
   11208:	98 de       	rcall	.-720    	; 0x10f3a <gpib_trace_display>
   1120a:	02 c0       	rjmp	.+4      	; 0x11210 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   1120c:	e1 2c       	mov	r14, r1
   1120e:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11210:	64 ef       	ldi	r22, 0xF4	; 244
   11212:	71 e0       	ldi	r23, 0x01	; 1
   11214:	80 e0       	ldi	r24, 0x00	; 0
   11216:	90 e0       	ldi	r25, 0x00	; 0
   11218:	a2 db       	rcall	.-2236   	; 0x1095e <gpib_timeout_set>
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   1121a:	00 e0       	ldi	r16, 0x00	; 0
   1121c:	10 e0       	ldi	r17, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
   1121e:	c0 e0       	ldi	r28, 0x00	; 0
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11220:	0e 94 63 df 	call	0x1bec6	; 0x1bec6 <gpib_user_task>

        if(uart_keyhit(0))
   11224:	80 e0       	ldi	r24, 0x00	; 0
   11226:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   1122a:	89 2b       	or	r24, r25
   1122c:	99 f0       	breq	.+38     	; 0x11254 <gpib_read_byte+0x96>
		{
			if(debuglevel & GPIB_ERR)
   1122e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11232:	80 ff       	sbrs	r24, 0
   11234:	ab c0       	rjmp	.+342    	; 0x1138c <gpib_read_byte+0x1ce>
				printf("gpib_read_byte: state=%d\n", rx_state);
   11236:	8c 2f       	mov	r24, r28
   11238:	90 e0       	ldi	r25, 0x00	; 0
   1123a:	ed b7       	in	r30, 0x3d	; 61
   1123c:	fe b7       	in	r31, 0x3e	; 62
   1123e:	95 83       	std	Z+5, r25	; 0x05
   11240:	84 83       	std	Z+4, r24	; 0x04
   11242:	81 e1       	ldi	r24, 0x11	; 17
   11244:	90 e1       	ldi	r25, 0x10	; 16
   11246:	a0 e0       	ldi	r26, 0x00	; 0
   11248:	81 83       	std	Z+1, r24	; 0x01
   1124a:	92 83       	std	Z+2, r25	; 0x02
   1124c:	a3 83       	std	Z+3, r26	; 0x03
   1124e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11252:	9c c0       	rjmp	.+312    	; 0x1138c <gpib_read_byte+0x1ce>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11254:	4c 99       	sbic	0x09, 4	; 9
   11256:	15 c0       	rjmp	.+42     	; 0x11282 <gpib_read_byte+0xc4>
        {
            ch |= IFC_FLAG;
   11258:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1125a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1125e:	80 ff       	sbrs	r24, 0
   11260:	0e c0       	rjmp	.+28     	; 0x1127e <gpib_read_byte+0xc0>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11262:	8c 2f       	mov	r24, r28
   11264:	90 e0       	ldi	r25, 0x00	; 0
   11266:	ed b7       	in	r30, 0x3d	; 61
   11268:	fe b7       	in	r31, 0x3e	; 62
   1126a:	95 83       	std	Z+5, r25	; 0x05
   1126c:	84 83       	std	Z+4, r24	; 0x04
   1126e:	83 ef       	ldi	r24, 0xF3	; 243
   11270:	9f e0       	ldi	r25, 0x0F	; 15
   11272:	a0 e0       	ldi	r26, 0x00	; 0
   11274:	81 83       	std	Z+1, r24	; 0x01
   11276:	92 83       	std	Z+2, r25	; 0x02
   11278:	a3 83       	std	Z+3, r26	; 0x03
   1127a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            gpib_bus_init();
   1127e:	79 db       	rcall	.-2318   	; 0x10972 <gpib_bus_init>
   11280:	85 c0       	rjmp	.+266    	; 0x1138c <gpib_read_byte+0x1ce>
            break;
        }

        switch(rx_state)
   11282:	c2 30       	cpi	r28, 0x02	; 2
   11284:	31 f1       	breq	.+76     	; 0x112d2 <gpib_read_byte+0x114>
   11286:	28 f4       	brcc	.+10     	; 0x11292 <gpib_read_byte+0xd4>
   11288:	cc 23       	and	r28, r28
   1128a:	69 f0       	breq	.+26     	; 0x112a6 <gpib_read_byte+0xe8>
   1128c:	c1 30       	cpi	r28, 0x01	; 1
   1128e:	c9 f0       	breq	.+50     	; 0x112c2 <gpib_read_byte+0x104>
   11290:	63 c0       	rjmp	.+198    	; 0x11358 <gpib_read_byte+0x19a>
   11292:	c5 30       	cpi	r28, 0x05	; 5
   11294:	09 f4       	brne	.+2      	; 0x11298 <gpib_read_byte+0xda>
   11296:	54 c0       	rjmp	.+168    	; 0x11340 <gpib_read_byte+0x182>
   11298:	c7 30       	cpi	r28, 0x07	; 7
   1129a:	09 f4       	brne	.+2      	; 0x1129e <gpib_read_byte+0xe0>
   1129c:	58 c0       	rjmp	.+176    	; 0x1134e <gpib_read_byte+0x190>
   1129e:	c4 30       	cpi	r28, 0x04	; 4
   112a0:	09 f0       	breq	.+2      	; 0x112a4 <gpib_read_byte+0xe6>
   112a2:	5a c0       	rjmp	.+180    	; 0x11358 <gpib_read_byte+0x19a>
   112a4:	3e c0       	rjmp	.+124    	; 0x11322 <gpib_read_byte+0x164>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   112a6:	19 9b       	sbis	0x03, 1	; 3
   112a8:	43 c0       	rjmp	.+134    	; 0x11330 <gpib_read_byte+0x172>
   112aa:	fd e0       	ldi	r31, 0x0D	; 13
   112ac:	fa 95       	dec	r31
   112ae:	f1 f7       	brne	.-4      	; 0x112ac <gpib_read_byte+0xee>
   112b0:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   112b2:	52 98       	cbi	0x0a, 2	; 10
   112b4:	5a 9a       	sbi	0x0b, 2	; 11
   112b6:	8d e0       	ldi	r24, 0x0D	; 13
   112b8:	8a 95       	dec	r24
   112ba:	f1 f7       	brne	.-4      	; 0x112b8 <gpib_read_byte+0xfa>
   112bc:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   112be:	c1 e0       	ldi	r28, 0x01	; 1
   112c0:	37 c0       	rjmp	.+110    	; 0x11330 <gpib_read_byte+0x172>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   112c2:	19 99       	sbic	0x03, 1	; 3
   112c4:	80 c0       	rjmp	.+256    	; 0x113c6 <gpib_read_byte+0x208>
   112c6:	ed e0       	ldi	r30, 0x0D	; 13
   112c8:	ea 95       	dec	r30
   112ca:	f1 f7       	brne	.-4      	; 0x112c8 <gpib_read_byte+0x10a>
   112cc:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   112ce:	c2 e0       	ldi	r28, 0x02	; 2
   112d0:	7a c0       	rjmp	.+244    	; 0x113c6 <gpib_read_byte+0x208>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   112d2:	5a 98       	cbi	0x0b, 2	; 11
   112d4:	52 9a       	sbi	0x0a, 2	; 10
   112d6:	fd e0       	ldi	r31, 0x0D	; 13
   112d8:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   112da:	f1 f7       	brne	.-4      	; 0x112d8 <gpib_read_byte+0x11a>
   112dc:	00 00       	nop
   112de:	74 dc       	rcall	.-1816   	; 0x10bc8 <gpib_bus_read>
   112e0:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   112e2:	b1 2c       	mov	r11, r1
   112e4:	77 dc       	rcall	.-1810   	; 0x10bd4 <gpib_control_pin_read>
   112e6:	7c 01       	movw	r14, r24
   112e8:	08 2b       	or	r16, r24
                ch |= control_last;
   112ea:	19 2b       	or	r17, r25
   112ec:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   112ee:	1b 29       	or	r17, r11
   112f0:	c1 14       	cp	r12, r1
   112f2:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   112f4:	49 f0       	breq	.+18     	; 0x11308 <gpib_read_byte+0x14a>
   112f6:	7e dc       	rcall	.-1796   	; 0x10bf4 <gpib_handshake_pin_read>
   112f8:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   112fa:	f9 2a       	or	r15, r25
   112fc:	61 e0       	ldi	r22, 0x01	; 1
   112fe:	70 e0       	ldi	r23, 0x00	; 0
   11300:	c5 01       	movw	r24, r10
   11302:	8e 29       	or	r24, r14
   11304:	9f 29       	or	r25, r15
   11306:	19 de       	rcall	.-974    	; 0x10f3a <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11308:	53 98       	cbi	0x0a, 3	; 10
   1130a:	5b 9a       	sbi	0x0b, 3	; 11
   1130c:	8d e0       	ldi	r24, 0x0D	; 13
   1130e:	8a 95       	dec	r24
   11310:	f1 f7       	brne	.-4      	; 0x1130e <gpib_read_byte+0x150>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11312:	00 00       	nop
   11314:	64 ef       	ldi	r22, 0xF4	; 244
   11316:	71 e0       	ldi	r23, 0x01	; 1
   11318:	80 e0       	ldi	r24, 0x00	; 0
   1131a:	90 e0       	ldi	r25, 0x00	; 0
   1131c:	20 db       	rcall	.-2496   	; 0x1095e <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1131e:	c4 e0       	ldi	r28, 0x04	; 4
   11320:	52 c0       	rjmp	.+164    	; 0x113c6 <gpib_read_byte+0x208>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11322:	19 9b       	sbis	0x03, 1	; 3
   11324:	05 c0       	rjmp	.+10     	; 0x11330 <gpib_read_byte+0x172>
   11326:	ed e0       	ldi	r30, 0x0D	; 13
   11328:	ea 95       	dec	r30
   1132a:	f1 f7       	brne	.-4      	; 0x11328 <gpib_read_byte+0x16a>
   1132c:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1132e:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11330:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11334:	88 23       	and	r24, r24
   11336:	09 f4       	brne	.+2      	; 0x1133a <gpib_read_byte+0x17c>
   11338:	46 c0       	rjmp	.+140    	; 0x113c6 <gpib_read_byte+0x208>
                {
                    ch |= TIMEOUT_FLAG;
   1133a:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1133c:	c7 e0       	ldi	r28, 0x07	; 7
   1133e:	43 c0       	rjmp	.+134    	; 0x113c6 <gpib_read_byte+0x208>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11340:	5b 98       	cbi	0x0b, 3	; 11
   11342:	53 9a       	sbi	0x0a, 3	; 10
   11344:	fd e0       	ldi	r31, 0x0D	; 13
   11346:	fa 95       	dec	r31
   11348:	f1 f7       	brne	.-4      	; 0x11346 <gpib_read_byte+0x188>
   1134a:	00 00       	nop
   1134c:	09 c0       	rjmp	.+18     	; 0x11360 <gpib_read_byte+0x1a2>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1134e:	5a 98       	cbi	0x0b, 2	; 11
   11350:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11352:	5b 98       	cbi	0x0b, 3	; 11
   11354:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11356:	04 c0       	rjmp	.+8      	; 0x11360 <gpib_read_byte+0x1a2>
   11358:	c1 14       	cp	r12, r1
   1135a:	d1 04       	cpc	r13, r1
   1135c:	91 f0       	breq	.+36     	; 0x11382 <gpib_read_byte+0x1c4>
   1135e:	04 c0       	rjmp	.+8      	; 0x11368 <gpib_read_byte+0x1aa>
   11360:	c1 14       	cp	r12, r1
   11362:	d1 04       	cpc	r13, r1
   11364:	99 f0       	breq	.+38     	; 0x1138c <gpib_read_byte+0x1ce>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11366:	c8 e0       	ldi	r28, 0x08	; 8
   11368:	35 dc       	rcall	.-1942   	; 0x10bd4 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1136a:	5c 01       	movw	r10, r24
   1136c:	43 dc       	rcall	.-1914   	; 0x10bf4 <gpib_handshake_pin_read>
   1136e:	a8 2a       	or	r10, r24
   11370:	b9 2a       	or	r11, r25
            if(control_last != control)
   11372:	ae 14       	cp	r10, r14
   11374:	bf 04       	cpc	r11, r15
   11376:	31 f0       	breq	.+12     	; 0x11384 <gpib_read_byte+0x1c6>
            {
                gpib_trace_display(control, TRACE_BUS);
   11378:	62 e0       	ldi	r22, 0x02	; 2
   1137a:	70 e0       	ldi	r23, 0x00	; 0
   1137c:	c5 01       	movw	r24, r10
   1137e:	dd dd       	rcall	.-1094   	; 0x10f3a <gpib_trace_display>
   11380:	01 c0       	rjmp	.+2      	; 0x11384 <gpib_read_byte+0x1c6>
   11382:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11384:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11386:	11 f0       	breq	.+4      	; 0x1138c <gpib_read_byte+0x1ce>
   11388:	75 01       	movw	r14, r10
   1138a:	4a cf       	rjmp	.-364    	; 0x11220 <gpib_read_byte+0x62>
   1138c:	80 91 f3 1f 	lds	r24, 0x1FF3	; 0x801ff3 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11390:	90 91 f4 1f 	lds	r25, 0x1FF4	; 0x801ff4 <current+0x1>
   11394:	90 93 f0 1d 	sts	0x1DF0, r25	; 0x801df0 <lastcmd+0x1>
   11398:	80 93 ef 1d 	sts	0x1DEF, r24	; 0x801def <lastcmd>
   1139c:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1139e:	88 27       	eor	r24, r24
   113a0:	90 7d       	andi	r25, 0xD0	; 208
   113a2:	89 2b       	or	r24, r25
   113a4:	11 f4       	brne	.+4      	; 0x113aa <gpib_read_byte+0x1ec>
   113a6:	12 fd       	sbrc	r17, 2
   113a8:	05 c0       	rjmp	.+10     	; 0x113b4 <gpib_read_byte+0x1f6>
   113aa:	10 92 f4 1f 	sts	0x1FF4, r1	; 0x801ff4 <current+0x1>
        current = 0;
   113ae:	10 92 f3 1f 	sts	0x1FF3, r1	; 0x801ff3 <current>
   113b2:	07 c0       	rjmp	.+14     	; 0x113c2 <gpib_read_byte+0x204>
   113b4:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   113b6:	8f 77       	andi	r24, 0x7F	; 127
   113b8:	99 27       	eor	r25, r25
   113ba:	90 93 f4 1f 	sts	0x1FF4, r25	; 0x801ff4 <current+0x1>
   113be:	80 93 f3 1f 	sts	0x1FF3, r24	; 0x801ff3 <current>
   113c2:	c8 01       	movw	r24, r16
   113c4:	05 c0       	rjmp	.+10     	; 0x113d0 <gpib_read_byte+0x212>
   113c6:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   113c8:	d1 04       	cpc	r13, r1
   113ca:	09 f4       	brne	.+2      	; 0x113ce <gpib_read_byte+0x210>
   113cc:	29 cf       	rjmp	.-430    	; 0x11220 <gpib_read_byte+0x62>
   113ce:	cc cf       	rjmp	.-104    	; 0x11368 <gpib_read_byte+0x1aa>
   113d0:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   113d2:	0f 90       	pop	r0
   113d4:	0f 90       	pop	r0
   113d6:	0f 90       	pop	r0
   113d8:	0f 90       	pop	r0
   113da:	cf 91       	pop	r28
   113dc:	1f 91       	pop	r17
   113de:	0f 91       	pop	r16
   113e0:	ff 90       	pop	r15
   113e2:	ef 90       	pop	r14
   113e4:	df 90       	pop	r13
   113e6:	cf 90       	pop	r12
   113e8:	bf 90       	pop	r11
   113ea:	af 90       	pop	r10
   113ec:	08 95       	ret

000113ee <gpib_decode>:
   113ee:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   113f0:	70 e0       	ldi	r23, 0x00	; 0
   113f2:	a3 cd       	rjmp	.-1210   	; 0x10f3a <gpib_trace_display>
   113f4:	08 95       	ret

000113f6 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   113f6:	a7 e0       	ldi	r26, 0x07	; 7
   113f8:	b0 e0       	ldi	r27, 0x00	; 0
   113fa:	e1 e0       	ldi	r30, 0x01	; 1
   113fc:	fa e8       	ldi	r31, 0x8A	; 138
   113fe:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   11402:	5b 01       	movw	r10, r22
   11404:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11406:	fa 01       	movw	r30, r20
   11408:	20 81       	ld	r18, Z
   1140a:	31 81       	ldd	r19, Z+1	; 0x01
   1140c:	22 27       	eor	r18, r18
   1140e:	31 83       	std	Z+1, r19	; 0x01
   11410:	20 83       	st	Z, r18

    if(!size)
   11412:	67 2b       	or	r22, r23
   11414:	21 f0       	breq	.+8      	; 0x1141e <gpib_read_str+0x28>
   11416:	7c 01       	movw	r14, r24
   11418:	00 e0       	ldi	r16, 0x00	; 0
   1141a:	10 e0       	ldi	r17, 0x00	; 0
   1141c:	28 c0       	rjmp	.+80     	; 0x1146e <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1141e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11422:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11426:	81 72       	andi	r24, 0x21	; 33
   11428:	91 70       	andi	r25, 0x01	; 1
   1142a:	89 2b       	or	r24, r25
   1142c:	09 f4       	brne	.+2      	; 0x11430 <gpib_read_str+0x3a>
   1142e:	7c c0       	rjmp	.+248    	; 0x11528 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11430:	8a ea       	ldi	r24, 0xAA	; 170
   11432:	9f e0       	ldi	r25, 0x0F	; 15
   11434:	a0 e0       	ldi	r26, 0x00	; 0
   11436:	ed b7       	in	r30, 0x3d	; 61
   11438:	fe b7       	in	r31, 0x3e	; 62
   1143a:	81 83       	std	Z+1, r24	; 0x01
   1143c:	92 83       	std	Z+2, r25	; 0x02
   1143e:	a3 83       	std	Z+3, r26	; 0x03
   11440:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11444:	71 c0       	rjmp	.+226    	; 0x11528 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11446:	8c 27       	eor	r24, r28
   11448:	9d 27       	eor	r25, r29
   1144a:	92 fd       	sbrc	r25, 2
   1144c:	2e c0       	rjmp	.+92     	; 0x114aa <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1144e:	ce 01       	movw	r24, r28
   11450:	88 27       	eor	r24, r24
   11452:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11454:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11456:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11458:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1145a:	f7 01       	movw	r30, r14
   1145c:	20 83       	st	Z, r18
        ++ind;
   1145e:	0f 5f       	subi	r16, 0xFF	; 255
   11460:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11462:	89 2b       	or	r24, r25
   11464:	09 f4       	brne	.+2      	; 0x11468 <gpib_read_str+0x72>
   11466:	3c c0       	rjmp	.+120    	; 0x114e0 <gpib_read_str+0xea>
   11468:	ff ef       	ldi	r31, 0xFF	; 255
   1146a:	ef 1a       	sub	r14, r31
   1146c:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1146e:	0a 15       	cp	r16, r10
   11470:	1b 05       	cpc	r17, r11
   11472:	0c f0       	brlt	.+2      	; 0x11476 <gpib_read_str+0x80>
   11474:	3f c0       	rjmp	.+126    	; 0x114f4 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11476:	80 e0       	ldi	r24, 0x00	; 0
   11478:	90 e0       	ldi	r25, 0x00	; 0
   1147a:	a1 de       	rcall	.-702    	; 0x111be <gpib_read_byte>
   1147c:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1147e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11482:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11486:	90 ff       	sbrs	r25, 0
   11488:	02 c0       	rjmp	.+4      	; 0x1148e <gpib_read_str+0x98>
            gpib_decode(val);
   1148a:	ce 01       	movw	r24, r28
   1148c:	b0 df       	rcall	.-160    	; 0x113ee <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1148e:	9e 01       	movw	r18, r28
   11490:	22 27       	eor	r18, r18
   11492:	30 7d       	andi	r19, 0xD0	; 208
   11494:	f6 01       	movw	r30, r12
   11496:	80 81       	ld	r24, Z
   11498:	91 81       	ldd	r25, Z+1	; 0x01
   1149a:	21 15       	cp	r18, r1
   1149c:	31 05       	cpc	r19, r1
   1149e:	99 f2       	breq	.-90     	; 0x11446 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   114a0:	82 2b       	or	r24, r18
   114a2:	93 2b       	or	r25, r19
   114a4:	91 83       	std	Z+1, r25	; 0x01
   114a6:	80 83       	st	Z, r24
            break;
   114a8:	28 c0       	rjmp	.+80     	; 0x114fa <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   114aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114b2:	81 72       	andi	r24, 0x21	; 33
   114b4:	91 70       	andi	r25, 0x01	; 1
   114b6:	89 2b       	or	r24, r25
   114b8:	81 f0       	breq	.+32     	; 0x114da <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   114ba:	ce 01       	movw	r24, r28
   114bc:	99 27       	eor	r25, r25
   114be:	ed b7       	in	r30, 0x3d	; 61
   114c0:	fe b7       	in	r31, 0x3e	; 62
   114c2:	97 83       	std	Z+7, r25	; 0x07
   114c4:	86 83       	std	Z+6, r24	; 0x06
   114c6:	15 83       	std	Z+5, r17	; 0x05
   114c8:	04 83       	std	Z+4, r16	; 0x04
   114ca:	8d e7       	ldi	r24, 0x7D	; 125
   114cc:	9f e0       	ldi	r25, 0x0F	; 15
   114ce:	a0 e0       	ldi	r26, 0x00	; 0
   114d0:	81 83       	std	Z+1, r24	; 0x01
   114d2:	92 83       	std	Z+2, r25	; 0x02
   114d4:	a3 83       	std	Z+3, r26	; 0x03
   114d6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            gpib_unread(val);
   114da:	ce 01       	movw	r24, r28
   114dc:	4b db       	rcall	.-2410   	; 0x10b74 <gpib_unread>
            break;
   114de:	0d c0       	rjmp	.+26     	; 0x114fa <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   114e0:	d0 ff       	sbrs	r29, 0
   114e2:	c2 cf       	rjmp	.-124    	; 0x11468 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   114e4:	f6 01       	movw	r30, r12
   114e6:	80 81       	ld	r24, Z
   114e8:	91 81       	ldd	r25, Z+1	; 0x01
   114ea:	90 fd       	sbrc	r25, 0
   114ec:	1f c0       	rjmp	.+62     	; 0x1152c <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   114ee:	91 60       	ori	r25, 0x01	; 1
   114f0:	91 83       	std	Z+1, r25	; 0x01
   114f2:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   114f4:	0a 15       	cp	r16, r10
   114f6:	1b 05       	cpc	r17, r11
   114f8:	c9 f0       	breq	.+50     	; 0x1152c <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   114fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11502:	81 72       	andi	r24, 0x21	; 33
   11504:	99 27       	eor	r25, r25
   11506:	89 2b       	or	r24, r25
   11508:	89 f0       	breq	.+34     	; 0x1152c <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1150a:	ed b7       	in	r30, 0x3d	; 61
   1150c:	fe b7       	in	r31, 0x3e	; 62
   1150e:	b7 82       	std	Z+7, r11	; 0x07
   11510:	a6 82       	std	Z+6, r10	; 0x06
   11512:	15 83       	std	Z+5, r17	; 0x05
   11514:	04 83       	std	Z+4, r16	; 0x04
   11516:	86 e5       	ldi	r24, 0x56	; 86
   11518:	9f e0       	ldi	r25, 0x0F	; 15
   1151a:	a0 e0       	ldi	r26, 0x00	; 0
   1151c:	81 83       	std	Z+1, r24	; 0x01
   1151e:	92 83       	std	Z+2, r25	; 0x02
   11520:	a3 83       	std	Z+3, r26	; 0x03
   11522:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11526:	02 c0       	rjmp	.+4      	; 0x1152c <gpib_read_str+0x136>
   11528:	00 e0       	ldi	r16, 0x00	; 0
   1152a:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1152c:	c8 01       	movw	r24, r16
   1152e:	cd b7       	in	r28, 0x3d	; 61
   11530:	de b7       	in	r29, 0x3e	; 62
   11532:	27 96       	adiw	r28, 0x07	; 7
   11534:	ea e0       	ldi	r30, 0x0A	; 10
   11536:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0001153a <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1153a:	a7 e0       	ldi	r26, 0x07	; 7
   1153c:	b0 e0       	ldi	r27, 0x00	; 0
   1153e:	e3 ea       	ldi	r30, 0xA3	; 163
   11540:	fa e8       	ldi	r31, 0x8A	; 138
   11542:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   11546:	d8 2f       	mov	r29, r24
   11548:	c9 2f       	mov	r28, r25
   1154a:	7b 01       	movw	r14, r22
   1154c:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1154e:	fa 01       	movw	r30, r20
   11550:	80 81       	ld	r24, Z
   11552:	91 81       	ldd	r25, Z+1	; 0x01
   11554:	88 27       	eor	r24, r24
   11556:	91 83       	std	Z+1, r25	; 0x01
   11558:	80 83       	st	Z, r24

    if(!size)
   1155a:	67 2b       	or	r22, r23
   1155c:	91 f4       	brne	.+36     	; 0x11582 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1155e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11562:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11566:	81 72       	andi	r24, 0x21	; 33
   11568:	91 70       	andi	r25, 0x01	; 1
   1156a:	89 2b       	or	r24, r25
   1156c:	51 f0       	breq	.+20     	; 0x11582 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1156e:	8c e3       	ldi	r24, 0x3C	; 60
   11570:	9f e0       	ldi	r25, 0x0F	; 15
   11572:	a0 e0       	ldi	r26, 0x00	; 0
   11574:	ed b7       	in	r30, 0x3d	; 61
   11576:	fe b7       	in	r31, 0x3e	; 62
   11578:	81 83       	std	Z+1, r24	; 0x01
   1157a:	92 83       	std	Z+2, r25	; 0x02
   1157c:	a3 83       	std	Z+3, r26	; 0x03
   1157e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11582:	80 e0       	ldi	r24, 0x00	; 0
   11584:	2e da       	rcall	.-2980   	; 0x109e2 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11586:	4e 9b       	sbis	0x09, 6	; 9
   11588:	06 c0       	rjmp	.+12     	; 0x11596 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1158a:	64 ef       	ldi	r22, 0xF4	; 244
   1158c:	71 e0       	ldi	r23, 0x01	; 1
   1158e:	80 e0       	ldi	r24, 0x00	; 0
   11590:	90 e0       	ldi	r25, 0x00	; 0
   11592:	e5 d9       	rcall	.-3126   	; 0x1095e <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11594:	18 c0       	rjmp	.+48     	; 0x115c6 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11596:	64 ef       	ldi	r22, 0xF4	; 244
   11598:	71 e0       	ldi	r23, 0x01	; 1
   1159a:	80 e0       	ldi	r24, 0x00	; 0
   1159c:	90 e0       	ldi	r25, 0x00	; 0
   1159e:	df d9       	rcall	.-3138   	; 0x1095e <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   115a0:	4e 99       	sbic	0x09, 6	; 9
   115a2:	f3 cf       	rjmp	.-26     	; 0x1158a <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   115a4:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   115a8:	88 23       	and	r24, r24
   115aa:	d1 f3       	breq	.-12     	; 0x115a0 <gpib_write_str+0x66>
			{
				gpib_rx_init(1);
   115ac:	81 e0       	ldi	r24, 0x01	; 1
   115ae:	19 da       	rcall	.-3022   	; 0x109e2 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   115b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115b8:	85 70       	andi	r24, 0x05	; 5
   115ba:	99 27       	eor	r25, r25
   115bc:	89 2b       	or	r24, r25
   115be:	d9 f0       	breq	.+54     	; 0x115f6 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   115c0:	8e e0       	ldi	r24, 0x0E	; 14
   115c2:	9f e0       	ldi	r25, 0x0F	; 15
   115c4:	10 c0       	rjmp	.+32     	; 0x115e6 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   115c6:	19 99       	sbic	0x03, 1	; 3
   115c8:	1f c0       	rjmp	.+62     	; 0x11608 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   115ca:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   115ce:	88 23       	and	r24, r24
   115d0:	d1 f3       	breq	.-12     	; 0x115c6 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   115d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115da:	85 70       	andi	r24, 0x05	; 5
   115dc:	99 27       	eor	r25, r25
   115de:	89 2b       	or	r24, r25
   115e0:	51 f0       	breq	.+20     	; 0x115f6 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   115e2:	84 ef       	ldi	r24, 0xF4	; 244
   115e4:	9e e0       	ldi	r25, 0x0E	; 14
   115e6:	a0 e0       	ldi	r26, 0x00	; 0
   115e8:	ed b7       	in	r30, 0x3d	; 61
   115ea:	fe b7       	in	r31, 0x3e	; 62
   115ec:	81 83       	std	Z+1, r24	; 0x01
   115ee:	92 83       	std	Z+2, r25	; 0x02
   115f0:	a3 83       	std	Z+3, r26	; 0x03
   115f2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   115f6:	f8 01       	movw	r30, r16
   115f8:	80 81       	ld	r24, Z
   115fa:	91 81       	ldd	r25, Z+1	; 0x01
   115fc:	90 6c       	ori	r25, 0xC0	; 192
   115fe:	91 83       	std	Z+1, r25	; 0x01
   11600:	80 83       	st	Z, r24
			return(ind);
   11602:	c0 e0       	ldi	r28, 0x00	; 0
   11604:	d0 e0       	ldi	r29, 0x00	; 0
   11606:	45 c0       	rjmp	.+138    	; 0x11692 <gpib_write_str+0x158>
   11608:	cd 2e       	mov	r12, r29
   1160a:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1160c:	c0 e0       	ldi	r28, 0x00	; 0
   1160e:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11610:	ce 15       	cp	r28, r14
   11612:	df 05       	cpc	r29, r15
   11614:	1c f5       	brge	.+70     	; 0x1165c <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11616:	21 96       	adiw	r28, 0x01	; 1
   11618:	f6 01       	movw	r30, r12
   1161a:	81 91       	ld	r24, Z+
   1161c:	6f 01       	movw	r12, r30
   1161e:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11620:	f8 01       	movw	r30, r16
   11622:	20 81       	ld	r18, Z
   11624:	31 81       	ldd	r19, Z+1	; 0x01
   11626:	30 ff       	sbrs	r19, 0
   11628:	04 c0       	rjmp	.+8      	; 0x11632 <gpib_write_str+0xf8>
   1162a:	ec 16       	cp	r14, r28
   1162c:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1162e:	09 f4       	brne	.+2      	; 0x11632 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11630:	91 60       	ori	r25, 0x01	; 1
   11632:	ec da       	rcall	.-2600   	; 0x10c0c <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11634:	5c 01       	movw	r10, r24
   11636:	aa 24       	eor	r10, r10
   11638:	f0 ed       	ldi	r31, 0xD0	; 208
   1163a:	bf 22       	and	r11, r31
   1163c:	f8 01       	movw	r30, r16
   1163e:	20 81       	ld	r18, Z
   11640:	31 81       	ldd	r19, Z+1	; 0x01
   11642:	2a 29       	or	r18, r10
   11644:	3b 29       	or	r19, r11
   11646:	31 83       	std	Z+1, r19	; 0x01
   11648:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1164a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1164e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11652:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11654:	cc de       	rcall	.-616    	; 0x113ee <gpib_decode>
   11656:	a1 14       	cp	r10, r1
   11658:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1165a:	d1 f2       	breq	.-76     	; 0x11610 <gpib_write_str+0xd6>
   1165c:	81 e0       	ldi	r24, 0x01	; 1
   1165e:	c1 d9       	rcall	.-3198   	; 0x109e2 <gpib_rx_init>

    if ( ind != size )
   11660:	ce 15       	cp	r28, r14
   11662:	df 05       	cpc	r29, r15
   11664:	b1 f0       	breq	.+44     	; 0x11692 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11666:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1166a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1166e:	81 72       	andi	r24, 0x21	; 33
   11670:	91 70       	andi	r25, 0x01	; 1
   11672:	89 2b       	or	r24, r25
   11674:	71 f0       	breq	.+28     	; 0x11692 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11676:	ed b7       	in	r30, 0x3d	; 61
   11678:	fe b7       	in	r31, 0x3e	; 62
   1167a:	f7 82       	std	Z+7, r15	; 0x07
   1167c:	e6 82       	std	Z+6, r14	; 0x06
   1167e:	d5 83       	std	Z+5, r29	; 0x05
   11680:	c4 83       	std	Z+4, r28	; 0x04
   11682:	8c ec       	ldi	r24, 0xCC	; 204
   11684:	9e e0       	ldi	r25, 0x0E	; 14
   11686:	a0 e0       	ldi	r26, 0x00	; 0
   11688:	81 83       	std	Z+1, r24	; 0x01
   1168a:	92 83       	std	Z+2, r25	; 0x02
   1168c:	a3 83       	std	Z+3, r26	; 0x03
   1168e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }
    return(ind);
}
   11692:	ce 01       	movw	r24, r28
   11694:	cd b7       	in	r28, 0x3d	; 61
   11696:	de b7       	in	r29, 0x3e	; 62
   11698:	27 96       	adiw	r28, 0x07	; 7
   1169a:	ea e0       	ldi	r30, 0x0A	; 10
   1169c:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

000116a0 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   116a0:	ad b7       	in	r26, 0x3d	; 61
   116a2:	be b7       	in	r27, 0x3e	; 62
   116a4:	17 97       	sbiw	r26, 0x07	; 7
   116a6:	0f b6       	in	r0, 0x3f	; 63
   116a8:	f8 94       	cli
   116aa:	be bf       	out	0x3e, r27	; 62
   116ac:	0f be       	out	0x3f, r0	; 63
   116ae:	ad bf       	out	0x3d, r26	; 61
   116b0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   116b4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   116b8:	88 eb       	ldi	r24, 0xB8	; 184
   116ba:	91 e0       	ldi	r25, 0x01	; 1
   116bc:	0e 94 50 9a 	call	0x134a0	; 0x134a0 <Read_Config>
   116c0:	18 16       	cp	r1, r24
   116c2:	19 06       	cpc	r1, r25
   116c4:	8c f4       	brge	.+34     	; 0x116e8 <gpib_file_init+0x48>
   116c6:	ed b7       	in	r30, 0x3d	; 61
   116c8:	fe b7       	in	r31, 0x3e	; 62
   116ca:	97 83       	std	Z+7, r25	; 0x07
   116cc:	86 83       	std	Z+6, r24	; 0x06
   116ce:	88 eb       	ldi	r24, 0xB8	; 184
   116d0:	91 e0       	ldi	r25, 0x01	; 1
   116d2:	95 83       	std	Z+5, r25	; 0x05
   116d4:	84 83       	std	Z+4, r24	; 0x04
   116d6:	89 ed       	ldi	r24, 0xD9	; 217
   116d8:	94 e1       	ldi	r25, 0x14	; 20
   116da:	a0 e0       	ldi	r26, 0x00	; 0
   116dc:	81 83       	std	Z+1, r24	; 0x01
   116de:	92 83       	std	Z+2, r25	; 0x02
   116e0:	a3 83       	std	Z+3, r26	; 0x03
   116e2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   116e6:	10 c0       	rjmp	.+32     	; 0x11708 <gpib_file_init+0x68>
   116e8:	89 2b       	or	r24, r25
   116ea:	71 f0       	breq	.+28     	; 0x11708 <gpib_file_init+0x68>
   116ec:	88 eb       	ldi	r24, 0xB8	; 184
   116ee:	91 e0       	ldi	r25, 0x01	; 1
   116f0:	ed b7       	in	r30, 0x3d	; 61
   116f2:	fe b7       	in	r31, 0x3e	; 62
   116f4:	95 83       	std	Z+5, r25	; 0x05
   116f6:	84 83       	std	Z+4, r24	; 0x04
   116f8:	88 ec       	ldi	r24, 0xC8	; 200
   116fa:	94 e1       	ldi	r25, 0x14	; 20
   116fc:	a0 e0       	ldi	r26, 0x00	; 0
   116fe:	81 83       	std	Z+1, r24	; 0x01
   11700:	92 83       	std	Z+2, r25	; 0x02
   11702:	a3 83       	std	Z+3, r26	; 0x03
   11704:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11708:	0e 94 1b 99 	call	0x13236	; 0x13236 <set_Config_Defaults>
   1170c:	0e 94 28 6f 	call	0xde50	; 0xde50 <mmc_wp_status>
   11710:	89 2b       	or	r24, r25
   11712:	51 f0       	breq	.+20     	; 0x11728 <gpib_file_init+0x88>
   11714:	8f ea       	ldi	r24, 0xAF	; 175
   11716:	94 e1       	ldi	r25, 0x14	; 20
   11718:	a0 e0       	ldi	r26, 0x00	; 0
   1171a:	ed b7       	in	r30, 0x3d	; 61
   1171c:	fe b7       	in	r31, 0x3e	; 62
   1171e:	81 83       	std	Z+1, r24	; 0x01
   11720:	92 83       	std	Z+2, r25	; 0x02
   11722:	a3 83       	std	Z+3, r26	; 0x03
   11724:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11728:	ad b7       	in	r26, 0x3d	; 61
   1172a:	be b7       	in	r27, 0x3e	; 62
   1172c:	17 96       	adiw	r26, 0x07	; 7
   1172e:	0f b6       	in	r0, 0x3f	; 63
   11730:	f8 94       	cli
   11732:	be bf       	out	0x3e, r27	; 62
   11734:	0f be       	out	0x3f, r0	; 63
   11736:	ad bf       	out	0x3d, r26	; 61
   11738:	08 95       	ret

0001173a <SS80_is_MLA>:
   1173a:	40 e2       	ldi	r20, 0x20	; 32
   1173c:	50 e0       	ldi	r21, 0x00	; 0
   1173e:	bc 01       	movw	r22, r24
   11740:	83 e0       	ldi	r24, 0x03	; 3
   11742:	90 e0       	ldi	r25, 0x00	; 0
   11744:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   11748:	8f 3f       	cpi	r24, 0xFF	; 255
   1174a:	2f ef       	ldi	r18, 0xFF	; 255
   1174c:	92 07       	cpc	r25, r18
   1174e:	19 f0       	breq	.+6      	; 0x11756 <SS80_is_MLA+0x1c>
   11750:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   11754:	08 95       	ret
   11756:	80 e0       	ldi	r24, 0x00	; 0
   11758:	90 e0       	ldi	r25, 0x00	; 0
   1175a:	08 95       	ret

0001175c <SS80_is_MTA>:
   1175c:	40 e4       	ldi	r20, 0x40	; 64
   1175e:	50 e0       	ldi	r21, 0x00	; 0
   11760:	bc 01       	movw	r22, r24
   11762:	83 e0       	ldi	r24, 0x03	; 3
   11764:	90 e0       	ldi	r25, 0x00	; 0
   11766:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   1176a:	8f 3f       	cpi	r24, 0xFF	; 255
   1176c:	2f ef       	ldi	r18, 0xFF	; 255
   1176e:	92 07       	cpc	r25, r18
   11770:	19 f0       	breq	.+6      	; 0x11778 <SS80_is_MTA+0x1c>
   11772:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   11776:	08 95       	ret
   11778:	80 e0       	ldi	r24, 0x00	; 0
   1177a:	90 e0       	ldi	r25, 0x00	; 0
   1177c:	08 95       	ret

0001177e <SS80_is_MSA>:
   1177e:	40 e6       	ldi	r20, 0x60	; 96
   11780:	50 e0       	ldi	r21, 0x00	; 0
   11782:	bc 01       	movw	r22, r24
   11784:	83 e0       	ldi	r24, 0x03	; 3
   11786:	90 e0       	ldi	r25, 0x00	; 0
   11788:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   1178c:	8f 3f       	cpi	r24, 0xFF	; 255
   1178e:	2f ef       	ldi	r18, 0xFF	; 255
   11790:	92 07       	cpc	r25, r18
   11792:	19 f0       	breq	.+6      	; 0x1179a <SS80_is_MSA+0x1c>
   11794:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   11798:	08 95       	ret
   1179a:	80 e0       	ldi	r24, 0x00	; 0
   1179c:	90 e0       	ldi	r25, 0x00	; 0
   1179e:	08 95       	ret

000117a0 <AMIGO_is_MLA>:
   117a0:	40 e2       	ldi	r20, 0x20	; 32
   117a2:	50 e0       	ldi	r21, 0x00	; 0
   117a4:	bc 01       	movw	r22, r24
   117a6:	81 e0       	ldi	r24, 0x01	; 1
   117a8:	90 e0       	ldi	r25, 0x00	; 0
   117aa:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   117ae:	8f 3f       	cpi	r24, 0xFF	; 255
   117b0:	2f ef       	ldi	r18, 0xFF	; 255
   117b2:	92 07       	cpc	r25, r18
   117b4:	19 f0       	breq	.+6      	; 0x117bc <AMIGO_is_MLA+0x1c>
   117b6:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   117ba:	08 95       	ret
   117bc:	80 e0       	ldi	r24, 0x00	; 0
   117be:	90 e0       	ldi	r25, 0x00	; 0
   117c0:	08 95       	ret

000117c2 <AMIGO_is_MTA>:
   117c2:	40 e4       	ldi	r20, 0x40	; 64
   117c4:	50 e0       	ldi	r21, 0x00	; 0
   117c6:	bc 01       	movw	r22, r24
   117c8:	81 e0       	ldi	r24, 0x01	; 1
   117ca:	90 e0       	ldi	r25, 0x00	; 0
   117cc:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   117d0:	8f 3f       	cpi	r24, 0xFF	; 255
   117d2:	2f ef       	ldi	r18, 0xFF	; 255
   117d4:	92 07       	cpc	r25, r18
   117d6:	19 f0       	breq	.+6      	; 0x117de <AMIGO_is_MTA+0x1c>
   117d8:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   117dc:	08 95       	ret
   117de:	80 e0       	ldi	r24, 0x00	; 0
   117e0:	90 e0       	ldi	r25, 0x00	; 0
   117e2:	08 95       	ret

000117e4 <AMIGO_is_MSA>:
   117e4:	40 e6       	ldi	r20, 0x60	; 96
   117e6:	50 e0       	ldi	r21, 0x00	; 0
   117e8:	bc 01       	movw	r22, r24
   117ea:	81 e0       	ldi	r24, 0x01	; 1
   117ec:	90 e0       	ldi	r25, 0x00	; 0
   117ee:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   117f2:	8f 3f       	cpi	r24, 0xFF	; 255
   117f4:	2f ef       	ldi	r18, 0xFF	; 255
   117f6:	92 07       	cpc	r25, r18
   117f8:	19 f0       	breq	.+6      	; 0x11800 <AMIGO_is_MSA+0x1c>
   117fa:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   117fe:	08 95       	ret
   11800:	80 e0       	ldi	r24, 0x00	; 0
   11802:	90 e0       	ldi	r25, 0x00	; 0
   11804:	08 95       	ret

00011806 <PRINTER_is_MLA>:
   11806:	40 e2       	ldi	r20, 0x20	; 32
   11808:	50 e0       	ldi	r21, 0x00	; 0
   1180a:	bc 01       	movw	r22, r24
   1180c:	84 e0       	ldi	r24, 0x04	; 4
   1180e:	90 e0       	ldi	r25, 0x00	; 0
   11810:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   11814:	8f 3f       	cpi	r24, 0xFF	; 255
   11816:	2f ef       	ldi	r18, 0xFF	; 255
   11818:	92 07       	cpc	r25, r18
   1181a:	19 f0       	breq	.+6      	; 0x11822 <PRINTER_is_MLA+0x1c>
   1181c:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   11820:	08 95       	ret
   11822:	80 e0       	ldi	r24, 0x00	; 0
   11824:	90 e0       	ldi	r25, 0x00	; 0
   11826:	08 95       	ret

00011828 <PRINTER_is_MTA>:
   11828:	40 e4       	ldi	r20, 0x40	; 64
   1182a:	50 e0       	ldi	r21, 0x00	; 0
   1182c:	bc 01       	movw	r22, r24
   1182e:	84 e0       	ldi	r24, 0x04	; 4
   11830:	90 e0       	ldi	r25, 0x00	; 0
   11832:	0e 94 81 96 	call	0x12d02	; 0x12d02 <find_device>
   11836:	8f 3f       	cpi	r24, 0xFF	; 255
   11838:	2f ef       	ldi	r18, 0xFF	; 255
   1183a:	92 07       	cpc	r25, r18
   1183c:	19 f0       	breq	.+6      	; 0x11844 <PRINTER_is_MTA+0x1c>
   1183e:	0c 94 ab 96 	jmp	0x12d56	; 0x12d56 <set_active_device>
   11842:	08 95       	ret
   11844:	80 e0       	ldi	r24, 0x00	; 0
   11846:	90 e0       	ldi	r25, 0x00	; 0
   11848:	08 95       	ret

0001184a <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1184a:	93 d8       	rcall	.-3802   	; 0x10972 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1184c:	fa d8       	rcall	.-3596   	; 0x10a42 <gpib_state_init>
   1184e:	0e 94 32 ab 	call	0x15664	; 0x15664 <SS80_init>

    SS80_init();                                  // SS80 state init
   11852:	0e 94 c1 b0 	call	0x16182	; 0x16182 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11856:	0c 94 f2 bb 	jmp	0x177e4	; 0x177e4 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1185a:	08 95       	ret

0001185c <gpib_trace_task>:
   1185c:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1185e:	1f 93       	push	r17
   11860:	cf 93       	push	r28
   11862:	df 93       	push	r29
   11864:	00 d0       	rcall	.+0      	; 0x11866 <gpib_trace_task+0xa>
   11866:	00 d0       	rcall	.+0      	; 0x11868 <gpib_trace_task+0xc>
   11868:	1f 92       	push	r1
   1186a:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1186c:	00 97       	sbiw	r24, 0x00	; 0
   1186e:	09 f4       	brne	.+2      	; 0x11872 <gpib_trace_task+0x16>
   11870:	44 c0       	rjmp	.+136    	; 0x118fa <gpib_trace_task+0x9e>
   11872:	fc 01       	movw	r30, r24
   11874:	20 81       	ld	r18, Z
   11876:	22 23       	and	r18, r18
   11878:	09 f4       	brne	.+2      	; 0x1187c <gpib_trace_task+0x20>
   1187a:	3f c0       	rjmp	.+126    	; 0x118fa <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   1187c:	0e 94 47 30 	call	0x608e	; 0x608e <skipspaces>
   11880:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11882:	ed b7       	in	r30, 0x3d	; 61
   11884:	fe b7       	in	r31, 0x3e	; 62
   11886:	95 83       	std	Z+5, r25	; 0x05
   11888:	84 83       	std	Z+4, r24	; 0x04
   1188a:	85 e9       	ldi	r24, 0x95	; 149
   1188c:	94 e1       	ldi	r25, 0x14	; 20
   1188e:	a0 e0       	ldi	r26, 0x00	; 0
   11890:	81 83       	std	Z+1, r24	; 0x01
   11892:	92 83       	std	Z+2, r25	; 0x02
   11894:	a3 83       	std	Z+3, r26	; 0x03
   11896:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        if(detail)
   1189a:	20 97       	sbiw	r28, 0x00	; 0
   1189c:	51 f0       	breq	.+20     	; 0x118b2 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   1189e:	8a e6       	ldi	r24, 0x6A	; 106
   118a0:	94 e1       	ldi	r25, 0x14	; 20
   118a2:	a0 e0       	ldi	r26, 0x00	; 0
   118a4:	ed b7       	in	r30, 0x3d	; 61
   118a6:	fe b7       	in	r31, 0x3e	; 62
   118a8:	81 83       	std	Z+1, r24	; 0x01
   118aa:	92 83       	std	Z+2, r25	; 0x02
   118ac:	a3 83       	std	Z+3, r26	; 0x03
   118ae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("Press ANY key to exit\n");
   118b2:	83 e5       	ldi	r24, 0x53	; 83
   118b4:	94 e1       	ldi	r25, 0x14	; 20
   118b6:	a0 e0       	ldi	r26, 0x00	; 0
   118b8:	ed b7       	in	r30, 0x3d	; 61
   118ba:	fe b7       	in	r31, 0x3e	; 62
   118bc:	81 83       	std	Z+1, r24	; 0x01
   118be:	92 83       	std	Z+2, r25	; 0x02
   118c0:	a3 83       	std	Z+3, r26	; 0x03
   118c2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   118c6:	6c e0       	ldi	r22, 0x0C	; 12
   118c8:	79 e0       	ldi	r23, 0x09	; 9
   118ca:	c8 01       	movw	r24, r16
   118cc:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   118d0:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <gpib_log_fp+0x1>
   118d4:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   118d8:	89 2b       	or	r24, r25
   118da:	b9 f4       	brne	.+46     	; 0x1190a <gpib_trace_task+0xae>
        {
            perror("open failed");
   118dc:	87 ea       	ldi	r24, 0xA7	; 167
   118de:	9d e0       	ldi	r25, 0x0D	; 13
   118e0:	0e 94 81 77 	call	0xef02	; 0xef02 <perror>
            printf("exiting...\n");
   118e4:	87 e4       	ldi	r24, 0x47	; 71
   118e6:	94 e1       	ldi	r25, 0x14	; 20
   118e8:	a0 e0       	ldi	r26, 0x00	; 0
   118ea:	ed b7       	in	r30, 0x3d	; 61
   118ec:	fe b7       	in	r31, 0x3e	; 62
   118ee:	81 83       	std	Z+1, r24	; 0x01
   118f0:	92 83       	std	Z+2, r25	; 0x02
   118f2:	a3 83       	std	Z+3, r26	; 0x03
   118f4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            return;
   118f8:	3d c0       	rjmp	.+122    	; 0x11974 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   118fa:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
   118fe:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
   11902:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <gpib_log_fp+0x1>
   11906:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   1190a:	9f df       	rcall	.-194    	; 0x1184a <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   1190c:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <gpib_log_fp>
   11910:	90 91 68 1a 	lds	r25, 0x1A68	; 0x801a68 <gpib_log_fp+0x1>
   11914:	c0 da       	rcall	.-2688   	; 0x10e96 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11916:	80 e0       	ldi	r24, 0x00	; 0
   11918:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   1191c:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   1191e:	31 f4       	brne	.+12     	; 0x1192c <gpib_trace_task+0xd0>
   11920:	ce 01       	movw	r24, r28
        if(!detail)
   11922:	4d dc       	rcall	.-1894   	; 0x111be <gpib_read_byte>
   11924:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11926:	b9 f7       	brne	.-18     	; 0x11916 <gpib_trace_task+0xba>
   11928:	62 dd       	rcall	.-1340   	; 0x113ee <gpib_decode>
   1192a:	f5 cf       	rjmp	.-22     	; 0x11916 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   1192c:	81 e4       	ldi	r24, 0x41	; 65
   1192e:	94 e1       	ldi	r25, 0x14	; 20
   11930:	a0 e0       	ldi	r26, 0x00	; 0
   11932:	ed b7       	in	r30, 0x3d	; 61
   11934:	fe b7       	in	r31, 0x3e	; 62
   11936:	81 83       	std	Z+1, r24	; 0x01
   11938:	92 83       	std	Z+2, r25	; 0x02
   1193a:	a3 83       	std	Z+3, r26	; 0x03
   1193c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    if(gpib_log_fp)
   11940:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <gpib_log_fp>
   11944:	90 91 68 1a 	lds	r25, 0x1A68	; 0x801a68 <gpib_log_fp+0x1>
   11948:	00 97       	sbiw	r24, 0x00	; 0
   1194a:	a1 f0       	breq	.+40     	; 0x11974 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   1194c:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
        printf("Capturing Closed\n");
   11950:	8f e2       	ldi	r24, 0x2F	; 47
   11952:	94 e1       	ldi	r25, 0x14	; 20
   11954:	a0 e0       	ldi	r26, 0x00	; 0
   11956:	ed b7       	in	r30, 0x3d	; 61
   11958:	fe b7       	in	r31, 0x3e	; 62
   1195a:	81 83       	std	Z+1, r24	; 0x01
   1195c:	92 83       	std	Z+2, r25	; 0x02
   1195e:	a3 83       	std	Z+3, r26	; 0x03
   11960:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        gpib_log_fp = stdout;
   11964:	80 91 c8 1d 	lds	r24, 0x1DC8	; 0x801dc8 <__iob+0x2>
   11968:	90 91 c9 1d 	lds	r25, 0x1DC9	; 0x801dc9 <__iob+0x3>
   1196c:	90 93 68 1a 	sts	0x1A68, r25	; 0x801a68 <gpib_log_fp+0x1>
   11970:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <gpib_log_fp>
    }
}
   11974:	cd b7       	in	r28, 0x3d	; 61
   11976:	de b7       	in	r29, 0x3e	; 62
   11978:	25 96       	adiw	r28, 0x05	; 5
   1197a:	e4 e0       	ldi	r30, 0x04	; 4
   1197c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00011980 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11980:	ef 92       	push	r14
   11982:	ff 92       	push	r15
   11984:	0f 93       	push	r16
   11986:	1f 93       	push	r17
   11988:	cf 93       	push	r28
   1198a:	df 93       	push	r29
   1198c:	00 d0       	rcall	.+0      	; 0x1198e <gpib_error_test+0xe>
   1198e:	1f 92       	push	r1
   11990:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11992:	ec 01       	movw	r28, r24
   11994:	cc 27       	eor	r28, r28
   11996:	d0 7d       	andi	r29, 0xD0	; 208
   11998:	20 97       	sbiw	r28, 0x00	; 0
   1199a:	61 f0       	breq	.+24     	; 0x119b4 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   1199c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   119a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119a4:	8d 72       	andi	r24, 0x2D	; 45
   119a6:	99 27       	eor	r25, r25
   119a8:	87 01       	movw	r16, r14
   119aa:	00 27       	eor	r16, r16
   119ac:	10 71       	andi	r17, 0x10	; 16
   119ae:	89 2b       	or	r24, r25
   119b0:	59 f4       	brne	.+22     	; 0x119c8 <gpib_error_test+0x48>
   119b2:	17 c0       	rjmp	.+46     	; 0x119e2 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   119b4:	80 e0       	ldi	r24, 0x00	; 0
   119b6:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   119ba:	89 2b       	or	r24, r25
   119bc:	79 f7       	brne	.-34     	; 0x1199c <gpib_error_test+0x1c>
   119be:	0e 94 36 6e 	call	0xdc6c	; 0xdc6c <mmc_ins_status>
   119c2:	01 97       	sbiw	r24, 0x01	; 1
   119c4:	59 f7       	brne	.-42     	; 0x1199c <gpib_error_test+0x1c>
   119c6:	62 c0       	rjmp	.+196    	; 0x11a8c <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   119c8:	01 15       	cp	r16, r1
   119ca:	11 05       	cpc	r17, r1
   119cc:	51 f0       	breq	.+20     	; 0x119e2 <gpib_error_test+0x62>
                printf("<IFC>\n");
   119ce:	88 e2       	ldi	r24, 0x28	; 40
   119d0:	94 e1       	ldi	r25, 0x14	; 20
   119d2:	a0 e0       	ldi	r26, 0x00	; 0
   119d4:	ed b7       	in	r30, 0x3d	; 61
   119d6:	fe b7       	in	r31, 0x3e	; 62
   119d8:	81 83       	std	Z+1, r24	; 0x01
   119da:	92 83       	std	Z+2, r25	; 0x02
   119dc:	a3 83       	std	Z+3, r26	; 0x03
   119de:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   119e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   119e6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119ea:	8d 72       	andi	r24, 0x2D	; 45
   119ec:	99 27       	eor	r25, r25
   119ee:	89 2b       	or	r24, r25
   119f0:	c1 f0       	breq	.+48     	; 0x11a22 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   119f2:	f6 fe       	sbrs	r15, 6
   119f4:	0a c0       	rjmp	.+20     	; 0x11a0a <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   119f6:	8d e1       	ldi	r24, 0x1D	; 29
   119f8:	94 e1       	ldi	r25, 0x14	; 20
   119fa:	a0 e0       	ldi	r26, 0x00	; 0
   119fc:	ed b7       	in	r30, 0x3d	; 61
   119fe:	fe b7       	in	r31, 0x3e	; 62
   11a00:	81 83       	std	Z+1, r24	; 0x01
   11a02:	92 83       	std	Z+2, r25	; 0x02
   11a04:	a3 83       	std	Z+3, r26	; 0x03
   11a06:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11a0a:	d7 ff       	sbrs	r29, 7
   11a0c:	0a c0       	rjmp	.+20     	; 0x11a22 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11a0e:	86 e1       	ldi	r24, 0x16	; 22
   11a10:	94 e1       	ldi	r25, 0x14	; 20
   11a12:	a0 e0       	ldi	r26, 0x00	; 0
   11a14:	ed b7       	in	r30, 0x3d	; 61
   11a16:	fe b7       	in	r31, 0x3e	; 62
   11a18:	81 83       	std	Z+1, r24	; 0x01
   11a1a:	92 83       	std	Z+2, r25	; 0x02
   11a1c:	a3 83       	std	Z+3, r26	; 0x03
   11a1e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        }

        if(uart_keyhit(0))
   11a22:	80 e0       	ldi	r24, 0x00	; 0
   11a24:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   11a28:	89 2b       	or	r24, r25
   11a2a:	51 f0       	breq	.+20     	; 0x11a40 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11a2c:	89 e0       	ldi	r24, 0x09	; 9
   11a2e:	94 e1       	ldi	r25, 0x14	; 20
   11a30:	a0 e0       	ldi	r26, 0x00	; 0
   11a32:	ed b7       	in	r30, 0x3d	; 61
   11a34:	fe b7       	in	r31, 0x3e	; 62
   11a36:	81 83       	std	Z+1, r24	; 0x01
   11a38:	92 83       	std	Z+2, r25	; 0x02
   11a3a:	a3 83       	std	Z+3, r26	; 0x03
   11a3c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

        if( mmc_ins_status() != 1 )
   11a40:	0e 94 36 6e 	call	0xdc6c	; 0xdc6c <mmc_ins_status>
   11a44:	01 97       	sbiw	r24, 0x01	; 1
   11a46:	51 f0       	breq	.+20     	; 0x11a5c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11a48:	88 ef       	ldi	r24, 0xF8	; 248
   11a4a:	93 e1       	ldi	r25, 0x13	; 19
   11a4c:	a0 e0       	ldi	r26, 0x00	; 0
   11a4e:	ed b7       	in	r30, 0x3d	; 61
   11a50:	fe b7       	in	r31, 0x3e	; 62
   11a52:	81 83       	std	Z+1, r24	; 0x01
   11a54:	92 83       	std	Z+2, r25	; 0x02
   11a56:	a3 83       	std	Z+3, r26	; 0x03
   11a58:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

        if(val & IFC_FLAG)
   11a5c:	01 15       	cp	r16, r1
   11a5e:	11 05       	cpc	r17, r1
   11a60:	09 f0       	breq	.+2      	; 0x11a64 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11a62:	f3 de       	rcall	.-538    	; 0x1184a <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11a64:	80 e0       	ldi	r24, 0x00	; 0
   11a66:	0e 94 7d 28 	call	0x50fa	; 0x50fa <uart_keyhit>
   11a6a:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11a6c:	11 f0       	breq	.+4      	; 0x11a72 <gpib_error_test+0xf2>
   11a6e:	ed de       	rcall	.-550    	; 0x1184a <gpib_init_devices>
   11a70:	0b c0       	rjmp	.+22     	; 0x11a88 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11a72:	0e 94 36 6e 	call	0xdc6c	; 0xdc6c <mmc_ins_status>
   11a76:	01 97       	sbiw	r24, 0x01	; 1
   11a78:	39 f4       	brne	.+14     	; 0x11a88 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11a7a:	01 15       	cp	r16, r1
   11a7c:	11 05       	cpc	r17, r1
   11a7e:	31 f0       	breq	.+12     	; 0x11a8c <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11a80:	54 98       	cbi	0x0a, 4	; 10
   11a82:	4c 9b       	sbis	0x09, 4	; 9
   11a84:	fd cf       	rjmp	.-6      	; 0x11a80 <gpib_error_test+0x100>
   11a86:	02 c0       	rjmp	.+4      	; 0x11a8c <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11a88:	c1 e0       	ldi	r28, 0x01	; 1
   11a8a:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11a8c:	ce 01       	movw	r24, r28
   11a8e:	cd b7       	in	r28, 0x3d	; 61
   11a90:	de b7       	in	r29, 0x3e	; 62
   11a92:	23 96       	adiw	r28, 0x03	; 3
   11a94:	e6 e0       	ldi	r30, 0x06	; 6
   11a96:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00011a9a <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11a9a:	1f 93       	push	r17
   11a9c:	cf 93       	push	r28
   11a9e:	df 93       	push	r29
   11aa0:	ec 01       	movw	r28, r24
   11aa2:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11aa4:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11aa8:	8f 35       	cpi	r24, 0x5F	; 95
   11aaa:	91 f0       	breq	.+36     	; 0x11ad0 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11aac:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11ab0:	90 e0       	ldi	r25, 0x00	; 0
   11ab2:	76 de       	rcall	.-788    	; 0x117a0 <AMIGO_is_MLA>
   11ab4:	89 2b       	or	r24, r25
   11ab6:	c9 f4       	brne	.+50     	; 0x11aea <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11ab8:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11abc:	90 e0       	ldi	r25, 0x00	; 0
   11abe:	3d de       	rcall	.-902    	; 0x1173a <SS80_is_MLA>
   11ac0:	89 2b       	or	r24, r25
   11ac2:	11 f5       	brne	.+68     	; 0x11b08 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ac4:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11ac8:	90 e0       	ldi	r25, 0x00	; 0
   11aca:	9d de       	rcall	.-710    	; 0x11806 <PRINTER_is_MLA>
   11acc:	89 2b       	or	r24, r25
   11ace:	59 f5       	brne	.+86     	; 0x11b26 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11ad0:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11ad4:	8f 33       	cpi	r24, 0x3F	; 63
   11ad6:	19 f4       	brne	.+6      	; 0x11ade <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11ad8:	80 e0       	ldi	r24, 0x00	; 0
   11ada:	90 e0       	ldi	r25, 0x00	; 0
   11adc:	2e c0       	rjmp	.+92     	; 0x11b3a <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11ade:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11ae2:	90 e0       	ldi	r25, 0x00	; 0
   11ae4:	6e de       	rcall	.-804    	; 0x117c2 <AMIGO_is_MTA>
   11ae6:	89 2b       	or	r24, r25
   11ae8:	49 f0       	breq	.+18     	; 0x11afc <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11aea:	11 23       	and	r17, r17
   11aec:	11 f0       	breq	.+4      	; 0x11af2 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11aee:	ce 01       	movw	r24, r28
   11af0:	41 d8       	rcall	.-3966   	; 0x10b74 <gpib_unread>
   11af2:	80 91 f6 1f 	lds	r24, 0x1FF6	; 0x801ff6 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11af6:	0e 94 ed ba 	call	0x175da	; 0x175da <AMIGO_COMMANDS>
   11afa:	1d c0       	rjmp	.+58     	; 0x11b36 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11afc:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11b00:	90 e0       	ldi	r25, 0x00	; 0
   11b02:	2c de       	rcall	.-936    	; 0x1175c <SS80_is_MTA>
   11b04:	89 2b       	or	r24, r25
   11b06:	49 f0       	breq	.+18     	; 0x11b1a <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11b08:	11 23       	and	r17, r17
   11b0a:	11 f0       	breq	.+4      	; 0x11b10 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11b0c:	ce 01       	movw	r24, r28
   11b0e:	32 d8       	rcall	.-3996   	; 0x10b74 <gpib_unread>
   11b10:	80 91 f6 1f 	lds	r24, 0x1FF6	; 0x801ff6 <secondary>
            status = SS80_COMMANDS(secondary);
   11b14:	0e 94 0d af 	call	0x15e1a	; 0x15e1a <SS80_COMMANDS>
   11b18:	0e c0       	rjmp	.+28     	; 0x11b36 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11b1a:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11b1e:	90 e0       	ldi	r25, 0x00	; 0
   11b20:	83 de       	rcall	.-762    	; 0x11828 <PRINTER_is_MTA>
   11b22:	89 2b       	or	r24, r25
   11b24:	c9 f2       	breq	.-78     	; 0x11ad8 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11b26:	11 23       	and	r17, r17
   11b28:	11 f0       	breq	.+4      	; 0x11b2e <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11b2a:	ce 01       	movw	r24, r28
   11b2c:	23 d8       	rcall	.-4026   	; 0x10b74 <gpib_unread>
   11b2e:	80 91 f6 1f 	lds	r24, 0x1FF6	; 0x801ff6 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11b32:	0e 94 66 bd 	call	0x17acc	; 0x17acc <PRINTER_COMMANDS>
   11b36:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <secondary>
            secondary = 0;
   11b3a:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11b3c:	cf 91       	pop	r28
   11b3e:	1f 91       	pop	r17
   11b40:	08 95       	ret

00011b42 <Send_Identify>:
   11b42:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11b44:	df 92       	push	r13
   11b46:	ff 92       	push	r15
   11b48:	0f 93       	push	r16
   11b4a:	1f 93       	push	r17
   11b4c:	cf 93       	push	r28
   11b4e:	df 93       	push	r29
   11b50:	cd b7       	in	r28, 0x3d	; 61
   11b52:	de b7       	in	r29, 0x3e	; 62
   11b54:	2b 97       	sbiw	r28, 0x0b	; 11
   11b56:	0f b6       	in	r0, 0x3f	; 63
   11b58:	f8 94       	cli
   11b5a:	de bf       	out	0x3e, r29	; 62
   11b5c:	0f be       	out	0x3f, r0	; 63
   11b5e:	cd bf       	out	0x3d, r28	; 61
   11b60:	f8 2e       	mov	r15, r24
   11b62:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11b64:	80 e0       	ldi	r24, 0x00	; 0
   11b66:	91 e0       	ldi	r25, 0x01	; 1
   11b68:	9b 87       	std	Y+11, r25	; 0x0b
   11b6a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11b6c:	8b 01       	movw	r16, r22
   11b6e:	20 e0       	ldi	r18, 0x00	; 0
   11b70:	30 e0       	ldi	r19, 0x00	; 0
   11b72:	42 e0       	ldi	r20, 0x02	; 2
   11b74:	50 e0       	ldi	r21, 0x00	; 0
   11b76:	60 e0       	ldi	r22, 0x00	; 0
   11b78:	70 e0       	ldi	r23, 0x00	; 0
   11b7a:	ce 01       	movw	r24, r28
   11b7c:	08 96       	adiw	r24, 0x08	; 8
   11b7e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11b82:	ae 01       	movw	r20, r28
   11b84:	46 5f       	subi	r20, 0xF6	; 246
   11b86:	5f 4f       	sbci	r21, 0xFF	; 255
   11b88:	62 e0       	ldi	r22, 0x02	; 2
   11b8a:	70 e0       	ldi	r23, 0x00	; 0
   11b8c:	ce 01       	movw	r24, r28
   11b8e:	08 96       	adiw	r24, 0x08	; 8
   11b90:	d4 dc       	rcall	.-1624   	; 0x1153a <gpib_write_str>
   11b92:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b96:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b9a:	02 97       	sbiw	r24, 0x02	; 2
   11b9c:	79 f0       	breq	.+30     	; 0x11bbc <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b9e:	25 72       	andi	r18, 0x25	; 37
   11ba0:	33 27       	eor	r19, r19
   11ba2:	23 2b       	or	r18, r19
   11ba4:	f9 f0       	breq	.+62     	; 0x11be4 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11ba6:	ed b7       	in	r30, 0x3d	; 61
   11ba8:	fe b7       	in	r31, 0x3e	; 62
   11baa:	d7 82       	std	Z+7, r13	; 0x07
   11bac:	c6 82       	std	Z+6, r12	; 0x06
   11bae:	8f 2d       	mov	r24, r15
   11bb0:	90 e0       	ldi	r25, 0x00	; 0
   11bb2:	95 83       	std	Z+5, r25	; 0x05
   11bb4:	84 83       	std	Z+4, r24	; 0x04
   11bb6:	87 ed       	ldi	r24, 0xD7	; 215
   11bb8:	93 e1       	ldi	r25, 0x13	; 19
   11bba:	0e c0       	rjmp	.+28     	; 0x11bd8 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bbc:	24 72       	andi	r18, 0x24	; 36
   11bbe:	33 27       	eor	r19, r19
   11bc0:	23 2b       	or	r18, r19
   11bc2:	81 f0       	breq	.+32     	; 0x11be4 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11bc4:	ed b7       	in	r30, 0x3d	; 61
   11bc6:	fe b7       	in	r31, 0x3e	; 62
   11bc8:	d7 82       	std	Z+7, r13	; 0x07
   11bca:	c6 82       	std	Z+6, r12	; 0x06
   11bcc:	8f 2d       	mov	r24, r15
   11bce:	90 e0       	ldi	r25, 0x00	; 0
   11bd0:	95 83       	std	Z+5, r25	; 0x05
   11bd2:	84 83       	std	Z+4, r24	; 0x04
   11bd4:	8d eb       	ldi	r24, 0xBD	; 189
   11bd6:	93 e1       	ldi	r25, 0x13	; 19
   11bd8:	a0 e0       	ldi	r26, 0x00	; 0
   11bda:	81 83       	std	Z+1, r24	; 0x01
   11bdc:	92 83       	std	Z+2, r25	; 0x02
   11bde:	a3 83       	std	Z+3, r26	; 0x03
   11be0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    return (status & ERROR_MASK);
   11be4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11be6:	9b 85       	ldd	r25, Y+11	; 0x0b
   11be8:	88 27       	eor	r24, r24
   11bea:	90 7d       	andi	r25, 0xD0	; 208
}
   11bec:	2b 96       	adiw	r28, 0x0b	; 11
   11bee:	0f b6       	in	r0, 0x3f	; 63
   11bf0:	f8 94       	cli
   11bf2:	de bf       	out	0x3e, r29	; 62
   11bf4:	0f be       	out	0x3f, r0	; 63
   11bf6:	cd bf       	out	0x3d, r28	; 61
   11bf8:	df 91       	pop	r29
   11bfa:	cf 91       	pop	r28
   11bfc:	1f 91       	pop	r17
   11bfe:	0f 91       	pop	r16
   11c00:	ff 90       	pop	r15
   11c02:	df 90       	pop	r13
   11c04:	cf 90       	pop	r12
   11c06:	08 95       	ret

00011c08 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11c08:	00 d0       	rcall	.+0      	; 0x11c0a <GPIB+0x2>
   11c0a:	00 d0       	rcall	.+0      	; 0x11c0c <GPIB+0x4>
   11c0c:	1f 92       	push	r1
   11c0e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11c12:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11c16:	85 30       	cpi	r24, 0x05	; 5
   11c18:	89 f4       	brne	.+34     	; 0x11c3c <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11c1a:	27 71       	andi	r18, 0x17	; 23
   11c1c:	33 27       	eor	r19, r19
   11c1e:	23 2b       	or	r18, r19
   11c20:	51 f0       	breq	.+20     	; 0x11c36 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11c22:	85 ea       	ldi	r24, 0xA5	; 165
   11c24:	93 e1       	ldi	r25, 0x13	; 19
   11c26:	a0 e0       	ldi	r26, 0x00	; 0
   11c28:	ed b7       	in	r30, 0x3d	; 61
   11c2a:	fe b7       	in	r31, 0x3e	; 62
   11c2c:	81 83       	std	Z+1, r24	; 0x01
   11c2e:	92 83       	std	Z+2, r25	; 0x02
   11c30:	a3 83       	std	Z+3, r26	; 0x03
   11c32:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        spoll = 0;
   11c36:	10 92 f2 1f 	sts	0x1FF2, r1	; 0x801ff2 <spoll>
   11c3a:	a0 c0       	rjmp	.+320    	; 0x11d7c <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11c3c:	85 31       	cpi	r24, 0x15	; 21
   11c3e:	39 f4       	brne	.+14     	; 0x11c4e <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11c40:	27 71       	andi	r18, 0x17	; 23
   11c42:	33 27       	eor	r19, r19
   11c44:	23 2b       	or	r18, r19
   11c46:	b9 f3       	breq	.-18     	; 0x11c36 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11c48:	8d e8       	ldi	r24, 0x8D	; 141
   11c4a:	93 e1       	ldi	r25, 0x13	; 19
   11c4c:	ec cf       	rjmp	.-40     	; 0x11c26 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11c4e:	88 31       	cpi	r24, 0x18	; 24
   11c50:	d9 f4       	brne	.+54     	; 0x11c88 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c52:	26 70       	andi	r18, 0x06	; 6
   11c54:	33 27       	eor	r19, r19
   11c56:	23 2b       	or	r18, r19
   11c58:	51 f0       	breq	.+20     	; 0x11c6e <GPIB+0x66>
            printf("[SPE]\n");
   11c5a:	86 e8       	ldi	r24, 0x86	; 134
   11c5c:	93 e1       	ldi	r25, 0x13	; 19
   11c5e:	a0 e0       	ldi	r26, 0x00	; 0
   11c60:	ed b7       	in	r30, 0x3d	; 61
   11c62:	fe b7       	in	r31, 0x3e	; 62
   11c64:	81 83       	std	Z+1, r24	; 0x01
   11c66:	92 83       	std	Z+2, r25	; 0x02
   11c68:	a3 83       	std	Z+3, r26	; 0x03
   11c6a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
        spoll = 1;
   11c6e:	81 e0       	ldi	r24, 0x01	; 1
   11c70:	80 93 f2 1f 	sts	0x1FF2, r24	; 0x801ff2 <spoll>
        if(SS80_is_MTA(talking))
   11c74:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11c78:	90 e0       	ldi	r25, 0x00	; 0
   11c7a:	70 dd       	rcall	.-1312   	; 0x1175c <SS80_is_MTA>
   11c7c:	89 2b       	or	r24, r25
   11c7e:	09 f4       	brne	.+2      	; 0x11c82 <GPIB+0x7a>
   11c80:	7d c0       	rjmp	.+250    	; 0x11d7c <GPIB+0x174>
        {
            return( SS80_Report() );
   11c82:	0e 94 c6 aa 	call	0x1558c	; 0x1558c <SS80_Report>
   11c86:	7c c0       	rjmp	.+248    	; 0x11d80 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11c88:	89 31       	cpi	r24, 0x19	; 25
   11c8a:	39 f4       	brne	.+14     	; 0x11c9a <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c8c:	26 70       	andi	r18, 0x06	; 6
   11c8e:	33 27       	eor	r19, r19
   11c90:	23 2b       	or	r18, r19
   11c92:	89 f2       	breq	.-94     	; 0x11c36 <GPIB+0x2e>
            printf("[SPD]\n");
   11c94:	8f e7       	ldi	r24, 0x7F	; 127
   11c96:	93 e1       	ldi	r25, 0x13	; 19
   11c98:	c6 cf       	rjmp	.-116    	; 0x11c26 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11c9a:	84 30       	cpi	r24, 0x04	; 4
   11c9c:	09 f0       	breq	.+2      	; 0x11ca0 <GPIB+0x98>
   11c9e:	48 c0       	rjmp	.+144    	; 0x11d30 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ca0:	22 ff       	sbrs	r18, 2
   11ca2:	0a c0       	rjmp	.+20     	; 0x11cb8 <GPIB+0xb0>
            printf("[SDC]\n");
   11ca4:	88 e7       	ldi	r24, 0x78	; 120
   11ca6:	93 e1       	ldi	r25, 0x13	; 19
   11ca8:	a0 e0       	ldi	r26, 0x00	; 0
   11caa:	ed b7       	in	r30, 0x3d	; 61
   11cac:	fe b7       	in	r31, 0x3e	; 62
   11cae:	81 83       	std	Z+1, r24	; 0x01
   11cb0:	92 83       	std	Z+2, r25	; 0x02
   11cb2:	a3 83       	std	Z+3, r26	; 0x03
   11cb4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11cb8:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11cbc:	90 e0       	ldi	r25, 0x00	; 0
   11cbe:	3d dd       	rcall	.-1414   	; 0x1173a <SS80_is_MLA>
   11cc0:	89 2b       	or	r24, r25
   11cc2:	d9 f0       	breq	.+54     	; 0x11cfa <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ccc:	84 72       	andi	r24, 0x24	; 36
   11cce:	99 27       	eor	r25, r25
   11cd0:	89 2b       	or	r24, r25
   11cd2:	51 f0       	breq	.+20     	; 0x11ce8 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11cd4:	8c e6       	ldi	r24, 0x6C	; 108
   11cd6:	93 e1       	ldi	r25, 0x13	; 19
   11cd8:	a0 e0       	ldi	r26, 0x00	; 0
   11cda:	ed b7       	in	r30, 0x3d	; 61
   11cdc:	fe b7       	in	r31, 0x3e	; 62
   11cde:	81 83       	std	Z+1, r24	; 0x01
   11ce0:	92 83       	std	Z+2, r25	; 0x02
   11ce2:	a3 83       	std	Z+3, r26	; 0x03
   11ce4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11ce8:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   11cec:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   11cf0:	85 81       	ldd	r24, Z+5	; 0x05
   11cf2:	90 e0       	ldi	r25, 0x00	; 0
   11cf4:	0e 94 92 ab 	call	0x15724	; 0x15724 <SS80_Selected_Device_Clear>
   11cf8:	43 c0       	rjmp	.+134    	; 0x11d80 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11cfa:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11cfe:	90 e0       	ldi	r25, 0x00	; 0
   11d00:	4f dd       	rcall	.-1378   	; 0x117a0 <AMIGO_is_MLA>
   11d02:	89 2b       	or	r24, r25
   11d04:	d9 f1       	breq	.+118    	; 0x11d7c <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d0a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d0e:	84 72       	andi	r24, 0x24	; 36
   11d10:	99 27       	eor	r25, r25
   11d12:	89 2b       	or	r24, r25
   11d14:	51 f0       	breq	.+20     	; 0x11d2a <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11d16:	8f e5       	ldi	r24, 0x5F	; 95
   11d18:	93 e1       	ldi	r25, 0x13	; 19
   11d1a:	a0 e0       	ldi	r26, 0x00	; 0
   11d1c:	ed b7       	in	r30, 0x3d	; 61
   11d1e:	fe b7       	in	r31, 0x3e	; 62
   11d20:	81 83       	std	Z+1, r24	; 0x01
   11d22:	92 83       	std	Z+2, r25	; 0x02
   11d24:	a3 83       	std	Z+3, r26	; 0x03
   11d26:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11d2a:	0e 94 d3 b5 	call	0x16ba6	; 0x16ba6 <amigo_cmd_clear>
   11d2e:	28 c0       	rjmp	.+80     	; 0x11d80 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11d30:	84 31       	cpi	r24, 0x14	; 20
   11d32:	99 f4       	brne	.+38     	; 0x11d5a <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d34:	22 ff       	sbrs	r18, 2
   11d36:	0a c0       	rjmp	.+20     	; 0x11d4c <GPIB+0x144>
            printf("[DCL]\n");
   11d38:	88 e5       	ldi	r24, 0x58	; 88
   11d3a:	93 e1       	ldi	r25, 0x13	; 19
   11d3c:	a0 e0       	ldi	r26, 0x00	; 0
   11d3e:	ed b7       	in	r30, 0x3d	; 61
   11d40:	fe b7       	in	r31, 0x3e	; 62
   11d42:	81 83       	std	Z+1, r24	; 0x01
   11d44:	92 83       	std	Z+2, r25	; 0x02
   11d46:	a3 83       	std	Z+3, r26	; 0x03
   11d48:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11d4c:	0e 94 84 ab 	call	0x15708	; 0x15708 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11d50:	0e 94 d3 b5 	call	0x16ba6	; 0x16ba6 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11d54:	0e 94 f2 bb 	call	0x177e4	; 0x177e4 <printer_close>
   11d58:	11 c0       	rjmp	.+34     	; 0x11d7c <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d5a:	25 71       	andi	r18, 0x15	; 21
   11d5c:	33 27       	eor	r19, r19
   11d5e:	23 2b       	or	r18, r19
   11d60:	69 f0       	breq	.+26     	; 0x11d7c <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11d62:	90 e0       	ldi	r25, 0x00	; 0
   11d64:	ed b7       	in	r30, 0x3d	; 61
   11d66:	fe b7       	in	r31, 0x3e	; 62
   11d68:	95 83       	std	Z+5, r25	; 0x05
   11d6a:	84 83       	std	Z+4, r24	; 0x04
   11d6c:	87 e3       	ldi	r24, 0x37	; 55
   11d6e:	93 e1       	ldi	r25, 0x13	; 19
   11d70:	a0 e0       	ldi	r26, 0x00	; 0
   11d72:	81 83       	std	Z+1, r24	; 0x01
   11d74:	92 83       	std	Z+2, r25	; 0x02
   11d76:	a3 83       	std	Z+3, r26	; 0x03
   11d78:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(0);
   11d7c:	80 e0       	ldi	r24, 0x00	; 0
   11d7e:	90 e0       	ldi	r25, 0x00	; 0
}
   11d80:	0f 90       	pop	r0
   11d82:	0f 90       	pop	r0
   11d84:	0f 90       	pop	r0
   11d86:	0f 90       	pop	r0
   11d88:	0f 90       	pop	r0
   11d8a:	08 95       	ret

00011d8c <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11d8c:	cf 93       	push	r28
   11d8e:	df 93       	push	r29
   11d90:	00 d0       	rcall	.+0      	; 0x11d92 <GPIB_TALK+0x6>
   11d92:	00 d0       	rcall	.+0      	; 0x11d94 <GPIB_TALK+0x8>
   11d94:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11d96:	90 91 f5 1f 	lds	r25, 0x1FF5	; 0x801ff5 <talking>
   11d9a:	90 93 f8 1f 	sts	0x1FF8, r25	; 0x801ff8 <talking_last>
    talking = ch;
   11d9e:	80 93 f5 1f 	sts	0x1FF5, r24	; 0x801ff5 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11da2:	8f 35       	cpi	r24, 0x5F	; 95
   11da4:	79 f4       	brne	.+30     	; 0x11dc4 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11da6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11daa:	82 ff       	sbrs	r24, 2
   11dac:	7f c0       	rjmp	.+254    	; 0x11eac <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11dae:	84 ee       	ldi	r24, 0xE4	; 228
   11db0:	92 e1       	ldi	r25, 0x12	; 18
   11db2:	a0 e0       	ldi	r26, 0x00	; 0
   11db4:	ed b7       	in	r30, 0x3d	; 61
   11db6:	fe b7       	in	r31, 0x3e	; 62
   11db8:	81 83       	std	Z+1, r24	; 0x01
   11dba:	92 83       	std	Z+2, r25	; 0x02
   11dbc:	a3 83       	std	Z+3, r26	; 0x03
   11dbe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   11dc2:	74 c0       	rjmp	.+232    	; 0x11eac <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11dc4:	c8 2f       	mov	r28, r24
   11dc6:	d0 e0       	ldi	r29, 0x00	; 0
   11dc8:	ce 01       	movw	r24, r28
   11dca:	c8 dc       	rcall	.-1648   	; 0x1175c <SS80_is_MTA>
   11dcc:	89 2b       	or	r24, r25
   11dce:	e1 f0       	breq	.+56     	; 0x11e08 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dd0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dd4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dd8:	84 72       	andi	r24, 0x24	; 36
   11dda:	99 27       	eor	r25, r25
   11ddc:	89 2b       	or	r24, r25
   11dde:	61 f0       	breq	.+24     	; 0x11df8 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11de0:	ed b7       	in	r30, 0x3d	; 61
   11de2:	fe b7       	in	r31, 0x3e	; 62
   11de4:	d5 83       	std	Z+5, r29	; 0x05
   11de6:	c4 83       	std	Z+4, r28	; 0x04
   11de8:	83 ed       	ldi	r24, 0xD3	; 211
   11dea:	92 e1       	ldi	r25, 0x12	; 18
   11dec:	a0 e0       	ldi	r26, 0x00	; 0
   11dee:	81 83       	std	Z+1, r24	; 0x01
   11df0:	92 83       	std	Z+2, r25	; 0x02
   11df2:	a3 83       	std	Z+3, r26	; 0x03
   11df4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif

        if (spoll)
   11df8:	80 91 f2 1f 	lds	r24, 0x1FF2	; 0x801ff2 <spoll>
   11dfc:	88 23       	and	r24, r24
   11dfe:	09 f4       	brne	.+2      	; 0x11e02 <GPIB_TALK+0x76>
   11e00:	55 c0       	rjmp	.+170    	; 0x11eac <GPIB_TALK+0x120>
        {
            SS80_Report();
   11e02:	0e 94 c6 aa 	call	0x1558c	; 0x1558c <SS80_Report>
   11e06:	52 c0       	rjmp	.+164    	; 0x11eac <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11e08:	ce 01       	movw	r24, r28
   11e0a:	db dc       	rcall	.-1610   	; 0x117c2 <AMIGO_is_MTA>
   11e0c:	89 2b       	or	r24, r25
   11e0e:	81 f0       	breq	.+32     	; 0x11e30 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e14:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e18:	84 72       	andi	r24, 0x24	; 36
   11e1a:	99 27       	eor	r25, r25
   11e1c:	89 2b       	or	r24, r25
   11e1e:	09 f4       	brne	.+2      	; 0x11e22 <GPIB_TALK+0x96>
   11e20:	45 c0       	rjmp	.+138    	; 0x11eac <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11e22:	ed b7       	in	r30, 0x3d	; 61
   11e24:	fe b7       	in	r31, 0x3e	; 62
   11e26:	d5 83       	std	Z+5, r29	; 0x05
   11e28:	c4 83       	std	Z+4, r28	; 0x04
   11e2a:	81 ec       	ldi	r24, 0xC1	; 193
   11e2c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11e2e:	38 c0       	rjmp	.+112    	; 0x11ea0 <GPIB_TALK+0x114>
   11e30:	ce 01       	movw	r24, r28
   11e32:	fa dc       	rcall	.-1548   	; 0x11828 <PRINTER_is_MTA>
   11e34:	89 2b       	or	r24, r25
   11e36:	79 f0       	breq	.+30     	; 0x11e56 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e40:	84 72       	andi	r24, 0x24	; 36
   11e42:	99 27       	eor	r25, r25
   11e44:	89 2b       	or	r24, r25
   11e46:	91 f1       	breq	.+100    	; 0x11eac <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11e48:	ed b7       	in	r30, 0x3d	; 61
   11e4a:	fe b7       	in	r31, 0x3e	; 62
   11e4c:	d5 83       	std	Z+5, r29	; 0x05
   11e4e:	c4 83       	std	Z+4, r28	; 0x04
   11e50:	8d ea       	ldi	r24, 0xAD	; 173
   11e52:	92 e1       	ldi	r25, 0x12	; 18
   11e54:	25 c0       	rjmp	.+74     	; 0x11ea0 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11e56:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11e5a:	90 e0       	ldi	r25, 0x00	; 0
   11e5c:	d4 dc       	rcall	.-1624   	; 0x11806 <PRINTER_is_MLA>
   11e5e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e62:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e66:	89 2b       	or	r24, r25
   11e68:	99 f0       	breq	.+38     	; 0x11e90 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e6a:	24 72       	andi	r18, 0x24	; 36
   11e6c:	33 27       	eor	r19, r19
   11e6e:	23 2b       	or	r18, r19
   11e70:	51 f0       	breq	.+20     	; 0x11e86 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11e72:	8d e9       	ldi	r24, 0x9D	; 157
   11e74:	92 e1       	ldi	r25, 0x12	; 18
   11e76:	a0 e0       	ldi	r26, 0x00	; 0
   11e78:	ed b7       	in	r30, 0x3d	; 61
   11e7a:	fe b7       	in	r31, 0x3e	; 62
   11e7c:	81 83       	std	Z+1, r24	; 0x01
   11e7e:	92 83       	std	Z+2, r25	; 0x02
   11e80:	a3 83       	std	Z+3, r26	; 0x03
   11e82:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printer_open(NULL);
   11e86:	80 e0       	ldi	r24, 0x00	; 0
   11e88:	90 e0       	ldi	r25, 0x00	; 0
   11e8a:	0e 94 4a bc 	call	0x17894	; 0x17894 <printer_open>
   11e8e:	0e c0       	rjmp	.+28     	; 0x11eac <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e90:	22 ff       	sbrs	r18, 2
   11e92:	0c c0       	rjmp	.+24     	; 0x11eac <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11e94:	ed b7       	in	r30, 0x3d	; 61
   11e96:	fe b7       	in	r31, 0x3e	; 62
   11e98:	d5 83       	std	Z+5, r29	; 0x05
   11e9a:	c4 83       	std	Z+4, r28	; 0x04
   11e9c:	81 e9       	ldi	r24, 0x91	; 145
   11e9e:	92 e1       	ldi	r25, 0x12	; 18
   11ea0:	a0 e0       	ldi	r26, 0x00	; 0
   11ea2:	81 83       	std	Z+1, r24	; 0x01
   11ea4:	92 83       	std	Z+2, r25	; 0x02
   11ea6:	a3 83       	std	Z+3, r26	; 0x03
   11ea8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11eac:	80 e0       	ldi	r24, 0x00	; 0
   11eae:	90 e0       	ldi	r25, 0x00	; 0
   11eb0:	cd b7       	in	r28, 0x3d	; 61
   11eb2:	de b7       	in	r29, 0x3e	; 62
   11eb4:	25 96       	adiw	r28, 0x05	; 5
   11eb6:	e2 e0       	ldi	r30, 0x02	; 2
   11eb8:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00011ebc <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11ebc:	a9 e0       	ldi	r26, 0x09	; 9
   11ebe:	b0 e0       	ldi	r27, 0x00	; 0
   11ec0:	e4 e6       	ldi	r30, 0x64	; 100
   11ec2:	ff e8       	ldi	r31, 0x8F	; 143
   11ec4:	0c 94 aa e3 	jmp	0x1c754	; 0x1c754 <__prologue_saves__+0x1e>
   11ec8:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11eca:	c8 2f       	mov	r28, r24
   11ecc:	d0 e0       	ldi	r29, 0x00	; 0
   11ece:	ce 01       	movw	r24, r28
   11ed0:	56 dc       	rcall	.-1876   	; 0x1177e <SS80_is_MSA>
   11ed2:	89 2b       	or	r24, r25
   11ed4:	09 f1       	breq	.+66     	; 0x11f18 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11eda:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ede:	84 72       	andi	r24, 0x24	; 36
   11ee0:	99 27       	eor	r25, r25
   11ee2:	89 2b       	or	r24, r25
   11ee4:	61 f0       	breq	.+24     	; 0x11efe <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11ee6:	ed b7       	in	r30, 0x3d	; 61
   11ee8:	fe b7       	in	r31, 0x3e	; 62
   11eea:	d5 83       	std	Z+5, r29	; 0x05
   11eec:	c4 83       	std	Z+4, r28	; 0x04
   11eee:	80 e8       	ldi	r24, 0x80	; 128
   11ef0:	92 e1       	ldi	r25, 0x12	; 18
   11ef2:	a0 e0       	ldi	r26, 0x00	; 0
   11ef4:	81 83       	std	Z+1, r24	; 0x01
   11ef6:	92 83       	std	Z+2, r25	; 0x02
   11ef8:	a3 83       	std	Z+3, r26	; 0x03
   11efa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11efe:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   11f02:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   11f06:	81 81       	ldd	r24, Z+1	; 0x01
   11f08:	90 e0       	ldi	r25, 0x00	; 0
   11f0a:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11f0e:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   11f12:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   11f16:	25 c0       	rjmp	.+74     	; 0x11f62 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11f18:	ce 01       	movw	r24, r28
   11f1a:	64 dc       	rcall	.-1848   	; 0x117e4 <AMIGO_is_MSA>
   11f1c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11f20:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f24:	89 2b       	or	r24, r25
   11f26:	11 f1       	breq	.+68     	; 0x11f6c <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f28:	c9 01       	movw	r24, r18
   11f2a:	84 72       	andi	r24, 0x24	; 36
   11f2c:	99 27       	eor	r25, r25
   11f2e:	89 2b       	or	r24, r25
   11f30:	61 f0       	breq	.+24     	; 0x11f4a <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11f32:	ed b7       	in	r30, 0x3d	; 61
   11f34:	fe b7       	in	r31, 0x3e	; 62
   11f36:	d5 83       	std	Z+5, r29	; 0x05
   11f38:	c4 83       	std	Z+4, r28	; 0x04
   11f3a:	8e e6       	ldi	r24, 0x6E	; 110
   11f3c:	92 e1       	ldi	r25, 0x12	; 18
   11f3e:	a0 e0       	ldi	r26, 0x00	; 0
   11f40:	81 83       	std	Z+1, r24	; 0x01
   11f42:	92 83       	std	Z+2, r25	; 0x02
   11f44:	a3 83       	std	Z+3, r26	; 0x03
   11f46:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11f4a:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   11f4e:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   11f52:	81 81       	ldd	r24, Z+1	; 0x01
   11f54:	90 e0       	ldi	r25, 0x00	; 0
   11f56:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11f5a:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   11f5e:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   11f62:	64 81       	ldd	r22, Z+4	; 0x04
   11f64:	75 81       	ldd	r23, Z+5	; 0x05
   11f66:	81 2f       	mov	r24, r17
   11f68:	ec dd       	rcall	.-1064   	; 0x11b42 <Send_Identify>
   11f6a:	1d c0       	rjmp	.+58     	; 0x11fa6 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f6c:	c9 01       	movw	r24, r18
   11f6e:	84 72       	andi	r24, 0x24	; 36
   11f70:	99 27       	eor	r25, r25
   11f72:	00 97       	sbiw	r24, 0x00	; 0
   11f74:	c1 f0       	breq	.+48     	; 0x11fa6 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11f76:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   11f7a:	90 e0       	ldi	r25, 0x00	; 0
   11f7c:	ed b7       	in	r30, 0x3d	; 61
   11f7e:	fe b7       	in	r31, 0x3e	; 62
   11f80:	91 87       	std	Z+9, r25	; 0x09
   11f82:	80 87       	std	Z+8, r24	; 0x08
   11f84:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   11f88:	90 e0       	ldi	r25, 0x00	; 0
   11f8a:	97 83       	std	Z+7, r25	; 0x07
   11f8c:	86 83       	std	Z+6, r24	; 0x06
   11f8e:	d5 83       	std	Z+5, r29	; 0x05
   11f90:	c4 83       	std	Z+4, r28	; 0x04
   11f92:	88 e4       	ldi	r24, 0x48	; 72
   11f94:	92 e1       	ldi	r25, 0x12	; 18
   11f96:	a0 e0       	ldi	r26, 0x00	; 0
   11f98:	81 83       	std	Z+1, r24	; 0x01
   11f9a:	92 83       	std	Z+2, r25	; 0x02
   11f9c:	a3 83       	std	Z+3, r26	; 0x03
   11f9e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11fa2:	80 e0       	ldi	r24, 0x00	; 0
   11fa4:	90 e0       	ldi	r25, 0x00	; 0
}
   11fa6:	cd b7       	in	r28, 0x3d	; 61
   11fa8:	de b7       	in	r29, 0x3e	; 62
   11faa:	29 96       	adiw	r28, 0x09	; 9
   11fac:	e3 e0       	ldi	r30, 0x03	; 3
   11fae:	0c 94 c6 e3 	jmp	0x1c78c	; 0x1c78c <__epilogue_restores__+0x1e>

00011fb2 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11fb2:	00 d0       	rcall	.+0      	; 0x11fb4 <listen_cleanup+0x2>
   11fb4:	1f 92       	push	r1
    if(listening_last)
   11fb6:	60 91 f1 1f 	lds	r22, 0x1FF1	; 0x801ff1 <listening_last>
   11fba:	66 23       	and	r22, r22
   11fbc:	e1 f0       	breq	.+56     	; 0x11ff6 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11fbe:	70 e0       	ldi	r23, 0x00	; 0
   11fc0:	40 e2       	ldi	r20, 0x20	; 32
   11fc2:	50 e0       	ldi	r21, 0x00	; 0
   11fc4:	84 e0       	ldi	r24, 0x04	; 4
   11fc6:	90 e0       	ldi	r25, 0x00	; 0
   11fc8:	9c d6       	rcall	.+3384   	; 0x12d02 <find_device>
        if(index == -1)
   11fca:	01 96       	adiw	r24, 0x01	; 1
   11fcc:	a1 f0       	breq	.+40     	; 0x11ff6 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fd2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fd6:	84 72       	andi	r24, 0x24	; 36
   11fd8:	99 27       	eor	r25, r25
   11fda:	89 2b       	or	r24, r25
   11fdc:	51 f0       	breq	.+20     	; 0x11ff2 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11fde:	87 e3       	ldi	r24, 0x37	; 55
   11fe0:	92 e1       	ldi	r25, 0x12	; 18
   11fe2:	a0 e0       	ldi	r26, 0x00	; 0
   11fe4:	ed b7       	in	r30, 0x3d	; 61
   11fe6:	fe b7       	in	r31, 0x3e	; 62
   11fe8:	81 83       	std	Z+1, r24	; 0x01
   11fea:	92 83       	std	Z+2, r25	; 0x02
   11fec:	a3 83       	std	Z+3, r26	; 0x03
   11fee:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printer_close();
   11ff2:	0e 94 f2 bb 	call	0x177e4	; 0x177e4 <printer_close>
    }
}
   11ff6:	0f 90       	pop	r0
   11ff8:	0f 90       	pop	r0
   11ffa:	0f 90       	pop	r0
   11ffc:	08 95       	ret

00011ffe <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11ffe:	cf 93       	push	r28
   12000:	df 93       	push	r29
   12002:	00 d0       	rcall	.+0      	; 0x12004 <GPIB_LISTEN+0x6>
   12004:	00 d0       	rcall	.+0      	; 0x12006 <GPIB_LISTEN+0x8>
   12006:	1f 92       	push	r1
   12008:	c8 2f       	mov	r28, r24
    listening_last = listening;
   1200a:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   1200e:	80 93 f1 1f 	sts	0x1FF1, r24	; 0x801ff1 <listening_last>
    listening = ch;
   12012:	c0 93 f7 1f 	sts	0x1FF7, r28	; 0x801ff7 <listening>

    listen_cleanup();
   12016:	cd df       	rcall	.-102    	; 0x11fb2 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   12018:	cf 33       	cpi	r28, 0x3F	; 63
   1201a:	19 f5       	brne	.+70     	; 0x12062 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   1201c:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12020:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12024:	82 ff       	sbrs	r24, 2
   12026:	74 c0       	rjmp	.+232    	; 0x12110 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   12028:	80 e3       	ldi	r24, 0x30	; 48
   1202a:	93 e1       	ldi	r25, 0x13	; 19
   1202c:	a0 e0       	ldi	r26, 0x00	; 0
   1202e:	ed b7       	in	r30, 0x3d	; 61
   12030:	fe b7       	in	r31, 0x3e	; 62
   12032:	81 83       	std	Z+1, r24	; 0x01
   12034:	92 83       	std	Z+2, r25	; 0x02
   12036:	a3 83       	std	Z+3, r26	; 0x03
   12038:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1203c:	80 91 ef 1d 	lds	r24, 0x1DEF	; 0x801def <lastcmd>
   12040:	90 91 f0 1d 	lds	r25, 0x1DF0	; 0x801df0 <lastcmd+0x1>
   12044:	8f 35       	cpi	r24, 0x5F	; 95
   12046:	91 05       	cpc	r25, r1
   12048:	09 f0       	breq	.+2      	; 0x1204c <GPIB_LISTEN+0x4e>
   1204a:	62 c0       	rjmp	.+196    	; 0x12110 <GPIB_LISTEN+0x112>
                printf("\n");
   1204c:	8e e2       	ldi	r24, 0x2E	; 46
   1204e:	93 e1       	ldi	r25, 0x13	; 19
   12050:	a0 e0       	ldi	r26, 0x00	; 0
   12052:	ed b7       	in	r30, 0x3d	; 61
   12054:	fe b7       	in	r31, 0x3e	; 62
   12056:	81 83       	std	Z+1, r24	; 0x01
   12058:	92 83       	std	Z+2, r25	; 0x02
   1205a:	a3 83       	std	Z+3, r26	; 0x03
   1205c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12060:	57 c0       	rjmp	.+174    	; 0x12110 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12062:	d0 e0       	ldi	r29, 0x00	; 0
   12064:	ce 01       	movw	r24, r28
   12066:	9c db       	rcall	.-2248   	; 0x117a0 <AMIGO_is_MLA>
   12068:	89 2b       	or	r24, r25
   1206a:	81 f0       	breq	.+32     	; 0x1208c <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1206c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12070:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12074:	84 72       	andi	r24, 0x24	; 36
   12076:	99 27       	eor	r25, r25
   12078:	89 2b       	or	r24, r25
   1207a:	09 f4       	brne	.+2      	; 0x1207e <GPIB_LISTEN+0x80>
   1207c:	49 c0       	rjmp	.+146    	; 0x12110 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1207e:	ed b7       	in	r30, 0x3d	; 61
   12080:	fe b7       	in	r31, 0x3e	; 62
   12082:	d5 83       	std	Z+5, r29	; 0x05
   12084:	c4 83       	std	Z+4, r28	; 0x04
   12086:	8c e1       	ldi	r24, 0x1C	; 28
   12088:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   1208a:	3c c0       	rjmp	.+120    	; 0x12104 <GPIB_LISTEN+0x106>
   1208c:	ce 01       	movw	r24, r28
   1208e:	55 db       	rcall	.-2390   	; 0x1173a <SS80_is_MLA>
   12090:	89 2b       	or	r24, r25
   12092:	79 f0       	breq	.+30     	; 0x120b2 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12094:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12098:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1209c:	84 72       	andi	r24, 0x24	; 36
   1209e:	99 27       	eor	r25, r25
   120a0:	89 2b       	or	r24, r25
   120a2:	b1 f1       	breq	.+108    	; 0x12110 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   120a4:	ed b7       	in	r30, 0x3d	; 61
   120a6:	fe b7       	in	r31, 0x3e	; 62
   120a8:	d5 83       	std	Z+5, r29	; 0x05
   120aa:	c4 83       	std	Z+4, r28	; 0x04
   120ac:	8b e0       	ldi	r24, 0x0B	; 11
   120ae:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   120b0:	29 c0       	rjmp	.+82     	; 0x12104 <GPIB_LISTEN+0x106>
   120b2:	ce 01       	movw	r24, r28
   120b4:	a8 db       	rcall	.-2224   	; 0x11806 <PRINTER_is_MLA>
   120b6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   120ba:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120be:	89 2b       	or	r24, r25
   120c0:	c9 f0       	breq	.+50     	; 0x120f4 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120c2:	24 72       	andi	r18, 0x24	; 36
   120c4:	33 27       	eor	r19, r19
   120c6:	23 2b       	or	r18, r19
   120c8:	61 f0       	breq	.+24     	; 0x120e2 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   120ca:	ed b7       	in	r30, 0x3d	; 61
   120cc:	fe b7       	in	r31, 0x3e	; 62
   120ce:	d5 83       	std	Z+5, r29	; 0x05
   120d0:	c4 83       	std	Z+4, r28	; 0x04
   120d2:	87 ef       	ldi	r24, 0xF7	; 247
   120d4:	92 e1       	ldi	r25, 0x12	; 18
   120d6:	a0 e0       	ldi	r26, 0x00	; 0
   120d8:	81 83       	std	Z+1, r24	; 0x01
   120da:	92 83       	std	Z+2, r25	; 0x02
   120dc:	a3 83       	std	Z+3, r26	; 0x03
   120de:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
        if(talking != UNT)
   120e2:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   120e6:	8f 35       	cpi	r24, 0x5F	; 95
   120e8:	99 f0       	breq	.+38     	; 0x12110 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   120ea:	80 e0       	ldi	r24, 0x00	; 0
   120ec:	90 e0       	ldi	r25, 0x00	; 0
   120ee:	0e 94 4a bc 	call	0x17894	; 0x17894 <printer_open>
   120f2:	0e c0       	rjmp	.+28     	; 0x12110 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120f4:	22 ff       	sbrs	r18, 2
   120f6:	0c c0       	rjmp	.+24     	; 0x12110 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   120f8:	ed b7       	in	r30, 0x3d	; 61
   120fa:	fe b7       	in	r31, 0x3e	; 62
   120fc:	d5 83       	std	Z+5, r29	; 0x05
   120fe:	c4 83       	std	Z+4, r28	; 0x04
   12100:	8b ee       	ldi	r24, 0xEB	; 235
   12102:	92 e1       	ldi	r25, 0x12	; 18
   12104:	a0 e0       	ldi	r26, 0x00	; 0
   12106:	81 83       	std	Z+1, r24	; 0x01
   12108:	92 83       	std	Z+2, r25	; 0x02
   1210a:	a3 83       	std	Z+3, r26	; 0x03
   1210c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   12110:	80 e0       	ldi	r24, 0x00	; 0
   12112:	90 e0       	ldi	r25, 0x00	; 0
   12114:	cd b7       	in	r28, 0x3d	; 61
   12116:	de b7       	in	r29, 0x3e	; 62
   12118:	25 96       	adiw	r28, 0x05	; 5
   1211a:	e2 e0       	ldi	r30, 0x02	; 2
   1211c:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00012120 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12120:	cf 93       	push	r28
   12122:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12124:	92 db       	rcall	.-2268   	; 0x1184a <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12126:	10 92 68 1a 	sts	0x1A68, r1	; 0x801a68 <gpib_log_fp+0x1>
   1212a:	10 92 67 1a 	sts	0x1A67, r1	; 0x801a67 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   1212e:	80 e0       	ldi	r24, 0x00	; 0
   12130:	90 e0       	ldi	r25, 0x00	; 0
   12132:	45 d8       	rcall	.-3958   	; 0x111be <gpib_read_byte>
   12134:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12136:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1213a:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1213c:	02 c0       	rjmp	.+4      	; 0x12142 <gpib_task+0x22>
   1213e:	ce 01       	movw	r24, r28
   12140:	56 d9       	rcall	.-3412   	; 0x113ee <gpib_decode>
#endif
        status = gpib_error_test(val);
   12142:	ce 01       	movw	r24, r28
   12144:	1d dc       	rcall	.-1990   	; 0x11980 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12146:	9c 01       	movw	r18, r24
   12148:	23 70       	andi	r18, 0x03	; 3
   1214a:	33 27       	eor	r19, r19
   1214c:	23 2b       	or	r18, r19
   1214e:	09 f0       	breq	.+2      	; 0x12152 <gpib_task+0x32>
   12150:	43 c0       	rjmp	.+134    	; 0x121d8 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12152:	89 2b       	or	r24, r25
   12154:	61 f7       	brne	.-40     	; 0x1212e <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12156:	d2 ff       	sbrs	r29, 2
   12158:	26 c0       	rjmp	.+76     	; 0x121a6 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1215a:	8c 2f       	mov	r24, r28
   1215c:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1215e:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12160:	10 f4       	brcc	.+4      	; 0x12166 <gpib_task+0x46>
   12162:	52 dd       	rcall	.-1372   	; 0x11c08 <GPIB>
                continue;
   12164:	e4 cf       	rjmp	.-56     	; 0x1212e <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12166:	90 ee       	ldi	r25, 0xE0	; 224
   12168:	98 0f       	add	r25, r24
   1216a:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1216c:	10 f4       	brcc	.+4      	; 0x12172 <gpib_task+0x52>
   1216e:	47 df       	rcall	.-370    	; 0x11ffe <GPIB_LISTEN>
                continue;
   12170:	de cf       	rjmp	.-68     	; 0x1212e <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12172:	90 ec       	ldi	r25, 0xC0	; 192
   12174:	98 0f       	add	r25, r24
   12176:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12178:	10 f4       	brcc	.+4      	; 0x1217e <gpib_task+0x5e>
   1217a:	08 de       	rcall	.-1008   	; 0x11d8c <GPIB_TALK>
                continue;
   1217c:	d8 cf       	rjmp	.-80     	; 0x1212e <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1217e:	90 91 f7 1f 	lds	r25, 0x1FF7	; 0x801ff7 <listening>
   12182:	99 23       	and	r25, r25
   12184:	59 f0       	breq	.+22     	; 0x1219c <gpib_task+0x7c>
   12186:	20 91 ef 1d 	lds	r18, 0x1DEF	; 0x801def <lastcmd>
   1218a:	30 91 f0 1d 	lds	r19, 0x1DF0	; 0x801df0 <lastcmd+0x1>
   1218e:	2f 35       	cpi	r18, 0x5F	; 95
   12190:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12192:	21 f4       	brne	.+8      	; 0x1219c <gpib_task+0x7c>
   12194:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12198:	91 de       	rcall	.-734    	; 0x11ebc <GPIB_SECONDARY_ADDRESS>
                continue;
   1219a:	c9 cf       	rjmp	.-110    	; 0x1212e <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1219c:	80 93 f6 1f 	sts	0x1FF6, r24	; 0x801ff6 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   121a0:	60 e0       	ldi	r22, 0x00	; 0
   121a2:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   121a4:	12 c0       	rjmp	.+36     	; 0x121ca <gpib_task+0xaa>
   121a6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   121aa:	90 e0       	ldi	r25, 0x00	; 0
   121ac:	2c db       	rcall	.-2472   	; 0x11806 <PRINTER_is_MLA>
   121ae:	89 2b       	or	r24, r25
   121b0:	29 f0       	breq	.+10     	; 0x121bc <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   121b2:	ce 01       	movw	r24, r28
   121b4:	99 27       	eor	r25, r25
   121b6:	0e 94 ed bc 	call	0x179da	; 0x179da <printer_buffer>
                continue;
   121ba:	b9 cf       	rjmp	.-142    	; 0x1212e <gpib_task+0xe>
            }

            if(!secondary)
   121bc:	80 91 f6 1f 	lds	r24, 0x1FF6	; 0x801ff6 <secondary>
   121c0:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   121c2:	09 f4       	brne	.+2      	; 0x121c6 <gpib_task+0xa6>
   121c4:	b4 cf       	rjmp	.-152    	; 0x1212e <gpib_task+0xe>
   121c6:	61 e0       	ldi	r22, 0x01	; 1
   121c8:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   121ca:	67 dc       	rcall	.-1842   	; 0x11a9a <GPIB_COMMANDS>
   121cc:	d9 db       	rcall	.-2126   	; 0x11980 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   121ce:	83 70       	andi	r24, 0x03	; 3
   121d0:	99 27       	eor	r25, r25
   121d2:	89 2b       	or	r24, r25
   121d4:	09 f4       	brne	.+2      	; 0x121d8 <gpib_task+0xb8>
   121d6:	ab cf       	rjmp	.-170    	; 0x1212e <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   121d8:	df 91       	pop	r29
   121da:	cf 91       	pop	r28
   121dc:	08 95       	ret

000121de <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   121de:	08 95       	ret

000121e0 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   121e0:	cf 93       	push	r28
   121e2:	df 93       	push	r29
   121e4:	00 d0       	rcall	.+0      	; 0x121e6 <gpib_help+0x6>
   121e6:	1f 92       	push	r1
   121e8:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   121ea:	81 ec       	ldi	r24, 0xC1	; 193
   121ec:	96 e1       	ldi	r25, 0x16	; 22
   121ee:	a0 e0       	ldi	r26, 0x00	; 0
   121f0:	ed b7       	in	r30, 0x3d	; 61
   121f2:	fe b7       	in	r31, 0x3e	; 62
   121f4:	81 83       	std	Z+1, r24	; 0x01
   121f6:	92 83       	std	Z+2, r25	; 0x02
   121f8:	a3 83       	std	Z+3, r26	; 0x03
   121fa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    if(full)
   121fe:	cd 2b       	or	r28, r29
   12200:	51 f0       	breq	.+20     	; 0x12216 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12202:	88 ef       	ldi	r24, 0xF8	; 248
   12204:	94 e1       	ldi	r25, 0x14	; 20
   12206:	a0 e0       	ldi	r26, 0x00	; 0
   12208:	ed b7       	in	r30, 0x3d	; 61
   1220a:	fe b7       	in	r31, 0x3e	; 62
   1220c:	81 83       	std	Z+1, r24	; 0x01
   1220e:	92 83       	std	Z+2, r25	; 0x02
   12210:	a3 83       	std	Z+3, r26	; 0x03
   12212:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   12216:	cd b7       	in	r28, 0x3d	; 61
   12218:	de b7       	in	r29, 0x3e	; 62
   1221a:	23 96       	adiw	r28, 0x03	; 3
   1221c:	e2 e0       	ldi	r30, 0x02	; 2
   1221e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00012222 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12222:	a5 e0       	ldi	r26, 0x05	; 5
   12224:	b0 e0       	ldi	r27, 0x00	; 0
   12226:	e7 e1       	ldi	r30, 0x17	; 23
   12228:	f1 e9       	ldi	r31, 0x91	; 145
   1222a:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1222e:	fb 01       	movw	r30, r22
   12230:	e0 80       	ld	r14, Z
   12232:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12234:	e1 14       	cp	r14, r1
   12236:	f1 04       	cpc	r15, r1
   12238:	19 f4       	brne	.+6      	; 0x12240 <gpib_tests+0x1e>
        return(0);
   1223a:	80 e0       	ldi	r24, 0x00	; 0
   1223c:	90 e0       	ldi	r25, 0x00	; 0
   1223e:	de c0       	rjmp	.+444    	; 0x123fc <gpib_tests+0x1da>
   12240:	6b 01       	movw	r12, r22
   12242:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12244:	63 eb       	ldi	r22, 0xB3	; 179
   12246:	7d e0       	ldi	r23, 0x0D	; 13
   12248:	c7 01       	movw	r24, r14
   1224a:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1224e:	89 2b       	or	r24, r25
   12250:	a1 f0       	breq	.+40     	; 0x1227a <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12252:	f6 01       	movw	r30, r12
   12254:	e2 80       	ldd	r14, Z+2	; 0x02
   12256:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12258:	e1 14       	cp	r14, r1
   1225a:	f1 04       	cpc	r15, r1
   1225c:	21 f4       	brne	.+8      	; 0x12266 <gpib_tests+0x44>
        {
            gpib_help(1);
   1225e:	81 e0       	ldi	r24, 0x01	; 1
   12260:	90 e0       	ldi	r25, 0x00	; 0
   12262:	be df       	rcall	.-132    	; 0x121e0 <gpib_help>
   12264:	c9 c0       	rjmp	.+402    	; 0x123f8 <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12266:	6d e7       	ldi	r22, 0x7D	; 125
   12268:	76 e1       	ldi	r23, 0x16	; 22
   1226a:	c7 01       	movw	r24, r14
   1226c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   12270:	89 2b       	or	r24, r25
   12272:	a9 f7       	brne	.-22     	; 0x1225e <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12274:	c2 e0       	ldi	r28, 0x02	; 2
   12276:	d0 e0       	ldi	r29, 0x00	; 0
   12278:	02 c0       	rjmp	.+4      	; 0x1227e <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1227a:	c1 e0       	ldi	r28, 0x01	; 1
   1227c:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1227e:	68 eb       	ldi	r22, 0xB8	; 184
   12280:	7d e0       	ldi	r23, 0x0D	; 13
   12282:	c7 01       	movw	r24, r14
   12284:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   12288:	89 2b       	or	r24, r25
   1228a:	29 f1       	breq	.+74     	; 0x122d6 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1228c:	fe 01       	movw	r30, r28
   1228e:	ee 0f       	add	r30, r30
   12290:	ff 1f       	adc	r31, r31
   12292:	ec 0d       	add	r30, r12
   12294:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12296:	01 90       	ld	r0, Z+
   12298:	f0 81       	ld	r31, Z
   1229a:	e0 2d       	mov	r30, r0
   1229c:	80 81       	ld	r24, Z
   1229e:	8d 33       	cpi	r24, 0x3D	; 61
   122a0:	09 f4       	brne	.+2      	; 0x122a4 <gpib_tests+0x82>
            ++ind;
   122a2:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   122a4:	cc 0f       	add	r28, r28
   122a6:	dd 1f       	adc	r29, r29
   122a8:	cc 0d       	add	r28, r12
   122aa:	dd 1d       	adc	r29, r13
   122ac:	88 81       	ld	r24, Y
   122ae:	99 81       	ldd	r25, Y+1	; 0x01
   122b0:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   122b4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   122b8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   122bc:	ed b7       	in	r30, 0x3d	; 61
   122be:	fe b7       	in	r31, 0x3e	; 62
   122c0:	75 83       	std	Z+5, r23	; 0x05
   122c2:	64 83       	std	Z+4, r22	; 0x04
   122c4:	8b ee       	ldi	r24, 0xEB	; 235
   122c6:	94 e1       	ldi	r25, 0x14	; 20
   122c8:	a0 e0       	ldi	r26, 0x00	; 0
   122ca:	81 83       	std	Z+1, r24	; 0x01
   122cc:	92 83       	std	Z+2, r25	; 0x02
   122ce:	a3 83       	std	Z+3, r26	; 0x03
   122d0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   122d4:	91 c0       	rjmp	.+290    	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   122d6:	6e eb       	ldi	r22, 0xBE	; 190
   122d8:	7d e0       	ldi	r23, 0x0D	; 13
   122da:	c7 01       	movw	r24, r14
   122dc:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   122e0:	89 2b       	or	r24, r25
   122e2:	29 f0       	breq	.+10     	; 0x122ee <gpib_tests+0xcc>
    {
		mount(argc, argv);
   122e4:	b6 01       	movw	r22, r12
   122e6:	c5 01       	movw	r24, r10
   122e8:	0e 94 83 a0 	call	0x14106	; 0x14106 <mount>
   122ec:	85 c0       	rjmp	.+266    	; 0x123f8 <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   122ee:	64 ec       	ldi	r22, 0xC4	; 196
   122f0:	7d e0       	ldi	r23, 0x0D	; 13
   122f2:	c7 01       	movw	r24, r14
   122f4:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   122f8:	89 2b       	or	r24, r25
   122fa:	c9 f0       	breq	.+50     	; 0x1232e <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   122fc:	cc 0f       	add	r28, r28
   122fe:	dd 1f       	adc	r29, r29
   12300:	cc 0d       	add	r28, r12
   12302:	dd 1d       	adc	r29, r13
   12304:	88 81       	ld	r24, Y
   12306:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12308:	00 97       	sbiw	r24, 0x00	; 0
   1230a:	69 f0       	breq	.+26     	; 0x12326 <gpib_tests+0x104>
   1230c:	fc 01       	movw	r30, r24
   1230e:	20 81       	ld	r18, Z
   12310:	22 23       	and	r18, r18
   12312:	49 f0       	breq	.+18     	; 0x12326 <gpib_tests+0x104>
   12314:	6e ec       	ldi	r22, 0xCE	; 206
   12316:	7d e0       	ldi	r23, 0x0D	; 13
   12318:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1231c:	89 2b       	or	r24, r25
   1231e:	19 f0       	breq	.+6      	; 0x12326 <gpib_tests+0x104>
            display_Addresses(1);
   12320:	81 e0       	ldi	r24, 0x01	; 1
   12322:	90 e0       	ldi	r25, 0x00	; 0
   12324:	02 c0       	rjmp	.+4      	; 0x1232a <gpib_tests+0x108>
        else
            display_Addresses(0);
   12326:	80 e0       	ldi	r24, 0x00	; 0
   12328:	90 e0       	ldi	r25, 0x00	; 0
   1232a:	4a d1       	rcall	.+660    	; 0x125c0 <display_Addresses>
   1232c:	65 c0       	rjmp	.+202    	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   1232e:	61 ed       	ldi	r22, 0xD1	; 209
   12330:	7d e0       	ldi	r23, 0x0D	; 13
   12332:	c7 01       	movw	r24, r14
   12334:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   12338:	89 2b       	or	r24, r25
   1233a:	c9 f0       	breq	.+50     	; 0x1236e <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   1233c:	cc 0f       	add	r28, r28
   1233e:	dd 1f       	adc	r29, r29
   12340:	cc 0d       	add	r28, r12
   12342:	dd 1d       	adc	r29, r13
   12344:	88 81       	ld	r24, Y
   12346:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12348:	00 97       	sbiw	r24, 0x00	; 0
   1234a:	69 f0       	breq	.+26     	; 0x12366 <gpib_tests+0x144>
   1234c:	fc 01       	movw	r30, r24
   1234e:	20 81       	ld	r18, Z
   12350:	22 23       	and	r18, r18
   12352:	49 f0       	breq	.+18     	; 0x12366 <gpib_tests+0x144>
   12354:	6e ec       	ldi	r22, 0xCE	; 206
   12356:	7d e0       	ldi	r23, 0x0D	; 13
   12358:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1235c:	89 2b       	or	r24, r25
   1235e:	19 f0       	breq	.+6      	; 0x12366 <gpib_tests+0x144>
            display_Config(1);
   12360:	81 e0       	ldi	r24, 0x01	; 1
   12362:	90 e0       	ldi	r25, 0x00	; 0
   12364:	02 c0       	rjmp	.+4      	; 0x1236a <gpib_tests+0x148>
        else
            display_Config(0);
   12366:	80 e0       	ldi	r24, 0x00	; 0
   12368:	90 e0       	ldi	r25, 0x00	; 0
   1236a:	05 d2       	rcall	.+1034   	; 0x12776 <display_Config>
   1236c:	45 c0       	rjmp	.+138    	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   1236e:	68 ed       	ldi	r22, 0xD8	; 216
   12370:	7d e0       	ldi	r23, 0x0D	; 13
   12372:	c7 01       	movw	r24, r14
   12374:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   12378:	89 2b       	or	r24, r25
   1237a:	19 f0       	breq	.+6      	; 0x12382 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   1237c:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   12380:	3b c0       	rjmp	.+118    	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12382:	66 ee       	ldi	r22, 0xE6	; 230
   12384:	7d e0       	ldi	r23, 0x0D	; 13
   12386:	c7 01       	movw	r24, r14
   12388:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1238c:	89 2b       	or	r24, r25
   1238e:	29 f0       	breq	.+10     	; 0x1239a <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12390:	8e ee       	ldi	r24, 0xEE	; 238
   12392:	9d e0       	ldi	r25, 0x0D	; 13
   12394:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   12398:	2f c0       	rjmp	.+94     	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   1239a:	6c ef       	ldi	r22, 0xFC	; 252
   1239c:	7d e0       	ldi	r23, 0x0D	; 13
   1239e:	c7 01       	movw	r24, r14
   123a0:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   123a4:	89 2b       	or	r24, r25
    {
        gpib_task();
   123a6:	11 f0       	breq	.+4      	; 0x123ac <gpib_tests+0x18a>
   123a8:	bb de       	rcall	.-650    	; 0x12120 <gpib_task>
   123aa:	26 c0       	rjmp	.+76     	; 0x123f8 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   123ac:	8e 01       	movw	r16, r28
   123ae:	0f 5f       	subi	r16, 0xFF	; 255
   123b0:	1f 4f       	sbci	r17, 0xFF	; 255
   123b2:	95 01       	movw	r18, r10
   123b4:	a8 01       	movw	r20, r16
   123b6:	61 e0       	ldi	r22, 0x01	; 1
   123b8:	7e e0       	ldi	r23, 0x0E	; 14
   123ba:	c7 01       	movw	r24, r14
   123bc:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   123c0:	89 2b       	or	r24, r25
   123c2:	09 f4       	brne	.+2      	; 0x123c6 <gpib_tests+0x1a4>
   123c4:	3a cf       	rjmp	.-396    	; 0x1223a <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   123c6:	00 0f       	add	r16, r16
   123c8:	11 1f       	adc	r17, r17
   123ca:	e6 01       	movw	r28, r12
   123cc:	c0 0f       	add	r28, r16
   123ce:	d1 1f       	adc	r29, r17
   123d0:	88 81       	ld	r24, Y
   123d2:	99 81       	ldd	r25, Y+1	; 0x01
   123d4:	00 97       	sbiw	r24, 0x00	; 0
   123d6:	51 f0       	breq	.+20     	; 0x123ec <gpib_tests+0x1ca>
   123d8:	67 e0       	ldi	r22, 0x07	; 7
   123da:	7e e0       	ldi	r23, 0x0E	; 14
   123dc:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   123e0:	61 e0       	ldi	r22, 0x01	; 1
   123e2:	70 e0       	ldi	r23, 0x00	; 0
   123e4:	89 2b       	or	r24, r25
   123e6:	21 f4       	brne	.+8      	; 0x123f0 <gpib_tests+0x1ce>
   123e8:	60 e0       	ldi	r22, 0x00	; 0
   123ea:	02 c0       	rjmp	.+4      	; 0x123f0 <gpib_tests+0x1ce>
   123ec:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   123ee:	70 e0       	ldi	r23, 0x00	; 0
   123f0:	22 97       	sbiw	r28, 0x02	; 2
   123f2:	88 81       	ld	r24, Y
   123f4:	99 81       	ldd	r25, Y+1	; 0x01
   123f6:	32 da       	rcall	.-2972   	; 0x1185c <gpib_trace_task>
        return(1);
   123f8:	81 e0       	ldi	r24, 0x01	; 1
   123fa:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   123fc:	cd b7       	in	r28, 0x3d	; 61
   123fe:	de b7       	in	r29, 0x3e	; 62
   12400:	25 96       	adiw	r28, 0x05	; 5
   12402:	ea e0       	ldi	r30, 0x0A	; 10
   12404:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

00012408 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   12408:	ef 92       	push	r14
   1240a:	ff 92       	push	r15
   1240c:	0f 93       	push	r16
   1240e:	1f 93       	push	r17
   12410:	cf 93       	push	r28
   12412:	df 93       	push	r29
   12414:	7c 01       	movw	r14, r24
   12416:	c4 ec       	ldi	r28, 0xC4	; 196
   12418:	d1 e0       	ldi	r29, 0x01	; 1
   1241a:	00 e0       	ldi	r16, 0x00	; 0
   1241c:	10 e0       	ldi	r17, 0x00	; 0
   1241e:	8a 81       	ldd	r24, Y+2	; 0x02
   12420:	9b 81       	ldd	r25, Y+3	; 0x03
   12422:	8f 3f       	cpi	r24, 0xFF	; 255
   12424:	2f ef       	ldi	r18, 0xFF	; 255
   12426:	92 07       	cpc	r25, r18
   12428:	61 f0       	breq	.+24     	; 0x12442 <tok_index+0x3a>
   1242a:	68 81       	ld	r22, Y
   1242c:	79 81       	ldd	r23, Y+1	; 0x01
   1242e:	c7 01       	movw	r24, r14
   12430:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   12434:	24 96       	adiw	r28, 0x04	; 4
   12436:	89 2b       	or	r24, r25
   12438:	19 f4       	brne	.+6      	; 0x12440 <tok_index+0x38>
   1243a:	0f 5f       	subi	r16, 0xFF	; 255
   1243c:	1f 4f       	sbci	r17, 0xFF	; 255
   1243e:	ef cf       	rjmp	.-34     	; 0x1241e <tok_index+0x16>
   12440:	c8 01       	movw	r24, r16
   12442:	cd b7       	in	r28, 0x3d	; 61
   12444:	de b7       	in	r29, 0x3e	; 62
   12446:	e6 e0       	ldi	r30, 0x06	; 6
   12448:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0001244c <tok_name>:
   1244c:	e4 ec       	ldi	r30, 0xC4	; 196
   1244e:	f1 e0       	ldi	r31, 0x01	; 1
   12450:	20 e0       	ldi	r18, 0x00	; 0
   12452:	30 e0       	ldi	r19, 0x00	; 0
   12454:	90 e0       	ldi	r25, 0x00	; 0
   12456:	42 81       	ldd	r20, Z+2	; 0x02
   12458:	53 81       	ldd	r21, Z+3	; 0x03
   1245a:	4f 3f       	cpi	r20, 0xFF	; 255
   1245c:	6f ef       	ldi	r22, 0xFF	; 255
   1245e:	56 07       	cpc	r21, r22
   12460:	89 f0       	breq	.+34     	; 0x12484 <tok_name+0x38>
   12462:	34 96       	adiw	r30, 0x04	; 4
   12464:	48 17       	cp	r20, r24
   12466:	59 07       	cpc	r21, r25
   12468:	51 f4       	brne	.+20     	; 0x1247e <tok_name+0x32>
   1246a:	22 0f       	add	r18, r18
   1246c:	33 1f       	adc	r19, r19
   1246e:	22 0f       	add	r18, r18
   12470:	33 1f       	adc	r19, r19
   12472:	f9 01       	movw	r30, r18
   12474:	ec 53       	subi	r30, 0x3C	; 60
   12476:	fe 4f       	sbci	r31, 0xFE	; 254
   12478:	80 81       	ld	r24, Z
   1247a:	91 81       	ldd	r25, Z+1	; 0x01
   1247c:	08 95       	ret
   1247e:	2f 5f       	subi	r18, 0xFF	; 255
   12480:	3f 4f       	sbci	r19, 0xFF	; 255
   12482:	e9 cf       	rjmp	.-46     	; 0x12456 <tok_name+0xa>
   12484:	8d e2       	ldi	r24, 0x2D	; 45
   12486:	9c e0       	ldi	r25, 0x0C	; 12
   12488:	08 95       	ret

0001248a <print_tok_val>:
   1248a:	cf 92       	push	r12
   1248c:	df 92       	push	r13
   1248e:	ef 92       	push	r14
   12490:	ff 92       	push	r15
   12492:	0f 93       	push	r16
   12494:	1f 93       	push	r17
   12496:	cf 93       	push	r28
   12498:	ad b7       	in	r26, 0x3d	; 61
   1249a:	be b7       	in	r27, 0x3e	; 62
   1249c:	1d 97       	sbiw	r26, 0x0d	; 13
   1249e:	0f b6       	in	r0, 0x3f	; 63
   124a0:	f8 94       	cli
   124a2:	be bf       	out	0x3e, r27	; 62
   124a4:	0f be       	out	0x3f, r0	; 63
   124a6:	ad bf       	out	0x3d, r26	; 61
   124a8:	c6 2f       	mov	r28, r22
   124aa:	69 01       	movw	r12, r18
   124ac:	7a 01       	movw	r14, r20
   124ae:	ce df       	rcall	.-100    	; 0x1244c <tok_name>
   124b0:	8c 01       	movw	r16, r24
   124b2:	cc 23       	and	r28, r28
   124b4:	31 f0       	breq	.+12     	; 0x124c2 <print_tok_val+0x38>
   124b6:	80 e2       	ldi	r24, 0x20	; 32
   124b8:	90 e0       	ldi	r25, 0x00	; 0
   124ba:	0e 94 62 75 	call	0xeac4	; 0xeac4 <putchar>
   124be:	c1 50       	subi	r28, 0x01	; 1
   124c0:	f8 cf       	rjmp	.-16     	; 0x124b2 <print_tok_val+0x28>
   124c2:	ed b7       	in	r30, 0x3d	; 61
   124c4:	fe b7       	in	r31, 0x3e	; 62
   124c6:	c2 86       	std	Z+10, r12	; 0x0a
   124c8:	d3 86       	std	Z+11, r13	; 0x0b
   124ca:	e4 86       	std	Z+12, r14	; 0x0c
   124cc:	f5 86       	std	Z+13, r15	; 0x0d
   124ce:	c6 82       	std	Z+6, r12	; 0x06
   124d0:	d7 82       	std	Z+7, r13	; 0x07
   124d2:	e0 86       	std	Z+8, r14	; 0x08
   124d4:	f1 86       	std	Z+9, r15	; 0x09
   124d6:	15 83       	std	Z+5, r17	; 0x05
   124d8:	04 83       	std	Z+4, r16	; 0x04
   124da:	8e e9       	ldi	r24, 0x9E	; 158
   124dc:	9d e1       	ldi	r25, 0x1D	; 29
   124de:	a0 e0       	ldi	r26, 0x00	; 0
   124e0:	81 83       	std	Z+1, r24	; 0x01
   124e2:	92 83       	std	Z+2, r25	; 0x02
   124e4:	a3 83       	std	Z+3, r26	; 0x03
   124e6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   124ea:	ad b7       	in	r26, 0x3d	; 61
   124ec:	be b7       	in	r27, 0x3e	; 62
   124ee:	1d 96       	adiw	r26, 0x0d	; 13
   124f0:	0f b6       	in	r0, 0x3f	; 63
   124f2:	f8 94       	cli
   124f4:	be bf       	out	0x3e, r27	; 62
   124f6:	0f be       	out	0x3f, r0	; 63
   124f8:	ad bf       	out	0x3d, r26	; 61
   124fa:	cf 91       	pop	r28
   124fc:	1f 91       	pop	r17
   124fe:	0f 91       	pop	r16
   12500:	ff 90       	pop	r15
   12502:	ef 90       	pop	r14
   12504:	df 90       	pop	r13
   12506:	cf 90       	pop	r12
   12508:	08 95       	ret

0001250a <print_tok_str>:
   1250a:	ef 92       	push	r14
   1250c:	ff 92       	push	r15
   1250e:	0f 93       	push	r16
   12510:	1f 93       	push	r17
   12512:	cf 93       	push	r28
   12514:	ad b7       	in	r26, 0x3d	; 61
   12516:	be b7       	in	r27, 0x3e	; 62
   12518:	17 97       	sbiw	r26, 0x07	; 7
   1251a:	0f b6       	in	r0, 0x3f	; 63
   1251c:	f8 94       	cli
   1251e:	be bf       	out	0x3e, r27	; 62
   12520:	0f be       	out	0x3f, r0	; 63
   12522:	ad bf       	out	0x3d, r26	; 61
   12524:	c6 2f       	mov	r28, r22
   12526:	7a 01       	movw	r14, r20
   12528:	91 df       	rcall	.-222    	; 0x1244c <tok_name>
   1252a:	8c 01       	movw	r16, r24
   1252c:	cc 23       	and	r28, r28
   1252e:	31 f0       	breq	.+12     	; 0x1253c <print_tok_str+0x32>
   12530:	80 e2       	ldi	r24, 0x20	; 32
   12532:	90 e0       	ldi	r25, 0x00	; 0
   12534:	0e 94 62 75 	call	0xeac4	; 0xeac4 <putchar>
   12538:	c1 50       	subi	r28, 0x01	; 1
   1253a:	f8 cf       	rjmp	.-16     	; 0x1252c <print_tok_str+0x22>
   1253c:	ed b7       	in	r30, 0x3d	; 61
   1253e:	fe b7       	in	r31, 0x3e	; 62
   12540:	f7 82       	std	Z+7, r15	; 0x07
   12542:	e6 82       	std	Z+6, r14	; 0x06
   12544:	15 83       	std	Z+5, r17	; 0x05
   12546:	04 83       	std	Z+4, r16	; 0x04
   12548:	82 e9       	ldi	r24, 0x92	; 146
   1254a:	9d e1       	ldi	r25, 0x1D	; 29
   1254c:	a0 e0       	ldi	r26, 0x00	; 0
   1254e:	81 83       	std	Z+1, r24	; 0x01
   12550:	92 83       	std	Z+2, r25	; 0x02
   12552:	a3 83       	std	Z+3, r26	; 0x03
   12554:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12558:	ad b7       	in	r26, 0x3d	; 61
   1255a:	be b7       	in	r27, 0x3e	; 62
   1255c:	17 96       	adiw	r26, 0x07	; 7
   1255e:	0f b6       	in	r0, 0x3f	; 63
   12560:	f8 94       	cli
   12562:	be bf       	out	0x3e, r27	; 62
   12564:	0f be       	out	0x3f, r0	; 63
   12566:	ad bf       	out	0x3d, r26	; 61
   12568:	cf 91       	pop	r28
   1256a:	1f 91       	pop	r17
   1256c:	0f 91       	pop	r16
   1256e:	ff 90       	pop	r15
   12570:	ef 90       	pop	r14
   12572:	08 95       	ret

00012574 <print_tok>:
   12574:	0f 93       	push	r16
   12576:	1f 93       	push	r17
   12578:	cf 93       	push	r28
   1257a:	00 d0       	rcall	.+0      	; 0x1257c <print_tok+0x8>
   1257c:	00 d0       	rcall	.+0      	; 0x1257e <print_tok+0xa>
   1257e:	1f 92       	push	r1
   12580:	c6 2f       	mov	r28, r22
   12582:	64 df       	rcall	.-312    	; 0x1244c <tok_name>
   12584:	8c 01       	movw	r16, r24
   12586:	cc 23       	and	r28, r28
   12588:	31 f0       	breq	.+12     	; 0x12596 <print_tok+0x22>
   1258a:	80 e2       	ldi	r24, 0x20	; 32
   1258c:	90 e0       	ldi	r25, 0x00	; 0
   1258e:	0e 94 62 75 	call	0xeac4	; 0xeac4 <putchar>
   12592:	c1 50       	subi	r28, 0x01	; 1
   12594:	f8 cf       	rjmp	.-16     	; 0x12586 <print_tok+0x12>
   12596:	ed b7       	in	r30, 0x3d	; 61
   12598:	fe b7       	in	r31, 0x3e	; 62
   1259a:	15 83       	std	Z+5, r17	; 0x05
   1259c:	04 83       	std	Z+4, r16	; 0x04
   1259e:	8e e8       	ldi	r24, 0x8E	; 142
   125a0:	9d e1       	ldi	r25, 0x1D	; 29
   125a2:	a0 e0       	ldi	r26, 0x00	; 0
   125a4:	81 83       	std	Z+1, r24	; 0x01
   125a6:	92 83       	std	Z+2, r25	; 0x02
   125a8:	a3 83       	std	Z+3, r26	; 0x03
   125aa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   125ae:	0f 90       	pop	r0
   125b0:	0f 90       	pop	r0
   125b2:	0f 90       	pop	r0
   125b4:	0f 90       	pop	r0
   125b6:	0f 90       	pop	r0
   125b8:	cf 91       	pop	r28
   125ba:	1f 91       	pop	r17
   125bc:	0f 91       	pop	r16
   125be:	08 95       	ret

000125c0 <display_Addresses>:
   125c0:	2f 92       	push	r2
   125c2:	3f 92       	push	r3
   125c4:	4f 92       	push	r4
   125c6:	6f 92       	push	r6
   125c8:	7f 92       	push	r7
   125ca:	8f 92       	push	r8
   125cc:	cf 92       	push	r12
   125ce:	df 92       	push	r13
   125d0:	ef 92       	push	r14
   125d2:	cf 93       	push	r28
   125d4:	df 93       	push	r29
   125d6:	cd b7       	in	r28, 0x3d	; 61
   125d8:	de b7       	in	r29, 0x3e	; 62
   125da:	2a 97       	sbiw	r28, 0x0a	; 10
   125dc:	0f b6       	in	r0, 0x3f	; 63
   125de:	f8 94       	cli
   125e0:	de bf       	out	0x3e, r29	; 62
   125e2:	0f be       	out	0x3f, r0	; 63
   125e4:	cd bf       	out	0x3d, r28	; 61
   125e6:	88 e5       	ldi	r24, 0x58	; 88
   125e8:	9a e1       	ldi	r25, 0x1A	; 26
   125ea:	a0 e0       	ldi	r26, 0x00	; 0
   125ec:	ed b7       	in	r30, 0x3d	; 61
   125ee:	fe b7       	in	r31, 0x3e	; 62
   125f0:	81 83       	std	Z+1, r24	; 0x01
   125f2:	92 83       	std	Z+2, r25	; 0x02
   125f4:	a3 83       	std	Z+3, r26	; 0x03
   125f6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   125fa:	2b ef       	ldi	r18, 0xFB	; 251
   125fc:	3f e1       	ldi	r19, 0x1F	; 31
   125fe:	3a 87       	std	Y+10, r19	; 0x0a
   12600:	29 87       	std	Y+9, r18	; 0x09
   12602:	8a e3       	ldi	r24, 0x3A	; 58
   12604:	9a e1       	ldi	r25, 0x1A	; 26
   12606:	6c 01       	movw	r12, r24
   12608:	e1 2c       	mov	r14, r1
   1260a:	8c e3       	ldi	r24, 0x3C	; 60
   1260c:	9a e1       	ldi	r25, 0x1A	; 26
   1260e:	3c 01       	movw	r6, r24
   12610:	81 2c       	mov	r8, r1
   12612:	85 e4       	ldi	r24, 0x45	; 69
   12614:	9a e1       	ldi	r25, 0x1A	; 26
   12616:	1c 01       	movw	r2, r24
   12618:	41 2c       	mov	r4, r1
   1261a:	8f e4       	ldi	r24, 0x4F	; 79
   1261c:	9a e1       	ldi	r25, 0x1A	; 26
   1261e:	9c 01       	movw	r18, r24
   12620:	40 e0       	ldi	r20, 0x00	; 0
   12622:	2e 83       	std	Y+6, r18	; 0x06
   12624:	3f 83       	std	Y+7, r19	; 0x07
   12626:	48 87       	std	Y+8, r20	; 0x08
   12628:	e9 85       	ldd	r30, Y+9	; 0x09
   1262a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1262c:	80 81       	ld	r24, Z
   1262e:	88 23       	and	r24, r24
   12630:	09 f4       	brne	.+2      	; 0x12634 <display_Addresses+0x74>
   12632:	7b c0       	rjmp	.+246    	; 0x1272a <display_Addresses+0x16a>
   12634:	83 30       	cpi	r24, 0x03	; 3
   12636:	21 f0       	breq	.+8      	; 0x12640 <display_Addresses+0x80>
   12638:	81 30       	cpi	r24, 0x01	; 1
   1263a:	09 f0       	breq	.+2      	; 0x1263e <display_Addresses+0x7e>
   1263c:	5a c0       	rjmp	.+180    	; 0x126f2 <display_Addresses+0x132>
   1263e:	1f c0       	rjmp	.+62     	; 0x1267e <display_Addresses+0xbe>
   12640:	e9 85       	ldd	r30, Y+9	; 0x09
   12642:	fa 85       	ldd	r31, Y+10	; 0x0a
   12644:	87 a1       	ldd	r24, Z+39	; 0x27
   12646:	90 a5       	ldd	r25, Z+40	; 0x28
   12648:	90 93 70 1a 	sts	0x1A70, r25	; 0x801a70 <SS80p+0x1>
   1264c:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <SS80p>
   12650:	cf 01       	movw	r24, r30
   12652:	07 96       	adiw	r24, 0x07	; 7
   12654:	ed b7       	in	r30, 0x3d	; 61
   12656:	fe b7       	in	r31, 0x3e	; 62
   12658:	95 83       	std	Z+5, r25	; 0x05
   1265a:	84 83       	std	Z+4, r24	; 0x04
   1265c:	2e 81       	ldd	r18, Y+6	; 0x06
   1265e:	3f 81       	ldd	r19, Y+7	; 0x07
   12660:	48 85       	ldd	r20, Y+8	; 0x08
   12662:	21 83       	std	Z+1, r18	; 0x01
   12664:	32 83       	std	Z+2, r19	; 0x02
   12666:	43 83       	std	Z+3, r20	; 0x03
   12668:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1266c:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   12670:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   12674:	42 81       	ldd	r20, Z+2	; 0x02
   12676:	53 81       	ldd	r21, Z+3	; 0x03
   12678:	64 e0       	ldi	r22, 0x04	; 4
   1267a:	82 e1       	ldi	r24, 0x12	; 18
   1267c:	46 df       	rcall	.-372    	; 0x1250a <print_tok_str>
   1267e:	e9 85       	ldd	r30, Y+9	; 0x09
   12680:	fa 85       	ldd	r31, Y+10	; 0x0a
   12682:	80 81       	ld	r24, Z
   12684:	81 30       	cpi	r24, 0x01	; 1
   12686:	d1 f4       	brne	.+52     	; 0x126bc <display_Addresses+0xfc>
   12688:	87 a1       	ldd	r24, Z+39	; 0x27
   1268a:	90 a5       	ldd	r25, Z+40	; 0x28
   1268c:	90 93 6c 1a 	sts	0x1A6C, r25	; 0x801a6c <AMIGOp+0x1>
   12690:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <AMIGOp>
   12694:	cf 01       	movw	r24, r30
   12696:	07 96       	adiw	r24, 0x07	; 7
   12698:	ed b7       	in	r30, 0x3d	; 61
   1269a:	fe b7       	in	r31, 0x3e	; 62
   1269c:	95 83       	std	Z+5, r25	; 0x05
   1269e:	84 83       	std	Z+4, r24	; 0x04
   126a0:	21 82       	std	Z+1, r2	; 0x01
   126a2:	32 82       	std	Z+2, r3	; 0x02
   126a4:	43 82       	std	Z+3, r4	; 0x03
   126a6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   126aa:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   126ae:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   126b2:	42 81       	ldd	r20, Z+2	; 0x02
   126b4:	53 81       	ldd	r21, Z+3	; 0x03
   126b6:	64 e0       	ldi	r22, 0x04	; 4
   126b8:	82 e1       	ldi	r24, 0x12	; 18
   126ba:	27 df       	rcall	.-434    	; 0x1250a <print_tok_str>
   126bc:	e9 85       	ldd	r30, Y+9	; 0x09
   126be:	fa 85       	ldd	r31, Y+10	; 0x0a
   126c0:	21 81       	ldd	r18, Z+1	; 0x01
   126c2:	30 e0       	ldi	r19, 0x00	; 0
   126c4:	40 e0       	ldi	r20, 0x00	; 0
   126c6:	50 e0       	ldi	r21, 0x00	; 0
   126c8:	64 e0       	ldi	r22, 0x04	; 4
   126ca:	81 e0       	ldi	r24, 0x01	; 1
   126cc:	de de       	rcall	.-580    	; 0x1248a <print_tok_val>
   126ce:	e9 85       	ldd	r30, Y+9	; 0x09
   126d0:	fa 85       	ldd	r31, Y+10	; 0x0a
   126d2:	22 81       	ldd	r18, Z+2	; 0x02
   126d4:	30 e0       	ldi	r19, 0x00	; 0
   126d6:	40 e0       	ldi	r20, 0x00	; 0
   126d8:	50 e0       	ldi	r21, 0x00	; 0
   126da:	64 e0       	ldi	r22, 0x04	; 4
   126dc:	8f e1       	ldi	r24, 0x1F	; 31
   126de:	d5 de       	rcall	.-598    	; 0x1248a <print_tok_val>
   126e0:	e9 85       	ldd	r30, Y+9	; 0x09
   126e2:	fa 85       	ldd	r31, Y+10	; 0x0a
   126e4:	23 81       	ldd	r18, Z+3	; 0x03
   126e6:	34 81       	ldd	r19, Z+4	; 0x04
   126e8:	45 81       	ldd	r20, Z+5	; 0x05
   126ea:	56 81       	ldd	r21, Z+6	; 0x06
   126ec:	64 e0       	ldi	r22, 0x04	; 4
   126ee:	83 e0       	ldi	r24, 0x03	; 3
   126f0:	cc de       	rcall	.-616    	; 0x1248a <print_tok_val>
   126f2:	e9 85       	ldd	r30, Y+9	; 0x09
   126f4:	fa 85       	ldd	r31, Y+10	; 0x0a
   126f6:	80 81       	ld	r24, Z
   126f8:	84 30       	cpi	r24, 0x04	; 4
   126fa:	81 f4       	brne	.+32     	; 0x1271c <display_Addresses+0x15c>
   126fc:	ed b7       	in	r30, 0x3d	; 61
   126fe:	fe b7       	in	r31, 0x3e	; 62
   12700:	61 82       	std	Z+1, r6	; 0x01
   12702:	72 82       	std	Z+2, r7	; 0x02
   12704:	83 82       	std	Z+3, r8	; 0x03
   12706:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1270a:	e9 85       	ldd	r30, Y+9	; 0x09
   1270c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1270e:	21 81       	ldd	r18, Z+1	; 0x01
   12710:	30 e0       	ldi	r19, 0x00	; 0
   12712:	40 e0       	ldi	r20, 0x00	; 0
   12714:	50 e0       	ldi	r21, 0x00	; 0
   12716:	64 e0       	ldi	r22, 0x04	; 4
   12718:	81 e0       	ldi	r24, 0x01	; 1
   1271a:	b7 de       	rcall	.-658    	; 0x1248a <print_tok_val>
   1271c:	ed b7       	in	r30, 0x3d	; 61
   1271e:	fe b7       	in	r31, 0x3e	; 62
   12720:	c1 82       	std	Z+1, r12	; 0x01
   12722:	d2 82       	std	Z+2, r13	; 0x02
   12724:	e3 82       	std	Z+3, r14	; 0x03
   12726:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1272a:	29 85       	ldd	r18, Y+9	; 0x09
   1272c:	3a 85       	ldd	r19, Y+10	; 0x0a
   1272e:	25 5d       	subi	r18, 0xD5	; 213
   12730:	3f 4f       	sbci	r19, 0xFF	; 255
   12732:	3a 87       	std	Y+10, r19	; 0x0a
   12734:	29 87       	std	Y+9, r18	; 0x09
   12736:	2f 5f       	subi	r18, 0xFF	; 255
   12738:	31 42       	sbci	r19, 0x21	; 33
   1273a:	09 f0       	breq	.+2      	; 0x1273e <display_Addresses+0x17e>
   1273c:	75 cf       	rjmp	.-278    	; 0x12628 <display_Addresses+0x68>
   1273e:	88 e3       	ldi	r24, 0x38	; 56
   12740:	9a e1       	ldi	r25, 0x1A	; 26
   12742:	a0 e0       	ldi	r26, 0x00	; 0
   12744:	ed b7       	in	r30, 0x3d	; 61
   12746:	fe b7       	in	r31, 0x3e	; 62
   12748:	81 83       	std	Z+1, r24	; 0x01
   1274a:	92 83       	std	Z+2, r25	; 0x02
   1274c:	a3 83       	std	Z+3, r26	; 0x03
   1274e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12752:	2a 96       	adiw	r28, 0x0a	; 10
   12754:	0f b6       	in	r0, 0x3f	; 63
   12756:	f8 94       	cli
   12758:	de bf       	out	0x3e, r29	; 62
   1275a:	0f be       	out	0x3f, r0	; 63
   1275c:	cd bf       	out	0x3d, r28	; 61
   1275e:	df 91       	pop	r29
   12760:	cf 91       	pop	r28
   12762:	ef 90       	pop	r14
   12764:	df 90       	pop	r13
   12766:	cf 90       	pop	r12
   12768:	8f 90       	pop	r8
   1276a:	7f 90       	pop	r7
   1276c:	6f 90       	pop	r6
   1276e:	4f 90       	pop	r4
   12770:	3f 90       	pop	r3
   12772:	2f 90       	pop	r2
   12774:	08 95       	ret

00012776 <display_Config>:
   12776:	2f 92       	push	r2
   12778:	3f 92       	push	r3
   1277a:	4f 92       	push	r4
   1277c:	6f 92       	push	r6
   1277e:	7f 92       	push	r7
   12780:	8f 92       	push	r8
   12782:	af 92       	push	r10
   12784:	bf 92       	push	r11
   12786:	cf 92       	push	r12
   12788:	df 92       	push	r13
   1278a:	ef 92       	push	r14
   1278c:	0f 93       	push	r16
   1278e:	1f 93       	push	r17
   12790:	cf 93       	push	r28
   12792:	df 93       	push	r29
   12794:	cd b7       	in	r28, 0x3d	; 61
   12796:	de b7       	in	r29, 0x3e	; 62
   12798:	62 97       	sbiw	r28, 0x12	; 18
   1279a:	0f b6       	in	r0, 0x3f	; 63
   1279c:	f8 94       	cli
   1279e:	de bf       	out	0x3e, r29	; 62
   127a0:	0f be       	out	0x3f, r0	; 63
   127a2:	cd bf       	out	0x3d, r28	; 61
   127a4:	5c 01       	movw	r10, r24
   127a6:	88 e1       	ldi	r24, 0x18	; 24
   127a8:	9a e1       	ldi	r25, 0x1A	; 26
   127aa:	a0 e0       	ldi	r26, 0x00	; 0
   127ac:	ed b7       	in	r30, 0x3d	; 61
   127ae:	fe b7       	in	r31, 0x3e	; 62
   127b0:	81 83       	std	Z+1, r24	; 0x01
   127b2:	92 83       	std	Z+2, r25	; 0x02
   127b4:	a3 83       	std	Z+3, r26	; 0x03
   127b6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   127ba:	0b ef       	ldi	r16, 0xFB	; 251
   127bc:	1f e1       	ldi	r17, 0x1F	; 31
   127be:	8d e9       	ldi	r24, 0x9D	; 157
   127c0:	99 e1       	ldi	r25, 0x19	; 25
   127c2:	9c 01       	movw	r18, r24
   127c4:	40 e0       	ldi	r20, 0x00	; 0
   127c6:	28 87       	std	Y+8, r18	; 0x08
   127c8:	39 87       	std	Y+9, r19	; 0x09
   127ca:	4a 87       	std	Y+10, r20	; 0x0a
   127cc:	82 ed       	ldi	r24, 0xD2	; 210
   127ce:	99 e1       	ldi	r25, 0x19	; 25
   127d0:	9c 01       	movw	r18, r24
   127d2:	40 e0       	ldi	r20, 0x00	; 0
   127d4:	2b 87       	std	Y+11, r18	; 0x0b
   127d6:	3c 87       	std	Y+12, r19	; 0x0c
   127d8:	4d 87       	std	Y+13, r20	; 0x0d
   127da:	83 eb       	ldi	r24, 0xB3	; 179
   127dc:	99 e1       	ldi	r25, 0x19	; 25
   127de:	9c 01       	movw	r18, r24
   127e0:	40 e0       	ldi	r20, 0x00	; 0
   127e2:	2e 87       	std	Y+14, r18	; 0x0e
   127e4:	3f 87       	std	Y+15, r19	; 0x0f
   127e6:	48 8b       	std	Y+16, r20	; 0x10
   127e8:	8f e9       	ldi	r24, 0x9F	; 159
   127ea:	99 e1       	ldi	r25, 0x19	; 25
   127ec:	1c 01       	movw	r2, r24
   127ee:	41 2c       	mov	r4, r1
   127f0:	8f e0       	ldi	r24, 0x0F	; 15
   127f2:	9a e1       	ldi	r25, 0x1A	; 26
   127f4:	6c 01       	movw	r12, r24
   127f6:	e1 2c       	mov	r14, r1
   127f8:	80 ef       	ldi	r24, 0xF0	; 240
   127fa:	99 e1       	ldi	r25, 0x19	; 25
   127fc:	3c 01       	movw	r6, r24
   127fe:	81 2c       	mov	r8, r1
   12800:	f8 01       	movw	r30, r16
   12802:	80 81       	ld	r24, Z
   12804:	88 23       	and	r24, r24
   12806:	09 f4       	brne	.+2      	; 0x1280a <display_Config+0x94>
   12808:	14 c2       	rjmp	.+1064   	; 0x12c32 <display_Config+0x4bc>
   1280a:	83 30       	cpi	r24, 0x03	; 3
   1280c:	09 f0       	breq	.+2      	; 0x12810 <display_Config+0x9a>
   1280e:	38 c1       	rjmp	.+624    	; 0x12a80 <display_Config+0x30a>
   12810:	27 a1       	ldd	r18, Z+39	; 0x27
   12812:	30 a5       	ldd	r19, Z+40	; 0x28
   12814:	3a 8b       	std	Y+18, r19	; 0x12
   12816:	29 8b       	std	Y+17, r18	; 0x11
   12818:	c8 01       	movw	r24, r16
   1281a:	07 96       	adiw	r24, 0x07	; 7
   1281c:	ed b7       	in	r30, 0x3d	; 61
   1281e:	fe b7       	in	r31, 0x3e	; 62
   12820:	95 83       	std	Z+5, r25	; 0x05
   12822:	84 83       	std	Z+4, r24	; 0x04
   12824:	c1 82       	std	Z+1, r12	; 0x01
   12826:	d2 82       	std	Z+2, r13	; 0x02
   12828:	e3 82       	std	Z+3, r14	; 0x03
   1282a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1282e:	e9 89       	ldd	r30, Y+17	; 0x11
   12830:	fa 89       	ldd	r31, Y+18	; 0x12
   12832:	80 81       	ld	r24, Z
   12834:	90 e0       	ldi	r25, 0x00	; 0
   12836:	ed b7       	in	r30, 0x3d	; 61
   12838:	fe b7       	in	r31, 0x3e	; 62
   1283a:	95 83       	std	Z+5, r25	; 0x05
   1283c:	84 83       	std	Z+4, r24	; 0x04
   1283e:	61 82       	std	Z+1, r6	; 0x01
   12840:	72 82       	std	Z+2, r7	; 0x02
   12842:	83 82       	std	Z+3, r8	; 0x03
   12844:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12848:	64 e0       	ldi	r22, 0x04	; 4
   1284a:	89 e0       	ldi	r24, 0x09	; 9
   1284c:	93 de       	rcall	.-730    	; 0x12574 <print_tok>
   1284e:	e9 89       	ldd	r30, Y+17	; 0x11
   12850:	fa 89       	ldd	r31, Y+18	; 0x12
   12852:	20 81       	ld	r18, Z
   12854:	30 e0       	ldi	r19, 0x00	; 0
   12856:	40 e0       	ldi	r20, 0x00	; 0
   12858:	50 e0       	ldi	r21, 0x00	; 0
   1285a:	68 e0       	ldi	r22, 0x08	; 8
   1285c:	81 e0       	ldi	r24, 0x01	; 1
   1285e:	15 de       	rcall	.-982    	; 0x1248a <print_tok_val>
   12860:	e9 89       	ldd	r30, Y+17	; 0x11
   12862:	fa 89       	ldd	r31, Y+18	; 0x12
   12864:	21 81       	ldd	r18, Z+1	; 0x01
   12866:	30 e0       	ldi	r19, 0x00	; 0
   12868:	40 e0       	ldi	r20, 0x00	; 0
   1286a:	50 e0       	ldi	r21, 0x00	; 0
   1286c:	68 e0       	ldi	r22, 0x08	; 8
   1286e:	8f e1       	ldi	r24, 0x1F	; 31
   12870:	0c de       	rcall	.-1000   	; 0x1248a <print_tok_val>
   12872:	e9 89       	ldd	r30, Y+17	; 0x11
   12874:	fa 89       	ldd	r31, Y+18	; 0x12
   12876:	42 81       	ldd	r20, Z+2	; 0x02
   12878:	53 81       	ldd	r21, Z+3	; 0x03
   1287a:	68 e0       	ldi	r22, 0x08	; 8
   1287c:	82 e1       	ldi	r24, 0x12	; 18
   1287e:	45 de       	rcall	.-886    	; 0x1250a <print_tok_str>
   12880:	64 e0       	ldi	r22, 0x04	; 4
   12882:	81 e1       	ldi	r24, 0x11	; 17
   12884:	77 de       	rcall	.-786    	; 0x12574 <print_tok>
   12886:	64 e0       	ldi	r22, 0x04	; 4
   12888:	85 e1       	ldi	r24, 0x15	; 21
   1288a:	74 de       	rcall	.-792    	; 0x12574 <print_tok>
   1288c:	e9 89       	ldd	r30, Y+17	; 0x11
   1288e:	fa 89       	ldd	r31, Y+18	; 0x12
   12890:	24 81       	ldd	r18, Z+4	; 0x04
   12892:	35 81       	ldd	r19, Z+5	; 0x05
   12894:	40 e0       	ldi	r20, 0x00	; 0
   12896:	50 e0       	ldi	r21, 0x00	; 0
   12898:	68 e0       	ldi	r22, 0x08	; 8
   1289a:	87 e1       	ldi	r24, 0x17	; 23
   1289c:	f6 dd       	rcall	.-1044   	; 0x1248a <print_tok_val>
   1289e:	64 e0       	ldi	r22, 0x04	; 4
   128a0:	81 e1       	ldi	r24, 0x11	; 17
   128a2:	68 de       	rcall	.-816    	; 0x12574 <print_tok>
   128a4:	a1 14       	cp	r10, r1
   128a6:	b1 04       	cpc	r11, r1
   128a8:	09 f1       	breq	.+66     	; 0x128ec <display_Config+0x176>
   128aa:	64 e0       	ldi	r22, 0x04	; 4
   128ac:	8b e0       	ldi	r24, 0x0B	; 11
   128ae:	62 de       	rcall	.-828    	; 0x12574 <print_tok>
   128b0:	e9 89       	ldd	r30, Y+17	; 0x11
   128b2:	fa 89       	ldd	r31, Y+18	; 0x12
   128b4:	26 81       	ldd	r18, Z+6	; 0x06
   128b6:	37 81       	ldd	r19, Z+7	; 0x07
   128b8:	40 e0       	ldi	r20, 0x00	; 0
   128ba:	50 e0       	ldi	r21, 0x00	; 0
   128bc:	68 e0       	ldi	r22, 0x08	; 8
   128be:	88 e2       	ldi	r24, 0x28	; 40
   128c0:	e4 dd       	rcall	.-1080   	; 0x1248a <print_tok_val>
   128c2:	e9 89       	ldd	r30, Y+17	; 0x11
   128c4:	fa 89       	ldd	r31, Y+18	; 0x12
   128c6:	20 85       	ldd	r18, Z+8	; 0x08
   128c8:	31 85       	ldd	r19, Z+9	; 0x09
   128ca:	40 e0       	ldi	r20, 0x00	; 0
   128cc:	50 e0       	ldi	r21, 0x00	; 0
   128ce:	68 e0       	ldi	r22, 0x08	; 8
   128d0:	85 e2       	ldi	r24, 0x25	; 37
   128d2:	db dd       	rcall	.-1098   	; 0x1248a <print_tok_val>
   128d4:	e9 89       	ldd	r30, Y+17	; 0x11
   128d6:	fa 89       	ldd	r31, Y+18	; 0x12
   128d8:	22 85       	ldd	r18, Z+10	; 0x0a
   128da:	30 e0       	ldi	r19, 0x00	; 0
   128dc:	40 e0       	ldi	r20, 0x00	; 0
   128de:	50 e0       	ldi	r21, 0x00	; 0
   128e0:	68 e0       	ldi	r22, 0x08	; 8
   128e2:	86 e2       	ldi	r24, 0x26	; 38
   128e4:	d2 dd       	rcall	.-1116   	; 0x1248a <print_tok_val>
   128e6:	64 e0       	ldi	r22, 0x04	; 4
   128e8:	81 e1       	ldi	r24, 0x11	; 17
   128ea:	44 de       	rcall	.-888    	; 0x12574 <print_tok>
   128ec:	64 e0       	ldi	r22, 0x04	; 4
   128ee:	87 e2       	ldi	r24, 0x27	; 39
   128f0:	41 de       	rcall	.-894    	; 0x12574 <print_tok>
   128f2:	a1 14       	cp	r10, r1
   128f4:	b1 04       	cpc	r11, r1
   128f6:	49 f0       	breq	.+18     	; 0x1290a <display_Config+0x194>
   128f8:	e9 89       	ldd	r30, Y+17	; 0x11
   128fa:	fa 89       	ldd	r31, Y+18	; 0x12
   128fc:	23 85       	ldd	r18, Z+11	; 0x0b
   128fe:	30 e0       	ldi	r19, 0x00	; 0
   12900:	40 e0       	ldi	r20, 0x00	; 0
   12902:	50 e0       	ldi	r21, 0x00	; 0
   12904:	68 e0       	ldi	r22, 0x08	; 8
   12906:	89 e2       	ldi	r24, 0x29	; 41
   12908:	c0 dd       	rcall	.-1152   	; 0x1248a <print_tok_val>
   1290a:	e9 89       	ldd	r30, Y+17	; 0x11
   1290c:	fa 89       	ldd	r31, Y+18	; 0x12
   1290e:	24 85       	ldd	r18, Z+12	; 0x0c
   12910:	35 85       	ldd	r19, Z+13	; 0x0d
   12912:	46 85       	ldd	r20, Z+14	; 0x0e
   12914:	57 85       	ldd	r21, Z+15	; 0x0f
   12916:	68 e0       	ldi	r22, 0x08	; 8
   12918:	8f e0       	ldi	r24, 0x0F	; 15
   1291a:	b7 dd       	rcall	.-1170   	; 0x1248a <print_tok_val>
   1291c:	a1 14       	cp	r10, r1
   1291e:	b1 04       	cpc	r11, r1
   12920:	09 f4       	brne	.+2      	; 0x12924 <display_Config+0x1ae>
   12922:	5a c0       	rjmp	.+180    	; 0x129d8 <display_Config+0x262>
   12924:	e9 89       	ldd	r30, Y+17	; 0x11
   12926:	fa 89       	ldd	r31, Y+18	; 0x12
   12928:	20 89       	ldd	r18, Z+16	; 0x10
   1292a:	31 89       	ldd	r19, Z+17	; 0x11
   1292c:	40 e0       	ldi	r20, 0x00	; 0
   1292e:	50 e0       	ldi	r21, 0x00	; 0
   12930:	68 e0       	ldi	r22, 0x08	; 8
   12932:	87 e0       	ldi	r24, 0x07	; 7
   12934:	aa dd       	rcall	.-1196   	; 0x1248a <print_tok_val>
   12936:	e9 89       	ldd	r30, Y+17	; 0x11
   12938:	fa 89       	ldd	r31, Y+18	; 0x12
   1293a:	22 89       	ldd	r18, Z+18	; 0x12
   1293c:	30 e0       	ldi	r19, 0x00	; 0
   1293e:	40 e0       	ldi	r20, 0x00	; 0
   12940:	50 e0       	ldi	r21, 0x00	; 0
   12942:	68 e0       	ldi	r22, 0x08	; 8
   12944:	85 e0       	ldi	r24, 0x05	; 5
   12946:	a1 dd       	rcall	.-1214   	; 0x1248a <print_tok_val>
   12948:	e9 89       	ldd	r30, Y+17	; 0x11
   1294a:	fa 89       	ldd	r31, Y+18	; 0x12
   1294c:	23 89       	ldd	r18, Z+19	; 0x13
   1294e:	30 e0       	ldi	r19, 0x00	; 0
   12950:	40 e0       	ldi	r20, 0x00	; 0
   12952:	50 e0       	ldi	r21, 0x00	; 0
   12954:	68 e0       	ldi	r22, 0x08	; 8
   12956:	86 e0       	ldi	r24, 0x06	; 6
   12958:	98 dd       	rcall	.-1232   	; 0x1248a <print_tok_val>
   1295a:	e9 89       	ldd	r30, Y+17	; 0x11
   1295c:	fa 89       	ldd	r31, Y+18	; 0x12
   1295e:	24 89       	ldd	r18, Z+20	; 0x14
   12960:	35 89       	ldd	r19, Z+21	; 0x15
   12962:	40 e0       	ldi	r20, 0x00	; 0
   12964:	50 e0       	ldi	r21, 0x00	; 0
   12966:	68 e0       	ldi	r22, 0x08	; 8
   12968:	84 e0       	ldi	r24, 0x04	; 4
   1296a:	8f dd       	rcall	.-1250   	; 0x1248a <print_tok_val>
   1296c:	e9 89       	ldd	r30, Y+17	; 0x11
   1296e:	fa 89       	ldd	r31, Y+18	; 0x12
   12970:	26 89       	ldd	r18, Z+22	; 0x16
   12972:	37 89       	ldd	r19, Z+23	; 0x17
   12974:	40 e0       	ldi	r20, 0x00	; 0
   12976:	50 e0       	ldi	r21, 0x00	; 0
   12978:	68 e0       	ldi	r22, 0x08	; 8
   1297a:	8a e0       	ldi	r24, 0x0A	; 10
   1297c:	86 dd       	rcall	.-1268   	; 0x1248a <print_tok_val>
   1297e:	e9 89       	ldd	r30, Y+17	; 0x11
   12980:	fa 89       	ldd	r31, Y+18	; 0x12
   12982:	20 8d       	ldd	r18, Z+24	; 0x18
   12984:	31 8d       	ldd	r19, Z+25	; 0x19
   12986:	40 e0       	ldi	r20, 0x00	; 0
   12988:	50 e0       	ldi	r21, 0x00	; 0
   1298a:	68 e0       	ldi	r22, 0x08	; 8
   1298c:	8e e1       	ldi	r24, 0x1E	; 30
   1298e:	7d dd       	rcall	.-1286   	; 0x1248a <print_tok_val>
   12990:	e9 89       	ldd	r30, Y+17	; 0x11
   12992:	fa 89       	ldd	r31, Y+18	; 0x12
   12994:	22 8d       	ldd	r18, Z+26	; 0x1a
   12996:	33 8d       	ldd	r19, Z+27	; 0x1b
   12998:	40 e0       	ldi	r20, 0x00	; 0
   1299a:	50 e0       	ldi	r21, 0x00	; 0
   1299c:	68 e0       	ldi	r22, 0x08	; 8
   1299e:	80 e0       	ldi	r24, 0x00	; 0
   129a0:	74 dd       	rcall	.-1304   	; 0x1248a <print_tok_val>
   129a2:	e9 89       	ldd	r30, Y+17	; 0x11
   129a4:	fa 89       	ldd	r31, Y+18	; 0x12
   129a6:	24 8d       	ldd	r18, Z+28	; 0x1c
   129a8:	30 e0       	ldi	r19, 0x00	; 0
   129aa:	40 e0       	ldi	r20, 0x00	; 0
   129ac:	50 e0       	ldi	r21, 0x00	; 0
   129ae:	68 e0       	ldi	r22, 0x08	; 8
   129b0:	8c e1       	ldi	r24, 0x1C	; 28
   129b2:	6b dd       	rcall	.-1322   	; 0x1248a <print_tok_val>
   129b4:	e9 89       	ldd	r30, Y+17	; 0x11
   129b6:	fa 89       	ldd	r31, Y+18	; 0x12
   129b8:	25 8d       	ldd	r18, Z+29	; 0x1d
   129ba:	30 e0       	ldi	r19, 0x00	; 0
   129bc:	40 e0       	ldi	r20, 0x00	; 0
   129be:	50 e0       	ldi	r21, 0x00	; 0
   129c0:	68 e0       	ldi	r22, 0x08	; 8
   129c2:	83 e1       	ldi	r24, 0x13	; 19
   129c4:	62 dd       	rcall	.-1340   	; 0x1248a <print_tok_val>
   129c6:	e9 89       	ldd	r30, Y+17	; 0x11
   129c8:	fa 89       	ldd	r31, Y+18	; 0x12
   129ca:	26 8d       	ldd	r18, Z+30	; 0x1e
   129cc:	30 e0       	ldi	r19, 0x00	; 0
   129ce:	40 e0       	ldi	r20, 0x00	; 0
   129d0:	50 e0       	ldi	r21, 0x00	; 0
   129d2:	68 e0       	ldi	r22, 0x08	; 8
   129d4:	81 e2       	ldi	r24, 0x21	; 33
   129d6:	59 dd       	rcall	.-1358   	; 0x1248a <print_tok_val>
   129d8:	64 e0       	ldi	r22, 0x04	; 4
   129da:	81 e1       	ldi	r24, 0x11	; 17
   129dc:	cb dd       	rcall	.-1130   	; 0x12574 <print_tok>
   129de:	a1 14       	cp	r10, r1
   129e0:	b1 04       	cpc	r11, r1
   129e2:	99 f1       	breq	.+102    	; 0x12a4a <display_Config+0x2d4>
   129e4:	64 e0       	ldi	r22, 0x04	; 4
   129e6:	8a e2       	ldi	r24, 0x2A	; 42
   129e8:	c5 dd       	rcall	.-1142   	; 0x12574 <print_tok>
   129ea:	e9 89       	ldd	r30, Y+17	; 0x11
   129ec:	fa 89       	ldd	r31, Y+18	; 0x12
   129ee:	27 8d       	ldd	r18, Z+31	; 0x1f
   129f0:	30 a1       	ldd	r19, Z+32	; 0x20
   129f2:	41 a1       	ldd	r20, Z+33	; 0x21
   129f4:	52 a1       	ldd	r21, Z+34	; 0x22
   129f6:	68 e0       	ldi	r22, 0x08	; 8
   129f8:	8a e1       	ldi	r24, 0x1A	; 26
   129fa:	47 dd       	rcall	.-1394   	; 0x1248a <print_tok_val>
   129fc:	e9 89       	ldd	r30, Y+17	; 0x11
   129fe:	fa 89       	ldd	r31, Y+18	; 0x12
   12a00:	23 a1       	ldd	r18, Z+35	; 0x23
   12a02:	30 e0       	ldi	r19, 0x00	; 0
   12a04:	40 e0       	ldi	r20, 0x00	; 0
   12a06:	50 e0       	ldi	r21, 0x00	; 0
   12a08:	68 e0       	ldi	r22, 0x08	; 8
   12a0a:	8b e1       	ldi	r24, 0x1B	; 27
   12a0c:	3e dd       	rcall	.-1412   	; 0x1248a <print_tok_val>
   12a0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a10:	fa 89       	ldd	r31, Y+18	; 0x12
   12a12:	24 a1       	ldd	r18, Z+36	; 0x24
   12a14:	35 a1       	ldd	r19, Z+37	; 0x25
   12a16:	40 e0       	ldi	r20, 0x00	; 0
   12a18:	50 e0       	ldi	r21, 0x00	; 0
   12a1a:	68 e0       	ldi	r22, 0x08	; 8
   12a1c:	8d e1       	ldi	r24, 0x1D	; 29
   12a1e:	35 dd       	rcall	.-1430   	; 0x1248a <print_tok_val>
   12a20:	e9 89       	ldd	r30, Y+17	; 0x11
   12a22:	fa 89       	ldd	r31, Y+18	; 0x12
   12a24:	26 a1       	ldd	r18, Z+38	; 0x26
   12a26:	37 a1       	ldd	r19, Z+39	; 0x27
   12a28:	40 a5       	ldd	r20, Z+40	; 0x28
   12a2a:	51 a5       	ldd	r21, Z+41	; 0x29
   12a2c:	68 e0       	ldi	r22, 0x08	; 8
   12a2e:	89 e1       	ldi	r24, 0x19	; 25
   12a30:	2c dd       	rcall	.-1448   	; 0x1248a <print_tok_val>
   12a32:	e9 89       	ldd	r30, Y+17	; 0x11
   12a34:	fa 89       	ldd	r31, Y+18	; 0x12
   12a36:	22 a5       	ldd	r18, Z+42	; 0x2a
   12a38:	30 e0       	ldi	r19, 0x00	; 0
   12a3a:	40 e0       	ldi	r20, 0x00	; 0
   12a3c:	50 e0       	ldi	r21, 0x00	; 0
   12a3e:	68 e0       	ldi	r22, 0x08	; 8
   12a40:	88 e1       	ldi	r24, 0x18	; 24
   12a42:	23 dd       	rcall	.-1466   	; 0x1248a <print_tok_val>
   12a44:	64 e0       	ldi	r22, 0x04	; 4
   12a46:	81 e1       	ldi	r24, 0x11	; 17
   12a48:	95 dd       	rcall	.-1238   	; 0x12574 <print_tok>
   12a4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a4e:	86 a1       	ldd	r24, Z+38	; 0x26
   12a50:	97 a1       	ldd	r25, Z+39	; 0x27
   12a52:	a0 a5       	ldd	r26, Z+40	; 0x28
   12a54:	b1 a5       	ldd	r27, Z+41	; 0x29
   12a56:	01 96       	adiw	r24, 0x01	; 1
   12a58:	a1 1d       	adc	r26, r1
   12a5a:	b1 1d       	adc	r27, r1
   12a5c:	ed b7       	in	r30, 0x3d	; 61
   12a5e:	fe b7       	in	r31, 0x3e	; 62
   12a60:	84 83       	std	Z+4, r24	; 0x04
   12a62:	95 83       	std	Z+5, r25	; 0x05
   12a64:	a6 83       	std	Z+6, r26	; 0x06
   12a66:	b7 83       	std	Z+7, r27	; 0x07
   12a68:	2c ed       	ldi	r18, 0xDC	; 220
   12a6a:	39 e1       	ldi	r19, 0x19	; 25
   12a6c:	c9 01       	movw	r24, r18
   12a6e:	a0 e0       	ldi	r26, 0x00	; 0
   12a70:	81 83       	std	Z+1, r24	; 0x01
   12a72:	92 83       	std	Z+2, r25	; 0x02
   12a74:	a3 83       	std	Z+3, r26	; 0x03
   12a76:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12a7a:	60 e0       	ldi	r22, 0x00	; 0
   12a7c:	81 e1       	ldi	r24, 0x11	; 17
   12a7e:	7a dd       	rcall	.-1292   	; 0x12574 <print_tok>
   12a80:	f8 01       	movw	r30, r16
   12a82:	80 81       	ld	r24, Z
   12a84:	81 30       	cpi	r24, 0x01	; 1
   12a86:	09 f0       	breq	.+2      	; 0x12a8a <display_Config+0x314>
   12a88:	ad c0       	rjmp	.+346    	; 0x12be4 <display_Config+0x46e>
   12a8a:	27 a1       	ldd	r18, Z+39	; 0x27
   12a8c:	30 a5       	ldd	r19, Z+40	; 0x28
   12a8e:	3a 8b       	std	Y+18, r19	; 0x12
   12a90:	29 8b       	std	Y+17, r18	; 0x11
   12a92:	c8 01       	movw	r24, r16
   12a94:	07 96       	adiw	r24, 0x07	; 7
   12a96:	ed b7       	in	r30, 0x3d	; 61
   12a98:	fe b7       	in	r31, 0x3e	; 62
   12a9a:	95 83       	std	Z+5, r25	; 0x05
   12a9c:	84 83       	std	Z+4, r24	; 0x04
   12a9e:	2b 85       	ldd	r18, Y+11	; 0x0b
   12aa0:	3c 85       	ldd	r19, Y+12	; 0x0c
   12aa2:	4d 85       	ldd	r20, Y+13	; 0x0d
   12aa4:	21 83       	std	Z+1, r18	; 0x01
   12aa6:	32 83       	std	Z+2, r19	; 0x02
   12aa8:	43 83       	std	Z+3, r20	; 0x03
   12aaa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12aae:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab2:	80 81       	ld	r24, Z
   12ab4:	90 e0       	ldi	r25, 0x00	; 0
   12ab6:	ed b7       	in	r30, 0x3d	; 61
   12ab8:	fe b7       	in	r31, 0x3e	; 62
   12aba:	95 83       	std	Z+5, r25	; 0x05
   12abc:	84 83       	std	Z+4, r24	; 0x04
   12abe:	2e 85       	ldd	r18, Y+14	; 0x0e
   12ac0:	3f 85       	ldd	r19, Y+15	; 0x0f
   12ac2:	48 89       	ldd	r20, Y+16	; 0x10
   12ac4:	21 83       	std	Z+1, r18	; 0x01
   12ac6:	32 83       	std	Z+2, r19	; 0x02
   12ac8:	43 83       	std	Z+3, r20	; 0x03
   12aca:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12ace:	64 e0       	ldi	r22, 0x04	; 4
   12ad0:	85 e1       	ldi	r24, 0x15	; 21
   12ad2:	50 dd       	rcall	.-1376   	; 0x12574 <print_tok>
   12ad4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad8:	20 81       	ld	r18, Z
   12ada:	30 e0       	ldi	r19, 0x00	; 0
   12adc:	40 e0       	ldi	r20, 0x00	; 0
   12ade:	50 e0       	ldi	r21, 0x00	; 0
   12ae0:	68 e0       	ldi	r22, 0x08	; 8
   12ae2:	81 e0       	ldi	r24, 0x01	; 1
   12ae4:	d2 dc       	rcall	.-1628   	; 0x1248a <print_tok_val>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	21 81       	ldd	r18, Z+1	; 0x01
   12aec:	30 e0       	ldi	r19, 0x00	; 0
   12aee:	40 e0       	ldi	r20, 0x00	; 0
   12af0:	50 e0       	ldi	r21, 0x00	; 0
   12af2:	68 e0       	ldi	r22, 0x08	; 8
   12af4:	8f e1       	ldi	r24, 0x1F	; 31
   12af6:	c9 dc       	rcall	.-1646   	; 0x1248a <print_tok_val>
   12af8:	e9 89       	ldd	r30, Y+17	; 0x11
   12afa:	fa 89       	ldd	r31, Y+18	; 0x12
   12afc:	42 81       	ldd	r20, Z+2	; 0x02
   12afe:	53 81       	ldd	r21, Z+3	; 0x03
   12b00:	68 e0       	ldi	r22, 0x08	; 8
   12b02:	82 e1       	ldi	r24, 0x12	; 18
   12b04:	02 dd       	rcall	.-1532   	; 0x1250a <print_tok_str>
   12b06:	64 e0       	ldi	r22, 0x04	; 4
   12b08:	81 e1       	ldi	r24, 0x11	; 17
   12b0a:	34 dd       	rcall	.-1432   	; 0x12574 <print_tok>
   12b0c:	64 e0       	ldi	r22, 0x04	; 4
   12b0e:	89 e0       	ldi	r24, 0x09	; 9
   12b10:	31 dd       	rcall	.-1438   	; 0x12574 <print_tok>
   12b12:	e9 89       	ldd	r30, Y+17	; 0x11
   12b14:	fa 89       	ldd	r31, Y+18	; 0x12
   12b16:	24 81       	ldd	r18, Z+4	; 0x04
   12b18:	35 81       	ldd	r19, Z+5	; 0x05
   12b1a:	40 e0       	ldi	r20, 0x00	; 0
   12b1c:	50 e0       	ldi	r21, 0x00	; 0
   12b1e:	68 e0       	ldi	r22, 0x08	; 8
   12b20:	87 e1       	ldi	r24, 0x17	; 23
   12b22:	b3 dc       	rcall	.-1690   	; 0x1248a <print_tok_val>
   12b24:	64 e0       	ldi	r22, 0x04	; 4
   12b26:	81 e1       	ldi	r24, 0x11	; 17
   12b28:	25 dd       	rcall	.-1462   	; 0x12574 <print_tok>
   12b2a:	a1 14       	cp	r10, r1
   12b2c:	b1 04       	cpc	r11, r1
   12b2e:	91 f1       	breq	.+100    	; 0x12b94 <display_Config+0x41e>
   12b30:	64 e0       	ldi	r22, 0x04	; 4
   12b32:	84 e1       	ldi	r24, 0x14	; 20
   12b34:	1f dd       	rcall	.-1474   	; 0x12574 <print_tok>
   12b36:	e9 89       	ldd	r30, Y+17	; 0x11
   12b38:	fa 89       	ldd	r31, Y+18	; 0x12
   12b3a:	26 81       	ldd	r18, Z+6	; 0x06
   12b3c:	37 81       	ldd	r19, Z+7	; 0x07
   12b3e:	03 2e       	mov	r0, r19
   12b40:	00 0c       	add	r0, r0
   12b42:	44 0b       	sbc	r20, r20
   12b44:	55 0b       	sbc	r21, r21
   12b46:	68 e0       	ldi	r22, 0x08	; 8
   12b48:	88 e0       	ldi	r24, 0x08	; 8
   12b4a:	9f dc       	rcall	.-1730   	; 0x1248a <print_tok_val>
   12b4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b50:	20 85       	ldd	r18, Z+8	; 0x08
   12b52:	31 85       	ldd	r19, Z+9	; 0x09
   12b54:	03 2e       	mov	r0, r19
   12b56:	00 0c       	add	r0, r0
   12b58:	44 0b       	sbc	r20, r20
   12b5a:	55 0b       	sbc	r21, r21
   12b5c:	68 e0       	ldi	r22, 0x08	; 8
   12b5e:	82 e2       	ldi	r24, 0x22	; 34
   12b60:	94 dc       	rcall	.-1752   	; 0x1248a <print_tok_val>
   12b62:	e9 89       	ldd	r30, Y+17	; 0x11
   12b64:	fa 89       	ldd	r31, Y+18	; 0x12
   12b66:	22 85       	ldd	r18, Z+10	; 0x0a
   12b68:	33 85       	ldd	r19, Z+11	; 0x0b
   12b6a:	03 2e       	mov	r0, r19
   12b6c:	00 0c       	add	r0, r0
   12b6e:	44 0b       	sbc	r20, r20
   12b70:	55 0b       	sbc	r21, r21
   12b72:	68 e0       	ldi	r22, 0x08	; 8
   12b74:	86 e1       	ldi	r24, 0x16	; 22
   12b76:	89 dc       	rcall	.-1774   	; 0x1248a <print_tok_val>
   12b78:	e9 89       	ldd	r30, Y+17	; 0x11
   12b7a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b7c:	24 85       	ldd	r18, Z+12	; 0x0c
   12b7e:	35 85       	ldd	r19, Z+13	; 0x0d
   12b80:	03 2e       	mov	r0, r19
   12b82:	00 0c       	add	r0, r0
   12b84:	44 0b       	sbc	r20, r20
   12b86:	55 0b       	sbc	r21, r21
   12b88:	68 e0       	ldi	r22, 0x08	; 8
   12b8a:	8d e0       	ldi	r24, 0x0D	; 13
   12b8c:	7e dc       	rcall	.-1796   	; 0x1248a <print_tok_val>
   12b8e:	64 e0       	ldi	r22, 0x04	; 4
   12b90:	81 e1       	ldi	r24, 0x11	; 17
   12b92:	f0 dc       	rcall	.-1568   	; 0x12574 <print_tok>
   12b94:	e9 89       	ldd	r30, Y+17	; 0x11
   12b96:	fa 89       	ldd	r31, Y+18	; 0x12
   12b98:	44 85       	ldd	r20, Z+12	; 0x0c
   12b9a:	55 85       	ldd	r21, Z+13	; 0x0d
   12b9c:	20 85       	ldd	r18, Z+8	; 0x08
   12b9e:	31 85       	ldd	r19, Z+9	; 0x09
   12ba0:	42 9f       	mul	r20, r18
   12ba2:	c0 01       	movw	r24, r0
   12ba4:	43 9f       	mul	r20, r19
   12ba6:	90 0d       	add	r25, r0
   12ba8:	52 9f       	mul	r21, r18
   12baa:	90 0d       	add	r25, r0
   12bac:	11 24       	eor	r1, r1
   12bae:	42 85       	ldd	r20, Z+10	; 0x0a
   12bb0:	53 85       	ldd	r21, Z+11	; 0x0b
   12bb2:	84 9f       	mul	r24, r20
   12bb4:	90 01       	movw	r18, r0
   12bb6:	85 9f       	mul	r24, r21
   12bb8:	30 0d       	add	r19, r0
   12bba:	94 9f       	mul	r25, r20
   12bbc:	30 0d       	add	r19, r0
   12bbe:	11 24       	eor	r1, r1
   12bc0:	c9 01       	movw	r24, r18
   12bc2:	33 0f       	add	r19, r19
   12bc4:	aa 0b       	sbc	r26, r26
   12bc6:	bb 0b       	sbc	r27, r27
   12bc8:	ed b7       	in	r30, 0x3d	; 61
   12bca:	fe b7       	in	r31, 0x3e	; 62
   12bcc:	84 83       	std	Z+4, r24	; 0x04
   12bce:	95 83       	std	Z+5, r25	; 0x05
   12bd0:	a6 83       	std	Z+6, r26	; 0x06
   12bd2:	b7 83       	std	Z+7, r27	; 0x07
   12bd4:	21 82       	std	Z+1, r2	; 0x01
   12bd6:	32 82       	std	Z+2, r3	; 0x02
   12bd8:	43 82       	std	Z+3, r4	; 0x03
   12bda:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12bde:	60 e0       	ldi	r22, 0x00	; 0
   12be0:	81 e1       	ldi	r24, 0x11	; 17
   12be2:	c8 dc       	rcall	.-1648   	; 0x12574 <print_tok>
   12be4:	f8 01       	movw	r30, r16
   12be6:	80 81       	ld	r24, Z
   12be8:	84 30       	cpi	r24, 0x04	; 4
   12bea:	c9 f4       	brne	.+50     	; 0x12c1e <display_Config+0x4a8>
   12bec:	27 a1       	ldd	r18, Z+39	; 0x27
   12bee:	30 a5       	ldd	r19, Z+40	; 0x28
   12bf0:	3a 8b       	std	Y+18, r19	; 0x12
   12bf2:	29 8b       	std	Y+17, r18	; 0x11
   12bf4:	60 e0       	ldi	r22, 0x00	; 0
   12bf6:	80 e2       	ldi	r24, 0x20	; 32
   12bf8:	bd dc       	rcall	.-1670   	; 0x12574 <print_tok>
   12bfa:	64 e0       	ldi	r22, 0x04	; 4
   12bfc:	89 e0       	ldi	r24, 0x09	; 9
   12bfe:	ba dc       	rcall	.-1676   	; 0x12574 <print_tok>
   12c00:	e9 89       	ldd	r30, Y+17	; 0x11
   12c02:	fa 89       	ldd	r31, Y+18	; 0x12
   12c04:	20 81       	ld	r18, Z
   12c06:	30 e0       	ldi	r19, 0x00	; 0
   12c08:	40 e0       	ldi	r20, 0x00	; 0
   12c0a:	50 e0       	ldi	r21, 0x00	; 0
   12c0c:	68 e0       	ldi	r22, 0x08	; 8
   12c0e:	81 e0       	ldi	r24, 0x01	; 1
   12c10:	3c dc       	rcall	.-1928   	; 0x1248a <print_tok_val>
   12c12:	64 e0       	ldi	r22, 0x04	; 4
   12c14:	81 e1       	ldi	r24, 0x11	; 17
   12c16:	ae dc       	rcall	.-1700   	; 0x12574 <print_tok>
   12c18:	60 e0       	ldi	r22, 0x00	; 0
   12c1a:	81 e1       	ldi	r24, 0x11	; 17
   12c1c:	ab dc       	rcall	.-1706   	; 0x12574 <print_tok>
   12c1e:	28 85       	ldd	r18, Y+8	; 0x08
   12c20:	39 85       	ldd	r19, Y+9	; 0x09
   12c22:	4a 85       	ldd	r20, Y+10	; 0x0a
   12c24:	ed b7       	in	r30, 0x3d	; 61
   12c26:	fe b7       	in	r31, 0x3e	; 62
   12c28:	21 83       	std	Z+1, r18	; 0x01
   12c2a:	32 83       	std	Z+2, r19	; 0x02
   12c2c:	43 83       	std	Z+3, r20	; 0x03
   12c2e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12c32:	05 5d       	subi	r16, 0xD5	; 213
   12c34:	1f 4f       	sbci	r17, 0xFF	; 255
   12c36:	2f ef       	ldi	r18, 0xFF	; 255
   12c38:	31 e2       	ldi	r19, 0x21	; 33
   12c3a:	20 17       	cp	r18, r16
   12c3c:	31 07       	cpc	r19, r17
   12c3e:	09 f0       	breq	.+2      	; 0x12c42 <display_Config+0x4cc>
   12c40:	df cd       	rjmp	.-1090   	; 0x12800 <display_Config+0x8a>
   12c42:	8b e9       	ldi	r24, 0x9B	; 155
   12c44:	99 e1       	ldi	r25, 0x19	; 25
   12c46:	a0 e0       	ldi	r26, 0x00	; 0
   12c48:	ed b7       	in	r30, 0x3d	; 61
   12c4a:	fe b7       	in	r31, 0x3e	; 62
   12c4c:	81 83       	std	Z+1, r24	; 0x01
   12c4e:	92 83       	std	Z+2, r25	; 0x02
   12c50:	a3 83       	std	Z+3, r26	; 0x03
   12c52:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12c56:	62 96       	adiw	r28, 0x12	; 18
   12c58:	0f b6       	in	r0, 0x3f	; 63
   12c5a:	f8 94       	cli
   12c5c:	de bf       	out	0x3e, r29	; 62
   12c5e:	0f be       	out	0x3f, r0	; 63
   12c60:	cd bf       	out	0x3d, r28	; 61
   12c62:	df 91       	pop	r29
   12c64:	cf 91       	pop	r28
   12c66:	1f 91       	pop	r17
   12c68:	0f 91       	pop	r16
   12c6a:	ef 90       	pop	r14
   12c6c:	df 90       	pop	r13
   12c6e:	cf 90       	pop	r12
   12c70:	bf 90       	pop	r11
   12c72:	af 90       	pop	r10
   12c74:	8f 90       	pop	r8
   12c76:	7f 90       	pop	r7
   12c78:	6f 90       	pop	r6
   12c7a:	4f 90       	pop	r4
   12c7c:	3f 90       	pop	r3
   12c7e:	2f 90       	pop	r2
   12c80:	08 95       	ret

00012c82 <find_type>:
   12c82:	eb ef       	ldi	r30, 0xFB	; 251
   12c84:	ff e1       	ldi	r31, 0x1F	; 31
   12c86:	20 e0       	ldi	r18, 0x00	; 0
   12c88:	30 e0       	ldi	r19, 0x00	; 0
   12c8a:	40 81       	ld	r20, Z
   12c8c:	50 e0       	ldi	r21, 0x00	; 0
   12c8e:	48 17       	cp	r20, r24
   12c90:	59 07       	cpc	r21, r25
   12c92:	49 f0       	breq	.+18     	; 0x12ca6 <find_type+0x24>
   12c94:	2f 5f       	subi	r18, 0xFF	; 255
   12c96:	3f 4f       	sbci	r19, 0xFF	; 255
   12c98:	bb 96       	adiw	r30, 0x2b	; 43
   12c9a:	2c 30       	cpi	r18, 0x0C	; 12
   12c9c:	31 05       	cpc	r19, r1
   12c9e:	a9 f7       	brne	.-22     	; 0x12c8a <find_type+0x8>
   12ca0:	8f ef       	ldi	r24, 0xFF	; 255
   12ca2:	9f ef       	ldi	r25, 0xFF	; 255
   12ca4:	08 95       	ret
   12ca6:	c9 01       	movw	r24, r18
   12ca8:	08 95       	ret

00012caa <count_drive_types>:
   12caa:	28 2f       	mov	r18, r24
   12cac:	eb ef       	ldi	r30, 0xFB	; 251
   12cae:	ff e1       	ldi	r31, 0x1F	; 31
   12cb0:	80 e0       	ldi	r24, 0x00	; 0
   12cb2:	90 e0       	ldi	r25, 0x00	; 0
   12cb4:	30 81       	ld	r19, Z
   12cb6:	32 13       	cpse	r19, r18
   12cb8:	01 c0       	rjmp	.+2      	; 0x12cbc <count_drive_types+0x12>
   12cba:	01 96       	adiw	r24, 0x01	; 1
   12cbc:	bb 96       	adiw	r30, 0x2b	; 43
   12cbe:	31 e2       	ldi	r19, 0x21	; 33
   12cc0:	ef 3f       	cpi	r30, 0xFF	; 255
   12cc2:	f3 07       	cpc	r31, r19
   12cc4:	b9 f7       	brne	.-18     	; 0x12cb4 <count_drive_types+0xa>
   12cc6:	08 95       	ret

00012cc8 <type_to_str>:
   12cc8:	00 97       	sbiw	r24, 0x00	; 0
   12cca:	59 f0       	breq	.+22     	; 0x12ce2 <type_to_str+0x1a>
   12ccc:	81 30       	cpi	r24, 0x01	; 1
   12cce:	91 05       	cpc	r25, r1
   12cd0:	59 f0       	breq	.+22     	; 0x12ce8 <type_to_str+0x20>
   12cd2:	83 30       	cpi	r24, 0x03	; 3
   12cd4:	91 05       	cpc	r25, r1
   12cd6:	59 f0       	breq	.+22     	; 0x12cee <type_to_str+0x26>
   12cd8:	04 97       	sbiw	r24, 0x04	; 4
   12cda:	61 f0       	breq	.+24     	; 0x12cf4 <type_to_str+0x2c>
   12cdc:	85 e3       	ldi	r24, 0x35	; 53
   12cde:	9e e0       	ldi	r25, 0x0E	; 14
   12ce0:	08 95       	ret
   12ce2:	8b e0       	ldi	r24, 0x0B	; 11
   12ce4:	9e e0       	ldi	r25, 0x0E	; 14
   12ce6:	08 95       	ret
   12ce8:	83 e1       	ldi	r24, 0x13	; 19
   12cea:	9e e0       	ldi	r25, 0x0E	; 14
   12cec:	08 95       	ret
   12cee:	8b e2       	ldi	r24, 0x2B	; 43
   12cf0:	9e e0       	ldi	r25, 0x0E	; 14
   12cf2:	08 95       	ret
   12cf4:	8e e1       	ldi	r24, 0x1E	; 30
   12cf6:	9e e0       	ldi	r25, 0x0E	; 14
   12cf8:	08 95       	ret

00012cfa <find_free>:
   12cfa:	80 e0       	ldi	r24, 0x00	; 0
   12cfc:	90 e0       	ldi	r25, 0x00	; 0
   12cfe:	c1 cf       	rjmp	.-126    	; 0x12c82 <find_type>
   12d00:	08 95       	ret

00012d02 <find_device>:
   12d02:	9b 01       	movw	r18, r22
   12d04:	20 52       	subi	r18, 0x20	; 32
   12d06:	31 09       	sbc	r19, r1
   12d08:	2f 35       	cpi	r18, 0x5F	; 95
   12d0a:	31 05       	cpc	r19, r1
   12d0c:	f8 f4       	brcc	.+62     	; 0x12d4c <find_device+0x4a>
   12d0e:	64 17       	cp	r22, r20
   12d10:	75 07       	cpc	r23, r21
   12d12:	e4 f0       	brlt	.+56     	; 0x12d4c <find_device+0x4a>
   12d14:	9a 01       	movw	r18, r20
   12d16:	22 5e       	subi	r18, 0xE2	; 226
   12d18:	3f 4f       	sbci	r19, 0xFF	; 255
   12d1a:	26 17       	cp	r18, r22
   12d1c:	37 07       	cpc	r19, r23
   12d1e:	b4 f0       	brlt	.+44     	; 0x12d4c <find_device+0x4a>
   12d20:	64 1b       	sub	r22, r20
   12d22:	75 0b       	sbc	r23, r21
   12d24:	eb ef       	ldi	r30, 0xFB	; 251
   12d26:	ff e1       	ldi	r31, 0x1F	; 31
   12d28:	20 e0       	ldi	r18, 0x00	; 0
   12d2a:	30 e0       	ldi	r19, 0x00	; 0
   12d2c:	40 81       	ld	r20, Z
   12d2e:	50 e0       	ldi	r21, 0x00	; 0
   12d30:	48 17       	cp	r20, r24
   12d32:	59 07       	cpc	r21, r25
   12d34:	29 f4       	brne	.+10     	; 0x12d40 <find_device+0x3e>
   12d36:	41 81       	ldd	r20, Z+1	; 0x01
   12d38:	50 e0       	ldi	r21, 0x00	; 0
   12d3a:	64 17       	cp	r22, r20
   12d3c:	75 07       	cpc	r23, r21
   12d3e:	49 f0       	breq	.+18     	; 0x12d52 <find_device+0x50>
   12d40:	2f 5f       	subi	r18, 0xFF	; 255
   12d42:	3f 4f       	sbci	r19, 0xFF	; 255
   12d44:	bb 96       	adiw	r30, 0x2b	; 43
   12d46:	2c 30       	cpi	r18, 0x0C	; 12
   12d48:	31 05       	cpc	r19, r1
   12d4a:	81 f7       	brne	.-32     	; 0x12d2c <find_device+0x2a>
   12d4c:	8f ef       	ldi	r24, 0xFF	; 255
   12d4e:	9f ef       	ldi	r25, 0xFF	; 255
   12d50:	08 95       	ret
   12d52:	c9 01       	movw	r24, r18
   12d54:	08 95       	ret

00012d56 <set_active_device>:
   12d56:	a9 e0       	ldi	r26, 0x09	; 9
   12d58:	b0 e0       	ldi	r27, 0x00	; 0
   12d5a:	e1 eb       	ldi	r30, 0xB1	; 177
   12d5c:	f6 e9       	ldi	r31, 0x96	; 150
   12d5e:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
   12d62:	8f 3f       	cpi	r24, 0xFF	; 255
   12d64:	2f ef       	ldi	r18, 0xFF	; 255
   12d66:	92 07       	cpc	r25, r18
   12d68:	09 f4       	brne	.+2      	; 0x12d6c <set_active_device+0x16>
   12d6a:	d0 c0       	rjmp	.+416    	; 0x12f0c <set_active_device+0x1b6>
   12d6c:	ec 01       	movw	r28, r24
   12d6e:	0c 97       	sbiw	r24, 0x0c	; 12
   12d70:	b0 f0       	brcs	.+44     	; 0x12d9e <set_active_device+0x48>
   12d72:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d76:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d7a:	c9 01       	movw	r24, r18
   12d7c:	81 70       	andi	r24, 0x01	; 1
   12d7e:	99 27       	eor	r25, r25
   12d80:	20 ff       	sbrs	r18, 0
   12d82:	c6 c0       	rjmp	.+396    	; 0x12f10 <set_active_device+0x1ba>
   12d84:	ed b7       	in	r30, 0x3d	; 61
   12d86:	fe b7       	in	r31, 0x3e	; 62
   12d88:	d5 83       	std	Z+5, r29	; 0x05
   12d8a:	c4 83       	std	Z+4, r28	; 0x04
   12d8c:	86 e7       	ldi	r24, 0x76	; 118
   12d8e:	99 e1       	ldi	r25, 0x19	; 25
   12d90:	a0 e0       	ldi	r26, 0x00	; 0
   12d92:	81 83       	std	Z+1, r24	; 0x01
   12d94:	92 83       	std	Z+2, r25	; 0x02
   12d96:	a3 83       	std	Z+3, r26	; 0x03
   12d98:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12d9c:	b7 c0       	rjmp	.+366    	; 0x12f0c <set_active_device+0x1b6>
   12d9e:	8b e2       	ldi	r24, 0x2B	; 43
   12da0:	8c 9f       	mul	r24, r28
   12da2:	f0 01       	movw	r30, r0
   12da4:	8d 9f       	mul	r24, r29
   12da6:	f0 0d       	add	r31, r0
   12da8:	11 24       	eor	r1, r1
   12daa:	e5 50       	subi	r30, 0x05	; 5
   12dac:	f0 4e       	sbci	r31, 0xE0	; 224
   12dae:	21 81       	ldd	r18, Z+1	; 0x01
   12db0:	2f 31       	cpi	r18, 0x1F	; 31
   12db2:	d0 f0       	brcs	.+52     	; 0x12de8 <set_active_device+0x92>
   12db4:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12db8:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12dbc:	ca 01       	movw	r24, r20
   12dbe:	81 70       	andi	r24, 0x01	; 1
   12dc0:	99 27       	eor	r25, r25
   12dc2:	40 ff       	sbrs	r20, 0
   12dc4:	a5 c0       	rjmp	.+330    	; 0x12f10 <set_active_device+0x1ba>
   12dc6:	82 2f       	mov	r24, r18
   12dc8:	90 e0       	ldi	r25, 0x00	; 0
   12dca:	ed b7       	in	r30, 0x3d	; 61
   12dcc:	fe b7       	in	r31, 0x3e	; 62
   12dce:	97 83       	std	Z+7, r25	; 0x07
   12dd0:	86 83       	std	Z+6, r24	; 0x06
   12dd2:	d5 83       	std	Z+5, r29	; 0x05
   12dd4:	c4 83       	std	Z+4, r28	; 0x04
   12dd6:	8d e3       	ldi	r24, 0x3D	; 61
   12dd8:	99 e1       	ldi	r25, 0x19	; 25
   12dda:	a0 e0       	ldi	r26, 0x00	; 0
   12ddc:	81 83       	std	Z+1, r24	; 0x01
   12dde:	92 83       	std	Z+2, r25	; 0x02
   12de0:	a3 83       	std	Z+3, r26	; 0x03
   12de2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12de6:	92 c0       	rjmp	.+292    	; 0x12f0c <set_active_device+0x1b6>
   12de8:	20 81       	ld	r18, Z
   12dea:	02 2f       	mov	r16, r18
   12dec:	10 e0       	ldi	r17, 0x00	; 0
   12dee:	87 a1       	ldd	r24, Z+39	; 0x27
   12df0:	90 a5       	ldd	r25, Z+40	; 0x28
   12df2:	00 97       	sbiw	r24, 0x00	; 0
   12df4:	b1 f4       	brne	.+44     	; 0x12e22 <set_active_device+0xcc>
   12df6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12dfa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12dfe:	c9 01       	movw	r24, r18
   12e00:	81 70       	andi	r24, 0x01	; 1
   12e02:	99 27       	eor	r25, r25
   12e04:	20 ff       	sbrs	r18, 0
   12e06:	84 c0       	rjmp	.+264    	; 0x12f10 <set_active_device+0x1ba>
   12e08:	c8 01       	movw	r24, r16
   12e0a:	5e df       	rcall	.-324    	; 0x12cc8 <type_to_str>
   12e0c:	ed b7       	in	r30, 0x3d	; 61
   12e0e:	fe b7       	in	r31, 0x3e	; 62
   12e10:	91 87       	std	Z+9, r25	; 0x09
   12e12:	80 87       	std	Z+8, r24	; 0x08
   12e14:	17 83       	std	Z+7, r17	; 0x07
   12e16:	06 83       	std	Z+6, r16	; 0x06
   12e18:	d5 83       	std	Z+5, r29	; 0x05
   12e1a:	c4 83       	std	Z+4, r28	; 0x04
   12e1c:	88 e0       	ldi	r24, 0x08	; 8
   12e1e:	99 e1       	ldi	r25, 0x19	; 25
   12e20:	6f c0       	rjmp	.+222    	; 0x12f00 <set_active_device+0x1aa>
   12e22:	01 15       	cp	r16, r1
   12e24:	11 05       	cpc	r17, r1
   12e26:	b9 f4       	brne	.+46     	; 0x12e56 <set_active_device+0x100>
   12e28:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e2c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e30:	c9 01       	movw	r24, r18
   12e32:	81 70       	andi	r24, 0x01	; 1
   12e34:	99 27       	eor	r25, r25
   12e36:	20 ff       	sbrs	r18, 0
   12e38:	6b c0       	rjmp	.+214    	; 0x12f10 <set_active_device+0x1ba>
   12e3a:	80 e0       	ldi	r24, 0x00	; 0
   12e3c:	90 e0       	ldi	r25, 0x00	; 0
   12e3e:	44 df       	rcall	.-376    	; 0x12cc8 <type_to_str>
   12e40:	ed b7       	in	r30, 0x3d	; 61
   12e42:	fe b7       	in	r31, 0x3e	; 62
   12e44:	91 87       	std	Z+9, r25	; 0x09
   12e46:	80 87       	std	Z+8, r24	; 0x08
   12e48:	17 82       	std	Z+7, r1	; 0x07
   12e4a:	16 82       	std	Z+6, r1	; 0x06
   12e4c:	d5 83       	std	Z+5, r29	; 0x05
   12e4e:	c4 83       	std	Z+4, r28	; 0x04
   12e50:	83 ed       	ldi	r24, 0xD3	; 211
   12e52:	98 e1       	ldi	r25, 0x18	; 24
   12e54:	55 c0       	rjmp	.+170    	; 0x12f00 <set_active_device+0x1aa>
   12e56:	04 30       	cpi	r16, 0x04	; 4
   12e58:	11 05       	cpc	r17, r1
   12e5a:	29 f4       	brne	.+10     	; 0x12e66 <set_active_device+0x110>
   12e5c:	90 93 72 1a 	sts	0x1A72, r25	; 0x801a72 <PRINTERp+0x1>
   12e60:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <PRINTERp>
   12e64:	35 c0       	rjmp	.+106    	; 0x12ed0 <set_active_device+0x17a>
   12e66:	2d 7f       	andi	r18, 0xFD	; 253
   12e68:	21 30       	cpi	r18, 0x01	; 1
   12e6a:	a9 f5       	brne	.+106    	; 0x12ed6 <set_active_device+0x180>
   12e6c:	21 a5       	ldd	r18, Z+41	; 0x29
   12e6e:	32 a5       	ldd	r19, Z+42	; 0x2a
   12e70:	21 15       	cp	r18, r1
   12e72:	31 05       	cpc	r19, r1
   12e74:	b1 f4       	brne	.+44     	; 0x12ea2 <set_active_device+0x14c>
   12e76:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e7a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e7e:	c9 01       	movw	r24, r18
   12e80:	81 70       	andi	r24, 0x01	; 1
   12e82:	99 27       	eor	r25, r25
   12e84:	20 ff       	sbrs	r18, 0
   12e86:	44 c0       	rjmp	.+136    	; 0x12f10 <set_active_device+0x1ba>
   12e88:	c8 01       	movw	r24, r16
   12e8a:	1e df       	rcall	.-452    	; 0x12cc8 <type_to_str>
   12e8c:	ed b7       	in	r30, 0x3d	; 61
   12e8e:	fe b7       	in	r31, 0x3e	; 62
   12e90:	91 87       	std	Z+9, r25	; 0x09
   12e92:	80 87       	std	Z+8, r24	; 0x08
   12e94:	17 83       	std	Z+7, r17	; 0x07
   12e96:	06 83       	std	Z+6, r16	; 0x06
   12e98:	d5 83       	std	Z+5, r29	; 0x05
   12e9a:	c4 83       	std	Z+4, r28	; 0x04
   12e9c:	8b e9       	ldi	r24, 0x9B	; 155
   12e9e:	98 e1       	ldi	r25, 0x18	; 24
   12ea0:	2f c0       	rjmp	.+94     	; 0x12f00 <set_active_device+0x1aa>
   12ea2:	01 30       	cpi	r16, 0x01	; 1
   12ea4:	11 05       	cpc	r17, r1
   12ea6:	49 f4       	brne	.+18     	; 0x12eba <set_active_device+0x164>
   12ea8:	90 93 6c 1a 	sts	0x1A6C, r25	; 0x801a6c <AMIGOp+0x1>
   12eac:	80 93 6b 1a 	sts	0x1A6B, r24	; 0x801a6b <AMIGOp>
   12eb0:	30 93 6a 1a 	sts	0x1A6A, r19	; 0x801a6a <AMIGOs+0x1>
   12eb4:	20 93 69 1a 	sts	0x1A69, r18	; 0x801a69 <AMIGOs>
   12eb8:	0b c0       	rjmp	.+22     	; 0x12ed0 <set_active_device+0x17a>
   12eba:	03 30       	cpi	r16, 0x03	; 3
   12ebc:	11 05       	cpc	r17, r1
   12ebe:	59 f4       	brne	.+22     	; 0x12ed6 <set_active_device+0x180>
   12ec0:	90 93 70 1a 	sts	0x1A70, r25	; 0x801a70 <SS80p+0x1>
   12ec4:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <SS80p>
   12ec8:	30 93 6e 1a 	sts	0x1A6E, r19	; 0x801a6e <SS80s+0x1>
   12ecc:	20 93 6d 1a 	sts	0x1A6D, r18	; 0x801a6d <SS80s>
   12ed0:	81 e0       	ldi	r24, 0x01	; 1
   12ed2:	90 e0       	ldi	r25, 0x00	; 0
   12ed4:	1d c0       	rjmp	.+58     	; 0x12f10 <set_active_device+0x1ba>
   12ed6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12eda:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12ede:	c9 01       	movw	r24, r18
   12ee0:	81 70       	andi	r24, 0x01	; 1
   12ee2:	99 27       	eor	r25, r25
   12ee4:	20 ff       	sbrs	r18, 0
   12ee6:	14 c0       	rjmp	.+40     	; 0x12f10 <set_active_device+0x1ba>
   12ee8:	c8 01       	movw	r24, r16
   12eea:	ee de       	rcall	.-548    	; 0x12cc8 <type_to_str>
   12eec:	ed b7       	in	r30, 0x3d	; 61
   12eee:	fe b7       	in	r31, 0x3e	; 62
   12ef0:	91 87       	std	Z+9, r25	; 0x09
   12ef2:	80 87       	std	Z+8, r24	; 0x08
   12ef4:	17 83       	std	Z+7, r17	; 0x07
   12ef6:	06 83       	std	Z+6, r16	; 0x06
   12ef8:	d5 83       	std	Z+5, r29	; 0x05
   12efa:	c4 83       	std	Z+4, r28	; 0x04
   12efc:	80 e7       	ldi	r24, 0x70	; 112
   12efe:	98 e1       	ldi	r25, 0x18	; 24
   12f00:	a0 e0       	ldi	r26, 0x00	; 0
   12f02:	81 83       	std	Z+1, r24	; 0x01
   12f04:	92 83       	std	Z+2, r25	; 0x02
   12f06:	a3 83       	std	Z+3, r26	; 0x03
   12f08:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   12f0c:	80 e0       	ldi	r24, 0x00	; 0
   12f0e:	90 e0       	ldi	r25, 0x00	; 0
   12f10:	cd b7       	in	r28, 0x3d	; 61
   12f12:	de b7       	in	r29, 0x3e	; 62
   12f14:	29 96       	adiw	r28, 0x09	; 9
   12f16:	e4 e0       	ldi	r30, 0x04	; 4
   12f18:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00012f1c <SS80_Set_Defaults>:
   12f1c:	0f 93       	push	r16
   12f1e:	1f 93       	push	r17
   12f20:	cf 93       	push	r28
   12f22:	df 93       	push	r29
   12f24:	ec 01       	movw	r28, r24
   12f26:	82 e0       	ldi	r24, 0x02	; 2
   12f28:	90 e0       	ldi	r25, 0x00	; 0
   12f2a:	ab de       	rcall	.-682    	; 0x12c82 <find_type>
   12f2c:	97 fd       	sbrc	r25, 7
   12f2e:	6b c0       	rjmp	.+214    	; 0x13006 <SS80_Set_Defaults+0xea>
   12f30:	2b e2       	ldi	r18, 0x2B	; 43
   12f32:	2c 9f       	mul	r18, r28
   12f34:	f0 01       	movw	r30, r0
   12f36:	2d 9f       	mul	r18, r29
   12f38:	f0 0d       	add	r31, r0
   12f3a:	11 24       	eor	r1, r1
   12f3c:	e5 50       	subi	r30, 0x05	; 5
   12f3e:	f0 4e       	sbci	r31, 0xE0	; 224
   12f40:	c7 a1       	ldd	r28, Z+39	; 0x27
   12f42:	d0 a5       	ldd	r29, Z+40	; 0x28
   12f44:	28 9f       	mul	r18, r24
   12f46:	f0 01       	movw	r30, r0
   12f48:	29 9f       	mul	r18, r25
   12f4a:	f0 0d       	add	r31, r0
   12f4c:	11 24       	eor	r1, r1
   12f4e:	e5 50       	subi	r30, 0x05	; 5
   12f50:	f0 4e       	sbci	r31, 0xE0	; 224
   12f52:	07 a1       	ldd	r16, Z+39	; 0x27
   12f54:	10 a5       	ldd	r17, Z+40	; 0x28
   12f56:	f8 01       	movw	r30, r16
   12f58:	80 81       	ld	r24, Z
   12f5a:	88 83       	st	Y, r24
   12f5c:	81 81       	ldd	r24, Z+1	; 0x01
   12f5e:	89 83       	std	Y+1, r24	; 0x01
   12f60:	82 81       	ldd	r24, Z+2	; 0x02
   12f62:	93 81       	ldd	r25, Z+3	; 0x03
   12f64:	0e 94 07 30 	call	0x600e	; 0x600e <stralloc>
   12f68:	9b 83       	std	Y+3, r25	; 0x03
   12f6a:	8a 83       	std	Y+2, r24	; 0x02
   12f6c:	f8 01       	movw	r30, r16
   12f6e:	84 81       	ldd	r24, Z+4	; 0x04
   12f70:	95 81       	ldd	r25, Z+5	; 0x05
   12f72:	9d 83       	std	Y+5, r25	; 0x05
   12f74:	8c 83       	std	Y+4, r24	; 0x04
   12f76:	86 81       	ldd	r24, Z+6	; 0x06
   12f78:	97 81       	ldd	r25, Z+7	; 0x07
   12f7a:	9f 83       	std	Y+7, r25	; 0x07
   12f7c:	8e 83       	std	Y+6, r24	; 0x06
   12f7e:	80 85       	ldd	r24, Z+8	; 0x08
   12f80:	91 85       	ldd	r25, Z+9	; 0x09
   12f82:	99 87       	std	Y+9, r25	; 0x09
   12f84:	88 87       	std	Y+8, r24	; 0x08
   12f86:	82 85       	ldd	r24, Z+10	; 0x0a
   12f88:	8a 87       	std	Y+10, r24	; 0x0a
   12f8a:	83 85       	ldd	r24, Z+11	; 0x0b
   12f8c:	8b 87       	std	Y+11, r24	; 0x0b
   12f8e:	84 85       	ldd	r24, Z+12	; 0x0c
   12f90:	95 85       	ldd	r25, Z+13	; 0x0d
   12f92:	a6 85       	ldd	r26, Z+14	; 0x0e
   12f94:	b7 85       	ldd	r27, Z+15	; 0x0f
   12f96:	8c 87       	std	Y+12, r24	; 0x0c
   12f98:	9d 87       	std	Y+13, r25	; 0x0d
   12f9a:	ae 87       	std	Y+14, r26	; 0x0e
   12f9c:	bf 87       	std	Y+15, r27	; 0x0f
   12f9e:	80 89       	ldd	r24, Z+16	; 0x10
   12fa0:	91 89       	ldd	r25, Z+17	; 0x11
   12fa2:	99 8b       	std	Y+17, r25	; 0x11
   12fa4:	88 8b       	std	Y+16, r24	; 0x10
   12fa6:	82 89       	ldd	r24, Z+18	; 0x12
   12fa8:	8a 8b       	std	Y+18, r24	; 0x12
   12faa:	83 89       	ldd	r24, Z+19	; 0x13
   12fac:	8b 8b       	std	Y+19, r24	; 0x13
   12fae:	84 89       	ldd	r24, Z+20	; 0x14
   12fb0:	95 89       	ldd	r25, Z+21	; 0x15
   12fb2:	9d 8b       	std	Y+21, r25	; 0x15
   12fb4:	8c 8b       	std	Y+20, r24	; 0x14
   12fb6:	86 89       	ldd	r24, Z+22	; 0x16
   12fb8:	97 89       	ldd	r25, Z+23	; 0x17
   12fba:	9f 8b       	std	Y+23, r25	; 0x17
   12fbc:	8e 8b       	std	Y+22, r24	; 0x16
   12fbe:	80 8d       	ldd	r24, Z+24	; 0x18
   12fc0:	91 8d       	ldd	r25, Z+25	; 0x19
   12fc2:	99 8f       	std	Y+25, r25	; 0x19
   12fc4:	88 8f       	std	Y+24, r24	; 0x18
   12fc6:	82 8d       	ldd	r24, Z+26	; 0x1a
   12fc8:	93 8d       	ldd	r25, Z+27	; 0x1b
   12fca:	9b 8f       	std	Y+27, r25	; 0x1b
   12fcc:	8a 8f       	std	Y+26, r24	; 0x1a
   12fce:	84 8d       	ldd	r24, Z+28	; 0x1c
   12fd0:	8c 8f       	std	Y+28, r24	; 0x1c
   12fd2:	85 8d       	ldd	r24, Z+29	; 0x1d
   12fd4:	8d 8f       	std	Y+29, r24	; 0x1d
   12fd6:	87 8d       	ldd	r24, Z+31	; 0x1f
   12fd8:	90 a1       	ldd	r25, Z+32	; 0x20
   12fda:	a1 a1       	ldd	r26, Z+33	; 0x21
   12fdc:	b2 a1       	ldd	r27, Z+34	; 0x22
   12fde:	8f 8f       	std	Y+31, r24	; 0x1f
   12fe0:	98 a3       	std	Y+32, r25	; 0x20
   12fe2:	a9 a3       	std	Y+33, r26	; 0x21
   12fe4:	ba a3       	std	Y+34, r27	; 0x22
   12fe6:	83 a1       	ldd	r24, Z+35	; 0x23
   12fe8:	8b a3       	std	Y+35, r24	; 0x23
   12fea:	84 a1       	ldd	r24, Z+36	; 0x24
   12fec:	95 a1       	ldd	r25, Z+37	; 0x25
   12fee:	9d a3       	std	Y+37, r25	; 0x25
   12ff0:	8c a3       	std	Y+36, r24	; 0x24
   12ff2:	86 a1       	ldd	r24, Z+38	; 0x26
   12ff4:	97 a1       	ldd	r25, Z+39	; 0x27
   12ff6:	a0 a5       	ldd	r26, Z+40	; 0x28
   12ff8:	b1 a5       	ldd	r27, Z+41	; 0x29
   12ffa:	8e a3       	std	Y+38, r24	; 0x26
   12ffc:	9f a3       	std	Y+39, r25	; 0x27
   12ffe:	a8 a7       	std	Y+40, r26	; 0x28
   13000:	b9 a7       	std	Y+41, r27	; 0x29
   13002:	82 a5       	ldd	r24, Z+42	; 0x2a
   13004:	8a a7       	std	Y+42, r24	; 0x2a
   13006:	df 91       	pop	r29
   13008:	cf 91       	pop	r28
   1300a:	1f 91       	pop	r17
   1300c:	0f 91       	pop	r16
   1300e:	08 95       	ret

00013010 <alloc_device>:
   13010:	0f 93       	push	r16
   13012:	1f 93       	push	r17
   13014:	cf 93       	push	r28
   13016:	df 93       	push	r29
   13018:	ad b7       	in	r26, 0x3d	; 61
   1301a:	be b7       	in	r27, 0x3e	; 62
   1301c:	17 97       	sbiw	r26, 0x07	; 7
   1301e:	0f b6       	in	r0, 0x3f	; 63
   13020:	f8 94       	cli
   13022:	be bf       	out	0x3e, r27	; 62
   13024:	0f be       	out	0x3f, r0	; 63
   13026:	ad bf       	out	0x3d, r26	; 61
   13028:	8c 01       	movw	r16, r24
   1302a:	67 de       	rcall	.-818    	; 0x12cfa <find_free>
   1302c:	ec 01       	movw	r28, r24
   1302e:	cf 3f       	cpi	r28, 0xFF	; 255
   13030:	8f ef       	ldi	r24, 0xFF	; 255
   13032:	d8 07       	cpc	r29, r24
   13034:	89 f4       	brne	.+34     	; 0x13058 <alloc_device+0x48>
   13036:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1303a:	80 ff       	sbrs	r24, 0
   1303c:	a1 c0       	rjmp	.+322    	; 0x13180 <alloc_device+0x170>
   1303e:	ed b7       	in	r30, 0x3d	; 61
   13040:	fe b7       	in	r31, 0x3e	; 62
   13042:	15 83       	std	Z+5, r17	; 0x05
   13044:	04 83       	std	Z+4, r16	; 0x04
   13046:	8c e4       	ldi	r24, 0x4C	; 76
   13048:	98 e1       	ldi	r25, 0x18	; 24
   1304a:	a0 e0       	ldi	r26, 0x00	; 0
   1304c:	81 83       	std	Z+1, r24	; 0x01
   1304e:	92 83       	std	Z+2, r25	; 0x02
   13050:	a3 83       	std	Z+3, r26	; 0x03
   13052:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   13056:	94 c0       	rjmp	.+296    	; 0x13180 <alloc_device+0x170>
   13058:	02 30       	cpi	r16, 0x02	; 2
   1305a:	11 05       	cpc	r17, r1
   1305c:	e1 f1       	breq	.+120    	; 0x130d6 <alloc_device+0xc6>
   1305e:	ec f4       	brge	.+58     	; 0x1309a <alloc_device+0x8a>
   13060:	01 30       	cpi	r16, 0x01	; 1
   13062:	11 05       	cpc	r17, r1
   13064:	09 f0       	breq	.+2      	; 0x13068 <alloc_device+0x58>
   13066:	76 c0       	rjmp	.+236    	; 0x13154 <alloc_device+0x144>
   13068:	8b e2       	ldi	r24, 0x2B	; 43
   1306a:	8c 9f       	mul	r24, r28
   1306c:	80 01       	movw	r16, r0
   1306e:	8d 9f       	mul	r24, r29
   13070:	10 0d       	add	r17, r0
   13072:	11 24       	eor	r1, r1
   13074:	05 50       	subi	r16, 0x05	; 5
   13076:	10 4e       	sbci	r17, 0xE0	; 224
   13078:	81 e0       	ldi	r24, 0x01	; 1
   1307a:	f8 01       	movw	r30, r16
   1307c:	80 83       	st	Z, r24
   1307e:	61 e0       	ldi	r22, 0x01	; 1
   13080:	70 e0       	ldi	r23, 0x00	; 0
   13082:	85 e1       	ldi	r24, 0x15	; 21
   13084:	90 e0       	ldi	r25, 0x00	; 0
   13086:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   1308a:	f8 01       	movw	r30, r16
   1308c:	90 a7       	std	Z+40, r25	; 0x28
   1308e:	87 a3       	std	Z+39, r24	; 0x27
   13090:	61 e0       	ldi	r22, 0x01	; 1
   13092:	70 e0       	ldi	r23, 0x00	; 0
   13094:	88 e1       	ldi	r24, 0x18	; 24
   13096:	90 e0       	ldi	r25, 0x00	; 0
   13098:	57 c0       	rjmp	.+174    	; 0x13148 <alloc_device+0x138>
   1309a:	03 30       	cpi	r16, 0x03	; 3
   1309c:	11 05       	cpc	r17, r1
   1309e:	a1 f1       	breq	.+104    	; 0x13108 <alloc_device+0xf8>
   130a0:	04 30       	cpi	r16, 0x04	; 4
   130a2:	11 05       	cpc	r17, r1
   130a4:	09 f0       	breq	.+2      	; 0x130a8 <alloc_device+0x98>
   130a6:	56 c0       	rjmp	.+172    	; 0x13154 <alloc_device+0x144>
   130a8:	8b e2       	ldi	r24, 0x2B	; 43
   130aa:	8c 9f       	mul	r24, r28
   130ac:	80 01       	movw	r16, r0
   130ae:	8d 9f       	mul	r24, r29
   130b0:	10 0d       	add	r17, r0
   130b2:	11 24       	eor	r1, r1
   130b4:	05 50       	subi	r16, 0x05	; 5
   130b6:	10 4e       	sbci	r17, 0xE0	; 224
   130b8:	84 e0       	ldi	r24, 0x04	; 4
   130ba:	f8 01       	movw	r30, r16
   130bc:	80 83       	st	Z, r24
   130be:	61 e0       	ldi	r22, 0x01	; 1
   130c0:	70 e0       	ldi	r23, 0x00	; 0
   130c2:	8b e0       	ldi	r24, 0x0B	; 11
   130c4:	90 e0       	ldi	r25, 0x00	; 0
   130c6:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   130ca:	f8 01       	movw	r30, r16
   130cc:	90 a7       	std	Z+40, r25	; 0x28
   130ce:	87 a3       	std	Z+39, r24	; 0x27
   130d0:	12 a6       	std	Z+42, r1	; 0x2a
   130d2:	11 a6       	std	Z+41, r1	; 0x29
   130d4:	55 c0       	rjmp	.+170    	; 0x13180 <alloc_device+0x170>
   130d6:	8b e2       	ldi	r24, 0x2B	; 43
   130d8:	8c 9f       	mul	r24, r28
   130da:	80 01       	movw	r16, r0
   130dc:	8d 9f       	mul	r24, r29
   130de:	10 0d       	add	r17, r0
   130e0:	11 24       	eor	r1, r1
   130e2:	05 50       	subi	r16, 0x05	; 5
   130e4:	10 4e       	sbci	r17, 0xE0	; 224
   130e6:	82 e0       	ldi	r24, 0x02	; 2
   130e8:	f8 01       	movw	r30, r16
   130ea:	80 83       	st	Z, r24
   130ec:	61 e0       	ldi	r22, 0x01	; 1
   130ee:	70 e0       	ldi	r23, 0x00	; 0
   130f0:	82 e3       	ldi	r24, 0x32	; 50
   130f2:	90 e0       	ldi	r25, 0x00	; 0
   130f4:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   130f8:	f8 01       	movw	r30, r16
   130fa:	90 a7       	std	Z+40, r25	; 0x28
   130fc:	87 a3       	std	Z+39, r24	; 0x27
   130fe:	61 e0       	ldi	r22, 0x01	; 1
   13100:	70 e0       	ldi	r23, 0x00	; 0
   13102:	86 e1       	ldi	r24, 0x16	; 22
   13104:	90 e0       	ldi	r25, 0x00	; 0
   13106:	20 c0       	rjmp	.+64     	; 0x13148 <alloc_device+0x138>
   13108:	8b e2       	ldi	r24, 0x2B	; 43
   1310a:	8c 9f       	mul	r24, r28
   1310c:	80 01       	movw	r16, r0
   1310e:	8d 9f       	mul	r24, r29
   13110:	10 0d       	add	r17, r0
   13112:	11 24       	eor	r1, r1
   13114:	05 50       	subi	r16, 0x05	; 5
   13116:	10 4e       	sbci	r17, 0xE0	; 224
   13118:	83 e0       	ldi	r24, 0x03	; 3
   1311a:	f8 01       	movw	r30, r16
   1311c:	80 83       	st	Z, r24
   1311e:	61 e0       	ldi	r22, 0x01	; 1
   13120:	70 e0       	ldi	r23, 0x00	; 0
   13122:	82 e3       	ldi	r24, 0x32	; 50
   13124:	90 e0       	ldi	r25, 0x00	; 0
   13126:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   1312a:	f8 01       	movw	r30, r16
   1312c:	90 a7       	std	Z+40, r25	; 0x28
   1312e:	87 a3       	std	Z+39, r24	; 0x27
   13130:	61 e0       	ldi	r22, 0x01	; 1
   13132:	70 e0       	ldi	r23, 0x00	; 0
   13134:	86 e1       	ldi	r24, 0x16	; 22
   13136:	90 e0       	ldi	r25, 0x00	; 0
   13138:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   1313c:	f8 01       	movw	r30, r16
   1313e:	92 a7       	std	Z+42, r25	; 0x2a
   13140:	81 a7       	std	Z+41, r24	; 0x29
   13142:	ce 01       	movw	r24, r28
   13144:	eb de       	rcall	.-554    	; 0x12f1c <SS80_Set_Defaults>
   13146:	1c c0       	rjmp	.+56     	; 0x13180 <alloc_device+0x170>
   13148:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   1314c:	f8 01       	movw	r30, r16
   1314e:	92 a7       	std	Z+42, r25	; 0x2a
   13150:	81 a7       	std	Z+41, r24	; 0x29
   13152:	16 c0       	rjmp	.+44     	; 0x13180 <alloc_device+0x170>
   13154:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13158:	80 ff       	sbrs	r24, 0
   1315a:	10 c0       	rjmp	.+32     	; 0x1317c <alloc_device+0x16c>
   1315c:	c8 01       	movw	r24, r16
   1315e:	b4 dd       	rcall	.-1176   	; 0x12cc8 <type_to_str>
   13160:	ed b7       	in	r30, 0x3d	; 61
   13162:	fe b7       	in	r31, 0x3e	; 62
   13164:	97 83       	std	Z+7, r25	; 0x07
   13166:	86 83       	std	Z+6, r24	; 0x06
   13168:	15 83       	std	Z+5, r17	; 0x05
   1316a:	04 83       	std	Z+4, r16	; 0x04
   1316c:	8a e2       	ldi	r24, 0x2A	; 42
   1316e:	98 e1       	ldi	r25, 0x18	; 24
   13170:	a0 e0       	ldi	r26, 0x00	; 0
   13172:	81 83       	std	Z+1, r24	; 0x01
   13174:	92 83       	std	Z+2, r25	; 0x02
   13176:	a3 83       	std	Z+3, r26	; 0x03
   13178:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1317c:	cf ef       	ldi	r28, 0xFF	; 255
   1317e:	df ef       	ldi	r29, 0xFF	; 255
   13180:	ce 01       	movw	r24, r28
   13182:	cd b7       	in	r28, 0x3d	; 61
   13184:	de b7       	in	r29, 0x3e	; 62
   13186:	27 96       	adiw	r28, 0x07	; 7
   13188:	e4 e0       	ldi	r30, 0x04	; 4
   1318a:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

0001318e <init_Devices>:
   1318e:	cf 93       	push	r28
   13190:	df 93       	push	r29
   13192:	10 92 7e 1a 	sts	0x1A7E, r1	; 0x801a7e <stack_ind+0x1>
   13196:	10 92 7d 1a 	sts	0x1A7D, r1	; 0x801a7d <stack_ind>
   1319a:	eb ef       	ldi	r30, 0xFB	; 251
   1319c:	ff e1       	ldi	r31, 0x1F	; 31
   1319e:	9f ef       	ldi	r25, 0xFF	; 255
   131a0:	80 e2       	ldi	r24, 0x20	; 32
   131a2:	10 82       	st	Z, r1
   131a4:	11 82       	std	Z+1, r1	; 0x01
   131a6:	92 83       	std	Z+2, r25	; 0x02
   131a8:	13 82       	std	Z+3, r1	; 0x03
   131aa:	14 82       	std	Z+4, r1	; 0x04
   131ac:	15 82       	std	Z+5, r1	; 0x05
   131ae:	16 82       	std	Z+6, r1	; 0x06
   131b0:	df 01       	movw	r26, r30
   131b2:	17 96       	adiw	r26, 0x07	; 7
   131b4:	ed 01       	movw	r28, r26
   131b6:	28 2f       	mov	r18, r24
   131b8:	19 92       	st	Y+, r1
   131ba:	2a 95       	dec	r18
   131bc:	e9 f7       	brne	.-6      	; 0x131b8 <init_Devices+0x2a>
   131be:	10 a6       	std	Z+40, r1	; 0x28
   131c0:	17 a2       	std	Z+39, r1	; 0x27
   131c2:	12 a6       	std	Z+42, r1	; 0x2a
   131c4:	11 a6       	std	Z+41, r1	; 0x29
   131c6:	bb 96       	adiw	r30, 0x2b	; 43
   131c8:	c1 e2       	ldi	r28, 0x21	; 33
   131ca:	ef 3f       	cpi	r30, 0xFF	; 255
   131cc:	fc 07       	cpc	r31, r28
   131ce:	49 f7       	brne	.-46     	; 0x131a2 <init_Devices+0x14>
   131d0:	df 91       	pop	r29
   131d2:	cf 91       	pop	r28
   131d4:	08 95       	ret

000131d6 <push_state>:
   131d6:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <stack_ind>
   131da:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <stack_ind+0x1>
   131de:	25 30       	cpi	r18, 0x05	; 5
   131e0:	31 05       	cpc	r19, r1
   131e2:	7c f4       	brge	.+30     	; 0x13202 <push_state+0x2c>
   131e4:	a9 01       	movw	r20, r18
   131e6:	4f 5f       	subi	r20, 0xFF	; 255
   131e8:	5f 4f       	sbci	r21, 0xFF	; 255
   131ea:	50 93 7e 1a 	sts	0x1A7E, r21	; 0x801a7e <stack_ind+0x1>
   131ee:	40 93 7d 1a 	sts	0x1A7D, r20	; 0x801a7d <stack_ind>
   131f2:	22 0f       	add	r18, r18
   131f4:	33 1f       	adc	r19, r19
   131f6:	f9 01       	movw	r30, r18
   131f8:	ed 58       	subi	r30, 0x8D	; 141
   131fa:	f5 4e       	sbci	r31, 0xE5	; 229
   131fc:	80 83       	st	Z, r24
   131fe:	91 83       	std	Z+1, r25	; 0x01
   13200:	08 95       	ret
   13202:	80 e0       	ldi	r24, 0x00	; 0
   13204:	90 e0       	ldi	r25, 0x00	; 0
   13206:	08 95       	ret

00013208 <pop_state>:
   13208:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <stack_ind>
   1320c:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <stack_ind+0x1>
   13210:	18 16       	cp	r1, r24
   13212:	19 06       	cpc	r1, r25
   13214:	6c f4       	brge	.+26     	; 0x13230 <pop_state+0x28>
   13216:	01 97       	sbiw	r24, 0x01	; 1
   13218:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <stack_ind+0x1>
   1321c:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <stack_ind>
   13220:	88 0f       	add	r24, r24
   13222:	99 1f       	adc	r25, r25
   13224:	fc 01       	movw	r30, r24
   13226:	ed 58       	subi	r30, 0x8D	; 141
   13228:	f5 4e       	sbci	r31, 0xE5	; 229
   1322a:	80 81       	ld	r24, Z
   1322c:	91 81       	ldd	r25, Z+1	; 0x01
   1322e:	08 95       	ret
   13230:	80 e0       	ldi	r24, 0x00	; 0
   13232:	90 e0       	ldi	r25, 0x00	; 0
   13234:	08 95       	ret

00013236 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13236:	08 95       	ret

00013238 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13238:	0f 93       	push	r16
   1323a:	1f 93       	push	r17
   1323c:	cf 93       	push	r28
   1323e:	df 93       	push	r29
   13240:	00 d0       	rcall	.+0      	; 0x13242 <hpdir_set_device+0xa>
   13242:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13244:	2b e2       	ldi	r18, 0x2B	; 43
   13246:	ac 01       	movw	r20, r24
   13248:	24 9f       	mul	r18, r20
   1324a:	c0 01       	movw	r24, r0
   1324c:	25 9f       	mul	r18, r21
   1324e:	90 0d       	add	r25, r0
   13250:	11 24       	eor	r1, r1
   13252:	ec 01       	movw	r28, r24
   13254:	c5 50       	subi	r28, 0x05	; 5
   13256:	d0 4e       	sbci	r29, 0xE0	; 224
   13258:	28 81       	ld	r18, Y
   1325a:	23 30       	cpi	r18, 0x03	; 3
   1325c:	a1 f5       	brne	.+104    	; 0x132c6 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   1325e:	ef a1       	ldd	r30, Y+39	; 0x27
   13260:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   13262:	20 91 7f 22 	lds	r18, 0x227F	; 0x80227f <hpdir+0x80>
   13266:	30 91 80 22 	lds	r19, 0x2280	; 0x802280 <hpdir+0x81>
   1326a:	35 83       	std	Z+5, r19	; 0x05
   1326c:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   1326e:	40 91 8b 22 	lds	r20, 0x228B	; 0x80228b <hpdir+0x8c>
   13272:	50 91 8c 22 	lds	r21, 0x228C	; 0x80228c <hpdir+0x8d>
   13276:	60 91 8d 22 	lds	r22, 0x228D	; 0x80228d <hpdir+0x8e>
   1327a:	70 91 8e 22 	lds	r23, 0x228E	; 0x80228e <hpdir+0x8f>
   1327e:	44 87       	std	Z+12, r20	; 0x0c
   13280:	55 87       	std	Z+13, r21	; 0x0d
   13282:	66 87       	std	Z+14, r22	; 0x0e
   13284:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   13286:	20 91 9f 22 	lds	r18, 0x229F	; 0x80229f <hpdir+0xa0>
   1328a:	30 91 a0 22 	lds	r19, 0x22A0	; 0x8022a0 <hpdir+0xa1>
   1328e:	31 8b       	std	Z+17, r19	; 0x11
   13290:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   13292:	17 8e       	std	Z+31, r1	; 0x1f
   13294:	10 a2       	std	Z+32, r1	; 0x20
   13296:	11 a2       	std	Z+33, r1	; 0x21
   13298:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   1329a:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   1329c:	15 a2       	std	Z+37, r1	; 0x25
   1329e:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   132a0:	40 91 ab 22 	lds	r20, 0x22AB	; 0x8022ab <hpdir+0xac>
   132a4:	50 91 ac 22 	lds	r21, 0x22AC	; 0x8022ac <hpdir+0xad>
   132a8:	60 91 ad 22 	lds	r22, 0x22AD	; 0x8022ad <hpdir+0xae>
   132ac:	70 91 ae 22 	lds	r23, 0x22AE	; 0x8022ae <hpdir+0xaf>
   132b0:	8a 01       	movw	r16, r20
   132b2:	9b 01       	movw	r18, r22
   132b4:	01 50       	subi	r16, 0x01	; 1
   132b6:	11 09       	sbc	r17, r1
   132b8:	21 09       	sbc	r18, r1
   132ba:	31 09       	sbc	r19, r1
   132bc:	06 a3       	std	Z+38, r16	; 0x26
   132be:	17 a3       	std	Z+39, r17	; 0x27
   132c0:	20 a7       	std	Z+40, r18	; 0x28
   132c2:	31 a7       	std	Z+41, r19	; 0x29
   132c4:	2a c0       	rjmp	.+84     	; 0x1331a <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   132c6:	21 30       	cpi	r18, 0x01	; 1
   132c8:	a9 f5       	brne	.+106    	; 0x13334 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   132ca:	ef a1       	ldd	r30, Y+39	; 0x27
   132cc:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   132ce:	20 91 7f 22 	lds	r18, 0x227F	; 0x80227f <hpdir+0x80>
   132d2:	30 91 80 22 	lds	r19, 0x2280	; 0x802280 <hpdir+0x81>
   132d6:	35 83       	std	Z+5, r19	; 0x05
   132d8:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   132da:	20 91 9f 22 	lds	r18, 0x229F	; 0x80229f <hpdir+0xa0>
   132de:	30 91 a0 22 	lds	r19, 0x22A0	; 0x8022a0 <hpdir+0xa1>
   132e2:	37 83       	std	Z+7, r19	; 0x07
   132e4:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   132e6:	20 91 9b 22 	lds	r18, 0x229B	; 0x80229b <hpdir+0x9c>
   132ea:	30 91 9c 22 	lds	r19, 0x229C	; 0x80229c <hpdir+0x9d>
   132ee:	31 87       	std	Z+9, r19	; 0x09
   132f0:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   132f2:	20 91 97 22 	lds	r18, 0x2297	; 0x802297 <hpdir+0x98>
   132f6:	30 91 98 22 	lds	r19, 0x2298	; 0x802298 <hpdir+0x99>
   132fa:	33 87       	std	Z+11, r19	; 0x0b
   132fc:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   132fe:	20 91 93 22 	lds	r18, 0x2293	; 0x802293 <hpdir+0x94>
   13302:	30 91 94 22 	lds	r19, 0x2294	; 0x802294 <hpdir+0x95>
   13306:	35 87       	std	Z+13, r19	; 0x0d
   13308:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   1330a:	40 91 ab 22 	lds	r20, 0x22AB	; 0x8022ab <hpdir+0xac>
   1330e:	50 91 ac 22 	lds	r21, 0x22AC	; 0x8022ac <hpdir+0xad>
   13312:	60 91 ad 22 	lds	r22, 0x22AD	; 0x8022ad <hpdir+0xae>
   13316:	70 91 ae 22 	lds	r23, 0x22AE	; 0x8022ae <hpdir+0xaf>
   1331a:	4b 83       	std	Y+3, r20	; 0x03
   1331c:	5c 83       	std	Y+4, r21	; 0x04
   1331e:	6d 83       	std	Y+5, r22	; 0x05
   13320:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   13322:	4e e1       	ldi	r20, 0x1E	; 30
   13324:	50 e0       	ldi	r21, 0x00	; 0
   13326:	6f ef       	ldi	r22, 0xFF	; 255
   13328:	71 e2       	ldi	r23, 0x21	; 33
   1332a:	8e 5f       	subi	r24, 0xFE	; 254
   1332c:	9f 4d       	sbci	r25, 0xDF	; 223
   1332e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <strncpy>
   13332:	0a c0       	rjmp	.+20     	; 0x13348 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13334:	8b e0       	ldi	r24, 0x0B	; 11
   13336:	98 e1       	ldi	r25, 0x18	; 24
   13338:	a0 e0       	ldi	r26, 0x00	; 0
   1333a:	ed b7       	in	r30, 0x3d	; 61
   1333c:	fe b7       	in	r31, 0x3e	; 62
   1333e:	81 83       	std	Z+1, r24	; 0x01
   13340:	92 83       	std	Z+2, r25	; 0x02
   13342:	a3 83       	std	Z+3, r26	; 0x03
   13344:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

}
   13348:	cd b7       	in	r28, 0x3d	; 61
   1334a:	de b7       	in	r29, 0x3e	; 62
   1334c:	23 96       	adiw	r28, 0x03	; 3
   1334e:	e4 e0       	ldi	r30, 0x04	; 4
   13350:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00013354 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13354:	cf 93       	push	r28
   13356:	df 93       	push	r29
   13358:	ec 01       	movw	r28, r24
   1335a:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   1335c:	41 e0       	ldi	r20, 0x01	; 1
   1335e:	50 e0       	ldi	r21, 0x00	; 0
   13360:	60 e0       	ldi	r22, 0x00	; 0
   13362:	70 e0       	ldi	r23, 0x00	; 0
   13364:	ad d7       	rcall	.+3930   	; 0x142c0 <hpdir_find_drive>
   13366:	89 2b       	or	r24, r25
   13368:	11 f0       	breq	.+4      	; 0x1336e <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   1336a:	ce 01       	movw	r24, r28
   1336c:	65 df       	rcall	.-310    	; 0x13238 <hpdir_set_device>
}
   1336e:	df 91       	pop	r29
   13370:	cf 91       	pop	r28
   13372:	08 95       	ret

00013374 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   13374:	4f 92       	push	r4
   13376:	5f 92       	push	r5
   13378:	6f 92       	push	r6
   1337a:	7f 92       	push	r7
   1337c:	8f 92       	push	r8
   1337e:	af 92       	push	r10
   13380:	bf 92       	push	r11
   13382:	cf 92       	push	r12
   13384:	df 92       	push	r13
   13386:	ef 92       	push	r14
   13388:	0f 93       	push	r16
   1338a:	1f 93       	push	r17
   1338c:	cf 93       	push	r28
   1338e:	df 93       	push	r29
   13390:	00 d0       	rcall	.+0      	; 0x13392 <Post_Config+0x1e>
   13392:	00 d0       	rcall	.+0      	; 0x13394 <Post_Config+0x20>
   13394:	1f 92       	push	r1
   13396:	cb ef       	ldi	r28, 0xFB	; 251
   13398:	df e1       	ldi	r29, 0x1F	; 31
   1339a:	8f ef       	ldi	r24, 0xFF	; 255
   1339c:	48 2e       	mov	r4, r24
   1339e:	81 e2       	ldi	r24, 0x21	; 33
   133a0:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   133a2:	a1 2c       	mov	r10, r1
   133a4:	bb 24       	eor	r11, r11
   133a6:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   133a8:	8e e9       	ldi	r24, 0x9E	; 158
   133aa:	97 e1       	ldi	r25, 0x17	; 23
   133ac:	6c 01       	movw	r12, r24
   133ae:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   133b0:	85 ed       	ldi	r24, 0xD5	; 213
   133b2:	97 e1       	ldi	r25, 0x17	; 23
   133b4:	3c 01       	movw	r6, r24
   133b6:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   133b8:	88 81       	ld	r24, Y
   133ba:	88 23       	and	r24, r24
   133bc:	09 f4       	brne	.+2      	; 0x133c0 <Post_Config+0x4c>
   133be:	57 c0       	rjmp	.+174    	; 0x1346e <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   133c0:	83 30       	cpi	r24, 0x03	; 3
   133c2:	f9 f4       	brne	.+62     	; 0x13402 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   133c4:	0f a1       	ldd	r16, Y+39	; 0x27
   133c6:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   133c8:	f8 01       	movw	r30, r16
   133ca:	80 89       	ldd	r24, Z+16	; 0x10
   133cc:	91 89       	ldd	r25, Z+17	; 0x11
   133ce:	81 15       	cp	r24, r1
   133d0:	91 40       	sbci	r25, 0x01	; 1
   133d2:	59 f0       	breq	.+22     	; 0x133ea <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   133d4:	ce 01       	movw	r24, r28
   133d6:	07 96       	adiw	r24, 0x07	; 7
   133d8:	ed b7       	in	r30, 0x3d	; 61
   133da:	fe b7       	in	r31, 0x3e	; 62
   133dc:	95 83       	std	Z+5, r25	; 0x05
   133de:	84 83       	std	Z+4, r24	; 0x04
   133e0:	61 82       	std	Z+1, r6	; 0x01
   133e2:	72 82       	std	Z+2, r7	; 0x02
   133e4:	83 82       	std	Z+3, r8	; 0x03
   133e6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   133ea:	f8 01       	movw	r30, r16
   133ec:	86 a1       	ldd	r24, Z+38	; 0x26
   133ee:	97 a1       	ldd	r25, Z+39	; 0x27
   133f0:	a0 a5       	ldd	r26, Z+40	; 0x28
   133f2:	b1 a5       	ldd	r27, Z+41	; 0x29
   133f4:	01 96       	adiw	r24, 0x01	; 1
   133f6:	a1 1d       	adc	r26, r1
   133f8:	b1 1d       	adc	r27, r1
   133fa:	8b 83       	std	Y+3, r24	; 0x03
   133fc:	9c 83       	std	Y+4, r25	; 0x04
   133fe:	ad 83       	std	Y+5, r26	; 0x05
   13400:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13402:	88 81       	ld	r24, Y
   13404:	81 30       	cpi	r24, 0x01	; 1
   13406:	99 f5       	brne	.+102    	; 0x1346e <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   13408:	0f a1       	ldd	r16, Y+39	; 0x27
   1340a:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1340c:	f8 01       	movw	r30, r16
   1340e:	86 81       	ldd	r24, Z+6	; 0x06
   13410:	97 81       	ldd	r25, Z+7	; 0x07
   13412:	81 15       	cp	r24, r1
   13414:	91 40       	sbci	r25, 0x01	; 1
   13416:	71 f0       	breq	.+28     	; 0x13434 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13418:	f8 01       	movw	r30, r16
   1341a:	b7 82       	std	Z+7, r11	; 0x07
   1341c:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   1341e:	ce 01       	movw	r24, r28
   13420:	07 96       	adiw	r24, 0x07	; 7
   13422:	ed b7       	in	r30, 0x3d	; 61
   13424:	fe b7       	in	r31, 0x3e	; 62
   13426:	95 83       	std	Z+5, r25	; 0x05
   13428:	84 83       	std	Z+4, r24	; 0x04
   1342a:	c1 82       	std	Z+1, r12	; 0x01
   1342c:	d2 82       	std	Z+2, r13	; 0x02
   1342e:	e3 82       	std	Z+3, r14	; 0x03
   13430:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13434:	f8 01       	movw	r30, r16
   13436:	20 85       	ldd	r18, Z+8	; 0x08
   13438:	31 85       	ldd	r19, Z+9	; 0x09
   1343a:	82 85       	ldd	r24, Z+10	; 0x0a
   1343c:	93 85       	ldd	r25, Z+11	; 0x0b
   1343e:	28 9f       	mul	r18, r24
   13440:	a0 01       	movw	r20, r0
   13442:	29 9f       	mul	r18, r25
   13444:	50 0d       	add	r21, r0
   13446:	38 9f       	mul	r19, r24
   13448:	50 0d       	add	r21, r0
   1344a:	11 24       	eor	r1, r1
   1344c:	24 85       	ldd	r18, Z+12	; 0x0c
   1344e:	35 85       	ldd	r19, Z+13	; 0x0d
   13450:	42 9f       	mul	r20, r18
   13452:	c0 01       	movw	r24, r0
   13454:	43 9f       	mul	r20, r19
   13456:	90 0d       	add	r25, r0
   13458:	52 9f       	mul	r21, r18
   1345a:	90 0d       	add	r25, r0
   1345c:	11 24       	eor	r1, r1
   1345e:	09 2e       	mov	r0, r25
   13460:	00 0c       	add	r0, r0
   13462:	aa 0b       	sbc	r26, r26
   13464:	bb 0b       	sbc	r27, r27
   13466:	8b 83       	std	Y+3, r24	; 0x03
   13468:	9c 83       	std	Y+4, r25	; 0x04
   1346a:	ad 83       	std	Y+5, r26	; 0x05
   1346c:	be 83       	std	Y+6, r27	; 0x06
   1346e:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13470:	4c 16       	cp	r4, r28
   13472:	5d 06       	cpc	r5, r29
   13474:	09 f0       	breq	.+2      	; 0x13478 <Post_Config+0x104>
   13476:	a0 cf       	rjmp	.-192    	; 0x133b8 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13478:	0f 90       	pop	r0
   1347a:	0f 90       	pop	r0
   1347c:	0f 90       	pop	r0
   1347e:	0f 90       	pop	r0
   13480:	0f 90       	pop	r0
   13482:	df 91       	pop	r29
   13484:	cf 91       	pop	r28
   13486:	1f 91       	pop	r17
   13488:	0f 91       	pop	r16
   1348a:	ef 90       	pop	r14
   1348c:	df 90       	pop	r13
   1348e:	cf 90       	pop	r12
   13490:	bf 90       	pop	r11
   13492:	af 90       	pop	r10
   13494:	8f 90       	pop	r8
   13496:	7f 90       	pop	r7
   13498:	6f 90       	pop	r6
   1349a:	5f 90       	pop	r5
   1349c:	4f 90       	pop	r4
   1349e:	08 95       	ret

000134a0 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   134a0:	af e1       	ldi	r26, 0x1F	; 31
   134a2:	b1 e0       	ldi	r27, 0x01	; 1
   134a4:	e6 e5       	ldi	r30, 0x56	; 86
   134a6:	fa e9       	ldi	r31, 0x9A	; 154
   134a8:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   134ac:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   134ae:	6f de       	rcall	.-802    	; 0x1318e <init_Devices>

    printf("Reading: %s\n", name);
   134b0:	ed b7       	in	r30, 0x3d	; 61
   134b2:	fe b7       	in	r31, 0x3e	; 62
   134b4:	15 83       	std	Z+5, r17	; 0x05
   134b6:	04 83       	std	Z+4, r16	; 0x04
   134b8:	81 e8       	ldi	r24, 0x81	; 129
   134ba:	9d e1       	ldi	r25, 0x1D	; 29
   134bc:	a0 e0       	ldi	r26, 0x00	; 0
   134be:	81 83       	std	Z+1, r24	; 0x01
   134c0:	92 83       	std	Z+2, r25	; 0x02
   134c2:	a3 83       	std	Z+3, r26	; 0x03
   134c4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    cfg = fopen(name, "rb");
   134c8:	6e ef       	ldi	r22, 0xFE	; 254
   134ca:	78 e0       	ldi	r23, 0x08	; 8
   134cc:	c8 01       	movw	r24, r16
   134ce:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   134d2:	c4 5f       	subi	r28, 0xF4	; 244
   134d4:	de 4f       	sbci	r29, 0xFE	; 254
   134d6:	99 83       	std	Y+1, r25	; 0x01
   134d8:	88 83       	st	Y, r24
   134da:	cc 50       	subi	r28, 0x0C	; 12
   134dc:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   134de:	89 2b       	or	r24, r25
   134e0:	09 f4       	brne	.+2      	; 0x134e4 <Read_Config+0x44>
   134e2:	59 c0       	rjmp	.+178    	; 0x13596 <Read_Config+0xf6>
   134e4:	41 2c       	mov	r4, r1
   134e6:	51 2c       	mov	r5, r1
   134e8:	c1 2c       	mov	r12, r1
   134ea:	d1 2c       	mov	r13, r1
   134ec:	c8 5f       	subi	r28, 0xF8	; 248
   134ee:	de 4f       	sbci	r29, 0xFE	; 254
   134f0:	19 82       	std	Y+1, r1	; 0x01
   134f2:	18 82       	st	Y, r1
   134f4:	c8 50       	subi	r28, 0x08	; 8
   134f6:	d1 40       	sbci	r29, 0x01	; 1
   134f8:	61 2c       	mov	r6, r1
   134fa:	71 2c       	mov	r7, r1
   134fc:	c6 5f       	subi	r28, 0xF6	; 246
   134fe:	de 4f       	sbci	r29, 0xFE	; 254
   13500:	19 82       	std	Y+1, r1	; 0x01
   13502:	18 82       	st	Y, r1
   13504:	ca 50       	subi	r28, 0x0A	; 10
   13506:	d1 40       	sbci	r29, 0x01	; 1
   13508:	e1 2c       	mov	r14, r1
   1350a:	f1 2c       	mov	r15, r1
   1350c:	21 2c       	mov	r2, r1
   1350e:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13510:	80 ed       	ldi	r24, 0xD0	; 208
   13512:	9a e1       	ldi	r25, 0x1A	; 26
   13514:	9c 01       	movw	r18, r24
   13516:	40 e0       	ldi	r20, 0x00	; 0
   13518:	c2 5f       	subi	r28, 0xF2	; 242
   1351a:	de 4f       	sbci	r29, 0xFE	; 254
   1351c:	28 83       	st	Y, r18
   1351e:	39 83       	std	Y+1, r19	; 0x01
   13520:	4a 83       	std	Y+2, r20	; 0x02
   13522:	ce 50       	subi	r28, 0x0E	; 14
   13524:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13526:	82 ef       	ldi	r24, 0xF2	; 242
   13528:	9a e1       	ldi	r25, 0x1A	; 26
   1352a:	9c 01       	movw	r18, r24
   1352c:	40 e0       	ldi	r20, 0x00	; 0
   1352e:	cf 5e       	subi	r28, 0xEF	; 239
   13530:	de 4f       	sbci	r29, 0xFE	; 254
   13532:	28 83       	st	Y, r18
   13534:	39 83       	std	Y+1, r19	; 0x01
   13536:	4a 83       	std	Y+2, r20	; 0x02
   13538:	c1 51       	subi	r28, 0x11	; 17
   1353a:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1353c:	82 e2       	ldi	r24, 0x22	; 34
   1353e:	9b e1       	ldi	r25, 0x1B	; 27
   13540:	9c 01       	movw	r18, r24
   13542:	40 e0       	ldi	r20, 0x00	; 0
   13544:	cc 5e       	subi	r28, 0xEC	; 236
   13546:	de 4f       	sbci	r29, 0xFE	; 254
   13548:	28 83       	st	Y, r18
   1354a:	39 83       	std	Y+1, r19	; 0x01
   1354c:	4a 83       	std	Y+2, r20	; 0x02
   1354e:	c4 51       	subi	r28, 0x14	; 20
   13550:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13552:	81 e5       	ldi	r24, 0x51	; 81
   13554:	9b e1       	ldi	r25, 0x1B	; 27
   13556:	9c 01       	movw	r18, r24
   13558:	40 e0       	ldi	r20, 0x00	; 0
   1355a:	c9 5e       	subi	r28, 0xE9	; 233
   1355c:	de 4f       	sbci	r29, 0xFE	; 254
   1355e:	28 83       	st	Y, r18
   13560:	39 83       	std	Y+1, r19	; 0x01
   13562:	4a 83       	std	Y+2, r20	; 0x02
   13564:	c7 51       	subi	r28, 0x17	; 23
   13566:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13568:	81 e8       	ldi	r24, 0x81	; 129
   1356a:	9b e1       	ldi	r25, 0x1B	; 27
   1356c:	9c 01       	movw	r18, r24
   1356e:	40 e0       	ldi	r20, 0x00	; 0
   13570:	c6 5e       	subi	r28, 0xE6	; 230
   13572:	de 4f       	sbci	r29, 0xFE	; 254
   13574:	28 83       	st	Y, r18
   13576:	39 83       	std	Y+1, r19	; 0x01
   13578:	4a 83       	std	Y+2, r20	; 0x02
   1357a:	ca 51       	subi	r28, 0x1A	; 26
   1357c:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1357e:	8f ea       	ldi	r24, 0xAF	; 175
   13580:	9b e1       	ldi	r25, 0x1B	; 27
   13582:	9c 01       	movw	r18, r24
   13584:	40 e0       	ldi	r20, 0x00	; 0
   13586:	c3 5e       	subi	r28, 0xE3	; 227
   13588:	de 4f       	sbci	r29, 0xFE	; 254
   1358a:	28 83       	st	Y, r18
   1358c:	39 83       	std	Y+1, r19	; 0x01
   1358e:	4a 83       	std	Y+2, r20	; 0x02
   13590:	cd 51       	subi	r28, 0x1D	; 29
   13592:	d1 40       	sbci	r29, 0x01	; 1
   13594:	26 c0       	rjmp	.+76     	; 0x135e2 <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13596:	8d e5       	ldi	r24, 0x5D	; 93
   13598:	9e e0       	ldi	r25, 0x0E	; 14
   1359a:	0e 94 81 77 	call	0xef02	; 0xef02 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   1359e:	ed b7       	in	r30, 0x3d	; 61
   135a0:	fe b7       	in	r31, 0x3e	; 62
   135a2:	15 83       	std	Z+5, r17	; 0x05
   135a4:	04 83       	std	Z+4, r16	; 0x04
   135a6:	83 e6       	ldi	r24, 0x63	; 99
   135a8:	9d e1       	ldi	r25, 0x1D	; 29
   135aa:	a0 e0       	ldi	r26, 0x00	; 0
   135ac:	81 83       	std	Z+1, r24	; 0x01
   135ae:	92 83       	std	Z+2, r25	; 0x02
   135b0:	a3 83       	std	Z+3, r26	; 0x03
   135b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        set_Config_Defaults();
        return(errors);
   135b6:	81 e0       	ldi	r24, 0x01	; 1
   135b8:	90 e0       	ldi	r25, 0x00	; 0
   135ba:	95 c3       	rjmp	.+1834   	; 0x13ce6 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   135bc:	ff ef       	ldi	r31, 0xFF	; 255
   135be:	4f 1a       	sub	r4, r31
   135c0:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   135c2:	4e e7       	ldi	r20, 0x7E	; 126
   135c4:	50 e0       	ldi	r21, 0x00	; 0
   135c6:	9e 01       	movw	r18, r28
   135c8:	28 5f       	subi	r18, 0xF8	; 248
   135ca:	3f 4f       	sbci	r19, 0xFF	; 255
   135cc:	49 01       	movw	r8, r18
   135ce:	b9 01       	movw	r22, r18
   135d0:	ce 01       	movw	r24, r28
   135d2:	88 57       	subi	r24, 0x78	; 120
   135d4:	9f 4f       	sbci	r25, 0xFF	; 255
   135d6:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   135da:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   135dc:	88 85       	ldd	r24, Y+8	; 0x08
   135de:	81 11       	cpse	r24, r1
   135e0:	10 c0       	rjmp	.+32     	; 0x13602 <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   135e2:	c4 5f       	subi	r28, 0xF4	; 244
   135e4:	de 4f       	sbci	r29, 0xFE	; 254
   135e6:	48 81       	ld	r20, Y
   135e8:	59 81       	ldd	r21, Y+1	; 0x01
   135ea:	cc 50       	subi	r28, 0x0C	; 12
   135ec:	d1 40       	sbci	r29, 0x01	; 1
   135ee:	6e e7       	ldi	r22, 0x7E	; 126
   135f0:	70 e0       	ldi	r23, 0x00	; 0
   135f2:	ce 01       	movw	r24, r28
   135f4:	88 57       	subi	r24, 0x78	; 120
   135f6:	9f 4f       	sbci	r25, 0xFF	; 255
   135f8:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
   135fc:	89 2b       	or	r24, r25
   135fe:	f1 f6       	brne	.-68     	; 0x135bc <Read_Config+0x11c>
   13600:	32 c3       	rjmp	.+1636   	; 0x13c66 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13602:	83 32       	cpi	r24, 0x23	; 35
   13604:	71 f3       	breq	.-36     	; 0x135e2 <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13606:	c4 01       	movw	r24, r8
   13608:	0e 94 04 92 	call	0x12408	; 0x12408 <tok_index>
   1360c:	8f 3f       	cpi	r24, 0xFF	; 255
   1360e:	3f ef       	ldi	r19, 0xFF	; 255
   13610:	93 07       	cpc	r25, r19
   13612:	49 f4       	brne	.+18     	; 0x13626 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13614:	ed b7       	in	r30, 0x3d	; 61
   13616:	fe b7       	in	r31, 0x3e	; 62
   13618:	57 82       	std	Z+7, r5	; 0x07
   1361a:	46 82       	std	Z+6, r4	; 0x06
   1361c:	95 82       	std	Z+5, r9	; 0x05
   1361e:	84 82       	std	Z+4, r8	; 0x04
   13620:	81 e4       	ldi	r24, 0x41	; 65
   13622:	9d e1       	ldi	r25, 0x1D	; 29
   13624:	c9 c0       	rjmp	.+402    	; 0x137b8 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13626:	88 0f       	add	r24, r24
   13628:	99 1f       	adc	r25, r25
   1362a:	88 0f       	add	r24, r24
   1362c:	99 1f       	adc	r25, r25
   1362e:	fc 01       	movw	r30, r24
   13630:	ec 53       	subi	r30, 0x3C	; 60
   13632:	fe 4f       	sbci	r31, 0xFE	; 254
   13634:	02 81       	ldd	r16, Z+2	; 0x02
   13636:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13638:	4e e7       	ldi	r20, 0x7E	; 126
   1363a:	50 e0       	ldi	r21, 0x00	; 0
   1363c:	b4 01       	movw	r22, r8
   1363e:	c5 01       	movw	r24, r10
   13640:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   13644:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13646:	60 e7       	ldi	r22, 0x70	; 112
   13648:	7e e0       	ldi	r23, 0x0E	; 14
   1364a:	c4 01       	movw	r24, r8
   1364c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   13650:	89 2b       	or	r24, r25
   13652:	39 f0       	breq	.+14     	; 0x13662 <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13654:	4e e7       	ldi	r20, 0x7E	; 126
   13656:	50 e0       	ldi	r21, 0x00	; 0
   13658:	b4 01       	movw	r22, r8
   1365a:	c5 01       	movw	r24, r10
   1365c:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   13660:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13662:	c4 01       	movw	r24, r8
   13664:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13668:	01 31       	cpi	r16, 0x11	; 17
   1366a:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   1366c:	19 f4       	brne	.+6      	; 0x13674 <Read_Config+0x1d4>
   1366e:	cc dd       	rcall	.-1128   	; 0x13208 <pop_state>
   13670:	1c 01       	movw	r2, r24
            continue;
   13672:	b7 cf       	rjmp	.-146    	; 0x135e2 <Read_Config+0x142>
        }

        switch(state)
   13674:	30 e1       	ldi	r19, 0x10	; 16
   13676:	23 16       	cp	r2, r19
   13678:	31 04       	cpc	r3, r1
   1367a:	08 f0       	brcs	.+2      	; 0x1367e <Read_Config+0x1de>
   1367c:	de c2       	rjmp	.+1468   	; 0x13c3a <Read_Config+0x79a>
   1367e:	f1 01       	movw	r30, r2
   13680:	ea 53       	subi	r30, 0x3A	; 58
   13682:	ff 4f       	sbci	r31, 0xFF	; 255
   13684:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13688:	0e 30       	cpi	r16, 0x0E	; 14
   1368a:	11 05       	cpc	r17, r1
   1368c:	09 f4       	brne	.+2      	; 0x13690 <Read_Config+0x1f0>
   1368e:	87 c0       	rjmp	.+270    	; 0x1379e <Read_Config+0x2fe>
   13690:	44 f4       	brge	.+16     	; 0x136a2 <Read_Config+0x202>
   13692:	02 30       	cpi	r16, 0x02	; 2
   13694:	11 05       	cpc	r17, r1
   13696:	09 f4       	brne	.+2      	; 0x1369a <Read_Config+0x1fa>
   13698:	41 c0       	rjmp	.+130    	; 0x1371c <Read_Config+0x27c>
   1369a:	0c 30       	cpi	r16, 0x0C	; 12
   1369c:	11 05       	cpc	r17, r1
   1369e:	09 f1       	breq	.+66     	; 0x136e2 <Read_Config+0x242>
   136a0:	83 c0       	rjmp	.+262    	; 0x137a8 <Read_Config+0x308>
   136a2:	03 32       	cpi	r16, 0x23	; 35
   136a4:	11 05       	cpc	r17, r1
   136a6:	e9 f0       	breq	.+58     	; 0x136e2 <Read_Config+0x242>
   136a8:	04 32       	cpi	r16, 0x24	; 36
   136aa:	11 05       	cpc	r17, r1
   136ac:	29 f0       	breq	.+10     	; 0x136b8 <Read_Config+0x218>
   136ae:	00 32       	cpi	r16, 0x20	; 32
   136b0:	11 05       	cpc	r17, r1
   136b2:	09 f0       	breq	.+2      	; 0x136b6 <Read_Config+0x216>
   136b4:	79 c0       	rjmp	.+242    	; 0x137a8 <Read_Config+0x308>
   136b6:	55 c0       	rjmp	.+170    	; 0x13762 <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   136b8:	80 e0       	ldi	r24, 0x00	; 0
   136ba:	90 e0       	ldi	r25, 0x00	; 0
   136bc:	8c dd       	rcall	.-1256   	; 0x131d6 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   136be:	82 e0       	ldi	r24, 0x02	; 2
   136c0:	90 e0       	ldi	r25, 0x00	; 0
   136c2:	a6 dc       	rcall	.-1716   	; 0x13010 <alloc_device>
   136c4:	6c 01       	movw	r12, r24
   136c6:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   136c8:	09 f4       	brne	.+2      	; 0x136cc <Read_Config+0x22c>
   136ca:	8b cf       	rjmp	.-234    	; 0x135e2 <Read_Config+0x142>
   136cc:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   136ce:	8c 9d       	mul	r24, r12
   136d0:	f0 01       	movw	r30, r0
   136d2:	8d 9d       	mul	r24, r13
   136d4:	f0 0d       	add	r31, r0
   136d6:	11 24       	eor	r1, r1
   136d8:	e5 50       	subi	r30, 0x05	; 5
   136da:	f0 4e       	sbci	r31, 0xE0	; 224
   136dc:	67 a0       	ldd	r6, Z+39	; 0x27
   136de:	70 a4       	ldd	r7, Z+40	; 0x28
   136e0:	19 c0       	rjmp	.+50     	; 0x13714 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   136e2:	80 e0       	ldi	r24, 0x00	; 0
   136e4:	90 e0       	ldi	r25, 0x00	; 0
   136e6:	77 dd       	rcall	.-1298   	; 0x131d6 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   136e8:	83 e0       	ldi	r24, 0x03	; 3
   136ea:	90 e0       	ldi	r25, 0x00	; 0
   136ec:	91 dc       	rcall	.-1758   	; 0x13010 <alloc_device>
   136ee:	6c 01       	movw	r12, r24
   136f0:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   136f2:	c8 16       	cp	r12, r24
   136f4:	d8 06       	cpc	r13, r24
   136f6:	09 f4       	brne	.+2      	; 0x136fa <Read_Config+0x25a>
   136f8:	74 cf       	rjmp	.-280    	; 0x135e2 <Read_Config+0x142>
   136fa:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   136fc:	8c 9d       	mul	r24, r12
   136fe:	f0 01       	movw	r30, r0
   13700:	8d 9d       	mul	r24, r13
   13702:	f0 0d       	add	r31, r0
   13704:	11 24       	eor	r1, r1
   13706:	e5 50       	subi	r30, 0x05	; 5
   13708:	f0 4e       	sbci	r31, 0xE0	; 224
   1370a:	67 a0       	ldd	r6, Z+39	; 0x27
   1370c:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   1370e:	b4 01       	movw	r22, r8
   13710:	c6 01       	movw	r24, r12
   13712:	20 de       	rcall	.-960    	; 0x13354 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13714:	22 24       	eor	r2, r2
   13716:	23 94       	inc	r2
   13718:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1371a:	63 cf       	rjmp	.-314    	; 0x135e2 <Read_Config+0x142>
   1371c:	80 e0       	ldi	r24, 0x00	; 0
   1371e:	90 e0       	ldi	r25, 0x00	; 0
   13720:	5a dd       	rcall	.-1356   	; 0x131d6 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13722:	81 e0       	ldi	r24, 0x01	; 1
   13724:	90 e0       	ldi	r25, 0x00	; 0
   13726:	74 dc       	rcall	.-1816   	; 0x13010 <alloc_device>
   13728:	6c 01       	movw	r12, r24
   1372a:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   1372c:	c9 16       	cp	r12, r25
   1372e:	d9 06       	cpc	r13, r25
   13730:	09 f4       	brne	.+2      	; 0x13734 <Read_Config+0x294>
   13732:	57 cf       	rjmp	.-338    	; 0x135e2 <Read_Config+0x142>
   13734:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13736:	8c 9d       	mul	r24, r12
   13738:	f0 01       	movw	r30, r0
   1373a:	8d 9d       	mul	r24, r13
   1373c:	f0 0d       	add	r31, r0
   1373e:	11 24       	eor	r1, r1
   13740:	e5 50       	subi	r30, 0x05	; 5
   13742:	f0 4e       	sbci	r31, 0xE0	; 224
   13744:	a7 a1       	ldd	r26, Z+39	; 0x27
   13746:	b0 a5       	ldd	r27, Z+40	; 0x28
   13748:	c8 5f       	subi	r28, 0xF8	; 248
   1374a:	de 4f       	sbci	r29, 0xFE	; 254
   1374c:	b9 83       	std	Y+1, r27	; 0x01
   1374e:	a8 83       	st	Y, r26
   13750:	c8 50       	subi	r28, 0x08	; 8
   13752:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13754:	b4 01       	movw	r22, r8
   13756:	c6 01       	movw	r24, r12
   13758:	fd dd       	rcall	.-1030   	; 0x13354 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   1375a:	aa e0       	ldi	r26, 0x0A	; 10
   1375c:	2a 2e       	mov	r2, r26
   1375e:	31 2c       	mov	r3, r1
   13760:	40 cf       	rjmp	.-384    	; 0x135e2 <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13762:	80 e0       	ldi	r24, 0x00	; 0
   13764:	90 e0       	ldi	r25, 0x00	; 0
   13766:	37 dd       	rcall	.-1426   	; 0x131d6 <push_state>
   13768:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   1376a:	90 e0       	ldi	r25, 0x00	; 0
   1376c:	51 dc       	rcall	.-1886   	; 0x13010 <alloc_device>
   1376e:	6c 01       	movw	r12, r24
   13770:	01 96       	adiw	r24, 0x01	; 1
   13772:	09 f4       	brne	.+2      	; 0x13776 <Read_Config+0x2d6>
                        if(index == -1)
   13774:	36 cf       	rjmp	.-404    	; 0x135e2 <Read_Config+0x142>
   13776:	8b e2       	ldi	r24, 0x2B	; 43
   13778:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1377a:	f0 01       	movw	r30, r0
   1377c:	8d 9d       	mul	r24, r13
   1377e:	f0 0d       	add	r31, r0
   13780:	11 24       	eor	r1, r1
   13782:	e5 50       	subi	r30, 0x05	; 5
   13784:	f0 4e       	sbci	r31, 0xE0	; 224
   13786:	27 a1       	ldd	r18, Z+39	; 0x27
   13788:	30 a5       	ldd	r19, Z+40	; 0x28
   1378a:	c6 5f       	subi	r28, 0xF6	; 246
   1378c:	de 4f       	sbci	r29, 0xFE	; 254
   1378e:	39 83       	std	Y+1, r19	; 0x01
   13790:	28 83       	st	Y, r18
   13792:	ca 50       	subi	r28, 0x0A	; 10
   13794:	d1 40       	sbci	r29, 0x01	; 1
   13796:	fe e0       	ldi	r31, 0x0E	; 14
   13798:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   1379a:	31 2c       	mov	r3, r1
   1379c:	22 cf       	rjmp	.-444    	; 0x135e2 <Read_Config+0x142>
   1379e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   137a2:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   137a6:	1d cf       	rjmp	.-454    	; 0x135e2 <Read_Config+0x142>
   137a8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   137aa:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   137ac:	57 82       	std	Z+7, r5	; 0x07
   137ae:	46 82       	std	Z+6, r4	; 0x06
   137b0:	b5 82       	std	Z+5, r11	; 0x05
   137b2:	a4 82       	std	Z+4, r10	; 0x04
   137b4:	8f e1       	ldi	r24, 0x1F	; 31
   137b6:	9d e1       	ldi	r25, 0x1D	; 29
   137b8:	a0 e0       	ldi	r26, 0x00	; 0
   137ba:	81 83       	std	Z+1, r24	; 0x01
   137bc:	92 83       	std	Z+2, r25	; 0x02
   137be:	a3 83       	std	Z+3, r26	; 0x03
   137c0:	4c c2       	rjmp	.+1176   	; 0x13c5a <Read_Config+0x7ba>
   137c2:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   137c4:	11 05       	cpc	r17, r1
   137c6:	39 f4       	brne	.+14     	; 0x137d6 <Read_Config+0x336>
   137c8:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   137ca:	90 e0       	ldi	r25, 0x00	; 0
   137cc:	04 dd       	rcall	.-1528   	; 0x131d6 <push_state>
   137ce:	ef e0       	ldi	r30, 0x0F	; 15
   137d0:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   137d2:	31 2c       	mov	r3, r1
   137d4:	06 cf       	rjmp	.-500    	; 0x135e2 <Read_Config+0x142>
   137d6:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   137d8:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   137da:	57 82       	std	Z+7, r5	; 0x07
   137dc:	46 82       	std	Z+6, r4	; 0x06
   137de:	b5 82       	std	Z+5, r11	; 0x05
   137e0:	a4 82       	std	Z+4, r10	; 0x04
   137e2:	85 ef       	ldi	r24, 0xF5	; 245
   137e4:	9c e1       	ldi	r25, 0x1C	; 28
   137e6:	e8 cf       	rjmp	.-48     	; 0x137b8 <Read_Config+0x318>
   137e8:	01 30       	cpi	r16, 0x01	; 1
   137ea:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   137ec:	b1 f4       	brne	.+44     	; 0x1381a <Read_Config+0x37a>
   137ee:	6f 71       	andi	r22, 0x1F	; 31
   137f0:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   137f2:	8c 9d       	mul	r24, r12
   137f4:	f0 01       	movw	r30, r0
   137f6:	8d 9d       	mul	r24, r13
   137f8:	f0 0d       	add	r31, r0
   137fa:	11 24       	eor	r1, r1
   137fc:	e5 50       	subi	r30, 0x05	; 5
   137fe:	f0 4e       	sbci	r31, 0xE0	; 224
   13800:	61 83       	std	Z+1, r22	; 0x01
   13802:	c6 5f       	subi	r28, 0xF6	; 246
   13804:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13806:	a8 81       	ld	r26, Y
   13808:	b9 81       	ldd	r27, Y+1	; 0x01
   1380a:	ca 50       	subi	r28, 0x0A	; 10
   1380c:	d1 40       	sbci	r29, 0x01	; 1
   1380e:	6c 93       	st	X, r22
   13810:	8f ef       	ldi	r24, 0xFF	; 255
   13812:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13814:	fd 01       	movw	r30, r26
   13816:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13818:	e4 ce       	rjmp	.-568    	; 0x135e2 <Read_Config+0x142>
   1381a:	ed b7       	in	r30, 0x3d	; 61
   1381c:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1381e:	57 82       	std	Z+7, r5	; 0x07
   13820:	46 82       	std	Z+6, r4	; 0x06
   13822:	b5 82       	std	Z+5, r11	; 0x05
   13824:	a4 82       	std	Z+4, r10	; 0x04
   13826:	84 ec       	ldi	r24, 0xC4	; 196
   13828:	9c e1       	ldi	r25, 0x1C	; 28
   1382a:	c6 cf       	rjmp	.-116    	; 0x137b8 <Read_Config+0x318>
   1382c:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1382e:	11 05       	cpc	r17, r1
   13830:	d9 f0       	breq	.+54     	; 0x13868 <Read_Config+0x3c8>
   13832:	6c f4       	brge	.+26     	; 0x1384e <Read_Config+0x3ae>
   13834:	09 30       	cpi	r16, 0x09	; 9
   13836:	11 05       	cpc	r17, r1
   13838:	f1 f0       	breq	.+60     	; 0x13876 <Read_Config+0x3d6>
   1383a:	0b 30       	cpi	r16, 0x0B	; 11
   1383c:	11 05       	cpc	r17, r1
   1383e:	49 f5       	brne	.+82     	; 0x13892 <Read_Config+0x3f2>
   13840:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13842:	90 e0       	ldi	r25, 0x00	; 0
   13844:	c8 dc       	rcall	.-1648   	; 0x131d6 <push_state>
   13846:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13848:	25 2e       	mov	r2, r21
   1384a:	31 2c       	mov	r3, r1
   1384c:	ca ce       	rjmp	.-620    	; 0x135e2 <Read_Config+0x142>
                        break;
   1384e:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13850:	11 05       	cpc	r17, r1
   13852:	c1 f0       	breq	.+48     	; 0x13884 <Read_Config+0x3e4>
   13854:	0a 32       	cpi	r16, 0x2A	; 42
   13856:	11 05       	cpc	r17, r1
   13858:	e1 f4       	brne	.+56     	; 0x13892 <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   1385a:	81 e0       	ldi	r24, 0x01	; 1
   1385c:	90 e0       	ldi	r25, 0x00	; 0
   1385e:	bb dc       	rcall	.-1674   	; 0x131d6 <push_state>
                        state = SS80_VOLUME;
   13860:	36 e0       	ldi	r19, 0x06	; 6
   13862:	23 2e       	mov	r2, r19
   13864:	31 2c       	mov	r3, r1
                        break;
   13866:	bd ce       	rjmp	.-646    	; 0x135e2 <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13868:	81 e0       	ldi	r24, 0x01	; 1
   1386a:	90 e0       	ldi	r25, 0x00	; 0
   1386c:	b4 dc       	rcall	.-1688   	; 0x131d6 <push_state>
                        state = SS80_HEADER;
   1386e:	72 e0       	ldi	r23, 0x02	; 2
   13870:	27 2e       	mov	r2, r23
   13872:	31 2c       	mov	r3, r1
                        break;
   13874:	b6 ce       	rjmp	.-660    	; 0x135e2 <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   13876:	81 e0       	ldi	r24, 0x01	; 1
   13878:	90 e0       	ldi	r25, 0x00	; 0
   1387a:	ad dc       	rcall	.-1702   	; 0x131d6 <push_state>
   1387c:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   1387e:	26 2e       	mov	r2, r22
   13880:	31 2c       	mov	r3, r1
   13882:	af ce       	rjmp	.-674    	; 0x135e2 <Read_Config+0x142>
                        break;
   13884:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13886:	90 e0       	ldi	r25, 0x00	; 0
   13888:	a6 dc       	rcall	.-1716   	; 0x131d6 <push_state>
   1388a:	45 e0       	ldi	r20, 0x05	; 5
   1388c:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   1388e:	31 2c       	mov	r3, r1
   13890:	a8 ce       	rjmp	.-688    	; 0x135e2 <Read_Config+0x142>
   13892:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13894:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13896:	57 82       	std	Z+7, r5	; 0x07
   13898:	46 82       	std	Z+6, r4	; 0x06
   1389a:	b5 82       	std	Z+5, r11	; 0x05
   1389c:	a4 82       	std	Z+4, r10	; 0x04
   1389e:	87 e9       	ldi	r24, 0x97	; 151
   138a0:	9c e1       	ldi	r25, 0x1C	; 28
   138a2:	8a cf       	rjmp	.-236    	; 0x137b8 <Read_Config+0x318>
   138a4:	02 31       	cpi	r16, 0x12	; 18
   138a6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   138a8:	f1 f0       	breq	.+60     	; 0x138e6 <Read_Config+0x446>
   138aa:	0f 31       	cpi	r16, 0x1F	; 31
   138ac:	11 05       	cpc	r17, r1
   138ae:	79 f0       	breq	.+30     	; 0x138ce <Read_Config+0x42e>
   138b0:	01 30       	cpi	r16, 0x01	; 1
   138b2:	11 05       	cpc	r17, r1
   138b4:	e9 f4       	brne	.+58     	; 0x138f0 <Read_Config+0x450>
   138b6:	6f 71       	andi	r22, 0x1F	; 31
   138b8:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   138ba:	8c 9d       	mul	r24, r12
   138bc:	f0 01       	movw	r30, r0
   138be:	8d 9d       	mul	r24, r13
   138c0:	f0 0d       	add	r31, r0
   138c2:	11 24       	eor	r1, r1
   138c4:	e5 50       	subi	r30, 0x05	; 5
   138c6:	f0 4e       	sbci	r31, 0xE0	; 224
   138c8:	61 83       	std	Z+1, r22	; 0x01
   138ca:	d3 01       	movw	r26, r6
   138cc:	37 c1       	rjmp	.+622    	; 0x13b3c <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   138ce:	67 70       	andi	r22, 0x07	; 7
   138d0:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   138d2:	8c 9d       	mul	r24, r12
   138d4:	f0 01       	movw	r30, r0
   138d6:	8d 9d       	mul	r24, r13
   138d8:	f0 0d       	add	r31, r0
   138da:	11 24       	eor	r1, r1
   138dc:	e5 50       	subi	r30, 0x05	; 5
   138de:	f0 4e       	sbci	r31, 0xE0	; 224
   138e0:	62 83       	std	Z+2, r22	; 0x02
   138e2:	f3 01       	movw	r30, r6
   138e4:	2d c1       	rjmp	.+602    	; 0x13b40 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   138e6:	c4 01       	movw	r24, r8
   138e8:	0e 94 07 30 	call	0x600e	; 0x600e <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   138ec:	f3 01       	movw	r30, r6
   138ee:	33 c1       	rjmp	.+614    	; 0x13b56 <Read_Config+0x6b6>
   138f0:	ed b7       	in	r30, 0x3d	; 61
   138f2:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138f4:	57 82       	std	Z+7, r5	; 0x07
   138f6:	46 82       	std	Z+6, r4	; 0x06
   138f8:	b5 82       	std	Z+5, r11	; 0x05
   138fa:	a4 82       	std	Z+4, r10	; 0x04
   138fc:	89 e6       	ldi	r24, 0x69	; 105
   138fe:	9c e1       	ldi	r25, 0x1C	; 28
   13900:	5b cf       	rjmp	.-330    	; 0x137b8 <Read_Config+0x318>
   13902:	07 31       	cpi	r16, 0x17	; 23
   13904:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13906:	21 f4       	brne	.+8      	; 0x13910 <Read_Config+0x470>
   13908:	96 2f       	mov	r25, r22
   1390a:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1390c:	f3 01       	movw	r30, r6
   1390e:	3f c1       	rjmp	.+638    	; 0x13b8e <Read_Config+0x6ee>
   13910:	ed b7       	in	r30, 0x3d	; 61
   13912:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13914:	57 82       	std	Z+7, r5	; 0x07
   13916:	46 82       	std	Z+6, r4	; 0x06
   13918:	b5 82       	std	Z+5, r11	; 0x05
   1391a:	a4 82       	std	Z+4, r10	; 0x04
   1391c:	8b e3       	ldi	r24, 0x3B	; 59
   1391e:	9c e1       	ldi	r25, 0x1C	; 28
   13920:	4b cf       	rjmp	.-362    	; 0x137b8 <Read_Config+0x318>
   13922:	06 32       	cpi	r16, 0x26	; 38
   13924:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13926:	71 f0       	breq	.+28     	; 0x13944 <Read_Config+0x4a4>
   13928:	08 32       	cpi	r16, 0x28	; 40
   1392a:	11 05       	cpc	r17, r1
   1392c:	39 f0       	breq	.+14     	; 0x1393c <Read_Config+0x49c>
   1392e:	05 32       	cpi	r16, 0x25	; 37
   13930:	11 05       	cpc	r17, r1
   13932:	59 f4       	brne	.+22     	; 0x1394a <Read_Config+0x4aa>
   13934:	96 2f       	mov	r25, r22
   13936:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13938:	f3 01       	movw	r30, r6
   1393a:	5c c1       	rjmp	.+696    	; 0x13bf4 <Read_Config+0x754>
   1393c:	96 2f       	mov	r25, r22
   1393e:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13940:	f3 01       	movw	r30, r6
   13942:	55 c1       	rjmp	.+682    	; 0x13bee <Read_Config+0x74e>
   13944:	f3 01       	movw	r30, r6
   13946:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13948:	4c ce       	rjmp	.-872    	; 0x135e2 <Read_Config+0x142>
   1394a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1394c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1394e:	57 82       	std	Z+7, r5	; 0x07
   13950:	46 82       	std	Z+6, r4	; 0x06
   13952:	b5 82       	std	Z+5, r11	; 0x05
   13954:	a4 82       	std	Z+4, r10	; 0x04
   13956:	89 e0       	ldi	r24, 0x09	; 9
   13958:	9c e1       	ldi	r25, 0x1C	; 28
   1395a:	2e cf       	rjmp	.-420    	; 0x137b8 <Read_Config+0x318>
   1395c:	0a 30       	cpi	r16, 0x0A	; 10
   1395e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13960:	09 f4       	brne	.+2      	; 0x13964 <Read_Config+0x4c4>
   13962:	45 c0       	rjmp	.+138    	; 0x139ee <Read_Config+0x54e>
   13964:	d4 f4       	brge	.+52     	; 0x1399a <Read_Config+0x4fa>
   13966:	05 30       	cpi	r16, 0x05	; 5
   13968:	11 05       	cpc	r17, r1
   1396a:	d1 f1       	breq	.+116    	; 0x139e0 <Read_Config+0x540>
   1396c:	64 f4       	brge	.+24     	; 0x13986 <Read_Config+0x4e6>
   1396e:	01 15       	cp	r16, r1
   13970:	11 05       	cpc	r17, r1
   13972:	09 f4       	brne	.+2      	; 0x13976 <Read_Config+0x4d6>
   13974:	40 c0       	rjmp	.+128    	; 0x139f6 <Read_Config+0x556>
   13976:	04 30       	cpi	r16, 0x04	; 4
   13978:	11 05       	cpc	r17, r1
   1397a:	09 f0       	breq	.+2      	; 0x1397e <Read_Config+0x4de>
   1397c:	46 c0       	rjmp	.+140    	; 0x13a0a <Read_Config+0x56a>
   1397e:	f3 01       	movw	r30, r6
   13980:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13982:	75 8b       	std	Z+21, r23	; 0x15
   13984:	2e ce       	rjmp	.-932    	; 0x135e2 <Read_Config+0x142>
   13986:	06 30       	cpi	r16, 0x06	; 6
                        break;
   13988:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1398a:	71 f1       	breq	.+92     	; 0x139e8 <Read_Config+0x548>
   1398c:	07 30       	cpi	r16, 0x07	; 7
   1398e:	11 05       	cpc	r17, r1
   13990:	e1 f5       	brne	.+120    	; 0x13a0a <Read_Config+0x56a>
   13992:	f3 01       	movw	r30, r6
   13994:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13996:	71 8b       	std	Z+17, r23	; 0x11
   13998:	24 ce       	rjmp	.-952    	; 0x135e2 <Read_Config+0x142>
   1399a:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   1399c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1399e:	79 f1       	breq	.+94     	; 0x139fe <Read_Config+0x55e>
   139a0:	4c f4       	brge	.+18     	; 0x139b4 <Read_Config+0x514>
   139a2:	0f 30       	cpi	r16, 0x0F	; 15
   139a4:	11 05       	cpc	r17, r1
   139a6:	b1 f0       	breq	.+44     	; 0x139d4 <Read_Config+0x534>
   139a8:	03 31       	cpi	r16, 0x13	; 19
   139aa:	11 05       	cpc	r17, r1
   139ac:	71 f5       	brne	.+92     	; 0x13a0a <Read_Config+0x56a>
   139ae:	f3 01       	movw	r30, r6
   139b0:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   139b2:	17 ce       	rjmp	.-978    	; 0x135e2 <Read_Config+0x142>
   139b4:	01 32       	cpi	r16, 0x21	; 33
                        break;
   139b6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   139b8:	29 f1       	breq	.+74     	; 0x13a04 <Read_Config+0x564>
   139ba:	09 32       	cpi	r16, 0x29	; 41
   139bc:	11 05       	cpc	r17, r1
   139be:	39 f0       	breq	.+14     	; 0x139ce <Read_Config+0x52e>
   139c0:	0e 31       	cpi	r16, 0x1E	; 30
   139c2:	11 05       	cpc	r17, r1
   139c4:	11 f5       	brne	.+68     	; 0x13a0a <Read_Config+0x56a>
   139c6:	f3 01       	movw	r30, r6
   139c8:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   139ca:	71 8f       	std	Z+25, r23	; 0x19
   139cc:	0a ce       	rjmp	.-1004   	; 0x135e2 <Read_Config+0x142>
   139ce:	f3 01       	movw	r30, r6
                        break;
   139d0:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   139d2:	07 ce       	rjmp	.-1010   	; 0x135e2 <Read_Config+0x142>
   139d4:	f3 01       	movw	r30, r6
                        break;
   139d6:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   139d8:	75 87       	std	Z+13, r23	; 0x0d
   139da:	86 87       	std	Z+14, r24	; 0x0e
   139dc:	97 87       	std	Z+15, r25	; 0x0f
   139de:	01 ce       	rjmp	.-1022   	; 0x135e2 <Read_Config+0x142>
   139e0:	61 70       	andi	r22, 0x01	; 1
                        break;
   139e2:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   139e4:	62 8b       	std	Z+18, r22	; 0x12
   139e6:	fd cd       	rjmp	.-1030   	; 0x135e2 <Read_Config+0x142>
   139e8:	f3 01       	movw	r30, r6
                        break;
   139ea:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   139ec:	fa cd       	rjmp	.-1036   	; 0x135e2 <Read_Config+0x142>
   139ee:	f3 01       	movw	r30, r6
                        break;
   139f0:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   139f2:	77 8b       	std	Z+23, r23	; 0x17
   139f4:	f6 cd       	rjmp	.-1044   	; 0x135e2 <Read_Config+0x142>
   139f6:	f3 01       	movw	r30, r6
                        break;
   139f8:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   139fa:	73 8f       	std	Z+27, r23	; 0x1b
   139fc:	f2 cd       	rjmp	.-1052   	; 0x135e2 <Read_Config+0x142>
   139fe:	f3 01       	movw	r30, r6
                        break;
   13a00:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13a02:	ef cd       	rjmp	.-1058   	; 0x135e2 <Read_Config+0x142>
   13a04:	f3 01       	movw	r30, r6
                        break;
   13a06:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13a08:	ec cd       	rjmp	.-1064   	; 0x135e2 <Read_Config+0x142>
   13a0a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a0c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13a0e:	57 82       	std	Z+7, r5	; 0x07
   13a10:	46 82       	std	Z+6, r4	; 0x06
   13a12:	b5 82       	std	Z+5, r11	; 0x05
   13a14:	a4 82       	std	Z+4, r10	; 0x04
   13a16:	8d ed       	ldi	r24, 0xDD	; 221
   13a18:	9b e1       	ldi	r25, 0x1B	; 27
   13a1a:	ce ce       	rjmp	.-612    	; 0x137b8 <Read_Config+0x318>
   13a1c:	0a 31       	cpi	r16, 0x1A	; 26
   13a1e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13a20:	b9 f0       	breq	.+46     	; 0x13a50 <Read_Config+0x5b0>
   13a22:	64 f4       	brge	.+24     	; 0x13a3c <Read_Config+0x59c>
   13a24:	08 31       	cpi	r16, 0x18	; 24
   13a26:	11 05       	cpc	r17, r1
   13a28:	e1 f0       	breq	.+56     	; 0x13a62 <Read_Config+0x5c2>
   13a2a:	09 31       	cpi	r16, 0x19	; 25
   13a2c:	11 05       	cpc	r17, r1
   13a2e:	e1 f4       	brne	.+56     	; 0x13a68 <Read_Config+0x5c8>
   13a30:	f3 01       	movw	r30, r6
   13a32:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13a34:	77 a3       	std	Z+39, r23	; 0x27
   13a36:	80 a7       	std	Z+40, r24	; 0x28
   13a38:	91 a7       	std	Z+41, r25	; 0x29
   13a3a:	d3 cd       	rjmp	.-1114   	; 0x135e2 <Read_Config+0x142>
   13a3c:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13a3e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13a40:	69 f0       	breq	.+26     	; 0x13a5c <Read_Config+0x5bc>
   13a42:	0d 31       	cpi	r16, 0x1D	; 29
   13a44:	11 05       	cpc	r17, r1
   13a46:	81 f4       	brne	.+32     	; 0x13a68 <Read_Config+0x5c8>
   13a48:	f3 01       	movw	r30, r6
   13a4a:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13a4c:	75 a3       	std	Z+37, r23	; 0x25
   13a4e:	c9 cd       	rjmp	.-1134   	; 0x135e2 <Read_Config+0x142>
   13a50:	f3 01       	movw	r30, r6
                        break;
   13a52:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13a54:	70 a3       	std	Z+32, r23	; 0x20
   13a56:	81 a3       	std	Z+33, r24	; 0x21
   13a58:	92 a3       	std	Z+34, r25	; 0x22
   13a5a:	c3 cd       	rjmp	.-1146   	; 0x135e2 <Read_Config+0x142>
   13a5c:	f3 01       	movw	r30, r6
                        break;
   13a5e:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13a60:	c0 cd       	rjmp	.-1152   	; 0x135e2 <Read_Config+0x142>
   13a62:	f3 01       	movw	r30, r6
                        break;
   13a64:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13a66:	bd cd       	rjmp	.-1158   	; 0x135e2 <Read_Config+0x142>
   13a68:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a6a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a6c:	57 82       	std	Z+7, r5	; 0x07
   13a6e:	46 82       	std	Z+6, r4	; 0x06
   13a70:	b5 82       	std	Z+5, r11	; 0x05
   13a72:	a4 82       	std	Z+4, r10	; 0x04
   13a74:	c3 5e       	subi	r28, 0xE3	; 227
   13a76:	de 4f       	sbci	r29, 0xFE	; 254
   13a78:	28 81       	ld	r18, Y
   13a7a:	39 81       	ldd	r19, Y+1	; 0x01
   13a7c:	4a 81       	ldd	r20, Y+2	; 0x02
   13a7e:	cd 51       	subi	r28, 0x1D	; 29
   13a80:	d1 40       	sbci	r29, 0x01	; 1
   13a82:	e8 c0       	rjmp	.+464    	; 0x13c54 <Read_Config+0x7b4>
   13a84:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13a86:	11 05       	cpc	r17, r1
   13a88:	a1 f0       	breq	.+40     	; 0x13ab2 <Read_Config+0x612>
   13a8a:	05 31       	cpi	r16, 0x15	; 21
   13a8c:	11 05       	cpc	r17, r1
   13a8e:	51 f0       	breq	.+20     	; 0x13aa4 <Read_Config+0x604>
   13a90:	09 30       	cpi	r16, 0x09	; 9
   13a92:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13a94:	a9 f4       	brne	.+42     	; 0x13ac0 <Read_Config+0x620>
   13a96:	8a e0       	ldi	r24, 0x0A	; 10
   13a98:	90 e0       	ldi	r25, 0x00	; 0
   13a9a:	9d db       	rcall	.-2246   	; 0x131d6 <push_state>
                        state = AMIGO_CONFIG;
   13a9c:	9c e0       	ldi	r25, 0x0C	; 12
   13a9e:	29 2e       	mov	r2, r25
   13aa0:	31 2c       	mov	r3, r1
                        break;
   13aa2:	9f cd       	rjmp	.-1218   	; 0x135e2 <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13aa4:	8a e0       	ldi	r24, 0x0A	; 10
   13aa6:	90 e0       	ldi	r25, 0x00	; 0
   13aa8:	96 db       	rcall	.-2260   	; 0x131d6 <push_state>
   13aaa:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   13aac:	22 2e       	mov	r2, r18
   13aae:	31 2c       	mov	r3, r1
   13ab0:	98 cd       	rjmp	.-1232   	; 0x135e2 <Read_Config+0x142>
                        break;
   13ab2:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13ab4:	90 e0       	ldi	r25, 0x00	; 0
   13ab6:	8f db       	rcall	.-2274   	; 0x131d6 <push_state>
   13ab8:	8d e0       	ldi	r24, 0x0D	; 13
   13aba:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   13abc:	31 2c       	mov	r3, r1
   13abe:	91 cd       	rjmp	.-1246   	; 0x135e2 <Read_Config+0x142>
   13ac0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13ac2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13ac4:	57 82       	std	Z+7, r5	; 0x07
   13ac6:	46 82       	std	Z+6, r4	; 0x06
   13ac8:	b5 82       	std	Z+5, r11	; 0x05
   13aca:	a4 82       	std	Z+4, r10	; 0x04
   13acc:	c6 5e       	subi	r28, 0xE6	; 230
   13ace:	de 4f       	sbci	r29, 0xFE	; 254
   13ad0:	28 81       	ld	r18, Y
   13ad2:	39 81       	ldd	r19, Y+1	; 0x01
   13ad4:	4a 81       	ldd	r20, Y+2	; 0x02
   13ad6:	ca 51       	subi	r28, 0x1A	; 26
   13ad8:	d1 40       	sbci	r29, 0x01	; 1
   13ada:	bc c0       	rjmp	.+376    	; 0x13c54 <Read_Config+0x7b4>
   13adc:	00 31       	cpi	r16, 0x10	; 16
   13ade:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13ae0:	09 f4       	brne	.+2      	; 0x13ae4 <Read_Config+0x644>
   13ae2:	7f cd       	rjmp	.-1282   	; 0x135e2 <Read_Config+0x142>
   13ae4:	a4 f4       	brge	.+40     	; 0x13b0e <Read_Config+0x66e>
   13ae6:	01 30       	cpi	r16, 0x01	; 1
   13ae8:	11 05       	cpc	r17, r1
   13aea:	c1 f5       	brne	.+112    	; 0x13b5c <Read_Config+0x6bc>
   13aec:	6f 71       	andi	r22, 0x1F	; 31
   13aee:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13af0:	8c 9d       	mul	r24, r12
   13af2:	f0 01       	movw	r30, r0
   13af4:	8d 9d       	mul	r24, r13
   13af6:	f0 0d       	add	r31, r0
   13af8:	11 24       	eor	r1, r1
   13afa:	e5 50       	subi	r30, 0x05	; 5
   13afc:	f0 4e       	sbci	r31, 0xE0	; 224
   13afe:	61 83       	std	Z+1, r22	; 0x01
   13b00:	c8 5f       	subi	r28, 0xF8	; 248
   13b02:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13b04:	a8 81       	ld	r26, Y
   13b06:	b9 81       	ldd	r27, Y+1	; 0x01
   13b08:	c8 50       	subi	r28, 0x08	; 8
   13b0a:	d1 40       	sbci	r29, 0x01	; 1
   13b0c:	17 c0       	rjmp	.+46     	; 0x13b3c <Read_Config+0x69c>
   13b0e:	02 31       	cpi	r16, 0x12	; 18
   13b10:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13b12:	c1 f0       	breq	.+48     	; 0x13b44 <Read_Config+0x6a4>
   13b14:	0f 31       	cpi	r16, 0x1F	; 31
   13b16:	11 05       	cpc	r17, r1
   13b18:	09 f5       	brne	.+66     	; 0x13b5c <Read_Config+0x6bc>
   13b1a:	67 70       	andi	r22, 0x07	; 7
   13b1c:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13b1e:	8c 9d       	mul	r24, r12
   13b20:	f0 01       	movw	r30, r0
   13b22:	8d 9d       	mul	r24, r13
   13b24:	f0 0d       	add	r31, r0
   13b26:	11 24       	eor	r1, r1
   13b28:	e5 50       	subi	r30, 0x05	; 5
   13b2a:	f0 4e       	sbci	r31, 0xE0	; 224
   13b2c:	62 83       	std	Z+2, r22	; 0x02
   13b2e:	c8 5f       	subi	r28, 0xF8	; 248
   13b30:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13b32:	e8 81       	ld	r30, Y
   13b34:	f9 81       	ldd	r31, Y+1	; 0x01
   13b36:	c8 50       	subi	r28, 0x08	; 8
   13b38:	d1 40       	sbci	r29, 0x01	; 1
   13b3a:	02 c0       	rjmp	.+4      	; 0x13b40 <Read_Config+0x6a0>
   13b3c:	6c 93       	st	X, r22
   13b3e:	51 cd       	rjmp	.-1374   	; 0x135e2 <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13b40:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13b42:	4f cd       	rjmp	.-1378   	; 0x135e2 <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13b44:	c4 01       	movw	r24, r8
                        break;
   13b46:	0e 94 07 30 	call	0x600e	; 0x600e <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13b4a:	c8 5f       	subi	r28, 0xF8	; 248
   13b4c:	de 4f       	sbci	r29, 0xFE	; 254
   13b4e:	e8 81       	ld	r30, Y
   13b50:	f9 81       	ldd	r31, Y+1	; 0x01
   13b52:	c8 50       	subi	r28, 0x08	; 8
   13b54:	d1 40       	sbci	r29, 0x01	; 1
   13b56:	93 83       	std	Z+3, r25	; 0x03
   13b58:	82 83       	std	Z+2, r24	; 0x02
   13b5a:	43 cd       	rjmp	.-1402   	; 0x135e2 <Read_Config+0x142>
   13b5c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13b5e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13b60:	57 82       	std	Z+7, r5	; 0x07
   13b62:	46 82       	std	Z+6, r4	; 0x06
   13b64:	b5 82       	std	Z+5, r11	; 0x05
   13b66:	a4 82       	std	Z+4, r10	; 0x04
   13b68:	c9 5e       	subi	r28, 0xE9	; 233
   13b6a:	de 4f       	sbci	r29, 0xFE	; 254
   13b6c:	28 81       	ld	r18, Y
   13b6e:	39 81       	ldd	r19, Y+1	; 0x01
   13b70:	4a 81       	ldd	r20, Y+2	; 0x02
   13b72:	c7 51       	subi	r28, 0x17	; 23
   13b74:	d1 40       	sbci	r29, 0x01	; 1
   13b76:	6e c0       	rjmp	.+220    	; 0x13c54 <Read_Config+0x7b4>
   13b78:	07 31       	cpi	r16, 0x17	; 23
   13b7a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13b7c:	59 f4       	brne	.+22     	; 0x13b94 <Read_Config+0x6f4>
   13b7e:	96 2f       	mov	r25, r22
   13b80:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   13b82:	c8 5f       	subi	r28, 0xF8	; 248
   13b84:	de 4f       	sbci	r29, 0xFE	; 254
   13b86:	e8 81       	ld	r30, Y
   13b88:	f9 81       	ldd	r31, Y+1	; 0x01
   13b8a:	c8 50       	subi	r28, 0x08	; 8
   13b8c:	d1 40       	sbci	r29, 0x01	; 1
   13b8e:	94 83       	std	Z+4, r25	; 0x04
   13b90:	85 83       	std	Z+5, r24	; 0x05
   13b92:	27 cd       	rjmp	.-1458   	; 0x135e2 <Read_Config+0x142>
   13b94:	ed b7       	in	r30, 0x3d	; 61
   13b96:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13b98:	57 82       	std	Z+7, r5	; 0x07
   13b9a:	46 82       	std	Z+6, r4	; 0x06
   13b9c:	b5 82       	std	Z+5, r11	; 0x05
   13b9e:	a4 82       	std	Z+4, r10	; 0x04
   13ba0:	cc 5e       	subi	r28, 0xEC	; 236
   13ba2:	de 4f       	sbci	r29, 0xFE	; 254
   13ba4:	28 81       	ld	r18, Y
   13ba6:	39 81       	ldd	r19, Y+1	; 0x01
   13ba8:	4a 81       	ldd	r20, Y+2	; 0x02
   13baa:	c4 51       	subi	r28, 0x14	; 20
   13bac:	d1 40       	sbci	r29, 0x01	; 1
   13bae:	52 c0       	rjmp	.+164    	; 0x13c54 <Read_Config+0x7b4>
   13bb0:	0d 30       	cpi	r16, 0x0D	; 13
   13bb2:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13bb4:	59 f1       	breq	.+86     	; 0x13c0c <Read_Config+0x76c>
   13bb6:	64 f4       	brge	.+24     	; 0x13bd0 <Read_Config+0x730>
   13bb8:	08 30       	cpi	r16, 0x08	; 8
   13bba:	11 05       	cpc	r17, r1
   13bbc:	81 f5       	brne	.+96     	; 0x13c1e <Read_Config+0x77e>
   13bbe:	96 2f       	mov	r25, r22
   13bc0:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13bc2:	c8 5f       	subi	r28, 0xF8	; 248
   13bc4:	de 4f       	sbci	r29, 0xFE	; 254
   13bc6:	e8 81       	ld	r30, Y
   13bc8:	f9 81       	ldd	r31, Y+1	; 0x01
   13bca:	c8 50       	subi	r28, 0x08	; 8
   13bcc:	d1 40       	sbci	r29, 0x01	; 1
   13bce:	0f c0       	rjmp	.+30     	; 0x13bee <Read_Config+0x74e>
   13bd0:	06 31       	cpi	r16, 0x16	; 22
   13bd2:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13bd4:	91 f0       	breq	.+36     	; 0x13bfa <Read_Config+0x75a>
   13bd6:	02 32       	cpi	r16, 0x22	; 34
   13bd8:	11 05       	cpc	r17, r1
   13bda:	09 f5       	brne	.+66     	; 0x13c1e <Read_Config+0x77e>
   13bdc:	96 2f       	mov	r25, r22
   13bde:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13be0:	c8 5f       	subi	r28, 0xF8	; 248
   13be2:	de 4f       	sbci	r29, 0xFE	; 254
   13be4:	e8 81       	ld	r30, Y
   13be6:	f9 81       	ldd	r31, Y+1	; 0x01
   13be8:	c8 50       	subi	r28, 0x08	; 8
   13bea:	d1 40       	sbci	r29, 0x01	; 1
   13bec:	03 c0       	rjmp	.+6      	; 0x13bf4 <Read_Config+0x754>
   13bee:	96 83       	std	Z+6, r25	; 0x06
   13bf0:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13bf2:	f7 cc       	rjmp	.-1554   	; 0x135e2 <Read_Config+0x142>
   13bf4:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13bf6:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13bf8:	f4 cc       	rjmp	.-1560   	; 0x135e2 <Read_Config+0x142>
   13bfa:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13bfc:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13bfe:	e8 81       	ld	r30, Y
   13c00:	f9 81       	ldd	r31, Y+1	; 0x01
   13c02:	c8 50       	subi	r28, 0x08	; 8
   13c04:	d1 40       	sbci	r29, 0x01	; 1
   13c06:	62 87       	std	Z+10, r22	; 0x0a
   13c08:	73 87       	std	Z+11, r23	; 0x0b
   13c0a:	eb cc       	rjmp	.-1578   	; 0x135e2 <Read_Config+0x142>
   13c0c:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13c0e:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13c10:	e8 81       	ld	r30, Y
   13c12:	f9 81       	ldd	r31, Y+1	; 0x01
   13c14:	c8 50       	subi	r28, 0x08	; 8
   13c16:	d1 40       	sbci	r29, 0x01	; 1
   13c18:	64 87       	std	Z+12, r22	; 0x0c
   13c1a:	75 87       	std	Z+13, r23	; 0x0d
   13c1c:	e2 cc       	rjmp	.-1596   	; 0x135e2 <Read_Config+0x142>
   13c1e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13c20:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13c22:	57 82       	std	Z+7, r5	; 0x07
   13c24:	46 82       	std	Z+6, r4	; 0x06
   13c26:	b5 82       	std	Z+5, r11	; 0x05
   13c28:	a4 82       	std	Z+4, r10	; 0x04
   13c2a:	cf 5e       	subi	r28, 0xEF	; 239
   13c2c:	de 4f       	sbci	r29, 0xFE	; 254
   13c2e:	28 81       	ld	r18, Y
   13c30:	39 81       	ldd	r19, Y+1	; 0x01
   13c32:	4a 81       	ldd	r20, Y+2	; 0x02
   13c34:	c1 51       	subi	r28, 0x11	; 17
   13c36:	d1 40       	sbci	r29, 0x01	; 1
   13c38:	0d c0       	rjmp	.+26     	; 0x13c54 <Read_Config+0x7b4>
   13c3a:	ed b7       	in	r30, 0x3d	; 61
   13c3c:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13c3e:	57 82       	std	Z+7, r5	; 0x07
   13c40:	46 82       	std	Z+6, r4	; 0x06
   13c42:	b5 82       	std	Z+5, r11	; 0x05
   13c44:	a4 82       	std	Z+4, r10	; 0x04
   13c46:	c2 5f       	subi	r28, 0xF2	; 242
   13c48:	de 4f       	sbci	r29, 0xFE	; 254
   13c4a:	28 81       	ld	r18, Y
   13c4c:	39 81       	ldd	r19, Y+1	; 0x01
   13c4e:	4a 81       	ldd	r20, Y+2	; 0x02
   13c50:	ce 50       	subi	r28, 0x0E	; 14
   13c52:	d1 40       	sbci	r29, 0x01	; 1
   13c54:	21 83       	std	Z+1, r18	; 0x01
   13c56:	32 83       	std	Z+2, r19	; 0x02
   13c58:	43 83       	std	Z+3, r20	; 0x03
   13c5a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   13c5e:	ff ef       	ldi	r31, 0xFF	; 255
   13c60:	ef 1a       	sub	r14, r31
                ++errors;
   13c62:	ff 0a       	sbc	r15, r31
   13c64:	be cc       	rjmp	.-1668   	; 0x135e2 <Read_Config+0x142>
   13c66:	21 14       	cp	r2, r1
                break;
   13c68:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13c6a:	79 f0       	breq	.+30     	; 0x13c8a <Read_Config+0x7ea>
   13c6c:	ed b7       	in	r30, 0x3d	; 61
   13c6e:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13c70:	55 82       	std	Z+5, r5	; 0x05
   13c72:	44 82       	std	Z+4, r4	; 0x04
   13c74:	8e ea       	ldi	r24, 0xAE	; 174
   13c76:	9a e1       	ldi	r25, 0x1A	; 26
   13c78:	a0 e0       	ldi	r26, 0x00	; 0
   13c7a:	81 83       	std	Z+1, r24	; 0x01
   13c7c:	92 83       	std	Z+2, r25	; 0x02
   13c7e:	a3 83       	std	Z+3, r26	; 0x03
   13c80:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   13c84:	ff ef       	ldi	r31, 0xFF	; 255
   13c86:	ef 1a       	sub	r14, r31
        ++errors;
   13c88:	ff 0a       	sbc	r15, r31
   13c8a:	ed b7       	in	r30, 0x3d	; 61
   13c8c:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13c8e:	55 82       	std	Z+5, r5	; 0x05
   13c90:	44 82       	std	Z+4, r4	; 0x04
   13c92:	81 e9       	ldi	r24, 0x91	; 145
   13c94:	9a e1       	ldi	r25, 0x1A	; 26
   13c96:	a0 e0       	ldi	r26, 0x00	; 0
   13c98:	81 83       	std	Z+1, r24	; 0x01
   13c9a:	92 83       	std	Z+2, r25	; 0x02
   13c9c:	a3 83       	std	Z+3, r26	; 0x03
   13c9e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   13ca2:	e1 14       	cp	r14, r1
   13ca4:	f1 04       	cpc	r15, r1
    if(errors)
   13ca6:	61 f0       	breq	.+24     	; 0x13cc0 <Read_Config+0x820>
   13ca8:	ed b7       	in	r30, 0x3d	; 61
   13caa:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13cac:	f5 82       	std	Z+5, r15	; 0x05
   13cae:	e4 82       	std	Z+4, r14	; 0x04
   13cb0:	8a e6       	ldi	r24, 0x6A	; 106
   13cb2:	9a e1       	ldi	r25, 0x1A	; 26
   13cb4:	a0 e0       	ldi	r26, 0x00	; 0
   13cb6:	81 83       	std	Z+1, r24	; 0x01
   13cb8:	92 83       	std	Z+2, r25	; 0x02
   13cba:	a3 83       	std	Z+3, r26	; 0x03
   13cbc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   13cc0:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13cc2:	de 4f       	sbci	r29, 0xFE	; 254
   13cc4:	88 81       	ld	r24, Y
   13cc6:	99 81       	ldd	r25, Y+1	; 0x01
   13cc8:	cc 50       	subi	r28, 0x0C	; 12
   13cca:	d1 40       	sbci	r29, 0x01	; 1
   13ccc:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
   13cd0:	01 96       	adiw	r24, 0x01	; 1
   13cd2:	39 f4       	brne	.+14     	; 0x13ce2 <Read_Config+0x842>
   13cd4:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13cd6:	9e e0       	ldi	r25, 0x0E	; 14
   13cd8:	0e 94 81 77 	call	0xef02	; 0xef02 <perror>
   13cdc:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13cde:	e2 1a       	sub	r14, r18
   13ce0:	f2 0a       	sbc	r15, r18
   13ce2:	48 db       	rcall	.-2416   	; 0x13374 <Post_Config>
    }

// Post process device values
    Post_Config();
   13ce4:	c7 01       	movw	r24, r14
   13ce6:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13ce8:	de 4f       	sbci	r29, 0xFE	; 254
}
   13cea:	e2 e1       	ldi	r30, 0x12	; 18
   13cec:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00013cf0 <format_drives>:
   13cf0:	2f 92       	push	r2
   13cf2:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13cf4:	4f 92       	push	r4
   13cf6:	5f 92       	push	r5
   13cf8:	6f 92       	push	r6
   13cfa:	7f 92       	push	r7
   13cfc:	8f 92       	push	r8
   13cfe:	af 92       	push	r10
   13d00:	bf 92       	push	r11
   13d02:	cf 92       	push	r12
   13d04:	df 92       	push	r13
   13d06:	ef 92       	push	r14
   13d08:	ff 92       	push	r15
   13d0a:	0f 93       	push	r16
   13d0c:	1f 93       	push	r17
   13d0e:	cf 93       	push	r28
   13d10:	df 93       	push	r29
   13d12:	cd b7       	in	r28, 0x3d	; 61
   13d14:	de b7       	in	r29, 0x3e	; 62
   13d16:	ce 56       	subi	r28, 0x6E	; 110
   13d18:	d1 09       	sbc	r29, r1
   13d1a:	0f b6       	in	r0, 0x3f	; 63
   13d1c:	f8 94       	cli
   13d1e:	de bf       	out	0x3e, r29	; 62
   13d20:	0f be       	out	0x3f, r0	; 63
   13d22:	cd bf       	out	0x3d, r28	; 61
   13d24:	8b ef       	ldi	r24, 0xFB	; 251
   13d26:	c8 2e       	mov	r12, r24
   13d28:	8f e1       	ldi	r24, 0x1F	; 31
   13d2a:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13d2c:	a0 96       	adiw	r28, 0x20	; 32
   13d2e:	1f ae       	std	Y+63, r1	; 0x3f
   13d30:	1e ae       	std	Y+62, r1	; 0x3e
   13d32:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13d34:	6e 96       	adiw	r28, 0x1e	; 30
   13d36:	1f ae       	std	Y+63, r1	; 0x3f
   13d38:	1e ae       	std	Y+62, r1	; 0x3e
   13d3a:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13d3c:	6c 96       	adiw	r28, 0x1c	; 28
   13d3e:	1f ae       	std	Y+63, r1	; 0x3f
   13d40:	1e ae       	std	Y+62, r1	; 0x3e
   13d42:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13d44:	8e e1       	ldi	r24, 0x1E	; 30
   13d46:	97 e1       	ldi	r25, 0x17	; 23
   13d48:	9c 01       	movw	r18, r24
   13d4a:	40 e0       	ldi	r20, 0x00	; 0
   13d4c:	a3 96       	adiw	r28, 0x23	; 35
   13d4e:	2d af       	std	Y+61, r18	; 0x3d
   13d50:	3e af       	std	Y+62, r19	; 0x3e
   13d52:	4f af       	std	Y+63, r20	; 0x3f
   13d54:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13d56:	86 e1       	ldi	r24, 0x16	; 22
   13d58:	97 e1       	ldi	r25, 0x17	; 23
   13d5a:	9c 01       	movw	r18, r24
   13d5c:	40 e0       	ldi	r20, 0x00	; 0
   13d5e:	a6 96       	adiw	r28, 0x26	; 38
   13d60:	2d af       	std	Y+61, r18	; 0x3d
   13d62:	3e af       	std	Y+62, r19	; 0x3e
   13d64:	4f af       	std	Y+63, r20	; 0x3f
   13d66:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d68:	88 e3       	ldi	r24, 0x38	; 56
   13d6a:	97 e1       	ldi	r25, 0x17	; 23
   13d6c:	9c 01       	movw	r18, r24
   13d6e:	40 e0       	ldi	r20, 0x00	; 0
   13d70:	a9 96       	adiw	r28, 0x29	; 41
   13d72:	2d af       	std	Y+61, r18	; 0x3d
   13d74:	3e af       	std	Y+62, r19	; 0x3e
   13d76:	4f af       	std	Y+63, r20	; 0x3f
   13d78:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13d7a:	82 e6       	ldi	r24, 0x62	; 98
   13d7c:	97 e1       	ldi	r25, 0x17	; 23
   13d7e:	9c 01       	movw	r18, r24
   13d80:	40 e0       	ldi	r20, 0x00	; 0
   13d82:	ac 96       	adiw	r28, 0x2c	; 44
   13d84:	2d af       	std	Y+61, r18	; 0x3d
   13d86:	3e af       	std	Y+62, r19	; 0x3e
   13d88:	4f af       	std	Y+63, r20	; 0x3f
   13d8a:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13d8c:	8a e5       	ldi	r24, 0x5A	; 90
   13d8e:	97 e1       	ldi	r25, 0x17	; 23
   13d90:	9c 01       	movw	r18, r24
   13d92:	40 e0       	ldi	r20, 0x00	; 0
   13d94:	af 96       	adiw	r28, 0x2f	; 47
   13d96:	2d af       	std	Y+61, r18	; 0x3d
   13d98:	3e af       	std	Y+62, r19	; 0x3e
   13d9a:	4f af       	std	Y+63, r20	; 0x3f
   13d9c:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d9e:	8c e7       	ldi	r24, 0x7C	; 124
   13da0:	97 e1       	ldi	r25, 0x17	; 23
   13da2:	3c 01       	movw	r6, r24
   13da4:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13da6:	f6 01       	movw	r30, r12
   13da8:	80 81       	ld	r24, Z
   13daa:	88 23       	and	r24, r24
   13dac:	09 f4       	brne	.+2      	; 0x13db0 <format_drives+0xc0>
   13dae:	ef c0       	rjmp	.+478    	; 0x13f8e <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13db0:	83 30       	cpi	r24, 0x03	; 3
   13db2:	09 f0       	breq	.+2      	; 0x13db6 <format_drives+0xc6>
   13db4:	70 c0       	rjmp	.+224    	; 0x13e96 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13db6:	a7 a0       	ldd	r10, Z+39	; 0x27
   13db8:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13dba:	be 01       	movw	r22, r28
   13dbc:	66 5f       	subi	r22, 0xF6	; 246
   13dbe:	7f 4f       	sbci	r23, 0xFF	; 255
   13dc0:	f5 01       	movw	r30, r10
   13dc2:	82 81       	ldd	r24, Z+2	; 0x02
   13dc4:	93 81       	ldd	r25, Z+3	; 0x03
   13dc6:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <stat>
   13dca:	01 96       	adiw	r24, 0x01	; 1
   13dcc:	09 f0       	breq	.+2      	; 0x13dd0 <format_drives+0xe0>
   13dce:	63 c0       	rjmp	.+198    	; 0x13e96 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13dd0:	f5 01       	movw	r30, r10
   13dd2:	80 89       	ldd	r24, Z+16	; 0x10
   13dd4:	91 89       	ldd	r25, Z+17	; 0x11
   13dd6:	81 15       	cp	r24, r1
   13dd8:	91 40       	sbci	r25, 0x01	; 1
   13dda:	31 f0       	breq	.+12     	; 0x13de8 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13ddc:	ed b7       	in	r30, 0x3d	; 61
   13dde:	fe b7       	in	r31, 0x3e	; 62
   13de0:	61 82       	std	Z+1, r6	; 0x01
   13de2:	72 82       	std	Z+2, r7	; 0x02
   13de4:	83 82       	std	Z+3, r8	; 0x03
   13de6:	79 c0       	rjmp	.+242    	; 0x13eda <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13de8:	f6 01       	movw	r30, r12
   13dea:	23 80       	ldd	r2, Z+3	; 0x03
   13dec:	34 80       	ldd	r3, Z+4	; 0x04
   13dee:	45 80       	ldd	r4, Z+5	; 0x05
   13df0:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13df2:	ed b7       	in	r30, 0x3d	; 61
   13df4:	fe b7       	in	r31, 0x3e	; 62
   13df6:	26 82       	std	Z+6, r2	; 0x06
   13df8:	37 82       	std	Z+7, r3	; 0x07
   13dfa:	40 86       	std	Z+8, r4	; 0x08
   13dfc:	51 86       	std	Z+9, r5	; 0x09
   13dfe:	f5 01       	movw	r30, r10
   13e00:	82 81       	ldd	r24, Z+2	; 0x02
   13e02:	93 81       	ldd	r25, Z+3	; 0x03
   13e04:	ed b7       	in	r30, 0x3d	; 61
   13e06:	fe b7       	in	r31, 0x3e	; 62
   13e08:	95 83       	std	Z+5, r25	; 0x05
   13e0a:	84 83       	std	Z+4, r24	; 0x04
   13e0c:	ac 96       	adiw	r28, 0x2c	; 44
   13e0e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e10:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e12:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e14:	ac 97       	sbiw	r28, 0x2c	; 44
   13e16:	21 83       	std	Z+1, r18	; 0x01
   13e18:	32 83       	std	Z+2, r19	; 0x02
   13e1a:	43 83       	std	Z+3, r20	; 0x03
   13e1c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13e20:	6e 96       	adiw	r28, 0x1e	; 30
   13e22:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e24:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e26:	6e 97       	sbiw	r28, 0x1e	; 30
   13e28:	ed b7       	in	r30, 0x3d	; 61
   13e2a:	fe b7       	in	r31, 0x3e	; 62
   13e2c:	37 83       	std	Z+7, r19	; 0x07
   13e2e:	26 83       	std	Z+6, r18	; 0x06
   13e30:	af 96       	adiw	r28, 0x2f	; 47
   13e32:	8d ad       	ldd	r24, Y+61	; 0x3d
   13e34:	9e ad       	ldd	r25, Y+62	; 0x3e
   13e36:	af ad       	ldd	r26, Y+63	; 0x3f
   13e38:	af 97       	sbiw	r28, 0x2f	; 47
   13e3a:	83 83       	std	Z+3, r24	; 0x03
   13e3c:	94 83       	std	Z+4, r25	; 0x04
   13e3e:	a5 83       	std	Z+5, r26	; 0x05
   13e40:	2a e3       	ldi	r18, 0x3A	; 58
   13e42:	30 e0       	ldi	r19, 0x00	; 0
   13e44:	2c 0f       	add	r18, r28
   13e46:	3d 1f       	adc	r19, r29
   13e48:	32 83       	std	Z+2, r19	; 0x02
   13e4a:	21 83       	std	Z+1, r18	; 0x01
   13e4c:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e50:	f5 01       	movw	r30, r10
   13e52:	a2 80       	ldd	r10, Z+2	; 0x02
   13e54:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13e56:	c2 01       	movw	r24, r4
   13e58:	b1 01       	movw	r22, r2
   13e5a:	15 d2       	rcall	.+1066   	; 0x14286 <lif_dir_count>
   13e5c:	9b 01       	movw	r18, r22
   13e5e:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e60:	82 01       	movw	r16, r4
   13e62:	71 01       	movw	r14, r2
   13e64:	be 01       	movw	r22, r28
   13e66:	66 5c       	subi	r22, 0xC6	; 198
   13e68:	7f 4f       	sbci	r23, 0xFF	; 255
   13e6a:	c5 01       	movw	r24, r10
   13e6c:	0e 94 b8 db 	call	0x1b770	; 0x1b770 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13e70:	6c 96       	adiw	r28, 0x1c	; 28
   13e72:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e74:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e76:	6c 97       	sbiw	r28, 0x1c	; 28
   13e78:	2f 5f       	subi	r18, 0xFF	; 255
   13e7a:	3f 4f       	sbci	r19, 0xFF	; 255
   13e7c:	6c 96       	adiw	r28, 0x1c	; 28
   13e7e:	3f af       	std	Y+63, r19	; 0x3f
   13e80:	2e af       	std	Y+62, r18	; 0x3e
   13e82:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13e84:	6e 96       	adiw	r28, 0x1e	; 30
   13e86:	8e ad       	ldd	r24, Y+62	; 0x3e
   13e88:	9f ad       	ldd	r25, Y+63	; 0x3f
   13e8a:	6e 97       	sbiw	r28, 0x1e	; 30
   13e8c:	01 96       	adiw	r24, 0x01	; 1
   13e8e:	6e 96       	adiw	r28, 0x1e	; 30
   13e90:	9f af       	std	Y+63, r25	; 0x3f
   13e92:	8e af       	std	Y+62, r24	; 0x3e
   13e94:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e96:	f6 01       	movw	r30, r12
   13e98:	80 81       	ld	r24, Z
   13e9a:	81 30       	cpi	r24, 0x01	; 1
   13e9c:	09 f0       	breq	.+2      	; 0x13ea0 <format_drives+0x1b0>
   13e9e:	77 c0       	rjmp	.+238    	; 0x13f8e <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13ea0:	a7 a0       	ldd	r10, Z+39	; 0x27
   13ea2:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13ea4:	be 01       	movw	r22, r28
   13ea6:	66 5f       	subi	r22, 0xF6	; 246
   13ea8:	7f 4f       	sbci	r23, 0xFF	; 255
   13eaa:	f5 01       	movw	r30, r10
   13eac:	82 81       	ldd	r24, Z+2	; 0x02
   13eae:	93 81       	ldd	r25, Z+3	; 0x03
   13eb0:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <stat>
   13eb4:	01 96       	adiw	r24, 0x01	; 1
   13eb6:	09 f0       	breq	.+2      	; 0x13eba <format_drives+0x1ca>
   13eb8:	6a c0       	rjmp	.+212    	; 0x13f8e <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13eba:	f5 01       	movw	r30, r10
   13ebc:	86 81       	ldd	r24, Z+6	; 0x06
   13ebe:	97 81       	ldd	r25, Z+7	; 0x07
   13ec0:	81 15       	cp	r24, r1
   13ec2:	91 40       	sbci	r25, 0x01	; 1
   13ec4:	69 f0       	breq	.+26     	; 0x13ee0 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13ec6:	a9 96       	adiw	r28, 0x29	; 41
   13ec8:	2d ad       	ldd	r18, Y+61	; 0x3d
   13eca:	3e ad       	ldd	r19, Y+62	; 0x3e
   13ecc:	4f ad       	ldd	r20, Y+63	; 0x3f
   13ece:	a9 97       	sbiw	r28, 0x29	; 41
   13ed0:	ed b7       	in	r30, 0x3d	; 61
   13ed2:	fe b7       	in	r31, 0x3e	; 62
   13ed4:	21 83       	std	Z+1, r18	; 0x01
   13ed6:	32 83       	std	Z+2, r19	; 0x02
   13ed8:	43 83       	std	Z+3, r20	; 0x03
   13eda:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                    continue;
   13ede:	57 c0       	rjmp	.+174    	; 0x13f8e <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13ee0:	f6 01       	movw	r30, r12
   13ee2:	23 80       	ldd	r2, Z+3	; 0x03
   13ee4:	34 80       	ldd	r3, Z+4	; 0x04
   13ee6:	45 80       	ldd	r4, Z+5	; 0x05
   13ee8:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13eea:	ed b7       	in	r30, 0x3d	; 61
   13eec:	fe b7       	in	r31, 0x3e	; 62
   13eee:	26 82       	std	Z+6, r2	; 0x06
   13ef0:	37 82       	std	Z+7, r3	; 0x07
   13ef2:	40 86       	std	Z+8, r4	; 0x08
   13ef4:	51 86       	std	Z+9, r5	; 0x09
   13ef6:	f5 01       	movw	r30, r10
   13ef8:	82 81       	ldd	r24, Z+2	; 0x02
   13efa:	93 81       	ldd	r25, Z+3	; 0x03
   13efc:	ed b7       	in	r30, 0x3d	; 61
   13efe:	fe b7       	in	r31, 0x3e	; 62
   13f00:	95 83       	std	Z+5, r25	; 0x05
   13f02:	84 83       	std	Z+4, r24	; 0x04
   13f04:	a3 96       	adiw	r28, 0x23	; 35
   13f06:	2d ad       	ldd	r18, Y+61	; 0x3d
   13f08:	3e ad       	ldd	r19, Y+62	; 0x3e
   13f0a:	4f ad       	ldd	r20, Y+63	; 0x3f
   13f0c:	a3 97       	sbiw	r28, 0x23	; 35
   13f0e:	21 83       	std	Z+1, r18	; 0x01
   13f10:	32 83       	std	Z+2, r19	; 0x02
   13f12:	43 83       	std	Z+3, r20	; 0x03
   13f14:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13f18:	a0 96       	adiw	r28, 0x20	; 32
   13f1a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f1c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f1e:	a0 97       	sbiw	r28, 0x20	; 32
   13f20:	ed b7       	in	r30, 0x3d	; 61
   13f22:	fe b7       	in	r31, 0x3e	; 62
   13f24:	37 83       	std	Z+7, r19	; 0x07
   13f26:	26 83       	std	Z+6, r18	; 0x06
   13f28:	a6 96       	adiw	r28, 0x26	; 38
   13f2a:	8d ad       	ldd	r24, Y+61	; 0x3d
   13f2c:	9e ad       	ldd	r25, Y+62	; 0x3e
   13f2e:	af ad       	ldd	r26, Y+63	; 0x3f
   13f30:	a6 97       	sbiw	r28, 0x26	; 38
   13f32:	83 83       	std	Z+3, r24	; 0x03
   13f34:	94 83       	std	Z+4, r25	; 0x04
   13f36:	a5 83       	std	Z+5, r26	; 0x05
   13f38:	2a e3       	ldi	r18, 0x3A	; 58
   13f3a:	30 e0       	ldi	r19, 0x00	; 0
   13f3c:	2c 0f       	add	r18, r28
   13f3e:	3d 1f       	adc	r19, r29
   13f40:	32 83       	std	Z+2, r19	; 0x02
   13f42:	21 83       	std	Z+1, r18	; 0x01
   13f44:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f48:	f5 01       	movw	r30, r10
   13f4a:	a2 80       	ldd	r10, Z+2	; 0x02
   13f4c:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13f4e:	c2 01       	movw	r24, r4
   13f50:	b1 01       	movw	r22, r2
   13f52:	99 d1       	rcall	.+818    	; 0x14286 <lif_dir_count>
   13f54:	9b 01       	movw	r18, r22
   13f56:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f58:	82 01       	movw	r16, r4
   13f5a:	71 01       	movw	r14, r2
   13f5c:	be 01       	movw	r22, r28
   13f5e:	66 5c       	subi	r22, 0xC6	; 198
   13f60:	7f 4f       	sbci	r23, 0xFF	; 255
   13f62:	c5 01       	movw	r24, r10
   13f64:	0e 94 b8 db 	call	0x1b770	; 0x1b770 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13f68:	6c 96       	adiw	r28, 0x1c	; 28
   13f6a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f6c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f6e:	6c 97       	sbiw	r28, 0x1c	; 28
   13f70:	2f 5f       	subi	r18, 0xFF	; 255
   13f72:	3f 4f       	sbci	r19, 0xFF	; 255
   13f74:	6c 96       	adiw	r28, 0x1c	; 28
   13f76:	3f af       	std	Y+63, r19	; 0x3f
   13f78:	2e af       	std	Y+62, r18	; 0x3e
   13f7a:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13f7c:	a0 96       	adiw	r28, 0x20	; 32
   13f7e:	8e ad       	ldd	r24, Y+62	; 0x3e
   13f80:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f82:	a0 97       	sbiw	r28, 0x20	; 32
   13f84:	01 96       	adiw	r24, 0x01	; 1
   13f86:	a0 96       	adiw	r28, 0x20	; 32
   13f88:	9f af       	std	Y+63, r25	; 0x3f
   13f8a:	8e af       	std	Y+62, r24	; 0x3e
   13f8c:	a0 97       	sbiw	r28, 0x20	; 32
   13f8e:	9b e2       	ldi	r25, 0x2B	; 43
   13f90:	c9 0e       	add	r12, r25
   13f92:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13f94:	af ef       	ldi	r26, 0xFF	; 255
   13f96:	ca 16       	cp	r12, r26
   13f98:	a1 e2       	ldi	r26, 0x21	; 33
   13f9a:	da 06       	cpc	r13, r26
   13f9c:	09 f0       	breq	.+2      	; 0x13fa0 <format_drives+0x2b0>
   13f9e:	03 cf       	rjmp	.-506    	; 0x13da6 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13fa0:	6c 96       	adiw	r28, 0x1c	; 28
   13fa2:	ee ad       	ldd	r30, Y+62	; 0x3e
   13fa4:	ff ad       	ldd	r31, Y+63	; 0x3f
   13fa6:	6c 97       	sbiw	r28, 0x1c	; 28
   13fa8:	ef 2b       	or	r30, r31
   13faa:	11 f0       	breq	.+4      	; 0x13fb0 <format_drives+0x2c0>
        sep();
   13fac:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
}
   13fb0:	c2 59       	subi	r28, 0x92	; 146
   13fb2:	df 4f       	sbci	r29, 0xFF	; 255
   13fb4:	0f b6       	in	r0, 0x3f	; 63
   13fb6:	f8 94       	cli
   13fb8:	de bf       	out	0x3e, r29	; 62
   13fba:	0f be       	out	0x3f, r0	; 63
   13fbc:	cd bf       	out	0x3d, r28	; 61
   13fbe:	df 91       	pop	r29
   13fc0:	cf 91       	pop	r28
   13fc2:	1f 91       	pop	r17
   13fc4:	0f 91       	pop	r16
   13fc6:	ff 90       	pop	r15
   13fc8:	ef 90       	pop	r14
   13fca:	df 90       	pop	r13
   13fcc:	cf 90       	pop	r12
   13fce:	bf 90       	pop	r11
   13fd0:	af 90       	pop	r10
   13fd2:	8f 90       	pop	r8
   13fd4:	7f 90       	pop	r7
   13fd6:	6f 90       	pop	r6
   13fd8:	5f 90       	pop	r5
   13fda:	4f 90       	pop	r4
   13fdc:	3f 90       	pop	r3
   13fde:	2f 90       	pop	r2
   13fe0:	08 95       	ret

00013fe2 <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13fe2:	2f 92       	push	r2
   13fe4:	3f 92       	push	r3
   13fe6:	4f 92       	push	r4
   13fe8:	6f 92       	push	r6
   13fea:	7f 92       	push	r7
   13fec:	8f 92       	push	r8
   13fee:	cf 92       	push	r12
   13ff0:	df 92       	push	r13
   13ff2:	ef 92       	push	r14
   13ff4:	0f 93       	push	r16
   13ff6:	1f 93       	push	r17
   13ff8:	cf 93       	push	r28
   13ffa:	df 93       	push	r29
   13ffc:	ad b7       	in	r26, 0x3d	; 61
   13ffe:	be b7       	in	r27, 0x3e	; 62
   14000:	19 97       	sbiw	r26, 0x09	; 9
   14002:	0f b6       	in	r0, 0x3f	; 63
   14004:	f8 94       	cli
   14006:	be bf       	out	0x3e, r27	; 62
   14008:	0f be       	out	0x3f, r0	; 63
   1400a:	ad bf       	out	0x3d, r26	; 61
   1400c:	cb ef       	ldi	r28, 0xFB	; 251
   1400e:	df e1       	ldi	r29, 0x1F	; 31
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   14010:	0c e8       	ldi	r16, 0x8C	; 140
   14012:	1e e0       	ldi	r17, 0x0E	; 14
   14014:	8e ec       	ldi	r24, 0xCE	; 206
   14016:	96 e1       	ldi	r25, 0x16	; 22
   14018:	6c 01       	movw	r12, r24
   1401a:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   1401c:	8f ed       	ldi	r24, 0xDF	; 223
   1401e:	96 e1       	ldi	r25, 0x16	; 22
   14020:	3c 01       	movw	r6, r24
   14022:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   14024:	83 ef       	ldi	r24, 0xF3	; 243
   14026:	96 e1       	ldi	r25, 0x16	; 22
   14028:	1c 01       	movw	r2, r24
   1402a:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1402c:	88 81       	ld	r24, Y
   1402e:	88 23       	and	r24, r24
   14030:	09 f4       	brne	.+2      	; 0x14034 <display_mounts+0x52>
   14032:	43 c0       	rjmp	.+134    	; 0x140ba <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14034:	83 30       	cpi	r24, 0x03	; 3
   14036:	b1 f4       	brne	.+44     	; 0x14064 <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14038:	af a1       	ldd	r26, Y+39	; 0x27
   1403a:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   1403c:	fd 01       	movw	r30, r26
   1403e:	82 81       	ldd	r24, Z+2	; 0x02
   14040:	93 81       	ldd	r25, Z+3	; 0x03
   14042:	ed b7       	in	r30, 0x3d	; 61
   14044:	fe b7       	in	r31, 0x3e	; 62
   14046:	91 87       	std	Z+9, r25	; 0x09
   14048:	80 87       	std	Z+8, r24	; 0x08
   1404a:	8c 91       	ld	r24, X
   1404c:	90 e0       	ldi	r25, 0x00	; 0
   1404e:	97 83       	std	Z+7, r25	; 0x07
   14050:	86 83       	std	Z+6, r24	; 0x06
   14052:	ce 01       	movw	r24, r28
   14054:	07 96       	adiw	r24, 0x07	; 7
   14056:	95 83       	std	Z+5, r25	; 0x05
   14058:	84 83       	std	Z+4, r24	; 0x04
   1405a:	21 82       	std	Z+1, r2	; 0x01
   1405c:	32 82       	std	Z+2, r3	; 0x02
   1405e:	43 82       	std	Z+3, r4	; 0x03
   14060:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14064:	88 81       	ld	r24, Y
   14066:	81 30       	cpi	r24, 0x01	; 1
   14068:	b1 f4       	brne	.+44     	; 0x14096 <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   1406a:	af a1       	ldd	r26, Y+39	; 0x27
   1406c:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   1406e:	fd 01       	movw	r30, r26
   14070:	82 81       	ldd	r24, Z+2	; 0x02
   14072:	93 81       	ldd	r25, Z+3	; 0x03
   14074:	ed b7       	in	r30, 0x3d	; 61
   14076:	fe b7       	in	r31, 0x3e	; 62
   14078:	91 87       	std	Z+9, r25	; 0x09
   1407a:	80 87       	std	Z+8, r24	; 0x08
   1407c:	8c 91       	ld	r24, X
   1407e:	90 e0       	ldi	r25, 0x00	; 0
   14080:	97 83       	std	Z+7, r25	; 0x07
   14082:	86 83       	std	Z+6, r24	; 0x06
   14084:	ce 01       	movw	r24, r28
   14086:	07 96       	adiw	r24, 0x07	; 7
   14088:	95 83       	std	Z+5, r25	; 0x05
   1408a:	84 83       	std	Z+4, r24	; 0x04
   1408c:	61 82       	std	Z+1, r6	; 0x01
   1408e:	72 82       	std	Z+2, r7	; 0x02
   14090:	83 82       	std	Z+3, r8	; 0x03
   14092:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14096:	88 81       	ld	r24, Y
   14098:	84 30       	cpi	r24, 0x04	; 4
   1409a:	79 f4       	brne	.+30     	; 0x140ba <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   1409c:	ef a1       	ldd	r30, Y+39	; 0x27
   1409e:	f8 a5       	ldd	r31, Y+40	; 0x28
   140a0:	80 81       	ld	r24, Z
   140a2:	90 e0       	ldi	r25, 0x00	; 0
   140a4:	ed b7       	in	r30, 0x3d	; 61
   140a6:	fe b7       	in	r31, 0x3e	; 62
   140a8:	97 83       	std	Z+7, r25	; 0x07
   140aa:	86 83       	std	Z+6, r24	; 0x06
   140ac:	15 83       	std	Z+5, r17	; 0x05
   140ae:	04 83       	std	Z+4, r16	; 0x04
   140b0:	c1 82       	std	Z+1, r12	; 0x01
   140b2:	d2 82       	std	Z+2, r13	; 0x02
   140b4:	e3 82       	std	Z+3, r14	; 0x03
   140b6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   140ba:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   140bc:	f1 e2       	ldi	r31, 0x21	; 33
   140be:	cf 3f       	cpi	r28, 0xFF	; 255
   140c0:	df 07       	cpc	r29, r31
   140c2:	09 f0       	breq	.+2      	; 0x140c6 <display_mounts+0xe4>
   140c4:	b3 cf       	rjmp	.-154    	; 0x1402c <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   140c6:	8c ec       	ldi	r24, 0xCC	; 204
   140c8:	96 e1       	ldi	r25, 0x16	; 22
   140ca:	a0 e0       	ldi	r26, 0x00	; 0
   140cc:	ed b7       	in	r30, 0x3d	; 61
   140ce:	fe b7       	in	r31, 0x3e	; 62
   140d0:	81 83       	std	Z+1, r24	; 0x01
   140d2:	92 83       	std	Z+2, r25	; 0x02
   140d4:	a3 83       	std	Z+3, r26	; 0x03
   140d6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
   140da:	ad b7       	in	r26, 0x3d	; 61
   140dc:	be b7       	in	r27, 0x3e	; 62
   140de:	19 96       	adiw	r26, 0x09	; 9
   140e0:	0f b6       	in	r0, 0x3f	; 63
   140e2:	f8 94       	cli
   140e4:	be bf       	out	0x3e, r27	; 62
   140e6:	0f be       	out	0x3f, r0	; 63
   140e8:	ad bf       	out	0x3d, r26	; 61
   140ea:	df 91       	pop	r29
   140ec:	cf 91       	pop	r28
   140ee:	1f 91       	pop	r17
   140f0:	0f 91       	pop	r16
   140f2:	ef 90       	pop	r14
   140f4:	df 90       	pop	r13
   140f6:	cf 90       	pop	r12
   140f8:	8f 90       	pop	r8
   140fa:	7f 90       	pop	r7
   140fc:	6f 90       	pop	r6
   140fe:	4f 90       	pop	r4
   14100:	3f 90       	pop	r3
   14102:	2f 90       	pop	r2
   14104:	08 95       	ret

00014106 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   14106:	af 92       	push	r10
   14108:	bf 92       	push	r11
   1410a:	cf 92       	push	r12
   1410c:	df 92       	push	r13
   1410e:	ef 92       	push	r14
   14110:	0f 93       	push	r16
   14112:	1f 93       	push	r17
   14114:	cf 93       	push	r28
   14116:	df 93       	push	r29
   14118:	ad b7       	in	r26, 0x3d	; 61
   1411a:	be b7       	in	r27, 0x3e	; 62
   1411c:	17 97       	sbiw	r26, 0x07	; 7
   1411e:	0f b6       	in	r0, 0x3f	; 63
   14120:	f8 94       	cli
   14122:	be bf       	out	0x3e, r27	; 62
   14124:	0f be       	out	0x3f, r0	; 63
   14126:	ad bf       	out	0x3d, r26	; 61
   14128:	5c 01       	movw	r10, r24
   1412a:	8b 01       	movw	r16, r22
   1412c:	0e 5f       	subi	r16, 0xFE	; 254
   1412e:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   14130:	c1 e0       	ldi	r28, 0x01	; 1
   14132:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   14134:	87 e0       	ldi	r24, 0x07	; 7
   14136:	97 e1       	ldi	r25, 0x17	; 23
   14138:	6c 01       	movw	r12, r24
   1413a:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   1413c:	ca 15       	cp	r28, r10
   1413e:	db 05       	cpc	r29, r11
   14140:	8c f4       	brge	.+34     	; 0x14164 <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   14142:	f8 01       	movw	r30, r16
   14144:	81 91       	ld	r24, Z+
   14146:	91 91       	ld	r25, Z+
   14148:	8f 01       	movw	r16, r30
   1414a:	ed b7       	in	r30, 0x3d	; 61
   1414c:	fe b7       	in	r31, 0x3e	; 62
   1414e:	97 83       	std	Z+7, r25	; 0x07
   14150:	86 83       	std	Z+6, r24	; 0x06
   14152:	d5 83       	std	Z+5, r29	; 0x05
   14154:	c4 83       	std	Z+4, r28	; 0x04
   14156:	c1 82       	std	Z+1, r12	; 0x01
   14158:	d2 82       	std	Z+2, r13	; 0x02
   1415a:	e3 82       	std	Z+3, r14	; 0x03
   1415c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   14160:	21 96       	adiw	r28, 0x01	; 1
   14162:	ec cf       	rjmp	.-40     	; 0x1413c <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   14164:	3e df       	rcall	.-388    	; 0x13fe2 <display_mounts>
}
   14166:	ad b7       	in	r26, 0x3d	; 61
   14168:	be b7       	in	r27, 0x3e	; 62
   1416a:	17 96       	adiw	r26, 0x07	; 7
   1416c:	0f b6       	in	r0, 0x3f	; 63
   1416e:	f8 94       	cli
   14170:	be bf       	out	0x3e, r27	; 62
   14172:	0f be       	out	0x3f, r0	; 63
   14174:	ad bf       	out	0x3d, r26	; 61
   14176:	df 91       	pop	r29
   14178:	cf 91       	pop	r28
   1417a:	1f 91       	pop	r17
   1417c:	0f 91       	pop	r16
   1417e:	ef 90       	pop	r14
   14180:	df 90       	pop	r13
   14182:	cf 90       	pop	r12
   14184:	bf 90       	pop	r11
   14186:	af 90       	pop	r10
   14188:	08 95       	ret

0001418a <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   1418a:	8f e1       	ldi	r24, 0x1F	; 31
   1418c:	ef ef       	ldi	r30, 0xFF	; 255
   1418e:	f1 e2       	ldi	r31, 0x21	; 33
   14190:	df 01       	movw	r26, r30
   14192:	98 2f       	mov	r25, r24
   14194:	1d 92       	st	X+, r1
   14196:	9a 95       	dec	r25
   14198:	e9 f7       	brne	.-6      	; 0x14194 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   1419a:	9f e3       	ldi	r25, 0x3F	; 63
   1419c:	ef e1       	ldi	r30, 0x1F	; 31
   1419e:	f2 e2       	ldi	r31, 0x22	; 34
   141a0:	df 01       	movw	r26, r30
   141a2:	1d 92       	st	X+, r1
   141a4:	9a 95       	dec	r25
   141a6:	e9 f7       	brne	.-6      	; 0x141a2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   141a8:	ef e5       	ldi	r30, 0x5F	; 95
   141aa:	f2 e2       	ldi	r31, 0x22	; 34
   141ac:	df 01       	movw	r26, r30
   141ae:	1d 92       	st	X+, r1
   141b0:	8a 95       	dec	r24
   141b2:	e9 f7       	brne	.-6      	; 0x141ae <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   141b4:	10 92 7f 22 	sts	0x227F, r1	; 0x80227f <hpdir+0x80>
   141b8:	10 92 80 22 	sts	0x2280, r1	; 0x802280 <hpdir+0x81>
   141bc:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <hpdir+0x82>
   141c0:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   141c4:	10 92 83 22 	sts	0x2283, r1	; 0x802283 <hpdir+0x84>
   141c8:	10 92 84 22 	sts	0x2284, r1	; 0x802284 <hpdir+0x85>
   141cc:	10 92 85 22 	sts	0x2285, r1	; 0x802285 <hpdir+0x86>
   141d0:	10 92 86 22 	sts	0x2286, r1	; 0x802286 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   141d4:	10 92 87 22 	sts	0x2287, r1	; 0x802287 <hpdir+0x88>
   141d8:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <hpdir+0x89>
   141dc:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <hpdir+0x8a>
   141e0:	10 92 8a 22 	sts	0x228A, r1	; 0x80228a <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   141e4:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <hpdir+0x8c>
   141e8:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <hpdir+0x8d>
   141ec:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <hpdir+0x8e>
   141f0:	10 92 8e 22 	sts	0x228E, r1	; 0x80228e <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   141f4:	81 e0       	ldi	r24, 0x01	; 1
   141f6:	90 e8       	ldi	r25, 0x80	; 128
   141f8:	a0 e0       	ldi	r26, 0x00	; 0
   141fa:	b0 e0       	ldi	r27, 0x00	; 0
   141fc:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <hpdir+0x90>
   14200:	90 93 90 22 	sts	0x2290, r25	; 0x802290 <hpdir+0x91>
   14204:	a0 93 91 22 	sts	0x2291, r26	; 0x802291 <hpdir+0x92>
   14208:	b0 93 92 22 	sts	0x2292, r27	; 0x802292 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1420c:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <hpdir+0x94>
   14210:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <hpdir+0x95>
   14214:	10 92 95 22 	sts	0x2295, r1	; 0x802295 <hpdir+0x96>
   14218:	10 92 96 22 	sts	0x2296, r1	; 0x802296 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1421c:	10 92 97 22 	sts	0x2297, r1	; 0x802297 <hpdir+0x98>
   14220:	10 92 98 22 	sts	0x2298, r1	; 0x802298 <hpdir+0x99>
   14224:	10 92 99 22 	sts	0x2299, r1	; 0x802299 <hpdir+0x9a>
   14228:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1422c:	10 92 9b 22 	sts	0x229B, r1	; 0x80229b <hpdir+0x9c>
   14230:	10 92 9c 22 	sts	0x229C, r1	; 0x80229c <hpdir+0x9d>
   14234:	10 92 9d 22 	sts	0x229D, r1	; 0x80229d <hpdir+0x9e>
   14238:	10 92 9e 22 	sts	0x229E, r1	; 0x80229e <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1423c:	10 92 9f 22 	sts	0x229F, r1	; 0x80229f <hpdir+0xa0>
   14240:	10 92 a0 22 	sts	0x22A0, r1	; 0x8022a0 <hpdir+0xa1>
   14244:	10 92 a1 22 	sts	0x22A1, r1	; 0x8022a1 <hpdir+0xa2>
   14248:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1424c:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <hpdir+0xa4>
   14250:	10 92 a4 22 	sts	0x22A4, r1	; 0x8022a4 <hpdir+0xa5>
   14254:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <hpdir+0xa6>
   14258:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1425c:	81 e0       	ldi	r24, 0x01	; 1
   1425e:	90 e0       	ldi	r25, 0x00	; 0
   14260:	a0 e0       	ldi	r26, 0x00	; 0
   14262:	b0 e0       	ldi	r27, 0x00	; 0
   14264:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <hpdir+0xa8>
   14268:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <hpdir+0xa9>
   1426c:	a0 93 a9 22 	sts	0x22A9, r26	; 0x8022a9 <hpdir+0xaa>
   14270:	b0 93 aa 22 	sts	0x22AA, r27	; 0x8022aa <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14274:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <hpdir+0xac>
   14278:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <hpdir+0xad>
   1427c:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <hpdir+0xae>
   14280:	10 92 ae 22 	sts	0x22AE, r1	; 0x8022ae <hpdir+0xaf>
   14284:	08 95       	ret

00014286 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14286:	20 e0       	ldi	r18, 0x00	; 0
   14288:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   1428a:	61 15       	cp	r22, r1
   1428c:	71 05       	cpc	r23, r1
   1428e:	81 05       	cpc	r24, r1
   14290:	91 05       	cpc	r25, r1
   14292:	39 f0       	breq	.+14     	; 0x142a2 <lif_dir_count+0x1c>
    {
        scale++;
   14294:	2f 5f       	subi	r18, 0xFF	; 255
   14296:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   14298:	95 95       	asr	r25
   1429a:	87 95       	ror	r24
   1429c:	77 95       	ror	r23
   1429e:	67 95       	ror	r22
   142a0:	f4 cf       	rjmp	.-24     	; 0x1428a <lif_dir_count+0x4>
    }
    scale>>=1;
   142a2:	35 95       	asr	r19
   142a4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   142a6:	61 e0       	ldi	r22, 0x01	; 1
   142a8:	70 e0       	ldi	r23, 0x00	; 0
   142aa:	80 e0       	ldi	r24, 0x00	; 0
   142ac:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   142ae:	21 50       	subi	r18, 0x01	; 1
   142b0:	31 09       	sbc	r19, r1
   142b2:	28 f0       	brcs	.+10     	; 0x142be <lif_dir_count+0x38>
        num <<=1;
   142b4:	66 0f       	add	r22, r22
   142b6:	77 1f       	adc	r23, r23
   142b8:	88 1f       	adc	r24, r24
   142ba:	99 1f       	adc	r25, r25
   142bc:	f8 cf       	rjmp	.-16     	; 0x142ae <lif_dir_count+0x28>
    return(num);
}
   142be:	08 95       	ret

000142c0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   142c0:	2f 92       	push	r2
   142c2:	3f 92       	push	r3
   142c4:	4f 92       	push	r4
   142c6:	5f 92       	push	r5
   142c8:	6f 92       	push	r6
   142ca:	8f 92       	push	r8
   142cc:	9f 92       	push	r9
   142ce:	af 92       	push	r10
   142d0:	bf 92       	push	r11
   142d2:	cf 92       	push	r12
   142d4:	df 92       	push	r13
   142d6:	ef 92       	push	r14
   142d8:	ff 92       	push	r15
   142da:	0f 93       	push	r16
   142dc:	1f 93       	push	r17
   142de:	cf 93       	push	r28
   142e0:	df 93       	push	r29
   142e2:	cd b7       	in	r28, 0x3d	; 61
   142e4:	de b7       	in	r29, 0x3e	; 62
   142e6:	c9 58       	subi	r28, 0x89	; 137
   142e8:	d1 40       	sbci	r29, 0x01	; 1
   142ea:	0f b6       	in	r0, 0x3f	; 63
   142ec:	f8 94       	cli
   142ee:	de bf       	out	0x3e, r29	; 62
   142f0:	0f be       	out	0x3f, r0	; 63
   142f2:	cd bf       	out	0x3d, r28	; 61
   142f4:	6c 01       	movw	r12, r24
   142f6:	c8 57       	subi	r28, 0x78	; 120
   142f8:	de 4f       	sbci	r29, 0xFE	; 254
   142fa:	79 83       	std	Y+1, r23	; 0x01
   142fc:	68 83       	st	Y, r22
   142fe:	c8 58       	subi	r28, 0x88	; 136
   14300:	d1 40       	sbci	r29, 0x01	; 1
   14302:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14304:	42 df       	rcall	.-380    	; 0x1418a <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14306:	6e ef       	ldi	r22, 0xFE	; 254
   14308:	78 e0       	ldi	r23, 0x08	; 8
   1430a:	83 e6       	ldi	r24, 0x63	; 99
   1430c:	90 e1       	ldi	r25, 0x10	; 16
   1430e:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   14312:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14314:	89 2b       	or	r24, r25
   14316:	49 f4       	brne	.+18     	; 0x1432a <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14318:	6e ef       	ldi	r22, 0xFE	; 254
   1431a:	78 e0       	ldi	r23, 0x08	; 8
   1431c:	82 e6       	ldi	r24, 0x62	; 98
   1431e:	90 e1       	ldi	r25, 0x10	; 16
   14320:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   14324:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14326:	89 2b       	or	r24, r25
   14328:	51 f0       	breq	.+20     	; 0x1433e <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1432a:	21 2c       	mov	r2, r1
   1432c:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1432e:	8e 01       	movw	r16, r28
   14330:	08 5f       	subi	r16, 0xF8	; 248
   14332:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14334:	84 ec       	ldi	r24, 0xC4	; 196
   14336:	9d e1       	ldi	r25, 0x1D	; 29
   14338:	2c 01       	movw	r4, r24
   1433a:	61 2c       	mov	r6, r1
   1433c:	1e c0       	rjmp	.+60     	; 0x1437a <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1433e:	ab 28       	or	r10, r11
   14340:	09 f4       	brne	.+2      	; 0x14344 <hpdir_find_drive+0x84>
   14342:	69 c1       	rjmp	.+722    	; 0x14616 <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14344:	8b ec       	ldi	r24, 0xCB	; 203
   14346:	9d e1       	ldi	r25, 0x1D	; 29
   14348:	a0 e0       	ldi	r26, 0x00	; 0
   1434a:	ed b7       	in	r30, 0x3d	; 61
   1434c:	fe b7       	in	r31, 0x3e	; 62
   1434e:	81 83       	std	Z+1, r24	; 0x01
   14350:	92 83       	std	Z+2, r25	; 0x02
   14352:	a3 83       	std	Z+3, r26	; 0x03
   14354:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14358:	5e c1       	rjmp	.+700    	; 0x14616 <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1435a:	ce 01       	movw	r24, r28
   1435c:	08 96       	adiw	r24, 0x08	; 8
   1435e:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>
        ptr = skipspaces(ptr);
   14362:	ce 01       	movw	r24, r28
   14364:	08 96       	adiw	r24, 0x08	; 8
   14366:	0e 94 47 30 	call	0x608e	; 0x608e <skipspaces>

        len = strlen(ptr);
   1436a:	fc 01       	movw	r30, r24
   1436c:	01 90       	ld	r0, Z+
   1436e:	00 20       	and	r0, r0
   14370:	e9 f7       	brne	.-6      	; 0x1436c <hpdir_find_drive+0xac>
   14372:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14374:	8e 17       	cp	r24, r30
   14376:	9f 07       	cpc	r25, r31
   14378:	51 f4       	brne	.+20     	; 0x1438e <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1437a:	a7 01       	movw	r20, r14
   1437c:	6e ef       	ldi	r22, 0xFE	; 254
   1437e:	70 e0       	ldi	r23, 0x00	; 0
   14380:	ce 01       	movw	r24, r28
   14382:	08 96       	adiw	r24, 0x08	; 8
   14384:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
   14388:	89 2b       	or	r24, r25
   1438a:	39 f7       	brne	.-50     	; 0x1435a <hpdir_find_drive+0x9a>
   1438c:	0c c0       	rjmp	.+24     	; 0x143a6 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   1438e:	fc 01       	movw	r30, r24
   14390:	20 81       	ld	r18, Z
   14392:	2b 33       	cpi	r18, 0x3B	; 59
   14394:	91 f3       	breq	.-28     	; 0x1437a <hpdir_find_drive+0xba>
   14396:	23 32       	cpi	r18, 0x23	; 35
   14398:	81 f3       	breq	.-32     	; 0x1437a <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   1439a:	2b 35       	cpi	r18, 0x5B	; 91
   1439c:	31 f4       	brne	.+12     	; 0x143aa <hpdir_find_drive+0xea>
   1439e:	f1 e0       	ldi	r31, 0x01	; 1
   143a0:	2f 16       	cp	r2, r31
   143a2:	31 04       	cpc	r3, r1
   143a4:	11 f4       	brne	.+4      	; 0x143aa <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   143a6:	00 e0       	ldi	r16, 0x00	; 0
   143a8:	30 c1       	rjmp	.+608    	; 0x1460a <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   143aa:	4e e7       	ldi	r20, 0x7E	; 126
   143ac:	50 e0       	ldi	r21, 0x00	; 0
   143ae:	b8 01       	movw	r22, r16
   143b0:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   143b4:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   143b6:	6d e6       	ldi	r22, 0x6D	; 109
   143b8:	70 e1       	ldi	r23, 0x10	; 16
   143ba:	c8 01       	movw	r24, r16
   143bc:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   143c0:	89 2b       	or	r24, r25
   143c2:	21 f0       	breq	.+8      	; 0x143cc <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   143c4:	22 24       	eor	r2, r2
   143c6:	23 94       	inc	r2
   143c8:	31 2c       	mov	r3, r1
   143ca:	d7 cf       	rjmp	.-82     	; 0x1437a <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   143cc:	21 e0       	ldi	r18, 0x01	; 1
   143ce:	22 16       	cp	r2, r18
   143d0:	31 04       	cpc	r3, r1
   143d2:	99 f6       	brne	.-90     	; 0x1437a <hpdir_find_drive+0xba>
            continue;

        if(list)
   143d4:	c8 57       	subi	r28, 0x78	; 120
   143d6:	de 4f       	sbci	r29, 0xFE	; 254
   143d8:	88 81       	ld	r24, Y
   143da:	99 81       	ldd	r25, Y+1	; 0x01
   143dc:	c8 58       	subi	r28, 0x88	; 136
   143de:	d1 40       	sbci	r29, 0x01	; 1
   143e0:	89 2b       	or	r24, r25
   143e2:	61 f0       	breq	.+24     	; 0x143fc <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   143e4:	ed b7       	in	r30, 0x3d	; 61
   143e6:	fe b7       	in	r31, 0x3e	; 62
   143e8:	97 82       	std	Z+7, r9	; 0x07
   143ea:	86 82       	std	Z+6, r8	; 0x06
   143ec:	15 83       	std	Z+5, r17	; 0x05
   143ee:	04 83       	std	Z+4, r16	; 0x04
   143f0:	41 82       	std	Z+1, r4	; 0x01
   143f2:	52 82       	std	Z+2, r5	; 0x02
   143f4:	63 82       	std	Z+3, r6	; 0x03
   143f6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            continue;
   143fa:	bf cf       	rjmp	.-130    	; 0x1437a <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   143fc:	b8 01       	movw	r22, r16
   143fe:	c6 01       	movw	r24, r12
   14400:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   14404:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14406:	f1 f2       	breq	.-68     	; 0x143c4 <hpdir_find_drive+0x104>
   14408:	c0 de       	rcall	.-640    	; 0x1418a <hpdir_init>

        if(verbose)
   1440a:	ab 28       	or	r10, r11
   1440c:	61 f0       	breq	.+24     	; 0x14426 <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   1440e:	ed b7       	in	r30, 0x3d	; 61
   14410:	fe b7       	in	r31, 0x3e	; 62
   14412:	d5 82       	std	Z+5, r13	; 0x05
   14414:	c4 82       	std	Z+4, r12	; 0x04
   14416:	83 eb       	ldi	r24, 0xB3	; 179
   14418:	9d e1       	ldi	r25, 0x1D	; 29
   1441a:	a0 e0       	ldi	r26, 0x00	; 0
   1441c:	81 83       	std	Z+1, r24	; 0x01
   1441e:	92 83       	std	Z+2, r25	; 0x02
   14420:	a3 83       	std	Z+3, r26	; 0x03
   14422:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14426:	4e e1       	ldi	r20, 0x1E	; 30
   14428:	50 e0       	ldi	r21, 0x00	; 0
   1442a:	b8 01       	movw	r22, r16
   1442c:	8f ef       	ldi	r24, 0xFF	; 255
   1442e:	91 e2       	ldi	r25, 0x21	; 33
   14430:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14434:	4e e7       	ldi	r20, 0x7E	; 126
   14436:	50 e0       	ldi	r21, 0x00	; 0
   14438:	b8 01       	movw	r22, r16
   1443a:	c4 01       	movw	r24, r8
   1443c:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14440:	4e e3       	ldi	r20, 0x3E	; 62
   14442:	50 e0       	ldi	r21, 0x00	; 0
   14444:	6f e1       	ldi	r22, 0x1F	; 31
   14446:	72 e2       	ldi	r23, 0x22	; 34
   14448:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1444c:	4e e1       	ldi	r20, 0x1E	; 30
   1444e:	50 e0       	ldi	r21, 0x00	; 0
   14450:	6f e5       	ldi	r22, 0x5F	; 95
   14452:	72 e2       	ldi	r23, 0x22	; 34
   14454:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14458:	4e e7       	ldi	r20, 0x7E	; 126
   1445a:	50 e0       	ldi	r21, 0x00	; 0
   1445c:	b8 01       	movw	r22, r16
   1445e:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   14462:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   14464:	c8 01       	movw	r24, r16
   14466:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   1446a:	60 93 7f 22 	sts	0x227F, r22	; 0x80227f <hpdir+0x80>
   1446e:	70 93 80 22 	sts	0x2280, r23	; 0x802280 <hpdir+0x81>
   14472:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <hpdir+0x82>
   14476:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1447a:	4e e7       	ldi	r20, 0x7E	; 126
   1447c:	50 e0       	ldi	r21, 0x00	; 0
   1447e:	b8 01       	movw	r22, r16
   14480:	c6 01       	movw	r24, r12
   14482:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   14486:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   14488:	c8 01       	movw	r24, r16
   1448a:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   1448e:	60 93 83 22 	sts	0x2283, r22	; 0x802283 <hpdir+0x84>
   14492:	70 93 84 22 	sts	0x2284, r23	; 0x802284 <hpdir+0x85>
   14496:	80 93 85 22 	sts	0x2285, r24	; 0x802285 <hpdir+0x86>
   1449a:	90 93 86 22 	sts	0x2286, r25	; 0x802286 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1449e:	4e e7       	ldi	r20, 0x7E	; 126
   144a0:	50 e0       	ldi	r21, 0x00	; 0
   144a2:	b8 01       	movw	r22, r16
   144a4:	c6 01       	movw	r24, r12
   144a6:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   144aa:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   144ac:	c8 01       	movw	r24, r16
   144ae:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   144b2:	60 93 87 22 	sts	0x2287, r22	; 0x802287 <hpdir+0x88>
   144b6:	70 93 88 22 	sts	0x2288, r23	; 0x802288 <hpdir+0x89>
   144ba:	80 93 89 22 	sts	0x2289, r24	; 0x802289 <hpdir+0x8a>
   144be:	90 93 8a 22 	sts	0x228A, r25	; 0x80228a <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144c2:	4e e7       	ldi	r20, 0x7E	; 126
   144c4:	50 e0       	ldi	r21, 0x00	; 0
   144c6:	b8 01       	movw	r22, r16
   144c8:	c6 01       	movw	r24, r12
   144ca:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   144ce:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   144d0:	c8 01       	movw	r24, r16
   144d2:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   144d6:	60 93 8b 22 	sts	0x228B, r22	; 0x80228b <hpdir+0x8c>
   144da:	70 93 8c 22 	sts	0x228C, r23	; 0x80228c <hpdir+0x8d>
   144de:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <hpdir+0x8e>
   144e2:	90 93 8e 22 	sts	0x228E, r25	; 0x80228e <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144e6:	4e e7       	ldi	r20, 0x7E	; 126
   144e8:	50 e0       	ldi	r21, 0x00	; 0
   144ea:	b8 01       	movw	r22, r16
   144ec:	c6 01       	movw	r24, r12
   144ee:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   144f2:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   144f4:	c8 01       	movw	r24, r16
   144f6:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   144fa:	60 93 8f 22 	sts	0x228F, r22	; 0x80228f <hpdir+0x90>
   144fe:	70 93 90 22 	sts	0x2290, r23	; 0x802290 <hpdir+0x91>
   14502:	80 93 91 22 	sts	0x2291, r24	; 0x802291 <hpdir+0x92>
   14506:	90 93 92 22 	sts	0x2292, r25	; 0x802292 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1450a:	4e e7       	ldi	r20, 0x7E	; 126
   1450c:	50 e0       	ldi	r21, 0x00	; 0
   1450e:	b8 01       	movw	r22, r16
   14510:	c6 01       	movw	r24, r12
   14512:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   14516:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   14518:	c8 01       	movw	r24, r16
   1451a:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   1451e:	60 93 93 22 	sts	0x2293, r22	; 0x802293 <hpdir+0x94>
   14522:	70 93 94 22 	sts	0x2294, r23	; 0x802294 <hpdir+0x95>
   14526:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <hpdir+0x96>
   1452a:	90 93 96 22 	sts	0x2296, r25	; 0x802296 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1452e:	4e e7       	ldi	r20, 0x7E	; 126
   14530:	50 e0       	ldi	r21, 0x00	; 0
   14532:	b8 01       	movw	r22, r16
   14534:	c6 01       	movw	r24, r12
   14536:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   1453a:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   1453c:	c8 01       	movw	r24, r16
   1453e:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   14542:	60 93 97 22 	sts	0x2297, r22	; 0x802297 <hpdir+0x98>
   14546:	70 93 98 22 	sts	0x2298, r23	; 0x802298 <hpdir+0x99>
   1454a:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <hpdir+0x9a>
   1454e:	90 93 9a 22 	sts	0x229A, r25	; 0x80229a <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14552:	4e e7       	ldi	r20, 0x7E	; 126
   14554:	50 e0       	ldi	r21, 0x00	; 0
   14556:	b8 01       	movw	r22, r16
   14558:	c6 01       	movw	r24, r12
   1455a:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   1455e:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   14560:	c8 01       	movw	r24, r16
   14562:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   14566:	60 93 9b 22 	sts	0x229B, r22	; 0x80229b <hpdir+0x9c>
   1456a:	70 93 9c 22 	sts	0x229C, r23	; 0x80229c <hpdir+0x9d>
   1456e:	80 93 9d 22 	sts	0x229D, r24	; 0x80229d <hpdir+0x9e>
   14572:	90 93 9e 22 	sts	0x229E, r25	; 0x80229e <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14576:	4e e7       	ldi	r20, 0x7E	; 126
   14578:	50 e0       	ldi	r21, 0x00	; 0
   1457a:	b8 01       	movw	r22, r16
   1457c:	c6 01       	movw	r24, r12
   1457e:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
   14582:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14584:	c8 01       	movw	r24, r16
   14586:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   1458a:	60 93 9f 22 	sts	0x229F, r22	; 0x80229f <hpdir+0xa0>
   1458e:	70 93 a0 22 	sts	0x22A0, r23	; 0x8022a0 <hpdir+0xa1>
   14592:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <hpdir+0xa2>
   14596:	90 93 a2 22 	sts	0x22A2, r25	; 0x8022a2 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1459a:	4e e7       	ldi	r20, 0x7E	; 126
   1459c:	50 e0       	ldi	r21, 0x00	; 0
   1459e:	b8 01       	movw	r22, r16
   145a0:	c6 01       	movw	r24, r12
   145a2:	0e 94 19 31 	call	0x6232	; 0x6232 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   145a6:	c8 01       	movw	r24, r16
   145a8:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
   145ac:	60 93 a3 22 	sts	0x22A3, r22	; 0x8022a3 <hpdir+0xa4>
   145b0:	70 93 a4 22 	sts	0x22A4, r23	; 0x8022a4 <hpdir+0xa5>
   145b4:	80 93 a5 22 	sts	0x22A5, r24	; 0x8022a5 <hpdir+0xa6>
   145b8:	90 93 a6 22 	sts	0x22A6, r25	; 0x8022a6 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   145bc:	20 91 93 22 	lds	r18, 0x2293	; 0x802293 <hpdir+0x94>
   145c0:	30 91 94 22 	lds	r19, 0x2294	; 0x802294 <hpdir+0x95>
   145c4:	40 91 95 22 	lds	r20, 0x2295	; 0x802295 <hpdir+0x96>
   145c8:	50 91 96 22 	lds	r21, 0x2296	; 0x802296 <hpdir+0x97>
   145cc:	60 91 97 22 	lds	r22, 0x2297	; 0x802297 <hpdir+0x98>
   145d0:	70 91 98 22 	lds	r23, 0x2298	; 0x802298 <hpdir+0x99>
   145d4:	80 91 99 22 	lds	r24, 0x2299	; 0x802299 <hpdir+0x9a>
   145d8:	90 91 9a 22 	lds	r25, 0x229A	; 0x80229a <hpdir+0x9b>
   145dc:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
   145e0:	9b 01       	movw	r18, r22
   145e2:	ac 01       	movw	r20, r24
   145e4:	60 91 9b 22 	lds	r22, 0x229B	; 0x80229b <hpdir+0x9c>
   145e8:	70 91 9c 22 	lds	r23, 0x229C	; 0x80229c <hpdir+0x9d>
   145ec:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <hpdir+0x9e>
   145f0:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <hpdir+0x9f>
   145f4:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
   145f8:	60 93 ab 22 	sts	0x22AB, r22	; 0x8022ab <hpdir+0xac>
   145fc:	70 93 ac 22 	sts	0x22AC, r23	; 0x8022ac <hpdir+0xad>
   14600:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <hpdir+0xae>
   14604:	90 93 ae 22 	sts	0x22AE, r25	; 0x8022ae <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14608:	01 e0       	ldi	r16, 0x01	; 1
   1460a:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   1460c:	c7 01       	movw	r24, r14
   1460e:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
    return(found);
   14612:	c8 01       	movw	r24, r16
   14614:	02 c0       	rjmp	.+4      	; 0x1461a <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14616:	80 e0       	ldi	r24, 0x00	; 0
   14618:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1461a:	c7 57       	subi	r28, 0x77	; 119
   1461c:	de 4f       	sbci	r29, 0xFE	; 254
   1461e:	0f b6       	in	r0, 0x3f	; 63
   14620:	f8 94       	cli
   14622:	de bf       	out	0x3e, r29	; 62
   14624:	0f be       	out	0x3f, r0	; 63
   14626:	cd bf       	out	0x3d, r28	; 61
   14628:	df 91       	pop	r29
   1462a:	cf 91       	pop	r28
   1462c:	1f 91       	pop	r17
   1462e:	0f 91       	pop	r16
   14630:	ff 90       	pop	r15
   14632:	ef 90       	pop	r14
   14634:	df 90       	pop	r13
   14636:	cf 90       	pop	r12
   14638:	bf 90       	pop	r11
   1463a:	af 90       	pop	r10
   1463c:	9f 90       	pop	r9
   1463e:	8f 90       	pop	r8
   14640:	6f 90       	pop	r6
   14642:	5f 90       	pop	r5
   14644:	4f 90       	pop	r4
   14646:	3f 90       	pop	r3
   14648:	2f 90       	pop	r2
   1464a:	08 95       	ret

0001464c <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   1464c:	0f 93       	push	r16
   1464e:	1f 93       	push	r17
   14650:	25 e0       	ldi	r18, 0x05	; 5
   14652:	30 e0       	ldi	r19, 0x00	; 0
   14654:	fc 01       	movw	r30, r24
   14656:	31 83       	std	Z+1, r19	; 0x01
   14658:	20 83       	st	Z, r18
   1465a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1465e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   14662:	06 81       	ldd	r16, Z+6	; 0x06
   14664:	17 81       	ldd	r17, Z+7	; 0x07
   14666:	20 e0       	ldi	r18, 0x00	; 0
   14668:	30 e0       	ldi	r19, 0x00	; 0
   1466a:	42 e0       	ldi	r20, 0x02	; 2
   1466c:	50 e0       	ldi	r21, 0x00	; 0
   1466e:	60 e0       	ldi	r22, 0x00	; 0
   14670:	70 e0       	ldi	r23, 0x00	; 0
   14672:	8f e9       	ldi	r24, 0x9F	; 159
   14674:	9a e1       	ldi	r25, 0x1A	; 26
   14676:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   1467a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1467e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   14682:	00 85       	ldd	r16, Z+8	; 0x08
   14684:	11 85       	ldd	r17, Z+9	; 0x09
   14686:	20 e0       	ldi	r18, 0x00	; 0
   14688:	30 e0       	ldi	r19, 0x00	; 0
   1468a:	42 e0       	ldi	r20, 0x02	; 2
   1468c:	50 e0       	ldi	r21, 0x00	; 0
   1468e:	61 e0       	ldi	r22, 0x01	; 1
   14690:	70 e0       	ldi	r23, 0x00	; 0
   14692:	8f e9       	ldi	r24, 0x9F	; 159
   14694:	9a e1       	ldi	r25, 0x1A	; 26
   14696:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   1469a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1469e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   146a2:	02 85       	ldd	r16, Z+10	; 0x0a
   146a4:	10 e0       	ldi	r17, 0x00	; 0
   146a6:	20 e0       	ldi	r18, 0x00	; 0
   146a8:	30 e0       	ldi	r19, 0x00	; 0
   146aa:	41 e0       	ldi	r20, 0x01	; 1
   146ac:	50 e0       	ldi	r21, 0x00	; 0
   146ae:	64 e0       	ldi	r22, 0x04	; 4
   146b0:	70 e0       	ldi	r23, 0x00	; 0
   146b2:	8f e9       	ldi	r24, 0x9F	; 159
   146b4:	9a e1       	ldi	r25, 0x1A	; 26
   146b6:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   146ba:	8f e9       	ldi	r24, 0x9F	; 159
   146bc:	9a e1       	ldi	r25, 0x1A	; 26
   146be:	1f 91       	pop	r17
   146c0:	0f 91       	pop	r16
   146c2:	08 95       	ret

000146c4 <SS80UnitPack>:
   146c4:	0f 93       	push	r16
   146c6:	1f 93       	push	r17
   146c8:	23 e1       	ldi	r18, 0x13	; 19
   146ca:	30 e0       	ldi	r19, 0x00	; 0
   146cc:	fc 01       	movw	r30, r24
   146ce:	31 83       	std	Z+1, r19	; 0x01
   146d0:	20 83       	st	Z, r18
   146d2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   146d6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   146da:	03 85       	ldd	r16, Z+11	; 0x0b
   146dc:	10 e0       	ldi	r17, 0x00	; 0
   146de:	20 e0       	ldi	r18, 0x00	; 0
   146e0:	30 e0       	ldi	r19, 0x00	; 0
   146e2:	41 e0       	ldi	r20, 0x01	; 1
   146e4:	50 e0       	ldi	r21, 0x00	; 0
   146e6:	60 e0       	ldi	r22, 0x00	; 0
   146e8:	70 e0       	ldi	r23, 0x00	; 0
   146ea:	8c e8       	ldi	r24, 0x8C	; 140
   146ec:	9a e1       	ldi	r25, 0x1A	; 26
   146ee:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   146f2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   146f6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   146fa:	04 85       	ldd	r16, Z+12	; 0x0c
   146fc:	15 85       	ldd	r17, Z+13	; 0x0d
   146fe:	26 85       	ldd	r18, Z+14	; 0x0e
   14700:	37 85       	ldd	r19, Z+15	; 0x0f
   14702:	43 e0       	ldi	r20, 0x03	; 3
   14704:	50 e0       	ldi	r21, 0x00	; 0
   14706:	61 e0       	ldi	r22, 0x01	; 1
   14708:	70 e0       	ldi	r23, 0x00	; 0
   1470a:	8c e8       	ldi	r24, 0x8C	; 140
   1470c:	9a e1       	ldi	r25, 0x1A	; 26
   1470e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14712:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14716:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1471a:	00 89       	ldd	r16, Z+16	; 0x10
   1471c:	11 89       	ldd	r17, Z+17	; 0x11
   1471e:	20 e0       	ldi	r18, 0x00	; 0
   14720:	30 e0       	ldi	r19, 0x00	; 0
   14722:	42 e0       	ldi	r20, 0x02	; 2
   14724:	50 e0       	ldi	r21, 0x00	; 0
   14726:	64 e0       	ldi	r22, 0x04	; 4
   14728:	70 e0       	ldi	r23, 0x00	; 0
   1472a:	8c e8       	ldi	r24, 0x8C	; 140
   1472c:	9a e1       	ldi	r25, 0x1A	; 26
   1472e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14732:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14736:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1473a:	02 89       	ldd	r16, Z+18	; 0x12
   1473c:	10 e0       	ldi	r17, 0x00	; 0
   1473e:	20 e0       	ldi	r18, 0x00	; 0
   14740:	30 e0       	ldi	r19, 0x00	; 0
   14742:	41 e0       	ldi	r20, 0x01	; 1
   14744:	50 e0       	ldi	r21, 0x00	; 0
   14746:	66 e0       	ldi	r22, 0x06	; 6
   14748:	70 e0       	ldi	r23, 0x00	; 0
   1474a:	8c e8       	ldi	r24, 0x8C	; 140
   1474c:	9a e1       	ldi	r25, 0x1A	; 26
   1474e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14752:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14756:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1475a:	03 89       	ldd	r16, Z+19	; 0x13
   1475c:	10 e0       	ldi	r17, 0x00	; 0
   1475e:	20 e0       	ldi	r18, 0x00	; 0
   14760:	30 e0       	ldi	r19, 0x00	; 0
   14762:	41 e0       	ldi	r20, 0x01	; 1
   14764:	50 e0       	ldi	r21, 0x00	; 0
   14766:	67 e0       	ldi	r22, 0x07	; 7
   14768:	70 e0       	ldi	r23, 0x00	; 0
   1476a:	8c e8       	ldi	r24, 0x8C	; 140
   1476c:	9a e1       	ldi	r25, 0x1A	; 26
   1476e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14772:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14776:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1477a:	04 89       	ldd	r16, Z+20	; 0x14
   1477c:	15 89       	ldd	r17, Z+21	; 0x15
   1477e:	20 e0       	ldi	r18, 0x00	; 0
   14780:	30 e0       	ldi	r19, 0x00	; 0
   14782:	42 e0       	ldi	r20, 0x02	; 2
   14784:	50 e0       	ldi	r21, 0x00	; 0
   14786:	68 e0       	ldi	r22, 0x08	; 8
   14788:	70 e0       	ldi	r23, 0x00	; 0
   1478a:	8c e8       	ldi	r24, 0x8C	; 140
   1478c:	9a e1       	ldi	r25, 0x1A	; 26
   1478e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14792:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14796:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1479a:	06 89       	ldd	r16, Z+22	; 0x16
   1479c:	17 89       	ldd	r17, Z+23	; 0x17
   1479e:	20 e0       	ldi	r18, 0x00	; 0
   147a0:	30 e0       	ldi	r19, 0x00	; 0
   147a2:	42 e0       	ldi	r20, 0x02	; 2
   147a4:	50 e0       	ldi	r21, 0x00	; 0
   147a6:	6a e0       	ldi	r22, 0x0A	; 10
   147a8:	70 e0       	ldi	r23, 0x00	; 0
   147aa:	8c e8       	ldi	r24, 0x8C	; 140
   147ac:	9a e1       	ldi	r25, 0x1A	; 26
   147ae:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   147b2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   147b6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   147ba:	00 8d       	ldd	r16, Z+24	; 0x18
   147bc:	11 8d       	ldd	r17, Z+25	; 0x19
   147be:	20 e0       	ldi	r18, 0x00	; 0
   147c0:	30 e0       	ldi	r19, 0x00	; 0
   147c2:	42 e0       	ldi	r20, 0x02	; 2
   147c4:	50 e0       	ldi	r21, 0x00	; 0
   147c6:	6c e0       	ldi	r22, 0x0C	; 12
   147c8:	70 e0       	ldi	r23, 0x00	; 0
   147ca:	8c e8       	ldi	r24, 0x8C	; 140
   147cc:	9a e1       	ldi	r25, 0x1A	; 26
   147ce:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   147d2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   147d6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   147da:	02 8d       	ldd	r16, Z+26	; 0x1a
   147dc:	13 8d       	ldd	r17, Z+27	; 0x1b
   147de:	20 e0       	ldi	r18, 0x00	; 0
   147e0:	30 e0       	ldi	r19, 0x00	; 0
   147e2:	42 e0       	ldi	r20, 0x02	; 2
   147e4:	50 e0       	ldi	r21, 0x00	; 0
   147e6:	6e e0       	ldi	r22, 0x0E	; 14
   147e8:	70 e0       	ldi	r23, 0x00	; 0
   147ea:	8c e8       	ldi	r24, 0x8C	; 140
   147ec:	9a e1       	ldi	r25, 0x1A	; 26
   147ee:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   147f2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   147f6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   147fa:	04 8d       	ldd	r16, Z+28	; 0x1c
   147fc:	10 e0       	ldi	r17, 0x00	; 0
   147fe:	20 e0       	ldi	r18, 0x00	; 0
   14800:	30 e0       	ldi	r19, 0x00	; 0
   14802:	41 e0       	ldi	r20, 0x01	; 1
   14804:	50 e0       	ldi	r21, 0x00	; 0
   14806:	60 e1       	ldi	r22, 0x10	; 16
   14808:	70 e0       	ldi	r23, 0x00	; 0
   1480a:	8c e8       	ldi	r24, 0x8C	; 140
   1480c:	9a e1       	ldi	r25, 0x1A	; 26
   1480e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14812:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14816:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1481a:	05 8d       	ldd	r16, Z+29	; 0x1d
   1481c:	10 e0       	ldi	r17, 0x00	; 0
   1481e:	20 e0       	ldi	r18, 0x00	; 0
   14820:	30 e0       	ldi	r19, 0x00	; 0
   14822:	41 e0       	ldi	r20, 0x01	; 1
   14824:	50 e0       	ldi	r21, 0x00	; 0
   14826:	61 e1       	ldi	r22, 0x11	; 17
   14828:	70 e0       	ldi	r23, 0x00	; 0
   1482a:	8c e8       	ldi	r24, 0x8C	; 140
   1482c:	9a e1       	ldi	r25, 0x1A	; 26
   1482e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14832:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14836:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1483a:	06 8d       	ldd	r16, Z+30	; 0x1e
   1483c:	10 e0       	ldi	r17, 0x00	; 0
   1483e:	20 e0       	ldi	r18, 0x00	; 0
   14840:	30 e0       	ldi	r19, 0x00	; 0
   14842:	41 e0       	ldi	r20, 0x01	; 1
   14844:	50 e0       	ldi	r21, 0x00	; 0
   14846:	62 e1       	ldi	r22, 0x12	; 18
   14848:	70 e0       	ldi	r23, 0x00	; 0
   1484a:	8c e8       	ldi	r24, 0x8C	; 140
   1484c:	9a e1       	ldi	r25, 0x1A	; 26
   1484e:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14852:	8c e8       	ldi	r24, 0x8C	; 140
   14854:	9a e1       	ldi	r25, 0x1A	; 26
   14856:	1f 91       	pop	r17
   14858:	0f 91       	pop	r16
   1485a:	08 95       	ret

0001485c <SS80VolumePack>:
   1485c:	0f 93       	push	r16
   1485e:	1f 93       	push	r17
   14860:	2d e0       	ldi	r18, 0x0D	; 13
   14862:	30 e0       	ldi	r19, 0x00	; 0
   14864:	fc 01       	movw	r30, r24
   14866:	31 83       	std	Z+1, r19	; 0x01
   14868:	20 83       	st	Z, r18
   1486a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1486e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   14872:	07 8d       	ldd	r16, Z+31	; 0x1f
   14874:	10 a1       	ldd	r17, Z+32	; 0x20
   14876:	21 a1       	ldd	r18, Z+33	; 0x21
   14878:	32 a1       	ldd	r19, Z+34	; 0x22
   1487a:	43 e0       	ldi	r20, 0x03	; 3
   1487c:	50 e0       	ldi	r21, 0x00	; 0
   1487e:	60 e0       	ldi	r22, 0x00	; 0
   14880:	70 e0       	ldi	r23, 0x00	; 0
   14882:	8f e7       	ldi	r24, 0x7F	; 127
   14884:	9a e1       	ldi	r25, 0x1A	; 26
   14886:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   1488a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1488e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   14892:	03 a1       	ldd	r16, Z+35	; 0x23
   14894:	10 e0       	ldi	r17, 0x00	; 0
   14896:	20 e0       	ldi	r18, 0x00	; 0
   14898:	30 e0       	ldi	r19, 0x00	; 0
   1489a:	41 e0       	ldi	r20, 0x01	; 1
   1489c:	50 e0       	ldi	r21, 0x00	; 0
   1489e:	63 e0       	ldi	r22, 0x03	; 3
   148a0:	70 e0       	ldi	r23, 0x00	; 0
   148a2:	8f e7       	ldi	r24, 0x7F	; 127
   148a4:	9a e1       	ldi	r25, 0x1A	; 26
   148a6:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   148aa:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   148ae:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   148b2:	04 a1       	ldd	r16, Z+36	; 0x24
   148b4:	15 a1       	ldd	r17, Z+37	; 0x25
   148b6:	20 e0       	ldi	r18, 0x00	; 0
   148b8:	30 e0       	ldi	r19, 0x00	; 0
   148ba:	42 e0       	ldi	r20, 0x02	; 2
   148bc:	50 e0       	ldi	r21, 0x00	; 0
   148be:	64 e0       	ldi	r22, 0x04	; 4
   148c0:	70 e0       	ldi	r23, 0x00	; 0
   148c2:	8f e7       	ldi	r24, 0x7F	; 127
   148c4:	9a e1       	ldi	r25, 0x1A	; 26
   148c6:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   148ca:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   148ce:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   148d2:	06 a1       	ldd	r16, Z+38	; 0x26
   148d4:	17 a1       	ldd	r17, Z+39	; 0x27
   148d6:	20 a5       	ldd	r18, Z+40	; 0x28
   148d8:	31 a5       	ldd	r19, Z+41	; 0x29
   148da:	46 e0       	ldi	r20, 0x06	; 6
   148dc:	50 e0       	ldi	r21, 0x00	; 0
   148de:	66 e0       	ldi	r22, 0x06	; 6
   148e0:	70 e0       	ldi	r23, 0x00	; 0
   148e2:	8f e7       	ldi	r24, 0x7F	; 127
   148e4:	9a e1       	ldi	r25, 0x1A	; 26
   148e6:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   148ea:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   148ee:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   148f2:	02 a5       	ldd	r16, Z+42	; 0x2a
   148f4:	10 e0       	ldi	r17, 0x00	; 0
   148f6:	20 e0       	ldi	r18, 0x00	; 0
   148f8:	30 e0       	ldi	r19, 0x00	; 0
   148fa:	41 e0       	ldi	r20, 0x01	; 1
   148fc:	50 e0       	ldi	r21, 0x00	; 0
   148fe:	6c e0       	ldi	r22, 0x0C	; 12
   14900:	70 e0       	ldi	r23, 0x00	; 0
   14902:	8f e7       	ldi	r24, 0x7F	; 127
   14904:	9a e1       	ldi	r25, 0x1A	; 26
   14906:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   1490a:	8f e7       	ldi	r24, 0x7F	; 127
   1490c:	9a e1       	ldi	r25, 0x1A	; 26
   1490e:	1f 91       	pop	r17
   14910:	0f 91       	pop	r16
   14912:	08 95       	ret

00014914 <SS80_test_extended_status>:
   14914:	9b 01       	movw	r18, r22
   14916:	43 e0       	ldi	r20, 0x03	; 3
   14918:	35 95       	asr	r19
   1491a:	27 95       	ror	r18
   1491c:	4a 95       	dec	r20
   1491e:	e1 f7       	brne	.-8      	; 0x14918 <SS80_test_extended_status+0x4>
   14920:	82 0f       	add	r24, r18
   14922:	93 1f       	adc	r25, r19
   14924:	67 70       	andi	r22, 0x07	; 7
   14926:	77 27       	eor	r23, r23
   14928:	20 e8       	ldi	r18, 0x80	; 128
   1492a:	30 e0       	ldi	r19, 0x00	; 0
   1492c:	02 c0       	rjmp	.+4      	; 0x14932 <SS80_test_extended_status+0x1e>
   1492e:	35 95       	asr	r19
   14930:	27 95       	ror	r18
   14932:	6a 95       	dec	r22
   14934:	e2 f7       	brpl	.-8      	; 0x1492e <SS80_test_extended_status+0x1a>
   14936:	fc 01       	movw	r30, r24
   14938:	80 81       	ld	r24, Z
   1493a:	28 23       	and	r18, r24
   1493c:	81 e0       	ldi	r24, 0x01	; 1
   1493e:	90 e0       	ldi	r25, 0x00	; 0
   14940:	11 f4       	brne	.+4      	; 0x14946 <SS80_test_extended_status+0x32>
   14942:	80 e0       	ldi	r24, 0x00	; 0
   14944:	90 e0       	ldi	r25, 0x00	; 0
   14946:	08 95       	ret

00014948 <SS80_display_extended_status>:
   14948:	6f 92       	push	r6
   1494a:	7f 92       	push	r7
   1494c:	8f 92       	push	r8
   1494e:	ef 92       	push	r14
   14950:	ff 92       	push	r15
   14952:	0f 93       	push	r16
   14954:	1f 93       	push	r17
   14956:	cf 93       	push	r28
   14958:	df 93       	push	r29
   1495a:	ad b7       	in	r26, 0x3d	; 61
   1495c:	be b7       	in	r27, 0x3e	; 62
   1495e:	17 97       	sbiw	r26, 0x07	; 7
   14960:	0f b6       	in	r0, 0x3f	; 63
   14962:	f8 94       	cli
   14964:	be bf       	out	0x3e, r27	; 62
   14966:	0f be       	out	0x3f, r0	; 63
   14968:	ad bf       	out	0x3d, r26	; 61
   1496a:	fc 01       	movw	r30, r24
   1496c:	ac 01       	movw	r20, r24
   1496e:	48 5f       	subi	r20, 0xF8	; 248
   14970:	5f 4f       	sbci	r21, 0xFF	; 255
   14972:	20 e0       	ldi	r18, 0x00	; 0
   14974:	30 e0       	ldi	r19, 0x00	; 0
   14976:	a1 91       	ld	r26, Z+
   14978:	aa 23       	and	r26, r26
   1497a:	11 f0       	breq	.+4      	; 0x14980 <SS80_display_extended_status+0x38>
   1497c:	21 e0       	ldi	r18, 0x01	; 1
   1497e:	30 e0       	ldi	r19, 0x00	; 0
   14980:	e4 17       	cp	r30, r20
   14982:	f5 07       	cpc	r31, r21
   14984:	c1 f7       	brne	.-16     	; 0x14976 <SS80_display_extended_status+0x2e>
   14986:	23 2b       	or	r18, r19
   14988:	81 f1       	breq	.+96     	; 0x149ea <SS80_display_extended_status+0xa2>
   1498a:	ec 01       	movw	r28, r24
   1498c:	ed b7       	in	r30, 0x3d	; 61
   1498e:	fe b7       	in	r31, 0x3e	; 62
   14990:	75 83       	std	Z+5, r23	; 0x05
   14992:	64 83       	std	Z+4, r22	; 0x04
   14994:	84 e2       	ldi	r24, 0x24	; 36
   14996:	94 e2       	ldi	r25, 0x24	; 36
   14998:	a0 e0       	ldi	r26, 0x00	; 0
   1499a:	81 83       	std	Z+1, r24	; 0x01
   1499c:	92 83       	std	Z+2, r25	; 0x02
   1499e:	a3 83       	std	Z+3, r26	; 0x03
   149a0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   149a4:	0c e7       	ldi	r16, 0x7C	; 124
   149a6:	12 e0       	ldi	r17, 0x02	; 2
   149a8:	89 e1       	ldi	r24, 0x19	; 25
   149aa:	94 e2       	ldi	r25, 0x24	; 36
   149ac:	3c 01       	movw	r6, r24
   149ae:	81 2c       	mov	r8, r1
   149b0:	f8 01       	movw	r30, r16
   149b2:	e0 80       	ld	r14, Z
   149b4:	f1 80       	ldd	r15, Z+1	; 0x01
   149b6:	ff ef       	ldi	r31, 0xFF	; 255
   149b8:	ef 16       	cp	r14, r31
   149ba:	ff 06       	cpc	r15, r31
   149bc:	b1 f0       	breq	.+44     	; 0x149ea <SS80_display_extended_status+0xa2>
   149be:	b7 01       	movw	r22, r14
   149c0:	ce 01       	movw	r24, r28
   149c2:	a8 df       	rcall	.-176    	; 0x14914 <SS80_test_extended_status>
   149c4:	89 2b       	or	r24, r25
   149c6:	71 f0       	breq	.+28     	; 0x149e4 <SS80_display_extended_status+0x9c>
   149c8:	f8 01       	movw	r30, r16
   149ca:	82 81       	ldd	r24, Z+2	; 0x02
   149cc:	93 81       	ldd	r25, Z+3	; 0x03
   149ce:	ed b7       	in	r30, 0x3d	; 61
   149d0:	fe b7       	in	r31, 0x3e	; 62
   149d2:	97 83       	std	Z+7, r25	; 0x07
   149d4:	86 83       	std	Z+6, r24	; 0x06
   149d6:	f5 82       	std	Z+5, r15	; 0x05
   149d8:	e4 82       	std	Z+4, r14	; 0x04
   149da:	61 82       	std	Z+1, r6	; 0x01
   149dc:	72 82       	std	Z+2, r7	; 0x02
   149de:	83 82       	std	Z+3, r8	; 0x03
   149e0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   149e4:	0c 5f       	subi	r16, 0xFC	; 252
   149e6:	1f 4f       	sbci	r17, 0xFF	; 255
   149e8:	e3 cf       	rjmp	.-58     	; 0x149b0 <SS80_display_extended_status+0x68>
   149ea:	ad b7       	in	r26, 0x3d	; 61
   149ec:	be b7       	in	r27, 0x3e	; 62
   149ee:	17 96       	adiw	r26, 0x07	; 7
   149f0:	0f b6       	in	r0, 0x3f	; 63
   149f2:	f8 94       	cli
   149f4:	be bf       	out	0x3e, r27	; 62
   149f6:	0f be       	out	0x3f, r0	; 63
   149f8:	ad bf       	out	0x3d, r26	; 61
   149fa:	df 91       	pop	r29
   149fc:	cf 91       	pop	r28
   149fe:	1f 91       	pop	r17
   14a00:	0f 91       	pop	r16
   14a02:	ff 90       	pop	r15
   14a04:	ef 90       	pop	r14
   14a06:	8f 90       	pop	r8
   14a08:	7f 90       	pop	r7
   14a0a:	6f 90       	pop	r6
   14a0c:	08 95       	ret

00014a0e <SS80_send_status>:
   14a0e:	a9 e1       	ldi	r26, 0x19	; 25
   14a10:	b0 e0       	ldi	r27, 0x00	; 0
   14a12:	ed e0       	ldi	r30, 0x0D	; 13
   14a14:	f5 ea       	ldi	r31, 0xA5	; 165
   14a16:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
   14a1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a1e:	85 ff       	sbrs	r24, 5
   14a20:	0a c0       	rjmp	.+20     	; 0x14a36 <SS80_send_status+0x28>
   14a22:	85 e0       	ldi	r24, 0x05	; 5
   14a24:	94 e2       	ldi	r25, 0x24	; 36
   14a26:	a0 e0       	ldi	r26, 0x00	; 0
   14a28:	ed b7       	in	r30, 0x3d	; 61
   14a2a:	fe b7       	in	r31, 0x3e	; 62
   14a2c:	81 83       	std	Z+1, r24	; 0x01
   14a2e:	92 83       	std	Z+2, r25	; 0x02
   14a30:	a3 83       	std	Z+3, r26	; 0x03
   14a32:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14a36:	ce 01       	movw	r24, r28
   14a38:	04 96       	adiw	r24, 0x04	; 4
   14a3a:	7c 01       	movw	r14, r24
   14a3c:	84 e1       	ldi	r24, 0x14	; 20
   14a3e:	f7 01       	movw	r30, r14
   14a40:	11 92       	st	Z+, r1
   14a42:	8a 95       	dec	r24
   14a44:	e9 f7       	brne	.-6      	; 0x14a40 <SS80_send_status+0x32>
   14a46:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14a4a:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14a4e:	86 81       	ldd	r24, Z+6	; 0x06
   14a50:	20 e1       	ldi	r18, 0x10	; 16
   14a52:	82 9f       	mul	r24, r18
   14a54:	c0 01       	movw	r24, r0
   14a56:	11 24       	eor	r1, r1
   14a58:	95 81       	ldd	r25, Z+5	; 0x05
   14a5a:	9f 70       	andi	r25, 0x0F	; 15
   14a5c:	89 2b       	or	r24, r25
   14a5e:	8c 83       	std	Y+4, r24	; 0x04
   14a60:	8f ef       	ldi	r24, 0xFF	; 255
   14a62:	8d 83       	std	Y+5, r24	; 0x05
   14a64:	83 81       	ldd	r24, Z+3	; 0x03
   14a66:	86 ff       	sbrs	r24, 6
   14a68:	02 c0       	rjmp	.+4      	; 0x14a6e <SS80_send_status+0x60>
   14a6a:	92 e0       	ldi	r25, 0x02	; 2
   14a6c:	9e 83       	std	Y+6, r25	; 0x06
   14a6e:	82 ff       	sbrs	r24, 2
   14a70:	03 c0       	rjmp	.+6      	; 0x14a78 <SS80_send_status+0x6a>
   14a72:	9e 81       	ldd	r25, Y+6	; 0x06
   14a74:	91 60       	ori	r25, 0x01	; 1
   14a76:	9e 83       	std	Y+6, r25	; 0x06
   14a78:	80 ff       	sbrs	r24, 0
   14a7a:	02 c0       	rjmp	.+4      	; 0x14a80 <SS80_send_status+0x72>
   14a7c:	82 e0       	ldi	r24, 0x02	; 2
   14a7e:	88 87       	std	Y+8, r24	; 0x08
   14a80:	83 81       	ldd	r24, Z+3	; 0x03
   14a82:	81 ff       	sbrs	r24, 1
   14a84:	03 c0       	rjmp	.+6      	; 0x14a8c <SS80_send_status+0x7e>
   14a86:	88 85       	ldd	r24, Y+8	; 0x08
   14a88:	82 60       	ori	r24, 0x02	; 2
   14a8a:	88 87       	std	Y+8, r24	; 0x08
   14a8c:	83 81       	ldd	r24, Z+3	; 0x03
   14a8e:	83 ff       	sbrs	r24, 3
   14a90:	02 c0       	rjmp	.+4      	; 0x14a96 <SS80_send_status+0x88>
   14a92:	88 e0       	ldi	r24, 0x08	; 8
   14a94:	8a 87       	std	Y+10, r24	; 0x0a
   14a96:	83 81       	ldd	r24, Z+3	; 0x03
   14a98:	94 81       	ldd	r25, Z+4	; 0x04
   14a9a:	89 2b       	or	r24, r25
   14a9c:	59 f4       	brne	.+22     	; 0x14ab4 <SS80_send_status+0xa6>
   14a9e:	07 81       	ldd	r16, Z+7	; 0x07
   14aa0:	10 85       	ldd	r17, Z+8	; 0x08
   14aa2:	21 85       	ldd	r18, Z+9	; 0x09
   14aa4:	32 85       	ldd	r19, Z+10	; 0x0a
   14aa6:	46 e0       	ldi	r20, 0x06	; 6
   14aa8:	50 e0       	ldi	r21, 0x00	; 0
   14aaa:	6a e0       	ldi	r22, 0x0A	; 10
   14aac:	70 e0       	ldi	r23, 0x00	; 0
   14aae:	c7 01       	movw	r24, r14
   14ab0:	0e 94 a1 bd 	call	0x17b42	; 0x17b42 <V2B_MSB>
   14ab4:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14ab8:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14abc:	83 81       	ldd	r24, Z+3	; 0x03
   14abe:	94 81       	ldd	r25, Z+4	; 0x04
   14ac0:	89 2b       	or	r24, r25
   14ac2:	11 f0       	breq	.+4      	; 0x14ac8 <SS80_send_status+0xba>
   14ac4:	81 e0       	ldi	r24, 0x01	; 1
   14ac6:	82 83       	std	Z+2, r24	; 0x02
   14ac8:	80 e0       	ldi	r24, 0x00	; 0
   14aca:	91 e0       	ldi	r25, 0x01	; 1
   14acc:	99 8f       	std	Y+25, r25	; 0x19
   14ace:	88 8f       	std	Y+24, r24	; 0x18
   14ad0:	ae 01       	movw	r20, r28
   14ad2:	48 5e       	subi	r20, 0xE8	; 232
   14ad4:	5f 4f       	sbci	r21, 0xFF	; 255
   14ad6:	64 e1       	ldi	r22, 0x14	; 20
   14ad8:	70 e0       	ldi	r23, 0x00	; 0
   14ada:	c7 01       	movw	r24, r14
   14adc:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   14ae0:	44 97       	sbiw	r24, 0x14	; 20
   14ae2:	71 f0       	breq	.+28     	; 0x14b00 <SS80_send_status+0xf2>
   14ae4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ae8:	80 ff       	sbrs	r24, 0
   14aea:	0a c0       	rjmp	.+20     	; 0x14b00 <SS80_send_status+0xf2>
   14aec:	8a ee       	ldi	r24, 0xEA	; 234
   14aee:	93 e2       	ldi	r25, 0x23	; 35
   14af0:	a0 e0       	ldi	r26, 0x00	; 0
   14af2:	ed b7       	in	r30, 0x3d	; 61
   14af4:	fe b7       	in	r31, 0x3e	; 62
   14af6:	81 83       	std	Z+1, r24	; 0x01
   14af8:	92 83       	std	Z+2, r25	; 0x02
   14afa:	a3 83       	std	Z+3, r26	; 0x03
   14afc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14b00:	88 8d       	ldd	r24, Y+24	; 0x18
   14b02:	99 8d       	ldd	r25, Y+25	; 0x19
   14b04:	88 27       	eor	r24, r24
   14b06:	90 7d       	andi	r25, 0xD0	; 208
   14b08:	69 96       	adiw	r28, 0x19	; 25
   14b0a:	e6 e0       	ldi	r30, 0x06	; 6
   14b0c:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00014b10 <SS80_describe>:
   14b10:	a7 e0       	ldi	r26, 0x07	; 7
   14b12:	b0 e0       	ldi	r27, 0x00	; 0
   14b14:	ee e8       	ldi	r30, 0x8E	; 142
   14b16:	f5 ea       	ldi	r31, 0xA5	; 165
   14b18:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   14b1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b20:	85 ff       	sbrs	r24, 5
   14b22:	0a c0       	rjmp	.+20     	; 0x14b38 <SS80_describe+0x28>
   14b24:	89 ed       	ldi	r24, 0xD9	; 217
   14b26:	93 e2       	ldi	r25, 0x23	; 35
   14b28:	a0 e0       	ldi	r26, 0x00	; 0
   14b2a:	ed b7       	in	r30, 0x3d	; 61
   14b2c:	fe b7       	in	r31, 0x3e	; 62
   14b2e:	81 83       	std	Z+1, r24	; 0x01
   14b30:	92 83       	std	Z+2, r25	; 0x02
   14b32:	a3 83       	std	Z+3, r26	; 0x03
   14b34:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14b38:	1f 82       	std	Y+7, r1	; 0x07
   14b3a:	1e 82       	std	Y+6, r1	; 0x06
   14b3c:	ce 01       	movw	r24, r28
   14b3e:	04 96       	adiw	r24, 0x04	; 4
   14b40:	85 dd       	rcall	.-1270   	; 0x1464c <SS80ControllerPack>
   14b42:	6c 81       	ldd	r22, Y+4	; 0x04
   14b44:	7d 81       	ldd	r23, Y+5	; 0x05
   14b46:	ae 01       	movw	r20, r28
   14b48:	4a 5f       	subi	r20, 0xFA	; 250
   14b4a:	5f 4f       	sbci	r21, 0xFF	; 255
   14b4c:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   14b50:	2c 81       	ldd	r18, Y+4	; 0x04
   14b52:	3d 81       	ldd	r19, Y+5	; 0x05
   14b54:	82 17       	cp	r24, r18
   14b56:	93 07       	cpc	r25, r19
   14b58:	39 f0       	breq	.+14     	; 0x14b68 <SS80_describe+0x58>
   14b5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b5e:	80 ff       	sbrs	r24, 0
   14b60:	3c c0       	rjmp	.+120    	; 0x14bda <SS80_describe+0xca>
   14b62:	86 eb       	ldi	r24, 0xB6	; 182
   14b64:	93 e2       	ldi	r25, 0x23	; 35
   14b66:	31 c0       	rjmp	.+98     	; 0x14bca <SS80_describe+0xba>
   14b68:	1f 82       	std	Y+7, r1	; 0x07
   14b6a:	1e 82       	std	Y+6, r1	; 0x06
   14b6c:	ce 01       	movw	r24, r28
   14b6e:	04 96       	adiw	r24, 0x04	; 4
   14b70:	a9 dd       	rcall	.-1198   	; 0x146c4 <SS80UnitPack>
   14b72:	6c 81       	ldd	r22, Y+4	; 0x04
   14b74:	7d 81       	ldd	r23, Y+5	; 0x05
   14b76:	ae 01       	movw	r20, r28
   14b78:	4a 5f       	subi	r20, 0xFA	; 250
   14b7a:	5f 4f       	sbci	r21, 0xFF	; 255
   14b7c:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   14b80:	2c 81       	ldd	r18, Y+4	; 0x04
   14b82:	3d 81       	ldd	r19, Y+5	; 0x05
   14b84:	82 17       	cp	r24, r18
   14b86:	93 07       	cpc	r25, r19
   14b88:	39 f0       	breq	.+14     	; 0x14b98 <SS80_describe+0x88>
   14b8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b8e:	80 ff       	sbrs	r24, 0
   14b90:	24 c0       	rjmp	.+72     	; 0x14bda <SS80_describe+0xca>
   14b92:	89 e9       	ldi	r24, 0x99	; 153
   14b94:	93 e2       	ldi	r25, 0x23	; 35
   14b96:	19 c0       	rjmp	.+50     	; 0x14bca <SS80_describe+0xba>
   14b98:	80 e0       	ldi	r24, 0x00	; 0
   14b9a:	91 e0       	ldi	r25, 0x01	; 1
   14b9c:	9f 83       	std	Y+7, r25	; 0x07
   14b9e:	8e 83       	std	Y+6, r24	; 0x06
   14ba0:	ce 01       	movw	r24, r28
   14ba2:	04 96       	adiw	r24, 0x04	; 4
   14ba4:	5b de       	rcall	.-842    	; 0x1485c <SS80VolumePack>
   14ba6:	6c 81       	ldd	r22, Y+4	; 0x04
   14ba8:	7d 81       	ldd	r23, Y+5	; 0x05
   14baa:	ae 01       	movw	r20, r28
   14bac:	4a 5f       	subi	r20, 0xFA	; 250
   14bae:	5f 4f       	sbci	r21, 0xFF	; 255
   14bb0:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   14bb4:	2c 81       	ldd	r18, Y+4	; 0x04
   14bb6:	3d 81       	ldd	r19, Y+5	; 0x05
   14bb8:	82 17       	cp	r24, r18
   14bba:	93 07       	cpc	r25, r19
   14bbc:	99 f0       	breq	.+38     	; 0x14be4 <SS80_describe+0xd4>
   14bbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bc2:	80 ff       	sbrs	r24, 0
   14bc4:	0a c0       	rjmp	.+20     	; 0x14bda <SS80_describe+0xca>
   14bc6:	8a e7       	ldi	r24, 0x7A	; 122
   14bc8:	93 e2       	ldi	r25, 0x23	; 35
   14bca:	a0 e0       	ldi	r26, 0x00	; 0
   14bcc:	ed b7       	in	r30, 0x3d	; 61
   14bce:	fe b7       	in	r31, 0x3e	; 62
   14bd0:	81 83       	std	Z+1, r24	; 0x01
   14bd2:	92 83       	std	Z+2, r25	; 0x02
   14bd4:	a3 83       	std	Z+3, r26	; 0x03
   14bd6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14bda:	8e 81       	ldd	r24, Y+6	; 0x06
   14bdc:	9f 81       	ldd	r25, Y+7	; 0x07
   14bde:	88 27       	eor	r24, r24
   14be0:	90 7d       	andi	r25, 0xD0	; 208
   14be2:	02 c0       	rjmp	.+4      	; 0x14be8 <SS80_describe+0xd8>
   14be4:	80 e0       	ldi	r24, 0x00	; 0
   14be6:	90 e0       	ldi	r25, 0x00	; 0
   14be8:	27 96       	adiw	r28, 0x07	; 7
   14bea:	e2 e0       	ldi	r30, 0x02	; 2
   14bec:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00014bf0 <SS80_Check_Unit>:
   14bf0:	00 d0       	rcall	.+0      	; 0x14bf2 <SS80_Check_Unit+0x2>
   14bf2:	00 d0       	rcall	.+0      	; 0x14bf4 <SS80_Check_Unit+0x4>
   14bf4:	1f 92       	push	r1
   14bf6:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14bfa:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14bfe:	88 23       	and	r24, r24
   14c00:	c9 f0       	breq	.+50     	; 0x14c34 <SS80_Check_Unit+0x44>
   14c02:	8f 30       	cpi	r24, 0x0F	; 15
   14c04:	b9 f0       	breq	.+46     	; 0x14c34 <SS80_Check_Unit+0x44>
   14c06:	23 81       	ldd	r18, Z+3	; 0x03
   14c08:	34 81       	ldd	r19, Z+4	; 0x04
   14c0a:	20 64       	ori	r18, 0x40	; 64
   14c0c:	34 83       	std	Z+4, r19	; 0x04
   14c0e:	23 83       	std	Z+3, r18	; 0x03
   14c10:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14c14:	90 ff       	sbrs	r25, 0
   14c16:	0f c0       	rjmp	.+30     	; 0x14c36 <SS80_Check_Unit+0x46>
   14c18:	90 e0       	ldi	r25, 0x00	; 0
   14c1a:	ed b7       	in	r30, 0x3d	; 61
   14c1c:	fe b7       	in	r31, 0x3e	; 62
   14c1e:	95 83       	std	Z+5, r25	; 0x05
   14c20:	84 83       	std	Z+4, r24	; 0x04
   14c22:	82 e6       	ldi	r24, 0x62	; 98
   14c24:	93 e2       	ldi	r25, 0x23	; 35
   14c26:	a0 e0       	ldi	r26, 0x00	; 0
   14c28:	81 83       	std	Z+1, r24	; 0x01
   14c2a:	92 83       	std	Z+2, r25	; 0x02
   14c2c:	a3 83       	std	Z+3, r26	; 0x03
   14c2e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14c32:	01 c0       	rjmp	.+2      	; 0x14c36 <SS80_Check_Unit+0x46>
   14c34:	85 83       	std	Z+5, r24	; 0x05
   14c36:	0f 90       	pop	r0
   14c38:	0f 90       	pop	r0
   14c3a:	0f 90       	pop	r0
   14c3c:	0f 90       	pop	r0
   14c3e:	0f 90       	pop	r0
   14c40:	08 95       	ret

00014c42 <SS80_Check_Volume>:
   14c42:	00 d0       	rcall	.+0      	; 0x14c44 <SS80_Check_Volume+0x2>
   14c44:	00 d0       	rcall	.+0      	; 0x14c46 <SS80_Check_Volume+0x4>
   14c46:	1f 92       	push	r1
   14c48:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14c4c:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14c50:	88 23       	and	r24, r24
   14c52:	b9 f0       	breq	.+46     	; 0x14c82 <SS80_Check_Volume+0x40>
   14c54:	23 81       	ldd	r18, Z+3	; 0x03
   14c56:	34 81       	ldd	r19, Z+4	; 0x04
   14c58:	20 64       	ori	r18, 0x40	; 64
   14c5a:	34 83       	std	Z+4, r19	; 0x04
   14c5c:	23 83       	std	Z+3, r18	; 0x03
   14c5e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14c62:	90 ff       	sbrs	r25, 0
   14c64:	0f c0       	rjmp	.+30     	; 0x14c84 <SS80_Check_Volume+0x42>
   14c66:	90 e0       	ldi	r25, 0x00	; 0
   14c68:	ed b7       	in	r30, 0x3d	; 61
   14c6a:	fe b7       	in	r31, 0x3e	; 62
   14c6c:	95 83       	std	Z+5, r25	; 0x05
   14c6e:	84 83       	std	Z+4, r24	; 0x04
   14c70:	88 e4       	ldi	r24, 0x48	; 72
   14c72:	93 e2       	ldi	r25, 0x23	; 35
   14c74:	a0 e0       	ldi	r26, 0x00	; 0
   14c76:	81 83       	std	Z+1, r24	; 0x01
   14c78:	92 83       	std	Z+2, r25	; 0x02
   14c7a:	a3 83       	std	Z+3, r26	; 0x03
   14c7c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14c80:	01 c0       	rjmp	.+2      	; 0x14c84 <SS80_Check_Volume+0x42>
   14c82:	16 82       	std	Z+6, r1	; 0x06
   14c84:	0f 90       	pop	r0
   14c86:	0f 90       	pop	r0
   14c88:	0f 90       	pop	r0
   14c8a:	0f 90       	pop	r0
   14c8c:	0f 90       	pop	r0
   14c8e:	08 95       	ret

00014c90 <SS80_Command_State>:
   14c90:	2f 92       	push	r2
   14c92:	3f 92       	push	r3
   14c94:	4f 92       	push	r4
   14c96:	6f 92       	push	r6
   14c98:	7f 92       	push	r7
   14c9a:	8f 92       	push	r8
   14c9c:	af 92       	push	r10
   14c9e:	bf 92       	push	r11
   14ca0:	cf 92       	push	r12
   14ca2:	ef 92       	push	r14
   14ca4:	ff 92       	push	r15
   14ca6:	0f 93       	push	r16
   14ca8:	1f 93       	push	r17
   14caa:	cf 93       	push	r28
   14cac:	df 93       	push	r29
   14cae:	cd b7       	in	r28, 0x3d	; 61
   14cb0:	de b7       	in	r29, 0x3e	; 62
   14cb2:	66 97       	sbiw	r28, 0x16	; 22
   14cb4:	0f b6       	in	r0, 0x3f	; 63
   14cb6:	f8 94       	cli
   14cb8:	de bf       	out	0x3e, r29	; 62
   14cba:	0f be       	out	0x3f, r0	; 63
   14cbc:	cd bf       	out	0x3d, r28	; 61
   14cbe:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   14cc2:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   14cc6:	81 81       	ldd	r24, Z+1	; 0x01
   14cc8:	90 e0       	ldi	r25, 0x00	; 0
   14cca:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
   14cce:	80 e0       	ldi	r24, 0x00	; 0
   14cd0:	91 e0       	ldi	r25, 0x01	; 1
   14cd2:	99 87       	std	Y+9, r25	; 0x09
   14cd4:	88 87       	std	Y+8, r24	; 0x08
   14cd6:	ae 01       	movw	r20, r28
   14cd8:	48 5f       	subi	r20, 0xF8	; 248
   14cda:	5f 4f       	sbci	r21, 0xFF	; 255
   14cdc:	60 e0       	ldi	r22, 0x00	; 0
   14cde:	72 e0       	ldi	r23, 0x02	; 2
   14ce0:	81 ef       	ldi	r24, 0xF1	; 241
   14ce2:	9d e1       	ldi	r25, 0x1D	; 29
   14ce4:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   14ce8:	9b 87       	std	Y+11, r25	; 0x0b
   14cea:	8a 87       	std	Y+10, r24	; 0x0a
   14cec:	88 85       	ldd	r24, Y+8	; 0x08
   14cee:	99 85       	ldd	r25, Y+9	; 0x09
   14cf0:	9c 01       	movw	r18, r24
   14cf2:	22 27       	eor	r18, r18
   14cf4:	30 7d       	andi	r19, 0xD0	; 208
   14cf6:	23 2b       	or	r18, r19
   14cf8:	79 f0       	breq	.+30     	; 0x14d18 <SS80_Command_State+0x88>
   14cfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cfe:	80 ff       	sbrs	r24, 0
   14d00:	21 c2       	rjmp	.+1090   	; 0x15144 <SS80_Command_State+0x4b4>
   14d02:	82 e2       	ldi	r24, 0x22	; 34
   14d04:	93 e2       	ldi	r25, 0x23	; 35
   14d06:	a0 e0       	ldi	r26, 0x00	; 0
   14d08:	ed b7       	in	r30, 0x3d	; 61
   14d0a:	fe b7       	in	r31, 0x3e	; 62
   14d0c:	81 83       	std	Z+1, r24	; 0x01
   14d0e:	92 83       	std	Z+2, r25	; 0x02
   14d10:	a3 83       	std	Z+3, r26	; 0x03
   14d12:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14d16:	16 c2       	rjmp	.+1068   	; 0x15144 <SS80_Command_State+0x4b4>
   14d18:	2a 85       	ldd	r18, Y+10	; 0x0a
   14d1a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14d1c:	23 2b       	or	r18, r19
   14d1e:	09 f4       	brne	.+2      	; 0x14d22 <SS80_Command_State+0x92>
   14d20:	16 c2       	rjmp	.+1068   	; 0x1514e <SS80_Command_State+0x4be>
   14d22:	90 fd       	sbrc	r25, 0
   14d24:	0e c0       	rjmp	.+28     	; 0x14d42 <SS80_Command_State+0xb2>
   14d26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d2a:	80 ff       	sbrs	r24, 0
   14d2c:	0a c0       	rjmp	.+20     	; 0x14d42 <SS80_Command_State+0xb2>
   14d2e:	89 e0       	ldi	r24, 0x09	; 9
   14d30:	93 e2       	ldi	r25, 0x23	; 35
   14d32:	a0 e0       	ldi	r26, 0x00	; 0
   14d34:	ed b7       	in	r30, 0x3d	; 61
   14d36:	fe b7       	in	r31, 0x3e	; 62
   14d38:	81 83       	std	Z+1, r24	; 0x01
   14d3a:	92 83       	std	Z+2, r25	; 0x02
   14d3c:	a3 83       	std	Z+3, r26	; 0x03
   14d3e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14d42:	e1 2c       	mov	r14, r1
   14d44:	f1 2c       	mov	r15, r1
   14d46:	8d e0       	ldi	r24, 0x0D	; 13
   14d48:	92 e2       	ldi	r25, 0x22	; 34
   14d4a:	9c 01       	movw	r18, r24
   14d4c:	40 e0       	ldi	r20, 0x00	; 0
   14d4e:	2e 87       	std	Y+14, r18	; 0x0e
   14d50:	3f 87       	std	Y+15, r19	; 0x0f
   14d52:	48 8b       	std	Y+16, r20	; 0x10
   14d54:	82 e3       	ldi	r24, 0x32	; 50
   14d56:	92 e2       	ldi	r25, 0x22	; 34
   14d58:	9c 01       	movw	r18, r24
   14d5a:	40 e0       	ldi	r20, 0x00	; 0
   14d5c:	29 8b       	std	Y+17, r18	; 0x11
   14d5e:	3a 8b       	std	Y+18, r19	; 0x12
   14d60:	4b 8b       	std	Y+19, r20	; 0x13
   14d62:	8c e4       	ldi	r24, 0x4C	; 76
   14d64:	92 e2       	ldi	r25, 0x22	; 34
   14d66:	9c 01       	movw	r18, r24
   14d68:	40 e0       	ldi	r20, 0x00	; 0
   14d6a:	2c 8b       	std	Y+20, r18	; 0x14
   14d6c:	3d 8b       	std	Y+21, r19	; 0x15
   14d6e:	4e 8b       	std	Y+22, r20	; 0x16
   14d70:	82 e6       	ldi	r24, 0x62	; 98
   14d72:	92 e2       	ldi	r25, 0x22	; 34
   14d74:	3c 01       	movw	r6, r24
   14d76:	81 2c       	mov	r8, r1
   14d78:	80 e7       	ldi	r24, 0x70	; 112
   14d7a:	92 e2       	ldi	r25, 0x22	; 34
   14d7c:	5c 01       	movw	r10, r24
   14d7e:	c1 2c       	mov	r12, r1
   14d80:	8c e8       	ldi	r24, 0x8C	; 140
   14d82:	92 e2       	ldi	r25, 0x22	; 34
   14d84:	1c 01       	movw	r2, r24
   14d86:	41 2c       	mov	r4, r1
   14d88:	2a 85       	ldd	r18, Y+10	; 0x0a
   14d8a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14d8c:	87 01       	movw	r16, r14
   14d8e:	e2 16       	cp	r14, r18
   14d90:	f3 06       	cpc	r15, r19
   14d92:	0c f0       	brlt	.+2      	; 0x14d96 <SS80_Command_State+0x106>
   14d94:	b6 c1       	rjmp	.+876    	; 0x15102 <SS80_Command_State+0x472>
   14d96:	0f 5f       	subi	r16, 0xFF	; 255
   14d98:	1f 4f       	sbci	r17, 0xFF	; 255
   14d9a:	f7 01       	movw	r30, r14
   14d9c:	ef 50       	subi	r30, 0x0F	; 15
   14d9e:	f2 4e       	sbci	r31, 0xE2	; 226
   14da0:	80 81       	ld	r24, Z
   14da2:	28 2f       	mov	r18, r24
   14da4:	30 e0       	ldi	r19, 0x00	; 0
   14da6:	a9 01       	movw	r20, r18
   14da8:	40 52       	subi	r20, 0x20	; 32
   14daa:	51 09       	sbc	r21, r1
   14dac:	40 31       	cpi	r20, 0x10	; 16
   14dae:	51 05       	cpc	r21, r1
   14db0:	98 f4       	brcc	.+38     	; 0x14dd8 <SS80_Command_State+0x148>
   14db2:	80 52       	subi	r24, 0x20	; 32
   14db4:	1d df       	rcall	.-454    	; 0x14bf0 <SS80_Check_Unit>
   14db6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14dba:	85 ff       	sbrs	r24, 5
   14dbc:	a0 c1       	rjmp	.+832    	; 0x150fe <SS80_Command_State+0x46e>
   14dbe:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14dc2:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14dc6:	85 81       	ldd	r24, Z+5	; 0x05
   14dc8:	90 e0       	ldi	r25, 0x00	; 0
   14dca:	ed b7       	in	r30, 0x3d	; 61
   14dcc:	fe b7       	in	r31, 0x3e	; 62
   14dce:	95 83       	std	Z+5, r25	; 0x05
   14dd0:	84 83       	std	Z+4, r24	; 0x04
   14dd2:	83 ef       	ldi	r24, 0xF3	; 243
   14dd4:	92 e2       	ldi	r25, 0x22	; 34
   14dd6:	19 c0       	rjmp	.+50     	; 0x14e0a <SS80_Command_State+0x17a>
   14dd8:	a9 01       	movw	r20, r18
   14dda:	40 54       	subi	r20, 0x40	; 64
   14ddc:	51 09       	sbc	r21, r1
   14dde:	40 31       	cpi	r20, 0x10	; 16
   14de0:	51 05       	cpc	r21, r1
   14de2:	d0 f4       	brcc	.+52     	; 0x14e18 <SS80_Command_State+0x188>
   14de4:	80 54       	subi	r24, 0x40	; 64
   14de6:	2d df       	rcall	.-422    	; 0x14c42 <SS80_Check_Volume>
   14de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14dec:	85 ff       	sbrs	r24, 5
   14dee:	87 c1       	rjmp	.+782    	; 0x150fe <SS80_Command_State+0x46e>
   14df0:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14df4:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14df8:	86 81       	ldd	r24, Z+6	; 0x06
   14dfa:	90 e0       	ldi	r25, 0x00	; 0
   14dfc:	ed b7       	in	r30, 0x3d	; 61
   14dfe:	fe b7       	in	r31, 0x3e	; 62
   14e00:	95 83       	std	Z+5, r25	; 0x05
   14e02:	84 83       	std	Z+4, r24	; 0x04
   14e04:	2a ed       	ldi	r18, 0xDA	; 218
   14e06:	32 e2       	ldi	r19, 0x22	; 34
   14e08:	c9 01       	movw	r24, r18
   14e0a:	a0 e0       	ldi	r26, 0x00	; 0
   14e0c:	81 83       	std	Z+1, r24	; 0x01
   14e0e:	92 83       	std	Z+2, r25	; 0x02
   14e10:	a3 83       	std	Z+3, r26	; 0x03
   14e12:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14e16:	73 c1       	rjmp	.+742    	; 0x150fe <SS80_Command_State+0x46e>
   14e18:	21 15       	cp	r18, r1
   14e1a:	31 05       	cpc	r19, r1
   14e1c:	79 f4       	brne	.+30     	; 0x14e3c <SS80_Command_State+0x1ac>
   14e1e:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14e22:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14e26:	81 e0       	ldi	r24, 0x01	; 1
   14e28:	90 e0       	ldi	r25, 0x00	; 0
   14e2a:	91 83       	std	Z+1, r25	; 0x01
   14e2c:	80 83       	st	Z, r24
   14e2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e32:	85 ff       	sbrs	r24, 5
   14e34:	66 c1       	rjmp	.+716    	; 0x15102 <SS80_Command_State+0x472>
   14e36:	82 ec       	ldi	r24, 0xC2	; 194
   14e38:	92 e2       	ldi	r25, 0x22	; 34
   14e3a:	0f c0       	rjmp	.+30     	; 0x14e5a <SS80_Command_State+0x1ca>
   14e3c:	22 30       	cpi	r18, 0x02	; 2
   14e3e:	31 05       	cpc	r19, r1
   14e40:	a9 f4       	brne	.+42     	; 0x14e6c <SS80_Command_State+0x1dc>
   14e42:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14e46:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14e4a:	31 83       	std	Z+1, r19	; 0x01
   14e4c:	20 83       	st	Z, r18
   14e4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e52:	85 ff       	sbrs	r24, 5
   14e54:	56 c1       	rjmp	.+684    	; 0x15102 <SS80_Command_State+0x472>
   14e56:	89 ea       	ldi	r24, 0xA9	; 169
   14e58:	92 e2       	ldi	r25, 0x22	; 34
   14e5a:	a0 e0       	ldi	r26, 0x00	; 0
   14e5c:	ed b7       	in	r30, 0x3d	; 61
   14e5e:	fe b7       	in	r31, 0x3e	; 62
   14e60:	81 83       	std	Z+1, r24	; 0x01
   14e62:	92 83       	std	Z+2, r25	; 0x02
   14e64:	a3 83       	std	Z+3, r26	; 0x03
   14e66:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14e6a:	4b c1       	rjmp	.+662    	; 0x15102 <SS80_Command_State+0x472>
   14e6c:	20 31       	cpi	r18, 0x10	; 16
   14e6e:	31 05       	cpc	r19, r1
   14e70:	b1 f5       	brne	.+108    	; 0x14ede <SS80_Command_State+0x24e>
   14e72:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <SS80s>
   14e76:	30 91 6e 1a 	lds	r19, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14e7a:	3d 87       	std	Y+13, r19	; 0x0d
   14e7c:	2c 87       	std	Y+12, r18	; 0x0c
   14e7e:	46 e0       	ldi	r20, 0x06	; 6
   14e80:	50 e0       	ldi	r21, 0x00	; 0
   14e82:	b8 01       	movw	r22, r16
   14e84:	81 ef       	ldi	r24, 0xF1	; 241
   14e86:	9d e1       	ldi	r25, 0x1D	; 29
   14e88:	0e 94 ca bd 	call	0x17b94	; 0x17b94 <B2V_MSB>
   14e8c:	ec 85       	ldd	r30, Y+12	; 0x0c
   14e8e:	fd 85       	ldd	r31, Y+13	; 0x0d
   14e90:	67 83       	std	Z+7, r22	; 0x07
   14e92:	70 87       	std	Z+8, r23	; 0x08
   14e94:	81 87       	std	Z+9, r24	; 0x09
   14e96:	92 87       	std	Z+10, r25	; 0x0a
   14e98:	87 01       	movw	r16, r14
   14e9a:	09 5f       	subi	r16, 0xF9	; 249
   14e9c:	1f 4f       	sbci	r17, 0xFF	; 255
   14e9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ea2:	85 ff       	sbrs	r24, 5
   14ea4:	2c c1       	rjmp	.+600    	; 0x150fe <SS80_Command_State+0x46e>
   14ea6:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <SS80s>
   14eaa:	30 91 6e 1a 	lds	r19, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14eae:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <SS80p>
   14eb2:	90 91 70 1a 	lds	r25, 0x1A70	; 0x801a70 <SS80p+0x1>
   14eb6:	fc 01       	movw	r30, r24
   14eb8:	a0 89       	ldd	r26, Z+16	; 0x10
   14eba:	b1 89       	ldd	r27, Z+17	; 0x11
   14ebc:	f9 01       	movw	r30, r18
   14ebe:	27 81       	ldd	r18, Z+7	; 0x07
   14ec0:	30 85       	ldd	r19, Z+8	; 0x08
   14ec2:	41 85       	ldd	r20, Z+9	; 0x09
   14ec4:	52 85       	ldd	r21, Z+10	; 0x0a
   14ec6:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
   14eca:	ed b7       	in	r30, 0x3d	; 61
   14ecc:	fe b7       	in	r31, 0x3e	; 62
   14ece:	64 83       	std	Z+4, r22	; 0x04
   14ed0:	75 83       	std	Z+5, r23	; 0x05
   14ed2:	86 83       	std	Z+6, r24	; 0x06
   14ed4:	97 83       	std	Z+7, r25	; 0x07
   14ed6:	21 82       	std	Z+1, r2	; 0x01
   14ed8:	32 82       	std	Z+2, r3	; 0x02
   14eda:	43 82       	std	Z+3, r4	; 0x03
   14edc:	2e c0       	rjmp	.+92     	; 0x14f3a <SS80_Command_State+0x2aa>
   14ede:	28 31       	cpi	r18, 0x18	; 24
   14ee0:	31 05       	cpc	r19, r1
   14ee2:	71 f5       	brne	.+92     	; 0x14f40 <SS80_Command_State+0x2b0>
   14ee4:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <SS80s>
   14ee8:	30 91 6e 1a 	lds	r19, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14eec:	3d 87       	std	Y+13, r19	; 0x0d
   14eee:	2c 87       	std	Y+12, r18	; 0x0c
   14ef0:	44 e0       	ldi	r20, 0x04	; 4
   14ef2:	50 e0       	ldi	r21, 0x00	; 0
   14ef4:	b8 01       	movw	r22, r16
   14ef6:	81 ef       	ldi	r24, 0xF1	; 241
   14ef8:	9d e1       	ldi	r25, 0x1D	; 29
   14efa:	0e 94 ca bd 	call	0x17b94	; 0x17b94 <B2V_MSB>
   14efe:	ec 85       	ldd	r30, Y+12	; 0x0c
   14f00:	fd 85       	ldd	r31, Y+13	; 0x0d
   14f02:	63 87       	std	Z+11, r22	; 0x0b
   14f04:	74 87       	std	Z+12, r23	; 0x0c
   14f06:	85 87       	std	Z+13, r24	; 0x0d
   14f08:	96 87       	std	Z+14, r25	; 0x0e
   14f0a:	87 01       	movw	r16, r14
   14f0c:	0b 5f       	subi	r16, 0xFB	; 251
   14f0e:	1f 4f       	sbci	r17, 0xFF	; 255
   14f10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f14:	85 ff       	sbrs	r24, 5
   14f16:	f3 c0       	rjmp	.+486    	; 0x150fe <SS80_Command_State+0x46e>
   14f18:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   14f1c:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   14f20:	83 85       	ldd	r24, Z+11	; 0x0b
   14f22:	94 85       	ldd	r25, Z+12	; 0x0c
   14f24:	a5 85       	ldd	r26, Z+13	; 0x0d
   14f26:	b6 85       	ldd	r27, Z+14	; 0x0e
   14f28:	ed b7       	in	r30, 0x3d	; 61
   14f2a:	fe b7       	in	r31, 0x3e	; 62
   14f2c:	84 83       	std	Z+4, r24	; 0x04
   14f2e:	95 83       	std	Z+5, r25	; 0x05
   14f30:	a6 83       	std	Z+6, r26	; 0x06
   14f32:	b7 83       	std	Z+7, r27	; 0x07
   14f34:	a1 82       	std	Z+1, r10	; 0x01
   14f36:	b2 82       	std	Z+2, r11	; 0x02
   14f38:	c3 82       	std	Z+3, r12	; 0x03
   14f3a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14f3e:	df c0       	rjmp	.+446    	; 0x150fe <SS80_Command_State+0x46e>
   14f40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14f48:	24 33       	cpi	r18, 0x34	; 52
   14f4a:	31 05       	cpc	r19, r1
   14f4c:	41 f4       	brne	.+16     	; 0x14f5e <SS80_Command_State+0x2ce>
   14f4e:	85 ff       	sbrs	r24, 5
   14f50:	d6 c0       	rjmp	.+428    	; 0x150fe <SS80_Command_State+0x46e>
   14f52:	ed b7       	in	r30, 0x3d	; 61
   14f54:	fe b7       	in	r31, 0x3e	; 62
   14f56:	61 82       	std	Z+1, r6	; 0x01
   14f58:	72 82       	std	Z+2, r7	; 0x02
   14f5a:	83 82       	std	Z+3, r8	; 0x03
   14f5c:	2b c0       	rjmp	.+86     	; 0x14fb4 <SS80_Command_State+0x324>
   14f5e:	29 33       	cpi	r18, 0x39	; 57
   14f60:	31 05       	cpc	r19, r1
   14f62:	49 f4       	brne	.+18     	; 0x14f76 <SS80_Command_State+0x2e6>
   14f64:	87 01       	movw	r16, r14
   14f66:	0d 5f       	subi	r16, 0xFD	; 253
   14f68:	1f 4f       	sbci	r17, 0xFF	; 255
   14f6a:	85 ff       	sbrs	r24, 5
   14f6c:	c8 c0       	rjmp	.+400    	; 0x150fe <SS80_Command_State+0x46e>
   14f6e:	2c 89       	ldd	r18, Y+20	; 0x14
   14f70:	3d 89       	ldd	r19, Y+21	; 0x15
   14f72:	4e 89       	ldd	r20, Y+22	; 0x16
   14f74:	1a c0       	rjmp	.+52     	; 0x14faa <SS80_Command_State+0x31a>
   14f76:	2b 33       	cpi	r18, 0x3B	; 59
   14f78:	31 05       	cpc	r19, r1
   14f7a:	49 f4       	brne	.+18     	; 0x14f8e <SS80_Command_State+0x2fe>
   14f7c:	87 01       	movw	r16, r14
   14f7e:	0e 5f       	subi	r16, 0xFE	; 254
   14f80:	1f 4f       	sbci	r17, 0xFF	; 255
   14f82:	85 ff       	sbrs	r24, 5
   14f84:	bc c0       	rjmp	.+376    	; 0x150fe <SS80_Command_State+0x46e>
   14f86:	29 89       	ldd	r18, Y+17	; 0x11
   14f88:	3a 89       	ldd	r19, Y+18	; 0x12
   14f8a:	4b 89       	ldd	r20, Y+19	; 0x13
   14f8c:	0e c0       	rjmp	.+28     	; 0x14faa <SS80_Command_State+0x31a>
   14f8e:	28 34       	cpi	r18, 0x48	; 72
   14f90:	31 05       	cpc	r19, r1
   14f92:	99 f4       	brne	.+38     	; 0x14fba <SS80_Command_State+0x32a>
   14f94:	87 01       	movw	r16, r14
   14f96:	0e 5f       	subi	r16, 0xFE	; 254
   14f98:	1f 4f       	sbci	r17, 0xFF	; 255
   14f9a:	80 73       	andi	r24, 0x30	; 48
   14f9c:	99 27       	eor	r25, r25
   14f9e:	89 2b       	or	r24, r25
   14fa0:	09 f4       	brne	.+2      	; 0x14fa4 <SS80_Command_State+0x314>
   14fa2:	ad c0       	rjmp	.+346    	; 0x150fe <SS80_Command_State+0x46e>
   14fa4:	2e 85       	ldd	r18, Y+14	; 0x0e
   14fa6:	3f 85       	ldd	r19, Y+15	; 0x0f
   14fa8:	48 89       	ldd	r20, Y+16	; 0x10
   14faa:	ed b7       	in	r30, 0x3d	; 61
   14fac:	fe b7       	in	r31, 0x3e	; 62
   14fae:	21 83       	std	Z+1, r18	; 0x01
   14fb0:	32 83       	std	Z+2, r19	; 0x02
   14fb2:	43 83       	std	Z+3, r20	; 0x03
   14fb4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   14fb8:	a2 c0       	rjmp	.+324    	; 0x150fe <SS80_Command_State+0x46e>
   14fba:	24 30       	cpi	r18, 0x04	; 4
   14fbc:	31 05       	cpc	r19, r1
   14fbe:	41 f4       	brne	.+16     	; 0x14fd0 <SS80_Command_State+0x340>
   14fc0:	80 73       	andi	r24, 0x30	; 48
   14fc2:	99 27       	eor	r25, r25
   14fc4:	89 2b       	or	r24, r25
   14fc6:	09 f4       	brne	.+2      	; 0x14fca <SS80_Command_State+0x33a>
   14fc8:	9c c0       	rjmp	.+312    	; 0x15102 <SS80_Command_State+0x472>
   14fca:	8c ee       	ldi	r24, 0xEC	; 236
   14fcc:	91 e2       	ldi	r25, 0x21	; 33
   14fce:	45 cf       	rjmp	.-374    	; 0x14e5a <SS80_Command_State+0x1ca>
   14fd0:	2e 30       	cpi	r18, 0x0E	; 14
   14fd2:	31 05       	cpc	r19, r1
   14fd4:	29 f4       	brne	.+10     	; 0x14fe0 <SS80_Command_State+0x350>
   14fd6:	85 ff       	sbrs	r24, 5
   14fd8:	94 c0       	rjmp	.+296    	; 0x15102 <SS80_Command_State+0x472>
   14fda:	86 ed       	ldi	r24, 0xD6	; 214
   14fdc:	91 e2       	ldi	r25, 0x21	; 33
   14fde:	3d cf       	rjmp	.-390    	; 0x14e5a <SS80_Command_State+0x1ca>
   14fe0:	2f 30       	cpi	r18, 0x0F	; 15
   14fe2:	31 05       	cpc	r19, r1
   14fe4:	29 f4       	brne	.+10     	; 0x14ff0 <SS80_Command_State+0x360>
   14fe6:	85 ff       	sbrs	r24, 5
   14fe8:	8c c0       	rjmp	.+280    	; 0x15102 <SS80_Command_State+0x472>
   14fea:	89 eb       	ldi	r24, 0xB9	; 185
   14fec:	91 e2       	ldi	r25, 0x21	; 33
   14fee:	35 cf       	rjmp	.-406    	; 0x14e5a <SS80_Command_State+0x1ca>
   14ff0:	21 33       	cpi	r18, 0x31	; 49
   14ff2:	31 05       	cpc	r19, r1
   14ff4:	59 f4       	brne	.+22     	; 0x1500c <SS80_Command_State+0x37c>
   14ff6:	87 01       	movw	r16, r14
   14ff8:	0d 5f       	subi	r16, 0xFD	; 253
   14ffa:	1f 4f       	sbci	r17, 0xFF	; 255
   14ffc:	80 73       	andi	r24, 0x30	; 48
   14ffe:	99 27       	eor	r25, r25
   15000:	89 2b       	or	r24, r25
   15002:	09 f4       	brne	.+2      	; 0x15006 <SS80_Command_State+0x376>
   15004:	7e c0       	rjmp	.+252    	; 0x15102 <SS80_Command_State+0x472>
   15006:	8d e9       	ldi	r24, 0x9D	; 157
   15008:	91 e2       	ldi	r25, 0x21	; 33
   1500a:	27 cf       	rjmp	.-434    	; 0x14e5a <SS80_Command_State+0x1ca>
   1500c:	25 33       	cpi	r18, 0x35	; 53
   1500e:	31 05       	cpc	r19, r1
   15010:	69 f4       	brne	.+26     	; 0x1502c <SS80_Command_State+0x39c>
   15012:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15016:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   1501a:	24 e0       	ldi	r18, 0x04	; 4
   1501c:	30 e0       	ldi	r19, 0x00	; 0
   1501e:	31 83       	std	Z+1, r19	; 0x01
   15020:	20 83       	st	Z, r18
   15022:	85 ff       	sbrs	r24, 5
   15024:	6e c0       	rjmp	.+220    	; 0x15102 <SS80_Command_State+0x472>
   15026:	8c e8       	ldi	r24, 0x8C	; 140
   15028:	91 e2       	ldi	r25, 0x21	; 33
   1502a:	17 cf       	rjmp	.-466    	; 0x14e5a <SS80_Command_State+0x1ca>
   1502c:	27 33       	cpi	r18, 0x37	; 55
   1502e:	31 05       	cpc	r19, r1
   15030:	59 f4       	brne	.+22     	; 0x15048 <SS80_Command_State+0x3b8>
   15032:	87 01       	movw	r16, r14
   15034:	0d 5f       	subi	r16, 0xFD	; 253
   15036:	1f 4f       	sbci	r17, 0xFF	; 255
   15038:	80 73       	andi	r24, 0x30	; 48
   1503a:	99 27       	eor	r25, r25
   1503c:	89 2b       	or	r24, r25
   1503e:	09 f4       	brne	.+2      	; 0x15042 <SS80_Command_State+0x3b2>
   15040:	60 c0       	rjmp	.+192    	; 0x15102 <SS80_Command_State+0x472>
   15042:	8e e6       	ldi	r24, 0x6E	; 110
   15044:	91 e2       	ldi	r25, 0x21	; 33
   15046:	09 cf       	rjmp	.-494    	; 0x14e5a <SS80_Command_State+0x1ca>
   15048:	2e 33       	cpi	r18, 0x3E	; 62
   1504a:	31 05       	cpc	r19, r1
   1504c:	c1 f4       	brne	.+48     	; 0x1507e <SS80_Command_State+0x3ee>
   1504e:	80 73       	andi	r24, 0x30	; 48
   15050:	99 27       	eor	r25, r25
   15052:	89 2b       	or	r24, r25
   15054:	81 f0       	breq	.+32     	; 0x15076 <SS80_Command_State+0x3e6>
   15056:	8f e4       	ldi	r24, 0x4F	; 79
   15058:	91 e2       	ldi	r25, 0x21	; 33
   1505a:	a0 e0       	ldi	r26, 0x00	; 0
   1505c:	ed b7       	in	r30, 0x3d	; 61
   1505e:	fe b7       	in	r31, 0x3e	; 62
   15060:	81 83       	std	Z+1, r24	; 0x01
   15062:	92 83       	std	Z+2, r25	; 0x02
   15064:	a3 83       	std	Z+3, r26	; 0x03
   15066:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1506a:	69 e7       	ldi	r22, 0x79	; 121
   1506c:	70 e1       	ldi	r23, 0x10	; 16
   1506e:	c8 01       	movw	r24, r16
   15070:	8f 50       	subi	r24, 0x0F	; 15
   15072:	92 4e       	sbci	r25, 0xE2	; 226
   15074:	69 dc       	rcall	.-1838   	; 0x14948 <SS80_display_extended_status>
   15076:	87 01       	movw	r16, r14
   15078:	07 5f       	subi	r16, 0xF7	; 247
   1507a:	1f 4f       	sbci	r17, 0xFF	; 255
   1507c:	42 c0       	rjmp	.+132    	; 0x15102 <SS80_Command_State+0x472>
   1507e:	2c 34       	cpi	r18, 0x4C	; 76
   15080:	31 05       	cpc	r19, r1
   15082:	39 f4       	brne	.+14     	; 0x15092 <SS80_Command_State+0x402>
   15084:	80 73       	andi	r24, 0x30	; 48
   15086:	99 27       	eor	r25, r25
   15088:	89 2b       	or	r24, r25
   1508a:	d9 f1       	breq	.+118    	; 0x15102 <SS80_Command_State+0x472>
   1508c:	84 e3       	ldi	r24, 0x34	; 52
   1508e:	91 e2       	ldi	r25, 0x21	; 33
   15090:	e4 ce       	rjmp	.-568    	; 0x14e5a <SS80_Command_State+0x1ca>
   15092:	2d 34       	cpi	r18, 0x4D	; 77
   15094:	31 05       	cpc	r19, r1
   15096:	39 f4       	brne	.+14     	; 0x150a6 <SS80_Command_State+0x416>
   15098:	80 73       	andi	r24, 0x30	; 48
   1509a:	99 27       	eor	r25, r25
   1509c:	89 2b       	or	r24, r25
   1509e:	89 f1       	breq	.+98     	; 0x15102 <SS80_Command_State+0x472>
   150a0:	8b e1       	ldi	r24, 0x1B	; 27
   150a2:	91 e2       	ldi	r25, 0x21	; 33
   150a4:	da ce       	rjmp	.-588    	; 0x14e5a <SS80_Command_State+0x1ca>
   150a6:	2d 30       	cpi	r18, 0x0D	; 13
   150a8:	31 05       	cpc	r19, r1
   150aa:	69 f4       	brne	.+26     	; 0x150c6 <SS80_Command_State+0x436>
   150ac:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   150b0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   150b4:	23 e0       	ldi	r18, 0x03	; 3
   150b6:	30 e0       	ldi	r19, 0x00	; 0
   150b8:	31 83       	std	Z+1, r19	; 0x01
   150ba:	20 83       	st	Z, r18
   150bc:	85 ff       	sbrs	r24, 5
   150be:	21 c0       	rjmp	.+66     	; 0x15102 <SS80_Command_State+0x472>
   150c0:	84 e0       	ldi	r24, 0x04	; 4
   150c2:	91 e2       	ldi	r25, 0x21	; 33
   150c4:	ca ce       	rjmp	.-620    	; 0x14e5a <SS80_Command_State+0x1ca>
   150c6:	23 33       	cpi	r18, 0x33	; 51
   150c8:	31 05       	cpc	r19, r1
   150ca:	51 f4       	brne	.+20     	; 0x150e0 <SS80_Command_State+0x450>
   150cc:	87 01       	movw	r16, r14
   150ce:	0c 5f       	subi	r16, 0xFC	; 252
   150d0:	1f 4f       	sbci	r17, 0xFF	; 255
   150d2:	80 73       	andi	r24, 0x30	; 48
   150d4:	99 27       	eor	r25, r25
   150d6:	89 2b       	or	r24, r25
   150d8:	a1 f0       	breq	.+40     	; 0x15102 <SS80_Command_State+0x472>
   150da:	81 ee       	ldi	r24, 0xE1	; 225
   150dc:	90 e2       	ldi	r25, 0x20	; 32
   150de:	bd ce       	rjmp	.-646    	; 0x14e5a <SS80_Command_State+0x1ca>
   150e0:	80 ff       	sbrs	r24, 0
   150e2:	28 c0       	rjmp	.+80     	; 0x15134 <SS80_Command_State+0x4a4>
   150e4:	ed b7       	in	r30, 0x3d	; 61
   150e6:	fe b7       	in	r31, 0x3e	; 62
   150e8:	35 83       	std	Z+5, r19	; 0x05
   150ea:	24 83       	std	Z+4, r18	; 0x04
   150ec:	81 ec       	ldi	r24, 0xC1	; 193
   150ee:	90 e2       	ldi	r25, 0x20	; 32
   150f0:	a0 e0       	ldi	r26, 0x00	; 0
   150f2:	81 83       	std	Z+1, r24	; 0x01
   150f4:	92 83       	std	Z+2, r25	; 0x02
   150f6:	a3 83       	std	Z+3, r26	; 0x03
   150f8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   150fc:	02 c0       	rjmp	.+4      	; 0x15102 <SS80_Command_State+0x472>
   150fe:	78 01       	movw	r14, r16
   15100:	43 ce       	rjmp	.-890    	; 0x14d88 <SS80_Command_State+0xf8>
   15102:	8a 85       	ldd	r24, Y+10	; 0x0a
   15104:	9b 85       	ldd	r25, Y+11	; 0x0b
   15106:	08 17       	cp	r16, r24
   15108:	19 07       	cpc	r17, r25
   1510a:	a1 f0       	breq	.+40     	; 0x15134 <SS80_Command_State+0x4a4>
   1510c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15110:	80 ff       	sbrs	r24, 0
   15112:	10 c0       	rjmp	.+32     	; 0x15134 <SS80_Command_State+0x4a4>
   15114:	2a 85       	ldd	r18, Y+10	; 0x0a
   15116:	3b 85       	ldd	r19, Y+11	; 0x0b
   15118:	ed b7       	in	r30, 0x3d	; 61
   1511a:	fe b7       	in	r31, 0x3e	; 62
   1511c:	37 83       	std	Z+7, r19	; 0x07
   1511e:	26 83       	std	Z+6, r18	; 0x06
   15120:	15 83       	std	Z+5, r17	; 0x05
   15122:	04 83       	std	Z+4, r16	; 0x04
   15124:	89 e8       	ldi	r24, 0x89	; 137
   15126:	90 e2       	ldi	r25, 0x20	; 32
   15128:	a0 e0       	ldi	r26, 0x00	; 0
   1512a:	81 83       	std	Z+1, r24	; 0x01
   1512c:	92 83       	std	Z+2, r25	; 0x02
   1512e:	a3 83       	std	Z+3, r26	; 0x03
   15130:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15134:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15138:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1513c:	81 81       	ldd	r24, Z+1	; 0x01
   1513e:	90 e0       	ldi	r25, 0x00	; 0
   15140:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   15144:	88 85       	ldd	r24, Y+8	; 0x08
   15146:	99 85       	ldd	r25, Y+9	; 0x09
   15148:	88 27       	eor	r24, r24
   1514a:	90 7d       	andi	r25, 0xD0	; 208
   1514c:	02 c0       	rjmp	.+4      	; 0x15152 <SS80_Command_State+0x4c2>
   1514e:	80 e0       	ldi	r24, 0x00	; 0
   15150:	90 e0       	ldi	r25, 0x00	; 0
   15152:	66 96       	adiw	r28, 0x16	; 22
   15154:	0f b6       	in	r0, 0x3f	; 63
   15156:	f8 94       	cli
   15158:	de bf       	out	0x3e, r29	; 62
   1515a:	0f be       	out	0x3f, r0	; 63
   1515c:	cd bf       	out	0x3d, r28	; 61
   1515e:	df 91       	pop	r29
   15160:	cf 91       	pop	r28
   15162:	1f 91       	pop	r17
   15164:	0f 91       	pop	r16
   15166:	ff 90       	pop	r15
   15168:	ef 90       	pop	r14
   1516a:	cf 90       	pop	r12
   1516c:	bf 90       	pop	r11
   1516e:	af 90       	pop	r10
   15170:	8f 90       	pop	r8
   15172:	7f 90       	pop	r7
   15174:	6f 90       	pop	r6
   15176:	4f 90       	pop	r4
   15178:	3f 90       	pop	r3
   1517a:	2f 90       	pop	r2
   1517c:	08 95       	ret

0001517e <SS80_cmd_seek>:
   1517e:	a7 e0       	ldi	r26, 0x07	; 7
   15180:	b0 e0       	ldi	r27, 0x00	; 0
   15182:	e5 ec       	ldi	r30, 0xC5	; 197
   15184:	f8 ea       	ldi	r31, 0xA8	; 168
   15186:	0c 94 9d e3 	jmp	0x1c73a	; 0x1c73a <__prologue_saves__+0x4>
   1518a:	c0 91 6d 1a 	lds	r28, 0x1A6D	; 0x801a6d <SS80s>
   1518e:	d0 91 6e 1a 	lds	r29, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15192:	8f 80       	ldd	r8, Y+7	; 0x07
   15194:	98 84       	ldd	r9, Y+8	; 0x08
   15196:	a9 84       	ldd	r10, Y+9	; 0x09
   15198:	ba 84       	ldd	r11, Y+10	; 0x0a
   1519a:	00 91 6f 1a 	lds	r16, 0x1A6F	; 0x801a6f <SS80p>
   1519e:	10 91 70 1a 	lds	r17, 0x1A70	; 0x801a70 <SS80p+0x1>
   151a2:	f8 01       	movw	r30, r16
   151a4:	c0 88       	ldd	r12, Z+16	; 0x10
   151a6:	d1 88       	ldd	r13, Z+17	; 0x11
   151a8:	e1 2c       	mov	r14, r1
   151aa:	f1 2c       	mov	r15, r1
   151ac:	6b 85       	ldd	r22, Y+11	; 0x0b
   151ae:	7c 85       	ldd	r23, Y+12	; 0x0c
   151b0:	8d 85       	ldd	r24, Y+13	; 0x0d
   151b2:	9e 85       	ldd	r25, Y+14	; 0x0e
   151b4:	a7 01       	movw	r20, r14
   151b6:	96 01       	movw	r18, r12
   151b8:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
   151bc:	da 01       	movw	r26, r20
   151be:	c9 01       	movw	r24, r18
   151c0:	88 0d       	add	r24, r8
   151c2:	99 1d       	adc	r25, r9
   151c4:	aa 1d       	adc	r26, r10
   151c6:	bb 1d       	adc	r27, r11
   151c8:	f8 01       	movw	r30, r16
   151ca:	46 a0       	ldd	r4, Z+38	; 0x26
   151cc:	57 a0       	ldd	r5, Z+39	; 0x27
   151ce:	60 a4       	ldd	r6, Z+40	; 0x28
   151d0:	71 a4       	ldd	r7, Z+41	; 0x29
   151d2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   151d6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   151da:	48 16       	cp	r4, r24
   151dc:	59 06       	cpc	r5, r25
   151de:	6a 06       	cpc	r6, r26
   151e0:	7b 06       	cpc	r7, r27
   151e2:	f0 f4       	brcc	.+60     	; 0x15220 <SS80_cmd_seek+0xa2>
   151e4:	81 e0       	ldi	r24, 0x01	; 1
   151e6:	8a 83       	std	Y+2, r24	; 0x02
   151e8:	8b 81       	ldd	r24, Y+3	; 0x03
   151ea:	9c 81       	ldd	r25, Y+4	; 0x04
   151ec:	84 60       	ori	r24, 0x04	; 4
   151ee:	9c 83       	std	Y+4, r25	; 0x04
   151f0:	8b 83       	std	Y+3, r24	; 0x03
   151f2:	40 ff       	sbrs	r20, 0
   151f4:	31 c0       	rjmp	.+98     	; 0x15258 <SS80_cmd_seek+0xda>
   151f6:	a0 89       	ldd	r26, Z+16	; 0x10
   151f8:	b1 89       	ldd	r27, Z+17	; 0x11
   151fa:	a5 01       	movw	r20, r10
   151fc:	94 01       	movw	r18, r8
   151fe:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
   15202:	ed b7       	in	r30, 0x3d	; 61
   15204:	fe b7       	in	r31, 0x3e	; 62
   15206:	64 83       	std	Z+4, r22	; 0x04
   15208:	75 83       	std	Z+5, r23	; 0x05
   1520a:	86 83       	std	Z+6, r24	; 0x06
   1520c:	97 83       	std	Z+7, r25	; 0x07
   1520e:	86 e4       	ldi	r24, 0x46	; 70
   15210:	9f e1       	ldi	r25, 0x1F	; 31
   15212:	a0 e0       	ldi	r26, 0x00	; 0
   15214:	81 83       	std	Z+1, r24	; 0x01
   15216:	92 83       	std	Z+2, r25	; 0x02
   15218:	a3 83       	std	Z+3, r26	; 0x03
   1521a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1521e:	1c c0       	rjmp	.+56     	; 0x15258 <SS80_cmd_seek+0xda>
   15220:	ca 01       	movw	r24, r20
   15222:	80 72       	andi	r24, 0x20	; 32
   15224:	99 27       	eor	r25, r25
   15226:	45 ff       	sbrs	r20, 5
   15228:	19 c0       	rjmp	.+50     	; 0x1525c <SS80_cmd_seek+0xde>
   1522a:	a5 01       	movw	r20, r10
   1522c:	94 01       	movw	r18, r8
   1522e:	c7 01       	movw	r24, r14
   15230:	b6 01       	movw	r22, r12
   15232:	0e 94 ec e2 	call	0x1c5d8	; 0x1c5d8 <__mulsi3>
   15236:	ed b7       	in	r30, 0x3d	; 61
   15238:	fe b7       	in	r31, 0x3e	; 62
   1523a:	64 83       	std	Z+4, r22	; 0x04
   1523c:	75 83       	std	Z+5, r23	; 0x05
   1523e:	86 83       	std	Z+6, r24	; 0x06
   15240:	97 83       	std	Z+7, r25	; 0x07
   15242:	82 e3       	ldi	r24, 0x32	; 50
   15244:	9f e1       	ldi	r25, 0x1F	; 31
   15246:	a0 e0       	ldi	r26, 0x00	; 0
   15248:	81 83       	std	Z+1, r24	; 0x01
   1524a:	92 83       	std	Z+2, r25	; 0x02
   1524c:	a3 83       	std	Z+3, r26	; 0x03
   1524e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15252:	80 e0       	ldi	r24, 0x00	; 0
   15254:	90 e0       	ldi	r25, 0x00	; 0
   15256:	02 c0       	rjmp	.+4      	; 0x1525c <SS80_cmd_seek+0xde>
   15258:	81 e0       	ldi	r24, 0x01	; 1
   1525a:	90 e0       	ldi	r25, 0x00	; 0
   1525c:	cd b7       	in	r28, 0x3d	; 61
   1525e:	de b7       	in	r29, 0x3e	; 62
   15260:	27 96       	adiw	r28, 0x07	; 7
   15262:	e0 e1       	ldi	r30, 0x10	; 16
   15264:	0c 94 b9 e3 	jmp	0x1c772	; 0x1c772 <__epilogue_restores__+0x4>

00015268 <SS80_locate_and_write>:
   15268:	a3 e1       	ldi	r26, 0x13	; 19
   1526a:	b0 e0       	ldi	r27, 0x00	; 0
   1526c:	ea e3       	ldi	r30, 0x3A	; 58
   1526e:	f9 ea       	ldi	r31, 0xA9	; 169
   15270:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   15274:	00 91 6d 1a 	lds	r16, 0x1A6D	; 0x801a6d <SS80s>
   15278:	10 91 6e 1a 	lds	r17, 0x1A6E	; 0x801a6e <SS80s+0x1>
   1527c:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <SS80p>
   15280:	90 91 70 1a 	lds	r25, 0x1A70	; 0x801a70 <SS80p+0x1>
   15284:	fc 01       	movw	r30, r24
   15286:	a0 89       	ldd	r26, Z+16	; 0x10
   15288:	b1 89       	ldd	r27, Z+17	; 0x11
   1528a:	f8 01       	movw	r30, r16
   1528c:	27 81       	ldd	r18, Z+7	; 0x07
   1528e:	30 85       	ldd	r19, Z+8	; 0x08
   15290:	41 85       	ldd	r20, Z+9	; 0x09
   15292:	52 85       	ldd	r21, Z+10	; 0x0a
   15294:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
   15298:	4b 01       	movw	r8, r22
   1529a:	5c 01       	movw	r10, r24
   1529c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152a0:	85 ff       	sbrs	r24, 5
   152a2:	16 c0       	rjmp	.+44     	; 0x152d0 <SS80_locate_and_write+0x68>
   152a4:	83 85       	ldd	r24, Z+11	; 0x0b
   152a6:	94 85       	ldd	r25, Z+12	; 0x0c
   152a8:	a5 85       	ldd	r26, Z+13	; 0x0d
   152aa:	b6 85       	ldd	r27, Z+14	; 0x0e
   152ac:	ed b7       	in	r30, 0x3d	; 61
   152ae:	fe b7       	in	r31, 0x3e	; 62
   152b0:	80 87       	std	Z+8, r24	; 0x08
   152b2:	91 87       	std	Z+9, r25	; 0x09
   152b4:	a2 87       	std	Z+10, r26	; 0x0a
   152b6:	b3 87       	std	Z+11, r27	; 0x0b
   152b8:	84 82       	std	Z+4, r8	; 0x04
   152ba:	95 82       	std	Z+5, r9	; 0x05
   152bc:	a6 82       	std	Z+6, r10	; 0x06
   152be:	b7 82       	std	Z+7, r11	; 0x07
   152c0:	89 ec       	ldi	r24, 0xC9	; 201
   152c2:	94 e2       	ldi	r25, 0x24	; 36
   152c4:	a0 e0       	ldi	r26, 0x00	; 0
   152c6:	81 83       	std	Z+1, r24	; 0x01
   152c8:	92 83       	std	Z+2, r25	; 0x02
   152ca:	a3 83       	std	Z+3, r26	; 0x03
   152cc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   152d0:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   152d4:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   152d8:	12 82       	std	Z+2, r1	; 0x02
   152da:	54 98       	cbi	0x0a, 4	; 10
   152dc:	4c 99       	sbic	0x09, 4	; 9
   152de:	03 c0       	rjmp	.+6      	; 0x152e6 <SS80_locate_and_write+0x7e>
   152e0:	80 e0       	ldi	r24, 0x00	; 0
   152e2:	90 e1       	ldi	r25, 0x10	; 16
   152e4:	4f c1       	rjmp	.+670    	; 0x15584 <SS80_locate_and_write+0x31c>
   152e6:	4b df       	rcall	.-362    	; 0x1517e <SS80_cmd_seek>
   152e8:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   152ec:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   152f0:	89 2b       	or	r24, r25
   152f2:	41 f0       	breq	.+16     	; 0x15304 <SS80_locate_and_write+0x9c>
   152f4:	83 81       	ldd	r24, Z+3	; 0x03
   152f6:	94 81       	ldd	r25, Z+4	; 0x04
   152f8:	82 60       	ori	r24, 0x02	; 2
   152fa:	94 83       	std	Z+4, r25	; 0x04
   152fc:	83 83       	std	Z+3, r24	; 0x03
   152fe:	01 e0       	ldi	r16, 0x01	; 1
   15300:	10 e0       	ldi	r17, 0x00	; 0
   15302:	02 c0       	rjmp	.+4      	; 0x15308 <SS80_locate_and_write+0xa0>
   15304:	00 e0       	ldi	r16, 0x00	; 0
   15306:	10 e0       	ldi	r17, 0x00	; 0
   15308:	23 84       	ldd	r2, Z+11	; 0x0b
   1530a:	34 84       	ldd	r3, Z+12	; 0x0c
   1530c:	1d 86       	std	Y+13, r1	; 0x0d
   1530e:	1c 86       	std	Y+12, r1	; 0x0c
   15310:	41 2c       	mov	r4, r1
   15312:	51 2c       	mov	r5, r1
   15314:	32 01       	movw	r6, r4
   15316:	8c e7       	ldi	r24, 0x7C	; 124
   15318:	94 e2       	ldi	r25, 0x24	; 36
   1531a:	9c 01       	movw	r18, r24
   1531c:	40 e0       	ldi	r20, 0x00	; 0
   1531e:	2e 87       	std	Y+14, r18	; 0x0e
   15320:	3f 87       	std	Y+15, r19	; 0x0f
   15322:	48 8b       	std	Y+16, r20	; 0x10
   15324:	82 ea       	ldi	r24, 0xA2	; 162
   15326:	94 e2       	ldi	r25, 0x24	; 36
   15328:	9c 01       	movw	r18, r24
   1532a:	40 e0       	ldi	r20, 0x00	; 0
   1532c:	29 8b       	std	Y+17, r18	; 0x11
   1532e:	3a 8b       	std	Y+18, r19	; 0x12
   15330:	4b 8b       	std	Y+19, r20	; 0x13
   15332:	12 14       	cp	r1, r2
   15334:	13 04       	cpc	r1, r3
   15336:	0c f0       	brlt	.+2      	; 0x1533a <SS80_locate_and_write+0xd2>
   15338:	f5 c0       	rjmp	.+490    	; 0x15524 <SS80_locate_and_write+0x2bc>
   1533a:	54 98       	cbi	0x0a, 4	; 10
   1533c:	4c 9b       	sbis	0x09, 4	; 9
   1533e:	d0 cf       	rjmp	.-96     	; 0x152e0 <SS80_locate_and_write+0x78>
   15340:	71 01       	movw	r14, r2
   15342:	31 e0       	ldi	r19, 0x01	; 1
   15344:	23 16       	cp	r2, r19
   15346:	33 06       	cpc	r3, r19
   15348:	1c f0       	brlt	.+6      	; 0x15350 <SS80_locate_and_write+0xe8>
   1534a:	e1 2c       	mov	r14, r1
   1534c:	ff 24       	eor	r15, r15
   1534e:	f3 94       	inc	r15
   15350:	e1 ef       	ldi	r30, 0xF1	; 241
   15352:	fd e1       	ldi	r31, 0x1D	; 29
   15354:	20 e0       	ldi	r18, 0x00	; 0
   15356:	32 e0       	ldi	r19, 0x02	; 2
   15358:	11 92       	st	Z+, r1
   1535a:	21 50       	subi	r18, 0x01	; 1
   1535c:	30 40       	sbci	r19, 0x00	; 0
   1535e:	e1 f7       	brne	.-8      	; 0x15358 <SS80_locate_and_write+0xf0>
   15360:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15364:	87 fd       	sbrc	r24, 7
   15366:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   1536a:	ae 01       	movw	r20, r28
   1536c:	44 5f       	subi	r20, 0xF4	; 244
   1536e:	5f 4f       	sbci	r21, 0xFF	; 255
   15370:	b7 01       	movw	r22, r14
   15372:	81 ef       	ldi	r24, 0xF1	; 241
   15374:	9d e1       	ldi	r25, 0x1D	; 29
   15376:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   1537a:	6c 01       	movw	r12, r24
   1537c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15380:	87 ff       	sbrs	r24, 7
   15382:	04 c0       	rjmp	.+8      	; 0x1538c <SS80_locate_and_write+0x124>
   15384:	85 e9       	ldi	r24, 0x95	; 149
   15386:	90 e1       	ldi	r25, 0x10	; 16
   15388:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   1538c:	ce 14       	cp	r12, r14
   1538e:	df 04       	cpc	r13, r15
   15390:	39 f1       	breq	.+78     	; 0x153e0 <SS80_locate_and_write+0x178>
   15392:	8c 85       	ldd	r24, Y+12	; 0x0c
   15394:	9d 85       	ldd	r25, Y+13	; 0x0d
   15396:	9c 01       	movw	r18, r24
   15398:	22 27       	eor	r18, r18
   1539a:	30 7d       	andi	r19, 0xD0	; 208
   1539c:	23 2b       	or	r18, r19
   1539e:	d1 f0       	breq	.+52     	; 0x153d4 <SS80_locate_and_write+0x16c>
   153a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153a4:	80 ff       	sbrs	r24, 0
   153a6:	0a c0       	rjmp	.+20     	; 0x153bc <SS80_locate_and_write+0x154>
   153a8:	86 eb       	ldi	r24, 0xB6	; 182
   153aa:	94 e2       	ldi	r25, 0x24	; 36
   153ac:	a0 e0       	ldi	r26, 0x00	; 0
   153ae:	ed b7       	in	r30, 0x3d	; 61
   153b0:	fe b7       	in	r31, 0x3e	; 62
   153b2:	81 83       	std	Z+1, r24	; 0x01
   153b4:	92 83       	std	Z+2, r25	; 0x02
   153b6:	a3 83       	std	Z+3, r26	; 0x03
   153b8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   153bc:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   153c0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   153c4:	83 81       	ldd	r24, Z+3	; 0x03
   153c6:	94 81       	ldd	r25, Z+4	; 0x04
   153c8:	82 60       	ori	r24, 0x02	; 2
   153ca:	94 83       	std	Z+4, r25	; 0x04
   153cc:	83 83       	std	Z+3, r24	; 0x03
   153ce:	81 e0       	ldi	r24, 0x01	; 1
   153d0:	82 83       	std	Z+2, r24	; 0x02
   153d2:	99 c0       	rjmp	.+306    	; 0x15506 <SS80_locate_and_write+0x29e>
   153d4:	c1 14       	cp	r12, r1
   153d6:	d1 04       	cpc	r13, r1
   153d8:	09 f0       	breq	.+2      	; 0x153dc <SS80_locate_and_write+0x174>
   153da:	d0 c0       	rjmp	.+416    	; 0x1557c <SS80_locate_and_write+0x314>
   153dc:	90 fd       	sbrc	r25, 0
   153de:	93 c0       	rjmp	.+294    	; 0x15506 <SS80_locate_and_write+0x29e>
   153e0:	01 15       	cp	r16, r1
   153e2:	11 05       	cpc	r17, r1
   153e4:	09 f0       	breq	.+2      	; 0x153e8 <SS80_locate_and_write+0x180>
   153e6:	84 c0       	rjmp	.+264    	; 0x154f0 <SS80_locate_and_write+0x288>
   153e8:	c1 14       	cp	r12, r1
   153ea:	d1 04       	cpc	r13, r1
   153ec:	09 f4       	brne	.+2      	; 0x153f0 <SS80_locate_and_write+0x188>
   153ee:	82 c0       	rjmp	.+260    	; 0x154f4 <SS80_locate_and_write+0x28c>
   153f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153f4:	86 fd       	sbrc	r24, 6
   153f6:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   153fa:	e0 90 6d 1a 	lds	r14, 0x1A6D	; 0x801a6d <SS80s>
   153fe:	f0 90 6e 1a 	lds	r15, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15402:	f3 e0       	ldi	r31, 0x03	; 3
   15404:	ef 0e       	add	r14, r31
   15406:	f1 1c       	adc	r15, r1
   15408:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1540c:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15410:	86 01       	movw	r16, r12
   15412:	21 ef       	ldi	r18, 0xF1	; 241
   15414:	3d e1       	ldi	r19, 0x1D	; 29
   15416:	b5 01       	movw	r22, r10
   15418:	a4 01       	movw	r20, r8
   1541a:	82 81       	ldd	r24, Z+2	; 0x02
   1541c:	93 81       	ldd	r25, Z+3	; 0x03
   1541e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <dbf_open_write>
   15422:	7c 01       	movw	r14, r24
   15424:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15428:	86 ff       	sbrs	r24, 6
   1542a:	04 c0       	rjmp	.+8      	; 0x15434 <SS80_locate_and_write+0x1cc>
   1542c:	80 ea       	ldi	r24, 0xA0	; 160
   1542e:	90 e1       	ldi	r25, 0x10	; 16
   15430:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   15434:	ce 14       	cp	r12, r14
   15436:	df 04       	cpc	r13, r15
   15438:	39 f1       	breq	.+78     	; 0x15488 <SS80_locate_and_write+0x220>
   1543a:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   1543e:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15442:	83 81       	ldd	r24, Z+3	; 0x03
   15444:	94 81       	ldd	r25, Z+4	; 0x04
   15446:	82 60       	ori	r24, 0x02	; 2
   15448:	94 83       	std	Z+4, r25	; 0x04
   1544a:	83 83       	std	Z+3, r24	; 0x03
   1544c:	0e 94 28 6f 	call	0xde50	; 0xde50 <mmc_wp_status>
   15450:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15454:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15458:	89 2b       	or	r24, r25
   1545a:	29 f0       	breq	.+10     	; 0x15466 <SS80_locate_and_write+0x1fe>
   1545c:	83 81       	ldd	r24, Z+3	; 0x03
   1545e:	94 81       	ldd	r25, Z+4	; 0x04
   15460:	88 60       	ori	r24, 0x08	; 8
   15462:	94 83       	std	Z+4, r25	; 0x04
   15464:	83 83       	std	Z+3, r24	; 0x03
   15466:	21 e0       	ldi	r18, 0x01	; 1
   15468:	22 83       	std	Z+2, r18	; 0x02
   1546a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1546e:	80 ff       	sbrs	r24, 0
   15470:	27 c0       	rjmp	.+78     	; 0x154c0 <SS80_locate_and_write+0x258>
   15472:	89 89       	ldd	r24, Y+17	; 0x11
   15474:	9a 89       	ldd	r25, Y+18	; 0x12
   15476:	ab 89       	ldd	r26, Y+19	; 0x13
   15478:	ed b7       	in	r30, 0x3d	; 61
   1547a:	fe b7       	in	r31, 0x3e	; 62
   1547c:	81 83       	std	Z+1, r24	; 0x01
   1547e:	92 83       	std	Z+2, r25	; 0x02
   15480:	a3 83       	std	Z+3, r26	; 0x03
   15482:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15486:	1c c0       	rjmp	.+56     	; 0x154c0 <SS80_locate_and_write+0x258>
   15488:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1548c:	85 ff       	sbrs	r24, 5
   1548e:	0c c0       	rjmp	.+24     	; 0x154a8 <SS80_locate_and_write+0x240>
   15490:	ed b7       	in	r30, 0x3d	; 61
   15492:	fe b7       	in	r31, 0x3e	; 62
   15494:	d5 82       	std	Z+5, r13	; 0x05
   15496:	c4 82       	std	Z+4, r12	; 0x04
   15498:	2e 85       	ldd	r18, Y+14	; 0x0e
   1549a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1549c:	48 89       	ldd	r20, Y+16	; 0x10
   1549e:	21 83       	std	Z+1, r18	; 0x01
   154a0:	32 83       	std	Z+2, r19	; 0x02
   154a2:	43 83       	std	Z+3, r20	; 0x03
   154a4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   154a8:	c6 01       	movw	r24, r12
   154aa:	0d 2c       	mov	r0, r13
   154ac:	00 0c       	add	r0, r0
   154ae:	aa 0b       	sbc	r26, r26
   154b0:	bb 0b       	sbc	r27, r27
   154b2:	88 0e       	add	r8, r24
   154b4:	99 1e       	adc	r9, r25
   154b6:	aa 1e       	adc	r10, r26
   154b8:	bb 1e       	adc	r11, r27
   154ba:	00 e0       	ldi	r16, 0x00	; 0
   154bc:	10 e0       	ldi	r17, 0x00	; 0
   154be:	05 c0       	rjmp	.+10     	; 0x154ca <SS80_locate_and_write+0x262>
   154c0:	ec 14       	cp	r14, r12
   154c2:	fd 04       	cpc	r15, r13
   154c4:	64 f0       	brlt	.+24     	; 0x154de <SS80_locate_and_write+0x276>
   154c6:	01 e0       	ldi	r16, 0x01	; 1
   154c8:	10 e0       	ldi	r17, 0x00	; 0
   154ca:	c7 01       	movw	r24, r14
   154cc:	0f 2c       	mov	r0, r15
   154ce:	00 0c       	add	r0, r0
   154d0:	aa 0b       	sbc	r26, r26
   154d2:	bb 0b       	sbc	r27, r27
   154d4:	48 0e       	add	r4, r24
   154d6:	59 1e       	adc	r5, r25
   154d8:	6a 1e       	adc	r6, r26
   154da:	7b 1e       	adc	r7, r27
   154dc:	0b c0       	rjmp	.+22     	; 0x154f4 <SS80_locate_and_write+0x28c>
   154de:	c6 01       	movw	r24, r12
   154e0:	0d 2c       	mov	r0, r13
   154e2:	00 0c       	add	r0, r0
   154e4:	aa 0b       	sbc	r26, r26
   154e6:	bb 0b       	sbc	r27, r27
   154e8:	48 0e       	add	r4, r24
   154ea:	59 1e       	adc	r5, r25
   154ec:	6a 1e       	adc	r6, r26
   154ee:	7b 1e       	adc	r7, r27
   154f0:	01 e0       	ldi	r16, 0x01	; 1
   154f2:	10 e0       	ldi	r17, 0x00	; 0
   154f4:	2c 18       	sub	r2, r12
   154f6:	3d 08       	sbc	r3, r13
   154f8:	8c 85       	ldd	r24, Y+12	; 0x0c
   154fa:	9d 85       	ldd	r25, Y+13	; 0x0d
   154fc:	90 ff       	sbrs	r25, 0
   154fe:	19 cf       	rjmp	.-462    	; 0x15332 <SS80_locate_and_write+0xca>
   15500:	12 14       	cp	r1, r2
   15502:	13 04       	cpc	r1, r3
   15504:	7c f4       	brge	.+30     	; 0x15524 <SS80_locate_and_write+0x2bc>
   15506:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1550a:	80 ff       	sbrs	r24, 0
   1550c:	1d c0       	rjmp	.+58     	; 0x15548 <SS80_locate_and_write+0x2e0>
   1550e:	84 e5       	ldi	r24, 0x54	; 84
   15510:	94 e2       	ldi	r25, 0x24	; 36
   15512:	a0 e0       	ldi	r26, 0x00	; 0
   15514:	ed b7       	in	r30, 0x3d	; 61
   15516:	fe b7       	in	r31, 0x3e	; 62
   15518:	81 83       	std	Z+1, r24	; 0x01
   1551a:	92 83       	std	Z+2, r25	; 0x02
   1551c:	a3 83       	std	Z+3, r26	; 0x03
   1551e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15522:	12 c0       	rjmp	.+36     	; 0x15548 <SS80_locate_and_write+0x2e0>
   15524:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15528:	85 ff       	sbrs	r24, 5
   1552a:	0e c0       	rjmp	.+28     	; 0x15548 <SS80_locate_and_write+0x2e0>
   1552c:	ed b7       	in	r30, 0x3d	; 61
   1552e:	fe b7       	in	r31, 0x3e	; 62
   15530:	44 82       	std	Z+4, r4	; 0x04
   15532:	55 82       	std	Z+5, r5	; 0x05
   15534:	66 82       	std	Z+6, r6	; 0x06
   15536:	77 82       	std	Z+7, r7	; 0x07
   15538:	89 e2       	ldi	r24, 0x29	; 41
   1553a:	94 e2       	ldi	r25, 0x24	; 36
   1553c:	a0 e0       	ldi	r26, 0x00	; 0
   1553e:	81 83       	std	Z+1, r24	; 0x01
   15540:	92 83       	std	Z+2, r25	; 0x02
   15542:	a3 83       	std	Z+3, r26	; 0x03
   15544:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15548:	00 91 6d 1a 	lds	r16, 0x1A6D	; 0x801a6d <SS80s>
   1554c:	10 91 6e 1a 	lds	r17, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15550:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15554:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15558:	20 89       	ldd	r18, Z+16	; 0x10
   1555a:	31 89       	ldd	r19, Z+17	; 0x11
   1555c:	40 e0       	ldi	r20, 0x00	; 0
   1555e:	50 e0       	ldi	r21, 0x00	; 0
   15560:	c5 01       	movw	r24, r10
   15562:	b4 01       	movw	r22, r8
   15564:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
   15568:	f8 01       	movw	r30, r16
   1556a:	27 83       	std	Z+7, r18	; 0x07
   1556c:	30 87       	std	Z+8, r19	; 0x08
   1556e:	41 87       	std	Z+9, r20	; 0x09
   15570:	52 87       	std	Z+10, r21	; 0x0a
   15572:	8c 85       	ldd	r24, Y+12	; 0x0c
   15574:	9d 85       	ldd	r25, Y+13	; 0x0d
   15576:	88 27       	eor	r24, r24
   15578:	90 7d       	andi	r25, 0xD0	; 208
   1557a:	04 c0       	rjmp	.+8      	; 0x15584 <SS80_locate_and_write+0x31c>
   1557c:	01 2b       	or	r16, r17
   1557e:	09 f4       	brne	.+2      	; 0x15582 <SS80_locate_and_write+0x31a>
   15580:	37 cf       	rjmp	.-402    	; 0x153f0 <SS80_locate_and_write+0x188>
   15582:	b6 cf       	rjmp	.-148    	; 0x154f0 <SS80_locate_and_write+0x288>
   15584:	63 96       	adiw	r28, 0x13	; 19
   15586:	e2 e1       	ldi	r30, 0x12	; 18
   15588:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001558c <SS80_Report>:
   1558c:	a8 e0       	ldi	r26, 0x08	; 8
   1558e:	b0 e0       	ldi	r27, 0x00	; 0
   15590:	ec ec       	ldi	r30, 0xCC	; 204
   15592:	fa ea       	ldi	r31, 0xAA	; 170
   15594:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   15598:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   1559c:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   155a0:	82 81       	ldd	r24, Z+2	; 0x02
   155a2:	88 87       	std	Y+8, r24	; 0x08
   155a4:	80 e0       	ldi	r24, 0x00	; 0
   155a6:	91 e0       	ldi	r25, 0x01	; 1
   155a8:	9f 83       	std	Y+7, r25	; 0x07
   155aa:	8e 83       	std	Y+6, r24	; 0x06
   155ac:	ae 01       	movw	r20, r28
   155ae:	4a 5f       	subi	r20, 0xFA	; 250
   155b0:	5f 4f       	sbci	r21, 0xFF	; 255
   155b2:	61 e0       	ldi	r22, 0x01	; 1
   155b4:	70 e0       	ldi	r23, 0x00	; 0
   155b6:	ce 01       	movw	r24, r28
   155b8:	08 96       	adiw	r24, 0x08	; 8
   155ba:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   155be:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   155c2:	01 97       	sbiw	r24, 0x01	; 1
   155c4:	89 f0       	breq	.+34     	; 0x155e8 <SS80_Report+0x5c>
   155c6:	20 ff       	sbrs	r18, 0
   155c8:	0a c0       	rjmp	.+20     	; 0x155de <SS80_Report+0x52>
   155ca:	88 e1       	ldi	r24, 0x18	; 24
   155cc:	9f e1       	ldi	r25, 0x1F	; 31
   155ce:	a0 e0       	ldi	r26, 0x00	; 0
   155d0:	ed b7       	in	r30, 0x3d	; 61
   155d2:	fe b7       	in	r31, 0x3e	; 62
   155d4:	81 83       	std	Z+1, r24	; 0x01
   155d6:	92 83       	std	Z+2, r25	; 0x02
   155d8:	a3 83       	std	Z+3, r26	; 0x03
   155da:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   155de:	8e 81       	ldd	r24, Y+6	; 0x06
   155e0:	9f 81       	ldd	r25, Y+7	; 0x07
   155e2:	88 27       	eor	r24, r24
   155e4:	90 7d       	andi	r25, 0xD0	; 208
   155e6:	1b c0       	rjmp	.+54     	; 0x1561e <SS80_Report+0x92>
   155e8:	25 ff       	sbrs	r18, 5
   155ea:	12 c0       	rjmp	.+36     	; 0x15610 <SS80_Report+0x84>
   155ec:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   155f0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   155f4:	82 81       	ldd	r24, Z+2	; 0x02
   155f6:	90 e0       	ldi	r25, 0x00	; 0
   155f8:	ed b7       	in	r30, 0x3d	; 61
   155fa:	fe b7       	in	r31, 0x3e	; 62
   155fc:	95 83       	std	Z+5, r25	; 0x05
   155fe:	84 83       	std	Z+4, r24	; 0x04
   15600:	85 e0       	ldi	r24, 0x05	; 5
   15602:	9f e1       	ldi	r25, 0x1F	; 31
   15604:	a0 e0       	ldi	r26, 0x00	; 0
   15606:	81 83       	std	Z+1, r24	; 0x01
   15608:	92 83       	std	Z+2, r25	; 0x02
   1560a:	a3 83       	std	Z+3, r26	; 0x03
   1560c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15610:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15614:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15618:	12 82       	std	Z+2, r1	; 0x02
   1561a:	80 e0       	ldi	r24, 0x00	; 0
   1561c:	90 e0       	ldi	r25, 0x00	; 0
   1561e:	28 96       	adiw	r28, 0x08	; 8
   15620:	e2 e0       	ldi	r30, 0x02	; 2
   15622:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00015626 <Clear_Common>:
   15626:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   1562a:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   1562e:	25 81       	ldd	r18, Z+5	; 0x05
   15630:	30 e0       	ldi	r19, 0x00	; 0
   15632:	28 17       	cp	r18, r24
   15634:	39 07       	cpc	r19, r25
   15636:	19 f0       	breq	.+6      	; 0x1563e <Clear_Common+0x18>
   15638:	0f 97       	sbiw	r24, 0x0f	; 15
   1563a:	99 f4       	brne	.+38     	; 0x15662 <Clear_Common+0x3c>
   1563c:	03 c0       	rjmp	.+6      	; 0x15644 <Clear_Common+0x1e>
   1563e:	2f 30       	cpi	r18, 0x0F	; 15
   15640:	31 05       	cpc	r19, r1
   15642:	09 f4       	brne	.+2      	; 0x15646 <Clear_Common+0x20>
   15644:	15 82       	std	Z+5, r1	; 0x05
   15646:	16 82       	std	Z+6, r1	; 0x06
   15648:	17 82       	std	Z+7, r1	; 0x07
   1564a:	10 86       	std	Z+8, r1	; 0x08
   1564c:	11 86       	std	Z+9, r1	; 0x09
   1564e:	12 86       	std	Z+10, r1	; 0x0a
   15650:	13 86       	std	Z+11, r1	; 0x0b
   15652:	14 86       	std	Z+12, r1	; 0x0c
   15654:	15 86       	std	Z+13, r1	; 0x0d
   15656:	16 86       	std	Z+14, r1	; 0x0e
   15658:	11 82       	std	Z+1, r1	; 0x01
   1565a:	10 82       	st	Z, r1
   1565c:	14 82       	std	Z+4, r1	; 0x04
   1565e:	13 82       	std	Z+3, r1	; 0x03
   15660:	12 82       	std	Z+2, r1	; 0x02
   15662:	08 95       	ret

00015664 <SS80_init>:
   15664:	a5 e0       	ldi	r26, 0x05	; 5
   15666:	b0 e0       	ldi	r27, 0x00	; 0
   15668:	e8 e3       	ldi	r30, 0x38	; 56
   1566a:	fb ea       	ldi	r31, 0xAB	; 171
   1566c:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
   15670:	04 ed       	ldi	r16, 0xD4	; 212
   15672:	11 e2       	ldi	r17, 0x21	; 33
   15674:	cb e0       	ldi	r28, 0x0B	; 11
   15676:	d0 e0       	ldi	r29, 0x00	; 0
   15678:	82 e0       	ldi	r24, 0x02	; 2
   1567a:	f8 2e       	mov	r15, r24
   1567c:	82 ed       	ldi	r24, 0xD2	; 210
   1567e:	95 e2       	ldi	r25, 0x25	; 37
   15680:	6c 01       	movw	r12, r24
   15682:	e1 2c       	mov	r14, r1
   15684:	f8 01       	movw	r30, r16
   15686:	80 81       	ld	r24, Z
   15688:	83 30       	cpi	r24, 0x03	; 3
   1568a:	29 f5       	brne	.+74     	; 0x156d6 <SS80_init+0x72>
   1568c:	ce 01       	movw	r24, r28
   1568e:	0e 94 ab 96 	call	0x12d56	; 0x12d56 <set_active_device>
   15692:	89 2b       	or	r24, r25
   15694:	01 f1       	breq	.+64     	; 0x156d6 <SS80_init+0x72>
   15696:	8f e0       	ldi	r24, 0x0F	; 15
   15698:	90 e0       	ldi	r25, 0x00	; 0
   1569a:	c5 df       	rcall	.-118    	; 0x15626 <Clear_Common>
   1569c:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   156a0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   156a4:	f2 82       	std	Z+2, r15	; 0x02
   156a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156aa:	85 ff       	sbrs	r24, 5
   156ac:	0c c0       	rjmp	.+24     	; 0x156c6 <SS80_init+0x62>
   156ae:	f8 01       	movw	r30, r16
   156b0:	81 81       	ldd	r24, Z+1	; 0x01
   156b2:	90 e0       	ldi	r25, 0x00	; 0
   156b4:	ed b7       	in	r30, 0x3d	; 61
   156b6:	fe b7       	in	r31, 0x3e	; 62
   156b8:	95 83       	std	Z+5, r25	; 0x05
   156ba:	84 83       	std	Z+4, r24	; 0x04
   156bc:	c1 82       	std	Z+1, r12	; 0x01
   156be:	d2 82       	std	Z+2, r13	; 0x02
   156c0:	e3 82       	std	Z+3, r14	; 0x03
   156c2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   156c6:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   156ca:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   156ce:	81 81       	ldd	r24, Z+1	; 0x01
   156d0:	90 e0       	ldi	r25, 0x00	; 0
   156d2:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
   156d6:	21 97       	sbiw	r28, 0x01	; 1
   156d8:	0b 52       	subi	r16, 0x2B	; 43
   156da:	11 09       	sbc	r17, r1
   156dc:	cf 3f       	cpi	r28, 0xFF	; 255
   156de:	ff ef       	ldi	r31, 0xFF	; 255
   156e0:	df 07       	cpc	r29, r31
   156e2:	81 f6       	brne	.-96     	; 0x15684 <SS80_init+0x20>
   156e4:	cd b7       	in	r28, 0x3d	; 61
   156e6:	de b7       	in	r29, 0x3e	; 62
   156e8:	25 96       	adiw	r28, 0x05	; 5
   156ea:	e8 e0       	ldi	r30, 0x08	; 8
   156ec:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

000156f0 <SS80_Channel_Independent_Clear>:
   156f0:	9a df       	rcall	.-204    	; 0x15626 <Clear_Common>
   156f2:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   156f6:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   156fa:	81 81       	ldd	r24, Z+1	; 0x01
   156fc:	90 e0       	ldi	r25, 0x00	; 0
   156fe:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   15702:	80 e0       	ldi	r24, 0x00	; 0
   15704:	90 e0       	ldi	r25, 0x00	; 0
   15706:	08 95       	ret

00015708 <SS80_Universal_Device_Clear>:
   15708:	8f e0       	ldi	r24, 0x0F	; 15
   1570a:	90 e0       	ldi	r25, 0x00	; 0
   1570c:	8c df       	rcall	.-232    	; 0x15626 <Clear_Common>
   1570e:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15712:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15716:	81 81       	ldd	r24, Z+1	; 0x01
   15718:	90 e0       	ldi	r25, 0x00	; 0
   1571a:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1571e:	80 e0       	ldi	r24, 0x00	; 0
   15720:	90 e0       	ldi	r25, 0x00	; 0
   15722:	08 95       	ret

00015724 <SS80_Selected_Device_Clear>:
   15724:	cf 93       	push	r28
   15726:	df 93       	push	r29
   15728:	00 d0       	rcall	.+0      	; 0x1572a <SS80_Selected_Device_Clear+0x6>
   1572a:	1f 92       	push	r1
   1572c:	ec 01       	movw	r28, r24
   1572e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15732:	85 ff       	sbrs	r24, 5
   15734:	0a c0       	rjmp	.+20     	; 0x1574a <SS80_Selected_Device_Clear+0x26>
   15736:	89 ef       	ldi	r24, 0xF9	; 249
   15738:	9e e1       	ldi	r25, 0x1E	; 30
   1573a:	a0 e0       	ldi	r26, 0x00	; 0
   1573c:	ed b7       	in	r30, 0x3d	; 61
   1573e:	fe b7       	in	r31, 0x3e	; 62
   15740:	81 83       	std	Z+1, r24	; 0x01
   15742:	92 83       	std	Z+2, r25	; 0x02
   15744:	a3 83       	std	Z+3, r26	; 0x03
   15746:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1574a:	ce 01       	movw	r24, r28
   1574c:	6c df       	rcall	.-296    	; 0x15626 <Clear_Common>
   1574e:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15752:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15756:	81 81       	ldd	r24, Z+1	; 0x01
   15758:	90 e0       	ldi	r25, 0x00	; 0
   1575a:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1575e:	80 e0       	ldi	r24, 0x00	; 0
   15760:	90 e0       	ldi	r25, 0x00	; 0
   15762:	cd b7       	in	r28, 0x3d	; 61
   15764:	de b7       	in	r29, 0x3e	; 62
   15766:	23 96       	adiw	r28, 0x03	; 3
   15768:	e2 e0       	ldi	r30, 0x02	; 2
   1576a:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0001576e <SS80_Amigo_Clear>:
   1576e:	a6 e0       	ldi	r26, 0x06	; 6
   15770:	b0 e0       	ldi	r27, 0x00	; 0
   15772:	ed eb       	ldi	r30, 0xBD	; 189
   15774:	fb ea       	ldi	r31, 0xAB	; 171
   15776:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   1577a:	1d 82       	std	Y+5, r1	; 0x05
   1577c:	1c 82       	std	Y+4, r1	; 0x04
   1577e:	ae 01       	movw	r20, r28
   15780:	4c 5f       	subi	r20, 0xFC	; 252
   15782:	5f 4f       	sbci	r21, 0xFF	; 255
   15784:	61 e0       	ldi	r22, 0x01	; 1
   15786:	70 e0       	ldi	r23, 0x00	; 0
   15788:	ce 01       	movw	r24, r28
   1578a:	06 96       	adiw	r24, 0x06	; 6
   1578c:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   15790:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15794:	01 97       	sbiw	r24, 0x01	; 1
   15796:	89 f0       	breq	.+34     	; 0x157ba <SS80_Amigo_Clear+0x4c>
   15798:	20 ff       	sbrs	r18, 0
   1579a:	0a c0       	rjmp	.+20     	; 0x157b0 <SS80_Amigo_Clear+0x42>
   1579c:	86 ee       	ldi	r24, 0xE6	; 230
   1579e:	9e e1       	ldi	r25, 0x1E	; 30
   157a0:	a0 e0       	ldi	r26, 0x00	; 0
   157a2:	ed b7       	in	r30, 0x3d	; 61
   157a4:	fe b7       	in	r31, 0x3e	; 62
   157a6:	81 83       	std	Z+1, r24	; 0x01
   157a8:	92 83       	std	Z+2, r25	; 0x02
   157aa:	a3 83       	std	Z+3, r26	; 0x03
   157ac:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   157b0:	8c 81       	ldd	r24, Y+4	; 0x04
   157b2:	9d 81       	ldd	r25, Y+5	; 0x05
   157b4:	88 27       	eor	r24, r24
   157b6:	90 7d       	andi	r25, 0xD0	; 208
   157b8:	19 c0       	rjmp	.+50     	; 0x157ec <SS80_Amigo_Clear+0x7e>
   157ba:	25 ff       	sbrs	r18, 5
   157bc:	0a c0       	rjmp	.+20     	; 0x157d2 <SS80_Amigo_Clear+0x64>
   157be:	87 ed       	ldi	r24, 0xD7	; 215
   157c0:	9e e1       	ldi	r25, 0x1E	; 30
   157c2:	a0 e0       	ldi	r26, 0x00	; 0
   157c4:	ed b7       	in	r30, 0x3d	; 61
   157c6:	fe b7       	in	r31, 0x3e	; 62
   157c8:	81 83       	std	Z+1, r24	; 0x01
   157ca:	92 83       	std	Z+2, r25	; 0x02
   157cc:	a3 83       	std	Z+3, r26	; 0x03
   157ce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   157d2:	8f e0       	ldi	r24, 0x0F	; 15
   157d4:	90 e0       	ldi	r25, 0x00	; 0
   157d6:	27 df       	rcall	.-434    	; 0x15626 <Clear_Common>
   157d8:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   157dc:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   157e0:	81 81       	ldd	r24, Z+1	; 0x01
   157e2:	90 e0       	ldi	r25, 0x00	; 0
   157e4:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   157e8:	80 e0       	ldi	r24, 0x00	; 0
   157ea:	90 e0       	ldi	r25, 0x00	; 0
   157ec:	26 96       	adiw	r28, 0x06	; 6
   157ee:	e2 e0       	ldi	r30, 0x02	; 2
   157f0:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000157f4 <SS80_Cancel>:
   157f4:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   157f8:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   157fc:	11 82       	std	Z+1, r1	; 0x01
   157fe:	10 82       	st	Z, r1
   15800:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15804:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15808:	81 81       	ldd	r24, Z+1	; 0x01
   1580a:	90 e0       	ldi	r25, 0x00	; 0
   1580c:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   15810:	80 e0       	ldi	r24, 0x00	; 0
   15812:	90 e0       	ldi	r25, 0x00	; 0
   15814:	08 95       	ret

00015816 <SS80_Transparent_State>:
   15816:	a9 e0       	ldi	r26, 0x09	; 9
   15818:	b0 e0       	ldi	r27, 0x00	; 0
   1581a:	e1 e1       	ldi	r30, 0x11	; 17
   1581c:	fc ea       	ldi	r31, 0xAC	; 172
   1581e:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   15822:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15826:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   1582a:	81 81       	ldd	r24, Z+1	; 0x01
   1582c:	90 e0       	ldi	r25, 0x00	; 0
   1582e:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
   15832:	80 e0       	ldi	r24, 0x00	; 0
   15834:	91 e0       	ldi	r25, 0x01	; 1
   15836:	99 87       	std	Y+9, r25	; 0x09
   15838:	88 87       	std	Y+8, r24	; 0x08
   1583a:	ae 01       	movw	r20, r28
   1583c:	48 5f       	subi	r20, 0xF8	; 248
   1583e:	5f 4f       	sbci	r21, 0xFF	; 255
   15840:	60 e0       	ldi	r22, 0x00	; 0
   15842:	72 e0       	ldi	r23, 0x02	; 2
   15844:	81 ef       	ldi	r24, 0xF1	; 241
   15846:	9d e1       	ldi	r25, 0x1D	; 29
   15848:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   1584c:	7c 01       	movw	r14, r24
   1584e:	88 85       	ldd	r24, Y+8	; 0x08
   15850:	99 85       	ldd	r25, Y+9	; 0x09
   15852:	9c 01       	movw	r18, r24
   15854:	22 27       	eor	r18, r18
   15856:	30 7d       	andi	r19, 0xD0	; 208
   15858:	23 2b       	or	r18, r19
   1585a:	79 f0       	breq	.+30     	; 0x1587a <SS80_Transparent_State+0x64>
   1585c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15860:	80 ff       	sbrs	r24, 0
   15862:	da c0       	rjmp	.+436    	; 0x15a18 <SS80_Transparent_State+0x202>
   15864:	86 e7       	ldi	r24, 0x76	; 118
   15866:	90 e2       	ldi	r25, 0x20	; 32
   15868:	a0 e0       	ldi	r26, 0x00	; 0
   1586a:	ed b7       	in	r30, 0x3d	; 61
   1586c:	fe b7       	in	r31, 0x3e	; 62
   1586e:	81 83       	std	Z+1, r24	; 0x01
   15870:	92 83       	std	Z+2, r25	; 0x02
   15872:	a3 83       	std	Z+3, r26	; 0x03
   15874:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15878:	cf c0       	rjmp	.+414    	; 0x15a18 <SS80_Transparent_State+0x202>
   1587a:	e1 14       	cp	r14, r1
   1587c:	f1 04       	cpc	r15, r1
   1587e:	09 f4       	brne	.+2      	; 0x15882 <SS80_Transparent_State+0x6c>
   15880:	d0 c0       	rjmp	.+416    	; 0x15a22 <SS80_Transparent_State+0x20c>
   15882:	90 fd       	sbrc	r25, 0
   15884:	0e c0       	rjmp	.+28     	; 0x158a2 <SS80_Transparent_State+0x8c>
   15886:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1588a:	80 ff       	sbrs	r24, 0
   1588c:	0a c0       	rjmp	.+20     	; 0x158a2 <SS80_Transparent_State+0x8c>
   1588e:	8d e5       	ldi	r24, 0x5D	; 93
   15890:	90 e2       	ldi	r25, 0x20	; 32
   15892:	a0 e0       	ldi	r26, 0x00	; 0
   15894:	ed b7       	in	r30, 0x3d	; 61
   15896:	fe b7       	in	r31, 0x3e	; 62
   15898:	81 83       	std	Z+1, r24	; 0x01
   1589a:	92 83       	std	Z+2, r25	; 0x02
   1589c:	a3 83       	std	Z+3, r26	; 0x03
   1589e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   158a2:	81 ef       	ldi	r24, 0xF1	; 241
   158a4:	a8 2e       	mov	r10, r24
   158a6:	8d e1       	ldi	r24, 0x1D	; 29
   158a8:	b8 2e       	mov	r11, r24
   158aa:	00 e0       	ldi	r16, 0x00	; 0
   158ac:	10 e0       	ldi	r17, 0x00	; 0
   158ae:	0e 15       	cp	r16, r14
   158b0:	1f 05       	cpc	r17, r15
   158b2:	0c f0       	brlt	.+2      	; 0x158b6 <SS80_Transparent_State+0xa0>
   158b4:	9c c0       	rjmp	.+312    	; 0x159ee <SS80_Transparent_State+0x1d8>
   158b6:	68 01       	movw	r12, r16
   158b8:	ff ef       	ldi	r31, 0xFF	; 255
   158ba:	cf 1a       	sub	r12, r31
   158bc:	df 0a       	sbc	r13, r31
   158be:	f5 01       	movw	r30, r10
   158c0:	81 91       	ld	r24, Z+
   158c2:	5f 01       	movw	r10, r30
   158c4:	28 2f       	mov	r18, r24
   158c6:	30 e0       	ldi	r19, 0x00	; 0
   158c8:	a9 01       	movw	r20, r18
   158ca:	40 52       	subi	r20, 0x20	; 32
   158cc:	51 09       	sbc	r21, r1
   158ce:	40 31       	cpi	r20, 0x10	; 16
   158d0:	51 05       	cpc	r21, r1
   158d2:	20 f4       	brcc	.+8      	; 0x158dc <SS80_Transparent_State+0xc6>
   158d4:	80 52       	subi	r24, 0x20	; 32
   158d6:	8c d9       	rcall	.-3304   	; 0x14bf0 <SS80_Check_Unit>
   158d8:	86 01       	movw	r16, r12
   158da:	e9 cf       	rjmp	.-46     	; 0x158ae <SS80_Transparent_State+0x98>
   158dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   158e4:	21 30       	cpi	r18, 0x01	; 1
   158e6:	31 05       	cpc	r19, r1
   158e8:	c9 f4       	brne	.+50     	; 0x1591c <SS80_Transparent_State+0x106>
   158ea:	0e 5f       	subi	r16, 0xFE	; 254
   158ec:	1f 4f       	sbci	r17, 0xFF	; 255
   158ee:	80 73       	andi	r24, 0x30	; 48
   158f0:	99 27       	eor	r25, r25
   158f2:	89 2b       	or	r24, r25
   158f4:	51 f0       	breq	.+20     	; 0x1590a <SS80_Transparent_State+0xf4>
   158f6:	88 e3       	ldi	r24, 0x38	; 56
   158f8:	90 e2       	ldi	r25, 0x20	; 32
   158fa:	a0 e0       	ldi	r26, 0x00	; 0
   158fc:	ed b7       	in	r30, 0x3d	; 61
   158fe:	fe b7       	in	r31, 0x3e	; 62
   15900:	81 83       	std	Z+1, r24	; 0x01
   15902:	92 83       	std	Z+2, r25	; 0x02
   15904:	a3 83       	std	Z+3, r26	; 0x03
   15906:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1590a:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   1590e:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15912:	81 81       	ldd	r24, Z+1	; 0x01
   15914:	90 e0       	ldi	r25, 0x00	; 0
   15916:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1591a:	69 c0       	rjmp	.+210    	; 0x159ee <SS80_Transparent_State+0x1d8>
   1591c:	22 30       	cpi	r18, 0x02	; 2
   1591e:	31 05       	cpc	r19, r1
   15920:	51 f4       	brne	.+20     	; 0x15936 <SS80_Transparent_State+0x120>
   15922:	0b 5f       	subi	r16, 0xFB	; 251
   15924:	1f 4f       	sbci	r17, 0xFF	; 255
   15926:	80 73       	andi	r24, 0x30	; 48
   15928:	99 27       	eor	r25, r25
   1592a:	89 2b       	or	r24, r25
   1592c:	09 f4       	brne	.+2      	; 0x15930 <SS80_Transparent_State+0x11a>
   1592e:	5f c0       	rjmp	.+190    	; 0x159ee <SS80_Transparent_State+0x1d8>
   15930:	8b e1       	ldi	r24, 0x1B	; 27
   15932:	90 e2       	ldi	r25, 0x20	; 32
   15934:	0c c0       	rjmp	.+24     	; 0x1594e <SS80_Transparent_State+0x138>
   15936:	23 30       	cpi	r18, 0x03	; 3
   15938:	31 05       	cpc	r19, r1
   1593a:	91 f4       	brne	.+36     	; 0x15960 <SS80_Transparent_State+0x14a>
   1593c:	0b 5f       	subi	r16, 0xFB	; 251
   1593e:	1f 4f       	sbci	r17, 0xFF	; 255
   15940:	80 73       	andi	r24, 0x30	; 48
   15942:	99 27       	eor	r25, r25
   15944:	89 2b       	or	r24, r25
   15946:	09 f4       	brne	.+2      	; 0x1594a <SS80_Transparent_State+0x134>
   15948:	52 c0       	rjmp	.+164    	; 0x159ee <SS80_Transparent_State+0x1d8>
   1594a:	8d ef       	ldi	r24, 0xFD	; 253
   1594c:	9f e1       	ldi	r25, 0x1F	; 31
   1594e:	a0 e0       	ldi	r26, 0x00	; 0
   15950:	ed b7       	in	r30, 0x3d	; 61
   15952:	fe b7       	in	r31, 0x3e	; 62
   15954:	81 83       	std	Z+1, r24	; 0x01
   15956:	92 83       	std	Z+2, r25	; 0x02
   15958:	a3 83       	std	Z+3, r26	; 0x03
   1595a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1595e:	47 c0       	rjmp	.+142    	; 0x159ee <SS80_Transparent_State+0x1d8>
   15960:	28 30       	cpi	r18, 0x08	; 8
   15962:	31 05       	cpc	r19, r1
   15964:	e1 f4       	brne	.+56     	; 0x1599e <SS80_Transparent_State+0x188>
   15966:	85 ff       	sbrs	r24, 5
   15968:	12 c0       	rjmp	.+36     	; 0x1598e <SS80_Transparent_State+0x178>
   1596a:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   1596e:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15972:	85 81       	ldd	r24, Z+5	; 0x05
   15974:	90 e0       	ldi	r25, 0x00	; 0
   15976:	ed b7       	in	r30, 0x3d	; 61
   15978:	fe b7       	in	r31, 0x3e	; 62
   1597a:	95 83       	std	Z+5, r25	; 0x05
   1597c:	84 83       	std	Z+4, r24	; 0x04
   1597e:	86 ed       	ldi	r24, 0xD6	; 214
   15980:	9f e1       	ldi	r25, 0x1F	; 31
   15982:	a0 e0       	ldi	r26, 0x00	; 0
   15984:	81 83       	std	Z+1, r24	; 0x01
   15986:	92 83       	std	Z+2, r25	; 0x02
   15988:	a3 83       	std	Z+3, r26	; 0x03
   1598a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1598e:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15992:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15996:	85 81       	ldd	r24, Z+5	; 0x05
   15998:	90 e0       	ldi	r25, 0x00	; 0
   1599a:	aa de       	rcall	.-684    	; 0x156f0 <SS80_Channel_Independent_Clear>
   1599c:	44 c0       	rjmp	.+136    	; 0x15a26 <SS80_Transparent_State+0x210>
   1599e:	29 30       	cpi	r18, 0x09	; 9
   159a0:	31 05       	cpc	r19, r1
   159a2:	b1 f4       	brne	.+44     	; 0x159d0 <SS80_Transparent_State+0x1ba>
   159a4:	85 ff       	sbrs	r24, 5
   159a6:	12 c0       	rjmp	.+36     	; 0x159cc <SS80_Transparent_State+0x1b6>
   159a8:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   159ac:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   159b0:	85 81       	ldd	r24, Z+5	; 0x05
   159b2:	90 e0       	ldi	r25, 0x00	; 0
   159b4:	ed b7       	in	r30, 0x3d	; 61
   159b6:	fe b7       	in	r31, 0x3e	; 62
   159b8:	95 83       	std	Z+5, r25	; 0x05
   159ba:	84 83       	std	Z+4, r24	; 0x04
   159bc:	82 ec       	ldi	r24, 0xC2	; 194
   159be:	9f e1       	ldi	r25, 0x1F	; 31
   159c0:	a0 e0       	ldi	r26, 0x00	; 0
   159c2:	81 83       	std	Z+1, r24	; 0x01
   159c4:	92 83       	std	Z+2, r25	; 0x02
   159c6:	a3 83       	std	Z+3, r26	; 0x03
   159c8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   159cc:	13 df       	rcall	.-474    	; 0x157f4 <SS80_Cancel>
   159ce:	2b c0       	rjmp	.+86     	; 0x15a26 <SS80_Transparent_State+0x210>
   159d0:	80 ff       	sbrs	r24, 0
   159d2:	22 c0       	rjmp	.+68     	; 0x15a18 <SS80_Transparent_State+0x202>
   159d4:	ed b7       	in	r30, 0x3d	; 61
   159d6:	fe b7       	in	r31, 0x3e	; 62
   159d8:	35 83       	std	Z+5, r19	; 0x05
   159da:	24 83       	std	Z+4, r18	; 0x04
   159dc:	82 ea       	ldi	r24, 0xA2	; 162
   159de:	9f e1       	ldi	r25, 0x1F	; 31
   159e0:	a0 e0       	ldi	r26, 0x00	; 0
   159e2:	81 83       	std	Z+1, r24	; 0x01
   159e4:	92 83       	std	Z+2, r25	; 0x02
   159e6:	a3 83       	std	Z+3, r26	; 0x03
   159e8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   159ec:	86 01       	movw	r16, r12
   159ee:	0e 15       	cp	r16, r14
   159f0:	1f 05       	cpc	r17, r15
   159f2:	91 f0       	breq	.+36     	; 0x15a18 <SS80_Transparent_State+0x202>
   159f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159f8:	80 ff       	sbrs	r24, 0
   159fa:	0e c0       	rjmp	.+28     	; 0x15a18 <SS80_Transparent_State+0x202>
   159fc:	ed b7       	in	r30, 0x3d	; 61
   159fe:	fe b7       	in	r31, 0x3e	; 62
   15a00:	f7 82       	std	Z+7, r15	; 0x07
   15a02:	e6 82       	std	Z+6, r14	; 0x06
   15a04:	15 83       	std	Z+5, r17	; 0x05
   15a06:	04 83       	std	Z+4, r16	; 0x04
   15a08:	86 e6       	ldi	r24, 0x66	; 102
   15a0a:	9f e1       	ldi	r25, 0x1F	; 31
   15a0c:	a0 e0       	ldi	r26, 0x00	; 0
   15a0e:	81 83       	std	Z+1, r24	; 0x01
   15a10:	92 83       	std	Z+2, r25	; 0x02
   15a12:	a3 83       	std	Z+3, r26	; 0x03
   15a14:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15a18:	88 85       	ldd	r24, Y+8	; 0x08
   15a1a:	99 85       	ldd	r25, Y+9	; 0x09
   15a1c:	88 27       	eor	r24, r24
   15a1e:	90 7d       	andi	r25, 0xD0	; 208
   15a20:	02 c0       	rjmp	.+4      	; 0x15a26 <SS80_Transparent_State+0x210>
   15a22:	80 e0       	ldi	r24, 0x00	; 0
   15a24:	90 e0       	ldi	r25, 0x00	; 0
   15a26:	29 96       	adiw	r28, 0x09	; 9
   15a28:	ea e0       	ldi	r30, 0x0A	; 10
   15a2a:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

00015a2e <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15a2e:	a6 e0       	ldi	r26, 0x06	; 6
   15a30:	b0 e0       	ldi	r27, 0x00	; 0
   15a32:	ed e1       	ldi	r30, 0x1D	; 29
   15a34:	fd ea       	ldi	r31, 0xAD	; 173
   15a36:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15a3a:	80 e0       	ldi	r24, 0x00	; 0
   15a3c:	91 e0       	ldi	r25, 0x01	; 1
   15a3e:	9d 83       	std	Y+5, r25	; 0x05
   15a40:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15a42:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15a46:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15a4a:	81 e0       	ldi	r24, 0x01	; 1
   15a4c:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15a4e:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15a50:	ae 01       	movw	r20, r28
   15a52:	4c 5f       	subi	r20, 0xFC	; 252
   15a54:	5f 4f       	sbci	r21, 0xFF	; 255
   15a56:	61 e0       	ldi	r22, 0x01	; 1
   15a58:	70 e0       	ldi	r23, 0x00	; 0
   15a5a:	ce 01       	movw	r24, r28
   15a5c:	06 96       	adiw	r24, 0x06	; 6
   15a5e:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   15a62:	01 97       	sbiw	r24, 0x01	; 1
   15a64:	99 f0       	breq	.+38     	; 0x15a8c <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15a66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a6a:	80 ff       	sbrs	r24, 0
   15a6c:	0a c0       	rjmp	.+20     	; 0x15a82 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15a6e:	84 eb       	ldi	r24, 0xB4	; 180
   15a70:	9e e1       	ldi	r25, 0x1E	; 30
   15a72:	a0 e0       	ldi	r26, 0x00	; 0
   15a74:	ed b7       	in	r30, 0x3d	; 61
   15a76:	fe b7       	in	r31, 0x3e	; 62
   15a78:	81 83       	std	Z+1, r24	; 0x01
   15a7a:	92 83       	std	Z+2, r25	; 0x02
   15a7c:	a3 83       	std	Z+3, r26	; 0x03
   15a7e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(status & ERROR_MASK);
   15a82:	8c 81       	ldd	r24, Y+4	; 0x04
   15a84:	9d 81       	ldd	r25, Y+5	; 0x05
   15a86:	88 27       	eor	r24, r24
   15a88:	90 7d       	andi	r25, 0xD0	; 208
   15a8a:	07 c0       	rjmp	.+14     	; 0x15a9a <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15a8c:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15a90:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15a94:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15a96:	80 e0       	ldi	r24, 0x00	; 0
   15a98:	90 e0       	ldi	r25, 0x00	; 0
}
   15a9a:	26 96       	adiw	r28, 0x06	; 6
   15a9c:	e2 e0       	ldi	r30, 0x02	; 2
   15a9e:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00015aa2 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15aa2:	a7 e1       	ldi	r26, 0x17	; 23
   15aa4:	b0 e0       	ldi	r27, 0x00	; 0
   15aa6:	e7 e5       	ldi	r30, 0x57	; 87
   15aa8:	fd ea       	ldi	r31, 0xAD	; 173
   15aaa:	0c 94 9c e3 	jmp	0x1c738	; 0x1c738 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15aae:	60 91 6d 1a 	lds	r22, 0x1A6D	; 0x801a6d <SS80s>
   15ab2:	70 91 6e 1a 	lds	r23, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15ab6:	fb 01       	movw	r30, r22
   15ab8:	27 81       	ldd	r18, Z+7	; 0x07
   15aba:	30 85       	ldd	r19, Z+8	; 0x08
   15abc:	41 85       	ldd	r20, Z+9	; 0x09
   15abe:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15ac0:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <SS80p>
   15ac4:	90 91 70 1a 	lds	r25, 0x1A70	; 0x801a70 <SS80p+0x1>
   15ac8:	fc 01       	movw	r30, r24
   15aca:	a0 89       	ldd	r26, Z+16	; 0x10
   15acc:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15ace:	fb 01       	movw	r30, r22
   15ad0:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15ad2:	1d 86       	std	Y+13, r1	; 0x0d
   15ad4:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15ad6:	54 98       	cbi	0x0a, 4	; 10
   15ad8:	4c 99       	sbic	0x09, 4	; 9
   15ada:	03 c0       	rjmp	.+6      	; 0x15ae2 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15adc:	80 e0       	ldi	r24, 0x00	; 0
   15ade:	90 e1       	ldi	r25, 0x10	; 16
   15ae0:	3e c1       	rjmp	.+636    	; 0x15d5e <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15ae2:	0e 94 7b e3 	call	0x1c6f6	; 0x1c6f6 <__muluhisi3>
   15ae6:	4b 01       	movw	r8, r22
   15ae8:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15aea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aee:	85 ff       	sbrs	r24, 5
   15af0:	1a c0       	rjmp	.+52     	; 0x15b26 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15af2:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15af6:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15afa:	83 85       	ldd	r24, Z+11	; 0x0b
   15afc:	94 85       	ldd	r25, Z+12	; 0x0c
   15afe:	a5 85       	ldd	r26, Z+13	; 0x0d
   15b00:	b6 85       	ldd	r27, Z+14	; 0x0e
   15b02:	ed b7       	in	r30, 0x3d	; 61
   15b04:	fe b7       	in	r31, 0x3e	; 62
   15b06:	80 87       	std	Z+8, r24	; 0x08
   15b08:	91 87       	std	Z+9, r25	; 0x09
   15b0a:	a2 87       	std	Z+10, r26	; 0x0a
   15b0c:	b3 87       	std	Z+11, r27	; 0x0b
   15b0e:	84 82       	std	Z+4, r8	; 0x04
   15b10:	95 82       	std	Z+5, r9	; 0x05
   15b12:	a6 82       	std	Z+6, r10	; 0x06
   15b14:	b7 82       	std	Z+7, r11	; 0x07
   15b16:	8e e8       	ldi	r24, 0x8E	; 142
   15b18:	95 e2       	ldi	r25, 0x25	; 37
   15b1a:	a0 e0       	ldi	r26, 0x00	; 0
   15b1c:	81 83       	std	Z+1, r24	; 0x01
   15b1e:	92 83       	std	Z+2, r25	; 0x02
   15b20:	a3 83       	std	Z+3, r26	; 0x03
   15b22:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15b26:	2b db       	rcall	.-2474   	; 0x1517e <SS80_cmd_seek>
   15b28:	89 2b       	or	r24, r25
   15b2a:	09 f0       	breq	.+2      	; 0x15b2e <SS80_locate_and_read+0x8c>
   15b2c:	ae c0       	rjmp	.+348    	; 0x15c8a <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15b2e:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15b32:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15b36:	43 84       	ldd	r4, Z+11	; 0x0b
   15b38:	54 84       	ldd	r5, Z+12	; 0x0c
   15b3a:	65 84       	ldd	r6, Z+13	; 0x0d
   15b3c:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15b3e:	1e 86       	std	Y+14, r1	; 0x0e
   15b40:	1f 86       	std	Y+15, r1	; 0x0f
   15b42:	18 8a       	std	Y+16, r1	; 0x10
   15b44:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15b46:	80 e7       	ldi	r24, 0x70	; 112
   15b48:	95 e2       	ldi	r25, 0x25	; 37
   15b4a:	9c 01       	movw	r18, r24
   15b4c:	40 e0       	ldi	r20, 0x00	; 0
   15b4e:	2a 8b       	std	Y+18, r18	; 0x12
   15b50:	3b 8b       	std	Y+19, r19	; 0x13
   15b52:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15b54:	33 24       	eor	r3, r3
   15b56:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15b58:	8f e3       	ldi	r24, 0x3F	; 63
   15b5a:	95 e2       	ldi	r25, 0x25	; 37
   15b5c:	9c 01       	movw	r18, r24
   15b5e:	40 e0       	ldi	r20, 0x00	; 0
   15b60:	2d 8b       	std	Y+21, r18	; 0x15
   15b62:	3e 8b       	std	Y+22, r19	; 0x16
   15b64:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15b66:	34 c0       	rjmp	.+104    	; 0x15bd0 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b68:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15b6a:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15b6e:	ae 01       	movw	r20, r28
   15b70:	44 5f       	subi	r20, 0xF4	; 244
   15b72:	5f 4f       	sbci	r21, 0xFF	; 255
   15b74:	b6 01       	movw	r22, r12
   15b76:	81 ef       	ldi	r24, 0xF1	; 241
   15b78:	9d e1       	ldi	r25, 0x1D	; 29
   15b7a:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   15b7e:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b84:	87 ff       	sbrs	r24, 7
   15b86:	04 c0       	rjmp	.+8      	; 0x15b90 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15b88:	86 eb       	ldi	r24, 0xB6	; 182
   15b8a:	90 e1       	ldi	r25, 0x10	; 16
   15b8c:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15b90:	c0 16       	cp	r12, r16
   15b92:	d1 06       	cpc	r13, r17
   15b94:	09 f0       	breq	.+2      	; 0x15b98 <SS80_locate_and_read+0xf6>
   15b96:	82 c0       	rjmp	.+260    	; 0x15c9c <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   15b98:	0d 2c       	mov	r0, r13
   15b9a:	00 0c       	add	r0, r0
   15b9c:	ee 08       	sbc	r14, r14
   15b9e:	ff 08       	sbc	r15, r15
   15ba0:	8c 0c       	add	r8, r12
   15ba2:	9d 1c       	adc	r9, r13
   15ba4:	ae 1c       	adc	r10, r14
   15ba6:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   15ba8:	01 2e       	mov	r0, r17
   15baa:	00 0c       	add	r0, r0
   15bac:	22 0b       	sbc	r18, r18
   15bae:	33 0b       	sbc	r19, r19
   15bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
   15bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
   15bb4:	a8 89       	ldd	r26, Y+16	; 0x10
   15bb6:	b9 89       	ldd	r27, Y+17	; 0x11
   15bb8:	80 0f       	add	r24, r16
   15bba:	91 1f       	adc	r25, r17
   15bbc:	a2 1f       	adc	r26, r18
   15bbe:	b3 1f       	adc	r27, r19
   15bc0:	8e 87       	std	Y+14, r24	; 0x0e
   15bc2:	9f 87       	std	Y+15, r25	; 0x0f
   15bc4:	a8 8b       	std	Y+16, r26	; 0x10
   15bc6:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15bc8:	40 1a       	sub	r4, r16
   15bca:	51 0a       	sbc	r5, r17
   15bcc:	62 0a       	sbc	r6, r18
   15bce:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15bd0:	41 14       	cp	r4, r1
   15bd2:	51 04       	cpc	r5, r1
   15bd4:	61 04       	cpc	r6, r1
   15bd6:	71 04       	cpc	r7, r1
   15bd8:	09 f4       	brne	.+2      	; 0x15bdc <SS80_locate_and_read+0x13a>
   15bda:	92 c0       	rjmp	.+292    	; 0x15d00 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15bdc:	54 98       	cbi	0x0a, 4	; 10
   15bde:	4c 9b       	sbis	0x09, 4	; 9
   15be0:	7d cf       	rjmp	.-262    	; 0x15adc <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15be2:	31 e0       	ldi	r19, 0x01	; 1
   15be4:	43 16       	cp	r4, r19
   15be6:	53 06       	cpc	r5, r19
   15be8:	61 04       	cpc	r6, r1
   15bea:	71 04       	cpc	r7, r1
   15bec:	08 f4       	brcc	.+2      	; 0x15bf0 <SS80_locate_and_read+0x14e>
   15bee:	4f c0       	rjmp	.+158    	; 0x15c8e <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15bf0:	1d 86       	std	Y+13, r1	; 0x0d
   15bf2:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15bf4:	c1 2c       	mov	r12, r1
   15bf6:	dd 24       	eor	r13, r13
   15bf8:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15bfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bfe:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15c00:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15c04:	e0 90 6d 1a 	lds	r14, 0x1A6D	; 0x801a6d <SS80s>
   15c08:	f0 90 6e 1a 	lds	r15, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15c0c:	43 e0       	ldi	r20, 0x03	; 3
   15c0e:	e4 0e       	add	r14, r20
   15c10:	f1 1c       	adc	r15, r1
   15c12:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15c16:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15c1a:	86 01       	movw	r16, r12
   15c1c:	21 ef       	ldi	r18, 0xF1	; 241
   15c1e:	3d e1       	ldi	r19, 0x1D	; 29
   15c20:	b5 01       	movw	r22, r10
   15c22:	a4 01       	movw	r20, r8
   15c24:	82 81       	ldd	r24, Z+2	; 0x02
   15c26:	93 81       	ldd	r25, Z+3	; 0x03
   15c28:	0e 94 c6 83 	call	0x1078c	; 0x1078c <dbf_open_read>
   15c2c:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15c2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c32:	86 ff       	sbrs	r24, 6
   15c34:	04 c0       	rjmp	.+8      	; 0x15c3e <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15c36:	8b ea       	ldi	r24, 0xAB	; 171
   15c38:	90 e1       	ldi	r25, 0x10	; 16
   15c3a:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c42:	85 ff       	sbrs	r24, 5
   15c44:	0c c0       	rjmp	.+24     	; 0x15c5e <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15c46:	ed b7       	in	r30, 0x3d	; 61
   15c48:	fe b7       	in	r31, 0x3e	; 62
   15c4a:	15 83       	std	Z+5, r17	; 0x05
   15c4c:	04 83       	std	Z+4, r16	; 0x04
   15c4e:	2a 89       	ldd	r18, Y+18	; 0x12
   15c50:	3b 89       	ldd	r19, Y+19	; 0x13
   15c52:	4c 89       	ldd	r20, Y+20	; 0x14
   15c54:	21 83       	std	Z+1, r18	; 0x01
   15c56:	32 83       	std	Z+2, r19	; 0x02
   15c58:	43 83       	std	Z+3, r20	; 0x03
   15c5a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15c5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15c62:	17 ff       	sbrs	r17, 7
   15c64:	81 cf       	rjmp	.-254    	; 0x15b68 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15c66:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15c6a:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15c6e:	91 e0       	ldi	r25, 0x01	; 1
   15c70:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15c72:	80 ff       	sbrs	r24, 0
   15c74:	0a c0       	rjmp	.+20     	; 0x15c8a <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15c76:	88 e5       	ldi	r24, 0x58	; 88
   15c78:	95 e2       	ldi	r25, 0x25	; 37
   15c7a:	a0 e0       	ldi	r26, 0x00	; 0
   15c7c:	ed b7       	in	r30, 0x3d	; 61
   15c7e:	fe b7       	in	r31, 0x3e	; 62
   15c80:	81 83       	std	Z+1, r24	; 0x01
   15c82:	92 83       	std	Z+2, r25	; 0x02
   15c84:	a3 83       	std	Z+3, r26	; 0x03
   15c86:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            return( SS80_error_return() );
   15c8a:	d1 de       	rcall	.-606    	; 0x15a2e <SS80_error_return>
   15c8c:	68 c0       	rjmp	.+208    	; 0x15d5e <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15c8e:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15c90:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c92:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c94:	91 60       	ori	r25, 0x01	; 1
   15c96:	9d 87       	std	Y+13, r25	; 0x0d
   15c98:	8c 87       	std	Y+12, r24	; 0x0c
   15c9a:	af cf       	rjmp	.-162    	; 0x15bfa <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15c9c:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15ca0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15ca4:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15caa:	80 ff       	sbrs	r24, 0
   15cac:	0a c0       	rjmp	.+20     	; 0x15cc2 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15cae:	2d 89       	ldd	r18, Y+21	; 0x15
   15cb0:	3e 89       	ldd	r19, Y+22	; 0x16
   15cb2:	4f 89       	ldd	r20, Y+23	; 0x17
   15cb4:	ed b7       	in	r30, 0x3d	; 61
   15cb6:	fe b7       	in	r31, 0x3e	; 62
   15cb8:	21 83       	std	Z+1, r18	; 0x01
   15cba:	32 83       	std	Z+2, r19	; 0x02
   15cbc:	43 83       	std	Z+3, r20	; 0x03
   15cbe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            if(status & ERROR_MASK)
   15cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
   15cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
   15cc6:	88 27       	eor	r24, r24
   15cc8:	90 7d       	andi	r25, 0xD0	; 208
   15cca:	89 2b       	or	r24, r25
   15ccc:	09 f4       	brne	.+2      	; 0x15cd0 <SS80_locate_and_read+0x22e>
   15cce:	64 cf       	rjmp	.-312    	; 0x15b98 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15cd0:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15cd4:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15cd8:	83 81       	ldd	r24, Z+3	; 0x03
   15cda:	94 81       	ldd	r25, Z+4	; 0x04
   15cdc:	80 62       	ori	r24, 0x20	; 32
   15cde:	94 83       	std	Z+4, r25	; 0x04
   15ce0:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15ce2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ce6:	80 ff       	sbrs	r24, 0
   15ce8:	21 c0       	rjmp	.+66     	; 0x15d2c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15cea:	8a e1       	ldi	r24, 0x1A	; 26
   15cec:	95 e2       	ldi	r25, 0x25	; 37
   15cee:	a0 e0       	ldi	r26, 0x00	; 0
   15cf0:	ed b7       	in	r30, 0x3d	; 61
   15cf2:	fe b7       	in	r31, 0x3e	; 62
   15cf4:	81 83       	std	Z+1, r24	; 0x01
   15cf6:	92 83       	std	Z+2, r25	; 0x02
   15cf8:	a3 83       	std	Z+3, r26	; 0x03
   15cfa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15cfe:	16 c0       	rjmp	.+44     	; 0x15d2c <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d04:	85 ff       	sbrs	r24, 5
   15d06:	12 c0       	rjmp	.+36     	; 0x15d2c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15d08:	8e 85       	ldd	r24, Y+14	; 0x0e
   15d0a:	9f 85       	ldd	r25, Y+15	; 0x0f
   15d0c:	a8 89       	ldd	r26, Y+16	; 0x10
   15d0e:	b9 89       	ldd	r27, Y+17	; 0x11
   15d10:	ed b7       	in	r30, 0x3d	; 61
   15d12:	fe b7       	in	r31, 0x3e	; 62
   15d14:	84 83       	std	Z+4, r24	; 0x04
   15d16:	95 83       	std	Z+5, r25	; 0x05
   15d18:	a6 83       	std	Z+6, r26	; 0x06
   15d1a:	b7 83       	std	Z+7, r27	; 0x07
   15d1c:	82 ef       	ldi	r24, 0xF2	; 242
   15d1e:	94 e2       	ldi	r25, 0x24	; 36
   15d20:	a0 e0       	ldi	r26, 0x00	; 0
   15d22:	81 83       	std	Z+1, r24	; 0x01
   15d24:	92 83       	std	Z+2, r25	; 0x02
   15d26:	a3 83       	std	Z+3, r26	; 0x03
   15d28:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15d2c:	00 91 6d 1a 	lds	r16, 0x1A6D	; 0x801a6d <SS80s>
   15d30:	10 91 6e 1a 	lds	r17, 0x1A6E	; 0x801a6e <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15d34:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15d38:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15d3c:	20 89       	ldd	r18, Z+16	; 0x10
   15d3e:	31 89       	ldd	r19, Z+17	; 0x11
   15d40:	40 e0       	ldi	r20, 0x00	; 0
   15d42:	50 e0       	ldi	r21, 0x00	; 0
   15d44:	c5 01       	movw	r24, r10
   15d46:	b4 01       	movw	r22, r8
   15d48:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__udivmodsi4>
   15d4c:	f8 01       	movw	r30, r16
   15d4e:	27 83       	std	Z+7, r18	; 0x07
   15d50:	30 87       	std	Z+8, r19	; 0x08
   15d52:	41 87       	std	Z+9, r20	; 0x09
   15d54:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15d56:	8c 85       	ldd	r24, Y+12	; 0x0c
   15d58:	9d 85       	ldd	r25, Y+13	; 0x0d
   15d5a:	88 27       	eor	r24, r24
   15d5c:	90 7d       	andi	r25, 0xD0	; 208
}
   15d5e:	67 96       	adiw	r28, 0x17	; 23
   15d60:	e1 e1       	ldi	r30, 0x11	; 17
   15d62:	0c 94 b8 e3 	jmp	0x1c770	; 0x1c770 <__epilogue_restores__+0x2>

00015d66 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15d66:	cf 93       	push	r28
   15d68:	df 93       	push	r29
   15d6a:	00 d0       	rcall	.+0      	; 0x15d6c <SS80_Execute_State+0x6>
   15d6c:	00 d0       	rcall	.+0      	; 0x15d6e <SS80_Execute_State+0x8>
   15d6e:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15d70:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15d74:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15d78:	81 81       	ldd	r24, Z+1	; 0x01
   15d7a:	90 e0       	ldi	r25, 0x00	; 0
   15d7c:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
    switch(SS80s->estate)
   15d80:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15d84:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15d88:	80 81       	ld	r24, Z
   15d8a:	91 81       	ldd	r25, Z+1	; 0x01
   15d8c:	82 30       	cpi	r24, 0x02	; 2
   15d8e:	91 05       	cpc	r25, r1
   15d90:	89 f0       	breq	.+34     	; 0x15db4 <SS80_Execute_State+0x4e>
   15d92:	3c f4       	brge	.+14     	; 0x15da2 <SS80_Execute_State+0x3c>
   15d94:	00 97       	sbiw	r24, 0x00	; 0
   15d96:	81 f1       	breq	.+96     	; 0x15df8 <SS80_Execute_State+0x92>
   15d98:	81 30       	cpi	r24, 0x01	; 1
   15d9a:	91 05       	cpc	r25, r1
   15d9c:	b9 f4       	brne	.+46     	; 0x15dcc <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15d9e:	81 de       	rcall	.-766    	; 0x15aa2 <SS80_locate_and_read>
   15da0:	0d c0       	rjmp	.+26     	; 0x15dbc <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15da2:	83 30       	cpi	r24, 0x03	; 3
   15da4:	91 05       	cpc	r25, r1
   15da6:	41 f0       	breq	.+16     	; 0x15db8 <SS80_Execute_State+0x52>
   15da8:	84 30       	cpi	r24, 0x04	; 4
   15daa:	91 05       	cpc	r25, r1
   15dac:	79 f4       	brne	.+30     	; 0x15dcc <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15dae:	0e 94 88 a5 	call	0x14b10	; 0x14b10 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15db2:	04 c0       	rjmp	.+8      	; 0x15dbc <SS80_Execute_State+0x56>
   15db4:	59 da       	rcall	.-2894   	; 0x15268 <SS80_locate_and_write>
   15db6:	02 c0       	rjmp	.+4      	; 0x15dbc <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15db8:	0e 94 07 a5 	call	0x14a0e	; 0x14a0e <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15dbc:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15dbe:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15dc2:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15dc6:	11 82       	std	Z+1, r1	; 0x01
   15dc8:	10 82       	st	Z, r1
            break;
   15dca:	18 c0       	rjmp	.+48     	; 0x15dfc <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15dcc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15dd0:	20 ff       	sbrs	r18, 0
   15dd2:	0c c0       	rjmp	.+24     	; 0x15dec <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15dd4:	ed b7       	in	r30, 0x3d	; 61
   15dd6:	fe b7       	in	r31, 0x3e	; 62
   15dd8:	95 83       	std	Z+5, r25	; 0x05
   15dda:	84 83       	std	Z+4, r24	; 0x04
   15ddc:	86 eb       	ldi	r24, 0xB6	; 182
   15dde:	95 e2       	ldi	r25, 0x25	; 37
   15de0:	a0 e0       	ldi	r26, 0x00	; 0
   15de2:	81 83       	std	Z+1, r24	; 0x01
   15de4:	92 83       	std	Z+2, r25	; 0x02
   15de6:	a3 83       	std	Z+3, r26	; 0x03
   15de8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15dec:	e0 91 6d 1a 	lds	r30, 0x1A6D	; 0x801a6d <SS80s>
   15df0:	f0 91 6e 1a 	lds	r31, 0x1A6E	; 0x801a6e <SS80s+0x1>
   15df4:	11 82       	std	Z+1, r1	; 0x01
   15df6:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15df8:	c0 e0       	ldi	r28, 0x00	; 0
   15dfa:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15dfc:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15e00:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15e04:	81 81       	ldd	r24, Z+1	; 0x01
   15e06:	90 e0       	ldi	r25, 0x00	; 0
   15e08:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
    return(ret);
}
   15e0c:	ce 01       	movw	r24, r28
   15e0e:	cd b7       	in	r28, 0x3d	; 61
   15e10:	de b7       	in	r29, 0x3e	; 62
   15e12:	25 96       	adiw	r28, 0x05	; 5
   15e14:	e2 e0       	ldi	r30, 0x02	; 2
   15e16:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00015e1a <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15e1a:	a9 e0       	ldi	r26, 0x09	; 9
   15e1c:	b0 e0       	ldi	r27, 0x00	; 0
   15e1e:	e3 e1       	ldi	r30, 0x13	; 19
   15e20:	ff ea       	ldi	r31, 0xAF	; 175
   15e22:	0c 94 aa e3 	jmp	0x1c754	; 0x1c754 <__prologue_saves__+0x1e>
   15e26:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15e28:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   15e2c:	90 e0       	ldi	r25, 0x00	; 0
   15e2e:	0e 94 ae 8b 	call	0x1175c	; 0x1175c <SS80_is_MTA>
   15e32:	89 2b       	or	r24, r25
   15e34:	19 f0       	breq	.+6      	; 0x15e3c <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15e36:	15 36       	cpi	r17, 0x65	; 101
   15e38:	19 f5       	brne	.+70     	; 0x15e80 <SS80_COMMANDS+0x66>
   15e3a:	09 c0       	rjmp	.+18     	; 0x15e4e <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15e3c:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15e40:	90 e0       	ldi	r25, 0x00	; 0
   15e42:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <SS80_is_MLA>
   15e46:	ec 01       	movw	r28, r24
   15e48:	89 2b       	or	r24, r25
   15e4a:	a9 f7       	brne	.-22     	; 0x15e36 <SS80_COMMANDS+0x1c>
   15e4c:	ad c0       	rjmp	.+346    	; 0x15fa8 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15e4e:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15e52:	90 e0       	ldi	r25, 0x00	; 0
   15e54:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <SS80_is_MLA>
   15e58:	89 2b       	or	r24, r25
   15e5a:	09 f4       	brne	.+2      	; 0x15e5e <SS80_COMMANDS+0x44>
   15e5c:	a2 c0       	rjmp	.+324    	; 0x15fa2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e62:	85 ff       	sbrs	r24, 5
   15e64:	0a c0       	rjmp	.+20     	; 0x15e7a <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15e66:	8e e9       	ldi	r24, 0x9E	; 158
   15e68:	9e e1       	ldi	r25, 0x1E	; 30
   15e6a:	a0 e0       	ldi	r26, 0x00	; 0
   15e6c:	ed b7       	in	r30, 0x3d	; 61
   15e6e:	fe b7       	in	r31, 0x3e	; 62
   15e70:	81 83       	std	Z+1, r24	; 0x01
   15e72:	92 83       	std	Z+2, r25	; 0x02
   15e74:	a3 83       	std	Z+3, r26	; 0x03
   15e76:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return ( SS80_Command_State() );
   15e7a:	0e 94 48 a6 	call	0x14c90	; 0x14c90 <SS80_Command_State>
   15e7e:	73 c0       	rjmp	.+230    	; 0x15f66 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15e80:	1e 36       	cpi	r17, 0x6E	; 110
   15e82:	01 f5       	brne	.+64     	; 0x15ec4 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15e84:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15e88:	90 e0       	ldi	r25, 0x00	; 0
   15e8a:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <SS80_is_MLA>
   15e8e:	89 2b       	or	r24, r25
   15e90:	79 f0       	breq	.+30     	; 0x15eb0 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e96:	85 ff       	sbrs	r24, 5
   15e98:	13 c0       	rjmp	.+38     	; 0x15ec0 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15e9a:	88 e8       	ldi	r24, 0x88	; 136
   15e9c:	9e e1       	ldi	r25, 0x1E	; 30
   15e9e:	a0 e0       	ldi	r26, 0x00	; 0
   15ea0:	ed b7       	in	r30, 0x3d	; 61
   15ea2:	fe b7       	in	r31, 0x3e	; 62
   15ea4:	81 83       	std	Z+1, r24	; 0x01
   15ea6:	92 83       	std	Z+2, r25	; 0x02
   15ea8:	a3 83       	std	Z+3, r26	; 0x03
   15eaa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   15eae:	08 c0       	rjmp	.+16     	; 0x15ec0 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15eb0:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   15eb4:	90 e0       	ldi	r25, 0x00	; 0
   15eb6:	0e 94 ae 8b 	call	0x1175c	; 0x1175c <SS80_is_MTA>
   15eba:	89 2b       	or	r24, r25
   15ebc:	51 f7       	brne	.-44     	; 0x15e92 <SS80_COMMANDS+0x78>
   15ebe:	71 c0       	rjmp	.+226    	; 0x15fa2 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15ec0:	52 df       	rcall	.-348    	; 0x15d66 <SS80_Execute_State>
   15ec2:	51 c0       	rjmp	.+162    	; 0x15f66 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15ec4:	10 37       	cpi	r17, 0x70	; 112
   15ec6:	b9 f5       	brne	.+110    	; 0x15f36 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15ec8:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   15ecc:	90 e0       	ldi	r25, 0x00	; 0
   15ece:	0e 94 ae 8b 	call	0x1175c	; 0x1175c <SS80_is_MTA>
   15ed2:	89 2b       	or	r24, r25
   15ed4:	81 f0       	breq	.+32     	; 0x15ef6 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ed6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15eda:	85 ff       	sbrs	r24, 5
   15edc:	0a c0       	rjmp	.+20     	; 0x15ef2 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15ede:	83 e7       	ldi	r24, 0x73	; 115
   15ee0:	9e e1       	ldi	r25, 0x1E	; 30
   15ee2:	a0 e0       	ldi	r26, 0x00	; 0
   15ee4:	ed b7       	in	r30, 0x3d	; 61
   15ee6:	fe b7       	in	r31, 0x3e	; 62
   15ee8:	81 83       	std	Z+1, r24	; 0x01
   15eea:	92 83       	std	Z+2, r25	; 0x02
   15eec:	a3 83       	std	Z+3, r26	; 0x03
   15eee:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return( SS80_Report() );
   15ef2:	4c db       	rcall	.-2408   	; 0x1558c <SS80_Report>
   15ef4:	38 c0       	rjmp	.+112    	; 0x15f66 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15ef6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15efa:	90 e0       	ldi	r25, 0x00	; 0
   15efc:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <SS80_is_MLA>
   15f00:	89 2b       	or	r24, r25
   15f02:	09 f4       	brne	.+2      	; 0x15f06 <SS80_COMMANDS+0xec>
   15f04:	4e c0       	rjmp	.+156    	; 0x15fa2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15f06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f0a:	85 ff       	sbrs	r24, 5
   15f0c:	0a c0       	rjmp	.+20     	; 0x15f22 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15f0e:	84 e6       	ldi	r24, 0x64	; 100
   15f10:	9e e1       	ldi	r25, 0x1E	; 30
   15f12:	a0 e0       	ldi	r26, 0x00	; 0
   15f14:	ed b7       	in	r30, 0x3d	; 61
   15f16:	fe b7       	in	r31, 0x3e	; 62
   15f18:	81 83       	std	Z+1, r24	; 0x01
   15f1a:	92 83       	std	Z+2, r25	; 0x02
   15f1c:	a3 83       	std	Z+3, r26	; 0x03
   15f1e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15f22:	e0 91 6f 1a 	lds	r30, 0x1A6F	; 0x801a6f <SS80p>
   15f26:	f0 91 70 1a 	lds	r31, 0x1A70	; 0x801a70 <SS80p+0x1>
   15f2a:	81 81       	ldd	r24, Z+1	; 0x01
   15f2c:	90 e0       	ldi	r25, 0x00	; 0
   15f2e:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15f32:	1d dc       	rcall	.-1990   	; 0x1576e <SS80_Amigo_Clear>
   15f34:	18 c0       	rjmp	.+48     	; 0x15f66 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15f36:	12 37       	cpi	r17, 0x72	; 114
   15f38:	c1 f4       	brne	.+48     	; 0x15f6a <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15f3a:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15f3e:	90 e0       	ldi	r25, 0x00	; 0
   15f40:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <SS80_is_MLA>
   15f44:	89 2b       	or	r24, r25
   15f46:	89 f0       	breq	.+34     	; 0x15f6a <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f4c:	85 ff       	sbrs	r24, 5
   15f4e:	0a c0       	rjmp	.+20     	; 0x15f64 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15f50:	80 e5       	ldi	r24, 0x50	; 80
   15f52:	9e e1       	ldi	r25, 0x1E	; 30
   15f54:	a0 e0       	ldi	r26, 0x00	; 0
   15f56:	ed b7       	in	r30, 0x3d	; 61
   15f58:	fe b7       	in	r31, 0x3e	; 62
   15f5a:	81 83       	std	Z+1, r24	; 0x01
   15f5c:	92 83       	std	Z+2, r25	; 0x02
   15f5e:	a3 83       	std	Z+3, r26	; 0x03
   15f60:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15f64:	58 dc       	rcall	.-1872   	; 0x15816 <SS80_Transparent_State>
   15f66:	ec 01       	movw	r28, r24
   15f68:	3b c0       	rjmp	.+118    	; 0x15fe0 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15f6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f6e:	80 ff       	sbrs	r24, 0
   15f70:	18 c0       	rjmp	.+48     	; 0x15fa2 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15f72:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   15f76:	90 e0       	ldi	r25, 0x00	; 0
   15f78:	ed b7       	in	r30, 0x3d	; 61
   15f7a:	fe b7       	in	r31, 0x3e	; 62
   15f7c:	91 87       	std	Z+9, r25	; 0x09
   15f7e:	80 87       	std	Z+8, r24	; 0x08
   15f80:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15f84:	90 e0       	ldi	r25, 0x00	; 0
   15f86:	97 83       	std	Z+7, r25	; 0x07
   15f88:	86 83       	std	Z+6, r24	; 0x06
   15f8a:	81 2f       	mov	r24, r17
   15f8c:	90 e0       	ldi	r25, 0x00	; 0
   15f8e:	95 83       	std	Z+5, r25	; 0x05
   15f90:	84 83       	std	Z+4, r24	; 0x04
   15f92:	8c e1       	ldi	r24, 0x1C	; 28
   15f94:	9e e1       	ldi	r25, 0x1E	; 30
   15f96:	a0 e0       	ldi	r26, 0x00	; 0
   15f98:	81 83       	std	Z+1, r24	; 0x01
   15f9a:	92 83       	std	Z+2, r25	; 0x02
   15f9c:	a3 83       	std	Z+3, r26	; 0x03
   15f9e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15fa2:	c0 e0       	ldi	r28, 0x00	; 0
   15fa4:	d0 e0       	ldi	r29, 0x00	; 0
   15fa6:	1c c0       	rjmp	.+56     	; 0x15fe0 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15fa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fac:	80 ff       	sbrs	r24, 0
   15fae:	f9 cf       	rjmp	.-14     	; 0x15fa2 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15fb0:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   15fb4:	90 e0       	ldi	r25, 0x00	; 0
   15fb6:	ed b7       	in	r30, 0x3d	; 61
   15fb8:	fe b7       	in	r31, 0x3e	; 62
   15fba:	91 87       	std	Z+9, r25	; 0x09
   15fbc:	80 87       	std	Z+8, r24	; 0x08
   15fbe:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   15fc2:	90 e0       	ldi	r25, 0x00	; 0
   15fc4:	97 83       	std	Z+7, r25	; 0x07
   15fc6:	86 83       	std	Z+6, r24	; 0x06
   15fc8:	81 2f       	mov	r24, r17
   15fca:	90 e0       	ldi	r25, 0x00	; 0
   15fcc:	95 83       	std	Z+5, r25	; 0x05
   15fce:	84 83       	std	Z+4, r24	; 0x04
   15fd0:	88 ee       	ldi	r24, 0xE8	; 232
   15fd2:	9d e1       	ldi	r25, 0x1D	; 29
   15fd4:	a0 e0       	ldi	r26, 0x00	; 0
   15fd6:	81 83       	std	Z+1, r24	; 0x01
   15fd8:	92 83       	std	Z+2, r25	; 0x02
   15fda:	a3 83       	std	Z+3, r26	; 0x03
   15fdc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15fe0:	ce 01       	movw	r24, r28
   15fe2:	cd b7       	in	r28, 0x3d	; 61
   15fe4:	de b7       	in	r29, 0x3e	; 62
   15fe6:	29 96       	adiw	r28, 0x09	; 9
   15fe8:	e3 e0       	ldi	r30, 0x03	; 3
   15fea:	0c 94 c6 e3 	jmp	0x1c78c	; 0x1c78c <__epilogue_restores__+0x1e>

00015fee <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15fee:	cf 92       	push	r12
   15ff0:	df 92       	push	r13
   15ff2:	ef 92       	push	r14
   15ff4:	0f 93       	push	r16
   15ff6:	1f 93       	push	r17
   15ff8:	cf 93       	push	r28
   15ffa:	df 93       	push	r29
   15ffc:	00 d0       	rcall	.+0      	; 0x15ffe <amigo_overflow_check+0x10>
   15ffe:	00 d0       	rcall	.+0      	; 0x16000 <amigo_overflow_check+0x12>
   16000:	1f 92       	push	r1
   16002:	ec 01       	movw	r28, r24
   16004:	8b 01       	movw	r16, r22
   16006:	80 e0       	ldi	r24, 0x00	; 0
   16008:	90 e0       	ldi	r25, 0x00	; 0
   1600a:	20 ea       	ldi	r18, 0xA0	; 160
   1600c:	3d e2       	ldi	r19, 0x2D	; 45
   1600e:	69 01       	movw	r12, r18
   16010:	e1 2c       	mov	r14, r1
   16012:	2d 81       	ldd	r18, Y+5	; 0x05
   16014:	30 e0       	ldi	r19, 0x00	; 0
   16016:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   1601a:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1601e:	40 85       	ldd	r20, Z+8	; 0x08
   16020:	51 85       	ldd	r21, Z+9	; 0x09
   16022:	24 17       	cp	r18, r20
   16024:	35 07       	cpc	r19, r21
   16026:	64 f1       	brlt	.+88     	; 0x16080 <amigo_overflow_check+0x92>
   16028:	1d 82       	std	Y+5, r1	; 0x05
   1602a:	2c 81       	ldd	r18, Y+4	; 0x04
   1602c:	2f 5f       	subi	r18, 0xFF	; 255
   1602e:	2c 83       	std	Y+4, r18	; 0x04
   16030:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16034:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16038:	2c 81       	ldd	r18, Y+4	; 0x04
   1603a:	30 e0       	ldi	r19, 0x00	; 0
   1603c:	42 85       	ldd	r20, Z+10	; 0x0a
   1603e:	53 85       	ldd	r21, Z+11	; 0x0b
   16040:	24 17       	cp	r18, r20
   16042:	35 07       	cpc	r19, r21
   16044:	34 f3       	brlt	.-52     	; 0x16012 <amigo_overflow_check+0x24>
   16046:	1c 82       	std	Y+4, r1	; 0x04
   16048:	2b 81       	ldd	r18, Y+3	; 0x03
   1604a:	2f 5f       	subi	r18, 0xFF	; 255
   1604c:	2b 83       	std	Y+3, r18	; 0x03
   1604e:	30 e0       	ldi	r19, 0x00	; 0
   16050:	44 85       	ldd	r20, Z+12	; 0x0c
   16052:	55 85       	ldd	r21, Z+13	; 0x0d
   16054:	24 17       	cp	r18, r20
   16056:	35 07       	cpc	r19, r21
   16058:	5c f3       	brlt	.-42     	; 0x16030 <amigo_overflow_check+0x42>
   1605a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1605e:	80 ff       	sbrs	r24, 0
   16060:	0c c0       	rjmp	.+24     	; 0x1607a <amigo_overflow_check+0x8c>
   16062:	01 15       	cp	r16, r1
   16064:	11 05       	cpc	r17, r1
   16066:	49 f0       	breq	.+18     	; 0x1607a <amigo_overflow_check+0x8c>
   16068:	ed b7       	in	r30, 0x3d	; 61
   1606a:	fe b7       	in	r31, 0x3e	; 62
   1606c:	15 83       	std	Z+5, r17	; 0x05
   1606e:	04 83       	std	Z+4, r16	; 0x04
   16070:	c1 82       	std	Z+1, r12	; 0x01
   16072:	d2 82       	std	Z+2, r13	; 0x02
   16074:	e3 82       	std	Z+3, r14	; 0x03
   16076:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1607a:	81 e0       	ldi	r24, 0x01	; 1
   1607c:	90 e0       	ldi	r25, 0x00	; 0
   1607e:	d8 cf       	rjmp	.-80     	; 0x16030 <amigo_overflow_check+0x42>
   16080:	0f 90       	pop	r0
   16082:	0f 90       	pop	r0
   16084:	0f 90       	pop	r0
   16086:	0f 90       	pop	r0
   16088:	0f 90       	pop	r0
   1608a:	df 91       	pop	r29
   1608c:	cf 91       	pop	r28
   1608e:	1f 91       	pop	r17
   16090:	0f 91       	pop	r16
   16092:	ef 90       	pop	r14
   16094:	df 90       	pop	r13
   16096:	cf 90       	pop	r12
   16098:	08 95       	ret

0001609a <amigo_chs_to_logical>:
   1609a:	a1 e1       	ldi	r26, 0x11	; 17
   1609c:	b0 e0       	ldi	r27, 0x00	; 0
   1609e:	e3 e5       	ldi	r30, 0x53	; 83
   160a0:	f0 eb       	ldi	r31, 0xB0	; 176
   160a2:	0c 94 9f e3 	jmp	0x1c73e	; 0x1c73e <__prologue_saves__+0x8>
   160a6:	8b 01       	movw	r16, r22
   160a8:	60 91 6b 1a 	lds	r22, 0x1A6B	; 0x801a6b <AMIGOp>
   160ac:	70 91 6c 1a 	lds	r23, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   160b0:	fb 01       	movw	r30, r22
   160b2:	40 85       	ldd	r20, Z+8	; 0x08
   160b4:	51 85       	ldd	r21, Z+9	; 0x09
   160b6:	fc 01       	movw	r30, r24
   160b8:	c4 81       	ldd	r28, Z+4	; 0x04
   160ba:	d0 e0       	ldi	r29, 0x00	; 0
   160bc:	4c 9f       	mul	r20, r28
   160be:	90 01       	movw	r18, r0
   160c0:	4d 9f       	mul	r20, r29
   160c2:	30 0d       	add	r19, r0
   160c4:	5c 9f       	mul	r21, r28
   160c6:	30 0d       	add	r19, r0
   160c8:	11 24       	eor	r1, r1
   160ca:	49 01       	movw	r8, r18
   160cc:	33 0f       	add	r19, r19
   160ce:	aa 08       	sbc	r10, r10
   160d0:	bb 08       	sbc	r11, r11
   160d2:	63 80       	ldd	r6, Z+3	; 0x03
   160d4:	71 2c       	mov	r7, r1
   160d6:	fb 01       	movw	r30, r22
   160d8:	e2 84       	ldd	r14, Z+10	; 0x0a
   160da:	f3 84       	ldd	r15, Z+11	; 0x0b
   160dc:	4e 9d       	mul	r20, r14
   160de:	d0 01       	movw	r26, r0
   160e0:	4f 9d       	mul	r20, r15
   160e2:	b0 0d       	add	r27, r0
   160e4:	5e 9d       	mul	r21, r14
   160e6:	b0 0d       	add	r27, r0
   160e8:	11 24       	eor	r1, r1
   160ea:	a6 9d       	mul	r26, r6
   160ec:	90 01       	movw	r18, r0
   160ee:	a7 9d       	mul	r26, r7
   160f0:	30 0d       	add	r19, r0
   160f2:	b6 9d       	mul	r27, r6
   160f4:	30 0d       	add	r19, r0
   160f6:	11 24       	eor	r1, r1
   160f8:	69 01       	movw	r12, r18
   160fa:	33 0f       	add	r19, r19
   160fc:	ee 08       	sbc	r14, r14
   160fe:	ff 08       	sbc	r15, r15
   16100:	8c 0c       	add	r8, r12
   16102:	9d 1c       	adc	r9, r13
   16104:	ae 1c       	adc	r10, r14
   16106:	bf 1c       	adc	r11, r15
   16108:	fc 01       	movw	r30, r24
   1610a:	f5 80       	ldd	r15, Z+5	; 0x05
   1610c:	a5 01       	movw	r20, r10
   1610e:	94 01       	movw	r18, r8
   16110:	2f 0d       	add	r18, r15
   16112:	31 1d       	adc	r19, r1
   16114:	41 1d       	adc	r20, r1
   16116:	51 1d       	adc	r21, r1
   16118:	fb 01       	movw	r30, r22
   1611a:	a6 81       	ldd	r26, Z+6	; 0x06
   1611c:	b7 81       	ldd	r27, Z+7	; 0x07
   1611e:	0e 94 85 e3 	call	0x1c70a	; 0x1c70a <__mulshisi3>
   16122:	4b 01       	movw	r8, r22
   16124:	5c 01       	movw	r10, r24
   16126:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1612a:	85 ff       	sbrs	r24, 5
   1612c:	22 c0       	rjmp	.+68     	; 0x16172 <amigo_chs_to_logical+0xd8>
   1612e:	8f 2d       	mov	r24, r15
   16130:	90 e0       	ldi	r25, 0x00	; 0
   16132:	ed b7       	in	r30, 0x3d	; 61
   16134:	fe b7       	in	r31, 0x3e	; 62
   16136:	91 8b       	std	Z+17, r25	; 0x11
   16138:	80 8b       	std	Z+16, r24	; 0x10
   1613a:	d7 87       	std	Z+15, r29	; 0x0f
   1613c:	c6 87       	std	Z+14, r28	; 0x0e
   1613e:	75 86       	std	Z+13, r7	; 0x0d
   16140:	64 86       	std	Z+12, r6	; 0x0c
   16142:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16146:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1614a:	81 81       	ldd	r24, Z+1	; 0x01
   1614c:	90 e0       	ldi	r25, 0x00	; 0
   1614e:	ed b7       	in	r30, 0x3d	; 61
   16150:	fe b7       	in	r31, 0x3e	; 62
   16152:	93 87       	std	Z+11, r25	; 0x0b
   16154:	82 87       	std	Z+10, r24	; 0x0a
   16156:	86 82       	std	Z+6, r8	; 0x06
   16158:	97 82       	std	Z+7, r9	; 0x07
   1615a:	a0 86       	std	Z+8, r10	; 0x08
   1615c:	b1 86       	std	Z+9, r11	; 0x09
   1615e:	15 83       	std	Z+5, r17	; 0x05
   16160:	04 83       	std	Z+4, r16	; 0x04
   16162:	8d e4       	ldi	r24, 0x4D	; 77
   16164:	9d e2       	ldi	r25, 0x2D	; 45
   16166:	a0 e0       	ldi	r26, 0x00	; 0
   16168:	81 83       	std	Z+1, r24	; 0x01
   1616a:	92 83       	std	Z+2, r25	; 0x02
   1616c:	a3 83       	std	Z+3, r26	; 0x03
   1616e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16172:	c5 01       	movw	r24, r10
   16174:	b4 01       	movw	r22, r8
   16176:	cd b7       	in	r28, 0x3d	; 61
   16178:	de b7       	in	r29, 0x3e	; 62
   1617a:	61 96       	adiw	r28, 0x11	; 17
   1617c:	ee e0       	ldi	r30, 0x0E	; 14
   1617e:	0c 94 bb e3 	jmp	0x1c776	; 0x1c776 <__epilogue_restores__+0x8>

00016182 <amigo_init>:
   16182:	ef 92       	push	r14
   16184:	ff 92       	push	r15
   16186:	0f 93       	push	r16
   16188:	1f 93       	push	r17
   1618a:	cf 93       	push	r28
   1618c:	df 93       	push	r29
   1618e:	04 ed       	ldi	r16, 0xD4	; 212
   16190:	11 e2       	ldi	r17, 0x21	; 33
   16192:	cb e0       	ldi	r28, 0x0B	; 11
   16194:	d0 e0       	ldi	r29, 0x00	; 0
   16196:	84 e0       	ldi	r24, 0x04	; 4
   16198:	f8 2e       	mov	r15, r24
   1619a:	92 e0       	ldi	r25, 0x02	; 2
   1619c:	e9 2e       	mov	r14, r25
   1619e:	d8 01       	movw	r26, r16
   161a0:	8c 91       	ld	r24, X
   161a2:	81 30       	cpi	r24, 0x01	; 1
   161a4:	31 f5       	brne	.+76     	; 0x161f2 <amigo_init+0x70>
   161a6:	ce 01       	movw	r24, r28
   161a8:	0e 94 ab 96 	call	0x12d56	; 0x12d56 <set_active_device>
   161ac:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   161b0:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   161b4:	10 82       	st	Z, r1
   161b6:	9f 01       	movw	r18, r30
   161b8:	27 5f       	subi	r18, 0xF7	; 247
   161ba:	3f 4f       	sbci	r19, 0xFF	; 255
   161bc:	d9 01       	movw	r26, r18
   161be:	8f 2d       	mov	r24, r15
   161c0:	1d 92       	st	X+, r1
   161c2:	8a 95       	dec	r24
   161c4:	e9 f7       	brne	.-6      	; 0x161c0 <amigo_init+0x3e>
   161c6:	2c 5f       	subi	r18, 0xFC	; 252
   161c8:	3f 4f       	sbci	r19, 0xFF	; 255
   161ca:	d9 01       	movw	r26, r18
   161cc:	8f 2d       	mov	r24, r15
   161ce:	1d 92       	st	X+, r1
   161d0:	8a 95       	dec	r24
   161d2:	e9 f7       	brne	.-6      	; 0x161ce <amigo_init+0x4c>
   161d4:	11 82       	std	Z+1, r1	; 0x01
   161d6:	15 82       	std	Z+5, r1	; 0x05
   161d8:	14 82       	std	Z+4, r1	; 0x04
   161da:	13 82       	std	Z+3, r1	; 0x03
   161dc:	e6 82       	std	Z+6, r14	; 0x06
   161de:	10 86       	std	Z+8, r1	; 0x08
   161e0:	17 82       	std	Z+7, r1	; 0x07
   161e2:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   161e6:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   161ea:	81 81       	ldd	r24, Z+1	; 0x01
   161ec:	90 e0       	ldi	r25, 0x00	; 0
   161ee:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
   161f2:	21 97       	sbiw	r28, 0x01	; 1
   161f4:	0b 52       	subi	r16, 0x2B	; 43
   161f6:	11 09       	sbc	r17, r1
   161f8:	cf 3f       	cpi	r28, 0xFF	; 255
   161fa:	af ef       	ldi	r26, 0xFF	; 255
   161fc:	da 07       	cpc	r29, r26
   161fe:	79 f6       	brne	.-98     	; 0x1619e <amigo_init+0x1c>
   16200:	cd b7       	in	r28, 0x3d	; 61
   16202:	de b7       	in	r29, 0x3e	; 62
   16204:	e6 e0       	ldi	r30, 0x06	; 6
   16206:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0001620a <amigo_request_logical_address>:
   1620a:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1620e:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16212:	15 86       	std	Z+13, r1	; 0x0d
   16214:	83 81       	ldd	r24, Z+3	; 0x03
   16216:	86 87       	std	Z+14, r24	; 0x0e
   16218:	84 81       	ldd	r24, Z+4	; 0x04
   1621a:	87 87       	std	Z+15, r24	; 0x0f
   1621c:	85 81       	ldd	r24, Z+5	; 0x05
   1621e:	80 8b       	std	Z+16, r24	; 0x10
   16220:	80 e0       	ldi	r24, 0x00	; 0
   16222:	90 e0       	ldi	r25, 0x00	; 0
   16224:	08 95       	ret

00016226 <amigo_request_status>:
   16226:	00 d0       	rcall	.+0      	; 0x16228 <amigo_request_status+0x2>
   16228:	1f 92       	push	r1
   1622a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1622e:	85 ff       	sbrs	r24, 5
   16230:	0a c0       	rjmp	.+20     	; 0x16246 <amigo_request_status+0x20>
   16232:	80 e2       	ldi	r24, 0x20	; 32
   16234:	9e e2       	ldi	r25, 0x2E	; 46
   16236:	a0 e0       	ldi	r26, 0x00	; 0
   16238:	ed b7       	in	r30, 0x3d	; 61
   1623a:	fe b7       	in	r31, 0x3e	; 62
   1623c:	81 83       	std	Z+1, r24	; 0x01
   1623e:	92 83       	std	Z+2, r25	; 0x02
   16240:	a3 83       	std	Z+3, r26	; 0x03
   16242:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16246:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1624a:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1624e:	11 86       	std	Z+9, r1	; 0x09
   16250:	81 81       	ldd	r24, Z+1	; 0x01
   16252:	82 87       	std	Z+10, r24	; 0x0a
   16254:	8d e0       	ldi	r24, 0x0D	; 13
   16256:	83 87       	std	Z+11, r24	; 0x0b
   16258:	14 86       	std	Z+12, r1	; 0x0c
   1625a:	0e 94 28 6f 	call	0xde50	; 0xde50 <mmc_wp_status>
   1625e:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16262:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16266:	89 2b       	or	r24, r25
   16268:	19 f0       	breq	.+6      	; 0x16270 <amigo_request_status+0x4a>
   1626a:	84 85       	ldd	r24, Z+12	; 0x0c
   1626c:	80 66       	ori	r24, 0x60	; 96
   1626e:	84 87       	std	Z+12, r24	; 0x0c
   16270:	86 81       	ldd	r24, Z+6	; 0x06
   16272:	82 30       	cpi	r24, 0x02	; 2
   16274:	31 f4       	brne	.+12     	; 0x16282 <amigo_request_status+0x5c>
   16276:	83 e1       	ldi	r24, 0x13	; 19
   16278:	81 87       	std	Z+9, r24	; 0x09
   1627a:	84 85       	ldd	r24, Z+12	; 0x0c
   1627c:	88 60       	ori	r24, 0x08	; 8
   1627e:	84 87       	std	Z+12, r24	; 0x0c
   16280:	21 c0       	rjmp	.+66     	; 0x162c4 <amigo_request_status+0x9e>
   16282:	27 81       	ldd	r18, Z+7	; 0x07
   16284:	30 85       	ldd	r19, Z+8	; 0x08
   16286:	21 15       	cp	r18, r1
   16288:	31 05       	cpc	r19, r1
   1628a:	11 f4       	brne	.+4      	; 0x16290 <amigo_request_status+0x6a>
   1628c:	81 30       	cpi	r24, 0x01	; 1
   1628e:	d1 f4       	brne	.+52     	; 0x162c4 <amigo_request_status+0x9e>
   16290:	26 fd       	sbrc	r18, 6
   16292:	0c c0       	rjmp	.+24     	; 0x162ac <amigo_request_status+0x86>
   16294:	25 ff       	sbrs	r18, 5
   16296:	03 c0       	rjmp	.+6      	; 0x1629e <amigo_request_status+0x78>
   16298:	8a e0       	ldi	r24, 0x0A	; 10
   1629a:	81 87       	std	Z+9, r24	; 0x09
   1629c:	0d c0       	rjmp	.+26     	; 0x162b8 <amigo_request_status+0x92>
   1629e:	84 85       	ldd	r24, Z+12	; 0x0c
   162a0:	24 ff       	sbrs	r18, 4
   162a2:	02 c0       	rjmp	.+4      	; 0x162a8 <amigo_request_status+0x82>
   162a4:	83 60       	ori	r24, 0x03	; 3
   162a6:	07 c0       	rjmp	.+14     	; 0x162b6 <amigo_request_status+0x90>
   162a8:	21 ff       	sbrs	r18, 1
   162aa:	02 c0       	rjmp	.+4      	; 0x162b0 <amigo_request_status+0x8a>
   162ac:	83 e1       	ldi	r24, 0x13	; 19
   162ae:	f5 cf       	rjmp	.-22     	; 0x1629a <amigo_request_status+0x74>
   162b0:	22 ff       	sbrs	r18, 2
   162b2:	02 c0       	rjmp	.+4      	; 0x162b8 <amigo_request_status+0x92>
   162b4:	84 60       	ori	r24, 0x04	; 4
   162b6:	84 87       	std	Z+12, r24	; 0x0c
   162b8:	84 85       	ldd	r24, Z+12	; 0x0c
   162ba:	80 61       	ori	r24, 0x10	; 16
   162bc:	84 87       	std	Z+12, r24	; 0x0c
   162be:	83 85       	ldd	r24, Z+11	; 0x0b
   162c0:	80 68       	ori	r24, 0x80	; 128
   162c2:	83 87       	std	Z+11, r24	; 0x0b
   162c4:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   162c8:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   162cc:	81 81       	ldd	r24, Z+1	; 0x01
   162ce:	90 e0       	ldi	r25, 0x00	; 0
   162d0:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   162d4:	80 e0       	ldi	r24, 0x00	; 0
   162d6:	90 e0       	ldi	r25, 0x00	; 0
   162d8:	0f 90       	pop	r0
   162da:	0f 90       	pop	r0
   162dc:	0f 90       	pop	r0
   162de:	08 95       	ret

000162e0 <amigo_send_logical_address>:
   162e0:	a5 e0       	ldi	r26, 0x05	; 5
   162e2:	b0 e0       	ldi	r27, 0x00	; 0
   162e4:	e6 e7       	ldi	r30, 0x76	; 118
   162e6:	f1 eb       	ldi	r31, 0xB1	; 177
   162e8:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   162ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162f0:	85 ff       	sbrs	r24, 5
   162f2:	0a c0       	rjmp	.+20     	; 0x16308 <amigo_send_logical_address+0x28>
   162f4:	82 e0       	ldi	r24, 0x02	; 2
   162f6:	9e e2       	ldi	r25, 0x2E	; 46
   162f8:	a0 e0       	ldi	r26, 0x00	; 0
   162fa:	ed b7       	in	r30, 0x3d	; 61
   162fc:	fe b7       	in	r31, 0x3e	; 62
   162fe:	81 83       	std	Z+1, r24	; 0x01
   16300:	92 83       	std	Z+2, r25	; 0x02
   16302:	a3 83       	std	Z+3, r26	; 0x03
   16304:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16308:	80 e0       	ldi	r24, 0x00	; 0
   1630a:	91 e0       	ldi	r25, 0x01	; 1
   1630c:	9d 83       	std	Y+5, r25	; 0x05
   1630e:	8c 83       	std	Y+4, r24	; 0x04
   16310:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   16314:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16318:	ae 01       	movw	r20, r28
   1631a:	4c 5f       	subi	r20, 0xFC	; 252
   1631c:	5f 4f       	sbci	r21, 0xFF	; 255
   1631e:	64 e0       	ldi	r22, 0x04	; 4
   16320:	70 e0       	ldi	r23, 0x00	; 0
   16322:	0d 96       	adiw	r24, 0x0d	; 13
   16324:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   16328:	2c 81       	ldd	r18, Y+4	; 0x04
   1632a:	3d 81       	ldd	r19, Y+5	; 0x05
   1632c:	22 27       	eor	r18, r18
   1632e:	30 7d       	andi	r19, 0xD0	; 208
   16330:	23 2b       	or	r18, r19
   16332:	11 f4       	brne	.+4      	; 0x16338 <amigo_send_logical_address+0x58>
   16334:	04 97       	sbiw	r24, 0x04	; 4
   16336:	c9 f0       	breq	.+50     	; 0x1636a <amigo_send_logical_address+0x8a>
   16338:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1633c:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16340:	87 81       	ldd	r24, Z+7	; 0x07
   16342:	90 85       	ldd	r25, Z+8	; 0x08
   16344:	80 62       	ori	r24, 0x20	; 32
   16346:	90 87       	std	Z+8, r25	; 0x08
   16348:	87 83       	std	Z+7, r24	; 0x07
   1634a:	81 e0       	ldi	r24, 0x01	; 1
   1634c:	86 83       	std	Z+6, r24	; 0x06
   1634e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16352:	80 ff       	sbrs	r24, 0
   16354:	0a c0       	rjmp	.+20     	; 0x1636a <amigo_send_logical_address+0x8a>
   16356:	88 ee       	ldi	r24, 0xE8	; 232
   16358:	9d e2       	ldi	r25, 0x2D	; 45
   1635a:	a0 e0       	ldi	r26, 0x00	; 0
   1635c:	ed b7       	in	r30, 0x3d	; 61
   1635e:	fe b7       	in	r31, 0x3e	; 62
   16360:	81 83       	std	Z+1, r24	; 0x01
   16362:	92 83       	std	Z+2, r25	; 0x02
   16364:	a3 83       	std	Z+3, r26	; 0x03
   16366:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1636a:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   1636e:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16372:	81 81       	ldd	r24, Z+1	; 0x01
   16374:	90 e0       	ldi	r25, 0x00	; 0
   16376:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1637a:	8c 81       	ldd	r24, Y+4	; 0x04
   1637c:	9d 81       	ldd	r25, Y+5	; 0x05
   1637e:	88 27       	eor	r24, r24
   16380:	90 7d       	andi	r25, 0xD0	; 208
   16382:	25 96       	adiw	r28, 0x05	; 5
   16384:	e2 e0       	ldi	r30, 0x02	; 2
   16386:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0001638a <amigo_send_status>:
   1638a:	a5 e0       	ldi	r26, 0x05	; 5
   1638c:	b0 e0       	ldi	r27, 0x00	; 0
   1638e:	eb ec       	ldi	r30, 0xCB	; 203
   16390:	f1 eb       	ldi	r31, 0xB1	; 177
   16392:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   16396:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1639a:	85 ff       	sbrs	r24, 5
   1639c:	0a c0       	rjmp	.+20     	; 0x163b2 <amigo_send_status+0x28>
   1639e:	83 ed       	ldi	r24, 0xD3	; 211
   163a0:	9d e2       	ldi	r25, 0x2D	; 45
   163a2:	a0 e0       	ldi	r26, 0x00	; 0
   163a4:	ed b7       	in	r30, 0x3d	; 61
   163a6:	fe b7       	in	r31, 0x3e	; 62
   163a8:	81 83       	std	Z+1, r24	; 0x01
   163aa:	92 83       	std	Z+2, r25	; 0x02
   163ac:	a3 83       	std	Z+3, r26	; 0x03
   163ae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   163b2:	80 e0       	ldi	r24, 0x00	; 0
   163b4:	91 e0       	ldi	r25, 0x01	; 1
   163b6:	9d 83       	std	Y+5, r25	; 0x05
   163b8:	8c 83       	std	Y+4, r24	; 0x04
   163ba:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   163be:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   163c2:	ae 01       	movw	r20, r28
   163c4:	4c 5f       	subi	r20, 0xFC	; 252
   163c6:	5f 4f       	sbci	r21, 0xFF	; 255
   163c8:	64 e0       	ldi	r22, 0x04	; 4
   163ca:	70 e0       	ldi	r23, 0x00	; 0
   163cc:	09 96       	adiw	r24, 0x09	; 9
   163ce:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   163d2:	2c 81       	ldd	r18, Y+4	; 0x04
   163d4:	3d 81       	ldd	r19, Y+5	; 0x05
   163d6:	22 27       	eor	r18, r18
   163d8:	30 7d       	andi	r19, 0xD0	; 208
   163da:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   163de:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   163e2:	23 2b       	or	r18, r19
   163e4:	11 f4       	brne	.+4      	; 0x163ea <amigo_send_status+0x60>
   163e6:	04 97       	sbiw	r24, 0x04	; 4
   163e8:	b1 f0       	breq	.+44     	; 0x16416 <amigo_send_status+0x8c>
   163ea:	87 81       	ldd	r24, Z+7	; 0x07
   163ec:	90 85       	ldd	r25, Z+8	; 0x08
   163ee:	80 62       	ori	r24, 0x20	; 32
   163f0:	90 87       	std	Z+8, r25	; 0x08
   163f2:	87 83       	std	Z+7, r24	; 0x07
   163f4:	81 e0       	ldi	r24, 0x01	; 1
   163f6:	86 83       	std	Z+6, r24	; 0x06
   163f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163fc:	80 ff       	sbrs	r24, 0
   163fe:	0e c0       	rjmp	.+28     	; 0x1641c <amigo_send_status+0x92>
   16400:	89 eb       	ldi	r24, 0xB9	; 185
   16402:	9d e2       	ldi	r25, 0x2D	; 45
   16404:	a0 e0       	ldi	r26, 0x00	; 0
   16406:	ed b7       	in	r30, 0x3d	; 61
   16408:	fe b7       	in	r31, 0x3e	; 62
   1640a:	81 83       	std	Z+1, r24	; 0x01
   1640c:	92 83       	std	Z+2, r25	; 0x02
   1640e:	a3 83       	std	Z+3, r26	; 0x03
   16410:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16414:	03 c0       	rjmp	.+6      	; 0x1641c <amigo_send_status+0x92>
   16416:	10 86       	std	Z+8, r1	; 0x08
   16418:	17 82       	std	Z+7, r1	; 0x07
   1641a:	16 82       	std	Z+6, r1	; 0x06
   1641c:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16420:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16424:	81 81       	ldd	r24, Z+1	; 0x01
   16426:	90 e0       	ldi	r25, 0x00	; 0
   16428:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1642c:	8c 81       	ldd	r24, Y+4	; 0x04
   1642e:	9d 81       	ldd	r25, Y+5	; 0x05
   16430:	88 27       	eor	r24, r24
   16432:	90 7d       	andi	r25, 0xD0	; 208
   16434:	25 96       	adiw	r28, 0x05	; 5
   16436:	e2 e0       	ldi	r30, 0x02	; 2
   16438:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0001643c <amigo_increment>:
   1643c:	a1 e1       	ldi	r26, 0x11	; 17
   1643e:	b0 e0       	ldi	r27, 0x00	; 0
   16440:	e4 e2       	ldi	r30, 0x24	; 36
   16442:	f2 eb       	ldi	r31, 0xB2	; 178
   16444:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   16448:	bc 01       	movw	r22, r24
   1644a:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1644e:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16452:	91 e1       	ldi	r25, 0x11	; 17
   16454:	de 01       	movw	r26, r28
   16456:	11 96       	adiw	r26, 0x01	; 1
   16458:	01 90       	ld	r0, Z+
   1645a:	0d 92       	st	X+, r0
   1645c:	9a 95       	dec	r25
   1645e:	e1 f7       	brne	.-8      	; 0x16458 <amigo_increment+0x1c>
   16460:	9e 81       	ldd	r25, Y+6	; 0x06
   16462:	9f 5f       	subi	r25, 0xFF	; 255
   16464:	9e 83       	std	Y+6, r25	; 0x06
   16466:	ce 01       	movw	r24, r28
   16468:	01 96       	adiw	r24, 0x01	; 1
   1646a:	c1 dd       	rcall	.-1150   	; 0x15fee <amigo_overflow_check>
   1646c:	00 97       	sbiw	r24, 0x00	; 0
   1646e:	59 f4       	brne	.+22     	; 0x16486 <amigo_increment+0x4a>
   16470:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <AMIGOs>
   16474:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16478:	21 e1       	ldi	r18, 0x11	; 17
   1647a:	fe 01       	movw	r30, r28
   1647c:	31 96       	adiw	r30, 0x01	; 1
   1647e:	01 90       	ld	r0, Z+
   16480:	0d 92       	st	X+, r0
   16482:	2a 95       	dec	r18
   16484:	e1 f7       	brne	.-8      	; 0x1647e <amigo_increment+0x42>
   16486:	61 96       	adiw	r28, 0x11	; 17
   16488:	e2 e0       	ldi	r30, 0x02	; 2
   1648a:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

0001648e <amigo_seek>:
   1648e:	0f 93       	push	r16
   16490:	1f 93       	push	r17
   16492:	cf 93       	push	r28
   16494:	df 93       	push	r29
   16496:	ec 01       	movw	r28, r24
   16498:	62 e9       	ldi	r22, 0x92	; 146
   1649a:	75 e1       	ldi	r23, 0x15	; 21
   1649c:	a8 dd       	rcall	.-1200   	; 0x15fee <amigo_overflow_check>
   1649e:	8c 01       	movw	r16, r24
   164a0:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   164a4:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   164a8:	89 2b       	or	r24, r25
   164aa:	41 f0       	breq	.+16     	; 0x164bc <amigo_seek+0x2e>
   164ac:	81 e0       	ldi	r24, 0x01	; 1
   164ae:	86 83       	std	Z+6, r24	; 0x06
   164b0:	87 81       	ldd	r24, Z+7	; 0x07
   164b2:	90 85       	ldd	r25, Z+8	; 0x08
   164b4:	84 60       	ori	r24, 0x04	; 4
   164b6:	90 87       	std	Z+8, r25	; 0x08
   164b8:	87 83       	std	Z+7, r24	; 0x07
   164ba:	06 c0       	rjmp	.+12     	; 0x164c8 <amigo_seek+0x3a>
   164bc:	8d 81       	ldd	r24, Y+5	; 0x05
   164be:	85 83       	std	Z+5, r24	; 0x05
   164c0:	8c 81       	ldd	r24, Y+4	; 0x04
   164c2:	84 83       	std	Z+4, r24	; 0x04
   164c4:	8b 81       	ldd	r24, Y+3	; 0x03
   164c6:	83 83       	std	Z+3, r24	; 0x03
   164c8:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   164cc:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   164d0:	81 81       	ldd	r24, Z+1	; 0x01
   164d2:	90 e0       	ldi	r25, 0x00	; 0
   164d4:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   164d8:	c8 01       	movw	r24, r16
   164da:	df 91       	pop	r29
   164dc:	cf 91       	pop	r28
   164de:	1f 91       	pop	r17
   164e0:	0f 91       	pop	r16
   164e2:	08 95       	ret

000164e4 <amigo_verify>:
   164e4:	8f 92       	push	r8
   164e6:	9f 92       	push	r9
   164e8:	af 92       	push	r10
   164ea:	bf 92       	push	r11
   164ec:	ef 92       	push	r14
   164ee:	ff 92       	push	r15
   164f0:	0f 93       	push	r16
   164f2:	1f 93       	push	r17
   164f4:	cf 93       	push	r28
   164f6:	df 93       	push	r29
   164f8:	ad b7       	in	r26, 0x3d	; 61
   164fa:	be b7       	in	r27, 0x3e	; 62
   164fc:	19 97       	sbiw	r26, 0x09	; 9
   164fe:	0f b6       	in	r0, 0x3f	; 63
   16500:	f8 94       	cli
   16502:	be bf       	out	0x3e, r27	; 62
   16504:	0f be       	out	0x3f, r0	; 63
   16506:	ad bf       	out	0x3d, r26	; 61
   16508:	7c 01       	movw	r14, r24
   1650a:	67 e9       	ldi	r22, 0x97	; 151
   1650c:	75 e1       	ldi	r23, 0x15	; 21
   1650e:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   16512:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16516:	c1 dd       	rcall	.-1150   	; 0x1609a <amigo_chs_to_logical>
   16518:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1651c:	25 ff       	sbrs	r18, 5
   1651e:	10 c0       	rjmp	.+32     	; 0x16540 <amigo_verify+0x5c>
   16520:	ed b7       	in	r30, 0x3d	; 61
   16522:	fe b7       	in	r31, 0x3e	; 62
   16524:	e0 86       	std	Z+8, r14	; 0x08
   16526:	f1 86       	std	Z+9, r15	; 0x09
   16528:	64 83       	std	Z+4, r22	; 0x04
   1652a:	75 83       	std	Z+5, r23	; 0x05
   1652c:	86 83       	std	Z+6, r24	; 0x06
   1652e:	97 83       	std	Z+7, r25	; 0x07
   16530:	88 e7       	ldi	r24, 0x78	; 120
   16532:	9d e2       	ldi	r25, 0x2D	; 45
   16534:	a0 e0       	ldi	r26, 0x00	; 0
   16536:	81 83       	std	Z+1, r24	; 0x01
   16538:	92 83       	std	Z+2, r25	; 0x02
   1653a:	a3 83       	std	Z+3, r26	; 0x03
   1653c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16540:	e7 01       	movw	r28, r14
   16542:	20 97       	sbiw	r28, 0x00	; 0
   16544:	09 f4       	brne	.+2      	; 0x16548 <amigo_verify+0x64>
   16546:	4b c0       	rjmp	.+150    	; 0x165de <amigo_verify+0xfa>
   16548:	64 ea       	ldi	r22, 0xA4	; 164
   1654a:	75 e1       	ldi	r23, 0x15	; 21
   1654c:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   16550:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16554:	a2 dd       	rcall	.-1212   	; 0x1609a <amigo_chs_to_logical>
   16556:	4b 01       	movw	r8, r22
   16558:	5c 01       	movw	r10, r24
   1655a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1655e:	86 fd       	sbrc	r24, 6
   16560:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   16564:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16568:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1656c:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <AMIGOs>
   16570:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16574:	87 e0       	ldi	r24, 0x07	; 7
   16576:	e8 0e       	add	r14, r24
   16578:	f1 1c       	adc	r15, r1
   1657a:	06 81       	ldd	r16, Z+6	; 0x06
   1657c:	17 81       	ldd	r17, Z+7	; 0x07
   1657e:	21 ef       	ldi	r18, 0xF1	; 241
   16580:	3d e1       	ldi	r19, 0x1D	; 29
   16582:	b5 01       	movw	r22, r10
   16584:	a4 01       	movw	r20, r8
   16586:	82 81       	ldd	r24, Z+2	; 0x02
   16588:	93 81       	ldd	r25, Z+3	; 0x03
   1658a:	0e 94 c6 83 	call	0x1078c	; 0x1078c <dbf_open_read>
   1658e:	7c 01       	movw	r14, r24
   16590:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16594:	86 ff       	sbrs	r24, 6
   16596:	04 c0       	rjmp	.+8      	; 0x165a0 <amigo_verify+0xbc>
   16598:	8b ea       	ldi	r24, 0xAB	; 171
   1659a:	90 e1       	ldi	r25, 0x10	; 16
   1659c:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   165a0:	20 91 69 1a 	lds	r18, 0x1A69	; 0x801a69 <AMIGOs>
   165a4:	30 91 6a 1a 	lds	r19, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   165a8:	f9 01       	movw	r30, r18
   165aa:	87 81       	ldd	r24, Z+7	; 0x07
   165ac:	90 85       	ldd	r25, Z+8	; 0x08
   165ae:	89 2b       	or	r24, r25
   165b0:	21 f0       	breq	.+8      	; 0x165ba <amigo_verify+0xd6>
   165b2:	81 e0       	ldi	r24, 0x01	; 1
   165b4:	f9 01       	movw	r30, r18
   165b6:	86 83       	std	Z+6, r24	; 0x06
   165b8:	15 c0       	rjmp	.+42     	; 0x165e4 <amigo_verify+0x100>
   165ba:	80 91 6b 1a 	lds	r24, 0x1A6B	; 0x801a6b <AMIGOp>
   165be:	90 91 6c 1a 	lds	r25, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   165c2:	fc 01       	movw	r30, r24
   165c4:	86 81       	ldd	r24, Z+6	; 0x06
   165c6:	97 81       	ldd	r25, Z+7	; 0x07
   165c8:	e8 16       	cp	r14, r24
   165ca:	f9 06       	cpc	r15, r25
   165cc:	91 f7       	brne	.-28     	; 0x165b2 <amigo_verify+0xce>
   165ce:	8c ea       	ldi	r24, 0xAC	; 172
   165d0:	95 e1       	ldi	r25, 0x15	; 21
   165d2:	34 df       	rcall	.-408    	; 0x1643c <amigo_increment>
   165d4:	21 97       	sbiw	r28, 0x01	; 1
   165d6:	89 2b       	or	r24, r25
   165d8:	09 f4       	brne	.+2      	; 0x165dc <amigo_verify+0xf8>
   165da:	b3 cf       	rjmp	.-154    	; 0x16542 <amigo_verify+0x5e>
   165dc:	03 c0       	rjmp	.+6      	; 0x165e4 <amigo_verify+0x100>
   165de:	c0 e0       	ldi	r28, 0x00	; 0
   165e0:	d0 e0       	ldi	r29, 0x00	; 0
   165e2:	02 c0       	rjmp	.+4      	; 0x165e8 <amigo_verify+0x104>
   165e4:	c1 e0       	ldi	r28, 0x01	; 1
   165e6:	d0 e0       	ldi	r29, 0x00	; 0
   165e8:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   165ec:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   165f0:	81 81       	ldd	r24, Z+1	; 0x01
   165f2:	90 e0       	ldi	r25, 0x00	; 0
   165f4:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   165f8:	ce 01       	movw	r24, r28
   165fa:	ad b7       	in	r26, 0x3d	; 61
   165fc:	be b7       	in	r27, 0x3e	; 62
   165fe:	19 96       	adiw	r26, 0x09	; 9
   16600:	0f b6       	in	r0, 0x3f	; 63
   16602:	f8 94       	cli
   16604:	be bf       	out	0x3e, r27	; 62
   16606:	0f be       	out	0x3f, r0	; 63
   16608:	ad bf       	out	0x3d, r26	; 61
   1660a:	df 91       	pop	r29
   1660c:	cf 91       	pop	r28
   1660e:	1f 91       	pop	r17
   16610:	0f 91       	pop	r16
   16612:	ff 90       	pop	r15
   16614:	ef 90       	pop	r14
   16616:	bf 90       	pop	r11
   16618:	af 90       	pop	r10
   1661a:	9f 90       	pop	r9
   1661c:	8f 90       	pop	r8
   1661e:	08 95       	ret

00016620 <amigo_format>:
   16620:	ef 92       	push	r14
   16622:	ff 92       	push	r15
   16624:	0f 93       	push	r16
   16626:	1f 93       	push	r17
   16628:	cf 93       	push	r28
   1662a:	df 93       	push	r29
   1662c:	00 d0       	rcall	.+0      	; 0x1662e <amigo_format+0xe>
   1662e:	1f 92       	push	r1
   16630:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16634:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16638:	15 82       	std	Z+5, r1	; 0x05
   1663a:	14 82       	std	Z+4, r1	; 0x04
   1663c:	13 82       	std	Z+3, r1	; 0x03
   1663e:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16642:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16646:	46 81       	ldd	r20, Z+6	; 0x06
   16648:	57 81       	ldd	r21, Z+7	; 0x07
   1664a:	68 2f       	mov	r22, r24
   1664c:	70 e0       	ldi	r23, 0x00	; 0
   1664e:	81 ef       	ldi	r24, 0xF1	; 241
   16650:	9d e1       	ldi	r25, 0x1D	; 29
   16652:	0e 94 93 e7 	call	0x1cf26	; 0x1cf26 <memset>
   16656:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1665a:	85 ff       	sbrs	r24, 5
   1665c:	0a c0       	rjmp	.+20     	; 0x16672 <amigo_format+0x52>
   1665e:	8d e3       	ldi	r24, 0x3D	; 61
   16660:	9d e2       	ldi	r25, 0x2D	; 45
   16662:	a0 e0       	ldi	r26, 0x00	; 0
   16664:	ed b7       	in	r30, 0x3d	; 61
   16666:	fe b7       	in	r31, 0x3e	; 62
   16668:	81 83       	std	Z+1, r24	; 0x01
   1666a:	92 83       	std	Z+2, r25	; 0x02
   1666c:	a3 83       	std	Z+3, r26	; 0x03
   1666e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16672:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16676:	86 fd       	sbrc	r24, 6
   16678:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   1667c:	63 eb       	ldi	r22, 0xB3	; 179
   1667e:	75 e1       	ldi	r23, 0x15	; 21
   16680:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   16684:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16688:	08 dd       	rcall	.-1520   	; 0x1609a <amigo_chs_to_logical>
   1668a:	ab 01       	movw	r20, r22
   1668c:	bc 01       	movw	r22, r24
   1668e:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16692:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16696:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <AMIGOs>
   1669a:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1669e:	87 e0       	ldi	r24, 0x07	; 7
   166a0:	e8 0e       	add	r14, r24
   166a2:	f1 1c       	adc	r15, r1
   166a4:	06 81       	ldd	r16, Z+6	; 0x06
   166a6:	17 81       	ldd	r17, Z+7	; 0x07
   166a8:	21 ef       	ldi	r18, 0xF1	; 241
   166aa:	3d e1       	ldi	r19, 0x1D	; 29
   166ac:	82 81       	ldd	r24, Z+2	; 0x02
   166ae:	93 81       	ldd	r25, Z+3	; 0x03
   166b0:	0e 94 1d 84 	call	0x1083a	; 0x1083a <dbf_open_write>
   166b4:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   166b8:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   166bc:	27 81       	ldd	r18, Z+7	; 0x07
   166be:	30 85       	ldd	r19, Z+8	; 0x08
   166c0:	21 15       	cp	r18, r1
   166c2:	31 05       	cpc	r19, r1
   166c4:	49 f4       	brne	.+18     	; 0x166d8 <amigo_format+0xb8>
   166c6:	c0 91 6b 1a 	lds	r28, 0x1A6B	; 0x801a6b <AMIGOp>
   166ca:	d0 91 6c 1a 	lds	r29, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   166ce:	4e 81       	ldd	r20, Y+6	; 0x06
   166d0:	5f 81       	ldd	r21, Y+7	; 0x07
   166d2:	84 17       	cp	r24, r20
   166d4:	95 07       	cpc	r25, r21
   166d6:	41 f0       	breq	.+16     	; 0x166e8 <amigo_format+0xc8>
   166d8:	22 60       	ori	r18, 0x02	; 2
   166da:	30 87       	std	Z+8, r19	; 0x08
   166dc:	27 83       	std	Z+7, r18	; 0x07
   166de:	81 e0       	ldi	r24, 0x01	; 1
   166e0:	86 83       	std	Z+6, r24	; 0x06
   166e2:	c1 e0       	ldi	r28, 0x01	; 1
   166e4:	d0 e0       	ldi	r29, 0x00	; 0
   166e6:	0f c0       	rjmp	.+30     	; 0x16706 <amigo_format+0xe6>
   166e8:	80 e0       	ldi	r24, 0x00	; 0
   166ea:	90 e0       	ldi	r25, 0x00	; 0
   166ec:	a7 de       	rcall	.-690    	; 0x1643c <amigo_increment>
   166ee:	89 2b       	or	r24, r25
   166f0:	29 f2       	breq	.-118    	; 0x1667c <amigo_format+0x5c>
   166f2:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   166f6:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   166fa:	15 82       	std	Z+5, r1	; 0x05
   166fc:	14 82       	std	Z+4, r1	; 0x04
   166fe:	13 82       	std	Z+3, r1	; 0x03
   16700:	16 82       	std	Z+6, r1	; 0x06
   16702:	c0 e0       	ldi	r28, 0x00	; 0
   16704:	d0 e0       	ldi	r29, 0x00	; 0
   16706:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1670a:	86 ff       	sbrs	r24, 6
   1670c:	04 c0       	rjmp	.+8      	; 0x16716 <amigo_format+0xf6>
   1670e:	83 eb       	ldi	r24, 0xB3	; 179
   16710:	95 e1       	ldi	r25, 0x15	; 21
   16712:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   16716:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1671a:	85 ff       	sbrs	r24, 5
   1671c:	0a c0       	rjmp	.+20     	; 0x16732 <amigo_format+0x112>
   1671e:	88 e2       	ldi	r24, 0x28	; 40
   16720:	9d e2       	ldi	r25, 0x2D	; 45
   16722:	a0 e0       	ldi	r26, 0x00	; 0
   16724:	ed b7       	in	r30, 0x3d	; 61
   16726:	fe b7       	in	r31, 0x3e	; 62
   16728:	81 83       	std	Z+1, r24	; 0x01
   1672a:	92 83       	std	Z+2, r25	; 0x02
   1672c:	a3 83       	std	Z+3, r26	; 0x03
   1672e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16732:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16736:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1673a:	81 81       	ldd	r24, Z+1	; 0x01
   1673c:	90 e0       	ldi	r25, 0x00	; 0
   1673e:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   16742:	ce 01       	movw	r24, r28
   16744:	cd b7       	in	r28, 0x3d	; 61
   16746:	de b7       	in	r29, 0x3e	; 62
   16748:	23 96       	adiw	r28, 0x03	; 3
   1674a:	e6 e0       	ldi	r30, 0x06	; 6
   1674c:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00016750 <amigo_buffered_read_command>:
   16750:	8f 92       	push	r8
   16752:	9f 92       	push	r9
   16754:	af 92       	push	r10
   16756:	bf 92       	push	r11
   16758:	ef 92       	push	r14
   1675a:	ff 92       	push	r15
   1675c:	0f 93       	push	r16
   1675e:	1f 93       	push	r17
   16760:	cf 93       	push	r28
   16762:	df 93       	push	r29
   16764:	00 d0       	rcall	.+0      	; 0x16766 <amigo_buffered_read_command+0x16>
   16766:	00 d0       	rcall	.+0      	; 0x16768 <amigo_buffered_read_command+0x18>
   16768:	1f 92       	push	r1
   1676a:	6a eb       	ldi	r22, 0xBA	; 186
   1676c:	75 e1       	ldi	r23, 0x15	; 21
   1676e:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   16772:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16776:	91 dc       	rcall	.-1758   	; 0x1609a <amigo_chs_to_logical>
   16778:	4b 01       	movw	r8, r22
   1677a:	5c 01       	movw	r10, r24
   1677c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16780:	85 ff       	sbrs	r24, 5
   16782:	12 c0       	rjmp	.+36     	; 0x167a8 <amigo_buffered_read_command+0x58>
   16784:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16788:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1678c:	80 81       	ld	r24, Z
   1678e:	90 e0       	ldi	r25, 0x00	; 0
   16790:	ed b7       	in	r30, 0x3d	; 61
   16792:	fe b7       	in	r31, 0x3e	; 62
   16794:	95 83       	std	Z+5, r25	; 0x05
   16796:	84 83       	std	Z+4, r24	; 0x04
   16798:	86 e1       	ldi	r24, 0x16	; 22
   1679a:	9d e2       	ldi	r25, 0x2D	; 45
   1679c:	a0 e0       	ldi	r26, 0x00	; 0
   1679e:	81 83       	std	Z+1, r24	; 0x01
   167a0:	92 83       	std	Z+2, r25	; 0x02
   167a2:	a3 83       	std	Z+3, r26	; 0x03
   167a4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   167a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167ac:	86 fd       	sbrc	r24, 6
   167ae:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   167b2:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   167b6:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   167ba:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <AMIGOs>
   167be:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   167c2:	87 e0       	ldi	r24, 0x07	; 7
   167c4:	e8 0e       	add	r14, r24
   167c6:	f1 1c       	adc	r15, r1
   167c8:	06 81       	ldd	r16, Z+6	; 0x06
   167ca:	17 81       	ldd	r17, Z+7	; 0x07
   167cc:	21 ef       	ldi	r18, 0xF1	; 241
   167ce:	3d e1       	ldi	r19, 0x1D	; 29
   167d0:	b5 01       	movw	r22, r10
   167d2:	a4 01       	movw	r20, r8
   167d4:	82 81       	ldd	r24, Z+2	; 0x02
   167d6:	93 81       	ldd	r25, Z+3	; 0x03
   167d8:	0e 94 c6 83 	call	0x1078c	; 0x1078c <dbf_open_read>
   167dc:	7c 01       	movw	r14, r24
   167de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167e2:	86 ff       	sbrs	r24, 6
   167e4:	04 c0       	rjmp	.+8      	; 0x167ee <amigo_buffered_read_command+0x9e>
   167e6:	8b ea       	ldi	r24, 0xAB	; 171
   167e8:	90 e1       	ldi	r25, 0x10	; 16
   167ea:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   167ee:	c0 91 69 1a 	lds	r28, 0x1A69	; 0x801a69 <AMIGOs>
   167f2:	d0 91 6a 1a 	lds	r29, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   167f6:	8f 81       	ldd	r24, Y+7	; 0x07
   167f8:	98 85       	ldd	r25, Y+8	; 0x08
   167fa:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   167fe:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16802:	89 2b       	or	r24, r25
   16804:	29 f4       	brne	.+10     	; 0x16810 <amigo_buffered_read_command+0xc0>
   16806:	86 81       	ldd	r24, Z+6	; 0x06
   16808:	97 81       	ldd	r25, Z+7	; 0x07
   1680a:	e8 16       	cp	r14, r24
   1680c:	f9 06       	cpc	r15, r25
   1680e:	19 f0       	breq	.+6      	; 0x16816 <amigo_buffered_read_command+0xc6>
   16810:	81 e0       	ldi	r24, 0x01	; 1
   16812:	8e 83       	std	Y+6, r24	; 0x06
   16814:	14 c0       	rjmp	.+40     	; 0x1683e <amigo_buffered_read_command+0xee>
   16816:	8a eb       	ldi	r24, 0xBA	; 186
   16818:	95 e1       	ldi	r25, 0x15	; 21
   1681a:	10 de       	rcall	.-992    	; 0x1643c <amigo_increment>
   1681c:	89 2b       	or	r24, r25
   1681e:	59 f0       	breq	.+22     	; 0x16836 <amigo_buffered_read_command+0xe6>
   16820:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16824:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16828:	81 e0       	ldi	r24, 0x01	; 1
   1682a:	86 83       	std	Z+6, r24	; 0x06
   1682c:	87 81       	ldd	r24, Z+7	; 0x07
   1682e:	90 85       	ldd	r25, Z+8	; 0x08
   16830:	84 60       	ori	r24, 0x04	; 4
   16832:	90 87       	std	Z+8, r25	; 0x08
   16834:	87 83       	std	Z+7, r24	; 0x07
   16836:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   1683a:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1683e:	81 81       	ldd	r24, Z+1	; 0x01
   16840:	90 e0       	ldi	r25, 0x00	; 0
   16842:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   16846:	80 e0       	ldi	r24, 0x00	; 0
   16848:	90 e0       	ldi	r25, 0x00	; 0
   1684a:	0f 90       	pop	r0
   1684c:	0f 90       	pop	r0
   1684e:	0f 90       	pop	r0
   16850:	0f 90       	pop	r0
   16852:	0f 90       	pop	r0
   16854:	df 91       	pop	r29
   16856:	cf 91       	pop	r28
   16858:	1f 91       	pop	r17
   1685a:	0f 91       	pop	r16
   1685c:	ff 90       	pop	r15
   1685e:	ef 90       	pop	r14
   16860:	bf 90       	pop	r11
   16862:	af 90       	pop	r10
   16864:	9f 90       	pop	r9
   16866:	8f 90       	pop	r8
   16868:	08 95       	ret

0001686a <amigo_buffered_read_execute>:
   1686a:	a5 e0       	ldi	r26, 0x05	; 5
   1686c:	b0 e0       	ldi	r27, 0x00	; 0
   1686e:	eb e3       	ldi	r30, 0x3B	; 59
   16870:	f4 eb       	ldi	r31, 0xB4	; 180
   16872:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
   16876:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1687a:	87 fd       	sbrc	r24, 7
   1687c:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   16880:	80 e0       	ldi	r24, 0x00	; 0
   16882:	91 e0       	ldi	r25, 0x01	; 1
   16884:	9d 83       	std	Y+5, r25	; 0x05
   16886:	8c 83       	std	Y+4, r24	; 0x04
   16888:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   1688c:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16890:	66 81       	ldd	r22, Z+6	; 0x06
   16892:	77 81       	ldd	r23, Z+7	; 0x07
   16894:	ae 01       	movw	r20, r28
   16896:	4c 5f       	subi	r20, 0xFC	; 252
   16898:	5f 4f       	sbci	r21, 0xFF	; 255
   1689a:	81 ef       	ldi	r24, 0xF1	; 241
   1689c:	9d e1       	ldi	r25, 0x1D	; 29
   1689e:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   168a2:	8c 01       	movw	r16, r24
   168a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168a8:	87 ff       	sbrs	r24, 7
   168aa:	04 c0       	rjmp	.+8      	; 0x168b4 <amigo_buffered_read_execute+0x4a>
   168ac:	86 eb       	ldi	r24, 0xB6	; 182
   168ae:	90 e1       	ldi	r25, 0x10	; 16
   168b0:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   168b4:	8c 81       	ldd	r24, Y+4	; 0x04
   168b6:	9d 81       	ldd	r25, Y+5	; 0x05
   168b8:	88 27       	eor	r24, r24
   168ba:	90 7d       	andi	r25, 0xD0	; 208
   168bc:	89 2b       	or	r24, r25
   168be:	49 f4       	brne	.+18     	; 0x168d2 <amigo_buffered_read_execute+0x68>
   168c0:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   168c4:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   168c8:	86 81       	ldd	r24, Z+6	; 0x06
   168ca:	97 81       	ldd	r25, Z+7	; 0x07
   168cc:	08 17       	cp	r16, r24
   168ce:	19 07       	cpc	r17, r25
   168d0:	c9 f0       	breq	.+50     	; 0x16904 <amigo_buffered_read_execute+0x9a>
   168d2:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   168d6:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   168da:	81 e0       	ldi	r24, 0x01	; 1
   168dc:	86 83       	std	Z+6, r24	; 0x06
   168de:	87 81       	ldd	r24, Z+7	; 0x07
   168e0:	90 85       	ldd	r25, Z+8	; 0x08
   168e2:	80 62       	ori	r24, 0x20	; 32
   168e4:	90 87       	std	Z+8, r25	; 0x08
   168e6:	87 83       	std	Z+7, r24	; 0x07
   168e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168ec:	80 ff       	sbrs	r24, 0
   168ee:	0a c0       	rjmp	.+20     	; 0x16904 <amigo_buffered_read_execute+0x9a>
   168f0:	8c ef       	ldi	r24, 0xFC	; 252
   168f2:	9c e2       	ldi	r25, 0x2C	; 44
   168f4:	a0 e0       	ldi	r26, 0x00	; 0
   168f6:	ed b7       	in	r30, 0x3d	; 61
   168f8:	fe b7       	in	r31, 0x3e	; 62
   168fa:	81 83       	std	Z+1, r24	; 0x01
   168fc:	92 83       	std	Z+2, r25	; 0x02
   168fe:	a3 83       	std	Z+3, r26	; 0x03
   16900:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16904:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16908:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1690c:	81 81       	ldd	r24, Z+1	; 0x01
   1690e:	90 e0       	ldi	r25, 0x00	; 0
   16910:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   16914:	8c 81       	ldd	r24, Y+4	; 0x04
   16916:	9d 81       	ldd	r25, Y+5	; 0x05
   16918:	25 96       	adiw	r28, 0x05	; 5
   1691a:	e4 e0       	ldi	r30, 0x04	; 4
   1691c:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00016920 <amigo_buffered_write>:
   16920:	8f 92       	push	r8
   16922:	9f 92       	push	r9
   16924:	af 92       	push	r10
   16926:	bf 92       	push	r11
   16928:	ef 92       	push	r14
   1692a:	ff 92       	push	r15
   1692c:	0f 93       	push	r16
   1692e:	1f 93       	push	r17
   16930:	cf 93       	push	r28
   16932:	df 93       	push	r29
   16934:	cd b7       	in	r28, 0x3d	; 61
   16936:	de b7       	in	r29, 0x3e	; 62
   16938:	27 97       	sbiw	r28, 0x07	; 7
   1693a:	0f b6       	in	r0, 0x3f	; 63
   1693c:	f8 94       	cli
   1693e:	de bf       	out	0x3e, r29	; 62
   16940:	0f be       	out	0x3f, r0	; 63
   16942:	cd bf       	out	0x3d, r28	; 61
   16944:	68 ec       	ldi	r22, 0xC8	; 200
   16946:	75 e1       	ldi	r23, 0x15	; 21
   16948:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <AMIGOs>
   1694c:	90 91 6a 1a 	lds	r25, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16950:	a4 db       	rcall	.-2232   	; 0x1609a <amigo_chs_to_logical>
   16952:	4b 01       	movw	r8, r22
   16954:	5c 01       	movw	r10, r24
   16956:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1695a:	87 fd       	sbrc	r24, 7
   1695c:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   16960:	1f 82       	std	Y+7, r1	; 0x07
   16962:	1e 82       	std	Y+6, r1	; 0x06
   16964:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16968:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   1696c:	66 81       	ldd	r22, Z+6	; 0x06
   1696e:	77 81       	ldd	r23, Z+7	; 0x07
   16970:	ae 01       	movw	r20, r28
   16972:	4a 5f       	subi	r20, 0xFA	; 250
   16974:	5f 4f       	sbci	r21, 0xFF	; 255
   16976:	81 ef       	ldi	r24, 0xF1	; 241
   16978:	9d e1       	ldi	r25, 0x1D	; 29
   1697a:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   1697e:	7c 01       	movw	r14, r24
   16980:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16984:	85 ff       	sbrs	r24, 5
   16986:	12 c0       	rjmp	.+36     	; 0x169ac <amigo_buffered_write+0x8c>
   16988:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1698c:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16990:	80 81       	ld	r24, Z
   16992:	90 e0       	ldi	r25, 0x00	; 0
   16994:	ed b7       	in	r30, 0x3d	; 61
   16996:	fe b7       	in	r31, 0x3e	; 62
   16998:	95 83       	std	Z+5, r25	; 0x05
   1699a:	84 83       	std	Z+4, r24	; 0x04
   1699c:	8a ee       	ldi	r24, 0xEA	; 234
   1699e:	9c e2       	ldi	r25, 0x2C	; 44
   169a0:	a0 e0       	ldi	r26, 0x00	; 0
   169a2:	81 83       	std	Z+1, r24	; 0x01
   169a4:	92 83       	std	Z+2, r25	; 0x02
   169a6:	a3 83       	std	Z+3, r26	; 0x03
   169a8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   169ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169b0:	87 ff       	sbrs	r24, 7
   169b2:	04 c0       	rjmp	.+8      	; 0x169bc <amigo_buffered_write+0x9c>
   169b4:	87 ed       	ldi	r24, 0xD7	; 215
   169b6:	95 e1       	ldi	r25, 0x15	; 21
   169b8:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   169bc:	8e 81       	ldd	r24, Y+6	; 0x06
   169be:	9f 81       	ldd	r25, Y+7	; 0x07
   169c0:	88 27       	eor	r24, r24
   169c2:	90 7d       	andi	r25, 0xD0	; 208
   169c4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   169c8:	89 2b       	or	r24, r25
   169ca:	49 f4       	brne	.+18     	; 0x169de <amigo_buffered_write+0xbe>
   169cc:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   169d0:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   169d4:	86 81       	ldd	r24, Z+6	; 0x06
   169d6:	97 81       	ldd	r25, Z+7	; 0x07
   169d8:	e8 16       	cp	r14, r24
   169da:	f9 06       	cpc	r15, r25
   169dc:	c1 f0       	breq	.+48     	; 0x16a0e <amigo_buffered_write+0xee>
   169de:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   169e2:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   169e6:	81 e0       	ldi	r24, 0x01	; 1
   169e8:	86 83       	std	Z+6, r24	; 0x06
   169ea:	87 81       	ldd	r24, Z+7	; 0x07
   169ec:	90 85       	ldd	r25, Z+8	; 0x08
   169ee:	80 62       	ori	r24, 0x20	; 32
   169f0:	90 87       	std	Z+8, r25	; 0x08
   169f2:	87 83       	std	Z+7, r24	; 0x07
   169f4:	20 ff       	sbrs	r18, 0
   169f6:	5e c0       	rjmp	.+188    	; 0x16ab4 <amigo_buffered_write+0x194>
   169f8:	8b ec       	ldi	r24, 0xCB	; 203
   169fa:	9c e2       	ldi	r25, 0x2C	; 44
   169fc:	a0 e0       	ldi	r26, 0x00	; 0
   169fe:	ed b7       	in	r30, 0x3d	; 61
   16a00:	fe b7       	in	r31, 0x3e	; 62
   16a02:	81 83       	std	Z+1, r24	; 0x01
   16a04:	92 83       	std	Z+2, r25	; 0x02
   16a06:	a3 83       	std	Z+3, r26	; 0x03
   16a08:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16a0c:	53 c0       	rjmp	.+166    	; 0x16ab4 <amigo_buffered_write+0x194>
   16a0e:	26 fd       	sbrc	r18, 6
   16a10:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
   16a14:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16a18:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16a1c:	e0 90 69 1a 	lds	r14, 0x1A69	; 0x801a69 <AMIGOs>
   16a20:	f0 90 6a 1a 	lds	r15, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16a24:	87 e0       	ldi	r24, 0x07	; 7
   16a26:	e8 0e       	add	r14, r24
   16a28:	f1 1c       	adc	r15, r1
   16a2a:	06 81       	ldd	r16, Z+6	; 0x06
   16a2c:	17 81       	ldd	r17, Z+7	; 0x07
   16a2e:	21 ef       	ldi	r18, 0xF1	; 241
   16a30:	3d e1       	ldi	r19, 0x1D	; 29
   16a32:	b5 01       	movw	r22, r10
   16a34:	a4 01       	movw	r20, r8
   16a36:	82 81       	ldd	r24, Z+2	; 0x02
   16a38:	93 81       	ldd	r25, Z+3	; 0x03
   16a3a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <dbf_open_write>
   16a3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a42:	86 ff       	sbrs	r24, 6
   16a44:	04 c0       	rjmp	.+8      	; 0x16a4e <amigo_buffered_write+0x12e>
   16a46:	80 ea       	ldi	r24, 0xA0	; 160
   16a48:	90 e1       	ldi	r25, 0x10	; 16
   16a4a:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
   16a4e:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16a52:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16a56:	87 81       	ldd	r24, Z+7	; 0x07
   16a58:	90 85       	ldd	r25, Z+8	; 0x08
   16a5a:	89 2b       	or	r24, r25
   16a5c:	d9 f0       	breq	.+54     	; 0x16a94 <amigo_buffered_write+0x174>
   16a5e:	81 e0       	ldi	r24, 0x01	; 1
   16a60:	86 83       	std	Z+6, r24	; 0x06
   16a62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a66:	80 ff       	sbrs	r24, 0
   16a68:	0a c0       	rjmp	.+20     	; 0x16a7e <amigo_buffered_write+0x15e>
   16a6a:	8b ea       	ldi	r24, 0xAB	; 171
   16a6c:	9c e2       	ldi	r25, 0x2C	; 44
   16a6e:	a0 e0       	ldi	r26, 0x00	; 0
   16a70:	ed b7       	in	r30, 0x3d	; 61
   16a72:	fe b7       	in	r31, 0x3e	; 62
   16a74:	81 83       	std	Z+1, r24	; 0x01
   16a76:	92 83       	std	Z+2, r25	; 0x02
   16a78:	a3 83       	std	Z+3, r26	; 0x03
   16a7a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16a7e:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16a82:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16a86:	81 81       	ldd	r24, Z+1	; 0x01
   16a88:	90 e0       	ldi	r25, 0x00	; 0
   16a8a:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   16a8e:	80 e0       	ldi	r24, 0x00	; 0
   16a90:	90 e0       	ldi	r25, 0x00	; 0
   16a92:	1c c0       	rjmp	.+56     	; 0x16acc <amigo_buffered_write+0x1ac>
   16a94:	88 ec       	ldi	r24, 0xC8	; 200
   16a96:	95 e1       	ldi	r25, 0x15	; 21
   16a98:	d1 dc       	rcall	.-1630   	; 0x1643c <amigo_increment>
   16a9a:	89 2b       	or	r24, r25
   16a9c:	59 f0       	breq	.+22     	; 0x16ab4 <amigo_buffered_write+0x194>
   16a9e:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16aa2:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16aa6:	81 e0       	ldi	r24, 0x01	; 1
   16aa8:	86 83       	std	Z+6, r24	; 0x06
   16aaa:	87 81       	ldd	r24, Z+7	; 0x07
   16aac:	90 85       	ldd	r25, Z+8	; 0x08
   16aae:	84 60       	ori	r24, 0x04	; 4
   16ab0:	90 87       	std	Z+8, r25	; 0x08
   16ab2:	87 83       	std	Z+7, r24	; 0x07
   16ab4:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16ab8:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16abc:	81 81       	ldd	r24, Z+1	; 0x01
   16abe:	90 e0       	ldi	r25, 0x00	; 0
   16ac0:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   16ac4:	8e 81       	ldd	r24, Y+6	; 0x06
   16ac6:	9f 81       	ldd	r25, Y+7	; 0x07
   16ac8:	88 27       	eor	r24, r24
   16aca:	90 7d       	andi	r25, 0xD0	; 208
   16acc:	27 96       	adiw	r28, 0x07	; 7
   16ace:	0f b6       	in	r0, 0x3f	; 63
   16ad0:	f8 94       	cli
   16ad2:	de bf       	out	0x3e, r29	; 62
   16ad4:	0f be       	out	0x3f, r0	; 63
   16ad6:	cd bf       	out	0x3d, r28	; 61
   16ad8:	df 91       	pop	r29
   16ada:	cf 91       	pop	r28
   16adc:	1f 91       	pop	r17
   16ade:	0f 91       	pop	r16
   16ae0:	ff 90       	pop	r15
   16ae2:	ef 90       	pop	r14
   16ae4:	bf 90       	pop	r11
   16ae6:	af 90       	pop	r10
   16ae8:	9f 90       	pop	r9
   16aea:	8f 90       	pop	r8
   16aec:	08 95       	ret

00016aee <amigo_cmd_dsj>:
   16aee:	a8 e0       	ldi	r26, 0x08	; 8
   16af0:	b0 e0       	ldi	r27, 0x00	; 0
   16af2:	ed e7       	ldi	r30, 0x7D	; 125
   16af4:	f5 eb       	ldi	r31, 0xB5	; 181
   16af6:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   16afa:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16afe:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16b02:	86 81       	ldd	r24, Z+6	; 0x06
   16b04:	88 87       	std	Y+8, r24	; 0x08
   16b06:	80 e0       	ldi	r24, 0x00	; 0
   16b08:	91 e0       	ldi	r25, 0x01	; 1
   16b0a:	9f 83       	std	Y+7, r25	; 0x07
   16b0c:	8e 83       	std	Y+6, r24	; 0x06
   16b0e:	ae 01       	movw	r20, r28
   16b10:	4a 5f       	subi	r20, 0xFA	; 250
   16b12:	5f 4f       	sbci	r21, 0xFF	; 255
   16b14:	61 e0       	ldi	r22, 0x01	; 1
   16b16:	70 e0       	ldi	r23, 0x00	; 0
   16b18:	ce 01       	movw	r24, r28
   16b1a:	08 96       	adiw	r24, 0x08	; 8
   16b1c:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
   16b20:	2e 81       	ldd	r18, Y+6	; 0x06
   16b22:	3f 81       	ldd	r19, Y+7	; 0x07
   16b24:	22 27       	eor	r18, r18
   16b26:	30 7d       	andi	r19, 0xD0	; 208
   16b28:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16b2c:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16b30:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16b34:	23 2b       	or	r18, r19
   16b36:	11 f4       	brne	.+4      	; 0x16b3c <amigo_cmd_dsj+0x4e>
   16b38:	01 97       	sbiw	r24, 0x01	; 1
   16b3a:	c1 f0       	breq	.+48     	; 0x16b6c <amigo_cmd_dsj+0x7e>
   16b3c:	81 e0       	ldi	r24, 0x01	; 1
   16b3e:	86 83       	std	Z+6, r24	; 0x06
   16b40:	87 81       	ldd	r24, Z+7	; 0x07
   16b42:	90 85       	ldd	r25, Z+8	; 0x08
   16b44:	80 62       	ori	r24, 0x20	; 32
   16b46:	90 87       	std	Z+8, r25	; 0x08
   16b48:	87 83       	std	Z+7, r24	; 0x07
   16b4a:	40 ff       	sbrs	r20, 0
   16b4c:	0a c0       	rjmp	.+20     	; 0x16b62 <amigo_cmd_dsj+0x74>
   16b4e:	81 e9       	ldi	r24, 0x91	; 145
   16b50:	9c e2       	ldi	r25, 0x2C	; 44
   16b52:	a0 e0       	ldi	r26, 0x00	; 0
   16b54:	ed b7       	in	r30, 0x3d	; 61
   16b56:	fe b7       	in	r31, 0x3e	; 62
   16b58:	81 83       	std	Z+1, r24	; 0x01
   16b5a:	92 83       	std	Z+2, r25	; 0x02
   16b5c:	a3 83       	std	Z+3, r26	; 0x03
   16b5e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16b62:	8e 81       	ldd	r24, Y+6	; 0x06
   16b64:	9f 81       	ldd	r25, Y+7	; 0x07
   16b66:	88 27       	eor	r24, r24
   16b68:	90 7d       	andi	r25, 0xD0	; 208
   16b6a:	19 c0       	rjmp	.+50     	; 0x16b9e <amigo_cmd_dsj+0xb0>
   16b6c:	45 ff       	sbrs	r20, 5
   16b6e:	0e c0       	rjmp	.+28     	; 0x16b8c <amigo_cmd_dsj+0x9e>
   16b70:	86 81       	ldd	r24, Z+6	; 0x06
   16b72:	90 e0       	ldi	r25, 0x00	; 0
   16b74:	ed b7       	in	r30, 0x3d	; 61
   16b76:	fe b7       	in	r31, 0x3e	; 62
   16b78:	95 83       	std	Z+5, r25	; 0x05
   16b7a:	84 83       	std	Z+4, r24	; 0x04
   16b7c:	84 e8       	ldi	r24, 0x84	; 132
   16b7e:	9c e2       	ldi	r25, 0x2C	; 44
   16b80:	a0 e0       	ldi	r26, 0x00	; 0
   16b82:	81 83       	std	Z+1, r24	; 0x01
   16b84:	92 83       	std	Z+2, r25	; 0x02
   16b86:	a3 83       	std	Z+3, r26	; 0x03
   16b88:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   16b8c:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16b90:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16b94:	16 82       	std	Z+6, r1	; 0x06
   16b96:	10 86       	std	Z+8, r1	; 0x08
   16b98:	17 82       	std	Z+7, r1	; 0x07
   16b9a:	80 e0       	ldi	r24, 0x00	; 0
   16b9c:	90 e0       	ldi	r25, 0x00	; 0
   16b9e:	28 96       	adiw	r28, 0x08	; 8
   16ba0:	e2 e0       	ldi	r30, 0x02	; 2
   16ba2:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00016ba6 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16ba6:	00 d0       	rcall	.+0      	; 0x16ba8 <amigo_cmd_clear+0x2>
   16ba8:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16baa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bae:	85 ff       	sbrs	r24, 5
   16bb0:	0a c0       	rjmp	.+20     	; 0x16bc6 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   16bb2:	85 e7       	ldi	r24, 0x75	; 117
   16bb4:	9c e2       	ldi	r25, 0x2C	; 44
   16bb6:	a0 e0       	ldi	r26, 0x00	; 0
   16bb8:	ed b7       	in	r30, 0x3d	; 61
   16bba:	fe b7       	in	r31, 0x3e	; 62
   16bbc:	81 83       	std	Z+1, r24	; 0x01
   16bbe:	92 83       	std	Z+2, r25	; 0x02
   16bc0:	a3 83       	std	Z+3, r26	; 0x03
   16bc2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
    AMIGOs->sector = 0;
   16bc6:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16bca:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16bce:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16bd0:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16bd2:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16bd4:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16bd6:	10 86       	std	Z+8, r1	; 0x08
   16bd8:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16bda:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16bde:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16be2:	81 81       	ldd	r24, Z+1	; 0x01
   16be4:	90 e0       	ldi	r25, 0x00	; 0
   16be6:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
    return(0);
}
   16bea:	80 e0       	ldi	r24, 0x00	; 0
   16bec:	90 e0       	ldi	r25, 0x00	; 0
   16bee:	0f 90       	pop	r0
   16bf0:	0f 90       	pop	r0
   16bf2:	0f 90       	pop	r0
   16bf4:	08 95       	ret

00016bf6 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16bf6:	af e0       	ldi	r26, 0x0F	; 15
   16bf8:	b0 e0       	ldi	r27, 0x00	; 0
   16bfa:	e1 e0       	ldi	r30, 0x01	; 1
   16bfc:	f6 eb       	ldi	r31, 0xB6	; 182
   16bfe:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
   16c02:	c8 2f       	mov	r28, r24
   16c04:	e6 2e       	mov	r14, r22
   16c06:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16c08:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16c0c:	90 e0       	ldi	r25, 0x00	; 0
   16c0e:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   16c12:	20 91 f5 1f 	lds	r18, 0x1FF5	; 0x801ff5 <talking>
   16c16:	f1 2c       	mov	r15, r1
   16c18:	d0 e0       	ldi	r29, 0x00	; 0
   16c1a:	89 2b       	or	r24, r25
   16c1c:	f1 f0       	breq	.+60     	; 0x16c5a <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c1e:	82 2f       	mov	r24, r18
   16c20:	90 e0       	ldi	r25, 0x00	; 0
   16c22:	ed b7       	in	r30, 0x3d	; 61
   16c24:	fe b7       	in	r31, 0x3e	; 62
   16c26:	97 87       	std	Z+15, r25	; 0x0f
   16c28:	86 87       	std	Z+14, r24	; 0x0e
   16c2a:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16c2e:	90 e0       	ldi	r25, 0x00	; 0
   16c30:	95 87       	std	Z+13, r25	; 0x0d
   16c32:	84 87       	std	Z+12, r24	; 0x0c
   16c34:	13 87       	std	Z+11, r17	; 0x0b
   16c36:	02 87       	std	Z+10, r16	; 0x0a
   16c38:	f1 86       	std	Z+9, r15	; 0x09
   16c3a:	e0 86       	std	Z+8, r14	; 0x08
   16c3c:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16c40:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16c44:	80 81       	ld	r24, Z
   16c46:	90 e0       	ldi	r25, 0x00	; 0
   16c48:	ed b7       	in	r30, 0x3d	; 61
   16c4a:	fe b7       	in	r31, 0x3e	; 62
   16c4c:	97 83       	std	Z+7, r25	; 0x07
   16c4e:	86 83       	std	Z+6, r24	; 0x06
   16c50:	d5 83       	std	Z+5, r29	; 0x05
   16c52:	c4 83       	std	Z+4, r28	; 0x04
   16c54:	8e e0       	ldi	r24, 0x0E	; 14
   16c56:	9c e2       	ldi	r25, 0x2C	; 44
   16c58:	51 c0       	rjmp	.+162    	; 0x16cfc <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16c5a:	82 2f       	mov	r24, r18
   16c5c:	90 e0       	ldi	r25, 0x00	; 0
   16c5e:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   16c62:	20 91 f7 1f 	lds	r18, 0x1FF7	; 0x801ff7 <listening>
   16c66:	30 91 f5 1f 	lds	r19, 0x1FF5	; 0x801ff5 <talking>
   16c6a:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <AMIGOs>
   16c6e:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16c72:	89 2b       	or	r24, r25
   16c74:	b1 f0       	breq	.+44     	; 0x16ca2 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c76:	83 2f       	mov	r24, r19
   16c78:	90 e0       	ldi	r25, 0x00	; 0
   16c7a:	ed b7       	in	r30, 0x3d	; 61
   16c7c:	fe b7       	in	r31, 0x3e	; 62
   16c7e:	97 87       	std	Z+15, r25	; 0x0f
   16c80:	86 87       	std	Z+14, r24	; 0x0e
   16c82:	30 e0       	ldi	r19, 0x00	; 0
   16c84:	35 87       	std	Z+13, r19	; 0x0d
   16c86:	24 87       	std	Z+12, r18	; 0x0c
   16c88:	13 87       	std	Z+11, r17	; 0x0b
   16c8a:	02 87       	std	Z+10, r16	; 0x0a
   16c8c:	f1 86       	std	Z+9, r15	; 0x09
   16c8e:	e0 86       	std	Z+8, r14	; 0x08
   16c90:	8c 91       	ld	r24, X
   16c92:	90 e0       	ldi	r25, 0x00	; 0
   16c94:	97 83       	std	Z+7, r25	; 0x07
   16c96:	86 83       	std	Z+6, r24	; 0x06
   16c98:	d5 83       	std	Z+5, r29	; 0x05
   16c9a:	c4 83       	std	Z+4, r28	; 0x04
   16c9c:	87 ea       	ldi	r24, 0xA7	; 167
   16c9e:	9b e2       	ldi	r25, 0x2B	; 43
   16ca0:	2d c0       	rjmp	.+90     	; 0x16cfc <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16ca2:	3f 35       	cpi	r19, 0x5F	; 95
   16ca4:	b1 f4       	brne	.+44     	; 0x16cd2 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16ca6:	8f e5       	ldi	r24, 0x5F	; 95
   16ca8:	90 e0       	ldi	r25, 0x00	; 0
   16caa:	ed b7       	in	r30, 0x3d	; 61
   16cac:	fe b7       	in	r31, 0x3e	; 62
   16cae:	97 87       	std	Z+15, r25	; 0x0f
   16cb0:	86 87       	std	Z+14, r24	; 0x0e
   16cb2:	30 e0       	ldi	r19, 0x00	; 0
   16cb4:	35 87       	std	Z+13, r19	; 0x0d
   16cb6:	24 87       	std	Z+12, r18	; 0x0c
   16cb8:	13 87       	std	Z+11, r17	; 0x0b
   16cba:	02 87       	std	Z+10, r16	; 0x0a
   16cbc:	f1 86       	std	Z+9, r15	; 0x09
   16cbe:	e0 86       	std	Z+8, r14	; 0x08
   16cc0:	8c 91       	ld	r24, X
   16cc2:	90 e0       	ldi	r25, 0x00	; 0
   16cc4:	97 83       	std	Z+7, r25	; 0x07
   16cc6:	86 83       	std	Z+6, r24	; 0x06
   16cc8:	d5 83       	std	Z+5, r29	; 0x05
   16cca:	c4 83       	std	Z+4, r28	; 0x04
   16ccc:	80 e4       	ldi	r24, 0x40	; 64
   16cce:	9b e2       	ldi	r25, 0x2B	; 43
   16cd0:	15 c0       	rjmp	.+42     	; 0x16cfc <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16cd2:	83 2f       	mov	r24, r19
   16cd4:	90 e0       	ldi	r25, 0x00	; 0
   16cd6:	ed b7       	in	r30, 0x3d	; 61
   16cd8:	fe b7       	in	r31, 0x3e	; 62
   16cda:	97 87       	std	Z+15, r25	; 0x0f
   16cdc:	86 87       	std	Z+14, r24	; 0x0e
   16cde:	30 e0       	ldi	r19, 0x00	; 0
   16ce0:	35 87       	std	Z+13, r19	; 0x0d
   16ce2:	24 87       	std	Z+12, r18	; 0x0c
   16ce4:	13 87       	std	Z+11, r17	; 0x0b
   16ce6:	02 87       	std	Z+10, r16	; 0x0a
   16ce8:	f1 86       	std	Z+9, r15	; 0x09
   16cea:	e0 86       	std	Z+8, r14	; 0x08
   16cec:	8c 91       	ld	r24, X
   16cee:	90 e0       	ldi	r25, 0x00	; 0
   16cf0:	97 83       	std	Z+7, r25	; 0x07
   16cf2:	86 83       	std	Z+6, r24	; 0x06
   16cf4:	d5 83       	std	Z+5, r29	; 0x05
   16cf6:	c4 83       	std	Z+4, r28	; 0x04
   16cf8:	8b ed       	ldi	r24, 0xDB	; 219
   16cfa:	9a e2       	ldi	r25, 0x2A	; 42
   16cfc:	a0 e0       	ldi	r26, 0x00	; 0
   16cfe:	81 83       	std	Z+1, r24	; 0x01
   16d00:	92 83       	std	Z+2, r25	; 0x02
   16d02:	a3 83       	std	Z+3, r26	; 0x03
   16d04:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d08:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16d0c:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16d10:	81 81       	ldd	r24, Z+1	; 0x01
   16d12:	90 e0       	ldi	r25, 0x00	; 0
   16d14:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
    return(0);
}
   16d18:	80 e0       	ldi	r24, 0x00	; 0
   16d1a:	90 e0       	ldi	r25, 0x00	; 0
   16d1c:	cd b7       	in	r28, 0x3d	; 61
   16d1e:	de b7       	in	r29, 0x3e	; 62
   16d20:	2f 96       	adiw	r28, 0x0f	; 15
   16d22:	e6 e0       	ldi	r30, 0x06	; 6
   16d24:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00016d28 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16d28:	ab e0       	ldi	r26, 0x0B	; 11
   16d2a:	b0 e0       	ldi	r27, 0x00	; 0
   16d2c:	ea e9       	ldi	r30, 0x9A	; 154
   16d2e:	f6 eb       	ldi	r31, 0xB6	; 182
   16d30:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   16d34:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16d36:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16d3a:	90 e0       	ldi	r25, 0x00	; 0
   16d3c:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   16d40:	20 91 f5 1f 	lds	r18, 0x1FF5	; 0x801ff5 <talking>
   16d44:	d0 e0       	ldi	r29, 0x00	; 0
   16d46:	89 2b       	or	r24, r25
   16d48:	d1 f0       	breq	.+52     	; 0x16d7e <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d4a:	82 2f       	mov	r24, r18
   16d4c:	90 e0       	ldi	r25, 0x00	; 0
   16d4e:	ed b7       	in	r30, 0x3d	; 61
   16d50:	fe b7       	in	r31, 0x3e	; 62
   16d52:	93 87       	std	Z+11, r25	; 0x0b
   16d54:	82 87       	std	Z+10, r24	; 0x0a
   16d56:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16d5a:	90 e0       	ldi	r25, 0x00	; 0
   16d5c:	91 87       	std	Z+9, r25	; 0x09
   16d5e:	80 87       	std	Z+8, r24	; 0x08
   16d60:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16d64:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16d68:	80 81       	ld	r24, Z
   16d6a:	90 e0       	ldi	r25, 0x00	; 0
   16d6c:	ed b7       	in	r30, 0x3d	; 61
   16d6e:	fe b7       	in	r31, 0x3e	; 62
   16d70:	97 83       	std	Z+7, r25	; 0x07
   16d72:	86 83       	std	Z+6, r24	; 0x06
   16d74:	d5 83       	std	Z+5, r29	; 0x05
   16d76:	c4 83       	std	Z+4, r28	; 0x04
   16d78:	8b e8       	ldi	r24, 0x8B	; 139
   16d7a:	9a e2       	ldi	r25, 0x2A	; 42
   16d7c:	43 c0       	rjmp	.+134    	; 0x16e04 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16d7e:	82 2f       	mov	r24, r18
   16d80:	90 e0       	ldi	r25, 0x00	; 0
   16d82:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   16d86:	20 91 f7 1f 	lds	r18, 0x1FF7	; 0x801ff7 <listening>
   16d8a:	40 91 f5 1f 	lds	r20, 0x1FF5	; 0x801ff5 <talking>
   16d8e:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <AMIGOs>
   16d92:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16d96:	89 2b       	or	r24, r25
   16d98:	89 f0       	breq	.+34     	; 0x16dbc <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d9a:	50 e0       	ldi	r21, 0x00	; 0
   16d9c:	ed b7       	in	r30, 0x3d	; 61
   16d9e:	fe b7       	in	r31, 0x3e	; 62
   16da0:	53 87       	std	Z+11, r21	; 0x0b
   16da2:	42 87       	std	Z+10, r20	; 0x0a
   16da4:	30 e0       	ldi	r19, 0x00	; 0
   16da6:	31 87       	std	Z+9, r19	; 0x09
   16da8:	20 87       	std	Z+8, r18	; 0x08
   16daa:	8c 91       	ld	r24, X
   16dac:	90 e0       	ldi	r25, 0x00	; 0
   16dae:	97 83       	std	Z+7, r25	; 0x07
   16db0:	86 83       	std	Z+6, r24	; 0x06
   16db2:	d5 83       	std	Z+5, r29	; 0x05
   16db4:	c4 83       	std	Z+4, r28	; 0x04
   16db6:	8b e3       	ldi	r24, 0x3B	; 59
   16db8:	9a e2       	ldi	r25, 0x2A	; 42
   16dba:	24 c0       	rjmp	.+72     	; 0x16e04 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16dbc:	4f 35       	cpi	r20, 0x5F	; 95
   16dbe:	91 f4       	brne	.+36     	; 0x16de4 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16dc0:	8f e5       	ldi	r24, 0x5F	; 95
   16dc2:	90 e0       	ldi	r25, 0x00	; 0
   16dc4:	ed b7       	in	r30, 0x3d	; 61
   16dc6:	fe b7       	in	r31, 0x3e	; 62
   16dc8:	93 87       	std	Z+11, r25	; 0x0b
   16dca:	82 87       	std	Z+10, r24	; 0x0a
   16dcc:	30 e0       	ldi	r19, 0x00	; 0
   16dce:	31 87       	std	Z+9, r19	; 0x09
   16dd0:	20 87       	std	Z+8, r18	; 0x08
   16dd2:	8c 91       	ld	r24, X
   16dd4:	90 e0       	ldi	r25, 0x00	; 0
   16dd6:	97 83       	std	Z+7, r25	; 0x07
   16dd8:	86 83       	std	Z+6, r24	; 0x06
   16dda:	d5 83       	std	Z+5, r29	; 0x05
   16ddc:	c4 83       	std	Z+4, r28	; 0x04
   16dde:	8b ee       	ldi	r24, 0xEB	; 235
   16de0:	99 e2       	ldi	r25, 0x29	; 41
   16de2:	10 c0       	rjmp	.+32     	; 0x16e04 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16de4:	50 e0       	ldi	r21, 0x00	; 0
   16de6:	ed b7       	in	r30, 0x3d	; 61
   16de8:	fe b7       	in	r31, 0x3e	; 62
   16dea:	53 87       	std	Z+11, r21	; 0x0b
   16dec:	42 87       	std	Z+10, r20	; 0x0a
   16dee:	30 e0       	ldi	r19, 0x00	; 0
   16df0:	31 87       	std	Z+9, r19	; 0x09
   16df2:	20 87       	std	Z+8, r18	; 0x08
   16df4:	8c 91       	ld	r24, X
   16df6:	90 e0       	ldi	r25, 0x00	; 0
   16df8:	97 83       	std	Z+7, r25	; 0x07
   16dfa:	86 83       	std	Z+6, r24	; 0x06
   16dfc:	d5 83       	std	Z+5, r29	; 0x05
   16dfe:	c4 83       	std	Z+4, r28	; 0x04
   16e00:	8a e9       	ldi	r24, 0x9A	; 154
   16e02:	99 e2       	ldi	r25, 0x29	; 41
   16e04:	a0 e0       	ldi	r26, 0x00	; 0
   16e06:	81 83       	std	Z+1, r24	; 0x01
   16e08:	92 83       	std	Z+2, r25	; 0x02
   16e0a:	a3 83       	std	Z+3, r26	; 0x03
   16e0c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e10:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16e14:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16e18:	81 81       	ldd	r24, Z+1	; 0x01
   16e1a:	90 e0       	ldi	r25, 0x00	; 0
   16e1c:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
    return(0);
}
   16e20:	80 e0       	ldi	r24, 0x00	; 0
   16e22:	90 e0       	ldi	r25, 0x00	; 0
   16e24:	cd b7       	in	r28, 0x3d	; 61
   16e26:	de b7       	in	r29, 0x3e	; 62
   16e28:	2b 96       	adiw	r28, 0x0b	; 11
   16e2a:	e2 e0       	ldi	r30, 0x02	; 2
   16e2c:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00016e30 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16e30:	8f 30       	cpi	r24, 0x0F	; 15
   16e32:	29 f0       	breq	.+10     	; 0x16e3e <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16e34:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16e38:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16e3c:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16e3e:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16e42:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16e46:	81 81       	ldd	r24, Z+1	; 0x01
   16e48:	88 23       	and	r24, r24
   16e4a:	29 f0       	breq	.+10     	; 0x16e56 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16e4c:	87 81       	ldd	r24, Z+7	; 0x07
   16e4e:	90 85       	ldd	r25, Z+8	; 0x08
   16e50:	80 64       	ori	r24, 0x40	; 64
   16e52:	90 87       	std	Z+8, r25	; 0x08
   16e54:	87 83       	std	Z+7, r24	; 0x07
   16e56:	08 95       	ret

00016e58 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16e58:	ac e1       	ldi	r26, 0x1C	; 28
   16e5a:	b0 e0       	ldi	r27, 0x00	; 0
   16e5c:	e2 e3       	ldi	r30, 0x32	; 50
   16e5e:	f7 eb       	ldi	r31, 0xB7	; 183
   16e60:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
   16e64:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e6a:	85 ff       	sbrs	r24, 5
   16e6c:	16 c0       	rjmp	.+44     	; 0x16e9a <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16e6e:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   16e72:	90 e0       	ldi	r25, 0x00	; 0
   16e74:	ed b7       	in	r30, 0x3d	; 61
   16e76:	fe b7       	in	r31, 0x3e	; 62
   16e78:	91 87       	std	Z+9, r25	; 0x09
   16e7a:	80 87       	std	Z+8, r24	; 0x08
   16e7c:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16e80:	90 e0       	ldi	r25, 0x00	; 0
   16e82:	97 83       	std	Z+7, r25	; 0x07
   16e84:	86 83       	std	Z+6, r24	; 0x06
   16e86:	f5 82       	std	Z+5, r15	; 0x05
   16e88:	e4 82       	std	Z+4, r14	; 0x04
   16e8a:	88 e6       	ldi	r24, 0x68	; 104
   16e8c:	99 e2       	ldi	r25, 0x29	; 41
   16e8e:	a0 e0       	ldi	r26, 0x00	; 0
   16e90:	81 83       	std	Z+1, r24	; 0x01
   16e92:	92 83       	std	Z+2, r25	; 0x02
   16e94:	a3 83       	std	Z+3, r26	; 0x03
   16e96:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16e9a:	fe e7       	ldi	r31, 0x7E	; 126
   16e9c:	ef 16       	cp	r14, r31
   16e9e:	f1 04       	cpc	r15, r1
   16ea0:	f1 f5       	brne	.+124    	; 0x16f1e <Amigo_Command+0xc6>
   16ea2:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   16ea6:	90 e0       	ldi	r25, 0x00	; 0
   16ea8:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   16eac:	89 2b       	or	r24, r25
   16eae:	09 f4       	brne	.+2      	; 0x16eb2 <Amigo_Command+0x5a>
   16eb0:	86 c0       	rjmp	.+268    	; 0x16fbe <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16eb2:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16eb6:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16eba:	81 81       	ldd	r24, Z+1	; 0x01
   16ebc:	90 e0       	ldi	r25, 0x00	; 0
   16ebe:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
        status = EOI_FLAG;
   16ec2:	80 e0       	ldi	r24, 0x00	; 0
   16ec4:	91 e0       	ldi	r25, 0x01	; 1
   16ec6:	9c 8f       	std	Y+28, r25	; 0x1c
   16ec8:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16eca:	ae 01       	movw	r20, r28
   16ecc:	45 5e       	subi	r20, 0xE5	; 229
   16ece:	5f 4f       	sbci	r21, 0xFF	; 255
   16ed0:	60 e0       	ldi	r22, 0x00	; 0
   16ed2:	72 e0       	ldi	r23, 0x02	; 2
   16ed4:	81 ef       	ldi	r24, 0xF1	; 241
   16ed6:	9d e1       	ldi	r25, 0x1D	; 29
   16ed8:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16edc:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16ee0:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16ee4:	81 81       	ldd	r24, Z+1	; 0x01
   16ee6:	90 e0       	ldi	r25, 0x00	; 0
   16ee8:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16ef0:	88 27       	eor	r24, r24
   16ef2:	90 7d       	andi	r25, 0xD0	; 208
   16ef4:	89 2b       	or	r24, r25
   16ef6:	09 f4       	brne	.+2      	; 0x16efa <Amigo_Command+0xa2>
   16ef8:	89 c2       	rjmp	.+1298   	; 0x1740c <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16efa:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16efe:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16f02:	81 e0       	ldi	r24, 0x01	; 1
   16f04:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16f06:	87 81       	ldd	r24, Z+7	; 0x07
   16f08:	90 85       	ldd	r25, Z+8	; 0x08
   16f0a:	80 62       	ori	r24, 0x20	; 32
   16f0c:	90 87       	std	Z+8, r25	; 0x08
   16f0e:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16f10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f14:	80 ff       	sbrs	r24, 0
   16f16:	7a c2       	rjmp	.+1268   	; 0x1740c <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16f18:	86 e4       	ldi	r24, 0x46	; 70
   16f1a:	99 e2       	ldi	r25, 0x29	; 41
   16f1c:	8e c0       	rjmp	.+284    	; 0x1703a <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16f1e:	ff e7       	ldi	r31, 0x7F	; 127
   16f20:	ef 16       	cp	r14, r31
   16f22:	f1 04       	cpc	r15, r1
   16f24:	09 f0       	breq	.+2      	; 0x16f28 <Amigo_Command+0xd0>
   16f26:	4b c0       	rjmp	.+150    	; 0x16fbe <Amigo_Command+0x166>
   16f28:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16f2c:	90 e0       	ldi	r25, 0x00	; 0
   16f2e:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   16f32:	89 2b       	or	r24, r25
   16f34:	09 f4       	brne	.+2      	; 0x16f38 <Amigo_Command+0xe0>
   16f36:	43 c0       	rjmp	.+134    	; 0x16fbe <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16f38:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16f3c:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16f40:	81 81       	ldd	r24, Z+1	; 0x01
   16f42:	90 e0       	ldi	r25, 0x00	; 0
   16f44:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f4c:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16f4e:	0e 94 74 84 	call	0x108e8	; 0x108e8 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16f52:	80 e0       	ldi	r24, 0x00	; 0
   16f54:	91 e0       	ldi	r25, 0x01	; 1
   16f56:	9c 8f       	std	Y+28, r25	; 0x1c
   16f58:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16f5a:	ae 01       	movw	r20, r28
   16f5c:	45 5e       	subi	r20, 0xE5	; 229
   16f5e:	5f 4f       	sbci	r21, 0xFF	; 255
   16f60:	60 e0       	ldi	r22, 0x00	; 0
   16f62:	72 e0       	ldi	r23, 0x02	; 2
   16f64:	81 ef       	ldi	r24, 0xF1	; 241
   16f66:	9d e1       	ldi	r25, 0x1D	; 29
   16f68:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16f6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f70:	87 ff       	sbrs	r24, 7
   16f72:	04 c0       	rjmp	.+8      	; 0x16f7c <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16f74:	87 ed       	ldi	r24, 0xD7	; 215
   16f76:	95 e1       	ldi	r25, 0x15	; 21
   16f78:	0e 94 86 84 	call	0x1090c	; 0x1090c <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16f7c:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16f80:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16f84:	81 81       	ldd	r24, Z+1	; 0x01
   16f86:	90 e0       	ldi	r25, 0x00	; 0
   16f88:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16f90:	88 27       	eor	r24, r24
   16f92:	90 7d       	andi	r25, 0xD0	; 208
   16f94:	89 2b       	or	r24, r25
   16f96:	09 f4       	brne	.+2      	; 0x16f9a <Amigo_Command+0x142>
   16f98:	39 c2       	rjmp	.+1138   	; 0x1740c <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16f9a:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   16f9e:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   16fa2:	81 e0       	ldi	r24, 0x01	; 1
   16fa4:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16fa6:	87 81       	ldd	r24, Z+7	; 0x07
   16fa8:	90 85       	ldd	r25, Z+8	; 0x08
   16faa:	80 62       	ori	r24, 0x20	; 32
   16fac:	90 87       	std	Z+8, r25	; 0x08
   16fae:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16fb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fb4:	80 ff       	sbrs	r24, 0
   16fb6:	2a c2       	rjmp	.+1108   	; 0x1740c <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16fb8:	85 e2       	ldi	r24, 0x25	; 37
   16fba:	99 e2       	ldi	r25, 0x29	; 41
   16fbc:	3e c0       	rjmp	.+124    	; 0x1703a <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16fbe:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   16fc2:	90 e0       	ldi	r25, 0x00	; 0
   16fc4:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   16fc8:	89 2b       	or	r24, r25
   16fca:	19 f4       	brne	.+6      	; 0x16fd2 <Amigo_Command+0x17a>
        return(0);
   16fcc:	80 e0       	ldi	r24, 0x00	; 0
   16fce:	90 e0       	ldi	r25, 0x00	; 0
   16fd0:	25 c2       	rjmp	.+1098   	; 0x1741c <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16fd2:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   16fd6:	90 e0       	ldi	r25, 0x00	; 0
   16fd8:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   16fdc:	89 2b       	or	r24, r25
   16fde:	b1 f7       	brne	.-20     	; 0x16fcc <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16fe0:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   16fe4:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   16fe8:	81 81       	ldd	r24, Z+1	; 0x01
   16fea:	90 e0       	ldi	r25, 0x00	; 0
   16fec:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16ff0:	80 e0       	ldi	r24, 0x00	; 0
   16ff2:	91 e0       	ldi	r25, 0x01	; 1
   16ff4:	9c 8f       	std	Y+28, r25	; 0x1c
   16ff6:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16ff8:	ae 01       	movw	r20, r28
   16ffa:	45 5e       	subi	r20, 0xE5	; 229
   16ffc:	5f 4f       	sbci	r21, 0xFF	; 255
   16ffe:	60 e0       	ldi	r22, 0x00	; 0
   17000:	72 e0       	ldi	r23, 0x02	; 2
   17002:	81 ef       	ldi	r24, 0xF1	; 241
   17004:	9d e1       	ldi	r25, 0x1D	; 29
   17006:	0e 94 fb 89 	call	0x113f6	; 0x113f6 <gpib_read_str>
   1700a:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   1700c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1700e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17010:	88 27       	eor	r24, r24
   17012:	90 7d       	andi	r25, 0xD0	; 208
   17014:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17018:	89 2b       	or	r24, r25
   1701a:	c1 f0       	breq	.+48     	; 0x1704c <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   1701c:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   17020:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   17024:	81 e0       	ldi	r24, 0x01	; 1
   17026:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17028:	87 81       	ldd	r24, Z+7	; 0x07
   1702a:	90 85       	ldd	r25, Z+8	; 0x08
   1702c:	80 62       	ori	r24, 0x20	; 32
   1702e:	90 87       	std	Z+8, r25	; 0x08
   17030:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   17032:	20 ff       	sbrs	r18, 0
   17034:	eb c1       	rjmp	.+982    	; 0x1740c <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17036:	84 e0       	ldi	r24, 0x04	; 4
   17038:	99 e2       	ldi	r25, 0x29	; 41
   1703a:	a0 e0       	ldi	r26, 0x00	; 0
   1703c:	ed b7       	in	r30, 0x3d	; 61
   1703e:	fe b7       	in	r31, 0x3e	; 62
   17040:	81 83       	std	Z+1, r24	; 0x01
   17042:	92 83       	std	Z+2, r25	; 0x02
   17044:	a3 83       	std	Z+3, r26	; 0x03
   17046:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1704a:	e0 c1       	rjmp	.+960    	; 0x1740c <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1704c:	25 ff       	sbrs	r18, 5
   1704e:	0e c0       	rjmp	.+28     	; 0x1706c <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17050:	ed b7       	in	r30, 0x3d	; 61
   17052:	fe b7       	in	r31, 0x3e	; 62
   17054:	17 83       	std	Z+7, r17	; 0x07
   17056:	06 83       	std	Z+6, r16	; 0x06
   17058:	f5 82       	std	Z+5, r15	; 0x05
   1705a:	e4 82       	std	Z+4, r14	; 0x04
   1705c:	85 ed       	ldi	r24, 0xD5	; 213
   1705e:	98 e2       	ldi	r25, 0x28	; 40
   17060:	a0 e0       	ldi	r26, 0x00	; 0
   17062:	81 83       	std	Z+1, r24	; 0x01
   17064:	92 83       	std	Z+2, r25	; 0x02
   17066:	a3 83       	std	Z+3, r26	; 0x03
   17068:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            secondary, len);
#endif
    if(!len)
   1706c:	01 15       	cp	r16, r1
   1706e:	11 05       	cpc	r17, r1
   17070:	61 f4       	brne	.+24     	; 0x1708a <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   17072:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   17076:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1707a:	81 e0       	ldi	r24, 0x01	; 1
   1707c:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1707e:	87 81       	ldd	r24, Z+7	; 0x07
   17080:	90 85       	ldd	r25, Z+8	; 0x08
   17082:	80 62       	ori	r24, 0x20	; 32
   17084:	90 87       	std	Z+8, r25	; 0x08
   17086:	87 83       	std	Z+7, r24	; 0x07
   17088:	c1 c1       	rjmp	.+898    	; 0x1740c <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   1708a:	60 91 f1 1d 	lds	r22, 0x1DF1	; 0x801df1 <gpib_iobuff>

    if (secondary == 0x68)
   1708e:	f8 e6       	ldi	r31, 0x68	; 104
   17090:	ef 16       	cp	r14, r31
   17092:	f1 04       	cpc	r15, r1
   17094:	09 f0       	breq	.+2      	; 0x17098 <Amigo_Command+0x240>
   17096:	28 c1       	rjmp	.+592    	; 0x172e8 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17098:	61 11       	cpse	r22, r1
   1709a:	2e c0       	rjmp	.+92     	; 0x170f8 <Amigo_Command+0x2a0>
   1709c:	02 30       	cpi	r16, 0x02	; 2
   1709e:	11 05       	cpc	r17, r1
   170a0:	09 f0       	breq	.+2      	; 0x170a4 <Amigo_Command+0x24c>
   170a2:	b9 c1       	rjmp	.+882    	; 0x17416 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170a8:	85 ff       	sbrs	r24, 5
   170aa:	0a c0       	rjmp	.+20     	; 0x170c0 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   170ac:	85 eb       	ldi	r24, 0xB5	; 181
   170ae:	98 e2       	ldi	r25, 0x28	; 40
   170b0:	a0 e0       	ldi	r26, 0x00	; 0
   170b2:	ed b7       	in	r30, 0x3d	; 61
   170b4:	fe b7       	in	r31, 0x3e	; 62
   170b6:	81 83       	std	Z+1, r24	; 0x01
   170b8:	92 83       	std	Z+2, r25	; 0x02
   170ba:	a3 83       	std	Z+3, r26	; 0x03
   170bc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   170c0:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   170c4:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   170c8:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   170ca:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   170cc:	10 86       	std	Z+8, r1	; 0x08
   170ce:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   170d0:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   170d2:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   170d6:	98 2f       	mov	r25, r24
   170d8:	92 95       	swap	r25
   170da:	96 95       	lsr	r25
   170dc:	96 95       	lsr	r25
   170de:	93 70       	andi	r25, 0x03	; 3
   170e0:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   170e2:	8f 73       	andi	r24, 0x3F	; 63
   170e4:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   170e6:	ce 01       	movw	r24, r28
   170e8:	0a 96       	adiw	r24, 0x0a	; 10
   170ea:	d1 d9       	rcall	.-3166   	; 0x1648e <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   170ec:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   170f0:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   170f4:	85 e0       	ldi	r24, 0x05	; 5
   170f6:	19 c1       	rjmp	.+562    	; 0x1732a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   170f8:	62 30       	cpi	r22, 0x02	; 2
   170fa:	09 f0       	breq	.+2      	; 0x170fe <Amigo_Command+0x2a6>
   170fc:	3f c0       	rjmp	.+126    	; 0x1717c <Amigo_Command+0x324>
   170fe:	05 30       	cpi	r16, 0x05	; 5
   17100:	11 05       	cpc	r17, r1
   17102:	d1 f4       	brne	.+52     	; 0x17138 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17104:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17108:	85 ff       	sbrs	r24, 5
   1710a:	0a c0       	rjmp	.+20     	; 0x17120 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   1710c:	81 ea       	ldi	r24, 0xA1	; 161
   1710e:	98 e2       	ldi	r25, 0x28	; 40
   17110:	a0 e0       	ldi	r26, 0x00	; 0
   17112:	ed b7       	in	r30, 0x3d	; 61
   17114:	fe b7       	in	r31, 0x3e	; 62
   17116:	81 83       	std	Z+1, r24	; 0x01
   17118:	92 83       	std	Z+2, r25	; 0x02
   1711a:	a3 83       	std	Z+3, r26	; 0x03
   1711c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17120:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   17124:	85 de       	rcall	.-758    	; 0x16e30 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17126:	80 91 f3 1d 	lds	r24, 0x1DF3	; 0x801df3 <gpib_iobuff+0x2>
   1712a:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1712c:	80 91 f4 1d 	lds	r24, 0x1DF4	; 0x801df4 <gpib_iobuff+0x3>
   17130:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17132:	80 91 f5 1d 	lds	r24, 0x1DF5	; 0x801df5 <gpib_iobuff+0x4>
   17136:	1d c0       	rjmp	.+58     	; 0x17172 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17138:	06 30       	cpi	r16, 0x06	; 6
   1713a:	11 05       	cpc	r17, r1
   1713c:	09 f0       	breq	.+2      	; 0x17140 <Amigo_Command+0x2e8>
   1713e:	6b c1       	rjmp	.+726    	; 0x17416 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17140:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17144:	85 ff       	sbrs	r24, 5
   17146:	0a c0       	rjmp	.+20     	; 0x1715c <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17148:	8d e8       	ldi	r24, 0x8D	; 141
   1714a:	98 e2       	ldi	r25, 0x28	; 40
   1714c:	a0 e0       	ldi	r26, 0x00	; 0
   1714e:	ed b7       	in	r30, 0x3d	; 61
   17150:	fe b7       	in	r31, 0x3e	; 62
   17152:	81 83       	std	Z+1, r24	; 0x01
   17154:	92 83       	std	Z+2, r25	; 0x02
   17156:	a3 83       	std	Z+3, r26	; 0x03
   17158:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1715c:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   17160:	67 de       	rcall	.-818    	; 0x16e30 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17162:	80 91 f4 1d 	lds	r24, 0x1DF4	; 0x801df4 <gpib_iobuff+0x3>
   17166:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17168:	80 91 f5 1d 	lds	r24, 0x1DF5	; 0x801df5 <gpib_iobuff+0x4>
   1716c:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1716e:	80 91 f6 1d 	lds	r24, 0x1DF6	; 0x801df6 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17172:	8f 87       	std	Y+15, r24	; 0x0f
   17174:	ce 01       	movw	r24, r28
   17176:	0a 96       	adiw	r24, 0x0a	; 10
   17178:	8a d9       	rcall	.-3308   	; 0x1648e <amigo_seek>
   1717a:	d8 c0       	rjmp	.+432    	; 0x1732c <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   1717c:	63 30       	cpi	r22, 0x03	; 3
   1717e:	e9 f4       	brne	.+58     	; 0x171ba <Amigo_Command+0x362>
   17180:	02 30       	cpi	r16, 0x02	; 2
   17182:	11 05       	cpc	r17, r1
   17184:	09 f0       	breq	.+2      	; 0x17188 <Amigo_Command+0x330>
   17186:	47 c1       	rjmp	.+654    	; 0x17416 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17188:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1718c:	85 ff       	sbrs	r24, 5
   1718e:	0a c0       	rjmp	.+20     	; 0x171a4 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   17190:	84 e6       	ldi	r24, 0x64	; 100
   17192:	98 e2       	ldi	r25, 0x28	; 40
   17194:	a0 e0       	ldi	r26, 0x00	; 0
   17196:	ed b7       	in	r30, 0x3d	; 61
   17198:	fe b7       	in	r31, 0x3e	; 62
   1719a:	81 83       	std	Z+1, r24	; 0x01
   1719c:	92 83       	std	Z+2, r25	; 0x02
   1719e:	a3 83       	std	Z+3, r26	; 0x03
   171a0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171a4:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
            amigo_request_status();
   171a8:	43 de       	rcall	.-890    	; 0x16e30 <amigo_check_unit>
   171aa:	3d d8       	rcall	.-3974   	; 0x16226 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   171ac:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   171b0:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   171b4:	83 e0       	ldi	r24, 0x03	; 3
   171b6:	80 83       	st	Z, r24
   171b8:	29 c1       	rjmp	.+594    	; 0x1740c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   171ba:	65 30       	cpi	r22, 0x05	; 5
   171bc:	d9 f4       	brne	.+54     	; 0x171f4 <Amigo_Command+0x39c>
   171be:	02 30       	cpi	r16, 0x02	; 2
   171c0:	11 05       	cpc	r17, r1
   171c2:	09 f0       	breq	.+2      	; 0x171c6 <Amigo_Command+0x36e>
   171c4:	28 c1       	rjmp	.+592    	; 0x17416 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171ca:	85 ff       	sbrs	r24, 5
   171cc:	0a c0       	rjmp	.+20     	; 0x171e2 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   171ce:	83 e4       	ldi	r24, 0x43	; 67
   171d0:	98 e2       	ldi	r25, 0x28	; 40
   171d2:	a0 e0       	ldi	r26, 0x00	; 0
   171d4:	ed b7       	in	r30, 0x3d	; 61
   171d6:	fe b7       	in	r31, 0x3e	; 62
   171d8:	81 83       	std	Z+1, r24	; 0x01
   171da:	92 83       	std	Z+2, r25	; 0x02
   171dc:	a3 83       	std	Z+3, r26	; 0x03
   171de:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171e2:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   171e6:	24 de       	rcall	.-952    	; 0x16e30 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   171e8:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   171ec:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   171f0:	86 e0       	ldi	r24, 0x06	; 6
   171f2:	e7 c0       	rjmp	.+462    	; 0x173c2 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   171f4:	67 30       	cpi	r22, 0x07	; 7
   171f6:	f9 f4       	brne	.+62     	; 0x17236 <Amigo_Command+0x3de>
   171f8:	04 30       	cpi	r16, 0x04	; 4
   171fa:	11 05       	cpc	r17, r1
   171fc:	09 f0       	breq	.+2      	; 0x17200 <Amigo_Command+0x3a8>
   171fe:	0b c1       	rjmp	.+534    	; 0x17416 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17200:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17204:	85 ff       	sbrs	r24, 5
   17206:	0a c0       	rjmp	.+20     	; 0x1721c <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17208:	83 e3       	ldi	r24, 0x33	; 51
   1720a:	98 e2       	ldi	r25, 0x28	; 40
   1720c:	a0 e0       	ldi	r26, 0x00	; 0
   1720e:	ed b7       	in	r30, 0x3d	; 61
   17210:	fe b7       	in	r31, 0x3e	; 62
   17212:	81 83       	std	Z+1, r24	; 0x01
   17214:	92 83       	std	Z+2, r25	; 0x02
   17216:	a3 83       	std	Z+3, r26	; 0x03
   17218:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1721c:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   17220:	07 de       	rcall	.-1010   	; 0x16e30 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17222:	80 91 f3 1d 	lds	r24, 0x1DF3	; 0x801df3 <gpib_iobuff+0x2>
   17226:	90 e0       	ldi	r25, 0x00	; 0
   17228:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1722a:	88 27       	eor	r24, r24
   1722c:	20 91 f4 1d 	lds	r18, 0x1DF4	; 0x801df4 <gpib_iobuff+0x3>
   17230:	82 2b       	or	r24, r18
   17232:	58 d9       	rcall	.-3408   	; 0x164e4 <amigo_verify>
   17234:	f3 c0       	rjmp	.+486    	; 0x1741c <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17236:	68 30       	cpi	r22, 0x08	; 8
   17238:	d9 f4       	brne	.+54     	; 0x17270 <Amigo_Command+0x418>
   1723a:	02 30       	cpi	r16, 0x02	; 2
   1723c:	11 05       	cpc	r17, r1
   1723e:	09 f0       	breq	.+2      	; 0x17242 <Amigo_Command+0x3ea>
   17240:	ea c0       	rjmp	.+468    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17242:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17246:	85 ff       	sbrs	r24, 5
   17248:	0a c0       	rjmp	.+20     	; 0x1725e <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1724a:	81 e1       	ldi	r24, 0x11	; 17
   1724c:	98 e2       	ldi	r25, 0x28	; 40
   1724e:	a0 e0       	ldi	r26, 0x00	; 0
   17250:	ed b7       	in	r30, 0x3d	; 61
   17252:	fe b7       	in	r31, 0x3e	; 62
   17254:	81 83       	std	Z+1, r24	; 0x01
   17256:	92 83       	std	Z+2, r25	; 0x02
   17258:	a3 83       	std	Z+3, r26	; 0x03
   1725a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1725e:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   17262:	e6 dd       	rcall	.-1076   	; 0x16e30 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17264:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   17268:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1726c:	88 e0       	ldi	r24, 0x08	; 8
   1726e:	5d c0       	rjmp	.+186    	; 0x1732a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17270:	86 2f       	mov	r24, r22
   17272:	8f 7d       	andi	r24, 0xDF	; 223
   17274:	8b 30       	cpi	r24, 0x0B	; 11
   17276:	d9 f4       	brne	.+54     	; 0x172ae <Amigo_Command+0x456>
   17278:	02 30       	cpi	r16, 0x02	; 2
   1727a:	11 05       	cpc	r17, r1
   1727c:	09 f0       	breq	.+2      	; 0x17280 <Amigo_Command+0x428>
   1727e:	cb c0       	rjmp	.+406    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17280:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17284:	85 ff       	sbrs	r24, 5
   17286:	0a c0       	rjmp	.+20     	; 0x1729c <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17288:	85 ef       	ldi	r24, 0xF5	; 245
   1728a:	97 e2       	ldi	r25, 0x27	; 39
   1728c:	a0 e0       	ldi	r26, 0x00	; 0
   1728e:	ed b7       	in	r30, 0x3d	; 61
   17290:	fe b7       	in	r31, 0x3e	; 62
   17292:	81 83       	std	Z+1, r24	; 0x01
   17294:	92 83       	std	Z+2, r25	; 0x02
   17296:	a3 83       	std	Z+3, r26	; 0x03
   17298:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1729c:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   172a0:	c7 dd       	rcall	.-1138   	; 0x16e30 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   172a2:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   172a6:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   172aa:	8a e0       	ldi	r24, 0x0A	; 10
   172ac:	3e c0       	rjmp	.+124    	; 0x1732a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   172ae:	64 31       	cpi	r22, 0x14	; 20
   172b0:	09 f0       	breq	.+2      	; 0x172b4 <Amigo_Command+0x45c>
   172b2:	b1 c0       	rjmp	.+354    	; 0x17416 <Amigo_Command+0x5be>
   172b4:	02 30       	cpi	r16, 0x02	; 2
   172b6:	11 05       	cpc	r17, r1
   172b8:	09 f0       	breq	.+2      	; 0x172bc <Amigo_Command+0x464>
   172ba:	ad c0       	rjmp	.+346    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172c0:	85 ff       	sbrs	r24, 5
   172c2:	0a c0       	rjmp	.+20     	; 0x172d8 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   172c4:	8c ec       	ldi	r24, 0xCC	; 204
   172c6:	97 e2       	ldi	r25, 0x27	; 39
   172c8:	a0 e0       	ldi	r26, 0x00	; 0
   172ca:	ed b7       	in	r30, 0x3d	; 61
   172cc:	fe b7       	in	r31, 0x3e	; 62
   172ce:	81 83       	std	Z+1, r24	; 0x01
   172d0:	92 83       	std	Z+2, r25	; 0x02
   172d2:	a3 83       	std	Z+3, r26	; 0x03
   172d4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
            amigo_request_logical_address();
   172d8:	0e 94 05 b1 	call	0x1620a	; 0x1620a <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   172dc:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   172e0:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   172e4:	84 e0       	ldi	r24, 0x04	; 4
   172e6:	21 c0       	rjmp	.+66     	; 0x1732a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   172e8:	f9 e6       	ldi	r31, 0x69	; 105
   172ea:	ef 16       	cp	r14, r31
   172ec:	f1 04       	cpc	r15, r1
   172ee:	39 f5       	brne	.+78     	; 0x1733e <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   172f0:	68 30       	cpi	r22, 0x08	; 8
   172f2:	09 f0       	breq	.+2      	; 0x172f6 <Amigo_Command+0x49e>
   172f4:	90 c0       	rjmp	.+288    	; 0x17416 <Amigo_Command+0x5be>
   172f6:	02 30       	cpi	r16, 0x02	; 2
   172f8:	11 05       	cpc	r17, r1
   172fa:	09 f0       	breq	.+2      	; 0x172fe <Amigo_Command+0x4a6>
   172fc:	8c c0       	rjmp	.+280    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17302:	85 ff       	sbrs	r24, 5
   17304:	0a c0       	rjmp	.+20     	; 0x1731a <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17306:	8c ea       	ldi	r24, 0xAC	; 172
   17308:	97 e2       	ldi	r25, 0x27	; 39
   1730a:	a0 e0       	ldi	r26, 0x00	; 0
   1730c:	ed b7       	in	r30, 0x3d	; 61
   1730e:	fe b7       	in	r31, 0x3e	; 62
   17310:	81 83       	std	Z+1, r24	; 0x01
   17312:	92 83       	std	Z+2, r25	; 0x02
   17314:	a3 83       	std	Z+3, r26	; 0x03
   17316:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1731a:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   1731e:	88 dd       	rcall	.-1264   	; 0x16e30 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17320:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   17324:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   17328:	89 e0       	ldi	r24, 0x09	; 9
   1732a:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1732c:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   17330:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   17334:	81 81       	ldd	r24, Z+1	; 0x01
   17336:	90 e0       	ldi	r25, 0x00	; 0
   17338:	0e 94 4e 85 	call	0x10a9c	; 0x10a9c <gpib_enable_PPR>
   1733c:	67 c0       	rjmp	.+206    	; 0x1740c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1733e:	fa e6       	ldi	r31, 0x6A	; 106
   17340:	ef 16       	cp	r14, r31
   17342:	f1 04       	cpc	r15, r1
   17344:	09 f0       	breq	.+2      	; 0x17348 <Amigo_Command+0x4f0>
   17346:	40 c0       	rjmp	.+128    	; 0x173c8 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17348:	68 30       	cpi	r22, 0x08	; 8
   1734a:	f1 f4       	brne	.+60     	; 0x17388 <Amigo_Command+0x530>
   1734c:	02 30       	cpi	r16, 0x02	; 2
   1734e:	11 05       	cpc	r17, r1
   17350:	09 f0       	breq	.+2      	; 0x17354 <Amigo_Command+0x4fc>
   17352:	61 c0       	rjmp	.+194    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17354:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17358:	85 ff       	sbrs	r24, 5
   1735a:	0a c0       	rjmp	.+20     	; 0x17370 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1735c:	81 e8       	ldi	r24, 0x81	; 129
   1735e:	97 e2       	ldi	r25, 0x27	; 39
   17360:	a0 e0       	ldi	r26, 0x00	; 0
   17362:	ed b7       	in	r30, 0x3d	; 61
   17364:	fe b7       	in	r31, 0x3e	; 62
   17366:	81 83       	std	Z+1, r24	; 0x01
   17368:	92 83       	std	Z+2, r25	; 0x02
   1736a:	a3 83       	std	Z+3, r26	; 0x03
   1736c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17370:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
   17374:	5d dd       	rcall	.-1350   	; 0x16e30 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17376:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   1737a:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1737e:	82 e0       	ldi	r24, 0x02	; 2
   17380:	80 83       	st	Z, r24
            amigo_request_status();
   17382:	0e 94 13 b1 	call	0x16226	; 0x16226 <amigo_request_status>
   17386:	42 c0       	rjmp	.+132    	; 0x1740c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17388:	65 30       	cpi	r22, 0x05	; 5
   1738a:	09 f0       	breq	.+2      	; 0x1738e <Amigo_Command+0x536>
   1738c:	44 c0       	rjmp	.+136    	; 0x17416 <Amigo_Command+0x5be>
   1738e:	02 30       	cpi	r16, 0x02	; 2
   17390:	11 05       	cpc	r17, r1
   17392:	09 f0       	breq	.+2      	; 0x17396 <Amigo_Command+0x53e>
   17394:	40 c0       	rjmp	.+128    	; 0x17416 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17396:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1739a:	85 ff       	sbrs	r24, 5
   1739c:	0a c0       	rjmp	.+20     	; 0x173b2 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1739e:	82 e6       	ldi	r24, 0x62	; 98
   173a0:	97 e2       	ldi	r25, 0x27	; 39
   173a2:	a0 e0       	ldi	r26, 0x00	; 0
   173a4:	ed b7       	in	r30, 0x3d	; 61
   173a6:	fe b7       	in	r31, 0x3e	; 62
   173a8:	81 83       	std	Z+1, r24	; 0x01
   173aa:	92 83       	std	Z+2, r25	; 0x02
   173ac:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   173ae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   173b2:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   173b6:	3c dd       	rcall	.-1416   	; 0x16e30 <amigo_check_unit>
   173b8:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   173bc:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   173c0:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   173c2:	80 83       	st	Z, r24
   173c4:	c5 d9       	rcall	.-3190   	; 0x16750 <amigo_buffered_read_command>
   173c6:	2a c0       	rjmp	.+84     	; 0x1741c <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   173c8:	fc e6       	ldi	r31, 0x6C	; 108
   173ca:	ef 16       	cp	r14, r31
   173cc:	f1 04       	cpc	r15, r1
   173ce:	d1 f4       	brne	.+52     	; 0x17404 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   173d0:	68 31       	cpi	r22, 0x18	; 24
   173d2:	09 f5       	brne	.+66     	; 0x17416 <Amigo_Command+0x5be>
   173d4:	05 30       	cpi	r16, 0x05	; 5
   173d6:	11 05       	cpc	r17, r1
   173d8:	f1 f4       	brne	.+60     	; 0x17416 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173de:	85 ff       	sbrs	r24, 5
   173e0:	0a c0       	rjmp	.+20     	; 0x173f6 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   173e2:	82 e5       	ldi	r24, 0x52	; 82
   173e4:	97 e2       	ldi	r25, 0x27	; 39
   173e6:	a0 e0       	ldi	r26, 0x00	; 0
   173e8:	ed b7       	in	r30, 0x3d	; 61
   173ea:	fe b7       	in	r31, 0x3e	; 62
   173ec:	81 83       	std	Z+1, r24	; 0x01
   173ee:	92 83       	std	Z+2, r25	; 0x02
   173f0:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   173f2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   173f6:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   173fa:	1a dd       	rcall	.-1484   	; 0x16e30 <amigo_check_unit>
   173fc:	80 91 f5 1d 	lds	r24, 0x1DF5	; 0x801df5 <gpib_iobuff+0x4>
   17400:	0f d9       	rcall	.-3554   	; 0x16620 <amigo_format>
   17402:	04 c0       	rjmp	.+8      	; 0x1740c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17404:	f0 e7       	ldi	r31, 0x70	; 112
   17406:	ef 16       	cp	r14, r31
   17408:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1740a:	29 f4       	brne	.+10     	; 0x17416 <Amigo_Command+0x5be>
   1740c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1740e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17410:	88 27       	eor	r24, r24
   17412:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17414:	03 c0       	rjmp	.+6      	; 0x1741c <Amigo_Command+0x5c4>
   17416:	a8 01       	movw	r20, r16
   17418:	8e 2d       	mov	r24, r14
   1741a:	ed db       	rcall	.-2086   	; 0x16bf6 <amigo_todo_op>
}
   1741c:	6c 96       	adiw	r28, 0x1c	; 28
   1741e:	e6 e0       	ldi	r30, 0x06	; 6
   17420:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00017424 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17424:	a9 e0       	ldi	r26, 0x09	; 9
   17426:	b0 e0       	ldi	r27, 0x00	; 0
   17428:	e8 e1       	ldi	r30, 0x18	; 24
   1742a:	fa eb       	ldi	r31, 0xBA	; 186
   1742c:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   17430:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17432:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17436:	85 ff       	sbrs	r24, 5
   17438:	16 c0       	rjmp	.+44     	; 0x17466 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1743a:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   1743e:	90 e0       	ldi	r25, 0x00	; 0
   17440:	ed b7       	in	r30, 0x3d	; 61
   17442:	fe b7       	in	r31, 0x3e	; 62
   17444:	91 87       	std	Z+9, r25	; 0x09
   17446:	80 87       	std	Z+8, r24	; 0x08
   17448:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   1744c:	90 e0       	ldi	r25, 0x00	; 0
   1744e:	97 83       	std	Z+7, r25	; 0x07
   17450:	86 83       	std	Z+6, r24	; 0x06
   17452:	d5 83       	std	Z+5, r29	; 0x05
   17454:	c4 83       	std	Z+4, r28	; 0x04
   17456:	80 e2       	ldi	r24, 0x20	; 32
   17458:	97 e2       	ldi	r25, 0x27	; 39
   1745a:	a0 e0       	ldi	r26, 0x00	; 0
   1745c:	81 83       	std	Z+1, r24	; 0x01
   1745e:	92 83       	std	Z+2, r25	; 0x02
   17460:	a3 83       	std	Z+3, r26	; 0x03
   17462:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17466:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   1746a:	8f 35       	cpi	r24, 0x5F	; 95
   1746c:	09 f4       	brne	.+2      	; 0x17470 <Amigo_Execute+0x4c>
   1746e:	ad c0       	rjmp	.+346    	; 0x175ca <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17470:	90 e0       	ldi	r25, 0x00	; 0
   17472:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   17476:	89 2b       	or	r24, r25
   17478:	39 f0       	breq	.+14     	; 0x17488 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   1747a:	ce 01       	movw	r24, r28
   1747c:	87 7f       	andi	r24, 0xF7	; 247
   1747e:	80 36       	cpi	r24, 0x60	; 96
   17480:	91 05       	cpc	r25, r1
   17482:	09 f0       	breq	.+2      	; 0x17486 <Amigo_Execute+0x62>
   17484:	a2 c0       	rjmp	.+324    	; 0x175ca <Amigo_Execute+0x1a6>
   17486:	08 c0       	rjmp	.+16     	; 0x17498 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17488:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   1748c:	90 e0       	ldi	r25, 0x00	; 0
   1748e:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   17492:	89 2b       	or	r24, r25
   17494:	91 f7       	brne	.-28     	; 0x1747a <Amigo_Execute+0x56>
   17496:	99 c0       	rjmp	.+306    	; 0x175ca <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17498:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   1749c:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   174a0:	81 81       	ldd	r24, Z+1	; 0x01
   174a2:	90 e0       	ldi	r25, 0x00	; 0
   174a4:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>

    if(secondary == 0x60)
   174a8:	c0 36       	cpi	r28, 0x60	; 96
   174aa:	d1 05       	cpc	r29, r1
   174ac:	09 f0       	breq	.+2      	; 0x174b0 <Amigo_Execute+0x8c>
   174ae:	4e c0       	rjmp	.+156    	; 0x1754c <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   174b0:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   174b4:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   174b8:	e0 81       	ld	r30, Z
   174ba:	8e 2f       	mov	r24, r30
   174bc:	90 e0       	ldi	r25, 0x00	; 0
   174be:	8b 30       	cpi	r24, 0x0B	; 11
   174c0:	91 05       	cpc	r25, r1
   174c2:	08 f0       	brcs	.+2      	; 0x174c6 <Amigo_Execute+0xa2>
   174c4:	41 c0       	rjmp	.+130    	; 0x17548 <Amigo_Execute+0x124>
   174c6:	fc 01       	movw	r30, r24
   174c8:	ea 52       	subi	r30, 0x2A	; 42
   174ca:	ff 4f       	sbci	r31, 0xFF	; 255
   174cc:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174d4:	85 ff       	sbrs	r24, 5
   174d6:	18 c0       	rjmp	.+48     	; 0x17508 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   174d8:	80 e0       	ldi	r24, 0x00	; 0
   174da:	97 e2       	ldi	r25, 0x27	; 39
   174dc:	0d c0       	rjmp	.+26     	; 0x174f8 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174e2:	85 ff       	sbrs	r24, 5
   174e4:	11 c0       	rjmp	.+34     	; 0x17508 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   174e6:	8f ed       	ldi	r24, 0xDF	; 223
   174e8:	96 e2       	ldi	r25, 0x26	; 38
   174ea:	06 c0       	rjmp	.+12     	; 0x174f8 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174f0:	85 ff       	sbrs	r24, 5
   174f2:	0a c0       	rjmp	.+20     	; 0x17508 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   174f4:	80 ec       	ldi	r24, 0xC0	; 192
   174f6:	96 e2       	ldi	r25, 0x26	; 38
   174f8:	a0 e0       	ldi	r26, 0x00	; 0
   174fa:	ed b7       	in	r30, 0x3d	; 61
   174fc:	fe b7       	in	r31, 0x3e	; 62
   174fe:	81 83       	std	Z+1, r24	; 0x01
   17500:	92 83       	std	Z+2, r25	; 0x02
   17502:	a3 83       	std	Z+3, r26	; 0x03
   17504:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17508:	b0 d9       	rcall	.-3232   	; 0x1686a <amigo_buffered_read_execute>
   1750a:	61 c0       	rjmp	.+194    	; 0x175ce <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1750c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17510:	85 ff       	sbrs	r24, 5
   17512:	18 c0       	rjmp	.+48     	; 0x17544 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17514:	8e e9       	ldi	r24, 0x9E	; 158
   17516:	96 e2       	ldi	r25, 0x26	; 38
   17518:	0d c0       	rjmp	.+26     	; 0x17534 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1751a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1751e:	85 ff       	sbrs	r24, 5
   17520:	11 c0       	rjmp	.+34     	; 0x17544 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17522:	82 e8       	ldi	r24, 0x82	; 130
   17524:	96 e2       	ldi	r25, 0x26	; 38
   17526:	06 c0       	rjmp	.+12     	; 0x17534 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17528:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1752c:	85 ff       	sbrs	r24, 5
   1752e:	0a c0       	rjmp	.+20     	; 0x17544 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17530:	82 e6       	ldi	r24, 0x62	; 98
   17532:	96 e2       	ldi	r25, 0x26	; 38
   17534:	a0 e0       	ldi	r26, 0x00	; 0
   17536:	ed b7       	in	r30, 0x3d	; 61
   17538:	fe b7       	in	r31, 0x3e	; 62
   1753a:	81 83       	std	Z+1, r24	; 0x01
   1753c:	92 83       	std	Z+2, r25	; 0x02
   1753e:	a3 83       	std	Z+3, r26	; 0x03
   17540:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17544:	ed d9       	rcall	.-3110   	; 0x16920 <amigo_buffered_write>
   17546:	43 c0       	rjmp	.+134    	; 0x175ce <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17548:	80 e6       	ldi	r24, 0x60	; 96
   1754a:	3d c0       	rjmp	.+122    	; 0x175c6 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1754c:	c8 36       	cpi	r28, 0x68	; 104
   1754e:	d1 05       	cpc	r29, r1
   17550:	e1 f5       	brne	.+120    	; 0x175ca <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17552:	e0 91 69 1a 	lds	r30, 0x1A69	; 0x801a69 <AMIGOs>
   17556:	f0 91 6a 1a 	lds	r31, 0x1A6A	; 0x801a6a <AMIGOs+0x1>
   1755a:	80 81       	ld	r24, Z
   1755c:	82 30       	cpi	r24, 0x02	; 2
   1755e:	81 f0       	breq	.+32     	; 0x17580 <Amigo_Execute+0x15c>
   17560:	18 f4       	brcc	.+6      	; 0x17568 <Amigo_Execute+0x144>
   17562:	88 23       	and	r24, r24
   17564:	91 f1       	breq	.+100    	; 0x175ca <Amigo_Execute+0x1a6>
   17566:	2e c0       	rjmp	.+92     	; 0x175c4 <Amigo_Execute+0x1a0>
   17568:	83 30       	cpi	r24, 0x03	; 3
   1756a:	19 f0       	breq	.+6      	; 0x17572 <Amigo_Execute+0x14e>
   1756c:	84 30       	cpi	r24, 0x04	; 4
   1756e:	c9 f0       	breq	.+50     	; 0x175a2 <Amigo_Execute+0x17e>
   17570:	29 c0       	rjmp	.+82     	; 0x175c4 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17572:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17576:	85 ff       	sbrs	r24, 5
   17578:	11 c0       	rjmp	.+34     	; 0x1759c <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   1757a:	89 e3       	ldi	r24, 0x39	; 57
   1757c:	96 e2       	ldi	r25, 0x26	; 38
   1757e:	06 c0       	rjmp	.+12     	; 0x1758c <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17580:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17584:	85 ff       	sbrs	r24, 5
   17586:	0a c0       	rjmp	.+20     	; 0x1759c <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17588:	8e e0       	ldi	r24, 0x0E	; 14
   1758a:	96 e2       	ldi	r25, 0x26	; 38
   1758c:	a0 e0       	ldi	r26, 0x00	; 0
   1758e:	ed b7       	in	r30, 0x3d	; 61
   17590:	fe b7       	in	r31, 0x3e	; 62
   17592:	81 83       	std	Z+1, r24	; 0x01
   17594:	92 83       	std	Z+2, r25	; 0x02
   17596:	a3 83       	std	Z+3, r26	; 0x03
   17598:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return ( amigo_send_status() );
   1759c:	0e 94 c5 b1 	call	0x1638a	; 0x1638a <amigo_send_status>
   175a0:	16 c0       	rjmp	.+44     	; 0x175ce <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175a6:	85 ff       	sbrs	r24, 5
   175a8:	0a c0       	rjmp	.+20     	; 0x175be <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   175aa:	85 ee       	ldi	r24, 0xE5	; 229
   175ac:	95 e2       	ldi	r25, 0x25	; 37
   175ae:	a0 e0       	ldi	r26, 0x00	; 0
   175b0:	ed b7       	in	r30, 0x3d	; 61
   175b2:	fe b7       	in	r31, 0x3e	; 62
   175b4:	81 83       	std	Z+1, r24	; 0x01
   175b6:	92 83       	std	Z+2, r25	; 0x02
   175b8:	a3 83       	std	Z+3, r26	; 0x03
   175ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   175be:	0e 94 70 b1 	call	0x162e0	; 0x162e0 <amigo_send_logical_address>
   175c2:	05 c0       	rjmp	.+10     	; 0x175ce <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   175c4:	88 e6       	ldi	r24, 0x68	; 104
   175c6:	b0 db       	rcall	.-2208   	; 0x16d28 <amigo_todo>
   175c8:	02 c0       	rjmp	.+4      	; 0x175ce <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   175ca:	80 e0       	ldi	r24, 0x00	; 0
   175cc:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   175ce:	cd b7       	in	r28, 0x3d	; 61
   175d0:	de b7       	in	r29, 0x3e	; 62
   175d2:	29 96       	adiw	r28, 0x09	; 9
   175d4:	e2 e0       	ldi	r30, 0x02	; 2
   175d6:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000175da <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   175da:	cf 93       	push	r28
   175dc:	df 93       	push	r29
   175de:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   175e0:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   175e4:	90 e0       	ldi	r25, 0x00	; 0
   175e6:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   175ea:	89 2b       	or	r24, r25
   175ec:	51 f0       	breq	.+20     	; 0x17602 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   175ee:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   175f2:	8f 35       	cpi	r24, 0x5F	; 95
   175f4:	71 f4       	brne	.+28     	; 0x17612 <AMIGO_COMMANDS+0x38>
   175f6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   175fa:	90 e0       	ldi	r25, 0x00	; 0
   175fc:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   17600:	08 c0       	rjmp	.+16     	; 0x17612 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17602:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   17606:	90 e0       	ldi	r25, 0x00	; 0
   17608:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   1760c:	89 2b       	or	r24, r25
   1760e:	79 f7       	brne	.-34     	; 0x175ee <AMIGO_COMMANDS+0x14>
   17610:	76 c0       	rjmp	.+236    	; 0x176fe <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17612:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   17616:	81 11       	cpse	r24, r1
   17618:	05 c0       	rjmp	.+10     	; 0x17624 <AMIGO_COMMANDS+0x4a>
   1761a:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   1761e:	90 e0       	ldi	r25, 0x00	; 0
   17620:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17624:	c0 36       	cpi	r28, 0x60	; 96
   17626:	99 f4       	brne	.+38     	; 0x1764e <AMIGO_COMMANDS+0x74>
   17628:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   1762c:	90 e0       	ldi	r25, 0x00	; 0
   1762e:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   17632:	89 2b       	or	r24, r25
   17634:	19 f0       	breq	.+6      	; 0x1763c <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17636:	80 e6       	ldi	r24, 0x60	; 96
   17638:	90 e0       	ldi	r25, 0x00	; 0
   1763a:	14 c0       	rjmp	.+40     	; 0x17664 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1763c:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   17640:	90 e0       	ldi	r25, 0x00	; 0
   17642:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   17646:	89 2b       	or	r24, r25
   17648:	09 f4       	brne	.+2      	; 0x1764c <AMIGO_COMMANDS+0x72>
   1764a:	59 c0       	rjmp	.+178    	; 0x176fe <AMIGO_COMMANDS+0x124>
   1764c:	f4 cf       	rjmp	.-24     	; 0x17636 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1764e:	c8 36       	cpi	r28, 0x68	; 104
   17650:	c1 f4       	brne	.+48     	; 0x17682 <AMIGO_COMMANDS+0xa8>
   17652:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   17656:	90 e0       	ldi	r25, 0x00	; 0
   17658:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   1765c:	89 2b       	or	r24, r25
   1765e:	21 f0       	breq	.+8      	; 0x17668 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17660:	88 e6       	ldi	r24, 0x68	; 104
   17662:	90 e0       	ldi	r25, 0x00	; 0
   17664:	df de       	rcall	.-578    	; 0x17424 <Amigo_Execute>
   17666:	0b c0       	rjmp	.+22     	; 0x1767e <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17668:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   1766c:	90 e0       	ldi	r25, 0x00	; 0
   1766e:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   17672:	89 2b       	or	r24, r25
   17674:	09 f4       	brne	.+2      	; 0x17678 <AMIGO_COMMANDS+0x9e>
   17676:	43 c0       	rjmp	.+134    	; 0x176fe <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17678:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   1767a:	90 e0       	ldi	r25, 0x00	; 0
   1767c:	ed db       	rcall	.-2086   	; 0x16e58 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1767e:	ec 01       	movw	r28, r24
   17680:	40 c0       	rjmp	.+128    	; 0x17702 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17682:	c9 36       	cpi	r28, 0x69	; 105
   17684:	51 f4       	brne	.+20     	; 0x1769a <AMIGO_COMMANDS+0xc0>
   17686:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   1768a:	90 e0       	ldi	r25, 0x00	; 0
   1768c:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   17690:	89 2b       	or	r24, r25
   17692:	a9 f1       	breq	.+106    	; 0x176fe <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17694:	89 e6       	ldi	r24, 0x69	; 105
   17696:	90 e0       	ldi	r25, 0x00	; 0
   17698:	f1 cf       	rjmp	.-30     	; 0x1767c <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   1769a:	ca 36       	cpi	r28, 0x6A	; 106
   1769c:	51 f4       	brne	.+20     	; 0x176b2 <AMIGO_COMMANDS+0xd8>
   1769e:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   176a2:	90 e0       	ldi	r25, 0x00	; 0
   176a4:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   176a8:	89 2b       	or	r24, r25
   176aa:	49 f1       	breq	.+82     	; 0x176fe <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   176ac:	8a e6       	ldi	r24, 0x6A	; 106
   176ae:	90 e0       	ldi	r25, 0x00	; 0
   176b0:	e5 cf       	rjmp	.-54     	; 0x1767c <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   176b2:	cc 36       	cpi	r28, 0x6C	; 108
   176b4:	51 f4       	brne	.+20     	; 0x176ca <AMIGO_COMMANDS+0xf0>
   176b6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   176ba:	90 e0       	ldi	r25, 0x00	; 0
   176bc:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   176c0:	89 2b       	or	r24, r25
   176c2:	e9 f0       	breq	.+58     	; 0x176fe <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   176c4:	8c e6       	ldi	r24, 0x6C	; 108
   176c6:	90 e0       	ldi	r25, 0x00	; 0
   176c8:	d9 cf       	rjmp	.-78     	; 0x1767c <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   176ca:	c0 37       	cpi	r28, 0x70	; 112
   176cc:	c1 f4       	brne	.+48     	; 0x176fe <AMIGO_COMMANDS+0x124>
   176ce:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   176d2:	90 e0       	ldi	r25, 0x00	; 0
   176d4:	0e 94 e1 8b 	call	0x117c2	; 0x117c2 <AMIGO_is_MTA>
   176d8:	ec 01       	movw	r28, r24
   176da:	89 2b       	or	r24, r25
   176dc:	51 f0       	breq	.+20     	; 0x176f2 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   176de:	e0 91 6b 1a 	lds	r30, 0x1A6B	; 0x801a6b <AMIGOp>
   176e2:	f0 91 6c 1a 	lds	r31, 0x1A6C	; 0x801a6c <AMIGOp+0x1>
   176e6:	81 81       	ldd	r24, Z+1	; 0x01
   176e8:	90 e0       	ldi	r25, 0x00	; 0
   176ea:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   176ee:	ff d9       	rcall	.-3074   	; 0x16aee <amigo_cmd_dsj>
   176f0:	c6 cf       	rjmp	.-116    	; 0x1767e <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   176f2:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   176f6:	90 e0       	ldi	r25, 0x00	; 0
   176f8:	0e 94 d0 8b 	call	0x117a0	; 0x117a0 <AMIGO_is_MLA>
   176fc:	02 c0       	rjmp	.+4      	; 0x17702 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   176fe:	c0 e0       	ldi	r28, 0x00	; 0
   17700:	d0 e0       	ldi	r29, 0x00	; 0
}
   17702:	ce 01       	movw	r24, r28
   17704:	df 91       	pop	r29
   17706:	cf 91       	pop	r28
   17708:	08 95       	ret

0001770a <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1770a:	e4 ea       	ldi	r30, 0xA4	; 164
   1770c:	fa e1       	ldi	r31, 0x1A	; 26
   1770e:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17710:	10 82       	st	Z, r1
   17712:	11 82       	std	Z+1, r1	; 0x01
   17714:	12 82       	std	Z+2, r1	; 0x02
   17716:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17718:	15 82       	std	Z+5, r1	; 0x05
   1771a:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1771c:	12 86       	std	Z+10, r1	; 0x0a
   1771e:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17720:	14 86       	std	Z+12, r1	; 0x0c
   17722:	13 86       	std	Z+11, r1	; 0x0b
   17724:	08 95       	ret

00017726 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17726:	cf 93       	push	r28
   17728:	df 93       	push	r29
   1772a:	ad b7       	in	r26, 0x3d	; 61
   1772c:	be b7       	in	r27, 0x3e	; 62
   1772e:	17 97       	sbiw	r26, 0x07	; 7
   17730:	0f b6       	in	r0, 0x3f	; 63
   17732:	f8 94       	cli
   17734:	be bf       	out	0x3e, r27	; 62
   17736:	0f be       	out	0x3f, r0	; 63
   17738:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1773a:	20 91 ad 1a 	lds	r18, 0x1AAD	; 0x801aad <plot+0x9>
   1773e:	30 91 ae 1a 	lds	r19, 0x1AAE	; 0x801aae <plot+0xa>
   17742:	21 15       	cp	r18, r1
   17744:	31 05       	cpc	r19, r1
   17746:	09 f4       	brne	.+2      	; 0x1774a <receive_plot_flush+0x24>
   17748:	45 c0       	rjmp	.+138    	; 0x177d4 <receive_plot_flush+0xae>
   1774a:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <plot+0x4>
   1774e:	90 91 a9 1a 	lds	r25, 0x1AA9	; 0x801aa9 <plot+0x5>
   17752:	00 97       	sbiw	r24, 0x00	; 0
   17754:	09 f4       	brne	.+2      	; 0x17758 <receive_plot_flush+0x32>
   17756:	40 c0       	rjmp	.+128    	; 0x177d8 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17758:	ac 01       	movw	r20, r24
   1775a:	61 e0       	ldi	r22, 0x01	; 1
   1775c:	70 e0       	ldi	r23, 0x00	; 0
   1775e:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <plot+0xb>
   17762:	90 91 b0 1a 	lds	r25, 0x1AB0	; 0x801ab0 <plot+0xc>
   17766:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <fwrite>
   1776a:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1776c:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <plot+0x4>
   17770:	90 91 a9 1a 	lds	r25, 0x1AA9	; 0x801aa9 <plot+0x5>
   17774:	c8 17       	cp	r28, r24
   17776:	d9 07       	cpc	r29, r25
   17778:	09 f1       	breq	.+66     	; 0x177bc <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1777a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1777e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17782:	81 72       	andi	r24, 0x21	; 33
   17784:	99 27       	eor	r25, r25
   17786:	89 2b       	or	r24, r25
   17788:	b1 f0       	breq	.+44     	; 0x177b6 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   1778a:	81 ee       	ldi	r24, 0xE1	; 225
   1778c:	95 e1       	ldi	r25, 0x15	; 21
   1778e:	0e 94 81 77 	call	0xef02	; 0xef02 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17792:	ed b7       	in	r30, 0x3d	; 61
   17794:	fe b7       	in	r31, 0x3e	; 62
   17796:	d7 83       	std	Z+7, r29	; 0x07
   17798:	c6 83       	std	Z+6, r28	; 0x06
   1779a:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <plot+0x4>
   1779e:	90 91 a9 1a 	lds	r25, 0x1AA9	; 0x801aa9 <plot+0x5>
   177a2:	95 83       	std	Z+5, r25	; 0x05
   177a4:	84 83       	std	Z+4, r24	; 0x04
   177a6:	85 e7       	ldi	r24, 0x75	; 117
   177a8:	9e e2       	ldi	r25, 0x2E	; 46
   177aa:	a0 e0       	ldi	r26, 0x00	; 0
   177ac:	81 83       	std	Z+1, r24	; 0x01
   177ae:	92 83       	std	Z+2, r25	; 0x02
   177b0:	a3 83       	std	Z+3, r26	; 0x03
   177b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        }
        return(-1);
   177b6:	8f ef       	ldi	r24, 0xFF	; 255
   177b8:	9f ef       	ldi	r25, 0xFF	; 255
   177ba:	0e c0       	rjmp	.+28     	; 0x177d8 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   177bc:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <plot+0x9>
   177c0:	90 91 ae 1a 	lds	r25, 0x1AAE	; 0x801aae <plot+0xa>
   177c4:	0e 94 cb 75 	call	0xeb96	; 0xeb96 <fileno>
    if(fno < 0)
   177c8:	97 fd       	sbrc	r25, 7
   177ca:	f5 cf       	rjmp	.-22     	; 0x177b6 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   177cc:	0e 94 c2 7a 	call	0xf584	; 0xf584 <syncfs>
    return (ret);
   177d0:	ce 01       	movw	r24, r28
   177d2:	02 c0       	rjmp	.+4      	; 0x177d8 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   177d4:	80 e0       	ldi	r24, 0x00	; 0
   177d6:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   177d8:	cd b7       	in	r28, 0x3d	; 61
   177da:	de b7       	in	r29, 0x3e	; 62
   177dc:	27 96       	adiw	r28, 0x07	; 7
   177de:	e2 e0       	ldi	r30, 0x02	; 2
   177e0:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000177e4 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   177e4:	ad b7       	in	r26, 0x3d	; 61
   177e6:	be b7       	in	r27, 0x3e	; 62
   177e8:	17 97       	sbiw	r26, 0x07	; 7
   177ea:	0f b6       	in	r0, 0x3f	; 63
   177ec:	f8 94       	cli
   177ee:	be bf       	out	0x3e, r27	; 62
   177f0:	0f be       	out	0x3f, r0	; 63
   177f2:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   177f4:	98 df       	rcall	.-208    	; 0x17726 <receive_plot_flush>
   177f6:	97 ff       	sbrs	r25, 7
   177f8:	03 c0       	rjmp	.+6      	; 0x17800 <printer_close+0x1c>
        plot.error = 1;
   177fa:	81 e0       	ldi	r24, 0x01	; 1
   177fc:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17800:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17804:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17808:	81 72       	andi	r24, 0x21	; 33
   1780a:	99 27       	eor	r25, r25
   1780c:	89 2b       	or	r24, r25
   1780e:	71 f0       	breq	.+28     	; 0x1782c <printer_close+0x48>
    {
        if(plot.error)
   17810:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <plot+0x8>
   17814:	88 23       	and	r24, r24
   17816:	51 f0       	breq	.+20     	; 0x1782c <printer_close+0x48>
            printf("ERROR durring write\n");
   17818:	84 ea       	ldi	r24, 0xA4	; 164
   1781a:	9e e2       	ldi	r25, 0x2E	; 46
   1781c:	a0 e0       	ldi	r26, 0x00	; 0
   1781e:	ed b7       	in	r30, 0x3d	; 61
   17820:	fe b7       	in	r31, 0x3e	; 62
   17822:	81 83       	std	Z+1, r24	; 0x01
   17824:	92 83       	std	Z+2, r25	; 0x02
   17826:	a3 83       	std	Z+3, r26	; 0x03
   17828:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

    if(plot.fp)
   1782c:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <plot+0x9>
   17830:	90 91 ae 1a 	lds	r25, 0x1AAE	; 0x801aae <plot+0xa>
   17834:	00 97       	sbiw	r24, 0x00	; 0
   17836:	e1 f0       	breq	.+56     	; 0x17870 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17838:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1783c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17840:	85 ff       	sbrs	r24, 5
   17842:	16 c0       	rjmp	.+44     	; 0x17870 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17844:	80 91 a4 1a 	lds	r24, 0x1AA4	; 0x801aa4 <plot>
   17848:	90 91 a5 1a 	lds	r25, 0x1AA5	; 0x801aa5 <plot+0x1>
   1784c:	a0 91 a6 1a 	lds	r26, 0x1AA6	; 0x801aa6 <plot+0x2>
   17850:	b0 91 a7 1a 	lds	r27, 0x1AA7	; 0x801aa7 <plot+0x3>
   17854:	ed b7       	in	r30, 0x3d	; 61
   17856:	fe b7       	in	r31, 0x3e	; 62
   17858:	84 83       	std	Z+4, r24	; 0x04
   1785a:	95 83       	std	Z+5, r25	; 0x05
   1785c:	a6 83       	std	Z+6, r26	; 0x06
   1785e:	b7 83       	std	Z+7, r27	; 0x07
   17860:	86 e9       	ldi	r24, 0x96	; 150
   17862:	9e e2       	ldi	r25, 0x2E	; 46
   17864:	a0 e0       	ldi	r26, 0x00	; 0
   17866:	81 83       	std	Z+1, r24	; 0x01
   17868:	92 83       	std	Z+2, r25	; 0x02
   1786a:	a3 83       	std	Z+3, r26	; 0x03
   1786c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

    if(plot.buf)
   17870:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <plot+0xb>
   17874:	90 91 b0 1a 	lds	r25, 0x1AB0	; 0x801ab0 <plot+0xc>
   17878:	00 97       	sbiw	r24, 0x00	; 0
   1787a:	11 f0       	breq	.+4      	; 0x17880 <printer_close+0x9c>
        safefree(plot.buf);
   1787c:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
    printer_init();
   17880:	44 df       	rcall	.-376    	; 0x1770a <printer_init>
}
   17882:	ad b7       	in	r26, 0x3d	; 61
   17884:	be b7       	in	r27, 0x3e	; 62
   17886:	17 96       	adiw	r26, 0x07	; 7
   17888:	0f b6       	in	r0, 0x3f	; 63
   1788a:	f8 94       	cli
   1788c:	be bf       	out	0x3e, r27	; 62
   1788e:	0f be       	out	0x3f, r0	; 63
   17890:	ad bf       	out	0x3d, r26	; 61
   17892:	08 95       	ret

00017894 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17894:	ad e5       	ldi	r26, 0x5D	; 93
   17896:	b0 e0       	ldi	r27, 0x00	; 0
   17898:	e0 e5       	ldi	r30, 0x50	; 80
   1789a:	fc eb       	ldi	r31, 0xBC	; 188
   1789c:	0c 94 a7 e3 	jmp	0x1c74e	; 0x1c74e <__prologue_saves__+0x18>
   178a0:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   178a2:	89 2b       	or	r24, r25
   178a4:	09 f0       	breq	.+2      	; 0x178a8 <printer_open+0x14>
   178a6:	4f c0       	rjmp	.+158    	; 0x17946 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   178a8:	be 01       	movw	r22, r28
   178aa:	6e 5a       	subi	r22, 0xAE	; 174
   178ac:	7f 4f       	sbci	r23, 0xFF	; 255
   178ae:	80 e0       	ldi	r24, 0x00	; 0
   178b0:	90 e0       	ldi	r25, 0x00	; 0
   178b2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <clock_gettime>
        seconds = ts.tv_sec;
   178b6:	66 96       	adiw	r28, 0x16	; 22
   178b8:	8c ad       	ldd	r24, Y+60	; 0x3c
   178ba:	9d ad       	ldd	r25, Y+61	; 0x3d
   178bc:	ae ad       	ldd	r26, Y+62	; 0x3e
   178be:	bf ad       	ldd	r27, Y+63	; 0x3f
   178c0:	66 97       	sbiw	r28, 0x16	; 22
   178c2:	6e 96       	adiw	r28, 0x1e	; 30
   178c4:	8c af       	std	Y+60, r24	; 0x3c
   178c6:	9d af       	std	Y+61, r25	; 0x3d
   178c8:	ae af       	std	Y+62, r26	; 0x3e
   178ca:	bf af       	std	Y+63, r27	; 0x3f
   178cc:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   178ce:	ce 01       	movw	r24, r28
   178d0:	86 5a       	subi	r24, 0xA6	; 166
   178d2:	9f 4f       	sbci	r25, 0xFF	; 255
   178d4:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <gmtime>
   178d8:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   178da:	fc 01       	movw	r30, r24
   178dc:	e6 80       	ldd	r14, Z+6	; 0x06
   178de:	f7 80       	ldd	r15, Z+7	; 0x07
   178e0:	80 85       	ldd	r24, Z+8	; 0x08
   178e2:	91 85       	ldd	r25, Z+9	; 0x09
   178e4:	0e 94 9c 34 	call	0x6938	; 0x6938 <tm_mon_to_ascii>
   178e8:	f8 01       	movw	r30, r16
   178ea:	20 81       	ld	r18, Z
   178ec:	31 81       	ldd	r19, Z+1	; 0x01
   178ee:	ed b7       	in	r30, 0x3d	; 61
   178f0:	fe b7       	in	r31, 0x3e	; 62
   178f2:	31 8b       	std	Z+17, r19	; 0x11
   178f4:	20 8b       	std	Z+16, r18	; 0x10
   178f6:	f8 01       	movw	r30, r16
   178f8:	22 81       	ldd	r18, Z+2	; 0x02
   178fa:	33 81       	ldd	r19, Z+3	; 0x03
   178fc:	ed b7       	in	r30, 0x3d	; 61
   178fe:	fe b7       	in	r31, 0x3e	; 62
   17900:	37 87       	std	Z+15, r19	; 0x0f
   17902:	26 87       	std	Z+14, r18	; 0x0e
   17904:	f8 01       	movw	r30, r16
   17906:	24 81       	ldd	r18, Z+4	; 0x04
   17908:	35 81       	ldd	r19, Z+5	; 0x05
   1790a:	ed b7       	in	r30, 0x3d	; 61
   1790c:	fe b7       	in	r31, 0x3e	; 62
   1790e:	35 87       	std	Z+13, r19	; 0x0d
   17910:	24 87       	std	Z+12, r18	; 0x0c
   17912:	f8 01       	movw	r30, r16
   17914:	22 85       	ldd	r18, Z+10	; 0x0a
   17916:	33 85       	ldd	r19, Z+11	; 0x0b
   17918:	24 59       	subi	r18, 0x94	; 148
   1791a:	38 4f       	sbci	r19, 0xF8	; 248
   1791c:	ed b7       	in	r30, 0x3d	; 61
   1791e:	fe b7       	in	r31, 0x3e	; 62
   17920:	33 87       	std	Z+11, r19	; 0x0b
   17922:	22 87       	std	Z+10, r18	; 0x0a
   17924:	91 87       	std	Z+9, r25	; 0x09
   17926:	80 87       	std	Z+8, r24	; 0x08
   17928:	f7 82       	std	Z+7, r15	; 0x07
   1792a:	e6 82       	std	Z+6, r14	; 0x06
   1792c:	8b ed       	ldi	r24, 0xDB	; 219
   1792e:	9e e2       	ldi	r25, 0x2E	; 46
   17930:	a0 e0       	ldi	r26, 0x00	; 0
   17932:	83 83       	std	Z+3, r24	; 0x03
   17934:	94 83       	std	Z+4, r25	; 0x04
   17936:	a5 83       	std	Z+5, r26	; 0x05
   17938:	8e 01       	movw	r16, r28
   1793a:	0e 5e       	subi	r16, 0xEE	; 238
   1793c:	1f 4f       	sbci	r17, 0xFF	; 255
   1793e:	12 83       	std	Z+2, r17	; 0x02
   17940:	01 83       	std	Z+1, r16	; 0x01
   17942:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17946:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1794a:	85 ff       	sbrs	r24, 5
   1794c:	0c c0       	rjmp	.+24     	; 0x17966 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   1794e:	ed b7       	in	r30, 0x3d	; 61
   17950:	fe b7       	in	r31, 0x3e	; 62
   17952:	15 83       	std	Z+5, r17	; 0x05
   17954:	04 83       	std	Z+4, r16	; 0x04
   17956:	85 ec       	ldi	r24, 0xC5	; 197
   17958:	9e e2       	ldi	r25, 0x2E	; 46
   1795a:	a0 e0       	ldi	r26, 0x00	; 0
   1795c:	81 83       	std	Z+1, r24	; 0x01
   1795e:	92 83       	std	Z+2, r25	; 0x02
   17960:	a3 83       	std	Z+3, r26	; 0x03
   17962:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17966:	6c e0       	ldi	r22, 0x0C	; 12
   17968:	79 e0       	ldi	r23, 0x09	; 9
   1796a:	c8 01       	movw	r24, r16
   1796c:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   17970:	90 93 ae 1a 	sts	0x1AAE, r25	; 0x801aae <plot+0xa>
   17974:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <plot+0x9>
    if(plot.fp == NULL)
   17978:	89 2b       	or	r24, r25
   1797a:	b9 f4       	brne	.+46     	; 0x179aa <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1797c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17980:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17984:	81 72       	andi	r24, 0x21	; 33
   17986:	99 27       	eor	r25, r25
   17988:	89 2b       	or	r24, r25
   1798a:	11 f1       	breq	.+68     	; 0x179d0 <printer_open+0x13c>
        {
            perror("open failed");
   1798c:	87 ea       	ldi	r24, 0xA7	; 167
   1798e:	9d e0       	ldi	r25, 0x0D	; 13
   17990:	0e 94 81 77 	call	0xef02	; 0xef02 <perror>
            printf("exiting...\n");
   17994:	89 eb       	ldi	r24, 0xB9	; 185
   17996:	9e e2       	ldi	r25, 0x2E	; 46
   17998:	a0 e0       	ldi	r26, 0x00	; 0
   1799a:	ed b7       	in	r30, 0x3d	; 61
   1799c:	fe b7       	in	r31, 0x3e	; 62
   1799e:	81 83       	std	Z+1, r24	; 0x01
   179a0:	92 83       	std	Z+2, r25	; 0x02
   179a2:	a3 83       	std	Z+3, r26	; 0x03
   179a4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   179a8:	13 c0       	rjmp	.+38     	; 0x179d0 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   179aa:	61 e0       	ldi	r22, 0x01	; 1
   179ac:	70 e0       	ldi	r23, 0x00	; 0
   179ae:	81 e0       	ldi	r24, 0x01	; 1
   179b0:	92 e0       	ldi	r25, 0x02	; 2
   179b2:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   179b6:	90 93 b0 1a 	sts	0x1AB0, r25	; 0x801ab0 <plot+0xc>
   179ba:	80 93 af 1a 	sts	0x1AAF, r24	; 0x801aaf <plot+0xb>
    if(plot.buf == NULL)
   179be:	89 2b       	or	r24, r25
   179c0:	09 f4       	brne	.+2      	; 0x179c4 <printer_open+0x130>
        printer_close();
   179c2:	10 df       	rcall	.-480    	; 0x177e4 <printer_close>
    plot.size = 512;
   179c4:	80 e0       	ldi	r24, 0x00	; 0
   179c6:	92 e0       	ldi	r25, 0x02	; 2
   179c8:	90 93 ab 1a 	sts	0x1AAB, r25	; 0x801aab <plot+0x7>
   179cc:	80 93 aa 1a 	sts	0x1AAA, r24	; 0x801aaa <plot+0x6>
}
   179d0:	c3 5a       	subi	r28, 0xA3	; 163
   179d2:	df 4f       	sbci	r29, 0xFF	; 255
   179d4:	e6 e0       	ldi	r30, 0x06	; 6
   179d6:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

000179da <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   179da:	cf 93       	push	r28
   179dc:	df 93       	push	r29
   179de:	ad b7       	in	r26, 0x3d	; 61
   179e0:	be b7       	in	r27, 0x3e	; 62
   179e2:	17 97       	sbiw	r26, 0x07	; 7
   179e4:	0f b6       	in	r0, 0x3f	; 63
   179e6:	f8 94       	cli
   179e8:	be bf       	out	0x3e, r27	; 62
   179ea:	0f be       	out	0x3f, r0	; 63
   179ec:	ad bf       	out	0x3d, r26	; 61
   179ee:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   179f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   179f8:	81 72       	andi	r24, 0x21	; 33
   179fa:	99 27       	eor	r25, r25
   179fc:	89 2b       	or	r24, r25
   179fe:	c1 f0       	breq	.+48     	; 0x17a30 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17a00:	80 91 a4 1a 	lds	r24, 0x1AA4	; 0x801aa4 <plot>
   17a04:	30 91 a5 1a 	lds	r19, 0x1AA5	; 0x801aa5 <plot+0x1>
   17a08:	20 91 a6 1a 	lds	r18, 0x1AA6	; 0x801aa6 <plot+0x2>
   17a0c:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <plot+0x3>
   17a10:	81 11       	cpse	r24, r1
   17a12:	0e c0       	rjmp	.+28     	; 0x17a30 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17a14:	ed b7       	in	r30, 0x3d	; 61
   17a16:	fe b7       	in	r31, 0x3e	; 62
   17a18:	84 83       	std	Z+4, r24	; 0x04
   17a1a:	35 83       	std	Z+5, r19	; 0x05
   17a1c:	26 83       	std	Z+6, r18	; 0x06
   17a1e:	97 83       	std	Z+7, r25	; 0x07
   17a20:	8e e6       	ldi	r24, 0x6E	; 110
   17a22:	9e e2       	ldi	r25, 0x2E	; 46
   17a24:	a0 e0       	ldi	r26, 0x00	; 0
   17a26:	81 83       	std	Z+1, r24	; 0x01
   17a28:	92 83       	std	Z+2, r25	; 0x02
   17a2a:	a3 83       	std	Z+3, r26	; 0x03
   17a2c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17a30:	ce 01       	movw	r24, r28
   17a32:	88 27       	eor	r24, r24
   17a34:	97 7f       	andi	r25, 0xF7	; 247
   17a36:	89 2b       	or	r24, r25
   17a38:	41 f0       	breq	.+16     	; 0x17a4a <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17a3a:	75 de       	rcall	.-790    	; 0x17726 <receive_plot_flush>
   17a3c:	89 2b       	or	r24, r25
   17a3e:	09 f4       	brne	.+2      	; 0x17a42 <printer_buffer+0x68>
   17a40:	3f c0       	rjmp	.+126    	; 0x17ac0 <printer_buffer+0xe6>
            plot.error = 1;
   17a42:	81 e0       	ldi	r24, 0x01	; 1
   17a44:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <plot+0x8>
   17a48:	3b c0       	rjmp	.+118    	; 0x17ac0 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17a4a:	20 91 af 1a 	lds	r18, 0x1AAF	; 0x801aaf <plot+0xb>
   17a4e:	30 91 b0 1a 	lds	r19, 0x1AB0	; 0x801ab0 <plot+0xc>
   17a52:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <plot+0x4>
   17a56:	90 91 a9 1a 	lds	r25, 0x1AA9	; 0x801aa9 <plot+0x5>
   17a5a:	ac 01       	movw	r20, r24
   17a5c:	4f 5f       	subi	r20, 0xFF	; 255
   17a5e:	5f 4f       	sbci	r21, 0xFF	; 255
   17a60:	50 93 a9 1a 	sts	0x1AA9, r21	; 0x801aa9 <plot+0x5>
   17a64:	40 93 a8 1a 	sts	0x1AA8, r20	; 0x801aa8 <plot+0x4>
   17a68:	f9 01       	movw	r30, r18
   17a6a:	e8 0f       	add	r30, r24
   17a6c:	f9 1f       	adc	r31, r25
   17a6e:	c0 83       	st	Z, r28
        plot.count++;
   17a70:	80 91 a4 1a 	lds	r24, 0x1AA4	; 0x801aa4 <plot>
   17a74:	90 91 a5 1a 	lds	r25, 0x1AA5	; 0x801aa5 <plot+0x1>
   17a78:	a0 91 a6 1a 	lds	r26, 0x1AA6	; 0x801aa6 <plot+0x2>
   17a7c:	b0 91 a7 1a 	lds	r27, 0x1AA7	; 0x801aa7 <plot+0x3>
   17a80:	01 96       	adiw	r24, 0x01	; 1
   17a82:	a1 1d       	adc	r26, r1
   17a84:	b1 1d       	adc	r27, r1
   17a86:	80 93 a4 1a 	sts	0x1AA4, r24	; 0x801aa4 <plot>
   17a8a:	90 93 a5 1a 	sts	0x1AA5, r25	; 0x801aa5 <plot+0x1>
   17a8e:	a0 93 a6 1a 	sts	0x1AA6, r26	; 0x801aa6 <plot+0x2>
   17a92:	b0 93 a7 1a 	sts	0x1AA7, r27	; 0x801aa7 <plot+0x3>

        if(plot.ind >= plot.size)
   17a96:	20 91 a8 1a 	lds	r18, 0x1AA8	; 0x801aa8 <plot+0x4>
   17a9a:	30 91 a9 1a 	lds	r19, 0x1AA9	; 0x801aa9 <plot+0x5>
   17a9e:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <plot+0x6>
   17aa2:	90 91 ab 1a 	lds	r25, 0x1AAB	; 0x801aab <plot+0x7>
   17aa6:	28 17       	cp	r18, r24
   17aa8:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17aaa:	54 f0       	brlt	.+20     	; 0x17ac0 <printer_buffer+0xe6>
   17aac:	3c de       	rcall	.-904    	; 0x17726 <receive_plot_flush>
   17aae:	97 ff       	sbrs	r25, 7
   17ab0:	03 c0       	rjmp	.+6      	; 0x17ab8 <printer_buffer+0xde>
                plot.error = 1;
   17ab2:	81 e0       	ldi	r24, 0x01	; 1
   17ab4:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <plot+0x8>
            plot.ind  = 0;
   17ab8:	10 92 a9 1a 	sts	0x1AA9, r1	; 0x801aa9 <plot+0x5>
   17abc:	10 92 a8 1a 	sts	0x1AA8, r1	; 0x801aa8 <plot+0x4>
        }
    }
}
   17ac0:	cd b7       	in	r28, 0x3d	; 61
   17ac2:	de b7       	in	r29, 0x3e	; 62
   17ac4:	27 96       	adiw	r28, 0x07	; 7
   17ac6:	e2 e0       	ldi	r30, 0x02	; 2
   17ac8:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00017acc <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17acc:	cf 93       	push	r28
   17ace:	00 d0       	rcall	.+0      	; 0x17ad0 <PRINTER_COMMANDS+0x4>
   17ad0:	00 d0       	rcall	.+0      	; 0x17ad2 <PRINTER_COMMANDS+0x6>
   17ad2:	1f 92       	push	r1
   17ad4:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17ad6:	80 91 f7 1f 	lds	r24, 0x1FF7	; 0x801ff7 <listening>
   17ada:	90 e0       	ldi	r25, 0x00	; 0
   17adc:	0e 94 03 8c 	call	0x11806	; 0x11806 <PRINTER_is_MLA>
   17ae0:	89 2b       	or	r24, r25
   17ae2:	69 f0       	breq	.+26     	; 0x17afe <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ae4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ae8:	85 ff       	sbrs	r24, 5
   17aea:	22 c0       	rjmp	.+68     	; 0x17b30 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17aec:	8c 2f       	mov	r24, r28
   17aee:	90 e0       	ldi	r25, 0x00	; 0
   17af0:	ed b7       	in	r30, 0x3d	; 61
   17af2:	fe b7       	in	r31, 0x3e	; 62
   17af4:	95 83       	std	Z+5, r25	; 0x05
   17af6:	84 83       	std	Z+4, r24	; 0x04
   17af8:	82 e5       	ldi	r24, 0x52	; 82
   17afa:	9e e2       	ldi	r25, 0x2E	; 46
   17afc:	13 c0       	rjmp	.+38     	; 0x17b24 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17afe:	80 91 f5 1f 	lds	r24, 0x1FF5	; 0x801ff5 <talking>
   17b02:	90 e0       	ldi	r25, 0x00	; 0
   17b04:	0e 94 14 8c 	call	0x11828	; 0x11828 <PRINTER_is_MTA>
   17b08:	89 2b       	or	r24, r25
   17b0a:	91 f0       	breq	.+36     	; 0x17b30 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b10:	85 ff       	sbrs	r24, 5
   17b12:	0e c0       	rjmp	.+28     	; 0x17b30 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17b14:	8c 2f       	mov	r24, r28
   17b16:	90 e0       	ldi	r25, 0x00	; 0
   17b18:	ed b7       	in	r30, 0x3d	; 61
   17b1a:	fe b7       	in	r31, 0x3e	; 62
   17b1c:	95 83       	std	Z+5, r25	; 0x05
   17b1e:	84 83       	std	Z+4, r24	; 0x04
   17b20:	88 e3       	ldi	r24, 0x38	; 56
   17b22:	9e e2       	ldi	r25, 0x2E	; 46
   17b24:	a0 e0       	ldi	r26, 0x00	; 0
   17b26:	81 83       	std	Z+1, r24	; 0x01
   17b28:	92 83       	std	Z+2, r25	; 0x02
   17b2a:	a3 83       	std	Z+3, r26	; 0x03
   17b2c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17b30:	80 e0       	ldi	r24, 0x00	; 0
   17b32:	90 e0       	ldi	r25, 0x00	; 0
   17b34:	0f 90       	pop	r0
   17b36:	0f 90       	pop	r0
   17b38:	0f 90       	pop	r0
   17b3a:	0f 90       	pop	r0
   17b3c:	0f 90       	pop	r0
   17b3e:	cf 91       	pop	r28
   17b40:	08 95       	ret

00017b42 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17b42:	0f 93       	push	r16
   17b44:	1f 93       	push	r17
   17b46:	da 01       	movw	r26, r20
   17b48:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17b4a:	b7 fd       	sbrc	r27, 7
   17b4c:	0b c0       	rjmp	.+22     	; 0x17b64 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17b4e:	fd 01       	movw	r30, r26
   17b50:	e6 0f       	add	r30, r22
   17b52:	f7 1f       	adc	r31, r23
   17b54:	e8 0f       	add	r30, r24
   17b56:	f9 1f       	adc	r31, r25
   17b58:	00 83       	st	Z, r16
        val >>= 8;
   17b5a:	01 2f       	mov	r16, r17
   17b5c:	12 2f       	mov	r17, r18
   17b5e:	23 2f       	mov	r18, r19
   17b60:	33 27       	eor	r19, r19
   17b62:	f2 cf       	rjmp	.-28     	; 0x17b48 <V2B_MSB+0x6>
    }
}
   17b64:	1f 91       	pop	r17
   17b66:	0f 91       	pop	r16
   17b68:	08 95       	ret

00017b6a <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17b6a:	0f 93       	push	r16
   17b6c:	1f 93       	push	r17
   17b6e:	fc 01       	movw	r30, r24
   17b70:	e6 0f       	add	r30, r22
   17b72:	f7 1f       	adc	r31, r23
   17b74:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17b76:	cf 01       	movw	r24, r30
   17b78:	86 1b       	sub	r24, r22
   17b7a:	97 0b       	sbc	r25, r23
   17b7c:	84 17       	cp	r24, r20
   17b7e:	95 07       	cpc	r25, r21
   17b80:	34 f4       	brge	.+12     	; 0x17b8e <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17b82:	01 93       	st	Z+, r16
        val >>= 8;
   17b84:	01 2f       	mov	r16, r17
   17b86:	12 2f       	mov	r17, r18
   17b88:	23 2f       	mov	r18, r19
   17b8a:	33 27       	eor	r19, r19
   17b8c:	f4 cf       	rjmp	.-24     	; 0x17b76 <V2B_LSB+0xc>
    }
}
   17b8e:	1f 91       	pop	r17
   17b90:	0f 91       	pop	r16
   17b92:	08 95       	ret

00017b94 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17b94:	cf 92       	push	r12
   17b96:	df 92       	push	r13
   17b98:	ef 92       	push	r14
   17b9a:	ff 92       	push	r15
   17b9c:	fc 01       	movw	r30, r24
   17b9e:	e6 0f       	add	r30, r22
   17ba0:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17ba2:	60 e0       	ldi	r22, 0x00	; 0
   17ba4:	70 e0       	ldi	r23, 0x00	; 0
   17ba6:	cb 01       	movw	r24, r22
   17ba8:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17baa:	9f 01       	movw	r18, r30
   17bac:	2a 1b       	sub	r18, r26
   17bae:	3b 0b       	sbc	r19, r27
   17bb0:	24 17       	cp	r18, r20
   17bb2:	35 07       	cpc	r19, r21
   17bb4:	4c f4       	brge	.+18     	; 0x17bc8 <B2V_MSB+0x34>
    {
        val <<= 8;
   17bb6:	cc 24       	eor	r12, r12
   17bb8:	d6 2e       	mov	r13, r22
   17bba:	e7 2e       	mov	r14, r23
   17bbc:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17bbe:	21 91       	ld	r18, Z+
   17bc0:	c7 01       	movw	r24, r14
   17bc2:	b6 01       	movw	r22, r12
   17bc4:	62 2b       	or	r22, r18
   17bc6:	f1 cf       	rjmp	.-30     	; 0x17baa <B2V_MSB+0x16>
    }
    return(val);
}
   17bc8:	ff 90       	pop	r15
   17bca:	ef 90       	pop	r14
   17bcc:	df 90       	pop	r13
   17bce:	cf 90       	pop	r12
   17bd0:	08 95       	ret

00017bd2 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17bd2:	cf 92       	push	r12
   17bd4:	df 92       	push	r13
   17bd6:	ef 92       	push	r14
   17bd8:	ff 92       	push	r15
   17bda:	9c 01       	movw	r18, r24
   17bdc:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17bde:	60 e0       	ldi	r22, 0x00	; 0
   17be0:	70 e0       	ldi	r23, 0x00	; 0
   17be2:	cb 01       	movw	r24, r22
   17be4:	41 50       	subi	r20, 0x01	; 1
   17be6:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17be8:	57 fd       	sbrc	r21, 7
   17bea:	0e c0       	rjmp	.+28     	; 0x17c08 <B2V_LSB+0x36>
    {
        val <<= 8;
   17bec:	cc 24       	eor	r12, r12
   17bee:	d6 2e       	mov	r13, r22
   17bf0:	e7 2e       	mov	r14, r23
   17bf2:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17bf4:	fa 01       	movw	r30, r20
   17bf6:	ea 0f       	add	r30, r26
   17bf8:	fb 1f       	adc	r31, r27
   17bfa:	e2 0f       	add	r30, r18
   17bfc:	f3 1f       	adc	r31, r19
   17bfe:	e0 81       	ld	r30, Z
   17c00:	c7 01       	movw	r24, r14
   17c02:	b6 01       	movw	r22, r12
   17c04:	6e 2b       	or	r22, r30
   17c06:	ee cf       	rjmp	.-36     	; 0x17be4 <B2V_LSB+0x12>
    }
    return(val);
}
   17c08:	ff 90       	pop	r15
   17c0a:	ef 90       	pop	r14
   17c0c:	df 90       	pop	r13
   17c0e:	cf 90       	pop	r12
   17c10:	08 95       	ret

00017c12 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17c12:	cf 93       	push	r28
   17c14:	df 93       	push	r29
   17c16:	00 d0       	rcall	.+0      	; 0x17c18 <lif_help+0x6>
   17c18:	1f 92       	push	r1
   17c1a:	ec 01       	movw	r28, r24
   17c1c:	86 e1       	ldi	r24, 0x16	; 22
   17c1e:	93 e4       	ldi	r25, 0x43	; 67
   17c20:	a0 e0       	ldi	r26, 0x00	; 0
   17c22:	ed b7       	in	r30, 0x3d	; 61
   17c24:	fe b7       	in	r31, 0x3e	; 62
   17c26:	81 83       	std	Z+1, r24	; 0x01
   17c28:	92 83       	std	Z+2, r25	; 0x02
   17c2a:	a3 83       	std	Z+3, r26	; 0x03
   17c2c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17c30:	cd 2b       	or	r28, r29
   17c32:	51 f0       	breq	.+20     	; 0x17c48 <lif_help+0x36>
   17c34:	82 e5       	ldi	r24, 0x52	; 82
   17c36:	91 e4       	ldi	r25, 0x41	; 65
   17c38:	a0 e0       	ldi	r26, 0x00	; 0
   17c3a:	ed b7       	in	r30, 0x3d	; 61
   17c3c:	fe b7       	in	r31, 0x3e	; 62
   17c3e:	81 83       	std	Z+1, r24	; 0x01
   17c40:	92 83       	std	Z+2, r25	; 0x02
   17c42:	a3 83       	std	Z+3, r26	; 0x03
   17c44:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17c48:	cd b7       	in	r28, 0x3d	; 61
   17c4a:	de b7       	in	r29, 0x3e	; 62
   17c4c:	23 96       	adiw	r28, 0x03	; 3
   17c4e:	e2 e0       	ldi	r30, 0x02	; 2
   17c50:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00017c54 <lif_calloc>:
   17c54:	cf 92       	push	r12
   17c56:	df 92       	push	r13
   17c58:	ef 92       	push	r14
   17c5a:	ff 92       	push	r15
   17c5c:	cf 93       	push	r28
   17c5e:	df 93       	push	r29
   17c60:	ad b7       	in	r26, 0x3d	; 61
   17c62:	be b7       	in	r27, 0x3e	; 62
   17c64:	17 97       	sbiw	r26, 0x07	; 7
   17c66:	0f b6       	in	r0, 0x3f	; 63
   17c68:	f8 94       	cli
   17c6a:	be bf       	out	0x3e, r27	; 62
   17c6c:	0f be       	out	0x3f, r0	; 63
   17c6e:	ad bf       	out	0x3d, r26	; 61
   17c70:	6b 01       	movw	r12, r22
   17c72:	7c 01       	movw	r14, r24
   17c74:	61 e0       	ldi	r22, 0x01	; 1
   17c76:	70 e0       	ldi	r23, 0x00	; 0
   17c78:	c6 01       	movw	r24, r12
   17c7a:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <safecalloc>
   17c7e:	ec 01       	movw	r28, r24
   17c80:	89 2b       	or	r24, r25
   17c82:	71 f4       	brne	.+28     	; 0x17ca0 <lif_calloc+0x4c>
   17c84:	ed b7       	in	r30, 0x3d	; 61
   17c86:	fe b7       	in	r31, 0x3e	; 62
   17c88:	c4 82       	std	Z+4, r12	; 0x04
   17c8a:	d5 82       	std	Z+5, r13	; 0x05
   17c8c:	e6 82       	std	Z+6, r14	; 0x06
   17c8e:	f7 82       	std	Z+7, r15	; 0x07
   17c90:	88 e0       	ldi	r24, 0x08	; 8
   17c92:	91 e4       	ldi	r25, 0x41	; 65
   17c94:	a0 e0       	ldi	r26, 0x00	; 0
   17c96:	81 83       	std	Z+1, r24	; 0x01
   17c98:	92 83       	std	Z+2, r25	; 0x02
   17c9a:	a3 83       	std	Z+3, r26	; 0x03
   17c9c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17ca0:	ce 01       	movw	r24, r28
   17ca2:	ad b7       	in	r26, 0x3d	; 61
   17ca4:	be b7       	in	r27, 0x3e	; 62
   17ca6:	17 96       	adiw	r26, 0x07	; 7
   17ca8:	0f b6       	in	r0, 0x3f	; 63
   17caa:	f8 94       	cli
   17cac:	be bf       	out	0x3e, r27	; 62
   17cae:	0f be       	out	0x3f, r0	; 63
   17cb0:	ad bf       	out	0x3d, r26	; 61
   17cb2:	df 91       	pop	r29
   17cb4:	cf 91       	pop	r28
   17cb6:	ff 90       	pop	r15
   17cb8:	ef 90       	pop	r14
   17cba:	df 90       	pop	r13
   17cbc:	cf 90       	pop	r12
   17cbe:	08 95       	ret

00017cc0 <lif_free>:
   17cc0:	00 d0       	rcall	.+0      	; 0x17cc2 <lif_free+0x2>
   17cc2:	1f 92       	push	r1
   17cc4:	00 97       	sbiw	r24, 0x00	; 0
   17cc6:	59 f4       	brne	.+22     	; 0x17cde <lif_free+0x1e>
   17cc8:	80 ef       	ldi	r24, 0xF0	; 240
   17cca:	90 e4       	ldi	r25, 0x40	; 64
   17ccc:	a0 e0       	ldi	r26, 0x00	; 0
   17cce:	ed b7       	in	r30, 0x3d	; 61
   17cd0:	fe b7       	in	r31, 0x3e	; 62
   17cd2:	81 83       	std	Z+1, r24	; 0x01
   17cd4:	92 83       	std	Z+2, r25	; 0x02
   17cd6:	a3 83       	std	Z+3, r26	; 0x03
   17cd8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17cdc:	02 c0       	rjmp	.+4      	; 0x17ce2 <lif_free+0x22>
   17cde:	0e 94 10 26 	call	0x4c20	; 0x4c20 <safefree>
   17ce2:	0f 90       	pop	r0
   17ce4:	0f 90       	pop	r0
   17ce6:	0f 90       	pop	r0
   17ce8:	08 95       	ret

00017cea <lif_stralloc>:
   17cea:	0f 93       	push	r16
   17cec:	1f 93       	push	r17
   17cee:	cf 93       	push	r28
   17cf0:	df 93       	push	r29
   17cf2:	ec 01       	movw	r28, r24
   17cf4:	fc 01       	movw	r30, r24
   17cf6:	01 90       	ld	r0, Z+
   17cf8:	00 20       	and	r0, r0
   17cfa:	e9 f7       	brne	.-6      	; 0x17cf6 <lif_stralloc+0xc>
   17cfc:	bf 01       	movw	r22, r30
   17cfe:	68 1b       	sub	r22, r24
   17d00:	79 0b       	sbc	r23, r25
   17d02:	6d 5f       	subi	r22, 0xFD	; 253
   17d04:	7f 4f       	sbci	r23, 0xFF	; 255
   17d06:	07 2e       	mov	r0, r23
   17d08:	00 0c       	add	r0, r0
   17d0a:	88 0b       	sbc	r24, r24
   17d0c:	99 0b       	sbc	r25, r25
   17d0e:	a2 df       	rcall	.-188    	; 0x17c54 <lif_calloc>
   17d10:	8c 01       	movw	r16, r24
   17d12:	00 97       	sbiw	r24, 0x00	; 0
   17d14:	19 f0       	breq	.+6      	; 0x17d1c <lif_stralloc+0x32>
   17d16:	be 01       	movw	r22, r28
   17d18:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <strcpy>
   17d1c:	c8 01       	movw	r24, r16
   17d1e:	df 91       	pop	r29
   17d20:	cf 91       	pop	r28
   17d22:	1f 91       	pop	r17
   17d24:	0f 91       	pop	r16
   17d26:	08 95       	ret

00017d28 <lif_open>:
   17d28:	ef 92       	push	r14
   17d2a:	ff 92       	push	r15
   17d2c:	0f 93       	push	r16
   17d2e:	1f 93       	push	r17
   17d30:	cf 93       	push	r28
   17d32:	df 93       	push	r29
   17d34:	ad b7       	in	r26, 0x3d	; 61
   17d36:	be b7       	in	r27, 0x3e	; 62
   17d38:	17 97       	sbiw	r26, 0x07	; 7
   17d3a:	0f b6       	in	r0, 0x3f	; 63
   17d3c:	f8 94       	cli
   17d3e:	be bf       	out	0x3e, r27	; 62
   17d40:	0f be       	out	0x3f, r0	; 63
   17d42:	ad bf       	out	0x3d, r26	; 61
   17d44:	8c 01       	movw	r16, r24
   17d46:	7b 01       	movw	r14, r22
   17d48:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <fopen>
   17d4c:	ec 01       	movw	r28, r24
   17d4e:	89 2b       	or	r24, r25
   17d50:	71 f4       	brne	.+28     	; 0x17d6e <lif_open+0x46>
   17d52:	ed b7       	in	r30, 0x3d	; 61
   17d54:	fe b7       	in	r31, 0x3e	; 62
   17d56:	f7 82       	std	Z+7, r15	; 0x07
   17d58:	e6 82       	std	Z+6, r14	; 0x06
   17d5a:	15 83       	std	Z+5, r17	; 0x05
   17d5c:	04 83       	std	Z+4, r16	; 0x04
   17d5e:	8b ec       	ldi	r24, 0xCB	; 203
   17d60:	90 e4       	ldi	r25, 0x40	; 64
   17d62:	a0 e0       	ldi	r26, 0x00	; 0
   17d64:	81 83       	std	Z+1, r24	; 0x01
   17d66:	92 83       	std	Z+2, r25	; 0x02
   17d68:	a3 83       	std	Z+3, r26	; 0x03
   17d6a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17d6e:	ce 01       	movw	r24, r28
   17d70:	cd b7       	in	r28, 0x3d	; 61
   17d72:	de b7       	in	r29, 0x3e	; 62
   17d74:	27 96       	adiw	r28, 0x07	; 7
   17d76:	e6 e0       	ldi	r30, 0x06	; 6
   17d78:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00017d7c <lif_stat>:
   17d7c:	0f 93       	push	r16
   17d7e:	1f 93       	push	r17
   17d80:	cf 93       	push	r28
   17d82:	df 93       	push	r29
   17d84:	00 d0       	rcall	.+0      	; 0x17d86 <lif_stat+0xa>
   17d86:	00 d0       	rcall	.+0      	; 0x17d88 <lif_stat+0xc>
   17d88:	1f 92       	push	r1
   17d8a:	8c 01       	movw	r16, r24
   17d8c:	d6 2f       	mov	r29, r22
   17d8e:	c7 2f       	mov	r28, r23
   17d90:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <stat>
   17d94:	97 ff       	sbrs	r25, 7
   17d96:	0f c0       	rjmp	.+30     	; 0x17db6 <lif_stat+0x3a>
   17d98:	ed b7       	in	r30, 0x3d	; 61
   17d9a:	fe b7       	in	r31, 0x3e	; 62
   17d9c:	15 83       	std	Z+5, r17	; 0x05
   17d9e:	04 83       	std	Z+4, r16	; 0x04
   17da0:	82 eb       	ldi	r24, 0xB2	; 178
   17da2:	90 e4       	ldi	r25, 0x40	; 64
   17da4:	a0 e0       	ldi	r26, 0x00	; 0
   17da6:	81 83       	std	Z+1, r24	; 0x01
   17da8:	92 83       	std	Z+2, r25	; 0x02
   17daa:	a3 83       	std	Z+3, r26	; 0x03
   17dac:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17db0:	80 e0       	ldi	r24, 0x00	; 0
   17db2:	90 e0       	ldi	r25, 0x00	; 0
   17db4:	02 c0       	rjmp	.+4      	; 0x17dba <lif_stat+0x3e>
   17db6:	8d 2f       	mov	r24, r29
   17db8:	9c 2f       	mov	r25, r28
   17dba:	cd b7       	in	r28, 0x3d	; 61
   17dbc:	de b7       	in	r29, 0x3e	; 62
   17dbe:	25 96       	adiw	r28, 0x05	; 5
   17dc0:	e4 e0       	ldi	r30, 0x04	; 4
   17dc2:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00017dc6 <lif_seek_msg>:
   17dc6:	a9 e0       	ldi	r26, 0x09	; 9
   17dc8:	b0 e0       	ldi	r27, 0x00	; 0
   17dca:	e9 ee       	ldi	r30, 0xE9	; 233
   17dcc:	fe eb       	ldi	r31, 0xBE	; 190
   17dce:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
   17dd2:	ec 01       	movw	r28, r24
   17dd4:	6a 01       	movw	r12, r20
   17dd6:	7b 01       	movw	r14, r22
   17dd8:	89 01       	movw	r16, r18
   17dda:	0e 94 8f 79 	call	0xf31e	; 0xf31e <ftell>
   17dde:	6c 15       	cp	r22, r12
   17de0:	7d 05       	cpc	r23, r13
   17de2:	8e 05       	cpc	r24, r14
   17de4:	9f 05       	cpc	r25, r15
   17de6:	19 f4       	brne	.+6      	; 0x17dee <lif_seek_msg+0x28>
   17de8:	81 e0       	ldi	r24, 0x01	; 1
   17dea:	90 e0       	ldi	r25, 0x00	; 0
   17dec:	1b c0       	rjmp	.+54     	; 0x17e24 <lif_seek_msg+0x5e>
   17dee:	20 e0       	ldi	r18, 0x00	; 0
   17df0:	30 e0       	ldi	r19, 0x00	; 0
   17df2:	b7 01       	movw	r22, r14
   17df4:	a6 01       	movw	r20, r12
   17df6:	ce 01       	movw	r24, r28
   17df8:	0e 94 12 7a 	call	0xf424	; 0xf424 <fseek>
   17dfc:	97 ff       	sbrs	r25, 7
   17dfe:	f4 cf       	rjmp	.-24     	; 0x17de8 <lif_seek_msg+0x22>
   17e00:	ed b7       	in	r30, 0x3d	; 61
   17e02:	fe b7       	in	r31, 0x3e	; 62
   17e04:	c6 82       	std	Z+6, r12	; 0x06
   17e06:	d7 82       	std	Z+7, r13	; 0x07
   17e08:	e0 86       	std	Z+8, r14	; 0x08
   17e0a:	f1 86       	std	Z+9, r15	; 0x09
   17e0c:	15 83       	std	Z+5, r17	; 0x05
   17e0e:	04 83       	std	Z+4, r16	; 0x04
   17e10:	81 e9       	ldi	r24, 0x91	; 145
   17e12:	90 e4       	ldi	r25, 0x40	; 64
   17e14:	a0 e0       	ldi	r26, 0x00	; 0
   17e16:	81 83       	std	Z+1, r24	; 0x01
   17e18:	92 83       	std	Z+2, r25	; 0x02
   17e1a:	a3 83       	std	Z+3, r26	; 0x03
   17e1c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17e20:	80 e0       	ldi	r24, 0x00	; 0
   17e22:	90 e0       	ldi	r25, 0x00	; 0
   17e24:	cd b7       	in	r28, 0x3d	; 61
   17e26:	de b7       	in	r29, 0x3e	; 62
   17e28:	29 96       	adiw	r28, 0x09	; 9
   17e2a:	e8 e0       	ldi	r30, 0x08	; 8
   17e2c:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

00017e30 <lif_read>:
   17e30:	af e0       	ldi	r26, 0x0F	; 15
   17e32:	b0 e0       	ldi	r27, 0x00	; 0
   17e34:	ee e1       	ldi	r30, 0x1E	; 30
   17e36:	ff eb       	ldi	r31, 0xBF	; 191
   17e38:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   17e3c:	ec 01       	movw	r28, r24
   17e3e:	7b 01       	movw	r14, r22
   17e40:	49 01       	movw	r8, r18
   17e42:	5a 01       	movw	r10, r20
   17e44:	28 81       	ld	r18, Y
   17e46:	39 81       	ldd	r19, Y+1	; 0x01
   17e48:	b5 01       	movw	r22, r10
   17e4a:	a4 01       	movw	r20, r8
   17e4c:	8a 81       	ldd	r24, Y+2	; 0x02
   17e4e:	9b 81       	ldd	r25, Y+3	; 0x03
   17e50:	ba df       	rcall	.-140    	; 0x17dc6 <lif_seek_msg>
   17e52:	89 2b       	or	r24, r25
   17e54:	a1 f1       	breq	.+104    	; 0x17ebe <lif_read+0x8e>
   17e56:	2a 81       	ldd	r18, Y+2	; 0x02
   17e58:	3b 81       	ldd	r19, Y+3	; 0x03
   17e5a:	a8 01       	movw	r20, r16
   17e5c:	61 e0       	ldi	r22, 0x01	; 1
   17e5e:	70 e0       	ldi	r23, 0x00	; 0
   17e60:	c7 01       	movw	r24, r14
   17e62:	0e 94 a6 7a 	call	0xf54c	; 0xf54c <fread>
   17e66:	6c 01       	movw	r12, r24
   17e68:	e1 2c       	mov	r14, r1
   17e6a:	f1 2c       	mov	r15, r1
   17e6c:	b8 01       	movw	r22, r16
   17e6e:	01 2e       	mov	r0, r17
   17e70:	00 0c       	add	r0, r0
   17e72:	88 0b       	sbc	r24, r24
   17e74:	99 0b       	sbc	r25, r25
   17e76:	c6 16       	cp	r12, r22
   17e78:	d7 06       	cpc	r13, r23
   17e7a:	e8 06       	cpc	r14, r24
   17e7c:	f9 06       	cpc	r15, r25
   17e7e:	29 f1       	breq	.+74     	; 0x17eca <lif_read+0x9a>
   17e80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e84:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e88:	92 ff       	sbrs	r25, 2
   17e8a:	1d c0       	rjmp	.+58     	; 0x17ec6 <lif_read+0x96>
   17e8c:	ed b7       	in	r30, 0x3d	; 61
   17e8e:	fe b7       	in	r31, 0x3e	; 62
   17e90:	17 87       	std	Z+15, r17	; 0x0f
   17e92:	06 87       	std	Z+14, r16	; 0x0e
   17e94:	c2 86       	std	Z+10, r12	; 0x0a
   17e96:	d3 86       	std	Z+11, r13	; 0x0b
   17e98:	e4 86       	std	Z+12, r14	; 0x0c
   17e9a:	f5 86       	std	Z+13, r15	; 0x0d
   17e9c:	86 82       	std	Z+6, r8	; 0x06
   17e9e:	97 82       	std	Z+7, r9	; 0x07
   17ea0:	a0 86       	std	Z+8, r10	; 0x08
   17ea2:	b1 86       	std	Z+9, r11	; 0x09
   17ea4:	88 81       	ld	r24, Y
   17ea6:	99 81       	ldd	r25, Y+1	; 0x01
   17ea8:	95 83       	std	Z+5, r25	; 0x05
   17eaa:	84 83       	std	Z+4, r24	; 0x04
   17eac:	85 e5       	ldi	r24, 0x55	; 85
   17eae:	90 e4       	ldi	r25, 0x40	; 64
   17eb0:	a0 e0       	ldi	r26, 0x00	; 0
   17eb2:	81 83       	std	Z+1, r24	; 0x01
   17eb4:	92 83       	std	Z+2, r25	; 0x02
   17eb6:	a3 83       	std	Z+3, r26	; 0x03
   17eb8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17ebc:	04 c0       	rjmp	.+8      	; 0x17ec6 <lif_read+0x96>
   17ebe:	60 e0       	ldi	r22, 0x00	; 0
   17ec0:	70 e0       	ldi	r23, 0x00	; 0
   17ec2:	cb 01       	movw	r24, r22
   17ec4:	02 c0       	rjmp	.+4      	; 0x17eca <lif_read+0x9a>
   17ec6:	c7 01       	movw	r24, r14
   17ec8:	b6 01       	movw	r22, r12
   17eca:	cd b7       	in	r28, 0x3d	; 61
   17ecc:	de b7       	in	r29, 0x3e	; 62
   17ece:	2f 96       	adiw	r28, 0x0f	; 15
   17ed0:	ec e0       	ldi	r30, 0x0C	; 12
   17ed2:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

00017ed6 <lif_write>:
   17ed6:	8f 92       	push	r8
   17ed8:	9f 92       	push	r9
   17eda:	af 92       	push	r10
   17edc:	bf 92       	push	r11
   17ede:	ef 92       	push	r14
   17ee0:	ff 92       	push	r15
   17ee2:	0f 93       	push	r16
   17ee4:	1f 93       	push	r17
   17ee6:	cf 93       	push	r28
   17ee8:	df 93       	push	r29
   17eea:	ad b7       	in	r26, 0x3d	; 61
   17eec:	be b7       	in	r27, 0x3e	; 62
   17eee:	1d 97       	sbiw	r26, 0x0d	; 13
   17ef0:	0f b6       	in	r0, 0x3f	; 63
   17ef2:	f8 94       	cli
   17ef4:	be bf       	out	0x3e, r27	; 62
   17ef6:	0f be       	out	0x3f, r0	; 63
   17ef8:	ad bf       	out	0x3d, r26	; 61
   17efa:	7c 01       	movw	r14, r24
   17efc:	eb 01       	movw	r28, r22
   17efe:	49 01       	movw	r8, r18
   17f00:	5a 01       	movw	r10, r20
   17f02:	fc 01       	movw	r30, r24
   17f04:	20 81       	ld	r18, Z
   17f06:	31 81       	ldd	r19, Z+1	; 0x01
   17f08:	b5 01       	movw	r22, r10
   17f0a:	a4 01       	movw	r20, r8
   17f0c:	82 81       	ldd	r24, Z+2	; 0x02
   17f0e:	93 81       	ldd	r25, Z+3	; 0x03
   17f10:	5a df       	rcall	.-332    	; 0x17dc6 <lif_seek_msg>
   17f12:	00 97       	sbiw	r24, 0x00	; 0
   17f14:	81 f1       	breq	.+96     	; 0x17f76 <lif_write+0xa0>
   17f16:	f7 01       	movw	r30, r14
   17f18:	22 81       	ldd	r18, Z+2	; 0x02
   17f1a:	33 81       	ldd	r19, Z+3	; 0x03
   17f1c:	a8 01       	movw	r20, r16
   17f1e:	61 e0       	ldi	r22, 0x01	; 1
   17f20:	70 e0       	ldi	r23, 0x00	; 0
   17f22:	ce 01       	movw	r24, r28
   17f24:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <fwrite>
   17f28:	ec 01       	movw	r28, r24
   17f2a:	08 17       	cp	r16, r24
   17f2c:	19 07       	cpc	r17, r25
   17f2e:	01 f1       	breq	.+64     	; 0x17f70 <lif_write+0x9a>
   17f30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f34:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f38:	92 ff       	sbrs	r25, 2
   17f3a:	1c c0       	rjmp	.+56     	; 0x17f74 <lif_write+0x9e>
   17f3c:	ed b7       	in	r30, 0x3d	; 61
   17f3e:	fe b7       	in	r31, 0x3e	; 62
   17f40:	15 87       	std	Z+13, r17	; 0x0d
   17f42:	04 87       	std	Z+12, r16	; 0x0c
   17f44:	d3 87       	std	Z+11, r29	; 0x0b
   17f46:	c2 87       	std	Z+10, r28	; 0x0a
   17f48:	86 82       	std	Z+6, r8	; 0x06
   17f4a:	97 82       	std	Z+7, r9	; 0x07
   17f4c:	a0 86       	std	Z+8, r10	; 0x08
   17f4e:	b1 86       	std	Z+9, r11	; 0x09
   17f50:	f7 01       	movw	r30, r14
   17f52:	80 81       	ld	r24, Z
   17f54:	91 81       	ldd	r25, Z+1	; 0x01
   17f56:	ed b7       	in	r30, 0x3d	; 61
   17f58:	fe b7       	in	r31, 0x3e	; 62
   17f5a:	95 83       	std	Z+5, r25	; 0x05
   17f5c:	84 83       	std	Z+4, r24	; 0x04
   17f5e:	88 e1       	ldi	r24, 0x18	; 24
   17f60:	90 e4       	ldi	r25, 0x40	; 64
   17f62:	a0 e0       	ldi	r26, 0x00	; 0
   17f64:	81 83       	std	Z+1, r24	; 0x01
   17f66:	92 83       	std	Z+2, r25	; 0x02
   17f68:	a3 83       	std	Z+3, r26	; 0x03
   17f6a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   17f6e:	02 c0       	rjmp	.+4      	; 0x17f74 <lif_write+0x9e>
   17f70:	c8 01       	movw	r24, r16
   17f72:	01 c0       	rjmp	.+2      	; 0x17f76 <lif_write+0xa0>
   17f74:	ce 01       	movw	r24, r28
   17f76:	ad b7       	in	r26, 0x3d	; 61
   17f78:	be b7       	in	r27, 0x3e	; 62
   17f7a:	1d 96       	adiw	r26, 0x0d	; 13
   17f7c:	0f b6       	in	r0, 0x3f	; 63
   17f7e:	f8 94       	cli
   17f80:	be bf       	out	0x3e, r27	; 62
   17f82:	0f be       	out	0x3f, r0	; 63
   17f84:	ad bf       	out	0x3d, r26	; 61
   17f86:	df 91       	pop	r29
   17f88:	cf 91       	pop	r28
   17f8a:	1f 91       	pop	r17
   17f8c:	0f 91       	pop	r16
   17f8e:	ff 90       	pop	r15
   17f90:	ef 90       	pop	r14
   17f92:	bf 90       	pop	r11
   17f94:	af 90       	pop	r10
   17f96:	9f 90       	pop	r9
   17f98:	8f 90       	pop	r8
   17f9a:	08 95       	ret

00017f9c <lif_chars>:
   17f9c:	80 32       	cpi	r24, 0x20	; 32
   17f9e:	91 05       	cpc	r25, r1
   17fa0:	e1 f0       	breq	.+56     	; 0x17fda <lif_chars+0x3e>
   17fa2:	9c 01       	movw	r18, r24
   17fa4:	21 56       	subi	r18, 0x61	; 97
   17fa6:	31 09       	sbc	r19, r1
   17fa8:	2a 31       	cpi	r18, 0x1A	; 26
   17faa:	31 05       	cpc	r19, r1
   17fac:	10 f4       	brcc	.+4      	; 0x17fb2 <lif_chars+0x16>
   17fae:	80 97       	sbiw	r24, 0x20	; 32
   17fb0:	08 95       	ret
   17fb2:	9c 01       	movw	r18, r24
   17fb4:	21 54       	subi	r18, 0x41	; 65
   17fb6:	31 09       	sbc	r19, r1
   17fb8:	2a 31       	cpi	r18, 0x1A	; 26
   17fba:	31 05       	cpc	r19, r1
   17fbc:	c8 f0       	brcs	.+50     	; 0x17ff0 <lif_chars+0x54>
   17fbe:	16 16       	cp	r1, r22
   17fc0:	17 06       	cpc	r1, r23
   17fc2:	74 f4       	brge	.+28     	; 0x17fe0 <lif_chars+0x44>
   17fc4:	2f 5e       	subi	r18, 0xEF	; 239
   17fc6:	3f 4f       	sbci	r19, 0xFF	; 255
   17fc8:	2a 30       	cpi	r18, 0x0A	; 10
   17fca:	31 05       	cpc	r19, r1
   17fcc:	88 f0       	brcs	.+34     	; 0x17ff0 <lif_chars+0x54>
   17fce:	8f 35       	cpi	r24, 0x5F	; 95
   17fd0:	91 05       	cpc	r25, r1
   17fd2:	49 f0       	breq	.+18     	; 0x17fe6 <lif_chars+0x4a>
   17fd4:	8d 97       	sbiw	r24, 0x2d	; 45
   17fd6:	21 f4       	brne	.+8      	; 0x17fe0 <lif_chars+0x44>
   17fd8:	09 c0       	rjmp	.+18     	; 0x17fec <lif_chars+0x50>
   17fda:	80 e2       	ldi	r24, 0x20	; 32
   17fdc:	90 e0       	ldi	r25, 0x00	; 0
   17fde:	08 95       	ret
   17fe0:	80 e0       	ldi	r24, 0x00	; 0
   17fe2:	90 e0       	ldi	r25, 0x00	; 0
   17fe4:	08 95       	ret
   17fe6:	8f e5       	ldi	r24, 0x5F	; 95
   17fe8:	90 e0       	ldi	r25, 0x00	; 0
   17fea:	08 95       	ret
   17fec:	8d e2       	ldi	r24, 0x2D	; 45
   17fee:	90 e0       	ldi	r25, 0x00	; 0
   17ff0:	08 95       	ret

00017ff2 <lif_B2S>:
   17ff2:	a0 e0       	ldi	r26, 0x00	; 0
   17ff4:	b0 e0       	ldi	r27, 0x00	; 0
   17ff6:	ef ef       	ldi	r30, 0xFF	; 255
   17ff8:	ff eb       	ldi	r31, 0xBF	; 191
   17ffa:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   17ffe:	5c 01       	movw	r10, r24
   18000:	6b 01       	movw	r12, r22
   18002:	ea 01       	movw	r28, r20
   18004:	4c 01       	movw	r8, r24
   18006:	ee 24       	eor	r14, r14
   18008:	e3 94       	inc	r14
   1800a:	f1 2c       	mov	r15, r1
   1800c:	00 e0       	ldi	r16, 0x00	; 0
   1800e:	10 e0       	ldi	r17, 0x00	; 0
   18010:	0c 17       	cp	r16, r28
   18012:	1d 07       	cpc	r17, r29
   18014:	6c f4       	brge	.+26     	; 0x18030 <lif_B2S+0x3e>
   18016:	f4 01       	movw	r30, r8
   18018:	81 91       	ld	r24, Z+
   1801a:	4f 01       	movw	r8, r30
   1801c:	b8 01       	movw	r22, r16
   1801e:	90 e0       	ldi	r25, 0x00	; 0
   18020:	bd df       	rcall	.-134    	; 0x17f9c <lif_chars>
   18022:	89 2b       	or	r24, r25
   18024:	11 f4       	brne	.+4      	; 0x1802a <lif_B2S+0x38>
   18026:	e1 2c       	mov	r14, r1
   18028:	f1 2c       	mov	r15, r1
   1802a:	0f 5f       	subi	r16, 0xFF	; 255
   1802c:	1f 4f       	sbci	r17, 0xFF	; 255
   1802e:	f0 cf       	rjmp	.-32     	; 0x18010 <lif_B2S+0x1e>
   18030:	d6 01       	movw	r26, r12
   18032:	f5 01       	movw	r30, r10
   18034:	cf 01       	movw	r24, r30
   18036:	8a 19       	sub	r24, r10
   18038:	9b 09       	sbc	r25, r11
   1803a:	8c 17       	cp	r24, r28
   1803c:	9d 07       	cpc	r25, r29
   1803e:	1c f4       	brge	.+6      	; 0x18046 <lif_B2S+0x54>
   18040:	81 91       	ld	r24, Z+
   18042:	8d 93       	st	X+, r24
   18044:	f7 cf       	rjmp	.-18     	; 0x18034 <lif_B2S+0x42>
   18046:	d7 ff       	sbrs	r29, 7
   18048:	02 c0       	rjmp	.+4      	; 0x1804e <lif_B2S+0x5c>
   1804a:	c0 e0       	ldi	r28, 0x00	; 0
   1804c:	d0 e0       	ldi	r29, 0x00	; 0
   1804e:	cc 0d       	add	r28, r12
   18050:	dd 1d       	adc	r29, r13
   18052:	18 82       	st	Y, r1
   18054:	c6 01       	movw	r24, r12
   18056:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>
   1805a:	c7 01       	movw	r24, r14
   1805c:	cd b7       	in	r28, 0x3d	; 61
   1805e:	de b7       	in	r29, 0x3e	; 62
   18060:	ec e0       	ldi	r30, 0x0C	; 12
   18062:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

00018066 <lif_checkname>:
   18066:	ef 92       	push	r14
   18068:	ff 92       	push	r15
   1806a:	0f 93       	push	r16
   1806c:	1f 93       	push	r17
   1806e:	cf 93       	push	r28
   18070:	df 93       	push	r29
   18072:	7c 01       	movw	r14, r24
   18074:	ec 01       	movw	r28, r24
   18076:	01 e0       	ldi	r16, 0x01	; 1
   18078:	10 e0       	ldi	r17, 0x00	; 0
   1807a:	be 01       	movw	r22, r28
   1807c:	6e 19       	sub	r22, r14
   1807e:	7f 09       	sbc	r23, r15
   18080:	89 91       	ld	r24, Y+
   18082:	88 23       	and	r24, r24
   18084:	39 f0       	breq	.+14     	; 0x18094 <lif_checkname+0x2e>
   18086:	90 e0       	ldi	r25, 0x00	; 0
   18088:	89 df       	rcall	.-238    	; 0x17f9c <lif_chars>
   1808a:	89 2b       	or	r24, r25
   1808c:	b1 f7       	brne	.-20     	; 0x1807a <lif_checkname+0x14>
   1808e:	00 e0       	ldi	r16, 0x00	; 0
   18090:	10 e0       	ldi	r17, 0x00	; 0
   18092:	f3 cf       	rjmp	.-26     	; 0x1807a <lif_checkname+0x14>
   18094:	c8 01       	movw	r24, r16
   18096:	cd b7       	in	r28, 0x3d	; 61
   18098:	de b7       	in	r29, 0x3e	; 62
   1809a:	e6 e0       	ldi	r30, 0x06	; 6
   1809c:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

000180a0 <lif_S2B>:
   180a0:	fb 01       	movw	r30, r22
   180a2:	dc 01       	movw	r26, r24
   180a4:	20 e0       	ldi	r18, 0x00	; 0
   180a6:	30 e0       	ldi	r19, 0x00	; 0
   180a8:	61 91       	ld	r22, Z+
   180aa:	61 11       	cpse	r22, r1
   180ac:	05 c0       	rjmp	.+10     	; 0x180b8 <lif_S2B+0x18>
   180ae:	fc 01       	movw	r30, r24
   180b0:	e2 0f       	add	r30, r18
   180b2:	f3 1f       	adc	r31, r19
   180b4:	60 e2       	ldi	r22, 0x20	; 32
   180b6:	08 c0       	rjmp	.+16     	; 0x180c8 <lif_S2B+0x28>
   180b8:	24 17       	cp	r18, r20
   180ba:	35 07       	cpc	r19, r21
   180bc:	24 f4       	brge	.+8      	; 0x180c6 <lif_S2B+0x26>
   180be:	6d 93       	st	X+, r22
   180c0:	2f 5f       	subi	r18, 0xFF	; 255
   180c2:	3f 4f       	sbci	r19, 0xFF	; 255
   180c4:	f1 cf       	rjmp	.-30     	; 0x180a8 <lif_S2B+0x8>
   180c6:	08 95       	ret
   180c8:	9f 01       	movw	r18, r30
   180ca:	28 1b       	sub	r18, r24
   180cc:	39 0b       	sbc	r19, r25
   180ce:	24 17       	cp	r18, r20
   180d0:	35 07       	cpc	r19, r21
   180d2:	14 f4       	brge	.+4      	; 0x180d8 <lif_S2B+0x38>
   180d4:	61 93       	st	Z+, r22
   180d6:	f8 cf       	rjmp	.-16     	; 0x180c8 <lif_S2B+0x28>
   180d8:	08 95       	ret

000180da <lif_fixname>:
   180da:	a0 e0       	ldi	r26, 0x00	; 0
   180dc:	b0 e0       	ldi	r27, 0x00	; 0
   180de:	e3 e7       	ldi	r30, 0x73	; 115
   180e0:	f0 ec       	ldi	r31, 0xC0	; 192
   180e2:	0c 94 a4 e3 	jmp	0x1c748	; 0x1c748 <__prologue_saves__+0x12>
   180e6:	8c 01       	movw	r16, r24
   180e8:	cb 01       	movw	r24, r22
   180ea:	7a 01       	movw	r14, r20
   180ec:	0e 94 21 76 	call	0xec42	; 0xec42 <basename>
   180f0:	6c 01       	movw	r12, r24
   180f2:	e8 01       	movw	r28, r16
   180f4:	80 e2       	ldi	r24, 0x20	; 32
   180f6:	b8 2e       	mov	r11, r24
   180f8:	be 01       	movw	r22, r28
   180fa:	60 1b       	sub	r22, r16
   180fc:	71 0b       	sbc	r23, r17
   180fe:	f6 01       	movw	r30, r12
   18100:	81 91       	ld	r24, Z+
   18102:	6f 01       	movw	r12, r30
   18104:	81 11       	cpse	r24, r1
   18106:	02 c0       	rjmp	.+4      	; 0x1810c <lif_fixname+0x32>
   18108:	20 e2       	ldi	r18, 0x20	; 32
   1810a:	0e c0       	rjmp	.+28     	; 0x18128 <lif_fixname+0x4e>
   1810c:	1e 14       	cp	r1, r14
   1810e:	1f 04       	cpc	r1, r15
   18110:	dc f7       	brge	.-10     	; 0x18108 <lif_fixname+0x2e>
   18112:	8e 32       	cpi	r24, 0x2E	; 46
   18114:	c9 f3       	breq	.-14     	; 0x18108 <lif_fixname+0x2e>
   18116:	90 e0       	ldi	r25, 0x00	; 0
   18118:	41 df       	rcall	.-382    	; 0x17f9c <lif_chars>
   1811a:	88 23       	and	r24, r24
   1811c:	11 f0       	breq	.+4      	; 0x18122 <lif_fixname+0x48>
   1811e:	88 83       	st	Y, r24
   18120:	01 c0       	rjmp	.+2      	; 0x18124 <lif_fixname+0x4a>
   18122:	b8 82       	st	Y, r11
   18124:	21 96       	adiw	r28, 0x01	; 1
   18126:	e8 cf       	rjmp	.-48     	; 0x180f8 <lif_fixname+0x1e>
   18128:	ce 01       	movw	r24, r28
   1812a:	80 1b       	sub	r24, r16
   1812c:	91 0b       	sbc	r25, r17
   1812e:	8e 15       	cp	r24, r14
   18130:	9f 05       	cpc	r25, r15
   18132:	14 f4       	brge	.+4      	; 0x18138 <lif_fixname+0x5e>
   18134:	29 93       	st	Y+, r18
   18136:	f8 cf       	rjmp	.-16     	; 0x18128 <lif_fixname+0x4e>
   18138:	18 82       	st	Y, r1
   1813a:	f8 01       	movw	r30, r16
   1813c:	01 90       	ld	r0, Z+
   1813e:	00 20       	and	r0, r0
   18140:	e9 f7       	brne	.-6      	; 0x1813c <lif_fixname+0x62>
   18142:	cf 01       	movw	r24, r30
   18144:	01 97       	sbiw	r24, 0x01	; 1
   18146:	80 1b       	sub	r24, r16
   18148:	91 0b       	sbc	r25, r17
   1814a:	cd b7       	in	r28, 0x3d	; 61
   1814c:	de b7       	in	r29, 0x3e	; 62
   1814e:	e9 e0       	ldi	r30, 0x09	; 9
   18150:	0c 94 c0 e3 	jmp	0x1c780	; 0x1c780 <__epilogue_restores__+0x12>

00018154 <lif_vol2str>:
   18154:	ef 92       	push	r14
   18156:	ff 92       	push	r15
   18158:	0f 93       	push	r16
   1815a:	1f 93       	push	r17
   1815c:	cf 93       	push	r28
   1815e:	df 93       	push	r29
   18160:	7c 01       	movw	r14, r24
   18162:	eb 01       	movw	r28, r22
   18164:	fc 01       	movw	r30, r24
   18166:	04 a1       	ldd	r16, Z+36	; 0x24
   18168:	15 a1       	ldd	r17, Z+37	; 0x25
   1816a:	20 e0       	ldi	r18, 0x00	; 0
   1816c:	30 e0       	ldi	r19, 0x00	; 0
   1816e:	42 e0       	ldi	r20, 0x02	; 2
   18170:	50 e0       	ldi	r21, 0x00	; 0
   18172:	60 e0       	ldi	r22, 0x00	; 0
   18174:	70 e0       	ldi	r23, 0x00	; 0
   18176:	ce 01       	movw	r24, r28
   18178:	e4 dc       	rcall	.-1592   	; 0x17b42 <V2B_MSB>
   1817a:	b7 01       	movw	r22, r14
   1817c:	6a 5d       	subi	r22, 0xDA	; 218
   1817e:	7f 4f       	sbci	r23, 0xFF	; 255
   18180:	46 e0       	ldi	r20, 0x06	; 6
   18182:	50 e0       	ldi	r21, 0x00	; 0
   18184:	ce 01       	movw	r24, r28
   18186:	02 96       	adiw	r24, 0x02	; 2
   18188:	8b df       	rcall	.-234    	; 0x180a0 <lif_S2B>
   1818a:	f7 01       	movw	r30, r14
   1818c:	05 a5       	ldd	r16, Z+45	; 0x2d
   1818e:	16 a5       	ldd	r17, Z+46	; 0x2e
   18190:	27 a5       	ldd	r18, Z+47	; 0x2f
   18192:	30 a9       	ldd	r19, Z+48	; 0x30
   18194:	44 e0       	ldi	r20, 0x04	; 4
   18196:	50 e0       	ldi	r21, 0x00	; 0
   18198:	68 e0       	ldi	r22, 0x08	; 8
   1819a:	70 e0       	ldi	r23, 0x00	; 0
   1819c:	ce 01       	movw	r24, r28
   1819e:	d1 dc       	rcall	.-1630   	; 0x17b42 <V2B_MSB>
   181a0:	f7 01       	movw	r30, r14
   181a2:	01 a9       	ldd	r16, Z+49	; 0x31
   181a4:	12 a9       	ldd	r17, Z+50	; 0x32
   181a6:	20 e0       	ldi	r18, 0x00	; 0
   181a8:	30 e0       	ldi	r19, 0x00	; 0
   181aa:	42 e0       	ldi	r20, 0x02	; 2
   181ac:	50 e0       	ldi	r21, 0x00	; 0
   181ae:	6c e0       	ldi	r22, 0x0C	; 12
   181b0:	70 e0       	ldi	r23, 0x00	; 0
   181b2:	ce 01       	movw	r24, r28
   181b4:	c6 dc       	rcall	.-1652   	; 0x17b42 <V2B_MSB>
   181b6:	00 e0       	ldi	r16, 0x00	; 0
   181b8:	10 e0       	ldi	r17, 0x00	; 0
   181ba:	98 01       	movw	r18, r16
   181bc:	42 e0       	ldi	r20, 0x02	; 2
   181be:	50 e0       	ldi	r21, 0x00	; 0
   181c0:	6e e0       	ldi	r22, 0x0E	; 14
   181c2:	70 e0       	ldi	r23, 0x00	; 0
   181c4:	ce 01       	movw	r24, r28
   181c6:	bd dc       	rcall	.-1670   	; 0x17b42 <V2B_MSB>
   181c8:	f7 01       	movw	r30, r14
   181ca:	05 a9       	ldd	r16, Z+53	; 0x35
   181cc:	16 a9       	ldd	r17, Z+54	; 0x36
   181ce:	27 a9       	ldd	r18, Z+55	; 0x37
   181d0:	30 ad       	ldd	r19, Z+56	; 0x38
   181d2:	44 e0       	ldi	r20, 0x04	; 4
   181d4:	50 e0       	ldi	r21, 0x00	; 0
   181d6:	60 e1       	ldi	r22, 0x10	; 16
   181d8:	70 e0       	ldi	r23, 0x00	; 0
   181da:	ce 01       	movw	r24, r28
   181dc:	b2 dc       	rcall	.-1692   	; 0x17b42 <V2B_MSB>
   181de:	f7 01       	movw	r30, r14
   181e0:	01 ad       	ldd	r16, Z+57	; 0x39
   181e2:	12 ad       	ldd	r17, Z+58	; 0x3a
   181e4:	20 e0       	ldi	r18, 0x00	; 0
   181e6:	30 e0       	ldi	r19, 0x00	; 0
   181e8:	42 e0       	ldi	r20, 0x02	; 2
   181ea:	50 e0       	ldi	r21, 0x00	; 0
   181ec:	64 e1       	ldi	r22, 0x14	; 20
   181ee:	70 e0       	ldi	r23, 0x00	; 0
   181f0:	ce 01       	movw	r24, r28
   181f2:	a7 dc       	rcall	.-1714   	; 0x17b42 <V2B_MSB>
   181f4:	00 e0       	ldi	r16, 0x00	; 0
   181f6:	10 e0       	ldi	r17, 0x00	; 0
   181f8:	98 01       	movw	r18, r16
   181fa:	42 e0       	ldi	r20, 0x02	; 2
   181fc:	50 e0       	ldi	r21, 0x00	; 0
   181fe:	66 e1       	ldi	r22, 0x16	; 22
   18200:	70 e0       	ldi	r23, 0x00	; 0
   18202:	ce 01       	movw	r24, r28
   18204:	9e dc       	rcall	.-1732   	; 0x17b42 <V2B_MSB>
   18206:	f7 01       	movw	r30, r14
   18208:	fd 96       	adiw	r30, 0x3d	; 61
   1820a:	00 81       	ld	r16, Z
   1820c:	11 81       	ldd	r17, Z+1	; 0x01
   1820e:	22 81       	ldd	r18, Z+2	; 0x02
   18210:	33 81       	ldd	r19, Z+3	; 0x03
   18212:	44 e0       	ldi	r20, 0x04	; 4
   18214:	50 e0       	ldi	r21, 0x00	; 0
   18216:	68 e1       	ldi	r22, 0x18	; 24
   18218:	70 e0       	ldi	r23, 0x00	; 0
   1821a:	ce 01       	movw	r24, r28
   1821c:	92 dc       	rcall	.-1756   	; 0x17b42 <V2B_MSB>
   1821e:	f7 01       	movw	r30, r14
   18220:	ef 5b       	subi	r30, 0xBF	; 191
   18222:	ff 4f       	sbci	r31, 0xFF	; 255
   18224:	00 81       	ld	r16, Z
   18226:	11 81       	ldd	r17, Z+1	; 0x01
   18228:	22 81       	ldd	r18, Z+2	; 0x02
   1822a:	33 81       	ldd	r19, Z+3	; 0x03
   1822c:	44 e0       	ldi	r20, 0x04	; 4
   1822e:	50 e0       	ldi	r21, 0x00	; 0
   18230:	6c e1       	ldi	r22, 0x1C	; 28
   18232:	70 e0       	ldi	r23, 0x00	; 0
   18234:	ce 01       	movw	r24, r28
   18236:	85 dc       	rcall	.-1782   	; 0x17b42 <V2B_MSB>
   18238:	f7 01       	movw	r30, r14
   1823a:	eb 5b       	subi	r30, 0xBB	; 187
   1823c:	ff 4f       	sbci	r31, 0xFF	; 255
   1823e:	00 81       	ld	r16, Z
   18240:	11 81       	ldd	r17, Z+1	; 0x01
   18242:	22 81       	ldd	r18, Z+2	; 0x02
   18244:	33 81       	ldd	r19, Z+3	; 0x03
   18246:	44 e0       	ldi	r20, 0x04	; 4
   18248:	50 e0       	ldi	r21, 0x00	; 0
   1824a:	60 e2       	ldi	r22, 0x20	; 32
   1824c:	70 e0       	ldi	r23, 0x00	; 0
   1824e:	ce 01       	movw	r24, r28
   18250:	78 dc       	rcall	.-1808   	; 0x17b42 <V2B_MSB>
   18252:	de 01       	movw	r26, r28
   18254:	94 96       	adiw	r26, 0x24	; 36
   18256:	f7 01       	movw	r30, r14
   18258:	e7 5b       	subi	r30, 0xB7	; 183
   1825a:	ff 4f       	sbci	r31, 0xFF	; 255
   1825c:	86 e0       	ldi	r24, 0x06	; 6
   1825e:	01 90       	ld	r0, Z+
   18260:	0d 92       	st	X+, r0
   18262:	8a 95       	dec	r24
   18264:	e1 f7       	brne	.-8      	; 0x1825e <lif_vol2str+0x10a>
   18266:	cd b7       	in	r28, 0x3d	; 61
   18268:	de b7       	in	r29, 0x3e	; 62
   1826a:	e6 e0       	ldi	r30, 0x06	; 6
   1826c:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00018270 <lif_str2vol>:
   18270:	0f 93       	push	r16
   18272:	1f 93       	push	r17
   18274:	cf 93       	push	r28
   18276:	df 93       	push	r29
   18278:	8c 01       	movw	r16, r24
   1827a:	eb 01       	movw	r28, r22
   1827c:	42 e0       	ldi	r20, 0x02	; 2
   1827e:	50 e0       	ldi	r21, 0x00	; 0
   18280:	60 e0       	ldi	r22, 0x00	; 0
   18282:	70 e0       	ldi	r23, 0x00	; 0
   18284:	87 dc       	rcall	.-1778   	; 0x17b94 <B2V_MSB>
   18286:	7d a3       	std	Y+37, r23	; 0x25
   18288:	6c a3       	std	Y+36, r22	; 0x24
   1828a:	be 01       	movw	r22, r28
   1828c:	6a 5d       	subi	r22, 0xDA	; 218
   1828e:	7f 4f       	sbci	r23, 0xFF	; 255
   18290:	46 e0       	ldi	r20, 0x06	; 6
   18292:	50 e0       	ldi	r21, 0x00	; 0
   18294:	c8 01       	movw	r24, r16
   18296:	02 96       	adiw	r24, 0x02	; 2
   18298:	ac de       	rcall	.-680    	; 0x17ff2 <lif_B2S>
   1829a:	44 e0       	ldi	r20, 0x04	; 4
   1829c:	50 e0       	ldi	r21, 0x00	; 0
   1829e:	68 e0       	ldi	r22, 0x08	; 8
   182a0:	70 e0       	ldi	r23, 0x00	; 0
   182a2:	c8 01       	movw	r24, r16
   182a4:	77 dc       	rcall	.-1810   	; 0x17b94 <B2V_MSB>
   182a6:	6d a7       	std	Y+45, r22	; 0x2d
   182a8:	7e a7       	std	Y+46, r23	; 0x2e
   182aa:	8f a7       	std	Y+47, r24	; 0x2f
   182ac:	98 ab       	std	Y+48, r25	; 0x30
   182ae:	42 e0       	ldi	r20, 0x02	; 2
   182b0:	50 e0       	ldi	r21, 0x00	; 0
   182b2:	6c e0       	ldi	r22, 0x0C	; 12
   182b4:	70 e0       	ldi	r23, 0x00	; 0
   182b6:	c8 01       	movw	r24, r16
   182b8:	6d dc       	rcall	.-1830   	; 0x17b94 <B2V_MSB>
   182ba:	7a ab       	std	Y+50, r23	; 0x32
   182bc:	69 ab       	std	Y+49, r22	; 0x31
   182be:	42 e0       	ldi	r20, 0x02	; 2
   182c0:	50 e0       	ldi	r21, 0x00	; 0
   182c2:	6e e0       	ldi	r22, 0x0E	; 14
   182c4:	70 e0       	ldi	r23, 0x00	; 0
   182c6:	c8 01       	movw	r24, r16
   182c8:	65 dc       	rcall	.-1846   	; 0x17b94 <B2V_MSB>
   182ca:	7c ab       	std	Y+52, r23	; 0x34
   182cc:	6b ab       	std	Y+51, r22	; 0x33
   182ce:	44 e0       	ldi	r20, 0x04	; 4
   182d0:	50 e0       	ldi	r21, 0x00	; 0
   182d2:	60 e1       	ldi	r22, 0x10	; 16
   182d4:	70 e0       	ldi	r23, 0x00	; 0
   182d6:	c8 01       	movw	r24, r16
   182d8:	5d dc       	rcall	.-1862   	; 0x17b94 <B2V_MSB>
   182da:	6d ab       	std	Y+53, r22	; 0x35
   182dc:	7e ab       	std	Y+54, r23	; 0x36
   182de:	8f ab       	std	Y+55, r24	; 0x37
   182e0:	98 af       	std	Y+56, r25	; 0x38
   182e2:	42 e0       	ldi	r20, 0x02	; 2
   182e4:	50 e0       	ldi	r21, 0x00	; 0
   182e6:	64 e1       	ldi	r22, 0x14	; 20
   182e8:	70 e0       	ldi	r23, 0x00	; 0
   182ea:	c8 01       	movw	r24, r16
   182ec:	53 dc       	rcall	.-1882   	; 0x17b94 <B2V_MSB>
   182ee:	7a af       	std	Y+58, r23	; 0x3a
   182f0:	69 af       	std	Y+57, r22	; 0x39
   182f2:	42 e0       	ldi	r20, 0x02	; 2
   182f4:	50 e0       	ldi	r21, 0x00	; 0
   182f6:	66 e1       	ldi	r22, 0x16	; 22
   182f8:	70 e0       	ldi	r23, 0x00	; 0
   182fa:	c8 01       	movw	r24, r16
   182fc:	4b dc       	rcall	.-1898   	; 0x17b94 <B2V_MSB>
   182fe:	7c af       	std	Y+60, r23	; 0x3c
   18300:	6b af       	std	Y+59, r22	; 0x3b
   18302:	44 e0       	ldi	r20, 0x04	; 4
   18304:	50 e0       	ldi	r21, 0x00	; 0
   18306:	68 e1       	ldi	r22, 0x18	; 24
   18308:	70 e0       	ldi	r23, 0x00	; 0
   1830a:	c8 01       	movw	r24, r16
   1830c:	43 dc       	rcall	.-1914   	; 0x17b94 <B2V_MSB>
   1830e:	fe 01       	movw	r30, r28
   18310:	fd 96       	adiw	r30, 0x3d	; 61
   18312:	60 83       	st	Z, r22
   18314:	71 83       	std	Z+1, r23	; 0x01
   18316:	82 83       	std	Z+2, r24	; 0x02
   18318:	93 83       	std	Z+3, r25	; 0x03
   1831a:	44 e0       	ldi	r20, 0x04	; 4
   1831c:	50 e0       	ldi	r21, 0x00	; 0
   1831e:	6c e1       	ldi	r22, 0x1C	; 28
   18320:	70 e0       	ldi	r23, 0x00	; 0
   18322:	c8 01       	movw	r24, r16
   18324:	37 dc       	rcall	.-1938   	; 0x17b94 <B2V_MSB>
   18326:	fe 01       	movw	r30, r28
   18328:	ef 5b       	subi	r30, 0xBF	; 191
   1832a:	ff 4f       	sbci	r31, 0xFF	; 255
   1832c:	60 83       	st	Z, r22
   1832e:	71 83       	std	Z+1, r23	; 0x01
   18330:	82 83       	std	Z+2, r24	; 0x02
   18332:	93 83       	std	Z+3, r25	; 0x03
   18334:	44 e0       	ldi	r20, 0x04	; 4
   18336:	50 e0       	ldi	r21, 0x00	; 0
   18338:	60 e2       	ldi	r22, 0x20	; 32
   1833a:	70 e0       	ldi	r23, 0x00	; 0
   1833c:	c8 01       	movw	r24, r16
   1833e:	2a dc       	rcall	.-1964   	; 0x17b94 <B2V_MSB>
   18340:	fe 01       	movw	r30, r28
   18342:	eb 5b       	subi	r30, 0xBB	; 187
   18344:	ff 4f       	sbci	r31, 0xFF	; 255
   18346:	60 83       	st	Z, r22
   18348:	71 83       	std	Z+1, r23	; 0x01
   1834a:	82 83       	std	Z+2, r24	; 0x02
   1834c:	93 83       	std	Z+3, r25	; 0x03
   1834e:	de 01       	movw	r26, r28
   18350:	a7 5b       	subi	r26, 0xB7	; 183
   18352:	bf 4f       	sbci	r27, 0xFF	; 255
   18354:	f8 01       	movw	r30, r16
   18356:	b4 96       	adiw	r30, 0x24	; 36
   18358:	86 e0       	ldi	r24, 0x06	; 6
   1835a:	01 90       	ld	r0, Z+
   1835c:	0d 92       	st	X+, r0
   1835e:	8a 95       	dec	r24
   18360:	e1 f7       	brne	.-8      	; 0x1835a <lif_str2vol+0xea>
   18362:	df 91       	pop	r29
   18364:	cf 91       	pop	r28
   18366:	1f 91       	pop	r17
   18368:	0f 91       	pop	r16
   1836a:	08 95       	ret

0001836c <lif_dir2str>:
   1836c:	ef 92       	push	r14
   1836e:	ff 92       	push	r15
   18370:	0f 93       	push	r16
   18372:	1f 93       	push	r17
   18374:	cf 93       	push	r28
   18376:	df 93       	push	r29
   18378:	ec 01       	movw	r28, r24
   1837a:	7b 01       	movw	r14, r22
   1837c:	bc 01       	movw	r22, r24
   1837e:	61 5b       	subi	r22, 0xB1	; 177
   18380:	7f 4f       	sbci	r23, 0xFF	; 255
   18382:	4a e0       	ldi	r20, 0x0A	; 10
   18384:	50 e0       	ldi	r21, 0x00	; 0
   18386:	c7 01       	movw	r24, r14
   18388:	8b de       	rcall	.-746    	; 0x180a0 <lif_S2B>
   1838a:	fe 01       	movw	r30, r28
   1838c:	e6 5a       	subi	r30, 0xA6	; 166
   1838e:	ff 4f       	sbci	r31, 0xFF	; 255
   18390:	00 81       	ld	r16, Z
   18392:	11 81       	ldd	r17, Z+1	; 0x01
   18394:	20 e0       	ldi	r18, 0x00	; 0
   18396:	30 e0       	ldi	r19, 0x00	; 0
   18398:	42 e0       	ldi	r20, 0x02	; 2
   1839a:	50 e0       	ldi	r21, 0x00	; 0
   1839c:	6a e0       	ldi	r22, 0x0A	; 10
   1839e:	70 e0       	ldi	r23, 0x00	; 0
   183a0:	c7 01       	movw	r24, r14
   183a2:	cf db       	rcall	.-2146   	; 0x17b42 <V2B_MSB>
   183a4:	fe 01       	movw	r30, r28
   183a6:	e4 5a       	subi	r30, 0xA4	; 164
   183a8:	ff 4f       	sbci	r31, 0xFF	; 255
   183aa:	00 81       	ld	r16, Z
   183ac:	11 81       	ldd	r17, Z+1	; 0x01
   183ae:	22 81       	ldd	r18, Z+2	; 0x02
   183b0:	33 81       	ldd	r19, Z+3	; 0x03
   183b2:	44 e0       	ldi	r20, 0x04	; 4
   183b4:	50 e0       	ldi	r21, 0x00	; 0
   183b6:	6c e0       	ldi	r22, 0x0C	; 12
   183b8:	70 e0       	ldi	r23, 0x00	; 0
   183ba:	c7 01       	movw	r24, r14
   183bc:	c2 db       	rcall	.-2172   	; 0x17b42 <V2B_MSB>
   183be:	fe 01       	movw	r30, r28
   183c0:	e0 5a       	subi	r30, 0xA0	; 160
   183c2:	ff 4f       	sbci	r31, 0xFF	; 255
   183c4:	00 81       	ld	r16, Z
   183c6:	11 81       	ldd	r17, Z+1	; 0x01
   183c8:	22 81       	ldd	r18, Z+2	; 0x02
   183ca:	33 81       	ldd	r19, Z+3	; 0x03
   183cc:	44 e0       	ldi	r20, 0x04	; 4
   183ce:	50 e0       	ldi	r21, 0x00	; 0
   183d0:	60 e1       	ldi	r22, 0x10	; 16
   183d2:	70 e0       	ldi	r23, 0x00	; 0
   183d4:	c7 01       	movw	r24, r14
   183d6:	b5 db       	rcall	.-2198   	; 0x17b42 <V2B_MSB>
   183d8:	d7 01       	movw	r26, r14
   183da:	54 96       	adiw	r26, 0x14	; 20
   183dc:	fe 01       	movw	r30, r28
   183de:	ec 59       	subi	r30, 0x9C	; 156
   183e0:	ff 4f       	sbci	r31, 0xFF	; 255
   183e2:	86 e0       	ldi	r24, 0x06	; 6
   183e4:	01 90       	ld	r0, Z+
   183e6:	0d 92       	st	X+, r0
   183e8:	8a 95       	dec	r24
   183ea:	e1 f7       	brne	.-8      	; 0x183e4 <lif_dir2str+0x78>
   183ec:	fe 01       	movw	r30, r28
   183ee:	e6 59       	subi	r30, 0x96	; 150
   183f0:	ff 4f       	sbci	r31, 0xFF	; 255
   183f2:	00 81       	ld	r16, Z
   183f4:	11 81       	ldd	r17, Z+1	; 0x01
   183f6:	20 e0       	ldi	r18, 0x00	; 0
   183f8:	30 e0       	ldi	r19, 0x00	; 0
   183fa:	42 e0       	ldi	r20, 0x02	; 2
   183fc:	50 e0       	ldi	r21, 0x00	; 0
   183fe:	6a e1       	ldi	r22, 0x1A	; 26
   18400:	70 e0       	ldi	r23, 0x00	; 0
   18402:	c7 01       	movw	r24, r14
   18404:	9e db       	rcall	.-2244   	; 0x17b42 <V2B_MSB>
   18406:	fe 01       	movw	r30, r28
   18408:	e4 59       	subi	r30, 0x94	; 148
   1840a:	ff 4f       	sbci	r31, 0xFF	; 255
   1840c:	00 81       	ld	r16, Z
   1840e:	11 81       	ldd	r17, Z+1	; 0x01
   18410:	20 e0       	ldi	r18, 0x00	; 0
   18412:	30 e0       	ldi	r19, 0x00	; 0
   18414:	42 e0       	ldi	r20, 0x02	; 2
   18416:	50 e0       	ldi	r21, 0x00	; 0
   18418:	6c e1       	ldi	r22, 0x1C	; 28
   1841a:	70 e0       	ldi	r23, 0x00	; 0
   1841c:	c7 01       	movw	r24, r14
   1841e:	a5 db       	rcall	.-2230   	; 0x17b6a <V2B_LSB>
   18420:	c2 59       	subi	r28, 0x92	; 146
   18422:	df 4f       	sbci	r29, 0xFF	; 255
   18424:	08 81       	ld	r16, Y
   18426:	19 81       	ldd	r17, Y+1	; 0x01
   18428:	20 e0       	ldi	r18, 0x00	; 0
   1842a:	30 e0       	ldi	r19, 0x00	; 0
   1842c:	42 e0       	ldi	r20, 0x02	; 2
   1842e:	50 e0       	ldi	r21, 0x00	; 0
   18430:	6e e1       	ldi	r22, 0x1E	; 30
   18432:	70 e0       	ldi	r23, 0x00	; 0
   18434:	c7 01       	movw	r24, r14
   18436:	99 db       	rcall	.-2254   	; 0x17b6a <V2B_LSB>
   18438:	cd b7       	in	r28, 0x3d	; 61
   1843a:	de b7       	in	r29, 0x3e	; 62
   1843c:	e6 e0       	ldi	r30, 0x06	; 6
   1843e:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

00018442 <lif_str2dir>:
   18442:	0f 93       	push	r16
   18444:	1f 93       	push	r17
   18446:	cf 93       	push	r28
   18448:	df 93       	push	r29
   1844a:	8c 01       	movw	r16, r24
   1844c:	eb 01       	movw	r28, r22
   1844e:	61 5b       	subi	r22, 0xB1	; 177
   18450:	7f 4f       	sbci	r23, 0xFF	; 255
   18452:	4a e0       	ldi	r20, 0x0A	; 10
   18454:	50 e0       	ldi	r21, 0x00	; 0
   18456:	cd dd       	rcall	.-1126   	; 0x17ff2 <lif_B2S>
   18458:	42 e0       	ldi	r20, 0x02	; 2
   1845a:	50 e0       	ldi	r21, 0x00	; 0
   1845c:	6a e0       	ldi	r22, 0x0A	; 10
   1845e:	70 e0       	ldi	r23, 0x00	; 0
   18460:	c8 01       	movw	r24, r16
   18462:	98 db       	rcall	.-2256   	; 0x17b94 <B2V_MSB>
   18464:	fe 01       	movw	r30, r28
   18466:	e6 5a       	subi	r30, 0xA6	; 166
   18468:	ff 4f       	sbci	r31, 0xFF	; 255
   1846a:	71 83       	std	Z+1, r23	; 0x01
   1846c:	60 83       	st	Z, r22
   1846e:	44 e0       	ldi	r20, 0x04	; 4
   18470:	50 e0       	ldi	r21, 0x00	; 0
   18472:	6c e0       	ldi	r22, 0x0C	; 12
   18474:	70 e0       	ldi	r23, 0x00	; 0
   18476:	c8 01       	movw	r24, r16
   18478:	8d db       	rcall	.-2278   	; 0x17b94 <B2V_MSB>
   1847a:	fe 01       	movw	r30, r28
   1847c:	e4 5a       	subi	r30, 0xA4	; 164
   1847e:	ff 4f       	sbci	r31, 0xFF	; 255
   18480:	60 83       	st	Z, r22
   18482:	71 83       	std	Z+1, r23	; 0x01
   18484:	82 83       	std	Z+2, r24	; 0x02
   18486:	93 83       	std	Z+3, r25	; 0x03
   18488:	44 e0       	ldi	r20, 0x04	; 4
   1848a:	50 e0       	ldi	r21, 0x00	; 0
   1848c:	60 e1       	ldi	r22, 0x10	; 16
   1848e:	70 e0       	ldi	r23, 0x00	; 0
   18490:	c8 01       	movw	r24, r16
   18492:	80 db       	rcall	.-2304   	; 0x17b94 <B2V_MSB>
   18494:	fe 01       	movw	r30, r28
   18496:	e0 5a       	subi	r30, 0xA0	; 160
   18498:	ff 4f       	sbci	r31, 0xFF	; 255
   1849a:	60 83       	st	Z, r22
   1849c:	71 83       	std	Z+1, r23	; 0x01
   1849e:	82 83       	std	Z+2, r24	; 0x02
   184a0:	93 83       	std	Z+3, r25	; 0x03
   184a2:	de 01       	movw	r26, r28
   184a4:	ac 59       	subi	r26, 0x9C	; 156
   184a6:	bf 4f       	sbci	r27, 0xFF	; 255
   184a8:	f8 01       	movw	r30, r16
   184aa:	74 96       	adiw	r30, 0x14	; 20
   184ac:	86 e0       	ldi	r24, 0x06	; 6
   184ae:	01 90       	ld	r0, Z+
   184b0:	0d 92       	st	X+, r0
   184b2:	8a 95       	dec	r24
   184b4:	e1 f7       	brne	.-8      	; 0x184ae <lif_str2dir+0x6c>
   184b6:	42 e0       	ldi	r20, 0x02	; 2
   184b8:	50 e0       	ldi	r21, 0x00	; 0
   184ba:	6a e1       	ldi	r22, 0x1A	; 26
   184bc:	70 e0       	ldi	r23, 0x00	; 0
   184be:	c8 01       	movw	r24, r16
   184c0:	69 db       	rcall	.-2350   	; 0x17b94 <B2V_MSB>
   184c2:	fe 01       	movw	r30, r28
   184c4:	e6 59       	subi	r30, 0x96	; 150
   184c6:	ff 4f       	sbci	r31, 0xFF	; 255
   184c8:	71 83       	std	Z+1, r23	; 0x01
   184ca:	60 83       	st	Z, r22
   184cc:	42 e0       	ldi	r20, 0x02	; 2
   184ce:	50 e0       	ldi	r21, 0x00	; 0
   184d0:	6c e1       	ldi	r22, 0x1C	; 28
   184d2:	70 e0       	ldi	r23, 0x00	; 0
   184d4:	c8 01       	movw	r24, r16
   184d6:	7d db       	rcall	.-2310   	; 0x17bd2 <B2V_LSB>
   184d8:	fe 01       	movw	r30, r28
   184da:	e4 59       	subi	r30, 0x94	; 148
   184dc:	ff 4f       	sbci	r31, 0xFF	; 255
   184de:	71 83       	std	Z+1, r23	; 0x01
   184e0:	60 83       	st	Z, r22
   184e2:	42 e0       	ldi	r20, 0x02	; 2
   184e4:	50 e0       	ldi	r21, 0x00	; 0
   184e6:	6e e1       	ldi	r22, 0x1E	; 30
   184e8:	70 e0       	ldi	r23, 0x00	; 0
   184ea:	c8 01       	movw	r24, r16
   184ec:	72 db       	rcall	.-2332   	; 0x17bd2 <B2V_LSB>
   184ee:	c2 59       	subi	r28, 0x92	; 146
   184f0:	df 4f       	sbci	r29, 0xFF	; 255
   184f2:	79 83       	std	Y+1, r23	; 0x01
   184f4:	68 83       	st	Y, r22
   184f6:	df 91       	pop	r29
   184f8:	cf 91       	pop	r28
   184fa:	1f 91       	pop	r17
   184fc:	0f 91       	pop	r16
   184fe:	08 95       	ret

00018500 <lif_BIN2BCD>:
   18500:	6a e0       	ldi	r22, 0x0A	; 10
   18502:	0e 94 fb e2 	call	0x1c5f6	; 0x1c5f6 <__udivmodqi4>
   18506:	82 95       	swap	r24
   18508:	80 7f       	andi	r24, 0xF0	; 240
   1850a:	89 2b       	or	r24, r25
   1850c:	08 95       	ret

0001850e <lif_BCD2BIN>:
   1850e:	28 2f       	mov	r18, r24
   18510:	22 95       	swap	r18
   18512:	2f 70       	andi	r18, 0x0F	; 15
   18514:	8f 70       	andi	r24, 0x0F	; 15
   18516:	90 e0       	ldi	r25, 0x00	; 0
   18518:	3a e0       	ldi	r19, 0x0A	; 10
   1851a:	23 9f       	mul	r18, r19
   1851c:	80 0d       	add	r24, r0
   1851e:	91 1d       	adc	r25, r1
   18520:	11 24       	eor	r1, r1
   18522:	08 95       	ret

00018524 <lif_time2lifbcd>:
   18524:	aa e1       	ldi	r26, 0x1A	; 26
   18526:	b0 e0       	ldi	r27, 0x00	; 0
   18528:	e8 e9       	ldi	r30, 0x98	; 152
   1852a:	f2 ec       	ldi	r31, 0xC2	; 194
   1852c:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
   18530:	8b 01       	movw	r16, r22
   18532:	9c 01       	movw	r18, r24
   18534:	6f 8b       	std	Y+23, r22	; 0x17
   18536:	78 8f       	std	Y+24, r23	; 0x18
   18538:	89 8f       	std	Y+25, r24	; 0x19
   1853a:	9a 8f       	std	Y+26, r25	; 0x1a
   1853c:	67 2b       	or	r22, r23
   1853e:	68 2b       	or	r22, r24
   18540:	69 2b       	or	r22, r25
   18542:	41 f4       	brne	.+16     	; 0x18554 <lif_time2lifbcd+0x30>
   18544:	fa 01       	movw	r30, r20
   18546:	ca 01       	movw	r24, r20
   18548:	06 96       	adiw	r24, 0x06	; 6
   1854a:	11 92       	st	Z+, r1
   1854c:	e8 17       	cp	r30, r24
   1854e:	f9 07       	cpc	r31, r25
   18550:	e1 f7       	brne	.-8      	; 0x1854a <lif_time2lifbcd+0x26>
   18552:	26 c0       	rjmp	.+76     	; 0x185a0 <lif_time2lifbcd+0x7c>
   18554:	8a 01       	movw	r16, r20
   18556:	be 01       	movw	r22, r28
   18558:	6f 5f       	subi	r22, 0xFF	; 255
   1855a:	7f 4f       	sbci	r23, 0xFF	; 255
   1855c:	ce 01       	movw	r24, r28
   1855e:	47 96       	adiw	r24, 0x17	; 23
   18560:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <gmtime_r>
   18564:	8b 85       	ldd	r24, Y+11	; 0x0b
   18566:	9c 85       	ldd	r25, Y+12	; 0x0c
   18568:	64 e6       	ldi	r22, 0x64	; 100
   1856a:	70 e0       	ldi	r23, 0x00	; 0
   1856c:	0e 94 1b e3 	call	0x1c636	; 0x1c636 <__divmodhi4>
   18570:	c7 df       	rcall	.-114    	; 0x18500 <lif_BIN2BCD>
   18572:	f8 01       	movw	r30, r16
   18574:	80 83       	st	Z, r24
   18576:	89 85       	ldd	r24, Y+9	; 0x09
   18578:	8f 5f       	subi	r24, 0xFF	; 255
   1857a:	c2 df       	rcall	.-124    	; 0x18500 <lif_BIN2BCD>
   1857c:	f8 01       	movw	r30, r16
   1857e:	81 83       	std	Z+1, r24	; 0x01
   18580:	8f 81       	ldd	r24, Y+7	; 0x07
   18582:	be df       	rcall	.-132    	; 0x18500 <lif_BIN2BCD>
   18584:	f8 01       	movw	r30, r16
   18586:	82 83       	std	Z+2, r24	; 0x02
   18588:	8d 81       	ldd	r24, Y+5	; 0x05
   1858a:	ba df       	rcall	.-140    	; 0x18500 <lif_BIN2BCD>
   1858c:	f8 01       	movw	r30, r16
   1858e:	83 83       	std	Z+3, r24	; 0x03
   18590:	8b 81       	ldd	r24, Y+3	; 0x03
   18592:	b6 df       	rcall	.-148    	; 0x18500 <lif_BIN2BCD>
   18594:	f8 01       	movw	r30, r16
   18596:	84 83       	std	Z+4, r24	; 0x04
   18598:	89 81       	ldd	r24, Y+1	; 0x01
   1859a:	b2 df       	rcall	.-156    	; 0x18500 <lif_BIN2BCD>
   1859c:	f8 01       	movw	r30, r16
   1859e:	85 83       	std	Z+5, r24	; 0x05
   185a0:	6a 96       	adiw	r28, 0x1a	; 26
   185a2:	e4 e0       	ldi	r30, 0x04	; 4
   185a4:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

000185a8 <lif_lifbcd2time>:
   185a8:	a6 e1       	ldi	r26, 0x16	; 22
   185aa:	b0 e0       	ldi	r27, 0x00	; 0
   185ac:	ea ed       	ldi	r30, 0xDA	; 218
   185ae:	f2 ec       	ldi	r31, 0xC2	; 194
   185b0:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   185b4:	8c 01       	movw	r16, r24
   185b6:	7c 01       	movw	r14, r24
   185b8:	5c 01       	movw	r10, r24
   185ba:	26 e0       	ldi	r18, 0x06	; 6
   185bc:	a2 0e       	add	r10, r18
   185be:	b1 1c       	adc	r11, r1
   185c0:	cc 24       	eor	r12, r12
   185c2:	c3 94       	inc	r12
   185c4:	d1 2c       	mov	r13, r1
   185c6:	f7 01       	movw	r30, r14
   185c8:	81 91       	ld	r24, Z+
   185ca:	7f 01       	movw	r14, r30
   185cc:	a0 df       	rcall	.-192    	; 0x1850e <lif_BCD2BIN>
   185ce:	89 2b       	or	r24, r25
   185d0:	11 f0       	breq	.+4      	; 0x185d6 <lif_lifbcd2time+0x2e>
   185d2:	c1 2c       	mov	r12, r1
   185d4:	d1 2c       	mov	r13, r1
   185d6:	ea 14       	cp	r14, r10
   185d8:	fb 04       	cpc	r15, r11
   185da:	a9 f7       	brne	.-22     	; 0x185c6 <lif_lifbcd2time+0x1e>
   185dc:	c1 14       	cp	r12, r1
   185de:	d1 04       	cpc	r13, r1
   185e0:	61 f5       	brne	.+88     	; 0x1863a <lif_lifbcd2time+0x92>
   185e2:	f8 01       	movw	r30, r16
   185e4:	80 81       	ld	r24, Z
   185e6:	93 df       	rcall	.-218    	; 0x1850e <lif_BCD2BIN>
   185e8:	7c 01       	movw	r14, r24
   185ea:	f8 01       	movw	r30, r16
   185ec:	81 81       	ldd	r24, Z+1	; 0x01
   185ee:	8f df       	rcall	.-226    	; 0x1850e <lif_BCD2BIN>
   185f0:	01 97       	sbiw	r24, 0x01	; 1
   185f2:	f6 e4       	ldi	r31, 0x46	; 70
   185f4:	ef 16       	cp	r14, r31
   185f6:	f1 04       	cpc	r15, r1
   185f8:	1c f4       	brge	.+6      	; 0x18600 <lif_lifbcd2time+0x58>
   185fa:	24 e6       	ldi	r18, 0x64	; 100
   185fc:	e2 0e       	add	r14, r18
   185fe:	f1 1c       	adc	r15, r1
   18600:	fc 86       	std	Y+12, r15	; 0x0c
   18602:	eb 86       	std	Y+11, r14	; 0x0b
   18604:	9a 87       	std	Y+10, r25	; 0x0a
   18606:	89 87       	std	Y+9, r24	; 0x09
   18608:	f8 01       	movw	r30, r16
   1860a:	82 81       	ldd	r24, Z+2	; 0x02
   1860c:	80 df       	rcall	.-256    	; 0x1850e <lif_BCD2BIN>
   1860e:	98 87       	std	Y+8, r25	; 0x08
   18610:	8f 83       	std	Y+7, r24	; 0x07
   18612:	f8 01       	movw	r30, r16
   18614:	83 81       	ldd	r24, Z+3	; 0x03
   18616:	7b df       	rcall	.-266    	; 0x1850e <lif_BCD2BIN>
   18618:	9e 83       	std	Y+6, r25	; 0x06
   1861a:	8d 83       	std	Y+5, r24	; 0x05
   1861c:	f8 01       	movw	r30, r16
   1861e:	84 81       	ldd	r24, Z+4	; 0x04
   18620:	76 df       	rcall	.-276    	; 0x1850e <lif_BCD2BIN>
   18622:	9c 83       	std	Y+4, r25	; 0x04
   18624:	8b 83       	std	Y+3, r24	; 0x03
   18626:	f8 01       	movw	r30, r16
   18628:	85 81       	ldd	r24, Z+5	; 0x05
   1862a:	71 df       	rcall	.-286    	; 0x1850e <lif_BCD2BIN>
   1862c:	9a 83       	std	Y+2, r25	; 0x02
   1862e:	89 83       	std	Y+1, r24	; 0x01
   18630:	ce 01       	movw	r24, r28
   18632:	01 96       	adiw	r24, 0x01	; 1
   18634:	0e 94 7f 38 	call	0x70fe	; 0x70fe <timegm>
   18638:	03 c0       	rjmp	.+6      	; 0x18640 <lif_lifbcd2time+0x98>
   1863a:	60 e0       	ldi	r22, 0x00	; 0
   1863c:	70 e0       	ldi	r23, 0x00	; 0
   1863e:	cb 01       	movw	r24, r22
   18640:	66 96       	adiw	r28, 0x16	; 22
   18642:	ea e0       	ldi	r30, 0x0A	; 10
   18644:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

00018648 <lif_ctime_gmt>:
   18648:	a6 e1       	ldi	r26, 0x16	; 22
   1864a:	b0 e0       	ldi	r27, 0x00	; 0
   1864c:	ea e2       	ldi	r30, 0x2A	; 42
   1864e:	f3 ec       	ldi	r31, 0xC3	; 195
   18650:	0c 94 a9 e3 	jmp	0x1c752	; 0x1c752 <__prologue_saves__+0x1c>
   18654:	20 e2       	ldi	r18, 0x20	; 32
   18656:	e1 ed       	ldi	r30, 0xD1	; 209
   18658:	fa e1       	ldi	r31, 0x1A	; 26
   1865a:	df 01       	movw	r26, r30
   1865c:	1d 92       	st	X+, r1
   1865e:	2a 95       	dec	r18
   18660:	e9 f7       	brne	.-6      	; 0x1865c <lif_ctime_gmt+0x14>
   18662:	be 01       	movw	r22, r28
   18664:	6f 5f       	subi	r22, 0xFF	; 255
   18666:	7f 4f       	sbci	r23, 0xFF	; 255
   18668:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <gmtime_r>
   1866c:	61 ed       	ldi	r22, 0xD1	; 209
   1866e:	7a e1       	ldi	r23, 0x1A	; 26
   18670:	0e 94 db 3a 	call	0x75b6	; 0x75b6 <asctime_r>
   18674:	8c 01       	movw	r16, r24
   18676:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>
   1867a:	c8 01       	movw	r24, r16
   1867c:	66 96       	adiw	r28, 0x16	; 22
   1867e:	e4 e0       	ldi	r30, 0x04	; 4
   18680:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00018684 <lif_lifbcd2timestr>:
   18684:	a4 e0       	ldi	r26, 0x04	; 4
   18686:	b0 e0       	ldi	r27, 0x00	; 0
   18688:	e8 e4       	ldi	r30, 0x48	; 72
   1868a:	f3 ec       	ldi	r31, 0xC3	; 195
   1868c:	0c 94 ab e3 	jmp	0x1c756	; 0x1c756 <__prologue_saves__+0x20>
   18690:	20 e2       	ldi	r18, 0x20	; 32
   18692:	e1 eb       	ldi	r30, 0xB1	; 177
   18694:	fa e1       	ldi	r31, 0x1A	; 26
   18696:	df 01       	movw	r26, r30
   18698:	1d 92       	st	X+, r1
   1869a:	2a 95       	dec	r18
   1869c:	e9 f7       	brne	.-6      	; 0x18698 <lif_lifbcd2timestr+0x14>
   1869e:	84 df       	rcall	.-248    	; 0x185a8 <lif_lifbcd2time>
   186a0:	69 83       	std	Y+1, r22	; 0x01
   186a2:	7a 83       	std	Y+2, r23	; 0x02
   186a4:	8b 83       	std	Y+3, r24	; 0x03
   186a6:	9c 83       	std	Y+4, r25	; 0x04
   186a8:	67 2b       	or	r22, r23
   186aa:	68 2b       	or	r22, r24
   186ac:	69 2b       	or	r22, r25
   186ae:	29 f0       	breq	.+10     	; 0x186ba <lif_lifbcd2timestr+0x36>
   186b0:	ce 01       	movw	r24, r28
   186b2:	01 96       	adiw	r24, 0x01	; 1
   186b4:	c9 df       	rcall	.-110    	; 0x18648 <lif_ctime_gmt>
   186b6:	bc 01       	movw	r22, r24
   186b8:	02 c0       	rjmp	.+4      	; 0x186be <lif_lifbcd2timestr+0x3a>
   186ba:	64 ef       	ldi	r22, 0xF4	; 244
   186bc:	75 e1       	ldi	r23, 0x15	; 21
   186be:	81 eb       	ldi	r24, 0xB1	; 177
   186c0:	9a e1       	ldi	r25, 0x1A	; 26
   186c2:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <strcpy>
   186c6:	81 eb       	ldi	r24, 0xB1	; 177
   186c8:	9a e1       	ldi	r25, 0x1A	; 26
   186ca:	24 96       	adiw	r28, 0x04	; 4
   186cc:	e2 e0       	ldi	r30, 0x02	; 2
   186ce:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

000186d2 <lif_image_clear>:
   186d2:	20 e7       	ldi	r18, 0x70	; 112
   186d4:	fc 01       	movw	r30, r24
   186d6:	11 92       	st	Z+, r1
   186d8:	2a 95       	dec	r18
   186da:	e9 f7       	brne	.-6      	; 0x186d6 <lif_image_clear+0x4>
   186dc:	08 95       	ret

000186de <lif_dir_clear>:
   186de:	81 5b       	subi	r24, 0xB1	; 177
   186e0:	9f 4f       	sbci	r25, 0xFF	; 255
   186e2:	21 e2       	ldi	r18, 0x21	; 33
   186e4:	fc 01       	movw	r30, r24
   186e6:	11 92       	st	Z+, r1
   186e8:	2a 95       	dec	r18
   186ea:	e9 f7       	brne	.-6      	; 0x186e6 <lif_dir_clear+0x8>
   186ec:	08 95       	ret

000186ee <lif_vol_clear>:
   186ee:	84 96       	adiw	r24, 0x24	; 36
   186f0:	2b e2       	ldi	r18, 0x2B	; 43
   186f2:	fc 01       	movw	r30, r24
   186f4:	11 92       	st	Z+, r1
   186f6:	2a 95       	dec	r18
   186f8:	e9 f7       	brne	.-6      	; 0x186f4 <lif_vol_clear+0x6>
   186fa:	08 95       	ret

000186fc <lif_dump_vol>:
   186fc:	cf 93       	push	r28
   186fe:	df 93       	push	r29
   18700:	ad b7       	in	r26, 0x3d	; 61
   18702:	be b7       	in	r27, 0x3e	; 62
   18704:	17 97       	sbiw	r26, 0x07	; 7
   18706:	0f b6       	in	r0, 0x3f	; 63
   18708:	f8 94       	cli
   1870a:	be bf       	out	0x3e, r27	; 62
   1870c:	0f be       	out	0x3f, r0	; 63
   1870e:	ad bf       	out	0x3d, r26	; 61
   18710:	ec 01       	movw	r28, r24
   18712:	ed b7       	in	r30, 0x3d	; 61
   18714:	fe b7       	in	r31, 0x3e	; 62
   18716:	75 83       	std	Z+5, r23	; 0x05
   18718:	64 83       	std	Z+4, r22	; 0x04
   1871a:	83 e1       	ldi	r24, 0x13	; 19
   1871c:	90 e4       	ldi	r25, 0x40	; 64
   1871e:	a0 e0       	ldi	r26, 0x00	; 0
   18720:	81 83       	std	Z+1, r24	; 0x01
   18722:	92 83       	std	Z+2, r25	; 0x02
   18724:	a3 83       	std	Z+3, r26	; 0x03
   18726:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1872a:	88 81       	ld	r24, Y
   1872c:	99 81       	ldd	r25, Y+1	; 0x01
   1872e:	ed b7       	in	r30, 0x3d	; 61
   18730:	fe b7       	in	r31, 0x3e	; 62
   18732:	95 83       	std	Z+5, r25	; 0x05
   18734:	84 83       	std	Z+4, r24	; 0x04
   18736:	89 ef       	ldi	r24, 0xF9	; 249
   18738:	9f e3       	ldi	r25, 0x3F	; 63
   1873a:	a0 e0       	ldi	r26, 0x00	; 0
   1873c:	81 83       	std	Z+1, r24	; 0x01
   1873e:	92 83       	std	Z+2, r25	; 0x02
   18740:	a3 83       	std	Z+3, r26	; 0x03
   18742:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18746:	8c 81       	ldd	r24, Y+4	; 0x04
   18748:	9d 81       	ldd	r25, Y+5	; 0x05
   1874a:	ae 81       	ldd	r26, Y+6	; 0x06
   1874c:	bf 81       	ldd	r27, Y+7	; 0x07
   1874e:	ed b7       	in	r30, 0x3d	; 61
   18750:	fe b7       	in	r31, 0x3e	; 62
   18752:	84 83       	std	Z+4, r24	; 0x04
   18754:	95 83       	std	Z+5, r25	; 0x05
   18756:	a6 83       	std	Z+6, r26	; 0x06
   18758:	b7 83       	std	Z+7, r27	; 0x07
   1875a:	8c ed       	ldi	r24, 0xDC	; 220
   1875c:	9f e3       	ldi	r25, 0x3F	; 63
   1875e:	a0 e0       	ldi	r26, 0x00	; 0
   18760:	81 83       	std	Z+1, r24	; 0x01
   18762:	92 83       	std	Z+2, r25	; 0x02
   18764:	a3 83       	std	Z+3, r26	; 0x03
   18766:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1876a:	88 85       	ldd	r24, Y+8	; 0x08
   1876c:	99 85       	ldd	r25, Y+9	; 0x09
   1876e:	aa 85       	ldd	r26, Y+10	; 0x0a
   18770:	bb 85       	ldd	r27, Y+11	; 0x0b
   18772:	ed b7       	in	r30, 0x3d	; 61
   18774:	fe b7       	in	r31, 0x3e	; 62
   18776:	84 83       	std	Z+4, r24	; 0x04
   18778:	95 83       	std	Z+5, r25	; 0x05
   1877a:	a6 83       	std	Z+6, r26	; 0x06
   1877c:	b7 83       	std	Z+7, r27	; 0x07
   1877e:	8f eb       	ldi	r24, 0xBF	; 191
   18780:	9f e3       	ldi	r25, 0x3F	; 63
   18782:	a0 e0       	ldi	r26, 0x00	; 0
   18784:	81 83       	std	Z+1, r24	; 0x01
   18786:	92 83       	std	Z+2, r25	; 0x02
   18788:	a3 83       	std	Z+3, r26	; 0x03
   1878a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1878e:	8c 85       	ldd	r24, Y+12	; 0x0c
   18790:	9d 85       	ldd	r25, Y+13	; 0x0d
   18792:	ae 85       	ldd	r26, Y+14	; 0x0e
   18794:	bf 85       	ldd	r27, Y+15	; 0x0f
   18796:	ed b7       	in	r30, 0x3d	; 61
   18798:	fe b7       	in	r31, 0x3e	; 62
   1879a:	84 83       	std	Z+4, r24	; 0x04
   1879c:	95 83       	std	Z+5, r25	; 0x05
   1879e:	a6 83       	std	Z+6, r26	; 0x06
   187a0:	b7 83       	std	Z+7, r27	; 0x07
   187a2:	82 ea       	ldi	r24, 0xA2	; 162
   187a4:	9f e3       	ldi	r25, 0x3F	; 63
   187a6:	a0 e0       	ldi	r26, 0x00	; 0
   187a8:	81 83       	std	Z+1, r24	; 0x01
   187aa:	92 83       	std	Z+2, r25	; 0x02
   187ac:	a3 83       	std	Z+3, r26	; 0x03
   187ae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   187b2:	88 89       	ldd	r24, Y+16	; 0x10
   187b4:	99 89       	ldd	r25, Y+17	; 0x11
   187b6:	aa 89       	ldd	r26, Y+18	; 0x12
   187b8:	bb 89       	ldd	r27, Y+19	; 0x13
   187ba:	ed b7       	in	r30, 0x3d	; 61
   187bc:	fe b7       	in	r31, 0x3e	; 62
   187be:	84 83       	std	Z+4, r24	; 0x04
   187c0:	95 83       	std	Z+5, r25	; 0x05
   187c2:	a6 83       	std	Z+6, r26	; 0x06
   187c4:	b7 83       	std	Z+7, r27	; 0x07
   187c6:	85 e8       	ldi	r24, 0x85	; 133
   187c8:	9f e3       	ldi	r25, 0x3F	; 63
   187ca:	a0 e0       	ldi	r26, 0x00	; 0
   187cc:	81 83       	std	Z+1, r24	; 0x01
   187ce:	92 83       	std	Z+2, r25	; 0x02
   187d0:	a3 83       	std	Z+3, r26	; 0x03
   187d2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   187d6:	8c 89       	ldd	r24, Y+20	; 0x14
   187d8:	9d 89       	ldd	r25, Y+21	; 0x15
   187da:	ae 89       	ldd	r26, Y+22	; 0x16
   187dc:	bf 89       	ldd	r27, Y+23	; 0x17
   187de:	ed b7       	in	r30, 0x3d	; 61
   187e0:	fe b7       	in	r31, 0x3e	; 62
   187e2:	84 83       	std	Z+4, r24	; 0x04
   187e4:	95 83       	std	Z+5, r25	; 0x05
   187e6:	a6 83       	std	Z+6, r26	; 0x06
   187e8:	b7 83       	std	Z+7, r27	; 0x07
   187ea:	88 e6       	ldi	r24, 0x68	; 104
   187ec:	9f e3       	ldi	r25, 0x3F	; 63
   187ee:	a0 e0       	ldi	r26, 0x00	; 0
   187f0:	81 83       	std	Z+1, r24	; 0x01
   187f2:	92 83       	std	Z+2, r25	; 0x02
   187f4:	a3 83       	std	Z+3, r26	; 0x03
   187f6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   187fa:	88 8d       	ldd	r24, Y+24	; 0x18
   187fc:	99 8d       	ldd	r25, Y+25	; 0x19
   187fe:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18800:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18802:	ed b7       	in	r30, 0x3d	; 61
   18804:	fe b7       	in	r31, 0x3e	; 62
   18806:	84 83       	std	Z+4, r24	; 0x04
   18808:	95 83       	std	Z+5, r25	; 0x05
   1880a:	a6 83       	std	Z+6, r26	; 0x06
   1880c:	b7 83       	std	Z+7, r27	; 0x07
   1880e:	8b e4       	ldi	r24, 0x4B	; 75
   18810:	9f e3       	ldi	r25, 0x3F	; 63
   18812:	a0 e0       	ldi	r26, 0x00	; 0
   18814:	81 83       	std	Z+1, r24	; 0x01
   18816:	92 83       	std	Z+2, r25	; 0x02
   18818:	a3 83       	std	Z+3, r26	; 0x03
   1881a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1881e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18820:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18822:	09 2e       	mov	r0, r25
   18824:	00 0c       	add	r0, r0
   18826:	aa 0b       	sbc	r26, r26
   18828:	bb 0b       	sbc	r27, r27
   1882a:	ed b7       	in	r30, 0x3d	; 61
   1882c:	fe b7       	in	r31, 0x3e	; 62
   1882e:	84 83       	std	Z+4, r24	; 0x04
   18830:	95 83       	std	Z+5, r25	; 0x05
   18832:	a6 83       	std	Z+6, r26	; 0x06
   18834:	b7 83       	std	Z+7, r27	; 0x07
   18836:	8e e2       	ldi	r24, 0x2E	; 46
   18838:	9f e3       	ldi	r25, 0x3F	; 63
   1883a:	a0 e0       	ldi	r26, 0x00	; 0
   1883c:	81 83       	std	Z+1, r24	; 0x01
   1883e:	92 83       	std	Z+2, r25	; 0x02
   18840:	a3 83       	std	Z+3, r26	; 0x03
   18842:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18846:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18848:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1884a:	09 2e       	mov	r0, r25
   1884c:	00 0c       	add	r0, r0
   1884e:	aa 0b       	sbc	r26, r26
   18850:	bb 0b       	sbc	r27, r27
   18852:	ed b7       	in	r30, 0x3d	; 61
   18854:	fe b7       	in	r31, 0x3e	; 62
   18856:	84 83       	std	Z+4, r24	; 0x04
   18858:	95 83       	std	Z+5, r25	; 0x05
   1885a:	a6 83       	std	Z+6, r26	; 0x06
   1885c:	b7 83       	std	Z+7, r27	; 0x07
   1885e:	81 e1       	ldi	r24, 0x11	; 17
   18860:	9f e3       	ldi	r25, 0x3F	; 63
   18862:	a0 e0       	ldi	r26, 0x00	; 0
   18864:	81 83       	std	Z+1, r24	; 0x01
   18866:	92 83       	std	Z+2, r25	; 0x02
   18868:	a3 83       	std	Z+3, r26	; 0x03
   1886a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1886e:	ce 01       	movw	r24, r28
   18870:	86 96       	adiw	r24, 0x26	; 38
   18872:	ed b7       	in	r30, 0x3d	; 61
   18874:	fe b7       	in	r31, 0x3e	; 62
   18876:	95 83       	std	Z+5, r25	; 0x05
   18878:	84 83       	std	Z+4, r24	; 0x04
   1887a:	87 ef       	ldi	r24, 0xF7	; 247
   1887c:	9e e3       	ldi	r25, 0x3E	; 62
   1887e:	a0 e0       	ldi	r26, 0x00	; 0
   18880:	81 83       	std	Z+1, r24	; 0x01
   18882:	92 83       	std	Z+2, r25	; 0x02
   18884:	a3 83       	std	Z+3, r26	; 0x03
   18886:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1888a:	8c a1       	ldd	r24, Y+36	; 0x24
   1888c:	9d a1       	ldd	r25, Y+37	; 0x25
   1888e:	ed b7       	in	r30, 0x3d	; 61
   18890:	fe b7       	in	r31, 0x3e	; 62
   18892:	95 83       	std	Z+5, r25	; 0x05
   18894:	84 83       	std	Z+4, r24	; 0x04
   18896:	8b ed       	ldi	r24, 0xDB	; 219
   18898:	9e e3       	ldi	r25, 0x3E	; 62
   1889a:	a0 e0       	ldi	r26, 0x00	; 0
   1889c:	81 83       	std	Z+1, r24	; 0x01
   1889e:	92 83       	std	Z+2, r25	; 0x02
   188a0:	a3 83       	std	Z+3, r26	; 0x03
   188a2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   188a6:	8d a5       	ldd	r24, Y+45	; 0x2d
   188a8:	9e a5       	ldd	r25, Y+46	; 0x2e
   188aa:	af a5       	ldd	r26, Y+47	; 0x2f
   188ac:	b8 a9       	ldd	r27, Y+48	; 0x30
   188ae:	ed b7       	in	r30, 0x3d	; 61
   188b0:	fe b7       	in	r31, 0x3e	; 62
   188b2:	84 83       	std	Z+4, r24	; 0x04
   188b4:	95 83       	std	Z+5, r25	; 0x05
   188b6:	a6 83       	std	Z+6, r26	; 0x06
   188b8:	b7 83       	std	Z+7, r27	; 0x07
   188ba:	8e eb       	ldi	r24, 0xBE	; 190
   188bc:	9e e3       	ldi	r25, 0x3E	; 62
   188be:	a0 e0       	ldi	r26, 0x00	; 0
   188c0:	81 83       	std	Z+1, r24	; 0x01
   188c2:	92 83       	std	Z+2, r25	; 0x02
   188c4:	a3 83       	std	Z+3, r26	; 0x03
   188c6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   188ca:	8d a9       	ldd	r24, Y+53	; 0x35
   188cc:	9e a9       	ldd	r25, Y+54	; 0x36
   188ce:	af a9       	ldd	r26, Y+55	; 0x37
   188d0:	b8 ad       	ldd	r27, Y+56	; 0x38
   188d2:	ed b7       	in	r30, 0x3d	; 61
   188d4:	fe b7       	in	r31, 0x3e	; 62
   188d6:	84 83       	std	Z+4, r24	; 0x04
   188d8:	95 83       	std	Z+5, r25	; 0x05
   188da:	a6 83       	std	Z+6, r26	; 0x06
   188dc:	b7 83       	std	Z+7, r27	; 0x07
   188de:	81 ea       	ldi	r24, 0xA1	; 161
   188e0:	9e e3       	ldi	r25, 0x3E	; 62
   188e2:	a0 e0       	ldi	r26, 0x00	; 0
   188e4:	81 83       	std	Z+1, r24	; 0x01
   188e6:	92 83       	std	Z+2, r25	; 0x02
   188e8:	a3 83       	std	Z+3, r26	; 0x03
   188ea:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   188ee:	89 a9       	ldd	r24, Y+49	; 0x31
   188f0:	9a a9       	ldd	r25, Y+50	; 0x32
   188f2:	ed b7       	in	r30, 0x3d	; 61
   188f4:	fe b7       	in	r31, 0x3e	; 62
   188f6:	95 83       	std	Z+5, r25	; 0x05
   188f8:	84 83       	std	Z+4, r24	; 0x04
   188fa:	85 e8       	ldi	r24, 0x85	; 133
   188fc:	9e e3       	ldi	r25, 0x3E	; 62
   188fe:	a0 e0       	ldi	r26, 0x00	; 0
   18900:	81 83       	std	Z+1, r24	; 0x01
   18902:	92 83       	std	Z+2, r25	; 0x02
   18904:	a3 83       	std	Z+3, r26	; 0x03
   18906:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1890a:	89 ad       	ldd	r24, Y+57	; 0x39
   1890c:	9a ad       	ldd	r25, Y+58	; 0x3a
   1890e:	ed b7       	in	r30, 0x3d	; 61
   18910:	fe b7       	in	r31, 0x3e	; 62
   18912:	95 83       	std	Z+5, r25	; 0x05
   18914:	84 83       	std	Z+4, r24	; 0x04
   18916:	89 e6       	ldi	r24, 0x69	; 105
   18918:	9e e3       	ldi	r25, 0x3E	; 62
   1891a:	a0 e0       	ldi	r26, 0x00	; 0
   1891c:	81 83       	std	Z+1, r24	; 0x01
   1891e:	92 83       	std	Z+2, r25	; 0x02
   18920:	a3 83       	std	Z+3, r26	; 0x03
   18922:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18926:	ce 01       	movw	r24, r28
   18928:	87 5b       	subi	r24, 0xB7	; 183
   1892a:	9f 4f       	sbci	r25, 0xFF	; 255
   1892c:	ab de       	rcall	.-682    	; 0x18684 <lif_lifbcd2timestr>
   1892e:	ed b7       	in	r30, 0x3d	; 61
   18930:	fe b7       	in	r31, 0x3e	; 62
   18932:	95 83       	std	Z+5, r25	; 0x05
   18934:	84 83       	std	Z+4, r24	; 0x04
   18936:	8f e4       	ldi	r24, 0x4F	; 79
   18938:	9e e3       	ldi	r25, 0x3E	; 62
   1893a:	a0 e0       	ldi	r26, 0x00	; 0
   1893c:	81 83       	std	Z+1, r24	; 0x01
   1893e:	92 83       	std	Z+2, r25	; 0x02
   18940:	a3 83       	std	Z+3, r26	; 0x03
   18942:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18946:	ce 01       	movw	r24, r28
   18948:	81 5b       	subi	r24, 0xB1	; 177
   1894a:	9f 4f       	sbci	r25, 0xFF	; 255
   1894c:	ed b7       	in	r30, 0x3d	; 61
   1894e:	fe b7       	in	r31, 0x3e	; 62
   18950:	95 83       	std	Z+5, r25	; 0x05
   18952:	84 83       	std	Z+4, r24	; 0x04
   18954:	85 e3       	ldi	r24, 0x35	; 53
   18956:	9e e3       	ldi	r25, 0x3E	; 62
   18958:	a0 e0       	ldi	r26, 0x00	; 0
   1895a:	81 83       	std	Z+1, r24	; 0x01
   1895c:	92 83       	std	Z+2, r25	; 0x02
   1895e:	a3 83       	std	Z+3, r26	; 0x03
   18960:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18964:	fe 01       	movw	r30, r28
   18966:	e6 5a       	subi	r30, 0xA6	; 166
   18968:	ff 4f       	sbci	r31, 0xFF	; 255
   1896a:	80 81       	ld	r24, Z
   1896c:	91 81       	ldd	r25, Z+1	; 0x01
   1896e:	ed b7       	in	r30, 0x3d	; 61
   18970:	fe b7       	in	r31, 0x3e	; 62
   18972:	95 83       	std	Z+5, r25	; 0x05
   18974:	84 83       	std	Z+4, r24	; 0x04
   18976:	89 e1       	ldi	r24, 0x19	; 25
   18978:	9e e3       	ldi	r25, 0x3E	; 62
   1897a:	a0 e0       	ldi	r26, 0x00	; 0
   1897c:	81 83       	std	Z+1, r24	; 0x01
   1897e:	92 83       	std	Z+2, r25	; 0x02
   18980:	a3 83       	std	Z+3, r26	; 0x03
   18982:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18986:	fe 01       	movw	r30, r28
   18988:	e6 59       	subi	r30, 0x96	; 150
   1898a:	ff 4f       	sbci	r31, 0xFF	; 255
   1898c:	80 81       	ld	r24, Z
   1898e:	91 81       	ldd	r25, Z+1	; 0x01
   18990:	ed b7       	in	r30, 0x3d	; 61
   18992:	fe b7       	in	r31, 0x3e	; 62
   18994:	95 83       	std	Z+5, r25	; 0x05
   18996:	84 83       	std	Z+4, r24	; 0x04
   18998:	8d ef       	ldi	r24, 0xFD	; 253
   1899a:	9d e3       	ldi	r25, 0x3D	; 61
   1899c:	a0 e0       	ldi	r26, 0x00	; 0
   1899e:	81 83       	std	Z+1, r24	; 0x01
   189a0:	92 83       	std	Z+2, r25	; 0x02
   189a2:	a3 83       	std	Z+3, r26	; 0x03
   189a4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   189a8:	fe 01       	movw	r30, r28
   189aa:	e4 5a       	subi	r30, 0xA4	; 164
   189ac:	ff 4f       	sbci	r31, 0xFF	; 255
   189ae:	80 81       	ld	r24, Z
   189b0:	91 81       	ldd	r25, Z+1	; 0x01
   189b2:	a2 81       	ldd	r26, Z+2	; 0x02
   189b4:	b3 81       	ldd	r27, Z+3	; 0x03
   189b6:	ed b7       	in	r30, 0x3d	; 61
   189b8:	fe b7       	in	r31, 0x3e	; 62
   189ba:	84 83       	std	Z+4, r24	; 0x04
   189bc:	95 83       	std	Z+5, r25	; 0x05
   189be:	a6 83       	std	Z+6, r26	; 0x06
   189c0:	b7 83       	std	Z+7, r27	; 0x07
   189c2:	80 ee       	ldi	r24, 0xE0	; 224
   189c4:	9d e3       	ldi	r25, 0x3D	; 61
   189c6:	a0 e0       	ldi	r26, 0x00	; 0
   189c8:	81 83       	std	Z+1, r24	; 0x01
   189ca:	92 83       	std	Z+2, r25	; 0x02
   189cc:	a3 83       	std	Z+3, r26	; 0x03
   189ce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   189d2:	fe 01       	movw	r30, r28
   189d4:	e0 5a       	subi	r30, 0xA0	; 160
   189d6:	ff 4f       	sbci	r31, 0xFF	; 255
   189d8:	80 81       	ld	r24, Z
   189da:	91 81       	ldd	r25, Z+1	; 0x01
   189dc:	a2 81       	ldd	r26, Z+2	; 0x02
   189de:	b3 81       	ldd	r27, Z+3	; 0x03
   189e0:	ed b7       	in	r30, 0x3d	; 61
   189e2:	fe b7       	in	r31, 0x3e	; 62
   189e4:	84 83       	std	Z+4, r24	; 0x04
   189e6:	95 83       	std	Z+5, r25	; 0x05
   189e8:	a6 83       	std	Z+6, r26	; 0x06
   189ea:	b7 83       	std	Z+7, r27	; 0x07
   189ec:	83 ec       	ldi	r24, 0xC3	; 195
   189ee:	9d e3       	ldi	r25, 0x3D	; 61
   189f0:	a0 e0       	ldi	r26, 0x00	; 0
   189f2:	81 83       	std	Z+1, r24	; 0x01
   189f4:	92 83       	std	Z+2, r25	; 0x02
   189f6:	a3 83       	std	Z+3, r26	; 0x03
   189f8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   189fc:	fe 01       	movw	r30, r28
   189fe:	e4 59       	subi	r30, 0x94	; 148
   18a00:	ff 4f       	sbci	r31, 0xFF	; 255
   18a02:	80 81       	ld	r24, Z
   18a04:	91 81       	ldd	r25, Z+1	; 0x01
   18a06:	a0 e0       	ldi	r26, 0x00	; 0
   18a08:	b0 e0       	ldi	r27, 0x00	; 0
   18a0a:	ed b7       	in	r30, 0x3d	; 61
   18a0c:	fe b7       	in	r31, 0x3e	; 62
   18a0e:	84 83       	std	Z+4, r24	; 0x04
   18a10:	95 83       	std	Z+5, r25	; 0x05
   18a12:	a6 83       	std	Z+6, r26	; 0x06
   18a14:	b7 83       	std	Z+7, r27	; 0x07
   18a16:	86 ea       	ldi	r24, 0xA6	; 166
   18a18:	9d e3       	ldi	r25, 0x3D	; 61
   18a1a:	a0 e0       	ldi	r26, 0x00	; 0
   18a1c:	81 83       	std	Z+1, r24	; 0x01
   18a1e:	92 83       	std	Z+2, r25	; 0x02
   18a20:	a3 83       	std	Z+3, r26	; 0x03
   18a22:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18a26:	fe 01       	movw	r30, r28
   18a28:	e2 59       	subi	r30, 0x92	; 146
   18a2a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a2c:	80 81       	ld	r24, Z
   18a2e:	91 81       	ldd	r25, Z+1	; 0x01
   18a30:	ed b7       	in	r30, 0x3d	; 61
   18a32:	fe b7       	in	r31, 0x3e	; 62
   18a34:	95 83       	std	Z+5, r25	; 0x05
   18a36:	84 83       	std	Z+4, r24	; 0x04
   18a38:	8a e8       	ldi	r24, 0x8A	; 138
   18a3a:	9d e3       	ldi	r25, 0x3D	; 61
   18a3c:	a0 e0       	ldi	r26, 0x00	; 0
   18a3e:	81 83       	std	Z+1, r24	; 0x01
   18a40:	92 83       	std	Z+2, r25	; 0x02
   18a42:	a3 83       	std	Z+3, r26	; 0x03
   18a44:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18a48:	ce 01       	movw	r24, r28
   18a4a:	8c 59       	subi	r24, 0x9C	; 156
   18a4c:	9f 4f       	sbci	r25, 0xFF	; 255
   18a4e:	1a de       	rcall	.-972    	; 0x18684 <lif_lifbcd2timestr>
   18a50:	ed b7       	in	r30, 0x3d	; 61
   18a52:	fe b7       	in	r31, 0x3e	; 62
   18a54:	95 83       	std	Z+5, r25	; 0x05
   18a56:	84 83       	std	Z+4, r24	; 0x04
   18a58:	80 e7       	ldi	r24, 0x70	; 112
   18a5a:	9d e3       	ldi	r25, 0x3D	; 61
   18a5c:	a0 e0       	ldi	r26, 0x00	; 0
   18a5e:	81 83       	std	Z+1, r24	; 0x01
   18a60:	92 83       	std	Z+2, r25	; 0x02
   18a62:	a3 83       	std	Z+3, r26	; 0x03
   18a64:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18a68:	8e e6       	ldi	r24, 0x6E	; 110
   18a6a:	9d e3       	ldi	r25, 0x3D	; 61
   18a6c:	a0 e0       	ldi	r26, 0x00	; 0
   18a6e:	ed b7       	in	r30, 0x3d	; 61
   18a70:	fe b7       	in	r31, 0x3e	; 62
   18a72:	81 83       	std	Z+1, r24	; 0x01
   18a74:	92 83       	std	Z+2, r25	; 0x02
   18a76:	a3 83       	std	Z+3, r26	; 0x03
   18a78:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18a7c:	cd b7       	in	r28, 0x3d	; 61
   18a7e:	de b7       	in	r29, 0x3e	; 62
   18a80:	27 96       	adiw	r28, 0x07	; 7
   18a82:	e2 e0       	ldi	r30, 0x02	; 2
   18a84:	0c 94 c7 e3 	jmp	0x1c78e	; 0x1c78e <__epilogue_restores__+0x20>

00018a88 <lif_check_volume>:
   18a88:	0f 93       	push	r16
   18a8a:	1f 93       	push	r17
   18a8c:	cf 93       	push	r28
   18a8e:	df 93       	push	r29
   18a90:	ad b7       	in	r26, 0x3d	; 61
   18a92:	be b7       	in	r27, 0x3e	; 62
   18a94:	17 97       	sbiw	r26, 0x07	; 7
   18a96:	0f b6       	in	r0, 0x3f	; 63
   18a98:	f8 94       	cli
   18a9a:	be bf       	out	0x3e, r27	; 62
   18a9c:	0f be       	out	0x3f, r0	; 63
   18a9e:	ad bf       	out	0x3d, r26	; 61
   18aa0:	ec 01       	movw	r28, r24
   18aa2:	86 96       	adiw	r24, 0x26	; 38
   18aa4:	e0 da       	rcall	.-2624   	; 0x18066 <lif_checkname>
   18aa6:	89 2b       	or	r24, r25
   18aa8:	89 f4       	brne	.+34     	; 0x18acc <lif_check_volume+0x44>
   18aaa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18aae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ab2:	92 ff       	sbrs	r25, 2
   18ab4:	0e c0       	rjmp	.+28     	; 0x18ad2 <lif_check_volume+0x4a>
   18ab6:	8f e4       	ldi	r24, 0x4F	; 79
   18ab8:	9d e3       	ldi	r25, 0x3D	; 61
   18aba:	a0 e0       	ldi	r26, 0x00	; 0
   18abc:	ed b7       	in	r30, 0x3d	; 61
   18abe:	fe b7       	in	r31, 0x3e	; 62
   18ac0:	81 83       	std	Z+1, r24	; 0x01
   18ac2:	92 83       	std	Z+2, r25	; 0x02
   18ac4:	a3 83       	std	Z+3, r26	; 0x03
   18ac6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18aca:	03 c0       	rjmp	.+6      	; 0x18ad2 <lif_check_volume+0x4a>
   18acc:	81 e0       	ldi	r24, 0x01	; 1
   18ace:	90 e0       	ldi	r25, 0x00	; 0
   18ad0:	02 c0       	rjmp	.+4      	; 0x18ad6 <lif_check_volume+0x4e>
   18ad2:	80 e0       	ldi	r24, 0x00	; 0
   18ad4:	90 e0       	ldi	r25, 0x00	; 0
   18ad6:	29 a9       	ldd	r18, Y+49	; 0x31
   18ad8:	3a a9       	ldd	r19, Y+50	; 0x32
   18ada:	21 15       	cp	r18, r1
   18adc:	f0 e1       	ldi	r31, 0x10	; 16
   18ade:	3f 07       	cpc	r19, r31
   18ae0:	a1 f0       	breq	.+40     	; 0x18b0a <lif_check_volume+0x82>
   18ae2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ae6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18aea:	92 ff       	sbrs	r25, 2
   18aec:	0c c0       	rjmp	.+24     	; 0x18b06 <lif_check_volume+0x7e>
   18aee:	ed b7       	in	r30, 0x3d	; 61
   18af0:	fe b7       	in	r31, 0x3e	; 62
   18af2:	35 83       	std	Z+5, r19	; 0x05
   18af4:	24 83       	std	Z+4, r18	; 0x04
   18af6:	86 e1       	ldi	r24, 0x16	; 22
   18af8:	9d e3       	ldi	r25, 0x3D	; 61
   18afa:	a0 e0       	ldi	r26, 0x00	; 0
   18afc:	81 83       	std	Z+1, r24	; 0x01
   18afe:	92 83       	std	Z+2, r25	; 0x02
   18b00:	a3 83       	std	Z+3, r26	; 0x03
   18b02:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18b06:	80 e0       	ldi	r24, 0x00	; 0
   18b08:	90 e0       	ldi	r25, 0x00	; 0
   18b0a:	29 ad       	ldd	r18, Y+57	; 0x39
   18b0c:	3a ad       	ldd	r19, Y+58	; 0x3a
   18b0e:	22 30       	cpi	r18, 0x02	; 2
   18b10:	31 05       	cpc	r19, r1
   18b12:	a0 f0       	brcs	.+40     	; 0x18b3c <lif_check_volume+0xb4>
   18b14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b18:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b1c:	92 ff       	sbrs	r25, 2
   18b1e:	0c c0       	rjmp	.+24     	; 0x18b38 <lif_check_volume+0xb0>
   18b20:	ed b7       	in	r30, 0x3d	; 61
   18b22:	fe b7       	in	r31, 0x3e	; 62
   18b24:	35 83       	std	Z+5, r19	; 0x05
   18b26:	24 83       	std	Z+4, r18	; 0x04
   18b28:	8e ef       	ldi	r24, 0xFE	; 254
   18b2a:	9c e3       	ldi	r25, 0x3C	; 60
   18b2c:	a0 e0       	ldi	r26, 0x00	; 0
   18b2e:	81 83       	std	Z+1, r24	; 0x01
   18b30:	92 83       	std	Z+2, r25	; 0x02
   18b32:	a3 83       	std	Z+3, r26	; 0x03
   18b34:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18b38:	80 e0       	ldi	r24, 0x00	; 0
   18b3a:	90 e0       	ldi	r25, 0x00	; 0
   18b3c:	2b a9       	ldd	r18, Y+51	; 0x33
   18b3e:	3c a9       	ldd	r19, Y+52	; 0x34
   18b40:	23 2b       	or	r18, r19
   18b42:	91 f0       	breq	.+36     	; 0x18b68 <lif_check_volume+0xe0>
   18b44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b48:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b4c:	92 ff       	sbrs	r25, 2
   18b4e:	0a c0       	rjmp	.+20     	; 0x18b64 <lif_check_volume+0xdc>
   18b50:	85 ec       	ldi	r24, 0xC5	; 197
   18b52:	9c e3       	ldi	r25, 0x3C	; 60
   18b54:	a0 e0       	ldi	r26, 0x00	; 0
   18b56:	ed b7       	in	r30, 0x3d	; 61
   18b58:	fe b7       	in	r31, 0x3e	; 62
   18b5a:	81 83       	std	Z+1, r24	; 0x01
   18b5c:	92 83       	std	Z+2, r25	; 0x02
   18b5e:	a3 83       	std	Z+3, r26	; 0x03
   18b60:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18b64:	80 e0       	ldi	r24, 0x00	; 0
   18b66:	90 e0       	ldi	r25, 0x00	; 0
   18b68:	2b ad       	ldd	r18, Y+59	; 0x3b
   18b6a:	3c ad       	ldd	r19, Y+60	; 0x3c
   18b6c:	23 2b       	or	r18, r19
   18b6e:	91 f0       	breq	.+36     	; 0x18b94 <lif_check_volume+0x10c>
   18b70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b74:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b78:	92 ff       	sbrs	r25, 2
   18b7a:	0a c0       	rjmp	.+20     	; 0x18b90 <lif_check_volume+0x108>
   18b7c:	8c e8       	ldi	r24, 0x8C	; 140
   18b7e:	9c e3       	ldi	r25, 0x3C	; 60
   18b80:	a0 e0       	ldi	r26, 0x00	; 0
   18b82:	ed b7       	in	r30, 0x3d	; 61
   18b84:	fe b7       	in	r31, 0x3e	; 62
   18b86:	81 83       	std	Z+1, r24	; 0x01
   18b88:	92 83       	std	Z+2, r25	; 0x02
   18b8a:	a3 83       	std	Z+3, r26	; 0x03
   18b8c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18b90:	80 e0       	ldi	r24, 0x00	; 0
   18b92:	90 e0       	ldi	r25, 0x00	; 0
   18b94:	4d a5       	ldd	r20, Y+45	; 0x2d
   18b96:	5e a5       	ldd	r21, Y+46	; 0x2e
   18b98:	6f a5       	ldd	r22, Y+47	; 0x2f
   18b9a:	78 a9       	ldd	r23, Y+48	; 0x30
   18b9c:	45 2b       	or	r20, r21
   18b9e:	46 2b       	or	r20, r22
   18ba0:	47 2b       	or	r20, r23
   18ba2:	b1 f4       	brne	.+44     	; 0x18bd0 <lif_check_volume+0x148>
   18ba4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ba8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bac:	92 ff       	sbrs	r25, 2
   18bae:	0e c0       	rjmp	.+28     	; 0x18bcc <lif_check_volume+0x144>
   18bb0:	ed b7       	in	r30, 0x3d	; 61
   18bb2:	fe b7       	in	r31, 0x3e	; 62
   18bb4:	14 82       	std	Z+4, r1	; 0x04
   18bb6:	15 82       	std	Z+5, r1	; 0x05
   18bb8:	16 82       	std	Z+6, r1	; 0x06
   18bba:	17 82       	std	Z+7, r1	; 0x07
   18bbc:	87 e6       	ldi	r24, 0x67	; 103
   18bbe:	9c e3       	ldi	r25, 0x3C	; 60
   18bc0:	a0 e0       	ldi	r26, 0x00	; 0
   18bc2:	81 83       	std	Z+1, r24	; 0x01
   18bc4:	92 83       	std	Z+2, r25	; 0x02
   18bc6:	a3 83       	std	Z+3, r26	; 0x03
   18bc8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18bcc:	80 e0       	ldi	r24, 0x00	; 0
   18bce:	90 e0       	ldi	r25, 0x00	; 0
   18bd0:	4d a9       	ldd	r20, Y+53	; 0x35
   18bd2:	5e a9       	ldd	r21, Y+54	; 0x36
   18bd4:	6f a9       	ldd	r22, Y+55	; 0x37
   18bd6:	78 ad       	ldd	r23, Y+56	; 0x38
   18bd8:	45 2b       	or	r20, r21
   18bda:	46 2b       	or	r20, r22
   18bdc:	47 2b       	or	r20, r23
   18bde:	91 f4       	brne	.+36     	; 0x18c04 <lif_check_volume+0x17c>
   18be0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18be4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18be8:	92 ff       	sbrs	r25, 2
   18bea:	0a c0       	rjmp	.+20     	; 0x18c00 <lif_check_volume+0x178>
   18bec:	88 e3       	ldi	r24, 0x38	; 56
   18bee:	9c e3       	ldi	r25, 0x3C	; 60
   18bf0:	a0 e0       	ldi	r26, 0x00	; 0
   18bf2:	ed b7       	in	r30, 0x3d	; 61
   18bf4:	fe b7       	in	r31, 0x3e	; 62
   18bf6:	81 83       	std	Z+1, r24	; 0x01
   18bf8:	92 83       	std	Z+2, r25	; 0x02
   18bfa:	a3 83       	std	Z+3, r26	; 0x03
   18bfc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18c00:	80 e0       	ldi	r24, 0x00	; 0
   18c02:	90 e0       	ldi	r25, 0x00	; 0
   18c04:	0d a5       	ldd	r16, Y+45	; 0x2d
   18c06:	1e a5       	ldd	r17, Y+46	; 0x2e
   18c08:	2f a5       	ldd	r18, Y+47	; 0x2f
   18c0a:	38 a9       	ldd	r19, Y+48	; 0x30
   18c0c:	4d a9       	ldd	r20, Y+53	; 0x35
   18c0e:	5e a9       	ldd	r21, Y+54	; 0x36
   18c10:	6f a9       	ldd	r22, Y+55	; 0x37
   18c12:	78 ad       	ldd	r23, Y+56	; 0x38
   18c14:	40 0f       	add	r20, r16
   18c16:	51 1f       	adc	r21, r17
   18c18:	62 1f       	adc	r22, r18
   18c1a:	73 1f       	adc	r23, r19
   18c1c:	0c 81       	ldd	r16, Y+4	; 0x04
   18c1e:	1d 81       	ldd	r17, Y+5	; 0x05
   18c20:	2e 81       	ldd	r18, Y+6	; 0x06
   18c22:	3f 81       	ldd	r19, Y+7	; 0x07
   18c24:	04 17       	cp	r16, r20
   18c26:	15 07       	cpc	r17, r21
   18c28:	26 07       	cpc	r18, r22
   18c2a:	37 07       	cpc	r19, r23
   18c2c:	90 f4       	brcc	.+36     	; 0x18c52 <lif_check_volume+0x1ca>
   18c2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c32:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c36:	92 ff       	sbrs	r25, 2
   18c38:	0a c0       	rjmp	.+20     	; 0x18c4e <lif_check_volume+0x1c6>
   18c3a:	8c e0       	ldi	r24, 0x0C	; 12
   18c3c:	9c e3       	ldi	r25, 0x3C	; 60
   18c3e:	a0 e0       	ldi	r26, 0x00	; 0
   18c40:	ed b7       	in	r30, 0x3d	; 61
   18c42:	fe b7       	in	r31, 0x3e	; 62
   18c44:	81 83       	std	Z+1, r24	; 0x01
   18c46:	92 83       	std	Z+2, r25	; 0x02
   18c48:	a3 83       	std	Z+3, r26	; 0x03
   18c4a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18c4e:	80 e0       	ldi	r24, 0x00	; 0
   18c50:	90 e0       	ldi	r25, 0x00	; 0
   18c52:	cd b7       	in	r28, 0x3d	; 61
   18c54:	de b7       	in	r29, 0x3e	; 62
   18c56:	27 96       	adiw	r28, 0x07	; 7
   18c58:	e4 e0       	ldi	r30, 0x04	; 4
   18c5a:	0c 94 c5 e3 	jmp	0x1c78a	; 0x1c78a <__epilogue_restores__+0x1c>

00018c5e <lif_check_dir>:
   18c5e:	a5 e1       	ldi	r26, 0x15	; 21
   18c60:	b0 e0       	ldi	r27, 0x00	; 0
   18c62:	e5 e3       	ldi	r30, 0x35	; 53
   18c64:	f6 ec       	ldi	r31, 0xC6	; 198
   18c66:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   18c6a:	6c 01       	movw	r12, r24
   18c6c:	2a e5       	ldi	r18, 0x5A	; 90
   18c6e:	c2 0e       	add	r12, r18
   18c70:	d1 1c       	adc	r13, r1
   18c72:	f6 01       	movw	r30, r12
   18c74:	20 81       	ld	r18, Z
   18c76:	31 81       	ldd	r19, Z+1	; 0x01
   18c78:	21 50       	subi	r18, 0x01	; 1
   18c7a:	31 09       	sbc	r19, r1
   18c7c:	2e 3f       	cpi	r18, 0xFE	; 254
   18c7e:	3f 4f       	sbci	r19, 0xFF	; 255
   18c80:	08 f0       	brcs	.+2      	; 0x18c84 <lif_check_dir+0x26>
   18c82:	9a c1       	rjmp	.+820    	; 0x18fb8 <lif_check_dir+0x35a>
   18c84:	9d 8b       	std	Y+21, r25	; 0x15
   18c86:	8c 8b       	std	Y+20, r24	; 0x14
   18c88:	7c 01       	movw	r14, r24
   18c8a:	2f e4       	ldi	r18, 0x4F	; 79
   18c8c:	e2 0e       	add	r14, r18
   18c8e:	f1 1c       	adc	r15, r1
   18c90:	c7 01       	movw	r24, r14
   18c92:	e9 d9       	rcall	.-3118   	; 0x18066 <lif_checkname>
   18c94:	89 2b       	or	r24, r25
   18c96:	99 f4       	brne	.+38     	; 0x18cbe <lif_check_dir+0x60>
   18c98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c9c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ca0:	92 ff       	sbrs	r25, 2
   18ca2:	0f c0       	rjmp	.+30     	; 0x18cc2 <lif_check_dir+0x64>
   18ca4:	ed b7       	in	r30, 0x3d	; 61
   18ca6:	fe b7       	in	r31, 0x3e	; 62
   18ca8:	f5 82       	std	Z+5, r15	; 0x05
   18caa:	e4 82       	std	Z+4, r14	; 0x04
   18cac:	8b ee       	ldi	r24, 0xEB	; 235
   18cae:	9b e3       	ldi	r25, 0x3B	; 59
   18cb0:	a0 e0       	ldi	r26, 0x00	; 0
   18cb2:	81 83       	std	Z+1, r24	; 0x01
   18cb4:	92 83       	std	Z+2, r25	; 0x02
   18cb6:	a3 83       	std	Z+3, r26	; 0x03
   18cb8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18cbc:	02 c0       	rjmp	.+4      	; 0x18cc2 <lif_check_dir+0x64>
   18cbe:	01 e0       	ldi	r16, 0x01	; 1
   18cc0:	01 c0       	rjmp	.+2      	; 0x18cc4 <lif_check_dir+0x66>
   18cc2:	00 e0       	ldi	r16, 0x00	; 0
   18cc4:	10 e0       	ldi	r17, 0x00	; 0
   18cc6:	ec 89       	ldd	r30, Y+20	; 0x14
   18cc8:	fd 89       	ldd	r31, Y+21	; 0x15
   18cca:	84 85       	ldd	r24, Z+12	; 0x0c
   18ccc:	95 85       	ldd	r25, Z+13	; 0x0d
   18cce:	a6 85       	ldd	r26, Z+14	; 0x0e
   18cd0:	b7 85       	ldd	r27, Z+15	; 0x0f
   18cd2:	00 97       	sbiw	r24, 0x00	; 0
   18cd4:	a1 05       	cpc	r26, r1
   18cd6:	b1 05       	cpc	r27, r1
   18cd8:	39 f1       	breq	.+78     	; 0x18d28 <lif_check_dir+0xca>
   18cda:	e4 5a       	subi	r30, 0xA4	; 164
   18cdc:	ff 4f       	sbci	r31, 0xFF	; 255
   18cde:	40 81       	ld	r20, Z
   18ce0:	51 81       	ldd	r21, Z+1	; 0x01
   18ce2:	62 81       	ldd	r22, Z+2	; 0x02
   18ce4:	73 81       	ldd	r23, Z+3	; 0x03
   18ce6:	48 17       	cp	r20, r24
   18ce8:	59 07       	cpc	r21, r25
   18cea:	6a 07       	cpc	r22, r26
   18cec:	7b 07       	cpc	r23, r27
   18cee:	e0 f4       	brcc	.+56     	; 0x18d28 <lif_check_dir+0xca>
   18cf0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18cf4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18cf8:	32 ff       	sbrs	r19, 2
   18cfa:	14 c0       	rjmp	.+40     	; 0x18d24 <lif_check_dir+0xc6>
   18cfc:	ed b7       	in	r30, 0x3d	; 61
   18cfe:	fe b7       	in	r31, 0x3e	; 62
   18d00:	82 87       	std	Z+10, r24	; 0x0a
   18d02:	93 87       	std	Z+11, r25	; 0x0b
   18d04:	a4 87       	std	Z+12, r26	; 0x0c
   18d06:	b5 87       	std	Z+13, r27	; 0x0d
   18d08:	46 83       	std	Z+6, r20	; 0x06
   18d0a:	57 83       	std	Z+7, r21	; 0x07
   18d0c:	60 87       	std	Z+8, r22	; 0x08
   18d0e:	71 87       	std	Z+9, r23	; 0x09
   18d10:	f5 82       	std	Z+5, r15	; 0x05
   18d12:	e4 82       	std	Z+4, r14	; 0x04
   18d14:	87 ea       	ldi	r24, 0xA7	; 167
   18d16:	9b e3       	ldi	r25, 0x3B	; 59
   18d18:	a0 e0       	ldi	r26, 0x00	; 0
   18d1a:	81 83       	std	Z+1, r24	; 0x01
   18d1c:	92 83       	std	Z+2, r25	; 0x02
   18d1e:	a3 83       	std	Z+3, r26	; 0x03
   18d20:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18d24:	00 e0       	ldi	r16, 0x00	; 0
   18d26:	10 e0       	ldi	r17, 0x00	; 0
   18d28:	ec 89       	ldd	r30, Y+20	; 0x14
   18d2a:	fd 89       	ldd	r31, Y+21	; 0x15
   18d2c:	44 81       	ldd	r20, Z+4	; 0x04
   18d2e:	55 81       	ldd	r21, Z+5	; 0x05
   18d30:	66 81       	ldd	r22, Z+6	; 0x06
   18d32:	77 81       	ldd	r23, Z+7	; 0x07
   18d34:	41 15       	cp	r20, r1
   18d36:	51 05       	cpc	r21, r1
   18d38:	61 05       	cpc	r22, r1
   18d3a:	71 05       	cpc	r23, r1
   18d3c:	99 f1       	breq	.+102    	; 0x18da4 <lif_check_dir+0x146>
   18d3e:	e4 5a       	subi	r30, 0xA4	; 164
   18d40:	ff 4f       	sbci	r31, 0xFF	; 255
   18d42:	80 80       	ld	r8, Z
   18d44:	91 80       	ldd	r9, Z+1	; 0x01
   18d46:	a2 80       	ldd	r10, Z+2	; 0x02
   18d48:	b3 80       	ldd	r11, Z+3	; 0x03
   18d4a:	ec 89       	ldd	r30, Y+20	; 0x14
   18d4c:	fd 89       	ldd	r31, Y+21	; 0x15
   18d4e:	e0 5a       	subi	r30, 0xA0	; 160
   18d50:	ff 4f       	sbci	r31, 0xFF	; 255
   18d52:	80 81       	ld	r24, Z
   18d54:	91 81       	ldd	r25, Z+1	; 0x01
   18d56:	a2 81       	ldd	r26, Z+2	; 0x02
   18d58:	b3 81       	ldd	r27, Z+3	; 0x03
   18d5a:	88 0d       	add	r24, r8
   18d5c:	99 1d       	adc	r25, r9
   18d5e:	aa 1d       	adc	r26, r10
   18d60:	bb 1d       	adc	r27, r11
   18d62:	48 17       	cp	r20, r24
   18d64:	59 07       	cpc	r21, r25
   18d66:	6a 07       	cpc	r22, r26
   18d68:	7b 07       	cpc	r23, r27
   18d6a:	e0 f4       	brcc	.+56     	; 0x18da4 <lif_check_dir+0x146>
   18d6c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d70:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d74:	32 ff       	sbrs	r19, 2
   18d76:	14 c0       	rjmp	.+40     	; 0x18da0 <lif_check_dir+0x142>
   18d78:	ed b7       	in	r30, 0x3d	; 61
   18d7a:	fe b7       	in	r31, 0x3e	; 62
   18d7c:	42 87       	std	Z+10, r20	; 0x0a
   18d7e:	53 87       	std	Z+11, r21	; 0x0b
   18d80:	64 87       	std	Z+12, r22	; 0x0c
   18d82:	75 87       	std	Z+13, r23	; 0x0d
   18d84:	86 83       	std	Z+6, r24	; 0x06
   18d86:	97 83       	std	Z+7, r25	; 0x07
   18d88:	a0 87       	std	Z+8, r26	; 0x08
   18d8a:	b1 87       	std	Z+9, r27	; 0x09
   18d8c:	f5 82       	std	Z+5, r15	; 0x05
   18d8e:	e4 82       	std	Z+4, r14	; 0x04
   18d90:	86 e6       	ldi	r24, 0x66	; 102
   18d92:	9b e3       	ldi	r25, 0x3B	; 59
   18d94:	a0 e0       	ldi	r26, 0x00	; 0
   18d96:	81 83       	std	Z+1, r24	; 0x01
   18d98:	92 83       	std	Z+2, r25	; 0x02
   18d9a:	a3 83       	std	Z+3, r26	; 0x03
   18d9c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18da0:	00 e0       	ldi	r16, 0x00	; 0
   18da2:	10 e0       	ldi	r17, 0x00	; 0
   18da4:	ec 89       	ldd	r30, Y+20	; 0x14
   18da6:	fd 89       	ldd	r31, Y+21	; 0x15
   18da8:	e6 59       	subi	r30, 0x96	; 150
   18daa:	ff 4f       	sbci	r31, 0xFF	; 255
   18dac:	80 81       	ld	r24, Z
   18dae:	91 81       	ldd	r25, Z+1	; 0x01
   18db0:	81 30       	cpi	r24, 0x01	; 1
   18db2:	f0 e8       	ldi	r31, 0x80	; 128
   18db4:	9f 07       	cpc	r25, r31
   18db6:	b1 f0       	breq	.+44     	; 0x18de4 <lif_check_dir+0x186>
   18db8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18dbc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18dc0:	32 ff       	sbrs	r19, 2
   18dc2:	0e c0       	rjmp	.+28     	; 0x18de0 <lif_check_dir+0x182>
   18dc4:	ed b7       	in	r30, 0x3d	; 61
   18dc6:	fe b7       	in	r31, 0x3e	; 62
   18dc8:	97 83       	std	Z+7, r25	; 0x07
   18dca:	86 83       	std	Z+6, r24	; 0x06
   18dcc:	f5 82       	std	Z+5, r15	; 0x05
   18dce:	e4 82       	std	Z+4, r14	; 0x04
   18dd0:	88 e3       	ldi	r24, 0x38	; 56
   18dd2:	9b e3       	ldi	r25, 0x3B	; 59
   18dd4:	a0 e0       	ldi	r26, 0x00	; 0
   18dd6:	81 83       	std	Z+1, r24	; 0x01
   18dd8:	92 83       	std	Z+2, r25	; 0x02
   18dda:	a3 83       	std	Z+3, r26	; 0x03
   18ddc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18de0:	00 e0       	ldi	r16, 0x00	; 0
   18de2:	10 e0       	ldi	r17, 0x00	; 0
   18de4:	f6 01       	movw	r30, r12
   18de6:	80 81       	ld	r24, Z
   18de8:	91 81       	ldd	r25, Z+1	; 0x01
   18dea:	8c 7f       	andi	r24, 0xFC	; 252
   18dec:	80 31       	cpi	r24, 0x10	; 16
   18dee:	90 4e       	sbci	r25, 0xE0	; 224
   18df0:	09 f0       	breq	.+2      	; 0x18df4 <lif_check_dir+0x196>
   18df2:	b3 c0       	rjmp	.+358    	; 0x18f5a <lif_check_dir+0x2fc>
   18df4:	cc 88       	ldd	r12, Y+20	; 0x14
   18df6:	dd 88       	ldd	r13, Y+21	; 0x15
   18df8:	2c e6       	ldi	r18, 0x6C	; 108
   18dfa:	c2 0e       	add	r12, r18
   18dfc:	d1 1c       	adc	r13, r1
   18dfe:	f6 01       	movw	r30, r12
   18e00:	80 81       	ld	r24, Z
   18e02:	91 81       	ldd	r25, Z+1	; 0x01
   18e04:	00 97       	sbiw	r24, 0x00	; 0
   18e06:	09 f4       	brne	.+2      	; 0x18e0a <lif_check_dir+0x1ac>
   18e08:	a8 c0       	rjmp	.+336    	; 0x18f5a <lif_check_dir+0x2fc>
   18e0a:	4c 01       	movw	r8, r24
   18e0c:	a1 2c       	mov	r10, r1
   18e0e:	b1 2c       	mov	r11, r1
   18e10:	77 27       	eor	r23, r23
   18e12:	6b 2d       	mov	r22, r11
   18e14:	5a 2d       	mov	r21, r10
   18e16:	49 2d       	mov	r20, r9
   18e18:	9c 01       	movw	r18, r24
   18e1a:	33 27       	eor	r19, r19
   18e1c:	3b 8b       	std	Y+19, r19	; 0x13
   18e1e:	2a 8b       	std	Y+18, r18	; 0x12
   18e20:	db 01       	movw	r26, r22
   18e22:	ca 01       	movw	r24, r20
   18e24:	23 2b       	or	r18, r19
   18e26:	19 f0       	breq	.+6      	; 0x18e2e <lif_check_dir+0x1d0>
   18e28:	01 96       	adiw	r24, 0x01	; 1
   18e2a:	a1 1d       	adc	r26, r1
   18e2c:	b1 1d       	adc	r27, r1
   18e2e:	2c 88       	ldd	r2, Y+20	; 0x14
   18e30:	3d 88       	ldd	r3, Y+21	; 0x15
   18e32:	30 e6       	ldi	r19, 0x60	; 96
   18e34:	23 0e       	add	r2, r19
   18e36:	31 1c       	adc	r3, r1
   18e38:	f1 01       	movw	r30, r2
   18e3a:	40 80       	ld	r4, Z
   18e3c:	51 80       	ldd	r5, Z+1	; 0x01
   18e3e:	62 80       	ldd	r6, Z+2	; 0x02
   18e40:	73 80       	ldd	r7, Z+3	; 0x03
   18e42:	48 16       	cp	r4, r24
   18e44:	59 06       	cpc	r5, r25
   18e46:	6a 06       	cpc	r6, r26
   18e48:	7b 06       	cpc	r7, r27
   18e4a:	40 f5       	brcc	.+80     	; 0x18e9c <lif_check_dir+0x23e>
   18e4c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e50:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e54:	32 ff       	sbrs	r19, 2
   18e56:	20 c0       	rjmp	.+64     	; 0x18e98 <lif_check_dir+0x23a>
   18e58:	2a 89       	ldd	r18, Y+18	; 0x12
   18e5a:	3b 89       	ldd	r19, Y+19	; 0x13
   18e5c:	23 2b       	or	r18, r19
   18e5e:	21 f0       	breq	.+8      	; 0x18e68 <lif_check_dir+0x20a>
   18e60:	4f 5f       	subi	r20, 0xFF	; 255
   18e62:	5f 4f       	sbci	r21, 0xFF	; 255
   18e64:	6f 4f       	sbci	r22, 0xFF	; 255
   18e66:	7f 4f       	sbci	r23, 0xFF	; 255
   18e68:	ed b7       	in	r30, 0x3d	; 61
   18e6a:	fe b7       	in	r31, 0x3e	; 62
   18e6c:	46 86       	std	Z+14, r4	; 0x0e
   18e6e:	57 86       	std	Z+15, r5	; 0x0f
   18e70:	60 8a       	std	Z+16, r6	; 0x10
   18e72:	71 8a       	std	Z+17, r7	; 0x11
   18e74:	42 87       	std	Z+10, r20	; 0x0a
   18e76:	53 87       	std	Z+11, r21	; 0x0b
   18e78:	64 87       	std	Z+12, r22	; 0x0c
   18e7a:	75 87       	std	Z+13, r23	; 0x0d
   18e7c:	86 82       	std	Z+6, r8	; 0x06
   18e7e:	97 82       	std	Z+7, r9	; 0x07
   18e80:	a0 86       	std	Z+8, r10	; 0x08
   18e82:	b1 86       	std	Z+9, r11	; 0x09
   18e84:	f5 82       	std	Z+5, r15	; 0x05
   18e86:	e4 82       	std	Z+4, r14	; 0x04
   18e88:	8d ee       	ldi	r24, 0xED	; 237
   18e8a:	9a e3       	ldi	r25, 0x3A	; 58
   18e8c:	a0 e0       	ldi	r26, 0x00	; 0
   18e8e:	81 83       	std	Z+1, r24	; 0x01
   18e90:	92 83       	std	Z+2, r25	; 0x02
   18e92:	a3 83       	std	Z+3, r26	; 0x03
   18e94:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18e98:	00 e0       	ldi	r16, 0x00	; 0
   18e9a:	10 e0       	ldi	r17, 0x00	; 0
   18e9c:	f6 01       	movw	r30, r12
   18e9e:	20 81       	ld	r18, Z
   18ea0:	31 81       	ldd	r19, Z+1	; 0x01
   18ea2:	a9 01       	movw	r20, r18
   18ea4:	60 e0       	ldi	r22, 0x00	; 0
   18ea6:	70 e0       	ldi	r23, 0x00	; 0
   18ea8:	bb 27       	eor	r27, r27
   18eaa:	a7 2f       	mov	r26, r23
   18eac:	96 2f       	mov	r25, r22
   18eae:	85 2f       	mov	r24, r21
   18eb0:	f9 01       	movw	r30, r18
   18eb2:	ff 27       	eor	r31, r31
   18eb4:	fb 8b       	std	Y+19, r31	; 0x13
   18eb6:	ea 8b       	std	Y+18, r30	; 0x12
   18eb8:	2c 01       	movw	r4, r24
   18eba:	3d 01       	movw	r6, r26
   18ebc:	ef 2b       	or	r30, r31
   18ebe:	29 f0       	breq	.+10     	; 0x18eca <lif_check_dir+0x26c>
   18ec0:	ff ef       	ldi	r31, 0xFF	; 255
   18ec2:	4f 1a       	sub	r4, r31
   18ec4:	5f 0a       	sbc	r5, r31
   18ec6:	6f 0a       	sbc	r6, r31
   18ec8:	7f 0a       	sbc	r7, r31
   18eca:	f1 01       	movw	r30, r2
   18ecc:	80 80       	ld	r8, Z
   18ece:	91 80       	ldd	r9, Z+1	; 0x01
   18ed0:	a2 80       	ldd	r10, Z+2	; 0x02
   18ed2:	b3 80       	ldd	r11, Z+3	; 0x03
   18ed4:	48 14       	cp	r4, r8
   18ed6:	59 04       	cpc	r5, r9
   18ed8:	6a 04       	cpc	r6, r10
   18eda:	7b 04       	cpc	r7, r11
   18edc:	28 f5       	brcc	.+74     	; 0x18f28 <lif_check_dir+0x2ca>
   18ede:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18ee2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ee6:	32 ff       	sbrs	r19, 2
   18ee8:	1f c0       	rjmp	.+62     	; 0x18f28 <lif_check_dir+0x2ca>
   18eea:	2a 89       	ldd	r18, Y+18	; 0x12
   18eec:	3b 89       	ldd	r19, Y+19	; 0x13
   18eee:	23 2b       	or	r18, r19
   18ef0:	19 f0       	breq	.+6      	; 0x18ef8 <lif_check_dir+0x29a>
   18ef2:	01 96       	adiw	r24, 0x01	; 1
   18ef4:	a1 1d       	adc	r26, r1
   18ef6:	b1 1d       	adc	r27, r1
   18ef8:	ed b7       	in	r30, 0x3d	; 61
   18efa:	fe b7       	in	r31, 0x3e	; 62
   18efc:	86 86       	std	Z+14, r8	; 0x0e
   18efe:	97 86       	std	Z+15, r9	; 0x0f
   18f00:	a0 8a       	std	Z+16, r10	; 0x10
   18f02:	b1 8a       	std	Z+17, r11	; 0x11
   18f04:	82 87       	std	Z+10, r24	; 0x0a
   18f06:	93 87       	std	Z+11, r25	; 0x0b
   18f08:	a4 87       	std	Z+12, r26	; 0x0c
   18f0a:	b5 87       	std	Z+13, r27	; 0x0d
   18f0c:	46 83       	std	Z+6, r20	; 0x06
   18f0e:	57 83       	std	Z+7, r21	; 0x07
   18f10:	60 87       	std	Z+8, r22	; 0x08
   18f12:	71 87       	std	Z+9, r23	; 0x09
   18f14:	f5 82       	std	Z+5, r15	; 0x05
   18f16:	e4 82       	std	Z+4, r14	; 0x04
   18f18:	82 ea       	ldi	r24, 0xA2	; 162
   18f1a:	9a e3       	ldi	r25, 0x3A	; 58
   18f1c:	a0 e0       	ldi	r26, 0x00	; 0
   18f1e:	81 83       	std	Z+1, r24	; 0x01
   18f20:	92 83       	std	Z+2, r25	; 0x02
   18f22:	a3 83       	std	Z+3, r26	; 0x03
   18f24:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18f28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f30:	92 ff       	sbrs	r25, 2
   18f32:	13 c0       	rjmp	.+38     	; 0x18f5a <lif_check_dir+0x2fc>
   18f34:	f6 01       	movw	r30, r12
   18f36:	80 81       	ld	r24, Z
   18f38:	91 81       	ldd	r25, Z+1	; 0x01
   18f3a:	89 2b       	or	r24, r25
   18f3c:	71 f4       	brne	.+28     	; 0x18f5a <lif_check_dir+0x2fc>
   18f3e:	ed b7       	in	r30, 0x3d	; 61
   18f40:	fe b7       	in	r31, 0x3e	; 62
   18f42:	f5 82       	std	Z+5, r15	; 0x05
   18f44:	e4 82       	std	Z+4, r14	; 0x04
   18f46:	87 e7       	ldi	r24, 0x77	; 119
   18f48:	9a e3       	ldi	r25, 0x3A	; 58
   18f4a:	a0 e0       	ldi	r26, 0x00	; 0
   18f4c:	81 83       	std	Z+1, r24	; 0x01
   18f4e:	92 83       	std	Z+2, r25	; 0x02
   18f50:	a3 83       	std	Z+3, r26	; 0x03
   18f52:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18f56:	00 e0       	ldi	r16, 0x00	; 0
   18f58:	10 e0       	ldi	r17, 0x00	; 0
   18f5a:	ec 89       	ldd	r30, Y+20	; 0x14
   18f5c:	fd 89       	ldd	r31, Y+21	; 0x15
   18f5e:	e2 59       	subi	r30, 0x92	; 146
   18f60:	ff 4f       	sbci	r31, 0xFF	; 255
   18f62:	20 81       	ld	r18, Z
   18f64:	31 81       	ldd	r19, Z+1	; 0x01
   18f66:	21 15       	cp	r18, r1
   18f68:	f1 e0       	ldi	r31, 0x01	; 1
   18f6a:	3f 07       	cpc	r19, r31
   18f6c:	41 f1       	breq	.+80     	; 0x18fbe <lif_check_dir+0x360>
   18f6e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18f72:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f76:	ca 01       	movw	r24, r20
   18f78:	88 27       	eor	r24, r24
   18f7a:	94 70       	andi	r25, 0x04	; 4
   18f7c:	52 ff       	sbrs	r21, 2
   18f7e:	20 c0       	rjmp	.+64     	; 0x18fc0 <lif_check_dir+0x362>
   18f80:	c9 01       	movw	r24, r18
   18f82:	a0 e0       	ldi	r26, 0x00	; 0
   18f84:	b0 e0       	ldi	r27, 0x00	; 0
   18f86:	ed b7       	in	r30, 0x3d	; 61
   18f88:	fe b7       	in	r31, 0x3e	; 62
   18f8a:	86 83       	std	Z+6, r24	; 0x06
   18f8c:	97 83       	std	Z+7, r25	; 0x07
   18f8e:	a0 87       	std	Z+8, r26	; 0x08
   18f90:	b1 87       	std	Z+9, r27	; 0x09
   18f92:	ec 89       	ldd	r30, Y+20	; 0x14
   18f94:	fd 89       	ldd	r31, Y+21	; 0x15
   18f96:	80 81       	ld	r24, Z
   18f98:	91 81       	ldd	r25, Z+1	; 0x01
   18f9a:	ed b7       	in	r30, 0x3d	; 61
   18f9c:	fe b7       	in	r31, 0x3e	; 62
   18f9e:	95 83       	std	Z+5, r25	; 0x05
   18fa0:	84 83       	std	Z+4, r24	; 0x04
   18fa2:	8b e4       	ldi	r24, 0x4B	; 75
   18fa4:	9a e3       	ldi	r25, 0x3A	; 58
   18fa6:	a0 e0       	ldi	r26, 0x00	; 0
   18fa8:	81 83       	std	Z+1, r24	; 0x01
   18faa:	92 83       	std	Z+2, r25	; 0x02
   18fac:	a3 83       	std	Z+3, r26	; 0x03
   18fae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   18fb2:	80 e0       	ldi	r24, 0x00	; 0
   18fb4:	90 e0       	ldi	r25, 0x00	; 0
   18fb6:	04 c0       	rjmp	.+8      	; 0x18fc0 <lif_check_dir+0x362>
   18fb8:	81 e0       	ldi	r24, 0x01	; 1
   18fba:	90 e0       	ldi	r25, 0x00	; 0
   18fbc:	01 c0       	rjmp	.+2      	; 0x18fc0 <lif_check_dir+0x362>
   18fbe:	c8 01       	movw	r24, r16
   18fc0:	65 96       	adiw	r28, 0x15	; 21
   18fc2:	e2 e1       	ldi	r30, 0x12	; 18
   18fc4:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00018fc8 <lif_close_volume>:
   18fc8:	cf 93       	push	r28
   18fca:	df 93       	push	r29
   18fcc:	00 97       	sbiw	r24, 0x00	; 0
   18fce:	f9 f0       	breq	.+62     	; 0x1900e <lif_close_volume+0x46>
   18fd0:	ec 01       	movw	r28, r24
   18fd2:	8a 81       	ldd	r24, Y+2	; 0x02
   18fd4:	9b 81       	ldd	r25, Y+3	; 0x03
   18fd6:	00 97       	sbiw	r24, 0x00	; 0
   18fd8:	79 f0       	breq	.+30     	; 0x18ff8 <lif_close_volume+0x30>
   18fda:	22 e0       	ldi	r18, 0x02	; 2
   18fdc:	30 e0       	ldi	r19, 0x00	; 0
   18fde:	40 e0       	ldi	r20, 0x00	; 0
   18fe0:	50 e0       	ldi	r21, 0x00	; 0
   18fe2:	ba 01       	movw	r22, r20
   18fe4:	0e 94 12 7a 	call	0xf424	; 0xf424 <fseek>
   18fe8:	8a 81       	ldd	r24, Y+2	; 0x02
   18fea:	9b 81       	ldd	r25, Y+3	; 0x03
   18fec:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
   18ff0:	1b 82       	std	Y+3, r1	; 0x03
   18ff2:	1a 82       	std	Y+2, r1	; 0x02
   18ff4:	0e 94 f5 7a 	call	0xf5ea	; 0xf5ea <sync>
   18ff8:	88 81       	ld	r24, Y
   18ffa:	99 81       	ldd	r25, Y+1	; 0x01
   18ffc:	00 97       	sbiw	r24, 0x00	; 0
   18ffe:	11 f0       	breq	.+4      	; 0x19004 <lif_close_volume+0x3c>
   19000:	0e 94 60 be 	call	0x17cc0	; 0x17cc0 <lif_free>
   19004:	ce 01       	movw	r24, r28
   19006:	73 db       	rcall	.-2330   	; 0x186ee <lif_vol_clear>
   19008:	ce 01       	movw	r24, r28
   1900a:	0e 94 60 be 	call	0x17cc0	; 0x17cc0 <lif_free>
   1900e:	df 91       	pop	r29
   19010:	cf 91       	pop	r28
   19012:	08 95       	ret

00019014 <lif_checkdirindex>:
   19014:	cf 92       	push	r12
   19016:	df 92       	push	r13
   19018:	ef 92       	push	r14
   1901a:	ff 92       	push	r15
   1901c:	cf 93       	push	r28
   1901e:	df 93       	push	r29
   19020:	ad b7       	in	r26, 0x3d	; 61
   19022:	be b7       	in	r27, 0x3e	; 62
   19024:	17 97       	sbiw	r26, 0x07	; 7
   19026:	0f b6       	in	r0, 0x3f	; 63
   19028:	f8 94       	cli
   1902a:	be bf       	out	0x3e, r27	; 62
   1902c:	0f be       	out	0x3f, r0	; 63
   1902e:	ad bf       	out	0x3d, r26	; 61
   19030:	9b 01       	movw	r18, r22
   19032:	77 fd       	sbrc	r23, 7
   19034:	25 c0       	rjmp	.+74     	; 0x19080 <lif_checkdirindex+0x6c>
   19036:	ab 01       	movw	r20, r22
   19038:	77 0f       	add	r23, r23
   1903a:	66 0b       	sbc	r22, r22
   1903c:	77 0b       	sbc	r23, r23
   1903e:	e5 e0       	ldi	r30, 0x05	; 5
   19040:	44 0f       	add	r20, r20
   19042:	55 1f       	adc	r21, r21
   19044:	66 1f       	adc	r22, r22
   19046:	77 1f       	adc	r23, r23
   19048:	ea 95       	dec	r30
   1904a:	d1 f7       	brne	.-12     	; 0x19040 <lif_checkdirindex+0x2c>
   1904c:	c5 2e       	mov	r12, r21
   1904e:	d6 2e       	mov	r13, r22
   19050:	e7 2e       	mov	r14, r23
   19052:	ff 24       	eor	r15, r15
   19054:	55 27       	eor	r21, r21
   19056:	66 27       	eor	r22, r22
   19058:	77 27       	eor	r23, r23
   1905a:	45 2b       	or	r20, r21
   1905c:	46 2b       	or	r20, r22
   1905e:	47 2b       	or	r20, r23
   19060:	29 f0       	breq	.+10     	; 0x1906c <lif_checkdirindex+0x58>
   19062:	4f ef       	ldi	r20, 0xFF	; 255
   19064:	c4 1a       	sub	r12, r20
   19066:	d4 0a       	sbc	r13, r20
   19068:	e4 0a       	sbc	r14, r20
   1906a:	f4 0a       	sbc	r15, r20
   1906c:	fc 01       	movw	r30, r24
   1906e:	45 a9       	ldd	r20, Z+53	; 0x35
   19070:	56 a9       	ldd	r21, Z+54	; 0x36
   19072:	67 a9       	ldd	r22, Z+55	; 0x37
   19074:	70 ad       	ldd	r23, Z+56	; 0x38
   19076:	4c 15       	cp	r20, r12
   19078:	5d 05       	cpc	r21, r13
   1907a:	6e 05       	cpc	r22, r14
   1907c:	7f 05       	cpc	r23, r15
   1907e:	08 f5       	brcc	.+66     	; 0x190c2 <lif_checkdirindex+0xae>
   19080:	ec 01       	movw	r28, r24
   19082:	ed b7       	in	r30, 0x3d	; 61
   19084:	fe b7       	in	r31, 0x3e	; 62
   19086:	37 83       	std	Z+7, r19	; 0x07
   19088:	26 83       	std	Z+6, r18	; 0x06
   1908a:	88 81       	ld	r24, Y
   1908c:	99 81       	ldd	r25, Y+1	; 0x01
   1908e:	95 83       	std	Z+5, r25	; 0x05
   19090:	84 83       	std	Z+4, r24	; 0x04
   19092:	88 e8       	ldi	r24, 0x88	; 136
   19094:	99 e3       	ldi	r25, 0x39	; 57
   19096:	a0 e0       	ldi	r26, 0x00	; 0
   19098:	81 83       	std	Z+1, r24	; 0x01
   1909a:	92 83       	std	Z+2, r25	; 0x02
   1909c:	a3 83       	std	Z+3, r26	; 0x03
   1909e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   190a2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   190a6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190aa:	c9 01       	movw	r24, r18
   190ac:	88 27       	eor	r24, r24
   190ae:	94 70       	andi	r25, 0x04	; 4
   190b0:	32 ff       	sbrs	r19, 2
   190b2:	09 c0       	rjmp	.+18     	; 0x190c6 <lif_checkdirindex+0xb2>
   190b4:	6c ef       	ldi	r22, 0xFC	; 252
   190b6:	75 e1       	ldi	r23, 0x15	; 21
   190b8:	ce 01       	movw	r24, r28
   190ba:	20 db       	rcall	.-2496   	; 0x186fc <lif_dump_vol>
   190bc:	80 e0       	ldi	r24, 0x00	; 0
   190be:	90 e0       	ldi	r25, 0x00	; 0
   190c0:	02 c0       	rjmp	.+4      	; 0x190c6 <lif_checkdirindex+0xb2>
   190c2:	81 e0       	ldi	r24, 0x01	; 1
   190c4:	90 e0       	ldi	r25, 0x00	; 0
   190c6:	ad b7       	in	r26, 0x3d	; 61
   190c8:	be b7       	in	r27, 0x3e	; 62
   190ca:	17 96       	adiw	r26, 0x07	; 7
   190cc:	0f b6       	in	r0, 0x3f	; 63
   190ce:	f8 94       	cli
   190d0:	be bf       	out	0x3e, r27	; 62
   190d2:	0f be       	out	0x3f, r0	; 63
   190d4:	ad bf       	out	0x3d, r26	; 61
   190d6:	df 91       	pop	r29
   190d8:	cf 91       	pop	r28
   190da:	ff 90       	pop	r15
   190dc:	ef 90       	pop	r14
   190de:	df 90       	pop	r13
   190e0:	cf 90       	pop	r12
   190e2:	08 95       	ret

000190e4 <lif_readdirindex>:
   190e4:	a5 e2       	ldi	r26, 0x25	; 37
   190e6:	b0 e0       	ldi	r27, 0x00	; 0
   190e8:	e8 e7       	ldi	r30, 0x78	; 120
   190ea:	f8 ec       	ldi	r31, 0xC8	; 200
   190ec:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
   190f0:	7c 01       	movw	r14, r24
   190f2:	6b 01       	movw	r12, r22
   190f4:	8f df       	rcall	.-226    	; 0x19014 <lif_checkdirindex>
   190f6:	89 2b       	or	r24, r25
   190f8:	19 f4       	brne	.+6      	; 0x19100 <lif_readdirindex+0x1c>
   190fa:	00 e0       	ldi	r16, 0x00	; 0
   190fc:	10 e0       	ldi	r17, 0x00	; 0
   190fe:	54 c0       	rjmp	.+168    	; 0x191a8 <lif_readdirindex+0xc4>
   19100:	f7 01       	movw	r30, r14
   19102:	85 a5       	ldd	r24, Z+45	; 0x2d
   19104:	96 a5       	ldd	r25, Z+46	; 0x2e
   19106:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19108:	b0 a9       	ldd	r27, Z+48	; 0x30
   1910a:	44 27       	eor	r20, r20
   1910c:	58 2f       	mov	r21, r24
   1910e:	69 2f       	mov	r22, r25
   19110:	7a 2f       	mov	r23, r26
   19112:	c6 01       	movw	r24, r12
   19114:	0d 2c       	mov	r0, r13
   19116:	00 0c       	add	r0, r0
   19118:	aa 0b       	sbc	r26, r26
   1911a:	bb 0b       	sbc	r27, r27
   1911c:	35 e0       	ldi	r19, 0x05	; 5
   1911e:	88 0f       	add	r24, r24
   19120:	99 1f       	adc	r25, r25
   19122:	aa 1f       	adc	r26, r26
   19124:	bb 1f       	adc	r27, r27
   19126:	3a 95       	dec	r19
   19128:	d1 f7       	brne	.-12     	; 0x1911e <lif_readdirindex+0x3a>
   1912a:	9a 01       	movw	r18, r20
   1912c:	ab 01       	movw	r20, r22
   1912e:	28 0f       	add	r18, r24
   19130:	39 1f       	adc	r19, r25
   19132:	4a 1f       	adc	r20, r26
   19134:	5b 1f       	adc	r21, r27
   19136:	00 e2       	ldi	r16, 0x20	; 32
   19138:	10 e0       	ldi	r17, 0x00	; 0
   1913a:	be 01       	movw	r22, r28
   1913c:	6a 5f       	subi	r22, 0xFA	; 250
   1913e:	7f 4f       	sbci	r23, 0xFF	; 255
   19140:	c7 01       	movw	r24, r14
   19142:	0e 94 18 bf 	call	0x17e30	; 0x17e30 <lif_read>
   19146:	60 32       	cpi	r22, 0x20	; 32
   19148:	71 05       	cpc	r23, r1
   1914a:	81 05       	cpc	r24, r1
   1914c:	91 05       	cpc	r25, r1
   1914e:	a8 f2       	brcs	.-86     	; 0x190fa <lif_readdirindex+0x16>
   19150:	b7 01       	movw	r22, r14
   19152:	ce 01       	movw	r24, r28
   19154:	06 96       	adiw	r24, 0x06	; 6
   19156:	75 d9       	rcall	.-3350   	; 0x18442 <lif_str2dir>
   19158:	f7 01       	movw	r30, r14
   1915a:	e6 5a       	subi	r30, 0xA6	; 166
   1915c:	ff 4f       	sbci	r31, 0xFF	; 255
   1915e:	80 81       	ld	r24, Z
   19160:	91 81       	ldd	r25, Z+1	; 0x01
   19162:	01 96       	adiw	r24, 0x01	; 1
   19164:	19 f4       	brne	.+6      	; 0x1916c <lif_readdirindex+0x88>
   19166:	f7 01       	movw	r30, r14
   19168:	d3 a2       	std	Z+35, r13	; 0x23
   1916a:	c2 a2       	std	Z+34, r12	; 0x22
   1916c:	c7 01       	movw	r24, r14
   1916e:	77 dd       	rcall	.-1298   	; 0x18c5e <lif_check_dir>
   19170:	8c 01       	movw	r16, r24
   19172:	89 2b       	or	r24, r25
   19174:	b9 f4       	brne	.+46     	; 0x191a4 <lif_readdirindex+0xc0>
   19176:	ed b7       	in	r30, 0x3d	; 61
   19178:	fe b7       	in	r31, 0x3e	; 62
   1917a:	d5 82       	std	Z+5, r13	; 0x05
   1917c:	c4 82       	std	Z+4, r12	; 0x04
   1917e:	88 e6       	ldi	r24, 0x68	; 104
   19180:	99 e3       	ldi	r25, 0x39	; 57
   19182:	a0 e0       	ldi	r26, 0x00	; 0
   19184:	81 83       	std	Z+1, r24	; 0x01
   19186:	92 83       	std	Z+2, r25	; 0x02
   19188:	a3 83       	std	Z+3, r26	; 0x03
   1918a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1918e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19192:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19196:	92 ff       	sbrs	r25, 2
   19198:	b0 cf       	rjmp	.-160    	; 0x190fa <lif_readdirindex+0x16>
   1919a:	6d e0       	ldi	r22, 0x0D	; 13
   1919c:	76 e1       	ldi	r23, 0x16	; 22
   1919e:	c7 01       	movw	r24, r14
   191a0:	ad da       	rcall	.-2726   	; 0x186fc <lif_dump_vol>
   191a2:	02 c0       	rjmp	.+4      	; 0x191a8 <lif_readdirindex+0xc4>
   191a4:	01 e0       	ldi	r16, 0x01	; 1
   191a6:	10 e0       	ldi	r17, 0x00	; 0
   191a8:	c8 01       	movw	r24, r16
   191aa:	a5 96       	adiw	r28, 0x25	; 37
   191ac:	e8 e0       	ldi	r30, 0x08	; 8
   191ae:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

000191b2 <lif_writedirindex>:
   191b2:	a0 e2       	ldi	r26, 0x20	; 32
   191b4:	b0 e0       	ldi	r27, 0x00	; 0
   191b6:	ef ed       	ldi	r30, 0xDF	; 223
   191b8:	f8 ec       	ldi	r31, 0xC8	; 200
   191ba:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   191be:	5c 01       	movw	r10, r24
   191c0:	6b 01       	movw	r12, r22
   191c2:	4d dd       	rcall	.-1382   	; 0x18c5e <lif_check_dir>
   191c4:	7c 01       	movw	r14, r24
   191c6:	89 2b       	or	r24, r25
   191c8:	71 f4       	brne	.+28     	; 0x191e6 <lif_writedirindex+0x34>
   191ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191d2:	92 fd       	sbrc	r25, 2
   191d4:	03 c0       	rjmp	.+6      	; 0x191dc <lif_writedirindex+0x2a>
   191d6:	e1 2c       	mov	r14, r1
   191d8:	f1 2c       	mov	r15, r1
   191da:	42 c0       	rjmp	.+132    	; 0x19260 <lif_writedirindex+0xae>
   191dc:	6e e1       	ldi	r22, 0x1E	; 30
   191de:	76 e1       	ldi	r23, 0x16	; 22
   191e0:	c5 01       	movw	r24, r10
   191e2:	8c da       	rcall	.-2792   	; 0x186fc <lif_dump_vol>
   191e4:	3d c0       	rjmp	.+122    	; 0x19260 <lif_writedirindex+0xae>
   191e6:	b6 01       	movw	r22, r12
   191e8:	c5 01       	movw	r24, r10
   191ea:	14 df       	rcall	.-472    	; 0x19014 <lif_checkdirindex>
   191ec:	89 2b       	or	r24, r25
   191ee:	99 f3       	breq	.-26     	; 0x191d6 <lif_writedirindex+0x24>
   191f0:	f5 01       	movw	r30, r10
   191f2:	e6 5a       	subi	r30, 0xA6	; 166
   191f4:	ff 4f       	sbci	r31, 0xFF	; 255
   191f6:	80 81       	ld	r24, Z
   191f8:	91 81       	ldd	r25, Z+1	; 0x01
   191fa:	01 96       	adiw	r24, 0x01	; 1
   191fc:	19 f4       	brne	.+6      	; 0x19204 <lif_writedirindex+0x52>
   191fe:	f5 01       	movw	r30, r10
   19200:	d3 a2       	std	Z+35, r13	; 0x23
   19202:	c2 a2       	std	Z+34, r12	; 0x22
   19204:	f5 01       	movw	r30, r10
   19206:	85 a5       	ldd	r24, Z+45	; 0x2d
   19208:	96 a5       	ldd	r25, Z+46	; 0x2e
   1920a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1920c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1920e:	ba 2f       	mov	r27, r26
   19210:	a9 2f       	mov	r26, r25
   19212:	98 2f       	mov	r25, r24
   19214:	88 27       	eor	r24, r24
   19216:	0d 2c       	mov	r0, r13
   19218:	00 0c       	add	r0, r0
   1921a:	ee 08       	sbc	r14, r14
   1921c:	ff 08       	sbc	r15, r15
   1921e:	35 e0       	ldi	r19, 0x05	; 5
   19220:	cc 0c       	add	r12, r12
   19222:	dd 1c       	adc	r13, r13
   19224:	ee 1c       	adc	r14, r14
   19226:	ff 1c       	adc	r15, r15
   19228:	3a 95       	dec	r19
   1922a:	d1 f7       	brne	.-12     	; 0x19220 <lif_writedirindex+0x6e>
   1922c:	c8 0e       	add	r12, r24
   1922e:	d9 1e       	adc	r13, r25
   19230:	ea 1e       	adc	r14, r26
   19232:	fb 1e       	adc	r15, r27
   19234:	be 01       	movw	r22, r28
   19236:	6f 5f       	subi	r22, 0xFF	; 255
   19238:	7f 4f       	sbci	r23, 0xFF	; 255
   1923a:	c5 01       	movw	r24, r10
   1923c:	97 d8       	rcall	.-3794   	; 0x1836c <lif_dir2str>
   1923e:	00 e2       	ldi	r16, 0x20	; 32
   19240:	10 e0       	ldi	r17, 0x00	; 0
   19242:	a7 01       	movw	r20, r14
   19244:	96 01       	movw	r18, r12
   19246:	be 01       	movw	r22, r28
   19248:	6f 5f       	subi	r22, 0xFF	; 255
   1924a:	7f 4f       	sbci	r23, 0xFF	; 255
   1924c:	c5 01       	movw	r24, r10
   1924e:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
   19252:	31 e0       	ldi	r19, 0x01	; 1
   19254:	20 e0       	ldi	r18, 0x00	; 0
   19256:	80 97       	sbiw	r24, 0x20	; 32
   19258:	0c f4       	brge	.+2      	; 0x1925c <lif_writedirindex+0xaa>
   1925a:	30 e0       	ldi	r19, 0x00	; 0
   1925c:	e3 2e       	mov	r14, r19
   1925e:	f2 2e       	mov	r15, r18
   19260:	c7 01       	movw	r24, r14
   19262:	a0 96       	adiw	r28, 0x20	; 32
   19264:	ea e0       	ldi	r30, 0x0A	; 10
   19266:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0001926a <lif_writedirEOF>:
   1926a:	0f 93       	push	r16
   1926c:	1f 93       	push	r17
   1926e:	cf 93       	push	r28
   19270:	df 93       	push	r29
   19272:	ec 01       	movw	r28, r24
   19274:	8b 01       	movw	r16, r22
   19276:	33 da       	rcall	.-2970   	; 0x186de <lif_dir_clear>
   19278:	fe 01       	movw	r30, r28
   1927a:	e6 5a       	subi	r30, 0xA6	; 166
   1927c:	ff 4f       	sbci	r31, 0xFF	; 255
   1927e:	8f ef       	ldi	r24, 0xFF	; 255
   19280:	9f ef       	ldi	r25, 0xFF	; 255
   19282:	91 83       	std	Z+1, r25	; 0x01
   19284:	80 83       	st	Z, r24
   19286:	1b a3       	std	Y+35, r17	; 0x23
   19288:	0a a3       	std	Y+34, r16	; 0x22
   1928a:	b8 01       	movw	r22, r16
   1928c:	ce 01       	movw	r24, r28
   1928e:	91 df       	rcall	.-222    	; 0x191b2 <lif_writedirindex>
   19290:	df 91       	pop	r29
   19292:	cf 91       	pop	r28
   19294:	1f 91       	pop	r17
   19296:	0f 91       	pop	r16
   19298:	08 95       	ret

0001929a <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   1929a:	2f 92       	push	r2
   1929c:	3f 92       	push	r3
   1929e:	4f 92       	push	r4
   192a0:	5f 92       	push	r5
   192a2:	6f 92       	push	r6
   192a4:	7f 92       	push	r7
   192a6:	8f 92       	push	r8
   192a8:	af 92       	push	r10
   192aa:	bf 92       	push	r11
   192ac:	cf 92       	push	r12
   192ae:	df 92       	push	r13
   192b0:	ef 92       	push	r14
   192b2:	ff 92       	push	r15
   192b4:	0f 93       	push	r16
   192b6:	1f 93       	push	r17
   192b8:	cf 93       	push	r28
   192ba:	df 93       	push	r29
   192bc:	cd b7       	in	r28, 0x3d	; 61
   192be:	de b7       	in	r29, 0x3e	; 62
   192c0:	2f 97       	sbiw	r28, 0x0f	; 15
   192c2:	0f b6       	in	r0, 0x3f	; 63
   192c4:	f8 94       	cli
   192c6:	de bf       	out	0x3e, r29	; 62
   192c8:	0f be       	out	0x3f, r0	; 63
   192ca:	cd bf       	out	0x3d, r28	; 61
   192cc:	9f 87       	std	Y+15, r25	; 0x0f
   192ce:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   192d0:	fc 01       	movw	r30, r24
   192d2:	24 84       	ldd	r2, Z+12	; 0x0c
   192d4:	35 84       	ldd	r3, Z+13	; 0x0d
   192d6:	46 84       	ldd	r4, Z+14	; 0x0e
   192d8:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   192da:	80 89       	ldd	r24, Z+16	; 0x10
   192dc:	91 89       	ldd	r25, Z+17	; 0x11
   192de:	a2 89       	ldd	r26, Z+18	; 0x12
   192e0:	b3 89       	ldd	r27, Z+19	; 0x13
   192e2:	80 8f       	std	Z+24, r24	; 0x18
   192e4:	91 8f       	std	Z+25, r25	; 0x19
   192e6:	a2 8f       	std	Z+26, r26	; 0x1a
   192e8:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   192ea:	14 8a       	std	Z+20, r1	; 0x14
   192ec:	15 8a       	std	Z+21, r1	; 0x15
   192ee:	16 8a       	std	Z+22, r1	; 0x16
   192f0:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   192f2:	17 8e       	std	Z+31, r1	; 0x1f
   192f4:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   192f6:	15 8e       	std	Z+29, r1	; 0x1d
   192f8:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   192fa:	11 a2       	std	Z+33, r1	; 0x21
   192fc:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   192fe:	13 a2       	std	Z+35, r1	; 0x23
   19300:	12 a2       	std	Z+34, r1	; 0x22
   19302:	cc 24       	eor	r12, r12
   19304:	c3 94       	inc	r12
   19306:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19308:	0f ef       	ldi	r16, 0xFF	; 255
   1930a:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   1930c:	e6 5a       	subi	r30, 0xA6	; 166
   1930e:	ff 4f       	sbci	r31, 0xFF	; 255
   19310:	f9 87       	std	Y+9, r31	; 0x09
   19312:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19314:	ae 84       	ldd	r10, Y+14	; 0x0e
   19316:	bf 84       	ldd	r11, Y+15	; 0x0f
   19318:	fc e5       	ldi	r31, 0x5C	; 92
   1931a:	af 0e       	add	r10, r31
   1931c:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1931e:	8e 85       	ldd	r24, Y+14	; 0x0e
   19320:	9f 85       	ldd	r25, Y+15	; 0x0f
   19322:	80 5a       	subi	r24, 0xA0	; 160
   19324:	9f 4f       	sbci	r25, 0xFF	; 255
   19326:	9b 87       	std	Y+11, r25	; 0x0b
   19328:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1932a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1932c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1932e:	e1 5b       	subi	r30, 0xB1	; 177
   19330:	ff 4f       	sbci	r31, 0xFF	; 255
   19332:	fd 87       	std	Y+13, r31	; 0x0d
   19334:	ec 87       	std	Y+12, r30	; 0x0c
   19336:	8b e1       	ldi	r24, 0x1B	; 27
   19338:	99 e3       	ldi	r25, 0x39	; 57
   1933a:	3c 01       	movw	r6, r24
   1933c:	81 2c       	mov	r8, r1
   1933e:	76 01       	movw	r14, r12
   19340:	21 e0       	ldi	r18, 0x01	; 1
   19342:	e2 1a       	sub	r14, r18
   19344:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19346:	b7 01       	movw	r22, r14
   19348:	8e 85       	ldd	r24, Y+14	; 0x0e
   1934a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1934c:	cb de       	rcall	.-618    	; 0x190e4 <lif_readdirindex>
   1934e:	89 2b       	or	r24, r25
   19350:	19 f4       	brne	.+6      	; 0x19358 <lif_updatefree+0xbe>
        {
            return(NULL);
   19352:	80 e0       	ldi	r24, 0x00	; 0
   19354:	90 e0       	ldi	r25, 0x00	; 0
   19356:	93 c0       	rjmp	.+294    	; 0x1947e <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19358:	e8 85       	ldd	r30, Y+8	; 0x08
   1935a:	f9 85       	ldd	r31, Y+9	; 0x09
   1935c:	80 81       	ld	r24, Z
   1935e:	91 81       	ldd	r25, Z+1	; 0x01
   19360:	8f 3f       	cpi	r24, 0xFF	; 255
   19362:	ff ef       	ldi	r31, 0xFF	; 255
   19364:	9f 07       	cpc	r25, r31
   19366:	c1 f4       	brne	.+48     	; 0x19398 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19368:	ee 85       	ldd	r30, Y+14	; 0x0e
   1936a:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1936c:	0f 3f       	cpi	r16, 0xFF	; 255
   1936e:	2f ef       	ldi	r18, 0xFF	; 255
   19370:	12 07       	cpc	r17, r18
   19372:	09 f4       	brne	.+2      	; 0x19376 <lif_updatefree+0xdc>
   19374:	7a c0       	rjmp	.+244    	; 0x1946a <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19376:	13 a3       	std	Z+35, r17	; 0x23
   19378:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   1937a:	e0 1a       	sub	r14, r16
   1937c:	f1 0a       	sbc	r15, r17
   1937e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19380:	97 8d       	ldd	r25, Z+31	; 0x1f
   19382:	8e 19       	sub	r24, r14
   19384:	9f 09       	sbc	r25, r15
   19386:	97 8f       	std	Z+31, r25	; 0x1f
   19388:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   1938a:	b8 01       	movw	r22, r16
   1938c:	cf 01       	movw	r24, r30
   1938e:	6d df       	rcall	.-294    	; 0x1926a <lif_writedirEOF>
   19390:	89 2b       	or	r24, r25
   19392:	09 f0       	breq	.+2      	; 0x19396 <lif_updatefree+0xfc>
   19394:	6c c0       	rjmp	.+216    	; 0x1946e <lif_updatefree+0x1d4>
   19396:	dd cf       	rjmp	.-70     	; 0x19352 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19398:	89 2b       	or	r24, r25
   1939a:	81 f4       	brne	.+32     	; 0x193bc <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   1939c:	0f 3f       	cpi	r16, 0xFF	; 255
   1939e:	ff ef       	ldi	r31, 0xFF	; 255
   193a0:	1f 07       	cpc	r17, r31
   193a2:	09 f4       	brne	.+2      	; 0x193a6 <lif_updatefree+0x10c>
   193a4:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   193a6:	ee 85       	ldd	r30, Y+14	; 0x0e
   193a8:	ff 85       	ldd	r31, Y+15	; 0x0f
   193aa:	86 8d       	ldd	r24, Z+30	; 0x1e
   193ac:	97 8d       	ldd	r25, Z+31	; 0x1f
   193ae:	01 96       	adiw	r24, 0x01	; 1
   193b0:	97 8f       	std	Z+31, r25	; 0x1f
   193b2:	86 8f       	std	Z+30, r24	; 0x1e
   193b4:	ff ef       	ldi	r31, 0xFF	; 255
   193b6:	cf 1a       	sub	r12, r31
   193b8:	df 0a       	sbc	r13, r31
   193ba:	c1 cf       	rjmp	.-126    	; 0x1933e <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   193bc:	f5 01       	movw	r30, r10
   193be:	80 81       	ld	r24, Z
   193c0:	91 81       	ldd	r25, Z+1	; 0x01
   193c2:	a2 81       	ldd	r26, Z+2	; 0x02
   193c4:	b3 81       	ldd	r27, Z+3	; 0x03
   193c6:	82 15       	cp	r24, r2
   193c8:	93 05       	cpc	r25, r3
   193ca:	a4 05       	cpc	r26, r4
   193cc:	b5 05       	cpc	r27, r5
   193ce:	c8 f4       	brcc	.+50     	; 0x19402 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   193d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   193d4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193d8:	92 ff       	sbrs	r25, 2
   193da:	13 c0       	rjmp	.+38     	; 0x19402 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   193dc:	8c 85       	ldd	r24, Y+12	; 0x0c
   193de:	9d 85       	ldd	r25, Y+13	; 0x0d
   193e0:	ed b7       	in	r30, 0x3d	; 61
   193e2:	fe b7       	in	r31, 0x3e	; 62
   193e4:	97 83       	std	Z+7, r25	; 0x07
   193e6:	86 83       	std	Z+6, r24	; 0x06
   193e8:	ee 85       	ldd	r30, Y+14	; 0x0e
   193ea:	ff 85       	ldd	r31, Y+15	; 0x0f
   193ec:	80 81       	ld	r24, Z
   193ee:	91 81       	ldd	r25, Z+1	; 0x01
   193f0:	ed b7       	in	r30, 0x3d	; 61
   193f2:	fe b7       	in	r31, 0x3e	; 62
   193f4:	95 83       	std	Z+5, r25	; 0x05
   193f6:	84 83       	std	Z+4, r24	; 0x04
   193f8:	61 82       	std	Z+1, r6	; 0x01
   193fa:	72 82       	std	Z+2, r7	; 0x02
   193fc:	83 82       	std	Z+3, r8	; 0x03
   193fe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19402:	ea 85       	ldd	r30, Y+10	; 0x0a
   19404:	fb 85       	ldd	r31, Y+11	; 0x0b
   19406:	80 81       	ld	r24, Z
   19408:	91 81       	ldd	r25, Z+1	; 0x01
   1940a:	a2 81       	ldd	r26, Z+2	; 0x02
   1940c:	b3 81       	ldd	r27, Z+3	; 0x03
   1940e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19410:	ff 85       	ldd	r31, Y+15	; 0x0f
   19412:	44 89       	ldd	r20, Z+20	; 0x14
   19414:	55 89       	ldd	r21, Z+21	; 0x15
   19416:	66 89       	ldd	r22, Z+22	; 0x16
   19418:	77 89       	ldd	r23, Z+23	; 0x17
   1941a:	48 0f       	add	r20, r24
   1941c:	59 1f       	adc	r21, r25
   1941e:	6a 1f       	adc	r22, r26
   19420:	7b 1f       	adc	r23, r27
   19422:	44 8b       	std	Z+20, r20	; 0x14
   19424:	55 8b       	std	Z+21, r21	; 0x15
   19426:	66 8b       	std	Z+22, r22	; 0x16
   19428:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1942a:	40 8d       	ldd	r20, Z+24	; 0x18
   1942c:	51 8d       	ldd	r21, Z+25	; 0x19
   1942e:	62 8d       	ldd	r22, Z+26	; 0x1a
   19430:	73 8d       	ldd	r23, Z+27	; 0x1b
   19432:	48 1b       	sub	r20, r24
   19434:	59 0b       	sbc	r21, r25
   19436:	6a 0b       	sbc	r22, r26
   19438:	7b 0b       	sbc	r23, r27
   1943a:	40 8f       	std	Z+24, r20	; 0x18
   1943c:	51 8f       	std	Z+25, r21	; 0x19
   1943e:	62 8f       	std	Z+26, r22	; 0x1a
   19440:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19442:	24 8d       	ldd	r18, Z+28	; 0x1c
   19444:	35 8d       	ldd	r19, Z+29	; 0x1d
   19446:	2f 5f       	subi	r18, 0xFF	; 255
   19448:	3f 4f       	sbci	r19, 0xFF	; 255
   1944a:	35 8f       	std	Z+29, r19	; 0x1d
   1944c:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1944e:	f5 01       	movw	r30, r10
   19450:	40 81       	ld	r20, Z
   19452:	51 81       	ldd	r21, Z+1	; 0x01
   19454:	62 81       	ldd	r22, Z+2	; 0x02
   19456:	73 81       	ldd	r23, Z+3	; 0x03
   19458:	1c 01       	movw	r2, r24
   1945a:	2d 01       	movw	r4, r26
   1945c:	24 0e       	add	r2, r20
   1945e:	35 1e       	adc	r3, r21
   19460:	46 1e       	adc	r4, r22
   19462:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19464:	0f ef       	ldi	r16, 0xFF	; 255
   19466:	1f ef       	ldi	r17, 0xFF	; 255
   19468:	a5 cf       	rjmp	.-182    	; 0x193b4 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   1946a:	f3 a2       	std	Z+35, r15	; 0x23
   1946c:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1946e:	8f ef       	ldi	r24, 0xFF	; 255
   19470:	9f ef       	ldi	r25, 0xFF	; 255
   19472:	ee 85       	ldd	r30, Y+14	; 0x0e
   19474:	ff 85       	ldd	r31, Y+15	; 0x0f
   19476:	91 a3       	std	Z+33, r25	; 0x21
   19478:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   1947a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1947c:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   1947e:	2f 96       	adiw	r28, 0x0f	; 15
   19480:	0f b6       	in	r0, 0x3f	; 63
   19482:	f8 94       	cli
   19484:	de bf       	out	0x3e, r29	; 62
   19486:	0f be       	out	0x3f, r0	; 63
   19488:	cd bf       	out	0x3d, r28	; 61
   1948a:	df 91       	pop	r29
   1948c:	cf 91       	pop	r28
   1948e:	1f 91       	pop	r17
   19490:	0f 91       	pop	r16
   19492:	ff 90       	pop	r15
   19494:	ef 90       	pop	r14
   19496:	df 90       	pop	r13
   19498:	cf 90       	pop	r12
   1949a:	bf 90       	pop	r11
   1949c:	af 90       	pop	r10
   1949e:	8f 90       	pop	r8
   194a0:	7f 90       	pop	r7
   194a2:	6f 90       	pop	r6
   194a4:	5f 90       	pop	r5
   194a6:	4f 90       	pop	r4
   194a8:	3f 90       	pop	r3
   194aa:	2f 90       	pop	r2
   194ac:	08 95       	ret

000194ae <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   194ae:	a9 e2       	ldi	r26, 0x29	; 41
   194b0:	b1 e0       	ldi	r27, 0x01	; 1
   194b2:	ed e5       	ldi	r30, 0x5D	; 93
   194b4:	fa ec       	ldi	r31, 0xCA	; 202
   194b6:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   194ba:	4c 01       	movw	r8, r24
   194bc:	3b 01       	movw	r6, r22
   194be:	19 01       	movw	r2, r18
   194c0:	2a 01       	movw	r4, r20
   194c2:	ca 5d       	subi	r28, 0xDA	; 218
   194c4:	de 4f       	sbci	r29, 0xFE	; 254
   194c6:	e8 82       	st	Y, r14
   194c8:	f9 82       	std	Y+1, r15	; 0x01
   194ca:	0a 83       	std	Y+2, r16	; 0x02
   194cc:	1b 83       	std	Y+3, r17	; 0x03
   194ce:	c6 52       	subi	r28, 0x26	; 38
   194d0:	d1 40       	sbci	r29, 0x01	; 1
   194d2:	c2 5e       	subi	r28, 0xE2	; 226
   194d4:	de 4f       	sbci	r29, 0xFE	; 254
   194d6:	a8 82       	st	Y, r10
   194d8:	b9 82       	std	Y+1, r11	; 0x01
   194da:	ca 82       	std	Y+2, r12	; 0x02
   194dc:	db 82       	std	Y+3, r13	; 0x03
   194de:	ce 51       	subi	r28, 0x1E	; 30
   194e0:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   194e2:	80 e0       	ldi	r24, 0x00	; 0
   194e4:	90 e0       	ldi	r25, 0x00	; 0
   194e6:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <time>
   194ea:	5b 01       	movw	r10, r22
   194ec:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   194ee:	64 e7       	ldi	r22, 0x74	; 116
   194f0:	70 e0       	ldi	r23, 0x00	; 0
   194f2:	80 e0       	ldi	r24, 0x00	; 0
   194f4:	90 e0       	ldi	r25, 0x00	; 0
   194f6:	0e 94 2a be 	call	0x17c54	; 0x17c54 <lif_calloc>
   194fa:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   194fc:	89 2b       	or	r24, r25
   194fe:	09 f4       	brne	.+2      	; 0x19502 <lif_create_volume+0x54>
   19500:	b6 c2       	rjmp	.+1388   	; 0x19a6e <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19502:	c2 5e       	subi	r28, 0xE2	; 226
   19504:	de 4f       	sbci	r29, 0xFE	; 254
   19506:	28 81       	ld	r18, Y
   19508:	39 81       	ldd	r19, Y+1	; 0x01
   1950a:	4a 81       	ldd	r20, Y+2	; 0x02
   1950c:	5b 81       	ldd	r21, Y+3	; 0x03
   1950e:	ce 51       	subi	r28, 0x1E	; 30
   19510:	d1 40       	sbci	r29, 0x01	; 1
   19512:	ed b7       	in	r30, 0x3d	; 61
   19514:	fe b7       	in	r31, 0x3e	; 62
   19516:	20 8b       	std	Z+16, r18	; 0x10
   19518:	31 8b       	std	Z+17, r19	; 0x11
   1951a:	42 8b       	std	Z+18, r20	; 0x12
   1951c:	53 8b       	std	Z+19, r21	; 0x13
   1951e:	ca 5d       	subi	r28, 0xDA	; 218
   19520:	de 4f       	sbci	r29, 0xFE	; 254
   19522:	28 81       	ld	r18, Y
   19524:	39 81       	ldd	r19, Y+1	; 0x01
   19526:	4a 81       	ldd	r20, Y+2	; 0x02
   19528:	5b 81       	ldd	r21, Y+3	; 0x03
   1952a:	c6 52       	subi	r28, 0x26	; 38
   1952c:	d1 40       	sbci	r29, 0x01	; 1
   1952e:	24 87       	std	Z+12, r18	; 0x0c
   19530:	35 87       	std	Z+13, r19	; 0x0d
   19532:	46 87       	std	Z+14, r20	; 0x0e
   19534:	57 87       	std	Z+15, r21	; 0x0f
   19536:	20 86       	std	Z+8, r2	; 0x08
   19538:	31 86       	std	Z+9, r3	; 0x09
   1953a:	42 86       	std	Z+10, r4	; 0x0a
   1953c:	53 86       	std	Z+11, r5	; 0x0b
   1953e:	77 82       	std	Z+7, r7	; 0x07
   19540:	66 82       	std	Z+6, r6	; 0x06
   19542:	95 82       	std	Z+5, r9	; 0x05
   19544:	84 82       	std	Z+4, r8	; 0x04
   19546:	86 ef       	ldi	r24, 0xF6	; 246
   19548:	99 e3       	ldi	r25, 0x39	; 57
   1954a:	a0 e0       	ldi	r26, 0x00	; 0
   1954c:	81 83       	std	Z+1, r24	; 0x01
   1954e:	92 83       	std	Z+2, r25	; 0x02
   19550:	a3 83       	std	Z+3, r26	; 0x03
   19552:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19556:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1955a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1955e:	92 ff       	sbrs	r25, 2
   19560:	04 c0       	rjmp	.+8      	; 0x1956a <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19562:	60 e3       	ldi	r22, 0x30	; 48
   19564:	76 e1       	ldi	r23, 0x16	; 22
   19566:	c7 01       	movw	r24, r14
   19568:	c9 d8       	rcall	.-3694   	; 0x186fc <lif_dump_vol>

    lif_image_clear(LIF);
   1956a:	c7 01       	movw	r24, r14
   1956c:	b2 d8       	rcall	.-3740   	; 0x186d2 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1956e:	80 e0       	ldi	r24, 0x00	; 0
   19570:	90 e8       	ldi	r25, 0x80	; 128
   19572:	f7 01       	movw	r30, r14
   19574:	95 a3       	std	Z+37, r25	; 0x25
   19576:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19578:	46 e0       	ldi	r20, 0x06	; 6
   1957a:	50 e0       	ldi	r21, 0x00	; 0
   1957c:	b3 01       	movw	r22, r6
   1957e:	c7 01       	movw	r24, r14
   19580:	86 96       	adiw	r24, 0x26	; 38
   19582:	0e 94 6d c0 	call	0x180da	; 0x180da <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19586:	f7 01       	movw	r30, r14
   19588:	25 a6       	std	Z+45, r2	; 0x2d
   1958a:	36 a6       	std	Z+46, r3	; 0x2e
   1958c:	47 a6       	std	Z+47, r4	; 0x2f
   1958e:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19590:	ca 5d       	subi	r28, 0xDA	; 218
   19592:	de 4f       	sbci	r29, 0xFE	; 254
   19594:	28 81       	ld	r18, Y
   19596:	39 81       	ldd	r19, Y+1	; 0x01
   19598:	4a 81       	ldd	r20, Y+2	; 0x02
   1959a:	5b 81       	ldd	r21, Y+3	; 0x03
   1959c:	c6 52       	subi	r28, 0x26	; 38
   1959e:	d1 40       	sbci	r29, 0x01	; 1
   195a0:	25 ab       	std	Z+53, r18	; 0x35
   195a2:	36 ab       	std	Z+54, r19	; 0x36
   195a4:	47 ab       	std	Z+55, r20	; 0x37
   195a6:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   195a8:	80 e0       	ldi	r24, 0x00	; 0
   195aa:	90 e1       	ldi	r25, 0x10	; 16
   195ac:	92 ab       	std	Z+50, r25	; 0x32
   195ae:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   195b0:	fd 96       	adiw	r30, 0x3d	; 61
   195b2:	10 82       	st	Z, r1
   195b4:	11 82       	std	Z+1, r1	; 0x01
   195b6:	12 82       	std	Z+2, r1	; 0x02
   195b8:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   195ba:	34 96       	adiw	r30, 0x04	; 4
   195bc:	10 82       	st	Z, r1
   195be:	11 82       	std	Z+1, r1	; 0x01
   195c0:	12 82       	std	Z+2, r1	; 0x02
   195c2:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   195c4:	34 96       	adiw	r30, 0x04	; 4
   195c6:	10 82       	st	Z, r1
   195c8:	11 82       	std	Z+1, r1	; 0x01
   195ca:	12 82       	std	Z+2, r1	; 0x02
   195cc:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   195ce:	a7 01       	movw	r20, r14
   195d0:	47 5b       	subi	r20, 0xB7	; 183
   195d2:	5f 4f       	sbci	r21, 0xFF	; 255
   195d4:	c6 01       	movw	r24, r12
   195d6:	b5 01       	movw	r22, r10
   195d8:	0e 94 92 c2 	call	0x18524	; 0x18524 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   195dc:	c4 01       	movw	r24, r8
   195de:	0e 94 75 be 	call	0x17cea	; 0x17cea <lif_stralloc>
   195e2:	d7 01       	movw	r26, r14
   195e4:	8d 93       	st	X+, r24
   195e6:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   195e8:	89 2b       	or	r24, r25
   195ea:	09 f4       	brne	.+2      	; 0x195ee <lif_create_volume+0x140>
   195ec:	35 c2       	rjmp	.+1130   	; 0x19a58 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   195ee:	c2 5e       	subi	r28, 0xE2	; 226
   195f0:	de 4f       	sbci	r29, 0xFE	; 254
   195f2:	28 81       	ld	r18, Y
   195f4:	39 81       	ldd	r19, Y+1	; 0x01
   195f6:	4a 81       	ldd	r20, Y+2	; 0x02
   195f8:	5b 81       	ldd	r21, Y+3	; 0x03
   195fa:	ce 51       	subi	r28, 0x1E	; 30
   195fc:	d1 40       	sbci	r29, 0x01	; 1
   195fe:	f7 01       	movw	r30, r14
   19600:	20 8b       	std	Z+16, r18	; 0x10
   19602:	31 8b       	std	Z+17, r19	; 0x11
   19604:	42 8b       	std	Z+18, r20	; 0x12
   19606:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19608:	ca 5d       	subi	r28, 0xDA	; 218
   1960a:	de 4f       	sbci	r29, 0xFE	; 254
   1960c:	88 81       	ld	r24, Y
   1960e:	99 81       	ldd	r25, Y+1	; 0x01
   19610:	aa 81       	ldd	r26, Y+2	; 0x02
   19612:	bb 81       	ldd	r27, Y+3	; 0x03
   19614:	c6 52       	subi	r28, 0x26	; 38
   19616:	d1 40       	sbci	r29, 0x01	; 1
   19618:	82 0d       	add	r24, r2
   1961a:	93 1d       	adc	r25, r3
   1961c:	a4 1d       	adc	r26, r4
   1961e:	b5 1d       	adc	r27, r5
   19620:	84 87       	std	Z+12, r24	; 0x0c
   19622:	95 87       	std	Z+13, r25	; 0x0d
   19624:	a6 87       	std	Z+14, r26	; 0x0e
   19626:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19628:	82 0f       	add	r24, r18
   1962a:	93 1f       	adc	r25, r19
   1962c:	a4 1f       	adc	r26, r20
   1962e:	b5 1f       	adc	r27, r21
   19630:	84 83       	std	Z+4, r24	; 0x04
   19632:	95 83       	std	Z+5, r25	; 0x05
   19634:	a6 83       	std	Z+6, r26	; 0x06
   19636:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19638:	ba 2f       	mov	r27, r26
   1963a:	a9 2f       	mov	r26, r25
   1963c:	98 2f       	mov	r25, r24
   1963e:	88 27       	eor	r24, r24
   19640:	80 87       	std	Z+8, r24	; 0x08
   19642:	91 87       	std	Z+9, r25	; 0x09
   19644:	a2 87       	std	Z+10, r26	; 0x0a
   19646:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19648:	20 8f       	std	Z+24, r18	; 0x18
   1964a:	31 8f       	std	Z+25, r19	; 0x19
   1964c:	42 8f       	std	Z+26, r20	; 0x1a
   1964e:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19650:	14 8a       	std	Z+20, r1	; 0x14
   19652:	15 8a       	std	Z+21, r1	; 0x15
   19654:	16 8a       	std	Z+22, r1	; 0x16
   19656:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19658:	15 8e       	std	Z+29, r1	; 0x1d
   1965a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   1965c:	17 8e       	std	Z+31, r1	; 0x1f
   1965e:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19660:	11 a2       	std	Z+33, r1	; 0x21
   19662:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19664:	13 a2       	std	Z+35, r1	; 0x23
   19666:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19668:	61 2c       	mov	r6, r1
   1966a:	77 24       	eor	r7, r7
   1966c:	73 94       	inc	r7
   1966e:	9e 01       	movw	r18, r28
   19670:	2c 5e       	subi	r18, 0xEC	; 236
   19672:	3f 4f       	sbci	r19, 0xFF	; 255
   19674:	49 01       	movw	r8, r18
   19676:	d9 01       	movw	r26, r18
   19678:	f3 01       	movw	r30, r6
   1967a:	1d 92       	st	X+, r1
   1967c:	31 97       	sbiw	r30, 0x01	; 1
   1967e:	e9 f7       	brne	.-6      	; 0x1967a <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19680:	b9 01       	movw	r22, r18
   19682:	c7 01       	movw	r24, r14
   19684:	0e 94 aa c0 	call	0x18154	; 0x18154 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19688:	66 e1       	ldi	r22, 0x16	; 22
   1968a:	79 e0       	ldi	r23, 0x09	; 9
   1968c:	d7 01       	movw	r26, r14
   1968e:	8d 91       	ld	r24, X+
   19690:	9c 91       	ld	r25, X
   19692:	0e 94 94 be 	call	0x17d28	; 0x17d28 <lif_open>
   19696:	f7 01       	movw	r30, r14
   19698:	93 83       	std	Z+3, r25	; 0x03
   1969a:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   1969c:	89 2b       	or	r24, r25
   1969e:	09 f4       	brne	.+2      	; 0x196a2 <lif_create_volume+0x1f4>
   196a0:	db c1       	rjmp	.+950    	; 0x19a58 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196a2:	00 e0       	ldi	r16, 0x00	; 0
   196a4:	11 e0       	ldi	r17, 0x01	; 1
   196a6:	20 e0       	ldi	r18, 0x00	; 0
   196a8:	30 e0       	ldi	r19, 0x00	; 0
   196aa:	a9 01       	movw	r20, r18
   196ac:	b4 01       	movw	r22, r8
   196ae:	c7 01       	movw	r24, r14
   196b0:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
   196b4:	9c 01       	movw	r18, r24
   196b6:	99 0f       	add	r25, r25
   196b8:	44 0b       	sbc	r20, r20
   196ba:	55 0b       	sbc	r21, r21
   196bc:	ca 5e       	subi	r28, 0xEA	; 234
   196be:	de 4f       	sbci	r29, 0xFE	; 254
   196c0:	28 83       	st	Y, r18
   196c2:	39 83       	std	Y+1, r19	; 0x01
   196c4:	4a 83       	std	Y+2, r20	; 0x02
   196c6:	5b 83       	std	Y+3, r21	; 0x03
   196c8:	c6 51       	subi	r28, 0x16	; 22
   196ca:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   196cc:	2f 3f       	cpi	r18, 0xFF	; 255
   196ce:	31 05       	cpc	r19, r1
   196d0:	41 05       	cpc	r20, r1
   196d2:	51 05       	cpc	r21, r1
   196d4:	09 f0       	breq	.+2      	; 0x196d8 <lif_create_volume+0x22a>
   196d6:	0c f4       	brge	.+2      	; 0x196da <lif_create_volume+0x22c>
   196d8:	bf c1       	rjmp	.+894    	; 0x19a58 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   196da:	d4 01       	movw	r26, r8
   196dc:	f3 01       	movw	r30, r6
   196de:	1d 92       	st	X+, r1
   196e0:	31 97       	sbiw	r30, 0x01	; 1
   196e2:	e9 f7       	brne	.-6      	; 0x196de <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   196e4:	21 e0       	ldi	r18, 0x01	; 1
   196e6:	30 e0       	ldi	r19, 0x00	; 0
   196e8:	40 e0       	ldi	r20, 0x00	; 0
   196ea:	50 e0       	ldi	r21, 0x00	; 0
   196ec:	c6 5e       	subi	r28, 0xE6	; 230
   196ee:	de 4f       	sbci	r29, 0xFE	; 254
   196f0:	28 83       	st	Y, r18
   196f2:	39 83       	std	Y+1, r19	; 0x01
   196f4:	4a 83       	std	Y+2, r20	; 0x02
   196f6:	5b 83       	std	Y+3, r21	; 0x03
   196f8:	ca 51       	subi	r28, 0x1A	; 26
   196fa:	d1 40       	sbci	r29, 0x01	; 1
   196fc:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   196fe:	89 ee       	ldi	r24, 0xE9	; 233
   19700:	99 e3       	ldi	r25, 0x39	; 57
   19702:	3c 01       	movw	r6, r24
   19704:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19706:	c6 5e       	subi	r28, 0xE6	; 230
   19708:	de 4f       	sbci	r29, 0xFE	; 254
   1970a:	88 81       	ld	r24, Y
   1970c:	99 81       	ldd	r25, Y+1	; 0x01
   1970e:	aa 81       	ldd	r26, Y+2	; 0x02
   19710:	bb 81       	ldd	r27, Y+3	; 0x03
   19712:	ca 51       	subi	r28, 0x1A	; 26
   19714:	d1 40       	sbci	r29, 0x01	; 1
   19716:	82 15       	cp	r24, r2
   19718:	93 05       	cpc	r25, r3
   1971a:	a4 05       	cpc	r26, r4
   1971c:	b5 05       	cpc	r27, r5
   1971e:	0c f0       	brlt	.+2      	; 0x19722 <lif_create_volume+0x274>
   19720:	55 c0       	rjmp	.+170    	; 0x197cc <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19722:	00 e0       	ldi	r16, 0x00	; 0
   19724:	11 e0       	ldi	r17, 0x01	; 1
   19726:	ca 5e       	subi	r28, 0xEA	; 234
   19728:	de 4f       	sbci	r29, 0xFE	; 254
   1972a:	28 81       	ld	r18, Y
   1972c:	39 81       	ldd	r19, Y+1	; 0x01
   1972e:	4a 81       	ldd	r20, Y+2	; 0x02
   19730:	5b 81       	ldd	r21, Y+3	; 0x03
   19732:	c6 51       	subi	r28, 0x16	; 22
   19734:	d1 40       	sbci	r29, 0x01	; 1
   19736:	b6 01       	movw	r22, r12
   19738:	c7 01       	movw	r24, r14
   1973a:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
   1973e:	09 2e       	mov	r0, r25
   19740:	00 0c       	add	r0, r0
   19742:	aa 0b       	sbc	r26, r26
   19744:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19746:	8f 3f       	cpi	r24, 0xFF	; 255
   19748:	91 05       	cpc	r25, r1
   1974a:	a1 05       	cpc	r26, r1
   1974c:	b1 05       	cpc	r27, r1
   1974e:	09 f0       	breq	.+2      	; 0x19752 <lif_create_volume+0x2a4>
   19750:	0c f4       	brge	.+2      	; 0x19754 <lif_create_volume+0x2a6>
   19752:	82 c1       	rjmp	.+772    	; 0x19a58 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19754:	ca 5e       	subi	r28, 0xEA	; 234
   19756:	de 4f       	sbci	r29, 0xFE	; 254
   19758:	28 81       	ld	r18, Y
   1975a:	39 81       	ldd	r19, Y+1	; 0x01
   1975c:	4a 81       	ldd	r20, Y+2	; 0x02
   1975e:	5b 81       	ldd	r21, Y+3	; 0x03
   19760:	c6 51       	subi	r28, 0x16	; 22
   19762:	d1 40       	sbci	r29, 0x01	; 1
   19764:	28 0f       	add	r18, r24
   19766:	39 1f       	adc	r19, r25
   19768:	4a 1f       	adc	r20, r26
   1976a:	5b 1f       	adc	r21, r27
   1976c:	ca 5e       	subi	r28, 0xEA	; 234
   1976e:	de 4f       	sbci	r29, 0xFE	; 254
   19770:	28 83       	st	Y, r18
   19772:	39 83       	std	Y+1, r19	; 0x01
   19774:	4a 83       	std	Y+2, r20	; 0x02
   19776:	5b 83       	std	Y+3, r21	; 0x03
   19778:	c6 51       	subi	r28, 0x16	; 22
   1977a:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   1977c:	c6 5e       	subi	r28, 0xE6	; 230
   1977e:	de 4f       	sbci	r29, 0xFE	; 254
   19780:	88 81       	ld	r24, Y
   19782:	99 81       	ldd	r25, Y+1	; 0x01
   19784:	aa 81       	ldd	r26, Y+2	; 0x02
   19786:	bb 81       	ldd	r27, Y+3	; 0x03
   19788:	ca 51       	subi	r28, 0x1A	; 26
   1978a:	d1 40       	sbci	r29, 0x01	; 1
   1978c:	ed b7       	in	r30, 0x3d	; 61
   1978e:	fe b7       	in	r31, 0x3e	; 62
   19790:	84 83       	std	Z+4, r24	; 0x04
   19792:	95 83       	std	Z+5, r25	; 0x05
   19794:	a6 83       	std	Z+6, r26	; 0x06
   19796:	b7 83       	std	Z+7, r27	; 0x07
   19798:	61 82       	std	Z+1, r6	; 0x01
   1979a:	72 82       	std	Z+2, r7	; 0x02
   1979c:	83 82       	std	Z+3, r8	; 0x03
   1979e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   197a2:	c6 5e       	subi	r28, 0xE6	; 230
   197a4:	de 4f       	sbci	r29, 0xFE	; 254
   197a6:	28 81       	ld	r18, Y
   197a8:	39 81       	ldd	r19, Y+1	; 0x01
   197aa:	4a 81       	ldd	r20, Y+2	; 0x02
   197ac:	5b 81       	ldd	r21, Y+3	; 0x03
   197ae:	ca 51       	subi	r28, 0x1A	; 26
   197b0:	d1 40       	sbci	r29, 0x01	; 1
   197b2:	2f 5f       	subi	r18, 0xFF	; 255
   197b4:	3f 4f       	sbci	r19, 0xFF	; 255
   197b6:	4f 4f       	sbci	r20, 0xFF	; 255
   197b8:	5f 4f       	sbci	r21, 0xFF	; 255
   197ba:	c6 5e       	subi	r28, 0xE6	; 230
   197bc:	de 4f       	sbci	r29, 0xFE	; 254
   197be:	28 83       	st	Y, r18
   197c0:	39 83       	std	Y+1, r19	; 0x01
   197c2:	4a 83       	std	Y+2, r20	; 0x02
   197c4:	5b 83       	std	Y+3, r21	; 0x03
   197c6:	ca 51       	subi	r28, 0x1A	; 26
   197c8:	d1 40       	sbci	r29, 0x01	; 1
   197ca:	9d cf       	rjmp	.-198    	; 0x19706 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   197cc:	c7 01       	movw	r24, r14
   197ce:	0e 94 6f c3 	call	0x186de	; 0x186de <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   197d2:	8f ef       	ldi	r24, 0xFF	; 255
   197d4:	9f ef       	ldi	r25, 0xFF	; 255
   197d6:	f7 01       	movw	r30, r14
   197d8:	e6 5a       	subi	r30, 0xA6	; 166
   197da:	ff 4f       	sbci	r31, 0xFF	; 255
   197dc:	91 83       	std	Z+1, r25	; 0x01
   197de:	80 83       	st	Z, r24
   197e0:	46 01       	movw	r8, r12
   197e2:	6e 01       	movw	r12, r28
   197e4:	9c ee       	ldi	r25, 0xEC	; 236
   197e6:	c9 1a       	sub	r12, r25
   197e8:	9e ef       	ldi	r25, 0xFE	; 254
   197ea:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   197ec:	b4 01       	movw	r22, r8
   197ee:	c7 01       	movw	r24, r14
   197f0:	0e 94 b6 c1 	call	0x1836c	; 0x1836c <lif_dir2str>
   197f4:	a0 e2       	ldi	r26, 0x20	; 32
   197f6:	8a 0e       	add	r8, r26
   197f8:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   197fa:	c8 14       	cp	r12, r8
   197fc:	d9 04       	cpc	r13, r9
   197fe:	b1 f7       	brne	.-20     	; 0x197ec <lif_create_volume+0x33e>
   19800:	a1 2c       	mov	r10, r1
   19802:	b1 2c       	mov	r11, r1
   19804:	65 01       	movw	r12, r10
   19806:	fe 01       	movw	r30, r28
   19808:	74 96       	adiw	r30, 0x14	; 20
   1980a:	cc 5e       	subi	r28, 0xEC	; 236
   1980c:	de 4f       	sbci	r29, 0xFE	; 254
   1980e:	f9 83       	std	Y+1, r31	; 0x01
   19810:	e8 83       	st	Y, r30
   19812:	c4 51       	subi	r28, 0x14	; 20
   19814:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19816:	84 e6       	ldi	r24, 0x64	; 100
   19818:	28 2e       	mov	r2, r24
   1981a:	31 2c       	mov	r3, r1
   1981c:	41 2c       	mov	r4, r1
   1981e:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19820:	8c ed       	ldi	r24, 0xDC	; 220
   19822:	99 e3       	ldi	r25, 0x39	; 57
   19824:	3c 01       	movw	r6, r24
   19826:	81 2c       	mov	r8, r1
   19828:	c6 5e       	subi	r28, 0xE6	; 230
   1982a:	de 4f       	sbci	r29, 0xFE	; 254
   1982c:	28 81       	ld	r18, Y
   1982e:	39 81       	ldd	r19, Y+1	; 0x01
   19830:	4a 81       	ldd	r20, Y+2	; 0x02
   19832:	5b 81       	ldd	r21, Y+3	; 0x03
   19834:	ca 51       	subi	r28, 0x1A	; 26
   19836:	d1 40       	sbci	r29, 0x01	; 1
   19838:	2a 0d       	add	r18, r10
   1983a:	3b 1d       	adc	r19, r11
   1983c:	4c 1d       	adc	r20, r12
   1983e:	5d 1d       	adc	r21, r13
   19840:	ce 5d       	subi	r28, 0xDE	; 222
   19842:	de 4f       	sbci	r29, 0xFE	; 254
   19844:	28 83       	st	Y, r18
   19846:	39 83       	std	Y+1, r19	; 0x01
   19848:	4a 83       	std	Y+2, r20	; 0x02
   1984a:	5b 83       	std	Y+3, r21	; 0x03
   1984c:	c2 52       	subi	r28, 0x22	; 34
   1984e:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19850:	ca 5d       	subi	r28, 0xDA	; 218
   19852:	de 4f       	sbci	r29, 0xFE	; 254
   19854:	88 81       	ld	r24, Y
   19856:	99 81       	ldd	r25, Y+1	; 0x01
   19858:	aa 81       	ldd	r26, Y+2	; 0x02
   1985a:	bb 81       	ldd	r27, Y+3	; 0x03
   1985c:	c6 52       	subi	r28, 0x26	; 38
   1985e:	d1 40       	sbci	r29, 0x01	; 1
   19860:	a8 16       	cp	r10, r24
   19862:	b9 06       	cpc	r11, r25
   19864:	ca 06       	cpc	r12, r26
   19866:	db 06       	cpc	r13, r27
   19868:	0c f0       	brlt	.+2      	; 0x1986c <lif_create_volume+0x3be>
   1986a:	58 c0       	rjmp	.+176    	; 0x1991c <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1986c:	00 e0       	ldi	r16, 0x00	; 0
   1986e:	11 e0       	ldi	r17, 0x01	; 1
   19870:	ca 5e       	subi	r28, 0xEA	; 234
   19872:	de 4f       	sbci	r29, 0xFE	; 254
   19874:	28 81       	ld	r18, Y
   19876:	39 81       	ldd	r19, Y+1	; 0x01
   19878:	4a 81       	ldd	r20, Y+2	; 0x02
   1987a:	5b 81       	ldd	r21, Y+3	; 0x03
   1987c:	c6 51       	subi	r28, 0x16	; 22
   1987e:	d1 40       	sbci	r29, 0x01	; 1
   19880:	be 01       	movw	r22, r28
   19882:	6c 5e       	subi	r22, 0xEC	; 236
   19884:	7f 4f       	sbci	r23, 0xFF	; 255
   19886:	c7 01       	movw	r24, r14
   19888:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
   1988c:	09 2e       	mov	r0, r25
   1988e:	00 0c       	add	r0, r0
   19890:	aa 0b       	sbc	r26, r26
   19892:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19894:	8f 3f       	cpi	r24, 0xFF	; 255
   19896:	91 05       	cpc	r25, r1
   19898:	a1 05       	cpc	r26, r1
   1989a:	b1 05       	cpc	r27, r1
   1989c:	09 f0       	breq	.+2      	; 0x198a0 <lif_create_volume+0x3f2>
   1989e:	0c f4       	brge	.+2      	; 0x198a2 <lif_create_volume+0x3f4>
   198a0:	db c0       	rjmp	.+438    	; 0x19a58 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   198a2:	ca 5e       	subi	r28, 0xEA	; 234
   198a4:	de 4f       	sbci	r29, 0xFE	; 254
   198a6:	28 81       	ld	r18, Y
   198a8:	39 81       	ldd	r19, Y+1	; 0x01
   198aa:	4a 81       	ldd	r20, Y+2	; 0x02
   198ac:	5b 81       	ldd	r21, Y+3	; 0x03
   198ae:	c6 51       	subi	r28, 0x16	; 22
   198b0:	d1 40       	sbci	r29, 0x01	; 1
   198b2:	28 0f       	add	r18, r24
   198b4:	39 1f       	adc	r19, r25
   198b6:	4a 1f       	adc	r20, r26
   198b8:	5b 1f       	adc	r21, r27
   198ba:	ca 5e       	subi	r28, 0xEA	; 234
   198bc:	de 4f       	sbci	r29, 0xFE	; 254
   198be:	28 83       	st	Y, r18
   198c0:	39 83       	std	Y+1, r19	; 0x01
   198c2:	4a 83       	std	Y+2, r20	; 0x02
   198c4:	5b 83       	std	Y+3, r21	; 0x03
   198c6:	c6 51       	subi	r28, 0x16	; 22
   198c8:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   198ca:	ce 5d       	subi	r28, 0xDE	; 222
   198cc:	de 4f       	sbci	r29, 0xFE	; 254
   198ce:	68 81       	ld	r22, Y
   198d0:	79 81       	ldd	r23, Y+1	; 0x01
   198d2:	8a 81       	ldd	r24, Y+2	; 0x02
   198d4:	9b 81       	ldd	r25, Y+3	; 0x03
   198d6:	c2 52       	subi	r28, 0x22	; 34
   198d8:	d1 40       	sbci	r29, 0x01	; 1
   198da:	a2 01       	movw	r20, r4
   198dc:	91 01       	movw	r18, r2
   198de:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
   198e2:	67 2b       	or	r22, r23
   198e4:	68 2b       	or	r22, r24
   198e6:	69 2b       	or	r22, r25
   198e8:	99 f4       	brne	.+38     	; 0x19910 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   198ea:	ce 5d       	subi	r28, 0xDE	; 222
   198ec:	de 4f       	sbci	r29, 0xFE	; 254
   198ee:	88 81       	ld	r24, Y
   198f0:	99 81       	ldd	r25, Y+1	; 0x01
   198f2:	aa 81       	ldd	r26, Y+2	; 0x02
   198f4:	bb 81       	ldd	r27, Y+3	; 0x03
   198f6:	c2 52       	subi	r28, 0x22	; 34
   198f8:	d1 40       	sbci	r29, 0x01	; 1
   198fa:	ed b7       	in	r30, 0x3d	; 61
   198fc:	fe b7       	in	r31, 0x3e	; 62
   198fe:	84 83       	std	Z+4, r24	; 0x04
   19900:	95 83       	std	Z+5, r25	; 0x05
   19902:	a6 83       	std	Z+6, r26	; 0x06
   19904:	b7 83       	std	Z+7, r27	; 0x07
   19906:	61 82       	std	Z+1, r6	; 0x01
   19908:	72 82       	std	Z+2, r7	; 0x02
   1990a:	83 82       	std	Z+3, r8	; 0x03
   1990c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19910:	ff ef       	ldi	r31, 0xFF	; 255
   19912:	af 1a       	sub	r10, r31
   19914:	bf 0a       	sbc	r11, r31
   19916:	cf 0a       	sbc	r12, r31
   19918:	df 0a       	sbc	r13, r31
   1991a:	86 cf       	rjmp	.-244    	; 0x19828 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1991c:	80 e0       	ldi	r24, 0x00	; 0
   1991e:	91 e0       	ldi	r25, 0x01	; 1
   19920:	cc 5e       	subi	r28, 0xEC	; 236
   19922:	de 4f       	sbci	r29, 0xFE	; 254
   19924:	a8 81       	ld	r26, Y
   19926:	b9 81       	ldd	r27, Y+1	; 0x01
   19928:	c4 51       	subi	r28, 0x14	; 20
   1992a:	d1 40       	sbci	r29, 0x01	; 1
   1992c:	fc 01       	movw	r30, r24
   1992e:	1d 92       	st	X+, r1
   19930:	31 97       	sbiw	r30, 0x01	; 1
   19932:	e9 f7       	brne	.-6      	; 0x1992e <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19934:	81 2c       	mov	r8, r1
   19936:	91 2c       	mov	r9, r1
   19938:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1993a:	8f ec       	ldi	r24, 0xCF	; 207
   1993c:	99 e3       	ldi	r25, 0x39	; 57
   1993e:	9c 01       	movw	r18, r24
   19940:	40 e0       	ldi	r20, 0x00	; 0
   19942:	c6 5e       	subi	r28, 0xE6	; 230
   19944:	de 4f       	sbci	r29, 0xFE	; 254
   19946:	28 83       	st	Y, r18
   19948:	39 83       	std	Y+1, r19	; 0x01
   1994a:	4a 83       	std	Y+2, r20	; 0x02
   1994c:	ca 51       	subi	r28, 0x1A	; 26
   1994e:	d1 40       	sbci	r29, 0x01	; 1
   19950:	ce 5d       	subi	r28, 0xDE	; 222
   19952:	de 4f       	sbci	r29, 0xFE	; 254
   19954:	48 80       	ld	r4, Y
   19956:	59 80       	ldd	r5, Y+1	; 0x01
   19958:	6a 80       	ldd	r6, Y+2	; 0x02
   1995a:	7b 80       	ldd	r7, Y+3	; 0x03
   1995c:	c2 52       	subi	r28, 0x22	; 34
   1995e:	d1 40       	sbci	r29, 0x01	; 1
   19960:	48 0c       	add	r4, r8
   19962:	59 1c       	adc	r5, r9
   19964:	6a 1c       	adc	r6, r10
   19966:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19968:	c2 5e       	subi	r28, 0xE2	; 226
   1996a:	de 4f       	sbci	r29, 0xFE	; 254
   1996c:	28 81       	ld	r18, Y
   1996e:	39 81       	ldd	r19, Y+1	; 0x01
   19970:	4a 81       	ldd	r20, Y+2	; 0x02
   19972:	5b 81       	ldd	r21, Y+3	; 0x03
   19974:	ce 51       	subi	r28, 0x1E	; 30
   19976:	d1 40       	sbci	r29, 0x01	; 1
   19978:	82 16       	cp	r8, r18
   1997a:	93 06       	cpc	r9, r19
   1997c:	a4 06       	cpc	r10, r20
   1997e:	b5 06       	cpc	r11, r21
   19980:	0c f0       	brlt	.+2      	; 0x19984 <lif_create_volume+0x4d6>
   19982:	53 c0       	rjmp	.+166    	; 0x19a2a <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19984:	00 e0       	ldi	r16, 0x00	; 0
   19986:	11 e0       	ldi	r17, 0x01	; 1
   19988:	ca 5e       	subi	r28, 0xEA	; 234
   1998a:	de 4f       	sbci	r29, 0xFE	; 254
   1998c:	28 81       	ld	r18, Y
   1998e:	39 81       	ldd	r19, Y+1	; 0x01
   19990:	4a 81       	ldd	r20, Y+2	; 0x02
   19992:	5b 81       	ldd	r21, Y+3	; 0x03
   19994:	c6 51       	subi	r28, 0x16	; 22
   19996:	d1 40       	sbci	r29, 0x01	; 1
   19998:	be 01       	movw	r22, r28
   1999a:	6c 5e       	subi	r22, 0xEC	; 236
   1999c:	7f 4f       	sbci	r23, 0xFF	; 255
   1999e:	c7 01       	movw	r24, r14
   199a0:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
   199a4:	09 2e       	mov	r0, r25
   199a6:	00 0c       	add	r0, r0
   199a8:	aa 0b       	sbc	r26, r26
   199aa:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   199ac:	8f 3f       	cpi	r24, 0xFF	; 255
   199ae:	91 05       	cpc	r25, r1
   199b0:	a1 05       	cpc	r26, r1
   199b2:	b1 05       	cpc	r27, r1
   199b4:	09 f0       	breq	.+2      	; 0x199b8 <lif_create_volume+0x50a>
   199b6:	0c f4       	brge	.+2      	; 0x199ba <lif_create_volume+0x50c>
   199b8:	4f c0       	rjmp	.+158    	; 0x19a58 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   199ba:	ca 5e       	subi	r28, 0xEA	; 234
   199bc:	de 4f       	sbci	r29, 0xFE	; 254
   199be:	28 81       	ld	r18, Y
   199c0:	39 81       	ldd	r19, Y+1	; 0x01
   199c2:	4a 81       	ldd	r20, Y+2	; 0x02
   199c4:	5b 81       	ldd	r21, Y+3	; 0x03
   199c6:	c6 51       	subi	r28, 0x16	; 22
   199c8:	d1 40       	sbci	r29, 0x01	; 1
   199ca:	28 0f       	add	r18, r24
   199cc:	39 1f       	adc	r19, r25
   199ce:	4a 1f       	adc	r20, r26
   199d0:	5b 1f       	adc	r21, r27
   199d2:	ca 5e       	subi	r28, 0xEA	; 234
   199d4:	de 4f       	sbci	r29, 0xFE	; 254
   199d6:	28 83       	st	Y, r18
   199d8:	39 83       	std	Y+1, r19	; 0x01
   199da:	4a 83       	std	Y+2, r20	; 0x02
   199dc:	5b 83       	std	Y+3, r21	; 0x03
   199de:	c6 51       	subi	r28, 0x16	; 22
   199e0:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   199e2:	c3 01       	movw	r24, r6
   199e4:	b2 01       	movw	r22, r4
   199e6:	24 e6       	ldi	r18, 0x64	; 100
   199e8:	30 e0       	ldi	r19, 0x00	; 0
   199ea:	40 e0       	ldi	r20, 0x00	; 0
   199ec:	50 e0       	ldi	r21, 0x00	; 0
   199ee:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
   199f2:	67 2b       	or	r22, r23
   199f4:	68 2b       	or	r22, r24
   199f6:	69 2b       	or	r22, r25
   199f8:	91 f4       	brne	.+36     	; 0x19a1e <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   199fa:	ed b7       	in	r30, 0x3d	; 61
   199fc:	fe b7       	in	r31, 0x3e	; 62
   199fe:	44 82       	std	Z+4, r4	; 0x04
   19a00:	55 82       	std	Z+5, r5	; 0x05
   19a02:	66 82       	std	Z+6, r6	; 0x06
   19a04:	77 82       	std	Z+7, r7	; 0x07
   19a06:	c6 5e       	subi	r28, 0xE6	; 230
   19a08:	de 4f       	sbci	r29, 0xFE	; 254
   19a0a:	28 81       	ld	r18, Y
   19a0c:	39 81       	ldd	r19, Y+1	; 0x01
   19a0e:	4a 81       	ldd	r20, Y+2	; 0x02
   19a10:	ca 51       	subi	r28, 0x1A	; 26
   19a12:	d1 40       	sbci	r29, 0x01	; 1
   19a14:	21 83       	std	Z+1, r18	; 0x01
   19a16:	32 83       	std	Z+2, r19	; 0x02
   19a18:	43 83       	std	Z+3, r20	; 0x03
   19a1a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19a1e:	ff ef       	ldi	r31, 0xFF	; 255
   19a20:	8f 1a       	sub	r8, r31
   19a22:	9f 0a       	sbc	r9, r31
   19a24:	af 0a       	sbc	r10, r31
   19a26:	bf 0a       	sbc	r11, r31
   19a28:	93 cf       	rjmp	.-218    	; 0x19950 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19a2a:	ed b7       	in	r30, 0x3d	; 61
   19a2c:	fe b7       	in	r31, 0x3e	; 62
   19a2e:	44 82       	std	Z+4, r4	; 0x04
   19a30:	55 82       	std	Z+5, r5	; 0x05
   19a32:	66 82       	std	Z+6, r6	; 0x06
   19a34:	77 82       	std	Z+7, r7	; 0x07
   19a36:	82 ec       	ldi	r24, 0xC2	; 194
   19a38:	99 e3       	ldi	r25, 0x39	; 57
   19a3a:	a0 e0       	ldi	r26, 0x00	; 0
   19a3c:	81 83       	std	Z+1, r24	; 0x01
   19a3e:	92 83       	std	Z+2, r25	; 0x02
   19a40:	a3 83       	std	Z+3, r26	; 0x03
   19a42:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19a46:	8f ef       	ldi	r24, 0xFF	; 255
   19a48:	9f ef       	ldi	r25, 0xFF	; 255
   19a4a:	f7 01       	movw	r30, r14
   19a4c:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19a4e:	80 a3       	std	Z+32, r24	; 0x20
   19a50:	c7 01       	movw	r24, r14
   19a52:	1a d8       	rcall	.-4044   	; 0x18a88 <lif_check_volume>
   19a54:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a56:	19 f4       	brne	.+6      	; 0x19a5e <lif_create_volume+0x5b0>
   19a58:	c7 01       	movw	r24, r14
   19a5a:	b6 da       	rcall	.-2708   	; 0x18fc8 <lif_close_volume>
   19a5c:	08 c0       	rjmp	.+16     	; 0x19a6e <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19a5e:	c7 01       	movw	r24, r14
   19a60:	1c dc       	rcall	.-1992   	; 0x1929a <lif_updatefree>
   19a62:	6c 01       	movw	r12, r24
   19a64:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a66:	31 f4       	brne	.+12     	; 0x19a74 <lif_create_volume+0x5c6>
   19a68:	c7 01       	movw	r24, r14
   19a6a:	ae da       	rcall	.-2724   	; 0x18fc8 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19a6c:	04 c0       	rjmp	.+8      	; 0x19a76 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19a6e:	c1 2c       	mov	r12, r1
   19a70:	d1 2c       	mov	r13, r1
   19a72:	01 c0       	rjmp	.+2      	; 0x19a76 <lif_create_volume+0x5c8>
   19a74:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19a76:	c6 01       	movw	r24, r12
   19a78:	c7 5d       	subi	r28, 0xD7	; 215
   19a7a:	de 4f       	sbci	r29, 0xFE	; 254
   19a7c:	e2 e1       	ldi	r30, 0x12	; 18
   19a7e:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00019a82 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19a82:	ad e1       	ldi	r26, 0x1D	; 29
   19a84:	b0 e0       	ldi	r27, 0x00	; 0
   19a86:	e7 e4       	ldi	r30, 0x47	; 71
   19a88:	fd ec       	ldi	r31, 0xCD	; 205
   19a8a:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   19a8e:	9d 8f       	std	Y+29, r25	; 0x1d
   19a90:	8c 8f       	std	Y+28, r24	; 0x1c
   19a92:	4a 01       	movw	r8, r20
   19a94:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19a96:	fc 01       	movw	r30, r24
   19a98:	c4 84       	ldd	r12, Z+12	; 0x0c
   19a9a:	d5 84       	ldd	r13, Z+13	; 0x0d
   19a9c:	e6 84       	ldd	r14, Z+14	; 0x0e
   19a9e:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19aa0:	fc db       	rcall	.-2056   	; 0x1929a <lif_updatefree>
   19aa2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19aa4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19aa6:	40 8d       	ldd	r20, Z+24	; 0x18
   19aa8:	51 8d       	ldd	r21, Z+25	; 0x19
   19aaa:	62 8d       	ldd	r22, Z+26	; 0x1a
   19aac:	73 8d       	ldd	r23, Z+27	; 0x1b
   19aae:	89 2b       	or	r24, r25
   19ab0:	99 f4       	brne	.+38     	; 0x19ad8 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19ab2:	ed b7       	in	r30, 0x3d	; 61
   19ab4:	fe b7       	in	r31, 0x3e	; 62
   19ab6:	80 86       	std	Z+8, r8	; 0x08
   19ab8:	91 86       	std	Z+9, r9	; 0x09
   19aba:	a2 86       	std	Z+10, r10	; 0x0a
   19abc:	b3 86       	std	Z+11, r11	; 0x0b
   19abe:	44 83       	std	Z+4, r20	; 0x04
   19ac0:	55 83       	std	Z+5, r21	; 0x05
   19ac2:	66 83       	std	Z+6, r22	; 0x06
   19ac4:	77 83       	std	Z+7, r23	; 0x07
   19ac6:	83 ee       	ldi	r24, 0xE3	; 227
   19ac8:	98 e3       	ldi	r25, 0x38	; 56
   19aca:	a0 e0       	ldi	r26, 0x00	; 0
   19acc:	81 83       	std	Z+1, r24	; 0x01
   19ace:	92 83       	std	Z+2, r25	; 0x02
   19ad0:	a3 83       	std	Z+3, r26	; 0x03
   19ad2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   19ad6:	2f c1       	rjmp	.+606    	; 0x19d36 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19ad8:	48 15       	cp	r20, r8
   19ada:	59 05       	cpc	r21, r9
   19adc:	6a 05       	cpc	r22, r10
   19ade:	7b 05       	cpc	r23, r11
   19ae0:	c4 f0       	brlt	.+48     	; 0x19b12 <lif_newdir+0x90>
   19ae2:	44 24       	eor	r4, r4
   19ae4:	43 94       	inc	r4
   19ae6:	51 2c       	mov	r5, r1
   19ae8:	61 2c       	mov	r6, r1
   19aea:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19aec:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19aee:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19af0:	86 5a       	subi	r24, 0xA6	; 166
   19af2:	9f 4f       	sbci	r25, 0xFF	; 255
   19af4:	9d 8b       	std	Y+21, r25	; 0x15
   19af6:	8c 8b       	std	Y+20, r24	; 0x14
   19af8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19afa:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19afc:	e4 5a       	subi	r30, 0xA4	; 164
   19afe:	ff 4f       	sbci	r31, 0xFF	; 255
   19b00:	fb 8b       	std	Y+19, r31	; 0x13
   19b02:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b04:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b06:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b08:	80 5a       	subi	r24, 0xA0	; 160
   19b0a:	9f 4f       	sbci	r25, 0xFF	; 255
   19b0c:	9f 8b       	std	Y+23, r25	; 0x17
   19b0e:	8e 8b       	std	Y+22, r24	; 0x16
   19b10:	21 c0       	rjmp	.+66     	; 0x19b54 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19b12:	ed b7       	in	r30, 0x3d	; 61
   19b14:	fe b7       	in	r31, 0x3e	; 62
   19b16:	44 83       	std	Z+4, r20	; 0x04
   19b18:	55 83       	std	Z+5, r21	; 0x05
   19b1a:	66 83       	std	Z+6, r22	; 0x06
   19b1c:	77 83       	std	Z+7, r23	; 0x07
   19b1e:	8a eb       	ldi	r24, 0xBA	; 186
   19b20:	98 e3       	ldi	r25, 0x38	; 56
   19b22:	a0 e0       	ldi	r26, 0x00	; 0
   19b24:	81 83       	std	Z+1, r24	; 0x01
   19b26:	92 83       	std	Z+2, r25	; 0x02
   19b28:	a3 83       	std	Z+3, r26	; 0x03
   19b2a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   19b2e:	03 c1       	rjmp	.+518    	; 0x19d36 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19b30:	ec 89       	ldd	r30, Y+20	; 0x14
   19b32:	fd 89       	ldd	r31, Y+21	; 0x15
   19b34:	80 81       	ld	r24, Z
   19b36:	91 81       	ldd	r25, Z+1	; 0x01
   19b38:	8f 3f       	cpi	r24, 0xFF	; 255
   19b3a:	ff ef       	ldi	r31, 0xFF	; 255
   19b3c:	9f 07       	cpc	r25, r31
   19b3e:	a1 f0       	breq	.+40     	; 0x19b68 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19b40:	89 2b       	or	r24, r25
   19b42:	09 f0       	breq	.+2      	; 0x19b46 <lif_newdir+0xc4>
   19b44:	ce c0       	rjmp	.+412    	; 0x19ce2 <lif_newdir+0x260>
        {
            if(freestate == 0)
   19b46:	61 14       	cp	r6, r1
   19b48:	71 04       	cpc	r7, r1
   19b4a:	09 f4       	brne	.+2      	; 0x19b4e <lif_newdir+0xcc>
   19b4c:	c1 c0       	rjmp	.+386    	; 0x19cd0 <lif_newdir+0x24e>
   19b4e:	ff ef       	ldi	r31, 0xFF	; 255
   19b50:	4f 1a       	sub	r4, r31
   19b52:	5f 0a       	sbc	r5, r31
   19b54:	82 01       	movw	r16, r4
   19b56:	01 50       	subi	r16, 0x01	; 1
   19b58:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19b5a:	b8 01       	movw	r22, r16
   19b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b60:	c1 da       	rcall	.-2686   	; 0x190e4 <lif_readdirindex>
   19b62:	89 2b       	or	r24, r25
   19b64:	29 f7       	brne	.-54     	; 0x19b30 <lif_newdir+0xae>
   19b66:	e7 c0       	rjmp	.+462    	; 0x19d36 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19b68:	22 e0       	ldi	r18, 0x02	; 2
   19b6a:	62 16       	cp	r6, r18
   19b6c:	71 04       	cpc	r7, r1
   19b6e:	09 f0       	breq	.+2      	; 0x19b72 <lif_newdir+0xf0>
   19b70:	46 c0       	rjmp	.+140    	; 0x19bfe <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19b72:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b74:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b76:	0e 94 6f c3 	call	0x186de	; 0x186de <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19b7a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b7c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b7e:	e4 5a       	subi	r30, 0xA4	; 164
   19b80:	ff 4f       	sbci	r31, 0xFF	; 255
   19b82:	88 8d       	ldd	r24, Y+24	; 0x18
   19b84:	80 83       	st	Z, r24
   19b86:	99 8d       	ldd	r25, Y+25	; 0x19
   19b88:	91 83       	std	Z+1, r25	; 0x01
   19b8a:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19b8c:	22 83       	std	Z+2, r18	; 0x02
   19b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19b90:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   19b92:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b94:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b96:	e0 5a       	subi	r30, 0xA0	; 160
   19b98:	ff 4f       	sbci	r31, 0xFF	; 255
   19b9a:	80 82       	st	Z, r8
   19b9c:	91 82       	std	Z+1, r9	; 0x01
   19b9e:	a2 82       	std	Z+2, r10	; 0x02
   19ba0:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   19ba2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ba4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ba6:	84 89       	ldd	r24, Z+20	; 0x14
   19ba8:	95 89       	ldd	r25, Z+21	; 0x15
   19baa:	a6 89       	ldd	r26, Z+22	; 0x16
   19bac:	b7 89       	ldd	r27, Z+23	; 0x17
   19bae:	88 0d       	add	r24, r8
   19bb0:	99 1d       	adc	r25, r9
   19bb2:	aa 1d       	adc	r26, r10
   19bb4:	bb 1d       	adc	r27, r11
   19bb6:	84 8b       	std	Z+20, r24	; 0x14
   19bb8:	95 8b       	std	Z+21, r25	; 0x15
   19bba:	a6 8b       	std	Z+22, r26	; 0x16
   19bbc:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19bbe:	80 8d       	ldd	r24, Z+24	; 0x18
   19bc0:	91 8d       	ldd	r25, Z+25	; 0x19
   19bc2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19bc4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19bc6:	88 19       	sub	r24, r8
   19bc8:	99 09       	sbc	r25, r9
   19bca:	aa 09       	sbc	r26, r10
   19bcc:	bb 09       	sbc	r27, r11
   19bce:	80 8f       	std	Z+24, r24	; 0x18
   19bd0:	91 8f       	std	Z+25, r25	; 0x19
   19bd2:	a2 8f       	std	Z+26, r26	; 0x1a
   19bd4:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19bd6:	84 8d       	ldd	r24, Z+28	; 0x1c
   19bd8:	95 8d       	ldd	r25, Z+29	; 0x1d
   19bda:	01 96       	adiw	r24, 0x01	; 1
   19bdc:	95 8f       	std	Z+29, r25	; 0x1d
   19bde:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19be0:	86 8d       	ldd	r24, Z+30	; 0x1e
   19be2:	97 8d       	ldd	r25, Z+31	; 0x1f
   19be4:	01 97       	sbiw	r24, 0x01	; 1
   19be6:	97 8f       	std	Z+31, r25	; 0x1f
   19be8:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19bea:	20 a2       	std	Z+32, r2	; 0x20
   19bec:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19bee:	b1 01       	movw	r22, r2
   19bf0:	cf 01       	movw	r24, r30
   19bf2:	df da       	rcall	.-2626   	; 0x191b2 <lif_writedirindex>
   19bf4:	89 2b       	or	r24, r25
   19bf6:	09 f4       	brne	.+2      	; 0x19bfa <lif_newdir+0x178>
   19bf8:	9e c0       	rjmp	.+316    	; 0x19d36 <lif_newdir+0x2b4>
   19bfa:	c1 01       	movw	r24, r2
   19bfc:	9e c0       	rjmp	.+316    	; 0x19d3a <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19bfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c06:	92 ff       	sbrs	r25, 2
   19c08:	1e c0       	rjmp	.+60     	; 0x19c46 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19c0a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c0c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c0e:	80 8d       	ldd	r24, Z+24	; 0x18
   19c10:	91 8d       	ldd	r25, Z+25	; 0x19
   19c12:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c14:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19c16:	ed b7       	in	r30, 0x3d	; 61
   19c18:	fe b7       	in	r31, 0x3e	; 62
   19c1a:	86 87       	std	Z+14, r24	; 0x0e
   19c1c:	97 87       	std	Z+15, r25	; 0x0f
   19c1e:	a0 8b       	std	Z+16, r26	; 0x10
   19c20:	b1 8b       	std	Z+17, r27	; 0x11
   19c22:	82 86       	std	Z+10, r8	; 0x0a
   19c24:	93 86       	std	Z+11, r9	; 0x0b
   19c26:	a4 86       	std	Z+12, r10	; 0x0c
   19c28:	b5 86       	std	Z+13, r11	; 0x0d
   19c2a:	c6 82       	std	Z+6, r12	; 0x06
   19c2c:	d7 82       	std	Z+7, r13	; 0x07
   19c2e:	e0 86       	std	Z+8, r14	; 0x08
   19c30:	f1 86       	std	Z+9, r15	; 0x09
   19c32:	15 83       	std	Z+5, r17	; 0x05
   19c34:	04 83       	std	Z+4, r16	; 0x04
   19c36:	89 e6       	ldi	r24, 0x69	; 105
   19c38:	98 e3       	ldi	r25, 0x38	; 56
   19c3a:	a0 e0       	ldi	r26, 0x00	; 0
   19c3c:	81 83       	std	Z+1, r24	; 0x01
   19c3e:	92 83       	std	Z+2, r25	; 0x02
   19c40:	a3 83       	std	Z+3, r26	; 0x03
   19c42:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19c46:	b8 01       	movw	r22, r16
   19c48:	6f 5f       	subi	r22, 0xFF	; 255
   19c4a:	7f 4f       	sbci	r23, 0xFF	; 255
   19c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c50:	0c db       	rcall	.-2536   	; 0x1926a <lif_writedirEOF>
   19c52:	89 2b       	or	r24, r25
   19c54:	09 f4       	brne	.+2      	; 0x19c58 <lif_newdir+0x1d6>
   19c56:	6f c0       	rjmp	.+222    	; 0x19d36 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19c58:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c5c:	0e 94 6f c3 	call	0x186de	; 0x186de <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19c60:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c62:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c64:	e4 5a       	subi	r30, 0xA4	; 164
   19c66:	ff 4f       	sbci	r31, 0xFF	; 255
   19c68:	c0 82       	st	Z, r12
   19c6a:	d1 82       	std	Z+1, r13	; 0x01
   19c6c:	e2 82       	std	Z+2, r14	; 0x02
   19c6e:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19c70:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c72:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c74:	e0 5a       	subi	r30, 0xA0	; 160
   19c76:	ff 4f       	sbci	r31, 0xFF	; 255
   19c78:	80 82       	st	Z, r8
   19c7a:	91 82       	std	Z+1, r9	; 0x01
   19c7c:	a2 82       	std	Z+2, r10	; 0x02
   19c7e:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19c80:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c82:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c84:	84 89       	ldd	r24, Z+20	; 0x14
   19c86:	95 89       	ldd	r25, Z+21	; 0x15
   19c88:	a6 89       	ldd	r26, Z+22	; 0x16
   19c8a:	b7 89       	ldd	r27, Z+23	; 0x17
   19c8c:	88 0d       	add	r24, r8
   19c8e:	99 1d       	adc	r25, r9
   19c90:	aa 1d       	adc	r26, r10
   19c92:	bb 1d       	adc	r27, r11
   19c94:	84 8b       	std	Z+20, r24	; 0x14
   19c96:	95 8b       	std	Z+21, r25	; 0x15
   19c98:	a6 8b       	std	Z+22, r26	; 0x16
   19c9a:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19c9c:	80 8d       	ldd	r24, Z+24	; 0x18
   19c9e:	91 8d       	ldd	r25, Z+25	; 0x19
   19ca0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ca2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ca4:	88 19       	sub	r24, r8
   19ca6:	99 09       	sbc	r25, r9
   19ca8:	aa 09       	sbc	r26, r10
   19caa:	bb 09       	sbc	r27, r11
   19cac:	80 8f       	std	Z+24, r24	; 0x18
   19cae:	91 8f       	std	Z+25, r25	; 0x19
   19cb0:	a2 8f       	std	Z+26, r26	; 0x1a
   19cb2:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19cb4:	84 8d       	ldd	r24, Z+28	; 0x1c
   19cb6:	95 8d       	ldd	r25, Z+29	; 0x1d
   19cb8:	01 96       	adiw	r24, 0x01	; 1
   19cba:	95 8f       	std	Z+29, r25	; 0x1d
   19cbc:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19cbe:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19cc0:	00 a3       	std	Z+32, r16	; 0x20
   19cc2:	b8 01       	movw	r22, r16
   19cc4:	cf 01       	movw	r24, r30
   19cc6:	75 da       	rcall	.-2838   	; 0x191b2 <lif_writedirindex>
   19cc8:	89 2b       	or	r24, r25
   19cca:	a9 f1       	breq	.+106    	; 0x19d36 <lif_newdir+0x2b4>
   19ccc:	c8 01       	movw	r24, r16
   19cce:	35 c0       	rjmp	.+106    	; 0x19d3a <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19cd0:	c8 8e       	std	Y+24, r12	; 0x18
   19cd2:	d9 8e       	std	Y+25, r13	; 0x19
   19cd4:	ea 8e       	std	Y+26, r14	; 0x1a
   19cd6:	fb 8e       	std	Y+27, r15	; 0x1b
   19cd8:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19cda:	66 24       	eor	r6, r6
   19cdc:	63 94       	inc	r6
   19cde:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19ce0:	36 cf       	rjmp	.-404    	; 0x19b4e <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19ce2:	f1 e0       	ldi	r31, 0x01	; 1
   19ce4:	6f 16       	cp	r6, r31
   19ce6:	71 04       	cpc	r7, r1
   19ce8:	a9 f4       	brne	.+42     	; 0x19d14 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19cea:	ea 89       	ldd	r30, Y+18	; 0x12
   19cec:	fb 89       	ldd	r31, Y+19	; 0x13
   19cee:	80 81       	ld	r24, Z
   19cf0:	91 81       	ldd	r25, Z+1	; 0x01
   19cf2:	a2 81       	ldd	r26, Z+2	; 0x02
   19cf4:	b3 81       	ldd	r27, Z+3	; 0x03
   19cf6:	8c 19       	sub	r24, r12
   19cf8:	9d 09       	sbc	r25, r13
   19cfa:	ae 09       	sbc	r26, r14
   19cfc:	bf 09       	sbc	r27, r15
   19cfe:	88 15       	cp	r24, r8
   19d00:	99 05       	cpc	r25, r9
   19d02:	aa 05       	cpc	r26, r10
   19d04:	bb 05       	cpc	r27, r11
   19d06:	1c f4       	brge	.+6      	; 0x19d0e <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19d08:	61 2c       	mov	r6, r1
   19d0a:	71 2c       	mov	r7, r1
   19d0c:	03 c0       	rjmp	.+6      	; 0x19d14 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19d0e:	82 e0       	ldi	r24, 0x02	; 2
   19d10:	68 2e       	mov	r6, r24
   19d12:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19d14:	ea 89       	ldd	r30, Y+18	; 0x12
   19d16:	fb 89       	ldd	r31, Y+19	; 0x13
   19d18:	c0 80       	ld	r12, Z
   19d1a:	d1 80       	ldd	r13, Z+1	; 0x01
   19d1c:	e2 80       	ldd	r14, Z+2	; 0x02
   19d1e:	f3 80       	ldd	r15, Z+3	; 0x03
   19d20:	ee 89       	ldd	r30, Y+22	; 0x16
   19d22:	ff 89       	ldd	r31, Y+23	; 0x17
   19d24:	80 81       	ld	r24, Z
   19d26:	91 81       	ldd	r25, Z+1	; 0x01
   19d28:	a2 81       	ldd	r26, Z+2	; 0x02
   19d2a:	b3 81       	ldd	r27, Z+3	; 0x03
   19d2c:	c8 0e       	add	r12, r24
   19d2e:	d9 1e       	adc	r13, r25
   19d30:	ea 1e       	adc	r14, r26
   19d32:	fb 1e       	adc	r15, r27
   19d34:	0c cf       	rjmp	.-488    	; 0x19b4e <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19d36:	8f ef       	ldi	r24, 0xFF	; 255
   19d38:	9f ef       	ldi	r25, 0xFF	; 255
}
   19d3a:	6d 96       	adiw	r28, 0x1d	; 29
   19d3c:	e2 e1       	ldi	r30, 0x12	; 18
   19d3e:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

00019d42 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19d42:	a9 e3       	ldi	r26, 0x39	; 57
   19d44:	b1 e0       	ldi	r27, 0x01	; 1
   19d46:	e7 ea       	ldi	r30, 0xA7	; 167
   19d48:	fe ec       	ldi	r31, 0xCE	; 206
   19d4a:	0c 94 a1 e3 	jmp	0x1c742	; 0x1c742 <__prologue_saves__+0xc>
   19d4e:	6c 01       	movw	r12, r24
   19d50:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19d52:	be 01       	movw	r22, r28
   19d54:	66 5f       	subi	r22, 0xF6	; 246
   19d56:	7e 4f       	sbci	r23, 0xFE	; 254
   19d58:	0e 94 be be 	call	0x17d7c	; 0x17d7c <lif_stat>
   19d5c:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19d5e:	00 97       	sbiw	r24, 0x00	; 0
   19d60:	09 f1       	breq	.+66     	; 0x19da4 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19d62:	fc 01       	movw	r30, r24
   19d64:	80 8d       	ldd	r24, Z+24	; 0x18
   19d66:	91 8d       	ldd	r25, Z+25	; 0x19
   19d68:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19d6a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19d6c:	81 15       	cp	r24, r1
   19d6e:	f2 e0       	ldi	r31, 0x02	; 2
   19d70:	9f 07       	cpc	r25, r31
   19d72:	a1 05       	cpc	r26, r1
   19d74:	b1 05       	cpc	r27, r1
   19d76:	c8 f4       	brcc	.+50     	; 0x19daa <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19d78:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19d7c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d80:	32 ff       	sbrs	r19, 2
   19d82:	10 c0       	rjmp	.+32     	; 0x19da4 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19d84:	ed b7       	in	r30, 0x3d	; 61
   19d86:	fe b7       	in	r31, 0x3e	; 62
   19d88:	86 83       	std	Z+6, r24	; 0x06
   19d8a:	97 83       	std	Z+7, r25	; 0x07
   19d8c:	a0 87       	std	Z+8, r26	; 0x08
   19d8e:	b1 87       	std	Z+9, r27	; 0x09
   19d90:	d5 82       	std	Z+5, r13	; 0x05
   19d92:	c4 82       	std	Z+4, r12	; 0x04
   19d94:	8a e2       	ldi	r24, 0x2A	; 42
   19d96:	98 e3       	ldi	r25, 0x38	; 56
   19d98:	a0 e0       	ldi	r26, 0x00	; 0
   19d9a:	81 83       	std	Z+1, r24	; 0x01
   19d9c:	92 83       	std	Z+2, r25	; 0x02
   19d9e:	a3 83       	std	Z+3, r26	; 0x03
   19da0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(NULL);
   19da4:	00 e0       	ldi	r16, 0x00	; 0
   19da6:	10 e0       	ldi	r17, 0x00	; 0
   19da8:	c6 c0       	rjmp	.+396    	; 0x19f36 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19daa:	64 e7       	ldi	r22, 0x74	; 116
   19dac:	70 e0       	ldi	r23, 0x00	; 0
   19dae:	80 e0       	ldi	r24, 0x00	; 0
   19db0:	90 e0       	ldi	r25, 0x00	; 0
   19db2:	0e 94 2a be 	call	0x17c54	; 0x17c54 <lif_calloc>
   19db6:	7c 01       	movw	r14, r24
    if(!LIF)
   19db8:	89 2b       	or	r24, r25
   19dba:	a1 f3       	breq	.-24     	; 0x19da4 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19dbc:	c6 01       	movw	r24, r12
   19dbe:	0e 94 75 be 	call	0x17cea	; 0x17cea <lif_stralloc>
   19dc2:	f7 01       	movw	r30, r14
   19dc4:	91 83       	std	Z+1, r25	; 0x01
   19dc6:	80 83       	st	Z, r24
    if(!LIF->name)
   19dc8:	00 97       	sbiw	r24, 0x00	; 0
   19dca:	09 f4       	brne	.+2      	; 0x19dce <lif_open_volume+0x8c>
   19dcc:	5e c0       	rjmp	.+188    	; 0x19e8a <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19dce:	f5 01       	movw	r30, r10
   19dd0:	80 8c       	ldd	r8, Z+24	; 0x18
   19dd2:	91 8c       	ldd	r9, Z+25	; 0x19
   19dd4:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19dd6:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19dd8:	f7 01       	movw	r30, r14
   19dda:	80 86       	std	Z+8, r8	; 0x08
   19ddc:	91 86       	std	Z+9, r9	; 0x09
   19dde:	a2 86       	std	Z+10, r10	; 0x0a
   19de0:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19de2:	77 27       	eor	r23, r23
   19de4:	6b 2d       	mov	r22, r11
   19de6:	5a 2d       	mov	r21, r10
   19de8:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19dea:	88 20       	and	r8, r8
   19dec:	21 f0       	breq	.+8      	; 0x19df6 <lif_open_volume+0xb4>
        ++sectors;
   19dee:	4f 5f       	subi	r20, 0xFF	; 255
   19df0:	5f 4f       	sbci	r21, 0xFF	; 255
   19df2:	6f 4f       	sbci	r22, 0xFF	; 255
   19df4:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19df6:	f7 01       	movw	r30, r14
   19df8:	44 83       	std	Z+4, r20	; 0x04
   19dfa:	55 83       	std	Z+5, r21	; 0x05
   19dfc:	66 83       	std	Z+6, r22	; 0x06
   19dfe:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19e00:	b8 01       	movw	r22, r16
   19e02:	0e 94 94 be 	call	0x17d28	; 0x17d28 <lif_open>
   19e06:	f7 01       	movw	r30, r14
   19e08:	93 83       	std	Z+3, r25	; 0x03
   19e0a:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19e0c:	89 2b       	or	r24, r25
   19e0e:	e9 f1       	breq	.+122    	; 0x19e8a <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19e10:	00 e0       	ldi	r16, 0x00	; 0
   19e12:	11 e0       	ldi	r17, 0x01	; 1
   19e14:	20 e0       	ldi	r18, 0x00	; 0
   19e16:	30 e0       	ldi	r19, 0x00	; 0
   19e18:	a9 01       	movw	r20, r18
   19e1a:	be 01       	movw	r22, r28
   19e1c:	66 5f       	subi	r22, 0xF6	; 246
   19e1e:	7f 4f       	sbci	r23, 0xFF	; 255
   19e20:	c7 01       	movw	r24, r14
   19e22:	0e 94 18 bf 	call	0x17e30	; 0x17e30 <lif_read>
   19e26:	6f 3f       	cpi	r22, 0xFF	; 255
   19e28:	71 05       	cpc	r23, r1
   19e2a:	81 05       	cpc	r24, r1
   19e2c:	91 05       	cpc	r25, r1
   19e2e:	09 f0       	breq	.+2      	; 0x19e32 <lif_open_volume+0xf0>
   19e30:	6c f4       	brge	.+26     	; 0x19e4c <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19e32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19e36:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19e3a:	92 ff       	sbrs	r25, 2
   19e3c:	26 c0       	rjmp	.+76     	; 0x19e8a <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19e3e:	ed b7       	in	r30, 0x3d	; 61
   19e40:	fe b7       	in	r31, 0x3e	; 62
   19e42:	d5 82       	std	Z+5, r13	; 0x05
   19e44:	c4 82       	std	Z+4, r12	; 0x04
   19e46:	84 ef       	ldi	r24, 0xF4	; 244
   19e48:	97 e3       	ldi	r25, 0x37	; 55
   19e4a:	19 c0       	rjmp	.+50     	; 0x19e7e <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19e4c:	b7 01       	movw	r22, r14
   19e4e:	ce 01       	movw	r24, r28
   19e50:	0a 96       	adiw	r24, 0x0a	; 10
   19e52:	0e 94 38 c1 	call	0x18270	; 0x18270 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19e56:	c7 01       	movw	r24, r14
   19e58:	0e 94 44 c5 	call	0x18a88	; 0x18a88 <lif_check_volume>
   19e5c:	89 2b       	or	r24, r25
   19e5e:	c1 f4       	brne	.+48     	; 0x19e90 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19e60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19e64:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19e68:	92 ff       	sbrs	r25, 2
   19e6a:	0f c0       	rjmp	.+30     	; 0x19e8a <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19e6c:	f7 01       	movw	r30, r14
   19e6e:	80 81       	ld	r24, Z
   19e70:	91 81       	ldd	r25, Z+1	; 0x01
   19e72:	ed b7       	in	r30, 0x3d	; 61
   19e74:	fe b7       	in	r31, 0x3e	; 62
   19e76:	95 83       	std	Z+5, r25	; 0x05
   19e78:	84 83       	std	Z+4, r24	; 0x04
   19e7a:	81 ec       	ldi	r24, 0xC1	; 193
   19e7c:	97 e3       	ldi	r25, 0x37	; 55
   19e7e:	a0 e0       	ldi	r26, 0x00	; 0
   19e80:	81 83       	std	Z+1, r24	; 0x01
   19e82:	92 83       	std	Z+2, r25	; 0x02
   19e84:	a3 83       	std	Z+3, r26	; 0x03
   19e86:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e8a:	c7 01       	movw	r24, r14
   19e8c:	9d d8       	rcall	.-3782   	; 0x18fc8 <lif_close_volume>
   19e8e:	8a cf       	rjmp	.-236    	; 0x19da4 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19e90:	f7 01       	movw	r30, r14
   19e92:	45 a5       	ldd	r20, Z+45	; 0x2d
   19e94:	56 a5       	ldd	r21, Z+46	; 0x2e
   19e96:	67 a5       	ldd	r22, Z+47	; 0x2f
   19e98:	70 a9       	ldd	r23, Z+48	; 0x30
   19e9a:	85 a9       	ldd	r24, Z+53	; 0x35
   19e9c:	96 a9       	ldd	r25, Z+54	; 0x36
   19e9e:	a7 a9       	ldd	r26, Z+55	; 0x37
   19ea0:	b0 ad       	ldd	r27, Z+56	; 0x38
   19ea2:	48 0f       	add	r20, r24
   19ea4:	59 1f       	adc	r21, r25
   19ea6:	6a 1f       	adc	r22, r26
   19ea8:	7b 1f       	adc	r23, r27
   19eaa:	44 87       	std	Z+12, r20	; 0x0c
   19eac:	55 87       	std	Z+13, r21	; 0x0d
   19eae:	66 87       	std	Z+14, r22	; 0x0e
   19eb0:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19eb2:	84 81       	ldd	r24, Z+4	; 0x04
   19eb4:	95 81       	ldd	r25, Z+5	; 0x05
   19eb6:	a6 81       	ldd	r26, Z+6	; 0x06
   19eb8:	b7 81       	ldd	r27, Z+7	; 0x07
   19eba:	84 1b       	sub	r24, r20
   19ebc:	95 0b       	sbc	r25, r21
   19ebe:	a6 0b       	sbc	r26, r22
   19ec0:	b7 0b       	sbc	r27, r23
   19ec2:	80 8b       	std	Z+16, r24	; 0x10
   19ec4:	91 8b       	std	Z+17, r25	; 0x11
   19ec6:	a2 8b       	std	Z+18, r26	; 0x12
   19ec8:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19eca:	80 8f       	std	Z+24, r24	; 0x18
   19ecc:	91 8f       	std	Z+25, r25	; 0x19
   19ece:	a2 8f       	std	Z+26, r26	; 0x1a
   19ed0:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19ed2:	14 8a       	std	Z+20, r1	; 0x14
   19ed4:	15 8a       	std	Z+21, r1	; 0x15
   19ed6:	16 8a       	std	Z+22, r1	; 0x16
   19ed8:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19eda:	17 8e       	std	Z+31, r1	; 0x1f
   19edc:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19ede:	15 8e       	std	Z+29, r1	; 0x1d
   19ee0:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19ee2:	11 a2       	std	Z+33, r1	; 0x21
   19ee4:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19ee6:	13 a2       	std	Z+35, r1	; 0x23
   19ee8:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19eea:	c7 01       	movw	r24, r14
   19eec:	d6 d9       	rcall	.-3156   	; 0x1929a <lif_updatefree>
   19eee:	8c 01       	movw	r16, r24
   19ef0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ef4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ef8:	01 15       	cp	r16, r1
   19efa:	11 05       	cpc	r17, r1
   19efc:	a1 f4       	brne	.+40     	; 0x19f26 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19efe:	92 ff       	sbrs	r25, 2
   19f00:	0f c0       	rjmp	.+30     	; 0x19f20 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19f02:	f7 01       	movw	r30, r14
   19f04:	80 81       	ld	r24, Z
   19f06:	91 81       	ldd	r25, Z+1	; 0x01
   19f08:	ed b7       	in	r30, 0x3d	; 61
   19f0a:	fe b7       	in	r31, 0x3e	; 62
   19f0c:	95 83       	std	Z+5, r25	; 0x05
   19f0e:	84 83       	std	Z+4, r24	; 0x04
   19f10:	8e e8       	ldi	r24, 0x8E	; 142
   19f12:	97 e3       	ldi	r25, 0x37	; 55
   19f14:	a0 e0       	ldi	r26, 0x00	; 0
   19f16:	81 83       	std	Z+1, r24	; 0x01
   19f18:	92 83       	std	Z+2, r25	; 0x02
   19f1a:	a3 83       	std	Z+3, r26	; 0x03
   19f1c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f20:	c7 01       	movw	r24, r14
   19f22:	52 d8       	rcall	.-3932   	; 0x18fc8 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19f24:	08 c0       	rjmp	.+16     	; 0x19f36 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19f26:	92 ff       	sbrs	r25, 2
   19f28:	05 c0       	rjmp	.+10     	; 0x19f34 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19f2a:	62 e4       	ldi	r22, 0x42	; 66
   19f2c:	76 e1       	ldi	r23, 0x16	; 22
   19f2e:	c7 01       	movw	r24, r14
   19f30:	0e 94 7e c3 	call	0x186fc	; 0x186fc <lif_dump_vol>
   19f34:	87 01       	movw	r16, r14
    return( LIF );
}
   19f36:	c8 01       	movw	r24, r16
   19f38:	c7 5c       	subi	r28, 0xC7	; 199
   19f3a:	de 4f       	sbci	r29, 0xFE	; 254
   19f3c:	ec e0       	ldi	r30, 0x0C	; 12
   19f3e:	0c 94 bd e3 	jmp	0x1c77a	; 0x1c77a <__epilogue_restores__+0xc>

00019f42 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19f42:	2f 92       	push	r2
   19f44:	3f 92       	push	r3
   19f46:	4f 92       	push	r4
   19f48:	5f 92       	push	r5
   19f4a:	6f 92       	push	r6
   19f4c:	8f 92       	push	r8
   19f4e:	9f 92       	push	r9
   19f50:	af 92       	push	r10
   19f52:	bf 92       	push	r11
   19f54:	cf 92       	push	r12
   19f56:	df 92       	push	r13
   19f58:	ef 92       	push	r14
   19f5a:	0f 93       	push	r16
   19f5c:	1f 93       	push	r17
   19f5e:	cf 93       	push	r28
   19f60:	df 93       	push	r29
   19f62:	cd b7       	in	r28, 0x3d	; 61
   19f64:	de b7       	in	r29, 0x3e	; 62
   19f66:	af 97       	sbiw	r28, 0x2f	; 47
   19f68:	0f b6       	in	r0, 0x3f	; 63
   19f6a:	f8 94       	cli
   19f6c:	de bf       	out	0x3e, r29	; 62
   19f6e:	0f be       	out	0x3f, r0	; 63
   19f70:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19f72:	68 e0       	ldi	r22, 0x08	; 8
   19f74:	79 e0       	ldi	r23, 0x09	; 9
   19f76:	e5 de       	rcall	.-566    	; 0x19d42 <lif_open_volume>
   19f78:	9f a7       	std	Y+47, r25	; 0x2f
   19f7a:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19f7c:	00 97       	sbiw	r24, 0x00	; 0
   19f7e:	09 f4       	brne	.+2      	; 0x19f82 <lif_dir+0x40>
   19f80:	9e c1       	rjmp	.+828    	; 0x1a2be <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19f82:	fc 01       	movw	r30, r24
   19f84:	86 a1       	ldd	r24, Z+38	; 0x26
   19f86:	88 23       	and	r24, r24
   19f88:	21 f0       	breq	.+8      	; 0x19f92 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19f8a:	8f 01       	movw	r16, r30
   19f8c:	0a 5d       	subi	r16, 0xDA	; 218
   19f8e:	1f 4f       	sbci	r17, 0xFF	; 255
   19f90:	02 c0       	rjmp	.+4      	; 0x19f96 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19f92:	04 ef       	ldi	r16, 0xF4	; 244
   19f94:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19f96:	8e a5       	ldd	r24, Y+46	; 0x2e
   19f98:	9f a5       	ldd	r25, Y+47	; 0x2f
   19f9a:	87 5b       	subi	r24, 0xB7	; 183
   19f9c:	9f 4f       	sbci	r25, 0xFF	; 255
   19f9e:	0e 94 42 c3 	call	0x18684	; 0x18684 <lif_lifbcd2timestr>
   19fa2:	ed b7       	in	r30, 0x3d	; 61
   19fa4:	fe b7       	in	r31, 0x3e	; 62
   19fa6:	97 83       	std	Z+7, r25	; 0x07
   19fa8:	86 83       	std	Z+6, r24	; 0x06
   19faa:	15 83       	std	Z+5, r17	; 0x05
   19fac:	04 83       	std	Z+4, r16	; 0x04
   19fae:	87 e7       	ldi	r24, 0x77	; 119
   19fb0:	97 e3       	ldi	r25, 0x37	; 55
   19fb2:	a0 e0       	ldi	r26, 0x00	; 0
   19fb4:	81 83       	std	Z+1, r24	; 0x01
   19fb6:	92 83       	std	Z+2, r25	; 0x02
   19fb8:	a3 83       	std	Z+3, r26	; 0x03
   19fba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19fbe:	87 e3       	ldi	r24, 0x37	; 55
   19fc0:	97 e3       	ldi	r25, 0x37	; 55
   19fc2:	a0 e0       	ldi	r26, 0x00	; 0
   19fc4:	ed b7       	in	r30, 0x3d	; 61
   19fc6:	fe b7       	in	r31, 0x3e	; 62
   19fc8:	81 83       	std	Z+1, r24	; 0x01
   19fca:	92 83       	std	Z+2, r25	; 0x02
   19fcc:	a3 83       	std	Z+3, r26	; 0x03
   19fce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19fd2:	00 e2       	ldi	r16, 0x20	; 32
   19fd4:	10 e0       	ldi	r17, 0x00	; 0
   19fd6:	1f 8b       	std	Y+23, r17	; 0x17
   19fd8:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19fda:	21 2c       	mov	r2, r1
   19fdc:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19fde:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fe0:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fe2:	06 5a       	subi	r16, 0xA6	; 166
   19fe4:	1f 4f       	sbci	r17, 0xFF	; 255
   19fe6:	1d 8f       	std	Y+29, r17	; 0x1d
   19fe8:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19fea:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fec:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fee:	00 5a       	subi	r16, 0xA0	; 160
   19ff0:	1f 4f       	sbci	r17, 0xFF	; 255
   19ff2:	1d a3       	std	Y+37, r17	; 0x25
   19ff4:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19ff6:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ff8:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ffa:	04 59       	subi	r16, 0x94	; 148
   19ffc:	1f 4f       	sbci	r17, 0xFF	; 255
   19ffe:	1f a3       	std	Y+39, r17	; 0x27
   1a000:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a002:	8b ee       	ldi	r24, 0xEB	; 235
   1a004:	96 e3       	ldi	r25, 0x36	; 54
   1a006:	6c 01       	movw	r12, r24
   1a008:	e1 2c       	mov	r14, r1
   1a00a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a00c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a00e:	01 5b       	subi	r16, 0xB1	; 177
   1a010:	1f 4f       	sbci	r17, 0xFF	; 255
   1a012:	1f 8f       	std	Y+31, r17	; 0x1f
   1a014:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a016:	8b eb       	ldi	r24, 0xBB	; 187
   1a018:	96 e3       	ldi	r25, 0x36	; 54
   1a01a:	2c 01       	movw	r4, r24
   1a01c:	61 2c       	mov	r6, r1
   1a01e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a020:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a022:	04 5a       	subi	r16, 0xA4	; 164
   1a024:	1f 4f       	sbci	r17, 0xFF	; 255
   1a026:	19 a7       	std	Y+41, r17	; 0x29
   1a028:	08 a7       	std	Y+40, r16	; 0x28
   1a02a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a02c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a02e:	02 59       	subi	r16, 0x92	; 146
   1a030:	1f 4f       	sbci	r17, 0xFF	; 255
   1a032:	1b a7       	std	Y+43, r17	; 0x2b
   1a034:	0a a7       	std	Y+42, r16	; 0x2a
   1a036:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a038:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a03a:	0c 59       	subi	r16, 0x9C	; 156
   1a03c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a03e:	1d a7       	std	Y+45, r17	; 0x2d
   1a040:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a042:	b1 01       	movw	r22, r2
   1a044:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a046:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a048:	4d d8       	rcall	.-3942   	; 0x190e4 <lif_readdirindex>
   1a04a:	89 2b       	or	r24, r25
   1a04c:	09 f4       	brne	.+2      	; 0x1a050 <lif_dir+0x10e>
   1a04e:	ad c0       	rjmp	.+346    	; 0x1a1aa <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a050:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a052:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a054:	8d 91       	ld	r24, X+
   1a056:	9c 91       	ld	r25, X
   1a058:	8f 3f       	cpi	r24, 0xFF	; 255
   1a05a:	bf ef       	ldi	r27, 0xFF	; 255
   1a05c:	9b 07       	cpc	r25, r27
   1a05e:	09 f4       	brne	.+2      	; 0x1a062 <lif_dir+0x120>
   1a060:	a4 c0       	rjmp	.+328    	; 0x1a1aa <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a062:	ec a1       	ldd	r30, Y+36	; 0x24
   1a064:	fd a1       	ldd	r31, Y+37	; 0x25
   1a066:	40 81       	ld	r20, Z
   1a068:	51 81       	ldd	r21, Z+1	; 0x01
   1a06a:	62 81       	ldd	r22, Z+2	; 0x02
   1a06c:	73 81       	ldd	r23, Z+3	; 0x03
   1a06e:	00 27       	eor	r16, r16
   1a070:	14 2f       	mov	r17, r20
   1a072:	25 2f       	mov	r18, r21
   1a074:	36 2f       	mov	r19, r22
   1a076:	08 8f       	std	Y+24, r16	; 0x18
   1a078:	19 8f       	std	Y+25, r17	; 0x19
   1a07a:	2a 8f       	std	Y+26, r18	; 0x1a
   1a07c:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a07e:	8c 7f       	andi	r24, 0xFC	; 252
   1a080:	80 31       	cpi	r24, 0x10	; 16
   1a082:	90 4e       	sbci	r25, 0xE0	; 224
   1a084:	09 f0       	breq	.+2      	; 0x1a088 <lif_dir+0x146>
   1a086:	4b c0       	rjmp	.+150    	; 0x1a11e <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a088:	ae a1       	ldd	r26, Y+38	; 0x26
   1a08a:	bf a1       	ldd	r27, Y+39	; 0x27
   1a08c:	8d 91       	ld	r24, X+
   1a08e:	9c 91       	ld	r25, X
   1a090:	00 97       	sbiw	r24, 0x00	; 0
   1a092:	b9 f0       	breq	.+46     	; 0x1a0c2 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a094:	4c 01       	movw	r8, r24
   1a096:	a1 2c       	mov	r10, r1
   1a098:	b1 2c       	mov	r11, r1
   1a09a:	33 27       	eor	r19, r19
   1a09c:	2b 2d       	mov	r18, r11
   1a09e:	1a 2d       	mov	r17, r10
   1a0a0:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a0a2:	88 23       	and	r24, r24
   1a0a4:	21 f0       	breq	.+8      	; 0x1a0ae <lif_dir+0x16c>
        ++sectors;
   1a0a6:	0f 5f       	subi	r16, 0xFF	; 255
   1a0a8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0aa:	2f 4f       	sbci	r18, 0xFF	; 255
   1a0ac:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a0ae:	40 17       	cp	r20, r16
   1a0b0:	51 07       	cpc	r21, r17
   1a0b2:	62 07       	cpc	r22, r18
   1a0b4:	73 07       	cpc	r23, r19
   1a0b6:	29 f4       	brne	.+10     	; 0x1a0c2 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a0b8:	88 8e       	std	Y+24, r8	; 0x18
   1a0ba:	99 8e       	std	Y+25, r9	; 0x19
   1a0bc:	aa 8e       	std	Y+26, r10	; 0x1a
   1a0be:	bb 8e       	std	Y+27, r11	; 0x1b
   1a0c0:	2e c0       	rjmp	.+92     	; 0x1a11e <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a0c2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a0c6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a0ca:	32 ff       	sbrs	r19, 2
   1a0cc:	24 c0       	rjmp	.+72     	; 0x1a116 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a0ce:	4c 01       	movw	r8, r24
   1a0d0:	a1 2c       	mov	r10, r1
   1a0d2:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a0d4:	33 27       	eor	r19, r19
   1a0d6:	2b 2d       	mov	r18, r11
   1a0d8:	1a 2d       	mov	r17, r10
   1a0da:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a0dc:	88 23       	and	r24, r24
   1a0de:	21 f0       	breq	.+8      	; 0x1a0e8 <lif_dir+0x1a6>
        ++sectors;
   1a0e0:	0f 5f       	subi	r16, 0xFF	; 255
   1a0e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0e4:	2f 4f       	sbci	r18, 0xFF	; 255
   1a0e6:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a0e8:	ed b7       	in	r30, 0x3d	; 61
   1a0ea:	fe b7       	in	r31, 0x3e	; 62
   1a0ec:	46 87       	std	Z+14, r20	; 0x0e
   1a0ee:	57 87       	std	Z+15, r21	; 0x0f
   1a0f0:	60 8b       	std	Z+16, r22	; 0x10
   1a0f2:	71 8b       	std	Z+17, r23	; 0x11
   1a0f4:	02 87       	std	Z+10, r16	; 0x0a
   1a0f6:	13 87       	std	Z+11, r17	; 0x0b
   1a0f8:	24 87       	std	Z+12, r18	; 0x0c
   1a0fa:	35 87       	std	Z+13, r19	; 0x0d
   1a0fc:	86 82       	std	Z+6, r8	; 0x06
   1a0fe:	97 82       	std	Z+7, r9	; 0x07
   1a100:	a0 86       	std	Z+8, r10	; 0x08
   1a102:	b1 86       	std	Z+9, r11	; 0x09
   1a104:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a106:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a108:	15 83       	std	Z+5, r17	; 0x05
   1a10a:	04 83       	std	Z+4, r16	; 0x04
   1a10c:	c1 82       	std	Z+1, r12	; 0x01
   1a10e:	d2 82       	std	Z+2, r13	; 0x02
   1a110:	e3 82       	std	Z+3, r14	; 0x03
   1a112:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a116:	01 e2       	ldi	r16, 0x21	; 33
   1a118:	10 e0       	ldi	r17, 0x00	; 0
   1a11a:	1f 8b       	std	Y+23, r17	; 0x17
   1a11c:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a11e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a120:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a122:	8d 90       	ld	r8, X+
   1a124:	9c 90       	ld	r9, X
   1a126:	81 14       	cp	r8, r1
   1a128:	91 04       	cpc	r9, r1
   1a12a:	19 f0       	breq	.+6      	; 0x1a132 <lif_dir+0x1f0>
   1a12c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a12e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a130:	02 c0       	rjmp	.+4      	; 0x1a136 <lif_dir+0x1f4>
   1a132:	01 e5       	ldi	r16, 0x51	; 81
   1a134:	16 e1       	ldi	r17, 0x16	; 22
   1a136:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a138:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a13a:	8d 91       	ld	r24, X+
   1a13c:	9d 91       	ld	r25, X+
   1a13e:	0d 90       	ld	r0, X+
   1a140:	bc 91       	ld	r27, X
   1a142:	a0 2d       	mov	r26, r0
   1a144:	88 a3       	std	Y+32, r24	; 0x20
   1a146:	99 a3       	std	Y+33, r25	; 0x21
   1a148:	aa a3       	std	Y+34, r26	; 0x22
   1a14a:	bb a3       	std	Y+35, r27	; 0x23
   1a14c:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a14e:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a150:	a0 80       	ld	r10, Z
   1a152:	b1 80       	ldd	r11, Z+1	; 0x01
   1a154:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a156:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a158:	0e 94 42 c3 	call	0x18684	; 0x18684 <lif_lifbcd2timestr>
   1a15c:	ed b7       	in	r30, 0x3d	; 61
   1a15e:	fe b7       	in	r31, 0x3e	; 62
   1a160:	95 8b       	std	Z+21, r25	; 0x15
   1a162:	84 8b       	std	Z+20, r24	; 0x14
   1a164:	b3 8a       	std	Z+19, r11	; 0x13
   1a166:	a2 8a       	std	Z+18, r10	; 0x12
   1a168:	2e 89       	ldd	r18, Y+22	; 0x16
   1a16a:	3f 89       	ldd	r19, Y+23	; 0x17
   1a16c:	31 8b       	std	Z+17, r19	; 0x11
   1a16e:	20 8b       	std	Z+16, r18	; 0x10
   1a170:	88 8d       	ldd	r24, Y+24	; 0x18
   1a172:	99 8d       	ldd	r25, Y+25	; 0x19
   1a174:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a176:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a178:	84 87       	std	Z+12, r24	; 0x0c
   1a17a:	95 87       	std	Z+13, r25	; 0x0d
   1a17c:	a6 87       	std	Z+14, r26	; 0x0e
   1a17e:	b7 87       	std	Z+15, r27	; 0x0f
   1a180:	88 a1       	ldd	r24, Y+32	; 0x20
   1a182:	99 a1       	ldd	r25, Y+33	; 0x21
   1a184:	aa a1       	ldd	r26, Y+34	; 0x22
   1a186:	bb a1       	ldd	r27, Y+35	; 0x23
   1a188:	80 87       	std	Z+8, r24	; 0x08
   1a18a:	91 87       	std	Z+9, r25	; 0x09
   1a18c:	a2 87       	std	Z+10, r26	; 0x0a
   1a18e:	b3 87       	std	Z+11, r27	; 0x0b
   1a190:	97 82       	std	Z+7, r9	; 0x07
   1a192:	86 82       	std	Z+6, r8	; 0x06
   1a194:	15 83       	std	Z+5, r17	; 0x05
   1a196:	04 83       	std	Z+4, r16	; 0x04
   1a198:	41 82       	std	Z+1, r4	; 0x01
   1a19a:	52 82       	std	Z+2, r5	; 0x02
   1a19c:	63 82       	std	Z+3, r6	; 0x03
   1a19e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a1a2:	ff ef       	ldi	r31, 0xFF	; 255
   1a1a4:	2f 1a       	sub	r2, r31
   1a1a6:	3f 0a       	sbc	r3, r31
    }
   1a1a8:	4c cf       	rjmp	.-360    	; 0x1a042 <lif_dir+0x100>

    printf("\n");
   1a1aa:	89 eb       	ldi	r24, 0xB9	; 185
   1a1ac:	96 e3       	ldi	r25, 0x36	; 54
   1a1ae:	a0 e0       	ldi	r26, 0x00	; 0
   1a1b0:	ed b7       	in	r30, 0x3d	; 61
   1a1b2:	fe b7       	in	r31, 0x3e	; 62
   1a1b4:	81 83       	std	Z+1, r24	; 0x01
   1a1b6:	92 83       	std	Z+2, r25	; 0x02
   1a1b8:	a3 83       	std	Z+3, r26	; 0x03
   1a1ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a1be:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1c0:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1c2:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a1c4:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a1c6:	09 2e       	mov	r0, r25
   1a1c8:	00 0c       	add	r0, r0
   1a1ca:	aa 0b       	sbc	r26, r26
   1a1cc:	bb 0b       	sbc	r27, r27
   1a1ce:	ed b7       	in	r30, 0x3d	; 61
   1a1d0:	fe b7       	in	r31, 0x3e	; 62
   1a1d2:	84 83       	std	Z+4, r24	; 0x04
   1a1d4:	95 83       	std	Z+5, r25	; 0x05
   1a1d6:	a6 83       	std	Z+6, r26	; 0x06
   1a1d8:	b7 83       	std	Z+7, r27	; 0x07
   1a1da:	8d ea       	ldi	r24, 0xAD	; 173
   1a1dc:	96 e3       	ldi	r25, 0x36	; 54
   1a1de:	a0 e0       	ldi	r26, 0x00	; 0
   1a1e0:	81 83       	std	Z+1, r24	; 0x01
   1a1e2:	92 83       	std	Z+2, r25	; 0x02
   1a1e4:	a3 83       	std	Z+3, r26	; 0x03
   1a1e6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a1ea:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1ec:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1ee:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a1f0:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a1f2:	09 2e       	mov	r0, r25
   1a1f4:	00 0c       	add	r0, r0
   1a1f6:	aa 0b       	sbc	r26, r26
   1a1f8:	bb 0b       	sbc	r27, r27
   1a1fa:	ed b7       	in	r30, 0x3d	; 61
   1a1fc:	fe b7       	in	r31, 0x3e	; 62
   1a1fe:	84 83       	std	Z+4, r24	; 0x04
   1a200:	95 83       	std	Z+5, r25	; 0x05
   1a202:	a6 83       	std	Z+6, r26	; 0x06
   1a204:	b7 83       	std	Z+7, r27	; 0x07
   1a206:	80 ea       	ldi	r24, 0xA0	; 160
   1a208:	96 e3       	ldi	r25, 0x36	; 54
   1a20a:	a0 e0       	ldi	r26, 0x00	; 0
   1a20c:	81 83       	std	Z+1, r24	; 0x01
   1a20e:	92 83       	std	Z+2, r25	; 0x02
   1a210:	a3 83       	std	Z+3, r26	; 0x03
   1a212:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a216:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a218:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a21a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a21c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a21e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a220:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a222:	ed b7       	in	r30, 0x3d	; 61
   1a224:	fe b7       	in	r31, 0x3e	; 62
   1a226:	84 83       	std	Z+4, r24	; 0x04
   1a228:	95 83       	std	Z+5, r25	; 0x05
   1a22a:	a6 83       	std	Z+6, r26	; 0x06
   1a22c:	b7 83       	std	Z+7, r27	; 0x07
   1a22e:	8f e8       	ldi	r24, 0x8F	; 143
   1a230:	96 e3       	ldi	r25, 0x36	; 54
   1a232:	a0 e0       	ldi	r26, 0x00	; 0
   1a234:	81 83       	std	Z+1, r24	; 0x01
   1a236:	92 83       	std	Z+2, r25	; 0x02
   1a238:	a3 83       	std	Z+3, r26	; 0x03
   1a23a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a23e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a240:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a242:	85 a9       	ldd	r24, Z+53	; 0x35
   1a244:	96 a9       	ldd	r25, Z+54	; 0x36
   1a246:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a248:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a24a:	ed b7       	in	r30, 0x3d	; 61
   1a24c:	fe b7       	in	r31, 0x3e	; 62
   1a24e:	84 83       	std	Z+4, r24	; 0x04
   1a250:	95 83       	std	Z+5, r25	; 0x05
   1a252:	a6 83       	std	Z+6, r26	; 0x06
   1a254:	b7 83       	std	Z+7, r27	; 0x07
   1a256:	8c e7       	ldi	r24, 0x7C	; 124
   1a258:	96 e3       	ldi	r25, 0x36	; 54
   1a25a:	a0 e0       	ldi	r26, 0x00	; 0
   1a25c:	81 83       	std	Z+1, r24	; 0x01
   1a25e:	92 83       	std	Z+2, r25	; 0x02
   1a260:	a3 83       	std	Z+3, r26	; 0x03
   1a262:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a266:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a268:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a26a:	84 89       	ldd	r24, Z+20	; 0x14
   1a26c:	95 89       	ldd	r25, Z+21	; 0x15
   1a26e:	a6 89       	ldd	r26, Z+22	; 0x16
   1a270:	b7 89       	ldd	r27, Z+23	; 0x17
   1a272:	ed b7       	in	r30, 0x3d	; 61
   1a274:	fe b7       	in	r31, 0x3e	; 62
   1a276:	84 83       	std	Z+4, r24	; 0x04
   1a278:	95 83       	std	Z+5, r25	; 0x05
   1a27a:	a6 83       	std	Z+6, r26	; 0x06
   1a27c:	b7 83       	std	Z+7, r27	; 0x07
   1a27e:	89 e6       	ldi	r24, 0x69	; 105
   1a280:	96 e3       	ldi	r25, 0x36	; 54
   1a282:	a0 e0       	ldi	r26, 0x00	; 0
   1a284:	81 83       	std	Z+1, r24	; 0x01
   1a286:	92 83       	std	Z+2, r25	; 0x02
   1a288:	a3 83       	std	Z+3, r26	; 0x03
   1a28a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a28e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a290:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a292:	80 8d       	ldd	r24, Z+24	; 0x18
   1a294:	91 8d       	ldd	r25, Z+25	; 0x19
   1a296:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a298:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a29a:	ed b7       	in	r30, 0x3d	; 61
   1a29c:	fe b7       	in	r31, 0x3e	; 62
   1a29e:	84 83       	std	Z+4, r24	; 0x04
   1a2a0:	95 83       	std	Z+5, r25	; 0x05
   1a2a2:	a6 83       	std	Z+6, r26	; 0x06
   1a2a4:	b7 83       	std	Z+7, r27	; 0x07
   1a2a6:	86 e5       	ldi	r24, 0x56	; 86
   1a2a8:	96 e3       	ldi	r25, 0x36	; 54
   1a2aa:	a0 e0       	ldi	r26, 0x00	; 0
   1a2ac:	81 83       	std	Z+1, r24	; 0x01
   1a2ae:	92 83       	std	Z+2, r25	; 0x02
   1a2b0:	a3 83       	std	Z+3, r26	; 0x03
   1a2b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2b6:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a2b8:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a2ba:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a2be:	af 96       	adiw	r28, 0x2f	; 47
   1a2c0:	0f b6       	in	r0, 0x3f	; 63
   1a2c2:	f8 94       	cli
   1a2c4:	de bf       	out	0x3e, r29	; 62
   1a2c6:	0f be       	out	0x3f, r0	; 63
   1a2c8:	cd bf       	out	0x3d, r28	; 61
   1a2ca:	df 91       	pop	r29
   1a2cc:	cf 91       	pop	r28
   1a2ce:	1f 91       	pop	r17
   1a2d0:	0f 91       	pop	r16
   1a2d2:	ef 90       	pop	r14
   1a2d4:	df 90       	pop	r13
   1a2d6:	cf 90       	pop	r12
   1a2d8:	bf 90       	pop	r11
   1a2da:	af 90       	pop	r10
   1a2dc:	9f 90       	pop	r9
   1a2de:	8f 90       	pop	r8
   1a2e0:	6f 90       	pop	r6
   1a2e2:	5f 90       	pop	r5
   1a2e4:	4f 90       	pop	r4
   1a2e6:	3f 90       	pop	r3
   1a2e8:	2f 90       	pop	r2
   1a2ea:	08 95       	ret

0001a2ec <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a2ec:	a5 e0       	ldi	r26, 0x05	; 5
   1a2ee:	b0 e0       	ldi	r27, 0x00	; 0
   1a2f0:	ec e7       	ldi	r30, 0x7C	; 124
   1a2f2:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2f4:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   1a2f8:	7c 01       	movw	r14, r24
   1a2fa:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a2fc:	cb 01       	movw	r24, r22
   1a2fe:	0e 94 33 c0 	call	0x18066	; 0x18066 <lif_checkname>
   1a302:	89 2b       	or	r24, r25
   1a304:	69 f4       	brne	.+26     	; 0x1a320 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a306:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a30a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a30e:	92 ff       	sbrs	r25, 2
   1a310:	48 c0       	rjmp	.+144    	; 0x1a3a2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a312:	ed b7       	in	r30, 0x3d	; 61
   1a314:	fe b7       	in	r31, 0x3e	; 62
   1a316:	d5 83       	std	Z+5, r29	; 0x05
   1a318:	c4 83       	std	Z+4, r28	; 0x04
   1a31a:	8f e2       	ldi	r24, 0x2F	; 47
   1a31c:	96 e3       	ldi	r25, 0x36	; 54
   1a31e:	15 c0       	rjmp	.+42     	; 0x1a34a <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a320:	fe 01       	movw	r30, r28
   1a322:	01 90       	ld	r0, Z+
   1a324:	00 20       	and	r0, r0
   1a326:	e9 f7       	brne	.-6      	; 0x1a322 <lif_find_file+0x36>
   1a328:	31 97       	sbiw	r30, 0x01	; 1
   1a32a:	ec 1b       	sub	r30, r28
   1a32c:	fd 0b       	sbc	r31, r29
   1a32e:	3b 97       	sbiw	r30, 0x0b	; 11
   1a330:	98 f0       	brcs	.+38     	; 0x1a358 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a332:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a336:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a33a:	92 ff       	sbrs	r25, 2
   1a33c:	32 c0       	rjmp	.+100    	; 0x1a3a2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a33e:	ed b7       	in	r30, 0x3d	; 61
   1a340:	fe b7       	in	r31, 0x3e	; 62
   1a342:	d5 83       	std	Z+5, r29	; 0x05
   1a344:	c4 83       	std	Z+4, r28	; 0x04
   1a346:	8a e0       	ldi	r24, 0x0A	; 10
   1a348:	96 e3       	ldi	r25, 0x36	; 54
   1a34a:	a0 e0       	ldi	r26, 0x00	; 0
   1a34c:	81 83       	std	Z+1, r24	; 0x01
   1a34e:	92 83       	std	Z+2, r25	; 0x02
   1a350:	a3 83       	std	Z+3, r26	; 0x03
   1a352:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1a356:	25 c0       	rjmp	.+74     	; 0x1a3a2 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a358:	e1 14       	cp	r14, r1
   1a35a:	f1 04       	cpc	r15, r1
   1a35c:	11 f1       	breq	.+68     	; 0x1a3a2 <lif_find_file+0xb6>
   1a35e:	00 e0       	ldi	r16, 0x00	; 0
   1a360:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a362:	67 01       	movw	r12, r14
   1a364:	fa e5       	ldi	r31, 0x5A	; 90
   1a366:	cf 0e       	add	r12, r31
   1a368:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a36a:	57 01       	movw	r10, r14
   1a36c:	2f e4       	ldi	r18, 0x4F	; 79
   1a36e:	a2 0e       	add	r10, r18
   1a370:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a372:	b8 01       	movw	r22, r16
   1a374:	c7 01       	movw	r24, r14
   1a376:	0e 94 72 c8 	call	0x190e4	; 0x190e4 <lif_readdirindex>
   1a37a:	89 2b       	or	r24, r25
   1a37c:	91 f0       	breq	.+36     	; 0x1a3a2 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a37e:	f6 01       	movw	r30, r12
   1a380:	80 81       	ld	r24, Z
   1a382:	91 81       	ldd	r25, Z+1	; 0x01
   1a384:	8f 3f       	cpi	r24, 0xFF	; 255
   1a386:	ff ef       	ldi	r31, 0xFF	; 255
   1a388:	9f 07       	cpc	r25, r31
   1a38a:	59 f0       	breq	.+22     	; 0x1a3a2 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a38c:	89 2b       	or	r24, r25
   1a38e:	31 f0       	breq	.+12     	; 0x1a39c <lif_find_file+0xb0>
   1a390:	be 01       	movw	r22, r28
   1a392:	c5 01       	movw	r24, r10
   1a394:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <strcasecmp>
   1a398:	89 2b       	or	r24, r25
   1a39a:	31 f0       	breq	.+12     	; 0x1a3a8 <lif_find_file+0xbc>
            break;
        ++index;
   1a39c:	0f 5f       	subi	r16, 0xFF	; 255
   1a39e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3a0:	e8 cf       	rjmp	.-48     	; 0x1a372 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a3a2:	8f ef       	ldi	r24, 0xFF	; 255
   1a3a4:	9f ef       	ldi	r25, 0xFF	; 255
   1a3a6:	01 c0       	rjmp	.+2      	; 0x1a3aa <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a3a8:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a3aa:	cd b7       	in	r28, 0x3d	; 61
   1a3ac:	de b7       	in	r29, 0x3e	; 62
   1a3ae:	25 96       	adiw	r28, 0x05	; 5
   1a3b0:	ea e0       	ldi	r30, 0x0A	; 10
   1a3b2:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0001a3b6 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a3b6:	a5 e0       	ldi	r26, 0x05	; 5
   1a3b8:	b0 e0       	ldi	r27, 0x00	; 0
   1a3ba:	e1 ee       	ldi	r30, 0xE1	; 225
   1a3bc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a3be:	0c 94 a5 e3 	jmp	0x1c74a	; 0x1c74a <__prologue_saves__+0x14>
   1a3c2:	6b 01       	movw	r12, r22
   1a3c4:	7c 01       	movw	r14, r24
   1a3c6:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a3c8:	20 e0       	ldi	r18, 0x00	; 0
   1a3ca:	31 e0       	ldi	r19, 0x01	; 1
   1a3cc:	40 e0       	ldi	r20, 0x00	; 0
   1a3ce:	50 e0       	ldi	r21, 0x00	; 0
   1a3d0:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
    if(!pos)
   1a3d4:	61 15       	cp	r22, r1
   1a3d6:	71 05       	cpc	r23, r1
   1a3d8:	e1 f1       	breq	.+120    	; 0x1a452 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a3da:	c0 e0       	ldi	r28, 0x00	; 0
   1a3dc:	d1 e0       	ldi	r29, 0x01	; 1
   1a3de:	c6 1b       	sub	r28, r22
   1a3e0:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a3e2:	f8 01       	movw	r30, r16
   1a3e4:	8f ee       	ldi	r24, 0xEF	; 239
   1a3e6:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a3e8:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a3ea:	cf 01       	movw	r24, r30
   1a3ec:	80 1b       	sub	r24, r16
   1a3ee:	91 0b       	sbc	r25, r17
   1a3f0:	8c 17       	cp	r24, r28
   1a3f2:	9d 07       	cpc	r25, r29
   1a3f4:	14 f4       	brge	.+4      	; 0x1a3fa <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a3f6:	21 93       	st	Z+, r18
   1a3f8:	f8 cf       	rjmp	.-16     	; 0x1a3ea <lif_e010_pad_sector+0x34>
   1a3fa:	1c 16       	cp	r1, r28
   1a3fc:	1d 06       	cpc	r1, r29
   1a3fe:	14 f0       	brlt	.+4      	; 0x1a404 <lif_e010_pad_sector+0x4e>
   1a400:	c1 e0       	ldi	r28, 0x01	; 1
   1a402:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a404:	ce 01       	movw	r24, r28
   1a406:	0d 2e       	mov	r0, r29
   1a408:	00 0c       	add	r0, r0
   1a40a:	aa 0b       	sbc	r26, r26
   1a40c:	bb 0b       	sbc	r27, r27
   1a40e:	bc 01       	movw	r22, r24
   1a410:	cd 01       	movw	r24, r26
   1a412:	6c 0d       	add	r22, r12
   1a414:	7d 1d       	adc	r23, r13
   1a416:	8e 1d       	adc	r24, r14
   1a418:	9f 1d       	adc	r25, r15
   1a41a:	20 e0       	ldi	r18, 0x00	; 0
   1a41c:	31 e0       	ldi	r19, 0x01	; 1
   1a41e:	40 e0       	ldi	r20, 0x00	; 0
   1a420:	50 e0       	ldi	r21, 0x00	; 0
   1a422:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a426:	61 15       	cp	r22, r1
   1a428:	71 05       	cpc	r23, r1
   1a42a:	b1 f0       	breq	.+44     	; 0x1a458 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a42c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a430:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a434:	32 ff       	sbrs	r19, 2
   1a436:	12 c0       	rjmp	.+36     	; 0x1a45c <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a438:	ed b7       	in	r30, 0x3d	; 61
   1a43a:	fe b7       	in	r31, 0x3e	; 62
   1a43c:	75 83       	std	Z+5, r23	; 0x05
   1a43e:	64 83       	std	Z+4, r22	; 0x04
   1a440:	81 ed       	ldi	r24, 0xD1	; 209
   1a442:	95 e3       	ldi	r25, 0x35	; 53
   1a444:	a0 e0       	ldi	r26, 0x00	; 0
   1a446:	81 83       	std	Z+1, r24	; 0x01
   1a448:	92 83       	std	Z+2, r25	; 0x02
   1a44a:	a3 83       	std	Z+3, r26	; 0x03
   1a44c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1a450:	05 c0       	rjmp	.+10     	; 0x1a45c <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a452:	80 e0       	ldi	r24, 0x00	; 0
   1a454:	90 e0       	ldi	r25, 0x00	; 0
   1a456:	04 c0       	rjmp	.+8      	; 0x1a460 <lif_e010_pad_sector+0xaa>
   1a458:	ce 01       	movw	r24, r28
   1a45a:	02 c0       	rjmp	.+4      	; 0x1a460 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a45c:	8f ef       	ldi	r24, 0xFF	; 255
   1a45e:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a460:	cd b7       	in	r28, 0x3d	; 61
   1a462:	de b7       	in	r29, 0x3e	; 62
   1a464:	25 96       	adiw	r28, 0x05	; 5
   1a466:	e8 e0       	ldi	r30, 0x08	; 8
   1a468:	0c 94 c1 e3 	jmp	0x1c782	; 0x1c782 <__epilogue_restores__+0x14>

0001a46c <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a46c:	a5 e0       	ldi	r26, 0x05	; 5
   1a46e:	b0 e0       	ldi	r27, 0x00	; 0
   1a470:	ec e3       	ldi	r30, 0x3C	; 60
   1a472:	f2 ed       	ldi	r31, 0xD2	; 210
   1a474:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   1a478:	ec 01       	movw	r28, r24
   1a47a:	4a 01       	movw	r8, r20
   1a47c:	5b 01       	movw	r10, r22
   1a47e:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a480:	fc 01       	movw	r30, r24
   1a482:	01 90       	ld	r0, Z+
   1a484:	00 20       	and	r0, r0
   1a486:	e9 f7       	brne	.-6      	; 0x1a482 <lif_ascii_string_to_e010+0x16>
   1a488:	31 97       	sbiw	r30, 0x01	; 1
   1a48a:	6f 01       	movw	r12, r30
   1a48c:	c8 1a       	sub	r12, r24
   1a48e:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a490:	41 2c       	mov	r4, r1
   1a492:	51 2c       	mov	r5, r1
   1a494:	32 01       	movw	r6, r4
   1a496:	53 94       	inc	r5
   1a498:	cb 01       	movw	r24, r22
   1a49a:	ba 01       	movw	r22, r20
   1a49c:	a3 01       	movw	r20, r6
   1a49e:	92 01       	movw	r18, r4
   1a4a0:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
   1a4a4:	21 2c       	mov	r2, r1
   1a4a6:	33 24       	eor	r3, r3
   1a4a8:	33 94       	inc	r3
   1a4aa:	c1 01       	movw	r24, r2
   1a4ac:	86 1b       	sub	r24, r22
   1a4ae:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a4b0:	86 30       	cpi	r24, 0x06	; 6
   1a4b2:	91 05       	cpc	r25, r1
   1a4b4:	20 f0       	brcs	.+8      	; 0x1a4be <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a4b6:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a4b8:	00 e0       	ldi	r16, 0x00	; 0
   1a4ba:	10 e0       	ldi	r17, 0x00	; 0
   1a4bc:	17 c0       	rjmp	.+46     	; 0x1a4ec <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a4be:	a7 01       	movw	r20, r14
   1a4c0:	c5 01       	movw	r24, r10
   1a4c2:	b4 01       	movw	r22, r8
   1a4c4:	78 df       	rcall	.-272    	; 0x1a3b6 <lif_e010_pad_sector>
   1a4c6:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a4c8:	97 fd       	sbrc	r25, 7
   1a4ca:	83 c0       	rjmp	.+262    	; 0x1a5d2 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a4cc:	09 2e       	mov	r0, r25
   1a4ce:	00 0c       	add	r0, r0
   1a4d0:	aa 0b       	sbc	r26, r26
   1a4d2:	bb 0b       	sbc	r27, r27
   1a4d4:	bc 01       	movw	r22, r24
   1a4d6:	cd 01       	movw	r24, r26
   1a4d8:	68 0d       	add	r22, r8
   1a4da:	79 1d       	adc	r23, r9
   1a4dc:	8a 1d       	adc	r24, r10
   1a4de:	9b 1d       	adc	r25, r11
   1a4e0:	a3 01       	movw	r20, r6
   1a4e2:	92 01       	movw	r18, r4
   1a4e4:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
   1a4e8:	26 1a       	sub	r2, r22
   1a4ea:	37 0a       	sbc	r3, r23
   1a4ec:	f7 01       	movw	r30, r14
   1a4ee:	e0 0f       	add	r30, r16
   1a4f0:	f1 1f       	adc	r31, r17
   1a4f2:	0d 5f       	subi	r16, 0xFD	; 253
   1a4f4:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a4f6:	c6 01       	movw	r24, r12
   1a4f8:	02 96       	adiw	r24, 0x02	; 2
   1a4fa:	82 15       	cp	r24, r2
   1a4fc:	93 05       	cpc	r25, r3
   1a4fe:	84 f4       	brge	.+32     	; 0x1a520 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a500:	8f ed       	ldi	r24, 0xDF	; 223
   1a502:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a504:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a506:	d2 82       	std	Z+2, r13	; 0x02
   1a508:	f7 01       	movw	r30, r14
   1a50a:	e0 0f       	add	r30, r16
   1a50c:	f1 1f       	adc	r31, r17
   1a50e:	cf 01       	movw	r24, r30
   1a510:	8e 19       	sub	r24, r14
   1a512:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a514:	29 91       	ld	r18, Y+
   1a516:	22 23       	and	r18, r18
   1a518:	09 f4       	brne	.+2      	; 0x1a51c <lif_ascii_string_to_e010+0xb0>
   1a51a:	5b c0       	rjmp	.+182    	; 0x1a5d2 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a51c:	21 93       	st	Z+, r18
   1a51e:	f7 cf       	rjmp	.-18     	; 0x1a50e <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a520:	8f ec       	ldi	r24, 0xCF	; 207
   1a522:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a524:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a526:	d2 82       	std	Z+2, r13	; 0x02
   1a528:	d7 01       	movw	r26, r14
   1a52a:	a0 0f       	add	r26, r16
   1a52c:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a52e:	fe 01       	movw	r30, r28
   1a530:	81 91       	ld	r24, Z+
   1a532:	81 11       	cpse	r24, r1
   1a534:	0e c0       	rjmp	.+28     	; 0x1a552 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a536:	c8 01       	movw	r24, r16
   1a538:	01 2e       	mov	r0, r17
   1a53a:	00 0c       	add	r0, r0
   1a53c:	aa 0b       	sbc	r26, r26
   1a53e:	bb 0b       	sbc	r27, r27
   1a540:	bc 01       	movw	r22, r24
   1a542:	cd 01       	movw	r24, r26
   1a544:	68 0d       	add	r22, r8
   1a546:	79 1d       	adc	r23, r9
   1a548:	8a 1d       	adc	r24, r10
   1a54a:	9b 1d       	adc	r25, r11
   1a54c:	61 11       	cpse	r22, r1
   1a54e:	09 c0       	rjmp	.+18     	; 0x1a562 <lif_ascii_string_to_e010+0xf6>
   1a550:	21 c0       	rjmp	.+66     	; 0x1a594 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a552:	02 15       	cp	r16, r2
   1a554:	13 05       	cpc	r17, r3
   1a556:	7c f7       	brge	.-34     	; 0x1a536 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a558:	0f 5f       	subi	r16, 0xFF	; 255
   1a55a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a55c:	8d 93       	st	X+, r24
   1a55e:	ef 01       	movw	r28, r30
   1a560:	e6 cf       	rjmp	.-52     	; 0x1a52e <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a562:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a566:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a56a:	32 ff       	sbrs	r19, 2
   1a56c:	30 c0       	rjmp	.+96     	; 0x1a5ce <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a56e:	20 e0       	ldi	r18, 0x00	; 0
   1a570:	31 e0       	ldi	r19, 0x01	; 1
   1a572:	40 e0       	ldi	r20, 0x00	; 0
   1a574:	50 e0       	ldi	r21, 0x00	; 0
   1a576:	0e 94 50 e3 	call	0x1c6a0	; 0x1c6a0 <__divmodsi4>
   1a57a:	ed b7       	in	r30, 0x3d	; 61
   1a57c:	fe b7       	in	r31, 0x3e	; 62
   1a57e:	75 83       	std	Z+5, r23	; 0x05
   1a580:	64 83       	std	Z+4, r22	; 0x04
   1a582:	8d ea       	ldi	r24, 0xAD	; 173
   1a584:	95 e3       	ldi	r25, 0x35	; 53
   1a586:	a0 e0       	ldi	r26, 0x00	; 0
   1a588:	81 83       	std	Z+1, r24	; 0x01
   1a58a:	92 83       	std	Z+2, r25	; 0x02
   1a58c:	a3 83       	std	Z+3, r26	; 0x03
   1a58e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1a592:	1d c0       	rjmp	.+58     	; 0x1a5ce <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a594:	fe 01       	movw	r30, r28
   1a596:	01 90       	ld	r0, Z+
   1a598:	00 20       	and	r0, r0
   1a59a:	e9 f7       	brne	.-6      	; 0x1a596 <lif_ascii_string_to_e010+0x12a>
   1a59c:	31 97       	sbiw	r30, 0x01	; 1
   1a59e:	9f 01       	movw	r18, r30
   1a5a0:	2c 1b       	sub	r18, r28
   1a5a2:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a5a4:	d7 01       	movw	r26, r14
   1a5a6:	a0 0f       	add	r26, r16
   1a5a8:	b1 1f       	adc	r27, r17
   1a5aa:	8f e6       	ldi	r24, 0x6F	; 111
   1a5ac:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a5ae:	fd 01       	movw	r30, r26
   1a5b0:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a5b2:	32 83       	std	Z+2, r19	; 0x02
   1a5b4:	0d 5f       	subi	r16, 0xFD	; 253
   1a5b6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5b8:	f7 01       	movw	r30, r14
   1a5ba:	e0 0f       	add	r30, r16
   1a5bc:	f1 1f       	adc	r31, r17
   1a5be:	cf 01       	movw	r24, r30
   1a5c0:	8e 19       	sub	r24, r14
   1a5c2:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a5c4:	29 91       	ld	r18, Y+
   1a5c6:	22 23       	and	r18, r18
   1a5c8:	21 f0       	breq	.+8      	; 0x1a5d2 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a5ca:	21 93       	st	Z+, r18
   1a5cc:	f8 cf       	rjmp	.-16     	; 0x1a5be <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a5ce:	8f ef       	ldi	r24, 0xFF	; 255
   1a5d0:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a5d2:	cd b7       	in	r28, 0x3d	; 61
   1a5d4:	de b7       	in	r29, 0x3e	; 62
   1a5d6:	25 96       	adiw	r28, 0x05	; 5
   1a5d8:	e2 e1       	ldi	r30, 0x12	; 18
   1a5da:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001a5de <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a5de:	ad e0       	ldi	r26, 0x0D	; 13
   1a5e0:	b3 e0       	ldi	r27, 0x03	; 3
   1a5e2:	e5 ef       	ldi	r30, 0xF5	; 245
   1a5e4:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5e6:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   1a5ea:	5c 01       	movw	r10, r24
   1a5ec:	2a 01       	movw	r4, r20
   1a5ee:	3b 01       	movw	r6, r22
   1a5f0:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a5f2:	6e ef       	ldi	r22, 0xFE	; 254
   1a5f4:	78 e0       	ldi	r23, 0x08	; 8
   1a5f6:	0e 94 94 be 	call	0x17d28	; 0x17d28 <lif_open>
   1a5fa:	c7 5f       	subi	r28, 0xF7	; 247
   1a5fc:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5fe:	99 83       	std	Y+1, r25	; 0x01
   1a600:	88 83       	st	Y, r24
   1a602:	c9 50       	subi	r28, 0x09	; 9
   1a604:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a606:	89 2b       	or	r24, r25
   1a608:	09 f4       	brne	.+2      	; 0x1a60c <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a60a:	63 c0       	rjmp	.+198    	; 0x1a6d2 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a60c:	81 2c       	mov	r8, r1
   1a60e:	91 2c       	mov	r9, r1
   1a610:	c1 2c       	mov	r12, r1
   1a612:	d1 2c       	mov	r13, r1
   1a614:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a616:	8f e9       	ldi	r24, 0x9F	; 159
   1a618:	95 e3       	ldi	r25, 0x35	; 53
   1a61a:	9c 01       	movw	r18, r24
   1a61c:	40 e0       	ldi	r20, 0x00	; 0
   1a61e:	c5 5f       	subi	r28, 0xF5	; 245
   1a620:	dc 4f       	sbci	r29, 0xFC	; 252
   1a622:	28 83       	st	Y, r18
   1a624:	39 83       	std	Y+1, r19	; 0x01
   1a626:	4a 83       	std	Y+2, r20	; 0x02
   1a628:	cb 50       	subi	r28, 0x0B	; 11
   1a62a:	d3 40       	sbci	r29, 0x03	; 3
   1a62c:	14 c0       	rjmp	.+40     	; 0x1a656 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a62e:	c1 01       	movw	r24, r2
   1a630:	03 2c       	mov	r0, r3
   1a632:	00 0c       	add	r0, r0
   1a634:	aa 0b       	sbc	r26, r26
   1a636:	bb 0b       	sbc	r27, r27
   1a638:	48 0e       	add	r4, r24
   1a63a:	59 1e       	adc	r5, r25
   1a63c:	6a 1e       	adc	r6, r26
   1a63e:	7b 1e       	adc	r7, r27
        bytes += size;
   1a640:	c8 0e       	add	r12, r24
   1a642:	d9 1e       	adc	r13, r25
   1a644:	ea 1e       	adc	r14, r26
   1a646:	fb 1e       	adc	r15, r27
        count += size;
   1a648:	82 0c       	add	r8, r2
   1a64a:	93 1c       	adc	r9, r3

        if(count > 256)
   1a64c:	31 e0       	ldi	r19, 0x01	; 1
   1a64e:	83 16       	cp	r8, r19
   1a650:	93 06       	cpc	r9, r19
   1a652:	0c f0       	brlt	.+2      	; 0x1a656 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a654:	43 c0       	rjmp	.+134    	; 0x1a6dc <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a656:	c7 5f       	subi	r28, 0xF7	; 247
   1a658:	dc 4f       	sbci	r29, 0xFC	; 252
   1a65a:	48 81       	ld	r20, Y
   1a65c:	59 81       	ldd	r21, Y+1	; 0x01
   1a65e:	c9 50       	subi	r28, 0x09	; 9
   1a660:	d3 40       	sbci	r29, 0x03	; 3
   1a662:	6d ef       	ldi	r22, 0xFD	; 253
   1a664:	70 e0       	ldi	r23, 0x00	; 0
   1a666:	ce 01       	movw	r24, r28
   1a668:	88 5f       	subi	r24, 0xF8	; 248
   1a66a:	9d 4f       	sbci	r25, 0xFD	; 253
   1a66c:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
   1a670:	89 2b       	or	r24, r25
   1a672:	09 f4       	brne	.+2      	; 0x1a676 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a674:	4b c0       	rjmp	.+150    	; 0x1a70c <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a676:	ce 01       	movw	r24, r28
   1a678:	88 5f       	subi	r24, 0xF8	; 248
   1a67a:	9d 4f       	sbci	r25, 0xFD	; 253
   1a67c:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a680:	6a e5       	ldi	r22, 0x5A	; 90
   1a682:	76 e1       	ldi	r23, 0x16	; 22
   1a684:	ce 01       	movw	r24, r28
   1a686:	88 5f       	subi	r24, 0xF8	; 248
   1a688:	9d 4f       	sbci	r25, 0xFD	; 253
   1a68a:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a68e:	9e 01       	movw	r18, r28
   1a690:	28 5f       	subi	r18, 0xF8	; 248
   1a692:	3f 4f       	sbci	r19, 0xFF	; 255
   1a694:	b3 01       	movw	r22, r6
   1a696:	a2 01       	movw	r20, r4
   1a698:	ce 01       	movw	r24, r28
   1a69a:	88 5f       	subi	r24, 0xF8	; 248
   1a69c:	9d 4f       	sbci	r25, 0xFD	; 253
   1a69e:	e6 de       	rcall	.-564    	; 0x1a46c <lif_ascii_string_to_e010>
   1a6a0:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a6a2:	a1 14       	cp	r10, r1
   1a6a4:	b1 04       	cpc	r11, r1
   1a6a6:	19 f2       	breq	.-122    	; 0x1a62e <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a6a8:	8c 01       	movw	r16, r24
   1a6aa:	a3 01       	movw	r20, r6
   1a6ac:	92 01       	movw	r18, r4
   1a6ae:	be 01       	movw	r22, r28
   1a6b0:	68 5f       	subi	r22, 0xF8	; 248
   1a6b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6b4:	c5 01       	movw	r24, r10
   1a6b6:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
            if(len < size)
   1a6ba:	82 15       	cp	r24, r2
   1a6bc:	93 05       	cpc	r25, r3
   1a6be:	0c f0       	brlt	.+2      	; 0x1a6c2 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a6c0:	b6 cf       	rjmp	.-148    	; 0x1a62e <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a6c2:	c7 5f       	subi	r28, 0xF7	; 247
   1a6c4:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6c6:	88 81       	ld	r24, Y
   1a6c8:	99 81       	ldd	r25, Y+1	; 0x01
   1a6ca:	c9 50       	subi	r28, 0x09	; 9
   1a6cc:	d3 40       	sbci	r29, 0x03	; 3
   1a6ce:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
                return(-1);
   1a6d2:	6f ef       	ldi	r22, 0xFF	; 255
   1a6d4:	7f ef       	ldi	r23, 0xFF	; 255
   1a6d6:	8f ef       	ldi	r24, 0xFF	; 255
   1a6d8:	9f ef       	ldi	r25, 0xFF	; 255
   1a6da:	84 c0       	rjmp	.+264    	; 0x1a7e4 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a6dc:	a1 14       	cp	r10, r1
   1a6de:	b1 04       	cpc	r11, r1
   1a6e0:	91 f0       	breq	.+36     	; 0x1a706 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a6e2:	ed b7       	in	r30, 0x3d	; 61
   1a6e4:	fe b7       	in	r31, 0x3e	; 62
   1a6e6:	c4 82       	std	Z+4, r12	; 0x04
   1a6e8:	d5 82       	std	Z+5, r13	; 0x05
   1a6ea:	e6 82       	std	Z+6, r14	; 0x06
   1a6ec:	f7 82       	std	Z+7, r15	; 0x07
   1a6ee:	c5 5f       	subi	r28, 0xF5	; 245
   1a6f0:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6f2:	28 81       	ld	r18, Y
   1a6f4:	39 81       	ldd	r19, Y+1	; 0x01
   1a6f6:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6f8:	cb 50       	subi	r28, 0x0B	; 11
   1a6fa:	d3 40       	sbci	r29, 0x03	; 3
   1a6fc:	21 83       	std	Z+1, r18	; 0x01
   1a6fe:	32 83       	std	Z+2, r19	; 0x02
   1a700:	43 83       	std	Z+3, r20	; 0x03
   1a702:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a706:	81 2c       	mov	r8, r1
   1a708:	91 2c       	mov	r9, r1
   1a70a:	a5 cf       	rjmp	.-182    	; 0x1a656 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a70c:	c7 5f       	subi	r28, 0xF7	; 247
   1a70e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a710:	88 81       	ld	r24, Y
   1a712:	99 81       	ldd	r25, Y+1	; 0x01
   1a714:	c9 50       	subi	r28, 0x09	; 9
   1a716:	d3 40       	sbci	r29, 0x03	; 3
   1a718:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>

// Write EOF
    str[0] = 0;
   1a71c:	c8 5f       	subi	r28, 0xF8	; 248
   1a71e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a720:	18 82       	st	Y, r1
   1a722:	c8 50       	subi	r28, 0x08	; 8
   1a724:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a726:	9e 01       	movw	r18, r28
   1a728:	28 5f       	subi	r18, 0xF8	; 248
   1a72a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a72c:	b3 01       	movw	r22, r6
   1a72e:	a2 01       	movw	r20, r4
   1a730:	ce 01       	movw	r24, r28
   1a732:	88 5f       	subi	r24, 0xF8	; 248
   1a734:	9d 4f       	sbci	r25, 0xFD	; 253
   1a736:	9a de       	rcall	.-716    	; 0x1a46c <lif_ascii_string_to_e010>
   1a738:	4c 01       	movw	r8, r24

    if(LIF)
   1a73a:	a1 14       	cp	r10, r1
   1a73c:	b1 04       	cpc	r11, r1
   1a73e:	d1 f4       	brne	.+52     	; 0x1a774 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a740:	c4 01       	movw	r24, r8
   1a742:	09 2c       	mov	r0, r9
   1a744:	00 0c       	add	r0, r0
   1a746:	aa 0b       	sbc	r26, r26
   1a748:	bb 0b       	sbc	r27, r27
   1a74a:	c8 0e       	add	r12, r24
   1a74c:	d9 1e       	adc	r13, r25
   1a74e:	ea 1e       	adc	r14, r26
   1a750:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a752:	12 01       	movw	r2, r4
   1a754:	23 01       	movw	r4, r6
   1a756:	28 0e       	add	r2, r24
   1a758:	39 1e       	adc	r3, r25
   1a75a:	4a 1e       	adc	r4, r26
   1a75c:	5b 1e       	adc	r5, r27
   1a75e:	ae 01       	movw	r20, r28
   1a760:	48 5f       	subi	r20, 0xF8	; 248
   1a762:	5f 4f       	sbci	r21, 0xFF	; 255
   1a764:	c2 01       	movw	r24, r4
   1a766:	b1 01       	movw	r22, r2
   1a768:	26 de       	rcall	.-948    	; 0x1a3b6 <lif_e010_pad_sector>
   1a76a:	3c 01       	movw	r6, r24
    if(LIF)
   1a76c:	a1 14       	cp	r10, r1
   1a76e:	b1 04       	cpc	r11, r1
   1a770:	e1 f4       	brne	.+56     	; 0x1a7aa <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a772:	36 c0       	rjmp	.+108    	; 0x1a7e0 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a774:	ed b7       	in	r30, 0x3d	; 61
   1a776:	fe b7       	in	r31, 0x3e	; 62
   1a778:	c4 82       	std	Z+4, r12	; 0x04
   1a77a:	d5 82       	std	Z+5, r13	; 0x05
   1a77c:	e6 82       	std	Z+6, r14	; 0x06
   1a77e:	f7 82       	std	Z+7, r15	; 0x07
   1a780:	81 e9       	ldi	r24, 0x91	; 145
   1a782:	95 e3       	ldi	r25, 0x35	; 53
   1a784:	a0 e0       	ldi	r26, 0x00	; 0
   1a786:	81 83       	std	Z+1, r24	; 0x01
   1a788:	92 83       	std	Z+2, r25	; 0x02
   1a78a:	a3 83       	std	Z+3, r26	; 0x03
   1a78c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a790:	84 01       	movw	r16, r8
   1a792:	a3 01       	movw	r20, r6
   1a794:	92 01       	movw	r18, r4
   1a796:	be 01       	movw	r22, r28
   1a798:	68 5f       	subi	r22, 0xF8	; 248
   1a79a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a79c:	c5 01       	movw	r24, r10
   1a79e:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
        if(len < size)
   1a7a2:	88 15       	cp	r24, r8
   1a7a4:	99 05       	cpc	r25, r9
   1a7a6:	64 f6       	brge	.-104    	; 0x1a740 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a7a8:	94 cf       	rjmp	.-216    	; 0x1a6d2 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a7aa:	8c 01       	movw	r16, r24
   1a7ac:	a2 01       	movw	r20, r4
   1a7ae:	91 01       	movw	r18, r2
   1a7b0:	be 01       	movw	r22, r28
   1a7b2:	68 5f       	subi	r22, 0xF8	; 248
   1a7b4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a7b6:	c5 01       	movw	r24, r10
   1a7b8:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
        if(len < size)
   1a7bc:	86 15       	cp	r24, r6
   1a7be:	97 05       	cpc	r25, r7
   1a7c0:	0c f4       	brge	.+2      	; 0x1a7c4 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a7c2:	87 cf       	rjmp	.-242    	; 0x1a6d2 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a7c4:	ed b7       	in	r30, 0x3d	; 61
   1a7c6:	fe b7       	in	r31, 0x3e	; 62
   1a7c8:	c4 82       	std	Z+4, r12	; 0x04
   1a7ca:	d5 82       	std	Z+5, r13	; 0x05
   1a7cc:	e6 82       	std	Z+6, r14	; 0x06
   1a7ce:	f7 82       	std	Z+7, r15	; 0x07
   1a7d0:	83 e8       	ldi	r24, 0x83	; 131
   1a7d2:	95 e3       	ldi	r25, 0x35	; 53
   1a7d4:	a0 e0       	ldi	r26, 0x00	; 0
   1a7d6:	81 83       	std	Z+1, r24	; 0x01
   1a7d8:	92 83       	std	Z+2, r25	; 0x02
   1a7da:	a3 83       	std	Z+3, r26	; 0x03
   1a7dc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    return(bytes);
   1a7e0:	b6 01       	movw	r22, r12
   1a7e2:	c7 01       	movw	r24, r14
}
   1a7e4:	c3 5f       	subi	r28, 0xF3	; 243
   1a7e6:	dc 4f       	sbci	r29, 0xFC	; 252
   1a7e8:	e2 e1       	ldi	r30, 0x12	; 18
   1a7ea:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001a7ee <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a7ee:	ab e3       	ldi	r26, 0x3B	; 59
   1a7f0:	b0 e0       	ldi	r27, 0x00	; 0
   1a7f2:	ed ef       	ldi	r30, 0xFD	; 253
   1a7f4:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7f6:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   1a7fa:	6c 01       	movw	r12, r24
   1a7fc:	1b 01       	movw	r2, r22
   1a7fe:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a800:	fc 01       	movw	r30, r24
   1a802:	80 81       	ld	r24, Z
   1a804:	81 11       	cpse	r24, r1
   1a806:	03 c0       	rjmp	.+6      	; 0x1a80e <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a808:	80 e5       	ldi	r24, 0x50	; 80
   1a80a:	95 e3       	ldi	r25, 0x35	; 53
   1a80c:	1a c0       	rjmp	.+52     	; 0x1a842 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a80e:	fb 01       	movw	r30, r22
   1a810:	80 81       	ld	r24, Z
   1a812:	81 11       	cpse	r24, r1
   1a814:	03 c0       	rjmp	.+6      	; 0x1a81c <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a816:	82 e2       	ldi	r24, 0x22	; 34
   1a818:	95 e3       	ldi	r25, 0x35	; 53
   1a81a:	13 c0       	rjmp	.+38     	; 0x1a842 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a81c:	fa 01       	movw	r30, r20
   1a81e:	80 81       	ld	r24, Z
   1a820:	81 11       	cpse	r24, r1
   1a822:	03 c0       	rjmp	.+6      	; 0x1a82a <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a824:	83 ef       	ldi	r24, 0xF3	; 243
   1a826:	94 e3       	ldi	r25, 0x34	; 52
   1a828:	0c c0       	rjmp	.+24     	; 0x1a842 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a82a:	be 01       	movw	r22, r28
   1a82c:	66 5f       	subi	r22, 0xF6	; 246
   1a82e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a830:	ca 01       	movw	r24, r20
   1a832:	0e 94 be be 	call	0x17d7c	; 0x17d7c <lif_stat>
   1a836:	9b af       	std	Y+59, r25	; 0x3b
   1a838:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a83a:	89 2b       	or	r24, r25
   1a83c:	59 f4       	brne	.+22     	; 0x1a854 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a83e:	83 ec       	ldi	r24, 0xC3	; 195
   1a840:	94 e3       	ldi	r25, 0x34	; 52
   1a842:	a0 e0       	ldi	r26, 0x00	; 0
   1a844:	ed b7       	in	r30, 0x3d	; 61
   1a846:	fe b7       	in	r31, 0x3e	; 62
   1a848:	81 83       	std	Z+1, r24	; 0x01
   1a84a:	92 83       	std	Z+2, r25	; 0x02
   1a84c:	a3 83       	std	Z+3, r26	; 0x03
   1a84e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1a852:	01 c1       	rjmp	.+514    	; 0x1aa56 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a854:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a858:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a85c:	92 ff       	sbrs	r25, 2
   1a85e:	10 c0       	rjmp	.+32     	; 0x1a880 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a860:	ed b7       	in	r30, 0x3d	; 61
   1a862:	fe b7       	in	r31, 0x3e	; 62
   1a864:	f1 86       	std	Z+9, r15	; 0x09
   1a866:	e0 86       	std	Z+8, r14	; 0x08
   1a868:	37 82       	std	Z+7, r3	; 0x07
   1a86a:	26 82       	std	Z+6, r2	; 0x06
   1a86c:	d5 82       	std	Z+5, r13	; 0x05
   1a86e:	c4 82       	std	Z+4, r12	; 0x04
   1a870:	84 e9       	ldi	r24, 0x94	; 148
   1a872:	94 e3       	ldi	r25, 0x34	; 52
   1a874:	a0 e0       	ldi	r26, 0x00	; 0
   1a876:	81 83       	std	Z+1, r24	; 0x01
   1a878:	92 83       	std	Z+2, r25	; 0x02
   1a87a:	a3 83       	std	Z+3, r26	; 0x03
   1a87c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a880:	97 01       	movw	r18, r14
   1a882:	40 e0       	ldi	r20, 0x00	; 0
   1a884:	50 e0       	ldi	r21, 0x00	; 0
   1a886:	ba 01       	movw	r22, r20
   1a888:	80 e0       	ldi	r24, 0x00	; 0
   1a88a:	90 e0       	ldi	r25, 0x00	; 0
   1a88c:	a8 de       	rcall	.-688    	; 0x1a5de <lif_add_ascii_file_as_e010_wrapper>
   1a88e:	4b 01       	movw	r8, r22
   1a890:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a892:	47 2e       	mov	r4, r23
   1a894:	58 2e       	mov	r5, r24
   1a896:	69 2e       	mov	r6, r25
   1a898:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a89a:	66 23       	and	r22, r22
   1a89c:	29 f0       	breq	.+10     	; 0x1a8a8 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a89e:	ff ef       	ldi	r31, 0xFF	; 255
   1a8a0:	4f 1a       	sub	r4, r31
   1a8a2:	5f 0a       	sbc	r5, r31
   1a8a4:	6f 0a       	sbc	r6, r31
   1a8a6:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a8a8:	61 e0       	ldi	r22, 0x01	; 1
   1a8aa:	79 e0       	ldi	r23, 0x09	; 9
   1a8ac:	c6 01       	movw	r24, r12
   1a8ae:	49 da       	rcall	.-2926   	; 0x19d42 <lif_open_volume>
   1a8b0:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a8b2:	00 97       	sbiw	r24, 0x00	; 0
   1a8b4:	09 f4       	brne	.+2      	; 0x1a8b8 <lif_add_ascii_file_as_e010+0xca>
   1a8b6:	cf c0       	rjmp	.+414    	; 0x1aa56 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a8b8:	b3 01       	movw	r22, r6
   1a8ba:	a2 01       	movw	r20, r4
   1a8bc:	e2 d8       	rcall	.-3644   	; 0x19a82 <lif_newdir>
   1a8be:	3c 01       	movw	r6, r24
    if(index == -1)
   1a8c0:	8f ef       	ldi	r24, 0xFF	; 255
   1a8c2:	68 16       	cp	r6, r24
   1a8c4:	78 06       	cpc	r7, r24
   1a8c6:	79 f4       	brne	.+30     	; 0x1a8e6 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a8c8:	ed b7       	in	r30, 0x3d	; 61
   1a8ca:	fe b7       	in	r31, 0x3e	; 62
   1a8cc:	f7 82       	std	Z+7, r15	; 0x07
   1a8ce:	e6 82       	std	Z+6, r14	; 0x06
   1a8d0:	d5 82       	std	Z+5, r13	; 0x05
   1a8d2:	c4 82       	std	Z+4, r12	; 0x04
   1a8d4:	84 e6       	ldi	r24, 0x64	; 100
   1a8d6:	94 e3       	ldi	r25, 0x34	; 52
   1a8d8:	a0 e0       	ldi	r26, 0x00	; 0
   1a8da:	81 83       	std	Z+1, r24	; 0x01
   1a8dc:	92 83       	std	Z+2, r25	; 0x02
   1a8de:	a3 83       	std	Z+3, r26	; 0x03
   1a8e0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1a8e4:	a0 c0       	rjmp	.+320    	; 0x1aa26 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a8e6:	68 01       	movw	r12, r16
   1a8e8:	ff e4       	ldi	r31, 0x4F	; 79
   1a8ea:	cf 0e       	add	r12, r31
   1a8ec:	d1 1c       	adc	r13, r1
   1a8ee:	4a e0       	ldi	r20, 0x0A	; 10
   1a8f0:	50 e0       	ldi	r21, 0x00	; 0
   1a8f2:	b1 01       	movw	r22, r2
   1a8f4:	c6 01       	movw	r24, r12
   1a8f6:	0e 94 6d c0 	call	0x180da	; 0x180da <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a8fa:	80 e1       	ldi	r24, 0x10	; 16
   1a8fc:	90 ee       	ldi	r25, 0xE0	; 224
   1a8fe:	f8 01       	movw	r30, r16
   1a900:	e6 5a       	subi	r30, 0xA6	; 166
   1a902:	ff 4f       	sbci	r31, 0xFF	; 255
   1a904:	91 83       	std	Z+1, r25	; 0x01
   1a906:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a908:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a90a:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a90c:	60 a5       	ldd	r22, Z+40	; 0x28
   1a90e:	71 a5       	ldd	r23, Z+41	; 0x29
   1a910:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a912:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a914:	a8 01       	movw	r20, r16
   1a916:	4c 59       	subi	r20, 0x9C	; 156
   1a918:	5f 4f       	sbci	r21, 0xFF	; 255
   1a91a:	0e 94 92 c2 	call	0x18524	; 0x18524 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a91e:	81 e0       	ldi	r24, 0x01	; 1
   1a920:	90 e8       	ldi	r25, 0x80	; 128
   1a922:	f8 01       	movw	r30, r16
   1a924:	e6 59       	subi	r30, 0x96	; 150
   1a926:	ff 4f       	sbci	r31, 0xFF	; 255
   1a928:	91 83       	std	Z+1, r25	; 0x01
   1a92a:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a92c:	32 96       	adiw	r30, 0x02	; 2
   1a92e:	91 82       	std	Z+1, r9	; 0x01
   1a930:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a932:	80 e0       	ldi	r24, 0x00	; 0
   1a934:	91 e0       	ldi	r25, 0x01	; 1
   1a936:	32 96       	adiw	r30, 0x02	; 2
   1a938:	91 83       	std	Z+1, r25	; 0x01
   1a93a:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a93c:	58 01       	movw	r10, r16
   1a93e:	fc e5       	ldi	r31, 0x5C	; 92
   1a940:	af 0e       	add	r10, r31
   1a942:	b1 1c       	adc	r11, r1
   1a944:	f5 01       	movw	r30, r10
   1a946:	80 81       	ld	r24, Z
   1a948:	91 81       	ldd	r25, Z+1	; 0x01
   1a94a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a94c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a94e:	22 24       	eor	r2, r2
   1a950:	38 2e       	mov	r3, r24
   1a952:	49 2e       	mov	r4, r25
   1a954:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a956:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a95a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a95e:	92 ff       	sbrs	r25, 2
   1a960:	05 c0       	rjmp	.+10     	; 0x1a96c <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a962:	6c e5       	ldi	r22, 0x5C	; 92
   1a964:	76 e1       	ldi	r23, 0x16	; 22
   1a966:	c8 01       	movw	r24, r16
   1a968:	0e 94 7e c3 	call	0x186fc	; 0x186fc <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a96c:	97 01       	movw	r18, r14
   1a96e:	b2 01       	movw	r22, r4
   1a970:	a1 01       	movw	r20, r2
   1a972:	c8 01       	movw	r24, r16
   1a974:	34 de       	rcall	.-920    	; 0x1a5de <lif_add_ascii_file_as_e010_wrapper>
   1a976:	4b 01       	movw	r8, r22
   1a978:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a97a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a97e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a982:	92 ff       	sbrs	r25, 2
   1a984:	4a c0       	rjmp	.+148    	; 0x1aa1a <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a986:	8d e3       	ldi	r24, 0x3D	; 61
   1a988:	94 e3       	ldi	r25, 0x34	; 52
   1a98a:	a0 e0       	ldi	r26, 0x00	; 0
   1a98c:	ed b7       	in	r30, 0x3d	; 61
   1a98e:	fe b7       	in	r31, 0x3e	; 62
   1a990:	81 83       	std	Z+1, r24	; 0x01
   1a992:	92 83       	std	Z+2, r25	; 0x02
   1a994:	a3 83       	std	Z+3, r26	; 0x03
   1a996:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a99a:	ed b7       	in	r30, 0x3d	; 61
   1a99c:	fe b7       	in	r31, 0x3e	; 62
   1a99e:	d5 82       	std	Z+5, r13	; 0x05
   1a9a0:	c4 82       	std	Z+4, r12	; 0x04
   1a9a2:	86 e2       	ldi	r24, 0x26	; 38
   1a9a4:	94 e3       	ldi	r25, 0x34	; 52
   1a9a6:	a0 e0       	ldi	r26, 0x00	; 0
   1a9a8:	81 83       	std	Z+1, r24	; 0x01
   1a9aa:	92 83       	std	Z+2, r25	; 0x02
   1a9ac:	a3 83       	std	Z+3, r26	; 0x03
   1a9ae:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a9b2:	ed b7       	in	r30, 0x3d	; 61
   1a9b4:	fe b7       	in	r31, 0x3e	; 62
   1a9b6:	75 82       	std	Z+5, r7	; 0x05
   1a9b8:	64 82       	std	Z+4, r6	; 0x04
   1a9ba:	8f e0       	ldi	r24, 0x0F	; 15
   1a9bc:	94 e3       	ldi	r25, 0x34	; 52
   1a9be:	a0 e0       	ldi	r26, 0x00	; 0
   1a9c0:	81 83       	std	Z+1, r24	; 0x01
   1a9c2:	92 83       	std	Z+2, r25	; 0x02
   1a9c4:	a3 83       	std	Z+3, r26	; 0x03
   1a9c6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a9ca:	f5 01       	movw	r30, r10
   1a9cc:	80 81       	ld	r24, Z
   1a9ce:	91 81       	ldd	r25, Z+1	; 0x01
   1a9d0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9d2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9d4:	ed b7       	in	r30, 0x3d	; 61
   1a9d6:	fe b7       	in	r31, 0x3e	; 62
   1a9d8:	84 83       	std	Z+4, r24	; 0x04
   1a9da:	95 83       	std	Z+5, r25	; 0x05
   1a9dc:	a6 83       	std	Z+6, r26	; 0x06
   1a9de:	b7 83       	std	Z+7, r27	; 0x07
   1a9e0:	86 ef       	ldi	r24, 0xF6	; 246
   1a9e2:	93 e3       	ldi	r25, 0x33	; 51
   1a9e4:	a0 e0       	ldi	r26, 0x00	; 0
   1a9e6:	81 83       	std	Z+1, r24	; 0x01
   1a9e8:	92 83       	std	Z+2, r25	; 0x02
   1a9ea:	a3 83       	std	Z+3, r26	; 0x03
   1a9ec:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a9f0:	f8 01       	movw	r30, r16
   1a9f2:	e0 5a       	subi	r30, 0xA0	; 160
   1a9f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9f6:	80 81       	ld	r24, Z
   1a9f8:	91 81       	ldd	r25, Z+1	; 0x01
   1a9fa:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9fc:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9fe:	ed b7       	in	r30, 0x3d	; 61
   1aa00:	fe b7       	in	r31, 0x3e	; 62
   1aa02:	84 83       	std	Z+4, r24	; 0x04
   1aa04:	95 83       	std	Z+5, r25	; 0x05
   1aa06:	a6 83       	std	Z+6, r26	; 0x06
   1aa08:	b7 83       	std	Z+7, r27	; 0x07
   1aa0a:	8d ed       	ldi	r24, 0xDD	; 221
   1aa0c:	93 e3       	ldi	r25, 0x33	; 51
   1aa0e:	a0 e0       	ldi	r26, 0x00	; 0
   1aa10:	81 83       	std	Z+1, r24	; 0x01
   1aa12:	92 83       	std	Z+2, r25	; 0x02
   1aa14:	a3 83       	std	Z+3, r26	; 0x03
   1aa16:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1aa1a:	b3 01       	movw	r22, r6
   1aa1c:	c8 01       	movw	r24, r16
   1aa1e:	0e 94 d9 c8 	call	0x191b2	; 0x191b2 <lif_writedirindex>
   1aa22:	89 2b       	or	r24, r25
   1aa24:	21 f4       	brne	.+8      	; 0x1aa2e <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aa26:	c8 01       	movw	r24, r16
   1aa28:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1aa2c:	14 c0       	rjmp	.+40     	; 0x1aa56 <lif_add_ascii_file_as_e010+0x268>
   1aa2e:	c8 01       	movw	r24, r16
   1aa30:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1aa34:	ed b7       	in	r30, 0x3d	; 61
   1aa36:	fe b7       	in	r31, 0x3e	; 62
   1aa38:	84 82       	std	Z+4, r8	; 0x04
   1aa3a:	95 82       	std	Z+5, r9	; 0x05
   1aa3c:	e6 82       	std	Z+6, r14	; 0x06
   1aa3e:	f7 82       	std	Z+7, r15	; 0x07
   1aa40:	8f ec       	ldi	r24, 0xCF	; 207
   1aa42:	93 e3       	ldi	r25, 0x33	; 51
   1aa44:	a0 e0       	ldi	r26, 0x00	; 0
   1aa46:	81 83       	std	Z+1, r24	; 0x01
   1aa48:	92 83       	std	Z+2, r25	; 0x02
   1aa4a:	a3 83       	std	Z+3, r26	; 0x03
   1aa4c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

// Return file size
    return(bytes);
   1aa50:	b4 01       	movw	r22, r8
   1aa52:	c7 01       	movw	r24, r14
   1aa54:	04 c0       	rjmp	.+8      	; 0x1aa5e <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1aa56:	6f ef       	ldi	r22, 0xFF	; 255
   1aa58:	7f ef       	ldi	r23, 0xFF	; 255
   1aa5a:	8f ef       	ldi	r24, 0xFF	; 255
   1aa5c:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1aa5e:	eb 96       	adiw	r28, 0x3b	; 59
   1aa60:	e2 e1       	ldi	r30, 0x12	; 18
   1aa62:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001aa66 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1aa66:	a7 e3       	ldi	r26, 0x37	; 55
   1aa68:	b2 e0       	ldi	r27, 0x02	; 2
   1aa6a:	e9 e3       	ldi	r30, 0x39	; 57
   1aa6c:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa6e:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   1aa72:	7c 01       	movw	r14, r24
   1aa74:	8b 01       	movw	r16, r22
   1aa76:	ca 5d       	subi	r28, 0xDA	; 218
   1aa78:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa7a:	59 83       	std	Y+1, r21	; 0x01
   1aa7c:	48 83       	st	Y, r20
   1aa7e:	c6 52       	subi	r28, 0x26	; 38
   1aa80:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1aa82:	62 e4       	ldi	r22, 0x42	; 66
   1aa84:	73 e0       	ldi	r23, 0x03	; 3
   1aa86:	5d d9       	rcall	.-3398   	; 0x19d42 <lif_open_volume>
   1aa88:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1aa8a:	00 97       	sbiw	r24, 0x00	; 0
   1aa8c:	69 f4       	brne	.+26     	; 0x1aaa8 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aa8e:	ed b7       	in	r30, 0x3d	; 61
   1aa90:	fe b7       	in	r31, 0x3e	; 62
   1aa92:	f5 82       	std	Z+5, r15	; 0x05
   1aa94:	e4 82       	std	Z+4, r14	; 0x04
   1aa96:	87 eb       	ldi	r24, 0xB7	; 183
   1aa98:	93 e3       	ldi	r25, 0x33	; 51
   1aa9a:	a0 e0       	ldi	r26, 0x00	; 0
   1aa9c:	81 83       	std	Z+1, r24	; 0x01
   1aa9e:	92 83       	std	Z+2, r25	; 0x02
   1aaa0:	a3 83       	std	Z+3, r26	; 0x03
   1aaa2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1aaa6:	13 c0       	rjmp	.+38     	; 0x1aace <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aaa8:	b8 01       	movw	r22, r16
   1aaaa:	20 dc       	rcall	.-1984   	; 0x1a2ec <lif_find_file>
    if(index == -1)
   1aaac:	01 96       	adiw	r24, 0x01	; 1
   1aaae:	91 f4       	brne	.+36     	; 0x1aad4 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1aab0:	ed b7       	in	r30, 0x3d	; 61
   1aab2:	fe b7       	in	r31, 0x3e	; 62
   1aab4:	15 83       	std	Z+5, r17	; 0x05
   1aab6:	04 83       	std	Z+4, r16	; 0x04
   1aab8:	80 ea       	ldi	r24, 0xA0	; 160
   1aaba:	93 e3       	ldi	r25, 0x33	; 51
   1aabc:	a0 e0       	ldi	r26, 0x00	; 0
   1aabe:	81 83       	std	Z+1, r24	; 0x01
   1aac0:	92 83       	std	Z+2, r25	; 0x02
   1aac2:	a3 83       	std	Z+3, r26	; 0x03
   1aac4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aac8:	c6 01       	movw	r24, r12
   1aaca:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aace:	80 e0       	ldi	r24, 0x00	; 0
   1aad0:	90 e0       	ldi	r25, 0x00	; 0
   1aad2:	73 c2       	rjmp	.+1254   	; 0x1afba <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1aad4:	f6 01       	movw	r30, r12
   1aad6:	e6 5a       	subi	r30, 0xA6	; 166
   1aad8:	ff 4f       	sbci	r31, 0xFF	; 255
   1aada:	80 81       	ld	r24, Z
   1aadc:	91 81       	ldd	r25, Z+1	; 0x01
   1aade:	9c 01       	movw	r18, r24
   1aae0:	2c 7f       	andi	r18, 0xFC	; 252
   1aae2:	20 31       	cpi	r18, 0x10	; 16
   1aae4:	30 4e       	sbci	r19, 0xE0	; 224
   1aae6:	a9 f0       	breq	.+42     	; 0x1ab12 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1aae8:	ed b7       	in	r30, 0x3d	; 61
   1aaea:	fe b7       	in	r31, 0x3e	; 62
   1aaec:	97 83       	std	Z+7, r25	; 0x07
   1aaee:	86 83       	std	Z+6, r24	; 0x06
   1aaf0:	ca 5d       	subi	r28, 0xDA	; 218
   1aaf2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaf4:	28 81       	ld	r18, Y
   1aaf6:	39 81       	ldd	r19, Y+1	; 0x01
   1aaf8:	c6 52       	subi	r28, 0x26	; 38
   1aafa:	d2 40       	sbci	r29, 0x02	; 2
   1aafc:	35 83       	std	Z+5, r19	; 0x05
   1aafe:	24 83       	std	Z+4, r18	; 0x04
   1ab00:	88 e6       	ldi	r24, 0x68	; 104
   1ab02:	93 e3       	ldi	r25, 0x33	; 51
   1ab04:	a0 e0       	ldi	r26, 0x00	; 0
   1ab06:	81 83       	std	Z+1, r24	; 0x01
   1ab08:	92 83       	std	Z+2, r25	; 0x02
   1ab0a:	a3 83       	std	Z+3, r26	; 0x03
   1ab0c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1ab10:	db cf       	rjmp	.-74     	; 0x1aac8 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1ab12:	f6 01       	movw	r30, r12
   1ab14:	e4 5a       	subi	r30, 0xA4	; 164
   1ab16:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab18:	80 80       	ld	r8, Z
   1ab1a:	91 80       	ldd	r9, Z+1	; 0x01
   1ab1c:	a2 80       	ldd	r10, Z+2	; 0x02
   1ab1e:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1ab20:	34 96       	adiw	r30, 0x04	; 4
   1ab22:	80 81       	ld	r24, Z
   1ab24:	91 81       	ldd	r25, Z+1	; 0x01
   1ab26:	a2 81       	ldd	r26, Z+2	; 0x02
   1ab28:	b3 81       	ldd	r27, Z+3	; 0x03
   1ab2a:	a5 01       	movw	r20, r10
   1ab2c:	94 01       	movw	r18, r8
   1ab2e:	28 0f       	add	r18, r24
   1ab30:	39 1f       	adc	r19, r25
   1ab32:	4a 1f       	adc	r20, r26
   1ab34:	5b 1f       	adc	r21, r27
   1ab36:	c4 5d       	subi	r28, 0xD4	; 212
   1ab38:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab3a:	28 83       	st	Y, r18
   1ab3c:	39 83       	std	Y+1, r19	; 0x01
   1ab3e:	4a 83       	std	Y+2, r20	; 0x02
   1ab40:	5b 83       	std	Y+3, r21	; 0x03
   1ab42:	cc 52       	subi	r28, 0x2C	; 44
   1ab44:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1ab46:	c6 01       	movw	r24, r12
   1ab48:	8c 59       	subi	r24, 0x9C	; 156
   1ab4a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab4c:	0e 94 d4 c2 	call	0x185a8	; 0x185a8 <lif_lifbcd2time>
   1ab50:	c8 5d       	subi	r28, 0xD8	; 216
   1ab52:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab54:	68 83       	st	Y, r22
   1ab56:	79 83       	std	Y+1, r23	; 0x01
   1ab58:	8a 83       	std	Y+2, r24	; 0x02
   1ab5a:	9b 83       	std	Y+3, r25	; 0x03
   1ab5c:	c8 52       	subi	r28, 0x28	; 40
   1ab5e:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1ab60:	ba 2d       	mov	r27, r10
   1ab62:	a9 2d       	mov	r26, r9
   1ab64:	98 2d       	mov	r25, r8
   1ab66:	88 27       	eor	r24, r24
   1ab68:	c2 5e       	subi	r28, 0xE2	; 226
   1ab6a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab6c:	88 83       	st	Y, r24
   1ab6e:	99 83       	std	Y+1, r25	; 0x01
   1ab70:	aa 83       	std	Y+2, r26	; 0x02
   1ab72:	bb 83       	std	Y+3, r27	; 0x03
   1ab74:	ce 51       	subi	r28, 0x1E	; 30
   1ab76:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1ab78:	6c e0       	ldi	r22, 0x0C	; 12
   1ab7a:	79 e0       	ldi	r23, 0x09	; 9
   1ab7c:	ca 5d       	subi	r28, 0xDA	; 218
   1ab7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab80:	88 81       	ld	r24, Y
   1ab82:	99 81       	ldd	r25, Y+1	; 0x01
   1ab84:	c6 52       	subi	r28, 0x26	; 38
   1ab86:	d2 40       	sbci	r29, 0x02	; 2
   1ab88:	0e 94 94 be 	call	0x17d28	; 0x17d28 <lif_open>
   1ab8c:	cc 5d       	subi	r28, 0xDC	; 220
   1ab8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab90:	99 83       	std	Y+1, r25	; 0x01
   1ab92:	88 83       	st	Y, r24
   1ab94:	c4 52       	subi	r28, 0x24	; 36
   1ab96:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1ab98:	89 2b       	or	r24, r25
   1ab9a:	09 f4       	brne	.+2      	; 0x1ab9e <lif_extract_e010_as_ascii+0x138>
   1ab9c:	95 cf       	rjmp	.-214    	; 0x1aac8 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1ab9e:	ca 5d       	subi	r28, 0xDA	; 218
   1aba0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aba2:	28 81       	ld	r18, Y
   1aba4:	39 81       	ldd	r19, Y+1	; 0x01
   1aba6:	c6 52       	subi	r28, 0x26	; 38
   1aba8:	d2 40       	sbci	r29, 0x02	; 2
   1abaa:	ed b7       	in	r30, 0x3d	; 61
   1abac:	fe b7       	in	r31, 0x3e	; 62
   1abae:	35 83       	std	Z+5, r19	; 0x05
   1abb0:	24 83       	std	Z+4, r18	; 0x04
   1abb2:	88 e5       	ldi	r24, 0x58	; 88
   1abb4:	93 e3       	ldi	r25, 0x33	; 51
   1abb6:	a0 e0       	ldi	r26, 0x00	; 0
   1abb8:	81 83       	std	Z+1, r24	; 0x01
   1abba:	92 83       	std	Z+2, r25	; 0x02
   1abbc:	a3 83       	std	Z+3, r26	; 0x03
   1abbe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    bytes = 0;
    wind = 0;
   1abc2:	21 2c       	mov	r2, r1
   1abc4:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1abc6:	ce 5d       	subi	r28, 0xDE	; 222
   1abc8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abca:	19 82       	std	Y+1, r1	; 0x01
   1abcc:	18 82       	st	Y, r1
   1abce:	c2 52       	subi	r28, 0x22	; 34
   1abd0:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1abd2:	ee 24       	eor	r14, r14
   1abd4:	e3 94       	inc	r14
   1abd6:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1abd8:	41 2c       	mov	r4, r1
   1abda:	51 2c       	mov	r5, r1
   1abdc:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1abde:	87 e9       	ldi	r24, 0x97	; 151
   1abe0:	92 e3       	ldi	r25, 0x32	; 50
   1abe2:	9c 01       	movw	r18, r24
   1abe4:	40 e0       	ldi	r20, 0x00	; 0
   1abe6:	ce 5c       	subi	r28, 0xCE	; 206
   1abe8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abea:	28 83       	st	Y, r18
   1abec:	39 83       	std	Y+1, r19	; 0x01
   1abee:	4a 83       	std	Y+2, r20	; 0x02
   1abf0:	c2 53       	subi	r28, 0x32	; 50
   1abf2:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1abf4:	85 ea       	ldi	r24, 0xA5	; 165
   1abf6:	92 e3       	ldi	r25, 0x32	; 50
   1abf8:	9c 01       	movw	r18, r24
   1abfa:	40 e0       	ldi	r20, 0x00	; 0
   1abfc:	cb 5c       	subi	r28, 0xCB	; 203
   1abfe:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac00:	28 83       	st	Y, r18
   1ac02:	39 83       	std	Y+1, r19	; 0x01
   1ac04:	4a 83       	std	Y+2, r20	; 0x02
   1ac06:	c5 53       	subi	r28, 0x35	; 53
   1ac08:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1ac0a:	c2 5e       	subi	r28, 0xE2	; 226
   1ac0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac0e:	28 81       	ld	r18, Y
   1ac10:	39 81       	ldd	r19, Y+1	; 0x01
   1ac12:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac14:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac16:	ce 51       	subi	r28, 0x1E	; 30
   1ac18:	d2 40       	sbci	r29, 0x02	; 2
   1ac1a:	bb 27       	eor	r27, r27
   1ac1c:	a5 2f       	mov	r26, r21
   1ac1e:	94 2f       	mov	r25, r20
   1ac20:	83 2f       	mov	r24, r19
   1ac22:	c4 5d       	subi	r28, 0xD4	; 212
   1ac24:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac26:	28 81       	ld	r18, Y
   1ac28:	39 81       	ldd	r19, Y+1	; 0x01
   1ac2a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac2c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac2e:	cc 52       	subi	r28, 0x2C	; 44
   1ac30:	d2 40       	sbci	r29, 0x02	; 2
   1ac32:	28 17       	cp	r18, r24
   1ac34:	39 07       	cpc	r19, r25
   1ac36:	4a 07       	cpc	r20, r26
   1ac38:	5b 07       	cpc	r21, r27
   1ac3a:	08 f4       	brcc	.+2      	; 0x1ac3e <lif_extract_e010_as_ascii+0x1d8>
   1ac3c:	51 c1       	rjmp	.+674    	; 0x1aee0 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ac3e:	00 e0       	ldi	r16, 0x00	; 0
   1ac40:	11 e0       	ldi	r17, 0x01	; 1
   1ac42:	c2 5e       	subi	r28, 0xE2	; 226
   1ac44:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac46:	28 81       	ld	r18, Y
   1ac48:	39 81       	ldd	r19, Y+1	; 0x01
   1ac4a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac4c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac4e:	ce 51       	subi	r28, 0x1E	; 30
   1ac50:	d2 40       	sbci	r29, 0x02	; 2
   1ac52:	be 01       	movw	r22, r28
   1ac54:	60 5f       	subi	r22, 0xF0	; 240
   1ac56:	7e 4f       	sbci	r23, 0xFE	; 254
   1ac58:	c6 01       	movw	r24, r12
   1ac5a:	0e 94 18 bf 	call	0x17e30	; 0x17e30 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ac5e:	6f 3f       	cpi	r22, 0xFF	; 255
   1ac60:	71 05       	cpc	r23, r1
   1ac62:	09 f0       	breq	.+2      	; 0x1ac66 <lif_extract_e010_as_ascii+0x200>
   1ac64:	0c f4       	brge	.+2      	; 0x1ac68 <lif_extract_e010_as_ascii+0x202>
   1ac66:	3a c1       	rjmp	.+628    	; 0x1aedc <lif_extract_e010_as_ascii+0x476>
   1ac68:	00 e0       	ldi	r16, 0x00	; 0
   1ac6a:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ac6c:	ce 5d       	subi	r28, 0xDE	; 222
   1ac6e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac70:	88 81       	ld	r24, Y
   1ac72:	99 81       	ldd	r25, Y+1	; 0x01
   1ac74:	c2 52       	subi	r28, 0x22	; 34
   1ac76:	d2 40       	sbci	r29, 0x02	; 2
   1ac78:	89 2b       	or	r24, r25
   1ac7a:	09 f0       	breq	.+2      	; 0x1ac7e <lif_extract_e010_as_ascii+0x218>
   1ac7c:	1b c1       	rjmp	.+566    	; 0x1aeb4 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1ac7e:	e0 e1       	ldi	r30, 0x10	; 16
   1ac80:	f1 e0       	ldi	r31, 0x01	; 1
   1ac82:	ec 0f       	add	r30, r28
   1ac84:	fd 1f       	adc	r31, r29
   1ac86:	e0 0f       	add	r30, r16
   1ac88:	f1 1f       	adc	r31, r17
   1ac8a:	80 81       	ld	r24, Z
   1ac8c:	98 2f       	mov	r25, r24
   1ac8e:	9f 7e       	andi	r25, 0xEF	; 239
   1ac90:	9f 3c       	cpi	r25, 0xCF	; 207
   1ac92:	11 f0       	breq	.+4      	; 0x1ac98 <lif_extract_e010_as_ascii+0x232>
   1ac94:	8f 36       	cpi	r24, 0x6F	; 111
   1ac96:	c9 f5       	brne	.+114    	; 0x1ad0a <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1ac98:	e0 e1       	ldi	r30, 0x10	; 16
   1ac9a:	f1 e0       	ldi	r31, 0x01	; 1
   1ac9c:	ec 0f       	add	r30, r28
   1ac9e:	fd 1f       	adc	r31, r29
   1aca0:	e0 0f       	add	r30, r16
   1aca2:	f1 1f       	adc	r31, r17
   1aca4:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1aca6:	f8 01       	movw	r30, r16
   1aca8:	32 96       	adiw	r30, 0x02	; 2
   1acaa:	40 e1       	ldi	r20, 0x10	; 16
   1acac:	51 e0       	ldi	r21, 0x01	; 1
   1acae:	4c 0f       	add	r20, r28
   1acb0:	5d 1f       	adc	r21, r29
   1acb2:	e4 0f       	add	r30, r20
   1acb4:	f5 1f       	adc	r31, r21
   1acb6:	0d 5f       	subi	r16, 0xFD	; 253
   1acb8:	1f 4f       	sbci	r17, 0xFF	; 255
   1acba:	80 81       	ld	r24, Z
   1acbc:	b1 2c       	mov	r11, r1
   1acbe:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1acc0:	a1 14       	cp	r10, r1
   1acc2:	b1 04       	cpc	r11, r1
   1acc4:	09 f4       	brne	.+2      	; 0x1acc8 <lif_extract_e010_as_ascii+0x262>
   1acc6:	ee c0       	rjmp	.+476    	; 0x1aea4 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1acc8:	5f ef       	ldi	r21, 0xFF	; 255
   1acca:	a5 16       	cp	r10, r21
   1accc:	b1 04       	cpc	r11, r1
   1acce:	09 f0       	breq	.+2      	; 0x1acd2 <lif_extract_e010_as_ascii+0x26c>
   1acd0:	7c f4       	brge	.+30     	; 0x1acf0 <lif_extract_e010_as_ascii+0x28a>
   1acd2:	c4 5e       	subi	r28, 0xE4	; 228
   1acd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1acd6:	19 82       	std	Y+1, r1	; 0x01
   1acd8:	18 82       	st	Y, r1
   1acda:	cc 51       	subi	r28, 0x1C	; 28
   1acdc:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1acde:	c5 01       	movw	r24, r10
   1ace0:	01 97       	sbiw	r24, 0x01	; 1
   1ace2:	c0 5d       	subi	r28, 0xD0	; 208
   1ace4:	dd 4f       	sbci	r29, 0xFD	; 253
   1ace6:	99 83       	std	Y+1, r25	; 0x01
   1ace8:	88 83       	st	Y, r24
   1acea:	c0 53       	subi	r28, 0x30	; 48
   1acec:	d2 40       	sbci	r29, 0x02	; 2
   1acee:	68 c0       	rjmp	.+208    	; 0x1adc0 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1acf0:	ed b7       	in	r30, 0x3d	; 61
   1acf2:	fe b7       	in	r31, 0x3e	; 62
   1acf4:	b5 82       	std	Z+5, r11	; 0x05
   1acf6:	a4 82       	std	Z+4, r10	; 0x04
   1acf8:	83 e2       	ldi	r24, 0x23	; 35
   1acfa:	93 e3       	ldi	r25, 0x33	; 51
   1acfc:	a0 e0       	ldi	r26, 0x00	; 0
   1acfe:	81 83       	std	Z+1, r24	; 0x01
   1ad00:	92 83       	std	Z+2, r25	; 0x02
   1ad02:	a3 83       	std	Z+3, r26	; 0x03
   1ad04:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1ad08:	1e c0       	rjmp	.+60     	; 0x1ad46 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ad0a:	8f 3e       	cpi	r24, 0xEF	; 239
   1ad0c:	09 f4       	brne	.+2      	; 0x1ad10 <lif_extract_e010_as_ascii+0x2aa>
   1ad0e:	d2 c0       	rjmp	.+420    	; 0x1aeb4 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ad10:	ed b7       	in	r30, 0x3d	; 61
   1ad12:	fe b7       	in	r31, 0x3e	; 62
   1ad14:	13 87       	std	Z+11, r17	; 0x0b
   1ad16:	02 87       	std	Z+10, r16	; 0x0a
   1ad18:	c2 5e       	subi	r28, 0xE2	; 226
   1ad1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad1c:	28 81       	ld	r18, Y
   1ad1e:	39 81       	ldd	r19, Y+1	; 0x01
   1ad20:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad22:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad24:	ce 51       	subi	r28, 0x1E	; 30
   1ad26:	d2 40       	sbci	r29, 0x02	; 2
   1ad28:	26 83       	std	Z+6, r18	; 0x06
   1ad2a:	37 83       	std	Z+7, r19	; 0x07
   1ad2c:	40 87       	std	Z+8, r20	; 0x08
   1ad2e:	51 87       	std	Z+9, r21	; 0x09
   1ad30:	90 e0       	ldi	r25, 0x00	; 0
   1ad32:	95 83       	std	Z+5, r25	; 0x05
   1ad34:	84 83       	std	Z+4, r24	; 0x04
   1ad36:	8d ec       	ldi	r24, 0xCD	; 205
   1ad38:	92 e3       	ldi	r25, 0x32	; 50
   1ad3a:	a0 e0       	ldi	r26, 0x00	; 0
   1ad3c:	81 83       	std	Z+1, r24	; 0x01
   1ad3e:	92 83       	std	Z+2, r25	; 0x02
   1ad40:	a3 83       	std	Z+3, r26	; 0x03
   1ad42:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                status = 0;
                done = 1;
   1ad46:	21 e0       	ldi	r18, 0x01	; 1
   1ad48:	30 e0       	ldi	r19, 0x00	; 0
   1ad4a:	ce 5d       	subi	r28, 0xDE	; 222
   1ad4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad4e:	39 83       	std	Y+1, r19	; 0x01
   1ad50:	28 83       	st	Y, r18
   1ad52:	c2 52       	subi	r28, 0x22	; 34
   1ad54:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ad56:	e1 2c       	mov	r14, r1
   1ad58:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ad5a:	ac c0       	rjmp	.+344    	; 0x1aeb4 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ad5c:	0f 3f       	cpi	r16, 0xFF	; 255
   1ad5e:	11 05       	cpc	r17, r1
   1ad60:	11 f0       	breq	.+4      	; 0x1ad66 <lif_extract_e010_as_ascii+0x300>
   1ad62:	0c f0       	brlt	.+2      	; 0x1ad66 <lif_extract_e010_as_ascii+0x300>
   1ad64:	a7 c0       	rjmp	.+334    	; 0x1aeb4 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ad66:	e0 e1       	ldi	r30, 0x10	; 16
   1ad68:	f1 e0       	ldi	r31, 0x01	; 1
   1ad6a:	ec 0f       	add	r30, r28
   1ad6c:	fd 1f       	adc	r31, r29
   1ad6e:	e0 0f       	add	r30, r16
   1ad70:	f1 1f       	adc	r31, r17
   1ad72:	20 81       	ld	r18, Z
   1ad74:	a1 01       	movw	r20, r2
   1ad76:	4f 5f       	subi	r20, 0xFF	; 255
   1ad78:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad7a:	4a 01       	movw	r8, r20
   1ad7c:	2d 30       	cpi	r18, 0x0D	; 13
   1ad7e:	51 f1       	breq	.+84     	; 0x1add4 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ad80:	98 2d       	mov	r25, r8
   1ad82:	89 2d       	mov	r24, r9
   1ad84:	0f 5f       	subi	r16, 0xFF	; 255
   1ad86:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad88:	ec e0       	ldi	r30, 0x0C	; 12
   1ad8a:	f0 e0       	ldi	r31, 0x00	; 0
   1ad8c:	ec 0f       	add	r30, r28
   1ad8e:	fd 1f       	adc	r31, r29
   1ad90:	e2 0d       	add	r30, r2
   1ad92:	f3 1d       	adc	r31, r3
   1ad94:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ad96:	ef ef       	ldi	r30, 0xFF	; 255
   1ad98:	8e 16       	cp	r8, r30
   1ad9a:	91 04       	cpc	r9, r1
   1ad9c:	09 f0       	breq	.+2      	; 0x1ada0 <lif_extract_e010_as_ascii+0x33a>
   1ad9e:	ac f5       	brge	.+106    	; 0x1ae0a <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ada0:	c4 5e       	subi	r28, 0xE4	; 228
   1ada2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ada4:	28 81       	ld	r18, Y
   1ada6:	39 81       	ldd	r19, Y+1	; 0x01
   1ada8:	cc 51       	subi	r28, 0x1C	; 28
   1adaa:	d2 40       	sbci	r29, 0x02	; 2
   1adac:	2f 5f       	subi	r18, 0xFF	; 255
   1adae:	3f 4f       	sbci	r19, 0xFF	; 255
   1adb0:	c4 5e       	subi	r28, 0xE4	; 228
   1adb2:	dd 4f       	sbci	r29, 0xFD	; 253
   1adb4:	39 83       	std	Y+1, r19	; 0x01
   1adb6:	28 83       	st	Y, r18
   1adb8:	cc 51       	subi	r28, 0x1C	; 28
   1adba:	d2 40       	sbci	r29, 0x02	; 2
   1adbc:	29 2e       	mov	r2, r25
   1adbe:	38 2e       	mov	r3, r24
   1adc0:	c4 5e       	subi	r28, 0xE4	; 228
   1adc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1adc4:	48 81       	ld	r20, Y
   1adc6:	59 81       	ldd	r21, Y+1	; 0x01
   1adc8:	cc 51       	subi	r28, 0x1C	; 28
   1adca:	d2 40       	sbci	r29, 0x02	; 2
   1adcc:	4a 15       	cp	r20, r10
   1adce:	5b 05       	cpc	r21, r11
   1add0:	2c f2       	brlt	.-118    	; 0x1ad5c <lif_extract_e010_as_ascii+0x2f6>
   1add2:	62 c0       	rjmp	.+196    	; 0x1ae98 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1add4:	c4 5e       	subi	r28, 0xE4	; 228
   1add6:	dd 4f       	sbci	r29, 0xFD	; 253
   1add8:	88 81       	ld	r24, Y
   1adda:	99 81       	ldd	r25, Y+1	; 0x01
   1addc:	cc 51       	subi	r28, 0x1C	; 28
   1adde:	d2 40       	sbci	r29, 0x02	; 2
   1ade0:	c0 5d       	subi	r28, 0xD0	; 208
   1ade2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ade4:	a8 81       	ld	r26, Y
   1ade6:	b9 81       	ldd	r27, Y+1	; 0x01
   1ade8:	c0 53       	subi	r28, 0x30	; 48
   1adea:	d2 40       	sbci	r29, 0x02	; 2
   1adec:	8a 17       	cp	r24, r26
   1adee:	9b 07       	cpc	r25, r27
   1adf0:	39 f6       	brne	.-114    	; 0x1ad80 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1adf2:	ec e0       	ldi	r30, 0x0C	; 12
   1adf4:	f0 e0       	ldi	r31, 0x00	; 0
   1adf6:	ec 0f       	add	r30, r28
   1adf8:	fd 1f       	adc	r31, r29
   1adfa:	e2 0d       	add	r30, r2
   1adfc:	f3 1d       	adc	r31, r3
   1adfe:	ba e0       	ldi	r27, 0x0A	; 10
   1ae00:	b0 83       	st	Z, r27
                    ++ind;
   1ae02:	0f 5f       	subi	r16, 0xFF	; 255
   1ae04:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ae06:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ae08:	47 c0       	rjmp	.+142    	; 0x1ae98 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ae0a:	cc 5d       	subi	r28, 0xDC	; 220
   1ae0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae0e:	28 81       	ld	r18, Y
   1ae10:	39 81       	ldd	r19, Y+1	; 0x01
   1ae12:	c4 52       	subi	r28, 0x24	; 36
   1ae14:	d2 40       	sbci	r29, 0x02	; 2
   1ae16:	a4 01       	movw	r20, r8
   1ae18:	61 e0       	ldi	r22, 0x01	; 1
   1ae1a:	70 e0       	ldi	r23, 0x00	; 0
   1ae1c:	ce 01       	movw	r24, r28
   1ae1e:	0c 96       	adiw	r24, 0x0c	; 12
   1ae20:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <fwrite>
                    if(size < wind)
   1ae24:	88 15       	cp	r24, r8
   1ae26:	99 05       	cpc	r25, r9
   1ae28:	d4 f4       	brge	.+52     	; 0x1ae5e <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ae2a:	cb 5c       	subi	r28, 0xCB	; 203
   1ae2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae2e:	28 81       	ld	r18, Y
   1ae30:	39 81       	ldd	r19, Y+1	; 0x01
   1ae32:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae34:	c5 53       	subi	r28, 0x35	; 53
   1ae36:	d2 40       	sbci	r29, 0x02	; 2
   1ae38:	ed b7       	in	r30, 0x3d	; 61
   1ae3a:	fe b7       	in	r31, 0x3e	; 62
   1ae3c:	21 83       	std	Z+1, r18	; 0x01
   1ae3e:	32 83       	std	Z+2, r19	; 0x02
   1ae40:	43 83       	std	Z+3, r20	; 0x03
   1ae42:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ae46:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ae48:	21 e0       	ldi	r18, 0x01	; 1
   1ae4a:	30 e0       	ldi	r19, 0x00	; 0
   1ae4c:	ce 5d       	subi	r28, 0xDE	; 222
   1ae4e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae50:	39 83       	std	Y+1, r19	; 0x01
   1ae52:	28 83       	st	Y, r18
   1ae54:	c2 52       	subi	r28, 0x22	; 34
   1ae56:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ae58:	e1 2c       	mov	r14, r1
   1ae5a:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ae5c:	1d c0       	rjmp	.+58     	; 0x1ae98 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ae5e:	09 2e       	mov	r0, r25
   1ae60:	00 0c       	add	r0, r0
   1ae62:	aa 0b       	sbc	r26, r26
   1ae64:	bb 0b       	sbc	r27, r27
   1ae66:	48 0e       	add	r4, r24
   1ae68:	59 1e       	adc	r5, r25
   1ae6a:	6a 1e       	adc	r6, r26
   1ae6c:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ae6e:	ed b7       	in	r30, 0x3d	; 61
   1ae70:	fe b7       	in	r31, 0x3e	; 62
   1ae72:	44 82       	std	Z+4, r4	; 0x04
   1ae74:	55 82       	std	Z+5, r5	; 0x05
   1ae76:	66 82       	std	Z+6, r6	; 0x06
   1ae78:	77 82       	std	Z+7, r7	; 0x07
   1ae7a:	ce 5c       	subi	r28, 0xCE	; 206
   1ae7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae7e:	28 81       	ld	r18, Y
   1ae80:	39 81       	ldd	r19, Y+1	; 0x01
   1ae82:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae84:	c2 53       	subi	r28, 0x32	; 50
   1ae86:	d2 40       	sbci	r29, 0x02	; 2
   1ae88:	21 83       	std	Z+1, r18	; 0x01
   1ae8a:	32 83       	std	Z+2, r19	; 0x02
   1ae8c:	43 83       	std	Z+3, r20	; 0x03
   1ae8e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
                    wind = 0;
   1ae92:	90 e0       	ldi	r25, 0x00	; 0
   1ae94:	80 e0       	ldi	r24, 0x00	; 0
   1ae96:	84 cf       	rjmp	.-248    	; 0x1ada0 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ae98:	0f 3f       	cpi	r16, 0xFF	; 255
   1ae9a:	11 05       	cpc	r17, r1
   1ae9c:	09 f0       	breq	.+2      	; 0x1aea0 <lif_extract_e010_as_ascii+0x43a>
   1ae9e:	0c f4       	brge	.+2      	; 0x1aea2 <lif_extract_e010_as_ascii+0x43c>
   1aea0:	e5 ce       	rjmp	.-566    	; 0x1ac6c <lif_extract_e010_as_ascii+0x206>
   1aea2:	08 c0       	rjmp	.+16     	; 0x1aeb4 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1aea4:	a1 e0       	ldi	r26, 0x01	; 1
   1aea6:	b0 e0       	ldi	r27, 0x00	; 0
   1aea8:	ce 5d       	subi	r28, 0xDE	; 222
   1aeaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1aeac:	b9 83       	std	Y+1, r27	; 0x01
   1aeae:	a8 83       	st	Y, r26
   1aeb0:	c2 52       	subi	r28, 0x22	; 34
   1aeb2:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1aeb4:	c2 5e       	subi	r28, 0xE2	; 226
   1aeb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aeb8:	28 81       	ld	r18, Y
   1aeba:	39 81       	ldd	r19, Y+1	; 0x01
   1aebc:	4a 81       	ldd	r20, Y+2	; 0x02
   1aebe:	5b 81       	ldd	r21, Y+3	; 0x03
   1aec0:	ce 51       	subi	r28, 0x1E	; 30
   1aec2:	d2 40       	sbci	r29, 0x02	; 2
   1aec4:	3f 5f       	subi	r19, 0xFF	; 255
   1aec6:	4f 4f       	sbci	r20, 0xFF	; 255
   1aec8:	5f 4f       	sbci	r21, 0xFF	; 255
   1aeca:	c2 5e       	subi	r28, 0xE2	; 226
   1aecc:	dd 4f       	sbci	r29, 0xFD	; 253
   1aece:	28 83       	st	Y, r18
   1aed0:	39 83       	std	Y+1, r19	; 0x01
   1aed2:	4a 83       	std	Y+2, r20	; 0x02
   1aed4:	5b 83       	std	Y+3, r21	; 0x03
   1aed6:	ce 51       	subi	r28, 0x1E	; 30
   1aed8:	d2 40       	sbci	r29, 0x02	; 2
   1aeda:	97 ce       	rjmp	.-722    	; 0x1ac0a <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1aedc:	e1 2c       	mov	r14, r1
   1aede:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aee0:	c6 01       	movw	r24, r12
   1aee2:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1aee6:	21 14       	cp	r2, r1
   1aee8:	31 04       	cpc	r3, r1
   1aeea:	31 f1       	breq	.+76     	; 0x1af38 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1aeec:	cc 5d       	subi	r28, 0xDC	; 220
   1aeee:	dd 4f       	sbci	r29, 0xFD	; 253
   1aef0:	28 81       	ld	r18, Y
   1aef2:	39 81       	ldd	r19, Y+1	; 0x01
   1aef4:	c4 52       	subi	r28, 0x24	; 36
   1aef6:	d2 40       	sbci	r29, 0x02	; 2
   1aef8:	a1 01       	movw	r20, r2
   1aefa:	61 e0       	ldi	r22, 0x01	; 1
   1aefc:	70 e0       	ldi	r23, 0x00	; 0
   1aefe:	ce 01       	movw	r24, r28
   1af00:	0c 96       	adiw	r24, 0x0c	; 12
   1af02:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <fwrite>
   1af06:	8c 01       	movw	r16, r24
        if(size < wind)
   1af08:	82 15       	cp	r24, r2
   1af0a:	93 05       	cpc	r25, r3
   1af0c:	64 f4       	brge	.+24     	; 0x1af26 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1af0e:	8f e6       	ldi	r24, 0x6F	; 111
   1af10:	92 e3       	ldi	r25, 0x32	; 50
   1af12:	a0 e0       	ldi	r26, 0x00	; 0
   1af14:	ed b7       	in	r30, 0x3d	; 61
   1af16:	fe b7       	in	r31, 0x3e	; 62
   1af18:	81 83       	std	Z+1, r24	; 0x01
   1af1a:	92 83       	std	Z+2, r25	; 0x02
   1af1c:	a3 83       	std	Z+3, r26	; 0x03
   1af1e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            status = 0;
   1af22:	e1 2c       	mov	r14, r1
   1af24:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1af26:	c8 01       	movw	r24, r16
   1af28:	01 2e       	mov	r0, r17
   1af2a:	00 0c       	add	r0, r0
   1af2c:	aa 0b       	sbc	r26, r26
   1af2e:	bb 0b       	sbc	r27, r27
   1af30:	48 0e       	add	r4, r24
   1af32:	59 1e       	adc	r5, r25
   1af34:	6a 1e       	adc	r6, r26
   1af36:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1af38:	cc 5d       	subi	r28, 0xDC	; 220
   1af3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af3c:	88 81       	ld	r24, Y
   1af3e:	99 81       	ldd	r25, Y+1	; 0x01
   1af40:	c4 52       	subi	r28, 0x24	; 36
   1af42:	d2 40       	sbci	r29, 0x02	; 2
   1af44:	0e 94 fa 7b 	call	0xf7f4	; 0xf7f4 <fclose>
    if(t)
   1af48:	c8 5d       	subi	r28, 0xD8	; 216
   1af4a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af4c:	28 81       	ld	r18, Y
   1af4e:	39 81       	ldd	r19, Y+1	; 0x01
   1af50:	4a 81       	ldd	r20, Y+2	; 0x02
   1af52:	5b 81       	ldd	r21, Y+3	; 0x03
   1af54:	c8 52       	subi	r28, 0x28	; 40
   1af56:	d2 40       	sbci	r29, 0x02	; 2
   1af58:	21 15       	cp	r18, r1
   1af5a:	31 05       	cpc	r19, r1
   1af5c:	41 05       	cpc	r20, r1
   1af5e:	51 05       	cpc	r21, r1
   1af60:	d9 f0       	breq	.+54     	; 0x1af98 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1af62:	c8 5e       	subi	r28, 0xE8	; 232
   1af64:	dd 4f       	sbci	r29, 0xFD	; 253
   1af66:	28 83       	st	Y, r18
   1af68:	39 83       	std	Y+1, r19	; 0x01
   1af6a:	4a 83       	std	Y+2, r20	; 0x02
   1af6c:	5b 83       	std	Y+3, r21	; 0x03
   1af6e:	c8 51       	subi	r28, 0x18	; 24
   1af70:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1af72:	cc 5e       	subi	r28, 0xEC	; 236
   1af74:	dd 4f       	sbci	r29, 0xFD	; 253
   1af76:	28 83       	st	Y, r18
   1af78:	39 83       	std	Y+1, r19	; 0x01
   1af7a:	4a 83       	std	Y+2, r20	; 0x02
   1af7c:	5b 83       	std	Y+3, r21	; 0x03
   1af7e:	c4 51       	subi	r28, 0x14	; 20
   1af80:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1af82:	be 01       	movw	r22, r28
   1af84:	6c 5e       	subi	r22, 0xEC	; 236
   1af86:	7d 4f       	sbci	r23, 0xFD	; 253
   1af88:	ca 5d       	subi	r28, 0xDA	; 218
   1af8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af8c:	88 81       	ld	r24, Y
   1af8e:	99 81       	ldd	r25, Y+1	; 0x01
   1af90:	c6 52       	subi	r28, 0x26	; 38
   1af92:	d2 40       	sbci	r29, 0x02	; 2
   1af94:	0e 94 37 79 	call	0xf26e	; 0xf26e <utime>
    }
    sync();
   1af98:	0e 94 f5 7a 	call	0xf5ea	; 0xf5ea <sync>
    printf("\tWrote: %8ld\n", bytes);
   1af9c:	ed b7       	in	r30, 0x3d	; 61
   1af9e:	fe b7       	in	r31, 0x3e	; 62
   1afa0:	44 82       	std	Z+4, r4	; 0x04
   1afa2:	55 82       	std	Z+5, r5	; 0x05
   1afa4:	66 82       	std	Z+6, r6	; 0x06
   1afa6:	77 82       	std	Z+7, r7	; 0x07
   1afa8:	81 e6       	ldi	r24, 0x61	; 97
   1afaa:	92 e3       	ldi	r25, 0x32	; 50
   1afac:	a0 e0       	ldi	r26, 0x00	; 0
   1afae:	81 83       	std	Z+1, r24	; 0x01
   1afb0:	92 83       	std	Z+2, r25	; 0x02
   1afb2:	a3 83       	std	Z+3, r26	; 0x03
   1afb4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(status);
   1afb8:	c7 01       	movw	r24, r14
}
   1afba:	c9 5c       	subi	r28, 0xC9	; 201
   1afbc:	dd 4f       	sbci	r29, 0xFD	; 253
   1afbe:	e2 e1       	ldi	r30, 0x12	; 18
   1afc0:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001afc4 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1afc4:	a4 e1       	ldi	r26, 0x14	; 20
   1afc6:	b1 e0       	ldi	r27, 0x01	; 1
   1afc8:	e8 ee       	ldi	r30, 0xE8	; 232
   1afca:	f7 ed       	ldi	r31, 0xD7	; 215
   1afcc:	0c 94 9b e3 	jmp	0x1c736	; 0x1c736 <__prologue_saves__>
   1afd0:	7c 01       	movw	r14, r24
   1afd2:	8b 01       	movw	r16, r22
   1afd4:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1afd6:	62 e4       	ldi	r22, 0x42	; 66
   1afd8:	73 e0       	ldi	r23, 0x03	; 3
   1afda:	0e 94 a1 ce 	call	0x19d42	; 0x19d42 <lif_open_volume>
   1afde:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1afe0:	00 97       	sbiw	r24, 0x00	; 0
   1afe2:	69 f4       	brne	.+26     	; 0x1affe <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1afe4:	ed b7       	in	r30, 0x3d	; 61
   1afe6:	fe b7       	in	r31, 0x3e	; 62
   1afe8:	f5 82       	std	Z+5, r15	; 0x05
   1afea:	e4 82       	std	Z+4, r14	; 0x04
   1afec:	89 e4       	ldi	r24, 0x49	; 73
   1afee:	92 e3       	ldi	r25, 0x32	; 50
   1aff0:	a0 e0       	ldi	r26, 0x00	; 0
   1aff2:	81 83       	std	Z+1, r24	; 0x01
   1aff4:	92 83       	std	Z+2, r25	; 0x02
   1aff6:	a3 83       	std	Z+3, r26	; 0x03
   1aff8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1affc:	13 c0       	rjmp	.+38     	; 0x1b024 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1affe:	b8 01       	movw	r22, r16
   1b000:	75 d9       	rcall	.-3350   	; 0x1a2ec <lif_find_file>
    if(index == -1)
   1b002:	01 96       	adiw	r24, 0x01	; 1
   1b004:	91 f4       	brne	.+36     	; 0x1b02a <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b006:	ed b7       	in	r30, 0x3d	; 61
   1b008:	fe b7       	in	r31, 0x3e	; 62
   1b00a:	15 83       	std	Z+5, r17	; 0x05
   1b00c:	04 83       	std	Z+4, r16	; 0x04
   1b00e:	86 e3       	ldi	r24, 0x36	; 54
   1b010:	92 e3       	ldi	r25, 0x32	; 50
   1b012:	a0 e0       	ldi	r26, 0x00	; 0
   1b014:	81 83       	std	Z+1, r24	; 0x01
   1b016:	92 83       	std	Z+2, r25	; 0x02
   1b018:	a3 83       	std	Z+3, r26	; 0x03
   1b01a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b01e:	c4 01       	movw	r24, r8
   1b020:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b024:	00 e0       	ldi	r16, 0x00	; 0
   1b026:	10 e0       	ldi	r17, 0x00	; 0
   1b028:	ff c0       	rjmp	.+510    	; 0x1b228 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b02a:	94 01       	movw	r18, r8
   1b02c:	20 5a       	subi	r18, 0xA0	; 160
   1b02e:	3f 4f       	sbci	r19, 0xFF	; 255
   1b030:	c0 5f       	subi	r28, 0xF0	; 240
   1b032:	de 4f       	sbci	r29, 0xFE	; 254
   1b034:	39 83       	std	Y+1, r19	; 0x01
   1b036:	28 83       	st	Y, r18
   1b038:	c0 51       	subi	r28, 0x10	; 16
   1b03a:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b03c:	f9 01       	movw	r30, r18
   1b03e:	a0 80       	ld	r10, Z
   1b040:	b1 80       	ldd	r11, Z+1	; 0x01
   1b042:	0b 2c       	mov	r0, r11
   1b044:	00 0c       	add	r0, r0
   1b046:	cc 08       	sbc	r12, r12
   1b048:	dd 08       	sbc	r13, r13
   1b04a:	e1 2c       	mov	r14, r1
   1b04c:	f1 2c       	mov	r15, r1
   1b04e:	87 01       	movw	r16, r14
   1b050:	e3 94       	inc	r14
   1b052:	21 e0       	ldi	r18, 0x01	; 1
   1b054:	30 e0       	ldi	r19, 0x00	; 0
   1b056:	40 e0       	ldi	r20, 0x00	; 0
   1b058:	50 e0       	ldi	r21, 0x00	; 0
   1b05a:	61 e7       	ldi	r22, 0x71	; 113
   1b05c:	76 e1       	ldi	r23, 0x16	; 22
   1b05e:	c3 01       	movw	r24, r6
   1b060:	0e 94 57 ca 	call	0x194ae	; 0x194ae <lif_create_volume>
   1b064:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b066:	89 2b       	or	r24, r25
   1b068:	d1 f2       	breq	.-76     	; 0x1b01e <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b06a:	81 e2       	ldi	r24, 0x21	; 33
   1b06c:	f4 01       	movw	r30, r8
   1b06e:	e1 5b       	subi	r30, 0xB1	; 177
   1b070:	ff 4f       	sbci	r31, 0xFF	; 255
   1b072:	d7 01       	movw	r26, r14
   1b074:	a1 5b       	subi	r26, 0xB1	; 177
   1b076:	bf 4f       	sbci	r27, 0xFF	; 255
   1b078:	01 90       	ld	r0, Z+
   1b07a:	0d 92       	st	X+, r0
   1b07c:	8a 95       	dec	r24
   1b07e:	e1 f7       	brne	.-8      	; 0x1b078 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b080:	82 e0       	ldi	r24, 0x02	; 2
   1b082:	90 e0       	ldi	r25, 0x00	; 0
   1b084:	a0 e0       	ldi	r26, 0x00	; 0
   1b086:	b0 e0       	ldi	r27, 0x00	; 0
   1b088:	f7 01       	movw	r30, r14
   1b08a:	e4 5a       	subi	r30, 0xA4	; 164
   1b08c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b08e:	80 83       	st	Z, r24
   1b090:	91 83       	std	Z+1, r25	; 0x01
   1b092:	a2 83       	std	Z+2, r26	; 0x02
   1b094:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b096:	c0 5f       	subi	r28, 0xF0	; 240
   1b098:	de 4f       	sbci	r29, 0xFE	; 254
   1b09a:	e8 81       	ld	r30, Y
   1b09c:	f9 81       	ldd	r31, Y+1	; 0x01
   1b09e:	c0 51       	subi	r28, 0x10	; 16
   1b0a0:	d1 40       	sbci	r29, 0x01	; 1
   1b0a2:	80 81       	ld	r24, Z
   1b0a4:	91 81       	ldd	r25, Z+1	; 0x01
   1b0a6:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0a8:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0aa:	f7 01       	movw	r30, r14
   1b0ac:	80 8b       	std	Z+16, r24	; 0x10
   1b0ae:	91 8b       	std	Z+17, r25	; 0x11
   1b0b0:	a2 8b       	std	Z+18, r26	; 0x12
   1b0b2:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b0b4:	60 e0       	ldi	r22, 0x00	; 0
   1b0b6:	70 e0       	ldi	r23, 0x00	; 0
   1b0b8:	c7 01       	movw	r24, r14
   1b0ba:	0e 94 d9 c8 	call	0x191b2	; 0x191b2 <lif_writedirindex>
   1b0be:	8c 01       	movw	r16, r24
   1b0c0:	89 2b       	or	r24, r25
   1b0c2:	41 f0       	breq	.+16     	; 0x1b0d4 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b0c4:	61 e0       	ldi	r22, 0x01	; 1
   1b0c6:	70 e0       	ldi	r23, 0x00	; 0
   1b0c8:	c7 01       	movw	r24, r14
   1b0ca:	0e 94 35 c9 	call	0x1926a	; 0x1926a <lif_writedirEOF>
   1b0ce:	8c 01       	movw	r16, r24
   1b0d0:	89 2b       	or	r24, r25
   1b0d2:	39 f4       	brne	.+14     	; 0x1b0e2 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0d4:	c4 01       	movw	r24, r8
   1b0d6:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b0da:	c7 01       	movw	r24, r14
   1b0dc:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b0e0:	a3 c0       	rjmp	.+326    	; 0x1b228 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b0e2:	f7 01       	movw	r30, r14
   1b0e4:	44 84       	ldd	r4, Z+12	; 0x0c
   1b0e6:	55 84       	ldd	r5, Z+13	; 0x0d
   1b0e8:	66 84       	ldd	r6, Z+14	; 0x0e
   1b0ea:	77 84       	ldd	r7, Z+15	; 0x0f
   1b0ec:	76 2c       	mov	r7, r6
   1b0ee:	65 2c       	mov	r6, r5
   1b0f0:	54 2c       	mov	r5, r4
   1b0f2:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0f4:	f4 01       	movw	r30, r8
   1b0f6:	e4 5a       	subi	r30, 0xA4	; 164
   1b0f8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0fa:	80 81       	ld	r24, Z
   1b0fc:	91 81       	ldd	r25, Z+1	; 0x01
   1b0fe:	a2 81       	ldd	r26, Z+2	; 0x02
   1b100:	b3 81       	ldd	r27, Z+3	; 0x03
   1b102:	22 27       	eor	r18, r18
   1b104:	38 2f       	mov	r19, r24
   1b106:	49 2f       	mov	r20, r25
   1b108:	5a 2f       	mov	r21, r26
   1b10a:	c4 5f       	subi	r28, 0xF4	; 244
   1b10c:	de 4f       	sbci	r29, 0xFE	; 254
   1b10e:	28 83       	st	Y, r18
   1b110:	39 83       	std	Y+1, r19	; 0x01
   1b112:	4a 83       	std	Y+2, r20	; 0x02
   1b114:	5b 83       	std	Y+3, r21	; 0x03
   1b116:	cc 50       	subi	r28, 0x0C	; 12
   1b118:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b11a:	21 2c       	mov	r2, r1
   1b11c:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b11e:	88 e2       	ldi	r24, 0x28	; 40
   1b120:	92 e3       	ldi	r25, 0x32	; 50
   1b122:	9c 01       	movw	r18, r24
   1b124:	40 e0       	ldi	r20, 0x00	; 0
   1b126:	ce 5e       	subi	r28, 0xEE	; 238
   1b128:	de 4f       	sbci	r29, 0xFE	; 254
   1b12a:	28 83       	st	Y, r18
   1b12c:	39 83       	std	Y+1, r19	; 0x01
   1b12e:	4a 83       	std	Y+2, r20	; 0x02
   1b130:	c2 51       	subi	r28, 0x12	; 18
   1b132:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b134:	c0 5f       	subi	r28, 0xF0	; 240
   1b136:	de 4f       	sbci	r29, 0xFE	; 254
   1b138:	e8 81       	ld	r30, Y
   1b13a:	f9 81       	ldd	r31, Y+1	; 0x01
   1b13c:	c0 51       	subi	r28, 0x10	; 16
   1b13e:	d1 40       	sbci	r29, 0x01	; 1
   1b140:	80 81       	ld	r24, Z
   1b142:	91 81       	ldd	r25, Z+1	; 0x01
   1b144:	28 16       	cp	r2, r24
   1b146:	39 06       	cpc	r3, r25
   1b148:	0c f0       	brlt	.+2      	; 0x1b14c <lif_extract_lif_as_lif+0x188>
   1b14a:	58 c0       	rjmp	.+176    	; 0x1b1fc <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b14c:	00 e0       	ldi	r16, 0x00	; 0
   1b14e:	11 e0       	ldi	r17, 0x01	; 1
   1b150:	c4 5f       	subi	r28, 0xF4	; 244
   1b152:	de 4f       	sbci	r29, 0xFE	; 254
   1b154:	28 81       	ld	r18, Y
   1b156:	39 81       	ldd	r19, Y+1	; 0x01
   1b158:	4a 81       	ldd	r20, Y+2	; 0x02
   1b15a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b15c:	cc 50       	subi	r28, 0x0C	; 12
   1b15e:	d1 40       	sbci	r29, 0x01	; 1
   1b160:	be 01       	movw	r22, r28
   1b162:	68 5f       	subi	r22, 0xF8	; 248
   1b164:	7f 4f       	sbci	r23, 0xFF	; 255
   1b166:	c4 01       	movw	r24, r8
   1b168:	0e 94 18 bf 	call	0x17e30	; 0x17e30 <lif_read>
   1b16c:	5b 01       	movw	r10, r22
   1b16e:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b170:	6f 3f       	cpi	r22, 0xFF	; 255
   1b172:	71 05       	cpc	r23, r1
   1b174:	09 f0       	breq	.+2      	; 0x1b178 <lif_extract_lif_as_lif+0x1b4>
   1b176:	2c f4       	brge	.+10     	; 0x1b182 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b178:	c4 01       	movw	r24, r8
   1b17a:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b17e:	c7 01       	movw	r24, r14
   1b180:	4f cf       	rjmp	.-354    	; 0x1b020 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b182:	00 e0       	ldi	r16, 0x00	; 0
   1b184:	11 e0       	ldi	r17, 0x01	; 1
   1b186:	a3 01       	movw	r20, r6
   1b188:	92 01       	movw	r18, r4
   1b18a:	be 01       	movw	r22, r28
   1b18c:	68 5f       	subi	r22, 0xF8	; 248
   1b18e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b190:	c7 01       	movw	r24, r14
   1b192:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b196:	c5 01       	movw	r24, r10
   1b198:	0b 2c       	mov	r0, r11
   1b19a:	00 0c       	add	r0, r0
   1b19c:	aa 0b       	sbc	r26, r26
   1b19e:	bb 0b       	sbc	r27, r27
   1b1a0:	48 0e       	add	r4, r24
   1b1a2:	59 1e       	adc	r5, r25
   1b1a4:	6a 1e       	adc	r6, r26
   1b1a6:	7b 1e       	adc	r7, r27
        offset += size;
   1b1a8:	c4 5f       	subi	r28, 0xF4	; 244
   1b1aa:	de 4f       	sbci	r29, 0xFE	; 254
   1b1ac:	28 81       	ld	r18, Y
   1b1ae:	39 81       	ldd	r19, Y+1	; 0x01
   1b1b0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1b2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1b4:	cc 50       	subi	r28, 0x0C	; 12
   1b1b6:	d1 40       	sbci	r29, 0x01	; 1
   1b1b8:	28 0f       	add	r18, r24
   1b1ba:	39 1f       	adc	r19, r25
   1b1bc:	4a 1f       	adc	r20, r26
   1b1be:	5b 1f       	adc	r21, r27
   1b1c0:	c4 5f       	subi	r28, 0xF4	; 244
   1b1c2:	de 4f       	sbci	r29, 0xFE	; 254
   1b1c4:	28 83       	st	Y, r18
   1b1c6:	39 83       	std	Y+1, r19	; 0x01
   1b1c8:	4a 83       	std	Y+2, r20	; 0x02
   1b1ca:	5b 83       	std	Y+3, r21	; 0x03
   1b1cc:	cc 50       	subi	r28, 0x0C	; 12
   1b1ce:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b1d0:	ed b7       	in	r30, 0x3d	; 61
   1b1d2:	fe b7       	in	r31, 0x3e	; 62
   1b1d4:	44 82       	std	Z+4, r4	; 0x04
   1b1d6:	55 82       	std	Z+5, r5	; 0x05
   1b1d8:	66 82       	std	Z+6, r6	; 0x06
   1b1da:	77 82       	std	Z+7, r7	; 0x07
   1b1dc:	ce 5e       	subi	r28, 0xEE	; 238
   1b1de:	de 4f       	sbci	r29, 0xFE	; 254
   1b1e0:	28 81       	ld	r18, Y
   1b1e2:	39 81       	ldd	r19, Y+1	; 0x01
   1b1e4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1e6:	c2 51       	subi	r28, 0x12	; 18
   1b1e8:	d1 40       	sbci	r29, 0x01	; 1
   1b1ea:	21 83       	std	Z+1, r18	; 0x01
   1b1ec:	32 83       	std	Z+2, r19	; 0x02
   1b1ee:	43 83       	std	Z+3, r20	; 0x03
   1b1f0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1f4:	ff ef       	ldi	r31, 0xFF	; 255
   1b1f6:	2f 1a       	sub	r2, r31
   1b1f8:	3f 0a       	sbc	r3, r31
   1b1fa:	9c cf       	rjmp	.-200    	; 0x1b134 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1fc:	c4 01       	movw	r24, r8
   1b1fe:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b202:	c7 01       	movw	r24, r14
   1b204:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b208:	ed b7       	in	r30, 0x3d	; 61
   1b20a:	fe b7       	in	r31, 0x3e	; 62
   1b20c:	44 82       	std	Z+4, r4	; 0x04
   1b20e:	55 82       	std	Z+5, r5	; 0x05
   1b210:	66 82       	std	Z+6, r6	; 0x06
   1b212:	77 82       	std	Z+7, r7	; 0x07
   1b214:	8a e1       	ldi	r24, 0x1A	; 26
   1b216:	92 e3       	ldi	r25, 0x32	; 50
   1b218:	a0 e0       	ldi	r26, 0x00	; 0
   1b21a:	81 83       	std	Z+1, r24	; 0x01
   1b21c:	92 83       	std	Z+2, r25	; 0x02
   1b21e:	a3 83       	std	Z+3, r26	; 0x03
   1b220:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(1);
   1b224:	01 e0       	ldi	r16, 0x01	; 1
   1b226:	10 e0       	ldi	r17, 0x00	; 0
}
   1b228:	c8 01       	movw	r24, r16
   1b22a:	cc 5e       	subi	r28, 0xEC	; 236
   1b22c:	de 4f       	sbci	r29, 0xFE	; 254
   1b22e:	e2 e1       	ldi	r30, 0x12	; 18
   1b230:	0c 94 b7 e3 	jmp	0x1c76e	; 0x1c76e <__epilogue_restores__>

0001b234 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b234:	2f 92       	push	r2
   1b236:	3f 92       	push	r3
   1b238:	4f 92       	push	r4
   1b23a:	5f 92       	push	r5
   1b23c:	6f 92       	push	r6
   1b23e:	8f 92       	push	r8
   1b240:	9f 92       	push	r9
   1b242:	af 92       	push	r10
   1b244:	bf 92       	push	r11
   1b246:	cf 92       	push	r12
   1b248:	df 92       	push	r13
   1b24a:	ef 92       	push	r14
   1b24c:	ff 92       	push	r15
   1b24e:	0f 93       	push	r16
   1b250:	1f 93       	push	r17
   1b252:	cf 93       	push	r28
   1b254:	df 93       	push	r29
   1b256:	cd b7       	in	r28, 0x3d	; 61
   1b258:	de b7       	in	r29, 0x3e	; 62
   1b25a:	cd 51       	subi	r28, 0x1D	; 29
   1b25c:	d1 40       	sbci	r29, 0x01	; 1
   1b25e:	0f b6       	in	r0, 0x3f	; 63
   1b260:	f8 94       	cli
   1b262:	de bf       	out	0x3e, r29	; 62
   1b264:	0f be       	out	0x3f, r0	; 63
   1b266:	cd bf       	out	0x3d, r28	; 61
   1b268:	5c 01       	movw	r10, r24
   1b26a:	7b 01       	movw	r14, r22
   1b26c:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b26e:	dc 01       	movw	r26, r24
   1b270:	8c 91       	ld	r24, X
   1b272:	81 11       	cpse	r24, r1
   1b274:	03 c0       	rjmp	.+6      	; 0x1b27c <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b276:	8a ef       	ldi	r24, 0xFA	; 250
   1b278:	91 e3       	ldi	r25, 0x31	; 49
   1b27a:	06 c0       	rjmp	.+12     	; 0x1b288 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b27c:	db 01       	movw	r26, r22
   1b27e:	8c 91       	ld	r24, X
   1b280:	81 11       	cpse	r24, r1
   1b282:	0b c0       	rjmp	.+22     	; 0x1b29a <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b284:	8f ed       	ldi	r24, 0xDF	; 223
   1b286:	91 e3       	ldi	r25, 0x31	; 49
   1b288:	a0 e0       	ldi	r26, 0x00	; 0
   1b28a:	ed b7       	in	r30, 0x3d	; 61
   1b28c:	fe b7       	in	r31, 0x3e	; 62
   1b28e:	81 83       	std	Z+1, r24	; 0x01
   1b290:	92 83       	std	Z+2, r25	; 0x02
   1b292:	a3 83       	std	Z+3, r26	; 0x03
   1b294:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1b298:	25 c1       	rjmp	.+586    	; 0x1b4e4 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b29a:	da 01       	movw	r26, r20
   1b29c:	8c 91       	ld	r24, X
   1b29e:	81 11       	cpse	r24, r1
   1b2a0:	03 c0       	rjmp	.+6      	; 0x1b2a8 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b2a2:	83 ec       	ldi	r24, 0xC3	; 195
   1b2a4:	91 e3       	ldi	r25, 0x31	; 49
   1b2a6:	f0 cf       	rjmp	.-32     	; 0x1b288 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b2a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b2ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b2b0:	92 ff       	sbrs	r25, 2
   1b2b2:	10 c0       	rjmp	.+32     	; 0x1b2d4 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b2b4:	ed b7       	in	r30, 0x3d	; 61
   1b2b6:	fe b7       	in	r31, 0x3e	; 62
   1b2b8:	51 87       	std	Z+9, r21	; 0x09
   1b2ba:	40 87       	std	Z+8, r20	; 0x08
   1b2bc:	77 83       	std	Z+7, r23	; 0x07
   1b2be:	66 83       	std	Z+6, r22	; 0x06
   1b2c0:	b5 82       	std	Z+5, r11	; 0x05
   1b2c2:	a4 82       	std	Z+4, r10	; 0x04
   1b2c4:	84 e9       	ldi	r24, 0x94	; 148
   1b2c6:	91 e3       	ldi	r25, 0x31	; 49
   1b2c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b2ca:	81 83       	std	Z+1, r24	; 0x01
   1b2cc:	92 83       	std	Z+2, r25	; 0x02
   1b2ce:	a3 83       	std	Z+3, r26	; 0x03
   1b2d0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b2d4:	68 e0       	ldi	r22, 0x08	; 8
   1b2d6:	79 e0       	ldi	r23, 0x09	; 9
   1b2d8:	c4 01       	movw	r24, r8
   1b2da:	0e 94 a1 ce 	call	0x19d42	; 0x19d42 <lif_open_volume>
   1b2de:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b2e0:	00 97       	sbiw	r24, 0x00	; 0
   1b2e2:	09 f4       	brne	.+2      	; 0x1b2e6 <lif_add_lif_file+0xb2>
   1b2e4:	ff c0       	rjmp	.+510    	; 0x1b4e4 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b2e6:	b7 01       	movw	r22, r14
   1b2e8:	01 d8       	rcall	.-4094   	; 0x1a2ec <lif_find_file>
    if(index == -1)
   1b2ea:	01 96       	adiw	r24, 0x01	; 1
   1b2ec:	a1 f4       	brne	.+40     	; 0x1b316 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b2ee:	ed b7       	in	r30, 0x3d	; 61
   1b2f0:	fe b7       	in	r31, 0x3e	; 62
   1b2f2:	f5 82       	std	Z+5, r15	; 0x05
   1b2f4:	e4 82       	std	Z+4, r14	; 0x04
   1b2f6:	81 e8       	ldi	r24, 0x81	; 129
   1b2f8:	91 e3       	ldi	r25, 0x31	; 49
   1b2fa:	a0 e0       	ldi	r26, 0x00	; 0
   1b2fc:	81 83       	std	Z+1, r24	; 0x01
   1b2fe:	92 83       	std	Z+2, r25	; 0x02
   1b300:	a3 83       	std	Z+3, r26	; 0x03
   1b302:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b306:	c6 01       	movw	r24, r12
   1b308:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b30c:	60 e0       	ldi	r22, 0x00	; 0
   1b30e:	70 e0       	ldi	r23, 0x00	; 0
   1b310:	80 e0       	ldi	r24, 0x00	; 0
   1b312:	90 e0       	ldi	r25, 0x00	; 0
   1b314:	ff c0       	rjmp	.+510    	; 0x1b514 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b316:	68 e0       	ldi	r22, 0x08	; 8
   1b318:	79 e0       	ldi	r23, 0x09	; 9
   1b31a:	c5 01       	movw	r24, r10
   1b31c:	0e 94 a1 ce 	call	0x19d42	; 0x19d42 <lif_open_volume>
   1b320:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b322:	00 97       	sbiw	r24, 0x00	; 0
   1b324:	09 f4       	brne	.+2      	; 0x1b328 <lif_add_lif_file+0xf4>
   1b326:	de c0       	rjmp	.+444    	; 0x1b4e4 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b328:	f6 01       	movw	r30, r12
   1b32a:	e0 5a       	subi	r30, 0xA0	; 160
   1b32c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b32e:	40 81       	ld	r20, Z
   1b330:	51 81       	ldd	r21, Z+1	; 0x01
   1b332:	62 81       	ldd	r22, Z+2	; 0x02
   1b334:	73 81       	ldd	r23, Z+3	; 0x03
   1b336:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <lif_newdir>
   1b33a:	ca 5e       	subi	r28, 0xEA	; 234
   1b33c:	de 4f       	sbci	r29, 0xFE	; 254
   1b33e:	99 83       	std	Y+1, r25	; 0x01
   1b340:	88 83       	st	Y, r24
   1b342:	c6 51       	subi	r28, 0x16	; 22
   1b344:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b346:	01 96       	adiw	r24, 0x01	; 1
   1b348:	79 f4       	brne	.+30     	; 0x1b368 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b34a:	ed b7       	in	r30, 0x3d	; 61
   1b34c:	fe b7       	in	r31, 0x3e	; 62
   1b34e:	97 82       	std	Z+7, r9	; 0x07
   1b350:	86 82       	std	Z+6, r8	; 0x06
   1b352:	b5 82       	std	Z+5, r11	; 0x05
   1b354:	a4 82       	std	Z+4, r10	; 0x04
   1b356:	81 e5       	ldi	r24, 0x51	; 81
   1b358:	91 e3       	ldi	r25, 0x31	; 49
   1b35a:	a0 e0       	ldi	r26, 0x00	; 0
   1b35c:	81 83       	std	Z+1, r24	; 0x01
   1b35e:	92 83       	std	Z+2, r25	; 0x02
   1b360:	a3 83       	std	Z+3, r26	; 0x03
   1b362:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1b366:	a8 c0       	rjmp	.+336    	; 0x1b4b8 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b368:	c7 01       	movw	r24, r14
   1b36a:	84 5a       	subi	r24, 0xA4	; 164
   1b36c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b36e:	dc 01       	movw	r26, r24
   1b370:	4d 91       	ld	r20, X+
   1b372:	5d 91       	ld	r21, X+
   1b374:	6d 91       	ld	r22, X+
   1b376:	7c 91       	ld	r23, X
   1b378:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b37a:	21 e2       	ldi	r18, 0x21	; 33
   1b37c:	f6 01       	movw	r30, r12
   1b37e:	e1 5b       	subi	r30, 0xB1	; 177
   1b380:	ff 4f       	sbci	r31, 0xFF	; 255
   1b382:	1d 97       	sbiw	r26, 0x0d	; 13
   1b384:	01 90       	ld	r0, Z+
   1b386:	0d 92       	st	X+, r0
   1b388:	2a 95       	dec	r18
   1b38a:	e1 f7       	brne	.-8      	; 0x1b384 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b38c:	fc 01       	movw	r30, r24
   1b38e:	40 83       	st	Z, r20
   1b390:	51 83       	std	Z+1, r21	; 0x01
   1b392:	62 83       	std	Z+2, r22	; 0x02
   1b394:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b396:	b6 2f       	mov	r27, r22
   1b398:	a5 2f       	mov	r26, r21
   1b39a:	94 2f       	mov	r25, r20
   1b39c:	88 27       	eor	r24, r24
   1b39e:	c2 5f       	subi	r28, 0xF2	; 242
   1b3a0:	de 4f       	sbci	r29, 0xFE	; 254
   1b3a2:	88 83       	st	Y, r24
   1b3a4:	99 83       	std	Y+1, r25	; 0x01
   1b3a6:	aa 83       	std	Y+2, r26	; 0x02
   1b3a8:	bb 83       	std	Y+3, r27	; 0x03
   1b3aa:	ce 50       	subi	r28, 0x0E	; 14
   1b3ac:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b3ae:	f6 01       	movw	r30, r12
   1b3b0:	e4 5a       	subi	r30, 0xA4	; 164
   1b3b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b3b4:	80 81       	ld	r24, Z
   1b3b6:	91 81       	ldd	r25, Z+1	; 0x01
   1b3b8:	a2 81       	ldd	r26, Z+2	; 0x02
   1b3ba:	b3 81       	ldd	r27, Z+3	; 0x03
   1b3bc:	22 27       	eor	r18, r18
   1b3be:	38 2f       	mov	r19, r24
   1b3c0:	49 2f       	mov	r20, r25
   1b3c2:	5a 2f       	mov	r21, r26
   1b3c4:	ce 5e       	subi	r28, 0xEE	; 238
   1b3c6:	de 4f       	sbci	r29, 0xFE	; 254
   1b3c8:	28 83       	st	Y, r18
   1b3ca:	39 83       	std	Y+1, r19	; 0x01
   1b3cc:	4a 83       	std	Y+2, r20	; 0x02
   1b3ce:	5b 83       	std	Y+3, r21	; 0x03
   1b3d0:	c2 51       	subi	r28, 0x12	; 18
   1b3d2:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3d4:	21 2c       	mov	r2, r1
   1b3d6:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b3d8:	81 2c       	mov	r8, r1
   1b3da:	91 2c       	mov	r9, r1
   1b3dc:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3de:	a7 01       	movw	r20, r14
   1b3e0:	40 5a       	subi	r20, 0xA0	; 160
   1b3e2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3e4:	c4 5e       	subi	r28, 0xE4	; 228
   1b3e6:	de 4f       	sbci	r29, 0xFE	; 254
   1b3e8:	59 83       	std	Y+1, r21	; 0x01
   1b3ea:	48 83       	st	Y, r20
   1b3ec:	cc 51       	subi	r28, 0x1C	; 28
   1b3ee:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b3f0:	83 e4       	ldi	r24, 0x43	; 67
   1b3f2:	91 e3       	ldi	r25, 0x31	; 49
   1b3f4:	2c 01       	movw	r4, r24
   1b3f6:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3f8:	27 c0       	rjmp	.+78     	; 0x1b448 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b3fa:	00 e0       	ldi	r16, 0x00	; 0
   1b3fc:	11 e0       	ldi	r17, 0x01	; 1
   1b3fe:	c8 5e       	subi	r28, 0xE8	; 232
   1b400:	de 4f       	sbci	r29, 0xFE	; 254
   1b402:	28 81       	ld	r18, Y
   1b404:	39 81       	ldd	r19, Y+1	; 0x01
   1b406:	4a 81       	ldd	r20, Y+2	; 0x02
   1b408:	5b 81       	ldd	r21, Y+3	; 0x03
   1b40a:	c8 51       	subi	r28, 0x18	; 24
   1b40c:	d1 40       	sbci	r29, 0x01	; 1
   1b40e:	be 01       	movw	r22, r28
   1b410:	66 5f       	subi	r22, 0xF6	; 246
   1b412:	7f 4f       	sbci	r23, 0xFF	; 255
   1b414:	c7 01       	movw	r24, r14
   1b416:	0e 94 6b bf 	call	0x17ed6	; 0x17ed6 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b41a:	8f 3f       	cpi	r24, 0xFF	; 255
   1b41c:	91 05       	cpc	r25, r1
   1b41e:	09 f0       	breq	.+2      	; 0x1b422 <lif_add_lif_file+0x1ee>
   1b420:	0c f4       	brge	.+2      	; 0x1b424 <lif_add_lif_file+0x1f0>
   1b422:	4a c0       	rjmp	.+148    	; 0x1b4b8 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b424:	5f ef       	ldi	r21, 0xFF	; 255
   1b426:	95 1a       	sub	r9, r21
   1b428:	a5 0a       	sbc	r10, r21
   1b42a:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b42c:	ed b7       	in	r30, 0x3d	; 61
   1b42e:	fe b7       	in	r31, 0x3e	; 62
   1b430:	84 82       	std	Z+4, r8	; 0x04
   1b432:	95 82       	std	Z+5, r9	; 0x05
   1b434:	a6 82       	std	Z+6, r10	; 0x06
   1b436:	b7 82       	std	Z+7, r11	; 0x07
   1b438:	41 82       	std	Z+1, r4	; 0x01
   1b43a:	52 82       	std	Z+2, r5	; 0x02
   1b43c:	63 82       	std	Z+3, r6	; 0x03
   1b43e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b442:	ff ef       	ldi	r31, 0xFF	; 255
   1b444:	2f 1a       	sub	r2, r31
   1b446:	3f 0a       	sbc	r3, r31
   1b448:	ce 5e       	subi	r28, 0xEE	; 238
   1b44a:	de 4f       	sbci	r29, 0xFE	; 254
   1b44c:	28 81       	ld	r18, Y
   1b44e:	39 81       	ldd	r19, Y+1	; 0x01
   1b450:	4a 81       	ldd	r20, Y+2	; 0x02
   1b452:	5b 81       	ldd	r21, Y+3	; 0x03
   1b454:	c2 51       	subi	r28, 0x12	; 18
   1b456:	d1 40       	sbci	r29, 0x01	; 1
   1b458:	28 0d       	add	r18, r8
   1b45a:	39 1d       	adc	r19, r9
   1b45c:	4a 1d       	adc	r20, r10
   1b45e:	5b 1d       	adc	r21, r11
   1b460:	c2 5f       	subi	r28, 0xF2	; 242
   1b462:	de 4f       	sbci	r29, 0xFE	; 254
   1b464:	88 81       	ld	r24, Y
   1b466:	99 81       	ldd	r25, Y+1	; 0x01
   1b468:	aa 81       	ldd	r26, Y+2	; 0x02
   1b46a:	bb 81       	ldd	r27, Y+3	; 0x03
   1b46c:	ce 50       	subi	r28, 0x0E	; 14
   1b46e:	d1 40       	sbci	r29, 0x01	; 1
   1b470:	88 0d       	add	r24, r8
   1b472:	99 1d       	adc	r25, r9
   1b474:	aa 1d       	adc	r26, r10
   1b476:	bb 1d       	adc	r27, r11
   1b478:	c8 5e       	subi	r28, 0xE8	; 232
   1b47a:	de 4f       	sbci	r29, 0xFE	; 254
   1b47c:	88 83       	st	Y, r24
   1b47e:	99 83       	std	Y+1, r25	; 0x01
   1b480:	aa 83       	std	Y+2, r26	; 0x02
   1b482:	bb 83       	std	Y+3, r27	; 0x03
   1b484:	c8 51       	subi	r28, 0x18	; 24
   1b486:	d1 40       	sbci	r29, 0x01	; 1
   1b488:	c4 5e       	subi	r28, 0xE4	; 228
   1b48a:	de 4f       	sbci	r29, 0xFE	; 254
   1b48c:	a8 81       	ld	r26, Y
   1b48e:	b9 81       	ldd	r27, Y+1	; 0x01
   1b490:	cc 51       	subi	r28, 0x1C	; 28
   1b492:	d1 40       	sbci	r29, 0x01	; 1
   1b494:	8d 91       	ld	r24, X+
   1b496:	9c 91       	ld	r25, X
   1b498:	28 16       	cp	r2, r24
   1b49a:	39 06       	cpc	r3, r25
   1b49c:	94 f4       	brge	.+36     	; 0x1b4c2 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b49e:	00 e0       	ldi	r16, 0x00	; 0
   1b4a0:	11 e0       	ldi	r17, 0x01	; 1
   1b4a2:	be 01       	movw	r22, r28
   1b4a4:	66 5f       	subi	r22, 0xF6	; 246
   1b4a6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b4a8:	c6 01       	movw	r24, r12
   1b4aa:	0e 94 18 bf 	call	0x17e30	; 0x17e30 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b4ae:	6f 3f       	cpi	r22, 0xFF	; 255
   1b4b0:	71 05       	cpc	r23, r1
   1b4b2:	11 f0       	breq	.+4      	; 0x1b4b8 <lif_add_lif_file+0x284>
   1b4b4:	0c f0       	brlt	.+2      	; 0x1b4b8 <lif_add_lif_file+0x284>
   1b4b6:	a1 cf       	rjmp	.-190    	; 0x1b3fa <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4b8:	c7 01       	movw	r24, r14
   1b4ba:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b4be:	c6 01       	movw	r24, r12
   1b4c0:	0f c0       	rjmp	.+30     	; 0x1b4e0 <lif_add_lif_file+0x2ac>
   1b4c2:	c6 01       	movw	r24, r12
   1b4c4:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b4c8:	ca 5e       	subi	r28, 0xEA	; 234
   1b4ca:	de 4f       	sbci	r29, 0xFE	; 254
   1b4cc:	68 81       	ld	r22, Y
   1b4ce:	79 81       	ldd	r23, Y+1	; 0x01
   1b4d0:	c6 51       	subi	r28, 0x16	; 22
   1b4d2:	d1 40       	sbci	r29, 0x01	; 1
   1b4d4:	c7 01       	movw	r24, r14
   1b4d6:	0e 94 d9 c8 	call	0x191b2	; 0x191b2 <lif_writedirindex>
   1b4da:	89 2b       	or	r24, r25
   1b4dc:	41 f4       	brne	.+16     	; 0x1b4ee <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4de:	c7 01       	movw	r24, r14
   1b4e0:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b4e4:	6f ef       	ldi	r22, 0xFF	; 255
   1b4e6:	7f ef       	ldi	r23, 0xFF	; 255
   1b4e8:	8f ef       	ldi	r24, 0xFF	; 255
   1b4ea:	9f ef       	ldi	r25, 0xFF	; 255
   1b4ec:	13 c0       	rjmp	.+38     	; 0x1b514 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4ee:	c7 01       	movw	r24, r14
   1b4f0:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b4f4:	ed b7       	in	r30, 0x3d	; 61
   1b4f6:	fe b7       	in	r31, 0x3e	; 62
   1b4f8:	84 82       	std	Z+4, r8	; 0x04
   1b4fa:	95 82       	std	Z+5, r9	; 0x05
   1b4fc:	a6 82       	std	Z+6, r10	; 0x06
   1b4fe:	b7 82       	std	Z+7, r11	; 0x07
   1b500:	85 e3       	ldi	r24, 0x35	; 53
   1b502:	91 e3       	ldi	r25, 0x31	; 49
   1b504:	a0 e0       	ldi	r26, 0x00	; 0
   1b506:	81 83       	std	Z+1, r24	; 0x01
   1b508:	92 83       	std	Z+2, r25	; 0x02
   1b50a:	a3 83       	std	Z+3, r26	; 0x03
   1b50c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(bytes);
   1b510:	b4 01       	movw	r22, r8
   1b512:	c5 01       	movw	r24, r10
}
   1b514:	c3 5e       	subi	r28, 0xE3	; 227
   1b516:	de 4f       	sbci	r29, 0xFE	; 254
   1b518:	0f b6       	in	r0, 0x3f	; 63
   1b51a:	f8 94       	cli
   1b51c:	de bf       	out	0x3e, r29	; 62
   1b51e:	0f be       	out	0x3f, r0	; 63
   1b520:	cd bf       	out	0x3d, r28	; 61
   1b522:	df 91       	pop	r29
   1b524:	cf 91       	pop	r28
   1b526:	1f 91       	pop	r17
   1b528:	0f 91       	pop	r16
   1b52a:	ff 90       	pop	r15
   1b52c:	ef 90       	pop	r14
   1b52e:	df 90       	pop	r13
   1b530:	cf 90       	pop	r12
   1b532:	bf 90       	pop	r11
   1b534:	af 90       	pop	r10
   1b536:	9f 90       	pop	r9
   1b538:	8f 90       	pop	r8
   1b53a:	6f 90       	pop	r6
   1b53c:	5f 90       	pop	r5
   1b53e:	4f 90       	pop	r4
   1b540:	3f 90       	pop	r3
   1b542:	2f 90       	pop	r2
   1b544:	08 95       	ret

0001b546 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b546:	ef 92       	push	r14
   1b548:	ff 92       	push	r15
   1b54a:	0f 93       	push	r16
   1b54c:	1f 93       	push	r17
   1b54e:	cf 93       	push	r28
   1b550:	df 93       	push	r29
   1b552:	ad b7       	in	r26, 0x3d	; 61
   1b554:	be b7       	in	r27, 0x3e	; 62
   1b556:	17 97       	sbiw	r26, 0x07	; 7
   1b558:	0f b6       	in	r0, 0x3f	; 63
   1b55a:	f8 94       	cli
   1b55c:	be bf       	out	0x3e, r27	; 62
   1b55e:	0f be       	out	0x3f, r0	; 63
   1b560:	ad bf       	out	0x3d, r26	; 61
   1b562:	7c 01       	movw	r14, r24
   1b564:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b566:	fc 01       	movw	r30, r24
   1b568:	80 81       	ld	r24, Z
   1b56a:	81 11       	cpse	r24, r1
   1b56c:	03 c0       	rjmp	.+6      	; 0x1b574 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b56e:	80 e1       	ldi	r24, 0x10	; 16
   1b570:	91 e3       	ldi	r25, 0x31	; 49
   1b572:	06 c0       	rjmp	.+12     	; 0x1b580 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b574:	fb 01       	movw	r30, r22
   1b576:	80 81       	ld	r24, Z
   1b578:	81 11       	cpse	r24, r1
   1b57a:	0b c0       	rjmp	.+22     	; 0x1b592 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b57c:	80 ef       	ldi	r24, 0xF0	; 240
   1b57e:	90 e3       	ldi	r25, 0x30	; 48
   1b580:	a0 e0       	ldi	r26, 0x00	; 0
   1b582:	ed b7       	in	r30, 0x3d	; 61
   1b584:	fe b7       	in	r31, 0x3e	; 62
   1b586:	81 83       	std	Z+1, r24	; 0x01
   1b588:	92 83       	std	Z+2, r25	; 0x02
   1b58a:	a3 83       	std	Z+3, r26	; 0x03
   1b58c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1b590:	68 c0       	rjmp	.+208    	; 0x1b662 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b592:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b596:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b59a:	92 ff       	sbrs	r25, 2
   1b59c:	0e c0       	rjmp	.+28     	; 0x1b5ba <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b59e:	ed b7       	in	r30, 0x3d	; 61
   1b5a0:	fe b7       	in	r31, 0x3e	; 62
   1b5a2:	77 83       	std	Z+7, r23	; 0x07
   1b5a4:	66 83       	std	Z+6, r22	; 0x06
   1b5a6:	f5 82       	std	Z+5, r15	; 0x05
   1b5a8:	e4 82       	std	Z+4, r14	; 0x04
   1b5aa:	81 ed       	ldi	r24, 0xD1	; 209
   1b5ac:	90 e3       	ldi	r25, 0x30	; 48
   1b5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1b5b0:	81 83       	std	Z+1, r24	; 0x01
   1b5b2:	92 83       	std	Z+2, r25	; 0x02
   1b5b4:	a3 83       	std	Z+3, r26	; 0x03
   1b5b6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b5ba:	68 e0       	ldi	r22, 0x08	; 8
   1b5bc:	79 e0       	ldi	r23, 0x09	; 9
   1b5be:	c7 01       	movw	r24, r14
   1b5c0:	0e 94 a1 ce 	call	0x19d42	; 0x19d42 <lif_open_volume>
   1b5c4:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b5c6:	00 97       	sbiw	r24, 0x00	; 0
   1b5c8:	09 f4       	brne	.+2      	; 0x1b5cc <lif_del_file+0x86>
   1b5ca:	4b c0       	rjmp	.+150    	; 0x1b662 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b5cc:	b8 01       	movw	r22, r16
   1b5ce:	0e 94 76 d1 	call	0x1a2ec	; 0x1a2ec <lif_find_file>
    if(index == -1)
   1b5d2:	8f 3f       	cpi	r24, 0xFF	; 255
   1b5d4:	ff ef       	ldi	r31, 0xFF	; 255
   1b5d6:	9f 07       	cpc	r25, r31
   1b5d8:	a1 f4       	brne	.+40     	; 0x1b602 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5da:	ce 01       	movw	r24, r28
   1b5dc:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b5e0:	ed b7       	in	r30, 0x3d	; 61
   1b5e2:	fe b7       	in	r31, 0x3e	; 62
   1b5e4:	17 83       	std	Z+7, r17	; 0x07
   1b5e6:	06 83       	std	Z+6, r16	; 0x06
   1b5e8:	f5 82       	std	Z+5, r15	; 0x05
   1b5ea:	e4 82       	std	Z+4, r14	; 0x04
   1b5ec:	89 ea       	ldi	r24, 0xA9	; 169
   1b5ee:	90 e3       	ldi	r25, 0x30	; 48
   1b5f0:	a0 e0       	ldi	r26, 0x00	; 0
   1b5f2:	81 83       	std	Z+1, r24	; 0x01
   1b5f4:	92 83       	std	Z+2, r25	; 0x02
   1b5f6:	a3 83       	std	Z+3, r26	; 0x03
   1b5f8:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        return(0);
   1b5fc:	80 e0       	ldi	r24, 0x00	; 0
   1b5fe:	90 e0       	ldi	r25, 0x00	; 0
   1b600:	32 c0       	rjmp	.+100    	; 0x1b666 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b602:	2a a1       	ldd	r18, Y+34	; 0x22
   1b604:	3b a1       	ldd	r19, Y+35	; 0x23
   1b606:	21 50       	subi	r18, 0x01	; 1
   1b608:	31 09       	sbc	r19, r1
   1b60a:	fe 01       	movw	r30, r28
   1b60c:	e6 5a       	subi	r30, 0xA6	; 166
   1b60e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b610:	82 17       	cp	r24, r18
   1b612:	93 07       	cpc	r25, r19
   1b614:	2c f0       	brlt	.+10     	; 0x1b620 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b616:	2f ef       	ldi	r18, 0xFF	; 255
   1b618:	3f ef       	ldi	r19, 0xFF	; 255
   1b61a:	31 83       	std	Z+1, r19	; 0x01
   1b61c:	20 83       	st	Z, r18
   1b61e:	02 c0       	rjmp	.+4      	; 0x1b624 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b620:	11 82       	std	Z+1, r1	; 0x01
   1b622:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b624:	bc 01       	movw	r22, r24
   1b626:	ce 01       	movw	r24, r28
   1b628:	0e 94 d9 c8 	call	0x191b2	; 0x191b2 <lif_writedirindex>
   1b62c:	89 2b       	or	r24, r25
   1b62e:	21 f4       	brne	.+8      	; 0x1b638 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b630:	ce 01       	movw	r24, r28
   1b632:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b636:	15 c0       	rjmp	.+42     	; 0x1b662 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b638:	ce 01       	movw	r24, r28
   1b63a:	0e 94 4d c9 	call	0x1929a	; 0x1929a <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b63e:	ce 01       	movw	r24, r28
   1b640:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b644:	ed b7       	in	r30, 0x3d	; 61
   1b646:	fe b7       	in	r31, 0x3e	; 62
   1b648:	15 83       	std	Z+5, r17	; 0x05
   1b64a:	04 83       	std	Z+4, r16	; 0x04
   1b64c:	8a e9       	ldi	r24, 0x9A	; 154
   1b64e:	90 e3       	ldi	r25, 0x30	; 48
   1b650:	a0 e0       	ldi	r26, 0x00	; 0
   1b652:	81 83       	std	Z+1, r24	; 0x01
   1b654:	92 83       	std	Z+2, r25	; 0x02
   1b656:	a3 83       	std	Z+3, r26	; 0x03
   1b658:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    return(1);
   1b65c:	81 e0       	ldi	r24, 0x01	; 1
   1b65e:	90 e0       	ldi	r25, 0x00	; 0
   1b660:	02 c0       	rjmp	.+4      	; 0x1b666 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b662:	8f ef       	ldi	r24, 0xFF	; 255
   1b664:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b666:	cd b7       	in	r28, 0x3d	; 61
   1b668:	de b7       	in	r29, 0x3e	; 62
   1b66a:	27 96       	adiw	r28, 0x07	; 7
   1b66c:	e6 e0       	ldi	r30, 0x06	; 6
   1b66e:	0c 94 c3 e3 	jmp	0x1c786	; 0x1c786 <__epilogue_restores__+0x18>

0001b672 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b672:	a7 e0       	ldi	r26, 0x07	; 7
   1b674:	b0 e0       	ldi	r27, 0x00	; 0
   1b676:	ef e3       	ldi	r30, 0x3F	; 63
   1b678:	fb ed       	ldi	r31, 0xDB	; 219
   1b67a:	0c 94 a3 e3 	jmp	0x1c746	; 0x1c746 <__prologue_saves__+0x10>
   1b67e:	6c 01       	movw	r12, r24
   1b680:	8b 01       	movw	r16, r22
   1b682:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b684:	fc 01       	movw	r30, r24
   1b686:	80 81       	ld	r24, Z
   1b688:	81 11       	cpse	r24, r1
   1b68a:	03 c0       	rjmp	.+6      	; 0x1b692 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b68c:	82 e7       	ldi	r24, 0x72	; 114
   1b68e:	90 e3       	ldi	r25, 0x30	; 48
   1b690:	06 c0       	rjmp	.+12     	; 0x1b69e <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b692:	fb 01       	movw	r30, r22
   1b694:	80 81       	ld	r24, Z
   1b696:	81 11       	cpse	r24, r1
   1b698:	0b c0       	rjmp	.+22     	; 0x1b6b0 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b69a:	8b e4       	ldi	r24, 0x4B	; 75
   1b69c:	90 e3       	ldi	r25, 0x30	; 48
   1b69e:	a0 e0       	ldi	r26, 0x00	; 0
   1b6a0:	ed b7       	in	r30, 0x3d	; 61
   1b6a2:	fe b7       	in	r31, 0x3e	; 62
   1b6a4:	81 83       	std	Z+1, r24	; 0x01
   1b6a6:	92 83       	std	Z+2, r25	; 0x02
   1b6a8:	a3 83       	std	Z+3, r26	; 0x03
   1b6aa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1b6ae:	58 c0       	rjmp	.+176    	; 0x1b760 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b6b0:	fa 01       	movw	r30, r20
   1b6b2:	80 81       	ld	r24, Z
   1b6b4:	81 11       	cpse	r24, r1
   1b6b6:	03 c0       	rjmp	.+6      	; 0x1b6be <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b6b8:	84 e2       	ldi	r24, 0x24	; 36
   1b6ba:	90 e3       	ldi	r25, 0x30	; 48
   1b6bc:	f0 cf       	rjmp	.-32     	; 0x1b69e <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b6be:	ca 01       	movw	r24, r20
   1b6c0:	0e 94 33 c0 	call	0x18066	; 0x18066 <lif_checkname>
   1b6c4:	89 2b       	or	r24, r25
   1b6c6:	19 f4       	brne	.+6      	; 0x1b6ce <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b6c8:	8e ee       	ldi	r24, 0xEE	; 238
   1b6ca:	9f e2       	ldi	r25, 0x2F	; 47
   1b6cc:	e8 cf       	rjmp	.-48     	; 0x1b69e <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b6ce:	68 e0       	ldi	r22, 0x08	; 8
   1b6d0:	79 e0       	ldi	r23, 0x09	; 9
   1b6d2:	c6 01       	movw	r24, r12
   1b6d4:	0e 94 a1 ce 	call	0x19d42	; 0x19d42 <lif_open_volume>
   1b6d8:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b6da:	00 97       	sbiw	r24, 0x00	; 0
   1b6dc:	09 f4       	brne	.+2      	; 0x1b6e0 <lif_rename_file+0x6e>
   1b6de:	40 c0       	rjmp	.+128    	; 0x1b760 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b6e0:	b8 01       	movw	r22, r16
   1b6e2:	0e 94 76 d1 	call	0x1a2ec	; 0x1a2ec <lif_find_file>
   1b6e6:	5c 01       	movw	r10, r24
    if(index == -1)
   1b6e8:	01 96       	adiw	r24, 0x01	; 1
   1b6ea:	a1 f4       	brne	.+40     	; 0x1b714 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b6ec:	ed b7       	in	r30, 0x3d	; 61
   1b6ee:	fe b7       	in	r31, 0x3e	; 62
   1b6f0:	17 83       	std	Z+7, r17	; 0x07
   1b6f2:	06 83       	std	Z+6, r16	; 0x06
   1b6f4:	d5 82       	std	Z+5, r13	; 0x05
   1b6f6:	c4 82       	std	Z+4, r12	; 0x04
   1b6f8:	85 ec       	ldi	r24, 0xC5	; 197
   1b6fa:	9f e2       	ldi	r25, 0x2F	; 47
   1b6fc:	a0 e0       	ldi	r26, 0x00	; 0
   1b6fe:	81 83       	std	Z+1, r24	; 0x01
   1b700:	92 83       	std	Z+2, r25	; 0x02
   1b702:	a3 83       	std	Z+3, r26	; 0x03
   1b704:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b708:	ce 01       	movw	r24, r28
   1b70a:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b70e:	80 e0       	ldi	r24, 0x00	; 0
   1b710:	90 e0       	ldi	r25, 0x00	; 0
   1b712:	28 c0       	rjmp	.+80     	; 0x1b764 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b714:	4a e0       	ldi	r20, 0x0A	; 10
   1b716:	50 e0       	ldi	r21, 0x00	; 0
   1b718:	b7 01       	movw	r22, r14
   1b71a:	ce 01       	movw	r24, r28
   1b71c:	81 5b       	subi	r24, 0xB1	; 177
   1b71e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b720:	0e 94 6d c0 	call	0x180da	; 0x180da <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b724:	b5 01       	movw	r22, r10
   1b726:	ce 01       	movw	r24, r28
   1b728:	0e 94 d9 c8 	call	0x191b2	; 0x191b2 <lif_writedirindex>
   1b72c:	89 2b       	or	r24, r25
   1b72e:	21 f4       	brne	.+8      	; 0x1b738 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b730:	ce 01       	movw	r24, r28
   1b732:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
   1b736:	14 c0       	rjmp	.+40     	; 0x1b760 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b738:	ed b7       	in	r30, 0x3d	; 61
   1b73a:	fe b7       	in	r31, 0x3e	; 62
   1b73c:	f7 82       	std	Z+7, r15	; 0x07
   1b73e:	e6 82       	std	Z+6, r14	; 0x06
   1b740:	15 83       	std	Z+5, r17	; 0x05
   1b742:	04 83       	std	Z+4, r16	; 0x04
   1b744:	8e ea       	ldi	r24, 0xAE	; 174
   1b746:	9f e2       	ldi	r25, 0x2F	; 47
   1b748:	a0 e0       	ldi	r26, 0x00	; 0
   1b74a:	81 83       	std	Z+1, r24	; 0x01
   1b74c:	92 83       	std	Z+2, r25	; 0x02
   1b74e:	a3 83       	std	Z+3, r26	; 0x03
   1b750:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b754:	ce 01       	movw	r24, r28
   1b756:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b75a:	81 e0       	ldi	r24, 0x01	; 1
   1b75c:	90 e0       	ldi	r25, 0x00	; 0
   1b75e:	02 c0       	rjmp	.+4      	; 0x1b764 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b760:	8f ef       	ldi	r24, 0xFF	; 255
   1b762:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b764:	cd b7       	in	r28, 0x3d	; 61
   1b766:	de b7       	in	r29, 0x3e	; 62
   1b768:	27 96       	adiw	r28, 0x07	; 7
   1b76a:	ea e0       	ldi	r30, 0x0A	; 10
   1b76c:	0c 94 bf e3 	jmp	0x1c77e	; 0x1c77e <__epilogue_restores__+0x10>

0001b770 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b770:	4f 92       	push	r4
   1b772:	5f 92       	push	r5
   1b774:	6f 92       	push	r6
   1b776:	7f 92       	push	r7
   1b778:	af 92       	push	r10
   1b77a:	bf 92       	push	r11
   1b77c:	cf 92       	push	r12
   1b77e:	df 92       	push	r13
   1b780:	ef 92       	push	r14
   1b782:	ff 92       	push	r15
   1b784:	0f 93       	push	r16
   1b786:	1f 93       	push	r17
   1b788:	cf 93       	push	r28
   1b78a:	df 93       	push	r29
   1b78c:	ad b7       	in	r26, 0x3d	; 61
   1b78e:	be b7       	in	r27, 0x3e	; 62
   1b790:	17 97       	sbiw	r26, 0x07	; 7
   1b792:	0f b6       	in	r0, 0x3f	; 63
   1b794:	f8 94       	cli
   1b796:	be bf       	out	0x3e, r27	; 62
   1b798:	0f be       	out	0x3f, r0	; 63
   1b79a:	ad bf       	out	0x3d, r26	; 61
   1b79c:	27 01       	movw	r4, r14
   1b79e:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b7a0:	dc 01       	movw	r26, r24
   1b7a2:	ec 91       	ld	r30, X
   1b7a4:	e1 11       	cpse	r30, r1
   1b7a6:	03 c0       	rjmp	.+6      	; 0x1b7ae <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b7a8:	85 e8       	ldi	r24, 0x85	; 133
   1b7aa:	9f e2       	ldi	r25, 0x2F	; 47
   1b7ac:	16 c0       	rjmp	.+44     	; 0x1b7da <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b7ae:	db 01       	movw	r26, r22
   1b7b0:	ec 91       	ld	r30, X
   1b7b2:	e1 11       	cpse	r30, r1
   1b7b4:	03 c0       	rjmp	.+6      	; 0x1b7bc <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b7b6:	80 e6       	ldi	r24, 0x60	; 96
   1b7b8:	9f e2       	ldi	r25, 0x2F	; 47
   1b7ba:	0f c0       	rjmp	.+30     	; 0x1b7da <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b7bc:	21 15       	cp	r18, r1
   1b7be:	31 05       	cpc	r19, r1
   1b7c0:	41 05       	cpc	r20, r1
   1b7c2:	51 05       	cpc	r21, r1
   1b7c4:	19 f4       	brne	.+6      	; 0x1b7cc <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b7c6:	8d e3       	ldi	r24, 0x3D	; 61
   1b7c8:	9f e2       	ldi	r25, 0x2F	; 47
   1b7ca:	07 c0       	rjmp	.+14     	; 0x1b7da <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b7cc:	e1 14       	cp	r14, r1
   1b7ce:	f1 04       	cpc	r15, r1
   1b7d0:	01 05       	cpc	r16, r1
   1b7d2:	11 05       	cpc	r17, r1
   1b7d4:	59 f4       	brne	.+22     	; 0x1b7ec <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b7d6:	8d e1       	ldi	r24, 0x1D	; 29
   1b7d8:	9f e2       	ldi	r25, 0x2F	; 47
   1b7da:	a0 e0       	ldi	r26, 0x00	; 0
   1b7dc:	ed b7       	in	r30, 0x3d	; 61
   1b7de:	fe b7       	in	r31, 0x3e	; 62
   1b7e0:	81 83       	std	Z+1, r24	; 0x01
   1b7e2:	92 83       	std	Z+2, r25	; 0x02
   1b7e4:	a3 83       	std	Z+3, r26	; 0x03
   1b7e6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1b7ea:	2b c0       	rjmp	.+86     	; 0x1b842 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b7ec:	67 01       	movw	r12, r14
   1b7ee:	78 01       	movw	r14, r16
   1b7f0:	f2 e0       	ldi	r31, 0x02	; 2
   1b7f2:	cf 1a       	sub	r12, r31
   1b7f4:	d1 08       	sbc	r13, r1
   1b7f6:	e1 08       	sbc	r14, r1
   1b7f8:	f1 08       	sbc	r15, r1
   1b7fa:	56 01       	movw	r10, r12
   1b7fc:	67 01       	movw	r12, r14
   1b7fe:	a2 1a       	sub	r10, r18
   1b800:	b3 0a       	sbc	r11, r19
   1b802:	c4 0a       	sbc	r12, r20
   1b804:	d5 0a       	sbc	r13, r21
   1b806:	79 01       	movw	r14, r18
   1b808:	8a 01       	movw	r16, r20
   1b80a:	22 e0       	ldi	r18, 0x02	; 2
   1b80c:	30 e0       	ldi	r19, 0x00	; 0
   1b80e:	40 e0       	ldi	r20, 0x00	; 0
   1b810:	50 e0       	ldi	r21, 0x00	; 0
   1b812:	0e 94 57 ca 	call	0x194ae	; 0x194ae <lif_create_volume>
    if(LIF == NULL)
   1b816:	00 97       	sbiw	r24, 0x00	; 0
   1b818:	a1 f0       	breq	.+40     	; 0x1b842 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b81a:	0e 94 e4 c7 	call	0x18fc8	; 0x18fc8 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b81e:	82 01       	movw	r16, r4
   1b820:	d6 2d       	mov	r29, r6
   1b822:	c7 2d       	mov	r28, r7
   1b824:	ed b7       	in	r30, 0x3d	; 61
   1b826:	fe b7       	in	r31, 0x3e	; 62
   1b828:	44 82       	std	Z+4, r4	; 0x04
   1b82a:	15 83       	std	Z+5, r17	; 0x05
   1b82c:	66 82       	std	Z+6, r6	; 0x06
   1b82e:	77 82       	std	Z+7, r7	; 0x07
   1b830:	8d ef       	ldi	r24, 0xFD	; 253
   1b832:	9e e2       	ldi	r25, 0x2E	; 46
   1b834:	a0 e0       	ldi	r26, 0x00	; 0
   1b836:	81 83       	std	Z+1, r24	; 0x01
   1b838:	92 83       	std	Z+2, r25	; 0x02
   1b83a:	a3 83       	std	Z+3, r26	; 0x03
   1b83c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    return(end);
   1b840:	04 c0       	rjmp	.+8      	; 0x1b84a <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b842:	0f ef       	ldi	r16, 0xFF	; 255
   1b844:	1f ef       	ldi	r17, 0xFF	; 255
   1b846:	df ef       	ldi	r29, 0xFF	; 255
   1b848:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b84a:	b8 01       	movw	r22, r16
   1b84c:	8d 2f       	mov	r24, r29
   1b84e:	9c 2f       	mov	r25, r28
   1b850:	ad b7       	in	r26, 0x3d	; 61
   1b852:	be b7       	in	r27, 0x3e	; 62
   1b854:	17 96       	adiw	r26, 0x07	; 7
   1b856:	0f b6       	in	r0, 0x3f	; 63
   1b858:	f8 94       	cli
   1b85a:	be bf       	out	0x3e, r27	; 62
   1b85c:	0f be       	out	0x3f, r0	; 63
   1b85e:	ad bf       	out	0x3d, r26	; 61
   1b860:	df 91       	pop	r29
   1b862:	cf 91       	pop	r28
   1b864:	1f 91       	pop	r17
   1b866:	0f 91       	pop	r16
   1b868:	ff 90       	pop	r15
   1b86a:	ef 90       	pop	r14
   1b86c:	df 90       	pop	r13
   1b86e:	cf 90       	pop	r12
   1b870:	bf 90       	pop	r11
   1b872:	af 90       	pop	r10
   1b874:	7f 90       	pop	r7
   1b876:	6f 90       	pop	r6
   1b878:	5f 90       	pop	r5
   1b87a:	4f 90       	pop	r4
   1b87c:	08 95       	ret

0001b87e <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b87e:	a5 e0       	ldi	r26, 0x05	; 5
   1b880:	b0 e0       	ldi	r27, 0x00	; 0
   1b882:	e4 e4       	ldi	r30, 0x44	; 68
   1b884:	fc ed       	ldi	r31, 0xDC	; 220
   1b886:	5d c7       	rjmp	.+3770   	; 0x1c742 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b888:	82 30       	cpi	r24, 0x02	; 2
   1b88a:	91 05       	cpc	r25, r1
   1b88c:	1c f4       	brge	.+6      	; 0x1b894 <lif_tests+0x16>
        return (0);
   1b88e:	80 e0       	ldi	r24, 0x00	; 0
   1b890:	90 e0       	ldi	r25, 0x00	; 0
   1b892:	65 c1       	rjmp	.+714    	; 0x1bb5e <lif_tests+0x2e0>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b894:	fb 01       	movw	r30, r22
   1b896:	e2 80       	ldd	r14, Z+2	; 0x02
   1b898:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b89a:	e1 14       	cp	r14, r1
   1b89c:	f1 04       	cpc	r15, r1
   1b89e:	09 f4       	brne	.+2      	; 0x1b8a2 <lif_tests+0x24>
   1b8a0:	5c c1       	rjmp	.+696    	; 0x1bb5a <lif_tests+0x2dc>
   1b8a2:	f7 01       	movw	r30, r14
   1b8a4:	20 81       	ld	r18, Z
   1b8a6:	22 23       	and	r18, r18
   1b8a8:	09 f4       	brne	.+2      	; 0x1b8ac <lif_tests+0x2e>
   1b8aa:	57 c1       	rjmp	.+686    	; 0x1bb5a <lif_tests+0x2dc>
   1b8ac:	8b 01       	movw	r16, r22
   1b8ae:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b8b0:	6d e7       	ldi	r22, 0x7D	; 125
   1b8b2:	76 e1       	ldi	r23, 0x16	; 22
   1b8b4:	c7 01       	movw	r24, r14
   1b8b6:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1b8ba:	89 2b       	or	r24, r25
   1b8bc:	79 f0       	breq	.+30     	; 0x1b8dc <lif_tests+0x5e>
    {
        if(MATCHI_LEN(argv[0],"lif"))
   1b8be:	68 e7       	ldi	r22, 0x78	; 120
   1b8c0:	76 e1       	ldi	r23, 0x16	; 22
   1b8c2:	f8 01       	movw	r30, r16
   1b8c4:	80 81       	ld	r24, Z
   1b8c6:	91 81       	ldd	r25, Z+1	; 0x01
   1b8c8:	0e 94 a3 30 	call	0x6146	; 0x6146 <MATCHI_LEN>
   1b8cc:	89 2b       	or	r24, r25
   1b8ce:	09 f4       	brne	.+2      	; 0x1b8d2 <lif_tests+0x54>
   1b8d0:	44 c1       	rjmp	.+648    	; 0x1bb5a <lif_tests+0x2dc>
			lif_help(1);
   1b8d2:	81 e0       	ldi	r24, 0x01	; 1
   1b8d4:	90 e0       	ldi	r25, 0x00	; 0
   1b8d6:	0e 94 09 be 	call	0x17c12	; 0x17c12 <lif_help>
   1b8da:	3f c1       	rjmp	.+638    	; 0x1bb5a <lif_tests+0x2dc>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b8dc:	6c e7       	ldi	r22, 0x7C	; 124
   1b8de:	76 e1       	ldi	r23, 0x16	; 22
   1b8e0:	c7 01       	movw	r24, r14
   1b8e2:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1b8e6:	89 2b       	or	r24, r25
   1b8e8:	51 f7       	brne	.-44     	; 0x1b8be <lif_tests+0x40>
   1b8ea:	62 e8       	ldi	r22, 0x82	; 130
   1b8ec:	76 e1       	ldi	r23, 0x16	; 22
   1b8ee:	c7 01       	movw	r24, r14
   1b8f0:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1b8f4:	89 2b       	or	r24, r25
   1b8f6:	19 f7       	brne	.-58     	; 0x1b8be <lif_tests+0x40>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b8f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b8fc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b900:	9b 7f       	andi	r25, 0xFB	; 251
   1b902:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b906:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b90a:	96 01       	movw	r18, r12
   1b90c:	42 e0       	ldi	r20, 0x02	; 2
   1b90e:	50 e0       	ldi	r21, 0x00	; 0
   1b910:	65 e8       	ldi	r22, 0x85	; 133
   1b912:	76 e1       	ldi	r23, 0x16	; 22
   1b914:	c7 01       	movw	r24, r14
   1b916:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1b91a:	89 2b       	or	r24, r25
   1b91c:	79 f0       	breq	.+30     	; 0x1b93c <lif_tests+0xbe>
    {
        debuglevel |= 0x400;
   1b91e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b922:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b926:	94 60       	ori	r25, 0x04	; 4
   1b928:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b92c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b930:	f8 01       	movw	r30, r16
   1b932:	e4 80       	ldd	r14, Z+4	; 0x04
   1b934:	f5 80       	ldd	r15, Z+5	; 0x05
   1b936:	c3 e0       	ldi	r28, 0x03	; 3
   1b938:	d0 e0       	ldi	r29, 0x00	; 0
   1b93a:	02 c0       	rjmp	.+4      	; 0x1b940 <lif_tests+0xc2>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b93c:	c2 e0       	ldi	r28, 0x02	; 2
   1b93e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b940:	5e 01       	movw	r10, r28
   1b942:	f3 e0       	ldi	r31, 0x03	; 3
   1b944:	af 0e       	add	r10, r31
   1b946:	b1 1c       	adc	r11, r1
   1b948:	96 01       	movw	r18, r12
   1b94a:	a5 01       	movw	r20, r10
   1b94c:	68 e8       	ldi	r22, 0x88	; 136
   1b94e:	76 e1       	ldi	r23, 0x16	; 22
   1b950:	c7 01       	movw	r24, r14
   1b952:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1b956:	89 2b       	or	r24, r25
   1b958:	61 f0       	breq	.+24     	; 0x1b972 <lif_tests+0xf4>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b95a:	cc 0f       	add	r28, r28
   1b95c:	dd 1f       	adc	r29, r29
   1b95e:	c0 0f       	add	r28, r16
   1b960:	d1 1f       	adc	r29, r17
   1b962:	4c 81       	ldd	r20, Y+4	; 0x04
   1b964:	5d 81       	ldd	r21, Y+5	; 0x05
   1b966:	6a 81       	ldd	r22, Y+2	; 0x02
   1b968:	7b 81       	ldd	r23, Y+3	; 0x03
   1b96a:	88 81       	ld	r24, Y
   1b96c:	99 81       	ldd	r25, Y+1	; 0x01
   1b96e:	62 dc       	rcall	.-1852   	; 0x1b234 <lif_add_lif_file>
   1b970:	f4 c0       	rjmp	.+488    	; 0x1bb5a <lif_tests+0x2dc>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b972:	96 01       	movw	r18, r12
   1b974:	a5 01       	movw	r20, r10
   1b976:	6f e8       	ldi	r22, 0x8F	; 143
   1b978:	76 e1       	ldi	r23, 0x16	; 22
   1b97a:	c7 01       	movw	r24, r14
   1b97c:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1b980:	89 2b       	or	r24, r25
   1b982:	69 f0       	breq	.+26     	; 0x1b99e <lif_tests+0x120>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b984:	cc 0f       	add	r28, r28
   1b986:	dd 1f       	adc	r29, r29
   1b988:	c0 0f       	add	r28, r16
   1b98a:	d1 1f       	adc	r29, r17
   1b98c:	4c 81       	ldd	r20, Y+4	; 0x04
   1b98e:	5d 81       	ldd	r21, Y+5	; 0x05
   1b990:	6a 81       	ldd	r22, Y+2	; 0x02
   1b992:	7b 81       	ldd	r23, Y+3	; 0x03
   1b994:	88 81       	ld	r24, Y
   1b996:	99 81       	ldd	r25, Y+1	; 0x01
   1b998:	0e 94 f7 d3 	call	0x1a7ee	; 0x1a7ee <lif_add_ascii_file_as_e010>
   1b99c:	de c0       	rjmp	.+444    	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b99e:	96 01       	movw	r18, r12
   1b9a0:	a5 01       	movw	r20, r10
   1b9a2:	63 e9       	ldi	r22, 0x93	; 147
   1b9a4:	76 e1       	ldi	r23, 0x16	; 22
   1b9a6:	c7 01       	movw	r24, r14
   1b9a8:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1b9ac:	89 2b       	or	r24, r25
   1b9ae:	09 f4       	brne	.+2      	; 0x1b9b2 <lif_tests+0x134>
   1b9b0:	42 c0       	rjmp	.+132    	; 0x1ba36 <lif_tests+0x1b8>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b9b2:	ce 01       	movw	r24, r28
   1b9b4:	88 0f       	add	r24, r24
   1b9b6:	99 1f       	adc	r25, r25
   1b9b8:	e8 01       	movw	r28, r16
   1b9ba:	c8 0f       	add	r28, r24
   1b9bc:	d9 1f       	adc	r29, r25
   1b9be:	c8 80       	ld	r12, Y
   1b9c0:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b9c2:	aa 80       	ldd	r10, Y+2	; 0x02
   1b9c4:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b9c6:	0c 80       	ldd	r0, Y+4	; 0x04
   1b9c8:	dd 81       	ldd	r29, Y+5	; 0x05
   1b9ca:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b9cc:	6e e9       	ldi	r22, 0x9E	; 158
   1b9ce:	76 e1       	ldi	r23, 0x16	; 22
   1b9d0:	ce 01       	movw	r24, r28
   1b9d2:	0e 94 a3 30 	call	0x6146	; 0x6146 <MATCHI_LEN>
   1b9d6:	89 2b       	or	r24, r25
   1b9d8:	09 f0       	breq	.+2      	; 0x1b9dc <lif_tests+0x15e>
            model +=2;
   1b9da:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b9dc:	40 e0       	ldi	r20, 0x00	; 0
   1b9de:	50 e0       	ldi	r21, 0x00	; 0
   1b9e0:	60 e0       	ldi	r22, 0x00	; 0
   1b9e2:	70 e0       	ldi	r23, 0x00	; 0
   1b9e4:	ce 01       	movw	r24, r28
   1b9e6:	0e 94 60 a1 	call	0x142c0	; 0x142c0 <hpdir_find_drive>
   1b9ea:	89 2b       	or	r24, r25
   1b9ec:	b9 f0       	breq	.+46     	; 0x1ba1c <lif_tests+0x19e>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b9ee:	60 91 ab 22 	lds	r22, 0x22AB	; 0x8022ab <hpdir+0xac>
   1b9f2:	70 91 ac 22 	lds	r23, 0x22AC	; 0x8022ac <hpdir+0xad>
   1b9f6:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <hpdir+0xae>
   1b9fa:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <hpdir+0xaf>
   1b9fe:	0e 94 43 a1 	call	0x14286	; 0x14286 <lif_dir_count>
   1ba02:	9b 01       	movw	r18, r22
   1ba04:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1ba06:	e0 90 ab 22 	lds	r14, 0x22AB	; 0x8022ab <hpdir+0xac>
   1ba0a:	f0 90 ac 22 	lds	r15, 0x22AC	; 0x8022ac <hpdir+0xad>
   1ba0e:	00 91 ad 22 	lds	r16, 0x22AD	; 0x8022ad <hpdir+0xae>
   1ba12:	10 91 ae 22 	lds	r17, 0x22AE	; 0x8022ae <hpdir+0xaf>
   1ba16:	b5 01       	movw	r22, r10
   1ba18:	c6 01       	movw	r24, r12
   1ba1a:	2e c0       	rjmp	.+92     	; 0x1ba78 <lif_tests+0x1fa>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1ba1c:	ed b7       	in	r30, 0x3d	; 61
   1ba1e:	fe b7       	in	r31, 0x3e	; 62
   1ba20:	d5 83       	std	Z+5, r29	; 0x05
   1ba22:	c4 83       	std	Z+4, r28	; 0x04
   1ba24:	81 e3       	ldi	r24, 0x31	; 49
   1ba26:	91 e4       	ldi	r25, 0x41	; 65
   1ba28:	a0 e0       	ldi	r26, 0x00	; 0
   1ba2a:	81 83       	std	Z+1, r24	; 0x01
   1ba2c:	92 83       	std	Z+2, r25	; 0x02
   1ba2e:	a3 83       	std	Z+3, r26	; 0x03
   1ba30:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1ba34:	92 c0       	rjmp	.+292    	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1ba36:	96 01       	movw	r18, r12
   1ba38:	ae 01       	movw	r20, r28
   1ba3a:	4c 5f       	subi	r20, 0xFC	; 252
   1ba3c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba3e:	61 ea       	ldi	r22, 0xA1	; 161
   1ba40:	76 e1       	ldi	r23, 0x16	; 22
   1ba42:	c7 01       	movw	r24, r14
   1ba44:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1ba48:	89 2b       	or	r24, r25
   1ba4a:	c1 f0       	breq	.+48     	; 0x1ba7c <lif_tests+0x1fe>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1ba4c:	cc 0f       	add	r28, r28
   1ba4e:	dd 1f       	adc	r29, r29
   1ba50:	c0 0f       	add	r28, r16
   1ba52:	d1 1f       	adc	r29, r17
   1ba54:	8c 81       	ldd	r24, Y+4	; 0x04
   1ba56:	9d 81       	ldd	r25, Y+5	; 0x05
   1ba58:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <atol>
   1ba5c:	4b 01       	movw	r8, r22
   1ba5e:	5c 01       	movw	r10, r24
   1ba60:	8e 81       	ldd	r24, Y+6	; 0x06
   1ba62:	9f 81       	ldd	r25, Y+7	; 0x07
   1ba64:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <atol>
   1ba68:	7b 01       	movw	r14, r22
   1ba6a:	8c 01       	movw	r16, r24
   1ba6c:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba6e:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba70:	a5 01       	movw	r20, r10
   1ba72:	94 01       	movw	r18, r8
   1ba74:	88 81       	ld	r24, Y
   1ba76:	99 81       	ldd	r25, Y+1	; 0x01
   1ba78:	7b de       	rcall	.-778    	; 0x1b770 <lif_create_image>
   1ba7a:	6f c0       	rjmp	.+222    	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1ba7c:	96 01       	movw	r18, r12
   1ba7e:	ae 01       	movw	r20, r28
   1ba80:	4e 5f       	subi	r20, 0xFE	; 254
   1ba82:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba84:	68 ea       	ldi	r22, 0xA8	; 168
   1ba86:	76 e1       	ldi	r23, 0x16	; 22
   1ba88:	c7 01       	movw	r24, r14
   1ba8a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1ba8e:	89 2b       	or	r24, r25
   1ba90:	51 f0       	breq	.+20     	; 0x1baa6 <lif_tests+0x228>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1ba92:	cc 0f       	add	r28, r28
   1ba94:	dd 1f       	adc	r29, r29
   1ba96:	c0 0f       	add	r28, r16
   1ba98:	d1 1f       	adc	r29, r17
   1ba9a:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba9c:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba9e:	88 81       	ld	r24, Y
   1baa0:	99 81       	ldd	r25, Y+1	; 0x01
   1baa2:	51 dd       	rcall	.-1374   	; 0x1b546 <lif_del_file>
   1baa4:	5a c0       	rjmp	.+180    	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1baa6:	96 01       	movw	r18, r12
   1baa8:	ae 01       	movw	r20, r28
   1baaa:	4f 5f       	subi	r20, 0xFF	; 255
   1baac:	5f 4f       	sbci	r21, 0xFF	; 255
   1baae:	68 ed       	ldi	r22, 0xD8	; 216
   1bab0:	7b e0       	ldi	r23, 0x0B	; 11
   1bab2:	c7 01       	movw	r24, r14
   1bab4:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1bab8:	89 2b       	or	r24, r25
   1baba:	49 f0       	breq	.+18     	; 0x1bace <lif_tests+0x250>
    {
        lif_dir(argv[ind]);
   1babc:	cc 0f       	add	r28, r28
   1babe:	dd 1f       	adc	r29, r29
   1bac0:	c0 0f       	add	r28, r16
   1bac2:	d1 1f       	adc	r29, r17
   1bac4:	88 81       	ld	r24, Y
   1bac6:	99 81       	ldd	r25, Y+1	; 0x01
   1bac8:	0e 94 a1 cf 	call	0x19f42	; 0x19f42 <lif_dir>
   1bacc:	46 c0       	rjmp	.+140    	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bace:	96 01       	movw	r18, r12
   1bad0:	a5 01       	movw	r20, r10
   1bad2:	6c ea       	ldi	r22, 0xAC	; 172
   1bad4:	76 e1       	ldi	r23, 0x16	; 22
   1bad6:	c7 01       	movw	r24, r14
   1bad8:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1badc:	89 2b       	or	r24, r25
   1bade:	71 f0       	breq	.+28     	; 0x1bafc <lif_tests+0x27e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bae0:	ce 01       	movw	r24, r28
   1bae2:	88 0f       	add	r24, r24
   1bae4:	99 1f       	adc	r25, r25
   1bae6:	e8 01       	movw	r28, r16
   1bae8:	c8 0f       	add	r28, r24
   1baea:	d9 1f       	adc	r29, r25
   1baec:	4c 81       	ldd	r20, Y+4	; 0x04
   1baee:	5d 81       	ldd	r21, Y+5	; 0x05
   1baf0:	6a 81       	ldd	r22, Y+2	; 0x02
   1baf2:	7b 81       	ldd	r23, Y+3	; 0x03
   1baf4:	88 81       	ld	r24, Y
   1baf6:	99 81       	ldd	r25, Y+1	; 0x01
   1baf8:	65 da       	rcall	.-2870   	; 0x1afc4 <lif_extract_lif_as_lif>
   1bafa:	2f c0       	rjmp	.+94     	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bafc:	96 01       	movw	r18, r12
   1bafe:	a5 01       	movw	r20, r10
   1bb00:	67 eb       	ldi	r22, 0xB7	; 183
   1bb02:	76 e1       	ldi	r23, 0x16	; 22
   1bb04:	c7 01       	movw	r24, r14
   1bb06:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1bb0a:	89 2b       	or	r24, r25
   1bb0c:	79 f0       	breq	.+30     	; 0x1bb2c <lif_tests+0x2ae>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bb0e:	ce 01       	movw	r24, r28
   1bb10:	88 0f       	add	r24, r24
   1bb12:	99 1f       	adc	r25, r25
   1bb14:	e8 01       	movw	r28, r16
   1bb16:	c8 0f       	add	r28, r24
   1bb18:	d9 1f       	adc	r29, r25
   1bb1a:	4c 81       	ldd	r20, Y+4	; 0x04
   1bb1c:	5d 81       	ldd	r21, Y+5	; 0x05
   1bb1e:	6a 81       	ldd	r22, Y+2	; 0x02
   1bb20:	7b 81       	ldd	r23, Y+3	; 0x03
   1bb22:	88 81       	ld	r24, Y
   1bb24:	99 81       	ldd	r25, Y+1	; 0x01
   1bb26:	0e 94 33 d5 	call	0x1aa66	; 0x1aa66 <lif_extract_e010_as_ascii>
   1bb2a:	17 c0       	rjmp	.+46     	; 0x1bb5a <lif_tests+0x2dc>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bb2c:	96 01       	movw	r18, r12
   1bb2e:	a5 01       	movw	r20, r10
   1bb30:	65 ee       	ldi	r22, 0xE5	; 229
   1bb32:	7b e0       	ldi	r23, 0x0B	; 11
   1bb34:	c7 01       	movw	r24, r14
   1bb36:	0e 94 79 30 	call	0x60f2	; 0x60f2 <MATCHARGS>
   1bb3a:	89 2b       	or	r24, r25
   1bb3c:	09 f4       	brne	.+2      	; 0x1bb40 <lif_tests+0x2c2>
   1bb3e:	a7 ce       	rjmp	.-690    	; 0x1b88e <lif_tests+0x10>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bb40:	ce 01       	movw	r24, r28
   1bb42:	88 0f       	add	r24, r24
   1bb44:	99 1f       	adc	r25, r25
   1bb46:	e8 01       	movw	r28, r16
   1bb48:	c8 0f       	add	r28, r24
   1bb4a:	d9 1f       	adc	r29, r25
   1bb4c:	4c 81       	ldd	r20, Y+4	; 0x04
   1bb4e:	5d 81       	ldd	r21, Y+5	; 0x05
   1bb50:	6a 81       	ldd	r22, Y+2	; 0x02
   1bb52:	7b 81       	ldd	r23, Y+3	; 0x03
   1bb54:	88 81       	ld	r24, Y
   1bb56:	99 81       	ldd	r25, Y+1	; 0x01
   1bb58:	8c dd       	rcall	.-1256   	; 0x1b672 <lif_rename_file>
        return(1);
   1bb5a:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bb5c:	90 e0       	ldi	r25, 0x00	; 0
   1bb5e:	cd b7       	in	r28, 0x3d	; 61
   1bb60:	de b7       	in	r29, 0x3e	; 62
   1bb62:	25 96       	adiw	r28, 0x05	; 5
   1bb64:	ec e0       	ldi	r30, 0x0C	; 12
   1bb66:	09 c6       	rjmp	.+3090   	; 0x1c77a <__epilogue_restores__+0xc>

0001bb68 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1bb68:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <lcd_display_time>
   1bb6c:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <lcd_display_time+0x1>
   1bb70:	01 96       	adiw	r24, 0x01	; 1
   1bb72:	90 93 f2 1a 	sts	0x1AF2, r25	; 0x801af2 <lcd_display_time+0x1>
   1bb76:	80 93 f1 1a 	sts	0x1AF1, r24	; 0x801af1 <lcd_display_time>
   1bb7a:	08 95       	ret

0001bb7c <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1bb7c:	00 d0       	rcall	.+0      	; 0x1bb7e <copyright+0x2>
   1bb7e:	00 d0       	rcall	.+0      	; 0x1bb80 <copyright+0x4>
   1bb80:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1bb82:	81 ed       	ldi	r24, 0xD1	; 209
   1bb84:	97 e4       	ldi	r25, 0x47	; 71
   1bb86:	a0 e0       	ldi	r26, 0x00	; 0
   1bb88:	ed b7       	in	r30, 0x3d	; 61
   1bb8a:	fe b7       	in	r31, 0x3e	; 62
   1bb8c:	81 83       	std	Z+1, r24	; 0x01
   1bb8e:	92 83       	std	Z+2, r25	; 0x02
   1bb90:	a3 83       	std	Z+3, r26	; 0x03
   1bb92:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bb96:	82 eb       	ldi	r24, 0xB2	; 178
   1bb98:	97 e4       	ldi	r25, 0x47	; 71
   1bb9a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb9c:	ed b7       	in	r30, 0x3d	; 61
   1bb9e:	fe b7       	in	r31, 0x3e	; 62
   1bba0:	81 83       	std	Z+1, r24	; 0x01
   1bba2:	92 83       	std	Z+2, r25	; 0x02
   1bba4:	a3 83       	std	Z+3, r26	; 0x03
   1bba6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1bbaa:	85 e9       	ldi	r24, 0x95	; 149
   1bbac:	97 e4       	ldi	r25, 0x47	; 71
   1bbae:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb0:	ed b7       	in	r30, 0x3d	; 61
   1bbb2:	fe b7       	in	r31, 0x3e	; 62
   1bbb4:	81 83       	std	Z+1, r24	; 0x01
   1bbb6:	92 83       	std	Z+2, r25	; 0x02
   1bbb8:	a3 83       	std	Z+3, r26	; 0x03
   1bbba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf(" GNU version 3\n");
   1bbbe:	85 e8       	ldi	r24, 0x85	; 133
   1bbc0:	97 e4       	ldi	r25, 0x47	; 71
   1bbc2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbc4:	ed b7       	in	r30, 0x3d	; 61
   1bbc6:	fe b7       	in	r31, 0x3e	; 62
   1bbc8:	81 83       	std	Z+1, r24	; 0x01
   1bbca:	92 83       	std	Z+2, r25	; 0x02
   1bbcc:	a3 83       	std	Z+3, r26	; 0x03
   1bbce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bbd2:	8e e5       	ldi	r24, 0x5E	; 94
   1bbd4:	97 e4       	ldi	r25, 0x47	; 71
   1bbd6:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd8:	ed b7       	in	r30, 0x3d	; 61
   1bbda:	fe b7       	in	r31, 0x3e	; 62
   1bbdc:	81 83       	std	Z+1, r24	; 0x01
   1bbde:	92 83       	std	Z+2, r25	; 0x02
   1bbe0:	a3 83       	std	Z+3, r26	; 0x03
   1bbe2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bbe6:	8f eb       	ldi	r24, 0xBF	; 191
   1bbe8:	96 e1       	ldi	r25, 0x16	; 22
   1bbea:	ed b7       	in	r30, 0x3d	; 61
   1bbec:	fe b7       	in	r31, 0x3e	; 62
   1bbee:	95 83       	std	Z+5, r25	; 0x05
   1bbf0:	84 83       	std	Z+4, r24	; 0x04
   1bbf2:	84 e4       	ldi	r24, 0x44	; 68
   1bbf4:	97 e4       	ldi	r25, 0x47	; 71
   1bbf6:	a0 e0       	ldi	r26, 0x00	; 0
   1bbf8:	81 83       	std	Z+1, r24	; 0x01
   1bbfa:	92 83       	std	Z+2, r25	; 0x02
   1bbfc:	a3 83       	std	Z+3, r26	; 0x03
   1bbfe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bc02:	83 ee       	ldi	r24, 0xE3	; 227
   1bc04:	96 e1       	ldi	r25, 0x16	; 22
   1bc06:	ed b7       	in	r30, 0x3d	; 61
   1bc08:	fe b7       	in	r31, 0x3e	; 62
   1bc0a:	95 83       	std	Z+5, r25	; 0x05
   1bc0c:	84 83       	std	Z+4, r24	; 0x04
   1bc0e:	8a e2       	ldi	r24, 0x2A	; 42
   1bc10:	97 e4       	ldi	r25, 0x47	; 71
   1bc12:	a0 e0       	ldi	r26, 0x00	; 0
   1bc14:	81 83       	std	Z+1, r24	; 0x01
   1bc16:	92 83       	std	Z+2, r25	; 0x02
   1bc18:	a3 83       	std	Z+3, r26	; 0x03
   1bc1a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("\n");
   1bc1e:	88 e2       	ldi	r24, 0x28	; 40
   1bc20:	97 e4       	ldi	r25, 0x47	; 71
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	92 83       	std	Z+2, r25	; 0x02
   1bc2c:	a3 83       	std	Z+3, r26	; 0x03
   1bc2e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
}
   1bc32:	0f 90       	pop	r0
   1bc34:	0f 90       	pop	r0
   1bc36:	0f 90       	pop	r0
   1bc38:	0f 90       	pop	r0
   1bc3a:	0f 90       	pop	r0
   1bc3c:	08 95       	ret

0001bc3e <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bc3e:	a1 e1       	ldi	r26, 0x11	; 17
   1bc40:	b0 e0       	ldi	r27, 0x00	; 0
   1bc42:	e4 e2       	ldi	r30, 0x24	; 36
   1bc44:	fe ed       	ldi	r31, 0xDE	; 222
   1bc46:	83 c5       	rjmp	.+2822   	; 0x1c74e <__prologue_saves__+0x18>
   1bc48:	ec 01       	movw	r28, r24
   1bc4a:	7b 01       	movw	r14, r22
   1bc4c:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1bc4e:	60 e0       	ldi	r22, 0x00	; 0
   1bc50:	70 e0       	ldi	r23, 0x00	; 0
   1bc52:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <normalize>
    memset(buf,0,max);
   1bc56:	a8 01       	movw	r20, r16
   1bc58:	60 e0       	ldi	r22, 0x00	; 0
   1bc5a:	70 e0       	ldi	r23, 0x00	; 0
   1bc5c:	c7 01       	movw	r24, r14
   1bc5e:	0e 94 93 e7 	call	0x1cf26	; 0x1cf26 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bc62:	88 85       	ldd	r24, Y+8	; 0x08
   1bc64:	99 85       	ldd	r25, Y+9	; 0x09
   1bc66:	0e 94 9c 34 	call	0x6938	; 0x6938 <tm_mon_to_ascii>
   1bc6a:	28 81       	ld	r18, Y
   1bc6c:	39 81       	ldd	r19, Y+1	; 0x01
   1bc6e:	ed b7       	in	r30, 0x3d	; 61
   1bc70:	fe b7       	in	r31, 0x3e	; 62
   1bc72:	31 8b       	std	Z+17, r19	; 0x11
   1bc74:	20 8b       	std	Z+16, r18	; 0x10
   1bc76:	2a 81       	ldd	r18, Y+2	; 0x02
   1bc78:	3b 81       	ldd	r19, Y+3	; 0x03
   1bc7a:	37 87       	std	Z+15, r19	; 0x0f
   1bc7c:	26 87       	std	Z+14, r18	; 0x0e
   1bc7e:	2c 81       	ldd	r18, Y+4	; 0x04
   1bc80:	3d 81       	ldd	r19, Y+5	; 0x05
   1bc82:	35 87       	std	Z+13, r19	; 0x0d
   1bc84:	24 87       	std	Z+12, r18	; 0x0c
   1bc86:	2e 81       	ldd	r18, Y+6	; 0x06
   1bc88:	3f 81       	ldd	r19, Y+7	; 0x07
   1bc8a:	33 87       	std	Z+11, r19	; 0x0b
   1bc8c:	22 87       	std	Z+10, r18	; 0x0a
   1bc8e:	91 87       	std	Z+9, r25	; 0x09
   1bc90:	80 87       	std	Z+8, r24	; 0x08
   1bc92:	82 e1       	ldi	r24, 0x12	; 18
   1bc94:	97 e4       	ldi	r25, 0x47	; 71
   1bc96:	a0 e0       	ldi	r26, 0x00	; 0
   1bc98:	85 83       	std	Z+5, r24	; 0x05
   1bc9a:	96 83       	std	Z+6, r25	; 0x06
   1bc9c:	a7 83       	std	Z+7, r26	; 0x07
   1bc9e:	01 50       	subi	r16, 0x01	; 1
   1bca0:	11 09       	sbc	r17, r1
   1bca2:	14 83       	std	Z+4, r17	; 0x04
   1bca4:	03 83       	std	Z+3, r16	; 0x03
   1bca6:	f2 82       	std	Z+2, r15	; 0x02
   1bca8:	e1 82       	std	Z+1, r14	; 0x01
   1bcaa:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bcae:	c7 01       	movw	r24, r14
   1bcb0:	cd b7       	in	r28, 0x3d	; 61
   1bcb2:	de b7       	in	r29, 0x3e	; 62
   1bcb4:	61 96       	adiw	r28, 0x11	; 17
   1bcb6:	e6 e0       	ldi	r30, 0x06	; 6
   1bcb8:	66 c5       	rjmp	.+2764   	; 0x1c786 <__epilogue_restores__+0x18>

0001bcba <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bcba:	cf 93       	push	r28
   1bcbc:	00 d0       	rcall	.+0      	; 0x1bcbe <lcd_backlight+0x4>
   1bcbe:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bcc0:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bcc4:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bcc8:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bccc:	25 e0       	ldi	r18, 0x05	; 5
   1bcce:	40 ef       	ldi	r20, 0xF0	; 240
   1bcd0:	52 e0       	ldi	r21, 0x02	; 2
   1bcd2:	60 e0       	ldi	r22, 0x00	; 0
   1bcd4:	82 e7       	ldi	r24, 0x72	; 114
   1bcd6:	0e 94 2f 2b 	call	0x565e	; 0x565e <i2c_fn>
   1bcda:	c8 2f       	mov	r28, r24
   1bcdc:	81 11       	cpse	r24, r1
   1bcde:	0d c0       	rjmp	.+26     	; 0x1bcfa <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bce0:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bce4:	88 ef       	ldi	r24, 0xF8	; 248
   1bce6:	96 e4       	ldi	r25, 0x46	; 70
   1bce8:	a0 e0       	ldi	r26, 0x00	; 0
   1bcea:	ed b7       	in	r30, 0x3d	; 61
   1bcec:	fe b7       	in	r31, 0x3e	; 62
   1bcee:	81 83       	std	Z+1, r24	; 0x01
   1bcf0:	92 83       	std	Z+2, r25	; 0x02
   1bcf2:	a3 83       	std	Z+3, r26	; 0x03
   1bcf4:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1bcf8:	01 c0       	rjmp	.+2      	; 0x1bcfc <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bcfa:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bcfc:	8c 2f       	mov	r24, r28
   1bcfe:	0f 90       	pop	r0
   1bd00:	0f 90       	pop	r0
   1bd02:	0f 90       	pop	r0
   1bd04:	cf 91       	pop	r28
   1bd06:	08 95       	ret

0001bd08 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bd08:	cf 93       	push	r28
   1bd0a:	ad b7       	in	r26, 0x3d	; 61
   1bd0c:	be b7       	in	r27, 0x3e	; 62
   1bd0e:	17 97       	sbiw	r26, 0x07	; 7
   1bd10:	0f b6       	in	r0, 0x3f	; 63
   1bd12:	f8 94       	cli
   1bd14:	be bf       	out	0x3e, r27	; 62
   1bd16:	0f be       	out	0x3f, r0	; 63
   1bd18:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bd1a:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bd1c:	8a ed       	ldi	r24, 0xDA	; 218
   1bd1e:	96 e4       	ldi	r25, 0x46	; 70
   1bd20:	a0 e0       	ldi	r26, 0x00	; 0
   1bd22:	ed b7       	in	r30, 0x3d	; 61
   1bd24:	fe b7       	in	r31, 0x3e	; 62
   1bd26:	81 83       	std	Z+1, r24	; 0x01
   1bd28:	92 83       	std	Z+2, r25	; 0x02
   1bd2a:	a3 83       	std	Z+3, r26	; 0x03
   1bd2c:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bd30:	61 e0       	ldi	r22, 0x01	; 1
   1bd32:	70 e0       	ldi	r23, 0x00	; 0
   1bd34:	84 eb       	ldi	r24, 0xB4	; 180
   1bd36:	9d ed       	ldi	r25, 0xDD	; 221
   1bd38:	0e 94 c6 32 	call	0x658c	; 0x658c <set_timers>
   1bd3c:	01 96       	adiw	r24, 0x01	; 1
   1bd3e:	51 f4       	brne	.+20     	; 0x1bd54 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bd40:	84 ec       	ldi	r24, 0xC4	; 196
   1bd42:	96 e4       	ldi	r25, 0x46	; 70
   1bd44:	a0 e0       	ldi	r26, 0x00	; 0
   1bd46:	ed b7       	in	r30, 0x3d	; 61
   1bd48:	fe b7       	in	r31, 0x3e	; 62
   1bd4a:	81 83       	std	Z+1, r24	; 0x01
   1bd4c:	92 83       	std	Z+2, r25	; 0x02
   1bd4e:	a3 83       	std	Z+3, r26	; 0x03
   1bd50:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

	i2c_init(100000);
   1bd54:	60 ea       	ldi	r22, 0xA0	; 160
   1bd56:	76 e8       	ldi	r23, 0x86	; 134
   1bd58:	81 e0       	ldi	r24, 0x01	; 1
   1bd5a:	90 e0       	ldi	r25, 0x00	; 0
   1bd5c:	0e 94 36 2a 	call	0x546c	; 0x546c <i2c_init>

	i2c_task_init();
   1bd60:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_init>

	cli();
   1bd64:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bd66:	87 e0       	ldi	r24, 0x07	; 7
   1bd68:	97 e1       	ldi	r25, 0x17	; 23
   1bd6a:	ed b7       	in	r30, 0x3d	; 61
   1bd6c:	fe b7       	in	r31, 0x3e	; 62
   1bd6e:	97 83       	std	Z+7, r25	; 0x07
   1bd70:	86 83       	std	Z+6, r24	; 0x06
   1bd72:	8e eb       	ldi	r24, 0xBE	; 190
   1bd74:	96 e4       	ldi	r25, 0x46	; 70
   1bd76:	a0 e0       	ldi	r26, 0x00	; 0
   1bd78:	83 83       	std	Z+3, r24	; 0x03
   1bd7a:	94 83       	std	Z+4, r25	; 0x04
   1bd7c:	a5 83       	std	Z+5, r26	; 0x05
   1bd7e:	8c e0       	ldi	r24, 0x0C	; 12
   1bd80:	93 e0       	ldi	r25, 0x03	; 3
   1bd82:	92 83       	std	Z+2, r25	; 0x02
   1bd84:	81 83       	std	Z+1, r24	; 0x01
   1bd86:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bd8a:	83 e1       	ldi	r24, 0x13	; 19
   1bd8c:	97 e1       	ldi	r25, 0x17	; 23
   1bd8e:	ed b7       	in	r30, 0x3d	; 61
   1bd90:	fe b7       	in	r31, 0x3e	; 62
   1bd92:	97 83       	std	Z+7, r25	; 0x07
   1bd94:	86 83       	std	Z+6, r24	; 0x06
   1bd96:	88 eb       	ldi	r24, 0xB8	; 184
   1bd98:	96 e4       	ldi	r25, 0x46	; 70
   1bd9a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd9c:	83 83       	std	Z+3, r24	; 0x03
   1bd9e:	94 83       	std	Z+4, r25	; 0x04
   1bda0:	a5 83       	std	Z+5, r26	; 0x05
   1bda2:	85 ef       	ldi	r24, 0xF5	; 245
   1bda4:	92 e0       	ldi	r25, 0x02	; 2
   1bda6:	92 83       	std	Z+2, r25	; 0x02
   1bda8:	81 83       	std	Z+1, r24	; 0x01
   1bdaa:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bdae:	22 e0       	ldi	r18, 0x02	; 2
   1bdb0:	41 e2       	ldi	r20, 0x21	; 33
   1bdb2:	53 e0       	ldi	r21, 0x03	; 3
   1bdb4:	60 e0       	ldi	r22, 0x00	; 0
   1bdb6:	82 e7       	ldi	r24, 0x72	; 114
   1bdb8:	0e 94 0c 2a 	call	0x5418	; 0x5418 <i2c_task_op_add>
   1bdbc:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <i2c_task_op+0x1>
   1bdc0:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bdc4:	20 e1       	ldi	r18, 0x10	; 16
   1bdc6:	4c e0       	ldi	r20, 0x0C	; 12
   1bdc8:	53 e0       	ldi	r21, 0x03	; 3
   1bdca:	60 e0       	ldi	r22, 0x00	; 0
   1bdcc:	82 e7       	ldi	r24, 0x72	; 114
   1bdce:	0e 94 0c 2a 	call	0x5418	; 0x5418 <i2c_task_op_add>
   1bdd2:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <i2c_task_op+0x3>
   1bdd6:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bdda:	22 e0       	ldi	r18, 0x02	; 2
   1bddc:	4a e0       	ldi	r20, 0x0A	; 10
   1bdde:	53 e0       	ldi	r21, 0x03	; 3
   1bde0:	60 e0       	ldi	r22, 0x00	; 0
   1bde2:	82 e7       	ldi	r24, 0x72	; 114
   1bde4:	0e 94 0c 2a 	call	0x5418	; 0x5418 <i2c_task_op_add>
   1bde8:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <i2c_task_op+0x5>
   1bdec:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bdf0:	20 e1       	ldi	r18, 0x10	; 16
   1bdf2:	45 ef       	ldi	r20, 0xF5	; 245
   1bdf4:	52 e0       	ldi	r21, 0x02	; 2
   1bdf6:	60 e0       	ldi	r22, 0x00	; 0
   1bdf8:	82 e7       	ldi	r24, 0x72	; 114
   1bdfa:	0e 94 0c 2a 	call	0x5418	; 0x5418 <i2c_task_op_add>
   1bdfe:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x7>
   1be02:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op+0x6>

	SREG = sreg;
   1be06:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1be08:	0e 94 cc 2a 	call	0x5598	; 0x5598 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1be0c:	68 ee       	ldi	r22, 0xE8	; 232
   1be0e:	73 e0       	ldi	r23, 0x03	; 3
   1be10:	80 e0       	ldi	r24, 0x00	; 0
   1be12:	90 e0       	ldi	r25, 0x00	; 0
   1be14:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1be18:	0e 94 ad 2a 	call	0x555a	; 0x555a <i2c_task_done>
   1be1c:	81 11       	cpse	r24, r1
   1be1e:	0c c0       	rjmp	.+24     	; 0x1be38 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1be20:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1be24:	8e e9       	ldi	r24, 0x9E	; 158
   1be26:	96 e4       	ldi	r25, 0x46	; 70
   1be28:	a0 e0       	ldi	r26, 0x00	; 0
   1be2a:	ed b7       	in	r30, 0x3d	; 61
   1be2c:	fe b7       	in	r31, 0x3e	; 62
   1be2e:	81 83       	std	Z+1, r24	; 0x01
   1be30:	92 83       	std	Z+2, r25	; 0x02
   1be32:	a3 83       	std	Z+3, r26	; 0x03
   1be34:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
	}

    sep();
   1be38:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
}
   1be3c:	ad b7       	in	r26, 0x3d	; 61
   1be3e:	be b7       	in	r27, 0x3e	; 62
   1be40:	17 96       	adiw	r26, 0x07	; 7
   1be42:	0f b6       	in	r0, 0x3f	; 63
   1be44:	f8 94       	cli
   1be46:	be bf       	out	0x3e, r27	; 62
   1be48:	0f be       	out	0x3f, r0	; 63
   1be4a:	ad bf       	out	0x3d, r26	; 61
   1be4c:	cf 91       	pop	r28
   1be4e:	08 95       	ret

0001be50 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1be50:	af e2       	ldi	r26, 0x2F	; 47
   1be52:	b0 e0       	ldi	r27, 0x00	; 0
   1be54:	ed e2       	ldi	r30, 0x2D	; 45
   1be56:	ff ed       	ldi	r31, 0xDF	; 223
   1be58:	7d c4       	rjmp	.+2298   	; 0x1c754 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1be5a:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1be5c:	f8 94       	cli
	if(!mmc_ins_status())
   1be5e:	0e 94 36 6e 	call	0xdc6c	; 0xdc6c <mmc_ins_status>
   1be62:	89 2b       	or	r24, r25
   1be64:	49 f4       	brne	.+18     	; 0x1be78 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1be66:	80 e2       	ldi	r24, 0x20	; 32
   1be68:	97 e1       	ldi	r25, 0x17	; 23
   1be6a:	ed b7       	in	r30, 0x3d	; 61
   1be6c:	fe b7       	in	r31, 0x3e	; 62
   1be6e:	97 83       	std	Z+7, r25	; 0x07
   1be70:	86 83       	std	Z+6, r24	; 0x06
   1be72:	88 e9       	ldi	r24, 0x98	; 152
   1be74:	96 e4       	ldi	r25, 0x46	; 70
   1be76:	17 c0       	rjmp	.+46     	; 0x1bea6 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1be78:	be 01       	movw	r22, r28
   1be7a:	68 5d       	subi	r22, 0xD8	; 216
   1be7c:	7f 4f       	sbci	r23, 0xFF	; 255
   1be7e:	80 e0       	ldi	r24, 0x00	; 0
   1be80:	90 e0       	ldi	r25, 0x00	; 0
   1be82:	0e 94 d6 31 	call	0x63ac	; 0x63ac <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1be86:	ce 01       	movw	r24, r28
   1be88:	88 96       	adiw	r24, 0x28	; 40
   1be8a:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <gmtime>
   1be8e:	4f e1       	ldi	r20, 0x1F	; 31
   1be90:	50 e0       	ldi	r21, 0x00	; 0
   1be92:	be 01       	movw	r22, r28
   1be94:	68 5f       	subi	r22, 0xF8	; 248
   1be96:	7f 4f       	sbci	r23, 0xFF	; 255
   1be98:	d2 de       	rcall	.-604    	; 0x1bc3e <lcd_time>
   1be9a:	ed b7       	in	r30, 0x3d	; 61
   1be9c:	fe b7       	in	r31, 0x3e	; 62
   1be9e:	97 83       	std	Z+7, r25	; 0x07
   1bea0:	86 83       	std	Z+6, r24	; 0x06
   1bea2:	82 e9       	ldi	r24, 0x92	; 146
   1bea4:	96 e4       	ldi	r25, 0x46	; 70
   1bea6:	a0 e0       	ldi	r26, 0x00	; 0
   1bea8:	83 83       	std	Z+3, r24	; 0x03
   1beaa:	94 83       	std	Z+4, r25	; 0x04
   1beac:	a5 83       	std	Z+5, r26	; 0x05
   1beae:	85 ef       	ldi	r24, 0xF5	; 245
   1beb0:	92 e0       	ldi	r25, 0x02	; 2
   1beb2:	92 83       	std	Z+2, r25	; 0x02
   1beb4:	81 83       	std	Z+1, r24	; 0x01
   1beb6:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1beba:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bebc:	0e 94 cc 2a 	call	0x5598	; 0x5598 <i2c_task_run>
}
   1bec0:	af 96       	adiw	r28, 0x2f	; 47
   1bec2:	e3 e0       	ldi	r30, 0x03	; 3
   1bec4:	63 c4       	rjmp	.+2246   	; 0x1c78c <__epilogue_restores__+0x1e>

0001bec6 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bec6:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bec8:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1beca:	20 91 f1 1a 	lds	r18, 0x1AF1	; 0x801af1 <lcd_display_time>
   1bece:	30 91 f2 1a 	lds	r19, 0x1AF2	; 0x801af2 <lcd_display_time+0x1>
   1bed2:	25 36       	cpi	r18, 0x65	; 101
   1bed4:	31 05       	cpc	r19, r1
   1bed6:	3c f0       	brlt	.+14     	; 0x1bee6 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bed8:	10 92 f2 1a 	sts	0x1AF2, r1	; 0x801af2 <lcd_display_time+0x1>
   1bedc:	10 92 f1 1a 	sts	0x1AF1, r1	; 0x801af1 <lcd_display_time>
		SREG = sreg;
   1bee0:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bee2:	b6 cf       	rjmp	.-148    	; 0x1be50 <i2c_lcd_task>
		return;
   1bee4:	08 95       	ret
	}
	SREG = sreg;
   1bee6:	8f bf       	out	0x3f, r24	; 63
   1bee8:	08 95       	ret

0001beea <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1beea:	00 d0       	rcall	.+0      	; 0x1beec <help+0x2>
   1beec:	1f 92       	push	r1

    copyright();
   1beee:	46 de       	rcall	.-884    	; 0x1bb7c <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bef0:	80 e0       	ldi	r24, 0x00	; 0
   1bef2:	90 e0       	ldi	r25, 0x00	; 0
   1bef4:	0e 94 3b 72 	call	0xe476	; 0xe476 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bef8:	80 e0       	ldi	r24, 0x00	; 0
   1befa:	90 e0       	ldi	r25, 0x00	; 0
   1befc:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bf00:	80 e0       	ldi	r24, 0x00	; 0
   1bf02:	90 e0       	ldi	r25, 0x00	; 0
   1bf04:	0e 94 09 be 	call	0x17c12	; 0x17c12 <lif_help>
#endif

    gpib_help(0);
   1bf08:	80 e0       	ldi	r24, 0x00	; 0
   1bf0a:	90 e0       	ldi	r25, 0x00	; 0
   1bf0c:	0e 94 f0 90 	call	0x121e0	; 0x121e0 <gpib_help>

    printf(
   1bf10:	8a ee       	ldi	r24, 0xEA	; 234
   1bf12:	95 e4       	ldi	r25, 0x45	; 69
   1bf14:	a0 e0       	ldi	r26, 0x00	; 0
   1bf16:	ed b7       	in	r30, 0x3d	; 61
   1bf18:	fe b7       	in	r31, 0x3e	; 62
   1bf1a:	81 83       	std	Z+1, r24	; 0x01
   1bf1c:	92 83       	std	Z+2, r25	; 0x02
   1bf1e:	a3 83       	std	Z+3, r26	; 0x03
   1bf20:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
        "   - set date\n"
        "time\n"
        "   - display current time\n"
        "\n"
        );
}
   1bf24:	0f 90       	pop	r0
   1bf26:	0f 90       	pop	r0
   1bf28:	0f 90       	pop	r0
   1bf2a:	08 95       	ret

0001bf2c <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bf2c:	6f 92       	push	r6
   1bf2e:	7f 92       	push	r7
   1bf30:	8f 92       	push	r8
   1bf32:	cf 92       	push	r12
   1bf34:	df 92       	push	r13
   1bf36:	ef 92       	push	r14
   1bf38:	ff 92       	push	r15
   1bf3a:	0f 93       	push	r16
   1bf3c:	1f 93       	push	r17
   1bf3e:	cf 93       	push	r28
   1bf40:	df 93       	push	r29
   1bf42:	cd b7       	in	r28, 0x3d	; 61
   1bf44:	de b7       	in	r29, 0x3e	; 62
   1bf46:	cb 56       	subi	r28, 0x6B	; 107
   1bf48:	d1 40       	sbci	r29, 0x01	; 1
   1bf4a:	0f b6       	in	r0, 0x3f	; 63
   1bf4c:	f8 94       	cli
   1bf4e:	de bf       	out	0x3e, r29	; 62
   1bf50:	0f be       	out	0x3f, r0	; 63
   1bf52:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bf54:	87 ee       	ldi	r24, 0xE7	; 231
   1bf56:	95 e4       	ldi	r25, 0x45	; 69
   1bf58:	a0 e0       	ldi	r26, 0x00	; 0
   1bf5a:	ed b7       	in	r30, 0x3d	; 61
   1bf5c:	fe b7       	in	r31, 0x3e	; 62
   1bf5e:	81 83       	std	Z+1, r24	; 0x01
   1bf60:	92 83       	std	Z+2, r25	; 0x02
   1bf62:	a3 83       	std	Z+3, r26	; 0x03
   1bf64:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

	memset(line,0,sizeof(line)-1);
   1bf68:	8e 01       	movw	r16, r28
   1bf6a:	0a 5f       	subi	r16, 0xFA	; 250
   1bf6c:	1f 4f       	sbci	r17, 0xFF	; 255
   1bf6e:	8f ef       	ldi	r24, 0xFF	; 255
   1bf70:	f8 01       	movw	r30, r16
   1bf72:	11 92       	st	Z+, r1
   1bf74:	8a 95       	dec	r24
   1bf76:	e9 f7       	brne	.-6      	; 0x1bf72 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1bf78:	40 91 c6 1d 	lds	r20, 0x1DC6	; 0x801dc6 <__iob>
   1bf7c:	50 91 c7 1d 	lds	r21, 0x1DC7	; 0x801dc7 <__iob+0x1>
   1bf80:	6e ef       	ldi	r22, 0xFE	; 254
   1bf82:	70 e0       	ldi	r23, 0x00	; 0
   1bf84:	c8 01       	movw	r24, r16
   1bf86:	0e 94 68 75 	call	0xead0	; 0xead0 <fgets>
    trim_tail(line);
   1bf8a:	c8 01       	movw	r24, r16
   1bf8c:	0e 94 37 30 	call	0x606e	; 0x606e <trim_tail>
    argc = split_args(line,argv,50);
   1bf90:	42 e3       	ldi	r20, 0x32	; 50
   1bf92:	50 e0       	ldi	r21, 0x00	; 0
   1bf94:	be 01       	movw	r22, r28
   1bf96:	6a 5f       	subi	r22, 0xFA	; 250
   1bf98:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf9a:	c8 01       	movw	r24, r16
   1bf9c:	0e 94 bd 30 	call	0x617a	; 0x617a <split_args>
   1bfa0:	7c 01       	movw	r14, r24

	if(debug_input)
   1bfa2:	80 91 f3 1a 	lds	r24, 0x1AF3	; 0x801af3 <debug_input>
   1bfa6:	81 11       	cpse	r24, r1
   1bfa8:	0a c0       	rjmp	.+20     	; 0x1bfbe <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bfaa:	ca 5f       	subi	r28, 0xFA	; 250
   1bfac:	de 4f       	sbci	r29, 0xFE	; 254
   1bfae:	08 81       	ld	r16, Y
   1bfb0:	19 81       	ldd	r17, Y+1	; 0x01
   1bfb2:	c6 50       	subi	r28, 0x06	; 6
   1bfb4:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bfb6:	01 15       	cp	r16, r1
   1bfb8:	11 05       	cpc	r17, r1
   1bfba:	51 f5       	brne	.+84     	; 0x1c010 <user_task.part.1+0xe4>
   1bfbc:	b6 c0       	rjmp	.+364    	; 0x1c12a <user_task.part.1+0x1fe>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1bfbe:	ed b7       	in	r30, 0x3d	; 61
   1bfc0:	fe b7       	in	r31, 0x3e	; 62
   1bfc2:	f5 82       	std	Z+5, r15	; 0x05
   1bfc4:	e4 82       	std	Z+4, r14	; 0x04
   1bfc6:	82 ed       	ldi	r24, 0xD2	; 210
   1bfc8:	95 e4       	ldi	r25, 0x45	; 69
   1bfca:	a0 e0       	ldi	r26, 0x00	; 0
   1bfcc:	81 83       	std	Z+1, r24	; 0x01
   1bfce:	92 83       	std	Z+2, r25	; 0x02
   1bfd0:	a3 83       	std	Z+3, r26	; 0x03
   1bfd2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1bfd6:	ce 01       	movw	r24, r28
   1bfd8:	8a 5f       	subi	r24, 0xFA	; 250
   1bfda:	9e 4f       	sbci	r25, 0xFE	; 254
   1bfdc:	6c 01       	movw	r12, r24
		for(i=0;i<argc;++i)
   1bfde:	00 e0       	ldi	r16, 0x00	; 0
   1bfe0:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1bfe2:	89 ec       	ldi	r24, 0xC9	; 201
   1bfe4:	95 e4       	ldi	r25, 0x45	; 69
   1bfe6:	3c 01       	movw	r6, r24
   1bfe8:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1bfea:	0e 15       	cp	r16, r14
   1bfec:	1f 05       	cpc	r17, r15
   1bfee:	ec f6       	brge	.-70     	; 0x1bfaa <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1bff0:	f6 01       	movw	r30, r12
   1bff2:	81 91       	ld	r24, Z+
   1bff4:	91 91       	ld	r25, Z+
   1bff6:	6f 01       	movw	r12, r30
   1bff8:	ed b7       	in	r30, 0x3d	; 61
   1bffa:	fe b7       	in	r31, 0x3e	; 62
   1bffc:	95 83       	std	Z+5, r25	; 0x05
   1bffe:	84 83       	std	Z+4, r24	; 0x04
   1c000:	61 82       	std	Z+1, r6	; 0x01
   1c002:	72 82       	std	Z+2, r7	; 0x02
   1c004:	83 82       	std	Z+3, r8	; 0x03
   1c006:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c00a:	0f 5f       	subi	r16, 0xFF	; 255
   1c00c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c00e:	ed cf       	rjmp	.-38     	; 0x1bfea <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c010:	1e 14       	cp	r1, r14
   1c012:	1f 04       	cpc	r1, r15
   1c014:	0c f0       	brlt	.+2      	; 0x1c018 <user_task.part.1+0xec>
   1c016:	89 c0       	rjmp	.+274    	; 0x1c12a <user_task.part.1+0x1fe>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c018:	65 e3       	ldi	r22, 0x35	; 53
   1c01a:	77 e1       	ldi	r23, 0x17	; 23
   1c01c:	c8 01       	movw	r24, r16
   1c01e:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c022:	89 2b       	or	r24, r25
   1c024:	d9 f0       	breq	.+54     	; 0x1c05c <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c026:	80 91 f3 1a 	lds	r24, 0x1AF3	; 0x801af3 <debug_input>
   1c02a:	91 e0       	ldi	r25, 0x01	; 1
   1c02c:	81 11       	cpse	r24, r1
   1c02e:	90 e0       	ldi	r25, 0x00	; 0
   1c030:	90 93 f3 1a 	sts	0x1AF3, r25	; 0x801af3 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c034:	88 23       	and	r24, r24
   1c036:	19 f0       	breq	.+6      	; 0x1c03e <user_task.part.1+0x112>
   1c038:	81 e3       	ldi	r24, 0x31	; 49
   1c03a:	97 e1       	ldi	r25, 0x17	; 23
   1c03c:	02 c0       	rjmp	.+4      	; 0x1c042 <user_task.part.1+0x116>
   1c03e:	8e e2       	ldi	r24, 0x2E	; 46
   1c040:	97 e1       	ldi	r25, 0x17	; 23
   1c042:	ed b7       	in	r30, 0x3d	; 61
   1c044:	fe b7       	in	r31, 0x3e	; 62
   1c046:	95 83       	std	Z+5, r25	; 0x05
   1c048:	84 83       	std	Z+4, r24	; 0x04
   1c04a:	84 eb       	ldi	r24, 0xB4	; 180
   1c04c:	95 e4       	ldi	r25, 0x45	; 69
   1c04e:	a0 e0       	ldi	r26, 0x00	; 0
   1c050:	81 83       	std	Z+1, r24	; 0x01
   1c052:	92 83       	std	Z+2, r25	; 0x02
   1c054:	a3 83       	std	Z+3, r26	; 0x03
   1c056:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1c05a:	67 c0       	rjmp	.+206    	; 0x1c12a <user_task.part.1+0x1fe>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c05c:	6b e3       	ldi	r22, 0x3B	; 59
   1c05e:	77 e1       	ldi	r23, 0x17	; 23
   1c060:	c8 01       	movw	r24, r16
   1c062:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c066:	89 2b       	or	r24, r25
   1c068:	f1 f0       	breq	.+60     	; 0x1c0a6 <user_task.part.1+0x17a>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1c06a:	c8 5f       	subi	r28, 0xF8	; 248
   1c06c:	de 4f       	sbci	r29, 0xFE	; 254
   1c06e:	e8 81       	ld	r30, Y
   1c070:	f9 81       	ldd	r31, Y+1	; 0x01
   1c072:	c8 50       	subi	r28, 0x08	; 8
   1c074:	d1 40       	sbci	r29, 0x01	; 1
   1c076:	80 81       	ld	r24, Z
   1c078:	8d 33       	cpi	r24, 0x3D	; 61
   1c07a:	19 f4       	brne	.+6      	; 0x1c082 <user_task.part.1+0x156>
            ++ind;
   1c07c:	82 e0       	ldi	r24, 0x02	; 2
   1c07e:	90 e0       	ldi	r25, 0x00	; 0
   1c080:	02 c0       	rjmp	.+4      	; 0x1c086 <user_task.part.1+0x15a>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c082:	81 e0       	ldi	r24, 0x01	; 1
   1c084:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c086:	88 0f       	add	r24, r24
   1c088:	99 1f       	adc	r25, r25
   1c08a:	e6 e0       	ldi	r30, 0x06	; 6
   1c08c:	f1 e0       	ldi	r31, 0x01	; 1
   1c08e:	ec 0f       	add	r30, r28
   1c090:	fd 1f       	adc	r31, r29
   1c092:	e8 0f       	add	r30, r24
   1c094:	f9 1f       	adc	r31, r25
   1c096:	80 81       	ld	r24, Z
   1c098:	91 81       	ldd	r25, Z+1	; 0x01
   1c09a:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <get_value>
		result = lcd_backlight(rgb);
   1c09e:	0d de       	rcall	.-998    	; 0x1bcba <lcd_backlight>
   1c0a0:	08 2f       	mov	r16, r24
   1c0a2:	10 e0       	ldi	r17, 0x00	; 0
   1c0a4:	44 c0       	rjmp	.+136    	; 0x1c12e <user_task.part.1+0x202>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c0a6:	65 e4       	ldi	r22, 0x45	; 69
   1c0a8:	77 e1       	ldi	r23, 0x17	; 23
   1c0aa:	c8 01       	movw	r24, r16
   1c0ac:	0e 94 51 30 	call	0x60a2	; 0x60a2 <MATCH>
   1c0b0:	89 2b       	or	r24, r25
   1c0b2:	19 f0       	breq	.+6      	; 0x1c0ba <user_task.part.1+0x18e>
    {
        PrintFree();
   1c0b4:	0e 94 33 25 	call	0x4a66	; 0x4a66 <PrintFree>
   1c0b8:	38 c0       	rjmp	.+112    	; 0x1c12a <user_task.part.1+0x1fe>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c0ba:	60 ee       	ldi	r22, 0xE0	; 224
   1c0bc:	7d e0       	ldi	r23, 0x0D	; 13
   1c0be:	c8 01       	movw	r24, r16
   1c0c0:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c0c4:	89 2b       	or	r24, r25
   1c0c6:	51 f0       	breq	.+20     	; 0x1c0dc <user_task.part.1+0x1b0>
    {
        cli();
   1c0c8:	f8 94       	cli
        uart_rx_flush(0);
   1c0ca:	80 e0       	ldi	r24, 0x00	; 0
   1c0cc:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <uart_rx_flush>
        cli();
   1c0d0:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c0d2:	82 e0       	ldi	r24, 0x02	; 2
   1c0d4:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c0d6:	e0 e0       	ldi	r30, 0x00	; 0
   1c0d8:	fc ef       	ldi	r31, 0xFC	; 252
   1c0da:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c0dc:	69 e4       	ldi	r22, 0x49	; 73
   1c0de:	77 e1       	ldi	r23, 0x17	; 23
   1c0e0:	c8 01       	movw	r24, r16
   1c0e2:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c0e6:	89 2b       	or	r24, r25
   1c0e8:	19 f0       	breq	.+6      	; 0x1c0f0 <user_task.part.1+0x1c4>
    {
        setdate();
   1c0ea:	0e 94 a0 39 	call	0x7340	; 0x7340 <setdate>
   1c0ee:	07 c0       	rjmp	.+14     	; 0x1c0fe <user_task.part.1+0x1d2>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c0f0:	61 e5       	ldi	r22, 0x51	; 81
   1c0f2:	77 e1       	ldi	r23, 0x17	; 23
   1c0f4:	c8 01       	movw	r24, r16
   1c0f6:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c0fa:	89 2b       	or	r24, r25
   1c0fc:	19 f0       	breq	.+6      	; 0x1c104 <user_task.part.1+0x1d8>
    {
        display_clock();
   1c0fe:	0e 94 bc 3b 	call	0x7778	; 0x7778 <display_clock>
   1c102:	13 c0       	rjmp	.+38     	; 0x1c12a <user_task.part.1+0x1fe>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c104:	6d e7       	ldi	r22, 0x7D	; 125
   1c106:	76 e1       	ldi	r23, 0x16	; 22
   1c108:	c8 01       	movw	r24, r16
   1c10a:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c10e:	89 2b       	or	r24, r25
    {
        help();
   1c110:	11 f0       	breq	.+4      	; 0x1c116 <user_task.part.1+0x1ea>
   1c112:	eb de       	rcall	.-554    	; 0x1beea <help>
   1c114:	0a c0       	rjmp	.+20     	; 0x1c12a <user_task.part.1+0x1fe>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c116:	63 e8       	ldi	r22, 0x83	; 131
   1c118:	76 e1       	ldi	r23, 0x16	; 22
   1c11a:	c8 01       	movw	r24, r16
   1c11c:	0e 94 65 30 	call	0x60ca	; 0x60ca <MATCHI>
   1c120:	89 2b       	or	r24, r25
   1c122:	b9 f7       	brne	.-18     	; 0x1c112 <user_task.part.1+0x1e6>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c124:	00 e0       	ldi	r16, 0x00	; 0
   1c126:	10 e0       	ldi	r17, 0x00	; 0
   1c128:	02 c0       	rjmp	.+4      	; 0x1c12e <user_task.part.1+0x202>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c12a:	01 e0       	ldi	r16, 0x01	; 1
   1c12c:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if(gpib_tests(argc,argv))
   1c12e:	be 01       	movw	r22, r28
   1c130:	6a 5f       	subi	r22, 0xFA	; 250
   1c132:	7e 4f       	sbci	r23, 0xFE	; 254
   1c134:	c7 01       	movw	r24, r14
   1c136:	0e 94 11 91 	call	0x12222	; 0x12222 <gpib_tests>
   1c13a:	89 2b       	or	r24, r25
   1c13c:	21 f0       	breq	.+8      	; 0x1c146 <user_task.part.1+0x21a>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1c13e:	0e 94 25 8c 	call	0x1184a	; 0x1184a <gpib_init_devices>
        result = 1;
   1c142:	01 e0       	ldi	r16, 0x01	; 1
   1c144:	10 e0       	ldi	r17, 0x00	; 0
    }

#ifdef POSIX_TESTS
    if(posix_tests(argc,argv))
   1c146:	be 01       	movw	r22, r28
   1c148:	6a 5f       	subi	r22, 0xFA	; 250
   1c14a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c14c:	c7 01       	movw	r24, r14
   1c14e:	0e 94 ee 80 	call	0x101dc	; 0x101dc <posix_tests>
   1c152:	89 2b       	or	r24, r25
   1c154:	11 f0       	breq	.+4      	; 0x1c15a <user_task.part.1+0x22e>
	{
        result = 1;
   1c156:	01 e0       	ldi	r16, 0x01	; 1
   1c158:	10 e0       	ldi	r17, 0x00	; 0
	}
#endif

#ifdef FATFS_TESTS
    if(fatfs_tests(argc,argv))
   1c15a:	be 01       	movw	r22, r28
   1c15c:	6a 5f       	subi	r22, 0xFA	; 250
   1c15e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c160:	c7 01       	movw	r24, r14
   1c162:	0e 94 6a 73 	call	0xe6d4	; 0xe6d4 <fatfs_tests>
   1c166:	89 2b       	or	r24, r25
   1c168:	11 f0       	breq	.+4      	; 0x1c16e <user_task.part.1+0x242>
	{
        result = 1;
   1c16a:	01 e0       	ldi	r16, 0x01	; 1
   1c16c:	10 e0       	ldi	r17, 0x00	; 0
	}
#endif

#ifdef LIF_SUPPORT
    if(lif_tests(argc,argv))
   1c16e:	be 01       	movw	r22, r28
   1c170:	6a 5f       	subi	r22, 0xFA	; 250
   1c172:	7e 4f       	sbci	r23, 0xFE	; 254
   1c174:	c7 01       	movw	r24, r14
   1c176:	83 db       	rcall	.-2298   	; 0x1b87e <lif_tests>
   1c178:	89 2b       	or	r24, r25
   1c17a:	11 f4       	brne	.+4      	; 0x1c180 <user_task.part.1+0x254>
	{
        result = 1;
	}
#endif
    if(result)
   1c17c:	01 2b       	or	r16, r17
   1c17e:	59 f0       	breq	.+22     	; 0x1c196 <user_task.part.1+0x26a>
        printf("OK\n");
   1c180:	80 eb       	ldi	r24, 0xB0	; 176
   1c182:	95 e4       	ldi	r25, 0x45	; 69
   1c184:	a0 e0       	ldi	r26, 0x00	; 0
   1c186:	ed b7       	in	r30, 0x3d	; 61
   1c188:	fe b7       	in	r31, 0x3e	; 62
   1c18a:	81 83       	std	Z+1, r24	; 0x01
   1c18c:	92 83       	std	Z+2, r25	; 0x02
   1c18e:	a3 83       	std	Z+3, r26	; 0x03
   1c190:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1c194:	29 c0       	rjmp	.+82     	; 0x1c1e8 <user_task.part.1+0x2bc>
    else
	{
        printf("Error: Argument count = %d\n", argc);
   1c196:	ed b7       	in	r30, 0x3d	; 61
   1c198:	fe b7       	in	r31, 0x3e	; 62
   1c19a:	f5 82       	std	Z+5, r15	; 0x05
   1c19c:	e4 82       	std	Z+4, r14	; 0x04
   1c19e:	84 e9       	ldi	r24, 0x94	; 148
   1c1a0:	95 e4       	ldi	r25, 0x45	; 69
   1c1a2:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a4:	81 83       	std	Z+1, r24	; 0x01
   1c1a6:	92 83       	std	Z+2, r25	; 0x02
   1c1a8:	a3 83       	std	Z+3, r26	; 0x03
   1c1aa:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
   1c1ae:	8e 01       	movw	r16, r28
   1c1b0:	0a 5f       	subi	r16, 0xFA	; 250
   1c1b2:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c1b4:	c1 2c       	mov	r12, r1
   1c1b6:	d1 2c       	mov	r13, r1
			printf("   [%s]\n", argv[i]);
   1c1b8:	8b e8       	ldi	r24, 0x8B	; 139
   1c1ba:	95 e4       	ldi	r25, 0x45	; 69
   1c1bc:	3c 01       	movw	r6, r24
   1c1be:	81 2c       	mov	r8, r1
    if(result)
        printf("OK\n");
    else
	{
        printf("Error: Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c1c0:	ce 14       	cp	r12, r14
   1c1c2:	df 04       	cpc	r13, r15
   1c1c4:	8c f4       	brge	.+34     	; 0x1c1e8 <user_task.part.1+0x2bc>
			printf("   [%s]\n", argv[i]);
   1c1c6:	f8 01       	movw	r30, r16
   1c1c8:	81 91       	ld	r24, Z+
   1c1ca:	91 91       	ld	r25, Z+
   1c1cc:	8f 01       	movw	r16, r30
   1c1ce:	ed b7       	in	r30, 0x3d	; 61
   1c1d0:	fe b7       	in	r31, 0x3e	; 62
   1c1d2:	95 83       	std	Z+5, r25	; 0x05
   1c1d4:	84 83       	std	Z+4, r24	; 0x04
   1c1d6:	61 82       	std	Z+1, r6	; 0x01
   1c1d8:	72 82       	std	Z+2, r7	; 0x02
   1c1da:	83 82       	std	Z+3, r8	; 0x03
   1c1dc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    if(result)
        printf("OK\n");
    else
	{
        printf("Error: Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c1e0:	ff ef       	ldi	r31, 0xFF	; 255
   1c1e2:	cf 1a       	sub	r12, r31
   1c1e4:	df 0a       	sbc	r13, r31
   1c1e6:	ec cf       	rjmp	.-40     	; 0x1c1c0 <user_task.part.1+0x294>
			printf("   [%s]\n", argv[i]);
	}
}
   1c1e8:	c5 59       	subi	r28, 0x95	; 149
   1c1ea:	de 4f       	sbci	r29, 0xFE	; 254
   1c1ec:	0f b6       	in	r0, 0x3f	; 63
   1c1ee:	f8 94       	cli
   1c1f0:	de bf       	out	0x3e, r29	; 62
   1c1f2:	0f be       	out	0x3f, r0	; 63
   1c1f4:	cd bf       	out	0x3d, r28	; 61
   1c1f6:	df 91       	pop	r29
   1c1f8:	cf 91       	pop	r28
   1c1fa:	1f 91       	pop	r17
   1c1fc:	0f 91       	pop	r16
   1c1fe:	ff 90       	pop	r15
   1c200:	ef 90       	pop	r14
   1c202:	df 90       	pop	r13
   1c204:	cf 90       	pop	r12
   1c206:	8f 90       	pop	r8
   1c208:	7f 90       	pop	r7
   1c20a:	6f 90       	pop	r6
   1c20c:	08 95       	ret

0001c20e <user_task>:
    int result = 0;
    char *argv[51];
    char line[256];


    if(gpib)
   1c20e:	81 11       	cpse	r24, r1
        gpib_task();
   1c210:	0e 94 90 90 	call	0x12120	; 0x12120 <gpib_task>

    if(!kbhit(0))
   1c214:	80 e0       	ldi	r24, 0x00	; 0
   1c216:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <uart_rx_count>
   1c21a:	89 2b       	or	r24, r25
   1c21c:	09 f0       	breq	.+2      	; 0x1c220 <user_task+0x12>
   1c21e:	86 ce       	rjmp	.-756    	; 0x1bf2c <user_task.part.1>
   1c220:	08 95       	ret

0001c222 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c222:	a3 e3       	ldi	r26, 0x33	; 51
   1c224:	b0 e0       	ldi	r27, 0x00	; 0
   1c226:	e6 e1       	ldi	r30, 0x16	; 22
   1c228:	f1 ee       	ldi	r31, 0xE1	; 225
   1c22a:	8f c2       	rjmp	.+1310   	; 0x1c74a <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c22c:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c230:	46 98       	cbi	0x08, 6	; 8
   1c232:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c234:	0e 94 b9 84 	call	0x10972	; 0x10972 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c238:	40 e0       	ldi	r20, 0x00	; 0
   1c23a:	52 ec       	ldi	r21, 0xC2	; 194
   1c23c:	61 e0       	ldi	r22, 0x01	; 1
   1c23e:	70 e0       	ldi	r23, 0x00	; 0
   1c240:	80 e0       	ldi	r24, 0x00	; 0
   1c242:	0e 94 65 27 	call	0x4eca	; 0x4eca <uart_init>
   1c246:	6b 01       	movw	r12, r22
   1c248:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c24a:	68 ec       	ldi	r22, 0xC8	; 200
   1c24c:	70 e0       	ldi	r23, 0x00	; 0
   1c24e:	80 e0       	ldi	r24, 0x00	; 0
   1c250:	90 e0       	ldi	r25, 0x00	; 0
   1c252:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <delayms>

    sep();
   1c256:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
    printf("Start\n");
   1c25a:	84 e8       	ldi	r24, 0x84	; 132
   1c25c:	95 e4       	ldi	r25, 0x45	; 69
   1c25e:	a0 e0       	ldi	r26, 0x00	; 0
   1c260:	ed b7       	in	r30, 0x3d	; 61
   1c262:	fe b7       	in	r31, 0x3e	; 62
   1c264:	81 83       	std	Z+1, r24	; 0x01
   1c266:	92 83       	std	Z+2, r25	; 0x02
   1c268:	a3 83       	std	Z+3, r26	; 0x03
   1c26a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c26e:	80 e0       	ldi	r24, 0x00	; 0
   1c270:	9d e2       	ldi	r25, 0x2D	; 45
   1c272:	a1 e3       	ldi	r26, 0x31	; 49
   1c274:	b1 e0       	ldi	r27, 0x01	; 1
   1c276:	ed b7       	in	r30, 0x3d	; 61
   1c278:	fe b7       	in	r31, 0x3e	; 62
   1c27a:	84 83       	std	Z+4, r24	; 0x04
   1c27c:	95 83       	std	Z+5, r25	; 0x05
   1c27e:	a6 83       	std	Z+6, r26	; 0x06
   1c280:	b7 83       	std	Z+7, r27	; 0x07
   1c282:	83 e7       	ldi	r24, 0x73	; 115
   1c284:	95 e4       	ldi	r25, 0x45	; 69
   1c286:	a0 e0       	ldi	r26, 0x00	; 0
   1c288:	81 83       	std	Z+1, r24	; 0x01
   1c28a:	92 83       	std	Z+2, r25	; 0x02
   1c28c:	a3 83       	std	Z+3, r26	; 0x03
   1c28e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c292:	ed b7       	in	r30, 0x3d	; 61
   1c294:	fe b7       	in	r31, 0x3e	; 62
   1c296:	c0 86       	std	Z+8, r12	; 0x08
   1c298:	d1 86       	std	Z+9, r13	; 0x09
   1c29a:	e2 86       	std	Z+10, r14	; 0x0a
   1c29c:	f3 86       	std	Z+11, r15	; 0x0b
   1c29e:	80 e0       	ldi	r24, 0x00	; 0
   1c2a0:	92 ec       	ldi	r25, 0xC2	; 194
   1c2a2:	a1 e0       	ldi	r26, 0x01	; 1
   1c2a4:	b0 e0       	ldi	r27, 0x00	; 0
   1c2a6:	84 83       	std	Z+4, r24	; 0x04
   1c2a8:	95 83       	std	Z+5, r25	; 0x05
   1c2aa:	a6 83       	std	Z+6, r26	; 0x06
   1c2ac:	b7 83       	std	Z+7, r27	; 0x07
   1c2ae:	8c e4       	ldi	r24, 0x4C	; 76
   1c2b0:	95 e4       	ldi	r25, 0x45	; 69
   1c2b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c2b4:	81 83       	std	Z+1, r24	; 0x01
   1c2b6:	92 83       	std	Z+2, r25	; 0x02
   1c2b8:	a3 83       	std	Z+3, r26	; 0x03
   1c2ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    init_timers();
   1c2be:	0e 94 0d 34 	call	0x681a	; 0x681a <init_timers>

    sep();
   1c2c2:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c2c6:	8d e2       	ldi	r24, 0x2D	; 45
   1c2c8:	95 e4       	ldi	r25, 0x45	; 69
   1c2ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c2cc:	ed b7       	in	r30, 0x3d	; 61
   1c2ce:	fe b7       	in	r31, 0x3e	; 62
   1c2d0:	81 83       	std	Z+1, r24	; 0x01
   1c2d2:	92 83       	std	Z+2, r25	; 0x02
   1c2d4:	a3 83       	std	Z+3, r26	; 0x03
   1c2d6:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c2da:	80 e1       	ldi	r24, 0x10	; 16
   1c2dc:	95 e4       	ldi	r25, 0x45	; 69
   1c2de:	a0 e0       	ldi	r26, 0x00	; 0
   1c2e0:	ed b7       	in	r30, 0x3d	; 61
   1c2e2:	fe b7       	in	r31, 0x3e	; 62
   1c2e4:	81 83       	std	Z+1, r24	; 0x01
   1c2e6:	92 83       	std	Z+2, r25	; 0x02
   1c2e8:	a3 83       	std	Z+3, r26	; 0x03
   1c2ea:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf(" GNU version 3\n");
   1c2ee:	80 e0       	ldi	r24, 0x00	; 0
   1c2f0:	95 e4       	ldi	r25, 0x45	; 69
   1c2f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c2f4:	ed b7       	in	r30, 0x3d	; 61
   1c2f6:	fe b7       	in	r31, 0x3e	; 62
   1c2f8:	81 83       	std	Z+1, r24	; 0x01
   1c2fa:	92 83       	std	Z+2, r25	; 0x02
   1c2fc:	a3 83       	std	Z+3, r26	; 0x03
   1c2fe:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c302:	89 ed       	ldi	r24, 0xD9	; 217
   1c304:	94 e4       	ldi	r25, 0x44	; 68
   1c306:	a0 e0       	ldi	r26, 0x00	; 0
   1c308:	ed b7       	in	r30, 0x3d	; 61
   1c30a:	fe b7       	in	r31, 0x3e	; 62
   1c30c:	81 83       	std	Z+1, r24	; 0x01
   1c30e:	92 83       	std	Z+2, r25	; 0x02
   1c310:	a3 83       	std	Z+3, r26	; 0x03
   1c312:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c316:	8f eb       	ldi	r24, 0xBF	; 191
   1c318:	96 e1       	ldi	r25, 0x16	; 22
   1c31a:	ed b7       	in	r30, 0x3d	; 61
   1c31c:	fe b7       	in	r31, 0x3e	; 62
   1c31e:	95 83       	std	Z+5, r25	; 0x05
   1c320:	84 83       	std	Z+4, r24	; 0x04
   1c322:	8f eb       	ldi	r24, 0xBF	; 191
   1c324:	94 e4       	ldi	r25, 0x44	; 68
   1c326:	a0 e0       	ldi	r26, 0x00	; 0
   1c328:	81 83       	std	Z+1, r24	; 0x01
   1c32a:	92 83       	std	Z+2, r25	; 0x02
   1c32c:	a3 83       	std	Z+3, r26	; 0x03
   1c32e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c332:	83 ee       	ldi	r24, 0xE3	; 227
   1c334:	96 e1       	ldi	r25, 0x16	; 22
   1c336:	ed b7       	in	r30, 0x3d	; 61
   1c338:	fe b7       	in	r31, 0x3e	; 62
   1c33a:	95 83       	std	Z+5, r25	; 0x05
   1c33c:	84 83       	std	Z+4, r24	; 0x04
   1c33e:	85 ea       	ldi	r24, 0xA5	; 165
   1c340:	94 e4       	ldi	r25, 0x44	; 68
   1c342:	a0 e0       	ldi	r26, 0x00	; 0
   1c344:	81 83       	std	Z+1, r24	; 0x01
   1c346:	92 83       	std	Z+2, r25	; 0x02
   1c348:	a3 83       	std	Z+3, r26	; 0x03
   1c34a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

    sep();
   1c34e:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
    PrintFree();
   1c352:	0e 94 33 25 	call	0x4a66	; 0x4a66 <PrintFree>

    sep();
   1c356:	0e 94 27 30 	call	0x604e	; 0x604e <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c35a:	8f e8       	ldi	r24, 0x8F	; 143
   1c35c:	94 e4       	ldi	r25, 0x44	; 68
   1c35e:	a0 e0       	ldi	r26, 0x00	; 0
   1c360:	ed b7       	in	r30, 0x3d	; 61
   1c362:	fe b7       	in	r31, 0x3e	; 62
   1c364:	81 83       	std	Z+1, r24	; 0x01
   1c366:	92 83       	std	Z+2, r25	; 0x02
   1c368:	a3 83       	std	Z+3, r26	; 0x03
   1c36a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c36e:	4b e0       	ldi	r20, 0x0B	; 11
   1c370:	50 e0       	ldi	r21, 0x00	; 0
   1c372:	60 e2       	ldi	r22, 0x20	; 32
   1c374:	71 ea       	ldi	r23, 0xA1	; 161
   1c376:	87 e0       	ldi	r24, 0x07	; 7
   1c378:	90 e0       	ldi	r25, 0x00	; 0
   1c37a:	0e 94 99 24 	call	0x4932	; 0x4932 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c37e:	89 e7       	ldi	r24, 0x79	; 121
   1c380:	94 e4       	ldi	r25, 0x44	; 68
   1c382:	a0 e0       	ldi	r26, 0x00	; 0
   1c384:	ed b7       	in	r30, 0x3d	; 61
   1c386:	fe b7       	in	r31, 0x3e	; 62
   1c388:	81 83       	std	Z+1, r24	; 0x01
   1c38a:	92 83       	std	Z+2, r25	; 0x02
   1c38c:	a3 83       	std	Z+3, r26	; 0x03
   1c38e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
	i2c_init(100000);
   1c392:	60 ea       	ldi	r22, 0xA0	; 160
   1c394:	76 e8       	ldi	r23, 0x86	; 134
   1c396:	81 e0       	ldi	r24, 0x01	; 1
   1c398:	90 e0       	ldi	r25, 0x00	; 0
   1c39a:	0e 94 36 2a 	call	0x546c	; 0x546c <i2c_init>
    sep();
   1c39e:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c3a2:	87 e6       	ldi	r24, 0x67	; 103
   1c3a4:	94 e4       	ldi	r25, 0x44	; 68
   1c3a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c3a8:	ed b7       	in	r30, 0x3d	; 61
   1c3aa:	fe b7       	in	r31, 0x3e	; 62
   1c3ac:	81 83       	std	Z+1, r24	; 0x01
   1c3ae:	92 83       	std	Z+2, r25	; 0x02
   1c3b0:	a3 83       	std	Z+3, r26	; 0x03
   1c3b2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    clock_clear();
   1c3b6:	0e 94 ca 33 	call	0x6794	; 0x6794 <clock_clear>
    printf("Clock cleared\n");
   1c3ba:	88 e5       	ldi	r24, 0x58	; 88
   1c3bc:	94 e4       	ldi	r25, 0x44	; 68
   1c3be:	a0 e0       	ldi	r26, 0x00	; 0
   1c3c0:	ed b7       	in	r30, 0x3d	; 61
   1c3c2:	fe b7       	in	r31, 0x3e	; 62
   1c3c4:	81 83       	std	Z+1, r24	; 0x01
   1c3c6:	92 83       	std	Z+2, r25	; 0x02
   1c3c8:	a3 83       	std	Z+3, r26	; 0x03
   1c3ca:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c3ce:	be 01       	movw	r22, r28
   1c3d0:	64 5d       	subi	r22, 0xD4	; 212
   1c3d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3d4:	80 e0       	ldi	r24, 0x00	; 0
   1c3d6:	90 e0       	ldi	r25, 0x00	; 0
   1c3d8:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c3dc:	88 a9       	ldd	r24, Y+48	; 0x30
   1c3de:	99 a9       	ldd	r25, Y+49	; 0x31
   1c3e0:	aa a9       	ldd	r26, Y+50	; 0x32
   1c3e2:	bb a9       	ldd	r27, Y+51	; 0x33
   1c3e4:	ed b7       	in	r30, 0x3d	; 61
   1c3e6:	fe b7       	in	r31, 0x3e	; 62
   1c3e8:	84 83       	std	Z+4, r24	; 0x04
   1c3ea:	95 83       	std	Z+5, r25	; 0x05
   1c3ec:	a6 83       	std	Z+6, r26	; 0x06
   1c3ee:	b7 83       	std	Z+7, r27	; 0x07
   1c3f0:	8a e2       	ldi	r24, 0x2A	; 42
   1c3f2:	94 e4       	ldi	r25, 0x44	; 68
   1c3f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3f6:	81 83       	std	Z+1, r24	; 0x01
   1c3f8:	92 83       	std	Z+2, r25	; 0x02
   1c3fa:	a3 83       	std	Z+3, r26	; 0x03
   1c3fc:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c400:	80 e0       	ldi	r24, 0x00	; 0
   1c402:	90 e0       	ldi	r25, 0x00	; 0
   1c404:	0e 94 45 3b 	call	0x768a	; 0x768a <initialize_clock>
    display_clock();
   1c408:	0e 94 bc 3b 	call	0x7778	; 0x7778 <display_clock>
    sep();
   1c40c:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c410:	7b dc       	rcall	.-1802   	; 0x1bd08 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c412:	82 e1       	ldi	r24, 0x12	; 18
   1c414:	94 e4       	ldi	r25, 0x44	; 68
   1c416:	a0 e0       	ldi	r26, 0x00	; 0
   1c418:	ed b7       	in	r30, 0x3d	; 61
   1c41a:	fe b7       	in	r31, 0x3e	; 62
   1c41c:	81 83       	std	Z+1, r24	; 0x01
   1c41e:	92 83       	std	Z+2, r25	; 0x02
   1c420:	a3 83       	std	Z+3, r26	; 0x03
   1c422:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    if ( !mmc_init(1) )
   1c426:	81 e0       	ldi	r24, 0x01	; 1
   1c428:	90 e0       	ldi	r25, 0x00	; 0
   1c42a:	0e 94 67 6e 	call	0xdcce	; 0xdcce <mmc_init>
   1c42e:	89 2b       	or	r24, r25
   1c430:	51 f4       	brne	.+20     	; 0x1c446 <main+0x224>
		printf("MMC initialized\n");
   1c432:	81 e0       	ldi	r24, 0x01	; 1
   1c434:	94 e4       	ldi	r25, 0x44	; 68
   1c436:	a0 e0       	ldi	r26, 0x00	; 0
   1c438:	ed b7       	in	r30, 0x3d	; 61
   1c43a:	fe b7       	in	r31, 0x3e	; 62
   1c43c:	81 83       	std	Z+1, r24	; 0x01
   1c43e:	92 83       	std	Z+2, r25	; 0x02
   1c440:	a3 83       	std	Z+3, r26	; 0x03
   1c442:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    sep();
   1c446:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c44a:	0e 94 b9 84 	call	0x10972	; 0x10972 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c44e:	8b ee       	ldi	r24, 0xEB	; 235
   1c450:	93 e4       	ldi	r25, 0x43	; 67
   1c452:	a0 e0       	ldi	r26, 0x00	; 0
   1c454:	ed b7       	in	r30, 0x3d	; 61
   1c456:	fe b7       	in	r31, 0x3e	; 62
   1c458:	81 83       	std	Z+1, r24	; 0x01
   1c45a:	92 83       	std	Z+2, r25	; 0x02
   1c45c:	a3 83       	std	Z+3, r26	; 0x03
   1c45e:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c462:	0e 94 85 bb 	call	0x1770a	; 0x1770a <printer_init>
    printf("Printer initialized\n");
   1c466:	86 ed       	ldi	r24, 0xD6	; 214
   1c468:	93 e4       	ldi	r25, 0x43	; 67
   1c46a:	a0 e0       	ldi	r26, 0x00	; 0
   1c46c:	ed b7       	in	r30, 0x3d	; 61
   1c46e:	fe b7       	in	r31, 0x3e	; 62
   1c470:	81 83       	std	Z+1, r24	; 0x01
   1c472:	92 83       	std	Z+2, r25	; 0x02
   1c474:	a3 83       	std	Z+3, r26	; 0x03
   1c476:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c47a:	84 ec       	ldi	r24, 0xC4	; 196
   1c47c:	93 e4       	ldi	r25, 0x43	; 67
   1c47e:	a0 e0       	ldi	r26, 0x00	; 0
   1c480:	ed b7       	in	r30, 0x3d	; 61
   1c482:	fe b7       	in	r31, 0x3e	; 62
   1c484:	81 83       	std	Z+1, r24	; 0x01
   1c486:	92 83       	std	Z+2, r25	; 0x02
   1c488:	a3 83       	std	Z+3, r26	; 0x03
   1c48a:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    gpib_timer_init();
   1c48e:	0e 94 cd 82 	call	0x1059a	; 0x1059a <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c492:	8c ea       	ldi	r24, 0xAC	; 172
   1c494:	93 e4       	ldi	r25, 0x43	; 67
   1c496:	a0 e0       	ldi	r26, 0x00	; 0
   1c498:	ed b7       	in	r30, 0x3d	; 61
   1c49a:	fe b7       	in	r31, 0x3e	; 62
   1c49c:	81 83       	std	Z+1, r24	; 0x01
   1c49e:	92 83       	std	Z+2, r25	; 0x02
   1c4a0:	a3 83       	std	Z+3, r26	; 0x03
   1c4a2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c4a6:	0e 94 50 8b 	call	0x116a0	; 0x116a0 <gpib_file_init>
    printf("GPIB File init done\n");
   1c4aa:	87 e9       	ldi	r24, 0x97	; 151
   1c4ac:	93 e4       	ldi	r25, 0x43	; 67
   1c4ae:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b0:	ed b7       	in	r30, 0x3d	; 61
   1c4b2:	fe b7       	in	r31, 0x3e	; 62
   1c4b4:	81 83       	std	Z+1, r24	; 0x01
   1c4b6:	92 83       	std	Z+2, r25	; 0x02
   1c4b8:	a3 83       	std	Z+3, r26	; 0x03
   1c4ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c4be:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_state_init>
    printf("GPIB State init done\n");
   1c4c2:	81 e8       	ldi	r24, 0x81	; 129
   1c4c4:	93 e4       	ldi	r25, 0x43	; 67
   1c4c6:	a0 e0       	ldi	r26, 0x00	; 0
   1c4c8:	ed b7       	in	r30, 0x3d	; 61
   1c4ca:	fe b7       	in	r31, 0x3e	; 62
   1c4cc:	81 83       	std	Z+1, r24	; 0x01
   1c4ce:	92 83       	std	Z+2, r25	; 0x02
   1c4d0:	a3 83       	std	Z+3, r26	; 0x03
   1c4d2:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    sep();
   1c4d6:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c4da:	80 e0       	ldi	r24, 0x00	; 0
   1c4dc:	90 e0       	ldi	r25, 0x00	; 0
   1c4de:	0e 94 e0 92 	call	0x125c0	; 0x125c0 <display_Addresses>
    sep();
   1c4e2:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c4e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c4ea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c4ee:	ed b7       	in	r30, 0x3d	; 61
   1c4f0:	fe b7       	in	r31, 0x3e	; 62
   1c4f2:	95 83       	std	Z+5, r25	; 0x05
   1c4f4:	84 83       	std	Z+4, r24	; 0x04
   1c4f6:	8b e6       	ldi	r24, 0x6B	; 107
   1c4f8:	93 e4       	ldi	r25, 0x43	; 67
   1c4fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c4fc:	81 83       	std	Z+1, r24	; 0x01
   1c4fe:	92 83       	std	Z+2, r25	; 0x02
   1c500:	a3 83       	std	Z+3, r26	; 0x03
   1c502:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
    sep();
   1c506:	0e 94 27 30 	call	0x604e	; 0x604e <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c50a:	0e 94 78 9e 	call	0x13cf0	; 0x13cf0 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c50e:	83 e0       	ldi	r24, 0x03	; 3
   1c510:	0e 94 55 96 	call	0x12caa	; 0x12caa <count_drive_types>
   1c514:	8c 01       	movw	r16, r24
   1c516:	81 e0       	ldi	r24, 0x01	; 1
   1c518:	0e 94 55 96 	call	0x12caa	; 0x12caa <count_drive_types>
   1c51c:	ed b7       	in	r30, 0x3d	; 61
   1c51e:	fe b7       	in	r31, 0x3e	; 62
   1c520:	91 87       	std	Z+9, r25	; 0x09
   1c522:	80 87       	std	Z+8, r24	; 0x08
   1c524:	17 83       	std	Z+7, r17	; 0x07
   1c526:	06 83       	std	Z+6, r16	; 0x06
   1c528:	8a e5       	ldi	r24, 0x5A	; 90
   1c52a:	93 e4       	ldi	r25, 0x43	; 67
   1c52c:	a0 e0       	ldi	r26, 0x00	; 0
   1c52e:	83 83       	std	Z+3, r24	; 0x03
   1c530:	94 83       	std	Z+4, r25	; 0x04
   1c532:	a5 83       	std	Z+5, r26	; 0x05
   1c534:	8e 01       	movw	r16, r28
   1c536:	04 5f       	subi	r16, 0xF4	; 244
   1c538:	1f 4f       	sbci	r17, 0xFF	; 255
   1c53a:	12 83       	std	Z+2, r17	; 0x02
   1c53c:	01 83       	std	Z+1, r16	; 0x01
   1c53e:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c542:	ed b7       	in	r30, 0x3d	; 61
   1c544:	fe b7       	in	r31, 0x3e	; 62
   1c546:	17 83       	std	Z+7, r17	; 0x07
   1c548:	06 83       	std	Z+6, r16	; 0x06
   1c54a:	84 e5       	ldi	r24, 0x54	; 84
   1c54c:	93 e4       	ldi	r25, 0x43	; 67
   1c54e:	a0 e0       	ldi	r26, 0x00	; 0
   1c550:	83 83       	std	Z+3, r24	; 0x03
   1c552:	94 83       	std	Z+4, r25	; 0x04
   1c554:	a5 83       	std	Z+5, r26	; 0x05
   1c556:	8c e0       	ldi	r24, 0x0C	; 12
   1c558:	93 e0       	ldi	r25, 0x03	; 3
   1c55a:	92 83       	std	Z+2, r25	; 0x02
   1c55c:	81 83       	std	Z+1, r24	; 0x01
   1c55e:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c562:	83 e1       	ldi	r24, 0x13	; 19
   1c564:	97 e1       	ldi	r25, 0x17	; 23
   1c566:	ed b7       	in	r30, 0x3d	; 61
   1c568:	fe b7       	in	r31, 0x3e	; 62
   1c56a:	97 83       	std	Z+7, r25	; 0x07
   1c56c:	86 83       	std	Z+6, r24	; 0x06
   1c56e:	8e e4       	ldi	r24, 0x4E	; 78
   1c570:	93 e4       	ldi	r25, 0x43	; 67
   1c572:	a0 e0       	ldi	r26, 0x00	; 0
   1c574:	83 83       	std	Z+3, r24	; 0x03
   1c576:	94 83       	std	Z+4, r25	; 0x04
   1c578:	a5 83       	std	Z+5, r26	; 0x05
   1c57a:	85 ef       	ldi	r24, 0xF5	; 245
   1c57c:	92 e0       	ldi	r25, 0x02	; 2
   1c57e:	92 83       	std	Z+2, r25	; 0x02
   1c580:	81 83       	std	Z+1, r24	; 0x01
   1c582:	0e 94 04 45 	call	0x8a08	; 0x8a08 <sprintf_P>

	i2c_task_run();
   1c586:	0e 94 cc 2a 	call	0x5598	; 0x5598 <i2c_task_run>
	delayms(1000);
   1c58a:	68 ee       	ldi	r22, 0xE8	; 232
   1c58c:	73 e0       	ldi	r23, 0x03	; 3
   1c58e:	80 e0       	ldi	r24, 0x00	; 0
   1c590:	90 e0       	ldi	r25, 0x00	; 0
   1c592:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c596:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
   1c59a:	88 23       	and	r24, r24
   1c59c:	21 f0       	breq	.+8      	; 0x1c5a6 <main+0x384>
   1c59e:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
   1c5a2:	88 23       	and	r24, r24
   1c5a4:	61 f0       	breq	.+24     	; 0x1c5be <main+0x39c>
	{
		i2c_display_task_errors();
   1c5a6:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c5aa:	84 e3       	ldi	r24, 0x34	; 52
   1c5ac:	93 e4       	ldi	r25, 0x43	; 67
   1c5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1c5b0:	ed b7       	in	r30, 0x3d	; 61
   1c5b2:	fe b7       	in	r31, 0x3e	; 62
   1c5b4:	81 83       	std	Z+1, r24	; 0x01
   1c5b6:	92 83       	std	Z+2, r25	; 0x02
   1c5b8:	a3 83       	std	Z+3, r26	; 0x03
   1c5ba:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c5be:	80 e2       	ldi	r24, 0x20	; 32
   1c5c0:	93 e4       	ldi	r25, 0x43	; 67
   1c5c2:	a0 e0       	ldi	r26, 0x00	; 0
   1c5c4:	ed b7       	in	r30, 0x3d	; 61
   1c5c6:	fe b7       	in	r31, 0x3e	; 62
   1c5c8:	81 83       	std	Z+1, r24	; 0x01
   1c5ca:	92 83       	std	Z+2, r25	; 0x02
   1c5cc:	a3 83       	std	Z+3, r26	; 0x03
   1c5ce:	0e 94 18 45 	call	0x8a30	; 0x8a30 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c5d2:	81 e0       	ldi	r24, 0x01	; 1
   1c5d4:	1c de       	rcall	.-968    	; 0x1c20e <user_task>
   1c5d6:	fd cf       	rjmp	.-6      	; 0x1c5d2 <main+0x3b0>

0001c5d8 <__mulsi3>:
   1c5d8:	db 01       	movw	r26, r22
   1c5da:	8f 93       	push	r24
   1c5dc:	9f 93       	push	r25
   1c5de:	8b d0       	rcall	.+278    	; 0x1c6f6 <__muluhisi3>
   1c5e0:	bf 91       	pop	r27
   1c5e2:	af 91       	pop	r26
   1c5e4:	a2 9f       	mul	r26, r18
   1c5e6:	80 0d       	add	r24, r0
   1c5e8:	91 1d       	adc	r25, r1
   1c5ea:	a3 9f       	mul	r26, r19
   1c5ec:	90 0d       	add	r25, r0
   1c5ee:	b2 9f       	mul	r27, r18
   1c5f0:	90 0d       	add	r25, r0
   1c5f2:	11 24       	eor	r1, r1
   1c5f4:	08 95       	ret

0001c5f6 <__udivmodqi4>:
   1c5f6:	99 1b       	sub	r25, r25
   1c5f8:	79 e0       	ldi	r23, 0x09	; 9
   1c5fa:	04 c0       	rjmp	.+8      	; 0x1c604 <__udivmodqi4_ep>

0001c5fc <__udivmodqi4_loop>:
   1c5fc:	99 1f       	adc	r25, r25
   1c5fe:	96 17       	cp	r25, r22
   1c600:	08 f0       	brcs	.+2      	; 0x1c604 <__udivmodqi4_ep>
   1c602:	96 1b       	sub	r25, r22

0001c604 <__udivmodqi4_ep>:
   1c604:	88 1f       	adc	r24, r24
   1c606:	7a 95       	dec	r23
   1c608:	c9 f7       	brne	.-14     	; 0x1c5fc <__udivmodqi4_loop>
   1c60a:	80 95       	com	r24
   1c60c:	08 95       	ret

0001c60e <__udivmodhi4>:
   1c60e:	aa 1b       	sub	r26, r26
   1c610:	bb 1b       	sub	r27, r27
   1c612:	51 e1       	ldi	r21, 0x11	; 17
   1c614:	07 c0       	rjmp	.+14     	; 0x1c624 <__udivmodhi4_ep>

0001c616 <__udivmodhi4_loop>:
   1c616:	aa 1f       	adc	r26, r26
   1c618:	bb 1f       	adc	r27, r27
   1c61a:	a6 17       	cp	r26, r22
   1c61c:	b7 07       	cpc	r27, r23
   1c61e:	10 f0       	brcs	.+4      	; 0x1c624 <__udivmodhi4_ep>
   1c620:	a6 1b       	sub	r26, r22
   1c622:	b7 0b       	sbc	r27, r23

0001c624 <__udivmodhi4_ep>:
   1c624:	88 1f       	adc	r24, r24
   1c626:	99 1f       	adc	r25, r25
   1c628:	5a 95       	dec	r21
   1c62a:	a9 f7       	brne	.-22     	; 0x1c616 <__udivmodhi4_loop>
   1c62c:	80 95       	com	r24
   1c62e:	90 95       	com	r25
   1c630:	bc 01       	movw	r22, r24
   1c632:	cd 01       	movw	r24, r26
   1c634:	08 95       	ret

0001c636 <__divmodhi4>:
   1c636:	97 fb       	bst	r25, 7
   1c638:	07 2e       	mov	r0, r23
   1c63a:	16 f4       	brtc	.+4      	; 0x1c640 <__divmodhi4+0xa>
   1c63c:	00 94       	com	r0
   1c63e:	06 d0       	rcall	.+12     	; 0x1c64c <__divmodhi4_neg1>
   1c640:	77 fd       	sbrc	r23, 7
   1c642:	08 d0       	rcall	.+16     	; 0x1c654 <__divmodhi4_neg2>
   1c644:	e4 df       	rcall	.-56     	; 0x1c60e <__udivmodhi4>
   1c646:	07 fc       	sbrc	r0, 7
   1c648:	05 d0       	rcall	.+10     	; 0x1c654 <__divmodhi4_neg2>
   1c64a:	3e f4       	brtc	.+14     	; 0x1c65a <__divmodhi4_exit>

0001c64c <__divmodhi4_neg1>:
   1c64c:	90 95       	com	r25
   1c64e:	81 95       	neg	r24
   1c650:	9f 4f       	sbci	r25, 0xFF	; 255
   1c652:	08 95       	ret

0001c654 <__divmodhi4_neg2>:
   1c654:	70 95       	com	r23
   1c656:	61 95       	neg	r22
   1c658:	7f 4f       	sbci	r23, 0xFF	; 255

0001c65a <__divmodhi4_exit>:
   1c65a:	08 95       	ret

0001c65c <__udivmodsi4>:
   1c65c:	a1 e2       	ldi	r26, 0x21	; 33
   1c65e:	1a 2e       	mov	r1, r26
   1c660:	aa 1b       	sub	r26, r26
   1c662:	bb 1b       	sub	r27, r27
   1c664:	fd 01       	movw	r30, r26
   1c666:	0d c0       	rjmp	.+26     	; 0x1c682 <__udivmodsi4_ep>

0001c668 <__udivmodsi4_loop>:
   1c668:	aa 1f       	adc	r26, r26
   1c66a:	bb 1f       	adc	r27, r27
   1c66c:	ee 1f       	adc	r30, r30
   1c66e:	ff 1f       	adc	r31, r31
   1c670:	a2 17       	cp	r26, r18
   1c672:	b3 07       	cpc	r27, r19
   1c674:	e4 07       	cpc	r30, r20
   1c676:	f5 07       	cpc	r31, r21
   1c678:	20 f0       	brcs	.+8      	; 0x1c682 <__udivmodsi4_ep>
   1c67a:	a2 1b       	sub	r26, r18
   1c67c:	b3 0b       	sbc	r27, r19
   1c67e:	e4 0b       	sbc	r30, r20
   1c680:	f5 0b       	sbc	r31, r21

0001c682 <__udivmodsi4_ep>:
   1c682:	66 1f       	adc	r22, r22
   1c684:	77 1f       	adc	r23, r23
   1c686:	88 1f       	adc	r24, r24
   1c688:	99 1f       	adc	r25, r25
   1c68a:	1a 94       	dec	r1
   1c68c:	69 f7       	brne	.-38     	; 0x1c668 <__udivmodsi4_loop>
   1c68e:	60 95       	com	r22
   1c690:	70 95       	com	r23
   1c692:	80 95       	com	r24
   1c694:	90 95       	com	r25
   1c696:	9b 01       	movw	r18, r22
   1c698:	ac 01       	movw	r20, r24
   1c69a:	bd 01       	movw	r22, r26
   1c69c:	cf 01       	movw	r24, r30
   1c69e:	08 95       	ret

0001c6a0 <__divmodsi4>:
   1c6a0:	05 2e       	mov	r0, r21
   1c6a2:	97 fb       	bst	r25, 7
   1c6a4:	16 f4       	brtc	.+4      	; 0x1c6aa <__divmodsi4+0xa>
   1c6a6:	00 94       	com	r0
   1c6a8:	0f d0       	rcall	.+30     	; 0x1c6c8 <__negsi2>
   1c6aa:	57 fd       	sbrc	r21, 7
   1c6ac:	05 d0       	rcall	.+10     	; 0x1c6b8 <__divmodsi4_neg2>
   1c6ae:	d6 df       	rcall	.-84     	; 0x1c65c <__udivmodsi4>
   1c6b0:	07 fc       	sbrc	r0, 7
   1c6b2:	02 d0       	rcall	.+4      	; 0x1c6b8 <__divmodsi4_neg2>
   1c6b4:	46 f4       	brtc	.+16     	; 0x1c6c6 <__divmodsi4_exit>
   1c6b6:	08 c0       	rjmp	.+16     	; 0x1c6c8 <__negsi2>

0001c6b8 <__divmodsi4_neg2>:
   1c6b8:	50 95       	com	r21
   1c6ba:	40 95       	com	r20
   1c6bc:	30 95       	com	r19
   1c6be:	21 95       	neg	r18
   1c6c0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c6c2:	4f 4f       	sbci	r20, 0xFF	; 255
   1c6c4:	5f 4f       	sbci	r21, 0xFF	; 255

0001c6c6 <__divmodsi4_exit>:
   1c6c6:	08 95       	ret

0001c6c8 <__negsi2>:
   1c6c8:	90 95       	com	r25
   1c6ca:	80 95       	com	r24
   1c6cc:	70 95       	com	r23
   1c6ce:	61 95       	neg	r22
   1c6d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6d2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c6d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c6d6:	08 95       	ret

0001c6d8 <__tablejump2__>:
   1c6d8:	ee 0f       	add	r30, r30
   1c6da:	ff 1f       	adc	r31, r31
   1c6dc:	00 24       	eor	r0, r0
   1c6de:	00 1c       	adc	r0, r0
   1c6e0:	0b be       	out	0x3b, r0	; 59
   1c6e2:	07 90       	elpm	r0, Z+
   1c6e4:	f6 91       	elpm	r31, Z
   1c6e6:	e0 2d       	mov	r30, r0
   1c6e8:	09 94       	ijmp

0001c6ea <__usmulhisi3>:
   1c6ea:	6f d0       	rcall	.+222    	; 0x1c7ca <__umulhisi3>

0001c6ec <__usmulhisi3_tail>:
   1c6ec:	b7 ff       	sbrs	r27, 7
   1c6ee:	08 95       	ret
   1c6f0:	82 1b       	sub	r24, r18
   1c6f2:	93 0b       	sbc	r25, r19
   1c6f4:	08 95       	ret

0001c6f6 <__muluhisi3>:
   1c6f6:	69 d0       	rcall	.+210    	; 0x1c7ca <__umulhisi3>
   1c6f8:	a5 9f       	mul	r26, r21
   1c6fa:	90 0d       	add	r25, r0
   1c6fc:	b4 9f       	mul	r27, r20
   1c6fe:	90 0d       	add	r25, r0
   1c700:	a4 9f       	mul	r26, r20
   1c702:	80 0d       	add	r24, r0
   1c704:	91 1d       	adc	r25, r1
   1c706:	11 24       	eor	r1, r1
   1c708:	08 95       	ret

0001c70a <__mulshisi3>:
   1c70a:	b7 ff       	sbrs	r27, 7
   1c70c:	f4 cf       	rjmp	.-24     	; 0x1c6f6 <__muluhisi3>

0001c70e <__mulohisi3>:
   1c70e:	f3 df       	rcall	.-26     	; 0x1c6f6 <__muluhisi3>
   1c710:	82 1b       	sub	r24, r18
   1c712:	93 0b       	sbc	r25, r19
   1c714:	08 95       	ret

0001c716 <__negdi2>:
   1c716:	60 95       	com	r22
   1c718:	70 95       	com	r23
   1c71a:	80 95       	com	r24
   1c71c:	90 95       	com	r25
   1c71e:	30 95       	com	r19
   1c720:	40 95       	com	r20
   1c722:	50 95       	com	r21
   1c724:	21 95       	neg	r18
   1c726:	3f 4f       	sbci	r19, 0xFF	; 255
   1c728:	4f 4f       	sbci	r20, 0xFF	; 255
   1c72a:	5f 4f       	sbci	r21, 0xFF	; 255
   1c72c:	6f 4f       	sbci	r22, 0xFF	; 255
   1c72e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c730:	8f 4f       	sbci	r24, 0xFF	; 255
   1c732:	9f 4f       	sbci	r25, 0xFF	; 255
   1c734:	08 95       	ret

0001c736 <__prologue_saves__>:
   1c736:	2f 92       	push	r2
   1c738:	3f 92       	push	r3
   1c73a:	4f 92       	push	r4
   1c73c:	5f 92       	push	r5
   1c73e:	6f 92       	push	r6
   1c740:	7f 92       	push	r7
   1c742:	8f 92       	push	r8
   1c744:	9f 92       	push	r9
   1c746:	af 92       	push	r10
   1c748:	bf 92       	push	r11
   1c74a:	cf 92       	push	r12
   1c74c:	df 92       	push	r13
   1c74e:	ef 92       	push	r14
   1c750:	ff 92       	push	r15
   1c752:	0f 93       	push	r16
   1c754:	1f 93       	push	r17
   1c756:	cf 93       	push	r28
   1c758:	df 93       	push	r29
   1c75a:	cd b7       	in	r28, 0x3d	; 61
   1c75c:	de b7       	in	r29, 0x3e	; 62
   1c75e:	ca 1b       	sub	r28, r26
   1c760:	db 0b       	sbc	r29, r27
   1c762:	0f b6       	in	r0, 0x3f	; 63
   1c764:	f8 94       	cli
   1c766:	de bf       	out	0x3e, r29	; 62
   1c768:	0f be       	out	0x3f, r0	; 63
   1c76a:	cd bf       	out	0x3d, r28	; 61
   1c76c:	09 94       	ijmp

0001c76e <__epilogue_restores__>:
   1c76e:	2a 88       	ldd	r2, Y+18	; 0x12
   1c770:	39 88       	ldd	r3, Y+17	; 0x11
   1c772:	48 88       	ldd	r4, Y+16	; 0x10
   1c774:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c776:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c778:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c77a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c77c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c77e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c780:	b9 84       	ldd	r11, Y+9	; 0x09
   1c782:	c8 84       	ldd	r12, Y+8	; 0x08
   1c784:	df 80       	ldd	r13, Y+7	; 0x07
   1c786:	ee 80       	ldd	r14, Y+6	; 0x06
   1c788:	fd 80       	ldd	r15, Y+5	; 0x05
   1c78a:	0c 81       	ldd	r16, Y+4	; 0x04
   1c78c:	1b 81       	ldd	r17, Y+3	; 0x03
   1c78e:	aa 81       	ldd	r26, Y+2	; 0x02
   1c790:	b9 81       	ldd	r27, Y+1	; 0x01
   1c792:	ce 0f       	add	r28, r30
   1c794:	d1 1d       	adc	r29, r1
   1c796:	0f b6       	in	r0, 0x3f	; 63
   1c798:	f8 94       	cli
   1c79a:	de bf       	out	0x3e, r29	; 62
   1c79c:	0f be       	out	0x3f, r0	; 63
   1c79e:	cd bf       	out	0x3d, r28	; 61
   1c7a0:	ed 01       	movw	r28, r26
   1c7a2:	08 95       	ret

0001c7a4 <__xload_1>:
   1c7a4:	57 fd       	sbrc	r21, 7
   1c7a6:	03 c0       	rjmp	.+6      	; 0x1c7ae <__xload_1+0xa>
   1c7a8:	5b bf       	out	0x3b, r21	; 59
   1c7aa:	67 91       	elpm	r22, Z+
   1c7ac:	08 95       	ret
   1c7ae:	60 81       	ld	r22, Z
   1c7b0:	08 95       	ret

0001c7b2 <__cmpdi2_s8>:
   1c7b2:	00 24       	eor	r0, r0
   1c7b4:	a7 fd       	sbrc	r26, 7
   1c7b6:	00 94       	com	r0
   1c7b8:	2a 17       	cp	r18, r26
   1c7ba:	30 05       	cpc	r19, r0
   1c7bc:	40 05       	cpc	r20, r0
   1c7be:	50 05       	cpc	r21, r0
   1c7c0:	60 05       	cpc	r22, r0
   1c7c2:	70 05       	cpc	r23, r0
   1c7c4:	80 05       	cpc	r24, r0
   1c7c6:	90 05       	cpc	r25, r0
   1c7c8:	08 95       	ret

0001c7ca <__umulhisi3>:
   1c7ca:	a2 9f       	mul	r26, r18
   1c7cc:	b0 01       	movw	r22, r0
   1c7ce:	b3 9f       	mul	r27, r19
   1c7d0:	c0 01       	movw	r24, r0
   1c7d2:	a3 9f       	mul	r26, r19
   1c7d4:	70 0d       	add	r23, r0
   1c7d6:	81 1d       	adc	r24, r1
   1c7d8:	11 24       	eor	r1, r1
   1c7da:	91 1d       	adc	r25, r1
   1c7dc:	b2 9f       	mul	r27, r18
   1c7de:	70 0d       	add	r23, r0
   1c7e0:	81 1d       	adc	r24, r1
   1c7e2:	11 24       	eor	r1, r1
   1c7e4:	91 1d       	adc	r25, r1
   1c7e6:	08 95       	ret

0001c7e8 <__subsf3>:
   1c7e8:	50 58       	subi	r21, 0x80	; 128

0001c7ea <__addsf3>:
   1c7ea:	bb 27       	eor	r27, r27
   1c7ec:	aa 27       	eor	r26, r26
   1c7ee:	0e d0       	rcall	.+28     	; 0x1c80c <__addsf3x>
   1c7f0:	75 c1       	rjmp	.+746    	; 0x1cadc <__fp_round>
   1c7f2:	66 d1       	rcall	.+716    	; 0x1cac0 <__fp_pscA>
   1c7f4:	30 f0       	brcs	.+12     	; 0x1c802 <__addsf3+0x18>
   1c7f6:	6b d1       	rcall	.+726    	; 0x1cace <__fp_pscB>
   1c7f8:	20 f0       	brcs	.+8      	; 0x1c802 <__addsf3+0x18>
   1c7fa:	31 f4       	brne	.+12     	; 0x1c808 <__addsf3+0x1e>
   1c7fc:	9f 3f       	cpi	r25, 0xFF	; 255
   1c7fe:	11 f4       	brne	.+4      	; 0x1c804 <__addsf3+0x1a>
   1c800:	1e f4       	brtc	.+6      	; 0x1c808 <__addsf3+0x1e>
   1c802:	5b c1       	rjmp	.+694    	; 0x1caba <__fp_nan>
   1c804:	0e f4       	brtc	.+2      	; 0x1c808 <__addsf3+0x1e>
   1c806:	e0 95       	com	r30
   1c808:	e7 fb       	bst	r30, 7
   1c80a:	51 c1       	rjmp	.+674    	; 0x1caae <__fp_inf>

0001c80c <__addsf3x>:
   1c80c:	e9 2f       	mov	r30, r25
   1c80e:	77 d1       	rcall	.+750    	; 0x1cafe <__fp_split3>
   1c810:	80 f3       	brcs	.-32     	; 0x1c7f2 <__addsf3+0x8>
   1c812:	ba 17       	cp	r27, r26
   1c814:	62 07       	cpc	r22, r18
   1c816:	73 07       	cpc	r23, r19
   1c818:	84 07       	cpc	r24, r20
   1c81a:	95 07       	cpc	r25, r21
   1c81c:	18 f0       	brcs	.+6      	; 0x1c824 <__addsf3x+0x18>
   1c81e:	71 f4       	brne	.+28     	; 0x1c83c <__addsf3x+0x30>
   1c820:	9e f5       	brtc	.+102    	; 0x1c888 <__addsf3x+0x7c>
   1c822:	8f c1       	rjmp	.+798    	; 0x1cb42 <__fp_zero>
   1c824:	0e f4       	brtc	.+2      	; 0x1c828 <__addsf3x+0x1c>
   1c826:	e0 95       	com	r30
   1c828:	0b 2e       	mov	r0, r27
   1c82a:	ba 2f       	mov	r27, r26
   1c82c:	a0 2d       	mov	r26, r0
   1c82e:	0b 01       	movw	r0, r22
   1c830:	b9 01       	movw	r22, r18
   1c832:	90 01       	movw	r18, r0
   1c834:	0c 01       	movw	r0, r24
   1c836:	ca 01       	movw	r24, r20
   1c838:	a0 01       	movw	r20, r0
   1c83a:	11 24       	eor	r1, r1
   1c83c:	ff 27       	eor	r31, r31
   1c83e:	59 1b       	sub	r21, r25
   1c840:	99 f0       	breq	.+38     	; 0x1c868 <__addsf3x+0x5c>
   1c842:	59 3f       	cpi	r21, 0xF9	; 249
   1c844:	50 f4       	brcc	.+20     	; 0x1c85a <__addsf3x+0x4e>
   1c846:	50 3e       	cpi	r21, 0xE0	; 224
   1c848:	68 f1       	brcs	.+90     	; 0x1c8a4 <__addsf3x+0x98>
   1c84a:	1a 16       	cp	r1, r26
   1c84c:	f0 40       	sbci	r31, 0x00	; 0
   1c84e:	a2 2f       	mov	r26, r18
   1c850:	23 2f       	mov	r18, r19
   1c852:	34 2f       	mov	r19, r20
   1c854:	44 27       	eor	r20, r20
   1c856:	58 5f       	subi	r21, 0xF8	; 248
   1c858:	f3 cf       	rjmp	.-26     	; 0x1c840 <__addsf3x+0x34>
   1c85a:	46 95       	lsr	r20
   1c85c:	37 95       	ror	r19
   1c85e:	27 95       	ror	r18
   1c860:	a7 95       	ror	r26
   1c862:	f0 40       	sbci	r31, 0x00	; 0
   1c864:	53 95       	inc	r21
   1c866:	c9 f7       	brne	.-14     	; 0x1c85a <__addsf3x+0x4e>
   1c868:	7e f4       	brtc	.+30     	; 0x1c888 <__addsf3x+0x7c>
   1c86a:	1f 16       	cp	r1, r31
   1c86c:	ba 0b       	sbc	r27, r26
   1c86e:	62 0b       	sbc	r22, r18
   1c870:	73 0b       	sbc	r23, r19
   1c872:	84 0b       	sbc	r24, r20
   1c874:	ba f0       	brmi	.+46     	; 0x1c8a4 <__addsf3x+0x98>
   1c876:	91 50       	subi	r25, 0x01	; 1
   1c878:	a1 f0       	breq	.+40     	; 0x1c8a2 <__addsf3x+0x96>
   1c87a:	ff 0f       	add	r31, r31
   1c87c:	bb 1f       	adc	r27, r27
   1c87e:	66 1f       	adc	r22, r22
   1c880:	77 1f       	adc	r23, r23
   1c882:	88 1f       	adc	r24, r24
   1c884:	c2 f7       	brpl	.-16     	; 0x1c876 <__addsf3x+0x6a>
   1c886:	0e c0       	rjmp	.+28     	; 0x1c8a4 <__addsf3x+0x98>
   1c888:	ba 0f       	add	r27, r26
   1c88a:	62 1f       	adc	r22, r18
   1c88c:	73 1f       	adc	r23, r19
   1c88e:	84 1f       	adc	r24, r20
   1c890:	48 f4       	brcc	.+18     	; 0x1c8a4 <__addsf3x+0x98>
   1c892:	87 95       	ror	r24
   1c894:	77 95       	ror	r23
   1c896:	67 95       	ror	r22
   1c898:	b7 95       	ror	r27
   1c89a:	f7 95       	ror	r31
   1c89c:	9e 3f       	cpi	r25, 0xFE	; 254
   1c89e:	08 f0       	brcs	.+2      	; 0x1c8a2 <__addsf3x+0x96>
   1c8a0:	b3 cf       	rjmp	.-154    	; 0x1c808 <__addsf3+0x1e>
   1c8a2:	93 95       	inc	r25
   1c8a4:	88 0f       	add	r24, r24
   1c8a6:	08 f0       	brcs	.+2      	; 0x1c8aa <__addsf3x+0x9e>
   1c8a8:	99 27       	eor	r25, r25
   1c8aa:	ee 0f       	add	r30, r30
   1c8ac:	97 95       	ror	r25
   1c8ae:	87 95       	ror	r24
   1c8b0:	08 95       	ret

0001c8b2 <__cmpsf2>:
   1c8b2:	d9 d0       	rcall	.+434    	; 0x1ca66 <__fp_cmp>
   1c8b4:	08 f4       	brcc	.+2      	; 0x1c8b8 <__cmpsf2+0x6>
   1c8b6:	81 e0       	ldi	r24, 0x01	; 1
   1c8b8:	08 95       	ret

0001c8ba <__divsf3>:
   1c8ba:	0c d0       	rcall	.+24     	; 0x1c8d4 <__divsf3x>
   1c8bc:	0f c1       	rjmp	.+542    	; 0x1cadc <__fp_round>
   1c8be:	07 d1       	rcall	.+526    	; 0x1cace <__fp_pscB>
   1c8c0:	40 f0       	brcs	.+16     	; 0x1c8d2 <__divsf3+0x18>
   1c8c2:	fe d0       	rcall	.+508    	; 0x1cac0 <__fp_pscA>
   1c8c4:	30 f0       	brcs	.+12     	; 0x1c8d2 <__divsf3+0x18>
   1c8c6:	21 f4       	brne	.+8      	; 0x1c8d0 <__divsf3+0x16>
   1c8c8:	5f 3f       	cpi	r21, 0xFF	; 255
   1c8ca:	19 f0       	breq	.+6      	; 0x1c8d2 <__divsf3+0x18>
   1c8cc:	f0 c0       	rjmp	.+480    	; 0x1caae <__fp_inf>
   1c8ce:	51 11       	cpse	r21, r1
   1c8d0:	39 c1       	rjmp	.+626    	; 0x1cb44 <__fp_szero>
   1c8d2:	f3 c0       	rjmp	.+486    	; 0x1caba <__fp_nan>

0001c8d4 <__divsf3x>:
   1c8d4:	14 d1       	rcall	.+552    	; 0x1cafe <__fp_split3>
   1c8d6:	98 f3       	brcs	.-26     	; 0x1c8be <__divsf3+0x4>

0001c8d8 <__divsf3_pse>:
   1c8d8:	99 23       	and	r25, r25
   1c8da:	c9 f3       	breq	.-14     	; 0x1c8ce <__divsf3+0x14>
   1c8dc:	55 23       	and	r21, r21
   1c8de:	b1 f3       	breq	.-20     	; 0x1c8cc <__divsf3+0x12>
   1c8e0:	95 1b       	sub	r25, r21
   1c8e2:	55 0b       	sbc	r21, r21
   1c8e4:	bb 27       	eor	r27, r27
   1c8e6:	aa 27       	eor	r26, r26
   1c8e8:	62 17       	cp	r22, r18
   1c8ea:	73 07       	cpc	r23, r19
   1c8ec:	84 07       	cpc	r24, r20
   1c8ee:	38 f0       	brcs	.+14     	; 0x1c8fe <__divsf3_pse+0x26>
   1c8f0:	9f 5f       	subi	r25, 0xFF	; 255
   1c8f2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c8f4:	22 0f       	add	r18, r18
   1c8f6:	33 1f       	adc	r19, r19
   1c8f8:	44 1f       	adc	r20, r20
   1c8fa:	aa 1f       	adc	r26, r26
   1c8fc:	a9 f3       	breq	.-22     	; 0x1c8e8 <__divsf3_pse+0x10>
   1c8fe:	33 d0       	rcall	.+102    	; 0x1c966 <__divsf3_pse+0x8e>
   1c900:	0e 2e       	mov	r0, r30
   1c902:	3a f0       	brmi	.+14     	; 0x1c912 <__divsf3_pse+0x3a>
   1c904:	e0 e8       	ldi	r30, 0x80	; 128
   1c906:	30 d0       	rcall	.+96     	; 0x1c968 <__divsf3_pse+0x90>
   1c908:	91 50       	subi	r25, 0x01	; 1
   1c90a:	50 40       	sbci	r21, 0x00	; 0
   1c90c:	e6 95       	lsr	r30
   1c90e:	00 1c       	adc	r0, r0
   1c910:	ca f7       	brpl	.-14     	; 0x1c904 <__divsf3_pse+0x2c>
   1c912:	29 d0       	rcall	.+82     	; 0x1c966 <__divsf3_pse+0x8e>
   1c914:	fe 2f       	mov	r31, r30
   1c916:	27 d0       	rcall	.+78     	; 0x1c966 <__divsf3_pse+0x8e>
   1c918:	66 0f       	add	r22, r22
   1c91a:	77 1f       	adc	r23, r23
   1c91c:	88 1f       	adc	r24, r24
   1c91e:	bb 1f       	adc	r27, r27
   1c920:	26 17       	cp	r18, r22
   1c922:	37 07       	cpc	r19, r23
   1c924:	48 07       	cpc	r20, r24
   1c926:	ab 07       	cpc	r26, r27
   1c928:	b0 e8       	ldi	r27, 0x80	; 128
   1c92a:	09 f0       	breq	.+2      	; 0x1c92e <__divsf3_pse+0x56>
   1c92c:	bb 0b       	sbc	r27, r27
   1c92e:	80 2d       	mov	r24, r0
   1c930:	bf 01       	movw	r22, r30
   1c932:	ff 27       	eor	r31, r31
   1c934:	93 58       	subi	r25, 0x83	; 131
   1c936:	5f 4f       	sbci	r21, 0xFF	; 255
   1c938:	2a f0       	brmi	.+10     	; 0x1c944 <__divsf3_pse+0x6c>
   1c93a:	9e 3f       	cpi	r25, 0xFE	; 254
   1c93c:	51 05       	cpc	r21, r1
   1c93e:	68 f0       	brcs	.+26     	; 0x1c95a <__divsf3_pse+0x82>
   1c940:	b6 c0       	rjmp	.+364    	; 0x1caae <__fp_inf>
   1c942:	00 c1       	rjmp	.+512    	; 0x1cb44 <__fp_szero>
   1c944:	5f 3f       	cpi	r21, 0xFF	; 255
   1c946:	ec f3       	brlt	.-6      	; 0x1c942 <__divsf3_pse+0x6a>
   1c948:	98 3e       	cpi	r25, 0xE8	; 232
   1c94a:	dc f3       	brlt	.-10     	; 0x1c942 <__divsf3_pse+0x6a>
   1c94c:	86 95       	lsr	r24
   1c94e:	77 95       	ror	r23
   1c950:	67 95       	ror	r22
   1c952:	b7 95       	ror	r27
   1c954:	f7 95       	ror	r31
   1c956:	9f 5f       	subi	r25, 0xFF	; 255
   1c958:	c9 f7       	brne	.-14     	; 0x1c94c <__divsf3_pse+0x74>
   1c95a:	88 0f       	add	r24, r24
   1c95c:	91 1d       	adc	r25, r1
   1c95e:	96 95       	lsr	r25
   1c960:	87 95       	ror	r24
   1c962:	97 f9       	bld	r25, 7
   1c964:	08 95       	ret
   1c966:	e1 e0       	ldi	r30, 0x01	; 1
   1c968:	66 0f       	add	r22, r22
   1c96a:	77 1f       	adc	r23, r23
   1c96c:	88 1f       	adc	r24, r24
   1c96e:	bb 1f       	adc	r27, r27
   1c970:	62 17       	cp	r22, r18
   1c972:	73 07       	cpc	r23, r19
   1c974:	84 07       	cpc	r24, r20
   1c976:	ba 07       	cpc	r27, r26
   1c978:	20 f0       	brcs	.+8      	; 0x1c982 <__divsf3_pse+0xaa>
   1c97a:	62 1b       	sub	r22, r18
   1c97c:	73 0b       	sbc	r23, r19
   1c97e:	84 0b       	sbc	r24, r20
   1c980:	ba 0b       	sbc	r27, r26
   1c982:	ee 1f       	adc	r30, r30
   1c984:	88 f7       	brcc	.-30     	; 0x1c968 <__divsf3_pse+0x90>
   1c986:	e0 95       	com	r30
   1c988:	08 95       	ret

0001c98a <__fixsfsi>:
   1c98a:	04 d0       	rcall	.+8      	; 0x1c994 <__fixunssfsi>
   1c98c:	68 94       	set
   1c98e:	b1 11       	cpse	r27, r1
   1c990:	d9 c0       	rjmp	.+434    	; 0x1cb44 <__fp_szero>
   1c992:	08 95       	ret

0001c994 <__fixunssfsi>:
   1c994:	bc d0       	rcall	.+376    	; 0x1cb0e <__fp_splitA>
   1c996:	88 f0       	brcs	.+34     	; 0x1c9ba <__fixunssfsi+0x26>
   1c998:	9f 57       	subi	r25, 0x7F	; 127
   1c99a:	90 f0       	brcs	.+36     	; 0x1c9c0 <__fixunssfsi+0x2c>
   1c99c:	b9 2f       	mov	r27, r25
   1c99e:	99 27       	eor	r25, r25
   1c9a0:	b7 51       	subi	r27, 0x17	; 23
   1c9a2:	a0 f0       	brcs	.+40     	; 0x1c9cc <__fixunssfsi+0x38>
   1c9a4:	d1 f0       	breq	.+52     	; 0x1c9da <__fixunssfsi+0x46>
   1c9a6:	66 0f       	add	r22, r22
   1c9a8:	77 1f       	adc	r23, r23
   1c9aa:	88 1f       	adc	r24, r24
   1c9ac:	99 1f       	adc	r25, r25
   1c9ae:	1a f0       	brmi	.+6      	; 0x1c9b6 <__fixunssfsi+0x22>
   1c9b0:	ba 95       	dec	r27
   1c9b2:	c9 f7       	brne	.-14     	; 0x1c9a6 <__fixunssfsi+0x12>
   1c9b4:	12 c0       	rjmp	.+36     	; 0x1c9da <__fixunssfsi+0x46>
   1c9b6:	b1 30       	cpi	r27, 0x01	; 1
   1c9b8:	81 f0       	breq	.+32     	; 0x1c9da <__fixunssfsi+0x46>
   1c9ba:	c3 d0       	rcall	.+390    	; 0x1cb42 <__fp_zero>
   1c9bc:	b1 e0       	ldi	r27, 0x01	; 1
   1c9be:	08 95       	ret
   1c9c0:	c0 c0       	rjmp	.+384    	; 0x1cb42 <__fp_zero>
   1c9c2:	67 2f       	mov	r22, r23
   1c9c4:	78 2f       	mov	r23, r24
   1c9c6:	88 27       	eor	r24, r24
   1c9c8:	b8 5f       	subi	r27, 0xF8	; 248
   1c9ca:	39 f0       	breq	.+14     	; 0x1c9da <__fixunssfsi+0x46>
   1c9cc:	b9 3f       	cpi	r27, 0xF9	; 249
   1c9ce:	cc f3       	brlt	.-14     	; 0x1c9c2 <__fixunssfsi+0x2e>
   1c9d0:	86 95       	lsr	r24
   1c9d2:	77 95       	ror	r23
   1c9d4:	67 95       	ror	r22
   1c9d6:	b3 95       	inc	r27
   1c9d8:	d9 f7       	brne	.-10     	; 0x1c9d0 <__fixunssfsi+0x3c>
   1c9da:	3e f4       	brtc	.+14     	; 0x1c9ea <__fixunssfsi+0x56>
   1c9dc:	90 95       	com	r25
   1c9de:	80 95       	com	r24
   1c9e0:	70 95       	com	r23
   1c9e2:	61 95       	neg	r22
   1c9e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9e6:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9ea:	08 95       	ret

0001c9ec <__floatunsisf>:
   1c9ec:	e8 94       	clt
   1c9ee:	09 c0       	rjmp	.+18     	; 0x1ca02 <__floatsisf+0x12>

0001c9f0 <__floatsisf>:
   1c9f0:	97 fb       	bst	r25, 7
   1c9f2:	3e f4       	brtc	.+14     	; 0x1ca02 <__floatsisf+0x12>
   1c9f4:	90 95       	com	r25
   1c9f6:	80 95       	com	r24
   1c9f8:	70 95       	com	r23
   1c9fa:	61 95       	neg	r22
   1c9fc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9fe:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca00:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca02:	99 23       	and	r25, r25
   1ca04:	a9 f0       	breq	.+42     	; 0x1ca30 <__floatsisf+0x40>
   1ca06:	f9 2f       	mov	r31, r25
   1ca08:	96 e9       	ldi	r25, 0x96	; 150
   1ca0a:	bb 27       	eor	r27, r27
   1ca0c:	93 95       	inc	r25
   1ca0e:	f6 95       	lsr	r31
   1ca10:	87 95       	ror	r24
   1ca12:	77 95       	ror	r23
   1ca14:	67 95       	ror	r22
   1ca16:	b7 95       	ror	r27
   1ca18:	f1 11       	cpse	r31, r1
   1ca1a:	f8 cf       	rjmp	.-16     	; 0x1ca0c <__floatsisf+0x1c>
   1ca1c:	fa f4       	brpl	.+62     	; 0x1ca5c <__floatsisf+0x6c>
   1ca1e:	bb 0f       	add	r27, r27
   1ca20:	11 f4       	brne	.+4      	; 0x1ca26 <__floatsisf+0x36>
   1ca22:	60 ff       	sbrs	r22, 0
   1ca24:	1b c0       	rjmp	.+54     	; 0x1ca5c <__floatsisf+0x6c>
   1ca26:	6f 5f       	subi	r22, 0xFF	; 255
   1ca28:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca2a:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca2c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca2e:	16 c0       	rjmp	.+44     	; 0x1ca5c <__floatsisf+0x6c>
   1ca30:	88 23       	and	r24, r24
   1ca32:	11 f0       	breq	.+4      	; 0x1ca38 <__floatsisf+0x48>
   1ca34:	96 e9       	ldi	r25, 0x96	; 150
   1ca36:	11 c0       	rjmp	.+34     	; 0x1ca5a <__floatsisf+0x6a>
   1ca38:	77 23       	and	r23, r23
   1ca3a:	21 f0       	breq	.+8      	; 0x1ca44 <__floatsisf+0x54>
   1ca3c:	9e e8       	ldi	r25, 0x8E	; 142
   1ca3e:	87 2f       	mov	r24, r23
   1ca40:	76 2f       	mov	r23, r22
   1ca42:	05 c0       	rjmp	.+10     	; 0x1ca4e <__floatsisf+0x5e>
   1ca44:	66 23       	and	r22, r22
   1ca46:	71 f0       	breq	.+28     	; 0x1ca64 <__floatsisf+0x74>
   1ca48:	96 e8       	ldi	r25, 0x86	; 134
   1ca4a:	86 2f       	mov	r24, r22
   1ca4c:	70 e0       	ldi	r23, 0x00	; 0
   1ca4e:	60 e0       	ldi	r22, 0x00	; 0
   1ca50:	2a f0       	brmi	.+10     	; 0x1ca5c <__floatsisf+0x6c>
   1ca52:	9a 95       	dec	r25
   1ca54:	66 0f       	add	r22, r22
   1ca56:	77 1f       	adc	r23, r23
   1ca58:	88 1f       	adc	r24, r24
   1ca5a:	da f7       	brpl	.-10     	; 0x1ca52 <__floatsisf+0x62>
   1ca5c:	88 0f       	add	r24, r24
   1ca5e:	96 95       	lsr	r25
   1ca60:	87 95       	ror	r24
   1ca62:	97 f9       	bld	r25, 7
   1ca64:	08 95       	ret

0001ca66 <__fp_cmp>:
   1ca66:	99 0f       	add	r25, r25
   1ca68:	00 08       	sbc	r0, r0
   1ca6a:	55 0f       	add	r21, r21
   1ca6c:	aa 0b       	sbc	r26, r26
   1ca6e:	e0 e8       	ldi	r30, 0x80	; 128
   1ca70:	fe ef       	ldi	r31, 0xFE	; 254
   1ca72:	16 16       	cp	r1, r22
   1ca74:	17 06       	cpc	r1, r23
   1ca76:	e8 07       	cpc	r30, r24
   1ca78:	f9 07       	cpc	r31, r25
   1ca7a:	c0 f0       	brcs	.+48     	; 0x1caac <__fp_cmp+0x46>
   1ca7c:	12 16       	cp	r1, r18
   1ca7e:	13 06       	cpc	r1, r19
   1ca80:	e4 07       	cpc	r30, r20
   1ca82:	f5 07       	cpc	r31, r21
   1ca84:	98 f0       	brcs	.+38     	; 0x1caac <__fp_cmp+0x46>
   1ca86:	62 1b       	sub	r22, r18
   1ca88:	73 0b       	sbc	r23, r19
   1ca8a:	84 0b       	sbc	r24, r20
   1ca8c:	95 0b       	sbc	r25, r21
   1ca8e:	39 f4       	brne	.+14     	; 0x1ca9e <__fp_cmp+0x38>
   1ca90:	0a 26       	eor	r0, r26
   1ca92:	61 f0       	breq	.+24     	; 0x1caac <__fp_cmp+0x46>
   1ca94:	23 2b       	or	r18, r19
   1ca96:	24 2b       	or	r18, r20
   1ca98:	25 2b       	or	r18, r21
   1ca9a:	21 f4       	brne	.+8      	; 0x1caa4 <__fp_cmp+0x3e>
   1ca9c:	08 95       	ret
   1ca9e:	0a 26       	eor	r0, r26
   1caa0:	09 f4       	brne	.+2      	; 0x1caa4 <__fp_cmp+0x3e>
   1caa2:	a1 40       	sbci	r26, 0x01	; 1
   1caa4:	a6 95       	lsr	r26
   1caa6:	8f ef       	ldi	r24, 0xFF	; 255
   1caa8:	81 1d       	adc	r24, r1
   1caaa:	81 1d       	adc	r24, r1
   1caac:	08 95       	ret

0001caae <__fp_inf>:
   1caae:	97 f9       	bld	r25, 7
   1cab0:	9f 67       	ori	r25, 0x7F	; 127
   1cab2:	80 e8       	ldi	r24, 0x80	; 128
   1cab4:	70 e0       	ldi	r23, 0x00	; 0
   1cab6:	60 e0       	ldi	r22, 0x00	; 0
   1cab8:	08 95       	ret

0001caba <__fp_nan>:
   1caba:	9f ef       	ldi	r25, 0xFF	; 255
   1cabc:	80 ec       	ldi	r24, 0xC0	; 192
   1cabe:	08 95       	ret

0001cac0 <__fp_pscA>:
   1cac0:	00 24       	eor	r0, r0
   1cac2:	0a 94       	dec	r0
   1cac4:	16 16       	cp	r1, r22
   1cac6:	17 06       	cpc	r1, r23
   1cac8:	18 06       	cpc	r1, r24
   1caca:	09 06       	cpc	r0, r25
   1cacc:	08 95       	ret

0001cace <__fp_pscB>:
   1cace:	00 24       	eor	r0, r0
   1cad0:	0a 94       	dec	r0
   1cad2:	12 16       	cp	r1, r18
   1cad4:	13 06       	cpc	r1, r19
   1cad6:	14 06       	cpc	r1, r20
   1cad8:	05 06       	cpc	r0, r21
   1cada:	08 95       	ret

0001cadc <__fp_round>:
   1cadc:	09 2e       	mov	r0, r25
   1cade:	03 94       	inc	r0
   1cae0:	00 0c       	add	r0, r0
   1cae2:	11 f4       	brne	.+4      	; 0x1cae8 <__fp_round+0xc>
   1cae4:	88 23       	and	r24, r24
   1cae6:	52 f0       	brmi	.+20     	; 0x1cafc <__fp_round+0x20>
   1cae8:	bb 0f       	add	r27, r27
   1caea:	40 f4       	brcc	.+16     	; 0x1cafc <__fp_round+0x20>
   1caec:	bf 2b       	or	r27, r31
   1caee:	11 f4       	brne	.+4      	; 0x1caf4 <__fp_round+0x18>
   1caf0:	60 ff       	sbrs	r22, 0
   1caf2:	04 c0       	rjmp	.+8      	; 0x1cafc <__fp_round+0x20>
   1caf4:	6f 5f       	subi	r22, 0xFF	; 255
   1caf6:	7f 4f       	sbci	r23, 0xFF	; 255
   1caf8:	8f 4f       	sbci	r24, 0xFF	; 255
   1cafa:	9f 4f       	sbci	r25, 0xFF	; 255
   1cafc:	08 95       	ret

0001cafe <__fp_split3>:
   1cafe:	57 fd       	sbrc	r21, 7
   1cb00:	90 58       	subi	r25, 0x80	; 128
   1cb02:	44 0f       	add	r20, r20
   1cb04:	55 1f       	adc	r21, r21
   1cb06:	59 f0       	breq	.+22     	; 0x1cb1e <__fp_splitA+0x10>
   1cb08:	5f 3f       	cpi	r21, 0xFF	; 255
   1cb0a:	71 f0       	breq	.+28     	; 0x1cb28 <__fp_splitA+0x1a>
   1cb0c:	47 95       	ror	r20

0001cb0e <__fp_splitA>:
   1cb0e:	88 0f       	add	r24, r24
   1cb10:	97 fb       	bst	r25, 7
   1cb12:	99 1f       	adc	r25, r25
   1cb14:	61 f0       	breq	.+24     	; 0x1cb2e <__fp_splitA+0x20>
   1cb16:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb18:	79 f0       	breq	.+30     	; 0x1cb38 <__fp_splitA+0x2a>
   1cb1a:	87 95       	ror	r24
   1cb1c:	08 95       	ret
   1cb1e:	12 16       	cp	r1, r18
   1cb20:	13 06       	cpc	r1, r19
   1cb22:	14 06       	cpc	r1, r20
   1cb24:	55 1f       	adc	r21, r21
   1cb26:	f2 cf       	rjmp	.-28     	; 0x1cb0c <__fp_split3+0xe>
   1cb28:	46 95       	lsr	r20
   1cb2a:	f1 df       	rcall	.-30     	; 0x1cb0e <__fp_splitA>
   1cb2c:	08 c0       	rjmp	.+16     	; 0x1cb3e <__fp_splitA+0x30>
   1cb2e:	16 16       	cp	r1, r22
   1cb30:	17 06       	cpc	r1, r23
   1cb32:	18 06       	cpc	r1, r24
   1cb34:	99 1f       	adc	r25, r25
   1cb36:	f1 cf       	rjmp	.-30     	; 0x1cb1a <__fp_splitA+0xc>
   1cb38:	86 95       	lsr	r24
   1cb3a:	71 05       	cpc	r23, r1
   1cb3c:	61 05       	cpc	r22, r1
   1cb3e:	08 94       	sec
   1cb40:	08 95       	ret

0001cb42 <__fp_zero>:
   1cb42:	e8 94       	clt

0001cb44 <__fp_szero>:
   1cb44:	bb 27       	eor	r27, r27
   1cb46:	66 27       	eor	r22, r22
   1cb48:	77 27       	eor	r23, r23
   1cb4a:	cb 01       	movw	r24, r22
   1cb4c:	97 f9       	bld	r25, 7
   1cb4e:	08 95       	ret

0001cb50 <__gesf2>:
   1cb50:	8a df       	rcall	.-236    	; 0x1ca66 <__fp_cmp>
   1cb52:	08 f4       	brcc	.+2      	; 0x1cb56 <__gesf2+0x6>
   1cb54:	8f ef       	ldi	r24, 0xFF	; 255
   1cb56:	08 95       	ret

0001cb58 <__mulsf3>:
   1cb58:	0b d0       	rcall	.+22     	; 0x1cb70 <__mulsf3x>
   1cb5a:	c0 cf       	rjmp	.-128    	; 0x1cadc <__fp_round>
   1cb5c:	b1 df       	rcall	.-158    	; 0x1cac0 <__fp_pscA>
   1cb5e:	28 f0       	brcs	.+10     	; 0x1cb6a <__mulsf3+0x12>
   1cb60:	b6 df       	rcall	.-148    	; 0x1cace <__fp_pscB>
   1cb62:	18 f0       	brcs	.+6      	; 0x1cb6a <__mulsf3+0x12>
   1cb64:	95 23       	and	r25, r21
   1cb66:	09 f0       	breq	.+2      	; 0x1cb6a <__mulsf3+0x12>
   1cb68:	a2 cf       	rjmp	.-188    	; 0x1caae <__fp_inf>
   1cb6a:	a7 cf       	rjmp	.-178    	; 0x1caba <__fp_nan>
   1cb6c:	11 24       	eor	r1, r1
   1cb6e:	ea cf       	rjmp	.-44     	; 0x1cb44 <__fp_szero>

0001cb70 <__mulsf3x>:
   1cb70:	c6 df       	rcall	.-116    	; 0x1cafe <__fp_split3>
   1cb72:	a0 f3       	brcs	.-24     	; 0x1cb5c <__mulsf3+0x4>

0001cb74 <__mulsf3_pse>:
   1cb74:	95 9f       	mul	r25, r21
   1cb76:	d1 f3       	breq	.-12     	; 0x1cb6c <__mulsf3+0x14>
   1cb78:	95 0f       	add	r25, r21
   1cb7a:	50 e0       	ldi	r21, 0x00	; 0
   1cb7c:	55 1f       	adc	r21, r21
   1cb7e:	62 9f       	mul	r22, r18
   1cb80:	f0 01       	movw	r30, r0
   1cb82:	72 9f       	mul	r23, r18
   1cb84:	bb 27       	eor	r27, r27
   1cb86:	f0 0d       	add	r31, r0
   1cb88:	b1 1d       	adc	r27, r1
   1cb8a:	63 9f       	mul	r22, r19
   1cb8c:	aa 27       	eor	r26, r26
   1cb8e:	f0 0d       	add	r31, r0
   1cb90:	b1 1d       	adc	r27, r1
   1cb92:	aa 1f       	adc	r26, r26
   1cb94:	64 9f       	mul	r22, r20
   1cb96:	66 27       	eor	r22, r22
   1cb98:	b0 0d       	add	r27, r0
   1cb9a:	a1 1d       	adc	r26, r1
   1cb9c:	66 1f       	adc	r22, r22
   1cb9e:	82 9f       	mul	r24, r18
   1cba0:	22 27       	eor	r18, r18
   1cba2:	b0 0d       	add	r27, r0
   1cba4:	a1 1d       	adc	r26, r1
   1cba6:	62 1f       	adc	r22, r18
   1cba8:	73 9f       	mul	r23, r19
   1cbaa:	b0 0d       	add	r27, r0
   1cbac:	a1 1d       	adc	r26, r1
   1cbae:	62 1f       	adc	r22, r18
   1cbb0:	83 9f       	mul	r24, r19
   1cbb2:	a0 0d       	add	r26, r0
   1cbb4:	61 1d       	adc	r22, r1
   1cbb6:	22 1f       	adc	r18, r18
   1cbb8:	74 9f       	mul	r23, r20
   1cbba:	33 27       	eor	r19, r19
   1cbbc:	a0 0d       	add	r26, r0
   1cbbe:	61 1d       	adc	r22, r1
   1cbc0:	23 1f       	adc	r18, r19
   1cbc2:	84 9f       	mul	r24, r20
   1cbc4:	60 0d       	add	r22, r0
   1cbc6:	21 1d       	adc	r18, r1
   1cbc8:	82 2f       	mov	r24, r18
   1cbca:	76 2f       	mov	r23, r22
   1cbcc:	6a 2f       	mov	r22, r26
   1cbce:	11 24       	eor	r1, r1
   1cbd0:	9f 57       	subi	r25, 0x7F	; 127
   1cbd2:	50 40       	sbci	r21, 0x00	; 0
   1cbd4:	8a f0       	brmi	.+34     	; 0x1cbf8 <__mulsf3_pse+0x84>
   1cbd6:	e1 f0       	breq	.+56     	; 0x1cc10 <__mulsf3_pse+0x9c>
   1cbd8:	88 23       	and	r24, r24
   1cbda:	4a f0       	brmi	.+18     	; 0x1cbee <__mulsf3_pse+0x7a>
   1cbdc:	ee 0f       	add	r30, r30
   1cbde:	ff 1f       	adc	r31, r31
   1cbe0:	bb 1f       	adc	r27, r27
   1cbe2:	66 1f       	adc	r22, r22
   1cbe4:	77 1f       	adc	r23, r23
   1cbe6:	88 1f       	adc	r24, r24
   1cbe8:	91 50       	subi	r25, 0x01	; 1
   1cbea:	50 40       	sbci	r21, 0x00	; 0
   1cbec:	a9 f7       	brne	.-22     	; 0x1cbd8 <__mulsf3_pse+0x64>
   1cbee:	9e 3f       	cpi	r25, 0xFE	; 254
   1cbf0:	51 05       	cpc	r21, r1
   1cbf2:	70 f0       	brcs	.+28     	; 0x1cc10 <__mulsf3_pse+0x9c>
   1cbf4:	5c cf       	rjmp	.-328    	; 0x1caae <__fp_inf>
   1cbf6:	a6 cf       	rjmp	.-180    	; 0x1cb44 <__fp_szero>
   1cbf8:	5f 3f       	cpi	r21, 0xFF	; 255
   1cbfa:	ec f3       	brlt	.-6      	; 0x1cbf6 <__mulsf3_pse+0x82>
   1cbfc:	98 3e       	cpi	r25, 0xE8	; 232
   1cbfe:	dc f3       	brlt	.-10     	; 0x1cbf6 <__mulsf3_pse+0x82>
   1cc00:	86 95       	lsr	r24
   1cc02:	77 95       	ror	r23
   1cc04:	67 95       	ror	r22
   1cc06:	b7 95       	ror	r27
   1cc08:	f7 95       	ror	r31
   1cc0a:	e7 95       	ror	r30
   1cc0c:	9f 5f       	subi	r25, 0xFF	; 255
   1cc0e:	c1 f7       	brne	.-16     	; 0x1cc00 <__mulsf3_pse+0x8c>
   1cc10:	fe 2b       	or	r31, r30
   1cc12:	88 0f       	add	r24, r24
   1cc14:	91 1d       	adc	r25, r1
   1cc16:	96 95       	lsr	r25
   1cc18:	87 95       	ror	r24
   1cc1a:	97 f9       	bld	r25, 7
   1cc1c:	08 95       	ret

0001cc1e <round>:
   1cc1e:	77 df       	rcall	.-274    	; 0x1cb0e <__fp_splitA>
   1cc20:	e0 f0       	brcs	.+56     	; 0x1cc5a <round+0x3c>
   1cc22:	9e 37       	cpi	r25, 0x7E	; 126
   1cc24:	d8 f0       	brcs	.+54     	; 0x1cc5c <round+0x3e>
   1cc26:	96 39       	cpi	r25, 0x96	; 150
   1cc28:	b8 f4       	brcc	.+46     	; 0x1cc58 <round+0x3a>
   1cc2a:	9e 38       	cpi	r25, 0x8E	; 142
   1cc2c:	48 f4       	brcc	.+18     	; 0x1cc40 <round+0x22>
   1cc2e:	67 2f       	mov	r22, r23
   1cc30:	78 2f       	mov	r23, r24
   1cc32:	88 27       	eor	r24, r24
   1cc34:	98 5f       	subi	r25, 0xF8	; 248
   1cc36:	f9 cf       	rjmp	.-14     	; 0x1cc2a <round+0xc>
   1cc38:	86 95       	lsr	r24
   1cc3a:	77 95       	ror	r23
   1cc3c:	67 95       	ror	r22
   1cc3e:	93 95       	inc	r25
   1cc40:	95 39       	cpi	r25, 0x95	; 149
   1cc42:	d0 f3       	brcs	.-12     	; 0x1cc38 <round+0x1a>
   1cc44:	b6 2f       	mov	r27, r22
   1cc46:	b1 70       	andi	r27, 0x01	; 1
   1cc48:	6b 0f       	add	r22, r27
   1cc4a:	71 1d       	adc	r23, r1
   1cc4c:	81 1d       	adc	r24, r1
   1cc4e:	20 f4       	brcc	.+8      	; 0x1cc58 <round+0x3a>
   1cc50:	87 95       	ror	r24
   1cc52:	77 95       	ror	r23
   1cc54:	67 95       	ror	r22
   1cc56:	93 95       	inc	r25
   1cc58:	02 c0       	rjmp	.+4      	; 0x1cc5e <__fp_mintl>
   1cc5a:	1c c0       	rjmp	.+56     	; 0x1cc94 <__fp_mpack>
   1cc5c:	73 cf       	rjmp	.-282    	; 0x1cb44 <__fp_szero>

0001cc5e <__fp_mintl>:
   1cc5e:	88 23       	and	r24, r24
   1cc60:	71 f4       	brne	.+28     	; 0x1cc7e <__fp_mintl+0x20>
   1cc62:	77 23       	and	r23, r23
   1cc64:	21 f0       	breq	.+8      	; 0x1cc6e <__fp_mintl+0x10>
   1cc66:	98 50       	subi	r25, 0x08	; 8
   1cc68:	87 2b       	or	r24, r23
   1cc6a:	76 2f       	mov	r23, r22
   1cc6c:	07 c0       	rjmp	.+14     	; 0x1cc7c <__fp_mintl+0x1e>
   1cc6e:	66 23       	and	r22, r22
   1cc70:	11 f4       	brne	.+4      	; 0x1cc76 <__fp_mintl+0x18>
   1cc72:	99 27       	eor	r25, r25
   1cc74:	0d c0       	rjmp	.+26     	; 0x1cc90 <__fp_mintl+0x32>
   1cc76:	90 51       	subi	r25, 0x10	; 16
   1cc78:	86 2b       	or	r24, r22
   1cc7a:	70 e0       	ldi	r23, 0x00	; 0
   1cc7c:	60 e0       	ldi	r22, 0x00	; 0
   1cc7e:	2a f0       	brmi	.+10     	; 0x1cc8a <__fp_mintl+0x2c>
   1cc80:	9a 95       	dec	r25
   1cc82:	66 0f       	add	r22, r22
   1cc84:	77 1f       	adc	r23, r23
   1cc86:	88 1f       	adc	r24, r24
   1cc88:	da f7       	brpl	.-10     	; 0x1cc80 <__fp_mintl+0x22>
   1cc8a:	88 0f       	add	r24, r24
   1cc8c:	96 95       	lsr	r25
   1cc8e:	87 95       	ror	r24
   1cc90:	97 f9       	bld	r25, 7
   1cc92:	08 95       	ret

0001cc94 <__fp_mpack>:
   1cc94:	9f 3f       	cpi	r25, 0xFF	; 255
   1cc96:	31 f0       	breq	.+12     	; 0x1cca4 <__fp_mpack_finite+0xc>

0001cc98 <__fp_mpack_finite>:
   1cc98:	91 50       	subi	r25, 0x01	; 1
   1cc9a:	20 f4       	brcc	.+8      	; 0x1cca4 <__fp_mpack_finite+0xc>
   1cc9c:	87 95       	ror	r24
   1cc9e:	77 95       	ror	r23
   1cca0:	67 95       	ror	r22
   1cca2:	b7 95       	ror	r27
   1cca4:	88 0f       	add	r24, r24
   1cca6:	91 1d       	adc	r25, r1
   1cca8:	96 95       	lsr	r25
   1ccaa:	87 95       	ror	r24
   1ccac:	97 f9       	bld	r25, 7
   1ccae:	08 95       	ret

0001ccb0 <calloc>:
   1ccb0:	0f 93       	push	r16
   1ccb2:	1f 93       	push	r17
   1ccb4:	cf 93       	push	r28
   1ccb6:	df 93       	push	r29
   1ccb8:	86 9f       	mul	r24, r22
   1ccba:	80 01       	movw	r16, r0
   1ccbc:	87 9f       	mul	r24, r23
   1ccbe:	10 0d       	add	r17, r0
   1ccc0:	96 9f       	mul	r25, r22
   1ccc2:	10 0d       	add	r17, r0
   1ccc4:	11 24       	eor	r1, r1
   1ccc6:	c8 01       	movw	r24, r16
   1ccc8:	0d d0       	rcall	.+26     	; 0x1cce4 <malloc>
   1ccca:	ec 01       	movw	r28, r24
   1cccc:	00 97       	sbiw	r24, 0x00	; 0
   1ccce:	21 f0       	breq	.+8      	; 0x1ccd8 <calloc+0x28>
   1ccd0:	a8 01       	movw	r20, r16
   1ccd2:	60 e0       	ldi	r22, 0x00	; 0
   1ccd4:	70 e0       	ldi	r23, 0x00	; 0
   1ccd6:	27 d1       	rcall	.+590    	; 0x1cf26 <memset>
   1ccd8:	ce 01       	movw	r24, r28
   1ccda:	df 91       	pop	r29
   1ccdc:	cf 91       	pop	r28
   1ccde:	1f 91       	pop	r17
   1cce0:	0f 91       	pop	r16
   1cce2:	08 95       	ret

0001cce4 <malloc>:
   1cce4:	0f 93       	push	r16
   1cce6:	1f 93       	push	r17
   1cce8:	cf 93       	push	r28
   1ccea:	df 93       	push	r29
   1ccec:	82 30       	cpi	r24, 0x02	; 2
   1ccee:	91 05       	cpc	r25, r1
   1ccf0:	10 f4       	brcc	.+4      	; 0x1ccf6 <malloc+0x12>
   1ccf2:	82 e0       	ldi	r24, 0x02	; 2
   1ccf4:	90 e0       	ldi	r25, 0x00	; 0
   1ccf6:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <__flp>
   1ccfa:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <__flp+0x1>
   1ccfe:	20 e0       	ldi	r18, 0x00	; 0
   1cd00:	30 e0       	ldi	r19, 0x00	; 0
   1cd02:	a0 e0       	ldi	r26, 0x00	; 0
   1cd04:	b0 e0       	ldi	r27, 0x00	; 0
   1cd06:	30 97       	sbiw	r30, 0x00	; 0
   1cd08:	19 f1       	breq	.+70     	; 0x1cd50 <malloc+0x6c>
   1cd0a:	40 81       	ld	r20, Z
   1cd0c:	51 81       	ldd	r21, Z+1	; 0x01
   1cd0e:	02 81       	ldd	r16, Z+2	; 0x02
   1cd10:	13 81       	ldd	r17, Z+3	; 0x03
   1cd12:	48 17       	cp	r20, r24
   1cd14:	59 07       	cpc	r21, r25
   1cd16:	c8 f0       	brcs	.+50     	; 0x1cd4a <malloc+0x66>
   1cd18:	84 17       	cp	r24, r20
   1cd1a:	95 07       	cpc	r25, r21
   1cd1c:	69 f4       	brne	.+26     	; 0x1cd38 <malloc+0x54>
   1cd1e:	10 97       	sbiw	r26, 0x00	; 0
   1cd20:	31 f0       	breq	.+12     	; 0x1cd2e <malloc+0x4a>
   1cd22:	12 96       	adiw	r26, 0x02	; 2
   1cd24:	0c 93       	st	X, r16
   1cd26:	12 97       	sbiw	r26, 0x02	; 2
   1cd28:	13 96       	adiw	r26, 0x03	; 3
   1cd2a:	1c 93       	st	X, r17
   1cd2c:	27 c0       	rjmp	.+78     	; 0x1cd7c <malloc+0x98>
   1cd2e:	00 93 b5 22 	sts	0x22B5, r16	; 0x8022b5 <__flp>
   1cd32:	10 93 b6 22 	sts	0x22B6, r17	; 0x8022b6 <__flp+0x1>
   1cd36:	22 c0       	rjmp	.+68     	; 0x1cd7c <malloc+0x98>
   1cd38:	21 15       	cp	r18, r1
   1cd3a:	31 05       	cpc	r19, r1
   1cd3c:	19 f0       	breq	.+6      	; 0x1cd44 <malloc+0x60>
   1cd3e:	42 17       	cp	r20, r18
   1cd40:	53 07       	cpc	r21, r19
   1cd42:	18 f4       	brcc	.+6      	; 0x1cd4a <malloc+0x66>
   1cd44:	9a 01       	movw	r18, r20
   1cd46:	bd 01       	movw	r22, r26
   1cd48:	ef 01       	movw	r28, r30
   1cd4a:	df 01       	movw	r26, r30
   1cd4c:	f8 01       	movw	r30, r16
   1cd4e:	db cf       	rjmp	.-74     	; 0x1cd06 <malloc+0x22>
   1cd50:	21 15       	cp	r18, r1
   1cd52:	31 05       	cpc	r19, r1
   1cd54:	f9 f0       	breq	.+62     	; 0x1cd94 <malloc+0xb0>
   1cd56:	28 1b       	sub	r18, r24
   1cd58:	39 0b       	sbc	r19, r25
   1cd5a:	24 30       	cpi	r18, 0x04	; 4
   1cd5c:	31 05       	cpc	r19, r1
   1cd5e:	80 f4       	brcc	.+32     	; 0x1cd80 <malloc+0x9c>
   1cd60:	8a 81       	ldd	r24, Y+2	; 0x02
   1cd62:	9b 81       	ldd	r25, Y+3	; 0x03
   1cd64:	61 15       	cp	r22, r1
   1cd66:	71 05       	cpc	r23, r1
   1cd68:	21 f0       	breq	.+8      	; 0x1cd72 <malloc+0x8e>
   1cd6a:	fb 01       	movw	r30, r22
   1cd6c:	93 83       	std	Z+3, r25	; 0x03
   1cd6e:	82 83       	std	Z+2, r24	; 0x02
   1cd70:	04 c0       	rjmp	.+8      	; 0x1cd7a <malloc+0x96>
   1cd72:	90 93 b6 22 	sts	0x22B6, r25	; 0x8022b6 <__flp+0x1>
   1cd76:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <__flp>
   1cd7a:	fe 01       	movw	r30, r28
   1cd7c:	32 96       	adiw	r30, 0x02	; 2
   1cd7e:	44 c0       	rjmp	.+136    	; 0x1ce08 <malloc+0x124>
   1cd80:	fe 01       	movw	r30, r28
   1cd82:	e2 0f       	add	r30, r18
   1cd84:	f3 1f       	adc	r31, r19
   1cd86:	81 93       	st	Z+, r24
   1cd88:	91 93       	st	Z+, r25
   1cd8a:	22 50       	subi	r18, 0x02	; 2
   1cd8c:	31 09       	sbc	r19, r1
   1cd8e:	39 83       	std	Y+1, r19	; 0x01
   1cd90:	28 83       	st	Y, r18
   1cd92:	3a c0       	rjmp	.+116    	; 0x1ce08 <malloc+0x124>
   1cd94:	20 91 b3 22 	lds	r18, 0x22B3	; 0x8022b3 <__brkval>
   1cd98:	30 91 b4 22 	lds	r19, 0x22B4	; 0x8022b4 <__brkval+0x1>
   1cd9c:	23 2b       	or	r18, r19
   1cd9e:	41 f4       	brne	.+16     	; 0x1cdb0 <malloc+0xcc>
   1cda0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cda4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cda8:	30 93 b4 22 	sts	0x22B4, r19	; 0x8022b4 <__brkval+0x1>
   1cdac:	20 93 b3 22 	sts	0x22B3, r18	; 0x8022b3 <__brkval>
   1cdb0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cdb4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cdb8:	21 15       	cp	r18, r1
   1cdba:	31 05       	cpc	r19, r1
   1cdbc:	41 f4       	brne	.+16     	; 0x1cdce <malloc+0xea>
   1cdbe:	2d b7       	in	r18, 0x3d	; 61
   1cdc0:	3e b7       	in	r19, 0x3e	; 62
   1cdc2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cdc6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cdca:	24 1b       	sub	r18, r20
   1cdcc:	35 0b       	sbc	r19, r21
   1cdce:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <__brkval>
   1cdd2:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <__brkval+0x1>
   1cdd6:	e2 17       	cp	r30, r18
   1cdd8:	f3 07       	cpc	r31, r19
   1cdda:	a0 f4       	brcc	.+40     	; 0x1ce04 <malloc+0x120>
   1cddc:	2e 1b       	sub	r18, r30
   1cdde:	3f 0b       	sbc	r19, r31
   1cde0:	28 17       	cp	r18, r24
   1cde2:	39 07       	cpc	r19, r25
   1cde4:	78 f0       	brcs	.+30     	; 0x1ce04 <malloc+0x120>
   1cde6:	ac 01       	movw	r20, r24
   1cde8:	4e 5f       	subi	r20, 0xFE	; 254
   1cdea:	5f 4f       	sbci	r21, 0xFF	; 255
   1cdec:	24 17       	cp	r18, r20
   1cdee:	35 07       	cpc	r19, r21
   1cdf0:	48 f0       	brcs	.+18     	; 0x1ce04 <malloc+0x120>
   1cdf2:	4e 0f       	add	r20, r30
   1cdf4:	5f 1f       	adc	r21, r31
   1cdf6:	50 93 b4 22 	sts	0x22B4, r21	; 0x8022b4 <__brkval+0x1>
   1cdfa:	40 93 b3 22 	sts	0x22B3, r20	; 0x8022b3 <__brkval>
   1cdfe:	81 93       	st	Z+, r24
   1ce00:	91 93       	st	Z+, r25
   1ce02:	02 c0       	rjmp	.+4      	; 0x1ce08 <malloc+0x124>
   1ce04:	e0 e0       	ldi	r30, 0x00	; 0
   1ce06:	f0 e0       	ldi	r31, 0x00	; 0
   1ce08:	cf 01       	movw	r24, r30
   1ce0a:	df 91       	pop	r29
   1ce0c:	cf 91       	pop	r28
   1ce0e:	1f 91       	pop	r17
   1ce10:	0f 91       	pop	r16
   1ce12:	08 95       	ret

0001ce14 <free>:
   1ce14:	cf 93       	push	r28
   1ce16:	df 93       	push	r29
   1ce18:	00 97       	sbiw	r24, 0x00	; 0
   1ce1a:	09 f4       	brne	.+2      	; 0x1ce1e <free+0xa>
   1ce1c:	81 c0       	rjmp	.+258    	; 0x1cf20 <free+0x10c>
   1ce1e:	fc 01       	movw	r30, r24
   1ce20:	32 97       	sbiw	r30, 0x02	; 2
   1ce22:	13 82       	std	Z+3, r1	; 0x03
   1ce24:	12 82       	std	Z+2, r1	; 0x02
   1ce26:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <__flp>
   1ce2a:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <__flp+0x1>
   1ce2e:	10 97       	sbiw	r26, 0x00	; 0
   1ce30:	81 f4       	brne	.+32     	; 0x1ce52 <free+0x3e>
   1ce32:	20 81       	ld	r18, Z
   1ce34:	31 81       	ldd	r19, Z+1	; 0x01
   1ce36:	82 0f       	add	r24, r18
   1ce38:	93 1f       	adc	r25, r19
   1ce3a:	20 91 b3 22 	lds	r18, 0x22B3	; 0x8022b3 <__brkval>
   1ce3e:	30 91 b4 22 	lds	r19, 0x22B4	; 0x8022b4 <__brkval+0x1>
   1ce42:	28 17       	cp	r18, r24
   1ce44:	39 07       	cpc	r19, r25
   1ce46:	51 f5       	brne	.+84     	; 0x1ce9c <free+0x88>
   1ce48:	f0 93 b4 22 	sts	0x22B4, r31	; 0x8022b4 <__brkval+0x1>
   1ce4c:	e0 93 b3 22 	sts	0x22B3, r30	; 0x8022b3 <__brkval>
   1ce50:	67 c0       	rjmp	.+206    	; 0x1cf20 <free+0x10c>
   1ce52:	ed 01       	movw	r28, r26
   1ce54:	20 e0       	ldi	r18, 0x00	; 0
   1ce56:	30 e0       	ldi	r19, 0x00	; 0
   1ce58:	ce 17       	cp	r28, r30
   1ce5a:	df 07       	cpc	r29, r31
   1ce5c:	40 f4       	brcc	.+16     	; 0x1ce6e <free+0x5a>
   1ce5e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ce60:	5b 81       	ldd	r21, Y+3	; 0x03
   1ce62:	9e 01       	movw	r18, r28
   1ce64:	41 15       	cp	r20, r1
   1ce66:	51 05       	cpc	r21, r1
   1ce68:	f1 f0       	breq	.+60     	; 0x1cea6 <free+0x92>
   1ce6a:	ea 01       	movw	r28, r20
   1ce6c:	f5 cf       	rjmp	.-22     	; 0x1ce58 <free+0x44>
   1ce6e:	d3 83       	std	Z+3, r29	; 0x03
   1ce70:	c2 83       	std	Z+2, r28	; 0x02
   1ce72:	40 81       	ld	r20, Z
   1ce74:	51 81       	ldd	r21, Z+1	; 0x01
   1ce76:	84 0f       	add	r24, r20
   1ce78:	95 1f       	adc	r25, r21
   1ce7a:	c8 17       	cp	r28, r24
   1ce7c:	d9 07       	cpc	r29, r25
   1ce7e:	59 f4       	brne	.+22     	; 0x1ce96 <free+0x82>
   1ce80:	88 81       	ld	r24, Y
   1ce82:	99 81       	ldd	r25, Y+1	; 0x01
   1ce84:	84 0f       	add	r24, r20
   1ce86:	95 1f       	adc	r25, r21
   1ce88:	02 96       	adiw	r24, 0x02	; 2
   1ce8a:	91 83       	std	Z+1, r25	; 0x01
   1ce8c:	80 83       	st	Z, r24
   1ce8e:	8a 81       	ldd	r24, Y+2	; 0x02
   1ce90:	9b 81       	ldd	r25, Y+3	; 0x03
   1ce92:	93 83       	std	Z+3, r25	; 0x03
   1ce94:	82 83       	std	Z+2, r24	; 0x02
   1ce96:	21 15       	cp	r18, r1
   1ce98:	31 05       	cpc	r19, r1
   1ce9a:	29 f4       	brne	.+10     	; 0x1cea6 <free+0x92>
   1ce9c:	f0 93 b6 22 	sts	0x22B6, r31	; 0x8022b6 <__flp+0x1>
   1cea0:	e0 93 b5 22 	sts	0x22B5, r30	; 0x8022b5 <__flp>
   1cea4:	3d c0       	rjmp	.+122    	; 0x1cf20 <free+0x10c>
   1cea6:	e9 01       	movw	r28, r18
   1cea8:	fb 83       	std	Y+3, r31	; 0x03
   1ceaa:	ea 83       	std	Y+2, r30	; 0x02
   1ceac:	49 91       	ld	r20, Y+
   1ceae:	59 91       	ld	r21, Y+
   1ceb0:	c4 0f       	add	r28, r20
   1ceb2:	d5 1f       	adc	r29, r21
   1ceb4:	ec 17       	cp	r30, r28
   1ceb6:	fd 07       	cpc	r31, r29
   1ceb8:	61 f4       	brne	.+24     	; 0x1ced2 <free+0xbe>
   1ceba:	80 81       	ld	r24, Z
   1cebc:	91 81       	ldd	r25, Z+1	; 0x01
   1cebe:	84 0f       	add	r24, r20
   1cec0:	95 1f       	adc	r25, r21
   1cec2:	02 96       	adiw	r24, 0x02	; 2
   1cec4:	e9 01       	movw	r28, r18
   1cec6:	99 83       	std	Y+1, r25	; 0x01
   1cec8:	88 83       	st	Y, r24
   1ceca:	82 81       	ldd	r24, Z+2	; 0x02
   1cecc:	93 81       	ldd	r25, Z+3	; 0x03
   1cece:	9b 83       	std	Y+3, r25	; 0x03
   1ced0:	8a 83       	std	Y+2, r24	; 0x02
   1ced2:	e0 e0       	ldi	r30, 0x00	; 0
   1ced4:	f0 e0       	ldi	r31, 0x00	; 0
   1ced6:	12 96       	adiw	r26, 0x02	; 2
   1ced8:	8d 91       	ld	r24, X+
   1ceda:	9c 91       	ld	r25, X
   1cedc:	13 97       	sbiw	r26, 0x03	; 3
   1cede:	00 97       	sbiw	r24, 0x00	; 0
   1cee0:	19 f0       	breq	.+6      	; 0x1cee8 <free+0xd4>
   1cee2:	fd 01       	movw	r30, r26
   1cee4:	dc 01       	movw	r26, r24
   1cee6:	f7 cf       	rjmp	.-18     	; 0x1ced6 <free+0xc2>
   1cee8:	8d 91       	ld	r24, X+
   1ceea:	9c 91       	ld	r25, X
   1ceec:	11 97       	sbiw	r26, 0x01	; 1
   1ceee:	9d 01       	movw	r18, r26
   1cef0:	2e 5f       	subi	r18, 0xFE	; 254
   1cef2:	3f 4f       	sbci	r19, 0xFF	; 255
   1cef4:	82 0f       	add	r24, r18
   1cef6:	93 1f       	adc	r25, r19
   1cef8:	20 91 b3 22 	lds	r18, 0x22B3	; 0x8022b3 <__brkval>
   1cefc:	30 91 b4 22 	lds	r19, 0x22B4	; 0x8022b4 <__brkval+0x1>
   1cf00:	28 17       	cp	r18, r24
   1cf02:	39 07       	cpc	r19, r25
   1cf04:	69 f4       	brne	.+26     	; 0x1cf20 <free+0x10c>
   1cf06:	30 97       	sbiw	r30, 0x00	; 0
   1cf08:	29 f4       	brne	.+10     	; 0x1cf14 <free+0x100>
   1cf0a:	10 92 b6 22 	sts	0x22B6, r1	; 0x8022b6 <__flp+0x1>
   1cf0e:	10 92 b5 22 	sts	0x22B5, r1	; 0x8022b5 <__flp>
   1cf12:	02 c0       	rjmp	.+4      	; 0x1cf18 <free+0x104>
   1cf14:	13 82       	std	Z+3, r1	; 0x03
   1cf16:	12 82       	std	Z+2, r1	; 0x02
   1cf18:	b0 93 b4 22 	sts	0x22B4, r27	; 0x8022b4 <__brkval+0x1>
   1cf1c:	a0 93 b3 22 	sts	0x22B3, r26	; 0x8022b3 <__brkval>
   1cf20:	df 91       	pop	r29
   1cf22:	cf 91       	pop	r28
   1cf24:	08 95       	ret

0001cf26 <memset>:
   1cf26:	dc 01       	movw	r26, r24
   1cf28:	01 c0       	rjmp	.+2      	; 0x1cf2c <memset+0x6>
   1cf2a:	6d 93       	st	X+, r22
   1cf2c:	41 50       	subi	r20, 0x01	; 1
   1cf2e:	50 40       	sbci	r21, 0x00	; 0
   1cf30:	e0 f7       	brcc	.-8      	; 0x1cf2a <memset+0x4>
   1cf32:	08 95       	ret

0001cf34 <_exit>:
   1cf34:	f8 94       	cli

0001cf36 <__stop_program>:
   1cf36:	ff cf       	rjmp	.-2      	; 0x1cf36 <__stop_program>
